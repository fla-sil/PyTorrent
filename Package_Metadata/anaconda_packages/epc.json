{"title": "epc", "access": "public", "summary": "EPC (RPC stack for Emacs Lisp) implementation in Python", "updated": "2018-11-03", "detail": {"meta": {"license": "GPL3", "license_url": "http://opensource.org/search/node/GPL3", "home": "https://github.com/tkf/python-epc", "home_url": "https://github.com/tkf/python-epc", "documentation": null, "documentation_url": null, "development": null, "development_url": null, "download_count": 1649, "last_upload": "Last upload: 1 year and 5 months ago"}, "installers": ["conda install -c conda-forge epc", "conda install -c conda-forge/label/cf201901 epc", "conda install -c conda-forge/label/cf202003 epc"], "note": " This package contains files in non-standard\n           labels", "platform_versions": [["\n  ", "v0.0.5"]], "description": "<div class=\"panel\">\n      <h3>Description</h3>\n      \n        \n        <div><h1 id=\"epc-rpc-stack-for-emacs-lisp-for-python\">EPC (RPC stack for Emacs Lisp) for Python</h1>\n\n<p>Links:</p>\n\n<ul>\n<li><code>Documentation &lt;http://python-epc.readthedocs.org/&gt;</code>_ (at Read the Docs)</li>\n<li><code>Repository &lt;https://github.com/tkf/python-epc&gt;</code>_ (at GitHub)</li>\n<li><code>Issue tracker &lt;https://github.com/tkf/python-epc/issues&gt;</code>_ (at GitHub)</li>\n<li><code>PyPI &lt;http://pypi.python.org/pypi/epc&gt;</code>_</li>\n<li><code>Travis CI &lt;https://travis-ci.org/#!/tkf/python-epc&gt;</code>_ |build-status|</li>\n</ul>\n\n<p>Other resources:</p>\n\n<ul>\n<li><code>kiwanami/emacs-epc &lt;https://github.com/kiwanami/emacs-epc&gt;</code>_\n(Client and server implementation in Emacs Lisp and Perl.)</li>\n<li><code>tkf/emacs-jedi &lt;https://github.com/tkf/emacs-jedi&gt;</code>_\n(Python completion for Emacs using EPC server.)</li>\n</ul>\n\n<p>.. |build-status|\n   image:: https://secure.travis-ci.org/tkf/python-epc.png\n           ?branch=master\n   :target: http://travis-ci.org/tkf/python-epc\n   :alt: Build Status</p>\n\n<h2 id=\"what-is-this\">What is this?</h2>\n\n<p>EPC is an RPC stack for Emacs Lisp and Python-EPC is its server side\nand client side implementation in Python.  Using Python-EPC, you can\neasily call Emacs Lisp functions from Python and Python functions from\nEmacs.  For example, you can use Python GUI module to build widgets\nfor Emacs (see <code>examples/gtk/server.py</code>_ for example).</p>\n\n<p>Python-EPC is tested against Python 2.6, 2.7 and 3.2.</p>\n\n<h2 id=\"install\">Install</h2>\n\n<p>To install Python-EPC and its dependency sexpdata_, run the following\ncommand.::</p>\n\n<p>pip install epc</p>\n\n<p>.. _sexpdata: https://github.com/tkf/sexpdata</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>Save the following code as <code>my-server.py</code>.\n(You can find functionally the same code in <code>examples/echo/server.py</code>_)::</p>\n\n<p>from epc.server import EPCServer</p>\n\n<p>server = EPCServer(('localhost', 0))</p>\n\n<p>@server.register_function\n   def echo(*a):\n       return a</p>\n\n<p>server.print<em>port()\n   server.serve</em>forever()</p>\n\n<p>And then run the following code from Emacs.\nThis is a stripped version of <code>examples/echo/client.el</code>_ included in\nPython-EPC repository_.::</p>\n\n<p>(require 'epc)</p>\n\n<p>(defvar my-epc (epc:start-epc \"python\" '(\"my-server.py\")))</p>\n\n<p>(deferred:$\n     (epc:call-deferred my-epc 'echo '(10))\n     (deferred:nextc it\n       (lambda (x) (message \"Return : %S\" x))))</p>\n\n<p>(message \"Return : %S\" (epc:call-sync my-epc 'echo '(10 40)))</p>\n\n<p>.. _examples/echo/server.py:\n   https://github.com/tkf/python-epc/blob/master/examples/echo/server.py\n.. _examples/echo/client.el:\n   https://github.com/tkf/python-epc/blob/master/examples/echo/client.el</p>\n\n<p>If you have carton_ installed, you can run the above sample by\nsimply typing the following commands::</p>\n\n<p>make elpa        # install EPC in a separated environment\n   make run-sample  # run examples/echo/client.el</p>\n\n<p>.. _carton: https://github.com/rejeep/carton</p>\n\n<p>For example of bidirectional communication and integration with GTK,\nsee <code>examples/gtk/server.py</code>_.  You can run this example by::</p>\n\n<p>make elpa\n   make run-gtk-sample  # run examples/gtk/client.el</p>\n\n<p>.. _examples/gtk/server.py:\n   https://github.com/tkf/python-epc/blob/master/examples/gtk/server.py</p>\n\n<h2 id=\"license\">License</h2>\n\n<p>Python-EPC is licensed under GPL v3.\nSee COPYING for details.</p>\n</div>\n        \n      \n      \n    </div>", "files": [{"type": "conda", "size": "35.1 kB", "file": {"name": "noarch/epc-0.0.5-py_0.tar.bz2", "href": "https://anaconda.org/conda-forge/epc/0.0.5/download/noarch/epc-0.0.5-py_0.tar.bz2"}, "uploaded": null, "uploader": "conda-forge", "downloads": 1649, "labels": [{"name": "main", "label": "https://anaconda.org/conda-forge/repo/files?type=any&label=main"}, {"name": "cf202003", "label": "https://anaconda.org/conda-forge/repo/files?type=any&label=cf202003"}, {"name": "cf201901", "label": "https://anaconda.org/conda-forge/repo/files?type=any&label=cf201901"}]}], "labels": [{"name": "", "label": "0.0.5"}, {"name": "", "label": "0.0.5"}, {"name": "", "label": "0.0.5"}], "badges": ["https://anaconda.org/conda-forge/epc/badges/version.svg", "https://anaconda.org/conda-forge/epc/badges/latest_release_date.svg", "https://anaconda.org/conda-forge/epc/badges/latest_release_relative_date.svg", "https://anaconda.org/conda-forge/epc/badges/platforms.svg", "https://anaconda.org/conda-forge/epc/badges/license.svg", "https://anaconda.org/conda-forge/epc/badges/downloads.svg", "https://anaconda.org/conda-forge/epc/badges/installer/conda.svg"]}}