{"info": {"author": "Gautam Kachru", "author_email": "gautam@live.in", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django\\_lazy\\_admin\r\n===================\r\n\r\nDjango\u2019s automatic admin list screens are awesome! But sometimes you\r\nneed custom columns to display information that requires some big\r\nqueries or perhaps some heavy computation. This can slow down displaying\r\nthe entire list screen. This app is meant to address that need by\r\nconverting a custom column in to one that can be dynamically loaded over\r\nAJAX on user action.\r\n\r\nRegular custom column\r\n---------------------\r\n\r\nDjango allows you to use admin methods to render a column on the change\r\nlist screen. For example:\r\n\r\n.. code:: python\r\n\r\n    class MyAdmin(admin.ModelAdmin):\r\n        list_display = ('name', 'age', 'custom_column')\r\n\r\n        def custom_column(self, obj):\r\n            return foo_takes_time(obj)\r\n        \r\n        custom_column.short_description = 'Custom Title'\r\n\r\nLazy custom column\r\n------------------\r\n\r\nLazy custom columns are loaded over AJAX by user action. This is\r\nachieved by adding a decorator over any custom list column function\r\nyou\u2019ve added in your ModelAdmin class.\r\n\r\n.. code:: python\r\n\r\n    from lazy_admin import lazy_admin_column\r\n\r\n    class MyAdmin(admin.ModelAdmin):\r\n        change_list_template = 'lazy_admin/change_list.html'\r\n        \r\n        list_display = ('name', 'age', 'custom_column')\r\n\r\n        @lazy_admin_column\r\n        def custom_column(self, obj):\r\n            return foo_takes_time(obj)\r\n        \r\n        custom_column.short_description = 'Custom Title'\r\n\r\nNote the change\\_list\\_template of the MyAdmin class. This template\r\nloads the javascript necessary to handle the AJAX interaction.\r\n\r\nInstall\r\n-------\r\n\r\nIdeally, install the package in your virtual environment.\r\n\r\n::\r\n\r\n    pip install django_lazy_admin\r\n\r\nNow, add the app to your django setting INSTALLED\\_APPS.\r\n\r\n.. code:: python\r\n\r\n    INSTALLED_APPS = (\r\n        '...',\r\n        'lazy_admin'\r\n    )\r\n\r\nAnd, install the URL handler in your root url conf or in some other url\r\nconfiguration file.\r\n\r\n.. code:: python\r\n\r\n    urlpatterns = patterns('',\r\n        '...',\r\n        url(r'^admin/lazy/', include('lazy_admin.urls')),\r\n    )\r\n\r\nAnd, you\u2019re done!\r\n\r\nConfiguration\r\n-------------\r\n\r\nYou can turn off all lazy columns by the following in your main django\r\nsettings.py file.\r\n\r\n.. code:: python\r\n\r\n    LAZY_ADMIN_ALLOW = False\r\n\r\nThe column content is rendered using the lazy\\_admin/lazy\\_column.html\r\ntemplate. You can over-ride this in your own app. Or you can use a\r\nparameter to the decorator.\r\n\r\n::\r\n\r\n    @lazy_admin_column(template='my_custom_template.html')\r\n\r\nTODO\r\n----\r\n\r\n-  Support Model class methods used as custom columns as well with the\r\n   same decorator.\r\n\r\nAuthors\r\n-------\r\n\r\nThe primary author of this package is Gautam Kachru gautam@live.in\r\n\r\nLicense\r\n-------\r\n\r\nBSD 3-clause. See LICENSE file.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gkachru/django_lazy_admin", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django_lazy_admin", "package_url": "https://pypi.org/project/django_lazy_admin/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django_lazy_admin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gkachru/django_lazy_admin"}, "release_url": "https://pypi.org/project/django_lazy_admin/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Enhancement for custom columns in django admin list screens", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django\u2019s automatic admin list screens are awesome! But sometimes you\nneed custom columns to display information that requires some big\nqueries or perhaps some heavy computation. This can slow down displaying\nthe entire list screen. This app is meant to address that need by\nconverting a custom column in to one that can be dynamically loaded over\nAJAX on user action.</p>\n<div id=\"regular-custom-column\">\n<h2>Regular custom column</h2>\n<p>Django allows you to use admin methods to render a column on the change\nlist screen. For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'custom_column'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">custom_column</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">foo_takes_time</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"n\">custom_column</span><span class=\"o\">.</span><span class=\"n\">short_description</span> <span class=\"o\">=</span> <span class=\"s1\">'Custom Title'</span>\n</pre>\n</div>\n<div id=\"lazy-custom-column\">\n<h2>Lazy custom column</h2>\n<p>Lazy custom columns are loaded over AJAX by user action. This is\nachieved by adding a decorator over any custom list column function\nyou\u2019ve added in your ModelAdmin class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_admin</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_admin_column</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">change_list_template</span> <span class=\"o\">=</span> <span class=\"s1\">'lazy_admin/change_list.html'</span>\n\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'custom_column'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@lazy_admin_column</span>\n    <span class=\"k\">def</span> <span class=\"nf\">custom_column</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">foo_takes_time</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"n\">custom_column</span><span class=\"o\">.</span><span class=\"n\">short_description</span> <span class=\"o\">=</span> <span class=\"s1\">'Custom Title'</span>\n</pre>\n<p>Note the change_list_template of the MyAdmin class. This template\nloads the javascript necessary to handle the AJAX interaction.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Ideally, install the package in your virtual environment.</p>\n<pre>pip install django_lazy_admin\n</pre>\n<p>Now, add the app to your django setting INSTALLED_APPS.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'...'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'lazy_admin'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And, install the URL handler in your root url conf or in some other url\nconfiguration file.</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"s1\">'...'</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^admin/lazy/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'lazy_admin.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And, you\u2019re done!</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>You can turn off all lazy columns by the following in your main django\nsettings.py file.</p>\n<pre><span class=\"n\">LAZY_ADMIN_ALLOW</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>The column content is rendered using the lazy_admin/lazy_column.html\ntemplate. You can over-ride this in your own app. Or you can use a\nparameter to the decorator.</p>\n<pre>@lazy_admin_column(template='my_custom_template.html')\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Support Model class methods used as custom columns as well with the\nsame decorator.</li>\n</ul>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>The primary author of this package is Gautam Kachru <a href=\"mailto:gautam%40live.in\">gautam<span>@</span>live<span>.</span>in</a></p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD 3-clause. See LICENSE file.</p>\n</div>\n\n          </div>"}, "last_serial": 1251615, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "6f83d321907695dac3ef7bc8490eac22", "sha256": "6b3557969051a07e0d4936112158dbf370cbd15e42238f12923ee3abbc096030"}, "downloads": -1, "filename": "django_lazy_admin-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6f83d321907695dac3ef7bc8490eac22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5555, "upload_time": "2014-09-24T14:42:02", "upload_time_iso_8601": "2014-09-24T14:42:02.478904Z", "url": "https://files.pythonhosted.org/packages/34/e2/3fe7c48e2cb272f02e5f8b215503e3b6c1e29cf775baa84c3162fcf16118/django_lazy_admin-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f83d321907695dac3ef7bc8490eac22", "sha256": "6b3557969051a07e0d4936112158dbf370cbd15e42238f12923ee3abbc096030"}, "downloads": -1, "filename": "django_lazy_admin-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6f83d321907695dac3ef7bc8490eac22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5555, "upload_time": "2014-09-24T14:42:02", "upload_time_iso_8601": "2014-09-24T14:42:02.478904Z", "url": "https://files.pythonhosted.org/packages/34/e2/3fe7c48e2cb272f02e5f8b215503e3b6c1e29cf775baa84c3162fcf16118/django_lazy_admin-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:24 2020"}