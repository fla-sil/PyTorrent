{"info": {"author": "Tyler Sanderson", "author_email": "tylerbtbam@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "About\r\n-----\r\n\r\nPyBST implements Binary Trees, AVL Trees, Splay Trees, and Red Black Trees in Python. Furthermore, PyBST provides a module for plotting these trees using networkx and matplotlib.\r\n\r\nTree Classes Provided:\r\n\r\n* BSTree - represents an unbalanced Binary Search Tree\r\n* AVLTree - represents a balanced AVL Tree\r\n* SplayTree - represents an adjusted Splay Tree\r\n* RBTree - represents a balanced Red Black Tree\r\n\r\nConstructor\r\n-----------\r\n\r\nLet Tree represent one of the provided tree classes mentioned above.\r\n\r\n* Tree() - > Creates a new empty tree\r\n* Tree(seq) -> Creates a new empty tree from seq [(key1,val1),(key2,val2),...,(keyn,valn)]\r\n\r\nMethods\r\n-------\r\n\r\nTree Methods:\r\n\r\n* is_valid() -> Produces True if Tree is a valid tree of its type, else False.\r\n* preorder() -> Produces a sequence of the Nodes in Tree in preorder.\r\n* inorder() -> Produces a sequence of the Nodes in Tree in inorder.\r\n* postorder() -> Produces a sequence of the Nodes in Tree in postorder.\r\n* levelorder() -> Produces a sequence of the Nodes in Tree in levelorder.\r\n* get_node(key) -> Produces the Node in Tree with key attribute key.\r\n* insert(key,val) <==> Tree[key] = value. Inserts a new Node with key attribute key and value attribute val into Tree.\r\n* insert_from(seq) -> Inserts keys and values from seq [(key1,val1),(key2,val2),...,(keyn,valn)] into Tree.\r\n* get_max() <==> max(Tree). Produces the Node with the maximum key in Tree.\r\n* get_min() <==> min(Tree). Produces the Node with the minimum key in Tree.\r\n* get_element_count <==> len(Tree). Produces the number of elements in Tree.\r\n* get_height() -> Produces the height of Tree.\r\n* delete(key) <==> del Tree[key]. Deletes the Node with key attribute key from Tree.\r\n* delete_from(seq) -> Deletes Nodes with keys from seq [key1,key2,...,keyn] from Tree.\r\n\r\nPlotting Methods (draw Module):\r\n\r\n* plot_tree(Tree) -> Provides a visual representation of Tree via plotting it using networkx and matplotlib.\r\n\r\nDependencies\r\n------------\r\n\r\nPyBST requires no external dependencies for the tree classes and their methods themselves. However, note that the following packages are required for tree plotting:\r\n\r\nNetworkx: http://networkx.github.com/\r\n\r\nMatplotlib: http://matplotlib.org/\r\n\r\nInstallation\r\n------------\r\n\r\nFrom source::\r\n\r\n    python setup.py install\r\n\r\nUsing easy install::\r\n\r\n    easy_install pybst\r\n\r\nAlternatively download one of the build distributions found under Downloads.\r\n\r\nDocumentation\r\n-------------\r\nSee PyBST's github repository at: https://github.com/TylerSandman/PyBST/", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/TylerSandman/PyBST/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TylerSandman/PyBST", "keywords": "", "license": "GNU GPL 3", "maintainer": "", "maintainer_email": "", "name": "pybst", "package_url": "https://pypi.org/project/pybst/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pybst/", "project_urls": {"Download": "https://github.com/TylerSandman/PyBST/", "Homepage": "https://github.com/TylerSandman/PyBST"}, "release_url": "https://pypi.org/project/pybst/1.0/", "requires_dist": null, "requires_python": null, "summary": "Implements Binary Search Trees, AVL Trees, Splay Trees, and Red Black Trees in Python with plotting.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>PyBST implements Binary Trees, AVL Trees, Splay Trees, and Red Black Trees in Python. Furthermore, PyBST provides a module for plotting these trees using networkx and matplotlib.</p>\n<p>Tree Classes Provided:</p>\n<ul>\n<li>BSTree - represents an unbalanced Binary Search Tree</li>\n<li>AVLTree - represents a balanced AVL Tree</li>\n<li>SplayTree - represents an adjusted Splay Tree</li>\n<li>RBTree - represents a balanced Red Black Tree</li>\n</ul>\n</div>\n<div id=\"constructor\">\n<h2>Constructor</h2>\n<p>Let Tree represent one of the provided tree classes mentioned above.</p>\n<ul>\n<li>Tree() - &gt; Creates a new empty tree</li>\n<li>Tree(seq) -&gt; Creates a new empty tree from seq [(key1,val1),(key2,val2),\u2026,(keyn,valn)]</li>\n</ul>\n</div>\n<div id=\"methods\">\n<h2>Methods</h2>\n<p>Tree Methods:</p>\n<ul>\n<li>is_valid() -&gt; Produces True if Tree is a valid tree of its type, else False.</li>\n<li>preorder() -&gt; Produces a sequence of the Nodes in Tree in preorder.</li>\n<li>inorder() -&gt; Produces a sequence of the Nodes in Tree in inorder.</li>\n<li>postorder() -&gt; Produces a sequence of the Nodes in Tree in postorder.</li>\n<li>levelorder() -&gt; Produces a sequence of the Nodes in Tree in levelorder.</li>\n<li>get_node(key) -&gt; Produces the Node in Tree with key attribute key.</li>\n<li>insert(key,val) &lt;==&gt; Tree[key] = value. Inserts a new Node with key attribute key and value attribute val into Tree.</li>\n<li>insert_from(seq) -&gt; Inserts keys and values from seq [(key1,val1),(key2,val2),\u2026,(keyn,valn)] into Tree.</li>\n<li>get_max() &lt;==&gt; max(Tree). Produces the Node with the maximum key in Tree.</li>\n<li>get_min() &lt;==&gt; min(Tree). Produces the Node with the minimum key in Tree.</li>\n<li>get_element_count &lt;==&gt; len(Tree). Produces the number of elements in Tree.</li>\n<li>get_height() -&gt; Produces the height of Tree.</li>\n<li>delete(key) &lt;==&gt; del Tree[key]. Deletes the Node with key attribute key from Tree.</li>\n<li>delete_from(seq) -&gt; Deletes Nodes with keys from seq [key1,key2,\u2026,keyn] from Tree.</li>\n</ul>\n<p>Plotting Methods (draw Module):</p>\n<ul>\n<li>plot_tree(Tree) -&gt; Provides a visual representation of Tree via plotting it using networkx and matplotlib.</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>PyBST requires no external dependencies for the tree classes and their methods themselves. However, note that the following packages are required for tree plotting:</p>\n<p>Networkx: <a href=\"http://networkx.github.com/\" rel=\"nofollow\">http://networkx.github.com/</a></p>\n<p>Matplotlib: <a href=\"http://matplotlib.org/\" rel=\"nofollow\">http://matplotlib.org/</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From source:</p>\n<pre>python setup.py install\n</pre>\n<p>Using easy install:</p>\n<pre>easy_install pybst\n</pre>\n<p>Alternatively download one of the build distributions found under Downloads.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>See PyBST\u2019s github repository at: <a href=\"https://github.com/TylerSandman/PyBST/\" rel=\"nofollow\">https://github.com/TylerSandman/PyBST/</a></p>\n</div>\n\n          </div>"}, "last_serial": 797028, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "61e70e04f1422c3dabca34b9ab343b98", "sha256": "c7c3b248b9009c9ceb6e80565195de121e335cd58e6d2f2d08c8a7901ea56dc7"}, "downloads": -1, "filename": "pybst-1.0.tar.gz", "has_sig": false, "md5_digest": "61e70e04f1422c3dabca34b9ab343b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11680, "upload_time": "2013-01-09T21:00:22", "upload_time_iso_8601": "2013-01-09T21:00:22.862672Z", "url": "https://files.pythonhosted.org/packages/a8/5f/d13a2feaea2770b97dc1879cd1ae922be1305fbb4d3412b4c974be8a2b79/pybst-1.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1b7e6bb094a14c6c8ef889a758ef533", "sha256": "14916e971cad5891904610b6132f222fb7a106b44501b029bd9af4ed1fd71e79"}, "downloads": -1, "filename": "PyBST-1.0.win32.msi", "has_sig": false, "md5_digest": "f1b7e6bb094a14c6c8ef889a758ef533", "packagetype": "bdist_msi", "python_version": "2.7", "requires_python": null, "size": 163840, "upload_time": "2013-01-09T20:58:56", "upload_time_iso_8601": "2013-01-09T20:58:56.510345Z", "url": "https://files.pythonhosted.org/packages/a9/ec/93a03df50cf3ce5f2750a83e693b2985e112fedc6ddbe77504042054324d/PyBST-1.0.win32.msi", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e16de734a4356013bb66d973fb7e5c2", "sha256": "620b60a4c1320cb3603f3bc385037c1869fecf6975c09a90683def6659cbefe0"}, "downloads": -1, "filename": "pybst-1.0.zip", "has_sig": false, "md5_digest": "3e16de734a4356013bb66d973fb7e5c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19186, "upload_time": "2013-01-09T21:00:28", "upload_time_iso_8601": "2013-01-09T21:00:28.705516Z", "url": "https://files.pythonhosted.org/packages/d7/6e/7814f75074c86c6a6157063c7ea45692061f5018c708a385a57781acdaf8/pybst-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61e70e04f1422c3dabca34b9ab343b98", "sha256": "c7c3b248b9009c9ceb6e80565195de121e335cd58e6d2f2d08c8a7901ea56dc7"}, "downloads": -1, "filename": "pybst-1.0.tar.gz", "has_sig": false, "md5_digest": "61e70e04f1422c3dabca34b9ab343b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11680, "upload_time": "2013-01-09T21:00:22", "upload_time_iso_8601": "2013-01-09T21:00:22.862672Z", "url": "https://files.pythonhosted.org/packages/a8/5f/d13a2feaea2770b97dc1879cd1ae922be1305fbb4d3412b4c974be8a2b79/pybst-1.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1b7e6bb094a14c6c8ef889a758ef533", "sha256": "14916e971cad5891904610b6132f222fb7a106b44501b029bd9af4ed1fd71e79"}, "downloads": -1, "filename": "PyBST-1.0.win32.msi", "has_sig": false, "md5_digest": "f1b7e6bb094a14c6c8ef889a758ef533", "packagetype": "bdist_msi", "python_version": "2.7", "requires_python": null, "size": 163840, "upload_time": "2013-01-09T20:58:56", "upload_time_iso_8601": "2013-01-09T20:58:56.510345Z", "url": "https://files.pythonhosted.org/packages/a9/ec/93a03df50cf3ce5f2750a83e693b2985e112fedc6ddbe77504042054324d/PyBST-1.0.win32.msi", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e16de734a4356013bb66d973fb7e5c2", "sha256": "620b60a4c1320cb3603f3bc385037c1869fecf6975c09a90683def6659cbefe0"}, "downloads": -1, "filename": "pybst-1.0.zip", "has_sig": false, "md5_digest": "3e16de734a4356013bb66d973fb7e5c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19186, "upload_time": "2013-01-09T21:00:28", "upload_time_iso_8601": "2013-01-09T21:00:28.705516Z", "url": "https://files.pythonhosted.org/packages/d7/6e/7814f75074c86c6a6157063c7ea45692061f5018c708a385a57781acdaf8/pybst-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:08:59 2020"}