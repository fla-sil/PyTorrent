{"info": {"author": "\u0141ukasz Langa", "author_email": "lukasz@langa.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance"], "description": "![Black Logo](https://raw.githubusercontent.com/psf/black/master/docs/_static/logo2-readme.png)\n\n<h2 align=\"center\">The Uncompromising Code Formatter</h2>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.com/psf/black\"><img alt=\"Build Status\" src=\"https://travis-ci.com/psf/black.svg?branch=master\"></a>\n<a href=\"https://github.com/psf/black/actions\"><img alt=\"Actions Status\" src=\"https://github.com/psf/black/workflows/Test/badge.svg\"></a>\n<a href=\"https://black.readthedocs.io/en/stable/?badge=stable\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/black/badge/?version=stable\"></a>\n<a href=\"https://coveralls.io/github/psf/black?branch=master\"><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/psf/black/badge.svg?branch=master\"></a>\n<a href=\"https://github.com/psf/black/blob/master/LICENSE\"><img alt=\"License: MIT\" src=\"https://black.readthedocs.io/en/stable/_static/license.svg\"></a>\n<a href=\"https://pypi.org/project/black/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/black\"></a>\n<a href=\"https://pepy.tech/project/black\"><img alt=\"Downloads\" src=\"https://pepy.tech/badge/black\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n</p>\n\n> \u201cAny color you like.\u201d\n\n_Black_ is the uncompromising Python code formatter. By using it, you agree to cede\ncontrol over minutiae of hand-formatting. In return, _Black_ gives you speed,\ndeterminism, and freedom from `pycodestyle` nagging about formatting. You will save time\nand mental energy for more important matters.\n\nBlackened code looks the same regardless of the project you're reading. Formatting\nbecomes transparent after a while and you can focus on the content instead.\n\n_Black_ makes code review faster by producing the smallest diffs possible.\n\nTry it out now using the [Black Playground](https://black.now.sh). Watch the\n[PyCon 2019 talk](https://youtu.be/esZLCuWs_2Y) to learn more.\n\n---\n\n_Contents:_ **[Installation and usage](#installation-and-usage)** |\n**[Code style](#the-black-code-style)** | **[Pragmatism](#pragmatism)** |\n**[pyproject.toml](#pyprojecttoml)** | **[Editor integration](#editor-integration)** |\n**[blackd](#blackd)** | **[Version control integration](#version-control-integration)**\n| **[Ignoring unmodified files](#ignoring-unmodified-files)** | **[Used by](#used-by)**\n| **[Testimonials](#testimonials)** | **[Show your style](#show-your-style)** |\n**[Contributing](#contributing-to-black)** | **[Change Log](#change-log)** |\n**[Authors](#authors)**\n\n---\n\n## Installation and usage\n\n### Installation\n\n_Black_ can be installed by running `pip install black`. It requires Python 3.6.0+ to\nrun but you can reformat Python 2 code with it, too.\n\n### Usage\n\nTo get started right away with sensible defaults:\n\n```\nblack {source_file_or_directory}\n```\n\n### Command line options\n\n_Black_ doesn't provide many options. You can list them by running `black --help`:\n\n```text\nblack [OPTIONS] [SRC]...\n\nOptions:\n  -c, --code TEXT                 Format the code passed in as a string.\n  -l, --line-length INTEGER       How many characters per line to allow.\n                                  [default: 88]\n  -t, --target-version [py27|py33|py34|py35|py36|py37|py38]\n                                  Python versions that should be supported by\n                                  Black's output. [default: per-file auto-\n                                  detection]\n  --py36                          Allow using Python 3.6-only syntax on all\n                                  input files.  This will put trailing commas\n                                  in function signatures and calls also after\n                                  *args and **kwargs. Deprecated; use\n                                  --target-version instead. [default: per-file\n                                  auto-detection]\n  --pyi                           Format all input files like typing stubs\n                                  regardless of file extension (useful when\n                                  piping source on standard input).\n  -S, --skip-string-normalization\n                                  Don't normalize string quotes or prefixes.\n  --check                         Don't write the files back, just return the\n                                  status.  Return code 0 means nothing would\n                                  change.  Return code 1 means some files\n                                  would be reformatted.  Return code 123 means\n                                  there was an internal error.\n  --diff                          Don't write the files back, just output a\n                                  diff for each file on stdout.\n  --fast / --safe                 If --fast given, skip temporary sanity\n                                  checks. [default: --safe]\n  --include TEXT                  A regular expression that matches files and\n                                  directories that should be included on\n                                  recursive searches.  An empty value means\n                                  all files are included regardless of the\n                                  name.  Use forward slashes for directories\n                                  on all platforms (Windows, too).  Exclusions\n                                  are calculated first, inclusions later.\n                                  [default: \\.pyi?$]\n  --exclude TEXT                  A regular expression that matches files and\n                                  directories that should be excluded on\n                                  recursive searches.  An empty value means no\n                                  paths are excluded. Use forward slashes for\n                                  directories on all platforms (Windows, too).\n                                  Exclusions are calculated first, inclusions\n                                  later.  [default: /(\\.eggs|\\.git|\\.hg|\\.mypy\n                                  _cache|\\.nox|\\.tox|\\.venv|_build|buck-\n                                  out|build|dist)/]\n  -q, --quiet                     Don't emit non-error messages to stderr.\n                                  Errors are still emitted, silence those with\n                                  2>/dev/null.\n  -v, --verbose                   Also emit messages to stderr about files\n                                  that were not changed or were ignored due to\n                                  --exclude=.\n  --version                       Show the version and exit.\n  --config PATH                   Read configuration from PATH.\n  -h, --help                      Show this message and exit.\n```\n\n_Black_ is a well-behaved Unix-style command-line tool:\n\n- it does nothing if no sources are passed to it;\n- it will read from standard input and write to standard output if `-` is used as the\n  filename;\n- it only outputs messages to users on standard error;\n- exits with code 0 unless an internal error occurred (or `--check` was used).\n\n### NOTE: This is a beta product\n\n_Black_ is already [successfully used](#used-by) by many projects, small and big. It\nalso sports a decent test suite. However, it is still very new. Things will probably be\nwonky for a while. This is made explicit by the \"Beta\" trove classifier, as well as by\nthe \"b\" in the version number. What this means for you is that **until the formatter\nbecomes stable, you should expect some formatting to change in the future**. That being\nsaid, no drastic stylistic changes are planned, mostly responses to bug reports.\n\nAlso, as a temporary safety measure, _Black_ will check that the reformatted code still\nproduces a valid AST that is equivalent to the original. This slows it down. If you're\nfeeling confident, use `--fast`.\n\n## The _Black_ code style\n\n_Black_ reformats entire files in place. It is not configurable. It doesn't take\nprevious formatting into account. It doesn't reformat blocks that start with\n`# fmt: off` and end with `# fmt: on`. `# fmt: on/off` have to be on the same level of\nindentation. It also recognizes [YAPF](https://github.com/google/yapf)'s block comments\nto the same effect, as a courtesy for straddling code.\n\n### How _Black_ wraps lines\n\n_Black_ ignores previous formatting and applies uniform horizontal and vertical\nwhitespace to your code. The rules for horizontal whitespace can be summarized as: do\nwhatever makes `pycodestyle` happy. The coding style used by _Black_ can be viewed as a\nstrict subset of PEP 8.\n\nAs for vertical whitespace, _Black_ tries to render one full expression or simple\nstatement per line. If this fits the allotted line length, great.\n\n```py3\n# in:\n\nj = [1,\n     2,\n     3\n]\n\n# out:\n\nj = [1, 2, 3]\n```\n\nIf not, _Black_ will look at the contents of the first outer matching brackets and put\nthat in a separate indented line.\n\n```py3\n# in:\n\nImportantClass.important_method(exc, limit, lookup_lines, capture_locals, extra_argument)\n\n# out:\n\nImportantClass.important_method(\n    exc, limit, lookup_lines, capture_locals, extra_argument\n)\n```\n\nIf that still doesn't fit the bill, it will decompose the internal expression further\nusing the same rule, indenting matching brackets every time. If the contents of the\nmatching brackets pair are comma-separated (like an argument list, or a dict literal,\nand so on) then _Black_ will first try to keep them on the same line with the matching\nbrackets. If that doesn't work, it will put all of them in separate lines.\n\n```py3\n# in:\n\ndef very_important_function(template: str, *variables, file: os.PathLike, engine: str, header: bool = True, debug: bool = False):\n    \"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"\n    with open(file, 'w') as f:\n        ...\n\n# out:\n\ndef very_important_function(\n    template: str,\n    *variables,\n    file: os.PathLike,\n    engine: str,\n    header: bool = True,\n    debug: bool = False,\n):\n    \"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"\n    with open(file, \"w\") as f:\n        ...\n```\n\nYou might have noticed that closing brackets are always dedented and that a trailing\ncomma is always added. Such formatting produces smaller diffs; when you add or remove an\nelement, it's always just one line. Also, having the closing bracket dedented provides a\nclear delimiter between two distinct sections of the code that otherwise share the same\nindentation level (like the arguments list and the docstring in the example above).\n\nIf a data structure literal (tuple, list, set, dict) or a line of \"from\" imports cannot\nfit in the allotted length, it's always split into one element per line. This minimizes\ndiffs as well as enables readers of code to find which commit introduced a particular\nentry. This also makes _Black_ compatible with [isort](https://pypi.org/p/isort/) with\nthe following configuration.\n\n<details>\n<summary>A compatible `.isort.cfg`</summary>\n\n```\n[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n```\n\nThe equivalent command line is:\n\n```\n$ isort --multi-line=3 --trailing-comma --force-grid-wrap=0 --use-parentheses --line-width=88 [ file.py ]\n```\n\n</details>\n\n### Line length\n\nYou probably noticed the peculiar default line length. _Black_ defaults to 88 characters\nper line, which happens to be 10% over 80. This number was found to produce\nsignificantly shorter files than sticking with 80 (the most popular), or even 79 (used\nby the standard library). In general,\n[90-ish seems like the wise choice](https://youtu.be/wf-BqAjZb8M?t=260).\n\nIf you're paid by the line of code you write, you can pass `--line-length` with a lower\nnumber. _Black_ will try to respect that. However, sometimes it won't be able to without\nbreaking other rules. In those rare cases, auto-formatted code will exceed your allotted\nlimit.\n\nYou can also increase it, but remember that people with sight disabilities find it\nharder to work with line lengths exceeding 100 characters. It also adversely affects\nside-by-side diff review on typical screen resolutions. Long lines also make it harder\nto present code neatly in documentation or talk slides.\n\nIf you're using Flake8, you can bump `max-line-length` to 88 and forget about it.\nAlternatively, use [Bugbear](https://github.com/PyCQA/flake8-bugbear)'s B950 warning\ninstead of E501 and keep the max line length at 80 which you are probably already using.\nYou'd do it like this:\n\n```ini\n[flake8]\nmax-line-length = 80\n...\nselect = C,E,F,W,B,B950\nignore = E203, E501, W503\n```\n\nYou'll find _Black_'s own .flake8 config file is configured like this. Explanation of\nwhy W503 and E203 are disabled can be found further in this documentation. And if you're\ncurious about the reasoning behind B950,\n[Bugbear's documentation](https://github.com/PyCQA/flake8-bugbear#opinionated-warnings)\nexplains it. The tl;dr is \"it's like highway speed limits, we won't bother you if you\noverdo it by a few km/h\".\n\n**If you're looking for a minimal, black-compatible flake8 configuration:**\n\n```ini\n[flake8]\nmax-line-length = 88\nextend-ignore = E203\n```\n\n### Empty lines\n\n_Black_ avoids spurious vertical whitespace. This is in the spirit of PEP 8 which says\nthat in-function vertical whitespace should only be used sparingly.\n\n_Black_ will allow single empty lines inside functions, and single and double empty\nlines on module level left by the original editors, except when they're within\nparenthesized expressions. Since such expressions are always reformatted to fit minimal\nspace, this whitespace is lost.\n\nIt will also insert proper spacing before and after function definitions. It's one line\nbefore and after inner functions and two lines before and after module-level functions\nand classes. _Black_ will not put empty lines between function/class definitions and\nstandalone comments that immediately precede the given function/class.\n\n_Black_ will enforce single empty lines between a class-level docstring and the first\nfollowing field or method. This conforms to\n[PEP 257](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings).\n\n_Black_ won't insert empty lines after function docstrings unless that empty line is\nrequired due to an inner function starting immediately after.\n\n### Trailing commas\n\n_Black_ will add trailing commas to expressions that are split by comma where each\nelement is on its own line. This includes function signatures.\n\nUnnecessary trailing commas are removed if an expression fits in one line. This makes it\n1% more likely that your line won't exceed the allotted line length limit. Moreover, in\nthis scenario, if you added another argument to your call, you'd probably fit it in the\nsame line anyway. That doesn't make diffs any larger.\n\nOne exception to removing trailing commas is tuple expressions with just one element. In\nthis case _Black_ won't touch the single trailing comma as this would unexpectedly\nchange the underlying data type. Note that this is also the case when commas are used\nwhile indexing. This is a tuple in disguise: `numpy_array[3, ]`.\n\nOne exception to adding trailing commas is function signatures containing `*`, `*args`,\nor `**kwargs`. In this case a trailing comma is only safe to use on Python 3.6. _Black_\nwill detect if your file is already 3.6+ only and use trailing commas in this situation.\nIf you wonder how it knows, it looks for f-strings and existing use of trailing commas\nin function signatures that have stars in them. In other words, if you'd like a trailing\ncomma in this situation and _Black_ didn't recognize it was safe to do so, put it there\nmanually and _Black_ will keep it.\n\n### Strings\n\n_Black_ prefers double quotes (`\"` and `\"\"\"`) over single quotes (`'` and `'''`). It\nwill replace the latter with the former as long as it does not result in more backslash\nescapes than before.\n\n_Black_ also standardizes string prefixes, making them always lowercase. On top of that,\nif your code is already Python 3.6+ only or it's using the `unicode_literals` future\nimport, _Black_ will remove `u` from the string prefix as it is meaningless in those\nscenarios.\n\nThe main reason to standardize on a single form of quotes is aesthetics. Having one kind\nof quotes everywhere reduces reader distraction. It will also enable a future version of\n_Black_ to merge consecutive string literals that ended up on the same line (see\n[#26](https://github.com/psf/black/issues/26) for details).\n\nWhy settle on double quotes? They anticipate apostrophes in English text. They match the\ndocstring standard described in\n[PEP 257](https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring). An empty\nstring in double quotes (`\"\"`) is impossible to confuse with a one double-quote\nregardless of fonts and syntax highlighting used. On top of this, double quotes for\nstrings are consistent with C which Python interacts a lot with.\n\nOn certain keyboard layouts like US English, typing single quotes is a bit easier than\ndouble quotes. The latter requires use of the Shift key. My recommendation here is to\nkeep using whatever is faster to type and let _Black_ handle the transformation.\n\nIf you are adopting _Black_ in a large project with pre-existing string conventions\n(like the popular\n[\"single quotes for data, double quotes for human-readable strings\"](https://stackoverflow.com/a/56190)),\nyou can pass `--skip-string-normalization` on the command line. This is meant as an\nadoption helper, avoid using this for new projects.\n\n### Numeric literals\n\n_Black_ standardizes most numeric literals to use lowercase letters for the syntactic\nparts and uppercase letters for the digits themselves: `0xAB` instead of `0XAB` and\n`1e10` instead of `1E10`. Python 2 long literals are styled as `2L` instead of `2l` to\navoid confusion between `l` and `1`.\n\n### Line breaks & binary operators\n\n_Black_ will break a line before a binary operator when splitting a block of code over\nmultiple lines. This is so that _Black_ is compliant with the recent changes in the\n[PEP 8](https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator)\nstyle guide, which emphasizes that this approach improves readability.\n\nThis behaviour may raise `W503 line break before binary operator` warnings in style\nguide enforcement tools like Flake8. Since `W503` is not PEP 8 compliant, you should\ntell Flake8 to ignore these warnings.\n\n### Slices\n\nPEP 8\n[recommends](https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements)\nto treat `:` in slices as a binary operator with the lowest priority, and to leave an\nequal amount of space on either side, except if a parameter is omitted (e.g.\n`ham[1 + 1 :]`). It also states that for extended slices, both `:` operators have to\nhave the same amount of spacing, except if a parameter is omitted (`ham[1 + 1 ::]`).\n_Black_ enforces these rules consistently.\n\nThis behaviour may raise `E203 whitespace before ':'` warnings in style guide\nenforcement tools like Flake8. Since `E203` is not PEP 8 compliant, you should tell\nFlake8 to ignore these warnings.\n\n### Parentheses\n\nSome parentheses are optional in the Python grammar. Any expression can be wrapped in a\npair of parentheses to form an atom. There are a few interesting cases:\n\n- `if (...):`\n- `while (...):`\n- `for (...) in (...):`\n- `assert (...), (...)`\n- `from X import (...)`\n- assignments like:\n  - `target = (...)`\n  - `target: type = (...)`\n  - `some, *un, packing = (...)`\n  - `augmented += (...)`\n\nIn those cases, parentheses are removed when the entire statement fits in one line, or\nif the inner expression doesn't have any delimiters to further split on. If there is\nonly a single delimiter and the expression starts or ends with a bracket, the\nparenthesis can also be successfully omitted since the existing bracket pair will\norganize the expression neatly anyway. Otherwise, the parentheses are added.\n\nPlease note that _Black_ does not add or remove any additional nested parentheses that\nyou might want to have for clarity or further code organization. For example those\nparentheses are not going to be removed:\n\n```py3\nreturn not (this or that)\ndecision = (maybe.this() and values > 0) or (maybe.that() and values < 0)\n```\n\n### Call chains\n\nSome popular APIs, like ORMs, use call chaining. This API style is known as a\n[fluent interface](https://en.wikipedia.org/wiki/Fluent_interface). _Black_ formats\nthose by treating dots that follow a call or an indexing operation like a very low\npriority delimiter. It's easier to show the behavior than to explain it. Look at the\nexample:\n\n```py3\ndef example(session):\n    result = (\n        session.query(models.Customer.id)\n        .filter(\n            models.Customer.account_id == account_id,\n            models.Customer.email == email_address,\n        )\n        .order_by(models.Customer.id.asc())\n        .all()\n    )\n```\n\n### Typing stub files\n\nPEP 484 describes the syntax for type hints in Python. One of the use cases for typing\nis providing type annotations for modules which cannot contain them directly (they might\nbe written in C, or they might be third-party, or their implementation may be overly\ndynamic, and so on).\n\nTo solve this,\n[stub files with the `.pyi` file extension](https://www.python.org/dev/peps/pep-0484/#stub-files)\ncan be used to describe typing information for an external module. Those stub files omit\nthe implementation of classes and functions they describe, instead they only contain the\nstructure of the file (listing globals, functions, and classes with their members). The\nrecommended code style for those files is more terse than PEP 8:\n\n- prefer `...` on the same line as the class/function signature;\n- avoid vertical whitespace between consecutive module-level functions, names, or\n  methods and fields within a single class;\n- use a single blank line between top-level class definitions, or none if the classes\n  are very small.\n\n_Black_ enforces the above rules. There are additional guidelines for formatting `.pyi`\nfile that are not enforced yet but might be in a future version of the formatter:\n\n- all function bodies should be empty (contain `...` instead of the body);\n- do not use docstrings;\n- prefer `...` over `pass`;\n- for arguments with a default, use `...` instead of the actual default;\n- avoid using string literals in type annotations, stub files support forward references\n  natively (like Python 3.7 code with `from __future__ import annotations`);\n- use variable annotations instead of type comments, even for stubs that target older\n  versions of Python;\n- for arguments that default to `None`, use `Optional[]` explicitly;\n- use `float` instead of `Union[int, float]`.\n\n## Pragmatism\n\nEarly versions of _Black_ used to be absolutist in some respects. They took after its\ninitial author. This was fine at the time as it made the implementation simpler and\nthere were not many users anyway. Not many edge cases were reported. As a mature tool,\n_Black_ does make some exceptions to rules it otherwise holds. This section documents\nwhat those exceptions are and why this is the case.\n\n### The magic trailing comma\n\n_Black_ in general does not take existing formatting into account.\n\nHowever, there are cases where you put a short collection or function call in your code\nbut you anticipate it will grow in the future.\n\nFor example:\n\n```py3\nTRANSLATIONS = {\n    \"en_us\": \"English (US)\",\n    \"pl_pl\": \"polski\",\n}\n```\n\nEarly versions of _Black_ used to ruthlessly collapse those into one line (it fits!).\nNow, you can communicate that you don't want that by putting a trailing comma in the\ncollection yourself. When you do, _Black_ will know to always explode your collection\ninto one item per line.\n\nHow do you make it stop? Just delete that trailing comma and _Black_ will collapse your\ncollection into one line if it fits.\n\n### r\"strings\" and R\"strings\"\n\n_Black_ normalizes string quotes as well as string prefixes, making them lowercase. One\nexception to this rule is r-strings. It turns out that the very popular\n[MagicPython](https://github.com/MagicStack/MagicPython/) syntax highlighter, used by\ndefault by (among others) GitHub and Visual Studio Code, differentiates between\nr-strings and R-strings. The former are syntax highlighted as regular expressions while\nthe latter are treated as true raw strings with no special semantics.\n\n## pyproject.toml\n\n_Black_ is able to read project-specific default values for its command line options\nfrom a `pyproject.toml` file. This is especially useful for specifying custom\n`--include` and `--exclude` patterns for your project.\n\n**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is\n\"No\". _Black_ is all about sensible defaults.\n\n### What on Earth is a `pyproject.toml` file?\n\n[PEP 518](https://www.python.org/dev/peps/pep-0518/) defines `pyproject.toml` as a\nconfiguration file to store build system requirements for Python projects. With the help\nof tools like [Poetry](https://poetry.eustace.io/) or\n[Flit](https://flit.readthedocs.io/en/latest/) it can fully replace the need for\n`setup.py` and `setup.cfg` files.\n\n### Where _Black_ looks for the file\n\nBy default _Black_ looks for `pyproject.toml` starting from the common base directory of\nall files and directories passed on the command line. If it's not there, it looks in\nparent directories. It stops looking when it finds the file, or a `.git` directory, or a\n`.hg` directory, or the root of the file system, whichever comes first.\n\nIf you're formatting standard input, _Black_ will look for configuration starting from\nthe current working directory.\n\nYou can also explicitly specify the path to a particular file that you want with\n`--config`. In this situation _Black_ will not look for any other file.\n\nIf you're running with `--verbose`, you will see a blue message if a file was found and\nused.\n\nPlease note `blackd` will not use `pyproject.toml` configuration.\n\n### Configuration format\n\nAs the file extension suggests, `pyproject.toml` is a\n[TOML](https://github.com/toml-lang/toml) file. It contains separate sections for\ndifferent tools. _Black_ is using the `[tool.black]` section. The option keys are the\nsame as long names of options on the command line.\n\nNote that you have to use single-quoted strings in TOML for regular expressions. It's\nthe equivalent of r-strings in Python. Multiline strings are treated as verbose regular\nexpressions by Black. Use `[ ]` to denote a significant space character.\n\n<details>\n<summary>Example `pyproject.toml`</summary>\n\n```toml\n[tool.black]\nline-length = 88\ntarget-version = ['py37']\ninclude = '\\.pyi?$'\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n  | foo.py           # also separately exclude a file named foo.py in\n                     # the root of the project\n)\n'''\n```\n\n</details>\n\n### Lookup hierarchy\n\nCommand-line options have defaults that you can see in `--help`. A `pyproject.toml` can\noverride those defaults. Finally, options provided by the user on the command line\noverride both.\n\n_Black_ will only ever use one `pyproject.toml` file during an entire run. It doesn't\nlook for multiple files, and doesn't compose configuration from different levels of the\nfile hierarchy.\n\n## Editor integration\n\n### Emacs\n\nUse [proofit404/blacken](https://github.com/proofit404/blacken) or\n[Elpy](https://github.com/jorgenschaefer/elpy).\n\n### PyCharm/IntelliJ IDEA\n\n1. Install `black`.\n\n```console\n$ pip install black\n```\n\n2. Locate your `black` installation folder.\n\nOn macOS / Linux / BSD:\n\n```console\n$ which black\n/usr/local/bin/black  # possible location\n```\n\nOn Windows:\n\n```console\n$ where black\n%LocalAppData%\\Programs\\Python\\Python36-32\\Scripts\\black.exe  # possible location\n```\n\n3. Open External tools in PyCharm/IntelliJ IDEA\n\nOn macOS:\n\n`PyCharm -> Preferences -> Tools -> External Tools`\n\nOn Windows / Linux / BSD:\n\n`File -> Settings -> Tools -> External Tools`\n\n4. Click the + icon to add a new external tool with the following values:\n\n   - Name: Black\n   - Description: Black is the uncompromising Python code formatter.\n   - Program: <install_location_from_step_2>\n   - Arguments: `\"$FilePath$\"`\n\n5. Format the currently opened file by selecting `Tools -> External Tools -> black`.\n\n   - Alternatively, you can set a keyboard shortcut by navigating to\n     `Preferences or Settings -> Keymap -> External Tools -> External Tools - Black`.\n\n6. Optionally, run _Black_ on every file save:\n\n   1. Make sure you have the\n      [File Watcher](https://plugins.jetbrains.com/plugin/7177-file-watchers) plugin\n      installed.\n   2. Go to `Preferences or Settings -> Tools -> File Watchers` and click `+` to add a\n      new watcher:\n      - Name: Black\n      - File type: Python\n      - Scope: Project Files\n      - Program: <install_location_from_step_2>\n      - Arguments: `$FilePath$`\n      - Output paths to refresh: `$FilePath$`\n      - Working directory: `$ProjectFileDir$`\n\n   - Uncheck \"Auto-save edited files to trigger the watcher\"\n\n### Wing IDE\n\nWing supports black via the OS Commands tool, as explained in the Wing documentation on\n[pep8 formatting](https://wingware.com/doc/edit/pep8). The detailed procedure is:\n\n1. Install `black`.\n\n```console\n$ pip install black\n```\n\n2. Make sure it runs from the command line, e.g.\n\n```console\n$ black --help\n```\n\n3. In Wing IDE, activate the **OS Commands** panel and define the command **black** to\n   execute black on the currently selected file:\n\n- Use the Tools -> OS Commands menu selection\n- click on **+** in **OS Commands** -> New: Command line..\n  - Title: black\n  - Command Line: black %s\n  - I/O Encoding: Use Default\n  - Key Binding: F1\n  - [x] Raise OS Commands when executed\n  - [x] Auto-save files before execution\n  - [x] Line mode\n\n4. Select a file in the editor and press **F1** , or whatever key binding you selected\n   in step 3, to reformat the file.\n\n### Vim\n\nCommands and shortcuts:\n\n- `:Black` to format the entire file (ranges not supported);\n- `:BlackUpgrade` to upgrade _Black_ inside the virtualenv;\n- `:BlackVersion` to get the current version of _Black_ inside the virtualenv.\n\nConfiguration:\n\n- `g:black_fast` (defaults to `0`)\n- `g:black_linelength` (defaults to `88`)\n- `g:black_skip_string_normalization` (defaults to `0`)\n- `g:black_virtualenv` (defaults to `~/.vim/black` or `~/.local/share/nvim/black`)\n\nTo install with [vim-plug](https://github.com/junegunn/vim-plug):\n\n```\nPlug 'psf/black'\n```\n\nor with [Vundle](https://github.com/VundleVim/Vundle.vim):\n\n```\nPlugin 'psf/black'\n```\n\nor you can copy the plugin from\n[plugin/black.vim](https://github.com/psf/black/tree/master/plugin/black.vim).\n\n```\nmkdir -p ~/.vim/pack/python/start/black/plugin\ncurl https://raw.githubusercontent.com/psf/black/master/plugin/black.vim -o ~/.vim/pack/python/start/black/plugin/black.vim\n```\n\nLet me know if this requires any changes to work with Vim 8's builtin `packadd`, or\nPathogen, and so on.\n\nThis plugin **requires Vim 7.0+ built with Python 3.6+ support**. It needs Python 3.6 to\nbe able to run _Black_ inside the Vim process which is much faster than calling an\nexternal command.\n\nOn first run, the plugin creates its own virtualenv using the right Python version and\nautomatically installs _Black_. You can upgrade it later by calling `:BlackUpgrade` and\nrestarting Vim.\n\nIf you need to do anything special to make your virtualenv work and install _Black_ (for\nexample you want to run a version from master), create a virtualenv manually and point\n`g:black_virtualenv` to it. The plugin will use it.\n\nTo run _Black_ on save, add the following line to `.vimrc` or `init.vim`:\n\n```\nautocmd BufWritePre *.py execute ':Black'\n```\n\nTo run _Black_ on a key press (e.g. F9 below), add this:\n\n```\nnnoremap <F9> :Black<CR>\n```\n\n**How to get Vim with Python 3.6?** On Ubuntu 17.10 Vim comes with Python 3.6 by\ndefault. On macOS with Homebrew run: `brew install vim`. When building Vim from source,\nuse: `./configure --enable-python3interp=yes`. There's many guides online how to do\nthis.\n\n### Visual Studio Code\n\nUse the\n[Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)\n([instructions](https://code.visualstudio.com/docs/python/editing#_formatting)).\n\n### SublimeText 3\n\nUse [sublack plugin](https://github.com/jgirardet/sublack).\n\n### Jupyter Notebook Magic\n\nUse [blackcellmagic](https://github.com/csurfer/blackcellmagic).\n\n### Python Language Server\n\nIf your editor supports the [Language Server Protocol](https://langserver.org/) (Atom,\nSublime Text, Visual Studio Code and many more), you can use the\n[Python Language Server](https://github.com/palantir/python-language-server) with the\n[pyls-black](https://github.com/rupert/pyls-black) plugin.\n\n### Atom/Nuclide\n\nUse [python-black](https://atom.io/packages/python-black).\n\n### Kakoune\n\nAdd the following hook to your kakrc, then run black with `:format`.\n\n```\nhook global WinSetOption filetype=python %{\n    set-option window formatcmd 'black -q  -'\n}\n```\n\n### Thonny\n\nUse [Thonny-black-code-format](https://github.com/Franccisco/thonny-black-code-format).\n\n### Other editors\n\nOther editors will require external contributions.\n\nPatches welcome! \u2728 \ud83c\udf70 \u2728\n\nAny tool that can pipe code through _Black_ using its stdio mode (just\n[use `-` as the file name](https://www.tldp.org/LDP/abs/html/special-chars.html#DASHREF2)).\nThe formatted code will be returned on stdout (unless `--check` was passed). _Black_\nwill still emit messages on stderr but that shouldn't affect your use case.\n\nThis can be used for example with PyCharm's or IntelliJ's\n[File Watchers](https://www.jetbrains.com/help/pycharm/file-watchers.html).\n\n## blackd\n\n`blackd` is a small HTTP server that exposes _Black_'s functionality over a simple\nprotocol. The main benefit of using it is to avoid paying the cost of starting up a new\n_Black_ process every time you want to blacken a file.\n\n### Usage\n\n`blackd` is not packaged alongside _Black_ by default because it has additional\ndependencies. You will need to do `pip install black[d]` to install it.\n\nYou can start the server on the default port, binding only to the local interface by\nrunning `blackd`. You will see a single line mentioning the server's version, and the\nhost and port it's listening on. `blackd` will then print an access log similar to most\nweb servers on standard output, merged with any exception traces caused by invalid\nformatting requests.\n\n`blackd` provides even less options than _Black_. You can see them by running\n`blackd --help`:\n\n```text\nUsage: blackd [OPTIONS]\n\nOptions:\n  --bind-host TEXT                Address to bind the server to.\n  --bind-port INTEGER             Port to listen on\n  --version                       Show the version and exit.\n  -h, --help                      Show this message and exit.\n```\n\nThere is no official blackd client tool (yet!). You can test that blackd is working\nusing `curl`:\n\n```\nblackd --bind-port 9090 &  # or let blackd choose a port\ncurl -s -XPOST \"localhost:9090\" -d \"print('valid')\"\n```\n\n### Protocol\n\n`blackd` only accepts `POST` requests at the `/` path. The body of the request should\ncontain the python source code to be formatted, encoded according to the `charset` field\nin the `Content-Type` request header. If no `charset` is specified, `blackd` assumes\n`UTF-8`.\n\nThere are a few HTTP headers that control how the source is formatted. These correspond\nto command line flags for _Black_. There is one exception to this: `X-Protocol-Version`\nwhich if present, should have the value `1`, otherwise the request is rejected with\n`HTTP 501` (Not Implemented).\n\nThe headers controlling how code is formatted are:\n\n- `X-Line-Length`: corresponds to the `--line-length` command line flag.\n- `X-Skip-String-Normalization`: corresponds to the `--skip-string-normalization`\n  command line flag. If present and its value is not the empty string, no string\n  normalization will be performed.\n- `X-Fast-Or-Safe`: if set to `fast`, `blackd` will act as _Black_ does when passed the\n  `--fast` command line flag.\n- `X-Python-Variant`: if set to `pyi`, `blackd` will act as _Black_ does when passed the\n  `--pyi` command line flag. Otherwise, its value must correspond to a Python version or\n  a set of comma-separated Python versions, optionally prefixed with `py`. For example,\n  to request code that is compatible with Python 3.5 and 3.6, set the header to\n  `py3.5,py3.6`.\n- `X-Diff`: corresponds to the `--diff` command line flag. If present, a diff of the\n  formats will be output.\n\nIf any of these headers are set to invalid values, `blackd` returns a `HTTP 400` error\nresponse, mentioning the name of the problematic header in the message body.\n\nApart from the above, `blackd` can produce the following response codes:\n\n- `HTTP 204`: If the input is already well-formatted. The response body is empty.\n- `HTTP 200`: If formatting was needed on the input. The response body contains the\n  blackened Python code, and the `Content-Type` header is set accordingly.\n- `HTTP 400`: If the input contains a syntax error. Details of the error are returned in\n  the response body.\n- `HTTP 500`: If there was any kind of error while trying to format the input. The\n  response body contains a textual representation of the error.\n\nThe response headers include a `X-Black-Version` header containing the version of\n_Black_.\n\n## Version control integration\n\nUse [pre-commit](https://pre-commit.com/). Once you\n[have it installed](https://pre-commit.com/#install), add this to the\n`.pre-commit-config.yaml` in your repository:\n\n```yaml\nrepos:\n  - repo: https://github.com/psf/black\n    rev: stable\n    hooks:\n      - id: black\n        language_version: python3.6\n```\n\nThen run `pre-commit install` and you're ready to go.\n\nAvoid using `args` in the hook. Instead, store necessary configuration in\n`pyproject.toml` so that editors and command-line usage of Black all behave consistently\nfor your project. See _Black_'s own\n[pyproject.toml](https://github.com/psf/black/blob/master/pyproject.toml) for an\nexample.\n\nIf you're already using Python 3.7, switch the `language_version` accordingly. Finally,\n`stable` is a tag that is pinned to the latest release on PyPI. If you'd rather run on\nmaster, this is also an option.\n\n## Ignoring unmodified files\n\n_Black_ remembers files it has already formatted, unless the `--diff` flag is used or\ncode is passed via standard input. This information is stored per-user. The exact\nlocation of the file depends on the _Black_ version and the system on which _Black_ is\nrun. The file is non-portable. The standard location on common operating systems is:\n\n- Windows:\n  `C:\\\\Users\\<username>\\AppData\\Local\\black\\black\\Cache\\<version>\\cache.<line-length>.<file-mode>.pickle`\n- macOS:\n  `/Users/<username>/Library/Caches/black/<version>/cache.<line-length>.<file-mode>.pickle`\n- Linux:\n  `/home/<username>/.cache/black/<version>/cache.<line-length>.<file-mode>.pickle`\n\n`file-mode` is an int flag that determines whether the file was formatted as 3.6+ only,\nas .pyi, and whether string normalization was omitted.\n\nTo override the location of these files on macOS or Linux, set the environment variable\n`XDG_CACHE_HOME` to your preferred location. For example, if you want to put the cache\nin the directory you're running _Black_ from, set `XDG_CACHE_HOME=.cache`. _Black_ will\nthen write the above files to `.cache/black/<version>/`.\n\n## Used by\n\nThe following notable open-source projects trust _Black_ with enforcing a consistent\ncode style: pytest, tox, Pyramid, Django Channels, Hypothesis, attrs, SQLAlchemy,\nPoetry, PyPA applications (Warehouse, Pipenv, virtualenv), pandas, Pillow, every Datadog\nAgent Integration, Home Assistant.\n\nAre we missing anyone? Let us know.\n\n## Testimonials\n\n**Dusty Phillips**,\n[writer](https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=dusty+phillips):\n\n> _Black_ is opinionated so you don't have to be.\n\n**Hynek Schlawack**, [creator of `attrs`](https://www.attrs.org/), core developer of\nTwisted and CPython:\n\n> An auto-formatter that doesn't suck is all I want for Xmas!\n\n**Carl Meyer**, [Django](https://www.djangoproject.com/) core developer:\n\n> At least the name is good.\n\n**Kenneth Reitz**, creator of [`requests`](http://python-requests.org/) and\n[`pipenv`](https://docs.pipenv.org/):\n\n> This vastly improves the formatting of our code. Thanks a ton!\n\n## Show your style\n\nUse the badge in your project's README.md:\n\n```markdown\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n```\n\nUsing the badge in README.rst:\n\n```\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n```\n\nLooks like this:\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## License\n\nMIT\n\n## Contributing to _Black_\n\nIn terms of inspiration, _Black_ is about as configurable as _gofmt_. This is\ndeliberate.\n\nBug reports and fixes are always welcome! However, before you suggest a new feature or\nconfiguration knob, ask yourself why you want it. If it enables better integration with\nsome workflow, fixes an inconsistency, speeds things up, and so on - go for it! On the\nother hand, if your answer is \"because I don't like a particular formatting\" then you're\nnot ready to embrace _Black_ yet. Such changes are unlikely to get accepted. You can\nstill try but prepare to be disappointed.\n\nMore details can be found in [CONTRIBUTING](CONTRIBUTING.md).\n\n## Change Log\n\nThe log's become rather long. It moved to its own file.\n\nSee [CHANGES](CHANGES.md).\n\n## Authors\n\nGlued together by [\u0141ukasz Langa](mailto:lukasz@langa.pl).\n\nMaintained with [Carol Willing](mailto:carolcode@willingconsulting.com),\n[Carl Meyer](mailto:carl@oddbird.net),\n[Jelle Zijlstra](mailto:jelle.zijlstra@gmail.com),\n[Mika Naylor](mailto:mail@autophagy.io),\n[Zsolt Dollenstein](mailto:zsol.zsol@gmail.com), and\n[Cooper Lees](mailto:me@cooperlees.com).\n\nMultiple contributions by:\n\n- [Abdur-Rahmaan Janhangeer](mailto:arj.python@gmail.com)\n- [Adam Johnson](mailto:me@adamj.eu)\n- [Alexander Huynh](mailto:github@grande.coffee)\n- [Andrew Thorp](mailto:andrew.thorp.dev@gmail.com)\n- [Andrey](mailto:dyuuus@yandex.ru)\n- [Andy Freeland](mailto:andy@andyfreeland.net)\n- [Anthony Sottile](mailto:asottile@umich.edu)\n- [Arjaan Buijk](mailto:arjaan.buijk@gmail.com)\n- [Artem Malyshev](mailto:proofit404@gmail.com)\n- [Asger Hautop Drewsen](mailto:asgerdrewsen@gmail.com)\n- [Augie Fackler](mailto:raf@durin42.com)\n- [Aviskar KC](mailto:aviskarkc10@gmail.com)\n- [Benjamin Woodruff](mailto:github@benjam.info)\n- [Brandt Bucher](mailto:brandtbucher@gmail.com)\n- Charles Reid\n- [Christian Heimes](mailto:christian@python.org)\n- [Chuck Wooters](mailto:chuck.wooters@microsoft.com)\n- [Cooper Ry Lees](mailto:me@cooperlees.com)\n- [Daniel Hahler](mailto:github@thequod.de)\n- [Daniel M. Capella](mailto:polycitizen@gmail.com)\n- Daniele Esposti\n- dylanjblack\n- [Eli Treuherz](mailto:eli@treuherz.com)\n- [Florent Thiery](mailto:fthiery@gmail.com)\n- hauntsaninja\n- Hugo van Kemenade\n- [Ivan Katani\u0107](mailto:ivan.katanic@gmail.com)\n- [Jason Fried](mailto:me@jasonfried.info)\n- [jgirardet](mailto:ijkl@netc.fr)\n- [Joe Antonakakis](mailto:jma353@cornell.edu)\n- [Jon Dufresne](mailto:jon.dufresne@gmail.com)\n- [Jonas Obrist](mailto:ojiidotch@gmail.com)\n- [Josh Bode](mailto:joshbode@fastmail.com)\n- [Juan Luis Cano Rodr\u00edguez](mailto:hello@juanlu.space)\n- [Katie McLaughlin](mailto:katie@glasnt.com)\n- Lawrence Chan\n- [Linus Groh](mailto:mail@linusgroh.de)\n- [Luka Sterbic](mailto:luka.sterbic@gmail.com)\n- Mariatta\n- [Matt VanEseltine](mailto:vaneseltine@gmail.com)\n- [Michael Flaxman](mailto:michael.flaxman@gmail.com)\n- [Michael J. Sullivan](mailto:sully@msully.net)\n- [Michael McClimon](mailto:michael@mcclimon.org)\n- [Miguel Gaiowski](mailto:miggaiowski@gmail.com)\n- [Mike](mailto:roshi@fedoraproject.org)\n- [Min ho Kim](mailto:minho42@gmail.com)\n- [Miroslav Shubernetskiy](mailto:miroslav@miki725.com)\n- [Neraste](mailto:neraste.herr10@gmail.com)\n- [Ofek Lev](mailto:ofekmeister@gmail.com)\n- [Osaetin Daniel](mailto:osaetindaniel@gmail.com)\n- [Pablo Galindo](mailto:Pablogsal@gmail.com)\n- [Peter Bengtsson](mailto:mail@peterbe.com)\n- pmacosta\n- [Rishikesh Jha](mailto:rishijha424@gmail.com)\n- [Stavros Korokithakis](mailto:hi@stavros.io)\n- [Stephen Rosen](mailto:sirosen@globus.org)\n- [Sunil Kapil](mailto:snlkapil@gmail.com)\n- [Thom Lu](mailto:thomas.c.lu@gmail.com)\n- [Tom Christie](mailto:tom@tomchristie.com)\n- [Tzu-ping Chung](mailto:uranusjr@gmail.com)\n- [Utsav Shah](mailto:ukshah2@illinois.edu)\n- vezeli\n- [Vishwas B Sharma](mailto:sharma.vishwas88@gmail.com)\n- [Yngve H\u00f8iseth](mailto:yngve@hoiseth.net)\n- [Yurii Karabas](mailto:1998uriyyo@gmail.com)\n\n\n## Change Log\n\n### 19.10b0\n\n- added support for PEP 572 assignment expressions (#711)\n\n- added support for PEP 570 positional-only arguments (#943)\n\n- added support for async generators (#593)\n\n- added support for pre-splitting collections by putting an explicit trailing comma\n  inside (#826)\n\n- added `black -c` as a way to format code passed from the command line (#761)\n\n- --safe now works with Python 2 code (#840)\n\n- fixed grammar selection for Python 2-specific code (#765)\n\n- fixed feature detection for trailing commas in function definitions and call sites\n  (#763)\n\n- `# fmt: off`/`# fmt: on` comment pairs placed multiple times within the same block of\n  code now behave correctly (#1005)\n\n- _Black_ no longer crashes on Windows machines with more than 61 cores (#838)\n\n- _Black_ no longer crashes on standalone comments prepended with a backslash (#767)\n\n- _Black_ no longer crashes on `from` ... `import` blocks with comments (#829)\n\n- _Black_ no longer crashes on Python 3.7 on some platform configurations (#494)\n\n- _Black_ no longer fails on comments in from-imports (#671)\n\n- _Black_ no longer fails when the file starts with a backslash (#922)\n\n- _Black_ no longer merges regular comments with type comments (#1027)\n\n- _Black_ no longer splits long lines that contain type comments (#997)\n\n- removed unnecessary parentheses around `yield` expressions (#834)\n\n- added parentheses around long tuples in unpacking assignments (#832)\n\n- added parentheses around complex powers when they are prefixed by a unary operator\n  (#646)\n\n- fixed bug that led _Black_ format some code with a line length target of 1 (#762)\n\n- _Black_ no longer introduces quotes in f-string subexpressions on string boundaries\n  (#863)\n\n- if _Black_ puts parenthesis around a single expression, it moves comments to the\n  wrapped expression instead of after the brackets (#872)\n\n- `blackd` now returns the version of _Black_ in the response headers (#1013)\n\n- `blackd` can now output the diff of formats on source code when the `X-Diff` header is\n  provided (#969)\n\n### 19.3b0\n\n- new option `--target-version` to control which Python versions _Black_-formatted code\n  should target (#618)\n\n- deprecated `--py36` (use `--target-version=py36` instead) (#724)\n\n- _Black_ no longer normalizes numeric literals to include `_` separators (#696)\n\n- long `del` statements are now split into multiple lines (#698)\n\n- type comments are no longer mangled in function signatures\n\n- improved performance of formatting deeply nested data structures (#509)\n\n- _Black_ now properly formats multiple files in parallel on Windows (#632)\n\n- _Black_ now creates cache files atomically which allows it to be used in parallel\n  pipelines (like `xargs -P8`) (#673)\n\n- _Black_ now correctly indents comments in files that were previously formatted with\n  tabs (#262)\n\n- `blackd` now supports CORS (#622)\n\n### 18.9b0\n\n- numeric literals are now formatted by _Black_ (#452, #461, #464, #469):\n\n  - numeric literals are normalized to include `_` separators on Python 3.6+ code\n\n  - added `--skip-numeric-underscore-normalization` to disable the above behavior and\n    leave numeric underscores as they were in the input\n\n  - code with `_` in numeric literals is recognized as Python 3.6+\n\n  - most letters in numeric literals are lowercased (e.g., in `1e10`, `0x01`)\n\n  - hexadecimal digits are always uppercased (e.g. `0xBADC0DE`)\n\n- added `blackd`, see [its documentation](#blackd) for more info (#349)\n\n- adjacent string literals are now correctly split into multiple lines (#463)\n\n- trailing comma is now added to single imports that don't fit on a line (#250)\n\n- cache is now populated when `--check` is successful for a file which speeds up\n  consecutive checks of properly formatted unmodified files (#448)\n\n- whitespace at the beginning of the file is now removed (#399)\n\n- fixed mangling [pweave](http://mpastell.com/pweave/) and\n  [Spyder IDE](https://pythonhosted.org/spyder/) special comments (#532)\n\n- fixed unstable formatting when unpacking big tuples (#267)\n\n- fixed parsing of `__future__` imports with renames (#389)\n\n- fixed scope of `# fmt: off` when directly preceding `yield` and other nodes (#385)\n\n- fixed formatting of lambda expressions with default arguments (#468)\n\n- fixed `async for` statements: _Black_ no longer breaks them into separate lines (#372)\n\n- note: the Vim plugin stopped registering `,=` as a default chord as it turned out to\n  be a bad idea (#415)\n\n### 18.6b4\n\n- hotfix: don't freeze when multiple comments directly precede `# fmt: off` (#371)\n\n### 18.6b3\n\n- typing stub files (`.pyi`) now have blank lines added after constants (#340)\n\n- `# fmt: off` and `# fmt: on` are now much more dependable:\n\n  - they now work also within bracket pairs (#329)\n\n  - they now correctly work across function/class boundaries (#335)\n\n  - they now work when an indentation block starts with empty lines or misaligned\n    comments (#334)\n\n- made Click not fail on invalid environments; note that Click is right but the\n  likelihood we'll need to access non-ASCII file paths when dealing with Python source\n  code is low (#277)\n\n- fixed improper formatting of f-strings with quotes inside interpolated expressions\n  (#322)\n\n- fixed unnecessary slowdown when long list literals where found in a file\n\n- fixed unnecessary slowdown on AST nodes with very many siblings\n\n- fixed cannibalizing backslashes during string normalization\n\n- fixed a crash due to symbolic links pointing outside of the project directory (#338)\n\n### 18.6b2\n\n- added `--config` (#65)\n\n- added `-h` equivalent to `--help` (#316)\n\n- fixed improper unmodified file caching when `-S` was used\n\n- fixed extra space in string unpacking (#305)\n\n- fixed formatting of empty triple quoted strings (#313)\n\n- fixed unnecessary slowdown in comment placement calculation on lines without comments\n\n### 18.6b1\n\n- hotfix: don't output human-facing information on stdout (#299)\n\n- hotfix: don't output cake emoji on non-zero return code (#300)\n\n### 18.6b0\n\n- added `--include` and `--exclude` (#270)\n\n- added `--skip-string-normalization` (#118)\n\n- added `--verbose` (#283)\n\n- the header output in `--diff` now actually conforms to the unified diff spec\n\n- fixed long trivial assignments being wrapped in unnecessary parentheses (#273)\n\n- fixed unnecessary parentheses when a line contained multiline strings (#232)\n\n- fixed stdin handling not working correctly if an old version of Click was used (#276)\n\n- _Black_ now preserves line endings when formatting a file in place (#258)\n\n### 18.5b1\n\n- added `--pyi` (#249)\n\n- added `--py36` (#249)\n\n- Python grammar pickle caches are stored with the formatting caches, making _Black_\n  work in environments where site-packages is not user-writable (#192)\n\n- _Black_ now enforces a PEP 257 empty line after a class-level docstring (and/or\n  fields) and the first method\n\n- fixed invalid code produced when standalone comments were present in a trailer that\n  was omitted from line splitting on a large expression (#237)\n\n- fixed optional parentheses being removed within `# fmt: off` sections (#224)\n\n- fixed invalid code produced when stars in very long imports were incorrectly wrapped\n  in optional parentheses (#234)\n\n- fixed unstable formatting when inline comments were moved around in a trailer that was\n  omitted from line splitting on a large expression (#238)\n\n- fixed extra empty line between a class declaration and the first method if no class\n  docstring or fields are present (#219)\n\n- fixed extra empty line between a function signature and an inner function or inner\n  class (#196)\n\n### 18.5b0\n\n- call chains are now formatted according to the\n  [fluent interfaces](https://en.wikipedia.org/wiki/Fluent_interface) style (#67)\n\n- data structure literals (tuples, lists, dictionaries, and sets) are now also always\n  exploded like imports when they don't fit in a single line (#152)\n\n- slices are now formatted according to PEP 8 (#178)\n\n- parentheses are now also managed automatically on the right-hand side of assignments\n  and return statements (#140)\n\n- math operators now use their respective priorities for delimiting multiline\n  expressions (#148)\n\n- optional parentheses are now omitted on expressions that start or end with a bracket\n  and only contain a single operator (#177)\n\n- empty parentheses in a class definition are now removed (#145, #180)\n\n- string prefixes are now standardized to lowercase and `u` is removed on Python 3.6+\n  only code and Python 2.7+ code with the `unicode_literals` future import (#188, #198,\n  #199)\n\n- typing stub files (`.pyi`) are now formatted in a style that is consistent with PEP\n  484 (#207, #210)\n\n- progress when reformatting many files is now reported incrementally\n\n- fixed trailers (content with brackets) being unnecessarily exploded into their own\n  lines after a dedented closing bracket (#119)\n\n- fixed an invalid trailing comma sometimes left in imports (#185)\n\n- fixed non-deterministic formatting when multiple pairs of removable parentheses were\n  used (#183)\n\n- fixed multiline strings being unnecessarily wrapped in optional parentheses in long\n  assignments (#215)\n\n- fixed not splitting long from-imports with only a single name\n\n- fixed Python 3.6+ file discovery by also looking at function calls with unpacking.\n  This fixed non-deterministic formatting if trailing commas where used both in function\n  signatures with stars and function calls with stars but the former would be\n  reformatted to a single line.\n\n- fixed crash on dealing with optional parentheses (#193)\n\n- fixed \"is\", \"is not\", \"in\", and \"not in\" not considered operators for splitting\n  purposes\n\n- fixed crash when dead symlinks where encountered\n\n### 18.4a4\n\n- don't populate the cache on `--check` (#175)\n\n### 18.4a3\n\n- added a \"cache\"; files already reformatted that haven't changed on disk won't be\n  reformatted again (#109)\n\n- `--check` and `--diff` are no longer mutually exclusive (#149)\n\n- generalized star expression handling, including double stars; this fixes\n  multiplication making expressions \"unsafe\" for trailing commas (#132)\n\n- _Black_ no longer enforces putting empty lines behind control flow statements (#90)\n\n- _Black_ now splits imports like \"Mode 3 + trailing comma\" of isort (#127)\n\n- fixed comment indentation when a standalone comment closes a block (#16, #32)\n\n- fixed standalone comments receiving extra empty lines if immediately preceding a\n  class, def, or decorator (#56, #154)\n\n- fixed `--diff` not showing entire path (#130)\n\n- fixed parsing of complex expressions after star and double stars in function calls\n  (#2)\n\n- fixed invalid splitting on comma in lambda arguments (#133)\n\n- fixed missing splits of ternary expressions (#141)\n\n### 18.4a2\n\n- fixed parsing of unaligned standalone comments (#99, #112)\n\n- fixed placement of dictionary unpacking inside dictionary literals (#111)\n\n- Vim plugin now works on Windows, too\n\n- fixed unstable formatting when encountering unnecessarily escaped quotes in a string\n  (#120)\n\n### 18.4a1\n\n- added `--quiet` (#78)\n\n- added automatic parentheses management (#4)\n\n- added [pre-commit](https://pre-commit.com) integration (#103, #104)\n\n- fixed reporting on `--check` with multiple files (#101, #102)\n\n- fixed removing backslash escapes from raw strings (#100, #105)\n\n### 18.4a0\n\n- added `--diff` (#87)\n\n- add line breaks before all delimiters, except in cases like commas, to better comply\n  with PEP 8 (#73)\n\n- standardize string literals to use double quotes (almost) everywhere (#75)\n\n- fixed handling of standalone comments within nested bracketed expressions; _Black_\n  will no longer produce super long lines or put all standalone comments at the end of\n  the expression (#22)\n\n- fixed 18.3a4 regression: don't crash and burn on empty lines with trailing whitespace\n  (#80)\n\n- fixed 18.3a4 regression: `# yapf: disable` usage as trailing comment would cause\n  _Black_ to not emit the rest of the file (#95)\n\n- when CTRL+C is pressed while formatting many files, _Black_ no longer freaks out with\n  a flurry of asyncio-related exceptions\n\n- only allow up to two empty lines on module level and only single empty lines within\n  functions (#74)\n\n### 18.3a4\n\n- `# fmt: off` and `# fmt: on` are implemented (#5)\n\n- automatic detection of deprecated Python 2 forms of print statements and exec\n  statements in the formatted file (#49)\n\n- use proper spaces for complex expressions in default values of typed function\n  arguments (#60)\n\n- only return exit code 1 when --check is used (#50)\n\n- don't remove single trailing commas from square bracket indexing (#59)\n\n- don't omit whitespace if the previous factor leaf wasn't a math operator (#55)\n\n- omit extra space in kwarg unpacking if it's the first argument (#46)\n\n- omit extra space in\n  [Sphinx auto-attribute comments](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#directive-autoattribute)\n  (#68)\n\n### 18.3a3\n\n- don't remove single empty lines outside of bracketed expressions (#19)\n\n- added ability to pipe formatting from stdin to stdin (#25)\n\n- restored ability to format code with legacy usage of `async` as a name (#20, #42)\n\n- even better handling of numpy-style array indexing (#33, again)\n\n### 18.3a2\n\n- changed positioning of binary operators to occur at beginning of lines instead of at\n  the end, following\n  [a recent change to PEP 8](https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b)\n  (#21)\n\n- ignore empty bracket pairs while splitting. This avoids very weirdly looking\n  formattings (#34, #35)\n\n- remove a trailing comma if there is a single argument to a call\n\n- if top level functions were separated by a comment, don't put four empty lines after\n  the upper function\n\n- fixed unstable formatting of newlines with imports\n\n- fixed unintentional folding of post scriptum standalone comments into last statement\n  if it was a simple statement (#18, #28)\n\n- fixed missing space in numpy-style array indexing (#33)\n\n- fixed spurious space after star-based unary expressions (#31)\n\n### 18.3a1\n\n- added `--check`\n\n- only put trailing commas in function signatures and calls if it's safe to do so. If\n  the file is Python 3.6+ it's always safe, otherwise only safe if there are no `*args`\n  or `**kwargs` used in the signature or call. (#8)\n\n- fixed invalid spacing of dots in relative imports (#6, #13)\n\n- fixed invalid splitting after comma on unpacked variables in for-loops (#23)\n\n- fixed spurious space in parenthesized set expressions (#7)\n\n- fixed spurious space after opening parentheses and in default arguments (#14, #17)\n\n- fixed spurious space after unary operators when the operand was a complex expression\n  (#15)\n\n### 18.3a0\n\n- first published version, Happy \ud83c\udf70 Day 2018!\n\n- alpha quality\n\n- date-versioned (see: https://calver.org/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/psf/black", "keywords": "automation formatter yapf autopep8 pyfmt gofmt rustfmt", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "black-but-with-tabs-instead-of-spaces", "package_url": "https://pypi.org/project/black-but-with-tabs-instead-of-spaces/", "platform": "", "project_url": "https://pypi.org/project/black-but-with-tabs-instead-of-spaces/", "project_urls": {"Homepage": "https://github.com/psf/black"}, "release_url": "https://pypi.org/project/black-but-with-tabs-instead-of-spaces/19.11/", "requires_dist": ["click (>=6.5)", "attrs (>=18.1.0)", "appdirs", "toml (>=0.9.4)", "typed-ast (>=1.4.0)", "regex (>=2020.1.8)", "pathspec (<1,>=0.6)", "typing-extensions (>=3.7.4)", "mypy-extensions (>=0.4.3)", "dataclasses (>=0.6) ; python_version < \"3.7\"", "aiohttp (>=3.3.2) ; extra == 'd'", "aiohttp-cors ; extra == 'd'"], "requires_python": ">=3.6", "summary": "The --compromising code formatter.", "version": "19.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Black Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fec70e46ca299f4ec9d49a417c04795107b74f0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7073662f626c61636b2f6d61737465722f646f63732f5f7374617469632f6c6f676f322d726561646d652e706e67\"></p>\n<h2>The Uncompromising Code Formatter</h2>\n<p align=\"center\">\n<a href=\"https://travis-ci.com/psf/black\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93c552429ec5731af5aedc6a02f23658c9586019/68747470733a2f2f7472617669732d63692e636f6d2f7073662f626c61636b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/psf/black/actions\" rel=\"nofollow\"><img alt=\"Actions Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f986644ee6a72582c9e41dfb40cf347f1a7ad288/68747470733a2f2f6769746875622e636f6d2f7073662f626c61636b2f776f726b666c6f77732f546573742f62616467652e737667\"></a>\n<a href=\"https://black.readthedocs.io/en/stable/?badge=stable\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3fdc131cd7e043ac36d4779ca4cc013822502cf/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f626c61636b2f62616467652f3f76657273696f6e3d737461626c65\"></a>\n<a href=\"https://coveralls.io/github/psf/black?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9854a902d2407ff383629926dfb3a881d6cf41fa/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7073662f626c61636b2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/psf/black/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf7228d5572de19e0846f5a599f8a598a6295dec/68747470733a2f2f626c61636b2e72656164746865646f63732e696f2f656e2f737461626c652f5f7374617469632f6c6963656e73652e737667\"></a>\n<a href=\"https://pypi.org/project/black/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8d6dd72a35a3c4542bd620d84cbcc3c323f82af/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626c61636b\"></a>\n<a href=\"https://pepy.tech/project/black\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebc2f8272ee94c640ace75a551850614808be3bd/68747470733a2f2f706570792e746563682f62616467652f626c61636b\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n</p>\n<blockquote>\n<p>\u201cAny color you like.\u201d</p>\n</blockquote>\n<p><em>Black</em> is the uncompromising Python code formatter. By using it, you agree to cede\ncontrol over minutiae of hand-formatting. In return, <em>Black</em> gives you speed,\ndeterminism, and freedom from <code>pycodestyle</code> nagging about formatting. You will save time\nand mental energy for more important matters.</p>\n<p>Blackened code looks the same regardless of the project you're reading. Formatting\nbecomes transparent after a while and you can focus on the content instead.</p>\n<p><em>Black</em> makes code review faster by producing the smallest diffs possible.</p>\n<p>Try it out now using the <a href=\"https://black.now.sh\" rel=\"nofollow\">Black Playground</a>. Watch the\n<a href=\"https://youtu.be/esZLCuWs_2Y\" rel=\"nofollow\">PyCon 2019 talk</a> to learn more.</p>\n<hr>\n<p><em>Contents:</em> <strong><a href=\"#installation-and-usage\" rel=\"nofollow\">Installation and usage</a></strong> |\n<strong><a href=\"#the-black-code-style\" rel=\"nofollow\">Code style</a></strong> | <strong><a href=\"#pragmatism\" rel=\"nofollow\">Pragmatism</a></strong> |\n<strong><a href=\"#pyprojecttoml\" rel=\"nofollow\">pyproject.toml</a></strong> | <strong><a href=\"#editor-integration\" rel=\"nofollow\">Editor integration</a></strong> |\n<strong><a href=\"#blackd\" rel=\"nofollow\">blackd</a></strong> | <strong><a href=\"#version-control-integration\" rel=\"nofollow\">Version control integration</a></strong>\n| <strong><a href=\"#ignoring-unmodified-files\" rel=\"nofollow\">Ignoring unmodified files</a></strong> | <strong><a href=\"#used-by\" rel=\"nofollow\">Used by</a></strong>\n| <strong><a href=\"#testimonials\" rel=\"nofollow\">Testimonials</a></strong> | <strong><a href=\"#show-your-style\" rel=\"nofollow\">Show your style</a></strong> |\n<strong><a href=\"#contributing-to-black\" rel=\"nofollow\">Contributing</a></strong> | <strong><a href=\"#change-log\" rel=\"nofollow\">Change Log</a></strong> |\n<strong><a href=\"#authors\" rel=\"nofollow\">Authors</a></strong></p>\n<hr>\n<h2>Installation and usage</h2>\n<h3>Installation</h3>\n<p><em>Black</em> can be installed by running <code>pip install black</code>. It requires Python 3.6.0+ to\nrun but you can reformat Python 2 code with it, too.</p>\n<h3>Usage</h3>\n<p>To get started right away with sensible defaults:</p>\n<pre><code>black {source_file_or_directory}\n</code></pre>\n<h3>Command line options</h3>\n<p><em>Black</em> doesn't provide many options. You can list them by running <code>black --help</code>:</p>\n<pre>black [OPTIONS] [SRC]...\n\nOptions:\n  -c, --code TEXT                 Format the code passed in as a string.\n  -l, --line-length INTEGER       How many characters per line to allow.\n                                  [default: 88]\n  -t, --target-version [py27|py33|py34|py35|py36|py37|py38]\n                                  Python versions that should be supported by\n                                  Black's output. [default: per-file auto-\n                                  detection]\n  --py36                          Allow using Python 3.6-only syntax on all\n                                  input files.  This will put trailing commas\n                                  in function signatures and calls also after\n                                  *args and **kwargs. Deprecated; use\n                                  --target-version instead. [default: per-file\n                                  auto-detection]\n  --pyi                           Format all input files like typing stubs\n                                  regardless of file extension (useful when\n                                  piping source on standard input).\n  -S, --skip-string-normalization\n                                  Don't normalize string quotes or prefixes.\n  --check                         Don't write the files back, just return the\n                                  status.  Return code 0 means nothing would\n                                  change.  Return code 1 means some files\n                                  would be reformatted.  Return code 123 means\n                                  there was an internal error.\n  --diff                          Don't write the files back, just output a\n                                  diff for each file on stdout.\n  --fast / --safe                 If --fast given, skip temporary sanity\n                                  checks. [default: --safe]\n  --include TEXT                  A regular expression that matches files and\n                                  directories that should be included on\n                                  recursive searches.  An empty value means\n                                  all files are included regardless of the\n                                  name.  Use forward slashes for directories\n                                  on all platforms (Windows, too).  Exclusions\n                                  are calculated first, inclusions later.\n                                  [default: \\.pyi?$]\n  --exclude TEXT                  A regular expression that matches files and\n                                  directories that should be excluded on\n                                  recursive searches.  An empty value means no\n                                  paths are excluded. Use forward slashes for\n                                  directories on all platforms (Windows, too).\n                                  Exclusions are calculated first, inclusions\n                                  later.  [default: /(\\.eggs|\\.git|\\.hg|\\.mypy\n                                  _cache|\\.nox|\\.tox|\\.venv|_build|buck-\n                                  out|build|dist)/]\n  -q, --quiet                     Don't emit non-error messages to stderr.\n                                  Errors are still emitted, silence those with\n                                  2&gt;/dev/null.\n  -v, --verbose                   Also emit messages to stderr about files\n                                  that were not changed or were ignored due to\n                                  --exclude=.\n  --version                       Show the version and exit.\n  --config PATH                   Read configuration from PATH.\n  -h, --help                      Show this message and exit.\n</pre>\n<p><em>Black</em> is a well-behaved Unix-style command-line tool:</p>\n<ul>\n<li>it does nothing if no sources are passed to it;</li>\n<li>it will read from standard input and write to standard output if <code>-</code> is used as the\nfilename;</li>\n<li>it only outputs messages to users on standard error;</li>\n<li>exits with code 0 unless an internal error occurred (or <code>--check</code> was used).</li>\n</ul>\n<h3>NOTE: This is a beta product</h3>\n<p><em>Black</em> is already <a href=\"#used-by\" rel=\"nofollow\">successfully used</a> by many projects, small and big. It\nalso sports a decent test suite. However, it is still very new. Things will probably be\nwonky for a while. This is made explicit by the \"Beta\" trove classifier, as well as by\nthe \"b\" in the version number. What this means for you is that <strong>until the formatter\nbecomes stable, you should expect some formatting to change in the future</strong>. That being\nsaid, no drastic stylistic changes are planned, mostly responses to bug reports.</p>\n<p>Also, as a temporary safety measure, <em>Black</em> will check that the reformatted code still\nproduces a valid AST that is equivalent to the original. This slows it down. If you're\nfeeling confident, use <code>--fast</code>.</p>\n<h2>The <em>Black</em> code style</h2>\n<p><em>Black</em> reformats entire files in place. It is not configurable. It doesn't take\nprevious formatting into account. It doesn't reformat blocks that start with\n<code># fmt: off</code> and end with <code># fmt: on</code>. <code># fmt: on/off</code> have to be on the same level of\nindentation. It also recognizes <a href=\"https://github.com/google/yapf\" rel=\"nofollow\">YAPF</a>'s block comments\nto the same effect, as a courtesy for straddling code.</p>\n<h3>How <em>Black</em> wraps lines</h3>\n<p><em>Black</em> ignores previous formatting and applies uniform horizontal and vertical\nwhitespace to your code. The rules for horizontal whitespace can be summarized as: do\nwhatever makes <code>pycodestyle</code> happy. The coding style used by <em>Black</em> can be viewed as a\nstrict subset of PEP 8.</p>\n<p>As for vertical whitespace, <em>Black</em> tries to render one full expression or simple\nstatement per line. If this fits the allotted line length, great.</p>\n<pre><span class=\"c1\"># in:</span>\n\n<span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n     <span class=\"mi\">2</span><span class=\"p\">,</span>\n     <span class=\"mi\">3</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># out:</span>\n\n<span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<p>If not, <em>Black</em> will look at the contents of the first outer matching brackets and put\nthat in a separate indented line.</p>\n<pre><span class=\"c1\"># in:</span>\n\n<span class=\"n\">ImportantClass</span><span class=\"o\">.</span><span class=\"n\">important_method</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">lookup_lines</span><span class=\"p\">,</span> <span class=\"n\">capture_locals</span><span class=\"p\">,</span> <span class=\"n\">extra_argument</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># out:</span>\n\n<span class=\"n\">ImportantClass</span><span class=\"o\">.</span><span class=\"n\">important_method</span><span class=\"p\">(</span>\n    <span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">lookup_lines</span><span class=\"p\">,</span> <span class=\"n\">capture_locals</span><span class=\"p\">,</span> <span class=\"n\">extra_argument</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If that still doesn't fit the bill, it will decompose the internal expression further\nusing the same rule, indenting matching brackets every time. If the contents of the\nmatching brackets pair are comma-separated (like an argument list, or a dict literal,\nand so on) then <em>Black</em> will first try to keep them on the same line with the matching\nbrackets. If that doesn't work, it will put all of them in separate lines.</p>\n<pre><span class=\"c1\"># in:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">very_important_function</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">variables</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n\n<span class=\"c1\"># out:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">very_important_function</span><span class=\"p\">(</span>\n    <span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">variables</span><span class=\"p\">,</span>\n    <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">,</span>\n    <span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>You might have noticed that closing brackets are always dedented and that a trailing\ncomma is always added. Such formatting produces smaller diffs; when you add or remove an\nelement, it's always just one line. Also, having the closing bracket dedented provides a\nclear delimiter between two distinct sections of the code that otherwise share the same\nindentation level (like the arguments list and the docstring in the example above).</p>\n<p>If a data structure literal (tuple, list, set, dict) or a line of \"from\" imports cannot\nfit in the allotted length, it's always split into one element per line. This minimizes\ndiffs as well as enables readers of code to find which commit introduced a particular\nentry. This also makes <em>Black</em> compatible with <a href=\"https://pypi.org/p/isort/\" rel=\"nofollow\">isort</a> with\nthe following configuration.</p>\n<details>\n<summary>A compatible `.isort.cfg`</summary>\n<pre><code>[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n</code></pre>\n<p>The equivalent command line is:</p>\n<pre><code>$ isort --multi-line=3 --trailing-comma --force-grid-wrap=0 --use-parentheses --line-width=88 [ file.py ]\n</code></pre>\n</details>\n<h3>Line length</h3>\n<p>You probably noticed the peculiar default line length. <em>Black</em> defaults to 88 characters\nper line, which happens to be 10% over 80. This number was found to produce\nsignificantly shorter files than sticking with 80 (the most popular), or even 79 (used\nby the standard library). In general,\n<a href=\"https://youtu.be/wf-BqAjZb8M?t=260\" rel=\"nofollow\">90-ish seems like the wise choice</a>.</p>\n<p>If you're paid by the line of code you write, you can pass <code>--line-length</code> with a lower\nnumber. <em>Black</em> will try to respect that. However, sometimes it won't be able to without\nbreaking other rules. In those rare cases, auto-formatted code will exceed your allotted\nlimit.</p>\n<p>You can also increase it, but remember that people with sight disabilities find it\nharder to work with line lengths exceeding 100 characters. It also adversely affects\nside-by-side diff review on typical screen resolutions. Long lines also make it harder\nto present code neatly in documentation or talk slides.</p>\n<p>If you're using Flake8, you can bump <code>max-line-length</code> to 88 and forget about it.\nAlternatively, use <a href=\"https://github.com/PyCQA/flake8-bugbear\" rel=\"nofollow\">Bugbear</a>'s B950 warning\ninstead of E501 and keep the max line length at 80 which you are probably already using.\nYou'd do it like this:</p>\n<pre><span class=\"k\">[flake8]</span>\n<span class=\"na\">max-line-length</span> <span class=\"o\">=</span> <span class=\"s\">80</span>\n<span class=\"na\">...</span>\n<span class=\"na\">select</span> <span class=\"o\">=</span> <span class=\"s\">C,E,F,W,B,B950</span>\n<span class=\"na\">ignore</span> <span class=\"o\">=</span> <span class=\"s\">E203, E501, W503</span>\n</pre>\n<p>You'll find <em>Black</em>'s own .flake8 config file is configured like this. Explanation of\nwhy W503 and E203 are disabled can be found further in this documentation. And if you're\ncurious about the reasoning behind B950,\n<a href=\"https://github.com/PyCQA/flake8-bugbear#opinionated-warnings\" rel=\"nofollow\">Bugbear's documentation</a>\nexplains it. The tl;dr is \"it's like highway speed limits, we won't bother you if you\noverdo it by a few km/h\".</p>\n<p><strong>If you're looking for a minimal, black-compatible flake8 configuration:</strong></p>\n<pre><span class=\"k\">[flake8]</span>\n<span class=\"na\">max-line-length</span> <span class=\"o\">=</span> <span class=\"s\">88</span>\n<span class=\"na\">extend-ignore</span> <span class=\"o\">=</span> <span class=\"s\">E203</span>\n</pre>\n<h3>Empty lines</h3>\n<p><em>Black</em> avoids spurious vertical whitespace. This is in the spirit of PEP 8 which says\nthat in-function vertical whitespace should only be used sparingly.</p>\n<p><em>Black</em> will allow single empty lines inside functions, and single and double empty\nlines on module level left by the original editors, except when they're within\nparenthesized expressions. Since such expressions are always reformatted to fit minimal\nspace, this whitespace is lost.</p>\n<p>It will also insert proper spacing before and after function definitions. It's one line\nbefore and after inner functions and two lines before and after module-level functions\nand classes. <em>Black</em> will not put empty lines between function/class definitions and\nstandalone comments that immediately precede the given function/class.</p>\n<p><em>Black</em> will enforce single empty lines between a class-level docstring and the first\nfollowing field or method. This conforms to\n<a href=\"https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings\" rel=\"nofollow\">PEP 257</a>.</p>\n<p><em>Black</em> won't insert empty lines after function docstrings unless that empty line is\nrequired due to an inner function starting immediately after.</p>\n<h3>Trailing commas</h3>\n<p><em>Black</em> will add trailing commas to expressions that are split by comma where each\nelement is on its own line. This includes function signatures.</p>\n<p>Unnecessary trailing commas are removed if an expression fits in one line. This makes it\n1% more likely that your line won't exceed the allotted line length limit. Moreover, in\nthis scenario, if you added another argument to your call, you'd probably fit it in the\nsame line anyway. That doesn't make diffs any larger.</p>\n<p>One exception to removing trailing commas is tuple expressions with just one element. In\nthis case <em>Black</em> won't touch the single trailing comma as this would unexpectedly\nchange the underlying data type. Note that this is also the case when commas are used\nwhile indexing. This is a tuple in disguise: <code>numpy_array[3, ]</code>.</p>\n<p>One exception to adding trailing commas is function signatures containing <code>*</code>, <code>*args</code>,\nor <code>**kwargs</code>. In this case a trailing comma is only safe to use on Python 3.6. <em>Black</em>\nwill detect if your file is already 3.6+ only and use trailing commas in this situation.\nIf you wonder how it knows, it looks for f-strings and existing use of trailing commas\nin function signatures that have stars in them. In other words, if you'd like a trailing\ncomma in this situation and <em>Black</em> didn't recognize it was safe to do so, put it there\nmanually and <em>Black</em> will keep it.</p>\n<h3>Strings</h3>\n<p><em>Black</em> prefers double quotes (<code>\"</code> and <code>\"\"\"</code>) over single quotes (<code>'</code> and <code>'''</code>). It\nwill replace the latter with the former as long as it does not result in more backslash\nescapes than before.</p>\n<p><em>Black</em> also standardizes string prefixes, making them always lowercase. On top of that,\nif your code is already Python 3.6+ only or it's using the <code>unicode_literals</code> future\nimport, <em>Black</em> will remove <code>u</code> from the string prefix as it is meaningless in those\nscenarios.</p>\n<p>The main reason to standardize on a single form of quotes is aesthetics. Having one kind\nof quotes everywhere reduces reader distraction. It will also enable a future version of\n<em>Black</em> to merge consecutive string literals that ended up on the same line (see\n<a href=\"https://github.com/psf/black/issues/26\" rel=\"nofollow\">#26</a> for details).</p>\n<p>Why settle on double quotes? They anticipate apostrophes in English text. They match the\ndocstring standard described in\n<a href=\"https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring\" rel=\"nofollow\">PEP 257</a>. An empty\nstring in double quotes (<code>\"\"</code>) is impossible to confuse with a one double-quote\nregardless of fonts and syntax highlighting used. On top of this, double quotes for\nstrings are consistent with C which Python interacts a lot with.</p>\n<p>On certain keyboard layouts like US English, typing single quotes is a bit easier than\ndouble quotes. The latter requires use of the Shift key. My recommendation here is to\nkeep using whatever is faster to type and let <em>Black</em> handle the transformation.</p>\n<p>If you are adopting <em>Black</em> in a large project with pre-existing string conventions\n(like the popular\n<a href=\"https://stackoverflow.com/a/56190\" rel=\"nofollow\">\"single quotes for data, double quotes for human-readable strings\"</a>),\nyou can pass <code>--skip-string-normalization</code> on the command line. This is meant as an\nadoption helper, avoid using this for new projects.</p>\n<h3>Numeric literals</h3>\n<p><em>Black</em> standardizes most numeric literals to use lowercase letters for the syntactic\nparts and uppercase letters for the digits themselves: <code>0xAB</code> instead of <code>0XAB</code> and\n<code>1e10</code> instead of <code>1E10</code>. Python 2 long literals are styled as <code>2L</code> instead of <code>2l</code> to\navoid confusion between <code>l</code> and <code>1</code>.</p>\n<h3>Line breaks &amp; binary operators</h3>\n<p><em>Black</em> will break a line before a binary operator when splitting a block of code over\nmultiple lines. This is so that <em>Black</em> is compliant with the recent changes in the\n<a href=\"https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator\" rel=\"nofollow\">PEP 8</a>\nstyle guide, which emphasizes that this approach improves readability.</p>\n<p>This behaviour may raise <code>W503 line break before binary operator</code> warnings in style\nguide enforcement tools like Flake8. Since <code>W503</code> is not PEP 8 compliant, you should\ntell Flake8 to ignore these warnings.</p>\n<h3>Slices</h3>\n<p>PEP 8\n<a href=\"https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements\" rel=\"nofollow\">recommends</a>\nto treat <code>:</code> in slices as a binary operator with the lowest priority, and to leave an\nequal amount of space on either side, except if a parameter is omitted (e.g.\n<code>ham[1 + 1 :]</code>). It also states that for extended slices, both <code>:</code> operators have to\nhave the same amount of spacing, except if a parameter is omitted (<code>ham[1 + 1 ::]</code>).\n<em>Black</em> enforces these rules consistently.</p>\n<p>This behaviour may raise <code>E203 whitespace before ':'</code> warnings in style guide\nenforcement tools like Flake8. Since <code>E203</code> is not PEP 8 compliant, you should tell\nFlake8 to ignore these warnings.</p>\n<h3>Parentheses</h3>\n<p>Some parentheses are optional in the Python grammar. Any expression can be wrapped in a\npair of parentheses to form an atom. There are a few interesting cases:</p>\n<ul>\n<li><code>if (...):</code></li>\n<li><code>while (...):</code></li>\n<li><code>for (...) in (...):</code></li>\n<li><code>assert (...), (...)</code></li>\n<li><code>from X import (...)</code></li>\n<li>assignments like:\n<ul>\n<li><code>target = (...)</code></li>\n<li><code>target: type = (...)</code></li>\n<li><code>some, *un, packing = (...)</code></li>\n<li><code>augmented += (...)</code></li>\n</ul>\n</li>\n</ul>\n<p>In those cases, parentheses are removed when the entire statement fits in one line, or\nif the inner expression doesn't have any delimiters to further split on. If there is\nonly a single delimiter and the expression starts or ends with a bracket, the\nparenthesis can also be successfully omitted since the existing bracket pair will\norganize the expression neatly anyway. Otherwise, the parentheses are added.</p>\n<p>Please note that <em>Black</em> does not add or remove any additional nested parentheses that\nyou might want to have for clarity or further code organization. For example those\nparentheses are not going to be removed:</p>\n<pre><span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">this</span> <span class=\"ow\">or</span> <span class=\"n\">that</span><span class=\"p\">)</span>\n<span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maybe</span><span class=\"o\">.</span><span class=\"n\">this</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">values</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">maybe</span><span class=\"o\">.</span><span class=\"n\">that</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">values</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h3>Call chains</h3>\n<p>Some popular APIs, like ORMs, use call chaining. This API style is known as a\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\" rel=\"nofollow\">fluent interface</a>. <em>Black</em> formats\nthose by treating dots that follow a call or an indexing operation like a very low\npriority delimiter. It's easier to show the behavior than to explain it. Look at the\nexample:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Customer</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Customer</span><span class=\"o\">.</span><span class=\"n\">account_id</span> <span class=\"o\">==</span> <span class=\"n\">account_id</span><span class=\"p\">,</span>\n            <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Customer</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"n\">email_address</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Customer</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">asc</span><span class=\"p\">())</span>\n        <span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>Typing stub files</h3>\n<p>PEP 484 describes the syntax for type hints in Python. One of the use cases for typing\nis providing type annotations for modules which cannot contain them directly (they might\nbe written in C, or they might be third-party, or their implementation may be overly\ndynamic, and so on).</p>\n<p>To solve this,\n<a href=\"https://www.python.org/dev/peps/pep-0484/#stub-files\" rel=\"nofollow\">stub files with the <code>.pyi</code> file extension</a>\ncan be used to describe typing information for an external module. Those stub files omit\nthe implementation of classes and functions they describe, instead they only contain the\nstructure of the file (listing globals, functions, and classes with their members). The\nrecommended code style for those files is more terse than PEP 8:</p>\n<ul>\n<li>prefer <code>...</code> on the same line as the class/function signature;</li>\n<li>avoid vertical whitespace between consecutive module-level functions, names, or\nmethods and fields within a single class;</li>\n<li>use a single blank line between top-level class definitions, or none if the classes\nare very small.</li>\n</ul>\n<p><em>Black</em> enforces the above rules. There are additional guidelines for formatting <code>.pyi</code>\nfile that are not enforced yet but might be in a future version of the formatter:</p>\n<ul>\n<li>all function bodies should be empty (contain <code>...</code> instead of the body);</li>\n<li>do not use docstrings;</li>\n<li>prefer <code>...</code> over <code>pass</code>;</li>\n<li>for arguments with a default, use <code>...</code> instead of the actual default;</li>\n<li>avoid using string literals in type annotations, stub files support forward references\nnatively (like Python 3.7 code with <code>from __future__ import annotations</code>);</li>\n<li>use variable annotations instead of type comments, even for stubs that target older\nversions of Python;</li>\n<li>for arguments that default to <code>None</code>, use <code>Optional[]</code> explicitly;</li>\n<li>use <code>float</code> instead of <code>Union[int, float]</code>.</li>\n</ul>\n<h2>Pragmatism</h2>\n<p>Early versions of <em>Black</em> used to be absolutist in some respects. They took after its\ninitial author. This was fine at the time as it made the implementation simpler and\nthere were not many users anyway. Not many edge cases were reported. As a mature tool,\n<em>Black</em> does make some exceptions to rules it otherwise holds. This section documents\nwhat those exceptions are and why this is the case.</p>\n<h3>The magic trailing comma</h3>\n<p><em>Black</em> in general does not take existing formatting into account.</p>\n<p>However, there are cases where you put a short collection or function call in your code\nbut you anticipate it will grow in the future.</p>\n<p>For example:</p>\n<pre><span class=\"n\">TRANSLATIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"en_us\"</span><span class=\"p\">:</span> <span class=\"s2\">\"English (US)\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"pl_pl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"polski\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Early versions of <em>Black</em> used to ruthlessly collapse those into one line (it fits!).\nNow, you can communicate that you don't want that by putting a trailing comma in the\ncollection yourself. When you do, <em>Black</em> will know to always explode your collection\ninto one item per line.</p>\n<p>How do you make it stop? Just delete that trailing comma and <em>Black</em> will collapse your\ncollection into one line if it fits.</p>\n<h3>r\"strings\" and R\"strings\"</h3>\n<p><em>Black</em> normalizes string quotes as well as string prefixes, making them lowercase. One\nexception to this rule is r-strings. It turns out that the very popular\n<a href=\"https://github.com/MagicStack/MagicPython/\" rel=\"nofollow\">MagicPython</a> syntax highlighter, used by\ndefault by (among others) GitHub and Visual Studio Code, differentiates between\nr-strings and R-strings. The former are syntax highlighted as regular expressions while\nthe latter are treated as true raw strings with no special semantics.</p>\n<h2>pyproject.toml</h2>\n<p><em>Black</em> is able to read project-specific default values for its command line options\nfrom a <code>pyproject.toml</code> file. This is especially useful for specifying custom\n<code>--include</code> and <code>--exclude</code> patterns for your project.</p>\n<p><strong>Pro-tip</strong>: If you're asking yourself \"Do I need to configure anything?\" the answer is\n\"No\". <em>Black</em> is all about sensible defaults.</p>\n<h3>What on Earth is a <code>pyproject.toml</code> file?</h3>\n<p><a href=\"https://www.python.org/dev/peps/pep-0518/\" rel=\"nofollow\">PEP 518</a> defines <code>pyproject.toml</code> as a\nconfiguration file to store build system requirements for Python projects. With the help\nof tools like <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">Poetry</a> or\n<a href=\"https://flit.readthedocs.io/en/latest/\" rel=\"nofollow\">Flit</a> it can fully replace the need for\n<code>setup.py</code> and <code>setup.cfg</code> files.</p>\n<h3>Where <em>Black</em> looks for the file</h3>\n<p>By default <em>Black</em> looks for <code>pyproject.toml</code> starting from the common base directory of\nall files and directories passed on the command line. If it's not there, it looks in\nparent directories. It stops looking when it finds the file, or a <code>.git</code> directory, or a\n<code>.hg</code> directory, or the root of the file system, whichever comes first.</p>\n<p>If you're formatting standard input, <em>Black</em> will look for configuration starting from\nthe current working directory.</p>\n<p>You can also explicitly specify the path to a particular file that you want with\n<code>--config</code>. In this situation <em>Black</em> will not look for any other file.</p>\n<p>If you're running with <code>--verbose</code>, you will see a blue message if a file was found and\nused.</p>\n<p>Please note <code>blackd</code> will not use <code>pyproject.toml</code> configuration.</p>\n<h3>Configuration format</h3>\n<p>As the file extension suggests, <code>pyproject.toml</code> is a\n<a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file. It contains separate sections for\ndifferent tools. <em>Black</em> is using the <code>[tool.black]</code> section. The option keys are the\nsame as long names of options on the command line.</p>\n<p>Note that you have to use single-quoted strings in TOML for regular expressions. It's\nthe equivalent of r-strings in Python. Multiline strings are treated as verbose regular\nexpressions by Black. Use <code>[ ]</code> to denote a significant space character.</p>\n<details>\n<summary>Example `pyproject.toml`</summary>\n<pre><span class=\"k\">[tool.black]</span>\n<span class=\"n\">line-length</span> <span class=\"o\">=</span> <span class=\"mi\">88</span>\n<span class=\"n\">target-version</span> <span class=\"o\">=</span> <span class=\"k\">['py37']</span>\n<span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"s\">'\\.pyi?$'</span>\n<span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"s\">'''</span>\n\n<span class=\"s\">(</span>\n<span class=\"s\">  /(</span>\n<span class=\"s\">      \\.eggs         # exclude a few common directories in the</span>\n<span class=\"s\">    | \\.git          # root of the project</span>\n<span class=\"s\">    | \\.hg</span>\n<span class=\"s\">    | \\.mypy_cache</span>\n<span class=\"s\">    | \\.tox</span>\n<span class=\"s\">    | \\.venv</span>\n<span class=\"s\">    | _build</span>\n<span class=\"s\">    | buck-out</span>\n<span class=\"s\">    | build</span>\n<span class=\"s\">    | dist</span>\n<span class=\"s\">  )/</span>\n<span class=\"s\">  | foo.py           # also separately exclude a file named foo.py in</span>\n<span class=\"s\">                     # the root of the project</span>\n<span class=\"s\">)</span>\n<span class=\"s\">'''</span>\n</pre>\n</details>\n<h3>Lookup hierarchy</h3>\n<p>Command-line options have defaults that you can see in <code>--help</code>. A <code>pyproject.toml</code> can\noverride those defaults. Finally, options provided by the user on the command line\noverride both.</p>\n<p><em>Black</em> will only ever use one <code>pyproject.toml</code> file during an entire run. It doesn't\nlook for multiple files, and doesn't compose configuration from different levels of the\nfile hierarchy.</p>\n<h2>Editor integration</h2>\n<h3>Emacs</h3>\n<p>Use <a href=\"https://github.com/proofit404/blacken\" rel=\"nofollow\">proofit404/blacken</a> or\n<a href=\"https://github.com/jorgenschaefer/elpy\" rel=\"nofollow\">Elpy</a>.</p>\n<h3>PyCharm/IntelliJ IDEA</h3>\n<ol>\n<li>Install <code>black</code>.</li>\n</ol>\n<pre><span class=\"gp\">$</span> pip install black\n</pre>\n<ol>\n<li>Locate your <code>black</code> installation folder.</li>\n</ol>\n<p>On macOS / Linux / BSD:</p>\n<pre><span class=\"gp\">$</span> which black\n<span class=\"go\">/usr/local/bin/black  # possible location</span>\n</pre>\n<p>On Windows:</p>\n<pre><span class=\"gp\">$</span> where black\n<span class=\"gp\">%</span>LocalAppData%<span class=\"se\">\\P</span>rograms<span class=\"se\">\\P</span>ython<span class=\"se\">\\P</span>ython36-32<span class=\"se\">\\S</span>cripts<span class=\"se\">\\b</span>lack.exe  <span class=\"c1\"># possible location</span>\n</pre>\n<ol>\n<li>Open External tools in PyCharm/IntelliJ IDEA</li>\n</ol>\n<p>On macOS:</p>\n<p><code>PyCharm -&gt; Preferences -&gt; Tools -&gt; External Tools</code></p>\n<p>On Windows / Linux / BSD:</p>\n<p><code>File -&gt; Settings -&gt; Tools -&gt; External Tools</code></p>\n<ol>\n<li>\n<p>Click the + icon to add a new external tool with the following values:</p>\n<ul>\n<li>Name: Black</li>\n<li>Description: Black is the uncompromising Python code formatter.</li>\n<li>Program: &lt;install_location_from_step_2&gt;</li>\n<li>Arguments: <code>\"$FilePath$\"</code></li>\n</ul>\n</li>\n<li>\n<p>Format the currently opened file by selecting <code>Tools -&gt; External Tools -&gt; black</code>.</p>\n<ul>\n<li>Alternatively, you can set a keyboard shortcut by navigating to\n<code>Preferences or Settings -&gt; Keymap -&gt; External Tools -&gt; External Tools - Black</code>.</li>\n</ul>\n</li>\n<li>\n<p>Optionally, run <em>Black</em> on every file save:</p>\n<ol>\n<li>Make sure you have the\n<a href=\"https://plugins.jetbrains.com/plugin/7177-file-watchers\" rel=\"nofollow\">File Watcher</a> plugin\ninstalled.</li>\n<li>Go to <code>Preferences or Settings -&gt; Tools -&gt; File Watchers</code> and click <code>+</code> to add a\nnew watcher:\n<ul>\n<li>Name: Black</li>\n<li>File type: Python</li>\n<li>Scope: Project Files</li>\n<li>Program: &lt;install_location_from_step_2&gt;</li>\n<li>Arguments: <code>$FilePath$</code></li>\n<li>Output paths to refresh: <code>$FilePath$</code></li>\n<li>Working directory: <code>$ProjectFileDir$</code></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Uncheck \"Auto-save edited files to trigger the watcher\"</li>\n</ul>\n</li>\n</ol>\n<h3>Wing IDE</h3>\n<p>Wing supports black via the OS Commands tool, as explained in the Wing documentation on\n<a href=\"https://wingware.com/doc/edit/pep8\" rel=\"nofollow\">pep8 formatting</a>. The detailed procedure is:</p>\n<ol>\n<li>Install <code>black</code>.</li>\n</ol>\n<pre><span class=\"gp\">$</span> pip install black\n</pre>\n<ol>\n<li>Make sure it runs from the command line, e.g.</li>\n</ol>\n<pre><span class=\"gp\">$</span> black --help\n</pre>\n<ol>\n<li>In Wing IDE, activate the <strong>OS Commands</strong> panel and define the command <strong>black</strong> to\nexecute black on the currently selected file:</li>\n</ol>\n<ul>\n<li>Use the Tools -&gt; OS Commands menu selection</li>\n<li>click on <strong>+</strong> in <strong>OS Commands</strong> -&gt; New: Command line..\n<ul>\n<li>Title: black</li>\n<li>Command Line: black %s</li>\n<li>I/O Encoding: Use Default</li>\n<li>Key Binding: F1</li>\n<li>[x] Raise OS Commands when executed</li>\n<li>[x] Auto-save files before execution</li>\n<li>[x] Line mode</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>Select a file in the editor and press <strong>F1</strong> , or whatever key binding you selected\nin step 3, to reformat the file.</li>\n</ol>\n<h3>Vim</h3>\n<p>Commands and shortcuts:</p>\n<ul>\n<li><code>:Black</code> to format the entire file (ranges not supported);</li>\n<li><code>:BlackUpgrade</code> to upgrade <em>Black</em> inside the virtualenv;</li>\n<li><code>:BlackVersion</code> to get the current version of <em>Black</em> inside the virtualenv.</li>\n</ul>\n<p>Configuration:</p>\n<ul>\n<li><code>g:black_fast</code> (defaults to <code>0</code>)</li>\n<li><code>g:black_linelength</code> (defaults to <code>88</code>)</li>\n<li><code>g:black_skip_string_normalization</code> (defaults to <code>0</code>)</li>\n<li><code>g:black_virtualenv</code> (defaults to <code>~/.vim/black</code> or <code>~/.local/share/nvim/black</code>)</li>\n</ul>\n<p>To install with <a href=\"https://github.com/junegunn/vim-plug\" rel=\"nofollow\">vim-plug</a>:</p>\n<pre><code>Plug 'psf/black'\n</code></pre>\n<p>or with <a href=\"https://github.com/VundleVim/Vundle.vim\" rel=\"nofollow\">Vundle</a>:</p>\n<pre><code>Plugin 'psf/black'\n</code></pre>\n<p>or you can copy the plugin from\n<a href=\"https://github.com/psf/black/tree/master/plugin/black.vim\" rel=\"nofollow\">plugin/black.vim</a>.</p>\n<pre><code>mkdir -p ~/.vim/pack/python/start/black/plugin\ncurl https://raw.githubusercontent.com/psf/black/master/plugin/black.vim -o ~/.vim/pack/python/start/black/plugin/black.vim\n</code></pre>\n<p>Let me know if this requires any changes to work with Vim 8's builtin <code>packadd</code>, or\nPathogen, and so on.</p>\n<p>This plugin <strong>requires Vim 7.0+ built with Python 3.6+ support</strong>. It needs Python 3.6 to\nbe able to run <em>Black</em> inside the Vim process which is much faster than calling an\nexternal command.</p>\n<p>On first run, the plugin creates its own virtualenv using the right Python version and\nautomatically installs <em>Black</em>. You can upgrade it later by calling <code>:BlackUpgrade</code> and\nrestarting Vim.</p>\n<p>If you need to do anything special to make your virtualenv work and install <em>Black</em> (for\nexample you want to run a version from master), create a virtualenv manually and point\n<code>g:black_virtualenv</code> to it. The plugin will use it.</p>\n<p>To run <em>Black</em> on save, add the following line to <code>.vimrc</code> or <code>init.vim</code>:</p>\n<pre><code>autocmd BufWritePre *.py execute ':Black'\n</code></pre>\n<p>To run <em>Black</em> on a key press (e.g. F9 below), add this:</p>\n<pre><code>nnoremap &lt;F9&gt; :Black&lt;CR&gt;\n</code></pre>\n<p><strong>How to get Vim with Python 3.6?</strong> On Ubuntu 17.10 Vim comes with Python 3.6 by\ndefault. On macOS with Homebrew run: <code>brew install vim</code>. When building Vim from source,\nuse: <code>./configure --enable-python3interp=yes</code>. There's many guides online how to do\nthis.</p>\n<h3>Visual Studio Code</h3>\n<p>Use the\n<a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" rel=\"nofollow\">Python extension</a>\n(<a href=\"https://code.visualstudio.com/docs/python/editing#_formatting\" rel=\"nofollow\">instructions</a>).</p>\n<h3>SublimeText 3</h3>\n<p>Use <a href=\"https://github.com/jgirardet/sublack\" rel=\"nofollow\">sublack plugin</a>.</p>\n<h3>Jupyter Notebook Magic</h3>\n<p>Use <a href=\"https://github.com/csurfer/blackcellmagic\" rel=\"nofollow\">blackcellmagic</a>.</p>\n<h3>Python Language Server</h3>\n<p>If your editor supports the <a href=\"https://langserver.org/\" rel=\"nofollow\">Language Server Protocol</a> (Atom,\nSublime Text, Visual Studio Code and many more), you can use the\n<a href=\"https://github.com/palantir/python-language-server\" rel=\"nofollow\">Python Language Server</a> with the\n<a href=\"https://github.com/rupert/pyls-black\" rel=\"nofollow\">pyls-black</a> plugin.</p>\n<h3>Atom/Nuclide</h3>\n<p>Use <a href=\"https://atom.io/packages/python-black\" rel=\"nofollow\">python-black</a>.</p>\n<h3>Kakoune</h3>\n<p>Add the following hook to your kakrc, then run black with <code>:format</code>.</p>\n<pre><code>hook global WinSetOption filetype=python %{\n    set-option window formatcmd 'black -q  -'\n}\n</code></pre>\n<h3>Thonny</h3>\n<p>Use <a href=\"https://github.com/Franccisco/thonny-black-code-format\" rel=\"nofollow\">Thonny-black-code-format</a>.</p>\n<h3>Other editors</h3>\n<p>Other editors will require external contributions.</p>\n<p>Patches welcome! \u2728 \ud83c\udf70 \u2728</p>\n<p>Any tool that can pipe code through <em>Black</em> using its stdio mode (just\n<a href=\"https://www.tldp.org/LDP/abs/html/special-chars.html#DASHREF2\" rel=\"nofollow\">use <code>-</code> as the file name</a>).\nThe formatted code will be returned on stdout (unless <code>--check</code> was passed). <em>Black</em>\nwill still emit messages on stderr but that shouldn't affect your use case.</p>\n<p>This can be used for example with PyCharm's or IntelliJ's\n<a href=\"https://www.jetbrains.com/help/pycharm/file-watchers.html\" rel=\"nofollow\">File Watchers</a>.</p>\n<h2>blackd</h2>\n<p><code>blackd</code> is a small HTTP server that exposes <em>Black</em>'s functionality over a simple\nprotocol. The main benefit of using it is to avoid paying the cost of starting up a new\n<em>Black</em> process every time you want to blacken a file.</p>\n<h3>Usage</h3>\n<p><code>blackd</code> is not packaged alongside <em>Black</em> by default because it has additional\ndependencies. You will need to do <code>pip install black[d]</code> to install it.</p>\n<p>You can start the server on the default port, binding only to the local interface by\nrunning <code>blackd</code>. You will see a single line mentioning the server's version, and the\nhost and port it's listening on. <code>blackd</code> will then print an access log similar to most\nweb servers on standard output, merged with any exception traces caused by invalid\nformatting requests.</p>\n<p><code>blackd</code> provides even less options than <em>Black</em>. You can see them by running\n<code>blackd --help</code>:</p>\n<pre>Usage: blackd [OPTIONS]\n\nOptions:\n  --bind-host TEXT                Address to bind the server to.\n  --bind-port INTEGER             Port to listen on\n  --version                       Show the version and exit.\n  -h, --help                      Show this message and exit.\n</pre>\n<p>There is no official blackd client tool (yet!). You can test that blackd is working\nusing <code>curl</code>:</p>\n<pre><code>blackd --bind-port 9090 &amp;  # or let blackd choose a port\ncurl -s -XPOST \"localhost:9090\" -d \"print('valid')\"\n</code></pre>\n<h3>Protocol</h3>\n<p><code>blackd</code> only accepts <code>POST</code> requests at the <code>/</code> path. The body of the request should\ncontain the python source code to be formatted, encoded according to the <code>charset</code> field\nin the <code>Content-Type</code> request header. If no <code>charset</code> is specified, <code>blackd</code> assumes\n<code>UTF-8</code>.</p>\n<p>There are a few HTTP headers that control how the source is formatted. These correspond\nto command line flags for <em>Black</em>. There is one exception to this: <code>X-Protocol-Version</code>\nwhich if present, should have the value <code>1</code>, otherwise the request is rejected with\n<code>HTTP 501</code> (Not Implemented).</p>\n<p>The headers controlling how code is formatted are:</p>\n<ul>\n<li><code>X-Line-Length</code>: corresponds to the <code>--line-length</code> command line flag.</li>\n<li><code>X-Skip-String-Normalization</code>: corresponds to the <code>--skip-string-normalization</code>\ncommand line flag. If present and its value is not the empty string, no string\nnormalization will be performed.</li>\n<li><code>X-Fast-Or-Safe</code>: if set to <code>fast</code>, <code>blackd</code> will act as <em>Black</em> does when passed the\n<code>--fast</code> command line flag.</li>\n<li><code>X-Python-Variant</code>: if set to <code>pyi</code>, <code>blackd</code> will act as <em>Black</em> does when passed the\n<code>--pyi</code> command line flag. Otherwise, its value must correspond to a Python version or\na set of comma-separated Python versions, optionally prefixed with <code>py</code>. For example,\nto request code that is compatible with Python 3.5 and 3.6, set the header to\n<code>py3.5,py3.6</code>.</li>\n<li><code>X-Diff</code>: corresponds to the <code>--diff</code> command line flag. If present, a diff of the\nformats will be output.</li>\n</ul>\n<p>If any of these headers are set to invalid values, <code>blackd</code> returns a <code>HTTP 400</code> error\nresponse, mentioning the name of the problematic header in the message body.</p>\n<p>Apart from the above, <code>blackd</code> can produce the following response codes:</p>\n<ul>\n<li><code>HTTP 204</code>: If the input is already well-formatted. The response body is empty.</li>\n<li><code>HTTP 200</code>: If formatting was needed on the input. The response body contains the\nblackened Python code, and the <code>Content-Type</code> header is set accordingly.</li>\n<li><code>HTTP 400</code>: If the input contains a syntax error. Details of the error are returned in\nthe response body.</li>\n<li><code>HTTP 500</code>: If there was any kind of error while trying to format the input. The\nresponse body contains a textual representation of the error.</li>\n</ul>\n<p>The response headers include a <code>X-Black-Version</code> header containing the version of\n<em>Black</em>.</p>\n<h2>Version control integration</h2>\n<p>Use <a href=\"https://pre-commit.com/\" rel=\"nofollow\">pre-commit</a>. Once you\n<a href=\"https://pre-commit.com/#install\" rel=\"nofollow\">have it installed</a>, add this to the\n<code>.pre-commit-config.yaml</code> in your repository:</p>\n<pre><span class=\"nt\">repos</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">repo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://github.com/psf/black</span>\n    <span class=\"nt\">rev</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">stable</span>\n    <span class=\"nt\">hooks</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">black</span>\n        <span class=\"nt\">language_version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3.6</span>\n</pre>\n<p>Then run <code>pre-commit install</code> and you're ready to go.</p>\n<p>Avoid using <code>args</code> in the hook. Instead, store necessary configuration in\n<code>pyproject.toml</code> so that editors and command-line usage of Black all behave consistently\nfor your project. See <em>Black</em>'s own\n<a href=\"https://github.com/psf/black/blob/master/pyproject.toml\" rel=\"nofollow\">pyproject.toml</a> for an\nexample.</p>\n<p>If you're already using Python 3.7, switch the <code>language_version</code> accordingly. Finally,\n<code>stable</code> is a tag that is pinned to the latest release on PyPI. If you'd rather run on\nmaster, this is also an option.</p>\n<h2>Ignoring unmodified files</h2>\n<p><em>Black</em> remembers files it has already formatted, unless the <code>--diff</code> flag is used or\ncode is passed via standard input. This information is stored per-user. The exact\nlocation of the file depends on the <em>Black</em> version and the system on which <em>Black</em> is\nrun. The file is non-portable. The standard location on common operating systems is:</p>\n<ul>\n<li>Windows:\n<code>C:\\\\Users\\&lt;username&gt;\\AppData\\Local\\black\\black\\Cache\\&lt;version&gt;\\cache.&lt;line-length&gt;.&lt;file-mode&gt;.pickle</code></li>\n<li>macOS:\n<code>/Users/&lt;username&gt;/Library/Caches/black/&lt;version&gt;/cache.&lt;line-length&gt;.&lt;file-mode&gt;.pickle</code></li>\n<li>Linux:\n<code>/home/&lt;username&gt;/.cache/black/&lt;version&gt;/cache.&lt;line-length&gt;.&lt;file-mode&gt;.pickle</code></li>\n</ul>\n<p><code>file-mode</code> is an int flag that determines whether the file was formatted as 3.6+ only,\nas .pyi, and whether string normalization was omitted.</p>\n<p>To override the location of these files on macOS or Linux, set the environment variable\n<code>XDG_CACHE_HOME</code> to your preferred location. For example, if you want to put the cache\nin the directory you're running <em>Black</em> from, set <code>XDG_CACHE_HOME=.cache</code>. <em>Black</em> will\nthen write the above files to <code>.cache/black/&lt;version&gt;/</code>.</p>\n<h2>Used by</h2>\n<p>The following notable open-source projects trust <em>Black</em> with enforcing a consistent\ncode style: pytest, tox, Pyramid, Django Channels, Hypothesis, attrs, SQLAlchemy,\nPoetry, PyPA applications (Warehouse, Pipenv, virtualenv), pandas, Pillow, every Datadog\nAgent Integration, Home Assistant.</p>\n<p>Are we missing anyone? Let us know.</p>\n<h2>Testimonials</h2>\n<p><strong>Dusty Phillips</strong>,\n<a href=\"https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;field-keywords=dusty+phillips\" rel=\"nofollow\">writer</a>:</p>\n<blockquote>\n<p><em>Black</em> is opinionated so you don't have to be.</p>\n</blockquote>\n<p><strong>Hynek Schlawack</strong>, <a href=\"https://www.attrs.org/\" rel=\"nofollow\">creator of <code>attrs</code></a>, core developer of\nTwisted and CPython:</p>\n<blockquote>\n<p>An auto-formatter that doesn't suck is all I want for Xmas!</p>\n</blockquote>\n<p><strong>Carl Meyer</strong>, <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> core developer:</p>\n<blockquote>\n<p>At least the name is good.</p>\n</blockquote>\n<p><strong>Kenneth Reitz</strong>, creator of <a href=\"http://python-requests.org/\" rel=\"nofollow\"><code>requests</code></a> and\n<a href=\"https://docs.pipenv.org/\" rel=\"nofollow\"><code>pipenv</code></a>:</p>\n<blockquote>\n<p>This vastly improves the formatting of our code. Thanks a ton!</p>\n</blockquote>\n<h2>Show your style</h2>\n<p>Use the badge in your project's README.md:</p>\n<pre>[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n</pre>\n<p>Using the badge in README.rst:</p>\n<pre><code>.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n</code></pre>\n<p>Looks like this:\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h2>License</h2>\n<p>MIT</p>\n<h2>Contributing to <em>Black</em></h2>\n<p>In terms of inspiration, <em>Black</em> is about as configurable as <em>gofmt</em>. This is\ndeliberate.</p>\n<p>Bug reports and fixes are always welcome! However, before you suggest a new feature or\nconfiguration knob, ask yourself why you want it. If it enables better integration with\nsome workflow, fixes an inconsistency, speeds things up, and so on - go for it! On the\nother hand, if your answer is \"because I don't like a particular formatting\" then you're\nnot ready to embrace <em>Black</em> yet. Such changes are unlikely to get accepted. You can\nstill try but prepare to be disappointed.</p>\n<p>More details can be found in <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING</a>.</p>\n<h2>Change Log</h2>\n<p>The log's become rather long. It moved to its own file.</p>\n<p>See <a href=\"CHANGES.md\" rel=\"nofollow\">CHANGES</a>.</p>\n<h2>Authors</h2>\n<p>Glued together by <a href=\"mailto:lukasz@langa.pl\">\u0141ukasz Langa</a>.</p>\n<p>Maintained with <a href=\"mailto:carolcode@willingconsulting.com\">Carol Willing</a>,\n<a href=\"mailto:carl@oddbird.net\">Carl Meyer</a>,\n<a href=\"mailto:jelle.zijlstra@gmail.com\">Jelle Zijlstra</a>,\n<a href=\"mailto:mail@autophagy.io\">Mika Naylor</a>,\n<a href=\"mailto:zsol.zsol@gmail.com\">Zsolt Dollenstein</a>, and\n<a href=\"mailto:me@cooperlees.com\">Cooper Lees</a>.</p>\n<p>Multiple contributions by:</p>\n<ul>\n<li><a href=\"mailto:arj.python@gmail.com\">Abdur-Rahmaan Janhangeer</a></li>\n<li><a href=\"mailto:me@adamj.eu\">Adam Johnson</a></li>\n<li><a href=\"mailto:github@grande.coffee\">Alexander Huynh</a></li>\n<li><a href=\"mailto:andrew.thorp.dev@gmail.com\">Andrew Thorp</a></li>\n<li><a href=\"mailto:dyuuus@yandex.ru\">Andrey</a></li>\n<li><a href=\"mailto:andy@andyfreeland.net\">Andy Freeland</a></li>\n<li><a href=\"mailto:asottile@umich.edu\">Anthony Sottile</a></li>\n<li><a href=\"mailto:arjaan.buijk@gmail.com\">Arjaan Buijk</a></li>\n<li><a href=\"mailto:proofit404@gmail.com\">Artem Malyshev</a></li>\n<li><a href=\"mailto:asgerdrewsen@gmail.com\">Asger Hautop Drewsen</a></li>\n<li><a href=\"mailto:raf@durin42.com\">Augie Fackler</a></li>\n<li><a href=\"mailto:aviskarkc10@gmail.com\">Aviskar KC</a></li>\n<li><a href=\"mailto:github@benjam.info\">Benjamin Woodruff</a></li>\n<li><a href=\"mailto:brandtbucher@gmail.com\">Brandt Bucher</a></li>\n<li>Charles Reid</li>\n<li><a href=\"mailto:christian@python.org\">Christian Heimes</a></li>\n<li><a href=\"mailto:chuck.wooters@microsoft.com\">Chuck Wooters</a></li>\n<li><a href=\"mailto:me@cooperlees.com\">Cooper Ry Lees</a></li>\n<li><a href=\"mailto:github@thequod.de\">Daniel Hahler</a></li>\n<li><a href=\"mailto:polycitizen@gmail.com\">Daniel M. Capella</a></li>\n<li>Daniele Esposti</li>\n<li>dylanjblack</li>\n<li><a href=\"mailto:eli@treuherz.com\">Eli Treuherz</a></li>\n<li><a href=\"mailto:fthiery@gmail.com\">Florent Thiery</a></li>\n<li>hauntsaninja</li>\n<li>Hugo van Kemenade</li>\n<li><a href=\"mailto:ivan.katanic@gmail.com\">Ivan Katani\u0107</a></li>\n<li><a href=\"mailto:me@jasonfried.info\">Jason Fried</a></li>\n<li><a href=\"mailto:ijkl@netc.fr\">jgirardet</a></li>\n<li><a href=\"mailto:jma353@cornell.edu\">Joe Antonakakis</a></li>\n<li><a href=\"mailto:jon.dufresne@gmail.com\">Jon Dufresne</a></li>\n<li><a href=\"mailto:ojiidotch@gmail.com\">Jonas Obrist</a></li>\n<li><a href=\"mailto:joshbode@fastmail.com\">Josh Bode</a></li>\n<li><a href=\"mailto:hello@juanlu.space\">Juan Luis Cano Rodr\u00edguez</a></li>\n<li><a href=\"mailto:katie@glasnt.com\">Katie McLaughlin</a></li>\n<li>Lawrence Chan</li>\n<li><a href=\"mailto:mail@linusgroh.de\">Linus Groh</a></li>\n<li><a href=\"mailto:luka.sterbic@gmail.com\">Luka Sterbic</a></li>\n<li>Mariatta</li>\n<li><a href=\"mailto:vaneseltine@gmail.com\">Matt VanEseltine</a></li>\n<li><a href=\"mailto:michael.flaxman@gmail.com\">Michael Flaxman</a></li>\n<li><a href=\"mailto:sully@msully.net\">Michael J. Sullivan</a></li>\n<li><a href=\"mailto:michael@mcclimon.org\">Michael McClimon</a></li>\n<li><a href=\"mailto:miggaiowski@gmail.com\">Miguel Gaiowski</a></li>\n<li><a href=\"mailto:roshi@fedoraproject.org\">Mike</a></li>\n<li><a href=\"mailto:minho42@gmail.com\">Min ho Kim</a></li>\n<li><a href=\"mailto:miroslav@miki725.com\">Miroslav Shubernetskiy</a></li>\n<li><a href=\"mailto:neraste.herr10@gmail.com\">Neraste</a></li>\n<li><a href=\"mailto:ofekmeister@gmail.com\">Ofek Lev</a></li>\n<li><a href=\"mailto:osaetindaniel@gmail.com\">Osaetin Daniel</a></li>\n<li><a href=\"mailto:Pablogsal@gmail.com\">Pablo Galindo</a></li>\n<li><a href=\"mailto:mail@peterbe.com\">Peter Bengtsson</a></li>\n<li>pmacosta</li>\n<li><a href=\"mailto:rishijha424@gmail.com\">Rishikesh Jha</a></li>\n<li><a href=\"mailto:hi@stavros.io\">Stavros Korokithakis</a></li>\n<li><a href=\"mailto:sirosen@globus.org\">Stephen Rosen</a></li>\n<li><a href=\"mailto:snlkapil@gmail.com\">Sunil Kapil</a></li>\n<li><a href=\"mailto:thomas.c.lu@gmail.com\">Thom Lu</a></li>\n<li><a href=\"mailto:tom@tomchristie.com\">Tom Christie</a></li>\n<li><a href=\"mailto:uranusjr@gmail.com\">Tzu-ping Chung</a></li>\n<li><a href=\"mailto:ukshah2@illinois.edu\">Utsav Shah</a></li>\n<li>vezeli</li>\n<li><a href=\"mailto:sharma.vishwas88@gmail.com\">Vishwas B Sharma</a></li>\n<li><a href=\"mailto:yngve@hoiseth.net\">Yngve H\u00f8iseth</a></li>\n<li><a href=\"mailto:1998uriyyo@gmail.com\">Yurii Karabas</a></li>\n</ul>\n<h2>Change Log</h2>\n<h3>19.10b0</h3>\n<ul>\n<li>\n<p>added support for PEP 572 assignment expressions (#711)</p>\n</li>\n<li>\n<p>added support for PEP 570 positional-only arguments (#943)</p>\n</li>\n<li>\n<p>added support for async generators (#593)</p>\n</li>\n<li>\n<p>added support for pre-splitting collections by putting an explicit trailing comma\ninside (#826)</p>\n</li>\n<li>\n<p>added <code>black -c</code> as a way to format code passed from the command line (#761)</p>\n</li>\n<li>\n<p>--safe now works with Python 2 code (#840)</p>\n</li>\n<li>\n<p>fixed grammar selection for Python 2-specific code (#765)</p>\n</li>\n<li>\n<p>fixed feature detection for trailing commas in function definitions and call sites\n(#763)</p>\n</li>\n<li>\n<p><code># fmt: off</code>/<code># fmt: on</code> comment pairs placed multiple times within the same block of\ncode now behave correctly (#1005)</p>\n</li>\n<li>\n<p><em>Black</em> no longer crashes on Windows machines with more than 61 cores (#838)</p>\n</li>\n<li>\n<p><em>Black</em> no longer crashes on standalone comments prepended with a backslash (#767)</p>\n</li>\n<li>\n<p><em>Black</em> no longer crashes on <code>from</code> ... <code>import</code> blocks with comments (#829)</p>\n</li>\n<li>\n<p><em>Black</em> no longer crashes on Python 3.7 on some platform configurations (#494)</p>\n</li>\n<li>\n<p><em>Black</em> no longer fails on comments in from-imports (#671)</p>\n</li>\n<li>\n<p><em>Black</em> no longer fails when the file starts with a backslash (#922)</p>\n</li>\n<li>\n<p><em>Black</em> no longer merges regular comments with type comments (#1027)</p>\n</li>\n<li>\n<p><em>Black</em> no longer splits long lines that contain type comments (#997)</p>\n</li>\n<li>\n<p>removed unnecessary parentheses around <code>yield</code> expressions (#834)</p>\n</li>\n<li>\n<p>added parentheses around long tuples in unpacking assignments (#832)</p>\n</li>\n<li>\n<p>added parentheses around complex powers when they are prefixed by a unary operator\n(#646)</p>\n</li>\n<li>\n<p>fixed bug that led <em>Black</em> format some code with a line length target of 1 (#762)</p>\n</li>\n<li>\n<p><em>Black</em> no longer introduces quotes in f-string subexpressions on string boundaries\n(#863)</p>\n</li>\n<li>\n<p>if <em>Black</em> puts parenthesis around a single expression, it moves comments to the\nwrapped expression instead of after the brackets (#872)</p>\n</li>\n<li>\n<p><code>blackd</code> now returns the version of <em>Black</em> in the response headers (#1013)</p>\n</li>\n<li>\n<p><code>blackd</code> can now output the diff of formats on source code when the <code>X-Diff</code> header is\nprovided (#969)</p>\n</li>\n</ul>\n<h3>19.3b0</h3>\n<ul>\n<li>\n<p>new option <code>--target-version</code> to control which Python versions <em>Black</em>-formatted code\nshould target (#618)</p>\n</li>\n<li>\n<p>deprecated <code>--py36</code> (use <code>--target-version=py36</code> instead) (#724)</p>\n</li>\n<li>\n<p><em>Black</em> no longer normalizes numeric literals to include <code>_</code> separators (#696)</p>\n</li>\n<li>\n<p>long <code>del</code> statements are now split into multiple lines (#698)</p>\n</li>\n<li>\n<p>type comments are no longer mangled in function signatures</p>\n</li>\n<li>\n<p>improved performance of formatting deeply nested data structures (#509)</p>\n</li>\n<li>\n<p><em>Black</em> now properly formats multiple files in parallel on Windows (#632)</p>\n</li>\n<li>\n<p><em>Black</em> now creates cache files atomically which allows it to be used in parallel\npipelines (like <code>xargs -P8</code>) (#673)</p>\n</li>\n<li>\n<p><em>Black</em> now correctly indents comments in files that were previously formatted with\ntabs (#262)</p>\n</li>\n<li>\n<p><code>blackd</code> now supports CORS (#622)</p>\n</li>\n</ul>\n<h3>18.9b0</h3>\n<ul>\n<li>\n<p>numeric literals are now formatted by <em>Black</em> (#452, #461, #464, #469):</p>\n<ul>\n<li>\n<p>numeric literals are normalized to include <code>_</code> separators on Python 3.6+ code</p>\n</li>\n<li>\n<p>added <code>--skip-numeric-underscore-normalization</code> to disable the above behavior and\nleave numeric underscores as they were in the input</p>\n</li>\n<li>\n<p>code with <code>_</code> in numeric literals is recognized as Python 3.6+</p>\n</li>\n<li>\n<p>most letters in numeric literals are lowercased (e.g., in <code>1e10</code>, <code>0x01</code>)</p>\n</li>\n<li>\n<p>hexadecimal digits are always uppercased (e.g. <code>0xBADC0DE</code>)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>added <code>blackd</code>, see <a href=\"#blackd\" rel=\"nofollow\">its documentation</a> for more info (#349)</p>\n</li>\n<li>\n<p>adjacent string literals are now correctly split into multiple lines (#463)</p>\n</li>\n<li>\n<p>trailing comma is now added to single imports that don't fit on a line (#250)</p>\n</li>\n<li>\n<p>cache is now populated when <code>--check</code> is successful for a file which speeds up\nconsecutive checks of properly formatted unmodified files (#448)</p>\n</li>\n<li>\n<p>whitespace at the beginning of the file is now removed (#399)</p>\n</li>\n<li>\n<p>fixed mangling <a href=\"http://mpastell.com/pweave/\" rel=\"nofollow\">pweave</a> and\n<a href=\"https://pythonhosted.org/spyder/\" rel=\"nofollow\">Spyder IDE</a> special comments (#532)</p>\n</li>\n<li>\n<p>fixed unstable formatting when unpacking big tuples (#267)</p>\n</li>\n<li>\n<p>fixed parsing of <code>__future__</code> imports with renames (#389)</p>\n</li>\n<li>\n<p>fixed scope of <code># fmt: off</code> when directly preceding <code>yield</code> and other nodes (#385)</p>\n</li>\n<li>\n<p>fixed formatting of lambda expressions with default arguments (#468)</p>\n</li>\n<li>\n<p>fixed <code>async for</code> statements: <em>Black</em> no longer breaks them into separate lines (#372)</p>\n</li>\n<li>\n<p>note: the Vim plugin stopped registering <code>,=</code> as a default chord as it turned out to\nbe a bad idea (#415)</p>\n</li>\n</ul>\n<h3>18.6b4</h3>\n<ul>\n<li>hotfix: don't freeze when multiple comments directly precede <code># fmt: off</code> (#371)</li>\n</ul>\n<h3>18.6b3</h3>\n<ul>\n<li>\n<p>typing stub files (<code>.pyi</code>) now have blank lines added after constants (#340)</p>\n</li>\n<li>\n<p><code># fmt: off</code> and <code># fmt: on</code> are now much more dependable:</p>\n<ul>\n<li>\n<p>they now work also within bracket pairs (#329)</p>\n</li>\n<li>\n<p>they now correctly work across function/class boundaries (#335)</p>\n</li>\n<li>\n<p>they now work when an indentation block starts with empty lines or misaligned\ncomments (#334)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>made Click not fail on invalid environments; note that Click is right but the\nlikelihood we'll need to access non-ASCII file paths when dealing with Python source\ncode is low (#277)</p>\n</li>\n<li>\n<p>fixed improper formatting of f-strings with quotes inside interpolated expressions\n(#322)</p>\n</li>\n<li>\n<p>fixed unnecessary slowdown when long list literals where found in a file</p>\n</li>\n<li>\n<p>fixed unnecessary slowdown on AST nodes with very many siblings</p>\n</li>\n<li>\n<p>fixed cannibalizing backslashes during string normalization</p>\n</li>\n<li>\n<p>fixed a crash due to symbolic links pointing outside of the project directory (#338)</p>\n</li>\n</ul>\n<h3>18.6b2</h3>\n<ul>\n<li>\n<p>added <code>--config</code> (#65)</p>\n</li>\n<li>\n<p>added <code>-h</code> equivalent to <code>--help</code> (#316)</p>\n</li>\n<li>\n<p>fixed improper unmodified file caching when <code>-S</code> was used</p>\n</li>\n<li>\n<p>fixed extra space in string unpacking (#305)</p>\n</li>\n<li>\n<p>fixed formatting of empty triple quoted strings (#313)</p>\n</li>\n<li>\n<p>fixed unnecessary slowdown in comment placement calculation on lines without comments</p>\n</li>\n</ul>\n<h3>18.6b1</h3>\n<ul>\n<li>\n<p>hotfix: don't output human-facing information on stdout (#299)</p>\n</li>\n<li>\n<p>hotfix: don't output cake emoji on non-zero return code (#300)</p>\n</li>\n</ul>\n<h3>18.6b0</h3>\n<ul>\n<li>\n<p>added <code>--include</code> and <code>--exclude</code> (#270)</p>\n</li>\n<li>\n<p>added <code>--skip-string-normalization</code> (#118)</p>\n</li>\n<li>\n<p>added <code>--verbose</code> (#283)</p>\n</li>\n<li>\n<p>the header output in <code>--diff</code> now actually conforms to the unified diff spec</p>\n</li>\n<li>\n<p>fixed long trivial assignments being wrapped in unnecessary parentheses (#273)</p>\n</li>\n<li>\n<p>fixed unnecessary parentheses when a line contained multiline strings (#232)</p>\n</li>\n<li>\n<p>fixed stdin handling not working correctly if an old version of Click was used (#276)</p>\n</li>\n<li>\n<p><em>Black</em> now preserves line endings when formatting a file in place (#258)</p>\n</li>\n</ul>\n<h3>18.5b1</h3>\n<ul>\n<li>\n<p>added <code>--pyi</code> (#249)</p>\n</li>\n<li>\n<p>added <code>--py36</code> (#249)</p>\n</li>\n<li>\n<p>Python grammar pickle caches are stored with the formatting caches, making <em>Black</em>\nwork in environments where site-packages is not user-writable (#192)</p>\n</li>\n<li>\n<p><em>Black</em> now enforces a PEP 257 empty line after a class-level docstring (and/or\nfields) and the first method</p>\n</li>\n<li>\n<p>fixed invalid code produced when standalone comments were present in a trailer that\nwas omitted from line splitting on a large expression (#237)</p>\n</li>\n<li>\n<p>fixed optional parentheses being removed within <code># fmt: off</code> sections (#224)</p>\n</li>\n<li>\n<p>fixed invalid code produced when stars in very long imports were incorrectly wrapped\nin optional parentheses (#234)</p>\n</li>\n<li>\n<p>fixed unstable formatting when inline comments were moved around in a trailer that was\nomitted from line splitting on a large expression (#238)</p>\n</li>\n<li>\n<p>fixed extra empty line between a class declaration and the first method if no class\ndocstring or fields are present (#219)</p>\n</li>\n<li>\n<p>fixed extra empty line between a function signature and an inner function or inner\nclass (#196)</p>\n</li>\n</ul>\n<h3>18.5b0</h3>\n<ul>\n<li>\n<p>call chains are now formatted according to the\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\" rel=\"nofollow\">fluent interfaces</a> style (#67)</p>\n</li>\n<li>\n<p>data structure literals (tuples, lists, dictionaries, and sets) are now also always\nexploded like imports when they don't fit in a single line (#152)</p>\n</li>\n<li>\n<p>slices are now formatted according to PEP 8 (#178)</p>\n</li>\n<li>\n<p>parentheses are now also managed automatically on the right-hand side of assignments\nand return statements (#140)</p>\n</li>\n<li>\n<p>math operators now use their respective priorities for delimiting multiline\nexpressions (#148)</p>\n</li>\n<li>\n<p>optional parentheses are now omitted on expressions that start or end with a bracket\nand only contain a single operator (#177)</p>\n</li>\n<li>\n<p>empty parentheses in a class definition are now removed (#145, #180)</p>\n</li>\n<li>\n<p>string prefixes are now standardized to lowercase and <code>u</code> is removed on Python 3.6+\nonly code and Python 2.7+ code with the <code>unicode_literals</code> future import (#188, #198,\n#199)</p>\n</li>\n<li>\n<p>typing stub files (<code>.pyi</code>) are now formatted in a style that is consistent with PEP\n484 (#207, #210)</p>\n</li>\n<li>\n<p>progress when reformatting many files is now reported incrementally</p>\n</li>\n<li>\n<p>fixed trailers (content with brackets) being unnecessarily exploded into their own\nlines after a dedented closing bracket (#119)</p>\n</li>\n<li>\n<p>fixed an invalid trailing comma sometimes left in imports (#185)</p>\n</li>\n<li>\n<p>fixed non-deterministic formatting when multiple pairs of removable parentheses were\nused (#183)</p>\n</li>\n<li>\n<p>fixed multiline strings being unnecessarily wrapped in optional parentheses in long\nassignments (#215)</p>\n</li>\n<li>\n<p>fixed not splitting long from-imports with only a single name</p>\n</li>\n<li>\n<p>fixed Python 3.6+ file discovery by also looking at function calls with unpacking.\nThis fixed non-deterministic formatting if trailing commas where used both in function\nsignatures with stars and function calls with stars but the former would be\nreformatted to a single line.</p>\n</li>\n<li>\n<p>fixed crash on dealing with optional parentheses (#193)</p>\n</li>\n<li>\n<p>fixed \"is\", \"is not\", \"in\", and \"not in\" not considered operators for splitting\npurposes</p>\n</li>\n<li>\n<p>fixed crash when dead symlinks where encountered</p>\n</li>\n</ul>\n<h3>18.4a4</h3>\n<ul>\n<li>don't populate the cache on <code>--check</code> (#175)</li>\n</ul>\n<h3>18.4a3</h3>\n<ul>\n<li>\n<p>added a \"cache\"; files already reformatted that haven't changed on disk won't be\nreformatted again (#109)</p>\n</li>\n<li>\n<p><code>--check</code> and <code>--diff</code> are no longer mutually exclusive (#149)</p>\n</li>\n<li>\n<p>generalized star expression handling, including double stars; this fixes\nmultiplication making expressions \"unsafe\" for trailing commas (#132)</p>\n</li>\n<li>\n<p><em>Black</em> no longer enforces putting empty lines behind control flow statements (#90)</p>\n</li>\n<li>\n<p><em>Black</em> now splits imports like \"Mode 3 + trailing comma\" of isort (#127)</p>\n</li>\n<li>\n<p>fixed comment indentation when a standalone comment closes a block (#16, #32)</p>\n</li>\n<li>\n<p>fixed standalone comments receiving extra empty lines if immediately preceding a\nclass, def, or decorator (#56, #154)</p>\n</li>\n<li>\n<p>fixed <code>--diff</code> not showing entire path (#130)</p>\n</li>\n<li>\n<p>fixed parsing of complex expressions after star and double stars in function calls\n(#2)</p>\n</li>\n<li>\n<p>fixed invalid splitting on comma in lambda arguments (#133)</p>\n</li>\n<li>\n<p>fixed missing splits of ternary expressions (#141)</p>\n</li>\n</ul>\n<h3>18.4a2</h3>\n<ul>\n<li>\n<p>fixed parsing of unaligned standalone comments (#99, #112)</p>\n</li>\n<li>\n<p>fixed placement of dictionary unpacking inside dictionary literals (#111)</p>\n</li>\n<li>\n<p>Vim plugin now works on Windows, too</p>\n</li>\n<li>\n<p>fixed unstable formatting when encountering unnecessarily escaped quotes in a string\n(#120)</p>\n</li>\n</ul>\n<h3>18.4a1</h3>\n<ul>\n<li>\n<p>added <code>--quiet</code> (#78)</p>\n</li>\n<li>\n<p>added automatic parentheses management (#4)</p>\n</li>\n<li>\n<p>added <a href=\"https://pre-commit.com\" rel=\"nofollow\">pre-commit</a> integration (#103, #104)</p>\n</li>\n<li>\n<p>fixed reporting on <code>--check</code> with multiple files (#101, #102)</p>\n</li>\n<li>\n<p>fixed removing backslash escapes from raw strings (#100, #105)</p>\n</li>\n</ul>\n<h3>18.4a0</h3>\n<ul>\n<li>\n<p>added <code>--diff</code> (#87)</p>\n</li>\n<li>\n<p>add line breaks before all delimiters, except in cases like commas, to better comply\nwith PEP 8 (#73)</p>\n</li>\n<li>\n<p>standardize string literals to use double quotes (almost) everywhere (#75)</p>\n</li>\n<li>\n<p>fixed handling of standalone comments within nested bracketed expressions; <em>Black</em>\nwill no longer produce super long lines or put all standalone comments at the end of\nthe expression (#22)</p>\n</li>\n<li>\n<p>fixed 18.3a4 regression: don't crash and burn on empty lines with trailing whitespace\n(#80)</p>\n</li>\n<li>\n<p>fixed 18.3a4 regression: <code># yapf: disable</code> usage as trailing comment would cause\n<em>Black</em> to not emit the rest of the file (#95)</p>\n</li>\n<li>\n<p>when CTRL+C is pressed while formatting many files, <em>Black</em> no longer freaks out with\na flurry of asyncio-related exceptions</p>\n</li>\n<li>\n<p>only allow up to two empty lines on module level and only single empty lines within\nfunctions (#74)</p>\n</li>\n</ul>\n<h3>18.3a4</h3>\n<ul>\n<li>\n<p><code># fmt: off</code> and <code># fmt: on</code> are implemented (#5)</p>\n</li>\n<li>\n<p>automatic detection of deprecated Python 2 forms of print statements and exec\nstatements in the formatted file (#49)</p>\n</li>\n<li>\n<p>use proper spaces for complex expressions in default values of typed function\narguments (#60)</p>\n</li>\n<li>\n<p>only return exit code 1 when --check is used (#50)</p>\n</li>\n<li>\n<p>don't remove single trailing commas from square bracket indexing (#59)</p>\n</li>\n<li>\n<p>don't omit whitespace if the previous factor leaf wasn't a math operator (#55)</p>\n</li>\n<li>\n<p>omit extra space in kwarg unpacking if it's the first argument (#46)</p>\n</li>\n<li>\n<p>omit extra space in\n<a href=\"http://www.sphinx-doc.org/en/stable/ext/autodoc.html#directive-autoattribute\" rel=\"nofollow\">Sphinx auto-attribute comments</a>\n(#68)</p>\n</li>\n</ul>\n<h3>18.3a3</h3>\n<ul>\n<li>\n<p>don't remove single empty lines outside of bracketed expressions (#19)</p>\n</li>\n<li>\n<p>added ability to pipe formatting from stdin to stdin (#25)</p>\n</li>\n<li>\n<p>restored ability to format code with legacy usage of <code>async</code> as a name (#20, #42)</p>\n</li>\n<li>\n<p>even better handling of numpy-style array indexing (#33, again)</p>\n</li>\n</ul>\n<h3>18.3a2</h3>\n<ul>\n<li>\n<p>changed positioning of binary operators to occur at beginning of lines instead of at\nthe end, following\n<a href=\"https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b\" rel=\"nofollow\">a recent change to PEP 8</a>\n(#21)</p>\n</li>\n<li>\n<p>ignore empty bracket pairs while splitting. This avoids very weirdly looking\nformattings (#34, #35)</p>\n</li>\n<li>\n<p>remove a trailing comma if there is a single argument to a call</p>\n</li>\n<li>\n<p>if top level functions were separated by a comment, don't put four empty lines after\nthe upper function</p>\n</li>\n<li>\n<p>fixed unstable formatting of newlines with imports</p>\n</li>\n<li>\n<p>fixed unintentional folding of post scriptum standalone comments into last statement\nif it was a simple statement (#18, #28)</p>\n</li>\n<li>\n<p>fixed missing space in numpy-style array indexing (#33)</p>\n</li>\n<li>\n<p>fixed spurious space after star-based unary expressions (#31)</p>\n</li>\n</ul>\n<h3>18.3a1</h3>\n<ul>\n<li>\n<p>added <code>--check</code></p>\n</li>\n<li>\n<p>only put trailing commas in function signatures and calls if it's safe to do so. If\nthe file is Python 3.6+ it's always safe, otherwise only safe if there are no <code>*args</code>\nor <code>**kwargs</code> used in the signature or call. (#8)</p>\n</li>\n<li>\n<p>fixed invalid spacing of dots in relative imports (#6, #13)</p>\n</li>\n<li>\n<p>fixed invalid splitting after comma on unpacked variables in for-loops (#23)</p>\n</li>\n<li>\n<p>fixed spurious space in parenthesized set expressions (#7)</p>\n</li>\n<li>\n<p>fixed spurious space after opening parentheses and in default arguments (#14, #17)</p>\n</li>\n<li>\n<p>fixed spurious space after unary operators when the operand was a complex expression\n(#15)</p>\n</li>\n</ul>\n<h3>18.3a0</h3>\n<ul>\n<li>\n<p>first published version, Happy \ud83c\udf70 Day 2018!</p>\n</li>\n<li>\n<p>alpha quality</p>\n</li>\n<li>\n<p>date-versioned (see: <a href=\"https://calver.org/\" rel=\"nofollow\">https://calver.org/</a>)</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7029081, "releases": {"19.11": [{"comment_text": "", "digests": {"md5": "bc04c6d1e1edd62edebd11589761e970", "sha256": "bd5dd0842cef0a2c6714bd7381c8ead9106f68c64c64c706679a6a7fabb7ba48"}, "downloads": -1, "filename": "black_but_with_tabs_instead_of_spaces-19.11-py36-none-any.whl", "has_sig": false, "md5_digest": "bc04c6d1e1edd62edebd11589761e970", "packagetype": "bdist_wheel", "python_version": "py36", "requires_python": ">=3.6", "size": 102804, "upload_time": "2020-04-16T03:11:17", "upload_time_iso_8601": "2020-04-16T03:11:17.326703Z", "url": "https://files.pythonhosted.org/packages/fc/42/f10fc031bc6df2fe374ebb1fce5482f2b2dcb333590afd2fe8850c56bda3/black_but_with_tabs_instead_of_spaces-19.11-py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb6a55013b636059841cea8c6fafb152", "sha256": "01b00ac677000874b86c6f22efc965ab2cc16645a27b86b01bac2fed68a5a12e"}, "downloads": -1, "filename": "black-but-with-tabs-instead-of-spaces-19.11.tar.gz", "has_sig": false, "md5_digest": "cb6a55013b636059841cea8c6fafb152", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1034710, "upload_time": "2020-04-16T03:11:22", "upload_time_iso_8601": "2020-04-16T03:11:22.242417Z", "url": "https://files.pythonhosted.org/packages/67/7b/0b508d621ea1d9112aeab305d20c2d26bc9d579b6865daa05098a54f2d49/black-but-with-tabs-instead-of-spaces-19.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc04c6d1e1edd62edebd11589761e970", "sha256": "bd5dd0842cef0a2c6714bd7381c8ead9106f68c64c64c706679a6a7fabb7ba48"}, "downloads": -1, "filename": "black_but_with_tabs_instead_of_spaces-19.11-py36-none-any.whl", "has_sig": false, "md5_digest": "bc04c6d1e1edd62edebd11589761e970", "packagetype": "bdist_wheel", "python_version": "py36", "requires_python": ">=3.6", "size": 102804, "upload_time": "2020-04-16T03:11:17", "upload_time_iso_8601": "2020-04-16T03:11:17.326703Z", "url": "https://files.pythonhosted.org/packages/fc/42/f10fc031bc6df2fe374ebb1fce5482f2b2dcb333590afd2fe8850c56bda3/black_but_with_tabs_instead_of_spaces-19.11-py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb6a55013b636059841cea8c6fafb152", "sha256": "01b00ac677000874b86c6f22efc965ab2cc16645a27b86b01bac2fed68a5a12e"}, "downloads": -1, "filename": "black-but-with-tabs-instead-of-spaces-19.11.tar.gz", "has_sig": false, "md5_digest": "cb6a55013b636059841cea8c6fafb152", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1034710, "upload_time": "2020-04-16T03:11:22", "upload_time_iso_8601": "2020-04-16T03:11:22.242417Z", "url": "https://files.pythonhosted.org/packages/67/7b/0b508d621ea1d9112aeab305d20c2d26bc9d579b6865daa05098a54f2d49/black-but-with-tabs-instead-of-spaces-19.11.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:11 2020"}