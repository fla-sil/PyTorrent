{"info": {"author": "Amy Summers", "author_email": "amy@sakuradigital.co.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![PyPI version](https://badge.fury.io/py/cerberus-list-schema.svg)](https://badge.fury.io/py/cerberus-list-schema)\n[![Build Status](https://travis-ci.org/Fireclunge/cerberus-list-schema.svg?branch=master)](https://travis-ci.org/Fireclunge/cerberus-list-schema)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n**Cerberus List Schema** is a **Cerberus based validation library with extended methods** to support list schemas as well \nas list transposition to dictionary and python objects. \n\n- List/array schema support\n- Transposition of lists to python objects via schemas\n- Support for missing values in document\n\n## Installation\n\nCerberus List Schema can be installed using pip.\n\n```\n$ pip install cerberus-list-schema\n```\n\n## Extensions\n### Validation\n\n```python\n>>> schema = {\n>>>     \"type\": \"list\",\n>>>     \"items\": [{\"type\": \"string\"}, {\"type\": \"integer\", \"min\": 20}],\n>>> }\n```\n\n##### Simple validation\n\nLists can now be validated out of context of a dictionary\n\n```python\n>>> document = [\"Apples\", 40]\n>>> v = Validator(schema)\n>>> v.validate(document)\nTrue\n```\n\n... and usual cerberus validation rules still apply\n\n```python\n>>> document = [\"Apples\", 15]\n>>> v.validate(document)\nFalse\n>>> v.errors\n{'_schema': [{1: ['min value is 20']}]}\n```\n\n##### Allow incomplete documents\n\nIn cerberus, documents that are missing information specified in a list schema will fail. \nUsing Cerberus List Schema you can pass `allow_list_missing=True` to a Validator object to enable incomplete lists.\n\n```python\n>>> document = [\"Apples\"]\n>>> v.validate(document)\nFalse\n>>> v.errors\n{'_schema': ['length of list should be 2, it is 1']}\n\n>>> v = Validator(schema, allow_list_missing=True)\n>>> v.validate(document)\nTrue\n```\n\n### Normalization\n\n##### Normalization as dict\n\nLists can now be normalized as dict additional to the standard cerberus validation. \nBy default they are given a key equalled to their list index.\n\n```python\n>>> document = {\"produce\": [\"Apple\", 5, \"High\"]}\n>>> schema = {\n>>>     \"produce\": {\n>>>         \"type\": \"list\",\n>>>         \"items\": [\n>>>             {\"type\": \"string\"},\n>>>             {\"type\": \"integer\", \"min\": 0},\n>>>             {\"type\": \"string\"},\n>>>         ],\n>>>     }\n>>> }\n\n>>> v = Validator(schema)\n>>> v.normalized_as_dict(document)\n{\"fruits\": {0: \"Apple\", 1: 5, 2: \"High\"}}\n```\n\n##### Naming indexes\n\nHowever by using the `name` rule, lists can be assigned to a namable dict. Note that this is different to `rename`\nand should be preferred when using the dictionary normalization as rename can produce adverse effects.\n\n```python\n>>> document = {\"produce\": [\"Apple\", 5, \"High\"]}\n>>> schema = {\n>>>     \"produce\": {\n>>>         \"type\": \"list\",\n>>>         \"name\": \"fruits\",\n>>>         \"items\": [\n>>>             {\"name\": \"type\", \"type\": \"string\"},\n>>>             {\"name\": \"count\", \"type\": \"integer\", \"min\": 0},\n>>>             {\"name\": \"quality\", \"type\": \"string\"},\n>>>         ],\n>>>     }\n>>> }\n\n>>> v = Validator(schema)\n>>> v.normalized_as_dict(document)\n{'fruits': {'type': 'Apple', 'count': 5, 'quality': 'High'}}\n```\n\n##### Allowing name conflicts\n\nBy default, conflicting names will throw an error. \nHowever, `allow_name_conflicts` can be specified to ignore the error. \nIn this case, previous assignments will be overwritten without error\n\n```python\n>>> document = {\"produce\": [\"Apple\", \"Orange\"]}\n>>> schema = {\n>>>     \"produce\": {\n>>>         \"type\": \"list\",\n>>>         \"items\": [\n>>>             {\"name\": \"fruit_type\", \"type\": \"string\"},\n>>>             {\"name\": \"fruit_type\", \"type\": \"string\"},\n>>>         ],\n>>>     }\n>>> }\n\n>>> v = Validator(schema)\n>>> v.normalized_as_dict(document)\nAttributeError: `name` rule (`fruit_type`) already in use by another field\n\n>>> v.normalized_as_dict(document, allow_name_conflicts=True)\n{'produce': {'type': 'Orange'}}\n```\n\n### Object Mapping\n\nLists can now be normalized as dict additional to the standard cerberus validation. \nBy default they are given a key equalled to their list index. However `name` may be used to rename \nobject property to that provided. (ensuring the name is a valid python variable name)\n\n```python\n>>> document = {\"produce\": [\"Apple\", 5, \"High\"], \"supplier\": [\"Greg\", \"United Kingdom\", 7.34]}\n>>> schema = {\n>>>     \"produce\": {\n>>>         \"type\": \"list\",\n>>>         \"name\": \"fruits\",\n>>>         \"items\": [\n>>>             {\"name\": \"type\", \"type\": \"string\"},\n>>>             {\"name\": \"count\", \"type\": \"integer\", \"min\": 0},\n>>>             {\"name\": \"quality\", \"type\": \"string\"},\n>>>         ],\n>>>     },\n>>>     \"supplier\": {\n>>>         \"type\": \"list\",\n>>>         \"items\": [\n>>>             {\"type\": \"string\"},\n>>>             {\"type\": \"string\"},\n>>>             {\"type\": \"string\", \"coerce\": int},\n>>>         ],\n>>>     },\n>>> }\n\n>>> v = Validator(schema)\n>>> obj = v.normalized_as_object(document)\n\n>>> obj.fruits.type  # note produce has been renamed to fruits\n'Apple'\n>>> obj.fruits.quality\n'High'\n>>> obj.supplier[0]\n'Greg'\n>>> obj.supplier[2]  # w/ coerce as int rule applied\n7\n```\n\n##### Allowing callable properties for unassigned names\n\nArray values without a `name` property can also be callable by using `callable_numbers`. This is places an underscore\nbefore the key index such that it can be called as a property of an object rather than by index.\n\n```python\n>>> document = [\"Greg\", \"United Kingdom\", 7.34]\n>>> schema = {\n>>>    \"type\": \"list\",\n>>>    \"items\": [\n>>>        {\"type\": \"string\"},\n>>>        {\"type\": \"string\", \"name\": \"country\"},\n>>>        {\"type\": \"string\", \"coerce\": int},\n>>>    ],\n>>>}\n\n>>> v = Validator(schema)\n>>> obj = v.normalized_as_object(document, callable_numbers=True)\n\n>>> obj._0\n'Greg'\n>>> obj._1  # value renamed to country\n\n>>> obj.country\n'United Kingdom'\n>>> obj._2\n7\n```\n\n## Cerberus\n\nMore information about Cerberus and its validators can be found on their GitHub page @ https://github.com/pyeve/cerberus\n\nComplete documentation for Cerberus is available at http://docs.python-cerberus.org\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Firepubes/cerberus-list-schema", "keywords": "validation,schema,dictionaries,normalization,list,array,cerberus,object", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cerberus-list-schema", "package_url": "https://pypi.org/project/cerberus-list-schema/", "platform": "", "project_url": "https://pypi.org/project/cerberus-list-schema/", "project_urls": {"Homepage": "https://github.com/Firepubes/cerberus-list-schema"}, "release_url": "https://pypi.org/project/cerberus-list-schema/1.0.3/", "requires_dist": ["cerberus", "munch"], "requires_python": ">=3.4", "summary": "Cerburus based validation extended to support list schemas and list transposition to dictionary and python objects", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/cerberus-list-schema\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4dcc5cfc17c5e750ccc955dcac620ec19a3ac0d3/68747470733a2f2f62616467652e667572792e696f2f70792f63657262657275732d6c6973742d736368656d612e737667\"></a>\n<a href=\"https://travis-ci.org/Fireclunge/cerberus-list-schema\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2310c4c7806cb3f5c6ffc49282b1db0fed30dfd9/68747470733a2f2f7472617669732d63692e6f72672f46697265636c756e67652f63657262657275732d6c6973742d736368656d612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p><strong>Cerberus List Schema</strong> is a <strong>Cerberus based validation library with extended methods</strong> to support list schemas as well\nas list transposition to dictionary and python objects.</p>\n<ul>\n<li>List/array schema support</li>\n<li>Transposition of lists to python objects via schemas</li>\n<li>Support for missing values in document</li>\n</ul>\n<h2>Installation</h2>\n<p>Cerberus List Schema can be installed using pip.</p>\n<pre><code>$ pip install cerberus-list-schema\n</code></pre>\n<h2>Extensions</h2>\n<h3>Validation</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">}],</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n</pre>\n<h5>Simple validation</h5>\n<p>Lists can now be validated out of context of a dictionary</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Apples\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>... and usual cerberus validation rules still apply</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Apples\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n<span class=\"p\">{</span><span class=\"s1\">'_schema'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'min value is 20'</span><span class=\"p\">]}]}</span>\n</pre>\n<h5>Allow incomplete documents</h5>\n<p>In cerberus, documents that are missing information specified in a list schema will fail.\nUsing Cerberus List Schema you can pass <code>allow_list_missing=True</code> to a Validator object to enable incomplete lists.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Apples\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n<span class=\"p\">{</span><span class=\"s1\">'_schema'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'length of list should be 2, it is 1'</span><span class=\"p\">]}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">allow_list_missing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<h3>Normalization</h3>\n<h5>Normalization as dict</h5>\n<p>Lists can now be normalized as dict additional to the standard cerberus validation.\nBy default they are given a key equalled to their list index.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Apple\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"High\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">normalized_as_dict</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"fruits\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s2\">\"Apple\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s2\">\"High\"</span><span class=\"p\">}}</span>\n</pre>\n<h5>Naming indexes</h5>\n<p>However by using the <code>name</code> rule, lists can be assigned to a namable dict. Note that this is different to <code>rename</code>\nand should be preferred when using the dictionary normalization as rename can produce adverse effects.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Apple\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"High\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fruits\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"count\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"quality\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">normalized_as_dict</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'fruits'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Apple'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'quality'</span><span class=\"p\">:</span> <span class=\"s1\">'High'</span><span class=\"p\">}}</span>\n</pre>\n<h5>Allowing name conflicts</h5>\n<p>By default, conflicting names will throw an error.\nHowever, <code>allow_name_conflicts</code> can be specified to ignore the error.\nIn this case, previous assignments will be overwritten without error</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Orange\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fruit_type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fruit_type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">normalized_as_dict</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"err\">`</span><span class=\"n\">name</span><span class=\"err\">`</span> <span class=\"n\">rule</span> <span class=\"p\">(</span><span class=\"err\">`</span><span class=\"n\">fruit_type</span><span class=\"err\">`</span><span class=\"p\">)</span> <span class=\"n\">already</span> <span class=\"ow\">in</span> <span class=\"n\">use</span> <span class=\"n\">by</span> <span class=\"n\">another</span> <span class=\"n\">field</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">normalized_as_dict</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">,</span> <span class=\"n\">allow_name_conflicts</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'produce'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Orange'</span><span class=\"p\">}}</span>\n</pre>\n<h3>Object Mapping</h3>\n<p>Lists can now be normalized as dict additional to the standard cerberus validation.\nBy default they are given a key equalled to their list index. However <code>name</code> may be used to rename\nobject property to that provided. (ensuring the name is a valid python variable name)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Apple\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"High\"</span><span class=\"p\">],</span> <span class=\"s2\">\"supplier\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Greg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"United Kingdom\"</span><span class=\"p\">,</span> <span class=\"mf\">7.34</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"produce\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fruits\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"count\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"quality\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s2\">\"supplier\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>             <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"s2\">\"coerce\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">normalized_as_object</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">fruits</span><span class=\"o\">.</span><span class=\"n\">type</span>  <span class=\"c1\"># note produce has been renamed to fruits</span>\n<span class=\"s1\">'Apple'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">fruits</span><span class=\"o\">.</span><span class=\"n\">quality</span>\n<span class=\"s1\">'High'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">supplier</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"s1\">'Greg'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">supplier</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># w/ coerce as int rule applied</span>\n<span class=\"mi\">7</span>\n</pre>\n<h5>Allowing callable properties for unassigned names</h5>\n<p>Array values without a <code>name</code> property can also be callable by using <code>callable_numbers</code>. This is places an underscore\nbefore the key index such that it can be called as a property of an object rather than by index.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Greg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"United Kingdom\"</span><span class=\"p\">,</span> <span class=\"mf\">7.34</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>        <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>        <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"country\"</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>        <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"s2\">\"coerce\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">},</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">normalized_as_object</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">,</span> <span class=\"n\">callable_numbers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_0</span>\n<span class=\"s1\">'Greg'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_1</span>  <span class=\"c1\"># value renamed to country</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">country</span>\n<span class=\"s1\">'United Kingdom'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_2</span>\n<span class=\"mi\">7</span>\n</pre>\n<h2>Cerberus</h2>\n<p>More information about Cerberus and its validators can be found on their GitHub page @ <a href=\"https://github.com/pyeve/cerberus\" rel=\"nofollow\">https://github.com/pyeve/cerberus</a></p>\n<p>Complete documentation for Cerberus is available at <a href=\"http://docs.python-cerberus.org\" rel=\"nofollow\">http://docs.python-cerberus.org</a></p>\n\n          </div>"}, "last_serial": 6947817, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "08487f20956e4b745df3df8df2c0752d", "sha256": "f6c19e331539c0618a486dcb425c00829e9cc82b102f4a5970f05e42c4632b21"}, "downloads": -1, "filename": "cerberus_list_schema-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "08487f20956e4b745df3df8df2c0752d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 10856, "upload_time": "2020-03-27T13:44:12", "upload_time_iso_8601": "2020-03-27T13:44:12.495733Z", "url": "https://files.pythonhosted.org/packages/0d/8d/a91249b38160aba9a543b99b6ea38852f7c0153d338a88b791790581fe70/cerberus_list_schema-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a80d827c7975278cbc16302767c09d0", "sha256": "d593438e7aa56efd6624d1fd766c7f1b98d43d615abe251002c4350aac4832e8"}, "downloads": -1, "filename": "cerberus-list-schema-1.0.tar.gz", "has_sig": false, "md5_digest": "5a80d827c7975278cbc16302767c09d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6559, "upload_time": "2020-03-27T13:44:15", "upload_time_iso_8601": "2020-03-27T13:44:15.015116Z", "url": "https://files.pythonhosted.org/packages/e0/b9/7f616a7d54fa3e50681e91ef1ec79f35d91ea68b55a8291583f1673a5a79/cerberus-list-schema-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0ae44a463302fc74fc2021d6421d6769", "sha256": "3581e86a890dc8248075f0c7f60016d07066c34cdaa5e432344e7edfec58303b"}, "downloads": -1, "filename": "cerberus_list_schema-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ae44a463302fc74fc2021d6421d6769", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13465, "upload_time": "2020-03-28T01:21:44", "upload_time_iso_8601": "2020-03-28T01:21:44.233205Z", "url": "https://files.pythonhosted.org/packages/63/c3/b8f7f7d6cc23b3796c0d0790a24a15bff2452a51115c08d15580bf2efbe2/cerberus_list_schema-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "295701df74ad18328f5ef8321daf9805", "sha256": "5166b9aa737b93d83cbb27b6a47cb11e24948ab36c0382b42c78c653f5822e0e"}, "downloads": -1, "filename": "cerberus-list-schema-1.0.1.tar.gz", "has_sig": false, "md5_digest": "295701df74ad18328f5ef8321daf9805", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 10782, "upload_time": "2020-03-28T01:21:45", "upload_time_iso_8601": "2020-03-28T01:21:45.742618Z", "url": "https://files.pythonhosted.org/packages/ae/7b/68e8dcdbcf9ae5bd80b611aac67a8f6258d17e4a62b28e9f3f9d5e0b4637/cerberus-list-schema-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "760244da47a5a55e08801e7674b5e07e", "sha256": "e9e21a78d4ecd0245ff8503900a0d8528bc29fcd7e9e40f01848f9dc083a22a7"}, "downloads": -1, "filename": "cerberus_list_schema-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "760244da47a5a55e08801e7674b5e07e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13922, "upload_time": "2020-04-03T21:11:27", "upload_time_iso_8601": "2020-04-03T21:11:27.939623Z", "url": "https://files.pythonhosted.org/packages/30/67/92323e188082858897fc1e16d483d4019cb8a8548aa60b6e4195850f27e4/cerberus_list_schema-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35d93e0487c82838cd96149666423e06", "sha256": "7497b5c2ca01e2c7ebdbad3436c625d2c2dcb38bc614946c341a0ff141d7a971"}, "downloads": -1, "filename": "cerberus-list-schema-1.0.2.tar.gz", "has_sig": false, "md5_digest": "35d93e0487c82838cd96149666423e06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 11298, "upload_time": "2020-04-03T21:11:30", "upload_time_iso_8601": "2020-04-03T21:11:30.003915Z", "url": "https://files.pythonhosted.org/packages/ff/17/c49fc73a87033db666405f205587324cd843e0152d2fe4dd817e550afa7f/cerberus-list-schema-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "76ce701118cd603b75a8d4c64e522616", "sha256": "882f74fa11355d59672d1e6456aff406e6945dbe8536b0c0d3a8f536ce76cb46"}, "downloads": -1, "filename": "cerberus_list_schema-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "76ce701118cd603b75a8d4c64e522616", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13948, "upload_time": "2020-04-04T03:20:14", "upload_time_iso_8601": "2020-04-04T03:20:14.916830Z", "url": "https://files.pythonhosted.org/packages/61/b1/904fc403f818b9cb8054efef0ad5cd2774b9a1495264c218951a40d53560/cerberus_list_schema-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcaa0a739a3d12ec9c40145f757c8be4", "sha256": "6a74bb9314de0cf6578e588c12ce53dfca26b006143e882d4e117dd50aaab0da"}, "downloads": -1, "filename": "cerberus-list-schema-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bcaa0a739a3d12ec9c40145f757c8be4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 11326, "upload_time": "2020-04-04T03:20:18", "upload_time_iso_8601": "2020-04-04T03:20:18.697958Z", "url": "https://files.pythonhosted.org/packages/c9/85/1b95d0ec45a85c9fab7d9b24ea95d8e61ec7e412cb762c67a11b0e46547b/cerberus-list-schema-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76ce701118cd603b75a8d4c64e522616", "sha256": "882f74fa11355d59672d1e6456aff406e6945dbe8536b0c0d3a8f536ce76cb46"}, "downloads": -1, "filename": "cerberus_list_schema-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "76ce701118cd603b75a8d4c64e522616", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 13948, "upload_time": "2020-04-04T03:20:14", "upload_time_iso_8601": "2020-04-04T03:20:14.916830Z", "url": "https://files.pythonhosted.org/packages/61/b1/904fc403f818b9cb8054efef0ad5cd2774b9a1495264c218951a40d53560/cerberus_list_schema-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcaa0a739a3d12ec9c40145f757c8be4", "sha256": "6a74bb9314de0cf6578e588c12ce53dfca26b006143e882d4e117dd50aaab0da"}, "downloads": -1, "filename": "cerberus-list-schema-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bcaa0a739a3d12ec9c40145f757c8be4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 11326, "upload_time": "2020-04-04T03:20:18", "upload_time_iso_8601": "2020-04-04T03:20:18.697958Z", "url": "https://files.pythonhosted.org/packages/c9/85/1b95d0ec45a85c9fab7d9b24ea95d8e61ec7e412cb762c67a11b0e46547b/cerberus-list-schema-1.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:47 2020"}