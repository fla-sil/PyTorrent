{"info": {"author": "Gabe Appleton", "author_email": "gabe@gabeappleton.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Other", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Scientific/Engineering :: GIS", "Topic :: Software Development :: Compilers"], "description": "overpassify\n===========\n\nA Python to OverpassQL transpiler, now on both `GitHub\n<https://github.com/gappleto97/overpassify>`__ and `GitLab\n<https://gitlab.com/gappleto97/overpassify>`__\n\n`OverpassQL <http://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL>`__\nis the language used to query features on OpenStreetMap. Unfortunately,\nit's not very readable.\n\nThe goal here is to enable people to write in a more developer-friendly\nlanguage, and still have it work on the existing infrastructure. As of\nnow, ``overpassify`` can take a snippet like:\n\n.. code:: python\n\n    from overpassify import overpassify\n\n    @overpassify\n    def query():\n        search = Area(3600134503)\n        ways = Way(search, highway=...)\n        odd_keys_demo = Way(search, **{Regex('maxspeed(?::.+)?'): Regex('.+ mph')})\n        nodes = Node(search)\n        out(ways, geom=True, count=True)\n        out(nodes, geom=True, count=True)\n        noop()\n\nAnd from that generate:\n\n.. code::\n\n    (area(3600134503);) -> .search;\n    (way[\"highway\"](area.search);) -> .ways;\n    (way[~\"maxspeed(?::.+)?\"~\".+ mph\"](area.search);) -> .odd_keys_demo;\n    (node(area.search);) -> .nodes;\n    .ways out count;\n    .ways out geom;\n    .nodes out count;\n    .nodes out geom;\n\nThat last ``noop()`` is because of `issue\n#2 <https://github.com/gappleto97/overpassify/issues/2>`__. And as a\nnote, this library assumes you never use a variable name of the form\n``tmp*``. That format will probably be changed to something even less\nlikely in the future, but some translations (for instance, a full\nternary) *require* the use of temporary variables.\n\nOverview\n--------\n\nI'll say this from the outset: ``overpassify`` will support a subset of\nPython. Some things are just too difficult (and maybe impossible) to\nautomatically translate. Functions are an example of that.\n\nOn the other hand, it will try to support a superset of easily-usable\nOverpassQL. Some of those extra features won't be as efficient as their\nPython counterparts, but they will be available.\n\nCurrently ``overpassify`` supports 41/56 of the features listed in the\nOverpassQL guide, and additionally supports ternary statements, ``if`` blocks,\n``break``, and ``continue``.\n\nClasses\n-------\n\nThis library provides wrappers for five types. ``Set()``, ``Node()``,\n``Way()``, ``Area()``, and ``Relation()``. Those last four are *all*\nconsidered subclasses of ``Set()``.\n\nThis library also provides support for strings and numbers. In the\nfuture it will provide support for regex and other things in specific\nplaces.\n\n(Note: Currently nested constructors have some problems in\nimplementation)\n\nAssignment\n----------\n\nThis works about the way you'd expect it to. There are a couple caveats\nthough.\n\n#. You cannot assign a non-\\ ``Set()`` to a variable. This means only\n   those five classes listed above.\n#. You cannot assign multiple variables in one line. No ``a, b = b, a``,\n   and the like. This could *potentially* be changed later.\n\nNumber and Set Arithmetic\n-------------------------\n\nAnother supported feature is the ability to manipulate these sets and\nnumbers.\n\nAdding sets will produce the union of those sets. Adding numbers will\nproduce their sum.\n\nSubtracting **two** sets will produce their difference. Subtracting\nnumbers will do the same.\n\nSet Filtering\n-------------\n\nYou are also allowed to filter a ``Set()``'s contents by type. For\ninstance, ``Way.filter(<some set>)`` would yield all the ways within\n``<some set>``.\n\nSet intersections\n-----------------\n\nA similar process will allow you to take the intersection of arbitrary\nnumbers of **named** sets. So ``Set.intersect(a, b)`` will yield all\nelements common between ``a`` and ``b``. You cannot, at the moment, use\nan expression inside this function. It **must** be predefined.\n\nYou can also use this in tandem with Set Filtering. So\n``Area.intersect(a, b)`` would yield only the areas common between ``a``\nand ``b``.\n\nSearching for Sets\n------------------\n\nThis library also supports *most* of the ways OverpassQL can search for\ninformation. This currently includes:\n\n#. Checking within an area (or set of areas)\n#. Fetching by ID\n#. Tag matching\n#. Conditional filters (see next section)\n\nThe first two are just given as arguments to the constructor. If you put\nin ``Way(12345)``, that will find the Way with ID 12345. If you put in\n``Way(<some area>)``, it will return all ways within that area.\n\nYou can also define areas using the ``Around()`` function. This has two\nuseful overloads. The first takes the form\n``Around(<some set>, <radius in meters>)``. The second takes the form\n``Around(<radius in meters>, <latitude>, <longitude>)``.\n\nTag matching can be done with keyword arguments. So if you look for\n``Node(highway=\"stop\")``, that will find you all stop signs. It also\nsupports existence checking (``Way(highway=...)``), and non-existence\nchecking (``Area(landuse=None)``), and regex matching\n(``Way(highway=Regex(\"path|cycleway|sidewalk\"))``).\n\nFor keys which are not usable as a keyword, you can use a \"splatted\" dictionary.\nFor instance ``Node(**{'maxspeed:advisory': Regex('.+ mph')})``. The same\nfollows for regex key matching, though regex key matching *must* be with a\nregex value.\n\nYou can also search by both an area and a filter. For instance:\n``Way(<your hometown>, maxspeed=None)``.\n\nTernary Expressions and Conditional Filters\n-------------------------------------------\n\nYou can also filter using the familiar ``a if b else c``. This would\nmean that if ``b`` is truthy, ``a`` should become ``b``, and otherwise\nbecome ``c``.\n\nUnfortunately, since this is not a native feature to OverpassQL, it ends\nup evaluating both sides of that statement.\n\nIf you want ``c`` to be an empty set, however, we can optimize that. So\n``foo = a if b else <type>()`` is the syntax to use there.\n\nAdditional performance is lost because OverpassQL does not support a\nconditional being the *only* filter. This means that we need to provide\nsome other filter, and one in current use is to divide it by type and\nreconstruct. Because of this, filtering down to the appropriate set type yields\nsignificantly batter performance.\n\nReturning Data\n--------------\n\nIn OverpassQL, data can be returned in pieces throughout the function.\nIt's more equivalent to Python's ``yield`` than ``return``. The function\nwe use for that here is ``out()``.\n\n``out()`` takes in one positional argument, and many possible keyword\narguments. It yields data for the positional argument using all the\ntypes defined in the keywords.\n\nFor instance ``out(<set of nodes>, geom=True, body=True, qt=True)``\nwould return all the data that MapRoulette needs to draw those points on\ntheir map.\n\nAs a sidenote, the value given for these keywords is never actually\nchecked. It could as easily be ``geom=False`` as ``geom=True``, and\n``overpassify`` will not care.\n\nFor-Each Loop\n-------------\n\nHere you can use the traditional Python for loop:\n\n.. code:: python\n\n    for way in ways:\n        out(way, geom=True)\n\nIt does not yet support the else clause, and though it supports ``break`` and\n``continue``, please be aware that this will dramatically slow runtime in that\nloop.\n\nIf Statements\n-------------\n\nThis is a feature that OverpassQL cannot do without some emulation. So\nwhat we do here is:\n\n#. Grab an individual item that will probably be stable over long\n   periods of time; in this case, the ``Relation()`` representing\n   Antarctica\n#. Use a conditional filter on that relation to get a one item or zero\n   item ``Set()``\n#. Iterate over that in a for loop\n#. If there is an else clause, use a conditional filter with the\n   negation of the test given to get a one item or zero item ``Set()``\n#. Iterate over the else clause in a for loop\n\nSettings\n--------\n\nWe also provide a wrapper for the option headers. Note that this will\nraise an error if it's not on the first line of your query.\n\nThe valid keywords for ``Settings()`` are as follows:\n\n-  ``timeout``: The maximum number of seconds you would like your query\n   to run for\n-  ``maxsize``: The maximum number of bytes you would like your query to\n   return\n-  ``out``: The format to return in. It defaults to XML, but you can set\n   it to ``\"json\"`` or a variant on ``\"csv\"``, as described `in the\n   OverpassQL\n   spec <http://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#Output_Format_.28out.29>`__\n-  ``bbox``: The string describing a global bounding box. It is used to\n   limit the area your query can encompass, and should take the form\n   ``\"<southern lat>,<western lon>,<northern lat>,<eastern lon>\"``\n-  ``date``: The string describing what date you would like to query\n   for. This allows you to look at past database states. Note that it\n   needs an extra set of quotes, so it would look like\n   ``date='\"2012-09-12T06:55:00Z\"'``\n-  ``diff``: Similar to the above, except it will return the difference\n   between that query run at each time. If you give one time, it will\n   assume you want to compare to now. It would look like\n   ``diff='\"2012-09-12T06:55:00Z\",\"2014-12-24T13:33:00Z\"'``\n-  ``adiff``: Similar to the above, except that it tells you what\n   happened to each absent element\n\nRough Translation Table\n-----------------------\n\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Feature               | OverpassQL                            | Python                                             |\n+=======================+=======================================+====================================================+\n| Assignment            | ``<expr> -> .name``                   | ``name = <expr>``                                  |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Unions                | ``(<set>; ...; <set>)``               | ``<set> + ... + <set>``                            |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Difference            | ``(<set> - <set>)``                   | ``<set> - <set>``                                  |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Intersection          | ``.<set>.<set>``                      | ``Set.intersect(<set>, <set>)``                    |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Type-filtering        | ``way.<set>``                         | ``Way.filter(<set>)``                              |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Searching             |                                       |                                                    |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..By ID               | ``area(1)`` or ``way(7)``             | ``Area(1)`` or ``Way(7)``                          |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..In an area          | ``way(area.<set>)``                   | ``Way(<set>)``                                     |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..By tags             | ``way[\"tag\"=\"value\"]``                | ``Way(tag=value)``                                 |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..By tag existence    | ``way[\"tag\"]``                        | ``Way(tag=...)``                                   |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..By tag nonexistence | ``way[!\"tag\"]``                       | ``Way(tag=None)``                                  |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..By regex            | ``way[\"highway\"~\"a|b\"](area.<set>)``  | ``Way(<set>, highway=Regex(\"a|b\"))``               |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..By inverse regex    | ``way[\"highway\"!~\"a|b\"](area.<set>)`` | ``Way(<set>, highway=NotRegex(\"a|b\"))``            |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..In area + tag       | ``way[\"highway\"](area.<set>)``        | ``Way(<set>, highway=...)``                        |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Ternary               | very long                             | ``<expr> if <condition> else <expr>``              |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Conditional Filter    | ``<type>.<set>(if: <condition>)``     | ``<expr> if <condition> else <type>()``            |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| For Loop              | ``foreach.<set>->.<each>(<body>)``    | ``for <each> in <set>:\\n    <body>``               |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| If Statement          | very long                             | ``if <condition>:\\n    <body>\\nelse:\\n    <body>`` |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| Recursing             |                                       |                                                    |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..Up                  | ``.a <`` or ``.a < -> .b``            | ``a.recurse_up()`` or ``b = a.recurse_up()``       |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..Up (w/ relations)   | ``.a <<`` or ``.a << -> .b``          | ``a.recurse_up_relations()``                       |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..Down                | ``.a >`` or ``.a > -> .b``            | ``a.recurse_down()``                               |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..Down (w/ relations) | ``.a >>`` or ``.a >> -> .b``          | ``a.recurse_down_relations()``                     |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| is_in filers          |                                       |                                                    |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..On a set            | ``.a is_in -> .areas_with_part_of_a`` | ``areas_containing_part_of_a = is_in(a)``          |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n| ..On a lat/lon pair   | ``is_in(0, 0) -> .areas_with_0_0``    | ``areas_containing_0_0 = is_in(0, 0)``             |\n+-----------------------+---------------------------------------+----------------------------------------------------+\n\nFeatures Not Yet Implemented\n----------------------------\n\n#. Filters\n\n   #. Recursion Functions\n   #. Filter By Bounding Box\n   #. Filter By Polygon\n   #. Filter By \"newer\"\n   #. Filter By Date Of Change\n   #. Filter By User\n   #. Filter By Area Pivot\n\n#. ID Evaluators\n\n   #. id() And type()\n   #. is\\_tag() And Tag Fetching\n   #. Property Count Functions\n\n#. Aggregators\n\n   #. Union and Set\n   #. Min and Max\n   #. Sum\n   #. Statistical Counts\n\n#. Number Normalizer\n#. Date Normalizer\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gappleto97/overpassify", "keywords": "OSM OpenStreetMap Overpass OverpassQL Transpiler Transpile Compiler Compile Query", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "overpassify", "package_url": "https://pypi.org/project/overpassify/", "platform": "", "project_url": "https://pypi.org/project/overpassify/", "project_urls": {"Homepage": "https://github.com/gappleto97/overpassify"}, "release_url": "https://pypi.org/project/overpassify/1.2.2/", "requires_dist": null, "requires_python": "", "summary": "A tool to more easily develop queries of OpenStreetMap", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python to OverpassQL transpiler, now on both <a href=\"https://github.com/gappleto97/overpassify\" rel=\"nofollow\">GitHub</a> and <a href=\"https://gitlab.com/gappleto97/overpassify\" rel=\"nofollow\">GitLab</a></p>\n<p><a href=\"http://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL\" rel=\"nofollow\">OverpassQL</a>\nis the language used to query features on OpenStreetMap. Unfortunately,\nit\u2019s not very readable.</p>\n<p>The goal here is to enable people to write in a more developer-friendly\nlanguage, and still have it work on the existing infrastructure. As of\nnow, <tt>overpassify</tt> can take a snippet like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">overpassify</span> <span class=\"kn\">import</span> <span class=\"n\">overpassify</span>\n\n<span class=\"nd\">@overpassify</span>\n<span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">():</span>\n    <span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"n\">Area</span><span class=\"p\">(</span><span class=\"mi\">3600134503</span><span class=\"p\">)</span>\n    <span class=\"n\">ways</span> <span class=\"o\">=</span> <span class=\"n\">Way</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">,</span> <span class=\"n\">highway</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n    <span class=\"n\">odd_keys_demo</span> <span class=\"o\">=</span> <span class=\"n\">Way</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">Regex</span><span class=\"p\">(</span><span class=\"s1\">'maxspeed(?::.+)?'</span><span class=\"p\">):</span> <span class=\"n\">Regex</span><span class=\"p\">(</span><span class=\"s1\">'.+ mph'</span><span class=\"p\">)})</span>\n    <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">)</span>\n    <span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">ways</span><span class=\"p\">,</span> <span class=\"n\">geom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">geom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">noop</span><span class=\"p\">()</span>\n</pre>\n<p>And from that generate:</p>\n<pre>(area(3600134503);) -&gt; .search;\n(way[\"highway\"](area.search);) -&gt; .ways;\n(way[~\"maxspeed(?::.+)?\"~\".+ mph\"](area.search);) -&gt; .odd_keys_demo;\n(node(area.search);) -&gt; .nodes;\n.ways out count;\n.ways out geom;\n.nodes out count;\n.nodes out geom;\n</pre>\n<p>That last <tt>noop()</tt> is because of <a href=\"https://github.com/gappleto97/overpassify/issues/2\" rel=\"nofollow\">issue\n#2</a>. And as a\nnote, this library assumes you never use a variable name of the form\n<tt>tmp*</tt>. That format will probably be changed to something even less\nlikely in the future, but some translations (for instance, a full\nternary) <em>require</em> the use of temporary variables.</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>I\u2019ll say this from the outset: <tt>overpassify</tt> will support a subset of\nPython. Some things are just too difficult (and maybe impossible) to\nautomatically translate. Functions are an example of that.</p>\n<p>On the other hand, it will try to support a superset of easily-usable\nOverpassQL. Some of those extra features won\u2019t be as efficient as their\nPython counterparts, but they will be available.</p>\n<p>Currently <tt>overpassify</tt> supports 41/56 of the features listed in the\nOverpassQL guide, and additionally supports ternary statements, <tt>if</tt> blocks,\n<tt>break</tt>, and <tt>continue</tt>.</p>\n</div>\n<div id=\"classes\">\n<h2>Classes</h2>\n<p>This library provides wrappers for five types. <tt>Set()</tt>, <tt>Node()</tt>,\n<tt>Way()</tt>, <tt>Area()</tt>, and <tt>Relation()</tt>. Those last four are <em>all</em>\nconsidered subclasses of <tt>Set()</tt>.</p>\n<p>This library also provides support for strings and numbers. In the\nfuture it will provide support for regex and other things in specific\nplaces.</p>\n<p>(Note: Currently nested constructors have some problems in\nimplementation)</p>\n</div>\n<div id=\"assignment\">\n<h2>Assignment</h2>\n<p>This works about the way you\u2019d expect it to. There are a couple caveats\nthough.</p>\n<ol>\n<li>You cannot assign a non-<tt>Set()</tt> to a variable. This means only\nthose five classes listed above.</li>\n<li>You cannot assign multiple variables in one line. No <tt>a, b = b, a</tt>,\nand the like. This could <em>potentially</em> be changed later.</li>\n</ol>\n</div>\n<div id=\"number-and-set-arithmetic\">\n<h2>Number and Set Arithmetic</h2>\n<p>Another supported feature is the ability to manipulate these sets and\nnumbers.</p>\n<p>Adding sets will produce the union of those sets. Adding numbers will\nproduce their sum.</p>\n<p>Subtracting <strong>two</strong> sets will produce their difference. Subtracting\nnumbers will do the same.</p>\n</div>\n<div id=\"set-filtering\">\n<h2>Set Filtering</h2>\n<p>You are also allowed to filter a <tt>Set()</tt>\u2019s contents by type. For\ninstance, <tt><span class=\"pre\">Way.filter(&lt;some</span> set&gt;)</tt> would yield all the ways within\n<tt>&lt;some set&gt;</tt>.</p>\n</div>\n<div id=\"set-intersections\">\n<h2>Set intersections</h2>\n<p>A similar process will allow you to take the intersection of arbitrary\nnumbers of <strong>named</strong> sets. So <tt>Set.intersect(a, b)</tt> will yield all\nelements common between <tt>a</tt> and <tt>b</tt>. You cannot, at the moment, use\nan expression inside this function. It <strong>must</strong> be predefined.</p>\n<p>You can also use this in tandem with Set Filtering. So\n<tt>Area.intersect(a, b)</tt> would yield only the areas common between <tt>a</tt>\nand <tt>b</tt>.</p>\n</div>\n<div id=\"searching-for-sets\">\n<h2>Searching for Sets</h2>\n<p>This library also supports <em>most</em> of the ways OverpassQL can search for\ninformation. This currently includes:</p>\n<ol>\n<li>Checking within an area (or set of areas)</li>\n<li>Fetching by ID</li>\n<li>Tag matching</li>\n<li>Conditional filters (see next section)</li>\n</ol>\n<p>The first two are just given as arguments to the constructor. If you put\nin <tt>Way(12345)</tt>, that will find the Way with ID 12345. If you put in\n<tt><span class=\"pre\">Way(&lt;some</span> area&gt;)</tt>, it will return all ways within that area.</p>\n<p>You can also define areas using the <tt>Around()</tt> function. This has two\nuseful overloads. The first takes the form\n<tt><span class=\"pre\">Around(&lt;some</span> set&gt;, &lt;radius in meters&gt;)</tt>. The second takes the form\n<tt><span class=\"pre\">Around(&lt;radius</span> in meters&gt;, &lt;latitude&gt;, &lt;longitude&gt;)</tt>.</p>\n<p>Tag matching can be done with keyword arguments. So if you look for\n<tt><span class=\"pre\">Node(highway=\"stop\")</span></tt>, that will find you all stop signs. It also\nsupports existence checking (<tt><span class=\"pre\">Way(highway=...)</span></tt>), and non-existence\nchecking (<tt>Area(landuse=None)</tt>), and regex matching\n(<tt><span class=\"pre\">Way(highway=Regex(\"path|cycleway|sidewalk\"))</span></tt>).</p>\n<p>For keys which are not usable as a keyword, you can use a \u201csplatted\u201d dictionary.\nFor instance <tt><span class=\"pre\">Node(**{'maxspeed:advisory':</span> <span class=\"pre\">Regex('.+</span> <span class=\"pre\">mph')})</span></tt>. The same\nfollows for regex key matching, though regex key matching <em>must</em> be with a\nregex value.</p>\n<p>You can also search by both an area and a filter. For instance:\n<tt><span class=\"pre\">Way(&lt;your</span> hometown&gt;, maxspeed=None)</tt>.</p>\n</div>\n<div id=\"ternary-expressions-and-conditional-filters\">\n<h2>Ternary Expressions and Conditional Filters</h2>\n<p>You can also filter using the familiar <tt>a if b else c</tt>. This would\nmean that if <tt>b</tt> is truthy, <tt>a</tt> should become <tt>b</tt>, and otherwise\nbecome <tt>c</tt>.</p>\n<p>Unfortunately, since this is not a native feature to OverpassQL, it ends\nup evaluating both sides of that statement.</p>\n<p>If you want <tt>c</tt> to be an empty set, however, we can optimize that. So\n<tt>foo = a if b else <span class=\"pre\">&lt;type&gt;()</span></tt> is the syntax to use there.</p>\n<p>Additional performance is lost because OverpassQL does not support a\nconditional being the <em>only</em> filter. This means that we need to provide\nsome other filter, and one in current use is to divide it by type and\nreconstruct. Because of this, filtering down to the appropriate set type yields\nsignificantly batter performance.</p>\n</div>\n<div id=\"returning-data\">\n<h2>Returning Data</h2>\n<p>In OverpassQL, data can be returned in pieces throughout the function.\nIt\u2019s more equivalent to Python\u2019s <tt>yield</tt> than <tt>return</tt>. The function\nwe use for that here is <tt>out()</tt>.</p>\n<p><tt>out()</tt> takes in one positional argument, and many possible keyword\narguments. It yields data for the positional argument using all the\ntypes defined in the keywords.</p>\n<p>For instance <tt><span class=\"pre\">out(&lt;set</span> of nodes&gt;, geom=True, body=True, qt=True)</tt>\nwould return all the data that MapRoulette needs to draw those points on\ntheir map.</p>\n<p>As a sidenote, the value given for these keywords is never actually\nchecked. It could as easily be <tt>geom=False</tt> as <tt>geom=True</tt>, and\n<tt>overpassify</tt> will not care.</p>\n</div>\n<div id=\"for-each-loop\">\n<h2>For-Each Loop</h2>\n<p>Here you can use the traditional Python for loop:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">way</span> <span class=\"ow\">in</span> <span class=\"n\">ways</span><span class=\"p\">:</span>\n    <span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">way</span><span class=\"p\">,</span> <span class=\"n\">geom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>It does not yet support the else clause, and though it supports <tt>break</tt> and\n<tt>continue</tt>, please be aware that this will dramatically slow runtime in that\nloop.</p>\n</div>\n<div id=\"if-statements\">\n<h2>If Statements</h2>\n<p>This is a feature that OverpassQL cannot do without some emulation. So\nwhat we do here is:</p>\n<ol>\n<li>Grab an individual item that will probably be stable over long\nperiods of time; in this case, the <tt>Relation()</tt> representing\nAntarctica</li>\n<li>Use a conditional filter on that relation to get a one item or zero\nitem <tt>Set()</tt></li>\n<li>Iterate over that in a for loop</li>\n<li>If there is an else clause, use a conditional filter with the\nnegation of the test given to get a one item or zero item <tt>Set()</tt></li>\n<li>Iterate over the else clause in a for loop</li>\n</ol>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>We also provide a wrapper for the option headers. Note that this will\nraise an error if it\u2019s not on the first line of your query.</p>\n<p>The valid keywords for <tt>Settings()</tt> are as follows:</p>\n<ul>\n<li><tt>timeout</tt>: The maximum number of seconds you would like your query\nto run for</li>\n<li><tt>maxsize</tt>: The maximum number of bytes you would like your query to\nreturn</li>\n<li><tt>out</tt>: The format to return in. It defaults to XML, but you can set\nit to <tt>\"json\"</tt> or a variant on <tt>\"csv\"</tt>, as described <a href=\"http://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#Output_Format_.28out.29\" rel=\"nofollow\">in the\nOverpassQL\nspec</a></li>\n<li><tt>bbox</tt>: The string describing a global bounding box. It is used to\nlimit the area your query can encompass, and should take the form\n<tt>\"&lt;southern <span class=\"pre\">lat&gt;,&lt;western</span> <span class=\"pre\">lon&gt;,&lt;northern</span> <span class=\"pre\">lat&gt;,&lt;eastern</span> lon&gt;\"</tt></li>\n<li><tt>date</tt>: The string describing what date you would like to query\nfor. This allows you to look at past database states. Note that it\nneeds an extra set of quotes, so it would look like\n<tt><span class=\"pre\">date='\"2012-09-12T06:55:00Z\"'</span></tt></li>\n<li><tt>diff</tt>: Similar to the above, except it will return the difference\nbetween that query run at each time. If you give one time, it will\nassume you want to compare to now. It would look like\n<tt><span class=\"pre\">diff='\"2012-09-12T06:55:00Z\",\"2014-12-24T13:33:00Z\"'</span></tt></li>\n<li><tt>adiff</tt>: Similar to the above, except that it tells you what\nhappened to each absent element</li>\n</ul>\n</div>\n<div id=\"rough-translation-table\">\n<h2>Rough Translation Table</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Feature</th>\n<th>OverpassQL</th>\n<th>Python</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Assignment</td>\n<td><tt>&lt;expr&gt; <span class=\"pre\">-&gt;</span> .name</tt></td>\n<td><tt>name = &lt;expr&gt;</tt></td>\n</tr>\n<tr><td>Unions</td>\n<td><tt>(&lt;set&gt;; <span class=\"pre\">...;</span> &lt;set&gt;)</tt></td>\n<td><tt>&lt;set&gt; + ... + &lt;set&gt;</tt></td>\n</tr>\n<tr><td>Difference</td>\n<td><tt>(&lt;set&gt; - &lt;set&gt;)</tt></td>\n<td><tt>&lt;set&gt; - &lt;set&gt;</tt></td>\n</tr>\n<tr><td>Intersection</td>\n<td><tt><span class=\"pre\">.&lt;set&gt;.&lt;set&gt;</span></tt></td>\n<td><tt><span class=\"pre\">Set.intersect(&lt;set&gt;,</span> &lt;set&gt;)</tt></td>\n</tr>\n<tr><td>Type-filtering</td>\n<td><tt><span class=\"pre\">way.&lt;set&gt;</span></tt></td>\n<td><tt><span class=\"pre\">Way.filter(&lt;set&gt;)</span></tt></td>\n</tr>\n<tr><td>Searching</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>..By ID</td>\n<td><tt>area(1)</tt> or <tt>way(7)</tt></td>\n<td><tt>Area(1)</tt> or <tt>Way(7)</tt></td>\n</tr>\n<tr><td>..In an area</td>\n<td><tt><span class=\"pre\">way(area.&lt;set&gt;)</span></tt></td>\n<td><tt><span class=\"pre\">Way(&lt;set&gt;)</span></tt></td>\n</tr>\n<tr><td>..By tags</td>\n<td><tt><span class=\"pre\">way[\"tag\"=\"value\"]</span></tt></td>\n<td><tt>Way(tag=value)</tt></td>\n</tr>\n<tr><td>..By tag existence</td>\n<td><tt><span class=\"pre\">way[\"tag\"]</span></tt></td>\n<td><tt><span class=\"pre\">Way(tag=...)</span></tt></td>\n</tr>\n<tr><td>..By tag nonexistence</td>\n<td><tt><span class=\"pre\">way[!\"tag\"]</span></tt></td>\n<td><tt>Way(tag=None)</tt></td>\n</tr>\n<tr><td>..By regex</td>\n<td><tt><span class=\"pre\">way[\"highway\"~\"a|b\"](area.&lt;set&gt;)</span></tt></td>\n<td><tt><span class=\"pre\">Way(&lt;set&gt;,</span> <span class=\"pre\">highway=Regex(\"a|b\"))</span></tt></td>\n</tr>\n<tr><td>..By inverse regex</td>\n<td><tt><span class=\"pre\">way[\"highway\"!~\"a|b\"](area.&lt;set&gt;)</span></tt></td>\n<td><tt><span class=\"pre\">Way(&lt;set&gt;,</span> <span class=\"pre\">highway=NotRegex(\"a|b\"))</span></tt></td>\n</tr>\n<tr><td>..In area + tag</td>\n<td><tt><span class=\"pre\">way[\"highway\"](area.&lt;set&gt;)</span></tt></td>\n<td><tt><span class=\"pre\">Way(&lt;set&gt;,</span> <span class=\"pre\">highway=...)</span></tt></td>\n</tr>\n<tr><td>Ternary</td>\n<td>very long</td>\n<td><tt>&lt;expr&gt; if &lt;condition&gt; else &lt;expr&gt;</tt></td>\n</tr>\n<tr><td>Conditional Filter</td>\n<td><tt><span class=\"pre\">&lt;type&gt;.&lt;set&gt;(if:</span> &lt;condition&gt;)</tt></td>\n<td><tt>&lt;expr&gt; if &lt;condition&gt; else <span class=\"pre\">&lt;type&gt;()</span></tt></td>\n</tr>\n<tr><td>For Loop</td>\n<td><tt><span class=\"pre\">foreach.&lt;set&gt;-&gt;.&lt;each&gt;(&lt;body&gt;)</span></tt></td>\n<td><tt>for &lt;each&gt; in <span class=\"pre\">&lt;set&gt;:\\n</span>\u00a0\u00a0\u00a0 &lt;body&gt;</tt></td>\n</tr>\n<tr><td>If Statement</td>\n<td>very long</td>\n<td><tt>if <span class=\"pre\">&lt;condition&gt;:\\n</span>\u00a0\u00a0\u00a0 <span class=\"pre\">&lt;body&gt;\\nelse:\\n</span>\u00a0\u00a0\u00a0 &lt;body&gt;</tt></td>\n</tr>\n<tr><td>Recursing</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>..Up</td>\n<td><tt>.a &lt;</tt> or <tt>.a &lt; <span class=\"pre\">-&gt;</span> .b</tt></td>\n<td><tt>a.recurse_up()</tt> or <tt>b = a.recurse_up()</tt></td>\n</tr>\n<tr><td>..Up (w/ relations)</td>\n<td><tt>.a &lt;&lt;</tt> or <tt>.a &lt;&lt; <span class=\"pre\">-&gt;</span> .b</tt></td>\n<td><tt>a.recurse_up_relations()</tt></td>\n</tr>\n<tr><td>..Down</td>\n<td><tt>.a &gt;</tt> or <tt>.a &gt; <span class=\"pre\">-&gt;</span> .b</tt></td>\n<td><tt>a.recurse_down()</tt></td>\n</tr>\n<tr><td>..Down (w/ relations)</td>\n<td><tt>.a &gt;&gt;</tt> or <tt>.a &gt;&gt; <span class=\"pre\">-&gt;</span> .b</tt></td>\n<td><tt>a.recurse_down_relations()</tt></td>\n</tr>\n<tr><td>is_in filers</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>..On a set</td>\n<td><tt>.a is_in <span class=\"pre\">-&gt;</span> .areas_with_part_of_a</tt></td>\n<td><tt>areas_containing_part_of_a = is_in(a)</tt></td>\n</tr>\n<tr><td>..On a lat/lon pair</td>\n<td><tt>is_in(0, 0) <span class=\"pre\">-&gt;</span> .areas_with_0_0</tt></td>\n<td><tt>areas_containing_0_0 = is_in(0, 0)</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"features-not-yet-implemented\">\n<h2>Features Not Yet Implemented</h2>\n<ol>\n<li>Filters<ol>\n<li>Recursion Functions</li>\n<li>Filter By Bounding Box</li>\n<li>Filter By Polygon</li>\n<li>Filter By \u201cnewer\u201d</li>\n<li>Filter By Date Of Change</li>\n<li>Filter By User</li>\n<li>Filter By Area Pivot</li>\n</ol>\n</li>\n<li>ID Evaluators<ol>\n<li>id() And type()</li>\n<li>is_tag() And Tag Fetching</li>\n<li>Property Count Functions</li>\n</ol>\n</li>\n<li>Aggregators<ol>\n<li>Union and Set</li>\n<li>Min and Max</li>\n<li>Sum</li>\n<li>Statistical Counts</li>\n</ol>\n</li>\n<li>Number Normalizer</li>\n<li>Date Normalizer</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 4038677, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f1b786e574219c3309f558be1ddac9b1", "sha256": "f60e6b726212e4c33bfd605db3849649643134644aa0f098fa5043c623e8dc00"}, "downloads": -1, "filename": "overpassify-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f1b786e574219c3309f558be1ddac9b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13850, "upload_time": "2017-06-13T20:02:29", "upload_time_iso_8601": "2017-06-13T20:02:29.529697Z", "url": "https://files.pythonhosted.org/packages/4f/33/83173d29bd03047cba8cf529df49f831473e3ef3d2f88fa379a127318cfd/overpassify-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7702ea6fae1dcb3ad6f59cddd614247a", "sha256": "5f229560c3fddbb21257d8c2c599dac88199d7ea8fd9b016a2944b9d657ecb97"}, "downloads": -1, "filename": "overpassify-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7702ea6fae1dcb3ad6f59cddd614247a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13814, "upload_time": "2017-06-13T20:21:16", "upload_time_iso_8601": "2017-06-13T20:21:16.449981Z", "url": "https://files.pythonhosted.org/packages/b2/a6/b987cff2e641a81cb1e39f037a1d03f7c1c7cc77d89f0c8eb3175a690699/overpassify-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4a2bac134a5c8ea4983554b5dc42d7ac", "sha256": "ac4cc755e8d06e0ccf6f3427720d2936f1a2c94a001a9d337173f565d585be04"}, "downloads": -1, "filename": "overpassify-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a2bac134a5c8ea4983554b5dc42d7ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14900, "upload_time": "2017-06-14T04:54:44", "upload_time_iso_8601": "2017-06-14T04:54:44.835964Z", "url": "https://files.pythonhosted.org/packages/94/eb/f837f6519306b4c668b0f2ff0b09186459556650c509e434d4f451140456/overpassify-1.1.0-py2.py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "98599e62400bafd1e8a63924781e08f0", "sha256": "fcb7085c8d8e5d934a73c61acc1434531c33de81e504c2b9ba6f53f461da4709"}, "downloads": -1, "filename": "overpassify-1.1.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "98599e62400bafd1e8a63924781e08f0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18899, "upload_time": "2018-01-12T03:42:21", "upload_time_iso_8601": "2018-01-12T03:42:21.290640Z", "url": "https://files.pythonhosted.org/packages/51/75/1911e8488bb90c7c0aa4d7b1e53276abcf9fa18a8effe39fcf5e4eb80aad/overpassify-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bea59cfa7ee1b0a534d88e269883a7f", "sha256": "b663ec01db9ed13100b82611c79a2f43d2aeb2fee64e40d7d89554414df6dbbc"}, "downloads": -1, "filename": "overpassify-1.1.1.tar.gz", "has_sig": true, "md5_digest": "5bea59cfa7ee1b0a534d88e269883a7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14674, "upload_time": "2018-01-12T03:42:24", "upload_time_iso_8601": "2018-01-12T03:42:24.385748Z", "url": "https://files.pythonhosted.org/packages/cd/94/5ed9394935ed9dbda0f8c4821b7671e1c58c24b7bff16d7d10a27fa8d6ac/overpassify-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "53cf0cdbd19476c1c220e822eaacc923", "sha256": "1a472f715fb4b9f854ad09481ca2d37883e7257c4067faff97d7b9f5d78bfb15"}, "downloads": -1, "filename": "overpassify-1.1.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "53cf0cdbd19476c1c220e822eaacc923", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18892, "upload_time": "2018-01-12T03:46:30", "upload_time_iso_8601": "2018-01-12T03:46:30.012824Z", "url": "https://files.pythonhosted.org/packages/5b/f3/45eee3dd0cca93601c3e5b27b44023623a13c08f9b15b784033b1a3e05b7/overpassify-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab8b753e69973438d979420a663c3999", "sha256": "73ada5f38c7d3b1c0bc51c3143943ab391e069b8a330c1f8cd3b8af89655909d"}, "downloads": -1, "filename": "overpassify-1.1.2.tar.gz", "has_sig": true, "md5_digest": "ab8b753e69973438d979420a663c3999", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14675, "upload_time": "2018-01-12T03:46:32", "upload_time_iso_8601": "2018-01-12T03:46:32.318462Z", "url": "https://files.pythonhosted.org/packages/8b/cd/7a9488039a48ee8958415ba2c0f145ce5d0519e41047c479cf7b2c96c3ba/overpassify-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "68d52fb129e9adbe2a6aba9a58a359f4", "sha256": "cd269ab6531a3fc89f2e1ad769507a0b93fc8879438f668bfd0c6fc87b623678"}, "downloads": -1, "filename": "overpassify-1.1.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "68d52fb129e9adbe2a6aba9a58a359f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18933, "upload_time": "2018-01-12T04:14:21", "upload_time_iso_8601": "2018-01-12T04:14:21.317215Z", "url": "https://files.pythonhosted.org/packages/8e/61/04fe3d5791e9b60db90c5decd8664bbd884fa61fa280f7042c16125a8a28/overpassify-1.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dcb7be1c3c2cad8485cc2ab5a32757d", "sha256": "94834f65bec57dcb3ef005f03d014fefd62408a2837935f2002bb5efaacbd0ad"}, "downloads": -1, "filename": "overpassify-1.1.3.tar.gz", "has_sig": true, "md5_digest": "4dcb7be1c3c2cad8485cc2ab5a32757d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14701, "upload_time": "2018-01-12T04:14:24", "upload_time_iso_8601": "2018-01-12T04:14:24.300071Z", "url": "https://files.pythonhosted.org/packages/77/a5/7484d74c14a7d9069154032fa50165d145cc3c690b75afc402639a6501fa/overpassify-1.1.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "fc5df64ddaa6dc8c1e7e7a862f7e1dcd", "sha256": "8cd0474849261b2669361a1cd682b868838de190274d42239bae9035cc1d906c"}, "downloads": -1, "filename": "overpassify-1.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "fc5df64ddaa6dc8c1e7e7a862f7e1dcd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13490, "upload_time": "2018-07-07T07:45:03", "upload_time_iso_8601": "2018-07-07T07:45:03.438058Z", "url": "https://files.pythonhosted.org/packages/59/2b/04d3138aea11efeac42b0849e5825a6ae16994d7d41dfe11f03d903e0f5c/overpassify-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18495263ce9680106dce5494fd3b2a46", "sha256": "59c5fca595d9e24b0c65d9245833089d256685686d6bdfb12489b458de8be1e6"}, "downloads": -1, "filename": "overpassify-1.2.0.tar.gz", "has_sig": true, "md5_digest": "18495263ce9680106dce5494fd3b2a46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14904, "upload_time": "2018-07-07T07:45:07", "upload_time_iso_8601": "2018-07-07T07:45:07.387392Z", "url": "https://files.pythonhosted.org/packages/af/d3/406ad0c0ce5073dcfa86ce01007b6186cb2580ff0b1b5b6627b81537d4e3/overpassify-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "4ffbe9e5c2e7c38a624ffc4ac1fa4da8", "sha256": "5a9049fa67a63811bbc9416a277e4276edaa4c427fd583d27664ce7ef1466ae2"}, "downloads": -1, "filename": "overpassify-1.2.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4ffbe9e5c2e7c38a624ffc4ac1fa4da8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13644, "upload_time": "2018-07-07T08:04:10", "upload_time_iso_8601": "2018-07-07T08:04:10.315072Z", "url": "https://files.pythonhosted.org/packages/ac/ea/6b702c4cd94f5422a6836b8fbcc3a3a24525779e13696fb392670cceb819/overpassify-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "275639206fdf274acee98a7fd99b7133", "sha256": "5e2832d2a75f6e5eb58872b187c8dc07048492c1865d04d882326882f20c7223"}, "downloads": -1, "filename": "overpassify-1.2.1.tar.gz", "has_sig": true, "md5_digest": "275639206fdf274acee98a7fd99b7133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15057, "upload_time": "2018-07-07T08:04:13", "upload_time_iso_8601": "2018-07-07T08:04:13.769850Z", "url": "https://files.pythonhosted.org/packages/02/7a/8e0f57b232e515422b83241f5a154119e735ec667afb0079877cdf1af80e/overpassify-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "1612c4a15146863e97b37d880de22d52", "sha256": "d84b9aa21dceaae9c83a4fc320a6a7aeac120fd266a7e112e50a63d0d71f06f2"}, "downloads": -1, "filename": "overpassify-1.2.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1612c4a15146863e97b37d880de22d52", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13815, "upload_time": "2018-07-07T08:14:59", "upload_time_iso_8601": "2018-07-07T08:14:59.109872Z", "url": "https://files.pythonhosted.org/packages/97/f2/98594233731933334268e3445f95f61cf274aa14e059014a6358df917cb8/overpassify-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56a5fee5bdd50de6e730a4c85bd95d7d", "sha256": "ce6a1e14e4d1818c4a922284b80a9a8375c7d6db559195d64ff5b087b514def0"}, "downloads": -1, "filename": "overpassify-1.2.2.tar.gz", "has_sig": true, "md5_digest": "56a5fee5bdd50de6e730a4c85bd95d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15257, "upload_time": "2018-07-07T08:15:02", "upload_time_iso_8601": "2018-07-07T08:15:02.871093Z", "url": "https://files.pythonhosted.org/packages/fd/57/734047e4dbef8dfd6b9e410e4712ed014d2e35a63bae4851601c18f1f865/overpassify-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1612c4a15146863e97b37d880de22d52", "sha256": "d84b9aa21dceaae9c83a4fc320a6a7aeac120fd266a7e112e50a63d0d71f06f2"}, "downloads": -1, "filename": "overpassify-1.2.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1612c4a15146863e97b37d880de22d52", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13815, "upload_time": "2018-07-07T08:14:59", "upload_time_iso_8601": "2018-07-07T08:14:59.109872Z", "url": "https://files.pythonhosted.org/packages/97/f2/98594233731933334268e3445f95f61cf274aa14e059014a6358df917cb8/overpassify-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56a5fee5bdd50de6e730a4c85bd95d7d", "sha256": "ce6a1e14e4d1818c4a922284b80a9a8375c7d6db559195d64ff5b087b514def0"}, "downloads": -1, "filename": "overpassify-1.2.2.tar.gz", "has_sig": true, "md5_digest": "56a5fee5bdd50de6e730a4c85bd95d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15257, "upload_time": "2018-07-07T08:15:02", "upload_time_iso_8601": "2018-07-07T08:15:02.871093Z", "url": "https://files.pythonhosted.org/packages/fd/57/734047e4dbef8dfd6b9e410e4712ed014d2e35a63bae4851601c18f1f865/overpassify-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:37 2020"}