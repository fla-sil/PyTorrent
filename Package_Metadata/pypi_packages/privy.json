{"info": {"author": "Ofek Lev", "author_email": "ofekmeister@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Privy\n=====\n\n.. image:: https://img.shields.io/pypi/v/privy.svg?style=flat-square\n    :target: https://pypi.org/project/privy\n\n.. image:: https://img.shields.io/travis/ofek/privy/master.svg?style=flat-square\n    :target: https://travis-ci.org/ofek/privy\n\n.. image:: https://img.shields.io/codecov/c/github/ofek/privy/master.svg?style=flat-square\n    :target: https://codecov.io/gh/ofek/privy\n\n.. image:: https://img.shields.io/pypi/pyversions/privy.svg?style=flat-square\n    :target: https://pypi.org/project/privy\n\n.. image:: https://img.shields.io/pypi/l/privy.svg?style=flat-square\n    :target: https://choosealicense.com/licenses\n\n-----\n\nPrivy is a small and fast utility for password-protecting secret data such as\nAPI keys, cryptocurrency wallets, or seeds for digital signatures.\n\nTable of Contents\n~~~~~~~~~~~~~~~~~\n\n.. contents::\n    :backlinks: top\n    :local:\n\nUsage\n-----\n\nSay for example you are using GnuPG. You are about to sign a message but it first\nrequires your password. Does your password become the input to instantiate your\nprivate key? No, it is first hashed by a secure `key derivation function`_. That\nhash then becomes the input to a symmetric cipher such as AES which then decrypts\nyour stored private key. That is what Privy does.\n\nFear not! With Privy, this become trivially easy:\n\n.. code-block:: python\n\n    >>> import privy\n    >>>\n    >>> # After creating secret, immediately encrypt it using Privy.\n    >>> data = b'secret'\n    >>>\n    >>> hidden = privy.hide(data, ask_for_password())\n    >>> hidden\n    '1$2$fL7xRh8WKe...'\n\nNow you can safely store or transmit the hidden secret. Whenever your user needs\nto use their secret again, ask for their password to take a peek.\n\n.. code-block:: python\n\n    >>> privy.peek(hidden, password)\n    b'secret'\n\nInstallation\n------------\n\nPrivy is available on Linux/macOS and Windows and supports Python 2.7, 3.3+, PyPy, and PyPy3.3-5.5+.\n\n.. code-block:: bash\n\n    $ pip install privy\n\nEncryption scheme\n-----------------\n\nSecrets are encrypted using the `Fernet`_ protocol. Specifically, it uses AES for\nencryption and has built-in authentication using HMAC. The private key used for\nencryption is derived from the password using a `key derivation function`_. The\nkey derivation function used is `Argon2`_, the winner of the `Password Hashing\nCompetition`_. Both Argon2i and Argon2d variants are supported.\n\nEncrypted format\n----------------\n\n``ascii(Argon2 algorithm || security level || base64(salt) || base64(Fernet token))``\n\nAPI\n---\n\nThere are 2 functions: ``hide`` and ``peek``.\n\nhide\n^^^^\n\n``hide(secret, password, security=2, salt=None, server=True)``\n\nEncrypts ``secret`` using ``password``. Returns the hidden secret as unicode.\n\n* Parameters\n\n  - **secret** (``bytes``) - The secret to encrypt.\n  - **password** (``bytes`` or ``unicode``) - The password used to access the secret.\n  - **security** (``int``) - A number 0-20 inclusive. Higher values are more secure at\n    the cost of slower computation and greater use of memory. See `security levels`_.\n  - **salt** (``bytes``) - The salt used for the password hash. Defaults to ``os.urandom(32)``.\n  - **server** (``bool``) - If ``True``, it is assumed side-channel attack protection is\n    needed and therefore the Argon2i algorithm will be used. Otherwise, the password will\n    be hashed using the Argon2d algorithm.\n\npeek\n^^^^\n\n``peek(hidden, password, expires=None)``\n\nDecrypts ``hidden`` using ``password``. Returns the secret as ``bytes``.\n\n* Parameters\n\n  - **hidden** (``bytes`` or ``unicode``) - The hidden secret to decrypt.\n  - **password** (``bytes`` or ``unicode``) - The password used to access the secret.\n  - **expires** (``int``) - The maximum number of seconds since encryption that\n    is allowed. The default is no expiration.\n\nA ``ValueError`` will be raised if the password is wrong, the password was attempted on a\ndifferent hidden secret, or the number of seconds since encryption is > ``expires`` argument.\n\nSecurity levels\n---------------\n\nAll expected times were taken from tests on an Intel Core i7-2670QM @ 2.2 GHz when decrypting\na 256 KiB secret.\n\nThis is the command, where ``SL`` is the desired security level:\n\n.. code-block:: bash\n\n    $ python -m timeit -s \"import privy, os; pw = 'password'; s = os.urandom(1024 * 256); h = privy.hide(s, pw, SL)\" \"privy.peek(h, pw)\"\n\n+--------+-----------------+---------------+-----------------+\n| Levels | Argon2 settings | Expected time | Notes           |\n+========+=================+===============+=================+\n| 0      | m=8 KiB, t=1    | 7 msec        | Lowest possible |\n+--------+-----------------+---------------+-----------------+\n| 1      | m=4 MiB, t=10   | 54 msec       |                 |\n+--------+-----------------+---------------+-----------------+\n| 2      | m=8 MiB, t=10   | 99 msec       | Default         |\n+--------+-----------------+---------------+-----------------+\n| 3      | m=32 MiB, t=10  | 367 msec      |                 |\n+--------+-----------------+---------------+-----------------+\n| 4      | m=48 MiB, t=10  | 540 msec      |                 |\n+--------+-----------------+---------------+-----------------+\n| 5      | m=96 MiB, t=10  | 1.1 sec       | Good choice     |\n+--------+-----------------+---------------+-----------------+\n| 6      | m=256 MiB, t=10 | 3 sec         |                 |\n+--------+-----------------+---------------+-----------------+\n| 7      | m=512 MiB, t=10 | 6 sec         |                 |\n+--------+-----------------+---------------+-----------------+\n| 8      | m=768 MiB, t=10 | 9 sec         |                 |\n+--------+-----------------+---------------+-----------------+\n| 9      | m=1 GiB, t=10   | 12.2 sec      |                 |\n+--------+-----------------+---------------+-----------------+\n| 10     | m=2 GiB, t=20   | 48 sec        | For use on      |\n+--------+-----------------+---------------+ users' machines |\n| 11     | m=3 GiB, t=30   | 107           |                 |\n+--------+-----------------+---------------+                 |\n| 12     | m=4 GiB, t=40   | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 13     | m=5 GiB, t=50   | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 14     | m=6 GiB, t=60   | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 15     | m=7 GiB, t=70   | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 16     | m=8 GiB, t=80   | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 17     | m=9 GiB, t=90   | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 18     | m=10 GiB, t=100 | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 19     | m=11 GiB, t=110 | ?             |                 |\n+--------+-----------------+---------------+                 |\n| 20     | m=12 GiB, t=120 | ?             |                 |\n+--------+-----------------+---------------+-----------------+\n\nLicense\n-------\n\nPrivy is distributed under the terms of either\n\n- `MIT License <https://choosealicense.com/licenses/mit>`_\n- `Apache License, Version 2.0 <https://choosealicense.com/licenses/apache-2.0>`_\n\nat your option.\n\nChangelog\n---------\n\nImportant changes are emphasized.\n\n6.0.0\n^^^^^\n\n* **Breaking:** Support for Python 3.3 has been dropped.\n\n5.0.0\n^^^^^\n\n* **Breaking:** Privy is now dual-licensed under the terms of MIT and Apache v2.0.\n* Only documented methods ``hide`` and ``peek`` are now exposed in the root namespace.\n* Travis now runs tests with the latest versions of PyPy and PyPy3.\n* Improvements to documentation.\n\n4.0.0\n^^^^^\n\n* **Breaking:** For saner conformity, security level 7 now utilizes 512 MiB of RAM instead of 448.\n* Major improvements to documentation.\n\n3.0.0\n^^^^^\n\n* Added security levels 11-20. These are quite resource intensive and are therefore\n  only acceptable for individual use.\n\n2.0.1\n^^^^^\n\n* **Breaking:** Due to requests, the encrypted format now uses url-safe base64 instead of hex.\n\n1.0.0\n^^^^^\n\n* Initial release\n\n.. _Fernet: https://github.com/fernet/spec/blob/master/Spec.md\n.. _key derivation function: https://en.wikipedia.org/wiki/Key_derivation_function\n.. _Argon2: https://github.com/p-h-c/phc-winner-argon2\n.. _Password Hashing Competition: https://en.wikipedia.org/wiki/Password_Hashing_Competition\n.. _security levels: https://github.com/ofek/privy#security-levels\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ofek/privy", "keywords": "passwords,secrets,encryption,keys,aes,hmac", "license": "MIT/Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "privy", "package_url": "https://pypi.org/project/privy/", "platform": "", "project_url": "https://pypi.org/project/privy/", "project_urls": {"Homepage": "https://github.com/ofek/privy"}, "release_url": "https://pypi.org/project/privy/6.0.0/", "requires_dist": ["argon2-cffi", "cryptography"], "requires_python": "", "summary": "Password-protected data made easy.", "version": "6.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/privy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/privy.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b96f744b2dafa7d56c4a1e55f41cfce8d3f8107/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70726976792e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://travis-ci.org/ofek/privy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/ofek/privy/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3dab18074f2d3f38467b86f89d6e18525794b5b2/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f66656b2f70726976792f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://codecov.io/gh/ofek/privy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/ofek/privy/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1914453a2e7c1f173d0d45bbf34dd609e26e652/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6f66656b2f70726976792f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/project/privy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/privy.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccaa5df2117616f5e2ee645575d9bf178442c012/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70726976792e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://choosealicense.com/licenses\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/privy.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8444724b71c29ecd89de1e6f0769ff234e7a8409/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70726976792e7376673f7374796c653d666c61742d737175617265\"></a>\n<hr class=\"docutils\">\n<p>Privy is a small and fast utility for password-protecting secret data such as\nAPI keys, cryptocurrency wallets, or seeds for digital signatures.</p>\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#usage\" id=\"id8\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#installation\" id=\"id9\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#encryption-scheme\" id=\"id10\" rel=\"nofollow\">Encryption scheme</a></li>\n<li><a href=\"#encrypted-format\" id=\"id11\" rel=\"nofollow\">Encrypted format</a></li>\n<li><a href=\"#api\" id=\"id12\" rel=\"nofollow\">API</a><ul>\n<li><a href=\"#hide\" id=\"id13\" rel=\"nofollow\">hide</a></li>\n<li><a href=\"#peek\" id=\"id14\" rel=\"nofollow\">peek</a></li>\n</ul>\n</li>\n<li><a href=\"#security-levels\" id=\"id15\" rel=\"nofollow\">Security levels</a></li>\n<li><a href=\"#license\" id=\"id16\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#changelog\" id=\"id17\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id18\" rel=\"nofollow\">6.0.0</a></li>\n<li><a href=\"#id2\" id=\"id19\" rel=\"nofollow\">5.0.0</a></li>\n<li><a href=\"#id3\" id=\"id20\" rel=\"nofollow\">4.0.0</a></li>\n<li><a href=\"#id4\" id=\"id21\" rel=\"nofollow\">3.0.0</a></li>\n<li><a href=\"#id5\" id=\"id22\" rel=\"nofollow\">2.0.1</a></li>\n<li><a href=\"#id6\" id=\"id23\" rel=\"nofollow\">1.0.0</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Usage</a></h3>\n<p>Say for example you are using GnuPG. You are about to sign a message but it first\nrequires your password. Does your password become the input to instantiate your\nprivate key? No, it is first hashed by a secure <a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\" rel=\"nofollow\">key derivation function</a>. That\nhash then becomes the input to a symmetric cipher such as AES which then decrypts\nyour stored private key. That is what Privy does.</p>\n<p>Fear not! With Privy, this become trivially easy:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">privy</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># After creating secret, immediately encrypt it using Privy.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'secret'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">privy</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ask_for_password</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hidden</span>\n<span class=\"s1\">'1$2$fL7xRh8WKe...'</span>\n</pre>\n<p>Now you can safely store or transmit the hidden secret. Whenever your user needs\nto use their secret again, ask for their password to take a peek.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">privy</span><span class=\"o\">.</span><span class=\"n\">peek</span><span class=\"p\">(</span><span class=\"n\">hidden</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'secret'</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Installation</a></h3>\n<p>Privy is available on Linux/macOS and Windows and supports Python 2.7, 3.3+, PyPy, and PyPy3.3-5.5+.</p>\n<pre>$ pip install privy\n</pre>\n</div>\n<div id=\"encryption-scheme\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Encryption scheme</a></h3>\n<p>Secrets are encrypted using the <a href=\"https://github.com/fernet/spec/blob/master/Spec.md\" rel=\"nofollow\">Fernet</a> protocol. Specifically, it uses AES for\nencryption and has built-in authentication using HMAC. The private key used for\nencryption is derived from the password using a <a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\" rel=\"nofollow\">key derivation function</a>. The\nkey derivation function used is <a href=\"https://github.com/p-h-c/phc-winner-argon2\" rel=\"nofollow\">Argon2</a>, the winner of the <a href=\"https://en.wikipedia.org/wiki/Password_Hashing_Competition\" rel=\"nofollow\">Password Hashing\nCompetition</a>. Both Argon2i and Argon2d variants are supported.</p>\n</div>\n<div id=\"encrypted-format\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Encrypted format</a></h3>\n<p><tt>ascii(Argon2 algorithm || security level || base64(salt) || base64(Fernet token))</tt></p>\n</div>\n<div id=\"api\">\n<h3><a href=\"#contents\" rel=\"nofollow\">API</a></h3>\n<p>There are 2 functions: <tt>hide</tt> and <tt>peek</tt>.</p>\n<div id=\"hide\">\n<h4><a href=\"#contents\" rel=\"nofollow\">hide</a></h4>\n<p><tt>hide(secret, password, security=2, salt=None, server=True)</tt></p>\n<p>Encrypts <tt>secret</tt> using <tt>password</tt>. Returns the hidden secret as unicode.</p>\n<ul>\n<li>Parameters<ul>\n<li><strong>secret</strong> (<tt>bytes</tt>) - The secret to encrypt.</li>\n<li><strong>password</strong> (<tt>bytes</tt> or <tt>unicode</tt>) - The password used to access the secret.</li>\n<li><strong>security</strong> (<tt>int</tt>) - A number 0-20 inclusive. Higher values are more secure at\nthe cost of slower computation and greater use of memory. See <a href=\"https://github.com/ofek/privy#security-levels\" rel=\"nofollow\">security levels</a>.</li>\n<li><strong>salt</strong> (<tt>bytes</tt>) - The salt used for the password hash. Defaults to <tt>os.urandom(32)</tt>.</li>\n<li><strong>server</strong> (<tt>bool</tt>) - If <tt>True</tt>, it is assumed side-channel attack protection is\nneeded and therefore the Argon2i algorithm will be used. Otherwise, the password will\nbe hashed using the Argon2d algorithm.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"peek\">\n<h4><a href=\"#contents\" rel=\"nofollow\">peek</a></h4>\n<p><tt>peek(hidden, password, expires=None)</tt></p>\n<p>Decrypts <tt>hidden</tt> using <tt>password</tt>. Returns the secret as <tt>bytes</tt>.</p>\n<ul>\n<li>Parameters<ul>\n<li><strong>hidden</strong> (<tt>bytes</tt> or <tt>unicode</tt>) - The hidden secret to decrypt.</li>\n<li><strong>password</strong> (<tt>bytes</tt> or <tt>unicode</tt>) - The password used to access the secret.</li>\n<li><strong>expires</strong> (<tt>int</tt>) - The maximum number of seconds since encryption that\nis allowed. The default is no expiration.</li>\n</ul>\n</li>\n</ul>\n<p>A <tt>ValueError</tt> will be raised if the password is wrong, the password was attempted on a\ndifferent hidden secret, or the number of seconds since encryption is &gt; <tt>expires</tt> argument.</p>\n</div>\n</div>\n<div id=\"security-levels\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Security levels</a></h3>\n<p>All expected times were taken from tests on an Intel Core i7-2670QM @ 2.2 GHz when decrypting\na 256 KiB secret.</p>\n<p>This is the command, where <tt>SL</tt> is the desired security level:</p>\n<pre>$ python -m timeit -s <span class=\"s2\">\"import privy, os; pw = 'password'; s = os.urandom(1024 * 256); h = privy.hide(s, pw, SL)\"</span> <span class=\"s2\">\"privy.peek(h, pw)\"</span>\n</pre>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Levels</th>\n<th>Argon2 settings</th>\n<th>Expected time</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td>\n<td>m=8 KiB, t=1</td>\n<td>7 msec</td>\n<td>Lowest possible</td>\n</tr>\n<tr><td>1</td>\n<td>m=4 MiB, t=10</td>\n<td>54 msec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>2</td>\n<td>m=8 MiB, t=10</td>\n<td>99 msec</td>\n<td>Default</td>\n</tr>\n<tr><td>3</td>\n<td>m=32 MiB, t=10</td>\n<td>367 msec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>4</td>\n<td>m=48 MiB, t=10</td>\n<td>540 msec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>5</td>\n<td>m=96 MiB, t=10</td>\n<td>1.1 sec</td>\n<td>Good choice</td>\n</tr>\n<tr><td>6</td>\n<td>m=256 MiB, t=10</td>\n<td>3 sec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>7</td>\n<td>m=512 MiB, t=10</td>\n<td>6 sec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>8</td>\n<td>m=768 MiB, t=10</td>\n<td>9 sec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>9</td>\n<td>m=1 GiB, t=10</td>\n<td>12.2 sec</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>10</td>\n<td>m=2 GiB, t=20</td>\n<td>48 sec</td>\n<td>For use on\nusers\u2019 machines</td>\n</tr>\n<tr><td>11</td>\n<td>m=3 GiB, t=30</td>\n<td>107</td>\n</tr>\n<tr><td>12</td>\n<td>m=4 GiB, t=40</td>\n<td>?</td>\n</tr>\n<tr><td>13</td>\n<td>m=5 GiB, t=50</td>\n<td>?</td>\n</tr>\n<tr><td>14</td>\n<td>m=6 GiB, t=60</td>\n<td>?</td>\n</tr>\n<tr><td>15</td>\n<td>m=7 GiB, t=70</td>\n<td>?</td>\n</tr>\n<tr><td>16</td>\n<td>m=8 GiB, t=80</td>\n<td>?</td>\n</tr>\n<tr><td>17</td>\n<td>m=9 GiB, t=90</td>\n<td>?</td>\n</tr>\n<tr><td>18</td>\n<td>m=10 GiB, t=100</td>\n<td>?</td>\n</tr>\n<tr><td>19</td>\n<td>m=11 GiB, t=110</td>\n<td>?</td>\n</tr>\n<tr><td>20</td>\n<td>m=12 GiB, t=120</td>\n<td>?</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"license\">\n<h3><a href=\"#contents\" rel=\"nofollow\">License</a></h3>\n<p>Privy is distributed under the terms of either</p>\n<ul>\n<li><a href=\"https://choosealicense.com/licenses/mit\" rel=\"nofollow\">MIT License</a></li>\n<li><a href=\"https://choosealicense.com/licenses/apache-2.0\" rel=\"nofollow\">Apache License, Version 2.0</a></li>\n</ul>\n<p>at your option.</p>\n</div>\n<div id=\"changelog\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Changelog</a></h3>\n<p>Important changes are emphasized.</p>\n<div id=\"id1\">\n<h4><a href=\"#contents\" rel=\"nofollow\">6.0.0</a></h4>\n<ul>\n<li><strong>Breaking:</strong> Support for Python 3.3 has been dropped.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4><a href=\"#contents\" rel=\"nofollow\">5.0.0</a></h4>\n<ul>\n<li><strong>Breaking:</strong> Privy is now dual-licensed under the terms of MIT and Apache v2.0.</li>\n<li>Only documented methods <tt>hide</tt> and <tt>peek</tt> are now exposed in the root namespace.</li>\n<li>Travis now runs tests with the latest versions of PyPy and PyPy3.</li>\n<li>Improvements to documentation.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4><a href=\"#contents\" rel=\"nofollow\">4.0.0</a></h4>\n<ul>\n<li><strong>Breaking:</strong> For saner conformity, security level 7 now utilizes 512 MiB of RAM instead of 448.</li>\n<li>Major improvements to documentation.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4><a href=\"#contents\" rel=\"nofollow\">3.0.0</a></h4>\n<ul>\n<li>Added security levels 11-20. These are quite resource intensive and are therefore\nonly acceptable for individual use.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4><a href=\"#contents\" rel=\"nofollow\">2.0.1</a></h4>\n<ul>\n<li><strong>Breaking:</strong> Due to requests, the encrypted format now uses url-safe base64 instead of hex.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h4><a href=\"#contents\" rel=\"nofollow\">1.0.0</a></h4>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3035599, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "76888c18dff23d6fbfc3249e72a9b3a2", "sha256": "9a598204a8b216a97457e13a2732683fc91c5b519ee2c9fb6e04a447bb44efe8"}, "downloads": -1, "filename": "privy-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "76888c18dff23d6fbfc3249e72a9b3a2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8024, "upload_time": "2017-02-14T19:24:42", "upload_time_iso_8601": "2017-02-14T19:24:42.285634Z", "url": "https://files.pythonhosted.org/packages/d0/dc/2c5793302a1f93443de58f5ebf9d5f739614291460624b6ca95907bb18ee/privy-1.0.0-py2.py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "8b6d22fe035e432d747772d10441c959", "sha256": "5b2fd0793d42c72ee16e8434fd3abedee0e69abfc995165527a340f931722a5d"}, "downloads": -1, "filename": "privy-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b6d22fe035e432d747772d10441c959", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12065, "upload_time": "2017-02-15T04:12:21", "upload_time_iso_8601": "2017-02-15T04:12:21.554525Z", "url": "https://files.pythonhosted.org/packages/2d/3e/7ae1b42708f450a7bd43d387ed0b306ececc18ef55bf54eb2a177e62ceda/privy-2.0.1-py2.py3-none-any.whl", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "e7f3a0e0936be2299ccd74a121ab7838", "sha256": "6a5af37876a60a9e8986df9539bc38d09e059c74026290f8a8c454edfbdbc333"}, "downloads": -1, "filename": "privy-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e7f3a0e0936be2299ccd74a121ab7838", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12636, "upload_time": "2017-02-16T19:26:00", "upload_time_iso_8601": "2017-02-16T19:26:00.676280Z", "url": "https://files.pythonhosted.org/packages/dd/65/a6429465693b8d2b61218141339552aaf6df8fe3768e23eed1e1892747be/privy-3.0.0-py2.py3-none-any.whl", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "f95e744facb5740b87681c6b32ea8c11", "sha256": "e623c70360ae8913f9431dba34be9001e4a2d281f58cd076c811cde26ba62378"}, "downloads": -1, "filename": "privy-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f95e744facb5740b87681c6b32ea8c11", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13540, "upload_time": "2017-02-18T21:42:23", "upload_time_iso_8601": "2017-02-18T21:42:23.756567Z", "url": "https://files.pythonhosted.org/packages/cb/59/ca88268c1d40ccf9522ed072412b4ef0d5c248df01bde9e356bfd82f6860/privy-4.0.0-py2.py3-none-any.whl", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "3733439113edeecc47d03dcc6a024628", "sha256": "e64e24a359f746f67055bf3197ad9fd356fb9d7076f62b3a8b761e817e6e4029"}, "downloads": -1, "filename": "privy-5.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3733439113edeecc47d03dcc6a024628", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14187, "upload_time": "2017-06-30T22:39:10", "upload_time_iso_8601": "2017-06-30T22:39:10.495608Z", "url": "https://files.pythonhosted.org/packages/69/14/467ff04fb2bf83f047ccc7d6eca96072c69aad9bdadbe6bcb444567da58d/privy-5.0.0-py2.py3-none-any.whl", "yanked": false}], "6.0.0": [{"comment_text": "", "digests": {"md5": "b2464c33e3874bace71824563455908b", "sha256": "e68679bb4006ce83206d9a7af1158cf4d56a2ed6861ee39276907be618dfb8d9"}, "downloads": -1, "filename": "privy-6.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2464c33e3874bace71824563455908b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14243, "upload_time": "2017-07-20T02:17:57", "upload_time_iso_8601": "2017-07-20T02:17:57.845782Z", "url": "https://files.pythonhosted.org/packages/ef/ae/c3637856cdfe66518133f2cdbb820e30745cdb02b43ece41e7ccb9d7f818/privy-6.0.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2464c33e3874bace71824563455908b", "sha256": "e68679bb4006ce83206d9a7af1158cf4d56a2ed6861ee39276907be618dfb8d9"}, "downloads": -1, "filename": "privy-6.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2464c33e3874bace71824563455908b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14243, "upload_time": "2017-07-20T02:17:57", "upload_time_iso_8601": "2017-07-20T02:17:57.845782Z", "url": "https://files.pythonhosted.org/packages/ef/ae/c3637856cdfe66518133f2cdbb820e30745cdb02b43ece41e7ccb9d7f818/privy-6.0.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:19:06 2020"}