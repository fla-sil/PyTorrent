{"info": {"author": "nttcslab-sp", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio :: Analysis"], "description": "# Kaldiio\n[![pypi](https://img.shields.io/pypi/v/kaldiio.svg)](https://pypi.python.org/pypi/kaldiio)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/kaldiio.svg)](https://pypi.python.org/pypi/kaldiio)\n[![Build Status](https://travis-ci.com/nttcslab-sp/kaldiio.svg?branch=master)](https://travis-ci.com/nttcslab-sp/kaldiio)\n[![codecov](https://codecov.io/gh/nttcslab-sp/kaldiio/branch/master/graph/badge.svg)](https://codecov.io/gh/nttcslab-sp/kaldiio)\n\nA pure python module for reading and writing kaldi ark files\n\n- [Introduction](#introduction)\n    - [What is this? What are `ark` and `scp`?](#what-is-this-what-are-ark-and-scp)\n    - [Features](#features)\n    - [Similar projects](#similar-projects)\n- [Install](#install)\n- [Usage](#usage)\n    - [ReadHelper](#readhelper)\n    - [WriteHelper](#writehelper)\n- [More low level API](#more-low-level-api)\n\n## Introduction\n### What are `ark` and `scp`?\n`kaldiio` is an IO utility  implemented in pure Python language for several file formats used in [kaldi](https://github.com/kaldi-asr/kaldi), which are named as`ark` and `scp`.  `ark` and `scp` are used in  in order to archive some objects defined in Kaldi, typically it is Matrix object of Kaldi.\n\nIn this section, we describe the basic concept of `ark` and `scp`. More detail about the File-IO in `Kaldi-asr`: http://kaldi-asr.org/doc/io.html\n\n\n#### Basic of File IO in kaldi: Ark and copy-feats\n`ark` is an archive format to save any `Kaldi objects`. This library mainly support `KaldiMatrix/KaldiVector`.\nThis ia an example of ark file of KaldiMatrix: [ark file](tests/arks/test.ark)\n\nIf you have `Kaldi`, you can convert it to text format as following\n\n```bash\n# copy-feats <read-specifier> <write-specifier>\ncopy-feats ark:test.ark ark,t:text.ark\n```\n\n\n`copy-feats` is designed to have high affinity with unix command line:\n\n1. `ark` can be flushed to and from unix pipe.\n\n        cat test.ark | copy-feats ark:- ark,t:- | less # Show the contents in the ark\n    `-` indicates standard input stream or output stream.\n1. Unix command can be used as `read-specifier` and `wspecifier`\n\n        copy-feats ark:'gunzip -c some.ark.gz |' ark:some.ark\n\n#### Scp file\n`scp` is a text file such as,\n\n```\nuttid1 /some/where/feats.ark:123\nuttid2 /some/where/feats.ark:156\nuttid3 /some/where/feats.ark:245\n```\nThe first column, `uttid1`, indicates the utterance id and the second, `/some/where/feats.ark:123`, is the file path of matrix/vector of kaldi formats.  The number after colon is a starting addressof the object of the file.\n\n`scp` looks very simple format, but has several powerful features.\n\n1. Mutual conversion between`ark` and `scp`\n\n        copy-feats scp:foo.scp ark:foo.ark  # scp -> ark\n        copy-feats ark:foo.ark ark,scp:bar.ark,bar.scp  # ark -> ark,scp\n\n1. Unix command can be used insead of direct file path\n\n    For example, the following file is equivalent to the first scp.\n\n        uttid1 cat /some/where/feats.ark:123 |\n        uttid2 cat /some/where/feats.ark:156 |\n        uttid3 cat /some/where/feats.ark:245 |\n\n#### wav.scp\n`wav.scp` is a `scp` to describe wave file paths.\n\n```\nuttid1 /some/path/a.wav\nuttid2 /some/path/b.wav\nuttid3 /some/path/c.wav\n```\n\n`wav.scp` is also can be embeded unix command as normal scp file. This is often used for converting file format in kaldi recipes.\n\n```\nuttid1 sph2pipe -f wav /some/path/a.wv1 |\nuttid2 sph2pipe -f wav /some/path/b.wv1 |\nuttid3 sph2pipe -f wav /some/path/c.wv1 |\n```\n\n### Features\nKaldiio supports:\n\n- Read/Write for archive formats: ark, scp\n  - Binary/Text - Float/Double Matrix: DM, FM\n  - Binary/Text - Float/Double Vector: DV, FV\n  - Compressed Matrix for loading: CM, CM2, CM3\n  - Compressed Matrix for writing: All compressoin_method are supported: 1,2,3,4,5,6,7\n  - Binary/Text for Int-vector, typically used for `ali` files.\n- Read/Write via a pipe: e.g. \"ark: cat feats.ark |\"\n- Read wav.scp / wav.ark\n\nThe followings are **not supported**\n\n- Write in existing scp file\n- NNet2/NNet3 egs\n- Lattice file\n\n### Similar projects\n- Python-C++ binding\n   - https://github.com/pykaldi/pykaldi\n      - Looks great. I recommend pykaldi if you aren't particular about pure python.\n   - https://github.com/janchorowski/kaldi-python/\n      - Maybe not enough maintained now.\n   - https://github.com/t13m/kaldi-readers-for-tensorflow\n      - Ark reader for tensorflow\n- Pure Python\n   - https://github.com/vesis84/kaldi-io-for-python\n      - `kaldiio` is based on this module, but `kaldiio` supports more features than it.\n   - https://github.com/funcwj/kaldi-python-io\n      - Python>=3.6. `nnet3-egs`is also supported.\n\n## Install\n\n```bash\npip install kaldiio\n```\n\n## Usage\n`kaldiio` doesn't distinguish the API for each kaldi-objects, i.e.\n`Kaldi-Matrix`, `Kaldi-Vector`, not depending on whether it is binary or text, or compressed or not,\ncan be handled by the same API.\n\n### ReadHelper\n`ReadHelper` supports sequential accessing for `scp` or `ark`. If you need to access randomly, then use `kaldiio.load_scp`.\n\n\n- Read matrix-scp\n\n```python\nfrom kaldiio import ReadHelper\nwith ReadHelper('scp:file.scp') as reader:\n    for key, numpy_array in reader:\n        ...\n```\n\n\n- Read gziped ark\n\n```python\nfrom kaldiio import ReadHelper\nwith ReadHelper('ark: gunzip -c file.ark.gz |') as reader:\n    for key, numpy_array in reader:\n        ...\n\n# Ali file\nwith ReadHelper('ark: gunzip -c exp/tri3_ali/ali.*.gz |') as reader:\n    for key, numpy_array in reader:\n        ...\n```\n\n\n- Read wav.scp\n\n```python\nfrom kaldiio import ReadHelper\nwith ReadHelper('scp:wav.scp') as reader:\n    for key, (rate, numpy_array) in reader:\n        ...\n```\n\n\u3000\u3000\u3000\u3000- v2.11.0: Removed `wav` option. You can load `wav.scp` without any addtional argument.\n\n- Read wav.scp with segments\n\n```python\nfrom kaldiio import ReadHelper\nwith ReadHelper('scp:wav.scp', segments='segments') as reader\n    for key, (rate, numpy_array) in reader:\n        ...\n```\n\n- Read from stdin\n\n```python\nfrom kaldiio import ReadHelper\nwith ReadHelper('ark:-') as reader:\n    for key, numpy_array in reader:\n        ...\n```\n\n### WriteHelper\n- Write matrices and vectors in a ark with scp\n\n```python\nimport numpy\nfrom kaldiio import WriteHelper\nwith WriteHelper('ark,scp:file.ark,file.scp') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n        # The following is equivalent\n        # writer[str(i)] = numpy.random.randn(10, 10)\n```\n\n- Write in compressed matrix\n\n```python\nimport numpy\nfrom kaldiio import WriteHelper\nwith WriteHelper('ark:file.ark', compression_method=2) as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n\n- Write matrices in text\n\n```python\nimport numpy\nfrom kaldiio import WriteHelper\nwith WriteHelper('ark,t:file.ark') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n\n- Write in gziped ark\n\n```python\nimport numpy\nfrom kaldiio import WriteHelper\nwith WriteHelper('ark:| gzip -c > file.ark.gz') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n- Write matrice to stdout\n\n```python\nimport numpy\nfrom kaldiio import WriteHelper\nwith WriteHelper('ark:-') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n\n## More low level API\n`WriteHelper` and `ReadHelper` are high level wrapper of the following API to support kaldi style arguments.\n\n### load_ark\n\n```python\nimport kaldiio\n\nd = kaldiio.load_ark('a.ark')  # d is a generator object\nfor key, numpy_array in d:\n    ...\n\n# === load_ark can accepts file descriptor, too\nwith open('a.ark') as fd:\n    for key, numpy_array in kaldiio.load_ark(fd):\n        ...\n\n# === Use with open_like_kaldi\nfrom kaldiio import open_like_kaldi\nwith open_like_kaldi('gunzip -c file.ark.gz |', 'r') as f:\n    for key, numpy_array in kaldiio.load_ark(fd):\n        ...\n```\n\n- `load_ark` can load both matrices of ark and vectors of ark and also, it can be both text and binary.\n\n### load_scp\n`load_scp` creates \"lazy dict\", i.e.\nThe data are loaded in memory when accessing the element.\n\n```python\nimport kaldiio\n\nd = kaldiio.load_scp('a.scp')\nfor key in d:\n    numpy_array = d[key]\n\n\nwith open('a.scp') as fd:\n    kaldiio.load_scp(fd)\n\nd = kaldiio.load_scp('data/train/wav.scp', segments='data/train/segments')\nfor key in d:\n    rate, numpy_array = d[key]\n```\n\nThe object created by `load_scp` is a dict-like object, thus it has methods of `dict`.\n\n```python\nimport kaldiio\nd = kaldiio.load_scp('a.scp')\nd.keys()\nd.items()\nd.values()\n'uttid' in d\nd.get('uttid')\n```\n\n### load_scp_sequential (from v2.13.0)\n\n`load_scp_sequential` creates \"generator\" as same as `load_ark`.\nIf you don't need random-accessing for each elements\nand use it just to iterate for whole data,\nthen this method possibly performs faster than `load_scp`.\n\n```python\nimport kaldiio\nd = kaldiio.load_scp_sequential('a.scp')\nfor key, numpy_array in d:\n    ...\n```\n\n### load_wav_scp\n```python\nd = kaldiio.load_scp('wav.scp')\nfor key in d:\n    rate, numpy_array = d[key]\n\n# Supporting \"segments\"\nd = kaldiio.load_scp('data/train/wav.scp', segments='data/train/segments')\nfor key in d:\n    rate, numpy_array = d[key]\n```\n\n- v2.11.0: `load_wav_scp` is deprecated now. Use `load_scp`.\n\n### load_mat\n```python\nnumpy_array = kaldiio.load_mat('a.mat')\nnumpy_array = kaldiio.load_mat('a.ark:1134')  # Seek and load\n\n# If the file is wav, gets Tuple[int, numpy.ndarray]\nrate, numpy_array = kaldiio.load_mat('a.wav')\n```\n- `load_mat` can load kaldi-matrix, kaldi-vector, and wave\n\n### save_ark\n```python\n\n# === Create ark file from numpy\nkaldiio.save_ark('b.ark', {'key': numpy_array, 'key2': numpy_array2})\n# Create ark with scp _file, too\nkaldiio.save_ark('b.ark', {'key': numpy_array, 'key2': numpy_array2},\n                 scp='b.scp')\n\n# === Writes arrays to sys.stdout\nimport sys\nkaldiio.save_ark(sys.stdout, {'key': numpy_array})\n\n# === Writes arrays for each keys\n# generate a.ark\nkaldiio.save_ark('a.ark', {'key': numpy_array, 'key2': numpy_array2})\n# After here, a.ark is opened with 'a' (append) mode.\nkaldiio.save_ark('a.ark', {'key3': numpy_array3}, append=True)\n\n\n# === Use with open_like_kaldi\nfrom kaldiio import open_like_kaldi\nwith open_like_kaldi('| gzip a.ark.gz', 'w') as f:\n    kaldiio.save_ark(f, {'key': numpy_array})\n    kaldiio.save_ark(f, {'key2': numpy_array2})\n```\n### save_mat\n```python\n# array.ndim must be 1 or 2\nkaldiio.save_mat('a.mat', numpy_array)\n```\n- `save_mat` can save both kaldi-matrix and kaldi-vector\n\n\n### open_like_kaldi\n\n``kaldiio.open_like_kaldi`` is a useful tool if you are familiar with Kaldi. This function can performs as following,\n\n```python\nfrom kaldiio import open_like_kaldi\nwith open_like_kaldi('echo -n hello |', 'r') as f:\n    assert f.read() == 'hello'\nwith open_like_kaldi('| cat > out.txt', 'w') as f:\n    f.write('hello')\nwith open('out.txt', 'r') as f:\n    assert f.read() == 'hello'\n\nimport sys\nwith open_like_kaldi('-', 'r') as f:\n    assert f is sys.stdin\nwith open_like_kaldi('-', 'w') as f:\n    assert f is sys.stdout\n```\n\nFor example, if there are gziped alignment file, then you can load it as:\n\n```python\nfrom kaldiio import open_like_kaldi, load_ark\nwith open_like_kaldi('gunzip -c exp/tri3_ali/ali.*.gz |', 'rb') as f:\n    # Alignment format equals ark of IntVector\n    g = load_ark(f)\n    for k, numpy_array in g:\n        ...\n```\n\n### parse_specifier\n\n```python\nfrom kaldiio import parse_specifier, open_like_kaldi, load_ark\nrspecifier = 'ark:gunzip -c file.ark.gz |'\nspec_dict = parse_specifier(rspecifier)\n# spec_dict = {'ark': 'gunzip -c file.ark.gz |'}\n\nwith open_like_kaldi(spec_dict['ark'], 'rb') as fark:\n    for key, numpy_array in load_ark(fark):\n        ...\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nttcslab-sp/kaldiio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "kaldiio", "package_url": "https://pypi.org/project/kaldiio/", "platform": "", "project_url": "https://pypi.org/project/kaldiio/", "project_urls": {"Homepage": "https://github.com/nttcslab-sp/kaldiio"}, "release_url": "https://pypi.org/project/kaldiio/2.15.1/", "requires_dist": null, "requires_python": "", "summary": "Kaldi-ark loading and writing module", "version": "2.15.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Kaldiio</h1>\n<p><a href=\"https://pypi.python.org/pypi/kaldiio\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80b144113c3f3afc6486e8c2faf750a7a3df0210/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b616c6469696f2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/kaldiio\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/caff62e9db315e9404b01b1a5d7e95b4dbfcecae/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6b616c6469696f2e737667\"></a>\n<a href=\"https://travis-ci.com/nttcslab-sp/kaldiio\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12ae6985b86082a6cf6e634205ab64b82e93026b/68747470733a2f2f7472617669732d63692e636f6d2f6e747463736c61622d73702f6b616c6469696f2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/nttcslab-sp/kaldiio\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/523f8741e0b424cbad4bd53d1d749f2efc7b9fac/68747470733a2f2f636f6465636f762e696f2f67682f6e747463736c61622d73702f6b616c6469696f2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>A pure python module for reading and writing kaldi ark files</p>\n<ul>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a>\n<ul>\n<li><a href=\"#what-is-this-what-are-ark-and-scp\" rel=\"nofollow\">What is this? What are <code>ark</code> and <code>scp</code>?</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#similar-projects\" rel=\"nofollow\">Similar projects</a></li>\n</ul>\n</li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#readhelper\" rel=\"nofollow\">ReadHelper</a></li>\n<li><a href=\"#writehelper\" rel=\"nofollow\">WriteHelper</a></li>\n</ul>\n</li>\n<li><a href=\"#more-low-level-api\" rel=\"nofollow\">More low level API</a></li>\n</ul>\n<h2>Introduction</h2>\n<h3>What are <code>ark</code> and <code>scp</code>?</h3>\n<p><code>kaldiio</code> is an IO utility  implemented in pure Python language for several file formats used in <a href=\"https://github.com/kaldi-asr/kaldi\" rel=\"nofollow\">kaldi</a>, which are named as<code>ark</code> and <code>scp</code>.  <code>ark</code> and <code>scp</code> are used in  in order to archive some objects defined in Kaldi, typically it is Matrix object of Kaldi.</p>\n<p>In this section, we describe the basic concept of <code>ark</code> and <code>scp</code>. More detail about the File-IO in <code>Kaldi-asr</code>: <a href=\"http://kaldi-asr.org/doc/io.html\" rel=\"nofollow\">http://kaldi-asr.org/doc/io.html</a></p>\n<h4>Basic of File IO in kaldi: Ark and copy-feats</h4>\n<p><code>ark</code> is an archive format to save any <code>Kaldi objects</code>. This library mainly support <code>KaldiMatrix/KaldiVector</code>.\nThis ia an example of ark file of KaldiMatrix: <a href=\"tests/arks/test.ark\" rel=\"nofollow\">ark file</a></p>\n<p>If you have <code>Kaldi</code>, you can convert it to text format as following</p>\n<pre><span class=\"c1\"># copy-feats &lt;read-specifier&gt; &lt;write-specifier&gt;</span>\ncopy-feats ark:test.ark ark,t:text.ark\n</pre>\n<p><code>copy-feats</code> is designed to have high affinity with unix command line:</p>\n<ol>\n<li>\n<p><code>ark</code> can be flushed to and from unix pipe.</p>\n<pre><code> cat test.ark | copy-feats ark:- ark,t:- | less # Show the contents in the ark\n</code></pre>\n<p><code>-</code> indicates standard input stream or output stream.</p>\n</li>\n<li>\n<p>Unix command can be used as <code>read-specifier</code> and <code>wspecifier</code></p>\n<pre><code> copy-feats ark:'gunzip -c some.ark.gz |' ark:some.ark\n</code></pre>\n</li>\n</ol>\n<h4>Scp file</h4>\n<p><code>scp</code> is a text file such as,</p>\n<pre><code>uttid1 /some/where/feats.ark:123\nuttid2 /some/where/feats.ark:156\nuttid3 /some/where/feats.ark:245\n</code></pre>\n<p>The first column, <code>uttid1</code>, indicates the utterance id and the second, <code>/some/where/feats.ark:123</code>, is the file path of matrix/vector of kaldi formats.  The number after colon is a starting addressof the object of the file.</p>\n<p><code>scp</code> looks very simple format, but has several powerful features.</p>\n<ol>\n<li>\n<p>Mutual conversion between<code>ark</code> and <code>scp</code></p>\n<pre><code> copy-feats scp:foo.scp ark:foo.ark  # scp -&gt; ark\n copy-feats ark:foo.ark ark,scp:bar.ark,bar.scp  # ark -&gt; ark,scp\n</code></pre>\n</li>\n<li>\n<p>Unix command can be used insead of direct file path</p>\n<p>For example, the following file is equivalent to the first scp.</p>\n<pre><code> uttid1 cat /some/where/feats.ark:123 |\n uttid2 cat /some/where/feats.ark:156 |\n uttid3 cat /some/where/feats.ark:245 |\n</code></pre>\n</li>\n</ol>\n<h4>wav.scp</h4>\n<p><code>wav.scp</code> is a <code>scp</code> to describe wave file paths.</p>\n<pre><code>uttid1 /some/path/a.wav\nuttid2 /some/path/b.wav\nuttid3 /some/path/c.wav\n</code></pre>\n<p><code>wav.scp</code> is also can be embeded unix command as normal scp file. This is often used for converting file format in kaldi recipes.</p>\n<pre><code>uttid1 sph2pipe -f wav /some/path/a.wv1 |\nuttid2 sph2pipe -f wav /some/path/b.wv1 |\nuttid3 sph2pipe -f wav /some/path/c.wv1 |\n</code></pre>\n<h3>Features</h3>\n<p>Kaldiio supports:</p>\n<ul>\n<li>Read/Write for archive formats: ark, scp\n<ul>\n<li>Binary/Text - Float/Double Matrix: DM, FM</li>\n<li>Binary/Text - Float/Double Vector: DV, FV</li>\n<li>Compressed Matrix for loading: CM, CM2, CM3</li>\n<li>Compressed Matrix for writing: All compressoin_method are supported: 1,2,3,4,5,6,7</li>\n<li>Binary/Text for Int-vector, typically used for <code>ali</code> files.</li>\n</ul>\n</li>\n<li>Read/Write via a pipe: e.g. \"ark: cat feats.ark |\"</li>\n<li>Read wav.scp / wav.ark</li>\n</ul>\n<p>The followings are <strong>not supported</strong></p>\n<ul>\n<li>Write in existing scp file</li>\n<li>NNet2/NNet3 egs</li>\n<li>Lattice file</li>\n</ul>\n<h3>Similar projects</h3>\n<ul>\n<li>Python-C++ binding\n<ul>\n<li><a href=\"https://github.com/pykaldi/pykaldi\" rel=\"nofollow\">https://github.com/pykaldi/pykaldi</a>\n<ul>\n<li>Looks great. I recommend pykaldi if you aren't particular about pure python.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/janchorowski/kaldi-python/\" rel=\"nofollow\">https://github.com/janchorowski/kaldi-python/</a>\n<ul>\n<li>Maybe not enough maintained now.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/t13m/kaldi-readers-for-tensorflow\" rel=\"nofollow\">https://github.com/t13m/kaldi-readers-for-tensorflow</a>\n<ul>\n<li>Ark reader for tensorflow</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Pure Python\n<ul>\n<li><a href=\"https://github.com/vesis84/kaldi-io-for-python\" rel=\"nofollow\">https://github.com/vesis84/kaldi-io-for-python</a>\n<ul>\n<li><code>kaldiio</code> is based on this module, but <code>kaldiio</code> supports more features than it.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/funcwj/kaldi-python-io\" rel=\"nofollow\">https://github.com/funcwj/kaldi-python-io</a>\n<ul>\n<li>Python&gt;=3.6. <code>nnet3-egs</code>is also supported.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Install</h2>\n<pre>pip install kaldiio\n</pre>\n<h2>Usage</h2>\n<p><code>kaldiio</code> doesn't distinguish the API for each kaldi-objects, i.e.\n<code>Kaldi-Matrix</code>, <code>Kaldi-Vector</code>, not depending on whether it is binary or text, or compressed or not,\ncan be handled by the same API.</p>\n<h3>ReadHelper</h3>\n<p><code>ReadHelper</code> supports sequential accessing for <code>scp</code> or <code>ark</code>. If you need to access randomly, then use <code>kaldiio.load_scp</code>.</p>\n<ul>\n<li>Read matrix-scp</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">ReadHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">ReadHelper</span><span class=\"p\">(</span><span class=\"s1\">'scp:file.scp'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<ul>\n<li>Read gziped ark</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">ReadHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">ReadHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark: gunzip -c file.ark.gz |'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n\n<span class=\"c1\"># Ali file</span>\n<span class=\"k\">with</span> <span class=\"n\">ReadHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark: gunzip -c exp/tri3_ali/ali.*.gz |'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<ul>\n<li>Read wav.scp</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">ReadHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">ReadHelper</span><span class=\"p\">(</span><span class=\"s1\">'scp:wav.scp'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>\u3000\u3000\u3000\u3000- v2.11.0: Removed <code>wav</code> option. You can load <code>wav.scp</code> without any addtional argument.</p>\n<ul>\n<li>Read wav.scp with segments</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">ReadHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">ReadHelper</span><span class=\"p\">(</span><span class=\"s1\">'scp:wav.scp'</span><span class=\"p\">,</span> <span class=\"n\">segments</span><span class=\"o\">=</span><span class=\"s1\">'segments'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<ul>\n<li>Read from stdin</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">ReadHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">ReadHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark:-'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<h3>WriteHelper</h3>\n<ul>\n<li>Write matrices and vectors in a ark with scp</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">WriteHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">WriteHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark,scp:file.ark,file.scp'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n        <span class=\"c1\"># The following is equivalent</span>\n        <span class=\"c1\"># writer[str(i)] = numpy.random.randn(10, 10)</span>\n</pre>\n<ul>\n<li>Write in compressed matrix</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">WriteHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">WriteHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark:file.ark'</span><span class=\"p\">,</span> <span class=\"n\">compression_method</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Write matrices in text</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">WriteHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">WriteHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark,t:file.ark'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Write in gziped ark</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">WriteHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">WriteHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark:| gzip -c &gt; file.ark.gz'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Write matrice to stdout</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">WriteHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">WriteHelper</span><span class=\"p\">(</span><span class=\"s1\">'ark:-'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n<h2>More low level API</h2>\n<p><code>WriteHelper</code> and <code>ReadHelper</code> are high level wrapper of the following API to support kaldi style arguments.</p>\n<h3>load_ark</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kaldiio</span>\n\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_ark</span><span class=\"p\">(</span><span class=\"s1\">'a.ark'</span><span class=\"p\">)</span>  <span class=\"c1\"># d is a generator object</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># === load_ark can accepts file descriptor, too</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'a.ark'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_ark</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n<span class=\"c1\"># === Use with open_like_kaldi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">open_like_kaldi</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'gunzip -c file.ark.gz |'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_ark</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<ul>\n<li><code>load_ark</code> can load both matrices of ark and vectors of ark and also, it can be both text and binary.</li>\n</ul>\n<h3>load_scp</h3>\n<p><code>load_scp</code> creates \"lazy dict\", i.e.\nThe data are loaded in memory when accessing the element.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kaldiio</span>\n\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp</span><span class=\"p\">(</span><span class=\"s1\">'a.scp'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n    <span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'a.scp'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp</span><span class=\"p\">(</span><span class=\"s1\">'data/train/wav.scp'</span><span class=\"p\">,</span> <span class=\"n\">segments</span><span class=\"o\">=</span><span class=\"s1\">'data/train/segments'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n    <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n</pre>\n<p>The object created by <code>load_scp</code> is a dict-like object, thus it has methods of <code>dict</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kaldiio</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp</span><span class=\"p\">(</span><span class=\"s1\">'a.scp'</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"s1\">'uttid'</span> <span class=\"ow\">in</span> <span class=\"n\">d</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'uttid'</span><span class=\"p\">)</span>\n</pre>\n<h3>load_scp_sequential (from v2.13.0)</h3>\n<p><code>load_scp_sequential</code> creates \"generator\" as same as <code>load_ark</code>.\nIf you don't need random-accessing for each elements\nand use it just to iterate for whole data,\nthen this method possibly performs faster than <code>load_scp</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kaldiio</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp_sequential</span><span class=\"p\">(</span><span class=\"s1\">'a.scp'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>load_wav_scp</h3>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp</span><span class=\"p\">(</span><span class=\"s1\">'wav.scp'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n    <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Supporting \"segments\"</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_scp</span><span class=\"p\">(</span><span class=\"s1\">'data/train/wav.scp'</span><span class=\"p\">,</span> <span class=\"n\">segments</span><span class=\"o\">=</span><span class=\"s1\">'data/train/segments'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n    <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>v2.11.0: <code>load_wav_scp</code> is deprecated now. Use <code>load_scp</code>.</li>\n</ul>\n<h3>load_mat</h3>\n<pre><span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_mat</span><span class=\"p\">(</span><span class=\"s1\">'a.mat'</span><span class=\"p\">)</span>\n<span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_mat</span><span class=\"p\">(</span><span class=\"s1\">'a.ark:1134'</span><span class=\"p\">)</span>  <span class=\"c1\"># Seek and load</span>\n\n<span class=\"c1\"># If the file is wav, gets Tuple[int, numpy.ndarray]</span>\n<span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">load_mat</span><span class=\"p\">(</span><span class=\"s1\">'a.wav'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>load_mat</code> can load kaldi-matrix, kaldi-vector, and wave</li>\n</ul>\n<h3>save_ark</h3>\n<pre><span class=\"c1\"># === Create ark file from numpy</span>\n<span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"s1\">'b.ark'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array2</span><span class=\"p\">})</span>\n<span class=\"c1\"># Create ark with scp _file, too</span>\n<span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"s1\">'b.ark'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array2</span><span class=\"p\">},</span>\n                 <span class=\"n\">scp</span><span class=\"o\">=</span><span class=\"s1\">'b.scp'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># === Writes arrays to sys.stdout</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># === Writes arrays for each keys</span>\n<span class=\"c1\"># generate a.ark</span>\n<span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"s1\">'a.ark'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array2</span><span class=\"p\">})</span>\n<span class=\"c1\"># After here, a.ark is opened with 'a' (append) mode.</span>\n<span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"s1\">'a.ark'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array3</span><span class=\"p\">},</span> <span class=\"n\">append</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># === Use with open_like_kaldi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">open_like_kaldi</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'| gzip a.ark.gz'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array</span><span class=\"p\">})</span>\n    <span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_ark</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"n\">numpy_array2</span><span class=\"p\">})</span>\n</pre>\n<h3>save_mat</h3>\n<pre><span class=\"c1\"># array.ndim must be 1 or 2</span>\n<span class=\"n\">kaldiio</span><span class=\"o\">.</span><span class=\"n\">save_mat</span><span class=\"p\">(</span><span class=\"s1\">'a.mat'</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>save_mat</code> can save both kaldi-matrix and kaldi-vector</li>\n</ul>\n<h3>open_like_kaldi</h3>\n<p><code>kaldiio.open_like_kaldi</code> is a useful tool if you are familiar with Kaldi. This function can performs as following,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">open_like_kaldi</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'echo -n hello |'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'hello'</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'| cat &gt; out.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'out.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'hello'</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span> <span class=\"ow\">is</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span> <span class=\"ow\">is</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span>\n</pre>\n<p>For example, if there are gziped alignment file, then you can load it as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">,</span> <span class=\"n\">load_ark</span>\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"s1\">'gunzip -c exp/tri3_ali/ali.*.gz |'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Alignment format equals ark of IntVector</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">load_ark</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">g</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<h3>parse_specifier</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kaldiio</span> <span class=\"kn\">import</span> <span class=\"n\">parse_specifier</span><span class=\"p\">,</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">,</span> <span class=\"n\">load_ark</span>\n<span class=\"n\">rspecifier</span> <span class=\"o\">=</span> <span class=\"s1\">'ark:gunzip -c file.ark.gz |'</span>\n<span class=\"n\">spec_dict</span> <span class=\"o\">=</span> <span class=\"n\">parse_specifier</span><span class=\"p\">(</span><span class=\"n\">rspecifier</span><span class=\"p\">)</span>\n<span class=\"c1\"># spec_dict = {'ark': 'gunzip -c file.ark.gz |'}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">open_like_kaldi</span><span class=\"p\">(</span><span class=\"n\">spec_dict</span><span class=\"p\">[</span><span class=\"s1\">'ark'</span><span class=\"p\">],</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fark</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">numpy_array</span> <span class=\"ow\">in</span> <span class=\"n\">load_ark</span><span class=\"p\">(</span><span class=\"n\">fark</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n\n          </div>"}, "last_serial": 6270046, "releases": {"2.13.2": [{"comment_text": "", "digests": {"md5": "8000209be8f7dc743d5e7ea13806e05d", "sha256": "36dce8d837cd2b705c6900e6085bdb5e2bfe32ee31acf592aa414d216adab7c1"}, "downloads": -1, "filename": "kaldiio-2.13.2.tar.gz", "has_sig": false, "md5_digest": "8000209be8f7dc743d5e7ea13806e05d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17072, "upload_time": "2019-02-19T02:25:52", "upload_time_iso_8601": "2019-02-19T02:25:52.337712Z", "url": "https://files.pythonhosted.org/packages/25/bd/e41fb569658637eada532d60025dae1fb2d4ac04c94a45160de750d51fd9/kaldiio-2.13.2.tar.gz", "yanked": false}], "2.13.3": [{"comment_text": "", "digests": {"md5": "10265c93b76976920c100bafd122c604", "sha256": "759b2b07544b42812c02400a7b6636dbbc5b7793dfb75e9922a469b01f61f6cd"}, "downloads": -1, "filename": "kaldiio-2.13.3.tar.gz", "has_sig": false, "md5_digest": "10265c93b76976920c100bafd122c604", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17375, "upload_time": "2019-02-20T06:58:33", "upload_time_iso_8601": "2019-02-20T06:58:33.365469Z", "url": "https://files.pythonhosted.org/packages/3e/44/b5838fc3c8ed18cb444a6b9b429233320a0f9a483747c16b88b33ac3fe94/kaldiio-2.13.3.tar.gz", "yanked": false}], "2.13.4": [{"comment_text": "", "digests": {"md5": "b8915a72c03bd323ba7d81af5634702f", "sha256": "2f02ae36a107cf785be808944dd287b2b694d31f9a787f763d5df623b7d54400"}, "downloads": -1, "filename": "kaldiio-2.13.4.tar.gz", "has_sig": false, "md5_digest": "b8915a72c03bd323ba7d81af5634702f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17350, "upload_time": "2019-03-01T06:58:46", "upload_time_iso_8601": "2019-03-01T06:58:46.465610Z", "url": "https://files.pythonhosted.org/packages/8f/6f/ea3d0855fe032cbc334a82102263e0648c8788923b3241282014efbd747c/kaldiio-2.13.4.tar.gz", "yanked": false}], "2.13.6": [{"comment_text": "", "digests": {"md5": "ed01d3ddad5c0f9c54dd5c76e3384327", "sha256": "8f6a92dbf922e81f51a29fec4c71e63cbba539a904a0d8c0e34fad20648180f2"}, "downloads": -1, "filename": "kaldiio-2.13.6.tar.gz", "has_sig": false, "md5_digest": "ed01d3ddad5c0f9c54dd5c76e3384327", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19564, "upload_time": "2019-05-27T05:26:50", "upload_time_iso_8601": "2019-05-27T05:26:50.078899Z", "url": "https://files.pythonhosted.org/packages/5c/6f/cf387e530789acbab8ed778a39a3d77cd329e09b1459b72962f6163a2a6c/kaldiio-2.13.6.tar.gz", "yanked": false}], "2.13.7": [{"comment_text": "", "digests": {"md5": "01251c9aa61c06209262a23d9342db8c", "sha256": "953285028d271e0d58b74388e54e7e630ccb6fbf940a0d1cd3085f56f63788ec"}, "downloads": -1, "filename": "kaldiio-2.13.7.tar.gz", "has_sig": false, "md5_digest": "01251c9aa61c06209262a23d9342db8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23349, "upload_time": "2019-06-06T02:01:07", "upload_time_iso_8601": "2019-06-06T02:01:07.198078Z", "url": "https://files.pythonhosted.org/packages/08/fb/2445c7dfa3dc187024d27a8a5f8b966b84f9acf13e2f9c02efc1244c24ff/kaldiio-2.13.7.tar.gz", "yanked": false}], "2.13.8": [{"comment_text": "", "digests": {"md5": "8cb3cce8d3b2c7698903075806e4c59b", "sha256": "f8982789ba9822be10f38222bdef5f35b799e4d2a5444a9b715158db0f94d7a8"}, "downloads": -1, "filename": "kaldiio-2.13.8.tar.gz", "has_sig": false, "md5_digest": "8cb3cce8d3b2c7698903075806e4c59b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23389, "upload_time": "2019-06-28T07:27:13", "upload_time_iso_8601": "2019-06-28T07:27:13.350834Z", "url": "https://files.pythonhosted.org/packages/f0/a1/43648f5ed6ef7748494589080273f128eeab8fe123f053efd67f4c1ded0b/kaldiio-2.13.8.tar.gz", "yanked": false}], "2.13.9": [{"comment_text": "", "digests": {"md5": "6e46291683cb83eea5648209476035c5", "sha256": "a32fea87889cc02a62a2193aff5d8dec7c9b36b1d20f9c92ea84b172ae82323e"}, "downloads": -1, "filename": "kaldiio-2.13.9.tar.gz", "has_sig": false, "md5_digest": "6e46291683cb83eea5648209476035c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20806, "upload_time": "2019-08-20T09:53:16", "upload_time_iso_8601": "2019-08-20T09:53:16.554315Z", "url": "https://files.pythonhosted.org/packages/ca/49/5e588a1fb98f115afc717b2f1fc282972e8b2bee215504f5a49fe9e27967/kaldiio-2.13.9.tar.gz", "yanked": false}], "2.14.0": [{"comment_text": "", "digests": {"md5": "82fd044031bb9c9e4927ff427b17adcf", "sha256": "58031b5d9594861053ca716480beb7022e96d09b55394741b85693a257a40cf6"}, "downloads": -1, "filename": "kaldiio-2.14.0.tar.gz", "has_sig": false, "md5_digest": "82fd044031bb9c9e4927ff427b17adcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21064, "upload_time": "2019-10-29T09:15:03", "upload_time_iso_8601": "2019-10-29T09:15:03.076050Z", "url": "https://files.pythonhosted.org/packages/8a/1d/f8e0affb4df95232f9de9dedb36de87344e2ceccdbbe6f25ed1df3e8aa23/kaldiio-2.14.0.tar.gz", "yanked": false}], "2.14.1": [{"comment_text": "", "digests": {"md5": "0cc49afac9c13f32879f32509b70cac6", "sha256": "9bc27f0b403a80438354e2ab114825fd01f460e82fe8597ad9889a9cec768fed"}, "downloads": -1, "filename": "kaldiio-2.14.1.tar.gz", "has_sig": false, "md5_digest": "0cc49afac9c13f32879f32509b70cac6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21205, "upload_time": "2019-10-31T07:30:00", "upload_time_iso_8601": "2019-10-31T07:30:00.228183Z", "url": "https://files.pythonhosted.org/packages/1f/c8/d135543a4374be86c7652d6761674ab17cb3e5f125391d2dcb84eb2c90ff/kaldiio-2.14.1.tar.gz", "yanked": false}], "2.15.0": [{"comment_text": "", "digests": {"md5": "ea3c4a212f0681b884c48a169362cf2f", "sha256": "b897214dbbba201f851867483f22c550cc096382fafbf519c2174e7ac01c2964"}, "downloads": -1, "filename": "kaldiio-2.15.0.tar.gz", "has_sig": false, "md5_digest": "ea3c4a212f0681b884c48a169362cf2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21207, "upload_time": "2019-11-27T11:45:23", "upload_time_iso_8601": "2019-11-27T11:45:23.360711Z", "url": "https://files.pythonhosted.org/packages/10/32/618615df07a7f0a1608ca09e637ba8d26ea3d997bcb7c1eebc09a028a6de/kaldiio-2.15.0.tar.gz", "yanked": false}], "2.15.1": [{"comment_text": "", "digests": {"md5": "ae669574d9095b271eb32a41e17233a1", "sha256": "52cf75062acd5497b3e5815a6dc82d94c206537133a8e6a13f7749ccd5c5553c"}, "downloads": -1, "filename": "kaldiio-2.15.1.tar.gz", "has_sig": false, "md5_digest": "ae669574d9095b271eb32a41e17233a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21226, "upload_time": "2019-12-10T00:27:22", "upload_time_iso_8601": "2019-12-10T00:27:22.535436Z", "url": "https://files.pythonhosted.org/packages/b7/fd/0415c4d37b7a6b4d0f09fbfb4c507cd949f0817851309aa977e3c384923a/kaldiio-2.15.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae669574d9095b271eb32a41e17233a1", "sha256": "52cf75062acd5497b3e5815a6dc82d94c206537133a8e6a13f7749ccd5c5553c"}, "downloads": -1, "filename": "kaldiio-2.15.1.tar.gz", "has_sig": false, "md5_digest": "ae669574d9095b271eb32a41e17233a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21226, "upload_time": "2019-12-10T00:27:22", "upload_time_iso_8601": "2019-12-10T00:27:22.535436Z", "url": "https://files.pythonhosted.org/packages/b7/fd/0415c4d37b7a6b4d0f09fbfb4c507cd949f0817851309aa977e3c384923a/kaldiio-2.15.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:45 2020"}