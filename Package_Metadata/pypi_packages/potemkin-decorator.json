{"info": {"author": "Eric Kascic", "author_email": "eric.kascic@stelligent.com", "bugtrack_url": null, "classifiers": [], "description": "The potemkin decorator facilitates \"integration testing\" boto code by creating AWS resources \nusing Cloudformation or Terraform. This provides a convenient way to setup initial conditions\ninstead of having to develop boto code that is likely as complex as the \"code under test\".\n\n## Basic Usage\n\n### CloudFormation\n\nHere is an example CloudFormation invocation from pytest:\n```\nimport potemkin\nimport boto3\n\n\n@potemkin.CloudFormationStack(\n  'test/integration/test_templates/aes256_bucket.yml',\n  stack_name_stem='TestStack',\n  parameters={'BucketName': 'unclefreddie33388'},\n  aws_profile='myprofile',\n  teardown=False\n)\ndef test_bucket_has_aes256_encryption(stack_outputs, stack_name):\n  full_bucket_name = stack_outputs['BucketNameOut']\n\n  s3 = boto3.Session(profile_name='myprofile').client('s3')\n  get_bucket_encryption_response = s3.get_bucket_encryption(\n    Bucket=full_bucket_name\n  )\n\n  assert get_bucket_encryption_response['ServerSideEncryptionConfiguration']['Rules'][0]['ApplyServerSideEncryptionByDefault']['SSEAlgorithm'] == 'AES256'\n``` \n\nThe CloudFormationStack creates the stack and binds the outputs to stack_outputs.  The pytest method\ncould invoke more boto code to manipulate the resources created by the decorator.  In this case,\nthe test just asserts that the initial condition is what is expected.\n\nThis is basically a python/pytest port of \"aws-int-test-rspec-helper\" that worked with Ruby/RSpec:\n* https://github.com/stelligent/aws-int-test-rspec-helper/\n\n### Terraform\nHere is an example Terraform invocation from pytest:\n```\nimport potemkin\nimport boto3\n\n\n@potemkin.TerraformResources(\n  'test/integration/test_templates/terraform',\n  parameters={'BucketName': 'unclefreddie33388'},\n  aws_profile='myprofile',\n  teardown=False\n)\ndef test_bucket_has_aes256_encryption(tf_outputs):\n  full_bucket_name = tf_outputs['BucketNameOut']\n\n  s3 = boto3.Session(profile_name='myprofile').client('s3')\n  get_bucket_encryption_response = s3.get_bucket_encryption(\n    Bucket=full_bucket_name\n  )\n\n  assert get_bucket_encryption_response['ServerSideEncryptionConfiguration']['Rules'][0]['ApplyServerSideEncryptionByDefault']['SSEAlgorithm'] == 'AES256'\n``` \n\nTerraformResources creates the resources and binds the outputs to tf_outputs.  The pytest method\ncould invoke more boto code to manipulate the resources created by the decorator.  In this case,\nthe test just asserts that the initial condition is what is expected.\n\n\n## Service Specific Usage\n\nThe potemkin decorator has additional functions for interacting with specific AWS services \n\n### AWS Config\nAWS Config initiates evaluations when a resource is created, but the evaluations are completed\nasynchronously. They can take several minutes to complete. The AWS config functions wait until \nthe config rule has an evaluation for the resource, then returns the evaluation.\n\n### config_rule_wait_for_compliance_results\nThis function polls aws config until all resource_ids have evaluations. It then checks those evaluations\nagainst expected results and returns a truthy value. This can be used by both configuration\nchange events and periodic events (by setting evaluate=True)\n\n\n```\n@potemkin.CloudFormationStack('test/integration/test_templates/eip.yml',\n                              stack_name_stem='EipTestStack')\ndef test_wait_for_compliance_results(stack_outputs, stack_name):\n    global expected_results\n    configservice = boto3.Session().client('config')\n\n    expected_results_success = {\n        stack_outputs['EIPOutput']: \"NON_COMPLIANT\",\n        stack_outputs['EIP2Output']: \"NON_COMPLIANT\"\n    }\n\n    assert config_rule_wait_for_compliance_results(\n        configservice,\n        rule_name='eip-attached',\n        expected_results=expected_results_success)\n```\n\n### config_rule_wait_for_absent_resources\nThis function is a companion to config_rule_wait_for_compliance_results and is used to validate that\nonce resources are deleted they are removed from AWS config. \n\n```\ndef test_wait_for_compliance_results_success_results():\n    configservice = boto3.Session().client('config')\n    resource_ids = list(expected_results.keys())\n\n    assert [] == config_rule_wait_for_absent_resources(\n        configservice, rule_name='eip-attached', resource_ids=resource_ids)\n```\n\n#### config_rule_wait_for_resource\nThis function polls aws config until there is an evaluation for the resource, then returns it. Use this \nfunction for config rules with a configuration change trigger. If you are checking more than one \nresource, consider using config_rule_wait_for_compliance_results.\n\n```\nimport potemkin\nimport boto3\n\n\n@potemkin.CloudFormationStack(\n  'test/integration/test_templates/aes256_bucket.yml',\n  stack_name_stem='TestStack',\n  parameters={'BucketName': 'unclefreddie33388'}\n)\ndef test_bucket_encryption_rule(stack_outputs, stack_name):\n  configservice = boto3.Session().client('config')\n\n  results = config_rule_wait_for_resource(configservice, \n                                          resource_id='unclefreddie33388', \n                                          rule_name='config-rule-s3-encryption')\n\n  assert results['ComplianceType'] == 'NON_COMPLIANT'\n``` \n\n\n#### evaluate_config_rule_and_wait_for_resource\nThis is similar to config_rule_wait_for_resource but it first initiates a config evaluation. Use this \nfor config rules with a periodic trigger. If you are checking more than one \nresource, consider using config_rule_wait_for_compliance_results.\n\n```\nimport potemkin\nimport boto3\n\n\n@potemkin.CloudFormationStack(\n  'test/integration/test_templates/aes256_bucket.yml',\n  stack_name_stem='TestStack',\n  parameters={'BucketName': 'unclefreddie33388'}\n)\ndef test_bucket_encryption_rule(stack_outputs, stack_name):\n  configservice = boto3.Session().client('config')\n\n  results = evaluate_config_rule_and_wait_for_resource(configservice, \n                                                      resource_id='unclefreddie33388', \n                                                      rule_name='config-rule-s3-encryption')\n\n  assert results['ComplianceType'] == 'NON_COMPLIANT'\n``` \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stelligent/potemkin-decorator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "potemkin-decorator", "package_url": "https://pypi.org/project/potemkin-decorator/", "platform": "", "project_url": "https://pypi.org/project/potemkin-decorator/", "project_urls": {"Homepage": "https://github.com/stelligent/potemkin-decorator"}, "release_url": "https://pypi.org/project/potemkin-decorator/0.0.12/", "requires_dist": ["boto3 (==1.12.26)"], "requires_python": ">=3.6", "summary": "Decorator to help for AWS/boto integration testing in pytest", "version": "0.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The potemkin decorator facilitates \"integration testing\" boto code by creating AWS resources\nusing Cloudformation or Terraform. This provides a convenient way to setup initial conditions\ninstead of having to develop boto code that is likely as complex as the \"code under test\".</p>\n<h2>Basic Usage</h2>\n<h3>CloudFormation</h3>\n<p>Here is an example CloudFormation invocation from pytest:</p>\n<pre><code>import potemkin\nimport boto3\n\n\n@potemkin.CloudFormationStack(\n  'test/integration/test_templates/aes256_bucket.yml',\n  stack_name_stem='TestStack',\n  parameters={'BucketName': 'unclefreddie33388'},\n  aws_profile='myprofile',\n  teardown=False\n)\ndef test_bucket_has_aes256_encryption(stack_outputs, stack_name):\n  full_bucket_name = stack_outputs['BucketNameOut']\n\n  s3 = boto3.Session(profile_name='myprofile').client('s3')\n  get_bucket_encryption_response = s3.get_bucket_encryption(\n    Bucket=full_bucket_name\n  )\n\n  assert get_bucket_encryption_response['ServerSideEncryptionConfiguration']['Rules'][0]['ApplyServerSideEncryptionByDefault']['SSEAlgorithm'] == 'AES256'\n</code></pre>\n<p>The CloudFormationStack creates the stack and binds the outputs to stack_outputs.  The pytest method\ncould invoke more boto code to manipulate the resources created by the decorator.  In this case,\nthe test just asserts that the initial condition is what is expected.</p>\n<p>This is basically a python/pytest port of \"aws-int-test-rspec-helper\" that worked with Ruby/RSpec:</p>\n<ul>\n<li><a href=\"https://github.com/stelligent/aws-int-test-rspec-helper/\" rel=\"nofollow\">https://github.com/stelligent/aws-int-test-rspec-helper/</a></li>\n</ul>\n<h3>Terraform</h3>\n<p>Here is an example Terraform invocation from pytest:</p>\n<pre><code>import potemkin\nimport boto3\n\n\n@potemkin.TerraformResources(\n  'test/integration/test_templates/terraform',\n  parameters={'BucketName': 'unclefreddie33388'},\n  aws_profile='myprofile',\n  teardown=False\n)\ndef test_bucket_has_aes256_encryption(tf_outputs):\n  full_bucket_name = tf_outputs['BucketNameOut']\n\n  s3 = boto3.Session(profile_name='myprofile').client('s3')\n  get_bucket_encryption_response = s3.get_bucket_encryption(\n    Bucket=full_bucket_name\n  )\n\n  assert get_bucket_encryption_response['ServerSideEncryptionConfiguration']['Rules'][0]['ApplyServerSideEncryptionByDefault']['SSEAlgorithm'] == 'AES256'\n</code></pre>\n<p>TerraformResources creates the resources and binds the outputs to tf_outputs.  The pytest method\ncould invoke more boto code to manipulate the resources created by the decorator.  In this case,\nthe test just asserts that the initial condition is what is expected.</p>\n<h2>Service Specific Usage</h2>\n<p>The potemkin decorator has additional functions for interacting with specific AWS services</p>\n<h3>AWS Config</h3>\n<p>AWS Config initiates evaluations when a resource is created, but the evaluations are completed\nasynchronously. They can take several minutes to complete. The AWS config functions wait until\nthe config rule has an evaluation for the resource, then returns the evaluation.</p>\n<h3>config_rule_wait_for_compliance_results</h3>\n<p>This function polls aws config until all resource_ids have evaluations. It then checks those evaluations\nagainst expected results and returns a truthy value. This can be used by both configuration\nchange events and periodic events (by setting evaluate=True)</p>\n<pre><code>@potemkin.CloudFormationStack('test/integration/test_templates/eip.yml',\n                              stack_name_stem='EipTestStack')\ndef test_wait_for_compliance_results(stack_outputs, stack_name):\n    global expected_results\n    configservice = boto3.Session().client('config')\n\n    expected_results_success = {\n        stack_outputs['EIPOutput']: \"NON_COMPLIANT\",\n        stack_outputs['EIP2Output']: \"NON_COMPLIANT\"\n    }\n\n    assert config_rule_wait_for_compliance_results(\n        configservice,\n        rule_name='eip-attached',\n        expected_results=expected_results_success)\n</code></pre>\n<h3>config_rule_wait_for_absent_resources</h3>\n<p>This function is a companion to config_rule_wait_for_compliance_results and is used to validate that\nonce resources are deleted they are removed from AWS config.</p>\n<pre><code>def test_wait_for_compliance_results_success_results():\n    configservice = boto3.Session().client('config')\n    resource_ids = list(expected_results.keys())\n\n    assert [] == config_rule_wait_for_absent_resources(\n        configservice, rule_name='eip-attached', resource_ids=resource_ids)\n</code></pre>\n<h4>config_rule_wait_for_resource</h4>\n<p>This function polls aws config until there is an evaluation for the resource, then returns it. Use this\nfunction for config rules with a configuration change trigger. If you are checking more than one\nresource, consider using config_rule_wait_for_compliance_results.</p>\n<pre><code>import potemkin\nimport boto3\n\n\n@potemkin.CloudFormationStack(\n  'test/integration/test_templates/aes256_bucket.yml',\n  stack_name_stem='TestStack',\n  parameters={'BucketName': 'unclefreddie33388'}\n)\ndef test_bucket_encryption_rule(stack_outputs, stack_name):\n  configservice = boto3.Session().client('config')\n\n  results = config_rule_wait_for_resource(configservice, \n                                          resource_id='unclefreddie33388', \n                                          rule_name='config-rule-s3-encryption')\n\n  assert results['ComplianceType'] == 'NON_COMPLIANT'\n</code></pre>\n<h4>evaluate_config_rule_and_wait_for_resource</h4>\n<p>This is similar to config_rule_wait_for_resource but it first initiates a config evaluation. Use this\nfor config rules with a periodic trigger. If you are checking more than one\nresource, consider using config_rule_wait_for_compliance_results.</p>\n<pre><code>import potemkin\nimport boto3\n\n\n@potemkin.CloudFormationStack(\n  'test/integration/test_templates/aes256_bucket.yml',\n  stack_name_stem='TestStack',\n  parameters={'BucketName': 'unclefreddie33388'}\n)\ndef test_bucket_encryption_rule(stack_outputs, stack_name):\n  configservice = boto3.Session().client('config')\n\n  results = evaluate_config_rule_and_wait_for_resource(configservice, \n                                                      resource_id='unclefreddie33388', \n                                                      rule_name='config-rule-s3-encryption')\n\n  assert results['ComplianceType'] == 'NON_COMPLIANT'\n</code></pre>\n\n          </div>"}, "last_serial": 7166876, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "3b26fcfc5c90621cd7d147c539e121ea", "sha256": "0779fea3d9c3d2d714df9ad49a9de0658f746fcdfd1ee6421c2c98d4cb34dd62"}, "downloads": -1, "filename": "potemkin_decorator-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "3b26fcfc5c90621cd7d147c539e121ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10249, "upload_time": "2020-04-27T14:06:54", "upload_time_iso_8601": "2020-04-27T14:06:54.419716Z", "url": "https://files.pythonhosted.org/packages/0a/13/6335c0aa67b66db1ce5fdcf880debcc841b3baa1e0bd34e364a6d686e768/potemkin_decorator-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49cc609212d2a3d1b1cb3bb9b93d4a96", "sha256": "66618e593be641b8c704354f0b1321ecbbbf38d7172553e53f74084e7fd8af7f"}, "downloads": -1, "filename": "potemkin-decorator-0.0.10.tar.gz", "has_sig": false, "md5_digest": "49cc609212d2a3d1b1cb3bb9b93d4a96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8423, "upload_time": "2020-04-27T14:06:55", "upload_time_iso_8601": "2020-04-27T14:06:55.711036Z", "url": "https://files.pythonhosted.org/packages/c2/9a/4cf358a12161d22aa4c8cddaa3f9b0211f212547d60cb311c4c79ee565d2/potemkin-decorator-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "9fa027a136245490f96829f671ceb369", "sha256": "2ef8ca153af4912a49e3f6fb1e67365bca761c7fdf03209a830864a9745127b7"}, "downloads": -1, "filename": "potemkin_decorator-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "9fa027a136245490f96829f671ceb369", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12338, "upload_time": "2020-04-28T18:28:11", "upload_time_iso_8601": "2020-04-28T18:28:11.602179Z", "url": "https://files.pythonhosted.org/packages/23/12/255c2e518ff5edd34841693b8040cbbbf6201c508c56a5ccee09a5970908/potemkin_decorator-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f74e16b0f8b00d05e7f5ae7b672d880", "sha256": "391df30c00918dc5cd2db3ac43ab2428cc93bdf3ace18d3ac0825e0c2f5c3f35"}, "downloads": -1, "filename": "potemkin-decorator-0.0.11.tar.gz", "has_sig": false, "md5_digest": "5f74e16b0f8b00d05e7f5ae7b672d880", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9511, "upload_time": "2020-04-28T18:28:12", "upload_time_iso_8601": "2020-04-28T18:28:12.895626Z", "url": "https://files.pythonhosted.org/packages/fd/a9/830669b473038f8861dcf2f83eaaf0e1d6e61b150a66a4a4773d7aacc1c7/potemkin-decorator-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "56eefbb307c8b92db3dfd2721fa98d1f", "sha256": "163e157d3b0400724134e1df99360d7b63b2bb386ef630f377cda9e3375d54a3"}, "downloads": -1, "filename": "potemkin_decorator-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "56eefbb307c8b92db3dfd2721fa98d1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10602, "upload_time": "2020-05-04T19:51:25", "upload_time_iso_8601": "2020-05-04T19:51:25.088205Z", "url": "https://files.pythonhosted.org/packages/7b/e8/a35effaa6f3bfa7c0126d6632f2c4214ea7025ab042735310e2e9b825f1d/potemkin_decorator-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dcf4742abde4287410f267e5554d150", "sha256": "6594cf8aebfc21719467d0a74cca8e5eb09e23db23ed1588bf709f1199fcd0c0"}, "downloads": -1, "filename": "potemkin-decorator-0.0.12.tar.gz", "has_sig": false, "md5_digest": "4dcf4742abde4287410f267e5554d150", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9320, "upload_time": "2020-05-04T19:51:26", "upload_time_iso_8601": "2020-05-04T19:51:26.441734Z", "url": "https://files.pythonhosted.org/packages/34/e3/5730e8aef2cf4459de52cc5e9ca015cffecc6f07c27203b5bd11f725a525/potemkin-decorator-0.0.12.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b2e4575ab739b58431236156b4d6d3ac", "sha256": "29dc26848f6f074ff9bdbcb4a714fed5b69ab192f7bfe7ab0ed68ab219f5d290"}, "downloads": -1, "filename": "potemkin_decorator-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b2e4575ab739b58431236156b4d6d3ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4752, "upload_time": "2020-03-23T20:48:50", "upload_time_iso_8601": "2020-03-23T20:48:50.225186Z", "url": "https://files.pythonhosted.org/packages/fa/50/faa79fba59fcf6f87d9d5e78a810e2265aba382cd6f79fe16b51a4c172f5/potemkin_decorator-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fa6b7f609a9e007a1e49b12cc63749a", "sha256": "6b51a5e7343edcf363ac64bcf5f05ecdc0dd1029b8acb963303c6034b5675d2d"}, "downloads": -1, "filename": "potemkin-decorator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5fa6b7f609a9e007a1e49b12cc63749a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3334, "upload_time": "2020-03-23T20:48:51", "upload_time_iso_8601": "2020-03-23T20:48:51.164795Z", "url": "https://files.pythonhosted.org/packages/8c/d4/80c068c78d1f02448e87d08b84aba2fc34a5663da40d4463ff191112b821/potemkin-decorator-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "35644b911d10db65d1e056dd5c75d6a2", "sha256": "b70247252ae6498650ac3b9fea079500b97eb0293f119db0771bdd539887ecbd"}, "downloads": -1, "filename": "potemkin_decorator-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "35644b911d10db65d1e056dd5c75d6a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4757, "upload_time": "2020-03-23T21:56:03", "upload_time_iso_8601": "2020-03-23T21:56:03.045246Z", "url": "https://files.pythonhosted.org/packages/1f/2e/4163ea964532d6686f1b90d555d6aa7fe7aff436ddfd9b29cf55d8739fb5/potemkin_decorator-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3881abf7d6a8a1cb3a422e3682894483", "sha256": "2160567ddbf94069721fa949b5fa5b1d048e74ca77cff91414eef3ae29765640"}, "downloads": -1, "filename": "potemkin-decorator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3881abf7d6a8a1cb3a422e3682894483", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3346, "upload_time": "2020-03-23T21:56:04", "upload_time_iso_8601": "2020-03-23T21:56:04.422692Z", "url": "https://files.pythonhosted.org/packages/d4/2a/4f6d56deb7fc207194c09f029a9b8017009a446f27bb3d699a2cf542d2bb/potemkin-decorator-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "62b408e1a677aaf95026a7338022dfaa", "sha256": "6854cad0314499b42a983f276481b5b1ac6a2a7426c1b7786f66b71836e2814b"}, "downloads": -1, "filename": "potemkin_decorator-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "62b408e1a677aaf95026a7338022dfaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6034, "upload_time": "2020-03-24T17:39:42", "upload_time_iso_8601": "2020-03-24T17:39:42.534691Z", "url": "https://files.pythonhosted.org/packages/17/ba/6bd928cf9d0ba0dac2ff4fe77dd23b0f4a7eef412952157825fd5c90f6ed/potemkin_decorator-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23409576b5b9db28fb758d104a366cce", "sha256": "de71579ada7c58eec8c045c1c2f214821ba39e01f95a5fa41861ac487e3ae8d7"}, "downloads": -1, "filename": "potemkin-decorator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "23409576b5b9db28fb758d104a366cce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4338, "upload_time": "2020-03-24T17:39:43", "upload_time_iso_8601": "2020-03-24T17:39:43.422785Z", "url": "https://files.pythonhosted.org/packages/42/ce/054c38d0676eafe45b30c850a433aeb014c6ae6ab768af0ebeeedb8b8c8c/potemkin-decorator-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "2dd10ddd4a2f2affb5068500ef8c4c5a", "sha256": "82e68674f39495960f86bc67f0440cdcd39d57e2417ea790dfac2fbade75c3a8"}, "downloads": -1, "filename": "potemkin_decorator-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2dd10ddd4a2f2affb5068500ef8c4c5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6032, "upload_time": "2020-03-30T17:17:17", "upload_time_iso_8601": "2020-03-30T17:17:17.975580Z", "url": "https://files.pythonhosted.org/packages/d5/0f/fc3a1b55aab7ff885dbc2fe427e630ecb5e4956fd559522037488dd7daa3/potemkin_decorator-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "218ae77a8bc731aa37eb1c3c13ee24a3", "sha256": "fb63cebbba8785f1223ea866b59b85f24a65d8d8cc368af2b93430c69151312c"}, "downloads": -1, "filename": "potemkin-decorator-0.0.5.tar.gz", "has_sig": false, "md5_digest": "218ae77a8bc731aa37eb1c3c13ee24a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4327, "upload_time": "2020-03-30T17:17:19", "upload_time_iso_8601": "2020-03-30T17:17:19.347313Z", "url": "https://files.pythonhosted.org/packages/9a/da/9da491d53ce2f985d0b4d4816028860680359f12c509311596a7885fbe42/potemkin-decorator-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "8f3cd9242d742545126c72b9d8593c4d", "sha256": "2cb3ee6f6d973f11b73056ffee1ba178a8d41d4c2373066c917711cb78edf080"}, "downloads": -1, "filename": "potemkin_decorator-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8f3cd9242d742545126c72b9d8593c4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6873, "upload_time": "2020-03-30T17:59:26", "upload_time_iso_8601": "2020-03-30T17:59:26.256287Z", "url": "https://files.pythonhosted.org/packages/55/04/e0558982feff7698e501c7d4d915fb33ccf2159a1421abf90d2bf243a1aa/potemkin_decorator-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "883bb6f639c7e76af55a3070490a8ebe", "sha256": "02b6b2b515e2e4b47e308d95b2c3e0fd46a8f42241ca8d4978abd7af8235ba01"}, "downloads": -1, "filename": "potemkin-decorator-0.0.6.tar.gz", "has_sig": false, "md5_digest": "883bb6f639c7e76af55a3070490a8ebe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5061, "upload_time": "2020-03-30T17:59:27", "upload_time_iso_8601": "2020-03-30T17:59:27.805666Z", "url": "https://files.pythonhosted.org/packages/54/9e/68182755d2a03ae373229be597b955ea906f08a40065318a6760f8c1351d/potemkin-decorator-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "fe46a0c25e280d08e6811b54e16fbc88", "sha256": "8ddac2d66e43a6e45944476664b37a4ae4479bf36f461a48ba492690f3df37d5"}, "downloads": -1, "filename": "potemkin_decorator-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "fe46a0c25e280d08e6811b54e16fbc88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8098, "upload_time": "2020-04-07T22:15:09", "upload_time_iso_8601": "2020-04-07T22:15:09.053122Z", "url": "https://files.pythonhosted.org/packages/02/3e/7fea5c08b0f845aa610c84d9a0f3ec6cbeb52d1b59ec2780c1e78e2e9102/potemkin_decorator-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dee9ea7790354028ef51121eb3f70f3", "sha256": "29994b580ba387274cef6779c31d038cd31170b6d033829eaece2c3d76f03c71"}, "downloads": -1, "filename": "potemkin-decorator-0.0.7.tar.gz", "has_sig": false, "md5_digest": "7dee9ea7790354028ef51121eb3f70f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6363, "upload_time": "2020-04-07T22:15:09", "upload_time_iso_8601": "2020-04-07T22:15:09.988235Z", "url": "https://files.pythonhosted.org/packages/82/1f/57be30cd21c259382a51f78d2c1ef3c10084662a9aada3b4721c308fc681/potemkin-decorator-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "1fda1ba413a6f2348e1527ec57cf3a2a", "sha256": "966ffb7e8ff0c463095c09a07161fe83674cb56b601bed2891c0b839f5552f06"}, "downloads": -1, "filename": "potemkin_decorator-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "1fda1ba413a6f2348e1527ec57cf3a2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9927, "upload_time": "2020-04-17T04:06:03", "upload_time_iso_8601": "2020-04-17T04:06:03.785535Z", "url": "https://files.pythonhosted.org/packages/2c/75/5b088d37ea0601bd5713979bf1bdc07192c331790bb1eae6b73c71270ec7/potemkin_decorator-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "395c92e698f4788743eda826c57cfadd", "sha256": "c0fe63e9e3b63255abb229864066916b21ad96c3ca6458f52de18cc4c2dc41a3"}, "downloads": -1, "filename": "potemkin-decorator-0.0.8.tar.gz", "has_sig": false, "md5_digest": "395c92e698f4788743eda826c57cfadd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8259, "upload_time": "2020-04-17T04:06:04", "upload_time_iso_8601": "2020-04-17T04:06:04.879165Z", "url": "https://files.pythonhosted.org/packages/49/0a/1727049e6ec14eaf14b257ee4577cc62b5eff4412a54c7bd7e1b503d2c91/potemkin-decorator-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "45bf17b6b2d203b46a4c51443d9bfda0", "sha256": "6da279f38f0e969bd785c4842cafaa18cab46aa948eef4e511f3ec381a7ca85c"}, "downloads": -1, "filename": "potemkin_decorator-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "45bf17b6b2d203b46a4c51443d9bfda0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10118, "upload_time": "2020-04-21T04:17:34", "upload_time_iso_8601": "2020-04-21T04:17:34.643227Z", "url": "https://files.pythonhosted.org/packages/8c/16/725e16e971b46c4dc0d82e4b19d7ba7d9d46e134942dee33b7142b9102e7/potemkin_decorator-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b17178b1d75d2af85d85425de2e938e", "sha256": "4a024646edeea0e80e8b2686498ca5ab098803d4ef727f6848c916174efbdf42"}, "downloads": -1, "filename": "potemkin-decorator-0.0.9.tar.gz", "has_sig": false, "md5_digest": "4b17178b1d75d2af85d85425de2e938e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8308, "upload_time": "2020-04-21T04:17:36", "upload_time_iso_8601": "2020-04-21T04:17:36.264450Z", "url": "https://files.pythonhosted.org/packages/64/4a/fc2dd3765024dee68c68435ea2c542d700fa03a455053a3a196fcd3ff5fa/potemkin-decorator-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56eefbb307c8b92db3dfd2721fa98d1f", "sha256": "163e157d3b0400724134e1df99360d7b63b2bb386ef630f377cda9e3375d54a3"}, "downloads": -1, "filename": "potemkin_decorator-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "56eefbb307c8b92db3dfd2721fa98d1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10602, "upload_time": "2020-05-04T19:51:25", "upload_time_iso_8601": "2020-05-04T19:51:25.088205Z", "url": "https://files.pythonhosted.org/packages/7b/e8/a35effaa6f3bfa7c0126d6632f2c4214ea7025ab042735310e2e9b825f1d/potemkin_decorator-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dcf4742abde4287410f267e5554d150", "sha256": "6594cf8aebfc21719467d0a74cca8e5eb09e23db23ed1588bf709f1199fcd0c0"}, "downloads": -1, "filename": "potemkin-decorator-0.0.12.tar.gz", "has_sig": false, "md5_digest": "4dcf4742abde4287410f267e5554d150", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9320, "upload_time": "2020-05-04T19:51:26", "upload_time_iso_8601": "2020-05-04T19:51:26.441734Z", "url": "https://files.pythonhosted.org/packages/34/e3/5730e8aef2cf4459de52cc5e9ca015cffecc6f07c27203b5bd11f725a525/potemkin-decorator-0.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:50 2020"}