{"info": {"author": "Dainis Gorbunovs", "author_email": "dgdev@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# FreeTrade API\nThis is an attempt to make an unofficial Python package for [FreeTrade](https://freetrade.io).\nThere is no official API released, yet. FreeTrade is a zero-fee UK-regulated stockbroker.\n\n## What is supported\n* Find list of `tradable securities` with information on the asset class, market, currency, country.\n* Create a list of tickers for `Trading View`'s watch list. \n* `Historical prices`\n* Logging into Freetrade account and saving the session into `ft-session.json` file.\n\n## Install\nInstall through `pip` package manger:\n```bash\npip install freetrade\n```\n\nAlternatively, for developing this package:\n```bash\nconda create -n myenv python=3.7\nconda activate myenv\npip install -r requirements.txt\n```\n\n## Prerequisites\nBefore running this, it is necessary to set the API keys. Edit `ft-keys.json` to include the necessary API keys. \nThese keys can be found using a tool, which can extract StringCare secrets, e.g. [DeStringCare](https://github.com/DainisGorbunovs/DeStringCare).\n\n## API\n### Creating `ft` FreeTrade object\n#### Without authentication\n```python\nfrom freetrade import FreeTrade\n\nft = FreeTrade()\n```\nThe only thing which will work is `Index` class, i.e. getting the list of supported stock tickers.\n\n#### With authentication\n```python\nfrom freetrade import FreeTrade\n\nemail = '...'  # Email to use for the login\nft = FreeTrade(email)\n```\n\nBy default when creating the object, it will try to load an older authenticated session from `ft-session.json` file.\nOtherwise it logs in again, and requests a one time password (OTP), which is sent to the email.\n\nThe code parses OTP from the standard user input. Alternatively specify `otp_parser` parameter in `FreeTrade` object\n to a function which can fetch the email and parse the OTP itself.\n\n### `Index` - no authentication needed\n#### Ticker history\nAssuming `ft` object is created, here is how one month of historical price for a stock.\n```python\nprices = ft.index.get_ticker_history('TSLA', 'XNAS')\n\nfor history_date, price in prices.items():\n    print(f'{history_date}: ${price:.2f}')\n```\n\n#### Get assets\n```python\nassets = ft.index.get_assets()\n```\n\nReturns a dictionary of different categories, which have subcategories.\nThese subcategories contain a list of stock assets.\n* `currency`\n  * `GBP` / `USD`: list of assets\n* `exchange`\n  * `XLON` / `XNYS` / `XNAS`: list of assets\n* `asset_class`\n  * `ETF` / `EQUITY` / `ADR`: list of assets\n* `country_of_incorporation`\n  * `IE` / `GB` / `US` / `KY` / ... : list of assets\n* `all`: list of assets\n\nSample asset for an ETF `LSE:ERNU`:\n```json\n{\n    \"asset_class\": \"ETF\",\n    \"symbol\": \"ERNU\",\n    \"isin\": \"IE00BCRY6227\",\n    \"exchange\": \"XLON\",\n    \"currency\": \"GBP\",\n    \"country_of_incorporation\": \"IE\",\n    \"long_title\": \"iShares $ Ultrashort Bond UCITS ETF (Dist.)\",\n    \"short_title\": \"$ Ultrashort\",\n    \"subtitle\": \"Very short maturity $ debt\",\n    \"logo_4x\": \"//a.storyblok.com/f/41481/640x640/7ec0a292de/ishares-symbol-4x.png\",\n    \"isa_eligible\": true,\n    \"coming_soon\": false,\n    \"required_version\": \"1.0\",\n    \"objectID\": \"IE00BCRY6227\",\n    ...\n}\n```\n\n#### Get tickers\n```python\ntickers = ft.index.get_tickers()\n```\n\nReturns a dictionary, where:\n* key is an exchange symbol FreeTrade uses, and\n* value is a list of ticker symbols \n\n```python\ntickers = {\n    'XLON': ['ERNU', 'III', '3IN', ...],\n    'XNYS': ['MMM', 'ABBV', 'BABA', ...],\n    'XNAS': ['ATVI', 'ADBE', 'AMD', 'GOOGL', 'AMZN', ...]\n}\n```\n\n#### Get list of tickers for Trading View watch list\n```python\ntickers_union = ft.index.get_tradingview_tickers(join_exchanges=True)\n```\n\nReturns a string formatted for importing into Trading View watch list.\n\nWith `join_exchanges = True`:\n```python\ntickers_union = 'LSE:ERNU,LSE:III,LSE:3IN,LSE:ABF,LSE:ACA,LSE:ADM,...'\n```\n\nDefault (when `join_exchanges = False`):\n```python\ntickers_union = {\n    'XLON': 'LSE:ERNU,LSE:III,LSE:3IN,LSE:ABF,LSE:ACA,LSE:ADM,...',\n    'XNYS': 'NYSE:MMM,NYSE:ABBV,NYSE:BABA,NYSE:AXP,NYSE:APA,NYSE:T,...',\n    'XNAS': 'NASDAQ:ATVI,NASDAQ:ADBE,NASDAQ:AMD,NASDAQ:GOOGL,NASDAQ:AMZN,...'\n}\n```\n\n### `API` - requires authentication\n#### Finding the address for a post code\n```python\npostcode = 'E15JL'\naddress = ft.api.get_address_by_postcode(postcode)\n```\n\nReturns a list of addresses, e.g. sample address:\n```json\n[{\n    \"summaryline\": \"Freetrade, 68-80 Hanbury Street, London, Greater London, E1 5JL\",\n    \"organisation\": \"Freetrade\",\n    \"number\": \"68-80\",\n    \"premise\": \"68-80\",\n    \"street\": \"Hanbury Street\",\n    \"posttown\": \"London\",\n    \"county\": \"Greater London\",\n    \"postcode\": \"E1 5JL\"\n}]\n```\n\n#### Verifying bank number\n```python\nbank = ft.api.validate_bank('308012', '15887060')\n```\n\nReturns a lot of information on the account number, e.g. sample values:\n```json\n{\n    \"result\": \"VALID\",\n    \"sortcode\": \"308012\",\n    \"bicbank\": \"LOYDGB21\",\n    \"bankname\": \"CITY OFFICE (308012)\",\n    \"owningbank\": \"LLOYDS BANK PLC\",\n    \"chapssrbicbank\": \"LOYDGB2L\",\n    \"chapssrbicbr\": \"XXX\",\n    ...\n}\n```\n\n### Get price history\n```python\ntesla = ft.api.get_ticker_history('TSLA', 'XNAS', duration='1m')\nnational_grid = ft.api.get_ticker_history('NG.', 'XLON', duration='1m')\n```\n\nThe possible duration values, where `1m` is default: \n* `5y`, `2y`, `1y`, `ytd`, `6m`, `3m`, `1m`, `1d`\n\nReturns an `OrderedDict` of data points `(date, adjusted closing price)` sorted by date in ascending order.\n\nSample output:\n```python\ntesla = OrderedDict([\n    ('2019-04-04', 267.78),\n    ('2019-04-05', 274.96),\n    ('2019-04-08', 273.2),\n    ('2019-04-09', 272.31),\n    ('2019-04-10', 276.06),\n    ...\n])\n``` \n\nNotes:\n* use `Quandl` for UK securities;\n* uses `IEXTrading` for other securities.\n\n### `DataStore` - requires authentication\n#### Download or update historical prices\n```python\nft.datastore.update_historical_prices()\n```\n\nSaves the adjusted historical closing prices for the assets into `history` directory. If it does not exist, it is created.\n\nThe file name is the ticker's symbol, and each the prices are saved in ascending order.\n\nSample in `history/TSLA.csv`:\n```csv\n2014-05-05,216.61\n2014-05-06,207.28\n2014-05-07,201.35\n2014-05-08,178.59\n2014-05-09,182.26\n2014-05-12,184.67\n2014-05-13,190.16\n...\n```\n\n#### Load the historical data as `pd.DataFrame`\nThis function loads the historical data from `history` directory.\n\nNote that some assets have missing prices as they were not traded during that day, thus they show up as `nan`.\n\n```python\ndf = ft.datastore.load_historical_data_as_dataframe()\nprint(df.head(), df.shape)\n```\n\n\nSample output:\n```text\n               CSCO          SVT  ...          WTB          NXT\nDate                              ...                          \n2014-05-05  19.5875  1486.452691  ...  3650.414898  5184.507159\n2014-05-06  19.3870  1489.696450  ...  3659.383977  5137.446580\n2014-05-07  19.5150  1509.159006  ...  3645.033451  5094.307715\n2014-05-08  19.6413  1510.780885  ...  3677.322133  5082.542570\n2014-05-09  19.6430  1512.402765  ...  3676.425226  5070.777425\n\n[5 rows x 341 columns] (1305, 341)\n```\n\n## Anything else?\n* Feel free to make a `GitHub issue`, if you find any issues or have enhancement ideas.\n\n* `Pull requests` are welcome, if you have made improvements to this code.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DainisGorbunovs/freetrade", "keywords": "Freetrade,API,stock", "license": "", "maintainer": "", "maintainer_email": "", "name": "freetrade", "package_url": "https://pypi.org/project/freetrade/", "platform": "", "project_url": "https://pypi.org/project/freetrade/", "project_urls": {"Homepage": "https://github.com/DainisGorbunovs/freetrade"}, "release_url": "https://pypi.org/project/freetrade/0.0.6/", "requires_dist": ["requests", "pandas", "PyJWT", "python-dateutil"], "requires_python": "", "summary": "API for Freetrade app", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FreeTrade API</h1>\n<p>This is an attempt to make an unofficial Python package for <a href=\"https://freetrade.io\" rel=\"nofollow\">FreeTrade</a>.\nThere is no official API released, yet. FreeTrade is a zero-fee UK-regulated stockbroker.</p>\n<h2>What is supported</h2>\n<ul>\n<li>Find list of <code>tradable securities</code> with information on the asset class, market, currency, country.</li>\n<li>Create a list of tickers for <code>Trading View</code>'s watch list.</li>\n<li><code>Historical prices</code></li>\n<li>Logging into Freetrade account and saving the session into <code>ft-session.json</code> file.</li>\n</ul>\n<h2>Install</h2>\n<p>Install through <code>pip</code> package manger:</p>\n<pre>pip install freetrade\n</pre>\n<p>Alternatively, for developing this package:</p>\n<pre>conda create -n myenv <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.7\nconda activate myenv\npip install -r requirements.txt\n</pre>\n<h2>Prerequisites</h2>\n<p>Before running this, it is necessary to set the API keys. Edit <code>ft-keys.json</code> to include the necessary API keys.\nThese keys can be found using a tool, which can extract StringCare secrets, e.g. <a href=\"https://github.com/DainisGorbunovs/DeStringCare\" rel=\"nofollow\">DeStringCare</a>.</p>\n<h2>API</h2>\n<h3>Creating <code>ft</code> FreeTrade object</h3>\n<h4>Without authentication</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">freetrade</span> <span class=\"kn\">import</span> <span class=\"n\">FreeTrade</span>\n\n<span class=\"n\">ft</span> <span class=\"o\">=</span> <span class=\"n\">FreeTrade</span><span class=\"p\">()</span>\n</pre>\n<p>The only thing which will work is <code>Index</code> class, i.e. getting the list of supported stock tickers.</p>\n<h4>With authentication</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">freetrade</span> <span class=\"kn\">import</span> <span class=\"n\">FreeTrade</span>\n\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>  <span class=\"c1\"># Email to use for the login</span>\n<span class=\"n\">ft</span> <span class=\"o\">=</span> <span class=\"n\">FreeTrade</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n</pre>\n<p>By default when creating the object, it will try to load an older authenticated session from <code>ft-session.json</code> file.\nOtherwise it logs in again, and requests a one time password (OTP), which is sent to the email.</p>\n<p>The code parses OTP from the standard user input. Alternatively specify <code>otp_parser</code> parameter in <code>FreeTrade</code> object\nto a function which can fetch the email and parse the OTP itself.</p>\n<h3><code>Index</code> - no authentication needed</h3>\n<h4>Ticker history</h4>\n<p>Assuming <code>ft</code> object is created, here is how one month of historical price for a stock.</p>\n<pre><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">get_ticker_history</span><span class=\"p\">(</span><span class=\"s1\">'TSLA'</span><span class=\"p\">,</span> <span class=\"s1\">'XNAS'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">history_date</span><span class=\"p\">,</span> <span class=\"n\">price</span> <span class=\"ow\">in</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">history_date</span><span class=\"si\">}</span><span class=\"s1\">: $</span><span class=\"si\">{</span><span class=\"n\">price</span><span class=\"si\">:</span><span class=\"s1\">.2f</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h4>Get assets</h4>\n<pre><span class=\"n\">assets</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">get_assets</span><span class=\"p\">()</span>\n</pre>\n<p>Returns a dictionary of different categories, which have subcategories.\nThese subcategories contain a list of stock assets.</p>\n<ul>\n<li><code>currency</code>\n<ul>\n<li><code>GBP</code> / <code>USD</code>: list of assets</li>\n</ul>\n</li>\n<li><code>exchange</code>\n<ul>\n<li><code>XLON</code> / <code>XNYS</code> / <code>XNAS</code>: list of assets</li>\n</ul>\n</li>\n<li><code>asset_class</code>\n<ul>\n<li><code>ETF</code> / <code>EQUITY</code> / <code>ADR</code>: list of assets</li>\n</ul>\n</li>\n<li><code>country_of_incorporation</code>\n<ul>\n<li><code>IE</code> / <code>GB</code> / <code>US</code> / <code>KY</code> / ... : list of assets</li>\n</ul>\n</li>\n<li><code>all</code>: list of assets</li>\n</ul>\n<p>Sample asset for an ETF <code>LSE:ERNU</code>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"asset_class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ETF\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"symbol\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ERNU\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"isin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"IE00BCRY6227\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"exchange\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XLON\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"GBP\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"country_of_incorporation\"</span><span class=\"p\">:</span> <span class=\"s2\">\"IE\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"long_title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"iShares $ Ultrashort Bond UCITS ETF (Dist.)\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"short_title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$ Ultrashort\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"subtitle\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Very short maturity $ debt\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"logo_4x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"//a.storyblok.com/f/41481/640x640/7ec0a292de/ishares-symbol-4x.png\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"isa_eligible\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"coming_soon\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"required_version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"objectID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"IE00BCRY6227\"</span><span class=\"p\">,</span>\n    <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Get tickers</h4>\n<pre><span class=\"n\">tickers</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">get_tickers</span><span class=\"p\">()</span>\n</pre>\n<p>Returns a dictionary, where:</p>\n<ul>\n<li>key is an exchange symbol FreeTrade uses, and</li>\n<li>value is a list of ticker symbols</li>\n</ul>\n<pre><span class=\"n\">tickers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'XLON'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'ERNU'</span><span class=\"p\">,</span> <span class=\"s1\">'III'</span><span class=\"p\">,</span> <span class=\"s1\">'3IN'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'XNYS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'MMM'</span><span class=\"p\">,</span> <span class=\"s1\">'ABBV'</span><span class=\"p\">,</span> <span class=\"s1\">'BABA'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'XNAS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'ATVI'</span><span class=\"p\">,</span> <span class=\"s1\">'ADBE'</span><span class=\"p\">,</span> <span class=\"s1\">'AMD'</span><span class=\"p\">,</span> <span class=\"s1\">'GOOGL'</span><span class=\"p\">,</span> <span class=\"s1\">'AMZN'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Get list of tickers for Trading View watch list</h4>\n<pre><span class=\"n\">tickers_union</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">get_tradingview_tickers</span><span class=\"p\">(</span><span class=\"n\">join_exchanges</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Returns a string formatted for importing into Trading View watch list.</p>\n<p>With <code>join_exchanges = True</code>:</p>\n<pre><span class=\"n\">tickers_union</span> <span class=\"o\">=</span> <span class=\"s1\">'LSE:ERNU,LSE:III,LSE:3IN,LSE:ABF,LSE:ACA,LSE:ADM,...'</span>\n</pre>\n<p>Default (when <code>join_exchanges = False</code>):</p>\n<pre><span class=\"n\">tickers_union</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'XLON'</span><span class=\"p\">:</span> <span class=\"s1\">'LSE:ERNU,LSE:III,LSE:3IN,LSE:ABF,LSE:ACA,LSE:ADM,...'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'XNYS'</span><span class=\"p\">:</span> <span class=\"s1\">'NYSE:MMM,NYSE:ABBV,NYSE:BABA,NYSE:AXP,NYSE:APA,NYSE:T,...'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'XNAS'</span><span class=\"p\">:</span> <span class=\"s1\">'NASDAQ:ATVI,NASDAQ:ADBE,NASDAQ:AMD,NASDAQ:GOOGL,NASDAQ:AMZN,...'</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>API</code> - requires authentication</h3>\n<h4>Finding the address for a post code</h4>\n<pre><span class=\"n\">postcode</span> <span class=\"o\">=</span> <span class=\"s1\">'E15JL'</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_address_by_postcode</span><span class=\"p\">(</span><span class=\"n\">postcode</span><span class=\"p\">)</span>\n</pre>\n<p>Returns a list of addresses, e.g. sample address:</p>\n<pre><span class=\"p\">[{</span>\n    <span class=\"nt\">\"summaryline\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Freetrade, 68-80 Hanbury Street, London, Greater London, E1 5JL\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"organisation\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Freetrade\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"68-80\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"premise\"</span><span class=\"p\">:</span> <span class=\"s2\">\"68-80\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"street\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hanbury Street\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"posttown\"</span><span class=\"p\">:</span> <span class=\"s2\">\"London\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"county\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Greater London\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"postcode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"E1 5JL\"</span>\n<span class=\"p\">}]</span>\n</pre>\n<h4>Verifying bank number</h4>\n<pre><span class=\"n\">bank</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">validate_bank</span><span class=\"p\">(</span><span class=\"s1\">'308012'</span><span class=\"p\">,</span> <span class=\"s1\">'15887060'</span><span class=\"p\">)</span>\n</pre>\n<p>Returns a lot of information on the account number, e.g. sample values:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"result\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VALID\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"sortcode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"308012\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"bicbank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LOYDGB21\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"bankname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CITY OFFICE (308012)\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"owningbank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LLOYDS BANK PLC\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"chapssrbicbank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LOYDGB2L\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"chapssrbicbr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXX\"</span><span class=\"p\">,</span>\n    <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Get price history</h3>\n<pre><span class=\"n\">tesla</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_ticker_history</span><span class=\"p\">(</span><span class=\"s1\">'TSLA'</span><span class=\"p\">,</span> <span class=\"s1\">'XNAS'</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"s1\">'1m'</span><span class=\"p\">)</span>\n<span class=\"n\">national_grid</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_ticker_history</span><span class=\"p\">(</span><span class=\"s1\">'NG.'</span><span class=\"p\">,</span> <span class=\"s1\">'XLON'</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"s1\">'1m'</span><span class=\"p\">)</span>\n</pre>\n<p>The possible duration values, where <code>1m</code> is default:</p>\n<ul>\n<li><code>5y</code>, <code>2y</code>, <code>1y</code>, <code>ytd</code>, <code>6m</code>, <code>3m</code>, <code>1m</code>, <code>1d</code></li>\n</ul>\n<p>Returns an <code>OrderedDict</code> of data points <code>(date, adjusted closing price)</code> sorted by date in ascending order.</p>\n<p>Sample output:</p>\n<pre><span class=\"n\">tesla</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2019-04-04'</span><span class=\"p\">,</span> <span class=\"mf\">267.78</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2019-04-05'</span><span class=\"p\">,</span> <span class=\"mf\">274.96</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2019-04-08'</span><span class=\"p\">,</span> <span class=\"mf\">273.2</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2019-04-09'</span><span class=\"p\">,</span> <span class=\"mf\">272.31</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'2019-04-10'</span><span class=\"p\">,</span> <span class=\"mf\">276.06</span><span class=\"p\">),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">])</span>\n</pre>\n<p>Notes:</p>\n<ul>\n<li>use <code>Quandl</code> for UK securities;</li>\n<li>uses <code>IEXTrading</code> for other securities.</li>\n</ul>\n<h3><code>DataStore</code> - requires authentication</h3>\n<h4>Download or update historical prices</h4>\n<pre><span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">update_historical_prices</span><span class=\"p\">()</span>\n</pre>\n<p>Saves the adjusted historical closing prices for the assets into <code>history</code> directory. If it does not exist, it is created.</p>\n<p>The file name is the ticker's symbol, and each the prices are saved in ascending order.</p>\n<p>Sample in <code>history/TSLA.csv</code>:</p>\n<pre>2014-05-05,216.61\n2014-05-06,207.28\n2014-05-07,201.35\n2014-05-08,178.59\n2014-05-09,182.26\n2014-05-12,184.67\n2014-05-13,190.16\n...\n</pre>\n<h4>Load the historical data as <code>pd.DataFrame</code></h4>\n<p>This function loads the historical data from <code>history</code> directory.</p>\n<p>Note that some assets have missing prices as they were not traded during that day, thus they show up as <code>nan</code>.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">load_historical_data_as_dataframe</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(),</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre>\n<p>Sample output:</p>\n<pre>               CSCO          SVT  ...          WTB          NXT\nDate                              ...                          \n2014-05-05  19.5875  1486.452691  ...  3650.414898  5184.507159\n2014-05-06  19.3870  1489.696450  ...  3659.383977  5137.446580\n2014-05-07  19.5150  1509.159006  ...  3645.033451  5094.307715\n2014-05-08  19.6413  1510.780885  ...  3677.322133  5082.542570\n2014-05-09  19.6430  1512.402765  ...  3676.425226  5070.777425\n\n[5 rows x 341 columns] (1305, 341)\n</pre>\n<h2>Anything else?</h2>\n<ul>\n<li>\n<p>Feel free to make a <code>GitHub issue</code>, if you find any issues or have enhancement ideas.</p>\n</li>\n<li>\n<p><code>Pull requests</code> are welcome, if you have made improvements to this code.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5616125, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "6666207a57d834c69e50a6df1f949b4b", "sha256": "d763faacff96483d5e2681520568d84edbd7fcefcc0ae210036b95ae949daf3a"}, "downloads": -1, "filename": "freetrade-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6666207a57d834c69e50a6df1f949b4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5225, "upload_time": "2019-04-29T00:25:52", "upload_time_iso_8601": "2019-04-29T00:25:52.158783Z", "url": "https://files.pythonhosted.org/packages/a2/db/72fc5b54ed0222e82c097fdced4798360d176cefcbf0e545ae3cdae4cabc/freetrade-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "658958662864217ad261611b9c1a401b", "sha256": "10381ebdf43b6bcb94befd210c03f1c8b260e2b28a8b4f3ad0b99e5577ddfc42"}, "downloads": -1, "filename": "freetrade-0.0.2.tar.gz", "has_sig": false, "md5_digest": "658958662864217ad261611b9c1a401b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4355, "upload_time": "2019-04-29T00:25:56", "upload_time_iso_8601": "2019-04-29T00:25:56.238867Z", "url": "https://files.pythonhosted.org/packages/3c/a6/3d52b0fce1566ed96e7816099c09b2bc32b250a46cbb30a0c6158d349392/freetrade-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "36f682cf6843021584eadc5249902f56", "sha256": "8d966ef07d2fe70636aea6d6e625b34141afb4b22383aee3a1a9197f7f183c48"}, "downloads": -1, "filename": "freetrade-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "36f682cf6843021584eadc5249902f56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6642, "upload_time": "2019-05-04T17:17:18", "upload_time_iso_8601": "2019-05-04T17:17:18.902931Z", "url": "https://files.pythonhosted.org/packages/48/85/ac25569f4b61eb823c89729f698c65da5265f77089575e346e0de8eac65e/freetrade-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb0cda9517fea58c8286fa20ce917752", "sha256": "ad2d960080566e9bbfc0ff6167669c915e7f0765620c66ae95680e666ecc90c3"}, "downloads": -1, "filename": "freetrade-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cb0cda9517fea58c8286fa20ce917752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5755, "upload_time": "2019-05-04T17:17:20", "upload_time_iso_8601": "2019-05-04T17:17:20.700710Z", "url": "https://files.pythonhosted.org/packages/05/f3/e0c156fabc5192d6eb477a64c5fc5e5e3aa1c300946d2fcac20a8c050a34/freetrade-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "9a62e7f039122e4d2a62fe168383bfd0", "sha256": "f3c245a9c5141b3e4f71eae27b914088d625c1e6ebec9ed7023901f3467d1af2"}, "downloads": -1, "filename": "freetrade-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9a62e7f039122e4d2a62fe168383bfd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7262, "upload_time": "2019-05-04T21:58:38", "upload_time_iso_8601": "2019-05-04T21:58:38.836369Z", "url": "https://files.pythonhosted.org/packages/9d/83/70a51a4617a737b142caa1bdbd4d6ccfcbb7cd04b5ec310eb4cf1bf9c88b/freetrade-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e330c908df3c78bf2c64ae1c7c606bbd", "sha256": "35e9e45f3e246ac30ee32b79b9b64bf2a85e8922cb6b4c157ebcbd17264691d4"}, "downloads": -1, "filename": "freetrade-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e330c908df3c78bf2c64ae1c7c606bbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6510, "upload_time": "2019-05-04T21:58:40", "upload_time_iso_8601": "2019-05-04T21:58:40.447175Z", "url": "https://files.pythonhosted.org/packages/b7/bc/405032a9ef85e6210e4de259b675d5cf250e4e43654c334cafbeb06f0c23/freetrade-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "712a4269dd332b8832dd138c3ce8aebc", "sha256": "043cadb833ceb1b761a0301825e7cf9bd910e8493a4281d42617929b26e6f30e"}, "downloads": -1, "filename": "freetrade-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "712a4269dd332b8832dd138c3ce8aebc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10722, "upload_time": "2019-07-05T00:40:21", "upload_time_iso_8601": "2019-07-05T00:40:21.752117Z", "url": "https://files.pythonhosted.org/packages/0a/1b/15d70b8939e284e384ebe245cbfaa3fadfbef7685105f0843920a76b0d63/freetrade-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d438d526f4f56806991393d5fb0fe68", "sha256": "0f768f877c8be6f368693991b918a0f61f849aaa1884e3a36eb6b304eedfe27e"}, "downloads": -1, "filename": "freetrade-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5d438d526f4f56806991393d5fb0fe68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9643, "upload_time": "2019-07-05T00:40:24", "upload_time_iso_8601": "2019-07-05T00:40:24.227912Z", "url": "https://files.pythonhosted.org/packages/bf/09/21ecd6bd595a9db2556a52b812f234862083b447d21be510cb448feafe29/freetrade-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "213205a758b3411d020c70bf444f21d7", "sha256": "022bd9ebb5090478330eb5c410dd59910d5084b59122ae71e432dac128fedeaf"}, "downloads": -1, "filename": "freetrade-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "213205a758b3411d020c70bf444f21d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12831, "upload_time": "2019-08-01T00:19:51", "upload_time_iso_8601": "2019-08-01T00:19:51.448322Z", "url": "https://files.pythonhosted.org/packages/23/b2/455d3933e71ed13eadcc40372f176439afcbbbe185363ae926ca02082df6/freetrade-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5820b1f654246b2ce022f3ce8f17c570", "sha256": "ed65f0b9ac025d1f449fa565f5336fee21796f6732ad9f7a0b05c3c828fcba8a"}, "downloads": -1, "filename": "freetrade-0.0.6.tar.gz", "has_sig": false, "md5_digest": "5820b1f654246b2ce022f3ce8f17c570", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13420, "upload_time": "2019-08-01T00:19:53", "upload_time_iso_8601": "2019-08-01T00:19:53.501332Z", "url": "https://files.pythonhosted.org/packages/dc/26/6b2790e1714b6303712da8536d0c3200332f93d051e889dc9537e15173d9/freetrade-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "213205a758b3411d020c70bf444f21d7", "sha256": "022bd9ebb5090478330eb5c410dd59910d5084b59122ae71e432dac128fedeaf"}, "downloads": -1, "filename": "freetrade-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "213205a758b3411d020c70bf444f21d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12831, "upload_time": "2019-08-01T00:19:51", "upload_time_iso_8601": "2019-08-01T00:19:51.448322Z", "url": "https://files.pythonhosted.org/packages/23/b2/455d3933e71ed13eadcc40372f176439afcbbbe185363ae926ca02082df6/freetrade-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5820b1f654246b2ce022f3ce8f17c570", "sha256": "ed65f0b9ac025d1f449fa565f5336fee21796f6732ad9f7a0b05c3c828fcba8a"}, "downloads": -1, "filename": "freetrade-0.0.6.tar.gz", "has_sig": false, "md5_digest": "5820b1f654246b2ce022f3ce8f17c570", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13420, "upload_time": "2019-08-01T00:19:53", "upload_time_iso_8601": "2019-08-01T00:19:53.501332Z", "url": "https://files.pythonhosted.org/packages/dc/26/6b2790e1714b6303712da8536d0c3200332f93d051e889dc9537e15173d9/freetrade-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:27 2020"}