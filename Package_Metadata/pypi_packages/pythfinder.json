{"info": {"author": "Matthew Hale", "author_email": "matthew.hale@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Pythfinder\n\nA repository for an in-development Pathfinder 1e python app. The goal \nis to be able to keep track of multiple characters, and provide \nfunctionality such as rolling for attacks/skills, computing bonuses, \netc.\n\nNOTE: this is _very_ WIP, and is mostly for personal use at this time. \nIt's got lots of rough edges.\n\n## Requirements\n\n+ python\n+ a character sheet in JSON format\n\nTo get a character sheet, you can either copy the template in \ndata/template.json, or generate a blank one using either the cli \nscript, or by writing your own script using the \n`pythfinder.writeCharacter()` function to save the output of \n`pythfinder.Character()` to a file.\n\n## Roadmap\n\n+ ~~Rework script arguments into subcommand + argument~~\n+ ~~Add interactive flag for old behavior~~\n    + I'm going to get rid of this for now; it might end up being too \n    much effort to implement an interactive prompt with the new \n    argument structure. Will revisit in the future.\n+ ~~Basic tracking of, and output for:~~\n    + ~~attacks~~\n    + ~~feats~~\n    + ~~traits~~\n    + ~~spells~~\n+ Functionality to edit/update values of:\n    + ~~ability scores~~\n        + Same as below; I need to create functions specifically for \n        adding/removing ability/skill modifiers, possibly by name. This \n        would necessitate reworking the structure of both, or maybe \n        adding a class for temporary/permanent effects, I'm not sure.\n    + ~~skill ranks/class status/notes~~\n        + This still needs a custom function to add/remove/change any \n        of the \"misc\" modifiers on skills, but otherwise it's \n        implemented fully\n    + ~~items~~\n    + ~~attacks~~\n    + ~~feats~~\n    + ~~traits~~\n    + ~~spells~~\n    + ~~special abilities~~\n    + etc.\n+ ~~New character creation walkthrough process (CLI)~~\n    + There is now functionality to create a blank character sheet in \n    both the module and the CLI, but it's not interactive; that's good \n    enough for me, as most \"interactive\" processes would be much better \n    served in a gui.\n+ ~~Character sheet JSON format enforcement~~\n    + ~~This is partially done with the Character class, but I'll \n    eventually have classes for other complex objects within the \n    character, like items, attacks, spells, etc. Makes it easier to \n    import json; just grab values if they're there, if not use the \n    defaults, and for extra values just ignore them.~~ this is now \n    pretty much finished, nearly everything is an object\n+ ~~add ability modifiers (for temp increases/damage)~~\n+ ~~rework hp:~~\n    + ~~add wounds, temp hp, temporary max hp increases~~\n    + ~~essentially make current hp a calculated value~~\n    + I'm not doing either of these, but I am adding nonlethal damage\n+ add full armor class components\n+ expand on attacks and armor class:\n    + display all modifiers\n    + show the rolls and modifiers for hits and damage\n    + track enhancement bonus / masterwork status\n    + ~~(AC) show touch/flat footed and all the modifiers~~\n+ implement spells like equipment and attacks:\n    + ~~spells get tracked in the character.spells list~~\n    + damaging spells can get added to the spell attack list, like \n    weapon attacks\n    + show damage, cast time, duration (if applicable)\n+ ~~Refactor classes into single Character class~~\n    + ~~Thinking about it more, it doesn't make sense for all of these \n    character properties to be their own classes; their constructors \n    and methods could just be Character() methods. It would greatly \n    simplify a lot of the structure of this package.~~ - complete\n+ ~~Add name enforcement for list properties~~\n+ Add tests:\n    + `add_*` methods\n    + `update_*` methods\n    + `get_*` methods\n+ Define RESTful API endpoints\n+ Eventually:\n    + Decoupling of input and data processing, converting outputs to \n    json format\n    + Option to have outputs be served via restful API (in addition to \n    CLI)\n    + Web app frontend for restful API\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matthew-hale/pythfinder", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pythfinder", "package_url": "https://pypi.org/project/pythfinder/", "platform": "", "project_url": "https://pypi.org/project/pythfinder/", "project_urls": {"Homepage": "https://github.com/matthew-hale/pythfinder"}, "release_url": "https://pypi.org/project/pythfinder/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A pathfinder character sheet python package", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pythfinder</h1>\n<p>A repository for an in-development Pathfinder 1e python app. The goal\nis to be able to keep track of multiple characters, and provide\nfunctionality such as rolling for attacks/skills, computing bonuses,\netc.</p>\n<p>NOTE: this is <em>very</em> WIP, and is mostly for personal use at this time.\nIt's got lots of rough edges.</p>\n<h2>Requirements</h2>\n<ul>\n<li>python</li>\n<li>a character sheet in JSON format</li>\n</ul>\n<p>To get a character sheet, you can either copy the template in\ndata/template.json, or generate a blank one using either the cli\nscript, or by writing your own script using the\n<code>pythfinder.writeCharacter()</code> function to save the output of\n<code>pythfinder.Character()</code> to a file.</p>\n<h2>Roadmap</h2>\n<ul>\n<li><del>Rework script arguments into subcommand + argument</del></li>\n<li><del>Add interactive flag for old behavior</del>\n<ul>\n<li>I'm going to get rid of this for now; it might end up being too\nmuch effort to implement an interactive prompt with the new\nargument structure. Will revisit in the future.</li>\n</ul>\n</li>\n<li><del>Basic tracking of, and output for:</del>\n<ul>\n<li><del>attacks</del></li>\n<li><del>feats</del></li>\n<li><del>traits</del></li>\n<li><del>spells</del></li>\n</ul>\n</li>\n<li>Functionality to edit/update values of:\n<ul>\n<li><del>ability scores</del>\n<ul>\n<li>Same as below; I need to create functions specifically for\nadding/removing ability/skill modifiers, possibly by name. This\nwould necessitate reworking the structure of both, or maybe\nadding a class for temporary/permanent effects, I'm not sure.</li>\n</ul>\n</li>\n<li><del>skill ranks/class status/notes</del>\n<ul>\n<li>This still needs a custom function to add/remove/change any\nof the \"misc\" modifiers on skills, but otherwise it's\nimplemented fully</li>\n</ul>\n</li>\n<li><del>items</del></li>\n<li><del>attacks</del></li>\n<li><del>feats</del></li>\n<li><del>traits</del></li>\n<li><del>spells</del></li>\n<li><del>special abilities</del></li>\n<li>etc.</li>\n</ul>\n</li>\n<li><del>New character creation walkthrough process (CLI)</del>\n<ul>\n<li>There is now functionality to create a blank character sheet in\nboth the module and the CLI, but it's not interactive; that's good\nenough for me, as most \"interactive\" processes would be much better\nserved in a gui.</li>\n</ul>\n</li>\n<li><del>Character sheet JSON format enforcement</del>\n<ul>\n<li><del>This is partially done with the Character class, but I'll\neventually have classes for other complex objects within the\ncharacter, like items, attacks, spells, etc. Makes it easier to\nimport json; just grab values if they're there, if not use the\ndefaults, and for extra values just ignore them.</del> this is now\npretty much finished, nearly everything is an object</li>\n</ul>\n</li>\n<li><del>add ability modifiers (for temp increases/damage)</del></li>\n<li><del>rework hp:</del>\n<ul>\n<li><del>add wounds, temp hp, temporary max hp increases</del></li>\n<li><del>essentially make current hp a calculated value</del></li>\n<li>I'm not doing either of these, but I am adding nonlethal damage</li>\n</ul>\n</li>\n<li>add full armor class components</li>\n<li>expand on attacks and armor class:\n<ul>\n<li>display all modifiers</li>\n<li>show the rolls and modifiers for hits and damage</li>\n<li>track enhancement bonus / masterwork status</li>\n<li><del>(AC) show touch/flat footed and all the modifiers</del></li>\n</ul>\n</li>\n<li>implement spells like equipment and attacks:\n<ul>\n<li><del>spells get tracked in the character.spells list</del></li>\n<li>damaging spells can get added to the spell attack list, like\nweapon attacks</li>\n<li>show damage, cast time, duration (if applicable)</li>\n</ul>\n</li>\n<li><del>Refactor classes into single Character class</del>\n<ul>\n<li><del>Thinking about it more, it doesn't make sense for all of these\ncharacter properties to be their own classes; their constructors\nand methods could just be Character() methods. It would greatly\nsimplify a lot of the structure of this package.</del> - complete</li>\n</ul>\n</li>\n<li><del>Add name enforcement for list properties</del></li>\n<li>Add tests:\n<ul>\n<li><code>add_*</code> methods</li>\n<li><code>update_*</code> methods</li>\n<li><code>get_*</code> methods</li>\n</ul>\n</li>\n<li>Define RESTful API endpoints</li>\n<li>Eventually:\n<ul>\n<li>Decoupling of input and data processing, converting outputs to\njson format</li>\n<li>Option to have outputs be served via restful API (in addition to\nCLI)</li>\n<li>Web app frontend for restful API</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6784895, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e893d70e3fcf8a1c8202ca2d389ef3cb", "sha256": "fe21a5949ecb8b2b6edf0e8a591627f8078e4196e0c4e464f14e43fbb2be5ccd"}, "downloads": -1, "filename": "pythfinder-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e893d70e3fcf8a1c8202ca2d389ef3cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11642, "upload_time": "2020-03-06T14:47:18", "upload_time_iso_8601": "2020-03-06T14:47:18.385077Z", "url": "https://files.pythonhosted.org/packages/ba/28/d8aaa9129f85021abe7dab2fde41690699100dd83f9e3bdd5214a5efe86a/pythfinder-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf4cd9b507a95da2361f41bd444c16d4", "sha256": "0d40b6829bcf6b643a40547a48149a46c739db04270a5fedc2ae1508b5dc96f4"}, "downloads": -1, "filename": "pythfinder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cf4cd9b507a95da2361f41bd444c16d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12507, "upload_time": "2020-03-06T14:47:20", "upload_time_iso_8601": "2020-03-06T14:47:20.257503Z", "url": "https://files.pythonhosted.org/packages/38/79/2930c53ec04ab8b316a61f93ff3aa04d3fece8076cd3f6e40630f7f5d786/pythfinder-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a3d0579f3a1da6104345025d49bf9d8a", "sha256": "f9c35bba6b77d8ecb0e5f45b8ae88e041ef4e2fb74304ef0a29c75974e0ca1c8"}, "downloads": -1, "filename": "pythfinder-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3d0579f3a1da6104345025d49bf9d8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11644, "upload_time": "2020-03-10T12:54:53", "upload_time_iso_8601": "2020-03-10T12:54:53.543921Z", "url": "https://files.pythonhosted.org/packages/02/b8/fbffe2c9360b45c1ab50c7699784196f5b52aea08dafaba4dbcfc5d24025/pythfinder-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67433464ce62a911a943c274f1ed85d7", "sha256": "6f4152179bd46d763df3fc1cf42abff84bdaea120f76f872e5e02656a377b90d"}, "downloads": -1, "filename": "pythfinder-0.2.0.tar.gz", "has_sig": false, "md5_digest": "67433464ce62a911a943c274f1ed85d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12506, "upload_time": "2020-03-10T12:54:54", "upload_time_iso_8601": "2020-03-10T12:54:54.539780Z", "url": "https://files.pythonhosted.org/packages/7f/9a/7ceb40e2026affc145e3cea1c015fdd4b9d347ca50bb2e94c846baa29566/pythfinder-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3d0579f3a1da6104345025d49bf9d8a", "sha256": "f9c35bba6b77d8ecb0e5f45b8ae88e041ef4e2fb74304ef0a29c75974e0ca1c8"}, "downloads": -1, "filename": "pythfinder-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3d0579f3a1da6104345025d49bf9d8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11644, "upload_time": "2020-03-10T12:54:53", "upload_time_iso_8601": "2020-03-10T12:54:53.543921Z", "url": "https://files.pythonhosted.org/packages/02/b8/fbffe2c9360b45c1ab50c7699784196f5b52aea08dafaba4dbcfc5d24025/pythfinder-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67433464ce62a911a943c274f1ed85d7", "sha256": "6f4152179bd46d763df3fc1cf42abff84bdaea120f76f872e5e02656a377b90d"}, "downloads": -1, "filename": "pythfinder-0.2.0.tar.gz", "has_sig": false, "md5_digest": "67433464ce62a911a943c274f1ed85d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12506, "upload_time": "2020-03-10T12:54:54", "upload_time_iso_8601": "2020-03-10T12:54:54.539780Z", "url": "https://files.pythonhosted.org/packages/7f/9a/7ceb40e2026affc145e3cea1c015fdd4b9d347ca50bb2e94c846baa29566/pythfinder-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:29 2020"}