{"info": {"author": "Felix Geilert", "author_email": "f.geilert@brainplug.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# BrainPlug Storage Library\n\nLibrary to load, augment and different dataset formats for use in machine learning models.\n\n> Note: The repo is still work in progress, so documentation might not be up to date\n\n## Getting Started\n\nStorage Library allows loading and augmentation in various data formats. It even allows to generate `Tensorflow` Tf-Records and load them (coming soon (TM)).\n\n```bash\npip3 install bp-storage\n# or install locally from source\npip3 install .\n```\n\nCurrently the library has 4 parts:\n\n* `storage.classification` - Allows to load simple classification datasets\n* `storage.kitti` - Allows to load the kitti format for usage in detectors (3D Data not supported currently)\n* `storage.beard` - Allows to load beard format (format optimized for localization tasks)\n* `storage.utils` - Various helper functions\n\nIn general each data loader will create a python generator that can be used to loop over the data. Datasets in general are split into different types (defined in `storage.utils.DataType`):\n\n* `TRAINING` - Used for general training purposes\n* `DEVELOPMENT` - Used for validation and exploration during the development process (you will probably make certain assumptions about the structure of the dataset through this data)\n* `VALIDATION` - Final validation data used to measure the performance of the trained model and to validate your assumptions\n\nThese datatypes are added to the end of the enum and the creation functions also allow you to filter the dataset for certain types.\n\n## Examples\n\n### General Concepts\n\nEach load function allows to resize the images through 3 parameters, which contain enums:\n\n* `resize` [`storage.utils.ResizeMode`] - Defines how the images are resized and if it should be padded\n* `pad_mode` [`storage.utils.PadMode`] - In case of padding defines if the image should be pinned to top left corner or centered\n* `pad_color` [Color Array] - Defines the color of the padding, if `ResizeMode.PAD_COLOR` is selected\n\nEach load function also allows to specify the maximum size of the output image through `size` and if the dataset type (i.e. `storage.utils.DataType`) is provided for each element in the generator through `show_btype`. It also allows to filter only for a specific btype through the `only` argument, which expects a single or a list of multiple `DataType`.\n\n### Classification\n\nThis is the simples type of dataset:\n\n```python\nimport storage\nfrom storage.utils import ResizeMode, DataType\n# DEBUG: using cv2 for debug output\nimport cv2\n\n# load the generator\nclasses, gen = storage.classification.load(folder, size=(512, 512), resize=ResizeMode.FIT, only=DataType.TRAINING, show_btype=True)\n\nprint(\"Found classes: {}\".format(classes))\n\n# DEBUG: show the output of the generator\nfor img, label, ds in gen:\n  cv2.putText(img, label, (10, 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,0), 2)\n  # show the result\n  cv2.imshow(\"Storage Output\", img)\n  cv2.waitKey(0)\n```\n\n### Kitti & Beard\n\nThe loading of kitti and beard data is quite similar (i.e. kitti uses the beard loader internally). Both function should have similar signatures. The only difference are:\n\n* `beard_style` parameter for `kitti.load()`, which switches between classic kitti format and beard generator style output.\n* `classes` parameter for `kitti.load()`, which allows to provide classes that deviate from default kitti classes (for beard, these are stored in the config file)\n\nTherefore we will only look at beard loading here:\n\n```python\nimport storage\nfrom storage.utils import ResizeMode, PadMode, DataType\n# DEBUG: using cv2 for debug output\nimport cv2\n\n# load the generator\nconfig, gen = storage.beard.load(folder, only=DataType.DEVELOPMENT, size=(512, 512), resize=ResizeMode.PAD_COLOR, pad_color=(255, 255, 255), pad_mode=PadMode, show_btype=False)\n\n# DEBUG: show the output of the generator\ncolors = storage.utils.get_spaced_colors(len(classes) + 1)[1:]\nfor img, gdata, mdata in gen:\n  # note: gdata contains global image information (empty in kitti) and mdata hold classes and locations of objects\n  # go through all elements\n  for item in mdata:\n    # highlight bbs\n    if storage.utils.const.ITEM_BBOX in item:\n      # retrieve the boxes\n      coords = item[storage.utils.const.ITEM_BBOX]\n      cls = item[storage.utils.const.ITEM_CLASS]\n\n      # draw the bounding box\n      cv2.rectangle(img, (coords[0], coords[1]), (coords[2], coords[3]), colors[cls], 2)\n      cv2.putText(img, cls,(coords[0], coords[3] + 10), cv2.FONT_HERSHEY_SIMPLEX, 0.4, colors[cls], 1, cv2.LINE_AA)\n\n  # show the result\n  cv2.imshow(\"Storage Output\", img)\n  cv2.waitKey(0)\n```\n\nFor additional insights take a look at the `scripts` folder.\n\n**NOTE:** In the default case the class attribute stored in `item` for kitti data is named `type` and not `class` (as stored in `storage.utils.const.ITEM_CLASS`)\n\n## Dataset structures\n\n[Beard](beard-definition) and [Kitti](kitti-definition) structures are described in separate documents. Classification expects a simple structure. Like in beard data is split into multiple folders for the datatype (`train`, `val`, `dev`). Each folder contains a subfolder for each class that should be classified (e.g. `cat` and `dog`). These subfolders then contain the actual images.\n\n## Dependencies\n\n* `lycon` or `cv2` - for fast loading of images and resizing (`pip install lycon`, however there seems not to be real windows support at the moment) [NOTE: you can also use cv2 instead, the library will adapt automatically]\n* default python stack (`numpy`, `pandas`, etc.)\n\n## Performance\n\nOne of the performance bottlenecks appears to be the numpy `pad` functions. However they are currently rewritten (see [here](https://github.com/numpy/numpy/pull/11358)) and might improve performance in future versions of numpy.\n\n## Known Issues\n\n* Augmentation only works with absolute coordinates on x-y ordering! (otherwise might produce wrong results, use `test_input` to verify!)\n\n## License\n\nPublished under MIT License.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BrainPlugAI/bp-storage", "keywords": "storage datasets deep learning", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "bp-storage", "package_url": "https://pypi.org/project/bp-storage/", "platform": "", "project_url": "https://pypi.org/project/bp-storage/", "project_urls": {"Homepage": "https://github.com/BrainPlugAI/bp-storage"}, "release_url": "https://pypi.org/project/bp-storage/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Helper Library for various Dataset formats", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BrainPlug Storage Library</h1>\n<p>Library to load, augment and different dataset formats for use in machine learning models.</p>\n<blockquote>\n<p>Note: The repo is still work in progress, so documentation might not be up to date</p>\n</blockquote>\n<h2>Getting Started</h2>\n<p>Storage Library allows loading and augmentation in various data formats. It even allows to generate <code>Tensorflow</code> Tf-Records and load them (coming soon (TM)).</p>\n<pre>pip3 install bp-storage\n<span class=\"c1\"># or install locally from source</span>\npip3 install .\n</pre>\n<p>Currently the library has 4 parts:</p>\n<ul>\n<li><code>storage.classification</code> - Allows to load simple classification datasets</li>\n<li><code>storage.kitti</code> - Allows to load the kitti format for usage in detectors (3D Data not supported currently)</li>\n<li><code>storage.beard</code> - Allows to load beard format (format optimized for localization tasks)</li>\n<li><code>storage.utils</code> - Various helper functions</li>\n</ul>\n<p>In general each data loader will create a python generator that can be used to loop over the data. Datasets in general are split into different types (defined in <code>storage.utils.DataType</code>):</p>\n<ul>\n<li><code>TRAINING</code> - Used for general training purposes</li>\n<li><code>DEVELOPMENT</code> - Used for validation and exploration during the development process (you will probably make certain assumptions about the structure of the dataset through this data)</li>\n<li><code>VALIDATION</code> - Final validation data used to measure the performance of the trained model and to validate your assumptions</li>\n</ul>\n<p>These datatypes are added to the end of the enum and the creation functions also allow you to filter the dataset for certain types.</p>\n<h2>Examples</h2>\n<h3>General Concepts</h3>\n<p>Each load function allows to resize the images through 3 parameters, which contain enums:</p>\n<ul>\n<li><code>resize</code> [<code>storage.utils.ResizeMode</code>] - Defines how the images are resized and if it should be padded</li>\n<li><code>pad_mode</code> [<code>storage.utils.PadMode</code>] - In case of padding defines if the image should be pinned to top left corner or centered</li>\n<li><code>pad_color</code> [Color Array] - Defines the color of the padding, if <code>ResizeMode.PAD_COLOR</code> is selected</li>\n</ul>\n<p>Each load function also allows to specify the maximum size of the output image through <code>size</code> and if the dataset type (i.e. <code>storage.utils.DataType</code>) is provided for each element in the generator through <code>show_btype</code>. It also allows to filter only for a specific btype through the <code>only</code> argument, which expects a single or a list of multiple <code>DataType</code>.</p>\n<h3>Classification</h3>\n<p>This is the simples type of dataset:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">storage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">storage.utils</span> <span class=\"kn\">import</span> <span class=\"n\">ResizeMode</span><span class=\"p\">,</span> <span class=\"n\">DataType</span>\n<span class=\"c1\"># DEBUG: using cv2 for debug output</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n<span class=\"c1\"># load the generator</span>\n<span class=\"n\">classes</span><span class=\"p\">,</span> <span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">classification</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">),</span> <span class=\"n\">resize</span><span class=\"o\">=</span><span class=\"n\">ResizeMode</span><span class=\"o\">.</span><span class=\"n\">FIT</span><span class=\"p\">,</span> <span class=\"n\">only</span><span class=\"o\">=</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">TRAINING</span><span class=\"p\">,</span> <span class=\"n\">show_btype</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Found classes: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># DEBUG: show the output of the generator</span>\n<span class=\"k\">for</span> <span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n  <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">putText</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">FONT_HERSHEY_SIMPLEX</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"c1\"># show the result</span>\n  <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">\"Storage Output\"</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">)</span>\n  <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h3>Kitti &amp; Beard</h3>\n<p>The loading of kitti and beard data is quite similar (i.e. kitti uses the beard loader internally). Both function should have similar signatures. The only difference are:</p>\n<ul>\n<li><code>beard_style</code> parameter for <code>kitti.load()</code>, which switches between classic kitti format and beard generator style output.</li>\n<li><code>classes</code> parameter for <code>kitti.load()</code>, which allows to provide classes that deviate from default kitti classes (for beard, these are stored in the config file)</li>\n</ul>\n<p>Therefore we will only look at beard loading here:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">storage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">storage.utils</span> <span class=\"kn\">import</span> <span class=\"n\">ResizeMode</span><span class=\"p\">,</span> <span class=\"n\">PadMode</span><span class=\"p\">,</span> <span class=\"n\">DataType</span>\n<span class=\"c1\"># DEBUG: using cv2 for debug output</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n<span class=\"c1\"># load the generator</span>\n<span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">beard</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"n\">only</span><span class=\"o\">=</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">DEVELOPMENT</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">),</span> <span class=\"n\">resize</span><span class=\"o\">=</span><span class=\"n\">ResizeMode</span><span class=\"o\">.</span><span class=\"n\">PAD_COLOR</span><span class=\"p\">,</span> <span class=\"n\">pad_color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">pad_mode</span><span class=\"o\">=</span><span class=\"n\">PadMode</span><span class=\"p\">,</span> <span class=\"n\">show_btype</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DEBUG: show the output of the generator</span>\n<span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">get_spaced_colors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n<span class=\"k\">for</span> <span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gdata</span><span class=\"p\">,</span> <span class=\"n\">mdata</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n  <span class=\"c1\"># note: gdata contains global image information (empty in kitti) and mdata hold classes and locations of objects</span>\n  <span class=\"c1\"># go through all elements</span>\n  <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">mdata</span><span class=\"p\">:</span>\n    <span class=\"c1\"># highlight bbs</span>\n    <span class=\"k\">if</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ITEM_BBOX</span> <span class=\"ow\">in</span> <span class=\"n\">item</span><span class=\"p\">:</span>\n      <span class=\"c1\"># retrieve the boxes</span>\n      <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ITEM_BBOX</span><span class=\"p\">]</span>\n      <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ITEM_CLASS</span><span class=\"p\">]</span>\n\n      <span class=\"c1\"># draw the bounding box</span>\n      <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n      <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">putText</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">,(</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">FONT_HERSHEY_SIMPLEX</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">LINE_AA</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># show the result</span>\n  <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">\"Storage Output\"</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">)</span>\n  <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>For additional insights take a look at the <code>scripts</code> folder.</p>\n<p><strong>NOTE:</strong> In the default case the class attribute stored in <code>item</code> for kitti data is named <code>type</code> and not <code>class</code> (as stored in <code>storage.utils.const.ITEM_CLASS</code>)</p>\n<h2>Dataset structures</h2>\n<p><a href=\"beard-definition\" rel=\"nofollow\">Beard</a> and <a href=\"kitti-definition\" rel=\"nofollow\">Kitti</a> structures are described in separate documents. Classification expects a simple structure. Like in beard data is split into multiple folders for the datatype (<code>train</code>, <code>val</code>, <code>dev</code>). Each folder contains a subfolder for each class that should be classified (e.g. <code>cat</code> and <code>dog</code>). These subfolders then contain the actual images.</p>\n<h2>Dependencies</h2>\n<ul>\n<li><code>lycon</code> or <code>cv2</code> - for fast loading of images and resizing (<code>pip install lycon</code>, however there seems not to be real windows support at the moment) [NOTE: you can also use cv2 instead, the library will adapt automatically]</li>\n<li>default python stack (<code>numpy</code>, <code>pandas</code>, etc.)</li>\n</ul>\n<h2>Performance</h2>\n<p>One of the performance bottlenecks appears to be the numpy <code>pad</code> functions. However they are currently rewritten (see <a href=\"https://github.com/numpy/numpy/pull/11358\" rel=\"nofollow\">here</a>) and might improve performance in future versions of numpy.</p>\n<h2>Known Issues</h2>\n<ul>\n<li>Augmentation only works with absolute coordinates on x-y ordering! (otherwise might produce wrong results, use <code>test_input</code> to verify!)</li>\n</ul>\n<h2>License</h2>\n<p>Published under MIT License.</p>\n\n          </div>"}, "last_serial": 5854651, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f3b997ef7729221af57d0b2d77f6736e", "sha256": "f9035a66a95cfc38a8e8ad19e9bb73bcb1558f17f3ae04b9b12de2c500870b35"}, "downloads": -1, "filename": "bp_storage-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f3b997ef7729221af57d0b2d77f6736e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14959, "upload_time": "2019-08-31T12:14:37", "upload_time_iso_8601": "2019-08-31T12:14:37.116990Z", "url": "https://files.pythonhosted.org/packages/f3/ac/bfd767bdece381529ad966b3c3db85dea51037bb2e224b3bea22d75a5a13/bp_storage-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6541dbe5002b84b67f6cd4b408334c33", "sha256": "a0d57f331b6318b497159499ab5fc6fa23a051500a6fa68f29ebe927a869ffc6"}, "downloads": -1, "filename": "bp_storage-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6541dbe5002b84b67f6cd4b408334c33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16093, "upload_time": "2019-09-19T08:02:12", "upload_time_iso_8601": "2019-09-19T08:02:12.971002Z", "url": "https://files.pythonhosted.org/packages/fb/fc/695d3074fe5060c210c7fbff23086e12af46951d3fdecc8717ddc5b31109/bp_storage-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6541dbe5002b84b67f6cd4b408334c33", "sha256": "a0d57f331b6318b497159499ab5fc6fa23a051500a6fa68f29ebe927a869ffc6"}, "downloads": -1, "filename": "bp_storage-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6541dbe5002b84b67f6cd4b408334c33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16093, "upload_time": "2019-09-19T08:02:12", "upload_time_iso_8601": "2019-09-19T08:02:12.971002Z", "url": "https://files.pythonhosted.org/packages/fb/fc/695d3074fe5060c210c7fbff23086e12af46951d3fdecc8717ddc5b31109/bp_storage-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:27 2020"}