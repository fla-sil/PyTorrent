{"info": {"author": "Alexey Novikov", "author_email": "velocityzen@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Jinja2 Modern\n\nJinja2 tags for modern web. Includes sass, scss, less, coffee, uglify. Can be easily extended for any command line tools.\nPreprocessors not running if source files not changed.\n\n## Instalation\n\n    pip install jinja2modern\n\n## Usage\n\nIn your project directory create settings.py, guess you already have it, with settings:\n\n### Basic settings:\n\n```python\n#home path\nJINJA2MODERN_HOME = os.path.realpath(os.path.dirname(__file__))\n#media path relative to home directory\nJINJA2MODERN_MEDIA_PATH = 'media'\n#media url\nJINJA2MODERN_MEDIA_URL = '/media'\n```\n\n### Engines\n\nThere are several preprocessor engine directories that you will need in your project. Here is how you can get them:\n\n```python\nJINJA2MODERN_ENGINES = {\n    'coffee': '/path/to/coffee/bin/coffee',\n    'uglify': '/path/to/uglify/bin/uglifyjs',\n    'lesscss': '/path/to/lesscss/bin/lessc',\n    'sass': '/path/to/sass/bin/sass',\n}\n```\n\n### Templates\n\nYou always can overide basic templates by placing it in tags subdirectory in your jinja2 environment template directory\n\n####js.html:\n    <script src=\"{{ file_link }}\"></script>\n\n####css.html:\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ file_link }}\" />\n\n## Tags\n\n### Less, Sass, Scss\n\nAll of this template code:\n```\n{% less \"style.css\" %}\n    less/style.less\n{% endless %}\n```\n\n```\n{% less \"less/style.less\" %}\n```\n\nwill render tags/css.html, for default template:\n`<link rel=\"stylesheet\" type=\"text/css\" href=\"/media_url/css/style.css\" />`\n\nOf course you can specify out path and file name\n```\n{% less \"path/to/style.css\" %}\n    less/style.less\n{% endless %}\n```\nthis will render tags/css.html, for default template:\n`<link rel=\"stylesheet\" type=\"text/css\" href=\"/media_url/path/to/style.css\" />`\n\n\n### Javascript\n\nJs tag just copy files to media path\n```\n{% js \"js/main/main.js\" %}\n```\n\nthis will render tags/js.html, for default template:\n`<script src=\"/media_url/js/main.js\"></script>`\n\n#### Advanced js tag using:\n\nYou can specify librarys for using in your templates by set this in your settings.py\n```python\nJINJA2MODERN_JS_LIBS_PATH = 'js/libs'\nJINJA2MODERN_JS_LIBS = {\n    'jquery': {\n        'src': 'js/lib/jquery*.js',\n        'template': 'js/jquery.html'\n    },\n}\n```\n\nand then just use\n```\n{% js \"jquery\" %}\n```\n\nthis will render template js/jquery.html\n```\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\"></script>\n<script>window.jQuery || document.write('<script src=\"{{ file_link }}\"><\\/script>')</script>\n```\n\n\n### Coffee script\n\nAll of this template code:\n```\n{% coffee \"js/main/main.coffee\" %}\n```\n\n```\n{% coffee \"main.js\" %}\n    js/main/main.coffee\n{% endcoffee %}\n```\n\n```\n{% coffee \"main.js\" %}\n    js/main/main1.coffee\n    js/main/main2.coffee\n    js/main/main3.coffee\n{% endcoffee %}\n```\n\nwill render tags/js.html, for default template:\n`<script src=\"/media/url/js/main.js\"></script>`\n\nand of course you can specify out path and file name like for less tag.\n\n### UglifyJS\n\nAll of this template code:\n```\n{% uglify \"js/main/main.js\" %}\n```\n\n```\n{% uglify \"main.js\" %}\n    js/main/main.js\n{% enduglify %}\n```\n\n```\n{% uglify \"main.js\" %}\n    js/main/main1.js\n    js/main/main2.js\n    js/main/main3.js\n{% enduglify %}\n```\n\nwill render tags/js.html, for default template:\n`<script src=\"/media/url/js/main.js\"></script>`\n\n### Advanced coffee and uglify tag using:\n\n__In this case uglify will run on every template rendering__\n\n```\n{% coffee \"main.js\" %}\n    js/main/main1.coffee\n    js/main/main2.coffee\n    js/main/main3.coffee\n{% endcoffee %}\n{% uglify %}\n    /media/url/js/main.js\n{% enduglify %}\n```\n\nCoffee tag will produce `/media/url/js/main.js` and render tags/js.html template. Than uglify will compress this file and will not render any templates.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/velocityzen/jinja2modern", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "jinja2modern", "package_url": "https://pypi.org/project/jinja2modern/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jinja2modern/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/velocityzen/jinja2modern"}, "release_url": "https://pypi.org/project/jinja2modern/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Jinja2 tags for modern web. Includes sass, scss, less, coffee, uglify. Can be easily extended for any command line tools.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Jinja2 Modern<br><br>Jinja2 tags for modern web. Includes sass, scss, less, coffee, uglify. Can be easily extended for any command line tools.<br>Preprocessors not running if source files not changed.<br><br>## Instalation<br><br>    pip install jinja2modern<br><br>## Usage<br><br>In your project directory create settings.py, guess you already have it, with settings:<br><br>### Basic settings:<br><br>```python<br>#home path<br>JINJA2MODERN_HOME = os.path.realpath(os.path.dirname(__file__))<br>#media path relative to home directory<br>JINJA2MODERN_MEDIA_PATH = 'media'<br>#media url<br>JINJA2MODERN_MEDIA_URL = '/media'<br>```<br><br>### Engines<br><br>There are several preprocessor engine directories that you will need in your project. Here is how you can get them:<br><br>```python<br>JINJA2MODERN_ENGINES = {<br>    'coffee': '/path/to/coffee/bin/coffee',<br>    'uglify': '/path/to/uglify/bin/uglifyjs',<br>    'lesscss': '/path/to/lesscss/bin/lessc',<br>    'sass': '/path/to/sass/bin/sass',<br>}<br>```<br><br>### Templates<br><br>You always can overide basic templates by placing it in tags subdirectory in your jinja2 environment template directory<br><br>####js.html:<br>    &lt;script src=\"{{ file_link }}\"&gt;&lt;/script&gt;<br><br>####css.html:<br>    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{{ file_link }}\" /&gt;<br><br>## Tags<br><br>### Less, Sass, Scss<br><br>All of this template code:<br>```<br>{% less \"style.css\" %}<br>    less/style.less<br>{% endless %}<br>```<br><br>```<br>{% less \"less/style.less\" %}<br>```<br><br>will render tags/css.html, for default template:<br>`&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/media_url/css/style.css\" /&gt;`<br><br>Of course you can specify out path and file name<br>```<br>{% less \"path/to/style.css\" %}<br>    less/style.less<br>{% endless %}<br>```<br>this will render tags/css.html, for default template:<br>`&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/media_url/path/to/style.css\" /&gt;`<br><br><br>### Javascript<br><br>Js tag just copy files to media path<br>```<br>{% js \"js/main/main.js\" %}<br>```<br><br>this will render tags/js.html, for default template:<br>`&lt;script src=\"/media_url/js/main.js\"&gt;&lt;/script&gt;`<br><br>#### Advanced js tag using:<br><br>You can specify librarys for using in your templates by set this in your settings.py<br>```python<br>JINJA2MODERN_JS_LIBS_PATH = 'js/libs'<br>JINJA2MODERN_JS_LIBS = {<br>    'jquery': {<br>        'src': 'js/lib/jquery*.js',<br>        'template': 'js/jquery.html'<br>    },<br>}<br>```<br><br>and then just use<br>```<br>{% js \"jquery\" %}<br>```<br><br>this will render template js/jquery.html<br>```<br>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\"&gt;&lt;/script&gt;<br>&lt;script&gt;window.jQuery || document.write('&lt;script src=\"{{ file_link }}\"&gt;&lt;\\/script&gt;')&lt;/script&gt;<br>```<br><br><br>### Coffee script<br><br>All of this template code:<br>```<br>{% coffee \"js/main/main.coffee\" %}<br>```<br><br>```<br>{% coffee \"main.js\" %}<br>    js/main/main.coffee<br>{% endcoffee %}<br>```<br><br>```<br>{% coffee \"main.js\" %}<br>    js/main/main1.coffee<br>    js/main/main2.coffee<br>    js/main/main3.coffee<br>{% endcoffee %}<br>```<br><br>will render tags/js.html, for default template:<br>`&lt;script src=\"/media/url/js/main.js\"&gt;&lt;/script&gt;`<br><br>and of course you can specify out path and file name like for less tag.<br><br>### UglifyJS<br><br>All of this template code:<br>```<br>{% uglify \"js/main/main.js\" %}<br>```<br><br>```<br>{% uglify \"main.js\" %}<br>    js/main/main.js<br>{% enduglify %}<br>```<br><br>```<br>{% uglify \"main.js\" %}<br>    js/main/main1.js<br>    js/main/main2.js<br>    js/main/main3.js<br>{% enduglify %}<br>```<br><br>will render tags/js.html, for default template:<br>`&lt;script src=\"/media/url/js/main.js\"&gt;&lt;/script&gt;`<br><br>### Advanced coffee and uglify tag using:<br><br>__In this case uglify will run on every template rendering__<br><br>```<br>{% coffee \"main.js\" %}<br>    js/main/main1.coffee<br>    js/main/main2.coffee<br>    js/main/main3.coffee<br>{% endcoffee %}<br>{% uglify %}<br>    /media/url/js/main.js<br>{% enduglify %}<br>```<br><br>Coffee tag will produce `/media/url/js/main.js` and render tags/js.html template. Than uglify will compress this file and will not render any templates.\n          </div>"}, "last_serial": 793625, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "1ab93d843639e5a50aac162bb7892ba2", "sha256": "e3ccc41db52ede358e793ae3990b60a4c8e3ff049d429d59d4b3696070f1def4"}, "downloads": -1, "filename": "jinja2modern-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1ab93d843639e5a50aac162bb7892ba2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5662, "upload_time": "2012-09-11T12:47:21", "upload_time_iso_8601": "2012-09-11T12:47:21.585376Z", "url": "https://files.pythonhosted.org/packages/c4/9a/2cd99ef569ccade45ab68df2d1eebf2a0faf7cc637c145ea777c317cbdec/jinja2modern-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c711ed59ab4296d4760fac91f317eefc", "sha256": "5e859214070860564b95df072847a0814086cbc95f329acd6073a9fd41f7e4b1"}, "downloads": -1, "filename": "jinja2modern-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c711ed59ab4296d4760fac91f317eefc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5735, "upload_time": "2013-01-04T21:55:10", "upload_time_iso_8601": "2013-01-04T21:55:10.278528Z", "url": "https://files.pythonhosted.org/packages/3f/aa/3233add3f3251f90e612f3cbbdb28cf9420d19f2987ad5ee81753d44c3c5/jinja2modern-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c711ed59ab4296d4760fac91f317eefc", "sha256": "5e859214070860564b95df072847a0814086cbc95f329acd6073a9fd41f7e4b1"}, "downloads": -1, "filename": "jinja2modern-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c711ed59ab4296d4760fac91f317eefc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5735, "upload_time": "2013-01-04T21:55:10", "upload_time_iso_8601": "2013-01-04T21:55:10.278528Z", "url": "https://files.pythonhosted.org/packages/3f/aa/3233add3f3251f90e612f3cbbdb28cf9420d19f2987ad5ee81753d44c3c5/jinja2modern-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:38 2020"}