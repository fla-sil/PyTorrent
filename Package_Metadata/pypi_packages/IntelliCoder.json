{"info": {"author": "Gu Zhengxiong", "author_email": "rectigu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "IntelliCoder\n============\n\nPosition independent programming for humans. (WIP.)\n\nOr seriously, automation of position independent code generation\nfrom normal C source code.\n\nCurrent State: It's a pretotype or a toy\nserving educational purposes.\n\n\n.. image:: https://travis-ci.org/NoviceLive/intellicoder.svg?branch=master\n    :target: https://travis-ci.org/NoviceLive/intellicoder\n\n\nInstallation\n============\n\nClone and run.\n\n- ``git clone --depth 1 https://github.com/NoviceLive/intellicoder.git``\n- ``pip install -r requirements.txt``\n- ``./ic.py --help``\n\n\nUsable Features\n===============\n\n\nUsage\n-----\n\nSee ``./ic.py --help``.\n\nNote that some commands are not usable and\nsome may change without notification.\n\n::\n\n   ./ic.py --help\n   Usage: ic.py [OPTIONS] COMMAND [ARGS]...\n\n     Position Independent Programming For Humans.\n\n   Options:\n     -V, --version        Show the version and exit.\n     -v, --verbose        Be verbose.\n     -q, --quiet          Be quiet.\n     -d, --database PATH  Connect the database.\n     -s, --sense PATH     Connect the IntelliSense database.\n     -h, --help           Show this message and exit.\n\n   Commands:\n     add     Add data on Linux system calls.\n     build   Build (Don't use for the time being).\n     conv    Convert binary.\n     export  Operate on libraries and exported functions.\n     info    Find in the Linux system calls.\n     kinds   Operate on IntelliSense kind ids and names.\n     lin     Linux.\n     make    Make binaries from sources.\n     search  Query Windows identifiers and locations.\n     win     Windows.\n     winapi  Query Win32 API declarations.\n\n\nShellcode Extraction & Conversion\n---------------------------------\n\nSee ``./ic.py conv --help``.\n\n\nLinux System Call Searching\n---------------------------\n\nSee ``./ic.py info --help``.\n\n\nExamples\n++++++++\n\n::\n\n   $ ./ic.py info fork\n   fork i386 2\n   long fork(); /* kernel/fork.c */\n   fork common 57\n   long fork(); /* kernel/fork.c */\n\n   $ ./ic.py info 11\n   execve i386 11\n   long execve(const char * filename,  const char *const * argv,  const char *const * envp); /* fs/exec.c */\n   long execve(const char * filename, const compat_uptr_t * argv, const compat_uptr_t * envp); /* fs/exec.c */\n   munmap common 11\n   long munmap(unsigned long addr,  size_t len); /* mm/nommu.c */\n   long munmap(unsigned long addr,  size_t len); /* mm/mmap.c */\n\n   $ ./ic.py info 0xb\n   execve i386 11\n   long execve(const char * filename,  const char *const * argv,  const char *const * envp); /* fs/exec.c */\n   long execve(const char * filename, const compat_uptr_t * argv, const compat_uptr_t * envp); /* fs/exec.c */\n   munmap common 11\n   long munmap(unsigned long addr,  size_t len); /* mm/nommu.c */\n   long munmap(unsigned long addr,  size_t len); /* mm/mmap.c */\n\n\nDirectory Structure\n===================\n\nintellicoder/\n-------------\n\nintellicoder/executables/\n+++++++++++++++++++++++++\n\nA simple abstraction layer of binary executables\nbased on existing predominant libraries such as pyelftools_.\n\nNote that it's incomplete and ad-hoc for the time being.\n\nintellicoder/msbuild/\n+++++++++++++++++++++\n\nDespite its name, ``intellicoder.msbuild`` does not wrap MSBuild_.\n\nInstead, it wraps against MSVC_ with SDKs_ (and WDKs_) to ease\nthe automation of compilation on Windows.\n\nintellicoder/intellisense/\n++++++++++++++++++++++++++\n\nCollect necessary information, e.g., function prototypes,\nleveraging the database of IntelliSense_.\n\n\nstatic/\n-------\n\nC library sources and headers.\n\nThese are licensed under `GNU Lesser General Public License`_.\n\n\nrecipes/\n--------\n\nExamples.\n\nNote thta some are work in progress and may not work as intended.\n\n\nCopying Conditions\n==================\n\nUnless otherwise specified, IntelliCoder is licensed under\n`GNU General Public License`_.\n\n\n.. _pyelftools: https://github.com/eliben/pyelftools\n.. _MSBuild: https://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx\n.. _MSVC: https://msdn.microsoft.com/en-us/library/hh875057.aspx\n.. _SDKs: https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk\n.. _WDKs: https://msdn.microsoft.com/en-us/library/windows/hardware/ff557573%28v=vs.85%29.aspx\n.. _IntelliSense: https://msdn.microsoft.com/en-us/library/hcw1s69b.aspx\n.. _GNU Lesser General Public License: http://www.gnu.org/licenses/lgpl.html\n.. _GNU General Public License: http://www.gnu.org/licenses/gpl.html\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NoviceLive/intellicoder", "keywords": "Shellcode,Binary", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "IntelliCoder", "package_url": "https://pypi.org/project/IntelliCoder/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/IntelliCoder/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/NoviceLive/intellicoder"}, "release_url": "https://pypi.org/project/IntelliCoder/0.5.2/", "requires_dist": null, "requires_python": null, "summary": "Shellcoding Helper", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"intellicoder\">\n<h2>IntelliCoder</h2>\n<p>Position independent programming for humans. (WIP.)</p>\n<p>Or seriously, automation of position independent code generation\nfrom normal C source code.</p>\n<p>Current State: It\u2019s a pretotype or a toy\nserving educational purposes.</p>\n<a href=\"https://travis-ci.org/NoviceLive/intellicoder\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/NoviceLive/intellicoder.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68909e8e341d79055943f69c19c48bfe6d00b536/68747470733a2f2f7472617669732d63692e6f72672f4e6f766963654c6976652f696e74656c6c69636f6465722e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Clone and run.</p>\n<ul>\n<li><tt>git clone <span class=\"pre\">--depth</span> 1 <span class=\"pre\">https://github.com/NoviceLive/intellicoder.git</span></tt></li>\n<li><tt>pip install <span class=\"pre\">-r</span> requirements.txt</tt></li>\n<li><tt>./ic.py <span class=\"pre\">--help</span></tt></li>\n</ul>\n</div>\n<div id=\"usable-features\">\n<h2>Usable Features</h2>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>See <tt>./ic.py <span class=\"pre\">--help</span></tt>.</p>\n<p>Note that some commands are not usable and\nsome may change without notification.</p>\n<pre>./ic.py --help\nUsage: ic.py [OPTIONS] COMMAND [ARGS]...\n\n  Position Independent Programming For Humans.\n\nOptions:\n  -V, --version        Show the version and exit.\n  -v, --verbose        Be verbose.\n  -q, --quiet          Be quiet.\n  -d, --database PATH  Connect the database.\n  -s, --sense PATH     Connect the IntelliSense database.\n  -h, --help           Show this message and exit.\n\nCommands:\n  add     Add data on Linux system calls.\n  build   Build (Don't use for the time being).\n  conv    Convert binary.\n  export  Operate on libraries and exported functions.\n  info    Find in the Linux system calls.\n  kinds   Operate on IntelliSense kind ids and names.\n  lin     Linux.\n  make    Make binaries from sources.\n  search  Query Windows identifiers and locations.\n  win     Windows.\n  winapi  Query Win32 API declarations.\n</pre>\n</div>\n<div id=\"shellcode-extraction-conversion\">\n<h3>Shellcode Extraction &amp; Conversion</h3>\n<p>See <tt>./ic.py conv <span class=\"pre\">--help</span></tt>.</p>\n</div>\n<div id=\"linux-system-call-searching\">\n<h3>Linux System Call Searching</h3>\n<p>See <tt>./ic.py info <span class=\"pre\">--help</span></tt>.</p>\n<div id=\"examples\">\n<h4>Examples</h4>\n<pre>$ ./ic.py info fork\nfork i386 2\nlong fork(); /* kernel/fork.c */\nfork common 57\nlong fork(); /* kernel/fork.c */\n\n$ ./ic.py info 11\nexecve i386 11\nlong execve(const char * filename,  const char *const * argv,  const char *const * envp); /* fs/exec.c */\nlong execve(const char * filename, const compat_uptr_t * argv, const compat_uptr_t * envp); /* fs/exec.c */\nmunmap common 11\nlong munmap(unsigned long addr,  size_t len); /* mm/nommu.c */\nlong munmap(unsigned long addr,  size_t len); /* mm/mmap.c */\n\n$ ./ic.py info 0xb\nexecve i386 11\nlong execve(const char * filename,  const char *const * argv,  const char *const * envp); /* fs/exec.c */\nlong execve(const char * filename, const compat_uptr_t * argv, const compat_uptr_t * envp); /* fs/exec.c */\nmunmap common 11\nlong munmap(unsigned long addr,  size_t len); /* mm/nommu.c */\nlong munmap(unsigned long addr,  size_t len); /* mm/mmap.c */\n</pre>\n</div>\n</div>\n</div>\n<div id=\"directory-structure\">\n<h2>Directory Structure</h2>\n<div id=\"id1\">\n<h3>intellicoder/</h3>\n<div id=\"intellicoder-executables\">\n<h4>intellicoder/executables/</h4>\n<p>A simple abstraction layer of binary executables\nbased on existing predominant libraries such as <a href=\"https://github.com/eliben/pyelftools\" rel=\"nofollow\">pyelftools</a>.</p>\n<p>Note that it\u2019s incomplete and ad-hoc for the time being.</p>\n</div>\n<div id=\"intellicoder-msbuild\">\n<h4>intellicoder/msbuild/</h4>\n<p>Despite its name, <tt>intellicoder.msbuild</tt> does not wrap <a href=\"https://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx\" rel=\"nofollow\">MSBuild</a>.</p>\n<p>Instead, it wraps against <a href=\"https://msdn.microsoft.com/en-us/library/hh875057.aspx\" rel=\"nofollow\">MSVC</a> with <a href=\"https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk\" rel=\"nofollow\">SDKs</a> (and <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff557573%28v=vs.85%29.aspx\" rel=\"nofollow\">WDKs</a>) to ease\nthe automation of compilation on Windows.</p>\n</div>\n<div id=\"intellicoder-intellisense\">\n<h4>intellicoder/intellisense/</h4>\n<p>Collect necessary information, e.g., function prototypes,\nleveraging the database of <a href=\"https://msdn.microsoft.com/en-us/library/hcw1s69b.aspx\" rel=\"nofollow\">IntelliSense</a>.</p>\n</div>\n</div>\n<div id=\"static\">\n<h3>static/</h3>\n<p>C library sources and headers.</p>\n<p>These are licensed under <a href=\"http://www.gnu.org/licenses/lgpl.html\" rel=\"nofollow\">GNU Lesser General Public License</a>.</p>\n</div>\n<div id=\"recipes\">\n<h3>recipes/</h3>\n<p>Examples.</p>\n<p>Note thta some are work in progress and may not work as intended.</p>\n</div>\n</div>\n<div id=\"copying-conditions\">\n<h2>Copying Conditions</h2>\n<p>Unless otherwise specified, IntelliCoder is licensed under\n<a href=\"http://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\">GNU General Public License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2175624, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "1839bd3f7cb9ff66931fd0bbfdeb996c", "sha256": "f2c1f0c20848a47653cce4b68e75268bc12e56b9696d39fd8defbbd7e69467c8"}, "downloads": -1, "filename": "IntelliCoder-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1839bd3f7cb9ff66931fd0bbfdeb996c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75885, "upload_time": "2016-06-19T10:34:13", "upload_time_iso_8601": "2016-06-19T10:34:13.865302Z", "url": "https://files.pythonhosted.org/packages/0c/d0/7a4dea60d06549ed4f4395d425cf31ab62bb8ba2e459607b1f453e2b861d/IntelliCoder-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "7f297cf6cd8345e213d1284f8d584427", "sha256": "79e248616fd0b55c822cedad2ac2d56ec3d03b15553296d2aa992b230398cb74"}, "downloads": -1, "filename": "IntelliCoder-0.5.1.tar.gz", "has_sig": false, "md5_digest": "7f297cf6cd8345e213d1284f8d584427", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75890, "upload_time": "2016-06-19T10:35:56", "upload_time_iso_8601": "2016-06-19T10:35:56.622483Z", "url": "https://files.pythonhosted.org/packages/a3/90/212d759a57dc8b529e9673cea6018da0173c399ec591bb54fea51015f06b/IntelliCoder-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "3d3132dda202e6c154eb7d19e848a6fd", "sha256": "865798affd0d541a6695e5f91602ac4e9f3b1d9d5dbfbaa28957d5d24142068b"}, "downloads": -1, "filename": "IntelliCoder-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3d3132dda202e6c154eb7d19e848a6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112652, "upload_time": "2016-06-19T10:44:33", "upload_time_iso_8601": "2016-06-19T10:44:33.215228Z", "url": "https://files.pythonhosted.org/packages/c0/5e/018b12d8a56705457e14e461b430ada356012332e377df1365e87bfc5a41/IntelliCoder-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d3132dda202e6c154eb7d19e848a6fd", "sha256": "865798affd0d541a6695e5f91602ac4e9f3b1d9d5dbfbaa28957d5d24142068b"}, "downloads": -1, "filename": "IntelliCoder-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3d3132dda202e6c154eb7d19e848a6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112652, "upload_time": "2016-06-19T10:44:33", "upload_time_iso_8601": "2016-06-19T10:44:33.215228Z", "url": "https://files.pythonhosted.org/packages/c0/5e/018b12d8a56705457e14e461b430ada356012332e377df1365e87bfc5a41/IntelliCoder-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:32 2020"}