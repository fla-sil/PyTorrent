{"info": {"author": "Renchen Sun", "author_email": "sunrenchen@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "woied Python\n\nWelcome to woeid's documentation!\n---------------------------------\n--A Python interface for Yahoo GeoPlanet Web Services REST APIs. Python 2 and 3 are all supported!--\n\n.. image:: https://readthedocs.org/projects/woeid/badge/?version=latest\n      :target: http://woeid.readthedocs.io/en/latest/?badge=latest\n      :alt: Documentation Status\n\n.. image:: https://requires.io/github/Ray-SunR/woeid/requirements.svg?branch=master\n     :target: https://requires.io/github/Ray-SunR/woeid/requirements/?branch=master\n     :alt: Requirements Status\n\n+----------+-----------------------------------------+\n|Author    | Renchen Sun                             |\n+----------+-----------------------------------------+\n|Email     | sunrenchen@gmail.com                    |\n+----------+-----------------------------------------+\n|Github    | https://github.com/Ray-SunR/            |\n+----------+-----------------------------------------+\n|LinkedIn  | https://ca.linkedin.com/in/renchensun   |\n+----------+-----------------------------------------+\n\n============\nIntroduction\n============\n\nThis library provides a pure Python interface for the `Yahoo GeoPlanet API <https://developer.yahoo.com/geo/geoplanet/guide/>`_. It works with Python 2.7+ and Python 3.\n\nYahoo! GeoPlanetTM is designed to bridge the gap between the Real and Virtual worlds by providing the Internet with an open, comprehensive, and intelligent infrastructure for geo-referencing data on Earth\u2019s surface.\n\nIn practical terms, Yahoo! GeoPlanet is a resource for managing all geo-permanent named places on earth. It provides the Geographic Developer Community with the vocabulary and grammar to describe the world's geography in an unequivocal, permanent, and language-neutral manner, and is designed to facilitate spatial interoperability and geographic discovery. Developers looking to geo-enable their applications can use GeoPlanet to traverse the spatial hierarchy, identify the geography relevant to their users and their business, and in turn, unambiguously geotag, geotarget, and geolocate data across the Web.\n\n============\nInstallation\n============\n\n--From PyPI-- ::\n\n    $ pip install woeid\n\n--From source--\n\nDownload from pypi https://pypi.python.org/pypi/woeid/0.1.4\n\nDownload the latest `woeid` library from: https://github.com/Ray-SunR/woeid\n\nExtract the source distribution and run::\n\n    $ python setup.py install\n\n================\nGetting the code\n================\n\nThe code is hosted at `Github` https://github.com/Ray-SunR/woeid\n\nCheck out the latest development version anonymously with::\n\n$ git clone https://github.com/Ray-SunR/woeid.git\n$ cd woeid\n\n=======\nTesting\n=======\n\nNavigate into test folder::\n\n    $ cd test\n\nand run::\n\n    $ python test.py\n\n===============================\nGetting your application tokens\n===============================\n\nThis section is subject to changes made by Yahoo and may not always be completely up-to-date. If you see something change on their end, please create a `new issue on Github <https://github.com/Ray-SunR/woeid/issues/new>`_ or submit a pull request to update it.\n\n\nIn order to use the woeid API client, you first need to acquire the consumer key. The ``consumer key`` will be required in order to create a ``woeid.Api`` object.\n\n---------------\nCreate your app\n---------------\n\nThe first step in doing so is to create a `Yahoo App <https://developer.yahoo.com/apps/>`_. Click the \"Create an App\" button and fill out the fields on the next page.\n\n\n.. image:: docs/yahoo-app-creation-part1.png\n\nIf there are any problems with the information on that page, Yahoo will complain and you can fix it. (Make sure to get the name correct - it is unclear if you can change this later.) On the next screen, you'll see the application that you created and some information about it:\n\n--------\nYour app\n--------\n\nOnce your app is created, you'll be directed to a new page showing you some information about it.\n\n.. image:: docs/yahoo-app-creation-part2.png\n\n---------\nYour Keys\n---------\n\nThe stirng which is ecnlosed in red rectangle is your ``consumer key``.\n\n.. image:: docs/yahoo-app-creation-part3.png\n\nAt this point, you can test out your application using the ``consumer key`` to instantiate a ``woeid.Api(client_id=`YOUR_CLIENT_ID`)`` as follows::\n\n    import woeid\n    api = woeid.Api(client_id=[consumer_key])\n\n========\nExamples\n========\n\n-----------------------------------------\nExample 1: Create an ``woeid`` api object\n-----------------------------------------\n::\n\n    import woeid\n    api = woeid.Api(client-id=`YOUR-CLIENT-ID`, select='long', format='xml')\n\n    # Specify the requesting language\n    api.Lang = 'zh-Hans'\n\n    # Specify the view\n    api.Select = 'short'\n\n    # Set the response format\n    api.Format = 'json'\n\n    # Set the maximum number of records returned\n    api.Count = 5\n\n-------------------------------------------------------------------\nExample 2: Retrieving the Most Likely Place for a Given Place Name'\n-------------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlaces(q='SFO'))\n\n------------------------------------------------------------------------\nExample 3: Retrieving the Five Most Likely Places for a Given Placename'\n------------------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlaces(q=u'\u4e2d\u56fd'))\n\n------------------------------------------------------------------------------\nExample 4: Retrieving All Places for a Given ``place name`` and ``placetype``'\n------------------------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlaces(q='Long Island', typ=22, nd=True))\n\n------------------------------------------------------------\nExample 5: Retrieving Places That Have the Given ``woeids``'\n------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlaces(woeid=[2488042, 2488836, 2486340]))\n\n------------------------------------------------------\nExample 6: Retrieving a Place Using a Given ``woeid``'\n------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlace(woeid=2507854))\n\n-------------------------------------------------------------------------------\nExample 7: Retrieving a Place with a Given ``woeid``, in `short` Representation\n-------------------------------------------------------------------------------\n\n::\n\n    api.Select = 'short'\n    woeid.PrettyPrintResult(api.GetPlace(woeid=2507854))\n\n-----------------------------------------------------------------------------------------\nExample 8: Retrieving the Parent Place of a Given ``woeid``, as a ``long`` Representation\n-----------------------------------------------------------------------------------------\n\n::\n\n    api.Select = 'long'\n    woeid.PrettyPrintResult(api.GetPlace(woeid=638242, parent=True))\n\n----------------------------------------------------------\nExample 9. Retrieving the Ancestors for a Given ``woeid``'\n----------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlace(woeid=12587712, ancestors=True))\n\n---------------------------------------------------------------------------\nExample 10. Retrieving a Place That is a ``common`` Ancestor of Two Places'\n---------------------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlace(woeid=(2507854, 2380824), common=True))\n\n---------------------------------------------------------------------------\nExample 11. Retrieving a Place That is ``common`` Ancestor of Three Places'\n---------------------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlace(woeid=(2488042, 2488836, 2486340), common=True))\n\n--------------------------------------\nExample 12. Retrieving All Continents'\n--------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetContinents())\n\n-------------------------------------------------------------------------\nExample 13. Retrieving the Seas Adjacent to or Part of the Pacific Ocean'\n-------------------------------------------------------------------------\n\n::\n\n   woeid.PrettyPrintResult(api.GetSeas(place='Pacific Ocean'))\n\n---------------------------------------------------------------\nExample 14. Retrieving the Countries Within North America (NA)'\n---------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetCountries(place='NA'))\n\n----------------------------------------------------------------\nExample 15. Retrieving the States Within the United States (US)'\n----------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetStates(country='US'))\n\n-------------------------------------------------------\nExample 16. Retrieving the Districts of Greater London'\n-------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetDistricts(county='Greater London'))\n\n--------------------------------------------------------------------\nExample 17. Retrieving the WOEID and FIPs Code for a Given ISO Code'\n--------------------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetConcordance(namespace='iso', id='CA-BC'))\n\n-----------------------------------------------------------\nExample 18. Retrieving a Partial Collection of Place Types'\n-----------------------------------------------------------\n\n::\n\n    woeid.PrettyPrintResult(api.GetPlacetypes(typ=[0,2,22,37,38,15,16]))\n\n\nAbout me\n========\n\n.. image:: favicon1.gif\n\nHello! My name is Renchen. I am a 24-year-old Full-Stack Software Developer from Vancouver BC, Canada.\n\nI consider myself:\n\n\t- A heavy ``vimer``\n\n\t- A\tcommand line lover\n\n\t- Most capable of ``C/C++`` and ``Python`` programming. Also capable of programming in ``Java``, ``Javascript``, ``C#``, ``ObjC``\n\n\t- Comfortable writing portable codes for different platforms (``Windows``, ``Linux``, ``MacOS``, ``iOS``, ``Android``)\n\n\t- Passionate about server-side development (``Node``, ``Meteor``)\n\n\t- An expert in ``OpenXml`` standards", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ray-SunR/woeid", "keywords": "woeid,geoplanet,yahoo", "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "woeid", "package_url": "https://pypi.org/project/woeid/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/woeid/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Ray-SunR/woeid"}, "release_url": "https://pypi.org/project/woeid/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A python REST APIs for Yahoo GeoPlanet web services (https://developer.yahoo.com/geo/geoplanet/guide/)", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>woied Python</p>\n<div id=\"welcome-to-woeid-s-documentation\">\n<h2>Welcome to woeid\u2019s documentation!</h2>\n<p>\u2013A Python interface for Yahoo GeoPlanet Web Services REST APIs. Python 2 and 3 are all supported!\u2013</p>\n<a href=\"http://woeid.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97ba08aa4f1d29b76b74dcd603a2822ec34f7eae/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f776f6569642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://requires.io/github/Ray-SunR/woeid/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f758501d13bd1d434cb5e140688b108e164d9b32/68747470733a2f2f72657175697265732e696f2f6769746875622f5261792d53756e522f776f6569642f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Author</td>\n<td>Renchen Sun</td>\n</tr>\n<tr><td>Email</td>\n<td><a href=\"mailto:sunrenchen%40gmail.com\">sunrenchen<span>@</span>gmail<span>.</span>com</a></td>\n</tr>\n<tr><td>Github</td>\n<td><a href=\"https://github.com/Ray-SunR/\" rel=\"nofollow\">https://github.com/Ray-SunR/</a></td>\n</tr>\n<tr><td>LinkedIn</td>\n<td><a href=\"https://ca.linkedin.com/in/renchensun\" rel=\"nofollow\">https://ca.linkedin.com/in/renchensun</a></td>\n</tr>\n</tbody>\n</table>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>This library provides a pure Python interface for the <a href=\"https://developer.yahoo.com/geo/geoplanet/guide/\" rel=\"nofollow\">Yahoo GeoPlanet API</a>. It works with Python 2.7+ and Python 3.</p>\n<p>Yahoo! GeoPlanetTM is designed to bridge the gap between the Real and Virtual worlds by providing the Internet with an open, comprehensive, and intelligent infrastructure for geo-referencing data on Earth\u2019s surface.</p>\n<p>In practical terms, Yahoo! GeoPlanet is a resource for managing all geo-permanent named places on earth. It provides the Geographic Developer Community with the vocabulary and grammar to describe the world\u2019s geography in an unequivocal, permanent, and language-neutral manner, and is designed to facilitate spatial interoperability and geographic discovery. Developers looking to geo-enable their applications can use GeoPlanet to traverse the spatial hierarchy, identify the geography relevant to their users and their business, and in turn, unambiguously geotag, geotarget, and geolocate data across the Web.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>\u2013From PyPI\u2013</p>\n<pre>$ pip install woeid\n</pre>\n<p>\u2013From source\u2013</p>\n<p>Download from pypi <a href=\"https://pypi.python.org/pypi/woeid/0.1.4\" rel=\"nofollow\">https://pypi.python.org/pypi/woeid/0.1.4</a></p>\n<p>Download the latest <cite>woeid</cite> library from: <a href=\"https://github.com/Ray-SunR/woeid\" rel=\"nofollow\">https://github.com/Ray-SunR/woeid</a></p>\n<p>Extract the source distribution and run:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"getting-the-code\">\n<h3>Getting the code</h3>\n<p>The code is hosted at <cite>Github</cite> <a href=\"https://github.com/Ray-SunR/woeid\" rel=\"nofollow\">https://github.com/Ray-SunR/woeid</a></p>\n<p>Check out the latest development version anonymously with:</p>\n<pre>$ git clone https://github.com/Ray-SunR/woeid.git\n$ cd woeid\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>Navigate into test folder:</p>\n<pre>$ cd test\n</pre>\n<p>and run:</p>\n<pre>$ python test.py\n</pre>\n</div>\n<div id=\"getting-your-application-tokens\">\n<h3>Getting your application tokens</h3>\n<p>This section is subject to changes made by Yahoo and may not always be completely up-to-date. If you see something change on their end, please create a <a href=\"https://github.com/Ray-SunR/woeid/issues/new\" rel=\"nofollow\">new issue on Github</a> or submit a pull request to update it.</p>\n<p>In order to use the woeid API client, you first need to acquire the consumer key. The <tt>consumer key</tt> will be required in order to create a <tt>woeid.Api</tt> object.</p>\n<div id=\"create-your-app\">\n<h4>Create your app</h4>\n<p>The first step in doing so is to create a <a href=\"https://developer.yahoo.com/apps/\" rel=\"nofollow\">Yahoo App</a>. Click the \u201cCreate an App\u201d button and fill out the fields on the next page.</p>\n<img alt=\"docs/yahoo-app-creation-part1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/207d5521956337f1223c32e779e222fe7d8d6ddf/646f63732f7961686f6f2d6170702d6372656174696f6e2d70617274312e706e67\">\n<p>If there are any problems with the information on that page, Yahoo will complain and you can fix it. (Make sure to get the name correct - it is unclear if you can change this later.) On the next screen, you\u2019ll see the application that you created and some information about it:</p>\n</div>\n<div id=\"your-app\">\n<h4>Your app</h4>\n<p>Once your app is created, you\u2019ll be directed to a new page showing you some information about it.</p>\n<img alt=\"docs/yahoo-app-creation-part2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98bdf778c6950be932b20562c19d6732efc16024/646f63732f7961686f6f2d6170702d6372656174696f6e2d70617274322e706e67\">\n</div>\n<div id=\"your-keys\">\n<h4>Your Keys</h4>\n<p>The stirng which is ecnlosed in red rectangle is your <tt>consumer key</tt>.</p>\n<img alt=\"docs/yahoo-app-creation-part3.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19eaf43fbe95126cf767942f6b8a631964960294/646f63732f7961686f6f2d6170702d6372656174696f6e2d70617274332e706e67\">\n<p>At this point, you can test out your application using the <tt>consumer key</tt> to instantiate a <tt><span class=\"pre\">woeid.Api(client_id=`YOUR_CLIENT_ID`)</span></tt> as follows:</p>\n<pre>import woeid\napi = woeid.Api(client_id=[consumer_key])\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<div id=\"example-1-create-an-woeid-api-object\">\n<h4>Example 1: Create an <tt>woeid</tt> api object</h4>\n<pre>import woeid\napi = woeid.Api(client-id=`YOUR-CLIENT-ID`, select='long', format='xml')\n\n# Specify the requesting language\napi.Lang = 'zh-Hans'\n\n# Specify the view\napi.Select = 'short'\n\n# Set the response format\napi.Format = 'json'\n\n# Set the maximum number of records returned\napi.Count = 5\n</pre>\n</div>\n<div id=\"example-2-retrieving-the-most-likely-place-for-a-given-place-name\">\n<h4>Example 2: Retrieving the Most Likely Place for a Given Place Name\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlaces(q='SFO'))\n</pre>\n</div>\n<div id=\"example-3-retrieving-the-five-most-likely-places-for-a-given-placename\">\n<h4>Example 3: Retrieving the Five Most Likely Places for a Given Placename\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlaces(q=u'\u4e2d\u56fd'))\n</pre>\n</div>\n<div id=\"example-4-retrieving-all-places-for-a-given-place-name-and-placetype\">\n<h4>Example 4: Retrieving All Places for a Given <tt>place name</tt> and <tt>placetype</tt>\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlaces(q='Long Island', typ=22, nd=True))\n</pre>\n</div>\n<div id=\"example-5-retrieving-places-that-have-the-given-woeids\">\n<h4>Example 5: Retrieving Places That Have the Given <tt>woeids</tt>\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlaces(woeid=[2488042, 2488836, 2486340]))\n</pre>\n</div>\n<div id=\"example-6-retrieving-a-place-using-a-given-woeid\">\n<h4>Example 6: Retrieving a Place Using a Given <tt>woeid</tt>\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlace(woeid=2507854))\n</pre>\n</div>\n<div id=\"example-7-retrieving-a-place-with-a-given-woeid-in-short-representation\">\n<h4>Example 7: Retrieving a Place with a Given <tt>woeid</tt>, in <cite>short</cite> Representation</h4>\n<pre>api.Select = 'short'\nwoeid.PrettyPrintResult(api.GetPlace(woeid=2507854))\n</pre>\n</div>\n<div id=\"example-8-retrieving-the-parent-place-of-a-given-woeid-as-a-long-representation\">\n<h4>Example 8: Retrieving the Parent Place of a Given <tt>woeid</tt>, as a <tt>long</tt> Representation</h4>\n<pre>api.Select = 'long'\nwoeid.PrettyPrintResult(api.GetPlace(woeid=638242, parent=True))\n</pre>\n</div>\n<div id=\"example-9-retrieving-the-ancestors-for-a-given-woeid\">\n<h4>Example 9. Retrieving the Ancestors for a Given <tt>woeid</tt>\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlace(woeid=12587712, ancestors=True))\n</pre>\n</div>\n<div id=\"example-10-retrieving-a-place-that-is-a-common-ancestor-of-two-places\">\n<h4>Example 10. Retrieving a Place That is a <tt>common</tt> Ancestor of Two Places\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlace(woeid=(2507854, 2380824), common=True))\n</pre>\n</div>\n<div id=\"example-11-retrieving-a-place-that-is-common-ancestor-of-three-places\">\n<h4>Example 11. Retrieving a Place That is <tt>common</tt> Ancestor of Three Places\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlace(woeid=(2488042, 2488836, 2486340), common=True))\n</pre>\n</div>\n<div id=\"example-12-retrieving-all-continents\">\n<h4>Example 12. Retrieving All Continents\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetContinents())\n</pre>\n</div>\n<div id=\"example-13-retrieving-the-seas-adjacent-to-or-part-of-the-pacific-ocean\">\n<h4>Example 13. Retrieving the Seas Adjacent to or Part of the Pacific Ocean\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetSeas(place='Pacific Ocean'))\n</pre>\n</div>\n<div id=\"example-14-retrieving-the-countries-within-north-america-na\">\n<h4>Example 14. Retrieving the Countries Within North America (NA)\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetCountries(place='NA'))\n</pre>\n</div>\n<div id=\"example-15-retrieving-the-states-within-the-united-states-us\">\n<h4>Example 15. Retrieving the States Within the United States (US)\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetStates(country='US'))\n</pre>\n</div>\n<div id=\"example-16-retrieving-the-districts-of-greater-london\">\n<h4>Example 16. Retrieving the Districts of Greater London\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetDistricts(county='Greater London'))\n</pre>\n</div>\n<div id=\"example-17-retrieving-the-woeid-and-fips-code-for-a-given-iso-code\">\n<h4>Example 17. Retrieving the WOEID and FIPs Code for a Given ISO Code\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetConcordance(namespace='iso', id='CA-BC'))\n</pre>\n</div>\n<div id=\"example-18-retrieving-a-partial-collection-of-place-types\">\n<h4>Example 18. Retrieving a Partial Collection of Place Types\u2019</h4>\n<pre>woeid.PrettyPrintResult(api.GetPlacetypes(typ=[0,2,22,37,38,15,16]))\n</pre>\n<div id=\"about-me\">\n<h5>About me</h5>\n<img alt=\"favicon1.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e21f21f0e2809f1f4a5017b2318f178bee6f2ba/66617669636f6e312e676966\">\n<p>Hello! My name is Renchen. I am a 24-year-old Full-Stack Software Developer from Vancouver BC, Canada.</p>\n<p>I consider myself:</p>\n<blockquote>\n<ul>\n<li>A heavy <tt>vimer</tt></li>\n<li>A     command line lover</li>\n<li>Most capable of <tt>C/C++</tt> and <tt>Python</tt> programming. Also capable of programming in <tt>Java</tt>, <tt>Javascript</tt>, <tt>C#</tt>, <tt>ObjC</tt></li>\n<li>Comfortable writing portable codes for different platforms (<tt>Windows</tt>, <tt>Linux</tt>, <tt>MacOS</tt>, <tt>iOS</tt>, <tt>Android</tt>)</li>\n<li>Passionate about server-side development (<tt>Node</tt>, <tt>Meteor</tt>)</li>\n<li>An expert in <tt>OpenXml</tt> standards</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2239261, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "923bdf7aa9854cf6f7274b67e46df2a5", "sha256": "04717ac7598096a28e767799fb504feabf92bbddfbadcaa55ac3a6d479379987"}, "downloads": -1, "filename": "woeid-1.0.0.tar.gz", "has_sig": false, "md5_digest": "923bdf7aa9854cf6f7274b67e46df2a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14378, "upload_time": "2016-07-23T03:05:08", "upload_time_iso_8601": "2016-07-23T03:05:08.075701Z", "url": "https://files.pythonhosted.org/packages/66/a4/2b5d7efc0a1309584d3e9c62e0c0246b47acc301378353c2b33f4763ff09/woeid-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "923bdf7aa9854cf6f7274b67e46df2a5", "sha256": "04717ac7598096a28e767799fb504feabf92bbddfbadcaa55ac3a6d479379987"}, "downloads": -1, "filename": "woeid-1.0.0.tar.gz", "has_sig": false, "md5_digest": "923bdf7aa9854cf6f7274b67e46df2a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14378, "upload_time": "2016-07-23T03:05:08", "upload_time_iso_8601": "2016-07-23T03:05:08.075701Z", "url": "https://files.pythonhosted.org/packages/66/a4/2b5d7efc0a1309584d3e9c62e0c0246b47acc301378353c2b33f4763ff09/woeid-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:18 2020"}