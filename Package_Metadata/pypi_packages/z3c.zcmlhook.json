{"info": {"author": "Martin Aspeli", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\r\n============\r\n\r\nThis package provides means of hooking into the Zope (ZCML) configuration\r\nprocess.\r\n\r\nCustom ZCML actions\r\n-------------------\r\n\r\nIt is sometimes useful to execute a function during the execution of \r\nconfiguration actions, for example to perform one-off configuration that does\r\nnot warrant a new directive. The ``<zcml:customAction />`` directive is\r\nprovided for this purpose.\r\n\r\nFor example, you may want to call a function called\r\n``my.package.finalConfiguration()`` \"late\" in the configuration action\r\nexecution cycle. This can be achieved with the following ZCML statements::\r\n\r\n    <configure\r\n        xmlns=\"http://namespaces.zope.org/zope\"\r\n        xmlns:zcml=\"http://namespaces.zope.org/zcml\"\r\n        i18n_domain=\"my.package\">\r\n        \r\n        <include package=\"z3c.zcmlhook\" file=\"meta.zcml\" />\r\n        \r\n        <zcml:customAction\r\n            handler=\"my.package.finalConfiguration\"\r\n            order=\"9999\"\r\n            />\r\n        \r\n    </configure>\r\n\r\nThe ``handler`` attribute gives the name of a function to execute. The\r\nfunction should take no arguments. The ``order`` attribute is optional, and\r\ncan be used to influence when in the configuration cycle the function is\r\nexecuted. The default value for this, as for most Zope configuration actions,\r\nis ``0``.\r\n\r\nOverriding custom actions\r\n-------------------------\r\n\r\nIf you want to override the invocation of a custom handler in an\r\n``overrides.zcml``, you need to tell ``zope.configuration`` which handler to\r\noverride. You can do that by setting the *discriminator* explicitly. A\r\ndiscriminator is used to uniquely identify a configuration action. In the\r\ncase of the ``<zcml:customAction />`` directive, the discriminator is based\r\non the full dotted name to the function by default. Thus, you could override\r\nthe function call above like so::\r\n\r\n        <zcml:customAction\r\n            handler=\"my.otherpackage.overrideFinalConfiguration\"\r\n            discriminator=\"my.package.finalConfiguration\"\r\n            order=\"9999\"\r\n            />\r\n\r\nUsing a handler more than once\r\n------------------------------\r\n\r\nThe ``discriminator`` attribute can also be used to explicitly allow using\r\nthe same handler more than once. If you wanted to call\r\n``my.package.finalConfiguration`` again, you would normally get a\r\nconfiguration conflict. However, with a (unique) custom discriminator, the\r\nsecond call is allowed::\r\n\r\n        <zcml:customAction\r\n            handler=\"my.package.finalConfiguration\"\r\n            discriminator=\"my.package.finalConfiguration:early\"\r\n            order=\"-9999\"\r\n            />\r\n\r\n        <zcml:customAction\r\n            handler=\"my.package.finalConfiguration\"\r\n            discriminator=\"my.package.finalConfiguration:late\"\r\n            order=\"9999\"\r\n            />\r\n\r\nHere, we are attempting to call our configuration action \"very early\" as\r\nwell as \"very late\" in the configuration process.\r\n\r\nChangelog\r\n=========\r\n\r\n1.0b1 - January 2nd, 2010\r\n-------------------------\r\n\r\n* Initial release\r\n  [optilude]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "zope zcml hook", "license": "ZPL", "maintainer": "", "maintainer_email": "", "name": "z3c.zcmlhook", "package_url": "https://pypi.org/project/z3c.zcmlhook/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.zcmlhook/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/z3c.zcmlhook/1.0b1/", "requires_dist": null, "requires_python": null, "summary": "Easily hook into the ZCML processing machinery", "version": "1.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package provides means of hooking into the Zope (ZCML) configuration\nprocess.</p>\n<div id=\"custom-zcml-actions\">\n<h3>Custom ZCML actions</h3>\n<p>It is sometimes useful to execute a function during the execution of\nconfiguration actions, for example to perform one-off configuration that does\nnot warrant a new directive. The <tt>&lt;zcml:customAction /&gt;</tt> directive is\nprovided for this purpose.</p>\n<p>For example, you may want to call a function called\n<tt>my.package.finalConfiguration()</tt> \u201clate\u201d in the configuration action\nexecution cycle. This can be achieved with the following ZCML statements:</p>\n<pre>&lt;configure\n    xmlns=\"http://namespaces.zope.org/zope\"\n    xmlns:zcml=\"http://namespaces.zope.org/zcml\"\n    i18n_domain=\"my.package\"&gt;\n\n    &lt;include package=\"z3c.zcmlhook\" file=\"meta.zcml\" /&gt;\n\n    &lt;zcml:customAction\n        handler=\"my.package.finalConfiguration\"\n        order=\"9999\"\n        /&gt;\n\n&lt;/configure&gt;\n</pre>\n<p>The <tt>handler</tt> attribute gives the name of a function to execute. The\nfunction should take no arguments. The <tt>order</tt> attribute is optional, and\ncan be used to influence when in the configuration cycle the function is\nexecuted. The default value for this, as for most Zope configuration actions,\nis <tt>0</tt>.</p>\n</div>\n<div id=\"overriding-custom-actions\">\n<h3>Overriding custom actions</h3>\n<p>If you want to override the invocation of a custom handler in an\n<tt>overrides.zcml</tt>, you need to tell <tt>zope.configuration</tt> which handler to\noverride. You can do that by setting the <em>discriminator</em> explicitly. A\ndiscriminator is used to uniquely identify a configuration action. In the\ncase of the <tt>&lt;zcml:customAction /&gt;</tt> directive, the discriminator is based\non the full dotted name to the function by default. Thus, you could override\nthe function call above like so:</p>\n<pre>&lt;zcml:customAction\n    handler=\"my.otherpackage.overrideFinalConfiguration\"\n    discriminator=\"my.package.finalConfiguration\"\n    order=\"9999\"\n    /&gt;\n</pre>\n</div>\n<div id=\"using-a-handler-more-than-once\">\n<h3>Using a handler more than once</h3>\n<p>The <tt>discriminator</tt> attribute can also be used to explicitly allow using\nthe same handler more than once. If you wanted to call\n<tt>my.package.finalConfiguration</tt> again, you would normally get a\nconfiguration conflict. However, with a (unique) custom discriminator, the\nsecond call is allowed:</p>\n<pre>&lt;zcml:customAction\n    handler=\"my.package.finalConfiguration\"\n    discriminator=\"my.package.finalConfiguration:early\"\n    order=\"-9999\"\n    /&gt;\n\n&lt;zcml:customAction\n    handler=\"my.package.finalConfiguration\"\n    discriminator=\"my.package.finalConfiguration:late\"\n    order=\"9999\"\n    /&gt;\n</pre>\n<p>Here, we are attempting to call our configuration action \u201cvery early\u201d as\nwell as \u201cvery late\u201d in the configuration process.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"b1-january-2nd-2010\"><span class=\"section-subtitle\">1.0b1 - January 2nd, 2010</span></h2>\n<ul>\n<li>Initial release\n[optilude]</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 802131, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "7b6c80146f5930409eb0b355ddf3daeb", "sha256": "f0456020738a921d68b488c453e76d7dc8b5e8c890593116854f54dfcd3c1302"}, "downloads": -1, "filename": "z3c.zcmlhook-1.0b1.tar.gz", "has_sig": false, "md5_digest": "7b6c80146f5930409eb0b355ddf3daeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5450, "upload_time": "2010-01-02T13:46:07", "upload_time_iso_8601": "2010-01-02T13:46:07.367950Z", "url": "https://files.pythonhosted.org/packages/c5/da/cab04479eb7c64b52ff197c32bc92fb3b04d11ab1d6f818f68d7431b8524/z3c.zcmlhook-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b6c80146f5930409eb0b355ddf3daeb", "sha256": "f0456020738a921d68b488c453e76d7dc8b5e8c890593116854f54dfcd3c1302"}, "downloads": -1, "filename": "z3c.zcmlhook-1.0b1.tar.gz", "has_sig": false, "md5_digest": "7b6c80146f5930409eb0b355ddf3daeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5450, "upload_time": "2010-01-02T13:46:07", "upload_time_iso_8601": "2010-01-02T13:46:07.367950Z", "url": "https://files.pythonhosted.org/packages/c5/da/cab04479eb7c64b52ff197c32bc92fb3b04d11ab1d6f818f68d7431b8524/z3c.zcmlhook-1.0b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:15 2020"}