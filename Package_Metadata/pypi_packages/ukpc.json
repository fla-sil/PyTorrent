{"info": {"author": "Paul Wolf", "author_email": "paul.wolf@yewleaf.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "UKPC\n====\n\n|Build Status|\n\nukpc is a Python module that parses United Kingdom postcode strings into\nconstituent parts:\n\n-  area\n-  district\n-  sector\n-  unit\n\nInstall:\n\n::\n\n    pip install ukpc\n\nCurrently, only Python 3.x is supported. Let me know if you need 2.7+\nsupport.\n\nUsage:\n\n::\n\n    >>> from ukpc import PostCode\n    pc = PostCode('NW3 2RR')\n    >>> str(pc)\n    'area=NW, district=3, sector=2, unit=RR'\n\nYou can get parts with properties as expected. We also provide\n``PostCode.farea``, ``PostCode.fdistrict``, ``PostCode.fsector``,\n``PostCode.funit`` properties. Some people refer to sector as the\ncumulative postcode up to and including sector rather than just the\nsector number:\n\n::\n\n    >>> pc.sector\n    '2'\n    >>> pc.fsector\n    'NW3 2'\n\n``farea`` and ``area`` are the same. ``funit`` is the input string, the\nfull postcode.\n\nThere is not too much validation and no reformatting of postcodes! An\nexception will be thrown if the parser can't parse the string. The\nparser expects well-formed, upper-case strings as input. If you want to\nvalidate or format postcodes, there are some other projects that appear\nto do this well:\n\nhttps://github.com/andersonbispo/ukpcode\n\nhttps://github.com/hamstah/ukpostcodeparser/blob/master/ukpostcodeparser/parser.py\n\nWe also provide a utility for reading a file of postcodes. The file is\nexpected to be csv and the first column only is read as a well-formed,\nupper-case postcode.\n\n::\n\n    from ukpc.utils import iterate_file\n    iterate_file(path, callback=store_pc_in_database)\n\n``callback`` is any callable that you must provide. This will cause\n``store_pc_in_database()`` to be called with a ``PostCode`` instance.\n\nThere is also a command line util that calls ``iterate_file()``:\n\n::\n\n    (.env)\u279c  ukpc python -m ukpc.utils postcodes.csv  --stats\n    time in secs: 27\n    areas: 123\n    districts: 3089\n    sectors: 12302\n    units: 401\n\nGet a list of all postcodes with geo information here:\n\nhttps://www.doogal.co.uk/PostcodeDownloads.php\n\nWe follow this specification:\n\nhttps://www.mrs.org.uk/pdf/postcodeformat.pdf\n\nTesting\n-------\n\n::\n\n    pip install pytest\n    cd logtrace\n    pytest test.py --verbose\n\nor\n\n::\n\n    python3 logtrace/test.py\n\nPerformance\n-----------\n\n.. |Build Status| image:: https://travis-ci.org/paul-wolf/ukpc.svg?branch=master\n   :target: https://travis-ci.org/paul-wolf/ukpc", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paul-wolf/ukpc", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "ukpc", "package_url": "https://pypi.org/project/ukpc/", "platform": "", "project_url": "https://pypi.org/project/ukpc/", "project_urls": {"Homepage": "https://github.com/paul-wolf/ukpc"}, "release_url": "https://pypi.org/project/ukpc/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Parse United Kingdom postal codes", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/paul-wolf/ukpc\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef3b55c3cb942d3b6182809929ab4dab2fda69ee/68747470733a2f2f7472617669732d63692e6f72672f7061756c2d776f6c662f756b70632e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>ukpc is a Python module that parses United Kingdom postcode strings into\nconstituent parts:</p>\n<ul>\n<li>area</li>\n<li>district</li>\n<li>sector</li>\n<li>unit</li>\n</ul>\n<p>Install:</p>\n<pre>pip install ukpc\n</pre>\n<p>Currently, only Python 3.x is supported. Let me know if you need 2.7+\nsupport.</p>\n<p>Usage:</p>\n<pre>&gt;&gt;&gt; from ukpc import PostCode\npc = PostCode('NW3 2RR')\n&gt;&gt;&gt; str(pc)\n'area=NW, district=3, sector=2, unit=RR'\n</pre>\n<p>You can get parts with properties as expected. We also provide\n<tt>PostCode.farea</tt>, <tt>PostCode.fdistrict</tt>, <tt>PostCode.fsector</tt>,\n<tt>PostCode.funit</tt> properties. Some people refer to sector as the\ncumulative postcode up to and including sector rather than just the\nsector number:</p>\n<pre>&gt;&gt;&gt; pc.sector\n'2'\n&gt;&gt;&gt; pc.fsector\n'NW3 2'\n</pre>\n<p><tt>farea</tt> and <tt>area</tt> are the same. <tt>funit</tt> is the input string, the\nfull postcode.</p>\n<p>There is not too much validation and no reformatting of postcodes! An\nexception will be thrown if the parser can\u2019t parse the string. The\nparser expects well-formed, upper-case strings as input. If you want to\nvalidate or format postcodes, there are some other projects that appear\nto do this well:</p>\n<p><a href=\"https://github.com/andersonbispo/ukpcode\" rel=\"nofollow\">https://github.com/andersonbispo/ukpcode</a></p>\n<p><a href=\"https://github.com/hamstah/ukpostcodeparser/blob/master/ukpostcodeparser/parser.py\" rel=\"nofollow\">https://github.com/hamstah/ukpostcodeparser/blob/master/ukpostcodeparser/parser.py</a></p>\n<p>We also provide a utility for reading a file of postcodes. The file is\nexpected to be csv and the first column only is read as a well-formed,\nupper-case postcode.</p>\n<pre>from ukpc.utils import iterate_file\niterate_file(path, callback=store_pc_in_database)\n</pre>\n<p><tt>callback</tt> is any callable that you must provide. This will cause\n<tt>store_pc_in_database()</tt> to be called with a <tt>PostCode</tt> instance.</p>\n<p>There is also a command line util that calls <tt>iterate_file()</tt>:</p>\n<pre>(.env)\u279c  ukpc python -m ukpc.utils postcodes.csv  --stats\ntime in secs: 27\nareas: 123\ndistricts: 3089\nsectors: 12302\nunits: 401\n</pre>\n<p>Get a list of all postcodes with geo information here:</p>\n<p><a href=\"https://www.doogal.co.uk/PostcodeDownloads.php\" rel=\"nofollow\">https://www.doogal.co.uk/PostcodeDownloads.php</a></p>\n<p>We follow this specification:</p>\n<p><a href=\"https://www.mrs.org.uk/pdf/postcodeformat.pdf\" rel=\"nofollow\">https://www.mrs.org.uk/pdf/postcodeformat.pdf</a></p>\n<div id=\"testing\">\n<h2>Testing</h2>\n<pre>pip install pytest\ncd logtrace\npytest test.py --verbose\n</pre>\n<p>or</p>\n<pre>python3 logtrace/test.py\n</pre>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n</div>\n\n          </div>"}, "last_serial": 3510303, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b61d9f1bca78adaedda73f6fa7825e9e", "sha256": "72ad8ffb17738d8f66ad045464ddfb6039197cc19aef4e07a886ce6962186377"}, "downloads": -1, "filename": "ukpc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b61d9f1bca78adaedda73f6fa7825e9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5041, "upload_time": "2018-01-22T07:04:58", "upload_time_iso_8601": "2018-01-22T07:04:58.046989Z", "url": "https://files.pythonhosted.org/packages/e9/67/dc42bedb9a3f8151265408909166b0742b6303051b37a098be0c2c06d07e/ukpc-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b61d9f1bca78adaedda73f6fa7825e9e", "sha256": "72ad8ffb17738d8f66ad045464ddfb6039197cc19aef4e07a886ce6962186377"}, "downloads": -1, "filename": "ukpc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b61d9f1bca78adaedda73f6fa7825e9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5041, "upload_time": "2018-01-22T07:04:58", "upload_time_iso_8601": "2018-01-22T07:04:58.046989Z", "url": "https://files.pythonhosted.org/packages/e9/67/dc42bedb9a3f8151265408909166b0742b6303051b37a098be0c2c06d07e/ukpc-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:17 2020"}