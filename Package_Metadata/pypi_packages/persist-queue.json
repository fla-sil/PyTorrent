{"info": {"author": "Peter Wang", "author_email": "wangxu198709@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation", "Topic :: Software Development :: Libraries"], "description": "persist-queue - A thread-safe, disk-based queue for Python\n==========================================================\n\n.. image:: https://img.shields.io/circleci/project/github/peter-wangxu/persist-queue/master.svg?label=Linux%20%26%20Mac\n    :target: https://circleci.com/gh/peter-wangxu/persist-queue\n\n.. image:: https://img.shields.io/appveyor/ci/peter-wangxu/persist-queue/master.svg?label=Windows\n    :target: https://ci.appveyor.com/project/peter-wangxu/persist-queue\n\n.. image:: https://img.shields.io/codecov/c/github/peter-wangxu/persist-queue/master.svg\n    :target: https://codecov.io/gh/peter-wangxu/persist-queue\n\n.. image:: https://img.shields.io/pypi/v/persist-queue.svg\n    :target: https://pypi.python.org/pypi/persist-queue\n\n``persist-queue`` implements a file-based queue and a serial of sqlite3-based queues. The goals is to achieve following requirements:\n\n* Disk-based: each queued item should be stored in disk in case of any crash.\n* Thread-safe: can be used by multi-threaded producers and multi-threaded consumers.\n* Recoverable: Items can be read after process restart.\n* Green-compatible: can be used in ``greenlet`` or ``eventlet`` environment.\n\nWhile *queuelib* and *python-pqueue* cannot fulfil all of above. After some try, I found it's hard to achieve based on their current\nimplementation without huge code change. this is the motivation to start this project.\n\nBy default, *persist-queue* use *pickle* object serialization module to support object instances.\nMost built-in type, like `int`, `dict`, `list` are able to be persisted by `persist-queue` directly, to support customized objects,\nplease refer to `Pickling and unpickling extension types(Python2) <https://docs.python.org/2/library/pickle.html#pickling-and-unpickling-normal-class-instances>`_\nand `Pickling Class Instances(Python3) <https://docs.python.org/3/library/pickle.html#pickling-class-instances>`_\n\nThis project is based on the achievements of `python-pqueue <https://github.com/balena/python-pqueue>`_\nand `queuelib <https://github.com/scrapy/queuelib>`_\n\nRequirements\n------------\n* Python 2.7 or Python 3.x.\n* Full support for Linux.\n* Windows support (with `Caution`_ if ``persistqueue.Queue`` is used).\n\nFeatures\n--------\n\n- Multiple platforms support: Linux, macOS, Windows\n- Pure python\n- Both filed based queues and sqlite3 based queues are supported\n- Filed based queue: multiple serialization protocol support: pickle(default), msgpack, json\n\n\n\nInstallation\n------------\n\nfrom pypi\n^^^^^^^^^\n\n.. code-block:: console\n\n    pip install persist-queue\n    # for msgpack support, use following command\n    pip install persist-queue[extra]\n\n\nfrom source code\n^^^^^^^^^^^^^^^^\n\n.. code-block:: console\n\n    git clone https://github.com/peter-wangxu/persist-queue\n    cd persist-queue\n    # for msgpack support, run 'pip install -r extra-requirements.txt' first\n    python setup.py install\n\n\nBenchmark\n---------\n\nHere are the results for writing/reading **1000** items to the disk comparing the sqlite3 and file queue.\n\n- Windows\n    - OS: Windows 10\n    - Disk: SATA3 SSD\n    - RAM: 16 GiB\n\n+---------------+---------+-------------------------+----------------------------+\n|               | Write   | Write/Read(1 task_done) | Write/Read(many task_done) |\n+---------------+---------+-------------------------+----------------------------+\n| SQLite3 Queue | 1.8880  | 2.0290                  | 3.5940                     |\n+---------------+---------+-------------------------+----------------------------+\n| File Queue    | 4.9520  | 5.0560                  | 8.4900                     |\n+---------------+---------+-------------------------+----------------------------+\n\n**windows note**\nPerformance of Windows File Queue has dramatic improvement since `v0.4.1` due to the\natomic renaming support(3-4X faster)\n\n- Linux\n    - OS: Ubuntu 16.04 (VM)\n    - Disk: SATA3 SSD\n    - RAM:  4 GiB\n\n+---------------+--------+-------------------------+----------------------------+\n|               | Write  | Write/Read(1 task_done) | Write/Read(many task_done) |\n+---------------+--------+-------------------------+----------------------------+\n| SQLite3 Queue | 1.8282 | 1.8075                  | 2.8639                     |\n+---------------+--------+-------------------------+----------------------------+\n| File Queue    | 0.9123 | 1.0411                  | 2.5104                     |\n+---------------+--------+-------------------------+----------------------------+\n\n- Mac OS\n    - OS: 10.14 (macOS Mojave)\n    - Disk: PCIe SSD\n    - RAM:  16 GiB\n\n+---------------+--------+-------------------------+----------------------------+\n|               | Write  | Write/Read(1 task_done) | Write/Read(many task_done) |\n+---------------+--------+-------------------------+----------------------------+\n| SQLite3 Queue | 0.1879 | 0.2115                  | 0.3147                     |\n+---------------+--------+-------------------------+----------------------------+\n| File Queue    | 0.5158 | 0.5357                  | 1.0446                     |\n+---------------+--------+-------------------------+----------------------------+\n\n**note**\n\n- The value above is seconds for reading/writing *1000* items, the less the better.\n- Above result was got from:\n\n.. code-block:: console\n\n    python benchmark/run_benchmark.py 1000\n\n\nTo see the real performance on your host, run the script under ``benchmark/run_benchmark.py``:\n\n.. code-block:: console\n\n    python benchmark/run_benchmark.py <COUNT, default to 100>\n\n\nExamples\n--------\n\n\nExample usage with a SQLite3 based queue\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    >>> import persistqueue\n    >>> q = persistqueue.SQLiteQueue('mypath', auto_commit=True)\n    >>> q.put('str1')\n    >>> q.put('str2')\n    >>> q.put('str3')\n    >>> q.get()\n    'str1'\n    >>> del q\n\n\nClose the console, and then recreate the queue:\n\n.. code-block:: python\n\n   >>> import persistqueue\n   >>> q = persistqueue.SQLiteQueue('mypath', auto_commit=True)\n   >>> q.get()\n   'str2'\n   >>>\n\n\nExample usage of SQLite3 based ``UniqueQ``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThis queue does not allow duplicate items.\n\n.. code-block:: python\n\n   >>> import persistqueue\n   >>> q = persistqueue.UniqueQ('mypath')\n   >>> q.put('str1')\n   >>> q.put('str1')\n   >>> q.size\n   1\n   >>> q.put('str2')\n   >>> q.size\n   2\n   >>>\n\nExample usage of SQLite3 based ``SQLiteAckQueue``/``UniqueAckQ``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThe core functions:\n\n- ``get``: get from queue and mark item as unack\n- ``ack``: mark item as acked\n- ``nack``: there might be something wrong with current consumer, so mark item as ready and new consumer will get it\n- ``ack_failed``: there might be something wrong during process, so just mark item as failed.\n\n.. code-block:: python\n\n   >>> import persistqueue\n   >>> ackq = persistqueue.SQLiteAckQueue('path')\n   >>> ackq.put('str1')\n   >>> item = ackq.get()\n   >>> # Do something with the item\n   >>> ackq.ack(item) # If done with the item\n   >>> ackq.nack(item) # Else mark item as `nack` so that it can be proceeded again by any worker\n   >>> ackq.ack_failed(item) # Or else mark item as `ack_failed` to discard this item\n\n\n\nNote: \n1. The SQLiteAckQueue always uses \"auto_commit=True\".\n2. The Queue could be set in non-block style, e.g. \"SQLiteAckQueue.get(block=False, timeout=5)\".\n3. ``UniqueAckQ`` only allows for unique items\n\nExample usage with a file based queue\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    >>> from persistqueue import Queue\n    >>> q = Queue(\"mypath\")\n    >>> q.put('a')\n    >>> q.put('b')\n    >>> q.put('c')\n    >>> q.get()\n    'a'\n    >>> q.task_done()\n\nClose the python console, and then we restart the queue from the same path,\n\n.. code-block:: python\n\n    >>> from persistqueue import Queue\n    >>> q = Queue('mypath')\n    >>> q.get()\n    'b'\n    >>> q.task_done()\n\nExample usage with an auto-saving file based queue\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*Available since: v0.5.0*\n\nBy default, items added to the queue are persisted during the ``put()`` call,\nand items removed from a queue are only persisted when ``task_done()`` is\ncalled.\n\n.. code-block:: python\n\n    >>> from persistqueue import Queue\n    >>> q = Queue(\"mypath\")\n    >>> q.put('a')\n    >>> q.put('b')\n    >>> q.get()\n    'a'\n    >>> q.get()\n    'b'\n\nAfter exiting and restarting the queue from the same path, we see the items\nremain in the queue, because ``task_done()`` wasn't called before.\n\n.. code-block:: python\n\n    >>> from persistqueue import Queue\n    >>> q = Queue('mypath')\n    >>> q.get()\n    'a'\n    >>> q.get()\n    'b'\n\nThis can be advantageous. For example, if your program crashes before finishing\nprocessing an item, it will remain in the queue after restarting. You can also\nspread out the ``task_done()`` calls for performance reasons to avoid lots of\nindividual writes.\n\nUsing ``autosave=True`` on a file based queue will automatically save on every\ncall to ``get()``. Calling ``task_done()`` is not necessary, but may still be\nused to ``join()`` against the queue.\n\n.. code-block:: python\n\n    >>> from persistqueue import Queue\n    >>> q = Queue(\"mypath\", autosave=True)\n    >>> q.put('a')\n    >>> q.put('b')\n    >>> q.get()\n    'a'\n\nAfter exiting and restarting the queue from the same path, only the second item\nremains:\n\n.. code-block:: python\n\n    >>> from persistqueue import Queue\n    >>> q = Queue('mypath', autosave=True)\n    >>> q.get()\n    'b'\n\n\nExample usage with a SQLite3 based dict\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    >>> from persisitqueue import PDict\n    >>> q = PDict(\"testpath\", \"testname\")\n    >>> q['key1'] = 123\n    >>> q['key2'] = 321\n    >>> q['key1']\n    123\n    >>> len(q)\n    2\n    >>> del q['key1']\n    >>> q['key1']\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"persistqueue\\pdict.py\", line 58, in __getitem__\n        raise KeyError('Key: {} not exists.'.format(item))\n    KeyError: 'Key: key1 not exists.'\n\nClose the console and restart the PDict\n\n\n.. code-block:: python\n\n    >>> from persisitqueue import PDict\n    >>> q = PDict(\"testpath\", \"testname\")\n    >>> q['key2']\n    321\n\n\nMulti-thread usage for **SQLite3** based queue\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from persistqueue import FIFOSQLiteQueue\n\n    q = FIFOSQLiteQueue(path=\"./test\", multithreading=True)\n\n    def worker():\n        while True:\n            item = q.get()\n            do_work(item)\n\n    for i in range(num_worker_threads):\n         t = Thread(target=worker)\n         t.daemon = True\n         t.start()\n\n    for item in source():\n        q.put(item)\n\n\nmulti-thread usage for **Queue**\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from persistqueue import Queue\n\n    q = Queue()\n\n    def worker():\n        while True:\n            item = q.get()\n            do_work(item)\n            q.task_done()\n\n    for i in range(num_worker_threads):\n         t = Thread(target=worker)\n         t.daemon = True\n         t.start()\n\n    for item in source():\n        q.put(item)\n\n    q.join()       # block until all tasks are done\n\n\n**note**\n\nDue to the limitation of file queue described in issue `#89 <https://github.com/peter-wangxu/persist-queue/issues/89>`_,\n`task_done` in one thread may acknowledge items in other threads which should not be. Considering the `SQLiteAckQueue` if you have such requirement.\n\n\nSerialization via msgpack/json\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n- v0.4.1: Currently only available for file based Queue\n- v0.4.2: Also available for SQLite3 based Queues\n\n.. code-block:: python\n\n    >>> from persistqueue\n    >>> q = persistqueue.Queue('mypath', persistqueue.serializers.msgpack)\n    >>> # via json\n    >>> # q = Queue('mypath', persistqueue.serializers.json)\n    >>> q.get()\n    'b'\n    >>> q.task_done()\n\nExplicit resource reclaim\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor some reasons, an application may require explicit reclamation for file\nhandles or sql connections before end of execution. In these cases, user can\nsimply call:\n.. code-block:: python\n\n    q = Queue() # or q = persistqueue.SQLiteQueue('mypath', auto_commit=True)\n    del q\n\n\nto reclaim related file handles or sql connections.\n\nTips\n----\n\n``task_done`` is required both for file based queue and SQLite3 based queue (when ``auto_commit=False``)\nto persist the cursor of next ``get`` to the disk.\n\n\nPerformance impact\n------------------\n\n- **WAL**\n\n  Starting on v0.3.2, the ``persistqueue`` is leveraging the sqlite3 builtin feature\n  `WAL <https://www.sqlite.org/wal.html>`_ which can improve the performance\n  significantly, a general testing indicates that ``persistqueue`` is 2-4 times\n  faster than previous version.\n\n- **auto_commit=False**\n\n  Since persistqueue v0.3.0, a new parameter ``auto_commit`` is introduced to tweak\n  the performance for sqlite3 based queues as needed. When specify ``auto_commit=False``, user\n  needs to perform ``queue.task_done()`` to persist the changes made to the disk since\n  last ``task_done`` invocation.\n\n- **pickle protocol selection**\n\n  From v0.3.6, the ``persistqueue`` will select ``Protocol version 2`` for python2 and ``Protocol version 4`` for python3\n  respectively. This selection only happens when the directory is not present when initializing the queue.\n\nTests\n-----\n\n*persist-queue* use ``tox`` to trigger tests.\n\n- Unit test\n\n.. code-block:: console\n\n    tox -e <PYTHON_VERSION>\n\nAvailable ``<PYTHON_VERSION>``: ``py27``, ``py34``, ``py35``, ``py36``, ``py37``\n\n\n- PEP8 check\n\n.. code-block:: console\n\n   tox -e pep8\n\n\n`pyenv <https://github.com/pyenv/pyenv>`_ is usually a helpful tool to manage multiple versions of Python.\n\nCaution\n-------\n\nCurrently, the atomic operation is supported on Windows while still in experimental,\nThat's saying, the data in ``persistqueue.Queue`` could be in unreadable state when an incidental failure occurs during ``Queue.task_done``.\n\n**DO NOT put any critical data on persistqueue.queue on Windows**.\n\n\nContribution\n------------\n\nSimply fork this repo and send PR for your code change(also tests to cover your change), remember to give a title and description of your PR. I am willing to\nenhance this project with you :).\n\n\nLicense\n-------\n\n`BSD <LICENSE>`_\n\nContributors\n------------\n\n`Contributors <https://github.com/peter-wangxu/persist-queue/graphs/contributors>`_\n\nFAQ\n---\n\n* ``sqlite3.OperationalError: database is locked`` is raised.\n\npersistqueue open 2 connections for the db if ``multithreading=True``, the\nSQLite database is locked until that transaction is committed. The ``timeout``\nparameter specifies how long the connection should wait for the lock to go away\nuntil raising an exception. Default time is **10**, increase ``timeout``\nwhen creating the queue if above error occurs.\n\n* sqlite3 based queues are not thread-safe.\n\nThe sqlite3 queues are heavily tested under multi-threading environment, if you find it's not thread-safe, please\nmake sure you set the ``multithreading=True`` when initializing the queue before submitting new issue:).\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/peter-wangxu/persist-queue", "keywords": "", "license": "BSD", "maintainer": "Peter Wang", "maintainer_email": "wangxu198709@gmail.com", "name": "persist-queue", "package_url": "https://pypi.org/project/persist-queue/", "platform": "all", "project_url": "https://pypi.org/project/persist-queue/", "project_urls": {"Homepage": "http://github.com/peter-wangxu/persist-queue"}, "release_url": "https://pypi.org/project/persist-queue/0.5.0/", "requires_dist": ["msgpack (>=0.5.6) ; extra == 'extra'"], "requires_python": "", "summary": "A thread-safe disk based persistent queue in Python.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://circleci.com/gh/peter-wangxu/persist-queue\" rel=\"nofollow\"><img alt=\"https://img.shields.io/circleci/project/github/peter-wangxu/persist-queue/master.svg?label=Linux%20%26%20Mac\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7aa2d379456c623779ab1bb728832340d852c050/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f70657465722d77616e6778752f706572736973742d71756575652f6d61737465722e7376673f6c6162656c3d4c696e75782532302532362532304d6163\"></a>\n<a href=\"https://ci.appveyor.com/project/peter-wangxu/persist-queue\" rel=\"nofollow\"><img alt=\"https://img.shields.io/appveyor/ci/peter-wangxu/persist-queue/master.svg?label=Windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3254af2abd467433dad38bce0b9fcc7186c9ce5/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f70657465722d77616e6778752f706572736973742d71756575652f6d61737465722e7376673f6c6162656c3d57696e646f7773\"></a>\n<a href=\"https://codecov.io/gh/peter-wangxu/persist-queue\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/peter-wangxu/persist-queue/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be46d7a312df41643d4e851d38283c9cae09973b/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f70657465722d77616e6778752f706572736973742d71756575652f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/persist-queue\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/persist-queue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1b1a2cdb82fb85bb2640df8a1863df52a777aa5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706572736973742d71756575652e737667\"></a>\n<p><tt><span class=\"pre\">persist-queue</span></tt> implements a file-based queue and a serial of sqlite3-based queues. The goals is to achieve following requirements:</p>\n<ul>\n<li>Disk-based: each queued item should be stored in disk in case of any crash.</li>\n<li>Thread-safe: can be used by multi-threaded producers and multi-threaded consumers.</li>\n<li>Recoverable: Items can be read after process restart.</li>\n<li>Green-compatible: can be used in <tt>greenlet</tt> or <tt>eventlet</tt> environment.</li>\n</ul>\n<p>While <em>queuelib</em> and <em>python-pqueue</em> cannot fulfil all of above. After some try, I found it\u2019s hard to achieve based on their current\nimplementation without huge code change. this is the motivation to start this project.</p>\n<p>By default, <em>persist-queue</em> use <em>pickle</em> object serialization module to support object instances.\nMost built-in type, like <cite>int</cite>, <cite>dict</cite>, <cite>list</cite> are able to be persisted by <cite>persist-queue</cite> directly, to support customized objects,\nplease refer to <a href=\"https://docs.python.org/2/library/pickle.html#pickling-and-unpickling-normal-class-instances\" rel=\"nofollow\">Pickling and unpickling extension types(Python2)</a>\nand <a href=\"https://docs.python.org/3/library/pickle.html#pickling-class-instances\" rel=\"nofollow\">Pickling Class Instances(Python3)</a></p>\n<p>This project is based on the achievements of <a href=\"https://github.com/balena/python-pqueue\" rel=\"nofollow\">python-pqueue</a>\nand <a href=\"https://github.com/scrapy/queuelib\" rel=\"nofollow\">queuelib</a></p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or Python 3.x.</li>\n<li>Full support for Linux.</li>\n<li>Windows support (with <a href=\"#caution\" rel=\"nofollow\">Caution</a> if <tt>persistqueue.Queue</tt> is used).</li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Multiple platforms support: Linux, macOS, Windows</li>\n<li>Pure python</li>\n<li>Both filed based queues and sqlite3 based queues are supported</li>\n<li>Filed based queue: multiple serialization protocol support: pickle(default), msgpack, json</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"from-pypi\">\n<h3>from pypi</h3>\n<pre><span class=\"go\">pip install persist-queue\n</span><span class=\"gp\">#</span> <span class=\"k\">for</span> msgpack support, use following <span class=\"nb\">command</span>\n<span class=\"go\">pip install persist-queue[extra]</span>\n</pre>\n</div>\n<div id=\"from-source-code\">\n<h3>from source code</h3>\n<pre><span class=\"go\">git clone https://github.com/peter-wangxu/persist-queue\ncd persist-queue\n</span><span class=\"gp\">#</span> <span class=\"k\">for</span> msgpack support, run <span class=\"s1\">'pip install -r extra-requirements.txt'</span> first\n<span class=\"go\">python setup.py install</span>\n</pre>\n</div>\n</div>\n<div id=\"benchmark\">\n<h2>Benchmark</h2>\n<p>Here are the results for writing/reading <strong>1000</strong> items to the disk comparing the sqlite3 and file queue.</p>\n<ul>\n<li><dl>\n<dt>Windows</dt>\n<dd><ul>\n<li>OS: Windows 10</li>\n<li>Disk: SATA3 SSD</li>\n<li>RAM: 16 GiB</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>\u00a0</td>\n<td>Write</td>\n<td>Write/Read(1 task_done)</td>\n<td>Write/Read(many task_done)</td>\n</tr>\n<tr><td>SQLite3 Queue</td>\n<td>1.8880</td>\n<td>2.0290</td>\n<td>3.5940</td>\n</tr>\n<tr><td>File Queue</td>\n<td>4.9520</td>\n<td>5.0560</td>\n<td>8.4900</td>\n</tr>\n</tbody>\n</table>\n<p><strong>windows note</strong>\nPerformance of Windows File Queue has dramatic improvement since <cite>v0.4.1</cite> due to the\natomic renaming support(3-4X faster)</p>\n<ul>\n<li><dl>\n<dt>Linux</dt>\n<dd><ul>\n<li>OS: Ubuntu 16.04 (VM)</li>\n<li>Disk: SATA3 SSD</li>\n<li>RAM:  4 GiB</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>\u00a0</td>\n<td>Write</td>\n<td>Write/Read(1 task_done)</td>\n<td>Write/Read(many task_done)</td>\n</tr>\n<tr><td>SQLite3 Queue</td>\n<td>1.8282</td>\n<td>1.8075</td>\n<td>2.8639</td>\n</tr>\n<tr><td>File Queue</td>\n<td>0.9123</td>\n<td>1.0411</td>\n<td>2.5104</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><dl>\n<dt>Mac OS</dt>\n<dd><ul>\n<li>OS: 10.14 (macOS Mojave)</li>\n<li>Disk: PCIe SSD</li>\n<li>RAM:  16 GiB</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>\u00a0</td>\n<td>Write</td>\n<td>Write/Read(1 task_done)</td>\n<td>Write/Read(many task_done)</td>\n</tr>\n<tr><td>SQLite3 Queue</td>\n<td>0.1879</td>\n<td>0.2115</td>\n<td>0.3147</td>\n</tr>\n<tr><td>File Queue</td>\n<td>0.5158</td>\n<td>0.5357</td>\n<td>1.0446</td>\n</tr>\n</tbody>\n</table>\n<p><strong>note</strong></p>\n<ul>\n<li>The value above is seconds for reading/writing <em>1000</em> items, the less the better.</li>\n<li>Above result was got from:</li>\n</ul>\n<pre><span class=\"go\">python benchmark/run_benchmark.py 1000</span>\n</pre>\n<p>To see the real performance on your host, run the script under <tt>benchmark/run_benchmark.py</tt>:</p>\n<pre><span class=\"go\">python benchmark/run_benchmark.py &lt;COUNT, default to 100&gt;</span>\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"example-usage-with-a-sqlite3-based-queue\">\n<h3>Example usage with a SQLite3 based queue</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">persistqueue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">persistqueue</span><span class=\"o\">.</span><span class=\"n\">SQLiteQueue</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">,</span> <span class=\"n\">auto_commit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str3'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'str1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">q</span>\n</pre>\n<p>Close the console, and then recreate the queue:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">persistqueue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">persistqueue</span><span class=\"o\">.</span><span class=\"n\">SQLiteQueue</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">,</span> <span class=\"n\">auto_commit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'str2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"example-usage-of-sqlite3-based-uniqueq\">\n<h3>Example usage of SQLite3 based <tt>UniqueQ</tt></h3>\n<p>This queue does not allow duplicate items.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">persistqueue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">persistqueue</span><span class=\"o\">.</span><span class=\"n\">UniqueQ</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"example-usage-of-sqlite3-based-sqliteackqueue-uniqueackq\">\n<h3>Example usage of SQLite3 based <tt>SQLiteAckQueue</tt>/<tt>UniqueAckQ</tt></h3>\n<p>The core functions:</p>\n<ul>\n<li><tt>get</tt>: get from queue and mark item as unack</li>\n<li><tt>ack</tt>: mark item as acked</li>\n<li><tt>nack</tt>: there might be something wrong with current consumer, so mark item as ready and new consumer will get it</li>\n<li><tt>ack_failed</tt>: there might be something wrong during process, so just mark item as failed.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">persistqueue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ackq</span> <span class=\"o\">=</span> <span class=\"n\">persistqueue</span><span class=\"o\">.</span><span class=\"n\">SQLiteAckQueue</span><span class=\"p\">(</span><span class=\"s1\">'path'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ackq</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'str1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">ackq</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Do something with the item</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ackq</span><span class=\"o\">.</span><span class=\"n\">ack</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"c1\"># If done with the item</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ackq</span><span class=\"o\">.</span><span class=\"n\">nack</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"c1\"># Else mark item as `nack` so that it can be proceeded again by any worker</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ackq</span><span class=\"o\">.</span><span class=\"n\">ack_failed</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"c1\"># Or else mark item as `ack_failed` to discard this item</span>\n</pre>\n<p>Note:\n1. The SQLiteAckQueue always uses \u201cauto_commit=True\u201d.\n2. The Queue could be set in non-block style, e.g. \u201cSQLiteAckQueue.get(block=False, timeout=5)\u201d.\n3. <tt>UniqueAckQ</tt> only allows for unique items</p>\n</div>\n<div id=\"example-usage-with-a-file-based-queue\">\n<h3>Example usage with a file based queue</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s2\">\"mypath\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">task_done</span><span class=\"p\">()</span>\n</pre>\n<p>Close the python console, and then we restart the queue from the same path,</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">task_done</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"example-usage-with-an-auto-saving-file-based-queue\">\n<h3>Example usage with an auto-saving file based queue</h3>\n<p><em>Available since: v0.5.0</em></p>\n<p>By default, items added to the queue are persisted during the <tt>put()</tt> call,\nand items removed from a queue are only persisted when <tt>task_done()</tt> is\ncalled.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s2\">\"mypath\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'b'</span>\n</pre>\n<p>After exiting and restarting the queue from the same path, we see the items\nremain in the queue, because <tt>task_done()</tt> wasn\u2019t called before.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'b'</span>\n</pre>\n<p>This can be advantageous. For example, if your program crashes before finishing\nprocessing an item, it will remain in the queue after restarting. You can also\nspread out the <tt>task_done()</tt> calls for performance reasons to avoid lots of\nindividual writes.</p>\n<p>Using <tt>autosave=True</tt> on a file based queue will automatically save on every\ncall to <tt>get()</tt>. Calling <tt>task_done()</tt> is not necessary, but may still be\nused to <tt>join()</tt> against the queue.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s2\">\"mypath\"</span><span class=\"p\">,</span> <span class=\"n\">autosave</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'a'</span>\n</pre>\n<p>After exiting and restarting the queue from the same path, only the second item\nremains:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">,</span> <span class=\"n\">autosave</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'b'</span>\n</pre>\n</div>\n<div id=\"example-usage-with-a-sqlite3-based-dict\">\n<h3>Example usage with a SQLite3 based dict</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persisitqueue</span> <span class=\"kn\">import</span> <span class=\"n\">PDict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">PDict</span><span class=\"p\">(</span><span class=\"s2\">\"testpath\"</span><span class=\"p\">,</span> <span class=\"s2\">\"testname\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s1\">'key2'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">321</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span>\n<span class=\"mi\">123</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"persistqueue\\pdict.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__getitem__</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s1\">'Key: </span><span class=\"si\">{}</span><span class=\"s1\"> not exists.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"s1\">'Key: key1 not exists.'</span>\n</pre>\n<p>Close the console and restart the PDict</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persisitqueue</span> <span class=\"kn\">import</span> <span class=\"n\">PDict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">PDict</span><span class=\"p\">(</span><span class=\"s2\">\"testpath\"</span><span class=\"p\">,</span> <span class=\"s2\">\"testname\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s1\">'key2'</span><span class=\"p\">]</span>\n<span class=\"mi\">321</span>\n</pre>\n</div>\n<div id=\"multi-thread-usage-for-sqlite3-based-queue\">\n<h3>Multi-thread usage for <strong>SQLite3</strong> based queue</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">FIFOSQLiteQueue</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">FIFOSQLiteQueue</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"./test\"</span><span class=\"p\">,</span> <span class=\"n\">multithreading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">worker</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"n\">do_work</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_worker_threads</span><span class=\"p\">):</span>\n     <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">worker</span><span class=\"p\">)</span>\n     <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n     <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">source</span><span class=\"p\">():</span>\n    <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"multi-thread-usage-for-queue\">\n<h3>multi-thread usage for <strong>Queue</strong></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">worker</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"n\">do_work</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">task_done</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_worker_threads</span><span class=\"p\">):</span>\n     <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">worker</span><span class=\"p\">)</span>\n     <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n     <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">source</span><span class=\"p\">():</span>\n    <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>       <span class=\"c1\"># block until all tasks are done</span>\n</pre>\n<p><strong>note</strong></p>\n<p>Due to the limitation of file queue described in issue <a href=\"https://github.com/peter-wangxu/persist-queue/issues/89\" rel=\"nofollow\">#89</a>,\n<cite>task_done</cite> in one thread may acknowledge items in other threads which should not be. Considering the <cite>SQLiteAckQueue</cite> if you have such requirement.</p>\n</div>\n<div id=\"serialization-via-msgpack-json\">\n<h3>Serialization via msgpack/json</h3>\n<ul>\n<li>v0.4.1: Currently only available for file based Queue</li>\n<li>v0.4.2: Also available for SQLite3 based Queues</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">persistqueue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">persistqueue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s1\">'mypath'</span><span class=\"p\">,</span> <span class=\"n\">persistqueue</span><span class=\"o\">.</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">msgpack</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># via json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># q = Queue('mypath', persistqueue.serializers.json)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">task_done</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"explicit-resource-reclaim\">\n<h3>Explicit resource reclaim</h3>\n<p>For some reasons, an application may require explicit reclamation for file\nhandles or sql connections before end of execution. In these cases, user can\nsimply call:\n.. code-block:: python</p>\n<blockquote>\nq = Queue() # or q = persistqueue.SQLiteQueue(\u2018mypath\u2019, auto_commit=True)\ndel q</blockquote>\n<p>to reclaim related file handles or sql connections.</p>\n</div>\n</div>\n<div id=\"tips\">\n<h2>Tips</h2>\n<p><tt>task_done</tt> is required both for file based queue and SQLite3 based queue (when <tt>auto_commit=False</tt>)\nto persist the cursor of next <tt>get</tt> to the disk.</p>\n</div>\n<div id=\"performance-impact\">\n<h2>Performance impact</h2>\n<ul>\n<li><p><strong>WAL</strong></p>\n<p>Starting on v0.3.2, the <tt>persistqueue</tt> is leveraging the sqlite3 builtin feature\n<a href=\"https://www.sqlite.org/wal.html\" rel=\"nofollow\">WAL</a> which can improve the performance\nsignificantly, a general testing indicates that <tt>persistqueue</tt> is 2-4 times\nfaster than previous version.</p>\n</li>\n<li><p><strong>auto_commit=False</strong></p>\n<p>Since persistqueue v0.3.0, a new parameter <tt>auto_commit</tt> is introduced to tweak\nthe performance for sqlite3 based queues as needed. When specify <tt>auto_commit=False</tt>, user\nneeds to perform <tt>queue.task_done()</tt> to persist the changes made to the disk since\nlast <tt>task_done</tt> invocation.</p>\n</li>\n<li><p><strong>pickle protocol selection</strong></p>\n<p>From v0.3.6, the <tt>persistqueue</tt> will select <tt>Protocol version 2</tt> for python2 and <tt>Protocol version 4</tt> for python3\nrespectively. This selection only happens when the directory is not present when initializing the queue.</p>\n</li>\n</ul>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p><em>persist-queue</em> use <tt>tox</tt> to trigger tests.</p>\n<ul>\n<li>Unit test</li>\n</ul>\n<pre><span class=\"go\">tox -e &lt;PYTHON_VERSION&gt;</span>\n</pre>\n<p>Available <tt>&lt;PYTHON_VERSION&gt;</tt>: <tt>py27</tt>, <tt>py34</tt>, <tt>py35</tt>, <tt>py36</tt>, <tt>py37</tt></p>\n<ul>\n<li>PEP8 check</li>\n</ul>\n<pre><span class=\"go\">tox -e pep8</span>\n</pre>\n<p><a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a> is usually a helpful tool to manage multiple versions of Python.</p>\n</div>\n<div id=\"caution\">\n<h2>Caution</h2>\n<p>Currently, the atomic operation is supported on Windows while still in experimental,\nThat\u2019s saying, the data in <tt>persistqueue.Queue</tt> could be in unreadable state when an incidental failure occurs during <tt>Queue.task_done</tt>.</p>\n<p><strong>DO NOT put any critical data on persistqueue.queue on Windows</strong>.</p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Simply fork this repo and send PR for your code change(also tests to cover your change), remember to give a title and description of your PR. I am willing to\nenhance this project with you :).</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">BSD</a></p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<p><a href=\"https://github.com/peter-wangxu/persist-queue/graphs/contributors\" rel=\"nofollow\">Contributors</a></p>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<ul>\n<li><tt>sqlite3.OperationalError: database is locked</tt> is raised.</li>\n</ul>\n<p>persistqueue open 2 connections for the db if <tt>multithreading=True</tt>, the\nSQLite database is locked until that transaction is committed. The <tt>timeout</tt>\nparameter specifies how long the connection should wait for the lock to go away\nuntil raising an exception. Default time is <strong>10</strong>, increase <tt>timeout</tt>\nwhen creating the queue if above error occurs.</p>\n<ul>\n<li>sqlite3 based queues are not thread-safe.</li>\n</ul>\n<p>The sqlite3 queues are heavily tested under multi-threading environment, if you find it\u2019s not thread-safe, please\nmake sure you set the <tt>multithreading=True</tt> when initializing the queue before submitting new issue:).</p>\n</div>\n\n          </div>"}, "last_serial": 6099889, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "70cedb132577659929a50cb0ef21afc5", "sha256": "2b7731ab1da426ef338e33aabf48e5fc32018c09d25c307cc20b6e4fe9c73974"}, "downloads": -1, "filename": "persist-queue-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70cedb132577659929a50cb0ef21afc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4237, "upload_time": "2016-11-25T11:35:00", "upload_time_iso_8601": "2016-11-25T11:35:00.327879Z", "url": "https://files.pythonhosted.org/packages/53/37/5e9e0a2b4cb099faf625afac5e4711d2de29e1eb655e13ad4f3df637c1d7/persist-queue-0.1.0.tar.gz", "yanked": false}], "0.1.1": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "db43078fca9c93cc8ea276f7baf30654", "sha256": "0299d9dfa4aa3021bac333ceb1d17405523a29420d0662549dbd8600787314cc"}, "downloads": -1, "filename": "persist-queue-0.1.2.tar.gz", "has_sig": false, "md5_digest": "db43078fca9c93cc8ea276f7baf30654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5972, "upload_time": "2016-11-27T10:35:56", "upload_time_iso_8601": "2016-11-27T10:35:56.924651Z", "url": "https://files.pythonhosted.org/packages/78/51/ed08189a39a4d2fa09fd3dadb3a61631816a79f455a391a9b5706ecf627e/persist-queue-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "03be10a9483f8d4069b8971d0eadbdd2", "sha256": "fb764eb88f5b14472a4ecbbc641fab7ef7a644087f379bd8a791037c549283bc"}, "downloads": -1, "filename": "persist-queue-0.1.3.tar.gz", "has_sig": false, "md5_digest": "03be10a9483f8d4069b8971d0eadbdd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5861, "upload_time": "2016-11-29T05:28:46", "upload_time_iso_8601": "2016-11-29T05:28:46.864483Z", "url": "https://files.pythonhosted.org/packages/ca/27/1c0c7ed4ca69535796e1988d61599af8fe2f277162d0f5850d5d5b396951/persist-queue-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "cc27c181ad7ff39a1bf27302917f77cb", "sha256": "371df66e31a22d6ee661d98ba8fc90a65656cc170d228462fd69ab984bdc6994"}, "downloads": -1, "filename": "persist-queue-0.1.4.tar.gz", "has_sig": false, "md5_digest": "cc27c181ad7ff39a1bf27302917f77cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6342, "upload_time": "2016-11-30T10:37:24", "upload_time_iso_8601": "2016-11-30T10:37:24.808770Z", "url": "https://files.pythonhosted.org/packages/2b/31/9198429593b02a7157a22aac0303ce1a47cd041e745c9056f2f4df2cef99/persist-queue-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "faa89b2873cf8ecae50eb78c13142ece", "sha256": "c1835e8d08cdd7f0667f0a5614ba72fd482382f0f70bc741a5ca385c375b62bf"}, "downloads": -1, "filename": "persist-queue-0.1.5.tar.gz", "has_sig": false, "md5_digest": "faa89b2873cf8ecae50eb78c13142ece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10470, "upload_time": "2017-02-15T03:16:05", "upload_time_iso_8601": "2017-02-15T03:16:05.858052Z", "url": "https://files.pythonhosted.org/packages/b5/63/a030b0f23917a89a492f0b7894f1190e00cac6150ff2f04495112da339c9/persist-queue-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "94b4bb3f01ec1f1e5a20e05ff97303fb", "sha256": "31d99a832df07322fc21fcd20546a10992ae910371a1708cf763e2418f63008e"}, "downloads": -1, "filename": "persist-queue-0.1.6.tar.gz", "has_sig": false, "md5_digest": "94b4bb3f01ec1f1e5a20e05ff97303fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7800, "upload_time": "2017-03-10T06:39:19", "upload_time_iso_8601": "2017-03-10T06:39:19.691430Z", "url": "https://files.pythonhosted.org/packages/ef/2e/1c03ae7fab2b3f8b4c9b7864f49a22e3f703f26b0beb725e27630bc5427d/persist-queue-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ee4def68477d9735c784c3101546b98f", "sha256": "97f9b33397bb0b48380930f6319b0a7a48a893e19ebe92bf4bbfee83a922aa1d"}, "downloads": -1, "filename": "persist_queue-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee4def68477d9735c784c3101546b98f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13185, "upload_time": "2017-03-13T11:05:30", "upload_time_iso_8601": "2017-03-13T11:05:30.885068Z", "url": "https://files.pythonhosted.org/packages/0a/37/9ed0348a1dc94bc4613c763dbdba84fa4e80366e8209f92d7cccfa55d739/persist_queue-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d44bf0f139ba084c487dd181e7966e35", "sha256": "bfb31a978f7109420a14f6a79fff5e762e034a9ff550305e9458433e3928efd5"}, "downloads": -1, "filename": "persist-queue-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d44bf0f139ba084c487dd181e7966e35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9561, "upload_time": "2017-03-13T11:05:32", "upload_time_iso_8601": "2017-03-13T11:05:32.793558Z", "url": "https://files.pythonhosted.org/packages/86/78/316fb22dd6b813fbdba34a1297ed991fbf097c73be0e38caf70be38505fe/persist-queue-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0fe7200553a4c21785e662baf4cfa359", "sha256": "c560cbb3b455dbf4607154c05492733fc98b1d736652dd35b29e9a0392b1b8e5"}, "downloads": -1, "filename": "persist_queue-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0fe7200553a4c21785e662baf4cfa359", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13408, "upload_time": "2017-03-14T02:57:52", "upload_time_iso_8601": "2017-03-14T02:57:52.295000Z", "url": "https://files.pythonhosted.org/packages/7c/2e/3c836980bf2c3a71f22fa77feae66cb95a08684c67e950dc456e0d129492/persist_queue-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57d1f34a7338af4e724adc7196e20b4b", "sha256": "f8f4a61303e482ec0b8a7b5d2b081e4dce2e8dd14b8a46b536dafb69fbede5fe"}, "downloads": -1, "filename": "persist-queue-0.2.1.tar.gz", "has_sig": false, "md5_digest": "57d1f34a7338af4e724adc7196e20b4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9753, "upload_time": "2017-03-14T02:57:54", "upload_time_iso_8601": "2017-03-14T02:57:54.424016Z", "url": "https://files.pythonhosted.org/packages/fd/3b/2b96ab0d5e0a47885b7097e36441b94a9f7f93f68a942bcd5ddcbb211a8d/persist-queue-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "500c4acbc8d347e9c512ad0de952afb3", "sha256": "a63bf52dd4913f12ddcfb592e89251a7dba85b6f7f63ac6aa3947928bc3424f6"}, "downloads": -1, "filename": "persist_queue-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "500c4acbc8d347e9c512ad0de952afb3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15538, "upload_time": "2017-05-15T07:58:33", "upload_time_iso_8601": "2017-05-15T07:58:33.855465Z", "url": "https://files.pythonhosted.org/packages/96/72/fbb6d0b4703bdd1594a4e10a4cdc5ea345e39af3688c74e30f172a032be9/persist_queue-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e14aea023f31583352c78f01eb367e9e", "sha256": "b0cbf8a7347b342829673a8cde5d5f5bc01f433b49efb61559cc5a6d5751eb7a"}, "downloads": -1, "filename": "persist-queue-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e14aea023f31583352c78f01eb367e9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11587, "upload_time": "2017-05-15T07:58:35", "upload_time_iso_8601": "2017-05-15T07:58:35.241918Z", "url": "https://files.pythonhosted.org/packages/d5/64/6ac4cc4614f925e304f843d0cc9b7bcc68275f7ca7a5bbdcf18b99818c02/persist-queue-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "f4739f3d3eda4d56cdccf85a2f670cbe", "sha256": "42897f38ffc4bee6db2cfe9e372fec8b1599b69eaf0eef0d7f3d3b543a9ead02"}, "downloads": -1, "filename": "persist_queue-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f4739f3d3eda4d56cdccf85a2f670cbe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15568, "upload_time": "2017-06-05T09:28:39", "upload_time_iso_8601": "2017-06-05T09:28:39.959633Z", "url": "https://files.pythonhosted.org/packages/df/60/28a627d472c75bc6e9bb22b90463bd1ac4a62115418fd0bba077ddcfc1ae/persist_queue-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "616f97330c86b5b37a09468454de1f47", "sha256": "9a9cf1d7857b0493e877850e2c61e6d92b8120cd41a2f79467088a74ac502aae"}, "downloads": -1, "filename": "persist-queue-0.2.3.tar.gz", "has_sig": false, "md5_digest": "616f97330c86b5b37a09468454de1f47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12831, "upload_time": "2017-06-05T09:28:41", "upload_time_iso_8601": "2017-06-05T09:28:41.556992Z", "url": "https://files.pythonhosted.org/packages/40/a4/357cfef6d7b63d0756aa5550d9e465560ed8e48a672f002797a3450a2038/persist-queue-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f28444ce64a319830bcb2a80692946fa", "sha256": "7dca07df2d75b4344f525dd2692f692d00288f00f7a92c08192b9b9e80928e14"}, "downloads": -1, "filename": "persist_queue-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f28444ce64a319830bcb2a80692946fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18329, "upload_time": "2017-09-23T09:01:21", "upload_time_iso_8601": "2017-09-23T09:01:21.353584Z", "url": "https://files.pythonhosted.org/packages/8b/1a/d8f4b3f850c9c79e71dfff834210ba314935efb602844e84db4cbc77ca1b/persist_queue-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "421f0e975c6285416293f6b8b41806ec", "sha256": "931645bef5653d118a259a91761f4fa028b1b8591cca77ac9734a4454c70d74f"}, "downloads": -1, "filename": "persist-queue-0.3.0.tar.gz", "has_sig": false, "md5_digest": "421f0e975c6285416293f6b8b41806ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12958, "upload_time": "2017-09-23T09:01:22", "upload_time_iso_8601": "2017-09-23T09:01:22.705696Z", "url": "https://files.pythonhosted.org/packages/6e/fd/48e68da9fa787373dea326fc252290fd1f33c7de01d507d7d3e1eadde1be/persist-queue-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "464f0571d22e7acb47f80daaca59d077", "sha256": "e17c8f0c8b952ae2c0c183aa4023ca637bb458c1cf41c6132996a7b0a7ddd1a8"}, "downloads": -1, "filename": "persist_queue-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "464f0571d22e7acb47f80daaca59d077", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18747, "upload_time": "2017-10-10T04:53:47", "upload_time_iso_8601": "2017-10-10T04:53:47.275884Z", "url": "https://files.pythonhosted.org/packages/72/af/1cb6e590cadb59c3e82c100cd03343e5783c57421827c835d5a8cd4e6065/persist_queue-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ff8718f194febe1cc99cbf7d2fe6854", "sha256": "5f73bfbcbf5b27b6ec4d09359cdd82a979e9a07c512d915c9c0c8cf22d962617"}, "downloads": -1, "filename": "persist-queue-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5ff8718f194febe1cc99cbf7d2fe6854", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15885, "upload_time": "2017-10-10T04:53:49", "upload_time_iso_8601": "2017-10-10T04:53:49.399326Z", "url": "https://files.pythonhosted.org/packages/f3/0e/6380c35141f7e3fa9e50da986f0ed751b0fbbf73e77196e92785926c93a8/persist-queue-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3233c785549b635becbee5323ac9e198", "sha256": "4873f9e56915b5aae889357b4dbf2f76d3c81843569b9dd5a934b21945c3cb3c"}, "downloads": -1, "filename": "persist_queue-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3233c785549b635becbee5323ac9e198", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19344, "upload_time": "2017-10-26T07:07:08", "upload_time_iso_8601": "2017-10-26T07:07:08.004439Z", "url": "https://files.pythonhosted.org/packages/15/f3/5fc93f0bceb5eff48a239acb87b2e1e336ecde974176e60272ebe48f84d2/persist_queue-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8955ef66a7de3265bfc1a05a1a31b8c", "sha256": "781bbf9f5af4d0a914a53cf9ef3759979e2c6355f500ccf7b6e265d5edcc0ac6"}, "downloads": -1, "filename": "persist-queue-0.3.2.tar.gz", "has_sig": false, "md5_digest": "a8955ef66a7de3265bfc1a05a1a31b8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16447, "upload_time": "2017-10-26T07:07:09", "upload_time_iso_8601": "2017-10-26T07:07:09.701521Z", "url": "https://files.pythonhosted.org/packages/8e/7d/5f371260a13339bb4a46c0d499992fc8565e7ef5119c8ef7fbc8c230c30c/persist-queue-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "e1b2e1da210ffcfeb4ccdc8bf597242c", "sha256": "9531ab7959a638eaca3b71dbd5ccc24706f81c96bbd947e5487367bd96a21560"}, "downloads": -1, "filename": "persist_queue-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e1b2e1da210ffcfeb4ccdc8bf597242c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19352, "upload_time": "2017-11-03T02:17:13", "upload_time_iso_8601": "2017-11-03T02:17:13.675069Z", "url": "https://files.pythonhosted.org/packages/4e/4e/5b65b338121e15f383639cff877a2650f9ed1e701ff14c11fb0ccc09c568/persist_queue-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef9db25ebb818ecee33a731737b0d26d", "sha256": "d34a464e0f386baa2c7cca470807bd4d509144e4dfa1bd80f41c6c7124579dda"}, "downloads": -1, "filename": "persist-queue-0.3.3.tar.gz", "has_sig": false, "md5_digest": "ef9db25ebb818ecee33a731737b0d26d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16466, "upload_time": "2017-11-03T02:17:15", "upload_time_iso_8601": "2017-11-03T02:17:15.868292Z", "url": "https://files.pythonhosted.org/packages/8d/80/e8cf13ea52a014b83e3ec6e1c0bf2d077903440c046edad28f7024b1677b/persist-queue-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "1e900235d616afed4b1c67c9368906e7", "sha256": "3f702bd8a8b4bec169bb5eb2e343898811b916fd0970678a5af0abc186c591f2"}, "downloads": -1, "filename": "persist_queue-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e900235d616afed4b1c67c9368906e7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19937, "upload_time": "2017-12-15T11:34:07", "upload_time_iso_8601": "2017-12-15T11:34:07.327176Z", "url": "https://files.pythonhosted.org/packages/b7/1b/3e90f8a3266c0bcf11c37e418745e865cd1057c1b0e95aeeae35695f89c4/persist_queue-0.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "668963c9fcbbe480061f19209145bd8c", "sha256": "07d28b06b3ab357bd8fd3750b9ecce47b332101129a786da99ffe9575e4ba331"}, "downloads": -1, "filename": "persist-queue-0.3.4.tar.gz", "has_sig": false, "md5_digest": "668963c9fcbbe480061f19209145bd8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33779, "upload_time": "2017-12-15T11:34:09", "upload_time_iso_8601": "2017-12-15T11:34:09.401377Z", "url": "https://files.pythonhosted.org/packages/c9/cb/7bdccd63be9e7a0d17d7625e008d8777212636791c276658e702a9a51f00/persist-queue-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "196f28c22d1540d5b3cbb09b87770fd1", "sha256": "c89ab22b3dbd5b84146d847aeb78fdbd0f515ad951229d3299d8700481b9f2f3"}, "downloads": -1, "filename": "persist_queue-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "196f28c22d1540d5b3cbb09b87770fd1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20349, "upload_time": "2018-02-08T13:38:11", "upload_time_iso_8601": "2018-02-08T13:38:11.192286Z", "url": "https://files.pythonhosted.org/packages/9e/ed/4eabf54fb37d066dc90a2ca005befb4b380516cb944d8c31b75a00fe017e/persist_queue-0.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e1913de3b4854c3d0eb25355d6a50c7", "sha256": "968b1ad2cb51a0ad8ea060aabef037d9e4d504968471d2c7a59f61b93c01bfad"}, "downloads": -1, "filename": "persist-queue-0.3.5.tar.gz", "has_sig": false, "md5_digest": "5e1913de3b4854c3d0eb25355d6a50c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14586, "upload_time": "2018-02-08T13:38:12", "upload_time_iso_8601": "2018-02-08T13:38:12.797377Z", "url": "https://files.pythonhosted.org/packages/f3/9b/f92a70f183087aeaa1533d5c9735745d45f8e8f042a777b2b638398dba86/persist-queue-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "878712cfb66f768395d50092a7ce9e48", "sha256": "ba96d8164e5a728ab7d561e2de597a731f966f4dd029dbd470e90bee0ff9aef4"}, "downloads": -1, "filename": "persist_queue-0.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "878712cfb66f768395d50092a7ce9e48", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21158, "upload_time": "2018-05-15T02:03:17", "upload_time_iso_8601": "2018-05-15T02:03:17.182963Z", "url": "https://files.pythonhosted.org/packages/16/0e/1e56068d34c1dfe742490b4ba01748843152b5b2d06816670e95e791d945/persist_queue-0.3.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "463b220637a9830690edba3d6047104e", "sha256": "0a649a77bb96152011cfc524fee528cab849d4cbac9b117a1000ce4ae3d99f77"}, "downloads": -1, "filename": "persist-queue-0.3.6.tar.gz", "has_sig": false, "md5_digest": "463b220637a9830690edba3d6047104e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34758, "upload_time": "2018-05-15T02:03:18", "upload_time_iso_8601": "2018-05-15T02:03:18.636670Z", "url": "https://files.pythonhosted.org/packages/e5/9d/e20c37a43e12f2ca632aabd4212c501048a9e34f1a77bdaf9849dca677bd/persist-queue-0.3.6.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0fc8c2e73ddac03de8f6160989739084", "sha256": "2d1a4515015c48a6792498f96aa3e1aae4dbafc52e44bf569068ae85d70db591"}, "downloads": -1, "filename": "persist_queue-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0fc8c2e73ddac03de8f6160989739084", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22131, "upload_time": "2018-06-17T13:24:33", "upload_time_iso_8601": "2018-06-17T13:24:33.005255Z", "url": "https://files.pythonhosted.org/packages/65/62/be6d28ff1b1f3c1540e23298908eec64c33c8f2c9df90b7504282ff1ccd5/persist_queue-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38335cc0bc5a1adc3b7b823409436333", "sha256": "0261b2d737a9ced79ca04fa03ca09a79e68d2923613603187a4be835e0602e52"}, "downloads": -1, "filename": "persist-queue-0.4.0.tar.gz", "has_sig": false, "md5_digest": "38335cc0bc5a1adc3b7b823409436333", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20991, "upload_time": "2018-06-17T13:24:35", "upload_time_iso_8601": "2018-06-17T13:24:35.191488Z", "url": "https://files.pythonhosted.org/packages/e0/dc/393b7ae8c5307014deb35739fe3f28cbe740ea8993b53414e0efffa9faad/persist-queue-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "9d8ec4dda7c408b0989fe223d340efa7", "sha256": "5411a0b156f754aacc75dd52c3dc3ebeac83a0b3d11f874a69d91b5bf1a21859"}, "downloads": -1, "filename": "persist_queue-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9d8ec4dda7c408b0989fe223d340efa7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25000, "upload_time": "2018-10-01T13:27:46", "upload_time_iso_8601": "2018-10-01T13:27:46.917486Z", "url": "https://files.pythonhosted.org/packages/22/00/881d4d233a3725fa06e1bc6213debfc35233708897ea7407a477dd925f4d/persist_queue-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d27c0bb4c97dd91b4ec639af44be024", "sha256": "16604b8ca4f51e1d8567e2847cea08dffd50d35e1a65ed3f14f02ed38bcfc55c"}, "downloads": -1, "filename": "persist-queue-0.4.1.tar.gz", "has_sig": false, "md5_digest": "7d27c0bb4c97dd91b4ec639af44be024", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23503, "upload_time": "2018-10-01T13:27:48", "upload_time_iso_8601": "2018-10-01T13:27:48.846379Z", "url": "https://files.pythonhosted.org/packages/50/73/a15b4513d83e6e8b482d4a4b1ddc025449529c5f9231eda0ba1325e7358c/persist-queue-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "68cf0f9e82cb4ec5b900d0ba954af191", "sha256": "ebae6295c83f7bf5624a19f8b52b4c51184b04c3d4be60acc081781fa83eb8d5"}, "downloads": -1, "filename": "persist_queue-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "68cf0f9e82cb4ec5b900d0ba954af191", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32555, "upload_time": "2019-02-16T15:05:38", "upload_time_iso_8601": "2019-02-16T15:05:38.978571Z", "url": "https://files.pythonhosted.org/packages/02/84/eead01a31a7e45886caf8767d116e84ba38502aabadb96b567fe8cb7843f/persist_queue-0.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a0aefb997c3ee08ff8b848d29b65e96", "sha256": "e272746c8b8b64531a92546556ae7fd121c88d8e87d82f3d988eb0298d901b76"}, "downloads": -1, "filename": "persist-queue-0.4.2.tar.gz", "has_sig": false, "md5_digest": "0a0aefb997c3ee08ff8b848d29b65e96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24411, "upload_time": "2019-02-16T15:05:41", "upload_time_iso_8601": "2019-02-16T15:05:41.709801Z", "url": "https://files.pythonhosted.org/packages/f5/fb/b71f1dac7b26a2a01a708979130ea436abf28e119b20e0816241c09a6e8f/persist-queue-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "73f1896508c1e54f6021e2371f766d46", "sha256": "8d7159ba5061b071450a5127c1f7b8ab9dae7e45e5a6726db2a7cbf59b8e04fd"}, "downloads": -1, "filename": "persist_queue-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73f1896508c1e54f6021e2371f766d46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35214, "upload_time": "2019-11-08T15:37:25", "upload_time_iso_8601": "2019-11-08T15:37:25.206487Z", "url": "https://files.pythonhosted.org/packages/4b/54/b13b0ec4fd99f99020141bd92c84269b4ec4ea690e27b2d33ce908b3ec58/persist_queue-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3644ef1a990c29ced4e62b5c4672126a", "sha256": "7722ecca67529669ddf6be708d8389994fc893e30ca2491eef0af110dc8ff72c"}, "downloads": -1, "filename": "persist-queue-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3644ef1a990c29ced4e62b5c4672126a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26565, "upload_time": "2019-11-08T15:37:27", "upload_time_iso_8601": "2019-11-08T15:37:27.746049Z", "url": "https://files.pythonhosted.org/packages/23/3b/9ac028a5be2b4b60320143226cb34ed848cb80337474ae2c22be57a5a826/persist-queue-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73f1896508c1e54f6021e2371f766d46", "sha256": "8d7159ba5061b071450a5127c1f7b8ab9dae7e45e5a6726db2a7cbf59b8e04fd"}, "downloads": -1, "filename": "persist_queue-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73f1896508c1e54f6021e2371f766d46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35214, "upload_time": "2019-11-08T15:37:25", "upload_time_iso_8601": "2019-11-08T15:37:25.206487Z", "url": "https://files.pythonhosted.org/packages/4b/54/b13b0ec4fd99f99020141bd92c84269b4ec4ea690e27b2d33ce908b3ec58/persist_queue-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3644ef1a990c29ced4e62b5c4672126a", "sha256": "7722ecca67529669ddf6be708d8389994fc893e30ca2491eef0af110dc8ff72c"}, "downloads": -1, "filename": "persist-queue-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3644ef1a990c29ced4e62b5c4672126a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26565, "upload_time": "2019-11-08T15:37:27", "upload_time_iso_8601": "2019-11-08T15:37:27.746049Z", "url": "https://files.pythonhosted.org/packages/23/3b/9ac028a5be2b4b60320143226cb34ed848cb80337474ae2c22be57a5a826/persist-queue-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:08 2020"}