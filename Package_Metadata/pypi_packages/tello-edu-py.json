{"info": {"author": "Tariq86", "author_email": "tariq.86@pm.me", "bugtrack_url": null, "classifiers": ["License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# tello_edu.py\n\n## Introduction\nAfter coming across the Tello EDU drone in Nov 2019, I decided to get a few and mess with some simple swarm programming.\nI came across [this repo](), and I liked it better than [the official Tello Python SDK](https://github.com/TelloSDK/Multi-Tello-Formation).\nSee upstream repo for motivation, etc.\n\n## Getting Started\nFrom the root of the project, run the following commands:\n\n1. Create a Python virtual environment (via [`virtualenv`](https://virtualenv.pypa.io/en/stable/)) before installing the Python libraries\n, and activate the new environment:\n    ```shell script\n    virtualenv venv\n    source venv/bin/activate\n    ```\n1. Install the needed Python libraries:\n    ```shell script\n    pip install -r requirements.txt\n    ```\n1. If you have not connected your Tello EDU to your main WiFi network yet, you need to do so for swarming support. First, connect directly to the ad-hoc network\n created by your Tello EDU, then update the `connect_to_wifi.py` file, replacing `MY_SSID` and `MY_PASSWORD` with your main WiFi network credentials, then\n  run the file:\n   ```shell script\n   python helpers/connect_to_wifi.py\n   ```\n1. Create a `serial_numbers.txt` file in the root directory with a list of all your Tello serial numbers, one-per-line. Lines that are blank or start with\n `#` will be ignored. In this example, the 4th drone (and all of the labels, i.e. \"1-Yellow\") will not be included in the detected list of serial numbers. You can\n  find the serial number for your Tello(s) on a tiny sticker inside the battery compartment. If you ran the previous step, the `connect_to_wifi.py` should\n   have printed the serial number to the console.\n    ```text\n    # 1-Yellow\n   0TQDFC6EDBBX03\n\n   # 2-Blue\n   0TQDFC6EDB4398\n\n   # 3-Green\n   0TQDFC6EDBH8M8\n\n   # 4-Red\n   #0TQDFC7EDB4874 \n    ```\n1. Run any of the demos (see [Demos](#demos) section below)\n\n## Project Structure\n * There are three key files in the project:\n   * `fly_tello.py` - The `FlyTello` class is intended to be the only one that a typical user needs to use.  It contains functions enabling all core\n    behaviours of one or more Tellos, including some complex behaviour such as searching for Mission Pads.  This should always be the starting point.\n   * `comms_manager.py` - The `CommsManager` class performs all of the core functions that communicate with the Tellos, sending and receiving commands and status messages, and ensuring they are acted on appropriately.  If you want to develop new non-standard behaviours, you'll probably need some of these functions.\n   * `tello.py` - The `Tello` class stores key parameters for each Tello, enabling the rest of the functionality.  The `TelloCommand` class provides the structure for both queued commands, and logs of commands which have already been sent.\n * All demos are included in the `demos` directory\n\n## FlyTello\n\nUsing `FlyTello` provides the easiest route to flying one or more Tellos.  A simple demonstration would require the following code:\n```\nfrom fly_tello import FlyTello      # Import FlyTello\n\nmy_tellos = list()\nmy_tellos.append('0TQDFCAABBCCDD')  # Replace with your Tello Serial Number\nmy_tellos.append('0TQDFCAABBCCEE')  # Replace with your Tello Serial Number\n\nwith FlyTello(my_tellos) as fly:    # Use FlyTello as a Context Manager to ensure safe landing in case of any errors\n    fly.takeoff()                   # Single command for all Tellos to take-off\n    fly.forward(50)                 # Single command for all Tellos to fly forward by 50cm\n    with fly.sync_these():          # Keep the following commands in-sync, even with different commands for each Tello\n        fly.left(30, tello=1)       # Tell just Tello1 to fly left\n        fly.right(30, tello=2)      # At the same time, Tello2 will fly right\n    fly.flip(direction='forward')   # Flips are easy to perform via the Tello SDK\n    fly.land()                      # Finally, land\n```\n\nIt is suggested to browse through `fly_tello.py` for full details of the available methods which you can use - all are fully commented and explained in the code.  A few worth mentioning however include:\n* Every function listed in the Tello SDK v2.0 (available to download from https://www.ryzerobotics.com/tello-edu/downloads) is implemented as a method within FlyTello; though some have been renamed for clarity.\n* `reorient()` - a simplified method which causes the Tello to centre itself over the selected (or any nearby) Mission Pad.  This is really helpful for long-running flights to ensure the Tellos remain exactly in the right positions.\n* `search_spiral()` - brings together multiple Tello SDK commands to effectively perform a search for a Mission Pad, via one very simple Python command.  It will stop over the top of the Mission Pad if it finds it, otherwise returns to its starting position.\n* `search_pattern()` - like search_spiral, but you can specify any pattern you like for the search via a simple list of coordinates.\n* `sync_these()` - when used as a Context Manager (as a `with` block), this ensures all Tellos are in sync before any functions within the block are executed.\n\n`FlyTello` also provides a simple method of programming individual behaviours, which allow each Tello to behave and follow its own independent set of instructions completely independently from any other Tello.  For full details read the comments in `fly_tello.py`, but key extracts from an example of this are also shown below:\n```\n# independent() is used to package up the FlyTello commands for the independent phase of the flight\ndef independent(tello, pad):\n    found = fly.search_spiral(dist=50, spirals=2, height=100, speed=100, pad=pad, tello=tello)\n    if found:\n        print('[Search]Tello %d Found the Mission Pad!' % tello)\n        fly.land(tello=tello)\n\nwith FlyTello(my_tellos) as fly:\n    with fly.individual_behaviours():\n        # individual_behaviours() is a Context Manager to ensure separate threads are setup and managed for each Tello's\n        # own behaviour, as defined in the independent() function above.\n        # run_individual() actually initiates the behaviour for a single Tello - in this case both searching, but each\n        # is searching for a different Mission Pad ('m1' vs 'm2').\n        fly.run_individual(independent, tello_num=1, pad_id='m1')\n        fly.run_individual(independent, tello_num=2, pad_id='m2')\n```\n\n## Demos\nAll demos are in the `demos` directory. The first two listed also include YouTube video demos:\n * Tello EDU Capabilities Demo (`demos/all_functions.py`) - https://youtu.be/F3rSW5VKsW8\n * Simple Searching Demo (`demos/search.py`) - https://youtu.be/pj2fJe7cPTE\n * Single Tello Demo (`demos/single.py`)\n * Status Reading Demo (`demos/status.py`)\n\nYou can run any of these demos by executing the Python file:\n```shell script\npython demos/DEMO_NAME.py\n```\n\n## Limitations\nThere are some limitations of what can be done with this project and the Tello EDU:\n * No Video Stream.  The Tello is capable of sending its video stream, but only when connected directly to the in-build WiFi of a single Tello.  The video is\n  not accessible when the Tellos are connected to a separate WiFi network, as required for swarming behaviour.  There is a workaround, which is to have multiple\n  WiFi dongles connected to a single computer, one per Tello, but that hasn't been a focus for me.\n* Limited Status Messages.  The Tello does broadcast a regular (multiple times per second) status message, however this seems to be of limited value as many of the values do not seem to correspond with the Tello's behaviour, and others are rather erratic.  This requires further investigation to determine which are useful.\n\n## Further Work/Recommendations (from upstream repo)\nThe project as it is currently is enough to fly one or more Tello EDU drones via a simple yet sophisticated set of controls.  Expanding its capabilities is easy, with layers of modules which expose increasingly more detailed / low-level functionality.  I'd suggest adding or changing:\n* Position Tracking.  By tracking the relative position of each Tello from when it launches, this will enable behaviours such as \"return to start\", and will e.g. allow Mission Pad locations to be shared with other Tellos in the swarm - a pre-requisite for collaborative swarm behaviour.  Clearly accuracy will decrease over time, but could be regularly restored using the `reorient()` method described above.\n* Better Error Checking.  Some error checking is already implemented, but it's incomplete.  Getting the arc radius correct for a curve is sometimes difficult, and this project could be more helpful in identifying the errors and suggesting valid alternative values.\n* Implement `on_error` alternative commands for Flips and Curves, which can easily fail due to e.g. battery low or incorrect curve radius values.  This will ensure Tello is less likely to end up in an unexpected location.\n* Command Stream & Logging.  Currently all commands either sent or received are printed to the Python Console.  These would be better saved in a detailed log file, so that only key information is presented to the user in the Console.\n\n## Random Notes\n * You can reset your drone by holding the power button down for 5-10 seconds.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tariq86/tello_edu.py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tello-edu-py", "package_url": "https://pypi.org/project/tello-edu-py/", "platform": "", "project_url": "https://pypi.org/project/tello-edu-py/", "project_urls": {"Homepage": "https://github.com/tariq86/tello_edu.py"}, "release_url": "https://pypi.org/project/tello-edu-py/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Full-Featured Python SDK for Tello EDU", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tello_edu.py</h1>\n<h2>Introduction</h2>\n<p>After coming across the Tello EDU drone in Nov 2019, I decided to get a few and mess with some simple swarm programming.\nI came across <a href=\"\" rel=\"nofollow\">this repo</a>, and I liked it better than <a href=\"https://github.com/TelloSDK/Multi-Tello-Formation\" rel=\"nofollow\">the official Tello Python SDK</a>.\nSee upstream repo for motivation, etc.</p>\n<h2>Getting Started</h2>\n<p>From the root of the project, run the following commands:</p>\n<ol>\n<li>Create a Python virtual environment (via <a href=\"https://virtualenv.pypa.io/en/stable/\" rel=\"nofollow\"><code>virtualenv</code></a>) before installing the Python libraries\n, and activate the new environment:\n<pre>virtualenv venv\n<span class=\"nb\">source</span> venv/bin/activate\n</pre>\n</li>\n<li>Install the needed Python libraries:\n<pre>pip install -r requirements.txt\n</pre>\n</li>\n<li>If you have not connected your Tello EDU to your main WiFi network yet, you need to do so for swarming support. First, connect directly to the ad-hoc network\ncreated by your Tello EDU, then update the <code>connect_to_wifi.py</code> file, replacing <code>MY_SSID</code> and <code>MY_PASSWORD</code> with your main WiFi network credentials, then\nrun the file:\n<pre>python helpers/connect_to_wifi.py\n</pre>\n</li>\n<li>Create a <code>serial_numbers.txt</code> file in the root directory with a list of all your Tello serial numbers, one-per-line. Lines that are blank or start with\n<code>#</code> will be ignored. In this example, the 4th drone (and all of the labels, i.e. \"1-Yellow\") will not be included in the detected list of serial numbers. You can\nfind the serial number for your Tello(s) on a tiny sticker inside the battery compartment. If you ran the previous step, the <code>connect_to_wifi.py</code> should\nhave printed the serial number to the console.\n<pre># 1-Yellow\n0TQDFC6EDBBX03\n\n# 2-Blue\n0TQDFC6EDB4398\n\n# 3-Green\n0TQDFC6EDBH8M8\n\n# 4-Red\n#0TQDFC7EDB4874 \n</pre>\n</li>\n<li>Run any of the demos (see <a href=\"#demos\" rel=\"nofollow\">Demos</a> section below)</li>\n</ol>\n<h2>Project Structure</h2>\n<ul>\n<li>There are three key files in the project:\n<ul>\n<li><code>fly_tello.py</code> - The <code>FlyTello</code> class is intended to be the only one that a typical user needs to use.  It contains functions enabling all core\nbehaviours of one or more Tellos, including some complex behaviour such as searching for Mission Pads.  This should always be the starting point.</li>\n<li><code>comms_manager.py</code> - The <code>CommsManager</code> class performs all of the core functions that communicate with the Tellos, sending and receiving commands and status messages, and ensuring they are acted on appropriately.  If you want to develop new non-standard behaviours, you'll probably need some of these functions.</li>\n<li><code>tello.py</code> - The <code>Tello</code> class stores key parameters for each Tello, enabling the rest of the functionality.  The <code>TelloCommand</code> class provides the structure for both queued commands, and logs of commands which have already been sent.</li>\n</ul>\n</li>\n<li>All demos are included in the <code>demos</code> directory</li>\n</ul>\n<h2>FlyTello</h2>\n<p>Using <code>FlyTello</code> provides the easiest route to flying one or more Tellos.  A simple demonstration would require the following code:</p>\n<pre><code>from fly_tello import FlyTello      # Import FlyTello\n\nmy_tellos = list()\nmy_tellos.append('0TQDFCAABBCCDD')  # Replace with your Tello Serial Number\nmy_tellos.append('0TQDFCAABBCCEE')  # Replace with your Tello Serial Number\n\nwith FlyTello(my_tellos) as fly:    # Use FlyTello as a Context Manager to ensure safe landing in case of any errors\n    fly.takeoff()                   # Single command for all Tellos to take-off\n    fly.forward(50)                 # Single command for all Tellos to fly forward by 50cm\n    with fly.sync_these():          # Keep the following commands in-sync, even with different commands for each Tello\n        fly.left(30, tello=1)       # Tell just Tello1 to fly left\n        fly.right(30, tello=2)      # At the same time, Tello2 will fly right\n    fly.flip(direction='forward')   # Flips are easy to perform via the Tello SDK\n    fly.land()                      # Finally, land\n</code></pre>\n<p>It is suggested to browse through <code>fly_tello.py</code> for full details of the available methods which you can use - all are fully commented and explained in the code.  A few worth mentioning however include:</p>\n<ul>\n<li>Every function listed in the Tello SDK v2.0 (available to download from <a href=\"https://www.ryzerobotics.com/tello-edu/downloads\" rel=\"nofollow\">https://www.ryzerobotics.com/tello-edu/downloads</a>) is implemented as a method within FlyTello; though some have been renamed for clarity.</li>\n<li><code>reorient()</code> - a simplified method which causes the Tello to centre itself over the selected (or any nearby) Mission Pad.  This is really helpful for long-running flights to ensure the Tellos remain exactly in the right positions.</li>\n<li><code>search_spiral()</code> - brings together multiple Tello SDK commands to effectively perform a search for a Mission Pad, via one very simple Python command.  It will stop over the top of the Mission Pad if it finds it, otherwise returns to its starting position.</li>\n<li><code>search_pattern()</code> - like search_spiral, but you can specify any pattern you like for the search via a simple list of coordinates.</li>\n<li><code>sync_these()</code> - when used as a Context Manager (as a <code>with</code> block), this ensures all Tellos are in sync before any functions within the block are executed.</li>\n</ul>\n<p><code>FlyTello</code> also provides a simple method of programming individual behaviours, which allow each Tello to behave and follow its own independent set of instructions completely independently from any other Tello.  For full details read the comments in <code>fly_tello.py</code>, but key extracts from an example of this are also shown below:</p>\n<pre><code># independent() is used to package up the FlyTello commands for the independent phase of the flight\ndef independent(tello, pad):\n    found = fly.search_spiral(dist=50, spirals=2, height=100, speed=100, pad=pad, tello=tello)\n    if found:\n        print('[Search]Tello %d Found the Mission Pad!' % tello)\n        fly.land(tello=tello)\n\nwith FlyTello(my_tellos) as fly:\n    with fly.individual_behaviours():\n        # individual_behaviours() is a Context Manager to ensure separate threads are setup and managed for each Tello's\n        # own behaviour, as defined in the independent() function above.\n        # run_individual() actually initiates the behaviour for a single Tello - in this case both searching, but each\n        # is searching for a different Mission Pad ('m1' vs 'm2').\n        fly.run_individual(independent, tello_num=1, pad_id='m1')\n        fly.run_individual(independent, tello_num=2, pad_id='m2')\n</code></pre>\n<h2>Demos</h2>\n<p>All demos are in the <code>demos</code> directory. The first two listed also include YouTube video demos:</p>\n<ul>\n<li>Tello EDU Capabilities Demo (<code>demos/all_functions.py</code>) - <a href=\"https://youtu.be/F3rSW5VKsW8\" rel=\"nofollow\">https://youtu.be/F3rSW5VKsW8</a></li>\n<li>Simple Searching Demo (<code>demos/search.py</code>) - <a href=\"https://youtu.be/pj2fJe7cPTE\" rel=\"nofollow\">https://youtu.be/pj2fJe7cPTE</a></li>\n<li>Single Tello Demo (<code>demos/single.py</code>)</li>\n<li>Status Reading Demo (<code>demos/status.py</code>)</li>\n</ul>\n<p>You can run any of these demos by executing the Python file:</p>\n<pre>python demos/DEMO_NAME.py\n</pre>\n<h2>Limitations</h2>\n<p>There are some limitations of what can be done with this project and the Tello EDU:</p>\n<ul>\n<li>No Video Stream.  The Tello is capable of sending its video stream, but only when connected directly to the in-build WiFi of a single Tello.  The video is\nnot accessible when the Tellos are connected to a separate WiFi network, as required for swarming behaviour.  There is a workaround, which is to have multiple\nWiFi dongles connected to a single computer, one per Tello, but that hasn't been a focus for me.</li>\n<li>Limited Status Messages.  The Tello does broadcast a regular (multiple times per second) status message, however this seems to be of limited value as many of the values do not seem to correspond with the Tello's behaviour, and others are rather erratic.  This requires further investigation to determine which are useful.</li>\n</ul>\n<h2>Further Work/Recommendations (from upstream repo)</h2>\n<p>The project as it is currently is enough to fly one or more Tello EDU drones via a simple yet sophisticated set of controls.  Expanding its capabilities is easy, with layers of modules which expose increasingly more detailed / low-level functionality.  I'd suggest adding or changing:</p>\n<ul>\n<li>Position Tracking.  By tracking the relative position of each Tello from when it launches, this will enable behaviours such as \"return to start\", and will e.g. allow Mission Pad locations to be shared with other Tellos in the swarm - a pre-requisite for collaborative swarm behaviour.  Clearly accuracy will decrease over time, but could be regularly restored using the <code>reorient()</code> method described above.</li>\n<li>Better Error Checking.  Some error checking is already implemented, but it's incomplete.  Getting the arc radius correct for a curve is sometimes difficult, and this project could be more helpful in identifying the errors and suggesting valid alternative values.</li>\n<li>Implement <code>on_error</code> alternative commands for Flips and Curves, which can easily fail due to e.g. battery low or incorrect curve radius values.  This will ensure Tello is less likely to end up in an unexpected location.</li>\n<li>Command Stream &amp; Logging.  Currently all commands either sent or received are printed to the Python Console.  These would be better saved in a detailed log file, so that only key information is presented to the user in the Console.</li>\n</ul>\n<h2>Random Notes</h2>\n<ul>\n<li>You can reset your drone by holding the power button down for 5-10 seconds.</li>\n</ul>\n\n          </div>"}, "last_serial": 6260841, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2d2db8ba837edbbf2bd8177d3ce93d5b", "sha256": "e2eaac1f5906bb3c70928d532f6c81b5e3e24c17accc8d7941c1dda5f9391439"}, "downloads": -1, "filename": "tello_edu_py-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2d2db8ba837edbbf2bd8177d3ce93d5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20960, "upload_time": "2019-12-08T08:10:26", "upload_time_iso_8601": "2019-12-08T08:10:26.211832Z", "url": "https://files.pythonhosted.org/packages/f6/7d/134b0427847b0e6f372fb3576d7982f9273a47b5ffe2eb5f42ac4cc9010a/tello_edu_py-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81aa75333f8f9fdeb4a680a4118a2ff6", "sha256": "54b77f2a51ff1765e8391bb3c65d6d5344618e88ae5d3b8cc3d956ef89bed8d4"}, "downloads": -1, "filename": "tello_edu_py-0.0.1.tar.gz", "has_sig": false, "md5_digest": "81aa75333f8f9fdeb4a680a4118a2ff6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22922, "upload_time": "2019-12-08T08:10:29", "upload_time_iso_8601": "2019-12-08T08:10:29.716427Z", "url": "https://files.pythonhosted.org/packages/db/78/03d6be4bfb1d6fd0bf7801a3fa1210213ca8d3e01ce9170244a292b4947a/tello_edu_py-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "16f77ed7e453890204045303c3a58343", "sha256": "d89fd2e1e347916ba430e5854073fb5e32845c8b6504c9ebc29a37bdb6a41b08"}, "downloads": -1, "filename": "tello_edu_py-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "16f77ed7e453890204045303c3a58343", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20972, "upload_time": "2019-12-08T08:10:28", "upload_time_iso_8601": "2019-12-08T08:10:28.529709Z", "url": "https://files.pythonhosted.org/packages/51/e2/aede60a7a8b911a530cfe28ec3b5d63d2122d9b25a34caf381544e6d697c/tello_edu_py-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e61a9e8b90fc4c03dc2f259d3e5f7ac7", "sha256": "29ca3ba2b7bb0e529579f0529383a7512d6eecfa0aaf1b755da0e251116a7251"}, "downloads": -1, "filename": "tello_edu_py-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e61a9e8b90fc4c03dc2f259d3e5f7ac7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22978, "upload_time": "2019-12-08T08:10:30", "upload_time_iso_8601": "2019-12-08T08:10:30.817762Z", "url": "https://files.pythonhosted.org/packages/53/40/97bc7fe8984b974e35547811214c7ef86ed9ba89e507273a68ba39e14685/tello_edu_py-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16f77ed7e453890204045303c3a58343", "sha256": "d89fd2e1e347916ba430e5854073fb5e32845c8b6504c9ebc29a37bdb6a41b08"}, "downloads": -1, "filename": "tello_edu_py-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "16f77ed7e453890204045303c3a58343", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20972, "upload_time": "2019-12-08T08:10:28", "upload_time_iso_8601": "2019-12-08T08:10:28.529709Z", "url": "https://files.pythonhosted.org/packages/51/e2/aede60a7a8b911a530cfe28ec3b5d63d2122d9b25a34caf381544e6d697c/tello_edu_py-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e61a9e8b90fc4c03dc2f259d3e5f7ac7", "sha256": "29ca3ba2b7bb0e529579f0529383a7512d6eecfa0aaf1b755da0e251116a7251"}, "downloads": -1, "filename": "tello_edu_py-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e61a9e8b90fc4c03dc2f259d3e5f7ac7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22978, "upload_time": "2019-12-08T08:10:30", "upload_time_iso_8601": "2019-12-08T08:10:30.817762Z", "url": "https://files.pythonhosted.org/packages/53/40/97bc7fe8984b974e35547811214c7ef86ed9ba89e507273a68ba39e14685/tello_edu_py-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:49 2020"}