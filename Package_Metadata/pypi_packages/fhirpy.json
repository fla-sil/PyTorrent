{"info": {"author": "beda.software", "author_email": "fhirpy@beda.software", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.org/beda-software/fhir-py.svg?branch=master)](https://travis-ci.org/beda-software/fhir-py)\n[![codecov](https://codecov.io/gh/beda-software/fhir-py/branch/master/graph/badge.svg)](https://codecov.io/gh/beda-software/fhir-py)\n[![pypi](https://img.shields.io/pypi/v/fhirpy.svg)](https://pypi.python.org/pypi/fhirpy)\n\n# fhir-py\nasync/sync FHIR client for python.\nThis package provides an API for CRUD operations over FHIR resources\n\nYou can test this library by interactive FHIR course in the repository [Aidbox/jupyter-course](https://github.com/Aidbox/jupyter-course).\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Getting started](#getting-started)\n  - [Async example](#async-example)\n  - [Searchset examples](#searchset-examples)\n  - [Get exactly one resource](#get-exactly-one-resource)\n  - [Get first result](#get-first-result)\n  - [Get total count](#get-total-count)\n  - [Fetch one page](#fetch-one-page)\n  - [Fetch all resources on all pages](#fetch-all-resources-on-all-pages)\n  - [Page number (page)](#page-number-page)\n  - [Page count (_count)](#page-count-_count)\n  - [Sort (_sort)](#sort-_sort)\n  - [Elements (_elements)](#elements-_elements)\n  - [Include](#include)\n  - [Revinclude](#revinclude)\n- [Resource and helper methods](#resource-and-helper-methods)\n  - [Validate resource using operation $validate](#validate-resource-using-operation-validate)\n  - [Accessing resource attributes](#accessing-resource-attributes)\n  - [get_by_path(path, default=None)](#get_by_pathpath-defaultnone)\n  - [serialize()](#serialize)\n- [Reference](#reference)\n  - [Main class structure](#main-class-structure)\n  - [Acync client (based on _aiohttp_) \u2013 AsyncFHIRClient](#acync-client-based-on-_aiohttp_--asyncfhirclient)\n    - [AsyncFHIRResource](#asyncfhirresource)\n    - [AsyncFHIRReference](#asyncfhirreference)\n    - [AsyncFHIRSearchSet](#asyncfhirsearchset)\n  - [Sync client (based on _requests_) \u2013 SyncFHIRClient](#sync-client-based-on-_requests_--syncfhirclient)\n    - [SyncFHIRResource](#syncfhirresource)\n    - [SyncFHIRReference](#syncfhirreference)\n    - [SyncFHIRSearchSet](#syncfhirsearchset)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# Getting started\n## Async example\n```Python\nimport asyncio\nfrom fhirpy import AsyncFHIRClient\n\n\nasync def main():\n    # Create an instance\n    client = AsyncFHIRClient(\n        'http://fhir-server/',\n        authorization='Bearer TOKEN',\n    )\n\n    # Search for patients\n    resources = client.resources('Patient')  # Return lazy search set\n    resources = resources.search(name='John').limit(10).page(2).sort('name')\n    patients = await resources.fetch()  # Returns list of AsyncFHIRResource\n\n    # Create Organization resource\n    organization = client.resource(\n        'Organization',\n        name='beda.software',\n        active=False\n    )\n    await organization.save()\n\n    # Update organization. Resource support accessing its elements\n    # both as attribute and as a dictionary keys\n    if organization['active'] is False:\n        organization.active = True\n    await organization.save()\n\n    # Get patient resource by reference and delete\n    patient_ref = client.reference('Patient', 'new_patient')\n    # Get resource from this reference\n    # (throw ResourceNotFound if no resource was found)\n    patient_res = await patient_ref.to_resource()\n    await patient_res.delete()\n\n    # Iterate over search set\n    org_resources = client.resources('Organization')\n    # Lazy loading resources page by page with page count = 100\n    async for org_resource in org_resources.limit(100):\n        print(org_resource.serialize())\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n## Searchset examples\n```Python\npatients = client.resources('Patient')\n\npatients.search(birthdate__gt='1944', birthdate__lt='1964')\n# /Patient?birthdate=gt1944&birthdate=lt1964\n\npatients.search(name__contains='John')\n# /Patient?name:contains=John\n\npatients.search(name=['John', 'Rivera'])\n# /Patient?name=John&name=Rivera\n\npatients.search(name='John,Eva')\n# /Patient?name=John,Eva\n\npatients.search(family__exact='Moore')\n# /Patient?family:exact=Moore\n\npatients.search(address_state='TX')\n# /Patient?address-state=TX\n\npatients.search(active=True, _id='id')\n# /Patient?active=true&_id=id\n\npatients.search(gender__not=['male', 'female'])\n# /Patient?gender:not=male&gender:not=female\n```\n\n### Chained parameters\n```Python\npatients.search(general_practitioner__Organization__name='Hospital')\n# /Patient?general-practitioner:Organization.name=Hospital\n```\n\n### Reference\n```Python\npractitioner = client.resources('Practitioner').search(id='john-smith').first()\npatients.search(general_practitioner=practitioner)\n# /Patient?general-practitioner=Practitioner/john-smith\n```\n\n### Date\n```Python\nimport pytz\nimport datetime\n\n\npatients.search(birthdate__lt=datetime.datetime.now(pytz.utc))\n# /Patient?birthdate=lt2019-11-19T20:16:08Z\n\npatients.search(birthdate__gt=datetime.datetime(2013, 10, 27, tzinfo=pytz.utc))\n# /Patient?birthdate=gt2013-10-27T00:00:00Z\n```\n\n### Modifiers\n```Python\nconditions = client.resources('Condition')\n\nconditions.search(code__text='headache')\n# /Condition?code:text=headache\n\nconditions.search(code__in='http://acme.org/fhir/ValueSet/cardiac-conditions')\n# /Condition?code:in=http://acme.org/fhir/ValueSet/cardiac-conditions\n\nconditions.search(code__not_in='http://acme.org/fhir/ValueSet/cardiac-conditions')\n# /Condition?code:not-in=http://acme.org/fhir/ValueSet/cardiac-conditions\n\nconditions.search(code__below='126851005')\n# /Condition?code:below=126851005\n\nconditions.search(code__above='126851005')\n# /Condition?code:above=126851005\n```\n\n### Raw parameters\nSometimes you can find that fhir-py does not implement some search parameters from the FHIR specification. \nIn this case, you can use `Raw()` wrapper without any transformations\n\n```Python\nfrom fhirpy.base.searchset import Raw\n\npatients = client.resources('Patient')\npatients.search(Raw('general-practitioner.name=Hospital'))\n# /Patient?general-practitioner.name=Hospital\n```\n\n## Get exactly one resource\n```Python\npractitioners = client.resources('Practitioner')\npatients = client.resources('Patient')\n\ntry:\n    await practitioners.search(active=True, id='id').get()\nexcept ResourceNotFound:\n    pass\nexcept MultipleResourcesFound:\n    pass\n```\n\n## Get first result\n```Python\nawait practitioners.search(name='Jack').first()\n# /Practitioner?name=Jack&_count=1\n\nawait patients.sort('active', '-birthdate').first()\n# /Patient?_sort=active,-birthdate&_count=1\n```\n\n## Get total count\n```Python\nawait practitioners.search(active=True).count()\n\nawait patients.count()\n```\n\n## Fetch one page\n```Python\nawait practitioners.fetch()\n# /Practitioner\n\nawait patients.elements('name', 'telecom').fetch()\n# /Patient?_elements=resourceType,name,id,telecom\n```\n\n## Fetch all resources on all pages\nKeep in mind that this method as well as .fetch() doesn't return any included resources. Use fetch_raw() if you want to get all included resources.\n```Python\n# Returns a list of `Practitioner` resources\nawait practitioners.search(address_city='Krasnoyarsk').fetch_all()\n\nawait patients.fetch_all()\n```\n\n## Page number (page)\n```Python\n# Get third page\nawait practitioners.limit(10).page(3).fetch()\n# /Practitioner?_count=10&page=3\n```\n\n## Page count (_count)\n```Python\n# Get 100 resources\nawait practitioners.limit(100).fetch()\n```\n\n## Sort (_sort)\n```Python\nobservations = client.resources('Observation')\n\nobservations.sort('status', '-date', 'category')\n# /Observation?_sort=status,-date,category\n```\n\n## Elements (_elements)\n```Python\n# Get only specified set of elements for each resource\npatients.elements('identifier', 'active', 'link')\n# /Patient?_elements=identifier,active,link\n\n# Get all elements except specified set\npractitioners.elements('address', 'telecom', exclude=True)\n```\n\n## Include\n```Python\nresult = await client.resources('EpisodeOfCare') \\\n    .include('EpisodeOfCare', 'patient').fetch_raw()\n# /EpisodeOfCare?_include=EpisodeOfCare:patient\nfor entry in result.entry:\n    print(entry.resource)\n\nawait client.resources('MedicationRequest') \\\n    .include('MedicationRequest', 'patient', target_resource_type='Patient') \\\n    .fetch_raw()\n# /MedicationRequest?_include=MedicationRequest:patient:Patient\n```\n### Modifier :iterate (or :recurse in some previous versions of FHIR)\n```Python\n# For FHIR version >= 3.5 we can also use modifier :iterate\nawait client.resources('MedicationRequest') \\\n    .include('MedicationDispense', 'prescription') \\\n    .include('MedicationRequest', 'performer', iterate=True) \\\n    .fetch_raw()\n# /MedicationRequest?_include=MedicationDispense:prescription\n#    &_include:iterate=MedicationRequest:performer\n\n# For FHIR version 3.0-3.3 use modifier :recurse\nawait client.resources('MedicationDispense') \\\n    .include('MedicationRequest', 'prescriber', recursive=True) \\\n    .fetch_raw()\n# /MedicationDispense?_include:recurse=MedicationRequest:prescriber\n```\n### Wild card (any search parameter of type=reference be included)\n```Python\nawait client.resources('Encounter').include('*') \\\n    .fetch_raw()\n# /Encounter?_include=*\n```\n\n## Revinclude\n```Python\nawait practitioners.revinclude('Group', 'member').fetch_raw()\n# /Practitioner?_revinclude=Group:member\n```\nor\n```Python\nawait practitioners.include('Group', 'member', reverse=True).fetch_raw()\n# /Practitioner?_revinclude=Group:member\n```\n\n### Wild card (any search parameter of type=reference be included)\n```Python\nawait client.resources('EpisodeOfCare').revinclude('*') \\\n    .fetch_raw()\n# /EpisodeOfCare?_revinclude=*\n```\n\n# Resource and helper methods\n\n## Validate resource using operation $validate\n```Python\ntry:\n    await client.resource('Patient', birthDate='date', custom_prop='123', telecom=True) \\\n        .is_valid()\nexcept OperationOutcome as e:\n    print('Error: {}'.format(e))\n\npatient = client.resource('Patient', birthDate='1998-01-01')\nif (await patient.is_valid(raise_exception=False)):\n    pass\n```\n\n## Accessing resource attributes\n```Python\npatient = await client.resources('Patient').first()\n\n# Work with the resource as a dictionary\npatient_family = patient['name'][0]['family']\n\n# Or access value by an attribute\npatient_given_name = patient.name[0].given[0]\n```\n\n## get_by_path(path, default=None)\n```Python\npatient_postal = patient.get_by_path(['resource', 'address', 0, 'postalCode'])\n\n# get_by_path can be also used on any nested attribute\npatient_name = patient.name[0]\npatient_fullname = '{} {}'.format(\n    patient_name.get_by_path(['given', 0]),\n    patient_name.get_by_path(['given', 0])\n)\n\n# Get identifier value by specified system or empty string\nuid = patient.get_by_path([\n        'resource', 'identifier',\n        {'system':'http://example.com/identifier/uid'},\n        'value'\n    ], '')\n\n# Get base value amount or 0\ninvoice = await client.resources('Invoice').first()\nbase_value = invoice.get_by_path([\n    'totalPriceComponent',\n    {'type': 'base'},\n    'amount', 'value'], 0)\n```\n\n## serialize()\n```Python\n# Returns dict\npatient.serialize()\n```\n\n# Reference\n\n## Main class structure\nBoth async and sync clients have identical sets of classes and methods.\n\n|               | Sync                | Async                |\n| ------------- | ------------------- | -------------------- |\n| Client        | SyncFHIRClient      | AsyncFHIRClient      |\n| SearchSet     | SyncFHIRSearchSet   | AsyncFHIRSearchSet   |\n| Resource      | SyncFHIRResource    | AsyncFHIRResource    |\n| Reference     | SyncFHIRReference   | AsyncFHIRReference   |\n\n\n## Acync client (based on _aiohttp_) \u2013 AsyncFHIRClient\nImport library:\n\n`from fhirpy import AsyncFHIRClient`\n\nTo create AsyncFHIRClient instance use:\n\n`AsyncFHIRClient(url, authorization='', extra_headers={})`\n\nReturns an instance of the connection to the server which provides:\n* .reference(resource_type, id, reference, **kwargs) - returns `AsyncFHIRReference` to the resource\n* .resource(resource_type, **kwargs) - returns `AsyncFHIRResource` which described below\n* .resources(resource_type) - returns `AsyncFHIRSearchSet`\n\n### AsyncFHIRResource\n\nprovides:\n* .serialize() - serializes resource\n* .get_by_path(path, default=None) \u2013 gets the value at path of resource\n* `async` .save() - creates or updates resource instance\n* `async` .delete() - deletes resource instance\n* `async` .to_reference(**kwargs) - returns `AsyncFHIRReference` for this resource\n\n### AsyncFHIRReference\n\nprovides:\n* `async` .to_resource() - returns `AsyncFHIRResource` for this reference\n\n### AsyncFHIRSearchSet\n\nprovides:\n* .search(param=value)\n* .limit(count)\n* .page(page)\n* .sort(*args)\n* .elements(*args, exclude=False)\n* .include(resource_type, attr=None, recursive=False, iterate=False)\n* .revinclude(resource_type, attr=None, recursive=False, iterate=False)\n* .has(*args, **kwargs)\n* `async` .fetch() - makes query to the server and returns a list of `Resource` filtered by resource type\n* `async` .fetch_all() - makes query to the server and returns a full list of `Resource` filtered by resource type\n* `async` .fetch_raw() - makes query to the server and returns a raw Bundle `Resource`\n* `async` .first() - returns `Resource` or None\n* `async` .get(id=None) - returns `Resource` or raises `ResourceNotFound` when no resource found or MultipleResourcesFound when more than one resource found (parameter 'id' is deprecated)\n* `async` .count() - makes query to the server and returns the total number of resources that match the SearchSet\n\n\n## Sync client (based on _requests_) \u2013 SyncFHIRClient\nImport library:\n\n`from fhirpy import SyncFHIRClient`\n\nTo create SyncFHIRClient instance use:\n\n`SyncFHIRClient(url, authorization='', extra_headers={})`\n\n\nReturns an instance of the connection to the server which provides:\n* .reference(resource_type, id, reference, **kwargs) - returns `SyncFHIRReference` to the resource\n* .resource(resource_type, **kwargs) - returns `SyncFHIRResource` which described below\n* .resources(resource_type) - returns `SyncFHIRSearchSet`\n\n### SyncFHIRResource\n\nThe same as AsyncFHIRResource but with sync methods\n\n### SyncFHIRReference\n\nprovides:\nThe same as AsyncFHIRReference but with sync methods\n\n### SyncFHIRSearchSet\n\nThe same as AsyncFHIRSearchSet but with sync methods\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/beda-software/fhir-py", "keywords": "fhir", "license": "", "maintainer": "", "maintainer_email": "", "name": "fhirpy", "package_url": "https://pypi.org/project/fhirpy/", "platform": "", "project_url": "https://pypi.org/project/fhirpy/", "project_urls": {"Homepage": "http://github.com/beda-software/fhir-py", "Source Code": "https://github.com/beda-software/fhir-py"}, "release_url": "https://pypi.org/project/fhirpy/1.1.0/", "requires_dist": ["requests (>=2.19.0)", "aiohttp (>=3.5.1)", "pytz"], "requires_python": "", "summary": "FHIR client for python", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/beda-software/fhir-py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/937ca29ab51c966e13d4794931f5cac7b9ee7802/68747470733a2f2f7472617669732d63692e6f72672f626564612d736f6674776172652f666869722d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/beda-software/fhir-py\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/820bb51c348cc473508b016936c54d0432f8e2f0/68747470733a2f2f636f6465636f762e696f2f67682f626564612d736f6674776172652f666869722d70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/fhirpy\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f515dd072c1e4f34d731310a51943788911ea179/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6668697270792e737667\"></a></p>\n<h1>fhir-py</h1>\n<p>async/sync FHIR client for python.\nThis package provides an API for CRUD operations over FHIR resources</p>\n<p>You can test this library by interactive FHIR course in the repository <a href=\"https://github.com/Aidbox/jupyter-course\" rel=\"nofollow\">Aidbox/jupyter-course</a>.</p>\n\n\n<ul>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting started</a>\n<ul>\n<li><a href=\"#async-example\" rel=\"nofollow\">Async example</a></li>\n<li><a href=\"#searchset-examples\" rel=\"nofollow\">Searchset examples</a></li>\n<li><a href=\"#get-exactly-one-resource\" rel=\"nofollow\">Get exactly one resource</a></li>\n<li><a href=\"#get-first-result\" rel=\"nofollow\">Get first result</a></li>\n<li><a href=\"#get-total-count\" rel=\"nofollow\">Get total count</a></li>\n<li><a href=\"#fetch-one-page\" rel=\"nofollow\">Fetch one page</a></li>\n<li><a href=\"#fetch-all-resources-on-all-pages\" rel=\"nofollow\">Fetch all resources on all pages</a></li>\n<li><a href=\"#page-number-page\" rel=\"nofollow\">Page number (page)</a></li>\n<li><a href=\"#page-count-_count\" rel=\"nofollow\">Page count (_count)</a></li>\n<li><a href=\"#sort-_sort\" rel=\"nofollow\">Sort (_sort)</a></li>\n<li><a href=\"#elements-_elements\" rel=\"nofollow\">Elements (_elements)</a></li>\n<li><a href=\"#include\" rel=\"nofollow\">Include</a></li>\n<li><a href=\"#revinclude\" rel=\"nofollow\">Revinclude</a></li>\n</ul>\n</li>\n<li><a href=\"#resource-and-helper-methods\" rel=\"nofollow\">Resource and helper methods</a>\n<ul>\n<li><a href=\"#validate-resource-using-operation-validate\" rel=\"nofollow\">Validate resource using operation $validate</a></li>\n<li><a href=\"#accessing-resource-attributes\" rel=\"nofollow\">Accessing resource attributes</a></li>\n<li><a href=\"#get_by_pathpath-defaultnone\" rel=\"nofollow\">get_by_path(path, default=None)</a></li>\n<li><a href=\"#serialize\" rel=\"nofollow\">serialize()</a></li>\n</ul>\n</li>\n<li><a href=\"#reference\" rel=\"nofollow\">Reference</a>\n<ul>\n<li><a href=\"#main-class-structure\" rel=\"nofollow\">Main class structure</a></li>\n<li><a href=\"#acync-client-based-on-_aiohttp_--asyncfhirclient\" rel=\"nofollow\">Acync client (based on <em>aiohttp</em>) \u2013 AsyncFHIRClient</a>\n<ul>\n<li><a href=\"#asyncfhirresource\" rel=\"nofollow\">AsyncFHIRResource</a></li>\n<li><a href=\"#asyncfhirreference\" rel=\"nofollow\">AsyncFHIRReference</a></li>\n<li><a href=\"#asyncfhirsearchset\" rel=\"nofollow\">AsyncFHIRSearchSet</a></li>\n</ul>\n</li>\n<li><a href=\"#sync-client-based-on-_requests_--syncfhirclient\" rel=\"nofollow\">Sync client (based on <em>requests</em>) \u2013 SyncFHIRClient</a>\n<ul>\n<li><a href=\"#syncfhirresource\" rel=\"nofollow\">SyncFHIRResource</a></li>\n<li><a href=\"#syncfhirreference\" rel=\"nofollow\">SyncFHIRReference</a></li>\n<li><a href=\"#syncfhirsearchset\" rel=\"nofollow\">SyncFHIRSearchSet</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h1>Getting started</h1>\n<h2>Async example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fhirpy</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncFHIRClient</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Create an instance</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncFHIRClient</span><span class=\"p\">(</span>\n        <span class=\"s1\">'http://fhir-server/'</span><span class=\"p\">,</span>\n        <span class=\"n\">authorization</span><span class=\"o\">=</span><span class=\"s1\">'Bearer TOKEN'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Search for patients</span>\n    <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return lazy search set</span>\n    <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n    <span class=\"n\">patients</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns list of AsyncFHIRResource</span>\n\n    <span class=\"c1\"># Create Organization resource</span>\n    <span class=\"n\">organization</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Organization'</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'beda.software'</span><span class=\"p\">,</span>\n        <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">organization</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Update organization. Resource support accessing its elements</span>\n    <span class=\"c1\"># both as attribute and as a dictionary keys</span>\n    <span class=\"k\">if</span> <span class=\"n\">organization</span><span class=\"p\">[</span><span class=\"s1\">'active'</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">organization</span><span class=\"o\">.</span><span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">await</span> <span class=\"n\">organization</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Get patient resource by reference and delete</span>\n    <span class=\"n\">patient_ref</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">reference</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">,</span> <span class=\"s1\">'new_patient'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get resource from this reference</span>\n    <span class=\"c1\"># (throw ResourceNotFound if no resource was found)</span>\n    <span class=\"n\">patient_res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">patient_ref</span><span class=\"o\">.</span><span class=\"n\">to_resource</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">patient_res</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Iterate over search set</span>\n    <span class=\"n\">org_resources</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Organization'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Lazy loading resources page by page with page count = 100</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">org_resource</span> <span class=\"ow\">in</span> <span class=\"n\">org_resources</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">org_resource</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>Searchset examples</h2>\n<pre><span class=\"n\">patients</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">birthdate__gt</span><span class=\"o\">=</span><span class=\"s1\">'1944'</span><span class=\"p\">,</span> <span class=\"n\">birthdate__lt</span><span class=\"o\">=</span><span class=\"s1\">'1964'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?birthdate=gt1944&amp;birthdate=lt1964</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?name:contains=John</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'Rivera'</span><span class=\"p\">])</span>\n<span class=\"c1\"># /Patient?name=John&amp;name=Rivera</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John,Eva'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?name=John,Eva</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">family__exact</span><span class=\"o\">=</span><span class=\"s1\">'Moore'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?family:exact=Moore</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">address_state</span><span class=\"o\">=</span><span class=\"s1\">'TX'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?address-state=TX</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">_id</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?active=true&amp;_id=id</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">gender__not</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'male'</span><span class=\"p\">,</span> <span class=\"s1\">'female'</span><span class=\"p\">])</span>\n<span class=\"c1\"># /Patient?gender:not=male&amp;gender:not=female</span>\n</pre>\n<h3>Chained parameters</h3>\n<pre><span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">general_practitioner__Organization__name</span><span class=\"o\">=</span><span class=\"s1\">'Hospital'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?general-practitioner:Organization.name=Hospital</span>\n</pre>\n<h3>Reference</h3>\n<pre><span class=\"n\">practitioner</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Practitioner'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'john-smith'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">general_practitioner</span><span class=\"o\">=</span><span class=\"n\">practitioner</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?general-practitioner=Practitioner/john-smith</span>\n</pre>\n<h3>Date</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">birthdate__lt</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">))</span>\n<span class=\"c1\"># /Patient?birthdate=lt2019-11-19T20:16:08Z</span>\n\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">birthdate__gt</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">))</span>\n<span class=\"c1\"># /Patient?birthdate=gt2013-10-27T00:00:00Z</span>\n</pre>\n<h3>Modifiers</h3>\n<pre><span class=\"n\">conditions</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Condition'</span><span class=\"p\">)</span>\n\n<span class=\"n\">conditions</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">code__text</span><span class=\"o\">=</span><span class=\"s1\">'headache'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Condition?code:text=headache</span>\n\n<span class=\"n\">conditions</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">code__in</span><span class=\"o\">=</span><span class=\"s1\">'http://acme.org/fhir/ValueSet/cardiac-conditions'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Condition?code:in=http://acme.org/fhir/ValueSet/cardiac-conditions</span>\n\n<span class=\"n\">conditions</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">code__not_in</span><span class=\"o\">=</span><span class=\"s1\">'http://acme.org/fhir/ValueSet/cardiac-conditions'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Condition?code:not-in=http://acme.org/fhir/ValueSet/cardiac-conditions</span>\n\n<span class=\"n\">conditions</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">code__below</span><span class=\"o\">=</span><span class=\"s1\">'126851005'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Condition?code:below=126851005</span>\n\n<span class=\"n\">conditions</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">code__above</span><span class=\"o\">=</span><span class=\"s1\">'126851005'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Condition?code:above=126851005</span>\n</pre>\n<h3>Raw parameters</h3>\n<p>Sometimes you can find that fhir-py does not implement some search parameters from the FHIR specification.\nIn this case, you can use <code>Raw()</code> wrapper without any transformations</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fhirpy.base.searchset</span> <span class=\"kn\">import</span> <span class=\"n\">Raw</span>\n\n<span class=\"n\">patients</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span>\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">Raw</span><span class=\"p\">(</span><span class=\"s1\">'general-practitioner.name=Hospital'</span><span class=\"p\">))</span>\n<span class=\"c1\"># /Patient?general-practitioner.name=Hospital</span>\n</pre>\n<h2>Get exactly one resource</h2>\n<pre><span class=\"n\">practitioners</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Practitioner'</span><span class=\"p\">)</span>\n<span class=\"n\">patients</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">ResourceNotFound</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">except</span> <span class=\"n\">MultipleResourcesFound</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Get first result</h2>\n<pre><span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Jack'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Practitioner?name=Jack&amp;_count=1</span>\n\n<span class=\"k\">await</span> <span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'-birthdate'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Patient?_sort=active,-birthdate&amp;_count=1</span>\n</pre>\n<h2>Get total count</h2>\n<pre><span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"k\">await</span> <span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre>\n<h2>Fetch one page</h2>\n<pre><span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Practitioner</span>\n\n<span class=\"k\">await</span> <span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'telecom'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Patient?_elements=resourceType,name,id,telecom</span>\n</pre>\n<h2>Fetch all resources on all pages</h2>\n<p>Keep in mind that this method as well as .fetch() doesn't return any included resources. Use fetch_raw() if you want to get all included resources.</p>\n<pre><span class=\"c1\"># Returns a list of `Practitioner` resources</span>\n<span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">address_city</span><span class=\"o\">=</span><span class=\"s1\">'Krasnoyarsk'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n\n<span class=\"k\">await</span> <span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n</pre>\n<h2>Page number (page)</h2>\n<pre><span class=\"c1\"># Get third page</span>\n<span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Practitioner?_count=10&amp;page=3</span>\n</pre>\n<h2>Page count (_count)</h2>\n<pre><span class=\"c1\"># Get 100 resources</span>\n<span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n</pre>\n<h2>Sort (_sort)</h2>\n<pre><span class=\"n\">observations</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Observation'</span><span class=\"p\">)</span>\n\n<span class=\"n\">observations</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"s1\">'-date'</span><span class=\"p\">,</span> <span class=\"s1\">'category'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Observation?_sort=status,-date,category</span>\n</pre>\n<h2>Elements (_elements)</h2>\n<pre><span class=\"c1\"># Get only specified set of elements for each resource</span>\n<span class=\"n\">patients</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"p\">(</span><span class=\"s1\">'identifier'</span><span class=\"p\">,</span> <span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'link'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /Patient?_elements=identifier,active,link</span>\n\n<span class=\"c1\"># Get all elements except specified set</span>\n<span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">,</span> <span class=\"s1\">'telecom'</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Include</h2>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'EpisodeOfCare'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'EpisodeOfCare'</span><span class=\"p\">,</span> <span class=\"s1\">'patient'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /EpisodeOfCare?_include=EpisodeOfCare:patient</span>\n<span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">entry</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'MedicationRequest'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'MedicationRequest'</span><span class=\"p\">,</span> <span class=\"s1\">'patient'</span><span class=\"p\">,</span> <span class=\"n\">target_resource_type</span><span class=\"o\">=</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /MedicationRequest?_include=MedicationRequest:patient:Patient</span>\n</pre>\n<h3>Modifier :iterate (or :recurse in some previous versions of FHIR)</h3>\n<pre><span class=\"c1\"># For FHIR version &gt;= 3.5 we can also use modifier :iterate</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'MedicationRequest'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'MedicationDispense'</span><span class=\"p\">,</span> <span class=\"s1\">'prescription'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'MedicationRequest'</span><span class=\"p\">,</span> <span class=\"s1\">'performer'</span><span class=\"p\">,</span> <span class=\"n\">iterate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /MedicationRequest?_include=MedicationDispense:prescription</span>\n<span class=\"c1\">#    &amp;_include:iterate=MedicationRequest:performer</span>\n\n<span class=\"c1\"># For FHIR version 3.0-3.3 use modifier :recurse</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'MedicationDispense'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'MedicationRequest'</span><span class=\"p\">,</span> <span class=\"s1\">'prescriber'</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /MedicationDispense?_include:recurse=MedicationRequest:prescriber</span>\n</pre>\n<h3>Wild card (any search parameter of type=reference be included)</h3>\n<pre><span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Encounter'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Encounter?_include=*</span>\n</pre>\n<h2>Revinclude</h2>\n<pre><span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">revinclude</span><span class=\"p\">(</span><span class=\"s1\">'Group'</span><span class=\"p\">,</span> <span class=\"s1\">'member'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Practitioner?_revinclude=Group:member</span>\n</pre>\n<p>or</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">practitioners</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'Group'</span><span class=\"p\">,</span> <span class=\"s1\">'member'</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /Practitioner?_revinclude=Group:member</span>\n</pre>\n<h3>Wild card (any search parameter of type=reference be included)</h3>\n<pre><span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'EpisodeOfCare'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">revinclude</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">fetch_raw</span><span class=\"p\">()</span>\n<span class=\"c1\"># /EpisodeOfCare?_revinclude=*</span>\n</pre>\n<h1>Resource and helper methods</h1>\n<h2>Validate resource using operation $validate</h2>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">,</span> <span class=\"n\">birthDate</span><span class=\"o\">=</span><span class=\"s1\">'date'</span><span class=\"p\">,</span> <span class=\"n\">custom_prop</span><span class=\"o\">=</span><span class=\"s1\">'123'</span><span class=\"p\">,</span> <span class=\"n\">telecom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">OperationOutcome</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n\n<span class=\"n\">patient</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">,</span> <span class=\"n\">birthDate</span><span class=\"o\">=</span><span class=\"s1\">'1998-01-01'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">(</span><span class=\"n\">raise_exception</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Accessing resource attributes</h2>\n<pre><span class=\"n\">patient</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Work with the resource as a dictionary</span>\n<span class=\"n\">patient_family</span> <span class=\"o\">=</span> <span class=\"n\">patient</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'family'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Or access value by an attribute</span>\n<span class=\"n\">patient_given_name</span> <span class=\"o\">=</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">given</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<h2>get_by_path(path, default=None)</h2>\n<pre><span class=\"n\">patient_postal</span> <span class=\"o\">=</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">get_by_path</span><span class=\"p\">([</span><span class=\"s1\">'resource'</span><span class=\"p\">,</span> <span class=\"s1\">'address'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'postalCode'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># get_by_path can be also used on any nested attribute</span>\n<span class=\"n\">patient_name</span> <span class=\"o\">=</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">patient_fullname</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">patient_name</span><span class=\"o\">.</span><span class=\"n\">get_by_path</span><span class=\"p\">([</span><span class=\"s1\">'given'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span>\n    <span class=\"n\">patient_name</span><span class=\"o\">.</span><span class=\"n\">get_by_path</span><span class=\"p\">([</span><span class=\"s1\">'given'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Get identifier value by specified system or empty string</span>\n<span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">get_by_path</span><span class=\"p\">([</span>\n        <span class=\"s1\">'resource'</span><span class=\"p\">,</span> <span class=\"s1\">'identifier'</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s1\">'system'</span><span class=\"p\">:</span><span class=\"s1\">'http://example.com/identifier/uid'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'value'</span>\n    <span class=\"p\">],</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get base value amount or 0</span>\n<span class=\"n\">invoice</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"n\">base_value</span> <span class=\"o\">=</span> <span class=\"n\">invoice</span><span class=\"o\">.</span><span class=\"n\">get_by_path</span><span class=\"p\">([</span>\n    <span class=\"s1\">'totalPriceComponent'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'base'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'amount'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h2>serialize()</h2>\n<pre><span class=\"c1\"># Returns dict</span>\n<span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>\n</pre>\n<h1>Reference</h1>\n<h2>Main class structure</h2>\n<p>Both async and sync clients have identical sets of classes and methods.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sync</th>\n<th>Async</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Client</td>\n<td>SyncFHIRClient</td>\n<td>AsyncFHIRClient</td>\n</tr>\n<tr>\n<td>SearchSet</td>\n<td>SyncFHIRSearchSet</td>\n<td>AsyncFHIRSearchSet</td>\n</tr>\n<tr>\n<td>Resource</td>\n<td>SyncFHIRResource</td>\n<td>AsyncFHIRResource</td>\n</tr>\n<tr>\n<td>Reference</td>\n<td>SyncFHIRReference</td>\n<td>AsyncFHIRReference</td>\n</tr></tbody></table>\n<h2>Acync client (based on <em>aiohttp</em>) \u2013 AsyncFHIRClient</h2>\n<p>Import library:</p>\n<p><code>from fhirpy import AsyncFHIRClient</code></p>\n<p>To create AsyncFHIRClient instance use:</p>\n<p><code>AsyncFHIRClient(url, authorization='', extra_headers={})</code></p>\n<p>Returns an instance of the connection to the server which provides:</p>\n<ul>\n<li>.reference(resource_type, id, reference, **kwargs) - returns <code>AsyncFHIRReference</code> to the resource</li>\n<li>.resource(resource_type, **kwargs) - returns <code>AsyncFHIRResource</code> which described below</li>\n<li>.resources(resource_type) - returns <code>AsyncFHIRSearchSet</code></li>\n</ul>\n<h3>AsyncFHIRResource</h3>\n<p>provides:</p>\n<ul>\n<li>.serialize() - serializes resource</li>\n<li>.get_by_path(path, default=None) \u2013 gets the value at path of resource</li>\n<li><code>async</code> .save() - creates or updates resource instance</li>\n<li><code>async</code> .delete() - deletes resource instance</li>\n<li><code>async</code> .to_reference(**kwargs) - returns <code>AsyncFHIRReference</code> for this resource</li>\n</ul>\n<h3>AsyncFHIRReference</h3>\n<p>provides:</p>\n<ul>\n<li><code>async</code> .to_resource() - returns <code>AsyncFHIRResource</code> for this reference</li>\n</ul>\n<h3>AsyncFHIRSearchSet</h3>\n<p>provides:</p>\n<ul>\n<li>.search(param=value)</li>\n<li>.limit(count)</li>\n<li>.page(page)</li>\n<li>.sort(*args)</li>\n<li>.elements(*args, exclude=False)</li>\n<li>.include(resource_type, attr=None, recursive=False, iterate=False)</li>\n<li>.revinclude(resource_type, attr=None, recursive=False, iterate=False)</li>\n<li>.has(*args, **kwargs)</li>\n<li><code>async</code> .fetch() - makes query to the server and returns a list of <code>Resource</code> filtered by resource type</li>\n<li><code>async</code> .fetch_all() - makes query to the server and returns a full list of <code>Resource</code> filtered by resource type</li>\n<li><code>async</code> .fetch_raw() - makes query to the server and returns a raw Bundle <code>Resource</code></li>\n<li><code>async</code> .first() - returns <code>Resource</code> or None</li>\n<li><code>async</code> .get(id=None) - returns <code>Resource</code> or raises <code>ResourceNotFound</code> when no resource found or MultipleResourcesFound when more than one resource found (parameter 'id' is deprecated)</li>\n<li><code>async</code> .count() - makes query to the server and returns the total number of resources that match the SearchSet</li>\n</ul>\n<h2>Sync client (based on <em>requests</em>) \u2013 SyncFHIRClient</h2>\n<p>Import library:</p>\n<p><code>from fhirpy import SyncFHIRClient</code></p>\n<p>To create SyncFHIRClient instance use:</p>\n<p><code>SyncFHIRClient(url, authorization='', extra_headers={})</code></p>\n<p>Returns an instance of the connection to the server which provides:</p>\n<ul>\n<li>.reference(resource_type, id, reference, **kwargs) - returns <code>SyncFHIRReference</code> to the resource</li>\n<li>.resource(resource_type, **kwargs) - returns <code>SyncFHIRResource</code> which described below</li>\n<li>.resources(resource_type) - returns <code>SyncFHIRSearchSet</code></li>\n</ul>\n<h3>SyncFHIRResource</h3>\n<p>The same as AsyncFHIRResource but with sync methods</p>\n<h3>SyncFHIRReference</h3>\n<p>provides:\nThe same as AsyncFHIRReference but with sync methods</p>\n<h3>SyncFHIRSearchSet</h3>\n<p>The same as AsyncFHIRSearchSet but with sync methods</p>\n\n          </div>"}, "last_serial": 6360438, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "1f7e5cf51782519a6d220f10b2c33b2d", "sha256": "29cb8a0dfd62836451265555b11742b82e20b8628b30bf9a9025708a3301914d"}, "downloads": -1, "filename": "fhirpy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1f7e5cf51782519a6d220f10b2c33b2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144478, "upload_time": "2018-11-20T15:47:37", "upload_time_iso_8601": "2018-11-20T15:47:37.341780Z", "url": "https://files.pythonhosted.org/packages/ed/ce/55f7ffa9e3ce268b56210a8818ef91288c3e674b8c56123e30d739f594ad/fhirpy-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9bfc4f44d107197dd6e7a90c5fdbf984", "sha256": "1e11bff7afa7af5641bef4df6f3ff4fd240f7dbbb5d27dcea33107e1bf5dab68"}, "downloads": -1, "filename": "fhirpy-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9bfc4f44d107197dd6e7a90c5fdbf984", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 182737, "upload_time": "2019-06-17T07:26:18", "upload_time_iso_8601": "2019-06-17T07:26:18.528847Z", "url": "https://files.pythonhosted.org/packages/f2/47/c5ebc0246c616276ea22c3ffa63919e2b30f2dd3bf63b73a27a3f9d11b40/fhirpy-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c21dc926d88985e960ca8cf0f8c7c6f", "sha256": "fd56af1110758f674ada52f52b00a6612f8c04a9441d17a1800bfbde89e5961e"}, "downloads": -1, "filename": "fhirpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4c21dc926d88985e960ca8cf0f8c7c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 171574, "upload_time": "2019-06-17T07:26:20", "upload_time_iso_8601": "2019-06-17T07:26:20.674523Z", "url": "https://files.pythonhosted.org/packages/22/48/76bb0527d60cb05cfe6315410af5faf9a01e42ea5a803ea49eff6cbc94b0/fhirpy-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ba4bfdc4e8ca1c699c64d7cca0a6bc99", "sha256": "e863675b6ebec290f3d41b557a16232e04e57b3783a566d0d8a3e317eaec550e"}, "downloads": -1, "filename": "fhirpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ba4bfdc4e8ca1c699c64d7cca0a6bc99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 189800, "upload_time": "2019-11-20T15:08:57", "upload_time_iso_8601": "2019-11-20T15:08:57.076163Z", "url": "https://files.pythonhosted.org/packages/72/de/05bca3a3c9d4fe5ab86d01032473d57bd790c7c5ecec298ac99730ef7934/fhirpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07abaa560db3cc549f57dcb4ee8826d4", "sha256": "f1ed5721816de23f4eab9d8b6aa164ed468766a7e88547c6b105d4449b9bc6f7"}, "downloads": -1, "filename": "fhirpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "07abaa560db3cc549f57dcb4ee8826d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179082, "upload_time": "2019-11-20T15:08:59", "upload_time_iso_8601": "2019-11-20T15:08:59.360227Z", "url": "https://files.pythonhosted.org/packages/a7/4c/6313524bb33f4a1f6f8ff7fe63ee304f0337726505a1164134176f8b635c/fhirpy-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "42ab2612d24fa2d090ca224c9dc936a2", "sha256": "f189e4c99dd48b8e0c280070055d3a8541f5ae95b530a95129f1588e63afa5c7"}, "downloads": -1, "filename": "fhirpy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "42ab2612d24fa2d090ca224c9dc936a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 192296, "upload_time": "2019-12-26T04:50:55", "upload_time_iso_8601": "2019-12-26T04:50:55.209636Z", "url": "https://files.pythonhosted.org/packages/b1/38/2c1916955b13d62255d66842ed22b4bdbde65df65dd3d017b5befe6ba3e8/fhirpy-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68c3ac67b0a1b84c1578d0509c563b68", "sha256": "ea26e82a080b1a7c9d94c995b5fd523d43f9a4ceb23e699f8dafd696113c3dbd"}, "downloads": -1, "filename": "fhirpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "68c3ac67b0a1b84c1578d0509c563b68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19201, "upload_time": "2019-12-26T04:50:58", "upload_time_iso_8601": "2019-12-26T04:50:58.482594Z", "url": "https://files.pythonhosted.org/packages/ac/d6/1c8ff8d285638c10785d42b2c71bdd253aac80a6c1f44fbc51aa86131406/fhirpy-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42ab2612d24fa2d090ca224c9dc936a2", "sha256": "f189e4c99dd48b8e0c280070055d3a8541f5ae95b530a95129f1588e63afa5c7"}, "downloads": -1, "filename": "fhirpy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "42ab2612d24fa2d090ca224c9dc936a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 192296, "upload_time": "2019-12-26T04:50:55", "upload_time_iso_8601": "2019-12-26T04:50:55.209636Z", "url": "https://files.pythonhosted.org/packages/b1/38/2c1916955b13d62255d66842ed22b4bdbde65df65dd3d017b5befe6ba3e8/fhirpy-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68c3ac67b0a1b84c1578d0509c563b68", "sha256": "ea26e82a080b1a7c9d94c995b5fd523d43f9a4ceb23e699f8dafd696113c3dbd"}, "downloads": -1, "filename": "fhirpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "68c3ac67b0a1b84c1578d0509c563b68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19201, "upload_time": "2019-12-26T04:50:58", "upload_time_iso_8601": "2019-12-26T04:50:58.482594Z", "url": "https://files.pythonhosted.org/packages/ac/d6/1c8ff8d285638c10785d42b2c71bdd253aac80a6c1f44fbc51aa86131406/fhirpy-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:44 2020"}