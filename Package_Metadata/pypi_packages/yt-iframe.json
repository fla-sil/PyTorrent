{"info": {"author": "Robby Bergers", "author_email": "bergersr@my.easternct.edu", "bugtrack_url": null, "classifiers": [], "description": "YT iframe Generator\n================\n_yt_iframe_ is a python module which can convert a youtube video link into an embeddable iframe.\nIn order to use this module, install it through your terminal.\n\n``` console\nfoo@bar:~$ pip install yt-iframe\n```\n___\n``` python\n# Import statement\nfrom yt_iframe import yt\n```\n___\n## Using the module\n\n### yt.video()\nThe **video()** function takes the youtube video link as a string argument.\nThere are _width_ and _height_ optional arguments, so the size of the iframe can be specified.\nIt returns the iframe as a string.\n\n``` python\nurl = 'https://www.youtube.com/watch?v=UzIQOQGKeyI' # (Required)\nwidth = '560' # (Optional)\nheight = '315' # (Optional)\niframe = yt.video(url, width=width, height=height)\n```\n___\n### yt.channel()\nThe **channel()** function takes a youtube channel link as a string argument.\nIt returns a list of youtube video links.\n\n``` python\nurl = 'https://www.youtube.com/user/ouramazingspace' # (Required)\nvideolist = yt.channel(url)\n```\n___\n### yt.channelDict()\nThe **channelDict()** function takes a youtube channel link as a string argument.\nIt returns a nested dictionary containing the name of the channel, and video titles.\n\n``` python\nurl = 'https://www.youtube.com/user/ouramazingspace'\nvideolist = yt.channelDict(url)\n\nvideolist['name'] # Name of channel\nvideolist['videos'] # Nested dictionary. Key = video title, Value = link\n```\n___\n### yt.getFrames()\nThe **getFrames()** function takes a list of youtube videos as a list argument.\nThere are _width_ and _height_ arguments (defaults are 560 and 315 respectively), so the size of the iframes can be specified.\nThere is also a _responsive_ argument (defaults to false) which returns html for responsive iframes.\nIt returns a list of iframes.\n\n``` python\nchannel = yt.channel('https://www.youtube.com/user/ouramazingspace') # (Required)\nwidth = '560' # (Optional)\nheight = '315' # (Optional)\nresponsive = True # (Optional)\n\n# Fixed size iframes\niframes = yt.getFrames(channel, width=width, height=height)\n\n# Responsive iframes\niframes = yt.getFrames(channel, responsive=responsive)\n```\n___\n### yt.linkResponsive()\nThe **linkResponsive()** function returns a line of html which links the stylesheet needed for responsive iframes.\nAlternatively, you can add this line of html in your head tag.\n'<link rel=\"stylesheet\" href=\"https://bergers.rocks/packages/yt_iframe.css\">'\n___\n### yt.videoResponsive()\nThe **videoResponsive()** function is similar to the _video()_ function, except it returns the html for a responsive iframe.\nIn order to use responsive iframes, make sure the css file is linked in the html file with the _linkResponsive()_ function.\nThere are two possible layout options for responsive iframes. _singlecolumn_ takes up 100% the width of the parent element, _twocolumn_ will take up 50% and float left.\n\n``` python\nurl = 'https://www.youtube.com/watch?v=UzIQOQGKeyI' # (Required)\nlayout = 'singlecolumn' # (Optional)\n\nvideo = yt.videoResponsive(url, layout=layout) # Get HTML\n```\n___\n## Changelog\n\n### == v1.0.4 ==\n* _Add layout argument to videoResponsive() and getFrames()_\n* _Add two column layout option to videoResponsive()_\n\n### == v1.0.3 ==\n* _Add responsive iframes_\n* _getFrames() arguments changed from framewidth and frameheight to width and height_\n\n### == v1.0.1 ==\n* _Allow size of iframe to be specified in video() function_\n* _Allow sizes of iframes to be specified in getFrames() function_\n\n### == v1.0.0 ==\n* _Initial release_", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RobbyB97/yt-iframe-python/tree/v1.0.1", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yt-iframe", "package_url": "https://pypi.org/project/yt-iframe/", "platform": "", "project_url": "https://pypi.org/project/yt-iframe/", "project_urls": {"Homepage": "https://github.com/RobbyB97/yt-iframe-python/tree/v1.0.1"}, "release_url": "https://pypi.org/project/yt-iframe/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "YouTube video iframe generator", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>YT iframe Generator</h1>\n<p><em>yt_iframe</em> is a python module which can convert a youtube video link into an embeddable iframe.\nIn order to use this module, install it through your terminal.</p>\n<pre><span class=\"gp\">foo@bar:~$</span> pip install yt-iframe\n</pre>\n<hr>\n<pre><span class=\"c1\"># Import statement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yt_iframe</span> <span class=\"kn\">import</span> <span class=\"n\">yt</span>\n</pre>\n<hr>\n<h2>Using the module</h2>\n<h3>yt.video()</h3>\n<p>The <strong>video()</strong> function takes the youtube video link as a string argument.\nThere are <em>width</em> and <em>height</em> optional arguments, so the size of the iframe can be specified.\nIt returns the iframe as a string.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://www.youtube.com/watch?v=UzIQOQGKeyI'</span> <span class=\"c1\"># (Required)</span>\n<span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"s1\">'560'</span> <span class=\"c1\"># (Optional)</span>\n<span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"s1\">'315'</span> <span class=\"c1\"># (Optional)</span>\n<span class=\"n\">iframe</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">video</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">height</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>yt.channel()</h3>\n<p>The <strong>channel()</strong> function takes a youtube channel link as a string argument.\nIt returns a list of youtube video links.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://www.youtube.com/user/ouramazingspace'</span> <span class=\"c1\"># (Required)</span>\n<span class=\"n\">videolist</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>yt.channelDict()</h3>\n<p>The <strong>channelDict()</strong> function takes a youtube channel link as a string argument.\nIt returns a nested dictionary containing the name of the channel, and video titles.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://www.youtube.com/user/ouramazingspace'</span>\n<span class=\"n\">videolist</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">channelDict</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"n\">videolist</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"c1\"># Name of channel</span>\n<span class=\"n\">videolist</span><span class=\"p\">[</span><span class=\"s1\">'videos'</span><span class=\"p\">]</span> <span class=\"c1\"># Nested dictionary. Key = video title, Value = link</span>\n</pre>\n<hr>\n<h3>yt.getFrames()</h3>\n<p>The <strong>getFrames()</strong> function takes a list of youtube videos as a list argument.\nThere are <em>width</em> and <em>height</em> arguments (defaults are 560 and 315 respectively), so the size of the iframes can be specified.\nThere is also a <em>responsive</em> argument (defaults to false) which returns html for responsive iframes.\nIt returns a list of iframes.</p>\n<pre><span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">(</span><span class=\"s1\">'https://www.youtube.com/user/ouramazingspace'</span><span class=\"p\">)</span> <span class=\"c1\"># (Required)</span>\n<span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"s1\">'560'</span> <span class=\"c1\"># (Optional)</span>\n<span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"s1\">'315'</span> <span class=\"c1\"># (Optional)</span>\n<span class=\"n\">responsive</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"c1\"># (Optional)</span>\n\n<span class=\"c1\"># Fixed size iframes</span>\n<span class=\"n\">iframes</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">getFrames</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">height</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Responsive iframes</span>\n<span class=\"n\">iframes</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">getFrames</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">responsive</span><span class=\"o\">=</span><span class=\"n\">responsive</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>yt.linkResponsive()</h3>\n<p>The <strong>linkResponsive()</strong> function returns a line of html which links the stylesheet needed for responsive iframes.\nAlternatively, you can add this line of html in your head tag.\n'&lt;link rel=\"stylesheet\" href=\"https://bergers.rocks/packages/yt_iframe.css\"&gt;'</p>\n<hr>\n<h3>yt.videoResponsive()</h3>\n<p>The <strong>videoResponsive()</strong> function is similar to the <em>video()</em> function, except it returns the html for a responsive iframe.\nIn order to use responsive iframes, make sure the css file is linked in the html file with the <em>linkResponsive()</em> function.\nThere are two possible layout options for responsive iframes. <em>singlecolumn</em> takes up 100% the width of the parent element, <em>twocolumn</em> will take up 50% and float left.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://www.youtube.com/watch?v=UzIQOQGKeyI'</span> <span class=\"c1\"># (Required)</span>\n<span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"s1\">'singlecolumn'</span> <span class=\"c1\"># (Optional)</span>\n\n<span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">videoResponsive</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"n\">layout</span><span class=\"p\">)</span> <span class=\"c1\"># Get HTML</span>\n</pre>\n<hr>\n<h2>Changelog</h2>\n<h3>== v1.0.4 ==</h3>\n<ul>\n<li><em>Add layout argument to videoResponsive() and getFrames()</em></li>\n<li><em>Add two column layout option to videoResponsive()</em></li>\n</ul>\n<h3>== v1.0.3 ==</h3>\n<ul>\n<li><em>Add responsive iframes</em></li>\n<li><em>getFrames() arguments changed from framewidth and frameheight to width and height</em></li>\n</ul>\n<h3>== v1.0.1 ==</h3>\n<ul>\n<li><em>Allow size of iframe to be specified in video() function</em></li>\n<li><em>Allow sizes of iframes to be specified in getFrames() function</em></li>\n</ul>\n<h3>== v1.0.0 ==</h3>\n<ul>\n<li><em>Initial release</em></li>\n</ul>\n\n          </div>"}, "last_serial": 5294050, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c00839cf9ef94da08473b554622fda58", "sha256": "c93e1fc89bb2509522fdf4d20757a04a2be5f0e60f86e007d40916a0dfec47fd"}, "downloads": -1, "filename": "yt_iframe-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c00839cf9ef94da08473b554622fda58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1649, "upload_time": "2019-03-21T02:21:33", "upload_time_iso_8601": "2019-03-21T02:21:33.549787Z", "url": "https://files.pythonhosted.org/packages/52/6e/d78f73ff8bb6561a4e61dfd491d3d2dfe89afd63cc3c2169547bf2bb55ec/yt_iframe-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2338f40cfcd8aeaa09b636f202825f4", "sha256": "d37ead51ed82d254561b1e354ddb17c0e35497afd8c207bc2e48b401ae297fa8"}, "downloads": -1, "filename": "yt_iframe-0.1.tar.gz", "has_sig": false, "md5_digest": "c2338f40cfcd8aeaa09b636f202825f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1368, "upload_time": "2019-03-21T02:21:35", "upload_time_iso_8601": "2019-03-21T02:21:35.411121Z", "url": "https://files.pythonhosted.org/packages/72/a7/01251ab0761b03c22206a483b575bf75fe80ea63feddb8b115b06e1ba717/yt_iframe-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "36bb1e76f9594e262b4833d61ac7e1c4", "sha256": "834915278beeddd7ae3857fbe6571a9823d3476d25d10c5ab2415e3ea15a4b1e"}, "downloads": -1, "filename": "yt_iframe-0.2.tar.gz", "has_sig": false, "md5_digest": "36bb1e76f9594e262b4833d61ac7e1c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2230, "upload_time": "2019-03-21T18:42:20", "upload_time_iso_8601": "2019-03-21T18:42:20.344227Z", "url": "https://files.pythonhosted.org/packages/48/4d/35709d010e74fe243f80d613dfbacbb7350d115102f5399ff8c9c95545bb/yt_iframe-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "93bd6f1c3fb841f6bacb8929f114cd54", "sha256": "cf66e399dea1a4b6fe4bea3b975b14f34e753403007d57cf37845863f7e9ac18"}, "downloads": -1, "filename": "yt_iframe-0.3.tar.gz", "has_sig": false, "md5_digest": "93bd6f1c3fb841f6bacb8929f114cd54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2222, "upload_time": "2019-03-21T18:46:20", "upload_time_iso_8601": "2019-03-21T18:46:20.793814Z", "url": "https://files.pythonhosted.org/packages/98/26/489700883765fd0eb131fefbeac9284ebcf20cd777dfa2c3df5d7d4ac1fd/yt_iframe-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "4bb6f6c150d678a2b20410b608348665", "sha256": "c82451c75105742b14bec35cc0b61ca090a5cdb918d805799d9dd5b5fabba0ca"}, "downloads": -1, "filename": "yt_iframe-0.4.tar.gz", "has_sig": false, "md5_digest": "4bb6f6c150d678a2b20410b608348665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2231, "upload_time": "2019-03-21T18:51:33", "upload_time_iso_8601": "2019-03-21T18:51:33.630996Z", "url": "https://files.pythonhosted.org/packages/e8/37/d363c7a192c6067f878a3bbcc4fd6032a0b2dc334da469c29a3c3acb7ea3/yt_iframe-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "07b2b129ea763974fd377969159ee1d9", "sha256": "bb0f8f4c4beb6cd3225661ebae7164e68c3eb2fd389000a2325fa605c2dae87a"}, "downloads": -1, "filename": "yt_iframe-0.5.tar.gz", "has_sig": false, "md5_digest": "07b2b129ea763974fd377969159ee1d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2147, "upload_time": "2019-03-21T20:43:26", "upload_time_iso_8601": "2019-03-21T20:43:26.466845Z", "url": "https://files.pythonhosted.org/packages/ce/8d/fc20473af5a04c8b1c3334a28bc45b7bd8d0d4115b718d1216bfefcc3962/yt_iframe-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "887edd955d6a7e9d3563d9a0786a02dc", "sha256": "b154c37665bc2b968675db32f43a9904d7bbd2370e14108886a31c3ba069fe89"}, "downloads": -1, "filename": "yt_iframe-0.6.tar.gz", "has_sig": false, "md5_digest": "887edd955d6a7e9d3563d9a0786a02dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2143, "upload_time": "2019-03-22T00:17:11", "upload_time_iso_8601": "2019-03-22T00:17:11.033231Z", "url": "https://files.pythonhosted.org/packages/46/0b/b14989b1e225f9a1daac555e184d75af2a65c14d6a2467fbb3e379fa3ab6/yt_iframe-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "0b7ed8a8bad8524436e39f475246ff0a", "sha256": "4567d6e49a70b9d6e8d010a0cad67b87bb6a40e15032b8979d42d4f250846541"}, "downloads": -1, "filename": "yt_iframe-0.7.tar.gz", "has_sig": false, "md5_digest": "0b7ed8a8bad8524436e39f475246ff0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2324, "upload_time": "2019-03-22T13:50:45", "upload_time_iso_8601": "2019-03-22T13:50:45.548645Z", "url": "https://files.pythonhosted.org/packages/b6/3f/c3a089bdca02d7f88ae8e155ed83fb2738323cd808e47861fe84ec2cd693/yt_iframe-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "83aed66c54fbf5f963996e46afc3cb11", "sha256": "38384107610f211bab919769d8f2eda8c5c845c4277a5ac9482795dad3e3797a"}, "downloads": -1, "filename": "yt_iframe-0.8.tar.gz", "has_sig": false, "md5_digest": "83aed66c54fbf5f963996e46afc3cb11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2579, "upload_time": "2019-03-22T17:44:10", "upload_time_iso_8601": "2019-03-22T17:44:10.959579Z", "url": "https://files.pythonhosted.org/packages/8d/6e/370479db7eec3b371331bff01a75f3aa560ab7e5deca9ce07df632895291/yt_iframe-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "d0925b627cc9187a33aee700136bf54e", "sha256": "280d31ebf00f3f4b8718767fe3f38db898ed838bba8a5cd0a5214cf64335743b"}, "downloads": -1, "filename": "yt_iframe-0.9.tar.gz", "has_sig": false, "md5_digest": "d0925b627cc9187a33aee700136bf54e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2657, "upload_time": "2019-03-23T03:45:08", "upload_time_iso_8601": "2019-03-23T03:45:08.430117Z", "url": "https://files.pythonhosted.org/packages/b6/8a/0a20e8f9110b5b45a8b9836b1b3f66b18640ef9ba66602e0025c9a0d3def/yt_iframe-0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ea25e4ce8e20a976dff9c66c4a687870", "sha256": "3bedb63665f79fcd65fd2d364d787bea912c425664b7c5d14dfa30a3efb9c337"}, "downloads": -1, "filename": "yt_iframe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ea25e4ce8e20a976dff9c66c4a687870", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2685, "upload_time": "2019-03-23T04:04:25", "upload_time_iso_8601": "2019-03-23T04:04:25.406782Z", "url": "https://files.pythonhosted.org/packages/ed/25/a550be466094c161596573fec53ec264c0df11cafb3e071f5b62f0030eb5/yt_iframe-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "aea31fcbdb7cc1567265a0347ba32c49", "sha256": "fe04fa5d91546ab1d8019bbb44d0f87a94835982d7e0b07c1518cba6a6524618"}, "downloads": -1, "filename": "yt_iframe-1.0.1.tar.gz", "has_sig": false, "md5_digest": "aea31fcbdb7cc1567265a0347ba32c49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2984, "upload_time": "2019-03-23T15:15:58", "upload_time_iso_8601": "2019-03-23T15:15:58.870551Z", "url": "https://files.pythonhosted.org/packages/a2/54/ec84d74a0551d5c6e6b53ff315cb51c7c8c7481786b4ac444370b09d5d4a/yt_iframe-1.0.1.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "31f27b0d0d44e2fdf5facf087c68a43f", "sha256": "53397233edd17cfe8ebeb18b33ba62e5f715faca55b84987c085e73e99ed49a2"}, "downloads": -1, "filename": "yt_iframe-1.0.3.tar.gz", "has_sig": false, "md5_digest": "31f27b0d0d44e2fdf5facf087c68a43f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4486, "upload_time": "2019-05-19T13:28:22", "upload_time_iso_8601": "2019-05-19T13:28:22.150787Z", "url": "https://files.pythonhosted.org/packages/f1/56/7681191687f2c889955bcddfe049d22280f1a539f91360987f47bf29a2db/yt_iframe-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "e19c3aca94b63486b1d6bcc5161ae1e6", "sha256": "8ef98cc84399de3dc1902b9fbb167a66e06b03119d6b11249fd0ccdb483e910a"}, "downloads": -1, "filename": "yt_iframe-1.0.4.tar.gz", "has_sig": false, "md5_digest": "e19c3aca94b63486b1d6bcc5161ae1e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4702, "upload_time": "2019-05-20T20:19:52", "upload_time_iso_8601": "2019-05-20T20:19:52.446603Z", "url": "https://files.pythonhosted.org/packages/ea/d3/2fd776c148f6aecda1349c24d6c26f1965697d7b60078351964357d71e8e/yt_iframe-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e19c3aca94b63486b1d6bcc5161ae1e6", "sha256": "8ef98cc84399de3dc1902b9fbb167a66e06b03119d6b11249fd0ccdb483e910a"}, "downloads": -1, "filename": "yt_iframe-1.0.4.tar.gz", "has_sig": false, "md5_digest": "e19c3aca94b63486b1d6bcc5161ae1e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4702, "upload_time": "2019-05-20T20:19:52", "upload_time_iso_8601": "2019-05-20T20:19:52.446603Z", "url": "https://files.pythonhosted.org/packages/ea/d3/2fd776c148f6aecda1349c24d6c26f1965697d7b60078351964357d71e8e/yt_iframe-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:31 2020"}