{"info": {"author": "Mike Miller", "author_email": "mixmastamyk@github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Terminals"], "description": "\n::\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   \u250f\u2501\u2578\u250f\u2501\u2513\u250f\u2513\u257b\u250f\u2501\u2513\u250f\u2501\u2513\u257b  \u250f\u2501\u2578   \u2502\n    \u2502   \u2503  \u2503 \u2503\u2503\u2517\u252b\u2517\u2501\u2513\u2503 \u2503\u2503  \u2523\u2578    \u2502\n    \u2502   \u2517\u2501\u2578\u2517\u2501\u251b\u2579 \u2579\u2517\u2501\u251b\u2517\u2501\u251b\u2517\u2501\u2578\u2517\u2501\u2578   \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n*Tonight we're gonna party like it's 1979\u2026*\n\n\u2570\u2500(\u02d9\ud834\udc13\u02d9)\u2500\u256e  \u256d\u2500(\uff3e0\uff3e)\u2500\u256f\n\n\n\nConsole\n============\n\n.. ~ Need to be up here for readme check:\n..    - *\"So hot, totally hot\u2026\"\u2014Olivia Newton-John*\n..    - *\"Suddenly, the wheels are in motion\u2026\"\u2014Olivia Newton-John*\n\n.. sidebar:: **Testimonials**\n\n    - *\"\ud83d\udc4d Ayyyyyy\u2026 \ud83d\udc4d\"\u2014The Fonz*\n    - *\"DYN-O-MITE!!\" \u2014 J.J. from Good Times*\n    - *\u201cBetter\u2026 Stronger\u2026 Faster\u201d\u2014Oscar Goldman*\n    - *\"There is nothing we won't try\u2026\" \u2014Laverne and Shirley*\n    - *\"Nothin' can stand in our way\u2026\" \u2014Olivia Newton-John*\n    - *\"Fightin' the system like a true modern day Robin Hood\" \u2014Waylon Jennings*\n\n|\n\nYet another package that makes it easy to generate the inline codes used to\ndisplay colors and character styles in ANSI-compatible terminals and emulators,\nas well as other functionality such clearing screens,\nmoving cursors,\nsetting title bars,\nand detecting capabilities.\n\nHow is this one different?\nWell,\nit's highly composable and more comprehensive than most.\nHow does it work?\nIt's a piece of cake.\n\n    *\"Piece of cake?\n    Oh, I wish somebody would tell me what that means.\" \u2014Dr. Huer*\n\n\n\u241b\\ [1;3m *Hello World* \u241b\\ [0m\n----------------------------------------------------------\n\nThere are many flexible ways to use console's styling functionality.\nMost simply, adding a little color with console might look like this.\nFirst, import the styling palettes and go to town.\nThe palette entries (aka attributes) can be used in place of strings and handle\neverything a string might:\n\n.. code-block:: python\n\n    >>> from console import fg, bg, fx\n\n    >>> fg.green + 'Hello World!' + fg.default\n    '\\x1b[32mHello World!\\x1b[39m'\n\n    >>> f'{fx.dim}Lo-key text:{fx.end}'\n    '\\x1b[2mLo-key text:\\x1b[0m'\n\n    >>> print(fg.red, fx.italic, '\u2665 Heart', fx.end,\n    ...       ' of Glass\u2026', sep='')\n\n    \u2665 Heart of Glass\u2026  # \u2190 not styled due to readme limits \ud83d\ude09\n\n\n\nFYI, the string  ``'\\x1b'`` represents the ASCII Escape character\n(``27`` in decimal, ``1b`` hex).\nCommand ``[32m`` turns the text green\nand ``[39m`` back to the default color.\nBut, there's no need to worry about any of that.\nThat's why you're here, right?\n\n\n.. note::\n\n    *Apologies, text output can't be styled due to PyPI/github readme\n    limitations.\n    Try the*\n    `Sphinx docs <https://mixmastamyk.bitbucket.io/console/>`_\n    *instead.\n    When you see \"\ud83d\ude09\" in a comment, that's a reminder you're not getting\n    the full monty.*\n\n\nAbove, ``fx.end`` is a convenient object to note---\\\nit ends all styles and fore/background colors at once,\nwhere as ``fg.default`` or ``bg.default`` for example,\nresets only the fore or background to its default color.\nTo avoid that responsibility,\none may also use the call form instead,\nwhere\n`it's automatic <https://youtu.be/y5ybok6ZGXk>`_:\n\n.. code-block:: python\n\n    >>> fg.yellow('Far Out!')  # <-- ends fg color only\n    '\\x1b[33mFar Out!\\x1b[39m'\n\n    >>> fx.italic('Up your nose with a rubber hose!')  # italic only\n    '\\x1b[3mUp your nose with a rubber hose!\\x1b[23m'\n\nThis is neat because call-form will end specific colors/styles and not\ninterfere with others.\n\nThere's also a rich-text printer that handles basic HTML\n(and even hyperlinks if your terminal supports it):\n\n.. code-block:: python\n\n    >>> from console.printers import print\n    >>> print('<i>Hello <b>World!</b> ;-)</i>')\n\n    *Hello World! ;-)*  # \ud83d\ude09\n\n\nBut there's a shitload,^H^H^H^H^H, crap-ton,^H^H^H^H^H\nerr\u2026\n*lot more!*\u00a0 Kindly read on.\n\n\n.. _compose:\n\nComposability++\n~~~~~~~~~~~~~~~~\n\n    | *\"East bound and down, loaded up and truckin'\u2026*\n    | *We gonna do what they say can't be done\"\u2014Smokey and the Bandit*\n\nConsole's palette entry objects are meant to be highly composable and useful in\nmultiple ways.\nFor example,\nyou might like to create your own compound styles to use over and over again.\nHow to?\u00a0\nJust add 'em up:\n\n.. ~ They can also be called (remember?) as functions if desired and have \"mixin\"\n.. ~ styles added in as well.\n.. ~ The callable form also automatically resets styles to their defaults at the end\n.. ~ of each line in the string (to avoid breaking pagers),\n.. ~ so those tasks no longer need to be managed manually:\n\n.. code-block:: python\n\n    >>> muy_importante = fg.white + fx.bold + bg.red\n    >>> print(muy_importante('\u00a1AHORITA!', fx.underline))  # \u2190 mixin\n\n    \u00a1AHORITA!  # \u2190 not styled due to readme limits \ud83d\ude09\n\nOne nice feature---\\\nwhen palette objects are combined together as done above,\nthe list of codes to be rendered is kept on ice until final output as a string.\nMeaning, there won't be redundant styling (Select Graphic Rendition) sequences\nin the output,\nno matter how many you add:\n\n.. code-block:: python\n\n    '\\x1b[37;1;41;4m\u00a1AHORITA!\\x1b[0m'\n    # \u21e4-----------\u21e5  One compound sequence, not four \ud83d\ude0e\n\nStyles can be built on the fly as well, if need-be:\n\n.. code-block:: python\n\n    >>> print(\n    ...   f'{fg.i208 + fx.reverse}Tangerine Dream{fx.end}',  # or\n    ...     (fg.i208 + fx.reverse)('Tangerine Dream'),\n    ... )\n    Tangerine Dream  # \ud83d\ude09\n\n.. rubric:: **Templating**\n\nTo build templates,\ncall a palette entry with placeholder strings,\nwith (or instead of) text:\n\n.. code-block:: python\n\n    >>> sam_template = bg.i22('{}')  #\u00a0dark green\n    >>> print(sam_template.format(' GREEN Eggs\u2026 '))\n\n.. code-block:: python\n\n     GREEN Eggs\u2026   # No, I do not like\u2026 \ud83d\ude09\n\nOther template formats are no problem either,\ntry ``%s`` or ``${}``.\n\n\n.. rubric:: **Performance**\n\n*Outta Sight!*\n\nConsole is lightweight,\nbut perhaps you'd like a pre-rendered string to be used in a tight loop for\nperformance reasons.\nSimply use ``str()`` to finalize the output then use it in the loop.\n\n.. code-block:: python\n\n    >>> msg = str(muy_importante('\u00a1AHORITA!'))\n\n    >>> for i in range(100000000):\n    ...     print(msg)  # rapidinho, por favor\n\n\n.. rubric:: **Managers**\n\nPalette entries work as context-managers as well:\n\n.. code-block:: python\n\n    with bg.dodgerblue:\n        print('Infield: Garvey, Lopes, Russel, Cey, Yeager')\n        print('Outfield: Baker, Monday, Smith')\n        print('Coach: Lasorda')\n\n\n::\n\n                                \u26be\n    \u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u2afd\u2afd\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8\n                              \u2afb\u2afb    Tok!\n\n\nColor Palettes\n~~~~~~~~~~~~~~~\n\n    *\"Looo-king Gooood!\"\u2014Chico and the Man*\n\nThe color palettes entries may be further broken down into three main\ncategories of available colors.\nUnleash your inner\n`Britto <https://www.art.com/gallery/id--a266/romero-britto-posters.htm>`_\nbelow:\n\n    - Basic, the original 8/16 ANSI\u00a0named colors\n    - Extended, a set of 256 indexed colors\n    - \"True\", a.k.a. 16 million colors, consisting of either:\n\n      - RGB specified colors\n      - X11-named colors (now built-in), or\n      - Webcolors-named colors\n\nAs mentioned,\nthe original palette,\nX11,\nand Webcolor palettes\nmay be accessed directly from a palette object by name.\nFor example:\n\n.. code-block:: python\n\n    # Basic                Comment\n    fg.red                # One of the original 8 colors\n    fg.lightred           # Another 8 brighter colors w/o bold\n\n    # Truecolor variants\n    fg.bisque             # Webcolors or X11 color name\n    fg.navyblue           # Webcolors takes precedence, if installed\n\n\n.. rubric:: Advanced Color Selection\n\n*Specific* palettes/colors may be chosen via a prefix letter and number of digits\n(or name) to specify the color.\nFor example:\n\n.. code-block:: python\n\n    # Extended     Format  Comment\n    bg.i_123       iDDD   # Extended/indexed 256-color palette\n    bg.n_f0f       nHHH   # Hex to *nearest* indexed color\n\n    # Truecolor\n    bg.t_ff00bb    tHHH   # Truecolor, 3 or 6 digits\n    bg.x_navyblue  x_NM   # Force an X11 color name (built-in)\n    bg.w_bisque    w_NM   # Force Webcolors, if installed\n\n(The underscores in the attribute names that are numbers are optional.\nChoose depending whether brevity or readability are more important to you.)\n\nThe assorted truecolor forms are used to specify a color explicitly without\nambiguity\u2014\\\nX11 and Webcolors\n`differ <https://en.wikipedia.org/wiki/X11_color_names#Clashes_between_web_and_X11_colors_in_the_CSS_color_scheme>`_\non a few obscure colors.\nThough nothing beats \"\u00fee olde\" hexdigits for certainty.\n\n.. note::\n\n    Be aware,\n    an unrecognized color name or index will result in an ``AttributeError``.\n\n\nInstallen-Sie, Bitte\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: shell\n\n    \u23f5 pip3 install --user console\n\nSuggested additional support packages,\nsome of which may be installed automatically if needed:\n\n.. code-block:: shell\n\n    webcolors             #\u00a0Moar! color names\n    future_fstrings       # Needed for: Python Version < 3.6\n\n    colorama              # Needed for: Windows Version < 10\n    win_unicode_console   # Useful: for Win Python < 3.6\n\n\nJah!\nWhile console is cross-platform,\n`colorama <https://pypi.python.org/pypi/colorama>`_\nwill need to be installed and .init() run beforehand to view these examples\nunder the lame (no-ANSI support) versions of Windows < 10\n\n.. note::\n\n    ``console`` supports Python 3.6 and over by default.\n    However!  It is trying out\n    `\"future-fstrings\" <https://github.com/asottile/future-fstrings>`_\n    for experimental support under Python versions 3.5 and 3.4,\n    perhaps earlier.\n    Keep an eye peeled for oddities under older Pythons.\n    Sorry, neither 2.X or 1.X is supported.\u00a0 ``:-P``\n\n\nDer ``console`` package has recently been tested on:\n\n- Ubuntu 19.10 - Python 3.7\n\n  - xterm, mate-terminal, linux console, fbterm\n  - Very occasionally on kitty, guake\n\n- FreeBSD 11 - Python 3.7\n- MacOS 10.13 - Python 3.6\n\n  - Terminal.app, iTerm2\n\n- Windows XP - Python 3.4 - 32 bit + colorama, ansicon\n- Windows 7 - Python 3.6 - 32 bit + colorama\n- Windows 10 - Python 3.7 - 64bit\n\n  - Conhost, WSL, Windows Terminal\n\n\n::\n\n    \u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8\n\n\nPackage Overview\n~~~~~~~~~~~~~~~~~~\n\n    *\"Hey, Mr. Kot-tair!\"\u2014Freddie \"Boom Boom\" Washington*\n\nAs mentioned,\nconsole handles lots more than color and styles.\n\n.. rubric:: **Utils Module**\n\n`console.utils`\nincludes a number of nifty functions:\n\n.. code-block:: python\n\n    >>> from console.utils import cls, set_title\n\n    >>> cls()  #\u00a0whammo! a.k.a. reset terminal\n    >>> set_title('Le Freak')  # c'est chic\n    '\\x1b]2;Le Freak\\x07'\n\nIt can also ``strip_ansi`` from strings,\nwait for keypresses,\nclear a line or the screen (with or without scrollback),\nmake hyperlinks,\nor easily ``pause`` a script like the old ``DOS``\u00a0commands of yesteryear.\n\nThere are also modules to print stylish progress bars:\n`console.progress`,\nor beep up a storm with\n`console.beep`.\n\n\n.. rubric:: **Screen Module**\n\nWith `console.screen` you can\nsave, create a new, or restore a screen.\nMove the cursor around,\nget its position,\nand enable\n`bracketed paste <https://cirw.in/blog/bracketed-paste>`_\nif any of that floats your boat.\u00a0\n`Blessings <https://pypi.org/project/blessings/>`_-\\\ncompatible context managers are available for full-screen fun.\n\n.. code-block:: python\n\n    >>> from console.screen import sc\n\n    >>> with sc.location(40, 20):\n    ...     print('Hello, Woild.')\n\n\n.. rubric:: **Detection Module**\n\nDetect the terminal environment with\n`console.detection`:\n\n    - Determine palette support\n    - Redirection---is this an interactive \"``tty``\" or not?\n    - Check relevant user preferences through environment variables,\n      such as\n      `NO_COLOR <http://no-color.org/>`_,\n      `COLORFGBG <https://unix.stackexchange.com/q/245378/159110>`_,\n      and\n      `CLICOLOR <https://bixense.com/clicolors/>`_,\n      and even\n      `TERM <https://www.gnu.org/software/gettext/manual/html_node/The-TERM-variable.html>`_.\n    - Query terminal colors and themes\u2014light or dark?\n    - Get titles, cursor position, and more.\n    - Legacy Windows routines are in `console.windows`\n\nConsole does its best to figure out what your terminal supports on startup\nand will configure its convenience objects\n(we imported above)\nto do the right thing.\nThey will *deactivate themselves automatically* at startup when output is\nredirected into a pipe,\nfor example.\n\nDetection can be bypassed and handled manually when needed however.\nSimply use the detection functions in the module or write your own as desired,\nthen create your own objects from the classes in the\n`console.style` and\n`console.screen`\nmodules.\n(See the Environment Variables section for full deactivation.)\n\nThere's also logging done\u2014\\\nenable the debug level before loading the console package and you'll see the\nresults of the queries from the detection module.\n\n.. rubric:: **Constants**\n\nA number of useful constants are provided in\n`console.constants`,\nsuch as\n`CSI <https://en.wikipedia.org/wiki/ANSI_escape_code#Escape_sequences>`_\nand\n`OSC <https://en.wikipedia.org/wiki/ANSI_escape_code#Escape_sequences>`_\nfor building your own apps.\nYou can:\n\n.. code-block:: python\n\n    from console.constants import BEL\n    print(f'Ring my {BEL}\u2026 Ring my {BEL}')  # ring-a-ling-a-ling\u2026\n\n\n.. rubric:: **ASCII Table**\n\nA four-column ASCII table in fruity flavors is provided for your convenience\nand teaching opportunities.\nThis format is great for spotting Control key correspondence with letters,\ne.g.: Ctrl+M=Enter, Ctrl+H=Backspace, etc:\n\n.. code-block:: shell\n\n    \u23f5 python3 -m console.ascii4 [-h]\n\n    00111   7 07  BEL         39 27  '           71 47  G          103 67  g\n    \u2026  # \ud83d\ude09\n\n\n.. rubric:: **The Rest**\n\nSee the Advanced page for more detail.\n\n\nDemos and Tests\n~~~~~~~~~~~~~~~~\n\n    *\"I got chills, they're multiplyin'\u2026\"\u2014Danny Zuko*\n\nA series of positively jaw-dropping demos (haha, ok maybe not) may be run at\nthe command-line with::\n\n    \u23f5 python3 -m console.demos\n\nIf you have pytest installed,\ntests can be run from the install folder.\n\n.. code-block:: shell\n\n    \u23f5 pytest -s\n\nThe Makefile in the repo at github has more details on such topics.\n\n\nContributions\n~~~~~~~~~~~~~~~~\n\n    *\"Use the Source, Luke!\"\u2014'Ben' Kenobi*\n\nCould use some help testing on Windows and MacOS as my daily driver is a \ud83d\udc27 Tux\nracer.\nCan you help?\n\n\nLegalese\n~~~~~~~~~~~~~~~~\n\n*\"Stickin' it to the Man\"*\n\n- Copyright 2018-2020, Mike Miller\n- Released under the LGPL, version 3+.\n- Enterprise Pricing:\n\n  | 6 MEEllion dollars\u2026  *Bwah-haha-ha!*\n  | (only have to sell *one* copy!)\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://mixmastamyk.bitbucket.io/console/", "keywords": "ansi color detection escape terminal console sequence cursor style screen shell xterm", "license": "LGPL 3", "maintainer": "", "maintainer_email": "", "name": "console", "package_url": "https://pypi.org/project/console/", "platform": "", "project_url": "https://pypi.org/project/console/", "project_urls": {"Homepage": "https://mixmastamyk.bitbucket.io/console/"}, "release_url": "https://pypi.org/project/console/0.990/", "requires_dist": null, "requires_python": "", "summary": "Comprehensive, composable utility library for ANSI terminals. Better, stronger, faster.  Tch-tch-tch-tch\u2026", "version": "0.990", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \u250f\u2501\u2578\u250f\u2501\u2513\u250f\u2513\u257b\u250f\u2501\u2513\u250f\u2501\u2513\u257b  \u250f\u2501\u2578   \u2502\n\u2502   \u2503  \u2503 \u2503\u2503\u2517\u252b\u2517\u2501\u2513\u2503 \u2503\u2503  \u2523\u2578    \u2502\n\u2502   \u2517\u2501\u2578\u2517\u2501\u251b\u2579 \u2579\u2517\u2501\u251b\u2517\u2501\u251b\u2517\u2501\u2578\u2517\u2501\u2578   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre>\n<p><em>Tonight we\u2019re gonna party like it\u2019s 1979\u2026</em></p>\n<p>\u2570\u2500(\u02d9\ud834\udc13\u02d9)\u2500\u256e  \u256d\u2500(\uff3e0\uff3e)\u2500\u256f</p>\n<div id=\"console\">\n<h2>Console</h2>\n<div>\n<p><strong>Testimonials</strong></p>\n<ul>\n<li><em>\u201c\ud83d\udc4d Ayyyyyy\u2026 \ud83d\udc4d\u201d\u2014The Fonz</em></li>\n<li><em>\u201cDYN-O-MITE!!\u201d \u2014 J.J. from Good Times</em></li>\n<li><em>\u201cBetter\u2026 Stronger\u2026 Faster\u201d\u2014Oscar Goldman</em></li>\n<li><em>\u201cThere is nothing we won\u2019t try\u2026\u201d \u2014Laverne and Shirley</em></li>\n<li><em>\u201cNothin\u2019 can stand in our way\u2026\u201d \u2014Olivia Newton-John</em></li>\n<li><em>\u201cFightin\u2019 the system like a true modern day Robin Hood\u201d \u2014Waylon Jennings</em></li>\n</ul>\n</div>\n<div>\n<div><br></div>\n</div>\n<p>Yet another package that makes it easy to generate the inline codes used to\ndisplay colors and character styles in ANSI-compatible terminals and emulators,\nas well as other functionality such clearing screens,\nmoving cursors,\nsetting title bars,\nand detecting capabilities.</p>\n<p>How is this one different?\nWell,\nit\u2019s highly composable and more comprehensive than most.\nHow does it work?\nIt\u2019s a piece of cake.</p>\n<blockquote>\n<em>\u201cPiece of cake?\nOh, I wish somebody would tell me what that means.\u201d \u2014Dr. Huer</em></blockquote>\n<div id=\"m-hello-world-0m\">\n<h3>\u241b[1;3m <em>Hello World</em> \u241b[0m</h3>\n<p>There are many flexible ways to use console\u2019s styling functionality.\nMost simply, adding a little color with console might look like this.\nFirst, import the styling palettes and go to town.\nThe palette entries (aka attributes) can be used in place of strings and handle\neverything a string might:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">fg</span><span class=\"p\">,</span> <span class=\"n\">bg</span><span class=\"p\">,</span> <span class=\"n\">fx</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">green</span> <span class=\"o\">+</span> <span class=\"s1\">'Hello World!'</span> <span class=\"o\">+</span> <span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">default</span>\n<span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[32mHello World!</span><span class=\"se\">\\x1b</span><span class=\"s1\">[39m'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">dim</span><span class=\"si\">}</span><span class=\"s1\">Lo-key text:</span><span class=\"si\">{</span><span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n<span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[2mLo-key text:</span><span class=\"se\">\\x1b</span><span class=\"s1\">[0m'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">italic</span><span class=\"p\">,</span> <span class=\"s1\">'\u2665 Heart'</span><span class=\"p\">,</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>       <span class=\"s1\">' of Glass\u2026'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n\n<span class=\"err\">\u2665</span> <span class=\"n\">Heart</span> <span class=\"n\">of</span> <span class=\"n\">Glass</span><span class=\"err\">\u2026</span>  <span class=\"c1\"># \u2190 not styled due to readme limits \ud83d\ude09</span>\n</pre>\n<p>FYI, the string  <tt>'\\x1b'</tt> represents the ASCII Escape character\n(<tt>27</tt> in decimal, <tt>1b</tt> hex).\nCommand <tt>[32m</tt> turns the text green\nand <tt>[39m</tt> back to the default color.\nBut, there\u2019s no need to worry about any of that.\nThat\u2019s why you\u2019re here, right?</p>\n<div>\n<p>Note</p>\n<p><em>Apologies, text output can\u2019t be styled due to PyPI/github readme\nlimitations.\nTry the</em>\n<a href=\"https://mixmastamyk.bitbucket.io/console/\" rel=\"nofollow\">Sphinx docs</a>\n<em>instead.\nWhen you see \u201c\ud83d\ude09\u201d in a comment, that\u2019s a reminder you\u2019re not getting\nthe full monty.</em></p>\n</div>\n<p>Above, <tt>fx.end</tt> is a convenient object to note\u2014it ends all styles and fore/background colors at once,\nwhere as <tt>fg.default</tt> or <tt>bg.default</tt> for example,\nresets only the fore or background to its default color.\nTo avoid that responsibility,\none may also use the call form instead,\nwhere\n<a href=\"https://youtu.be/y5ybok6ZGXk\" rel=\"nofollow\">it\u2019s automatic</a>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">(</span><span class=\"s1\">'Far Out!'</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;-- ends fg color only</span>\n<span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[33mFar Out!</span><span class=\"se\">\\x1b</span><span class=\"s1\">[39m'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">italic</span><span class=\"p\">(</span><span class=\"s1\">'Up your nose with a rubber hose!'</span><span class=\"p\">)</span>  <span class=\"c1\"># italic only</span>\n<span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[3mUp your nose with a rubber hose!</span><span class=\"se\">\\x1b</span><span class=\"s1\">[23m'</span>\n</pre>\n<p>This is neat because call-form will end specific colors/styles and not\ninterfere with others.</p>\n<p>There\u2019s also a rich-text printer that handles basic HTML\n(and even hyperlinks if your terminal supports it):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">console.printers</span> <span class=\"kn\">import</span> <span class=\"nb\">print</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'&lt;i&gt;Hello &lt;b&gt;World!&lt;/b&gt; ;-)&lt;/i&gt;'</span><span class=\"p\">)</span>\n\n<span class=\"o\">*</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"err\">!</span> <span class=\"p\">;</span><span class=\"o\">-</span><span class=\"p\">)</span><span class=\"o\">*</span>  <span class=\"c1\"># \ud83d\ude09</span>\n</pre>\n<p>But there\u2019s a shitload,^H^H^H^H^H, crap-ton,^H^H^H^H^H\nerr\u2026\n<em>lot more!</em>\u00a0 Kindly read on.</p>\n<div id=\"composability\">\n<span id=\"compose\"></span><h4>Composability++</h4>\n<blockquote>\n<div>\n<div><em>\u201cEast bound and down, loaded up and truckin\u2019\u2026</em></div>\n<div><em>We gonna do what they say can\u2019t be done\u201d\u2014Smokey and the Bandit</em></div>\n</div>\n</blockquote>\n<p>Console\u2019s palette entry objects are meant to be highly composable and useful in\nmultiple ways.\nFor example,\nyou might like to create your own compound styles to use over and over again.\nHow to?\nJust add \u2018em up:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">muy_importante</span> <span class=\"o\">=</span> <span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">white</span> <span class=\"o\">+</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">bold</span> <span class=\"o\">+</span> <span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">red</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">muy_importante</span><span class=\"p\">(</span><span class=\"s1\">'\u00a1AHORITA!'</span><span class=\"p\">,</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">underline</span><span class=\"p\">))</span>  <span class=\"c1\"># \u2190 mixin</span>\n\n<span class=\"err\">\u00a1</span><span class=\"n\">AHORITA</span><span class=\"err\">!</span>  <span class=\"c1\"># \u2190 not styled due to readme limits \ud83d\ude09</span>\n</pre>\n<p>One nice feature\u2014when palette objects are combined together as done above,\nthe list of codes to be rendered is kept on ice until final output as a string.\nMeaning, there won\u2019t be redundant styling (Select Graphic Rendition) sequences\nin the output,\nno matter how many you add:</p>\n<pre><span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[37;1;41;4m\u00a1AHORITA!</span><span class=\"se\">\\x1b</span><span class=\"s1\">[0m'</span>\n<span class=\"c1\"># \u21e4-----------\u21e5  One compound sequence, not four \ud83d\ude0e</span>\n</pre>\n<p>Styles can be built on the fly as well, if need-be:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>   <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">i208</span> <span class=\"o\">+</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"si\">}</span><span class=\"s1\">Tangerine Dream</span><span class=\"si\">{</span><span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span>  <span class=\"c1\"># or</span>\n<span class=\"o\">...</span>     <span class=\"p\">(</span><span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">i208</span> <span class=\"o\">+</span> <span class=\"n\">fx</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">)(</span><span class=\"s1\">'Tangerine Dream'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"n\">Tangerine</span> <span class=\"n\">Dream</span>  <span class=\"c1\"># \ud83d\ude09</span>\n</pre>\n<p><strong>Templating</strong></p>\n<p>To build templates,\ncall a palette entry with placeholder strings,\nwith (or instead of) text:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sam_template</span> <span class=\"o\">=</span> <span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">i22</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">)</span>  <span class=\"c1\">#\u00a0dark green</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sam_template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">' GREEN Eggs\u2026 '</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"n\">GREEN</span> <span class=\"n\">Eggs</span><span class=\"err\">\u2026</span>   <span class=\"c1\"># No, I do not like\u2026 \ud83d\ude09</span>\n</pre>\n<p>Other template formats are no problem either,\ntry <tt>%s</tt> or <tt>${}</tt>.</p>\n<p><strong>Performance</strong></p>\n<p><em>Outta Sight!</em></p>\n<p>Console is lightweight,\nbut perhaps you\u2019d like a pre-rendered string to be used in a tight loop for\nperformance reasons.\nSimply use <tt>str()</tt> to finalize the output then use it in the loop.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">muy_importante</span><span class=\"p\">(</span><span class=\"s1\">'\u00a1AHORITA!'</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100000000</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>  <span class=\"c1\"># rapidinho, por favor</span>\n</pre>\n<p><strong>Managers</strong></p>\n<p>Palette entries work as context-managers as well:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">dodgerblue</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Infield: Garvey, Lopes, Russel, Cey, Yeager'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Outfield: Baker, Monday, Smith'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Coach: Lasorda'</span><span class=\"p\">)</span>\n</pre>\n<pre>                            \u26be\n\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u2afd\u2afd\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8\n                          \u2afb\u2afb    Tok!\n</pre>\n</div>\n<div id=\"color-palettes\">\n<h4>Color Palettes</h4>\n<blockquote>\n<em>\u201cLooo-king Gooood!\u201d\u2014Chico and the Man</em></blockquote>\n<p>The color palettes entries may be further broken down into three main\ncategories of available colors.\nUnleash your inner\n<a href=\"https://www.art.com/gallery/id--a266/romero-britto-posters.htm\" rel=\"nofollow\">Britto</a>\nbelow:</p>\n<blockquote>\n<ul>\n<li>Basic, the original 8/16 ANSI\u00a0named colors</li>\n<li>Extended, a set of 256 indexed colors</li>\n<li>\u201cTrue\u201d, a.k.a. 16 million colors, consisting of either:<ul>\n<li>RGB specified colors</li>\n<li>X11-named colors (now built-in), or</li>\n<li>Webcolors-named colors</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>As mentioned,\nthe original palette,\nX11,\nand Webcolor palettes\nmay be accessed directly from a palette object by name.\nFor example:</p>\n<pre><span class=\"c1\"># Basic                Comment</span>\n<span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">red</span>                <span class=\"c1\"># One of the original 8 colors</span>\n<span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">lightred</span>           <span class=\"c1\"># Another 8 brighter colors w/o bold</span>\n\n<span class=\"c1\"># Truecolor variants</span>\n<span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">bisque</span>             <span class=\"c1\"># Webcolors or X11 color name</span>\n<span class=\"n\">fg</span><span class=\"o\">.</span><span class=\"n\">navyblue</span>           <span class=\"c1\"># Webcolors takes precedence, if installed</span>\n</pre>\n<p>Advanced Color Selection</p>\n<p><em>Specific</em> palettes/colors may be chosen via a prefix letter and number of digits\n(or name) to specify the color.\nFor example:</p>\n<pre><span class=\"c1\"># Extended     Format  Comment</span>\n<span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">i_123</span>       <span class=\"n\">iDDD</span>   <span class=\"c1\"># Extended/indexed 256-color palette</span>\n<span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">n_f0f</span>       <span class=\"n\">nHHH</span>   <span class=\"c1\"># Hex to *nearest* indexed color</span>\n\n<span class=\"c1\"># Truecolor</span>\n<span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">t_ff00bb</span>    <span class=\"n\">tHHH</span>   <span class=\"c1\"># Truecolor, 3 or 6 digits</span>\n<span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">x_navyblue</span>  <span class=\"n\">x_NM</span>   <span class=\"c1\"># Force an X11 color name (built-in)</span>\n<span class=\"n\">bg</span><span class=\"o\">.</span><span class=\"n\">w_bisque</span>    <span class=\"n\">w_NM</span>   <span class=\"c1\"># Force Webcolors, if installed</span>\n</pre>\n<p>(The underscores in the attribute names that are numbers are optional.\nChoose depending whether brevity or readability are more important to you.)</p>\n<p>The assorted truecolor forms are used to specify a color explicitly without\nambiguity\u2014X11 and Webcolors\n<a href=\"https://en.wikipedia.org/wiki/X11_color_names#Clashes_between_web_and_X11_colors_in_the_CSS_color_scheme\" rel=\"nofollow\">differ</a>\non a few obscure colors.\nThough nothing beats \u201c\u00fee olde\u201d hexdigits for certainty.</p>\n<div>\n<p>Note</p>\n<p>Be aware,\nan unrecognized color name or index will result in an <tt>AttributeError</tt>.</p>\n</div>\n</div>\n<div id=\"installen-sie-bitte\">\n<h4>Installen-Sie, Bitte</h4>\n<pre>\u23f5 pip3 install --user console\n</pre>\n<p>Suggested additional support packages,\nsome of which may be installed automatically if needed:</p>\n<pre>webcolors             <span class=\"c1\">#\u00a0Moar! color names\n</span>future_fstrings       <span class=\"c1\"># Needed for: Python Version &lt; 3.6\n</span>\ncolorama              <span class=\"c1\"># Needed for: Windows Version &lt; 10\n</span>win_unicode_console   <span class=\"c1\"># Useful: for Win Python &lt; 3.6</span>\n</pre>\n<p>Jah!\nWhile console is cross-platform,\n<a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a>\nwill need to be installed and .init() run beforehand to view these examples\nunder the lame (no-ANSI support) versions of Windows &lt; 10</p>\n<div>\n<p>Note</p>\n<p><tt>console</tt> supports Python 3.6 and over by default.\nHowever!  It is trying out\n<a href=\"https://github.com/asottile/future-fstrings\" rel=\"nofollow\">\u201cfuture-fstrings\u201d</a>\nfor experimental support under Python versions 3.5 and 3.4,\nperhaps earlier.\nKeep an eye peeled for oddities under older Pythons.\nSorry, neither 2.X or 1.X is supported.\u00a0 <tt><span class=\"pre\">:-P</span></tt></p>\n</div>\n<p>Der <tt>console</tt> package has recently been tested on:</p>\n<ul>\n<li>Ubuntu 19.10 - Python 3.7<ul>\n<li>xterm, mate-terminal, linux console, fbterm</li>\n<li>Very occasionally on kitty, guake</li>\n</ul>\n</li>\n<li>FreeBSD 11 - Python 3.7</li>\n<li>MacOS 10.13 - Python 3.6<ul>\n<li>Terminal.app, iTerm2</li>\n</ul>\n</li>\n<li>Windows XP - Python 3.4 - 32 bit + colorama, ansicon</li>\n<li>Windows 7 - Python 3.6 - 32 bit + colorama</li>\n<li>Windows 10 - Python 3.7 - 64bit<ul>\n<li>Conhost, WSL, Windows Terminal</li>\n</ul>\n</li>\n</ul>\n<pre>\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8\u00b8\n</pre>\n</div>\n<div id=\"package-overview\">\n<h4>Package Overview</h4>\n<blockquote>\n<em>\u201cHey, Mr. Kot-tair!\u201d\u2014Freddie \u201cBoom Boom\u201d Washington</em></blockquote>\n<p>As mentioned,\nconsole handles lots more than color and styles.</p>\n<p><strong>Utils Module</strong></p>\n<p><cite>console.utils</cite>\nincludes a number of nifty functions:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">console.utils</span> <span class=\"kn\">import</span> <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">set_title</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"bp\">cls</span><span class=\"p\">()</span>  <span class=\"c1\">#\u00a0whammo! a.k.a. reset terminal</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">'Le Freak'</span><span class=\"p\">)</span>  <span class=\"c1\"># c'est chic</span>\n<span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">]2;Le Freak</span><span class=\"se\">\\x07</span><span class=\"s1\">'</span>\n</pre>\n<p>It can also <tt>strip_ansi</tt> from strings,\nwait for keypresses,\nclear a line or the screen (with or without scrollback),\nmake hyperlinks,\nor easily <tt>pause</tt> a script like the old <tt>DOS</tt>\u00a0commands of yesteryear.</p>\n<p>There are also modules to print stylish progress bars:\n<cite>console.progress</cite>,\nor beep up a storm with\n<cite>console.beep</cite>.</p>\n<p><strong>Screen Module</strong></p>\n<p>With <cite>console.screen</cite> you can\nsave, create a new, or restore a screen.\nMove the cursor around,\nget its position,\nand enable\n<a href=\"https://cirw.in/blog/bracketed-paste\" rel=\"nofollow\">bracketed paste</a>\nif any of that floats your boat.\n<a href=\"https://pypi.org/project/blessings/\" rel=\"nofollow\">Blessings</a>-compatible context managers are available for full-screen fun.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">console.screen</span> <span class=\"kn\">import</span> <span class=\"n\">sc</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello, Woild.'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Detection Module</strong></p>\n<p>Detect the terminal environment with\n<cite>console.detection</cite>:</p>\n<blockquote>\n<ul>\n<li>Determine palette support</li>\n<li>Redirection\u2014is this an interactive \u201c<tt>tty</tt>\u201d or not?</li>\n<li>Check relevant user preferences through environment variables,\nsuch as\n<a href=\"http://no-color.org/\" rel=\"nofollow\">NO_COLOR</a>,\n<a href=\"https://unix.stackexchange.com/q/245378/159110\" rel=\"nofollow\">COLORFGBG</a>,\nand\n<a href=\"https://bixense.com/clicolors/\" rel=\"nofollow\">CLICOLOR</a>,\nand even\n<a href=\"https://www.gnu.org/software/gettext/manual/html_node/The-TERM-variable.html\" rel=\"nofollow\">TERM</a>.</li>\n<li>Query terminal colors and themes\u2014light or dark?</li>\n<li>Get titles, cursor position, and more.</li>\n<li>Legacy Windows routines are in <cite>console.windows</cite></li>\n</ul>\n</blockquote>\n<p>Console does its best to figure out what your terminal supports on startup\nand will configure its convenience objects\n(we imported above)\nto do the right thing.\nThey will <em>deactivate themselves automatically</em> at startup when output is\nredirected into a pipe,\nfor example.</p>\n<p>Detection can be bypassed and handled manually when needed however.\nSimply use the detection functions in the module or write your own as desired,\nthen create your own objects from the classes in the\n<cite>console.style</cite> and\n<cite>console.screen</cite>\nmodules.\n(See the Environment Variables section for full deactivation.)</p>\n<p>There\u2019s also logging done\u2014enable the debug level before loading the console package and you\u2019ll see the\nresults of the queries from the detection module.</p>\n<p><strong>Constants</strong></p>\n<p>A number of useful constants are provided in\n<cite>console.constants</cite>,\nsuch as\n<a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code#Escape_sequences\" rel=\"nofollow\">CSI</a>\nand\n<a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code#Escape_sequences\" rel=\"nofollow\">OSC</a>\nfor building your own apps.\nYou can:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">console.constants</span> <span class=\"kn\">import</span> <span class=\"n\">BEL</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Ring my </span><span class=\"si\">{</span><span class=\"n\">BEL</span><span class=\"si\">}</span><span class=\"s1\">\u2026 Ring my </span><span class=\"si\">{</span><span class=\"n\">BEL</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># ring-a-ling-a-ling\u2026</span>\n</pre>\n<p><strong>ASCII Table</strong></p>\n<p>A four-column ASCII table in fruity flavors is provided for your convenience\nand teaching opportunities.\nThis format is great for spotting Control key correspondence with letters,\ne.g.: Ctrl+M=Enter, Ctrl+H=Backspace, etc:</p>\n<pre>\u23f5 python3 -m console.ascii4 <span class=\"o\">[</span>-h<span class=\"o\">]</span>\n\n<span class=\"m\">00111</span>   <span class=\"m\">7</span> <span class=\"m\">07</span>  BEL         <span class=\"m\">39</span> <span class=\"m\">27</span>  <span class=\"err\">'</span>           <span class=\"m\">71</span> <span class=\"m\">47</span>  G          <span class=\"m\">103</span> <span class=\"m\">67</span>  g\n\u2026  <span class=\"c1\"># \ud83d\ude09</span>\n</pre>\n<p><strong>The Rest</strong></p>\n<p>See the Advanced page for more detail.</p>\n</div>\n<div id=\"demos-and-tests\">\n<h4>Demos and Tests</h4>\n<blockquote>\n<em>\u201cI got chills, they\u2019re multiplyin\u2019\u2026\u201d\u2014Danny Zuko</em></blockquote>\n<p>A series of positively jaw-dropping demos (haha, ok maybe not) may be run at\nthe command-line with:</p>\n<pre>\u23f5 python3 -m console.demos\n</pre>\n<p>If you have pytest installed,\ntests can be run from the install folder.</p>\n<pre>\u23f5 pytest -s\n</pre>\n<p>The Makefile in the repo at github has more details on such topics.</p>\n</div>\n<div id=\"contributions\">\n<h4>Contributions</h4>\n<blockquote>\n<em>\u201cUse the Source, Luke!\u201d\u2014\u2018Ben\u2019 Kenobi</em></blockquote>\n<p>Could use some help testing on Windows and MacOS as my daily driver is a \ud83d\udc27 Tux\nracer.\nCan you help?</p>\n</div>\n<div id=\"legalese\">\n<h4>Legalese</h4>\n<p><em>\u201cStickin\u2019 it to the Man\u201d</em></p>\n<ul>\n<li><p>Copyright 2018-2020, Mike Miller</p>\n</li>\n<li><p>Released under the LGPL, version 3+.</p>\n</li>\n<li><p>Enterprise Pricing:</p>\n<div>\n<div>6 MEEllion dollars\u2026  <em>Bwah-haha-ha!</em></div>\n<div>(only have to sell <em>one</em> copy!)</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6877991, "releases": {"0.98": [{"comment_text": "", "digests": {"md5": "3afa5dfbc46d154b7f795d5a2c22002c", "sha256": "ca3382eeb9d295d986a3d4890ecf4037622b6630056c24aedfcca1302e9f189c"}, "downloads": -1, "filename": "console-0.98-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3afa5dfbc46d154b7f795d5a2c22002c", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 61874, "upload_time": "2019-10-26T22:11:09", "upload_time_iso_8601": "2019-10-26T22:11:09.462785Z", "url": "https://files.pythonhosted.org/packages/bc/87/9f400a71a884bb0fba24fedfea42a5a1675b099f186026eaa50611422980/console-0.98-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdcff49e23da822a3cf71086f5634752", "sha256": "48c1d7800cfd70c915ab7f70ce54e1e019de7e63ef3f986d04adbeaec8f11c32"}, "downloads": -1, "filename": "console-0.98.tar.gz", "has_sig": false, "md5_digest": "cdcff49e23da822a3cf71086f5634752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59377, "upload_time": "2019-10-26T22:11:07", "upload_time_iso_8601": "2019-10-26T22:11:07.012705Z", "url": "https://files.pythonhosted.org/packages/65/66/911e8890480f8613cdc4088790acdedb8b633840f80750d72cd1f5cd9bfe/console-0.98.tar.gz", "yanked": false}], "0.990": [{"comment_text": "", "digests": {"md5": "6f1f79de48465d777f7de3fd65e0c00a", "sha256": "c1eb7d091d424944f1849da1d42096cef631584fa1f83030aebb0b5a542cfa60"}, "downloads": -1, "filename": "console-0.990-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f1f79de48465d777f7de3fd65e0c00a", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 74213, "upload_time": "2020-03-25T03:05:16", "upload_time_iso_8601": "2020-03-25T03:05:16.990342Z", "url": "https://files.pythonhosted.org/packages/51/9c/50f3869a9902c678e5b70d75c3d54194f7654390b9ade4e8024af81b6e1d/console-0.990-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75f66e113426934d688bf347808e157d", "sha256": "5a4bca497a128a501323a4eea983bfa22c2f9889abc457297df3400625c098a4"}, "downloads": -1, "filename": "console-0.990.tar.gz", "has_sig": false, "md5_digest": "75f66e113426934d688bf347808e157d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70902, "upload_time": "2020-03-25T03:05:14", "upload_time_iso_8601": "2020-03-25T03:05:14.740843Z", "url": "https://files.pythonhosted.org/packages/8d/11/3044bd06e3c09c0dff26aa63d984cd7ef3e293a2599619f7abf207830c68/console-0.990.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f1f79de48465d777f7de3fd65e0c00a", "sha256": "c1eb7d091d424944f1849da1d42096cef631584fa1f83030aebb0b5a542cfa60"}, "downloads": -1, "filename": "console-0.990-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f1f79de48465d777f7de3fd65e0c00a", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 74213, "upload_time": "2020-03-25T03:05:16", "upload_time_iso_8601": "2020-03-25T03:05:16.990342Z", "url": "https://files.pythonhosted.org/packages/51/9c/50f3869a9902c678e5b70d75c3d54194f7654390b9ade4e8024af81b6e1d/console-0.990-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75f66e113426934d688bf347808e157d", "sha256": "5a4bca497a128a501323a4eea983bfa22c2f9889abc457297df3400625c098a4"}, "downloads": -1, "filename": "console-0.990.tar.gz", "has_sig": false, "md5_digest": "75f66e113426934d688bf347808e157d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70902, "upload_time": "2020-03-25T03:05:14", "upload_time_iso_8601": "2020-03-25T03:05:14.740843Z", "url": "https://files.pythonhosted.org/packages/8d/11/3044bd06e3c09c0dff26aa63d984cd7ef3e293a2599619f7abf207830c68/console-0.990.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:41 2020"}