{"info": {"author": "Jelle Smet", "author_email": "development@smetj.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: PyPy"], "description": "::\n\n              __       __    __\n    .--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n    |  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n    |________|__|_____|__|__|_____|_____|__|__|_____|\n                                       version 2.2.0\n\n    Build composable event pipeline servers with minimal effort.\n\n\n\n    ================\n    wishbone.flow.jq\n    ================\n\n    Version: 1.0.0\n\n    JSON pattern matching using jq expressions.\n    -------------------------------------------\n\n\n        Evalutes (JSON) data structures against a set of jq expressions to decide\n        which queue to forward the event to.\n\n        JQ expressions\n        --------------\n\n        More information about jq expressions can be found here:\n\n            - https://stedolan.github.io/jq/manual/\n\n\n        Jq expressions need to return either **True** or **False**, otherwise this\n        module will consider the result to be invalid and therefor skip the\n        condition.\n\n        Module level conditions\n        -----------------------\n\n        The module accepts the <conditions> parameter which is a list of\n        conditions to evaluate against each data structure coming in.\n        Each condition should have following format:\n\n        JSON-schema::\n\n            {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"expression\": {\n                    \"type\": \"string\"\n                },\n                \"queue\": {\n                    \"type\": \"string\"\n                },\n                \"payload\": {\n                    \"type\": \"object\",\n                    \"patternProperties\": {\n                        \".*\": {\n                            \"type\": [\n                                \"string\",\n                                \"number\"\n                            ],\n                        }\n                    }\n                },\n            },\n            \"required\": [\"name\", \"expression\", \"queue\"],\n            \"additionalProperties\": False\n            }\n\n\n        Example::\n\n            { \"name\": \"test\",\n              \"expression\": \".greeting | test( \"hello\" )\",\n              \"queue\": \"outbox\",\n              \"payload\": {\n                \"@tmp.some.key\": 1,\n              }\n            }\n\n        Disk level conditions\n        ---------------------\n\n        The directory <location> contains the conditions in YAML format. One\n        condition is one file.  Files not having '.yaml' extension are ignored.\n\n        This directory is monitored for changes and automatically reloaded\n        whenever something changes.\n\n        The rules should have following format:\n\n        JSON-schema::\n\n            {\n            \"type\": \"object\",\n            \"properties\": {\n                \"expression\": {\n                    \"type\": \"string\"\n                },\n                \"queue\": {\n                    \"type\": \"string\"\n                },\n                \"payload\": {\n                    \"type\": \"object\",\n                    \"patternProperties\": {\n                        \".*\": {\n                            \"type\": [\n                                \"string\",\n                                \"number\"\n                            ],\n                        }\n                    }\n                },\n            },\n            \"required\": [\"expression\", \"queue\"],\n            \"additionalProperties\": False\n            }\n\n        Example::\n\n            queue: nagios\n            expression: '.type | test( \"nagios\" )'\n\n        payload\n        -------\n\n        The payload is a dictionary where keys are wishbone event references.\n\n\n        Parameters:\n\n            - selection(str)(\"@data\")\n               |  The root part of the event to evaluate.\n               |  Use an empty string to refer to the complete event.\n\n            - conditions(dict)([])\n               |  A dictionary consisting out of expression, queue, payload.\n\n            - location(str)(\"\")\n               |  A directory containing rules.  This directory will be monitored\n               |  for changes and automatically read for changes.\n               |  An empty value disables this functionality.\n\n\n        Queues:\n\n            - inbox\n               |  Incoming events.\n\n            - no_match\n               |  Events which did not match at least one rule.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/smetj/wishbone-flow-jq/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smetj/wishbone-flow-jq", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "wishbone-flow-jq", "package_url": "https://pypi.org/project/wishbone-flow-jq/", "platform": "Linux", "project_url": "https://pypi.org/project/wishbone-flow-jq/", "project_urls": {"Download": "https://github.com/smetj/wishbone-flow-jq/tarball/master", "Homepage": "https://github.com/smetj/wishbone-flow-jq"}, "release_url": "https://pypi.org/project/wishbone-flow-jq/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A Wishbone flow module for JSON pattern matching using jq expressions.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>          __       __    __\n.--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n|  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n|________|__|_____|__|__|_____|_____|__|__|_____|\n                                   version 2.2.0\n\nBuild composable event pipeline servers with minimal effort.\n\n\n\n================\nwishbone.flow.jq\n================\n\nVersion: 1.0.0\n\nJSON pattern matching using jq expressions.\n-------------------------------------------\n\n\n    Evalutes (JSON) data structures against a set of jq expressions to decide\n    which queue to forward the event to.\n\n    JQ expressions\n    --------------\n\n    More information about jq expressions can be found here:\n\n        - https://stedolan.github.io/jq/manual/\n\n\n    Jq expressions need to return either **True** or **False**, otherwise this\n    module will consider the result to be invalid and therefor skip the\n    condition.\n\n    Module level conditions\n    -----------------------\n\n    The module accepts the &lt;conditions&gt; parameter which is a list of\n    conditions to evaluate against each data structure coming in.\n    Each condition should have following format:\n\n    JSON-schema::\n\n        {\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\n                \"type\": \"string\"\n            },\n            \"expression\": {\n                \"type\": \"string\"\n            },\n            \"queue\": {\n                \"type\": \"string\"\n            },\n            \"payload\": {\n                \"type\": \"object\",\n                \"patternProperties\": {\n                    \".*\": {\n                        \"type\": [\n                            \"string\",\n                            \"number\"\n                        ],\n                    }\n                }\n            },\n        },\n        \"required\": [\"name\", \"expression\", \"queue\"],\n        \"additionalProperties\": False\n        }\n\n\n    Example::\n\n        { \"name\": \"test\",\n          \"expression\": \".greeting | test( \"hello\" )\",\n          \"queue\": \"outbox\",\n          \"payload\": {\n            \"@tmp.some.key\": 1,\n          }\n        }\n\n    Disk level conditions\n    ---------------------\n\n    The directory &lt;location&gt; contains the conditions in YAML format. One\n    condition is one file.  Files not having '.yaml' extension are ignored.\n\n    This directory is monitored for changes and automatically reloaded\n    whenever something changes.\n\n    The rules should have following format:\n\n    JSON-schema::\n\n        {\n        \"type\": \"object\",\n        \"properties\": {\n            \"expression\": {\n                \"type\": \"string\"\n            },\n            \"queue\": {\n                \"type\": \"string\"\n            },\n            \"payload\": {\n                \"type\": \"object\",\n                \"patternProperties\": {\n                    \".*\": {\n                        \"type\": [\n                            \"string\",\n                            \"number\"\n                        ],\n                    }\n                }\n            },\n        },\n        \"required\": [\"expression\", \"queue\"],\n        \"additionalProperties\": False\n        }\n\n    Example::\n\n        queue: nagios\n        expression: '.type | test( \"nagios\" )'\n\n    payload\n    -------\n\n    The payload is a dictionary where keys are wishbone event references.\n\n\n    Parameters:\n\n        - selection(str)(\"@data\")\n           |  The root part of the event to evaluate.\n           |  Use an empty string to refer to the complete event.\n\n        - conditions(dict)([])\n           |  A dictionary consisting out of expression, queue, payload.\n\n        - location(str)(\"\")\n           |  A directory containing rules.  This directory will be monitored\n           |  for changes and automatically read for changes.\n           |  An empty value disables this functionality.\n\n\n    Queues:\n\n        - inbox\n           |  Incoming events.\n\n        - no_match\n           |  Events which did not match at least one rule.\n</pre>\n\n          </div>"}, "last_serial": 2281046, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "38a25c51f1da1e99cb1d61b00c01db2c", "sha256": "5a2b53eeb6f3354c8f3b23c6907cd65d3cce55621ac57276f384f20807608733"}, "downloads": -1, "filename": "wishbone-flow-jq-1.0.0.tar.gz", "has_sig": false, "md5_digest": "38a25c51f1da1e99cb1d61b00c01db2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6056, "upload_time": "2016-03-28T09:51:48", "upload_time_iso_8601": "2016-03-28T09:51:48.068043Z", "url": "https://files.pythonhosted.org/packages/47/72/578464bf161675504d15424a1d41ae56661b041c7448d7aae0aabb0b02d2/wishbone-flow-jq-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0f662f4d1cb3d90e13876aacd0715f34", "sha256": "6ebf35ed8d9c4263d8413a1dd816ca0ee6be5891225a4ccb4a7504baa1aa4868"}, "downloads": -1, "filename": "wishbone-flow-jq-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0f662f4d1cb3d90e13876aacd0715f34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6091, "upload_time": "2016-08-14T20:53:51", "upload_time_iso_8601": "2016-08-14T20:53:51.643386Z", "url": "https://files.pythonhosted.org/packages/10/0c/9bca117fabfa3f182441c3cc32ba8901440bdae4677e903e7299412d1431/wishbone-flow-jq-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f662f4d1cb3d90e13876aacd0715f34", "sha256": "6ebf35ed8d9c4263d8413a1dd816ca0ee6be5891225a4ccb4a7504baa1aa4868"}, "downloads": -1, "filename": "wishbone-flow-jq-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0f662f4d1cb3d90e13876aacd0715f34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6091, "upload_time": "2016-08-14T20:53:51", "upload_time_iso_8601": "2016-08-14T20:53:51.643386Z", "url": "https://files.pythonhosted.org/packages/10/0c/9bca117fabfa3f182441c3cc32ba8901440bdae4677e903e7299412d1431/wishbone-flow-jq-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:37 2020"}