{"info": {"author": "Richard Bann", "author_email": "richard.bann@vertis.com", "bugtrack_url": null, "classifiers": ["Environment :: Plugins", "Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "pygments-lexer-babylon\n======================\n\nA javascript lexer for Pygments that uses the babylon parser\n\nWARNING!\n--------\n\n``Node.js`` must be installed to use this package. Set the environment\nvariable ``PYGMENTS_NODE_COMMAND`` to the command you use to run Node.\nThe default is ``nodejs``. If the following command works, you are most\nprobably OK:\n\n::\n\n    nodejs -v\n\nWhy?\n----\n\nPygments can not properly highlight new and shiny ``javascript``\n(particulary ``jsx``). Until all these features are implemented in\nPygments, you can use this package as a fallback. Also, it is a good fun\nto experiment with various technologies :wink:.\n\nInstall\n-------\n\nNothing too much here, apart from the ``Node.js`` dependency:\n\n::\n\n    pip install pygments-lexer-babylon\n\nThis will install ``Pygments`` for you (>=2.0), so if something depends\non an older version, ``virtualenv`` is recommended. (Or use\n``docker``...)\n\nUsage\n-----\n\nThe importable name of the package: ``pygmentslexerbabylon``. It\nprovides two lexers: ``BabylonLexer`` and ``BabylonHtmlLexer``. The\nlatter is needed because the built in ``HtmlLexer`` hard codes the usage\nof ``JavascriptLexer`` between ``<script>`` tags.\n\nIf you have \"manual\" control over which lexer to use, do something like\nthis:\n\n.. code:: python\n\n    from pygments import highlight\n    from pygments.formatters import HtmlFormatter\n    from pygmentslexerbabylon import BabylonLexer\n\n    lexer = BabylonLexer()  # You select it manually...\n    formatter = HtmlFormatter(linenos=True, cssclass=\"source\")\n    code = '<ReactComponent/>'\n    result = highlight(code, lexer, formatter)\n\nIn some cases you do not have control over the selected lexer. Let's\nsay, you use Markdown, which turns out to use code like this:\n\n.. code:: python\n\n    from pygments.lexers import get_lexer_by_name, guess_lexer\n\n    try:\n        lexer = get_lexer_by_name(self.lang)\n    except ValueError:\n        try:\n            lexer = guess_lexer(self.src)\n        except ValueError:\n            lexer = get_lexer_by_name('text')\n\nIn this case use language name ``jsx`` for javascript files and\n``htmlx`` for html files.\n\nIf you use the ``pygmentize`` all the above works:\n\n.. code:: sh\n\n    $ pygmentize -l jsx myreact.js  # Note the extension is not jsx\n    $ pygmentize myreact.jsx\n    $ pygmentize -l htmlx htmlwithjsx.html\n    $ pygmentize htmlwithjsx.htmlx\n\nGotchas\n-------\n\n-  It is a bit slower than ``Pygments``...\n-  May fail for really large files (0.5 MB worked for me though)\n-  Produces slightly different result than the original ``Pygments``\n   lexer\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rbann/pygments-lexer-babylon", "keywords": "pygments highlight jsx node babylon", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pygments-lexer-babylon", "package_url": "https://pypi.org/project/pygments-lexer-babylon/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pygments-lexer-babylon/", "project_urls": {"Homepage": "https://github.com/rbann/pygments-lexer-babylon"}, "release_url": "https://pypi.org/project/pygments-lexer-babylon/0.12.0/", "requires_dist": null, "requires_python": "", "summary": "A javascript lexer for Pygments that uses the babylon parser", "version": "0.12.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A javascript lexer for Pygments that uses the babylon parser</p>\n<div id=\"warning\">\n<h2>WARNING!</h2>\n<p><tt>Node.js</tt> must be installed to use this package. Set the environment\nvariable <tt>PYGMENTS_NODE_COMMAND</tt> to the command you use to run Node.\nThe default is <tt>nodejs</tt>. If the following command works, you are most\nprobably OK:</p>\n<pre>nodejs -v\n</pre>\n</div>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>Pygments can not properly highlight new and shiny <tt>javascript</tt>\n(particulary <tt>jsx</tt>). Until all these features are implemented in\nPygments, you can use this package as a fallback. Also, it is a good fun\nto experiment with various technologies :wink:.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Nothing too much here, apart from the <tt>Node.js</tt> dependency:</p>\n<pre>pip install pygments-lexer-babylon\n</pre>\n<p>This will install <tt>Pygments</tt> for you (&gt;=2.0), so if something depends\non an older version, <tt>virtualenv</tt> is recommended. (Or use\n<tt>docker</tt>\u2026)</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The importable name of the package: <tt>pygmentslexerbabylon</tt>. It\nprovides two lexers: <tt>BabylonLexer</tt> and <tt>BabylonHtmlLexer</tt>. The\nlatter is needed because the built in <tt>HtmlLexer</tt> hard codes the usage\nof <tt>JavascriptLexer</tt> between <tt>&lt;script&gt;</tt> tags.</p>\n<p>If you have \u201cmanual\u201d control over which lexer to use, do something like\nthis:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pygments</span> <span class=\"kn\">import</span> <span class=\"n\">highlight</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygments.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">HtmlFormatter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygmentslexerbabylon</span> <span class=\"kn\">import</span> <span class=\"n\">BabylonLexer</span>\n\n<span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">BabylonLexer</span><span class=\"p\">()</span>  <span class=\"c1\"># You select it manually...</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">HtmlFormatter</span><span class=\"p\">(</span><span class=\"n\">linenos</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cssclass</span><span class=\"o\">=</span><span class=\"s2\">\"source\"</span><span class=\"p\">)</span>\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;ReactComponent/&gt;'</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">highlight</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"p\">)</span>\n</pre>\n<p>In some cases you do not have control over the selected lexer. Let\u2019s\nsay, you use Markdown, which turns out to use code like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pygments.lexers</span> <span class=\"kn\">import</span> <span class=\"n\">get_lexer_by_name</span><span class=\"p\">,</span> <span class=\"n\">guess_lexer</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">get_lexer_by_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">guess_lexer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">get_lexer_by_name</span><span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">)</span>\n</pre>\n<p>In this case use language name <tt>jsx</tt> for javascript files and\n<tt>htmlx</tt> for html files.</p>\n<p>If you use the <tt>pygmentize</tt> all the above works:</p>\n<pre>$ pygmentize -l jsx myreact.js  <span class=\"c1\"># Note the extension is not jsx\n</span>$ pygmentize myreact.jsx\n$ pygmentize -l htmlx htmlwithjsx.html\n$ pygmentize htmlwithjsx.htmlx\n</pre>\n</div>\n<div id=\"gotchas\">\n<h2>Gotchas</h2>\n<ul>\n<li>It is a bit slower than <tt>Pygments</tt>\u2026</li>\n<li>May fail for really large files (0.5 MB worked for me though)</li>\n<li>Produces slightly different result than the original <tt>Pygments</tt>\nlexer</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1947151, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "60ef19c92bd4df9200404dd84cf2e043", "sha256": "0981f64f7a2e8f8249c96adf727e7fd160bc88aadf2ffd7b0bd2d77532d84276"}, "downloads": -1, "filename": "pygments-lexer-babylon-0.10.0.tar.gz", "has_sig": false, "md5_digest": "60ef19c92bd4df9200404dd84cf2e043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 466038, "upload_time": "2016-01-08T08:13:01", "upload_time_iso_8601": "2016-01-08T08:13:01.414363Z", "url": "https://files.pythonhosted.org/packages/be/27/e5ec0a477060f3712406844cc2b28a3508e7a6ab1d719ae62f523fee9416/pygments-lexer-babylon-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "14123bdcd21bae49509117c9994a5da7", "sha256": "8ba9a0c6f3fa9f018aaab4e53318d9d52a04774a822b664b20f0998802d2c193"}, "downloads": -1, "filename": "pygments-lexer-babylon-0.11.0.tar.gz", "has_sig": false, "md5_digest": "14123bdcd21bae49509117c9994a5da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 470007, "upload_time": "2016-01-15T16:36:12", "upload_time_iso_8601": "2016-01-15T16:36:12.089503Z", "url": "https://files.pythonhosted.org/packages/12/e0/5844d92842d07ef3419c062cab2d8462e7ffbe96ed5fbc3a5c69f7aa3ec2/pygments-lexer-babylon-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "59b0516bf287f66304a3ed11ec50ecf0", "sha256": "f967745af9ce8f14ef50bfdb5060f9a5c32e327105a9161e7dbb50e1bc396eaa"}, "downloads": -1, "filename": "pygments-lexer-babylon-0.12.0.tar.gz", "has_sig": false, "md5_digest": "59b0516bf287f66304a3ed11ec50ecf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 466321, "upload_time": "2016-02-09T10:14:04", "upload_time_iso_8601": "2016-02-09T10:14:04.876043Z", "url": "https://files.pythonhosted.org/packages/5d/84/3ec00846ceaabe4dc5a360267bd129e58508f2ada676174c5d888e0e6317/pygments-lexer-babylon-0.12.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "e84ca2ff3b0da59630d78afcb9414d9a", "sha256": "daf51308015cad0132141cbe93a5a5c58f6acb393cabb0239512908b09a4646c"}, "downloads": -1, "filename": "pygments-lexer-babylon-0.9.0.tar.gz", "has_sig": false, "md5_digest": "e84ca2ff3b0da59630d78afcb9414d9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 464384, "upload_time": "2016-01-07T16:18:41", "upload_time_iso_8601": "2016-01-07T16:18:41.699662Z", "url": "https://files.pythonhosted.org/packages/9f/32/490e5d336b13ded7e3c6f3f78c655c4723627f5dc61514d03b1cfed71d7e/pygments-lexer-babylon-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "59b0516bf287f66304a3ed11ec50ecf0", "sha256": "f967745af9ce8f14ef50bfdb5060f9a5c32e327105a9161e7dbb50e1bc396eaa"}, "downloads": -1, "filename": "pygments-lexer-babylon-0.12.0.tar.gz", "has_sig": false, "md5_digest": "59b0516bf287f66304a3ed11ec50ecf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 466321, "upload_time": "2016-02-09T10:14:04", "upload_time_iso_8601": "2016-02-09T10:14:04.876043Z", "url": "https://files.pythonhosted.org/packages/5d/84/3ec00846ceaabe4dc5a360267bd129e58508f2ada676174c5d888e0e6317/pygments-lexer-babylon-0.12.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:52 2020"}