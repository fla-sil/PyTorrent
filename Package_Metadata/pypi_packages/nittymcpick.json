{"info": {"author": "Konrad Weihmann", "author_email": "kweihmann@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "|Build status| |PyPI version| |Python version| |Downloads| |Language\ngrade: Python|\n\nnittymcpick\n===========\n\nYour friendly nitpicking GitLab bot\n\nPurpose\n-------\n\nThis bot does run custom linting tools on receiving a webhook from\nGitLab and reporting back its findings as comments to the merge request\ndiff\n\nPrerequisites\n-------------\n\n-  python 3.6+\n-  GitLab CE/EE\n\nSetup\n-----\n\nInstall tool to a machine\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis machine has to be reachable by the GitLab server via network. In\nthe following we will assume a local installation on the GitLab Server\nitself (``127.0.0.1``)\n\n-  Install via pypi\n\n   .. code:: shell\n\n      pip3 install nittymcpick\n\nCreate a GitLab user\n~~~~~~~~~~~~~~~~~~~~\n\n-  Go to GitLab with an account that can create users (e.g.\u00a0``root``)\n\n   -  **admin/users/new**\n\n      -  **Name** = Nitty McPick\n      -  **Username** = nittymcpick\n      -  **Email** = foo@localhost (or any other non-exisiting mail\n         address)\n      -  **Access Level** = Regular\n\n   -  **admin/users/nittymcpick/impersonation_tokens**\n\n      -  **Name** = e.g.\u00a0Nitty McPick Bot\n      -  **Scopes** = **api**, **read_repository**\n      -  **IMPORTANT** copy the content of **Your New Impersonation\n         Token**\n\nAdd bot to the project\n~~~~~~~~~~~~~~~~~~~~~~\n\n-  Goto Gitlab with an account that can change project settings\n\n   -  **[username]/[project]/-project_members/**\n\n      -  search **Nitty McPick** at \\**GitLabd member or Email address\\*\n      -  click **Invite**\n      -  Change level **Nitty McPick** from **Guest** to **Reporter**\n\nCreate a GitLab webhook\n~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Goto Gitlab with an account that can change project settings\n\n   -  \\**[username]/[project]/-/settings/integrations\n\n      -  **URL**: http://127.0.0.1:8888\n      -  **Trigger**: Merge requests events\n      -  **SSL verification**: uncheck the box\n      -  Click on **Add webhook**\n\nCreate a configuration for the bot\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a json file like shown at\n`config.json.sample <config.json.sample>`__. The file can contain any\nnumber of items\n\n``linter`` section\n^^^^^^^^^^^^^^^^^^\n\n+------------+---------------------------------------------------------+\n| attribute  | description                                             |\n+============+=========================================================+\n| name       | name of the linting tool                                |\n+------------+---------------------------------------------------------+\n| path       | absolute path of binary of the linting tool             |\n+------------+---------------------------------------------------------+\n| args       | list of additional arguments to be passed to the linter |\n+------------+---------------------------------------------------------+\n| ret_regex  | regular expression for evaluation of the output of the  |\n|            | linter (see `Return Regex <#return-regex>`__)           |\n+------------+---------------------------------------------------------+\n| tweaks.lin | Add number of lines to the reported output line number  |\n| e_count_ad |                                                         |\n| just       |                                                         |\n+------------+---------------------------------------------------------+\n| tweaks.sin | Run each matching file in a single linter instance,     |\n| gle_file_e | otherwise all files will be run by a single instance    |\n| xec        |                                                         |\n+------------+---------------------------------------------------------+\n\n``matches`` section\n^^^^^^^^^^^^^^^^^^^\n\n========= ===================================================\nattribute description\n========= ===================================================\npattern   Regular expression for files that should be checked\n========= ===================================================\n\nReturn Regex\n''''''''''''\n\nThe regular expression to extract all the needed data should contain the\nfollowing named groups\n\n-  ``severity`` - for the severity of the finding (optional)\n-  ``line`` - Line where the findings occured\n-  ``message`` - A meaningful message\n-  ``file`` - The file where the of the finding\n\nRun the tool\n~~~~~~~~~~~~\n\n.. code:: text\n\n   usage: nittymcpick [-h] [--token TOKEN] [--onlynew] [--nowip] [--host HOST]\n                      [--port PORT] [--botname BOTNAME]\n                      config\n\n   Your friendly linting bot for gitlab\n\n   positional arguments:\n     config             config file\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --token TOKEN      Access token to use (default:GL_ACCESS_TOKEN from\n                        environment)\n     --onlynew          Comment only on changes (default:false)\n     --nowip            Ignore WIP merge requests (default:false)\n     --host HOST        IP to bind to (default:127.0.0.1)\n     --port PORT        Port to bind to (default:8888)\n     --botname BOTNAME  Username of the bot in GitLab\n                        (default:NITTY_MCPICK_USERNAME from env or 'nittymcpick')\n\ne.g.\u00a0run\n\n.. code:: shell\n\n   export GL_ACCESS_TOKEN=<Impersonation Token from gitlab>\n   nittymcpick config.json\n\nnow everytime a merge request is opened or changed the tool will run all\nthe configured linting tools. On a finding it would comment directly to\nthe MR like this\n\n.. code:: text\n\n   Nitty McPick @nittymcpick \u00b7 just now\n   Reporter\n\n   mytool found a potential error - the code is absolutely insecure\n\nDocker\n------\n\nThere is an already prepared container available under\n``privkweihmann/nittymcpick:latest``\n\nA word on security\n------------------\n\nIt is heavily advised to run the bot on the gitlab server itself, as\ncurrently only ``http://`` as a webhook protocol is supported.\n\nPRs to enable ``https://`` as welcome!\n\n.. |Build status| image:: https://github.com/priv-kweihmann/nittymcpick/workflows/Python%20package/badge.svg\n.. |PyPI version| image:: https://badge.fury.io/py/nittymcpick.svg\n   :target: https://badge.fury.io/py/nittymcpick\n.. |Python version| image:: https://img.shields.io/pypi/pyversions/nittymcpick\n   :target: https://img.shields.io/pypi/pyversions/nittymcpick\n.. |Downloads| image:: https://img.shields.io/pypi/dm/nittymcpick\n   :target: https://img.shields.io/pypi/dm/nittymcpick\n.. |Language grade: Python| image:: https://img.shields.io/lgtm/grade/python/g/priv-kweihmann/nittymcpick.svg?logo=lgtm&logoWidth=18\n   :target: https://lgtm.com/projects/g/priv-kweihmann/nittymcpickv/context:python", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/priv-kweihmann/nittymcpick", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nittymcpick", "package_url": "https://pypi.org/project/nittymcpick/", "platform": "", "project_url": "https://pypi.org/project/nittymcpick/", "project_urls": {"Homepage": "https://github.com/priv-kweihmann/nittymcpick"}, "release_url": "https://pypi.org/project/nittymcpick/1.1.3/", "requires_dist": null, "requires_python": "", "summary": "GitLab bot for custom linting tools to comment MRs", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53c639f2f55ded3557b1c8c210f168d04e4d299e/68747470733a2f2f6769746875622e636f6d2f707269762d6b776569686d616e6e2f6e697474796d637069636b2f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"> <a href=\"https://badge.fury.io/py/nittymcpick\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55f112cbbb8d1792eca116cc88f79783a20d8572/68747470733a2f2f62616467652e667572792e696f2f70792f6e697474796d637069636b2e737667\"></a> <a href=\"https://img.shields.io/pypi/pyversions/nittymcpick\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b209a47a739077772b9d4f10c86281f3741e058f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e697474796d637069636b\"></a> <a href=\"https://img.shields.io/pypi/dm/nittymcpick\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6acc6820d4c17bd9b007e42042851e8aed9f3139/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6e697474796d637069636b\"></a> <a href=\"https://lgtm.com/projects/g/priv-kweihmann/nittymcpickv/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95ef4e2c92dfd5e5c382d816a0826c96222035ec/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f707269762d6b776569686d616e6e2f6e697474796d637069636b2e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a></p>\n<div id=\"nittymcpick\">\n<h2>nittymcpick</h2>\n<p>Your friendly nitpicking GitLab bot</p>\n<div id=\"purpose\">\n<h3>Purpose</h3>\n<p>This bot does run custom linting tools on receiving a webhook from\nGitLab and reporting back its findings as comments to the merge request\ndiff</p>\n</div>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<ul>\n<li>python 3.6+</li>\n<li>GitLab CE/EE</li>\n</ul>\n</div>\n<div id=\"setup\">\n<h3>Setup</h3>\n<div id=\"install-tool-to-a-machine\">\n<h4>Install tool to a machine</h4>\n<p>This machine has to be reachable by the GitLab server via network. In\nthe following we will assume a local installation on the GitLab Server\nitself (<tt>127.0.0.1</tt>)</p>\n<ul>\n<li><p>Install via pypi</p>\n<pre>pip3 install nittymcpick\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"create-a-gitlab-user\">\n<h4>Create a GitLab user</h4>\n<ul>\n<li>Go to GitLab with an account that can create users (e.g.\u00a0<tt>root</tt>)<ul>\n<li><strong>admin/users/new</strong><ul>\n<li><strong>Name</strong> = Nitty McPick</li>\n<li><strong>Username</strong> = nittymcpick</li>\n<li><strong>Email</strong> = <a href=\"mailto:foo%40localhost\">foo<span>@</span>localhost</a> (or any other non-exisiting mail\naddress)</li>\n<li><strong>Access Level</strong> = Regular</li>\n</ul>\n</li>\n<li><strong>admin/users/nittymcpick/impersonation_tokens</strong><ul>\n<li><strong>Name</strong> = e.g.\u00a0Nitty McPick Bot</li>\n<li><strong>Scopes</strong> = <strong>api</strong>, <strong>read_repository</strong></li>\n<li><strong>IMPORTANT</strong> copy the content of <strong>Your New Impersonation\nToken</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"add-bot-to-the-project\">\n<h4>Add bot to the project</h4>\n<ul>\n<li>Goto Gitlab with an account that can change project settings<ul>\n<li><strong>[username]/[project]/-project_members/</strong><ul>\n<li>search <strong>Nitty McPick</strong> at **GitLabd member or Email address*</li>\n<li>click <strong>Invite</strong></li>\n<li>Change level <strong>Nitty McPick</strong> from <strong>Guest</strong> to <strong>Reporter</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"create-a-gitlab-webhook\">\n<h4>Create a GitLab webhook</h4>\n<ul>\n<li>Goto Gitlab with an account that can change project settings<ul>\n<li>**[username]/[project]/-/settings/integrations<ul>\n<li><strong>URL</strong>: <a href=\"http://127.0.0.1:8888\" rel=\"nofollow\">http://127.0.0.1:8888</a></li>\n<li><strong>Trigger</strong>: Merge requests events</li>\n<li><strong>SSL verification</strong>: uncheck the box</li>\n<li>Click on <strong>Add webhook</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"create-a-configuration-for-the-bot\">\n<h4>Create a configuration for the bot</h4>\n<p>Create a json file like shown at\n<a href=\"config.json.sample\" rel=\"nofollow\">config.json.sample</a>. The file can contain any\nnumber of items</p>\n<div id=\"linter-section\">\n<h5><tt>linter</tt> section</h5>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>attribute</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>name</td>\n<td>name of the linting tool</td>\n</tr>\n<tr><td>path</td>\n<td>absolute path of binary of the linting tool</td>\n</tr>\n<tr><td>args</td>\n<td>list of additional arguments to be passed to the linter</td>\n</tr>\n<tr><td>ret_regex</td>\n<td>regular expression for evaluation of the output of the\nlinter (see <a href=\"#return-regex\" rel=\"nofollow\">Return Regex</a>)</td>\n</tr>\n<tr><td>tweaks.lin\ne_count_ad\njust</td>\n<td>Add number of lines to the reported output line number</td>\n</tr>\n<tr><td>tweaks.sin\ngle_file_e\nxec</td>\n<td>Run each matching file in a single linter instance,\notherwise all files will be run by a single instance</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"matches-section\">\n<h5><tt>matches</tt> section</h5>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>attribute</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>pattern</td>\n<td>Regular expression for files that should be checked</td>\n</tr>\n</tbody>\n</table>\n<div id=\"return-regex\">\n<h6>Return Regex</h6>\n<p>The regular expression to extract all the needed data should contain the\nfollowing named groups</p>\n<ul>\n<li><tt>severity</tt> - for the severity of the finding (optional)</li>\n<li><tt>line</tt> - Line where the findings occured</li>\n<li><tt>message</tt> - A meaningful message</li>\n<li><tt>file</tt> - The file where the of the finding</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"run-the-tool\">\n<h4>Run the tool</h4>\n<pre>usage: nittymcpick [-h] [--token TOKEN] [--onlynew] [--nowip] [--host HOST]\n                   [--port PORT] [--botname BOTNAME]\n                   config\n\nYour friendly linting bot for gitlab\n\npositional arguments:\n  config             config file\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --token TOKEN      Access token to use (default:GL_ACCESS_TOKEN from\n                     environment)\n  --onlynew          Comment only on changes (default:false)\n  --nowip            Ignore WIP merge requests (default:false)\n  --host HOST        IP to bind to (default:127.0.0.1)\n  --port PORT        Port to bind to (default:8888)\n  --botname BOTNAME  Username of the bot in GitLab\n                     (default:NITTY_MCPICK_USERNAME from env or 'nittymcpick')\n</pre>\n<p>e.g.\u00a0run</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">GL_ACCESS_TOKEN</span><span class=\"o\">=</span>&lt;Impersonation Token from gitlab&gt;\nnittymcpick config.json\n</pre>\n<p>now everytime a merge request is opened or changed the tool will run all\nthe configured linting tools. On a finding it would comment directly to\nthe MR like this</p>\n<pre>Nitty McPick @nittymcpick \u00b7 just now\nReporter\n\nmytool found a potential error - the code is absolutely insecure\n</pre>\n</div>\n</div>\n<div id=\"docker\">\n<h3>Docker</h3>\n<p>There is an already prepared container available under\n<tt>privkweihmann/nittymcpick:latest</tt></p>\n</div>\n<div id=\"a-word-on-security\">\n<h3>A word on security</h3>\n<p>It is heavily advised to run the bot on the gitlab server itself, as\ncurrently only <tt><span class=\"pre\">http://</span></tt> as a webhook protocol is supported.</p>\n<p>PRs to enable <tt><span class=\"pre\">https://</span></tt> as welcome!</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6728483, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "997f0298f2fee10bcce71e7610308b68", "sha256": "fe141a55847801dc3717756c49be5f89801acb7e049a8c656f3b7327f83d32fe"}, "downloads": -1, "filename": "nittymcpick-1.0.0.tar.gz", "has_sig": false, "md5_digest": "997f0298f2fee10bcce71e7610308b68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5644, "upload_time": "2020-02-15T15:09:46", "upload_time_iso_8601": "2020-02-15T15:09:46.352259Z", "url": "https://files.pythonhosted.org/packages/d0/cf/15a6dac62314b8d34078ad6200be2c16c2d055dd6f112d1aa27f8280e1f5/nittymcpick-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "653b111dbedc87855d496cfa2eaf05c3", "sha256": "49abc9870fa200672e9156c24871f1d8b3098a84aa212c21530fd560daede889"}, "downloads": -1, "filename": "nittymcpick-1.1.0.tar.gz", "has_sig": false, "md5_digest": "653b111dbedc87855d496cfa2eaf05c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6429, "upload_time": "2020-02-23T14:35:53", "upload_time_iso_8601": "2020-02-23T14:35:53.161587Z", "url": "https://files.pythonhosted.org/packages/20/b5/0fcb71f120bbecb7cf922480e597366361f7597be1eef57dd7f77668dcbe/nittymcpick-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "87446d7d6704eae9c45b5b7b7b0f37dc", "sha256": "111454c2752c631fc661d0bdc5ef639716284c5ddbcc4e7a29a82bd17a864377"}, "downloads": -1, "filename": "nittymcpick-1.1.1.tar.gz", "has_sig": false, "md5_digest": "87446d7d6704eae9c45b5b7b7b0f37dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6428, "upload_time": "2020-02-23T14:39:46", "upload_time_iso_8601": "2020-02-23T14:39:46.438782Z", "url": "https://files.pythonhosted.org/packages/80/b3/a6f2a2aaff2d6d71b12c12088eb56981ec132462761f7659879d55fd1473/nittymcpick-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "7d06dfa79244b193fde85bb7bb5ecc53", "sha256": "7c14a359970d3ef2ecada9e6d41f74ca766379e1cde95b77fefe868fa5a3d712"}, "downloads": -1, "filename": "nittymcpick-1.1.2.tar.gz", "has_sig": false, "md5_digest": "7d06dfa79244b193fde85bb7bb5ecc53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6429, "upload_time": "2020-03-01T13:52:59", "upload_time_iso_8601": "2020-03-01T13:52:59.619525Z", "url": "https://files.pythonhosted.org/packages/e8/54/9ae0f1717db5215d8b0198480e078abfd41d0427f8cfb7ea1ede7921e02e/nittymcpick-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "e7cf100e24cf1a18fd45b497221ccced", "sha256": "4b5487adedefe2120c7e9b75ea25f37c3533742219aa80e0ebb799c6ac72ae01"}, "downloads": -1, "filename": "nittymcpick-1.1.3.tar.gz", "has_sig": false, "md5_digest": "e7cf100e24cf1a18fd45b497221ccced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10493, "upload_time": "2020-03-01T14:02:50", "upload_time_iso_8601": "2020-03-01T14:02:50.046782Z", "url": "https://files.pythonhosted.org/packages/83/22/4a4c26a00363c42c4c7145323162306f8606367578d0a3659b7a05d491ce/nittymcpick-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7cf100e24cf1a18fd45b497221ccced", "sha256": "4b5487adedefe2120c7e9b75ea25f37c3533742219aa80e0ebb799c6ac72ae01"}, "downloads": -1, "filename": "nittymcpick-1.1.3.tar.gz", "has_sig": false, "md5_digest": "e7cf100e24cf1a18fd45b497221ccced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10493, "upload_time": "2020-03-01T14:02:50", "upload_time_iso_8601": "2020-03-01T14:02:50.046782Z", "url": "https://files.pythonhosted.org/packages/83/22/4a4c26a00363c42c4c7145323162306f8606367578d0a3659b7a05d491ce/nittymcpick-1.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:15 2020"}