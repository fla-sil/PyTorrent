{"info": {"author": "Justin Smith", "author_email": "smith.justin.c@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "SunnyDI IoC Container\n=====================\n\n.. image:: https://img.shields.io/pypi/v/sunnydi.svg\n   :target: https://pypi.python.org/pypi/sunnydi\n\n.. image:: https://img.shields.io/pypi/status/sunnydi.svg\n   :target: https://pypi.python.org/pypi/sunnydi\n\n.. image:: https://travis-ci.org/thomasstreet/sunnydi.svg?branch=master\n   :target: https://travis-ci.org/thomasstreet/sunnydi\n\n.. image:: https://coveralls.io/repos/github/thomasstreet/sunnydi/badge.svg?branch=master\n   :target: https://coveralls.io/github/thomasstreet/sunnydi?branch=master\n\n.. image:: https://readthedocs.org/projects/sunnydi/badge/?version=latest\n   :target: http://sunnydi.readthedocs.io/en/latest/?sunnydi=latest\n   :alt: Documentation Status\n\nSunnyDI is an `IoC container <https://martinfowler.com/articles/injection.html>`_ for\nmanaging and injecting dependencies in Python.\n\nIt is inspired by `Autofac <http://docs.autofac.org/en/latest/index.html>`_ for .NET\nand `Guice <https://github.com/google/guice>`_ for java.\n\nHow to Use\n---------------\nFor our example, we will create an IoC module for our HelloService.:\n\n.. code-block:: python\n\n    class HelloService(object):\n        def hello(self):\n            return 'hello'\n\nCreate a new configuration module that extends `sunnydi.ioc.Module`.\nA module defines how objects will be created, destroyed and provided to other object instances in the IoC object graph.\nIn the most simple configuration, we can just bind a string name to our HelloService class type:\n\n.. code-block:: python\n\n    class HelloModule(Module):\n        def configure(self):\n            self.bind('hello_service')\n                .to(HelloService)\n\nWe can then create the injector and resolve our HelloService like this:\n\n.. code-block:: python\n\n    >>> hello_module = HelloModule()\n    >>> injector = hello_module.create_injector()\n    >>> hello_service = injector.get('hello_service')\n\n    >>> hello_service.hello()\n    'hello'\n\nResolved instances are provided via constructor arguments to consuming classes.\nFor instance, given the following class:\n\n.. code-block:: python\n\n    class MyClass(object):\n\n        def __init__(self, hello_service):\n            self._hello_service = hello_service\n\n        def do_hello(self):\n            return self._hello_service.hello()\n\nAn instance of `MyClass` can be resolved with an instance of `HelloService` due to\nthe service's binding name matching the parameter defined in the `MyClass` constructor:\n\n.. code-block:: python\n\n    >>> my_class_instance = injector.get(MyClass)\n    >>> my_class_instance.do_hello()\n    'hello'\n\nFor advanced usage, checkout the `docs <http://ballast.readthedocs.io>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thomasstreet/sunnydi", "keywords": "alpha development di dependency injection ioc", "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "tycoon", "package_url": "https://pypi.org/project/tycoon/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tycoon/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/thomasstreet/sunnydi"}, "release_url": "https://pypi.org/project/tycoon/0.0.0/", "requires_dist": null, "requires_python": null, "summary": "SunnyDI dependency injection framework", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/sunnydi\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/sunnydi.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b6572193bd016b7dbd421c5a7f3fdf2fec13c6c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73756e6e7964692e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/sunnydi\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/status/sunnydi.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c594f0532dccadea03f3ac95e5c606792b4634e4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f73756e6e7964692e737667\"></a>\n<a href=\"https://travis-ci.org/thomasstreet/sunnydi\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/thomasstreet/sunnydi.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1f26ecd1502296b67d53e796c041fde08a850c4/68747470733a2f2f7472617669732d63692e6f72672f74686f6d61737374726565742f73756e6e7964692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/thomasstreet/sunnydi?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/thomasstreet/sunnydi/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d11a45cb2af789fbaab0a6a935a6cad2cbc5474/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74686f6d61737374726565742f73756e6e7964692f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://sunnydi.readthedocs.io/en/latest/?sunnydi=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c1f7ac34ffc8946b4dae4818650d326b491eb27/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73756e6e7964692f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>SunnyDI is an <a href=\"https://martinfowler.com/articles/injection.html\" rel=\"nofollow\">IoC container</a> for\nmanaging and injecting dependencies in Python.</p>\n<p>It is inspired by <a href=\"http://docs.autofac.org/en/latest/index.html\" rel=\"nofollow\">Autofac</a> for .NET\nand <a href=\"https://github.com/google/guice\" rel=\"nofollow\">Guice</a> for java.</p>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<p>For our example, we will create an IoC module for our HelloService.:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">HelloService</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'hello'</span>\n</pre>\n<p>Create a new configuration module that extends <cite>sunnydi.ioc.Module</cite>.\nA module defines how objects will be created, destroyed and provided to other object instances in the IoC object graph.\nIn the most simple configuration, we can just bind a string name to our HelloService class type:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">HelloModule</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">configure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'hello_service'</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">HelloService</span><span class=\"p\">)</span>\n</pre>\n<p>We can then create the injector and resolve our HelloService like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello_module</span> <span class=\"o\">=</span> <span class=\"n\">HelloModule</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">injector</span> <span class=\"o\">=</span> <span class=\"n\">hello_module</span><span class=\"o\">.</span><span class=\"n\">create_injector</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello_service</span> <span class=\"o\">=</span> <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'hello_service'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello_service</span><span class=\"o\">.</span><span class=\"n\">hello</span><span class=\"p\">()</span>\n<span class=\"s1\">'hello'</span>\n</pre>\n<p>Resolved instances are provided via constructor arguments to consuming classes.\nFor instance, given the following class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hello_service</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hello_service</span> <span class=\"o\">=</span> <span class=\"n\">hello_service</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hello_service</span><span class=\"o\">.</span><span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<p>An instance of <cite>MyClass</cite> can be resolved with an instance of <cite>HelloService</cite> due to\nthe service\u2019s binding name matching the parameter defined in the <cite>MyClass</cite> constructor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_class_instance</span> <span class=\"o\">=</span> <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">MyClass</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_class_instance</span><span class=\"o\">.</span><span class=\"n\">do_hello</span><span class=\"p\">()</span>\n<span class=\"s1\">'hello'</span>\n</pre>\n<p>For advanced usage, checkout the <a href=\"http://ballast.readthedocs.io\" rel=\"nofollow\">docs</a></p>\n</div>\n\n          </div>"}, "last_serial": 2894259, "releases": {"0.0.0": []}, "urls": [], "timestamp": "Fri May  8 03:42:59 2020"}