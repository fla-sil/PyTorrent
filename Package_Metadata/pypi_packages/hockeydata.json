{"info": {"author": "Adam Fillion", "author_email": "adamfilliondev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "### hockeydata\n[![Build Status](https://travis-ci.org/adamfillion/hockeydata.svg?branch=master)](https://travis-ci.org/adamfillion/hockeydata)\n\nA library and CLI tool for collecting live data from NHL games. \n\nAll data is accessible identically through the Python API or command-line tool.\n\n#### Install\n\nCompatible with Python3.5+.\n\nUse `pip`:\n\n```bash\npython3 -m pip install hockeydata\n```\n\nOr from source:\n\n```bash\ngit clone https://github.com/adamfillion/hockeydata.git ~/dev/hockeydata\npython3 -m pip install ~/dev/hockeydata\n# or\npython3 ~/dev/hockeydata/setup.py install\n```\n\nThis will add a new command to your system, `hockeydata`.\n\n#### What this Tool Is\n\nThis tool was created out of a need for a reliable data pipeline for NHL live data - something which the NHL \n*kind of* provides, but not really. Data is scraped from several public sources, checked for errors, and merged when \npossible.\n\nDue to the dynamic nature of stats reporting in the NHL, it is possible for data to be missing/incorrect in this tool's\noutput. My philosophy when writing this was that **its better to output nothing than to output something wrong** - because\n I want downstream applications to be able to trust that my output is correct - and for the purposes of analysis missing \n data points are normally better then wrong data points.\n\nParsing errors are logged and can be fixed after the fact by me or contributors. \n\n\n#### The GameID\n\nThe key to NHL stats data is the \"gameid\", an ID which uniquely identifies every game. \nIt's a 10-digit numeric code which is formatted like so:\n\n    2019020565\n\nThis tool uses the gameid to obtain data for specific games. You can use the `list_games` python function or the `list-games` CLI \ncommand to get game ID's.\n\n#### Usage - library\n\nLet's say you want to write a script which you'll run once a day, which will find all games played on the given day and download all play-by-play data for each game into a CSV file, labelled with the game's ID.\n\n```python\nfrom hockeydata import get_game_shifts, get_season_play_by_play, get_play_by_plays, list_games\n\n# get today's games ids\ngame_list = list_games()\n\n# get a full year of games id\ngame_list = list_games('2018-01-01', '2019-01-01')\n\n# get play by play data for a game\ndf = get_play_by_plays('2018021000')\n\n# get shift data for a game\ndf = get_game_shifts('2018021000')\n\n# get play by play data for an entire season. WARNING this will take a while...approx. 20 seconds per game on my machine.\ndf = get_season_play_by_play(2017)\n```\n\n##### Formatters\n\nThe output package formats the data in a few different formats, for example CSV, JSON, or a \ntext-based table. Each formatter has a `dump` and `dumps` function which work similarly to Python's `json` module. \nIf you want to save your data as JSON, for example:\n\n```python\nfrom hockeydata import list_games\nfrom hockeydata.output import json\n\nplays = list_games('2018021000')\nwith open('file.json', 'w') as f:\n    json.dump(plays, f)\n\n```\n\n#### Usage - CLI\n\n```sh\nUsage: hockeydata [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  list-games  Gets game_ids for a date range\n  scrape      Scrape a game/list for all of its live data.\n  shifts      Scrape a game for its shift data.\n\n```\n\nUse the `--output-format` or `-o`  to format the data in your format of choice: csv, json, pretty (which is a nice table), \nor text (which is a basic table). Internally the data is normally collected as Dataframes, so you can add additional\noutput formats using Pandas' nice formatting functions.\n\n```bash\nnhl list-plays 2019020406 --output-format csv > 2019020406.csv  # create a new file\nnhl list-plays 2019020406 --output-format csv >> plays.csv  # append result to plays.csv\n```\n\n##### list-games\n\n```bash\nUsage: hockeydata list-games [OPTIONS] [START_DATE] [END_DATE]\n\n  Gets game_ids for a date range\n\nOptions:\n  -o, --output-format [text|csv|json|pretty]\n  --help                          Show this message and exit.\n\n```\n\n##### game-info\n\n```bash\nhockeydata game-info --help\nUsage: hockeydata game-info [OPTIONS] [GAME_IDS]...\n\n  Get high-level data about a game\n\nOptions:\n  -o, --output-format [text|csv|json|pretty]\n  --help                          Show this message and exit.\n```\n\n##### scrape\n\n```bash\n$ hockeydata scrape --help\nUsage: hockeydata scrape [OPTIONS] [GAME_IDS]...\n\n  Scrape a game/list for all of its live data.\n\nOptions:\n  -o, --output-format [text|csv|json|pretty]\n  --help                          Show this message and exit.\n\n```\n\n##### shifts\n\n```bash\nhockeydata shifts --help\nUsage: hockeydata shifts [OPTIONS] [GAME_IDS]...\n\n  Scrape a game for its shift data.\n\nOptions:\n  -o, --output-format [text|csv|json|pretty]\n  --help                          Show this message and exit.\n\n```\n\n### Formatters\n\nThe currently available formatters are `csv`, `json`, `pretty` and `text`.\n\nUsing the `text` output format, we get a pretty-printed table with the data:\n\n```text\n        GAME_ID  PERIOD TEAM            PLAYER  PLAYER_ID   START     END  DURATION\n0    2018021000       1  CHI      DUNCAN KEITH    8470281     0.0    49.0      49.0\n1    2018021000       1  L.A      DION PHANEUF    8470602     0.0    47.0      47.0\n2    2018021000       1  L.A      DUSTIN BROWN    8470606     0.0    47.0      47.0\n3    2018021000       1  CHI    BRENT SEABROOK    8470607     0.0    49.0      49.0\n...\n763  2018021000       3  L.A          MATT ROY    8478911  1190.0  1200.0      10.0\n\n```\n\n\nUsing the `csv` formatter, we get csv-like output:\n\n```csv\n,GAME_ID,PERIOD,TEAM,PLAYER,PLAYER_ID,START,END,DURATION\n0,2018021000,1,CHI,DUNCAN KEITH,8470281,0.0,49.0,49.0\n1,2018021000,1,L.A,DION PHANEUF,8470602,0.0,47.0,47.0\n2,2018021000,1,L.A,DUSTIN BROWN,8470606,0.0,47.0,47.0\n3,2018021000,1,CHI,BRENT SEABROOK,8470607,0.0,49.0,49.0\n...\n763,2018021000,3,L.A,MATT ROY,8478911,1190.0,1200.0,10.0\n\n\n```\n\nusing the `json` formatter, we get json-like output:\n\n```json\n[{\"GAME_ID\":\"2018021000\",\"PERIOD\":1,\"TEAM\":\"CHI\",\"PLAYER\":\"DUNCAN KEITH\",\"PLAYER_ID\":8470281,\"START\":0.0,\"END\":49.0,\n\"DURATION\":49.0},{\"GAME_ID\":\"2018021000\",\"PERIOD\":1,\"TEAM\":\"L.A\",\"PLAYER\":\"DION PHANEUF\",\"PLAYER_ID\":8470602,\"START\":0.0,\n\"END\":47.0,\"DURATION\":47.0},{\"GAME_ID\":\"2018021000\",\"PERIOD\":1,\"TEAM\":\"L.A\",\"PLAYER\":\"DUSTIN BROWN\",\"PLAYER_ID\":8470606,\n\"START\":0.0,\"END\":47.0,\"DURATION\":47.0}, ...]\n```\n\nusing the `pretty` formatter, we get a pretty table:\n\n```text\n+-----+------------+----------+--------+------------------+-------------+---------+-------+------------+\n|     |    GAME_ID |   PERIOD | TEAM   | PLAYER           |   PLAYER_ID |   START |   END |   DURATION |\n|-----+------------+----------+--------+------------------+-------------+---------+-------+------------|\n|   0 | 2018021000 |        1 | CHI    | DUNCAN KEITH     |     8470281 |       0 |    49 |         49 |\n|   1 | 2018021000 |        1 | L.A    | DION PHANEUF     |     8470602 |       0 |    47 |         47 |\n|   2 | 2018021000 |        1 | L.A    | DUSTIN BROWN     |     8470606 |       0 |    47 |         47 |\n...\n| 763 | 2018021000 |        3 | L.A    | MATT ROY         |     8478911 |    1190 |  1200 |         10 |\n+-----+------------+----------+--------+------------------+-------------+---------+-------+------------+\n\n```\n\n#### Acknowledgments\n\nThese projects helped greatly with the development of this tool:\n- Dword4's [NHL API Documentation](https://github.com/dword4/nhlapi)\n- Evolving Wild's [R Scraping Application](https://github.com/evolvingwild/evolving-hockey)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamfillion/hockeydata", "keywords": "hockey data stats nhl nhlstats nhldata hockeystats hockeyapi nhlapi", "license": "", "maintainer": "", "maintainer_email": "", "name": "hockeydata", "package_url": "https://pypi.org/project/hockeydata/", "platform": "", "project_url": "https://pypi.org/project/hockeydata/", "project_urls": {"Bug Reports": "https://github.com/adamfillion/hockeydata/issues", "Homepage": "https://github.com/adamfillion/hockeydata", "Source": "https://github.com/adamfillion/hockeydata/"}, "release_url": "https://pypi.org/project/hockeydata/0.0.1/", "requires_dist": ["Click", "tabulate", "pandas", "requests", "bs4", "lxml"], "requires_python": ">=3.5", "summary": "Library for accessing live hockey data to help analysts and hobbyists.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>hockeydata</h3>\n<p><a href=\"https://travis-ci.org/adamfillion/hockeydata\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d8cd6ee4020561bef7ad77e96736d1701d07aeb/68747470733a2f2f7472617669732d63692e6f72672f6164616d66696c6c696f6e2f686f636b6579646174612e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A library and CLI tool for collecting live data from NHL games.</p>\n<p>All data is accessible identically through the Python API or command-line tool.</p>\n<h4>Install</h4>\n<p>Compatible with Python3.5+.</p>\n<p>Use <code>pip</code>:</p>\n<pre>python3 -m pip install hockeydata\n</pre>\n<p>Or from source:</p>\n<pre>git clone https://github.com/adamfillion/hockeydata.git ~/dev/hockeydata\npython3 -m pip install ~/dev/hockeydata\n<span class=\"c1\"># or</span>\npython3 ~/dev/hockeydata/setup.py install\n</pre>\n<p>This will add a new command to your system, <code>hockeydata</code>.</p>\n<h4>What this Tool Is</h4>\n<p>This tool was created out of a need for a reliable data pipeline for NHL live data - something which the NHL\n<em>kind of</em> provides, but not really. Data is scraped from several public sources, checked for errors, and merged when\npossible.</p>\n<p>Due to the dynamic nature of stats reporting in the NHL, it is possible for data to be missing/incorrect in this tool's\noutput. My philosophy when writing this was that <strong>its better to output nothing than to output something wrong</strong> - because\nI want downstream applications to be able to trust that my output is correct - and for the purposes of analysis missing\ndata points are normally better then wrong data points.</p>\n<p>Parsing errors are logged and can be fixed after the fact by me or contributors.</p>\n<h4>The GameID</h4>\n<p>The key to NHL stats data is the \"gameid\", an ID which uniquely identifies every game.\nIt's a 10-digit numeric code which is formatted like so:</p>\n<pre><code>2019020565\n</code></pre>\n<p>This tool uses the gameid to obtain data for specific games. You can use the <code>list_games</code> python function or the <code>list-games</code> CLI\ncommand to get game ID's.</p>\n<h4>Usage - library</h4>\n<p>Let's say you want to write a script which you'll run once a day, which will find all games played on the given day and download all play-by-play data for each game into a CSV file, labelled with the game's ID.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hockeydata</span> <span class=\"kn\">import</span> <span class=\"n\">get_game_shifts</span><span class=\"p\">,</span> <span class=\"n\">get_season_play_by_play</span><span class=\"p\">,</span> <span class=\"n\">get_play_by_plays</span><span class=\"p\">,</span> <span class=\"n\">list_games</span>\n\n<span class=\"c1\"># get today's games ids</span>\n<span class=\"n\">game_list</span> <span class=\"o\">=</span> <span class=\"n\">list_games</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get a full year of games id</span>\n<span class=\"n\">game_list</span> <span class=\"o\">=</span> <span class=\"n\">list_games</span><span class=\"p\">(</span><span class=\"s1\">'2018-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2019-01-01'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get play by play data for a game</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">get_play_by_plays</span><span class=\"p\">(</span><span class=\"s1\">'2018021000'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get shift data for a game</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">get_game_shifts</span><span class=\"p\">(</span><span class=\"s1\">'2018021000'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get play by play data for an entire season. WARNING this will take a while...approx. 20 seconds per game on my machine.</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">get_season_play_by_play</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">)</span>\n</pre>\n<h5>Formatters</h5>\n<p>The output package formats the data in a few different formats, for example CSV, JSON, or a\ntext-based table. Each formatter has a <code>dump</code> and <code>dumps</code> function which work similarly to Python's <code>json</code> module.\nIf you want to save your data as JSON, for example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hockeydata</span> <span class=\"kn\">import</span> <span class=\"n\">list_games</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hockeydata.output</span> <span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"n\">plays</span> <span class=\"o\">=</span> <span class=\"n\">list_games</span><span class=\"p\">(</span><span class=\"s1\">'2018021000'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file.json'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">plays</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<h4>Usage - CLI</h4>\n<pre>Usage: hockeydata <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  list-games  Gets game_ids <span class=\"k\">for</span> a date range\n  scrape      Scrape a game/list <span class=\"k\">for</span> all of its live data.\n  shifts      Scrape a game <span class=\"k\">for</span> its <span class=\"nb\">shift</span> data.\n</pre>\n<p>Use the <code>--output-format</code> or <code>-o</code>  to format the data in your format of choice: csv, json, pretty (which is a nice table),\nor text (which is a basic table). Internally the data is normally collected as Dataframes, so you can add additional\noutput formats using Pandas' nice formatting functions.</p>\n<pre>nhl list-plays <span class=\"m\">2019020406</span> --output-format csv &gt; <span class=\"m\">2019020406</span>.csv  <span class=\"c1\"># create a new file</span>\nnhl list-plays <span class=\"m\">2019020406</span> --output-format csv &gt;&gt; plays.csv  <span class=\"c1\"># append result to plays.csv</span>\n</pre>\n<h5>list-games</h5>\n<pre>Usage: hockeydata list-games <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>START_DATE<span class=\"o\">]</span> <span class=\"o\">[</span>END_DATE<span class=\"o\">]</span>\n\n  Gets game_ids <span class=\"k\">for</span> a date range\n\nOptions:\n  -o, --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"p\">|</span>pretty<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h5>game-info</h5>\n<pre>hockeydata game-info --help\nUsage: hockeydata game-info <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>GAME_IDS<span class=\"o\">]</span>...\n\n  Get high-level data about a game\n\nOptions:\n  -o, --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"p\">|</span>pretty<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h5>scrape</h5>\n<pre>$ hockeydata scrape --help\nUsage: hockeydata scrape <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>GAME_IDS<span class=\"o\">]</span>...\n\n  Scrape a game/list <span class=\"k\">for</span> all of its live data.\n\nOptions:\n  -o, --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"p\">|</span>pretty<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h5>shifts</h5>\n<pre>hockeydata shifts --help\nUsage: hockeydata shifts <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>GAME_IDS<span class=\"o\">]</span>...\n\n  Scrape a game <span class=\"k\">for</span> its <span class=\"nb\">shift</span> data.\n\nOptions:\n  -o, --output-format <span class=\"o\">[</span>text<span class=\"p\">|</span>csv<span class=\"p\">|</span>json<span class=\"p\">|</span>pretty<span class=\"o\">]</span>\n  --help                          Show this message and exit.\n</pre>\n<h3>Formatters</h3>\n<p>The currently available formatters are <code>csv</code>, <code>json</code>, <code>pretty</code> and <code>text</code>.</p>\n<p>Using the <code>text</code> output format, we get a pretty-printed table with the data:</p>\n<pre>        GAME_ID  PERIOD TEAM            PLAYER  PLAYER_ID   START     END  DURATION\n0    2018021000       1  CHI      DUNCAN KEITH    8470281     0.0    49.0      49.0\n1    2018021000       1  L.A      DION PHANEUF    8470602     0.0    47.0      47.0\n2    2018021000       1  L.A      DUSTIN BROWN    8470606     0.0    47.0      47.0\n3    2018021000       1  CHI    BRENT SEABROOK    8470607     0.0    49.0      49.0\n...\n763  2018021000       3  L.A          MATT ROY    8478911  1190.0  1200.0      10.0\n</pre>\n<p>Using the <code>csv</code> formatter, we get csv-like output:</p>\n<pre>,GAME_ID,PERIOD,TEAM,PLAYER,PLAYER_ID,START,END,DURATION\n0,2018021000,1,CHI,DUNCAN KEITH,8470281,0.0,49.0,49.0\n1,2018021000,1,L.A,DION PHANEUF,8470602,0.0,47.0,47.0\n2,2018021000,1,L.A,DUSTIN BROWN,8470606,0.0,47.0,47.0\n3,2018021000,1,CHI,BRENT SEABROOK,8470607,0.0,49.0,49.0\n...\n763,2018021000,3,L.A,MATT ROY,8478911,1190.0,1200.0,10.0\n</pre>\n<p>using the <code>json</code> formatter, we get json-like output:</p>\n<pre><span class=\"p\">[{</span><span class=\"nt\">\"GAME_ID\"</span><span class=\"p\">:</span><span class=\"s2\">\"2018021000\"</span><span class=\"p\">,</span><span class=\"nt\">\"PERIOD\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nt\">\"TEAM\"</span><span class=\"p\">:</span><span class=\"s2\">\"CHI\"</span><span class=\"p\">,</span><span class=\"nt\">\"PLAYER\"</span><span class=\"p\">:</span><span class=\"s2\">\"DUNCAN KEITH\"</span><span class=\"p\">,</span><span class=\"nt\">\"PLAYER_ID\"</span><span class=\"p\">:</span><span class=\"mi\">8470281</span><span class=\"p\">,</span><span class=\"nt\">\"START\"</span><span class=\"p\">:</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"nt\">\"END\"</span><span class=\"p\">:</span><span class=\"mf\">49.0</span><span class=\"p\">,</span>\n<span class=\"nt\">\"DURATION\"</span><span class=\"p\">:</span><span class=\"mf\">49.0</span><span class=\"p\">},{</span><span class=\"nt\">\"GAME_ID\"</span><span class=\"p\">:</span><span class=\"s2\">\"2018021000\"</span><span class=\"p\">,</span><span class=\"nt\">\"PERIOD\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nt\">\"TEAM\"</span><span class=\"p\">:</span><span class=\"s2\">\"L.A\"</span><span class=\"p\">,</span><span class=\"nt\">\"PLAYER\"</span><span class=\"p\">:</span><span class=\"s2\">\"DION PHANEUF\"</span><span class=\"p\">,</span><span class=\"nt\">\"PLAYER_ID\"</span><span class=\"p\">:</span><span class=\"mi\">8470602</span><span class=\"p\">,</span><span class=\"nt\">\"START\"</span><span class=\"p\">:</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n<span class=\"nt\">\"END\"</span><span class=\"p\">:</span><span class=\"mf\">47.0</span><span class=\"p\">,</span><span class=\"nt\">\"DURATION\"</span><span class=\"p\">:</span><span class=\"mf\">47.0</span><span class=\"p\">},{</span><span class=\"nt\">\"GAME_ID\"</span><span class=\"p\">:</span><span class=\"s2\">\"2018021000\"</span><span class=\"p\">,</span><span class=\"nt\">\"PERIOD\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nt\">\"TEAM\"</span><span class=\"p\">:</span><span class=\"s2\">\"L.A\"</span><span class=\"p\">,</span><span class=\"nt\">\"PLAYER\"</span><span class=\"p\">:</span><span class=\"s2\">\"DUSTIN BROWN\"</span><span class=\"p\">,</span><span class=\"nt\">\"PLAYER_ID\"</span><span class=\"p\">:</span><span class=\"mi\">8470606</span><span class=\"p\">,</span>\n<span class=\"nt\">\"START\"</span><span class=\"p\">:</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"nt\">\"END\"</span><span class=\"p\">:</span><span class=\"mf\">47.0</span><span class=\"p\">,</span><span class=\"nt\">\"DURATION\"</span><span class=\"p\">:</span><span class=\"mf\">47.0</span><span class=\"p\">},</span> <span class=\"err\">...</span><span class=\"p\">]</span>\n</pre>\n<p>using the <code>pretty</code> formatter, we get a pretty table:</p>\n<pre>+-----+------------+----------+--------+------------------+-------------+---------+-------+------------+\n|     |    GAME_ID |   PERIOD | TEAM   | PLAYER           |   PLAYER_ID |   START |   END |   DURATION |\n|-----+------------+----------+--------+------------------+-------------+---------+-------+------------|\n|   0 | 2018021000 |        1 | CHI    | DUNCAN KEITH     |     8470281 |       0 |    49 |         49 |\n|   1 | 2018021000 |        1 | L.A    | DION PHANEUF     |     8470602 |       0 |    47 |         47 |\n|   2 | 2018021000 |        1 | L.A    | DUSTIN BROWN     |     8470606 |       0 |    47 |         47 |\n...\n| 763 | 2018021000 |        3 | L.A    | MATT ROY         |     8478911 |    1190 |  1200 |         10 |\n+-----+------------+----------+--------+------------------+-------------+---------+-------+------------+\n</pre>\n<h4>Acknowledgments</h4>\n<p>These projects helped greatly with the development of this tool:</p>\n<ul>\n<li>Dword4's <a href=\"https://github.com/dword4/nhlapi\" rel=\"nofollow\">NHL API Documentation</a></li>\n<li>Evolving Wild's <a href=\"https://github.com/evolvingwild/evolving-hockey\" rel=\"nofollow\">R Scraping Application</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6788800, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "10d395fdf7e57fc296779bf102a6c48f", "sha256": "294613d8ac33c2411ab22e4023bc4c8e91ab461a2c78e0a09b41a43e43bc81b0"}, "downloads": -1, "filename": "hockeydata-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10d395fdf7e57fc296779bf102a6c48f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 41126, "upload_time": "2020-03-11T00:05:35", "upload_time_iso_8601": "2020-03-11T00:05:35.085355Z", "url": "https://files.pythonhosted.org/packages/fe/2f/48cb683817ddb189dc418835088317d7a7363dd10acde078c4986077704f/hockeydata-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f63db3721947023c1975a3dfdc7fa79b", "sha256": "3f85ee46cae97190d89b1d3358363b7b89689aa4318a777d4151ef709d989ee0"}, "downloads": -1, "filename": "hockeydata-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f63db3721947023c1975a3dfdc7fa79b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23275, "upload_time": "2020-03-11T00:05:37", "upload_time_iso_8601": "2020-03-11T00:05:37.280900Z", "url": "https://files.pythonhosted.org/packages/8b/e6/2ee1bc2814cdb33ff483f59ab9e837a639f4d4de69af1ebf96ebe66d329e/hockeydata-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10d395fdf7e57fc296779bf102a6c48f", "sha256": "294613d8ac33c2411ab22e4023bc4c8e91ab461a2c78e0a09b41a43e43bc81b0"}, "downloads": -1, "filename": "hockeydata-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10d395fdf7e57fc296779bf102a6c48f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 41126, "upload_time": "2020-03-11T00:05:35", "upload_time_iso_8601": "2020-03-11T00:05:35.085355Z", "url": "https://files.pythonhosted.org/packages/fe/2f/48cb683817ddb189dc418835088317d7a7363dd10acde078c4986077704f/hockeydata-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f63db3721947023c1975a3dfdc7fa79b", "sha256": "3f85ee46cae97190d89b1d3358363b7b89689aa4318a777d4151ef709d989ee0"}, "downloads": -1, "filename": "hockeydata-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f63db3721947023c1975a3dfdc7fa79b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23275, "upload_time": "2020-03-11T00:05:37", "upload_time_iso_8601": "2020-03-11T00:05:37.280900Z", "url": "https://files.pythonhosted.org/packages/8b/e6/2ee1bc2814cdb33ff483f59ab9e837a639f4d4de69af1ebf96ebe66d329e/hockeydata-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:52 2020"}