{"info": {"author": "Tilman Blumenbach", "author_email": "tilman+pypi@ax86.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "jProperties for Python |pypi-badge|\n===================================\n\njProperties is a Java Property file parser and writer for Python. It aims to provide the same functionality\nas `Java's Properties class <http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html>`_, although\ncurrently the XML property format is not supported.\n\n.. sectnum::\n.. contents:: **Table of Contents**\n\nInstallation\n------------\n\nYou can install jProperties using `pip <https://pip.pypa.io/>`_::\n\n    pip install jproperties\n\nOverview\n--------\n\nObjects of the type ``Properties`` can be used like a Python dictionary (but see Caveats_ below).\nThe ``load()`` method populates the object by parsing input in the Java Property file format; the ``store()``\nmethod writes the key-value pairs stored in the object to a stream in the same format.\n\nThe ``load()`` and ``store()`` methods both take an ``encoding`` parameter. By default this is set to\n``iso-8859-1``, but it can be set to any encoding supported by Python, including e. g. the widely used\n``utf-8``.\n\nParsing a property file\n+++++++++++++++++++++++\n\n.. code:: python\n\n    from jproperties import Properties\n\n    p = Properties()\n    with open(\"foobar.properties\", \"rb\") as f:\n        p.load(f, \"utf-8\")\n\nThat's it, ``p`` now can be used like a dictionary containing properties from ``foobar.properties``.\n\nWriting a property file\n+++++++++++++++++++++++\n\n.. code:: python\n\n    from jproperties import Properties\n\n    p = Properties()\n    p[\"foobar\"] = \"A very important message from our sponsors: Python is great!\"\n\n    with open(\"foobar.properties\", \"wb\") as f:\n        p.store(f, encoding=\"utf-8\")\n\nReading from and writing to the same file-like object\n+++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n.. code:: python\n\n    from jproperties import Properties\n\n    with open(\"foobar.properties\", \"r+b\") as f:\n        p = Properties()\n        p.load(f, \"utf-8\")\n\n        # Do stuff with the p object...\n\n        f.truncate(0)\n        p.store(f, encoding=\"utf-8\")\n\nSpecial features\n----------------\n\nMetadata\n++++++++\n\nThe property file parser supports including programmatically readable and settable metadata in property files.\nMetadata for a key is represented as a Python dictionary; the keys and values of this dictionary should be strings,\nalthough when the property file is written, all non-string objects will be converted to strings. **This is a\none-way conversion**; when the metadata is read back again during a ``load()``, all keys and values will be treated\nas simple strings.\n\nBy default, the ``store()`` method does not write out the metadata. To enable that feature, set the keyword argument\n``strip_meta=False`` when calling the method.\n\nNote that metadata support is always enabled. The only thing that is optional is actually writing out the metadata.\n\nMetadata keys beginning with two underscores (``__``) are not written to the output stream by the ``store()`` method.\nThus, they can be used to attach \"runtime-only\" metadata to properties. Currently, however, metadata with such keys is\nstill read from the input stream by ``load()``; this should probably be considered erroneous behaviour.\n\nDocumenting Properties\n^^^^^^^^^^^^^^^^^^^^^^\n\nThe comments after a property definition can be added to the metadata\nwith the key ``_doc`` if the ``metadoc=True`` optional argument is given\nto the ``load`` method.  This allows properties to be documented in the\nproperties file.  For example, the properties file::\n\n    #: _severity=fatal\n    10001=Fatal internal error: %s\n    # A fatal internal error occurred.  Please re-run the command\n    # with the -D option to generate additional debug information.\n\nThe following example code shows how this documentation can be accessed.\n\n.. code:: python\n\n    from jproperties import Properties\n\n    p = Properties()\n    with open(\"foobar.properties\", \"rb\") as f:\n        p.load(f, \"utf-8\", metadoc=True)\n    # Print the explicitly defined '_severity' metadata\n    print(\"Severity: \", p.getmeta(\"10001\")['_severity'])\n    # Print the implicitly defined '_doc' metadata\n    print(\"Explanation: \", p.getmeta(\"10001\")['_doc'])\n\nThe documentation can be extracted from properties files and used to generate\npages in the overall system documentation or can be accessed via options\nfor command line utilities.\n\nCaveats\n^^^^^^^\n\nMetadata support influences how ``Properties`` objects are used as dictionary objects:\n\n- To set a value for a key, do ``prop_object[key] = value`` or ``prop_object[key] = value, metadata``. The first form\n  will leave the key's metadata unchanged. You can also use the ``setmeta()`` method to set a key's metadata.\n- To get the value of a key, do ``value, metadata = prop_object[key]``. If there is no metadata for a key,\n  ``metadata`` will be an empty dictionary. To retrieve only the metadata for a key, the ``getmeta()`` method can\n  be used.\n- When used as an iterator, ``Properties`` objects will simply return all keys in an unspecified order. No metadata is\n  returned (but can be retrieved using  ``getmeta()``).\n\nSetting defaults\n++++++++++++++++\n\nThe internal dictionary holding the key-value pairs can be accessed using the ``properties`` property. Deleting that\nproperty deletes all key-value pairs from the object.\n\nHowever, modifying properties using this special property will **not** modify metadata in any way. That means that\ndeleting properties by doing ``del prop_obj.properties[key]`` will not remove the associated metadata from the object.\nInstead, do ``del prop_obj[key]``.\n\nThe ``properties`` property is nevertheless useful to set many default values before parsing a property file:\n\n.. code:: python\n\n    from jproperties import Properties\n\n    prop_obj = Properties()\n    prop_obj.properties = a_big_dictionary_with_defaults\n    file_obj = codecs.open(\"foobar.properties\", \"rb\", \"iso-8859-1\")\n    prop_obj.load(file_obj, encoding=None)\n\nVersion history\n---------------\n\nVersion 2.1.0\n+++++++++++++\n\n- Add support for optional documentation comments (see `Documenting\n  Properties`_). Thanks to @mkrohan! (`#5`_)\n\nVersion 2.0.0\n+++++++++++++\n\n- **Python 3 support!** Thanks to @tboz203, who did a lot of the work. (`#1`_)\n- Drop support for Python 2.6.\n\nVersion 1.0.1\n+++++++++++++\n\n- This is the first \"proper\" PyPI release, with proper PyPI metadata and proper PyPI distributions.\n  Nothing else has changed.\n\nVersion 1.0\n+++++++++++\n\n- Initial release\n\n\n.. _#5: https://github.com/Tblue/python-jproperties/pull/5\n.. _#1: https://github.com/Tblue/python-jproperties/pull/1\n\n..\n    NB: Without a trailing question mark in the following image URL, the\n        generated HTML will contain an <object> element instead of an <img>\n        element, which apparently cannot be made into a link (i. e. a\n        \"clickable\" image).\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/jproperties.svg?\n    :align: middle\n    :target: https://pypi.python.org/pypi/jproperties\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/Tblue/python-jproperties/archive/v2.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Tblue/python-jproperties", "keywords": "java property properties file parser reader writer", "license": "BSD 3-Clause License; partially licensed under the Python Software Foundation License", "maintainer": "", "maintainer_email": "", "name": "jproperties", "package_url": "https://pypi.org/project/jproperties/", "platform": "", "project_url": "https://pypi.org/project/jproperties/", "project_urls": {"Download": "https://github.com/Tblue/python-jproperties/archive/v2.1.0.tar.gz", "Homepage": "https://github.com/Tblue/python-jproperties"}, "release_url": "https://pypi.org/project/jproperties/2.1.0/", "requires_dist": ["six (~=1.12)"], "requires_python": "", "summary": "Java Property file parser and writer for Python", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>jProperties is a Java Property file parser and writer for Python. It aims to provide the same functionality\nas <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html\" rel=\"nofollow\">Java\u2019s Properties class</a>, although\ncurrently the XML property format is not supported.</p>\n<div id=\"table-of-contents\">\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Installation</a></li>\n<li><a href=\"#overview\" id=\"id4\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Overview</a><ul>\n<li><a href=\"#parsing-a-property-file\" id=\"id5\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Parsing a property file</a></li>\n<li><a href=\"#writing-a-property-file\" id=\"id6\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Writing a property file</a></li>\n<li><a href=\"#reading-from-and-writing-to-the-same-file-like-object\" id=\"id7\" rel=\"nofollow\">2.3\u00a0\u00a0\u00a0Reading from and writing to the same file-like object</a></li>\n</ul>\n</li>\n<li><a href=\"#special-features\" id=\"id8\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Special features</a><ul>\n<li><a href=\"#metadata\" id=\"id9\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Metadata</a><ul>\n<li><a href=\"#documenting-properties\" id=\"id10\" rel=\"nofollow\">3.1.1\u00a0\u00a0\u00a0Documenting Properties</a></li>\n<li><a href=\"#caveats\" id=\"id11\" rel=\"nofollow\">3.1.2\u00a0\u00a0\u00a0Caveats</a></li>\n</ul>\n</li>\n<li><a href=\"#setting-defaults\" id=\"id12\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Setting defaults</a></li>\n</ul>\n</li>\n<li><a href=\"#version-history\" id=\"id13\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Version history</a><ul>\n<li><a href=\"#version-2-1-0\" id=\"id14\" rel=\"nofollow\">4.1\u00a0\u00a0\u00a0Version 2.1.0</a></li>\n<li><a href=\"#version-2-0-0\" id=\"id15\" rel=\"nofollow\">4.2\u00a0\u00a0\u00a0Version 2.0.0</a></li>\n<li><a href=\"#version-1-0-1\" id=\"id16\" rel=\"nofollow\">4.3\u00a0\u00a0\u00a0Version 1.0.1</a></li>\n<li><a href=\"#version-1-0\" id=\"id17\" rel=\"nofollow\">4.4\u00a0\u00a0\u00a0Version 1.0</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Installation</a></h2>\n<p>You can install jProperties using <a href=\"https://pip.pypa.io/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install jproperties\n</pre>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id4\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Overview</a></h2>\n<p>Objects of the type <tt>Properties</tt> can be used like a Python dictionary (but see <a href=\"#caveats\" rel=\"nofollow\">Caveats</a> below).\nThe <tt>load()</tt> method populates the object by parsing input in the Java Property file format; the <tt>store()</tt>\nmethod writes the key-value pairs stored in the object to a stream in the same format.</p>\n<p>The <tt>load()</tt> and <tt>store()</tt> methods both take an <tt>encoding</tt> parameter. By default this is set to\n<tt><span class=\"pre\">iso-8859-1</span></tt>, but it can be set to any encoding supported by Python, including e. g. the widely used\n<tt><span class=\"pre\">utf-8</span></tt>.</p>\n<div id=\"parsing-a-property-file\">\n<h3><a href=\"#id5\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Parsing a property file</a></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jproperties</span> <span class=\"kn\">import</span> <span class=\"n\">Properties</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Properties</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foobar.properties\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s it, <tt>p</tt> now can be used like a dictionary containing properties from <tt>foobar.properties</tt>.</p>\n</div>\n<div id=\"writing-a-property-file\">\n<h3><a href=\"#id6\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Writing a property file</a></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jproperties</span> <span class=\"kn\">import</span> <span class=\"n\">Properties</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Properties</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s2\">\"foobar\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"A very important message from our sponsors: Python is great!\"</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foobar.properties\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"reading-from-and-writing-to-the-same-file-like-object\">\n<h3><a href=\"#id7\" rel=\"nofollow\">2.3\u00a0\u00a0\u00a0Reading from and writing to the same file-like object</a></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jproperties</span> <span class=\"kn\">import</span> <span class=\"n\">Properties</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foobar.properties\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r+b\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Properties</span><span class=\"p\">()</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Do stuff with the p object...</span>\n\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"special-features\">\n<h2><a href=\"#id8\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Special features</a></h2>\n<div id=\"metadata\">\n<h3><a href=\"#id9\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Metadata</a></h3>\n<p>The property file parser supports including programmatically readable and settable metadata in property files.\nMetadata for a key is represented as a Python dictionary; the keys and values of this dictionary should be strings,\nalthough when the property file is written, all non-string objects will be converted to strings. <strong>This is a\none-way conversion</strong>; when the metadata is read back again during a <tt>load()</tt>, all keys and values will be treated\nas simple strings.</p>\n<p>By default, the <tt>store()</tt> method does not write out the metadata. To enable that feature, set the keyword argument\n<tt>strip_meta=False</tt> when calling the method.</p>\n<p>Note that metadata support is always enabled. The only thing that is optional is actually writing out the metadata.</p>\n<p>Metadata keys beginning with two underscores (<tt>__</tt>) are not written to the output stream by the <tt>store()</tt> method.\nThus, they can be used to attach \u201cruntime-only\u201d metadata to properties. Currently, however, metadata with such keys is\nstill read from the input stream by <tt>load()</tt>; this should probably be considered erroneous behaviour.</p>\n<div id=\"documenting-properties\">\n<h4><a href=\"#id10\" rel=\"nofollow\">3.1.1\u00a0\u00a0\u00a0Documenting Properties</a></h4>\n<p>The comments after a property definition can be added to the metadata\nwith the key <tt>_doc</tt> if the <tt>metadoc=True</tt> optional argument is given\nto the <tt>load</tt> method.  This allows properties to be documented in the\nproperties file.  For example, the properties file:</p>\n<pre>#: _severity=fatal\n10001=Fatal internal error: %s\n# A fatal internal error occurred.  Please re-run the command\n# with the -D option to generate additional debug information.\n</pre>\n<p>The following example code shows how this documentation can be accessed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jproperties</span> <span class=\"kn\">import</span> <span class=\"n\">Properties</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Properties</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foobar.properties\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"s2\">\"utf-8\"</span><span class=\"p\">,</span> <span class=\"n\">metadoc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Print the explicitly defined '_severity' metadata</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Severity: \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">getmeta</span><span class=\"p\">(</span><span class=\"s2\">\"10001\"</span><span class=\"p\">)[</span><span class=\"s1\">'_severity'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Print the implicitly defined '_doc' metadata</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Explanation: \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">getmeta</span><span class=\"p\">(</span><span class=\"s2\">\"10001\"</span><span class=\"p\">)[</span><span class=\"s1\">'_doc'</span><span class=\"p\">])</span>\n</pre>\n<p>The documentation can be extracted from properties files and used to generate\npages in the overall system documentation or can be accessed via options\nfor command line utilities.</p>\n</div>\n<div id=\"caveats\">\n<h4><a href=\"#id11\" rel=\"nofollow\">3.1.2\u00a0\u00a0\u00a0Caveats</a></h4>\n<p>Metadata support influences how <tt>Properties</tt> objects are used as dictionary objects:</p>\n<ul>\n<li>To set a value for a key, do <tt>prop_object[key] = value</tt> or <tt>prop_object[key] = value, metadata</tt>. The first form\nwill leave the key\u2019s metadata unchanged. You can also use the <tt>setmeta()</tt> method to set a key\u2019s metadata.</li>\n<li>To get the value of a key, do <tt>value, metadata = prop_object[key]</tt>. If there is no metadata for a key,\n<tt>metadata</tt> will be an empty dictionary. To retrieve only the metadata for a key, the <tt>getmeta()</tt> method can\nbe used.</li>\n<li>When used as an iterator, <tt>Properties</tt> objects will simply return all keys in an unspecified order. No metadata is\nreturned (but can be retrieved using  <tt>getmeta()</tt>).</li>\n</ul>\n</div>\n</div>\n<div id=\"setting-defaults\">\n<h3><a href=\"#id12\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Setting defaults</a></h3>\n<p>The internal dictionary holding the key-value pairs can be accessed using the <tt>properties</tt> property. Deleting that\nproperty deletes all key-value pairs from the object.</p>\n<p>However, modifying properties using this special property will <strong>not</strong> modify metadata in any way. That means that\ndeleting properties by doing <tt>del prop_obj.properties[key]</tt> will not remove the associated metadata from the object.\nInstead, do <tt>del prop_obj[key]</tt>.</p>\n<p>The <tt>properties</tt> property is nevertheless useful to set many default values before parsing a property file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jproperties</span> <span class=\"kn\">import</span> <span class=\"n\">Properties</span>\n\n<span class=\"n\">prop_obj</span> <span class=\"o\">=</span> <span class=\"n\">Properties</span><span class=\"p\">()</span>\n<span class=\"n\">prop_obj</span><span class=\"o\">.</span><span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"n\">a_big_dictionary_with_defaults</span>\n<span class=\"n\">file_obj</span> <span class=\"o\">=</span> <span class=\"n\">codecs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"foobar.properties\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">,</span> <span class=\"s2\">\"iso-8859-1\"</span><span class=\"p\">)</span>\n<span class=\"n\">prop_obj</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">file_obj</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"version-history\">\n<h2><a href=\"#id13\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Version history</a></h2>\n<div id=\"version-2-1-0\">\n<h3><a href=\"#id14\" rel=\"nofollow\">4.1\u00a0\u00a0\u00a0Version 2.1.0</a></h3>\n<ul>\n<li>Add support for optional documentation comments (see <a href=\"#documenting-properties\" rel=\"nofollow\">Documenting\nProperties</a>). Thanks to @mkrohan! (<a href=\"https://github.com/Tblue/python-jproperties/pull/5\" rel=\"nofollow\">#5</a>)</li>\n</ul>\n</div>\n<div id=\"version-2-0-0\">\n<h3><a href=\"#id15\" rel=\"nofollow\">4.2\u00a0\u00a0\u00a0Version 2.0.0</a></h3>\n<ul>\n<li><strong>Python 3 support!</strong> Thanks to @tboz203, who did a lot of the work. (<a href=\"https://github.com/Tblue/python-jproperties/pull/1\" rel=\"nofollow\">#1</a>)</li>\n<li>Drop support for Python 2.6.</li>\n</ul>\n</div>\n<div id=\"version-1-0-1\">\n<h3><a href=\"#id16\" rel=\"nofollow\">4.3\u00a0\u00a0\u00a0Version 1.0.1</a></h3>\n<ul>\n<li>This is the first \u201cproper\u201d PyPI release, with proper PyPI metadata and proper PyPI distributions.\nNothing else has changed.</li>\n</ul>\n</div>\n<div id=\"version-1-0\">\n<h3><a href=\"#id17\" rel=\"nofollow\">4.4\u00a0\u00a0\u00a0Version 1.0</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6357143, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "bdefdf3c191bd369642ff966064abb35", "sha256": "f51d9c0875ae4602930f18e198c69ce2bd1d7008a71f7628316abec56e73db83"}, "downloads": -1, "filename": "jproperties-1.0.1-py2-none-any.whl", "has_sig": true, "md5_digest": "bdefdf3c191bd369642ff966064abb35", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16551, "upload_time": "2015-12-23T19:04:38", "upload_time_iso_8601": "2015-12-23T19:04:38.254147Z", "url": "https://files.pythonhosted.org/packages/c1/ae/4d682c901b9e6b8ead960ffd82c514123fa3f39a9689f85626f27ba3d937/jproperties-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47916fa9def818178dfab2abd8134d04", "sha256": "327e14082653a4f2212ff81a96fbf141382f727f421e8afc933bf56ff7c010f4"}, "downloads": -1, "filename": "jproperties-1.0.1.tar.gz", "has_sig": true, "md5_digest": "47916fa9def818178dfab2abd8134d04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16484, "upload_time": "2015-12-23T19:04:50", "upload_time_iso_8601": "2015-12-23T19:04:50.828071Z", "url": "https://files.pythonhosted.org/packages/b8/a8/bc4c49c2d2d79f0e67e7f0ca2a945b847aade3e2776541281a21c19acae1/jproperties-1.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "70c42fd1083cf266fc0a8e7d311ec8f1", "sha256": "4e297b3f221ce81370f0ff3224d18872cd1ceb45d1833a26d127505ca9082220"}, "downloads": -1, "filename": "jproperties-2.0.0-py2-none-any.whl", "has_sig": true, "md5_digest": "70c42fd1083cf266fc0a8e7d311ec8f1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 18114, "upload_time": "2019-01-24T22:31:32", "upload_time_iso_8601": "2019-01-24T22:31:32.332875Z", "url": "https://files.pythonhosted.org/packages/67/c3/bcbc07932e291dbd30ad6ad493b485b8deff560b1ec323b4645dae5bce85/jproperties-2.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da03cdd2167792c075975209773237d7", "sha256": "e1b1fd274e8c99cf393cb957b8b8ad7e67cb14d6022d7653e0709d8bc7437d65"}, "downloads": -1, "filename": "jproperties-2.0.0-py3-none-any.whl", "has_sig": true, "md5_digest": "da03cdd2167792c075975209773237d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17035, "upload_time": "2019-01-24T22:31:34", "upload_time_iso_8601": "2019-01-24T22:31:34.113653Z", "url": "https://files.pythonhosted.org/packages/8a/f4/30e0414495acf4b4224d948edb035d7fcde72afad36207f10c8055918aa6/jproperties-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2a03441e66eef716a93d56d8f3d4344", "sha256": "b6709652f5c602e5271f519cf14cb9bf5d5a101df06e6c1d300123477a239588"}, "downloads": -1, "filename": "jproperties-2.0.0.tar.gz", "has_sig": true, "md5_digest": "b2a03441e66eef716a93d56d8f3d4344", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19610, "upload_time": "2019-01-25T09:21:33", "upload_time_iso_8601": "2019-01-25T09:21:33.357756Z", "url": "https://files.pythonhosted.org/packages/9b/21/1d93419d3e9e368bb86933882e446191fc55ff890e6c39b6e25e6ad1b93b/jproperties-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e11d5eb14c2c5cb9d6482292a9929c2c", "sha256": "864d3296b107e56e693533ff33a9e2d9222636d8affc8e768f213bd07163c071"}, "downloads": -1, "filename": "jproperties-2.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "e11d5eb14c2c5cb9d6482292a9929c2c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17729, "upload_time": "2019-12-25T02:10:05", "upload_time_iso_8601": "2019-12-25T02:10:05.252359Z", "url": "https://files.pythonhosted.org/packages/00/94/36d27a456719960974952d60e7383ae1e10d34eae548ca10343359b4be0e/jproperties-2.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25fa5c9a11284d05f7a1e4185952fb34", "sha256": "84116a04e06e85d84c4bc7bfc45e23d0c956c2efc038f57c47cafffdc0cdad0f"}, "downloads": -1, "filename": "jproperties-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25fa5c9a11284d05f7a1e4185952fb34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17728, "upload_time": "2019-12-25T02:10:07", "upload_time_iso_8601": "2019-12-25T02:10:07.200092Z", "url": "https://files.pythonhosted.org/packages/17/e5/9aee9f1347d4dee6e6e97f0a8e064261475787fa03a67ec274c2e32d4edb/jproperties-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd992005974b8f9ed2c828ec355f52d7", "sha256": "504d7b8d3b2f5f0f52c22c1f72bd50576dca17b01b4cd00d4359c6b0607a59ce"}, "downloads": -1, "filename": "jproperties-2.1.0.tar.gz", "has_sig": false, "md5_digest": "dd992005974b8f9ed2c828ec355f52d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18149, "upload_time": "2019-12-25T02:10:08", "upload_time_iso_8601": "2019-12-25T02:10:08.841327Z", "url": "https://files.pythonhosted.org/packages/76/73/7d7419a91a5da0d29c2879d3000811a409f81dfd57e5fa0f76daa4b1d4b6/jproperties-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e11d5eb14c2c5cb9d6482292a9929c2c", "sha256": "864d3296b107e56e693533ff33a9e2d9222636d8affc8e768f213bd07163c071"}, "downloads": -1, "filename": "jproperties-2.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "e11d5eb14c2c5cb9d6482292a9929c2c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17729, "upload_time": "2019-12-25T02:10:05", "upload_time_iso_8601": "2019-12-25T02:10:05.252359Z", "url": "https://files.pythonhosted.org/packages/00/94/36d27a456719960974952d60e7383ae1e10d34eae548ca10343359b4be0e/jproperties-2.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25fa5c9a11284d05f7a1e4185952fb34", "sha256": "84116a04e06e85d84c4bc7bfc45e23d0c956c2efc038f57c47cafffdc0cdad0f"}, "downloads": -1, "filename": "jproperties-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25fa5c9a11284d05f7a1e4185952fb34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17728, "upload_time": "2019-12-25T02:10:07", "upload_time_iso_8601": "2019-12-25T02:10:07.200092Z", "url": "https://files.pythonhosted.org/packages/17/e5/9aee9f1347d4dee6e6e97f0a8e064261475787fa03a67ec274c2e32d4edb/jproperties-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd992005974b8f9ed2c828ec355f52d7", "sha256": "504d7b8d3b2f5f0f52c22c1f72bd50576dca17b01b4cd00d4359c6b0607a59ce"}, "downloads": -1, "filename": "jproperties-2.1.0.tar.gz", "has_sig": false, "md5_digest": "dd992005974b8f9ed2c828ec355f52d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18149, "upload_time": "2019-12-25T02:10:08", "upload_time_iso_8601": "2019-12-25T02:10:08.841327Z", "url": "https://files.pythonhosted.org/packages/76/73/7d7419a91a5da0d29c2879d3000811a409f81dfd57e5fa0f76daa4b1d4b6/jproperties-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:09 2020"}