{"info": {"author": "Vaibhav Singh <hi@vaibhavsingh97.com>", "author_email": "hi@vaibhavsingh97.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# random-word\n\n[![Build Status](https://travis-ci.org/vaibhavsingh97/random-word.svg?branch=master)](https://travis-ci.org/vaibhavsingh97/random-word)\n[![PyPI version](https://badge.fury.io/py/random-word.svg)](https://badge.fury.io/py/random-word)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/Django.svg)](https://pypi.org/project/random-word/)\n[![PyPI - Status](https://img.shields.io/pypi/status/Django.svg)](https://pypi.org/project/random-word/)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/d6ff0d51be474f1bb8b031c2c418b541)](https://www.codacy.com/app/vaibhavsingh97/random-word?utm_source=github.com&utm_medium=referral&utm_content=vaibhavsingh97/random-word&utm_campaign=Badge_Grade)\n[![Downloads](http://pepy.tech/badge/random-word)](http://pepy.tech/project/random-word)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://vaibhavsingh97.mit-license.org/)\n\nThis is a simple python package to generate random english words.\nIf you need help after reading the below, please find me at [@vaibhavsingh97](https://twitter.com/vaibhavsingh97) on Twitter.\n\nIf you love the package, please :star2: the repo.\n\n## Installation\n\nYou should be able to install using `easy_install` or `pip` in the usual ways:\n\n```sh\n$ easy_install random-word\n$ pip install random-word\n```\n\nOr just clone this repository and run:\n\n```sh\n$ python3 setup.py install\n```\n\nOr place the `random-word` folder that you downloaded somewhere where it can be accessed by your scripts.\n\n## Basic Usage\n\n```python\nfrom random_word import RandomWords\nr = RandomWords()\n\n# Return a single random word\nr.get_random_word()\n# Return list of Random words\nr.get_random_words()\n# Return Word of the day\nr.word_of_the_day()\n```\n\n## Advance Usage\n\n1.  To generate single random word we can use these optional parameters\n\n    - `hasDictionaryDef (string)` - Only return words with dictionary definitions (optional)\n    - `includePartOfSpeech (string)` - CSV part-of-speech values to include (optional)\n    - `excludePartOfSpeech (string)` - CSV part-of-speech values to exclude (optional)\n    - `minCorpusCount (integer)` - Minimum corpus frequency for terms (optional)\n    - `maxCorpusCount (integer)` - Maximum corpus frequency for terms (optional)\n    - `minDictionaryCount (integer)` - Minimum dictionary count (optional)\n    - `maxDictionaryCount (integer)` - Maximum dictionary count (optional)\n    - `minLength (integer)` - Minimum word length (optional)\n    - `maxLength (integer)` - Maximum word length (optional)\n\n    ```python\n    r.get_random_word(hasDictionaryDef=\"true\", includePartOfSpeech=\"noun,verb\", minCorpusCount=1, maxCorpusCount=10, minDictionaryCount=1, maxDictionaryCount=10, minLength=5, maxLength=10)\n\n    # Output: pediophobia\n    ```\n\n2.  To generate list of random word we can use these optional parameters\n\n    - `hasDictionaryDef (string)` - Only return words with dictionary definitions (optional)\n    - `includePartOfSpeech (string)` - CSV part-of-speech values to include (optional)\n    - `excludePartOfSpeech (string)` - CSV part-of-speech values to exclude (optional)\n    - `minCorpusCount (integer)` - Minimum corpus frequency for terms (optional)\n    - `maxCorpusCount (integer)` - Maximum corpus frequency for terms (optional)\n    - `minDictionaryCount (integer)` - Minimum dictionary count (optional)\n    - `maxDictionaryCount (integer)` - Maximum dictionary count (optional)\n    - `minLength (integer)` - Minimum word length (optional)\n    - `maxLength (integer)` - Maximum word length (optional)\n    - `sortBy (string)` - Attribute to sort by `alpha` or `count` (optional)\n    - `sortOrder (string)` - Sort direction by `asc` or `desc` (optional)\n    - `limit (integer)` - Maximum number of results to return (optional)\n\n    ```python\n    r.get_random_words(hasDictionaryDef=\"true\", includePartOfSpeech=\"noun,verb\", minCorpusCount=1, maxCorpusCount=10, minDictionaryCount=1, maxDictionaryCount=10, minLength=5, maxLength=10, sortBy=\"alpha\", sortOrder=\"asc\", limit=15)\n\n    # Output: ['ambivert', 'calcspar', 'deaness', 'entrete', 'gades', 'monkeydom', 'outclimbed', 'outdared', 'pistoleers', 'redbugs', 'snake-line', 'subrules', 'subtrends', 'torenia', 'unhides']\n    ```\n\n3.  To get word of the day we can use these optional parameters\n\n    - `date (string)` - Fetches by date in yyyy-MM-dd (optional)\n\n    ```python\n    r.word_of_the_day(date=\"2018-01-01\")\n\n    # Output: {\"word\": \"qualtagh\", \"definations\": [{\"text\": \"The first person one encounters, either after leaving one\\'s home or (sometimes) outside one\\'s home, especially on New Year\\'s Day.\", \"source\": \"wiktionary\", \"partOfSpeech\": \"noun\"}, {\"text\": \"A Christmas or New Year\\'s ceremony, in the Isle of Man; one who takes part in the ceremony. See the first extract.\", \"source\": \"century\", \"partOfSpeech\": \"noun\"}]}\n    ```\n\n## Development\n\nAssuming that you have [`Python`](https://www.python.org/) and [`pipenv`](https://docs.pipenv.org) installed, set up your environment and install the required dependencies like this instead of the `pip install random-word` defined above:\n\n```sh\n$ git clone https://github.com/vaibhavsingh97/random-word.git\n$ cd random-word\n$ pipenv install\n...\n$ pipenv shell\n```\n\nAdd API Key in `random_word` directory defining API Key in `config.py`. If you don't have an API key than request your API key [here](https://developer.wordnik.com)\n\n```sh\nAPI_KEY = \"<API KEY>\"\n```\n\nAfter that, install your package locally\n\n```sh\n$ pip install -e .\n```\n\n## Issues\n\nYou can report the bugs at the [issue tracker](https://github.com/vaibhavsingh97/random-word/issues)\n\n## License\n\nBuilt with \u2665 by Vaibhav Singh([@vaibhavsingh97](https://github.com/vaibhavsingh97)) under [MIT License](https://vaibhavsingh97.mit-license.org/)\n\nYou can find a copy of the License at <https://vaibhavsingh97.mit-license.org/>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vaibhavsingh97/random-word", "keywords": "package random words word of the day random word generator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Random-Word", "package_url": "https://pypi.org/project/Random-Word/", "platform": "", "project_url": "https://pypi.org/project/Random-Word/", "project_urls": {"Homepage": "https://github.com/vaibhavsingh97/random-word"}, "release_url": "https://pypi.org/project/Random-Word/1.0.4/", "requires_dist": ["requests", "nose"], "requires_python": "", "summary": "This is a simple python package to generate random english words", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>random-word</h1>\n<p><a href=\"https://travis-ci.org/vaibhavsingh97/random-word\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c16d01ab8fe838560e935f99527cdd9f4938a3cd/68747470733a2f2f7472617669732d63692e6f72672f7661696268617673696e676839372f72616e646f6d2d776f72642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/random-word\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6174efbfb5bee1aaafb423839f384a48b1018d5/68747470733a2f2f62616467652e667572792e696f2f70792f72616e646f6d2d776f72642e737667\"></a>\n<a href=\"https://pypi.org/project/random-word/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10dfd3abcb9a0ba765e14beb5116c17f39ed86b2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f446a616e676f2e737667\"></a>\n<a href=\"https://pypi.org/project/random-word/\" rel=\"nofollow\"><img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ee0272d6e2334bdebdd4ba37a4e228cf142b2b8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f446a616e676f2e737667\"></a>\n<a href=\"https://www.codacy.com/app/vaibhavsingh97/random-word?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=vaibhavsingh97/random-word&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f949204222f43b612e063ce59e09fc47c340f5f1/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6436666630643531626534373466316262386230333163326334313862353431\"></a>\n<a href=\"http://pepy.tech/project/random-word\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c736028573665a47005c723d64a07869eb77377/687474703a2f2f706570792e746563682f62616467652f72616e646f6d2d776f7264\"></a>\n<a href=\"https://vaibhavsingh97.mit-license.org/\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<p>This is a simple python package to generate random english words.\nIf you need help after reading the below, please find me at <a href=\"https://twitter.com/vaibhavsingh97\" rel=\"nofollow\">@vaibhavsingh97</a> on Twitter.</p>\n<p>If you love the package, please :star2: the repo.</p>\n<h2>Installation</h2>\n<p>You should be able to install using <code>easy_install</code> or <code>pip</code> in the usual ways:</p>\n<pre>$ easy_install random-word\n$ pip install random-word\n</pre>\n<p>Or just clone this repository and run:</p>\n<pre>$ python3 setup.py install\n</pre>\n<p>Or place the <code>random-word</code> folder that you downloaded somewhere where it can be accessed by your scripts.</p>\n<h2>Basic Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random_word</span> <span class=\"kn\">import</span> <span class=\"n\">RandomWords</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">RandomWords</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Return a single random word</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get_random_word</span><span class=\"p\">()</span>\n<span class=\"c1\"># Return list of Random words</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get_random_words</span><span class=\"p\">()</span>\n<span class=\"c1\"># Return Word of the day</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">word_of_the_day</span><span class=\"p\">()</span>\n</pre>\n<h2>Advance Usage</h2>\n<ol>\n<li>\n<p>To generate single random word we can use these optional parameters</p>\n<ul>\n<li><code>hasDictionaryDef (string)</code> - Only return words with dictionary definitions (optional)</li>\n<li><code>includePartOfSpeech (string)</code> - CSV part-of-speech values to include (optional)</li>\n<li><code>excludePartOfSpeech (string)</code> - CSV part-of-speech values to exclude (optional)</li>\n<li><code>minCorpusCount (integer)</code> - Minimum corpus frequency for terms (optional)</li>\n<li><code>maxCorpusCount (integer)</code> - Maximum corpus frequency for terms (optional)</li>\n<li><code>minDictionaryCount (integer)</code> - Minimum dictionary count (optional)</li>\n<li><code>maxDictionaryCount (integer)</code> - Maximum dictionary count (optional)</li>\n<li><code>minLength (integer)</code> - Minimum word length (optional)</li>\n<li><code>maxLength (integer)</code> - Maximum word length (optional)</li>\n</ul>\n<pre><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get_random_word</span><span class=\"p\">(</span><span class=\"n\">hasDictionaryDef</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"p\">,</span> <span class=\"n\">includePartOfSpeech</span><span class=\"o\">=</span><span class=\"s2\">\"noun,verb\"</span><span class=\"p\">,</span> <span class=\"n\">minCorpusCount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxCorpusCount</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">minDictionaryCount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxDictionaryCount</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">minLength</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">maxLength</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Output: pediophobia</span>\n</pre>\n</li>\n<li>\n<p>To generate list of random word we can use these optional parameters</p>\n<ul>\n<li><code>hasDictionaryDef (string)</code> - Only return words with dictionary definitions (optional)</li>\n<li><code>includePartOfSpeech (string)</code> - CSV part-of-speech values to include (optional)</li>\n<li><code>excludePartOfSpeech (string)</code> - CSV part-of-speech values to exclude (optional)</li>\n<li><code>minCorpusCount (integer)</code> - Minimum corpus frequency for terms (optional)</li>\n<li><code>maxCorpusCount (integer)</code> - Maximum corpus frequency for terms (optional)</li>\n<li><code>minDictionaryCount (integer)</code> - Minimum dictionary count (optional)</li>\n<li><code>maxDictionaryCount (integer)</code> - Maximum dictionary count (optional)</li>\n<li><code>minLength (integer)</code> - Minimum word length (optional)</li>\n<li><code>maxLength (integer)</code> - Maximum word length (optional)</li>\n<li><code>sortBy (string)</code> - Attribute to sort by <code>alpha</code> or <code>count</code> (optional)</li>\n<li><code>sortOrder (string)</code> - Sort direction by <code>asc</code> or <code>desc</code> (optional)</li>\n<li><code>limit (integer)</code> - Maximum number of results to return (optional)</li>\n</ul>\n<pre><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get_random_words</span><span class=\"p\">(</span><span class=\"n\">hasDictionaryDef</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"p\">,</span> <span class=\"n\">includePartOfSpeech</span><span class=\"o\">=</span><span class=\"s2\">\"noun,verb\"</span><span class=\"p\">,</span> <span class=\"n\">minCorpusCount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxCorpusCount</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">minDictionaryCount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxDictionaryCount</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">minLength</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">maxLength</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">sortBy</span><span class=\"o\">=</span><span class=\"s2\">\"alpha\"</span><span class=\"p\">,</span> <span class=\"n\">sortOrder</span><span class=\"o\">=</span><span class=\"s2\">\"asc\"</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Output: ['ambivert', 'calcspar', 'deaness', 'entrete', 'gades', 'monkeydom', 'outclimbed', 'outdared', 'pistoleers', 'redbugs', 'snake-line', 'subrules', 'subtrends', 'torenia', 'unhides']</span>\n</pre>\n</li>\n<li>\n<p>To get word of the day we can use these optional parameters</p>\n<ul>\n<li><code>date (string)</code> - Fetches by date in yyyy-MM-dd (optional)</li>\n</ul>\n<pre><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">word_of_the_day</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"o\">=</span><span class=\"s2\">\"2018-01-01\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Output: {\"word\": \"qualtagh\", \"definations\": [{\"text\": \"The first person one encounters, either after leaving one\\'s home or (sometimes) outside one\\'s home, especially on New Year\\'s Day.\", \"source\": \"wiktionary\", \"partOfSpeech\": \"noun\"}, {\"text\": \"A Christmas or New Year\\'s ceremony, in the Isle of Man; one who takes part in the ceremony. See the first extract.\", \"source\": \"century\", \"partOfSpeech\": \"noun\"}]}</span>\n</pre>\n</li>\n</ol>\n<h2>Development</h2>\n<p>Assuming that you have <a href=\"https://www.python.org/\" rel=\"nofollow\"><code>Python</code></a> and <a href=\"https://docs.pipenv.org\" rel=\"nofollow\"><code>pipenv</code></a> installed, set up your environment and install the required dependencies like this instead of the <code>pip install random-word</code> defined above:</p>\n<pre>$ git clone https://github.com/vaibhavsingh97/random-word.git\n$ <span class=\"nb\">cd</span> random-word\n$ pipenv install\n...\n$ pipenv shell\n</pre>\n<p>Add API Key in <code>random_word</code> directory defining API Key in <code>config.py</code>. If you don't have an API key than request your API key <a href=\"https://developer.wordnik.com\" rel=\"nofollow\">here</a></p>\n<pre><span class=\"nv\">API_KEY</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;API KEY&gt;\"</span>\n</pre>\n<p>After that, install your package locally</p>\n<pre>$ pip install -e .\n</pre>\n<h2>Issues</h2>\n<p>You can report the bugs at the <a href=\"https://github.com/vaibhavsingh97/random-word/issues\" rel=\"nofollow\">issue tracker</a></p>\n<h2>License</h2>\n<p>Built with \u2665 by Vaibhav Singh(<a href=\"https://github.com/vaibhavsingh97\" rel=\"nofollow\">@vaibhavsingh97</a>) under <a href=\"https://vaibhavsingh97.mit-license.org/\" rel=\"nofollow\">MIT License</a></p>\n<p>You can find a copy of the License at <a href=\"https://vaibhavsingh97.mit-license.org/\" rel=\"nofollow\">https://vaibhavsingh97.mit-license.org/</a></p>\n\n          </div>"}, "last_serial": 5168587, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "6d2c7a9b080c815d6f188d2de1a0a472", "sha256": "d9514dce1ff9fbafe380172c80e6ee26f75b6f0b9034f3fa779633974148e71b"}, "downloads": -1, "filename": "random_word-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d2c7a9b080c815d6f188d2de1a0a472", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1981, "upload_time": "2018-06-13T10:00:16", "upload_time_iso_8601": "2018-06-13T10:00:16.797812Z", "url": "https://files.pythonhosted.org/packages/03/b6/7cd77b472b93ae0ec0ed95f8393b3e9234933b701d63b9a54d95d1b7b11a/random_word-0.0.2-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e6c95b6d4ae56164df85b389f1cff35f", "sha256": "ed8551bd672f1e28e308bbd2b337d45481601e3af442f2a5f757699d5dd50cd3"}, "downloads": -1, "filename": "Random_Word-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6c95b6d4ae56164df85b389f1cff35f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5672, "upload_time": "2018-06-21T13:00:35", "upload_time_iso_8601": "2018-06-21T13:00:35.213039Z", "url": "https://files.pythonhosted.org/packages/e6/db/63ee4644ddc76c561c1130f9056e888a903fdead8ed42fc4e62839fbc3a0/Random_Word-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64b43c0c23d6fc3c014f59089e976c9d", "sha256": "e9f79d6a0b08471a25c134f2e15b348df7bc08b26ee9379cc0717a8caea4e8de"}, "downloads": -1, "filename": "Random Word-1.0.0.tar.gz", "has_sig": false, "md5_digest": "64b43c0c23d6fc3c014f59089e976c9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4718, "upload_time": "2018-06-21T13:01:46", "upload_time_iso_8601": "2018-06-21T13:01:46.738048Z", "url": "https://files.pythonhosted.org/packages/9f/43/accca4260400df10a4a22a328dd020c967e0144acc271e4c3d651608708d/Random%20Word-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "82e6b3e3ab93e0d968d476403ad4fb09", "sha256": "c9003137450cfc27def64908d3cd7d45d0145adaf7ed1dd360f8d263fb5fdc54"}, "downloads": -1, "filename": "Random_Word-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "82e6b3e3ab93e0d968d476403ad4fb09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5729, "upload_time": "2018-06-22T15:01:30", "upload_time_iso_8601": "2018-06-22T15:01:30.085046Z", "url": "https://files.pythonhosted.org/packages/25/fb/7c35371c670a9e60cf27a6ae0da57d40ce6ab4fbdf58a93bf3db47151ab1/Random_Word-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75088429e64144f6668436bb23b18635", "sha256": "8543241a4576e6f6dce2660553c6cdad6ac1307b2deb39d8e80c885816d5f4a2"}, "downloads": -1, "filename": "Random Word-1.0.1.tar.gz", "has_sig": false, "md5_digest": "75088429e64144f6668436bb23b18635", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4778, "upload_time": "2018-06-21T13:08:57", "upload_time_iso_8601": "2018-06-21T13:08:57.812492Z", "url": "https://files.pythonhosted.org/packages/f9/e3/b54bd7b9177fe19a70cf25b603a0e515cb880b16bc595eee0d69ac95433c/Random%20Word-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f7bed04d56526c248b988c413bbca4a4", "sha256": "c1bef401b75be62467d7cc088662137f03cfdcaa43ec4f43007a231af6cea40f"}, "downloads": -1, "filename": "Random_Word-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f7bed04d56526c248b988c413bbca4a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6219, "upload_time": "2018-06-22T15:01:31", "upload_time_iso_8601": "2018-06-22T15:01:31.417606Z", "url": "https://files.pythonhosted.org/packages/59/2a/9dd2f8fde274cade5f5981a16bd4c8635cc9b5c4bc5d0f05142633f5b7aa/Random_Word-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8533278572844d095c88218a2a785874", "sha256": "c1c5125aaf7f38692c535747507f2bc5a1518d4ff1c3f14df41610e6ce10c517"}, "downloads": -1, "filename": "Random Word-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8533278572844d095c88218a2a785874", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4877, "upload_time": "2018-06-22T15:02:00", "upload_time_iso_8601": "2018-06-22T15:02:00.794423Z", "url": "https://files.pythonhosted.org/packages/6a/17/dce5d7b70ca3ad451320d5139e76b6341b1dc530269979b93f1bc256bc56/Random%20Word-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "3f70c13b8f7d97a4e447962af9b438d2", "sha256": "f63b0c741ed98ceeab89de4c6fcb38a125ad4e37ce55a2cdd7123b58f16f7156"}, "downloads": -1, "filename": "Random Word-1.0.3.tar.gz", "has_sig": false, "md5_digest": "3f70c13b8f7d97a4e447962af9b438d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5279, "upload_time": "2018-07-16T18:06:13", "upload_time_iso_8601": "2018-07-16T18:06:13.172460Z", "url": "https://files.pythonhosted.org/packages/2a/7f/fd07e41e699a5e5c5ea3ae89327d96b29564d770d61ea38171e127391fac/Random%20Word-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "b820881c309bdad8f5559fb4db7b4fef", "sha256": "843cbe6e8275b626ae00383a3a2ff6acd13572f41fbdb312653aad9fb9dbfd99"}, "downloads": -1, "filename": "Random_Word-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b820881c309bdad8f5559fb4db7b4fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7150, "upload_time": "2019-04-20T21:22:55", "upload_time_iso_8601": "2019-04-20T21:22:55.611825Z", "url": "https://files.pythonhosted.org/packages/95/0d/c672ff7d6e36f88e60cbdd669f1247041fb7a45f3e2368d314f65b1dd933/Random_Word-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d682fd5d4d037b8292da57d40704689", "sha256": "d6dadadd7ed75142a7351dbc285b8e1d7c1fbc17945eb5ccd29fcd0ab5ee5121"}, "downloads": -1, "filename": "Random Word-1.0.4.tar.gz", "has_sig": false, "md5_digest": "9d682fd5d4d037b8292da57d40704689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5176, "upload_time": "2019-04-20T21:22:57", "upload_time_iso_8601": "2019-04-20T21:22:57.043575Z", "url": "https://files.pythonhosted.org/packages/e0/92/4140a9a84912a9f111f57e4491a60b2e0b3f8bcab8ecf82a673326e800db/Random%20Word-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b820881c309bdad8f5559fb4db7b4fef", "sha256": "843cbe6e8275b626ae00383a3a2ff6acd13572f41fbdb312653aad9fb9dbfd99"}, "downloads": -1, "filename": "Random_Word-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b820881c309bdad8f5559fb4db7b4fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7150, "upload_time": "2019-04-20T21:22:55", "upload_time_iso_8601": "2019-04-20T21:22:55.611825Z", "url": "https://files.pythonhosted.org/packages/95/0d/c672ff7d6e36f88e60cbdd669f1247041fb7a45f3e2368d314f65b1dd933/Random_Word-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d682fd5d4d037b8292da57d40704689", "sha256": "d6dadadd7ed75142a7351dbc285b8e1d7c1fbc17945eb5ccd29fcd0ab5ee5121"}, "downloads": -1, "filename": "Random Word-1.0.4.tar.gz", "has_sig": false, "md5_digest": "9d682fd5d4d037b8292da57d40704689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5176, "upload_time": "2019-04-20T21:22:57", "upload_time_iso_8601": "2019-04-20T21:22:57.043575Z", "url": "https://files.pythonhosted.org/packages/e0/92/4140a9a84912a9f111f57e4491a60b2e0b3f8bcab8ecf82a673326e800db/Random%20Word-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:35 2020"}