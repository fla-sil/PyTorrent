{"info": {"author": "Equinox Fitness", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "Datacoco - Core\n===============\n\nEquinox Common Code Utility for Python 3 with minimal dependencies and\neasy installation!\n\nIncludes utilities for logging and config files\n\n|Codacy Badge| |Codacy Badge2| \n\nInstallation\n------------\nTo install the latest version, use pip:\n\n::\n\n    pip install datacoco-core\n\nLogger\n------\n\nThe logging module is a lightwight wrapper around the default logging\nmodule. Basic usage:\n\n::\n\n    from datacoco_core import Logger\n    l = Logger()\n    l.l(\"Your important log message here')\n\nBy default the log message will be saved in a logs dir of the project\nroot, in a file named by python module and date. For example:\n\n::\n\n    cat logs/test.py-20190827-135736.log\n    2019-08-27 13:57:36,471 Your important message here\n\nOptionally, parameters ``logname`` and ``project_name`` can be passed on\nclass instantiation to customize the logfile name, and logfile path\nrespectively.\n\nconfig\n------\n\nThe config module is a lightweight wrapper around the configparser\nmodule. It converts INI files to a dictionary object. By default, the\nConfig class will look for a file named in ``etl.cfg`` in the project\nroot.\n\nExample INI config file:\n\n::\n\n    [secret1]\n    answer_to_the_universe=42\n\nThis credential can be accessed by the following example code:\n\n::\n\n    from datacoco_core.config import config\n    c = config()\n    c['secret1']['answer_to_the_universe']\n    42\n\nNote: The config class assumes base64 hashing for any key named pwd or\npassword. (See below)\n\nPassword Encryption\n~~~~~~~~~~~~~~~~~~~\n\nThe coco config class uses base64 encryption. Any option named pwd or\npassword will be assumed base 64 encrypted. To derive the encrypted\npassword for your config, launch python shell and run the following\ncommand:\n\n::\n\n    >>> import base64\n    >>> print base64.b64encode(\"password\")\n    cGFzc3dvcmQ=\n\nIn python3 if you get the error\n``TypeError: a bytes-like object is required, not 'str'`` do this.\n\n::\n\n    >>> import base64\n    >>> print(base64.b64encode(b'password'))\n    b'cGFzc3dvcmQ=\n\nDevelopment\n-----------\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nIt is recommended to use the steps below to set up a virtual environment\nfor development:\n\n::\n\n    python3 -m venv <virtual env name>\n    source venv/bin/activate\n    pip install --upgrade pip\n    pip install datacoco-core\n\nTesting\n~~~~~~~\n\nTo run the testing suite, simply run the command: ``tox``\n\n.. |Codacy Badge| image:: https://api.codacy.com/project/badge/Grade/d16600d5b116418496f6b98b9e02d77b\n   :target: https://www.codacy.com/manual/equinoxfitness/datacoco-core?utm_source=github.com&utm_medium=referral&utm_content=equinoxfitness/datacoco-core&utm_campaign=Badge_Grade\n.. |Codacy Badge2| image:: https://api.codacy.com/project/badge/Coverage/d16600d5b116418496f6b98b9e02d77b\n   :target: https://www.codacy.com/manual/equinoxfitness/datacoco-core?utm_source=github.com&utm_medium=referral&utm_content=equinoxfitness/datacoco-core&utm_campaign=Badge_Coverage", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/equinoxfitness/datacoco-core", "keywords": "helper,config,logging,common", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "datacoco-core", "package_url": "https://pypi.org/project/datacoco-core/", "platform": "", "project_url": "https://pypi.org/project/datacoco-core/", "project_urls": {"Homepage": "https://github.com/equinoxfitness/datacoco-core"}, "release_url": "https://pypi.org/project/datacoco-core/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Data common code for core features by Equinox", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Equinox Common Code Utility for Python 3 with minimal dependencies and\neasy installation!</p>\n<p>Includes utilities for logging and config files</p>\n<p><a href=\"https://www.codacy.com/manual/equinoxfitness/datacoco-core?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/datacoco-core&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd2759205a6c28f11addce0a9240b2ef988fff5c/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6431363630306435623131363431383439366636623938623965303264373762\"></a> <a href=\"https://www.codacy.com/manual/equinoxfitness/datacoco-core?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/datacoco-core&amp;utm_campaign=Badge_Coverage\" rel=\"nofollow\"><img alt=\"Codacy Badge2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb64f93e2b1d5e4050c42b416b85d44e8b211c52/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f436f7665726167652f6431363630306435623131363431383439366636623938623965303264373762\"></a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the latest version, use pip:</p>\n<pre>pip install datacoco-core\n</pre>\n</div>\n<div id=\"logger\">\n<h2>Logger</h2>\n<p>The logging module is a lightwight wrapper around the default logging\nmodule. Basic usage:</p>\n<pre>from datacoco_core import Logger\nl = Logger()\nl.l(\"Your important log message here')\n</pre>\n<p>By default the log message will be saved in a logs dir of the project\nroot, in a file named by python module and date. For example:</p>\n<pre>cat logs/test.py-20190827-135736.log\n2019-08-27 13:57:36,471 Your important message here\n</pre>\n<p>Optionally, parameters <tt>logname</tt> and <tt>project_name</tt> can be passed on\nclass instantiation to customize the logfile name, and logfile path\nrespectively.</p>\n</div>\n<div id=\"config\">\n<h2>config</h2>\n<p>The config module is a lightweight wrapper around the configparser\nmodule. It converts INI files to a dictionary object. By default, the\nConfig class will look for a file named in <tt>etl.cfg</tt> in the project\nroot.</p>\n<p>Example INI config file:</p>\n<pre>[secret1]\nanswer_to_the_universe=42\n</pre>\n<p>This credential can be accessed by the following example code:</p>\n<pre>from datacoco_core.config import config\nc = config()\nc['secret1']['answer_to_the_universe']\n42\n</pre>\n<p>Note: The config class assumes base64 hashing for any key named pwd or\npassword. (See below)</p>\n<div id=\"password-encryption\">\n<h3>Password Encryption</h3>\n<p>The coco config class uses base64 encryption. Any option named pwd or\npassword will be assumed base 64 encrypted. To derive the encrypted\npassword for your config, launch python shell and run the following\ncommand:</p>\n<pre>&gt;&gt;&gt; import base64\n&gt;&gt;&gt; print base64.b64encode(\"password\")\ncGFzc3dvcmQ=\n</pre>\n<p>In python3 if you get the error\n<tt>TypeError: a <span class=\"pre\">bytes-like</span> object is required, not 'str'</tt> do this.</p>\n<pre>&gt;&gt;&gt; import base64\n&gt;&gt;&gt; print(base64.b64encode(b'password'))\nb'cGFzc3dvcmQ=\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>It is recommended to use the steps below to set up a virtual environment\nfor development:</p>\n<pre>python3 -m venv &lt;virtual env name&gt;\nsource venv/bin/activate\npip install --upgrade pip\npip install datacoco-core\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>To run the testing suite, simply run the command: <tt>tox</tt></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6458563, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5e310ac330e14e7ebe8ba44277413064", "sha256": "7a684486e1a99aad5b94a8144e6d856725eae1305284e5091ace84a84f391182"}, "downloads": -1, "filename": "datacoco_core-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5e310ac330e14e7ebe8ba44277413064", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4317, "upload_time": "2019-12-10T20:14:24", "upload_time_iso_8601": "2019-12-10T20:14:24.867393Z", "url": "https://files.pythonhosted.org/packages/23/28/90b10bbadc01557c4d42a80567225ff409ede701b7f16b7b2ccbf19e9ea1/datacoco_core-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bb6bc62fc54b9dbc5904812e755510e6", "sha256": "ba14eabce5881a2b40b9938d9ce787713f69a87c5bc58342e819e7a22820ada3"}, "downloads": -1, "filename": "datacoco_core-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bb6bc62fc54b9dbc5904812e755510e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4282, "upload_time": "2020-01-15T13:24:29", "upload_time_iso_8601": "2020-01-15T13:24:29.715356Z", "url": "https://files.pythonhosted.org/packages/d0/a9/be9b1fb6ff8b5361bc5b85f1e5ce61db9286a3a7c7cd33b0504833b7e12e/datacoco_core-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb6bc62fc54b9dbc5904812e755510e6", "sha256": "ba14eabce5881a2b40b9938d9ce787713f69a87c5bc58342e819e7a22820ada3"}, "downloads": -1, "filename": "datacoco_core-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bb6bc62fc54b9dbc5904812e755510e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4282, "upload_time": "2020-01-15T13:24:29", "upload_time_iso_8601": "2020-01-15T13:24:29.715356Z", "url": "https://files.pythonhosted.org/packages/d0/a9/be9b1fb6ff8b5361bc5b85f1e5ce61db9286a3a7c7cd33b0504833b7e12e/datacoco_core-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:27 2020"}