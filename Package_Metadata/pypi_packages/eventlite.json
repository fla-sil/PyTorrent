{"info": {"author": "Samuele Santi", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4"], "description": "Eventlite\n#########\n\nLight \"events\" for Python functions.\n\n.. image:: https://pypip.in/version/eventlite/badge.svg?text=version\n    :target: https://pypi.python.org/pypi/eventlite/\n    :alt: Latest PyPI version\n\n.. image:: https://pypip.in/download/eventlite/badge.svg?period=month\n    :target: https://pypi.python.org/pypi/eventlite/\n    :alt: Number of PyPI downloads\n\n.. image:: https://pypip.in/py_versions/eventlite/badge.svg\n    :target: https://pypi.python.org/pypi/eventlite/\n    :alt: Supported Python versions\n\n.. image:: https://pypip.in/status/eventlite/badge.svg\n    :target: https://pypi.python.org/pypi/eventlite/\n    :alt: Development Status\n\n.. image:: https://pypip.in/license/eventlite/badge.svg\n    :target: https://pypi.python.org/pypi/eventlite/\n    :alt: License\n\n\nAbstract\n========\n\nThe purpose of this library is to provide an \"abstract\" way for\nfunctions to \"report\" events, in a way similar to how a logging system\noperates.\n\nSome example applications:\n\n- A logging system: ``emit('log', 'My message', level='info')``\n- Reporting progress on some running operation ``emit('progress', current=20, total=100)``\n\nNote that the event structure is not imposed in any way; in fact, any\ncombination of arguments/keywords can be used, proven that the handler\nfunction is able to handle it.\n\n\nExample usage\n=============\n\n.. code-block:: python\n\n    import eventlite\n\n    def myfunction(foo):\n        eventlite.emit(foo)\n\n    def handler(foo):\n        print('You said: {0}'.format('Hello'))\n\n    with eventlite.handler(handler):\n        myfunction('Hello')\n\n\nAPI Documentation\n=================\n\nThe library provides two functions:\n\n- ``eventlite.emit(*a, **kw)`` \"emits\" an \"event\" (represented by a\n  variable number of arguments / keywords).\n\n- ``eventlite.handler(function)`` returns a context manager that makes\n  events to be dispatched to a certain function, while the context is\n  active.\n\n\nSo, in the example above, when ``eventlite.emit()`` is called with one\nargument, ``handler()`` will be called passing the single argument to\nit.\n\n\nInternals\n=========\n\nAll the magic is implemented using a ``LocalStack`` (borrowed from\nwerkzeug) which keeps a stack of handlers to be called, for the local\nproxy. The ``emit()`` functon simply looks for an handler in the stack\nto which to dispatch the event.\n\n**Note:** by default only the handler for the innermost context\nmanager is called; this might or might not be the desired behavior;\nsome way to change this will be added in the future.\n\n\nLinks\n=====\n\n- PyPI page: https://pypi.python.org/pypi/eventlite\n- Source code: https://github.com/rshk/eventlite\n\n\nHistory\n#######\n\nv0.1a\n=====\n\n- Initial version, with handling of simple events through a\n  context-manager dispatching to \"contexts\" in a thread-local stack.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "PACKAGE_URL", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "eventlite", "package_url": "https://pypi.org/project/eventlite/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/eventlite/", "project_urls": {"Download": "UNKNOWN", "Homepage": "PACKAGE_URL"}, "release_url": "https://pypi.org/project/eventlite/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"eventlite\">\n<h2>Eventlite</h2>\n<p>Light \u201cevents\u201d for Python functions.</p>\n<a href=\"https://pypi.python.org/pypi/eventlite/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52fc83e3472196c655be66159216ac9ce0ccd2f0/68747470733a2f2f70797069702e696e2f76657273696f6e2f6576656e746c6974652f62616467652e7376673f746578743d76657273696f6e\"></a>\n<a href=\"https://pypi.python.org/pypi/eventlite/\" rel=\"nofollow\"><img alt=\"Number of PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98b5b5e1f09248a14723fd612f97ccd442e2c701/68747470733a2f2f70797069702e696e2f646f776e6c6f61642f6576656e746c6974652f62616467652e7376673f706572696f643d6d6f6e7468\"></a>\n<a href=\"https://pypi.python.org/pypi/eventlite/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d0b3377cdb45b6e4522e9a335d1926f76fa3d1b/68747470733a2f2f70797069702e696e2f70795f76657273696f6e732f6576656e746c6974652f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/eventlite/\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/379c5fc9d185b4a5ba02b349dd4778241ffb5577/68747470733a2f2f70797069702e696e2f7374617475732f6576656e746c6974652f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/eventlite/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b72980aaabe9e27fc9471929f04269273c5f137e/68747470733a2f2f70797069702e696e2f6c6963656e73652f6576656e746c6974652f62616467652e737667\"></a>\n<div id=\"abstract\">\n<h3>Abstract</h3>\n<p>The purpose of this library is to provide an \u201cabstract\u201d way for\nfunctions to \u201creport\u201d events, in a way similar to how a logging system\noperates.</p>\n<p>Some example applications:</p>\n<ul>\n<li>A logging system: <tt><span class=\"pre\">emit('log',</span> 'My message', <span class=\"pre\">level='info')</span></tt></li>\n<li>Reporting progress on some running operation <tt><span class=\"pre\">emit('progress',</span> current=20, total=100)</tt></li>\n</ul>\n<p>Note that the event structure is not imposed in any way; in fact, any\ncombination of arguments/keywords can be used, proven that the handler\nfunction is able to handle it.</p>\n</div>\n<div id=\"example-usage\">\n<h3>Example usage</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">eventlite</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">myfunction</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"n\">eventlite</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'You said: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">'Hello'</span><span class=\"p\">))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">eventlite</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">):</span>\n    <span class=\"n\">myfunction</span><span class=\"p\">(</span><span class=\"s1\">'Hello'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"api-documentation\">\n<h3>API Documentation</h3>\n<p>The library provides two functions:</p>\n<ul>\n<li><tt><span class=\"pre\">eventlite.emit(*a,</span> **kw)</tt> \u201cemits\u201d an \u201cevent\u201d (represented by a\nvariable number of arguments / keywords).</li>\n<li><tt>eventlite.handler(function)</tt> returns a context manager that makes\nevents to be dispatched to a certain function, while the context is\nactive.</li>\n</ul>\n<p>So, in the example above, when <tt>eventlite.emit()</tt> is called with one\nargument, <tt>handler()</tt> will be called passing the single argument to\nit.</p>\n</div>\n<div id=\"internals\">\n<h3>Internals</h3>\n<p>All the magic is implemented using a <tt>LocalStack</tt> (borrowed from\nwerkzeug) which keeps a stack of handlers to be called, for the local\nproxy. The <tt>emit()</tt> functon simply looks for an handler in the stack\nto which to dispatch the event.</p>\n<p><strong>Note:</strong> by default only the handler for the innermost context\nmanager is called; this might or might not be the desired behavior;\nsome way to change this will be added in the future.</p>\n</div>\n<div id=\"links\">\n<h3>Links</h3>\n<ul>\n<li>PyPI page: <a href=\"https://pypi.python.org/pypi/eventlite\" rel=\"nofollow\">https://pypi.python.org/pypi/eventlite</a></li>\n<li>Source code: <a href=\"https://github.com/rshk/eventlite\" rel=\"nofollow\">https://github.com/rshk/eventlite</a></li>\n</ul>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"v0-1a\"><span class=\"section-subtitle\">v0.1a</span></h2>\n<ul>\n<li>Initial version, with handling of simple events through a\ncontext-manager dispatching to \u201ccontexts\u201d in a thread-local stack.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1364283, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "3507a21dba8c601cc083699410fc71b3", "sha256": "438aebdc5833a8e90c69f95f346b46ee700d847a2e69d28f00f7f2825b08e417"}, "downloads": -1, "filename": "eventlite-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3507a21dba8c601cc083699410fc71b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7161, "upload_time": "2014-12-29T21:15:45", "upload_time_iso_8601": "2014-12-29T21:15:45.699639Z", "url": "https://files.pythonhosted.org/packages/96/c8/9ffe696b11a07cbc6b466499dabd19b36d90813ef250fe56c6055eae157e/eventlite-0.1.1.tar.gz", "yanked": false}], "0.1a": [{"comment_text": "", "digests": {"md5": "a46aebe9b7bef2d42f042170796a268f", "sha256": "ce818cbffca6c9f36c10303dee2f13bf6947cb77f477ffce0fd7278978b4daf8"}, "downloads": -1, "filename": "eventlite-0.1a.tar.gz", "has_sig": false, "md5_digest": "a46aebe9b7bef2d42f042170796a268f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6002, "upload_time": "2014-11-04T14:32:44", "upload_time_iso_8601": "2014-11-04T14:32:44.511745Z", "url": "https://files.pythonhosted.org/packages/8a/d5/251435bdc92c876196b25beafa488a5e52b3e58b1ae8bdf0a43e85f422c7/eventlite-0.1a.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3507a21dba8c601cc083699410fc71b3", "sha256": "438aebdc5833a8e90c69f95f346b46ee700d847a2e69d28f00f7f2825b08e417"}, "downloads": -1, "filename": "eventlite-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3507a21dba8c601cc083699410fc71b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7161, "upload_time": "2014-12-29T21:15:45", "upload_time_iso_8601": "2014-12-29T21:15:45.699639Z", "url": "https://files.pythonhosted.org/packages/96/c8/9ffe696b11a07cbc6b466499dabd19b36d90813ef250fe56c6055eae157e/eventlite-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:13 2020"}