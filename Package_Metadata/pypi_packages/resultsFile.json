{"info": {"author": "Anthony Scemama", "author_email": "scemama@irsamc.ups-tlse.fr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# resultsFile\nPython interface to read output files of quantum chemistry programs\n\nTo add a module to read a new kind of output file, just add a file \nin the `Modules` directory.\n\n\n\n# Using the library\n\nExample (`resultsFile` is supposed to be in your `sys.path`):\n\n``` Python\nimport resultsFile \n\nfile = resultsFile.getFile(\"g09_output.log\")\nprint('recognized as', str(file).split('.')[-1].split()[0])\nprint(file.mo_sets)\n\n```\n\n## Constraints\n\n### Gaussian09\n\n* `GFPRINT`  : Needed to read the AO basis set\n* `pop=Full` : Needed to read all the MOs\n* `#p CAS(SlaterDet)` : CAS-SCI CI coefficients\n\nWhen doing a CAS with Gaussian, first do the Hartree-Fock calculation saving the checkpoint\nfile and then do the CAS in a second calculation.\n\n\n### Molpro\n\n* `print, basis;` :  Needed to read the AO basis set\n* `gprint,orbital;` : Needed to read the MOs\n* `gprint,civector; gthresh,printci=0.;` : Needed to read the CI coefficients\n* `orbprint` : Ensures all the MOs are printed\n\nAn RHF calculation is mandatory before any MCSCF calculation, since some\ninformation is printed only the RHF section. Be sure to print *all* molecular\norbitals using the `orbprint` keyword, and to use the same spin multiplicity\nand charge between the RHF and the CAS.\n\n\n### GAMESS-US\n\nFor MCSCF calculations, first compute the MCSCF single-point wave function with\nthe GUGA algorithm. Then, put the the MCSCF orbitals (of the `.dat` file) in\nthe GAMESS input file, and run a single-point GUGA CI calculation with the\nfollowing keywords:\n\n* `PRTTOL=0.0001` in the `$GUGDIA` group to use a threshold of 1.E-4 on the CI coefficients\n* `NPRT=2` in the `$CIDRT` group to print the CSF expansions in terms of Slater determinants\n* `PRTMO=.T.` in the `$GUESS` group to print the molecular orbitals\n\n# Debugging\n\nAny module can be run as an stand-alone executable. For example:\n\n```\n$ resultsFile/Modules/gamessFile.py\n\n    resultsFile version 1.0, Copyright (C) 2007 Anthony SCEMAMA\n    resultsFile comes with ABSOLUTELY NO WARRANTY; for details see the\n    gpl-license file.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; for details see the gpl-license file.\n\nUsage:\n------\n\nresultsFile/Modules/gamessFile.py [options] file\n\nOptions:\n--------\n\n  --date                      :  When the calculation was performed.\n  --version                   :  Version of the code generating the file.\n  --machine                   :  Machine where the calculation was run.\n  --memory                    :  Requested memory for the calculation.\n  --disk                      :  Requested disk space for the calculation.\n  --cpu_time                  :  CPU time.\n  --author                    :  Who ran the calculation.\n  --title                     :  Title of the run.\n  --units                     :  Units for the geometry (au or angstroms).\n  --methods                   :  List of calculation methods.\n  --options                   :  Options given in the input file.\n  --spin_restrict             :  Open-shell or closed-shell calculations.\n  --conv_threshs              :  List of convergence thresholds.\n  --energies                  :  List of energies.\n  --one_e_energies            :  List of one electron energies.\n  --two_e_energies            :  List of two electron energies.\n  --ee_pot_energies           :  List of electron-electron potential energies.\n  --Ne_pot_energies           :  List of nucleus-electron potential energies.\n  --pot_energies              :  List of potential energies.\n  --kin_energies              :  List of kinetic energies.\n  --virials                   :  Virial ratios.\n  --point_group               :  Symmetry used.\n  --num_elec                  :  Number of electrons.\n  --charge                    :  Charge of the system.\n  --multiplicity              :  Spin multiplicity of the system.\n  --nuclear_energy            :  Repulsion of the nuclei.\n  --dipole                    :  Dipole moment\n  --geometry                  :  Atom types and coordinates.\n  --basis                     :  Basis set definition\n  --mo_sets                   :  List of molecular orbitals\n  --mo_types                  :  Types of molecular orbitals (canonical, natural,...)\n  --mulliken_mo               :  Mulliken atomic population in each MO.\n  --mulliken_ao               :  Mulliken atomic population in each AO.\n  --mulliken_atom             :  Mulliken atomic population.\n  --lowdin_ao                 :  Lowdin atomic population in each AO.\n  --mulliken_atom             :  Mulliken atomic population.\n  --lowdin_atom               :  Lowdin atomic population.\n  --two_e_int_ao              :  Two electron integrals in AO basis\n  --determinants              :  List of Determinants\n  --num_alpha                 :  Number of Alpha electrons.\n  --num_beta                  :  Number of Beta electrons.\n  --closed_mos                :  Closed shell molecular orbitals\n  --active_mos                :  Active molecular orbitals\n  --virtual_mos               :  Virtual molecular orbitals\n  --determinants_mo_type      :  MO type of the determinants\n  --det_coefficients          :  Coefficients of the determinants\n  --csf_mo_type               :  MO type of the determinants\n  --csf_coefficients          :  Coefficients of the CSFs\n  --symmetries                :  Irreducible representations\n  --occ_num                   :  Occupation numbers\n  --csf                       :  List of Configuration State Functions\n  --num_states                :  Number of electronic states\n  --two_e_int_ao_filename     :  \n  --one_e_int_ao_filename     :  \n  --atom_to_ao_range          :  \n  --gradient_energy           :  Gradient of the Energy wrt nucl coord.\n  --text                      :  \n  --uncontracted_basis        :  \n  --uncontracted_mo_sets      :  \n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://gitlab.com/scemama/resultsFile/-/archive/v2.0/resultsFile-v2.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/scemama/resultsFile", "keywords": "quantum chemistry,GAMESS,Gaussian,Molpro", "license": "", "maintainer": "", "maintainer_email": "", "name": "resultsFile", "package_url": "https://pypi.org/project/resultsFile/", "platform": "", "project_url": "https://pypi.org/project/resultsFile/", "project_urls": {"Download": "https://gitlab.com/scemama/resultsFile/-/archive/v2.0/resultsFile-v2.0.tar.gz", "Homepage": "https://gitlab.com/scemama/resultsFile"}, "release_url": "https://pypi.org/project/resultsFile/2.0/", "requires_dist": null, "requires_python": "", "summary": "Module for reading output files of quantum chemistry codes.", "version": "2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>resultsFile</h1>\n<p>Python interface to read output files of quantum chemistry programs</p>\n<p>To add a module to read a new kind of output file, just add a file\nin the <code>Modules</code> directory.</p>\n<h1>Using the library</h1>\n<p>Example (<code>resultsFile</code> is supposed to be in your <code>sys.path</code>):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">resultsFile</span> \n\n<span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">resultsFile</span><span class=\"o\">.</span><span class=\"n\">getFile</span><span class=\"p\">(</span><span class=\"s2\">\"g09_output.log\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'recognized as'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">mo_sets</span><span class=\"p\">)</span>\n</pre>\n<h2>Constraints</h2>\n<h3>Gaussian09</h3>\n<ul>\n<li><code>GFPRINT</code>  : Needed to read the AO basis set</li>\n<li><code>pop=Full</code> : Needed to read all the MOs</li>\n<li><code>#p CAS(SlaterDet)</code> : CAS-SCI CI coefficients</li>\n</ul>\n<p>When doing a CAS with Gaussian, first do the Hartree-Fock calculation saving the checkpoint\nfile and then do the CAS in a second calculation.</p>\n<h3>Molpro</h3>\n<ul>\n<li><code>print, basis;</code> :  Needed to read the AO basis set</li>\n<li><code>gprint,orbital;</code> : Needed to read the MOs</li>\n<li><code>gprint,civector; gthresh,printci=0.;</code> : Needed to read the CI coefficients</li>\n<li><code>orbprint</code> : Ensures all the MOs are printed</li>\n</ul>\n<p>An RHF calculation is mandatory before any MCSCF calculation, since some\ninformation is printed only the RHF section. Be sure to print <em>all</em> molecular\norbitals using the <code>orbprint</code> keyword, and to use the same spin multiplicity\nand charge between the RHF and the CAS.</p>\n<h3>GAMESS-US</h3>\n<p>For MCSCF calculations, first compute the MCSCF single-point wave function with\nthe GUGA algorithm. Then, put the the MCSCF orbitals (of the <code>.dat</code> file) in\nthe GAMESS input file, and run a single-point GUGA CI calculation with the\nfollowing keywords:</p>\n<ul>\n<li><code>PRTTOL=0.0001</code> in the <code>$GUGDIA</code> group to use a threshold of 1.E-4 on the CI coefficients</li>\n<li><code>NPRT=2</code> in the <code>$CIDRT</code> group to print the CSF expansions in terms of Slater determinants</li>\n<li><code>PRTMO=.T.</code> in the <code>$GUESS</code> group to print the molecular orbitals</li>\n</ul>\n<h1>Debugging</h1>\n<p>Any module can be run as an stand-alone executable. For example:</p>\n<pre><code>$ resultsFile/Modules/gamessFile.py\n\n    resultsFile version 1.0, Copyright (C) 2007 Anthony SCEMAMA\n    resultsFile comes with ABSOLUTELY NO WARRANTY; for details see the\n    gpl-license file.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; for details see the gpl-license file.\n\nUsage:\n------\n\nresultsFile/Modules/gamessFile.py [options] file\n\nOptions:\n--------\n\n  --date                      :  When the calculation was performed.\n  --version                   :  Version of the code generating the file.\n  --machine                   :  Machine where the calculation was run.\n  --memory                    :  Requested memory for the calculation.\n  --disk                      :  Requested disk space for the calculation.\n  --cpu_time                  :  CPU time.\n  --author                    :  Who ran the calculation.\n  --title                     :  Title of the run.\n  --units                     :  Units for the geometry (au or angstroms).\n  --methods                   :  List of calculation methods.\n  --options                   :  Options given in the input file.\n  --spin_restrict             :  Open-shell or closed-shell calculations.\n  --conv_threshs              :  List of convergence thresholds.\n  --energies                  :  List of energies.\n  --one_e_energies            :  List of one electron energies.\n  --two_e_energies            :  List of two electron energies.\n  --ee_pot_energies           :  List of electron-electron potential energies.\n  --Ne_pot_energies           :  List of nucleus-electron potential energies.\n  --pot_energies              :  List of potential energies.\n  --kin_energies              :  List of kinetic energies.\n  --virials                   :  Virial ratios.\n  --point_group               :  Symmetry used.\n  --num_elec                  :  Number of electrons.\n  --charge                    :  Charge of the system.\n  --multiplicity              :  Spin multiplicity of the system.\n  --nuclear_energy            :  Repulsion of the nuclei.\n  --dipole                    :  Dipole moment\n  --geometry                  :  Atom types and coordinates.\n  --basis                     :  Basis set definition\n  --mo_sets                   :  List of molecular orbitals\n  --mo_types                  :  Types of molecular orbitals (canonical, natural,...)\n  --mulliken_mo               :  Mulliken atomic population in each MO.\n  --mulliken_ao               :  Mulliken atomic population in each AO.\n  --mulliken_atom             :  Mulliken atomic population.\n  --lowdin_ao                 :  Lowdin atomic population in each AO.\n  --mulliken_atom             :  Mulliken atomic population.\n  --lowdin_atom               :  Lowdin atomic population.\n  --two_e_int_ao              :  Two electron integrals in AO basis\n  --determinants              :  List of Determinants\n  --num_alpha                 :  Number of Alpha electrons.\n  --num_beta                  :  Number of Beta electrons.\n  --closed_mos                :  Closed shell molecular orbitals\n  --active_mos                :  Active molecular orbitals\n  --virtual_mos               :  Virtual molecular orbitals\n  --determinants_mo_type      :  MO type of the determinants\n  --det_coefficients          :  Coefficients of the determinants\n  --csf_mo_type               :  MO type of the determinants\n  --csf_coefficients          :  Coefficients of the CSFs\n  --symmetries                :  Irreducible representations\n  --occ_num                   :  Occupation numbers\n  --csf                       :  List of Configuration State Functions\n  --num_states                :  Number of electronic states\n  --two_e_int_ao_filename     :  \n  --one_e_int_ao_filename     :  \n  --atom_to_ao_range          :  \n  --gradient_energy           :  Gradient of the Energy wrt nucl coord.\n  --text                      :  \n  --uncontracted_basis        :  \n  --uncontracted_mo_sets      :  \n\n</code></pre>\n\n          </div>"}, "last_serial": 6661830, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "47808aef45e31704357b01b4271a52ce", "sha256": "c035e5ab9fb199250ca380b93b72152f846c3b41b578059591e421b580db8b53"}, "downloads": -1, "filename": "resultsFile-1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "47808aef45e31704357b01b4271a52ce", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 69120, "upload_time": "2020-02-19T16:05:54", "upload_time_iso_8601": "2020-02-19T16:05:54.319880Z", "url": "https://files.pythonhosted.org/packages/95/3b/ca573e6900bd176437233e020dc1bed9eabf623a510a219765dfbe5bb2b4/resultsFile-1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bebcd06f3516bffb16caee5aed33c807", "sha256": "27bd7ff9eb84b181c8cea00fdc20780204e84ada33482ae4cefc020cc8f28c58"}, "downloads": -1, "filename": "resultsFile-1.0.tar.gz", "has_sig": false, "md5_digest": "bebcd06f3516bffb16caee5aed33c807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45566, "upload_time": "2020-02-19T16:05:57", "upload_time_iso_8601": "2020-02-19T16:05:57.121745Z", "url": "https://files.pythonhosted.org/packages/c0/b2/7873466f9ffdfcf46fef150a479a59913cdf225e856edb40699c62ee4c0b/resultsFile-1.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "e659858fe964aeb72953aaa3bd8eff6f", "sha256": "4a560e17e972088865e9f9717726cf4fc831135b94ad576ed2a472332e6281e4"}, "downloads": -1, "filename": "resultsFile-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e659858fe964aeb72953aaa3bd8eff6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 67752, "upload_time": "2020-02-19T16:13:43", "upload_time_iso_8601": "2020-02-19T16:13:43.652516Z", "url": "https://files.pythonhosted.org/packages/ff/66/1a98fa07dd9c3cebc94866e302bf16f7b0a316709ae36b2e809577cbc354/resultsFile-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1efe645861d5127a84d2ede36011e39e", "sha256": "fe0e304ac0a6042b975affb5cb7806db6bdbfb4ed52c8a737c9ba0b511b488ac"}, "downloads": -1, "filename": "resultsFile-2.0.tar.gz", "has_sig": false, "md5_digest": "1efe645861d5127a84d2ede36011e39e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47213, "upload_time": "2020-02-19T16:13:46", "upload_time_iso_8601": "2020-02-19T16:13:46.812223Z", "url": "https://files.pythonhosted.org/packages/e0/9b/390919f8a192935ed2dd7749426a435dc134e04424a2fbfb7ccfef657d7f/resultsFile-2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e659858fe964aeb72953aaa3bd8eff6f", "sha256": "4a560e17e972088865e9f9717726cf4fc831135b94ad576ed2a472332e6281e4"}, "downloads": -1, "filename": "resultsFile-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e659858fe964aeb72953aaa3bd8eff6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 67752, "upload_time": "2020-02-19T16:13:43", "upload_time_iso_8601": "2020-02-19T16:13:43.652516Z", "url": "https://files.pythonhosted.org/packages/ff/66/1a98fa07dd9c3cebc94866e302bf16f7b0a316709ae36b2e809577cbc354/resultsFile-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1efe645861d5127a84d2ede36011e39e", "sha256": "fe0e304ac0a6042b975affb5cb7806db6bdbfb4ed52c8a737c9ba0b511b488ac"}, "downloads": -1, "filename": "resultsFile-2.0.tar.gz", "has_sig": false, "md5_digest": "1efe645861d5127a84d2ede36011e39e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47213, "upload_time": "2020-02-19T16:13:46", "upload_time_iso_8601": "2020-02-19T16:13:46.812223Z", "url": "https://files.pythonhosted.org/packages/e0/9b/390919f8a192935ed2dd7749426a435dc134e04424a2fbfb7ccfef657d7f/resultsFile-2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:28 2020"}