{"info": {"author": "Rafa\u0142 Jusiak", "author_email": "kontakt@rafaljusiak.pl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# python-env-loader\n\n\nReads the variables from `.env` files in similar way that is used in \n[React.js](https://create-react-app.dev/docs/adding-custom-environment-variables/#what-other-env-files-can-be-used) \nand adds them to environment variables, automatically guessing and parsing to correct types in \nPython. It is great for managing app settings during development, tests and in production \nwithout writing additional configuration, and to hold settings separated by \nenvironment type clearly in a one place. \n\n\n## Usage\n\nCall `load_env` on the application start, and it will load environment variables from a \ncertain set of `.env` files in the selected directory and return and `EnvFile` object.\nAfter that, you can get values by using `get` method of `EnvFile` object, or by reading it\ndirectly from the environment variables (by using `os.environ`).\n\nExample `.env` file looks like this:\n\n```shell script\nSECRET_KEY=test-secret-key.123\nEXTERNAL_API_URL=api.example.com\nEXTERNAL_API_KEY=this-is-external-api-key\nDEBUG=true\nALLOWED_HOSTS=127.0.0.1:8000,0.0.0.0:8000,localhost:8000\n```\n\n## Getting started\n\n### Installation\n\nInstall the latest version with:\n\n```shell script\npip install -U python-env-loader\n```\n\n\n### First steps\nAssuming you have created the `.env` and `.env.local` files inside your project root directory:\n\n    .\n    \u251c\u2500\u2500 .env\n    \u2514\u2500\u2500 .env.local\n\nAnd they have the following content:\n```shell script \n# .env\nDEBUG=false  # maps to False in python\nALLOWED_HOSTS=,  # maps to empty list []\n```\n\n```shell script \n# .env.local\nDEBUG=true  # maps to True in python\nALLOWED_HOSTS=127.0.0.1:8000,0.0.0.0:8000,localhost:8000  # maps to list [127.0.0.1:8000, 0.0.0.0:8000, localhost:8000]\n```\n\nAdd the following code to your settings module - for example `settings.py` in Django:\n\n```python\n# settings.py\nfrom env_loader import load_env\nenv = load_env()  # if env files are in your root directory of the project\n```\n\nor:\n```python\n# settings.py\nfrom env_loader import load_env\nenv = load_env(\"/app\")  # if your env file is stored in /app directory\n```\n\nParsed key/value pairs from the `.env` and `.env.local` files are now accessible in `env` object:\n```python\n# settings.py\nenv.get(\"DEBUG\")  # returns True, because .env.local file has higher priority\nenv.get(\"IS_TEST_ENV\", False)  # returns False, because this key is not present in any env file\n```\n\nor you can use them as system environment variable and they can be conveniently accessed \nvia `os.getenv()`, but then every value is received as a string:\n\n```python\n# settings.py\nimport os\nDEBUG = os.getenv(\"DEBUG\")  # returns \"true\" AS A STRING\n```\n\n### Automatic parsing\n`python-env-loader` automatically guesses the Python type of the environment variable. If a variable consists \nonly of digits, it assumes that it's an integer. If a value consists only of a digits and has a one dot, then\nit's treated as a float.\n\nMore custom parsing:\n\n|Python value|.env value|\n|------------|----------|\n|True | true, True, y, yes |\n|False | false, False, n, no |\n|None | null, None |\n\nEmpty string is mapped to `None`.\n\nYou can disable automatic parsing by passing `auto_parse=False` to `load_env` function:\n\n```python\nfrom env_loader import load_env, EnvTypes\nenv = load_env(auto_parse=False)\n```\n\n### Switching between setups\nWhen you're loading your env settings, you can switch between 4 of a different setups of them: \n`default`, `development`, `production`  and `test`. By default, `default` is used, but you can\nselect different setup by passing a value to `env_type` argument of `load_env` function:\n\n```python\nfrom env_loader import load_env, EnvTypes\nenv = load_env(env_type=EnvTypes.DEVELOPMENT_ENV)\n``` \n\n### Files hierarchy \n\nFor each setup, files on the left have more priority than files on the right:\n\n- default: `.env.local`, `.env`\n- development: `.env.development.local`, `.env.development`, `.env.local`, `.env`\n- production: `.env.production.local`, `.env.production`, `.env.local`, `.env`\n- test: `.env.test.local`, `.env.test`, `.env` (note `.env.local` is missing)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rafaljusiak/python-env-loader", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-env-loader", "package_url": "https://pypi.org/project/python-env-loader/", "platform": "", "project_url": "https://pypi.org/project/python-env-loader/", "project_urls": {"Homepage": "https://github.com/rafaljusiak/python-env-loader"}, "release_url": "https://pypi.org/project/python-env-loader/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Reads the variables from .env files and adds them to environment, also automatically guesses and parses to correct types in Python.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-env-loader</h1>\n<p>Reads the variables from <code>.env</code> files in similar way that is used in\n<a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/#what-other-env-files-can-be-used\" rel=\"nofollow\">React.js</a>\nand adds them to environment variables, automatically guessing and parsing to correct types in\nPython. It is great for managing app settings during development, tests and in production\nwithout writing additional configuration, and to hold settings separated by\nenvironment type clearly in a one place.</p>\n<h2>Usage</h2>\n<p>Call <code>load_env</code> on the application start, and it will load environment variables from a\ncertain set of <code>.env</code> files in the selected directory and return and <code>EnvFile</code> object.\nAfter that, you can get values by using <code>get</code> method of <code>EnvFile</code> object, or by reading it\ndirectly from the environment variables (by using <code>os.environ</code>).</p>\n<p>Example <code>.env</code> file looks like this:</p>\n<pre><span class=\"nv\">SECRET_KEY</span><span class=\"o\">=</span>test-secret-key.123\n<span class=\"nv\">EXTERNAL_API_URL</span><span class=\"o\">=</span>api.example.com\n<span class=\"nv\">EXTERNAL_API_KEY</span><span class=\"o\">=</span>this-is-external-api-key\n<span class=\"nv\">DEBUG</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nv\">ALLOWED_HOSTS</span><span class=\"o\">=</span><span class=\"m\">127</span>.0.0.1:8000,0.0.0.0:8000,localhost:8000\n</pre>\n<h2>Getting started</h2>\n<h3>Installation</h3>\n<p>Install the latest version with:</p>\n<pre>pip install -U python-env-loader\n</pre>\n<h3>First steps</h3>\n<p>Assuming you have created the <code>.env</code> and <code>.env.local</code> files inside your project root directory:</p>\n<pre><code>.\n\u251c\u2500\u2500 .env\n\u2514\u2500\u2500 .env.local\n</code></pre>\n<p>And they have the following content:</p>\n<pre><span class=\"c1\"># .env</span>\n<span class=\"nv\">DEBUG</span><span class=\"o\">=</span><span class=\"nb\">false</span>  <span class=\"c1\"># maps to False in python</span>\n<span class=\"nv\">ALLOWED_HOSTS</span><span class=\"o\">=</span>,  <span class=\"c1\"># maps to empty list []</span>\n</pre>\n<pre><span class=\"c1\"># .env.local</span>\n<span class=\"nv\">DEBUG</span><span class=\"o\">=</span><span class=\"nb\">true</span>  <span class=\"c1\"># maps to True in python</span>\n<span class=\"nv\">ALLOWED_HOSTS</span><span class=\"o\">=</span><span class=\"m\">127</span>.0.0.1:8000,0.0.0.0:8000,localhost:8000  <span class=\"c1\"># maps to list [127.0.0.1:8000, 0.0.0.0:8000, localhost:8000]</span>\n</pre>\n<p>Add the following code to your settings module - for example <code>settings.py</code> in Django:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">env_loader</span> <span class=\"kn\">import</span> <span class=\"n\">load_env</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">load_env</span><span class=\"p\">()</span>  <span class=\"c1\"># if env files are in your root directory of the project</span>\n</pre>\n<p>or:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">env_loader</span> <span class=\"kn\">import</span> <span class=\"n\">load_env</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">load_env</span><span class=\"p\">(</span><span class=\"s2\">\"/app\"</span><span class=\"p\">)</span>  <span class=\"c1\"># if your env file is stored in /app directory</span>\n</pre>\n<p>Parsed key/value pairs from the <code>.env</code> and <code>.env.local</code> files are now accessible in <code>env</code> object:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DEBUG\"</span><span class=\"p\">)</span>  <span class=\"c1\"># returns True, because .env.local file has higher priority</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"IS_TEST_ENV\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># returns False, because this key is not present in any env file</span>\n</pre>\n<p>or you can use them as system environment variable and they can be conveniently accessed\nvia <code>os.getenv()</code>, but then every value is received as a string:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DEBUG\"</span><span class=\"p\">)</span>  <span class=\"c1\"># returns \"true\" AS A STRING</span>\n</pre>\n<h3>Automatic parsing</h3>\n<p><code>python-env-loader</code> automatically guesses the Python type of the environment variable. If a variable consists\nonly of digits, it assumes that it's an integer. If a value consists only of a digits and has a one dot, then\nit's treated as a float.</p>\n<p>More custom parsing:</p>\n<table>\n<thead>\n<tr>\n<th>Python value</th>\n<th>.env value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True</td>\n<td>true, True, y, yes</td>\n</tr>\n<tr>\n<td>False</td>\n<td>false, False, n, no</td>\n</tr>\n<tr>\n<td>None</td>\n<td>null, None</td>\n</tr></tbody></table>\n<p>Empty string is mapped to <code>None</code>.</p>\n<p>You can disable automatic parsing by passing <code>auto_parse=False</code> to <code>load_env</code> function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">env_loader</span> <span class=\"kn\">import</span> <span class=\"n\">load_env</span><span class=\"p\">,</span> <span class=\"n\">EnvTypes</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">load_env</span><span class=\"p\">(</span><span class=\"n\">auto_parse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Switching between setups</h3>\n<p>When you're loading your env settings, you can switch between 4 of a different setups of them:\n<code>default</code>, <code>development</code>, <code>production</code>  and <code>test</code>. By default, <code>default</code> is used, but you can\nselect different setup by passing a value to <code>env_type</code> argument of <code>load_env</code> function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">env_loader</span> <span class=\"kn\">import</span> <span class=\"n\">load_env</span><span class=\"p\">,</span> <span class=\"n\">EnvTypes</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">load_env</span><span class=\"p\">(</span><span class=\"n\">env_type</span><span class=\"o\">=</span><span class=\"n\">EnvTypes</span><span class=\"o\">.</span><span class=\"n\">DEVELOPMENT_ENV</span><span class=\"p\">)</span>\n</pre>\n<h3>Files hierarchy</h3>\n<p>For each setup, files on the left have more priority than files on the right:</p>\n<ul>\n<li>default: <code>.env.local</code>, <code>.env</code></li>\n<li>development: <code>.env.development.local</code>, <code>.env.development</code>, <code>.env.local</code>, <code>.env</code></li>\n<li>production: <code>.env.production.local</code>, <code>.env.production</code>, <code>.env.local</code>, <code>.env</code></li>\n<li>test: <code>.env.test.local</code>, <code>.env.test</code>, <code>.env</code> (note <code>.env.local</code> is missing)</li>\n</ul>\n\n          </div>"}, "last_serial": 6530777, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1b152c2c5ac1fd63e03f38e4e0c028a6", "sha256": "869cb3c14f9e4a66b342cba627c598da6ce854c94d2353995a411cb240478290"}, "downloads": -1, "filename": "python_env_loader-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b152c2c5ac1fd63e03f38e4e0c028a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 17635, "upload_time": "2020-01-28T08:16:30", "upload_time_iso_8601": "2020-01-28T08:16:30.200831Z", "url": "https://files.pythonhosted.org/packages/9b/ae/106c9156bb43d8bc4dd7a472ac495ff778b9de9cb22e694e3f5445dc4981/python_env_loader-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d681d1927a5c66e1adaf270e9f934cf5", "sha256": "8b0feb891d9a576c1a3a3747bdc32080a05ee32ee2e8865e97afc069d1afa479"}, "downloads": -1, "filename": "python-env-loader-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d681d1927a5c66e1adaf270e9f934cf5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5422, "upload_time": "2020-01-28T08:16:32", "upload_time_iso_8601": "2020-01-28T08:16:32.356450Z", "url": "https://files.pythonhosted.org/packages/7a/33/0ad104d6e1f0fa0994b1d2b4716888aa0b4971283fe6338a832c29b7f6ed/python-env-loader-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b152c2c5ac1fd63e03f38e4e0c028a6", "sha256": "869cb3c14f9e4a66b342cba627c598da6ce854c94d2353995a411cb240478290"}, "downloads": -1, "filename": "python_env_loader-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b152c2c5ac1fd63e03f38e4e0c028a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 17635, "upload_time": "2020-01-28T08:16:30", "upload_time_iso_8601": "2020-01-28T08:16:30.200831Z", "url": "https://files.pythonhosted.org/packages/9b/ae/106c9156bb43d8bc4dd7a472ac495ff778b9de9cb22e694e3f5445dc4981/python_env_loader-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d681d1927a5c66e1adaf270e9f934cf5", "sha256": "8b0feb891d9a576c1a3a3747bdc32080a05ee32ee2e8865e97afc069d1afa479"}, "downloads": -1, "filename": "python-env-loader-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d681d1927a5c66e1adaf270e9f934cf5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5422, "upload_time": "2020-01-28T08:16:32", "upload_time_iso_8601": "2020-01-28T08:16:32.356450Z", "url": "https://files.pythonhosted.org/packages/7a/33/0ad104d6e1f0fa0994b1d2b4716888aa0b4971283fe6338a832c29b7f6ed/python-env-loader-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:48 2020"}