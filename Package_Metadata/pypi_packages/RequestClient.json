{"info": {"author": "Randy Chang", "author_email": "randy@randy-chang.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "##  Request Client \nAn easy-to-use and convenient Python3 library for HTTP REST API request.\nThis library is a wrapper around Python request library.   \n\nCurrently supports Rest API method:\n- Get\n- Post\n- Delete\n\nNOTE: KeepAlive and Connection Pool is ON by default for Rest Client.  As the wrapper uses request session object to initiate request.\n\nFuture improvements:\n- Support Rest Put and Patch\n- Add documentations\n\n## Sponsor\n[logo]: https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Rakuten_Global_Brand_Logo.svg/2880px-Rakuten_Global_Brand_Logo.svg.png\nRakuten USA - CBSP@Rakuten Rewards\n\n## Python3 (Install)  \nRequirements:\n- Python3 (version 3.7 or above)\n- Pip3\n```bash\npip3 install RequestClient\n````\n\n## Usage (Python3)\n```python\nfrom RequestClient.RestRequestClient import RestRequestClient, ResponseError\n#For Rest API Client - transaction in JSON, \n# Content-negotiations and XML format NOT supported\n\nfrom RequestClient.GraphQLClient import GraphQLClient\n#For GraphQL Client\n\nfrom unittest import TestCase\n\nbaseURL = \"https://www.google.com\"    #change this to your own for testing\n\nclient = RestRequestClient(baseUrl=baseURL,sslverify=False,defaultHeaders={\"x-admin\":\"true\"}, defaultAuth={\"username\":\"password\"}, defaultCookies={\"token\":\"123\"}, raiseExceptionOnStatusCode=True)\n# baseUrl = the base URL accompanying every request.  e.g. https://www.google.com is the base URL for https://www.google.com/apis/v3/doc/123\n# sslverify = verify SSL certificate?  if this is true, exception is raised on invalid SSL cert\n# defaultHeaders = the headers accompanying every request\n# defaultAuth = the base64 HTTP basic authorization accompanying every request\n# defaultCookies = the cookies accompanying every request \n# raiseExceptionOnStatusCode = if true, then ResponseError will be raised for 4xx and 5xx response code\n\ntry:\n    response = client.get(\"/apis/v3/doc\")\n    #this will issue GET request to \"https://www.google.com/apis/v3/doc\"\n\n    print(response.content)     #get the dictionary content, parsed from JSON response\n    #content is automatically parsed as Python dictionay if content is JSON\n    #content is string if content isn't a valid JSON\n    #we can check response type by response.type, it can be \"JSON\" or \"RAW\"\n    print(response.status_code) #get the integer status code\n\n\n    response = client.get(\"/store/list\", params={\"id\":\"98\"})\n    # params is the URL parameters being send \n    #e.g. params = {\"x\": 10, \"y\": 5, \"z\": 7} \n    # for https://www.google.com/apis/v3/doc?x=10&y=5&z=7    \n\n    store98 = response.content   \n    TestCase.assertTrue(store98[\"stores\"][\"store\"][0][\"id\"] == 98 , \"GET Test Failed\")\n\n    store45 = client.get(\"/store/45\", additionalHeaders={\"x-token\":\"123\"}, params={\"x\":\"1\"}, cookies={\"session\":\"123\"}, auth={\"username\":\"password\"})\n    # additionalHeaders will be combined with defaultHeaders and send with request\n    # cookies here will be combined with cookie declared in constructor\n    # auth here will replace the default auth in the constructor\n    \n    store45 = store45.object()\n    # .object() exports response content into Python object\n    # NOTE: the difference between response.content and response.object() \n    #       is that response.content is Python Dictionary\n    #       and response.object() is Python Object.\n    # e.g.  \n    #   response = {\"data\": {\"x\":\"1\", \"nest\": {\"y\":\"2\"} } }\n    # \n    # Access Python Dictionary: response,content[\"data\"][\"nest\"][\"y\"]\n    # Access Python Object:  res = response.object()\n    #                        res.data.nest.y\n    # .object() allows for JavaScript style dot access to response payload \n    #\n    # Object is converted from Dictionary.  If response content isn't a valid JSON,\n    #  then calling .object() will raise ResponseConversionError\n    #\n    # WARN: 1 .object() is experimental, use at your own risk.  \n    #       2 .object() will strip non-alphanumeric characters out of property name\n    #          e.g. data[\"@href\"] will become data.href with @ stripped out\n    TestCase.assertTrue(store45.store[0].id == 45, \"Object Conversion test failed\")\n\n    category2 = client.post(\"/category/2\", payload={\"category\": {\"name\":\"Testing123\", \"modifiedBy\":\"Randy\"}})\n    #payload is the POST data to send to endpoint\n\n    print(category2.type)   #will return and print \"JSON\" string\n    TestCase.assertEqual(category2.content[\"category\"][0][\"name\"], \"Testing123\", \"Post Raw Python Dictionary Failed\")\n\n    \n    category5 = client.get(\"/category/5\")\n    category5 = category5.object()\n    TestCase.assertTrue(category5.category[0].status == \"Published\", \"Object Conversion test failed\")\n\nexcept ResponseError as err:\n    print(f\"Oops, something is wrong here: {err}\")\n\n\nprint(\"Yah! All tests pass!\")\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Randy341/RequestClient/archive/0.5.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Randy341/RequestClient", "keywords": "requests,HTTP,wrapper,client,REST", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "RequestClient", "package_url": "https://pypi.org/project/RequestClient/", "platform": "", "project_url": "https://pypi.org/project/RequestClient/", "project_urls": {"Download": "https://github.com/Randy341/RequestClient/archive/0.5.0.tar.gz", "Homepage": "https://github.com/Randy341/RequestClient"}, "release_url": "https://pypi.org/project/RequestClient/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Easy-to-use and convenient request wrapper that saves coding time. For Rest Request", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Request Client</h2>\n<p>An easy-to-use and convenient Python3 library for HTTP REST API request.\nThis library is a wrapper around Python request library.</p>\n<p>Currently supports Rest API method:</p>\n<ul>\n<li>Get</li>\n<li>Post</li>\n<li>Delete</li>\n</ul>\n<p>NOTE: KeepAlive and Connection Pool is ON by default for Rest Client.  As the wrapper uses request session object to initiate request.</p>\n<p>Future improvements:</p>\n<ul>\n<li>Support Rest Put and Patch</li>\n<li>Add documentations</li>\n</ul>\n<h2>Sponsor</h2>\n<p>Rakuten USA - CBSP@Rakuten Rewards</p>\n<h2>Python3 (Install)</h2>\n<p>Requirements:</p>\n<ul>\n<li>Python3 (version 3.7 or above)</li>\n<li>Pip3</li>\n</ul>\n<pre>pip3 install RequestClient\n</pre>\n<h2>Usage (Python3)</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">RequestClient.RestRequestClient</span> <span class=\"kn\">import</span> <span class=\"n\">RestRequestClient</span><span class=\"p\">,</span> <span class=\"n\">ResponseError</span>\n<span class=\"c1\">#For Rest API Client - transaction in JSON, </span>\n<span class=\"c1\"># Content-negotiations and XML format NOT supported</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">RequestClient.GraphQLClient</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLClient</span>\n<span class=\"c1\">#For GraphQL Client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">unittest</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n<span class=\"n\">baseURL</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://www.google.com\"</span>    <span class=\"c1\">#change this to your own for testing</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">RestRequestClient</span><span class=\"p\">(</span><span class=\"n\">baseUrl</span><span class=\"o\">=</span><span class=\"n\">baseURL</span><span class=\"p\">,</span><span class=\"n\">sslverify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">defaultHeaders</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"x-admin\"</span><span class=\"p\">:</span><span class=\"s2\">\"true\"</span><span class=\"p\">},</span> <span class=\"n\">defaultAuth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span><span class=\"s2\">\"password\"</span><span class=\"p\">},</span> <span class=\"n\">defaultCookies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"123\"</span><span class=\"p\">},</span> <span class=\"n\">raiseExceptionOnStatusCode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># baseUrl = the base URL accompanying every request.  e.g. https://www.google.com is the base URL for https://www.google.com/apis/v3/doc/123</span>\n<span class=\"c1\"># sslverify = verify SSL certificate?  if this is true, exception is raised on invalid SSL cert</span>\n<span class=\"c1\"># defaultHeaders = the headers accompanying every request</span>\n<span class=\"c1\"># defaultAuth = the base64 HTTP basic authorization accompanying every request</span>\n<span class=\"c1\"># defaultCookies = the cookies accompanying every request </span>\n<span class=\"c1\"># raiseExceptionOnStatusCode = if true, then ResponseError will be raised for 4xx and 5xx response code</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/apis/v3/doc\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">#this will issue GET request to \"https://www.google.com/apis/v3/doc\"</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>     <span class=\"c1\">#get the dictionary content, parsed from JSON response</span>\n    <span class=\"c1\">#content is automatically parsed as Python dictionay if content is JSON</span>\n    <span class=\"c1\">#content is string if content isn't a valid JSON</span>\n    <span class=\"c1\">#we can check response type by response.type, it can be \"JSON\" or \"RAW\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">)</span> <span class=\"c1\">#get the integer status code</span>\n\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/store/list\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"s2\">\"98\"</span><span class=\"p\">})</span>\n    <span class=\"c1\"># params is the URL parameters being send </span>\n    <span class=\"c1\">#e.g. params = {\"x\": 10, \"y\": 5, \"z\": 7} </span>\n    <span class=\"c1\"># for https://www.google.com/apis/v3/doc?x=10&amp;y=5&amp;z=7    </span>\n\n    <span class=\"n\">store98</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span>   \n    <span class=\"n\">TestCase</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">store98</span><span class=\"p\">[</span><span class=\"s2\">\"stores\"</span><span class=\"p\">][</span><span class=\"s2\">\"store\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">98</span> <span class=\"p\">,</span> <span class=\"s2\">\"GET Test Failed\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">store45</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/store/45\"</span><span class=\"p\">,</span> <span class=\"n\">additionalHeaders</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"x-token\"</span><span class=\"p\">:</span><span class=\"s2\">\"123\"</span><span class=\"p\">},</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">},</span> <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"session\"</span><span class=\"p\">:</span><span class=\"s2\">\"123\"</span><span class=\"p\">},</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span><span class=\"s2\">\"password\"</span><span class=\"p\">})</span>\n    <span class=\"c1\"># additionalHeaders will be combined with defaultHeaders and send with request</span>\n    <span class=\"c1\"># cookies here will be combined with cookie declared in constructor</span>\n    <span class=\"c1\"># auth here will replace the default auth in the constructor</span>\n    \n    <span class=\"n\">store45</span> <span class=\"o\">=</span> <span class=\"n\">store45</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">()</span>\n    <span class=\"c1\"># .object() exports response content into Python object</span>\n    <span class=\"c1\"># NOTE: the difference between response.content and response.object() </span>\n    <span class=\"c1\">#       is that response.content is Python Dictionary</span>\n    <span class=\"c1\">#       and response.object() is Python Object.</span>\n    <span class=\"c1\"># e.g.  </span>\n    <span class=\"c1\">#   response = {\"data\": {\"x\":\"1\", \"nest\": {\"y\":\"2\"} } }</span>\n    <span class=\"c1\"># </span>\n    <span class=\"c1\"># Access Python Dictionary: response,content[\"data\"][\"nest\"][\"y\"]</span>\n    <span class=\"c1\"># Access Python Object:  res = response.object()</span>\n    <span class=\"c1\">#                        res.data.nest.y</span>\n    <span class=\"c1\"># .object() allows for JavaScript style dot access to response payload </span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Object is converted from Dictionary.  If response content isn't a valid JSON,</span>\n    <span class=\"c1\">#  then calling .object() will raise ResponseConversionError</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># WARN: 1 .object() is experimental, use at your own risk.  </span>\n    <span class=\"c1\">#       2 .object() will strip non-alphanumeric characters out of property name</span>\n    <span class=\"c1\">#          e.g. data[\"@href\"] will become data.href with @ stripped out</span>\n    <span class=\"n\">TestCase</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">store45</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"s2\">\"Object Conversion test failed\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">category2</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">\"/category/2\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"category\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"Testing123\"</span><span class=\"p\">,</span> <span class=\"s2\">\"modifiedBy\"</span><span class=\"p\">:</span><span class=\"s2\">\"Randy\"</span><span class=\"p\">}})</span>\n    <span class=\"c1\">#payload is the POST data to send to endpoint</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">category2</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span>   <span class=\"c1\">#will return and print \"JSON\" string</span>\n    <span class=\"n\">TestCase</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">category2</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">[</span><span class=\"s2\">\"category\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">],</span> <span class=\"s2\">\"Testing123\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Post Raw Python Dictionary Failed\"</span><span class=\"p\">)</span>\n\n    \n    <span class=\"n\">category5</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/category/5\"</span><span class=\"p\">)</span>\n    <span class=\"n\">category5</span> <span class=\"o\">=</span> <span class=\"n\">category5</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">()</span>\n    <span class=\"n\">TestCase</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">category5</span><span class=\"o\">.</span><span class=\"n\">category</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s2\">\"Published\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Object Conversion test failed\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">ResponseError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Oops, something is wrong here: </span><span class=\"si\">{</span><span class=\"n\">err</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Yah! All tests pass!\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6313427, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "04b9bb0768cf60994b82183d9ffe64c4", "sha256": "cc12d4193d277648f703a55465258850a87bb3f9a171e20d0dc8f98238c94380"}, "downloads": -1, "filename": "RequestClient-0.1.0.tar.gz", "has_sig": false, "md5_digest": "04b9bb0768cf60994b82183d9ffe64c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1823, "upload_time": "2019-11-06T19:13:15", "upload_time_iso_8601": "2019-11-06T19:13:15.979042Z", "url": "https://files.pythonhosted.org/packages/65/e6/5ba77f9c9343f4568f6c3b387f4c0f700ce9e649d31e5c2e81c6da35c9c3/RequestClient-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "18fdd3c5ab5c4c59357ea0bc1d19ccd3", "sha256": "907ebc6f95433bc05dbd19eba42deb8ee02275692f1818e7bf29b990a29304e3"}, "downloads": -1, "filename": "RequestClient-0.2.0.tar.gz", "has_sig": false, "md5_digest": "18fdd3c5ab5c4c59357ea0bc1d19ccd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5208, "upload_time": "2019-11-08T01:41:28", "upload_time_iso_8601": "2019-11-08T01:41:28.514963Z", "url": "https://files.pythonhosted.org/packages/2d/64/84513cfde904326f977101f3a14705eb0a38131d540817166e8c534a07dc/RequestClient-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1710d7b0e26b894284c33348f89f308a", "sha256": "721d8a81679e5afe1a8088b0b88854cb2033aae527c80512d0a7b090622ddd11"}, "downloads": -1, "filename": "RequestClient-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1710d7b0e26b894284c33348f89f308a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8624, "upload_time": "2019-11-12T23:27:42", "upload_time_iso_8601": "2019-11-12T23:27:42.198210Z", "url": "https://files.pythonhosted.org/packages/bf/a9/01979918e366cc293f5da4b62a124987831217779385f74a5029fd96bffe/RequestClient-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0d590ebace837b1cc35bea9c167cc10b", "sha256": "59daaf19c18ff0711318c707c3aede89636ee104fe5712465b2bcf554585a844"}, "downloads": -1, "filename": "RequestClient-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0d590ebace837b1cc35bea9c167cc10b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8618, "upload_time": "2019-11-12T23:48:32", "upload_time_iso_8601": "2019-11-12T23:48:32.855632Z", "url": "https://files.pythonhosted.org/packages/47/51/5ee1033f2d2bf0c9bb5a4355475f7a229113de37db2d2d3da7b31290c65f/RequestClient-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0702d54bcbb75664c618ca53f3047e14", "sha256": "b94bcea154513159783b26e0f0f30f7d94d26601c9158e3e4a07fb7c3c8fcc87"}, "downloads": -1, "filename": "RequestClient-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0702d54bcbb75664c618ca53f3047e14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5508, "upload_time": "2019-12-09T18:54:23", "upload_time_iso_8601": "2019-12-09T18:54:23.141866Z", "url": "https://files.pythonhosted.org/packages/0f/37/b4ee3dfb80eee1adc3a3f5497171cd1fdcf79759221056c019f905b6c714/RequestClient-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "81b2f788295cc1283e9932209c7accd9", "sha256": "54884fbadb0363359e5f85f6782ab0e5d424c41b4661d7666e93f15a7085d4ae"}, "downloads": -1, "filename": "RequestClient-0.5.0.tar.gz", "has_sig": false, "md5_digest": "81b2f788295cc1283e9932209c7accd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5532, "upload_time": "2019-12-16T21:11:03", "upload_time_iso_8601": "2019-12-16T21:11:03.118085Z", "url": "https://files.pythonhosted.org/packages/3d/ed/6383f0545c98ba930f9749c7b71da1d5e610bd2d246b8cc91b18e790f240/RequestClient-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81b2f788295cc1283e9932209c7accd9", "sha256": "54884fbadb0363359e5f85f6782ab0e5d424c41b4661d7666e93f15a7085d4ae"}, "downloads": -1, "filename": "RequestClient-0.5.0.tar.gz", "has_sig": false, "md5_digest": "81b2f788295cc1283e9932209c7accd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5532, "upload_time": "2019-12-16T21:11:03", "upload_time_iso_8601": "2019-12-16T21:11:03.118085Z", "url": "https://files.pythonhosted.org/packages/3d/ed/6383f0545c98ba930f9749c7b71da1d5e610bd2d246b8cc91b18e790f240/RequestClient-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:15 2020"}