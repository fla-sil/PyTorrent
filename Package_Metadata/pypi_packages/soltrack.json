{"info": {"author": "Marc van der Sluys", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Physics"], "description": "# SolTrack #\n\nA free, fast and simple Python package to compute the position of the Sun, as well as its rise and set times.\nSolTrack was originally written in C/C++ by Marc van der Sluys of the Sustainable energy research group of the\nHAN University of Applied Sciences in Arnhem, the Netherlands, and has now been translated to pure Python.\n\nSolTrack performs about 12340 position calculations per second on a single 3.6 GHz core of my 2013 laptop,\nwith an accuracy of 0.0030 \u00b1 0.0016\u00b0.  This makes it about 500x times faster than astropy, but around 50x\nslower than pyEphem, which is written in C.  SolTrack has been used to control solar trackers, as well as\nmodelling in solar energy.\n\n\n## Installation ##\n\nThis package can be installed using `pip install soltrack`.  This should automatically install the dependency\npackages `numpy` and `dataclasses` (if you're not using Python 3.7+) if they haven't been installed already.\nIf you are installing by hand, ensure that these packages are installed as well.\n\n\n## Example use ##\n\n```python\n\"\"\"Example Python script to compute the position of the Sun and its rise and set times for a single instant.\"\"\"\n\nimport soltrack as st\n\n# Set preferences (all are False by default):\nuseDegrees             = True   # Input (geographic position) and output are in degrees\nuseNorthEqualsZero     = True   # Azimuth: 0 = South, pi/2 (90deg) = West  ->  0 = North, pi/2 (90deg) = East\ncomputeRefrEquatorial  = True   # Compure refraction-corrected equatorial coordinates (Hour angle, declination)\ncomputeDistance        = True   # Compute the distance to the Sun\n\n# Set up geographical location (in degrees, since useDegrees=True) in a SolTrack Location dataclass object:\nloc = st.Location(5.950270, 51.987380)  # longitude (>0: east of Greenwich),  latitude (>0: northern hemisphere)\n\n# Set (UT!) date and time in a SolTrack Time dataclass object:\ntime = st.Time(2045, 7, 16,  6, 2, 49.217348)  # Date: 2045-07-16, time: 06:02:49.217348\n\n\n# Compute positions - returns a st.Position object:\npos = st.computeSunPosition(loc, time, useDegrees, useNorthEqualsZero, computeRefrEquatorial, computeDistance)\n\n# Compute rise and set times - returns a st.RiseSet object:\nriseSet = st.computeSunRiseSet(loc, time, 0.0, useDegrees, useNorthEqualsZero)\n\n\n# Write results to standard output:\nprint(\"Location:  %0.3lf E, %0.3lf N\" % (loc.longitude, loc.latitude))\nprint(\"Date:      %4d %2d %2d\" % (time.year, time.month, time.day))\nprint(\"Time:      %2d %2d %9.6lf\" % (time.hour, time.minute, time.second))\nprint(\"JD:        %0.11lf\" % (pos.julianDay))\nprint()\n\nprint(\"Ecliptic longitude, latitude:        %10.6lf\u00b0 %10.6lf\u00b0\" % (pos.longitude, 0.0))\nprint(\"Right ascension, declination:        %10.6lf\u00b0 %10.6lf\u00b0\" % (pos.rightAscension, pos.declination))\nprint(\"Uncorrected altitude:                            %10.6lf\u00b0\" % (pos.altitude))\nprint(\"Corrected azimuth, altitude:         %10.6lf\u00b0 %10.6lf\u00b0\" % (pos.azimuthRefract, pos.altitudeRefract))\nprint(\"Corrected hour angle, declination:   %10.6lf\u00b0 %10.6lf\u00b0\" % (pos.hourAngleRefract, pos.declinationRefract))\nprint()\n\nprint(\"Rise time:      %11.5lf,    azimuth:   %11.5lf\" % (riseSet.riseTime, riseSet.riseAzimuth))\nprint(\"Transit time:   %11.5lf,    altitude:  %11.5lf\" % (riseSet.transitTime, riseSet.transitAltitude))\nprint(\"Set time:       %11.5lf,    azimuth:   %11.5lf\" % (riseSet.setTime, riseSet.setAzimuth))\nprint()\n```\n\n\n## SolTrack pages ##\n\n* [SourceForge](http://soltrack.sf.net): SolTrack homepage, data files\n* [Pypi](https://pypi.org/project/soltrack/): SolTrack Python package\n* [GitHub](https://github.com/MarcvdSluys/SolTrack): SolTrack source code\n\n\n## Author and licence ##\n\n* Author: Marc van der Sluys\n* Contact: http://han.vandersluys.nl/en/\n* Licence: [GPLv3+](https://www.gnu.org/licenses/gpl.html)\n\n\n## References ##\n\n* Meeus, [Astronomical algorithms](https://www.willbell.com/math/MC1.HTM), 2nd Ed.\n* This C and Python codes are adapted from the Fortran implementation in\n  [libTheSky](http://libthesky.sourceforge.net/), which contains many references.\n* [Celestial mechanics in a nutshell (CMiaNS)](https://cmians.sourceforge.io/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://soltrack.sf.net", "keywords": "astronomy,ephemeris,sun,solar", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "soltrack", "package_url": "https://pypi.org/project/soltrack/", "platform": "", "project_url": "https://pypi.org/project/soltrack/", "project_urls": {"Homepage": "http://soltrack.sf.net"}, "release_url": "https://pypi.org/project/soltrack/0.0.2/", "requires_dist": ["numpy", "dataclasses"], "requires_python": "", "summary": "A free, fast and accurate Python package to compute the position of the Sun", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SolTrack</h1>\n<p>A free, fast and simple Python package to compute the position of the Sun, as well as its rise and set times.\nSolTrack was originally written in C/C++ by Marc van der Sluys of the Sustainable energy research group of the\nHAN University of Applied Sciences in Arnhem, the Netherlands, and has now been translated to pure Python.</p>\n<p>SolTrack performs about 12340 position calculations per second on a single 3.6 GHz core of my 2013 laptop,\nwith an accuracy of 0.0030 \u00b1 0.0016\u00b0.  This makes it about 500x times faster than astropy, but around 50x\nslower than pyEphem, which is written in C.  SolTrack has been used to control solar trackers, as well as\nmodelling in solar energy.</p>\n<h2>Installation</h2>\n<p>This package can be installed using <code>pip install soltrack</code>.  This should automatically install the dependency\npackages <code>numpy</code> and <code>dataclasses</code> (if you're not using Python 3.7+) if they haven't been installed already.\nIf you are installing by hand, ensure that these packages are installed as well.</p>\n<h2>Example use</h2>\n<pre><span class=\"sd\">\"\"\"Example Python script to compute the position of the Sun and its rise and set times for a single instant.\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">soltrack</span> <span class=\"k\">as</span> <span class=\"nn\">st</span>\n\n<span class=\"c1\"># Set preferences (all are False by default):</span>\n<span class=\"n\">useDegrees</span>             <span class=\"o\">=</span> <span class=\"kc\">True</span>   <span class=\"c1\"># Input (geographic position) and output are in degrees</span>\n<span class=\"n\">useNorthEqualsZero</span>     <span class=\"o\">=</span> <span class=\"kc\">True</span>   <span class=\"c1\"># Azimuth: 0 = South, pi/2 (90deg) = West  -&gt;  0 = North, pi/2 (90deg) = East</span>\n<span class=\"n\">computeRefrEquatorial</span>  <span class=\"o\">=</span> <span class=\"kc\">True</span>   <span class=\"c1\"># Compure refraction-corrected equatorial coordinates (Hour angle, declination)</span>\n<span class=\"n\">computeDistance</span>        <span class=\"o\">=</span> <span class=\"kc\">True</span>   <span class=\"c1\"># Compute the distance to the Sun</span>\n\n<span class=\"c1\"># Set up geographical location (in degrees, since useDegrees=True) in a SolTrack Location dataclass object:</span>\n<span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">(</span><span class=\"mf\">5.950270</span><span class=\"p\">,</span> <span class=\"mf\">51.987380</span><span class=\"p\">)</span>  <span class=\"c1\"># longitude (&gt;0: east of Greenwich),  latitude (&gt;0: northern hemisphere)</span>\n\n<span class=\"c1\"># Set (UT!) date and time in a SolTrack Time dataclass object:</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"mi\">2045</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">49.217348</span><span class=\"p\">)</span>  <span class=\"c1\"># Date: 2045-07-16, time: 06:02:49.217348</span>\n\n\n<span class=\"c1\"># Compute positions - returns a st.Position object:</span>\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">computeSunPosition</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">useDegrees</span><span class=\"p\">,</span> <span class=\"n\">useNorthEqualsZero</span><span class=\"p\">,</span> <span class=\"n\">computeRefrEquatorial</span><span class=\"p\">,</span> <span class=\"n\">computeDistance</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute rise and set times - returns a st.RiseSet object:</span>\n<span class=\"n\">riseSet</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">computeSunRiseSet</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">useDegrees</span><span class=\"p\">,</span> <span class=\"n\">useNorthEqualsZero</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Write results to standard output:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Location:  </span><span class=\"si\">%0.3lf</span><span class=\"s2\"> E, </span><span class=\"si\">%0.3lf</span><span class=\"s2\"> N\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">longitude</span><span class=\"p\">,</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">latitude</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Date:      </span><span class=\"si\">%4d</span><span class=\"s2\"> </span><span class=\"si\">%2d</span><span class=\"s2\"> </span><span class=\"si\">%2d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">day</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Time:      </span><span class=\"si\">%2d</span><span class=\"s2\"> </span><span class=\"si\">%2d</span><span class=\"s2\"> </span><span class=\"si\">%9.6lf</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">hour</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">minute</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">second</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"JD:        </span><span class=\"si\">%0.11lf</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">julianDay</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Ecliptic longitude, latitude:        </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0 </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">longitude</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Right ascension, declination:        </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0 </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">rightAscension</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">declination</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Uncorrected altitude:                            </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">altitude</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Corrected azimuth, altitude:         </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0 </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">azimuthRefract</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">altitudeRefract</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Corrected hour angle, declination:   </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0 </span><span class=\"si\">%10.6lf</span><span class=\"s2\">\u00b0\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">hourAngleRefract</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">declinationRefract</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Rise time:      </span><span class=\"si\">%11.5lf</span><span class=\"s2\">,    azimuth:   </span><span class=\"si\">%11.5lf</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">riseSet</span><span class=\"o\">.</span><span class=\"n\">riseTime</span><span class=\"p\">,</span> <span class=\"n\">riseSet</span><span class=\"o\">.</span><span class=\"n\">riseAzimuth</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Transit time:   </span><span class=\"si\">%11.5lf</span><span class=\"s2\">,    altitude:  </span><span class=\"si\">%11.5lf</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">riseSet</span><span class=\"o\">.</span><span class=\"n\">transitTime</span><span class=\"p\">,</span> <span class=\"n\">riseSet</span><span class=\"o\">.</span><span class=\"n\">transitAltitude</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Set time:       </span><span class=\"si\">%11.5lf</span><span class=\"s2\">,    azimuth:   </span><span class=\"si\">%11.5lf</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">riseSet</span><span class=\"o\">.</span><span class=\"n\">setTime</span><span class=\"p\">,</span> <span class=\"n\">riseSet</span><span class=\"o\">.</span><span class=\"n\">setAzimuth</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">()</span>\n</pre>\n<h2>SolTrack pages</h2>\n<ul>\n<li><a href=\"http://soltrack.sf.net\" rel=\"nofollow\">SourceForge</a>: SolTrack homepage, data files</li>\n<li><a href=\"https://pypi.org/project/soltrack/\" rel=\"nofollow\">Pypi</a>: SolTrack Python package</li>\n<li><a href=\"https://github.com/MarcvdSluys/SolTrack\" rel=\"nofollow\">GitHub</a>: SolTrack source code</li>\n</ul>\n<h2>Author and licence</h2>\n<ul>\n<li>Author: Marc van der Sluys</li>\n<li>Contact: <a href=\"http://han.vandersluys.nl/en/\" rel=\"nofollow\">http://han.vandersluys.nl/en/</a></li>\n<li>Licence: <a href=\"https://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\">GPLv3+</a></li>\n</ul>\n<h2>References</h2>\n<ul>\n<li>Meeus, <a href=\"https://www.willbell.com/math/MC1.HTM\" rel=\"nofollow\">Astronomical algorithms</a>, 2nd Ed.</li>\n<li>This C and Python codes are adapted from the Fortran implementation in\n<a href=\"http://libthesky.sourceforge.net/\" rel=\"nofollow\">libTheSky</a>, which contains many references.</li>\n<li><a href=\"https://cmians.sourceforge.io/\" rel=\"nofollow\">Celestial mechanics in a nutshell (CMiaNS)</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6856025, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8eb1997688b78d3a382c41e2286fd9ce", "sha256": "23225d6eef429a153c771dd3a1d91d19c6179e9a0915fd9fbd107107a399b9d0"}, "downloads": -1, "filename": "soltrack-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8eb1997688b78d3a382c41e2286fd9ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26651, "upload_time": "2019-11-03T17:33:49", "upload_time_iso_8601": "2019-11-03T17:33:49.697498Z", "url": "https://files.pythonhosted.org/packages/7f/fa/f976e3f545f4d4f2e3b3633f7cb05ca0df864d8bfc6aa336e1daae6e8a3e/soltrack-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7e84f03d0db6f187cc51244b81a5c8b", "sha256": "c510b10998b18a9e61843d398ee00944349a2de4d563ae6b979241977495a5c2"}, "downloads": -1, "filename": "soltrack-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d7e84f03d0db6f187cc51244b81a5c8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12171, "upload_time": "2019-11-03T17:33:52", "upload_time_iso_8601": "2019-11-03T17:33:52.210812Z", "url": "https://files.pythonhosted.org/packages/57/68/5d6cff8321ea54c014939f340c97e2ca9a526523d4d195daf659f4b5f37d/soltrack-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cc7d69ac89252716de1be92f8841da0d", "sha256": "f0cd3271153080939c8bf2bed16a1f867bb3da394fb15a8fc59e39e9c67d2e75"}, "downloads": -1, "filename": "soltrack-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc7d69ac89252716de1be92f8841da0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26868, "upload_time": "2020-03-21T15:45:11", "upload_time_iso_8601": "2020-03-21T15:45:11.434926Z", "url": "https://files.pythonhosted.org/packages/c1/0e/2a230ad47777b9412187a779cfb8bbbfb51a1d71ce4598014f997562a642/soltrack-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e221d5145b184bdff01a450ba9f5719", "sha256": "430b08e426e6357d9af4af1978824701d2444cf0383dcbefc13b0f2b1e93f7b5"}, "downloads": -1, "filename": "soltrack-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2e221d5145b184bdff01a450ba9f5719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12383, "upload_time": "2020-03-21T15:45:12", "upload_time_iso_8601": "2020-03-21T15:45:12.646783Z", "url": "https://files.pythonhosted.org/packages/21/03/22acf8594bfe0a211f3765f19b875ff53b41c5fc3b0f64fede43dc1aa956/soltrack-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc7d69ac89252716de1be92f8841da0d", "sha256": "f0cd3271153080939c8bf2bed16a1f867bb3da394fb15a8fc59e39e9c67d2e75"}, "downloads": -1, "filename": "soltrack-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc7d69ac89252716de1be92f8841da0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26868, "upload_time": "2020-03-21T15:45:11", "upload_time_iso_8601": "2020-03-21T15:45:11.434926Z", "url": "https://files.pythonhosted.org/packages/c1/0e/2a230ad47777b9412187a779cfb8bbbfb51a1d71ce4598014f997562a642/soltrack-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e221d5145b184bdff01a450ba9f5719", "sha256": "430b08e426e6357d9af4af1978824701d2444cf0383dcbefc13b0f2b1e93f7b5"}, "downloads": -1, "filename": "soltrack-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2e221d5145b184bdff01a450ba9f5719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12383, "upload_time": "2020-03-21T15:45:12", "upload_time_iso_8601": "2020-03-21T15:45:12.646783Z", "url": "https://files.pythonhosted.org/packages/21/03/22acf8594bfe0a211f3765f19b875ff53b41c5fc3b0f64fede43dc1aa956/soltrack-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:44 2020"}