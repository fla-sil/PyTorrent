{"info": {"author": "Christo Crampton", "author_email": "info@38.co.za", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# DJ Actions\n\n[![PyPI version](https://badge.fury.io/py/dj-actions.svg)](https://badge.fury.io/py/dj-actions)\n\nA pattern + tooling to enable a standardized way to interact with and mutate data on a Django model\n\n## Getting started\n\n### Installation\n\n```\npip install dj-actions\n```\n\nAdd to `INSTALLED_APPS`\n\n### Prepare your app for action!\n\n```\npython manage.py start_actions\n```\n\n### Add your first action\n\n```\npython manage.py create_action\n```\n\n\n### Add actions to your Django app\n\n#### 1. Create an actions module in your app:\n\nDJActions convention is to isolate each action into it's own module.\nA typical file layout might look something like this:\n\n```python\n[app]\n  |_ [actions]\n        |_ action_registry.py\n        |_ [some_action]\n        |_ [some_other_action]\n```\n\n#### 2. Create your action registry\n\nThe action registry is how we tell DJActions how to route to our actions. The action registry will also be responsible for generating your documentation endpoints\n\n**Here is an example registry:**\n\n```python\nfrom actions.util import (\n    STATUS,\n    ACTION_TYPE,\n    # get_action_docs,\n    enrich_actions\n)\n\naction_list = []\n## -- START ACTION REGISTRY -- ##\naction_list.append(('mark_done', ACTION_TYPE.INSTANCE.value, STATUS.ALPHA.value))\n## -- END ACTION REGISTRY -- ##\n\n# this is the abolsute path to the base of your app:\n# dj-actions uses this to locate your action directory\nbase = '/code/example_app/'\n\n# convention over configuration\n# this will load your actions configurations from\ninitial_registry = { \"resource\": \"todo\", \"basepath\": \"/todos/\", \"actions\": {} }\nACTIONS = enrich_actions(\n    base,\n    initial_registry,\n    action_list\n)\n```\n\nNow you need to mixin `actions.ActionViews` into your ViewSet:\n\n```python\nfrom rest_framework import routers, serializers, viewsets\n\nfrom actions.mixins import ActionMixin\nfrom actions.actions.action_registry import ACTIONS\nfrom actions.models import EventAction\n\n\nclass EventActionViewSet(ActionMixin, viewsets.ModelViewSet):\n    queryset = EventAction.objects.all()\n    serializer_class = TodoSerializer\n    action_registry = ACTIONS\n\n\nrouter = routers.DefaultRouter()\nrouter.register(r'todos', TodoViewSet)\n\n```\n\n## Configuration\n\n* `DJACTION_TRACK_ACTIONS` if `True` will store action info in the db (default: `True`)\n* `DJACTION_TTL_MINUTES` actions older than this will be archived (default 1 day (60*24))\n\n## Features\n\n* Reliable, simple pattern to execute complex logic\n* Self documenting\n\n## Tooling\n\nThis library provides you with some tools and tasks which might be useful:\n\n### Stream,io (WIP)\n\n> Push action information into stream.io\n\n### Airflow (WIP)\n\n> Push downstream work to an airflow task\n\n\n\n\n## Concepts\n\n### Task Registry\n\nThe Task Registry provides a means of defining tasks in a self documenting way.\nBased on the meta-data provided in the task registry, tasks will be exposed in various different ways", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/schoolorchestration/libs/dj-actions", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dj-actions", "package_url": "https://pypi.org/project/dj-actions/", "platform": "", "project_url": "https://pypi.org/project/dj-actions/", "project_urls": {"Homepage": "https://gitlab.com/schoolorchestration/libs/dj-actions"}, "release_url": "https://pypi.org/project/dj-actions/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DJ Actions</h1>\n<p><a href=\"https://badge.fury.io/py/dj-actions\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c930acac1687bab56d27026a851c1f8ba9a1416e/68747470733a2f2f62616467652e667572792e696f2f70792f646a2d616374696f6e732e737667\"></a></p>\n<p>A pattern + tooling to enable a standardized way to interact with and mutate data on a Django model</p>\n<h2>Getting started</h2>\n<h3>Installation</h3>\n<pre><code>pip install dj-actions\n</code></pre>\n<p>Add to <code>INSTALLED_APPS</code></p>\n<h3>Prepare your app for action!</h3>\n<pre><code>python manage.py start_actions\n</code></pre>\n<h3>Add your first action</h3>\n<pre><code>python manage.py create_action\n</code></pre>\n<h3>Add actions to your Django app</h3>\n<h4>1. Create an actions module in your app:</h4>\n<p>DJActions convention is to isolate each action into it's own module.\nA typical file layout might look something like this:</p>\n<pre><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span> <span class=\"p\">[</span><span class=\"n\">actions</span><span class=\"p\">]</span>\n        <span class=\"o\">|</span><span class=\"n\">_</span> <span class=\"n\">action_registry</span><span class=\"o\">.</span><span class=\"n\">py</span>\n        <span class=\"o\">|</span><span class=\"n\">_</span> <span class=\"p\">[</span><span class=\"n\">some_action</span><span class=\"p\">]</span>\n        <span class=\"o\">|</span><span class=\"n\">_</span> <span class=\"p\">[</span><span class=\"n\">some_other_action</span><span class=\"p\">]</span>\n</pre>\n<h4>2. Create your action registry</h4>\n<p>The action registry is how we tell DJActions how to route to our actions. The action registry will also be responsible for generating your documentation endpoints</p>\n<p><strong>Here is an example registry:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">actions.util</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">STATUS</span><span class=\"p\">,</span>\n    <span class=\"n\">ACTION_TYPE</span><span class=\"p\">,</span>\n    <span class=\"c1\"># get_action_docs,</span>\n    <span class=\"n\">enrich_actions</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">action_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"c1\">## -- START ACTION REGISTRY -- ##</span>\n<span class=\"n\">action_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s1\">'mark_done'</span><span class=\"p\">,</span> <span class=\"n\">ACTION_TYPE</span><span class=\"o\">.</span><span class=\"n\">INSTANCE</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">STATUS</span><span class=\"o\">.</span><span class=\"n\">ALPHA</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"c1\">## -- END ACTION REGISTRY -- ##</span>\n\n<span class=\"c1\"># this is the abolsute path to the base of your app:</span>\n<span class=\"c1\"># dj-actions uses this to locate your action directory</span>\n<span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"s1\">'/code/example_app/'</span>\n\n<span class=\"c1\"># convention over configuration</span>\n<span class=\"c1\"># this will load your actions configurations from</span>\n<span class=\"n\">initial_registry</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"todo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"basepath\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/todos/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"actions\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span> <span class=\"p\">}</span>\n<span class=\"n\">ACTIONS</span> <span class=\"o\">=</span> <span class=\"n\">enrich_actions</span><span class=\"p\">(</span>\n    <span class=\"n\">base</span><span class=\"p\">,</span>\n    <span class=\"n\">initial_registry</span><span class=\"p\">,</span>\n    <span class=\"n\">action_list</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now you need to mixin <code>actions.ActionViews</code> into your ViewSet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">routers</span><span class=\"p\">,</span> <span class=\"n\">serializers</span><span class=\"p\">,</span> <span class=\"n\">viewsets</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">actions.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">ActionMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">actions.actions.action_registry</span> <span class=\"kn\">import</span> <span class=\"n\">ACTIONS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">actions.models</span> <span class=\"kn\">import</span> <span class=\"n\">EventAction</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EventActionViewSet</span><span class=\"p\">(</span><span class=\"n\">ActionMixin</span><span class=\"p\">,</span> <span class=\"n\">viewsets</span><span class=\"o\">.</span><span class=\"n\">ModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">EventAction</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">TodoSerializer</span>\n    <span class=\"n\">action_registry</span> <span class=\"o\">=</span> <span class=\"n\">ACTIONS</span>\n\n\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">routers</span><span class=\"o\">.</span><span class=\"n\">DefaultRouter</span><span class=\"p\">()</span>\n<span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'todos'</span><span class=\"p\">,</span> <span class=\"n\">TodoViewSet</span><span class=\"p\">)</span>\n</pre>\n<h2>Configuration</h2>\n<ul>\n<li><code>DJACTION_TRACK_ACTIONS</code> if <code>True</code> will store action info in the db (default: <code>True</code>)</li>\n<li><code>DJACTION_TTL_MINUTES</code> actions older than this will be archived (default 1 day (60*24))</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Reliable, simple pattern to execute complex logic</li>\n<li>Self documenting</li>\n</ul>\n<h2>Tooling</h2>\n<p>This library provides you with some tools and tasks which might be useful:</p>\n<h3>Stream,io (WIP)</h3>\n<blockquote>\n<p>Push action information into stream.io</p>\n</blockquote>\n<h3>Airflow (WIP)</h3>\n<blockquote>\n<p>Push downstream work to an airflow task</p>\n</blockquote>\n<h2>Concepts</h2>\n<h3>Task Registry</h3>\n<p>The Task Registry provides a means of defining tasks in a self documenting way.\nBased on the meta-data provided in the task registry, tasks will be exposed in various different ways</p>\n\n          </div>"}, "last_serial": 6722488, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b27635507f0306b7f58033998c938c07", "sha256": "a9ce0efb6c312ce4fcf2d9a24f0131cb949e92d9ae52904d165cc2832a2af038"}, "downloads": -1, "filename": "dj_actions-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b27635507f0306b7f58033998c938c07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6584, "upload_time": "2019-03-10T19:59:26", "upload_time_iso_8601": "2019-03-10T19:59:26.118636Z", "url": "https://files.pythonhosted.org/packages/4b/b8/2834f5d838495478dba3599fd1d994317d981644544617d89595023f00bb/dj_actions-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ebf970552e85f300d1c8022eda8c6f62", "sha256": "ce048b923b1454e204ed4c312600228ad09fb890fb4284055fd47974e06fcf45"}, "downloads": -1, "filename": "dj-actions-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ebf970552e85f300d1c8022eda8c6f62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11398, "upload_time": "2020-02-26T00:57:38", "upload_time_iso_8601": "2020-02-26T00:57:38.357439Z", "url": "https://files.pythonhosted.org/packages/d4/8e/29b508f54d1901aa6a9c3d3d92462e0edbe9f5750a9402dee94ba5fbe9af/dj-actions-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "63e027eca188c407e05a500443d27cf5", "sha256": "fd92cea861816255d8132fe751d8fd932e5879cf8faf56f81d6c00f8ecbf3a17"}, "downloads": -1, "filename": "dj-actions-0.0.4.tar.gz", "has_sig": false, "md5_digest": "63e027eca188c407e05a500443d27cf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15725, "upload_time": "2020-02-28T23:13:35", "upload_time_iso_8601": "2020-02-28T23:13:35.465669Z", "url": "https://files.pythonhosted.org/packages/ef/96/3231e8fffde5c045e3b0d9261069db846ccf7be8155454b5bae2689f37ac/dj-actions-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "3aaefbf438472b2917e826755b864e54", "sha256": "8b5d0840246c98ffcf40b7b60656de873cc1ae1fd259b6f3056152a07ad1e9b5"}, "downloads": -1, "filename": "dj-actions-0.0.5.tar.gz", "has_sig": false, "md5_digest": "3aaefbf438472b2917e826755b864e54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15794, "upload_time": "2020-02-28T23:22:22", "upload_time_iso_8601": "2020-02-28T23:22:22.450985Z", "url": "https://files.pythonhosted.org/packages/4f/d7/ce9abb3e4d42b4257529818f14f0fa52a265d70b4b5a1d70ca3a7f808f19/dj-actions-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "8b3584343816ba20213a27883faf5b91", "sha256": "9aa7ab2b3c1a713ebc0abc29fe8756de35163308bf46f0b26e925fcc3b831ce6"}, "downloads": -1, "filename": "dj-actions-0.0.6.tar.gz", "has_sig": false, "md5_digest": "8b3584343816ba20213a27883faf5b91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15524, "upload_time": "2020-02-28T23:34:45", "upload_time_iso_8601": "2020-02-28T23:34:45.724041Z", "url": "https://files.pythonhosted.org/packages/9c/1f/12d747a52c90f2b93e969093804c806b8f6f11219f290af16a7f55fd2fa5/dj-actions-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "34092af951ca7efa5d2067c6950d8346", "sha256": "98a428cef867f954a2885875b40daf60531c4f16736d1227cdc70d9ea8cff51c"}, "downloads": -1, "filename": "dj-actions-0.0.7.tar.gz", "has_sig": false, "md5_digest": "34092af951ca7efa5d2067c6950d8346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15949, "upload_time": "2020-02-29T03:33:36", "upload_time_iso_8601": "2020-02-29T03:33:36.655151Z", "url": "https://files.pythonhosted.org/packages/df/44/af8d2d1a4e08cea8ab45ba7735b574300d072525e4d33360a001a43747f9/dj-actions-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34092af951ca7efa5d2067c6950d8346", "sha256": "98a428cef867f954a2885875b40daf60531c4f16736d1227cdc70d9ea8cff51c"}, "downloads": -1, "filename": "dj-actions-0.0.7.tar.gz", "has_sig": false, "md5_digest": "34092af951ca7efa5d2067c6950d8346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15949, "upload_time": "2020-02-29T03:33:36", "upload_time_iso_8601": "2020-02-29T03:33:36.655151Z", "url": "https://files.pythonhosted.org/packages/df/44/af8d2d1a4e08cea8ab45ba7735b574300d072525e4d33360a001a43747f9/dj-actions-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:57 2020"}