{"info": {"author": "", "author_email": "bkanuka@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Trio", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# trio_paho_mqtt\n[trio](https://github.com/python-trio/trio) specific async MQTT client. The goal of this project is to have all \nthe MQTT protocol stuff handled by [paho-mqtt](https://github.com/eclipse/paho.mqtt.python),\nwhile the async loopy stuff is handled by trio. This keeps our MQTT communication async, without having to\nshove paho-mqtt into a thread, and without having to reimplement the MQTT protocol.\n\nAll callbacks are also removed to be more trio-like. Messages are accessed through an `async for` loop.\n\nThis is meant to be a light-as-possible wrapper around paho-mqtt. That way if something goes wrong with MQTT message\nparsing, it's not my fault ;-)\n\n## Usage\nFirst, see the `example.py` and paho-mqtt documentation.\nThe goal is to expose all the same methods as the paho-mqtt `Client`. If any methods (besides callbacks) are missing\nor do something unexpected, this is a bug. Please open an issue.\n\n`AsyncClient` is initialized with a sync `mqtt.Client` and a `trio.Nursery` but then otherwise should operate much\nlike the sync `Client`.  Methods are *not* coroutines, they are non-blocking functions, so you do not need to call\n`await`. The only exception is accessing messages through `async for`.\n\n### Example\n```python\nimport paho.mqtt.client as mqtt\nimport trio\nfrom trio_paho_mqtt import AsyncClient\n\n\nasync def handle_messages(client):\n    async for msg in client.messages():\n        print(f\"Received msg: {msg}\")\n\nasync with trio.open_nursery() as nursery:\n    sync_client = mqtt.Client()\n    client = AsyncClient(sync_client, nursery)\n    client.connect('mqtt.eclipse.org', 1883, 60)\n    client.subscribe(topic)\n    client.publish(topic, msg)\n\n    nursery.start_soon(handle_messages, client)\n```\n\n## Related projects\n  - [gmqtt](https://github.com/wialon/gmqtt) - Uses asyncio and callbacks. Isn't compatible with trio.\n  - [hbmqtt](https://github.com/beerfactory/hbmqtt) - Uses asyncio. Reimplements the MQTT protocol.\n  - [aiomqtt](https://github.com/mossblaser/aiomqtt) - Uses asyncio and wraps paho, but still uses the loop from \n  paho-mqtt. I believe all operations are put into a worker thread.\n  - [distmqtt](https://github.com/smurfix/distmqtt) - anyio-ified hbmqtt fork. Works with trio.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/bkanuka/trio-paho-mqtt/archive/v0.3.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bkanuka/trio-paho-mqtt", "keywords": "trio mqtt", "license": "", "maintainer": "", "maintainer_email": "", "name": "trio-paho-mqtt", "package_url": "https://pypi.org/project/trio-paho-mqtt/", "platform": "", "project_url": "https://pypi.org/project/trio-paho-mqtt/", "project_urls": {"Download": "https://github.com/bkanuka/trio-paho-mqtt/archive/v0.3.1.tar.gz", "Homepage": "https://github.com/bkanuka/trio-paho-mqtt", "Source": "https://github.com/bkanuka/trio-paho-mqtt"}, "release_url": "https://pypi.org/project/trio-paho-mqtt/0.3.1/", "requires_dist": ["paho-mqtt", "trio"], "requires_python": ">=3.5, <4", "summary": "trio async MQTT Client", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>trio_paho_mqtt</h1>\n<p><a href=\"https://github.com/python-trio/trio\" rel=\"nofollow\">trio</a> specific async MQTT client. The goal of this project is to have all\nthe MQTT protocol stuff handled by <a href=\"https://github.com/eclipse/paho.mqtt.python\" rel=\"nofollow\">paho-mqtt</a>,\nwhile the async loopy stuff is handled by trio. This keeps our MQTT communication async, without having to\nshove paho-mqtt into a thread, and without having to reimplement the MQTT protocol.</p>\n<p>All callbacks are also removed to be more trio-like. Messages are accessed through an <code>async for</code> loop.</p>\n<p>This is meant to be a light-as-possible wrapper around paho-mqtt. That way if something goes wrong with MQTT message\nparsing, it's not my fault ;-)</p>\n<h2>Usage</h2>\n<p>First, see the <code>example.py</code> and paho-mqtt documentation.\nThe goal is to expose all the same methods as the paho-mqtt <code>Client</code>. If any methods (besides callbacks) are missing\nor do something unexpected, this is a bug. Please open an issue.</p>\n<p><code>AsyncClient</code> is initialized with a sync <code>mqtt.Client</code> and a <code>trio.Nursery</code> but then otherwise should operate much\nlike the sync <code>Client</code>.  Methods are <em>not</em> coroutines, they are non-blocking functions, so you do not need to call\n<code>await</code>. The only exception is accessing messages through <code>async for</code>.</p>\n<h3>Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">paho.mqtt.client</span> <span class=\"k\">as</span> <span class=\"nn\">mqtt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">trio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">trio_paho_mqtt</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_messages</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Received msg: </span><span class=\"si\">{</span><span class=\"n\">msg</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">trio</span><span class=\"o\">.</span><span class=\"n\">open_nursery</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">nursery</span><span class=\"p\">:</span>\n    <span class=\"n\">sync_client</span> <span class=\"o\">=</span> <span class=\"n\">mqtt</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"n\">sync_client</span><span class=\"p\">,</span> <span class=\"n\">nursery</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'mqtt.eclipse.org'</span><span class=\"p\">,</span> <span class=\"mi\">1883</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"n\">nursery</span><span class=\"o\">.</span><span class=\"n\">start_soon</span><span class=\"p\">(</span><span class=\"n\">handle_messages</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">)</span>\n</pre>\n<h2>Related projects</h2>\n<ul>\n<li><a href=\"https://github.com/wialon/gmqtt\" rel=\"nofollow\">gmqtt</a> - Uses asyncio and callbacks. Isn't compatible with trio.</li>\n<li><a href=\"https://github.com/beerfactory/hbmqtt\" rel=\"nofollow\">hbmqtt</a> - Uses asyncio. Reimplements the MQTT protocol.</li>\n<li><a href=\"https://github.com/mossblaser/aiomqtt\" rel=\"nofollow\">aiomqtt</a> - Uses asyncio and wraps paho, but still uses the loop from\npaho-mqtt. I believe all operations are put into a worker thread.</li>\n<li><a href=\"https://github.com/smurfix/distmqtt\" rel=\"nofollow\">distmqtt</a> - anyio-ified hbmqtt fork. Works with trio.</li>\n</ul>\n\n          </div>"}, "last_serial": 6605122, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "8c42915cd9c0ac1995a3a5f904bc44ce", "sha256": "83f9fbcc875be19e056533613dfc480360a6590228bc80e0560288d266b90638"}, "downloads": -1, "filename": "trio-paho-mqtt-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8c42915cd9c0ac1995a3a5f904bc44ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 2699, "upload_time": "2019-12-04T20:43:42", "upload_time_iso_8601": "2019-12-04T20:43:42.359834Z", "url": "https://files.pythonhosted.org/packages/90/26/79d2c1ef6d1979e452fa633a81ad100adf4fa0bea349a644b14e90c6313d/trio-paho-mqtt-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "09fb6783080959b73dcd8ea67403da85", "sha256": "57405e1ec5b195e6760da9f5a4b1b00e201ec7aed787f6267f6361bf00a63c53"}, "downloads": -1, "filename": "trio_paho_mqtt-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "09fb6783080959b73dcd8ea67403da85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 8130, "upload_time": "2020-02-10T21:47:12", "upload_time_iso_8601": "2020-02-10T21:47:12.612650Z", "url": "https://files.pythonhosted.org/packages/9c/67/97686043cce5c8e068ef2fb82315b3419215a71fb53a12012ae725cb8fe2/trio_paho_mqtt-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2e62142b61f13b0e3aa927468cd7156", "sha256": "4fc416d663856bdeb2beae96d81ee2e82cf98b2cadc8ecc3e033137afacb45ae"}, "downloads": -1, "filename": "trio-paho-mqtt-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a2e62142b61f13b0e3aa927468cd7156", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 3807, "upload_time": "2020-02-10T21:47:14", "upload_time_iso_8601": "2020-02-10T21:47:14.846867Z", "url": "https://files.pythonhosted.org/packages/80/ae/363804eca1c5cbc9bceb8a1f79ae46a1db4cfb9180374d7d7a8720c819dd/trio-paho-mqtt-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09fb6783080959b73dcd8ea67403da85", "sha256": "57405e1ec5b195e6760da9f5a4b1b00e201ec7aed787f6267f6361bf00a63c53"}, "downloads": -1, "filename": "trio_paho_mqtt-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "09fb6783080959b73dcd8ea67403da85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 8130, "upload_time": "2020-02-10T21:47:12", "upload_time_iso_8601": "2020-02-10T21:47:12.612650Z", "url": "https://files.pythonhosted.org/packages/9c/67/97686043cce5c8e068ef2fb82315b3419215a71fb53a12012ae725cb8fe2/trio_paho_mqtt-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2e62142b61f13b0e3aa927468cd7156", "sha256": "4fc416d663856bdeb2beae96d81ee2e82cf98b2cadc8ecc3e033137afacb45ae"}, "downloads": -1, "filename": "trio-paho-mqtt-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a2e62142b61f13b0e3aa927468cd7156", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 3807, "upload_time": "2020-02-10T21:47:14", "upload_time_iso_8601": "2020-02-10T21:47:14.846867Z", "url": "https://files.pythonhosted.org/packages/80/ae/363804eca1c5cbc9bceb8a1f79ae46a1db4cfb9180374d7d7a8720c819dd/trio-paho-mqtt-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:04 2020"}