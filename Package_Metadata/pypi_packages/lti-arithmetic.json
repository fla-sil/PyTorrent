{"info": {"author": "James Wilson", "author_email": "jmw@jmw.name", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Topic :: Scientific/Engineering"], "description": "# lti-arithmetic\nArithmetic manipulation for scipy.signal.lti TransferFunction\n\nLTI system representations in scipy do not offer built-in composability.\nGiven two instances of `scipy.signal.lti`, for example, `H` and `G`,\nyou cannot directly write `H * G`.\n\nThis package defines a `scipy.signal.lti`-compatible `TransferFunction`\nthat permits standard arithmetical combination: `H + G`, `H - G`, `H * G`,\n `H / G`, and `H**n`. In addition, the parallel combination\n(reciprocal of reciprocal sums) of systems is available by writing `H | G`.\n\nThe package also defines functions `Z_R`, `Z_C`, and `Z_L` that represent\nthe impedance of a resistance, capacitance, and inductance, respectively,\nas LTI systems that can be composed to represent the transfer function\nof a larger network.\n\nFor convenience, the package also defines `s` so that transfer functions\ncan be written as rational expressions in `s`.\n\n## Examples\n\n```\n>>> from ltiarithmetic import TransferFunction, Z_R, Z_C, Z_L, s\n```\n\nCompute the product of two LTI systems:\n```\n>>> H = TransferFunction([1,2,3],[1])\n>>> G = TransferFunction[[1],[2,3,4])\n>>> H * G\nTransferFunction(\narray([0.5, 1. , 1.5]),\narray([1. , 1.5, 2. ]),\ndt: None\n)\n```\n\nCompute the transfer function of a RC lowpass filter:\n```\nZ_1 = Z_R(1000.)\nZ_2 = Z_C(1e-9)\nH = Z_2 / (Z_1 + Z_2)\n```\n\nConstruct LTI systems from rational expressions in `s`:\n```\nimport math\nw0 = 2 * math.pi * 1000.\nQ = 2.\nH = 1/(1 + s / (Q * w0) + (s / w0)**2)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jmwilson/lti-arithmetic", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "lti-arithmetic", "package_url": "https://pypi.org/project/lti-arithmetic/", "platform": "", "project_url": "https://pypi.org/project/lti-arithmetic/", "project_urls": {"Homepage": "https://github.com/jmwilson/lti-arithmetic"}, "release_url": "https://pypi.org/project/lti-arithmetic/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Arithmetic manipulation for scipy.signal.lti TransferFunction", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>lti-arithmetic</h1>\n<p>Arithmetic manipulation for scipy.signal.lti TransferFunction</p>\n<p>LTI system representations in scipy do not offer built-in composability.\nGiven two instances of <code>scipy.signal.lti</code>, for example, <code>H</code> and <code>G</code>,\nyou cannot directly write <code>H * G</code>.</p>\n<p>This package defines a <code>scipy.signal.lti</code>-compatible <code>TransferFunction</code>\nthat permits standard arithmetical combination: <code>H + G</code>, <code>H - G</code>, <code>H * G</code>,\n<code>H / G</code>, and <code>H**n</code>. In addition, the parallel combination\n(reciprocal of reciprocal sums) of systems is available by writing <code>H | G</code>.</p>\n<p>The package also defines functions <code>Z_R</code>, <code>Z_C</code>, and <code>Z_L</code> that represent\nthe impedance of a resistance, capacitance, and inductance, respectively,\nas LTI systems that can be composed to represent the transfer function\nof a larger network.</p>\n<p>For convenience, the package also defines <code>s</code> so that transfer functions\ncan be written as rational expressions in <code>s</code>.</p>\n<h2>Examples</h2>\n<pre><code>&gt;&gt;&gt; from ltiarithmetic import TransferFunction, Z_R, Z_C, Z_L, s\n</code></pre>\n<p>Compute the product of two LTI systems:</p>\n<pre><code>&gt;&gt;&gt; H = TransferFunction([1,2,3],[1])\n&gt;&gt;&gt; G = TransferFunction[[1],[2,3,4])\n&gt;&gt;&gt; H * G\nTransferFunction(\narray([0.5, 1. , 1.5]),\narray([1. , 1.5, 2. ]),\ndt: None\n)\n</code></pre>\n<p>Compute the transfer function of a RC lowpass filter:</p>\n<pre><code>Z_1 = Z_R(1000.)\nZ_2 = Z_C(1e-9)\nH = Z_2 / (Z_1 + Z_2)\n</code></pre>\n<p>Construct LTI systems from rational expressions in <code>s</code>:</p>\n<pre><code>import math\nw0 = 2 * math.pi * 1000.\nQ = 2.\nH = 1/(1 + s / (Q * w0) + (s / w0)**2)\n</code></pre>\n\n          </div>"}, "last_serial": 4774126, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ee40cfe4e08b1d64fa368a8d6e074387", "sha256": "db0f20643d5796f8e9c54316ee72768cdc3ab2d62c18d2ee8be00c42890eac84"}, "downloads": -1, "filename": "lti-arithmetic-1.0.0b.tar.gz", "has_sig": false, "md5_digest": "ee40cfe4e08b1d64fa368a8d6e074387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2410, "upload_time": "2019-02-03T07:23:08", "upload_time_iso_8601": "2019-02-03T07:23:08.754882Z", "url": "https://files.pythonhosted.org/packages/bc/53/80314c051dbd6e73ba786d259e367e90b3a22d738c1891493a989f9e865b/lti-arithmetic-1.0.0b.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee40cfe4e08b1d64fa368a8d6e074387", "sha256": "db0f20643d5796f8e9c54316ee72768cdc3ab2d62c18d2ee8be00c42890eac84"}, "downloads": -1, "filename": "lti-arithmetic-1.0.0b.tar.gz", "has_sig": false, "md5_digest": "ee40cfe4e08b1d64fa368a8d6e074387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2410, "upload_time": "2019-02-03T07:23:08", "upload_time_iso_8601": "2019-02-03T07:23:08.754882Z", "url": "https://files.pythonhosted.org/packages/bc/53/80314c051dbd6e73ba786d259e367e90b3a22d738c1891493a989f9e865b/lti-arithmetic-1.0.0b.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:23 2020"}