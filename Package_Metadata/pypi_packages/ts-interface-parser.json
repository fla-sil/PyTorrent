{"info": {"author": "Thomas Osterland", "author_email": "highway.ita07@web.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Typescript Interface Parser (and to JSON converter)\n\nThe typescript interface parser parses interfaces defined in typescript and outputs a JSON object describing the interfaces.\n\n![Preview](./documentation/render1571132256134.gif \"Example Preview\")\n\n## Features\n\n- output to file and to stdio\n- comments are also considered and provided by the JSON representation\n- supports a wide range of typescript syntax (if you find something missing please file a feature request)\n- can be easily integrated in your own program for parsing typescript interfaces\n\n## Table of Contents\n\n1. [Installation](#Installation)\n      1. [Pypi](#Pypi)\n      1. [Manual Installation](#ManualInstallation)\n      1. [Running the Unit Tests](#unittest)\n2. [The JSON Representation](#json)\n      1. [Translation of Attributes](#attributes)\n      1. [Indexed Attributes](#index)\n      1. [Function Attributes](#function)\n\n### MISC\n\nI needed to communicate with a server via RPC from a Python client, but all valid messages were specified in Typescript interfaces. There were a huge number of different messages and I slowly got bored translating the interfaces manually. So I implemented this translator. Hope it will serve you, as well as it served me.\n\n## <a name=\"Installation\"></a>Installation\n\n### <a name=\"Pypi\"></a>Pypi\n\n### <a name=\"ManualInstallation\"></a>Manual installation\n\nClone the repo and install the requirements with\n`pip install -r requirements.txt`. Than type `python3 ts_interface_parser.py -h` to get an overview of the possible options.\n\n### <a name=\"unittest\"></a>Running the Unit Tests\n\n```\npython3 -m unittest test.test_parser.TestParser\n```\n\n## <a name=\"json\"></a>The JSON Representation\n\nThe general translation works as follows:\n\n```\n/**\n* <some comment>\n*/\ninterface <interface_name> extends <extension_a>, <extension_b> {\n        <attribute_1> : <type_1>;\n}\n```\n\nis translated to\n\n```\n{\n        \"<interface_name>\" : {\n                \"description\" : \"<some comment>\",\n                \"extends\": [\n                        \"<extension_a>\",\n                        \"<extension_b>\"\n                ]\n                \"<attribute_1> : {\n                        \"type\" : [\n                                \"<type_1>\"\n                        ]\n                }\n        }\n}\n```\n\nThe comment becomes the decsription and potential extensions are provided in the `extends` field. For every specified attribute an object is added referenced by the name of the attribute. Here `<attribute_1>`.\n\n### <a name=\"attributes\"></a>Translation of Attributes\n\nIn the following I give examples of different attribute definitions and how those are translated into JSON.\n\n```\ninterface <interface_name> {\n        <attribute_name_1> : <type_1> | <type_2>; // <comment_1>\n        /**\n        * <comment_2>\n        */\n        <attribute_name_2> : {\n                <attribute_name_3> : <type_3>\n        }\n\n        <attribute_name_4>? : <type_4>;\n\n        const <attribute_name_5> : <type_5>;\n\n        readonly <attribute_name_6> : <type_6>;\n\n        <attribute_name_7> : \"value 1\" | \"value 2\";\n}\n```\n\nis translated to\n\n```\n{\n        \"<interface_name>\" : {\n                \"<attribute_name_1>\" : {\n                        \"description\" : \"<comment_1\">,\n                        \"type\" : [\n                                \"type_1\",\n                                \"type_2\"\n                        ]\n                },\n                \"<attribute_name_2>\" : {\n                        \"description\" : \"<comment_2\">,\n                        \"type\": {\n                                \"<attribute_name_3>\" : {\n                                        \"type\" : [\n                                                \"type_3\"\n                                        ]\n                                }\n                        }\n                },\n                \"<attribute_name_4>\" : {\n                        \"optional\" : true,\n                        \"type\" : [\n                                \"<type_4>\"\n                        ]\n                },\n                \"<attribute_name_5>\" : {\n                        \"constant\" : true,\n                        \"type\" : [\n                                \"<type_5>\"\n                        ]\n                },\n                \"<attribute_name_6>\" : {\n                        \"readonly\" : true,\n                        \"type\" : [\n                                \"<type_6>\"\n                        ]\n                },\n                \"<attribute_name_7>\" : {\n                        \"type\" : [\n                                \"'value 1'\",\n                                \"'value 2'\",\n                        ]\n                }\n        }\n}\n```\n\n#### <a name=\"index\"></a>Indexed Attributes\n\n```\ninterface ReadonlyStringArray {\n        [index: number]: string;\n}\n```\n\nThe indexed attribute is named with the variable name within the square brackets. The attribute has a field `indexed` which contains the index type and the type the index is refering to.\n\n```\n{\n        \"ReadonlyStringArray\": {\n                \"index\": {\n                        \"indexed\": {\n                                \"type\": [\n                                        \"number\"\n                                ]\n                        },\n                        \"type\": [\n                                \"string\"\n                        ]\n                }\n        }\n}\n```\n\n#### <a name=\"function\"></a>Function Attributes\n\nFunctions are marked by a field `function` in the JSON representation of the function. Thus\n\n```\ninterface ClockInterface {\n        setTime(d: Date): void;\n}\n```\n\ntranslates to\n\n```\n{\n        \"ClockInterface\": {\n                \"setTime\": {\n                        \"function\": true,\n                        \"parameters\": {\n                                \"d\": {\n                                        \"type\": [\n                                                \"Date\"\n                                        ]\n                                }\n                        },\n                        \"type\": [\n                                \"void\"\n                        ]\n                }\n}\n```\n\nFor anonymous function declarations, as for instance:\n\n```\ninterface SearchFunc{\n        (source: string, subString: string): boolean;\n}\n```\n\nThis interface is translated to:\n\n```\n{\n        \"SearchFunc\": {\n                \"anonymous_function\": {\n                    \"function\": true,\n                    \"parameters\": {\n                        \"source\": {\n                            \"type\": [\n                                \"string\"\n                            ]\n                        },\n                        \"subString\": {\n                            \"type\": [\n                                \"string\"\n                            ]\n                        }\n                    },\n                    \"type\": [\n                        \"boolean\"\n                    ]\n                }\n        }\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/highkite/ts_interface_parser", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ts-interface-parser", "package_url": "https://pypi.org/project/ts-interface-parser/", "platform": "", "project_url": "https://pypi.org/project/ts-interface-parser/", "project_urls": {"Homepage": "https://github.com/highkite/ts_interface_parser"}, "release_url": "https://pypi.org/project/ts-interface-parser/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "The typescript interface parser parses interfaces defined in typescript and outputs a JSON object describing the interfaces.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Typescript Interface Parser (and to JSON converter)</h1>\n<p>The typescript interface parser parses interfaces defined in typescript and outputs a JSON object describing the interfaces.</p>\n<p><img alt=\"Preview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5fc4501a17e6c256e5abba7eb6bfa9934d049f8c/2e2f646f63756d656e746174696f6e2f72656e646572313537313133323235363133342e676966\"></p>\n<h2>Features</h2>\n<ul>\n<li>output to file and to stdio</li>\n<li>comments are also considered and provided by the JSON representation</li>\n<li>supports a wide range of typescript syntax (if you find something missing please file a feature request)</li>\n<li>can be easily integrated in your own program for parsing typescript interfaces</li>\n</ul>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a>\n<ol>\n<li><a href=\"#Pypi\" rel=\"nofollow\">Pypi</a></li>\n<li><a href=\"#ManualInstallation\" rel=\"nofollow\">Manual Installation</a></li>\n<li><a href=\"#unittest\" rel=\"nofollow\">Running the Unit Tests</a></li>\n</ol>\n</li>\n<li><a href=\"#json\" rel=\"nofollow\">The JSON Representation</a>\n<ol>\n<li><a href=\"#attributes\" rel=\"nofollow\">Translation of Attributes</a></li>\n<li><a href=\"#index\" rel=\"nofollow\">Indexed Attributes</a></li>\n<li><a href=\"#function\" rel=\"nofollow\">Function Attributes</a></li>\n</ol>\n</li>\n</ol>\n<h3>MISC</h3>\n<p>I needed to communicate with a server via RPC from a Python client, but all valid messages were specified in Typescript interfaces. There were a huge number of different messages and I slowly got bored translating the interfaces manually. So I implemented this translator. Hope it will serve you, as well as it served me.</p>\n<h2><a></a>Installation</h2>\n<h3><a></a>Pypi</h3>\n<h3><a></a>Manual installation</h3>\n<p>Clone the repo and install the requirements with\n<code>pip install -r requirements.txt</code>. Than type <code>python3 ts_interface_parser.py -h</code> to get an overview of the possible options.</p>\n<h3><a></a>Running the Unit Tests</h3>\n<pre><code>python3 -m unittest test.test_parser.TestParser\n</code></pre>\n<h2><a></a>The JSON Representation</h2>\n<p>The general translation works as follows:</p>\n<pre><code>/**\n* &lt;some comment&gt;\n*/\ninterface &lt;interface_name&gt; extends &lt;extension_a&gt;, &lt;extension_b&gt; {\n        &lt;attribute_1&gt; : &lt;type_1&gt;;\n}\n</code></pre>\n<p>is translated to</p>\n<pre><code>{\n        \"&lt;interface_name&gt;\" : {\n                \"description\" : \"&lt;some comment&gt;\",\n                \"extends\": [\n                        \"&lt;extension_a&gt;\",\n                        \"&lt;extension_b&gt;\"\n                ]\n                \"&lt;attribute_1&gt; : {\n                        \"type\" : [\n                                \"&lt;type_1&gt;\"\n                        ]\n                }\n        }\n}\n</code></pre>\n<p>The comment becomes the decsription and potential extensions are provided in the <code>extends</code> field. For every specified attribute an object is added referenced by the name of the attribute. Here <code>&lt;attribute_1&gt;</code>.</p>\n<h3><a></a>Translation of Attributes</h3>\n<p>In the following I give examples of different attribute definitions and how those are translated into JSON.</p>\n<pre><code>interface &lt;interface_name&gt; {\n        &lt;attribute_name_1&gt; : &lt;type_1&gt; | &lt;type_2&gt;; // &lt;comment_1&gt;\n        /**\n        * &lt;comment_2&gt;\n        */\n        &lt;attribute_name_2&gt; : {\n                &lt;attribute_name_3&gt; : &lt;type_3&gt;\n        }\n\n        &lt;attribute_name_4&gt;? : &lt;type_4&gt;;\n\n        const &lt;attribute_name_5&gt; : &lt;type_5&gt;;\n\n        readonly &lt;attribute_name_6&gt; : &lt;type_6&gt;;\n\n        &lt;attribute_name_7&gt; : \"value 1\" | \"value 2\";\n}\n</code></pre>\n<p>is translated to</p>\n<pre><code>{\n        \"&lt;interface_name&gt;\" : {\n                \"&lt;attribute_name_1&gt;\" : {\n                        \"description\" : \"&lt;comment_1\"&gt;,\n                        \"type\" : [\n                                \"type_1\",\n                                \"type_2\"\n                        ]\n                },\n                \"&lt;attribute_name_2&gt;\" : {\n                        \"description\" : \"&lt;comment_2\"&gt;,\n                        \"type\": {\n                                \"&lt;attribute_name_3&gt;\" : {\n                                        \"type\" : [\n                                                \"type_3\"\n                                        ]\n                                }\n                        }\n                },\n                \"&lt;attribute_name_4&gt;\" : {\n                        \"optional\" : true,\n                        \"type\" : [\n                                \"&lt;type_4&gt;\"\n                        ]\n                },\n                \"&lt;attribute_name_5&gt;\" : {\n                        \"constant\" : true,\n                        \"type\" : [\n                                \"&lt;type_5&gt;\"\n                        ]\n                },\n                \"&lt;attribute_name_6&gt;\" : {\n                        \"readonly\" : true,\n                        \"type\" : [\n                                \"&lt;type_6&gt;\"\n                        ]\n                },\n                \"&lt;attribute_name_7&gt;\" : {\n                        \"type\" : [\n                                \"'value 1'\",\n                                \"'value 2'\",\n                        ]\n                }\n        }\n}\n</code></pre>\n<h4><a></a>Indexed Attributes</h4>\n<pre><code>interface ReadonlyStringArray {\n        [index: number]: string;\n}\n</code></pre>\n<p>The indexed attribute is named with the variable name within the square brackets. The attribute has a field <code>indexed</code> which contains the index type and the type the index is refering to.</p>\n<pre><code>{\n        \"ReadonlyStringArray\": {\n                \"index\": {\n                        \"indexed\": {\n                                \"type\": [\n                                        \"number\"\n                                ]\n                        },\n                        \"type\": [\n                                \"string\"\n                        ]\n                }\n        }\n}\n</code></pre>\n<h4><a></a>Function Attributes</h4>\n<p>Functions are marked by a field <code>function</code> in the JSON representation of the function. Thus</p>\n<pre><code>interface ClockInterface {\n        setTime(d: Date): void;\n}\n</code></pre>\n<p>translates to</p>\n<pre><code>{\n        \"ClockInterface\": {\n                \"setTime\": {\n                        \"function\": true,\n                        \"parameters\": {\n                                \"d\": {\n                                        \"type\": [\n                                                \"Date\"\n                                        ]\n                                }\n                        },\n                        \"type\": [\n                                \"void\"\n                        ]\n                }\n}\n</code></pre>\n<p>For anonymous function declarations, as for instance:</p>\n<pre><code>interface SearchFunc{\n        (source: string, subString: string): boolean;\n}\n</code></pre>\n<p>This interface is translated to:</p>\n<pre><code>{\n        \"SearchFunc\": {\n                \"anonymous_function\": {\n                    \"function\": true,\n                    \"parameters\": {\n                        \"source\": {\n                            \"type\": [\n                                \"string\"\n                            ]\n                        },\n                        \"subString\": {\n                            \"type\": [\n                                \"string\"\n                            ]\n                        }\n                    },\n                    \"type\": [\n                        \"boolean\"\n                    ]\n                }\n        }\n}\n</code></pre>\n\n          </div>"}, "last_serial": 5976091, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3d6021254925e8d43006d713ba3f8ea2", "sha256": "a43c90661f9deb32fba5617c94f42a49a03b662766bfce36e8460c71f6914efe"}, "downloads": -1, "filename": "ts_interface_parser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d6021254925e8d43006d713ba3f8ea2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5356, "upload_time": "2019-10-15T10:28:38", "upload_time_iso_8601": "2019-10-15T10:28:38.248580Z", "url": "https://files.pythonhosted.org/packages/29/82/e06ab1d8e9b4fe0fa70b74ce82777be976f42781d8a70737a5b4c6f44534/ts_interface_parser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ae7e4e87ba9840475ccda503f9279b7", "sha256": "5f4c7b2425441df2204b9e1bcada7ce5ccd7b2b25beba0e39db8e592c22589bd"}, "downloads": -1, "filename": "ts_interface_parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1ae7e4e87ba9840475ccda503f9279b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4494, "upload_time": "2019-10-15T10:28:41", "upload_time_iso_8601": "2019-10-15T10:28:41.082227Z", "url": "https://files.pythonhosted.org/packages/05/ef/03cb70743e53ca6a47a2be01dc56d3a8ffc6a660b8269643f741b12e81f4/ts_interface_parser-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d6021254925e8d43006d713ba3f8ea2", "sha256": "a43c90661f9deb32fba5617c94f42a49a03b662766bfce36e8460c71f6914efe"}, "downloads": -1, "filename": "ts_interface_parser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d6021254925e8d43006d713ba3f8ea2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5356, "upload_time": "2019-10-15T10:28:38", "upload_time_iso_8601": "2019-10-15T10:28:38.248580Z", "url": "https://files.pythonhosted.org/packages/29/82/e06ab1d8e9b4fe0fa70b74ce82777be976f42781d8a70737a5b4c6f44534/ts_interface_parser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ae7e4e87ba9840475ccda503f9279b7", "sha256": "5f4c7b2425441df2204b9e1bcada7ce5ccd7b2b25beba0e39db8e592c22589bd"}, "downloads": -1, "filename": "ts_interface_parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1ae7e4e87ba9840475ccda503f9279b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4494, "upload_time": "2019-10-15T10:28:41", "upload_time_iso_8601": "2019-10-15T10:28:41.082227Z", "url": "https://files.pythonhosted.org/packages/05/ef/03cb70743e53ca6a47a2be01dc56d3a8ffc6a660b8269643f741b12e81f4/ts_interface_parser-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:45:18 2020"}