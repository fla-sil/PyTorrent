{"info": {"author": "Anton Chevychalov", "author_email": "cab@arenadata.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# yspec\n\nyspec is a deadly simple checker for structures. It is especially usefull for validation of different yaml/json files\n\n## Usage from cli\n\n```sh\nyspec ./schema.yaml /tmp/data.json\n```\n\nNOTE: yspec able to take json/yaml/toml for schema and for data\n\n## Usage from code\n\n```python\nfrom yspec.checker import process_rule\n\n# Some code that prepares data and rules\n\nprocess_rule(data, rules, 'root')\n```\n\n## Schema Format\n\nSchema is a dict of rules. Every rule do some check according to 'match' field. Schema must include 'root' rule which is applied on top object in structure.\n\nFor example structure (in YAML):\n\n```yaml\n---\n- 'string1'\n- 'string2'\n\n```\n\nwill be valid for schema (in YAML):\n\n```yaml\n---\nroot:\n  match: list\n  item: string\n\nstring:\n  match: string\n```\n\n## Match Rules\n\n### Simple type matches\n\n#### String\n\n```yaml\nmy_awesome_string:\n  match: string\n```\n\n#### Boolean\n\n```yaml\nmy_awesome_bool:\n  match: bool\n```\n\n#### Integer\n\n```yaml\nmy_awesome_int:\n  match: int\n```\n\n#### Float\n\n```yaml\nmy_awesome_float:\n  match: float\n```\n\n### Recursion type matches\n\nThere are two of them: dict and list. Both has the same recursion logic. At first we apply some checks on object itself, and then apply another (or the same) rule to childrens (list elements, or values of dict).\n\n#### List\n\n```yaml\nmy_list:\n  match: list\n  item: some_other_rule\n```\n\nList is a recurent type. Fist it checks is the object a list, then it check every element according to rule in 'item' attr.\n\n\n#### Dict\n\n```yaml\nmy_list:\n  match: dict\n  items:\n    key1: string_rule\n    key2: integer_rule\n  default_item: some_other_rule\n  required_items:\n    - key2\n```\n\nThat is a rule that describe a dict that has two keys (key1 and key2). One of keys (key2) is mandatory. Key1 should be checked according to 'string_rule' rule, while any other keys with any other (non key1 or key2) name will be checked according to some_other_rule.\n\n\nIf we has remove default_item\n```yaml\nmy_list:\n  match: dict\n  items:\n    key1: string_rule\n    key2: integer_rule\n  required_items:\n    - key2\n```\n\nA dict could be with two keys (key1, key2) maximum\n\n\n### Sample of simple and recursion matches\n\nSchema:\n\n```yaml\n---\nboolean:\n  match: bool\n\nstring:\n  match: string\n\ninteger:\n  match: int\n\nfloat:\n  match: float\n\nlist:\n  match: list\n  item: string\n\nroot:\n  match: dict\n  items:\n    key1: boolean\n    key2: string\n    key3: integer\n    key4: float\n    key5: list\n```\n\nData:\n```yaml\n---\nkey1: true\nkey2: \"That is a string\"\nkey3: 1\nkey4: 1.0\nkey5:\n  - \"One more string\"\n  - \"Another string\"\n```\n\n### Special matches\n\n#### OneOf match\n\n```yaml\nconstraint_list_item:\n  match: one_of\n  variants:\n    - integer_rule\n    - some_other_rule\n```\n\nOneOf match success if any of rules from \"variants\" success.\n\n#### Dict key selection\n\nSome times you need to do a separate checks for dict that have some key/value pair.\n\nFor example you have the following data:\n```yaml\n---\n- type: type1\n  payload:\n    - 1\n    - 1\n- type: type2\n  payload:\n    - \"that is a string\"\n    - \"that is a string2\"\n```\n\nIn that example you have a dict wich has diffent payload depends of type key. That is possible to describe with following schema:\n\n```yaml\n---\nroot:\n  match: list\n  item: list_item\n\nlist_item:\n  match: dict_key_selection\n  selector: type\n  variants:\n    type1: dict_with_int\n    type2: dict_with_string\n\ndict_with_int:\n  match: dict\n  items:\n    type: string\n    payload: list_of_int\n  required_items:\n    - type\n    - payload\n\ndict_with_string:\n  match: dict\n  items:\n    type: string\n    payload: list_of_string\n  required_items:\n    - type\n    - payload\n\n\nlist_of_int:\n  match: list\n  item: int\n\nint:\n  match: int\n\nlist_of_string:\n  match: list\n  item: string\n\nstring:\n  match: string\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arenadata/yspec", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "yspec", "package_url": "https://pypi.org/project/yspec/", "platform": "", "project_url": "https://pypi.org/project/yspec/", "project_urls": {"Homepage": "https://github.com/arenadata/yspec"}, "release_url": "https://pypi.org/project/yspec/0.1.0/", "requires_dist": ["pyyaml"], "requires_python": "", "summary": "YAML structure validator", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>yspec</h1>\n<p>yspec is a deadly simple checker for structures. It is especially usefull for validation of different yaml/json files</p>\n<h2>Usage from cli</h2>\n<pre>yspec ./schema.yaml /tmp/data.json\n</pre>\n<p>NOTE: yspec able to take json/yaml/toml for schema and for data</p>\n<h2>Usage from code</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yspec.checker</span> <span class=\"kn\">import</span> <span class=\"n\">process_rule</span>\n\n<span class=\"c1\"># Some code that prepares data and rules</span>\n\n<span class=\"n\">process_rule</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">rules</span><span class=\"p\">,</span> <span class=\"s1\">'root'</span><span class=\"p\">)</span>\n</pre>\n<h2>Schema Format</h2>\n<p>Schema is a dict of rules. Every rule do some check according to 'match' field. Schema must include 'root' rule which is applied on top object in structure.</p>\n<p>For example structure (in YAML):</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">'string1'</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"s\">'string2'</span>\n</pre>\n<p>will be valid for schema (in YAML):</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">root</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n  <span class=\"nt\">item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n\n<span class=\"nt\">string</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n</pre>\n<h2>Match Rules</h2>\n<h3>Simple type matches</h3>\n<h4>String</h4>\n<pre><span class=\"nt\">my_awesome_string</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n</pre>\n<h4>Boolean</h4>\n<pre><span class=\"nt\">my_awesome_bool</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bool</span>\n</pre>\n<h4>Integer</h4>\n<pre><span class=\"nt\">my_awesome_int</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">int</span>\n</pre>\n<h4>Float</h4>\n<pre><span class=\"nt\">my_awesome_float</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">float</span>\n</pre>\n<h3>Recursion type matches</h3>\n<p>There are two of them: dict and list. Both has the same recursion logic. At first we apply some checks on object itself, and then apply another (or the same) rule to childrens (list elements, or values of dict).</p>\n<h4>List</h4>\n<pre><span class=\"nt\">my_list</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n  <span class=\"nt\">item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">some_other_rule</span>\n</pre>\n<p>List is a recurent type. Fist it checks is the object a list, then it check every element according to rule in 'item' attr.</p>\n<h4>Dict</h4>\n<pre><span class=\"nt\">my_list</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict</span>\n  <span class=\"nt\">items</span><span class=\"p\">:</span>\n    <span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string_rule</span>\n    <span class=\"nt\">key2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">integer_rule</span>\n  <span class=\"nt\">default_item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">some_other_rule</span>\n  <span class=\"nt\">required_items</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">key2</span>\n</pre>\n<p>That is a rule that describe a dict that has two keys (key1 and key2). One of keys (key2) is mandatory. Key1 should be checked according to 'string_rule' rule, while any other keys with any other (non key1 or key2) name will be checked according to some_other_rule.</p>\n<p>If we has remove default_item</p>\n<pre><span class=\"nt\">my_list</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict</span>\n  <span class=\"nt\">items</span><span class=\"p\">:</span>\n    <span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string_rule</span>\n    <span class=\"nt\">key2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">integer_rule</span>\n  <span class=\"nt\">required_items</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">key2</span>\n</pre>\n<p>A dict could be with two keys (key1, key2) maximum</p>\n<h3>Sample of simple and recursion matches</h3>\n<p>Schema:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">boolean</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bool</span>\n\n<span class=\"nt\">string</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n\n<span class=\"nt\">integer</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">int</span>\n\n<span class=\"nt\">float</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">float</span>\n\n<span class=\"nt\">list</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n  <span class=\"nt\">item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n\n<span class=\"nt\">root</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict</span>\n  <span class=\"nt\">items</span><span class=\"p\">:</span>\n    <span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">boolean</span>\n    <span class=\"nt\">key2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n    <span class=\"nt\">key3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">integer</span>\n    <span class=\"nt\">key4</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">float</span>\n    <span class=\"nt\">key5</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n</pre>\n<p>Data:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n<span class=\"nt\">key2</span><span class=\"p\">:</span> <span class=\"s\">\"That</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">string\"</span>\n<span class=\"nt\">key3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n<span class=\"nt\">key4</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0</span>\n<span class=\"nt\">key5</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"One</span><span class=\"nv\"> </span><span class=\"s\">more</span><span class=\"nv\"> </span><span class=\"s\">string\"</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"Another</span><span class=\"nv\"> </span><span class=\"s\">string\"</span>\n</pre>\n<h3>Special matches</h3>\n<h4>OneOf match</h4>\n<pre><span class=\"nt\">constraint_list_item</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">one_of</span>\n  <span class=\"nt\">variants</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">integer_rule</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">some_other_rule</span>\n</pre>\n<p>OneOf match success if any of rules from \"variants\" success.</p>\n<h4>Dict key selection</h4>\n<p>Some times you need to do a separate checks for dict that have some key/value pair.</p>\n<p>For example you have the following data:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">type1</span>\n  <span class=\"nt\">payload</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">type2</span>\n  <span class=\"nt\">payload</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"that</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">string\"</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"that</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">string2\"</span>\n</pre>\n<p>In that example you have a dict wich has diffent payload depends of type key. That is possible to describe with following schema:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">root</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n  <span class=\"nt\">item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list_item</span>\n\n<span class=\"nt\">list_item</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict_key_selection</span>\n  <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">type</span>\n  <span class=\"nt\">variants</span><span class=\"p\">:</span>\n    <span class=\"nt\">type1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict_with_int</span>\n    <span class=\"nt\">type2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict_with_string</span>\n\n<span class=\"nt\">dict_with_int</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict</span>\n  <span class=\"nt\">items</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n    <span class=\"nt\">payload</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list_of_int</span>\n  <span class=\"nt\">required_items</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">type</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">payload</span>\n\n<span class=\"nt\">dict_with_string</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dict</span>\n  <span class=\"nt\">items</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n    <span class=\"nt\">payload</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list_of_string</span>\n  <span class=\"nt\">required_items</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">type</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">payload</span>\n\n\n<span class=\"nt\">list_of_int</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n  <span class=\"nt\">item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">int</span>\n\n<span class=\"nt\">int</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">int</span>\n\n<span class=\"nt\">list_of_string</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">list</span>\n  <span class=\"nt\">item</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n\n<span class=\"nt\">string</span><span class=\"p\">:</span>\n  <span class=\"nt\">match</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n</pre>\n\n          </div>"}, "last_serial": 6253950, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "21c78d645285d760e6616fb38a9c964b", "sha256": "c3ac981f954aa790ea96b1959907a1517168678fa975017bf9ccddb9561908b9"}, "downloads": -1, "filename": "yspec-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "21c78d645285d760e6616fb38a9c964b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10082, "upload_time": "2019-08-07T16:08:37", "upload_time_iso_8601": "2019-08-07T16:08:37.919643Z", "url": "https://files.pythonhosted.org/packages/54/eb/bea10c0e450e78616c16156475a5d99f5706058a82e1b898022e1d3550fb/yspec-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d295ef4bbb60d872b722b29404bcd6d", "sha256": "b35d6d80b07aa1892ec23b0f082d4d15ee60894089ae523cab6e40b33de8cd8c"}, "downloads": -1, "filename": "yspec-0.0.7.tar.gz", "has_sig": false, "md5_digest": "2d295ef4bbb60d872b722b29404bcd6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4943, "upload_time": "2019-08-07T16:08:40", "upload_time_iso_8601": "2019-08-07T16:08:40.774477Z", "url": "https://files.pythonhosted.org/packages/31/df/c9b81b8355d80cd80dc0e0ae9ff7135d2364a7232cc1294dea11349b0fcf/yspec-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "ef2fef0c2398eb2e67f7f501b670e86c", "sha256": "81d491c4d67f12401c032ef547a3965497b842a2af2181730c4d0989dd8e866a"}, "downloads": -1, "filename": "yspec-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ef2fef0c2398eb2e67f7f501b670e86c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10178, "upload_time": "2019-12-06T12:33:34", "upload_time_iso_8601": "2019-12-06T12:33:34.936386Z", "url": "https://files.pythonhosted.org/packages/bf/d0/afcf7874a3a98322ffefb90f0d6cab2cc284f3c1070ba7cedff6c1eb5eaa/yspec-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a6b2b82fc30cdef24a9e363b471dcde", "sha256": "c47258e639f50cde32de2c3f415f7c1ac4d2aab7a898699e3e107282fbd75e71"}, "downloads": -1, "filename": "yspec-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8a6b2b82fc30cdef24a9e363b471dcde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5880, "upload_time": "2019-12-06T12:33:36", "upload_time_iso_8601": "2019-12-06T12:33:36.424533Z", "url": "https://files.pythonhosted.org/packages/96/3f/c5b78a477ca05edbb990b46e9b78fb3fe7db4ca1f49de2a32fb9616b1807/yspec-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef2fef0c2398eb2e67f7f501b670e86c", "sha256": "81d491c4d67f12401c032ef547a3965497b842a2af2181730c4d0989dd8e866a"}, "downloads": -1, "filename": "yspec-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ef2fef0c2398eb2e67f7f501b670e86c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10178, "upload_time": "2019-12-06T12:33:34", "upload_time_iso_8601": "2019-12-06T12:33:34.936386Z", "url": "https://files.pythonhosted.org/packages/bf/d0/afcf7874a3a98322ffefb90f0d6cab2cc284f3c1070ba7cedff6c1eb5eaa/yspec-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a6b2b82fc30cdef24a9e363b471dcde", "sha256": "c47258e639f50cde32de2c3f415f7c1ac4d2aab7a898699e3e107282fbd75e71"}, "downloads": -1, "filename": "yspec-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8a6b2b82fc30cdef24a9e363b471dcde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5880, "upload_time": "2019-12-06T12:33:36", "upload_time_iso_8601": "2019-12-06T12:33:36.424533Z", "url": "https://files.pythonhosted.org/packages/96/3f/c5b78a477ca05edbb990b46e9b78fb3fe7db4ca1f49de2a32fb9616b1807/yspec-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:35 2020"}