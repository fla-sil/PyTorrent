{"info": {"author": "Nicholas Boucher, Luka Govedi\u010d, Pasapol Saowakon, Kyle Swanson", "author_email": "swansonk.14@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Damgard-Jurik\n\nAn implementation of the threshold variant of the [Damgard-Jurik](https://people.csail.mit.edu/rivest/voting/papers/DamgardJurikNielsen-AGeneralizationOfPailliersPublicKeySystemWithApplicationsToElectronicVoting.pdf) homomorphic encryption cryptosystem.\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Public and Private Keys](#public-and-private-keys)\n* [Key Generation](#key-generation)\n* [Encryption and Decryption](#encryption-and-decryption)\n* [Homomorphic Operations](#homomorphic-operations)\n\n## Installation\n\nRequires Python 3.6+.\n\n```bash\npip install damgard-jurik\n```\n\nAlternatively, the code can be cloned and installed locally as follows.\n\n```bash\ngit clone https://github.com/cryptovoting/damgard-jurik.git\ncd damgard-jurik\npip install -e .\n```\n*Note that the `-e` flag will instruct pip to install the package as \"editable\". That is, when changes are made to any part of the package during development, those changes will immediately be available system-wide on the activated python environment.*\n\nAll requirements for this package should be added to `setup.py`.\n\n## Public and Private Keys\n\nIn the threshold variant of Damgard-Jurik implemented in this repository, a key pair consists of single public key along with a private key that has been split into multiple components using [Shamir's secret sharing](https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing). The public key encrypts messages while the shares of the private key all contribute a portion of the decryption without ever requiring reconstruction of the private key. Thus, trust is distributed among the holders of the private key shares.\n\nIn this implementation, the public key is a `PublicKey` object with an encrypt function while the private key shares are `PrivateKeyShare` objects with a decrypt function that performs a partial decryption using that share of the private key. A `PrivateKeyRing` object holds a set of `PrivateKeyShare`s and contains a decrypt function that calls each `PrivateKeyShare`'s decrypt function and combines the results to obtain the final decryption.\n\n## Key Generation\n\nTo generate a `PublicKey` and the corresponding `PrivateKeyRing`, run the following commands:\n\n```python\nfrom damgard_jurik import keygen\n\npublic_key, private_key_ring = keygen(\n    n_bits=64,\n    s=1,\n    threshold=3,\n    n_shares=3\n)\n```\n\nThe parameters to `keygen` are as follows:\n\n- `n_bits`: The number of bits of encryption used in the public key and private key shares.\n- `s`: The exponent to which the public key parameter `n` is raised (where `n = p * q` is the product of two `n_bits`-bit primes `p` and `q`.). Plaintexts are integers in the space `Z_n^s = {0, 1, ..., n^s - 1}`.\n- `threshold`: The minimum number of private key shares needed to decrypt an encrypted message.\n- `n_shares`: The number of private key shares to generate.\n\n\n## Encryption and Decryption\n\nEncryption and decryption are implemented as methods of the `PublicKey` and `PrivateKeyRing` classes, respectively.\n\nFor example:\n\n```python\nm = 42\nc = public_key.encrypt(m)\nm_prime = private_key_ring.decrypt(c)\n# m_prime = 42\n```\n\nPlaintexts like `m` are simply Python integers while ciphertexts (encrypted plaintexts) like `c` are instances of the `EncryptedNumber` class. `EncryptedNumber` objects contain an encryption of the plaintext along with a reference to the `PublicKey` used to encrypt the plaintext.\n\nAdditionally, the `PublicKey` and `PrivateKingRing` classes have a convenience method for encrypting and decrypting lists of integers, as shown below.\n\n```python\nm_list = [42, 33, 100]\nc_list = public_key.encrypt_list(m_list)\nm_prime_list = private_key_ring.decrypt_list(c_list)\n# m_prime_list = [42, 33, 100]\n```\n\n## Homomorphic Operations\n\nDue to the additively homomorphic nature of the Damgard-Jurik cryptosystem, ciphertexts can be combined in such a way as to obtain an encryption of the sum of the associated plaintexts. Futhermore, ciphertexts can be combined with un-encrypted integers in such a way as to obtain the product of the associated plaintext and the un-encrypted integer. For convenience, the `EncryptedNumber` class has overridden the `+`, `-`, `*`, and `/` operators to implement these operations.\n\nFor example:\n\n```python\nm_1, m_2 = 42, 33\nc_1, c_2 = public_key.encrypt(m_1), public_key.encrypt(m_2)\nc = c_1 + c_2\nm_prime = private_key_ring.decrypt(c)\n# m_prime = 75 = 42 + 33\n```\n\n```python\nm, s = 42, 2\nc = public_key.encrypt(m)\nc_prime = c * s\nm_prime = private_key_ring.decrypt(c_prime)\n# m_prime = 84 = 42 * 2\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cryptovoting/damgard-jurik", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "damgard-jurik", "package_url": "https://pypi.org/project/damgard-jurik/", "platform": "", "project_url": "https://pypi.org/project/damgard-jurik/", "project_urls": {"Homepage": "https://github.com/cryptovoting/damgard-jurik"}, "release_url": "https://pypi.org/project/damgard-jurik/0.0.3/", "requires_dist": ["gmpy2"], "requires_python": "", "summary": "Homomorphic encryption using the threshold variant of the Damgard-Jurik cryptosystem.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Damgard-Jurik</h1>\n<p>An implementation of the threshold variant of the <a href=\"https://people.csail.mit.edu/rivest/voting/papers/DamgardJurikNielsen-AGeneralizationOfPailliersPublicKeySystemWithApplicationsToElectronicVoting.pdf\" rel=\"nofollow\">Damgard-Jurik</a> homomorphic encryption cryptosystem.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#public-and-private-keys\" rel=\"nofollow\">Public and Private Keys</a></li>\n<li><a href=\"#key-generation\" rel=\"nofollow\">Key Generation</a></li>\n<li><a href=\"#encryption-and-decryption\" rel=\"nofollow\">Encryption and Decryption</a></li>\n<li><a href=\"#homomorphic-operations\" rel=\"nofollow\">Homomorphic Operations</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Requires Python 3.6+.</p>\n<pre>pip install damgard-jurik\n</pre>\n<p>Alternatively, the code can be cloned and installed locally as follows.</p>\n<pre>git clone https://github.com/cryptovoting/damgard-jurik.git\n<span class=\"nb\">cd</span> damgard-jurik\npip install -e .\n</pre>\n<p><em>Note that the <code>-e</code> flag will instruct pip to install the package as \"editable\". That is, when changes are made to any part of the package during development, those changes will immediately be available system-wide on the activated python environment.</em></p>\n<p>All requirements for this package should be added to <code>setup.py</code>.</p>\n<h2>Public and Private Keys</h2>\n<p>In the threshold variant of Damgard-Jurik implemented in this repository, a key pair consists of single public key along with a private key that has been split into multiple components using <a href=\"https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing\" rel=\"nofollow\">Shamir's secret sharing</a>. The public key encrypts messages while the shares of the private key all contribute a portion of the decryption without ever requiring reconstruction of the private key. Thus, trust is distributed among the holders of the private key shares.</p>\n<p>In this implementation, the public key is a <code>PublicKey</code> object with an encrypt function while the private key shares are <code>PrivateKeyShare</code> objects with a decrypt function that performs a partial decryption using that share of the private key. A <code>PrivateKeyRing</code> object holds a set of <code>PrivateKeyShare</code>s and contains a decrypt function that calls each <code>PrivateKeyShare</code>'s decrypt function and combines the results to obtain the final decryption.</p>\n<h2>Key Generation</h2>\n<p>To generate a <code>PublicKey</code> and the corresponding <code>PrivateKeyRing</code>, run the following commands:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">damgard_jurik</span> <span class=\"kn\">import</span> <span class=\"n\">keygen</span>\n\n<span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">private_key_ring</span> <span class=\"o\">=</span> <span class=\"n\">keygen</span><span class=\"p\">(</span>\n    <span class=\"n\">n_bits</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span>\n    <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">n_shares</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The parameters to <code>keygen</code> are as follows:</p>\n<ul>\n<li><code>n_bits</code>: The number of bits of encryption used in the public key and private key shares.</li>\n<li><code>s</code>: The exponent to which the public key parameter <code>n</code> is raised (where <code>n = p * q</code> is the product of two <code>n_bits</code>-bit primes <code>p</code> and <code>q</code>.). Plaintexts are integers in the space <code>Z_n^s = {0, 1, ..., n^s - 1}</code>.</li>\n<li><code>threshold</code>: The minimum number of private key shares needed to decrypt an encrypted message.</li>\n<li><code>n_shares</code>: The number of private key shares to generate.</li>\n</ul>\n<h2>Encryption and Decryption</h2>\n<p>Encryption and decryption are implemented as methods of the <code>PublicKey</code> and <code>PrivateKeyRing</code> classes, respectively.</p>\n<p>For example:</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">m_prime</span> <span class=\"o\">=</span> <span class=\"n\">private_key_ring</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"c1\"># m_prime = 42</span>\n</pre>\n<p>Plaintexts like <code>m</code> are simply Python integers while ciphertexts (encrypted plaintexts) like <code>c</code> are instances of the <code>EncryptedNumber</code> class. <code>EncryptedNumber</code> objects contain an encryption of the plaintext along with a reference to the <code>PublicKey</code> used to encrypt the plaintext.</p>\n<p>Additionally, the <code>PublicKey</code> and <code>PrivateKingRing</code> classes have a convenience method for encrypting and decrypting lists of integers, as shown below.</p>\n<pre><span class=\"n\">m_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"n\">c_list</span> <span class=\"o\">=</span> <span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">encrypt_list</span><span class=\"p\">(</span><span class=\"n\">m_list</span><span class=\"p\">)</span>\n<span class=\"n\">m_prime_list</span> <span class=\"o\">=</span> <span class=\"n\">private_key_ring</span><span class=\"o\">.</span><span class=\"n\">decrypt_list</span><span class=\"p\">(</span><span class=\"n\">c_list</span><span class=\"p\">)</span>\n<span class=\"c1\"># m_prime_list = [42, 33, 100]</span>\n</pre>\n<h2>Homomorphic Operations</h2>\n<p>Due to the additively homomorphic nature of the Damgard-Jurik cryptosystem, ciphertexts can be combined in such a way as to obtain an encryption of the sum of the associated plaintexts. Futhermore, ciphertexts can be combined with un-encrypted integers in such a way as to obtain the product of the associated plaintext and the un-encrypted integer. For convenience, the <code>EncryptedNumber</code> class has overridden the <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code> operators to implement these operations.</p>\n<p>For example:</p>\n<pre><span class=\"n\">m_1</span><span class=\"p\">,</span> <span class=\"n\">m_2</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">33</span>\n<span class=\"n\">c_1</span><span class=\"p\">,</span> <span class=\"n\">c_2</span> <span class=\"o\">=</span> <span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">m_1</span><span class=\"p\">),</span> <span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">m_2</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c_1</span> <span class=\"o\">+</span> <span class=\"n\">c_2</span>\n<span class=\"n\">m_prime</span> <span class=\"o\">=</span> <span class=\"n\">private_key_ring</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"c1\"># m_prime = 75 = 42 + 33</span>\n</pre>\n<pre><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">c_prime</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n<span class=\"n\">m_prime</span> <span class=\"o\">=</span> <span class=\"n\">private_key_ring</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">c_prime</span><span class=\"p\">)</span>\n<span class=\"c1\"># m_prime = 84 = 42 * 2</span>\n</pre>\n\n          </div>"}, "last_serial": 5269966, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "851fe56f0dfbeeae00362f9e310c1651", "sha256": "b40f4a595326fdb22fdc61d06217b6b90d4cf1f164d348e155e1eecf63821ce9"}, "downloads": -1, "filename": "damgard_jurik-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "851fe56f0dfbeeae00362f9e310c1651", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8714, "upload_time": "2019-05-14T04:28:57", "upload_time_iso_8601": "2019-05-14T04:28:57.793376Z", "url": "https://files.pythonhosted.org/packages/f3/ae/f91c02f85decb51329894234b4716f90f2033a3281ed168a6a2b966ba40b/damgard_jurik-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a158155ad781ace93d8361c4fadd1f54", "sha256": "3fdbf9b7f31de848038ba70401e701a1903724a933241fcc14264b42c166a106"}, "downloads": -1, "filename": "damgard_jurik-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a158155ad781ace93d8361c4fadd1f54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11216, "upload_time": "2019-05-15T00:24:12", "upload_time_iso_8601": "2019-05-15T00:24:12.550572Z", "url": "https://files.pythonhosted.org/packages/fc/db/0868e76a8198ea65c3fd88ae8e25ffa9ee429e7d76bbaa62ebc38165e8f7/damgard_jurik-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9f0b6da4bb8ad650559093e8e3d84ed3", "sha256": "326f4a407aee4a181fb29efa9b879434ebb7bd7fa4997c74d07f0bdbd49ca37f"}, "downloads": -1, "filename": "damgard_jurik-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9f0b6da4bb8ad650559093e8e3d84ed3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11271, "upload_time": "2019-05-15T00:50:08", "upload_time_iso_8601": "2019-05-15T00:50:08.266399Z", "url": "https://files.pythonhosted.org/packages/46/d1/90ca19b7302f47ef385c7793ec3d06816b12ebe3d1c2aaf0cacf7772cbf6/damgard_jurik-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f0b6da4bb8ad650559093e8e3d84ed3", "sha256": "326f4a407aee4a181fb29efa9b879434ebb7bd7fa4997c74d07f0bdbd49ca37f"}, "downloads": -1, "filename": "damgard_jurik-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9f0b6da4bb8ad650559093e8e3d84ed3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11271, "upload_time": "2019-05-15T00:50:08", "upload_time_iso_8601": "2019-05-15T00:50:08.266399Z", "url": "https://files.pythonhosted.org/packages/46/d1/90ca19b7302f47ef385c7793ec3d06816b12ebe3d1c2aaf0cacf7772cbf6/damgard_jurik-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:40:45 2020"}