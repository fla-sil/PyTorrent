{"info": {"author": "Charlie DeTar", "author_email": "cfd@mdia.mit.edu", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "==============================================\nescapejson function and django template filter\n==============================================\n\n**JSON is not javascript.** Many developers erroneously think that they can\njust place the output of ``json.dumps(obj)`` inside ``<script>`` tags and be\ngood to go -- but this is dangerously vulnerable to cross-site scripting\nattacks from 2 important edge cases for how JSON differs from javscript: (1)\nthe handling of a literal ``</script>`` within script blocks, and (2) the\nbehavior of two pesky unicode whitespace characters.\n\nThis very simple library provides a function ``escapejson``, and a Django\ntemplate filter of the same name.  The output of ``escapejson`` should be safe\nfor inclusion in HTML ``<script>`` tags, and interpretation directly as\njavascript.\n\nNOTE: this escaping is only \"safe\" if the input is a syntactically valid JSON\nstring.  The output is NOT safe if you pass it invalid JSON, whether from\nuntrusted JSON input or from a broken encoder.  This library does not validate\nthe correctness of the JSON it is fed.  Always use a conformant JSON encoder\n(e.g. ``json.dumps``) to ensure that the JSON is valid to start with.\n\nInstallation\n============\n\n::\n\n    pip install escapejson\n\n\nCompatibility\n-------------\n\n- v0.x: supports python 2.7 and 3.3, and Django < 3.0.\n- v1.x: supports python 3.6+, and Django 1.11+.\n\nDjango is not required for use.\n\n\nUsage\n=====\n\nExample API usage (with or without Django)\n------------------------------------------\n::\n\n    import json\n    from escapejson import escapejson\n\n    my_obj = {'message': '</script><script>alert(\"oh no!\")</script>'}\n    my_str = json.dumps(myobj)\n    my_safe_str = escapejson(my_str)\n\nExample Django templates usage\n------------------------------\n\nFirst, add ``\"escapejson\"`` to ``INSTALLED_APPS`` in your project's ``settings.py``.::\n\n    # settings.py\n    INSTALLED_APPS = [\n        ...,\n        \"escapejson\",\n        ...,\n    ]\n        \n\nThen, use the ``escapejson`` library and filter::\n\n    {% load escapejson %}\n\n    <script>\n        var my_obj = {{obj_or_str|escapejson}};\n    </script>\n\nThis filter will attempt to JSON-encode any non-string object that is passed to it before\nescaping, or just escape any string that is passed to it.\n\n\nWhat it protects against\n========================\n\n</script> attacks\n-----------------\n\nAny string containing a literal ``</script>`` inside javascript within HTML\nscript tags will be interpreted by modern browsers as closing the script tag,\nresulting at best in broken scripts and syntax errors, and at worst in\nfull-blown XSS.  By escaping all ``/`` characters as ``\\/`` (a valid optional\nescape in the JSON spec), this is mitigated.\n\nU+2028 and U+2029\n-----------------\n\nTwo funky unicode whitespace characters count as valid JSON, but cause syntax\nerrors in javascript.  This is mitigated by replacing the literal characters\nwith the strings ``\\u2028`` and ``\\u2029``.\n[`reference <http://timelessrepo.com/json-isnt-a-javascript-subset/>`_]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yourcelf/escapejson", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "escapejson", "package_url": "https://pypi.org/project/escapejson/", "platform": "", "project_url": "https://pypi.org/project/escapejson/", "project_urls": {"Homepage": "https://github.com/yourcelf/escapejson"}, "release_url": "https://pypi.org/project/escapejson/1.0/", "requires_dist": null, "requires_python": "", "summary": "Escape JSON strings for safe execution as literal javascript and inclusion in HTML <script> environments", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>JSON is not javascript.</strong> Many developers erroneously think that they can\njust place the output of <tt>json.dumps(obj)</tt> inside <tt>&lt;script&gt;</tt> tags and be\ngood to go \u2013 but this is dangerously vulnerable to cross-site scripting\nattacks from 2 important edge cases for how JSON differs from javscript: (1)\nthe handling of a literal <tt>&lt;/script&gt;</tt> within script blocks, and (2) the\nbehavior of two pesky unicode whitespace characters.</p>\n<p>This very simple library provides a function <tt>escapejson</tt>, and a Django\ntemplate filter of the same name.  The output of <tt>escapejson</tt> should be safe\nfor inclusion in HTML <tt>&lt;script&gt;</tt> tags, and interpretation directly as\njavascript.</p>\n<p>NOTE: this escaping is only \u201csafe\u201d if the input is a syntactically valid JSON\nstring.  The output is NOT safe if you pass it invalid JSON, whether from\nuntrusted JSON input or from a broken encoder.  This library does not validate\nthe correctness of the JSON it is fed.  Always use a conformant JSON encoder\n(e.g. <tt>json.dumps</tt>) to ensure that the JSON is valid to start with.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install escapejson\n</pre>\n<div id=\"compatibility\">\n<h3>Compatibility</h3>\n<ul>\n<li>v0.x: supports python 2.7 and 3.3, and Django &lt; 3.0.</li>\n<li>v1.x: supports python 3.6+, and Django 1.11+.</li>\n</ul>\n<p>Django is not required for use.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"example-api-usage-with-or-without-django\">\n<h3>Example API usage (with or without Django)</h3>\n<pre>import json\nfrom escapejson import escapejson\n\nmy_obj = {'message': '&lt;/script&gt;&lt;script&gt;alert(\"oh no!\")&lt;/script&gt;'}\nmy_str = json.dumps(myobj)\nmy_safe_str = escapejson(my_str)\n</pre>\n</div>\n<div id=\"example-django-templates-usage\">\n<h3>Example Django templates usage</h3>\n<p>First, add <tt>\"escapejson\"</tt> to <tt>INSTALLED_APPS</tt> in your project\u2019s <tt>settings.py</tt>.:</p>\n<pre># settings.py\nINSTALLED_APPS = [\n    ...,\n    \"escapejson\",\n    ...,\n]\n</pre>\n<p>Then, use the <tt>escapejson</tt> library and filter:</p>\n<pre>{% load escapejson %}\n\n&lt;script&gt;\n    var my_obj = {{obj_or_str|escapejson}};\n&lt;/script&gt;\n</pre>\n<p>This filter will attempt to JSON-encode any non-string object that is passed to it before\nescaping, or just escape any string that is passed to it.</p>\n</div>\n</div>\n<div id=\"what-it-protects-against\">\n<h2>What it protects against</h2>\n<div id=\"script-attacks\">\n<h3>&lt;/script&gt; attacks</h3>\n<p>Any string containing a literal <tt>&lt;/script&gt;</tt> inside javascript within HTML\nscript tags will be interpreted by modern browsers as closing the script tag,\nresulting at best in broken scripts and syntax errors, and at worst in\nfull-blown XSS.  By escaping all <tt>/</tt> characters as <tt>\\/</tt> (a valid optional\nescape in the JSON spec), this is mitigated.</p>\n</div>\n<div id=\"u-2028-and-u-2029\">\n<h3>U+2028 and U+2029</h3>\n<p>Two funky unicode whitespace characters count as valid JSON, but cause syntax\nerrors in javascript.  This is mitigated by replacing the literal characters\nwith the strings <tt>\\u2028</tt> and <tt>\\u2029</tt>.\n[<a href=\"http://timelessrepo.com/json-isnt-a-javascript-subset/\" rel=\"nofollow\">reference</a>]</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6920482, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "acf137dae4469e48c25cc3b0ee58871a", "sha256": "f2726a0177b820d494426d9b29e2a74e3ac3ffa834e4654d4a722ac923ae9d8c"}, "downloads": -1, "filename": "escapejson-0.1.tar.gz", "has_sig": false, "md5_digest": "acf137dae4469e48c25cc3b0ee58871a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4713, "upload_time": "2016-09-09T17:18:45", "upload_time_iso_8601": "2016-09-09T17:18:45.179487Z", "url": "https://files.pythonhosted.org/packages/40/06/1e0c6de4ffc7b6539aba1318d54dde6af3ebe04d5643e26e344fcee20fe6/escapejson-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c2f400945048ac0370d1521f06ea6a59", "sha256": "be5dcf4f92c12582c0893b6af9a5f685b95ebc157ba69fe29bc7718691e0c7d6"}, "downloads": -1, "filename": "escapejson-0.2.tar.gz", "has_sig": false, "md5_digest": "c2f400945048ac0370d1521f06ea6a59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4736, "upload_time": "2016-09-09T17:34:10", "upload_time_iso_8601": "2016-09-09T17:34:10.236723Z", "url": "https://files.pythonhosted.org/packages/66/67/c5405fd7020718795b9e84429d8223104fdbc80b603ea63eb6a5b6072e9b/escapejson-0.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "8730c9ec5eb77b428c4216827ddd82f7", "sha256": "875e951ccbf990e370afe4eb30d4b889ff884037eccbb44656d04e5dfecd57ca"}, "downloads": -1, "filename": "escapejson-1.0.tar.gz", "has_sig": false, "md5_digest": "8730c9ec5eb77b428c4216827ddd82f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4687, "upload_time": "2020-03-31T14:18:30", "upload_time_iso_8601": "2020-03-31T14:18:30.986419Z", "url": "https://files.pythonhosted.org/packages/ac/1a/b0513afa61bb1dce1bee4eeec210a1396e332bc4b382068c708d2c9dd878/escapejson-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8730c9ec5eb77b428c4216827ddd82f7", "sha256": "875e951ccbf990e370afe4eb30d4b889ff884037eccbb44656d04e5dfecd57ca"}, "downloads": -1, "filename": "escapejson-1.0.tar.gz", "has_sig": false, "md5_digest": "8730c9ec5eb77b428c4216827ddd82f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4687, "upload_time": "2020-03-31T14:18:30", "upload_time_iso_8601": "2020-03-31T14:18:30.986419Z", "url": "https://files.pythonhosted.org/packages/ac/1a/b0513afa61bb1dce1bee4eeec210a1396e332bc4b382068c708d2c9dd878/escapejson-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:43 2020"}