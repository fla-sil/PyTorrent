{"info": {"author": "Philip Olson", "author_email": "philip.olson@pm.me", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Pretty SimpleNamespace\n\n<!-- pypiwarn -->\n\n<br>\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**\n\n- [What is it?](#what-is-it)\n- [Why create it?](#why-create-it)\n- [Simple usage](#simple-usage)\n- [Features](#features)\n- [Limitations](#limitations)\n- [Related projects](#related-projects)\n- [Api](#api)\n- [Test](#test)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n<br>\n\n### What is it?\n\n- A stringifier and formatter for SimpleNamespace which attempts to make the\n  data as readable as possible.\n\n<br>\n\n### Why create it?\n\n- I use SimpleNamespace often to hold state and needed a way to print it out for\n  debugging purposes.\n\n<br>\n\n### Simple usage\n\n```py\nfrom pretty_simple_namespace import pprint\nfrom types import SimpleNamespace as o\n\njoe = o(\n    name={\"first\": \"joe\", \"last\": \"schmo\"},\n    age=30,\n    favoriteFoods=[\"apples\", \"steak\"],\n)\n\npprint(joe)\n# prints\n# {\n#   name: {\n#     first: 'joe'\n#     last: 'schmo'\n#   }\n#   age: 30\n#   favoriteFoods: [\n#     'apples'\n#     'steak'\n#   ]\n# }\n```\n\n<br>\n\n### Features\n- handles recursive structures by tracking and printing references nicely\n- recurses into types `list`, `dict` and `SimpleNamespace` for now\n- has special-case printing for types `bool`, `str`, `callable` and `None`\n  - booleans and None are printed lowercase\n  - strings are wrapped in single quotes\n  - callable appends `()` e.g. `myMethod()`.  Arguments aren't represented\n- all other types are printed by wrapping it in `str` e.g. `str(userDefinedType)`\n\n<br>\n\n### Limitations\n- multi-line strings look ugly\n- doesn't have a way to recurse into structures other than what's listed above\n\n<br>\n\n### Related projects\n\n- [tedent](https://github.com/olsonpm/py_tedent)\n\n<br>\n\n### Api\n\n#### format(something, indent=2) => str\n- formats `something` to a string as seen in [Simple usage](#simple-usage)\n\n#### pprint(something, indent=2) => None\n- just prints the formated `something`\n\n#### wrapWith(\\*, indent) => [Wrapped module](#wrapped-module)\n- use this when you want to call `format` or `pprint` with a different default\n  indent value so you don't have to pass it manually all the time.\n\n  e.g.\n  ```py\n  from pretty_simple_namespace import wrapWith\n\n  pprint = wrapWith(indent=4).pprint\n  pprint(o(tabbed4spaces=True))\n  # {\n  #     tabbed4spaces: true\n  # }\n  ```\n\n#### Wrapped module\n- just an instance of SimpleNamespace with two attributes `format` and `pprint`.\n\n<br>\n\n### Test\n\n```sh\n#\n# you must have poetry installed\n#\n$ poetry shell\n$ poetry install\n$ python runTests.py\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/olsonpm/py_pretty-simple-namespace", "keywords": "", "license": "", "maintainer": "Philip Olson", "maintainer_email": "philip.olson@pm.me", "name": "pretty-simple-namespace", "package_url": "https://pypi.org/project/pretty-simple-namespace/", "platform": "", "project_url": "https://pypi.org/project/pretty-simple-namespace/", "project_urls": {"Homepage": "https://github.com/olsonpm/py_pretty-simple-namespace", "Repository": "https://github.com/olsonpm/py_pretty-simple-namespace"}, "release_url": "https://pypi.org/project/pretty-simple-namespace/0.1.1/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "A pretty printer for SimpleNamespace", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pretty SimpleNamespace</h1>\n\n<br>\n\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#what-is-it\" rel=\"nofollow\">What is it?</a></li>\n<li><a href=\"#why-create-it\" rel=\"nofollow\">Why create it?</a></li>\n<li><a href=\"#simple-usage\" rel=\"nofollow\">Simple usage</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#limitations\" rel=\"nofollow\">Limitations</a></li>\n<li><a href=\"#related-projects\" rel=\"nofollow\">Related projects</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">Api</a></li>\n<li><a href=\"#test\" rel=\"nofollow\">Test</a></li>\n</ul>\n\n<br>\n<h3>What is it?</h3>\n<ul>\n<li>A stringifier and formatter for SimpleNamespace which attempts to make the\ndata as readable as possible.</li>\n</ul>\n<br>\n<h3>Why create it?</h3>\n<ul>\n<li>I use SimpleNamespace often to hold state and needed a way to print it out for\ndebugging purposes.</li>\n</ul>\n<br>\n<h3>Simple usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pretty_simple_namespace</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleNamespace</span> <span class=\"k\">as</span> <span class=\"n\">o</span>\n\n<span class=\"n\">joe</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"first\"</span><span class=\"p\">:</span> <span class=\"s2\">\"joe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"last\"</span><span class=\"p\">:</span> <span class=\"s2\">\"schmo\"</span><span class=\"p\">},</span>\n    <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">favoriteFoods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"apples\"</span><span class=\"p\">,</span> <span class=\"s2\">\"steak\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">joe</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#   name: {</span>\n<span class=\"c1\">#     first: 'joe'</span>\n<span class=\"c1\">#     last: 'schmo'</span>\n<span class=\"c1\">#   }</span>\n<span class=\"c1\">#   age: 30</span>\n<span class=\"c1\">#   favoriteFoods: [</span>\n<span class=\"c1\">#     'apples'</span>\n<span class=\"c1\">#     'steak'</span>\n<span class=\"c1\">#   ]</span>\n<span class=\"c1\"># }</span>\n</pre>\n<br>\n<h3>Features</h3>\n<ul>\n<li>handles recursive structures by tracking and printing references nicely</li>\n<li>recurses into types <code>list</code>, <code>dict</code> and <code>SimpleNamespace</code> for now</li>\n<li>has special-case printing for types <code>bool</code>, <code>str</code>, <code>callable</code> and <code>None</code>\n<ul>\n<li>booleans and None are printed lowercase</li>\n<li>strings are wrapped in single quotes</li>\n<li>callable appends <code>()</code> e.g. <code>myMethod()</code>.  Arguments aren't represented</li>\n</ul>\n</li>\n<li>all other types are printed by wrapping it in <code>str</code> e.g. <code>str(userDefinedType)</code></li>\n</ul>\n<br>\n<h3>Limitations</h3>\n<ul>\n<li>multi-line strings look ugly</li>\n<li>doesn't have a way to recurse into structures other than what's listed above</li>\n</ul>\n<br>\n<h3>Related projects</h3>\n<ul>\n<li><a href=\"https://github.com/olsonpm/py_tedent\" rel=\"nofollow\">tedent</a></li>\n</ul>\n<br>\n<h3>Api</h3>\n<h4>format(something, indent=2) =&gt; str</h4>\n<ul>\n<li>formats <code>something</code> to a string as seen in <a href=\"#simple-usage\" rel=\"nofollow\">Simple usage</a></li>\n</ul>\n<h4>pprint(something, indent=2) =&gt; None</h4>\n<ul>\n<li>just prints the formated <code>something</code></li>\n</ul>\n<h4>wrapWith(*, indent) =&gt; <a href=\"#wrapped-module\" rel=\"nofollow\">Wrapped module</a></h4>\n<ul>\n<li>\n<p>use this when you want to call <code>format</code> or <code>pprint</code> with a different default\nindent value so you don't have to pass it manually all the time.</p>\n<p>e.g.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pretty_simple_namespace</span> <span class=\"kn\">import</span> <span class=\"n\">wrapWith</span>\n\n<span class=\"n\">pprint</span> <span class=\"o\">=</span> <span class=\"n\">wrapWith</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pprint</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">(</span><span class=\"n\">tabbed4spaces</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     tabbed4spaces: true</span>\n<span class=\"c1\"># }</span>\n</pre>\n</li>\n</ul>\n<h4>Wrapped module</h4>\n<ul>\n<li>just an instance of SimpleNamespace with two attributes <code>format</code> and <code>pprint</code>.</li>\n</ul>\n<br>\n<h3>Test</h3>\n<pre><span class=\"c1\">#</span>\n<span class=\"c1\"># you must have poetry installed</span>\n<span class=\"c1\">#</span>\n$ poetry shell\n$ poetry install\n$ python runTests.py\n</pre>\n\n          </div>"}, "last_serial": 5289546, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0813c1bbc673e70e28a3d9cdfbd76e2a", "sha256": "e14a2bd752dd866f5cc1b0d1882272d32f589852e78302a7f40a4c67c6f7a06f"}, "downloads": -1, "filename": "pretty_simple_namespace-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0813c1bbc673e70e28a3d9cdfbd76e2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 41127, "upload_time": "2019-01-21T21:15:48", "upload_time_iso_8601": "2019-01-21T21:15:48.403626Z", "url": "https://files.pythonhosted.org/packages/43/56/6b4404464d43e9c0ead712a17cd3b18849d3f4ca663da14626832fe3177d/pretty_simple_namespace-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "933a30cea9907c492b77099259638ad2", "sha256": "56b18a978bb5538d259f3fd10680dec04ddfe8bb59b216af61eaf45ed9598a19"}, "downloads": -1, "filename": "pretty_simple_namespace-0.1.0.tar.gz", "has_sig": false, "md5_digest": "933a30cea9907c492b77099259638ad2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12833, "upload_time": "2019-01-21T21:15:50", "upload_time_iso_8601": "2019-01-21T21:15:50.264063Z", "url": "https://files.pythonhosted.org/packages/da/a9/2b21f1954c7c161231b31b1702f698ddcc85ab7be6e0858e468e940f78d0/pretty_simple_namespace-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c3d1d72716c1debc3799b1070e8a56e9", "sha256": "17cb165fa3a3e55605c6f3204bf077d62fc53a7005afe2de3cb9c4ed6c2718a5"}, "downloads": -1, "filename": "pretty_simple_namespace-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c3d1d72716c1debc3799b1070e8a56e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 1102091, "upload_time": "2019-05-19T20:45:43", "upload_time_iso_8601": "2019-05-19T20:45:43.771974Z", "url": "https://files.pythonhosted.org/packages/b2/8c/461c20ac66fe60e912985ec578fe9cebad62033198e559482d6fc6311ba7/pretty_simple_namespace-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efb4f8fc0f391588fad309f74f2e5c47", "sha256": "7579dcb10091defe84d3702aa0680b8ccf4ee00f93e8b0bf85195a7b93aef4af"}, "downloads": -1, "filename": "pretty_simple_namespace-0.1.1.tar.gz", "has_sig": false, "md5_digest": "efb4f8fc0f391588fad309f74f2e5c47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 914418, "upload_time": "2019-05-19T20:45:46", "upload_time_iso_8601": "2019-05-19T20:45:46.142735Z", "url": "https://files.pythonhosted.org/packages/1e/df/54830ecc0bc254b7a53e160f734fcad933a69c901c42cadaca71892c5369/pretty_simple_namespace-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3d1d72716c1debc3799b1070e8a56e9", "sha256": "17cb165fa3a3e55605c6f3204bf077d62fc53a7005afe2de3cb9c4ed6c2718a5"}, "downloads": -1, "filename": "pretty_simple_namespace-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c3d1d72716c1debc3799b1070e8a56e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 1102091, "upload_time": "2019-05-19T20:45:43", "upload_time_iso_8601": "2019-05-19T20:45:43.771974Z", "url": "https://files.pythonhosted.org/packages/b2/8c/461c20ac66fe60e912985ec578fe9cebad62033198e559482d6fc6311ba7/pretty_simple_namespace-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efb4f8fc0f391588fad309f74f2e5c47", "sha256": "7579dcb10091defe84d3702aa0680b8ccf4ee00f93e8b0bf85195a7b93aef4af"}, "downloads": -1, "filename": "pretty_simple_namespace-0.1.1.tar.gz", "has_sig": false, "md5_digest": "efb4f8fc0f391588fad309f74f2e5c47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 914418, "upload_time": "2019-05-19T20:45:46", "upload_time_iso_8601": "2019-05-19T20:45:46.142735Z", "url": "https://files.pythonhosted.org/packages/1e/df/54830ecc0bc254b7a53e160f734fcad933a69c901c42cadaca71892c5369/pretty_simple_namespace-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:33 2020"}