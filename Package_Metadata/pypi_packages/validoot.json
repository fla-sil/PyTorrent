{"info": {"author": "Ben Meier", "author_email": "benmeier@fastmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "validoot - 1.3\n==============\n\nThis module is designed to solve the most basic of argument validations:\ntypes, clauses, and combinations of clauses. It is meant to remove some\nof the boiler plate code used to check the input types and checks such\nas between, or string lengths.\n\nGithub url: https://github.com/AstromechZA/validoot\n\nPypi url: https://pypi.python.org/pypi/validoot/1.3\n\nDefinitions\n^^^^^^^^^^^\n\n-  Clause - A function that takes in the value as a parameter and\n   returns ``True`` or ``False``.\n-  Operator - Allows you to \u201cand\u201d and \u201cor\u201d clauses together.\n\nBasic example:\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from validoot import validates, inst, typ, between\n\n    @validates(inst(basestring), typ(int), between(0, 100))\n    def do_something(name, id, age):\n        pass\n\nIn the code above, a ``validoot.ValidationError`` will be thrown if the\n``name`` is not a string or unicode, if the ``id`` is not an integer, or\nif the ``age`` is not between 0 and 100.\n\n.. code:: python\n\n    >>> do_something('Darth Vader', 0, 42)\n    >>> do_something('Boba Fett', 1, 123)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"validoot/decorators.py\", line 25, in __call__\n        self.positional_validators[i], args[i], i))\n    validoot.exceptions.ValidationError: Validation <in range [0..100)> failed for value 123 ( arg[2] )\n\nOperators:\n^^^^^^^^^^\n\nWe can extend the first example by adding an additional check for the\n``name``: it must be between 5 and 40 characters. For this we use the\n``validoot.And`` operator to combine the clauses.\n\n.. code:: python\n\n    from validoot import validates, inst, typ, between, len_between, And\n\n    @validates(And(inst(basestring), len_between(5, 40)), typ(int), between(0, 100))\n    def do_something(name, id, age):\n        pass\n\nAn ``Or`` operator also exists. Both ``And`` and ``Or`` take in a\nvariable number of clauses and can be nested further.\n\nOperator shortcuts are provided for joining clauses in a different\nmanner which reads differently (``._and(...)``, ``._or(...)``). So our\nprevious example can be changed to look like this:\n\n.. code:: python\n\n    from validoot import validates, inst, typ, between, len_between\n\n    @validates(inst(basestring)._and(len_between(5, 40)), typ(int), between(0, 100))\n    def do_something(name, id, age):\n        pass\n\nOperators can also be combined in more complicated ways:\n\n.. code:: python\n\n    inst(basestring)._and(len_between(5, 40))._or(typ(int))\n\nKeyword arguments:\n^^^^^^^^^^^^^^^^^^\n\nThere is also support for keyword arguments:\n\n.. code:: python\n\n    from validoot import validates, inst, typ\n\n    @validates(inst(basestring), something=typ(float))\n    def do_something(name, something=1.0, anotherthing=2):\n        pass\n\nHere the ``something`` value must pass the validation checks as\nspecified in the decorator. No checks exist for ``anotherthing`` so it\nhas no restrictions.\n\nDecorating Class/Static/Instance methods or Constructors:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMethods belonging to classes can be validated as well in exactly the same way\nas the examples above. Please make note of the order of the ``@validates``\ndecorator and other decorators such as ``@classmethod`` or ``@staticmethod``.\n\n.. code:: python\n\n    class SomeClass(object):\n\n        # classmethod MUST be the innermost decorator!\n        @validates(typ(int))\n        @classmethod\n        def some_class_method(cls, an_integer):\n            return an_integer\n\n        # staticmethod can be outer or inner decorator\n        @staticmethod\n        @validates(typ(float))\n        def some_static_method(a_floater):\n            return a_floater\n\n        @validates(typ(string))\n        def some_instance_method(self, a_string):\n            return a_string\n\nIn order to validate arguments passed through to a constructor, the validates\ndecorator should be places on the class itself:\n\n.. code:: python\n\n    @validates(typ(string))\n    class SomeClass(object):\n\n        def __init__(self, username):\n            self.username = username\n\nAdditional Clauses:\n^^^^^^^^^^^^^^^^^^^\n\nThere are some more complex clauses included with the package:\n\n-  ``_`` : The underscore only allows ``NoneType``.\n-  ``numeric`` : Only accepts ``int``, ``float``, or ``long`` types.\n-  ``text`` : Only accepts instances of ``basestring`` (Python 2) or\n   ``str`` (Python 3).\n-  ``positive`` : Only positive numbers\n-  ``negative`` : Only positive numbers\n-  ``email_address`` : Simple regex email check (covers most basic examples)\n-  ``ip_address`` : Only accept an IPv4 address\n-  ``url`` : Simple regex url check (covers most basic examples)\n\nThese can be found in the ``validoot.builtins`` module.\n\nFAQ:\n^^^^\n\nWhat if I don\u2019t want validation for one of the position arguments?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSimple. Just use ``None``.\n\n.. code:: python\n\n    from validoot import validates, inst, between\n\n    @validates(inst(basestring), None, between(0, 100))\n    def do_something(name, id, age):\n        pass\n\nWhat validation clauses are built in?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  ``typ(t)`` - value must be of exact type ``t``\n-  ``inst(t)`` - value must be of exact type ``t`` or of a subclass\n-  ``between(lower, upper, lower_inc=True, upper_inc=False)`` - the\n   value must between ``lower`` and ``upper``. ``lower_inc`` and ``upper_inc``\n   indicate range inclusivity.\n-  ``len_between(...)`` - identical to ``between`` but uses\n   ``len(value)``\n-  ``regex(string)`` - value must match the regex string provided\n-  ``list_of(v)`` - value must be a list of objects that pass the validation ``v``\n-  ``dict_of(v1, v2)`` - value must be a dictionary where each key passes validation ``v1`` and each value passes validation ``v2``\n\n\nHow do I create my own validation clauses?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe built in clauses provided by Validoot are all subclasses of the\n``validoot.clauses.Clause`` object. Check out its source code to see\nhow they work. Technically clauses can be any callable object so plain\nfunctions or lambdas also work.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/AstromechZA/validoot/tarball/1.3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/AstromechZA/validoot", "keywords": "validate,function arguments,decorator", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "validoot", "package_url": "https://pypi.org/project/validoot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/validoot/", "project_urls": {"Download": "https://github.com/AstromechZA/validoot/tarball/1.3", "Homepage": "http://github.com/AstromechZA/validoot"}, "release_url": "https://pypi.org/project/validoot/1.3/", "requires_dist": null, "requires_python": null, "summary": "Simple validation for function arguments using a decorator.", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module is designed to solve the most basic of argument validations:\ntypes, clauses, and combinations of clauses. It is meant to remove some\nof the boiler plate code used to check the input types and checks such\nas between, or string lengths.</p>\n<p>Github url: <a href=\"https://github.com/AstromechZA/validoot\" rel=\"nofollow\">https://github.com/AstromechZA/validoot</a></p>\n<p>Pypi url: <a href=\"https://pypi.python.org/pypi/validoot/1.3\" rel=\"nofollow\">https://pypi.python.org/pypi/validoot/1.3</a></p>\n<div id=\"definitions\">\n<h2>Definitions</h2>\n<ul>\n<li>Clause - A function that takes in the value as a parameter and\nreturns <tt>True</tt> or <tt>False</tt>.</li>\n<li>Operator - Allows you to \u201cand\u201d and \u201cor\u201d clauses together.</li>\n</ul>\n</div>\n<div id=\"basic-example\">\n<h2>Basic example:</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">validoot</span> <span class=\"kn\">import</span> <span class=\"n\">validates</span><span class=\"p\">,</span> <span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"n\">between</span>\n\n<span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">basestring</span><span class=\"p\">),</span> <span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>In the code above, a <tt>validoot.ValidationError</tt> will be thrown if the\n<tt>name</tt> is not a string or unicode, if the <tt>id</tt> is not an integer, or\nif the <tt>age</tt> is not between 0 and 100.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"s1\">'Darth Vader'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"s1\">'Boba Fett'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"validoot/decorators.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">positional_validators</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n<span class=\"n\">validoot</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">Validation</span> <span class=\"o\">&lt;</span><span class=\"ow\">in</span> <span class=\"nb\">range</span> <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"o\">.</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">failed</span> <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"mi\">123</span> <span class=\"p\">(</span> <span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"operators\">\n<h2>Operators:</h2>\n<p>We can extend the first example by adding an additional check for the\n<tt>name</tt>: it must be between 5 and 40 characters. For this we use the\n<tt>validoot.And</tt> operator to combine the clauses.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">validoot</span> <span class=\"kn\">import</span> <span class=\"n\">validates</span><span class=\"p\">,</span> <span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"n\">between</span><span class=\"p\">,</span> <span class=\"n\">len_between</span><span class=\"p\">,</span> <span class=\"n\">And</span>\n\n<span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">basestring</span><span class=\"p\">),</span> <span class=\"n\">len_between</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)),</span> <span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>An <tt>Or</tt> operator also exists. Both <tt>And</tt> and <tt>Or</tt> take in a\nvariable number of clauses and can be nested further.</p>\n<p>Operator shortcuts are provided for joining clauses in a different\nmanner which reads differently (<tt><span class=\"pre\">._and(...)</span></tt>, <tt><span class=\"pre\">._or(...)</span></tt>). So our\nprevious example can be changed to look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">validoot</span> <span class=\"kn\">import</span> <span class=\"n\">validates</span><span class=\"p\">,</span> <span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"n\">between</span><span class=\"p\">,</span> <span class=\"n\">len_between</span>\n\n<span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">basestring</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_and</span><span class=\"p\">(</span><span class=\"n\">len_between</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)),</span> <span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Operators can also be combined in more complicated ways:</p>\n<pre><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">basestring</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_and</span><span class=\"p\">(</span><span class=\"n\">len_between</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">_or</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"keyword-arguments\">\n<h2>Keyword arguments:</h2>\n<p>There is also support for keyword arguments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">validoot</span> <span class=\"kn\">import</span> <span class=\"n\">validates</span><span class=\"p\">,</span> <span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">typ</span>\n\n<span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">basestring</span><span class=\"p\">),</span> <span class=\"n\">something</span><span class=\"o\">=</span><span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">something</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">anotherthing</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Here the <tt>something</tt> value must pass the validation checks as\nspecified in the decorator. No checks exist for <tt>anotherthing</tt> so it\nhas no restrictions.</p>\n</div>\n<div id=\"decorating-class-static-instance-methods-or-constructors\">\n<h2>Decorating Class/Static/Instance methods or Constructors:</h2>\n<p>Methods belonging to classes can be validated as well in exactly the same way\nas the examples above. Please make note of the order of the <tt>@validates</tt>\ndecorator and other decorators such as <tt>@classmethod</tt> or <tt>@staticmethod</tt>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># classmethod MUST be the innermost decorator!</span>\n    <span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_class_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">an_integer</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">an_integer</span>\n\n    <span class=\"c1\"># staticmethod can be outer or inner decorator</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_static_method</span><span class=\"p\">(</span><span class=\"n\">a_floater</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">a_floater</span>\n\n    <span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_instance_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a_string</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">a_string</span>\n</pre>\n<p>In order to validate arguments passed through to a constructor, the validates\ndecorator should be places on the class itself:</p>\n<pre><span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">))</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">username</span>\n</pre>\n</div>\n<div id=\"additional-clauses\">\n<h2>Additional Clauses:</h2>\n<p>There are some more complex clauses included with the package:</p>\n<ul>\n<li><tt>_</tt> : The underscore only allows <tt>NoneType</tt>.</li>\n<li><tt>numeric</tt> : Only accepts <tt>int</tt>, <tt>float</tt>, or <tt>long</tt> types.</li>\n<li><tt>text</tt> : Only accepts instances of <tt>basestring</tt> (Python 2) or\n<tt>str</tt> (Python 3).</li>\n<li><tt>positive</tt> : Only positive numbers</li>\n<li><tt>negative</tt> : Only positive numbers</li>\n<li><tt>email_address</tt> : Simple regex email check (covers most basic examples)</li>\n<li><tt>ip_address</tt> : Only accept an IPv4 address</li>\n<li><tt>url</tt> : Simple regex url check (covers most basic examples)</li>\n</ul>\n<p>These can be found in the <tt>validoot.builtins</tt> module.</p>\n</div>\n<div id=\"faq\">\n<h2>FAQ:</h2>\n<div id=\"what-if-i-dont-want-validation-for-one-of-the-position-arguments\">\n<h3>What if I don\u2019t want validation for one of the position arguments?</h3>\n<p>Simple. Just use <tt>None</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">validoot</span> <span class=\"kn\">import</span> <span class=\"n\">validates</span><span class=\"p\">,</span> <span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">between</span>\n\n<span class=\"nd\">@validates</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">basestring</span><span class=\"p\">),</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"what-validation-clauses-are-built-in\">\n<h3>What validation clauses are built in?</h3>\n<ul>\n<li><tt>typ(t)</tt> - value must be of exact type <tt>t</tt></li>\n<li><tt>inst(t)</tt> - value must be of exact type <tt>t</tt> or of a subclass</li>\n<li><tt>between(lower, upper, lower_inc=True, upper_inc=False)</tt> - the\nvalue must between <tt>lower</tt> and <tt>upper</tt>. <tt>lower_inc</tt> and <tt>upper_inc</tt>\nindicate range inclusivity.</li>\n<li><tt><span class=\"pre\">len_between(...)</span></tt> - identical to <tt>between</tt> but uses\n<tt>len(value)</tt></li>\n<li><tt>regex(string)</tt> - value must match the regex string provided</li>\n<li><tt>list_of(v)</tt> - value must be a list of objects that pass the validation <tt>v</tt></li>\n<li><tt>dict_of(v1, v2)</tt> - value must be a dictionary where each key passes validation <tt>v1</tt> and each value passes validation <tt>v2</tt></li>\n</ul>\n</div>\n<div id=\"how-do-i-create-my-own-validation-clauses\">\n<h3>How do I create my own validation clauses?</h3>\n<p>The built in clauses provided by Validoot are all subclasses of the\n<tt>validoot.clauses.Clause</tt> object. Check out its source code to see\nhow they work. Technically clauses can be any callable object so plain\nfunctions or lambdas also work.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1491766, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "d12c8b09e202b2f04884f5e841c476c5", "sha256": "552d578f70d6239c4698a34c0f5b049a8d771f36472191312bf70824886fc14e"}, "downloads": -1, "filename": "validoot-1.0.tar.gz", "has_sig": false, "md5_digest": "d12c8b09e202b2f04884f5e841c476c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4525, "upload_time": "2015-03-08T17:00:56", "upload_time_iso_8601": "2015-03-08T17:00:56.177609Z", "url": "https://files.pythonhosted.org/packages/5b/b4/585fd80ebec376947c0268d84280a8ebf36c138f41bdebf7b82eac96c4cf/validoot-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a665cd7ad9793c0664c57fe58047a4d3", "sha256": "36d4ffd92df77b81a23a6b0f3cf8de0ae98a1ae2626108f8bd10fbabada4b19a"}, "downloads": -1, "filename": "validoot-1.1.tar.gz", "has_sig": false, "md5_digest": "a665cd7ad9793c0664c57fe58047a4d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5331, "upload_time": "2015-03-27T21:18:53", "upload_time_iso_8601": "2015-03-27T21:18:53.527541Z", "url": "https://files.pythonhosted.org/packages/a9/e4/02ed6228bb82850ace1217b7a2ff2cae3cb2ab955933d5b279c8b29a4af1/validoot-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "ceeffcc177a7984a166eb5453b5fa980", "sha256": "c89db89eceb3bb0bf7261ea582766d1d3551a4ee238335817310d4c8369332ec"}, "downloads": -1, "filename": "validoot-1.2.tar.gz", "has_sig": false, "md5_digest": "ceeffcc177a7984a166eb5453b5fa980", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5966, "upload_time": "2015-03-29T19:28:08", "upload_time_iso_8601": "2015-03-29T19:28:08.208336Z", "url": "https://files.pythonhosted.org/packages/62/f4/3ff4853e8277814bb991d02007e91112386ea6cb3b6106d4638c4d0774a7/validoot-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "1c3df44e559621c5e88cb449d23745b7", "sha256": "4f10e501b1f4e2e964eb8c5b67c011ce6f8ff2e4b11669818c93275880e3186a"}, "downloads": -1, "filename": "validoot-1.3.tar.gz", "has_sig": false, "md5_digest": "1c3df44e559621c5e88cb449d23745b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7431, "upload_time": "2015-04-05T13:59:57", "upload_time_iso_8601": "2015-04-05T13:59:57.993006Z", "url": "https://files.pythonhosted.org/packages/41/e1/5830049afb24169d0343fe200c904990744e1000629b5c75c5fca14667b1/validoot-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c3df44e559621c5e88cb449d23745b7", "sha256": "4f10e501b1f4e2e964eb8c5b67c011ce6f8ff2e4b11669818c93275880e3186a"}, "downloads": -1, "filename": "validoot-1.3.tar.gz", "has_sig": false, "md5_digest": "1c3df44e559621c5e88cb449d23745b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7431, "upload_time": "2015-04-05T13:59:57", "upload_time_iso_8601": "2015-04-05T13:59:57.993006Z", "url": "https://files.pythonhosted.org/packages/41/e1/5830049afb24169d0343fe200c904990744e1000629b5c75c5fca14667b1/validoot-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:03 2020"}