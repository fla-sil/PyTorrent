{"info": {"author": "Mike Malinowski", "author_email": "mike@twisted.space", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Overview\n\nXpf is an interface to perforce which offers the following benefits:\n\n* Pure python, no compiled dependencies (allow for use in Python 2, Python 3, Max, Maya & Motion Builder etc)\n\n* Failsafe calls - this module will not raise errors if the perforce server is in-accessible.\n\n* PyPi distribution making it easier for sharing tools with outsourcers\n\n\n# Installation\n\nEither download and place somewhere in your PYTHONPATH or install via pypi:\n\n```pip install xpf```\n\n\n# Why not P4Python\n\nPerforce offers its own p4Python module which is a well established and\nstable library.\n\nThe downside to P4Python is that its a compiled library and therefore requires\ndifferent distributions if you're jumping between Python 2.x and Python 3.x\n\nThis is further exasperated when wanting to utilise perforce integrations into\ntools built within embedded interpreters such as Autodesk Maya/Max/Motionbuilder\nwhich are all compiled against different compiler versions than the native\npython distributions.\n\nThe other benefit xpf brings is that its has a soft requirement on perforce.\nIts common place to want to embed perforce support into tools within\napplications such as Max/Maya but it opens the challenge of allowing your tools\nto still operate outside of your studio environments when the Perforce server\nis in-accessible.\n\nXpf resolves this by ensuring all the perforce calls can return default\nvariable types in circumstances where the Perforce server is unreachable. This\nallows for tools to operate outside the main studio environment, and is made\neasier by xpf being freely accessible on PyPi.\n\n\n## Xpf Direct\n\nThe library tries to make it easy to use for those that are used to utilising\nP4Python or the perforce command line. With that in mind you can utilise the\nthe ```xpf.direct``` module which mimics the types of calls and interface of\nP4Python.\n\nIn this regard you're given access to functions for each perforce command and\nare able to pass in any arguments you want to give. As per P4Python conventions\nyou will be returned a list of dictionaries representing the results.\n\nSome examples of this would be:\n\n```python\nimport xpf\n\n# -- Sync to the head revision of a directory\nxpf.direct.sync(\n    [\n        '/usr/my_files/...'\n    ]\n)\n\n# -- Force sync, passing the usual perforce argument switches, but\n# -- define the client\nxpf.direct.sync(\n    [\n        '/usr/my_files/...'\n    ],\n    '-f',\n    client='my_client_name',\n)\n```\n\nAs well as the defined functions (which are auto-generated) there is also a\nmore generic run function which you can utilise directly:\n\n```python\nimport xpf\n\n# -- Sync to the head revision of a directory\nresult = xpf.direct.run(\n    'describe',\n    13569,                  # -- Change list to describe\n    'Os',                   # -- Shorten output by excluding client workspace data\n    'Rc',                   # -- Limit output to files mapped into the current workspace.\n)\n```\n\nUsing ```xpf.direct``` should feel very familiar to anyone who has utilised\nP4Python or the perforce commandline.\n\n\n## Xpf Assist\n\nWorking at the ```xpf.direct``` level makes a lot of sense in a lot of\nsituations, however there are various circumstances which call for multiple\nqueries to be carried out in order to answer slightly higher level questions.\n\nExamples of these might be to add a file to a changelist regardless of whether\nits an add or edit operation. Another example might be where you want to manage\nthe changelist descriptions a little easier.\n\nThe ```xpf.assist``` module aims to give higher level functionality whereby the\nfunction in question will carry out multiple calls and wrangle data to solve\na particular request.\n\nExamples of these are:\n\n```python\nimport xpf\n\n# -- Given a chnagelist description, find the most likely changelist\n# -- number for the current user. In this case, if that changelist\n# -- does not exist it will be created for you\nresult = xpf.assist.get_changelist('My change description')\n```\n\nThe following example exposes a method of submitting which forces all\nfiles being submitted to be added to a changelist with the supplied\ndescription and submitted together:\n\n```python\nimport xpf\n\nxpf.assist.submit_files(\n    [\n        '/usr/my_files/...'\n    ],\n    description='My submission description',\n)\n```\n\n\n## Xpf Variables\n\nXpf works at a module level. It is not class based and it wraps the perforce\ncommand line. With this in mind it has some variables which are considered\nglobal, which are queried for on the first run (based on p4 set) but can be\naltered by you.\n\n```python\nimport xpf\n\n# -- Get the host\nhost = xpf.variables.get_host()\n\n# -- Set the host to something specific\nxpf.variables.set_host(host)\n```\n\nVariables which can be retrieved and set in this way include:\n\n    * host\n    * client\n    * user\n    * port (server)\n    * timeout\n\nA special variable which can be turned on/off is the `debugging` variable.\nWhen debugging is turned on xpf will print ever command line its about to\nprocess in the final format its constructed in. This is particularly useful\nif you're getting a result you do not expect and want to recreate the steps\nusing the commandline.\n\nTo enable this option you do:\n\n```python\nimport xpf\n\nxpf.variables.set_debug(True)\n```\n\n\n## Failsafes\n\nOne of the big advantages of xpf is that includes in-built failsafe mechanisms\nto protect functionality whenever the server is in-accessible. During the first\nxpf call (regardless of whether that is through ```xpf.direct``` or\n```xpf.assist```) a ```p4 info``` query is run. If this timesout then the\nxpf variable is set to mark the server as inaccessible.\n\nWhen a server is inaccessible all functions will return a default value which\nis defined by their failsafe decorator. This allows your code to continue\nwithout having to handle server failure directly.\n\nIn many situations when calling functions within ```xpf.direct``` they will\nreturn an empty list upon server failure - this is because their functions\nusually return a list. With that in mind, whilst you dont have to handle server\nfailure you should handle being given empty data of the correct (expected)\ntype.\n\nA good example of this would be:\n\n```python\n\ndescription = xpf.direct.describe(13569)\n\nif not description:\n    pass\n\n...\n```\n\nIn the example above we do have to handle not being given a description but\nwe do not have to handle unexpected exceptions beacuse of an inaccessible\nperforce server.\n\nFundamentally this means you can safely embed an xpf dependency in your tool\nto give a rich user experience knowing that the tool will work even if its taken\noff-site.\n\n\n## Timeouts\n\nXpf offers the ability to define a timeout on all perforce queries. By default\nthis timeout is exposed through ```xpf.set_timeout(value)``` and is defaulted\nto one second. If your server is particularly slow you can use that call to\nincrease the global timeout.\n\nAlternatively, you can set the timeout on a per-call basis too. This is\nparticularly useful when you know your call will take a longer than expected\ntime. This is done with the `timeout` argument as shown here:\n\n```python\nimport xpf\n\nxpf.direct.info(timeout=10)\n```\n\n\n## Marshalling\n\nBy default all queries run through xpf are marshaled, and therefore return\npythonic objects. If you want raw output (strings) rather than lists of\ndictionaries you can set the marshaling to false on a per call basis as\nshown here:\n\n```python\nstring_dump = xpf.direct.run('set', marshal=False)  # -- (Equivalent to p4 set)\n```\n\n\n## Forms\n\nForms are used in perforce to deliver multiple pieces of user input. When\nrunning perforce through the commandline this typically pops open a text\neditor - which is not particularly useful when interacting with perforce\nvia a python library.\n\nTherefore all forms that are requested by a particular p4 command can be\ngiven in the form of a dictionary. This is shown here:\n\n```python\nimport xpf\n\nresult = xpf.direct.changelist(\n    '-i',\n    form={\n        'Change': 'new',\n        'Status': 'new',\n        'Description': 'My New Changelist Description',\n    },\n)\n```\n\n\n# Compatibility\n\nXpf has been tested under Python 2.7 and Python 3.7 on Windows and Ubuntu.\n\nNote: This module utilises the ```p4 set``` environment variables and expects\nat least P4PORT, P4USER and P4CLIENT to be defined.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikemalinowski/xpf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "xpf", "package_url": "https://pypi.org/project/xpf/", "platform": "", "project_url": "https://pypi.org/project/xpf/", "project_urls": {"Homepage": "https://github.com/mikemalinowski/xpf"}, "release_url": "https://pypi.org/project/xpf/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A python interface to interacting with p4 as a soft dependency", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>Xpf is an interface to perforce which offers the following benefits:</p>\n<ul>\n<li>\n<p>Pure python, no compiled dependencies (allow for use in Python 2, Python 3, Max, Maya &amp; Motion Builder etc)</p>\n</li>\n<li>\n<p>Failsafe calls - this module will not raise errors if the perforce server is in-accessible.</p>\n</li>\n<li>\n<p>PyPi distribution making it easier for sharing tools with outsourcers</p>\n</li>\n</ul>\n<h1>Installation</h1>\n<p>Either download and place somewhere in your PYTHONPATH or install via pypi:</p>\n<p><code>pip install xpf</code></p>\n<h1>Why not P4Python</h1>\n<p>Perforce offers its own p4Python module which is a well established and\nstable library.</p>\n<p>The downside to P4Python is that its a compiled library and therefore requires\ndifferent distributions if you're jumping between Python 2.x and Python 3.x</p>\n<p>This is further exasperated when wanting to utilise perforce integrations into\ntools built within embedded interpreters such as Autodesk Maya/Max/Motionbuilder\nwhich are all compiled against different compiler versions than the native\npython distributions.</p>\n<p>The other benefit xpf brings is that its has a soft requirement on perforce.\nIts common place to want to embed perforce support into tools within\napplications such as Max/Maya but it opens the challenge of allowing your tools\nto still operate outside of your studio environments when the Perforce server\nis in-accessible.</p>\n<p>Xpf resolves this by ensuring all the perforce calls can return default\nvariable types in circumstances where the Perforce server is unreachable. This\nallows for tools to operate outside the main studio environment, and is made\neasier by xpf being freely accessible on PyPi.</p>\n<h2>Xpf Direct</h2>\n<p>The library tries to make it easy to use for those that are used to utilising\nP4Python or the perforce command line. With that in mind you can utilise the\nthe <code>xpf.direct</code> module which mimics the types of calls and interface of\nP4Python.</p>\n<p>In this regard you're given access to functions for each perforce command and\nare able to pass in any arguments you want to give. As per P4Python conventions\nyou will be returned a list of dictionaries representing the results.</p>\n<p>Some examples of this would be:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"c1\"># -- Sync to the head revision of a directory</span>\n<span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">sync</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"s1\">'/usr/my_files/...'</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Force sync, passing the usual perforce argument switches, but</span>\n<span class=\"c1\"># -- define the client</span>\n<span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">sync</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"s1\">'/usr/my_files/...'</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'-f'</span><span class=\"p\">,</span>\n    <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"s1\">'my_client_name'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>As well as the defined functions (which are auto-generated) there is also a\nmore generic run function which you can utilise directly:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"c1\"># -- Sync to the head revision of a directory</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"s1\">'describe'</span><span class=\"p\">,</span>\n    <span class=\"mi\">13569</span><span class=\"p\">,</span>                  <span class=\"c1\"># -- Change list to describe</span>\n    <span class=\"s1\">'Os'</span><span class=\"p\">,</span>                   <span class=\"c1\"># -- Shorten output by excluding client workspace data</span>\n    <span class=\"s1\">'Rc'</span><span class=\"p\">,</span>                   <span class=\"c1\"># -- Limit output to files mapped into the current workspace.</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Using <code>xpf.direct</code> should feel very familiar to anyone who has utilised\nP4Python or the perforce commandline.</p>\n<h2>Xpf Assist</h2>\n<p>Working at the <code>xpf.direct</code> level makes a lot of sense in a lot of\nsituations, however there are various circumstances which call for multiple\nqueries to be carried out in order to answer slightly higher level questions.</p>\n<p>Examples of these might be to add a file to a changelist regardless of whether\nits an add or edit operation. Another example might be where you want to manage\nthe changelist descriptions a little easier.</p>\n<p>The <code>xpf.assist</code> module aims to give higher level functionality whereby the\nfunction in question will carry out multiple calls and wrangle data to solve\na particular request.</p>\n<p>Examples of these are:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"c1\"># -- Given a chnagelist description, find the most likely changelist</span>\n<span class=\"c1\"># -- number for the current user. In this case, if that changelist</span>\n<span class=\"c1\"># -- does not exist it will be created for you</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">assist</span><span class=\"o\">.</span><span class=\"n\">get_changelist</span><span class=\"p\">(</span><span class=\"s1\">'My change description'</span><span class=\"p\">)</span>\n</pre>\n<p>The following example exposes a method of submitting which forces all\nfiles being submitted to be added to a changelist with the supplied\ndescription and submitted together:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">assist</span><span class=\"o\">.</span><span class=\"n\">submit_files</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"s1\">'/usr/my_files/...'</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'My submission description'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Xpf Variables</h2>\n<p>Xpf works at a module level. It is not class based and it wraps the perforce\ncommand line. With this in mind it has some variables which are considered\nglobal, which are queried for on the first run (based on p4 set) but can be\naltered by you.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"c1\"># -- Get the host</span>\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">get_host</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Set the host to something specific</span>\n<span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">set_host</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">)</span>\n</pre>\n<p>Variables which can be retrieved and set in this way include:</p>\n<pre><code>* host\n* client\n* user\n* port (server)\n* timeout\n</code></pre>\n<p>A special variable which can be turned on/off is the <code>debugging</code> variable.\nWhen debugging is turned on xpf will print ever command line its about to\nprocess in the final format its constructed in. This is particularly useful\nif you're getting a result you do not expect and want to recreate the steps\nusing the commandline.</p>\n<p>To enable this option you do:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">set_debug</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Failsafes</h2>\n<p>One of the big advantages of xpf is that includes in-built failsafe mechanisms\nto protect functionality whenever the server is in-accessible. During the first\nxpf call (regardless of whether that is through <code>xpf.direct</code> or\n<code>xpf.assist</code>) a <code>p4 info</code> query is run. If this timesout then the\nxpf variable is set to mark the server as inaccessible.</p>\n<p>When a server is inaccessible all functions will return a default value which\nis defined by their failsafe decorator. This allows your code to continue\nwithout having to handle server failure directly.</p>\n<p>In many situations when calling functions within <code>xpf.direct</code> they will\nreturn an empty list upon server failure - this is because their functions\nusually return a list. With that in mind, whilst you dont have to handle server\nfailure you should handle being given empty data of the correct (expected)\ntype.</p>\n<p>A good example of this would be:</p>\n<pre><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(</span><span class=\"mi\">13569</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">description</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"o\">...</span>\n</pre>\n<p>In the example above we do have to handle not being given a description but\nwe do not have to handle unexpected exceptions beacuse of an inaccessible\nperforce server.</p>\n<p>Fundamentally this means you can safely embed an xpf dependency in your tool\nto give a rich user experience knowing that the tool will work even if its taken\noff-site.</p>\n<h2>Timeouts</h2>\n<p>Xpf offers the ability to define a timeout on all perforce queries. By default\nthis timeout is exposed through <code>xpf.set_timeout(value)</code> and is defaulted\nto one second. If your server is particularly slow you can use that call to\nincrease the global timeout.</p>\n<p>Alternatively, you can set the timeout on a per-call basis too. This is\nparticularly useful when you know your call will take a longer than expected\ntime. This is done with the <code>timeout</code> argument as shown here:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<h2>Marshalling</h2>\n<p>By default all queries run through xpf are marshaled, and therefore return\npythonic objects. If you want raw output (strings) rather than lists of\ndictionaries you can set the marshaling to false on a per call basis as\nshown here:</p>\n<pre><span class=\"n\">string_dump</span> <span class=\"o\">=</span> <span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'set'</span><span class=\"p\">,</span> <span class=\"n\">marshal</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># -- (Equivalent to p4 set)</span>\n</pre>\n<h2>Forms</h2>\n<p>Forms are used in perforce to deliver multiple pieces of user input. When\nrunning perforce through the commandline this typically pops open a text\neditor - which is not particularly useful when interacting with perforce\nvia a python library.</p>\n<p>Therefore all forms that are requested by a particular p4 command can be\ngiven in the form of a dictionary. This is shown here:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xpf</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">xpf</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">changelist</span><span class=\"p\">(</span>\n    <span class=\"s1\">'-i'</span><span class=\"p\">,</span>\n    <span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'Change'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Status'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Description'</span><span class=\"p\">:</span> <span class=\"s1\">'My New Changelist Description'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>Compatibility</h1>\n<p>Xpf has been tested under Python 2.7 and Python 3.7 on Windows and Ubuntu.</p>\n<p>Note: This module utilises the <code>p4 set</code> environment variables and expects\nat least P4PORT, P4USER and P4CLIENT to be defined.</p>\n\n          </div>"}, "last_serial": 5103832, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5fb83f83b3cbb79b05c79a5208a9960b", "sha256": "b659fb2ce225f3a9d7d0de21be29de336e6149eec2a57bd87e459fde15a6e903"}, "downloads": -1, "filename": "xpf-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5fb83f83b3cbb79b05c79a5208a9960b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17350, "upload_time": "2019-03-15T22:26:10", "upload_time_iso_8601": "2019-03-15T22:26:10.907532Z", "url": "https://files.pythonhosted.org/packages/70/b3/e967318bcfeeaa6c2a59e9fb8ab3a705c894b7c638904129dd99f1ded1b9/xpf-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "753c7ebc6b7fd6fa833a2389497f793e", "sha256": "7d051d858e9da68a3bc9f8afa38ffc266825221bcfecb1b3263c30390b531a1a"}, "downloads": -1, "filename": "xpf-1.0.1.tar.gz", "has_sig": false, "md5_digest": "753c7ebc6b7fd6fa833a2389497f793e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16897, "upload_time": "2019-04-05T13:57:41", "upload_time_iso_8601": "2019-04-05T13:57:41.432247Z", "url": "https://files.pythonhosted.org/packages/4a/13/76a2bbb56225fe6658878fbb5a79abd95a19e759a8b733f0d306df0c7210/xpf-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "753c7ebc6b7fd6fa833a2389497f793e", "sha256": "7d051d858e9da68a3bc9f8afa38ffc266825221bcfecb1b3263c30390b531a1a"}, "downloads": -1, "filename": "xpf-1.0.1.tar.gz", "has_sig": false, "md5_digest": "753c7ebc6b7fd6fa833a2389497f793e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16897, "upload_time": "2019-04-05T13:57:41", "upload_time_iso_8601": "2019-04-05T13:57:41.432247Z", "url": "https://files.pythonhosted.org/packages/4a/13/76a2bbb56225fe6658878fbb5a79abd95a19e759a8b733f0d306df0c7210/xpf-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:39 2020"}