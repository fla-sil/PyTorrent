{"info": {"author": "Raik Becker", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Python 3.6](https://github.com/raikb/gerd/workflows/Python%203.6/badge.svg)\n![Python 3.7](https://github.com/raikb/gerd/workflows/Python%203.7/badge.svg)\n![Python 3.8](https://github.com/raikb/gerd/workflows/Python%203.8/badge.svg)\n\n# gerd\n\n> Essentially, all models are wrong, but some are useful.\n> - George E. P. Box\n\nHopefully, gerd can be of use for someone.\n\n## What is gerd?\n\n**gerd.Dispatch** is an easy-to-use multi-area power market model that applies mixed-integer programming (MIP) and relaxed MIP (RMIP) for solving.\nThe full mathematical formulation of **gerd.Dispatch**  can be found [here](https://github.com/raikb/gerd/blob/master/docs/gerd_mathematical_formulation.pdf).\n\n### **gerd.Dispatch** allows you to model:\n* Power prices\n* Power plant dispatch:\n  - Minimum up-time of generators\n  - Minimum down-time of generators\n* Storages (batteries, pump storages etc.)\n* Must-run production\n* Cross-border flows\n\n### Main features:\n* Relies on the google package [ortools](https://developers.google.com/optimization):\n  -  Fast, memory efficient and numerically stable solvers that do not require any cumbersome third-party installations\n* Input-driven modeling to reduce needless parameter settings:\n  - The input handed over to the model defines what is modeled\n  - Options to switch on and off model features still exist\n* Rolling horizon optimization for cutting down run-time can be chosen\n* Different solving options available:\n  - MIP if only the dispatch is needed\n  - MIP followed by a RMIP if the dispatch and the prices are important\n\n## How to use it?\n\n### Installation\n```\npip install gerd\n```\n### Read input from CSV or use pandas DataFrames directly\nExample input files can be found in [examples](https://github.com/raikb/gerd/tree/master/examples).\n```python\nfrom gerd import models\nimport pandas as pd\n\n# Generators\ninput_gens = pd.read_csv('input_generators.csv', index_col='name')\n# Load\ninput_load = pd.read_csv(\n    'input_load.csv', index_col='time', parse_dates=True)\n# Variable costs\ninput_var_costs = pd.read_csv(\n    'input_var_costs.csv', index_col='time', parse_dates=True)\n```\n### Define what to model and optimize\nGoing with the default and what is defined by the input, i.e. the minimum up-time of generators is modeled if it is defined in the input data.\n```python\nmy_model = models.Dispatch(input_data)\nmy_model.optimize()\n```\n### Have a look at the results\n```python\nmy_model.solution['prices'].plot()\n```\n\n### More examples as Jupyter notebooks:\n* [Reading data from csv for one day and optimizing](https://github.com/raikb/gerd/blob/master/examples/example_dispatch_one_day_csv.ipynb)\n\n## Current limitations\n* The rolling horizon optimization works currently only for hourly input data and the index needs to be a pandas DatetimeIndex.\n\n## What is next?\nPossible extension of **gerd.Dispatch**:\n* Definition of dynamic power plant (un)availabilities\n* Modeling of spinning reserves\n* Advanced time series input checking\n* Further options for linearization \n\n## Acknowledgments\n* Unit-commitment equations and the example data have been inspired by:\n  - Kerstin D\u00e4chert and Christoph Weber: Linear reformulations of the unit commitment problem, OR 2016 Hamburg, 1.9.2016\n* Many ideas, especially the rolling horizon optimization implementation, are taking from:\n  - [Chi Kong Chyong, David Newbery and Thomas McCarty: A Unit Commitment and Economic Dispatch Model of the GB Electricity Market \u2013 Formulation and Application to Hydro Pumped Storage. 2019, CWPE1968](http://www.econ.cam.ac.uk/research-files/repec/cam/pdf/cwpe1968.pdf)\n* Further unit-commitment equations were taken from:\n  - [Van den Bergh, Kenneth Bruninx, Erik Delarue and William D\u2018haeseleer: LUSYM: a Unit Commitment Model formulated as a Mixed-Integer Linear Program, 2015, TME WORKING PAPER - Energy and Environment](https://www.mech.kuleuven.be/en/tme/research/energy_environment/Pdf/wpen2014-7.pdf)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/raikb/gerd", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gerd", "package_url": "https://pypi.org/project/gerd/", "platform": "", "project_url": "https://pypi.org/project/gerd/", "project_urls": {"Homepage": "https://github.com/raikb/gerd"}, "release_url": "https://pypi.org/project/gerd/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Easy-to-use multi-area power market model", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5af33b81d1c2cff9707d6dab3823a8f59aa1c9e6/68747470733a2f2f6769746875622e636f6d2f7261696b622f676572642f776f726b666c6f77732f507974686f6e253230332e362f62616467652e737667\">\n<img alt=\"Python 3.7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b0c5f5ee6cace687d23c4095de0bb6399c2ef7e/68747470733a2f2f6769746875622e636f6d2f7261696b622f676572642f776f726b666c6f77732f507974686f6e253230332e372f62616467652e737667\">\n<img alt=\"Python 3.8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25e9419de99e32b59b17a4ead259aa8961fc5d88/68747470733a2f2f6769746875622e636f6d2f7261696b622f676572642f776f726b666c6f77732f507974686f6e253230332e382f62616467652e737667\"></p>\n<h1>gerd</h1>\n<blockquote>\n<p>Essentially, all models are wrong, but some are useful.</p>\n<ul>\n<li>George E. P. Box</li>\n</ul>\n</blockquote>\n<p>Hopefully, gerd can be of use for someone.</p>\n<h2>What is gerd?</h2>\n<p><strong>gerd.Dispatch</strong> is an easy-to-use multi-area power market model that applies mixed-integer programming (MIP) and relaxed MIP (RMIP) for solving.\nThe full mathematical formulation of <strong>gerd.Dispatch</strong>  can be found <a href=\"https://github.com/raikb/gerd/blob/master/docs/gerd_mathematical_formulation.pdf\" rel=\"nofollow\">here</a>.</p>\n<h3><strong>gerd.Dispatch</strong> allows you to model:</h3>\n<ul>\n<li>Power prices</li>\n<li>Power plant dispatch:\n<ul>\n<li>Minimum up-time of generators</li>\n<li>Minimum down-time of generators</li>\n</ul>\n</li>\n<li>Storages (batteries, pump storages etc.)</li>\n<li>Must-run production</li>\n<li>Cross-border flows</li>\n</ul>\n<h3>Main features:</h3>\n<ul>\n<li>Relies on the google package <a href=\"https://developers.google.com/optimization\" rel=\"nofollow\">ortools</a>:\n<ul>\n<li>Fast, memory efficient and numerically stable solvers that do not require any cumbersome third-party installations</li>\n</ul>\n</li>\n<li>Input-driven modeling to reduce needless parameter settings:\n<ul>\n<li>The input handed over to the model defines what is modeled</li>\n<li>Options to switch on and off model features still exist</li>\n</ul>\n</li>\n<li>Rolling horizon optimization for cutting down run-time can be chosen</li>\n<li>Different solving options available:\n<ul>\n<li>MIP if only the dispatch is needed</li>\n<li>MIP followed by a RMIP if the dispatch and the prices are important</li>\n</ul>\n</li>\n</ul>\n<h2>How to use it?</h2>\n<h3>Installation</h3>\n<pre><code>pip install gerd\n</code></pre>\n<h3>Read input from CSV or use pandas DataFrames directly</h3>\n<p>Example input files can be found in <a href=\"https://github.com/raikb/gerd/tree/master/examples\" rel=\"nofollow\">examples</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gerd</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"c1\"># Generators</span>\n<span class=\"n\">input_gens</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'input_generators.csv'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Load</span>\n<span class=\"n\">input_load</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n    <span class=\"s1\">'input_load.csv'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'time'</span><span class=\"p\">,</span> <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Variable costs</span>\n<span class=\"n\">input_var_costs</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n    <span class=\"s1\">'input_var_costs.csv'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'time'</span><span class=\"p\">,</span> <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Define what to model and optimize</h3>\n<p>Going with the default and what is defined by the input, i.e. the minimum up-time of generators is modeled if it is defined in the input data.</p>\n<pre><span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Dispatch</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">)</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">()</span>\n</pre>\n<h3>Have a look at the results</h3>\n<pre><span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">solution</span><span class=\"p\">[</span><span class=\"s1\">'prices'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<h3>More examples as Jupyter notebooks:</h3>\n<ul>\n<li><a href=\"https://github.com/raikb/gerd/blob/master/examples/example_dispatch_one_day_csv.ipynb\" rel=\"nofollow\">Reading data from csv for one day and optimizing</a></li>\n</ul>\n<h2>Current limitations</h2>\n<ul>\n<li>The rolling horizon optimization works currently only for hourly input data and the index needs to be a pandas DatetimeIndex.</li>\n</ul>\n<h2>What is next?</h2>\n<p>Possible extension of <strong>gerd.Dispatch</strong>:</p>\n<ul>\n<li>Definition of dynamic power plant (un)availabilities</li>\n<li>Modeling of spinning reserves</li>\n<li>Advanced time series input checking</li>\n<li>Further options for linearization</li>\n</ul>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Unit-commitment equations and the example data have been inspired by:\n<ul>\n<li>Kerstin D\u00e4chert and Christoph Weber: Linear reformulations of the unit commitment problem, OR 2016 Hamburg, 1.9.2016</li>\n</ul>\n</li>\n<li>Many ideas, especially the rolling horizon optimization implementation, are taking from:\n<ul>\n<li><a href=\"http://www.econ.cam.ac.uk/research-files/repec/cam/pdf/cwpe1968.pdf\" rel=\"nofollow\">Chi Kong Chyong, David Newbery and Thomas McCarty: A Unit Commitment and Economic Dispatch Model of the GB Electricity Market \u2013 Formulation and Application to Hydro Pumped Storage. 2019, CWPE1968</a></li>\n</ul>\n</li>\n<li>Further unit-commitment equations were taken from:\n<ul>\n<li><a href=\"https://www.mech.kuleuven.be/en/tme/research/energy_environment/Pdf/wpen2014-7.pdf\" rel=\"nofollow\">Van den Bergh, Kenneth Bruninx, Erik Delarue and William D\u2018haeseleer: LUSYM: a Unit Commitment Model formulated as a Mixed-Integer Linear Program, 2015, TME WORKING PAPER - Energy and Environment</a></li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6729744, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1a68729b41dd54b863a8ae0ffe11f596", "sha256": "e7531b8c81b78fa56a5e8906cded2e420625d76a5991bbf24e90b8442112fc4b"}, "downloads": -1, "filename": "gerd-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1a68729b41dd54b863a8ae0ffe11f596", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15338, "upload_time": "2020-02-26T20:23:30", "upload_time_iso_8601": "2020-02-26T20:23:30.090892Z", "url": "https://files.pythonhosted.org/packages/a9/87/8a8724f1ca9342d1f7028232b2806b6bad254813fff21edf9ebdbbc73118/gerd-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebf6218bd271813b80c2c4e366190e6c", "sha256": "38bb12ea03bc642317d822f1f71e3e7d3d4ae36687a6b16e443572eedd210212"}, "downloads": -1, "filename": "gerd-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ebf6218bd271813b80c2c4e366190e6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16114, "upload_time": "2020-02-26T20:23:32", "upload_time_iso_8601": "2020-02-26T20:23:32.647486Z", "url": "https://files.pythonhosted.org/packages/b1/37/3c0df7b44fa57768803b86db9b333c3aa153d0c0abcccbcaa5d34da05df3/gerd-0.0.1.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "9141bb2c9ae9f032fe78d718402be5d4", "sha256": "69faf9e9c3d313b9d18dce88dda3b69659468e79fc85c18f7c9a73022636a422"}, "downloads": -1, "filename": "gerd-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9141bb2c9ae9f032fe78d718402be5d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15773, "upload_time": "2020-02-26T20:49:25", "upload_time_iso_8601": "2020-02-26T20:49:25.680337Z", "url": "https://files.pythonhosted.org/packages/14/f2/12d24edb5cb0d374eae3d095441fc47c734b1590eb6d8b42a854fe77db44/gerd-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcebb1ac5807c0281e9e54b0ff059d21", "sha256": "b63a29a3c48c3f6e53a342bf07923168a97bc5bc997ab576689648b904276f43"}, "downloads": -1, "filename": "gerd-0.0.4.tar.gz", "has_sig": false, "md5_digest": "dcebb1ac5807c0281e9e54b0ff059d21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16157, "upload_time": "2020-02-26T20:49:27", "upload_time_iso_8601": "2020-02-26T20:49:27.410952Z", "url": "https://files.pythonhosted.org/packages/c4/64/f2e92f031f5192eb74f18854259559ddb413790cf37fd7992b3c97549a80/gerd-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "720de5e4add99f6122d20b73abf0ad68", "sha256": "a2665d95fd0dd665303c9a47286684472d379f157660ab6c6e44cbaaa962fa5b"}, "downloads": -1, "filename": "gerd-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "720de5e4add99f6122d20b73abf0ad68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16303, "upload_time": "2020-03-01T19:52:25", "upload_time_iso_8601": "2020-03-01T19:52:25.681895Z", "url": "https://files.pythonhosted.org/packages/1b/11/8a3d43ca555050be29cddf584869d93476865dc5b9581d2e6ea00179c2ef/gerd-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e156d534173ead5f92e48caff1417a79", "sha256": "0ff9a11f4d44ec86c9e13aa9bb936a39bf7dcca2b0a34f5e0d79f16f0ff051c5"}, "downloads": -1, "filename": "gerd-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e156d534173ead5f92e48caff1417a79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15990, "upload_time": "2020-03-01T19:52:27", "upload_time_iso_8601": "2020-03-01T19:52:27.525618Z", "url": "https://files.pythonhosted.org/packages/78/5c/7213341d0c0b77e6a02e87e0a5a0b868c310c5399c98dc0a7abf3042df5f/gerd-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "720de5e4add99f6122d20b73abf0ad68", "sha256": "a2665d95fd0dd665303c9a47286684472d379f157660ab6c6e44cbaaa962fa5b"}, "downloads": -1, "filename": "gerd-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "720de5e4add99f6122d20b73abf0ad68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16303, "upload_time": "2020-03-01T19:52:25", "upload_time_iso_8601": "2020-03-01T19:52:25.681895Z", "url": "https://files.pythonhosted.org/packages/1b/11/8a3d43ca555050be29cddf584869d93476865dc5b9581d2e6ea00179c2ef/gerd-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e156d534173ead5f92e48caff1417a79", "sha256": "0ff9a11f4d44ec86c9e13aa9bb936a39bf7dcca2b0a34f5e0d79f16f0ff051c5"}, "downloads": -1, "filename": "gerd-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e156d534173ead5f92e48caff1417a79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15990, "upload_time": "2020-03-01T19:52:27", "upload_time_iso_8601": "2020-03-01T19:52:27.525618Z", "url": "https://files.pythonhosted.org/packages/78/5c/7213341d0c0b77e6a02e87e0a5a0b868c310c5399c98dc0a7abf3042df5f/gerd-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:53 2020"}