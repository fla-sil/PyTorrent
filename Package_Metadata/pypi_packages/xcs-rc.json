{"info": {"author": "Nugroho Fredivianus", "author_email": "nuggfr@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## XCS-RC\n\n*Accuracy-based Learning Classifier Systems* with **Rule Combining** mechanism, shortly `XCS-RC` for Python3, loosely based on Martin Butz's XCS Java code (2001). Read my PhD thesis [here](https://publikationen.bibliothek.kit.edu/1000046880) for the complete algorithmic description.\n\n*Rule Combining* is novel function that employs inductive reasoning, replacing ~~all Darwinian genetic operation like mutation and crossover~~. It can handle `binaries` and `real`, reaching better *correctness rate* and *population size* quicker than (mostly?) other XCS instances. My earlier papers comparing them can be obtained at [here](https://link.springer.com/chapter/10.1007/978-3-642-17298-4_30) and [here](https://dl.acm.org/citation.cfm?id=2331009).\n\n---\n\n**Initialization**\n```\nimport xcs_rc\nagent = xcs_rc.Agent()\n```\n\n**For classical Reinforcement Learning cycles**\n```\naction = agent.next_action(input, explore=True)  \n# assign reward here  \nagent.apply_reward(reward)  \n```\n\n**Or, for training and testing with a set of data**\n```\nagent.train(X_train, y_train)\n# get the confusion matrix with test data\ncm = agent.test(X_test, y_test)\n```\n\n**Print population, save it to CSV file, or use append mode**\n```\nagent.print_pop(title=\"Population\")\nagent.save_popfile('xcs_population.csv', title=\"Final XCS Population\")\nagent.save_popfile('xcs_pop_every_100_cycles.csv', title=\"Cycle: ###\", save_mode='a')\n```\n\n**Finally, inserting rules to population**\n```\nagent.insert_to_pop(\"xcs_population.csv\") # from a file, or\nagent.insert_to_pop(my_list_of_rules) # from a list of classifiers\n```\n\n\n**New Parameters**\n* **tcomb**: *combining period*, after how many learning cycles the new technique will be applied\n* **predtol**: *prediction tolerance*, the maximum difference between two classifiers to be combined\n* **prederrtol**: prediction error tolerance, threshold for rule deletion, indicated inappropriate combining\n\n\n**How to Set**\n```\nagent.tcomb = 50 # perform rule combining every 50 cycles\nagent.predtol = 20.0 # combines rules whose prediction value differences <= 20.0\nagent.prederrtol = 10.0 # remove combine results having error > 10.0\n```\n\n\n**Removed/unused parameters from original XCS**\n* ~~all related to mutation and crossover~~\n\n---\n\n**Links**\n* [Github](https://github.com/nuggfr/xcs-rc-python)\n* [Example](https://routing.nuggfr.com/churn)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nuggfr/xcs-rc-python", "keywords": "learning classifier systems rule combining", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xcs-rc", "package_url": "https://pypi.org/project/xcs-rc/", "platform": "", "project_url": "https://pypi.org/project/xcs-rc/", "project_urls": {"Homepage": "https://github.com/nuggfr/xcs-rc-python"}, "release_url": "https://pypi.org/project/xcs-rc/0.1.10/", "requires_dist": ["pandas", "numpy"], "requires_python": "", "summary": "Accuracy-based Learning Classifier Systems with Rule Combining", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>XCS-RC</h2>\n<p><em>Accuracy-based Learning Classifier Systems</em> with <strong>Rule Combining</strong> mechanism, shortly <code>XCS-RC</code> for Python3, loosely based on Martin Butz's XCS Java code (2001). Read my PhD thesis <a href=\"https://publikationen.bibliothek.kit.edu/1000046880\" rel=\"nofollow\">here</a> for the complete algorithmic description.</p>\n<p><em>Rule Combining</em> is novel function that employs inductive reasoning, replacing <del>all Darwinian genetic operation like mutation and crossover</del>. It can handle <code>binaries</code> and <code>real</code>, reaching better <em>correctness rate</em> and <em>population size</em> quicker than (mostly?) other XCS instances. My earlier papers comparing them can be obtained at <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-17298-4_30\" rel=\"nofollow\">here</a> and <a href=\"https://dl.acm.org/citation.cfm?id=2331009\" rel=\"nofollow\">here</a>.</p>\n<hr>\n<p><strong>Initialization</strong></p>\n<pre><code>import xcs_rc\nagent = xcs_rc.Agent()\n</code></pre>\n<p><strong>For classical Reinforcement Learning cycles</strong></p>\n<pre><code>action = agent.next_action(input, explore=True)  \n# assign reward here  \nagent.apply_reward(reward)  \n</code></pre>\n<p><strong>Or, for training and testing with a set of data</strong></p>\n<pre><code>agent.train(X_train, y_train)\n# get the confusion matrix with test data\ncm = agent.test(X_test, y_test)\n</code></pre>\n<p><strong>Print population, save it to CSV file, or use append mode</strong></p>\n<pre><code>agent.print_pop(title=\"Population\")\nagent.save_popfile('xcs_population.csv', title=\"Final XCS Population\")\nagent.save_popfile('xcs_pop_every_100_cycles.csv', title=\"Cycle: ###\", save_mode='a')\n</code></pre>\n<p><strong>Finally, inserting rules to population</strong></p>\n<pre><code>agent.insert_to_pop(\"xcs_population.csv\") # from a file, or\nagent.insert_to_pop(my_list_of_rules) # from a list of classifiers\n</code></pre>\n<p><strong>New Parameters</strong></p>\n<ul>\n<li><strong>tcomb</strong>: <em>combining period</em>, after how many learning cycles the new technique will be applied</li>\n<li><strong>predtol</strong>: <em>prediction tolerance</em>, the maximum difference between two classifiers to be combined</li>\n<li><strong>prederrtol</strong>: prediction error tolerance, threshold for rule deletion, indicated inappropriate combining</li>\n</ul>\n<p><strong>How to Set</strong></p>\n<pre><code>agent.tcomb = 50 # perform rule combining every 50 cycles\nagent.predtol = 20.0 # combines rules whose prediction value differences &lt;= 20.0\nagent.prederrtol = 10.0 # remove combine results having error &gt; 10.0\n</code></pre>\n<p><strong>Removed/unused parameters from original XCS</strong></p>\n<ul>\n<li><del>all related to mutation and crossover</del></li>\n</ul>\n<hr>\n<p><strong>Links</strong></p>\n<ul>\n<li><a href=\"https://github.com/nuggfr/xcs-rc-python\" rel=\"nofollow\">Github</a></li>\n<li><a href=\"https://routing.nuggfr.com/churn\" rel=\"nofollow\">Example</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6155604, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "6a23f6ad7e917f9fb13b9b4f59697c25", "sha256": "8fad8b7264134183693492ec366bd50a1cd7a78aa5d11e8f539c7089eaa3b002"}, "downloads": -1, "filename": "xcs_rc-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "6a23f6ad7e917f9fb13b9b4f59697c25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9055, "upload_time": "2019-07-15T00:43:16", "upload_time_iso_8601": "2019-07-15T00:43:16.400459Z", "url": "https://files.pythonhosted.org/packages/b1/b8/e4493a13484f4e88c2de53f0740deff1473a9fc749c6fe8f206cb18f5c3d/xcs_rc-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de7f9e3fc50289d9eee72859ed64877d", "sha256": "b6acfa2dbe1f5bac73cee0d3005fb9e2c3ceae82c55de36b755376d71df9ff39"}, "downloads": -1, "filename": "xcs-rc-0.1.10.tar.gz", "has_sig": false, "md5_digest": "de7f9e3fc50289d9eee72859ed64877d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8438, "upload_time": "2019-07-15T00:43:17", "upload_time_iso_8601": "2019-07-15T00:43:17.574270Z", "url": "https://files.pythonhosted.org/packages/6a/8c/6292ed79391e6a646c3a40dca81852e50e87e5b59baff658394a706d4733/xcs-rc-0.1.10.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a23f6ad7e917f9fb13b9b4f59697c25", "sha256": "8fad8b7264134183693492ec366bd50a1cd7a78aa5d11e8f539c7089eaa3b002"}, "downloads": -1, "filename": "xcs_rc-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "6a23f6ad7e917f9fb13b9b4f59697c25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9055, "upload_time": "2019-07-15T00:43:16", "upload_time_iso_8601": "2019-07-15T00:43:16.400459Z", "url": "https://files.pythonhosted.org/packages/b1/b8/e4493a13484f4e88c2de53f0740deff1473a9fc749c6fe8f206cb18f5c3d/xcs_rc-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de7f9e3fc50289d9eee72859ed64877d", "sha256": "b6acfa2dbe1f5bac73cee0d3005fb9e2c3ceae82c55de36b755376d71df9ff39"}, "downloads": -1, "filename": "xcs-rc-0.1.10.tar.gz", "has_sig": false, "md5_digest": "de7f9e3fc50289d9eee72859ed64877d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8438, "upload_time": "2019-07-15T00:43:17", "upload_time_iso_8601": "2019-07-15T00:43:17.574270Z", "url": "https://files.pythonhosted.org/packages/6a/8c/6292ed79391e6a646c3a40dca81852e50e87e5b59baff658394a706d4733/xcs-rc-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:59 2020"}