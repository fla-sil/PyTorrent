{"info": {"author": "Max Zheng", "author_email": "maxzheng.os @t gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "coworker\n==============\n\nGeneric worker that performs concurrent tasks using coroutine.\n\nQuick Start Tutorial\n====================\n\nDefine how a task is performed and create the worker:\n\n.. code-block:: python\n\n    from coworker import Coworker\n\n    class SquareWorker(Coworker):\n        async def do_task(self, task):\n            return task * task\n\n    worker = SquareWorker(max_concurrency=5)    # Only 5 tasks will run concurrently\n                                                # As do_task is fast, 35,000 tasks can be done in 1 second.\n\nTo run in the background forever and add tasks:\n\n.. code-block:: python\n\n    import asyncio\n\n    async def background_worker_example():\n        # Start worker / Run in background\n        asyncio.ensure_future(worker.start())\n\n        # Mulitiple tasks\n        tasks = list(range(100))\n        results = await asyncio.gather(*worker.add_tasks(tasks))\n        print(results)  # results = [0, 1, 4, 9, ...]\n\n        # Single task\n        result = await worker.add_tasks(2)\n        print(result)   # result = 4\n\n        # Stop worker\n        await worker.stop()\n\n    # Run async usage example\n    asyncio.get_event_loop().run_until_complete(background_worker_example())\n\n\nTo run for a list of tasks and stop worker when finished:\n\n.. code-block:: python\n\n    task_futures = asyncio.get_event_loop().run_until_complete(worker.start([1, 2, 3]))\n    print([t.result() for t in task_futures])   # [1, 4, 9]\n\n\nLinks & Contact Info\n====================\n\n| Documentation: http://coworker.readthedocs.org\n|\n| PyPI Package: https://pypi.python.org/pypi/coworker\n| GitHub Source: https://github.com/maxzheng/coworker\n| Report Issues/Bugs: https://github.com/maxzheng/coworker/issues\n|\n| Connect: https://www.linkedin.com/in/maxzheng\n| Contact: maxzheng.os @t gmail.com\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maxzheng/coworker", "keywords": "coroutine concurrent worker", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "coworker", "package_url": "https://pypi.org/project/coworker/", "platform": "", "project_url": "https://pypi.org/project/coworker/", "project_urls": {"Homepage": "https://github.com/maxzheng/coworker"}, "release_url": "https://pypi.org/project/coworker/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Generic worker that performs concurrent tasks using coroutine.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"coworker\">\n<h2>coworker</h2>\n<p>Generic worker that performs concurrent tasks using coroutine.</p>\n</div>\n<div id=\"quick-start-tutorial\">\n<h2>Quick Start Tutorial</h2>\n<p>Define how a task is performed and create the worker:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">coworker</span> <span class=\"kn\">import</span> <span class=\"n\">Coworker</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SquareWorker</span><span class=\"p\">(</span><span class=\"n\">Coworker</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">do_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">task</span> <span class=\"o\">*</span> <span class=\"n\">task</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">SquareWorker</span><span class=\"p\">(</span><span class=\"n\">max_concurrency</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>    <span class=\"c1\"># Only 5 tasks will run concurrently</span>\n                                            <span class=\"c1\"># As do_task is fast, 35,000 tasks can be done in 1 second.</span>\n</pre>\n<p>To run in the background forever and add tasks:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">background_worker_example</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Start worker / Run in background</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># Mulitiple tasks</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">add_tasks</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>  <span class=\"c1\"># results = [0, 1, 4, 9, ...]</span>\n\n    <span class=\"c1\"># Single task</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">add_tasks</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>   <span class=\"c1\"># result = 4</span>\n\n    <span class=\"c1\"># Stop worker</span>\n    <span class=\"k\">await</span> <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Run async usage example</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">background_worker_example</span><span class=\"p\">())</span>\n</pre>\n<p>To run for a list of tasks and stop worker when finished:</p>\n<pre><span class=\"n\">task_futures</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">task_futures</span><span class=\"p\">])</span>   <span class=\"c1\"># [1, 4, 9]</span>\n</pre>\n</div>\n<div id=\"links-contact-info\">\n<h2>Links &amp; Contact Info</h2>\n<div>\n<div>Documentation: <a href=\"http://coworker.readthedocs.org\" rel=\"nofollow\">http://coworker.readthedocs.org</a></div>\n<div><br></div>\n<div>PyPI Package: <a href=\"https://pypi.python.org/pypi/coworker\" rel=\"nofollow\">https://pypi.python.org/pypi/coworker</a></div>\n<div>GitHub Source: <a href=\"https://github.com/maxzheng/coworker\" rel=\"nofollow\">https://github.com/maxzheng/coworker</a></div>\n<div>Report Issues/Bugs: <a href=\"https://github.com/maxzheng/coworker/issues\" rel=\"nofollow\">https://github.com/maxzheng/coworker/issues</a></div>\n<div><br></div>\n<div>Connect: <a href=\"https://www.linkedin.com/in/maxzheng\" rel=\"nofollow\">https://www.linkedin.com/in/maxzheng</a></div>\n<div>Contact: maxzheng.os @t gmail.com</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3934822, "releases": {"0.0.1": [], "0.0.2": [{"comment_text": "", "digests": {"md5": "e9d72de3a8644875177e0593f9b15afd", "sha256": "ab5dd4ffa0ac26013b923ee952d3e2fcd5e8287fd8fed653bf873729601a7170"}, "downloads": -1, "filename": "coworker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e9d72de3a8644875177e0593f9b15afd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11791, "upload_time": "2016-09-24T02:02:57", "upload_time_iso_8601": "2016-09-24T02:02:57.970949Z", "url": "https://files.pythonhosted.org/packages/ae/87/8327fa7754a791bcb620bea9107936bf5c73dc3337ff4b74fd8b677fa8d0/coworker-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "04d0c46af5e0ee6b7e767ae7b50dcb7c", "sha256": "85b86f323ba40fa0ad90149b92df31067ac8d5fba5e5f521607b65883d67369d"}, "downloads": -1, "filename": "coworker-0.0.3.tar.gz", "has_sig": false, "md5_digest": "04d0c46af5e0ee6b7e767ae7b50dcb7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11804, "upload_time": "2016-09-24T02:10:57", "upload_time_iso_8601": "2016-09-24T02:10:57.194902Z", "url": "https://files.pythonhosted.org/packages/d5/31/cbe07696944bb42b1479ce98d39f8bb468f87d4b168aafde986eb7f4065a/coworker-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "fa526f28130ccd51eeb2c91fdd3154e1", "sha256": "e270e96d2e97227b8c2830145f7cb279d8fe1c9df8b746f967cce492cd99ff7f"}, "downloads": -1, "filename": "coworker-0.0.4.tar.gz", "has_sig": false, "md5_digest": "fa526f28130ccd51eeb2c91fdd3154e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12533, "upload_time": "2016-09-27T08:02:40", "upload_time_iso_8601": "2016-09-27T08:02:40.788979Z", "url": "https://files.pythonhosted.org/packages/c1/65/08881c60f0d190f6cc7847c1e6f8053bcc129c360f6f32f55ee13c794c26/coworker-0.0.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ea04f6d6a75efda4e832440018c63d87", "sha256": "00f22005e56619df6437abb01e314dbec6375e600fd005946e9efc5305b6b07a"}, "downloads": -1, "filename": "coworker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ea04f6d6a75efda4e832440018c63d87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12550, "upload_time": "2016-09-27T08:13:29", "upload_time_iso_8601": "2016-09-27T08:13:29.505434Z", "url": "https://files.pythonhosted.org/packages/03/e3/c4ea3b77c3ce5417786656facc918c351fa0adbbb67a18eeb23127b4a95a/coworker-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "47369ea40cea0bf9006315cadc7c782c", "sha256": "af0810e63a52d200534c16f2498d93e51c18cd9fc74be1cc52b9b99863c96bac"}, "downloads": -1, "filename": "coworker-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "47369ea40cea0bf9006315cadc7c782c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4445, "upload_time": "2018-06-06T05:55:28", "upload_time_iso_8601": "2018-06-06T05:55:28.989145Z", "url": "https://files.pythonhosted.org/packages/81/a6/beb088ae555a0589d22bef510e177be48e154f8ffdfa148f5ff688825f77/coworker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3d71da2fdfefe410512a75e04b2008d", "sha256": "2cfa8c72022bd72e65dc520d354637270353d6090b4592f2ed30d3d901ebc2b5"}, "downloads": -1, "filename": "coworker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f3d71da2fdfefe410512a75e04b2008d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13096, "upload_time": "2018-06-06T05:55:30", "upload_time_iso_8601": "2018-06-06T05:55:30.363916Z", "url": "https://files.pythonhosted.org/packages/44/d8/6c8ffcaf2255d4648b6df87910487d251510ee73ee560cf1ca31d3e02797/coworker-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "47369ea40cea0bf9006315cadc7c782c", "sha256": "af0810e63a52d200534c16f2498d93e51c18cd9fc74be1cc52b9b99863c96bac"}, "downloads": -1, "filename": "coworker-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "47369ea40cea0bf9006315cadc7c782c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4445, "upload_time": "2018-06-06T05:55:28", "upload_time_iso_8601": "2018-06-06T05:55:28.989145Z", "url": "https://files.pythonhosted.org/packages/81/a6/beb088ae555a0589d22bef510e177be48e154f8ffdfa148f5ff688825f77/coworker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3d71da2fdfefe410512a75e04b2008d", "sha256": "2cfa8c72022bd72e65dc520d354637270353d6090b4592f2ed30d3d901ebc2b5"}, "downloads": -1, "filename": "coworker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f3d71da2fdfefe410512a75e04b2008d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13096, "upload_time": "2018-06-06T05:55:30", "upload_time_iso_8601": "2018-06-06T05:55:30.363916Z", "url": "https://files.pythonhosted.org/packages/44/d8/6c8ffcaf2255d4648b6df87910487d251510ee73ee560cf1ca31d3e02797/coworker-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:43 2020"}