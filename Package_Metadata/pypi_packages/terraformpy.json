{"info": {"author": "Evan Borgstrom", "author_email": "eborgstrom@nerdwallet.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Pre-processors", "Topic :: System :: Systems Administration"], "description": "|pypi| |versions| |format| |license| |coverage|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/terraformpy?color=blue\n   :target: https://pypi.org/project/terraformpy\n\n.. |versions| image:: https://img.shields.io/badge/python-2.7%20%7C%203.5%20%7C%203.6%20%7C%203.7%20%7C%203.8-blue\n   :target: https://pypi.org/project/terraformpy\n\n.. |format| image:: https://img.shields.io/pypi/format/terraformpy?color=blue\n   :target: https://pypi.org/project/terraformpy\n\n.. |license| image:: https://img.shields.io/pypi/l/terraformpy?color=blue\n   :target: https://pypi.org/project/terraformpy\n\n.. |coverage| image:: https://codecov.io/gh/NerdWalletOSS/terraformpy/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/NerdWalletOSS/terraformpy\n\n\nTerrafompy\n==========\n\nTerraformpy is a library and command line tool to supercharge your Terraform configs using a full fledged Python environment!\n\n`Terraform`_ is an amazing tool.  Like, really amazing.  When working with code that is managing third-party service definitions, and actually applying changes to those definitions by invoking APIs, a high-degree of confidence in the change process is a must-have, and that's where Terraform excels.  The work flow it empowers allow teams to quickly make changes across a large (and ever growing) footprint in multiple providers/regions/technologies/etc.\n\nBut as your definitions grow the `HCL`_ syntax very quickly leaves a lot to be desired, and is it ever verbose... So many definitions of variables and outputs need to be repeated, over and over, as you compose more modules that use each other.\n\nSince `HCL`_ is \"fully JSON compatible\" and Python is great at generating JSON data, we built Terraformpy to provide a more productive environment to build and maintain complex Terraform configs.  It has been used daily in production at `NerdWallet`_ since 2016 and has proven very valuable in accelerating our adoption of Terraform across our engineering organization.\n\n.. _Terraform: https://www.terraform.io\n.. _HCL: https://github.com/hashicorp/hcl\n.. _NerdWallet: https://www.nerdwallet.com\n\n\nInstalling Terraformpy\n----------------------\n\nThe recommended way to install and use Terraformpy is via `Pipenv`_\n\nAn example would look like:\n\n.. code-block:: bash\n\n    $ mkdir my-terraform-project\n    $ cd my-terraform-project\n    $ pipenv install terraformpy\n\nYou can then run Terraformpy using ``pipenv run``:\n\n.. code-block:: bash\n\n    $ pipenv run terraformpy ...\n\nOr you can use ``pipenv shell`` to activate the virtualenv so you don't need to use ``pipenv run``.  The rest of this document assumes that you've run ``pipenv shell`` and can just run ``terraformpy`` directly.\n\n.. _Pipenv: https://docs.pipenv.org/en/latest/\n\nUsing the CLI tool\n------------------\n\nThe ``terraformpy`` command line tool operates as a shim for the underlying ``terraform`` tool.  When invoked it will first find all ``*.tf.py`` files in the current directory, loading them using the `imp`_ module, generate a file named ``main.tf.json``, and then invoke underlying tool.\n\n.. code-block:: bash\n\n    # just replace terraform in your regular workflow\n    terraformpy plan -out=tf.plan\n\n    # review changes...\n\n    # apply them!\n    # since we're going to operate on the generated plan here, we don't event need to use terraformpy anymore\n    terraform apply tf.plan\n\n\nEach of the ``*.tf.py`` files uses a declarative syntax, using objects imported from this library.  You don't need to define a main function, you just create instances of classes (anonymous or otherwise) in the root of the module (you're building regular Python code here).  Since you're in a full blown Python environment there is no limit on what you can do -- import things, connect to databases, etc.\n\n.. _imp: https://docs.python.org/3/library/imp.html\n\n\nWriting ``.tf.py`` files\n------------------------\n\nThe ``terraformpy`` name space provides a number of classes that map directly to things you declare in normal ``.tf.`` files.  To write your definitions simply import these classes and begin creating instances of them.  Below is the first example from the `Terraform getting start guide`_.\n\n.. _Terraform getting start guide: https://learn.hashicorp.com/terraform/getting-started/build.html#configuration\n\n.. code-block:: python\n\n    from terraformpy import Provider, Resource\n\n    Provider(\n        'aws',\n        profile='default',\n        region='us-east-1'\n    )\n\n    Resource(\n        'aws_instance', 'example',\n        ami='ami-2757f631'\n        instance_type='t2.micro'\n    )\n\n\nThings you can import from ``terraformpy``:\n\n* ``Resource`` - https://www.terraform.io/docs/configuration/resources.html\n* ``Provider`` - https://www.terraform.io/docs/configuration/providers.html\n* ``Variable`` - https://www.terraform.io/docs/configuration/variables.html\n* ``Output`` - https://www.terraform.io/docs/configuration/outputs.html\n* ``Module`` - https://www.terraform.io/docs/configuration/modules.html\n* ``Data`` - https://www.terraform.io/docs/configuration/data-sources.html\n* ``Terraform`` - https://www.terraform.io/docs/configuration/terraform.html\n\nSee the ``examples/`` dir for fully functional examples.\n\n\nInterpolation\n-------------\n\nSo far, we've only used terraformpy anonymously, but the returned instances of the ``Data`` and ``Resource`` classes offer handy interpolation attributes.  For example, a common task is using the ``Data`` class to fetch remote data:\n\n.. code-block:: python\n\n    ami = Data(\n        'aws_ami', 'ecs_ami',\n        most_recent=True,\n        filter=[\n            dict(name='name', values=['\\*amazon-ecs-optimized']),\n            dict(name='owner-alias', values=['amazon'])\n        ]\n    )\n\n    Resource(\n        'aws_instance', 'example',\n        ami=ami.id,\n        instance_type='m4.xlarge'\n    )\n\nHere we simply refer to the id attribute on the ami object when creating the ``aws_instance``.  During the compile phase it would be converted to the correct syntax: ``\"${data.aws_ami.ecs_ami.id}\"``.\n\nThis works by having a custom ``__getattr__`` function on our ``Data`` and ``Resource`` objects that will turn any attribute access for an attribute name that doesn't exist into the Terraform interpolation syntax.\n\n\nBackend\n-------\n\nConfiguring a backend happens in the `Terraform` object. See `Configuring a Terraform Backend`_ for more details.\n\nBellow we are using an S3 Backend:\n\n.. code-block:: python\n\n    Terraform(\n        backend=dict(\n            s3=dict(\n                region=\"us-east-1\",\n                bucket=\"terraform-tfstate-bucket\",\n                key=\"terraform.tfstate\",\n                workspace_key_prefix=\"my_prefix\",\n                dynamodb_table=\"terraform_locks\",\n            )\n        )\n    )\n\nModules\n-------\n\nSince Terraformpy gives you the full power of Python we encourage you to use \"Resource Collections\" (see the next section) when you're building your own modular functionality and you don't plan on sharing these modules outside of your current organization.\n\nYou can however leverage existing HCL modules using the ``Module`` object if you want to use pre-built, existing modules:\n\n.. code-block:: python\n\n    Module(\n        \"consul\",\n        source=\"hashicorp/consul/aws\",\n        version=\"0.0.5\",\n\n        servers=3\n    )\n\n\nResource Collections\n--------------------\n\nA common pattern when building configs using Python is to want to abstract a number of different resources under the guise of a single object -- which is the same pattern native Terraform modules aim to solve.  In terraformpy we provide a ``ResourceCollection`` base class for building objects that represent multiple resources.\n\nYou can use `Schematics`_ to define the fields and perform validation.\n\nAs an example, when provisioning an RDS cluster you may want to have a standard set of options that you ship with all your clusters.  You can express that with a resource collection:\n\n\n.. _Schematics: https://schematics.readthedocs.io/en/latest/\n\n.. code-block:: python\n\n    from schematics import types\n    from schematics.types import compound\n    from terraformpy import Resource, ResourceCollection\n\n\n    class RDSCluster(ResourceCollection):\n\n        # Defining attributes of your resource collection is like defining a Schematics Model, in fact the\n        # ResourceCollection class is just a specialized subclass of the Schematics Model class.\n        #\n        # Each attribute becomes a field on the collection, and can be provided as a keyword when constructing\n        # an instance of your collection.\n        #\n        # Validation works the same as in Schematics.  You can attach validators to the fields themselves and\n        # also define \"validate_field\" functions.\n\n        name = types.StringType(required=True)\n        azs = compound.ListType(types.StringType, required=True)\n        instance_class = types.StringType(required=True, choices=('db.r3.large', ...))\n\n        # The create_resources function is invoked once the instance has been created and the kwargs provided have been\n        # processed against the inputs.  All of the instance attributes have been converted to the values provided, so\n        # if you access self.name in create_resources you're accessing whatever value was provided to the instance\n\n        def create_resources(self):\n            self.param_group = Resource(\n                'aws_rds_cluster_parameter_group', '{0}_pg'.format(self.name),\n                family='aurora5.6',\n                parameter=[\n                    {'name': 'character_set_server', 'value': 'utf8'},\n                    {'name': 'character_set_client', 'value': 'utf8'}\n                ]\n            )\n\n            self.cluster = Resource(\n                'aws_rds_cluster', self.name,\n                cluster_identifier=self.name,\n                availability_zones=self.azs,\n                database_name=self.name,\n                master_username='root',\n                master_password='password',\n                db_cluster_parameter_group_name=self.param_group.id\n            )\n\n            self.instances = Resource(\n                'aws_rds_cluster_instance', '{0}_instances'.format(self.name),\n                count=2,\n                identifier='{0}-${{count.index}}'.format(self.name),\n                cluster_identifier=self.cluster.id,\n                instance_class=self.instance_class\n            )\n\n\nThat definition can then be imported and used in your terraformpy configs.\n\n.. code-block:: python\n\n    from modules.rds import RDSCluster\n\n\n    cluster1 = RDSCluster(\n        name='cluster1',\n        azs=['us-west-2a','us-west-2b','us-west-2c'],\n        instance_class='db.r3.large'\n    )\n\n    # you can then refer to the resources themselves, for interpolation, through the attrs\n    # i.e. cluster1.cluster.id\n\n\nVariants\n--------\n\nResource definitions that exist across many different environments often only vary slightly between each environment. To facilitate the ease of definition for these differences you can use variant grouping.\n\nFirst create the folders: ``configs/stage/``, ``configs/prod/``, ``configs/shared/``.  Inside each of them place a ``__init__.py`` to make them packages.\n\nNext create the file ``configs/shared/instances.py``:\n\n.. code-block:: python\n\n    from terraformpy import Resource\n\n    Resource(\n        'aws_instance', 'example',\n        ami=ami.id,\n        prod_variant=dict(\n            instance_type='m4.xlarge'\n        ),\n        stage_variant=dict(\n            instance_type='t2.medium'\n        )\n    )\n\nThen create ``configs/stage/main.tf.py``:\n\n.. code-block:: python\n\n    from terraformpy import Variant\n\n    with Variant('stage'):\n        import configs.shared.instances\n\nSince the import of the instances file happens inside of the Variant context then the Resource will be created as if it had been defined like:\n\n.. code-block:: python\n\n    from terraformpy import Resource\n\n    Resource(\n        'aws_instance', 'example',\n        ami=ami.id,\n        instance_type='t2.medium'\n    )\n\n\nMultiple providers\n------------------\n\nDepending on your usage of Terraform you will likely end up needing to use multiple providers at some point in time. To use `multiple providers in Terraform`_ you define them using aliases and then reference those aliases in your resource definitions.\n\nTo make this pattern easier you can use the Terraformpy ``Provider`` object as a context manager, and then any resources created within the context will automatically have that provider aliases referenced:\n\n.. code-block:: python\n\n    from terraformpy import Resource, Provider\n\n    with Provider(\"aws\", region=\"us-west-2\", alias=\"west2\"):\n        sg = Resource('aws_security_group', 'sg', ingress=['foo'])\n\n    assert sg.provider == 'aws.west2'\n\n.. _multiple providers in Terraform: https://www.terraform.io/docs/configuration/providers.html#alias-multiple-provider-instances\n\n\nUsing file contents\n-------------------\n\nOften times you will want to include the contents of a file that is located alongside your Python code, but when running ``terraform`` along with the ``${file('myfile.json')}`` interpolation function pathing will be relative to where the compiled ``main.tf.json`` file is and not where the Python code lives.\n\nTo help with this situation a function named ``relative_file`` inside of the ``terraformpy.helpers`` namespace is provided.\n\n.. code-block:: python\n\n    from terraformpy import Resource\n    from terraformpy.helpers import relative_file\n\n    Resource(\n        'aws_iam_role', 'role_name',\n        name='role-name',\n        assume_role_policy=relative_file('role_policy.json')\n    )\n\nThis would produce a definition that leverages the ``${file(...)}`` interpolation function with a path that reads the ``role_policy.json`` file from the same directory as the Python code that defined the role.\n\n\nHooks\n=====\n\nTerraformy offers a \"hooks\" system that allows you to modify objects on the fly at compile\ntime.  This can be useful to apply transformations so that users of objects do not need\nto worry about some of the idiosyncratic schema details of Terraform's JSON syntax,\nmost notably `\"Attributes as Blocks\"`_.\n\nThe best example of this is the ``aws_security_group`` object type, which requires that its\n``ingress`` and ``egress`` blocks have all of their attributes present, even if they are\n``null``.  To have users have to type out all of the different attributes and set them to\n``None`` is cumbersome, so instead you can use the hook that we ship with this distribution:\n\n.. code-block:: python\n\n    from terraformpy.hooks.aws import install_aws_security_group_attributes_as_blocks_hook\n\n    install_aws_security_group_attributes_as_blocks_hook()\n\n\nNow, users only need to specify the attributes they care about in rules and the hook will\ntake care of filling in all of the optional attributes that are mandatory to appear in the\nfinal compiled JSON.\n\nFor more information on how the hooks work see the ``test_hooks_aws.py`` file and the\ninline comments for the ``add_hook`` function on the different object types.\n\n\n.. _\"Attributes as Blocks\": https://www.terraform.io/docs/configuration/attr-as-blocks.html\n\n\nNotes and Gotchas\n=================\n\nSecurity Group Rules and ``self``\n----------------------------------\n\nWhen creating ``aws_security_group_rule`` ``Resource`` objects you cannot pass ``self=True`` to the object since Python already passes a ``self`` argument into the constructor.  In this case you'll need to specify it directly in the ``_values``:\n\n.. code-block:: python\n\n    sg = Resource(\n        'aws_security_group_rule', 'my_rule',\n        _values=dict(self=True),\n        vpc_id=vpc.id,\n        ...\n    )\n\nDeveloper notes\n===============\n\nRunning tests\n-------------\n\nWe use tox to run tests.  While developing locally you can run:\n\n.. code-block::\n\n    tox\n\n\nFormatting with black\n---------------------\n\nWe use black to format code.  To apply formatting run:\n\n.. code-block::\n\n    tox -e black -- .\n\n\nRelease Steps\n-------------\n\n1. Make a branch\n2. Make your changes\n3. Bump the version in the VERSION file and add an entry to the CHANGELOG.md file\n4. Open a PR, tag @NerdWalletOSS/dynamorm in your PR description\n5. Once approved and merged to master the new version will be pushed to pypi\n\n.. _`Configuring a Terraform Backend`: https://www.terraform.io/docs/configuration/terraform.html#configuring-a-terraform-backend\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NerdWalletOSS/terraformpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "terraformpy", "package_url": "https://pypi.org/project/terraformpy/", "platform": "", "project_url": "https://pypi.org/project/terraformpy/", "project_urls": {"Homepage": "https://github.com/NerdWalletOSS/terraformpy"}, "release_url": "https://pypi.org/project/terraformpy/1.3.0/", "requires_dist": ["schematics (<3.0,>=2.0)", "six (<2,>=1.11)", "pytest-cov ; extra == 'dev'", "pytest-mock ; extra == 'dev'", "codecov ; extra == 'dev'", "pytest (<4.7,>=4.6) ; (python_version <= \"2.7\") and extra == 'dev'", "pytest (<6,>=5.0) ; (python_version > \"3\") and extra == 'dev'"], "requires_python": "", "summary": "Terraformpy is a library and command line tool to supercharge your Terraform configs using a full fledged Python environment!", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/terraformpy\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d21e71a4cfedaa096f5d1fd99a19fca893fa0d4f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7465727261666f726d70793f636f6c6f723d626c7565\"></a> <a href=\"https://pypi.org/project/terraformpy\" rel=\"nofollow\"><img alt=\"versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e122be3d44a86e5d1e74724d5a9f67cb68417f19/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e37253230253743253230332e35253230253743253230332e36253230253743253230332e37253230253743253230332e382d626c7565\"></a> <a href=\"https://pypi.org/project/terraformpy\" rel=\"nofollow\"><img alt=\"format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ea3b467361b6f2fcfa867a803048b9137368280/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f7465727261666f726d70793f636f6c6f723d626c7565\"></a> <a href=\"https://pypi.org/project/terraformpy\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26260e8b54be9900bf7917dfbab7c76e18f2ed6f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7465727261666f726d70793f636f6c6f723d626c7565\"></a> <a href=\"https://codecov.io/gh/NerdWalletOSS/terraformpy\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a41f6797480f600ca143b10df6038d7b5eabb7e/68747470733a2f2f636f6465636f762e696f2f67682f4e65726457616c6c65744f53532f7465727261666f726d70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<div id=\"terrafompy\">\n<h2>Terrafompy</h2>\n<p>Terraformpy is a library and command line tool to supercharge your Terraform configs using a full fledged Python environment!</p>\n<p><a href=\"https://www.terraform.io\" rel=\"nofollow\">Terraform</a> is an amazing tool.  Like, really amazing.  When working with code that is managing third-party service definitions, and actually applying changes to those definitions by invoking APIs, a high-degree of confidence in the change process is a must-have, and that\u2019s where Terraform excels.  The work flow it empowers allow teams to quickly make changes across a large (and ever growing) footprint in multiple providers/regions/technologies/etc.</p>\n<p>But as your definitions grow the <a href=\"https://github.com/hashicorp/hcl\" rel=\"nofollow\">HCL</a> syntax very quickly leaves a lot to be desired, and is it ever verbose\u2026 So many definitions of variables and outputs need to be repeated, over and over, as you compose more modules that use each other.</p>\n<p>Since <a href=\"https://github.com/hashicorp/hcl\" rel=\"nofollow\">HCL</a> is \u201cfully JSON compatible\u201d and Python is great at generating JSON data, we built Terraformpy to provide a more productive environment to build and maintain complex Terraform configs.  It has been used daily in production at <a href=\"https://www.nerdwallet.com\" rel=\"nofollow\">NerdWallet</a> since 2016 and has proven very valuable in accelerating our adoption of Terraform across our engineering organization.</p>\n<div id=\"installing-terraformpy\">\n<h3>Installing Terraformpy</h3>\n<p>The recommended way to install and use Terraformpy is via <a href=\"https://docs.pipenv.org/en/latest/\" rel=\"nofollow\">Pipenv</a></p>\n<p>An example would look like:</p>\n<pre>$ mkdir my-terraform-project\n$ <span class=\"nb\">cd</span> my-terraform-project\n$ pipenv install terraformpy\n</pre>\n<p>You can then run Terraformpy using <tt>pipenv run</tt>:</p>\n<pre>$ pipenv run terraformpy ...\n</pre>\n<p>Or you can use <tt>pipenv shell</tt> to activate the virtualenv so you don\u2019t need to use <tt>pipenv run</tt>.  The rest of this document assumes that you\u2019ve run <tt>pipenv shell</tt> and can just run <tt>terraformpy</tt> directly.</p>\n</div>\n<div id=\"using-the-cli-tool\">\n<h3>Using the CLI tool</h3>\n<p>The <tt>terraformpy</tt> command line tool operates as a shim for the underlying <tt>terraform</tt> tool.  When invoked it will first find all <tt>*.tf.py</tt> files in the current directory, loading them using the <a href=\"https://docs.python.org/3/library/imp.html\" rel=\"nofollow\">imp</a> module, generate a file named <tt>main.tf.json</tt>, and then invoke underlying tool.</p>\n<pre><span class=\"c1\"># just replace terraform in your regular workflow\n</span>terraformpy plan -out<span class=\"o\">=</span>tf.plan\n\n<span class=\"c1\"># review changes...\n</span>\n<span class=\"c1\"># apply them!\n# since we're going to operate on the generated plan here, we don't event need to use terraformpy anymore\n</span>terraform apply tf.plan\n</pre>\n<p>Each of the <tt>*.tf.py</tt> files uses a declarative syntax, using objects imported from this library.  You don\u2019t need to define a main function, you just create instances of classes (anonymous or otherwise) in the root of the module (you\u2019re building regular Python code here).  Since you\u2019re in a full blown Python environment there is no limit on what you can do \u2013 import things, connect to databases, etc.</p>\n</div>\n<div id=\"writing-tf-py-files\">\n<h3>Writing <tt>.tf.py</tt> files</h3>\n<p>The <tt>terraformpy</tt> name space provides a number of classes that map directly to things you declare in normal <tt>.tf.</tt> files.  To write your definitions simply import these classes and begin creating instances of them.  Below is the first example from the <a href=\"https://learn.hashicorp.com/terraform/getting-started/build.html#configuration\" rel=\"nofollow\">Terraform getting start guide</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">Resource</span>\n\n<span class=\"n\">Provider</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws'</span><span class=\"p\">,</span>\n    <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span>\n    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'us-east-1'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_instance'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"n\">ami</span><span class=\"o\">=</span><span class=\"s1\">'ami-2757f631'</span>\n    <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s1\">'t2.micro'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Things you can import from <tt>terraformpy</tt>:</p>\n<ul>\n<li><tt>Resource</tt> - <a href=\"https://www.terraform.io/docs/configuration/resources.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/resources.html</a></li>\n<li><tt>Provider</tt> - <a href=\"https://www.terraform.io/docs/configuration/providers.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/providers.html</a></li>\n<li><tt>Variable</tt> - <a href=\"https://www.terraform.io/docs/configuration/variables.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/variables.html</a></li>\n<li><tt>Output</tt> - <a href=\"https://www.terraform.io/docs/configuration/outputs.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/outputs.html</a></li>\n<li><tt>Module</tt> - <a href=\"https://www.terraform.io/docs/configuration/modules.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/modules.html</a></li>\n<li><tt>Data</tt> - <a href=\"https://www.terraform.io/docs/configuration/data-sources.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/data-sources.html</a></li>\n<li><tt>Terraform</tt> - <a href=\"https://www.terraform.io/docs/configuration/terraform.html\" rel=\"nofollow\">https://www.terraform.io/docs/configuration/terraform.html</a></li>\n</ul>\n<p>See the <tt>examples/</tt> dir for fully functional examples.</p>\n</div>\n<div id=\"interpolation\">\n<h3>Interpolation</h3>\n<p>So far, we\u2019ve only used terraformpy anonymously, but the returned instances of the <tt>Data</tt> and <tt>Resource</tt> classes offer handy interpolation attributes.  For example, a common task is using the <tt>Data</tt> class to fetch remote data:</p>\n<pre><span class=\"n\">ami</span> <span class=\"o\">=</span> <span class=\"n\">Data</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_ami'</span><span class=\"p\">,</span> <span class=\"s1\">'ecs_ami'</span><span class=\"p\">,</span>\n    <span class=\"n\">most_recent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'\\*amazon-ecs-optimized'</span><span class=\"p\">]),</span>\n        <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'owner-alias'</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'amazon'</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_instance'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"n\">ami</span><span class=\"o\">=</span><span class=\"n\">ami</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n    <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s1\">'m4.xlarge'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Here we simply refer to the id attribute on the ami object when creating the <tt>aws_instance</tt>.  During the compile phase it would be converted to the correct syntax: <tt><span class=\"pre\">\"${data.aws_ami.ecs_ami.id}\"</span></tt>.</p>\n<p>This works by having a custom <tt>__getattr__</tt> function on our <tt>Data</tt> and <tt>Resource</tt> objects that will turn any attribute access for an attribute name that doesn\u2019t exist into the Terraform interpolation syntax.</p>\n</div>\n<div id=\"backend\">\n<h3>Backend</h3>\n<p>Configuring a backend happens in the <cite>Terraform</cite> object. See <a href=\"https://www.terraform.io/docs/configuration/terraform.html#configuring-a-terraform-backend\" rel=\"nofollow\">Configuring a Terraform Backend</a> for more details.</p>\n<p>Bellow we are using an S3 Backend:</p>\n<pre><span class=\"n\">Terraform</span><span class=\"p\">(</span>\n    <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">s3</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">\"us-east-1\"</span><span class=\"p\">,</span>\n            <span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"s2\">\"terraform-tfstate-bucket\"</span><span class=\"p\">,</span>\n            <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"terraform.tfstate\"</span><span class=\"p\">,</span>\n            <span class=\"n\">workspace_key_prefix</span><span class=\"o\">=</span><span class=\"s2\">\"my_prefix\"</span><span class=\"p\">,</span>\n            <span class=\"n\">dynamodb_table</span><span class=\"o\">=</span><span class=\"s2\">\"terraform_locks\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"modules\">\n<h3>Modules</h3>\n<p>Since Terraformpy gives you the full power of Python we encourage you to use \u201cResource Collections\u201d (see the next section) when you\u2019re building your own modular functionality and you don\u2019t plan on sharing these modules outside of your current organization.</p>\n<p>You can however leverage existing HCL modules using the <tt>Module</tt> object if you want to use pre-built, existing modules:</p>\n<pre><span class=\"n\">Module</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"consul\"</span><span class=\"p\">,</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"hashicorp/consul/aws\"</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"0.0.5\"</span><span class=\"p\">,</span>\n\n    <span class=\"n\">servers</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"resource-collections\">\n<h3>Resource Collections</h3>\n<p>A common pattern when building configs using Python is to want to abstract a number of different resources under the guise of a single object \u2013 which is the same pattern native Terraform modules aim to solve.  In terraformpy we provide a <tt>ResourceCollection</tt> base class for building objects that represent multiple resources.</p>\n<p>You can use <a href=\"https://schematics.readthedocs.io/en/latest/\" rel=\"nofollow\">Schematics</a> to define the fields and perform validation.</p>\n<p>As an example, when provisioning an RDS cluster you may want to have a standard set of options that you ship with all your clusters.  You can express that with a resource collection:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">schematics</span> <span class=\"kn\">import</span> <span class=\"n\">types</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schematics.types</span> <span class=\"kn\">import</span> <span class=\"n\">compound</span>\n<span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">ResourceCollection</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RDSCluster</span><span class=\"p\">(</span><span class=\"n\">ResourceCollection</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Defining attributes of your resource collection is like defining a Schematics Model, in fact the</span>\n    <span class=\"c1\"># ResourceCollection class is just a specialized subclass of the Schematics Model class.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Each attribute becomes a field on the collection, and can be provided as a keyword when constructing</span>\n    <span class=\"c1\"># an instance of your collection.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Validation works the same as in Schematics.  You can attach validators to the fields themselves and</span>\n    <span class=\"c1\"># also define \"validate_field\" functions.</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StringType</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">azs</span> <span class=\"o\">=</span> <span class=\"n\">compound</span><span class=\"o\">.</span><span class=\"n\">ListType</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StringType</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">instance_class</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StringType</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'db.r3.large'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># The create_resources function is invoked once the instance has been created and the kwargs provided have been</span>\n    <span class=\"c1\"># processed against the inputs.  All of the instance attributes have been converted to the values provided, so</span>\n    <span class=\"c1\"># if you access self.name in create_resources you're accessing whatever value was provided to the instance</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param_group</span> <span class=\"o\">=</span> <span class=\"n\">Resource</span><span class=\"p\">(</span>\n            <span class=\"s1\">'aws_rds_cluster_parameter_group'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\">_pg'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n            <span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">'aurora5.6'</span><span class=\"p\">,</span>\n            <span class=\"n\">parameter</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'character_set_server'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'utf8'</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'character_set_client'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'utf8'</span><span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">Resource</span><span class=\"p\">(</span>\n            <span class=\"s1\">'aws_rds_cluster'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">cluster_identifier</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">availability_zones</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">azs</span><span class=\"p\">,</span>\n            <span class=\"n\">database_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">master_username</span><span class=\"o\">=</span><span class=\"s1\">'root'</span><span class=\"p\">,</span>\n            <span class=\"n\">master_password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span>\n            <span class=\"n\">db_cluster_parameter_group_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param_group</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instances</span> <span class=\"o\">=</span> <span class=\"n\">Resource</span><span class=\"p\">(</span>\n            <span class=\"s1\">'aws_rds_cluster_instance'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\">_instances'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n            <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\">-${{count.index}}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n            <span class=\"n\">cluster_identifier</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n            <span class=\"n\">instance_class</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_class</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>That definition can then be imported and used in your terraformpy configs.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">modules.rds</span> <span class=\"kn\">import</span> <span class=\"n\">RDSCluster</span>\n\n\n<span class=\"n\">cluster1</span> <span class=\"o\">=</span> <span class=\"n\">RDSCluster</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'cluster1'</span><span class=\"p\">,</span>\n    <span class=\"n\">azs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'us-west-2a'</span><span class=\"p\">,</span><span class=\"s1\">'us-west-2b'</span><span class=\"p\">,</span><span class=\"s1\">'us-west-2c'</span><span class=\"p\">],</span>\n    <span class=\"n\">instance_class</span><span class=\"o\">=</span><span class=\"s1\">'db.r3.large'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># you can then refer to the resources themselves, for interpolation, through the attrs</span>\n<span class=\"c1\"># i.e. cluster1.cluster.id</span>\n</pre>\n</div>\n<div id=\"variants\">\n<h3>Variants</h3>\n<p>Resource definitions that exist across many different environments often only vary slightly between each environment. To facilitate the ease of definition for these differences you can use variant grouping.</p>\n<p>First create the folders: <tt>configs/stage/</tt>, <tt>configs/prod/</tt>, <tt>configs/shared/</tt>.  Inside each of them place a <tt>__init__.py</tt> to make them packages.</p>\n<p>Next create the file <tt>configs/shared/instances.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n\n<span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_instance'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"n\">ami</span><span class=\"o\">=</span><span class=\"n\">ami</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n    <span class=\"n\">prod_variant</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s1\">'m4.xlarge'</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">stage_variant</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s1\">'t2.medium'</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then create <tt>configs/stage/main.tf.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Variant</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Variant</span><span class=\"p\">(</span><span class=\"s1\">'stage'</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">configs.shared.instances</span>\n</pre>\n<p>Since the import of the instances file happens inside of the Variant context then the Resource will be created as if it had been defined like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n\n<span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_instance'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"n\">ami</span><span class=\"o\">=</span><span class=\"n\">ami</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n    <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s1\">'t2.medium'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"multiple-providers\">\n<h3>Multiple providers</h3>\n<p>Depending on your usage of Terraform you will likely end up needing to use multiple providers at some point in time. To use <a href=\"https://www.terraform.io/docs/configuration/providers.html#alias-multiple-provider-instances\" rel=\"nofollow\">multiple providers in Terraform</a> you define them using aliases and then reference those aliases in your resource definitions.</p>\n<p>To make this pattern easier you can use the Terraformpy <tt>Provider</tt> object as a context manager, and then any resources created within the context will automatically have that provider aliases referenced:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">Provider</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Provider</span><span class=\"p\">(</span><span class=\"s2\">\"aws\"</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">\"us-west-2\"</span><span class=\"p\">,</span> <span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"s2\">\"west2\"</span><span class=\"p\">):</span>\n    <span class=\"n\">sg</span> <span class=\"o\">=</span> <span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"s1\">'aws_security_group'</span><span class=\"p\">,</span> <span class=\"s1\">'sg'</span><span class=\"p\">,</span> <span class=\"n\">ingress</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">])</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">==</span> <span class=\"s1\">'aws.west2'</span>\n</pre>\n</div>\n<div id=\"using-file-contents\">\n<h3>Using file contents</h3>\n<p>Often times you will want to include the contents of a file that is located alongside your Python code, but when running <tt>terraform</tt> along with the <tt><span class=\"pre\">${file('myfile.json')}</span></tt> interpolation function pathing will be relative to where the compiled <tt>main.tf.json</tt> file is and not where the Python code lives.</p>\n<p>To help with this situation a function named <tt>relative_file</tt> inside of the <tt>terraformpy.helpers</tt> namespace is provided.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">terraformpy.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">relative_file</span>\n\n<span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_iam_role'</span><span class=\"p\">,</span> <span class=\"s1\">'role_name'</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'role-name'</span><span class=\"p\">,</span>\n    <span class=\"n\">assume_role_policy</span><span class=\"o\">=</span><span class=\"n\">relative_file</span><span class=\"p\">(</span><span class=\"s1\">'role_policy.json'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This would produce a definition that leverages the <tt><span class=\"pre\">${file(...)}</span></tt> interpolation function with a path that reads the <tt>role_policy.json</tt> file from the same directory as the Python code that defined the role.</p>\n</div>\n</div>\n<div id=\"hooks\">\n<h2>Hooks</h2>\n<p>Terraformy offers a \u201chooks\u201d system that allows you to modify objects on the fly at compile\ntime.  This can be useful to apply transformations so that users of objects do not need\nto worry about some of the idiosyncratic schema details of Terraform\u2019s JSON syntax,\nmost notably <a href=\"https://www.terraform.io/docs/configuration/attr-as-blocks.html\" rel=\"nofollow\">\u201cAttributes as Blocks\u201d</a>.</p>\n<p>The best example of this is the <tt>aws_security_group</tt> object type, which requires that its\n<tt>ingress</tt> and <tt>egress</tt> blocks have all of their attributes present, even if they are\n<tt>null</tt>.  To have users have to type out all of the different attributes and set them to\n<tt>None</tt> is cumbersome, so instead you can use the hook that we ship with this distribution:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terraformpy.hooks.aws</span> <span class=\"kn\">import</span> <span class=\"n\">install_aws_security_group_attributes_as_blocks_hook</span>\n\n<span class=\"n\">install_aws_security_group_attributes_as_blocks_hook</span><span class=\"p\">()</span>\n</pre>\n<p>Now, users only need to specify the attributes they care about in rules and the hook will\ntake care of filling in all of the optional attributes that are mandatory to appear in the\nfinal compiled JSON.</p>\n<p>For more information on how the hooks work see the <tt>test_hooks_aws.py</tt> file and the\ninline comments for the <tt>add_hook</tt> function on the different object types.</p>\n</div>\n<div id=\"notes-and-gotchas\">\n<h2>Notes and Gotchas</h2>\n<h2 id=\"security-group-rules-and-self\"><span class=\"section-subtitle\">Security Group Rules and <tt>self</tt></span></h2>\n<p>When creating <tt>aws_security_group_rule</tt> <tt>Resource</tt> objects you cannot pass <tt>self=True</tt> to the object since Python already passes a <tt>self</tt> argument into the constructor.  In this case you\u2019ll need to specify it directly in the <tt>_values</tt>:</p>\n<pre><span class=\"n\">sg</span> <span class=\"o\">=</span> <span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"s1\">'aws_security_group_rule'</span><span class=\"p\">,</span> <span class=\"s1\">'my_rule'</span><span class=\"p\">,</span>\n    <span class=\"n\">_values</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">vpc_id</span><span class=\"o\">=</span><span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"developer-notes\">\n<h2>Developer notes</h2>\n<div id=\"running-tests\">\n<h3>Running tests</h3>\n<p>We use tox to run tests.  While developing locally you can run:</p>\n<pre>tox\n</pre>\n</div>\n<div id=\"formatting-with-black\">\n<h3>Formatting with black</h3>\n<p>We use black to format code.  To apply formatting run:</p>\n<pre>tox -e black -- .\n</pre>\n</div>\n<div id=\"release-steps\">\n<h3>Release Steps</h3>\n<ol>\n<li>Make a branch</li>\n<li>Make your changes</li>\n<li>Bump the version in the VERSION file and add an entry to the CHANGELOG.md file</li>\n<li>Open a PR, tag @NerdWalletOSS/dynamorm in your PR description</li>\n<li>Once approved and merged to master the new version will be pushed to pypi</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6846768, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "b888c30f4f540a1195643a4b6d56aef1", "sha256": "048f3686b640a53f95dee7eab9e67dcd0caa9dd263d0e98d57d4093b10e77e97"}, "downloads": -1, "filename": "terraformpy-1.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "b888c30f4f540a1195643a4b6d56aef1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15160, "upload_time": "2019-08-19T13:05:37", "upload_time_iso_8601": "2019-08-19T13:05:37.447220Z", "url": "https://files.pythonhosted.org/packages/d6/b4/32da244f136c8295dfbe10abc1ebf3836e7c816321680cde2ab1a5e799df/terraformpy-1.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e815addcd0e0fc46eef49b603903d83d", "sha256": "1ce6caa7e666f24d57c97262713d3b406a81d4d1d4136a653c34a0dacf2666f5"}, "downloads": -1, "filename": "terraformpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e815addcd0e0fc46eef49b603903d83d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16928, "upload_time": "2019-08-19T13:05:40", "upload_time_iso_8601": "2019-08-19T13:05:40.526146Z", "url": "https://files.pythonhosted.org/packages/bf/e7/3f03a868d6a5be253af9608a2be99d15b4b38886cfa4145f2c6ef016da0f/terraformpy-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "188dfff93b47b6f62c075823bd8b0e39", "sha256": "c614268ef39e10cd9d266b856268ee96620ab124da80a216410c1c95227f4038"}, "downloads": -1, "filename": "terraformpy-1.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "188dfff93b47b6f62c075823bd8b0e39", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19449, "upload_time": "2019-09-13T20:29:24", "upload_time_iso_8601": "2019-09-13T20:29:24.715646Z", "url": "https://files.pythonhosted.org/packages/fb/17/6ebfe45a5b25a1eb23ccd7a53108752d483ef771c6550c2e339646918548/terraformpy-1.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "688e2565b6c58fb4da47ba0a44e667bf", "sha256": "d97debf0f7d93e854acc36dd772155ab23bf7e9d983277175e81276510a4ae8b"}, "downloads": -1, "filename": "terraformpy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "688e2565b6c58fb4da47ba0a44e667bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17497, "upload_time": "2019-09-13T20:29:26", "upload_time_iso_8601": "2019-09-13T20:29:26.484087Z", "url": "https://files.pythonhosted.org/packages/bb/88/0fabb7f22d8673e6dbfa6113a498959873c0c1af665aa0eeecf7f4df81da/terraformpy-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "774bdfcb5d054795822ee19c87fa9b92", "sha256": "90376ba65649ecb57f081b0e4709ccad4c9fae5adff3f8db0b97eb064fa6916a"}, "downloads": -1, "filename": "terraformpy-1.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "774bdfcb5d054795822ee19c87fa9b92", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19601, "upload_time": "2019-11-25T22:10:10", "upload_time_iso_8601": "2019-11-25T22:10:10.185811Z", "url": "https://files.pythonhosted.org/packages/18/48/dad5021bc4286603dcee869d836dc77dc651e2a4fed76bd84ec51506185e/terraformpy-1.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b14a14acf7af641a5e4e98e2588e2d8", "sha256": "338060801a421948566ad5d679d0b7e9ce23fd88fd38fef5cde6b700680d8de9"}, "downloads": -1, "filename": "terraformpy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "8b14a14acf7af641a5e4e98e2588e2d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17681, "upload_time": "2019-11-25T22:10:11", "upload_time_iso_8601": "2019-11-25T22:10:11.445216Z", "url": "https://files.pythonhosted.org/packages/21/da/a7a50f082273c7edf922e5e7e66133f8d789087b718942646866d8b10b0e/terraformpy-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "17f24feb2963e9b8fbf73314d333f29d", "sha256": "94bd2f1056619d64688e1230b21ee4ce43dcf18a5c974d1ea69bb458c4d8b5e7"}, "downloads": -1, "filename": "terraformpy-1.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "17f24feb2963e9b8fbf73314d333f29d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19608, "upload_time": "2019-12-03T04:39:31", "upload_time_iso_8601": "2019-12-03T04:39:31.109441Z", "url": "https://files.pythonhosted.org/packages/06/9f/0a75259b7259246fa18f4711cc271e2cb1d97940f06bd1b151e41b5c135d/terraformpy-1.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7d08073e6e7272d372ba03cf27ca879", "sha256": "42fc65d1628781b335e965ee3670740ab4730ef83f4b1063efaa3048bf6fc07a"}, "downloads": -1, "filename": "terraformpy-1.1.3.tar.gz", "has_sig": false, "md5_digest": "e7d08073e6e7272d372ba03cf27ca879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17720, "upload_time": "2019-12-03T04:39:32", "upload_time_iso_8601": "2019-12-03T04:39:32.607741Z", "url": "https://files.pythonhosted.org/packages/b2/62/0c223d445df7a94c206c4c89cf83722d5e84934d48f1e8dd1521e550873f/terraformpy-1.1.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "05a10d0aad35789c869eee17932b68fb", "sha256": "20972d429e6321b9cc2970ade868fc250db35d411cdb73bf5a6a1b0a31b97506"}, "downloads": -1, "filename": "terraformpy-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "05a10d0aad35789c869eee17932b68fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19909, "upload_time": "2019-12-04T01:27:43", "upload_time_iso_8601": "2019-12-04T01:27:43.304415Z", "url": "https://files.pythonhosted.org/packages/de/28/4d33f809e59538663c5abac417ce44d97034f1c494eb9e56a96ed01fc863/terraformpy-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d43876ed687deeab5b0243434841e1eb", "sha256": "7f3bbab33f30a4e6f454b799e93adf1b744ef9b2de4452939c1ea53201e87ec5"}, "downloads": -1, "filename": "terraformpy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d43876ed687deeab5b0243434841e1eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18122, "upload_time": "2019-12-04T01:27:45", "upload_time_iso_8601": "2019-12-04T01:27:45.101958Z", "url": "https://files.pythonhosted.org/packages/ab/b8/9cd0d0fed1b360596fc2f95ff7278db2eb899f8cd858406f7f4c64dc1b41/terraformpy-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "49c567a3ce9775464dbdec03ce45d28d", "sha256": "2ebf24ccfd0b439060651de082f8e9e807734e0df83df9ff8b01f489f43bfe05"}, "downloads": -1, "filename": "terraformpy-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49c567a3ce9775464dbdec03ce45d28d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20119, "upload_time": "2019-12-04T23:59:03", "upload_time_iso_8601": "2019-12-04T23:59:03.710219Z", "url": "https://files.pythonhosted.org/packages/ff/0c/31894eb5af33a08b893d70022663f5f48ec828f972bcab29228b5157d0b3/terraformpy-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "872037f176be9b3d695f9c6cc4926431", "sha256": "4002bfe8d053a97175fe760f4e278d32ca9972f6821889eae82d4ac032dfe925"}, "downloads": -1, "filename": "terraformpy-1.2.1.tar.gz", "has_sig": false, "md5_digest": "872037f176be9b3d695f9c6cc4926431", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18628, "upload_time": "2019-12-04T23:59:05", "upload_time_iso_8601": "2019-12-04T23:59:05.191956Z", "url": "https://files.pythonhosted.org/packages/32/0f/54d5e01756796b47075fbe44ad404061ca5c0e034aadd5ece4015554cbc5/terraformpy-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "4196ab0f67d72791eb801fc9b7e871ad", "sha256": "9daa5d64b490c659eb8b3f4d203847d64c5919c64a514921b9558cbb3572cf9e"}, "downloads": -1, "filename": "terraformpy-1.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4196ab0f67d72791eb801fc9b7e871ad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20321, "upload_time": "2020-01-14T20:15:17", "upload_time_iso_8601": "2020-01-14T20:15:17.725515Z", "url": "https://files.pythonhosted.org/packages/ef/53/f67108964d9f48aa162b2edef5d06e40aff897428a86608602d0fd501ae2/terraformpy-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dde411a9c5de7a51d694a5f1bd98a7e1", "sha256": "b9e173ffaf64dec33ed7d9f4ecbd70b3ecca230837768c0dab80319d7a94e26f"}, "downloads": -1, "filename": "terraformpy-1.2.2.tar.gz", "has_sig": false, "md5_digest": "dde411a9c5de7a51d694a5f1bd98a7e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19041, "upload_time": "2020-01-14T20:15:19", "upload_time_iso_8601": "2020-01-14T20:15:19.474301Z", "url": "https://files.pythonhosted.org/packages/e1/a6/ff37fb03f7183fc9fa3f15c245fd93ab9009fb48c62052098c54ee63bca7/terraformpy-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "033109f88c1f98afe51984acfd124560", "sha256": "49233289a9f733a375e6be912033a3f4b4ac4ab3ca118eee16b18b75e455e813"}, "downloads": -1, "filename": "terraformpy-1.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "033109f88c1f98afe51984acfd124560", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20342, "upload_time": "2020-01-15T02:54:37", "upload_time_iso_8601": "2020-01-15T02:54:37.600201Z", "url": "https://files.pythonhosted.org/packages/2b/b9/062c7c21da7cf59ce403041ba6d6643ace157a04b460dd4a21c66a511cea/terraformpy-1.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56dc92e7014bc6562682fa73b6eb8aaf", "sha256": "8123aaa7f24c6a7e03565633ce5f82c4491fe4d3cc40d297127ec93c4d772f7b"}, "downloads": -1, "filename": "terraformpy-1.2.3.tar.gz", "has_sig": false, "md5_digest": "56dc92e7014bc6562682fa73b6eb8aaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19071, "upload_time": "2020-01-15T02:54:39", "upload_time_iso_8601": "2020-01-15T02:54:39.610565Z", "url": "https://files.pythonhosted.org/packages/07/26/87cc41ecf030ed97c80a4312f90da53b4c64809c297472885418a71ad677/terraformpy-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "c7d2ecd1d5bd7036398e68625550d30f", "sha256": "b5400c66621e59a4e07da0e16681dc8a2de61982dd89e5612a39352161ef5806"}, "downloads": -1, "filename": "terraformpy-1.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7d2ecd1d5bd7036398e68625550d30f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20445, "upload_time": "2020-03-19T00:59:47", "upload_time_iso_8601": "2020-03-19T00:59:47.912237Z", "url": "https://files.pythonhosted.org/packages/78/51/165ac1db0d2cd425ee648a4b043d56d6f96c18bd8e3fba04f0e1568f6b80/terraformpy-1.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f93529de70106c9f6ab286c8c4723ce2", "sha256": "4b9770053c338daa181149be03df109a8fbffd2ecab8f811d050257a93322acc"}, "downloads": -1, "filename": "terraformpy-1.2.4.tar.gz", "has_sig": false, "md5_digest": "f93529de70106c9f6ab286c8c4723ce2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20036, "upload_time": "2020-03-19T00:59:49", "upload_time_iso_8601": "2020-03-19T00:59:49.173180Z", "url": "https://files.pythonhosted.org/packages/f0/cd/118f6abf4ffce3a8fda9589f4f7fc855a791655e293a15cd81b7f11d444e/terraformpy-1.2.4.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "e134c2dc417801b481a750e69d3e9ad6", "sha256": "a23f7eadc156603a967aeebe94bf6d10b0895a2e2f1f43c3f733ea1caabaa9bd"}, "downloads": -1, "filename": "terraformpy-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e134c2dc417801b481a750e69d3e9ad6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22531, "upload_time": "2020-03-19T23:51:29", "upload_time_iso_8601": "2020-03-19T23:51:29.437885Z", "url": "https://files.pythonhosted.org/packages/87/da/52116ecaf302a8881e6ddda4caa329124c2bb982eac17355c92c71c5db15/terraformpy-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "457a425596387185b4dee9731d893856", "sha256": "b5c3b55c4049fa5031fd638b562f10553a77b994c37c2c7760c1b8308d77c4f5"}, "downloads": -1, "filename": "terraformpy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "457a425596387185b4dee9731d893856", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22299, "upload_time": "2020-03-19T23:51:30", "upload_time_iso_8601": "2020-03-19T23:51:30.909392Z", "url": "https://files.pythonhosted.org/packages/19/ef/607535ac0d08f34f80fe4b926b9822aa9fc4bd48db2d64397ad9c90d3e71/terraformpy-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e134c2dc417801b481a750e69d3e9ad6", "sha256": "a23f7eadc156603a967aeebe94bf6d10b0895a2e2f1f43c3f733ea1caabaa9bd"}, "downloads": -1, "filename": "terraformpy-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e134c2dc417801b481a750e69d3e9ad6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22531, "upload_time": "2020-03-19T23:51:29", "upload_time_iso_8601": "2020-03-19T23:51:29.437885Z", "url": "https://files.pythonhosted.org/packages/87/da/52116ecaf302a8881e6ddda4caa329124c2bb982eac17355c92c71c5db15/terraformpy-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "457a425596387185b4dee9731d893856", "sha256": "b5c3b55c4049fa5031fd638b562f10553a77b994c37c2c7760c1b8308d77c4f5"}, "downloads": -1, "filename": "terraformpy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "457a425596387185b4dee9731d893856", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22299, "upload_time": "2020-03-19T23:51:30", "upload_time_iso_8601": "2020-03-19T23:51:30.909392Z", "url": "https://files.pythonhosted.org/packages/19/ef/607535ac0d08f34f80fe4b926b9822aa9fc4bd48db2d64397ad9c90d3e71/terraformpy-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:49 2020"}