{"info": {"author": "Ioannis Charalampidis", "author_email": "johnys2@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "roBOB (robot-benchmark)\n=======================\n\n.. image:: https://raw.githubusercontent.com/wavesoft/robob/master/doc/robob.png\n  :target: https://github.com/wavesoft/robob\n  :align: left\n\n**roBob** is python automation tool that simplifies the collection of measurements over repetitive tasks, and the automatic creation of reports. \n\nDo you have to run some benchmarks? Do you need to run some tasks over night and collect the numbers? Are you using custom solutions to achieve this? Robob helps you achieve this in every environment! It launches your application on a virtual terminal, starts your application, cralws it's output, collects numbers and creates reports for you!\n\nIt uses a powerful, extensible, human-readable YAML ruleset for defining your specifications.\n\nYou can learn more on the Wiki Page: https://github.com/wavesoft/robob/wiki\n\nInstalling\n----------\n\nRobob is available on PyPI so you can install it with pip:\n\n.. code-block::\n\n    pip install robob\n\nUsage\n-----\n\nTo launch a benchmark you only need to specify the path to the specifications file you want to use:\n\n.. code-block::\n\n    robob benchmarks/mybenchmark.yaml\n\nRobob will collect the results in a CSV file. If robob finds a folder called ``results`` in the working directory, it will put the results there. Otherwise it will write them in the current directory.\n\nExample\n^^^^^^^\n\nThe following specification file from the Simple Example (https://github.com/wavesoft/robob/wiki/Simple-Example) demonstrates how to use roBob to run iperf between two machines for different window sizes:\n\n.. code-block:: yaml\n\n    # What metrics we will be tracking\n    metrics:\n      - name: bandwidth\n        units: \"B/s\"\n\n    # Which test cases are we going to run\n    test-cases:\n      window_size: [ 64, 128, 256, 512, 1024, 2048 ]\n\n    # Which nodes are involved on this test\n    nodes:\n      - name: node1\n        host: 192.168.1.1\n        access:\n            - class: robob.access.ssh\n              username: user\n              password: secret\n\n      - name: node2\n        host: 192.168.1.2\n        access:\n            - class: robob.access.ssh\n              username: user\n              key: /path/to/private_key\n\n    # What application(s) to start\n    apps:\n      - name: iperf_server\n        binary: /usr/bin/iperf\n        args: [ \"-y\", \"C\", \"-s\", \"-w\", \"${window_size}\" ]\n        parser: iperf_parser\n\n      - name: iperf_client\n        binary: /usr/bin/iperf\n        args: [ \"-y\", \"C\", \"-c\", \"${remote}\", \"-w\", \"${window_size}\" ]\n        parser: iperf_parser\n\n    # How to parse their output\n    parsers:\n      - name: iperf_parser\n        class: robob.parser.split\n        separator: \",\"            # Split on commas\n        match:\n          - col: 8                # Get the 9th column (0=first)\n            name: bandwidth       # And put it on the bandwidth metric\n\n    # Which streams to open in order to run the test\n    streams:\n      - node: node1       # On node 1\n        app: iperf_server # Start iperf server\n\n      - node: node2       # On node 2\n        app: iperf_client # Start iperf client\n        delay: 5s         # After 5 seconds\n        # We also need to define the '${remote}' macro\n        # to point on the IP address of the server\n        define:\n          remote: \"${node.node1.host}\"", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wavesoft/robob", "keywords": "automation benchmark scripting test", "license": "Apache-2.0", "maintainer": null, "maintainer_email": null, "name": "robob", "package_url": "https://pypi.org/project/robob/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/robob/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wavesoft/robob"}, "release_url": "https://pypi.org/project/robob/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "A python tool for simplifying collection of measurements over repetitive tasks", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/wavesoft/robob\" rel=\"nofollow\"><img alt=\"https://raw.githubusercontent.com/wavesoft/robob/master/doc/robob.png\" class=\"align-left\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3890bfa75a373e20fa9ea9507e2dedd2fe33019d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77617665736f66742f726f626f622f6d61737465722f646f632f726f626f622e706e67\"></a>\n<p><strong>roBob</strong> is python automation tool that simplifies the collection of measurements over repetitive tasks, and the automatic creation of reports.</p>\n<p>Do you have to run some benchmarks? Do you need to run some tasks over night and collect the numbers? Are you using custom solutions to achieve this? Robob helps you achieve this in every environment! It launches your application on a virtual terminal, starts your application, cralws it\u2019s output, collects numbers and creates reports for you!</p>\n<p>It uses a powerful, extensible, human-readable YAML ruleset for defining your specifications.</p>\n<p>You can learn more on the Wiki Page: <a href=\"https://github.com/wavesoft/robob/wiki\" rel=\"nofollow\">https://github.com/wavesoft/robob/wiki</a></p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Robob is available on PyPI so you can install it with pip:</p>\n<pre>pip install robob\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To launch a benchmark you only need to specify the path to the specifications file you want to use:</p>\n<pre>robob benchmarks/mybenchmark.yaml\n</pre>\n<p>Robob will collect the results in a CSV file. If robob finds a folder called <tt>results</tt> in the working directory, it will put the results there. Otherwise it will write them in the current directory.</p>\n<div id=\"example\">\n<h3>Example</h3>\n<p>The following specification file from the Simple Example (<a href=\"https://github.com/wavesoft/robob/wiki/Simple-Example\" rel=\"nofollow\">https://github.com/wavesoft/robob/wiki/Simple-Example</a>) demonstrates how to use roBob to run iperf between two machines for different window sizes:</p>\n<pre><span class=\"c1\"># What metrics we will be tracking</span>\n<span class=\"nt\">metrics</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">bandwidth</span>\n    <span class=\"nt\">units</span><span class=\"p\">:</span> <span class=\"s\">\"B/s\"</span>\n\n<span class=\"c1\"># Which test cases are we going to run</span>\n<span class=\"nt\">test-cases</span><span class=\"p\">:</span>\n  <span class=\"nt\">window_size</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span> <span class=\"nv\">64</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">128</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">256</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">512</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">1024</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">2048</span> <span class=\"p-Indicator\">]</span>\n\n<span class=\"c1\"># Which nodes are involved on this test</span>\n<span class=\"nt\">nodes</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">node1</span>\n    <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">192.168.1.1</span>\n    <span class=\"nt\">access</span><span class=\"p\">:</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">robob.access.ssh</span>\n          <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">user</span>\n          <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">secret</span>\n\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">node2</span>\n    <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">192.168.1.2</span>\n    <span class=\"nt\">access</span><span class=\"p\">:</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">robob.access.ssh</span>\n          <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">user</span>\n          <span class=\"nt\">key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/path/to/private_key</span>\n\n<span class=\"c1\"># What application(s) to start</span>\n<span class=\"nt\">apps</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_server</span>\n    <span class=\"nt\">binary</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/usr/bin/iperf</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span> <span class=\"s\">\"-y\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"C\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"-s\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"-w\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"${window_size}\"</span> <span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">parser</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_parser</span>\n\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_client</span>\n    <span class=\"nt\">binary</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/usr/bin/iperf</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span> <span class=\"s\">\"-y\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"C\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"-c\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"${remote}\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"-w\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"${window_size}\"</span> <span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">parser</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_parser</span>\n\n<span class=\"c1\"># How to parse their output</span>\n<span class=\"nt\">parsers</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_parser</span>\n    <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">robob.parser.split</span>\n    <span class=\"nt\">separator</span><span class=\"p\">:</span> <span class=\"s\">\",\"</span>            <span class=\"c1\"># Split on commas</span>\n    <span class=\"nt\">match</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"nt\">col</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">8</span>                <span class=\"c1\"># Get the 9th column (0=first)</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">bandwidth</span>       <span class=\"c1\"># And put it on the bandwidth metric</span>\n\n<span class=\"c1\"># Which streams to open in order to run the test</span>\n<span class=\"nt\">streams</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">node1</span>       <span class=\"c1\"># On node 1</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_server</span> <span class=\"c1\"># Start iperf server</span>\n\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">node2</span>       <span class=\"c1\"># On node 2</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">iperf_client</span> <span class=\"c1\"># Start iperf client</span>\n    <span class=\"nt\">delay</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">5s</span>         <span class=\"c1\"># After 5 seconds</span>\n    <span class=\"c1\"># We also need to define the '${remote}' macro</span>\n    <span class=\"c1\"># to point on the IP address of the server</span>\n    <span class=\"nt\">define</span><span class=\"p\">:</span>\n      <span class=\"nt\">remote</span><span class=\"p\">:</span> <span class=\"s\">\"${node.node1.host}\"</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2111589, "releases": {"0.1.0b1": [{"comment_text": "", "digests": {"md5": "6533a0865d26f8170bf9d85d1cb2ce2f", "sha256": "a5cf1e1a478179977db0db7368d077ee4df0bca011d020bdeceb8e4396d97fe5"}, "downloads": -1, "filename": "robob-0.1.0b1.tar.gz", "has_sig": false, "md5_digest": "6533a0865d26f8170bf9d85d1cb2ce2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31676, "upload_time": "2016-05-10T15:05:51", "upload_time_iso_8601": "2016-05-10T15:05:51.909772Z", "url": "https://files.pythonhosted.org/packages/6d/67/527886599a88e4604cb374dbd4e9dd06a59f2e0fb558a7807b15825b7f67/robob-0.1.0b1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "96962be8432d1aeec36fed18f861f1aa", "sha256": "ee91804c1eb09d5bc5e957b8cce03c7b883b4010f4033b67b48e61126f5f7933"}, "downloads": -1, "filename": "robob-0.2.0.tar.gz", "has_sig": false, "md5_digest": "96962be8432d1aeec36fed18f861f1aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33117, "upload_time": "2016-05-11T22:38:58", "upload_time_iso_8601": "2016-05-11T22:38:58.086396Z", "url": "https://files.pythonhosted.org/packages/31/97/b89926582f800be62781e6b1cc54d2cd50695a26950e1c9a0bf0a8cbd8d5/robob-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e5c5aede648df7376a2d256db0218441", "sha256": "ff850f7c0b31e4f015283d654b54f5f41a23e547f373e145f9229cf074fab921"}, "downloads": -1, "filename": "robob-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e5c5aede648df7376a2d256db0218441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33143, "upload_time": "2016-05-11T22:49:29", "upload_time_iso_8601": "2016-05-11T22:49:29.334193Z", "url": "https://files.pythonhosted.org/packages/43/b9/92d398b7a265036530a17915bfea39b856e6d37eddf437cb45de21aaeea3/robob-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5c5aede648df7376a2d256db0218441", "sha256": "ff850f7c0b31e4f015283d654b54f5f41a23e547f373e145f9229cf074fab921"}, "downloads": -1, "filename": "robob-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e5c5aede648df7376a2d256db0218441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33143, "upload_time": "2016-05-11T22:49:29", "upload_time_iso_8601": "2016-05-11T22:49:29.334193Z", "url": "https://files.pythonhosted.org/packages/43/b9/92d398b7a265036530a17915bfea39b856e6d37eddf437cb45de21aaeea3/robob-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:04 2020"}