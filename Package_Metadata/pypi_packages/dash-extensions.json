{"info": {"author": "Emil Haldrup Eriksen", "author_email": "emil.h.eriksen@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# dash-extensions\n\nThe purpose of this package is to provide various extensions to the Plotly Dash framework. It is essentially a collection of code snippets that i have been reusing across multiple projects.\n\n### DashCallbackBlueprint\n\nA known limitation of Dash is the inability to assign multiple callbacks to the same output. Hence the following code will **not** work,\n\n    import dash\n    import dash_html_components as html\n    from dash.dependencies import Output, Input\n    \n    app = dash.Dash()\n    app.layout = html.Div([html.Button(\"Button 1\", id=\"btn1\"), html.Button(\"Button 2\", id=\"btn2\"), html.Div(id=\"div\")])\n    \n    \n    @app.callback(Output(\"div\", \"children\"), [Input(\"btn1\", \"n_clicks\")])\n    def click_btn1(n_clicks):\n        return \"You clicked btn1\"\n    \n    \n    @app.callback(Output(\"div\", \"children\"), [Input(\"btn2\", \"n_clicks\")])\n    def click_btn2(n_clicks):\n        return \"You clicked btn2\"\n    \n    \n    if __name__ == '__main__':\n        app.run_server()\n\nSpecifically, a dash.exceptions.DuplicateCallbackOutput exception will be raised as an attempt is made to assign the output `Output(\"div\", \"children\")` a second time. \n\nTo address this problem, this package provides the `DashCallbackBlueprint` class. It acts as a proxy for the Dash application during callback registration, but unlike the Dash application, it supports assignment of multiple callbacks to the same output. When all callbacks have been assigned, the blueprint is registered on the Dash application,\n\n    import dash\n    import dash_html_components as html\n    from dash.dependencies import Output, Input\n    from dash_extensions.callback import DashCallbackBlueprint\n    \n        \n    app = dash.Dash()\n    app.layout = html.Div([html.Button(\"Button 1\", id=\"btn1\"), html.Button(\"Button 2\", id=\"btn2\"), html.Div(id=\"div\")])\n    dcb = DashCallbackBlueprint() \n    \n    \n    @dcb.callback(Output(\"div\", \"children\"), [Input(\"btn1\", \"n_clicks\")])\n    def click_btn1(n_clicks):\n        return \"You clicked btn1\"\n    \n    \n    @dcb.callback(Output(\"div\", \"children\"), [Input(\"btn2\", \"n_clicks\")]) \n    def click_btn2(n_clicks):\n        return \"You clicked btn2\"\n    \n    \n    dcb.register(app)  \n    \n    if __name__ == '__main__':\n        app.run_server()\n\nUnder the hood, the two callbacks are merged into one with the appropriate function handler invoked depending on the input trigger. In this simple case, the two callbacks could easily have been merged by hand. However, in more complex cases, the callback merging and control flow delegation can be cumbersome to implement by hand.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thedirtyfew/dash-extensions/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dash-extensions", "package_url": "https://pypi.org/project/dash-extensions/", "platform": "", "project_url": "https://pypi.org/project/dash-extensions/", "project_urls": {"Homepage": "https://github.com/thedirtyfew/dash-extensions/"}, "release_url": "https://pypi.org/project/dash-extensions/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Various extensions for the Plotly Dash framework", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dash-extensions</h1>\n<p>The purpose of this package is to provide various extensions to the Plotly Dash framework. It is essentially a collection of code snippets that i have been reusing across multiple projects.</p>\n<h3>DashCallbackBlueprint</h3>\n<p>A known limitation of Dash is the inability to assign multiple callbacks to the same output. Hence the following code will <strong>not</strong> work,</p>\n<pre><code>import dash\nimport dash_html_components as html\nfrom dash.dependencies import Output, Input\n\napp = dash.Dash()\napp.layout = html.Div([html.Button(\"Button 1\", id=\"btn1\"), html.Button(\"Button 2\", id=\"btn2\"), html.Div(id=\"div\")])\n\n\n@app.callback(Output(\"div\", \"children\"), [Input(\"btn1\", \"n_clicks\")])\ndef click_btn1(n_clicks):\n    return \"You clicked btn1\"\n\n\n@app.callback(Output(\"div\", \"children\"), [Input(\"btn2\", \"n_clicks\")])\ndef click_btn2(n_clicks):\n    return \"You clicked btn2\"\n\n\nif __name__ == '__main__':\n    app.run_server()\n</code></pre>\n<p>Specifically, a dash.exceptions.DuplicateCallbackOutput exception will be raised as an attempt is made to assign the output <code>Output(\"div\", \"children\")</code> a second time.</p>\n<p>To address this problem, this package provides the <code>DashCallbackBlueprint</code> class. It acts as a proxy for the Dash application during callback registration, but unlike the Dash application, it supports assignment of multiple callbacks to the same output. When all callbacks have been assigned, the blueprint is registered on the Dash application,</p>\n<pre><code>import dash\nimport dash_html_components as html\nfrom dash.dependencies import Output, Input\nfrom dash_extensions.callback import DashCallbackBlueprint\n\n    \napp = dash.Dash()\napp.layout = html.Div([html.Button(\"Button 1\", id=\"btn1\"), html.Button(\"Button 2\", id=\"btn2\"), html.Div(id=\"div\")])\ndcb = DashCallbackBlueprint() \n\n\n@dcb.callback(Output(\"div\", \"children\"), [Input(\"btn1\", \"n_clicks\")])\ndef click_btn1(n_clicks):\n    return \"You clicked btn1\"\n\n\n@dcb.callback(Output(\"div\", \"children\"), [Input(\"btn2\", \"n_clicks\")]) \ndef click_btn2(n_clicks):\n    return \"You clicked btn2\"\n\n\ndcb.register(app)  \n\nif __name__ == '__main__':\n    app.run_server()\n</code></pre>\n<p>Under the hood, the two callbacks are merged into one with the appropriate function handler invoked depending on the input trigger. In this simple case, the two callbacks could easily have been merged by hand. However, in more complex cases, the callback merging and control flow delegation can be cumbersome to implement by hand.</p>\n\n          </div>"}, "last_serial": 7016999, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d6e9e4a4be2b1d6427dd997f35f48cab", "sha256": "2b31e9b6020bb644abc0e0d23ecc1b03e8edee16a69cd030e45d4077e6e51500"}, "downloads": -1, "filename": "dash-extensions-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d6e9e4a4be2b1d6427dd997f35f48cab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3653, "upload_time": "2020-03-25T08:40:23", "upload_time_iso_8601": "2020-03-25T08:40:23.630105Z", "url": "https://files.pythonhosted.org/packages/8e/e1/bd15c6f21cd25372ed6fd3d8c5c96ec5ee6dcee42b885879698fbedfc891/dash-extensions-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ecef66d4aba1eab8e0d1b800060e01b5", "sha256": "7780677e31a84c91462bd5585abb05a8d7a41e33b7f054cde49c91c28ffe6eda"}, "downloads": -1, "filename": "dash-extensions-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ecef66d4aba1eab8e0d1b800060e01b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3648, "upload_time": "2020-03-25T08:46:02", "upload_time_iso_8601": "2020-03-25T08:46:02.588975Z", "url": "https://files.pythonhosted.org/packages/ac/34/4a48fabb334bd3f2fbf3d88972cc787a12580e3f5287b48c4507269b7eec/dash-extensions-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c154e8990a6c0760dbf532f80ff2512b", "sha256": "0ed3ec73d88302bc805436a5aa49cc779a1eacef703aa92ce6de8e80c0cade8c"}, "downloads": -1, "filename": "dash-extensions-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c154e8990a6c0760dbf532f80ff2512b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3942, "upload_time": "2020-04-14T12:59:53", "upload_time_iso_8601": "2020-04-14T12:59:53.999264Z", "url": "https://files.pythonhosted.org/packages/09/e5/131763ef6205b0217873a858ea6e23c66f6b6c7c7242b37f5eb7646ea823/dash-extensions-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c154e8990a6c0760dbf532f80ff2512b", "sha256": "0ed3ec73d88302bc805436a5aa49cc779a1eacef703aa92ce6de8e80c0cade8c"}, "downloads": -1, "filename": "dash-extensions-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c154e8990a6c0760dbf532f80ff2512b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3942, "upload_time": "2020-04-14T12:59:53", "upload_time_iso_8601": "2020-04-14T12:59:53.999264Z", "url": "https://files.pythonhosted.org/packages/09/e5/131763ef6205b0217873a858ea6e23c66f6b6c7c7242b37f5eb7646ea823/dash-extensions-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:36 2020"}