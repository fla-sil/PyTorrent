{"info": {"author": "Neil Girdhar", "author_email": "mistersheik@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=================================\nEFAX: Exponential Families in JAX\n=================================\n.. image:: https://badge.fury.io/py/efax.svg\n    :target: https://badge.fury.io/py/efax\n\n.. role:: bash(code)\n    :language: bash\n\n.. role:: python(code)\n   :language: python\n\nThis library provides a set of tools for working with *exponential family distributions* in the differential programming library `JAX <https://github.com/google/jax/>`_.\nThe *exponential families* are an important class of probability distributions that include the normal, gamma, beta, exponential, Poisson, binomial, and Bernoulli distributions.\nFor an explaination of the fundamental ideas behind this library, see our `overview on exponential families <https://github.com/NeilGirdhar/efax/blob/master/expfam.pdf>`_.\n\nInstallation\n============\nefax depends on https://github.com/google/jax/pull/2487, so the easiest way to get it working is to install jax from https://github.com/NeilGirdhar/jax:\n\n.. code:: bash\n\n    pip install --upgrade git+https://github.com/NeilGirdhar/jax.git\n\nUsage\n=====\nIn SciPy, a distribution is represented by a single object, so a thousand distributions need a thousand objects.  Each object encodes the distribution family, and the parameters of the distribution.\nEFAX has a different representation.  Each :python:`ExponentialFamily` object encodes only the distribution family for many (say, one thousand) distributions.  The parameters of the distributions are passed in to various methods on the object to evaluate various things.  For example,\n\n.. code:: python\n\n    from jax import numpy as jnp\n\n    from efax import Bernoulli\n\n    b = Bernoulli(shape=(3,))\n\n    # p are expectation parameters of Bernoulli distributions having probabilities\n    # 0.4, 0.5, and 0.6.\n    p = jnp.array([[0.4], [0.5], [0.6]])\n\n    # q are natural parameters of Bernoulli distributions having log-odds 0, which\n    # is probability 0.5.\n    q = jnp.zeros((3, 1))\n\n    print(b.cross_entropy(p, q))\n    # [0.6931472 0.6931472 0.6931472]\n\n    # q are natural parameters of Bernoulli distributions having a probability\n    # of 0.3.\n    q = b.exp_to_nat(0.3 * jnp.ones((3, 1)))\n\n    print(b.cross_entropy(p, q))\n    # [0.6955941  0.78032386 0.86505365]\n    # A Bernoulli distribution with probability 0.3 predicts a Bernoulli\n    # observation with probability 0.4 better than the other observations.\n\nWith exponential families, maximum likelihood estimation is just expectation over expectation parameters.  Models that combine independent predictors just sum natural parameters.  When we want to optimize such models, we just want to take the gradient of cross entropy with respect to predictions.\n\nThanks to JAX, any gradient of the cross entropy will automatically be as accurate and numerically stable as possible.  This is because the gradient of the cross entropy involves the gradient of the log-normalizer, which typically has a very nice form.  For example,\n\n.. code:: python\n\n    from jax import grad, jit, lax\n    from jax import numpy as jnp\n\n    from efax import Bernoulli\n\n    b = Bernoulli(shape=())\n\n\n    def cross_entropy_loss(p, q):\n        return b.cross_entropy(p, q)\n\n\n    gce = jit(grad(cross_entropy_loss, 1))\n\n\n    def body_fun(q):\n        return q - gce(some_p, q) * 1e-4\n\n\n    def cond_fun(q):\n        return jnp.sum(gce(some_p, q) ** 2) > 1e-7\n\n\n    # some_p are expectation parameters of a Bernoulli distribution corresponding\n    # to probability 0.4.\n    some_p = jnp.array([0.4])\n\n    # some_q are natural parameters of a Bernoulli distribution corresponding to\n    # log-odds 0, which is probability 0.5.\n    some_q = jnp.array([0.0])\n\n    # Optimize the predictive distribution iteratively.\n    print(lax.while_loop(cond_fun, body_fun, some_q))\n    # Outputs the natural parameters that correspond to 0.4.\n\n    # Compare with the true value.\n    print(b.exp_to_nat(some_p))\n\nContribution guidelines\n=======================\n\n- Conventions: PEP8.\n\n- How to run tests: :bash:`pytest .`\n\n- How to clean the source:\n\n  - :bash:`isort -rc -y`\n  - :bash:`pylint efax`\n  - :bash:`flake8 efax`\n  - :bash:`mypy efax`\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NeilGirdhar/efax", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "efax", "package_url": "https://pypi.org/project/efax/", "platform": "", "project_url": "https://pypi.org/project/efax/", "project_urls": {"Homepage": "https://github.com/NeilGirdhar/efax", "Repository": "https://github.com/NeilGirdhar/efax"}, "release_url": "https://pypi.org/project/efax/0.2.2/", "requires_dist": ["ipromise (>=1.5,<2.0)", "jax (>=0.1.61,<0.2.0)", "jaxlib (>=0.1.42,<0.2.0)", "nptyping (>=1,<2)", "numpy (>=1.18,<2.0)", "scipy (>=1.4,<2.0)"], "requires_python": ">=3.6,<4.0", "summary": "Exponential families for JAX", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/efax\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/efax.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96a61ce6b91bebbff77f56585d2cc5e27650e720/68747470733a2f2f62616467652e667572792e696f2f70792f656661782e737667\"></a>\n<p>This library provides a set of tools for working with <em>exponential family distributions</em> in the differential programming library <a href=\"https://github.com/google/jax/\" rel=\"nofollow\">JAX</a>.\nThe <em>exponential families</em> are an important class of probability distributions that include the normal, gamma, beta, exponential, Poisson, binomial, and Bernoulli distributions.\nFor an explaination of the fundamental ideas behind this library, see our <a href=\"https://github.com/NeilGirdhar/efax/blob/master/expfam.pdf\" rel=\"nofollow\">overview on exponential families</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>efax depends on <a href=\"https://github.com/google/jax/pull/2487\" rel=\"nofollow\">https://github.com/google/jax/pull/2487</a>, so the easiest way to get it working is to install jax from <a href=\"https://github.com/NeilGirdhar/jax\" rel=\"nofollow\">https://github.com/NeilGirdhar/jax</a>:</p>\n<pre>pip install --upgrade git+https://github.com/NeilGirdhar/jax.git\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In SciPy, a distribution is represented by a single object, so a thousand distributions need a thousand objects.  Each object encodes the distribution family, and the parameters of the distribution.\nEFAX has a different representation.  Each <code class=\"python\"><span class=\"n\">ExponentialFamily</span></code> object encodes only the distribution family for many (say, one thousand) distributions.  The parameters of the distributions are passed in to various methods on the object to evaluate various things.  For example,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax</span> <span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">jnp</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">efax</span> <span class=\"kn\">import</span> <span class=\"n\">Bernoulli</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bernoulli</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,))</span>\n\n<span class=\"c1\"># p are expectation parameters of Bernoulli distributions having probabilities</span>\n<span class=\"c1\"># 0.4, 0.5, and 0.6.</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.6</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># q are natural parameters of Bernoulli distributions having log-odds 0, which</span>\n<span class=\"c1\"># is probability 0.5.</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">cross_entropy</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">))</span>\n<span class=\"c1\"># [0.6931472 0.6931472 0.6931472]</span>\n\n<span class=\"c1\"># q are natural parameters of Bernoulli distributions having a probability</span>\n<span class=\"c1\"># of 0.3.</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">exp_to_nat</span><span class=\"p\">(</span><span class=\"mf\">0.3</span> <span class=\"o\">*</span> <span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">cross_entropy</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">))</span>\n<span class=\"c1\"># [0.6955941  0.78032386 0.86505365]</span>\n<span class=\"c1\"># A Bernoulli distribution with probability 0.3 predicts a Bernoulli</span>\n<span class=\"c1\"># observation with probability 0.4 better than the other observations.</span>\n</pre>\n<p>With exponential families, maximum likelihood estimation is just expectation over expectation parameters.  Models that combine independent predictors just sum natural parameters.  When we want to optimize such models, we just want to take the gradient of cross entropy with respect to predictions.</p>\n<p>Thanks to JAX, any gradient of the cross entropy will automatically be as accurate and numerically stable as possible.  This is because the gradient of the cross entropy involves the gradient of the log-normalizer, which typically has a very nice form.  For example,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax</span> <span class=\"kn\">import</span> <span class=\"n\">grad</span><span class=\"p\">,</span> <span class=\"n\">jit</span><span class=\"p\">,</span> <span class=\"n\">lax</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jax</span> <span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">jnp</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">efax</span> <span class=\"kn\">import</span> <span class=\"n\">Bernoulli</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bernoulli</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cross_entropy_loss</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">cross_entropy</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">gce</span> <span class=\"o\">=</span> <span class=\"n\">jit</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">cross_entropy_loss</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">body_fun</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">q</span> <span class=\"o\">-</span> <span class=\"n\">gce</span><span class=\"p\">(</span><span class=\"n\">some_p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">1e-4</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cond_fun</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">gce</span><span class=\"p\">(</span><span class=\"n\">some_p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1e-7</span>\n\n\n<span class=\"c1\"># some_p are expectation parameters of a Bernoulli distribution corresponding</span>\n<span class=\"c1\"># to probability 0.4.</span>\n<span class=\"n\">some_p</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.4</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># some_q are natural parameters of a Bernoulli distribution corresponding to</span>\n<span class=\"c1\"># log-odds 0, which is probability 0.5.</span>\n<span class=\"n\">some_q</span> <span class=\"o\">=</span> <span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Optimize the predictive distribution iteratively.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lax</span><span class=\"o\">.</span><span class=\"n\">while_loop</span><span class=\"p\">(</span><span class=\"n\">cond_fun</span><span class=\"p\">,</span> <span class=\"n\">body_fun</span><span class=\"p\">,</span> <span class=\"n\">some_q</span><span class=\"p\">))</span>\n<span class=\"c1\"># Outputs the natural parameters that correspond to 0.4.</span>\n\n<span class=\"c1\"># Compare with the true value.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">exp_to_nat</span><span class=\"p\">(</span><span class=\"n\">some_p</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"contribution-guidelines\">\n<h2>Contribution guidelines</h2>\n<ul>\n<li>Conventions: PEP8.</li>\n<li>How to run tests: <code class=\"bash\">pytest .</code></li>\n<li>How to clean the source:<ul>\n<li><code class=\"bash\">isort -rc -y</code></li>\n<li><code class=\"bash\">pylint efax</code></li>\n<li><code class=\"bash\">flake8 efax</code></li>\n<li><code class=\"bash\">mypy efax</code></li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6965415, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3795f306aae02b0f58a8039aea969949", "sha256": "ebfaff3fdea1d578bceaff25ddbcda09ac35232bb79df320d9d57631eeaf634a"}, "downloads": -1, "filename": "efax-0.1.tar.gz", "has_sig": false, "md5_digest": "3795f306aae02b0f58a8039aea969949", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18268, "upload_time": "2020-03-25T08:27:45", "upload_time_iso_8601": "2020-03-25T08:27:45.874318Z", "url": "https://files.pythonhosted.org/packages/4a/af/9f301f5371a220c87fd5bef0e801e33639057053a3745476343dbb35402e/efax-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "cae3db02c2282106ae4cfd3695f9b40e", "sha256": "50949c5aa362ea8e81aa2e79c4e87e52c323a88e5b430bdd0ddf01a4c0379b95"}, "downloads": -1, "filename": "efax-0.2.tar.gz", "has_sig": false, "md5_digest": "cae3db02c2282106ae4cfd3695f9b40e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18270, "upload_time": "2020-03-25T08:37:31", "upload_time_iso_8601": "2020-03-25T08:37:31.405135Z", "url": "https://files.pythonhosted.org/packages/51/09/79b991af97f7b5f67ab218c0753836ff927d8960329aa564d09fe6ab38bc/efax-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "709c12fa4e7ddd4c4773285f263441fd", "sha256": "cbb801f9f6f1f49a89ea2b93aac2de7f7ac04dbf3231a031f429e9eef5f62541"}, "downloads": -1, "filename": "efax-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "709c12fa4e7ddd4c4773285f263441fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 28587, "upload_time": "2020-04-06T19:52:30", "upload_time_iso_8601": "2020-04-06T19:52:30.065306Z", "url": "https://files.pythonhosted.org/packages/57/e4/0a7494b035e13558918c5f2d0586393681f5698137ab106d8031618d1c7b/efax-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "462c3dc39ba04c0e463ff66ffe5d95f1", "sha256": "974bc6583782ed564c4fc5891db8f482d1572635f6716ade6defc070f753de88"}, "downloads": -1, "filename": "efax-0.2.1.tar.gz", "has_sig": false, "md5_digest": "462c3dc39ba04c0e463ff66ffe5d95f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19793, "upload_time": "2020-04-06T19:52:31", "upload_time_iso_8601": "2020-04-06T19:52:31.370571Z", "url": "https://files.pythonhosted.org/packages/cb/dd/2d6e327042c1ec8c9e9bd83b09ec2a142a9334b8e8e68591e3e91c591eb7/efax-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "1c5bc889e970d8f6cb5b561a45d6fd14", "sha256": "8bb45d854dcaffbfe522b63624f6d8217bb3899eefac7ccb3b8aef5ad9017ce9"}, "downloads": -1, "filename": "efax-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1c5bc889e970d8f6cb5b561a45d6fd14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 28819, "upload_time": "2020-04-06T23:21:59", "upload_time_iso_8601": "2020-04-06T23:21:59.783322Z", "url": "https://files.pythonhosted.org/packages/2d/1b/2ef28ee7db51bc98de68f01632f84713687521180470780049e5eead7060/efax-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edd858732f8b05fd1f988915d8fcf4a4", "sha256": "63594a5cabee535e1c97943f0759970dc23e1a38101afce36359df4a3cd568d5"}, "downloads": -1, "filename": "efax-0.2.2.tar.gz", "has_sig": false, "md5_digest": "edd858732f8b05fd1f988915d8fcf4a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19955, "upload_time": "2020-04-06T23:22:00", "upload_time_iso_8601": "2020-04-06T23:22:00.866967Z", "url": "https://files.pythonhosted.org/packages/36/99/3e6e6dbb63982adc2f27db370c1b136dc96a41859e4e405805e3012091f5/efax-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c5bc889e970d8f6cb5b561a45d6fd14", "sha256": "8bb45d854dcaffbfe522b63624f6d8217bb3899eefac7ccb3b8aef5ad9017ce9"}, "downloads": -1, "filename": "efax-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1c5bc889e970d8f6cb5b561a45d6fd14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 28819, "upload_time": "2020-04-06T23:21:59", "upload_time_iso_8601": "2020-04-06T23:21:59.783322Z", "url": "https://files.pythonhosted.org/packages/2d/1b/2ef28ee7db51bc98de68f01632f84713687521180470780049e5eead7060/efax-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edd858732f8b05fd1f988915d8fcf4a4", "sha256": "63594a5cabee535e1c97943f0759970dc23e1a38101afce36359df4a3cd568d5"}, "downloads": -1, "filename": "efax-0.2.2.tar.gz", "has_sig": false, "md5_digest": "edd858732f8b05fd1f988915d8fcf4a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19955, "upload_time": "2020-04-06T23:22:00", "upload_time_iso_8601": "2020-04-06T23:22:00.866967Z", "url": "https://files.pythonhosted.org/packages/36/99/3e6e6dbb63982adc2f27db370c1b136dc96a41859e4e405805e3012091f5/efax-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:23 2020"}