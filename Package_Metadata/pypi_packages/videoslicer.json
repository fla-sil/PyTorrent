{"info": {"author": "Bas Hoonhout", "author_email": "bas.hoonhout@deltares.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "VideoSlicer\n===========\n\nThis package provides a `VideoSlicer` object that allows you to access\na video file as if it is a matrix. You can create `VideoView` objects\nfrom a `VideoSlicer` object that target specific parts of a video file\nusing native Python slicing and indexing mechanisms. The `VideoView`\nobjects can be used to iterate over the frames in arbitrary\ndimensions, resulting in `VideoFrame` or `VideoFrameCRS` objects. Both\nobjects provide a convenient interface to transport, resize, save and\nreference frames from the original video file.\n\nAs slicing, indexing and iterating is supported in arbitrary\ndimensions, the `VideoSlicer` object can be used to quickly extract\ntimestacks as well as ordinary frames in physical meaningful\ncoordinates.\n\nExamples\n--------\n\n.. code-block:: python\n\n   slicer = VideoSlicer('movie.avi')\n   view = slicer[:10,::10,::10]\n   for frame in view:\n       frame.save('frame{:06d}.jpg'.format(frame.index))\n\n.. code-block:: python\n\n   slicer = VideoSlicer('movie.avi')\n   frame = slicer[10,...]\n   frame.save('frame.jpg')\n   frame.plot()\n\n.. code-block:: python\n\n   slicer = VideoSlicer('movie.avi', axis=2) # loop over horizontal dimension\n   for frame in slicer[:,:,::10]:\n       frame.T.save('timestack{:06d}.jpg'.format(frame.index)) # transpose to have time on the horizontal axis\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://videoslicer.readthedocs.io/", "keywords": "video slice timestacks crs deltares tudelft", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "videoslicer", "package_url": "https://pypi.org/project/videoslicer/", "platform": "", "project_url": "https://pypi.org/project/videoslicer/", "project_urls": {"Homepage": "http://videoslicer.readthedocs.io/"}, "release_url": "https://pypi.org/project/videoslicer/1.0.0rc2/", "requires_dist": ["docopt", "numpy", "pandas", "scikit-learn", "scipy", "six"], "requires_python": ">=2.7, <4", "summary": "Toolbox to slice videos along arbitrary dimensions", "version": "1.0.0rc2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a <cite>VideoSlicer</cite> object that allows you to access\na video file as if it is a matrix. You can create <cite>VideoView</cite> objects\nfrom a <cite>VideoSlicer</cite> object that target specific parts of a video file\nusing native Python slicing and indexing mechanisms. The <cite>VideoView</cite>\nobjects can be used to iterate over the frames in arbitrary\ndimensions, resulting in <cite>VideoFrame</cite> or <cite>VideoFrameCRS</cite> objects. Both\nobjects provide a convenient interface to transport, resize, save and\nreference frames from the original video file.</p>\n<p>As slicing, indexing and iterating is supported in arbitrary\ndimensions, the <cite>VideoSlicer</cite> object can be used to quickly extract\ntimestacks as well as ordinary frames in physical meaningful\ncoordinates.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre><span class=\"n\">slicer</span> <span class=\"o\">=</span> <span class=\"n\">VideoSlicer</span><span class=\"p\">(</span><span class=\"s1\">'movie.avi'</span><span class=\"p\">)</span>\n<span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">slicer</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">,::</span><span class=\"mi\">10</span><span class=\"p\">,::</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">frame</span> <span class=\"ow\">in</span> <span class=\"n\">view</span><span class=\"p\">:</span>\n    <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'frame</span><span class=\"si\">{:06d}</span><span class=\"s1\">.jpg'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"n\">slicer</span> <span class=\"o\">=</span> <span class=\"n\">VideoSlicer</span><span class=\"p\">(</span><span class=\"s1\">'movie.avi'</span><span class=\"p\">)</span>\n<span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">slicer</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'frame.jpg'</span><span class=\"p\">)</span>\n<span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"n\">slicer</span> <span class=\"o\">=</span> <span class=\"n\">VideoSlicer</span><span class=\"p\">(</span><span class=\"s1\">'movie.avi'</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># loop over horizontal dimension</span>\n<span class=\"k\">for</span> <span class=\"n\">frame</span> <span class=\"ow\">in</span> <span class=\"n\">slicer</span><span class=\"p\">[:,:,::</span><span class=\"mi\">10</span><span class=\"p\">]:</span>\n    <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'timestack</span><span class=\"si\">{:06d}</span><span class=\"s1\">.jpg'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">))</span> <span class=\"c1\"># transpose to have time on the horizontal axis</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3622829, "releases": {"1.0.0rc1": [{"comment_text": "", "digests": {"md5": "a461d9cce345a6bb487075605314c428", "sha256": "fee26ca00d7243aceed50ff4c857b12d3507695d33441571ed2d2930abd46202"}, "downloads": -1, "filename": "videoslicer-1.0.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a461d9cce345a6bb487075605314c428", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 13855, "upload_time": "2018-02-23T15:27:40", "upload_time_iso_8601": "2018-02-23T15:27:40.481343Z", "url": "https://files.pythonhosted.org/packages/0e/54/3d3e2c4bfd70e903a52087bfc21dbe96443d7a8a96f96cc4f99ee81144f1/videoslicer-1.0.0rc1-py2.py3-none-any.whl", "yanked": false}], "1.0.0rc2": [{"comment_text": "", "digests": {"md5": "589192c78c7b03b39086ecde4290d8d8", "sha256": "280021c64fcd3127351fc437d7b55f4f2864b60bc1d06403eba4c0e64c754992"}, "downloads": -1, "filename": "videoslicer-1.0.0rc2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "589192c78c7b03b39086ecde4290d8d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 13901, "upload_time": "2018-02-27T19:41:17", "upload_time_iso_8601": "2018-02-27T19:41:17.205578Z", "url": "https://files.pythonhosted.org/packages/df/30/c43f65ff1b07c84a4105927668473182efa1ecf3d08eb6f4564958d09413/videoslicer-1.0.0rc2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "589192c78c7b03b39086ecde4290d8d8", "sha256": "280021c64fcd3127351fc437d7b55f4f2864b60bc1d06403eba4c0e64c754992"}, "downloads": -1, "filename": "videoslicer-1.0.0rc2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "589192c78c7b03b39086ecde4290d8d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 13901, "upload_time": "2018-02-27T19:41:17", "upload_time_iso_8601": "2018-02-27T19:41:17.205578Z", "url": "https://files.pythonhosted.org/packages/df/30/c43f65ff1b07c84a4105927668473182efa1ecf3d08eb6f4564958d09413/videoslicer-1.0.0rc2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:36:14 2020"}