{"info": {"author": "Richard Marko", "author_email": "rissko@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Testing"], "description": "dfuzz\n======\n\ndfuzz - automatic daemon configuration fuzzer. Rather than\nbeing a fuzzer itself, dfuzz is a wrapper for other simple fuzzers\nsolving few common flaws which makes automated testing a bit difficult.\n\nAlthough its primary targets are configuration files, it is possible\nto use dfuzz to fuzz any input files.\n\nThe main problems dfuzz solves are:\n - alpha versions of fuzzers - most of the fuzzers are just alpha versions which are no longer developed or maintained\n - common format - no need to understand how to use every single underlying fuzzer\n - customizable monitoring and automatic error analysis\n - straightforward specification of what to test and which file to supply to the target\n - combination of mutation and generation of fuzzed files\n\nRequirements\n-------------\n - python >= 2.6\n - fuzzer (zzuf, autodafe, ...)\n - gdb, valgrind (both are optional)\n\nFeatures\n----------\n - independent of underlying fuzzer\n - highly configurable\n - built to be extendible\n - automation friendly\n\nSupported fuzzers\n------------------\n - zzuf (mutation)\n - autodafe (generation)\n - plain (debugging purposes)\n\nUsage\n------\n - install requirements\n - install dfuzz (for example easy_install dfuzz)\n - create a working directory\n - supply fuzz.conf file (sample follows)\n - according to the modules you want to use, create mut or gen directory in your working directory and supply a file to fuzz or a template to use\n - run dfuzz -d -o `name_of_the_working_directory`\n - observe output\n - if everything is fine remove the -d and -o options and run the command again\n - check the samples directory created in your working directory\n - use included incident_viewer to browser incidents if there are any\n\nComplete documentation in docs directory.\n\nSample fuzz.conf file ::\n\n        [global]\n        binary=libvirtd\n        args=-f FUZZED_FILE --verbose\n        threads = 1\n        timeout = 2\n\n        generation  = 0\n        mutation    = 1\n        combination = 0\n\n        [generation]\n        modules  = dfuzz.gen.autodafe\n        priority = high\n\n        [mutation]\n        modules = dfuzz.mut.zzuf; dfuzz.mut.plain\n        priority = high\n\n        [combination]\n        modules = dfuzz.comb.simple\n        priority = low\n\nIn it's simplest form, dfuzz can be used as\na zzuf wrapper with enhanced detection and reporting\ncapabilities.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sorki/dfuzz", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dfuzz", "package_url": "https://pypi.org/project/dfuzz/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dfuzz/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/sorki/dfuzz"}, "release_url": "https://pypi.org/project/dfuzz/0.6/", "requires_dist": null, "requires_python": null, "summary": "dfuzz - automated daemon fuzzer", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>dfuzz - automatic daemon configuration fuzzer. Rather than\nbeing a fuzzer itself, dfuzz is a wrapper for other simple fuzzers\nsolving few common flaws which makes automated testing a bit difficult.</p>\n<p>Although its primary targets are configuration files, it is possible\nto use dfuzz to fuzz any input files.</p>\n<dl>\n<dt>The main problems dfuzz solves are:</dt>\n<dd><ul>\n<li>alpha versions of fuzzers - most of the fuzzers are just alpha versions which are no longer developed or maintained</li>\n<li>common format - no need to understand how to use every single underlying fuzzer</li>\n<li>customizable monitoring and automatic error analysis</li>\n<li>straightforward specification of what to test and which file to supply to the target</li>\n<li>combination of mutation and generation of fuzzed files</li>\n</ul>\n</dd>\n</dl>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<blockquote>\n<ul>\n<li>python &gt;= 2.6</li>\n<li>fuzzer (zzuf, autodafe, \u2026)</li>\n<li>gdb, valgrind (both are optional)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<blockquote>\n<ul>\n<li>independent of underlying fuzzer</li>\n<li>highly configurable</li>\n<li>built to be extendible</li>\n<li>automation friendly</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"supported-fuzzers\">\n<h2>Supported fuzzers</h2>\n<blockquote>\n<ul>\n<li>zzuf (mutation)</li>\n<li>autodafe (generation)</li>\n<li>plain (debugging purposes)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<blockquote>\n<ul>\n<li>install requirements</li>\n<li>install dfuzz (for example easy_install dfuzz)</li>\n<li>create a working directory</li>\n<li>supply fuzz.conf file (sample follows)</li>\n<li>according to the modules you want to use, create mut or gen directory in your working directory and supply a file to fuzz or a template to use</li>\n<li>run dfuzz -d -o <cite>name_of_the_working_directory</cite></li>\n<li>observe output</li>\n<li>if everything is fine remove the -d and -o options and run the command again</li>\n<li>check the samples directory created in your working directory</li>\n<li>use included incident_viewer to browser incidents if there are any</li>\n</ul>\n</blockquote>\n<p>Complete documentation in docs directory.</p>\n<p>Sample fuzz.conf file</p>\n<pre>[global]\nbinary=libvirtd\nargs=-f FUZZED_FILE --verbose\nthreads = 1\ntimeout = 2\n\ngeneration  = 0\nmutation    = 1\ncombination = 0\n\n[generation]\nmodules  = dfuzz.gen.autodafe\npriority = high\n\n[mutation]\nmodules = dfuzz.mut.zzuf; dfuzz.mut.plain\npriority = high\n\n[combination]\nmodules = dfuzz.comb.simple\npriority = low\n</pre>\n<p>In it\u2019s simplest form, dfuzz can be used as\na zzuf wrapper with enhanced detection and reporting\ncapabilities.</p>\n</div>\n\n          </div>"}, "last_serial": 788934, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "40df84cd9aff13a8ca1de6ceb8d23b47", "sha256": "768c18e988d9c7c1472a576ea3ed68725968433648467acaafba2e478954e469"}, "downloads": -1, "filename": "dfuzz-0.6.tar.gz", "has_sig": false, "md5_digest": "40df84cd9aff13a8ca1de6ceb8d23b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41879, "upload_time": "2011-05-23T00:57:26", "upload_time_iso_8601": "2011-05-23T00:57:26.307367Z", "url": "https://files.pythonhosted.org/packages/d9/59/16bf366fe6d075d0739ec83d493c57d1973375b41f545c0c942a78a36c0d/dfuzz-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "40df84cd9aff13a8ca1de6ceb8d23b47", "sha256": "768c18e988d9c7c1472a576ea3ed68725968433648467acaafba2e478954e469"}, "downloads": -1, "filename": "dfuzz-0.6.tar.gz", "has_sig": false, "md5_digest": "40df84cd9aff13a8ca1de6ceb8d23b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41879, "upload_time": "2011-05-23T00:57:26", "upload_time_iso_8601": "2011-05-23T00:57:26.307367Z", "url": "https://files.pythonhosted.org/packages/d9/59/16bf366fe6d075d0739ec83d493c57d1973375b41f545c0c942a78a36c0d/dfuzz-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:44 2020"}