{"info": {"author": "Christoph Glaubitz", "author_email": "chris@chrigl.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries"], "description": "python-flattr\n=============\n\npython-flattr is a client library to the micro payment service flattr_. It\nimplements most aspects of the `flattr rest api`_. You may use it, to integrate\nflattr_-Support into your python program. For example creating things_ for new\nblog posts. Or you write some kind of podcatcher and want to automatically\nflattr (support) each downloaded episode.\n\nFeatures\n--------\n\n* create and update things\n* delete things\n* get things by id\n* search things\n* list things of a known user\n* list your things\n* list your subscriptions\n* subscribe to things\n* pause/resume subscriptions\n* flattr/support things\n\nInstallation\n------------\n\n.. code-block:: python\n\n   pip install flattr\n\nUsage\n-----\n\nDISCLAIMER: The following code examples are python3. If you are using python2,\nyou have to pass unicodes especially to attributes of ``flattrclient.things.Thing``.\n\n\nFirst of all. You need to get an auth token. The implementation is up to you,\nwith only little help of python-flattr.\n\nWorkflow to get the auth token\n``````````````````````````````\n\nFollow the `authorization workflow`_. First of all, `register your app`_ in your\nuser profile on flattr, to get the *Client ID* and *Client Secret*.\n\nWith this credentials you can set up an api-connection\n\n.. code-block:: python\n\n   >>> import flattrclient.oauth\n   >>> auth_api = flattrclient.oauth.get()\n\nYou can call ``authorize`` to get the URL, you have to point your user to.\n\n.. code-block:: python\n\n   >>> auth_api.authorize(CLIENT_ID, 'flattr,thing,email,extendedread', 'http://localhost:8080')\n   'https://flattr.com/oauth/authorize?scope=flattr%2Cthing%2Cemail%2Cextendedread&redirect_uri=http%3A%2F%2Flocalhost%3A8080&response_type=code&client_id=CLIENT_ID'\n\nHowever, you decide which scopes_ you need.\n\nYou may want to listen to ``localhost:8080`` or whatever callback you used.\nflattr_ will redirect the user to this URL, and send you (on success), a ``code``.\nPick this up and get the access token. This is also the only time, you need the\n*Client Secret*.\n\n.. code-block:: python\n\n   >>> auth_api.set_auth(CLIENT_ID, CLIENT_SECRET)\n   >>> auth_api.token(CODE, 'http://localhost:8080')\n   'XXXXX'\n\nThe entire process of getting the ``code`` an requesting the token should not\ntake too long. Anyway, it is still fast enough, if you copying the code from\nanother terminal window and call ``token`` in an interactive session.\n\nWorking with python-flattr\n``````````````````````````\n\nIn fact. The access token is the only thing you need to store somewhere.\n>From now on. You should be able to talk to the `flattr rest api`_. Give\nit a try and get all things of the user ``flattr``\n\n.. code-block:: python\n\n   >>> import flattrclient.api\n   >>> api = flattrclient.api.get(AUTH_TOKEN)\n   >>> f = api.users('flattr')\n   >>> f\n   <flattrclient.user.User flattr>\n   >>> things = list(f.get_things())\n   [<flattrclient.things.Thing Bielefeld gibts wirklich! Zumindest im Fu\u00dfball>,\n    <flattrclient.things.Thing Tweet by @Flattr, 25 Feb>,\n    ...]\n\nThat was fun. But what happened?\n\nFirst, we introduced the session between flattr_ and us, using ``flattrclient.api.get``.\nThis is very likely always the first thing, you do. Currently I use\n``requests.sessions.Session`` in the background, without any pooling.\n\nThen we create a lightweight ``flattrclient.user.User``-object. This does not perform\nany api-call. So if there is a typo, the next call (``get_things``), will cause\nthe error. If you want, to perform an api-call for the user, use\n``api.users.get('flattr')``.\n\nThe nect call to ``f.get_things()`` returns all things as a generator. So to make\nit more verbose here, we converted it into a list.  All things? Not really. By\ndefault, the api only returns 30 results per page. But you can use ``count`` and\n``page`` to override this.\n\n.. code-block:: python\n\n   >>> f.get_things(count=10, page=2)\n\nYou get page 2 of the results. Each page batched to 10 results.\n\n\nLet's step back to the ``api``.  The api consits of a bunch of different other\napis, to which the ``request.session.Session`` object is passed.\n\n\n``api.things``: Talk to flattrs things api. ``get``, ``lookup`` and ``search`` for\nthings.\n\n``api.users``: Talk to flattrs user api. ``__call__`` and ``get``, described above.\n\n``api.authenticated``: Talk to flattrs authenticated api. Which means... list\nstuff of the authenticated user. ``get_activities``, ``get_flattrs``, ``get_things``\nand ``get_subscriptions``.\n\n\nHowever. You may want to create a new thing on flattr_.\n\n.. code-block:: python\n\n   >>> mything = api.things.new(url='http://example.com', title='crazy title')\n   >>> mything\n   <flattrclient.things.Thing craty title>\n   >>> mything.description = 'Some more context'\n   >>> mything.commit()\n\nYou should use ``api.things.new`` to get a new object of ``flattrclient.things.Thing``\nbecause it again takes care of setting the session.\n\n\nSame if you want to update one of your things.\n\n.. code-block:: python\n\n   >>> mythings = list(api.authenticated.get_things())\n   >>> some_thing = mythings[0]\n   >>> some_thing.title = 'Some new Title'\n   >>> some_thing.commit()\n\nYou may not just create or update your own things_, but also flattr someones\nstuff. Each thing you got by user, or fetch via ``api.things`` is supportable.\n\n.. code-block:: python\n\n   >>> thing = api.things.get('4085245')\n   >>> thing\n   <flattrclient.things.Thing chrigl/python-flattr on GitHub>\n   >>> thing.support()\n   {...}\n\nJust supporting is not enough? Subscribe to the thing\n\n.. code-block:: python\n\n   >>> thing = api.things.get('4085245')\n   >>> thing\n   <flattrclient.things.Thing chrigl/python-flattr on GitHub>\n   >>> thing.subscribe()\n   {...}\n\nThere is also a ``unsubscribe`` and a ``pause_subscription``, which is a toggle\nto pause and resume this subscription.\n\n\nFeel free to use ``help`` on different stuff. Where it is much more useful to\nuse python3, since internaly some decorators are used, which results in\n``*args, **kwargs``-argument-lists in python2.\n\nIssues\n------\n\nYou are welcome to file issues or pull requests on github_.\n\nLicense\n-------\n\nApache License 2.0\n\n.. _flattr: https://flattr.com/\n.. _`flattr rest api`: http://developers.flattr.net/\n.. _`things`: http://developers.flattr.net/api/resources/things/\n.. _`authorization workflow`: http://developers.flattr.net/api/#authorization\n.. _`register your app`: http://flattr.com/apps/new\n.. _scopes: http://developers.flattr.net/api/#scopes\n.. _github: https://github.com/chrigl/python-flattr", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrigl/python-flattr", "keywords": "flattr", "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "flattrclient", "package_url": "https://pypi.org/project/flattrclient/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flattrclient/", "project_urls": {"Homepage": "https://github.com/chrigl/python-flattr"}, "release_url": "https://pypi.org/project/flattrclient/0.2/", "requires_dist": ["six", "requests", "simplejson"], "requires_python": null, "summary": "Implementation of a python library for the flattr restful api", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>python-flattr is a client library to the micro payment service <a href=\"https://flattr.com/\" rel=\"nofollow\">flattr</a>. It\nimplements most aspects of the <a href=\"http://developers.flattr.net/\" rel=\"nofollow\">flattr rest api</a>. You may use it, to integrate\n<a href=\"https://flattr.com/\" rel=\"nofollow\">flattr</a>-Support into your python program. For example creating <a href=\"http://developers.flattr.net/api/resources/things/\" rel=\"nofollow\">things</a> for new\nblog posts. Or you write some kind of podcatcher and want to automatically\nflattr (support) each downloaded episode.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>create and update things</li>\n<li>delete things</li>\n<li>get things by id</li>\n<li>search things</li>\n<li>list things of a known user</li>\n<li>list your things</li>\n<li>list your subscriptions</li>\n<li>subscribe to things</li>\n<li>pause/resume subscriptions</li>\n<li>flattr/support things</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">flattr</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>DISCLAIMER: The following code examples are python3. If you are using python2,\nyou have to pass unicodes especially to attributes of <tt>flattrclient.things.Thing</tt>.</p>\n<p>First of all. You need to get an auth token. The implementation is up to you,\nwith only little help of python-flattr.</p>\n<div id=\"workflow-to-get-the-auth-token\">\n<h3>Workflow to get the auth token</h3>\n<p>Follow the <a href=\"http://developers.flattr.net/api/#authorization\" rel=\"nofollow\">authorization workflow</a>. First of all, <a href=\"http://flattr.com/apps/new\" rel=\"nofollow\">register your app</a> in your\nuser profile on flattr, to get the <em>Client ID</em> and <em>Client Secret</em>.</p>\n<p>With this credentials you can set up an api-connection</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">flattrclient.oauth</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auth_api</span> <span class=\"o\">=</span> <span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">oauth</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>You can call <tt>authorize</tt> to get the URL, you have to point your user to.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auth_api</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"p\">,</span> <span class=\"s1\">'flattr,thing,email,extendedread'</span><span class=\"p\">,</span> <span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">)</span>\n<span class=\"s1\">'https://flattr.com/oauth/authorize?scope=flattr%2Cthing%2Cemail%2Cextendedread&amp;redirect_uri=http%3A</span><span class=\"si\">%2F%2F</span><span class=\"s1\">localhost%3A8080&amp;response_type=code&amp;client_id=CLIENT_ID'</span>\n</pre>\n<p>However, you decide which <a href=\"http://developers.flattr.net/api/#scopes\" rel=\"nofollow\">scopes</a> you need.</p>\n<p>You may want to listen to <tt>localhost:8080</tt> or whatever callback you used.\n<a href=\"https://flattr.com/\" rel=\"nofollow\">flattr</a> will redirect the user to this URL, and send you (on success), a <tt>code</tt>.\nPick this up and get the access token. This is also the only time, you need the\n<em>Client Secret</em>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auth_api</span><span class=\"o\">.</span><span class=\"n\">set_auth</span><span class=\"p\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"p\">,</span> <span class=\"n\">CLIENT_SECRET</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auth_api</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">(</span><span class=\"n\">CODE</span><span class=\"p\">,</span> <span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">)</span>\n<span class=\"s1\">'XXXXX'</span>\n</pre>\n<p>The entire process of getting the <tt>code</tt> an requesting the token should not\ntake too long. Anyway, it is still fast enough, if you copying the code from\nanother terminal window and call <tt>token</tt> in an interactive session.</p>\n</div>\n<div id=\"working-with-python-flattr\">\n<h3>Working with python-flattr</h3>\n<p>In fact. The access token is the only thing you need to store somewhere.\n&gt;From now on. You should be able to talk to the <a href=\"http://developers.flattr.net/\" rel=\"nofollow\">flattr rest api</a>. Give\nit a try and get all things of the user <tt>flattr</tt></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">flattrclient.api</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">AUTH_TOKEN</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"p\">(</span><span class=\"s1\">'flattr'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span>\n<span class=\"o\">&lt;</span><span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">User</span> <span class=\"n\">flattr</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">get_things</span><span class=\"p\">())</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">Thing</span> <span class=\"n\">Bielefeld</span> <span class=\"n\">gibts</span> <span class=\"n\">wirklich</span><span class=\"err\">!</span> <span class=\"n\">Zumindest</span> <span class=\"n\">im</span> <span class=\"n\">Fu\u00dfball</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">Thing</span> <span class=\"n\">Tweet</span> <span class=\"n\">by</span> <span class=\"nd\">@Flattr</span><span class=\"p\">,</span> <span class=\"mi\">25</span> <span class=\"n\">Feb</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>That was fun. But what happened?</p>\n<p>First, we introduced the session between <a href=\"https://flattr.com/\" rel=\"nofollow\">flattr</a> and us, using <tt>flattrclient.api.get</tt>.\nThis is very likely always the first thing, you do. Currently I use\n<tt>requests.sessions.Session</tt> in the background, without any pooling.</p>\n<p>Then we create a lightweight <tt>flattrclient.user.User</tt>-object. This does not perform\nany api-call. So if there is a typo, the next call (<tt>get_things</tt>), will cause\nthe error. If you want, to perform an api-call for the user, use\n<tt><span class=\"pre\">api.users.get('flattr')</span></tt>.</p>\n<p>The nect call to <tt>f.get_things()</tt> returns all things as a generator. So to make\nit more verbose here, we converted it into a list.  All things? Not really. By\ndefault, the api only returns 30 results per page. But you can use <tt>count</tt> and\n<tt>page</tt> to override this.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">get_things</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>You get page 2 of the results. Each page batched to 10 results.</p>\n<p>Let\u2019s step back to the <tt>api</tt>.  The api consits of a bunch of different other\napis, to which the <tt>request.session.Session</tt> object is passed.</p>\n<p><tt>api.things</tt>: Talk to flattrs things api. <tt>get</tt>, <tt>lookup</tt> and <tt>search</tt> for\nthings.</p>\n<p><tt>api.users</tt>: Talk to flattrs user api. <tt>__call__</tt> and <tt>get</tt>, described above.</p>\n<p><tt>api.authenticated</tt>: Talk to flattrs authenticated api. Which means\u2026 list\nstuff of the authenticated user. <tt>get_activities</tt>, <tt>get_flattrs</tt>, <tt>get_things</tt>\nand <tt>get_subscriptions</tt>.</p>\n<p>However. You may want to create a new thing on <a href=\"https://flattr.com/\" rel=\"nofollow\">flattr</a>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mything</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://example.com'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'crazy title'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mything</span>\n<span class=\"o\">&lt;</span><span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">Thing</span> <span class=\"n\">craty</span> <span class=\"n\">title</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mything</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Some more context'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mything</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>You should use <tt>api.things.new</tt> to get a new object of <tt>flattrclient.things.Thing</tt>\nbecause it again takes care of setting the session.</p>\n<p>Same if you want to update one of your things.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mythings</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">authenticated</span><span class=\"o\">.</span><span class=\"n\">get_things</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_thing</span> <span class=\"o\">=</span> <span class=\"n\">mythings</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_thing</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Some new Title'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_thing</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>You may not just create or update your own <a href=\"http://developers.flattr.net/api/resources/things/\" rel=\"nofollow\">things</a>, but also flattr someones\nstuff. Each thing you got by user, or fetch via <tt>api.things</tt> is supportable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'4085245'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thing</span>\n<span class=\"o\">&lt;</span><span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">Thing</span> <span class=\"n\">chrigl</span><span class=\"o\">/</span><span class=\"n\">python</span><span class=\"o\">-</span><span class=\"n\">flattr</span> <span class=\"n\">on</span> <span class=\"n\">GitHub</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thing</span><span class=\"o\">.</span><span class=\"n\">support</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n</pre>\n<p>Just supporting is not enough? Subscribe to the thing</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'4085245'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thing</span>\n<span class=\"o\">&lt;</span><span class=\"n\">flattrclient</span><span class=\"o\">.</span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">Thing</span> <span class=\"n\">chrigl</span><span class=\"o\">/</span><span class=\"n\">python</span><span class=\"o\">-</span><span class=\"n\">flattr</span> <span class=\"n\">on</span> <span class=\"n\">GitHub</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thing</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n</pre>\n<p>There is also a <tt>unsubscribe</tt> and a <tt>pause_subscription</tt>, which is a toggle\nto pause and resume this subscription.</p>\n<p>Feel free to use <tt>help</tt> on different stuff. Where it is much more useful to\nuse python3, since internaly some decorators are used, which results in\n<tt>*args, **kwargs</tt>-argument-lists in python2.</p>\n</div>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>You are welcome to file issues or pull requests on <a href=\"https://github.com/chrigl/python-flattr\" rel=\"nofollow\">github</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Apache License 2.0</p>\n</div>\n\n          </div>"}, "last_serial": 1510751, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f699c62a21da56cfef94b2e164c85796", "sha256": "010a9e76e773d10e6194ff3dc0e9b6da50518ff6c72ce674b98e7d63c3950660"}, "downloads": -1, "filename": "flattrclient-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f699c62a21da56cfef94b2e164c85796", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31558, "upload_time": "2015-04-15T19:38:31", "upload_time_iso_8601": "2015-04-15T19:38:31.582740Z", "url": "https://files.pythonhosted.org/packages/04/2f/942f8ac1b81478746a80f6bec9913c691d0d9420f97305c117084ad0ad45/flattrclient-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc29a6434b5f96197f607cb714b24ff3", "sha256": "86bb2440d9ce0c4d1d2581f5fe8b27b91da22a541fa11459f3e2798dce079856"}, "downloads": -1, "filename": "flattrclient-0.1.tar.gz", "has_sig": false, "md5_digest": "dc29a6434b5f96197f607cb714b24ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20336, "upload_time": "2015-04-15T19:38:35", "upload_time_iso_8601": "2015-04-15T19:38:35.038268Z", "url": "https://files.pythonhosted.org/packages/4f/98/c5ed6e6c8e3ffd452b069ce2072e2ced0358b88173e111001c77b46f8635/flattrclient-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e35686ae8eb1c87d1712fb495f2e3f7b", "sha256": "5897554742f927aa1a03d4c83f208c988dae743cb76e103f4e9080dc10dc9241"}, "downloads": -1, "filename": "flattrclient-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e35686ae8eb1c87d1712fb495f2e3f7b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31522, "upload_time": "2015-04-18T15:49:37", "upload_time_iso_8601": "2015-04-18T15:49:37.472968Z", "url": "https://files.pythonhosted.org/packages/c1/fc/4e5cff7ee153d5badda51bf67e517078dbcac51ef3869da199b55dd37704/flattrclient-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a06519be24cb03492c222347bdf18a04", "sha256": "968b6a598a394f9a4f881cefd26824887d7dd617f5ce8a0a547107044ce46e3f"}, "downloads": -1, "filename": "flattrclient-0.2.tar.gz", "has_sig": false, "md5_digest": "a06519be24cb03492c222347bdf18a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20313, "upload_time": "2015-04-18T15:49:40", "upload_time_iso_8601": "2015-04-18T15:49:40.721586Z", "url": "https://files.pythonhosted.org/packages/d3/cc/2c7d4c6287c0a7480b71f0c5db13583eaf15ccc82d0703ce8acc428635de/flattrclient-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e35686ae8eb1c87d1712fb495f2e3f7b", "sha256": "5897554742f927aa1a03d4c83f208c988dae743cb76e103f4e9080dc10dc9241"}, "downloads": -1, "filename": "flattrclient-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e35686ae8eb1c87d1712fb495f2e3f7b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31522, "upload_time": "2015-04-18T15:49:37", "upload_time_iso_8601": "2015-04-18T15:49:37.472968Z", "url": "https://files.pythonhosted.org/packages/c1/fc/4e5cff7ee153d5badda51bf67e517078dbcac51ef3869da199b55dd37704/flattrclient-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a06519be24cb03492c222347bdf18a04", "sha256": "968b6a598a394f9a4f881cefd26824887d7dd617f5ce8a0a547107044ce46e3f"}, "downloads": -1, "filename": "flattrclient-0.2.tar.gz", "has_sig": false, "md5_digest": "a06519be24cb03492c222347bdf18a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20313, "upload_time": "2015-04-18T15:49:40", "upload_time_iso_8601": "2015-04-18T15:49:40.721586Z", "url": "https://files.pythonhosted.org/packages/d3/cc/2c7d4c6287c0a7480b71f0c5db13583eaf15ccc82d0703ce8acc428635de/flattrclient-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:03 2020"}