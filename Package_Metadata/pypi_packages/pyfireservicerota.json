{"info": {"author": "Ron Klinkien", "author_email": "ron@cyberjunky.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python: FireServiceRota / BrandweerRooster\n\nPython 3 API wrapper for FireServiceRota and BrandweerRooster\n\n## About\n\nThis package allows you to get notified about emergency incidents from FireServiceRota.co.uk and BrandweerRooster.nl.\nThose are services used by firefighters.\n\nSee https://fireservicerota.co.uk and https://brandweerrooster.nl for more details.\n\nNOTE: You need a subscription and login account to be able to use it.\n\n## Installation\n\n```bash\npip3 install pyfireservicerota\n```\n\n## Usage\n\n```python\nfrom pyfireservicerota import FireServiceRotaOAuth, FireServiceRotaOauthError, FireServiceRotaIncidentsListener\nimport logging\nimport sys\nimport json\nimport time\nimport threading\n\n_LOGGER = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\noauth = FireServiceRotaOAuth(\n        \"https://www.brandweerrooster.nl/oauth/token\",\n        \"\",\n        [USERNAME],\n        [PASSWORD],\n    )\n\ntry:\n    token_info = oauth.get_access_token()\nexcept FireServiceRotaOauthError:\n    token_info = None\n\nif not token_info:\n    _LOGGER.error(\"Failed to get access token\")\n\nwsurl = f\"wss://www.brandweerrooster.nl/cable?access_token={token_info['access_token']}\"\n\n\nclass FireService():\n\n    def __init__(self):\n\n        self._data = None\n        self.listener = None\n        self.thread = threading.Thread(target=self.incidents_listener)\n        self.thread.daemon = True\n        self.thread.start()\n\n    def on_incident(self, data):\n        _LOGGER.debug(\"INCIDENT: %s\", data)\n        self._data = data\n\n    @property\n    def data(self):\n        \"\"\"Return the current data stored in the provider.\"\"\"\n        return self._data\n\n    def incidents_listener(self):\n        \"\"\"Spawn a new Listener and links it to self.on_incident.\"\"\"\n\n        _LOGGER.debug(\"Starting incidents listener\")\n        self.listener = FireServiceRotaIncidentsListener(url=wsurl, on_incident=self.on_incident)\n\n        while True:\n            try:\n                self.listener.run_forever()\n            except:\n                pass\n\n\nws = FireService()\n\nwhile True:\n    time.sleep(1)\n```\n\nDon't store user credentuals, just the token_info and use below code to refresh it, it will only fetch new token when it has expired.\nIf you want to force a token refresh add True as param to oauth.refresh_acess_token()\n```\noauth = FireServiceRotaOAuth(\n        \"https://www.brandweerrooster.nl/oauth/token\",\n        \"\",\n        \"\",\n        \"\",\n    )\n\ntry:\n    token_info = oauth.refresh_access_token(current_token_info)\nexcept FireServiceRotaOauthError:\n    token_info = None\n\nif not token_info:\n    _LOGGER.error(\"Failed to get access token\")\n\nif token_info != current_token_info:\n    _LOGGER.error(\"Got new token, store it\")\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cyberjunky/python-fireservicerota", "keywords": "fireservicerota,brandweerrooster,api,client", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pyfireservicerota", "package_url": "https://pypi.org/project/pyfireservicerota/", "platform": "", "project_url": "https://pypi.org/project/pyfireservicerota/", "project_urls": {"Homepage": "https://github.com/cyberjunky/python-fireservicerota"}, "release_url": "https://pypi.org/project/pyfireservicerota/0.0.12/", "requires_dist": null, "requires_python": "", "summary": "Python 3 API wrapper for FireServiceRota/BrandweerRooster", "version": "0.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python: FireServiceRota / BrandweerRooster</h1>\n<p>Python 3 API wrapper for FireServiceRota and BrandweerRooster</p>\n<h2>About</h2>\n<p>This package allows you to get notified about emergency incidents from FireServiceRota.co.uk and BrandweerRooster.nl.\nThose are services used by firefighters.</p>\n<p>See <a href=\"https://fireservicerota.co.uk\" rel=\"nofollow\">https://fireservicerota.co.uk</a> and <a href=\"https://brandweerrooster.nl\" rel=\"nofollow\">https://brandweerrooster.nl</a> for more details.</p>\n<p>NOTE: You need a subscription and login account to be able to use it.</p>\n<h2>Installation</h2>\n<pre>pip3 install pyfireservicerota\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyfireservicerota</span> <span class=\"kn\">import</span> <span class=\"n\">FireServiceRotaOAuth</span><span class=\"p\">,</span> <span class=\"n\">FireServiceRotaOauthError</span><span class=\"p\">,</span> <span class=\"n\">FireServiceRotaIncidentsListener</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"n\">_LOGGER</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">oauth</span> <span class=\"o\">=</span> <span class=\"n\">FireServiceRotaOAuth</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"https://www.brandweerrooster.nl/oauth/token\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">USERNAME</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"n\">PASSWORD</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">token_info</span> <span class=\"o\">=</span> <span class=\"n\">oauth</span><span class=\"o\">.</span><span class=\"n\">get_access_token</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">FireServiceRotaOauthError</span><span class=\"p\">:</span>\n    <span class=\"n\">token_info</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">token_info</span><span class=\"p\">:</span>\n    <span class=\"n\">_LOGGER</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Failed to get access token\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">wsurl</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"wss://www.brandweerrooster.nl/cable?access_token=</span><span class=\"si\">{</span><span class=\"n\">token_info</span><span class=\"p\">[</span><span class=\"s1\">'access_token'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FireService</span><span class=\"p\">():</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">incidents_listener</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_incident</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">_LOGGER</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"INCIDENT: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the current data stored in the provider.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">incidents_listener</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Spawn a new Listener and links it to self.on_incident.\"\"\"</span>\n\n        <span class=\"n\">_LOGGER</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"Starting incidents listener\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"n\">FireServiceRotaIncidentsListener</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">wsurl</span><span class=\"p\">,</span> <span class=\"n\">on_incident</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_incident</span><span class=\"p\">)</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n\n<span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">FireService</span><span class=\"p\">()</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Don't store user credentuals, just the token_info and use below code to refresh it, it will only fetch new token when it has expired.\nIf you want to force a token refresh add True as param to oauth.refresh_acess_token()</p>\n<pre><code>oauth = FireServiceRotaOAuth(\n        \"https://www.brandweerrooster.nl/oauth/token\",\n        \"\",\n        \"\",\n        \"\",\n    )\n\ntry:\n    token_info = oauth.refresh_access_token(current_token_info)\nexcept FireServiceRotaOauthError:\n    token_info = None\n\nif not token_info:\n    _LOGGER.error(\"Failed to get access token\")\n\nif token_info != current_token_info:\n    _LOGGER.error(\"Got new token, store it\")\n</code></pre>\n\n          </div>"}, "last_serial": 7109000, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "41ee03d68208edd08c38975d96e71456", "sha256": "2997da3b94fd9105f132a67303069df3d81f3b01de6f8701a7e4352750c4f128"}, "downloads": -1, "filename": "pyfireservicerota-0.0.10.tar.gz", "has_sig": false, "md5_digest": "41ee03d68208edd08c38975d96e71456", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2020-04-26T08:46:35", "upload_time_iso_8601": "2020-04-26T08:46:35.422952Z", "url": "https://files.pythonhosted.org/packages/74/e9/eff8b9128864451353b69f525cb8b629f7de140839ee1d3783667ea075ae/pyfireservicerota-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "21458289c0ba0d2a2b1177278250d395", "sha256": "7ddaaa4d2e4d23ea71ae4df7dbe83aa9fbc68c9e963a252b94da04bc4bbe6d63"}, "downloads": -1, "filename": "pyfireservicerota-0.0.11.tar.gz", "has_sig": false, "md5_digest": "21458289c0ba0d2a2b1177278250d395", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4240, "upload_time": "2020-04-26T09:32:34", "upload_time_iso_8601": "2020-04-26T09:32:34.247464Z", "url": "https://files.pythonhosted.org/packages/e9/0f/ab6f97c1ad877aa1c8ee21927c4b3603300b182a0426702f48579dfae4ef/pyfireservicerota-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "22708dfd4f95361cf7baa1ad3a137f11", "sha256": "2e697c6e207352218b5327a6d94432976a29d78b616c12e405fb3cb2b4b998ec"}, "downloads": -1, "filename": "pyfireservicerota-0.0.12.tar.gz", "has_sig": false, "md5_digest": "22708dfd4f95361cf7baa1ad3a137f11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4256, "upload_time": "2020-04-27T06:26:37", "upload_time_iso_8601": "2020-04-27T06:26:37.581029Z", "url": "https://files.pythonhosted.org/packages/17/79/0a0eecfde3d89f5a22676b48081fcf98769ece1a6029555925ac68baec3a/pyfireservicerota-0.0.12.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "f01f5e9275ff9f40781a663a3121c003", "sha256": "2e1d740ab513f445e1870d699c24479be6bb78bde6feae31c5d5307886d6eeb9"}, "downloads": -1, "filename": "pyfireservicerota-0.0.9.tar.gz", "has_sig": false, "md5_digest": "f01f5e9275ff9f40781a663a3121c003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4006, "upload_time": "2020-04-25T19:26:11", "upload_time_iso_8601": "2020-04-25T19:26:11.329096Z", "url": "https://files.pythonhosted.org/packages/80/94/6a6f01599f3a503ffcf32f0c16f19a94855f6c322bdf530fc251d092b1f7/pyfireservicerota-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22708dfd4f95361cf7baa1ad3a137f11", "sha256": "2e697c6e207352218b5327a6d94432976a29d78b616c12e405fb3cb2b4b998ec"}, "downloads": -1, "filename": "pyfireservicerota-0.0.12.tar.gz", "has_sig": false, "md5_digest": "22708dfd4f95361cf7baa1ad3a137f11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4256, "upload_time": "2020-04-27T06:26:37", "upload_time_iso_8601": "2020-04-27T06:26:37.581029Z", "url": "https://files.pythonhosted.org/packages/17/79/0a0eecfde3d89f5a22676b48081fcf98769ece1a6029555925ac68baec3a/pyfireservicerota-0.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:46 2020"}