{"info": {"author": "Ivan Korobkov", "author_email": "ivan.korobkov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# python-inject [![Build Status](https://travis-ci.org/ivankorobkov/python-inject.svg?branch=master)](https://travis-ci.org/ivankorobkov/python-inject)\nDependency injection the python way, the good way. Not a port of Guice or Spring.\n\n## Key features\n* Fast.\n* Thread-safe.\n* Simple to use.\n* Does not steal class constructors.\n* Does not try to manage your application object graph.\n* Transparently integrates into tests.\n* Supports Python 3.5+ (`v4.*`) and Python 2.7\u20133.5 (`v3.*`).\n* Supports type hinting in Python 3.5+.\n* Autoparams leveraging type annotations.\n\n## Python Support\n\n| Python | Inject Version |\n|--------|----------------|\n| 3.6+   | 4.1+           |\n| 3.5    | 4.0            |\n| < 3.5  | 3.*            |\n\n\n## Installation\nUse pip to install the lastest version:\n\n```bash\npip install inject\n```\n\n## Autoparams example\n`@inject.autoparams` returns a decorator which automatically injects arguments into a function \nthat uses type annotations. This is supported only in Python >= 3.5.\n\n```python\n@inject.autoparams()\ndef refresh_cache(cache: RedisCache, db: DbInterface):\n    pass\n```\n\nThere is an option to specify which arguments we want to inject without attempts of \ninjecting everything:\n\n```python\n@inject.autoparams('cache', 'db')\ndef sign_up(name, email, cache, db):\n    pass\n```\n\n## Step-by-step example\n```python\n# Import the inject module.\nimport inject\n\n\n# `inject.instance` requests dependencies from the injector.\ndef foo(bar):\n    cache = inject.instance(Cache)\n    cache.save('bar', bar)\n\n\n# `inject.params` injects dependencies as keyword arguments or positional argument. \n# Also you can use @inject.autoparams in Python 3.5, see the example above.\n@inject.params(cache=Cache, user=CurrentUser)\ndef baz(foo, cache=None, user=None):\n    cache.save('foo', foo, user)\n\n# this can be called in different ways:\n# with injected arguments\nbaz('foo')\n\n# with positional arguments\nbaz('foo', my_cache)\n\n# with keyword arguments\nbaz('foo', my_cache, user=current_user)\n\n\n# `inject.param` is deprecated, use `inject.params` instead.\n@inject.param('cache', Cache)\ndef bar(foo, cache=None):\n    cache.save('foo', foo)\n\n\n# `inject.attr` creates properties (descriptors) which request dependencies on access.\nclass User(object):\n    cache = inject.attr(Cache)\n            \n    def __init__(self, id):\n        self.id = id\n\n    def save(self):\n        self.cache.save('users', self)\n    \n    @classmethod\n    def load(cls, id):\n        return cls.cache.load('users', id)\n\n\n# Create an optional configuration.\ndef my_config(binder):\n    binder.install(my_config2)  # Add bindings from another config.\n    binder.bind(Cache, RedisCache('localhost:1234'))\n\n# Configure a shared injector.\ninject.configure(my_config)\n\n\n# Instantiate User as a normal class. Its `cache` dependency is injected when accessed.\nuser = User(10)\nuser.save()\n\n# Call the functions, the dependencies are automatically injected.\nfoo('Hello')\nbar('world')\n```\n\n\n## Usage with Django\nDjango can load some modules multiple times which can lead to \n`InjectorException: Injector is already configured`. You can use `configure_once` which\nis guaranteed to run only once when the injector is absent:\n```python\nimport inject\ninject.configure_once(my_config)\n```\n\n## Testing\nIn tests use `inject.clear_and_configure(callable)` to create a new injector on setup,\nand optionally `inject.clear()` to clean up on tear down:\n```python\nclass MyTest(unittest.TestCase):\n    def setUp(self):\n        inject.clear_and_configure(lambda binder: binder\n            .bind(Cache, Mock() \\\n            .bind(Validator, TestValidator())\n    \n    def tearDown(self):\n        inject.clear()\n```\n\n## Thread-safety\nAfter configuration the injector is thread-safe and can be safely reused by multiple threads.\n\n## Binding types\n**Instance** bindings always return the same instance:\n\n```python\nredis = RedisCache(address='localhost:1234')\ndef config(binder):\n    binder.bind(Cache, redis)\n```\n    \n**Constructor** bindings create a singleton on injection:\n\n```python\ndef config(binder):\n    # Creates a redis cache singleton on first injection.\n    binder.bind_to_constructor(Cache, lambda: RedisCache(address='localhost:1234'))\n```\n\n**Provider** bindings call the provider on injection:\n\n```python\ndef get_my_thread_local_cache():\n    pass\n\ndef config(binder):\n    # Executes the provider on each injection.\n    binder.bind_to_provider(Cache, get_my_thread_local_cache) \n```\n\n**Runtime** bindings automatically create singletons on injection, require no configuration.\nFor example, only the `Config` class binding is present, other bindings are runtime:\n\n```python\nclass Config(object):\n    pass\n\nclass Cache(object):\n    config = inject.attr(Config)\n\nclass Db(object):\n    config = inject.attr(Config)\n\nclass User(object):\n    cache = inject.attr(Cache)\n    db = inject.attr(Db)\n    \n    @classmethod\n    def load(cls, user_id):\n        return cls.cache.load('users', user_id) or cls.db.load('users', user_id)\n    \ninject.configure(lambda binder: binder.bind(Config, load_config_file()))\nuser = User.load(10)\n```\n## Disabling runtime binding\nSometimes runtime binding leads to unexpected behaviour.  Say if you forget\nto bind an instance to a class, `inject` will try to implicitly instantiate it.\n\nIf an instance is unintentionally created with default arguments it may lead to\nhard-to-debug bugs.  To disable runtime binding and make sure that only \nexplicitly bound instances are injected, pass `bind_in_runtime=False` \nto `inject.configure`, `inject.configure_once` or `inject.clear_and_configure`.\n\nIn this case `inject` immediately raises `InjectorException` when the code\ntries to get an unbound instance.\n\n## Keys\nIt is possible to use any hashable object as a binding key. For example:\n\n```python\nimport inject\n\ninject.configure(lambda binder: \\\n    binder.bind('host', 'localhost') \\\n    binder.bind('port', 1234))\n```\n\n## Why no scopes?\nI've used Guice and Spring in Java for a lot of years, and I don't like their scopes.\n`python-inject` by default creates objects as singletons. It does not need a prototype scope\nas in Spring or NO_SCOPE as in Guice because `python-inject` does not steal your class \nconstructors. Create instances the way you like and then inject dependencies into them.\n\nOther scopes such as a request scope or a session scope are fragile, introduce high coupling,\nand are difficult to test. In `python-inject` write custom providers which can be thread-local, \nrequest-local, etc.\n\nFor example, a thread-local current user provider:\n\n```python\nimport inject\nimport threading\n\n# Given a user class.\nclass User(object):\n    pass\n\n# Create a thread-local current user storage.\n_LOCAL = threading.local()\n\ndef get_current_user():\n    return getattr(_LOCAL, 'user', None)\n\ndef set_current_user(user):\n    _LOCAL.user = user\n\n# Bind User to a custom provider.\ninject.configure(lambda binder: binder.bind_to_provider(User, get_current_user))\n\n# Inject the current user.\n@inject.params(user=User)\ndef foo(user):\n    pass\n```\n\n## Links\n* Project: https://github.com/ivankorobkov/python-inject\n\n## License\nApache License 2.0\n\n## Contributors\n* Ivan Korobkov [@ivankorobkov](https://github.com/ivankorobkov)\n* Jaime Wyant [@jaimewyant](https://github.com/jaimewyant)\n* Sebastian Buczy\u0144ski [@Enforcer](https://github.com/Enforcer)\n* Oleksandr Fedorov [@Fedorof](https://github.com/Fedorof)\n* cselvaraj [@cselvaraj](https://github.com/cselvaraj)\n* \u9646\u96e8\u6674 [@SixExtreme](https://github.com/SixExtreme)\n* Andrew William Borba [@andrewborba10](https://github.com/andrewborba10)\n* jdmeyer3 [@jdmeyer3](https://github.com/jdmeyer3)\n* Alex Grover [@ajgrover](https://github.com/ajgrover)\n* Harro van der Kroft [@wisepotato](https://github.com/wisepotato)\n* Samiur Rahman [@samiur](https://github.com/samiur)\n* 45deg [@45deg](https://github.com/45deg)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ivankorobkov/python-inject", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "Inject", "package_url": "https://pypi.org/project/Inject/", "platform": "", "project_url": "https://pypi.org/project/Inject/", "project_urls": {"Homepage": "https://github.com/ivankorobkov/python-inject"}, "release_url": "https://pypi.org/project/Inject/4.1.2/", "requires_dist": null, "requires_python": "", "summary": "Python dependency injection framework", "version": "4.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-inject <a href=\"https://travis-ci.org/ivankorobkov/python-inject\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef388e2b6177f864542ef69b50df4364f0e1241f/68747470733a2f2f7472617669732d63692e6f72672f6976616e6b6f726f626b6f762f707974686f6e2d696e6a6563742e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>Dependency injection the python way, the good way. Not a port of Guice or Spring.</p>\n<h2>Key features</h2>\n<ul>\n<li>Fast.</li>\n<li>Thread-safe.</li>\n<li>Simple to use.</li>\n<li>Does not steal class constructors.</li>\n<li>Does not try to manage your application object graph.</li>\n<li>Transparently integrates into tests.</li>\n<li>Supports Python 3.5+ (<code>v4.*</code>) and Python 2.7\u20133.5 (<code>v3.*</code>).</li>\n<li>Supports type hinting in Python 3.5+.</li>\n<li>Autoparams leveraging type annotations.</li>\n</ul>\n<h2>Python Support</h2>\n<table>\n<thead>\n<tr>\n<th>Python</th>\n<th>Inject Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.6+</td>\n<td>4.1+</td>\n</tr>\n<tr>\n<td>3.5</td>\n<td>4.0</td>\n</tr>\n<tr>\n<td>&lt; 3.5</td>\n<td>3.*</td>\n</tr></tbody></table>\n<h2>Installation</h2>\n<p>Use pip to install the lastest version:</p>\n<pre>pip install inject\n</pre>\n<h2>Autoparams example</h2>\n<p><code>@inject.autoparams</code> returns a decorator which automatically injects arguments into a function\nthat uses type annotations. This is supported only in Python &gt;= 3.5.</p>\n<pre><span class=\"nd\">@inject</span><span class=\"o\">.</span><span class=\"n\">autoparams</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">refresh_cache</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"n\">RedisCache</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">DbInterface</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>There is an option to specify which arguments we want to inject without attempts of\ninjecting everything:</p>\n<pre><span class=\"nd\">@inject</span><span class=\"o\">.</span><span class=\"n\">autoparams</span><span class=\"p\">(</span><span class=\"s1\">'cache'</span><span class=\"p\">,</span> <span class=\"s1\">'db'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sign_up</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Step-by-step example</h2>\n<pre><span class=\"c1\"># Import the inject module.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inject</span>\n\n\n<span class=\"c1\"># `inject.instance` requests dependencies from the injector.</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">)</span>\n    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># `inject.params` injects dependencies as keyword arguments or positional argument. </span>\n<span class=\"c1\"># Also you can use @inject.autoparams in Python 3.5, see the example above.</span>\n<span class=\"nd\">@inject</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">Cache</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">CurrentUser</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this can be called in different ways:</span>\n<span class=\"c1\"># with injected arguments</span>\n<span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># with positional arguments</span>\n<span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">my_cache</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># with keyword arguments</span>\n<span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">my_cache</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">current_user</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># `inject.param` is deprecated, use `inject.params` instead.</span>\n<span class=\"nd\">@inject</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">(</span><span class=\"s1\">'cache'</span><span class=\"p\">,</span> <span class=\"n\">Cache</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># `inject.attr` creates properties (descriptors) which request dependencies on access.</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">)</span>\n            \n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n    \n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create an optional configuration.</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_config</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">):</span>\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"n\">my_config2</span><span class=\"p\">)</span>  <span class=\"c1\"># Add bindings from another config.</span>\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">,</span> <span class=\"n\">RedisCache</span><span class=\"p\">(</span><span class=\"s1\">'localhost:1234'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Configure a shared injector.</span>\n<span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">my_config</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Instantiate User as a normal class. Its `cache` dependency is injected when accessed.</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Call the functions, the dependencies are automatically injected.</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'Hello'</span><span class=\"p\">)</span>\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"s1\">'world'</span><span class=\"p\">)</span>\n</pre>\n<h2>Usage with Django</h2>\n<p>Django can load some modules multiple times which can lead to\n<code>InjectorException: Injector is already configured</code>. You can use <code>configure_once</code> which\nis guaranteed to run only once when the injector is absent:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">inject</span>\n<span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">configure_once</span><span class=\"p\">(</span><span class=\"n\">my_config</span><span class=\"p\">)</span>\n</pre>\n<h2>Testing</h2>\n<p>In tests use <code>inject.clear_and_configure(callable)</code> to create a new injector on setup,\nand optionally <code>inject.clear()</code> to clean up on tear down:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">clear_and_configure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">binder</span><span class=\"p\">:</span> <span class=\"n\">binder</span>\n            <span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">,</span> <span class=\"n\">Mock</span><span class=\"p\">()</span> \\\n            <span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Validator</span><span class=\"p\">,</span> <span class=\"n\">TestValidator</span><span class=\"p\">())</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n<h2>Thread-safety</h2>\n<p>After configuration the injector is thread-safe and can be safely reused by multiple threads.</p>\n<h2>Binding types</h2>\n<p><strong>Instance</strong> bindings always return the same instance:</p>\n<pre><span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">RedisCache</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'localhost:1234'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">):</span>\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">,</span> <span class=\"n\">redis</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Constructor</strong> bindings create a singleton on injection:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Creates a redis cache singleton on first injection.</span>\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind_to_constructor</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">RedisCache</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'localhost:1234'</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Provider</strong> bindings call the provider on injection:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_my_thread_local_cache</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Executes the provider on each injection.</span>\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind_to_provider</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">,</span> <span class=\"n\">get_my_thread_local_cache</span><span class=\"p\">)</span> \n</pre>\n<p><strong>Runtime</strong> bindings automatically create singletons on injection, require no configuration.\nFor example, only the <code>Config</code> class binding is present, other bindings are runtime:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cache</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Db</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">Cache</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">Db</span><span class=\"p\">)</span>\n    \n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span>\n    \n<span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">binder</span><span class=\"p\">:</span> <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">load_config_file</span><span class=\"p\">()))</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<h2>Disabling runtime binding</h2>\n<p>Sometimes runtime binding leads to unexpected behaviour.  Say if you forget\nto bind an instance to a class, <code>inject</code> will try to implicitly instantiate it.</p>\n<p>If an instance is unintentionally created with default arguments it may lead to\nhard-to-debug bugs.  To disable runtime binding and make sure that only\nexplicitly bound instances are injected, pass <code>bind_in_runtime=False</code>\nto <code>inject.configure</code>, <code>inject.configure_once</code> or <code>inject.clear_and_configure</code>.</p>\n<p>In this case <code>inject</code> immediately raises <code>InjectorException</code> when the code\ntries to get an unbound instance.</p>\n<h2>Keys</h2>\n<p>It is possible to use any hashable object as a binding key. For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">inject</span>\n\n<span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">binder</span><span class=\"p\">:</span> \\\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"s1\">'localhost'</span><span class=\"p\">)</span> \\\n    <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"mi\">1234</span><span class=\"p\">))</span>\n</pre>\n<h2>Why no scopes?</h2>\n<p>I've used Guice and Spring in Java for a lot of years, and I don't like their scopes.\n<code>python-inject</code> by default creates objects as singletons. It does not need a prototype scope\nas in Spring or NO_SCOPE as in Guice because <code>python-inject</code> does not steal your class\nconstructors. Create instances the way you like and then inject dependencies into them.</p>\n<p>Other scopes such as a request scope or a session scope are fragile, introduce high coupling,\nand are difficult to test. In <code>python-inject</code> write custom providers which can be thread-local,\nrequest-local, etc.</p>\n<p>For example, a thread-local current user provider:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">inject</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"c1\"># Given a user class.</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Create a thread-local current user storage.</span>\n<span class=\"n\">_LOCAL</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_current_user</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">_LOCAL</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">set_current_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"n\">_LOCAL</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n\n<span class=\"c1\"># Bind User to a custom provider.</span>\n<span class=\"n\">inject</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">binder</span><span class=\"p\">:</span> <span class=\"n\">binder</span><span class=\"o\">.</span><span class=\"n\">bind_to_provider</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">get_current_user</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Inject the current user.</span>\n<span class=\"nd\">@inject</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Links</h2>\n<ul>\n<li>Project: <a href=\"https://github.com/ivankorobkov/python-inject\" rel=\"nofollow\">https://github.com/ivankorobkov/python-inject</a></li>\n</ul>\n<h2>License</h2>\n<p>Apache License 2.0</p>\n<h2>Contributors</h2>\n<ul>\n<li>Ivan Korobkov <a href=\"https://github.com/ivankorobkov\" rel=\"nofollow\">@ivankorobkov</a></li>\n<li>Jaime Wyant <a href=\"https://github.com/jaimewyant\" rel=\"nofollow\">@jaimewyant</a></li>\n<li>Sebastian Buczy\u0144ski <a href=\"https://github.com/Enforcer\" rel=\"nofollow\">@Enforcer</a></li>\n<li>Oleksandr Fedorov <a href=\"https://github.com/Fedorof\" rel=\"nofollow\">@Fedorof</a></li>\n<li>cselvaraj <a href=\"https://github.com/cselvaraj\" rel=\"nofollow\">@cselvaraj</a></li>\n<li>\u9646\u96e8\u6674 <a href=\"https://github.com/SixExtreme\" rel=\"nofollow\">@SixExtreme</a></li>\n<li>Andrew William Borba <a href=\"https://github.com/andrewborba10\" rel=\"nofollow\">@andrewborba10</a></li>\n<li>jdmeyer3 <a href=\"https://github.com/jdmeyer3\" rel=\"nofollow\">@jdmeyer3</a></li>\n<li>Alex Grover <a href=\"https://github.com/ajgrover\" rel=\"nofollow\">@ajgrover</a></li>\n<li>Harro van der Kroft <a href=\"https://github.com/wisepotato\" rel=\"nofollow\">@wisepotato</a></li>\n<li>Samiur Rahman <a href=\"https://github.com/samiur\" rel=\"nofollow\">@samiur</a></li>\n<li>45deg <a href=\"https://github.com/45deg\" rel=\"nofollow\">@45deg</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7011773, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b027a495845a7ee94051a39fbbbfbd6c", "sha256": "1e56ea7b46f57933975be322ce547376bfc72357d2cc6401328da29322308cd1"}, "downloads": -1, "filename": "Inject-1.0.tar.gz", "has_sig": false, "md5_digest": "b027a495845a7ee94051a39fbbbfbd6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38539, "upload_time": "2010-02-12T09:52:16", "upload_time_iso_8601": "2010-02-12T09:52:16.926888Z", "url": "https://files.pythonhosted.org/packages/47/fd/79b38e78e54681c9e7c831a34b79c5deba9c648187cce6557eefd0907b47/Inject-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c1d8cc4b0a8992e54cac20213d5f76a0", "sha256": "fcbecd3cfbcfa2ef9947400148b966deea85776562d0cbcbbe86b45579a46b72"}, "downloads": -1, "filename": "Inject-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c1d8cc4b0a8992e54cac20213d5f76a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39902, "upload_time": "2010-06-18T08:33:21", "upload_time_iso_8601": "2010-06-18T08:33:21.155916Z", "url": "https://files.pythonhosted.org/packages/f4/e4/81cc9c8f90d81158c1ec95bb431ab5b77e246939ca1135a00ca4291d762e/Inject-1.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "f4968ddd8dd756c261e24d3422a585d4", "sha256": "7baf710aa38034eebf990c2011c551505e29e8f747d475e31b16431f3749754b"}, "downloads": -1, "filename": "Inject-2.0.0.tar.gz", "has_sig": false, "md5_digest": "f4968ddd8dd756c261e24d3422a585d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30550, "upload_time": "2014-02-10T10:57:44", "upload_time_iso_8601": "2014-02-10T10:57:44.359963Z", "url": "https://files.pythonhosted.org/packages/e9/10/80b167fa39fb56da4e6465fec8515f108cc79ff33deca5d3f72a1ae40958/Inject-2.0.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "aa98e7b28eaa84b4cf39a55a779418dd", "sha256": "2d325874c9bcbca6514dd663ceeafdd6c982e7e1234274941c3a67bc0d1a5595"}, "downloads": -1, "filename": "Inject-3.0.0.tar.gz", "has_sig": false, "md5_digest": "aa98e7b28eaa84b4cf39a55a779418dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7902, "upload_time": "2014-02-10T11:07:50", "upload_time_iso_8601": "2014-02-10T11:07:50.659701Z", "url": "https://files.pythonhosted.org/packages/db/31/da5fc602c622558bedc76e3546baec1e8a95f5c3ecd56c4c3d4e783168a8/Inject-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "092bed111137caebd202ae889337e55a", "sha256": "e326fa7934353c4e21fc85be4bf717266a24b7aa2ab3494755155fbebfd88e8b"}, "downloads": -1, "filename": "Inject-3.1.0.tar.gz", "has_sig": false, "md5_digest": "092bed111137caebd202ae889337e55a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8759, "upload_time": "2014-03-06T21:34:06", "upload_time_iso_8601": "2014-03-06T21:34:06.907788Z", "url": "https://files.pythonhosted.org/packages/f9/1c/a6b292c21f9cfbe49006d16197ba09515f6bd193038be4d0a18d8601a05f/Inject-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "6ad47a0d48449f03f951ad16541a8035", "sha256": "cd873982656892a539df0c6e60f3378ce35dbf603358e3fb9107a9b52933a230"}, "downloads": -1, "filename": "Inject-3.1.1.tar.gz", "has_sig": false, "md5_digest": "6ad47a0d48449f03f951ad16541a8035", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8961, "upload_time": "2014-03-14T15:48:21", "upload_time_iso_8601": "2014-03-14T15:48:21.753111Z", "url": "https://files.pythonhosted.org/packages/4c/13/c4ee31c9a954d464996b75fecc28d8fd6bee30f0467365c7f86b661b2f95/Inject-3.1.1.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "8a66b17f6ee38e5838fe4e7a05da9928", "sha256": "032f49874c4e4f2db19612002e66eb6b137150e565df6f947fb02fe36eb5ca65"}, "downloads": -1, "filename": "Inject-3.2.0.tar.gz", "has_sig": false, "md5_digest": "8a66b17f6ee38e5838fe4e7a05da9928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9354, "upload_time": "2014-08-04T11:02:28", "upload_time_iso_8601": "2014-08-04T11:02:28.659910Z", "url": "https://files.pythonhosted.org/packages/5a/9d/42d398e8daef197a4672a5dd9e3f8e8317272682219a6a48b996e09a9ae9/Inject-3.2.0.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "36f36c87d04f8a579558c975fbd487b9", "sha256": "aec5f6b7199b05183125a9e20fb7d082e649b93836c687e764d1f65e8395fe14"}, "downloads": -1, "filename": "Inject-3.3.0.tar.gz", "has_sig": false, "md5_digest": "36f36c87d04f8a579558c975fbd487b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9973, "upload_time": "2014-08-22T07:44:51", "upload_time_iso_8601": "2014-08-22T07:44:51.335257Z", "url": "https://files.pythonhosted.org/packages/22/89/e74144610522279aa394fd38e165d00fc4e90a16fceb3d1dd2fdbce209fc/Inject-3.3.0.tar.gz", "yanked": false}], "3.3.1": [{"comment_text": "", "digests": {"md5": "050982b15735bb9045e309ad9fa1077e", "sha256": "274234dd18e9dd525998077f59c9c59d1e49ae5226f095f4364fc98009a1da6c"}, "downloads": -1, "filename": "Inject-3.3.1.tar.gz", "has_sig": false, "md5_digest": "050982b15735bb9045e309ad9fa1077e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10024, "upload_time": "2015-03-26T13:31:17", "upload_time_iso_8601": "2015-03-26T13:31:17.484457Z", "url": "https://files.pythonhosted.org/packages/10/78/bdbd65cb1115652254c93adb3238a5c857de9bb07897939e468e734d5f67/Inject-3.3.1.tar.gz", "yanked": false}], "3.3.2": [{"comment_text": "", "digests": {"md5": "280da064c9b22bda8cd7bb6639f133b8", "sha256": "1977d07ad617cee5c99e447f8a78cd90722c0cab7e129a9fa6b1d263fe81773f"}, "downloads": -1, "filename": "Inject-3.3.2.tar.gz", "has_sig": false, "md5_digest": "280da064c9b22bda8cd7bb6639f133b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10106, "upload_time": "2017-09-14T16:07:36", "upload_time_iso_8601": "2017-09-14T16:07:36.483492Z", "url": "https://files.pythonhosted.org/packages/07/43/c51c1acfbdeda9f871e23ed53c5caedc50f00d0ae582a06d230d3bf8cdcf/Inject-3.3.2.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "f90b65e0b5bce8395ffe1d4c85f20bca", "sha256": "b6fe50ba8a06f078c07900319c057273edfd48090e40de5f97f0c14bcac5ce08"}, "downloads": -1, "filename": "Inject-3.4.0.tar.gz", "has_sig": false, "md5_digest": "f90b65e0b5bce8395ffe1d4c85f20bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10977, "upload_time": "2018-08-01T08:01:31", "upload_time_iso_8601": "2018-08-01T08:01:31.173298Z", "url": "https://files.pythonhosted.org/packages/57/64/f04bcdd00c8c955a19fb84c53d880f78ed7c17112e319f4ed5cdc36c3c33/Inject-3.4.0.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "c1a8f7cf244907f2cbead05039fe005c", "sha256": "557f5e4d62cb7ddd29a6f97f4fa6b2e5d892c4f908be573157c7841fc1021634"}, "downloads": -1, "filename": "Inject-3.5.0.tar.gz", "has_sig": false, "md5_digest": "c1a8f7cf244907f2cbead05039fe005c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11379, "upload_time": "2019-03-11T07:43:53", "upload_time_iso_8601": "2019-03-11T07:43:53.630534Z", "url": "https://files.pythonhosted.org/packages/95/f5/d1a3fcc84b5b35b90edc85e045b94049d6b29157b9a8b13950c1bdb63642/Inject-3.5.0.tar.gz", "yanked": false}], "3.5.1": [{"comment_text": "", "digests": {"md5": "1d5937c9d85e5409d6d179f85a0e4e1f", "sha256": "370759a8b15f1131f82a953ed67fbf57760dea2f3651d4c949d8da098e8dc69e"}, "downloads": -1, "filename": "Inject-3.5.1.tar.gz", "has_sig": false, "md5_digest": "1d5937c9d85e5409d6d179f85a0e4e1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11450, "upload_time": "2019-04-16T09:27:14", "upload_time_iso_8601": "2019-04-16T09:27:14.084988Z", "url": "https://files.pythonhosted.org/packages/db/80/f6490401babadca3fcba3c7cc538d1e1ad6995485ad661496be9caacd2a1/Inject-3.5.1.tar.gz", "yanked": false}], "3.5.2": [{"comment_text": "", "digests": {"md5": "6c7d55a7c9a5e4792f5ae9947bfd25ef", "sha256": "6bc0844542384326794ce8dd992d4c930f06a3c382009a6e4a6d91d877766f2b"}, "downloads": -1, "filename": "Inject-3.5.2.tar.gz", "has_sig": false, "md5_digest": "6c7d55a7c9a5e4792f5ae9947bfd25ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11916, "upload_time": "2019-07-10T08:22:49", "upload_time_iso_8601": "2019-07-10T08:22:49.144135Z", "url": "https://files.pythonhosted.org/packages/2b/80/7affa02949cb00048a3406d5dcda585c34fbbf2c383606a387fa4096cfb8/Inject-3.5.2.tar.gz", "yanked": false}], "3.5.3": [{"comment_text": "", "digests": {"md5": "26e53a7530dd296aef025abd08758b2c", "sha256": "867d43caefa9d92ed9d541d27c5f2a94f154b265121a2d8f038a85ca37695f7b"}, "downloads": -1, "filename": "Inject-3.5.3.tar.gz", "has_sig": false, "md5_digest": "26e53a7530dd296aef025abd08758b2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12018, "upload_time": "2019-07-23T21:11:59", "upload_time_iso_8601": "2019-07-23T21:11:59.166796Z", "url": "https://files.pythonhosted.org/packages/72/b4/24e603398e0b9148e72ecb1f3e41be6ddf90bfe51f170d0d21e4be23d67a/Inject-3.5.3.tar.gz", "yanked": false}], "3.5.4": [{"comment_text": "", "digests": {"md5": "0a2e260d9826c1d607a214481f555db0", "sha256": "de218eca8400f0fdd10ff0b779880a77ecab8bd52e0455dce94803964f360e96"}, "downloads": -1, "filename": "Inject-3.5.4.tar.gz", "has_sig": false, "md5_digest": "0a2e260d9826c1d607a214481f555db0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9548, "upload_time": "2019-07-30T08:32:44", "upload_time_iso_8601": "2019-07-30T08:32:44.475753Z", "url": "https://files.pythonhosted.org/packages/3b/f0/23703cbb81f878308ec23426fd9a94a98e4302fefcb021c625343e2512ce/Inject-3.5.4.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "5e9a8272e422d5aec4c69efabcb44e72", "sha256": "4d812fd60b19c2a6c6ce96bade16fabf07f9cd47e23b9bb8367a554aa42c0271"}, "downloads": -1, "filename": "Inject-4.0.0.tar.gz", "has_sig": false, "md5_digest": "5e9a8272e422d5aec4c69efabcb44e72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9652, "upload_time": "2019-11-25T08:46:59", "upload_time_iso_8601": "2019-11-25T08:46:59.274841Z", "url": "https://files.pythonhosted.org/packages/38/2f/063dab67743b37fdb6c89974a3059f32c998d6d7f0126b4f15b30078ec2d/Inject-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "0865e1cbc8f09c7845f8e835de8c02ea", "sha256": "08b6983add8de00d3359a628c06d4a80b3a9ab0affccdab2008690b6e2866aa9"}, "downloads": -1, "filename": "Inject-4.1.0.tar.gz", "has_sig": false, "md5_digest": "0865e1cbc8f09c7845f8e835de8c02ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9843, "upload_time": "2020-02-24T08:51:47", "upload_time_iso_8601": "2020-02-24T08:51:47.999833Z", "url": "https://files.pythonhosted.org/packages/d2/25/de960268cb786247ad81b41b02756d68e3a11b2e0d07d9c80321e95c17d6/Inject-4.1.0.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "04cdfc587cd4a139b21011c3a6b717c1", "sha256": "efbe3ec49231a084284f0c2fd88a7c3f4798a1ff297add5b3fca0ddd252ded35"}, "downloads": -1, "filename": "Inject-4.1.1.tar.gz", "has_sig": false, "md5_digest": "04cdfc587cd4a139b21011c3a6b717c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9857, "upload_time": "2020-02-26T07:37:58", "upload_time_iso_8601": "2020-02-26T07:37:58.625342Z", "url": "https://files.pythonhosted.org/packages/9c/64/e075f57eb24b2f90be2ef0d8079505a3b7826efbbc348938617d81a1648c/Inject-4.1.1.tar.gz", "yanked": false}], "4.1.2": [{"comment_text": "", "digests": {"md5": "4ab1ee0d358d2502b9362435f232f7b9", "sha256": "8ce8917da7f31ca52a45022ed462381ec0834652413ecb134e8bf045ee8b7a38"}, "downloads": -1, "filename": "Inject-4.1.2.tar.gz", "has_sig": false, "md5_digest": "4ab1ee0d358d2502b9362435f232f7b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14848, "upload_time": "2020-04-13T18:10:27", "upload_time_iso_8601": "2020-04-13T18:10:27.880803Z", "url": "https://files.pythonhosted.org/packages/b2/61/0678bcc691dfcb74872134ebb88fd9db6208a990d9e02eedbf5e537f6a78/Inject-4.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ab1ee0d358d2502b9362435f232f7b9", "sha256": "8ce8917da7f31ca52a45022ed462381ec0834652413ecb134e8bf045ee8b7a38"}, "downloads": -1, "filename": "Inject-4.1.2.tar.gz", "has_sig": false, "md5_digest": "4ab1ee0d358d2502b9362435f232f7b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14848, "upload_time": "2020-04-13T18:10:27", "upload_time_iso_8601": "2020-04-13T18:10:27.880803Z", "url": "https://files.pythonhosted.org/packages/b2/61/0678bcc691dfcb74872134ebb88fd9db6208a990d9e02eedbf5e537f6a78/Inject-4.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:56 2020"}