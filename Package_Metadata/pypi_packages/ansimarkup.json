{"info": {"author": "Georgi Valkov", "author_email": "georgi.t.valkov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "Ansimarkup\n==========\n\n.. class:: no-web no-pdf\n\n|pypi| |build| |license|\n\n\nAnsimarkup is an XML-like markup for producing colored terminal text.\n\n\n.. code-block:: python\n\n  from ansimarkup import ansiprint as print\n\n  print(\"<b>bold text</b>\"))\n  print(\"<red>red text</red>\", \"<red,green>red text on a green background</red,green>\")\n  print(\"<fg #ffaf00>orange text</fg #ffaf00>\")\n\n\nInstallation\n------------\n\nThe latest stable version of ansimarkup can be installed from pypi:\n\n.. code-block:: bash\n\n  $ pip install ansimarkup\n\n\nUsage\n-----\n\nBasic\n~~~~~\n\n.. code-block:: python\n\n  from ansimarkup import parse, ansiprint\n\n  # parse() converts the tags to the corresponding ansi escape sequence.\n  parse(\"<b>bold</b> <d>dim</d>\")\n\n  # ansiprint() works exactly like print(), but first runs parse() on all arguments.\n  ansiprint(\"<b>bold</b>\", \"<d>dim</d>\")\n  ansiprint(\"<b>bold</b>\", \"<d>dim</d>\", sep=\":\", file=sys.stderr)\n\n\nColors and styles\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n  # Colors may be specified in one of several ways.\n  parse(\"<red>red foreground</red>\")\n  parse(\"<RED>red background</RED>\")\n  parse(\"<fg red>red foreground</fg red>\")\n  parse(\"<bg red>red background</bg red>\")\n\n  # Xterm, hex and rgb colors are accepted by the <fg> and <bg> tags.\n  parse(\"<fg 86>aquamarine foreground</fg 86>\")\n  parse(\"<bg #00005f>dark blue background</bg #00005f>\")\n  parse(\"<fg 0,95,0>dark green foreground</fg 0,95,0>\")\n\n  # Tags may be nested.\n  parse(\"<r><Y>red text on a yellow foreground</Y></r>\")\n\n  # The above may be more concisely written as:\n  parse(\"<r,y>red text on a yellow background</r,y>\")\n\n  # This shorthand also supports style tags.\n  parse(\"<b,r,y>bold red text on a yellow background</b,r,y>\")\n  parse(\"<b,r,>bold red text</b,r,>\")\n  parse(\"<b,,y>bold regular text on a yellow background</b,,y>\")\n\n  # Unrecognized tags are left as-is.\n  parse(\"<b><element1></element1></b>\")\n\nFor a list of markup tags, please refer to `tags.py`_.\n\n\nUser-defined tags\n~~~~~~~~~~~~~~~~~\n\nCustom tags or overrides for existing tags may be defined by creating a new\n``AnsiMarkup`` instance:\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup, parse\n\n  user_tags = {\n      # Add a new tag (e.g. we want <info> to expand to \"<bold><green>\").\n      \"info\": parse(\"<b><g>\")\n\n      # The ansi escape sequence can be used directly.\n      \"info\": \"e\\x1b[32m\\x1b[1m\",\n\n      # Tag names may also be callables.\n      \"err\":  lambda: parse(\"<r>\")\n\n      # Colors may also be given convenient tag names.\n      \"orange\": parse(\"<fg #d78700>\"),\n\n      # User-defined tags always take precedence over existing tags.\n      \"bold\": parse(\"<dim>\")\n  }\n\n  am = AnsiMarkup(tags=user_tags)\n\n  am.parse(\"<info>bold green</info>\")\n  am.ansiprint(\"<err>red</err>\")\n\n  # Calling the instance is equivalent to calling its parse method.\n  am(\"<b>bold</b>\") == am.parse(\"<b>bold</b>\")\n\n\nAlignment and length\n~~~~~~~~~~~~~~~~~~~~\n\nAligning formatted strings can be challenging because the length of the rendered\nstring is different that the number of printable characters. Consider this example:\n\n.. code-block:: python\n\n  >>> a = '| {:30} |'.format('abc')\n  >>> b = '| {:30} |'.format(parse('<b>abc</b>'))\n  >>> print(a, b, sep='\\n')\n  | abc                    |\n  | abc                            |\n\nThis can be addressed by using the ``ansistring`` function or the\n``AnsiMarkup.string(markup)`` method, which has the following useful properties:\n\n.. code-block:: python\n\n  >>> s = ansistring('<b>abc</b>')\n  >>> print(repr(s), '->', s)\n  <b>abc</b> -> abc  # abc is printed in bold\n  >>> len(s), len(am.parse('<b>abc</b>'), s.delta\n  3, 11, 8\n\nWith the help of the ``delta`` property, it is easy to align the strings in the\nabove example:\n\n.. code-block:: python\n\n  >>> s = ansistring('<b>abc</b>')\n  >>> a = '| {:{width}} |'.format('abc', width=30)\n  >>> b = '| {:{width}} |'.format(s, width=(30 + s.delta))\n  >>> print(a, b, sep='\\n')\n  | abc                            |\n  | abc                            |\n\n\nOther features\n~~~~~~~~~~~~~~\n\nThe default tag separators can be changed by passing the ``tag_sep`` argument to\n``AnsiMarkup``:\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup\n\n  am = AnsiMarkup(tag_sep=\"{}\")\n  am.parse(\"{b}{r}bold red{/b}{/r}\")\n\nMarkup tags can be removed using the ``strip()`` method:\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup\n\n  am = AnsiMarkup()\n  am.strip(\"<b><r>bold red</b></r>\")\n\nThe ``strict`` option instructs the parser to raise ``MismatchedTag`` if opening\ntags don't have corresponding closing tags:\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup\n\n  am = AnsiMarkup(strict=True)\n  am.parse(\"<r><b>bold red\")\n  # ansimarkup.MismatchedTag: opening tag \"<r>\" has no corresponding closing tag\n\n\nCommand-line\n~~~~~~~~~~~~\n\nAnsimarkup may also be used on the command-line. This works as if all\narguments were passed to ``ansiprint()``::\n\n  $ python -m ansimarkup \"<b>bold</b>\" \"<red>red</red>\"\n\n\nLogging formatter\n~~~~~~~~~~~~~~~~~\n\nAnsimarkup also comes with a formatter for the standard library `logging`\nmodule. It can be used as:\n\n.. code-block:: python\n\n  import logging\n  from ansimarkup.logformatter import AnsiMarkupFormatter\n\n  log = logging.getLogger()\n  hdl = logging.StreamHandler()\n  fmt = AnsiMarkupFormatter()\n  hdl.setFormatter(fmt)\n  log.addHandler(hdl)\n\n  log.info(\"<b>bold text</b>\")\n\n\nWindows\n~~~~~~~\n\nAnsimarkup uses the colorama_ library internally, which means that Windows\nsupport for ansi escape sequences is available by first running:\n\n.. code-block:: python\n\n  import colorama\n  colorama.init()\n\nFor more information on Windows support, consult the \"Usage\" section of the\ncolorama_ documentation.\n\n\nPerformance\n-----------\n\nWhile the focus of ansimarkup is convenience, it does try to keep processing to\na minimum. The `benchmark.py`_ script attempts to benchmark different ansi\nescape code libraries::\n\n  Benchmark 1: <r><b>red bold</b></r>\n    colorama     0.2998 \u03bcs\n    termcolor    3.2339 \u03bcs\n    colr         3.6483 \u03bcs\n    ansimarkup   6.8679 \u03bcs\n    pastel       28.8538 \u03bcs\n    plumbum      53.5004 \u03bcs\n\n  Benchmark 2: <r><b>red bold</b>red</r><b>bold</b>\n    colorama     0.8269 \u03bcs\n    termcolor    8.9296 \u03bcs\n    ansimarkup   9.3099 \u03bcs\n    colr         9.6244 \u03bcs\n    pastel       62.2018 \u03bcs\n    plumbum      120.8048 \u03bcs\n\n\nLimitations\n-----------\n\nAnsimarkup is a simple wrapper around colorama. It does very little in the way\nof validating that markup strings are well-formed. This is a conscious decision\nwith the goal of keeping things simple and fast.\n\nUnbalanced nesting, such as in the following example, will produce incorrect\noutput::\n\n  <r><Y>1</r>2</Y>\n\n\nTodo\n----\n\n- Many corner cases remain to be fixed.\n\n- More elaborate testing. The current test suite mostly covers the\n  \"happy paths\".\n\n- Replace ``tag_list.index`` in ``sub_end`` with something more\n  efficient (i.e. something like an ordered MultiDict).\n\n\nSimilar libraries\n-----------------\n\n- pastel_: bring colors to your terminal\n- `plumbum.colors`_: small yet feature-rich library for shell script-like programs in Python\n- colr_: easy terminal colors, with chainable methods\n\n\nLicense\n-------\n\nAnsimarkup is released under the terms of the `Revised BSD License`_.\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/ansimarkup.svg?style=flat-square&label=latest%20stable%20version\n    :target: https://pypi.python.org/pypi/ansimarkup\n    :alt: Latest version released on PyPi\n\n.. |license| image:: https://img.shields.io/pypi/l/ansimarkup.svg?style=flat-square&label=license\n    :target: https://pypi.python.org/pypi/ansimarkup\n    :alt: BSD 3-Clause\n\n.. |build| image:: https://img.shields.io/travis/gvalkov/python-ansimarkup/master.svg?style=flat-square&label=build\n    :target: http://travis-ci.org/gvalkov/python-ansimarkup\n    :alt: Build status\n\n\n.. _tags.py:        https://github.com/gvalkov/python-ansimarkup/blob/master/ansimarkup/tags.py\n.. _benchmark.py:   https://github.com/gvalkov/python-ansimarkup/blob/master/tests/benchmark.py\n\n.. _colorama:       https://pypi.python.org/pypi/colorama\n.. _pastel:         https://github.com/sdispater/pastel\n.. _plumbum.colors: https://plumbum.readthedocs.io/en/latest/cli.html#colors\n.. _colr:           https://pypi.python.org/pypi/Colr/\n.. _`Revised BSD License`: https://raw.github.com/gvalkov/python-ansimarkup/master/LICENSE\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gvalkov/python-ansimarkup", "keywords": "ansi terminal markup", "license": "Revised BSD License", "maintainer": "", "maintainer_email": "", "name": "ansimarkup", "package_url": "https://pypi.org/project/ansimarkup/", "platform": "", "project_url": "https://pypi.org/project/ansimarkup/", "project_urls": {"Homepage": "https://github.com/gvalkov/python-ansimarkup"}, "release_url": "https://pypi.org/project/ansimarkup/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "Produce colored terminal text with an xml-like markup", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/ansimarkup\" rel=\"nofollow\"><img alt=\"Latest version released on PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5054bf5939e3705849bc0860903200030a87a83/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616e73696d61726b75702e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c6174657374253230737461626c6525323076657273696f6e\"></a> <a href=\"http://travis-ci.org/gvalkov/python-ansimarkup\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2f3fcc30ecc399d2edb915db3497843268c3837/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6776616c6b6f762f707974686f6e2d616e73696d61726b75702f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d6275696c64\"></a> <a href=\"https://pypi.python.org/pypi/ansimarkup\" rel=\"nofollow\"><img alt=\"BSD 3-Clause\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d43fb889b901ac329ba9f3e3ad01fc09ce19812/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f616e73696d61726b75702e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c6963656e7365\"></a></p>\n<p>Ansimarkup is an XML-like markup for producing colored terminal text.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">ansiprint</span> <span class=\"k\">as</span> <span class=\"nb\">print</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold text&lt;/b&gt;\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;red&gt;red text&lt;/red&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;red,green&gt;red text on a green background&lt;/red,green&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg #ffaf00&gt;orange text&lt;/fg #ffaf00&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest stable version of ansimarkup can be installed from pypi:</p>\n<pre>$ pip install ansimarkup\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"basic\">\n<h3>Basic</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span><span class=\"p\">,</span> <span class=\"n\">ansiprint</span>\n\n<span class=\"c1\"># parse() converts the tags to the corresponding ansi escape sequence.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt; &lt;d&gt;dim&lt;/d&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ansiprint() works exactly like print(), but first runs parse() on all arguments.</span>\n<span class=\"n\">ansiprint</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;d&gt;dim&lt;/d&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">ansiprint</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;d&gt;dim&lt;/d&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\":\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"colors-and-styles\">\n<h3>Colors and styles</h3>\n<pre><span class=\"c1\"># Colors may be specified in one of several ways.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;red&gt;red foreground&lt;/red&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;RED&gt;red background&lt;/RED&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg red&gt;red foreground&lt;/fg red&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;bg red&gt;red background&lt;/bg red&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Xterm, hex and rgb colors are accepted by the &lt;fg&gt; and &lt;bg&gt; tags.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg 86&gt;aquamarine foreground&lt;/fg 86&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;bg #00005f&gt;dark blue background&lt;/bg #00005f&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg 0,95,0&gt;dark green foreground&lt;/fg 0,95,0&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Tags may be nested.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r&gt;&lt;Y&gt;red text on a yellow foreground&lt;/Y&gt;&lt;/r&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The above may be more concisely written as:</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r,y&gt;red text on a yellow background&lt;/r,y&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This shorthand also supports style tags.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b,r,y&gt;bold red text on a yellow background&lt;/b,r,y&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b,r,&gt;bold red text&lt;/b,r,&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b,,y&gt;bold regular text on a yellow background&lt;/b,,y&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Unrecognized tags are left as-is.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;&lt;element1&gt;&lt;/element1&gt;&lt;/b&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<p>For a list of markup tags, please refer to <a href=\"https://github.com/gvalkov/python-ansimarkup/blob/master/ansimarkup/tags.py\" rel=\"nofollow\">tags.py</a>.</p>\n</div>\n<div id=\"user-defined-tags\">\n<h3>User-defined tags</h3>\n<p>Custom tags or overrides for existing tags may be defined by creating a new\n<tt>AnsiMarkup</tt> instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">,</span> <span class=\"n\">parse</span>\n\n<span class=\"n\">user_tags</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Add a new tag (e.g. we want &lt;info&gt; to expand to \"&lt;bold&gt;&lt;green&gt;\").</span>\n    <span class=\"s2\">\"info\"</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;&lt;g&gt;\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The ansi escape sequence can be used directly.</span>\n    <span class=\"s2\">\"info\"</span><span class=\"p\">:</span> <span class=\"s2\">\"e</span><span class=\"se\">\\x1b</span><span class=\"s2\">[32m</span><span class=\"se\">\\x1b</span><span class=\"s2\">[1m\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Tag names may also be callables.</span>\n    <span class=\"s2\">\"err\"</span><span class=\"p\">:</span>  <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r&gt;\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Colors may also be given convenient tag names.</span>\n    <span class=\"s2\">\"orange\"</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg #d78700&gt;\"</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># User-defined tags always take precedence over existing tags.</span>\n    <span class=\"s2\">\"bold\"</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;dim&gt;\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">user_tags</span><span class=\"p\">)</span>\n\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;info&gt;bold green&lt;/info&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">ansiprint</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;err&gt;red&lt;/err&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calling the instance is equivalent to calling its parse method.</span>\n<span class=\"n\">am</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"alignment-and-length\">\n<h3>Alignment and length</h3>\n<p>Aligning formatted strings can be challenging because the length of the rendered\nstring is different that the number of printable characters. Consider this example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s1\">'| </span><span class=\"si\">{:30}</span><span class=\"s1\"> |'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'| </span><span class=\"si\">{:30}</span><span class=\"s1\"> |'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'&lt;b&gt;abc&lt;/b&gt;'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">|</span> <span class=\"n\">abc</span>                    <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">abc</span>                            <span class=\"o\">|</span>\n</pre>\n<p>This can be addressed by using the <tt>ansistring</tt> function or the\n<tt>AnsiMarkup.string(markup)</tt> method, which has the following useful properties:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">ansistring</span><span class=\"p\">(</span><span class=\"s1\">'&lt;b&gt;abc&lt;/b&gt;'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"s1\">'-&gt;'</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">b</span><span class=\"o\">&gt;</span><span class=\"n\">abc</span><span class=\"o\">&lt;/</span><span class=\"n\">b</span><span class=\"o\">&gt;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">abc</span>  <span class=\"c1\"># abc is printed in bold</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'&lt;b&gt;abc&lt;/b&gt;'</span><span class=\"p\">),</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">delta</span>\n<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n</pre>\n<p>With the help of the <tt>delta</tt> property, it is easy to align the strings in the\nabove example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">ansistring</span><span class=\"p\">(</span><span class=\"s1\">'&lt;b&gt;abc&lt;/b&gt;'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s1\">'| {:</span><span class=\"si\">{width}</span><span class=\"s1\">} |'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'| {:</span><span class=\"si\">{width}</span><span class=\"s1\">} |'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">30</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">delta</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">|</span> <span class=\"n\">abc</span>                            <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">abc</span>                            <span class=\"o\">|</span>\n</pre>\n</div>\n<div id=\"other-features\">\n<h3>Other features</h3>\n<p>The default tag separators can be changed by passing the <tt>tag_sep</tt> argument to\n<tt>AnsiMarkup</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">(</span><span class=\"n\">tag_sep</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{b}{r}</span><span class=\"s2\">bold red{/b}{/r}\"</span><span class=\"p\">)</span>\n</pre>\n<p>Markup tags can be removed using the <tt>strip()</tt> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">()</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;&lt;r&gt;bold red&lt;/b&gt;&lt;/r&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>strict</tt> option instructs the parser to raise <tt>MismatchedTag</tt> if opening\ntags don\u2019t have corresponding closing tags:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r&gt;&lt;b&gt;bold red\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># ansimarkup.MismatchedTag: opening tag \"&lt;r&gt;\" has no corresponding closing tag</span>\n</pre>\n</div>\n<div id=\"command-line\">\n<h3>Command-line</h3>\n<p>Ansimarkup may also be used on the command-line. This works as if all\narguments were passed to <tt>ansiprint()</tt>:</p>\n<pre>$ python -m ansimarkup \"&lt;b&gt;bold&lt;/b&gt;\" \"&lt;red&gt;red&lt;/red&gt;\"\n</pre>\n</div>\n<div id=\"logging-formatter\">\n<h3>Logging formatter</h3>\n<p>Ansimarkup also comes with a formatter for the standard library <cite>logging</cite>\nmodule. It can be used as:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ansimarkup.logformatter</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkupFormatter</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">hdl</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkupFormatter</span><span class=\"p\">()</span>\n<span class=\"n\">hdl</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">hdl</span><span class=\"p\">)</span>\n\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold text&lt;/b&gt;\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>Ansimarkup uses the <a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a> library internally, which means that Windows\nsupport for ansi escape sequences is available by first running:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">colorama</span>\n<span class=\"n\">colorama</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n</pre>\n<p>For more information on Windows support, consult the \u201cUsage\u201d section of the\n<a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a> documentation.</p>\n</div>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>While the focus of ansimarkup is convenience, it does try to keep processing to\na minimum. The <a href=\"https://github.com/gvalkov/python-ansimarkup/blob/master/tests/benchmark.py\" rel=\"nofollow\">benchmark.py</a> script attempts to benchmark different ansi\nescape code libraries:</p>\n<pre>Benchmark 1: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;&lt;/r&gt;\n  colorama     0.2998 \u03bcs\n  termcolor    3.2339 \u03bcs\n  colr         3.6483 \u03bcs\n  ansimarkup   6.8679 \u03bcs\n  pastel       28.8538 \u03bcs\n  plumbum      53.5004 \u03bcs\n\nBenchmark 2: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;red&lt;/r&gt;&lt;b&gt;bold&lt;/b&gt;\n  colorama     0.8269 \u03bcs\n  termcolor    8.9296 \u03bcs\n  ansimarkup   9.3099 \u03bcs\n  colr         9.6244 \u03bcs\n  pastel       62.2018 \u03bcs\n  plumbum      120.8048 \u03bcs\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Ansimarkup is a simple wrapper around colorama. It does very little in the way\nof validating that markup strings are well-formed. This is a conscious decision\nwith the goal of keeping things simple and fast.</p>\n<p>Unbalanced nesting, such as in the following example, will produce incorrect\noutput:</p>\n<pre>&lt;r&gt;&lt;Y&gt;1&lt;/r&gt;2&lt;/Y&gt;\n</pre>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Many corner cases remain to be fixed.</li>\n<li>More elaborate testing. The current test suite mostly covers the\n\u201chappy paths\u201d.</li>\n<li>Replace <tt>tag_list.index</tt> in <tt>sub_end</tt> with something more\nefficient (i.e. something like an ordered MultiDict).</li>\n</ul>\n</div>\n<div id=\"similar-libraries\">\n<h2>Similar libraries</h2>\n<ul>\n<li><a href=\"https://github.com/sdispater/pastel\" rel=\"nofollow\">pastel</a>: bring colors to your terminal</li>\n<li><a href=\"https://plumbum.readthedocs.io/en/latest/cli.html#colors\" rel=\"nofollow\">plumbum.colors</a>: small yet feature-rich library for shell script-like programs in Python</li>\n<li><a href=\"https://pypi.python.org/pypi/Colr/\" rel=\"nofollow\">colr</a>: easy terminal colors, with chainable methods</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Ansimarkup is released under the terms of the <a href=\"https://raw.github.com/gvalkov/python-ansimarkup/master/LICENSE\" rel=\"nofollow\">Revised BSD License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3808228, "releases": {"0.0.0": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "ec3eb382e8f9bfd9b45cf29f27c828e7", "sha256": "d38e1d0613ae6328a670246b81cd95033a64df6878bb7ff59413a4939a5d70df"}, "downloads": -1, "filename": "ansimarkup-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ec3eb382e8f9bfd9b45cf29f27c828e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5847, "upload_time": "2017-02-11T18:44:51", "upload_time_iso_8601": "2017-02-11T18:44:51.479148Z", "url": "https://files.pythonhosted.org/packages/6d/72/5f95093e01e849c66b19bf4808e2ba3fb781ca4e0b82f04af76805d168a9/ansimarkup-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d9ec9263a813e4f25c97d032802e2196", "sha256": "283325fcbd5023e6060b0e870980d1dd5fc6e29c679d8f36dd49b21049d7f431"}, "downloads": -1, "filename": "ansimarkup-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d9ec9263a813e4f25c97d032802e2196", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 7854, "upload_time": "2017-02-11T18:51:26", "upload_time_iso_8601": "2017-02-11T18:51:26.052695Z", "url": "https://files.pythonhosted.org/packages/85/6c/dd08c191044aa001380a294031e5d726c1aab8654285bde44c18f5c72fda/ansimarkup-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16d75a03aa8636b128331bbaa2427ab9", "sha256": "9d78cf74fe6172b6dde5360918bed200c6393f8f171bb9ab3d4c6431abd342fb"}, "downloads": -1, "filename": "ansimarkup-0.1.1.tar.gz", "has_sig": false, "md5_digest": "16d75a03aa8636b128331bbaa2427ab9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5836, "upload_time": "2017-02-11T18:51:06", "upload_time_iso_8601": "2017-02-11T18:51:06.483548Z", "url": "https://files.pythonhosted.org/packages/ac/cb/adfa228c606b009ce1a41282c1af220752454e81fc131fbf89465482d295/ansimarkup-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c8d40ba93831c88241f0de30db9364c1", "sha256": "7bc72e67f66f450e51d94cecf0317ecf07886bfb3583abd3929a3b918831a4ab"}, "downloads": -1, "filename": "ansimarkup-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c8d40ba93831c88241f0de30db9364c1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 10210, "upload_time": "2017-02-12T14:03:44", "upload_time_iso_8601": "2017-02-12T14:03:44.694282Z", "url": "https://files.pythonhosted.org/packages/ba/39/c0cc42c11da7d41e371f41ddf1f213bebaf0d29b75d2eaeb235891e578b8/ansimarkup-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d3ba99c5309961f33aecb15430abd4c", "sha256": "081e85e6a3dfd914adf289e2fc1b1217d8e6bef24c4e5e6ae08af378ee3143df"}, "downloads": -1, "filename": "ansimarkup-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1d3ba99c5309961f33aecb15430abd4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7288, "upload_time": "2017-02-12T14:03:37", "upload_time_iso_8601": "2017-02-12T14:03:37.764579Z", "url": "https://files.pythonhosted.org/packages/0a/0a/5fe62e409f3c8e7440a8375097118f57e454c5782cbb4e178322ef2d3717/ansimarkup-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3016a00a20bfde669a2f89ecc555cc4f", "sha256": "ed8c2096f18ccc27f566625bd38f3d39c2d8aa67ae516a149fbfb0a86f6bf5fa"}, "downloads": -1, "filename": "ansimarkup-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3016a00a20bfde669a2f89ecc555cc4f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 11699, "upload_time": "2017-02-19T17:09:05", "upload_time_iso_8601": "2017-02-19T17:09:05.682574Z", "url": "https://files.pythonhosted.org/packages/70/8f/c6b4669bf584dc6fdda29d03b95363fa7587ff36000d91eb2f7d70c55801/ansimarkup-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6f34d0014b2b6d35c85cf968411217b", "sha256": "a8ac61a179a8cc700dd9f95a900c8dc43648f6db1530cc1874718b1f05c4de05"}, "downloads": -1, "filename": "ansimarkup-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a6f34d0014b2b6d35c85cf968411217b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8371, "upload_time": "2017-02-19T17:08:58", "upload_time_iso_8601": "2017-02-19T17:08:58.857728Z", "url": "https://files.pythonhosted.org/packages/38/de/f431759829ffae173263dafbfddb6c61c1492ce99ca276ad7683d784617a/ansimarkup-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a99536833b7ab0900a9bb0e8aab869c4", "sha256": "f76a1139b785bf223d870fa058d1cb55065f030f6b95100f73f3abc348f80c9c"}, "downloads": -1, "filename": "ansimarkup-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a99536833b7ab0900a9bb0e8aab869c4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 12164, "upload_time": "2017-04-02T12:48:44", "upload_time_iso_8601": "2017-04-02T12:48:44.808426Z", "url": "https://files.pythonhosted.org/packages/26/5d/604996e3abef7a75ebd08e0600fcb88d45bb67479743a59ecd23469a1087/ansimarkup-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dea3555e440cc6c524ae77699da7315a", "sha256": "81de4216f9327ebd93a5f6b0f17e5c99307e8f28eac9af1fdd187d0458a17b17"}, "downloads": -1, "filename": "ansimarkup-0.4.0.tar.gz", "has_sig": false, "md5_digest": "dea3555e440cc6c524ae77699da7315a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8734, "upload_time": "2017-04-02T12:48:40", "upload_time_iso_8601": "2017-04-02T12:48:40.873737Z", "url": "https://files.pythonhosted.org/packages/5e/3f/6bcb4e136f0fcd0c9883bd50b6f8351db2cd1a215bd3c638a0347516f149/ansimarkup-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "dce908680b82e3bf1da48386af452fb8", "sha256": "3b24274ad3d7009a18fe78ff13b6d3122edd02e64fb86a167d67f150862d5779"}, "downloads": -1, "filename": "ansimarkup-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dce908680b82e3bf1da48386af452fb8", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 12167, "upload_time": "2017-05-20T21:32:28", "upload_time_iso_8601": "2017-05-20T21:32:28.809505Z", "url": "https://files.pythonhosted.org/packages/1b/51/fcb5891ddbd77d90450202d1ec9636b76ae9b6c28dd95db9337d51357280/ansimarkup-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f6887de7ce51fbf38c024b6e8e798ee", "sha256": "e9a23a3c259acad157c69281e1733292b148e4308e78fd097842094943f53905"}, "downloads": -1, "filename": "ansimarkup-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1f6887de7ce51fbf38c024b6e8e798ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8756, "upload_time": "2017-05-20T21:32:21", "upload_time_iso_8601": "2017-05-20T21:32:21.825356Z", "url": "https://files.pythonhosted.org/packages/69/a1/1318c5a30b71d59194a4e01ff3a847fb755708a7f6ee976e5cc59651b984/ansimarkup-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ac1eb1024ffcde1aef643b1e1857c75f", "sha256": "e3d9216d01aea8a9a6a4d4f1f943c732705f0a01e13ab72bd66aac4c499a51da"}, "downloads": -1, "filename": "ansimarkup-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac1eb1024ffcde1aef643b1e1857c75f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12615, "upload_time": "2017-08-06T18:12:05", "upload_time_iso_8601": "2017-08-06T18:12:05.185243Z", "url": "https://files.pythonhosted.org/packages/1a/4d/2faa9cd5f6063904b6d3fa49abecf2d9f78843c3c6091fcf6d222b77473e/ansimarkup-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96754585f420a8ee9417d38de8a0c90a", "sha256": "6fd3a9bef886b07839f9b04501f4f82863aba439c8dae526585c082607574ef7"}, "downloads": -1, "filename": "ansimarkup-1.1.0.tar.gz", "has_sig": false, "md5_digest": "96754585f420a8ee9417d38de8a0c90a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9178, "upload_time": "2017-08-06T18:11:58", "upload_time_iso_8601": "2017-08-06T18:11:58.827857Z", "url": "https://files.pythonhosted.org/packages/dc/91/c376cac274f7fd042b96200a71f692609ad678166890b500887898ccd383/ansimarkup-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "24da24d2c5746dfef3a7e18e5e45dbff", "sha256": "6ee4cf2b35a2db6a408f95b5f778ffea314749dc3387eccc5285c967e6e70a9a"}, "downloads": -1, "filename": "ansimarkup-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "24da24d2c5746dfef3a7e18e5e45dbff", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12616, "upload_time": "2017-09-02T11:08:56", "upload_time_iso_8601": "2017-09-02T11:08:56.073676Z", "url": "https://files.pythonhosted.org/packages/1b/72/513e46fe5e6c4350aba0b8efb69568e8b3770ad85ba4f7b39404d2626833/ansimarkup-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ea680425bc28a069cc3f58b89d4369f", "sha256": "1910408423c1c22230cdd354947222c2b8ba7f855491f3d9f4c588b0f32c9a1a"}, "downloads": -1, "filename": "ansimarkup-1.2.0.tar.gz", "has_sig": false, "md5_digest": "2ea680425bc28a069cc3f58b89d4369f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9180, "upload_time": "2017-09-02T11:08:53", "upload_time_iso_8601": "2017-09-02T11:08:53.671316Z", "url": "https://files.pythonhosted.org/packages/de/2c/ae3d13ad85dc194e577c7720aed726d789fd26f5d9d150fd4ad32176b875/ansimarkup-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "bf5b5db6d0b63e1ef63006d901b3ff5a", "sha256": "1ed2f2551b63eb7847a3635d421a9f77e269dffa1eaf21529f689ea1ec162e97"}, "downloads": -1, "filename": "ansimarkup-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bf5b5db6d0b63e1ef63006d901b3ff5a", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 13046, "upload_time": "2017-09-09T13:28:00", "upload_time_iso_8601": "2017-09-09T13:28:00.988275Z", "url": "https://files.pythonhosted.org/packages/90/92/0a6a328ee09bd3cc57705769d0fcb2c9afb4c84ef9df3b7ee2d700793ad0/ansimarkup-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0db8500514235a8bd75a6dc1023dcae6", "sha256": "6e071a5cdb6824362f2b6a8699ab88e07114ba5e0d480a55e872b746b81c86ff"}, "downloads": -1, "filename": "ansimarkup-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0db8500514235a8bd75a6dc1023dcae6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9407, "upload_time": "2017-09-09T13:27:59", "upload_time_iso_8601": "2017-09-09T13:27:59.341700Z", "url": "https://files.pythonhosted.org/packages/a6/92/9aa2b983207dab0ca81bcaebe38954014d7ef35b649127432ba2c620a5a5/ansimarkup-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "e0bc6ad975cdd0c6dd752104ccf5dcf7", "sha256": "06365e3ef89a12734fc408b2449cb4642d5fe2e603e95e7296eff9e98a0fe0b4"}, "downloads": -1, "filename": "ansimarkup-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e0bc6ad975cdd0c6dd752104ccf5dcf7", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14454, "upload_time": "2018-04-25T21:38:18", "upload_time_iso_8601": "2018-04-25T21:38:18.355913Z", "url": "https://files.pythonhosted.org/packages/8f/3b/be9c9da51fc950c58f64221676f5d2972a4003dc4ac05642cb6d279a281a/ansimarkup-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30b1f5134206b08e025312b623ee7a2b", "sha256": "174d920481416cec8d5a707af542d6fba25a1df1c21d8996479c32ba453649a4"}, "downloads": -1, "filename": "ansimarkup-1.4.0.tar.gz", "has_sig": false, "md5_digest": "30b1f5134206b08e025312b623ee7a2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11325, "upload_time": "2018-04-25T21:38:16", "upload_time_iso_8601": "2018-04-25T21:38:16.728802Z", "url": "https://files.pythonhosted.org/packages/26/36/57272102d00be2f8c173c8ebdcff95eff067b486e3041fd7a0de71e91700/ansimarkup-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0bc6ad975cdd0c6dd752104ccf5dcf7", "sha256": "06365e3ef89a12734fc408b2449cb4642d5fe2e603e95e7296eff9e98a0fe0b4"}, "downloads": -1, "filename": "ansimarkup-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e0bc6ad975cdd0c6dd752104ccf5dcf7", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14454, "upload_time": "2018-04-25T21:38:18", "upload_time_iso_8601": "2018-04-25T21:38:18.355913Z", "url": "https://files.pythonhosted.org/packages/8f/3b/be9c9da51fc950c58f64221676f5d2972a4003dc4ac05642cb6d279a281a/ansimarkup-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30b1f5134206b08e025312b623ee7a2b", "sha256": "174d920481416cec8d5a707af542d6fba25a1df1c21d8996479c32ba453649a4"}, "downloads": -1, "filename": "ansimarkup-1.4.0.tar.gz", "has_sig": false, "md5_digest": "30b1f5134206b08e025312b623ee7a2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11325, "upload_time": "2018-04-25T21:38:16", "upload_time_iso_8601": "2018-04-25T21:38:16.728802Z", "url": "https://files.pythonhosted.org/packages/26/36/57272102d00be2f8c173c8ebdcff95eff067b486e3041fd7a0de71e91700/ansimarkup-1.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:02 2020"}