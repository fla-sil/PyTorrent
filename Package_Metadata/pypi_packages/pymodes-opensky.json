{"info": {"author": "Junzi Sun", "author_email": "j.sun-1@tudelft.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "The pyModeS interface for OpenSky Impala database\n==========================================================\n\nIntroduction\n---------------------\n\nThis Python library connects the `pyModeS <https://github.com/junzis/pyModeS>`_ decoder and OpenSky-network raw Mode-S data. It aims at making the Enhance Mode-S information form OpenSky network more accessible for researchers.\n\nThe library can automatically retrieve and download data in ``rollcall_replies_data4`` table from the `OpenSky Imapala database <https://opensky-network.org/data/impala>`_, and then decodes several common Mode-S Comm-B message types. Currently, follows Mode-S downlink reports are supported:\n\n**Enhanced Mode-S:**\n\n- BDS40: Selected vertical intention report\n- BDS50: Track and turn report\n- BDS60: Heading and speed report\n\n**Mode-S meteorological information:**\n\n- BDS44: Meteorological routine air report\n- BDS45: Meteorological hazard report\n\nIn addition, the library can also be used to query decoded ADS-B information from ``state_vectors_data4`` table from the OpenSky Impala database.\n\nTo further explore the Mode-S decoding and aircraft trajectory processing using open-source Python libraries, you may have a look at:\n\n- **junzis/pyModeS**: https://github.com/junzis/pyModeS\n- **xoolive/traffic**: https://github.com/xoolive/traffic\n\nInstall\n-----------------------\n\nIn order to successfully use this library, you need:\n\n**1. Get the ``pyModeS`` library**\n\nInstall the up-to-date pyModeS version from PyPI:\n\n.. code-block:: sh\n\n  $ pip install pyModeS --upgrade\n\nInstall this library:\n\n.. code-block:: sh\n\n  $ pip install pymodes-opensky\n  or\n  $ pip install git+https://github.com/junzis/pymodes-opensky\n\n\n\n**2. Obtain access to OpenSky Impala database**\n\nApply access at: https://opensky-network.org/data/impala. The user name and password will be used for the following configuration.\n\n\n**3. Configure OpenSky Impala login**\n\nThe first time you use this library, the following configuration file will be created:\n\n.. code-block::\n\n  ~/.config/pymodes_opensky/secret.conf\n\nwith the following content:\n\n.. code-block::\n\n  [default]\n  server = data.opensky-network.org\n  port = 2230\n  username =\n  password =\n\nFill in the empty ``username`` and ``password`` field with your OpenSky login.\n\n\nUse the library\n-----------------\n\nEHSHelper\n**********\n\nThe ``EHSHelper`` class allows the users to download and decode Enhanced Mode-S messages automatically.\n\nTo get the messages, the query requires an ICAO address (or a list of ICAO addresses), the start time, and the end time for the messages. By default, all BDS40, BDS50, and BDS60 messages are decoded. The results is represented in a pandas ``DataFrame``.\n\nAn example is shown as follows:\n\n.. code-block:: python\n\n  from pymodes_opensky import EHSHelper\n\n  ehs = EHSHelper()\n\n  df = ehs.get(\n      icao24=\"4844C6\",\n      start=\"2019-10-01 08:00:00\",\n      end=\"2019-10-01 08:10:00\",\n  )\n\nIt is also possible to decode a subset of EHS message types, by specify the BDS codes using ``require_bds()`` function. For example:\n\n.. code-block:: python\n\n  ehs.require_bds([\"BDS50\", \"BDS60\"])\n\n  df = ehs.get(\n      icao24=\"4844C6\",\n      start=\"2019-10-01 08:00:00\",\n      end=\"2019-10-01 08:10:00\",\n  )\n\n\nMeteoHelper\n************\n\nThe ``MeteoHelper`` class allows the users to download and decoded meteorological messages automatically. By default it provides information from BDS44 messages. Information from BDS45 messages can also be enable with ``include45=Ture`` switch.\n\nThe interface is similar to ``EHSHelper``, for example:\n\n.. code-block:: python\n\n  from pymodes_opensky import MeteoHelper\n\n  meteo = MeteoHelper()\n  df = meteo.get(\n      icao24=[\"49d304\", \"4007f9\"],\n      start=\"2018-07-19 15:00:00\",\n      end=\"2018-07-19 15:10:00\",\n      include45=True,\n  )\n\n\nOpenskyImpalaWrapper\n**********************\n\nAll previous queries are based on the ``OpenskyImpalaWrapper`` class from the library. The wrapper class can also be used independently to query OpenSky Imapala database. It can be used for raw messages, as wells as decoded ADS-B data by OpenSky.\n\n**Be aware!** The number of records can be massive without the ICAO filter. Thus the query can take a long time. To increase the query efficiency, please consider using a ICAO filter when possible.\n\nBy defined the query type as ``type=\"raw\"``, the raw Mode-S message can be obtained. For example:\n\n.. code-block:: python\n\n  from pymodes_opensky import OpenskyImpalaWrapper\n\n  opensky = OpenskyImpalaWrapper()\n\n  # Perform a simple and massive query (~20k records for 1 second here!)\n  df = opensky.query(\n      type=\"raw\", start=\"2018-07-01 13:00:00\", end=\"2018-07-01 13:00:01\"\n  )\n\n  # Perform a query with ICAO filter\n  df = opensky.query(\n      type=\"raw\",\n      start=\"2018-07-01 13:00:00\",\n      end=\"2018-07-01 13:00:10\",\n      icao24=[\"424588\", \"3c66a9\"],\n  )\n\nBy switching the query type from ``type=\"raw\"`` to ``type=\"adsb\"``, you can obtained the history ADS-B information in a similar way. You can also add a boundary (with format of ``[lat1, lon1, lat2, lon2]``) to the queries. For example:\n\n.. code-block:: python\n\n  from pymodes_opensky import OpenskyImpalaWrapper\n\n  opensky = OpenskyImpalaWrapper()\n\n  # Perform a simple and massive query (~25k records for 5 second here!)\n  df = opensky.query(\n      type=\"adsb\", start=\"2018-08-01 13:00:00\", end=\"2018-08-01 13:00:10\"\n  )\n\n  # Perform a query with ICAO address filter\n  df = opensky.query(\n      type=\"adsb\",\n      start=\"2018-07-01 13:00:00\",\n      end=\"2018-07-01 13:00:10\",\n      icao24=[\"424588\", \"3c66a9\"],\n      bound=[30, -20, 65, 20],\n  )\n\n\nMore examples\n--------------\n\nMore complete examples can be found in the ``test`` directory of this library.\n\n\nOther information\n-------------------\nIf you find this project useful for your research, please consider citing the following works:\n\n.. code-block:: bibtex\n\n  @inproceedings{sun2019integrating,\n    title={Integrating pyModeS and OpenSky Historical Database},\n    author={Sun, Junzi and Hoekstra, Jacco M},\n    booktitle={Proceedings of the 7th OpenSky Workshop},\n    volume={67},\n    pages={63--72},\n    year={2019}\n  }\n\n  @article{sun2019pymodes,\n      title={pyModeS: Decoding Mode-S Surveillance Data for Open Air Transportation Research},\n      author={J. {Sun} and H. {V\\^u} and J. {Ellerbroek} and J. M. {Hoekstra}},\n      journal={IEEE Transactions on Intelligent Transportation Systems},\n      year={2019},\n      doi={10.1109/TITS.2019.2914770},\n      ISSN={1524-9050},\n  }\n\n  @inproceedings{schafer2014opensky,\n    title={Bringing up OpenSky: A large-scale ADS-B sensor network for research},\n    author={Sch{\\\"a}fer, Matthias and Strohmeier, Martin and Lenders, Vincent and Martinovic, Ivan and Wilhelm, Matthias},\n    booktitle={Proceedings of the 13th international symposium on Information processing in sensor networks},\n    pages={83--94},\n    year={2014},\n    organization={IEEE Press}\n  }\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/junzis/pymodes-opensky", "keywords": "Mode-S pyModeS OpenSky", "license": "GNU GPL v3", "maintainer": "", "maintainer_email": "", "name": "pymodes-opensky", "package_url": "https://pypi.org/project/pymodes-opensky/", "platform": "", "project_url": "https://pypi.org/project/pymodes-opensky/", "project_urls": {"Homepage": "https://github.com/junzis/pymodes-opensky"}, "release_url": "https://pypi.org/project/pymodes-opensky/1.2/", "requires_dist": ["pandas", "paramiko", "pyModeS (>=2.0)"], "requires_python": "", "summary": "The pyModeS interface for OpenSky-network Impala database", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This Python library connects the <a href=\"https://github.com/junzis/pyModeS\" rel=\"nofollow\">pyModeS</a> decoder and OpenSky-network raw Mode-S data. It aims at making the Enhance Mode-S information form OpenSky network more accessible for researchers.</p>\n<p>The library can automatically retrieve and download data in <tt>rollcall_replies_data4</tt> table from the <a href=\"https://opensky-network.org/data/impala\" rel=\"nofollow\">OpenSky Imapala database</a>, and then decodes several common Mode-S Comm-B message types. Currently, follows Mode-S downlink reports are supported:</p>\n<p><strong>Enhanced Mode-S:</strong></p>\n<ul>\n<li>BDS40: Selected vertical intention report</li>\n<li>BDS50: Track and turn report</li>\n<li>BDS60: Heading and speed report</li>\n</ul>\n<p><strong>Mode-S meteorological information:</strong></p>\n<ul>\n<li>BDS44: Meteorological routine air report</li>\n<li>BDS45: Meteorological hazard report</li>\n</ul>\n<p>In addition, the library can also be used to query decoded ADS-B information from <tt>state_vectors_data4</tt> table from the OpenSky Impala database.</p>\n<p>To further explore the Mode-S decoding and aircraft trajectory processing using open-source Python libraries, you may have a look at:</p>\n<ul>\n<li><strong>junzis/pyModeS</strong>: <a href=\"https://github.com/junzis/pyModeS\" rel=\"nofollow\">https://github.com/junzis/pyModeS</a></li>\n<li><strong>xoolive/traffic</strong>: <a href=\"https://github.com/xoolive/traffic\" rel=\"nofollow\">https://github.com/xoolive/traffic</a></li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>In order to successfully use this library, you need:</p>\n<p><strong>1. Get the ``pyModeS`` library</strong></p>\n<p>Install the up-to-date pyModeS version from PyPI:</p>\n<pre>$ pip install pyModeS --upgrade\n</pre>\n<p>Install this library:</p>\n<pre>$ pip install pymodes-opensky\nor\n$ pip install git+https://github.com/junzis/pymodes-opensky\n</pre>\n<p><strong>2. Obtain access to OpenSky Impala database</strong></p>\n<p>Apply access at: <a href=\"https://opensky-network.org/data/impala\" rel=\"nofollow\">https://opensky-network.org/data/impala</a>. The user name and password will be used for the following configuration.</p>\n<p><strong>3. Configure OpenSky Impala login</strong></p>\n<p>The first time you use this library, the following configuration file will be created:</p>\n<pre>~/.config/pymodes_opensky/secret.conf\n</pre>\n<p>with the following content:</p>\n<pre>[default]\nserver = data.opensky-network.org\nport = 2230\nusername =\npassword =\n</pre>\n<p>Fill in the empty <tt>username</tt> and <tt>password</tt> field with your OpenSky login.</p>\n</div>\n<div id=\"use-the-library\">\n<h2>Use the library</h2>\n<div id=\"ehshelper\">\n<h3>EHSHelper</h3>\n<p>The <tt>EHSHelper</tt> class allows the users to download and decode Enhanced Mode-S messages automatically.</p>\n<p>To get the messages, the query requires an ICAO address (or a list of ICAO addresses), the start time, and the end time for the messages. By default, all BDS40, BDS50, and BDS60 messages are decoded. The results is represented in a pandas <tt>DataFrame</tt>.</p>\n<p>An example is shown as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymodes_opensky</span> <span class=\"kn\">import</span> <span class=\"n\">EHSHelper</span>\n\n<span class=\"n\">ehs</span> <span class=\"o\">=</span> <span class=\"n\">EHSHelper</span><span class=\"p\">()</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">ehs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n    <span class=\"n\">icao24</span><span class=\"o\">=</span><span class=\"s2\">\"4844C6\"</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2019-10-01 08:00:00\"</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2019-10-01 08:10:00\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>It is also possible to decode a subset of EHS message types, by specify the BDS codes using <tt>require_bds()</tt> function. For example:</p>\n<pre><span class=\"n\">ehs</span><span class=\"o\">.</span><span class=\"n\">require_bds</span><span class=\"p\">([</span><span class=\"s2\">\"BDS50\"</span><span class=\"p\">,</span> <span class=\"s2\">\"BDS60\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">ehs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n    <span class=\"n\">icao24</span><span class=\"o\">=</span><span class=\"s2\">\"4844C6\"</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2019-10-01 08:00:00\"</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2019-10-01 08:10:00\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"meteohelper\">\n<h3>MeteoHelper</h3>\n<p>The <tt>MeteoHelper</tt> class allows the users to download and decoded meteorological messages automatically. By default it provides information from BDS44 messages. Information from BDS45 messages can also be enable with <tt>include45=Ture</tt> switch.</p>\n<p>The interface is similar to <tt>EHSHelper</tt>, for example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymodes_opensky</span> <span class=\"kn\">import</span> <span class=\"n\">MeteoHelper</span>\n\n<span class=\"n\">meteo</span> <span class=\"o\">=</span> <span class=\"n\">MeteoHelper</span><span class=\"p\">()</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">meteo</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n    <span class=\"n\">icao24</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"49d304\"</span><span class=\"p\">,</span> <span class=\"s2\">\"4007f9\"</span><span class=\"p\">],</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-19 15:00:00\"</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-19 15:10:00\"</span><span class=\"p\">,</span>\n    <span class=\"n\">include45</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"openskyimpalawrapper\">\n<h3>OpenskyImpalaWrapper</h3>\n<p>All previous queries are based on the <tt>OpenskyImpalaWrapper</tt> class from the library. The wrapper class can also be used independently to query OpenSky Imapala database. It can be used for raw messages, as wells as decoded ADS-B data by OpenSky.</p>\n<p><strong>Be aware!</strong> The number of records can be massive without the ICAO filter. Thus the query can take a long time. To increase the query efficiency, please consider using a ICAO filter when possible.</p>\n<p>By defined the query type as <tt><span class=\"pre\">type=\"raw\"</span></tt>, the raw Mode-S message can be obtained. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymodes_opensky</span> <span class=\"kn\">import</span> <span class=\"n\">OpenskyImpalaWrapper</span>\n\n<span class=\"n\">opensky</span> <span class=\"o\">=</span> <span class=\"n\">OpenskyImpalaWrapper</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Perform a simple and massive query (~20k records for 1 second here!)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">opensky</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-01 13:00:00\"</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-01 13:00:01\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Perform a query with ICAO filter</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">opensky</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-01 13:00:00\"</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-01 13:00:10\"</span><span class=\"p\">,</span>\n    <span class=\"n\">icao24</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"424588\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3c66a9\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n<p>By switching the query type from <tt><span class=\"pre\">type=\"raw\"</span></tt> to <tt><span class=\"pre\">type=\"adsb\"</span></tt>, you can obtained the history ADS-B information in a similar way. You can also add a boundary (with format of <tt>[lat1, lon1, lat2, lon2]</tt>) to the queries. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymodes_opensky</span> <span class=\"kn\">import</span> <span class=\"n\">OpenskyImpalaWrapper</span>\n\n<span class=\"n\">opensky</span> <span class=\"o\">=</span> <span class=\"n\">OpenskyImpalaWrapper</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Perform a simple and massive query (~25k records for 5 second here!)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">opensky</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"adsb\"</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2018-08-01 13:00:00\"</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2018-08-01 13:00:10\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Perform a query with ICAO address filter</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">opensky</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"adsb\"</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-01 13:00:00\"</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"2018-07-01 13:00:10\"</span><span class=\"p\">,</span>\n    <span class=\"n\">icao24</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"424588\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3c66a9\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bound</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"more-examples\">\n<h2>More examples</h2>\n<p>More complete examples can be found in the <tt>test</tt> directory of this library.</p>\n</div>\n<div id=\"other-information\">\n<h2>Other information</h2>\n<p>If you find this project useful for your research, please consider citing the following works:</p>\n<pre><span class=\"nc\">@inproceedings</span><span class=\"p\">{</span><span class=\"nl\">sun2019integrating</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span><span class=\"p\">=</span><span class=\"s\">{Integrating pyModeS and OpenSky Historical Database}</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span><span class=\"p\">=</span><span class=\"s\">{Sun, Junzi and Hoekstra, Jacco M}</span><span class=\"p\">,</span>\n  <span class=\"na\">booktitle</span><span class=\"p\">=</span><span class=\"s\">{Proceedings of the 7th OpenSky Workshop}</span><span class=\"p\">,</span>\n  <span class=\"na\">volume</span><span class=\"p\">=</span><span class=\"s\">{67}</span><span class=\"p\">,</span>\n  <span class=\"na\">pages</span><span class=\"p\">=</span><span class=\"s\">{63--72}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span><span class=\"p\">=</span><span class=\"s\">{2019}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">@article</span><span class=\"p\">{</span><span class=\"nl\">sun2019pymodes</span><span class=\"p\">,</span>\n    <span class=\"na\">title</span><span class=\"p\">=</span><span class=\"s\">{pyModeS: Decoding Mode-S Surveillance Data for Open Air Transportation Research}</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">=</span><span class=\"s\">{J. {Sun} and H. {V\\^u} and J. {Ellerbroek} and J. M. {Hoekstra}}</span><span class=\"p\">,</span>\n    <span class=\"na\">journal</span><span class=\"p\">=</span><span class=\"s\">{IEEE Transactions on Intelligent Transportation Systems}</span><span class=\"p\">,</span>\n    <span class=\"na\">year</span><span class=\"p\">=</span><span class=\"s\">{2019}</span><span class=\"p\">,</span>\n    <span class=\"na\">doi</span><span class=\"p\">=</span><span class=\"s\">{10.1109/TITS.2019.2914770}</span><span class=\"p\">,</span>\n    <span class=\"na\">ISSN</span><span class=\"p\">=</span><span class=\"s\">{1524-9050}</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">@inproceedings</span><span class=\"p\">{</span><span class=\"nl\">schafer2014opensky</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span><span class=\"p\">=</span><span class=\"s\">{Bringing up OpenSky: A large-scale ADS-B sensor network for research}</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span><span class=\"p\">=</span><span class=\"s\">{Sch{\\\"a}fer, Matthias and Strohmeier, Martin and Lenders, Vincent and Martinovic, Ivan and Wilhelm, Matthias}</span><span class=\"p\">,</span>\n  <span class=\"na\">booktitle</span><span class=\"p\">=</span><span class=\"s\">{Proceedings of the 13th international symposium on Information processing in sensor networks}</span><span class=\"p\">,</span>\n  <span class=\"na\">pages</span><span class=\"p\">=</span><span class=\"s\">{83--94}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span><span class=\"p\">=</span><span class=\"s\">{2014}</span><span class=\"p\">,</span>\n  <span class=\"na\">organization</span><span class=\"p\">=</span><span class=\"s\">{IEEE Press}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7028101, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "f5adfce5e6f6a427f3e2710a507aefdc", "sha256": "aff34c7a9a75037391fe90e93ed193dd550a1a37d515a352194b7efd172a7636"}, "downloads": -1, "filename": "pymodes_opensky-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5adfce5e6f6a427f3e2710a507aefdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23163, "upload_time": "2019-08-08T20:48:13", "upload_time_iso_8601": "2019-08-08T20:48:13.143186Z", "url": "https://files.pythonhosted.org/packages/32/41/90e0051a7ab9f8fda0e6d0aa7e51e71f87191a411f889837f79756f972cf/pymodes_opensky-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "037483cf078c246d62c8e85cd4c4e5a3", "sha256": "10fe8b399c6d62f6b507f2f1721cd93e2d16f3d9bd95597576dabe6690d8a8da"}, "downloads": -1, "filename": "pymodes_opensky-1.0.tar.gz", "has_sig": false, "md5_digest": "037483cf078c246d62c8e85cd4c4e5a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12363, "upload_time": "2019-08-08T20:48:27", "upload_time_iso_8601": "2019-08-08T20:48:27.851973Z", "url": "https://files.pythonhosted.org/packages/d1/ad/8952c610530358e8965bb2aa621beab2d285c05ede54c530779268a3148d/pymodes_opensky-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "87d4993fbaeb6fd005be0ff63a9cf343", "sha256": "628546f1ff9462fb521b03727e12c175b717a24e0af8dfd8848e73f166d0cfa4"}, "downloads": -1, "filename": "pymodes_opensky-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87d4993fbaeb6fd005be0ff63a9cf343", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23699, "upload_time": "2020-03-27T22:02:51", "upload_time_iso_8601": "2020-03-27T22:02:51.901363Z", "url": "https://files.pythonhosted.org/packages/fc/fc/b8a051be1cef607f09412445f1b533673aa2475db7bfa1818688a21fc3e5/pymodes_opensky-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b88eb695609a9d9332f0c22ad0b62a9d", "sha256": "405e90da189924965b7d9b51ff5bae4a7eb62e3f96e0c6020924cd68759fcdd6"}, "downloads": -1, "filename": "pymodes_opensky-1.1.tar.gz", "has_sig": false, "md5_digest": "b88eb695609a9d9332f0c22ad0b62a9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13937, "upload_time": "2020-03-27T22:02:53", "upload_time_iso_8601": "2020-03-27T22:02:53.580604Z", "url": "https://files.pythonhosted.org/packages/cd/ea/df1be77ca0b82c462adbee523ec79dfed18c7972cb27f65c3281f0594be5/pymodes_opensky-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "3f56e5215559db0ad091bfcd1e1302e8", "sha256": "1190877c10070ac68c45b76b0995bfb577bacda239a40894e842341466119fa6"}, "downloads": -1, "filename": "pymodes_opensky-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3f56e5215559db0ad091bfcd1e1302e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24083, "upload_time": "2020-04-15T23:21:51", "upload_time_iso_8601": "2020-04-15T23:21:51.971393Z", "url": "https://files.pythonhosted.org/packages/df/e0/254c1f2163db38ba84617e99e72981b706c1102af88297a158b352fad3c0/pymodes_opensky-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6524ad3077b013ec82fd41ae483716e7", "sha256": "fae6c0c9a8d9b6a7f56a38b551bb32b6e218bac9a5d6bcd337bb121b73d6962f"}, "downloads": -1, "filename": "pymodes_opensky-1.2.tar.gz", "has_sig": false, "md5_digest": "6524ad3077b013ec82fd41ae483716e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14310, "upload_time": "2020-04-15T23:21:53", "upload_time_iso_8601": "2020-04-15T23:21:53.622770Z", "url": "https://files.pythonhosted.org/packages/cb/fb/09b0957929e0641824f994cd10a2123c1daeedb7993c79a40aa3bd7eee9d/pymodes_opensky-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f56e5215559db0ad091bfcd1e1302e8", "sha256": "1190877c10070ac68c45b76b0995bfb577bacda239a40894e842341466119fa6"}, "downloads": -1, "filename": "pymodes_opensky-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3f56e5215559db0ad091bfcd1e1302e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24083, "upload_time": "2020-04-15T23:21:51", "upload_time_iso_8601": "2020-04-15T23:21:51.971393Z", "url": "https://files.pythonhosted.org/packages/df/e0/254c1f2163db38ba84617e99e72981b706c1102af88297a158b352fad3c0/pymodes_opensky-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6524ad3077b013ec82fd41ae483716e7", "sha256": "fae6c0c9a8d9b6a7f56a38b551bb32b6e218bac9a5d6bcd337bb121b73d6962f"}, "downloads": -1, "filename": "pymodes_opensky-1.2.tar.gz", "has_sig": false, "md5_digest": "6524ad3077b013ec82fd41ae483716e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14310, "upload_time": "2020-04-15T23:21:53", "upload_time_iso_8601": "2020-04-15T23:21:53.622770Z", "url": "https://files.pythonhosted.org/packages/cb/fb/09b0957929e0641824f994cd10a2123c1daeedb7993c79a40aa3bd7eee9d/pymodes_opensky-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:56 2020"}