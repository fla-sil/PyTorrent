{"info": {"author": "Michael Kerrin", "author_email": "zope3-users@zope.org", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python"], "description": "===================\nz3c.condtionalviews\n===================\n\nz3c.conditionalviews is a mechanism to validate a HTTP request based on some\nconditional protocol like entity tags, or last modification date. It is also\nextensible so that protocols like WebDAV can define there own conditional\nprotocol like the IF header.\n\nIt works by implementing each conditional protocol as a `IHTTPValidator`\nutility, see etag and lastmodification modules for the most common use cases.\nThen when certain views are called by the publisher we lookup these utilities\nand ask them to validate the request object according to whatever protocol\nthe utility implements.\n\nAt the time of the view is called, and when we validate the request, we\ngenerally have access to the context, request and view itself. So the\n`IHTTPValidator` utilities generally adapt these 3 objects to an object\nimplementing an interface specific to the protocol in question. For example\nthe entity tag validator looks up an adapter implementing `IEtag`.\n\nIntegration with Zope\n=====================\n\n  >>> import zope.component\n  >>> import zope.interface\n  >>> import z3c.conditionalviews.interfaces\n  >>> import z3c.conditionalviews.tests\n\nDecorator\n---------\n\nIn order to integrate common browser views that can be cached, we can decorate\nthe views call method with the `z3c.conditionalviews.ConditionalView` object.\nNote that all the views used in this test are defined in the ftesting.zcml\nfile.\n\n  >>> response = http(r\"\"\"\n  ... GET /@@simpleview.html HTTP/1.1\n  ... Host: localhost\n  ... \"\"\", handle_errors = False)\n  >>> response.getStatus()\n  200\n  >>> response.getHeader('content-length')\n  '82'\n  >>> response.getHeader('content-type')\n  'text/plain'\n  >>> print response.getBody()\n  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nSince we haven't yet defined an adapter implementing IETag, the response\ncontains no ETag header.\n\n  >>> response.getHeader('ETag') is None\n  True\n\nDefine our IETag implementation.\n\n  >>> class SimpleEtag(object):\n  ...    zope.interface.implements(z3c.conditionalviews.interfaces.IETag)\n  ...    def __init__(self, context, request, view):\n  ...        pass\n  ...    weak = False\n  ...    etag = \"3d32b-211-bab57a40\"\n\n  >>> zope.component.getGlobalSiteManager().registerAdapter(\n  ...    SimpleEtag,\n  ...    (zope.interface.Interface,\n  ...     zope.publisher.interfaces.browser.IBrowserRequest,\n  ...     zope.interface.Interface))\n\n  >>> response = http(r\"\"\"\n  ... GET /@@simpleview.html HTTP/1.1\n  ... Host: localhost\n  ... \"\"\", handle_errors = False)\n  >>> response.getStatus()\n  200\n  >>> response.getHeader('content-length')\n  '82'\n  >>> response.getHeader('content-type')\n  'text/plain'\n  >>> response.getHeader('ETag')\n  '\"3d32b-211-bab57a40\"'\n  >>> print response.getBody()\n  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nNow by setting the request header If-None-Match: \"3d32b-211-bab57a40\", our\nview fails the validation and a 304 response is returned.\n\n  >>> response = http(r\"\"\"\n  ... GET /@@simpleview.html HTTP/1.1\n  ... Host: localhost\n  ... If-None-Match: \"3d32b-211-bab57a40\"\n  ... \"\"\", handle_errors = False)\n  >>> response.getStatus()\n  304\n  >>> response.getHeader('ETag')\n  '\"3d32b-211-bab57a40\"'\n  >>> response.getBody()\n  ''\n\nXXX - this seems wrong the content-length and content-type should not be set\nfor this response.\n\n  >>> response.getHeader('content-length')\n  '0'\n  >>> response.getHeader('content-type')\n  'text/plain'\n\nNow make sure that we haven't broken the publisher, by making sure that we\ncan still pass arguments to the different views.\n\n  >>> response = http(r\"\"\"\n  ... GET /@@simpleview.html?letter=y HTTP/1.1\n  ... Host: localhost\n  ... \"\"\", handle_errors = False)\n  >>> response.getStatus()\n  200\n  >>> response.getHeader('content-length')\n  '82'\n  >>> print response.getBody()\n  yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n  yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n\nWe are now getting a charset value for this request because the default\nvalue for the SimpleView is not a unicode string, while the data received\nfrom the request is automatically converted to unicode by default.\n\n  >>> response.getHeader('content-type')\n  'text/plain;charset=utf-8'\n\nSince there is a query string present in the request, we don't set the ETag\nheader.\n\n  >>> response.getHeader('ETag') is None\n  True\n\nThe query string present in the following request causes the request to\nbe valid, otherwise it would be invalid.\n\n  >>> response = http(r\"\"\"\n  ... GET /@@simpleview.html?letter=y HTTP/1.1\n  ... If-None-Match: \"3d32b-211-bab57a40\"\n  ... Host: localhost\n  ... \"\"\", handle_errors = False)\n  >>> response.getStatus()\n  200\n\nGeneric HTTP conditional publication\n====================================\n\nWe can integrate the validation method with the publication call method. This\nas the effect of trying to validate every request that passes through the\npublications `callObject` method. This is useful to validate requests that\nmodify objects so that the client can say modify this resource if it hasn't\nchanged since it last downloaded the resource, or if there is no existing\nresource at a location.\n\nThis has the added benifit in that we don't have to specify how some one\nimplements the PUT method.\n\n  >>> resp = http(r\"\"\"\n  ... PUT /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: text/plain\n  ... Content-length: 55\n  ... aaaaaaaaaa\n  ... aaaaaaaaaa\n  ... aaaaaaaaaa\n  ... aaaaaaaaaa\n  ... aaaaaaaaaa\"\"\", handle_errors = False)\n  >>> resp.getStatus()\n  201\n  >>> resp.getHeader('Content-length')\n  '0'\n  >>> resp.getHeader('Location')\n  'http://localhost/testfile'\n  >>> resp.getHeader('ETag', None) is None\n  True\n \nWe can now get the resource and the entity tag.\n\n  >>> resp = http(r\"\"\"\n  ... GET /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n  >>> resp.getHeader('ETag')\n  '\"testfile:1\"'\n  >>> print resp.getBody()\n  aaaaaaaaaa\n  aaaaaaaaaa\n  aaaaaaaaaa\n  aaaaaaaaaa\n  aaaaaaaaaa\n\nWe could have used the HEAD method to get the entity tag.\n\n  >>> resp = http(r\"\"\"\n  ... HEAD /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n  >>> resp.getHeader('ETag')\n  '\"testfile:1\"'\n\nWith no 'If-None-Match' header we override the data.\n\n  >>> resp = http(r\"\"\"\n  ... PUT /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... Content-type: text/plain\n  ... Content-length: 55\n  ... bbbbbbbbbb\n  ... bbbbbbbbbb\n  ... bbbbbbbbbb\n  ... bbbbbbbbbb\n  ... bbbbbbbbbb\"\"\", handle_errors = False)\n  >>> resp.getStatus()\n  200\n  >>> resp.getHeader('Content-length')\n  '0'\n  >>> resp.getHeader('Location', None) is None\n  True\n  >>> resp.getHeader('ETag')\n  '\"testfile:2\"'\n\n  >>> resp = http(r\"\"\"\n  ... GET /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n  >>> print resp.getBody()\n  bbbbbbbbbb\n  bbbbbbbbbb\n  bbbbbbbbbb\n  bbbbbbbbbb\n  bbbbbbbbbb\n\nSpecifying a `If-None-Match: \"*\"` header, says to upload the data only if there\nis no resource at the location specified in the request URI. If there is a\nresource at the location then a `412 Precondition Failed` response is\nreturned and the resource is not modified'\n\n  >>> resp = http(r\"\"\"\n  ... PUT /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... If-None-Match: \"*\"\n  ... Content-type: text/plain\n  ... Content-length: 55\n  ... cccccccccc\n  ... cccccccccc\n  ... cccccccccc\n  ... cccccccccc\n  ... cccccccccc\"\"\")\n  >>> resp.getStatus()\n  412\n  >>> resp.getHeader('Content-length')\n  '0'\n  >>> resp.getHeader('Location', None) is None\n  True\n  >>> resp.getHeader('ETag')\n  '\"testfile:2\"'\n\nThe file does not change.\n\n  >>> resp = http(r\"\"\"\n  ... GET /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n  >>> print resp.getBody()\n  bbbbbbbbbb\n  bbbbbbbbbb\n  bbbbbbbbbb\n  bbbbbbbbbb\n  bbbbbbbbbb\n\nAnd now since testfile2 does exist yet we content the content.\n\n  >>> resp = http(r\"\"\"\n  ... PUT /testfile2 HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... If-None-Match: \"*\"\n  ... Content-type: text/plain\n  ... Content-length: 55\n  ... yyyyyyyyyy\n  ... yyyyyyyyyy\n  ... yyyyyyyyyy\n  ... yyyyyyyyyy\n  ... yyyyyyyyyy\"\"\")\n  >>> resp.getStatus()\n  201\n  >>> resp.getHeader('Content-length')\n  '0'\n  >>> resp.getHeader('Location')\n  'http://localhost/testfile2'\n  >>> resp.getHeader('ETag', None) is None # No etag adapter is configured\n  True\n\n  >>> resp = http(r\"\"\"\n  ... GET /testfile2 HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n  >>> print resp.getBody()\n  yyyyyyyyyy\n  yyyyyyyyyy\n  yyyyyyyyyy\n  yyyyyyyyyy\n  yyyyyyyyyy\n\nWe can now delete the resource, only if it hasn't changed. So for the\n'/testfile' resource we can use its first entity tag to confirm this.\n\n  >>> resp = http(r\"\"\"\n  ... DELETE /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... If-Match: \"testfile:1\"\n  ... \"\"\")\n  >>> resp.getStatus()\n  412\n\nAnd the file still exists.\n\n  >>> resp = http(r\"\"\"\n  ... GET /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n\nBut using a valid entity tag we can delete the resource.\n\n  >>> resp = http(r\"\"\"\n  ... DELETE /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... If-Match: \"testfile:2\"\n  ... \"\"\")\n  >>> resp.getStatus()\n  200\n  >>> resp.getBody()\n  ''\n\n  >>> resp = http(r\"\"\"\n  ... GET /testfile HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  404\n\nMethod not allowed\n==================\n\nWe should still get a `405 Method Not Allowed` status for methods that aren't\nregistered yet.\n\nWe need to be logged in order to traverse to the file.\n\n  >>> resp = http(r\"\"\"\n  ... FROG /testfile2 HTTP/1.1\n  ... Authorization: Basic mgr:mgrpw\n  ... \"\"\")\n  >>> resp.getStatus()\n  405\n  >>> resp.getHeader('ETag', None) is None\n  True\n\nCleanup\n=======\n\n  >>> zope.component.getGlobalSiteManager().unregisterAdapter(\n  ...    SimpleEtag,\n  ...    (zope.interface.Interface,\n  ...     zope.publisher.interfaces.browser.IBrowserRequest,\n  ...     zope.interface.Interface))\n  True\n\n\n===============================\nChanges in z3c.conditionalviews\n===============================\n\n1.0 (2008-09-27)\n================\n\n- Using IDCTimes instead of IZopeDublinCore because IDCTimes is the actual\n  required interface.\n\n\n1.0b\n====\n\n- Fixed time zone issue in processing `If-Modified` protocol.\n\n0.9\n===\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.zope.org/z3c.conditionalviews/", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.conditionalviews", "package_url": "https://pypi.org/project/z3c.conditionalviews/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.conditionalviews/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.zope.org/z3c.conditionalviews/"}, "release_url": "https://pypi.org/project/z3c.conditionalviews/1.0/", "requires_dist": null, "requires_python": null, "summary": "This package intergrates with the zope publisher to validate conditional\nrequests based on the `If-None-Match`, `If-Match`, and `If-Modified-Since`,\n`If-UnModifiedSince` protocols.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"z3c-condtionalviews\">\n<h2>z3c.condtionalviews</h2>\n<p>z3c.conditionalviews is a mechanism to validate a HTTP request based on some\nconditional protocol like entity tags, or last modification date. It is also\nextensible so that protocols like WebDAV can define there own conditional\nprotocol like the IF header.</p>\n<p>It works by implementing each conditional protocol as a <cite>IHTTPValidator</cite>\nutility, see etag and lastmodification modules for the most common use cases.\nThen when certain views are called by the publisher we lookup these utilities\nand ask them to validate the request object according to whatever protocol\nthe utility implements.</p>\n<p>At the time of the view is called, and when we validate the request, we\ngenerally have access to the context, request and view itself. So the\n<cite>IHTTPValidator</cite> utilities generally adapt these 3 objects to an object\nimplementing an interface specific to the protocol in question. For example\nthe entity tag validator looks up an adapter implementing <cite>IEtag</cite>.</p>\n<div id=\"integration-with-zope\">\n<h3>Integration with Zope</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; import z3c.conditionalviews.interfaces\n&gt;&gt;&gt; import z3c.conditionalviews.tests\n</pre>\n</blockquote>\n<div id=\"decorator\">\n<h4>Decorator</h4>\n<p>In order to integrate common browser views that can be cached, we can decorate\nthe views call method with the <cite>z3c.conditionalviews.ConditionalView</cite> object.\nNote that all the views used in this test are defined in the ftesting.zcml\nfile.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response = http(r\"\"\"\n... GET /@@simpleview.html HTTP/1.1\n... Host: localhost\n... \"\"\", handle_errors = False)\n&gt;&gt;&gt; response.getStatus()\n200\n&gt;&gt;&gt; response.getHeader('content-length')\n'82'\n&gt;&gt;&gt; response.getHeader('content-type')\n'text/plain'\n&gt;&gt;&gt; print response.getBody()\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</pre>\n</blockquote>\n<p>Since we haven\u2019t yet defined an adapter implementing IETag, the response\ncontains no ETag header.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response.getHeader('ETag') is None\nTrue\n</pre>\n</blockquote>\n<p>Define our IETag implementation.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class SimpleEtag(object):\n...    zope.interface.implements(z3c.conditionalviews.interfaces.IETag)\n...    def __init__(self, context, request, view):\n...        pass\n...    weak = False\n...    etag = \"3d32b-211-bab57a40\"\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getGlobalSiteManager().registerAdapter(\n...    SimpleEtag,\n...    (zope.interface.Interface,\n...     zope.publisher.interfaces.browser.IBrowserRequest,\n...     zope.interface.Interface))\n</pre>\n<pre>&gt;&gt;&gt; response = http(r\"\"\"\n... GET /@@simpleview.html HTTP/1.1\n... Host: localhost\n... \"\"\", handle_errors = False)\n&gt;&gt;&gt; response.getStatus()\n200\n&gt;&gt;&gt; response.getHeader('content-length')\n'82'\n&gt;&gt;&gt; response.getHeader('content-type')\n'text/plain'\n&gt;&gt;&gt; response.getHeader('ETag')\n'\"3d32b-211-bab57a40\"'\n&gt;&gt;&gt; print response.getBody()\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</pre>\n</blockquote>\n<p>Now by setting the request header If-None-Match: \u201c3d32b-211-bab57a40\u201d, our\nview fails the validation and a 304 response is returned.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response = http(r\"\"\"\n... GET /@@simpleview.html HTTP/1.1\n... Host: localhost\n... If-None-Match: \"3d32b-211-bab57a40\"\n... \"\"\", handle_errors = False)\n&gt;&gt;&gt; response.getStatus()\n304\n&gt;&gt;&gt; response.getHeader('ETag')\n'\"3d32b-211-bab57a40\"'\n&gt;&gt;&gt; response.getBody()\n''\n</pre>\n</blockquote>\n<p>XXX - this seems wrong the content-length and content-type should not be set\nfor this response.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response.getHeader('content-length')\n'0'\n&gt;&gt;&gt; response.getHeader('content-type')\n'text/plain'\n</pre>\n</blockquote>\n<p>Now make sure that we haven\u2019t broken the publisher, by making sure that we\ncan still pass arguments to the different views.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response = http(r\"\"\"\n... GET /@@simpleview.html?letter=y HTTP/1.1\n... Host: localhost\n... \"\"\", handle_errors = False)\n&gt;&gt;&gt; response.getStatus()\n200\n&gt;&gt;&gt; response.getHeader('content-length')\n'82'\n&gt;&gt;&gt; print response.getBody()\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n</pre>\n</blockquote>\n<p>We are now getting a charset value for this request because the default\nvalue for the SimpleView is not a unicode string, while the data received\nfrom the request is automatically converted to unicode by default.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response.getHeader('content-type')\n'text/plain;charset=utf-8'\n</pre>\n</blockquote>\n<p>Since there is a query string present in the request, we don\u2019t set the ETag\nheader.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response.getHeader('ETag') is None\nTrue\n</pre>\n</blockquote>\n<p>The query string present in the following request causes the request to\nbe valid, otherwise it would be invalid.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; response = http(r\"\"\"\n... GET /@@simpleview.html?letter=y HTTP/1.1\n... If-None-Match: \"3d32b-211-bab57a40\"\n... Host: localhost\n... \"\"\", handle_errors = False)\n&gt;&gt;&gt; response.getStatus()\n200\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"generic-http-conditional-publication\">\n<h3>Generic HTTP conditional publication</h3>\n<p>We can integrate the validation method with the publication call method. This\nas the effect of trying to validate every request that passes through the\npublications <cite>callObject</cite> method. This is useful to validate requests that\nmodify objects so that the client can say modify this resource if it hasn\u2019t\nchanged since it last downloaded the resource, or if there is no existing\nresource at a location.</p>\n<p>This has the added benifit in that we don\u2019t have to specify how some one\nimplements the PUT method.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... PUT /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... Content-type: text/plain\n... Content-length: 55\n... aaaaaaaaaa\n... aaaaaaaaaa\n... aaaaaaaaaa\n... aaaaaaaaaa\n... aaaaaaaaaa\"\"\", handle_errors = False)\n&gt;&gt;&gt; resp.getStatus()\n201\n&gt;&gt;&gt; resp.getHeader('Content-length')\n'0'\n&gt;&gt;&gt; resp.getHeader('Location')\n'http://localhost/testfile'\n&gt;&gt;&gt; resp.getHeader('ETag', None) is None\nTrue\n</pre>\n</blockquote>\n<p>We can now get the resource and the entity tag.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... GET /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; resp.getHeader('ETag')\n'\"testfile:1\"'\n&gt;&gt;&gt; print resp.getBody()\naaaaaaaaaa\naaaaaaaaaa\naaaaaaaaaa\naaaaaaaaaa\naaaaaaaaaa\n</pre>\n</blockquote>\n<p>We could have used the HEAD method to get the entity tag.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... HEAD /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; resp.getHeader('ETag')\n'\"testfile:1\"'\n</pre>\n</blockquote>\n<p>With no \u2018If-None-Match\u2019 header we override the data.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... PUT /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... Content-type: text/plain\n... Content-length: 55\n... bbbbbbbbbb\n... bbbbbbbbbb\n... bbbbbbbbbb\n... bbbbbbbbbb\n... bbbbbbbbbb\"\"\", handle_errors = False)\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; resp.getHeader('Content-length')\n'0'\n&gt;&gt;&gt; resp.getHeader('Location', None) is None\nTrue\n&gt;&gt;&gt; resp.getHeader('ETag')\n'\"testfile:2\"'\n</pre>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... GET /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; print resp.getBody()\nbbbbbbbbbb\nbbbbbbbbbb\nbbbbbbbbbb\nbbbbbbbbbb\nbbbbbbbbbb\n</pre>\n</blockquote>\n<p>Specifying a <cite>If-None-Match: \u201c*\u201d</cite> header, says to upload the data only if there\nis no resource at the location specified in the request URI. If there is a\nresource at the location then a <cite>412 Precondition Failed</cite> response is\nreturned and the resource is not modified\u2019</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... PUT /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... If-None-Match: \"*\"\n... Content-type: text/plain\n... Content-length: 55\n... cccccccccc\n... cccccccccc\n... cccccccccc\n... cccccccccc\n... cccccccccc\"\"\")\n&gt;&gt;&gt; resp.getStatus()\n412\n&gt;&gt;&gt; resp.getHeader('Content-length')\n'0'\n&gt;&gt;&gt; resp.getHeader('Location', None) is None\nTrue\n&gt;&gt;&gt; resp.getHeader('ETag')\n'\"testfile:2\"'\n</pre>\n</blockquote>\n<p>The file does not change.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... GET /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; print resp.getBody()\nbbbbbbbbbb\nbbbbbbbbbb\nbbbbbbbbbb\nbbbbbbbbbb\nbbbbbbbbbb\n</pre>\n</blockquote>\n<p>And now since testfile2 does exist yet we content the content.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... PUT /testfile2 HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... If-None-Match: \"*\"\n... Content-type: text/plain\n... Content-length: 55\n... yyyyyyyyyy\n... yyyyyyyyyy\n... yyyyyyyyyy\n... yyyyyyyyyy\n... yyyyyyyyyy\"\"\")\n&gt;&gt;&gt; resp.getStatus()\n201\n&gt;&gt;&gt; resp.getHeader('Content-length')\n'0'\n&gt;&gt;&gt; resp.getHeader('Location')\n'http://localhost/testfile2'\n&gt;&gt;&gt; resp.getHeader('ETag', None) is None # No etag adapter is configured\nTrue\n</pre>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... GET /testfile2 HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; print resp.getBody()\nyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy\nyyyyyyyyyy\n</pre>\n</blockquote>\n<p>We can now delete the resource, only if it hasn\u2019t changed. So for the\n\u2018/testfile\u2019 resource we can use its first entity tag to confirm this.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... DELETE /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... If-Match: \"testfile:1\"\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n412\n</pre>\n</blockquote>\n<p>And the file still exists.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... GET /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n</pre>\n</blockquote>\n<p>But using a valid entity tag we can delete the resource.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... DELETE /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... If-Match: \"testfile:2\"\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n200\n&gt;&gt;&gt; resp.getBody()\n''\n</pre>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... GET /testfile HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n404\n</pre>\n</blockquote>\n</div>\n<div id=\"method-not-allowed\">\n<h3>Method not allowed</h3>\n<p>We should still get a <cite>405 Method Not Allowed</cite> status for methods that aren\u2019t\nregistered yet.</p>\n<p>We need to be logged in order to traverse to the file.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; resp = http(r\"\"\"\n... FROG /testfile2 HTTP/1.1\n... Authorization: Basic mgr:mgrpw\n... \"\"\")\n&gt;&gt;&gt; resp.getStatus()\n405\n&gt;&gt;&gt; resp.getHeader('ETag', None) is None\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"cleanup\">\n<h3>Cleanup</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.getGlobalSiteManager().unregisterAdapter(\n...    SimpleEtag,\n...    (zope.interface.Interface,\n...     zope.publisher.interfaces.browser.IBrowserRequest,\n...     zope.interface.Interface))\nTrue\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes-in-z3c-conditionalviews\">\n<h2>Changes in z3c.conditionalviews</h2>\n<div id=\"id1\">\n<h3>1.0 (2008-09-27)</h3>\n<ul>\n<li>Using IDCTimes instead of IZopeDublinCore because IDCTimes is the actual\nrequired interface.</li>\n</ul>\n</div>\n<div id=\"b\">\n<h3>1.0b</h3>\n<ul>\n<li>Fixed time zone issue in processing <cite>If-Modified</cite> protocol.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.9</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 802004, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "f27d5f818d0e1447276f2dadccb4739f", "sha256": "56b9bc479689aebd5929fefff455ea65ed3cd83ce01333a1bc41bf02ff67afee"}, "downloads": -1, "filename": "z3c.conditionalviews-0.9.tar.gz", "has_sig": false, "md5_digest": "f27d5f818d0e1447276f2dadccb4739f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13815, "upload_time": "2007-07-02T18:16:47", "upload_time_iso_8601": "2007-07-02T18:16:47Z", "url": "https://files.pythonhosted.org/packages/b7/7b/1dfe705613f137da4d2a34ffea51bd219efe1c1ef574ccf44d6c2f1238ba/z3c.conditionalviews-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "6f659472e8b941580b06704ee8ec7633", "sha256": "ce632a610181976c673216abe0b7b50525bd43efd24986e6477a7ca6037f2ea9"}, "downloads": -1, "filename": "z3c.conditionalviews-1.0.tar.gz", "has_sig": false, "md5_digest": "6f659472e8b941580b06704ee8ec7633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16278, "upload_time": "2008-09-27T09:56:00", "upload_time_iso_8601": "2008-09-27T09:56:00Z", "url": "https://files.pythonhosted.org/packages/b7/0f/2ae3036dd12441ed9b092f7dea542f63cc862b857d583569ad6ab7ea9552/z3c.conditionalviews-1.0.tar.gz", "yanked": false}], "1.0b": [{"comment_text": "", "digests": {"md5": "543e77a7c01d1f96acc645d2312407c4", "sha256": "c7b9c60b3247cfabf6c4e45f1bd6ccff5fe00cb8924dae2b4737d40b5736e679"}, "downloads": -1, "filename": "z3c.conditionalviews-1.0b.tar.gz", "has_sig": false, "md5_digest": "543e77a7c01d1f96acc645d2312407c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13957, "upload_time": "2007-07-10T12:39:22", "upload_time_iso_8601": "2007-07-10T12:39:22Z", "url": "https://files.pythonhosted.org/packages/54/e2/0925379c34fcd828b587da0ee5c5b4909ee7a249cb823b79254abf10955b/z3c.conditionalviews-1.0b.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "a21422022b070871213369dde0127938", "sha256": "faacaf254ca96f144e460a8ed7727129a1e4405d636dda766286645665526365"}, "downloads": -1, "filename": "z3c.conditionalviews-1.0b1.tar.gz", "has_sig": false, "md5_digest": "a21422022b070871213369dde0127938", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16109, "upload_time": "2008-02-25T19:06:38", "upload_time_iso_8601": "2008-02-25T19:06:38Z", "url": "https://files.pythonhosted.org/packages/5b/0d/34946191fde0f413d26696097220c3e3aec98abc7a6dfc5ab27503faff48/z3c.conditionalviews-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f659472e8b941580b06704ee8ec7633", "sha256": "ce632a610181976c673216abe0b7b50525bd43efd24986e6477a7ca6037f2ea9"}, "downloads": -1, "filename": "z3c.conditionalviews-1.0.tar.gz", "has_sig": false, "md5_digest": "6f659472e8b941580b06704ee8ec7633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16278, "upload_time": "2008-09-27T09:56:00", "upload_time_iso_8601": "2008-09-27T09:56:00Z", "url": "https://files.pythonhosted.org/packages/b7/0f/2ae3036dd12441ed9b092f7dea542f63cc862b857d583569ad6ab7ea9552/z3c.conditionalviews-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:08 2020"}