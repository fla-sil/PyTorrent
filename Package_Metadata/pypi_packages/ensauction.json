{"info": {"author": "Jason Carver", "author_email": "ut96caarrs@snkmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Database :: Front-Ends", "Topic :: Internet :: Finger", "Topic :: Internet :: Name Service (DNS)", "Topic :: Security :: Cryptography", "Topic :: System :: Distributed Computing", "Topic :: System :: Systems Administration :: Authentication/Directory", "Topic :: Utilities"], "description": "Bid on '.eth' ENS names with Python\n===================================\n\n|Join the chat at https://gitter.im/ens-py/Lobby|\n\nAccess the Ethereum Name Service Auction using this python library.\nNote: **this is a work in progress**\n\nUsing this library is not a way to skip learning how ENS works. If you\nare registering a name, a small misunderstanding can cause you to lose\n**all** your deposit. Go `read about\nENS <http://docs.ens.domains/en/latest/userguide.html>`__ first. Your\nfunds are your responsibility.\n\nBeta-quality warning\n--------------------\n\nThis is a preview for developers, and an invitation for contributions.\nPlease do not use this in production until this warning is removed,\nespecially when putting funds at risk. Examples of funds being at risk\ninclude: sending ether/tokens to resolved addresses and participating in\nname auctions.\n\nIf you supply the a domain with type ``bytes``, it will be assumed to be\nUTF-8 encoded, like in `Ethereum\ncontracts <https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding>`__.\n\nSetup\n-----\n\n::\n\n    pip install ensauction\n\nAny issues? See `Setup details <#setup-details>`__\n\nUsage\n-----\n\nAll examples in Python 3\n\nAuctions for names ending in .eth\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGet auction status\n^^^^^^^^^^^^^^^^^^\n\nExample with domain 'payment.eth':\n\n.. code:: py\n\n    from ensauction.auto import ethnames\n    from ensauction.registrar import Status\n\n    status = ethnames.status('payment.eth')\n\n| If you get an error here, like: > UnhandledRequest: No providers\n  responded to the RPC request:\n| method:eth\\_getBlockByNumber\n| params:['latest', False]\n\nThen you are not connected to your node. See below `how to manually\nconnect to your node <#optionally-a-custom-web3-provider>`__.\n\nOtherwise, continue...\n\n.. code:: py\n\n    # if you forget to strip out .eth, ens.py will do it for you\n    assert ethnames.status('payment') == status\n\n    # these are the possible statuses\n\n    assert status in (\n      Status.Open,\n      Status.Auctioning,\n      Status.Owned,\n      Status.Forbidden,\n      Status.Revealing,\n      Status.NotYetAvailable\n      )\n\n\n    # if you get the integer status from another source, you can compare it directly\n\n    assert Status.Owned == 2\n\nStart auctions\n^^^^^^^^^^^^^^\n\n.. code:: py\n\n    # start one auction (which tips people off that you're interested)\n\n    ethnames.start('you_saw_him_repressin_me_didnt_ya')\n\n\n    # start many auctions (which provides a bit of cover)\n\n    ethnames.start(['exchange', 'tickets', 'payment', 'trading', 'registry'])\n\nBid on auction\n^^^^^^^^^^^^^^\n\nBid on a 'trading.eth' with 5211 ETH, and secret \"I promise I will not\nforget my secret\":\n\n.. code:: py\n\n    from web3.auto import w3\n\n    ethnames.bid(\n          'trading',\n          Web3.toWei('5211', 'ether'),\n          \"I promise I will not forget my secret\",\n          transact={'from': w3.eth.accounts[0]}\n          )\n\n(if you want to \"mask\" your bid, set a higher value in the transact\ndict)\n\nReveal your bid\n^^^^^^^^^^^^^^^\n\nYou must **always** reveal your bid, whether you won or lost. Otherwise\nyou will lose the full deposit.\n\nExample of revealing your bid on 'registry.eth' with 0.01 ETH, and\nsecret \"For real, though: losing your secret means losing ether\":\n\n.. code:: py\n\n    ethnames.reveal(\n          'registry',\n          Web3.toWei('0.01', 'ether'),\n          \"For real, though: losing your secret means losing ether\",\n          transact={'from': w3.eth.accounts[0]}\n          )\n\nClaim the name you won\n^^^^^^^^^^^^^^^^^^^^^^\n\naka \"Finalize\" auction, which makes you the owner in ENS.\n\n.. code:: py\n\n    ethnames.finalize('gambling')\n\nGet detailed information on an auction\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFind out the owner of the auction Deed -- see `docs on the\ndifference <http://docs.ens.domains/en/latest/userguide.html#managing-ownership>`__\nbetween owning the name and the deed\n\n.. code:: py\n\n    deed = ethnames.deed('ethfinex')\n\n    assert deed.owner() == '0x9A02ed4Ca9AD55b75fF9A05DeBb36D5eb382E184'\n\nWhen was the auction completed? (a timezone-aware datetime object)\n\n.. code:: py\n\n    close_datetime = ethnames.close_at('ethfinex')\n\n    assert str(close_datetime) == '2017-06-05 08:10:03+00:00'\n\nHow much is held on deposit?\n\n.. code:: py\n\n    from decimal import Decimal\n    from web3 import Web3\n\n    deposit = ethnames.deposit('ethfinex')\n\n    assert Web3.fromWei(deposit, 'ether') == Decimal('0.01')\n\nWhat was the highest bid?\n\n.. code:: py\n\n    top_bid = ethnames.top_bid('ethfinex')\n\n    assert Web3.fromWei(top_bid, 'ether') == Decimal('201709.02')\n\nSetup details\n-------------\n\nIf Python 2 is your default, or you're not sure\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn your shell\n\n::\n\n    if pip --version | grep \"python 2\"; then\n      python3 -m venv ~/.py3venv\n      source ~/.py3venv/bin/activate\n    fi\n\nNow, with Python 3\n~~~~~~~~~~~~~~~~~~\n\nIn your shell: ``pip install ensauction``\n\n*ensauction.py* requires an up-to-date Ethereum blockchain, preferably\nlocal. If your setup isn't working, try running ``geth --fast`` until\nit's fully-synced. I highly recommend using the default IPC\ncommunication method, for speed and security.\n\n\"No matching distribution found for ensauction\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are seeing something like:\n\n::\n\n    Collecting ensauction\n      Could not find a version that satisfies the requirement ensauction (from versions: )\n    No matching distribution found for ensauction\n\nIt is most likely that you are in Python 2. Retry the first Setup\nsection, to make sure you're in Python 3\n\nUse a custom web3 provider\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn Python:\n\n::\n\n    from ensauction.registrar import Registrar\n    from ens import ENS\n    from web3 import IPCProvider \n\n    ns = ENS(IPCProvider('/your/custom/ipc/path'))\n    reg = Registrar(ns)\n\nDeveloper Setup\n---------------\n\n::\n\n    git clone git@github.com:carver/ensauction.py.git\n    cd ensauction.py/\n\n    python3 -m venv venv\n    . venv/bin/activate\n\n    pip install -e .\n    pip install -r requirements-dev.txt\n\nTesting Setup\n~~~~~~~~~~~~~\n\nRe-run flake on file changes:\n\n::\n\n    $ when-changed -s -1 -r ensauction/ tests/ -c \"clear; echo; echo \\\"running flake - $(date)\\\"; warn()\n    {\n    notify-send -t 5000 'Flake8 failure \u26a0\u26a0\u26a0\u26a0\u26a0' 'flake8 on ensauction.py failed'\n    }\n    if ! git diff | flake8 --diff | grep \"\\.py\"; then if ! flake8 ensauction/ tests/; then warn; fi else warn; fi; echo done\"\n\nWhy does ensauction.py require python 3?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*Short version*\n\nIt turns out that the distinction between ``str`` and ``bytes`` is\nimportant. If you want to write code for the future (Ethereum), don't\nuse a language from the past.\n\n*Long version*\n\nInteracting with the EVM requires clarity on the bits you're using. For\nexample, a sha3 hash expects to receive a series of bytes to process.\nCalculating the sha3 hash of a string is (or should be) a Type Error;\nthe hash algorithm doesn't know what to do with a series of characters,\naka Unicode code points. As the caller, you need to know which thing\nyou're calculating the hash of: 1. a series of bytes:\n``b'[ c$o!\\x91\\xf1\\x8f&u\\xce\\xdb\\x8b(\\x10.\\x95tX'`` 2. the bytes\nrepresented by a string in hex format:\n``'0x5b2063246f2191f18f2675cedb8b28102e957458'`` 3. the bytes generated\nby encoding a string using utf-8: **Oops, the bytes from #1 cannot be\nread using utf-8!** 4. the bytes generated by encoding a string using\nutf-16: ``'\u205b\u2463\u216f\\uf191\u268f\uce75\u8bdb\u1028\u952e\u5874'``\n\nPython 3 doesn't let you ignore a lot of these details. That's good,\nbecause precision in dealing with the EVM is critical.\n\nIf you are resistant -- I get it, I've been there. It is not intuitive\nfor most people. But it's seriously worth it to `learn about\nencoding <https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/>`__\nif you're going to develop on top of Ethereum. Your ETH depends on it!\n\nRelease setup\n~~~~~~~~~~~~~\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    make release bump=$$VERSION_PART_TO_BUMP$$\n\nHow to bumpversion\n^^^^^^^^^^^^^^^^^^\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump, like\n``make release bump=minor`` or ``make release bump=devnum``.\n\nIf you are in a beta version, ``make release bump=stage`` will switch to\na stable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``make release bump=\"--new-version 4.0.0-alpha.1 devnum\"``\n\n.. |Join the chat at https://gitter.im/ens-py/Lobby| image:: https://badges.gitter.im/ens-py/Lobby.svg\n   :target: https://gitter.im/ens-py/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carver/ensauction.py", "keywords": "ethereum eth web3 web3.py ENS", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ensauction", "package_url": "https://pypi.org/project/ensauction/", "platform": "", "project_url": "https://pypi.org/project/ensauction/", "project_urls": {"Homepage": "https://github.com/carver/ensauction.py"}, "release_url": "https://pypi.org/project/ensauction/0.1.0b0/", "requires_dist": ["web3 (>=4.0.0)", "bumpversion (<1,>=0.5.3); extra == 'dev'", "pytest-xdist; extra == 'dev'", "pytest-watch (<5,>=4.1.0); extra == 'dev'", "wheel; extra == 'dev'", "ipython; extra == 'dev'", "pytest (<4,>=3.8.0); extra == 'dev'", "pytest-mock; extra == 'dev'", "web3[tester] (<5,>=4); extra == 'dev'", "flake8 (<4,>3); extra == 'dev'", "flake8 (<4,>3); extra == 'lint'", "pytest (<4,>=3.8.0); extra == 'test'", "pytest-mock; extra == 'test'", "web3[tester] (<5,>=4); extra == 'test'"], "requires_python": ">=3.5", "summary": "Ethereum Name Service Auction, in Python", "version": "0.1.0b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitter.im/ens-py/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/ens-py/Lobby\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f14a3e9065a3f7a334de022c788cad6ef29dab26/68747470733a2f2f6261646765732e6769747465722e696d2f656e732d70792f4c6f6262792e737667\"></a></p>\n<p>Access the Ethereum Name Service Auction using this python library.\nNote: <strong>this is a work in progress</strong></p>\n<p>Using this library is not a way to skip learning how ENS works. If you\nare registering a name, a small misunderstanding can cause you to lose\n<strong>all</strong> your deposit. Go <a href=\"http://docs.ens.domains/en/latest/userguide.html\" rel=\"nofollow\">read about\nENS</a> first. Your\nfunds are your responsibility.</p>\n<div id=\"beta-quality-warning\">\n<h2>Beta-quality warning</h2>\n<p>This is a preview for developers, and an invitation for contributions.\nPlease do not use this in production until this warning is removed,\nespecially when putting funds at risk. Examples of funds being at risk\ninclude: sending ether/tokens to resolved addresses and participating in\nname auctions.</p>\n<p>If you supply the a domain with type <tt>bytes</tt>, it will be assumed to be\nUTF-8 encoded, like in <a href=\"https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding\" rel=\"nofollow\">Ethereum\ncontracts</a>.</p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<pre>pip install ensauction\n</pre>\n<p>Any issues? See <a href=\"#setup-details\" rel=\"nofollow\">Setup details</a></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>All examples in Python 3</p>\n<div id=\"auctions-for-names-ending-in-eth\">\n<h3>Auctions for names ending in .eth</h3>\n<div id=\"get-auction-status\">\n<h4>Get auction status</h4>\n<p>Example with domain \u2018payment.eth\u2019:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ensauction.auto</span> <span class=\"kn\">import</span> <span class=\"n\">ethnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ensauction.registrar</span> <span class=\"kn\">import</span> <span class=\"n\">Status</span>\n\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s1\">'payment.eth'</span><span class=\"p\">)</span>\n</pre>\n<div>\n<div>If you get an error here, like: &gt; UnhandledRequest: No providers\nresponded to the RPC request:</div>\n<div>method:eth_getBlockByNumber</div>\n<div>params:[\u2018latest\u2019, False]</div>\n</div>\n<p>Then you are not connected to your node. See below <a href=\"#optionally-a-custom-web3-provider\" rel=\"nofollow\">how to manually\nconnect to your node</a>.</p>\n<p>Otherwise, continue\u2026</p>\n<pre><span class=\"c1\"># if you forget to strip out .eth, ens.py will do it for you</span>\n<span class=\"k\">assert</span> <span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s1\">'payment'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">status</span>\n\n<span class=\"c1\"># these are the possible statuses</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n  <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">,</span>\n  <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">Auctioning</span><span class=\"p\">,</span>\n  <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">Owned</span><span class=\"p\">,</span>\n  <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">Forbidden</span><span class=\"p\">,</span>\n  <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">Revealing</span><span class=\"p\">,</span>\n  <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">NotYetAvailable</span>\n  <span class=\"p\">)</span>\n\n\n<span class=\"c1\"># if you get the integer status from another source, you can compare it directly</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">Status</span><span class=\"o\">.</span><span class=\"n\">Owned</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n</div>\n<div id=\"start-auctions\">\n<h4>Start auctions</h4>\n<pre><span class=\"c1\"># start one auction (which tips people off that you're interested)</span>\n\n<span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'you_saw_him_repressin_me_didnt_ya'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># start many auctions (which provides a bit of cover)</span>\n\n<span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">([</span><span class=\"s1\">'exchange'</span><span class=\"p\">,</span> <span class=\"s1\">'tickets'</span><span class=\"p\">,</span> <span class=\"s1\">'payment'</span><span class=\"p\">,</span> <span class=\"s1\">'trading'</span><span class=\"p\">,</span> <span class=\"s1\">'registry'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"bid-on-auction\">\n<h4>Bid on auction</h4>\n<p>Bid on a \u2018trading.eth\u2019 with 5211 ETH, and secret \u201cI promise I will not\nforget my secret\u201d:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">web3.auto</span> <span class=\"kn\">import</span> <span class=\"n\">w3</span>\n\n<span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">bid</span><span class=\"p\">(</span>\n      <span class=\"s1\">'trading'</span><span class=\"p\">,</span>\n      <span class=\"n\">Web3</span><span class=\"o\">.</span><span class=\"n\">toWei</span><span class=\"p\">(</span><span class=\"s1\">'5211'</span><span class=\"p\">,</span> <span class=\"s1\">'ether'</span><span class=\"p\">),</span>\n      <span class=\"s2\">\"I promise I will not forget my secret\"</span><span class=\"p\">,</span>\n      <span class=\"n\">transact</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"n\">w3</span><span class=\"o\">.</span><span class=\"n\">eth</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]}</span>\n      <span class=\"p\">)</span>\n</pre>\n<p>(if you want to \u201cmask\u201d your bid, set a higher value in the transact\ndict)</p>\n</div>\n<div id=\"reveal-your-bid\">\n<h4>Reveal your bid</h4>\n<p>You must <strong>always</strong> reveal your bid, whether you won or lost. Otherwise\nyou will lose the full deposit.</p>\n<p>Example of revealing your bid on \u2018registry.eth\u2019 with 0.01 ETH, and\nsecret \u201cFor real, though: losing your secret means losing ether\u201d:</p>\n<pre><span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">reveal</span><span class=\"p\">(</span>\n      <span class=\"s1\">'registry'</span><span class=\"p\">,</span>\n      <span class=\"n\">Web3</span><span class=\"o\">.</span><span class=\"n\">toWei</span><span class=\"p\">(</span><span class=\"s1\">'0.01'</span><span class=\"p\">,</span> <span class=\"s1\">'ether'</span><span class=\"p\">),</span>\n      <span class=\"s2\">\"For real, though: losing your secret means losing ether\"</span><span class=\"p\">,</span>\n      <span class=\"n\">transact</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"n\">w3</span><span class=\"o\">.</span><span class=\"n\">eth</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]}</span>\n      <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"claim-the-name-you-won\">\n<h4>Claim the name you won</h4>\n<p>aka \u201cFinalize\u201d auction, which makes you the owner in ENS.</p>\n<pre><span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"s1\">'gambling'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-detailed-information-on-an-auction\">\n<h4>Get detailed information on an auction</h4>\n<p>Find out the owner of the auction Deed \u2013 see <a href=\"http://docs.ens.domains/en/latest/userguide.html#managing-ownership\" rel=\"nofollow\">docs on the\ndifference</a>\nbetween owning the name and the deed</p>\n<pre><span class=\"n\">deed</span> <span class=\"o\">=</span> <span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">deed</span><span class=\"p\">(</span><span class=\"s1\">'ethfinex'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">deed</span><span class=\"o\">.</span><span class=\"n\">owner</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'0x9A02ed4Ca9AD55b75fF9A05DeBb36D5eb382E184'</span>\n</pre>\n<p>When was the auction completed? (a timezone-aware datetime object)</p>\n<pre><span class=\"n\">close_datetime</span> <span class=\"o\">=</span> <span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">close_at</span><span class=\"p\">(</span><span class=\"s1\">'ethfinex'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">close_datetime</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'2017-06-05 08:10:03+00:00'</span>\n</pre>\n<p>How much is held on deposit?</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">web3</span> <span class=\"kn\">import</span> <span class=\"n\">Web3</span>\n\n<span class=\"n\">deposit</span> <span class=\"o\">=</span> <span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"s1\">'ethfinex'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">Web3</span><span class=\"o\">.</span><span class=\"n\">fromWei</span><span class=\"p\">(</span><span class=\"n\">deposit</span><span class=\"p\">,</span> <span class=\"s1\">'ether'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'0.01'</span><span class=\"p\">)</span>\n</pre>\n<p>What was the highest bid?</p>\n<pre><span class=\"n\">top_bid</span> <span class=\"o\">=</span> <span class=\"n\">ethnames</span><span class=\"o\">.</span><span class=\"n\">top_bid</span><span class=\"p\">(</span><span class=\"s1\">'ethfinex'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">Web3</span><span class=\"o\">.</span><span class=\"n\">fromWei</span><span class=\"p\">(</span><span class=\"n\">top_bid</span><span class=\"p\">,</span> <span class=\"s1\">'ether'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'201709.02'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"setup-details\">\n<h2>Setup details</h2>\n<div id=\"if-python-2-is-your-default-or-you-re-not-sure\">\n<h3>If Python 2 is your default, or you\u2019re not sure</h3>\n<p>In your shell</p>\n<pre>if pip --version | grep \"python 2\"; then\n  python3 -m venv ~/.py3venv\n  source ~/.py3venv/bin/activate\nfi\n</pre>\n</div>\n<div id=\"now-with-python-3\">\n<h3>Now, with Python 3</h3>\n<p>In your shell: <tt>pip install ensauction</tt></p>\n<p><em>ensauction.py</em> requires an up-to-date Ethereum blockchain, preferably\nlocal. If your setup isn\u2019t working, try running <tt>geth <span class=\"pre\">--fast</span></tt> until\nit\u2019s fully-synced. I highly recommend using the default IPC\ncommunication method, for speed and security.</p>\n</div>\n<div id=\"no-matching-distribution-found-for-ensauction\">\n<h3>\u201cNo matching distribution found for ensauction\u201d</h3>\n<p>If you are seeing something like:</p>\n<pre>Collecting ensauction\n  Could not find a version that satisfies the requirement ensauction (from versions: )\nNo matching distribution found for ensauction\n</pre>\n<p>It is most likely that you are in Python 2. Retry the first Setup\nsection, to make sure you\u2019re in Python 3</p>\n</div>\n<div id=\"use-a-custom-web3-provider\">\n<h3>Use a custom web3 provider</h3>\n<p>In Python:</p>\n<pre>from ensauction.registrar import Registrar\nfrom ens import ENS\nfrom web3 import IPCProvider\n\nns = ENS(IPCProvider('/your/custom/ipc/path'))\nreg = Registrar(ns)\n</pre>\n</div>\n</div>\n<div id=\"developer-setup\">\n<h2>Developer Setup</h2>\n<pre>git clone git@github.com:carver/ensauction.py.git\ncd ensauction.py/\n\npython3 -m venv venv\n. venv/bin/activate\n\npip install -e .\npip install -r requirements-dev.txt\n</pre>\n<div id=\"testing-setup\">\n<h3>Testing Setup</h3>\n<p>Re-run flake on file changes:</p>\n<pre>$ when-changed -s -1 -r ensauction/ tests/ -c \"clear; echo; echo \\\"running flake - $(date)\\\"; warn()\n{\nnotify-send -t 5000 'Flake8 failure \u26a0\u26a0\u26a0\u26a0\u26a0' 'flake8 on ensauction.py failed'\n}\nif ! git diff | flake8 --diff | grep \"\\.py\"; then if ! flake8 ensauction/ tests/; then warn; fi else warn; fi; echo done\"\n</pre>\n</div>\n<div id=\"why-does-ensauction-py-require-python-3\">\n<h3>Why does ensauction.py require python 3?</h3>\n<p><em>Short version</em></p>\n<p>It turns out that the distinction between <tt>str</tt> and <tt>bytes</tt> is\nimportant. If you want to write code for the future (Ethereum), don\u2019t\nuse a language from the past.</p>\n<p><em>Long version</em></p>\n<p>Interacting with the EVM requires clarity on the bits you\u2019re using. For\nexample, a sha3 hash expects to receive a series of bytes to process.\nCalculating the sha3 hash of a string is (or should be) a Type Error;\nthe hash algorithm doesn\u2019t know what to do with a series of characters,\naka Unicode code points. As the caller, you need to know which thing\nyou\u2019re calculating the hash of: 1. a series of bytes:\n<tt>b'[ <span class=\"pre\">c$o!\\x91\\xf1\\x8f&amp;u\\xce\\xdb\\x8b(\\x10.\\x95tX'</span></tt> 2. the bytes\nrepresented by a string in hex format:\n<tt>'0x5b2063246f2191f18f2675cedb8b28102e957458'</tt> 3. the bytes generated\nby encoding a string using utf-8: <strong>Oops, the bytes from #1 cannot be\nread using utf-8!</strong> 4. the bytes generated by encoding a string using\nutf-16: <tt>'\u205b\u2463\u216f\\uf191\u268f\uce75\u8bdb\u1028\u952e\u5874'</tt></p>\n<p>Python 3 doesn\u2019t let you ignore a lot of these details. That\u2019s good,\nbecause precision in dealing with the EVM is critical.</p>\n<p>If you are resistant \u2013 I get it, I\u2019ve been there. It is not intuitive\nfor most people. But it\u2019s seriously worth it to <a href=\"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/\" rel=\"nofollow\">learn about\nencoding</a>\nif you\u2019re going to develop on top of Ethereum. Your ETH depends on it!</p>\n</div>\n<div id=\"release-setup\">\n<h3>Release setup</h3>\n<p>For Debian-like systems:</p>\n<pre>apt install pandoc\n</pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<div id=\"how-to-bumpversion\">\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <tt><span class=\"pre\">{major}.{minor}.{patch}</span></tt> for\nstable, and <tt><span class=\"pre\">{major}.{minor}.{patch}-{stage}.{devnum}</span></tt> for unstable\n(<tt>stage</tt> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump, like\n<tt>make release bump=minor</tt> or <tt>make release bump=devnum</tt>.</p>\n<p>If you are in a beta version, <tt>make release bump=stage</tt> will switch to\na stable.</p>\n<p>To issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n<tt>make release <span class=\"pre\">bump=\"--new-version</span> <span class=\"pre\">4.0.0-alpha.1</span> devnum\"</tt></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4281112, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "b5d2c53249b4b76b94a4b51708641687", "sha256": "dbd1ae987b97f28524463b02db605e539a02e47bf14a45aee44f91030742bfe5"}, "downloads": -1, "filename": "ensauction-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5d2c53249b4b76b94a4b51708641687", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 10972, "upload_time": "2018-09-17T22:05:33", "upload_time_iso_8601": "2018-09-17T22:05:33.837425Z", "url": "https://files.pythonhosted.org/packages/ca/ef/f8e2e950a2d2c9440514693c573c2b1dfc889fe37ea5313818c5b293e996/ensauction-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24ba84b78b6e81564a48df55abcc6f52", "sha256": "046fe4c4d04690ace0da3c0ac7681ee2ff4f79282a6ca7579b99875cd8a67a06"}, "downloads": -1, "filename": "ensauction-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "24ba84b78b6e81564a48df55abcc6f52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11612, "upload_time": "2018-09-17T22:05:32", "upload_time_iso_8601": "2018-09-17T22:05:32.360594Z", "url": "https://files.pythonhosted.org/packages/2e/10/13d71c24a7f44a8b2339e91163716a596b50a58c3d981cfed12a94328d28/ensauction-0.1.0a1.tar.gz", "yanked": false}], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "09ceb65f928bc56c0eabf96cf83703a0", "sha256": "e8b13aae4e89d988648e4d6d45eae6e1d63bd49e62c40fd150fb88ca56636cf0"}, "downloads": -1, "filename": "ensauction-0.1.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "09ceb65f928bc56c0eabf96cf83703a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10972, "upload_time": "2018-09-17T22:17:52", "upload_time_iso_8601": "2018-09-17T22:17:52.727478Z", "url": "https://files.pythonhosted.org/packages/d1/29/1195f55fe10282b2c7f5b2b8bf3ab9db8fe07be8703383938e87223a0e05/ensauction-0.1.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58ce82bd25618dd96cdb486c4c26ce61", "sha256": "f2835082a18d3966e65290772987e6c4971cc6f5f281247e375966cc2510b939"}, "downloads": -1, "filename": "ensauction-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "58ce82bd25618dd96cdb486c4c26ce61", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11610, "upload_time": "2018-09-17T22:17:53", "upload_time_iso_8601": "2018-09-17T22:17:53.985572Z", "url": "https://files.pythonhosted.org/packages/ce/87/3e1b2d53d569ec3e15c50ffb39e82a0ac6ec0d6d52893cab3d25cce011da/ensauction-0.1.0b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09ceb65f928bc56c0eabf96cf83703a0", "sha256": "e8b13aae4e89d988648e4d6d45eae6e1d63bd49e62c40fd150fb88ca56636cf0"}, "downloads": -1, "filename": "ensauction-0.1.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "09ceb65f928bc56c0eabf96cf83703a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10972, "upload_time": "2018-09-17T22:17:52", "upload_time_iso_8601": "2018-09-17T22:17:52.727478Z", "url": "https://files.pythonhosted.org/packages/d1/29/1195f55fe10282b2c7f5b2b8bf3ab9db8fe07be8703383938e87223a0e05/ensauction-0.1.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58ce82bd25618dd96cdb486c4c26ce61", "sha256": "f2835082a18d3966e65290772987e6c4971cc6f5f281247e375966cc2510b939"}, "downloads": -1, "filename": "ensauction-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "58ce82bd25618dd96cdb486c4c26ce61", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11610, "upload_time": "2018-09-17T22:17:53", "upload_time_iso_8601": "2018-09-17T22:17:53.985572Z", "url": "https://files.pythonhosted.org/packages/ce/87/3e1b2d53d569ec3e15c50ffb39e82a0ac6ec0d6d52893cab3d25cce011da/ensauction-0.1.0b0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:16 2020"}