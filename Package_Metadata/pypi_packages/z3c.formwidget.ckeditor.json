{"info": {"author": "Stephan Richter and the Zope Community", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides a CKEditor widget for the `z3c.form` library. It also\nprovides a `RichText` schema field, which makes the usage of CKEditor\ncompletely transparent.\n\n\nDetailed Documentation\n**********************\n\n====================================\nRichText Fields and CKEditor Widgets\n====================================\n\nThis package a provides a new field called `RichText`, which is a simple\nextension to the default `Text` field. The `RichText` field declares that it\ncontains HTML-markup as part of its text.\n\n  >>> from z3c.formwidget.ckeditor import richtext\n\nSo let's create a rich text field:\n\n  >>> text = richtext.RichText(__name__='text')\n\nLet's now verify that the field provides the text and rich text schema:\n\n  >>> import zope.schema\n  >>> from zope.interface import verify\n  >>> from z3c.formwidget.ckeditor import interfaces\n\n  >>> verify.verifyObject(interfaces.IRichText, text)\n  True\n  >>> verify.verifyObject(zope.schema.interfaces.IText, text)\n  True\n\nNext, a widget is provided to edit the rich text field. It uses the CKEditor.\n\n  >>> from z3c.formwidget.ckeditor import interfaces, ckeditor\n\nThe ``CKEditorWidget`` is a widget:\n\n  >>> from z3c.form.interfaces import IWidget\n\n  >>> verify.verifyClass(interfaces.ICKEditorWidget, ckeditor.CKEditorWidget)\n  True\n  >>> verify.verifyClass(IWidget, ckeditor.CKEditorWidget)\n  True\n\nThe widget can render an input field only by adapting a request:\n\n  >>> from z3c.form.testing import TestRequest\n  >>> request = TestRequest()\n  >>> widget = ckeditor.CKEditorWidget(request)\n\nSuch a widget provides ``IWidget``:\n\n  >>> IWidget.providedBy(widget)\n  True\n\nLet's add some meaningful generic data:\n\n  >>> widget.id = 'id'\n  >>> widget.name = 'name'\n\nIf we render the widget we get the HTML:\n\n  >>> widget.update()\n  >>> print widget.render()\n  <textarea id=\"id\" name=\"name\" class=\"CKEditorWidget\"></textarea>\n  <script type=\"text/javascript\">CKEDITOR.replace('name', {});</script>\n\nAs you can see, initially, CK Editor is instantiated with all its\ndefaults. This can be changed by modifying the `config` attribute on the\nwidget.\n\nIf the `config` attribute is a string, it is interpreted as a JavaScript\nvariable name. The variable must be declared beforehand.\n\n  >>> widget.config = 'myCKEditorConfig'\n  >>> widget.update()\n  >>> print widget.render()\n  <textarea id=\"id\" name=\"name\" class=\"CKEditorWidget\"></textarea>\n  <script type=\"text/javascript\">CKEDITOR.replace('name', myCKEditorConfig);</script>\n\nAlternatively, the config attribute can be a dictionary of options, which are\nencoded to Javascript upon render time:\n\n  >>> widget.config = {'toolbar': 'Basic', 'uiColor': '#9AB8F3'}\n  >>> widget.update()\n  >>> print widget.render()\n  <textarea id=\"id\" name=\"name\" class=\"CKEditorWidget\"></textarea>\n  <script type=\"text/javascript\">CKEDITOR.replace('name', {\"uiColor\": \"#9AB8F3\", \"toolbar\": \"Basic\"});</script>\n\nAll other values cause a `ValueError` to be raised.\n\n  >>> widget.config = 3\n  >>> widget.update()\n  Traceback (most recent call last):\n  ...\n  ValueError: ('Invalid config object', 3)\n\nThe field widget for the rich text field is available too of course:\n\n  >>> import zope.component\n  >>> from z3c.form.interfaces import IFieldWidget\n\n  >>> widget = zope.component.getMultiAdapter((text, request), IFieldWidget)\n  >>> widget\n  <CKEditorWidget 'text'>\n\n  >>> widget.update()\n  >>> print widget.render()\n  <textarea id=\"text\" name=\"text\"\n            class=\"CKEditorWidget required richtext-field\"></textarea>\n  <script type=\"text/javascript\">CKEDITOR.replace('text', {});</script>\n\nYou can also create CKEditor Field Widget factories on the fly using a given\nconfiguration:\n\n  >>> MinimalCKEditorWidget = ckeditor.CKEditorFieldWidgetFactory(\n  ...     {'toolbar': 'Basic', 'uiColor': '#9AB8F3'})\n\n  >>> widget = MinimalCKEditorWidget(text, request)\n  >>> widget.update()\n  >>> print widget.render()\n  <textarea id=\"text\" name=\"text\"\n            class=\"CKEditorWidget required richtext-field\"></textarea>\n  <script type=\"text/javascript\">CKEDITOR.replace('text',\n       {\"uiColor\": \"#9AB8F3\", \"toolbar\": \"Basic\"});</script>\n\n\n=======\nCHANGES\n=======\n\n\n1.1.0 (2011-03-02)\n------------------\n\n- Upgraded CKEditor to 3.5.2.\n\n- Removed deprecation warnings.\n\n\n1.0.0 (2009-11-03)\n------------------\n\n- Initial Release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/z3c.formwidget.ckeditor", "keywords": "zope3 form widget ckeditor text", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.formwidget.ckeditor", "package_url": "https://pypi.org/project/z3c.formwidget.ckeditor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.formwidget.ckeditor/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/z3c.formwidget.ckeditor"}, "release_url": "https://pypi.org/project/z3c.formwidget.ckeditor/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "A CKEditor widget for text fields using z3c.form", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a CKEditor widget for the <cite>z3c.form</cite> library. It also\nprovides a <cite>RichText</cite> schema field, which makes the usage of CKEditor\ncompletely transparent.</p>\n<div id=\"detailed-documentation\">\n<h2>Detailed Documentation</h2>\n<div id=\"richtext-fields-and-ckeditor-widgets\">\n<h3>RichText Fields and CKEditor Widgets</h3>\n<p>This package a provides a new field called <cite>RichText</cite>, which is a simple\nextension to the default <cite>Text</cite> field. The <cite>RichText</cite> field declares that it\ncontains HTML-markup as part of its text.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.formwidget.ckeditor import richtext\n</pre>\n</blockquote>\n<p>So let\u2019s create a rich text field:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; text = richtext.RichText(__name__='text')\n</pre>\n</blockquote>\n<p>Let\u2019s now verify that the field provides the text and rich text schema:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.schema\n&gt;&gt;&gt; from zope.interface import verify\n&gt;&gt;&gt; from z3c.formwidget.ckeditor import interfaces\n</pre>\n<pre>&gt;&gt;&gt; verify.verifyObject(interfaces.IRichText, text)\nTrue\n&gt;&gt;&gt; verify.verifyObject(zope.schema.interfaces.IText, text)\nTrue\n</pre>\n</blockquote>\n<p>Next, a widget is provided to edit the rich text field. It uses the CKEditor.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.formwidget.ckeditor import interfaces, ckeditor\n</pre>\n</blockquote>\n<p>The <tt>CKEditorWidget</tt> is a widget:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.form.interfaces import IWidget\n</pre>\n<pre>&gt;&gt;&gt; verify.verifyClass(interfaces.ICKEditorWidget, ckeditor.CKEditorWidget)\nTrue\n&gt;&gt;&gt; verify.verifyClass(IWidget, ckeditor.CKEditorWidget)\nTrue\n</pre>\n</blockquote>\n<p>The widget can render an input field only by adapting a request:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.form.testing import TestRequest\n&gt;&gt;&gt; request = TestRequest()\n&gt;&gt;&gt; widget = ckeditor.CKEditorWidget(request)\n</pre>\n</blockquote>\n<p>Such a widget provides <tt>IWidget</tt>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; IWidget.providedBy(widget)\nTrue\n</pre>\n</blockquote>\n<p>Let\u2019s add some meaningful generic data:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; widget.id = 'id'\n&gt;&gt;&gt; widget.name = 'name'\n</pre>\n</blockquote>\n<p>If we render the widget we get the HTML:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; widget.update()\n&gt;&gt;&gt; print widget.render()\n&lt;textarea id=\"id\" name=\"name\" class=\"CKEditorWidget\"&gt;&lt;/textarea&gt;\n&lt;script type=\"text/javascript\"&gt;CKEDITOR.replace('name', {});&lt;/script&gt;\n</pre>\n</blockquote>\n<p>As you can see, initially, CK Editor is instantiated with all its\ndefaults. This can be changed by modifying the <cite>config</cite> attribute on the\nwidget.</p>\n<p>If the <cite>config</cite> attribute is a string, it is interpreted as a JavaScript\nvariable name. The variable must be declared beforehand.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; widget.config = 'myCKEditorConfig'\n&gt;&gt;&gt; widget.update()\n&gt;&gt;&gt; print widget.render()\n&lt;textarea id=\"id\" name=\"name\" class=\"CKEditorWidget\"&gt;&lt;/textarea&gt;\n&lt;script type=\"text/javascript\"&gt;CKEDITOR.replace('name', myCKEditorConfig);&lt;/script&gt;\n</pre>\n</blockquote>\n<p>Alternatively, the config attribute can be a dictionary of options, which are\nencoded to Javascript upon render time:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; widget.config = {'toolbar': 'Basic', 'uiColor': '#9AB8F3'}\n&gt;&gt;&gt; widget.update()\n&gt;&gt;&gt; print widget.render()\n&lt;textarea id=\"id\" name=\"name\" class=\"CKEditorWidget\"&gt;&lt;/textarea&gt;\n&lt;script type=\"text/javascript\"&gt;CKEDITOR.replace('name', {\"uiColor\": \"#9AB8F3\", \"toolbar\": \"Basic\"});&lt;/script&gt;\n</pre>\n</blockquote>\n<p>All other values cause a <cite>ValueError</cite> to be raised.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; widget.config = 3\n&gt;&gt;&gt; widget.update()\nTraceback (most recent call last):\n...\nValueError: ('Invalid config object', 3)\n</pre>\n</blockquote>\n<p>The field widget for the rich text field is available too of course:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; from z3c.form.interfaces import IFieldWidget\n</pre>\n<pre>&gt;&gt;&gt; widget = zope.component.getMultiAdapter((text, request), IFieldWidget)\n&gt;&gt;&gt; widget\n&lt;CKEditorWidget 'text'&gt;\n</pre>\n<pre>&gt;&gt;&gt; widget.update()\n&gt;&gt;&gt; print widget.render()\n&lt;textarea id=\"text\" name=\"text\"\n          class=\"CKEditorWidget required richtext-field\"&gt;&lt;/textarea&gt;\n&lt;script type=\"text/javascript\"&gt;CKEDITOR.replace('text', {});&lt;/script&gt;\n</pre>\n</blockquote>\n<p>You can also create CKEditor Field Widget factories on the fly using a given\nconfiguration:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; MinimalCKEditorWidget = ckeditor.CKEditorFieldWidgetFactory(\n...     {'toolbar': 'Basic', 'uiColor': '#9AB8F3'})\n</pre>\n<pre>&gt;&gt;&gt; widget = MinimalCKEditorWidget(text, request)\n&gt;&gt;&gt; widget.update()\n&gt;&gt;&gt; print widget.render()\n&lt;textarea id=\"text\" name=\"text\"\n          class=\"CKEditorWidget required richtext-field\"&gt;&lt;/textarea&gt;\n&lt;script type=\"text/javascript\"&gt;CKEDITOR.replace('text',\n     {\"uiColor\": \"#9AB8F3\", \"toolbar\": \"Basic\"});&lt;/script&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n<div id=\"id1\">\n<h4>1.1.0 (2011-03-02)</h4>\n<ul>\n<li>Upgraded CKEditor to 3.5.2.</li>\n<li>Removed deprecation warnings.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>1.0.0 (2009-11-03)</h4>\n<ul>\n<li>Initial Release</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 731505, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "548890b8fefa9d9b91b8bfaa5d4506ce", "sha256": "e3fc099d9f34e4e245a1baf5f5ffceab89e70d2c448681136eb96c7507896928"}, "downloads": -1, "filename": "z3c.formwidget.ckeditor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "548890b8fefa9d9b91b8bfaa5d4506ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1223027, "upload_time": "2009-11-03T23:01:03", "upload_time_iso_8601": "2009-11-03T23:01:03.605772Z", "url": "https://files.pythonhosted.org/packages/44/81/1d5c5cf2b42c783bc357e2c332965b8000b260d265fc15cfb69625aa543d/z3c.formwidget.ckeditor-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3ace99355d17cb952a0ddab3c1c90b94", "sha256": "023410fa444af1e0b979eae6c0ee856c5692d2f0e7aa7efde80991fee97a5613"}, "downloads": -1, "filename": "z3c.formwidget.ckeditor-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3ace99355d17cb952a0ddab3c1c90b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1607381, "upload_time": "2011-03-02T20:49:33", "upload_time_iso_8601": "2011-03-02T20:49:33.584952Z", "url": "https://files.pythonhosted.org/packages/f3/04/a1071b6011c3f2d3686b9dfe72029295863adcb60b800ab1132d7ab5767b/z3c.formwidget.ckeditor-1.1.0.tar.gz", "yanked": false}], "2.0.0a1": [{"comment_text": "", "digests": {"md5": "7f080b320a508a7092800ec1c6e2c63c", "sha256": "760694890d5d6623b00189cf0be8a8a1febd149cb85a69321ab3158d38a5b784"}, "downloads": -1, "filename": "z3c.formwidget.ckeditor-2.0.0a1.zip", "has_sig": false, "md5_digest": "7f080b320a508a7092800ec1c6e2c63c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2291895, "upload_time": "2013-03-04T05:40:38", "upload_time_iso_8601": "2013-03-04T05:40:38.310801Z", "url": "https://files.pythonhosted.org/packages/e7/75/bcdabf791ff74e200d057ff1216d533ff4ecfaee4927e49f604fc26f4fea/z3c.formwidget.ckeditor-2.0.0a1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ace99355d17cb952a0ddab3c1c90b94", "sha256": "023410fa444af1e0b979eae6c0ee856c5692d2f0e7aa7efde80991fee97a5613"}, "downloads": -1, "filename": "z3c.formwidget.ckeditor-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3ace99355d17cb952a0ddab3c1c90b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1607381, "upload_time": "2011-03-02T20:49:33", "upload_time_iso_8601": "2011-03-02T20:49:33.584952Z", "url": "https://files.pythonhosted.org/packages/f3/04/a1071b6011c3f2d3686b9dfe72029295863adcb60b800ab1132d7ab5767b/z3c.formwidget.ckeditor-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:00 2020"}