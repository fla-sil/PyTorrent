{"info": {"author": "Houston Youth Computer Science Group", "author_email": "houstoncsgroup@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# csvquery\n\nA versatile Python package that allows you to execute MongoDB-style queries on CSV files and interact with them like SQL tables.\n\n## Downloading\n\n```\npip install csvquery\n```\n\n## Package contents\n\n### open_csv(str path[, str delimiter = \",\"])\nProduces a **Dataset** from a CSV file:\n```python\nfrom csvquery import open_csv\n\ndataset = open_csv(\"path/to/file.csv\")\n```\n\n### get_csv(str url[, str delimiter = \",\"])\nProduces a **Dataset** from a URL:\n```python\nfrom csvquery import get_csv\n\ndataset = get_csv(\"http://example.com/api/data.csv\")\n```\n\n### parse_csv(str string[, str delimiter = \",\"])\nProduces a **Dataset** from a string:\n```python\nfrom csvquery import parse_csv\n\nstring = \"name,age\\nJohn,34\\nJane,33\"\ndataset = parse_csv(string)\n```\n\n\n\n\n### Operators\n\nStores all the valid query operator keywords as attributes. Using this class is optional as you can just use the keyword strings instead.\n\n- **equal** = \"eq\"\n- **not_equal** = \"neq\"\n- **less_than** = \"lt\"\n- **greater_than** = \"gt\"\n- **less_than_or_equal** = \"lte\"\n- **greater_than_or_equal** = \"gte\"\n- **inside** = \"in\"\n- **_not** = \"not\"\n- **_and** = \"and\"\n- **_or** = \"or\"\n\n\n\n\n### Comparisons\n\nStores some common comparison operators.\n\n#### integers\nA lambda function to compare integer values.\n```python\ndata.index(\"age\", Comparisons.integers)\n```\n\n#### floats\nA lambda function to compare floating-point values.\n```python\ndata.index(\"rate\", Comparisons.floats)\n```\n\n#### strings\nA lambda function to compare strings alphabetically.\n```python\ndata.index(\"name\", Comparisons.strings)\n```\n\n#### default\nAn alias for the **floats** comparison.\n\n#### get_date_comparison(str format_string)\nReturns a function that compares dates based on the format string. See https://strftime.org/ for a list of all valid date codes.\n```python\ndata.index(\"date\", Comparisons.get_date_comparison(\"%Y-%m-%d\"))\n```\n\n\n\n\n## The Dataset object\n\nThe Dataset object is similar to an SQL table. It can be obtained with the **open_csv**, **get_csv**, and **parse_csv** methods.\n\n### data\nA two-dimensional list of the data.\n```python\nfor row in voter_dataset.data:\n    print(row[0])\n    ...\n```\n\n### fields\nA list of the dataset's fields, or column names.\n```python\nfor field in voter_dataset.fields:\n    print(field)\n    ...\n```\n\n### index(str field[, func comparison_operation = Comparisons.default])\nSort the rows of data based on the values in a specified field. Sorting the data is optional, but doing so allows you to do binary searches which have a time complexity of just **O(log(n))**. The **comparison_operation** argument must be a function that returns **True** when the first argument is less than the second argument, and **False** if otherwise. Import **Comparisons** for some common comparison operations. By default, the **comparison_operation** is a floating-point comparison.\n```python\nfrom csvquery import open_csv, Comparisons\n\ndataset = open_csv(\"people.csv\")\ndataset.index(\"age\", Comparisons.integers) # sorts people by ascending age\n```\nYou can also make your own comparison operator.\n```python\ndataset.index(\"age\", lambda a, b: a**2 < b**2)\n```\n\n### already_indexed(str field[, func comparison_operation = Comparisons.default])\nSpecifies that the data is already sorted by a certain field, allowing binary searches without re-sorting.\n```python\nfrom csvquery import open_csv, Comparisons\n\ndataset = open_csv(\"people.csv\")\ndataset.already_indexed(\"name\", Comparisons.strings)\n```\n\n### query(dict filter_object)\nReturns all rows that match the **filter_object** as another **Dataset**.\n```python\nfrom csvquery import open_csv\n\ndataset = open_csv(\"people.csv\")\ndataset.index(\"age\")\n\nvoter_dataset = dataset.query({\n    \"age\": {          # this filter will run as a binary search since we indexed the data by age\n        \"gte\": 18     # the query will only return people who's age is greater than or equal to 18\n    },\n    \"citizenship\" {   # this will run after the binary search to filter the narrowed-down data\n        \"eq\": \"USA\"   # people will only pass this filter if their \"citizenship\" field is equal to \"USA\"\n    }\n})\n```\nThe general structure of a **filter_object** is as follows:\n```python\n{\n    \"field_1\": {\n        \"operator_1\": \"value\",\n        \"operator_2\": \"value\",\n        \"operator_3\": {\n            \"nested_operator\": \"value\"\n        },\n        ...\n        \"operator_n\": \"value_n\"\n    },\n    \"field_2\": {\n        ...\n    },\n    ...\n    \"field_3\": {\n        ...\n    }\n}\n```\nYou can also use the **csvquery.Operators** class instead of operator strings:\n```python\nfrom csvquery import Operators\n\nvoters_named_john = voter_dataset.query({\n    \"name\": {\n        Operators.equal : \"John\"\n    }\n})\n```\nIf you want to use a comparison operator like **gt** or **lte** on a column that was not indexed, you need to provide a comparison operator in the **filter_object** like so:\n```python\nfrom csvquery import open_csv, Operations, Comparisons\n\ndataset = open_csv(\"people.csv\")\ndataset.index(\"citizenship\") # sorts people by citizenship\n\nvoter_dataset = dataset.query({\n    \"citizenship\": { # binary search\n        \"eq\": \"USA\"\n    },\n    \"age\" {  # not a binary search\n        \"gte\": \"18\"\n        \"comparison\": Comparisons.integers\n    }\n})\n```\n\n### query_one(dict filter_object)\nReturns the first row that matches the **filter_object** as a **Dataset**:\n```python\njohn_doe = people_dataset.query_one({\"phone\":\"555-123-4567\"})\n```\n\n### select(list fields)\nReturns the a new **Dataset** object with only the specified fields.\n```python\nnames_and_ages = people.select([\"name\", \"age\"])\n```\n\n### select_as(dict fields)\nReturns the a new **Dataset** object with only the specified fields, except the fields are renamed according to the **fields** dictionary.\n```python\nnames_and_ages = people.select_as({\n    \"first_and_last_name\": \"name\",\n    \"years_of_oldness\": \"age\"\n})\n```\n\n### select_unique(str field)\nReturns a new **Dataset** object with only the specified field, and removes any duplicate values so that each value is unique.\n```python\nnames = people.select_unique(\"name\")\n```\n\n### add_field(str field[, func derivation = lambda r:\"\"])\nAdds another field with the specified name. By default, the field will be filled with blank values.\n```python\npeople.add_field(\"status\")\n```\nYou can optionally specify a function that takes the data in that row as a dictionary and outputs the new derived value per row.\n```python\npeople.add_field(\"full_name\", lambda row: row[\"first_name\"] + \" \" + row[\"last_name\"]])\n```\n\n### remove_fields(list fields)\nRemoves the specified fields from the **Dataset**.\n```python\npeople.remove_fields([\"status\", \"full_name\"])\n```\n\n### rename_fields(dict fields)\nRenames fields according to the **fields** dictionary argument.\n```python\npeople.rename_fields({\n    \"first_and_last_name\": \"name\",\n    \"years_of_oldness\": \"age\"\n})\n```\n\n### replace(list fields, func function)\nReplaces the values in the specified **fields** list argument using the **function** argument, which takes the current value as input and outputs the new value.\n```python\npeople.replace([\"first name\", \"last name\"], lambda v: v.lower()) # makes all \"first name\" and \"last name\" values lower case\n```\n\n### replace_derived(list fields, func derivation)\nReplaces the values in the specified **fields** list argument using the **function** argument, which takes the row as a dictionary as input and outputs the new value.\n```python\ndef birthday_to_age(row):\n    bday = datetime.strptime(row[\"date_of_birth\"], \"%Y-%m-%d\")\n    today = datetime.today()\n    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n\npeople.replace_derived([\"age\"], birthday_to_age)\n```\n\n### join(Dataset other_dataset, list common_fields[, bool remove = True])\nAdds fields from **other_dataset** to this **Dataset** and matches the rows by referencing the **common_fields** list argument. The **common_fields** list must have the field from the current **Dataset** and the field from the other **Dataset** in that order. By default, this method will remove the common field after the operation, but you can prevent this by setting the **remove** argument to **False**.\n```python\nlocations = open_csv(\"locations.csv\") # has an id field\npeople = open_csv(\"people.csv\") # has a location_id field that matches people to locations\n\npeople.join(locations, [\"location_id\", \"id\"])\n```\n\n### to_dictionary()\nReturns a the data as a dictionary if the **Dataset** has only one row (as a result of a **query_one** operation, for example).\n```python\njohn_doe = people.query_one({\"phone\":\"555-123-4567\"}) # dataset is one row high\nprint(john_doe.to_dictionary()[\"address\"])\n```\n\n### to_list()\nReturns a the data as a list if the **Dataset** has only one column (as a result of a **select** operation, for example).\n```python\ntexans = people.query({\"state\":\"TX\"}).select(\"name\") # dataset is one column wide\ntexan_names = texans.to_list()\n```\n\n### count([list fields])\nIf the **fields** argument is left blank, returns the number of rows in the **Dataset**.\n```python\nnumber_of_people = people.count()\n```\nIf otherwise, returns the number of rows in which the all of the specified fields are not empty.\n```python\nnumber_of_with_jobs = people.count([\"job\"]) # assuming the \"job\" field is left blank for unemployed people\n```\n\n### sum(str field)\nReturns a sum of all the values in that field.\n```python\ntotal_net_worth = people.sum(\"net_worth\")\n```\n\n### average(str field)\nReturns a average of all the values in that field.\n```python\naverage_net_worth = people.average(\"net_worth\")\n```\n\n### print_table([list fields])\nOutputs your data to the console in a nice table.\n```python\nvoter_dataset.print_table()\n```\nYou can optionally specify which columns to print.\n```python\nvoter_dataset.print_table([\"name\", \"age\"])\n```\n\n### save_csv(str filepath[, str delimiter = \",\"[, fields = <all>]])\nSaves the **Dataset** to a file. If no fields are specified, all fields will be saved.\n```python\nvoter_dataset.save_csv(\"output.csv\", \";\", [\"name\", \"age\"])\n```\n\n\n## More examples\n\n### SQL equivalent\n\n#### Classic SQL query\n\n```sql\nSELECT name, age FROM people\nWHERE age >= 18 AND citizenship = \"USA\";\n```\n\n#### Python MongoDB-style query\n\n```python\nvoters = people.query({\n    \"age\": {\n        \"gte\": 18\n    },\n    \"citizenship\": \"USA\"\n}).select([\"name\", \"age\"])\n```\n\n### Printing certain columns\n\n```python\ndataset = open_csv(\"people.csv\")\ndataset.print_table(dataset.fields[2:5])\n```\n\n### Rewriting a CSV file with fewer columns and a different delimiter\n\n```python\ndataset = open_csv(\"people.csv\")\ndataset.save_csv(\"people.csv\", \";\", dataset.fields[2:5])\n```\n\n### The \"eq\" operator is optional in the top level of the dictionary\n\n```python\ndataset = csvquery.open_csv(\"people.csv\")\ndataset.query({\n    \"name\":\"John\"\n})\n```\n\n### Selecting one field\n\n```python\npeople.select(\"name\") # doesn't need to be a list if it's just one\n```\n\n### Chaining\n\n```python\n(\nopen_csv(\"people.csv\")\n    .index(\"age\")\n    .query({\"age\":{\"gte\":18}, \"citizenship\":\"USA\"})\n    .select([\"name\", \"id\"])\n    .save_csv(\"voters.csv\", \",\")\n    .print_table()\n)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hycsg/csvquery", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "csvquery", "package_url": "https://pypi.org/project/csvquery/", "platform": "", "project_url": "https://pypi.org/project/csvquery/", "project_urls": {"Homepage": "https://github.com/hycsg/csvquery"}, "release_url": "https://pypi.org/project/csvquery/1.1.3/", "requires_dist": ["requests"], "requires_python": ">=3.4", "summary": "A versatile Python package that allows you to execute MongoDB-style queries on CSV files and interact with them like SQL tables.", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>csvquery</h1>\n<p>A versatile Python package that allows you to execute MongoDB-style queries on CSV files and interact with them like SQL tables.</p>\n<h2>Downloading</h2>\n<pre><code>pip install csvquery\n</code></pre>\n<h2>Package contents</h2>\n<h3>open_csv(str path[, str delimiter = \",\"])</h3>\n<p>Produces a <strong>Dataset</strong> from a CSV file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">open_csv</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/file.csv\"</span><span class=\"p\">)</span>\n</pre>\n<h3>get_csv(str url[, str delimiter = \",\"])</h3>\n<p>Produces a <strong>Dataset</strong> from a URL:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">get_csv</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">get_csv</span><span class=\"p\">(</span><span class=\"s2\">\"http://example.com/api/data.csv\"</span><span class=\"p\">)</span>\n</pre>\n<h3>parse_csv(str string[, str delimiter = \",\"])</h3>\n<p>Produces a <strong>Dataset</strong> from a string:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">parse_csv</span>\n\n<span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"name,age</span><span class=\"se\">\\n</span><span class=\"s2\">John,34</span><span class=\"se\">\\n</span><span class=\"s2\">Jane,33\"</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">parse_csv</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n</pre>\n<h3>Operators</h3>\n<p>Stores all the valid query operator keywords as attributes. Using this class is optional as you can just use the keyword strings instead.</p>\n<ul>\n<li><strong>equal</strong> = \"eq\"</li>\n<li><strong>not_equal</strong> = \"neq\"</li>\n<li><strong>less_than</strong> = \"lt\"</li>\n<li><strong>greater_than</strong> = \"gt\"</li>\n<li><strong>less_than_or_equal</strong> = \"lte\"</li>\n<li><strong>greater_than_or_equal</strong> = \"gte\"</li>\n<li><strong>inside</strong> = \"in\"</li>\n<li><strong>_not</strong> = \"not\"</li>\n<li><strong>_and</strong> = \"and\"</li>\n<li><strong>_or</strong> = \"or\"</li>\n</ul>\n<h3>Comparisons</h3>\n<p>Stores some common comparison operators.</p>\n<h4>integers</h4>\n<p>A lambda function to compare integer values.</p>\n<pre><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">integers</span><span class=\"p\">)</span>\n</pre>\n<h4>floats</h4>\n<p>A lambda function to compare floating-point values.</p>\n<pre><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"rate\"</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">floats</span><span class=\"p\">)</span>\n</pre>\n<h4>strings</h4>\n<p>A lambda function to compare strings alphabetically.</p>\n<pre><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">strings</span><span class=\"p\">)</span>\n</pre>\n<h4>default</h4>\n<p>An alias for the <strong>floats</strong> comparison.</p>\n<h4>get_date_comparison(str format_string)</h4>\n<p>Returns a function that compares dates based on the format string. See <a href=\"https://strftime.org/\" rel=\"nofollow\">https://strftime.org/</a> for a list of all valid date codes.</p>\n<pre><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"date\"</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">get_date_comparison</span><span class=\"p\">(</span><span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n</pre>\n<h2>The Dataset object</h2>\n<p>The Dataset object is similar to an SQL table. It can be obtained with the <strong>open_csv</strong>, <strong>get_csv</strong>, and <strong>parse_csv</strong> methods.</p>\n<h3>data</h3>\n<p>A two-dimensional list of the data.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">voter_dataset</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>fields</h3>\n<p>A list of the dataset's fields, or column names.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">voter_dataset</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>index(str field[, func comparison_operation = Comparisons.default])</h3>\n<p>Sort the rows of data based on the values in a specified field. Sorting the data is optional, but doing so allows you to do binary searches which have a time complexity of just <strong>O(log(n))</strong>. The <strong>comparison_operation</strong> argument must be a function that returns <strong>True</strong> when the first argument is less than the second argument, and <strong>False</strong> if otherwise. Import <strong>Comparisons</strong> for some common comparison operations. By default, the <strong>comparison_operation</strong> is a floating-point comparison.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">open_csv</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">integers</span><span class=\"p\">)</span> <span class=\"c1\"># sorts people by ascending age</span>\n</pre>\n<p>You can also make your own comparison operator.</p>\n<pre><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<h3>already_indexed(str field[, func comparison_operation = Comparisons.default])</h3>\n<p>Specifies that the data is already sorted by a certain field, allowing binary searches without re-sorting.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">open_csv</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">already_indexed</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">strings</span><span class=\"p\">)</span>\n</pre>\n<h3>query(dict filter_object)</h3>\n<p>Returns all rows that match the <strong>filter_object</strong> as another <strong>Dataset</strong>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">open_csv</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">voter_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>          <span class=\"c1\"># this filter will run as a binary search since we indexed the data by age</span>\n        <span class=\"s2\">\"gte\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span>     <span class=\"c1\"># the query will only return people who's age is greater than or equal to 18</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"citizenship\"</span> <span class=\"p\">{</span>   <span class=\"c1\"># this will run after the binary search to filter the narrowed-down data</span>\n        <span class=\"s2\">\"eq\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USA\"</span>   <span class=\"c1\"># people will only pass this filter if their \"citizenship\" field is equal to \"USA\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>The general structure of a <strong>filter_object</strong> is as follows:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"field_1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"operator_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"operator_2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"operator_3\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"nested_operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"o\">...</span>\n        <span class=\"s2\">\"operator_n\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value_n\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"field_2\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n    <span class=\"s2\">\"field_3\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can also use the <strong>csvquery.Operators</strong> class instead of operator strings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">Operators</span>\n\n<span class=\"n\">voters_named_john</span> <span class=\"o\">=</span> <span class=\"n\">voter_dataset</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"n\">Operators</span><span class=\"o\">.</span><span class=\"n\">equal</span> <span class=\"p\">:</span> <span class=\"s2\">\"John\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>If you want to use a comparison operator like <strong>gt</strong> or <strong>lte</strong> on a column that was not indexed, you need to provide a comparison operator in the <strong>filter_object</strong> like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">csvquery</span> <span class=\"kn\">import</span> <span class=\"n\">open_csv</span><span class=\"p\">,</span> <span class=\"n\">Operations</span><span class=\"p\">,</span> <span class=\"n\">Comparisons</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"citizenship\"</span><span class=\"p\">)</span> <span class=\"c1\"># sorts people by citizenship</span>\n\n<span class=\"n\">voter_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"citizenship\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># binary search</span>\n        <span class=\"s2\">\"eq\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USA\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"age\"</span> <span class=\"p\">{</span>  <span class=\"c1\"># not a binary search</span>\n        <span class=\"s2\">\"gte\"</span><span class=\"p\">:</span> <span class=\"s2\">\"18\"</span>\n        <span class=\"s2\">\"comparison\"</span><span class=\"p\">:</span> <span class=\"n\">Comparisons</span><span class=\"o\">.</span><span class=\"n\">integers</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>query_one(dict filter_object)</h3>\n<p>Returns the first row that matches the <strong>filter_object</strong> as a <strong>Dataset</strong>:</p>\n<pre><span class=\"n\">john_doe</span> <span class=\"o\">=</span> <span class=\"n\">people_dataset</span><span class=\"o\">.</span><span class=\"n\">query_one</span><span class=\"p\">({</span><span class=\"s2\">\"phone\"</span><span class=\"p\">:</span><span class=\"s2\">\"555-123-4567\"</span><span class=\"p\">})</span>\n</pre>\n<h3>select(list fields)</h3>\n<p>Returns the a new <strong>Dataset</strong> object with only the specified fields.</p>\n<pre><span class=\"n\">names_and_ages</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">])</span>\n</pre>\n<h3>select_as(dict fields)</h3>\n<p>Returns the a new <strong>Dataset</strong> object with only the specified fields, except the fields are renamed according to the <strong>fields</strong> dictionary.</p>\n<pre><span class=\"n\">names_and_ages</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">select_as</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"first_and_last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"years_of_oldness\"</span><span class=\"p\">:</span> <span class=\"s2\">\"age\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>select_unique(str field)</h3>\n<p>Returns a new <strong>Dataset</strong> object with only the specified field, and removes any duplicate values so that each value is unique.</p>\n<pre><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">select_unique</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n</pre>\n<h3>add_field(str field[, func derivation = lambda r:\"\"])</h3>\n<p>Adds another field with the specified name. By default, the field will be filled with blank values.</p>\n<pre><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">add_field</span><span class=\"p\">(</span><span class=\"s2\">\"status\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can optionally specify a function that takes the data in that row as a dictionary and outputs the new derived value per row.</p>\n<pre><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">add_field</span><span class=\"p\">(</span><span class=\"s2\">\"full_name\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">\"first_name\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">\"last_name\"</span><span class=\"p\">]])</span>\n</pre>\n<h3>remove_fields(list fields)</h3>\n<p>Removes the specified fields from the <strong>Dataset</strong>.</p>\n<pre><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">remove_fields</span><span class=\"p\">([</span><span class=\"s2\">\"status\"</span><span class=\"p\">,</span> <span class=\"s2\">\"full_name\"</span><span class=\"p\">])</span>\n</pre>\n<h3>rename_fields(dict fields)</h3>\n<p>Renames fields according to the <strong>fields</strong> dictionary argument.</p>\n<pre><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">rename_fields</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"first_and_last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"years_of_oldness\"</span><span class=\"p\">:</span> <span class=\"s2\">\"age\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>replace(list fields, func function)</h3>\n<p>Replaces the values in the specified <strong>fields</strong> list argument using the <strong>function</strong> argument, which takes the current value as input and outputs the new value.</p>\n<pre><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">([</span><span class=\"s2\">\"first name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"last name\"</span><span class=\"p\">],</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span> <span class=\"c1\"># makes all \"first name\" and \"last name\" values lower case</span>\n</pre>\n<h3>replace_derived(list fields, func derivation)</h3>\n<p>Replaces the values in the specified <strong>fields</strong> list argument using the <strong>function</strong> argument, which takes the row as a dictionary as input and outputs the new value.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">birthday_to_age</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"n\">bday</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">\"date_of_birth\"</span><span class=\"p\">],</span> <span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">today</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">year</span> <span class=\"o\">-</span> <span class=\"n\">born</span><span class=\"o\">.</span><span class=\"n\">year</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">day</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">born</span><span class=\"o\">.</span><span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">born</span><span class=\"o\">.</span><span class=\"n\">day</span><span class=\"p\">))</span>\n\n<span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">replace_derived</span><span class=\"p\">([</span><span class=\"s2\">\"age\"</span><span class=\"p\">],</span> <span class=\"n\">birthday_to_age</span><span class=\"p\">)</span>\n</pre>\n<h3>join(Dataset other_dataset, list common_fields[, bool remove = True])</h3>\n<p>Adds fields from <strong>other_dataset</strong> to this <strong>Dataset</strong> and matches the rows by referencing the <strong>common_fields</strong> list argument. The <strong>common_fields</strong> list must have the field from the current <strong>Dataset</strong> and the field from the other <strong>Dataset</strong> in that order. By default, this method will remove the common field after the operation, but you can prevent this by setting the <strong>remove</strong> argument to <strong>False</strong>.</p>\n<pre><span class=\"n\">locations</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"locations.csv\"</span><span class=\"p\">)</span> <span class=\"c1\"># has an id field</span>\n<span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span> <span class=\"c1\"># has a location_id field that matches people to locations</span>\n\n<span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"location_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"id\"</span><span class=\"p\">])</span>\n</pre>\n<h3>to_dictionary()</h3>\n<p>Returns a the data as a dictionary if the <strong>Dataset</strong> has only one row (as a result of a <strong>query_one</strong> operation, for example).</p>\n<pre><span class=\"n\">john_doe</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">query_one</span><span class=\"p\">({</span><span class=\"s2\">\"phone\"</span><span class=\"p\">:</span><span class=\"s2\">\"555-123-4567\"</span><span class=\"p\">})</span> <span class=\"c1\"># dataset is one row high</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">john_doe</span><span class=\"o\">.</span><span class=\"n\">to_dictionary</span><span class=\"p\">()[</span><span class=\"s2\">\"address\"</span><span class=\"p\">])</span>\n</pre>\n<h3>to_list()</h3>\n<p>Returns a the data as a list if the <strong>Dataset</strong> has only one column (as a result of a <strong>select</strong> operation, for example).</p>\n<pre><span class=\"n\">texans</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span><span class=\"s2\">\"state\"</span><span class=\"p\">:</span><span class=\"s2\">\"TX\"</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span> <span class=\"c1\"># dataset is one column wide</span>\n<span class=\"n\">texan_names</span> <span class=\"o\">=</span> <span class=\"n\">texans</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n</pre>\n<h3>count([list fields])</h3>\n<p>If the <strong>fields</strong> argument is left blank, returns the number of rows in the <strong>Dataset</strong>.</p>\n<pre><span class=\"n\">number_of_people</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre>\n<p>If otherwise, returns the number of rows in which the all of the specified fields are not empty.</p>\n<pre><span class=\"n\">number_of_with_jobs</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">([</span><span class=\"s2\">\"job\"</span><span class=\"p\">])</span> <span class=\"c1\"># assuming the \"job\" field is left blank for unemployed people</span>\n</pre>\n<h3>sum(str field)</h3>\n<p>Returns a sum of all the values in that field.</p>\n<pre><span class=\"n\">total_net_worth</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"s2\">\"net_worth\"</span><span class=\"p\">)</span>\n</pre>\n<h3>average(str field)</h3>\n<p>Returns a average of all the values in that field.</p>\n<pre><span class=\"n\">average_net_worth</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"s2\">\"net_worth\"</span><span class=\"p\">)</span>\n</pre>\n<h3>print_table([list fields])</h3>\n<p>Outputs your data to the console in a nice table.</p>\n<pre><span class=\"n\">voter_dataset</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">()</span>\n</pre>\n<p>You can optionally specify which columns to print.</p>\n<pre><span class=\"n\">voter_dataset</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">([</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">])</span>\n</pre>\n<h3>save_csv(str filepath[, str delimiter = \",\"[, fields = &lt;all&gt;]])</h3>\n<p>Saves the <strong>Dataset</strong> to a file. If no fields are specified, all fields will be saved.</p>\n<pre><span class=\"n\">voter_dataset</span><span class=\"o\">.</span><span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"s2\">\"output.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\";\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">])</span>\n</pre>\n<h2>More examples</h2>\n<h3>SQL equivalent</h3>\n<h4>Classic SQL query</h4>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span> <span class=\"k\">FROM</span> <span class=\"n\">people</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span> <span class=\"k\">AND</span> <span class=\"n\">citizenship</span> <span class=\"o\">=</span> <span class=\"ss\">\"USA\"</span><span class=\"p\">;</span>\n</pre>\n<h4>Python MongoDB-style query</h4>\n<pre><span class=\"n\">voters</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"gte\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"citizenship\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USA\"</span>\n<span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">])</span>\n</pre>\n<h3>Printing certain columns</h3>\n<pre><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n</pre>\n<h3>Rewriting a CSV file with fewer columns and a different delimiter</h3>\n<pre><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\";\"</span><span class=\"p\">,</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n</pre>\n<h3>The \"eq\" operator is optional in the top level of the dictionary</h3>\n<pre><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">csvquery</span><span class=\"o\">.</span><span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"John\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Selecting one field</h3>\n<pre><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span> <span class=\"c1\"># doesn't need to be a list if it's just one</span>\n</pre>\n<h3>Chaining</h3>\n<pre><span class=\"p\">(</span>\n<span class=\"n\">open_csv</span><span class=\"p\">(</span><span class=\"s2\">\"people.csv\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span><span class=\"s2\">\"age\"</span><span class=\"p\">:{</span><span class=\"s2\">\"gte\"</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"s2\">\"citizenship\"</span><span class=\"p\">:</span><span class=\"s2\">\"USA\"</span><span class=\"p\">})</span>\n    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"id\"</span><span class=\"p\">])</span>\n    <span class=\"o\">.</span><span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"s2\">\"voters.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\",\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">print_table</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6907138, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "60419bd8d9752360870389126f070cc2", "sha256": "ecf2b744761be0ba2e9fad6f4b3dfbd34f60dad04a2a803bc59c12b99cf953da"}, "downloads": -1, "filename": "csvquery-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60419bd8d9752360870389126f070cc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5338, "upload_time": "2020-03-24T04:33:24", "upload_time_iso_8601": "2020-03-24T04:33:24.405079Z", "url": "https://files.pythonhosted.org/packages/2d/51/25014ac49f4ecf308c115a6d78d9bcc4be3cac58d44b94c107ed9b2cfaaf/csvquery-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37f4faa46176dfea02f54520961e4dad", "sha256": "45c2abe70fa5502f07e4d280c424c87c90af35ad865aaf69dc510203a8289efe"}, "downloads": -1, "filename": "csvquery-0.1.0.tar.gz", "has_sig": false, "md5_digest": "37f4faa46176dfea02f54520961e4dad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4560, "upload_time": "2020-03-24T04:33:26", "upload_time_iso_8601": "2020-03-24T04:33:26.429544Z", "url": "https://files.pythonhosted.org/packages/70/de/6b658a745570c7c5732cb9b5532c0a7f0019d30cf695ee02875b1380ccc7/csvquery-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e5737eca4e0e19e11a3938d473447e77", "sha256": "02c2dcc15b41d150e170c3ab17114760d758997f4175eacb11cf2d843a8af5d4"}, "downloads": -1, "filename": "csvquery-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e5737eca4e0e19e11a3938d473447e77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5404, "upload_time": "2020-03-24T12:47:47", "upload_time_iso_8601": "2020-03-24T12:47:47.974718Z", "url": "https://files.pythonhosted.org/packages/93/50/f450cc007d7647c7ff45c76ee2ba23e68cf39a09b0bc5f48791c9bfe2f8c/csvquery-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b9b149789da53a5b6528c91b060d7f9", "sha256": "96b29bbab19045ff137df1109fc2354df590736c3db0f0a358b9ad57dba56e35"}, "downloads": -1, "filename": "csvquery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7b9b149789da53a5b6528c91b060d7f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4611, "upload_time": "2020-03-24T12:47:48", "upload_time_iso_8601": "2020-03-24T12:47:48.857011Z", "url": "https://files.pythonhosted.org/packages/9f/7f/67144fb73096ec6525520dfbcfe20f806cd78e35102fab2d5c2694d34f2b/csvquery-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1c3a664af264f411e27313c9f6dca600", "sha256": "f4cd908703b62e99729d6ffea337b292d5730df438df713c854e6a99350069d9"}, "downloads": -1, "filename": "csvquery-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1c3a664af264f411e27313c9f6dca600", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6294, "upload_time": "2020-03-24T18:55:15", "upload_time_iso_8601": "2020-03-24T18:55:15.900200Z", "url": "https://files.pythonhosted.org/packages/84/4e/7cfb055fb59bee23c4c7057d1f59dfe5f3fe0809cd59e1d0aebdc5c12061/csvquery-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "217c81a92d3c85e6c0b8b4574a97e98a", "sha256": "a87740b452c12c3a79705e3f3c94544fb7a6b361f38c981d71e1872d45fb34d2"}, "downloads": -1, "filename": "csvquery-0.2.0.tar.gz", "has_sig": false, "md5_digest": "217c81a92d3c85e6c0b8b4574a97e98a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5571, "upload_time": "2020-03-24T18:55:17", "upload_time_iso_8601": "2020-03-24T18:55:17.132058Z", "url": "https://files.pythonhosted.org/packages/ef/47/349b934e559a264717096fbaea5978050292c024b5a64bdeec41f458f63f/csvquery-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "95575142270260faeb09688ce3ef56fa", "sha256": "8f4f06918a52ce46b5880c8624ff1eee4fc57cce871d6c667a1d1f703cd894c6"}, "downloads": -1, "filename": "csvquery-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95575142270260faeb09688ce3ef56fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6619, "upload_time": "2020-03-24T20:54:56", "upload_time_iso_8601": "2020-03-24T20:54:56.549237Z", "url": "https://files.pythonhosted.org/packages/9b/48/5a01e384dbcf1e51f3a2fe09949a1814384e24919f0f62c1d1fabb4bc1a0/csvquery-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "381aa46914a637b4329f1e3ef2669321", "sha256": "3a9c32715495e98cad566785f63def99c9a1ec6229f1c1902af4ac0b0dd1b2e1"}, "downloads": -1, "filename": "csvquery-0.2.1.tar.gz", "has_sig": false, "md5_digest": "381aa46914a637b4329f1e3ef2669321", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5961, "upload_time": "2020-03-24T20:54:57", "upload_time_iso_8601": "2020-03-24T20:54:57.746283Z", "url": "https://files.pythonhosted.org/packages/ec/75/920f839a9ef849e9cd0f857f18a65d82e3b6808f5b7c663a85c88fe07108/csvquery-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "1b085c9d91b47fe03fc43917215375c7", "sha256": "1b72c826dd8a6e872db3c5c5978382fa3d1421c9e6ce35dab883a59645254e4f"}, "downloads": -1, "filename": "csvquery-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1b085c9d91b47fe03fc43917215375c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6625, "upload_time": "2020-03-24T20:56:06", "upload_time_iso_8601": "2020-03-24T20:56:06.205197Z", "url": "https://files.pythonhosted.org/packages/23/3d/fb37c94259866aea9d9d29ea043ddd5b2e0f407143020aca5c614cfcead6/csvquery-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26e3f882be583b5faac8b938062a3982", "sha256": "3f97b29b51db7f4ffcc6f02aa4b9eccdeb343b20ca69286144f1dd0a68b1980d"}, "downloads": -1, "filename": "csvquery-0.2.2.tar.gz", "has_sig": false, "md5_digest": "26e3f882be583b5faac8b938062a3982", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5962, "upload_time": "2020-03-24T20:56:07", "upload_time_iso_8601": "2020-03-24T20:56:07.446393Z", "url": "https://files.pythonhosted.org/packages/b0/ea/857d4137c7abb2aaf35a24219f096175d9a0ad9ea9c7a2f38c6b2836fded/csvquery-0.2.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "b910ea9381ebc9dd61667f54a513e836", "sha256": "8ffd59d1c930e1eeb1b134db009de6770bc60dd077217af8918634155823cb0c"}, "downloads": -1, "filename": "csvquery-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b910ea9381ebc9dd61667f54a513e836", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8341, "upload_time": "2020-03-26T21:37:24", "upload_time_iso_8601": "2020-03-26T21:37:24.222786Z", "url": "https://files.pythonhosted.org/packages/4c/5e/5187ce5a887fa98045e28af26ff44dfdc1dc0254511f249a7ce9a8e5f9f6/csvquery-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fb53770d7db30e1e04df5d6d256285c", "sha256": "d312f734d2c470b2d7d04d82dac9edd7ca2bb0a2e235439d9a447ec50ce446f3"}, "downloads": -1, "filename": "csvquery-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6fb53770d7db30e1e04df5d6d256285c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8757, "upload_time": "2020-03-26T21:37:25", "upload_time_iso_8601": "2020-03-26T21:37:25.947867Z", "url": "https://files.pythonhosted.org/packages/e4/55/974c1de89d126885f9f0d23156a7ed1a0b0297d8c41348fd0a3a5f7ee615/csvquery-1.0.0.tar.gz", "yanked": false}], "1.0.0b0": [{"comment_text": "", "digests": {"md5": "f13c9b272e6c1cb2408015ec479b3d62", "sha256": "4ad2dffcd4bdc4f2814e4346468fd7ae304c8761f296670311d1d1a6aaea18b0"}, "downloads": -1, "filename": "csvquery-1.0.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "f13c9b272e6c1cb2408015ec479b3d62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8346, "upload_time": "2020-03-26T21:25:58", "upload_time_iso_8601": "2020-03-26T21:25:58.855207Z", "url": "https://files.pythonhosted.org/packages/53/1a/a0988d52451e72518150c230748f585fa8a850bfa1a94b4cfeeaa774186a/csvquery-1.0.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afc7ceca5313745fae27ee98383e7813", "sha256": "afa621775bacb396ace1525ab68d4ece54a0a948fa7b103e320a43f485469b6d"}, "downloads": -1, "filename": "csvquery-1.0.0b0.tar.gz", "has_sig": false, "md5_digest": "afc7ceca5313745fae27ee98383e7813", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8754, "upload_time": "2020-03-26T21:26:00", "upload_time_iso_8601": "2020-03-26T21:26:00.282286Z", "url": "https://files.pythonhosted.org/packages/94/73/285c2ca64a1740d15d0608a01dc73d106b800c79a0b3b5b631abadb76aae/csvquery-1.0.0b0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8c785a58fcfd7e9824852d3decccc793", "sha256": "a81b387f1b856d922e88d5c3d2c9c4ce3e56b51010202709acf0b5b6a6c091af"}, "downloads": -1, "filename": "csvquery-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8c785a58fcfd7e9824852d3decccc793", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8351, "upload_time": "2020-03-26T21:57:13", "upload_time_iso_8601": "2020-03-26T21:57:13.297224Z", "url": "https://files.pythonhosted.org/packages/3e/63/898e6f7153a175957cc4cf10efdea2a8e16ce0ff6b5669a8d71b410693a4/csvquery-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "609431e661a59bce56806e0895c87ce6", "sha256": "2ed1661ab386273371b82f906510345cc31ccda66e7d1ef9931800113f4f3a6e"}, "downloads": -1, "filename": "csvquery-1.0.1.tar.gz", "has_sig": false, "md5_digest": "609431e661a59bce56806e0895c87ce6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8796, "upload_time": "2020-03-26T21:57:14", "upload_time_iso_8601": "2020-03-26T21:57:14.415999Z", "url": "https://files.pythonhosted.org/packages/c9/da/cc6df9db15078c2206a874874a0e3ae50b15d0ef1369acbc2248b3be47dc/csvquery-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "29c474e87964241b671a7d4ceb8b54a2", "sha256": "67e26803599584b494f48ff12b796fbb02130cc1b0b3d1035e431fcaeb24b381"}, "downloads": -1, "filename": "csvquery-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "29c474e87964241b671a7d4ceb8b54a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8363, "upload_time": "2020-03-26T22:15:17", "upload_time_iso_8601": "2020-03-26T22:15:17.754809Z", "url": "https://files.pythonhosted.org/packages/00/8b/1d833e25f06512e7bd019c7cd6d74cf97d0c6035ee7c316ceb2209e9ec59/csvquery-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2dd2cf2994f4a19e4d5bb7b506b10af1", "sha256": "a6d5bbc2fdf9c209c0d9940d611305f09504fcf11dec9890aad5311c17bc3d0e"}, "downloads": -1, "filename": "csvquery-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2dd2cf2994f4a19e4d5bb7b506b10af1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8807, "upload_time": "2020-03-26T22:15:18", "upload_time_iso_8601": "2020-03-26T22:15:18.931266Z", "url": "https://files.pythonhosted.org/packages/9c/f0/9f4e2bb42145fa840ddeb277a6c3afc2f3fd65c6ce33a4aec9187832c984/csvquery-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ea64da28c3b98ecabbeda3e43be87ca2", "sha256": "2f9ce2514ccc110f00d88d2ec10728d08fe663c3eb9f41cf754562392eb84a7b"}, "downloads": -1, "filename": "csvquery-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ea64da28c3b98ecabbeda3e43be87ca2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8360, "upload_time": "2020-03-26T22:54:48", "upload_time_iso_8601": "2020-03-26T22:54:48.206225Z", "url": "https://files.pythonhosted.org/packages/75/d6/d08705fb1106861fc0114f3e52d1a9e59287bc37ebdcb3cb5cb70eb63923/csvquery-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "818dd9ad4b1de07b80a506ab07d35b2d", "sha256": "c242e8fb2199340f6d81826a514abf390bf374fdb8a950cf406dd2415822490f"}, "downloads": -1, "filename": "csvquery-1.0.3.tar.gz", "has_sig": false, "md5_digest": "818dd9ad4b1de07b80a506ab07d35b2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8802, "upload_time": "2020-03-26T22:54:49", "upload_time_iso_8601": "2020-03-26T22:54:49.360449Z", "url": "https://files.pythonhosted.org/packages/e5/ff/789ef85f8e23ef0352b02199bd24d2d97c80cb0ad238c049131ad87874d5/csvquery-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "0ff2f119e5ae96e2d1ddcf4371e559b4", "sha256": "eba7ddaf76666c473236bb9297da9b445ecc436d10ad4d96f464e396f742c10d"}, "downloads": -1, "filename": "csvquery-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0ff2f119e5ae96e2d1ddcf4371e559b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8432, "upload_time": "2020-03-27T02:32:27", "upload_time_iso_8601": "2020-03-27T02:32:27.020440Z", "url": "https://files.pythonhosted.org/packages/c1/00/bc7a5113a12beb8b08457894f142297dacdb7b691388f24405c911e61afa/csvquery-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2524a6654ad156d2ebf3ceb72723487", "sha256": "bff92238b3980e2bc866cf117cea814e7b380ccf6bd1ca793840c4364a053c23"}, "downloads": -1, "filename": "csvquery-1.0.4.tar.gz", "has_sig": false, "md5_digest": "c2524a6654ad156d2ebf3ceb72723487", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8877, "upload_time": "2020-03-27T02:32:28", "upload_time_iso_8601": "2020-03-27T02:32:28.287531Z", "url": "https://files.pythonhosted.org/packages/a2/80/314cd35911fcf04dbf36cc8a610b76afe869969007f38248896ec4784a91/csvquery-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "68d936f892b8ec52189e1526c55daa47", "sha256": "26dec419323f6b756cae5dc1f8a83a39aeb7a86d0e15c3eef9baa5d75c11f10a"}, "downloads": -1, "filename": "csvquery-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "68d936f892b8ec52189e1526c55daa47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8441, "upload_time": "2020-03-27T16:19:11", "upload_time_iso_8601": "2020-03-27T16:19:11.840934Z", "url": "https://files.pythonhosted.org/packages/e0/c8/889eba3343e8ee021b9d50defb3e08941ee8fdf5b28bcfdafc74d1dbccaa/csvquery-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8755a1f14da32d828784eee2319185c", "sha256": "3c39eed2a6c9f595f98481fb084fc7d4707825be7ad55001e6843cad3a558a92"}, "downloads": -1, "filename": "csvquery-1.0.5.tar.gz", "has_sig": false, "md5_digest": "e8755a1f14da32d828784eee2319185c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8892, "upload_time": "2020-03-27T16:19:13", "upload_time_iso_8601": "2020-03-27T16:19:13.219151Z", "url": "https://files.pythonhosted.org/packages/fd/f5/33ce5967e61eaf7e217a96ccf977d17fb0ff1294609d74d017fad1cbda74/csvquery-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f519f091f690f824b5dae6305b0f15f1", "sha256": "6a7099f6df9dedbbc7978e4ea4090c29701558349842d82c35e3b4fe13b7ddd9"}, "downloads": -1, "filename": "csvquery-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f519f091f690f824b5dae6305b0f15f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 9519, "upload_time": "2020-03-28T21:43:25", "upload_time_iso_8601": "2020-03-28T21:43:25.725792Z", "url": "https://files.pythonhosted.org/packages/2a/de/a586cdd54ad7b4db962fb402f573796be7763eda5b23c712be3da8654caf/csvquery-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c98b2197a0d7a10ad0c2db01c07881d", "sha256": "a523c29753c9d81486a8f25a6df92b5c69468864f16b4076dad4f6ab0f5a1743"}, "downloads": -1, "filename": "csvquery-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0c98b2197a0d7a10ad0c2db01c07881d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 12731, "upload_time": "2020-03-28T21:43:27", "upload_time_iso_8601": "2020-03-28T21:43:27.348301Z", "url": "https://files.pythonhosted.org/packages/c3/98/c510da08269aac09cf192de75bb4b5fd53e53d34dff485c0c4b462ed1c28/csvquery-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "779efcb55cf25303e64aeb8049b9bb62", "sha256": "98d67c4deac40f3c1c5390603d38ce0991b91723796393df43af9ccf8e52caf7"}, "downloads": -1, "filename": "csvquery-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "779efcb55cf25303e64aeb8049b9bb62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 9536, "upload_time": "2020-03-28T21:50:26", "upload_time_iso_8601": "2020-03-28T21:50:26.231752Z", "url": "https://files.pythonhosted.org/packages/a4/39/6a99bcd5b9fdd663dcf4da3cdf2efc0b719fc70f85b2e69f54d78edc6515/csvquery-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad6f78ea360fcbff39ca325581acba41", "sha256": "1663091a5f0f43789430618424d5b58f42af4da7a1fc7cff6ef3262d03fddad1"}, "downloads": -1, "filename": "csvquery-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ad6f78ea360fcbff39ca325581acba41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 12747, "upload_time": "2020-03-28T21:50:27", "upload_time_iso_8601": "2020-03-28T21:50:27.562399Z", "url": "https://files.pythonhosted.org/packages/48/6e/2d61ccbf5368e8eebffde78dd28df7ecee3f41b6a56f1d4a6ff2975c221a/csvquery-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "68e3872ae8bdc781c4cb4f04b00f2f27", "sha256": "3fdf0ff8ecc2ed7dc275a19860c5b93d89b67fb92e344cac75632a584e0692db"}, "downloads": -1, "filename": "csvquery-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "68e3872ae8bdc781c4cb4f04b00f2f27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 9542, "upload_time": "2020-03-28T21:56:38", "upload_time_iso_8601": "2020-03-28T21:56:38.725409Z", "url": "https://files.pythonhosted.org/packages/41/50/590cefd25d8e230c844cb7d36386ee92e4f3d398ea6b2d1048709fc15006/csvquery-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7652f8522ddbda34f1caa0ab6fb3b72a", "sha256": "acae4d297783e2b1f7554c1a6437f6d2f2b054a96f40b6a2582e59540363e635"}, "downloads": -1, "filename": "csvquery-1.1.2.tar.gz", "has_sig": false, "md5_digest": "7652f8522ddbda34f1caa0ab6fb3b72a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 12745, "upload_time": "2020-03-28T21:56:40", "upload_time_iso_8601": "2020-03-28T21:56:40.167863Z", "url": "https://files.pythonhosted.org/packages/83/ba/2b14df15a7a672542d5dd3b24ab2bdcbd2768f44c006e1fe91ba156cfac4/csvquery-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "4324cb15a365350536c92b6cfc6fbbf7", "sha256": "4c00cb7e9a817727f79f3af440fd6aa94cb6ee65a33cd3244c9aaf0efaf82d04"}, "downloads": -1, "filename": "csvquery-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4324cb15a365350536c92b6cfc6fbbf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4665, "upload_time": "2020-03-29T15:28:56", "upload_time_iso_8601": "2020-03-29T15:28:56.414151Z", "url": "https://files.pythonhosted.org/packages/64/2a/c7ec0e4eca9eca42e7b44e7a33649cea9142bcc0ed49bf9eac1beec62a1a/csvquery-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "234ca86a5f08f0f85f0152ce5adc90c7", "sha256": "1a09946bacf9d55ef777c48711de260513ba64ae7f577e3535cbcce4084adc77"}, "downloads": -1, "filename": "csvquery-1.1.3.tar.gz", "has_sig": false, "md5_digest": "234ca86a5f08f0f85f0152ce5adc90c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 12572, "upload_time": "2020-03-29T15:28:57", "upload_time_iso_8601": "2020-03-29T15:28:57.783303Z", "url": "https://files.pythonhosted.org/packages/84/24/19b56cebab752de251a90f646d3eae8a354771df2dd6a1b62a3616312fa8/csvquery-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4324cb15a365350536c92b6cfc6fbbf7", "sha256": "4c00cb7e9a817727f79f3af440fd6aa94cb6ee65a33cd3244c9aaf0efaf82d04"}, "downloads": -1, "filename": "csvquery-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4324cb15a365350536c92b6cfc6fbbf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4665, "upload_time": "2020-03-29T15:28:56", "upload_time_iso_8601": "2020-03-29T15:28:56.414151Z", "url": "https://files.pythonhosted.org/packages/64/2a/c7ec0e4eca9eca42e7b44e7a33649cea9142bcc0ed49bf9eac1beec62a1a/csvquery-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "234ca86a5f08f0f85f0152ce5adc90c7", "sha256": "1a09946bacf9d55ef777c48711de260513ba64ae7f577e3535cbcce4084adc77"}, "downloads": -1, "filename": "csvquery-1.1.3.tar.gz", "has_sig": false, "md5_digest": "234ca86a5f08f0f85f0152ce5adc90c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 12572, "upload_time": "2020-03-29T15:28:57", "upload_time_iso_8601": "2020-03-29T15:28:57.783303Z", "url": "https://files.pythonhosted.org/packages/84/24/19b56cebab752de251a90f646d3eae8a354771df2dd6a1b62a3616312fa8/csvquery-1.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:40 2020"}