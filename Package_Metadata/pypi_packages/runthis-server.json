{"info": {"author": "Anthony Scopatz", "author_email": "scopatz@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# runthis-server\nRunThis Server is a tool for serving up unique, interactive terminal sessions over HTTP.\nThis enables interactive demonstration pages and documentation for a variety of\ncommand-line applications.\n\n## Installation\nRunThis-server may be installed with either conda or pip:\n\n```sh\n# use the conda-forge channel\n$ conda install -c conda-forge runthis-server\n\n# Or you can use Pip, if you must.\n$ pip install runthis-server\n```\n\n## Test Usage\nYou can start up the server with the `runthis-server` command line utility.\n\n```sh\n$ runthis-server --help\nusage: runthis-server [-h] [--config CONFIG]\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --config CONFIG  Path to config file\n```\n\n## Production Usage\nFor production, we recomment using\n[`hypercorn`](https://pgjones.gitlab.io/hypercorn), as the server here is\na Quart application. To use RunThis Server + hypercorn together, run the\nfollowing command:\n\n```sh\n$ hypercorn runthis.server.hypercorn:app\n```\n\nOr if you need to run with HTTPS certificates:\n\n```sh\n$ hypercorn runthis.server.hypercorn:app \\\n    --certfile /pat/to/certs/fullchain.pem \\\n    --keyfile /path/to/certs/privkey.pem \\\n    --bind 0.0.0.0:80\n```\n\n**Note:** Currently there is no way to pass a path to a config file into the\nrunthis server when running under hypercorn. The server will just look for\na `runthis-server.yml` file in the current working directory and use that.\nIf such a file does not exist, the default values will be used! Please\nchange directory into the location of the `runthis-server.yml` file before\nrunning hypercorn.\n\n## Configuration\nBy default, the server is configured to run by looking for a `runthis-server.yml` file\nin the current working directory. You can pass in a specific configuration file with\nthe `--config` flag.\n\nAll configuration variables are optional. The following lists there meaning and\ndefault values. Usually, these appear as top-level keys in the YAML file:\n\n```yaml\n# The path to the public certificate file. This is currently only\n# used by the hypercorn interface, and is passed directly though\n# to hypercorn's configuration.\ncertfile: None\n\n# The command variable is a string that lists ths command, or path\n# to run whenever a new instance is requested. Nominally, this is\n# a command that starts a REPL, but doesn't have to be.\ncommand: \"python3\"\n\n# The docker variable is a boolean that determines whether or not\n# the command should be run in its own single-use docker container.\n# Docker, of course, must be available on the host.\ndocker: true\n\n# The docker_image varible specifies which docker image should be\n# started up if the command is being run in a docker container.\ndocker_image: \"ubuntu:latest\"\n\n# The host variable is the URL or IP address that the server is\n# running on. By default, this is \"127.0.0.1\". Other valid options are\n# \"0.0.0.0\", which will expose the server to the outside world, as well\n# as any valid CNAME or IP address. RunThis Server works by taking in\n# a request and then redirecting to a new port on this server. The selection\n# of the host determines the redirection address. Here is the mapping:\n#\n#  host        -> TTY redirect_base\n#  127.0.0.1   -> 0.0.0.0\n#  0.0.0.0     -> IP address of server as seen by https://api.ipify.org\n#  IP or CNAME -> Same IP or CNAME\nhost: \"127.0.0.1\"\n\n# The path to the private certificate file. This is currently only\n# used by the hypercorn interface, and is passed directly though\n# to hypercorn's configuration.\ncertfile: None\n\n# The port variable is an int that specifies the port number that the\n# the RunThis Server itself operates on. The TTY redirects go to\n# separate ports. Therefore you would access the RunThis Server as f\"http://{host}:{port}\"\nport: 5000\n\n# The tty_server variable is a string flag that represents the TTY server software that\n# will be executed each time a request is made. Currently, the valid options are:\n#\n#  gotty: go-based TTY server https://github.com/yudai/gotty\n#  ttyd: C++ TTY server https://tsl0922.github.io/ttyd/\ntty_server: \"gotty\"\n\n# The gotty_path is the path to the gotty executable\ngotty_path: \"gotty\"\n\n# The ttyd_path is the path to the ttyd executable\nttyd_path: \"ttyd\"\n\n# The tty_server_port_start variable is an integer at which the TTY servers\n# will start serving their terminals. Each successive request increases this\n# value by one, so that each session recieves its own unique value.\ntty_server_port_start: 8080\n```\n\nThe above values may also be embedded into a top-level `runthis` key,\nif needed for compatibily with other files. For exmaple,\n\n```yaml\nrunthis:\n    host: 0.0.0.0\n    port: 80\n```\n\n## Request Parameters\nRequests of the server are be made to the URL `f\"http://{host}:{port}\"`.\nHowever, this URL accepts either GET or POST requests and takes\nthe following parameters as options.\n\n**presetup:** This is code that the new interpreter session is initialized.\nIt is executed without any notification to the user.\n\n**setup:** This is code that is executed right when the interpreter starts\nup, after the presetup code is executed. Additionally, this code is echoed\n(printed in its source form) to the user prior to being execute. This is\ngood for running examples.\n\nFor example, the following GET request would run `import sys` silently, and then\nexecute `print(sys.executable)` after printing literally `\"print(sys.executable)\"`.\n\n```\nhttp://127.0.0.1:5000/?presetup=import+sys&setup=print%28sys.executable%29\n```\n\nUsually, you should have a URL encoding library generate these URLs from\nsource code for you.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/regro/runthis-server", "keywords": "", "license": "BSD", "maintainer": "Anthony Scopatz", "maintainer_email": "", "name": "runthis-server", "package_url": "https://pypi.org/project/runthis-server/", "platform": "Cross Platform", "project_url": "https://pypi.org/project/runthis-server/", "project_urls": {"Homepage": "https://github.com/regro/runthis-server"}, "release_url": "https://pypi.org/project/runthis-server/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Safely serves multiple, isolated terminal sessions in a browser", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>runthis-server</h1>\n<p>RunThis Server is a tool for serving up unique, interactive terminal sessions over HTTP.\nThis enables interactive demonstration pages and documentation for a variety of\ncommand-line applications.</p>\n<h2>Installation</h2>\n<p>RunThis-server may be installed with either conda or pip:</p>\n<pre><span class=\"c1\"># use the conda-forge channel</span>\n$ conda install -c conda-forge runthis-server\n\n<span class=\"c1\"># Or you can use Pip, if you must.</span>\n$ pip install runthis-server\n</pre>\n<h2>Test Usage</h2>\n<p>You can start up the server with the <code>runthis-server</code> command line utility.</p>\n<pre>$ runthis-server --help\nusage: runthis-server <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--config CONFIG<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help       show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --config CONFIG  Path to config file\n</pre>\n<h2>Production Usage</h2>\n<p>For production, we recomment using\n<a href=\"https://pgjones.gitlab.io/hypercorn\" rel=\"nofollow\"><code>hypercorn</code></a>, as the server here is\na Quart application. To use RunThis Server + hypercorn together, run the\nfollowing command:</p>\n<pre>$ hypercorn runthis.server.hypercorn:app\n</pre>\n<p>Or if you need to run with HTTPS certificates:</p>\n<pre>$ hypercorn runthis.server.hypercorn:app <span class=\"se\">\\</span>\n    --certfile /pat/to/certs/fullchain.pem <span class=\"se\">\\</span>\n    --keyfile /path/to/certs/privkey.pem <span class=\"se\">\\</span>\n    --bind <span class=\"m\">0</span>.0.0.0:80\n</pre>\n<p><strong>Note:</strong> Currently there is no way to pass a path to a config file into the\nrunthis server when running under hypercorn. The server will just look for\na <code>runthis-server.yml</code> file in the current working directory and use that.\nIf such a file does not exist, the default values will be used! Please\nchange directory into the location of the <code>runthis-server.yml</code> file before\nrunning hypercorn.</p>\n<h2>Configuration</h2>\n<p>By default, the server is configured to run by looking for a <code>runthis-server.yml</code> file\nin the current working directory. You can pass in a specific configuration file with\nthe <code>--config</code> flag.</p>\n<p>All configuration variables are optional. The following lists there meaning and\ndefault values. Usually, these appear as top-level keys in the YAML file:</p>\n<pre><span class=\"c1\"># The path to the public certificate file. This is currently only</span>\n<span class=\"c1\"># used by the hypercorn interface, and is passed directly though</span>\n<span class=\"c1\"># to hypercorn's configuration.</span>\n<span class=\"nt\">certfile</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">None</span>\n\n<span class=\"c1\"># The command variable is a string that lists ths command, or path</span>\n<span class=\"c1\"># to run whenever a new instance is requested. Nominally, this is</span>\n<span class=\"c1\"># a command that starts a REPL, but doesn't have to be.</span>\n<span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"s\">\"python3\"</span>\n\n<span class=\"c1\"># The docker variable is a boolean that determines whether or not</span>\n<span class=\"c1\"># the command should be run in its own single-use docker container.</span>\n<span class=\"c1\"># Docker, of course, must be available on the host.</span>\n<span class=\"nt\">docker</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n\n<span class=\"c1\"># The docker_image varible specifies which docker image should be</span>\n<span class=\"c1\"># started up if the command is being run in a docker container.</span>\n<span class=\"nt\">docker_image</span><span class=\"p\">:</span> <span class=\"s\">\"ubuntu:latest\"</span>\n\n<span class=\"c1\"># The host variable is the URL or IP address that the server is</span>\n<span class=\"c1\"># running on. By default, this is \"127.0.0.1\". Other valid options are</span>\n<span class=\"c1\"># \"0.0.0.0\", which will expose the server to the outside world, as well</span>\n<span class=\"c1\"># as any valid CNAME or IP address. RunThis Server works by taking in</span>\n<span class=\"c1\"># a request and then redirecting to a new port on this server. The selection</span>\n<span class=\"c1\"># of the host determines the redirection address. Here is the mapping:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#  host        -&gt; TTY redirect_base</span>\n<span class=\"c1\">#  127.0.0.1   -&gt; 0.0.0.0</span>\n<span class=\"c1\">#  0.0.0.0     -&gt; IP address of server as seen by https://api.ipify.org</span>\n<span class=\"c1\">#  IP or CNAME -&gt; Same IP or CNAME</span>\n<span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"s\">\"127.0.0.1\"</span>\n\n<span class=\"c1\"># The path to the private certificate file. This is currently only</span>\n<span class=\"c1\"># used by the hypercorn interface, and is passed directly though</span>\n<span class=\"c1\"># to hypercorn's configuration.</span>\n<span class=\"nt\">certfile</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">None</span>\n\n<span class=\"c1\"># The port variable is an int that specifies the port number that the</span>\n<span class=\"c1\"># the RunThis Server itself operates on. The TTY redirects go to</span>\n<span class=\"c1\"># separate ports. Therefore you would access the RunThis Server as f\"http://{host}:{port}\"</span>\n<span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5000</span>\n\n<span class=\"c1\"># The tty_server variable is a string flag that represents the TTY server software that</span>\n<span class=\"c1\"># will be executed each time a request is made. Currently, the valid options are:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#  gotty: go-based TTY server https://github.com/yudai/gotty</span>\n<span class=\"c1\">#  ttyd: C++ TTY server https://tsl0922.github.io/ttyd/</span>\n<span class=\"nt\">tty_server</span><span class=\"p\">:</span> <span class=\"s\">\"gotty\"</span>\n\n<span class=\"c1\"># The gotty_path is the path to the gotty executable</span>\n<span class=\"nt\">gotty_path</span><span class=\"p\">:</span> <span class=\"s\">\"gotty\"</span>\n\n<span class=\"c1\"># The ttyd_path is the path to the ttyd executable</span>\n<span class=\"nt\">ttyd_path</span><span class=\"p\">:</span> <span class=\"s\">\"ttyd\"</span>\n\n<span class=\"c1\"># The tty_server_port_start variable is an integer at which the TTY servers</span>\n<span class=\"c1\"># will start serving their terminals. Each successive request increases this</span>\n<span class=\"c1\"># value by one, so that each session recieves its own unique value.</span>\n<span class=\"nt\">tty_server_port_start</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8080</span>\n</pre>\n<p>The above values may also be embedded into a top-level <code>runthis</code> key,\nif needed for compatibily with other files. For exmaple,</p>\n<pre><span class=\"nt\">runthis</span><span class=\"p\">:</span>\n    <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.0.0.0</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">80</span>\n</pre>\n<h2>Request Parameters</h2>\n<p>Requests of the server are be made to the URL <code>f\"http://{host}:{port}\"</code>.\nHowever, this URL accepts either GET or POST requests and takes\nthe following parameters as options.</p>\n<p><strong>presetup:</strong> This is code that the new interpreter session is initialized.\nIt is executed without any notification to the user.</p>\n<p><strong>setup:</strong> This is code that is executed right when the interpreter starts\nup, after the presetup code is executed. Additionally, this code is echoed\n(printed in its source form) to the user prior to being execute. This is\ngood for running examples.</p>\n<p>For example, the following GET request would run <code>import sys</code> silently, and then\nexecute <code>print(sys.executable)</code> after printing literally <code>\"print(sys.executable)\"</code>.</p>\n<pre><code>http://127.0.0.1:5000/?presetup=import+sys&amp;setup=print%28sys.executable%29\n</code></pre>\n<p>Usually, you should have a URL encoding library generate these URLs from\nsource code for you.</p>\n\n          </div>"}, "last_serial": 6846009, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c01f0b8da2aa3f4789648b471742b5f0", "sha256": "bdd3c2690af0f133b9541f0663970f0bba259c40685d181c364e36a19c32d239"}, "downloads": -1, "filename": "runthis-server-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c01f0b8da2aa3f4789648b471742b5f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3667, "upload_time": "2019-12-05T22:22:58", "upload_time_iso_8601": "2019-12-05T22:22:58.404757Z", "url": "https://files.pythonhosted.org/packages/80/f0/d162bbcdf4a8b21c0638a18b4df430a32816df8b6d011b07404911d671fe/runthis-server-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5a0a040d8cd2f19f85c26e904aaeb913", "sha256": "ef21e9d4d958de9ddc0e23b27626c8a9bbccbe32fcaecfd678420e684c5ff9fb"}, "downloads": -1, "filename": "runthis-server-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5a0a040d8cd2f19f85c26e904aaeb913", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3864, "upload_time": "2020-03-01T23:18:31", "upload_time_iso_8601": "2020-03-01T23:18:31.675990Z", "url": "https://files.pythonhosted.org/packages/2d/ed/cfb576905ca56c2948747385af003990a57e2697eaf2c1ddbe72f7e583df/runthis-server-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0c4e96e6cfd3d472714822a2b10c5c54", "sha256": "611b0530d83f80a3a21e21bcc2283b4bb6927f922fdf96fafe91c260fdfafae2"}, "downloads": -1, "filename": "runthis-server-0.0.3.tar.gz", "has_sig": false, "md5_digest": "0c4e96e6cfd3d472714822a2b10c5c54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6665, "upload_time": "2020-03-18T21:30:09", "upload_time_iso_8601": "2020-03-18T21:30:09.320295Z", "url": "https://files.pythonhosted.org/packages/d1/aa/cee9c82d310e1565572b2299403e4d4e11158586966d0760e5c2560c0bde/runthis-server-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e44c34f32b16e3ba0fc26eaca877b3a1", "sha256": "2db14707ae1c5a60f4798c51eb84546ba26220ac6897b3d4cb16607bbbbae1e5"}, "downloads": -1, "filename": "runthis-server-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e44c34f32b16e3ba0fc26eaca877b3a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6890, "upload_time": "2020-03-19T20:16:35", "upload_time_iso_8601": "2020-03-19T20:16:35.761527Z", "url": "https://files.pythonhosted.org/packages/82/cd/1acf0876e639a3849b4f0eb2caf15d3e44594c4f4decdda8b01a605bf734/runthis-server-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e44c34f32b16e3ba0fc26eaca877b3a1", "sha256": "2db14707ae1c5a60f4798c51eb84546ba26220ac6897b3d4cb16607bbbbae1e5"}, "downloads": -1, "filename": "runthis-server-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e44c34f32b16e3ba0fc26eaca877b3a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6890, "upload_time": "2020-03-19T20:16:35", "upload_time_iso_8601": "2020-03-19T20:16:35.761527Z", "url": "https://files.pythonhosted.org/packages/82/cd/1acf0876e639a3849b4f0eb2caf15d3e44594c4f4decdda8b01a605bf734/runthis-server-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:57 2020"}