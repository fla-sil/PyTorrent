{"info": {"author": "AbbestiaDC", "author_email": "not.simone.scuola@outlook.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python"], "description": "# Pavlov Commando\n\nCommands framework to handle text commands in a easy way.\n\n####Example\n```python\nfrom pvlv_commando.pvlv_commando import Commando\nfrom pvlv_commando import (\n    CommandNotFound,\n    CommandExecutionFail,\n    ArgVoidNotAllowed,\n    ParamNotFound,\n    MaxHourlyUses,\n    MaxDailyUses,\n)\n\ndef command_handler():\n    com = Commando()\n    \n    # An example of incoming text from the chat\n    text = '.command this is a nice argument -d a text parameter -f -g' \n\n    \"\"\"\n    permission level of the user in the chat, \n    it will be compared with the permissions needed to run the command,\n    specified in the declaration file\n    \"\"\"\n    permissions = 10  \n\n    if text.startswith('.'):\n\n        try:\n            # text without the command invocation word, and the language of the command\n            com.find_command(text[1:], 'eng', permissions)\n            \n            \"\"\"\n            Optional!\n            You can specify in the command declaration file a max time use of the command\n            cause of computational weight of the command.\n            Build a db where you save the number of executions by the user\n            \"\"\"\n            com.hourly_executions = 12\n            com.daily_executions = 39\n\n            \"\"\"\n            to run the command you have to pass the bot object,\n            that will be used inside commands.\n            max_chunk_len: specify the max len of the out, some chats have a limit in length\n            \"\"\" \n            out = com.run_command(None, max_chunk_len=1500)  \n            if out:\n                \"\"\"\n                Send to the chat with parse mode enabled \n                ** mean bold\n                - if your chat dont support parse mode use com.run_manual().replace('**', '')\n                - if your chat have a different parse mode use com.run_manual().replace('**', 'your_format')\n                \"\"\"\n                print(out)\n\n        # DO NOT EXPOSE FULL EXCEPTIONS IN CHAT, ONLY THIS ARE READY FOR CHAT\n\n        except CommandNotFound as exc:\n            print(exc)\n\n        except ArgVoidNotAllowed as exc:\n            print(exc)\n\n        except ParamNotFound as exc:\n            print(exc)\n\n        except MaxHourlyUses as exc:\n            print(exc)\n\n        except MaxDailyUses as exc:\n            print(exc)\n        \n        except CommandExecutionFail as exc:\n            print(exc)  # the exception to send in chat\n\n            # the full report of the exception to send to a log chat or for internal log.\n            print(exc.error_report)  \n```\n\n##Configurations file of the package:\nMust be put in a folder \"configs\" in the root of the project\n\nconfigs/commando.cfg\n\n```buildoutcfg\n[commands]\nCOMMANDS_DIR = commands/\n\n[debug]\nDEBUG = True\n```\n\n## Auto Command creation\nWith this tool you can automatically create a new command, with the default folders and files\n```python\nfrom pvlv_commando import StartCommand\n\n\ndef main():\n    # define the module name and the command name (use underscores only)\n    nc = StartCommand('new_module', 'new_command')\n    nc.create()\n    \"\"\"\n    The full command_declaration json file will be created\n    Check the command_declaration json file to learn how to set up it\n    \"\"\"\n\nif __name__ == '__main__':\n    main()\n```\n###Command Declaration File\nIt's a json file called with the same name as the command.py file and the command folder.\n\n**Everything with \"OPTIONAL\" label in the side comment can be omitted**\n#### Example:\n```\n{\n    \"management_command\": 0,  # OPTIONAL, the commad is owner only\n    \"beta_command\": false,  # OPTIONAL, the command in still in development\n    \"pro_command\": 0,  # OPTIONAL, the command can be run only by pro users (pro level il arbitrary int)\n    \"dm_enabled\": true,  # OPTIONAL, enabled in direct char, 1 to 1 with the bot\n    \"enabled_by_default\": true,  # OPTIONAL, the command must be activare manually by the user\n    \"permissions\": 0,  # OPTIONAL, the permission level to run the command\n    \"cost\": 20,  # OPTIONAL, cost of the command, user might a value to run this command\n    \"hourly_max_uses\": 10,  # OPTIONAL, man uses per hour by user\n    \"daily_max_uses\": 90,  # OPTIONAL, man uses per day by user\n    \"invocation_words\": [\"command\", \"com\"],  # the command invocation words\n    \"description\": {\n        \"eng\": \"Short description of the command\",\n        \"ita\": \"Breve descrizione del comando\"\n    },\n    \"handled_args\": {  # must always contain at least one element, \"\" rappresent the void one\n        \"\": {\n            \"eng\": \"Description of command without args\",\n            \"ita\": \"Descrizione del comando senza argomenti\"\n        },\n        \"arg\": {\n            \"eng\": \"Description of executions with this argument\",\n            \"ita\": \"Descrizione dell' esecuzione con questo argomento\"\n        }\n    },\n    \"handled_params\": {  # OPTIONAL, the parameters\n        \"-param1\": {\n            \"eng\": \"Description of executions with this parameter\",\n            \"ita\": \"Descrizione dell'esecizione con questo parametro\"\n        },\n        \"-param2\": {\n            \"eng\": \"Description of executions with this parameter\",\n            \"ita\": \"Descrizione dell'esecizione con questo parametro\"\n        }\n    }\n}\n```\n### Command Class Example\nThis is the command file that will be run when the command is invoked\n```python\nclass CommandName(object):\n\n    def __init__(self, bot, language, command, arg, params):\n\n        self.bot = bot  # bot entity to send messages, the one that you pass on run command\n        self.language = language  # the language detected in the guild, to personalize responses\n        self.command = command  # the command descriptor of the command\n\n        self.arg = arg  # the detected arg\n\n        \"\"\"\n        parameters will be initialized here\n        You have to reserve the vars here that you need to use\n        in _vars must be the same name as handled_params in the config json but without dash (-) \n        \"\"\"\n        self._param1 = None  # the detected parameters\n        self._param2 = None\n\n        for param in params:  # read the parameter from the params dict and save them in vars over here\n            name = '_{}'.format(param[0])\n            setattr(self, name, param[1])\n\n    def run(self):\n        print('Command has been run arg: {}'.format(self.arg))\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/The-Pavlov-Project/Pavlov-Commando", "keywords": "", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "pvlv-commando", "package_url": "https://pypi.org/project/pvlv-commando/", "platform": "", "project_url": "https://pypi.org/project/pvlv-commando/", "project_urls": {"Homepage": "https://github.com/The-Pavlov-Project/Pavlov-Commando"}, "release_url": "https://pypi.org/project/pvlv-commando/0.0.6/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Command handler for Pavlov", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pavlov Commando</h1>\n<p>Commands framework to handle text commands in a easy way.</p>\n<p>####Example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pvlv_commando.pvlv_commando</span> <span class=\"kn\">import</span> <span class=\"n\">Commando</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pvlv_commando</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">CommandNotFound</span><span class=\"p\">,</span>\n    <span class=\"n\">CommandExecutionFail</span><span class=\"p\">,</span>\n    <span class=\"n\">ArgVoidNotAllowed</span><span class=\"p\">,</span>\n    <span class=\"n\">ParamNotFound</span><span class=\"p\">,</span>\n    <span class=\"n\">MaxHourlyUses</span><span class=\"p\">,</span>\n    <span class=\"n\">MaxDailyUses</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">command_handler</span><span class=\"p\">():</span>\n    <span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Commando</span><span class=\"p\">()</span>\n    \n    <span class=\"c1\"># An example of incoming text from the chat</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'.command this is a nice argument -d a text parameter -f -g'</span> \n\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    permission level of the user in the chat, </span>\n<span class=\"sd\">    it will be compared with the permissions needed to run the command,</span>\n<span class=\"sd\">    specified in the declaration file</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>  \n\n    <span class=\"k\">if</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">):</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># text without the command invocation word, and the language of the command</span>\n            <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">find_command</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"s1\">'eng'</span><span class=\"p\">,</span> <span class=\"n\">permissions</span><span class=\"p\">)</span>\n            \n            <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">            Optional!</span>\n<span class=\"sd\">            You can specify in the command declaration file a max time use of the command</span>\n<span class=\"sd\">            cause of computational weight of the command.</span>\n<span class=\"sd\">            Build a db where you save the number of executions by the user</span>\n<span class=\"sd\">            \"\"\"</span>\n            <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">hourly_executions</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n            <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">daily_executions</span> <span class=\"o\">=</span> <span class=\"mi\">39</span>\n\n            <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">            to run the command you have to pass the bot object,</span>\n<span class=\"sd\">            that will be used inside commands.</span>\n<span class=\"sd\">            max_chunk_len: specify the max len of the out, some chats have a limit in length</span>\n<span class=\"sd\">            \"\"\"</span> \n            <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">run_command</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_chunk_len</span><span class=\"o\">=</span><span class=\"mi\">1500</span><span class=\"p\">)</span>  \n            <span class=\"k\">if</span> <span class=\"n\">out</span><span class=\"p\">:</span>\n                <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">                Send to the chat with parse mode enabled </span>\n<span class=\"sd\">                ** mean bold</span>\n<span class=\"sd\">                - if your chat dont support parse mode use com.run_manual().replace('**', '')</span>\n<span class=\"sd\">                - if your chat have a different parse mode use com.run_manual().replace('**', 'your_format')</span>\n<span class=\"sd\">                \"\"\"</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># DO NOT EXPOSE FULL EXCEPTIONS IN CHAT, ONLY THIS ARE READY FOR CHAT</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">CommandNotFound</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">ArgVoidNotAllowed</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">ParamNotFound</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">MaxHourlyUses</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">MaxDailyUses</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n        \n        <span class=\"k\">except</span> <span class=\"n\">CommandExecutionFail</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>  <span class=\"c1\"># the exception to send in chat</span>\n\n            <span class=\"c1\"># the full report of the exception to send to a log chat or for internal log.</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">error_report</span><span class=\"p\">)</span>  \n</pre>\n<p>##Configurations file of the package:\nMust be put in a folder \"configs\" in the root of the project</p>\n<p>configs/commando.cfg</p>\n<pre>[commands]\nCOMMANDS_DIR = commands/\n\n[debug]\nDEBUG = True\n</pre>\n<h2>Auto Command creation</h2>\n<p>With this tool you can automatically create a new command, with the default folders and files</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pvlv_commando</span> <span class=\"kn\">import</span> <span class=\"n\">StartCommand</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># define the module name and the command name (use underscores only)</span>\n    <span class=\"n\">nc</span> <span class=\"o\">=</span> <span class=\"n\">StartCommand</span><span class=\"p\">(</span><span class=\"s1\">'new_module'</span><span class=\"p\">,</span> <span class=\"s1\">'new_command'</span><span class=\"p\">)</span>\n    <span class=\"n\">nc</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    The full command_declaration json file will be created</span>\n<span class=\"sd\">    Check the command_declaration json file to learn how to set up it</span>\n<span class=\"sd\">    \"\"\"</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>###Command Declaration File\nIt's a json file called with the same name as the command.py file and the command folder.</p>\n<p><strong>Everything with \"OPTIONAL\" label in the side comment can be omitted</strong></p>\n<h4>Example:</h4>\n<pre><code>{\n    \"management_command\": 0,  # OPTIONAL, the commad is owner only\n    \"beta_command\": false,  # OPTIONAL, the command in still in development\n    \"pro_command\": 0,  # OPTIONAL, the command can be run only by pro users (pro level il arbitrary int)\n    \"dm_enabled\": true,  # OPTIONAL, enabled in direct char, 1 to 1 with the bot\n    \"enabled_by_default\": true,  # OPTIONAL, the command must be activare manually by the user\n    \"permissions\": 0,  # OPTIONAL, the permission level to run the command\n    \"cost\": 20,  # OPTIONAL, cost of the command, user might a value to run this command\n    \"hourly_max_uses\": 10,  # OPTIONAL, man uses per hour by user\n    \"daily_max_uses\": 90,  # OPTIONAL, man uses per day by user\n    \"invocation_words\": [\"command\", \"com\"],  # the command invocation words\n    \"description\": {\n        \"eng\": \"Short description of the command\",\n        \"ita\": \"Breve descrizione del comando\"\n    },\n    \"handled_args\": {  # must always contain at least one element, \"\" rappresent the void one\n        \"\": {\n            \"eng\": \"Description of command without args\",\n            \"ita\": \"Descrizione del comando senza argomenti\"\n        },\n        \"arg\": {\n            \"eng\": \"Description of executions with this argument\",\n            \"ita\": \"Descrizione dell' esecuzione con questo argomento\"\n        }\n    },\n    \"handled_params\": {  # OPTIONAL, the parameters\n        \"-param1\": {\n            \"eng\": \"Description of executions with this parameter\",\n            \"ita\": \"Descrizione dell'esecizione con questo parametro\"\n        },\n        \"-param2\": {\n            \"eng\": \"Description of executions with this parameter\",\n            \"ita\": \"Descrizione dell'esecizione con questo parametro\"\n        }\n    }\n}\n</code></pre>\n<h3>Command Class Example</h3>\n<p>This is the command file that will be run when the command is invoked</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CommandName</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">bot</span>  <span class=\"c1\"># bot entity to send messages, the one that you pass on run command</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"n\">language</span>  <span class=\"c1\"># the language detected in the guild, to personalize responses</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">command</span>  <span class=\"c1\"># the command descriptor of the command</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">arg</span>  <span class=\"c1\"># the detected arg</span>\n\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        parameters will be initialized here</span>\n<span class=\"sd\">        You have to reserve the vars here that you need to use</span>\n<span class=\"sd\">        in _vars must be the same name as handled_params in the config json but without dash (-) </span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_param1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># the detected parameters</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_param2</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">params</span><span class=\"p\">:</span>  <span class=\"c1\"># read the parameter from the params dict and save them in vars over here</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'_</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Command has been run arg: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6726336, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "caf720cdc8990a25bb94d8a61383e433", "sha256": "11e207724824d3d88346fdc3400ecc7fd0bf9ebb382ab3a74076181f1af75031"}, "downloads": -1, "filename": "pvlv_commando-0.0.1.tar.gz", "has_sig": false, "md5_digest": "caf720cdc8990a25bb94d8a61383e433", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9779, "upload_time": "2020-02-06T15:16:35", "upload_time_iso_8601": "2020-02-06T15:16:35.462778Z", "url": "https://files.pythonhosted.org/packages/36/01/1b41f5229939d10101f0cad74f11df46b87d25bf94cb597ce0bb249208e1/pvlv_commando-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "acf523cee1f38b641eb31612b8048cd6", "sha256": "4cbf96e7757c0ac9fd5b5a670fc112752923d57af0fa8b17817990ff0adcd6a0"}, "downloads": -1, "filename": "pvlv_commando-0.0.2.tar.gz", "has_sig": false, "md5_digest": "acf523cee1f38b641eb31612b8048cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10167, "upload_time": "2020-02-06T16:03:55", "upload_time_iso_8601": "2020-02-06T16:03:55.126350Z", "url": "https://files.pythonhosted.org/packages/b4/35/dd936c5f08e016425223c1fa8f2982027a5dd848a6a85b70c1a163e468f7/pvlv_commando-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "68ec59a95908897856395e22b4a3f724", "sha256": "fa4720adef6717aa2b8ce9e098ef788bcf0f97715897f71a81cdcaafe07c0111"}, "downloads": -1, "filename": "pvlv_commando-0.0.3.tar.gz", "has_sig": false, "md5_digest": "68ec59a95908897856395e22b4a3f724", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12182, "upload_time": "2020-02-27T11:19:55", "upload_time_iso_8601": "2020-02-27T11:19:55.676676Z", "url": "https://files.pythonhosted.org/packages/29/9d/e23ede981ee2c01db2ad439b760ca428457aaec447a235f71cc32b3161fe/pvlv_commando-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "3b2e814be0e6f48c4e3fc7607d4ea86b", "sha256": "e14dec9dfc041b1fb918c5de3fa03a0b7a3825ef02ca0fd995afc02ed81c5249"}, "downloads": -1, "filename": "pvlv_commando-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3b2e814be0e6f48c4e3fc7607d4ea86b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16060, "upload_time": "2020-02-27T16:26:49", "upload_time_iso_8601": "2020-02-27T16:26:49.904786Z", "url": "https://files.pythonhosted.org/packages/0e/54/1775b0f1ff5ddeb929d7c5f64695e27e449ff6aeaec8a0976047f2595cf8/pvlv_commando-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "7490cf394bf1a1e3c47c3f2fbac6c549", "sha256": "6412de100b0ddc21fd55883fa2a33d657cb9e92ea627f5a7db40d5aa043d6ba8"}, "downloads": -1, "filename": "pvlv_commando-0.0.5.tar.gz", "has_sig": false, "md5_digest": "7490cf394bf1a1e3c47c3f2fbac6c549", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16055, "upload_time": "2020-02-27T16:34:05", "upload_time_iso_8601": "2020-02-27T16:34:05.389133Z", "url": "https://files.pythonhosted.org/packages/1e/7a/5fca157f2185239dadf07030f26b6e4743098ddaa3a718da3b647437f69c/pvlv_commando-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "f0bad22de807f9dadf13cbb432103f50", "sha256": "2f5e09791db5b657627993958ef2a10dc04a376e3b0792a64f11c518e653323a"}, "downloads": -1, "filename": "pvlv_commando-0.0.6.tar.gz", "has_sig": false, "md5_digest": "f0bad22de807f9dadf13cbb432103f50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16450, "upload_time": "2020-02-29T23:06:49", "upload_time_iso_8601": "2020-02-29T23:06:49.403388Z", "url": "https://files.pythonhosted.org/packages/b7/4f/b541dba73a79742e97f27ce8762761cddcf964a8648b9de75bd867c6dbe0/pvlv_commando-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f0bad22de807f9dadf13cbb432103f50", "sha256": "2f5e09791db5b657627993958ef2a10dc04a376e3b0792a64f11c518e653323a"}, "downloads": -1, "filename": "pvlv_commando-0.0.6.tar.gz", "has_sig": false, "md5_digest": "f0bad22de807f9dadf13cbb432103f50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16450, "upload_time": "2020-02-29T23:06:49", "upload_time_iso_8601": "2020-02-29T23:06:49.403388Z", "url": "https://files.pythonhosted.org/packages/b7/4f/b541dba73a79742e97f27ce8762761cddcf964a8648b9de75bd867c6dbe0/pvlv_commando-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:58 2020"}