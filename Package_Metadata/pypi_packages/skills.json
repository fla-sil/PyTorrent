{"info": {"author": "Scott Hamilton", "author_email": "mcleopold@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Games/Entertainment", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======\nskills\n======\n\nThis is a Python port of the Moserware.Skills project that's available at\n\nhttp://github.com/moserware/Skills\n\nFor more details on how the algorithm works, see \n\nhttp://www.moserware.com/2010/03/computing-your-skill.html\n\nTo install run the command::\n\n    pip install skills\n\nThe match quality function of TrueSkill will run much faster with NumPy than with the provided matrix implementation.  Install with::\n\n    pip install numpy\n\nFor details on how to use this project, see the accompanying unit tests with\nthis project.  You can run the tests by running the commands::\n\n    # test all calculators\n    python -m unittest discover\n\n    # test just the elo calculator\n    python -m unittest skills.testsuite.test_elo\n\n\nCalculator Objects\n==================\n\nThese objects should be created and passed into the calculators.  Most of these\nobjects will also except python tuples or lists and automatically create the\ncorrect objects.\n\nPlayer\n------\n\nPlayer is an object with a player_id (anything that is hashable) and some\npartial play info.  Partial play is used for TrueSkill only.::\n\n    Player(1)\n\n    Player(\"Alice\")\n\nRating\n------\n\nRating is an object with a mean.  GaussianRating includes a stdev and is used\nfor the TrueSkill and Glicko calculators.  EloRating includes a k_factor and is\nused for the Elo calculator.::\n\n    Rating(100)\n\n    GaussianRating(25.0, 8.333)\n\n    EloRating(1200, 32)\n\nRatingFactory creates a new Rating object of whatever type is needed.\nRatingFactory.rating_class can be set to the Rating class desired.\nInstantiating one of the calculators will set RatingFactory.rating_class\nautomatically.::\n\n    RatingFactory.rating_class = GaussianRating\n    RatingFactory.ensure_rating((25.0, 8.333))\n\nTeam\n----\n\nTeam is a dictionary of Player objects mapped to Rating objects.  The objects\nkeys method maps to players, values maps to ratings and items maps to\nplayer_rating.  The constructor can take a dictionary of player to ratings or a\nlist of player, rating tuples to create a multi-player team.::\n\n    Team({1: (25.0, 8.333),\n          2: (25.0, 8.333)})\n\n    Team([(1, (25.0, 8.333)),\n          (2, (25.0, 8.333))])\n\nThe Team object has convenience functions to find a player or rating by the\nPlayer object's player_id property.::\n\n    Team.rating_by_id(1)\n\nMatch\n-----\n\nMatch is a list of teams and a ranking for each team.  It inherets from list and\nincludes a rank property, so regular lists can *not* be substituted.::\n\n    Match([Team1, Team2], [1, 2])\n\nThe constructor is a convenience function that will call ensure team on each\nteam object passed in.  This allows for easy object construction.::\n\n    Match( [(Player1, Rating1),\n            (Player2, Rating2)],\n           [1, 2] )\n\nThe Match object has convenience functions to find a player or rating in any\nTeam object by the Player object's player_id property.::\n\n    Match.rating_by_id(1)\n\nMatch is synonomous with teams.\n\nMatches\n-------\n\nMatches is a list of Match objects.  It inherits from list and a regular\nsequence type can be substituted for it.::\n\n    Matches([Match1, Match2])\n\nThe constructor is a convenience function that will call ensure_match for each\nobject in the list.  This allows for easy object construction.::\n\n    Matches([ ([Team1, Team2], [1, 2]),\n              ([Team2, Team3], [1, 2]) ])\n\nThe following is syntax that uses only tuples and lists to generate a list of\nMatches:::\n\n    Matches([([[(1, 1200)],\n               [(2, 1200)]],\n              [1, 2]),\n             ([(2, 1200),\n               (3, 1200)],\n              [1, 2])])\n\n    [Match([{Player(1): Rating(1200.0)}, {Player(2): Rating(1200.0)}],\n            rank=[1, 2]),\n     Match([{Player(2): Rating(1200.0)}, {Player(3): Rating(1200.0)}],\n            rank=[1, 2])]", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/McLeopold/PythonSkills/", "keywords": "skill trueskill glicko elo", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "skills", "package_url": "https://pypi.org/project/skills/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/skills/", "project_urls": {"Homepage": "http://github.com/McLeopold/PythonSkills/"}, "release_url": "https://pypi.org/project/skills/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Implementation of the TrueSkill, Glicko and Elo Ranking Algorithms", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a Python port of the Moserware.Skills project that\u2019s available at</p>\n<p><a href=\"http://github.com/moserware/Skills\" rel=\"nofollow\">http://github.com/moserware/Skills</a></p>\n<p>For more details on how the algorithm works, see</p>\n<p><a href=\"http://www.moserware.com/2010/03/computing-your-skill.html\" rel=\"nofollow\">http://www.moserware.com/2010/03/computing-your-skill.html</a></p>\n<p>To install run the command:</p>\n<pre>pip install skills\n</pre>\n<p>The match quality function of TrueSkill will run much faster with NumPy than with the provided matrix implementation.  Install with:</p>\n<pre>pip install numpy\n</pre>\n<p>For details on how to use this project, see the accompanying unit tests with\nthis project.  You can run the tests by running the commands:</p>\n<pre># test all calculators\npython -m unittest discover\n\n# test just the elo calculator\npython -m unittest skills.testsuite.test_elo\n</pre>\n<div id=\"calculator-objects\">\n<h2>Calculator Objects</h2>\n<p>These objects should be created and passed into the calculators.  Most of these\nobjects will also except python tuples or lists and automatically create the\ncorrect objects.</p>\n<div id=\"player\">\n<h3>Player</h3>\n<p>Player is an object with a player_id (anything that is hashable) and some\npartial play info.  Partial play is used for TrueSkill only.:</p>\n<pre>Player(1)\n\nPlayer(\"Alice\")\n</pre>\n</div>\n<div id=\"rating\">\n<h3>Rating</h3>\n<p>Rating is an object with a mean.  GaussianRating includes a stdev and is used\nfor the TrueSkill and Glicko calculators.  EloRating includes a k_factor and is\nused for the Elo calculator.:</p>\n<pre>Rating(100)\n\nGaussianRating(25.0, 8.333)\n\nEloRating(1200, 32)\n</pre>\n<p>RatingFactory creates a new Rating object of whatever type is needed.\nRatingFactory.rating_class can be set to the Rating class desired.\nInstantiating one of the calculators will set RatingFactory.rating_class\nautomatically.:</p>\n<pre>RatingFactory.rating_class = GaussianRating\nRatingFactory.ensure_rating((25.0, 8.333))\n</pre>\n</div>\n<div id=\"team\">\n<h3>Team</h3>\n<p>Team is a dictionary of Player objects mapped to Rating objects.  The objects\nkeys method maps to players, values maps to ratings and items maps to\nplayer_rating.  The constructor can take a dictionary of player to ratings or a\nlist of player, rating tuples to create a multi-player team.:</p>\n<pre>Team({1: (25.0, 8.333),\n      2: (25.0, 8.333)})\n\nTeam([(1, (25.0, 8.333)),\n      (2, (25.0, 8.333))])\n</pre>\n<p>The Team object has convenience functions to find a player or rating by the\nPlayer object\u2019s player_id property.:</p>\n<pre>Team.rating_by_id(1)\n</pre>\n</div>\n<div id=\"match\">\n<h3>Match</h3>\n<p>Match is a list of teams and a ranking for each team.  It inherets from list and\nincludes a rank property, so regular lists can <em>not</em> be substituted.:</p>\n<pre>Match([Team1, Team2], [1, 2])\n</pre>\n<p>The constructor is a convenience function that will call ensure team on each\nteam object passed in.  This allows for easy object construction.:</p>\n<pre>Match( [(Player1, Rating1),\n        (Player2, Rating2)],\n       [1, 2] )\n</pre>\n<p>The Match object has convenience functions to find a player or rating in any\nTeam object by the Player object\u2019s player_id property.:</p>\n<pre>Match.rating_by_id(1)\n</pre>\n<p>Match is synonomous with teams.</p>\n</div>\n<div id=\"matches\">\n<h3>Matches</h3>\n<p>Matches is a list of Match objects.  It inherits from list and a regular\nsequence type can be substituted for it.:</p>\n<pre>Matches([Match1, Match2])\n</pre>\n<p>The constructor is a convenience function that will call ensure_match for each\nobject in the list.  This allows for easy object construction.:</p>\n<pre>Matches([ ([Team1, Team2], [1, 2]),\n          ([Team2, Team3], [1, 2]) ])\n</pre>\n<p>The following is syntax that uses only tuples and lists to generate a list of\nMatches::</p>\n<pre>Matches([([[(1, 1200)],\n           [(2, 1200)]],\n          [1, 2]),\n         ([(2, 1200),\n           (3, 1200)],\n          [1, 2])])\n\n[Match([{Player(1): Rating(1200.0)}, {Player(2): Rating(1200.0)}],\n        rank=[1, 2]),\n Match([{Player(2): Rating(1200.0)}, {Player(3): Rating(1200.0)}],\n        rank=[1, 2])]\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1381420, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "38053eb83ea8dac9e37294a6372bf904", "sha256": "fed899d110dbb2bda4e142259eb9a57e2f942a4b1fbd0121fa7db80c55e6949b"}, "downloads": -1, "filename": "skills-0.1.0.win-amd64.exe", "has_sig": false, "md5_digest": "38053eb83ea8dac9e37294a6372bf904", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 256578, "upload_time": "2012-02-08T00:10:28", "upload_time_iso_8601": "2012-02-08T00:10:28.030545Z", "url": "https://files.pythonhosted.org/packages/55/9c/0b637f8dfa97aaa0ba6c2aa58cb48dd61c09fbae15ca50e765b894654c89/skills-0.1.0.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "f71890eadddf4c18f7ea27c072402250", "sha256": "29ddd7b33cc1b84933281ba463068f9aafc4cf8f199e200296eb29be04ce209c"}, "downloads": -1, "filename": "skills-0.1.0.zip", "has_sig": false, "md5_digest": "f71890eadddf4c18f7ea27c072402250", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32428, "upload_time": "2012-02-08T00:11:09", "upload_time_iso_8601": "2012-02-08T00:11:09.545059Z", "url": "https://files.pythonhosted.org/packages/e5/f0/2719235ed99de95cdd1b0e69f032974e0d93cc10f927a1a05c7173126617/skills-0.1.0.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2f7384dd00e6cdc63d42b61d69618d05", "sha256": "3dab72c67e140eea49b2318371ecb402474d88550835458cfd37ae13c07d18d2"}, "downloads": -1, "filename": "skills-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f7384dd00e6cdc63d42b61d69618d05", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33498, "upload_time": "2015-01-13T22:28:19", "upload_time_iso_8601": "2015-01-13T22:28:19.582943Z", "url": "https://files.pythonhosted.org/packages/9c/62/2e820f2deee0793a2a528c999b164826a16cf361ea02de1e50431f1810e5/skills-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b469fc0b59263b9855a3d4ca13880c6d", "sha256": "dd50dafe4e9d86f21e51904447eadc254daeac154bf6e62e6ded947da3a7f303"}, "downloads": -1, "filename": "skills-0.3.0.zip", "has_sig": false, "md5_digest": "b469fc0b59263b9855a3d4ca13880c6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37199, "upload_time": "2015-01-13T22:28:22", "upload_time_iso_8601": "2015-01-13T22:28:22.143795Z", "url": "https://files.pythonhosted.org/packages/8a/3c/59412b11cf1a5d777135ef2157aa19d1fa9cfce272f267674d5304fd869e/skills-0.3.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f7384dd00e6cdc63d42b61d69618d05", "sha256": "3dab72c67e140eea49b2318371ecb402474d88550835458cfd37ae13c07d18d2"}, "downloads": -1, "filename": "skills-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f7384dd00e6cdc63d42b61d69618d05", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33498, "upload_time": "2015-01-13T22:28:19", "upload_time_iso_8601": "2015-01-13T22:28:19.582943Z", "url": "https://files.pythonhosted.org/packages/9c/62/2e820f2deee0793a2a528c999b164826a16cf361ea02de1e50431f1810e5/skills-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b469fc0b59263b9855a3d4ca13880c6d", "sha256": "dd50dafe4e9d86f21e51904447eadc254daeac154bf6e62e6ded947da3a7f303"}, "downloads": -1, "filename": "skills-0.3.0.zip", "has_sig": false, "md5_digest": "b469fc0b59263b9855a3d4ca13880c6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37199, "upload_time": "2015-01-13T22:28:22", "upload_time_iso_8601": "2015-01-13T22:28:22.143795Z", "url": "https://files.pythonhosted.org/packages/8a/3c/59412b11cf1a5d777135ef2157aa19d1fa9cfce272f267674d5304fd869e/skills-0.3.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:09:03 2020"}