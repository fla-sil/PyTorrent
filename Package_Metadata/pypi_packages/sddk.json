{"info": {"author": "Vojtech Kase", "author_email": "vojtech.kase@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# sddk\n\nThis is a Python package for writting and reading files to/from [sciencedata.dk](https://sciencedata.dk/). It is especially designed for working with shared folders. It relies mainly upon Python requests library.\n\nsciencedata.dk is a project managed by [DEiC](https://www.deic.dk) (Danish e-infrastrcture cooperation) aimed to offer a robust data storage, data management and data publication solution for researchers in Denmark and abroad (see [docs](https://sciencedata.dk/sites/user/) and [dev](https://sciencedata.dk/sites/developer/) for more info). The storage is accessible either through (1)  the web interface, (2) WebDAV clients or (3) an API relaying on HTTP Protocol. One of the strength of sciencedata.dk is that it currently supports institutional login from 2976 research and educational institutions around the globe (using [WAYF](https://www.wayf.dk/en/about)). That makes it a perfect tool for international research collaboration. \n\nThe main functionality of the package is in uploading any Python object (str, dict, list, dataframe or figure) as a file to a preselected shared folder and getting it back into a Python environemnt as the original Python object. It uses sciencedata.dk API in combination with Python requests library.\n\n### Requirements\n\n* requests\n* pandas\n* matplotlib\n* getpass\n* BeautifulSoup\n\n### Install and import\n\nTo install and import the package within your Python environment (i.e. a jupyter notebook) run:\n\n```python\n!pip install sddk # to be updated, use flag \"--ignore-installed\"\nimport sddk ### import all functions\n```\n\n###  Session configuration\n\nTo run the main configuration function below, you have to know the following:\n* your sciencedata.dk username (e.g. \"123456@au.dk\" or \"kase@zcu.cz\"),\n* your sciencedata.dk password (has to be previously configured in the sciencedata.dk web interface),\n\nIn the case you want to access a shared folder, you further need:\n\n* **name** of the shared folder you want to access (e.g. \"our_shared_folder\"),\n\n* **username** of the owner of the folder (if it is not yours)\n\n(Do not worry, you will be asked to input these values interactively while running the function)\n\nTo configure a personal session, run:\n```python\nconf = sddk.configure()\n```\n\n\n### Configuration of a session with shared folder\n\nTo configure a session pointing to a shared folder, run:\n\n```python\nconf = sddk.configure(\"our_shared_folder\", \"owner_username@au.dk\")\n```\nRunning this function, you configure a tuple varible `conf`, containing two objects:\n* `s`: a request session authorized by your username and password\n* `sddk_url`: default url address (endpoint) for your requests\n\n`conf` is later on used as an input for `write_file()` and `read_file()`.\n\n### write_file()\n\nThe most important components of the package are two continuously developed functions: `write_file(path_and_filename, python_object, conf)` and `read_file(path_and_filename, type_of_object, conf)`. \n\nSo far these functions can be used with several different types of Python objects: `str`, `list`, `dictionary`, pandas' `dataframe` and matplotlib's `figure`. These can be written either as `.txt`, `.json` or `.png` files, based simply upon the filename's ending chosen by the user. Here are simple instances of these python objects to play with:\n\n```python\n### Python \"str\" object\nstring_object =  \"string content\"\n### Python \"list\" object\nlist_object = ['a', 'b', 'c', 'd']\n### Python \"dictionary\" object\ndict_object = {\"a\" : 1, \"b\" : 2, \"c\":3 }\n### Pandas dataframe object\nimport pandas as pd\ndataframe_object = pd.DataFrame([(\"a1\", \"b1\", \"c1\"), (\"a2\", \"b2\", \"c2\")], columns=[\"a\", \"b\", \"c\"]) \n### Matplotlib figure object\nimport matplotlib.pyplot as plt\nfigure_object = plt.figure() # generate object\nplt.plot(range(10)) # fill it by plotted values\n```\n\nThe simplest example is once we want to write a string object into a textfile located at our home folder (Remember, that since the configuration this home folder is contained within the `sddk_url` variable ) \n\n```python\nsddk.write_file(\"test_string.txt\", string_object, conf)\n```\n\nIn the case  that everything is fine, you will receive following message:\n\n```\n> Your <class 'str'> object has been succefully written as \"https://sciencedata.dk/files/test_string.txt\"\n```\n\nHowever, there is a couple of things which might go wrong. You can choose an unsupported python object, a non-existent path or unsupported file format. The function captures some of these cases. For instance, once you run `sddk.write_file(\"nonexistent_folder/filename.wtf\", string_object, conf)`, you will be interactively asked for corrections. First: the function checks whether the path is correct. When corrected to an existent folder (here it is \"personal_folder\"), the function further inspect whether it has known ending (i.e. `txt`, `json` or `png`). If not, it asks you interactively for correction. Third, it checks whether the folder already contain a file of the same name (to avoid unintended overwritting), and if yes, asks you what to do. Finally, it prints out where you can find your file and what type of object it encapsulates. \n\n```\n>>> The path is not valid. Try different path and filename: personal_folder/textfile.wtf\n>>> Unsupported file format. Type either \"txt\", \"json\", or \"png\": txt\n>>> A file with the same name (\"textfile.txt\") already exists in this location.\nPress Enter to overwrite it or choose different path and filename: personal_folder/textfile2.txt\n>>> Your <class 'str'> object has been succefully written as \"https://sciencedata.dk/files/personal_folder/textfile2.txt\"\n```\n\nThe same function works with dictionaries, lists, Matplotlib's figures and especially Pandas' dataframes. Pandas' dataframe is my favorite. I send there and back 1GB+ dataframes as json files on a daily basis. \n\n### read_file()\n\nOn the other side, we have the function `sddk.read_file(path_and_filename, object_type)`, which enables us to to read our files back to python as chosen python objects. Currently, the function can read only textfiles as strings, and json files as either dictionary, lists or Pandas's dataframes. You have to specify the type of object as the second argument, the values are either \"str\", \"list\", \"dict\" or \"df\" within quotation marks, like in these examples:\n\n```python\nstring_object = read_file(\"test_string.txt\", \"str\", conf)\nstring_object\n>>> 'string content'\n```\n\n```python\nlist_object = read_file(\"simple_list.json\", \"list\", conf)\nlist_object\n>>> ['a', 'b', 'c', 'd']\n```\n\n```python\ndict_object = read_file(\"simple_dict.json\", \"list\", conf)\ndict_object\n>>> {'a': 1, 'b': 2, 'c': 3}\n```\n\n```python\ndataframe_object = read_file(\"simple_df.json\", \"df\", conf)\n>>>     a   b   c\n0  a1  b1  c1\n1  a2  b2  c2\n```\n\n### list_filenames()\n\nThis function enables you to list all files within a directory. You can specify the directory, type of the file you are interested in and the conf variable. For instance, the function belows returns all JSON files within your main directory.\n\n```python\n sddk.list_filenames(filetype=\"json\", conf=conf)\n```\n\n\n\n### PUT and GET requests in detail\n\nIn the core of  the`write_file()`function is the PUT request command. Here is  what it basically does in the case of different types of objects:\n\n##### String to TXT\n\nUpload (export) simple text file:\n\n```python\ns = conf[0]\nsddk_url = conf[1]\ns.put(sddk_url + \"testfile.txt\", data=\"textfile content\")\n```\n\nGet it back (import) to Python:\n\n```python\nstring_testfile = ast.literal_eval(s.get(sddk_url + \"testfile.txt\").text)\nprint(string_testfile)\n```\n\n##### Pandas DataFrame to JSON\n\nUpload a dataframe as a json file:\n\n```python\nimport pandas as pd\ndf = pd.DataFrame([(\"a1\", \"b1\", \"c1\"), (\"a2\", \"b2\", \"c2\")], columns=[\"a\", \"b\", \"c\"]) \ns.put(sddk_url + \"df.json\", data=df.to_json())\n```\n\nGet it back:\n\n```python\ndf = pd.DataFrame(s.get(sddk_url + \"df.json\").json())\n```\n\n##### Pandas DataFrame to CSV\n\n```python\nimport pandas as pd\ndf = pd.DataFrame([(\"a1\", \"b1\", \"c1\"), (\"a2\", \"b2\", \"c2\")], columns=[\"a\", \"b\", \"c\"]) \ndf.to_csv(\"df.csv\") ### temporal file\ns.put(sddk_url + \"df.csv\", data = open(\"df.csv\", 'rb'))\n```\n\n##### Dictionary to JSON\n\nTo sciencedata.dk:\n\n```python\ndict_object = {\"a\" : 1, \"b\" : 2, \"c\":3 }\ns.put(sddk_url + \"dict_file.json\", data=json.dumps(dict_object))\n```\n\nFrom sciencedata.dk:\n\n```python\ndict_object = json.loads(s.get(sddk_url + \"dict_file.json\").content)\n```\n\n##### Matplotlib figure to PNG\n\n```python\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nplt.plot(range(10))\nfig.savefig('temp.png', dpi=fig.dpi) ### works even in Google colab\ns.put(sddk_url + \"temp.png\", data = open(\"temp.png\", 'rb'))\n```\n\n### Next steps\n- check string writing and reading\n- enabling blind reading of files \n- Impement `list_files_in_dir(dirpath, conf)` function (see `sdam-au/OCR/scripts/read_ocr_jsons.ipynb`).\n\n\n\nThe package is built following [this](https://packaging.python.org/tutorials/packaging-projects/) tutorial.\n\n### Credit\n\nThe package is continuously develepod and maintained by [Vojt\u011bch Ka\u0161e](http://vojtechkase.cz) as a part of the digital collaborative research workflow of the [SDAM project](https://sdam-au.github.io/sdam-au/) at Aarhus University, Denmark. To cite this package, use:\n\n### Version history\n\n* 1.8 - `list_filenames()` function and `configure()` alias added\n* 1.7 - figures\n* 1.6.1 - bug\n* 1.6 - enables writing dataframes as `csv`\n* 1.5 - reads individually shared files without necessary configuration\n* 1.4 - `json` package dependency\n* 1.3 - `conf` corrected\n* 1.2 - `conf` variable added\n* 1.1 - a simple correction\n* 1.0 -  functions `write_file()` and `read_file()` added\n* 0.1.2 -  redirection added\n* 0.1.1 - added shared folder owner argument to the main configuration function; migration from test.pypi to real pypi\n* 0.0.8 - shared folders reading&writing for ordinary users finally functional\n* 0.0.7 - configuration of individual session by default\n* 0.0.6 - first functional configuration\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdam-au/sddk", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sddk", "package_url": "https://pypi.org/project/sddk/", "platform": "", "project_url": "https://pypi.org/project/sddk/", "project_urls": {"Homepage": "https://github.com/sdam-au/sddk"}, "release_url": "https://pypi.org/project/sddk/1.8/", "requires_dist": null, "requires_python": ">=3.4", "summary": "A package to access sciencedata.dk", "version": "1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sddk</h1>\n<p>This is a Python package for writting and reading files to/from <a href=\"https://sciencedata.dk/\" rel=\"nofollow\">sciencedata.dk</a>. It is especially designed for working with shared folders. It relies mainly upon Python requests library.</p>\n<p>sciencedata.dk is a project managed by <a href=\"https://www.deic.dk\" rel=\"nofollow\">DEiC</a> (Danish e-infrastrcture cooperation) aimed to offer a robust data storage, data management and data publication solution for researchers in Denmark and abroad (see <a href=\"https://sciencedata.dk/sites/user/\" rel=\"nofollow\">docs</a> and <a href=\"https://sciencedata.dk/sites/developer/\" rel=\"nofollow\">dev</a> for more info). The storage is accessible either through (1)  the web interface, (2) WebDAV clients or (3) an API relaying on HTTP Protocol. One of the strength of sciencedata.dk is that it currently supports institutional login from 2976 research and educational institutions around the globe (using <a href=\"https://www.wayf.dk/en/about\" rel=\"nofollow\">WAYF</a>). That makes it a perfect tool for international research collaboration.</p>\n<p>The main functionality of the package is in uploading any Python object (str, dict, list, dataframe or figure) as a file to a preselected shared folder and getting it back into a Python environemnt as the original Python object. It uses sciencedata.dk API in combination with Python requests library.</p>\n<h3>Requirements</h3>\n<ul>\n<li>requests</li>\n<li>pandas</li>\n<li>matplotlib</li>\n<li>getpass</li>\n<li>BeautifulSoup</li>\n</ul>\n<h3>Install and import</h3>\n<p>To install and import the package within your Python environment (i.e. a jupyter notebook) run:</p>\n<pre><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">sddk</span> <span class=\"c1\"># to be updated, use flag \"--ignore-installed\"</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sddk</span> <span class=\"c1\">### import all functions</span>\n</pre>\n<h3>Session configuration</h3>\n<p>To run the main configuration function below, you have to know the following:</p>\n<ul>\n<li>your sciencedata.dk username (e.g. \"<a href=\"mailto:123456@au.dk\">123456@au.dk</a>\" or \"<a href=\"mailto:kase@zcu.cz\">kase@zcu.cz</a>\"),</li>\n<li>your sciencedata.dk password (has to be previously configured in the sciencedata.dk web interface),</li>\n</ul>\n<p>In the case you want to access a shared folder, you further need:</p>\n<ul>\n<li>\n<p><strong>name</strong> of the shared folder you want to access (e.g. \"our_shared_folder\"),</p>\n</li>\n<li>\n<p><strong>username</strong> of the owner of the folder (if it is not yours)</p>\n</li>\n</ul>\n<p>(Do not worry, you will be asked to input these values interactively while running the function)</p>\n<p>To configure a personal session, run:</p>\n<pre><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">sddk</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span>\n</pre>\n<h3>Configuration of a session with shared folder</h3>\n<p>To configure a session pointing to a shared folder, run:</p>\n<pre><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">sddk</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"s2\">\"our_shared_folder\"</span><span class=\"p\">,</span> <span class=\"s2\">\"owner_username@au.dk\"</span><span class=\"p\">)</span>\n</pre>\n<p>Running this function, you configure a tuple varible <code>conf</code>, containing two objects:</p>\n<ul>\n<li><code>s</code>: a request session authorized by your username and password</li>\n<li><code>sddk_url</code>: default url address (endpoint) for your requests</li>\n</ul>\n<p><code>conf</code> is later on used as an input for <code>write_file()</code> and <code>read_file()</code>.</p>\n<h3>write_file()</h3>\n<p>The most important components of the package are two continuously developed functions: <code>write_file(path_and_filename, python_object, conf)</code> and <code>read_file(path_and_filename, type_of_object, conf)</code>.</p>\n<p>So far these functions can be used with several different types of Python objects: <code>str</code>, <code>list</code>, <code>dictionary</code>, pandas' <code>dataframe</code> and matplotlib's <code>figure</code>. These can be written either as <code>.txt</code>, <code>.json</code> or <code>.png</code> files, based simply upon the filename's ending chosen by the user. Here are simple instances of these python objects to play with:</p>\n<pre><span class=\"c1\">### Python \"str\" object</span>\n<span class=\"n\">string_object</span> <span class=\"o\">=</span>  <span class=\"s2\">\"string content\"</span>\n<span class=\"c1\">### Python \"list\" object</span>\n<span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">]</span>\n<span class=\"c1\">### Python \"dictionary\" object</span>\n<span class=\"n\">dict_object</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span> <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"mi\">3</span> <span class=\"p\">}</span>\n<span class=\"c1\">### Pandas dataframe object</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">dataframe_object</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"s2\">\"a1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c1\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"a2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c2\"</span><span class=\"p\">)],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">])</span> \n<span class=\"c1\">### Matplotlib figure object</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">figure_object</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span> <span class=\"c1\"># generate object</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span> <span class=\"c1\"># fill it by plotted values</span>\n</pre>\n<p>The simplest example is once we want to write a string object into a textfile located at our home folder (Remember, that since the configuration this home folder is contained within the <code>sddk_url</code> variable )</p>\n<pre><span class=\"n\">sddk</span><span class=\"o\">.</span><span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"s2\">\"test_string.txt\"</span><span class=\"p\">,</span> <span class=\"n\">string_object</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span>\n</pre>\n<p>In the case  that everything is fine, you will receive following message:</p>\n<pre><code>&gt; Your &lt;class 'str'&gt; object has been succefully written as \"https://sciencedata.dk/files/test_string.txt\"\n</code></pre>\n<p>However, there is a couple of things which might go wrong. You can choose an unsupported python object, a non-existent path or unsupported file format. The function captures some of these cases. For instance, once you run <code>sddk.write_file(\"nonexistent_folder/filename.wtf\", string_object, conf)</code>, you will be interactively asked for corrections. First: the function checks whether the path is correct. When corrected to an existent folder (here it is \"personal_folder\"), the function further inspect whether it has known ending (i.e. <code>txt</code>, <code>json</code> or <code>png</code>). If not, it asks you interactively for correction. Third, it checks whether the folder already contain a file of the same name (to avoid unintended overwritting), and if yes, asks you what to do. Finally, it prints out where you can find your file and what type of object it encapsulates.</p>\n<pre><code>&gt;&gt;&gt; The path is not valid. Try different path and filename: personal_folder/textfile.wtf\n&gt;&gt;&gt; Unsupported file format. Type either \"txt\", \"json\", or \"png\": txt\n&gt;&gt;&gt; A file with the same name (\"textfile.txt\") already exists in this location.\nPress Enter to overwrite it or choose different path and filename: personal_folder/textfile2.txt\n&gt;&gt;&gt; Your &lt;class 'str'&gt; object has been succefully written as \"https://sciencedata.dk/files/personal_folder/textfile2.txt\"\n</code></pre>\n<p>The same function works with dictionaries, lists, Matplotlib's figures and especially Pandas' dataframes. Pandas' dataframe is my favorite. I send there and back 1GB+ dataframes as json files on a daily basis.</p>\n<h3>read_file()</h3>\n<p>On the other side, we have the function <code>sddk.read_file(path_and_filename, object_type)</code>, which enables us to to read our files back to python as chosen python objects. Currently, the function can read only textfiles as strings, and json files as either dictionary, lists or Pandas's dataframes. You have to specify the type of object as the second argument, the values are either \"str\", \"list\", \"dict\" or \"df\" within quotation marks, like in these examples:</p>\n<pre><span class=\"n\">string_object</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s2\">\"test_string.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"str\"</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"n\">string_object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'string content'</span>\n</pre>\n<pre><span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s2\">\"simple_list.json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"n\">list_object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"n\">dict_object</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s2\">\"simple_dict.json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"n\">dict_object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n<pre><span class=\"n\">dataframe_object</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s2\">\"simple_df.json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"df\"</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">a</span>   <span class=\"n\">b</span>   <span class=\"n\">c</span>\n<span class=\"mi\">0</span>  <span class=\"n\">a1</span>  <span class=\"n\">b1</span>  <span class=\"n\">c1</span>\n<span class=\"mi\">1</span>  <span class=\"n\">a2</span>  <span class=\"n\">b2</span>  <span class=\"n\">c2</span>\n</pre>\n<h3>list_filenames()</h3>\n<p>This function enables you to list all files within a directory. You can specify the directory, type of the file you are interested in and the conf variable. For instance, the function belows returns all JSON files within your main directory.</p>\n<pre> <span class=\"n\">sddk</span><span class=\"o\">.</span><span class=\"n\">list_filenames</span><span class=\"p\">(</span><span class=\"n\">filetype</span><span class=\"o\">=</span><span class=\"s2\">\"json\"</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"o\">=</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n</pre>\n<h3>PUT and GET requests in detail</h3>\n<p>In the core of  the<code>write_file()</code>function is the PUT request command. Here is  what it basically does in the case of different types of objects:</p>\n<h5>String to TXT</h5>\n<p>Upload (export) simple text file:</p>\n<pre><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">sddk_url</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"testfile.txt\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s2\">\"textfile content\"</span><span class=\"p\">)</span>\n</pre>\n<p>Get it back (import) to Python:</p>\n<pre><span class=\"n\">string_testfile</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">literal_eval</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"testfile.txt\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">string_testfile</span><span class=\"p\">)</span>\n</pre>\n<h5>Pandas DataFrame to JSON</h5>\n<p>Upload a dataframe as a json file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"s2\">\"a1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c1\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"a2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c2\"</span><span class=\"p\">)],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">])</span> \n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"df.json\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">())</span>\n</pre>\n<p>Get it back:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"df.json\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">())</span>\n</pre>\n<h5>Pandas DataFrame to CSV</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"s2\">\"a1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c1\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"a2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c2\"</span><span class=\"p\">)],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">])</span> \n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">\"df.csv\"</span><span class=\"p\">)</span> <span class=\"c1\">### temporal file</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"df.csv\"</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"df.csv\"</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">))</span>\n</pre>\n<h5>Dictionary to JSON</h5>\n<p>To sciencedata.dk:</p>\n<pre><span class=\"n\">dict_object</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span> <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"mi\">3</span> <span class=\"p\">}</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"dict_file.json\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">dict_object</span><span class=\"p\">))</span>\n</pre>\n<p>From sciencedata.dk:</p>\n<pre><span class=\"n\">dict_object</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"dict_file.json\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</pre>\n<h5>Matplotlib figure to PNG</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'temp.png'</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">dpi</span><span class=\"p\">)</span> <span class=\"c1\">### works even in Google colab</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">sddk_url</span> <span class=\"o\">+</span> <span class=\"s2\">\"temp.png\"</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"temp.png\"</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">))</span>\n</pre>\n<h3>Next steps</h3>\n<ul>\n<li>check string writing and reading</li>\n<li>enabling blind reading of files</li>\n<li>Impement <code>list_files_in_dir(dirpath, conf)</code> function (see <code>sdam-au/OCR/scripts/read_ocr_jsons.ipynb</code>).</li>\n</ul>\n<p>The package is built following <a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">this</a> tutorial.</p>\n<h3>Credit</h3>\n<p>The package is continuously develepod and maintained by <a href=\"http://vojtechkase.cz\" rel=\"nofollow\">Vojt\u011bch Ka\u0161e</a> as a part of the digital collaborative research workflow of the <a href=\"https://sdam-au.github.io/sdam-au/\" rel=\"nofollow\">SDAM project</a> at Aarhus University, Denmark. To cite this package, use:</p>\n<h3>Version history</h3>\n<ul>\n<li>1.8 - <code>list_filenames()</code> function and <code>configure()</code> alias added</li>\n<li>1.7 - figures</li>\n<li>1.6.1 - bug</li>\n<li>1.6 - enables writing dataframes as <code>csv</code></li>\n<li>1.5 - reads individually shared files without necessary configuration</li>\n<li>1.4 - <code>json</code> package dependency</li>\n<li>1.3 - <code>conf</code> corrected</li>\n<li>1.2 - <code>conf</code> variable added</li>\n<li>1.1 - a simple correction</li>\n<li>1.0 -  functions <code>write_file()</code> and <code>read_file()</code> added</li>\n<li>0.1.2 -  redirection added</li>\n<li>0.1.1 - added shared folder owner argument to the main configuration function; migration from test.pypi to real pypi</li>\n<li>0.0.8 - shared folders reading&amp;writing for ordinary users finally functional</li>\n<li>0.0.7 - configuration of individual session by default</li>\n<li>0.0.6 - first functional configuration</li>\n</ul>\n\n          </div>"}, "last_serial": 7180267, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "342a68daa96aabbab3ff0543f64ea1bf", "sha256": "e4dfe56edba5e36d632a73f990b4fffe89f951d9976a33396c66285f48ffe31b"}, "downloads": -1, "filename": "sddk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "342a68daa96aabbab3ff0543f64ea1bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5844, "upload_time": "2020-01-18T19:34:28", "upload_time_iso_8601": "2020-01-18T19:34:28.164356Z", "url": "https://files.pythonhosted.org/packages/ad/14/48f4bd3d9d8a6ccd06fc6d325c57ac7f0a88ebc738e2fe8b3fc01d3f184e/sddk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b40c2a5d3834c0391ff7fd67e592409", "sha256": "f3f614d626f9ea13114a2e190fd8c0cef3b02c566bce4dcb533b0f1a55b6e6a4"}, "downloads": -1, "filename": "sddk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8b40c2a5d3834c0391ff7fd67e592409", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4369, "upload_time": "2020-01-18T19:34:30", "upload_time_iso_8601": "2020-01-18T19:34:30.700753Z", "url": "https://files.pythonhosted.org/packages/c8/f2/2a42f28fa98a17b437b9ea577d5b2a25d3abc2b1d347c2ecd30b21d9fa1e/sddk-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "45c6f26a9edf06ed414911bc5e058e73", "sha256": "56188720f4c39abeac2ca6d1c12494143770822626c0f07c83afd1f8a479f6af"}, "downloads": -1, "filename": "sddk-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45c6f26a9edf06ed414911bc5e058e73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5967, "upload_time": "2020-01-22T10:23:51", "upload_time_iso_8601": "2020-01-22T10:23:51.450780Z", "url": "https://files.pythonhosted.org/packages/b3/50/c7687fbe78679cc743ea71acb21b67db119890a08dde2981d54db0b74470/sddk-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cba7cb356331b3d62f8a77f2648128b", "sha256": "d7096f58f06372c2ec7299117b6910eb64ac6397606a2b8711a994ce850afc40"}, "downloads": -1, "filename": "sddk-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1cba7cb356331b3d62f8a77f2648128b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4535, "upload_time": "2020-01-22T10:23:53", "upload_time_iso_8601": "2020-01-22T10:23:53.020652Z", "url": "https://files.pythonhosted.org/packages/42/1a/c2755f89b1a305e4efe8b23762d065a351762884dcb72e90baa01360465d/sddk-0.1.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "6eb0dcb67304925d0d0e9f1eadd4e48b", "sha256": "349775f90b14f413ab4fde222aaa657366578065c6285c98cefced6b495f49a2"}, "downloads": -1, "filename": "sddk-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6eb0dcb67304925d0d0e9f1eadd4e48b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8076, "upload_time": "2020-02-02T20:22:04", "upload_time_iso_8601": "2020-02-02T20:22:04.670493Z", "url": "https://files.pythonhosted.org/packages/c9/61/30b0f53e55f91d3805b6435af7cff5e4d987fb665ca1fca4b2ef66f08c36/sddk-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "500fac4d8017c99ed905b99d8a024325", "sha256": "5416109816d335febf8be1b8e3b2198c9f5bcd7ee7c96c6317a6cb6ab2b6b74b"}, "downloads": -1, "filename": "sddk-1.0.tar.gz", "has_sig": false, "md5_digest": "500fac4d8017c99ed905b99d8a024325", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6668, "upload_time": "2020-02-02T20:22:06", "upload_time_iso_8601": "2020-02-02T20:22:06.114853Z", "url": "https://files.pythonhosted.org/packages/0f/94/e83949a1a1e45c442291713ae2435119f8f6761773f9a276937f63a0e062/sddk-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "7ab67e3834ecfbdb754f057bbdb7e58d", "sha256": "74b7483d6c9ae3134f36d976847ef5f52673b7455682f315fdc6992fb3cbc7dd"}, "downloads": -1, "filename": "sddk-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7ab67e3834ecfbdb754f057bbdb7e58d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8103, "upload_time": "2020-02-03T10:59:38", "upload_time_iso_8601": "2020-02-03T10:59:38.950413Z", "url": "https://files.pythonhosted.org/packages/34/73/fb9d860d6c4aa6df025dcad64bbb566463b0e2a6b1935f746044f4a6b94f/sddk-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16f379ae06b02416a48eba383369ed94", "sha256": "d8dc469f3059f46ed6c6fdb669c361df4677bb8f53658d5421ca9a2b2765a21c"}, "downloads": -1, "filename": "sddk-1.1.tar.gz", "has_sig": false, "md5_digest": "16f379ae06b02416a48eba383369ed94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7291, "upload_time": "2020-02-03T10:59:41", "upload_time_iso_8601": "2020-02-03T10:59:41.586782Z", "url": "https://files.pythonhosted.org/packages/0f/dd/d65807e2475dafba028fc873a425c4a03cab78b131d38c64c58b8d541fae/sddk-1.1.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "503e146d5fef06d80f45ed6f958375e1", "sha256": "0b19688f6bbe4c4f88e781ccf2744dfb523edee42baa83fdc41f45340f6fd39a"}, "downloads": -1, "filename": "sddk-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "503e146d5fef06d80f45ed6f958375e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8243, "upload_time": "2020-02-03T13:43:45", "upload_time_iso_8601": "2020-02-03T13:43:45.869945Z", "url": "https://files.pythonhosted.org/packages/e3/2c/292a968d00f825e0382ffaf285ed8a2161c9ff6f47a3db45fb43d199fc31/sddk-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21fbf0957217cc9aca4039dbfdfa5722", "sha256": "9c4a0ff63f423cd3dfb6c0561713285012a472fe0037b16c7cc2cef91d1445be"}, "downloads": -1, "filename": "sddk-1.3.tar.gz", "has_sig": false, "md5_digest": "21fbf0957217cc9aca4039dbfdfa5722", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6809, "upload_time": "2020-02-03T13:43:48", "upload_time_iso_8601": "2020-02-03T13:43:48.938465Z", "url": "https://files.pythonhosted.org/packages/42/95/e950297b8c9c63eb5275a49fa2affd89164f21987eac071796141764fc3f/sddk-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "6c45b18f7ea0405e9f3e9357ae54b74b", "sha256": "81070151a4983d5ae7eb37643768c6b128fbb9fe451a02366c75f982bdc47205"}, "downloads": -1, "filename": "sddk-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c45b18f7ea0405e9f3e9357ae54b74b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8272, "upload_time": "2020-02-03T14:04:06", "upload_time_iso_8601": "2020-02-03T14:04:06.445454Z", "url": "https://files.pythonhosted.org/packages/aa/1b/5990da26e8476351772ea371236554cbb19a03f6baf7c5fff23b3cf63e6c/sddk-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a20d849c4bc6f6840c9a91fedf3c00e0", "sha256": "eca1c998a931ef8a9af1b1aababa5b111e18694afa4c6d2fd3dd3244f564c0f2"}, "downloads": -1, "filename": "sddk-1.3.1.tar.gz", "has_sig": false, "md5_digest": "a20d849c4bc6f6840c9a91fedf3c00e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6808, "upload_time": "2020-02-03T14:04:09", "upload_time_iso_8601": "2020-02-03T14:04:09.882165Z", "url": "https://files.pythonhosted.org/packages/d6/74/a0aa06aabb06267d7f65a91ef1fcfab23645b3007bd475af2d39bd184140/sddk-1.3.1.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "125284758649244a2e9e8e2d695702fb", "sha256": "b1c06b0cf3d1d46816e36ccb05d16edcf3b3620d0dca2038c943fc8cc6540077"}, "downloads": -1, "filename": "sddk-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "125284758649244a2e9e8e2d695702fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8273, "upload_time": "2020-02-04T14:35:25", "upload_time_iso_8601": "2020-02-04T14:35:25.598784Z", "url": "https://files.pythonhosted.org/packages/f7/8a/19a31efdde93d428d400d79fd29fe74b866acbdb66a803aad29020d02da7/sddk-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf7d73706907486120b41011c5e01720", "sha256": "c4c3a8c528c8b965538b65964ba0aa930e02aa0bb7666771508e958e848b2185"}, "downloads": -1, "filename": "sddk-1.4.tar.gz", "has_sig": false, "md5_digest": "bf7d73706907486120b41011c5e01720", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6968, "upload_time": "2020-02-04T14:35:27", "upload_time_iso_8601": "2020-02-04T14:35:27.192609Z", "url": "https://files.pythonhosted.org/packages/08/06/fb17cdaedb380f5a3a8bb60aa45f80ffb570f238fc5bb917e2096d65ed02/sddk-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "563ff1321a230f54a438c32703f653fd", "sha256": "48462dc73b5f2ae9f6e8a1ef709deaf16c6c3266540b20f60bbde1bda198310f"}, "downloads": -1, "filename": "sddk-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "563ff1321a230f54a438c32703f653fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8379, "upload_time": "2020-02-25T10:36:21", "upload_time_iso_8601": "2020-02-25T10:36:21.281357Z", "url": "https://files.pythonhosted.org/packages/70/41/fd0ce5f1cda2b4826f85db5d4d7f2f6c46c2affe29eb28c33b99fabdf427/sddk-1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf9ed5cbfbb3327b5758318f2a9207c0", "sha256": "349fb30256855df53858dc22b794b5a488f11f6230654c28d88759a1b44606bc"}, "downloads": -1, "filename": "sddk-1.5.tar.gz", "has_sig": false, "md5_digest": "cf9ed5cbfbb3327b5758318f2a9207c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7687, "upload_time": "2020-02-25T10:36:22", "upload_time_iso_8601": "2020-02-25T10:36:22.686785Z", "url": "https://files.pythonhosted.org/packages/c4/1c/744014516db0b7c1f281feecffbd4233e17df10ccfa4339f937bf44120c2/sddk-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "d7b30e413c10beb466a1dcbf19e90042", "sha256": "6035f35117ece1a6ea8477b4677428fbacdabf3c6137c9810ea660b37a8348c5"}, "downloads": -1, "filename": "sddk-1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d7b30e413c10beb466a1dcbf19e90042", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8450, "upload_time": "2020-02-27T08:19:26", "upload_time_iso_8601": "2020-02-27T08:19:26.162087Z", "url": "https://files.pythonhosted.org/packages/c8/07/2eb27bc0fe806effd6aceadf8f062c3aa81bf217c66a5835cfc220668e25/sddk-1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6622873a0ff5c9c885ac4fbc2a69e2a7", "sha256": "03c3b05caecd64ebd2cd2aba2ee21f98ae5d0d4438e100f202b57727100ed780"}, "downloads": -1, "filename": "sddk-1.6.tar.gz", "has_sig": false, "md5_digest": "6622873a0ff5c9c885ac4fbc2a69e2a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7139, "upload_time": "2020-02-27T08:19:27", "upload_time_iso_8601": "2020-02-27T08:19:27.662496Z", "url": "https://files.pythonhosted.org/packages/78/b7/b77c073d93a894913045ea2bf2fcbf74d6cf5712238ec8edf57347489944/sddk-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "fb2c3b6f341ee8d1a05df1a3febb2bc4", "sha256": "37727bf4e22ee302ab2c214c6e5434635859ed0c0e85b9c6947234b2de40a43d"}, "downloads": -1, "filename": "sddk-1.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fb2c3b6f341ee8d1a05df1a3febb2bc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8477, "upload_time": "2020-02-27T12:23:50", "upload_time_iso_8601": "2020-02-27T12:23:50.543146Z", "url": "https://files.pythonhosted.org/packages/34/30/92ab5e6e5ea4b2b5155fe2da6c95869b5c6a4de4e0c92ee7009cd41cc0cf/sddk-1.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "764138ffc54460d5546755e973dea526", "sha256": "c3c2756b2e078bc7fd7d82d43567fc6832ffd04fd07bbbeebbef4f118205705f"}, "downloads": -1, "filename": "sddk-1.6.1.tar.gz", "has_sig": false, "md5_digest": "764138ffc54460d5546755e973dea526", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7127, "upload_time": "2020-02-27T12:23:52", "upload_time_iso_8601": "2020-02-27T12:23:52.467470Z", "url": "https://files.pythonhosted.org/packages/a7/05/7c14fe11b060a658f06d941d8f9dce2b94d1f0193e161cb97059075412ce/sddk-1.6.1.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "ffbea91263e6c8109cccac9161549d56", "sha256": "8f2339f7f3acb8d987ab0fa00486b930d82e9b0d7a6c417b2d7ed8462512a36d"}, "downloads": -1, "filename": "sddk-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ffbea91263e6c8109cccac9161549d56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8459, "upload_time": "2020-04-01T08:30:41", "upload_time_iso_8601": "2020-04-01T08:30:41.793552Z", "url": "https://files.pythonhosted.org/packages/db/e2/ee34c0cb0e1001f228eb898187ff65b1c7e3137cd715d8c1aa7458ac656e/sddk-1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b397e10968e120917a471703b4cbd826", "sha256": "7b26411472ef1c5c748049f2873b032cbb40181bdd1a6609557540276223b2d1"}, "downloads": -1, "filename": "sddk-1.7.tar.gz", "has_sig": false, "md5_digest": "b397e10968e120917a471703b4cbd826", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7188, "upload_time": "2020-04-01T08:30:43", "upload_time_iso_8601": "2020-04-01T08:30:43.556125Z", "url": "https://files.pythonhosted.org/packages/b8/12/99e8cdb3cd30870d2ec2f7a876b8609edf0e81a1d8a02e61cc2ca4301052/sddk-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "319fc4333131cd8d0649c670c43251bb", "sha256": "16ad577c3daa8cb134e6df02fb3f8db08d199d4456d666b7277c690d2a302bfe"}, "downloads": -1, "filename": "sddk-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "319fc4333131cd8d0649c670c43251bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8861, "upload_time": "2020-05-06T13:21:50", "upload_time_iso_8601": "2020-05-06T13:21:50.220069Z", "url": "https://files.pythonhosted.org/packages/38/26/302fde4c663c1643f5bf486aa0d7ea22cf2a61de71f49961991d511ff525/sddk-1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "560047b6da5bfd404a6ecbf3e52578f9", "sha256": "f6545d33fdb8e411619a60592860e102cde9ebfac5a35b84a010a7767aac7abf"}, "downloads": -1, "filename": "sddk-1.8.tar.gz", "has_sig": false, "md5_digest": "560047b6da5bfd404a6ecbf3e52578f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7582, "upload_time": "2020-05-06T13:21:51", "upload_time_iso_8601": "2020-05-06T13:21:51.988563Z", "url": "https://files.pythonhosted.org/packages/f8/de/d5897a802d2c142c674ec775b212e210e9518983b34da691f3b3c09944e1/sddk-1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "319fc4333131cd8d0649c670c43251bb", "sha256": "16ad577c3daa8cb134e6df02fb3f8db08d199d4456d666b7277c690d2a302bfe"}, "downloads": -1, "filename": "sddk-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "319fc4333131cd8d0649c670c43251bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 8861, "upload_time": "2020-05-06T13:21:50", "upload_time_iso_8601": "2020-05-06T13:21:50.220069Z", "url": "https://files.pythonhosted.org/packages/38/26/302fde4c663c1643f5bf486aa0d7ea22cf2a61de71f49961991d511ff525/sddk-1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "560047b6da5bfd404a6ecbf3e52578f9", "sha256": "f6545d33fdb8e411619a60592860e102cde9ebfac5a35b84a010a7767aac7abf"}, "downloads": -1, "filename": "sddk-1.8.tar.gz", "has_sig": false, "md5_digest": "560047b6da5bfd404a6ecbf3e52578f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7582, "upload_time": "2020-05-06T13:21:51", "upload_time_iso_8601": "2020-05-06T13:21:51.988563Z", "url": "https://files.pythonhosted.org/packages/f8/de/d5897a802d2c142c674ec775b212e210e9518983b34da691f3b3c09944e1/sddk-1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:19 2020"}