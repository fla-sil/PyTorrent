{"info": {"author": "Brett Haydon", "author_email": "brett@haydon.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "===============================\nAuth0+ python\n===============================\n\n\n.. image:: https://img.shields.io/pypi/v/auth0plus.svg\n        :target: https://pypi.python.org/pypi/auth0plus\n\n.. image:: https://img.shields.io/travis/bretth/auth0plus.svg\n        :target: https://travis-ci.org/bretth/auth0plus\n\n.. image:: https://coveralls.io/repos/github/bretth/auth0plus/badge.svg?branch=master :target: https://coveralls.io/github/bretth/auth0plus?branch=master\n\n\nAn unofficial python interface for the Auth0 management api v2 that speeds up integration in python projects.\n\n* Free software: ISC license\n\n\nInstallation\n------------\n::\n\n    $ pip install auth0plus\n\nUsage\n------\n\nWe'll get started with the simplest scenario which is using Auth0 to store a database of users to authenticate against. For this you need to configure a domain and a non-interactive client to access a connection (database). You will also need a JSON web token (jwt) for the client application to access the parts of the api you specify (scopes). This can be generated manually or as I will show here it can be programmatically granted every 24 hours by a separate call to an oauth/token endpoint:\n\n- Login to auth0.com\n- Go to the `clients menu <https://manage.auth0.com/#/clients>`_\n- Create a client and click on it's settings to get the *Domain* *Client ID* and *Client Secret*\n- Go to the `APIs menu <https://manage.auth0.com/#/apis>`_ and click *Auth0 Management API*\n- Click *Non Interactive Clients* and authorise your client then expand the selection to select scopes.\n- Select read:users, update:users, delete:users, create:users, read:users_app_metadata, update:users_app_metadata, delete:users_app_metadata, create:users_app_metadata and create:user_tickets then *update*.\n\nFor more information on the above process read `<https://auth0.com/docs/api/management/v2/tokens>`_.\n\nIn your code import the Auth0 class.\n::\n    >>> from auth0plus.management import Auth0\n    >>> from auth0plus.oauth import get_token\n\nThis example doctest uses python-dotenv to hold the secrets and variables in a .env file. You can configure and run it your self with **make doctests**.\n::\n    >>> import os\n    >>> from dotenv import load_dotenv\n    >>> load_dotenv('.env')\n    True\n    >>> domain = os.getenv('DOMAIN')\n    >>> client_id = os.getenv('CLIENT_ID')\n    >>> client_secret = os.getenv('CLIENT_SECRET')\n    >>> db = os.getenv('CONNECTION')\n\nGet the 24 hour jwt token dictionary which you would normally store somewhere::\n\n    >>> token = get_token(domain, client_id, client_secret)\n\nCreate the lazy connection. We're going to connect to a database backed store.\n::\n    >>> auth0 = Auth0(domain, token['access_token'], client_id=client_id, default_connection=db)\n\nThe api follows the documented api for v2. So the endpoint of /api/v2/users is going to be *auth0.users*, and to get an empty user instance you would call the constructor.\n::\n    >>> user = auth0.users()\n\nNow we'll actually create a few users for my 4 year old's favourite band:\n\n1. In one step using the endpoint *create* method.\n::\n    >>> angus = auth0.users.create(email='angus.young@acdc.com', email_verified=True,\n    ...     password='Jailbreak', user_metadata={'family_name': 'Young'})\n\n2. With the convience *get_or_create* method which follows the django equivalent.\n::\n    >>> malcolm, created = auth0.users.get_or_create(\n    ...     defaults={'email_verified': True, 'password': 'ChuckB',\n    ...     'user_metadata': {'family_name': 'Young'}}, email='malcolm.young@acdc.com')\n    >>> malcolm.user_metadata\n    {'family_name': 'Young'}\n    >>> malcolm.picture\n    'https://s.gravatar.com/avatar/...'\n\n3. In two steps with init and *save*.\n::\n    >>> singer = auth0.users(email='dave.evans@acdc.com', email_verified=True,\n    ...     password='CanISitNextToYouGirl')\n    >>> singer.save()\n    >>> print(singer.user_id)\n    auth0|...\n\n*Save* also updates the user (which may need to make multiple calls to the endpoint).\n::\n    >>> singer.email = 'bon.scott@acdc.com'\n    >>> singer.password = 'HighwayToHell'\n    >>> singer.save()\n\nOne thing to note is that the password is not available once it's saved.\n::\n    >>> singer.password\n    Traceback (most recent call last):\n      File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/doctest.py\", line 1320, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest README.rst[21]>\", line 1, in <module>\n        singer.password\n      File \".../auth0plus/auth0plus/management/users.py\", line 118, in password\n        raise AttributeError(\"'User' object does not have a new password\")\n    AttributeError: 'User' object does not have a new password\n\nTo distinguish between a User instance that has been created locally and one that has been fetched from Auth0 the boolean attribute *_fetched* determines whether saving the record would be an update (*True*) or a create (*False*).\n\nThe *get* classmethod allows returning a single instance, and class specific *ObjectDoesNotExist* exception (*User.DoesNotExist*) if it doesn't exist.\n::\n    >>> try:\n    ...     brian = auth0.users.get(email='brian.johnson@acdc.com')\n    ... except auth0.users.DoesNotExist as err:\n    ...     print(err)\n    User Does Not Exist\n\n    >>> brian, created = auth0.users.get_or_create(\n    ...     defaults={'email_verified': True, 'password': 'BackInBlack'},\n    ...     email='brian.johnson@acdc.com')\n\n\nThe *get* method uses the auth0 lucene search which means for anything other than the id you can potentially get multiple results (and a *MultipleObjectsReturned* exception), but beware you also need to ensure enough time has passed for newly created users to be indexed.\n::\n    >>> from auth0plus.exceptions import MultipleObjectsReturned\n    >>> import time\n    >>> time.sleep(5)\n    >>> try:\n    ...     singers = auth0.users.get(email='b*')\n    ... except MultipleObjectsReturned as err:\n    ...     print(err)\n    User.get returned multiple users\n\nWhen you actually want multiple results use a *query* or *all* which return a sliceable lazy object.\n::\n    >>> singers = auth0.users.query(email='b*')\n    >>> singers.count()  # the total returned by include_totals=true, no iteration necessary\n    2\n    >>> singers[:]  # evaluate the whole query\n    [<User auth0|...>, <User auth0|...>]\n\nYou can also construct your own 'q' syntax instead of keyword arguments and pass additional endpoint parameters. In this case we'll just get the user_id and email.\n::\n    >>> brothers = auth0.users.query(\n    ...     q='user_metadata.family_name:\"Young\"',\n    ...     fields='user_id,email')\n    >>> brothers.count()\n    2\n\nIf you want to do something with the user data returned then *as_dict* is your friend.\n::\n    >>> serialized = brothers[0].as_dict()\n\nTo maintain state such as whether it has been *_fetched* from auth0 you would pickle the instance, otherwise *as_dict* is the safer choice to reconstitute the object making no assumptions about any changes that might have been made.\n::\n    >>> new_angus = auth0.users(**serialized)\n    >>> new_angus.password = 'MoneyTrain'\n    >>> from auth0plus.exceptions import Auth0Error\n    >>> try:\n    ...     new_angus.save()\n    ... except Auth0Error as err:\n    ...     print(err)\n    400: The user already exists.\n\nDelete instances with classmethods or instance method.\n::\n    >>> singer.delete()  # Remove Bon Scott\n    >>> auth0.users.delete(brian.get_id())\n\nGet all the remaining band members (and delete them). Sorry Angus, it's time to retire.\n::\n    >>> band = auth0.users.all()\n    >>> band.count()\n    2\n    >>> for member in band:\n    ...     member.delete()\n\n\nCredits\n---------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.3.0 (09-May-2017)\n--------------------\n\n* Add get_token function to work with the new temporary client tokens\n\n0.2.4 (20-June-2016)\n--------------------\n\n* Fix issue with pickling\n* Fix issue with shared nested dictionary\n\n0.2.3 (10-May-2016)\n-------------------\n\n* And so does unicode\n\n0.2.2 (10-May-2016)\n-------------------\n\n* Setuptools always catches me out\n\n0.2.1 (05-May-2016)\n-------------------\n\n* Fix issue with get and save flow\n\n0.2.0 (04-May-2016)\n-------------------\n\n* Package as wheel\n* Import auth0 from auth0plus.management\n\n0.1.0 (01-May-2016)\n-------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bretth/auth0plus", "keywords": "auth0plus", "license": "ISCL", "maintainer": "", "maintainer_email": "", "name": "auth0plus", "package_url": "https://pypi.org/project/auth0plus/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/auth0plus/", "project_urls": {"Homepage": "https://github.com/bretth/auth0plus"}, "release_url": "https://pypi.org/project/auth0plus/0.3.0/", "requires_dist": ["combomethod", "requests"], "requires_python": "", "summary": "Unofficial enhancements to the Auth0-python package", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===============================<br>Auth0+ python<br>===============================<br><br><br>.. image:: https://img.shields.io/pypi/v/auth0plus.svg<br>        :target: https://pypi.python.org/pypi/auth0plus<br><br>.. image:: https://img.shields.io/travis/bretth/auth0plus.svg<br>        :target: https://travis-ci.org/bretth/auth0plus<br><br>.. image:: https://coveralls.io/repos/github/bretth/auth0plus/badge.svg?branch=master :target: https://coveralls.io/github/bretth/auth0plus?branch=master<br><br><br>An unofficial python interface for the Auth0 management api v2 that speeds up integration in python projects.<br><br>* Free software: ISC license<br><br><br>Installation<br>------------<br>::<br><br>    $ pip install auth0plus<br><br>Usage<br>------<br><br>We'll get started with the simplest scenario which is using Auth0 to store a database of users to authenticate against. For this you need to configure a domain and a non-interactive client to access a connection (database). You will also need a JSON web token (jwt) for the client application to access the parts of the api you specify (scopes). This can be generated manually or as I will show here it can be programmatically granted every 24 hours by a separate call to an oauth/token endpoint:<br><br>- Login to auth0.com<br>- Go to the `clients menu &lt;https://manage.auth0.com/#/clients&gt;`_<br>- Create a client and click on it's settings to get the *Domain* *Client ID* and *Client Secret*<br>- Go to the `APIs menu &lt;https://manage.auth0.com/#/apis&gt;`_ and click *Auth0 Management API*<br>- Click *Non Interactive Clients* and authorise your client then expand the selection to select scopes.<br>- Select read:users, update:users, delete:users, create:users, read:users_app_metadata, update:users_app_metadata, delete:users_app_metadata, create:users_app_metadata and create:user_tickets then *update*.<br><br>For more information on the above process read `&lt;https://auth0.com/docs/api/management/v2/tokens&gt;`_.<br><br>In your code import the Auth0 class.<br>::<br>    &gt;&gt;&gt; from auth0plus.management import Auth0<br>    &gt;&gt;&gt; from auth0plus.oauth import get_token<br><br>This example doctest uses python-dotenv to hold the secrets and variables in a .env file. You can configure and run it your self with **make doctests**.<br>::<br>    &gt;&gt;&gt; import os<br>    &gt;&gt;&gt; from dotenv import load_dotenv<br>    &gt;&gt;&gt; load_dotenv('.env')<br>    True<br>    &gt;&gt;&gt; domain = os.getenv('DOMAIN')<br>    &gt;&gt;&gt; client_id = os.getenv('CLIENT_ID')<br>    &gt;&gt;&gt; client_secret = os.getenv('CLIENT_SECRET')<br>    &gt;&gt;&gt; db = os.getenv('CONNECTION')<br><br>Get the 24 hour jwt token dictionary which you would normally store somewhere::<br><br>    &gt;&gt;&gt; token = get_token(domain, client_id, client_secret)<br><br>Create the lazy connection. We're going to connect to a database backed store.<br>::<br>    &gt;&gt;&gt; auth0 = Auth0(domain, token['access_token'], client_id=client_id, default_connection=db)<br><br>The api follows the documented api for v2. So the endpoint of /api/v2/users is going to be *auth0.users*, and to get an empty user instance you would call the constructor.<br>::<br>    &gt;&gt;&gt; user = auth0.users()<br><br>Now we'll actually create a few users for my 4 year old's favourite band:<br><br>1. In one step using the endpoint *create* method.<br>::<br>    &gt;&gt;&gt; angus = auth0.users.create(email='angus.young@acdc.com', email_verified=True,<br>    ...     password='Jailbreak', user_metadata={'family_name': 'Young'})<br><br>2. With the convience *get_or_create* method which follows the django equivalent.<br>::<br>    &gt;&gt;&gt; malcolm, created = auth0.users.get_or_create(<br>    ...     defaults={'email_verified': True, 'password': 'ChuckB',<br>    ...     'user_metadata': {'family_name': 'Young'}}, email='malcolm.young@acdc.com')<br>    &gt;&gt;&gt; malcolm.user_metadata<br>    {'family_name': 'Young'}<br>    &gt;&gt;&gt; malcolm.picture<br>    'https://s.gravatar.com/avatar/...'<br><br>3. In two steps with init and *save*.<br>::<br>    &gt;&gt;&gt; singer = auth0.users(email='dave.evans@acdc.com', email_verified=True,<br>    ...     password='CanISitNextToYouGirl')<br>    &gt;&gt;&gt; singer.save()<br>    &gt;&gt;&gt; print(singer.user_id)<br>    auth0|...<br><br>*Save* also updates the user (which may need to make multiple calls to the endpoint).<br>::<br>    &gt;&gt;&gt; singer.email = 'bon.scott@acdc.com'<br>    &gt;&gt;&gt; singer.password = 'HighwayToHell'<br>    &gt;&gt;&gt; singer.save()<br><br>One thing to note is that the password is not available once it's saved.<br>::<br>    &gt;&gt;&gt; singer.password<br>    Traceback (most recent call last):<br>      File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/doctest.py\", line 1320, in __run<br>        compileflags, 1), test.globs)<br>      File \"&lt;doctest README.rst[21]&gt;\", line 1, in &lt;module&gt;<br>        singer.password<br>      File \".../auth0plus/auth0plus/management/users.py\", line 118, in password<br>        raise AttributeError(\"'User' object does not have a new password\")<br>    AttributeError: 'User' object does not have a new password<br><br>To distinguish between a User instance that has been created locally and one that has been fetched from Auth0 the boolean attribute *_fetched* determines whether saving the record would be an update (*True*) or a create (*False*).<br><br>The *get* classmethod allows returning a single instance, and class specific *ObjectDoesNotExist* exception (*User.DoesNotExist*) if it doesn't exist.<br>::<br>    &gt;&gt;&gt; try:<br>    ...     brian = auth0.users.get(email='brian.johnson@acdc.com')<br>    ... except auth0.users.DoesNotExist as err:<br>    ...     print(err)<br>    User Does Not Exist<br><br>    &gt;&gt;&gt; brian, created = auth0.users.get_or_create(<br>    ...     defaults={'email_verified': True, 'password': 'BackInBlack'},<br>    ...     email='brian.johnson@acdc.com')<br><br><br>The *get* method uses the auth0 lucene search which means for anything other than the id you can potentially get multiple results (and a *MultipleObjectsReturned* exception), but beware you also need to ensure enough time has passed for newly created users to be indexed.<br>::<br>    &gt;&gt;&gt; from auth0plus.exceptions import MultipleObjectsReturned<br>    &gt;&gt;&gt; import time<br>    &gt;&gt;&gt; time.sleep(5)<br>    &gt;&gt;&gt; try:<br>    ...     singers = auth0.users.get(email='b*')<br>    ... except MultipleObjectsReturned as err:<br>    ...     print(err)<br>    User.get returned multiple users<br><br>When you actually want multiple results use a *query* or *all* which return a sliceable lazy object.<br>::<br>    &gt;&gt;&gt; singers = auth0.users.query(email='b*')<br>    &gt;&gt;&gt; singers.count()  # the total returned by include_totals=true, no iteration necessary<br>    2<br>    &gt;&gt;&gt; singers[:]  # evaluate the whole query<br>    [&lt;User auth0|...&gt;, &lt;User auth0|...&gt;]<br><br>You can also construct your own 'q' syntax instead of keyword arguments and pass additional endpoint parameters. In this case we'll just get the user_id and email.<br>::<br>    &gt;&gt;&gt; brothers = auth0.users.query(<br>    ...     q='user_metadata.family_name:\"Young\"',<br>    ...     fields='user_id,email')<br>    &gt;&gt;&gt; brothers.count()<br>    2<br><br>If you want to do something with the user data returned then *as_dict* is your friend.<br>::<br>    &gt;&gt;&gt; serialized = brothers[0].as_dict()<br><br>To maintain state such as whether it has been *_fetched* from auth0 you would pickle the instance, otherwise *as_dict* is the safer choice to reconstitute the object making no assumptions about any changes that might have been made.<br>::<br>    &gt;&gt;&gt; new_angus = auth0.users(**serialized)<br>    &gt;&gt;&gt; new_angus.password = 'MoneyTrain'<br>    &gt;&gt;&gt; from auth0plus.exceptions import Auth0Error<br>    &gt;&gt;&gt; try:<br>    ...     new_angus.save()<br>    ... except Auth0Error as err:<br>    ...     print(err)<br>    400: The user already exists.<br><br>Delete instances with classmethods or instance method.<br>::<br>    &gt;&gt;&gt; singer.delete()  # Remove Bon Scott<br>    &gt;&gt;&gt; auth0.users.delete(brian.get_id())<br><br>Get all the remaining band members (and delete them). Sorry Angus, it's time to retire.<br>::<br>    &gt;&gt;&gt; band = auth0.users.all()<br>    &gt;&gt;&gt; band.count()<br>    2<br>    &gt;&gt;&gt; for member in band:<br>    ...     member.delete()<br><br><br>Credits<br>---------<br><br>This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.<br><br>.. _Cookiecutter: https://github.com/audreyr/cookiecutter<br>.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage<br><br><br>=======<br>History<br>=======<br><br>0.3.0 (09-May-2017)<br>--------------------<br><br>* Add get_token function to work with the new temporary client tokens<br><br>0.2.4 (20-June-2016)<br>--------------------<br><br>* Fix issue with pickling<br>* Fix issue with shared nested dictionary<br><br>0.2.3 (10-May-2016)<br>-------------------<br><br>* And so does unicode<br><br>0.2.2 (10-May-2016)<br>-------------------<br><br>* Setuptools always catches me out<br><br>0.2.1 (05-May-2016)<br>-------------------<br><br>* Fix issue with get and save flow<br><br>0.2.0 (04-May-2016)<br>-------------------<br><br>* Package as wheel<br>* Import auth0 from auth0plus.management<br><br>0.1.0 (01-May-2016)<br>-------------------<br><br>* First release on PyPI.\n          </div>"}, "last_serial": 2860516, "releases": {"0.1.0": [], "0.2.0": [{"comment_text": "", "digests": {"md5": "ad554222ada488c55052c12fe10b9160", "sha256": "1382aa56352e740871ee60f4340f21f9fec2637a409d20bced9361c708ac42aa"}, "downloads": -1, "filename": "auth0plus-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad554222ada488c55052c12fe10b9160", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8119, "upload_time": "2016-05-05T05:32:43", "upload_time_iso_8601": "2016-05-05T05:32:43.107987Z", "url": "https://files.pythonhosted.org/packages/75/9a/56b40abca4fbd4df7f4b72e4886d7926cf3b1d9b0e63c12b1dea2bfc5638/auth0plus-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87093fdd18c113f1462a0e426c4e506a", "sha256": "6ec0058a84e7cc2f0517fd1764d4a9e91711fe05c87dccc0ca6fb58b07327689"}, "downloads": -1, "filename": "auth0plus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "87093fdd18c113f1462a0e426c4e506a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13137, "upload_time": "2016-05-05T05:32:35", "upload_time_iso_8601": "2016-05-05T05:32:35.825292Z", "url": "https://files.pythonhosted.org/packages/14/64/13eddc5039af05fcbfd87c684f1c4cce36f8f9f5dbedc3419c8fead3fb1d/auth0plus-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "2cb2e1fc7205036bcdc36edc0b84f969", "sha256": "c18f27fedd4d4c1d67f556e75faec2907b2019b8c57b776e6bead9bd3b69b9cf"}, "downloads": -1, "filename": "auth0plus-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2cb2e1fc7205036bcdc36edc0b84f969", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8172, "upload_time": "2016-05-05T06:19:05", "upload_time_iso_8601": "2016-05-05T06:19:05.474777Z", "url": "https://files.pythonhosted.org/packages/cb/ba/27e0e7f981c5e1499a3b42a23eb90c8469801b03da05af2669a3774c2eb9/auth0plus-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "513c93154d498ddf128434f766fc81f4", "sha256": "943b7baae989779e2d7ae6be374a4ba165120a5bc24ec40e0a2c890a1ced7d6a"}, "downloads": -1, "filename": "auth0plus-0.2.1.tar.gz", "has_sig": false, "md5_digest": "513c93154d498ddf128434f766fc81f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13158, "upload_time": "2016-05-05T06:18:56", "upload_time_iso_8601": "2016-05-05T06:18:56.571346Z", "url": "https://files.pythonhosted.org/packages/fe/e9/d50625fecc8ed09d77395e1c19297bb41c5e058a2158e2e2d0d724c4746f/auth0plus-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "fb1661fe961ca70c920ab5956c8ee70f", "sha256": "7568aa7192c1d3e6d26980699fe7207dd0fcb918a67e6f36ac8d587827156e31"}, "downloads": -1, "filename": "auth0plus-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb1661fe961ca70c920ab5956c8ee70f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15674, "upload_time": "2016-05-10T02:37:14", "upload_time_iso_8601": "2016-05-10T02:37:14.855095Z", "url": "https://files.pythonhosted.org/packages/e6/5e/8d1b27cd0695c065b547801bc900f507212e7e7aab91dd4553b1237e6cf4/auth0plus-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7422216d0b0002f48a1de68d06b455af", "sha256": "e649315a071dd56391911c9f23ede93096e551221d7b5c50a07e3bc7a394e1ab"}, "downloads": -1, "filename": "auth0plus-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7422216d0b0002f48a1de68d06b455af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18496, "upload_time": "2016-05-10T02:36:50", "upload_time_iso_8601": "2016-05-10T02:36:50.249061Z", "url": "https://files.pythonhosted.org/packages/e3/f0/4f9e39ddc65d2995afd811da928e29d27406e682a66011dd15195becb7da/auth0plus-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5dab08e0805c25363e94e8b6b7e6f341", "sha256": "0a588bad0a89b63e2423e34184a8037e8ea2a6f9460d95a55f7a1978a3f27be3"}, "downloads": -1, "filename": "auth0plus-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5dab08e0805c25363e94e8b6b7e6f341", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15705, "upload_time": "2016-05-10T04:11:33", "upload_time_iso_8601": "2016-05-10T04:11:33.774611Z", "url": "https://files.pythonhosted.org/packages/b6/b5/46a347cf3557967876438edc9d3c5bb0e1e8d4ba78132af7fdb425636b07/auth0plus-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "277142017171ea625419d5897028e6fc", "sha256": "277c34988be75be2d0383bc3c186259bffccfb7e8819ced309e8832c63bcdf3a"}, "downloads": -1, "filename": "auth0plus-0.2.3.tar.gz", "has_sig": false, "md5_digest": "277142017171ea625419d5897028e6fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18535, "upload_time": "2016-05-10T04:11:26", "upload_time_iso_8601": "2016-05-10T04:11:26.774984Z", "url": "https://files.pythonhosted.org/packages/a4/02/55bfd45a71a5a3753954a3d1f4d94e1c4125b7e0922cea6bb80db56a3008/auth0plus-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c859d548c5990a025d625a803d644cff", "sha256": "9145b9ea651c75708d0a6a7649f16d8da432f4e69ef3a9bfe3228a8c1176b8a3"}, "downloads": -1, "filename": "auth0plus-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c859d548c5990a025d625a803d644cff", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 16288, "upload_time": "2016-06-19T21:11:25", "upload_time_iso_8601": "2016-06-19T21:11:25.572160Z", "url": "https://files.pythonhosted.org/packages/b2/41/c41b28bdc59127aa005b2837c41e0cc4680dc8138fa05f0a7a3a6c3d519c/auth0plus-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb08979ebc08aec3a4e113967b10df94", "sha256": "735871de47752a48149a523f71503b6c0d962697e4df37fd9b4b260c41d86fdb"}, "downloads": -1, "filename": "auth0plus-0.2.4.tar.gz", "has_sig": false, "md5_digest": "fb08979ebc08aec3a4e113967b10df94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18845, "upload_time": "2016-06-19T21:11:17", "upload_time_iso_8601": "2016-06-19T21:11:17.921572Z", "url": "https://files.pythonhosted.org/packages/2e/b6/9588ed96ec699b5dd1ae9ad38553e1f43b6c3001533ad1f85b04cd2402f2/auth0plus-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "90d93219f33e233bcf5d99c616ec27cc", "sha256": "0128dff0b4eee6f7cab6491e520118c4a9a841337b479c44321f1bfa352263d4"}, "downloads": -1, "filename": "auth0plus-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90d93219f33e233bcf5d99c616ec27cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17461, "upload_time": "2017-05-09T01:42:24", "upload_time_iso_8601": "2017-05-09T01:42:24.749669Z", "url": "https://files.pythonhosted.org/packages/e7/c3/c721d083e8251c1cf286779059835cd930cd78a95f8dd48da7187f78421f/auth0plus-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cfcdaae32d2611d53eb4b501507d7f3", "sha256": "6c85a081b159238e0db8a55aaa15a5c328bc71f6a5e23a2f36d34478d13fd1f9"}, "downloads": -1, "filename": "auth0plus-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1cfcdaae32d2611d53eb4b501507d7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21821, "upload_time": "2017-05-09T01:42:26", "upload_time_iso_8601": "2017-05-09T01:42:26.529592Z", "url": "https://files.pythonhosted.org/packages/e6/81/a063df45b9d2817306cd310197e060fcee7f766839adfb3b1ba4647f7ad9/auth0plus-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90d93219f33e233bcf5d99c616ec27cc", "sha256": "0128dff0b4eee6f7cab6491e520118c4a9a841337b479c44321f1bfa352263d4"}, "downloads": -1, "filename": "auth0plus-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90d93219f33e233bcf5d99c616ec27cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17461, "upload_time": "2017-05-09T01:42:24", "upload_time_iso_8601": "2017-05-09T01:42:24.749669Z", "url": "https://files.pythonhosted.org/packages/e7/c3/c721d083e8251c1cf286779059835cd930cd78a95f8dd48da7187f78421f/auth0plus-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cfcdaae32d2611d53eb4b501507d7f3", "sha256": "6c85a081b159238e0db8a55aaa15a5c328bc71f6a5e23a2f36d34478d13fd1f9"}, "downloads": -1, "filename": "auth0plus-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1cfcdaae32d2611d53eb4b501507d7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21821, "upload_time": "2017-05-09T01:42:26", "upload_time_iso_8601": "2017-05-09T01:42:26.529592Z", "url": "https://files.pythonhosted.org/packages/e6/81/a063df45b9d2817306cd310197e060fcee7f766839adfb3b1ba4647f7ad9/auth0plus-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:23 2020"}