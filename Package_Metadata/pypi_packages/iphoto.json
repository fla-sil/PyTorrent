{"info": {"author": "Anton Backer", "author_email": "olegov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.4"], "description": "iPhoto.py\n=========\n\nCommand line utilities for managing an iPhoto library.\n\n**Warning:** not tested with any version of iPhoto aside from my own, which is\ncurrently v9.5.1. Use at your own risk.\n\nCurrently requires python 3.4. Not for any serious reason, but it's the only\nversion I've tested with.\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install iphoto\n\nCommand line usage\n------------------\n\n**Warning:** ``exec`` is a dangerous, potentially destructive command that directly\noperates on your iPhoto database. Backup your library before proceeding.\n\n**Warning:** If you run ``exec`` and concurrently make changes via iPhoto, the\nresults are not predictable. The least you can expect is some lag between an\naction in iPhoto and an observable change on the command line, but also be\naware of the potential for data loss, since the application could operate from\na stale cache of recent changes. *iPhoto has no reasonable expectation that\nother applications are using its database.*\n\nThe ``exec`` command relies on some knowledge of the iPhoto object model,\nwhich is described in its own section below.\n\n.. code-block:: bash\n\n    # If you don't specify any specific actions, the `exec` script defaults to\n    # `print(master)`:\n    $ iphoto exec\n    The Badlands / DSC_0240\n    ... snip ...\n    Unnamed event (10/30/2014) / 20141030_150848\n\n    # Unless you specify the `--commit` flag, everything is executed in\n    # \"dry-run\" mode. For instance, this lists the photos that would be\n    # modified by the `--reset-time` action:\n    $ iphoto exec --reset-time\n\n    # Different filters are available for constraining which photos `exec`\n    # applies to. For instance, this resets the v1 time to match the master\n    # time for photos in the Mayhem album:\n    $ iphoto exec --album='Mayhem' --reset-time --commit\n\n    # This subtracts an hour from flagged photos in the Mayhem album:\n    $ iphoto exec --album='Mayhem' --flagged --offset-time='-3600' --commit\n\n    # You can specify a generic python script which executes in the context of\n    # a single photo. For instance, this unflags everything from events\n    # containing photos from 10/14/2014:\n    $ iphoto exec --event='2014-10-14' --commit 'v1.isFlagged = 0'\n\n    # This prints the name and image path for every photo from the event of\n    # 10/14/2014:\n    $ iphoto exec --event '2014-10-14' \\\n           'print(\"%s\\t%s\" % (master.name, master.imagePath))'\n\n    # This prints the file sizes of all flagged photos:\n    $ iphoto exec --flagged 'print(master.fileSize)'\n\nObject model\n------------\n\niPhoto doesn't apply any image adjustments to the originally imported \"master\"\nimage. Instead, it keeps a copy of each image's Exif data in a SQLite database.\nIn fact, it actually keeps three copies--the master, v0, and v1 records, and\nall of them are created on import. The properties you see in the UI all come\nfrom the v1 record. I recommend that you stick to the same approach: edit v1,\nand, if necessary, revert it by copying properties from v0 or from master.\n\nWhen you export photos out of iPhoto, the properties from v1 are automatically\napplied to the exported photos.\n\nAlbum types\n~~~~~~~~~~~\n\nThere are three types of album records:\n\n1. **Events:** exactly what you'd think if you've used the UI. Each photo is\n   associated with exactly one event album, which is referenced by master and\n   version records via ``projectUuid``.\n2. **Smart albums:** custom-made albums with dynamic, query-defined contents.\n   The query is hidden away inside of a keyed archive, which is itself stored\n   in the album's binary plist file. *This album type is currently unsupported\n   by iphoto.py because I haven't found or written a parser for the keyed\n   archive format. It's technically similar to bplist parser, but more\n   complicated.*\n3. **Regular albums:** custom-made albums with a static, user-curated image\n   list. The v1 uuids of the included images are listed in the album's binary\n   plist file.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/staticshock/iphoto.py", "keywords": null, "license": "ISC", "maintainer": null, "maintainer_email": null, "name": "iphoto", "package_url": "https://pypi.org/project/iphoto/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iphoto/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.github.com/staticshock/iphoto.py"}, "release_url": "https://pypi.org/project/iphoto/0.2.2/", "requires_dist": ["sqlalchemy", "click"], "requires_python": null, "summary": "Command line interface to iPhoto", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Command line utilities for managing an iPhoto library.</p>\n<p><strong>Warning:</strong> not tested with any version of iPhoto aside from my own, which is\ncurrently v9.5.1. Use at your own risk.</p>\n<p>Currently requires python 3.4. Not for any serious reason, but it\u2019s the only\nversion I\u2019ve tested with.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install iphoto\n</pre>\n</div>\n<div id=\"command-line-usage\">\n<h2>Command line usage</h2>\n<p><strong>Warning:</strong> <tt>exec</tt> is a dangerous, potentially destructive command that directly\noperates on your iPhoto database. Backup your library before proceeding.</p>\n<p><strong>Warning:</strong> If you run <tt>exec</tt> and concurrently make changes via iPhoto, the\nresults are not predictable. The least you can expect is some lag between an\naction in iPhoto and an observable change on the command line, but also be\naware of the potential for data loss, since the application could operate from\na stale cache of recent changes. <em>iPhoto has no reasonable expectation that\nother applications are using its database.</em></p>\n<p>The <tt>exec</tt> command relies on some knowledge of the iPhoto object model,\nwhich is described in its own section below.</p>\n<pre><span class=\"c1\"># If you don't specify any specific actions, the `exec` script defaults to\n# `print(master)`:\n</span>$ iphoto <span class=\"nb\">exec</span>\nThe Badlands / DSC_0240\n... snip ...\nUnnamed event <span class=\"o\">(</span><span class=\"m\">10</span>/30/2014<span class=\"o\">)</span> / 20141030_150848\n\n<span class=\"c1\"># Unless you specify the `--commit` flag, everything is executed in\n# \"dry-run\" mode. For instance, this lists the photos that would be\n# modified by the `--reset-time` action:\n</span>$ iphoto <span class=\"nb\">exec</span> --reset-time\n\n<span class=\"c1\"># Different filters are available for constraining which photos `exec`\n# applies to. For instance, this resets the v1 time to match the master\n# time for photos in the Mayhem album:\n</span>$ iphoto <span class=\"nb\">exec</span> --album<span class=\"o\">=</span><span class=\"s1\">'Mayhem'</span> --reset-time --commit\n\n<span class=\"c1\"># This subtracts an hour from flagged photos in the Mayhem album:\n</span>$ iphoto <span class=\"nb\">exec</span> --album<span class=\"o\">=</span><span class=\"s1\">'Mayhem'</span> --flagged --offset-time<span class=\"o\">=</span><span class=\"s1\">'-3600'</span> --commit\n\n<span class=\"c1\"># You can specify a generic python script which executes in the context of\n# a single photo. For instance, this unflags everything from events\n# containing photos from 10/14/2014:\n</span>$ iphoto <span class=\"nb\">exec</span> --event<span class=\"o\">=</span><span class=\"s1\">'2014-10-14'</span> --commit <span class=\"s1\">'v1.isFlagged = 0'</span>\n\n<span class=\"c1\"># This prints the name and image path for every photo from the event of\n# 10/14/2014:\n</span>$ iphoto <span class=\"nb\">exec</span> --event <span class=\"s1\">'2014-10-14'</span> <span class=\"se\">\\\n</span>       <span class=\"s1\">'print(\"%s\\t%s\" % (master.name, master.imagePath))'</span>\n\n<span class=\"c1\"># This prints the file sizes of all flagged photos:\n</span>$ iphoto <span class=\"nb\">exec</span> --flagged <span class=\"s1\">'print(master.fileSize)'</span>\n</pre>\n</div>\n<div id=\"object-model\">\n<h2>Object model</h2>\n<p>iPhoto doesn\u2019t apply any image adjustments to the originally imported \u201cmaster\u201d\nimage. Instead, it keeps a copy of each image\u2019s Exif data in a SQLite database.\nIn fact, it actually keeps three copies\u2013the master, v0, and v1 records, and\nall of them are created on import. The properties you see in the UI all come\nfrom the v1 record. I recommend that you stick to the same approach: edit v1,\nand, if necessary, revert it by copying properties from v0 or from master.</p>\n<p>When you export photos out of iPhoto, the properties from v1 are automatically\napplied to the exported photos.</p>\n<div id=\"album-types\">\n<h3>Album types</h3>\n<p>There are three types of album records:</p>\n<ol>\n<li><strong>Events:</strong> exactly what you\u2019d think if you\u2019ve used the UI. Each photo is\nassociated with exactly one event album, which is referenced by master and\nversion records via <tt>projectUuid</tt>.</li>\n<li><strong>Smart albums:</strong> custom-made albums with dynamic, query-defined contents.\nThe query is hidden away inside of a keyed archive, which is itself stored\nin the album\u2019s binary plist file. <em>This album type is currently unsupported\nby iphoto.py because I haven\u2019t found or written a parser for the keyed\narchive format. It\u2019s technically similar to bplist parser, but more\ncomplicated.</em></li>\n<li><strong>Regular albums:</strong> custom-made albums with a static, user-curated image\nlist. The v1 uuids of the included images are listed in the album\u2019s binary\nplist file.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1324884, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a0aa2d55e410426a9063e2b2ab3b3dcb", "sha256": "c0973b9f59661681c0265a59398113b6bfa8896fa0e222431dea73a07e16130a"}, "downloads": -1, "filename": "iphoto-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a0aa2d55e410426a9063e2b2ab3b3dcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10250, "upload_time": "2014-11-16T19:57:59", "upload_time_iso_8601": "2014-11-16T19:57:59.499427Z", "url": "https://files.pythonhosted.org/packages/1e/84/82659fcb030e28b7a05d6d7484347b6229b95afd487c338e18a1e3b57dbf/iphoto-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b38bd8c0661158873623894e178b5907", "sha256": "f84723ec8370d1b9c08204357b5ff214d21236719129f5c5fc2af44b52ee96be"}, "downloads": -1, "filename": "iphoto-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b38bd8c0661158873623894e178b5907", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7435, "upload_time": "2014-11-16T19:58:02", "upload_time_iso_8601": "2014-11-16T19:58:02.834291Z", "url": "https://files.pythonhosted.org/packages/60/53/2c20903a5746202daa3f51b773296489507b8640cf0933d381db498303ec/iphoto-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e23b6e644a9a4983e44fdd17c17645a7", "sha256": "ec1e8f3604cbdc2cc80f6aa31d0ea286848e33bb1e4b4e969f56a8dc605f4f70"}, "downloads": -1, "filename": "iphoto-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e23b6e644a9a4983e44fdd17c17645a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12031, "upload_time": "2014-11-28T22:40:31", "upload_time_iso_8601": "2014-11-28T22:40:31.167829Z", "url": "https://files.pythonhosted.org/packages/6b/8c/03cb0fb989807ec72e0836de319b75dde10b918b280087c8faa677ab6f06/iphoto-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16127c8e196ec418aa3c78a4c2057a79", "sha256": "62b532ac07ed6fcaa4c22096a07a11bdf13284f81a9c38307d8d8511def66215"}, "downloads": -1, "filename": "iphoto-0.2.0.tar.gz", "has_sig": false, "md5_digest": "16127c8e196ec418aa3c78a4c2057a79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8567, "upload_time": "2014-11-28T22:40:34", "upload_time_iso_8601": "2014-11-28T22:40:34.104247Z", "url": "https://files.pythonhosted.org/packages/aa/de/243b6d6838ba5200670d497b96356917107178b1dcadd5050c38849b7191/iphoto-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "2337f9841e46d95e8f4e4eacd7f431b3", "sha256": "2abaccb44e8e12c33a1b28c8248199d7c738c0687054c9c79ed41d72aa91b730"}, "downloads": -1, "filename": "iphoto-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2337f9841e46d95e8f4e4eacd7f431b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12036, "upload_time": "2014-11-28T22:57:28", "upload_time_iso_8601": "2014-11-28T22:57:28.299537Z", "url": "https://files.pythonhosted.org/packages/52/4a/f3a02289cc4495cbb3cc52edb68608b84ee667e0f73bb7f7e3a0a94eb0cd/iphoto-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1be74e33ca111e26834b60d4535d5706", "sha256": "1107809adef182053144876efc81bf667b639da859cced40640282694438dfa3"}, "downloads": -1, "filename": "iphoto-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1be74e33ca111e26834b60d4535d5706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8579, "upload_time": "2014-11-28T22:57:31", "upload_time_iso_8601": "2014-11-28T22:57:31.297825Z", "url": "https://files.pythonhosted.org/packages/7c/20/fce1b3f31e261de3189fa95a2ce88e60e7327c6aeff9a2b1e4e369d7d17f/iphoto-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d3827c5ed8cf4b48d982b8302471c624", "sha256": "30cdb2be0166fda803f0e14d4f610a9e9463c71848c3b688d2ab4b5ebe28c02c"}, "downloads": -1, "filename": "iphoto-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d3827c5ed8cf4b48d982b8302471c624", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12061, "upload_time": "2014-11-29T15:27:29", "upload_time_iso_8601": "2014-11-29T15:27:29.290841Z", "url": "https://files.pythonhosted.org/packages/b4/5e/3bf8636310d1b3dc9f3e842be68bdf77bbd3a9475fe9ebd6a6ec3529c55b/iphoto-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f24491611ff47379814b6753e50c4dd", "sha256": "3f9e2f5fe876ae0ed448015835034cf7cc2ef342fa85456ed76ae55a44d56130"}, "downloads": -1, "filename": "iphoto-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5f24491611ff47379814b6753e50c4dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8599, "upload_time": "2014-11-29T15:27:31", "upload_time_iso_8601": "2014-11-29T15:27:31.172187Z", "url": "https://files.pythonhosted.org/packages/32/33/27529dcfb7fc4d84ef88c06ab5d6c9d21a6761a475f8590405e5f93ad762/iphoto-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d3827c5ed8cf4b48d982b8302471c624", "sha256": "30cdb2be0166fda803f0e14d4f610a9e9463c71848c3b688d2ab4b5ebe28c02c"}, "downloads": -1, "filename": "iphoto-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d3827c5ed8cf4b48d982b8302471c624", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12061, "upload_time": "2014-11-29T15:27:29", "upload_time_iso_8601": "2014-11-29T15:27:29.290841Z", "url": "https://files.pythonhosted.org/packages/b4/5e/3bf8636310d1b3dc9f3e842be68bdf77bbd3a9475fe9ebd6a6ec3529c55b/iphoto-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f24491611ff47379814b6753e50c4dd", "sha256": "3f9e2f5fe876ae0ed448015835034cf7cc2ef342fa85456ed76ae55a44d56130"}, "downloads": -1, "filename": "iphoto-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5f24491611ff47379814b6753e50c4dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8599, "upload_time": "2014-11-29T15:27:31", "upload_time_iso_8601": "2014-11-29T15:27:31.172187Z", "url": "https://files.pythonhosted.org/packages/32/33/27529dcfb7fc4d84ef88c06ab5d6c9d21a6761a475f8590405e5f93ad762/iphoto-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:38 2020"}