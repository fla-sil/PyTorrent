{"info": {"author": "Microsoft Corporation", "author_email": "azpysdkhelp@microsoft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Azure App Configuration client library for Python\n\nAzure App Configuration is a managed service that helps developers centralize their application configurations simply and securely.\n\nModern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to securely store all the settings for your application in one place.\n\nUse the client library for App Configuration to create and manage application configuration settings.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/6bce97dae330f7d40876ee2ab8de06cd57d4a776/sdk/appconfiguration/azure-appconfiguration) | [Package (Pypi)][package] | [API reference documentation](https://github.com/Azure/azure-sdk-for-python/tree/6bce97dae330f7d40876ee2ab8de06cd57d4a776/sdk/appconfiguration/azure-appconfiguration) | [Product documentation][appconfig_docs]\n\n## Getting started\n\n### Supported Python version\n\nPython 2.7 and 3.5+\n\n### Install the package\n\nInstall the Azure App Configuration client library for Python with pip:\n\n```commandline\npip install azure-appconfiguration\n```\n\n**Prerequisites**: You must have an [Azure subscription][azure_sub], and a [Configuration Store][configuration_store] to use this package.\n\nTo create a Configuration Store, you can use the Azure Portal or [Azure CLI][azure_cli].\n\nAfter that, create the Configuration Store:\n\n```Powershell\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n### Authenticate the client\n\nIn order to interact with the App Configuration service, you'll need to create an instance of the \n[AzureAppConfigurationClient][configuration_client_class] class. To make this possible, \nyou can either use the connection string of the Configuration Store or use an AAD token.\n\n#### Use connection string\n\n##### Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to get the connection string from the Configuration Store.\n\n```Powershell\naz appconfig credential list --name <config-store-name>\n```\n\nAlternatively, get the connection string from the Azure Portal.\n\n##### Create client\n\nOnce you have the value of the connection string, you can create the AzureAppConfigurationClient:\n\n```python\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\nconnection_str = \"<connection_string>\"\nclient = AzureAppConfigurationClient.from_connection_string(connection_str)\n```\n\n#### Use AAD token\n\nHere we demonstrate using [DefaultAzureCredential][default_cred_ref]\nto authenticate as a service principal. However, [AzureAppConfigurationClient][configuration_client_class]\naccepts any [azure-identity][azure_identity] credential. See the\n[azure-identity][azure_identity] documentation for more information about other\ncredentials.\n\n##### Create a service principal (optional)\nThis [Azure CLI][azure_cli] snippet shows how to create a\nnew service principal. Before using it, replace \"your-application-name\" with\nthe appropriate name for your service principal.\n\nCreate a service principal:\n```Bash\naz ad sp create-for-rbac --name http://my-application --skip-assignment\n```\n\n> Output:\n> ```json\n> {\n>     \"appId\": \"generated app id\",\n>     \"displayName\": \"my-application\",\n>     \"name\": \"http://my-application\",\n>     \"password\": \"random password\",\n>     \"tenant\": \"tenant id\"\n> }\n> ```\n\nUse the output to set **AZURE_CLIENT_ID** (\"appId\" above), **AZURE_CLIENT_SECRET**\n(\"password\" above) and **AZURE_TENANT_ID** (\"tenant\" above) environment variables.\nThe following example shows a way to do this in Bash:\n```Bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\n\nAssign one of the applicable [App Configuration roles](https://github.com/Azure/AppConfiguration/blob/master/docs/REST/authorization/aad.md) to the service principal.\n\n##### Create a client\nOnce the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and\n**AZURE_TENANT_ID** environment variables are set,\n[DefaultAzureCredential][default_cred_ref] will be able to authenticate the\n[AzureAppConfigurationClient][configuration_client_class].\n\nConstructing the client also requires your configuration store's URL, which you can\nget from the Azure CLI or the Azure Portal. In the Azure Portal, the URL can be found listed as the service \"Endpoint\"\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\ncredential = DefaultAzureCredential()\n\nclient = AzureAppConfigurationClient(base_url=\"your_endpoint_url\", credential=credential)\n```\n\n## Key concepts\n\n### Configuration Setting\n\nA Configuration Setting is the fundamental resource within a Configuration Store. In its simplest form it is a key and a value. However, there are additional properties such as the modifiable content type and tags fields that allow the value to be interpreted or associated in different ways.\n\nThe Label property of a Configuration Setting provides a way to separate Configuration Settings into different dimensions. These dimensions are user defined and can take any form. Some common examples of dimensions to use for a label include regions, semantic versions, or environments. Many applications have a required set of configuration keys that have varying values as the application exists across different dimensions.\nFor example, MaxRequests may be 100 in \"NorthAmerica\", and 200 in \"WestEurope\". By creating a Configuration Setting named MaxRequests with a label of \"NorthAmerica\" and another, only with a different value, in the \"WestEurope\" label, an application can seamlessly retrieve Configuration Settings as it runs in these two dimensions.\n\nProperties of a Configuration Setting:\n\n```python\nkey : str\nlabel : str\ncontent_type : str\nvalue : str\nlast_modified : str\nread_only : bool\ntags : dict\netag : str\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Configuration Service tasks, including:\n\n### Create a Configuration Setting\n\nCreate a Configuration Setting to be stored in the Configuration Store.\nThere are two ways to store a Configuration Setting:\n\n- add_configuration_setting creates a setting only if the setting does not already exist in the store.\n\n```python\nconfig_setting = ConfigurationSetting(\n    key=\"MyKey\",\n    label=\"MyLabel\",\n    value=\"my value\",\n    content_type=\"my content type\",\n    tags={\"my tag\": \"my tag value\"}\n)\nadded_config_setting = client.add_configuration_setting(config_setting)\n```\n\n- set_configuration_setting creates a setting if it doesn't exist or overrides an existing setting.\n\n```python\nconfig_setting = ConfigurationSetting(\n    key=\"MyKey\",\n    label=\"MyLabel\",\n    value=\"my set value\",\n    content_type=\"my set content type\",\n    tags={\"my set tag\": \"my set tag value\"}\n)\nreturned_config_setting = client.set_configuration_setting(config_setting)\n```\n\n### Get a Configuration Setting\n\nGet a previously stored Configuration Setting.\n\n```python\nfetched_config_setting = client.get_configuration_setting(\n    key=\"MyKey\", label=\"MyLabel\"\n)\n```\n\n### Delete a Configuration Setting\n\nDelete an existing Configuration Setting by calling delete_configuration_setting\n\n```python\ndeleted_config_setting = client.delete_configuration_setting(\n    key=\"MyKey\", label=\"MyLabel\"\n)\n```\n\n### List Configuration Settings\n\n```python\n\nfiltered_listed = client.list_configuration_settings(\n    labels=[\"*Labe*\"], keys=[\"*Ke*\"]\n)\nfor item in filtered_listed:\n    pass  # do something\n\n```\n\n## Async Client\n\nAsync client is supported for python 3.5+. \nTo use the async client library, import the AzureAppConfigurationClient from package azure.appconfiguration.aio instead of azure.appconfiguration\n\n```python\nfrom azure.appconfiguration.aio import AzureAppConfigurationClient\n\nconnection_str = \"<connection_string>\"\nasync_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n```\n\nThis async AzureAppConfigurationClient has the same method signatures as the sync ones except that they're async.\nFor instance, to retrieve a Configuration Setting asynchronously, async_client can be used:\n\n```python\nfetched_config_setting = await async_client.get_configuration_setting(\n    key=\"MyKey\", label=\"MyLabel\"\n)\n```\n\nTo use list_configuration_settings, call it synchronously and iterate over the returned async iterator asynchronously \n\n```python\n\nfiltered_listed = async_client.list_configuration_settings(\n    labels=[\"*Labe*\"], keys=[\"*Ke*\"]\n)\nasync for item in filtered_listed:\n    pass  # do something\n\n```\n\n## Troubleshooting\n\n### Logging\n\nThis SDK uses Python standard logging library.\nYou can configure logging print out debugging information to the stdout or anywhere you want.\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n````\n\nHttp request and response details are printed to stdout with this logging config.\n\n<!-- LINKS -->\n[appconfig_docs]: https://docs.microsoft.com/en-us/azure/azure-app-configuration/\n[appconfig_rest]: https://github.com/Azure/AppConfiguration#rest-api-reference\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[configuration_client_class]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/appconfiguration/azure-appconfiguration/azure/appconfiguration/_azure_appconfiguration_client.py\n[package]: https://pypi.org/project/azure-appconfiguration/\n[configuration_store]: https://azure.microsoft.com/en-us/services/app-configuration/\n[default_cred_ref]: https://aka.ms/azsdk-python-identity-default-cred-ref\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\n\n\n\n# Release History\n\n-------------------\n\n## 1.0.0 (2020-01-06)\n\n### Features\n\n- Add AAD auth support    #8924\n\n### Breaking changes\n\n- List_configuration_settings & list_revisions now take string key/label filter instead of keys/labels list   #9066\n\n## 1.0.0b6 (2019-12-03)\n\n### Features\n\n- Add sync-token support    #8418\n\n### Breaking changes\n\n- Combine set_read_only & clear_read_only to be set_read_only(True/False)   #8453\n\n## 1.0.0b5 (2019-10-30)\n\n### Breaking changes\n\n- etag and match_condition of delete_configuration_setting are now keyword argument only #8161\n\n## 1.0.0b4 (2019-10-07)\n\n- Add conditional operation support\n- Add set_read_only and clear_read_only methods\n\n## 1.0.0b3 (2019-09-09)\n\n- New azure app configuration\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/appconfiguration/azure-appconfiguration", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "azure-appconfiguration", "package_url": "https://pypi.org/project/azure-appconfiguration/", "platform": "", "project_url": "https://pypi.org/project/azure-appconfiguration/", "project_urls": {"Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/appconfiguration/azure-appconfiguration"}, "release_url": "https://pypi.org/project/azure-appconfiguration/1.0.0/", "requires_dist": ["msrest (>=0.6.10)", "azure-core (<2.0.0,>=1.0.0)", "azure-nspkg ; python_version<'3.0'", "enum34 (>=1.0.4) ; python_version<'3.4'", "typing ; python_version<'3.5'", "aiohttp (>=3.0) ; (python_version>='3.5') and extra == 'async'", "aiodns (>=2.0) ; (python_version>='3.5') and extra == 'async'"], "requires_python": "", "summary": "Microsoft App Configuration Data Library for Python", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Azure App Configuration client library for Python</h1>\n<p>Azure App Configuration is a managed service that helps developers centralize their application configurations simply and securely.</p>\n<p>Modern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to securely store all the settings for your application in one place.</p>\n<p>Use the client library for App Configuration to create and manage application configuration settings.</p>\n<p><a href=\"https://github.com/Azure/azure-sdk-for-python/tree/6bce97dae330f7d40876ee2ab8de06cd57d4a776/sdk/appconfiguration/azure-appconfiguration\" rel=\"nofollow\">Source code</a> | <a href=\"https://pypi.org/project/azure-appconfiguration/\" rel=\"nofollow\">Package (Pypi)</a> | <a href=\"https://github.com/Azure/azure-sdk-for-python/tree/6bce97dae330f7d40876ee2ab8de06cd57d4a776/sdk/appconfiguration/azure-appconfiguration\" rel=\"nofollow\">API reference documentation</a> | <a href=\"https://docs.microsoft.com/en-us/azure/azure-app-configuration/\" rel=\"nofollow\">Product documentation</a></p>\n<h2>Getting started</h2>\n<h3>Supported Python version</h3>\n<p>Python 2.7 and 3.5+</p>\n<h3>Install the package</h3>\n<p>Install the Azure App Configuration client library for Python with pip:</p>\n<pre>pip install azure-appconfiguration\n</pre>\n<p><strong>Prerequisites</strong>: You must have an <a href=\"https://azure.microsoft.com/free/\" rel=\"nofollow\">Azure subscription</a>, and a <a href=\"https://azure.microsoft.com/en-us/services/app-configuration/\" rel=\"nofollow\">Configuration Store</a> to use this package.</p>\n<p>To create a Configuration Store, you can use the Azure Portal or <a href=\"https://docs.microsoft.com/cli/azure\" rel=\"nofollow\">Azure CLI</a>.</p>\n<p>After that, create the Configuration Store:</p>\n<pre><span class=\"n\">az</span> <span class=\"n\">appconfig</span> <span class=\"n\">create</span> <span class=\"p\">-</span><span class=\"n\">-name</span> <span class=\"p\">&lt;</span><span class=\"n\">config-store-name</span><span class=\"p\">&gt;</span> <span class=\"p\">-</span><span class=\"n\">-resource-group</span> <span class=\"p\">&lt;</span><span class=\"n\">resource-group-name</span><span class=\"p\">&gt;</span> <span class=\"p\">-</span><span class=\"n\">-location</span> <span class=\"n\">eastus</span>\n</pre>\n<h3>Authenticate the client</h3>\n<p>In order to interact with the App Configuration service, you'll need to create an instance of the\n<a href=\"https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/appconfiguration/azure-appconfiguration/azure/appconfiguration/_azure_appconfiguration_client.py\" rel=\"nofollow\">AzureAppConfigurationClient</a> class. To make this possible,\nyou can either use the connection string of the Configuration Store or use an AAD token.</p>\n<h4>Use connection string</h4>\n<h5>Get credentials</h5>\n<p>Use the <a href=\"https://docs.microsoft.com/cli/azure\" rel=\"nofollow\">Azure CLI</a> snippet below to get the connection string from the Configuration Store.</p>\n<pre><span class=\"n\">az</span> <span class=\"n\">appconfig</span> <span class=\"n\">credential</span> <span class=\"n\">list</span> <span class=\"p\">-</span><span class=\"n\">-name</span> <span class=\"p\">&lt;</span><span class=\"n\">config-store-name</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Alternatively, get the connection string from the Azure Portal.</p>\n<h5>Create client</h5>\n<p>Once you have the value of the connection string, you can create the AzureAppConfigurationClient:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">azure.appconfiguration</span> <span class=\"kn\">import</span> <span class=\"n\">AzureAppConfigurationClient</span>\n\n<span class=\"n\">connection_str</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;connection_string&gt;\"</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AzureAppConfigurationClient</span><span class=\"o\">.</span><span class=\"n\">from_connection_string</span><span class=\"p\">(</span><span class=\"n\">connection_str</span><span class=\"p\">)</span>\n</pre>\n<h4>Use AAD token</h4>\n<p>Here we demonstrate using <a href=\"https://aka.ms/azsdk-python-identity-default-cred-ref\" rel=\"nofollow\">DefaultAzureCredential</a>\nto authenticate as a service principal. However, <a href=\"https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/appconfiguration/azure-appconfiguration/azure/appconfiguration/_azure_appconfiguration_client.py\" rel=\"nofollow\">AzureAppConfigurationClient</a>\naccepts any <a href=\"https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\" rel=\"nofollow\">azure-identity</a> credential. See the\n<a href=\"https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\" rel=\"nofollow\">azure-identity</a> documentation for more information about other\ncredentials.</p>\n<h5>Create a service principal (optional)</h5>\n<p>This <a href=\"https://docs.microsoft.com/cli/azure\" rel=\"nofollow\">Azure CLI</a> snippet shows how to create a\nnew service principal. Before using it, replace \"your-application-name\" with\nthe appropriate name for your service principal.</p>\n<p>Create a service principal:</p>\n<pre>az ad sp create-for-rbac --name http://my-application --skip-assignment\n</pre>\n<blockquote>\n<p>Output:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"appId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"generated app id\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"displayName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my-application\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://my-application\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"random password\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tenant\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tenant id\"</span>\n<span class=\"p\">}</span>\n</pre>\n</blockquote>\n<p>Use the output to set <strong>AZURE_CLIENT_ID</strong> (\"appId\" above), <strong>AZURE_CLIENT_SECRET</strong>\n(\"password\" above) and <strong>AZURE_TENANT_ID</strong> (\"tenant\" above) environment variables.\nThe following example shows a way to do this in Bash:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">AZURE_CLIENT_ID</span><span class=\"o\">=</span><span class=\"s2\">\"generated app id\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">AZURE_CLIENT_SECRET</span><span class=\"o\">=</span><span class=\"s2\">\"random password\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">AZURE_TENANT_ID</span><span class=\"o\">=</span><span class=\"s2\">\"tenant id\"</span>\n</pre>\n<p>Assign one of the applicable <a href=\"https://github.com/Azure/AppConfiguration/blob/master/docs/REST/authorization/aad.md\" rel=\"nofollow\">App Configuration roles</a> to the service principal.</p>\n<h5>Create a client</h5>\n<p>Once the <strong>AZURE_CLIENT_ID</strong>, <strong>AZURE_CLIENT_SECRET</strong> and\n<strong>AZURE_TENANT_ID</strong> environment variables are set,\n<a href=\"https://aka.ms/azsdk-python-identity-default-cred-ref\" rel=\"nofollow\">DefaultAzureCredential</a> will be able to authenticate the\n<a href=\"https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/appconfiguration/azure-appconfiguration/azure/appconfiguration/_azure_appconfiguration_client.py\" rel=\"nofollow\">AzureAppConfigurationClient</a>.</p>\n<p>Constructing the client also requires your configuration store's URL, which you can\nget from the Azure CLI or the Azure Portal. In the Azure Portal, the URL can be found listed as the service \"Endpoint\"</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">azure.identity</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultAzureCredential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">azure.appconfiguration</span> <span class=\"kn\">import</span> <span class=\"n\">AzureAppConfigurationClient</span>\n\n<span class=\"n\">credential</span> <span class=\"o\">=</span> <span class=\"n\">DefaultAzureCredential</span><span class=\"p\">()</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AzureAppConfigurationClient</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s2\">\"your_endpoint_url\"</span><span class=\"p\">,</span> <span class=\"n\">credential</span><span class=\"o\">=</span><span class=\"n\">credential</span><span class=\"p\">)</span>\n</pre>\n<h2>Key concepts</h2>\n<h3>Configuration Setting</h3>\n<p>A Configuration Setting is the fundamental resource within a Configuration Store. In its simplest form it is a key and a value. However, there are additional properties such as the modifiable content type and tags fields that allow the value to be interpreted or associated in different ways.</p>\n<p>The Label property of a Configuration Setting provides a way to separate Configuration Settings into different dimensions. These dimensions are user defined and can take any form. Some common examples of dimensions to use for a label include regions, semantic versions, or environments. Many applications have a required set of configuration keys that have varying values as the application exists across different dimensions.\nFor example, MaxRequests may be 100 in \"NorthAmerica\", and 200 in \"WestEurope\". By creating a Configuration Setting named MaxRequests with a label of \"NorthAmerica\" and another, only with a different value, in the \"WestEurope\" label, an application can seamlessly retrieve Configuration Settings as it runs in these two dimensions.</p>\n<p>Properties of a Configuration Setting:</p>\n<pre><span class=\"n\">key</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"n\">label</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"n\">content_type</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"n\">last_modified</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"n\">read_only</span> <span class=\"p\">:</span> <span class=\"nb\">bool</span>\n<span class=\"n\">tags</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span>\n<span class=\"n\">etag</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n</pre>\n<h2>Examples</h2>\n<p>The following sections provide several code snippets covering some of the most common Configuration Service tasks, including:</p>\n<h3>Create a Configuration Setting</h3>\n<p>Create a Configuration Setting to be stored in the Configuration Store.\nThere are two ways to store a Configuration Setting:</p>\n<ul>\n<li>add_configuration_setting creates a setting only if the setting does not already exist in the store.</li>\n</ul>\n<pre><span class=\"n\">config_setting</span> <span class=\"o\">=</span> <span class=\"n\">ConfigurationSetting</span><span class=\"p\">(</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"MyKey\"</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"MyLabel\"</span><span class=\"p\">,</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"my value\"</span><span class=\"p\">,</span>\n    <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"my content type\"</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"my tag\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my tag value\"</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">added_config_setting</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_configuration_setting</span><span class=\"p\">(</span><span class=\"n\">config_setting</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>set_configuration_setting creates a setting if it doesn't exist or overrides an existing setting.</li>\n</ul>\n<pre><span class=\"n\">config_setting</span> <span class=\"o\">=</span> <span class=\"n\">ConfigurationSetting</span><span class=\"p\">(</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"MyKey\"</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"MyLabel\"</span><span class=\"p\">,</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"my set value\"</span><span class=\"p\">,</span>\n    <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"my set content type\"</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"my set tag\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my set tag value\"</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">returned_config_setting</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_configuration_setting</span><span class=\"p\">(</span><span class=\"n\">config_setting</span><span class=\"p\">)</span>\n</pre>\n<h3>Get a Configuration Setting</h3>\n<p>Get a previously stored Configuration Setting.</p>\n<pre><span class=\"n\">fetched_config_setting</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_configuration_setting</span><span class=\"p\">(</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"MyKey\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"MyLabel\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Delete a Configuration Setting</h3>\n<p>Delete an existing Configuration Setting by calling delete_configuration_setting</p>\n<pre><span class=\"n\">deleted_config_setting</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_configuration_setting</span><span class=\"p\">(</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"MyKey\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"MyLabel\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>List Configuration Settings</h3>\n<pre><span class=\"n\">filtered_listed</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_configuration_settings</span><span class=\"p\">(</span>\n    <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"*Labe*\"</span><span class=\"p\">],</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"*Ke*\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">filtered_listed</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>  <span class=\"c1\"># do something</span>\n</pre>\n<h2>Async Client</h2>\n<p>Async client is supported for python 3.5+.\nTo use the async client library, import the AzureAppConfigurationClient from package azure.appconfiguration.aio instead of azure.appconfiguration</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">azure.appconfiguration.aio</span> <span class=\"kn\">import</span> <span class=\"n\">AzureAppConfigurationClient</span>\n\n<span class=\"n\">connection_str</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;connection_string&gt;\"</span>\n<span class=\"n\">async_client</span> <span class=\"o\">=</span> <span class=\"n\">AzureAppConfigurationClient</span><span class=\"o\">.</span><span class=\"n\">from_connection_string</span><span class=\"p\">(</span><span class=\"n\">connection_str</span><span class=\"p\">)</span>\n</pre>\n<p>This async AzureAppConfigurationClient has the same method signatures as the sync ones except that they're async.\nFor instance, to retrieve a Configuration Setting asynchronously, async_client can be used:</p>\n<pre><span class=\"n\">fetched_config_setting</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">async_client</span><span class=\"o\">.</span><span class=\"n\">get_configuration_setting</span><span class=\"p\">(</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"MyKey\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"MyLabel\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To use list_configuration_settings, call it synchronously and iterate over the returned async iterator asynchronously</p>\n<pre><span class=\"n\">filtered_listed</span> <span class=\"o\">=</span> <span class=\"n\">async_client</span><span class=\"o\">.</span><span class=\"n\">list_configuration_settings</span><span class=\"p\">(</span>\n    <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"*Labe*\"</span><span class=\"p\">],</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"*Ke*\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">filtered_listed</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>  <span class=\"c1\"># do something</span>\n</pre>\n<h2>Troubleshooting</h2>\n<h3>Logging</h3>\n<p>This SDK uses Python standard logging library.\nYou can configure logging print out debugging information to the stdout or anywhere you want.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n<p>Http request and response details are printed to stdout with this logging config.</p>\n\n<h1>Release History</h1>\n<hr>\n<h2>1.0.0 (2020-01-06)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add AAD auth support    #8924</li>\n</ul>\n<h3>Breaking changes</h3>\n<ul>\n<li>List_configuration_settings &amp; list_revisions now take string key/label filter instead of keys/labels list   #9066</li>\n</ul>\n<h2>1.0.0b6 (2019-12-03)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add sync-token support    #8418</li>\n</ul>\n<h3>Breaking changes</h3>\n<ul>\n<li>Combine set_read_only &amp; clear_read_only to be set_read_only(True/False)   #8453</li>\n</ul>\n<h2>1.0.0b5 (2019-10-30)</h2>\n<h3>Breaking changes</h3>\n<ul>\n<li>etag and match_condition of delete_configuration_setting are now keyword argument only #8161</li>\n</ul>\n<h2>1.0.0b4 (2019-10-07)</h2>\n<ul>\n<li>Add conditional operation support</li>\n<li>Add set_read_only and clear_read_only methods</li>\n</ul>\n<h2>1.0.0b3 (2019-09-09)</h2>\n<ul>\n<li>New azure app configuration</li>\n</ul>\n\n          </div>"}, "last_serial": 6404868, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2c22bfd615b8357dd5acf01eac77be00", "sha256": "eaa2c91fab08d3fedc9bb22523c43028d4048c024367172b787d225e3e7388c2"}, "downloads": -1, "filename": "azure_appconfiguration-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2c22bfd615b8357dd5acf01eac77be00", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36824, "upload_time": "2020-01-06T22:07:51", "upload_time_iso_8601": "2020-01-06T22:07:51.177086Z", "url": "https://files.pythonhosted.org/packages/0e/23/dcdc3112532e3dd9dc9a0a08b0378bc7825ea68a0d6b5781b775584e97a8/azure_appconfiguration-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d70f15c6fa7511901b73daf9630508df", "sha256": "45b088afb7af87208cac5c3645cecadc26abf332476aacefb6619b81d16152f2"}, "downloads": -1, "filename": "azure-appconfiguration-1.0.0.zip", "has_sig": false, "md5_digest": "d70f15c6fa7511901b73daf9630508df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74866, "upload_time": "2020-01-06T22:07:52", "upload_time_iso_8601": "2020-01-06T22:07:52.940885Z", "url": "https://files.pythonhosted.org/packages/ea/d9/96d05c17fde92b86a4048b92d524ff3ed0d09294636f1d0da46e1ee5f7c8/azure-appconfiguration-1.0.0.zip", "yanked": false}], "1.0.0b3": [{"comment_text": "", "digests": {"md5": "c4f65b8911fcfe2644d3e84d82d69307", "sha256": "fd406f5643c09d5c233284188a1b7a086d49f07ed108e8540243b40569fc8553"}, "downloads": -1, "filename": "azure_appconfiguration-1.0.0b3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c4f65b8911fcfe2644d3e84d82d69307", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32104, "upload_time": "2019-09-10T18:25:17", "upload_time_iso_8601": "2019-09-10T18:25:17.460067Z", "url": "https://files.pythonhosted.org/packages/e2/78/33e5fe677c8f483ea136bdd61b44bd2fc9257fd168221aa8c91f1df9f5c4/azure_appconfiguration-1.0.0b3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f36bd3b1cf146739cb375fdb23d2913", "sha256": "ed42e65fcebb83f47c83fee571784f3b5b10b571a0b86273b02ce424c93c0b4c"}, "downloads": -1, "filename": "azure-appconfiguration-1.0.0b3.zip", "has_sig": false, "md5_digest": "6f36bd3b1cf146739cb375fdb23d2913", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254892, "upload_time": "2019-09-10T18:25:20", "upload_time_iso_8601": "2019-09-10T18:25:20.181261Z", "url": "https://files.pythonhosted.org/packages/77/cd/307c9e783c9c51771d6207b405803616081466da6d5b1f648d6dfde68c01/azure-appconfiguration-1.0.0b3.zip", "yanked": false}], "1.0.0b4": [{"comment_text": "", "digests": {"md5": "df4de938e154ffcd388032c3eac7261c", "sha256": "9fc60298dc374d2325d3605060a622c905533de6ec845e10837393d3d0530b70"}, "downloads": -1, "filename": "azure_appconfiguration-1.0.0b4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df4de938e154ffcd388032c3eac7261c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36297, "upload_time": "2019-10-07T22:16:07", "upload_time_iso_8601": "2019-10-07T22:16:07.543716Z", "url": "https://files.pythonhosted.org/packages/fc/c3/348c9277fb5cf326b6ca5f6a1a7cdb0d86c1007b20f295be0984044fadaa/azure_appconfiguration-1.0.0b4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ba2a4f799befaacbabd437103d35762", "sha256": "a348da9edf5124aecb0703ff705aee08fc58e4ce74011cf934e4a33fc8290794"}, "downloads": -1, "filename": "azure-appconfiguration-1.0.0b4.zip", "has_sig": false, "md5_digest": "2ba2a4f799befaacbabd437103d35762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 293763, "upload_time": "2019-10-07T22:16:09", "upload_time_iso_8601": "2019-10-07T22:16:09.626726Z", "url": "https://files.pythonhosted.org/packages/aa/5a/4e8f47ad63648fccc370ef5c10a29649b759cbf28d50ada38805d7ef0127/azure-appconfiguration-1.0.0b4.zip", "yanked": false}], "1.0.0b5": [{"comment_text": "", "digests": {"md5": "7e15d9763db54dfb91ca38855fae469b", "sha256": "d9b35845252ab15ed0b29f5f3f57164adc092ee04db87c2f4428f65c682a94e1"}, "downloads": -1, "filename": "azure_appconfiguration-1.0.0b5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7e15d9763db54dfb91ca38855fae469b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36900, "upload_time": "2019-10-30T19:21:17", "upload_time_iso_8601": "2019-10-30T19:21:17.618346Z", "url": "https://files.pythonhosted.org/packages/7b/57/dbdb1c995090a9e03d6ece7a06e103bd0826f48f1c2848e29e77af3e431a/azure_appconfiguration-1.0.0b5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abaa1fe9b7eec418034f40e381e2fd23", "sha256": "cb499f43f3ce005f82210757c7d4d1cbd4f041a93b23081fa45ada5c30a05598"}, "downloads": -1, "filename": "azure-appconfiguration-1.0.0b5.zip", "has_sig": false, "md5_digest": "abaa1fe9b7eec418034f40e381e2fd23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 304333, "upload_time": "2019-10-30T19:21:18", "upload_time_iso_8601": "2019-10-30T19:21:18.855471Z", "url": "https://files.pythonhosted.org/packages/86/d3/a58ac0caf69133e7cf5e911beddf0d0675cbfca674af0f63fc2f4ce847c8/azure-appconfiguration-1.0.0b5.zip", "yanked": false}], "1.0.0b6": [{"comment_text": "", "digests": {"md5": "b7ac5fc2feb19f75f45d39137b8ffad6", "sha256": "e2e905239baee1015485934e820db79f68ee26f521c48b88fde0c992b5cf8bfa"}, "downloads": -1, "filename": "azure_appconfiguration-1.0.0b6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7ac5fc2feb19f75f45d39137b8ffad6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35925, "upload_time": "2019-12-03T20:56:49", "upload_time_iso_8601": "2019-12-03T20:56:49.241563Z", "url": "https://files.pythonhosted.org/packages/96/4f/6586edaa6b2a163b0cac65863eae306d7bdb8a2cef365b998ebc6779cc0c/azure_appconfiguration-1.0.0b6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f5a406f6a1746476da214e7afef56a1", "sha256": "9ead95dd781b04c0c63e3629cccd4747d3ada0bd2a0f23fec49e3c3a8e665b65"}, "downloads": -1, "filename": "azure-appconfiguration-1.0.0b6.zip", "has_sig": false, "md5_digest": "1f5a406f6a1746476da214e7afef56a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66697, "upload_time": "2019-12-03T20:56:51", "upload_time_iso_8601": "2019-12-03T20:56:51.369109Z", "url": "https://files.pythonhosted.org/packages/81/dd/ada8cf745d190b68d9b08b15f7aa3e0a9fbcb9007d80cb881206410fcb04/azure-appconfiguration-1.0.0b6.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c22bfd615b8357dd5acf01eac77be00", "sha256": "eaa2c91fab08d3fedc9bb22523c43028d4048c024367172b787d225e3e7388c2"}, "downloads": -1, "filename": "azure_appconfiguration-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2c22bfd615b8357dd5acf01eac77be00", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36824, "upload_time": "2020-01-06T22:07:51", "upload_time_iso_8601": "2020-01-06T22:07:51.177086Z", "url": "https://files.pythonhosted.org/packages/0e/23/dcdc3112532e3dd9dc9a0a08b0378bc7825ea68a0d6b5781b775584e97a8/azure_appconfiguration-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d70f15c6fa7511901b73daf9630508df", "sha256": "45b088afb7af87208cac5c3645cecadc26abf332476aacefb6619b81d16152f2"}, "downloads": -1, "filename": "azure-appconfiguration-1.0.0.zip", "has_sig": false, "md5_digest": "d70f15c6fa7511901b73daf9630508df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74866, "upload_time": "2020-01-06T22:07:52", "upload_time_iso_8601": "2020-01-06T22:07:52.940885Z", "url": "https://files.pythonhosted.org/packages/ea/d9/96d05c17fde92b86a4048b92d524ff3ed0d09294636f1d0da46e1ee5f7c8/azure-appconfiguration-1.0.0.zip", "yanked": false}], "timestamp": "Thu May  7 18:15:27 2020"}