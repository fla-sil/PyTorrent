{"info": {"author": "Alvaro Torras Casas", "author_email": "atorras1618@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "\n.. image:: https://github.com/atorras1618/permaviss/workflows/CI/CD/badge.svg\n   :target: https://github.com/atorras1618/PerMaViss/actions?query=workflow%3ACI%2FCD+branch%3Amaster\n\n.. image:: https://readthedocs.org/projects/permaviss/badge/?version=latest\n   :target: https://permaviss.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://travis-ci.org/atorras1618/PerMaViss.svg?branch=master\n    :target: https://travis-ci.org/atorras1618/PerMaViss\n\n.. image:: https://coveralls.io/repos/github/atorras1618/PerMaViss/badge.svg?branch=master\n   :target: https://coveralls.io/github/atorras1618/PerMaViss?branch=master\n\n.. image:: https://zenodo.org/badge/222728935.svg\n   :target: https://zenodo.org/badge/latestdoi/222728935\n\nPerMaViss\n*********\n\nWelcome to PerMaViss! This is a Python3 implementation of the Persistence Mayer Vietoris spectral sequence. \nFor full documentation, visit `this page <https://permaviss.readthedocs.io/en/latest/?badge=latest>`_. \nFor a mathematical description of the procedure, see `Distributing Persistent Homology via Spectral Sequences <https://arxiv.org/abs/1907.05228>`_. \n\nIn a nutshell, this library is intended to be a `proof of concept` for persistence homology parallelization. That is, one can divide a point cloud into covering regions, compute persistent homology on each part, and combine all results to obtain the global persistent homology again. This is done by means of the Persistence Mayer Vietoris spectral sequence. Here we present two examples, the torus and random point clouds in three dimensions. Both of these are divided into `8` mutually overlapping regions, and the spectral sequence is computed with respect to this cover. The resulting barcodes coincide with that which would be obtained by computing persistent homology directly.\n\nThis implementation is more of a `prototype` than a finished program. As such, it still needs to be optimized. Also, it would be great to have more examples for different covers. Additionally, it would be interesting to also have an implementation for cubical, alpha, and other complexes. Any collaboration or suggestion will be welcome!\n\n\n.. image:: docs/examples/TorusExtension.png\n   :width: 700 \n   :align: center\n\n.. image:: docs/examples/torusRep0.png\n  :width: 300\n\n\nDependencies\n============\n\nPerMaViss requires:\n\n- Python3\n- NumPy\n- Scipy\n\nOptional for examples and notebooks:\n\n- Matplotlib\n- mpl_toolkits\n\n\nInstallation\n============\n\nPermaviss is built on Python 3, and relies only on `NumPy <http://www.numpy.org/>`_  and `Scipy <https://www.scipy.org/>`_. \n\nAdditionally, `Matplotlib <https://matplotlib.org/>`_ and `mpl_toolkits <https://matplotlib.org/mpl_toolkits/>`_ are used for the tutorials. \n\nTo install using :code:`pip3`::\n\n    $ pip3 install permaviss\n\nIf you prefer to install from source, clone from GitHub repository::\n\n    $ git clone https://github.com/atorras1618/PerMaViss\n    $ cd PerMaViss\n    $ pip3 install -e .\n\nQuickstart\n==========\n\nThe main function which we use is `permaviss.spectral_sequence.MV_spectral_seq.create_MV_ss`.\nWe start by taking 100 points in a noisy circle of radius 1\n\n    >>> from permaviss.sample_point_clouds.examples import random_circle\n    >>> point_cloud = random_circle(100, 1, epsilon=0.2)\n\nNow we set the parameters for spectral sequence. These are\n\n- a prime number `p`,\n\n- the maximum dimension of the Rips Complex `max_dim`,\n\n- the maximum radius of filtration `max_r`,\n\n- the number of divisions `max_div` along the maximum range in `point_cloud`,\n\n- and the `overlap` between different covering regions.\n\nIn our case, we set the parameters to cover our circle with 9 covering regions.\nNotice that  in order for the algorithm to give the correct result we need `overlap > max_r`.\n\n    >>> p = 3\n    >>> max_dim = 3\n    >>> max_r = 0.2\n    >>> max_div = 3\n    >>> overlap = max_r * 1.01\n\nThen, we compute the spectral sequence, notice that the method prints the successive page ranks.\n\n    >>> from permaviss.spectral_sequence.MV_spectral_seq import create_MV_ss\n    >>> MV_ss = create_MV_ss(point_cloud, max_r, max_dim, max_div, overlap, p)\n    PAGE: 1\n    [[  0   0   0   0   0]\n     [  7   0   0   0   0]\n     [133  33   0   0   0]]\n    PAGE: 2\n    [[  0   0   0   0   0]\n     [  7   0   0   0   0]\n     [100   0   0   0   0]]\n    PAGE: 3\n    [[  0   0   0   0   0]\n     [  7   0   0   0   0]\n     [100   0   0   0   0]]\n    PAGE: 4\n    [[  0   0   0   0   0]\n     [  7   0   0   0   0]\n     [100   0   0   0   0]]\n\nWe can inspect the obtained barcodes on the 1st dimension.\n\n    >>> MV_ss.persistent_homology[1].barcode\n    array([[ 0.08218822,  0.09287436],\n           [ 0.0874977 ,  0.11781674],\n           [ 0.10459203,  0.12520266],\n           [ 0.14999507,  0.18220508],\n           [ 0.15036084,  0.15760192],\n           [ 0.16260913,  0.1695936 ],\n           [ 0.16462541,  0.16942819]])\n\nNotice that in this case, there was no need to solve the extension problem. See the examples folder for nontrivial extensions.\n\n\nDISCLAIMER\n==========\n\n**The main purpose of this library is to explore how the Persistent Mayer Vietoris spectral sequence can be used for computing persistent homology.**\n\n**This does not pretend to be an optimal library. Also, it does not parallelize the computations of persistent homology after the first page. Thus, this is slower than most other persistent homology computations.**\n\n**This library is still on development and is still highly undertested. If you notice any issues, please email\nTorrasCasasA@cardiff.ac.uk**\n\n**This library is published under the standard MIT licence. Thus:\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.**\n\nHow to cite\n===========\n\n\u00c1lvaro Torras Casas. (2020, January 20). PerMaViss: Persistence Mayer Vietoris spectral sequence (Version v0.0.2). Zenodo. http://doi.org/10.5281/zenodo.3613870\n\nReference\n=========\n\nThis module is written using the algorithm in `Distributing Persistent Homology via Spectral Sequences <https://arxiv.org/abs/1907.05228>`_.\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/atorras1618/PerMaViss/tarball/v0.0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/atorras1618/PerMaViss", "keywords": "spectral sequence,persistent homology,Mayer Vietoris", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "permaviss", "package_url": "https://pypi.org/project/permaviss/", "platform": "", "project_url": "https://pypi.org/project/permaviss/", "project_urls": {"Download": "https://github.com/atorras1618/PerMaViss/tarball/v0.0.2", "Homepage": "https://github.com/atorras1618/PerMaViss"}, "release_url": "https://pypi.org/project/permaviss/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Persistence Mayer Vietoris spectral sequence", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/atorras1618/PerMaViss/actions?query=workflow%3ACI%2FCD+branch%3Amaster\" rel=\"nofollow\"><img alt=\"https://github.com/atorras1618/permaviss/workflows/CI/CD/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db485421b42ebd5273f9b0b493a8cf66a509c8de/68747470733a2f2f6769746875622e636f6d2f61746f72726173313631382f7065726d61766973732f776f726b666c6f77732f43492f43442f62616467652e737667\"></a>\n<a href=\"https://permaviss.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24e3d3240e6a383632a688807469280ac96a79c8/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7065726d61766973732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/atorras1618/PerMaViss\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/atorras1618/PerMaViss.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74c8f464f19146da0813a3b1fd8020f1090f0e27/68747470733a2f2f7472617669732d63692e6f72672f61746f72726173313631382f5065724d61566973732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/atorras1618/PerMaViss?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/atorras1618/PerMaViss/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/794712b03476df6486c81d81de19e4f6ac245bf4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f61746f72726173313631382f5065724d61566973732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/222728935\" rel=\"nofollow\"><img alt=\"https://zenodo.org/badge/222728935.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fce451e99ac7380057ee14995e639737b33e3d0a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3232323732383933352e737667\"></a>\n<div id=\"permaviss\">\n<h2>PerMaViss</h2>\n<p>Welcome to PerMaViss! This is a Python3 implementation of the Persistence Mayer Vietoris spectral sequence.\nFor full documentation, visit <a href=\"https://permaviss.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\">this page</a>.\nFor a mathematical description of the procedure, see <a href=\"https://arxiv.org/abs/1907.05228\" rel=\"nofollow\">Distributing Persistent Homology via Spectral Sequences</a>.</p>\n<p>In a nutshell, this library is intended to be a <cite>proof of concept</cite> for persistence homology parallelization. That is, one can divide a point cloud into covering regions, compute persistent homology on each part, and combine all results to obtain the global persistent homology again. This is done by means of the Persistence Mayer Vietoris spectral sequence. Here we present two examples, the torus and random point clouds in three dimensions. Both of these are divided into <cite>8</cite> mutually overlapping regions, and the spectral sequence is computed with respect to this cover. The resulting barcodes coincide with that which would be obtained by computing persistent homology directly.</p>\n<p>This implementation is more of a <cite>prototype</cite> than a finished program. As such, it still needs to be optimized. Also, it would be great to have more examples for different covers. Additionally, it would be interesting to also have an implementation for cubical, alpha, and other complexes. Any collaboration or suggestion will be welcome!</p>\n<img alt=\"docs/examples/TorusExtension.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ad71c348773a60c12f10a2e395f4d4266882a2e/646f63732f6578616d706c65732f546f727573457874656e73696f6e2e706e67\" width=\"700\">\n<img alt=\"docs/examples/torusRep0.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a79adaa171312178663d04c8e7e2c9e230df87e/646f63732f6578616d706c65732f746f727573526570302e706e67\" width=\"300\">\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>PerMaViss requires:</p>\n<ul>\n<li>Python3</li>\n<li>NumPy</li>\n<li>Scipy</li>\n</ul>\n<p>Optional for examples and notebooks:</p>\n<ul>\n<li>Matplotlib</li>\n<li>mpl_toolkits</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Permaviss is built on Python 3, and relies only on <a href=\"http://www.numpy.org/\" rel=\"nofollow\">NumPy</a>  and <a href=\"https://www.scipy.org/\" rel=\"nofollow\">Scipy</a>.</p>\n<p>Additionally, <a href=\"https://matplotlib.org/\" rel=\"nofollow\">Matplotlib</a> and <a href=\"https://matplotlib.org/mpl_toolkits/\" rel=\"nofollow\">mpl_toolkits</a> are used for the tutorials.</p>\n<p>To install using <code>pip3</code>:</p>\n<pre>$ pip3 install permaviss\n</pre>\n<p>If you prefer to install from source, clone from GitHub repository:</p>\n<pre>$ git clone https://github.com/atorras1618/PerMaViss\n$ cd PerMaViss\n$ pip3 install -e .\n</pre>\n</div>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>The main function which we use is <cite>permaviss.spectral_sequence.MV_spectral_seq.create_MV_ss</cite>.\nWe start by taking 100 points in a noisy circle of radius 1</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from permaviss.sample_point_clouds.examples import random_circle\n&gt;&gt;&gt; point_cloud = random_circle(100, 1, epsilon=0.2)\n</pre>\n</blockquote>\n<p>Now we set the parameters for spectral sequence. These are</p>\n<ul>\n<li>a prime number <cite>p</cite>,</li>\n<li>the maximum dimension of the Rips Complex <cite>max_dim</cite>,</li>\n<li>the maximum radius of filtration <cite>max_r</cite>,</li>\n<li>the number of divisions <cite>max_div</cite> along the maximum range in <cite>point_cloud</cite>,</li>\n<li>and the <cite>overlap</cite> between different covering regions.</li>\n</ul>\n<p>In our case, we set the parameters to cover our circle with 9 covering regions.\nNotice that  in order for the algorithm to give the correct result we need <cite>overlap &gt; max_r</cite>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; p = 3\n&gt;&gt;&gt; max_dim = 3\n&gt;&gt;&gt; max_r = 0.2\n&gt;&gt;&gt; max_div = 3\n&gt;&gt;&gt; overlap = max_r * 1.01\n</pre>\n</blockquote>\n<p>Then, we compute the spectral sequence, notice that the method prints the successive page ranks.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from permaviss.spectral_sequence.MV_spectral_seq import create_MV_ss\n&gt;&gt;&gt; MV_ss = create_MV_ss(point_cloud, max_r, max_dim, max_div, overlap, p)\nPAGE: 1\n[[  0   0   0   0   0]\n [  7   0   0   0   0]\n [133  33   0   0   0]]\nPAGE: 2\n[[  0   0   0   0   0]\n [  7   0   0   0   0]\n [100   0   0   0   0]]\nPAGE: 3\n[[  0   0   0   0   0]\n [  7   0   0   0   0]\n [100   0   0   0   0]]\nPAGE: 4\n[[  0   0   0   0   0]\n [  7   0   0   0   0]\n [100   0   0   0   0]]\n</pre>\n</blockquote>\n<p>We can inspect the obtained barcodes on the 1st dimension.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; MV_ss.persistent_homology[1].barcode\narray([[ 0.08218822,  0.09287436],\n       [ 0.0874977 ,  0.11781674],\n       [ 0.10459203,  0.12520266],\n       [ 0.14999507,  0.18220508],\n       [ 0.15036084,  0.15760192],\n       [ 0.16260913,  0.1695936 ],\n       [ 0.16462541,  0.16942819]])\n</pre>\n</blockquote>\n<p>Notice that in this case, there was no need to solve the extension problem. See the examples folder for nontrivial extensions.</p>\n</div>\n<div id=\"disclaimer\">\n<h3>DISCLAIMER</h3>\n<p><strong>The main purpose of this library is to explore how the Persistent Mayer Vietoris spectral sequence can be used for computing persistent homology.</strong></p>\n<p><strong>This does not pretend to be an optimal library. Also, it does not parallelize the computations of persistent homology after the first page. Thus, this is slower than most other persistent homology computations.</strong></p>\n<p><strong>This library is still on development and is still highly undertested. If you notice any issues, please email\nTorrasCasasA@cardiff.ac.uk</strong></p>\n<p><strong>This library is published under the standard MIT licence. Thus:\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</strong></p>\n</div>\n<div id=\"how-to-cite\">\n<h3>How to cite</h3>\n<p>\u00c1lvaro Torras Casas. (2020, January 20). PerMaViss: Persistence Mayer Vietoris spectral sequence (Version v0.0.2). Zenodo. <a href=\"http://doi.org/10.5281/zenodo.3613870\" rel=\"nofollow\">http://doi.org/10.5281/zenodo.3613870</a></p>\n</div>\n<div id=\"reference\">\n<h3>Reference</h3>\n<p>This module is written using the algorithm in <a href=\"https://arxiv.org/abs/1907.05228\" rel=\"nofollow\">Distributing Persistent Homology via Spectral Sequences</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6548379, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6d01e8b7e85362285e39f016a3eeee28", "sha256": "94a81aaa70faf82d1a780098d3fbee87c39eeff0261a038a6b785ebcf585bfba"}, "downloads": -1, "filename": "permaviss-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6d01e8b7e85362285e39f016a3eeee28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44329, "upload_time": "2020-01-20T10:51:37", "upload_time_iso_8601": "2020-01-20T10:51:37.037330Z", "url": "https://files.pythonhosted.org/packages/44/46/2b616efa02b3e88f82aea25c22b2d3765505fd75bbce0e6be6bba7c1a6fa/permaviss-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19141e9bf2620a5d30df9dec1c5f009c", "sha256": "62a9395b712da79f573ca93ff87d63751349aff9f1a39418597f2ebb2d08577f"}, "downloads": -1, "filename": "permaviss-0.0.1.tar.gz", "has_sig": false, "md5_digest": "19141e9bf2620a5d30df9dec1c5f009c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35316, "upload_time": "2020-01-20T10:51:39", "upload_time_iso_8601": "2020-01-20T10:51:39.426781Z", "url": "https://files.pythonhosted.org/packages/f6/97/19ce2a0f6ad1c3c933ff3f9e0319e15df3538ab0060b54aa240335cbcd7f/permaviss-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f0ae33fb8ee84f69bc84ab24a1f11429", "sha256": "7a24e9ab945c03ec277fbb257e948f06075f74f6097dae4235a8f5cb1115f863"}, "downloads": -1, "filename": "permaviss-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f0ae33fb8ee84f69bc84ab24a1f11429", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44625, "upload_time": "2020-01-31T10:26:38", "upload_time_iso_8601": "2020-01-31T10:26:38.239834Z", "url": "https://files.pythonhosted.org/packages/0c/27/b8b3d72fb25e496a207df1caa5f216caa3f2383d6ce731a53ccda33879a1/permaviss-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e215e609494c3598bc53c884ceb7d22", "sha256": "72ff440060d3d1cb64b7c311fc119a5b7a02816b5cef3df00f90c6f33130dcec"}, "downloads": -1, "filename": "permaviss-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3e215e609494c3598bc53c884ceb7d22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35691, "upload_time": "2020-01-31T10:26:40", "upload_time_iso_8601": "2020-01-31T10:26:40.669129Z", "url": "https://files.pythonhosted.org/packages/82/70/3ef3514f69b05ec27009765b4f72215319f63cb790c7c8357025945c3c02/permaviss-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f0ae33fb8ee84f69bc84ab24a1f11429", "sha256": "7a24e9ab945c03ec277fbb257e948f06075f74f6097dae4235a8f5cb1115f863"}, "downloads": -1, "filename": "permaviss-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f0ae33fb8ee84f69bc84ab24a1f11429", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44625, "upload_time": "2020-01-31T10:26:38", "upload_time_iso_8601": "2020-01-31T10:26:38.239834Z", "url": "https://files.pythonhosted.org/packages/0c/27/b8b3d72fb25e496a207df1caa5f216caa3f2383d6ce731a53ccda33879a1/permaviss-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e215e609494c3598bc53c884ceb7d22", "sha256": "72ff440060d3d1cb64b7c311fc119a5b7a02816b5cef3df00f90c6f33130dcec"}, "downloads": -1, "filename": "permaviss-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3e215e609494c3598bc53c884ceb7d22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35691, "upload_time": "2020-01-31T10:26:40", "upload_time_iso_8601": "2020-01-31T10:26:40.669129Z", "url": "https://files.pythonhosted.org/packages/82/70/3ef3514f69b05ec27009765b4f72215319f63cb790c7c8357025945c3c02/permaviss-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:15 2020"}