{"info": {"author": "Jayden Windle", "author_email": "jaydenwindle@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# Graphene Subscriptions\n\n<p>\n    <a href=\"\" alt=\"License\">\n        <img src=\"https://img.shields.io/pypi/l/graphene-subscriptions\" /></a>\n    <a href=\"https://pypi.org/project/graphene-subscriptions/\" alt=\"Pypi\">\n        <img src=\"https://img.shields.io/pypi/v/graphene-subscriptions\" /></a>\n    <a href=\"https://github.com/jaydenwindle/graphene-subscriptions/pulse\" alt=\"Activity\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/jaydenwindle/graphene-subscriptions\" /></a>\n    <a href=\"https://github.com/jaydenwindle/graphene-subscriptions/actions?query=workflow%3ATests\">\n        <img src=\"https://github.com/jaydenwindle/graphene-subscriptions/workflows/Tests/badge.svg\" alt=\"build status\"></a>\n    <a href=\"https://twitter.com/intent/follow?screen_name=jayden_windle\">\n        <img src=\"https://img.shields.io/twitter/follow/jayden_windle?style=social&logo=twitter\"\n            alt=\"follow on Twitter\"></a>\n</p>\n\nA plug-and-play GraphQL subscription implementation for Graphene + Django built using Django Channels. Provides support for model creation, mutation and deletion subscriptions out of the box.\n\n\n## Installation\n\n1. Install `graphene-subscriptions`\n    ```bash\n    $ pip install graphene-subscriptions\n    ```\n\n2. Add `graphene_subscriptions` to `INSTALLED_APPS`:\n\n    ```python\n    # your_project/settings.py\n    INSTALLED_APPS = [\n        # ...\n        'graphene_subscriptions'\n    ]\n    ```\n\n3. Add Django Channels to your project (see: [Django Channels installation docs](https://channels.readthedocs.io/en/latest/installation.html)) and set up [Channel Layers](https://channels.readthedocs.io/en/latest/topics/channel_layers.html). If you don't want to set up a Redis instance in your dev environment yet, you can use the in-memory Channel Layer:\n\n    ```python\n    # your_project/settings.py\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels.layers.InMemoryChannelLayer\"\n        }\n    }\n    ```\n\n4. Add `GraphqlSubscriptionConsumer` to your `routing.py` file.\n\n    ```python\n    # your_project/routing.py\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from django.urls import path \n\n    from graphene_subscriptions.consumers import GraphqlSubscriptionConsumer\n\n    application = ProtocolTypeRouter({\n        \"websocket\": URLRouter([\n            path('graphql/', GraphqlSubscriptionConsumer)\n        ]),\n    })\n    ```\n\n5. Connect signals for any models you want to create subscriptions for\n\n    ```python\n    # your_app/signals.py\n    from django.db.models.signals import post_save, post_delete\n    from graphene_subscriptions.signals import post_save_subscription, post_delete_subscription\n\n    from your_app.models import YourModel\n\n    post_save.connect(post_save_subscription, sender=YourModel, dispatch_uid=\"your_model_post_save\")\n    post_delete.connect(post_delete_subscription, sender=YourModel, dispatch_uid=\"your_model_post_delete\")\n\n    # your_app/apps.py\n    from django.apps import AppConfig\n\n    class YourAppConfig(AppConfig):\n        name = 'your_app'\n\n        def ready(self):\n            import your_app.signals\n    ```\n\n6. Define your subscriptions and connect them to your project schema\n\n    ```python\n    #your_project/schema.py\n    import graphene\n\n    from your_app.graphql.subscriptions import YourSubscription\n\n\n    class Query(graphene.ObjectType):\n        base = graphene.String()\n\n\n    class Subscription(YourSubscription):\n        pass\n\n\n    schema = graphene.Schema(\n        query=Query,\n        subscription=Subscription\n    )\n    ```\n\n\n## Defining Subscriptions\n\nSubscriptions in Graphene are defined as normal `ObjectType`'s. Each subscription field resolver must return an observable which emits values matching the field's type.\n\nA simple hello world subscription (which returns the value `\"hello world!\"` every 3 seconds) could be defined as follows:\n\n```python\nimport graphene\nfrom rx import Observable\n\nclass Subscription(graphene.ObjectType):\n    hello = graphene.String()\n\n    def resolve_hello(root, info):\n        return Observable.interval(3000) \\\n                         .map(lambda i: \"hello world!\")\n```\n\n## Responding to Model Events\n\nEach subscription that you define will receive a an `Observable` of `SubscriptionEvent`'s as the `root` parameter, which will emit a new `SubscriptionEvent` each time one of the connected signals are fired.\n\nA `SubscriptionEvent` has two attributes: the `operation` that triggered the event, usually `CREATED`, `UPDATED` or `DELETED`) and the `instance` that triggered the signal.\n\nSince `root` is an `Observable`, you can apply any `rxpy` operations before returning it.\n\n### Model Created Subscriptions\n\nFor example, let's create a subscription called `yourModelCreated` that will be fired whenever an instance of `YourModel` is created. Since `root` receives a new event *every time a connected signal is fired*, we'll need to filter for only the events we want. In this case, we want all events where `operation` is `created` and the event `instance` is an instance of our model.\n\n```python\nimport graphene\nfrom graphene_django.types import DjangoObjectType\nfrom graphene_subscriptions.events import CREATED\n\nfrom your_app.models import YourModel\n\n\nclass YourModelType(DjangoObjectType)\n    class Meta:\n        model = YourModel\n\n\nclass Subscription(graphene.ObjectType):\n    your_model_created = graphene.Field(YourModelType)\n\n    def resolve_your_model_created(root, info):\n        return root.filter(\n            lambda event:\n                event.operation == CREATED and\n                isinstance(event.instance, YourModel)\n        ).map(lambda event: event.instance)\n```\n\n### Model Updated Subscriptions\n\nYou can also filter events based on a subscription's arguments. For example, here's a subscription that fires whenever a model is updated:\n\n```python\nimport graphene\nfrom graphene_django.types import DjangoObjectType\nfrom graphene_subscriptions.events import UPDATED \n\nfrom your_app.models import YourModel\n\n\nclass YourModelType(DjangoObjectType)\n    class Meta:\n        model = YourModel\n\n\nclass Subscription(graphene.ObjectType):\n    your_model_updated = graphene.Field(YourModelType, id=graphene.ID())\n\n    def resolve_your_model_updated(root, info, id):\n        return root.filter(\n            lambda event:\n                event.operation == UPDATED and\n                isinstance(event.instance, YourModel) and\n                event.instance.pk == int(id)\n        ).map(lambda event: event.instance)\n```\n\n### Model Updated Subscriptions\n\nDefining a subscription that is fired whenever a given model instance is deleted can be accomplished like so\n\n```python\nimport graphene\nfrom graphene_django.types import DjangoObjectType\nfrom graphene_subscriptions.events import DELETED \n\nfrom your_app.models import YourModel\n\n\nclass YourModelType(DjangoObjectType)\n    class Meta:\n        model = YourModel\n\n\nclass Subscription(graphene.ObjectType):\n    your_model_deleted = graphene.Field(YourModelType, id=graphene.ID())\n\n    def resolve_your_model_deleted(root, info, id):\n        return root.filter(\n            lambda event:\n                event.operation == DELETED and\n                isinstance(event.instance, YourModel) and\n                event.instance.pk == int(id)\n        ).map(lambda event: event.instance)\n```\n\n\n## Custom Events\n\nSometimes you need to create subscriptions which responds to events other than Django signals. In this case, you can use the `SubscriptionEvent` class directly. (Note: in order to maintain compatibility with Django channels, all `instance` values must be json serializable)\n\nFor example, a custom event subscription might look like this:\n\n```python\nimport graphene\n\nCUSTOM_EVENT = 'custom_event'\n\nclass CustomEventSubscription(graphene.ObjectType):\n    custom_subscription = graphene.Field(CustomType)\n\n    def resolve_custom_subscription(root, info):\n        return root.filter(\n            lambda event:\n                event.operation == CUSTOM_EVENT\n        ).map(lambda event: event.instance)\n\n\n# elsewhere in your app:\nfrom graphene_subscriptions.events import SubscriptionEvent\n\nevent = SubscriptionEvent(\n    operation=CUSTOM_EVENT,\n    instance=<any json-serializable value>\n)\n\nevent.send()\n```\n\n\n## Production Readiness\n\nThis implementation was spun out of an internal implementation I developed which we've been using in production for the past 6 months at [Jetpack](https://www.tryjetpack.com/). We've had relatively few issues with it, and I am confident that it can be reliably used in production environments.\n\nHowever, being a startup, our definition of production-readiness may be slightly different from your own. Also keep in mind that the scale at which we operate hasn't been taxing enough to illuminate where the scaling bottlenecks in this implementation may hide.\n\nIf you end up running this in production, please [reach out](https://twitter.com/jayden_windle) and let me know!\n\n\n## Contributing\n\nPRs and other contributions are very welcome! To set up `graphene_subscriptions` in a development envrionment, do the following:\n\n1. Clone the repo\n    ```bash\n    $ git clone git@github.com:jaydenwindle/graphene-subscriptions.git\n    ```\n\n2. Install [poetry](https://poetry.eustace.io/)\n    ```bash\n    $ curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n    ```\n3. Install dependencies\n    ```bash\n    $ poetry install\n    ```\n\n4. Run the test suite\n    ```bash\n    $ poetry run pytest\n    ```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jaydenwindle/graphene-subscriptions", "keywords": "", "license": "MIT", "maintainer": "Jayden Windle", "maintainer_email": "jaydenwindle@gmail.com", "name": "graphene-subscriptions", "package_url": "https://pypi.org/project/graphene-subscriptions/", "platform": "", "project_url": "https://pypi.org/project/graphene-subscriptions/", "project_urls": {"Homepage": "https://github.com/jaydenwindle/graphene-subscriptions", "Repository": "https://github.com/jaydenwindle/graphene-subscriptions"}, "release_url": "https://pypi.org/project/graphene-subscriptions/1.0.2/", "requires_dist": ["django (>=1.11)", "channels (>=2.3,<3.0)", "graphene-django (>=2.7,<3.0)"], "requires_python": ">=3.6", "summary": "A plug-and-play GraphQL subscription implementation for Graphene + Django built using Django Channels.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Graphene Subscriptions</h1>\n<p>\n    <a href=\"\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eda6821d4ee631f813ea4639e0d863a46313f657/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6772617068656e652d737562736372697074696f6e73\"></a>\n    <a href=\"https://pypi.org/project/graphene-subscriptions/\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/398e4829efc32493669e4111e8cb552ba2f872c6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6772617068656e652d737562736372697074696f6e73\"></a>\n    <a href=\"https://github.com/jaydenwindle/graphene-subscriptions/pulse\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6db0ee9d3fab363acf6067b33ed581d3395e073/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f6a617964656e77696e646c652f6772617068656e652d737562736372697074696f6e73\"></a>\n    <a href=\"https://github.com/jaydenwindle/graphene-subscriptions/actions?query=workflow%3ATests\" rel=\"nofollow\">\n        <img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fac596c53fec94aed5028557c0f2b031e1e6f12f/68747470733a2f2f6769746875622e636f6d2f6a617964656e77696e646c652f6772617068656e652d737562736372697074696f6e732f776f726b666c6f77732f54657374732f62616467652e737667\"></a>\n    <a href=\"https://twitter.com/intent/follow?screen_name=jayden_windle\" rel=\"nofollow\">\n        <img alt=\"follow on Twitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab9a1eca315c2b16137f00b3798bda2cc2900db4/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6a617964656e5f77696e646c653f7374796c653d736f6369616c266c6f676f3d74776974746572\"></a>\n</p>\n<p>A plug-and-play GraphQL subscription implementation for Graphene + Django built using Django Channels. Provides support for model creation, mutation and deletion subscriptions out of the box.</p>\n<h2>Installation</h2>\n<ol>\n<li>\n<p>Install <code>graphene-subscriptions</code></p>\n<pre>$ pip install graphene-subscriptions\n</pre>\n</li>\n<li>\n<p>Add <code>graphene_subscriptions</code> to <code>INSTALLED_APPS</code>:</p>\n<pre><span class=\"c1\"># your_project/settings.py</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'graphene_subscriptions'</span>\n<span class=\"p\">]</span>\n</pre>\n</li>\n<li>\n<p>Add Django Channels to your project (see: <a href=\"https://channels.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">Django Channels installation docs</a>) and set up <a href=\"https://channels.readthedocs.io/en/latest/topics/channel_layers.html\" rel=\"nofollow\">Channel Layers</a>. If you don't want to set up a Redis instance in your dev environment yet, you can use the in-memory Channel Layer:</p>\n<pre><span class=\"c1\"># your_project/settings.py</span>\n<span class=\"n\">CHANNEL_LAYERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"BACKEND\"</span><span class=\"p\">:</span> <span class=\"s2\">\"channels.layers.InMemoryChannelLayer\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>Add <code>GraphqlSubscriptionConsumer</code> to your <code>routing.py</code> file.</p>\n<pre><span class=\"c1\"># your_project/routing.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels.routing</span> <span class=\"kn\">import</span> <span class=\"n\">ProtocolTypeRouter</span><span class=\"p\">,</span> <span class=\"n\">URLRouter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span> \n\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_subscriptions.consumers</span> <span class=\"kn\">import</span> <span class=\"n\">GraphqlSubscriptionConsumer</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">ProtocolTypeRouter</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"websocket\"</span><span class=\"p\">:</span> <span class=\"n\">URLRouter</span><span class=\"p\">([</span>\n        <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'graphql/'</span><span class=\"p\">,</span> <span class=\"n\">GraphqlSubscriptionConsumer</span><span class=\"p\">)</span>\n    <span class=\"p\">]),</span>\n<span class=\"p\">})</span>\n</pre>\n</li>\n<li>\n<p>Connect signals for any models you want to create subscriptions for</p>\n<pre><span class=\"c1\"># your_app/signals.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">post_delete</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_subscriptions.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_save_subscription</span><span class=\"p\">,</span> <span class=\"n\">post_delete_subscription</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">YourModel</span>\n\n<span class=\"n\">post_save</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">post_save_subscription</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">YourModel</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s2\">\"your_model_post_save\"</span><span class=\"p\">)</span>\n<span class=\"n\">post_delete</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">post_delete_subscription</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">YourModel</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s2\">\"your_model_post_delete\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># your_app/apps.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">YourAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'your_app'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">your_app.signals</span>\n</pre>\n</li>\n<li>\n<p>Define your subscriptions and connect them to your project schema</p>\n<pre><span class=\"c1\">#your_project/schema.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.graphql.subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">YourSubscription</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">YourSubscription</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span>\n    <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">,</span>\n    <span class=\"n\">subscription</span><span class=\"o\">=</span><span class=\"n\">Subscription</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h2>Defining Subscriptions</h2>\n<p>Subscriptions in Graphene are defined as normal <code>ObjectType</code>'s. Each subscription field resolver must return an observable which emits values matching the field's type.</p>\n<p>A simple hello world subscription (which returns the value <code>\"hello world!\"</code> every 3 seconds) could be defined as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rx</span> <span class=\"kn\">import</span> <span class=\"n\">Observable</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_hello</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Observable</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">)</span> \\\n                         <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"s2\">\"hello world!\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Responding to Model Events</h2>\n<p>Each subscription that you define will receive a an <code>Observable</code> of <code>SubscriptionEvent</code>'s as the <code>root</code> parameter, which will emit a new <code>SubscriptionEvent</code> each time one of the connected signals are fired.</p>\n<p>A <code>SubscriptionEvent</code> has two attributes: the <code>operation</code> that triggered the event, usually <code>CREATED</code>, <code>UPDATED</code> or <code>DELETED</code>) and the <code>instance</code> that triggered the signal.</p>\n<p>Since <code>root</code> is an <code>Observable</code>, you can apply any <code>rxpy</code> operations before returning it.</p>\n<h3>Model Created Subscriptions</h3>\n<p>For example, let's create a subscription called <code>yourModelCreated</code> that will be fired whenever an instance of <code>YourModel</code> is created. Since <code>root</code> receives a new event <em>every time a connected signal is fired</em>, we'll need to filter for only the events we want. In this case, we want all events where <code>operation</code> is <code>created</code> and the event <code>instance</code> is an instance of our model.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django.types</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoObjectType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_subscriptions.events</span> <span class=\"kn\">import</span> <span class=\"n\">CREATED</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">YourModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YourModelType</span><span class=\"p\">(</span><span class=\"n\">DjangoObjectType</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">YourModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">your_model_created</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">YourModelType</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_your_model_created</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span>\n                <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"n\">CREATED</span> <span class=\"ow\">and</span>\n                <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">YourModel</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n</pre>\n<h3>Model Updated Subscriptions</h3>\n<p>You can also filter events based on a subscription's arguments. For example, here's a subscription that fires whenever a model is updated:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django.types</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoObjectType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_subscriptions.events</span> <span class=\"kn\">import</span> <span class=\"n\">UPDATED</span> \n\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">YourModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YourModelType</span><span class=\"p\">(</span><span class=\"n\">DjangoObjectType</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">YourModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">your_model_updated</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">YourModelType</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_your_model_updated</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span>\n                <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"n\">UPDATED</span> <span class=\"ow\">and</span>\n                <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">YourModel</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n                <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n</pre>\n<h3>Model Updated Subscriptions</h3>\n<p>Defining a subscription that is fired whenever a given model instance is deleted can be accomplished like so</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django.types</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoObjectType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_subscriptions.events</span> <span class=\"kn\">import</span> <span class=\"n\">DELETED</span> \n\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">YourModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YourModelType</span><span class=\"p\">(</span><span class=\"n\">DjangoObjectType</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">YourModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">your_model_deleted</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">YourModelType</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_your_model_deleted</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span>\n                <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"n\">DELETED</span> <span class=\"ow\">and</span>\n                <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">YourModel</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n                <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n</pre>\n<h2>Custom Events</h2>\n<p>Sometimes you need to create subscriptions which responds to events other than Django signals. In this case, you can use the <code>SubscriptionEvent</code> class directly. (Note: in order to maintain compatibility with Django channels, all <code>instance</code> values must be json serializable)</p>\n<p>For example, a custom event subscription might look like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n\n<span class=\"n\">CUSTOM_EVENT</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_event'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomEventSubscription</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">custom_subscription</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">CustomType</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_custom_subscription</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span>\n                <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"n\">CUSTOM_EVENT</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># elsewhere in your app:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_subscriptions.events</span> <span class=\"kn\">import</span> <span class=\"n\">SubscriptionEvent</span>\n\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">SubscriptionEvent</span><span class=\"p\">(</span>\n    <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"n\">CUSTOM_EVENT</span><span class=\"p\">,</span>\n    <span class=\"n\">instance</span><span class=\"o\">=&lt;</span><span class=\"nb\">any</span> <span class=\"n\">json</span><span class=\"o\">-</span><span class=\"n\">serializable</span> <span class=\"n\">value</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre>\n<h2>Production Readiness</h2>\n<p>This implementation was spun out of an internal implementation I developed which we've been using in production for the past 6 months at <a href=\"https://www.tryjetpack.com/\" rel=\"nofollow\">Jetpack</a>. We've had relatively few issues with it, and I am confident that it can be reliably used in production environments.</p>\n<p>However, being a startup, our definition of production-readiness may be slightly different from your own. Also keep in mind that the scale at which we operate hasn't been taxing enough to illuminate where the scaling bottlenecks in this implementation may hide.</p>\n<p>If you end up running this in production, please <a href=\"https://twitter.com/jayden_windle\" rel=\"nofollow\">reach out</a> and let me know!</p>\n<h2>Contributing</h2>\n<p>PRs and other contributions are very welcome! To set up <code>graphene_subscriptions</code> in a development envrionment, do the following:</p>\n<ol>\n<li>\n<p>Clone the repo</p>\n<pre>$ git clone git@github.com:jaydenwindle/graphene-subscriptions.git\n</pre>\n</li>\n<li>\n<p>Install <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a></p>\n<pre>$ curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py <span class=\"p\">|</span> python\n</pre>\n</li>\n<li>\n<p>Install dependencies</p>\n<pre>$ poetry install\n</pre>\n</li>\n<li>\n<p>Run the test suite</p>\n<pre>$ poetry run pytest\n</pre>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 6280400, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "c11418c13387d92db587e08ae5cbd2dd", "sha256": "bcfd73b1c3ca92ac213ca17dd3712341fce83927378ee000ed533de2056541a5"}, "downloads": -1, "filename": "graphene_subscriptions-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c11418c13387d92db587e08ae5cbd2dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7603, "upload_time": "2019-12-06T22:58:04", "upload_time_iso_8601": "2019-12-06T22:58:04.234901Z", "url": "https://files.pythonhosted.org/packages/dc/9c/76210a77af8dfa02be0c1efa09477a3dcef382cb8b642c8ecd5b15b7fb7f/graphene_subscriptions-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4df3cb72ee4ed444d068d2ed35cf360", "sha256": "4cf5b009c649cc1c04818571f971d8e4bafadcce8ec771eb46063ecf5184f0e8"}, "downloads": -1, "filename": "graphene_subscriptions-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c4df3cb72ee4ed444d068d2ed35cf360", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7783, "upload_time": "2019-12-06T22:58:06", "upload_time_iso_8601": "2019-12-06T22:58:06.473734Z", "url": "https://files.pythonhosted.org/packages/9e/cc/64289bd82f086d0fdcfeabd863e9a4d58f19f92cf32ba8b1dd27796c8e10/graphene_subscriptions-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d54b9153256e7e8322e75fb2b37335eb", "sha256": "61c91e145cbddd1234bba172a4dba867c1afbf2cdb867a4ca9d3c3866ea6889f"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d54b9153256e7e8322e75fb2b37335eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7847, "upload_time": "2019-12-07T02:36:14", "upload_time_iso_8601": "2019-12-07T02:36:14.187373Z", "url": "https://files.pythonhosted.org/packages/64/cc/1fa28eb51b2fe089211e06bae49fff40410272acac15bc9e589d8fd8760b/graphene_subscriptions-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9713811a4e54c64ea8664ad82f587065", "sha256": "42ce2c5f3b1915383b0d9b0cdc915eeeb72e3be7f444828b8c6017df7aa37701"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9713811a4e54c64ea8664ad82f587065", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8220, "upload_time": "2019-12-07T02:36:15", "upload_time_iso_8601": "2019-12-07T02:36:15.765231Z", "url": "https://files.pythonhosted.org/packages/ed/c2/0253d0bdca90ea0971709edd5bfdb40b9b8d5c06e02f17da166db93678a2/graphene_subscriptions-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "11917296a40fd15fac78de7889f55728", "sha256": "f66814cc0b539b967f5d3ab6b94cf0feab87c8bce6c99d3e0e68610c4a710ff5"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "11917296a40fd15fac78de7889f55728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7959, "upload_time": "2019-12-09T22:08:34", "upload_time_iso_8601": "2019-12-09T22:08:34.455684Z", "url": "https://files.pythonhosted.org/packages/d7/19/173957aff54067ffccd87920c3605534051c79c1097d81008034d87ae5a1/graphene_subscriptions-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e7349b79b17d1dd0a328ded2fc7383b", "sha256": "271dab860dab029b59948d2239bb5f3c8d9d8b9d89cfc262a84fae5dce2d04fe"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8e7349b79b17d1dd0a328ded2fc7383b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8373, "upload_time": "2019-12-09T22:08:36", "upload_time_iso_8601": "2019-12-09T22:08:36.011035Z", "url": "https://files.pythonhosted.org/packages/89/4d/c69092a6f70f65e6be1b269e04a30fd0eb3abc2d2ec6856ea72dd4132886/graphene_subscriptions-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ce2f03e431011755244b3dc7e83c5311", "sha256": "a2b8126faa464ed8598df65b1367f97ee2b7fc99f18db165c3cfe80b21be3603"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ce2f03e431011755244b3dc7e83c5311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7961, "upload_time": "2019-12-11T18:19:24", "upload_time_iso_8601": "2019-12-11T18:19:24.568932Z", "url": "https://files.pythonhosted.org/packages/18/ff/5839502e67bdfc8ebc3d3028d581fa12383085fcfac2ee8fbe4386f84772/graphene_subscriptions-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2c7e0a13f7a72de08938e38d1f3a2c2", "sha256": "12d51bf27c64060d491d0d8eb5dc2acbaf7cf2d51ce3b2a5adea1765cdd75293"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c2c7e0a13f7a72de08938e38d1f3a2c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8369, "upload_time": "2019-12-11T18:19:26", "upload_time_iso_8601": "2019-12-11T18:19:26.338731Z", "url": "https://files.pythonhosted.org/packages/a8/2d/6bf52367abb29f93b075b2050f3a8635d455544566c0bb51a7536b4be10d/graphene_subscriptions-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce2f03e431011755244b3dc7e83c5311", "sha256": "a2b8126faa464ed8598df65b1367f97ee2b7fc99f18db165c3cfe80b21be3603"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ce2f03e431011755244b3dc7e83c5311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7961, "upload_time": "2019-12-11T18:19:24", "upload_time_iso_8601": "2019-12-11T18:19:24.568932Z", "url": "https://files.pythonhosted.org/packages/18/ff/5839502e67bdfc8ebc3d3028d581fa12383085fcfac2ee8fbe4386f84772/graphene_subscriptions-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2c7e0a13f7a72de08938e38d1f3a2c2", "sha256": "12d51bf27c64060d491d0d8eb5dc2acbaf7cf2d51ce3b2a5adea1765cdd75293"}, "downloads": -1, "filename": "graphene_subscriptions-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c2c7e0a13f7a72de08938e38d1f3a2c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8369, "upload_time": "2019-12-11T18:19:26", "upload_time_iso_8601": "2019-12-11T18:19:26.338731Z", "url": "https://files.pythonhosted.org/packages/a8/2d/6bf52367abb29f93b075b2050f3a8635d455544566c0bb51a7536b4be10d/graphene_subscriptions-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:41 2020"}