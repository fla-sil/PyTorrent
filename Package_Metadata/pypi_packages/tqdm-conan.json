{"info": {"author": "tqdm developers", "author_email": "python.tqdm@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Environment :: Other Environment", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications", "Framework :: IPython", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Other Audience", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: BSD :: FreeBSD", "Operating System :: POSIX :: Linux", "Operating System :: POSIX :: SunOS/Solaris", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation", "Programming Language :: Python :: Implementation :: IronPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Desktop Environment", "Topic :: Education :: Testing", "Topic :: Office/Business", "Topic :: Other/Nonlisted Topic", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: User Interfaces", "Topic :: System :: Logging", "Topic :: System :: Monitoring", "Topic :: System :: Shells", "Topic :: Terminals", "Topic :: Utilities"], "description": "|Logo|\n\ntqdm\n====\n\n|PyPI-Status| |PyPI-Versions| |Conda-Forge-Status|\n\n|Build-Status| |Coverage-Status| |Branch-Coverage-Status| |Codacy-Grade|\n\n|DOI-URI| |LICENCE| |OpenHub-Status|\n\n\n``tqdm`` means \"progress\" in Arabic (taqadum, \u062a\u0642\u062f\u0651\u0645)\nand is an abbreviation for \"I love you so much\" in Spanish (te quiero demasiado).\n\nInstantly make your loops show a smart progress meter - just wrap any\niterable with ``tqdm(iterable)``, and you're done!\n\n.. code:: python\n\n    from tqdm import tqdm\n    for i in tqdm(range(10000)):\n        ...\n\n``76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 | 7568/10000 [00:33<00:10, 229.00it/s]``\n\n``trange(N)`` can be also used as a convenient shortcut for\n``tqdm(xrange(N))``.\n\n|Screenshot|\n    REPL: `ptpython <https://github.com/jonathanslenders/ptpython>`__\n\nIt can also be executed as a module with pipes:\n\n.. code:: sh\n\n    $ seq 9999999 | tqdm --unit_scale | wc -l\n    10.0Mit [00:02, 3.58Mit/s]\n    9999999\n    $ 7z a -bd -r backup.7z docs/ | grep Compressing | \\\n        tqdm --total $(find docs/ -type f | wc -l) --unit files >> backup.log\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37<00:00, 82.29files/s]\n\nOverhead is low -- about 60ns per iteration (80ns with ``tqdm_gui``), and is\nunit tested against performance regression.\nBy comparison, the well-established\n`ProgressBar <https://github.com/niltonvolpato/python-progressbar>`__ has\nan 800ns/iter overhead.\n\nIn addition to its low overhead, ``tqdm`` uses smart algorithms to predict\nthe remaining time and to skip unnecessary iteration displays, which allows\nfor a negligible overhead in most cases.\n\n``tqdm`` works on any platform\n(Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS),\nin any console or in a GUI, and is also friendly with IPython/Jupyter notebooks.\n\n``tqdm`` does not require any dependencies (not even ``curses``!), just\nPython and an environment supporting ``carriage return \\r`` and\n``line feed \\n`` control characters.\n\n------------------------------------------\n\n.. contents:: Table of contents\n   :backlinks: top\n   :local:\n\n\nInstallation\n------------\n\nLatest PyPI stable release\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|PyPI-Status|\n\n.. code:: sh\n\n    pip install tqdm\n\nLatest development release on GitHub\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|GitHub-Status| |GitHub-Stars| |GitHub-Commits| |GitHub-Forks|\n\nPull and install in the current directory:\n\n.. code:: sh\n\n    pip install -e git+https://github.com/tqdm/tqdm.git@master#egg=tqdm\n\nLatest Conda release\n~~~~~~~~~~~~~~~~~~~~\n\n|Conda-Forge-Status|\n\n.. code:: sh\n\n    conda install -c conda-forge tqdm\n\n\nChangelog\n---------\n\nThe list of all changes is available either on GitHub's Releases:\n|GitHub-Status|, on the\n`wiki <https://github.com/tqdm/tqdm/wiki/Releases>`__ or on crawlers such as\n`allmychanges.com <https://allmychanges.com/p/python/tqdm/>`_.\n\n\nUsage\n-----\n\n``tqdm`` is very versatile and can be used in a number of ways.\nThe three main ones are given below.\n\nIterable-based\n~~~~~~~~~~~~~~\n\nWrap ``tqdm()`` around any iterable:\n\n.. code:: python\n\n    text = \"\"\n    for char in tqdm([\"a\", \"b\", \"c\", \"d\"]):\n        text = text + char\n\n``trange(i)`` is a special optimised instance of ``tqdm(range(i))``:\n\n.. code:: python\n\n    for i in trange(100):\n        pass\n\nInstantiation outside of the loop allows for manual control over ``tqdm()``:\n\n.. code:: python\n\n    pbar = tqdm([\"a\", \"b\", \"c\", \"d\"])\n    for char in pbar:\n        pbar.set_description(\"Processing %s\" % char)\n\nManual\n~~~~~~\n\nManual control on ``tqdm()`` updates by using a ``with`` statement:\n\n.. code:: python\n\n    with tqdm(total=100) as pbar:\n        for i in range(10):\n            pbar.update(10)\n\nIf the optional variable ``total`` (or an iterable with ``len()``) is\nprovided, predictive stats are displayed.\n\n``with`` is also optional (you can just assign ``tqdm()`` to a variable,\nbut in this case don't forget to ``del`` or ``close()`` at the end:\n\n.. code:: python\n\n    pbar = tqdm(total=100)\n    for i in range(10):\n        pbar.update(10)\n    pbar.close()\n\nModule\n~~~~~~\n\nPerhaps the most wonderful use of ``tqdm`` is in a script or on the command\nline. Simply inserting ``tqdm`` (or ``python -m tqdm``) between pipes will pass\nthrough all ``stdin`` to ``stdout`` while printing progress to ``stderr``.\n\nThe example below demonstrated counting the number of lines in all Python files\nin the current directory, with timing information included.\n\n.. code:: sh\n\n    $ time find . -name '*.py' -exec cat \\{} \\; | wc -l\n    857365\n\n    real    0m3.458s\n    user    0m0.274s\n    sys     0m3.325s\n\n    $ time find . -name '*.py' -exec cat \\{} \\; | tqdm | wc -l\n    857366it [00:03, 246471.31it/s]\n    857365\n\n    real    0m3.585s\n    user    0m0.862s\n    sys     0m3.358s\n\nNote that the usual arguments for ``tqdm`` can also be specified.\n\n.. code:: sh\n\n    $ find . -name '*.py' -exec cat \\{} \\; |\n        tqdm --unit loc --unit_scale --total 857366 >> /dev/null\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 857K/857K [00:04<00:00, 246Kloc/s]\n\nBacking up a large directory?\n\n.. code:: sh\n\n    $ 7z a -bd -r backup.7z docs/ | grep Compressing |\n        tqdm --total $(find docs/ -type f | wc -l) --unit files >> backup.log\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37<00:00, 82.29files/s]\n\n\nFAQ and Known Issues\n--------------------\n\n|GitHub-Issues|\n\nThe most common issues relate to excessive output on multiple lines, instead\nof a neat one-line progress bar.\n\n- Consoles in general: require support for carriage return (``CR``, ``\\r``).\n- Nested progress bars:\n    * Consoles in general: require support for moving cursors up to the\n      previous line. For example,\n      `IDLE <https://github.com/tqdm/tqdm/issues/191#issuecomment-230168030>`__,\n      `ConEmu <https://github.com/tqdm/tqdm/issues/254>`__ and\n      `PyCharm <https://github.com/tqdm/tqdm/issues/203>`__ (also\n      `here <https://github.com/tqdm/tqdm/issues/208>`__,\n      `here <https://github.com/tqdm/tqdm/issues/307>`__, and\n      `here <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__)\n      lack full support.\n    * Windows: additionally may require the Python module ``colorama``\n      to ensure nested bars stay within their respective lines.\n- Unicode:\n    * Environments which report that they support unicode will have solid smooth\n      progressbars. The fallback is an `ascii`-only bar.\n    * Windows consoles often only partially support unicode and thus\n      `often require explicit ascii=True <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__\n      (also `here <https://github.com/tqdm/tqdm/issues/499>`__). This is due to\n      either normal-width unicode characters being incorrectly displayed as\n      \"wide\", or some unicode characters not rendering.\n- Wrapping enumerated iterables: use ``enumerate(tqdm(...))`` instead of\n  ``tqdm(enumerate(...))``. The same applies to ``numpy.ndenumerate``.\n  This is because enumerate functions tend to hide the length of iterables.\n  ``tqdm`` does not.\n- Wrapping zipped iterables has similar issues due to internal optimisations.\n  ``tqdm(zip(a, b))`` should be replaced with ``zip(tqdm(a), b)`` or even\n  ``zip(tqdm(a), tqdm(b))``.\n\nIf you come across any other difficulties, browse and file |GitHub-Issues|.\n\nDocumentation\n-------------\n\n|PyPI-Versions| |README-Hits| (Since 19 May 2016)\n\n.. code:: python\n\n    class tqdm(object):\n      \"\"\"\n      Decorate an iterable object, returning an iterator which acts exactly\n      like the original iterable, but prints a dynamically updating\n      progressbar every time a value is requested.\n      \"\"\"\n\n      def __init__(self, iterable=None, desc=None, total=None, leave=True,\n                   file=None, ncols=None, mininterval=0.1,\n                   maxinterval=10.0, miniters=None, ascii=None, disable=False,\n                   unit='it', unit_scale=False, dynamic_ncols=False,\n                   smoothing=0.3, bar_format=None, initial=0, position=None,\n                   postfix=None, unit_divisor=1000):\n\nParameters\n~~~~~~~~~~\n\n* iterable  : iterable, optional  \n    Iterable to decorate with a progressbar.\n    Leave blank to manually manage the updates.\n* desc  : str, optional  \n    Prefix for the progressbar.\n* total  : int, optional  \n    The number of expected iterations. If unspecified,\n    len(iterable) is used if possible. As a last resort, only basic\n    progress statistics are displayed (no ETA, no progressbar).\n    If ``gui`` is True and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive integer,\n    e.g. int(9e9).\n* leave  : bool, optional  \n    If [default: True], keeps all traces of the progressbar\n    upon termination of iteration.\n* file  : ``io.TextIOWrapper`` or ``io.StringIO``, optional  \n    Specifies where to output the progress messages\n    (default: sys.stderr). Uses ``file.write(str)`` and ``file.flush()``\n    methods.\n* ncols  : int, optional  \n    The width of the entire output message. If specified,\n    dynamically resizes the progressbar to stay within this bound.\n    If unspecified, attempts to use environment width. The\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. If 0, will not print any meter (only stats).\n* mininterval  : float, optional  \n    Minimum progress display update interval [default: 0.1] seconds.\n* maxinterval  : float, optional  \n    Maximum progress display update interval [default: 10] seconds.\n    Automatically adjusts ``miniters`` to correspond to ``mininterval``\n    after long display update lag. Only works if ``dynamic_miniters``\n    or monitor thread is enabled.\n* miniters  : int, optional  \n    Minimum progress display update interval, in iterations.\n    If 0 and ``dynamic_miniters``, will automatically adjust to equal\n    ``mininterval`` (more CPU efficient, good for tight loops).\n    If > 0, will skip display of specified number of iterations.\n    Tweak this and ``mininterval`` to get very efficient loops.\n    If your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\n* ascii  : bool, optional  \n    If unspecified or False, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters ``1-9 #``.\n* disable  : bool, optional  \n    Whether to disable the entire progressbar wrapper\n    [default: False]. If set to None, disable on non-TTY.\n* unit  : str, optional  \n    String that will be used to define the unit of each iteration\n    [default: it].\n* unit_scale  : bool or int or float, optional  \n    If 1 or True, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False]. If any other non-zero\n    number, will scale `total` and `n`.\n* dynamic_ncols  : bool, optional  \n    If set, constantly alters ``ncols`` to the environment (allowing\n    for window resizes) [default: False].\n* smoothing  : float, optional  \n    Exponential moving average smoothing factor for speed estimates\n    (ignored in GUI mode). Ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\n* bar_format  : str, optional  \n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n      '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n      percentage, rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n      rate_inv, rate_inv_fmt, elapsed, remaining, desc, postfix.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\n* initial  : int, optional  \n    The initial counter value. Useful when restarting a progress\n    bar [default: 0].\n* position  : int, optional  \n    Specify the line offset to print this bar (starting from 0)\n    Automatic if unspecified.\n    Useful to manage multiple bars at once (eg, from threads).\n* postfix  : dict or ``*``, optional  \n    Specify additional stats to display at the end of the bar.\n    Calls ``set_postfix(**postfix)`` if possible (dict).\n* unit_divisor  : float, optional  \n    [default: 1000], ignored unless `unit_scale` is True.\n\nExtra CLI Options\n~~~~~~~~~~~~~~~~~\n\n* delim  : chr, optional  \n    Delimiting character [default: '\\n']. Use '\\0' for null.\n    N.B.: on Windows systems, Python converts '\\n' to '\\r\\n'.\n* buf_size  : int, optional  \n    String buffer size in bytes [default: 256]\n    used when ``delim`` is specified.\n* bytes  : bool, optional  \n    If true, will count bytes and ignore ``delim``.\n\nReturns\n~~~~~~~\n\n* out  : decorated iterator.\n\n.. code:: python\n\n      def update(self, n=1):\n          \"\"\"\n          Manually update the progress bar, useful for streams\n          such as reading files.\n          E.g.:\n          >>> t = tqdm(total=filesize) # Initialise\n          >>> for current_buffer in stream:\n          ...    ...\n          ...    t.update(len(current_buffer))\n          >>> t.close()\n          The last line is highly recommended, but possibly not necessary if\n          ``t.update()`` will be called in such a way that ``filesize`` will be\n          exactly reached and printed.\n\n          Parameters\n          ----------\n          n  : int, optional\n              Increment to add to the internal counter of iterations\n              [default: 1].\n          \"\"\"\n\n      def close(self):\n          \"\"\"\n          Cleanup and (if leave=False) close the progressbar.\n          \"\"\"\n\n      def unpause(self):\n          \"\"\"\n          Restart tqdm timer from last print time.\n          \"\"\"\n\n      def clear(self, nomove=False):\n          \"\"\"\n          Clear current bar display\n          \"\"\"\n\n      def refresh(self):\n          \"\"\"\n          Force refresh the display of this bar\n          \"\"\"\n\n      def write(cls, s, file=sys.stdout, end=\"\\n\"):\n          \"\"\"\n          Print a message via tqdm (without overlap with bars)\n          \"\"\"\n\n      def set_description(self, desc=None, refresh=True):\n          \"\"\"\n          Set/modify description of the progress bar.\n\n          Parameters\n          ----------\n          desc  : str, optional\n          refresh  : bool, optional\n              Forces refresh [default: True].\n          \"\"\"\n\n      def set_postfix(self, ordered_dict=None, refresh=True, **kwargs):\n          \"\"\"\n          Set/modify postfix (additional stats)\n          with automatic formatting based on datatype.\n\n          Parameters\n          ----------\n          refresh  : bool, optional\n              Forces refresh [default: True].\n          \"\"\"\n\n    def trange(*args, **kwargs):\n        \"\"\"\n        A shortcut for tqdm(xrange(*args), **kwargs).\n        On Python3+ range is used instead of xrange.\n        \"\"\"\n\n    class tqdm_gui(tqdm):\n        \"\"\"\n        Experimental GUI version of tqdm!\n        \"\"\"\n\n    def tgrange(*args, **kwargs):\n        \"\"\"\n        Experimental GUI version of trange!\n        \"\"\"\n\n    class tqdm_notebook(tqdm):\n        \"\"\"\n        Experimental IPython/Jupyter Notebook widget using tqdm!\n        \"\"\"\n\n    def tnrange(*args, **kwargs):\n        \"\"\"\n        Experimental IPython/Jupyter Notebook widget using tqdm!\n        \"\"\"\n\n\nExamples and Advanced Usage\n---------------------------\n\n- See the `examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\n  folder;\n- import the module and run ``help()``, or\n- consult the `wiki <https://github.com/tqdm/tqdm/wiki>`__.\n    - this has an\n      `excellent article <https://github.com/tqdm/tqdm/wiki/How-to-make-a-great-Progress-Bar>`__\n      on how to make a **great** progressbar.\n\nDescription and additional stats\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCustom information can be displayed and updated dynamically on ``tqdm`` bars\nwith the ``desc`` and ``postfix`` arguments:\n\n.. code:: python\n\n    from tqdm import trange\n    from random import random, randint\n    from time import sleep\n\n    with trange(100) as t:\n        for i in t:\n            # Description will be displayed on the left\n            t.set_description('GEN %i' % i)\n            # Postfix will be displayed on the right,\n            # formatted automatically based on argument's datatype\n            t.set_postfix(loss=random(), gen=randint(1,999), str='h',\n                          lst=[1, 2])\n            sleep(0.1)\n\n    with tqdm(total=10, bar_format=\"{postfix[0]} {postfix[1][value]:>8.2g}\",\n              postfix=[\"Batch\", dict(value=0)]) as t:\n        for i in range(10):\n            sleep(0.1)\n            t.postfix[1][\"value\"] = i / 2\n            t.update()\n\nPoints to remember when using ``{postfix[...]}`` in the ``bar_format`` string:\n\n- ``postfix`` also needs to be passed as an initial argument in a compatible\n  format, and\n- ``postfix`` will be auto-converted to a string if it is a ``dict``-like\n  object. To prevent this behaviour, insert an extra item into the dictionary\n  where the key is not a string.\n\nNested progress bars\n~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` supports nested progress bars. Here's an example:\n\n.. code:: python\n\n    from tqdm import trange\n    from time import sleep\n\n    for i in trange(10, desc='1st loop'):\n        for j in trange(5, desc='2nd loop', leave=False):\n            for k in trange(100, desc='3nd loop'):\n                sleep(0.01)\n\nOn Windows `colorama <https://github.com/tartley/colorama>`__ will be used if\navailable to keep nested bars on their respective lines.\n\nFor manual control over positioning (e.g. for multi-threaded use),\nyou may specify ``position=n`` where ``n=0`` for the outermost bar,\n``n=1`` for the next, and so on:\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import trange, tqdm\n    from multiprocessing import Pool, freeze_support, RLock\n\n    L = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for i in trange(total, desc=text, position=n):\n            sleep(interval)\n\n    if __name__ == '__main__':\n        freeze_support()  # for Windows support\n        p = Pool(len(L),\n                 # again, for Windows support\n                 initializer=tqdm.set_lock, initargs=(RLock(),))\n        p.map(progresser, L)\n        print(\"\\n\" * (len(L) - 2))\n\nHooks and callbacks\n~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` can easily support callbacks/hooks and manual updates.\nHere's an example with ``urllib``:\n\n**urllib.urlretrieve documentation**\n\n    | [...]\n    | If present, the hook function will be called once\n    | on establishment of the network connection and once after each block read\n    | thereafter. The hook will be passed three arguments; a count of blocks\n    | transferred so far, a block size in bytes, and the total size of the file.\n    | [...]\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n\n    class TqdmUpTo(tqdm):\n        \"\"\"Provides `update_to(n)` which uses `tqdm.update(delta_n)`.\"\"\"\n        def update_to(self, b=1, bsize=1, tsize=None):\n            \"\"\"\n            b  : int, optional\n                Number of blocks transferred so far [default: 1].\n            bsize  : int, optional\n                Size of each block (in tqdm units) [default: 1].\n            tsize  : int, optional\n                Total size (in tqdm units). If [default: None] remains unchanged.\n            \"\"\"\n            if tsize is not None:\n                self.total = tsize\n            self.update(b * bsize - self.n)  # will also set self.n = b * bsize\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    with TqdmUpTo(unit='B', unit_scale=True, miniters=1,\n                  desc=eg_link.split('/')[-1]) as t:  # all optional kwargs\n        urllib.urlretrieve(eg_link, filename=os.devnull,\n                           reporthook=t.update_to, data=None)\n\nInspired by `twine#242 <https://github.com/pypa/twine/pull/242>`__.\nFunctional alternative in\n`examples/tqdm_wget.py <https://github.com/tqdm/tqdm/blob/master/examples/tqdm_wget.py>`__.\n\nIt is recommend to use ``miniters=1`` whenever there is potentially\nlarge differences in iteration speed (e.g. downloading a file over\na patchy connection).\n\nPandas Integration\n~~~~~~~~~~~~~~~~~~\n\nDue to popular demand we've added support for ``pandas`` -- here's an example\nfor ``DataFrame.progress_apply`` and ``DataFrameGroupBy.progress_apply``:\n\n.. code:: python\n\n    import pandas as pd\n    import numpy as np\n    from tqdm import tqdm\n\n    df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))\n\n    # Register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`\n    # (can use `tqdm_gui`, `tqdm_notebook`, optional kwargs, etc.)\n    tqdm.pandas(desc=\"my bar!\")\n\n    # Now you can use `progress_apply` instead of `apply`\n    # and `progress_map` instead of `map`\n    df.progress_apply(lambda x: x**2)\n    # can also groupby:\n    # df.groupby(0).progress_apply(lambda x: x**2)\n\nIn case you're interested in how this works (and how to modify it for your\nown callbacks), see the\n`examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\nfolder or import the module and run ``help()``.\n\nIPython/Jupyter Integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIPython/Jupyter is supported via the ``tqdm_notebook`` submodule:\n\n.. code:: python\n\n    from tqdm import tnrange, tqdm_notebook\n    from time import sleep\n\n    for i in tnrange(10, desc='1st loop'):\n        for j in tqdm_notebook(xrange(100), desc='2nd loop'):\n            sleep(0.01)\n\nIn addition to ``tqdm`` features, the submodule provides a native Jupyter\nwidget (compatible with IPython v1-v4 and Jupyter), fully working nested bars\nand color hints (blue: normal, green: completed, red: error/interrupt,\nlight blue: no ETA); as demonstrated below.\n\n|Screenshot-Jupyter1|\n|Screenshot-Jupyter2|\n|Screenshot-Jupyter3|\n\nIt is also possible to let ``tqdm`` automatically choose between\nconsole or notebook versions by using the ``autonotebook`` submodule:\n\n.. code:: python\n\n    from tqdm.autonotebook import tqdm\n    tqdm.pandas()\n\nNote that this will issue a ``TqdmExperimentalWarning`` if run in a notebook\nsince it is not meant to be possible to distinguish between ``jupyter notebook``\nand ``jupyter console``. Use ``auto`` instead of ``autonotebook`` to suppress\nthis warning.\n\nWriting messages\n~~~~~~~~~~~~~~~~\n\nSince ``tqdm`` uses a simple printing mechanism to display progress bars,\nyou should not write any message in the terminal using ``print()`` while\na progressbar is open.\n\nTo write messages in the terminal without any collision with ``tqdm`` bar\ndisplay, a ``.write()`` method is provided:\n\n.. code:: python\n\n    from tqdm import tqdm, trange\n    from time import sleep\n\n    bar = trange(10)\n    for i in bar:\n        # Print using tqdm class method .write()\n        sleep(0.1)\n        if not (i % 3):\n            tqdm.write(\"Done task %i\" % i)\n        # Can also use bar.write()\n\nBy default, this will print to standard output ``sys.stdout``. but you can\nspecify any file-like object using the ``file`` argument. For example, this\ncan be used to redirect the messages writing to a log file or class.\n\nRedirecting writing\n~~~~~~~~~~~~~~~~~~~\n\nIf using a library that can print messages to the console, editing the library\nby  replacing ``print()`` with ``tqdm.write()`` may not be desirable.\nIn that case, redirecting ``sys.stdout`` to ``tqdm.write()`` is an option.\n\nTo redirect ``sys.stdout``, create a file-like class that will write\nany input string to ``tqdm.write()``, and supply the arguments\n``file=sys.stdout, dynamic_ncols=True``.\n\nA reusable canonical example is given below:\n\n.. code:: python\n\n    from time import sleep\n    import contextlib\n    import sys\n    from tqdm import tqdm\n\n    class DummyTqdmFile(object):\n        \"\"\"Dummy file-like that will write to tqdm\"\"\"\n        file = None\n        def __init__(self, file):\n            self.file = file\n\n        def write(self, x):\n            # Avoid print() second call (useless \\n)\n            if len(x.rstrip()) > 0:\n                tqdm.write(x, file=self.file)\n\n        def flush(self):\n            return getattr(self.file, \"flush\", lambda: None)()\n\n    @contextlib.contextmanager\n    def std_out_err_redirect_tqdm():\n        orig_out_err = sys.stdout, sys.stderr\n        try:\n            sys.stdout, sys.stderr = map(DummyTqdmFile, orig_out_err)\n            yield orig_out_err[0]\n        # Relay exceptions\n        except Exception as exc:\n            raise exc\n        # Always restore sys.stdout/err if necessary\n        finally:\n            sys.stdout, sys.stderr = orig_out_err\n\n    def some_fun(i):\n        print(\"Fee, fi, fo,\".split()[i])\n\n    # Redirect stdout to tqdm.write() (don't forget the `as save_stdout`)\n    with std_out_err_redirect_tqdm() as orig_stdout:\n        # tqdm needs the original stdout\n        # and dynamic_ncols=True to autodetect console width\n        for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=True):\n            sleep(.5)\n            some_fun(i)\n\n    # After the `with`, printing is restored\n    print(\"Done!\")\n\nMonitoring thread, intervals and miniters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` implements a few tricks to to increase efficiency and reduce overhead.\n\n- Avoid unnecessary frequent bar refreshing: ``mininterval`` defines how long\n  to wait between each refresh. ``tqdm`` always gets updated in the background,\n  but it will diplay only every ``mininterval``.\n- Reduce number of calls to check system clock/time.\n- ``mininterval`` is more intuitive to configure than ``miniters``.\n  A clever adjustment system ``dynamic_miniters`` will automatically adjust\n  ``miniters`` to the amount of iterations that fit into time ``mininterval``.\n  Essentially, ``tqdm`` will check if it's time to print without actually\n  checking time. This behaviour can be still be bypassed by manually setting\n  ``miniters``.\n\nHowever, consider a case with a combination of fast and slow iterations.\nAfter a few fast iterations, ``dynamic_miniters`` will set ``miniters`` to a\nlarge number. When iteration rate subsequently slows, ``miniters`` will\nremain large and thus reduce display update frequency. To address this:\n\n- ``maxinterval`` defines the maximum time between display refreshes.\n  A concurrent monitoring thread checks for overdue updates and forces one\n  where necessary.\n\nThe monitoring thread should not have a noticeable overhead, and guarantees\nupdates at least every 10 seconds by default.\nThis value can be directly changed by setting the ``monitor_interval`` of\nany ``tqdm`` instance (i.e. ``t = tqdm.tqdm(...); t.monitor_interval = 2``).\nThe monitor thread may be disabled application-wide by setting\n``tqdm.tqdm.monitor_interval = 0`` before instantiatiation of any ``tqdm`` bar.\n\n\nContributions\n-------------\n\n|GitHub-Commits| |GitHub-Issues| |GitHub-PRs| |OpenHub-Status|\n\nAll source code is hosted on `GitHub <https://github.com/tqdm/tqdm>`__.\nContributions are welcome.\n\nSee the\n`CONTRIBUTING <https://raw.githubusercontent.com/tqdm/tqdm/master/CONTRIBUTING.md>`__\nfile for more information.\n\nPorts to Other Languages\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list is available on\n`this wiki page <https://github.com/tqdm/tqdm/wiki/tqdm-ports>`__.\n\n\nLICENCE\n-------\n\nOpen Source (OSI approved): |LICENCE|\n\nCitation information: |DOI-URI|\n\n\nAuthors\n-------\n\nThe main developers, ranked by surviving lines of code\n(`git fame -wMC <https://github.com/casperdcl/git-fame>`__), are:\n\n- Casper da Costa-Luis (`casperdcl <https://github.com/casperdcl>`__, ~2/3, |Gift-Casper|)\n- Stephen Larroque (`lrq3000 <https://github.com/lrq3000>`__, ~1/5)\n- Hadrien Mary (`hadim <https://github.com/hadim>`__, ~2%)\n- Guangshuo Chen (`chengs <https://github.com/chengs>`__, ~1%)\n- Noam Yorav-Raphael (`noamraph <https://github.com/noamraph>`__, ~1%, original author)\n- Mikhail Korobov (`kmike <https://github.com/kmike>`__, ~1%)\n\nThere are also many |GitHub-Contributions| which we are grateful for.\n\n|README-Hits| (Since 19 May 2016)\n\n.. |Logo| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/logo.gif\n.. |Screenshot| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm.gif\n.. |Build-Status| image:: https://travis-ci.org/tqdm/tqdm.svg?branch=master\n   :target: https://travis-ci.org/tqdm/tqdm\n.. |Coverage-Status| image:: https://coveralls.io/repos/tqdm/tqdm/badge.svg?branch=master\n   :target: https://coveralls.io/github/tqdm/tqdm\n.. |Branch-Coverage-Status| image:: https://codecov.io/gh/tqdm/tqdm/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tqdm/tqdm\n.. |Codacy-Grade| image:: https://api.codacy.com/project/badge/Grade/3f965571598f44549c7818f29cdcf177\n   :target: https://www.codacy.com/app/tqdm/tqdm?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=tqdm/tqdm&amp;utm_campaign=Badge_Grade\n.. |GitHub-Status| image:: https://img.shields.io/github/tag/tqdm/tqdm.svg?maxAge=86400\n   :target: https://github.com/tqdm/tqdm/releases\n.. |GitHub-Forks| image:: https://img.shields.io/github/forks/tqdm/tqdm.svg\n   :target: https://github.com/tqdm/tqdm/network\n.. |GitHub-Stars| image:: https://img.shields.io/github/stars/tqdm/tqdm.svg\n   :target: https://github.com/tqdm/tqdm/stargazers\n.. |GitHub-Commits| image:: https://img.shields.io/github/commit-activity/y/tqdm/tqdm.svg\n   :target: https://github.com/tqdm/tqdm/graphs/commit-activity\n.. |GitHub-Issues| image:: https://img.shields.io/github/issues-closed/tqdm/tqdm.svg\n   :target: https://github.com/tqdm/tqdm/issues\n.. |GitHub-PRs| image:: https://img.shields.io/github/issues-pr-closed/tqdm/tqdm.svg\n   :target: https://github.com/tqdm/tqdm/pulls\n.. |GitHub-Contributions| image:: https://img.shields.io/github/contributors/tqdm/tqdm.svg\n   :target: https://github.com/tqdm/tqdm/graphs/contributors\n.. |Gift-Casper| image:: https://img.shields.io/badge/gift-donate-ff69b4.svg\n   :target: https://caspersci.uk.to/donate.html\n.. |PyPI-Status| image:: https://img.shields.io/pypi/v/tqdm.svg\n   :target: https://pypi.org/project/tqdm\n.. |PyPI-Downloads| image:: https://img.shields.io/pypi/dm/tqdm.svg\n   :target: https://pypi.org/project/tqdm\n.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/tqdm.svg\n   :target: https://pypi.org/project/tqdm\n.. |Conda-Forge-Status| image:: https://anaconda.org/conda-forge/tqdm/badges/version.svg\n   :target: https://anaconda.org/conda-forge/tqdm\n.. |OpenHub-Status| image:: https://www.openhub.net/p/tqdm/widgets/project_thin_badge?format=gif\n   :target: https://www.openhub.net/p/tqdm?ref=Thin+badge\n.. |LICENCE| image:: https://img.shields.io/pypi/l/tqdm.svg\n   :target: https://raw.githubusercontent.com/tqdm/tqdm/master/LICENCE\n.. |DOI-URI| image:: https://zenodo.org/badge/21637/tqdm/tqdm.svg\n   :target: https://zenodo.org/badge/latestdoi/21637/tqdm/tqdm\n.. |Screenshot-Jupyter1| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm-jupyter-1.gif\n.. |Screenshot-Jupyter2| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm-jupyter-2.gif\n.. |Screenshot-Jupyter3| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm-jupyter-3.gif\n.. |README-Hits| image:: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&style=social&r=https://github.com/tqdm/tqdm&l=https://caspersci.uk.to/images/tqdm.png&f=https://raw.githubusercontent.com/tqdm/tqdm/master/images/logo.gif\n   :target: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&a=plot&r=https://github.com/tqdm/tqdm&l=https://caspersci.uk.to/images/tqdm.png&f=https://raw.githubusercontent.com/tqdm/tqdm/master/images/logo.gif&style=social", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tqdm/tqdm", "keywords": "progressbar progressmeter progress bar meter rate eta console terminal time", "license": "MPLv2.0, MIT Licences", "maintainer": "", "maintainer_email": "", "name": "tqdm-conan", "package_url": "https://pypi.org/project/tqdm-conan/", "platform": "any", "project_url": "https://pypi.org/project/tqdm-conan/", "project_urls": {"Homepage": "https://github.com/tqdm/tqdm"}, "release_url": "https://pypi.org/project/tqdm-conan/4.27.0/", "requires_dist": null, "requires_python": ">=2.6, !=3.0.*, !=3.1.*", "summary": "Temporary fork of tqdmFast, Extensible Progress Meter", "version": "4.27.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            |Logo|<br><br>tqdm<br>====<br><br>|PyPI-Status| |PyPI-Versions| |Conda-Forge-Status|<br><br>|Build-Status| |Coverage-Status| |Branch-Coverage-Status| |Codacy-Grade|<br><br>|DOI-URI| |LICENCE| |OpenHub-Status|<br><br><br>``tqdm`` means \"progress\" in Arabic (taqadum, \u062a\u0642\u062f\u0651\u0645)<br>and is an abbreviation for \"I love you so much\" in Spanish (te quiero demasiado).<br><br>Instantly make your loops show a smart progress meter - just wrap any<br>iterable with ``tqdm(iterable)``, and you're done!<br><br>.. code:: python<br><br>    from tqdm import tqdm<br>    for i in tqdm(range(10000)):<br>        ...<br><br>``76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 | 7568/10000 [00:33&lt;00:10, 229.00it/s]``<br><br>``trange(N)`` can be also used as a convenient shortcut for<br>``tqdm(xrange(N))``.<br><br>|Screenshot|<br>    REPL: `ptpython &lt;https://github.com/jonathanslenders/ptpython&gt;`__<br><br>It can also be executed as a module with pipes:<br><br>.. code:: sh<br><br>    $ seq 9999999 | tqdm --unit_scale | wc -l<br>    10.0Mit [00:02, 3.58Mit/s]<br>    9999999<br>    $ 7z a -bd -r backup.7z docs/ | grep Compressing | \\<br>        tqdm --total $(find docs/ -type f | wc -l) --unit files &gt;&gt; backup.log<br>    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37&lt;00:00, 82.29files/s]<br><br>Overhead is low -- about 60ns per iteration (80ns with ``tqdm_gui``), and is<br>unit tested against performance regression.<br>By comparison, the well-established<br>`ProgressBar &lt;https://github.com/niltonvolpato/python-progressbar&gt;`__ has<br>an 800ns/iter overhead.<br><br>In addition to its low overhead, ``tqdm`` uses smart algorithms to predict<br>the remaining time and to skip unnecessary iteration displays, which allows<br>for a negligible overhead in most cases.<br><br>``tqdm`` works on any platform<br>(Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS),<br>in any console or in a GUI, and is also friendly with IPython/Jupyter notebooks.<br><br>``tqdm`` does not require any dependencies (not even ``curses``!), just<br>Python and an environment supporting ``carriage return \\r`` and<br>``line feed \\n`` control characters.<br><br>------------------------------------------<br><br>.. contents:: Table of contents<br>   :backlinks: top<br>   :local:<br><br><br>Installation<br>------------<br><br>Latest PyPI stable release<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>|PyPI-Status|<br><br>.. code:: sh<br><br>    pip install tqdm<br><br>Latest development release on GitHub<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>|GitHub-Status| |GitHub-Stars| |GitHub-Commits| |GitHub-Forks|<br><br>Pull and install in the current directory:<br><br>.. code:: sh<br><br>    pip install -e git+https://github.com/tqdm/tqdm.git@master#egg=tqdm<br><br>Latest Conda release<br>~~~~~~~~~~~~~~~~~~~~<br><br>|Conda-Forge-Status|<br><br>.. code:: sh<br><br>    conda install -c conda-forge tqdm<br><br><br>Changelog<br>---------<br><br>The list of all changes is available either on GitHub's Releases:<br>|GitHub-Status|, on the<br>`wiki &lt;https://github.com/tqdm/tqdm/wiki/Releases&gt;`__ or on crawlers such as<br>`allmychanges.com &lt;https://allmychanges.com/p/python/tqdm/&gt;`_.<br><br><br>Usage<br>-----<br><br>``tqdm`` is very versatile and can be used in a number of ways.<br>The three main ones are given below.<br><br>Iterable-based<br>~~~~~~~~~~~~~~<br><br>Wrap ``tqdm()`` around any iterable:<br><br>.. code:: python<br><br>    text = \"\"<br>    for char in tqdm([\"a\", \"b\", \"c\", \"d\"]):<br>        text = text + char<br><br>``trange(i)`` is a special optimised instance of ``tqdm(range(i))``:<br><br>.. code:: python<br><br>    for i in trange(100):<br>        pass<br><br>Instantiation outside of the loop allows for manual control over ``tqdm()``:<br><br>.. code:: python<br><br>    pbar = tqdm([\"a\", \"b\", \"c\", \"d\"])<br>    for char in pbar:<br>        pbar.set_description(\"Processing %s\" % char)<br><br>Manual<br>~~~~~~<br><br>Manual control on ``tqdm()`` updates by using a ``with`` statement:<br><br>.. code:: python<br><br>    with tqdm(total=100) as pbar:<br>        for i in range(10):<br>            pbar.update(10)<br><br>If the optional variable ``total`` (or an iterable with ``len()``) is<br>provided, predictive stats are displayed.<br><br>``with`` is also optional (you can just assign ``tqdm()`` to a variable,<br>but in this case don't forget to ``del`` or ``close()`` at the end:<br><br>.. code:: python<br><br>    pbar = tqdm(total=100)<br>    for i in range(10):<br>        pbar.update(10)<br>    pbar.close()<br><br>Module<br>~~~~~~<br><br>Perhaps the most wonderful use of ``tqdm`` is in a script or on the command<br>line. Simply inserting ``tqdm`` (or ``python -m tqdm``) between pipes will pass<br>through all ``stdin`` to ``stdout`` while printing progress to ``stderr``.<br><br>The example below demonstrated counting the number of lines in all Python files<br>in the current directory, with timing information included.<br><br>.. code:: sh<br><br>    $ time find . -name '*.py' -exec cat \\{} \\; | wc -l<br>    857365<br><br>    real    0m3.458s<br>    user    0m0.274s<br>    sys     0m3.325s<br><br>    $ time find . -name '*.py' -exec cat \\{} \\; | tqdm | wc -l<br>    857366it [00:03, 246471.31it/s]<br>    857365<br><br>    real    0m3.585s<br>    user    0m0.862s<br>    sys     0m3.358s<br><br>Note that the usual arguments for ``tqdm`` can also be specified.<br><br>.. code:: sh<br><br>    $ find . -name '*.py' -exec cat \\{} \\; |<br>        tqdm --unit loc --unit_scale --total 857366 &gt;&gt; /dev/null<br>    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 857K/857K [00:04&lt;00:00, 246Kloc/s]<br><br>Backing up a large directory?<br><br>.. code:: sh<br><br>    $ 7z a -bd -r backup.7z docs/ | grep Compressing |<br>        tqdm --total $(find docs/ -type f | wc -l) --unit files &gt;&gt; backup.log<br>    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37&lt;00:00, 82.29files/s]<br><br><br>FAQ and Known Issues<br>--------------------<br><br>|GitHub-Issues|<br><br>The most common issues relate to excessive output on multiple lines, instead<br>of a neat one-line progress bar.<br><br>- Consoles in general: require support for carriage return (``CR``, ``\\r``).<br>- Nested progress bars:<br>    * Consoles in general: require support for moving cursors up to the<br>      previous line. For example,<br>      `IDLE &lt;https://github.com/tqdm/tqdm/issues/191#issuecomment-230168030&gt;`__,<br>      `ConEmu &lt;https://github.com/tqdm/tqdm/issues/254&gt;`__ and<br>      `PyCharm &lt;https://github.com/tqdm/tqdm/issues/203&gt;`__ (also<br>      `here &lt;https://github.com/tqdm/tqdm/issues/208&gt;`__,<br>      `here &lt;https://github.com/tqdm/tqdm/issues/307&gt;`__, and<br>      `here &lt;https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815&gt;`__)<br>      lack full support.<br>    * Windows: additionally may require the Python module ``colorama``<br>      to ensure nested bars stay within their respective lines.<br>- Unicode:<br>    * Environments which report that they support unicode will have solid smooth<br>      progressbars. The fallback is an `ascii`-only bar.<br>    * Windows consoles often only partially support unicode and thus<br>      `often require explicit ascii=True &lt;https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815&gt;`__<br>      (also `here &lt;https://github.com/tqdm/tqdm/issues/499&gt;`__). This is due to<br>      either normal-width unicode characters being incorrectly displayed as<br>      \"wide\", or some unicode characters not rendering.<br>- Wrapping enumerated iterables: use ``enumerate(tqdm(...))`` instead of<br>  ``tqdm(enumerate(...))``. The same applies to ``numpy.ndenumerate``.<br>  This is because enumerate functions tend to hide the length of iterables.<br>  ``tqdm`` does not.<br>- Wrapping zipped iterables has similar issues due to internal optimisations.<br>  ``tqdm(zip(a, b))`` should be replaced with ``zip(tqdm(a), b)`` or even<br>  ``zip(tqdm(a), tqdm(b))``.<br><br>If you come across any other difficulties, browse and file |GitHub-Issues|.<br><br>Documentation<br>-------------<br><br>|PyPI-Versions| |README-Hits| (Since 19 May 2016)<br><br>.. code:: python<br><br>    class tqdm(object):<br>      \"\"\"<br>      Decorate an iterable object, returning an iterator which acts exactly<br>      like the original iterable, but prints a dynamically updating<br>      progressbar every time a value is requested.<br>      \"\"\"<br><br>      def __init__(self, iterable=None, desc=None, total=None, leave=True,<br>                   file=None, ncols=None, mininterval=0.1,<br>                   maxinterval=10.0, miniters=None, ascii=None, disable=False,<br>                   unit='it', unit_scale=False, dynamic_ncols=False,<br>                   smoothing=0.3, bar_format=None, initial=0, position=None,<br>                   postfix=None, unit_divisor=1000):<br><br>Parameters<br>~~~~~~~~~~<br><br>* iterable  : iterable, optional  <br>    Iterable to decorate with a progressbar.<br>    Leave blank to manually manage the updates.<br>* desc  : str, optional  <br>    Prefix for the progressbar.<br>* total  : int, optional  <br>    The number of expected iterations. If unspecified,<br>    len(iterable) is used if possible. As a last resort, only basic<br>    progress statistics are displayed (no ETA, no progressbar).<br>    If ``gui`` is True and this parameter needs subsequent updating,<br>    specify an initial arbitrary large positive integer,<br>    e.g. int(9e9).<br>* leave  : bool, optional  <br>    If [default: True], keeps all traces of the progressbar<br>    upon termination of iteration.<br>* file  : ``io.TextIOWrapper`` or ``io.StringIO``, optional  <br>    Specifies where to output the progress messages<br>    (default: sys.stderr). Uses ``file.write(str)`` and ``file.flush()``<br>    methods.<br>* ncols  : int, optional  <br>    The width of the entire output message. If specified,<br>    dynamically resizes the progressbar to stay within this bound.<br>    If unspecified, attempts to use environment width. The<br>    fallback is a meter width of 10 and no limit for the counter and<br>    statistics. If 0, will not print any meter (only stats).<br>* mininterval  : float, optional  <br>    Minimum progress display update interval [default: 0.1] seconds.<br>* maxinterval  : float, optional  <br>    Maximum progress display update interval [default: 10] seconds.<br>    Automatically adjusts ``miniters`` to correspond to ``mininterval``<br>    after long display update lag. Only works if ``dynamic_miniters``<br>    or monitor thread is enabled.<br>* miniters  : int, optional  <br>    Minimum progress display update interval, in iterations.<br>    If 0 and ``dynamic_miniters``, will automatically adjust to equal<br>    ``mininterval`` (more CPU efficient, good for tight loops).<br>    If &gt; 0, will skip display of specified number of iterations.<br>    Tweak this and ``mininterval`` to get very efficient loops.<br>    If your progress is erratic with both fast and slow iterations<br>    (network, skipping items, etc) you should set miniters=1.<br>* ascii  : bool, optional  <br>    If unspecified or False, use unicode (smooth blocks) to fill<br>    the meter. The fallback is to use ASCII characters ``1-9 #``.<br>* disable  : bool, optional  <br>    Whether to disable the entire progressbar wrapper<br>    [default: False]. If set to None, disable on non-TTY.<br>* unit  : str, optional  <br>    String that will be used to define the unit of each iteration<br>    [default: it].<br>* unit_scale  : bool or int or float, optional  <br>    If 1 or True, the number of iterations will be reduced/scaled<br>    automatically and a metric prefix following the<br>    International System of Units standard will be added<br>    (kilo, mega, etc.) [default: False]. If any other non-zero<br>    number, will scale `total` and `n`.<br>* dynamic_ncols  : bool, optional  <br>    If set, constantly alters ``ncols`` to the environment (allowing<br>    for window resizes) [default: False].<br>* smoothing  : float, optional  <br>    Exponential moving average smoothing factor for speed estimates<br>    (ignored in GUI mode). Ranges from 0 (average speed) to 1<br>    (current/instantaneous speed) [default: 0.3].<br>* bar_format  : str, optional  <br>    Specify a custom bar string formatting. May impact performance.<br>    [default: '{l_bar}{bar}{r_bar}'], where<br>    l_bar='{desc}: {percentage:3.0f}%|' and<br>    r_bar='| {n_fmt}/{total_fmt} [{elapsed}&lt;{remaining}, '<br>      '{rate_fmt}{postfix}]'<br>    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,<br>      percentage, rate, rate_fmt, rate_noinv, rate_noinv_fmt,<br>      rate_inv, rate_inv_fmt, elapsed, remaining, desc, postfix.<br>    Note that a trailing \": \" is automatically removed after {desc}<br>    if the latter is empty.<br>* initial  : int, optional  <br>    The initial counter value. Useful when restarting a progress<br>    bar [default: 0].<br>* position  : int, optional  <br>    Specify the line offset to print this bar (starting from 0)<br>    Automatic if unspecified.<br>    Useful to manage multiple bars at once (eg, from threads).<br>* postfix  : dict or ``*``, optional  <br>    Specify additional stats to display at the end of the bar.<br>    Calls ``set_postfix(**postfix)`` if possible (dict).<br>* unit_divisor  : float, optional  <br>    [default: 1000], ignored unless `unit_scale` is True.<br><br>Extra CLI Options<br>~~~~~~~~~~~~~~~~~<br><br>* delim  : chr, optional  <br>    Delimiting character [default: '\\n']. Use '\\0' for null.<br>    N.B.: on Windows systems, Python converts '\\n' to '\\r\\n'.<br>* buf_size  : int, optional  <br>    String buffer size in bytes [default: 256]<br>    used when ``delim`` is specified.<br>* bytes  : bool, optional  <br>    If true, will count bytes and ignore ``delim``.<br><br>Returns<br>~~~~~~~<br><br>* out  : decorated iterator.<br><br>.. code:: python<br><br>      def update(self, n=1):<br>          \"\"\"<br>          Manually update the progress bar, useful for streams<br>          such as reading files.<br>          E.g.:<br>          &gt;&gt;&gt; t = tqdm(total=filesize) # Initialise<br>          &gt;&gt;&gt; for current_buffer in stream:<br>          ...    ...<br>          ...    t.update(len(current_buffer))<br>          &gt;&gt;&gt; t.close()<br>          The last line is highly recommended, but possibly not necessary if<br>          ``t.update()`` will be called in such a way that ``filesize`` will be<br>          exactly reached and printed.<br><br>          Parameters<br>          ----------<br>          n  : int, optional<br>              Increment to add to the internal counter of iterations<br>              [default: 1].<br>          \"\"\"<br><br>      def close(self):<br>          \"\"\"<br>          Cleanup and (if leave=False) close the progressbar.<br>          \"\"\"<br><br>      def unpause(self):<br>          \"\"\"<br>          Restart tqdm timer from last print time.<br>          \"\"\"<br><br>      def clear(self, nomove=False):<br>          \"\"\"<br>          Clear current bar display<br>          \"\"\"<br><br>      def refresh(self):<br>          \"\"\"<br>          Force refresh the display of this bar<br>          \"\"\"<br><br>      def write(cls, s, file=sys.stdout, end=\"\\n\"):<br>          \"\"\"<br>          Print a message via tqdm (without overlap with bars)<br>          \"\"\"<br><br>      def set_description(self, desc=None, refresh=True):<br>          \"\"\"<br>          Set/modify description of the progress bar.<br><br>          Parameters<br>          ----------<br>          desc  : str, optional<br>          refresh  : bool, optional<br>              Forces refresh [default: True].<br>          \"\"\"<br><br>      def set_postfix(self, ordered_dict=None, refresh=True, **kwargs):<br>          \"\"\"<br>          Set/modify postfix (additional stats)<br>          with automatic formatting based on datatype.<br><br>          Parameters<br>          ----------<br>          refresh  : bool, optional<br>              Forces refresh [default: True].<br>          \"\"\"<br><br>    def trange(*args, **kwargs):<br>        \"\"\"<br>        A shortcut for tqdm(xrange(*args), **kwargs).<br>        On Python3+ range is used instead of xrange.<br>        \"\"\"<br><br>    class tqdm_gui(tqdm):<br>        \"\"\"<br>        Experimental GUI version of tqdm!<br>        \"\"\"<br><br>    def tgrange(*args, **kwargs):<br>        \"\"\"<br>        Experimental GUI version of trange!<br>        \"\"\"<br><br>    class tqdm_notebook(tqdm):<br>        \"\"\"<br>        Experimental IPython/Jupyter Notebook widget using tqdm!<br>        \"\"\"<br><br>    def tnrange(*args, **kwargs):<br>        \"\"\"<br>        Experimental IPython/Jupyter Notebook widget using tqdm!<br>        \"\"\"<br><br><br>Examples and Advanced Usage<br>---------------------------<br><br>- See the `examples &lt;https://github.com/tqdm/tqdm/tree/master/examples&gt;`__<br>  folder;<br>- import the module and run ``help()``, or<br>- consult the `wiki &lt;https://github.com/tqdm/tqdm/wiki&gt;`__.<br>    - this has an<br>      `excellent article &lt;https://github.com/tqdm/tqdm/wiki/How-to-make-a-great-Progress-Bar&gt;`__<br>      on how to make a **great** progressbar.<br><br>Description and additional stats<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>Custom information can be displayed and updated dynamically on ``tqdm`` bars<br>with the ``desc`` and ``postfix`` arguments:<br><br>.. code:: python<br><br>    from tqdm import trange<br>    from random import random, randint<br>    from time import sleep<br><br>    with trange(100) as t:<br>        for i in t:<br>            # Description will be displayed on the left<br>            t.set_description('GEN %i' % i)<br>            # Postfix will be displayed on the right,<br>            # formatted automatically based on argument's datatype<br>            t.set_postfix(loss=random(), gen=randint(1,999), str='h',<br>                          lst=[1, 2])<br>            sleep(0.1)<br><br>    with tqdm(total=10, bar_format=\"{postfix[0]} {postfix[1][value]:&gt;8.2g}\",<br>              postfix=[\"Batch\", dict(value=0)]) as t:<br>        for i in range(10):<br>            sleep(0.1)<br>            t.postfix[1][\"value\"] = i / 2<br>            t.update()<br><br>Points to remember when using ``{postfix[...]}`` in the ``bar_format`` string:<br><br>- ``postfix`` also needs to be passed as an initial argument in a compatible<br>  format, and<br>- ``postfix`` will be auto-converted to a string if it is a ``dict``-like<br>  object. To prevent this behaviour, insert an extra item into the dictionary<br>  where the key is not a string.<br><br>Nested progress bars<br>~~~~~~~~~~~~~~~~~~~~<br><br>``tqdm`` supports nested progress bars. Here's an example:<br><br>.. code:: python<br><br>    from tqdm import trange<br>    from time import sleep<br><br>    for i in trange(10, desc='1st loop'):<br>        for j in trange(5, desc='2nd loop', leave=False):<br>            for k in trange(100, desc='3nd loop'):<br>                sleep(0.01)<br><br>On Windows `colorama &lt;https://github.com/tartley/colorama&gt;`__ will be used if<br>available to keep nested bars on their respective lines.<br><br>For manual control over positioning (e.g. for multi-threaded use),<br>you may specify ``position=n`` where ``n=0`` for the outermost bar,<br>``n=1`` for the next, and so on:<br><br>.. code:: python<br><br>    from time import sleep<br>    from tqdm import trange, tqdm<br>    from multiprocessing import Pool, freeze_support, RLock<br><br>    L = list(range(9))<br><br>    def progresser(n):<br>        interval = 0.001 / (n + 2)<br>        total = 5000<br>        text = \"#{}, est. {:&lt;04.2}s\".format(n, interval * total)<br>        for i in trange(total, desc=text, position=n):<br>            sleep(interval)<br><br>    if __name__ == '__main__':<br>        freeze_support()  # for Windows support<br>        p = Pool(len(L),<br>                 # again, for Windows support<br>                 initializer=tqdm.set_lock, initargs=(RLock(),))<br>        p.map(progresser, L)<br>        print(\"\\n\" * (len(L) - 2))<br><br>Hooks and callbacks<br>~~~~~~~~~~~~~~~~~~~<br><br>``tqdm`` can easily support callbacks/hooks and manual updates.<br>Here's an example with ``urllib``:<br><br>**urllib.urlretrieve documentation**<br><br>    | [...]<br>    | If present, the hook function will be called once<br>    | on establishment of the network connection and once after each block read<br>    | thereafter. The hook will be passed three arguments; a count of blocks<br>    | transferred so far, a block size in bytes, and the total size of the file.<br>    | [...]<br><br>.. code:: python<br><br>    import urllib, os<br>    from tqdm import tqdm<br><br>    class TqdmUpTo(tqdm):<br>        \"\"\"Provides `update_to(n)` which uses `tqdm.update(delta_n)`.\"\"\"<br>        def update_to(self, b=1, bsize=1, tsize=None):<br>            \"\"\"<br>            b  : int, optional<br>                Number of blocks transferred so far [default: 1].<br>            bsize  : int, optional<br>                Size of each block (in tqdm units) [default: 1].<br>            tsize  : int, optional<br>                Total size (in tqdm units). If [default: None] remains unchanged.<br>            \"\"\"<br>            if tsize is not None:<br>                self.total = tsize<br>            self.update(b * bsize - self.n)  # will also set self.n = b * bsize<br><br>    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"<br>    with TqdmUpTo(unit='B', unit_scale=True, miniters=1,<br>                  desc=eg_link.split('/')[-1]) as t:  # all optional kwargs<br>        urllib.urlretrieve(eg_link, filename=os.devnull,<br>                           reporthook=t.update_to, data=None)<br><br>Inspired by `twine#242 &lt;https://github.com/pypa/twine/pull/242&gt;`__.<br>Functional alternative in<br>`examples/tqdm_wget.py &lt;https://github.com/tqdm/tqdm/blob/master/examples/tqdm_wget.py&gt;`__.<br><br>It is recommend to use ``miniters=1`` whenever there is potentially<br>large differences in iteration speed (e.g. downloading a file over<br>a patchy connection).<br><br>Pandas Integration<br>~~~~~~~~~~~~~~~~~~<br><br>Due to popular demand we've added support for ``pandas`` -- here's an example<br>for ``DataFrame.progress_apply`` and ``DataFrameGroupBy.progress_apply``:<br><br>.. code:: python<br><br>    import pandas as pd<br>    import numpy as np<br>    from tqdm import tqdm<br><br>    df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))<br><br>    # Register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`<br>    # (can use `tqdm_gui`, `tqdm_notebook`, optional kwargs, etc.)<br>    tqdm.pandas(desc=\"my bar!\")<br><br>    # Now you can use `progress_apply` instead of `apply`<br>    # and `progress_map` instead of `map`<br>    df.progress_apply(lambda x: x**2)<br>    # can also groupby:<br>    # df.groupby(0).progress_apply(lambda x: x**2)<br><br>In case you're interested in how this works (and how to modify it for your<br>own callbacks), see the<br>`examples &lt;https://github.com/tqdm/tqdm/tree/master/examples&gt;`__<br>folder or import the module and run ``help()``.<br><br>IPython/Jupyter Integration<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>IPython/Jupyter is supported via the ``tqdm_notebook`` submodule:<br><br>.. code:: python<br><br>    from tqdm import tnrange, tqdm_notebook<br>    from time import sleep<br><br>    for i in tnrange(10, desc='1st loop'):<br>        for j in tqdm_notebook(xrange(100), desc='2nd loop'):<br>            sleep(0.01)<br><br>In addition to ``tqdm`` features, the submodule provides a native Jupyter<br>widget (compatible with IPython v1-v4 and Jupyter), fully working nested bars<br>and color hints (blue: normal, green: completed, red: error/interrupt,<br>light blue: no ETA); as demonstrated below.<br><br>|Screenshot-Jupyter1|<br>|Screenshot-Jupyter2|<br>|Screenshot-Jupyter3|<br><br>It is also possible to let ``tqdm`` automatically choose between<br>console or notebook versions by using the ``autonotebook`` submodule:<br><br>.. code:: python<br><br>    from tqdm.autonotebook import tqdm<br>    tqdm.pandas()<br><br>Note that this will issue a ``TqdmExperimentalWarning`` if run in a notebook<br>since it is not meant to be possible to distinguish between ``jupyter notebook``<br>and ``jupyter console``. Use ``auto`` instead of ``autonotebook`` to suppress<br>this warning.<br><br>Writing messages<br>~~~~~~~~~~~~~~~~<br><br>Since ``tqdm`` uses a simple printing mechanism to display progress bars,<br>you should not write any message in the terminal using ``print()`` while<br>a progressbar is open.<br><br>To write messages in the terminal without any collision with ``tqdm`` bar<br>display, a ``.write()`` method is provided:<br><br>.. code:: python<br><br>    from tqdm import tqdm, trange<br>    from time import sleep<br><br>    bar = trange(10)<br>    for i in bar:<br>        # Print using tqdm class method .write()<br>        sleep(0.1)<br>        if not (i % 3):<br>            tqdm.write(\"Done task %i\" % i)<br>        # Can also use bar.write()<br><br>By default, this will print to standard output ``sys.stdout``. but you can<br>specify any file-like object using the ``file`` argument. For example, this<br>can be used to redirect the messages writing to a log file or class.<br><br>Redirecting writing<br>~~~~~~~~~~~~~~~~~~~<br><br>If using a library that can print messages to the console, editing the library<br>by  replacing ``print()`` with ``tqdm.write()`` may not be desirable.<br>In that case, redirecting ``sys.stdout`` to ``tqdm.write()`` is an option.<br><br>To redirect ``sys.stdout``, create a file-like class that will write<br>any input string to ``tqdm.write()``, and supply the arguments<br>``file=sys.stdout, dynamic_ncols=True``.<br><br>A reusable canonical example is given below:<br><br>.. code:: python<br><br>    from time import sleep<br>    import contextlib<br>    import sys<br>    from tqdm import tqdm<br><br>    class DummyTqdmFile(object):<br>        \"\"\"Dummy file-like that will write to tqdm\"\"\"<br>        file = None<br>        def __init__(self, file):<br>            self.file = file<br><br>        def write(self, x):<br>            # Avoid print() second call (useless \\n)<br>            if len(x.rstrip()) &gt; 0:<br>                tqdm.write(x, file=self.file)<br><br>        def flush(self):<br>            return getattr(self.file, \"flush\", lambda: None)()<br><br>    @contextlib.contextmanager<br>    def std_out_err_redirect_tqdm():<br>        orig_out_err = sys.stdout, sys.stderr<br>        try:<br>            sys.stdout, sys.stderr = map(DummyTqdmFile, orig_out_err)<br>            yield orig_out_err[0]<br>        # Relay exceptions<br>        except Exception as exc:<br>            raise exc<br>        # Always restore sys.stdout/err if necessary<br>        finally:<br>            sys.stdout, sys.stderr = orig_out_err<br><br>    def some_fun(i):<br>        print(\"Fee, fi, fo,\".split()[i])<br><br>    # Redirect stdout to tqdm.write() (don't forget the `as save_stdout`)<br>    with std_out_err_redirect_tqdm() as orig_stdout:<br>        # tqdm needs the original stdout<br>        # and dynamic_ncols=True to autodetect console width<br>        for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=True):<br>            sleep(.5)<br>            some_fun(i)<br><br>    # After the `with`, printing is restored<br>    print(\"Done!\")<br><br>Monitoring thread, intervals and miniters<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>``tqdm`` implements a few tricks to to increase efficiency and reduce overhead.<br><br>- Avoid unnecessary frequent bar refreshing: ``mininterval`` defines how long<br>  to wait between each refresh. ``tqdm`` always gets updated in the background,<br>  but it will diplay only every ``mininterval``.<br>- Reduce number of calls to check system clock/time.<br>- ``mininterval`` is more intuitive to configure than ``miniters``.<br>  A clever adjustment system ``dynamic_miniters`` will automatically adjust<br>  ``miniters`` to the amount of iterations that fit into time ``mininterval``.<br>  Essentially, ``tqdm`` will check if it's time to print without actually<br>  checking time. This behaviour can be still be bypassed by manually setting<br>  ``miniters``.<br><br>However, consider a case with a combination of fast and slow iterations.<br>After a few fast iterations, ``dynamic_miniters`` will set ``miniters`` to a<br>large number. When iteration rate subsequently slows, ``miniters`` will<br>remain large and thus reduce display update frequency. To address this:<br><br>- ``maxinterval`` defines the maximum time between display refreshes.<br>  A concurrent monitoring thread checks for overdue updates and forces one<br>  where necessary.<br><br>The monitoring thread should not have a noticeable overhead, and guarantees<br>updates at least every 10 seconds by default.<br>This value can be directly changed by setting the ``monitor_interval`` of<br>any ``tqdm`` instance (i.e. ``t = tqdm.tqdm(...); t.monitor_interval = 2``).<br>The monitor thread may be disabled application-wide by setting<br>``tqdm.tqdm.monitor_interval = 0`` before instantiatiation of any ``tqdm`` bar.<br><br><br>Contributions<br>-------------<br><br>|GitHub-Commits| |GitHub-Issues| |GitHub-PRs| |OpenHub-Status|<br><br>All source code is hosted on `GitHub &lt;https://github.com/tqdm/tqdm&gt;`__.<br>Contributions are welcome.<br><br>See the<br>`CONTRIBUTING &lt;https://raw.githubusercontent.com/tqdm/tqdm/master/CONTRIBUTING.md&gt;`__<br>file for more information.<br><br>Ports to Other Languages<br>~~~~~~~~~~~~~~~~~~~~~~~~<br><br>A list is available on<br>`this wiki page &lt;https://github.com/tqdm/tqdm/wiki/tqdm-ports&gt;`__.<br><br><br>LICENCE<br>-------<br><br>Open Source (OSI approved): |LICENCE|<br><br>Citation information: |DOI-URI|<br><br><br>Authors<br>-------<br><br>The main developers, ranked by surviving lines of code<br>(`git fame -wMC &lt;https://github.com/casperdcl/git-fame&gt;`__), are:<br><br>- Casper da Costa-Luis (`casperdcl &lt;https://github.com/casperdcl&gt;`__, ~2/3, |Gift-Casper|)<br>- Stephen Larroque (`lrq3000 &lt;https://github.com/lrq3000&gt;`__, ~1/5)<br>- Hadrien Mary (`hadim &lt;https://github.com/hadim&gt;`__, ~2%)<br>- Guangshuo Chen (`chengs &lt;https://github.com/chengs&gt;`__, ~1%)<br>- Noam Yorav-Raphael (`noamraph &lt;https://github.com/noamraph&gt;`__, ~1%, original author)<br>- Mikhail Korobov (`kmike &lt;https://github.com/kmike&gt;`__, ~1%)<br><br>There are also many |GitHub-Contributions| which we are grateful for.<br><br>|README-Hits| (Since 19 May 2016)<br><br>.. |Logo| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/logo.gif<br>.. |Screenshot| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm.gif<br>.. |Build-Status| image:: https://travis-ci.org/tqdm/tqdm.svg?branch=master<br>   :target: https://travis-ci.org/tqdm/tqdm<br>.. |Coverage-Status| image:: https://coveralls.io/repos/tqdm/tqdm/badge.svg?branch=master<br>   :target: https://coveralls.io/github/tqdm/tqdm<br>.. |Branch-Coverage-Status| image:: https://codecov.io/gh/tqdm/tqdm/branch/master/graph/badge.svg<br>   :target: https://codecov.io/gh/tqdm/tqdm<br>.. |Codacy-Grade| image:: https://api.codacy.com/project/badge/Grade/3f965571598f44549c7818f29cdcf177<br>   :target: https://www.codacy.com/app/tqdm/tqdm?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=tqdm/tqdm&amp;amp;utm_campaign=Badge_Grade<br>.. |GitHub-Status| image:: https://img.shields.io/github/tag/tqdm/tqdm.svg?maxAge=86400<br>   :target: https://github.com/tqdm/tqdm/releases<br>.. |GitHub-Forks| image:: https://img.shields.io/github/forks/tqdm/tqdm.svg<br>   :target: https://github.com/tqdm/tqdm/network<br>.. |GitHub-Stars| image:: https://img.shields.io/github/stars/tqdm/tqdm.svg<br>   :target: https://github.com/tqdm/tqdm/stargazers<br>.. |GitHub-Commits| image:: https://img.shields.io/github/commit-activity/y/tqdm/tqdm.svg<br>   :target: https://github.com/tqdm/tqdm/graphs/commit-activity<br>.. |GitHub-Issues| image:: https://img.shields.io/github/issues-closed/tqdm/tqdm.svg<br>   :target: https://github.com/tqdm/tqdm/issues<br>.. |GitHub-PRs| image:: https://img.shields.io/github/issues-pr-closed/tqdm/tqdm.svg<br>   :target: https://github.com/tqdm/tqdm/pulls<br>.. |GitHub-Contributions| image:: https://img.shields.io/github/contributors/tqdm/tqdm.svg<br>   :target: https://github.com/tqdm/tqdm/graphs/contributors<br>.. |Gift-Casper| image:: https://img.shields.io/badge/gift-donate-ff69b4.svg<br>   :target: https://caspersci.uk.to/donate.html<br>.. |PyPI-Status| image:: https://img.shields.io/pypi/v/tqdm.svg<br>   :target: https://pypi.org/project/tqdm<br>.. |PyPI-Downloads| image:: https://img.shields.io/pypi/dm/tqdm.svg<br>   :target: https://pypi.org/project/tqdm<br>.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/tqdm.svg<br>   :target: https://pypi.org/project/tqdm<br>.. |Conda-Forge-Status| image:: https://anaconda.org/conda-forge/tqdm/badges/version.svg<br>   :target: https://anaconda.org/conda-forge/tqdm<br>.. |OpenHub-Status| image:: https://www.openhub.net/p/tqdm/widgets/project_thin_badge?format=gif<br>   :target: https://www.openhub.net/p/tqdm?ref=Thin+badge<br>.. |LICENCE| image:: https://img.shields.io/pypi/l/tqdm.svg<br>   :target: https://raw.githubusercontent.com/tqdm/tqdm/master/LICENCE<br>.. |DOI-URI| image:: https://zenodo.org/badge/21637/tqdm/tqdm.svg<br>   :target: https://zenodo.org/badge/latestdoi/21637/tqdm/tqdm<br>.. |Screenshot-Jupyter1| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm-jupyter-1.gif<br>.. |Screenshot-Jupyter2| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm-jupyter-2.gif<br>.. |Screenshot-Jupyter3| image:: https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm-jupyter-3.gif<br>.. |README-Hits| image:: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&amp;style=social&amp;r=https://github.com/tqdm/tqdm&amp;l=https://caspersci.uk.to/images/tqdm.png&amp;f=https://raw.githubusercontent.com/tqdm/tqdm/master/images/logo.gif<br>   :target: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&amp;a=plot&amp;r=https://github.com/tqdm/tqdm&amp;l=https://caspersci.uk.to/images/tqdm.png&amp;f=https://raw.githubusercontent.com/tqdm/tqdm/master/images/logo.gif&amp;style=social\n          </div>"}, "last_serial": 4390409, "releases": {"4.27.0": [{"comment_text": "", "digests": {"md5": "85582fe3a9f4ffd81d3a134414247d7f", "sha256": "6e310a3f074633de7517feceec0b1be6d0ae813d7f7b8d2c4a25ae67d5a37d39"}, "downloads": -1, "filename": "tqdm_conan-4.27.0.tar.gz", "has_sig": false, "md5_digest": "85582fe3a9f4ffd81d3a134414247d7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*", "size": 102277, "upload_time": "2018-10-18T13:49:59", "upload_time_iso_8601": "2018-10-18T13:49:59.868356Z", "url": "https://files.pythonhosted.org/packages/72/c7/17fbcf030b73d0a21254bb1ba6ae4e795f55ab60d2a3b5eeec05442592e0/tqdm_conan-4.27.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85582fe3a9f4ffd81d3a134414247d7f", "sha256": "6e310a3f074633de7517feceec0b1be6d0ae813d7f7b8d2c4a25ae67d5a37d39"}, "downloads": -1, "filename": "tqdm_conan-4.27.0.tar.gz", "has_sig": false, "md5_digest": "85582fe3a9f4ffd81d3a134414247d7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*", "size": 102277, "upload_time": "2018-10-18T13:49:59", "upload_time_iso_8601": "2018-10-18T13:49:59.868356Z", "url": "https://files.pythonhosted.org/packages/72/c7/17fbcf030b73d0a21254bb1ba6ae4e795f55ab60d2a3b5eeec05442592e0/tqdm_conan-4.27.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:05 2020"}