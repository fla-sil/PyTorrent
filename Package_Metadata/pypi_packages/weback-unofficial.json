{"info": {"author": "Pravdin Oleg", "author_email": "opravdin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Unofficial WeBack API Client  \nThis client was developed using reverse engineering of the Android application and traffic analysis. There is no guarantee that this API will continue to work. However, it will be quite easy to fix in case of any errors/issues/changes as the WeBack servers are only responsible for gaining access to the API (Amazon Cognito, to be precise).  \n\n## Usage\n```\npip3 install weback-unofficial\n```\n### Authentication\nFirst of all, you need to choose whether you want to manage your session manually or with this package.\n```python\nfrom weback_unofficial.client import WebackApi\nimport boto3\n\n# Method 1: make this package keep session itself\nclient = WebackApi('+7-1234567890', '<your_password>')\nsession = client.get_session() # Returns Amazon Session from boto3 package \n\n\n# Method 2: manage by yourself\nclient = WebackApi()\nweback_data = client.auth('+7-1234567890', '<your_password>') # Returns creds for auth in AWS\n\nregion = weback_data['Region_Info']\nclient = boto3.client('cognito-identity', region)\n\n# Here you will receive session data & expiration time (usually 1 day)\n# Don't forget to keep it alive!\naws_creds =  client.get_credentials_for_identity(\n    IdentityId=weback_data['Identity_Id'], \n    Logins={\n        \"cognito-identity.amazonaws.com\": weback_data['Token']\n    }\n)\nsession = boto3.Session(\n    aws_access_key_id=aws_creds['Credentials']['AccessKeyId'],\n    aws_secret_access_key=aws_creds['Credentials']['SecretKey'],\n    aws_session_token=aws_creds['Credentials']['SessionToken'],\n    region_name=region\n)\n\n```\n\n### Manipulating with vacuum robot (example)\n```python\ndevices = client.device_list()\ndevice_name = devices[0]['Thing_Name']\n# Method 1: via helper functions\n# Get device shadow status\nclient.get_device_shadow(device_name)\n# Get device description: https://docs.aws.amazon.com/iot/latest/apireference/API_DescribeThing.html\nclient.get_device_description(device_name)\n# Publish message for device\nclient.publish_device_msg(device_name, {\"working_status\": \"AutoClean\"})\n\n# Method 2: via Vacuum class\nvacuum = CleanRobot(device_name, self.client)\nvacuum.update()\nprint(vacuum.state)\nprint(vacuum.current_mode)\n\nvacuum.turn_on()\nvacuum.stop()\nvacuum.return_home()\n\n# Method 3: by yourself\n# Get device shadow status\nclient = session.client('iot-data')\nresp = client.get_thing_shadow(thingName=device_name)\nshadow = json.loads(resp['payload'].read())\nprint(\"Attributes:\")\npp = pprint.PrettyPrinter(indent=1)\npp.pprint(shadow['state']['reported'])\n\n# Start up vacuum cleaner\nclient = session.client('iot-data')\ntopic = f\"$aws/things/{device_name}/shadow/update\"\n# See more MQTT commands below\npayload = {\n    'state': {\n        'desired': {\n            \"working_status\": \"AutoClean\"\n        }\n    }\n}\nresp = client.publish(topic=topic, qos = 0, payload = json.dumps(payload))\nprint(resp)\n```\n\n## API usage cycle description\nI implemented a minimum number of entry points to activate the vacuum cleaner robot. There are definitely other entry points, but they're either not necessary or I don't have devices to check them. \n* Authorization by username and password. If you use the phone number as a login, provide it in the format {country code}-{number} (e.g. +7-1234567890 if you are from Russia). The server will return the data for access via Amazon Cognito.\n* Authorization in Amazon API ([boto3 method](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-identity.html#CognitoIdentity.Client.get_credentials_for_identity))\n    * Logins format is {\"cognito-identity.amazonaws.com\": weback_data['Token']}\n* Device list receiving (via WeBack's Amazon Lambda)\n* Fetching device status via [Shadow](https://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html) ([boto3 method](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iot-data.html#IoTDataPlane.Client.get_thing_shadow))\n* OR\n* Controlling device via [MQTT publish](https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_Publish.html) on f\"$aws/things/{device_name}/shadow/update\" ([boto3 method](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iot-data.html#IoTDataPlane.Client.publish))\n\n## API description\nFor each WeBack-related request the method of its call with or without this client is described.\nThis package also contains several helper methods to simplify the work with the API.\n\n### Authorization\n```\nPOST https://www.weback-login.com/WeBack/WeBack_Login_Ats_V3\nPayload: {\n    \"App_Version\":\"android_3.9.3\", # App version\n    \"Password\":\"a57da57da57da57da57da57da57da57d\", # Password MD5 hash\n    \"User_Account\":\"+7-1234567890\"\n}\n\nResponse example: {\n  \"Request_Result\": \"success\",\n  \"Identity_Pool_Id\": \"POOL_ID\",\n  \"Developer_Provider_Name\": \"Login_WeBack_AP_SOUTHEAST_1\",\n  \"End_Point\": \"ENDPOINT\",\n  \"Identity_Id\": \"ID\",\n  \"Token\": \"TOKEN\",\n  \"Token_Duration\": 86400,\n  \"Region_Info\": \"ap-southeast-1\",\n  \"Configuration_Page_URL\": \"URL\",\n  \"Discovery_Page_URL\": \"URL\",\n  \"Customer_Service_Card_URL\": \"URL\",\n  \"Thing_Register_URL\": \"URL\",\n  \"Thing_Register_URL_Signature\": \"URL\"\n}\n```\n\n### Fetching device list\n```\nAWS Lambda name: Device_Manager_V2\nPayload: {\n    \"Device_Manager_Request\":\"query\",\n    \"Identity_Id\":\"<Identity_Id>\",\n    \"Region_Info\":\"<Region_Info>\"\n}\n\nResponse example: {\n    \"Device_Manager_Request\": \"query\",\n    \"Request_Result\": \"success\",\n    \"Request_Cotent\": [{\n        \"Thing_Name\": \"device-name-plus-mac-address\",\n        \"Thing_Nick_Name\": \"your-device-nick-name\",\n        \"Image_Url\": \"image-url\"\n    }]\n}\n```\n\n## MQTT Payload\nYou should provide payload like this\n\n```\n    payload = {\n        'state': {\n            'desired': {\n                \"<Attribute>\": \"<Status>\"\n            }\n        }\n    }\n```\n\nHere \"Attribute\" and \"Status\" is one of the payload values from the next sections. I'm not sure if this is suitable for all devices, but my robot vacuum cleaner reacts perfectly to them.\n\n## List of MQTT attributes\nYou can get Shadow status of your device and try to manipulate the parameters included in it (the keys are usually the same).  \nCurrently I have found just some of them: (related to my robot vacuum)\n* fan_status\n    * ROBOT_CTRL_SPEED_NORMAL(\"Normal\"),\n    * ROBOT_CTRL_SPEED_STRONG(\"Strong\"),\n* working_status - Try \"ROBOT_CTRL_\" ENUMs. I tested *Standby, BackCharging*, *MopClean* and *SmartClean*. Last one works both with mop and vacuum modes.\n* water_tank_shift and water_level - Same parameters (apparently), but the specific attribute depends on the robot. These values are suitable for \"water_level\" in my case:\n    * ROBOT_WATER_TANK_LOW(\"Low\"),\n    * ROBOT_WATER_TANK_DEFAULT(\"Default\"),\n    * ROBOT_WATER_TANK_HIGH(\"High\")  \n\n## List of all MQTT messages \nGrabbed from ENUMs in code. \n\n```\nROBOT_CTRL_FRONT(\"MoveFront\"),\nROBOT_CTRL_BACK(\"MoveBack\"),\nROBOT_CTRL_LEFT(\"MoveLeft\"),\nROBOT_CTRL_RIGHT(\"MoveRight\"),\nROBOT_CTRL_STOP(\"MoveStop\"),\nROBOT_NEW_CTRL_FRONT(\"move_front\"),\nROBOT_NEW_CTRL_BACK(\"move_back\"),\nROBOT_NEW_CTRL_LEFT(\"move_left\"),\nROBOT_NEW_CTRL_RIGHT(\"move_right\"),\nROBOT_NEW_CTRL_STOP(\"move_stop\"),\nROBOT_CTRL_CLEAN_STOP(\"Standby\"),\nROBOT_CTRL_CLEAN_CHARGE(\"BackCharging\"),\nROBOT_CTRL_CLEAN_STOP2(\"Stop\"),\nROBOT_CTRL_MODE_SPOT(\"SpotClean\"),\nROBOT_CTRL_MODE_PLAN(\"PlanClean\"),\nROBOT_CTRL_MODE_ROOM(\"RoomClean\"),\nROBOT_CTRL_MODE_AUTO(\"AutoClean\"),\nROBOT_CTRL_MODE_EDGE(\"EdgeClean\"),\nROBOT_CTRL_MODE_FIXED(\"StrongClean\"),\nROBOT_CTRL_MODE_Z(\"ZmodeClean\"),\nROBOT_CTRL_MODE_MOPPING(\"MopClean\"),\nROBOT_CTRL_VACUUM(\"VacuumClean\"),\nPLANNING_RECT(\"PlanningRect\"),\nROBOT_CTRL_MODE_PLAN2(\"SmartClean\"),\nROBOT_CTRL_SPEED_NORMAL(\"Normal\"),\nROBOT_CTRL_SPEED_STRONG(\"Strong\"),\nROBOT_CTRL_SPEED_STOP(\"Pause\"),\nROBOT_CTRL_SPEED_SOUND_STOP(\"Quite\"),\nROBOT_CTRL_SPEED_SOUND_STOP_2(\"Quiet\"),\nROBOT_CTRL_SPEED_MAX(\"Max\"),\nROBOT_HAS_NONE_FAN(\"None\"),\nROBOT_WORK_STATUS_STOP(\"Hibernating\"),\nROBOT_WORK_STATUS_STANDBY(\"Standby\"),\nROBOT_LOCATION_ALARM(\"LocationAlarm\"),\nPLANNING_LOCATION(\"PlanningLocation\"),\nROBOT_WORK_STATUS_CHARGING_3(\"Charging\"),\nROBOT_WORK_STATUS_WORKING(\"Cleaning\"),\nROBOT_WORK_STATUS_WORK_OVER(\"Cleandone\"),\nROBOT_WORK_STATUS_GO_CHARGE(\"Backcharging\"),\nROBOT_WORK_STATUS_CHARGING(\"Pilecharging\"),\nROBOT_WORK_STATUS_CHARGE_OVER(\"Chargedone\"),\nROBOT_WORK_STATUS_LOWPOWER(\"Lowpower\"),\nROBOT_WORK_STATUS_ERROR(\"Malfunction\"),\nROBOT_WORK_STATUS_CHARGING2(\"DirCharging\"),\nROBOT_WORK_STATUS_CTRL(\"DirectionControl\"),\nROBOT_WATER_TANK_OFF(BucketVersioningConfiguration.OFF),\nROBOT_WATER_TANK_LOW(\"Low\"),\nROBOT_WATER_TANK_DEFAULT(\"Default\"),\nROBOT_WATER_TANK_HIGH(\"High\"),\nROBOT_WATER_TANK_LOW_TAB(\"Slow\"),\nROBOT_WATER_TANK_DEFAULT_TAB(\"Normal\"),\nROBOT_WATER_TANK_HIGH_TAB(\"Fast\"),\nROBOT_HAS_NONE_TANK(\"None\"),\nROBOT_VOICE_CTRL_ON(\"on\"),\nROBOT_VOICE_CTRL_OFF(\"off\"),\nROBOT_CAMERA_UP(\"Up\"),\nROBOT_CAMERA_DOWN(\"Down\"),\nROBOT_CAMERA_LEFT(\"Left\"),\nROBOT_CAMERA_RIGHT(\"Right\"),\nROBOT_POWER_AWAKE(\"PowerAwake\"),\nROBOT_POWER_SLEEP(\"PowerSleep\"),\nROBOT_NO_CHATTING(\"NoChatting\"),\nROBOT_AV_CHATTING(\"AVChatting\"),\nROBOT_VIDEO_CHATTING(\"VideoChatting\"),\nROBOT_AUDIO_CHATTING(\"AudioChatting\"),\nROBOT_SPEED_LOW(\"Low\"),\nROBOT_SPEED_HIGH(\"High\"),\nROBOT_ERROR_NO(\"NoError\"),\nROBOT_ERROR_UNKNOWN(\"UnknownError\"),\nROBOT_ERROR_LEFT_WHEEL(\"LeftWheelWinded\"),\nROBOT_ERROR_RIGHT_WHEEL(\"RightWheelWinded\"),\nROBOT_ERROR_WHEEL_WINDED(\"WheelWinded\"),\nROBOT_ERROR_60017(\"LeftWheelSuspend\"),\nROBOT_ERROR_60019(\"RightWheelSuspend\"),\nROBOT_ERROR_WHEEL_SUSPEND(\"WheelSuspend\"),\nROBOT_ERROR_LEFT_BRUSH(\"LeftSideBrushWinded\"),\nROBOT_ERROR_RIGHT_BRUSH(\"RightSideBrushWinded\"),\nROBOT_ERROR_SIDE_BRUSH(\"SideBrushWinded\"),\nROBOT_ERROR_60031(\"RollingBrushWinded\"),\nROBOT_ERROR_COLLISION(\"AbnormalCollisionSwitch\"),\nROBOT_ERROR_GROUND(\"AbnormalAntiFallingFunction\"),\nROBOT_ERROR_FAN(\"AbnormalFan\"),\nROBOT_ERROR_DUSTBOX2(\"NoDustBox\"),\nROBOT_ERROR_CHARGE_FOUND(\"CannotFindCharger\"),\nROBOT_ERROR_CHARGE_ERROR(\"BatteryMalfunction\"),\nROBOT_ERROR_LOWPOWER(\"LowPower\"),\nROBOT_ERROR_CHARGE(\"BottomNotOpenedWhenCharging\"),\nROBOT_ERROR_CAMERA_CONTACT_FAIL(\"CameraContactFailure\"),\nROBOT_ERROR_LIDAR_CONNECT_FAIL(\"LidarConnectFailure\"),\nROBOT_ERROR_TANK(\"AbnormalTank\"),\nROBOT_ERROR_SPEAKER(\"AbnormalSpeaker\"),\nROBOT_ERROR_NO_WATER_BOX(\"NoWaterBox\"),\nROBOT_ERROR_NO_WATER_MOP(\"NoWaterMop\"),\nROBOT_ERROR_WATER_BOX_EMPTY(\"WaterBoxEmpty\"),\nROBOT_ERROR_FLOATING(\"WheelSuspendInMidair\"),\nROBOT_ERROR_DUSTBOX(\"DustBoxFull\"),\nROBOT_ERROR_GUN_SHUA(\"BrushTangled\"),\nROBOT_ERROR_TRAPPED(\"RobotTrapped\"),\nROBOT_CHARGING_ERROR(\"ChargingError\"),\nROBOT_BOTTOM_NOT_OPENED_WHEN_CHARGING(\"BottomNotOpenedWhenCharging\"),\nROBOT_ERROR_60024(\"CodeDropped\"),\nROBOT_ERROR_60026(\"NoDustBox\"),\nROBOT_ERROR_60028(\"OperatingCurrentOverrun\"),\nROBOT_ERROR_60029(\"VacuumMotorTangled\"),\nROBOT_ERROR_60032(\"StuckWheels\"),\nROBOT_ERROR_STUCK(\"RobotStuck\"),\nROBOT_ERROR_BE_TRAPPED(\"RobotBeTrapped\"),\nROBOT_ERROR_COVER_STUCK(\"LaserHeadCoverStuck\"),\nROBOT_ERROR_LASER_HEAD(\"AbnormalLaserHead\"),\nROBOT_ERROR_WALL_BLOCKED(\"WallSensorBlocked\"),\nROBOT_ERROR_VIR_WALL_FORB(\"VirtualWallForbiddenZoneSettingError\"),\nROBOT_IS_OFF(\"off\"),\nROBOT_IS_ON(\"on\"),\nROBOT_MODE_COLOR(\"color\"),\nROBOT_MODE_WHITE(\"white\"),\nUPGRADING_DOWNLOAD_WIFI(\"upgrading_download_wifi\"),\nUPGRADING_INSTALL_WIFI(\"upgrading_install_wifi\"),\nUPGRADING_DOWNLOAD_VENDOR(\"upgrading_download_vendor\"),\nUPGRADING_INSTALL_VENDOR(\"upgrading_install_vendor\"),\nUPGRADING_DOWNLOAD_CHASSIS(\"upgrading_download_chassis\"),\nUPGRADING_INSTALL_CHASSIS(\"upgrading_install_chassis\"),\nUPGRADING_REBOOTING(\"upgrading_rebooting\"),\nUNREACHABLE(\"UnReachable\"),\nREACHABLE(\"Reached\"),\nROBOT_CTRL_START_UP(\"StartUp\"),\nROBOT_EDGE_DETECT(\"EdgeDetect\"),\nUNDISTURB_MODE(\"undisturb_mode\"),\nROBOT_CLEAR_MAP(\"ClearMap\"),\nROBOT_RELOCATION(\"Relocation\");\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/opravdin/weback-unofficial", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "weback-unofficial", "package_url": "https://pypi.org/project/weback-unofficial/", "platform": "", "project_url": "https://pypi.org/project/weback-unofficial/", "project_urls": {"Homepage": "https://github.com/opravdin/weback-unofficial"}, "release_url": "https://pypi.org/project/weback-unofficial/0.3.3/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Unofficial client for WeBack API", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Unofficial WeBack API Client</h1>\n<p>This client was developed using reverse engineering of the Android application and traffic analysis. There is no guarantee that this API will continue to work. However, it will be quite easy to fix in case of any errors/issues/changes as the WeBack servers are only responsible for gaining access to the API (Amazon Cognito, to be precise).</p>\n<h2>Usage</h2>\n<pre><code>pip3 install weback-unofficial\n</code></pre>\n<h3>Authentication</h3>\n<p>First of all, you need to choose whether you want to manage your session manually or with this package.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">weback_unofficial.client</span> <span class=\"kn\">import</span> <span class=\"n\">WebackApi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n\n<span class=\"c1\"># Method 1: make this package keep session itself</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">WebackApi</span><span class=\"p\">(</span><span class=\"s1\">'+7-1234567890'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;your_password&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_session</span><span class=\"p\">()</span> <span class=\"c1\"># Returns Amazon Session from boto3 package </span>\n\n\n<span class=\"c1\"># Method 2: manage by yourself</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">WebackApi</span><span class=\"p\">()</span>\n<span class=\"n\">weback_data</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"p\">(</span><span class=\"s1\">'+7-1234567890'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;your_password&gt;'</span><span class=\"p\">)</span> <span class=\"c1\"># Returns creds for auth in AWS</span>\n\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">weback_data</span><span class=\"p\">[</span><span class=\"s1\">'Region_Info'</span><span class=\"p\">]</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'cognito-identity'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Here you will receive session data &amp; expiration time (usually 1 day)</span>\n<span class=\"c1\"># Don't forget to keep it alive!</span>\n<span class=\"n\">aws_creds</span> <span class=\"o\">=</span>  <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_credentials_for_identity</span><span class=\"p\">(</span>\n    <span class=\"n\">IdentityId</span><span class=\"o\">=</span><span class=\"n\">weback_data</span><span class=\"p\">[</span><span class=\"s1\">'Identity_Id'</span><span class=\"p\">],</span> \n    <span class=\"n\">Logins</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"cognito-identity.amazonaws.com\"</span><span class=\"p\">:</span> <span class=\"n\">weback_data</span><span class=\"p\">[</span><span class=\"s1\">'Token'</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span>\n    <span class=\"n\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"n\">aws_creds</span><span class=\"p\">[</span><span class=\"s1\">'Credentials'</span><span class=\"p\">][</span><span class=\"s1\">'AccessKeyId'</span><span class=\"p\">],</span>\n    <span class=\"n\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"n\">aws_creds</span><span class=\"p\">[</span><span class=\"s1\">'Credentials'</span><span class=\"p\">][</span><span class=\"s1\">'SecretKey'</span><span class=\"p\">],</span>\n    <span class=\"n\">aws_session_token</span><span class=\"o\">=</span><span class=\"n\">aws_creds</span><span class=\"p\">[</span><span class=\"s1\">'Credentials'</span><span class=\"p\">][</span><span class=\"s1\">'SessionToken'</span><span class=\"p\">],</span>\n    <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"n\">region</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Manipulating with vacuum robot (example)</h3>\n<pre><span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">device_list</span><span class=\"p\">()</span>\n<span class=\"n\">device_name</span> <span class=\"o\">=</span> <span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'Thing_Name'</span><span class=\"p\">]</span>\n<span class=\"c1\"># Method 1: via helper functions</span>\n<span class=\"c1\"># Get device shadow status</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_device_shadow</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">)</span>\n<span class=\"c1\"># Get device description: https://docs.aws.amazon.com/iot/latest/apireference/API_DescribeThing.html</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_device_description</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">)</span>\n<span class=\"c1\"># Publish message for device</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">publish_device_msg</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"working_status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AutoClean\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Method 2: via Vacuum class</span>\n<span class=\"n\">vacuum</span> <span class=\"o\">=</span> <span class=\"n\">CleanRobot</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"n\">vacuum</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vacuum</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vacuum</span><span class=\"o\">.</span><span class=\"n\">current_mode</span><span class=\"p\">)</span>\n\n<span class=\"n\">vacuum</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">()</span>\n<span class=\"n\">vacuum</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"n\">vacuum</span><span class=\"o\">.</span><span class=\"n\">return_home</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Method 3: by yourself</span>\n<span class=\"c1\"># Get device shadow status</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'iot-data'</span><span class=\"p\">)</span>\n<span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_thing_shadow</span><span class=\"p\">(</span><span class=\"n\">thingName</span><span class=\"o\">=</span><span class=\"n\">device_name</span><span class=\"p\">)</span>\n<span class=\"n\">shadow</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">[</span><span class=\"s1\">'payload'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Attributes:\"</span><span class=\"p\">)</span>\n<span class=\"n\">pp</span> <span class=\"o\">=</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">shadow</span><span class=\"p\">[</span><span class=\"s1\">'state'</span><span class=\"p\">][</span><span class=\"s1\">'reported'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Start up vacuum cleaner</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'iot-data'</span><span class=\"p\">)</span>\n<span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"$aws/things/</span><span class=\"si\">{</span><span class=\"n\">device_name</span><span class=\"si\">}</span><span class=\"s2\">/shadow/update\"</span>\n<span class=\"c1\"># See more MQTT commands below</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'desired'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"working_status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AutoClean\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">qos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span>\n</pre>\n<h2>API usage cycle description</h2>\n<p>I implemented a minimum number of entry points to activate the vacuum cleaner robot. There are definitely other entry points, but they're either not necessary or I don't have devices to check them.</p>\n<ul>\n<li>Authorization by username and password. If you use the phone number as a login, provide it in the format {country code}-{number} (e.g. +7-1234567890 if you are from Russia). The server will return the data for access via Amazon Cognito.</li>\n<li>Authorization in Amazon API (<a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-identity.html#CognitoIdentity.Client.get_credentials_for_identity\" rel=\"nofollow\">boto3 method</a>)\n<ul>\n<li>Logins format is {\"cognito-identity.amazonaws.com\": weback_data['Token']}</li>\n</ul>\n</li>\n<li>Device list receiving (via WeBack's Amazon Lambda)</li>\n<li>Fetching device status via <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html\" rel=\"nofollow\">Shadow</a> (<a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iot-data.html#IoTDataPlane.Client.get_thing_shadow\" rel=\"nofollow\">boto3 method</a>)</li>\n<li>OR</li>\n<li>Controlling device via <a href=\"https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_Publish.html\" rel=\"nofollow\">MQTT publish</a> on f\"$aws/things/{device_name}/shadow/update\" (<a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iot-data.html#IoTDataPlane.Client.publish\" rel=\"nofollow\">boto3 method</a>)</li>\n</ul>\n<h2>API description</h2>\n<p>For each WeBack-related request the method of its call with or without this client is described.\nThis package also contains several helper methods to simplify the work with the API.</p>\n<h3>Authorization</h3>\n<pre><code>POST https://www.weback-login.com/WeBack/WeBack_Login_Ats_V3\nPayload: {\n    \"App_Version\":\"android_3.9.3\", # App version\n    \"Password\":\"a57da57da57da57da57da57da57da57d\", # Password MD5 hash\n    \"User_Account\":\"+7-1234567890\"\n}\n\nResponse example: {\n  \"Request_Result\": \"success\",\n  \"Identity_Pool_Id\": \"POOL_ID\",\n  \"Developer_Provider_Name\": \"Login_WeBack_AP_SOUTHEAST_1\",\n  \"End_Point\": \"ENDPOINT\",\n  \"Identity_Id\": \"ID\",\n  \"Token\": \"TOKEN\",\n  \"Token_Duration\": 86400,\n  \"Region_Info\": \"ap-southeast-1\",\n  \"Configuration_Page_URL\": \"URL\",\n  \"Discovery_Page_URL\": \"URL\",\n  \"Customer_Service_Card_URL\": \"URL\",\n  \"Thing_Register_URL\": \"URL\",\n  \"Thing_Register_URL_Signature\": \"URL\"\n}\n</code></pre>\n<h3>Fetching device list</h3>\n<pre><code>AWS Lambda name: Device_Manager_V2\nPayload: {\n    \"Device_Manager_Request\":\"query\",\n    \"Identity_Id\":\"&lt;Identity_Id&gt;\",\n    \"Region_Info\":\"&lt;Region_Info&gt;\"\n}\n\nResponse example: {\n    \"Device_Manager_Request\": \"query\",\n    \"Request_Result\": \"success\",\n    \"Request_Cotent\": [{\n        \"Thing_Name\": \"device-name-plus-mac-address\",\n        \"Thing_Nick_Name\": \"your-device-nick-name\",\n        \"Image_Url\": \"image-url\"\n    }]\n}\n</code></pre>\n<h2>MQTT Payload</h2>\n<p>You should provide payload like this</p>\n<pre><code>    payload = {\n        'state': {\n            'desired': {\n                \"&lt;Attribute&gt;\": \"&lt;Status&gt;\"\n            }\n        }\n    }\n</code></pre>\n<p>Here \"Attribute\" and \"Status\" is one of the payload values from the next sections. I'm not sure if this is suitable for all devices, but my robot vacuum cleaner reacts perfectly to them.</p>\n<h2>List of MQTT attributes</h2>\n<p>You can get Shadow status of your device and try to manipulate the parameters included in it (the keys are usually the same).<br>\nCurrently I have found just some of them: (related to my robot vacuum)</p>\n<ul>\n<li>fan_status\n<ul>\n<li>ROBOT_CTRL_SPEED_NORMAL(\"Normal\"),</li>\n<li>ROBOT_CTRL_SPEED_STRONG(\"Strong\"),</li>\n</ul>\n</li>\n<li>working_status - Try \"ROBOT_CTRL_\" ENUMs. I tested <em>Standby, BackCharging</em>, <em>MopClean</em> and <em>SmartClean</em>. Last one works both with mop and vacuum modes.</li>\n<li>water_tank_shift and water_level - Same parameters (apparently), but the specific attribute depends on the robot. These values are suitable for \"water_level\" in my case:\n<ul>\n<li>ROBOT_WATER_TANK_LOW(\"Low\"),</li>\n<li>ROBOT_WATER_TANK_DEFAULT(\"Default\"),</li>\n<li>ROBOT_WATER_TANK_HIGH(\"High\")</li>\n</ul>\n</li>\n</ul>\n<h2>List of all MQTT messages</h2>\n<p>Grabbed from ENUMs in code.</p>\n<pre><code>ROBOT_CTRL_FRONT(\"MoveFront\"),\nROBOT_CTRL_BACK(\"MoveBack\"),\nROBOT_CTRL_LEFT(\"MoveLeft\"),\nROBOT_CTRL_RIGHT(\"MoveRight\"),\nROBOT_CTRL_STOP(\"MoveStop\"),\nROBOT_NEW_CTRL_FRONT(\"move_front\"),\nROBOT_NEW_CTRL_BACK(\"move_back\"),\nROBOT_NEW_CTRL_LEFT(\"move_left\"),\nROBOT_NEW_CTRL_RIGHT(\"move_right\"),\nROBOT_NEW_CTRL_STOP(\"move_stop\"),\nROBOT_CTRL_CLEAN_STOP(\"Standby\"),\nROBOT_CTRL_CLEAN_CHARGE(\"BackCharging\"),\nROBOT_CTRL_CLEAN_STOP2(\"Stop\"),\nROBOT_CTRL_MODE_SPOT(\"SpotClean\"),\nROBOT_CTRL_MODE_PLAN(\"PlanClean\"),\nROBOT_CTRL_MODE_ROOM(\"RoomClean\"),\nROBOT_CTRL_MODE_AUTO(\"AutoClean\"),\nROBOT_CTRL_MODE_EDGE(\"EdgeClean\"),\nROBOT_CTRL_MODE_FIXED(\"StrongClean\"),\nROBOT_CTRL_MODE_Z(\"ZmodeClean\"),\nROBOT_CTRL_MODE_MOPPING(\"MopClean\"),\nROBOT_CTRL_VACUUM(\"VacuumClean\"),\nPLANNING_RECT(\"PlanningRect\"),\nROBOT_CTRL_MODE_PLAN2(\"SmartClean\"),\nROBOT_CTRL_SPEED_NORMAL(\"Normal\"),\nROBOT_CTRL_SPEED_STRONG(\"Strong\"),\nROBOT_CTRL_SPEED_STOP(\"Pause\"),\nROBOT_CTRL_SPEED_SOUND_STOP(\"Quite\"),\nROBOT_CTRL_SPEED_SOUND_STOP_2(\"Quiet\"),\nROBOT_CTRL_SPEED_MAX(\"Max\"),\nROBOT_HAS_NONE_FAN(\"None\"),\nROBOT_WORK_STATUS_STOP(\"Hibernating\"),\nROBOT_WORK_STATUS_STANDBY(\"Standby\"),\nROBOT_LOCATION_ALARM(\"LocationAlarm\"),\nPLANNING_LOCATION(\"PlanningLocation\"),\nROBOT_WORK_STATUS_CHARGING_3(\"Charging\"),\nROBOT_WORK_STATUS_WORKING(\"Cleaning\"),\nROBOT_WORK_STATUS_WORK_OVER(\"Cleandone\"),\nROBOT_WORK_STATUS_GO_CHARGE(\"Backcharging\"),\nROBOT_WORK_STATUS_CHARGING(\"Pilecharging\"),\nROBOT_WORK_STATUS_CHARGE_OVER(\"Chargedone\"),\nROBOT_WORK_STATUS_LOWPOWER(\"Lowpower\"),\nROBOT_WORK_STATUS_ERROR(\"Malfunction\"),\nROBOT_WORK_STATUS_CHARGING2(\"DirCharging\"),\nROBOT_WORK_STATUS_CTRL(\"DirectionControl\"),\nROBOT_WATER_TANK_OFF(BucketVersioningConfiguration.OFF),\nROBOT_WATER_TANK_LOW(\"Low\"),\nROBOT_WATER_TANK_DEFAULT(\"Default\"),\nROBOT_WATER_TANK_HIGH(\"High\"),\nROBOT_WATER_TANK_LOW_TAB(\"Slow\"),\nROBOT_WATER_TANK_DEFAULT_TAB(\"Normal\"),\nROBOT_WATER_TANK_HIGH_TAB(\"Fast\"),\nROBOT_HAS_NONE_TANK(\"None\"),\nROBOT_VOICE_CTRL_ON(\"on\"),\nROBOT_VOICE_CTRL_OFF(\"off\"),\nROBOT_CAMERA_UP(\"Up\"),\nROBOT_CAMERA_DOWN(\"Down\"),\nROBOT_CAMERA_LEFT(\"Left\"),\nROBOT_CAMERA_RIGHT(\"Right\"),\nROBOT_POWER_AWAKE(\"PowerAwake\"),\nROBOT_POWER_SLEEP(\"PowerSleep\"),\nROBOT_NO_CHATTING(\"NoChatting\"),\nROBOT_AV_CHATTING(\"AVChatting\"),\nROBOT_VIDEO_CHATTING(\"VideoChatting\"),\nROBOT_AUDIO_CHATTING(\"AudioChatting\"),\nROBOT_SPEED_LOW(\"Low\"),\nROBOT_SPEED_HIGH(\"High\"),\nROBOT_ERROR_NO(\"NoError\"),\nROBOT_ERROR_UNKNOWN(\"UnknownError\"),\nROBOT_ERROR_LEFT_WHEEL(\"LeftWheelWinded\"),\nROBOT_ERROR_RIGHT_WHEEL(\"RightWheelWinded\"),\nROBOT_ERROR_WHEEL_WINDED(\"WheelWinded\"),\nROBOT_ERROR_60017(\"LeftWheelSuspend\"),\nROBOT_ERROR_60019(\"RightWheelSuspend\"),\nROBOT_ERROR_WHEEL_SUSPEND(\"WheelSuspend\"),\nROBOT_ERROR_LEFT_BRUSH(\"LeftSideBrushWinded\"),\nROBOT_ERROR_RIGHT_BRUSH(\"RightSideBrushWinded\"),\nROBOT_ERROR_SIDE_BRUSH(\"SideBrushWinded\"),\nROBOT_ERROR_60031(\"RollingBrushWinded\"),\nROBOT_ERROR_COLLISION(\"AbnormalCollisionSwitch\"),\nROBOT_ERROR_GROUND(\"AbnormalAntiFallingFunction\"),\nROBOT_ERROR_FAN(\"AbnormalFan\"),\nROBOT_ERROR_DUSTBOX2(\"NoDustBox\"),\nROBOT_ERROR_CHARGE_FOUND(\"CannotFindCharger\"),\nROBOT_ERROR_CHARGE_ERROR(\"BatteryMalfunction\"),\nROBOT_ERROR_LOWPOWER(\"LowPower\"),\nROBOT_ERROR_CHARGE(\"BottomNotOpenedWhenCharging\"),\nROBOT_ERROR_CAMERA_CONTACT_FAIL(\"CameraContactFailure\"),\nROBOT_ERROR_LIDAR_CONNECT_FAIL(\"LidarConnectFailure\"),\nROBOT_ERROR_TANK(\"AbnormalTank\"),\nROBOT_ERROR_SPEAKER(\"AbnormalSpeaker\"),\nROBOT_ERROR_NO_WATER_BOX(\"NoWaterBox\"),\nROBOT_ERROR_NO_WATER_MOP(\"NoWaterMop\"),\nROBOT_ERROR_WATER_BOX_EMPTY(\"WaterBoxEmpty\"),\nROBOT_ERROR_FLOATING(\"WheelSuspendInMidair\"),\nROBOT_ERROR_DUSTBOX(\"DustBoxFull\"),\nROBOT_ERROR_GUN_SHUA(\"BrushTangled\"),\nROBOT_ERROR_TRAPPED(\"RobotTrapped\"),\nROBOT_CHARGING_ERROR(\"ChargingError\"),\nROBOT_BOTTOM_NOT_OPENED_WHEN_CHARGING(\"BottomNotOpenedWhenCharging\"),\nROBOT_ERROR_60024(\"CodeDropped\"),\nROBOT_ERROR_60026(\"NoDustBox\"),\nROBOT_ERROR_60028(\"OperatingCurrentOverrun\"),\nROBOT_ERROR_60029(\"VacuumMotorTangled\"),\nROBOT_ERROR_60032(\"StuckWheels\"),\nROBOT_ERROR_STUCK(\"RobotStuck\"),\nROBOT_ERROR_BE_TRAPPED(\"RobotBeTrapped\"),\nROBOT_ERROR_COVER_STUCK(\"LaserHeadCoverStuck\"),\nROBOT_ERROR_LASER_HEAD(\"AbnormalLaserHead\"),\nROBOT_ERROR_WALL_BLOCKED(\"WallSensorBlocked\"),\nROBOT_ERROR_VIR_WALL_FORB(\"VirtualWallForbiddenZoneSettingError\"),\nROBOT_IS_OFF(\"off\"),\nROBOT_IS_ON(\"on\"),\nROBOT_MODE_COLOR(\"color\"),\nROBOT_MODE_WHITE(\"white\"),\nUPGRADING_DOWNLOAD_WIFI(\"upgrading_download_wifi\"),\nUPGRADING_INSTALL_WIFI(\"upgrading_install_wifi\"),\nUPGRADING_DOWNLOAD_VENDOR(\"upgrading_download_vendor\"),\nUPGRADING_INSTALL_VENDOR(\"upgrading_install_vendor\"),\nUPGRADING_DOWNLOAD_CHASSIS(\"upgrading_download_chassis\"),\nUPGRADING_INSTALL_CHASSIS(\"upgrading_install_chassis\"),\nUPGRADING_REBOOTING(\"upgrading_rebooting\"),\nUNREACHABLE(\"UnReachable\"),\nREACHABLE(\"Reached\"),\nROBOT_CTRL_START_UP(\"StartUp\"),\nROBOT_EDGE_DETECT(\"EdgeDetect\"),\nUNDISTURB_MODE(\"undisturb_mode\"),\nROBOT_CLEAR_MAP(\"ClearMap\"),\nROBOT_RELOCATION(\"Relocation\");\n</code></pre>\n\n          </div>"}, "last_serial": 7004760, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2445fc39cc2fc75d95c3af4c57e682e2", "sha256": "fc5ffa69280c440e48d70c3bddc711e5016dd887c4d48804cd11e9e567b1b4d6"}, "downloads": -1, "filename": "weback_unofficial-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2445fc39cc2fc75d95c3af4c57e682e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8639, "upload_time": "2020-04-11T01:17:56", "upload_time_iso_8601": "2020-04-11T01:17:56.950159Z", "url": "https://files.pythonhosted.org/packages/c5/3a/c22c77ba20d7a4682d569771604c732d9abf8210e89eb19eaebe584da253/weback_unofficial-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d044382fba43b4fdb94c5e67e0e5403c", "sha256": "9d4b107fc042ec97d73f2b5209173c0bce8dbc4cd314d86477fd905ad7fbe6c9"}, "downloads": -1, "filename": "weback-unofficial-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d044382fba43b4fdb94c5e67e0e5403c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11642, "upload_time": "2020-04-11T01:17:59", "upload_time_iso_8601": "2020-04-11T01:17:59.280856Z", "url": "https://files.pythonhosted.org/packages/47/30/6d6573d680920fb39556a78a669c72457fe15cbac3d264090d864e52edce/weback-unofficial-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "883dcccd35cb255a5c153e879a92ee36", "sha256": "2460c8eff53c861db94d9525dcb00e2dc57cffdda9ba8b82c9983c56993ba129"}, "downloads": -1, "filename": "weback_unofficial-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "883dcccd35cb255a5c153e879a92ee36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9088, "upload_time": "2020-04-11T03:41:30", "upload_time_iso_8601": "2020-04-11T03:41:30.768769Z", "url": "https://files.pythonhosted.org/packages/6b/15/23b2fffd0dcabacb47f0811e6633bcefab85739a3931ff9923e06544c03c/weback_unofficial-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cc25cd22a96e3d3a87b6180e9cff012", "sha256": "bf5bac9c02d66ef482ece98a9515c3bebebed05e4a1a6db03c38e720a4273a82"}, "downloads": -1, "filename": "weback-unofficial-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3cc25cd22a96e3d3a87b6180e9cff012", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 12156, "upload_time": "2020-04-11T03:41:32", "upload_time_iso_8601": "2020-04-11T03:41:32.107512Z", "url": "https://files.pythonhosted.org/packages/65/09/93acc88df845d81bfb688843b746cb39cd89e3df7249740475751bb7d13f/weback-unofficial-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f5e867afb1145214feaee3249466c040", "sha256": "1e315cf4ea93d9f7a26e8232031f170d591099e979045c459c37cf578daa9634"}, "downloads": -1, "filename": "weback_unofficial-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5e867afb1145214feaee3249466c040", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10652, "upload_time": "2020-04-11T05:43:58", "upload_time_iso_8601": "2020-04-11T05:43:58.357676Z", "url": "https://files.pythonhosted.org/packages/b6/c4/e8e38c52b37c2b5c506937e43699e6b44263615e5d002717f9be909dc8a7/weback_unofficial-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8df1a563285bae372e58642860de63e5", "sha256": "40d5ae9847d5579fcfc6a62a18e55bc965feca061fe0dea74f5e496e9c4aed8e"}, "downloads": -1, "filename": "weback-unofficial-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8df1a563285bae372e58642860de63e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13414, "upload_time": "2020-04-11T05:44:00", "upload_time_iso_8601": "2020-04-11T05:44:00.440692Z", "url": "https://files.pythonhosted.org/packages/e6/bb/b98357505ce49fcf689197b0e4ce3aeb2d8ddf0b959522a83f6e20ed74cc/weback-unofficial-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2b14313bfa9f4cad04edd60f7f0c4c6e", "sha256": "14701e72b7b61dca45094e1dd921fa0e9628dd300e1fe408816680b055c1f6c4"}, "downloads": -1, "filename": "weback_unofficial-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2b14313bfa9f4cad04edd60f7f0c4c6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10688, "upload_time": "2020-04-11T13:30:41", "upload_time_iso_8601": "2020-04-11T13:30:41.553398Z", "url": "https://files.pythonhosted.org/packages/45/09/a703b0d4d3c2888ec1feb9e8faeba45caa62d543b07f94dbe96659f4e017/weback_unofficial-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "616ecd41736a8e230290e4319b6490bd", "sha256": "546076908be016a769c00c570b22ad3eade51b575b29edfd6598d3f1e33bcc08"}, "downloads": -1, "filename": "weback-unofficial-0.3.1.tar.gz", "has_sig": false, "md5_digest": "616ecd41736a8e230290e4319b6490bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13481, "upload_time": "2020-04-11T13:30:43", "upload_time_iso_8601": "2020-04-11T13:30:43.435279Z", "url": "https://files.pythonhosted.org/packages/1b/32/cdb04dad2b9b854997e4f17d13e225f3d8326ed604d376d18817641e05a1/weback-unofficial-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "572310716d6295cf9052b6a6133efe27", "sha256": "1f7c2fd36416bdb4cab57c37d742870926dbf36113405aff1d72e65c6d0fc2e3"}, "downloads": -1, "filename": "weback_unofficial-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "572310716d6295cf9052b6a6133efe27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10820, "upload_time": "2020-04-11T17:13:10", "upload_time_iso_8601": "2020-04-11T17:13:10.176933Z", "url": "https://files.pythonhosted.org/packages/be/1d/d453c4bb67c0b506d9c5e81f64292948019560a37bbb9ac8beeacce6e35b/weback_unofficial-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0bc19ea1f669e4d90d5d6d837525c70", "sha256": "6df7907bca9b39d311dfd1acaea1d209860603ba7d7af4b8c541009f1146b952"}, "downloads": -1, "filename": "weback-unofficial-0.3.2.tar.gz", "has_sig": false, "md5_digest": "d0bc19ea1f669e4d90d5d6d837525c70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13588, "upload_time": "2020-04-11T17:13:11", "upload_time_iso_8601": "2020-04-11T17:13:11.864297Z", "url": "https://files.pythonhosted.org/packages/f7/d3/afed6019a8f619e597373de00323ab47e5febf4afd05805b8ce3363263e3/weback-unofficial-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "4df86bc58b32e754caaf567928366668", "sha256": "8eb37c5a3690b7a94fd6211cf7fb13fa0c24f36bfab811888b0f6be0a7e8d186"}, "downloads": -1, "filename": "weback_unofficial-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4df86bc58b32e754caaf567928366668", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10833, "upload_time": "2020-04-12T14:24:16", "upload_time_iso_8601": "2020-04-12T14:24:16.222510Z", "url": "https://files.pythonhosted.org/packages/b4/6f/08fc256e26090a9415857995a682bdc18667365af533d7572ee750438c14/weback_unofficial-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad958f285240ccc0e84c06e06d7694ef", "sha256": "311d8e6ffbfb43c8dd5756c7752833a089736d06f2798c7d4cd0de5a1bd3bc79"}, "downloads": -1, "filename": "weback-unofficial-0.3.3.tar.gz", "has_sig": false, "md5_digest": "ad958f285240ccc0e84c06e06d7694ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13609, "upload_time": "2020-04-12T14:24:19", "upload_time_iso_8601": "2020-04-12T14:24:19.298810Z", "url": "https://files.pythonhosted.org/packages/c4/e2/e2b6661bdfea316ec41c8ea170ad0bffba7c17bc9ccb2844fc78224240f3/weback-unofficial-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4df86bc58b32e754caaf567928366668", "sha256": "8eb37c5a3690b7a94fd6211cf7fb13fa0c24f36bfab811888b0f6be0a7e8d186"}, "downloads": -1, "filename": "weback_unofficial-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4df86bc58b32e754caaf567928366668", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10833, "upload_time": "2020-04-12T14:24:16", "upload_time_iso_8601": "2020-04-12T14:24:16.222510Z", "url": "https://files.pythonhosted.org/packages/b4/6f/08fc256e26090a9415857995a682bdc18667365af533d7572ee750438c14/weback_unofficial-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad958f285240ccc0e84c06e06d7694ef", "sha256": "311d8e6ffbfb43c8dd5756c7752833a089736d06f2798c7d4cd0de5a1bd3bc79"}, "downloads": -1, "filename": "weback-unofficial-0.3.3.tar.gz", "has_sig": false, "md5_digest": "ad958f285240ccc0e84c06e06d7694ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13609, "upload_time": "2020-04-12T14:24:19", "upload_time_iso_8601": "2020-04-12T14:24:19.298810Z", "url": "https://files.pythonhosted.org/packages/c4/e2/e2b6661bdfea316ec41c8ea170ad0bffba7c17bc9ccb2844fc78224240f3/weback-unofficial-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:30 2020"}