{"info": {"author": "Gabe Appleton", "author_email": "gabe@gabeappleton.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: JavaScript", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Predecessor\n===========\n\nOverview\n--------\n\nThis set of libraries is intended to provide useful classes to inherit\nfrom, in a way that is cross compatible between multiple languages. A\nversion of this library is currently available in:\n\n-  Python (2 or 3)\n-  Javascript\n\nThe libraries currently provide:\n\n-  singleton objects\n-  serializable objects\n\nSingleton\n---------\n\nThe singleton class provides a way to ensure you only have one instance\nof a class. For instance:\n\n.. code:: python\n\n    from predecessor import Singleton\n\n\n    class Example(Singleton):\n        def __init__(self, foo, bar):\n            self.foo = foo\n            self.bar = bar\n\n\n    a = Example(3, 8)\n    b = Example(2, 9)\n    a is b  # returns True\n    a.foo == b.foo == 3  # returns True\n\nOr equivalently in Javascript:\n\n.. code:: javascript\n\n    const Singleton = require('predecessor').Singleton;\n\n    class Example extends Singleton {\n        constructor(foo, bar)   {\n            this.foo = foo;\n            this.bar = bar;\n        }\n    }\n\n    let a = new Example(3, 8);\n    let b = new Example(2, 9);\n    a === b;  // returns true\n    a.foo === 3;  // returns true\n    b.foo === 3;  // returns true\n\nSerializable\n------------\n\nThe singleton class provides a way to serialize a class without needing\nto care about what form the resulting blob takes. If a compatible class\ndefinition is available in all supported languages, it should be\ndeserializable in all supported languages.\n\nThe Basic Case\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from predecessor import Serializable\n\n\n    class Example(Serializable):\n        def __init__(self, foo, bar):  # Note that keyword args are not supported\n            self.foo = foo\n            self.bar = bar\n\n        def serialized(self):\n            return super(Example, self).serialized(self.foo, self.bar)\n\n\n    a = Example(3, 8)\n    b = Example.deserialize(a.serialized())\n    a.foo == b.foo == 3  # returns True\n    a.bar == b.bar == 8  # returns True\n\nOr equivalently in Javascript:\n\n.. code:: javascript\n\n    const Serializable = require('predecessor').Serializable;\n\n    class Example extends Serializable {\n        constructor(foo, bar)   {\n            this.foo = foo;\n            this.bar = bar;\n        }\n\n        serialized()    {\n            return super.serialized(this.foo, this.bar);\n        }\n    }\n\n    let a = new Example(3, 8);\n    let b = Example.deserialize(a.serialized());\n    a.foo === 3;  // returns true\n    b.foo === 3;  // returns true\n    a.foo === 8;  // returns true\n    b.foo === 8;  // returns true\n\nImplied Serialization\n~~~~~~~~~~~~~~~~~~~~~\n\nIn both languages, you can also use implied serialization. This looks\nlike:\n\n.. code:: python\n\n    class Example(Serializable):\n        __slots__ = ('a', 'b', 'c')\n\n        def __init__(self, a, b, c):\n            self.a = a\n            self.b = b\n            self.c = c\n\n.. code:: javascript\n\n    class Example extends Serializable  {\n        constructor(a, b, c)    {\n            super();\n            this._slots = ['a', 'b', 'c'];\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n    }\n\nAdvanced Recombination\n~~~~~~~~~~~~~~~~~~~~~~\n\nIn both languages you can do data processing before feeding things into\nyour constructor.\n\n.. code:: python\n\n    class Example(Serializable):\n        def __init__(self, a, b, c):\n            self.a = a\n            self.b = b\n            self.c = c\n\n        def serialized(self):\n            return super(Example, self).serialized(self.a, self.b)\n\n        @classmethod\n        def recombine(cls, a, b):\n            return cls(a, b, a+b)\n\n.. code:: javascript\n\n    class Example extends Serializable  {\n        constructor(a, b, c)    {\n            super();\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n\n        serialized()    {\n            return super.serialized(this.a, this.b);\n        }\n\n        static recombine(a, b)  {\n            return new this(a, b, a+b);\n        }\n    }\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/gappleto97/predecessor", "keywords": "", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "predecessor", "package_url": "https://pypi.org/project/predecessor/", "platform": "", "project_url": "https://pypi.org/project/predecessor/", "project_urls": {"Homepage": "https://gitlab.com/gappleto97/predecessor"}, "release_url": "https://pypi.org/project/predecessor/0.0.3/", "requires_dist": ["cryptography; extra == 'crypto'", "u-msgpack-python; extra == 'serialize'"], "requires_python": "", "summary": "A set of useful python classes to inherit from", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>This set of libraries is intended to provide useful classes to inherit\nfrom, in a way that is cross compatible between multiple languages. A\nversion of this library is currently available in:</p>\n<ul>\n<li>Python (2 or 3)</li>\n<li>Javascript</li>\n</ul>\n<p>The libraries currently provide:</p>\n<ul>\n<li>singleton objects</li>\n<li>serializable objects</li>\n</ul>\n</div>\n<div id=\"singleton\">\n<h2>Singleton</h2>\n<p>The singleton class provides a way to ensure you only have one instance\nof a class. For instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">predecessor</span> <span class=\"kn\">import</span> <span class=\"n\">Singleton</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">Singleton</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">bar</span>\n\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">b</span>  <span class=\"c1\"># returns True</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>  <span class=\"c1\"># returns True</span>\n</pre>\n<p>Or equivalently in Javascript:</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">Singleton</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'predecessor'</span><span class=\"p\">).</span><span class=\"nx\">Singleton</span><span class=\"p\">;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">Example</span> <span class=\"kr\">extends</span> <span class=\"nx\">Singleton</span> <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">)</span>   <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Example</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Example</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">);</span>\n<span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"nx\">b</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true\n</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">===</span> <span class=\"mi\">3</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true\n</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">===</span> <span class=\"mi\">3</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true</span>\n</pre>\n</div>\n<div id=\"serializable\">\n<h2>Serializable</h2>\n<p>The singleton class provides a way to serialize a class without needing\nto care about what form the resulting blob takes. If a compatible class\ndefinition is available in all supported languages, it should be\ndeserializable in all supported languages.</p>\n<div id=\"the-basic-case\">\n<h3>The Basic Case</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">predecessor</span> <span class=\"kn\">import</span> <span class=\"n\">Serializable</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">Serializable</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>  <span class=\"c1\"># Note that keyword args are not supported</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">bar</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialized</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Example</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">serialized</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Example</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">serialized</span><span class=\"p\">())</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>  <span class=\"c1\"># returns True</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">==</span> <span class=\"mi\">8</span>  <span class=\"c1\"># returns True</span>\n</pre>\n<p>Or equivalently in Javascript:</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">Serializable</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'predecessor'</span><span class=\"p\">).</span><span class=\"nx\">Serializable</span><span class=\"p\">;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">Example</span> <span class=\"kr\">extends</span> <span class=\"nx\">Serializable</span> <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">)</span>   <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">serialized</span><span class=\"p\">()</span>    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kr\">super</span><span class=\"p\">.</span><span class=\"nx\">serialized</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Example</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">Example</span><span class=\"p\">.</span><span class=\"nx\">deserialize</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">serialized</span><span class=\"p\">());</span>\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">===</span> <span class=\"mi\">3</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true\n</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">===</span> <span class=\"mi\">3</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true\n</span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">===</span> <span class=\"mi\">8</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true\n</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">===</span> <span class=\"mi\">8</span><span class=\"p\">;</span>  <span class=\"c1\">// returns true</span>\n</pre>\n</div>\n<div id=\"implied-serialization\">\n<h3>Implied Serialization</h3>\n<p>In both languages, you can also use implied serialization. This looks\nlike:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">Serializable</span><span class=\"p\">):</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n</pre>\n<pre><span class=\"kr\">class</span> <span class=\"nx\">Example</span> <span class=\"kr\">extends</span> <span class=\"nx\">Serializable</span>  <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span>    <span class=\"p\">{</span>\n        <span class=\"kr\">super</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_slots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">];</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">c</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"advanced-recombination\">\n<h3>Advanced Recombination</h3>\n<p>In both languages you can do data processing before feeding things into\nyour constructor.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">Serializable</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialized</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Example</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">serialized</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">recombine</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kr\">class</span> <span class=\"nx\">Example</span> <span class=\"kr\">extends</span> <span class=\"nx\">Serializable</span>  <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span>    <span class=\"p\">{</span>\n        <span class=\"kr\">super</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">c</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">serialized</span><span class=\"p\">()</span>    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kr\">super</span><span class=\"p\">.</span><span class=\"nx\">serialized</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">static</span> <span class=\"nx\">recombine</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"o\">+</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3855968, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8c893bbd7bc4aa4ffed11e9ecb30b0cd", "sha256": "f4fed84ef749dd1949525fe6484a5abeb3734d68bdfdb4b5d0db214256ed90eb"}, "downloads": -1, "filename": "predecessor-0.0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8c893bbd7bc4aa4ffed11e9ecb30b0cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 2340, "upload_time": "2018-05-02T22:33:56", "upload_time_iso_8601": "2018-05-02T22:33:56.417635Z", "url": "https://files.pythonhosted.org/packages/79/ea/d05e6308b6f983fd8ba82448ffe0b1937eca5ecc439d8a72aaf45413fbfe/predecessor-0.0.1-py2.py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "20dcfc79fc3aa60ec736a253dc56def2", "sha256": "762988c0ca9455a782283d47e800c523a149f1e0754ec17458c88f5b3ca75618"}, "downloads": -1, "filename": "predecessor-0.0.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "20dcfc79fc3aa60ec736a253dc56def2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1808, "upload_time": "2018-05-05T05:35:52", "upload_time_iso_8601": "2018-05-05T05:35:52.378965Z", "url": "https://files.pythonhosted.org/packages/d0/a4/9628269cd1d19214e7a86436bf4f4648f3bbeeb64738e3ff4650c43c3d09/predecessor-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f2e065d7a173dbc2be4ef8031cdaa0f", "sha256": "85d0cce4bf5e0bc2812d88e93f0d2ad959617533028788679b6c3fe2d0e018c8"}, "downloads": -1, "filename": "predecessor-0.0.2.tar.gz", "has_sig": true, "md5_digest": "2f2e065d7a173dbc2be4ef8031cdaa0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1936, "upload_time": "2018-05-05T05:35:57", "upload_time_iso_8601": "2018-05-05T05:35:57.879873Z", "url": "https://files.pythonhosted.org/packages/f0/e2/7eb9d6569ea2ac7bd2f8a0db907d233ec1baf91466017dc16b97527813bb/predecessor-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3d9879c61268ec46246b04e949720c8e", "sha256": "7c8def70350fa26bb5f3ceb049942d6eecc902f1c0fc7b057720c2efb02e8022"}, "downloads": -1, "filename": "predecessor-0.0.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3d9879c61268ec46246b04e949720c8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4404, "upload_time": "2018-05-12T04:13:35", "upload_time_iso_8601": "2018-05-12T04:13:35.572300Z", "url": "https://files.pythonhosted.org/packages/21/8f/7c45e1f57cd9e0d806f2df31b3d0104a890ab5430d9a6bea9d37c4554d80/predecessor-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f91a9352ad866c6a655d1d599b67c91f", "sha256": "64d5681481d56765145c0c6afde07302405dca2d34acdd71650928890a8f73b1"}, "downloads": -1, "filename": "predecessor-0.0.3.tar.gz", "has_sig": true, "md5_digest": "f91a9352ad866c6a655d1d599b67c91f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2810, "upload_time": "2018-05-12T04:13:39", "upload_time_iso_8601": "2018-05-12T04:13:39.492757Z", "url": "https://files.pythonhosted.org/packages/58/38/79b3aa3eaa4caa654d0da932613825121a6266ba21d1ea32784a0d58e318/predecessor-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d9879c61268ec46246b04e949720c8e", "sha256": "7c8def70350fa26bb5f3ceb049942d6eecc902f1c0fc7b057720c2efb02e8022"}, "downloads": -1, "filename": "predecessor-0.0.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3d9879c61268ec46246b04e949720c8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4404, "upload_time": "2018-05-12T04:13:35", "upload_time_iso_8601": "2018-05-12T04:13:35.572300Z", "url": "https://files.pythonhosted.org/packages/21/8f/7c45e1f57cd9e0d806f2df31b3d0104a890ab5430d9a6bea9d37c4554d80/predecessor-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f91a9352ad866c6a655d1d599b67c91f", "sha256": "64d5681481d56765145c0c6afde07302405dca2d34acdd71650928890a8f73b1"}, "downloads": -1, "filename": "predecessor-0.0.3.tar.gz", "has_sig": true, "md5_digest": "f91a9352ad866c6a655d1d599b67c91f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2810, "upload_time": "2018-05-12T04:13:39", "upload_time_iso_8601": "2018-05-12T04:13:39.492757Z", "url": "https://files.pythonhosted.org/packages/58/38/79b3aa3eaa4caa654d0da932613825121a6266ba21d1ea32784a0d58e318/predecessor-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:02 2020"}