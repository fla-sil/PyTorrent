{"info": {"author": "Christian Werling", "author_email": "cwerling@posteo.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6", "Topic :: Security"], "description": "\n\n# PSPTool\n\nPSPTool is a Swiss Army knife for dealing with firmware of the **AMD Secure Processor** (formerly known as *Platform Security Processor* or **PSP**). It locates AMD firmware inside  **UEFI images** as part of BIOS updates targeting **AMD platforms**. \n\nIt is based on reverse-engineering efforts of AMD's **proprietary filesystem** used to **pack firmware blobs** into **UEFI Firmware Images**. These are usually 16MB in size and can be conveniently parsed by [UEFITool](https://github.com/LongSoft/UEFITool). However, all binary blobs by AMD are located in padding volumes unparsable by UEFITool.\n\nPSPTool favourably works with UEFI images as obtained through BIOS updates.\n\n## Installation\n\nYou can install PSPTool either through **pip**,\n\n```\npip install psptool\n```\n\nor from **GitHub**:\n\n```\ngit clone https://github.com/PSPReverse/PSPTool\ncd PSPTool\nsudo python3 setup.py install\n```\n\n## CLI Usage\n\nPSPTool offers a range of features from the **command line**.\n\n**Example 1:** *List all firmware entries of a given BIOS ROM.*\n\n```\n$ psptool Lenovo_Thinkpad_T495_r12uj35wd.iso\n\n+-----------+----------+---------+-------+---------------------+\n| Directory |   Addr   |   Type  | Magic | Secondary Directory |\n+-----------+----------+---------+-------+---------------------+\n|     0     | 0x28bb20 | PSP_NEW |  $PSP |       0x138000      |\n+-----------+----------+---------+-------+---------------------+\n+---+-------+----------+---------+---------------------------------+-------+------------+------------------------------------+\n|   | Entry |  Address |    Size |                            Type | Magic |    Version |                               Info |\n+---+-------+----------+---------+---------------------------------+-------+------------+------------------------------------+\n|   |     0 | 0x28bf20 |   0x240 |              AMD_PUBLIC_KEY~0x0 |  60BB |            |                                    |\n|   |     1 | 0x382f20 |  0xc300 |          PSP_FW_BOOT_LOADER~0x1 |  $PS1 |   0.8.2.59 |            signed(60BB), encrypted |\n|   |     2 | 0x28c220 |  0xb300 | PSP_FW_RECOVERY_BOOT_LOADER~0x3 |  $PS1 |   0.8.2.59 |            signed(60BB), encrypted |\n|   |     3 | 0x297520 | 0x22770 |                           0x208 |       |            |                                    |\n|   |     4 | 0x2b9d20 |  0x71b0 |                           0x212 |       |            |                                    |\n|   |     5 | 0x2c0f20 | 0x20830 |       PSP_SMU_FN_FIRMWARE~0x108 |       |            |                                    |\n|   |     6 | 0x2e1820 |  0x5010 |        !SMU_OFF_CHIP_FW_3~0x112 |       |            |                                    |\n|   |     7 | 0x2e6920 |    0x10 |               WRAPPED_IKEK~0x21 |       |            |                                    |\n|   |     8 | 0x2e6b20 |  0x1000 |               TOKEN_UNLOCK~0x22 |       |            |                                    |\n|   |     9 | 0x2e7b20 |  0x1860 |                           0x224 |  $PS1 |   A.2.3.27 |            signed(60BB), encrypted |\n|   |    10 | 0x2e9420 |  0x1760 |                           0x124 |  $PS1 |   A.2.3.1A |            signed(60BB), encrypted |\n|   |    11 | 0x2eac20 |   0xdd0 |                       ABL0~0x30 |  AW0B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    12 | 0x2eba20 |  0xcbb0 |                       ABL1~0x31 |  AW1B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    13 | 0x2f8620 |  0x8dc0 |                       ABL2~0x32 |  AW2B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    14 | 0x301420 |  0xbb90 |                       ABL3~0x33 |  AW3B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    15 | 0x30d020 |  0xcca0 |                       ABL4~0x34 |  AW4B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    16 | 0x319d20 |  0xc910 |                       ABL5~0x35 |  AW5B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    17 | 0x326720 |  0x9ef0 |                       ABL6~0x36 |  AW6B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    18 | 0x330620 |  0xc710 |                       ABL7~0x37 |  AW7B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    19 | 0x382b20 |     0x0 |   !PL2_SECONDARY_DIRECTORY~0x40 |       |            |                                    |\n+---+-------+----------+---------+---------------------------------+-------+------------+------------------------------------+\n[...]\n```\n\n\n\n**Example 2:** *Extract all unique firmware entries from a given BIOS ROM, uncompress compressed entries and convert public keys into PEM format.*\n\n```\n$ psptool -Xunk ASUS_PRIME-A320M-A-ASUS-4801.CAP\nll ASUS_PRIME-A320M-A-ASUS-4801.CAP_unique_extracted/\n[...]\n17007195  64 -rw-r--r--   1 cwerling  staff    32K 14 Aug 15:32 PSP_AGESA_RESUME_FW~0x10\n17007235   8 -rw-r--r--   1 cwerling  staff   451B 14 Aug 15:32 PSP_BOOT_TIME_TRUSTLETS_KEY~0xd\n17007244 224 -rw-r--r--   1 cwerling  staff   112K 14 Aug 15:32 PSP_BOOT_TIME_TRUSTLETS~0xc_0.7.0.1\n17007237  64 -rw-r--r--   1 cwerling  staff    32K 14 Aug 15:32 PSP_FW_BOOT_LOADER~0x1\n17007197 104 -rw-r--r--   1 cwerling  staff    49K 14 Aug 15:32 PSP_FW_BOOT_LOADER~0x1_0.8.0.5E\n17007196 112 -rw-r--r--   1 cwerling  staff    55K 14 Aug 15:32 PSP_FW_BOOT_LOADER~0x1_0.D.0.1A\n17007223  48 -rw-r--r--   1 cwerling  staff    24K 14 Aug 15:32 PSP_FW_RECOVERY_BOOT_LOADER~0x3\n17007224  96 -rw-r--r--   1 cwerling  staff    45K 14 Aug 15:32 PSP_FW_RECOVERY_BOOT_LOADER~0x3_0.8.0.5E\n17007232 288 -rw-r--r--   1 cwerling  staff   144K 14 Aug 15:32 PSP_FW_TRUSTED_OS~0x2\n17007180 128 -rw-r--r--   1 cwerling  staff    61K 14 Aug 15:32 PSP_FW_TRUSTED_OS~0x2_0.8.0.5E\n17007247 128 -rw-r--r--   1 cwerling  staff    60K 14 Aug 15:32 PSP_FW_TRUSTED_OS~0x2_0.D.0.1A\n17007205 256 -rw-r--r--   1 cwerling  staff   128K 14 Aug 15:32 PSP_NV_DATA~0x4\n17007182  24 -rw-r--r--   1 cwerling  staff    12K 14 Aug 15:32 PSP_S3_NV_DATA~0x1a\n17007226 160 -rw-r--r--   1 cwerling  staff    80K 14 Aug 15:32 PSP_SMU_FN_FIRMWARE~0x108\n17007202   8 -rw-r--r--   1 cwerling  staff   451B 14 Aug 15:32 SEC_DBG_PUBLIC_KEY~0x9\n17007216  32 -rw-r--r--   1 cwerling  staff    14K 14 Aug 15:32 SEC_GASKET~0x24_11.3.0.8\n17007206  16 -rw-r--r--   1 cwerling  staff   5,8K 14 Aug 15:32 SEC_GASKET~0x24_A.2.3.27\n17007176 264 -rw-r--r--   1 cwerling  staff   129K 14 Aug 15:32 SMU_OFFCHIP_FW~0x8\n17007217 520 -rw-r--r--   1 cwerling  staff   256K 14 Aug 15:32 SMU_OFFCHIP_FW~0x8_0.2E.16.0\n[...]\n```\n\n\n\n**Example 3**: *Extract the firmware entry from a given BIOS ROM at directory index 1 entry index 8 (`PSP_BOOT_TIME_TRUSTLETS`) and show strings of length 8.*\n\n```\n$ psptool -X -d 1 -e 8 MSI_X399_E7B92AMS.130 | strings -n 8\nAMD_TL_UTIL: Hashing the message: %p\nAMD_TL_UTIL: ProcessCmd_Hash(), UTIL_ERR_INVALID_BUFFER, exit\nRSA: Calling tlApiRandomGenerateData\nRSA: Calling DbgUnlockRsaKeyGen\nRSA: Done Calling DbgUnlockRsaKeyGen\nDbgUnlockRsaKeyGen failed\nAMD_TL_UTIL: Deriving AES key\nAMD_TL_UTIL: ProcessCmd_Hmac(), UTIL_ERR_INVALID_BUFFER, exit\nAMD_TL_UTIL: Deriving HMAC key\nHMAC Signature Key for PSP Data saved in DRAM\nAMD_TL_UTIL: Computing HMAC of payload\nAMD_TL_UTIL: running\nAMD_TL_UTIL: invalid TCI\nTCI buffer: %p\nTCI buffer length: %p\nsizeof(tciMessage_t): %p\nAMD_TL_UTIL: waiting for notification\nRSA: Calling generateKeyPair and RSA signing\nRSA: Calling DbgUnlockKeyVerfiy\nAMD_TL_UTIL: Unknown command ID %d, ignore\nAMD_TL_UTIL: notify TLC\n```\n\n\n\n**General usage:**\n\n```\nusage: psptool [-E | -X | -R] file\n\nDisplay, extract, and manipulate AMD PSP firmware inside BIOS ROMs.\n\npositional arguments:\n  file                 Binary file to be parsed for PSP firmware\n\noptional arguments:\n  -E, --entries        Default: Parse and display PSP firmware entries.\n                       [-n]\n\n                       -n:      list unique entries only ordered by their offset\n\n  -X, --extract-entry  Extract one or more PSP firmware entries.\n                       [-d idx [-e idx]] [-n] [-u] [-k] [-o outfile]\n\n                       -d idx:  specifies directory_index (default: all directories)\n                       -e idx:  specifies entry_index (default: all entries)\n                       -n:      skip duplicate entries and extract unique entries only\n                       -u:      uncompress compressed entries\n                       -k:      convert pubkeys into PEM format\n                       -o file: specifies outfile/outdir (default: stdout/{file}_extracted)\n\n  -R, --replace-entry  Copy a new entry (including header and signature) into the\n                       ROM file and update metadata accordingly.\n                       -d idx -e idx -s subfile -o outfile\n\n                       -d idx:  specifies directory_index\n                       -e idx:  specifies entry_index\n                       -s file: specifies subfile (i.e. the new entry contents)\n                       -o file: specifies outfile\n```\n\n## Python Usage\n\nPSPTool can be **used as a Python module**, e.g. in an interactive IPython session:\n\n```\n> from psptool import PSPTool\n> psp = PSPTool.from_file('original_bios.bin')\n> psp.blob.directories\n[Directory(address=0x77000, type=PSP_NEW, count=16),\n Directory(address=0x149000, type=secondary, count=20),\n Directory(address=0x117000, type=BHD, count=14),\n Directory(address=0x249000, type=secondary, count=17)]\n> psp.ls_dir(0)\n+---+-------+----------+---------+------+-----------------------------+-------+------------+-----------------------+\n|   | Entry |  Address |    Size | Type |                   Type Name | Magic |    Version |             Signed by |\n+---+-------+----------+---------+------+-----------------------------+-------+------------+-----------------------+\n|   |     0 |  0x77400 |   0x240 |  0x0 |              AMD_PUBLIC_KEY |       |            |                       |\n|   |     1 | 0x149400 | 0x10000 |  0x1 |          PSP_FW_BOOT_LOADER |  $PS1 |   0.7.0.52 |        AMD_PUBLIC_KEY |\n|   |     2 |  0x77700 |  0xcf40 |  0x3 | PSP_FW_RECOVERY_BOOT_LOADER |  $PS1 |  FF.7.0.51 |        AMD_PUBLIC_KEY |\n|   |     3 |  0x84700 | 0x1e550 |  0x8 |              SMU_OFFCHIP_FW |  SMUR |  4.19.64.0 |        AMD_PUBLIC_KEY |\n|   |     4 |  0xa2d00 |   0x340 |  0xa |       OEM_PSP_FW_PUBLIC_KEY |       |            |                       |\n|   |     5 |  0xa3100 |  0x3eb0 | 0x12 |           SMU_OFF_CHIP_FW_2 |  SMUR |  4.19.64.0 |        AMD_PUBLIC_KEY |\n|   |     6 |  0xa7000 |    0x10 | 0x21 |                             |       |            |                       |\n|   |     7 |  0xa7100 |   0xcc0 | 0x24 |                             |  $PS1 |   12.2.0.9 |        AMD_PUBLIC_KEY |\n|   |     8 |  0xa7e00 |   0xc20 | 0x30 |                             |  0BAR | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |     9 |  0xa8b00 |  0xbc50 | 0x31 |          0x31~ABL_ARM_CODE~ |  AR1B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    10 |  0xb4800 |  0xb5c0 | 0x32 |                             |  AR2B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    11 |  0xbfe00 |  0xdb00 | 0x33 |                             |  AR3B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    12 |  0xcd900 |  0xefd0 | 0x34 |                             |  AR4B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    13 |  0xdc900 |  0xf020 | 0x35 |                             |  AR5B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    14 |  0xeba00 |  0xbd60 | 0x36 |                             |  AR6B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    15 | 0x149000 |   0x400 | 0x40 |    !PL2_SECONDARY_DIRECTORY |       |            |                       |\n+---+-------+----------+---------+------+-----------------------------+-------+------------+-----------------------+\n> psp.blob.directories[0].entries[0]\nPubkeyEntry(type=0x0, address=0x77400, size=0x240, len(references)=1)\n> psp.blob.directories[0].entries[0].get_bytes()\nb'\\x01\\x00\\x00\\x00\\x1b\\xb9\\x87\\xc3YIF\\x06\\xb1t\\x94V\\x01\\xc9\\xea[\\x1b\\xb9\\x87\\xc3YIF\\x06\\xb1t\\x94V\\x01\\xc9\\xea[\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x08\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n[...]\n> my_stuff = [...]\n> psp.blob.directories[0].entries[1].move_buffer(0x60000, 0x1000)\n> psp.blob.set_bytes(0x60000, 0x1000, my_stuff)\n> psp.to_file('my_modified_bios.bin')\n```\n\n\n\n# PSPTrace\n\nPSPTrace can be used to **correlate an SPI capture** of a **boot procedure** recorded with a Saleae Logic analyzer to the **PSP firmware** of a UEFI image. SPI captures must be exported from the Saleae Logic software via *Analyzers > SPI > Export as text/csv file*. Please make sure you sampled with an appropriate sample rate and the SPI analyzer is set to `Hex`.\n\nIt is installed along with PSPTool (see installation instructions above) and only provides a command line interface.\n\n```\nusage: psptrace [-h] [-o] [-n] [-c] [-t] [-l LIMIT_ROWS] [-v] csvfile romfile\n\nRead in an SPI capture created by a Saleae Logic Analyzer and a ROM file\nresembling the flash contents and display an access chronology. On first load,\npsptrace needs to parse a lot of raw data which will be saved on disk. All\nother loads will then be much faster.\n\npositional arguments:\n  csvfile               CSV file of SPI capture\n  romfile               ROM file of SPI contents\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o, --overview-mode   aggregate accesses to the same firmware entry\n  -n, --no-duplicates   hide duplicate accesses (e.g. caused by multiple PSPs)\n  -c, --collapse        collapse consecutive reads to the same PSP entry type\n                        (denoted by [c] and sometimes by ~ if collapsing was\n                        fuzzy)\n  -t, --normalize-timestamps\n                        normalize all timestamps\n  -l LIMIT_ROWS, --limit-rows LIMIT_ROWS\n                        limit the processed rows to a maximum of n\n  -v, --verbose         increase output verbosity\n```\n\n## Example usage\n\nAfter recording the boot procedure of a Supermicro server system with an AMD Epyc CPU, PSPTrace outputs the following boot in overview mode (`-o`):\n\n```\n$ psptrace -o spi_trace.txt flash.bin\n\nInfo: Creating database in spi_trace.txt.pickle ...\nInfo: Parsed and stored a database of 14028942 rows.\n+---------+---------------+----------+-----------------------------+------+\n|   No.   | Lowest access |  Range   |             Type            | Info |\n+---------+---------------+----------+-----------------------------+------+\n|    0    |    0x820000   | 0x780007 |         Unknown area        |      |\n|    22   |    0x020000   | 0x00001c |     Firmware Entry Table    |      |\n|    33   |    0x077000   | 0x00012a |       Directory: $PSP       |      |\n|    70   |    0x077000   | 0x000100 |       Directory: $PSP       | CCP  |\n|   107   |    0x077400   | 0x000240 |        AMD_PUBLIC_KEY       | CCP  |\n|   177   |    0x149400   | 0x00d780 |      PSP_FW_BOOT_LOADER     | CCP  |\n|         |               |          |                             |      |\n|         |               |          |      ~ 3410 \u00b5s delay ~      |      |\n|         |               |          |                             |      |\n|   7084  |    0x149000   | 0x000180 |       Directory: $PL2       | CCP  |\n|   7090  |    0x000000   | 0x020046 |         Unknown area        |      |\n|   7091  |    0x020000   | 0x000024 |     Firmware Entry Table    |      |\n|         |               |          |                             |      |\n|         |               |          |       ~ 66 \u00b5s delay ~       |      |\n|         |               |          |                             |      |\n|   7095  |    0x117000   | 0x000160 |       Directory: $BHD       |      |\n|   7096  |    0x149000   | 0x000152 |       Directory: $PL2       |      |\n|   7554  |    0x000000   | 0x117280 |         Unknown area        |      |\n|   7581  |    0x020000   | 0x000022 |     Firmware Entry Table    |      |\n|   7859  |    0x249000   | 0x0001c0 |       Directory: $BL2       | CCP  |\n|   7880  |    0x1170c0   | 0x000080 |       Directory: $BHD       | CCP  |\n|   7909  |    0x2491c0   | 0x000240 |         Unknown area        | CCP  |\n|   8017  |    0x249010   | 0x00019a |       Directory: $BL2       |      |\n|   8560  |    0x17c100   | 0x001932 |         DEBUG_UNLOCK        |      |\n|   8939  |    0x17c200   | 0x001800 |         DEBUG_UNLOCK        | CCP  |\n|  10144  |    0x177a00   | 0x0001c0 |      SEC_DBG_PUBLIC_KEY     |      |\n|  10576  |    0x177bc0   | 0x000180 |      SEC_DBG_PUBLIC_KEY     | CCP  |\n|         |               |          |                             |      |\n|         |               |          |       ~ 178 \u00b5s delay ~      |      |\n|         |               |          |                             |      |\n|  10582  |    0x17e000   | 0x000080 |         TOKEN_UNLOCK        | CCP  |\n\n[...]\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cwerling/psptool", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "psptool", "package_url": "https://pypi.org/project/psptool/", "platform": "", "project_url": "https://pypi.org/project/psptool/", "project_urls": {"Homepage": "https://github.com/cwerling/psptool"}, "release_url": "https://pypi.org/project/psptool/2.1/", "requires_dist": ["cryptography", "prettytable"], "requires_python": "", "summary": "PSPTool is a tool for dealing with AMD binary blobs", "version": "2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PSPTool</h1>\n<p>PSPTool is a Swiss Army knife for dealing with firmware of the <strong>AMD Secure Processor</strong> (formerly known as <em>Platform Security Processor</em> or <strong>PSP</strong>). It locates AMD firmware inside  <strong>UEFI images</strong> as part of BIOS updates targeting <strong>AMD platforms</strong>.</p>\n<p>It is based on reverse-engineering efforts of AMD's <strong>proprietary filesystem</strong> used to <strong>pack firmware blobs</strong> into <strong>UEFI Firmware Images</strong>. These are usually 16MB in size and can be conveniently parsed by <a href=\"https://github.com/LongSoft/UEFITool\" rel=\"nofollow\">UEFITool</a>. However, all binary blobs by AMD are located in padding volumes unparsable by UEFITool.</p>\n<p>PSPTool favourably works with UEFI images as obtained through BIOS updates.</p>\n<h2>Installation</h2>\n<p>You can install PSPTool either through <strong>pip</strong>,</p>\n<pre><code>pip install psptool\n</code></pre>\n<p>or from <strong>GitHub</strong>:</p>\n<pre><code>git clone https://github.com/PSPReverse/PSPTool\ncd PSPTool\nsudo python3 setup.py install\n</code></pre>\n<h2>CLI Usage</h2>\n<p>PSPTool offers a range of features from the <strong>command line</strong>.</p>\n<p><strong>Example 1:</strong> <em>List all firmware entries of a given BIOS ROM.</em></p>\n<pre><code>$ psptool Lenovo_Thinkpad_T495_r12uj35wd.iso\n\n+-----------+----------+---------+-------+---------------------+\n| Directory |   Addr   |   Type  | Magic | Secondary Directory |\n+-----------+----------+---------+-------+---------------------+\n|     0     | 0x28bb20 | PSP_NEW |  $PSP |       0x138000      |\n+-----------+----------+---------+-------+---------------------+\n+---+-------+----------+---------+---------------------------------+-------+------------+------------------------------------+\n|   | Entry |  Address |    Size |                            Type | Magic |    Version |                               Info |\n+---+-------+----------+---------+---------------------------------+-------+------------+------------------------------------+\n|   |     0 | 0x28bf20 |   0x240 |              AMD_PUBLIC_KEY~0x0 |  60BB |            |                                    |\n|   |     1 | 0x382f20 |  0xc300 |          PSP_FW_BOOT_LOADER~0x1 |  $PS1 |   0.8.2.59 |            signed(60BB), encrypted |\n|   |     2 | 0x28c220 |  0xb300 | PSP_FW_RECOVERY_BOOT_LOADER~0x3 |  $PS1 |   0.8.2.59 |            signed(60BB), encrypted |\n|   |     3 | 0x297520 | 0x22770 |                           0x208 |       |            |                                    |\n|   |     4 | 0x2b9d20 |  0x71b0 |                           0x212 |       |            |                                    |\n|   |     5 | 0x2c0f20 | 0x20830 |       PSP_SMU_FN_FIRMWARE~0x108 |       |            |                                    |\n|   |     6 | 0x2e1820 |  0x5010 |        !SMU_OFF_CHIP_FW_3~0x112 |       |            |                                    |\n|   |     7 | 0x2e6920 |    0x10 |               WRAPPED_IKEK~0x21 |       |            |                                    |\n|   |     8 | 0x2e6b20 |  0x1000 |               TOKEN_UNLOCK~0x22 |       |            |                                    |\n|   |     9 | 0x2e7b20 |  0x1860 |                           0x224 |  $PS1 |   A.2.3.27 |            signed(60BB), encrypted |\n|   |    10 | 0x2e9420 |  0x1760 |                           0x124 |  $PS1 |   A.2.3.1A |            signed(60BB), encrypted |\n|   |    11 | 0x2eac20 |   0xdd0 |                       ABL0~0x30 |  AW0B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    12 | 0x2eba20 |  0xcbb0 |                       ABL1~0x31 |  AW1B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    13 | 0x2f8620 |  0x8dc0 |                       ABL2~0x32 |  AW2B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    14 | 0x301420 |  0xbb90 |                       ABL3~0x33 |  AW3B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    15 | 0x30d020 |  0xcca0 |                       ABL4~0x34 |  AW4B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    16 | 0x319d20 |  0xc910 |                       ABL5~0x35 |  AW5B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    17 | 0x326720 |  0x9ef0 |                       ABL6~0x36 |  AW6B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    18 | 0x330620 |  0xc710 |                       ABL7~0x37 |  AW7B | 18.12.10.0 | compressed, signed(60BB), verified |\n|   |    19 | 0x382b20 |     0x0 |   !PL2_SECONDARY_DIRECTORY~0x40 |       |            |                                    |\n+---+-------+----------+---------+---------------------------------+-------+------------+------------------------------------+\n[...]\n</code></pre>\n<p><strong>Example 2:</strong> <em>Extract all unique firmware entries from a given BIOS ROM, uncompress compressed entries and convert public keys into PEM format.</em></p>\n<pre><code>$ psptool -Xunk ASUS_PRIME-A320M-A-ASUS-4801.CAP\nll ASUS_PRIME-A320M-A-ASUS-4801.CAP_unique_extracted/\n[...]\n17007195  64 -rw-r--r--   1 cwerling  staff    32K 14 Aug 15:32 PSP_AGESA_RESUME_FW~0x10\n17007235   8 -rw-r--r--   1 cwerling  staff   451B 14 Aug 15:32 PSP_BOOT_TIME_TRUSTLETS_KEY~0xd\n17007244 224 -rw-r--r--   1 cwerling  staff   112K 14 Aug 15:32 PSP_BOOT_TIME_TRUSTLETS~0xc_0.7.0.1\n17007237  64 -rw-r--r--   1 cwerling  staff    32K 14 Aug 15:32 PSP_FW_BOOT_LOADER~0x1\n17007197 104 -rw-r--r--   1 cwerling  staff    49K 14 Aug 15:32 PSP_FW_BOOT_LOADER~0x1_0.8.0.5E\n17007196 112 -rw-r--r--   1 cwerling  staff    55K 14 Aug 15:32 PSP_FW_BOOT_LOADER~0x1_0.D.0.1A\n17007223  48 -rw-r--r--   1 cwerling  staff    24K 14 Aug 15:32 PSP_FW_RECOVERY_BOOT_LOADER~0x3\n17007224  96 -rw-r--r--   1 cwerling  staff    45K 14 Aug 15:32 PSP_FW_RECOVERY_BOOT_LOADER~0x3_0.8.0.5E\n17007232 288 -rw-r--r--   1 cwerling  staff   144K 14 Aug 15:32 PSP_FW_TRUSTED_OS~0x2\n17007180 128 -rw-r--r--   1 cwerling  staff    61K 14 Aug 15:32 PSP_FW_TRUSTED_OS~0x2_0.8.0.5E\n17007247 128 -rw-r--r--   1 cwerling  staff    60K 14 Aug 15:32 PSP_FW_TRUSTED_OS~0x2_0.D.0.1A\n17007205 256 -rw-r--r--   1 cwerling  staff   128K 14 Aug 15:32 PSP_NV_DATA~0x4\n17007182  24 -rw-r--r--   1 cwerling  staff    12K 14 Aug 15:32 PSP_S3_NV_DATA~0x1a\n17007226 160 -rw-r--r--   1 cwerling  staff    80K 14 Aug 15:32 PSP_SMU_FN_FIRMWARE~0x108\n17007202   8 -rw-r--r--   1 cwerling  staff   451B 14 Aug 15:32 SEC_DBG_PUBLIC_KEY~0x9\n17007216  32 -rw-r--r--   1 cwerling  staff    14K 14 Aug 15:32 SEC_GASKET~0x24_11.3.0.8\n17007206  16 -rw-r--r--   1 cwerling  staff   5,8K 14 Aug 15:32 SEC_GASKET~0x24_A.2.3.27\n17007176 264 -rw-r--r--   1 cwerling  staff   129K 14 Aug 15:32 SMU_OFFCHIP_FW~0x8\n17007217 520 -rw-r--r--   1 cwerling  staff   256K 14 Aug 15:32 SMU_OFFCHIP_FW~0x8_0.2E.16.0\n[...]\n</code></pre>\n<p><strong>Example 3</strong>: <em>Extract the firmware entry from a given BIOS ROM at directory index 1 entry index 8 (<code>PSP_BOOT_TIME_TRUSTLETS</code>) and show strings of length 8.</em></p>\n<pre><code>$ psptool -X -d 1 -e 8 MSI_X399_E7B92AMS.130 | strings -n 8\nAMD_TL_UTIL: Hashing the message: %p\nAMD_TL_UTIL: ProcessCmd_Hash(), UTIL_ERR_INVALID_BUFFER, exit\nRSA: Calling tlApiRandomGenerateData\nRSA: Calling DbgUnlockRsaKeyGen\nRSA: Done Calling DbgUnlockRsaKeyGen\nDbgUnlockRsaKeyGen failed\nAMD_TL_UTIL: Deriving AES key\nAMD_TL_UTIL: ProcessCmd_Hmac(), UTIL_ERR_INVALID_BUFFER, exit\nAMD_TL_UTIL: Deriving HMAC key\nHMAC Signature Key for PSP Data saved in DRAM\nAMD_TL_UTIL: Computing HMAC of payload\nAMD_TL_UTIL: running\nAMD_TL_UTIL: invalid TCI\nTCI buffer: %p\nTCI buffer length: %p\nsizeof(tciMessage_t): %p\nAMD_TL_UTIL: waiting for notification\nRSA: Calling generateKeyPair and RSA signing\nRSA: Calling DbgUnlockKeyVerfiy\nAMD_TL_UTIL: Unknown command ID %d, ignore\nAMD_TL_UTIL: notify TLC\n</code></pre>\n<p><strong>General usage:</strong></p>\n<pre><code>usage: psptool [-E | -X | -R] file\n\nDisplay, extract, and manipulate AMD PSP firmware inside BIOS ROMs.\n\npositional arguments:\n  file                 Binary file to be parsed for PSP firmware\n\noptional arguments:\n  -E, --entries        Default: Parse and display PSP firmware entries.\n                       [-n]\n\n                       -n:      list unique entries only ordered by their offset\n\n  -X, --extract-entry  Extract one or more PSP firmware entries.\n                       [-d idx [-e idx]] [-n] [-u] [-k] [-o outfile]\n\n                       -d idx:  specifies directory_index (default: all directories)\n                       -e idx:  specifies entry_index (default: all entries)\n                       -n:      skip duplicate entries and extract unique entries only\n                       -u:      uncompress compressed entries\n                       -k:      convert pubkeys into PEM format\n                       -o file: specifies outfile/outdir (default: stdout/{file}_extracted)\n\n  -R, --replace-entry  Copy a new entry (including header and signature) into the\n                       ROM file and update metadata accordingly.\n                       -d idx -e idx -s subfile -o outfile\n\n                       -d idx:  specifies directory_index\n                       -e idx:  specifies entry_index\n                       -s file: specifies subfile (i.e. the new entry contents)\n                       -o file: specifies outfile\n</code></pre>\n<h2>Python Usage</h2>\n<p>PSPTool can be <strong>used as a Python module</strong>, e.g. in an interactive IPython session:</p>\n<pre><code>&gt; from psptool import PSPTool\n&gt; psp = PSPTool.from_file('original_bios.bin')\n&gt; psp.blob.directories\n[Directory(address=0x77000, type=PSP_NEW, count=16),\n Directory(address=0x149000, type=secondary, count=20),\n Directory(address=0x117000, type=BHD, count=14),\n Directory(address=0x249000, type=secondary, count=17)]\n&gt; psp.ls_dir(0)\n+---+-------+----------+---------+------+-----------------------------+-------+------------+-----------------------+\n|   | Entry |  Address |    Size | Type |                   Type Name | Magic |    Version |             Signed by |\n+---+-------+----------+---------+------+-----------------------------+-------+------------+-----------------------+\n|   |     0 |  0x77400 |   0x240 |  0x0 |              AMD_PUBLIC_KEY |       |            |                       |\n|   |     1 | 0x149400 | 0x10000 |  0x1 |          PSP_FW_BOOT_LOADER |  $PS1 |   0.7.0.52 |        AMD_PUBLIC_KEY |\n|   |     2 |  0x77700 |  0xcf40 |  0x3 | PSP_FW_RECOVERY_BOOT_LOADER |  $PS1 |  FF.7.0.51 |        AMD_PUBLIC_KEY |\n|   |     3 |  0x84700 | 0x1e550 |  0x8 |              SMU_OFFCHIP_FW |  SMUR |  4.19.64.0 |        AMD_PUBLIC_KEY |\n|   |     4 |  0xa2d00 |   0x340 |  0xa |       OEM_PSP_FW_PUBLIC_KEY |       |            |                       |\n|   |     5 |  0xa3100 |  0x3eb0 | 0x12 |           SMU_OFF_CHIP_FW_2 |  SMUR |  4.19.64.0 |        AMD_PUBLIC_KEY |\n|   |     6 |  0xa7000 |    0x10 | 0x21 |                             |       |            |                       |\n|   |     7 |  0xa7100 |   0xcc0 | 0x24 |                             |  $PS1 |   12.2.0.9 |        AMD_PUBLIC_KEY |\n|   |     8 |  0xa7e00 |   0xc20 | 0x30 |                             |  0BAR | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |     9 |  0xa8b00 |  0xbc50 | 0x31 |          0x31~ABL_ARM_CODE~ |  AR1B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    10 |  0xb4800 |  0xb5c0 | 0x32 |                             |  AR2B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    11 |  0xbfe00 |  0xdb00 | 0x33 |                             |  AR3B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    12 |  0xcd900 |  0xefd0 | 0x34 |                             |  AR4B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    13 |  0xdc900 |  0xf020 | 0x35 |                             |  AR5B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    14 |  0xeba00 |  0xbd60 | 0x36 |                             |  AR6B | 17.9.18.12 | OEM_PSP_FW_PUBLIC_KEY |\n|   |    15 | 0x149000 |   0x400 | 0x40 |    !PL2_SECONDARY_DIRECTORY |       |            |                       |\n+---+-------+----------+---------+------+-----------------------------+-------+------------+-----------------------+\n&gt; psp.blob.directories[0].entries[0]\nPubkeyEntry(type=0x0, address=0x77400, size=0x240, len(references)=1)\n&gt; psp.blob.directories[0].entries[0].get_bytes()\nb'\\x01\\x00\\x00\\x00\\x1b\\xb9\\x87\\xc3YIF\\x06\\xb1t\\x94V\\x01\\xc9\\xea[\\x1b\\xb9\\x87\\xc3YIF\\x06\\xb1t\\x94V\\x01\\xc9\\xea[\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x08\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n[...]\n&gt; my_stuff = [...]\n&gt; psp.blob.directories[0].entries[1].move_buffer(0x60000, 0x1000)\n&gt; psp.blob.set_bytes(0x60000, 0x1000, my_stuff)\n&gt; psp.to_file('my_modified_bios.bin')\n</code></pre>\n<h1>PSPTrace</h1>\n<p>PSPTrace can be used to <strong>correlate an SPI capture</strong> of a <strong>boot procedure</strong> recorded with a Saleae Logic analyzer to the <strong>PSP firmware</strong> of a UEFI image. SPI captures must be exported from the Saleae Logic software via <em>Analyzers &gt; SPI &gt; Export as text/csv file</em>. Please make sure you sampled with an appropriate sample rate and the SPI analyzer is set to <code>Hex</code>.</p>\n<p>It is installed along with PSPTool (see installation instructions above) and only provides a command line interface.</p>\n<pre><code>usage: psptrace [-h] [-o] [-n] [-c] [-t] [-l LIMIT_ROWS] [-v] csvfile romfile\n\nRead in an SPI capture created by a Saleae Logic Analyzer and a ROM file\nresembling the flash contents and display an access chronology. On first load,\npsptrace needs to parse a lot of raw data which will be saved on disk. All\nother loads will then be much faster.\n\npositional arguments:\n  csvfile               CSV file of SPI capture\n  romfile               ROM file of SPI contents\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o, --overview-mode   aggregate accesses to the same firmware entry\n  -n, --no-duplicates   hide duplicate accesses (e.g. caused by multiple PSPs)\n  -c, --collapse        collapse consecutive reads to the same PSP entry type\n                        (denoted by [c] and sometimes by ~ if collapsing was\n                        fuzzy)\n  -t, --normalize-timestamps\n                        normalize all timestamps\n  -l LIMIT_ROWS, --limit-rows LIMIT_ROWS\n                        limit the processed rows to a maximum of n\n  -v, --verbose         increase output verbosity\n</code></pre>\n<h2>Example usage</h2>\n<p>After recording the boot procedure of a Supermicro server system with an AMD Epyc CPU, PSPTrace outputs the following boot in overview mode (<code>-o</code>):</p>\n<pre><code>$ psptrace -o spi_trace.txt flash.bin\n\nInfo: Creating database in spi_trace.txt.pickle ...\nInfo: Parsed and stored a database of 14028942 rows.\n+---------+---------------+----------+-----------------------------+------+\n|   No.   | Lowest access |  Range   |             Type            | Info |\n+---------+---------------+----------+-----------------------------+------+\n|    0    |    0x820000   | 0x780007 |         Unknown area        |      |\n|    22   |    0x020000   | 0x00001c |     Firmware Entry Table    |      |\n|    33   |    0x077000   | 0x00012a |       Directory: $PSP       |      |\n|    70   |    0x077000   | 0x000100 |       Directory: $PSP       | CCP  |\n|   107   |    0x077400   | 0x000240 |        AMD_PUBLIC_KEY       | CCP  |\n|   177   |    0x149400   | 0x00d780 |      PSP_FW_BOOT_LOADER     | CCP  |\n|         |               |          |                             |      |\n|         |               |          |      ~ 3410 \u00b5s delay ~      |      |\n|         |               |          |                             |      |\n|   7084  |    0x149000   | 0x000180 |       Directory: $PL2       | CCP  |\n|   7090  |    0x000000   | 0x020046 |         Unknown area        |      |\n|   7091  |    0x020000   | 0x000024 |     Firmware Entry Table    |      |\n|         |               |          |                             |      |\n|         |               |          |       ~ 66 \u00b5s delay ~       |      |\n|         |               |          |                             |      |\n|   7095  |    0x117000   | 0x000160 |       Directory: $BHD       |      |\n|   7096  |    0x149000   | 0x000152 |       Directory: $PL2       |      |\n|   7554  |    0x000000   | 0x117280 |         Unknown area        |      |\n|   7581  |    0x020000   | 0x000022 |     Firmware Entry Table    |      |\n|   7859  |    0x249000   | 0x0001c0 |       Directory: $BL2       | CCP  |\n|   7880  |    0x1170c0   | 0x000080 |       Directory: $BHD       | CCP  |\n|   7909  |    0x2491c0   | 0x000240 |         Unknown area        | CCP  |\n|   8017  |    0x249010   | 0x00019a |       Directory: $BL2       |      |\n|   8560  |    0x17c100   | 0x001932 |         DEBUG_UNLOCK        |      |\n|   8939  |    0x17c200   | 0x001800 |         DEBUG_UNLOCK        | CCP  |\n|  10144  |    0x177a00   | 0x0001c0 |      SEC_DBG_PUBLIC_KEY     |      |\n|  10576  |    0x177bc0   | 0x000180 |      SEC_DBG_PUBLIC_KEY     | CCP  |\n|         |               |          |                             |      |\n|         |               |          |       ~ 178 \u00b5s delay ~      |      |\n|         |               |          |                             |      |\n|  10582  |    0x17e000   | 0x000080 |         TOKEN_UNLOCK        | CCP  |\n\n[...]\n</code></pre>\n\n          </div>"}, "last_serial": 6558021, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "56cd9420a4bcbafd0746ff27678268d9", "sha256": "09f5cf104f7321251e59dfacc76232694cb7790c647f5c8d1c2ec48986d66afa"}, "downloads": -1, "filename": "psptool-2.0-py3.7.egg", "has_sig": false, "md5_digest": "56cd9420a4bcbafd0746ff27678268d9", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 43506, "upload_time": "2019-11-07T21:11:12", "upload_time_iso_8601": "2019-11-07T21:11:12.186784Z", "url": "https://files.pythonhosted.org/packages/bb/1d/25e699c4d852f97b2249289e128b5bb3418be8f903fa8c7756db70e35495/psptool-2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "133df44deaee22e3ef94f37c3e5d2725", "sha256": "e7bab2eab3b9adbb61f1257487729833efe98b687a2cc9c0bd4451ff0d1a904c"}, "downloads": -1, "filename": "psptool-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "133df44deaee22e3ef94f37c3e5d2725", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42449, "upload_time": "2019-11-07T21:11:09", "upload_time_iso_8601": "2019-11-07T21:11:09.744321Z", "url": "https://files.pythonhosted.org/packages/e2/e2/97a8301b607f602ca989459dabd77437db89be46709479a2f4ed4afb17a9/psptool-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96d389a60883de958bfffa8e6ec5fec3", "sha256": "cf91394ebfb179df98154477140955ea288131ba815c9695ae65520bcf5a2c78"}, "downloads": -1, "filename": "psptool-2.0.tar.gz", "has_sig": false, "md5_digest": "96d389a60883de958bfffa8e6ec5fec3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28408, "upload_time": "2019-11-07T21:11:13", "upload_time_iso_8601": "2019-11-07T21:11:13.432711Z", "url": "https://files.pythonhosted.org/packages/e4/e5/579ba59e779a029b0cbb3b14d2f70553e34524034ea88130046884d70ed1/psptool-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "7b889c0ffc4b1c73fbff306434ced48d", "sha256": "0e132a370aeeb36d9d3d40bfd00b1e92ac671aa0b79a7ee719b296573c007eaa"}, "downloads": -1, "filename": "psptool-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b889c0ffc4b1c73fbff306434ced48d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42667, "upload_time": "2020-02-02T13:34:05", "upload_time_iso_8601": "2020-02-02T13:34:05.161204Z", "url": "https://files.pythonhosted.org/packages/8c/7e/77c60ae389567e6a0fef991055580333e84d5a22c56dff1016ff46aa2d68/psptool-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4acf67dc482fa1b50f99cac40c767fa7", "sha256": "130bb1da1e57f6edc92cf7cd07f04a98a27a83383ddce8b5795d6a3091d66121"}, "downloads": -1, "filename": "psptool-2.1.tar.gz", "has_sig": false, "md5_digest": "4acf67dc482fa1b50f99cac40c767fa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28599, "upload_time": "2020-02-02T13:34:07", "upload_time_iso_8601": "2020-02-02T13:34:07.090999Z", "url": "https://files.pythonhosted.org/packages/52/6b/4863a4673d09ed314442f3bd7de71e6366ca826b9569897182b5d86d0183/psptool-2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b889c0ffc4b1c73fbff306434ced48d", "sha256": "0e132a370aeeb36d9d3d40bfd00b1e92ac671aa0b79a7ee719b296573c007eaa"}, "downloads": -1, "filename": "psptool-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b889c0ffc4b1c73fbff306434ced48d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42667, "upload_time": "2020-02-02T13:34:05", "upload_time_iso_8601": "2020-02-02T13:34:05.161204Z", "url": "https://files.pythonhosted.org/packages/8c/7e/77c60ae389567e6a0fef991055580333e84d5a22c56dff1016ff46aa2d68/psptool-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4acf67dc482fa1b50f99cac40c767fa7", "sha256": "130bb1da1e57f6edc92cf7cd07f04a98a27a83383ddce8b5795d6a3091d66121"}, "downloads": -1, "filename": "psptool-2.1.tar.gz", "has_sig": false, "md5_digest": "4acf67dc482fa1b50f99cac40c767fa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28599, "upload_time": "2020-02-02T13:34:07", "upload_time_iso_8601": "2020-02-02T13:34:07.090999Z", "url": "https://files.pythonhosted.org/packages/52/6b/4863a4673d09ed314442f3bd7de71e6366ca826b9569897182b5d86d0183/psptool-2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:47 2020"}