{"info": {"author": "Omkar Mestry", "author_email": "om.m.mestry@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "# Turfpy\nThis is Python library for performing geo spatial data analysis. This is an python alternative for turf.js.\n\n## Installation\n\nYou can install the Turfpy from [PyPI](https://pypi.org/project/turfpy/):\n\n    pip install turfpy\n\nIt supports various functionalities, following section will show usage for each\n## Example :\n  * Bearing : Takes two Point and finds the geographic bearing between them.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `start`  | Point  | Start point |\n| `end`  | Point | Ending point |\n| `final`  | Boolean(Optional) | Calculates the final bearing if true |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `bearing`  | float  | Calculates bearing|\n\n```python\nfrom turfpy import measurement\nfrom geojson import Point\nstart = Point((-75.343, 39.984))\nend = Point((-75.534, 39.123))\nmeasurement.bearing(start,end)\n```\n\n* Distance : Calculates distance between two Points. A point is containing latitude and logitude in decimal degrees and ``unit`` is optional.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `point1`  | Point  | Start point |\n| `point2`  | Point | Ending point |\n| `units`  | str(Optional) | A string containing unit, default is 'km' refer [Units type](#units-type) section |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `distance`  | float  | The distance between the two points in the requested unit |\n\n```python\nfrom turfpy import measurement\nfrom geojson import Point\nstart = Point((-75.343, 39.984))\nend = Point((-75.534, 39.123))\nmeasurement.distance(start,end)\n```\n\n* Area : This function calculates the area of the Geojson object given as input.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Any Geojson Type | Geojson object for which area is to be found |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `area`  | float  | Area for the given Geojson object |\n\n```python\nfrom turfpy.measurement import area\nfrom geojson import Feature, FeatureCollection\n\ngeometry_1 = {\"coordinates\": [[[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]]], \"type\": \"Polygon\"};\ngeometry_2 = {\"coordinates\": [[[2.38, 57.322], [23.194, -20.28], [-120.43, 19.15], [2.38, 57.322]]], \"type\": \"Polygon\"};\nfeature_1 = Feature(geometry=geometry_1)\nfeature_2 = Feature(geometry=geometry_2)\nfeature_collection = FeatureCollection([feature_1, feature_2])\n\narea(feature_collection)\n```\n\n\n* Bbox : This function is used to generate bounding box coordinates for given geojson.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Any Geojson Type  | Geojson object for which bounding box is to be found |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `bbox`  | list  | Bounding box points for the given Geojson object |\n\n```python\nfrom turfpy.measurement import bbox\nfrom geojson import Polygon\n\np = Polygon([[(2.38, 57.322), (23.194, -20.28), (-120.43, 19.15), (2.38, 57.322)]])\nbb = bbox(p)\n```\n\n* Bbox Polygon : To generate a Polygon Feature for the bounding box generated using bbox.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `bbox`  | list  | Bounding box generated for a geojson |\n| `properties`  | dict(Optional) | Properties to be added to the returned feature |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `bbox_polygon`  | Polygon  | Polygon for the given bounding box coordinates |\n\n```python\nfrom turfpy.measurement import bbox_polygon, bbox\nfrom geojson import Polygon\n\np = Polygon([[(2.38, 57.322), (23.194, -20.28), (-120.43, 19.15), (2.38, 57.322)]])\nbb = bbox(p)\nfeature = bbox_polygon(bb)\n```\n\n* Center : Takes a Feature or FeatureCollection and returns the absolute center point of all features.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Any Geojson Type  | GeoJSON for which centered to be calculated |\n| `properties`  | dict(Optional) | Properties to be added to the returned feature |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `center`  | Point  | Point feature for the center |\n\n```python\nfrom turfpy.measurement import center\nfrom geojson import Feature, FeatureCollection, Point\n\nf1 = Feature(geometry=Point((-97.522259, 35.4691)))\nf2 = Feature(geometry=Point((-97.502754, 35.463455)))\nf3 = Feature(geometry=Point((-97.508269, 35.463245)))\nfeature_collection = FeatureCollection([f1, f2, f3])\nfeature = center(feature_collection)\n```\n\n* Envelope : Takes any number of features and returns a rectangular Polygon that encompasses all vertices.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Any Geojson Type  | Geojson object for which envelope is to be found |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `bbox`  | Polygon  | Returns envelope i.e bounding box polygon |\n\n```python\nfrom turfpy.measurement import envelope\nfrom geojson import Feature, FeatureCollection, Point\n\nf1 = Feature(geometry=Point((-97.522259, 35.4691)))\nf2 = Feature(geometry=Point((-97.502754, 35.463455)))\nf3 = Feature(geometry=Point((-97.508269, 35.463245)))\nfeature_collection = FeatureCollection([f1, f2, f3])\nfeature = envelope(feature_collection)\n```\n\n* Length : Takes a geojson and measures its length in the specified units.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Any Geojson Type  | Geojson for which the length is to be determined |\n| `units`  | str(Optional) | Properties to be added to the returned feature, default is 'km' refer [Units type](#units-type) section  |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `length`  | float  | Length of the geojson in specified units |\n\n```python\nfrom turfpy.measurement import length\nfrom geojson import LineString\nls = LineString([(115, -32), (131, -22), (143, -25), (150, -34)])\nlength(ls)\n```\n\n* Destination : Takes a Point and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers and bearing in degrees.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `origin`  | Point  | Start point |\n| `distance`  | float | distance upto which the destination is from origin |\n| `bearing`  | bearing  | Direction in which is the destination is from origin |\n| `options`  | dict(Optional) | Option like units of distance and properties to be passed to destination point feature, default is 'km' refer [Units type](#units-type) section, example {'units':'mi', 'properties': {\"marker-color\": \"F00\"} |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `Destination`  | Feature  | Destination point in at the given distance and given direction |\n\n```python\nfrom turfpy.measurement import destination\nfrom geojson import Point\norigin = Point([-75.343, 39.984])\ndistance = 50\nbearing = 90\noptions = {'units': 'mi'}\ndestination(origin,distance,bearing,options)\n```\n\n* Centroid : Takes one or more features and calculates the centroid using the mean of all vertices.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Any Geojson Type  | Input features |\n| `properties`  | dict(Optional) | Properties to be added to the returned feature |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `centroid`  | Point  | Point feature which is the centroid of the given features |\n\n```python\nfrom turfpy.measurement import centroid\nfrom geojson import Polygon\npolygon = Polygon([[(-81, 41), (-88, 36), (-84, 31), (-80, 33), (-77, 39), (-81, 41)]])\ncentroid(polygon)\n```\n\n* Along : This function is used identify a Point at a specified distance along a LineString.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `line`  | Feature  | LineString on which the point to be identified |\n| `dist`  | dict(Optional) | Distance from the start of the LineString |\n| `unit`  | str(Optional) | Unit of distance, default is 'km' refer [Units type](#units-type) section |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Feature  | Point at the distance on the LineString passed |\n\n```python\nfrom turfpy.measurement import along\nfrom geojson import LineString\nls = LineString([(-83, 30), (-84, 36), (-78, 41)])\nalong(ls,200,'mi')\n```\n\n* Midpoint : This function is used to get midpoint between any the two points.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `point1`  | Point  | First point |\n| `point2`  | Point | Second Point |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Feature  | Point which is the midpoint of the two points given as input |\n\n```python\nfrom turfpy.measurement import midpoint\nfrom geojson import Point\npoint1 = Point([144.834823, -37.771257])\npoint2 = Point([145.14244, -37.830937])\nmidpoint(point1, point2)\n```\n\n* Nearest Point : Takes a reference Point Feature and FeatureCollection of point features and returns the point from the FeatureCollection closest to the reference Point Feature.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `target_point`  | Feature  | Feature Point of reference |\n| `points`  | FeatureCollection | FeatureCollection of points |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Feature  | Point Feature from the FeatureCollection which is closest to the reference Point |\n\n```python\nfrom turfpy.measurement import nearest_point\nfrom geojson import Point, Feature, FeatureCollection\nf1 = Feature(geometry=Point([28.96991729736328,41.01190001748873]))\nf2 = Feature(geometry=Point([28.948459, 41.024204]))\nf3 = Feature(geometry=Point([28.938674, 41.013324]))\nfc = FeatureCollection([f1, f2 ,f3])\nt = Feature(geometry=Point([28.973865, 41.011122]))\nnearest_point(t ,fc)\n```\n\n* Point On Feature : Takes a Feature or FeatureCollection and returns a Point guaranteed to be on the surface of the feature.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `geojson`  | Feature or FeatureCollection | Feature or FeatureCollection on which the Point is to be found |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Feature  | Feature point which on the provided feature |\n\n```python\nfrom turfpy.measurement import point_on_feature\nfrom geojson import  Polygon, Feature\npoint = Polygon([[(116, -36), (131, -32), (146, -43), (155, -25), (133, -9), (111, -22), (116, -36)]])\nfeature = Feature(geometry=point)\npoint_on_feature(feature)\n```\n\n* Point In Polygon : Takes two Point and finds the geographic bearing between them.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Point  | Point or Point Feature |\n| `polygon`  | Polygon | Polygon or Polygon Feature |\n| `ignore_boundary`  | boolean(Optional) | Default value is False, specify whether to exclude boundary of the given polygon or not |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `result`  | boolean  | True if the given Point is in Polygons else False |\n\n```python\nfrom turfpy.measurement import boolean_point_in_polygon\nfrom geojson import Point, MultiPolygon, Feature\npoint = Feature(geometry=Point([-77, 44]))\npolygon = Feature(geometry=MultiPolygon([([(-81, 41), (-81, 47), (-72, 47), (-72, 41), (-81, 41)],),\n([(3.78, 9.28), (-130.91, 1.52), (35.12, 72.234), (3.78, 9.28)],)]))\nboolean_point_in_polygon(point, polygon)\n```\n\n* Tangent To Polygon : Finds the tangents of a (Multi)Polygon from a Point.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Point  | Point or Point Feature |\n| `polygon`  | Polygon | (Multi)Polygon or (Multi)Polygon Feature |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `points`  | FeatureCollection  | FeatureCollection of two tangent Point Feature |\n\n```python\nfrom turfpy.measurement import polygon_tangents\nfrom geojson import Polygon, Point, Feature\npoint = Feature(geometry=Point([61, 5]))\npolygon = Feature(geometry=Polygon([[(11, 0), (22, 4), (31, 0), (31, 11), (21, 15), (11, 11), (11, 0)]]))\npolygon_tangents(point, polygon)\n```\n\n* Point To Line Distance : Returns the minimum distance between a Point and any segment of the LineString.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `point`  | Point or Feature  | Point or Point Feature |\n| `line`  | LineString or Feature | (Multi)Polygon or (Multi)Polygon Feature |\n| `units`  | str(Optional) | Unit of distance, default is 'km' refer [Units type](#units-type) section |\n| `method`  | str(Optional) | Method to calculate distance, value can be `geodesic` or `planar`, default value is geodesic |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `distance`  | fload  | Approximate distance between the LineString and Point |\n\n```python\nfrom turfpy.measurement import point_to_line_distance\nfrom geojson import LineString, Point, Feature\npoint = Feature(geometry=Point([0, 0]))\nlinestring = Feature(geometry=LineString([(1, 1),(-1, 1)]))\npoint_to_line_distance(point, linestring)\n```\n\n* Rhumb Bearing : Takes two points and finds the bearing angle between them along a Rhumb line i.e. the angle measured in degrees start the north line (0 degrees).\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `start`  | Point or Feature  | Start Point or Point Feature |\n| `end`  | Point or Feature  | End Point or Point Feature |\n| `final`  | boolean(Optional) | Calculates the final bearing if True, default value is False |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `bearing`  | fload  | Bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise) |\n\n```python\nfrom turfpy.measurement import rhumb_bearing\nfrom geojson import Feature, Point\nstart = Feature(geometry=Point([-75.343, 39.984]))\nend = Feature(geometry=Point([-75.534, 39.123]))\nrhumb_bearing(start, end, True)\n```\n\n* Rhumb Destination : Returns the destination Point having travelled the given distance along a Rhumb line from the origin Point with the (varant) given bearing.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `origin`  | Point  | Start point |\n| `distance`  | float | Distance upto which the destination is from origin |\n| `bearing`  | bearing  | Varant bearing angle ranging from -180 to 180 degrees from north |\n| `options`  | dict(Optional) | Option like units of distance and properties to be passed to destination point feature, default is 'km' refer [Units type](#units-type) section, example {'units':'mi', 'properties': {\"marker-color\": \"F00\"} |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `Destination`  | Feature  | Destination point in at the given distance and given direction |\n\n```python\nfrom turfpy.measurement import rhumb_destination\nfrom geojson import Point, Feature\nstart = Feature(geometry=Point([-75.343, 39.984]), properties={\"marker-color\": \"F00\"})\ndistance = 50\nbearing = 90\nrhumb_destination(start, distance, bearing, {'units':'mi', 'properties': {\"marker-color\": \"F00\"}})\n```\n\n* Rhumb Distance : Calculates the distance along a rhumb line between two points in degrees, radians, miles, or kilometers.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `start`  | Point  | Start Point or Point Feature from which distance to be calculated |\n| `to`  | float | End Point or Point Feature upto which distance to be calculated |\n| `units`  | str(Optional) | Unit of distance, default is 'km' refer [Units type](#units-type) section |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `Destination`  | Feature  | Destination point in at the given distance and given direction |\n\n```python\nfrom turfpy.measurement import rhumb_distance\nfrom geojson import Point, Feature\nstart = Feature(geometry=Point([-75.343, 39.984]))\nend = Feature(geometry=Point([-75.534, 39.123]))\nrhumb_distance(start, end,'mi')\n```\n\n* Square : Takes a bounding box and calculates the minimum square bounding box that would contain the input.\n\n| Argument  | Type | Description |\n| ------- | ------ | ----------- |\n| `bbox`  | list  | Bounding box extent in west, south, east, north order |\n\n| Return  | Type | Description |\n| ------- | ------ | ----------- |\n| `Destination`  | list  | A square surrounding bbox |\n\n```python\nfrom turfpy.measurement import square\nbbox = [-20, -20, -15, 0]\nsquare(bbox)\n```\n\n## Units Type\nSome functionalities support `units` as a parameter, default values of `units` is `kilometers` for the functionalities that have units are parameters. The values for it are:\n```text\n'km' = kilometers\n'm' = meters\n'mi = miles\n'ft' = feets\n'in' = inches\n'deg' = degrees\n'cen' = centimeters\n'rad' = radians\n'naut' = nauticals\n'yd' = yards\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "Python Library for Turf", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "turfpy", "package_url": "https://pypi.org/project/turfpy/", "platform": "", "project_url": "https://pypi.org/project/turfpy/", "project_urls": {"Source": "https://github.com/omanges/turfpy"}, "release_url": "https://pypi.org/project/turfpy/0.0.1/", "requires_dist": ["geojson", "mypy"], "requires_python": "", "summary": "This is Python library for performing geo spatial data analysis.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Turfpy</h1>\n<p>This is Python library for performing geo spatial data analysis. This is an python alternative for turf.js.</p>\n<h2>Installation</h2>\n<p>You can install the Turfpy from <a href=\"https://pypi.org/project/turfpy/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre><code>pip install turfpy\n</code></pre>\n<p>It supports various functionalities, following section will show usage for each</p>\n<h2>Example :</h2>\n<ul>\n<li>Bearing : Takes two Point and finds the geographic bearing between them.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>start</code></td>\n<td>Point</td>\n<td>Start point</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td>Point</td>\n<td>Ending point</td>\n</tr>\n<tr>\n<td><code>final</code></td>\n<td>Boolean(Optional)</td>\n<td>Calculates the final bearing if true</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bearing</code></td>\n<td>float</td>\n<td>Calculates bearing</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy</span> <span class=\"kn\">import</span> <span class=\"n\">measurement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">75.343</span><span class=\"p\">,</span> <span class=\"mf\">39.984</span><span class=\"p\">))</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">75.534</span><span class=\"p\">,</span> <span class=\"mf\">39.123</span><span class=\"p\">))</span>\n<span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">bearing</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"n\">end</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Distance : Calculates distance between two Points. A point is containing latitude and logitude in decimal degrees and <code>unit</code> is optional.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point1</code></td>\n<td>Point</td>\n<td>Start point</td>\n</tr>\n<tr>\n<td><code>point2</code></td>\n<td>Point</td>\n<td>Ending point</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>str(Optional)</td>\n<td>A string containing unit, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>distance</code></td>\n<td>float</td>\n<td>The distance between the two points in the requested unit</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy</span> <span class=\"kn\">import</span> <span class=\"n\">measurement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">75.343</span><span class=\"p\">,</span> <span class=\"mf\">39.984</span><span class=\"p\">))</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">75.534</span><span class=\"p\">,</span> <span class=\"mf\">39.123</span><span class=\"p\">))</span>\n<span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"n\">end</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Area : This function calculates the area of the Geojson object given as input.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Any Geojson Type</td>\n<td>Geojson object for which area is to be found</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>area</code></td>\n<td>float</td>\n<td>Area for the given Geojson object</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">area</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Feature</span><span class=\"p\">,</span> <span class=\"n\">FeatureCollection</span>\n\n<span class=\"n\">geometry_1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]],</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">};</span>\n<span class=\"n\">geometry_2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mf\">2.38</span><span class=\"p\">,</span> <span class=\"mf\">57.322</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">23.194</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.28</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">120.43</span><span class=\"p\">,</span> <span class=\"mf\">19.15</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.38</span><span class=\"p\">,</span> <span class=\"mf\">57.322</span><span class=\"p\">]]],</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">};</span>\n<span class=\"n\">feature_1</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">geometry_1</span><span class=\"p\">)</span>\n<span class=\"n\">feature_2</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">geometry_2</span><span class=\"p\">)</span>\n<span class=\"n\">feature_collection</span> <span class=\"o\">=</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">([</span><span class=\"n\">feature_1</span><span class=\"p\">,</span> <span class=\"n\">feature_2</span><span class=\"p\">])</span>\n\n<span class=\"n\">area</span><span class=\"p\">(</span><span class=\"n\">feature_collection</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Bbox : This function is used to generate bounding box coordinates for given geojson.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Any Geojson Type</td>\n<td>Geojson object for which bounding box is to be found</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>list</td>\n<td>Bounding box points for the given Geojson object</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">bbox</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Polygon</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Polygon</span><span class=\"p\">([[(</span><span class=\"mf\">2.38</span><span class=\"p\">,</span> <span class=\"mf\">57.322</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">23.194</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.28</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">120.43</span><span class=\"p\">,</span> <span class=\"mf\">19.15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">2.38</span><span class=\"p\">,</span> <span class=\"mf\">57.322</span><span class=\"p\">)]])</span>\n<span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Bbox Polygon : To generate a Polygon Feature for the bounding box generated using bbox.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>list</td>\n<td>Bounding box generated for a geojson</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>dict(Optional)</td>\n<td>Properties to be added to the returned feature</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox_polygon</code></td>\n<td>Polygon</td>\n<td>Polygon for the given bounding box coordinates</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">bbox_polygon</span><span class=\"p\">,</span> <span class=\"n\">bbox</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Polygon</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Polygon</span><span class=\"p\">([[(</span><span class=\"mf\">2.38</span><span class=\"p\">,</span> <span class=\"mf\">57.322</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">23.194</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.28</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">120.43</span><span class=\"p\">,</span> <span class=\"mf\">19.15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">2.38</span><span class=\"p\">,</span> <span class=\"mf\">57.322</span><span class=\"p\">)]])</span>\n<span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">bbox_polygon</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Center : Takes a Feature or FeatureCollection and returns the absolute center point of all features.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Any Geojson Type</td>\n<td>GeoJSON for which centered to be calculated</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>dict(Optional)</td>\n<td>Properties to be added to the returned feature</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>center</code></td>\n<td>Point</td>\n<td>Point feature for the center</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">center</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Feature</span><span class=\"p\">,</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.522259</span><span class=\"p\">,</span> <span class=\"mf\">35.4691</span><span class=\"p\">)))</span>\n<span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.502754</span><span class=\"p\">,</span> <span class=\"mf\">35.463455</span><span class=\"p\">)))</span>\n<span class=\"n\">f3</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.508269</span><span class=\"p\">,</span> <span class=\"mf\">35.463245</span><span class=\"p\">)))</span>\n<span class=\"n\">feature_collection</span> <span class=\"o\">=</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">([</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">f3</span><span class=\"p\">])</span>\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">center</span><span class=\"p\">(</span><span class=\"n\">feature_collection</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Envelope : Takes any number of features and returns a rectangular Polygon that encompasses all vertices.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Any Geojson Type</td>\n<td>Geojson object for which envelope is to be found</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>Polygon</td>\n<td>Returns envelope i.e bounding box polygon</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">envelope</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Feature</span><span class=\"p\">,</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.522259</span><span class=\"p\">,</span> <span class=\"mf\">35.4691</span><span class=\"p\">)))</span>\n<span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.502754</span><span class=\"p\">,</span> <span class=\"mf\">35.463455</span><span class=\"p\">)))</span>\n<span class=\"n\">f3</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.508269</span><span class=\"p\">,</span> <span class=\"mf\">35.463245</span><span class=\"p\">)))</span>\n<span class=\"n\">feature_collection</span> <span class=\"o\">=</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">([</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">f3</span><span class=\"p\">])</span>\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">envelope</span><span class=\"p\">(</span><span class=\"n\">feature_collection</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Length : Takes a geojson and measures its length in the specified units.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Any Geojson Type</td>\n<td>Geojson for which the length is to be determined</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>str(Optional)</td>\n<td>Properties to be added to the returned feature, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>length</code></td>\n<td>float</td>\n<td>Length of the geojson in specified units</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">length</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">LineString</span>\n<span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">LineString</span><span class=\"p\">([(</span><span class=\"mi\">115</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">131</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">22</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">143</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">34</span><span class=\"p\">)])</span>\n<span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Destination : Takes a Point and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers and bearing in degrees.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>origin</code></td>\n<td>Point</td>\n<td>Start point</td>\n</tr>\n<tr>\n<td><code>distance</code></td>\n<td>float</td>\n<td>distance upto which the destination is from origin</td>\n</tr>\n<tr>\n<td><code>bearing</code></td>\n<td>bearing</td>\n<td>Direction in which is the destination is from origin</td>\n</tr>\n<tr>\n<td><code>options</code></td>\n<td>dict(Optional)</td>\n<td>Option like units of distance and properties to be passed to destination point feature, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section, example {'units':'mi', 'properties': {\"marker-color\": \"F00\"}</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Destination</code></td>\n<td>Feature</td>\n<td>Destination point in at the given distance and given direction</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">destination</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n<span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">75.343</span><span class=\"p\">,</span> <span class=\"mf\">39.984</span><span class=\"p\">])</span>\n<span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">bearing</span> <span class=\"o\">=</span> <span class=\"mi\">90</span>\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'units'</span><span class=\"p\">:</span> <span class=\"s1\">'mi'</span><span class=\"p\">}</span>\n<span class=\"n\">destination</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span><span class=\"n\">distance</span><span class=\"p\">,</span><span class=\"n\">bearing</span><span class=\"p\">,</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Centroid : Takes one or more features and calculates the centroid using the mean of all vertices.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Any Geojson Type</td>\n<td>Input features</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>dict(Optional)</td>\n<td>Properties to be added to the returned feature</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>centroid</code></td>\n<td>Point</td>\n<td>Point feature which is the centroid of the given features</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">centroid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Polygon</span>\n<span class=\"n\">polygon</span> <span class=\"o\">=</span> <span class=\"n\">Polygon</span><span class=\"p\">([[(</span><span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">)]])</span>\n<span class=\"n\">centroid</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Along : This function is used identify a Point at a specified distance along a LineString.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>line</code></td>\n<td>Feature</td>\n<td>LineString on which the point to be identified</td>\n</tr>\n<tr>\n<td><code>dist</code></td>\n<td>dict(Optional)</td>\n<td>Distance from the start of the LineString</td>\n</tr>\n<tr>\n<td><code>unit</code></td>\n<td>str(Optional)</td>\n<td>Unit of distance, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Feature</td>\n<td>Point at the distance on the LineString passed</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">along</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">LineString</span>\n<span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">LineString</span><span class=\"p\">([(</span><span class=\"o\">-</span><span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">)])</span>\n<span class=\"n\">along</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"s1\">'mi'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Midpoint : This function is used to get midpoint between any the two points.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point1</code></td>\n<td>Point</td>\n<td>First point</td>\n</tr>\n<tr>\n<td><code>point2</code></td>\n<td>Point</td>\n<td>Second Point</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Feature</td>\n<td>Point which is the midpoint of the two points given as input</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">midpoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n<span class=\"n\">point1</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">144.834823</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">37.771257</span><span class=\"p\">])</span>\n<span class=\"n\">point2</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">145.14244</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">37.830937</span><span class=\"p\">])</span>\n<span class=\"n\">midpoint</span><span class=\"p\">(</span><span class=\"n\">point1</span><span class=\"p\">,</span> <span class=\"n\">point2</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Nearest Point : Takes a reference Point Feature and FeatureCollection of point features and returns the point from the FeatureCollection closest to the reference Point Feature.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>target_point</code></td>\n<td>Feature</td>\n<td>Feature Point of reference</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>FeatureCollection of points</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Feature</td>\n<td>Point Feature from the FeatureCollection which is closest to the reference Point</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">nearest_point</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">Feature</span><span class=\"p\">,</span> <span class=\"n\">FeatureCollection</span>\n<span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">28.96991729736328</span><span class=\"p\">,</span><span class=\"mf\">41.01190001748873</span><span class=\"p\">]))</span>\n<span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">28.948459</span><span class=\"p\">,</span> <span class=\"mf\">41.024204</span><span class=\"p\">]))</span>\n<span class=\"n\">f3</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">28.938674</span><span class=\"p\">,</span> <span class=\"mf\">41.013324</span><span class=\"p\">]))</span>\n<span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">([</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span> <span class=\"p\">,</span><span class=\"n\">f3</span><span class=\"p\">])</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">28.973865</span><span class=\"p\">,</span> <span class=\"mf\">41.011122</span><span class=\"p\">]))</span>\n<span class=\"n\">nearest_point</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"p\">,</span><span class=\"n\">fc</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Point On Feature : Takes a Feature or FeatureCollection and returns a Point guaranteed to be on the surface of the feature.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>geojson</code></td>\n<td>Feature or FeatureCollection</td>\n<td>Feature or FeatureCollection on which the Point is to be found</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Feature</td>\n<td>Feature point which on the provided feature</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">point_on_feature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span>  <span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">Feature</span>\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">Polygon</span><span class=\"p\">([[(</span><span class=\"mi\">116</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">131</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">43</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">155</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">133</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">22</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">116</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">)]])</span>\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">point</span><span class=\"p\">)</span>\n<span class=\"n\">point_on_feature</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Point In Polygon : Takes two Point and finds the geographic bearing between them.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Point</td>\n<td>Point or Point Feature</td>\n</tr>\n<tr>\n<td><code>polygon</code></td>\n<td>Polygon</td>\n<td>Polygon or Polygon Feature</td>\n</tr>\n<tr>\n<td><code>ignore_boundary</code></td>\n<td>boolean(Optional)</td>\n<td>Default value is False, specify whether to exclude boundary of the given polygon or not</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>result</code></td>\n<td>boolean</td>\n<td>True if the given Point is in Polygons else False</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">boolean_point_in_polygon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">MultiPolygon</span><span class=\"p\">,</span> <span class=\"n\">Feature</span>\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">]))</span>\n<span class=\"n\">polygon</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">MultiPolygon</span><span class=\"p\">([([(</span><span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">)],),</span>\n<span class=\"p\">([(</span><span class=\"mf\">3.78</span><span class=\"p\">,</span> <span class=\"mf\">9.28</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">130.91</span><span class=\"p\">,</span> <span class=\"mf\">1.52</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">35.12</span><span class=\"p\">,</span> <span class=\"mf\">72.234</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">3.78</span><span class=\"p\">,</span> <span class=\"mf\">9.28</span><span class=\"p\">)],)]))</span>\n<span class=\"n\">boolean_point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Tangent To Polygon : Finds the tangents of a (Multi)Polygon from a Point.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Point</td>\n<td>Point or Point Feature</td>\n</tr>\n<tr>\n<td><code>polygon</code></td>\n<td>Polygon</td>\n<td>(Multi)Polygon or (Multi)Polygon Feature</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>FeatureCollection of two tangent Point Feature</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">polygon_tangents</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">Feature</span>\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"n\">polygon</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Polygon</span><span class=\"p\">([[(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]]))</span>\n<span class=\"n\">polygon_tangents</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Point To Line Distance : Returns the minimum distance between a Point and any segment of the LineString.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Point or Feature</td>\n<td>Point or Point Feature</td>\n</tr>\n<tr>\n<td><code>line</code></td>\n<td>LineString or Feature</td>\n<td>(Multi)Polygon or (Multi)Polygon Feature</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>str(Optional)</td>\n<td>Unit of distance, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section</td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td>str(Optional)</td>\n<td>Method to calculate distance, value can be <code>geodesic</code> or <code>planar</code>, default value is geodesic</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>distance</code></td>\n<td>fload</td>\n<td>Approximate distance between the LineString and Point</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">point_to_line_distance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">LineString</span><span class=\"p\">,</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">Feature</span>\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">linestring</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">LineString</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]))</span>\n<span class=\"n\">point_to_line_distance</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">linestring</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Rhumb Bearing : Takes two points and finds the bearing angle between them along a Rhumb line i.e. the angle measured in degrees start the north line (0 degrees).</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>start</code></td>\n<td>Point or Feature</td>\n<td>Start Point or Point Feature</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td>Point or Feature</td>\n<td>End Point or Point Feature</td>\n</tr>\n<tr>\n<td><code>final</code></td>\n<td>boolean(Optional)</td>\n<td>Calculates the final bearing if True, default value is False</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bearing</code></td>\n<td>fload</td>\n<td>Bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">rhumb_bearing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Feature</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">75.343</span><span class=\"p\">,</span> <span class=\"mf\">39.984</span><span class=\"p\">]))</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">75.534</span><span class=\"p\">,</span> <span class=\"mf\">39.123</span><span class=\"p\">]))</span>\n<span class=\"n\">rhumb_bearing</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Rhumb Destination : Returns the destination Point having travelled the given distance along a Rhumb line from the origin Point with the (varant) given bearing.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>origin</code></td>\n<td>Point</td>\n<td>Start point</td>\n</tr>\n<tr>\n<td><code>distance</code></td>\n<td>float</td>\n<td>Distance upto which the destination is from origin</td>\n</tr>\n<tr>\n<td><code>bearing</code></td>\n<td>bearing</td>\n<td>Varant bearing angle ranging from -180 to 180 degrees from north</td>\n</tr>\n<tr>\n<td><code>options</code></td>\n<td>dict(Optional)</td>\n<td>Option like units of distance and properties to be passed to destination point feature, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section, example {'units':'mi', 'properties': {\"marker-color\": \"F00\"}</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Destination</code></td>\n<td>Feature</td>\n<td>Destination point in at the given distance and given direction</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">rhumb_destination</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">Feature</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">75.343</span><span class=\"p\">,</span> <span class=\"mf\">39.984</span><span class=\"p\">]),</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"marker-color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"F00\"</span><span class=\"p\">})</span>\n<span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">bearing</span> <span class=\"o\">=</span> <span class=\"mi\">90</span>\n<span class=\"n\">rhumb_destination</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">bearing</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'units'</span><span class=\"p\">:</span><span class=\"s1\">'mi'</span><span class=\"p\">,</span> <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"marker-color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"F00\"</span><span class=\"p\">}})</span>\n</pre>\n<ul>\n<li>Rhumb Distance : Calculates the distance along a rhumb line between two points in degrees, radians, miles, or kilometers.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>start</code></td>\n<td>Point</td>\n<td>Start Point or Point Feature from which distance to be calculated</td>\n</tr>\n<tr>\n<td><code>to</code></td>\n<td>float</td>\n<td>End Point or Point Feature upto which distance to be calculated</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>str(Optional)</td>\n<td>Unit of distance, default is 'km' refer <a href=\"#units-type\" rel=\"nofollow\">Units type</a> section</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Destination</code></td>\n<td>Feature</td>\n<td>Destination point in at the given distance and given direction</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">rhumb_distance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">Feature</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">75.343</span><span class=\"p\">,</span> <span class=\"mf\">39.984</span><span class=\"p\">]))</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">75.534</span><span class=\"p\">,</span> <span class=\"mf\">39.123</span><span class=\"p\">]))</span>\n<span class=\"n\">rhumb_distance</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span><span class=\"s1\">'mi'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Square : Takes a bounding box and calculates the minimum square bounding box that would contain the input.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>list</td>\n<td>Bounding box extent in west, south, east, north order</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Return</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Destination</code></td>\n<td>list</td>\n<td>A square surrounding bbox</td>\n</tr></tbody></table>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turfpy.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">square</span>\n<span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">)</span>\n</pre>\n<h2>Units Type</h2>\n<p>Some functionalities support <code>units</code> as a parameter, default values of <code>units</code> is <code>kilometers</code> for the functionalities that have units are parameters. The values for it are:</p>\n<pre>'km' = kilometers\n'm' = meters\n'mi = miles\n'ft' = feets\n'in' = inches\n'deg' = degrees\n'cen' = centimeters\n'rad' = radians\n'naut' = nauticals\n'yd' = yards\n</pre>\n\n          </div>"}, "last_serial": 6855327, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "635f43a2f59ef9872a0966b26971bc18", "sha256": "0cd251fec84661cc39023587f475dcf3ab0a25e4a19358636435f9bc52c0c6ec"}, "downloads": -1, "filename": "turfpy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "635f43a2f59ef9872a0966b26971bc18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19976, "upload_time": "2020-03-21T12:49:35", "upload_time_iso_8601": "2020-03-21T12:49:35.815498Z", "url": "https://files.pythonhosted.org/packages/d0/a1/ae66c4bce19814727ff8bd4b08c44d1f6fbd434b11a3c2da3c52a4a4c430/turfpy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50ff0ed6af764c7d906bc6cdf1aa0e24", "sha256": "7cea55386935d3f951715cd5750bd34a6efcbaa79200e0711314b18e988a9043"}, "downloads": -1, "filename": "turfpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "50ff0ed6af764c7d906bc6cdf1aa0e24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21869, "upload_time": "2020-03-21T12:49:38", "upload_time_iso_8601": "2020-03-21T12:49:38.929930Z", "url": "https://files.pythonhosted.org/packages/5c/44/55781d8dba358d2a88d83767fe6d69d46574dec2016177159fc2b565b3c4/turfpy-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "635f43a2f59ef9872a0966b26971bc18", "sha256": "0cd251fec84661cc39023587f475dcf3ab0a25e4a19358636435f9bc52c0c6ec"}, "downloads": -1, "filename": "turfpy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "635f43a2f59ef9872a0966b26971bc18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19976, "upload_time": "2020-03-21T12:49:35", "upload_time_iso_8601": "2020-03-21T12:49:35.815498Z", "url": "https://files.pythonhosted.org/packages/d0/a1/ae66c4bce19814727ff8bd4b08c44d1f6fbd434b11a3c2da3c52a4a4c430/turfpy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50ff0ed6af764c7d906bc6cdf1aa0e24", "sha256": "7cea55386935d3f951715cd5750bd34a6efcbaa79200e0711314b18e988a9043"}, "downloads": -1, "filename": "turfpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "50ff0ed6af764c7d906bc6cdf1aa0e24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21869, "upload_time": "2020-03-21T12:49:38", "upload_time_iso_8601": "2020-03-21T12:49:38.929930Z", "url": "https://files.pythonhosted.org/packages/5c/44/55781d8dba358d2a88d83767fe6d69d46574dec2016177159fc2b565b3c4/turfpy-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:36 2020"}