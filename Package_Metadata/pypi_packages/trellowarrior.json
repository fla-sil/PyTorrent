{"info": {"author": "\u00d3scar Garc\u00eda Amor", "author_email": "ogarcia@connectical.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# TrelloWarrior\n\nTool to sync Taskwarrior projects with Trello boards.\n\n## Requirements\n\n### In Taskwarrior\n\nFirst for all you need configure some UDAs in Taskwarrior to store some\nTrello data. This is very, very, very important. If you dont have the UDAs\nconfigured before run TrelloWarrior you'll destroy your Taskwarrior tasks\ndata.\n\nTo set UDAs in Taskwarrior simply edit `.taskrc` and add the following\nlines.\n\n```\n# UDAs\nuda.trelloid.type=string\nuda.trelloid.label=Trello ID\nuda.trellolistname.type=string\nuda.trellolistname.label=Trello List Name\n```\n\nThe first UDA `trelloid` is used to store the Trello Card ID and establish\nan equivalence between Trello Cards and Taskwarrior Tasks. Note that you\nnever, never, never, never, (period), should edit this field.\n\nThe second UDA `trellolistname` is used to determine the Trello List where\nthe Card/Task is stored. You can edit this field without problems to move\nthe task to another list.\n\n### For TrelloWarrior\n\n#### Prepare the environment\n\nFor run TrelloWarrior you need to install\n[tasklib](https://github.com/robgolding63/tasklib) and\n[py-trello](https://github.com/sarumont/py-trello). TrelloWarrior uses these\nPython helpers to comunicate with Taskwarrior and Trello.\n\nYou can use your package system to install it, but the easy way is to use\na Python 2.7 virtualenv:\n\n```sh\nvirtualenv2 trw\n. trw/bin/activate\npip install tasklib\npip install py-trello\n```\n\nNote that in several distributions the Virtualenv executable is called\nsimply `virtualenv` instead `virtualenv2`.\n\n#### Get the keys\n\nTrelloWarrior access to Trello via API. You need generate an access token\nfor it.\n\nFirst go to: https://trello.com/app-key to get your API Key and API Secret.\n\nIn a bash compatible shell, run the following exports to config (configure\nwith your data).\n\n```sh\nexport TRELLO_API_KEY=\"your_api_key\"\nexport TRELLO_API_SECRET=\"your_api_secret\"\nexport TRELLO_NAME=\"TrelloWarrior\"\nexport TRELLO_EXPIRATION=\"30days\"\n```\n\nNote: You can set the `TRELLO_EXPIRATION` to `1hour`, `1day`, `30days`,\n`never`. We recomend use `30days` for tests and `never` for daily use.\n\nNow run the Trello util script in the Virtualenv to get the token and token\nsecret.\n\n```sh\npython trw/lib/python2.7/site-packages/trello/util.py\n```\n\nThis return some like this.\n\n```\nRequest Token:\n    - oauth_token        = 1c5ad394834dde42a7655437ab3e0060\n    - oauth_token_secret = dffc3a62622ef450028f685406bceacc\n\nGo to the following link in your browser:\nhttps://trello.com/1/OAuthAuthorizeToken?oauth_token=1c5ad334134dde46a8659437ab3e0069&scope=read,write&expiration=30days&name=trellowarrior\nHave you authorized me? (y/n)\n```\n\nYou must visit the link to authorize the token. This gives you a pin like\nthis.\n\n```\nYou have granted access to your Trello information.\n\nTo complete the process, please give this verification code:\n\n  17894a35a2f745c3a184cf8e4bb5f1f9\n```\n\nRespond yes, and insert the pin.\n\n```\nWhat is the PIN? 17894a35a2f745c3a184cf8e4bb5f1f9\nAccess Token:\n    - oauth_token = 0469c6271416af6eae10123fdae0afc1135e9082bb0b5ba87b2f8a1db9d7f0b1\n    - oauth_token_secret = a978b159692cfc315377790669ac99a0\n\nYou may now access protected resources using the access tokens above.\n```\n\nFinaly you have access tokens to put in TrelloWarrior config file.\n\n## Configuration\n\nThe TrelloWarrior config is very easy. There is a `trellowarrior.conf`\nsample file that you can modify to set with your data.\n\n### DEFAULT Section\n\nIn the `DEFAULT` section, it is mandatory to set your Trello API key and\ntoken and, at least, one sync project.\nThe sync project corresponds to the following sections\nthat define the Taskwarrior project and Trello board equivalence.\n\n* `taskwarrior_taskrc_location` Optional. Define where your *taskrc* file is located. Default: `~/.taskrc`\n* `taskwarrior_data_location` Optional. Define where your *task* data dir is located. Default: `~/.task`\n\n* `trello_api_key` MANDATORY. Your Trello Api Key.\n* `trello_api_secret` MANDATORY. Your Trello Api Secret.\n* `trello_token` MANDATORY. Your Trello Token.\n* `trello_token_secret` MANDATORY. Your Trello Token Secret.\n\n* `sync_projects` MANDATORY. Define what sections are loaded, separated by spaces.\n\n### Project/Board Sections\n\nThe Project/Board sections are called from `sync_projects` and define the\nequivalence between Taskwarrior and Trello.\n\n* `tw_project_name` MANDATORY. The name of project in Taskwarrior.\n* `trello_board_name` MANDATORY. The name of Trello Board.\n* `trello_todo_list` Optional. The name of Trello list where new pending tasks are stored. Default: `To Do`\n* `trello_doing_list` Optional. The name of Trello list for active tasks. Default: `Doing`\n* `trello_done_list` Optional. The name of Trello list for done taks. Default: `Done`\n\n## Equivalences\n\n| Taskwarrior         | Trello        |\n|---------------------|---------------|\n| UDA: trelloid       | Card ID       |\n| UDA: trellolistname | List Name     |\n| Project             | Board Name    |\n| Description         | Card Name     |\n| Due                 | Card Due Date |\n\n## Known limitations\n\nThe main objective of TaskWarrior is to be simple so it **doesn't manage\ncollisions**. The sync strategy is **last modified wins**, this means that if\nyou do a modification in Trello and later a modification in Taskwarrior,\nTrelloWarrior does the sync and keeps the Taskwarrior data, because it is\nthe last touched.\n\nYou can have infinite lists in your Trello, but all of them are considered\nas *pending*. You only can have one *doing* list and one *done* list, but\nthese lists can be configured.\n\nIf you have several boards with same name, TrelloWarrior always picks the\nfirst one.\n\nFor now, only syncs *Title/Description*, *Due dates* and *Status*.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ogarcia/trellowarrior", "keywords": "board easy project sync task taskwarrior tool trello", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "trellowarrior", "package_url": "https://pypi.org/project/trellowarrior/", "platform": "", "project_url": "https://pypi.org/project/trellowarrior/", "project_urls": {"Homepage": "https://github.com/ogarcia/trellowarrior"}, "release_url": "https://pypi.org/project/trellowarrior/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Tool to sync Taskwarrior projects with Trello boards", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # TrelloWarrior<br><br>Tool to sync Taskwarrior projects with Trello boards.<br><br>## Requirements<br><br>### In Taskwarrior<br><br>First for all you need configure some UDAs in Taskwarrior to store some<br>Trello data. This is very, very, very important. If you dont have the UDAs<br>configured before run TrelloWarrior you'll destroy your Taskwarrior tasks<br>data.<br><br>To set UDAs in Taskwarrior simply edit `.taskrc` and add the following<br>lines.<br><br>```<br># UDAs<br>uda.trelloid.type=string<br>uda.trelloid.label=Trello ID<br>uda.trellolistname.type=string<br>uda.trellolistname.label=Trello List Name<br>```<br><br>The first UDA `trelloid` is used to store the Trello Card ID and establish<br>an equivalence between Trello Cards and Taskwarrior Tasks. Note that you<br>never, never, never, never, (period), should edit this field.<br><br>The second UDA `trellolistname` is used to determine the Trello List where<br>the Card/Task is stored. You can edit this field without problems to move<br>the task to another list.<br><br>### For TrelloWarrior<br><br>#### Prepare the environment<br><br>For run TrelloWarrior you need to install<br>[tasklib](https://github.com/robgolding63/tasklib) and<br>[py-trello](https://github.com/sarumont/py-trello). TrelloWarrior uses these<br>Python helpers to comunicate with Taskwarrior and Trello.<br><br>You can use your package system to install it, but the easy way is to use<br>a Python 2.7 virtualenv:<br><br>```sh<br>virtualenv2 trw<br>. trw/bin/activate<br>pip install tasklib<br>pip install py-trello<br>```<br><br>Note that in several distributions the Virtualenv executable is called<br>simply `virtualenv` instead `virtualenv2`.<br><br>#### Get the keys<br><br>TrelloWarrior access to Trello via API. You need generate an access token<br>for it.<br><br>First go to: https://trello.com/app-key to get your API Key and API Secret.<br><br>In a bash compatible shell, run the following exports to config (configure<br>with your data).<br><br>```sh<br>export TRELLO_API_KEY=\"your_api_key\"<br>export TRELLO_API_SECRET=\"your_api_secret\"<br>export TRELLO_NAME=\"TrelloWarrior\"<br>export TRELLO_EXPIRATION=\"30days\"<br>```<br><br>Note: You can set the `TRELLO_EXPIRATION` to `1hour`, `1day`, `30days`,<br>`never`. We recomend use `30days` for tests and `never` for daily use.<br><br>Now run the Trello util script in the Virtualenv to get the token and token<br>secret.<br><br>```sh<br>python trw/lib/python2.7/site-packages/trello/util.py<br>```<br><br>This return some like this.<br><br>```<br>Request Token:<br>    - oauth_token        = 1c5ad394834dde42a7655437ab3e0060<br>    - oauth_token_secret = dffc3a62622ef450028f685406bceacc<br><br>Go to the following link in your browser:<br>https://trello.com/1/OAuthAuthorizeToken?oauth_token=1c5ad334134dde46a8659437ab3e0069&amp;scope=read,write&amp;expiration=30days&amp;name=trellowarrior<br>Have you authorized me? (y/n)<br>```<br><br>You must visit the link to authorize the token. This gives you a pin like<br>this.<br><br>```<br>You have granted access to your Trello information.<br><br>To complete the process, please give this verification code:<br><br>  17894a35a2f745c3a184cf8e4bb5f1f9<br>```<br><br>Respond yes, and insert the pin.<br><br>```<br>What is the PIN? 17894a35a2f745c3a184cf8e4bb5f1f9<br>Access Token:<br>    - oauth_token = 0469c6271416af6eae10123fdae0afc1135e9082bb0b5ba87b2f8a1db9d7f0b1<br>    - oauth_token_secret = a978b159692cfc315377790669ac99a0<br><br>You may now access protected resources using the access tokens above.<br>```<br><br>Finaly you have access tokens to put in TrelloWarrior config file.<br><br>## Configuration<br><br>The TrelloWarrior config is very easy. There is a `trellowarrior.conf`<br>sample file that you can modify to set with your data.<br><br>### DEFAULT Section<br><br>In the `DEFAULT` section, it is mandatory to set your Trello API key and<br>token and, at least, one sync project.<br>The sync project corresponds to the following sections<br>that define the Taskwarrior project and Trello board equivalence.<br><br>* `taskwarrior_taskrc_location` Optional. Define where your *taskrc* file is located. Default: `~/.taskrc`<br>* `taskwarrior_data_location` Optional. Define where your *task* data dir is located. Default: `~/.task`<br><br>* `trello_api_key` MANDATORY. Your Trello Api Key.<br>* `trello_api_secret` MANDATORY. Your Trello Api Secret.<br>* `trello_token` MANDATORY. Your Trello Token.<br>* `trello_token_secret` MANDATORY. Your Trello Token Secret.<br><br>* `sync_projects` MANDATORY. Define what sections are loaded, separated by spaces.<br><br>### Project/Board Sections<br><br>The Project/Board sections are called from `sync_projects` and define the<br>equivalence between Taskwarrior and Trello.<br><br>* `tw_project_name` MANDATORY. The name of project in Taskwarrior.<br>* `trello_board_name` MANDATORY. The name of Trello Board.<br>* `trello_todo_list` Optional. The name of Trello list where new pending tasks are stored. Default: `To Do`<br>* `trello_doing_list` Optional. The name of Trello list for active tasks. Default: `Doing`<br>* `trello_done_list` Optional. The name of Trello list for done taks. Default: `Done`<br><br>## Equivalences<br><br>| Taskwarrior         | Trello        |<br>|---------------------|---------------|<br>| UDA: trelloid       | Card ID       |<br>| UDA: trellolistname | List Name     |<br>| Project             | Board Name    |<br>| Description         | Card Name     |<br>| Due                 | Card Due Date |<br><br>## Known limitations<br><br>The main objective of TaskWarrior is to be simple so it **doesn't manage<br>collisions**. The sync strategy is **last modified wins**, this means that if<br>you do a modification in Trello and later a modification in Taskwarrior,<br>TrelloWarrior does the sync and keeps the Taskwarrior data, because it is<br>the last touched.<br><br>You can have infinite lists in your Trello, but all of them are considered<br>as *pending*. You only can have one *doing* list and one *done* list, but<br>these lists can be configured.<br><br>If you have several boards with same name, TrelloWarrior always picks the<br>first one.<br><br>For now, only syncs *Title/Description*, *Due dates* and *Status*.\n          </div>"}, "last_serial": 4359763, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "5e0e8c47fb43ca1c7fc758d121877b21", "sha256": "e252246dfa54e668dcf6fc160dcf140c85ba42879c593ddc991bbf3d2c285bc3"}, "downloads": -1, "filename": "trellowarrior-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5e0e8c47fb43ca1c7fc758d121877b21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9138, "upload_time": "2018-10-10T12:23:52", "upload_time_iso_8601": "2018-10-10T12:23:52.580126Z", "url": "https://files.pythonhosted.org/packages/6b/3c/322968e767efaae9553e42347b0b381af463f4e4e89af1b1c31e2d13234f/trellowarrior-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e0e8c47fb43ca1c7fc758d121877b21", "sha256": "e252246dfa54e668dcf6fc160dcf140c85ba42879c593ddc991bbf3d2c285bc3"}, "downloads": -1, "filename": "trellowarrior-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5e0e8c47fb43ca1c7fc758d121877b21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9138, "upload_time": "2018-10-10T12:23:52", "upload_time_iso_8601": "2018-10-10T12:23:52.580126Z", "url": "https://files.pythonhosted.org/packages/6b/3c/322968e767efaae9553e42347b0b381af463f4e4e89af1b1c31e2d13234f/trellowarrior-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:27 2020"}