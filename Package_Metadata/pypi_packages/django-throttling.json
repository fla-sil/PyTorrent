{"info": {"author": "Igor", "author_email": "lilo.panic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: Page Counters", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware", "Topic :: Security", "Topic :: Utilities"], "description": "``django-throttling`` is a an attempt at creating a simple app that allows to apply \nfrequency limits to user's requests.\n\nFeatures\n========\n\n* per-view maintenance mode\n* per-view timeouts\n* view disabling\n* timeouts are configured with respect to ``request.method``\n* redirects\n* custom congestion views\n* view timeouts support callbacks\n\nRequirements\n============\n\n* django cache\n\nInstallation\n============\n\nDownload ``django-throttling`` using *one* of the following methods:\n\npip\n---\n\n    pip install django-throttling\n\nCheckout from GitHub\n--------------------\n\nUse one of the following commands::\n\n    git clone http://github.com/night-crawler/django-throttling.git\n\n\nConfiguration\n=============\n\nAdd 'django_throttling' into ``INSTALLED_APPS`` in\n``settings.py``::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'django_throttling',\n        ...\n    )\n\n\nMIDDLEWARE\n----------\n\nAdd ``django_throttling.middleware.ThrottleMiddleware`` to your\n``MIDDLEWARE_CLASSES`` in ``settings.py``. You may need 'request.user'\nor 'request.session', etc., so insert it in a right place according to\nyour needs.\n\n\nSETTINGS\n--------\n\n* ``DJANGO_THROTTLING_ENABLED``: enables 'django-throttling'. Default is ``False``.\n* ``DJANGO_THROTTLING_CACHE_EXPIRE``: how long should we keep last_access time.\n  If you set a large timeout for view, i.e. 24h, make sure that \n  ``DJANGO_THROTTLING_CACHE_EXPIRE`` is not less than your timeout.\n  Default is ``60*60``\n* ``DJANGO_THROTTLING_CACHE_PREFIX``: a cache prefix for keys. Default is\n  ``THROTTLING``\n* ``THROTTLING_CACHE_KEY_PATTERNS``: a dict with patterns for building the cache\n  keys. May be redefined in app settings. Defaults are:\n\n    * ``view_method``: cache key pattern for a view with a method specified. \n      Default pattern: ``%(prefix)s:%(view)s:%(uid)s:%(ip)s:%(method)s``\n    * ``view``: cache key pattern for a view. Default pattern:\n      ``%(prefix)s:%(view)s:%(uid)s:%(ip)s``\n    * ``site_method``: cache key pattern for a whole site with a method.\n      Default pattern: ``%(prefix)s:%(uid)s:%(ip)s:%(method)s``\n    * ``site``: a global pattern. Default: ``%(prefix)s:%(uid)s:%(ip)s``\n\n* ``DJANGO_THROTTLING_IGNORE_ADMINS``: ignore throttling if user is admin.\n  Default is ``True``.\n* ``DJANGO_THROTTLING``: a dict with app-path keys that configures the limits.\n  I.e.:\n  ``{'django.contrib.admin.options.change_view': {'all': 50, 'post': 5000}}``\n\nSee Usage. For more.\n\nUsage\n=====\n\nGlobal fall-backs\n-----------------\n\nFall-back timeouts setup for any request at the current site::\n\n    DJANGO_THROTTLING = {\n        'all': 1000,        \n        'post': 10000,\n        'congestion': 'forum.views.congestion',\n    }\n\n\nThat stands for \"one request per second, one POST request per 10s\".\n``congestion`` is a view called after the throttle check, if it failes.\nIt may be a ``uri``, i.e. ``/forum/congestion/``. Must uri start with '/'.\n\nThe simplest congestion view may look like::\n\n    def congestion(request, congestion_bundle):\n        user = request.user\n        progress = int(float(congestion_bundle['delta']) / congestion_bundle['timeout'] * 100)\n        c = Context({'user': user, 'congestion_bundle': congestion_bundle, 'progress': progress})\n        return render_to_response(get_theme_template(user, 'congestion.html'), c,\n            context_instance=RequestContext(request)\n        )\n\n\n``congestion_bundle`` is a dict, populated from a ``process_request()``::\n\n    congestion_bundle = {\n        'view_func': self.view_func,\n        'view_args': self.view_args,\n        'view_kwargs': self.view_kwargs,\n        'timeout': timeout,\n        'delta': delta,\n    }\n\n\nYou may disable all ``POST``'s on your site ('maintenance mode')::\n\n    DJANGO_THROTTLING = {\n        'all': 1000,\n        'post': False,\n        'congestion': 'forum.views.congestion',\n    }\n\nIn that case you will get `HttpResponseBadRequest()` on any POST.\n\n\nAlso, you may redirect your's `POST` users to an any page::\n\n    DJANGO_THROTTLING = {\n        'all': 1000,\n        'post': '/',\n        'congestion': 'forum.views.congestion',\n    }\n\n\nor you can use a custom maintenance view for it::\n\n\n    DJANGO_THROTTLING = {\n        'all': 1000,\n        'post': 'forum.views.maintenance',\n        'congestion': 'forum.views.congestion',\n    }\n\nMaintenance view may look like::\n\n    def maintenance(request, maintenance_bundle):\n        return HttpPreResponse(maintenance_bundle)\n\n\n\nIf you need a special cache key builder, or just to set a timeout is not enough\nfor you, you can use a callback for, i.e., `POST`, that have to make it's\nchecks and return a tuple of cache key and one of the supported timeout types::\n\n    DJANGO_THROTTLING = {\n        'all': 1000,\n        'post': 'callable:helpers.trash.my_callback',\n        'congestion': 'forum.views.congestion',\n    }\n\n\nAnd here's the example callback::\n\n    def my_callback(request, view_func, view_args, view_kwargs):\n        return 'some_strange_key_123', 10000\n\nThe full set of arguments the original view had is provided.\n\n\nAnd don't forget, that it is a *fallback* section, that used *ONLY* if\nyou have no detailed rule for view throttling.\n\n\nPer-view throttling\n-------------------\n\nPer-view throttling is almost the same::\n\n    DJANGO_THROTTLING = {\n        'all': 1000,\n        'post': 'callable:helpers.trash.my_callback',\n        'congestion': 'forum.views.congestion',\n\n        'django.contrib.admin.options.change_view': {\n            'post': False,            \n            'all': 0,\n            'uri': '/admin/forum/post/23/',\n            # 'post': 'callable:helpers.trash.my_callback',\n            # 'all': 4000,        \n        },\n    }\n\n\nFirst, it will disable all limits for `django.contrib.admin.options.change_view`.\nThen, it will disable the ``POST`` method for this view, **ONLY** if the\n``request.path`` starts with '/admin/forum/post/23/'. Other options from\nglobal setup are permitted.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/night-crawler/django-throttling", "keywords": "django,throttling", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-throttling", "package_url": "https://pypi.org/project/django-throttling/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-throttling/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/night-crawler/django-throttling"}, "release_url": "https://pypi.org/project/django-throttling/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Basic throttling app for Django", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">django-throttling</span></tt> is a an attempt at creating a simple app that allows to apply\nfrequency limits to user\u2019s requests.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>per-view maintenance mode</li>\n<li>per-view timeouts</li>\n<li>view disabling</li>\n<li>timeouts are configured with respect to <tt>request.method</tt></li>\n<li>redirects</li>\n<li>custom congestion views</li>\n<li>view timeouts support callbacks</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>django cache</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Download <tt><span class=\"pre\">django-throttling</span></tt> using <em>one</em> of the following methods:</p>\n<div id=\"pip\">\n<h3>pip</h3>\n<blockquote>\npip install django-throttling</blockquote>\n</div>\n<div id=\"checkout-from-github\">\n<h3>Checkout from GitHub</h3>\n<p>Use one of the following commands:</p>\n<pre>git clone http://github.com/night-crawler/django-throttling.git\n</pre>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Add \u2018django_throttling\u2019 into <tt>INSTALLED_APPS</tt> in\n<tt>settings.py</tt>:</p>\n<pre>INSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    ...\n    'django_throttling',\n    ...\n)\n</pre>\n<div id=\"middleware\">\n<h3>MIDDLEWARE</h3>\n<p>Add <tt>django_throttling.middleware.ThrottleMiddleware</tt> to your\n<tt>MIDDLEWARE_CLASSES</tt> in <tt>settings.py</tt>. You may need \u2018request.user\u2019\nor \u2018request.session\u2019, etc., so insert it in a right place according to\nyour needs.</p>\n</div>\n<div id=\"settings\">\n<h3>SETTINGS</h3>\n<ul>\n<li><p><tt>DJANGO_THROTTLING_ENABLED</tt>: enables \u2018django-throttling\u2019. Default is <tt>False</tt>.</p>\n</li>\n<li><p><tt>DJANGO_THROTTLING_CACHE_EXPIRE</tt>: how long should we keep last_access time.\nIf you set a large timeout for view, i.e. 24h, make sure that\n<tt>DJANGO_THROTTLING_CACHE_EXPIRE</tt> is not less than your timeout.\nDefault is <tt>60*60</tt></p>\n</li>\n<li><p><tt>DJANGO_THROTTLING_CACHE_PREFIX</tt>: a cache prefix for keys. Default is\n<tt>THROTTLING</tt></p>\n</li>\n<li><p><tt>THROTTLING_CACHE_KEY_PATTERNS</tt>: a dict with patterns for building the cache\nkeys. May be redefined in app settings. Defaults are:</p>\n<blockquote>\n<ul>\n<li><tt>view_method</tt>: cache key pattern for a view with a method specified.\nDefault pattern: <tt><span class=\"pre\">%(prefix)s:%(view)s:%(uid)s:%(ip)s:%(method)s</span></tt></li>\n<li><tt>view</tt>: cache key pattern for a view. Default pattern:\n<tt><span class=\"pre\">%(prefix)s:%(view)s:%(uid)s:%(ip)s</span></tt></li>\n<li><tt>site_method</tt>: cache key pattern for a whole site with a method.\nDefault pattern: <tt><span class=\"pre\">%(prefix)s:%(uid)s:%(ip)s:%(method)s</span></tt></li>\n<li><tt>site</tt>: a global pattern. Default: <tt><span class=\"pre\">%(prefix)s:%(uid)s:%(ip)s</span></tt></li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>DJANGO_THROTTLING_IGNORE_ADMINS</tt>: ignore throttling if user is admin.\nDefault is <tt>True</tt>.</p>\n</li>\n<li><p><tt>DJANGO_THROTTLING</tt>: a dict with app-path keys that configures the limits.\nI.e.:\n<tt>{'django.contrib.admin.options.change_view': {'all': 50, 'post': 5000}}</tt></p>\n</li>\n</ul>\n<p>See Usage. For more.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"global-fall-backs\">\n<h3>Global fall-backs</h3>\n<p>Fall-back timeouts setup for any request at the current site:</p>\n<pre>DJANGO_THROTTLING = {\n    'all': 1000,\n    'post': 10000,\n    'congestion': 'forum.views.congestion',\n}\n</pre>\n<p>That stands for \u201cone request per second, one POST request per 10s\u201d.\n<tt>congestion</tt> is a view called after the throttle check, if it failes.\nIt may be a <tt>uri</tt>, i.e. <tt>/forum/congestion/</tt>. Must uri start with \u2018/\u2019.</p>\n<p>The simplest congestion view may look like:</p>\n<pre>def congestion(request, congestion_bundle):\n    user = request.user\n    progress = int(float(congestion_bundle['delta']) / congestion_bundle['timeout'] * 100)\n    c = Context({'user': user, 'congestion_bundle': congestion_bundle, 'progress': progress})\n    return render_to_response(get_theme_template(user, 'congestion.html'), c,\n        context_instance=RequestContext(request)\n    )\n</pre>\n<p><tt>congestion_bundle</tt> is a dict, populated from a <tt>process_request()</tt>:</p>\n<pre>congestion_bundle = {\n    'view_func': self.view_func,\n    'view_args': self.view_args,\n    'view_kwargs': self.view_kwargs,\n    'timeout': timeout,\n    'delta': delta,\n}\n</pre>\n<p>You may disable all <tt>POST</tt>\u2019s on your site (\u2018maintenance mode\u2019):</p>\n<pre>DJANGO_THROTTLING = {\n    'all': 1000,\n    'post': False,\n    'congestion': 'forum.views.congestion',\n}\n</pre>\n<p>In that case you will get <cite>HttpResponseBadRequest()</cite> on any POST.</p>\n<p>Also, you may redirect your\u2019s <cite>POST</cite> users to an any page:</p>\n<pre>DJANGO_THROTTLING = {\n    'all': 1000,\n    'post': '/',\n    'congestion': 'forum.views.congestion',\n}\n</pre>\n<p>or you can use a custom maintenance view for it:</p>\n<pre>DJANGO_THROTTLING = {\n    'all': 1000,\n    'post': 'forum.views.maintenance',\n    'congestion': 'forum.views.congestion',\n}\n</pre>\n<p>Maintenance view may look like:</p>\n<pre>def maintenance(request, maintenance_bundle):\n    return HttpPreResponse(maintenance_bundle)\n</pre>\n<p>If you need a special cache key builder, or just to set a timeout is not enough\nfor you, you can use a callback for, i.e., <cite>POST</cite>, that have to make it\u2019s\nchecks and return a tuple of cache key and one of the supported timeout types:</p>\n<pre>DJANGO_THROTTLING = {\n    'all': 1000,\n    'post': 'callable:helpers.trash.my_callback',\n    'congestion': 'forum.views.congestion',\n}\n</pre>\n<p>And here\u2019s the example callback:</p>\n<pre>def my_callback(request, view_func, view_args, view_kwargs):\n    return 'some_strange_key_123', 10000\n</pre>\n<p>The full set of arguments the original view had is provided.</p>\n<p>And don\u2019t forget, that it is a <em>fallback</em> section, that used <em>ONLY</em> if\nyou have no detailed rule for view throttling.</p>\n</div>\n<div id=\"per-view-throttling\">\n<h3>Per-view throttling</h3>\n<p>Per-view throttling is almost the same:</p>\n<pre>DJANGO_THROTTLING = {\n    'all': 1000,\n    'post': 'callable:helpers.trash.my_callback',\n    'congestion': 'forum.views.congestion',\n\n    'django.contrib.admin.options.change_view': {\n        'post': False,\n        'all': 0,\n        'uri': '/admin/forum/post/23/',\n        # 'post': 'callable:helpers.trash.my_callback',\n        # 'all': 4000,\n    },\n}\n</pre>\n<p>First, it will disable all limits for <cite>django.contrib.admin.options.change_view</cite>.\nThen, it will disable the <tt>POST</tt> method for this view, <strong>ONLY</strong> if the\n<tt>request.path</tt> starts with \u2018/admin/forum/post/23/\u2019. Other options from\nglobal setup are permitted.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 838457, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d95aef1575206f517c220e44fe28ec7e", "sha256": "426e63b1f670b2755a27d89a22696cd78947aba190648f747ee9c1dda8ad83b2"}, "downloads": -1, "filename": "django-throttling-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d95aef1575206f517c220e44fe28ec7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7413, "upload_time": "2013-08-12T18:58:38", "upload_time_iso_8601": "2013-08-12T18:58:38.842558Z", "url": "https://files.pythonhosted.org/packages/45/36/ffa1efc92bf975241ed1d3b8b5a5ae1817b1900224d038bdeb506eff4600/django-throttling-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d95aef1575206f517c220e44fe28ec7e", "sha256": "426e63b1f670b2755a27d89a22696cd78947aba190648f747ee9c1dda8ad83b2"}, "downloads": -1, "filename": "django-throttling-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d95aef1575206f517c220e44fe28ec7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7413, "upload_time": "2013-08-12T18:58:38", "upload_time_iso_8601": "2013-08-12T18:58:38.842558Z", "url": "https://files.pythonhosted.org/packages/45/36/ffa1efc92bf975241ed1d3b8b5a5ae1817b1900224d038bdeb506eff4600/django-throttling-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:29 2020"}