{"info": {"author": "Marco S. Nobile", "author_email": "nobile@disco.unimib.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 2.7"], "description": "======================\r\nEvolutionary Petri Net\r\n======================\r\n\r\n*Evolutionary Petri Nets* (EPN) is a convenient tool for the automatic \r\ninference, optimization, and reverse engineering of Petri Nets (PNs). The \r\nlibrary exploits the evolutionary computation methodology described in [1].\r\n\r\nWARNING: this is a preliminary alpha release.\r\n\r\nEPN can be used as follows:\r\n\t\r\n\t#!/usr/bin/env python\r\n\r\n\tfrom epn.hpn import *\r\n\tfrom epn.evolpn import *\r\n\tfrom epn.basic import *\r\n\r\n\tPOPULATION = 10\r\n\r\n\tE = EvolutionaryPetriNet()\r\n\tE.setPopulationSize(POPULATION)\r\n\tE.useTournament(size=2)\r\n\tE.setIterations(100)\r\n\tfor p in range(POPULATION):\r\n\t\tp = ResizablePetriNet(\"H\"+str(p))\r\n\t\tE.addHPN(p)\r\n\t\tE.mutate()\r\n\tE.setFitnessFunction( ... )\r\n\tE.Optimize()\r\n\t\r\nEPN can produce output figures of the PNs by using the dot/graphviz library. \r\nFor this reason, EPN relies on the external library pydot. The current state\r\nof the whole EPN can be outputted with the following command:\r\n\r\n\tE.dumpToFile(\"output.png\")\r\n\r\n\r\nBasics\r\n======\r\n\r\nEPNs does not directly handle PNs, but it exploits an extended class named \r\n*Resizable Petri Net* (RPN). A population of RPNs undergoes an evolutionary \r\nprocess, in which the best individuals are iteratively modified and improved\r\nby means of crossover and mutation operators. The evolutive pressure is driven\r\nby a user-defined fitness function.\r\n\r\nThe programmer is given the freedom of choosing \r\n\r\n* the population size;\r\n\r\n* one of the selection mechanism (roulette wheel, ranking, tournament);\r\n\r\n* the maximum number of iterations;\r\n\r\n* the pre- and post-order of transitions (see [1] for further information).\r\n\r\n\r\nThanks also to\r\n--------------\r\n\r\nEPNs have been developed by a joint effort of M.S. Nobile and G. Mauri \r\n(University of Milan-Bicocca, Italy), D. Besozzi (University of Milan, Italy) \r\nand P. Cazzaniga (University of Bergamo, Italy).\r\n\r\nFurther information:\r\n\r\n[1] Nobile, Besozzi, Cazzaniga and Mauri, \"The Foundations of Evolutionary\r\nPetri Nets\", Proceedings of the 4th International Workshop on Biological \r\nProcesses & Petri Nets (BioPPN 2013), a satellite event of PETRI NETS 2013\r\n(G. Balbo and M. Heiner, eds.), CEUR Workshop Proceedings Vol. 988, 60-74, 2013\r\n\r\n<http://www.disco.unimib.it/go/45712>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/EPN/", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "EPN", "package_url": "https://pypi.org/project/EPN/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/EPN/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/EPN/"}, "release_url": "https://pypi.org/project/EPN/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Evolutionary Petri Nets.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ======================\n<br>Evolutionary Petri Net\n<br>======================\n<br>\n<br>*Evolutionary Petri Nets* (EPN) is a convenient tool for the automatic \n<br>inference, optimization, and reverse engineering of Petri Nets (PNs). The \n<br>library exploits the evolutionary computation methodology described in [1].\n<br>\n<br>WARNING: this is a preliminary alpha release.\n<br>\n<br>EPN can be used as follows:\n<br>\t\n<br>\t#!/usr/bin/env python\n<br>\n<br>\tfrom epn.hpn import *\n<br>\tfrom epn.evolpn import *\n<br>\tfrom epn.basic import *\n<br>\n<br>\tPOPULATION = 10\n<br>\n<br>\tE = EvolutionaryPetriNet()\n<br>\tE.setPopulationSize(POPULATION)\n<br>\tE.useTournament(size=2)\n<br>\tE.setIterations(100)\n<br>\tfor p in range(POPULATION):\n<br>\t\tp = ResizablePetriNet(\"H\"+str(p))\n<br>\t\tE.addHPN(p)\n<br>\t\tE.mutate()\n<br>\tE.setFitnessFunction( ... )\n<br>\tE.Optimize()\n<br>\t\n<br>EPN can produce output figures of the PNs by using the dot/graphviz library. \n<br>For this reason, EPN relies on the external library pydot. The current state\n<br>of the whole EPN can be outputted with the following command:\n<br>\n<br>\tE.dumpToFile(\"output.png\")\n<br>\n<br>\n<br>Basics\n<br>======\n<br>\n<br>EPNs does not directly handle PNs, but it exploits an extended class named \n<br>*Resizable Petri Net* (RPN). A population of RPNs undergoes an evolutionary \n<br>process, in which the best individuals are iteratively modified and improved\n<br>by means of crossover and mutation operators. The evolutive pressure is driven\n<br>by a user-defined fitness function.\n<br>\n<br>The programmer is given the freedom of choosing \n<br>\n<br>* the population size;\n<br>\n<br>* one of the selection mechanism (roulette wheel, ranking, tournament);\n<br>\n<br>* the maximum number of iterations;\n<br>\n<br>* the pre- and post-order of transitions (see [1] for further information).\n<br>\n<br>\n<br>Thanks also to\n<br>--------------\n<br>\n<br>EPNs have been developed by a joint effort of M.S. Nobile and G. Mauri \n<br>(University of Milan-Bicocca, Italy), D. Besozzi (University of Milan, Italy) \n<br>and P. Cazzaniga (University of Bergamo, Italy).\n<br>\n<br>Further information:\n<br>\n<br>[1] Nobile, Besozzi, Cazzaniga and Mauri, \"The Foundations of Evolutionary\n<br>Petri Nets\", Proceedings of the 4th International Workshop on Biological \n<br>Processes &amp; Petri Nets (BioPPN 2013), a satellite event of PETRI NETS 2013\n<br>(G. Balbo and M. Heiner, eds.), CEUR Workshop Proceedings Vol. 988, 60-74, 2013\n<br>\n<br>&lt;http://www.disco.unimib.it/go/45712&gt;\n          </div>"}, "last_serial": 884307, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "528aec5daf721fb6fab357d39373bbd7", "sha256": "9422725f8383639255c7e57c811d183e305ce45088e2eabcabb41e5958f52aec"}, "downloads": -1, "filename": "EPN-0.1.0.zip", "has_sig": false, "md5_digest": "528aec5daf721fb6fab357d39373bbd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19754, "upload_time": "2013-10-06T19:44:26", "upload_time_iso_8601": "2013-10-06T19:44:26.770159Z", "url": "https://files.pythonhosted.org/packages/de/f0/af8284ade351c2f133e80ea7a2aa043924f0288e2f95128a741a2451e681/EPN-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b36d685e3d60f64cfa1ba448700607ba", "sha256": "50fdb13de5c24790d4885a0a9f5acd2180669a383eb4d5744fce7fdbd9737198"}, "downloads": -1, "filename": "EPN-0.1.1.zip", "has_sig": false, "md5_digest": "b36d685e3d60f64cfa1ba448700607ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20019, "upload_time": "2013-10-08T11:26:54", "upload_time_iso_8601": "2013-10-08T11:26:54.350571Z", "url": "https://files.pythonhosted.org/packages/88/4a/6249abd2342909ac51db04ace8d8b2048586ca6b60d69cc4cc8a15e95fc9/EPN-0.1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b36d685e3d60f64cfa1ba448700607ba", "sha256": "50fdb13de5c24790d4885a0a9f5acd2180669a383eb4d5744fce7fdbd9737198"}, "downloads": -1, "filename": "EPN-0.1.1.zip", "has_sig": false, "md5_digest": "b36d685e3d60f64cfa1ba448700607ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20019, "upload_time": "2013-10-08T11:26:54", "upload_time_iso_8601": "2013-10-08T11:26:54.350571Z", "url": "https://files.pythonhosted.org/packages/88/4a/6249abd2342909ac51db04ace8d8b2048586ca6b60d69cc4cc8a15e95fc9/EPN-0.1.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:45:56 2020"}