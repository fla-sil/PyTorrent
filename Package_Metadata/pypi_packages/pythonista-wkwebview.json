{"info": {"author": "Mikael Honkala", "author_email": "mikael.honkala@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: iOS"], "description": "# pythonista-webview\n\nWKWebView implementation for Pythonista.\n\nThe underlying component used to implement ui.WebView in Pythonista is\nUIWebView, which has been deprecated since iOS 8. This module implements a\nPython webview API using the current iOS-provided view, WKWebView. Besides\nbeing Apple-supported, WKWebView brings other benefits such as better\nJavascript performance and an official communication channel from\nJavascript to Python. This implementation of a Python API also has the\nadditional benefit of being inheritable.\n\nAvailable as a [single file](https://github.com/mikaelho/pythonista-webview) \non GitHub, or install with:\n\n    pip install pythonista-wkwebview\n    \nin stash.\n\nRun the file as-is to try out some of the capabilities; check the end of the\nfile for demo code.\n\nCredits: This would not exist without @JonB and @mithrendal (Pythonista\nforum handles).\n\n## Basic usage\n\nWKWebView matches ui.WebView API as defined in Pythonista docs. For example:\n\n```\nv = WKWebView()\nv.present()\nv.load_html('<body>Hello world</body>')\nv.load_url('http://omz-software.com/pythonista/')\n```\n\nFor compatibility, there is also the same delegate API that ui.WebView has,\nwith `webview_should_start_load` etc. methods.\n\n## Deviations from ui.WebView API\n\n### Synchronous vs. asynchronous JS evaluation\n\nApple's WKWebView only provides an async Javascript evaluation function.\nThis is available as an `eval_js_async` method, with an optional `callback` \nargument that will be called with a single argument containing the result of \nthe JS evaluation (or None).\n\nWe also provide a synchronous `eval_js` method, which essentially waits for \nthe callback before returning the result. For this to work, you have to call \nthe `eval_js` method outside the main UI thread, e.g. from a method decorated \nwith `ui.in_background`.\n\n### Handling page scaling\n\nUIWebView had a property called `scales_page_to_fit`, WKWebView does not. See \nbelow for the various `disable` methods that can be used instead.\n\n## Additional features and notes\n\n### http allowed\n\nLooks like Pythonista has the specific plist entry required to allow fetching \nnon-secure http urls. \n\n### Cache and timeouts\n\nFor remote (non-file) `load_url` requests, there are two additional options:\n  \n* Set `no_cache` to `True` to skip the local cache, default is `False`\n* Set `timeout` to a specific timeout value, default is 10 (seconds)\n\nYou can also explicitly clear all data types from the default data store with \nthe `clear_cache` instance method. The method takes an optional parameter, a \nplain function that will be called when the async cache clearing operation is \nfinished:\n\n    def cleared():\n      print('Cache cleared')\n    \n    WKWebView().clear_cache(cleared)\n\n### Media playback\n\nFollowing media playback options are available as WKWebView constructor \nparameters:\n\n* `inline_media` - whether HTML5 videos play inline or use the native \n  full-screen controller. The default value for iPhone is False and the\n  default value for iPad is True.\n* `airplay_media` - whether AirPlay is allowed. The default value is True.\n* `pip_media` - whether HTML5 videos can play picture-in-picture. \n  The default value is True.\n\n### Other url schemes\n\nIf you try to open a url not natively supported by WKWebView, such as `tel:` \nfor phone numbers, the `webbrowser` module is used to open it.\n\n### Swipe navigation\n\nThere is a new property, `swipe_navigation`, False by default. If set to True, \nhorizontal swipes navigate backwards and forwards in the browsing history.\n\nNote that browsing history is only updated for calls to `load_url` - \n`load_html` is ignored (Apple feature that has some security justification).\n\n### Data detection\n\nBy default, no Apple data detectors are active for WKWebView. You can activate \nthem by including one or a tuple of the following values as the \n`data_detectors` argument to the constructor: NONE, PHONE_NUMBER, LINK, \nADDRESS, CALENDAR_EVENT, TRACKING_NUMBER, FLIGHT_NUMBER, LOOKUP_SUGGESTION, \nALL.\n\nFor example, activating just the phone and link detectors:\n  \n    v = WKWebView(data_detectors=(WKWebView.PHONE_NUMBER, WKWebView.LINK))\n\n### Messages from JS to Python\n\nWKWebView comes with support for JS-to-container messages. Use this by \nsubclassing WKWebView and implementing methods that start with `on_` and \naccept one message argument. These methods are then callable from JS with the \npithy `window.webkit.messageHandler.<name>.postMessage` call, where `<name>` \ncorresponds to whatever you have on the method name after the `on_` prefix.\n\nHere's a minimal example:\n  \n    class MagicWebView(WKWebView):\n      \n      def on_magic(self, message):\n        print('WKWebView magic ' + message)\n        \n    html = '''\n    <body>\n    <button onclick=\"window.webkit.messageHandlers.magic.postMessage(\\'spell\\')\">\n    Cast a spell\n    </button>\n    </body>\n    '''\n    \n    v = MagicWebView()\n    v.load_html(html)\n    \nNote that JS postMessage must have a parameter, and the message argument to \nthe Python handler is always a string version of that parameter. For \nstructured data, you need to use e.g. JSON at both ends.\n\n### User scripts a.k.a. script injection\n\nWKWebView supports defining JS scripts that will be automatically loaded with \nevery page. \n\nUse the `add_script(js_script, add_to_end=True)` method for this.\n\nScripts are added to all frames. Removing scripts is currently not implemented.\n\nFollowing two convenience methods are also available:\n  \n* `add_style(css)` to add a style tag containing the given CSS style\n  definition.\n* `add_meta(name, content)` to add a meta tag with the given name and content.\n\n### Making a web page behave more like an app\n\nThese methods set various style and meta tags to disable typical web\ninteraction modes:\n  \n* `disable_zoom`\n* `disable_user_selection`\n* `disable_font_resizing`\n* `disable_scrolling` (alias for setting `scroll_enabled` to False)\n\nThere is also a convenience method, `disable_all`, which calls all of the \nabove.\n\nNote that disabling user selection will also disable the automatic data \ndetection of e.g. phone numbers, described earlier.\n\n### Javascript debugging\n\nJavascript errors and console messages are sent to Python side and printed to \nPythonista console. Supported JS console methods are `log`, `info`, `warn` and \n`error`.\n\nFor further JS debugging and experimentation, there is a simple convenience \ncommand-line utility that can be used to evaluate load URLs and evaluate \njavascript. If you `present` your app as a 'panel', you can easily switch \nbetween the tabs for your web page and this console.\n\nOr you can just create a WKWebView manually for quick experimentation, like \nin the usage example below. \n\n    >>> from wkwebview import *\n    >>> v = WKWebView(name='Demo')\n    >>> WKWebView.console()\n    Welcome to WKWebView console. Evaluate javascript in any active WKWebView.\n    Special commands: list, switch #, load <url>, quit\n    js> list\n    0 - Demo - \n    js> load http://omz-software.com/pythonista/\n    js> list\n    0 - Demo - Pythonista for iOS\n    js> document.title\n    Pythonista for iOS\n    js> quit\n    >>> v2 = WKWebView(name='Other view')\n    >>> WKWebView.console()\n    Welcome to WKWebView console. Evaluate javascript in any active WKWebView.\n    Special commands: list, switch #, load <url>, quit\n    js> list\n    0 - Demo - Pythonista for iOS\n    1 - Other view - \n    js> switch 1\n    js> load https://www.python.org\n    js> document.title\n    Welcome to Python.org\n    js> window.doesNotExist.wrongFunction()\n    ERROR: TypeError: undefined is not an object\n    (evaluating 'window.doesNotExist.wrongFunction')\n    (https://www.python.org/, line: 1, column: 20)\n    None\n    js> quit\n\n### Setting a custom user agent\n\nWKWebView has a `user_agent` property that can be used to retrieve or set a \nvalue reported to the server when requesting pages.\n\n### Customize Javascript popups\n\nJavascript alert, confirm and prompt dialogs are now implemented with simple \nPythonista equivalents. If you need something fancier or e.g. \ninternationalization support, subclass WKWebView and re-implement the \nfollowing methods as needed:\n  \n    def _javascript_alert(self, host, message):\n      console.alert(host, message, 'OK', hide_cancel_button=True)\n      \n    def _javascript_confirm(self, host, message):\n      try:\n        console.alert(host, message, 'OK')\n        return True\n      except KeyboardInterrupt:\n        return False\n      \n    def _javascript_prompt(self, host, prompt, default_text):\n      try:\n        return console.input_alert(host, prompt, default_text, 'OK')\n      except KeyboardInterrupt:\n        return None\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikaelho/pythonista-webview", "keywords": "", "license": "TheUnlicense", "maintainer": "", "maintainer_email": "", "name": "pythonista-wkwebview", "package_url": "https://pypi.org/project/pythonista-wkwebview/", "platform": "", "project_url": "https://pypi.org/project/pythonista-wkwebview/", "project_urls": {"Homepage": "https://github.com/mikaelho/pythonista-webview"}, "release_url": "https://pypi.org/project/pythonista-wkwebview/1.0/", "requires_dist": null, "requires_python": "", "summary": "WKWebView - modern webview for Pythonista", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pythonista-webview</h1>\n<p>WKWebView implementation for Pythonista.</p>\n<p>The underlying component used to implement ui.WebView in Pythonista is\nUIWebView, which has been deprecated since iOS 8. This module implements a\nPython webview API using the current iOS-provided view, WKWebView. Besides\nbeing Apple-supported, WKWebView brings other benefits such as better\nJavascript performance and an official communication channel from\nJavascript to Python. This implementation of a Python API also has the\nadditional benefit of being inheritable.</p>\n<p>Available as a <a href=\"https://github.com/mikaelho/pythonista-webview\" rel=\"nofollow\">single file</a>\non GitHub, or install with:</p>\n<pre><code>pip install pythonista-wkwebview\n</code></pre>\n<p>in stash.</p>\n<p>Run the file as-is to try out some of the capabilities; check the end of the\nfile for demo code.</p>\n<p>Credits: This would not exist without @JonB and @mithrendal (Pythonista\nforum handles).</p>\n<h2>Basic usage</h2>\n<p>WKWebView matches ui.WebView API as defined in Pythonista docs. For example:</p>\n<pre><code>v = WKWebView()\nv.present()\nv.load_html('&lt;body&gt;Hello world&lt;/body&gt;')\nv.load_url('http://omz-software.com/pythonista/')\n</code></pre>\n<p>For compatibility, there is also the same delegate API that ui.WebView has,\nwith <code>webview_should_start_load</code> etc. methods.</p>\n<h2>Deviations from ui.WebView API</h2>\n<h3>Synchronous vs. asynchronous JS evaluation</h3>\n<p>Apple's WKWebView only provides an async Javascript evaluation function.\nThis is available as an <code>eval_js_async</code> method, with an optional <code>callback</code>\nargument that will be called with a single argument containing the result of\nthe JS evaluation (or None).</p>\n<p>We also provide a synchronous <code>eval_js</code> method, which essentially waits for\nthe callback before returning the result. For this to work, you have to call\nthe <code>eval_js</code> method outside the main UI thread, e.g. from a method decorated\nwith <code>ui.in_background</code>.</p>\n<h3>Handling page scaling</h3>\n<p>UIWebView had a property called <code>scales_page_to_fit</code>, WKWebView does not. See\nbelow for the various <code>disable</code> methods that can be used instead.</p>\n<h2>Additional features and notes</h2>\n<h3>http allowed</h3>\n<p>Looks like Pythonista has the specific plist entry required to allow fetching\nnon-secure http urls.</p>\n<h3>Cache and timeouts</h3>\n<p>For remote (non-file) <code>load_url</code> requests, there are two additional options:</p>\n<ul>\n<li>Set <code>no_cache</code> to <code>True</code> to skip the local cache, default is <code>False</code></li>\n<li>Set <code>timeout</code> to a specific timeout value, default is 10 (seconds)</li>\n</ul>\n<p>You can also explicitly clear all data types from the default data store with\nthe <code>clear_cache</code> instance method. The method takes an optional parameter, a\nplain function that will be called when the async cache clearing operation is\nfinished:</p>\n<pre><code>def cleared():\n  print('Cache cleared')\n\nWKWebView().clear_cache(cleared)\n</code></pre>\n<h3>Media playback</h3>\n<p>Following media playback options are available as WKWebView constructor\nparameters:</p>\n<ul>\n<li><code>inline_media</code> - whether HTML5 videos play inline or use the native\nfull-screen controller. The default value for iPhone is False and the\ndefault value for iPad is True.</li>\n<li><code>airplay_media</code> - whether AirPlay is allowed. The default value is True.</li>\n<li><code>pip_media</code> - whether HTML5 videos can play picture-in-picture.\nThe default value is True.</li>\n</ul>\n<h3>Other url schemes</h3>\n<p>If you try to open a url not natively supported by WKWebView, such as <code>tel:</code>\nfor phone numbers, the <code>webbrowser</code> module is used to open it.</p>\n<h3>Swipe navigation</h3>\n<p>There is a new property, <code>swipe_navigation</code>, False by default. If set to True,\nhorizontal swipes navigate backwards and forwards in the browsing history.</p>\n<p>Note that browsing history is only updated for calls to <code>load_url</code> -\n<code>load_html</code> is ignored (Apple feature that has some security justification).</p>\n<h3>Data detection</h3>\n<p>By default, no Apple data detectors are active for WKWebView. You can activate\nthem by including one or a tuple of the following values as the\n<code>data_detectors</code> argument to the constructor: NONE, PHONE_NUMBER, LINK,\nADDRESS, CALENDAR_EVENT, TRACKING_NUMBER, FLIGHT_NUMBER, LOOKUP_SUGGESTION,\nALL.</p>\n<p>For example, activating just the phone and link detectors:</p>\n<pre><code>v = WKWebView(data_detectors=(WKWebView.PHONE_NUMBER, WKWebView.LINK))\n</code></pre>\n<h3>Messages from JS to Python</h3>\n<p>WKWebView comes with support for JS-to-container messages. Use this by\nsubclassing WKWebView and implementing methods that start with <code>on_</code> and\naccept one message argument. These methods are then callable from JS with the\npithy <code>window.webkit.messageHandler.&lt;name&gt;.postMessage</code> call, where <code>&lt;name&gt;</code>\ncorresponds to whatever you have on the method name after the <code>on_</code> prefix.</p>\n<p>Here's a minimal example:</p>\n<pre><code>class MagicWebView(WKWebView):\n  \n  def on_magic(self, message):\n    print('WKWebView magic ' + message)\n    \nhtml = '''\n&lt;body&gt;\n&lt;button onclick=\"window.webkit.messageHandlers.magic.postMessage(\\'spell\\')\"&gt;\nCast a spell\n&lt;/button&gt;\n&lt;/body&gt;\n'''\n\nv = MagicWebView()\nv.load_html(html)\n</code></pre>\n<p>Note that JS postMessage must have a parameter, and the message argument to\nthe Python handler is always a string version of that parameter. For\nstructured data, you need to use e.g. JSON at both ends.</p>\n<h3>User scripts a.k.a. script injection</h3>\n<p>WKWebView supports defining JS scripts that will be automatically loaded with\nevery page.</p>\n<p>Use the <code>add_script(js_script, add_to_end=True)</code> method for this.</p>\n<p>Scripts are added to all frames. Removing scripts is currently not implemented.</p>\n<p>Following two convenience methods are also available:</p>\n<ul>\n<li><code>add_style(css)</code> to add a style tag containing the given CSS style\ndefinition.</li>\n<li><code>add_meta(name, content)</code> to add a meta tag with the given name and content.</li>\n</ul>\n<h3>Making a web page behave more like an app</h3>\n<p>These methods set various style and meta tags to disable typical web\ninteraction modes:</p>\n<ul>\n<li><code>disable_zoom</code></li>\n<li><code>disable_user_selection</code></li>\n<li><code>disable_font_resizing</code></li>\n<li><code>disable_scrolling</code> (alias for setting <code>scroll_enabled</code> to False)</li>\n</ul>\n<p>There is also a convenience method, <code>disable_all</code>, which calls all of the\nabove.</p>\n<p>Note that disabling user selection will also disable the automatic data\ndetection of e.g. phone numbers, described earlier.</p>\n<h3>Javascript debugging</h3>\n<p>Javascript errors and console messages are sent to Python side and printed to\nPythonista console. Supported JS console methods are <code>log</code>, <code>info</code>, <code>warn</code> and\n<code>error</code>.</p>\n<p>For further JS debugging and experimentation, there is a simple convenience\ncommand-line utility that can be used to evaluate load URLs and evaluate\njavascript. If you <code>present</code> your app as a 'panel', you can easily switch\nbetween the tabs for your web page and this console.</p>\n<p>Or you can just create a WKWebView manually for quick experimentation, like\nin the usage example below.</p>\n<pre><code>&gt;&gt;&gt; from wkwebview import *\n&gt;&gt;&gt; v = WKWebView(name='Demo')\n&gt;&gt;&gt; WKWebView.console()\nWelcome to WKWebView console. Evaluate javascript in any active WKWebView.\nSpecial commands: list, switch #, load &lt;url&gt;, quit\njs&gt; list\n0 - Demo - \njs&gt; load http://omz-software.com/pythonista/\njs&gt; list\n0 - Demo - Pythonista for iOS\njs&gt; document.title\nPythonista for iOS\njs&gt; quit\n&gt;&gt;&gt; v2 = WKWebView(name='Other view')\n&gt;&gt;&gt; WKWebView.console()\nWelcome to WKWebView console. Evaluate javascript in any active WKWebView.\nSpecial commands: list, switch #, load &lt;url&gt;, quit\njs&gt; list\n0 - Demo - Pythonista for iOS\n1 - Other view - \njs&gt; switch 1\njs&gt; load https://www.python.org\njs&gt; document.title\nWelcome to Python.org\njs&gt; window.doesNotExist.wrongFunction()\nERROR: TypeError: undefined is not an object\n(evaluating 'window.doesNotExist.wrongFunction')\n(https://www.python.org/, line: 1, column: 20)\nNone\njs&gt; quit\n</code></pre>\n<h3>Setting a custom user agent</h3>\n<p>WKWebView has a <code>user_agent</code> property that can be used to retrieve or set a\nvalue reported to the server when requesting pages.</p>\n<h3>Customize Javascript popups</h3>\n<p>Javascript alert, confirm and prompt dialogs are now implemented with simple\nPythonista equivalents. If you need something fancier or e.g.\ninternationalization support, subclass WKWebView and re-implement the\nfollowing methods as needed:</p>\n<pre><code>def _javascript_alert(self, host, message):\n  console.alert(host, message, 'OK', hide_cancel_button=True)\n  \ndef _javascript_confirm(self, host, message):\n  try:\n    console.alert(host, message, 'OK')\n    return True\n  except KeyboardInterrupt:\n    return False\n  \ndef _javascript_prompt(self, host, prompt, default_text):\n  try:\n    return console.input_alert(host, prompt, default_text, 'OK')\n  except KeyboardInterrupt:\n    return None\n</code></pre>\n\n          </div>"}, "last_serial": 6706162, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "98fb82583f3a2436281b83071cebce05", "sha256": "62839744f21a815c357e7abe87f831e719818472264bb02593428ce4ef168544"}, "downloads": -1, "filename": "pythonista_wkwebview-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "98fb82583f3a2436281b83071cebce05", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12573, "upload_time": "2020-02-26T21:09:21", "upload_time_iso_8601": "2020-02-26T21:09:21.279207Z", "url": "https://files.pythonhosted.org/packages/7a/c1/ff1688a11454d72b23c9dfbc537e12f22ad8b56a625793353e6f40fea7bd/pythonista_wkwebview-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11ed30c93542b28f1c57b61a5b4c99d0", "sha256": "10b5f7806a0741818095da8fa31135499fe9c22c423ed7bb60e0291d3c5324bf"}, "downloads": -1, "filename": "pythonista-wkwebview-1.0.tar.gz", "has_sig": false, "md5_digest": "11ed30c93542b28f1c57b61a5b4c99d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11535, "upload_time": "2020-02-26T21:09:47", "upload_time_iso_8601": "2020-02-26T21:09:47.716683Z", "url": "https://files.pythonhosted.org/packages/02/e4/40a63d3c5d70ec274263e256f711c824540c79d770103450d9c8e08cef39/pythonista-wkwebview-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "98fb82583f3a2436281b83071cebce05", "sha256": "62839744f21a815c357e7abe87f831e719818472264bb02593428ce4ef168544"}, "downloads": -1, "filename": "pythonista_wkwebview-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "98fb82583f3a2436281b83071cebce05", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12573, "upload_time": "2020-02-26T21:09:21", "upload_time_iso_8601": "2020-02-26T21:09:21.279207Z", "url": "https://files.pythonhosted.org/packages/7a/c1/ff1688a11454d72b23c9dfbc537e12f22ad8b56a625793353e6f40fea7bd/pythonista_wkwebview-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11ed30c93542b28f1c57b61a5b4c99d0", "sha256": "10b5f7806a0741818095da8fa31135499fe9c22c423ed7bb60e0291d3c5324bf"}, "downloads": -1, "filename": "pythonista-wkwebview-1.0.tar.gz", "has_sig": false, "md5_digest": "11ed30c93542b28f1c57b61a5b4c99d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11535, "upload_time": "2020-02-26T21:09:47", "upload_time_iso_8601": "2020-02-26T21:09:47.716683Z", "url": "https://files.pythonhosted.org/packages/02/e4/40a63d3c5d70ec274263e256f711c824540c79d770103450d9c8e08cef39/pythonista-wkwebview-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:08 2020"}