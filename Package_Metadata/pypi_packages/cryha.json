{"info": {"author": "Jonas Melian", "author_email": "devel@jonasmelian.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database", "Topic :: Security :: Cryptography"], "description": "=====\nCryha\n=====\n\nCryha is a Python toolkit for securing information into a data base; it lets\nhash passwords, and encrypt/decrypt personal information. It is ready for input\nof Unicode characters, and the schema is returned as Unicode.\n\nThe text is stored according to this schema for a hash:\n\n\t``separator, the hash function identifier, separator, the salt, separator,\n\tthe hash output``\n\nAnd this another for a cipher text:\n\n\t``separator, the cipher identifier, separator, the mode identifier,\n\tseparator, the IV parameter, separator, the ciphertext``\n\nThe idea of the schema has been taken of Linux systems that store the hashed\npasswords so, using a ``$`` as separator.\n\nThe use of a schema let us to store the salt (for hash) and IV (for cipher)\n--which must be unique for each field--, together to the parameters that has\nbeen used to hashing/encrypting the text.\n\nThe salt and IV parameters are obtained from a random string --using the PRNG_\nof the operating system-- into a domain of 256 possible values for greater\nsecurity.\n\n\n.. [PRNG] Pseudo random number generator. In Linux is */dev/urandom*.\n\nUse\n===\n\nTypical usage:\n\n>>> import cryha\n\nHasher:\n\n>>> hasher = cryha.Hasher()\n>>> hash = hasher.create('text')\n\n>>> hasher.valid('text', hash)\nTrue\n>>> hasher.valid('Text', hash)\nFalse\n\nCrypter:\n\n>>> crypter = cryha.Crypter(root_keyfile='.', dir_keyfile='test_crypter')\n>>> crypt = crypter.encrypt('text')\n\n>>> crypter.decrypt(crypt) == 'text'\nTrue", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/ares/cryha/", "keywords": "security cryptography crypto symmetric hash database", "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "cryha", "package_url": "https://pypi.org/project/cryha/", "platform": "any", "project_url": "https://pypi.org/project/cryha/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/ares/cryha/"}, "release_url": "https://pypi.org/project/cryha/1.0/", "requires_dist": null, "requires_python": null, "summary": "Toolkit for securing information into a database", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Cryha is a Python toolkit for securing information into a data base; it lets\nhash passwords, and encrypt/decrypt personal information. It is ready for input\nof Unicode characters, and the schema is returned as Unicode.</p>\n<p>The text is stored according to this schema for a hash:</p>\n<blockquote>\n<tt>separator, the hash function identifier, separator, the salt, separator,\nthe hash output</tt></blockquote>\n<p>And this another for a cipher text:</p>\n<blockquote>\n<tt>separator, the cipher identifier, separator, the mode identifier,\nseparator, the IV parameter, separator, the ciphertext</tt></blockquote>\n<p>The idea of the schema has been taken of Linux systems that store the hashed\npasswords so, using a <tt>$</tt> as separator.</p>\n<p>The use of a schema let us to store the salt (for hash) and IV (for cipher)\n\u2013which must be unique for each field\u2013, together to the parameters that has\nbeen used to hashing/encrypting the text.</p>\n<p>The salt and IV parameters are obtained from a random string \u2013using the <a href=\"#prng\" rel=\"nofollow\">PRNG</a>\nof the operating system\u2013 into a domain of 256 possible values for greater\nsecurity.</p>\n<table id=\"prng\">\n<col><col>\n<tbody>\n<tr><td>[PRNG]</td><td>Pseudo random number generator. In Linux is <em>/dev/urandom</em>.</td></tr>\n</tbody>\n</table>\n<div id=\"use\">\n<h2>Use</h2>\n<p>Typical usage:</p>\n<pre>&gt;&gt;&gt; import cryha\n</pre>\n<p>Hasher:</p>\n<pre>&gt;&gt;&gt; hasher = cryha.Hasher()\n&gt;&gt;&gt; hash = hasher.create('text')\n</pre>\n<pre>&gt;&gt;&gt; hasher.valid('text', hash)\nTrue\n&gt;&gt;&gt; hasher.valid('Text', hash)\nFalse\n</pre>\n<p>Crypter:</p>\n<pre>&gt;&gt;&gt; crypter = cryha.Crypter(root_keyfile='.', dir_keyfile='test_crypter')\n&gt;&gt;&gt; crypt = crypter.encrypt('text')\n</pre>\n<pre>&gt;&gt;&gt; crypter.decrypt(crypt) == 'text'\nTrue\n</pre>\n</div>\n\n          </div>"}, "last_serial": 788535, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "83c1a1e7e3b80b60b096dc4608f5103d", "sha256": "3b894bf121d3c5e74efc176d60de82c8761293315f1979c9d597f59bb58beed0"}, "downloads": -1, "filename": "cryha-1.0.tar.gz", "has_sig": false, "md5_digest": "83c1a1e7e3b80b60b096dc4608f5103d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22110, "upload_time": "2009-05-30T17:38:04", "upload_time_iso_8601": "2009-05-30T17:38:04.263557Z", "url": "https://files.pythonhosted.org/packages/b7/f8/3b2ee5d168f1f4ac7b5c2ef159eefe5f227d1bd9051f6d6a8be9dab4fb22/cryha-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83c1a1e7e3b80b60b096dc4608f5103d", "sha256": "3b894bf121d3c5e74efc176d60de82c8761293315f1979c9d597f59bb58beed0"}, "downloads": -1, "filename": "cryha-1.0.tar.gz", "has_sig": false, "md5_digest": "83c1a1e7e3b80b60b096dc4608f5103d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22110, "upload_time": "2009-05-30T17:38:04", "upload_time_iso_8601": "2009-05-30T17:38:04.263557Z", "url": "https://files.pythonhosted.org/packages/b7/f8/3b2ee5d168f1f4ac7b5c2ef159eefe5f227d1bd9051f6d6a8be9dab4fb22/cryha-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:05 2020"}