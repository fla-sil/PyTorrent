{"info": {"author": "Luke Plant", "author_email": "L.Plant.98@cantab.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Software Development :: Testing"], "description": "===================\n Django Anonymizer\n===================\n\nStatus\n======\n\nThis project is not active.\n\nThe approach taken by this project doesn't scale well above small databases - it requires\na very large number of database SELECTs and UPDATEs.\n\nAlso, the method envisaged by this project assumes you are running it on your development\nmachine. However, that means that you have already downloaded customer data onto your machine,\nwhich is an issue.\n\nI therefore recommend that an anonymization script should use SQL directly, and should be run\nin a specially prepared database before the data gets anywhere near developer machines.\n\nFor this reason, there won't be further work on this project.\n\n\nIntro\n=====\n\nDownloads: http://pypi.python.org/pypi/django-anonymizer\n\nThis app helps you anonymize data in a database used for development of a Django\nproject.\n\nIt is common practice in develpment to use a database that is very similar in\ncontent to the real data. The problem is that this can lead to having copies of\nsensitive customer data on development machines. This Django app helps by\nproviding an easy and customizable way to anonymize data in your models.\n\nThe basic method is to go through all the models that you specify, and generate\nfake data for all the fields specified. Introspection of the models will produce\nan anonymizer that will attempt to provide sensible fake data for each field,\nleaving you to tweak for your needs.\n\nPlease note that the methods provided may not be able to give full\nanonymity. Even if you anonymize the names and other details of your customers,\nthere may well be enough data to identify them. Relationships between records in\nthe database are not altered, in order to preserve the characteristic structure\nof data in your application, but this may leave you open to information leaks\nwhich might not be acceptable for your data. This application **should** be good\nenough for simpler policies like 'remove all real telephone numbers from the\ndatabase'.\n\nAn alternative approach to the problem of realistic amounts of test data for\ndevelopment/tests is to populate a database from scratch - see `django-poseur\n<https://github.com/alliterativeanimal/django-poseur>`_, `django-mockups\n<https://github.com/sorl/django-mockups>`_ and `django-autofixture\n<https://github.com/gregmuellegger/django-autofixture>`_. The disavantage of\nthat method is that the structure of the data - in terms of related models - can\nbe unrealistic.\n\nUsage\n=====\n\nQuick overview (see docs for more information, either in docs/ or on\n<http://packages.python.org/django-anonymizer>).\n\n* Install using setup.py or pip/easy_install.\n\n* Add 'anonymizer' to your ``INSTALLED_APPS`` setting.\n\n* Create some stub files for your anonymizers::\n\n    ./manage.py create_anonymizers app_name1 [app_name2...]\n\n  This will create a file ``anonymizers.py`` in each of the apps you specify.\n  (It will not overwrite existing files).\n\n* Edit the generated ``anonymizers.py`` files, adjusting or deleting as\n  necessary, using the functions in module ``anonymizer.replacers`` or\n  custom functions.\n\n* Run the anonymizers::\n\n    ./manage.py anonymize_data app_name1 [app_name2...]\n\n  This will DESTRUCTIVELY UPDATE all your data. Make sure you only do this on a\n  copy of your database, use at own risk, yada yada.\n\n* Note: your database may not actually delete the changed data from the disk\n  when you update fields.  For Postgresql you will need to VACUUM FULL to\n  delete that data.\n\n  And even then, your operating system may not delete the data from the\n  disk. Properly getting rid of these traces is left as an excercise to the\n  reader :-)\n\n\nTests\n=====\n\nTo run the test suite, do the following inside the folder containing this\nREADME::\n\n    django-admin.py test --settings=anonymizer.test_settings\n\nVersion 0.4\n-----------\n\n* Changed 'Anonymizer.attributes' to require every field to be listed.  This is\n  deal with the common security problem when a model is updated, but the\n  Anonymizer is not updated.\n\n  Fields that should not be anonymized should specify the special value \"SKIP\"\n  as the 'replacer'.\n\n* attributes must now be a list of tuples, not a dictionary.\n\nVersion 0.3\n-----------\n\n* Support for ``DecimalField``.\n* Improved docs.\n* Added tests\n\nVersion 0.2\n-----------\n\n* Changed format of attributes from a dictionary to a list of 2-tuples\n  (with backwards compatibility - previous format is deprecated).\n* Fixed small bug with names/usernames/emails sometimes not being generated in\n  corresponding sets, due to fields with unique=True not being (reliably) set\n  before other fields.\n* Added docs.\n\nVersion 0.1.2\n-------------\n\n* Changed 'varchar' field to do max_length introspection at runtime.\n  This breaks the previous signature of the function.\n* Introduced 'replacers' module and new shortcuts.\n\n\nVersion 0.1.1\n-------------\n\n* Removed some debug code\n* Better handling of SlugField and skipped fields in introspection\n\nVersion 0.1\n-----------\n\nInitial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/izqs/django-anonymizer", "keywords": "django data database anonymize private", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-anonymizer-compat", "package_url": "https://pypi.org/project/django-anonymizer-compat/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-anonymizer-compat/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/izqs/django-anonymizer"}, "release_url": "https://pypi.org/project/django-anonymizer-compat/0.4/", "requires_dist": null, "requires_python": null, "summary": "App to anonymize data in Django models.", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"status\">\n<h2>Status</h2>\n<p>This project is not active.</p>\n<p>The approach taken by this project doesn\u2019t scale well above small databases - it requires\na very large number of database SELECTs and UPDATEs.</p>\n<p>Also, the method envisaged by this project assumes you are running it on your development\nmachine. However, that means that you have already downloaded customer data onto your machine,\nwhich is an issue.</p>\n<p>I therefore recommend that an anonymization script should use SQL directly, and should be run\nin a specially prepared database before the data gets anywhere near developer machines.</p>\n<p>For this reason, there won\u2019t be further work on this project.</p>\n</div>\n<div id=\"intro\">\n<h2>Intro</h2>\n<p>Downloads: <a href=\"http://pypi.python.org/pypi/django-anonymizer\" rel=\"nofollow\">http://pypi.python.org/pypi/django-anonymizer</a></p>\n<p>This app helps you anonymize data in a database used for development of a Django\nproject.</p>\n<p>It is common practice in develpment to use a database that is very similar in\ncontent to the real data. The problem is that this can lead to having copies of\nsensitive customer data on development machines. This Django app helps by\nproviding an easy and customizable way to anonymize data in your models.</p>\n<p>The basic method is to go through all the models that you specify, and generate\nfake data for all the fields specified. Introspection of the models will produce\nan anonymizer that will attempt to provide sensible fake data for each field,\nleaving you to tweak for your needs.</p>\n<p>Please note that the methods provided may not be able to give full\nanonymity. Even if you anonymize the names and other details of your customers,\nthere may well be enough data to identify them. Relationships between records in\nthe database are not altered, in order to preserve the characteristic structure\nof data in your application, but this may leave you open to information leaks\nwhich might not be acceptable for your data. This application <strong>should</strong> be good\nenough for simpler policies like \u2018remove all real telephone numbers from the\ndatabase\u2019.</p>\n<p>An alternative approach to the problem of realistic amounts of test data for\ndevelopment/tests is to populate a database from scratch - see <a href=\"https://github.com/alliterativeanimal/django-poseur\" rel=\"nofollow\">django-poseur</a>, <a href=\"https://github.com/sorl/django-mockups\" rel=\"nofollow\">django-mockups</a> and <a href=\"https://github.com/gregmuellegger/django-autofixture\" rel=\"nofollow\">django-autofixture</a>. The disavantage of\nthat method is that the structure of the data - in terms of related models - can\nbe unrealistic.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Quick overview (see docs for more information, either in docs/ or on\n&lt;<a href=\"http://packages.python.org/django-anonymizer\" rel=\"nofollow\">http://packages.python.org/django-anonymizer</a>&gt;).</p>\n<ul>\n<li><p>Install using setup.py or pip/easy_install.</p>\n</li>\n<li><p>Add \u2018anonymizer\u2019 to your <tt>INSTALLED_APPS</tt> setting.</p>\n</li>\n<li><p>Create some stub files for your anonymizers:</p>\n<pre>./manage.py create_anonymizers app_name1 [app_name2...]\n</pre>\n<p>This will create a file <tt>anonymizers.py</tt> in each of the apps you specify.\n(It will not overwrite existing files).</p>\n</li>\n<li><p>Edit the generated <tt>anonymizers.py</tt> files, adjusting or deleting as\nnecessary, using the functions in module <tt>anonymizer.replacers</tt> or\ncustom functions.</p>\n</li>\n<li><p>Run the anonymizers:</p>\n<pre>./manage.py anonymize_data app_name1 [app_name2...]\n</pre>\n<p>This will DESTRUCTIVELY UPDATE all your data. Make sure you only do this on a\ncopy of your database, use at own risk, yada yada.</p>\n</li>\n<li><p>Note: your database may not actually delete the changed data from the disk\nwhen you update fields.  For Postgresql you will need to VACUUM FULL to\ndelete that data.</p>\n<p>And even then, your operating system may not delete the data from the\ndisk. Properly getting rid of these traces is left as an excercise to the\nreader :-)</p>\n</li>\n</ul>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run the test suite, do the following inside the folder containing this\nREADME:</p>\n<pre>django-admin.py test --settings=anonymizer.test_settings\n</pre>\n<div id=\"version-0-4\">\n<h3>Version 0.4</h3>\n<ul>\n<li><p>Changed \u2018Anonymizer.attributes\u2019 to require every field to be listed.  This is\ndeal with the common security problem when a model is updated, but the\nAnonymizer is not updated.</p>\n<p>Fields that should not be anonymized should specify the special value \u201cSKIP\u201d\nas the \u2018replacer\u2019.</p>\n</li>\n<li><p>attributes must now be a list of tuples, not a dictionary.</p>\n</li>\n</ul>\n</div>\n<div id=\"version-0-3\">\n<h3>Version 0.3</h3>\n<ul>\n<li>Support for <tt>DecimalField</tt>.</li>\n<li>Improved docs.</li>\n<li>Added tests</li>\n</ul>\n</div>\n<div id=\"version-0-2\">\n<h3>Version 0.2</h3>\n<ul>\n<li>Changed format of attributes from a dictionary to a list of 2-tuples\n(with backwards compatibility - previous format is deprecated).</li>\n<li>Fixed small bug with names/usernames/emails sometimes not being generated in\ncorresponding sets, due to fields with unique=True not being (reliably) set\nbefore other fields.</li>\n<li>Added docs.</li>\n</ul>\n</div>\n<div id=\"version-0-1-2\">\n<h3>Version 0.1.2</h3>\n<ul>\n<li>Changed \u2018varchar\u2019 field to do max_length introspection at runtime.\nThis breaks the previous signature of the function.</li>\n<li>Introduced \u2018replacers\u2019 module and new shortcuts.</li>\n</ul>\n</div>\n<div id=\"version-0-1-1\">\n<h3>Version 0.1.1</h3>\n<ul>\n<li>Removed some debug code</li>\n<li>Better handling of SlugField and skipped fields in introspection</li>\n</ul>\n</div>\n<div id=\"version-0-1\">\n<h3>Version 0.1</h3>\n<p>Initial release</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2180703, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "435e4178c98ba6d126e99fca10e27f3f", "sha256": "d7b85559bc3604dab35eeba9e8eea05d06967b81aff082a71565b2430ffd8cf9"}, "downloads": -1, "filename": "django-anonymizer-compat-0.4.tar.gz", "has_sig": false, "md5_digest": "435e4178c98ba6d126e99fca10e27f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23496, "upload_time": "2016-06-22T08:09:35", "upload_time_iso_8601": "2016-06-22T08:09:35.994683Z", "url": "https://files.pythonhosted.org/packages/4c/3a/e7c3c91c7caf51a6a0a9f4f05243e4dd0d3faabf65f0970e2f1c515740e9/django-anonymizer-compat-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "435e4178c98ba6d126e99fca10e27f3f", "sha256": "d7b85559bc3604dab35eeba9e8eea05d06967b81aff082a71565b2430ffd8cf9"}, "downloads": -1, "filename": "django-anonymizer-compat-0.4.tar.gz", "has_sig": false, "md5_digest": "435e4178c98ba6d126e99fca10e27f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23496, "upload_time": "2016-06-22T08:09:35", "upload_time_iso_8601": "2016-06-22T08:09:35.994683Z", "url": "https://files.pythonhosted.org/packages/4c/3a/e7c3c91c7caf51a6a0a9f4f05243e4dd0d3faabf65f0970e2f1c515740e9/django-anonymizer-compat-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:41 2020"}