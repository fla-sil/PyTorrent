{"info": {"author": "Victor Klapholz", "author_email": "victor.klapholz@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/vklap/flask-json-content-type-validator.svg?branch=master)](https://travis-ci.org/vklap/flask-json-content-type-validator)\n\n# Flask JSON Content Type Validation Decorator\n\nThis package contains a Flask routes decorator that validates that the request \nhas a Content-Type header with 'application/json'.\n\n# Why?\nWhenever you develop a Flask based API with plain vanilla flask routes that \nexpect to get json data, then trying to access `request.get_json()` \nwill return None whenever the Content-Type is not 'application/json' - which \nmight eventually break your code. Using this decorator will help you keep your \ncode clean and DRY.\n\n# How it works?\n\n## Create your custom exception\n\nBelow is an example of the exception you might wish to raise:\n\n```python\nclass CustomError(Exception):\n    def __init__(self, message, error_code):\n        self.message = message\n        self.error_code = error_code\n```\n\n## Register your custom error with a flask error handler\n\nThe decorator will throw your `CustomError` is the content type is not valid, \nin which case you can handle and return your customized response.\n\n```python\n@app.errorhandler(CustomError)\ndef custom_error_handler(custom_error):\n    return flask.jsonify(dict(message=custom_error.message,\n                                     error_code=custom_error.error_code)), 400\n```\n\n## Decorate your route with the content type validator\n\n```python\nimport flask\nfrom flask import request\nfrom flask_json_content_type_validator import json_content_type_validator\n\napp = flask.Flask(__name__)\n\n@app.route('/echo-resource')\n@json_content_type_validator.validator(\n    CustomError(message='Missing Content-Type header application/json',\n                error_code=1000)\n)\ndef echo_resource():\n    data = dict(**request.get_json())\n    return flask.jsonify(data)\n\n```\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vklap/flask-json-content-type-validator", "keywords": "flask json content validation decorator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flask_json_content_type_validator", "package_url": "https://pypi.org/project/flask_json_content_type_validator/", "platform": "", "project_url": "https://pypi.org/project/flask_json_content_type_validator/", "project_urls": {"Homepage": "https://github.com/vklap/flask-json-content-type-validator"}, "release_url": "https://pypi.org/project/flask_json_content_type_validator/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Flask JSON Content-Type decorator which validates that the Content-Type is indeed application/json. In the case of a wrong content type, then the decorator will throw an exception which can be customized.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Build Status](https://travis-ci.org/vklap/flask-json-content-type-validator.svg?branch=master)](https://travis-ci.org/vklap/flask-json-content-type-validator)<br><br># Flask JSON Content Type Validation Decorator<br><br>This package contains a Flask routes decorator that validates that the request <br>has a Content-Type header with 'application/json'.<br><br># Why?<br>Whenever you develop a Flask based API with plain vanilla flask routes that <br>expect to get json data, then trying to access `request.get_json()` <br>will return None whenever the Content-Type is not 'application/json' - which <br>might eventually break your code. Using this decorator will help you keep your <br>code clean and DRY.<br><br># How it works?<br><br>## Create your custom exception<br><br>Below is an example of the exception you might wish to raise:<br><br>```python<br>class CustomError(Exception):<br>    def __init__(self, message, error_code):<br>        self.message = message<br>        self.error_code = error_code<br>```<br><br>## Register your custom error with a flask error handler<br><br>The decorator will throw your `CustomError` is the content type is not valid, <br>in which case you can handle and return your customized response.<br><br>```python<br>@app.errorhandler(CustomError)<br>def custom_error_handler(custom_error):<br>    return flask.jsonify(dict(message=custom_error.message,<br>                                     error_code=custom_error.error_code)), 400<br>```<br><br>## Decorate your route with the content type validator<br><br>```python<br>import flask<br>from flask import request<br>from flask_json_content_type_validator import json_content_type_validator<br><br>app = flask.Flask(__name__)<br><br>@app.route('/echo-resource')<br>@json_content_type_validator.validator(<br>    CustomError(message='Missing Content-Type header application/json',<br>                error_code=1000)<br>)<br>def echo_resource():<br>    data = dict(**request.get_json())<br>    return flask.jsonify(data)<br><br>```<br>\n          </div>"}, "last_serial": 3461696, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5e13cd171f2f02b3b6a4f226a85b9906", "sha256": "3f3eaf7e6468e989fce1e4f3ab8aedb798049351bfb96805462ba704eefbcf54"}, "downloads": -1, "filename": "flask_json_content_type_validator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5e13cd171f2f02b3b6a4f226a85b9906", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2747, "upload_time": "2017-12-29T21:17:22", "upload_time_iso_8601": "2017-12-29T21:17:22.721033Z", "url": "https://files.pythonhosted.org/packages/51/12/54893c46bceb55093031946c91d5ebcfc20e1795c1b12bfc79ec64ff6240/flask_json_content_type_validator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7d4aaeffa8fe491afa072a372406641c", "sha256": "35efb998057eb8a342c212b157cd3d43a23719454f585c26a7110dad0e8da07b"}, "downloads": -1, "filename": "flask_json_content_type_validator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7d4aaeffa8fe491afa072a372406641c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2814, "upload_time": "2018-01-04T12:48:24", "upload_time_iso_8601": "2018-01-04T12:48:24.565342Z", "url": "https://files.pythonhosted.org/packages/50/dd/9f0aa82987c0df75e1cc424ed006294e388408b6f20bac05c13c88847a39/flask_json_content_type_validator-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d4aaeffa8fe491afa072a372406641c", "sha256": "35efb998057eb8a342c212b157cd3d43a23719454f585c26a7110dad0e8da07b"}, "downloads": -1, "filename": "flask_json_content_type_validator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7d4aaeffa8fe491afa072a372406641c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2814, "upload_time": "2018-01-04T12:48:24", "upload_time_iso_8601": "2018-01-04T12:48:24.565342Z", "url": "https://files.pythonhosted.org/packages/50/dd/9f0aa82987c0df75e1cc424ed006294e388408b6f20bac05c13c88847a39/flask_json_content_type_validator-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:44 2020"}