{"info": {"author": "Colin Bounouar", "author_email": "colin.bounouar.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "<h2 align=\"center\">Authentication for Requests</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/requests-auth/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/requests_auth\"></a>\n<a href=\"https://travis-ci.com/Colin-b/requests_auth\"><img alt=\"Build status\" src=\"https://api.travis-ci.com/Colin-b/requests_auth.svg?branch=master\"></a>\n<a href=\"https://travis-ci.com/Colin-b/requests_auth\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://travis-ci.com/Colin-b/requests_auth\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-242 passed-blue\"></a>\n<a href=\"https://pypi.org/project/requests-auth/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/requests_auth\"></a>\n</p>\n\nProvides authentication classes to be used with [`requests`][1] [authentication parameter][2].\n\n<p align=\"center\">\n    <a href=\"https://oauth.net/2/\"><img alt=\"OAuth2\" src=\"https://oauth.net/images/oauth-2-sm.png\"></a>\n    <a href=\"https://www.okta.com\"><img alt=\"Okta\" src=\"https://www.okta.com/sites/all/themes/Okta/images/logos/developer/Dev_Logo-03_Large.png\" height=\"120\"></a>\n    <a href=\"https://azure.microsoft.com/en-us/services/active-directory/\"><img alt=\"Azure Active Directory (AD)\" src=\"https://azurecomcdn.azureedge.net/cvt-cda59ccd0aa5ced6ff5a2052417cf596b92980921e88e667127eaca2232a31ab/images/shared/services/pricing-glyph-lock.svg\" height=\"120\"></a>\n</p>\n<p align=\"center\">Some of the supported authentication</p>\n\n## Available authentication\n\n- [OAuth2](#oauth-2)\n  - [Authorization Code Flow](#authorization-code-flow)\n    - [Okta](#okta-oauth2-authorization-code)\n  - [Authorization Code Flow with PKCE](#authorization-code-flow-with-proof-key-for-code-exchange)\n    - [Okta](#okta-oauth2-proof-key-for-code-exchange)\n  - [Resource Owner Password Credentials flow](#resource-owner-password-credentials-flow)\n  - [Client Credentials Flow](#client-credentials-flow)\n    - [Okta](#okta-oauth2-client-credentials)\n  - [Implicit Flow](#implicit-flow)\n    - [Azure AD (Access Token)](#microsoft---azure-active-directory-oauth2-access-token)\n    - [Azure AD (ID token)](#microsoft---azure-active-directory-openid-connect-id-token)\n    - [Okta (Access Token)](#okta-oauth2-implicit-access-token)\n    - [Okta (ID token)](#okta-openid-connect-implicit-id-token)\n  - [Managing token cache](#managing-token-cache)\n- API key\n  - [In header](#api-key-in-header)\n  - [In query](#api-key-in-query)\n- [Basic](#basic)\n- [NTLM (Windows)](#ntlm)\n- [Multiple authentication at once](#multiple-authentication-at-once)\n- [Endorsements](#endorsements)\n\n## OAuth 2\n\nMost of [OAuth2](https://oauth.net/2/) flows are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/requests_auth/issues/new).\n\n### Authorization Code flow\n\nAuthorization Code Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.1).\n\nUse `requests_auth.OAuth2AuthorizationCode` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OAuth2AuthorizationCode\n\nrequests.get('http://www.example.com', auth=OAuth2AuthorizationCode('https://www.authorization.url', 'https://www.token.url'))\n```\n\n#### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `token_url`             | OAuth 2 token URL.         | Mandatory |               |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 code will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a code or a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `code_field_name`       | Field name containing the code. | Optional | code |\n| `username`              | User name in case basic authentication should be used to retrieve token. | Optional |  |\n| `password`              | User password in case basic authentication should be used to retrieve token. | Optional |  |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `client_secret` | If client is not authenticated with the authorization server         |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Authorization Code Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/requests_auth/issues/new).\n\n##### Okta (OAuth2 Authorization Code)\n\n[Okta Authorization Code Grant](https://developer.okta.com/docs/guides/implement-auth-code/overview/) providing access tokens is supported.\n\nUse `requests_auth.OktaAuthorizationCode` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OktaAuthorizationCode\n\n\nokta = OktaAuthorizationCode(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nrequests.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n### Authorization Code Flow with Proof Key for Code Exchange\n\nProof Key for Code Exchange is implemented following [rfc7636](https://tools.ietf.org/html/rfc7636).\n\nUse `requests_auth.OAuth2AuthorizationCodePKCE` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OAuth2AuthorizationCodePKCE\n\nrequests.get('http://www.example.com', auth=OAuth2AuthorizationCodePKCE('https://www.authorization.url', 'https://www.token.url'))\n```\n\n#### Parameters \n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `token_url`             | OAuth 2 token URL.         | Mandatory |               |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 code will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a code or a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `code_field_name`       | Field name containing the code. | Optional | code |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `client_secret` | If client is not authenticated with the authorization server         |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Proof Key for Code Exchange providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/requests_auth/issues/new).\n\n##### Okta (OAuth2 Proof Key for Code Exchange)\n\n[Okta Proof Key for Code Exchange](https://developer.okta.com/docs/guides/implement-auth-code-pkce/overview/) providing access tokens is supported.\n\nUse `requests_auth.OktaAuthorizationCodePKCE` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OktaAuthorizationCodePKCE\n\n\nokta = OktaAuthorizationCodePKCE(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nrequests.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `code_field_name`      | Field name containing the code. | Optional | code |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_secret`        | If client is not authenticated with the authorization server     |\n| `nonce`        | Refer to http://openid.net/specs/openid-connect-core-1_0.html#IDToken for more details     |\n\n### Resource Owner Password Credentials flow \n\nResource Owner Password Credentials Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.3).\n\nUse `requests_auth.OAuth2ResourceOwnerPasswordCredentials` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OAuth2ResourceOwnerPasswordCredentials\n\nrequests.get('http://www.example.com', auth=OAuth2ResourceOwnerPasswordCredentials('https://www.token.url', 'user name', 'user password'))\n```\n\n#### Parameters\n\n| Name               | Description                                  | Mandatory | Default value |\n|:-------------------|:---------------------------------------------|:----------|:--------------|\n| `token_url`        | OAuth 2 token URL.                           | Mandatory |               |\n| `username`         | Resource owner user name.                    | Mandatory |               |\n| `password`         | Resource owner password.                     | Mandatory |               |\n| `timeout`          | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60            |\n| `header_name`      | Name of the header field used to send token. | Optional  | Authorization |\n| `header_value`     | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`            | Scope parameter sent to token URL as body. Can also be a list of scopes. | Optional |  |\n| `token_field_name` | Field name containing the token.             | Optional  | access_token  |\n\nAny other parameter will be put as body parameter in the token URL.\n\n### Client Credentials flow\n\nClient Credentials Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.4).\n\nUse `requests_auth.OAuth2ClientCredentials` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OAuth2ClientCredentials\n\nrequests.get('http://www.example.com', auth=OAuth2ClientCredentials('https://www.token.url', client_id='id', client_secret='secret'))\n```\n\n#### Parameters\n\n| Name               | Description                                  | Mandatory | Default value |\n|:-------------------|:---------------------------------------------|:----------|:--------------|\n| `token_url`        | OAuth 2 token URL.                           | Mandatory |               |\n| `client_id`         | Resource owner user name.                    | Mandatory |               |\n| `client_secret`         | Resource owner password.                     | Mandatory |               |\n| `timeout`          | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60            |\n| `header_name`      | Name of the header field used to send token. | Optional  | Authorization |\n| `header_value`     | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`            | Scope parameter sent to token URL as body. Can also be a list of scopes. | Optional |  |\n| `token_field_name` | Field name containing the token.             | Optional  | access_token  |\n\nAny other parameter will be put as body parameter in the token URL.\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Client Credentials Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/requests_auth/issues/new).\n\n##### Okta (OAuth2 Client Credentials)\n\n[Okta Client Credentials Grant](https://developer.okta.com/docs/guides/implement-client-creds/overview/) providing access tokens is supported.\n\nUse `requests_auth.OktaClientCredentials` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OktaClientCredentials\n\n\nokta = OktaClientCredentials(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_secret=\"secret\")\nrequests.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_secret`         | Resource owner password.                     | Mandatory |               |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n\nAny other parameter will be put as query parameter in the token URL.        \n\n### Implicit flow\n\nImplicit Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.2).\n\nUse `requests_auth.OAuth2Implicit` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OAuth2Implicit\n\nrequests.get('http://www.example.com', auth=OAuth2Implicit('https://www.authorization.url'))\n```\n\n#### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token if response_type is id_token, otherwise access_token |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Implicit Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/requests_auth/issues/new).\n\n##### Microsoft - Azure Active Directory (OAuth2 Access Token)\n\n[Microsoft identity platform access tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens) are supported.\n\nUse `requests_auth.AzureActiveDirectoryImplicit` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import AzureActiveDirectoryImplicit\n\n\naad = AzureActiveDirectoryImplicit(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nrequests.get('http://www.example.com', auth=aad)\n```\n\nYou can retrieve Microsoft Azure Active Directory application information thanks to the [application list on Azure portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | Microsoft Tenant Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_id`             | Microsoft Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details | Optional | Newly generated Universal Unique Identifier. |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Microsoft - Azure Active Directory (OpenID Connect ID token)\n\n[Microsoft identity platform ID tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/id-tokens) are supported.\n\nUse `requests_auth.AzureActiveDirectoryImplicitIdToken` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import AzureActiveDirectoryImplicitIdToken\n\n\naad = AzureActiveDirectoryImplicitIdToken(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nrequests.get('http://www.example.com', auth=aad)\n```\n\nYou can retrieve Microsoft Azure Active Directory application information thanks to the [application list on Azure portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | Microsoft Tenant Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_id`             | Microsoft Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | id_token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details | Optional | Newly generated Universal Unique Identifier. |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Okta (OAuth2 Implicit Access Token)\n\n[Okta Implicit Grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing access tokens is supported.\n\nUse `requests_auth.OktaImplicit` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OktaImplicit\n\n\nokta = OktaImplicit(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nrequests.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Okta (OpenID Connect Implicit ID token)\n\n[Okta Implicit Grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing ID tokens is supported.\n\nUse `requests_auth.OktaImplicitIdToken` to configure this kind of authentication.\n\n```python\nimport requests\nfrom requests_auth import OktaImplicitIdToken\n\n\nokta = OktaImplicitIdToken(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nrequests.get('http://www.example.com', auth=okta)\n```\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | id_token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | Optional | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `success_display_time`  | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional | 1 |\n| `failure_display_time`  | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | Optional | 5000 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n\n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n### Managing token cache\n\nTo avoid asking for a new token every new request, a token cache is used.\n\nDefault cache is in memory but it is also possible to use a physical cache.\n\nYou need to provide the location of your token cache file. It can be a full or relative path.\n\nIf the file already exists it will be used, if the file do not exists it will be created.\n\n```python\nfrom requests_auth import OAuth2, JsonTokenFileCache\n\nOAuth2.token_cache = JsonTokenFileCache('path/to/my_token_cache.json')\n```\n\n## API key in header\n\nYou can send an API key inside the header of your request using `requests_auth.HeaderApiKey`.\n\n```python\nimport requests\nfrom requests_auth import HeaderApiKey\n\nrequests.get('http://www.example.com', auth=HeaderApiKey('my_api_key'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | The API key that will be sent. | Mandatory |               |\n| `header_name`           | Name of the header field.      | Optional  | \"X-API-Key\"   |\n\n## API key in query\n\nYou can send an API key inside the query parameters of your request using `requests_auth.QueryApiKey`.\n\n```python\nimport requests\nfrom requests_auth import QueryApiKey\n\nrequests.get('http://www.example.com', auth=QueryApiKey('my_api_key'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | The API key that will be sent. | Mandatory |               |\n| `query_parameter_name`  | Name of the query parameter.   | Optional  | \"api_key\"     |\n\n## Basic\n\nYou can use basic authentication using `requests_auth.Basic`.\n\nThe only advantage of using this class instead of `requests` native support of basic authentication, is to be able to use it in [multiple authentication](#multiple-authentication-at-once).\n\n```python\nimport requests\nfrom requests_auth import Basic\n\nrequests.get('http://www.example.com', auth=Basic('username', 'password'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `username`              | User name.                     | Mandatory |               |\n| `password`              | User password.                 | Mandatory |               |\n\n## NTLM\n\nRequires [requests-negotiate-sspi module][4] or [requests_ntlm module][5] depending on provided parameters.\n\nYou can use Windows authentication using `requests_auth.NTLM`.\n\n```python\nimport requests\nfrom requests_auth import NTLM\n\nrequests.get('http://www.example.com', auth=NTLM())\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `username`              | User name.                     | Mandatory if requests_negotiate_sspi module is not installed. In such a case requests_ntlm module is mandatory. |               |\n| `password`              | User password.                 | Mandatory if requests_negotiate_sspi module is not installed. In such a case requests_ntlm module is mandatory. |               |\n\n## Multiple authentication at once\n\nYou can also use a combination of authentication using `+` as in the following sample:\n\n```python\nimport requests\nfrom requests_auth import HeaderApiKey, OAuth2Implicit\n\napi_key = HeaderApiKey('my_api_key')\noauth2 = OAuth2Implicit('https://www.example.com')\nrequests.get('http://www.example.com', auth=api_key + oauth2)\n```\n\n## Available pytest fixtures\n\nTesting the code using requests_auth authentication classes can be achieved using provided [`pytest`][6] fixtures.\n\n### token_cache_mock\n\n```python\nfrom requests_auth.testing import token_cache_mock, token_mock\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nUse this fixture to mock authentication success for any of the following classes:\n * OAuth2AuthorizationCodePKCE\n * OktaAuthorizationCodePKCE\n * OAuth2Implicit\n * OktaImplicit\n * OktaImplicitIdToken\n * AzureActiveDirectoryImplicit\n * AzureActiveDirectoryImplicitIdToken\n * OAuth2AuthorizationCode\n * OktaAuthorizationCode\n * OAuth2ClientCredentials\n * OktaClientCredentials\n * OAuth2ResourceOwnerPasswordCredentials,\n\nBy default, an access token with value `2YotnFZFEjr1zCsicMWpAA` is generated.\n\nYou can however return your custom token by providing your own `token_mock` fixture as in the following sample:\n\n```python\nimport pytest\n\nfrom requests_auth.testing import token_cache_mock\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    return \"MyCustomTokenValue\"\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nYou can even return a more complex token by using the `create_token` function.\n\nNote that [`pyjwt`](https://pypi.org/project/PyJWT/) is a required dependency in this case as it is used to generate the token returned by the authentication.\n\n```python\nimport pytest\n\nfrom requests_auth.testing import token_cache_mock, create_token\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    expiry = None  # TODO Compute your expiry\n    return create_token(expiry)\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\n### Advanced testing\n\n#### token_cache\n\nThis [`pytest`][6] fixture will return the token cache and ensure it is reset at the end of the test case.\n\n```python\nfrom requests_auth.testing import token_cache\n\ndef test_something(token_cache):\n    # perform code using authentication\n    pass\n```\n\n#### browser_mock\n\nThis [`pytest`][6] fixture will allow to mock the behavior of a web browser.\n\nWith this [`pytest`][6] fixture you will be allowed to fine tune your authentication related failures handling.\n\n[`pyjwt`](https://pypi.org/project/PyJWT/) is a required dependency if you use `create_token` helper function.\n\n```python\nimport datetime\n\nfrom requests_auth.testing import browser_mock, BrowserMock, create_token\n\ndef test_something(browser_mock: BrowserMock):\n    token_expiry = datetime.datetime.utcnow() + datetime.timedelta(hours=1)\n    token = create_token(token_expiry)\n    tab = browser_mock.add_response(\n        opened_url=\"http://url_opened_by_browser?state=1234\",\n        reply_url=f\"http://localhost:5000#access_token={token}&state=1234\",\n    )\n\n    # perform code using authentication\n\n    tab.assert_success(\n        \"You are now authenticated on 1234 You may close this tab.\"\n    )\n```\n\n## Endorsements\n\n> I love requests_auth. As a ~15 year pythonista, this library makes working with OAuth services a breeze. <333\n\n**Randall Degges**, Head of Evangelism, [Okta](https://developer.okta.com)\n\n[1]: https://pypi.python.org/pypi/requests \"requests module\"\n[2]: http://docs.python-requests.org/en/master/user/authentication/ \"authentication parameter on requests module\"\n[3]: http://openid.net/specs/openid-connect-core-1_0.html#IDToken \"OpenID ID Token specifications\"\n[4]: https://pypi.python.org/pypi/requests-negotiate-sspi \"requests-negotiate-sspi module\"\n[5]: https://pypi.python.org/pypi/requests_ntlm \"requests_ntlm module\"\n[6]: https://docs.pytest.org/en/latest/ \"pytest module\"\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/requests-auth/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://colin-b.github.io/requests_auth/", "keywords": "authentication,ntlm,oauth2,azure-active-directory,azure-ad,okta,apikey,multiple", "license": "MIT", "maintainer": "Colin Bounouar", "maintainer_email": "colin.bounouar.dev@gmail.com", "name": "requests-auth", "package_url": "https://pypi.org/project/requests-auth/", "platform": "Windows", "project_url": "https://pypi.org/project/requests-auth/", "project_urls": {"Changelog": "https://github.com/Colin-b/requests_auth/blob/master/CHANGELOG.md", "Download": "https://pypi.org/project/requests-auth/", "GitHub": "https://github.com/Colin-b/requests_auth", "Homepage": "https://colin-b.github.io/requests_auth/", "Issues": "https://github.com/Colin-b/requests_auth/issues"}, "release_url": "https://pypi.org/project/requests-auth/5.1.0/", "requires_dist": ["requests (==2.*)", "pyjwt (==1.*) ; extra == 'testing'", "pytest-responses (==0.4.*) ; extra == 'testing'", "pytest-cov (==2.*) ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "Authentication for Requests", "version": "5.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Authentication for Requests</h2>\n<p align=\"center\">\n<a href=\"https://pypi.org/project/requests-auth/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba5be5e67876fcdc24c2b9e7c52553e44904152b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72657175657374735f61757468\"></a>\n<a href=\"https://travis-ci.com/Colin-b/requests_auth\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de08b0209363d832cda87cb724f3f3cfb7ca756d/68747470733a2f2f6170692e7472617669732d63692e636f6d2f436f6c696e2d622f72657175657374735f617574682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://travis-ci.com/Colin-b/requests_auth\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0280f255d36847e3743058a68bedfb93626e993f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://travis-ci.com/Colin-b/requests_auth\" rel=\"nofollow\"><img alt=\"Number of tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77b5ee0af2f03a4c68c223cafe65f763add0917d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f74657374732d323432207061737365642d626c7565\"></a>\n<a href=\"https://pypi.org/project/requests-auth/\" rel=\"nofollow\"><img alt=\"Number of downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/606e715f525e60fda0d10c652d7c2414c599e27e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f72657175657374735f61757468\"></a>\n</p>\n<p>Provides authentication classes to be used with <a href=\"https://pypi.python.org/pypi/requests\" rel=\"nofollow\" title=\"requests module\"><code>requests</code></a> <a href=\"http://docs.python-requests.org/en/master/user/authentication/\" rel=\"nofollow\" title=\"authentication parameter on requests module\">authentication parameter</a>.</p>\n<p align=\"center\">\n    <a href=\"https://oauth.net/2/\" rel=\"nofollow\"><img alt=\"OAuth2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbbaa6422fda59f34b1cc710137b905c91570a45/68747470733a2f2f6f617574682e6e65742f696d616765732f6f617574682d322d736d2e706e67\"></a>\n    <a href=\"https://www.okta.com\" rel=\"nofollow\"><img alt=\"Okta\" height=\"120\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a2ada7743973706f6d2847fb71adb84c2850590/68747470733a2f2f7777772e6f6b74612e636f6d2f73697465732f616c6c2f7468656d65732f4f6b74612f696d616765732f6c6f676f732f646576656c6f7065722f4465765f4c6f676f2d30335f4c617267652e706e67\"></a>\n    <a href=\"https://azure.microsoft.com/en-us/services/active-directory/\" rel=\"nofollow\"><img alt=\"Azure Active Directory (AD)\" height=\"120\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3783e75a37568a6ce60f6451feb243e82f718741/68747470733a2f2f617a757265636f6d63646e2e617a757265656467652e6e65742f6376742d636461353963636430616135636564366666356132303532343137636635393662393239383039323165383865363637313237656163613232333261333161622f696d616765732f7368617265642f73657276696365732f70726963696e672d676c7970682d6c6f636b2e737667\"></a>\n</p>\n<p align=\"center\">Some of the supported authentication</p>\n<h2>Available authentication</h2>\n<ul>\n<li><a href=\"#oauth-2\" rel=\"nofollow\">OAuth2</a>\n<ul>\n<li><a href=\"#authorization-code-flow\" rel=\"nofollow\">Authorization Code Flow</a>\n<ul>\n<li><a href=\"#okta-oauth2-authorization-code\" rel=\"nofollow\">Okta</a></li>\n</ul>\n</li>\n<li><a href=\"#authorization-code-flow-with-proof-key-for-code-exchange\" rel=\"nofollow\">Authorization Code Flow with PKCE</a>\n<ul>\n<li><a href=\"#okta-oauth2-proof-key-for-code-exchange\" rel=\"nofollow\">Okta</a></li>\n</ul>\n</li>\n<li><a href=\"#resource-owner-password-credentials-flow\" rel=\"nofollow\">Resource Owner Password Credentials flow</a></li>\n<li><a href=\"#client-credentials-flow\" rel=\"nofollow\">Client Credentials Flow</a>\n<ul>\n<li><a href=\"#okta-oauth2-client-credentials\" rel=\"nofollow\">Okta</a></li>\n</ul>\n</li>\n<li><a href=\"#implicit-flow\" rel=\"nofollow\">Implicit Flow</a>\n<ul>\n<li><a href=\"#microsoft---azure-active-directory-oauth2-access-token\" rel=\"nofollow\">Azure AD (Access Token)</a></li>\n<li><a href=\"#microsoft---azure-active-directory-openid-connect-id-token\" rel=\"nofollow\">Azure AD (ID token)</a></li>\n<li><a href=\"#okta-oauth2-implicit-access-token\" rel=\"nofollow\">Okta (Access Token)</a></li>\n<li><a href=\"#okta-openid-connect-implicit-id-token\" rel=\"nofollow\">Okta (ID token)</a></li>\n</ul>\n</li>\n<li><a href=\"#managing-token-cache\" rel=\"nofollow\">Managing token cache</a></li>\n</ul>\n</li>\n<li>API key\n<ul>\n<li><a href=\"#api-key-in-header\" rel=\"nofollow\">In header</a></li>\n<li><a href=\"#api-key-in-query\" rel=\"nofollow\">In query</a></li>\n</ul>\n</li>\n<li><a href=\"#basic\" rel=\"nofollow\">Basic</a></li>\n<li><a href=\"#ntlm\" rel=\"nofollow\">NTLM (Windows)</a></li>\n<li><a href=\"#multiple-authentication-at-once\" rel=\"nofollow\">Multiple authentication at once</a></li>\n<li><a href=\"#endorsements\" rel=\"nofollow\">Endorsements</a></li>\n</ul>\n<h2>OAuth 2</h2>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> flows are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/requests_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h3>Authorization Code flow</h3>\n<p>Authorization Code Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>requests_auth.OAuth2AuthorizationCode</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2AuthorizationCode</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2AuthorizationCode</span><span class=\"p\">(</span><span class=\"s1\">'https://www.authorization.url'</span><span class=\"p\">,</span> <span class=\"s1\">'https://www.token.url'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>authorization_url</code></td>\n<td align=\"left\">OAuth 2 authorization URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 code will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a code or a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>code_field_name</code></td>\n<td align=\"left\">Field name containing the code.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">User name in case basic authentication should be used to retrieve token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">User password in case basic authentication should be used to retrieve token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Corresponding to your Application ID (in Microsoft Azure app portal)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">If client is not authenticated with the authorization server</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n</tr></tbody></table>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Authorization Code Grant providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/requests_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Okta (OAuth2 Authorization Code)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-auth-code/overview/\" rel=\"nofollow\">Okta Authorization Code Grant</a> providing access tokens is supported.</p>\n<p>Use <code>requests_auth.OktaAuthorizationCode</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaAuthorizationCode</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaAuthorizationCode</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">openid</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h3>Authorization Code Flow with Proof Key for Code Exchange</h3>\n<p>Proof Key for Code Exchange is implemented following <a href=\"https://tools.ietf.org/html/rfc7636\" rel=\"nofollow\">rfc7636</a>.</p>\n<p>Use <code>requests_auth.OAuth2AuthorizationCodePKCE</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2AuthorizationCodePKCE</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2AuthorizationCodePKCE</span><span class=\"p\">(</span><span class=\"s1\">'https://www.authorization.url'</span><span class=\"p\">,</span> <span class=\"s1\">'https://www.token.url'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>authorization_url</code></td>\n<td align=\"left\">OAuth 2 authorization URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 code will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a code or a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>code_field_name</code></td>\n<td align=\"left\">Field name containing the code.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Corresponding to your Application ID (in Microsoft Azure app portal)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">If client is not authenticated with the authorization server</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n</tr></tbody></table>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Proof Key for Code Exchange providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/requests_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Okta (OAuth2 Proof Key for Code Exchange)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-auth-code-pkce/overview/\" rel=\"nofollow\">Okta Proof Key for Code Exchange</a> providing access tokens is supported.</p>\n<p>Use <code>requests_auth.OktaAuthorizationCodePKCE</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaAuthorizationCodePKCE</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaAuthorizationCodePKCE</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>code_field_name</code></td>\n<td align=\"left\">Field name containing the code.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">code</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">openid</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">If client is not authenticated with the authorization server</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\">http://openid.net/specs/openid-connect-core-1_0.html#IDToken</a> for more details</td>\n</tr></tbody></table>\n<h3>Resource Owner Password Credentials flow</h3>\n<p>Resource Owner Password Credentials Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>requests_auth.OAuth2ResourceOwnerPasswordCredentials</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2ResourceOwnerPasswordCredentials</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2ResourceOwnerPasswordCredentials</span><span class=\"p\">(</span><span class=\"s1\">'https://www.token.url'</span><span class=\"p\">,</span> <span class=\"s1\">'user name'</span><span class=\"p\">,</span> <span class=\"s1\">'user password'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">Resource owner user name.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">Resource owner password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent to token URL as body. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as body parameter in the token URL.</p>\n<h3>Client Credentials flow</h3>\n<p>Client Credentials Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>requests_auth.OAuth2ClientCredentials</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2ClientCredentials</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2ClientCredentials</span><span class=\"p\">(</span><span class=\"s1\">'https://www.token.url'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>token_url</code></td>\n<td align=\"left\">OAuth 2 token URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Resource owner user name.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">Resource owner password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent to token URL as body. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as body parameter in the token URL.</p>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Client Credentials Grant providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/requests_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Okta (OAuth2 Client Credentials)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-client-creds/overview/\" rel=\"nofollow\">Okta Client Credentials Grant</a> providing access tokens is supported.</p>\n<p>Use <code>requests_auth.OktaClientCredentials</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaClientCredentials</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaClientCredentials</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s2\">\"secret\"</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">Resource owner password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">openid</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the token URL.</p>\n<h3>Implicit flow</h3>\n<p>Implicit Grant is implemented following <a href=\"https://tools.ietf.org/html/rfc6749#section-4.2\" rel=\"nofollow\">rfc6749</a>.</p>\n<p>Use <code>requests_auth.OAuth2Implicit</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2Implicit</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">OAuth2Implicit</span><span class=\"p\">(</span><span class=\"s1\">'https://www.authorization.url'</span><span class=\"p\">))</span>\n</pre>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>authorization_url</code></td>\n<td align=\"left\">OAuth 2 authorization URL.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token if response_type is id_token, otherwise access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Corresponding to your Application ID (in Microsoft Azure app portal)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n</tr>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h4>Common providers</h4>\n<p>Most of <a href=\"https://oauth.net/2/\" rel=\"nofollow\">OAuth2</a> Implicit Grant providers are supported.</p>\n<p>If the one you are looking for is not yet supported, feel free to <a href=\"https://github.com/Colin-b/requests_auth/issues/new\" rel=\"nofollow\">ask for its implementation</a>.</p>\n<h5>Microsoft - Azure Active Directory (OAuth2 Access Token)</h5>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens\" rel=\"nofollow\">Microsoft identity platform access tokens</a> are supported.</p>\n<p>Use <code>requests_auth.AzureActiveDirectoryImplicit</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">AzureActiveDirectoryImplicit</span>\n\n\n<span class=\"n\">aad</span> <span class=\"o\">=</span> <span class=\"n\">AzureActiveDirectoryImplicit</span><span class=\"p\">(</span><span class=\"n\">tenant_id</span><span class=\"o\">=</span><span class=\"s1\">'45239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">aad</span><span class=\"p\">)</span>\n</pre>\n<p>You can retrieve Microsoft Azure Active Directory application information thanks to the <a href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/\" rel=\"nofollow\">application list on Azure portal</a>.</p>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>tenant_id</code></td>\n<td align=\"left\">Microsoft Tenant Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Microsoft Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h5>Microsoft - Azure Active Directory (OpenID Connect ID token)</h5>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/id-tokens\" rel=\"nofollow\">Microsoft identity platform ID tokens</a> are supported.</p>\n<p>Use <code>requests_auth.AzureActiveDirectoryImplicitIdToken</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">AzureActiveDirectoryImplicitIdToken</span>\n\n\n<span class=\"n\">aad</span> <span class=\"o\">=</span> <span class=\"n\">AzureActiveDirectoryImplicitIdToken</span><span class=\"p\">(</span><span class=\"n\">tenant_id</span><span class=\"o\">=</span><span class=\"s1\">'45239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">aad</span><span class=\"p\">)</span>\n</pre>\n<p>You can retrieve Microsoft Azure Active Directory application information thanks to the <a href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/\" rel=\"nofollow\">application list on Azure portal</a>.</p>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>tenant_id</code></td>\n<td align=\"left\">Microsoft Tenant Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Microsoft Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h5>Okta (OAuth2 Implicit Access Token)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-implicit/overview/\" rel=\"nofollow\">Okta Implicit Grant</a> providing access tokens is supported.</p>\n<p>Use <code>requests_auth.OktaImplicit</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaImplicit</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaImplicit</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">access_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">['openid', 'profile', 'email']</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h5>Okta (OpenID Connect Implicit ID token)</h5>\n<p><a href=\"https://developer.okta.com/docs/guides/implement-implicit/overview/\" rel=\"nofollow\">Okta Implicit Grant</a> providing ID tokens is supported.</p>\n<p>Use <code>requests_auth.OktaImplicitIdToken</code> to configure this kind of authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OktaImplicitIdToken</span>\n\n\n<span class=\"n\">okta</span> <span class=\"o\">=</span> <span class=\"n\">OktaImplicitIdToken</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"s1\">'testserver.okta-emea.com'</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'54239d18-c68c-4c47-8bdd-ce71ea1d50cd'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">okta</span><span class=\"p\">)</span>\n</pre>\n<h6>Parameters</h6>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>instance</code></td>\n<td align=\"left\">Okta instance (like \"testserver.okta-emea.com\").</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">Okta Application Identifier (formatted as an Universal Unique Identifier).</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>response_type</code></td>\n<td align=\"left\">Value of the response_type query parameter if not already provided in authorization URL.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>token_field_name</code></td>\n<td align=\"left\">Field name containing the token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">id_token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>nonce</code></td>\n<td align=\"left\">Refer to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#IDToken\" rel=\"nofollow\" title=\"OpenID ID Token specifications\">OpenID ID Token specifications</a> for more details.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Newly generated Universal Unique Identifier.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">Scope parameter sent in query. Can also be a list of scopes.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">['openid', 'profile', 'email']</td>\n</tr>\n<tr>\n<td align=\"left\"><code>authorization_server</code></td>\n<td align=\"left\">Okta authorization server.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">'default'</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_endpoint</code></td>\n<td align=\"left\">Custom endpoint that will be used as redirect_uri the following way: <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a>:&lt;redirect_uri_port&gt;/&lt;redirect_uri_endpoint&gt;.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">''</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri_port</code></td>\n<td align=\"left\">The port on which the server listening for the OAuth 2 token will be started.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">Maximum amount of seconds to wait for a token to be received once requested.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">60</td>\n</tr>\n<tr>\n<td align=\"left\"><code>success_display_time</code></td>\n<td align=\"left\">In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\"><code>failure_display_time</code></td>\n<td align=\"left\">In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">5000</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field used to send token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Authorization</td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_value</code></td>\n<td align=\"left\">Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">Bearer {token}</td>\n</tr></tbody></table>\n<p>Any other parameter will be put as query parameter in the authorization URL.</p>\n<p>Usual extra parameters are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prompt</code></td>\n<td align=\"left\">none to avoid prompting the user if a session is already opened.</td>\n</tr></tbody></table>\n<h3>Managing token cache</h3>\n<p>To avoid asking for a new token every new request, a token cache is used.</p>\n<p>Default cache is in memory but it is also possible to use a physical cache.</p>\n<p>You need to provide the location of your token cache file. It can be a full or relative path.</p>\n<p>If the file already exists it will be used, if the file do not exists it will be created.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">OAuth2</span><span class=\"p\">,</span> <span class=\"n\">JsonTokenFileCache</span>\n\n<span class=\"n\">OAuth2</span><span class=\"o\">.</span><span class=\"n\">token_cache</span> <span class=\"o\">=</span> <span class=\"n\">JsonTokenFileCache</span><span class=\"p\">(</span><span class=\"s1\">'path/to/my_token_cache.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>API key in header</h2>\n<p>You can send an API key inside the header of your request using <code>requests_auth.HeaderApiKey</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">HeaderApiKey</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">HeaderApiKey</span><span class=\"p\">(</span><span class=\"s1\">'my_api_key'</span><span class=\"p\">))</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>api_key</code></td>\n<td align=\"left\">The API key that will be sent.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>header_name</code></td>\n<td align=\"left\">Name of the header field.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">\"X-API-Key\"</td>\n</tr></tbody></table>\n<h2>API key in query</h2>\n<p>You can send an API key inside the query parameters of your request using <code>requests_auth.QueryApiKey</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">QueryApiKey</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">QueryApiKey</span><span class=\"p\">(</span><span class=\"s1\">'my_api_key'</span><span class=\"p\">))</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>api_key</code></td>\n<td align=\"left\">The API key that will be sent.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>query_parameter_name</code></td>\n<td align=\"left\">Name of the query parameter.</td>\n<td align=\"left\">Optional</td>\n<td align=\"left\">\"api_key\"</td>\n</tr></tbody></table>\n<h2>Basic</h2>\n<p>You can use basic authentication using <code>requests_auth.Basic</code>.</p>\n<p>The only advantage of using this class instead of <code>requests</code> native support of basic authentication, is to be able to use it in <a href=\"#multiple-authentication-at-once\" rel=\"nofollow\">multiple authentication</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">Basic</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">Basic</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">))</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">User name.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">User password.</td>\n<td align=\"left\">Mandatory</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<h2>NTLM</h2>\n<p>Requires <a href=\"https://pypi.python.org/pypi/requests-negotiate-sspi\" rel=\"nofollow\" title=\"requests-negotiate-sspi module\">requests-negotiate-sspi module</a> or <a href=\"https://pypi.python.org/pypi/requests_ntlm\" rel=\"nofollow\" title=\"requests_ntlm module\">requests_ntlm module</a> depending on provided parameters.</p>\n<p>You can use Windows authentication using <code>requests_auth.NTLM</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">NTLM</span>\n\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">NTLM</span><span class=\"p\">())</span>\n</pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Mandatory</th>\n<th align=\"left\">Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>username</code></td>\n<td align=\"left\">User name.</td>\n<td align=\"left\">Mandatory if requests_negotiate_sspi module is not installed. In such a case requests_ntlm module is mandatory.</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>password</code></td>\n<td align=\"left\">User password.</td>\n<td align=\"left\">Mandatory if requests_negotiate_sspi module is not installed. In such a case requests_ntlm module is mandatory.</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<h2>Multiple authentication at once</h2>\n<p>You can also use a combination of authentication using <code>+</code> as in the following sample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth</span> <span class=\"kn\">import</span> <span class=\"n\">HeaderApiKey</span><span class=\"p\">,</span> <span class=\"n\">OAuth2Implicit</span>\n\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">HeaderApiKey</span><span class=\"p\">(</span><span class=\"s1\">'my_api_key'</span><span class=\"p\">)</span>\n<span class=\"n\">oauth2</span> <span class=\"o\">=</span> <span class=\"n\">OAuth2Implicit</span><span class=\"p\">(</span><span class=\"s1\">'https://www.example.com'</span><span class=\"p\">)</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">api_key</span> <span class=\"o\">+</span> <span class=\"n\">oauth2</span><span class=\"p\">)</span>\n</pre>\n<h2>Available pytest fixtures</h2>\n<p>Testing the code using requests_auth authentication classes can be achieved using provided <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixtures.</p>\n<h3>token_cache_mock</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache_mock</span><span class=\"p\">,</span> <span class=\"n\">token_mock</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache_mock</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Use this fixture to mock authentication success for any of the following classes:</p>\n<ul>\n<li>OAuth2AuthorizationCodePKCE</li>\n<li>OktaAuthorizationCodePKCE</li>\n<li>OAuth2Implicit</li>\n<li>OktaImplicit</li>\n<li>OktaImplicitIdToken</li>\n<li>AzureActiveDirectoryImplicit</li>\n<li>AzureActiveDirectoryImplicitIdToken</li>\n<li>OAuth2AuthorizationCode</li>\n<li>OktaAuthorizationCode</li>\n<li>OAuth2ClientCredentials</li>\n<li>OktaClientCredentials</li>\n<li>OAuth2ResourceOwnerPasswordCredentials,</li>\n</ul>\n<p>By default, an access token with value <code>2YotnFZFEjr1zCsicMWpAA</code> is generated.</p>\n<p>You can however return your custom token by providing your own <code>token_mock</code> fixture as in the following sample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache_mock</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">token_mock</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"MyCustomTokenValue\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache_mock</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>You can even return a more complex token by using the <code>create_token</code> function.</p>\n<p>Note that <a href=\"https://pypi.org/project/PyJWT/\" rel=\"nofollow\"><code>pyjwt</code></a> is a required dependency in this case as it is used to generate the token returned by the authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache_mock</span><span class=\"p\">,</span> <span class=\"n\">create_token</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">token_mock</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">expiry</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># TODO Compute your expiry</span>\n    <span class=\"k\">return</span> <span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"n\">expiry</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache_mock</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h3>Advanced testing</h3>\n<h4>token_cache</h4>\n<p>This <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixture will return the token cache and ensure it is reset at the end of the test case.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">token_cache</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">token_cache</span><span class=\"p\">):</span>\n    <span class=\"c1\"># perform code using authentication</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h4>browser_mock</h4>\n<p>This <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixture will allow to mock the behavior of a web browser.</p>\n<p>With this <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\" title=\"pytest module\"><code>pytest</code></a> fixture you will be allowed to fine tune your authentication related failures handling.</p>\n<p><a href=\"https://pypi.org/project/PyJWT/\" rel=\"nofollow\"><code>pyjwt</code></a> is a required dependency if you use <code>create_token</code> helper function.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">requests_auth.testing</span> <span class=\"kn\">import</span> <span class=\"n\">browser_mock</span><span class=\"p\">,</span> <span class=\"n\">BrowserMock</span><span class=\"p\">,</span> <span class=\"n\">create_token</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">browser_mock</span><span class=\"p\">:</span> <span class=\"n\">BrowserMock</span><span class=\"p\">):</span>\n    <span class=\"n\">token_expiry</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"n\">token_expiry</span><span class=\"p\">)</span>\n    <span class=\"n\">tab</span> <span class=\"o\">=</span> <span class=\"n\">browser_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span>\n        <span class=\"n\">opened_url</span><span class=\"o\">=</span><span class=\"s2\">\"http://url_opened_by_browser?state=1234\"</span><span class=\"p\">,</span>\n        <span class=\"n\">reply_url</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"http://localhost:5000#access_token=</span><span class=\"si\">{</span><span class=\"n\">token</span><span class=\"si\">}</span><span class=\"s2\">&amp;state=1234\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># perform code using authentication</span>\n\n    <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">assert_success</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"You are now authenticated on 1234 You may close this tab.\"</span>\n    <span class=\"p\">)</span>\n</pre>\n<h2>Endorsements</h2>\n<blockquote>\n<p>I love requests_auth. As a ~15 year pythonista, this library makes working with OAuth services a breeze. &lt;333</p>\n</blockquote>\n<p><strong>Randall Degges</strong>, Head of Evangelism, <a href=\"https://developer.okta.com\" rel=\"nofollow\">Okta</a></p>\n\n          </div>"}, "last_serial": 6747971, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "ab4b850c7efbf57d47c9353ab78865de", "sha256": "692e49c4b094b565ab5aa8cacd6df11238d8453ac22f2d331a314bca612cf9de"}, "downloads": -1, "filename": "requests_auth-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ab4b850c7efbf57d47c9353ab78865de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11825, "upload_time": "2018-01-19T16:12:23", "upload_time_iso_8601": "2018-01-19T16:12:23.259115Z", "url": "https://files.pythonhosted.org/packages/dd/e5/e638d78e8ace2f748448baffa2b7f50ddd0d98d9abafa0f3940d38c20c0d/requests_auth-1.0.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "2f99a3aa581d4077234f73150bf44893", "sha256": "c89ccfc66ff3daae3f8c2c3f60721d770019accccef1fced47428ccc827bd67b"}, "downloads": -1, "filename": "requests_auth-2.0.0.tar.gz", "has_sig": false, "md5_digest": "2f99a3aa581d4077234f73150bf44893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12744, "upload_time": "2018-10-09T10:31:37", "upload_time_iso_8601": "2018-10-09T10:31:37.542305Z", "url": "https://files.pythonhosted.org/packages/30/17/fd8d870f84eae6565f159a9ee526c341b9453a25813a6b0674eabbfb2cce/requests_auth-2.0.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "665972f3e4054954ab06d4423e93a9bb", "sha256": "0b1d67d34d559f9a584bf9d0a896aa63fdfed11323bb438ee8482fe1607d7ad3"}, "downloads": -1, "filename": "requests_auth-3.0.0.tar.gz", "has_sig": false, "md5_digest": "665972f3e4054954ab06d4423e93a9bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16381, "upload_time": "2018-11-13T18:06:13", "upload_time_iso_8601": "2018-11-13T18:06:13.372496Z", "url": "https://files.pythonhosted.org/packages/b5/84/e6e7d07279e734a182219266f64c99d51c50bee4e60a44a66153522f944d/requests_auth-3.0.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "503baf8184d847e6a07c761a19952ce0", "sha256": "31cb825f31dfa2715f66f94b7771bc588ef5098b71606fe2a5654bd75221bda0"}, "downloads": -1, "filename": "requests_auth-4.0.0.tar.gz", "has_sig": false, "md5_digest": "503baf8184d847e6a07c761a19952ce0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16977, "upload_time": "2018-12-16T16:08:19", "upload_time_iso_8601": "2018-12-16T16:08:19.644456Z", "url": "https://files.pythonhosted.org/packages/44/4e/9af83abc3a30580c3bca27f42ddee15aedf28e57b29f928d86ae4727b034/requests_auth-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "3bdf39594f555a1fd9268f9d020ba47d", "sha256": "85040a26f83c1852a5c965911da305073fc91175613439f9bee4a79e0d3b8762"}, "downloads": -1, "filename": "requests_auth-4.0.1.tar.gz", "has_sig": false, "md5_digest": "3bdf39594f555a1fd9268f9d020ba47d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17051, "upload_time": "2018-12-16T16:22:57", "upload_time_iso_8601": "2018-12-16T16:22:57.521188Z", "url": "https://files.pythonhosted.org/packages/62/42/bc15b06ed588c818db95ebc93ccff65e674cd89c85062c1c51dc7f977260/requests_auth-4.0.1.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "6a4167c1717a5d46af583b2095e7ba87", "sha256": "5ba0ea4f203c5b6674e6a9254212b8c4d97c5a43606e928452e6d798d5c85af5"}, "downloads": -1, "filename": "requests_auth-4.1.0.tar.gz", "has_sig": false, "md5_digest": "6a4167c1717a5d46af583b2095e7ba87", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 24882, "upload_time": "2019-11-13T17:34:44", "upload_time_iso_8601": "2019-11-13T17:34:44.289724Z", "url": "https://files.pythonhosted.org/packages/f2/02/a814ddd7016a38a71cca4a67e52ea25f13f4e47bd3de4a24878312f546fe/requests_auth-4.1.0.tar.gz", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "4a1372db3d5492461d5cc6a26f2bc208", "sha256": "02b8c566f003948bbc717d9ab067b08438962061b3bc8b819033b1679f76f5bc"}, "downloads": -1, "filename": "requests_auth-5.0.0.tar.gz", "has_sig": false, "md5_digest": "4a1372db3d5492461d5cc6a26f2bc208", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26228, "upload_time": "2019-11-21T14:46:27", "upload_time_iso_8601": "2019-11-21T14:46:27.053027Z", "url": "https://files.pythonhosted.org/packages/e5/8b/f3b86de333b9f19c37c4ad862d769e3b3d8f13bdf35c6328eb845387dc86/requests_auth-5.0.0.tar.gz", "yanked": false}], "5.0.1": [{"comment_text": "", "digests": {"md5": "f46e1fba08661c5982d1d326f302ae30", "sha256": "1de2a56953f6b7c804bc6469ac973398c86db11f1c1deb69f8369572f659721b"}, "downloads": -1, "filename": "requests_auth-5.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f46e1fba08661c5982d1d326f302ae30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20378, "upload_time": "2019-11-27T23:57:54", "upload_time_iso_8601": "2019-11-27T23:57:54.521528Z", "url": "https://files.pythonhosted.org/packages/da/5d/3f74f97cc674feb9ac68655fdc8807e88dd66eaea6625af5c737a03f668f/requests_auth-5.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0a207a67fa53ca33f1a8d5bf7062984", "sha256": "e259f10e2e371a1910c74a1f302c53ace9747825e2f011d4cdf686081c153559"}, "downloads": -1, "filename": "requests_auth-5.0.1.tar.gz", "has_sig": false, "md5_digest": "d0a207a67fa53ca33f1a8d5bf7062984", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25025, "upload_time": "2019-11-27T23:57:56", "upload_time_iso_8601": "2019-11-27T23:57:56.435451Z", "url": "https://files.pythonhosted.org/packages/6d/72/b10eaa87c2e38fcb64ac4c881ea3510a3143af1bc9a7f2a3742d245b6b02/requests_auth-5.0.1.tar.gz", "yanked": false}], "5.0.2": [{"comment_text": "", "digests": {"md5": "c397d5b2137e7a2027f1a081208222e9", "sha256": "d1f8696f4f8e3e36538b16e17299f584cc077436633e97528f497e999a77d02f"}, "downloads": -1, "filename": "requests_auth-5.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c397d5b2137e7a2027f1a081208222e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20410, "upload_time": "2019-12-12T17:44:05", "upload_time_iso_8601": "2019-12-12T17:44:05.693288Z", "url": "https://files.pythonhosted.org/packages/2d/c3/5d8d9db3a12836a6b4ddff7dc6c872cace93c40fa18ac696630e02372a51/requests_auth-5.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54c91c09d380864a31b86a6732082d08", "sha256": "20860730f52022d5113153b82f29e8320828e8095daa4e6a4e500b7a43466537"}, "downloads": -1, "filename": "requests_auth-5.0.2.tar.gz", "has_sig": false, "md5_digest": "54c91c09d380864a31b86a6732082d08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25276, "upload_time": "2019-12-12T17:44:07", "upload_time_iso_8601": "2019-12-12T17:44:07.455981Z", "url": "https://files.pythonhosted.org/packages/af/c7/e299c625c3091a998bd217465ef5dc7d8a859ed507e286dacaf8683ee0fc/requests_auth-5.0.2.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "5a9e063a9c73294efc6d78b934bc7c58", "sha256": "34340e2289b41ee8431822800dd49560f5f9b6ae9a72e4a40c6ddeabeac1f9cf"}, "downloads": -1, "filename": "requests_auth-5.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a9e063a9c73294efc6d78b934bc7c58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23123, "upload_time": "2020-03-04T13:57:45", "upload_time_iso_8601": "2020-03-04T13:57:45.703077Z", "url": "https://files.pythonhosted.org/packages/01/48/dcd2706d245e6709eef4f72f4ddbab239a20f3507da81456becef0401e60/requests_auth-5.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa6df9e4d1b127c26e5c9a605d08405b", "sha256": "59bb26253637f09067a66f7ea57ad354b04eb01778bd35628f6502d107932dd2"}, "downloads": -1, "filename": "requests_auth-5.1.0.tar.gz", "has_sig": false, "md5_digest": "aa6df9e4d1b127c26e5c9a605d08405b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28997, "upload_time": "2020-03-04T13:57:47", "upload_time_iso_8601": "2020-03-04T13:57:47.043112Z", "url": "https://files.pythonhosted.org/packages/7f/a1/713558db6ec11ed606b7587f1330f9feacfc6dafce9c9c0e28b71fe4c3fb/requests_auth-5.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a9e063a9c73294efc6d78b934bc7c58", "sha256": "34340e2289b41ee8431822800dd49560f5f9b6ae9a72e4a40c6ddeabeac1f9cf"}, "downloads": -1, "filename": "requests_auth-5.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a9e063a9c73294efc6d78b934bc7c58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23123, "upload_time": "2020-03-04T13:57:45", "upload_time_iso_8601": "2020-03-04T13:57:45.703077Z", "url": "https://files.pythonhosted.org/packages/01/48/dcd2706d245e6709eef4f72f4ddbab239a20f3507da81456becef0401e60/requests_auth-5.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa6df9e4d1b127c26e5c9a605d08405b", "sha256": "59bb26253637f09067a66f7ea57ad354b04eb01778bd35628f6502d107932dd2"}, "downloads": -1, "filename": "requests_auth-5.1.0.tar.gz", "has_sig": false, "md5_digest": "aa6df9e4d1b127c26e5c9a605d08405b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28997, "upload_time": "2020-03-04T13:57:47", "upload_time_iso_8601": "2020-03-04T13:57:47.043112Z", "url": "https://files.pythonhosted.org/packages/7f/a1/713558db6ec11ed606b7587f1330f9feacfc6dafce9c9c0e28b71fe4c3fb/requests_auth-5.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:10 2020"}