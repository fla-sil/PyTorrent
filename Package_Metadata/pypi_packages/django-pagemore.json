{"info": {"author": "Raymond Penners", "author_email": "raymond.penners@intenct.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\ndjango-pagemore\n===============\n\nKISS approach to a \"Load more\" style AJAX paginator\n\nRequirements\n============\n\n- Django 1.3+\n- jQuery\n\nFeatures\n========\n\n- Non-intrusive: your Django view is completely unaware of dynamic\n  load-more stuff going on.\n- There is literally no code (no Python, no Javascript) required to\n  get a fully AJAX style \"load more\" going.\n- KISS\n\n\nQuickstart\n==========\n\n- Write your view as usual, handing over an (unpaginated) list of\n  items to a template.\n- Render the list of items in your template as follows::\n\n    {% load pagemore %}\n    {% more_paginator items per_page=10 ordered_by=\"-created_at\" as paginator %}\n    \n    {% for item in paginator.objects %}\n    {% if forloop.first %}\n    <div class=\"pagemore-container\">\n    {% endif %}\n    {{item}}\n    {% if forloop.last %}\n    </div>\n    {% if paginator.has_more %}\n    <a class=\"pagemore-paginator\" href=\"?{{paginator.next_query}}\">More items...</a>\n    {% endif %}\n    {% endif %}\n    {% endfor %}\n\n    <script type=\"text/javascript\" src=\"{{STATIC_URL}}pagemore/js/pagemore.js\"></script>\n    <script type=\"text/javascript\">\n        $(function() { $(\".pagemore-paginator\").pagemore(); });\n    </script>\n\n- That's all!\n\nPagination Strategies\n=====================\n\nWhen a user is paginating through a list of items, while at the same\ntime new items are being inserted, offset based slicing would result\nin duplicate items being shown.  A way to circumvent this is to make\nsure that the items are properly ordered and to filter on items after\na certain point. Both strategies are supported. \n\n\nPaginate by Slicing\n-------------------\n\nUsage::\n\n    {% more_paginator ... strategy=\"slice\" ... %}\n\nCharacteristics:\n\n- Supports both querysets and lists\n\n- Does not order the objects unless explicitly told to (`ordered_by`).\n\nPaginate by Filtering\n---------------------\n\nUsage::\n\n    {% more_paginator ... strategy=\"filter\" ... %}\n\nCharacteristics:\n\n- Only supports querysets\n\n- Enforces an ordering of the objects passed (default on `id`, overridable \n  by `ordered_by`).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pennersr/django-pagemore", "keywords": "django pagination paginator ajax", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-pagemore", "package_url": "https://pypi.org/project/django-pagemore/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pagemore/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/pennersr/django-pagemore"}, "release_url": "https://pypi.org/project/django-pagemore/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "KISS approach to a \"Load more\" style AJAX paginator.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>KISS approach to a \u201cLoad more\u201d style AJAX paginator</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django 1.3+</li>\n<li>jQuery</li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Non-intrusive: your Django view is completely unaware of dynamic\nload-more stuff going on.</li>\n<li>There is literally no code (no Python, no Javascript) required to\nget a fully AJAX style \u201cload more\u201d going.</li>\n<li>KISS</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<ul>\n<li><p>Write your view as usual, handing over an (unpaginated) list of\nitems to a template.</p>\n</li>\n<li><p>Render the list of items in your template as follows:</p>\n<pre>{% load pagemore %}\n{% more_paginator items per_page=10 ordered_by=\"-created_at\" as paginator %}\n\n{% for item in paginator.objects %}\n{% if forloop.first %}\n&lt;div class=\"pagemore-container\"&gt;\n{% endif %}\n{{item}}\n{% if forloop.last %}\n&lt;/div&gt;\n{% if paginator.has_more %}\n&lt;a class=\"pagemore-paginator\" href=\"?{{paginator.next_query}}\"&gt;More items...&lt;/a&gt;\n{% endif %}\n{% endif %}\n{% endfor %}\n\n&lt;script type=\"text/javascript\" src=\"{{STATIC_URL}}pagemore/js/pagemore.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    $(function() { $(\".pagemore-paginator\").pagemore(); });\n&lt;/script&gt;\n</pre>\n</li>\n<li><p>That\u2019s all!</p>\n</li>\n</ul>\n</div>\n<div id=\"pagination-strategies\">\n<h2>Pagination Strategies</h2>\n<p>When a user is paginating through a list of items, while at the same\ntime new items are being inserted, offset based slicing would result\nin duplicate items being shown.  A way to circumvent this is to make\nsure that the items are properly ordered and to filter on items after\na certain point. Both strategies are supported.</p>\n<div id=\"paginate-by-slicing\">\n<h3>Paginate by Slicing</h3>\n<p>Usage:</p>\n<pre>{% more_paginator ... strategy=\"slice\" ... %}\n</pre>\n<p>Characteristics:</p>\n<ul>\n<li>Supports both querysets and lists</li>\n<li>Does not order the objects unless explicitly told to (<cite>ordered_by</cite>).</li>\n</ul>\n</div>\n<div id=\"paginate-by-filtering\">\n<h3>Paginate by Filtering</h3>\n<p>Usage:</p>\n<pre>{% more_paginator ... strategy=\"filter\" ... %}\n</pre>\n<p>Characteristics:</p>\n<ul>\n<li>Only supports querysets</li>\n<li>Enforces an ordering of the objects passed (default on <cite>id</cite>, overridable\nby <cite>ordered_by</cite>).</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2703155, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "50d57ea54716ec8a536262ab0c123140", "sha256": "c5a596a1aef4e5d08e0d3999bcfb598f2f15dcdf05c347954ddde49c0daf4319"}, "downloads": -1, "filename": "django-pagemore-0.1.0.tar.gz", "has_sig": false, "md5_digest": "50d57ea54716ec8a536262ab0c123140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6257, "upload_time": "2017-01-31T11:55:31", "upload_time_iso_8601": "2017-01-31T11:55:31.490334Z", "url": "https://files.pythonhosted.org/packages/a3/18/62f55a9409dbdcc67a83d7eb47279ae3d9f18e7a44d8c0bbeeeccd2b7d0a/django-pagemore-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "12e80d27249e67da6dfbd15d240ad811", "sha256": "3debbefdc0781d2c1c470de39b6144d347ed4948c6d3b6bdcd5bac84f8705dcb"}, "downloads": -1, "filename": "django-pagemore-0.2.0.tar.gz", "has_sig": false, "md5_digest": "12e80d27249e67da6dfbd15d240ad811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6253, "upload_time": "2017-03-13T17:47:59", "upload_time_iso_8601": "2017-03-13T17:47:59.720317Z", "url": "https://files.pythonhosted.org/packages/34/10/96f0121c0b520193c10646448d8e50c76a597e957ce58ee82fe3c0c11561/django-pagemore-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12e80d27249e67da6dfbd15d240ad811", "sha256": "3debbefdc0781d2c1c470de39b6144d347ed4948c6d3b6bdcd5bac84f8705dcb"}, "downloads": -1, "filename": "django-pagemore-0.2.0.tar.gz", "has_sig": false, "md5_digest": "12e80d27249e67da6dfbd15d240ad811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6253, "upload_time": "2017-03-13T17:47:59", "upload_time_iso_8601": "2017-03-13T17:47:59.720317Z", "url": "https://files.pythonhosted.org/packages/34/10/96f0121c0b520193c10646448d8e50c76a597e957ce58ee82fe3c0c11561/django-pagemore-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:18 2020"}