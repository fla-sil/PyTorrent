{"info": {"author": "Cloudbase Solutions Srl", "author_email": "acoman@cloudbasesolutions.com", "bugtrack_url": null, "classifiers": ["Environment :: OpenStack", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "# python-hnv\n\n[![Build Status](https://travis-ci.org/cloudbase/python-hnvclient.svg?branch=master)](https://travis-ci.org/cloudbase/python-hnvclient)\n\nPython client for the HNV (Hyper-V Network Virtualization) REST API.\n\n - License: Apache License, Version 2.0\n\n## Python API\n\nThe Python interface matches the underlying REST API and can be employed in 3rd party projects.\n\n```python\n>>> from hnv import client\n>>> logical_networks = client.LogicalNetworks.get()\n>>> for logical_network in logical_networks:\n...     print(logical_network.resource_id)\n...\n\"63606911-e053-42cf-842e-29f67c90d5c6\"\n\"c4cd42ff-5efb-4006-ac56-479730557926\"\n\"cd804db3-df59-4f57-8a7d-11cc3f3c4d98\"\n\n>>> logical_network = client.LogicalNetworks.get(resource_id=\"cd804db3-df59-4f57-8a7d-11cc3f3c4d98\")\n>>> logical_network\n<hnv.client.LogicalNetworks object at 0x7fcd79419910>\n>>> logical_network.provisioning_state\nu'Succeeded'\n>>> logical_network.subnetworks\n[<hnv.client.LogicalSubnetworks object at 0x7fcd79419150>]\n>>> logical_network.subnetworks[0].resource_id\nu'4390e3d8-c527-4534-882f-906c47ffd0bb'\n```\n\nor\n\n```python\nfrom __future__ import print_function\n\nimport json\nimport sys\n\nfrom hnv import config\nfrom hnv import client\n\n\ndef view_logical_networks():\n    \"\"\"List all the available logical networks.\"\"\"\n    logical_networks = client.LogicalNetworks.get()\n    print(\"Logical networks:\")\n    for logical_network in logical_networks:\n        print(\"\\t - \", logical_network.resource_ref)\n        print(\"\\t\\t\", \"Logical subnetworks:\")\n        for logical_subnetwork in logical_network.subnetworks:\n            print(\"\\t\\t - %s (%s)\" % (logical_subnetwork.resource_id,\n                                      logical_subnetwork.address_prefix))\n\n        print(\"\\t\\t\", \"Virtual networks:\")\n        for virtual_network in logical_network.virtual_networks:\n            print(\"\\t\\t - %s\" % virtual_network.resource_ref)\n\n\ndef create_virtual_network():\n    \"\"\"Create a new virtual network on the first logical network.\"\"\"\n    print(\"Creating a new virtual network.\")\n    address_space = client.AddressSpace(\n        address_prefixes=[\"192.168.133.0/24\"])\n\n    logical_network = client.Resource(\n        resource_ref=client.LogicalNetworks.get()[0].resource_ref)\n\n    virtual_network = client.VirtualNetworks(\n        resource_id=\"hvn-test\",\n        address_space=address_space,\n        logical_network=logical_network,\n    )\n    virtual_network.commit()\n\n    print(\"The raw content of the new Virtual Network\")\n    print(json.dumps(virtual_network.dump(), indent=4))\n\n\ndef remove_virtual_network():\n    \"\"\"Remove the new virtual network.\"\"\"\n    print(\"Remove the new virtual network\")\n    client.VirtualNetworks.remove(resource_id=\"hvn-test\")\n\n\ndef main():\n    \"\"\"Logical networks sample entry point.\"\"\"\n    config.CONFIG(sys.argv[1:])\n    view_logical_networks()\n    create_virtual_network()\n    view_logical_networks()\n    remove_virtual_network()\n    view_logical_networks()\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cloudbase/python-hnvclient", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "hnv", "package_url": "https://pypi.org/project/hnv/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hnv/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cloudbase/python-hnvclient"}, "release_url": "https://pypi.org/project/hnv/0.1.0.dev49/", "requires_dist": null, "requires_python": null, "summary": "Python client for the HNV (Hyper-V Network Virtualization) REST API.", "version": "0.1.0.dev49", "yanked": false, "html_description": "<div class=\"project-description\">\n            # python-hnv<br><br>[![Build Status](https://travis-ci.org/cloudbase/python-hnvclient.svg?branch=master)](https://travis-ci.org/cloudbase/python-hnvclient)<br><br>Python client for the HNV (Hyper-V Network Virtualization) REST API.<br><br> - License: Apache License, Version 2.0<br><br>## Python API<br><br>The Python interface matches the underlying REST API and can be employed in 3rd party projects.<br><br>```python<br>&gt;&gt;&gt; from hnv import client<br>&gt;&gt;&gt; logical_networks = client.LogicalNetworks.get()<br>&gt;&gt;&gt; for logical_network in logical_networks:<br>...     print(logical_network.resource_id)<br>...<br>\"63606911-e053-42cf-842e-29f67c90d5c6\"<br>\"c4cd42ff-5efb-4006-ac56-479730557926\"<br>\"cd804db3-df59-4f57-8a7d-11cc3f3c4d98\"<br><br>&gt;&gt;&gt; logical_network = client.LogicalNetworks.get(resource_id=\"cd804db3-df59-4f57-8a7d-11cc3f3c4d98\")<br>&gt;&gt;&gt; logical_network<br>&lt;hnv.client.LogicalNetworks object at 0x7fcd79419910&gt;<br>&gt;&gt;&gt; logical_network.provisioning_state<br>u'Succeeded'<br>&gt;&gt;&gt; logical_network.subnetworks<br>[&lt;hnv.client.LogicalSubnetworks object at 0x7fcd79419150&gt;]<br>&gt;&gt;&gt; logical_network.subnetworks[0].resource_id<br>u'4390e3d8-c527-4534-882f-906c47ffd0bb'<br>```<br><br>or<br><br>```python<br>from __future__ import print_function<br><br>import json<br>import sys<br><br>from hnv import config<br>from hnv import client<br><br><br>def view_logical_networks():<br>    \"\"\"List all the available logical networks.\"\"\"<br>    logical_networks = client.LogicalNetworks.get()<br>    print(\"Logical networks:\")<br>    for logical_network in logical_networks:<br>        print(\"\\t - \", logical_network.resource_ref)<br>        print(\"\\t\\t\", \"Logical subnetworks:\")<br>        for logical_subnetwork in logical_network.subnetworks:<br>            print(\"\\t\\t - %s (%s)\" % (logical_subnetwork.resource_id,<br>                                      logical_subnetwork.address_prefix))<br><br>        print(\"\\t\\t\", \"Virtual networks:\")<br>        for virtual_network in logical_network.virtual_networks:<br>            print(\"\\t\\t - %s\" % virtual_network.resource_ref)<br><br><br>def create_virtual_network():<br>    \"\"\"Create a new virtual network on the first logical network.\"\"\"<br>    print(\"Creating a new virtual network.\")<br>    address_space = client.AddressSpace(<br>        address_prefixes=[\"192.168.133.0/24\"])<br><br>    logical_network = client.Resource(<br>        resource_ref=client.LogicalNetworks.get()[0].resource_ref)<br><br>    virtual_network = client.VirtualNetworks(<br>        resource_id=\"hvn-test\",<br>        address_space=address_space,<br>        logical_network=logical_network,<br>    )<br>    virtual_network.commit()<br><br>    print(\"The raw content of the new Virtual Network\")<br>    print(json.dumps(virtual_network.dump(), indent=4))<br><br><br>def remove_virtual_network():<br>    \"\"\"Remove the new virtual network.\"\"\"<br>    print(\"Remove the new virtual network\")<br>    client.VirtualNetworks.remove(resource_id=\"hvn-test\")<br><br><br>def main():<br>    \"\"\"Logical networks sample entry point.\"\"\"<br>    config.CONFIG(sys.argv[1:])<br>    view_logical_networks()<br>    create_virtual_network()<br>    view_logical_networks()<br>    remove_virtual_network()<br>    view_logical_networks()<br>```\n          </div>"}, "last_serial": 2685501, "releases": {"0.1.0.dev49": []}, "urls": [], "timestamp": "Fri May  8 00:50:53 2020"}