{"info": {"author": "Chris Jerdonek", "author_email": "chris.jerdonek@gmail.com", "bugtrack_url": null, "classifiers": [], "description": ".. This file is auto-generated by setup.py for PyPI using pandoc, so this\n.. file should not be edited.  Edits should go in the source files.\n\nMolt\n====\n\n.. figure:: https://github.com/cjerdonek/molt/raw/master/images/molt.png\n   :align: center\n   :alt: molting snake\n\n`Molt <http://cjerdonek.github.com/molt/>`_ is a script to stub out\nprojects in any language instantly using\n`Mustache <http://mustache.github.com/>`_-based project templates.\n\nYou can use Molt to decrease the amount of boilerplate code you need to\nwrite when starting new projects: the README, copyright notices, license\ninfo, logging configuration, option parsing, test harness, packaging\ninformation, ``.gitignore``, directory hierarchy, etc.\n\nA minimal sample usage looks like--\n\n::\n\n    $ molt -c path_to_config.json path_to_template_dir/\n\nMolt follows the `Groome <http://cjerdonek.github.com/groome/>`_ rules\nfor Mustache-based project templates. See the\n`Groome <http://cjerdonek.github.com/groome/>`_ page for project\ntemplate syntax. This version of Molt follows `version\n0.1.0 <https://github.com/cjerdonek/groome/tree/v0.1.0>`_ of Groome.\n\nMolt is written in `Python <http://www.python.org/>`_ and can be found\non `GitHub <https://github.com/cjerdonek/molt>`_ and on\n`PyPI <http://pypi.python.org/pypi/molt>`_ (the Python Package Index).\n\nFeedback is welcome. You can also file bug reports and feature requests\non the GitHub `issues page <https://github.com/cjerdonek/molt/issues>`_.\n\nRequirements\n------------\n\nMolt supports the following Python versions:\n\n-  Python 2.7\n-  Python 3.2\n-  `PyPy <http://pypy.org/>`_\n\nPython 3.x support is coming soon. Since Molt is a development tool,\nthere are no plans to support Python 2.6 or earlier.\n\nMolt's dependencies are--\n\n-  `Pystache <https://github.com/defunkt/pystache>`_ version\n   `0.5.2 <http://pypi.python.org/pypi/pystache>`_ or above\n-  `PyYAML <http://pypi.python.org/pypi/PyYAML>`_ (optional, to support\n   YAML format for configuration files)\n\nThe installation process below installs these dependencies\nautomatically.\n\nYou can install to Python 2 with either\n`setuptools <http://pypi.python.org/pypi/setuptools>`_ or\n`Distribute <http://packages.python.org/distribute/>`_ (preferred). For\nPython 3, you must use Distribute.\n\nInstall It\n----------\n\n::\n\n    $ pip install molt\n\nTest it\n-------\n\n::\n\n    $ molt --run-tests\n\nTry it\n------\n\nStart with the\n`demo <https://github.com/cjerdonek/molt/tree/master/molt/demo>`_ Groome\ntemplate to play with:\n\n::\n\n    $ molt --create-demo --output demo\n    $ ls -p demo\n    expected/   lambdas/    partials/   sample.json structure/\n\nRender the template with the sample context provided:\n\n::\n\n    $ molt --output output --config demo/sample.json demo\n\nRun the newly-created project (which can also be seen\n`here <https://github.com/cjerdonek/molt/tree/master/molt/demo/expected>`_)):\n\n::\n\n    $ python output/hello.py world\n    Hello, world!\n\nFor help documentation and available options--\n\n::\n\n    $ molt -h\n\nNote the ``--visualize`` and ``--with-visualize`` options that let you\nquickly visualize entire directory contents.\n\n::\n\n    $ molt --visualize output\n\nIf using Python, you can also use Molt as a library (though the API is\nnot yet stable). See the ``Molter`` class in the\n`molt.molter <https://github.com/cjerdonek/molt/blob/master/molt/molter.py>`_\nmodule.\n\nContribute\n----------\n\nIf using GitHub, after forking--\n\n::\n\n    $ git clone git@github.com:yourusername/molt.git\n    $ cd molt\n    $ git remote add upstream git://github.com/cjerdonek/molt.git\n    $ git fetch upstream\n\nTo run unit tests--\n\n::\n\n    $ python test_molt.py\n\nTo test Molt with multiple versions of Python (with a single command!),\nyou can use `tox <http://tox.testrun.org/>`_:\n\n::\n\n    pip install tox\n    tox\n\nIf you don't have all Python versions listed in ``tox.ini``, you can\ndo--\n\n::\n\n    tox -e py27  # for example\n\nTo run from source any molt command of the form--\n\n::\n\n    $ molt [options] [DIRECTORY]\n\nsimply type--\n\n::\n\n    $ python -m molt.commands.molt [options] [DIRECTORY]\n\nTo include the `Groome\ntests <https://github.com/cjerdonek/groome/tree/master/tests>`_ in your\ntest runs, initialize and update the Groome project submodule--\n\n::\n\n    $ git submodule init\n    $ git submodule update\n\nTo run a subset of the tests, you can filter your test runs using one or\nmore prefixes. For example--\n\n::\n\n    $ python test_molt.py molt.test.common molt.test.dir\n\nMolt is also `set\nup <https://github.com/cjerdonek/molt/blob/master/.travis.yml>`_ on\nGitHub to work with `Travis CI <http://travis-ci.org/>`_.\n\nPython 3 Tips\n~~~~~~~~~~~~~\n\nMolt is written in Python 2, so the code must be converted to Python 3\nprior to using with Python 3. The installation process does this\nautomatically.\n\nTo convert the code to Python 3 manually, run the following using Python\n3 (with Distribute installed)--\n\n::\n\n    python setup.py build\n\nThis writes the converted code to a subdirectory of the project\ndirectory called ``build``.\n\nIt is possible (though not recommended) to convert the code without\nusing ``setup.py``. You can try this with\n`2to3 <http://docs.python.org/library/2to3.html>`_, as follows (two\nsteps):\n\n::\n\n    2to3 --write --nobackups --no-diffs --doctests_only molt\n    2to3 --write --nobackups --no-diffs molt\n\nThis converts the code (and doctests) in place.\n\nTo ``import molt`` from a source distribution while using Python 3, be\nsure that you are importing from a directory containing the converted\ncode (e.g. from the ``build`` directory after converting), and not from\nthe original (unconverted) source directory. Otherwise, you will get a\nsyntax error. You can help prevent this by not running the Python IDE\nfrom the project directory when importing Molt while using Python 3.\n\nAuthor\n------\n\nMolt is authored by `Chris Jerdonek <https://github.com/cjerdonek>`_.\nChris is also the author of\n`Groome <http://cjerdonek.github.com/groome/>`_ and is the current\n`Pystache <https://github.com/defunkt/pystache>`_ maintainer.\n\nCopyright\n---------\n\nCopyright (C) 2011-2012 Chris Jerdonek. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n-  Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n-  Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n-  The names of the copyright holders may not be used to endorse or\n   promote products derived from this software without specific prior\n   written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nHistory\n=======\n\n0.1.1 (2012-07-01)\n------------------\n\n-  Add Python 3 support.\n\n0.1.0 (2012-06-30)\n------------------\n\n-  Initial release (for Python 2.7 and PyPy).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://cjerdonek.github.com/molt/", "keywords": "project template mustache pystache groome", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "molt", "package_url": "https://pypi.org/project/molt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/molt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://cjerdonek.github.com/molt/"}, "release_url": "https://pypi.org/project/molt/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Mustache project templates using Python and Groome", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"molt\">\n<h2>Molt</h2>\n<div>\n<img alt=\"molting snake\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7640e51194ab53289c1d2d4220de2c7f46af6d8/68747470733a2f2f6769746875622e636f6d2f636a6572646f6e656b2f6d6f6c742f7261772f6d61737465722f696d616765732f6d6f6c742e706e67\">\n</div>\n<p><a href=\"http://cjerdonek.github.com/molt/\" rel=\"nofollow\">Molt</a> is a script to stub out\nprojects in any language instantly using\n<a href=\"http://mustache.github.com/\" rel=\"nofollow\">Mustache</a>-based project templates.</p>\n<p>You can use Molt to decrease the amount of boilerplate code you need to\nwrite when starting new projects: the README, copyright notices, license\ninfo, logging configuration, option parsing, test harness, packaging\ninformation, <tt>.gitignore</tt>, directory hierarchy, etc.</p>\n<p>A minimal sample usage looks like\u2013</p>\n<pre>$ molt -c path_to_config.json path_to_template_dir/\n</pre>\n<p>Molt follows the <a href=\"http://cjerdonek.github.com/groome/\" rel=\"nofollow\">Groome</a> rules\nfor Mustache-based project templates. See the\n<a href=\"http://cjerdonek.github.com/groome/\" rel=\"nofollow\">Groome</a> page for project\ntemplate syntax. This version of Molt follows <a href=\"https://github.com/cjerdonek/groome/tree/v0.1.0\" rel=\"nofollow\">version\n0.1.0</a> of Groome.</p>\n<p>Molt is written in <a href=\"http://www.python.org/\" rel=\"nofollow\">Python</a> and can be found\non <a href=\"https://github.com/cjerdonek/molt\" rel=\"nofollow\">GitHub</a> and on\n<a href=\"http://pypi.python.org/pypi/molt\" rel=\"nofollow\">PyPI</a> (the Python Package Index).</p>\n<p>Feedback is welcome. You can also file bug reports and feature requests\non the GitHub <a href=\"https://github.com/cjerdonek/molt/issues\" rel=\"nofollow\">issues page</a>.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Molt supports the following Python versions:</p>\n<ul>\n<li>Python 2.7</li>\n<li>Python 3.2</li>\n<li><a href=\"http://pypy.org/\" rel=\"nofollow\">PyPy</a></li>\n</ul>\n<p>Python 3.x support is coming soon. Since Molt is a development tool,\nthere are no plans to support Python 2.6 or earlier.</p>\n<p>Molt\u2019s dependencies are\u2013</p>\n<ul>\n<li><a href=\"https://github.com/defunkt/pystache\" rel=\"nofollow\">Pystache</a> version\n<a href=\"http://pypi.python.org/pypi/pystache\" rel=\"nofollow\">0.5.2</a> or above</li>\n<li><a href=\"http://pypi.python.org/pypi/PyYAML\" rel=\"nofollow\">PyYAML</a> (optional, to support\nYAML format for configuration files)</li>\n</ul>\n<p>The installation process below installs these dependencies\nautomatically.</p>\n<p>You can install to Python 2 with either\n<a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">setuptools</a> or\n<a href=\"http://packages.python.org/distribute/\" rel=\"nofollow\">Distribute</a> (preferred). For\nPython 3, you must use Distribute.</p>\n</div>\n<div id=\"install-it\">\n<h3>Install It</h3>\n<pre>$ pip install molt\n</pre>\n</div>\n<div id=\"test-it\">\n<h3>Test it</h3>\n<pre>$ molt --run-tests\n</pre>\n</div>\n<div id=\"try-it\">\n<h3>Try it</h3>\n<p>Start with the\n<a href=\"https://github.com/cjerdonek/molt/tree/master/molt/demo\" rel=\"nofollow\">demo</a> Groome\ntemplate to play with:</p>\n<pre>$ molt --create-demo --output demo\n$ ls -p demo\nexpected/   lambdas/    partials/   sample.json structure/\n</pre>\n<p>Render the template with the sample context provided:</p>\n<pre>$ molt --output output --config demo/sample.json demo\n</pre>\n<p>Run the newly-created project (which can also be seen\n<a href=\"https://github.com/cjerdonek/molt/tree/master/molt/demo/expected\" rel=\"nofollow\">here</a>)):</p>\n<pre>$ python output/hello.py world\nHello, world!\n</pre>\n<p>For help documentation and available options\u2013</p>\n<pre>$ molt -h\n</pre>\n<p>Note the <tt><span class=\"pre\">--visualize</span></tt> and <tt><span class=\"pre\">--with-visualize</span></tt> options that let you\nquickly visualize entire directory contents.</p>\n<pre>$ molt --visualize output\n</pre>\n<p>If using Python, you can also use Molt as a library (though the API is\nnot yet stable). See the <tt>Molter</tt> class in the\n<a href=\"https://github.com/cjerdonek/molt/blob/master/molt/molter.py\" rel=\"nofollow\">molt.molter</a>\nmodule.</p>\n</div>\n<div id=\"contribute\">\n<h3>Contribute</h3>\n<p>If using GitHub, after forking\u2013</p>\n<pre>$ git clone git@github.com:yourusername/molt.git\n$ cd molt\n$ git remote add upstream git://github.com/cjerdonek/molt.git\n$ git fetch upstream\n</pre>\n<p>To run unit tests\u2013</p>\n<pre>$ python test_molt.py\n</pre>\n<p>To test Molt with multiple versions of Python (with a single command!),\nyou can use <a href=\"http://tox.testrun.org/\" rel=\"nofollow\">tox</a>:</p>\n<pre>pip install tox\ntox\n</pre>\n<p>If you don\u2019t have all Python versions listed in <tt>tox.ini</tt>, you can\ndo\u2013</p>\n<pre>tox -e py27  # for example\n</pre>\n<p>To run from source any molt command of the form\u2013</p>\n<pre>$ molt [options] [DIRECTORY]\n</pre>\n<p>simply type\u2013</p>\n<pre>$ python -m molt.commands.molt [options] [DIRECTORY]\n</pre>\n<p>To include the <a href=\"https://github.com/cjerdonek/groome/tree/master/tests\" rel=\"nofollow\">Groome\ntests</a> in your\ntest runs, initialize and update the Groome project submodule\u2013</p>\n<pre>$ git submodule init\n$ git submodule update\n</pre>\n<p>To run a subset of the tests, you can filter your test runs using one or\nmore prefixes. For example\u2013</p>\n<pre>$ python test_molt.py molt.test.common molt.test.dir\n</pre>\n<p>Molt is also <a href=\"https://github.com/cjerdonek/molt/blob/master/.travis.yml\" rel=\"nofollow\">set\nup</a> on\nGitHub to work with <a href=\"http://travis-ci.org/\" rel=\"nofollow\">Travis CI</a>.</p>\n<div id=\"python-3-tips\">\n<h4>Python 3 Tips</h4>\n<p>Molt is written in Python 2, so the code must be converted to Python 3\nprior to using with Python 3. The installation process does this\nautomatically.</p>\n<p>To convert the code to Python 3 manually, run the following using Python\n3 (with Distribute installed)\u2013</p>\n<pre>python setup.py build\n</pre>\n<p>This writes the converted code to a subdirectory of the project\ndirectory called <tt>build</tt>.</p>\n<p>It is possible (though not recommended) to convert the code without\nusing <tt>setup.py</tt>. You can try this with\n<a href=\"http://docs.python.org/library/2to3.html\" rel=\"nofollow\">2to3</a>, as follows (two\nsteps):</p>\n<pre>2to3 --write --nobackups --no-diffs --doctests_only molt\n2to3 --write --nobackups --no-diffs molt\n</pre>\n<p>This converts the code (and doctests) in place.</p>\n<p>To <tt>import molt</tt> from a source distribution while using Python 3, be\nsure that you are importing from a directory containing the converted\ncode (e.g. from the <tt>build</tt> directory after converting), and not from\nthe original (unconverted) source directory. Otherwise, you will get a\nsyntax error. You can help prevent this by not running the Python IDE\nfrom the project directory when importing Molt while using Python 3.</p>\n</div>\n</div>\n<div id=\"author\">\n<h3>Author</h3>\n<p>Molt is authored by <a href=\"https://github.com/cjerdonek\" rel=\"nofollow\">Chris Jerdonek</a>.\nChris is also the author of\n<a href=\"http://cjerdonek.github.com/groome/\" rel=\"nofollow\">Groome</a> and is the current\n<a href=\"https://github.com/defunkt/pystache\" rel=\"nofollow\">Pystache</a> maintainer.</p>\n</div>\n<div id=\"copyright\">\n<h3>Copyright</h3>\n<p>Copyright (C) 2011-2012 Chris Jerdonek. All rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<ul>\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</li>\n<li>The names of the copyright holders may not be used to endorse or\npromote products derived from this software without specific prior\nwritten permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u201cAS\nIS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id6\">\n<h3>0.1.1 (2012-07-01)</h3>\n<ul>\n<li>Add Python 3 support.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.0 (2012-06-30)</h3>\n<ul>\n<li>Initial release (for Python 2.7 and PyPy).</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 794919, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d52e0e12bbff6d2841c70999217ac748", "sha256": "60403c7ba3fbb97af50d0c52a947e6a88e1115b4677ff1903fd2d8e99cafb3a7"}, "downloads": -1, "filename": "molt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d52e0e12bbff6d2841c70999217ac748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66446, "upload_time": "2012-07-01T02:14:56", "upload_time_iso_8601": "2012-07-01T02:14:56.743577Z", "url": "https://files.pythonhosted.org/packages/2a/c7/81b21ff0764adb1fc2f908c77d5f514c4d01d7427ce5d395dc12bcc8a7ab/molt-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "87d4d42810a9f3b16ef49d9e4f2b3930", "sha256": "965fceb17e3d9002ceab44bb284ea6696db574db74ad8734b7cc79e53237cf44"}, "downloads": -1, "filename": "molt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "87d4d42810a9f3b16ef49d9e4f2b3930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68696, "upload_time": "2012-07-01T18:46:22", "upload_time_iso_8601": "2012-07-01T18:46:22.617496Z", "url": "https://files.pythonhosted.org/packages/c1/97/0dc7c105151e93d490156f0351d499d955f0e18c53b5c627ad84d785e817/molt-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87d4d42810a9f3b16ef49d9e4f2b3930", "sha256": "965fceb17e3d9002ceab44bb284ea6696db574db74ad8734b7cc79e53237cf44"}, "downloads": -1, "filename": "molt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "87d4d42810a9f3b16ef49d9e4f2b3930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68696, "upload_time": "2012-07-01T18:46:22", "upload_time_iso_8601": "2012-07-01T18:46:22.617496Z", "url": "https://files.pythonhosted.org/packages/c1/97/0dc7c105151e93d490156f0351d499d955f0e18c53b5c627ad84d785e817/molt-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:30 2020"}