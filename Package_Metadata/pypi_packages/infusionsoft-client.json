{"info": {"author": "Zach \"theY4Kman\" Kanzler", "author_email": "they4kman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries"], "description": "infusionsoft-client\n===================\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :target: https://github.com/theY4Kman/infusionsoft-client/blob/master/LICENSE\n    \n.. image:: https://badges.gitter.im/they4kman/infusionsoft-client.png\n    :target: https://gitter.im/infusionsoft-client/Lobby\n    \n.. image:: https://badge.fury.io/py/infusionsoft-client.svg\n    :target: https://badge.fury.io/py/infusionsoft-client\n\nA simple-to-use `Infusionsoft XML-RPC API <https://developer.infusionsoft.com/docs/xml-rpc/>`_ client, with included stubs for code sense. Python 3.5+ only (but pull requests welcome :smirk:).\n\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install infusionsoft-client\n\n\n\nQuickstart\n----------\n\nFirst, initialize the client with your app name and API key:\n\n.. code-block:: python\n\n    import infusionsoft\n    infusionsoft.initialize('myapp', '098f6bcd4621d373cade4e832627b4f6')\n\n\nAnd use the ``infusionsoft`` like a regular `xmlrpc.client.ServerProxy <https://docs.python.org/3/library/xmlrpc.client.html>`_:\n\n.. code-block:: python\n\n    import infusionsoft\n    contact_id = infusionsoft.ContactService.add({'FirstName': 'Johnny'})\n\n\n\nSetting XML-RPC Client Options\n------------------------------\n\nAny extra kwargs passed to ``initialize()`` will be passed along to ``xmlrpc.client.ServerProxy``.\n\n.. code-block:: python\n\n    import infusionsoft\n    infusionsoft.initialize('myapp', '098f6bcd4621d373cade4e832627b4f6', use_builtin_types=True)\n\nSome kwargs of interest are:\n\n- ``use_builtin_types``: whether to utilize native Python types, rather than wrappers such as ``xmlrpc.client.DateTime`` or ``xmlrpc.client.Binary``. **I recommend turning this on**. It will be turned on by default in the next major/breaking release.\n- ``verbose``: set to ``True`` to print out the request and response bodies for each RPC call.\n- ``allow_none``: whether to allow ``None`` to be sent over the wire. Infusionsoft, in general, doesn't allow ``None`` (which is ``nil`` in XML-RPC parlance). If a field in a response is null, Infusionsoft will simply not send it.\n- ``retries``: number of times to retry failed requests. Requests are retried on connection/socket errors, and \"InvalidConfig\" faults (if you've never seen them, I envy you). Any other type of fault will still raise an exception.\n\nSee `the docs <https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy>`_ for more info.\n\n\n\nUsage with Django\n-----------------\n\n``infusionsoft-client`` includes a Django integration out of the box. Just add it to your ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'infusionsoft.contrib.django',\n    )\n\nAnd add your app name and API key to your settings:\n\n.. code-block:: python\n\n    INFUSIONSOFT_APP_NAME = 'myapp'\n    INFUSIONSOFT_API_KEY = '098f6bcd4621d373cade4e832627b4f6'\n\n\nPass extra configuration to the XML-RPC client with ``INFUSIONSOFT_CLIENT_OPTIONS``:\n\n.. code-block:: python\n\n    INFUSIONSOFT_CLIENT_OPTIONS = {\n        'use_builtin_types': True,\n    }\n\n\n\nGetting All Rows of a Query\n---------------------------\n\nSome API calls are paginated, and require multiple calls to retrieve all results. This can be a pain, and you may find yourself writing the same code over and over. To this end, ``infusionsoft-client`` provides a ``consume()`` generator function, which will consume all pages of any query function.\n\nTo use it, create a lambda (or regular) function taking ``page`` and ``limit`` as arguments which performs your paginated API call, and pass it to ``consume()``:\n\n.. code-block:: python\n\n    import infusionsoft\n    from infusionsoft.query import consume\n\n    query_fn = lambda page, limit: (\n        infusionsoft.DataService.query('mytable', limit, page, ['Id']))\n\n    # Use with a for-loop, to avoid storing all rows in memory:\n    for row in consume(query_fn):\n        do_stuff(row)\n\n    # Or retrieve all rows at once\n    all_rows = list(consume(query_fn))\n\n\nGenerate Code Stubs\n-------------------\n\nShipped with ``infusionsoft-client`` is code to download the official Infusionsoft XML-RPC docs, parse them with `BeautifulSoup <https://www.crummy.com/software/BeautifulSoup/bs4/doc/>`_, and generate Python 3.5-compatible stubs for all methods.\n\nTo generate these yourself, first install the extra requirements:\n\n.. code-block:: bash\n\n    pip install -r stub-requirements.txt\n\nThen run the ``generate_stubs()`` function, which will return a string:\n\n.. code-block:: python\n\n    from infusionsoft.gen_stubs import generate_stubs\n    source = generate_stubs()", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/theY4Kman/infusionsoft-client", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "infusionsoft-client", "package_url": "https://pypi.org/project/infusionsoft-client/", "platform": "", "project_url": "https://pypi.org/project/infusionsoft-client/", "project_urls": {"Homepage": "https://github.com/theY4Kman/infusionsoft-client"}, "release_url": "https://pypi.org/project/infusionsoft-client/1.5.1/", "requires_dist": null, "requires_python": "", "summary": "Sexy Infusionsoft XML-RPC API client", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/theY4Kman/infusionsoft-client/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://gitter.im/infusionsoft-client/Lobby\" rel=\"nofollow\"><img alt=\"https://badges.gitter.im/they4kman/infusionsoft-client.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1265abda88a840785dff41217c2c04763c17b4aa/68747470733a2f2f6261646765732e6769747465722e696d2f74686579346b6d616e2f696e667573696f6e736f66742d636c69656e742e706e67\"></a>\n<a href=\"https://badge.fury.io/py/infusionsoft-client\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/infusionsoft-client.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18766dad47d0400340c58010591ce6882b450362/68747470733a2f2f62616467652e667572792e696f2f70792f696e667573696f6e736f66742d636c69656e742e737667\"></a>\n<p>A simple-to-use <a href=\"https://developer.infusionsoft.com/docs/xml-rpc/\" rel=\"nofollow\">Infusionsoft XML-RPC API</a> client, with included stubs for code sense. Python 3.5+ only (but pull requests welcome :smirk:).</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install infusionsoft-client\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>First, initialize the client with your app name and API key:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">infusionsoft</span>\n<span class=\"n\">infusionsoft</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"s1\">'myapp'</span><span class=\"p\">,</span> <span class=\"s1\">'098f6bcd4621d373cade4e832627b4f6'</span><span class=\"p\">)</span>\n</pre>\n<p>And use the <tt>infusionsoft</tt> like a regular <a href=\"https://docs.python.org/3/library/xmlrpc.client.html\" rel=\"nofollow\">xmlrpc.client.ServerProxy</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">infusionsoft</span>\n<span class=\"n\">contact_id</span> <span class=\"o\">=</span> <span class=\"n\">infusionsoft</span><span class=\"o\">.</span><span class=\"n\">ContactService</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">({</span><span class=\"s1\">'FirstName'</span><span class=\"p\">:</span> <span class=\"s1\">'Johnny'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"setting-xml-rpc-client-options\">\n<h2>Setting XML-RPC Client Options</h2>\n<p>Any extra kwargs passed to <tt>initialize()</tt> will be passed along to <tt>xmlrpc.client.ServerProxy</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">infusionsoft</span>\n<span class=\"n\">infusionsoft</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"s1\">'myapp'</span><span class=\"p\">,</span> <span class=\"s1\">'098f6bcd4621d373cade4e832627b4f6'</span><span class=\"p\">,</span> <span class=\"n\">use_builtin_types</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Some kwargs of interest are:</p>\n<ul>\n<li><tt>use_builtin_types</tt>: whether to utilize native Python types, rather than wrappers such as <tt>xmlrpc.client.DateTime</tt> or <tt>xmlrpc.client.Binary</tt>. <strong>I recommend turning this on</strong>. It will be turned on by default in the next major/breaking release.</li>\n<li><tt>verbose</tt>: set to <tt>True</tt> to print out the request and response bodies for each RPC call.</li>\n<li><tt>allow_none</tt>: whether to allow <tt>None</tt> to be sent over the wire. Infusionsoft, in general, doesn\u2019t allow <tt>None</tt> (which is <tt>nil</tt> in XML-RPC parlance). If a field in a response is null, Infusionsoft will simply not send it.</li>\n<li><tt>retries</tt>: number of times to retry failed requests. Requests are retried on connection/socket errors, and \u201cInvalidConfig\u201d faults (if you\u2019ve never seen them, I envy you). Any other type of fault will still raise an exception.</li>\n</ul>\n<p>See <a href=\"https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy\" rel=\"nofollow\">the docs</a> for more info.</p>\n</div>\n<div id=\"usage-with-django\">\n<h2>Usage with Django</h2>\n<p><tt><span class=\"pre\">infusionsoft-client</span></tt> includes a Django integration out of the box. Just add it to your <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'infusionsoft.contrib.django'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And add your app name and API key to your settings:</p>\n<pre><span class=\"n\">INFUSIONSOFT_APP_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'myapp'</span>\n<span class=\"n\">INFUSIONSOFT_API_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'098f6bcd4621d373cade4e832627b4f6'</span>\n</pre>\n<p>Pass extra configuration to the XML-RPC client with <tt>INFUSIONSOFT_CLIENT_OPTIONS</tt>:</p>\n<pre><span class=\"n\">INFUSIONSOFT_CLIENT_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use_builtin_types'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"getting-all-rows-of-a-query\">\n<h2>Getting All Rows of a Query</h2>\n<p>Some API calls are paginated, and require multiple calls to retrieve all results. This can be a pain, and you may find yourself writing the same code over and over. To this end, <tt><span class=\"pre\">infusionsoft-client</span></tt> provides a <tt>consume()</tt> generator function, which will consume all pages of any query function.</p>\n<p>To use it, create a lambda (or regular) function taking <tt>page</tt> and <tt>limit</tt> as arguments which performs your paginated API call, and pass it to <tt>consume()</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">infusionsoft</span>\n<span class=\"kn\">from</span> <span class=\"nn\">infusionsoft.query</span> <span class=\"kn\">import</span> <span class=\"n\">consume</span>\n\n<span class=\"n\">query_fn</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">page</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n    <span class=\"n\">infusionsoft</span><span class=\"o\">.</span><span class=\"n\">DataService</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'mytable'</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Id'</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># Use with a for-loop, to avoid storing all rows in memory:</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">query_fn</span><span class=\"p\">):</span>\n    <span class=\"n\">do_stuff</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or retrieve all rows at once</span>\n<span class=\"n\">all_rows</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">query_fn</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"generate-code-stubs\">\n<h2>Generate Code Stubs</h2>\n<p>Shipped with <tt><span class=\"pre\">infusionsoft-client</span></tt> is code to download the official Infusionsoft XML-RPC docs, parse them with <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\" rel=\"nofollow\">BeautifulSoup</a>, and generate Python 3.5-compatible stubs for all methods.</p>\n<p>To generate these yourself, first install the extra requirements:</p>\n<pre>pip install -r stub-requirements.txt\n</pre>\n<p>Then run the <tt>generate_stubs()</tt> function, which will return a string:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">infusionsoft.gen_stubs</span> <span class=\"kn\">import</span> <span class=\"n\">generate_stubs</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">generate_stubs</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3121062, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "acce9f02ae12489736e05e923cfdedae", "sha256": "4b7de20ffa97fd7da9a1ec376b0e2002a4e9dcdacfe63a43dedd6c2aff4c62c6"}, "downloads": -1, "filename": "infusionsoft-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "acce9f02ae12489736e05e923cfdedae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11261, "upload_time": "2017-04-10T21:34:48", "upload_time_iso_8601": "2017-04-10T21:34:48.145946Z", "url": "https://files.pythonhosted.org/packages/41/fb/c869ac5b32019fbde48452c55c3e010a5e54e6c3cffe036fa151041c9e33/infusionsoft-client-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ab82acd96ed208e0693c8a2ef66c14b8", "sha256": "c46d87927f5e2165c73a1521ab6fb8e306928dbd3376d31609c6b359a17088cb"}, "downloads": -1, "filename": "infusionsoft-client-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ab82acd96ed208e0693c8a2ef66c14b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13610, "upload_time": "2017-04-11T15:54:33", "upload_time_iso_8601": "2017-04-11T15:54:33.817472Z", "url": "https://files.pythonhosted.org/packages/98/a2/74a4b587b38fe0ff352357b7810007ca3b5e6e838108384bb26cae650af1/infusionsoft-client-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "810ed2e33c23798a0f302439d2775d26", "sha256": "7fe3fc75240558055b53be84c3b443de0c8079e2f0f35528731dbf2c099faf8d"}, "downloads": -1, "filename": "infusionsoft-client-1.2.0.tar.gz", "has_sig": false, "md5_digest": "810ed2e33c23798a0f302439d2775d26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15595, "upload_time": "2017-04-11T18:01:45", "upload_time_iso_8601": "2017-04-11T18:01:45.376470Z", "url": "https://files.pythonhosted.org/packages/58/63/8ebf8546e88972b1750122347dabc259946514f33fc23b00f90bd664c8bb/infusionsoft-client-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "64b90c3b44374538757f5e1c88af6b55", "sha256": "993a28e51b34ab38cba8ee625aeeb8ca41548b01d82c824e8b4b39a3c296bab5"}, "downloads": -1, "filename": "infusionsoft-client-1.3.0.tar.gz", "has_sig": false, "md5_digest": "64b90c3b44374538757f5e1c88af6b55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15735, "upload_time": "2017-04-11T18:49:10", "upload_time_iso_8601": "2017-04-11T18:49:10.862854Z", "url": "https://files.pythonhosted.org/packages/3c/06/15e286b77b341056ee603227975505ca4e257cd69710b5581fc85d236557/infusionsoft-client-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "5194aca906bcd9ea0d9ed5260a04ba9b", "sha256": "f4d95b610de072e46411afac79a9682e492eebd9d007362cdfed41490a63f778"}, "downloads": -1, "filename": "infusionsoft-client-1.3.1.tar.gz", "has_sig": false, "md5_digest": "5194aca906bcd9ea0d9ed5260a04ba9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16328, "upload_time": "2017-07-26T14:56:09", "upload_time_iso_8601": "2017-07-26T14:56:09.758135Z", "url": "https://files.pythonhosted.org/packages/18/10/3fae45147cc214a98588301e736f56dd931a41c7d34af5609f1079be4258/infusionsoft-client-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "9916cd616dc3451a6f39ef3ae25a699e", "sha256": "ac76fc0fd700f0577cbf45c66a86c81e1cddd5850f142f7a9da269499c2fba9f"}, "downloads": -1, "filename": "infusionsoft-client-1.4.0.tar.gz", "has_sig": false, "md5_digest": "9916cd616dc3451a6f39ef3ae25a699e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17531, "upload_time": "2017-08-16T18:32:24", "upload_time_iso_8601": "2017-08-16T18:32:24.918776Z", "url": "https://files.pythonhosted.org/packages/60/18/bc505f3005db5f544ce66dcc7cb1400aa54f71fbef7a31fd4b863d199514/infusionsoft-client-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "0f5f66f1378b2941b8219a1257dbf62f", "sha256": "037bcfe695ea503262337138cad093c02e9cb1eb3d3c2f9f62c1bfd9cb464be1"}, "downloads": -1, "filename": "infusionsoft-client-1.5.0.tar.gz", "has_sig": false, "md5_digest": "0f5f66f1378b2941b8219a1257dbf62f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18506, "upload_time": "2017-08-17T15:24:44", "upload_time_iso_8601": "2017-08-17T15:24:44.295117Z", "url": "https://files.pythonhosted.org/packages/21/8e/57f8f62ba76d8622f8965ca244b40b7e3f6b3b6cf0ab8f802e8b30b624d8/infusionsoft-client-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "7568b2c7c987631dae50409e687ce4ec", "sha256": "9e6e3ae7c350476edef59319b4cf314bab73db89d84cc216ecc887417deaf01e"}, "downloads": -1, "filename": "infusionsoft-client-1.5.1.tar.gz", "has_sig": false, "md5_digest": "7568b2c7c987631dae50409e687ce4ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18815, "upload_time": "2017-08-24T17:16:47", "upload_time_iso_8601": "2017-08-24T17:16:47.962906Z", "url": "https://files.pythonhosted.org/packages/cc/de/5f47d703636dd8766c89de7292882ed9fe2fbfcfd53f6263b9e1ecba0fbd/infusionsoft-client-1.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7568b2c7c987631dae50409e687ce4ec", "sha256": "9e6e3ae7c350476edef59319b4cf314bab73db89d84cc216ecc887417deaf01e"}, "downloads": -1, "filename": "infusionsoft-client-1.5.1.tar.gz", "has_sig": false, "md5_digest": "7568b2c7c987631dae50409e687ce4ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18815, "upload_time": "2017-08-24T17:16:47", "upload_time_iso_8601": "2017-08-24T17:16:47.962906Z", "url": "https://files.pythonhosted.org/packages/cc/de/5f47d703636dd8766c89de7292882ed9fe2fbfcfd53f6263b9e1ecba0fbd/infusionsoft-client-1.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:00 2020"}