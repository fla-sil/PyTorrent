{"info": {"author": "Fabrice Sinc\u00e8re", "author_email": "fabrice.sincere@wanadoo.fr", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: Implementation :: MicroPython"], "description": "## MicroPython DS1631 module\n\nThis MicroPython module provides an i2c driver for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 high-precision digital thermometer and thermostat.\n\n### Datasheets\n\n- [DS1631-DS1731](https://datasheets.maximintegrated.com/en/ds/DS1631-DS1731.pdf)\n- [DS1621](https://datasheets.maximintegrated.com/en/ds/DS1621.pdf)\n- [DS1721](https://datasheets.maximintegrated.com/en/ds/DS1721.pdf)\n\n### 2-wire serial data bus\n\nDS1631s (8 devices max) are connected to your MicroPython board with 4 wires :\n\n- SDA i2c bus (+ about 4.7 k\u03a9 pull-up resistor)\n- SCL i2c bus (+ about 4.7 k\u03a9 pull-up resistor)\n- Power (3.3 V)\n- Ground\n\nNote : successfully tested with ESP8266 NodeMCU, ESP32 WROOM-32D, STM32L476 Nucleo-64, STM32WB55 Nucleo board.\n\n### Installation\n\n```python\n>>> import upip\n>>> upip.install('micropython-ds1631')\n```\nor download the ```micropython-ds1631.tar.gz``` archive, uncompress the ```DS1631.py``` module, and copy it in your flash memory target.  \n\n### Basic usage\n\n```python\nfrom machine import Pin, I2C\nimport time\nimport DS1631\n\n# i2c bus pins\ni2c = I2C(scl=Pin(4), sda=Pin(5))\n# i2c bus scan\n[print(hex(i)) for i in i2c.scan()]\n\ni2c_address = 0x48\nic1 = DS1631.DS1631(i2c, i2c_address)\n# thermostat config\nic1.set_tout_polarity(\"active-low\")\nic1.set_thigh(24.5)\nic1.set_tlow(22.5)\n# thermometer config\nic1.set_conversion_mode(\"continuous\")\nic1.set_resolution(12)\nic1.start_convert()\n# read temperature\nwhile True:\n    time.sleep_ms(750)\n    temperature = ic1.get_temperature()\n    print(\"Temperature  : {} \u00b0C\".format(temperature))\n```\n\n### API reference\n\n- get_config_register()\n    \n    Read and return the configuration register\n\n- get_conversion_mode()\n\n    Read and return the conversion mode (\"continuous\" or \"one-shot\")\n\n- get_resolution()\n\n    Read resolution and return the tuple temperature resolution (bits), temperature resolution (\u00b0C), conversion time (ms)\n\n- get_temperature()\n\n    Read and return the last converted temperature value (\u00b0C) from the temperature register.\n\n    Note : temperature value stored in SRAM (power-up state -60 \u00b0C)\n\n- get_thigh()\n\n    Read and return the Th thermostat register (\u00b0C)\n\n- get_tlow()\n\n    Read and return the Tl thermostat register (\u00b0C)\n\n- get_tout_polarity()\n\n    Read and return the Tout polarity (\"active-low\" or \"active-high\")\n\n- is_eeprom_busy()\n\n    EEPROM status.  \n    return True if a write to memory is in progress.  \n    return False if memory is not busy.\n\n    Note : write cycle time : 10 ms max, 4 ms typ.\n\n- is_temperature_conversion_in_progress()\n\n    Temperature conversion status.  \n    return True if a temperature conversion is in progress.  \n    return False if the temperature conversion is complete.  \n\n- is_thigh_flag_on()\n\n    Th thermostat status.  \n    return False if the measured temperature has not exceeded the value stored in the Th register since power-up ; otherwise return True\n\n- is_tlow_flag_on()\n\n    Tl thermostat status.  \n    return False if the measured temperature has not been lower than the value stored in the Tl register since power-up ; otherwise return True.  \n\n- print_configuration()\n\n    Read and print configuration and status information\n\n- reset_thigh_flag()\n\n    Th thermostat status.  \n    Thigh flag is overwritten with a 0  \n\n- reset_tlow_flag()\n\n    Tl thermostat status.  \n    Tlow flag is overwritten with a 0  \n\n- set_config_register(config_register)\n\n    Write to the configuration register  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_conversion_mode(mode)\n\n    Set the conversion mode.    \n    mode = \"one-shot\" or \"continuous\".    \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_resolution(resolution)\n\n    Set the temperature resolution.   \n    resolution is 9, 10, 11 or 12 bits.   \n\n    Stored in SRAM (power-up state 12 bits)  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_thigh(temperature)\n\n    Set the upper thermostat trip point.  \n    temperature range : -55\u00b0C to +125\u00b0C.  \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when making changes to the Th and Tl registers, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_tlow(temperature)\n\n    Set the lower thermostat trip point.  \n    temperature range : -55\u00b0C to +125\u00b0C.  \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when making changes to the Th and Tl registers, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_tout_polarity(polarity)\n\n    Set the Tout polarity.  \n    polarity = \"active-low\" or \"active-high\".  \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- software_por()\n\n    Initiates a software power-on-reset (POR), which stops temperature conversions and resets all registers and logic to their power-up states.\n\n    Power-up state :\n\n    temperature register : -60 \u00b0C  \n    resolution  : 12 bits  \n    temperature high flag : 0 (off)  \n    temperature low flag : 0 (off)  \n\n- start_convert()\n\n    Initiates temperature conversions.  \n    If the part is in one-shot mode, only one conversion is performed.  \n    In continuous mode, continuous temperature conversions are performed until a Stop Convert command is issued.\n\n- stop_convert()\n\n    Stops temperature conversions when the device is in continuous conversion mode.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "Fabrice Sinc\u00e8re", "maintainer_email": "fabrice.sincere@wanadoo.fr", "name": "micropython-ds1631", "package_url": "https://pypi.org/project/micropython-ds1631/", "platform": "", "project_url": "https://pypi.org/project/micropython-ds1631/", "project_urls": null, "release_url": "https://pypi.org/project/micropython-ds1631/0.4.5/", "requires_dist": null, "requires_python": "", "summary": "MicroPython i2c driver for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 digital thermometer and thermostat.", "version": "0.4.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>MicroPython DS1631 module</h2>\n<p>This MicroPython module provides an i2c driver for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 high-precision digital thermometer and thermostat.</p>\n<h3>Datasheets</h3>\n<ul>\n<li><a href=\"https://datasheets.maximintegrated.com/en/ds/DS1631-DS1731.pdf\" rel=\"nofollow\">DS1631-DS1731</a></li>\n<li><a href=\"https://datasheets.maximintegrated.com/en/ds/DS1621.pdf\" rel=\"nofollow\">DS1621</a></li>\n<li><a href=\"https://datasheets.maximintegrated.com/en/ds/DS1721.pdf\" rel=\"nofollow\">DS1721</a></li>\n</ul>\n<h3>2-wire serial data bus</h3>\n<p>DS1631s (8 devices max) are connected to your MicroPython board with 4 wires :</p>\n<ul>\n<li>SDA i2c bus (+ about 4.7 k\u03a9 pull-up resistor)</li>\n<li>SCL i2c bus (+ about 4.7 k\u03a9 pull-up resistor)</li>\n<li>Power (3.3 V)</li>\n<li>Ground</li>\n</ul>\n<p>Note : successfully tested with ESP8266 NodeMCU, ESP32 WROOM-32D, STM32L476 Nucleo-64, STM32WB55 Nucleo board.</p>\n<h3>Installation</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">upip</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">upip</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"s1\">'micropython-ds1631'</span><span class=\"p\">)</span>\n</pre>\n<p>or download the <code>micropython-ds1631.tar.gz</code> archive, uncompress the <code>DS1631.py</code> module, and copy it in your flash memory target.</p>\n<h3>Basic usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">machine</span> <span class=\"kn\">import</span> <span class=\"n\">Pin</span><span class=\"p\">,</span> <span class=\"n\">I2C</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">DS1631</span>\n\n<span class=\"c1\"># i2c bus pins</span>\n<span class=\"n\">i2c</span> <span class=\"o\">=</span> <span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">scl</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">sda</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"c1\"># i2c bus scan</span>\n<span class=\"p\">[</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">i2c</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">()]</span>\n\n<span class=\"n\">i2c_address</span> <span class=\"o\">=</span> <span class=\"mh\">0x48</span>\n<span class=\"n\">ic1</span> <span class=\"o\">=</span> <span class=\"n\">DS1631</span><span class=\"o\">.</span><span class=\"n\">DS1631</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"n\">i2c_address</span><span class=\"p\">)</span>\n<span class=\"c1\"># thermostat config</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_tout_polarity</span><span class=\"p\">(</span><span class=\"s2\">\"active-low\"</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_thigh</span><span class=\"p\">(</span><span class=\"mf\">24.5</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_tlow</span><span class=\"p\">(</span><span class=\"mf\">22.5</span><span class=\"p\">)</span>\n<span class=\"c1\"># thermometer config</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_conversion_mode</span><span class=\"p\">(</span><span class=\"s2\">\"continuous\"</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_resolution</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">start_convert</span><span class=\"p\">()</span>\n<span class=\"c1\"># read temperature</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep_ms</span><span class=\"p\">(</span><span class=\"mi\">750</span><span class=\"p\">)</span>\n    <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">get_temperature</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature  : </span><span class=\"si\">{}</span><span class=\"s2\"> \u00b0C\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"p\">))</span>\n</pre>\n<h3>API reference</h3>\n<ul>\n<li>\n<p>get_config_register()</p>\n<p>Read and return the configuration register</p>\n</li>\n<li>\n<p>get_conversion_mode()</p>\n<p>Read and return the conversion mode (\"continuous\" or \"one-shot\")</p>\n</li>\n<li>\n<p>get_resolution()</p>\n<p>Read resolution and return the tuple temperature resolution (bits), temperature resolution (\u00b0C), conversion time (ms)</p>\n</li>\n<li>\n<p>get_temperature()</p>\n<p>Read and return the last converted temperature value (\u00b0C) from the temperature register.</p>\n<p>Note : temperature value stored in SRAM (power-up state -60 \u00b0C)</p>\n</li>\n<li>\n<p>get_thigh()</p>\n<p>Read and return the Th thermostat register (\u00b0C)</p>\n</li>\n<li>\n<p>get_tlow()</p>\n<p>Read and return the Tl thermostat register (\u00b0C)</p>\n</li>\n<li>\n<p>get_tout_polarity()</p>\n<p>Read and return the Tout polarity (\"active-low\" or \"active-high\")</p>\n</li>\n<li>\n<p>is_eeprom_busy()</p>\n<p>EEPROM status.<br>\nreturn True if a write to memory is in progress.<br>\nreturn False if memory is not busy.</p>\n<p>Note : write cycle time : 10 ms max, 4 ms typ.</p>\n</li>\n<li>\n<p>is_temperature_conversion_in_progress()</p>\n<p>Temperature conversion status.<br>\nreturn True if a temperature conversion is in progress.<br>\nreturn False if the temperature conversion is complete.</p>\n</li>\n<li>\n<p>is_thigh_flag_on()</p>\n<p>Th thermostat status.<br>\nreturn False if the measured temperature has not exceeded the value stored in the Th register since power-up ; otherwise return True</p>\n</li>\n<li>\n<p>is_tlow_flag_on()</p>\n<p>Tl thermostat status.<br>\nreturn False if the measured temperature has not been lower than the value stored in the Tl register since power-up ; otherwise return True.</p>\n</li>\n<li>\n<p>print_configuration()</p>\n<p>Read and print configuration and status information</p>\n</li>\n<li>\n<p>reset_thigh_flag()</p>\n<p>Th thermostat status.<br>\nThigh flag is overwritten with a 0</p>\n</li>\n<li>\n<p>reset_tlow_flag()</p>\n<p>Tl thermostat status.<br>\nTlow flag is overwritten with a 0</p>\n</li>\n<li>\n<p>set_config_register(config_register)</p>\n<p>Write to the configuration register</p>\n<p>Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.</p>\n</li>\n<li>\n<p>set_conversion_mode(mode)</p>\n<p>Set the conversion mode.<br>\nmode = \"one-shot\" or \"continuous\".<br>\nStored in EEPROM (write cycle time : 10 ms max)</p>\n<p>Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.</p>\n</li>\n<li>\n<p>set_resolution(resolution)</p>\n<p>Set the temperature resolution.<br>\nresolution is 9, 10, 11 or 12 bits.</p>\n<p>Stored in SRAM (power-up state 12 bits)</p>\n<p>Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.</p>\n</li>\n<li>\n<p>set_thigh(temperature)</p>\n<p>Set the upper thermostat trip point.<br>\ntemperature range : -55\u00b0C to +125\u00b0C.<br>\nStored in EEPROM (write cycle time : 10 ms max)</p>\n<p>Note : when making changes to the Th and Tl registers, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.</p>\n</li>\n<li>\n<p>set_tlow(temperature)</p>\n<p>Set the lower thermostat trip point.<br>\ntemperature range : -55\u00b0C to +125\u00b0C.<br>\nStored in EEPROM (write cycle time : 10 ms max)</p>\n<p>Note : when making changes to the Th and Tl registers, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.</p>\n</li>\n<li>\n<p>set_tout_polarity(polarity)</p>\n<p>Set the Tout polarity.<br>\npolarity = \"active-low\" or \"active-high\".<br>\nStored in EEPROM (write cycle time : 10 ms max)</p>\n<p>Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.</p>\n</li>\n<li>\n<p>software_por()</p>\n<p>Initiates a software power-on-reset (POR), which stops temperature conversions and resets all registers and logic to their power-up states.</p>\n<p>Power-up state :</p>\n<p>temperature register : -60 \u00b0C<br>\nresolution  : 12 bits<br>\ntemperature high flag : 0 (off)<br>\ntemperature low flag : 0 (off)</p>\n</li>\n<li>\n<p>start_convert()</p>\n<p>Initiates temperature conversions.<br>\nIf the part is in one-shot mode, only one conversion is performed.<br>\nIn continuous mode, continuous temperature conversions are performed until a Stop Convert command is issued.</p>\n</li>\n<li>\n<p>stop_convert()</p>\n<p>Stops temperature conversions when the device is in continuous conversion mode.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6926661, "releases": {"0.4.4": [{"comment_text": "", "digests": {"md5": "6cb6cad2683748327cff567981a8343a", "sha256": "da12e9cb7c31119b2dd98fcf8281c62e7acba64ca6dd426d85892e6e97877c39"}, "downloads": -1, "filename": "micropython-ds1631-0.4.4.tar.gz", "has_sig": false, "md5_digest": "6cb6cad2683748327cff567981a8343a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5957, "upload_time": "2020-02-04T18:46:07", "upload_time_iso_8601": "2020-02-04T18:46:07.516161Z", "url": "https://files.pythonhosted.org/packages/ff/c2/6e05b703715d0dac6991c9d5f13238d2d3591fa9cec1f0784fa4908378ba/micropython-ds1631-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "55749e661d8e74c18e7eda1527e61ba4", "sha256": "7d509e3388a4fa224c15234c98fb288cb97c0c60b87d21d7733fdb90dff19ed2"}, "downloads": -1, "filename": "micropython-ds1631-0.4.5.tar.gz", "has_sig": false, "md5_digest": "55749e661d8e74c18e7eda1527e61ba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6087, "upload_time": "2020-04-01T10:12:49", "upload_time_iso_8601": "2020-04-01T10:12:49.389453Z", "url": "https://files.pythonhosted.org/packages/33/00/82b59c09f014b5104f33c2652890e30b4fac02f6430b4a09c422b025f9a5/micropython-ds1631-0.4.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55749e661d8e74c18e7eda1527e61ba4", "sha256": "7d509e3388a4fa224c15234c98fb288cb97c0c60b87d21d7733fdb90dff19ed2"}, "downloads": -1, "filename": "micropython-ds1631-0.4.5.tar.gz", "has_sig": false, "md5_digest": "55749e661d8e74c18e7eda1527e61ba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6087, "upload_time": "2020-04-01T10:12:49", "upload_time_iso_8601": "2020-04-01T10:12:49.389453Z", "url": "https://files.pythonhosted.org/packages/33/00/82b59c09f014b5104f33c2652890e30b4fac02f6430b4a09c422b025f9a5/micropython-ds1631-0.4.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:06 2020"}