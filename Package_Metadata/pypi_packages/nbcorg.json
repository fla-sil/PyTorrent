{"info": {"author": "Lukas Ahrenberg", "author_email": "lukas@ahrenberg.se", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# nbcorg - A jupyter notebook to orgmode exporter for nbconvert\n\nThis is an [nbconvert](https://github.com/jupyter/nbconvert) exporter to convert an ipython/jupyter notebook to [orgmode](https://orgmode.org/) with multiple options for treating source code and output blocks.\n\n## Installation and getting started\n\nnbcorg can be installed from the command line with pip, e.g,\n```\npip install nbcorg\n```\n\nThis should install the software with dependencies, as well as create entry points for the orgmode exporters in nbconvert.\n\n## Using nbcorg\nOnce installed, the orgmode exporters can be selected using the `nbconvert --to` switch, e.g,\n```\njupyter nbconvert --to orgmode mynotebook.ipynb\n```\n\nIf you'd rather run from source without installation, you may do so from the nbcorg directory using the full qualified name [as described in the nbconvert documentation](https://nbconvert.readthedocs.io/en/latest/external_exporters.html#using-a-custom-exporter-without-entrypoints), e.g,\n```\njupyter nbconvert --to nbcorg.OrgmodeExporter mynotebook.ipynb\n```\n\n### Included exporters\nnbcorg functionality can be tuned using command line switches, as described below, however for convenience the package includes a couple named exporters with different default values for these.\n\n#### `orgmode` (`nbcorg.OrgmodeExporter`)\nThis is the base exporter with default values for options and switches as described below\n\n#### `orgmode_babel` (`nbcorg.OrgmodeBabelExporter`)\nIgnores all output and appends `:session :results output` to code blocks. Useful if a notebook should be converted to a literate programming org file. Note that the source code language is at the moment derived from notebook metadata, and for instance an ipython session is given as 'python', meaning that if you use cell magic you may need to do some tweaks to get it to work.\n\nThis a convenience exporter, running\n```\njupyter nbconvert --to orgmode-babel mynotebook.ipynb\n```\nis the same as\n```\njupyter nbconvert --to orgmode --OrgmodeExporter.src_block_options=':session :results output' --OrgmodeExporter.exclude_output=True\n```\n\n### Configuration options\nFor a list of nbconfig configuration options also applicable to the orgmode exporters see the nbconvert manual for [exporter](https://nbconvert.readthedocs.io/en/latest/config_options.html#exporter-options) and [preprocessor](https://nbconvert.readthedocs.io/en/latest/config_options.html#preprocessor-options) options. (In particular those applicable to `TemplateExporter` and `ExtractOutputPrecprocessor`.)\n\n`nbcorg.OrgmodeExporter` defines also the following additional options:\n\n#### `--OrgmodeExporter.exclude_execute_result=<Bool>`\nDefault: False\n\nDo not include execution results in output data.\nExecute results are special outputs separate from display data. The\n`[matplotlib.Y.Z at 0x123456789ABCDEF]` kind of strings in the  notebook\nwhen plotting a matplotlib figure is one example.\n\n#### `--OrgmodeExporter.exclude_raw=<Bool>`\nDefault: False\n\nThis allows you to exclude raw cells from all templates if set to True.\n\n#### `--OrgmodeExporter.html_data_as=<Unicode>`\nDefault: `export`\n\nHow HTML output data should be handled.\n\nAllowed values: \n- `export` - Enclose HTML in `#+BEGIN_EXPORT html ...`-block.\n- `example` - Enclose HTML in `#+BEGIN_EXAMPLE ... `-block.\n- `import` - Use pandoc to convert HTML to org. Results may vary... Much of likely still returned as HTML by pandoc and enclosed in `+#BEGIN_HTML...`-blocks.\n\n#### `--OrgmodeExporter.input_drawer_name=<Unicode>`\nDefault: `INPUT`\n\nDrawer name for input cell content.\nOnly applicable if `OrgmodeExporter.use_input_drawer=True`. Input cell\ncontent will be placed in an org drawer of this name.\n\n#### `--OrgmodeExporter.javascript_data_as=<Unicode>`\nDefault: `html`\n\nHow javascript output data should be handled.\n\nAllowed values: \n- `html` Place the js code in HTML <SCRIPT> tag and create placement <DIV> inside `#+BEGIN_EXPORT html ...` block.\n- `source` Place js code inside `#+BEGIN_SRC js`-block.\n- `example` Enclose javascript in `#+BEGIN_EXAMPLE ... `-block.\n- `ignore` - Ignore javascript blocks.\n\n#### `--OrgmodeExporter.latex_data_as=<Unicode>`\nDefault: `export`\n\nHow LaTeX output data should be handled.\n\nAllowed values: \n- export  - Enclose LaTeX in `#+BEGIN_EXPORT latex ...`-block.\n- example - Enclose LaTeX in `#+BEGIN_EXAMPLE ... `-block.\n- import - Use pandoc to convert LaTeX to org. Results may vary... pandoc likely wraps it in `#+BEGIN_SRC latex`-blocks.\n\n#### `--OrgmodeExporter.markdown_data_as=<Unicode>`\nDefault: `import`\n\nHow markdown output data should be handled.\n\nAllowed values: \n- `example` - Enclose markdown in `#+BEGIN_EXAMPLE ... `-block.\n- `import`  - Use pandoc to convert markdown to org.\n\n#### `--OrgmodeExporter.output_drawer_name=<Unicode>`\nDefault: `RESULTS`\n\nDrawer name for output cell content.\nOnly applicable if `OrgmodeExporter.use_output_drawer=True`. Output cell\ncontent will be placed in an org drawer of this name.\n\n#### `--OrgmodeExporter.src_block_options=<Unicode>`\nDefault: `` (empty string)\n\nString of org src block extra options.\nThis string will be added after the language name in all input cell  source\ncode blocks. Input code will be wrapped in a block on the form\n```\n#+BEGIN_SRC {{ lang }} {{src_block_options}}\n   {{ code }}\n   #+END_SRC\n```\nwhere `lang` and `code` is given by the notebook.\nThis option is useful to add org-babel options so that source blocks can be\nexecuted from org-mode as well.\nE.g. `OrgmodeExporter.src_block_options=':session :results output'` which\nwill instruct org-babel to execute each source block in a session just like\na jupyter notebook.\n(See org-babel for more information, and note that further configuration may\nbe needed to get ipython specifics, such as cell magic, to work.)\n\n#### `--OrgmodeExporter.supported_raw_as_export=<Bool>`\nDefault: True\n\nWrap raw LaTeX and HTML cells in org export blocks.\nStandard behaviour for nbconvert exporters when dealing with raw cells  is\nto include mime types requiring no conversion verbatim, while  ignoring any\nother ones.  The mime-types to include is given by the configuration option\n`raw_mimetypes`, which for orgmode defaults to 'text/x-org' and ''\n(corresponding to `None Raw NBConvert Format`). However, similar to the\njupyter notebook, orgmode has the ability to  mark blocks for inclusions\nverbatim when exporting to a set of supported formats (currently HTML and\nLaTeX). It therefore makes sense to convert raw cells in these formats to\nthe corresponding raw blocks. When `supported_raw_as_export` is set to\n`True` the mime types  'text/html' and 'text/latex' are added to\n`raw_mimetypes`, and HTML and  LaTeX raw cells are wrapped in export blocks\nrather than included  verbatim (other raw cell content is still represented\nverbatim). When `supported_raw_as_export` is set to `False` this\nfunctionality is turned off and only cells with mime types in\n`raw_mimetypes` are  included.\n\n#### `--OrgmodeExporter.use_input_drawer=<Bool>`\nDefault: False\n\nIf True, input cell contents are placed in drawers.\n\n#### `--OrgmodeExporter.use_output_drawer=<Bool>`\nDefault: False\n\nIf True, output cell contents are placed in drawers.\n\n## Dependencies\nnbcorg is dependent on the following software\n\n- [nbconvert](https://github.com/jupyter/nbconvert)\n- [pandoc](https://github.com/jgm/pandoc)\n\n## Authors\n\n- Lukas Ahrenberg\n\n## License\nThis project is licensed under the Modified BSD License. See [LICENSE](LICENSE) for text.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ahrenberg/nbcorg", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "nbcorg", "package_url": "https://pypi.org/project/nbcorg/", "platform": "", "project_url": "https://pypi.org/project/nbcorg/", "project_urls": {"Homepage": "https://github.com/ahrenberg/nbcorg"}, "release_url": "https://pypi.org/project/nbcorg/0.0.1/", "requires_dist": ["nbconvert", "pandoc"], "requires_python": "", "summary": "An nbconvert orgmode-exporter", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nbcorg - A jupyter notebook to orgmode exporter for nbconvert</h1>\n<p>This is an <a href=\"https://github.com/jupyter/nbconvert\" rel=\"nofollow\">nbconvert</a> exporter to convert an ipython/jupyter notebook to <a href=\"https://orgmode.org/\" rel=\"nofollow\">orgmode</a> with multiple options for treating source code and output blocks.</p>\n<h2>Installation and getting started</h2>\n<p>nbcorg can be installed from the command line with pip, e.g,</p>\n<pre><code>pip install nbcorg\n</code></pre>\n<p>This should install the software with dependencies, as well as create entry points for the orgmode exporters in nbconvert.</p>\n<h2>Using nbcorg</h2>\n<p>Once installed, the orgmode exporters can be selected using the <code>nbconvert --to</code> switch, e.g,</p>\n<pre><code>jupyter nbconvert --to orgmode mynotebook.ipynb\n</code></pre>\n<p>If you'd rather run from source without installation, you may do so from the nbcorg directory using the full qualified name <a href=\"https://nbconvert.readthedocs.io/en/latest/external_exporters.html#using-a-custom-exporter-without-entrypoints\" rel=\"nofollow\">as described in the nbconvert documentation</a>, e.g,</p>\n<pre><code>jupyter nbconvert --to nbcorg.OrgmodeExporter mynotebook.ipynb\n</code></pre>\n<h3>Included exporters</h3>\n<p>nbcorg functionality can be tuned using command line switches, as described below, however for convenience the package includes a couple named exporters with different default values for these.</p>\n<h4><code>orgmode</code> (<code>nbcorg.OrgmodeExporter</code>)</h4>\n<p>This is the base exporter with default values for options and switches as described below</p>\n<h4><code>orgmode_babel</code> (<code>nbcorg.OrgmodeBabelExporter</code>)</h4>\n<p>Ignores all output and appends <code>:session :results output</code> to code blocks. Useful if a notebook should be converted to a literate programming org file. Note that the source code language is at the moment derived from notebook metadata, and for instance an ipython session is given as 'python', meaning that if you use cell magic you may need to do some tweaks to get it to work.</p>\n<p>This a convenience exporter, running</p>\n<pre><code>jupyter nbconvert --to orgmode-babel mynotebook.ipynb\n</code></pre>\n<p>is the same as</p>\n<pre><code>jupyter nbconvert --to orgmode --OrgmodeExporter.src_block_options=':session :results output' --OrgmodeExporter.exclude_output=True\n</code></pre>\n<h3>Configuration options</h3>\n<p>For a list of nbconfig configuration options also applicable to the orgmode exporters see the nbconvert manual for <a href=\"https://nbconvert.readthedocs.io/en/latest/config_options.html#exporter-options\" rel=\"nofollow\">exporter</a> and <a href=\"https://nbconvert.readthedocs.io/en/latest/config_options.html#preprocessor-options\" rel=\"nofollow\">preprocessor</a> options. (In particular those applicable to <code>TemplateExporter</code> and <code>ExtractOutputPrecprocessor</code>.)</p>\n<p><code>nbcorg.OrgmodeExporter</code> defines also the following additional options:</p>\n<h4><code>--OrgmodeExporter.exclude_execute_result=&lt;Bool&gt;</code></h4>\n<p>Default: False</p>\n<p>Do not include execution results in output data.\nExecute results are special outputs separate from display data. The\n<code>[matplotlib.Y.Z at 0x123456789ABCDEF]</code> kind of strings in the  notebook\nwhen plotting a matplotlib figure is one example.</p>\n<h4><code>--OrgmodeExporter.exclude_raw=&lt;Bool&gt;</code></h4>\n<p>Default: False</p>\n<p>This allows you to exclude raw cells from all templates if set to True.</p>\n<h4><code>--OrgmodeExporter.html_data_as=&lt;Unicode&gt;</code></h4>\n<p>Default: <code>export</code></p>\n<p>How HTML output data should be handled.</p>\n<p>Allowed values:</p>\n<ul>\n<li><code>export</code> - Enclose HTML in <code>#+BEGIN_EXPORT html ...</code>-block.</li>\n<li><code>example</code> - Enclose HTML in <code>#+BEGIN_EXAMPLE ...</code>-block.</li>\n<li><code>import</code> - Use pandoc to convert HTML to org. Results may vary... Much of likely still returned as HTML by pandoc and enclosed in <code>+#BEGIN_HTML...</code>-blocks.</li>\n</ul>\n<h4><code>--OrgmodeExporter.input_drawer_name=&lt;Unicode&gt;</code></h4>\n<p>Default: <code>INPUT</code></p>\n<p>Drawer name for input cell content.\nOnly applicable if <code>OrgmodeExporter.use_input_drawer=True</code>. Input cell\ncontent will be placed in an org drawer of this name.</p>\n<h4><code>--OrgmodeExporter.javascript_data_as=&lt;Unicode&gt;</code></h4>\n<p>Default: <code>html</code></p>\n<p>How javascript output data should be handled.</p>\n<p>Allowed values:</p>\n<ul>\n<li><code>html</code> Place the js code in HTML &lt;SCRIPT&gt; tag and create placement <div> inside <code>#+BEGIN_EXPORT html ...</code> block.</div></li>\n<li><code>source</code> Place js code inside <code>#+BEGIN_SRC js</code>-block.</li>\n<li><code>example</code> Enclose javascript in <code>#+BEGIN_EXAMPLE ...</code>-block.</li>\n<li><code>ignore</code> - Ignore javascript blocks.</li>\n</ul>\n<h4><code>--OrgmodeExporter.latex_data_as=&lt;Unicode&gt;</code></h4>\n<p>Default: <code>export</code></p>\n<p>How LaTeX output data should be handled.</p>\n<p>Allowed values:</p>\n<ul>\n<li>export  - Enclose LaTeX in <code>#+BEGIN_EXPORT latex ...</code>-block.</li>\n<li>example - Enclose LaTeX in <code>#+BEGIN_EXAMPLE ...</code>-block.</li>\n<li>import - Use pandoc to convert LaTeX to org. Results may vary... pandoc likely wraps it in <code>#+BEGIN_SRC latex</code>-blocks.</li>\n</ul>\n<h4><code>--OrgmodeExporter.markdown_data_as=&lt;Unicode&gt;</code></h4>\n<p>Default: <code>import</code></p>\n<p>How markdown output data should be handled.</p>\n<p>Allowed values:</p>\n<ul>\n<li><code>example</code> - Enclose markdown in <code>#+BEGIN_EXAMPLE ...</code>-block.</li>\n<li><code>import</code>  - Use pandoc to convert markdown to org.</li>\n</ul>\n<h4><code>--OrgmodeExporter.output_drawer_name=&lt;Unicode&gt;</code></h4>\n<p>Default: <code>RESULTS</code></p>\n<p>Drawer name for output cell content.\nOnly applicable if <code>OrgmodeExporter.use_output_drawer=True</code>. Output cell\ncontent will be placed in an org drawer of this name.</p>\n<h4><code>--OrgmodeExporter.src_block_options=&lt;Unicode&gt;</code></h4>\n<p>Default: `` (empty string)</p>\n<p>String of org src block extra options.\nThis string will be added after the language name in all input cell  source\ncode blocks. Input code will be wrapped in a block on the form</p>\n<pre><code>#+BEGIN_SRC {{ lang }} {{src_block_options}}\n   {{ code }}\n   #+END_SRC\n</code></pre>\n<p>where <code>lang</code> and <code>code</code> is given by the notebook.\nThis option is useful to add org-babel options so that source blocks can be\nexecuted from org-mode as well.\nE.g. <code>OrgmodeExporter.src_block_options=':session :results output'</code> which\nwill instruct org-babel to execute each source block in a session just like\na jupyter notebook.\n(See org-babel for more information, and note that further configuration may\nbe needed to get ipython specifics, such as cell magic, to work.)</p>\n<h4><code>--OrgmodeExporter.supported_raw_as_export=&lt;Bool&gt;</code></h4>\n<p>Default: True</p>\n<p>Wrap raw LaTeX and HTML cells in org export blocks.\nStandard behaviour for nbconvert exporters when dealing with raw cells  is\nto include mime types requiring no conversion verbatim, while  ignoring any\nother ones.  The mime-types to include is given by the configuration option\n<code>raw_mimetypes</code>, which for orgmode defaults to 'text/x-org' and ''\n(corresponding to <code>None Raw NBConvert Format</code>). However, similar to the\njupyter notebook, orgmode has the ability to  mark blocks for inclusions\nverbatim when exporting to a set of supported formats (currently HTML and\nLaTeX). It therefore makes sense to convert raw cells in these formats to\nthe corresponding raw blocks. When <code>supported_raw_as_export</code> is set to\n<code>True</code> the mime types  'text/html' and 'text/latex' are added to\n<code>raw_mimetypes</code>, and HTML and  LaTeX raw cells are wrapped in export blocks\nrather than included  verbatim (other raw cell content is still represented\nverbatim). When <code>supported_raw_as_export</code> is set to <code>False</code> this\nfunctionality is turned off and only cells with mime types in\n<code>raw_mimetypes</code> are  included.</p>\n<h4><code>--OrgmodeExporter.use_input_drawer=&lt;Bool&gt;</code></h4>\n<p>Default: False</p>\n<p>If True, input cell contents are placed in drawers.</p>\n<h4><code>--OrgmodeExporter.use_output_drawer=&lt;Bool&gt;</code></h4>\n<p>Default: False</p>\n<p>If True, output cell contents are placed in drawers.</p>\n<h2>Dependencies</h2>\n<p>nbcorg is dependent on the following software</p>\n<ul>\n<li><a href=\"https://github.com/jupyter/nbconvert\" rel=\"nofollow\">nbconvert</a></li>\n<li><a href=\"https://github.com/jgm/pandoc\" rel=\"nofollow\">pandoc</a></li>\n</ul>\n<h2>Authors</h2>\n<ul>\n<li>Lukas Ahrenberg</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the Modified BSD License. See <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> for text.</p>\n\n          </div>"}, "last_serial": 5471430, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a6a89dfdeb2661acf15f31c1e31f88cf", "sha256": "9f47e55304cb5e26434443e1554ffd7f9d2050087110bdeb15cf60eb036e501a"}, "downloads": -1, "filename": "nbcorg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a6a89dfdeb2661acf15f31c1e31f88cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9990, "upload_time": "2019-07-01T14:45:19", "upload_time_iso_8601": "2019-07-01T14:45:19.629693Z", "url": "https://files.pythonhosted.org/packages/86/f4/98f1926adcc62f95f7d9b70cf4f283301eb267d36ea3f38e6f5a3714c7e3/nbcorg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3504a87a7e680723f5212e366acd8d7", "sha256": "eacee9b1f1a6075bb600c11a9e38b414b32f3415dcda1adcc8c520b74346aaa6"}, "downloads": -1, "filename": "nbcorg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e3504a87a7e680723f5212e366acd8d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8241, "upload_time": "2019-07-01T14:45:21", "upload_time_iso_8601": "2019-07-01T14:45:21.825149Z", "url": "https://files.pythonhosted.org/packages/7f/eb/6510bc2122330a9a9b5d4afc23710de06868f4fa403503347b6df0b60760/nbcorg-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6a89dfdeb2661acf15f31c1e31f88cf", "sha256": "9f47e55304cb5e26434443e1554ffd7f9d2050087110bdeb15cf60eb036e501a"}, "downloads": -1, "filename": "nbcorg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a6a89dfdeb2661acf15f31c1e31f88cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9990, "upload_time": "2019-07-01T14:45:19", "upload_time_iso_8601": "2019-07-01T14:45:19.629693Z", "url": "https://files.pythonhosted.org/packages/86/f4/98f1926adcc62f95f7d9b70cf4f283301eb267d36ea3f38e6f5a3714c7e3/nbcorg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3504a87a7e680723f5212e366acd8d7", "sha256": "eacee9b1f1a6075bb600c11a9e38b414b32f3415dcda1adcc8c520b74346aaa6"}, "downloads": -1, "filename": "nbcorg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e3504a87a7e680723f5212e366acd8d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8241, "upload_time": "2019-07-01T14:45:21", "upload_time_iso_8601": "2019-07-01T14:45:21.825149Z", "url": "https://files.pythonhosted.org/packages/7f/eb/6510bc2122330a9a9b5d4afc23710de06868f4fa403503347b6df0b60760/nbcorg-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:58 2020"}