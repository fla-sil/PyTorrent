{"info": {"author": "S\u00e9bastien Boisg\u00e9rault", "author_email": "Sebastien.Boisgerault@mines-paristech.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Zeroconf\n================================================================================\n\nA simple Python interface to Zeroconf service discovery and registration.\nSupports python >= 2.7 <= 3.5\n\nInstallation\n--------------------------------------------------------------------------------\n\n### Requirements\n\nThe `zeroconf` module assumes that the [avahi](http://avahi.org/) command-line\ntools `avahi-browse` and `avahi-publish` are available.\nOn Ubuntu for example, they may me installed with:\n\n    $ sudo apt-get install avahi-tools\n\nThe module also depend on [Andrew Moffat's subprocess wrapper][sh]. Install\nit with\n\n    $ pip install sh\n\nIf you install the package using setup.py or pip it'll be automatically\nhandled so you normally don't need to do this.\n\n[sh]: http://amoffat.github.io/sh\n\n### Install\n\nDownload the source distribution and type:\n\n    $ python setup.py install\n\n### Running tests\n\nYou need py.test installed, just run:\n\n    $ py.test --doctest-modules zeroconf/\n\n\nUsage\n--------------------------------------------------------------------------------\n\n### Zeroconf Services Discovery\n\nSearching for all available Zeroconf services is done by\n\n    >>> from zeroconf import ZeroConf\n    >>> zc = ZeroConf()\n    >>> services = zc.search()\n\nThe search can be made more specific, for example:\n\n    >>> services = zc.search(name=None, type=\"_workstation._tcp\", domain=\"local\")\n\nThe arguments, all optional, to the `search` functions are:\n\n  - `name`: service name, defaults to `None` (interpreted as all),\n  - `type`: service type, defaults to `None` (interpreted as all),\n  - `domain`: domain name, defaults to `\"local\"`.\n\nSearch results are dictionaries:\n\n    >>> print services\n    {('tide [f0:7b:cb:42:ff:e0]', '_workstation._tcp', 'local'):\n       {'txt': '', 'hostname': 'tide.local', 'port': '9', 'address': '192.168.0.13'},\n     ('wreck [00:26:18:4c:3f:ee]', '_workstation._tcp', 'local'):\n       {'txt': '', 'hostname': 'wreck.local', 'port': '9', 'address': '192.168.0.10'},\n     ('biohazard [00:18:8b:ac:c8:45]', '_workstation._tcp', 'local'):\n       {'txt': '', 'hostname': 'biohazard.local', 'port': '9', 'address': '192.168.0.12'}}\n\nThe keys are `(name, type, domain)` tuples and the values are dictionaries with `txt`,\n`hostname`, `port` and `address` keys.\n\n### Zeroconf Services Registration\n\nRegister a new zeroconf service in the local domain with:\n\n    >>> zc = ZeroConf()\n    >>> zc.register(name=\"ghost [08:00:27:bf:49:e1]\", type=\"_workstation._tcp\", port=\"9\")\n\nand when you're done, unregister it with:\n\n    >>> zc = ZeroConf()\n    >>> zc.unregister(name=\"ghost [08:00:27:bf:49:e1]\", type=\"_workstation._tcp\", port=\"9\")\n\nAll arguments to `unregister` are optional, so we could have done:\n\n    >>> zc = ZeroConf()\n    >>> zc.unregister(name=\"ghost [08:00:27:bf:49:e1]\")\n\nor even, to unregister all services published during the Python session:\n\n    >>> zc = ZeroConf()\n    >>> zc.unregister()\n\nContributors\n--------------------------------------------------------------------------------\n\n  - S\u00e9bastien Boisg\u00e9rault <Sebastien.Boisgerault@mines-paristech.fr>:\n    initial API design, Linux/avahi support.\n  - Olivier Huynh <olivierv.huynh@free.fr>: Windows/dns-sd support.\n  - David Francos Cuartero <me@davidfrancos.net>: OOP rewrite, Python3 support", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "ZeroConf", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "simplezeroconf", "package_url": "https://pypi.org/project/simplezeroconf/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/simplezeroconf/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/simplezeroconf/2.0.2/", "requires_dist": null, "requires_python": null, "summary": "Simple pythonic ZeroConf implementation using system calls", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple Python interface to Zeroconf service discovery and registration.\nSupports python &gt;= 2.7 &lt;= 3.5</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>### Requirements</p>\n<p>The <cite>zeroconf</cite> module assumes that the [avahi](<a href=\"http://avahi.org/\" rel=\"nofollow\">http://avahi.org/</a>) command-line\ntools <cite>avahi-browse</cite> and <cite>avahi-publish</cite> are available.\nOn Ubuntu for example, they may me installed with:</p>\n<blockquote>\n$ sudo apt-get install avahi-tools</blockquote>\n<p>The module also depend on [Andrew Moffat\u2019s subprocess wrapper][sh]. Install\nit with</p>\n<blockquote>\n$ pip install sh</blockquote>\n<p>If you install the package using setup.py or pip it\u2019ll be automatically\nhandled so you normally don\u2019t need to do this.</p>\n<p>[sh]: <a href=\"http://amoffat.github.io/sh\" rel=\"nofollow\">http://amoffat.github.io/sh</a></p>\n<p>### Install</p>\n<p>Download the source distribution and type:</p>\n<blockquote>\n$ python setup.py install</blockquote>\n<p>### Running tests</p>\n<p>You need py.test installed, just run:</p>\n<blockquote>\n$ py.test \u2013doctest-modules zeroconf/</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>### Zeroconf Services Discovery</p>\n<p>Searching for all available Zeroconf services is done by</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zeroconf import ZeroConf\n&gt;&gt;&gt; zc = ZeroConf()\n&gt;&gt;&gt; services = zc.search()\n</pre>\n</blockquote>\n<p>The search can be made more specific, for example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; services = zc.search(name=None, type=\"_workstation._tcp\", domain=\"local\")\n</pre>\n</blockquote>\n<p>The arguments, all optional, to the <cite>search</cite> functions are:</p>\n<blockquote>\n<ul>\n<li><cite>name</cite>: service name, defaults to <cite>None</cite> (interpreted as all),</li>\n<li><cite>type</cite>: service type, defaults to <cite>None</cite> (interpreted as all),</li>\n<li><cite>domain</cite>: domain name, defaults to <cite>\u201clocal\u201d</cite>.</li>\n</ul>\n</blockquote>\n<p>Search results are dictionaries:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print services\n{('tide [f0:7b:cb:42:ff:e0]', '_workstation._tcp', 'local'):\n   {'txt': '', 'hostname': 'tide.local', 'port': '9', 'address': '192.168.0.13'},\n ('wreck [00:26:18:4c:3f:ee]', '_workstation._tcp', 'local'):\n   {'txt': '', 'hostname': 'wreck.local', 'port': '9', 'address': '192.168.0.10'},\n ('biohazard [00:18:8b:ac:c8:45]', '_workstation._tcp', 'local'):\n   {'txt': '', 'hostname': 'biohazard.local', 'port': '9', 'address': '192.168.0.12'}}\n</pre>\n</blockquote>\n<p>The keys are <cite>(name, type, domain)</cite> tuples and the values are dictionaries with <cite>txt</cite>,\n<cite>hostname</cite>, <cite>port</cite> and <cite>address</cite> keys.</p>\n<p>### Zeroconf Services Registration</p>\n<p>Register a new zeroconf service in the local domain with:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc = ZeroConf()\n&gt;&gt;&gt; zc.register(name=\"ghost [08:00:27:bf:49:e1]\", type=\"_workstation._tcp\", port=\"9\")\n</pre>\n</blockquote>\n<p>and when you\u2019re done, unregister it with:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc = ZeroConf()\n&gt;&gt;&gt; zc.unregister(name=\"ghost [08:00:27:bf:49:e1]\", type=\"_workstation._tcp\", port=\"9\")\n</pre>\n</blockquote>\n<p>All arguments to <cite>unregister</cite> are optional, so we could have done:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc = ZeroConf()\n&gt;&gt;&gt; zc.unregister(name=\"ghost [08:00:27:bf:49:e1]\")\n</pre>\n</blockquote>\n<p>or even, to unregister all services published during the Python session:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc = ZeroConf()\n&gt;&gt;&gt; zc.unregister()\n</pre>\n</blockquote>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<blockquote>\n<ul>\n<li>S\u00e9bastien Boisg\u00e9rault &lt;<a href=\"mailto:Sebastien.Boisgerault%40mines-paristech.fr\">Sebastien<span>.</span>Boisgerault<span>@</span>mines-paristech<span>.</span>fr</a>&gt;:\ninitial API design, Linux/avahi support.</li>\n<li>Olivier Huynh &lt;<a href=\"mailto:olivierv.huynh%40free.fr\">olivierv<span>.</span>huynh<span>@</span>free<span>.</span>fr</a>&gt;: Windows/dns-sd support.</li>\n<li>David Francos Cuartero &lt;<a href=\"mailto:me%40davidfrancos.net\">me<span>@</span>davidfrancos<span>.</span>net</a>&gt;: OOP rewrite, Python3 support</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2137795, "releases": {"2.0.2": []}, "urls": [], "timestamp": "Fri May  8 03:09:48 2020"}