{"info": {"author": "ilex", "author_email": "ilexhostmaster@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Database"], "description": "===========\naiomongodel\n===========\n\n.. image:: https://travis-ci.org/ilex/aiomongodel.svg?branch=master\n    :target: https://travis-ci.org/ilex/aiomongodel\n\n.. image:: https://readthedocs.org/projects/aiomongodel/badge/?version=latest\n    :target: http://aiomongodel.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nAn asynchronous ODM similar to `PyMODM`_ on top of `Motor`_ an asynchronous \nPython `MongoDB`_ driver. Works on ``Python 3.5`` and up. Some features\nsuch as asynchronous comprehensions require at least ``Python 3.6``. ``aiomongodel``\ncan be used with `asyncio`_ as well as with `Tornado`_.\n\nUsage of ``session`` requires at least MongoDB version 4.0.\n\n.. _PyMODM: http://pymodm.readthedocs.io/en/stable\n.. _Motor: https://pypi.python.org/pypi/motor\n.. _MongoDB: https://www.mongodb.com/\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _Tornado: https://pypi.python.org/pypi/tornado\n\nInstall\n=======\n\nInstall `aiomongodel` using `pip`::\n\n    pip install aiomongodel\n\nDocumentation\n=============\n\nRead the `docs`_.\n\n.. _docs: http://aiomongodel.readthedocs.io/\n\nGetting Start\n=============\n\nModeling\n--------\n\nTo create a model just create a new model class, inherit it from \n``aiomongodel.Document`` class, list all the model fields and place \na ``Meta`` class with model meta options. To create a subdocument, create\na class with fields and inherit it from ``aiomongodel.EmbeddedDocument``.\n\n.. code-block:: python\n\n    # models.py\n\n    from datetime import datetime\n\n    from pymongo import IndexModel, DESCENDING \n\n    from aiomongodel import Document, EmbeddedDocument\n    from aiomongodel.fields import (\n        StrField, BoolField, ListField, EmbDocField, RefField, SynonymField, \n        IntField, FloatField, DateTimeField, ObjectIdField)\n\n    class User(Document):\n        _id = StrField(regex=r'[a-zA-Z0-9_]{3, 20}')\n        is_active = BoolField(default=True)\n        posts = ListField(RefField('models.Post'), default=lambda: list())\n        quote = StrField(required=False)\n\n        # create a synonym field\n        name = SynonymField(_id)\n\n        class Meta:\n            collection = 'users'\n\n    class Post(Document):\n        # _id field will be added automatically as \n        # _id = ObjectIdField(defalut=lambda: ObjectId())\n        title = StrField(allow_blank=False, max_length=50)\n        body = StrField()\n        created = DateTimeField(default=lambda: datetime.utcnow())\n        views = IntField(default=0)\n        rate = FloatField(default=0.0)\n        author = RefField(User, mongo_name='user')\n        comments = ListField(EmbDocField('models.Comment'), default=lambda: list())\n\n        class Meta:\n            collection = 'posts'\n            indexes = [IndexModel([('created', DESCENDING)])]\n            default_sort = [('created', DESCENDING)]\n\n    class Comment(EmbeddedDocument):\n        _id = ObjectIdField(default=lambda: ObjectId())\n        author = RefField(User)\n        body = StrField()\n\n    # `s` property of the fields can be used to get a mongodb string name\n    # to use in queries\n    assert User._id.s == '_id'\n    assert User.name.s == '_id'  # name is synonym\n    assert Post.title.s == 'title'\n    assert Post.author.s == 'user'  # field has mongo_name\n    assert Post.comments.body.s == 'comments.body'  # compound name\n\nCRUD\n----\n\n.. code-block:: python\n\n    from motor.motor_asyncio import AsyncIOMotorClient\n\n    async def go(db):\n        # create model's indexes \n        await User.q(db).create_indexes()\n\n        # CREATE\n        # create using save\n        # Note: if do_insert=False (default) save performs a replace\n        # with upsert=True, so it does not raise if _id already exists\n        # in db but replace document with that _id.\n        u = await User(name='Alexandro').save(db, do_insert=True)\n        assert u.name == 'Alexandro'\n        assert u._id == 'Alexandro'\n        assert u.is_active is True\n        assert u.posts == []\n        assert u.quote is None\n        # using query\n        u = await User.q(db).create(name='Ihor', is_active=False)\n\n        # READ\n        # get by id\n        u = await User.q(db).get('Alexandro')\n        assert u.name == 'Alexandro'\n        # find\n        users = await User.q(db).find({User.is_active.s: True}).to_list(10)\n        assert len(users) == 2\n        # using for loop\n        users = []\n        async for user in User.q(db).find({User.is_active.s: False}):\n            users.append(user)\n        assert len(users) == 1\n        # in Python 3.6 an up use async comprehensions\n        users = [user async for user in User.q(db).find({})]\n        assert len(users) == 3\n\n        # UPDATE\n        u = await User.q(db).get('Ihor')\n        u.is_active = True\n        await u.save(db)\n        assert (await User.q(db).get('Ihor')).is_active is True\n        # using update (without data validation)\n        # object is reloaded from db after update.\n        await u.update(db, {'$push': {User.posts.s: ObjectId()}})\n\n        # DELETE\n        u = await User.q(db).get('Ihor')\n        await u.delete(db)\n\n\n    loop = asyncio.get_event_loop()\n    client = AsyncIOMotorClient(io_loop=loop)\n    db = client.aiomongodel_test\n    loop.run_until_complete(go(db))\n\nValidation\n----------\nUse model's ``validate`` method to validate model's data. If\nthere are any invalid data an ``aiomongodel.errors.ValidationError``\nwill raise.\n\n.. note:: \n\n    Creating model object or assigning it with invalid data does\n    not raise errors! Be careful while saving model without validation.\n\n.. code-block:: python\n\n    class Model(Document):\n        name = StrField(max_length=7)\n        value = IntField(gt=5, lte=13)\n        data = FloatField()\n\n    def go():\n        m = Model(name='xxx', value=10, data=1.6)\n        # validate data\n        # should not raise any error\n        m.validate()\n\n        # invalid data\n        # note that there are no errors while creating\n        # model with invalid data\n        invalid = Model(name='too long string', value=0)\n        try:\n            invalid.validate()\n        except aiomongodel.errors.ValidationError as e:\n            assert e.as_dict() == {\n                'name': 'length is greater than 7',\n                'value': 'value should be greater than 5',\n                'data': 'field is required'\n            }\n\n            # using translation - you can translate messages\n            # to your language or modify them\n            translation = {\n                \"field is required\": \"This field is required\",\n                \"length is greater than {constraint}\": (\"Length of the field \"\n                                                        \"is greater than \"\n                                                        \"{constraint} characters\"),\n                # see all error messages in ValidationError docs\n                # for missed messages default messages will be used\n            }\n            assert e.as_dict(translation=translation) == {\n                'name': 'Length of the field is greater than 7 characters',\n                'value': 'value should be greater than 5',\n                'data': 'This field is required'\n            }\n\n\nQuerying\n--------\n\n.. code-block:: python\n\n    async def go(db):\n        # find returns a cursor \n        cursor = User.q(db).find({}, {'_id': 1}).skip(1).limit(2)\n        async for user in cursor:\n            print(user.name)\n            assert user.is_active is None  # we used projection\n\n        # find one\n        user = await User.q(db).find_one({User.name.s: 'Alexandro'})\n        assert user.name == 'Alexandro'\n\n        # update\n        await User.q(db).update_many(\n            {User.is_active.s: True},\n            {'$set': {User.is_active.s: False}})\n\n        # delete \n        await User.q(db).delete_many({})\n\nModels Inheritance\n------------------\n\nA hierarchy of models can be built by inheriting one model from another.\nA ``aiomongodel.Document`` class should be somewhere in hierarchy for model\nadn ``aiomongodel.EmbeddedDocument`` for subdocuments. \nNote that fields are inherited but meta options are not. \n\n.. code-block:: python\n\n    class Mixin:\n        value = IntField()\n\n    class Parent(Document):\n        name = StrField()\n\n    class Child(Mixin, Parent):\n        # also has value and name fields\n        rate = FloatField()\n\n    class OtherChild(Child):\n        # also has rate and name fields\n        value = FloatField() # overwrite value field from Mixin\n\n    class SubDoc(Mixin, EmbeddedDocument):\n        # has value field\n        pass\n\nModels Inheritance With Same Collection\n---------------------------------------\n\n.. code-block:: python\n\n    class Mixin:\n        is_active = BoolField(default=True)\n\n    class User(Mixin, Document):\n        _id = StrField() \n        role = StrField()\n        name = SynonymField(_id)\n\n        class Meta:\n            collection = 'users'\n\n        @classmethod\n        def from_mongo(cls, data):\n            # create appropriate model when loading from db\n            if data['role'] == 'customer':\n                return super(User, Customer).from_mongo(data)\n            if data['role'] == 'admin':\n                return super(User, Admin).from_mongo(data)\n\n    class Customer(User):\n        role = StrField(default='customer', choices=['customer'])  # overwrite role field\n        address = StrField()\n\n        class Meta:\n            collection = 'users'\n            default_query = {User.role.s: 'customer'}\n\n    class Admin(User):\n        role = StrField(default='admin', choices=['admin'])  # overwrite role field\n        rights = ListField(StrField(), default=lambda: list())\n\n        class Meta:\n            collection = 'users'\n            default_query = {User.role.s: 'admin'}\n\n\nTransaction\n-----------\n\n.. code-block:: python\n\n    from motor.motor_asyncio import AsyncIOMotorClient\n\n    async def go(db):\n        # create collection before using transaction\n        await User.create_collection(db)\n\n        async with await db.client.start_session() as session:\n            try:\n                async with s.start_transaction():\n                    # all statements that use session inside this block\n                    # will be executed in one transaction\n\n                    # pass session to QuerySet\n                    await User.q(db, session=session).create(name='user')  # note session param\n                    # pass session to QuerySet method \n                    await User.q(db).update_one(\n                        {User.name.s: 'user'},\n                        {'$set': {User.is_active.s: False}},\n                        session=session)  # note session usage\n                    assert await User.q(db, session).count_documents({User.name.s: 'user'}) == 1\n\n                    # session could be used in document crud methods\n                    u = await User(name='user2').save(db, session=session)\n                    await u.delete(db, session=session)\n\n                    raise Exception()  # simulate error in transaction block\n             except Exception:\n                 # transaction was not committed \n                 assert await User.q(db).count_documents({User.name.s: 'user'}) == 0\n\n\n    loop = asyncio.get_event_loop()\n    client = AsyncIOMotorClient(io_loop=loop)\n    db = client.aiomongodel_test\n    loop.run_until_complete(go(db))\n\n\nLicense\n=======\n\nThe library is licensed under MIT License.\n\nChangelog\n=========\n\n0.2.0 (2018-09-12)\n------------------\n\nMove requirements to motor>=2.0.\n\nRemove ``count`` method from ``MotorQuerySetCursor``.\n\nAdd session support to ``MotorQuerySet`` and ``Document``.\n\nAdd ``create_collection`` method to ``Document``.\n\nFix ``__aiter__`` of ``MotorQuerySetCursor`` for python 3.7.\n\nDeprecate ``count`` method of ``MotorQuerySet``.\n\nDeprecate ``create`` method of ``Document``.\n\n0.1.0 (2017-05-19)\n------------------\n\nThe first ``aiomongodel`` release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ilex/aiomongodel", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiomongodel", "package_url": "https://pypi.org/project/aiomongodel/", "platform": "", "project_url": "https://pypi.org/project/aiomongodel/", "project_urls": {"Homepage": "https://github.com/ilex/aiomongodel"}, "release_url": "https://pypi.org/project/aiomongodel/0.2.0/", "requires_dist": ["motor (<3.0,>=2.0)"], "requires_python": "", "summary": "ODM to use with asynchronous MongoDB Motor driver.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/ilex/aiomongodel\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ilex/aiomongodel.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fb4c197b459283239a7d220f17f771c040667f9/68747470733a2f2f7472617669732d63692e6f72672f696c65782f61696f6d6f6e676f64656c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://aiomongodel.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d0e65560eee819ee5adf1f815067cb83db615c4/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696f6d6f6e676f64656c2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>An asynchronous ODM similar to <a href=\"http://pymodm.readthedocs.io/en/stable\" rel=\"nofollow\">PyMODM</a> on top of <a href=\"https://pypi.python.org/pypi/motor\" rel=\"nofollow\">Motor</a> an asynchronous\nPython <a href=\"https://www.mongodb.com/\" rel=\"nofollow\">MongoDB</a> driver. Works on <tt>Python 3.5</tt> and up. Some features\nsuch as asynchronous comprehensions require at least <tt>Python 3.6</tt>. <tt>aiomongodel</tt>\ncan be used with <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> as well as with <a href=\"https://pypi.python.org/pypi/tornado\" rel=\"nofollow\">Tornado</a>.</p>\n<p>Usage of <tt>session</tt> requires at least MongoDB version 4.0.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Install <cite>aiomongodel</cite> using <cite>pip</cite>:</p>\n<pre>pip install aiomongodel\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Read the <a href=\"http://aiomongodel.readthedocs.io/\" rel=\"nofollow\">docs</a>.</p>\n</div>\n<div id=\"getting-start\">\n<h2>Getting Start</h2>\n<div id=\"modeling\">\n<h3>Modeling</h3>\n<p>To create a model just create a new model class, inherit it from\n<tt>aiomongodel.Document</tt> class, list all the model fields and place\na <tt>Meta</tt> class with model meta options. To create a subdocument, create\na class with fields and inherit it from <tt>aiomongodel.EmbeddedDocument</tt>.</p>\n<pre><span class=\"c1\"># models.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">IndexModel</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiomongodel</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">EmbeddedDocument</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomongodel.fields</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">StrField</span><span class=\"p\">,</span> <span class=\"n\">BoolField</span><span class=\"p\">,</span> <span class=\"n\">ListField</span><span class=\"p\">,</span> <span class=\"n\">EmbDocField</span><span class=\"p\">,</span> <span class=\"n\">RefField</span><span class=\"p\">,</span> <span class=\"n\">SynonymField</span><span class=\"p\">,</span>\n    <span class=\"n\">IntField</span><span class=\"p\">,</span> <span class=\"n\">FloatField</span><span class=\"p\">,</span> <span class=\"n\">DateTimeField</span><span class=\"p\">,</span> <span class=\"n\">ObjectIdField</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Document</span><span class=\"p\">):</span>\n    <span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'[a-zA-Z0-9_]{3, 20}'</span><span class=\"p\">)</span>\n    <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"n\">BoolField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">RefField</span><span class=\"p\">(</span><span class=\"s1\">'models.Post'</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">())</span>\n    <span class=\"n\">quote</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># create a synonym field</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">SynonymField</span><span class=\"p\">(</span><span class=\"n\">_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">Document</span><span class=\"p\">):</span>\n    <span class=\"c1\"># _id field will be added automatically as</span>\n    <span class=\"c1\"># _id = ObjectIdField(defalut=lambda: ObjectId())</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">(</span><span class=\"n\">allow_blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">()</span>\n    <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">())</span>\n    <span class=\"n\">views</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"n\">FloatField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">RefField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">mongo_name</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">EmbDocField</span><span class=\"p\">(</span><span class=\"s1\">'models.Comment'</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">())</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"s1\">'posts'</span>\n        <span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">IndexModel</span><span class=\"p\">([(</span><span class=\"s1\">'created'</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span><span class=\"p\">)])]</span>\n        <span class=\"n\">default_sort</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'created'</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span><span class=\"p\">)]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">EmbeddedDocument</span><span class=\"p\">):</span>\n    <span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"n\">ObjectIdField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">())</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">RefField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># `s` property of the fields can be used to get a mongodb string name</span>\n<span class=\"c1\"># to use in queries</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">_id</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'_id'</span>\n<span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'_id'</span>  <span class=\"c1\"># name is synonym</span>\n<span class=\"k\">assert</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'title'</span>\n<span class=\"k\">assert</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'user'</span>  <span class=\"c1\"># field has mongo_name</span>\n<span class=\"k\">assert</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'comments.body'</span>  <span class=\"c1\"># compound name</span>\n</pre>\n</div>\n<div id=\"crud\">\n<h3>CRUD</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">motor.motor_asyncio</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncIOMotorClient</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create model's indexes</span>\n    <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create_indexes</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># CREATE</span>\n    <span class=\"c1\"># create using save</span>\n    <span class=\"c1\"># Note: if do_insert=False (default) save performs a replace</span>\n    <span class=\"c1\"># with upsert=True, so it does not raise if _id already exists</span>\n    <span class=\"c1\"># in db but replace document with that _id.</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Alexandro'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">do_insert</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'Alexandro'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">_id</span> <span class=\"o\">==</span> <span class=\"s1\">'Alexandro'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n    <span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">posts</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>\n    <span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">quote</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># using query</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Ihor'</span><span class=\"p\">,</span> <span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># READ</span>\n    <span class=\"c1\"># get by id</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Alexandro'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'Alexandro'</span>\n    <span class=\"c1\"># find</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"c1\"># using for loop</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}):</span>\n        <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"c1\"># in Python 3.6 an up use async comprehensions</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">user</span> <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({})]</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n    <span class=\"c1\"># UPDATE</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Ihor'</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">await</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Ihor'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n    <span class=\"c1\"># using update (without data validation)</span>\n    <span class=\"c1\"># object is reloaded from db after update.</span>\n    <span class=\"k\">await</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'$push'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">()}})</span>\n\n    <span class=\"c1\"># DELETE</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Ihor'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncIOMotorClient</span><span class=\"p\">(</span><span class=\"n\">io_loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">aiomongodel_test</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"validation\">\n<h3>Validation</h3>\n<p>Use model\u2019s <tt>validate</tt> method to validate model\u2019s data. If\nthere are any invalid data an <tt>aiomongodel.errors.ValidationError</tt>\nwill raise.</p>\n<div>\n<p>Note</p>\n<p>Creating model object or assigning it with invalid data does\nnot raise errors! Be careful while saving model without validation.</p>\n</div>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">Document</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">(</span><span class=\"n\">gt</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">lte</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">FloatField</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">():</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'xxx'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"mf\">1.6</span><span class=\"p\">)</span>\n    <span class=\"c1\"># validate data</span>\n    <span class=\"c1\"># should not raise any error</span>\n    <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># invalid data</span>\n    <span class=\"c1\"># note that there are no errors while creating</span>\n    <span class=\"c1\"># model with invalid data</span>\n    <span class=\"n\">invalid</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'too long string'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">invalid</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">aiomongodel</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'length is greater than 7'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'value should be greater than 5'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"s1\">'field is required'</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># using translation - you can translate messages</span>\n        <span class=\"c1\"># to your language or modify them</span>\n        <span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"field is required\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This field is required\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"length is greater than </span><span class=\"si\">{constraint}</span><span class=\"s2\">\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"Length of the field \"</span>\n                                                    <span class=\"s2\">\"is greater than \"</span>\n                                                    <span class=\"s2\">\"</span><span class=\"si\">{constraint}</span><span class=\"s2\"> characters\"</span><span class=\"p\">),</span>\n            <span class=\"c1\"># see all error messages in ValidationError docs</span>\n            <span class=\"c1\"># for missed messages default messages will be used</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"o\">=</span><span class=\"n\">translation</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Length of the field is greater than 7 characters'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'value should be greater than 5'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"s1\">'This field is required'</span>\n        <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"querying\">\n<h3>Querying</h3>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">):</span>\n    <span class=\"c1\"># find returns a cursor</span>\n    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({},</span> <span class=\"p\">{</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>  <span class=\"c1\"># we used projection</span>\n\n    <span class=\"c1\"># find one</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s1\">'Alexandro'</span><span class=\"p\">})</span>\n    <span class=\"k\">assert</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'Alexandro'</span>\n\n    <span class=\"c1\"># update</span>\n    <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update_many</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'$set'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}})</span>\n\n    <span class=\"c1\"># delete</span>\n    <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete_many</span><span class=\"p\">({})</span>\n</pre>\n</div>\n<div id=\"models-inheritance\">\n<h3>Models Inheritance</h3>\n<p>A hierarchy of models can be built by inheriting one model from another.\nA <tt>aiomongodel.Document</tt> class should be somewhere in hierarchy for model\nadn <tt>aiomongodel.EmbeddedDocument</tt> for subdocuments.\nNote that fields are inherited but meta options are not.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Mixin</span><span class=\"p\">:</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Parent</span><span class=\"p\">(</span><span class=\"n\">Document</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Child</span><span class=\"p\">(</span><span class=\"n\">Mixin</span><span class=\"p\">,</span> <span class=\"n\">Parent</span><span class=\"p\">):</span>\n    <span class=\"c1\"># also has value and name fields</span>\n    <span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"n\">FloatField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OtherChild</span><span class=\"p\">(</span><span class=\"n\">Child</span><span class=\"p\">):</span>\n    <span class=\"c1\"># also has rate and name fields</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">FloatField</span><span class=\"p\">()</span> <span class=\"c1\"># overwrite value field from Mixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SubDoc</span><span class=\"p\">(</span><span class=\"n\">Mixin</span><span class=\"p\">,</span> <span class=\"n\">EmbeddedDocument</span><span class=\"p\">):</span>\n    <span class=\"c1\"># has value field</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"models-inheritance-with-same-collection\">\n<h3>Models Inheritance With Same Collection</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Mixin</span><span class=\"p\">:</span>\n    <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"n\">BoolField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Mixin</span><span class=\"p\">,</span> <span class=\"n\">Document</span><span class=\"p\">):</span>\n    <span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">()</span>\n    <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">()</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">SynonymField</span><span class=\"p\">(</span><span class=\"n\">_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_mongo</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create appropriate model when loading from db</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'role'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'customer'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">Customer</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_mongo</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'role'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'admin'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">Admin</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_mongo</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Customer</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">):</span>\n    <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'customer'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'customer'</span><span class=\"p\">])</span>  <span class=\"c1\"># overwrite role field</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n        <span class=\"n\">default_query</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s1\">'customer'</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Admin</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">):</span>\n    <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">StrField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'admin'</span><span class=\"p\">])</span>  <span class=\"c1\"># overwrite role field</span>\n    <span class=\"n\">rights</span> <span class=\"o\">=</span> <span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">StrField</span><span class=\"p\">(),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">())</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n        <span class=\"n\">default_query</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s1\">'admin'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"transaction\">\n<h3>Transaction</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">motor.motor_asyncio</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncIOMotorClient</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create collection before using transaction</span>\n    <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">create_collection</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start_session</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">start_transaction</span><span class=\"p\">():</span>\n                <span class=\"c1\"># all statements that use session inside this block</span>\n                <span class=\"c1\"># will be executed in one transaction</span>\n\n                <span class=\"c1\"># pass session to QuerySet</span>\n                <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">)</span>  <span class=\"c1\"># note session param</span>\n                <span class=\"c1\"># pass session to QuerySet method</span>\n                <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update_one</span><span class=\"p\">(</span>\n                    <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">},</span>\n                    <span class=\"p\">{</span><span class=\"s1\">'$set'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}},</span>\n                    <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">)</span>  <span class=\"c1\"># note session usage</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count_documents</span><span class=\"p\">({</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n                <span class=\"c1\"># session could be used in document crud methods</span>\n                <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'user2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">)</span>\n\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">()</span>  <span class=\"c1\"># simulate error in transaction block</span>\n         <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n             <span class=\"c1\"># transaction was not committed</span>\n             <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count_documents</span><span class=\"p\">({</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncIOMotorClient</span><span class=\"p\">(</span><span class=\"n\">io_loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">aiomongodel_test</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The library is licensed under MIT License.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.2.0 (2018-09-12)</h3>\n<p>Move requirements to motor&gt;=2.0.</p>\n<p>Remove <tt>count</tt> method from <tt>MotorQuerySetCursor</tt>.</p>\n<p>Add session support to <tt>MotorQuerySet</tt> and <tt>Document</tt>.</p>\n<p>Add <tt>create_collection</tt> method to <tt>Document</tt>.</p>\n<p>Fix <tt>__aiter__</tt> of <tt>MotorQuerySetCursor</tt> for python 3.7.</p>\n<p>Deprecate <tt>count</tt> method of <tt>MotorQuerySet</tt>.</p>\n<p>Deprecate <tt>create</tt> method of <tt>Document</tt>.</p>\n</div>\n<div id=\"id2\">\n<h3>0.1.0 (2017-05-19)</h3>\n<p>The first <tt>aiomongodel</tt> release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4262855, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cf8f7389bb812cbdc4c8e403ed8d034c", "sha256": "539784d6e5ac9ffaab5f66d2b070eeabc03628f2035a470bf22d7f3b218cb501"}, "downloads": -1, "filename": "aiomongodel-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cf8f7389bb812cbdc4c8e403ed8d034c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 21573, "upload_time": "2017-05-19T14:13:47", "upload_time_iso_8601": "2017-05-19T14:13:47.382915Z", "url": "https://files.pythonhosted.org/packages/89/88/d993270c9cda99ad235bc39177fe72461629434921a73d457a4a54e66d56/aiomongodel-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77605f5ff66636ea27867f637ac5c28f", "sha256": "5be81d00b445769bb775d70ee95cb335702da9e6e20b53449ff5fb706e260b27"}, "downloads": -1, "filename": "aiomongodel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "77605f5ff66636ea27867f637ac5c28f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19932, "upload_time": "2017-05-19T14:13:45", "upload_time_iso_8601": "2017-05-19T14:13:45.763409Z", "url": "https://files.pythonhosted.org/packages/b0/13/fa50ccfa18c8be7b3a6c9511ee911b200ad83901f3235d0ae99d5ed9291c/aiomongodel-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d059d19fe814f79ae4843e896cee13a5", "sha256": "a4ec4f4138b7040793486764f3cbdefd579615b4b5b09f0b17a4698b912356d0"}, "downloads": -1, "filename": "aiomongodel-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d059d19fe814f79ae4843e896cee13a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18512, "upload_time": "2018-09-11T22:44:01", "upload_time_iso_8601": "2018-09-11T22:44:01.178829Z", "url": "https://files.pythonhosted.org/packages/90/c9/b47345e8f6a980056a74a8db8912622e5605f8dd42e184bc0e361a65afd4/aiomongodel-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa3c0e75785fe4e475f6e243f1bbf2d6", "sha256": "662070047b40c93e946ba37661f7fc81cfc07e1529b527e95da291d1962b3c1a"}, "downloads": -1, "filename": "aiomongodel-0.2.0.tar.gz", "has_sig": false, "md5_digest": "aa3c0e75785fe4e475f6e243f1bbf2d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21444, "upload_time": "2018-09-11T22:44:02", "upload_time_iso_8601": "2018-09-11T22:44:02.655892Z", "url": "https://files.pythonhosted.org/packages/0e/17/1b5aa50ef413ec94b5501f9f4b9e8704a0be18dbbbf33ebb2d4cc660d521/aiomongodel-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d059d19fe814f79ae4843e896cee13a5", "sha256": "a4ec4f4138b7040793486764f3cbdefd579615b4b5b09f0b17a4698b912356d0"}, "downloads": -1, "filename": "aiomongodel-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d059d19fe814f79ae4843e896cee13a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18512, "upload_time": "2018-09-11T22:44:01", "upload_time_iso_8601": "2018-09-11T22:44:01.178829Z", "url": "https://files.pythonhosted.org/packages/90/c9/b47345e8f6a980056a74a8db8912622e5605f8dd42e184bc0e361a65afd4/aiomongodel-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa3c0e75785fe4e475f6e243f1bbf2d6", "sha256": "662070047b40c93e946ba37661f7fc81cfc07e1529b527e95da291d1962b3c1a"}, "downloads": -1, "filename": "aiomongodel-0.2.0.tar.gz", "has_sig": false, "md5_digest": "aa3c0e75785fe4e475f6e243f1bbf2d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21444, "upload_time": "2018-09-11T22:44:02", "upload_time_iso_8601": "2018-09-11T22:44:02.655892Z", "url": "https://files.pythonhosted.org/packages/0e/17/1b5aa50ef413ec94b5501f9f4b9e8704a0be18dbbbf33ebb2d4cc660d521/aiomongodel-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:04 2020"}