{"info": {"author": "Frederic MARTIN", "author_email": "frederic.martin.fma@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "Argtoolbox\n==========\n\nDescription\n-----------\n\nIt helps to build a command line tool with argparse module.\nIt also use ConfigParser module to store default values into a\nconfiguration file store in your profile.\n\nIt checks the data type, if it is required, etc... without repeat your\nconstraint once for the config file, and another time for the cli parser.\nUsefull trick, data store in the configuration file can be used as the\ndefault value of the argparse argument.\n\nThis lets you focus on the command you want to do, not the input processing\n(cli or config file)\n\nEvery program build with this tool have auto complete support on options and\narguments through argcomplete module.\n\n\nInstallation\n------------\n\nYou can install this module using : ``pip install argtoolbox``.\n\n\nQuickStart : Very Basic Usage\n-----------------------------\n\n1. Imports :\n~~~~~~~~~~~~\n\nFirst of all, you just need the following classes to build your own script :\n\n* **DefaultCommand :** The default class to extend in order to create your own\n  command class.\n\n* **BasicProgram :** The most simple program to run your command classes.\n\n\n2. Declaration :\n~~~~~~~~~~~~~~~~\n\nThere is a script called sample-program.py which contains all the following\nlines of code.\n\n1. First you have to create your command class TestCommand. (**Step 1**)\n2. In the ``__call__`` method, you can do every thing you want. The first and only\n   arg of this method is the args object created by Argparse.parser. (**Step 2**)\n3. You create an other class MyProgram (which extends the BasicProgram) (**Step 3**)\n4. Now you create your  ``argparse.parser`` and your declare your argument, option and command. (**Step 4**)\n5. Finally you just have to instanciate your class MyProgram and run it. (**Step 5**).\n\n\n.. code-block:: python\n\n    #! /usr/bin/env python2\n    # -*- coding: utf-8 -*-\n    # PYTHON_ARGCOMPLETE_OK\n\n\n    from argtoolbox import DefaultCommand\n    from argtoolbox import BasicProgram\n\n    # Step 1\n    class TestCommand(DefaultCommand):\n        \"\"\"Just a simple command, using the default command class.\n        It will print the inputs args to stdout\"\"\"\n\n        def __call__(self, args):\n            super(TestCommand, self).__call__(args)\n            # Step 2\n            print \"\"\n            print \"This is the beginning of the TestCommand class.\"\n            print \"The command line arguments (argv) :\"\n            print \"-----------------------------------\"\n            print \"\"\n            print \"This is the end of the TestCommand class.\"\n            print \"\"\n\n    # Step 3\n    class MyProgram(BasicProgram):\n\n        def add_commands(self):\n            # Step 4\n            subparsers = self.parser.add_subparsers()\n            parser_tmp = subparsers.add_parser(\n                'test',\n                help=\"This command will print cli argv and configuration read \\\n                from the config file.\")\n            parser_tmp.add_argument('--host', required=True)\n            parser_tmp.add_argument('--port', default=3000)\n            parser_tmp.set_defaults(__func__=TestCommand(self.config))\n\n\n    # Step 5\n    if __name__ == \"__main__\":\n\n        PROG = MyProgram(\"sample-program\",\n                            desc=\"\"\"Just a description for a sample program.\"\"\")\n        PROG()\n\n\n\n3. Utilisation :\n~~~~~~~~~~~~~~~~\n\nNow you can show the help menu using the following command :\n\n``$ ./sample-program.py test -h``\n\n**Console ouput :**\n\n.. code-block:: python\n\n    usage: sample-program test [-h] --host HOST [--port PORT]\n\n    optional arguments:\n      -h, --help   show this help message and exit\n      --host HOST\n      --port PORT\n\nOr run your command :\n\n``$  ./sample-program.py test --host 127.0.0.1``\n\n**Console ouput :**\n\n.. code-block:: python\n\n    This is the beginning of the TestCommand class.\n    The command line arguments (argv) :\n    -----------------------------------\n    Namespace(__func__=<__main__.TestCommand object at 0xb721a92c>,\n    config_file=None, host='127.0.0.1', port=3000, verbose=False)\n\n    This is the end of the TestCommand class.\n\nYou can see the variable ``host`` contains the input message ``127.0.0.1`` into the\nargs object.\nThe option ``port`` contains the default value ``3000``.\n\n\nAdvanced usage\n--------------\n\nAt this point, this program does not do much more than the argparse module can\ndo.\nIn the cas you have a lot of command and option, it could be usefull to store\ndefault values in a configuration file like ``sample-program.cfg``\n\n\n4. Imports :\n~~~~~~~~~~~~\n\nFirst of all, you just need the following classes to build your own script :\n\n* **TestCommand :** This command class will print to stdout the inputs args and\n  the configuration file content.\n\n* **BasicProgram :** The most simple program to run your command classes.\n\n* **SimpleSection :** This class is used to declare a Section in the config file\n  (ConfigFile)\n\n* **Element :** This class is used to declare an Option (a field) in the\n  previous section.\n\n* **Base64ElementHook :** This hook is used as a post reading processing in\n  order to convert base64 data stored into the config file into plain text data.\n\n\n\n5. Declaration :\n~~~~~~~~~~~~~~~~\n\nThere is a script called sample-program2.py which contains all the following\nlines of code.\n\n\n#. Instead of creating a config file, we will use an in-memory config file\n   (**Step 1**)\n#. You create an other class MyProgram (which extends the BasicProgram) (**Step\n   2**)\n#. We override the default method called ``add_config_options``. (**Step 3**)\n#. We declare the section named ``ldap`` that we are looking for.\n#. We declare all the fields store into the previous section. For each fied, you can says if it is required, the default value, the type, an optional description. See the documentatino for more details. (**Step 5**).\n#. The we declare all argparse arguments using the previous configuration declaration. This is very usefull because the data store into the configuration file are used as the default value for the argparse argument. The description, the type, required or not, ... declared in the ``add_config_options`` method are used to configure the parser argument. No need to repeat your self. (**Step 6**)\n#. Declaration of the ``test`` argument using TestCommand class. (**Step 7**)\n#. Finally you just have to instanciate your class MyProgram, the first argument is the program name. (**Step 8**)\n#. We override the default config file name ``'.<program name>.cfg'``. (**Step 9**)\n#. We launch the program. (**Step 10**)\n\n\n.. code-block:: python\n\n    #! /usr/bin/env python2\n    # -*- coding: utf-8 -*-\n    # PYTHON_ARGCOMPLETE_OK\n\n    import io\n    from argtoolbox import TestCommand\n    from argtoolbox import BasicProgram\n    from argtoolbox import SimpleSection, Element, Base64ElementHook\n\n    # Step 1\n    SAMPLE_CONFIG = \"\"\"\n    [ldap]\n\n    host=127.0.0.1\n    port=389\n    suffix=dc=nodomain\n    account=cn=admin,dc=nodomain\n    password=toto\n\n    \\n\"\"\"\n\n    # Step 2\n    class MyProgram(BasicProgram):\n\n        # Step 3\n        def add_config_options(self):\n            # Step 4\n            # section ldap\n            section_ldap = self.config.add_section(SimpleSection(\"ldap\"))\n            # Step 5\n            section_ldap.add_element(Element('debug',\n                                             e_type=int,\n                                             default=0,\n                                             desc=\"\"\"debug level : default : 0.\"\"\"))\n            section_ldap.add_element(Element('host',\n                                             required=True,\n                                             default=\"192.168.1.1\"))\n            section_ldap.add_element(Element('account', required=True))\n            section_ldap.add_element(Element('port', e_type=int))\n            section_ldap.add_element(Element('password',\n                                             required=True,\n                                             hidden=True,\n                                             desc=\"account password to ldap\",\n                                             hooks=[Base64ElementHook(), ]))\n\n       def add_commands(self):\n            # Step 6\n            self.parser.add_argument(\n                '--host', **self.config.ldap.host.get_arg_parse_arguments())\n            self.parser.add_argument(\n                '--port', **self.config.ldap.port.get_arg_parse_arguments())\n            self.parser.add_argument(\n                '-d',\n                action=\"count\",\n                **self.config.ldap.debug.get_arg_parse_arguments())\n\n            # Step 7\n            subparsers = self.parser.add_subparsers()\n            parser_tmp = subparsers.add_parser(\n                'test',\n                help=\"This simple command print cli argv and configuration read \\\n                form config file.\")\n            parser_tmp.set_defaults(__func__=TestCommand(self.config))\n\n\n    if __name__ \u2261 \"__main__\":\n\n        # Step 8\n        PROG = MyProgram(\"sample-program\",\n            # Step 9\n                         config_file=io.BytesIO(SAMPLE_CONFIG),\n                         desc=\"\"\"Just a description for a sample program.\"\"\")\n        # Step 10\n        PROG()\n\n6. Utilisation :\n~~~~~~~~~~~~~~~~\n\nNow you can run your command :\n\n``$ ./sample-program2.py --host an.other.host.com test``\n\n**Console ouput :**\n\n.. code-block:: python\n\n    This is the beginning of the TestCommand class.\n\n    The loaded configuration :\n    ---------------------------\n    Configuration of sample-program :\n\n            Section LDAP\n             - debug : 0\n             - host : 127.0.0.1\n             - account : cn=admin,dc=nodomain\n             - port : 389\n             - password : xxxxxxxx\n\n\n    The command line arguments (argv) :\n    ------------------------------------\n    Namespace(__func__=<argtoolbox.argtoolbox.TestCommand object at 0xb7199f8c>, config_file=None, debug=0, host='an.other.host.com', port=389, verbose=False)\n\n    This is the end of the TestCommand class.\n\nYou can see the variable ``host`` contains the input message ``an.other.host.com`` into the\nargs object. The option ``port`` contains the default value ``389``.\nYou can also acces to the values store into the configuration file like ``account`` or ``password`` which can not be override by the CLI.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fred49/argtoolbox", "keywords": "argparse ConfigFile command line interface", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "argtoolbox", "package_url": "https://pypi.org/project/argtoolbox/", "platform": "", "project_url": "https://pypi.org/project/argtoolbox/", "project_urls": {"Homepage": "https://github.com/fred49/argtoolbox"}, "release_url": "https://pypi.org/project/argtoolbox/1.1.3/", "requires_dist": null, "requires_python": "", "summary": "The easy way to create a short program with file options and command line options.", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>It helps to build a command line tool with argparse module.\nIt also use ConfigParser module to store default values into a\nconfiguration file store in your profile.</p>\n<p>It checks the data type, if it is required, etc\u2026 without repeat your\nconstraint once for the config file, and another time for the cli parser.\nUsefull trick, data store in the configuration file can be used as the\ndefault value of the argparse argument.</p>\n<p>This lets you focus on the command you want to do, not the input processing\n(cli or config file)</p>\n<p>Every program build with this tool have auto complete support on options and\narguments through argcomplete module.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install this module using : <tt>pip install argtoolbox</tt>.</p>\n</div>\n<div id=\"quickstart-very-basic-usage\">\n<h2>QuickStart : Very Basic Usage</h2>\n<div id=\"imports\">\n<h3>1. Imports :</h3>\n<p>First of all, you just need the following classes to build your own script :</p>\n<ul>\n<li><strong>DefaultCommand :</strong> The default class to extend in order to create your own\ncommand class.</li>\n<li><strong>BasicProgram :</strong> The most simple program to run your command classes.</li>\n</ul>\n</div>\n<div id=\"declaration\">\n<h3>2. Declaration :</h3>\n<p>There is a script called sample-program.py which contains all the following\nlines of code.</p>\n<ol>\n<li>First you have to create your command class TestCommand. (<strong>Step 1</strong>)</li>\n<li>In the <tt>__call__</tt> method, you can do every thing you want. The first and only\narg of this method is the args object created by Argparse.parser. (<strong>Step 2</strong>)</li>\n<li>You create an other class MyProgram (which extends the BasicProgram) (<strong>Step 3</strong>)</li>\n<li>Now you create your  <tt>argparse.parser</tt> and your declare your argument, option and command. (<strong>Step 4</strong>)</li>\n<li>Finally you just have to instanciate your class MyProgram and run it. (<strong>Step 5</strong>).</li>\n</ol>\n<pre><span class=\"ch\">#! /usr/bin/env python2</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"c1\"># PYTHON_ARGCOMPLETE_OK</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">argtoolbox</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultCommand</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argtoolbox</span> <span class=\"kn\">import</span> <span class=\"n\">BasicProgram</span>\n\n<span class=\"c1\"># Step 1</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestCommand</span><span class=\"p\">(</span><span class=\"n\">DefaultCommand</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Just a simple command, using the default command class.\n    It will print the inputs args to stdout\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TestCommand</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Step 2</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"This is the beginning of the TestCommand class.\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"The command line arguments (argv) :\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"-----------------------------------\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"This is the end of the TestCommand class.\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"c1\"># Step 3</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyProgram</span><span class=\"p\">(</span><span class=\"n\">BasicProgram</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_commands</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Step 4</span>\n        <span class=\"n\">subparsers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_subparsers</span><span class=\"p\">()</span>\n        <span class=\"n\">parser_tmp</span> <span class=\"o\">=</span> <span class=\"n\">subparsers</span><span class=\"o\">.</span><span class=\"n\">add_parser</span><span class=\"p\">(</span>\n            <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"This command will print cli argv and configuration read </span><span class=\"se\">\\\n</span><span class=\"s2\">            from the config file.\"</span><span class=\"p\">)</span>\n        <span class=\"n\">parser_tmp</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--host'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">parser_tmp</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--port'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n        <span class=\"n\">parser_tmp</span><span class=\"o\">.</span><span class=\"n\">set_defaults</span><span class=\"p\">(</span><span class=\"vm\">__func__</span><span class=\"o\">=</span><span class=\"n\">TestCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># Step 5</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n    <span class=\"n\">PROG</span> <span class=\"o\">=</span> <span class=\"n\">MyProgram</span><span class=\"p\">(</span><span class=\"s2\">\"sample-program\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"Just a description for a sample program.\"\"\"</span><span class=\"p\">)</span>\n    <span class=\"n\">PROG</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"utilisation\">\n<h3>3. Utilisation :</h3>\n<p>Now you can show the help menu using the following command :</p>\n<p><tt>$ <span class=\"pre\">./sample-program.py</span> test <span class=\"pre\">-h</span></tt></p>\n<p><strong>Console ouput :</strong></p>\n<pre><span class=\"n\">usage</span><span class=\"p\">:</span> <span class=\"n\">sample</span><span class=\"o\">-</span><span class=\"n\">program</span> <span class=\"n\">test</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">]</span> <span class=\"o\">--</span><span class=\"n\">host</span> <span class=\"n\">HOST</span> <span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">port</span> <span class=\"n\">PORT</span><span class=\"p\">]</span>\n\n<span class=\"n\">optional</span> <span class=\"n\">arguments</span><span class=\"p\">:</span>\n  <span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">help</span>   <span class=\"n\">show</span> <span class=\"n\">this</span> <span class=\"n\">help</span> <span class=\"n\">message</span> <span class=\"ow\">and</span> <span class=\"n\">exit</span>\n  <span class=\"o\">--</span><span class=\"n\">host</span> <span class=\"n\">HOST</span>\n  <span class=\"o\">--</span><span class=\"n\">port</span> <span class=\"n\">PORT</span>\n</pre>\n<p>Or run your command :</p>\n<p><tt>$\u00a0 <span class=\"pre\">./sample-program.py</span> test <span class=\"pre\">--host</span> 127.0.0.1</tt></p>\n<p><strong>Console ouput :</strong></p>\n<pre><span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">beginning</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">TestCommand</span> <span class=\"n\">class</span><span class=\"o\">.</span>\n<span class=\"n\">The</span> <span class=\"n\">command</span> <span class=\"n\">line</span> <span class=\"n\">arguments</span> <span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n<span class=\"o\">-----------------------------------</span>\n<span class=\"n\">Namespace</span><span class=\"p\">(</span><span class=\"vm\">__func__</span><span class=\"o\">=&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">TestCommand</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb721a92c</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"n\">config_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">end</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">TestCommand</span> <span class=\"n\">class</span><span class=\"o\">.</span>\n</pre>\n<p>You can see the variable <tt>host</tt> contains the input message <tt>127.0.0.1</tt> into the\nargs object.\nThe option <tt>port</tt> contains the default value <tt>3000</tt>.</p>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced usage</h2>\n<p>At this point, this program does not do much more than the argparse module can\ndo.\nIn the cas you have a lot of command and option, it could be usefull to store\ndefault values in a configuration file like <tt><span class=\"pre\">sample-program.cfg</span></tt></p>\n<div id=\"id1\">\n<h3>4. Imports :</h3>\n<p>First of all, you just need the following classes to build your own script :</p>\n<ul>\n<li><strong>TestCommand :</strong> This command class will print to stdout the inputs args and\nthe configuration file content.</li>\n<li><strong>BasicProgram :</strong> The most simple program to run your command classes.</li>\n<li><strong>SimpleSection :</strong> This class is used to declare a Section in the config file\n(ConfigFile)</li>\n<li><strong>Element :</strong> This class is used to declare an Option (a field) in the\nprevious section.</li>\n<li><strong>Base64ElementHook :</strong> This hook is used as a post reading processing in\norder to convert base64 data stored into the config file into plain text data.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>5. Declaration :</h3>\n<p>There is a script called sample-program2.py which contains all the following\nlines of code.</p>\n<ol>\n<li>Instead of creating a config file, we will use an in-memory config file\n(<strong>Step 1</strong>)</li>\n<li>You create an other class MyProgram (which extends the BasicProgram) (<strong>Step\n2</strong>)</li>\n<li>We override the default method called <tt>add_config_options</tt>. (<strong>Step 3</strong>)</li>\n<li>We declare the section named <tt>ldap</tt> that we are looking for.</li>\n<li>We declare all the fields store into the previous section. For each fied, you can says if it is required, the default value, the type, an optional description. See the documentatino for more details. (<strong>Step 5</strong>).</li>\n<li>The we declare all argparse arguments using the previous configuration declaration. This is very usefull because the data store into the configuration file are used as the default value for the argparse argument. The description, the type, required or not, \u2026 declared in the <tt>add_config_options</tt> method are used to configure the parser argument. No need to repeat your self. (<strong>Step 6</strong>)</li>\n<li>Declaration of the <tt>test</tt> argument using TestCommand class. (<strong>Step 7</strong>)</li>\n<li>Finally you just have to instanciate your class MyProgram, the first argument is the program name. (<strong>Step 8</strong>)</li>\n<li>We override the default config file name <tt><span class=\"pre\">'.&lt;program</span> <span class=\"pre\">name&gt;.cfg'</span></tt>. (<strong>Step 9</strong>)</li>\n<li>We launch the program. (<strong>Step 10</strong>)</li>\n</ol>\n<pre><span class=\"ch\">#! /usr/bin/env python2</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"c1\"># PYTHON_ARGCOMPLETE_OK</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argtoolbox</span> <span class=\"kn\">import</span> <span class=\"n\">TestCommand</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argtoolbox</span> <span class=\"kn\">import</span> <span class=\"n\">BasicProgram</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argtoolbox</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleSection</span><span class=\"p\">,</span> <span class=\"n\">Element</span><span class=\"p\">,</span> <span class=\"n\">Base64ElementHook</span>\n\n<span class=\"c1\"># Step 1</span>\n<span class=\"n\">SAMPLE_CONFIG</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n[ldap]\n\nhost=127.0.0.1\nport=389\nsuffix=dc=nodomain\naccount=cn=admin,dc=nodomain\npassword=toto\n\n</span><span class=\"se\">\\n</span><span class=\"s2\">\"\"\"</span>\n\n<span class=\"c1\"># Step 2</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyProgram</span><span class=\"p\">(</span><span class=\"n\">BasicProgram</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Step 3</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_config_options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Step 4</span>\n        <span class=\"c1\"># section ldap</span>\n        <span class=\"n\">section_ldap</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">add_section</span><span class=\"p\">(</span><span class=\"n\">SimpleSection</span><span class=\"p\">(</span><span class=\"s2\">\"ldap\"</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Step 5</span>\n        <span class=\"n\">section_ldap</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s1\">'debug'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">e_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n                                         <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                         <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"debug level : default : 0.\"\"\"</span><span class=\"p\">))</span>\n        <span class=\"n\">section_ldap</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s1\">'host'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                         <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"192.168.1.1\"</span><span class=\"p\">))</span>\n        <span class=\"n\">section_ldap</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n        <span class=\"n\">section_ldap</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"n\">e_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n        <span class=\"n\">section_ldap</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">Element</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                         <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                         <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"account password to ldap\"</span><span class=\"p\">,</span>\n                                         <span class=\"n\">hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Base64ElementHook</span><span class=\"p\">(),</span> <span class=\"p\">]))</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">add_commands</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Step 6</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s1\">'--host'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ldap</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">get_arg_parse_arguments</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s1\">'--port'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ldap</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">get_arg_parse_arguments</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s1\">'-d'</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"count\"</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ldap</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"o\">.</span><span class=\"n\">get_arg_parse_arguments</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Step 7</span>\n        <span class=\"n\">subparsers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_subparsers</span><span class=\"p\">()</span>\n        <span class=\"n\">parser_tmp</span> <span class=\"o\">=</span> <span class=\"n\">subparsers</span><span class=\"o\">.</span><span class=\"n\">add_parser</span><span class=\"p\">(</span>\n            <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"This simple command print cli argv and configuration read </span><span class=\"se\">\\\n</span><span class=\"s2\">            form config file.\"</span><span class=\"p\">)</span>\n        <span class=\"n\">parser_tmp</span><span class=\"o\">.</span><span class=\"n\">set_defaults</span><span class=\"p\">(</span><span class=\"vm\">__func__</span><span class=\"o\">=</span><span class=\"n\">TestCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"err\">\u2261</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># Step 8</span>\n    <span class=\"n\">PROG</span> <span class=\"o\">=</span> <span class=\"n\">MyProgram</span><span class=\"p\">(</span><span class=\"s2\">\"sample-program\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Step 9</span>\n                     <span class=\"n\">config_file</span><span class=\"o\">=</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">SAMPLE_CONFIG</span><span class=\"p\">),</span>\n                     <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"Just a description for a sample program.\"\"\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Step 10</span>\n    <span class=\"n\">PROG</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"id3\">\n<h3>6. Utilisation :</h3>\n<p>Now you can run your command :</p>\n<p><tt>$ <span class=\"pre\">./sample-program2.py</span> <span class=\"pre\">--host</span> an.other.host.com test</tt></p>\n<p><strong>Console ouput :</strong></p>\n<pre><span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">beginning</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">TestCommand</span> <span class=\"n\">class</span><span class=\"o\">.</span>\n\n<span class=\"n\">The</span> <span class=\"n\">loaded</span> <span class=\"n\">configuration</span> <span class=\"p\">:</span>\n<span class=\"o\">---------------------------</span>\n<span class=\"n\">Configuration</span> <span class=\"n\">of</span> <span class=\"n\">sample</span><span class=\"o\">-</span><span class=\"n\">program</span> <span class=\"p\">:</span>\n\n        <span class=\"n\">Section</span> <span class=\"n\">LDAP</span>\n         <span class=\"o\">-</span> <span class=\"n\">debug</span> <span class=\"p\">:</span> <span class=\"mi\">0</span>\n         <span class=\"o\">-</span> <span class=\"n\">host</span> <span class=\"p\">:</span> <span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span>\n         <span class=\"o\">-</span> <span class=\"n\">account</span> <span class=\"p\">:</span> <span class=\"n\">cn</span><span class=\"o\">=</span><span class=\"n\">admin</span><span class=\"p\">,</span><span class=\"n\">dc</span><span class=\"o\">=</span><span class=\"n\">nodomain</span>\n         <span class=\"o\">-</span> <span class=\"n\">port</span> <span class=\"p\">:</span> <span class=\"mi\">389</span>\n         <span class=\"o\">-</span> <span class=\"n\">password</span> <span class=\"p\">:</span> <span class=\"n\">xxxxxxxx</span>\n\n\n<span class=\"n\">The</span> <span class=\"n\">command</span> <span class=\"n\">line</span> <span class=\"n\">arguments</span> <span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n<span class=\"o\">------------------------------------</span>\n<span class=\"n\">Namespace</span><span class=\"p\">(</span><span class=\"vm\">__func__</span><span class=\"o\">=&lt;</span><span class=\"n\">argtoolbox</span><span class=\"o\">.</span><span class=\"n\">argtoolbox</span><span class=\"o\">.</span><span class=\"n\">TestCommand</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb7199f8c</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">config_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'an.other.host.com'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">389</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">end</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">TestCommand</span> <span class=\"n\">class</span><span class=\"o\">.</span>\n</pre>\n<p>You can see the variable <tt>host</tt> contains the input message <tt>an.other.host.com</tt> into the\nargs object. The option <tt>port</tt> contains the default value <tt>389</tt>.\nYou can also acces to the values store into the configuration file like <tt>account</tt> or <tt>password</tt> which can not be override by the CLI.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6930279, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "62ac1da2e725024dff072c24feda2643", "sha256": "76bcb3c9ac8b07c6a81e5bb2ae9a2fd05f78cdd938126ebe8e65c1def1f71d69"}, "downloads": -1, "filename": "argtoolbox-0.0.1.tar.gz", "has_sig": false, "md5_digest": "62ac1da2e725024dff072c24feda2643", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16819, "upload_time": "2014-03-16T01:33:14", "upload_time_iso_8601": "2014-03-16T01:33:14.174960Z", "url": "https://files.pythonhosted.org/packages/c7/c5/af73de5d2b018438a18092f033a5b3b6aa083fe608478938f65fad26e678/argtoolbox-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c667a89fc7366a0b522b9494e88011a2", "sha256": "2b86b1e8c3627cf31e06d145d3677400351efbb3b314a952a96e5518f50ca08c"}, "downloads": -1, "filename": "argtoolbox-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c667a89fc7366a0b522b9494e88011a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16822, "upload_time": "2014-03-16T01:48:08", "upload_time_iso_8601": "2014-03-16T01:48:08.733259Z", "url": "https://files.pythonhosted.org/packages/52/1a/390576f430701d2c01ca79bda42f6509cf32c14566c2d254c2265b2d1128/argtoolbox-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1ff2e25759b0c59ebf1915cc5a891aeb", "sha256": "696cad04bde0683e5ec4e64ea585fd4cd53a2b6773fad738bd3dbb6b204d989a"}, "downloads": -1, "filename": "argtoolbox-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1ff2e25759b0c59ebf1915cc5a891aeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17487, "upload_time": "2014-03-16T02:39:11", "upload_time_iso_8601": "2014-03-16T02:39:11.493680Z", "url": "https://files.pythonhosted.org/packages/ed/86/e75a524fc7a602bfb1032879d2b6daf9a775b1baa9ec52cd78f19bba9c96/argtoolbox-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "bc56e891078917177288fa2d04e8a70f", "sha256": "8e0d14fe8bf85192aa06d9b1756b3752fae94ddde119c6f600a1483397131daf"}, "downloads": -1, "filename": "argtoolbox-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bc56e891078917177288fa2d04e8a70f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18994, "upload_time": "2014-04-03T23:03:07", "upload_time_iso_8601": "2014-04-03T23:03:07.485235Z", "url": "https://files.pythonhosted.org/packages/52/e4/697d84fe4ecb335507cedfc9838f2f34d8da97fa602a5cf9e295e3ba13f4/argtoolbox-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "4522ea3df0bff01c513657f266bdefce", "sha256": "6f24d6c827bd1476c67ce593cee0838d15e92e04aa6c08dde70e11deaa1fe406"}, "downloads": -1, "filename": "argtoolbox-0.0.5.tar.gz", "has_sig": false, "md5_digest": "4522ea3df0bff01c513657f266bdefce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22414, "upload_time": "2014-05-19T23:32:46", "upload_time_iso_8601": "2014-05-19T23:32:46.077051Z", "url": "https://files.pythonhosted.org/packages/43/7d/380efa6fcfefb833c9a023f7b4d320e7904372d2c8dc5b1b168461362f58/argtoolbox-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "3928d3a7ac99c68aae6e18690043fa69", "sha256": "052b07132a44f58c8266b8236dbe05970835dd7a9c2e3ecb76051c9b08d8e9d5"}, "downloads": -1, "filename": "argtoolbox-0.0.6.tar.gz", "has_sig": false, "md5_digest": "3928d3a7ac99c68aae6e18690043fa69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22438, "upload_time": "2014-06-05T23:04:26", "upload_time_iso_8601": "2014-06-05T23:04:26.109502Z", "url": "https://files.pythonhosted.org/packages/24/7e/570131794576180276fca9533523e8238d1c50c59dd10471b300652f9e6e/argtoolbox-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "994dcbfdc088a1ded68703af1ec7aec1", "sha256": "2dd09299abd6878c89a0f8e30a072147d7e01f1b4bb04c956f80ab13c0dac26d"}, "downloads": -1, "filename": "argtoolbox-0.0.7.tar.gz", "has_sig": false, "md5_digest": "994dcbfdc088a1ded68703af1ec7aec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22841, "upload_time": "2014-06-10T23:15:59", "upload_time_iso_8601": "2014-06-10T23:15:59.493794Z", "url": "https://files.pythonhosted.org/packages/ba/12/7b1535f7e26fa9b69d2aae141a6dc9072e27222475d0a5764296292dfbff/argtoolbox-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "976340c1b2c97dc4344369627cfefe41", "sha256": "92fc6368985070fbf612b7e8a5d8d4d45068e5b260466ac7e30429cec4dc87d7"}, "downloads": -1, "filename": "argtoolbox-0.0.8.tar.gz", "has_sig": false, "md5_digest": "976340c1b2c97dc4344369627cfefe41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23128, "upload_time": "2014-08-20T23:06:18", "upload_time_iso_8601": "2014-08-20T23:06:18.446711Z", "url": "https://files.pythonhosted.org/packages/33/1b/bcb9ffc6936b54d5fe391460b4598834938b81b679af194693f847966b04/argtoolbox-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "d7039d476faf42339e005f3d54a1c722", "sha256": "6b2390d4e5425b8c14e7b0c2361a71250be50add3a9c2ea8675b239959657b6a"}, "downloads": -1, "filename": "argtoolbox-0.0.9.tar.gz", "has_sig": false, "md5_digest": "d7039d476faf42339e005f3d54a1c722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23159, "upload_time": "2014-09-26T21:53:17", "upload_time_iso_8601": "2014-09-26T21:53:17.878479Z", "url": "https://files.pythonhosted.org/packages/6e/f0/fc0efa15564bea38d47fb2a678544376fe84d9186e8d18d2e617a40682a5/argtoolbox-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "61cc048e55b3409c44cb2276cf9b5db2", "sha256": "8c24196c843e98a0e17b07dbd245c6ceb0679a7797e748996377154626389496"}, "downloads": -1, "filename": "argtoolbox-0.1.0.tar.gz", "has_sig": false, "md5_digest": "61cc048e55b3409c44cb2276cf9b5db2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23332, "upload_time": "2015-05-04T20:44:13", "upload_time_iso_8601": "2015-05-04T20:44:13.722896Z", "url": "https://files.pythonhosted.org/packages/c6/a0/a7d6dcf63cbec159a555bb32af52df443f4dbe9ffc668ddcde6c2733c593/argtoolbox-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "682a6e92cb25775289fd514e263b2e0b", "sha256": "32808956ee66a30615bd02b0a9799e678f69fd52c3b48da7707ffb071dc17747"}, "downloads": -1, "filename": "argtoolbox-0.1.1.tar.gz", "has_sig": false, "md5_digest": "682a6e92cb25775289fd514e263b2e0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23746, "upload_time": "2015-08-16T21:26:15", "upload_time_iso_8601": "2015-08-16T21:26:15.858564Z", "url": "https://files.pythonhosted.org/packages/b5/d7/5ee1a7e3378d6cfbf313c0c8cacd9db70c0feaaf5fbbeb8cb358182cec60/argtoolbox-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d054ede4ff20acb45f58fd2319cf08bd", "sha256": "d9ce90c183be0caabc6d20c66137819319d9a933b29d7c5cf50c41f74eba9863"}, "downloads": -1, "filename": "argtoolbox-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d054ede4ff20acb45f58fd2319cf08bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23921, "upload_time": "2016-02-10T22:47:19", "upload_time_iso_8601": "2016-02-10T22:47:19.087586Z", "url": "https://files.pythonhosted.org/packages/3a/20/49185d3f30a6bdf1c7cfa28dbd06587e6b58eb87cfd88cf6c3a872d84717/argtoolbox-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "cd305ae1bbea4c0a25f22e7bdc17d3ee", "sha256": "8905e4dd0fdf005f58c43eae324b9f1e34d1160ba5594c0231f475d4b5418042"}, "downloads": -1, "filename": "argtoolbox-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cd305ae1bbea4c0a25f22e7bdc17d3ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23184, "upload_time": "2019-01-12T16:17:16", "upload_time_iso_8601": "2019-01-12T16:17:16.015184Z", "url": "https://files.pythonhosted.org/packages/ee/cf/e17174a0bfefef884f7c862216aa9c63ae59c70e008e54eb26d1733b6b64/argtoolbox-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a78209ccdb4308a13b139b517cdca30a", "sha256": "3ca9478a4f7c48f49ad41af242aeb360b861b0ebf49ed63b865498334363eb11"}, "downloads": -1, "filename": "argtoolbox-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a78209ccdb4308a13b139b517cdca30a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23201, "upload_time": "2019-04-17T21:02:50", "upload_time_iso_8601": "2019-04-17T21:02:50.462842Z", "url": "https://files.pythonhosted.org/packages/72/c5/b3254de8ac673c2c4444f67d4f811dde37e49f65da65f5529b73300e1402/argtoolbox-0.1.4.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "786846e3910fd6efe1213ed111ec4a87", "sha256": "405fe9ae9349dbaf6827c4a23de56fb127c4181fd3e9b27c650f24ef18b5049a"}, "downloads": -1, "filename": "argtoolbox-0.1.6.tar.gz", "has_sig": false, "md5_digest": "786846e3910fd6efe1213ed111ec4a87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23304, "upload_time": "2019-06-24T20:11:33", "upload_time_iso_8601": "2019-06-24T20:11:33.497171Z", "url": "https://files.pythonhosted.org/packages/48/ae/7108ff5b0df91a35ef8141ace62f01ccfd9ad8b3d178579c3fb9f547be81/argtoolbox-0.1.6.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "23f3dbbd8855e7b924867e1235afaf93", "sha256": "6eb225f2c44bcee3cc194cddeadf77ae0ed05ae0418bc8124f740cc365a27ba7"}, "downloads": -1, "filename": "argtoolbox-1.0.0.tar.gz", "has_sig": false, "md5_digest": "23f3dbbd8855e7b924867e1235afaf93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23267, "upload_time": "2019-10-27T15:19:08", "upload_time_iso_8601": "2019-10-27T15:19:08.315950Z", "url": "https://files.pythonhosted.org/packages/aa/5d/e3bb1fa3c04ae71234cae79aff2b4ad7001bc2e32808d37255182f989caf/argtoolbox-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ef54ee027bdd7af99a7b21164589effa", "sha256": "7fba368d317b667a589588cbc0ed0ecf274cca8e020ebb6c88fc457c94deecb9"}, "downloads": -1, "filename": "argtoolbox-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ef54ee027bdd7af99a7b21164589effa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23275, "upload_time": "2019-10-30T18:01:23", "upload_time_iso_8601": "2019-10-30T18:01:23.496218Z", "url": "https://files.pythonhosted.org/packages/25/63/0873194b1a0b6741d33f5816edb9d4d08ebdfb860345cb1ab4497c3e4f80/argtoolbox-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "be4ea8f1ae9e3f529656b60aed1ffedc", "sha256": "ca63693e71ec927b634409c477389f34a1d3a9dab1dabc7a70a3852291d254f6"}, "downloads": -1, "filename": "argtoolbox-1.0.2.tar.gz", "has_sig": false, "md5_digest": "be4ea8f1ae9e3f529656b60aed1ffedc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23566, "upload_time": "2019-12-01T21:34:06", "upload_time_iso_8601": "2019-12-01T21:34:06.984980Z", "url": "https://files.pythonhosted.org/packages/e4/31/822d7e8aee7af523d85166d7dfabad1ec53fd46ae6892271da382b87d2bf/argtoolbox-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "0c5fa2a12e38e22b4d11d74c23769d38", "sha256": "fa5ca84dc7d8d239847e8106fc450255db734cba1950188efc49a789def13615"}, "downloads": -1, "filename": "argtoolbox-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0c5fa2a12e38e22b4d11d74c23769d38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23140, "upload_time": "2020-01-15T22:29:32", "upload_time_iso_8601": "2020-01-15T22:29:32.585661Z", "url": "https://files.pythonhosted.org/packages/c7/11/f17d6363647e9760c9cd8385bc6f7c563564a71e855da006d93a98a5f411/argtoolbox-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "7488f04b6b762e1f703645b80558630d", "sha256": "f4c3713369f8d49697dc9aabfa63e37204bc2604ecf49397e5ae87f37791a522"}, "downloads": -1, "filename": "argtoolbox-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7488f04b6b762e1f703645b80558630d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23195, "upload_time": "2020-01-15T23:19:39", "upload_time_iso_8601": "2020-01-15T23:19:39.151057Z", "url": "https://files.pythonhosted.org/packages/ed/0d/fefa8e6a3d3fc74c89b3932b17ccd85d00e76532fe083de3346c04e90d4d/argtoolbox-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "16739c6579371f567a28e2a4b357da96", "sha256": "d94a5a96133efc32ee4356b783075616f7c8438de2b6fd02398a83ebea745e1d"}, "downloads": -1, "filename": "argtoolbox-1.0.5.tar.gz", "has_sig": false, "md5_digest": "16739c6579371f567a28e2a4b357da96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23338, "upload_time": "2020-02-15T11:06:25", "upload_time_iso_8601": "2020-02-15T11:06:25.727123Z", "url": "https://files.pythonhosted.org/packages/d4/bc/7fcdaeaf4346e187cfc13a84189b01c48f31ed5c7b1c0777a6217e715382/argtoolbox-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "612e032126322497f6bbe42bfc0da592", "sha256": "d36a285ddd019c3c85c63eb58d5338016853d98f6085e32bfbadac9c7b9bfdca"}, "downloads": -1, "filename": "argtoolbox-1.1.0.tar.gz", "has_sig": false, "md5_digest": "612e032126322497f6bbe42bfc0da592", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22450, "upload_time": "2020-02-15T16:48:16", "upload_time_iso_8601": "2020-02-15T16:48:16.605918Z", "url": "https://files.pythonhosted.org/packages/07/ec/501596adf973fe79afec24828146510d4a596687809748cd8e8566a3631f/argtoolbox-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "59f5866f0a868fe42431966a2a146fae", "sha256": "082122cf1d6b9a56f3fb04f724e4efd6a53ad9e77b6b05a18a9a77106dce6fe1"}, "downloads": -1, "filename": "argtoolbox-1.1.1.tar.gz", "has_sig": false, "md5_digest": "59f5866f0a868fe42431966a2a146fae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22488, "upload_time": "2020-03-23T11:22:47", "upload_time_iso_8601": "2020-03-23T11:22:47.988266Z", "url": "https://files.pythonhosted.org/packages/a4/61/c7ef368a6b0eb182df6770fe8aa9d1f0a6a706f5adcdee9a01b8fc88fbe9/argtoolbox-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "ef3e9fe81ff45c70e8837ccea6a4b620", "sha256": "941680480f60fecb5f10aba24da4ee4d2abdee7dc33c85988396aac589e47415"}, "downloads": -1, "filename": "argtoolbox-1.1.2.tar.gz", "has_sig": false, "md5_digest": "ef3e9fe81ff45c70e8837ccea6a4b620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22503, "upload_time": "2020-03-26T20:07:52", "upload_time_iso_8601": "2020-03-26T20:07:52.166839Z", "url": "https://files.pythonhosted.org/packages/a4/4c/e9bdbe0277a8c410e41c37c8d70954c244973ab9925627ca586e7f3b36d9/argtoolbox-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "03c6010c536cade2b062082604f90130", "sha256": "ae6125a2781a0b9069268c074200acf8093da938e8eaeddcba8b467ae16a7f29"}, "downloads": -1, "filename": "argtoolbox-1.1.3.tar.gz", "has_sig": false, "md5_digest": "03c6010c536cade2b062082604f90130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22837, "upload_time": "2020-04-01T19:36:35", "upload_time_iso_8601": "2020-04-01T19:36:35.259104Z", "url": "https://files.pythonhosted.org/packages/0c/8f/fd43dddb349feeabd0d922c167e084abca1d1bf6f3e3320d3315f339c8bd/argtoolbox-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03c6010c536cade2b062082604f90130", "sha256": "ae6125a2781a0b9069268c074200acf8093da938e8eaeddcba8b467ae16a7f29"}, "downloads": -1, "filename": "argtoolbox-1.1.3.tar.gz", "has_sig": false, "md5_digest": "03c6010c536cade2b062082604f90130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22837, "upload_time": "2020-04-01T19:36:35", "upload_time_iso_8601": "2020-04-01T19:36:35.259104Z", "url": "https://files.pythonhosted.org/packages/0c/8f/fd43dddb349feeabd0d922c167e084abca1d1bf6f3e3320d3315f339c8bd/argtoolbox-1.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:16 2020"}