{"info": {"author": "Jason Moiron", "author_email": "jmoiron@jmoiron.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries", "Topic :: Text Processing :: Markup :: HTML"], "description": "argot text markup -- a markdown dialect\n=======================================\n\nArgot is a small set of extensions on the markdown_ markup language designed\nprimarily for writing technical blog entries.  The extensions are not \n\"proper\" markdown extensions;  they are implemented as preprocessors that\ncompile down into markdown or html syntax.  In addition to markdown's regular \nsyntax, which argot does not interfere with, argot provides these features:\n\n* `moin-style highlighted code blocks`_\n* `blockquote blocks`_\n* `link target processors`_\n\nYou can install argot with pip::\n\n    pip install argot\n\nYou can fork argot `from its hg repository \n<http://bitbucket.org/jmoiron/argot/>`_::\n\n    hg clone http://bitbucket.org/jmoiron/argot/\n\n.. _markdown: http://daringfireball.net/projects/markdown/\n\nrequirements\n------------\n\n``argot`` requires markdown and pygments.  The optional amazon link processor,\ndisabled by default, requires lxml.\n\nversion 0.6 notes\n-----------------\n\nVersion 0.6 of argot adds some functionality to the `argot` script, allowing\nyou to easily create full HTML documents (*with* pygments styling) from\nargot markup in one easy command.\n\nVersion 0.6 of argot *is backwards compatible* with version 0.5, but maintains\nthe blockquote blocks which makes it incompatible with versions previous to\n0.5.  If you are using a version older than 0.5 and wish to upgrade, please\nconsult the README.rst file in 0.5 for a full list of incompatabilities.\n\nmoin-style highlighted code blocks\n----------------------------------\n\nIn markdown, code blocks are blocks of text one level of indentation removed\nfrom the body text.  However, when dealing with more primative browser input\nmechanisms, indenting lots of text can be problematic (as ``tab`` often shifts\ninput focus).  In addition to allowing for this convention, ``argot`` implements\nmoin/tracwiki style code blocks that feature syntax highlighting via pygments.\n\nsyntax\n~~~~~~\n\nThe general syntax is '{{{' followed by an optional shebang and desired\npygments parser, followed by your code block, and bookended with '}}}'::\n\n    {{{#!parser\n        ... code ...\n    }}}\n\nBy default, if no parser is provided, ``argot`` uses pygments to try and guess\nwhat language is being used.  It falls back to the plain text lexer.  If you\nwant to force the text lexer, use a lexer of ``text``.\n\nblockquote blocks\n-----------------\n\nLike the moin-style highlighted code blocks, blockquote blocks are primarily\nintended for easy cut/paste insertion of quoted blocks into a body.  \n\nsyntax\n~~~~~~\n\nThe syntax for blockquote blocks is similar to that of the code blocks, except\nthat parens are used instead of braces::\n\n    (((\"citation url\"\n    quoted text\n    )))\n\nThe quoted text is converted to HTML via regular markdown syntax rules.\nNesting blockquote blocks is not supported.  The optional citation url can be\nsurrounded in single quotes (``'``) or double quotes (``\"``).\n\nlink target processors\n----------------------\n\nMarkdown links are in the style of ``[link text](url)``, but this will often\ninterrupt writing with digging around for urls that might be complex or even\nunknown.  Rather than linking to urls, ``argot`` allows you to encode the\ntarget information in customizable ways.\n\nsyntax\n~~~~~~\n\nLink processors are made up of the processor tag, followed by a colon, \nfollowed by a query for that processor.  For example::\n\n    [Quick reStructured Text](google: restructured text quick ref)\n\nThis calls the link processor `google` with the query `restructured text\nquick ref`.  By default, only the link processor `google` is enabled.  There\nis an `amazon` link processor that can be enabled, but it is suggested that\nfor stable queries you append 'amazon' to google queries.\n\nsetting a google referer\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nGoogle's ajax search API (which the link processor uses) requires that you\nset a referer url.  If you set a google referer, Argot will fetch the first\nlink and use that url directly::\n\n    from argot import set_google_referer\n    set_google_referer('http://example.com')\n\nBy default, the google link processor will return a url to an \"I'm feeling\nlucky\" google search page, which will then forward to the first search result.\nIt's highly recommended that you cache the results of your argot rendering as\nsearching google for each url every time a page is loaded will be extremely\nslow.\n\nwriting new link processors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLink processors are functions that take a single argument, the `query` as a\nstring, and return another string::\n\n    def wiki_processor(query):\n        return google_processor('wikipedia %s' % query)\n    argot.enable_link_processor(wiki_processor)\n\nThis hypothetical wiki processor merely does a google search for 'wikipedia'\nand the query provided.  The tag for the processor can be provided in 3 ways:\n\n* the name of the function before the first underscore\n* a ``tag`` attribute on the function\n* an optional second argument to ``enable_link_processor``\n\nargot command line tool\n-----------------------\n\nLike ``markdown``, argot ships with a command line tool that will convert\ntext files to html called ``argot``.  It's usage is::\n\n    Usage: argot [options] file\n    \n    Options:\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n      -r REFERER, --referer=REFERER\n                            http referer for google link parser\n      -d, --document        render as full html document\n      -t TITLE, --title=TITLE\n                            title to use in HEAD (implies -d)\n      -s STYLE, --style=STYLE\n                            pygments style to use\n\nWith the ``-d`` option, argot will create a full HTML document with the\nspecified pygments style (defaults to ``default``).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/jmoiron/argot/", "keywords": "html markup markdown", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Argot", "package_url": "https://pypi.org/project/Argot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Argot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/jmoiron/argot/"}, "release_url": "https://pypi.org/project/Argot/0.6/", "requires_dist": null, "requires_python": null, "summary": "argot text markup -- a markdown dialect", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Argot is a small set of extensions on the <a href=\"http://daringfireball.net/projects/markdown/\" rel=\"nofollow\">markdown</a> markup language designed\nprimarily for writing technical blog entries.  The extensions are not\n\u201cproper\u201d markdown extensions;  they are implemented as preprocessors that\ncompile down into markdown or html syntax.  In addition to markdown\u2019s regular\nsyntax, which argot does not interfere with, argot provides these features:</p>\n<ul>\n<li><a href=\"#moin-style-highlighted-code-blocks\" rel=\"nofollow\">moin-style highlighted code blocks</a></li>\n<li><a href=\"#blockquote-blocks\" rel=\"nofollow\">blockquote blocks</a></li>\n<li><a href=\"#link-target-processors\" rel=\"nofollow\">link target processors</a></li>\n</ul>\n<p>You can install argot with pip:</p>\n<pre>pip install argot\n</pre>\n<p>You can fork argot <a href=\"http://bitbucket.org/jmoiron/argot/\" rel=\"nofollow\">from its hg repository</a>:</p>\n<pre>hg clone http://bitbucket.org/jmoiron/argot/\n</pre>\n<div id=\"requirements\">\n<h2>requirements</h2>\n<p><tt>argot</tt> requires markdown and pygments.  The optional amazon link processor,\ndisabled by default, requires lxml.</p>\n</div>\n<div id=\"version-0-6-notes\">\n<h2>version 0.6 notes</h2>\n<p>Version 0.6 of argot adds some functionality to the <cite>argot</cite> script, allowing\nyou to easily create full HTML documents (<em>with</em> pygments styling) from\nargot markup in one easy command.</p>\n<p>Version 0.6 of argot <em>is backwards compatible</em> with version 0.5, but maintains\nthe blockquote blocks which makes it incompatible with versions previous to\n0.5.  If you are using a version older than 0.5 and wish to upgrade, please\nconsult the README.rst file in 0.5 for a full list of incompatabilities.</p>\n</div>\n<div id=\"moin-style-highlighted-code-blocks\">\n<h2>moin-style highlighted code blocks</h2>\n<p>In markdown, code blocks are blocks of text one level of indentation removed\nfrom the body text.  However, when dealing with more primative browser input\nmechanisms, indenting lots of text can be problematic (as <tt>tab</tt> often shifts\ninput focus).  In addition to allowing for this convention, <tt>argot</tt> implements\nmoin/tracwiki style code blocks that feature syntax highlighting via pygments.</p>\n<div id=\"syntax\">\n<h3>syntax</h3>\n<p>The general syntax is \u2018{{{\u2018 followed by an optional shebang and desired\npygments parser, followed by your code block, and bookended with \u2018}}}\u2019:</p>\n<pre>{{{#!parser\n    ... code ...\n}}}\n</pre>\n<p>By default, if no parser is provided, <tt>argot</tt> uses pygments to try and guess\nwhat language is being used.  It falls back to the plain text lexer.  If you\nwant to force the text lexer, use a lexer of <tt>text</tt>.</p>\n</div>\n</div>\n<div id=\"blockquote-blocks\">\n<h2>blockquote blocks</h2>\n<p>Like the moin-style highlighted code blocks, blockquote blocks are primarily\nintended for easy cut/paste insertion of quoted blocks into a body.</p>\n<div id=\"id1\">\n<h3>syntax</h3>\n<p>The syntax for blockquote blocks is similar to that of the code blocks, except\nthat parens are used instead of braces:</p>\n<pre>(((\"citation url\"\nquoted text\n)))\n</pre>\n<p>The quoted text is converted to HTML via regular markdown syntax rules.\nNesting blockquote blocks is not supported.  The optional citation url can be\nsurrounded in single quotes (<tt>'</tt>) or double quotes (<tt>\"</tt>).</p>\n</div>\n</div>\n<div id=\"link-target-processors\">\n<h2>link target processors</h2>\n<p>Markdown links are in the style of <tt>[link <span class=\"pre\">text](url)</span></tt>, but this will often\ninterrupt writing with digging around for urls that might be complex or even\nunknown.  Rather than linking to urls, <tt>argot</tt> allows you to encode the\ntarget information in customizable ways.</p>\n<div id=\"id2\">\n<h3>syntax</h3>\n<p>Link processors are made up of the processor tag, followed by a colon,\nfollowed by a query for that processor.  For example:</p>\n<pre>[Quick reStructured Text](google: restructured text quick ref)\n</pre>\n<p>This calls the link processor <cite>google</cite> with the query <cite>restructured text\nquick ref</cite>.  By default, only the link processor <cite>google</cite> is enabled.  There\nis an <cite>amazon</cite> link processor that can be enabled, but it is suggested that\nfor stable queries you append \u2018amazon\u2019 to google queries.</p>\n</div>\n<div id=\"setting-a-google-referer\">\n<h3>setting a google referer</h3>\n<p>Google\u2019s ajax search API (which the link processor uses) requires that you\nset a referer url.  If you set a google referer, Argot will fetch the first\nlink and use that url directly:</p>\n<pre>from argot import set_google_referer\nset_google_referer('http://example.com')\n</pre>\n<p>By default, the google link processor will return a url to an \u201cI\u2019m feeling\nlucky\u201d google search page, which will then forward to the first search result.\nIt\u2019s highly recommended that you cache the results of your argot rendering as\nsearching google for each url every time a page is loaded will be extremely\nslow.</p>\n</div>\n<div id=\"writing-new-link-processors\">\n<h3>writing new link processors</h3>\n<p>Link processors are functions that take a single argument, the <cite>query</cite> as a\nstring, and return another string:</p>\n<pre>def wiki_processor(query):\n    return google_processor('wikipedia %s' % query)\nargot.enable_link_processor(wiki_processor)\n</pre>\n<p>This hypothetical wiki processor merely does a google search for \u2018wikipedia\u2019\nand the query provided.  The tag for the processor can be provided in 3 ways:</p>\n<ul>\n<li>the name of the function before the first underscore</li>\n<li>a <tt>tag</tt> attribute on the function</li>\n<li>an optional second argument to <tt>enable_link_processor</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"argot-command-line-tool\">\n<h2>argot command line tool</h2>\n<p>Like <tt>markdown</tt>, argot ships with a command line tool that will convert\ntext files to html called <tt>argot</tt>.  It\u2019s usage is:</p>\n<pre>Usage: argot [options] file\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -r REFERER, --referer=REFERER\n                        http referer for google link parser\n  -d, --document        render as full html document\n  -t TITLE, --title=TITLE\n                        title to use in HEAD (implies -d)\n  -s STYLE, --style=STYLE\n                        pygments style to use\n</pre>\n<p>With the <tt><span class=\"pre\">-d</span></tt> option, argot will create a full HTML document with the\nspecified pygments style (defaults to <tt>default</tt>).</p>\n</div>\n\n          </div>"}, "last_serial": 783782, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "fbbe41118d900880753a3ab824b9c3ea", "sha256": "daee26e3a3da9c0120ddc83ff7471939625bfaa224222f47fb1fbeeb97c50ff8"}, "downloads": -1, "filename": "Argot-0.3-py2.5.egg", "has_sig": false, "md5_digest": "fbbe41118d900880753a3ab824b9c3ea", "packagetype": "bdist_egg", "python_version": "any", "requires_python": null, "size": 16360, "upload_time": "2009-06-15T02:02:26", "upload_time_iso_8601": "2009-06-15T02:02:26.769534Z", "url": "https://files.pythonhosted.org/packages/21/c1/a4c3e7938e2e0ca3f9ea790c44afeec5dd996c9d67c1cdaa19e120bf1876/Argot-0.3-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4eddfe303bf9d941aa1d928061ab81fd", "sha256": "ac6ce2dd15840aab71a84c6a8807775e92b6e48863d62c2b84c8511b329ca32e"}, "downloads": -1, "filename": "Argot-0.3-py2.6.egg", "has_sig": false, "md5_digest": "4eddfe303bf9d941aa1d928061ab81fd", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 16326, "upload_time": "2009-06-19T03:14:49", "upload_time_iso_8601": "2009-06-19T03:14:49.876943Z", "url": "https://files.pythonhosted.org/packages/d3/16/c180127dcf5d2d1aec2a769c2ca9a0dc08e3e5d2e64114640a506c62cc16/Argot-0.3-py2.6.egg", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c7dad3430c36c183b1d86471d3ca9316", "sha256": "49a93efd04327c21b9853dd3f9238c90e303743f43f9581e3ea42650a6308238"}, "downloads": -1, "filename": "Argot-0.4.tar.gz", "has_sig": false, "md5_digest": "c7dad3430c36c183b1d86471d3ca9316", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8793, "upload_time": "2010-02-26T04:22:10", "upload_time_iso_8601": "2010-02-26T04:22:10.815614Z", "url": "https://files.pythonhosted.org/packages/17/58/aa2a0271bafbb3474a77aa4de28255b39148d647e157405e00ab0936aa2b/Argot-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "2f8bdbe8d658cd685d72e4a650f7a8d5", "sha256": "b4f60990184fbc271f95c2399f2ae5e031ca12054d22d81a9b75248cc4b275b6"}, "downloads": -1, "filename": "Argot-0.5.tar.gz", "has_sig": false, "md5_digest": "2f8bdbe8d658cd685d72e4a650f7a8d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8390, "upload_time": "2010-03-16T12:41:40", "upload_time_iso_8601": "2010-03-16T12:41:40.511780Z", "url": "https://files.pythonhosted.org/packages/01/32/7ac70441e271d228cf6bef6939e36155db02b52f0ac8b42b5ba72fe9b32f/Argot-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "73a7e727e204d8bf9764e1484f6b16af", "sha256": "8f64a8c50a4f2022424e607509743343c0a752ad3504007847a31d808d66bd59"}, "downloads": -1, "filename": "Argot-0.5.1.tar.gz", "has_sig": false, "md5_digest": "73a7e727e204d8bf9764e1484f6b16af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8794, "upload_time": "2010-04-03T05:03:13", "upload_time_iso_8601": "2010-04-03T05:03:13.473378Z", "url": "https://files.pythonhosted.org/packages/d6/e5/e77f3d113f8767cf0e89e115869db080e8175207619f66320dcec855c89c/Argot-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "74739a2a705c374e1b2442bbd6afebc2", "sha256": "c49e977174e602c22bedb21d57706a77442222f573b0c49694ded86ed2322e1e"}, "downloads": -1, "filename": "Argot-0.5.2.tar.gz", "has_sig": false, "md5_digest": "74739a2a705c374e1b2442bbd6afebc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8757, "upload_time": "2010-04-03T05:03:58", "upload_time_iso_8601": "2010-04-03T05:03:58.102381Z", "url": "https://files.pythonhosted.org/packages/26/a9/c1bc92286b6ba5d10e7dbd90137bd3b4db883a62484aa40009c185614477/Argot-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "4e195aa011f4cb87a90963b60ff0e3ed", "sha256": "eb0efb232d32c7ccb65e535b36502e1fff893772102781dff92b345cbc545852"}, "downloads": -1, "filename": "Argot-0.5.3.tar.gz", "has_sig": false, "md5_digest": "4e195aa011f4cb87a90963b60ff0e3ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8767, "upload_time": "2010-05-16T05:15:32", "upload_time_iso_8601": "2010-05-16T05:15:32.951817Z", "url": "https://files.pythonhosted.org/packages/fd/f4/625326584d6b120c01d414d9f451627837ec4baa532b92636c5028b03181/Argot-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "42b7ad23b8f4bbb7080e564aebc2ef16", "sha256": "3642963075fbee9dd51bab6e21bc6bd2bc1b52b7943775f4c8ece65b1129e9a0"}, "downloads": -1, "filename": "Argot-0.5.4.tar.gz", "has_sig": false, "md5_digest": "42b7ad23b8f4bbb7080e564aebc2ef16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9583, "upload_time": "2010-05-16T05:30:17", "upload_time_iso_8601": "2010-05-16T05:30:17.899885Z", "url": "https://files.pythonhosted.org/packages/69/f5/73f9b910d3a1a73fc4b8d924a93277728cb5c876255836d2a1a553c93ef2/Argot-0.5.4.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "797c5a37ef01537dc855adad6c37dc79", "sha256": "6274944c132c30ae80c1b41cbd161859ba1c211623a6de08ea7ad5fed941af06"}, "downloads": -1, "filename": "Argot-0.6.tar.gz", "has_sig": false, "md5_digest": "797c5a37ef01537dc855adad6c37dc79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10030, "upload_time": "2010-11-04T00:16:27", "upload_time_iso_8601": "2010-11-04T00:16:27.969874Z", "url": "https://files.pythonhosted.org/packages/c6/58/a6a6408f530d3d22e002616558a47280e84c30a00e30ca06d15c15ddc652/Argot-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "797c5a37ef01537dc855adad6c37dc79", "sha256": "6274944c132c30ae80c1b41cbd161859ba1c211623a6de08ea7ad5fed941af06"}, "downloads": -1, "filename": "Argot-0.6.tar.gz", "has_sig": false, "md5_digest": "797c5a37ef01537dc855adad6c37dc79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10030, "upload_time": "2010-11-04T00:16:27", "upload_time_iso_8601": "2010-11-04T00:16:27.969874Z", "url": "https://files.pythonhosted.org/packages/c6/58/a6a6408f530d3d22e002616558a47280e84c30a00e30ca06d15c15ddc652/Argot-0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:18 2020"}