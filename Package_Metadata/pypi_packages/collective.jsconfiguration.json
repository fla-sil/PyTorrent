{"info": {"author": "keul", "author_email": "luca@keul.it", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.2", "Framework :: Plone :: 4.3", "Intended Audience :: Developers", "Programming Language :: Python"], "description": ".. contents:: **Table of contents**\n\nIntroduction\n============\n\nThis product is targeted to developer who need to distribute JavaScript configuration data or\ni18n strings with their Plone products.\n\nData injected in the page could be taken from whatever server side configuration setting you want\nbut most of the time you want to read application configuration from the Plone registry and translations\nfrom page templates.\n\nHow it works\n============\n\nA new viewlet will be registered in the HTML head of the site. This viewlet is normally empty and will\ndo nothing until a 3rd party product will register new ``IJSDataProvider`` adapters.\n\nThere are three subtypes of adapters, choosing one of them depends on what you want to reach in your\nadd-on.\n\nRegistering *named adapters* is recommended, in that way override the registration with a more\nspecific ones will be possible.\nIn the case of ``IJSObjectDataProvider`` the name is required because it's used as name of the defined\nvariable (see below).\n\nIJSONDataProvider\n-----------------\n\nUse it when you want to add new JavaScript data in the form of a JSON *template*.\n\nThe adapter must be a callable object that return a string that could be threat as a JSON\nstring. It will be added to the page in a ``script`` of type \"text/collective.jsconfiguration.json\".\n\nFor example:\n\n.. code-block:: xml\n\n    <script type=\"text/collective.jsconfiguration.json\"\n            id=\"your_adapter_name_if_any\">\n        {\"foo\": ... }\n    </script>\n\nIt's not a duty of this package telling you how to read the data, but for example you could do something\nlike this:\n\n.. code-block:: javascript\n\n    var configuration = $.parseJSON($('#your_adapter_name_if_any').text());\n\nIDOMDataProvider\n----------------\n\nUse it when you want to add new JavaScript data in the form of XML nodes.\n\nThe adapter must be a callable object that return something you want to be put inside the page.\nIt will be added to the page in a ``script`` of type \"text/collective.jsconfiguration.xml\".\n\nAn example:\n\n.. code-block:: xml\n\n    <script type=\"text/collective.jsconfiguration.xml\"\n            id=\"your_adapter_name_if_any\">\n        <foo data-i18n-label1=\"Benvenuto\"\n             data-i18n-label2=\"Questo \u00e8 un esempio di traduzione\">\n             ...\n        </foo>\n    </script>\n\nAlthough there's no real limitation in using this provider, it has been designed for injecting\nXML sub-DOM.\nIf the callable use a template to render it's content you can use a browser view.\nThis can be *really* useful for internationalization of your JavaScript interface (because\nyou can then rely on Zope i18n support and tools like `i18ndude`__).\n\n__ http://pypi.python.org/pypi/i18ndude\n\nReading the translation string from JavaScript will be really simple:\n\n.. code-block:: javascript\n\n    var label1 = $($('#your_adapter_name_if_any').text()).attr('data-i18n-label1');\n    var label2 = $($('#your_adapter_name_if_any').text()).attr('data-i18n-label2');\n\nIJSObjectDataProvider\n---------------------\n\nUse it when you want to add new JavaScript data in the form of a plain JavaScript object\nassigned to a variable. For this reason the data will be used in a standard ``script``\ntag.\n\nThis is very similar to the ``IJSONDataProvider`` above (the callable must return a valid JSON string)\nbut with some important differences:\n\n* a name for the adapter is required\n* the name of the adapter will be used as variable name to which the data will be assigned\n\nIf the name will be dotted, a nested JavaScript objects structure will be created.\n\nAn example for an adapter called \"``foo.bar``\":\n\n.. code-block:: html\n\n    <script type=\"text/javascript\">\n    if (typeof foo==='undefined') {\n        foo = {};\n    }\n    \n    foo.bar = {\"baz\": \"Hello World\"};\n    </script>\n\nWhile the use of ``IJSONDataProvider`` will not include new JavaScript data in the JavaScript global\nnamespace but leave to developer the access to the new data, using ``IJSObjectDataProvider`` you are\ndirectly adding new data to the JavaScript environment:\n\n.. code-block:: javascript\n\n    alert(foo.bar.baz); // whil be \"Hello World\"\n\nRegistering a new configuration\n===============================\n\nWhatever is your choice, you simply need to register an adapter that adapts the **current context**,\nthe **request** and the **current view**.\n\nAn example:\n\n.. code-block:: xml\n\n   <adapter\n       factory=\"your.package.adapter.YourXMLAdapter\"\n       provides=\"collective.jsconfiguration.interfaces.IDOMDataProvider\"\n       for=\"* * *\"\n       name=\"your_zml_configuration\"\n       />\n\nIn the example above the configuration will be added to every page of the site.\n\n.. code-block:: xml\n\n   <adapter\n       factory=\"your.package.adapter.AnotherXMLAdapter\"\n       provides=\"collective.jsconfiguration.interfaces.IDOMDataProvider\"\n       for=\"Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot\n            your.package.browser.interfaces.IYourProductLayer\n            your.package.browser.interfaces.IYourSpecialView\"\n       name=\"your_zml_configuration\"\n       />\n\nIn the last example another configuration will only added to the site root, only when a 3rd party browser\nlayers is registered (commonly: your add-on product is installed) and only when a specific view is called.\n\nAs far as the adapter registration is using the same name of the first example, the last registration will\noverride the first when applicable.\n\nFinally, there's the adapter class:\n\n.. code-block:: python\n\n    class YourXMLAdapter(object):\n        implements(IDOMDataProvider)\n        \n        def __init__(self, context, request, view):\n            self.context = context\n            self.request = request\n            self.view = view\n            \n        def __call__(self):\n            ...\n\nWhen using ``IJSONDataProvider`` or ``IJSObjectDataProvider`` and you want to directly read data from the\nPlone registry, you can rely on `collective.regjsonify`__ package, that can quickly help you in this task:\n\n.. code-block:: python\n\n    from collective.regjsonify.interfaces import IJSONifier\n    from collective.jsconfiguration.interfaces import IJSONDataProvider\n    from plone.registry.interfaces import IRegistry\n    from zope.interface import implements\n\n    class YourXMLAdapter(object):\n        implements(IJSONDataProvider)\n        \n        def __init__(self, context, request, view):\n            self.context = context\n            self.request = request\n            self.view = view\n            \n        def __call__(self):\n            registry = queryUtility(IRegistry)\n            settings = registry.forInterface(IMyRegistrySettings)\n            return IJSONifier(settings).json()\n\n__ http://github.com/keul/collective.regjsonify\n\nExample application\n===================\n\nYou can find all those features in action in the `collective.externalizelink`__ Plone add-on.\n\n__  https://github.com/keul/collective.externalizelink\n\nChangelog\n=========\n\n0.1.1 (2015-08-25)\n------------------\n\n- ``IJSONDataProvider`` was masking HTML like output \n  [keul]\n- Tests were broken\n  [keul]\n\n0.1.0 (2014-05-02)\n------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/keul/collective.jsconfiguration", "keywords": "plone javascript configuration i18n", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.jsconfiguration", "package_url": "https://pypi.org/project/collective.jsconfiguration/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.jsconfiguration/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/keul/collective.jsconfiguration"}, "release_url": "https://pypi.org/project/collective.jsconfiguration/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "General approach for adding JavaScript configuration (and i18n data) to Plone products", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p><strong>Table of contents</strong></p>\n<ul>\n<li><a href=\"#introduction\" id=\"id6\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#how-it-works\" id=\"id7\" rel=\"nofollow\">How it works</a><ul>\n<li><a href=\"#ijsondataprovider\" id=\"id8\" rel=\"nofollow\">IJSONDataProvider</a></li>\n<li><a href=\"#idomdataprovider\" id=\"id9\" rel=\"nofollow\">IDOMDataProvider</a></li>\n<li><a href=\"#ijsobjectdataprovider\" id=\"id10\" rel=\"nofollow\">IJSObjectDataProvider</a></li>\n</ul>\n</li>\n<li><a href=\"#registering-a-new-configuration\" id=\"id11\" rel=\"nofollow\">Registering a new configuration</a></li>\n<li><a href=\"#example-application\" id=\"id12\" rel=\"nofollow\">Example application</a></li>\n<li><a href=\"#changelog\" id=\"id13\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id4\" id=\"id14\" rel=\"nofollow\">0.1.1 (2015-08-25)</a></li>\n<li><a href=\"#id5\" id=\"id15\" rel=\"nofollow\">0.1.0 (2014-05-02)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Introduction</a></h2>\n<p>This product is targeted to developer who need to distribute JavaScript configuration data or\ni18n strings with their Plone products.</p>\n<p>Data injected in the page could be taken from whatever server side configuration setting you want\nbut most of the time you want to read application configuration from the Plone registry and translations\nfrom page templates.</p>\n</div>\n<div id=\"how-it-works\">\n<h2><a href=\"#id7\" rel=\"nofollow\">How it works</a></h2>\n<p>A new viewlet will be registered in the HTML head of the site. This viewlet is normally empty and will\ndo nothing until a 3rd party product will register new <tt>IJSDataProvider</tt> adapters.</p>\n<p>There are three subtypes of adapters, choosing one of them depends on what you want to reach in your\nadd-on.</p>\n<p>Registering <em>named adapters</em> is recommended, in that way override the registration with a more\nspecific ones will be possible.\nIn the case of <tt>IJSObjectDataProvider</tt> the name is required because it\u2019s used as name of the defined\nvariable (see below).</p>\n<div id=\"ijsondataprovider\">\n<h3><a href=\"#id8\" rel=\"nofollow\">IJSONDataProvider</a></h3>\n<p>Use it when you want to add new JavaScript data in the form of a JSON <em>template</em>.</p>\n<p>The adapter must be a callable object that return a string that could be threat as a JSON\nstring. It will be added to the page in a <tt>script</tt> of type \u201ctext/collective.jsconfiguration.json\u201d.</p>\n<p>For example:</p>\n<pre><span class=\"nt\">&lt;script</span> <span class=\"na\">type=</span><span class=\"s\">\"text/collective.jsconfiguration.json\"</span>\n        <span class=\"na\">id=</span><span class=\"s\">\"your_adapter_name_if_any\"</span><span class=\"nt\">&gt;</span>\n    {\"foo\": ... }\n<span class=\"nt\">&lt;/script&gt;</span>\n</pre>\n<p>It\u2019s not a duty of this package telling you how to read the data, but for example you could do something\nlike this:</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">configuration</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">parseJSON</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#your_adapter_name_if_any'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">());</span>\n</pre>\n</div>\n<div id=\"idomdataprovider\">\n<h3><a href=\"#id9\" rel=\"nofollow\">IDOMDataProvider</a></h3>\n<p>Use it when you want to add new JavaScript data in the form of XML nodes.</p>\n<p>The adapter must be a callable object that return something you want to be put inside the page.\nIt will be added to the page in a <tt>script</tt> of type \u201ctext/collective.jsconfiguration.xml\u201d.</p>\n<p>An example:</p>\n<pre><span class=\"nt\">&lt;script</span> <span class=\"na\">type=</span><span class=\"s\">\"text/collective.jsconfiguration.xml\"</span>\n        <span class=\"na\">id=</span><span class=\"s\">\"your_adapter_name_if_any\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;foo</span> <span class=\"na\">data-i18n-label1=</span><span class=\"s\">\"Benvenuto\"</span>\n         <span class=\"na\">data-i18n-label2=</span><span class=\"s\">\"Questo \u00e8 un esempio di traduzione\"</span><span class=\"nt\">&gt;</span>\n         ...\n    <span class=\"nt\">&lt;/foo&gt;</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</pre>\n<p>Although there\u2019s no real limitation in using this provider, it has been designed for injecting\nXML sub-DOM.\nIf the callable use a template to render it\u2019s content you can use a browser view.\nThis can be <em>really</em> useful for internationalization of your JavaScript interface (because\nyou can then rely on Zope i18n support and tools like <a href=\"http://pypi.python.org/pypi/i18ndude\" rel=\"nofollow\">i18ndude</a>).</p>\n<p>Reading the translation string from JavaScript will be really simple:</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">label1</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#your_adapter_name_if_any'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">'data-i18n-label1'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">label2</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#your_adapter_name_if_any'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">'data-i18n-label2'</span><span class=\"p\">);</span>\n</pre>\n</div>\n<div id=\"ijsobjectdataprovider\">\n<h3><a href=\"#id10\" rel=\"nofollow\">IJSObjectDataProvider</a></h3>\n<p>Use it when you want to add new JavaScript data in the form of a plain JavaScript object\nassigned to a variable. For this reason the data will be used in a standard <tt>script</tt>\ntag.</p>\n<p>This is very similar to the <tt>IJSONDataProvider</tt> above (the callable must return a valid JSON string)\nbut with some important differences:</p>\n<ul>\n<li>a name for the adapter is required</li>\n<li>the name of the adapter will be used as variable name to which the data will be assigned</li>\n</ul>\n<p>If the name will be dotted, a nested JavaScript objects structure will be created.</p>\n<p>An example for an adapter called \u201c<tt>foo.bar</tt>\u201d:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span><span class=\"p\">&gt;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">foo</span><span class=\"o\">===</span><span class=\"s1\">'undefined'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"baz\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Hello World\"</span><span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>While the use of <tt>IJSONDataProvider</tt> will not include new JavaScript data in the JavaScript global\nnamespace but leave to developer the access to the new data, using <tt>IJSObjectDataProvider</tt> you are\ndirectly adding new data to the JavaScript environment:</p>\n<pre><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">.</span><span class=\"nx\">baz</span><span class=\"p\">);</span> <span class=\"c1\">// whil be \"Hello World\"</span>\n</pre>\n</div>\n</div>\n<div id=\"registering-a-new-configuration\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Registering a new configuration</a></h2>\n<p>Whatever is your choice, you simply need to register an adapter that adapts the <strong>current context</strong>,\nthe <strong>request</strong> and the <strong>current view</strong>.</p>\n<p>An example:</p>\n<pre><span class=\"nt\">&lt;adapter</span>\n    <span class=\"na\">factory=</span><span class=\"s\">\"your.package.adapter.YourXMLAdapter\"</span>\n    <span class=\"na\">provides=</span><span class=\"s\">\"collective.jsconfiguration.interfaces.IDOMDataProvider\"</span>\n    <span class=\"na\">for=</span><span class=\"s\">\"* * *\"</span>\n    <span class=\"na\">name=</span><span class=\"s\">\"your_zml_configuration\"</span>\n    <span class=\"nt\">/&gt;</span>\n</pre>\n<p>In the example above the configuration will be added to every page of the site.</p>\n<pre><span class=\"nt\">&lt;adapter</span>\n    <span class=\"na\">factory=</span><span class=\"s\">\"your.package.adapter.AnotherXMLAdapter\"</span>\n    <span class=\"na\">provides=</span><span class=\"s\">\"collective.jsconfiguration.interfaces.IDOMDataProvider\"</span>\n    <span class=\"na\">for=</span><span class=\"s\">\"Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot\n         your.package.browser.interfaces.IYourProductLayer\n         your.package.browser.interfaces.IYourSpecialView\"</span>\n    <span class=\"na\">name=</span><span class=\"s\">\"your_zml_configuration\"</span>\n    <span class=\"nt\">/&gt;</span>\n</pre>\n<p>In the last example another configuration will only added to the site root, only when a 3rd party browser\nlayers is registered (commonly: your add-on product is installed) and only when a specific view is called.</p>\n<p>As far as the adapter registration is using the same name of the first example, the last registration will\noverride the first when applicable.</p>\n<p>Finally, there\u2019s the adapter class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">YourXMLAdapter</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">implements</span><span class=\"p\">(</span><span class=\"n\">IDOMDataProvider</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">view</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>When using <tt>IJSONDataProvider</tt> or <tt>IJSObjectDataProvider</tt> and you want to directly read data from the\nPlone registry, you can rely on <a href=\"http://github.com/keul/collective.regjsonify\" rel=\"nofollow\">collective.regjsonify</a> package, that can quickly help you in this task:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collective.regjsonify.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IJSONifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collective.jsconfiguration.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IJSONDataProvider</span>\n<span class=\"kn\">from</span> <span class=\"nn\">plone.registry.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IRegistry</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implements</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">YourXMLAdapter</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">implements</span><span class=\"p\">(</span><span class=\"n\">IJSONDataProvider</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">view</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">registry</span> <span class=\"o\">=</span> <span class=\"n\">queryUtility</span><span class=\"p\">(</span><span class=\"n\">IRegistry</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">forInterface</span><span class=\"p\">(</span><span class=\"n\">IMyRegistrySettings</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">IJSONifier</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"example-application\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Example application</a></h2>\n<p>You can find all those features in action in the <a href=\"https://github.com/keul/collective.externalizelink\" rel=\"nofollow\">collective.externalizelink</a> Plone add-on.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id4\">\n<h3><a href=\"#id14\" rel=\"nofollow\">0.1.1 (2015-08-25)</a></h3>\n<ul>\n<li><tt>IJSONDataProvider</tt> was masking HTML like output\n[keul]</li>\n<li>Tests were broken\n[keul]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id15\" rel=\"nofollow\">0.1.0 (2014-05-02)</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1692685, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2818c825dad9a7d9c3eb2e940e966d6b", "sha256": "d6ad1b37d0f8fd6548b88afb4e6c46aa60794046dfde6b07aa95cac82550c607"}, "downloads": -1, "filename": "collective.jsconfiguration-0.1.0.zip", "has_sig": false, "md5_digest": "2818c825dad9a7d9c3eb2e940e966d6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29750, "upload_time": "2014-05-02T13:08:04", "upload_time_iso_8601": "2014-05-02T13:08:04.903908Z", "url": "https://files.pythonhosted.org/packages/63/40/fc2b41c578008ff1a2334e3a72229e5de8b1073225fe5eeaeb9903402f31/collective.jsconfiguration-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b972a580184ca94875063e7e4ffd1b2d", "sha256": "f260efdcec8e2b7438ce7785ef07b7aee6f04b48a0abb4e25115bf4eb0f848da"}, "downloads": -1, "filename": "collective.jsconfiguration-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b972a580184ca94875063e7e4ffd1b2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17875, "upload_time": "2015-08-25T10:31:17", "upload_time_iso_8601": "2015-08-25T10:31:17.281465Z", "url": "https://files.pythonhosted.org/packages/bf/3f/fedd20f4a582a53aec4905a02237ede243c98c6a5d1c93509e0bf27d7635/collective.jsconfiguration-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b972a580184ca94875063e7e4ffd1b2d", "sha256": "f260efdcec8e2b7438ce7785ef07b7aee6f04b48a0abb4e25115bf4eb0f848da"}, "downloads": -1, "filename": "collective.jsconfiguration-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b972a580184ca94875063e7e4ffd1b2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17875, "upload_time": "2015-08-25T10:31:17", "upload_time_iso_8601": "2015-08-25T10:31:17.281465Z", "url": "https://files.pythonhosted.org/packages/bf/3f/fedd20f4a582a53aec4905a02237ede243c98c6a5d1c93509e0bf27d7635/collective.jsconfiguration-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:11 2020"}