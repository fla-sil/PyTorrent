{"info": {"author": "Tommaso Barbugli", "author_email": "tbarbugli@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "## Stream Django\n[![Build Status](https://travis-ci.org/GetStream/stream-django.svg?branch=master)](https://travis-ci.org/GetStream/stream-django) [![Coverage Status](https://coveralls.io/repos/github/GetStream/stream-django/badge.svg?branch=master)](https://coveralls.io/github/GetStream/stream-django?branch=master) [![PyPI version](https://badge.fury.io/py/stream-django.svg)](http://badge.fury.io/py/stream-django)\n\n[stream-django](https://github.com/GetStream/stream-django) is a Django client for [Stream](https://getstream.io/), it supports Django from 1.5 up to and including 2.2 using Python 2.7 and 3.4, 3.5, 3.6 and 3.7.\n\nYou can sign up for a Stream account at https://getstream.io/get_started.\n\nNote there is also a lower level [Python - Stream integration](https://github.com/getstream/stream-python) library which is suitable for all Python applications.\n\n### Build activity streams & news feeds\n\n<p align=\"center\">\n  <img src=\"https://dvqg2dogggmn6.cloudfront.net/images/mood-home.png\" alt=\"Examples of what you can build\" title=\"What you can build\"/>\n</p>\n\nYou can build:\n\n* Activity streams such as seen on Github\n* A twitter style newsfeed\n* A feed like instagram/ pinterest\n* Facebook style newsfeeds\n* A notification system\n\n### Example apps\n\nYou can check out our example apps built using this library (you can deploy them directly to Heroku with 1 click):\n\n* [Pinterest-like example app](https://github.com/GetStream/Stream-Example-Py)\n* [Twitter for scientists example app](https://github.com/GetStream/django_twitter)\n\n### Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [What can you build?](#what-can-you-build)\n- [Demo](#demo)\n- [Installation](#installation)\n- [Model integration](#model-integration)\n- [Feed manager](#feed-manager)\n- [Showing the newsfeed](#showing-the-newsfeed)\n  - [Activity enrichment](#activity-enrichment)\n  - [Templating](#templating)\n- [Settings](#settings)\n- [Temporarily disabling the signals](#temporarily-disabling-the-signals)\n- [Customizing enrichment](#customizing-enrichment)\n- [Low level APIs access](#low-level-apis-access)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n### Installation\n\nInstall stream_django package with pip:\n\n```pip install stream_django```\n\nadd stream_django to your ```INSTALLED_APPS```\n\n```python\nINSTALLED_APPS = [\n    ...\n    'stream_django'\n]\n\nSTREAM_API_KEY = 'my_api_key'\nSTREAM_API_SECRET = 'my_api_secret_key'\n\n```\n\nLogin with Github on getstream.io and add\n```STREAM_API_KEY``` and ```STREAM_API_SECRET``` to your Django settings module (you can find them in the dashboard).\n\n### Model integration\n\nStream Django can automatically publish new activities to your feed. Simple mixin the Activity class on the models you want to publish.\n\n```python\nfrom stream_django.activity import Activity\n\nclass Tweet(models.Model, Activity):\n    ...\n\nclass Like(models.Model, Activity):\n    ...\n```\n\nEvery time a Tweet is created it will be added to the user's feed. Users which follow the given user will also automatically get the new tweet in their feeds.\n\n#### Activity fields\n\nModels are stored in feeds as activities. An activity is composed of at least the following fields: **actor**, **verb**, **object**, **time**. You can also add more custom data if needed.\nThe Activity mixin will try to set things up automatically:\n\n**object** is a reference to the model instance\n**actor** is a reference to the user attribute of the instance\n**verb** is a string representation of the class name\n\nBy default the actor field will look for an attribute called user or actor and a field called created_at to track creation time.\nIf you're user field is called differently you'll need to tell us where to look for it.\nBelow shows an example how to set things up if your user field is called author.\n\n```python\nclass Tweet(models.Model, Activity):\n    created_at = models.DateTimeField(auto_now_add=True)\n    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n\n    @property\n    def activity_actor_attr(self):\n        return self.author\n\n```\n\n#### Activity extra data\n\nOften you'll want to store more data than just the basic fields. You achieve this by implementing the extra_activity_data method in the model.\n\nNOTE: you should only return data that json.dumps can handle (datetime instances are supported too).\n\n```python\nclass Tweet(models.Model, Activity):\n\n    @property\n    def extra_activity_data(self):\n        return {'is_retweet': self.is_retweet }\n\n```\n\n\n### Feed manager\n\nDjango Stream comes with a feed_manager class that helps with all common feed operations.\n\n#### Feeds bundled with feed_manager\n\nTo get you started the manager has 4 feeds pre configured. You can add more feeds if your application needs it.\nThe three feeds are divided in three categories.\n\n##### User feed:\nThe user feed stores all activities for a user. Think of it as your personal Facebook page. You can easily get this feed from the manager.\n```python\nfrom stream_django.feed_manager import feed_manager\n\nfeed_manager.get_user_feed(user_id)\n```\n##### News feeds:\nThe news feeds (or timelines) store the activities from the people you follow.\nThere is both a simple timeline newsfeed (similar to twitter) and an aggregated version (like facebook).\n\n```python\ntimeline = feed_manager.get_news_feeds(user_id)['timeline']\ntimeline_aggregated = feed_manager.get_news_feeds(user_id)['timeline_aggregated']\n\n```\n##### Notification feed:\nThe notification feed can be used to build notification functionality.\n\n<p align=\"center\">\n  <img src=\"http://feedly.readthedocs.org/en/latest/_images/fb_notification_system.png\" alt=\"Notification feed\" title=\"Notification feed\"/>\n\nBelow we show an example of how you can read the notification feed.\n```python\nnotification_feed = feed_manager.get_notification_feed(user_id)\n\n```\nBy default the notification feed will be empty. You can specify which users to notify when your model gets created. In the case of a retweet you probably want to notify the user of the parent tweet.\n\n```python\nclass Tweet(models.Model, Activity):\n\n    @property\n    def activity_notify(self):\n        if self.is_retweet and self.parent_tweet.author != self.author:\n            target_feed = feed_manager.get_notification_feed(self.parent_tweet.author_id)\n            return [target_feed]\n\n```\n\nAnother example would be following a user. You would commonly want to notify the user which is being followed.\n\n```python\nclass Follow(models.Model, Activity):\n\n    @property\n    def activity_notify(self):\n        return [feed_manager.get_notification_feed(self.target_user.id)]\n\n```\n\n\n#### Follow a feed\nTo create the newsfeeds you need to notify the system about follow relationships. The manager comes with APIs to let a user's news feeds follow another user's feed. This code lets the current user's timeline and timeline_aggregated feeds follow the target_user's personal feed.\n\n```python\nfeed_manager.follow_user(request.user.id, target_user)\n\n```\n\n### Showing the newsfeed\n\n#### Activity enrichment\n\nWhen you read data from feeds, a like activity will look like this:\n\n```python\n{'actor': 'core.User:1', 'verb': 'like', 'object': 'core.Like:42'}\n```\n\nThis is far from ready for usage in your template. We call the process of loading the references from the database enrichment. An example is shown below:\n\n```python\nfrom stream_django.enrich import Enrich\n\nenricher = Enrich()\nfeed = feed_manager.get_feed('timeline', request.user.id)\nactivities = feed.get(limit=25)['results']\nenriched_activities = enricher.enrich_activities(activities)\n```\n\n\n\n#### Templating\n\nNow that you've enriched the activities you can render the template.\nFor convenience we include the render activity template tag:\n\n```\n{% load activity_tags %}\n\n{% for activity in activities %}\n    {% render_activity activity %}\n{% endfor %}\n\n```\n\nThe render_activity template tag will render the template activity/[aggregated]/[verb].html with the activity as context.\n\nFor example activity/tweet.html will be used to render an normal activity with verb tweet\n\n```\n{{ activity.actor.username }} said \"{{ activity.object.body }} {{ activity.created_at|timesince }} ago\"\n```\n\nand activity/aggregated/like.html for an aggregated activity with verb like\n\n```\n{{ activity.actor_count }} user{{ activity.actor_count|pluralize }} liked {% render_activity activity.activities.0 %}\n```\n\nIf you need to support different kind of templates for the same activity, you can send a third parameter to change the template selection.\n\nThe example below will use the template activity/[aggregated]/homepage_%(verb)s.html\n```\n{% render_activity activity 'homepage' %}\n```\n\n\n### Settings\n\n**STREAM_API_KEY**\nYour stream site api key. Default ```''```\n\n**STREAM_API_SECRET**\nYour stream site api key secret. Default ```''```\n\n**STREAM_LOCATION**\nThe location API endpoint the client will connect to. Eg: ```STREAM_LOCATION='us-east'```\n\n**STREAM_TIMEOUT**\nThe connection timeout (in seconds) for the API client.  Default ```6.0```\n\n**STREAM_FEED_MANAGER_CLASS**\nThe path to the feed manager class. Default ```'stream_django.managers.FeedManager'```\n\n**STREAM_USER_FEED**\nThe name of the feed (as it is configured in your GetStream.io Dasboard) where activities are stored. Default ```'user'```\n\n**STREAM_NEWS_FEEDS**\nThe name of the news feed (as they are configured in your GetStream.io Dasboard) where activities from followed feeds are stored. Default ```{'timeline':'timeline', 'timeline_aggregated':'timeline_aggregated'}```\n\n**STREAM_NOTIFICATION_FEED**\nThe name of the feed (as it is configured in your GetStream.io Dasboard) where activity notifications are stored. Default ```'notification'```\n\n**STREAM_DISABLE_MODEL_TRACKING**\nDisable automatic tracking of Activity models. Default ```False```\n\n### Temporarily disabling the signals\n\nModel syncronization is disabled during schema/data migrations runs, syncdb and fixture loading (and during django test runs).\nYou can completely disable feed publishing via the ```STREAM_DISABLE_MODEL_TRACKING``` django setting.\n\n\n### Customizing enrichment\n\nSometimes you'll want to customize how enrichment works. The documentation will show you several common options.\n\n#### Enrich extra fields\n\nIf you store references to model instances in the activity extra_data you can use the Enrich class to take care of it for you\n\n```python\nfrom stream_django.activity import create_model_reference\n\nclass Tweet(models.Model, Activity):\n\n    @property\n    def extra_activity_data(self):\n        ref = create_model_reference(self.parent_tweet)\n        return {'parent_tweet': ref }\n\n\n# instruct the enricher to enrich actor, object and parent_tweet fields\nenricher = Enrich(fields=['actor', 'object', 'parent_tweet'])\nfeed = feed_manager.get_feed('timeline', request.user.id)\nactivities = feed.get(limit=25)['results']\nenriched_activities = enricher.enrich_activities(activities)\n```\n\n#### Change how models are retrieved\n\nThe enrich class that comes with the packages tries to minimise the amount of database queries. The models are grouped by their class and then retrieved with a pk__in query. You can implement a different approach to retrieve the instances of a model subclassing the ```stream_django.enrich.Enrich``` class.\n\nTo change the retrieval for every model you should override the ```fetch_model_instances``` method; in alternative you can change how certain models' are retrieved by implementing the hook function ```fetch_<model_name>_instances```\n\n```python\nclass MyEnrich(Enrich):\n    '''\n    Overwrites how model instances are fetched from the database\n    '''\n\n    def fetch_model_instances(self, modelClass, pks):\n        '''\n        returns a dict {id:modelInstance} with instances of model modelClass\n        and pk in pks\n        '''\n        ...\n\nclass AnotherEnrich(Enrich):\n    '''\n    Overwrites how Likes instances are fetched from the database\n    '''\n\n    def fetch_like_instances(self, pks):\n        return {l.id: l for l in Like.objects.cached_likes(ids)}\n\n```\n\n\n#### Preload related data\n\nYou will commonly access related objects such as activity['object'].user. To prevent your newsfeed to run N queries you can instruct the manager to load related objects. The manager will use Django's select_related functionality. (https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related).\n\n```python\nclass Tweet(models.Model, Activity):\n\n    @classmethod\n    def activity_related_models(cls):\n        return ['user']\n\n```\n\n### Full documentation and Low level APIs access\n\nWhen needed you can also use the [low level Python API](https://github.com/getstream/stream-python) directly. Documentation is available at the [Stream website](https://getstream.io/docs/?language=python).\n\n```python\nfrom stream_django.client import stream_client\n\nspecial_feed = stream_client.feed('special:42')\nspecial_feed.follow('timeline:60')\n\n```\n\n### Copyright and License Information\n\nCopyright (c) 2014-2017 Stream.io Inc, and individual contributors. All rights reserved.\n\nSee the file \"LICENSE\" for information on the history of this software, terms & conditions for usage, and a DISCLAIMER OF ALL WARRANTIES.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://getstream.io/", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "stream-django", "package_url": "https://pypi.org/project/stream-django/", "platform": "", "project_url": "https://pypi.org/project/stream-django/", "project_urls": {"Homepage": "https://getstream.io/"}, "release_url": "https://pypi.org/project/stream-django/1.6.1/", "requires_dist": null, "requires_python": "", "summary": "A Django app to build activity, news and notification feeds.", "version": "1.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Stream Django</h2>\n<p><a href=\"https://travis-ci.org/GetStream/stream-django\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f04e311471b516102d011b9f42f6f211c3cd336/68747470733a2f2f7472617669732d63692e6f72672f47657453747265616d2f73747265616d2d646a616e676f2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/GetStream/stream-django?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a25b06d95304d4a4f953c96ac3cb6ff28283a6c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f47657453747265616d2f73747265616d2d646a616e676f2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://badge.fury.io/py/stream-django\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0ab689e3a1fbdc835ddf6ef8c4d4c8bc8ca2ff0/68747470733a2f2f62616467652e667572792e696f2f70792f73747265616d2d646a616e676f2e737667\"></a></p>\n<p><a href=\"https://github.com/GetStream/stream-django\" rel=\"nofollow\">stream-django</a> is a Django client for <a href=\"https://getstream.io/\" rel=\"nofollow\">Stream</a>, it supports Django from 1.5 up to and including 2.2 using Python 2.7 and 3.4, 3.5, 3.6 and 3.7.</p>\n<p>You can sign up for a Stream account at <a href=\"https://getstream.io/get_started\" rel=\"nofollow\">https://getstream.io/get_started</a>.</p>\n<p>Note there is also a lower level <a href=\"https://github.com/getstream/stream-python\" rel=\"nofollow\">Python - Stream integration</a> library which is suitable for all Python applications.</p>\n<h3>Build activity streams &amp; news feeds</h3>\n<p align=\"center\">\n  <img alt=\"Examples of what you can build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bfbf20bceacde74d3c5f42e4cdfca8ca951390a/68747470733a2f2f6476716732646f6767676d6e362e636c6f756466726f6e742e6e65742f696d616765732f6d6f6f642d686f6d652e706e67\">\n</p>\n<p>You can build:</p>\n<ul>\n<li>Activity streams such as seen on Github</li>\n<li>A twitter style newsfeed</li>\n<li>A feed like instagram/ pinterest</li>\n<li>Facebook style newsfeeds</li>\n<li>A notification system</li>\n</ul>\n<h3>Example apps</h3>\n<p>You can check out our example apps built using this library (you can deploy them directly to Heroku with 1 click):</p>\n<ul>\n<li><a href=\"https://github.com/GetStream/Stream-Example-Py\" rel=\"nofollow\">Pinterest-like example app</a></li>\n<li><a href=\"https://github.com/GetStream/django_twitter\" rel=\"nofollow\">Twitter for scientists example app</a></li>\n</ul>\n<h3>Table of Contents</h3>\n\n\n<ul>\n<li><a href=\"#what-can-you-build\" rel=\"nofollow\">What can you build?</a></li>\n<li><a href=\"#demo\" rel=\"nofollow\">Demo</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#model-integration\" rel=\"nofollow\">Model integration</a></li>\n<li><a href=\"#feed-manager\" rel=\"nofollow\">Feed manager</a></li>\n<li><a href=\"#showing-the-newsfeed\" rel=\"nofollow\">Showing the newsfeed</a>\n<ul>\n<li><a href=\"#activity-enrichment\" rel=\"nofollow\">Activity enrichment</a></li>\n<li><a href=\"#templating\" rel=\"nofollow\">Templating</a></li>\n</ul>\n</li>\n<li><a href=\"#settings\" rel=\"nofollow\">Settings</a></li>\n<li><a href=\"#temporarily-disabling-the-signals\" rel=\"nofollow\">Temporarily disabling the signals</a></li>\n<li><a href=\"#customizing-enrichment\" rel=\"nofollow\">Customizing enrichment</a></li>\n<li><a href=\"#low-level-apis-access\" rel=\"nofollow\">Low level APIs access</a></li>\n</ul>\n\n<h3>Installation</h3>\n<p>Install stream_django package with pip:</p>\n<p><code>pip install stream_django</code></p>\n<p>add stream_django to your <code>INSTALLED_APPS</code></p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'stream_django'</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">STREAM_API_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'my_api_key'</span>\n<span class=\"n\">STREAM_API_SECRET</span> <span class=\"o\">=</span> <span class=\"s1\">'my_api_secret_key'</span>\n</pre>\n<p>Login with Github on getstream.io and add\n<code>STREAM_API_KEY</code> and <code>STREAM_API_SECRET</code> to your Django settings module (you can find them in the dashboard).</p>\n<h3>Model integration</h3>\n<p>Stream Django can automatically publish new activities to your feed. Simple mixin the Activity class on the models you want to publish.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stream_django.activity</span> <span class=\"kn\">import</span> <span class=\"n\">Activity</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Like</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Every time a Tweet is created it will be added to the user's feed. Users which follow the given user will also automatically get the new tweet in their feeds.</p>\n<h4>Activity fields</h4>\n<p>Models are stored in feeds as activities. An activity is composed of at least the following fields: <strong>actor</strong>, <strong>verb</strong>, <strong>object</strong>, <strong>time</strong>. You can also add more custom data if needed.\nThe Activity mixin will try to set things up automatically:</p>\n<p><strong>object</strong> is a reference to the model instance\n<strong>actor</strong> is a reference to the user attribute of the instance\n<strong>verb</strong> is a string representation of the class name</p>\n<p>By default the actor field will look for an attribute called user or actor and a field called created_at to track creation time.\nIf you're user field is called differently you'll need to tell us where to look for it.\nBelow shows an example how to set things up if your user field is called author.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">activity_actor_attr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">author</span>\n</pre>\n<h4>Activity extra data</h4>\n<p>Often you'll want to store more data than just the basic fields. You achieve this by implementing the extra_activity_data method in the model.</p>\n<p>NOTE: you should only return data that json.dumps can handle (datetime instances are supported too).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">extra_activity_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'is_retweet'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_retweet</span> <span class=\"p\">}</span>\n</pre>\n<h3>Feed manager</h3>\n<p>Django Stream comes with a feed_manager class that helps with all common feed operations.</p>\n<h4>Feeds bundled with feed_manager</h4>\n<p>To get you started the manager has 4 feeds pre configured. You can add more feeds if your application needs it.\nThe three feeds are divided in three categories.</p>\n<h5>User feed:</h5>\n<p>The user feed stores all activities for a user. Think of it as your personal Facebook page. You can easily get this feed from the manager.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stream_django.feed_manager</span> <span class=\"kn\">import</span> <span class=\"n\">feed_manager</span>\n\n<span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_user_feed</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<h5>News feeds:</h5>\n<p>The news feeds (or timelines) store the activities from the people you follow.\nThere is both a simple timeline newsfeed (similar to twitter) and an aggregated version (like facebook).</p>\n<pre><span class=\"n\">timeline</span> <span class=\"o\">=</span> <span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_news_feeds</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)[</span><span class=\"s1\">'timeline'</span><span class=\"p\">]</span>\n<span class=\"n\">timeline_aggregated</span> <span class=\"o\">=</span> <span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_news_feeds</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)[</span><span class=\"s1\">'timeline_aggregated'</span><span class=\"p\">]</span>\n</pre>\n<h5>Notification feed:</h5>\n<p>The notification feed can be used to build notification functionality.</p>\n<p align=\"center\">\n  <img alt=\"Notification feed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/095de6d69b8dbd843683ce6cd357010f8b950e88/687474703a2f2f666565646c792e72656164746865646f63732e6f72672f656e2f6c61746573742f5f696d616765732f66625f6e6f74696669636174696f6e5f73797374656d2e706e67\">\n</p><p>Below we show an example of how you can read the notification feed.</p>\n<pre><span class=\"n\">notification_feed</span> <span class=\"o\">=</span> <span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_notification_feed</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<p>By default the notification feed will be empty. You can specify which users to notify when your model gets created. In the case of a retweet you probably want to notify the user of the parent tweet.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">activity_notify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_retweet</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_tweet</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">:</span>\n            <span class=\"n\">target_feed</span> <span class=\"o\">=</span> <span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_notification_feed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_tweet</span><span class=\"o\">.</span><span class=\"n\">author_id</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">target_feed</span><span class=\"p\">]</span>\n</pre>\n<p>Another example would be following a user. You would commonly want to notify the user which is being followed.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Follow</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">activity_notify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_notification_feed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">target_user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)]</span>\n</pre>\n<h4>Follow a feed</h4>\n<p>To create the newsfeeds you need to notify the system about follow relationships. The manager comes with APIs to let a user's news feeds follow another user's feed. This code lets the current user's timeline and timeline_aggregated feeds follow the target_user's personal feed.</p>\n<pre><span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">follow_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">target_user</span><span class=\"p\">)</span>\n</pre>\n<h3>Showing the newsfeed</h3>\n<h4>Activity enrichment</h4>\n<p>When you read data from feeds, a like activity will look like this:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'actor'</span><span class=\"p\">:</span> <span class=\"s1\">'core.User:1'</span><span class=\"p\">,</span> <span class=\"s1\">'verb'</span><span class=\"p\">:</span> <span class=\"s1\">'like'</span><span class=\"p\">,</span> <span class=\"s1\">'object'</span><span class=\"p\">:</span> <span class=\"s1\">'core.Like:42'</span><span class=\"p\">}</span>\n</pre>\n<p>This is far from ready for usage in your template. We call the process of loading the references from the database enrichment. An example is shown below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stream_django.enrich</span> <span class=\"kn\">import</span> <span class=\"n\">Enrich</span>\n\n<span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">Enrich</span><span class=\"p\">()</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_feed</span><span class=\"p\">(</span><span class=\"s1\">'timeline'</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"n\">activities</span> <span class=\"o\">=</span> <span class=\"n\">feed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)[</span><span class=\"s1\">'results'</span><span class=\"p\">]</span>\n<span class=\"n\">enriched_activities</span> <span class=\"o\">=</span> <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">enrich_activities</span><span class=\"p\">(</span><span class=\"n\">activities</span><span class=\"p\">)</span>\n</pre>\n<h4>Templating</h4>\n<p>Now that you've enriched the activities you can render the template.\nFor convenience we include the render activity template tag:</p>\n<pre><code>{% load activity_tags %}\n\n{% for activity in activities %}\n    {% render_activity activity %}\n{% endfor %}\n\n</code></pre>\n<p>The render_activity template tag will render the template activity/[aggregated]/[verb].html with the activity as context.</p>\n<p>For example activity/tweet.html will be used to render an normal activity with verb tweet</p>\n<pre><code>{{ activity.actor.username }} said \"{{ activity.object.body }} {{ activity.created_at|timesince }} ago\"\n</code></pre>\n<p>and activity/aggregated/like.html for an aggregated activity with verb like</p>\n<pre><code>{{ activity.actor_count }} user{{ activity.actor_count|pluralize }} liked {% render_activity activity.activities.0 %}\n</code></pre>\n<p>If you need to support different kind of templates for the same activity, you can send a third parameter to change the template selection.</p>\n<p>The example below will use the template activity/[aggregated]/homepage_%(verb)s.html</p>\n<pre><code>{% render_activity activity 'homepage' %}\n</code></pre>\n<h3>Settings</h3>\n<p><strong>STREAM_API_KEY</strong>\nYour stream site api key. Default <code>''</code></p>\n<p><strong>STREAM_API_SECRET</strong>\nYour stream site api key secret. Default <code>''</code></p>\n<p><strong>STREAM_LOCATION</strong>\nThe location API endpoint the client will connect to. Eg: <code>STREAM_LOCATION='us-east'</code></p>\n<p><strong>STREAM_TIMEOUT</strong>\nThe connection timeout (in seconds) for the API client.  Default <code>6.0</code></p>\n<p><strong>STREAM_FEED_MANAGER_CLASS</strong>\nThe path to the feed manager class. Default <code>'stream_django.managers.FeedManager'</code></p>\n<p><strong>STREAM_USER_FEED</strong>\nThe name of the feed (as it is configured in your GetStream.io Dasboard) where activities are stored. Default <code>'user'</code></p>\n<p><strong>STREAM_NEWS_FEEDS</strong>\nThe name of the news feed (as they are configured in your GetStream.io Dasboard) where activities from followed feeds are stored. Default <code>{'timeline':'timeline', 'timeline_aggregated':'timeline_aggregated'}</code></p>\n<p><strong>STREAM_NOTIFICATION_FEED</strong>\nThe name of the feed (as it is configured in your GetStream.io Dasboard) where activity notifications are stored. Default <code>'notification'</code></p>\n<p><strong>STREAM_DISABLE_MODEL_TRACKING</strong>\nDisable automatic tracking of Activity models. Default <code>False</code></p>\n<h3>Temporarily disabling the signals</h3>\n<p>Model syncronization is disabled during schema/data migrations runs, syncdb and fixture loading (and during django test runs).\nYou can completely disable feed publishing via the <code>STREAM_DISABLE_MODEL_TRACKING</code> django setting.</p>\n<h3>Customizing enrichment</h3>\n<p>Sometimes you'll want to customize how enrichment works. The documentation will show you several common options.</p>\n<h4>Enrich extra fields</h4>\n<p>If you store references to model instances in the activity extra_data you can use the Enrich class to take care of it for you</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stream_django.activity</span> <span class=\"kn\">import</span> <span class=\"n\">create_model_reference</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">extra_activity_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">create_model_reference</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_tweet</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'parent_tweet'</span><span class=\"p\">:</span> <span class=\"n\">ref</span> <span class=\"p\">}</span>\n\n\n<span class=\"c1\"># instruct the enricher to enrich actor, object and parent_tweet fields</span>\n<span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">Enrich</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'actor'</span><span class=\"p\">,</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"s1\">'parent_tweet'</span><span class=\"p\">])</span>\n<span class=\"n\">feed</span> <span class=\"o\">=</span> <span class=\"n\">feed_manager</span><span class=\"o\">.</span><span class=\"n\">get_feed</span><span class=\"p\">(</span><span class=\"s1\">'timeline'</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"n\">activities</span> <span class=\"o\">=</span> <span class=\"n\">feed</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)[</span><span class=\"s1\">'results'</span><span class=\"p\">]</span>\n<span class=\"n\">enriched_activities</span> <span class=\"o\">=</span> <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">enrich_activities</span><span class=\"p\">(</span><span class=\"n\">activities</span><span class=\"p\">)</span>\n</pre>\n<h4>Change how models are retrieved</h4>\n<p>The enrich class that comes with the packages tries to minimise the amount of database queries. The models are grouped by their class and then retrieved with a pk__in query. You can implement a different approach to retrieve the instances of a model subclassing the <code>stream_django.enrich.Enrich</code> class.</p>\n<p>To change the retrieval for every model you should override the <code>fetch_model_instances</code> method; in alternative you can change how certain models' are retrieved by implementing the hook function <code>fetch_&lt;model_name&gt;_instances</code></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyEnrich</span><span class=\"p\">(</span><span class=\"n\">Enrich</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    Overwrites how model instances are fetched from the database</span>\n<span class=\"sd\">    '''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_model_instances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modelClass</span><span class=\"p\">,</span> <span class=\"n\">pks</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        returns a dict {id:modelInstance} with instances of model modelClass</span>\n<span class=\"sd\">        and pk in pks</span>\n<span class=\"sd\">        '''</span>\n        <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AnotherEnrich</span><span class=\"p\">(</span><span class=\"n\">Enrich</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    Overwrites how Likes instances are fetched from the database</span>\n<span class=\"sd\">    '''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_like_instances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pks</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">:</span> <span class=\"n\">l</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">Like</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">cached_likes</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">)}</span>\n</pre>\n<h4>Preload related data</h4>\n<p>You will commonly access related objects such as activity['object'].user. To prevent your newsfeed to run N queries you can instruct the manager to load related objects. The manager will use Django's select_related functionality. (<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related</a>).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Activity</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">activity_related_models</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span>\n</pre>\n<h3>Full documentation and Low level APIs access</h3>\n<p>When needed you can also use the <a href=\"https://github.com/getstream/stream-python\" rel=\"nofollow\">low level Python API</a> directly. Documentation is available at the <a href=\"https://getstream.io/docs/?language=python\" rel=\"nofollow\">Stream website</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stream_django.client</span> <span class=\"kn\">import</span> <span class=\"n\">stream_client</span>\n\n<span class=\"n\">special_feed</span> <span class=\"o\">=</span> <span class=\"n\">stream_client</span><span class=\"o\">.</span><span class=\"n\">feed</span><span class=\"p\">(</span><span class=\"s1\">'special:42'</span><span class=\"p\">)</span>\n<span class=\"n\">special_feed</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"s1\">'timeline:60'</span><span class=\"p\">)</span>\n</pre>\n<h3>Copyright and License Information</h3>\n<p>Copyright (c) 2014-2017 Stream.io Inc, and individual contributors. All rights reserved.</p>\n<p>See the file \"LICENSE\" for information on the history of this software, terms &amp; conditions for usage, and a DISCLAIMER OF ALL WARRANTIES.</p>\n\n          </div>"}, "last_serial": 5848581, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "60aefbe3191f51b3682a8f26e8877fb5", "sha256": "2723826eccf196efe632eb120685ee37d015166c0025630578c7fc328306e8e8"}, "downloads": -1, "filename": "stream-django-0.1.tar.gz", "has_sig": false, "md5_digest": "60aefbe3191f51b3682a8f26e8877fb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13546, "upload_time": "2014-10-10T08:07:02", "upload_time_iso_8601": "2014-10-10T08:07:02.874990Z", "url": "https://files.pythonhosted.org/packages/03/e8/6af0b095a54e740ccbd4d480511d695b70710fbf8a8a1c12ec8876a60c5c/stream-django-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f1f2967f0eb2207ef0bf3b6fbc5309e9", "sha256": "4ed30e782480a153bfd07d893b3254b8ce6b8f820cefe3a07d3d69c55b343d35"}, "downloads": -1, "filename": "stream-django-0.2.tar.gz", "has_sig": false, "md5_digest": "f1f2967f0eb2207ef0bf3b6fbc5309e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13886, "upload_time": "2014-10-10T09:12:35", "upload_time_iso_8601": "2014-10-10T09:12:35.496647Z", "url": "https://files.pythonhosted.org/packages/a3/3b/5fc73fa4452091cf8033e8efc681f811de9e5226f446f1b754f5db6ef43f/stream-django-0.2.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "3e1d200f86652d096b5e50ae2e9ced2a", "sha256": "6998922ea5f570cc9acd75cebd821a549eb5be3970f4765a9517648e56c6f2ae"}, "downloads": -1, "filename": "stream-django-0.3.1.tar.gz", "has_sig": false, "md5_digest": "3e1d200f86652d096b5e50ae2e9ced2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14206, "upload_time": "2014-10-12T18:13:05", "upload_time_iso_8601": "2014-10-12T18:13:05.055022Z", "url": "https://files.pythonhosted.org/packages/aa/5a/efc32c2cfb1b8e7a048ff7f21da0939e2fe4c3ee8f1e6574eb689dbf29af/stream-django-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "afd3cb91875298cae57418caff6a9bcd", "sha256": "b8aec0bc19f99d73ee940b386852bbff7b2b03ce87d257d1bb6432299b392087"}, "downloads": -1, "filename": "stream-django-0.3.2.tar.gz", "has_sig": false, "md5_digest": "afd3cb91875298cae57418caff6a9bcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14392, "upload_time": "2014-10-13T11:27:20", "upload_time_iso_8601": "2014-10-13T11:27:20.268768Z", "url": "https://files.pythonhosted.org/packages/ba/79/0b152b7083eb670f55b90cc6b83ff6b10f85e21239512714ba92e043efd8/stream-django-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6a0b1769617f40358c5e836a6efadbbb", "sha256": "6a8f47a931aba6d1dd045a9b7ac75e106e72a164e7d5b152707f16ac000ecf9e"}, "downloads": -1, "filename": "stream-django-0.3.3.tar.gz", "has_sig": false, "md5_digest": "6a0b1769617f40358c5e836a6efadbbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14386, "upload_time": "2014-10-13T11:42:57", "upload_time_iso_8601": "2014-10-13T11:42:57.571774Z", "url": "https://files.pythonhosted.org/packages/8e/a1/a13a443c5493e1bde6407cea85b296153a86f0c3dfe1e43c73ebeeeafeec/stream-django-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "88e7436122d51ed980d3627e08f2c18a", "sha256": "4abc371c2cf9d4b97a6539c015e0d3156c913aa26641c999d8de52ec77397fd5"}, "downloads": -1, "filename": "stream-django-0.4.0.tar.gz", "has_sig": false, "md5_digest": "88e7436122d51ed980d3627e08f2c18a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14546, "upload_time": "2014-10-13T14:05:51", "upload_time_iso_8601": "2014-10-13T14:05:51.076349Z", "url": "https://files.pythonhosted.org/packages/5f/21/4290aa24c210f0c6327f9bb9988748823de43c79b8071a13344bd20f744f/stream-django-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a6ae8c1ccced2e8b0daa0b3be077fdf7", "sha256": "8d9aef0b8db9a65fd719b290b832521ae87ee3bb40bbec80f6de86bb02c569c8"}, "downloads": -1, "filename": "stream-django-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a6ae8c1ccced2e8b0daa0b3be077fdf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14971, "upload_time": "2014-11-11T11:49:59", "upload_time_iso_8601": "2014-11-11T11:49:59.578778Z", "url": "https://files.pythonhosted.org/packages/c9/a6/c647e15e2e51f15255465a26a9cf5806533edd973ccacd87634a77d5a310/stream-django-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0c3cf9b3524088bc13f9a7da4d26fdc1", "sha256": "77262e4969e11e66131834f049467d2fe2c21366ee9da9463adf43d5eb245314"}, "downloads": -1, "filename": "stream-django-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0c3cf9b3524088bc13f9a7da4d26fdc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14972, "upload_time": "2014-11-11T11:58:41", "upload_time_iso_8601": "2014-11-11T11:58:41.301454Z", "url": "https://files.pythonhosted.org/packages/d6/14/4a2907440a7396352e7747236b64524a1ad5b22b73209181a374af4dba37/stream-django-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d600aabeef0be528e8178d539d1088fd", "sha256": "5a7ad0cba6353d756a7bc2beb0f38268c7122eb0d5eaea06b7002b7d23568f82"}, "downloads": -1, "filename": "stream-django-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d600aabeef0be528e8178d539d1088fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14964, "upload_time": "2014-11-11T12:13:02", "upload_time_iso_8601": "2014-11-11T12:13:02.788626Z", "url": "https://files.pythonhosted.org/packages/05/e3/c5f70ce0d06036a6b032d8f51af9c25abe2582f830dae1fe1b2ea9099865/stream-django-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "8a0da43a568555cf6fd018c5058958a1", "sha256": "471eead4b3b3c38efb8f6216c7eb060acecbf07bf184e51b1f49ed8726bdf913"}, "downloads": -1, "filename": "stream-django-1.0.3.tar.gz", "has_sig": false, "md5_digest": "8a0da43a568555cf6fd018c5058958a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14968, "upload_time": "2014-11-11T12:44:54", "upload_time_iso_8601": "2014-11-11T12:44:54.457785Z", "url": "https://files.pythonhosted.org/packages/bc/63/6abf7806de42f021e9856ca5f276f07cd6d76ed5e305806539438be1f20a/stream-django-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "066433278b12a60bba1024faf0749b5a", "sha256": "3c62b9a68de2031f85321372e9279c2cc615d246b6654df2248584a84f5dd9ad"}, "downloads": -1, "filename": "stream-django-1.0.4.tar.gz", "has_sig": false, "md5_digest": "066433278b12a60bba1024faf0749b5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14997, "upload_time": "2014-11-14T18:42:55", "upload_time_iso_8601": "2014-11-14T18:42:55.529985Z", "url": "https://files.pythonhosted.org/packages/00/75/b7c3e26283233e6bb4cee8ad79043f1b24e77d1de0f8ec524cac8f5f6a99/stream-django-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "06e2799ee368545c9c416db6c3bf119d", "sha256": "60b8e98ad2927fe03361e861be6b1562781e3cb7226c287296f65a82b66559a7"}, "downloads": -1, "filename": "stream-django-1.0.5.tar.gz", "has_sig": false, "md5_digest": "06e2799ee368545c9c416db6c3bf119d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15445, "upload_time": "2014-11-17T11:44:19", "upload_time_iso_8601": "2014-11-17T11:44:19.699489Z", "url": "https://files.pythonhosted.org/packages/03/51/15b1fc428c1b3a13523a6acb1c21ffdf9165c648e04093d740eefab9f54a/stream-django-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "c7072901380ca2e1a73c744214cd12ae", "sha256": "cedb98636bff5672add9564e14da2d0763ebfdb8662306c63f9e39f31727e9be"}, "downloads": -1, "filename": "stream-django-1.0.6.tar.gz", "has_sig": false, "md5_digest": "c7072901380ca2e1a73c744214cd12ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15668, "upload_time": "2014-11-20T08:25:55", "upload_time_iso_8601": "2014-11-20T08:25:55.781402Z", "url": "https://files.pythonhosted.org/packages/ac/e6/0c7898246102490234c866b1ad821780e440b6da6f3485ff087f3b60e433/stream-django-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "e69f87622ed2b3428ced36dbda9d35f4", "sha256": "c9809288be8e6fb52c6d73816fe32ad53d868f58cb50ad5e5b4b05335f87ac7e"}, "downloads": -1, "filename": "stream-django-1.0.7.tar.gz", "has_sig": false, "md5_digest": "e69f87622ed2b3428ced36dbda9d35f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15738, "upload_time": "2014-11-30T16:17:25", "upload_time_iso_8601": "2014-11-30T16:17:25.712977Z", "url": "https://files.pythonhosted.org/packages/96/40/4215bf25aa2ad85a4d53434117b9c95cee8794344a2e1335c97cc55899c8/stream-django-1.0.7.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b0b999868aeaf77886c0accbcfc0a7da", "sha256": "781e49a0896b42dfde2dc68ee34b9afcaf0341ff11a9eb5429b08c7472b436b7"}, "downloads": -1, "filename": "stream-django-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b0b999868aeaf77886c0accbcfc0a7da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15754, "upload_time": "2014-12-19T11:58:52", "upload_time_iso_8601": "2014-12-19T11:58:52.084046Z", "url": "https://files.pythonhosted.org/packages/7d/e8/dd1944309634de45f8100abf7187cf3ee012229e25563f1f7c99b65c3e5c/stream-django-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0dd37a95888105f7930a7fffbf02ccff", "sha256": "e4db48f3268cdf476846dcb48a5ecdca5bc26a7f39f51bdc3669580dacd891ed"}, "downloads": -1, "filename": "stream-django-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0dd37a95888105f7930a7fffbf02ccff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15761, "upload_time": "2014-12-19T13:30:25", "upload_time_iso_8601": "2014-12-19T13:30:25.555092Z", "url": "https://files.pythonhosted.org/packages/97/45/5258e8400eedccf97ba6d3e80534c921a6a8446fd2610859036e0c742dd7/stream-django-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "c9624730950521a356fd1744b5b435b5", "sha256": "ad8a7dca3241a5cfca77cf6281ca8a92d6963eb24ca9bafbd63bc100222c42b5"}, "downloads": -1, "filename": "stream-django-1.2.0.tar.gz", "has_sig": false, "md5_digest": "c9624730950521a356fd1744b5b435b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15785, "upload_time": "2014-12-29T09:17:13", "upload_time_iso_8601": "2014-12-29T09:17:13.641155Z", "url": "https://files.pythonhosted.org/packages/06/f6/5f875b7e1d324167b400883b896c5f00be3e7e6b6bccd8ad9e5dc2c3b750/stream-django-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "a786c01d0b5def4e0535c7fabedde459", "sha256": "8554e042356f8c3f3ebc40733570c0ff68bb71e9cf8670d9c3fbbfe84918c508"}, "downloads": -1, "filename": "stream-django-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a786c01d0b5def4e0535c7fabedde459", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15867, "upload_time": "2015-05-05T09:57:40", "upload_time_iso_8601": "2015-05-05T09:57:40.540118Z", "url": "https://files.pythonhosted.org/packages/d1/50/7879e6f59b098a7b99471ad8c8f9396178cd8de8e75e83ab4991a71095ce/stream-django-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "b0eb4236089d26af3169c2dd524e5575", "sha256": "9ddea29f1ae9025353e6c527bf73c5cea5ab14c287f00a9c4dc278a6339fba6d"}, "downloads": -1, "filename": "stream-django-1.2.2.tar.gz", "has_sig": false, "md5_digest": "b0eb4236089d26af3169c2dd524e5575", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15902, "upload_time": "2015-06-11T11:51:51", "upload_time_iso_8601": "2015-06-11T11:51:51.181248Z", "url": "https://files.pythonhosted.org/packages/ad/b6/7c63af3b43ed8d917d7e08847c001c35248814a29ef853d093ae4e777a82/stream-django-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "a5c26f5ecf4851506b0341bf6fbe6281", "sha256": "a2f071a8f0b5ecf3694fb8d47471ff17853f0a0f7a9e09f1a9dcc579eb1ff5c7"}, "downloads": -1, "filename": "stream-django-1.2.3.tar.gz", "has_sig": false, "md5_digest": "a5c26f5ecf4851506b0341bf6fbe6281", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15901, "upload_time": "2015-06-11T12:34:01", "upload_time_iso_8601": "2015-06-11T12:34:01.376676Z", "url": "https://files.pythonhosted.org/packages/d7/b7/7b706fa54a519175bcd6df13ab307830ea4e78973cda2d8ffded82ac8a90/stream-django-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "e8caedb54a2ebbdfa2b5bfb282811f91", "sha256": "262b06918e59f79f8d5697d98182ebc460054f95d751c0f3a2aa5533d9119c64"}, "downloads": -1, "filename": "stream-django-1.2.4.tar.gz", "has_sig": false, "md5_digest": "e8caedb54a2ebbdfa2b5bfb282811f91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15898, "upload_time": "2015-06-11T12:44:33", "upload_time_iso_8601": "2015-06-11T12:44:33.585345Z", "url": "https://files.pythonhosted.org/packages/be/65/e15604f2601311a97690ac621d20a0791bd9428e28b31c48a94d7bb349a3/stream-django-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "def458290fa49b806f01f62396a04d44", "sha256": "fb1343e5f2499a3164e0af8ca866287c8738e5441ccb04d3bbf7319b510e8475"}, "downloads": -1, "filename": "stream-django-1.2.5.tar.gz", "has_sig": false, "md5_digest": "def458290fa49b806f01f62396a04d44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15895, "upload_time": "2015-08-28T09:29:22", "upload_time_iso_8601": "2015-08-28T09:29:22.285087Z", "url": "https://files.pythonhosted.org/packages/24/34/6ff7656f8f594fa60bdb5b954ea07565175a5437826795483f48a63d05c8/stream-django-1.2.5.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "df57c6899e6ed4b3cb9c369956be1ac7", "sha256": "f5f2b7bf366937163bc59831b770e72abdade51dd86c80e9b46ffe4aa871660e"}, "downloads": -1, "filename": "stream-django-1.2.6.tar.gz", "has_sig": false, "md5_digest": "df57c6899e6ed4b3cb9c369956be1ac7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16021, "upload_time": "2015-09-01T07:35:55", "upload_time_iso_8601": "2015-09-01T07:35:55.303025Z", "url": "https://files.pythonhosted.org/packages/8d/eb/4dc695c40b2fd298d17e00c8f2ca1fe594201e9a67624c4cb2da7dcc3948/stream-django-1.2.6.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "572e62c9aed974456a69fb4235245c2c", "sha256": "44ef8b50015c5aa49678a54758850d1661d06c65c8bcdf2998e087c4be807589"}, "downloads": -1, "filename": "stream-django-1.3.0.tar.gz", "has_sig": false, "md5_digest": "572e62c9aed974456a69fb4235245c2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16596, "upload_time": "2016-06-09T14:56:03", "upload_time_iso_8601": "2016-06-09T14:56:03.251084Z", "url": "https://files.pythonhosted.org/packages/d0/f3/e8306bad200008a9bdefe9369d6c1c366333d8fe4d73d2f2b7bd26973ef3/stream-django-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "e5fc122cf423466331165d44022683cf", "sha256": "92854db3bcf9357c0c3eb5114a8f4ecc24b89e55e9f545c3e30d3f5a825878cc"}, "downloads": -1, "filename": "stream-django-1.3.1.tar.gz", "has_sig": false, "md5_digest": "e5fc122cf423466331165d44022683cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16693, "upload_time": "2016-06-10T09:49:50", "upload_time_iso_8601": "2016-06-10T09:49:50.833672Z", "url": "https://files.pythonhosted.org/packages/99/8e/795db5eceec2a7a245dbc825503b7516dfee3497e88a029daf81b13e0536/stream-django-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "c61a06a9f106bab9a9de5183030e042f", "sha256": "fc49d7cbccf17142d40d366c51adae65f7632e8989ab52b707b84349874cd36f"}, "downloads": -1, "filename": "stream-django-1.3.2.tar.gz", "has_sig": false, "md5_digest": "c61a06a9f106bab9a9de5183030e042f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16758, "upload_time": "2017-02-28T08:55:23", "upload_time_iso_8601": "2017-02-28T08:55:23.917977Z", "url": "https://files.pythonhosted.org/packages/da/42/7b3e4baa37dce489076f8cde1f0af72dc4575b1a499cc82e47f01c85dda0/stream-django-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "f3232fd8a11f004f7052f62e1b05b613", "sha256": "74b80a5a9e90c405211563a30a8b760502611db61ec008c5e2ed9b3eda960ab5"}, "downloads": -1, "filename": "stream-django-1.3.3.tar.gz", "has_sig": false, "md5_digest": "f3232fd8a11f004f7052f62e1b05b613", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17371, "upload_time": "2017-05-02T13:08:43", "upload_time_iso_8601": "2017-05-02T13:08:43.127478Z", "url": "https://files.pythonhosted.org/packages/59/e7/e1ebb1ee3b3544176cf306906e321231c0f7ee43197a3a55f26f43d67ba0/stream-django-1.3.3.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "11a09cbbe31f87d99307dec53139ffa6", "sha256": "e9f6a6e6e1f520b495c0a9b460ee9af0d278722d7ac9fb88c8795bf2d15dd8e8"}, "downloads": -1, "filename": "stream-django-1.4.0.tar.gz", "has_sig": false, "md5_digest": "11a09cbbe31f87d99307dec53139ffa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13726, "upload_time": "2017-12-22T12:02:26", "upload_time_iso_8601": "2017-12-22T12:02:26.136505Z", "url": "https://files.pythonhosted.org/packages/84/a5/5c3fa80c9b82304af7b224685a9b336d2744df1acff35869b0ac17100b25/stream-django-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "6500531c51cc938539874c0ca00f94ef", "sha256": "c3010bba45169c60118919b6308f90b62c9e6c8c73449a3d915fa645e646a01d"}, "downloads": -1, "filename": "stream-django-1.5.0.tar.gz", "has_sig": false, "md5_digest": "6500531c51cc938539874c0ca00f94ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13826, "upload_time": "2018-12-24T12:21:10", "upload_time_iso_8601": "2018-12-24T12:21:10.240692Z", "url": "https://files.pythonhosted.org/packages/d0/c3/d69d82fbcca40d7cc1483a058073acab282d7080284ce3f939e9bd2a0136/stream-django-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "fa4ece5116de7be84fe49360b23e6ec1", "sha256": "bb8a0f0f8caebfa6cb566a56d080c1456ce673b83addeffc1cfb2edbb07679f6"}, "downloads": -1, "filename": "stream_django-1.6.0-py3.7.egg", "has_sig": false, "md5_digest": "fa4ece5116de7be84fe49360b23e6ec1", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 26758, "upload_time": "2019-06-13T21:53:47", "upload_time_iso_8601": "2019-06-13T21:53:47.044720Z", "url": "https://files.pythonhosted.org/packages/cc/74/d0297202171f647437ca994803b20f2a40cc36bde6c11b42d653cd156774/stream_django-1.6.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4c63b0b57a2b154db9b453446521cbc", "sha256": "5ea7739f57fea25341e80b2c1e1fca83c6e27c171b41996f75984208353a8d6b"}, "downloads": -1, "filename": "stream-django-1.6.0.tar.gz", "has_sig": false, "md5_digest": "c4c63b0b57a2b154db9b453446521cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11483, "upload_time": "2019-06-13T21:44:21", "upload_time_iso_8601": "2019-06-13T21:44:21.561560Z", "url": "https://files.pythonhosted.org/packages/bf/54/2bdf6e34c1faf942a495bcb2a97bb362c1ee7fb633c4fb6424ba2085e7bd/stream-django-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "206a33521c0965f2523fc0c49b2873d0", "sha256": "e57d84f5585abc657b879916ffa8f93cb7f4831018867614665aa442191d0f25"}, "downloads": -1, "filename": "stream-django-1.6.1.tar.gz", "has_sig": false, "md5_digest": "206a33521c0965f2523fc0c49b2873d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17066, "upload_time": "2019-06-14T09:42:28", "upload_time_iso_8601": "2019-06-14T09:42:28.167569Z", "url": "https://files.pythonhosted.org/packages/fa/32/7399a05ae781e549b0c1de8744e6698b4489e78dc30de25d3f7c0264754d/stream-django-1.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "206a33521c0965f2523fc0c49b2873d0", "sha256": "e57d84f5585abc657b879916ffa8f93cb7f4831018867614665aa442191d0f25"}, "downloads": -1, "filename": "stream-django-1.6.1.tar.gz", "has_sig": false, "md5_digest": "206a33521c0965f2523fc0c49b2873d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17066, "upload_time": "2019-06-14T09:42:28", "upload_time_iso_8601": "2019-06-14T09:42:28.167569Z", "url": "https://files.pythonhosted.org/packages/fa/32/7399a05ae781e549b0c1de8744e6698b4489e78dc30de25d3f7c0264754d/stream-django-1.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:23 2020"}