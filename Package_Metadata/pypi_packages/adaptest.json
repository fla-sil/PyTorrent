{"info": {"author": "Eduard Kracmar", "author_email": "eduard@adaptiware.com", "bugtrack_url": null, "classifiers": [], "description": "Adaptest - a lightweight YAML wrapper for httest\n================================================\n\n## Overview\n\nThere are many powerful tools for automated HTTP-based tests, and and even in Python:\n\n- [httest](http://htt.sourceforge.net/), HTTP Test tool\n- [pyresttest](https://github.com/svanoort/pyresttest), Python REST Test tool\n- [gabbi](https://github.com/cdent/gabbi), Declarative HTTP Testing tool\n\nBut key features for me were:\n\n- powerful\n- easily maintenable config, ideally using YAML or something similar\n- Cookies support\n- CSRF support\n\nSome of them were HTTP REST and JSON specific. `httest` was best option but not\nvery confortable .htt files especially for Testers with little knowledge of HTTP\nprotocol and programming.\n\nTherefore I wrote `Adaptest` which is basically a `httest` YAML wrapper.\n \n## Features\n \nAs `httest` is really powerful tool, `Adaptest` does not support everything at this stage. But\neven while in alpha stage it supports:\n\n- Sequence HTTP testing\n- Cookies support\n- CSRF support\n- Any request headers\n- Multiple `expect`'s, status, response header tests, body tests\n- Capturing response headers or body using regex to variables and use in later testes\n- POST (application/x-www-form-urlencoded)\n- Auto referer from previous test \n\n## Examples\n\n`Adaptest` turns yaml config of test:\n\n```yml\n---\n\nconfig:\n auto_cookie: on\n\ntests:\n  - name: user profile without auth\n    url: /en/account/\n    method: get\n    headers:\n      - Connection: keep-alive\n    expect:\n      - scope: .\n        value: \"302 Found\"\n      - scope: headers\n        value: \"Location: /en/account/log-in/\"\n\n  - name: login page to get cookie\n    url: /en/account/log-in/\n    method: get\n    expect:\n      - scope: .\n        value: 200 OK\n    match:\n      - scope: headers\n        pattern: \"csrftoken=([^;]+)\"\n        variable: csrf\n\n  - name: login page\n    url: /en/account/log-in/\n    method: post\n    referer: auto\n    headers:\n      - Content-Type: application/x-www-form-urlencoded\n    data:\n      - csrfmiddlewaretoken: $csrf\n      - username: eduard@adaptiware.com\n      - password: Mys3cr3tp455\n    expect:\n      - scope: .\n        value: \"302 Found\"\n\n  - name: user profile after auth\n    url: /en/account/\n    method: get\n    headers:\n      - Connection: keep-alive\n    expect:\n      - scope: .\n        value: 200 OK\n```\n\ninto this:\n\n```\nCLIENT\n_AUTO_COOKIE on\n\n_REQ example.com SSL:443\n_DEBUG user profile without auth\n__GET /en/account/ HTTP/1.1\n__Host: example.com\n__Cookie: AUTO\n__Connection: keep-alive\n__\n_EXPECT . \"302 Found\"\n_EXPECT headers \"Location: /en/account/log-in/\"\n_WAIT\n_CLOSE\n\n_REQ example.com SSL:443\n_DEBUG login page to get cookie\n__GET /en/account/log-in/ HTTP/1.1\n__Host: example.com\n__Cookie: AUTO\n__\n_EXPECT . \"200 OK\"\n_MATCH headers \"csrftoken=([^;]+)\" csrf\n_WAIT\n_CLOSE\n\n_REQ example.com SSL:443\n_DEBUG login page\n__POST /en/account/log-in/ HTTP/1.1\n__Host: example.com\n__Cookie: AUTO\n__Content-Length: AUTO\n__Content-Type: application/x-www-form-urlencoded\n__Referer: https://example.com/en/account/log-in/\n__\n__csrfmiddlewaretoken=$csrf&username=eduard@adaptiware.com&password=Mys3cr3tp455&\n_EXPECT . \"302 Found\"\n_WAIT\n_CLOSE\n\n_REQ example.com SSL:443\n_DEBUG user profile after auth\n__GET /en/account/ HTTP/1.1\n__Host: example.com\n__Cookie: AUTO\n__Connection: keep-alive\n__\n_EXPECT . \"200 OK\"\n_WAIT\n_CLOSE\n\nEND\n\n```\n\n## Installation\n\n### From source\n\n```bash\ngit clone git@github.com:Edke/adaptest.git\ncd adaptest\nsudo python setup.py install\n```\n\n### From PyPI\n\n```bash\npip install adaptest\n```\n\n## Testing\n\n```bash\ncd tests\npytest\n```\n\n## Status\n\nPlease consider this tool as early alpha, not ready for production. Testing is more than welcome.\n\n## Contributing\n\nFor bugs, feature requests or code contributing please use [Github project page](https://github.com/Edke/adaptest).\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Edke/adaptest", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "adaptest", "package_url": "https://pypi.org/project/adaptest/", "platform": "", "project_url": "https://pypi.org/project/adaptest/", "project_urls": {"Homepage": "https://github.com/Edke/adaptest"}, "release_url": "https://pypi.org/project/adaptest/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Adaptest - a lightweight YAML wrapper for httest", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Adaptest - a lightweight YAML wrapper for httest<br>================================================<br><br>## Overview<br><br>There are many powerful tools for automated HTTP-based tests, and and even in Python:<br><br>- [httest](http://htt.sourceforge.net/), HTTP Test tool<br>- [pyresttest](https://github.com/svanoort/pyresttest), Python REST Test tool<br>- [gabbi](https://github.com/cdent/gabbi), Declarative HTTP Testing tool<br><br>But key features for me were:<br><br>- powerful<br>- easily maintenable config, ideally using YAML or something similar<br>- Cookies support<br>- CSRF support<br><br>Some of them were HTTP REST and JSON specific. `httest` was best option but not<br>very confortable .htt files especially for Testers with little knowledge of HTTP<br>protocol and programming.<br><br>Therefore I wrote `Adaptest` which is basically a `httest` YAML wrapper.<br> <br>## Features<br> <br>As `httest` is really powerful tool, `Adaptest` does not support everything at this stage. But<br>even while in alpha stage it supports:<br><br>- Sequence HTTP testing<br>- Cookies support<br>- CSRF support<br>- Any request headers<br>- Multiple `expect`'s, status, response header tests, body tests<br>- Capturing response headers or body using regex to variables and use in later testes<br>- POST (application/x-www-form-urlencoded)<br>- Auto referer from previous test <br><br>## Examples<br><br>`Adaptest` turns yaml config of test:<br><br>```yml<br>---<br><br>config:<br> auto_cookie: on<br><br>tests:<br>  - name: user profile without auth<br>    url: /en/account/<br>    method: get<br>    headers:<br>      - Connection: keep-alive<br>    expect:<br>      - scope: .<br>        value: \"302 Found\"<br>      - scope: headers<br>        value: \"Location: /en/account/log-in/\"<br><br>  - name: login page to get cookie<br>    url: /en/account/log-in/<br>    method: get<br>    expect:<br>      - scope: .<br>        value: 200 OK<br>    match:<br>      - scope: headers<br>        pattern: \"csrftoken=([^;]+)\"<br>        variable: csrf<br><br>  - name: login page<br>    url: /en/account/log-in/<br>    method: post<br>    referer: auto<br>    headers:<br>      - Content-Type: application/x-www-form-urlencoded<br>    data:<br>      - csrfmiddlewaretoken: $csrf<br>      - username: eduard@adaptiware.com<br>      - password: Mys3cr3tp455<br>    expect:<br>      - scope: .<br>        value: \"302 Found\"<br><br>  - name: user profile after auth<br>    url: /en/account/<br>    method: get<br>    headers:<br>      - Connection: keep-alive<br>    expect:<br>      - scope: .<br>        value: 200 OK<br>```<br><br>into this:<br><br>```<br>CLIENT<br>_AUTO_COOKIE on<br><br>_REQ example.com SSL:443<br>_DEBUG user profile without auth<br>__GET /en/account/ HTTP/1.1<br>__Host: example.com<br>__Cookie: AUTO<br>__Connection: keep-alive<br>__<br>_EXPECT . \"302 Found\"<br>_EXPECT headers \"Location: /en/account/log-in/\"<br>_WAIT<br>_CLOSE<br><br>_REQ example.com SSL:443<br>_DEBUG login page to get cookie<br>__GET /en/account/log-in/ HTTP/1.1<br>__Host: example.com<br>__Cookie: AUTO<br>__<br>_EXPECT . \"200 OK\"<br>_MATCH headers \"csrftoken=([^;]+)\" csrf<br>_WAIT<br>_CLOSE<br><br>_REQ example.com SSL:443<br>_DEBUG login page<br>__POST /en/account/log-in/ HTTP/1.1<br>__Host: example.com<br>__Cookie: AUTO<br>__Content-Length: AUTO<br>__Content-Type: application/x-www-form-urlencoded<br>__Referer: https://example.com/en/account/log-in/<br>__<br>__csrfmiddlewaretoken=$csrf&amp;username=eduard@adaptiware.com&amp;password=Mys3cr3tp455&amp;<br>_EXPECT . \"302 Found\"<br>_WAIT<br>_CLOSE<br><br>_REQ example.com SSL:443<br>_DEBUG user profile after auth<br>__GET /en/account/ HTTP/1.1<br>__Host: example.com<br>__Cookie: AUTO<br>__Connection: keep-alive<br>__<br>_EXPECT . \"200 OK\"<br>_WAIT<br>_CLOSE<br><br>END<br><br>```<br><br>## Installation<br><br>### From source<br><br>```bash<br>git clone git@github.com:Edke/adaptest.git<br>cd adaptest<br>sudo python setup.py install<br>```<br><br>### From PyPI<br><br>```bash<br>pip install adaptest<br>```<br><br>## Testing<br><br>```bash<br>cd tests<br>pytest<br>```<br><br>## Status<br><br>Please consider this tool as early alpha, not ready for production. Testing is more than welcome.<br><br>## Contributing<br><br>For bugs, feature requests or code contributing please use [Github project page](https://github.com/Edke/adaptest).<br>\n          </div>"}, "last_serial": 2493401, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2f3c56cace10cc74072b86297786d901", "sha256": "aa839bfa2e37038da578934caa9ed3f13682b7cc1fe9308d16e703555d893789"}, "downloads": -1, "filename": "adaptest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2f3c56cace10cc74072b86297786d901", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8530, "upload_time": "2016-12-01T09:27:09", "upload_time_iso_8601": "2016-12-01T09:27:09.158679Z", "url": "https://files.pythonhosted.org/packages/84/b0/c48bffc3aff3668c34e83efe8c3d396f2a12585b74df351f39d75e25448d/adaptest-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "88a70bc20cdde8e1a9c3f5d0eb46478e", "sha256": "d57224849358139e2bbf244668afb1b6a0a15738348b801f8e9bb1129559a797"}, "downloads": -1, "filename": "adaptest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "88a70bc20cdde8e1a9c3f5d0eb46478e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8587, "upload_time": "2016-12-01T10:23:55", "upload_time_iso_8601": "2016-12-01T10:23:55.107294Z", "url": "https://files.pythonhosted.org/packages/3c/66/aeb9d3fef1fb8cdc4bed9d35e9b68e65b814fb05b2af14337580e947f7ea/adaptest-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88a70bc20cdde8e1a9c3f5d0eb46478e", "sha256": "d57224849358139e2bbf244668afb1b6a0a15738348b801f8e9bb1129559a797"}, "downloads": -1, "filename": "adaptest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "88a70bc20cdde8e1a9c3f5d0eb46478e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8587, "upload_time": "2016-12-01T10:23:55", "upload_time_iso_8601": "2016-12-01T10:23:55.107294Z", "url": "https://files.pythonhosted.org/packages/3c/66/aeb9d3fef1fb8cdc4bed9d35e9b68e65b814fb05b2af14337580e947f7ea/adaptest-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:38 2020"}