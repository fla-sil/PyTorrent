{"info": {"author": "Sean Chen", "author_email": "sean.chen@leocorn.com", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "`Check the GitHub Page <http://github.com/leocornus/leocornus.recipe.ci>`_ for details document\n\nGeneral Usage\n*******************\n\n.. contents:: Table of Contents\n   :depth: 5\n\nExplain the story here.\n\nWhat's the story\n----------------\n\nContinuous Integration (CI) testing for small and medium projects.\n\n\nPreparing the case\n------------------\n\nImport modules.\n::\n\n  >>> from fabric.operations import local\n  >>> from fabric.context_managers import lcd\n\nCreate the working folder and the build folder.\nWe should have the absolute path for both.\n::\n\n  >>> import os\n  >>> test_folder = tmpdir('test')\n  >>> build_folder = tmpdir('builds')\n\nWe will use the leocornus demo repository \n**leocornus-ci-projects** for testing.\n::\n\n  >>> repo_url = 'https://github.com/leocornus/leocornus-ci-projects.git'\n\nget ready the working folder.\n::\n\n  >>> with lcd(test_folder):\n  ...     clone = local('git clone %s' % repo_url, True)\n  [localhost] local: git clone ...\n  >>> prj_folder = os.path.join(test_folder, 'leocornus-ci-projects')\n\nGet the most recent 5 commits for testing.\n::\n\n  >>> with lcd(prj_folder):\n  ...     local('git pull', True)\n  ...     ids = local('git log --format=%h -5 .', True)\n  [localhost] local: git pull\n  'Already up-to-date.'\n  [localhost] local: git log ...\n  >>> commit_ids = ids.splitlines()\n  >>> len(commit_ids)\n  5\n\nPrepare a buildlog\n~~~~~~~~~~~~~~~~~~\n\nThe buildlog will have only one line to track the last build id \nand commit id.\nWe will use the number 2 commit as an example for the last build.\nThe first entry of the git log is the lastest commit by default.\nSo we will only build the latest commit.\n::\n\n  >>> logdata = \"%s-%s\" % (100, commit_ids[1])\n  >>> write(prj_folder, '.buildlog', logdata)\n  >>> print(logdata)\n  100-...\n\nThe file .buildlog will have the content like following::\n\n  100-80fc8b4\n\nPrepare a cicfg\n~~~~~~~~~~~~~~~\n\nthe **.cicfg** will be searched from the following location:\n\n- project folder, while user could customize it by project.\n- user's home folder **~/.cicfg**, it will be override by the \n  same file in project folder.\n\nWe will use the .cicfg file in suer's home folder for testing.\nThe method **expanduser** in build testing context will return\na temporary folder.\nWe will not test this for now.\n::\n\n  ...>>> home_folder = os.path.expanduser(\"~\")\n  ...>>> print(home_folder)\n  ...>>> ci_scripts = \"\"\"\n  ...... [ci]\n  ...... script:\n  ......   ls -la\n  ...... \"\"\"\n  ...>>> write(home_folder, '.cicfg', ci_scripts)\n\nPrepare a mwrc file\n~~~~~~~~~~~~~~~~~~~\n\nGet ready a sample mwrc file for testing.\nWe will save the mwrc file in working folder.\n::\n\n  >>> rc_file = os.path.join(prj_folder, '.mwrc')\n  >>> mwrc = open(rc_file, 'w')\n  >>> cfg_data = \"\"\"\n  ... [mwclient]\n  ... update_wiki = no\n  ... host = mediawiki.site.com\n  ... path = /wiki/\n  ... username = seanchen\n  ... password = password\n  ... \n  ... [wiki page]\n  ... title: Project:CI/Builds/%(build_id)s-%(commit_id)s\n  ... comment: build log for commit %(commit_id)s\n  ... content: \n  ...   %(build_status)s\n  ...   ===Commit===\n  ...   <div>%(commit_message)s</div>\n  ...   ===Build Log===\n  ...   <div>%(build_log)s</div>\n  ... \"\"\"\n  >>> mwrc.write(cfg_data)\n  >>> mwrc.close()\n\nSet up the ci buildout\n----------------------\n\nGet ready a buildout to execute CI testing.\n::\n\n  >>> write(sample_buildout, 'buildout.cfg',\n  ... \"\"\"\n  ... [buildout]\n  ... parts = test-ci\n  ...\n  ... [test-ci]\n  ... recipe = leocornus.recipe.ci\n  ... working-folder = %(prj_folder)s\n  ... builds-folder = %(builds_folder)s\n  ... wiki-rc-file = %(rc_file)s\n  ... \"\"\" % dict(prj_folder=prj_folder, builds_folder=build_folder,\n  ...            rc_file=rc_file))\n  >>> ls(sample_buildout)\n  d bin\n  - buildout.cfg\n  d develop-eggs\n  d eggs\n  d parts\n\nExecute the buildout\n--------------------\n\nrun the buildout::\n\n  >>> os.chdir(sample_buildout)\n  >>> print(system(buildout))\n  Installing test-ci.\n  test-ci: Working Folder ...\n  test-ci: Builds Folder ...\n  test-ci: Save Builds 0\n  test-ci: Last build id 100\n  test-ci: Last commit id ...\n  test-ci: Total number of commits pending build 1\n  test-ci: Next commit to build 101-...\n  test-ci: Repository Remote: https://github.com/...\n  test-ci: Repository Branch: master\n  test-ci: Project Folder: projects/...\n  test-ci: Get ready build folder: .../builds/101/...\n  test-ci: Execute test script: npm test\n  test-ci: Result: Build success!\n  test-ci: Convert build log to HTML.\n  test-ci: Wiki page title: Project:CI/Builds/101-...\n  test-ci: Wiki update is OFF\n  ...\n\nbuildout won't store those Fabric local output.\n::\n\n  [localhost] local: git pull\n  [localhost] local: git log ...\n  test-ci: Total number of commits pending build 1\n  test-ci: Next commit to build 101-...\n  [localhost] local: echo 101-... > .buildlog\n  [localhost] local: git remote -v\n  [localhost] local: git branch\n  [localhost] local: git log --name-only --format=%h -1 ...\n  test-ci: Repository Remote: https://github.com/leocornus/leocourns-ci-projects.git\n  test-ci: Repository Branch: master\n  test-ci: Project Folder: projects/...\n  [localhost] local: echo projects/...\n  test-ci: Get ready build folder: .../builds/101/...\n  test-ci: Result: Build success!\n  ...\n\nexplore the build log\n---------------------\n\nRead the build log.\n::\n\n  >>> log_file = '%s/101.log' % build_folder\n  >>> blog = open(log_file)\n  >>> logs = blog.read()\n  >>> #print(logs)\n  >>> 'git init' in logs\n  True\n\nquick test for converting build log\n::\n\n  >>> from subprocess import Popen\n  >>> from subprocess import check_output\n  >>> from subprocess import PIPE\n  >>> cat = Popen(['cat', log_file], stdout=PIPE)\n  >>> html_log = check_output(['aha', '-b', '--no-header'], stdin=cat.stdout)\n  >>> #print(html_log)\n  >>> 'color:lime' in html_log\n  True\n\nTear down\n---------\n\nThe **buildoutTearDown** should clean up temp directories.\n\nclean the .cicfg file.\n::\n\n  ...>>> remove = local('rm -rf %s' % cicfg, True)\n  ...[localhost] local: rm -rf ...\n\nDownload\n***************", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/leocornus/leocornus.recipe.ci", "keywords": "development buildout recipe package ci", "license": "GPLv2", "maintainer": null, "maintainer_email": null, "name": "leocornus.recipe.ci", "package_url": "https://pypi.org/project/leocornus.recipe.ci/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/leocornus.recipe.ci/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/leocornus/leocornus.recipe.ci"}, "release_url": "https://pypi.org/project/leocornus.recipe.ci/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "zc.buildout recipe for manage and execute CI test cases.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://github.com/leocornus/leocornus.recipe.ci\" rel=\"nofollow\">Check the GitHub Page</a> for details document</p>\n<div id=\"general-usage\">\n<h2><a href=\"#id1\" rel=\"nofollow\">General Usage</a></h2>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#general-usage\" id=\"id1\" rel=\"nofollow\">General Usage</a><ul>\n<li><a href=\"#what-s-the-story\" id=\"id2\" rel=\"nofollow\">What\u2019s the story</a></li>\n<li><a href=\"#preparing-the-case\" id=\"id3\" rel=\"nofollow\">Preparing the case</a><ul>\n<li><a href=\"#prepare-a-buildlog\" id=\"id4\" rel=\"nofollow\">Prepare a buildlog</a></li>\n<li><a href=\"#prepare-a-cicfg\" id=\"id5\" rel=\"nofollow\">Prepare a cicfg</a></li>\n<li><a href=\"#prepare-a-mwrc-file\" id=\"id6\" rel=\"nofollow\">Prepare a mwrc file</a></li>\n</ul>\n</li>\n<li><a href=\"#set-up-the-ci-buildout\" id=\"id7\" rel=\"nofollow\">Set up the ci buildout</a></li>\n<li><a href=\"#execute-the-buildout\" id=\"id8\" rel=\"nofollow\">Execute the buildout</a></li>\n<li><a href=\"#explore-the-build-log\" id=\"id9\" rel=\"nofollow\">explore the build log</a></li>\n<li><a href=\"#tear-down\" id=\"id10\" rel=\"nofollow\">Tear down</a></li>\n</ul>\n</li>\n<li><a href=\"#download\" id=\"id11\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<p>Explain the story here.</p>\n<div id=\"what-s-the-story\">\n<h3><a href=\"#id2\" rel=\"nofollow\">What\u2019s the story</a></h3>\n<p>Continuous Integration (CI) testing for small and medium projects.</p>\n</div>\n<div id=\"preparing-the-case\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Preparing the case</a></h3>\n<p>Import modules.</p>\n<pre>&gt;&gt;&gt; from fabric.operations import local\n&gt;&gt;&gt; from fabric.context_managers import lcd\n</pre>\n<p>Create the working folder and the build folder.\nWe should have the absolute path for both.</p>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; test_folder = tmpdir('test')\n&gt;&gt;&gt; build_folder = tmpdir('builds')\n</pre>\n<p>We will use the leocornus demo repository\n<strong>leocornus-ci-projects</strong> for testing.</p>\n<pre>&gt;&gt;&gt; repo_url = 'https://github.com/leocornus/leocornus-ci-projects.git'\n</pre>\n<p>get ready the working folder.</p>\n<pre>&gt;&gt;&gt; with lcd(test_folder):\n...     clone = local('git clone %s' % repo_url, True)\n[localhost] local: git clone ...\n&gt;&gt;&gt; prj_folder = os.path.join(test_folder, 'leocornus-ci-projects')\n</pre>\n<p>Get the most recent 5 commits for testing.</p>\n<pre>&gt;&gt;&gt; with lcd(prj_folder):\n...     local('git pull', True)\n...     ids = local('git log --format=%h -5 .', True)\n[localhost] local: git pull\n'Already up-to-date.'\n[localhost] local: git log ...\n&gt;&gt;&gt; commit_ids = ids.splitlines()\n&gt;&gt;&gt; len(commit_ids)\n5\n</pre>\n<div id=\"prepare-a-buildlog\">\n<h4><a href=\"#id4\" rel=\"nofollow\">Prepare a buildlog</a></h4>\n<p>The buildlog will have only one line to track the last build id\nand commit id.\nWe will use the number 2 commit as an example for the last build.\nThe first entry of the git log is the lastest commit by default.\nSo we will only build the latest commit.</p>\n<pre>&gt;&gt;&gt; logdata = \"%s-%s\" % (100, commit_ids[1])\n&gt;&gt;&gt; write(prj_folder, '.buildlog', logdata)\n&gt;&gt;&gt; print(logdata)\n100-...\n</pre>\n<p>The file .buildlog will have the content like following:</p>\n<pre>100-80fc8b4\n</pre>\n</div>\n<div id=\"prepare-a-cicfg\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Prepare a cicfg</a></h4>\n<p>the <strong>.cicfg</strong> will be searched from the following location:</p>\n<ul>\n<li>project folder, while user could customize it by project.</li>\n<li>user\u2019s home folder <strong>~/.cicfg</strong>, it will be override by the\nsame file in project folder.</li>\n</ul>\n<p>We will use the .cicfg file in suer\u2019s home folder for testing.\nThe method <strong>expanduser</strong> in build testing context will return\na temporary folder.\nWe will not test this for now.</p>\n<pre>...&gt;&gt;&gt; home_folder = os.path.expanduser(\"~\")\n...&gt;&gt;&gt; print(home_folder)\n...&gt;&gt;&gt; ci_scripts = \"\"\"\n...... [ci]\n...... script:\n......   ls -la\n...... \"\"\"\n...&gt;&gt;&gt; write(home_folder, '.cicfg', ci_scripts)\n</pre>\n</div>\n<div id=\"prepare-a-mwrc-file\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Prepare a mwrc file</a></h4>\n<p>Get ready a sample mwrc file for testing.\nWe will save the mwrc file in working folder.</p>\n<pre>&gt;&gt;&gt; rc_file = os.path.join(prj_folder, '.mwrc')\n&gt;&gt;&gt; mwrc = open(rc_file, 'w')\n&gt;&gt;&gt; cfg_data = \"\"\"\n... [mwclient]\n... update_wiki = no\n... host = mediawiki.site.com\n... path = /wiki/\n... username = seanchen\n... password = password\n...\n... [wiki page]\n... title: Project:CI/Builds/%(build_id)s-%(commit_id)s\n... comment: build log for commit %(commit_id)s\n... content:\n...   %(build_status)s\n...   ===Commit===\n...   &lt;div&gt;%(commit_message)s&lt;/div&gt;\n...   ===Build Log===\n...   &lt;div&gt;%(build_log)s&lt;/div&gt;\n... \"\"\"\n&gt;&gt;&gt; mwrc.write(cfg_data)\n&gt;&gt;&gt; mwrc.close()\n</pre>\n</div>\n</div>\n<div id=\"set-up-the-ci-buildout\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Set up the ci buildout</a></h3>\n<p>Get ready a buildout to execute CI testing.</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = test-ci\n...\n... [test-ci]\n... recipe = leocornus.recipe.ci\n... working-folder = %(prj_folder)s\n... builds-folder = %(builds_folder)s\n... wiki-rc-file = %(rc_file)s\n... \"\"\" % dict(prj_folder=prj_folder, builds_folder=build_folder,\n...            rc_file=rc_file))\n&gt;&gt;&gt; ls(sample_buildout)\nd bin\n- buildout.cfg\nd develop-eggs\nd eggs\nd parts\n</pre>\n</div>\n<div id=\"execute-the-buildout\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Execute the buildout</a></h3>\n<p>run the buildout:</p>\n<pre>&gt;&gt;&gt; os.chdir(sample_buildout)\n&gt;&gt;&gt; print(system(buildout))\nInstalling test-ci.\ntest-ci: Working Folder ...\ntest-ci: Builds Folder ...\ntest-ci: Save Builds 0\ntest-ci: Last build id 100\ntest-ci: Last commit id ...\ntest-ci: Total number of commits pending build 1\ntest-ci: Next commit to build 101-...\ntest-ci: Repository Remote: https://github.com/...\ntest-ci: Repository Branch: master\ntest-ci: Project Folder: projects/...\ntest-ci: Get ready build folder: .../builds/101/...\ntest-ci: Execute test script: npm test\ntest-ci: Result: Build success!\ntest-ci: Convert build log to HTML.\ntest-ci: Wiki page title: Project:CI/Builds/101-...\ntest-ci: Wiki update is OFF\n...\n</pre>\n<p>buildout won\u2019t store those Fabric local output.</p>\n<pre>[localhost] local: git pull\n[localhost] local: git log ...\ntest-ci: Total number of commits pending build 1\ntest-ci: Next commit to build 101-...\n[localhost] local: echo 101-... &gt; .buildlog\n[localhost] local: git remote -v\n[localhost] local: git branch\n[localhost] local: git log --name-only --format=%h -1 ...\ntest-ci: Repository Remote: https://github.com/leocornus/leocourns-ci-projects.git\ntest-ci: Repository Branch: master\ntest-ci: Project Folder: projects/...\n[localhost] local: echo projects/...\ntest-ci: Get ready build folder: .../builds/101/...\ntest-ci: Result: Build success!\n...\n</pre>\n</div>\n<div id=\"explore-the-build-log\">\n<h3><a href=\"#id9\" rel=\"nofollow\">explore the build log</a></h3>\n<p>Read the build log.</p>\n<pre>&gt;&gt;&gt; log_file = '%s/101.log' % build_folder\n&gt;&gt;&gt; blog = open(log_file)\n&gt;&gt;&gt; logs = blog.read()\n&gt;&gt;&gt; #print(logs)\n&gt;&gt;&gt; 'git init' in logs\nTrue\n</pre>\n<p>quick test for converting build log</p>\n<pre>&gt;&gt;&gt; from subprocess import Popen\n&gt;&gt;&gt; from subprocess import check_output\n&gt;&gt;&gt; from subprocess import PIPE\n&gt;&gt;&gt; cat = Popen(['cat', log_file], stdout=PIPE)\n&gt;&gt;&gt; html_log = check_output(['aha', '-b', '--no-header'], stdin=cat.stdout)\n&gt;&gt;&gt; #print(html_log)\n&gt;&gt;&gt; 'color:lime' in html_log\nTrue\n</pre>\n</div>\n<div id=\"tear-down\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Tear down</a></h3>\n<p>The <strong>buildoutTearDown</strong> should clean up temp directories.</p>\n<p>clean the .cicfg file.</p>\n<pre>...&gt;&gt;&gt; remove = local('rm -rf %s' % cicfg, True)\n...[localhost] local: rm -rf ...\n</pre>\n</div>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 1573798, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "795ffbb2a5f2461ea1e1aaf0acfb0401", "sha256": "bc600871a14f951b2c273ab717f317f1168de9d755089f98bf6dc47361d6a624"}, "downloads": -1, "filename": "leocornus.recipe.ci-0.0.1.tar.gz", "has_sig": false, "md5_digest": "795ffbb2a5f2461ea1e1aaf0acfb0401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18307, "upload_time": "2015-06-01T18:55:20", "upload_time_iso_8601": "2015-06-01T18:55:20.243476Z", "url": "https://files.pythonhosted.org/packages/af/e0/403945688957a35dc1db06bbb0ec15e0f68faa3559766aed10e711f81bc3/leocornus.recipe.ci-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "795ffbb2a5f2461ea1e1aaf0acfb0401", "sha256": "bc600871a14f951b2c273ab717f317f1168de9d755089f98bf6dc47361d6a624"}, "downloads": -1, "filename": "leocornus.recipe.ci-0.0.1.tar.gz", "has_sig": false, "md5_digest": "795ffbb2a5f2461ea1e1aaf0acfb0401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18307, "upload_time": "2015-06-01T18:55:20", "upload_time_iso_8601": "2015-06-01T18:55:20.243476Z", "url": "https://files.pythonhosted.org/packages/af/e0/403945688957a35dc1db06bbb0ec15e0f68faa3559766aed10e711f81bc3/leocornus.recipe.ci-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:59 2020"}