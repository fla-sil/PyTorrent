{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "``ftw.jsondump`` provides JSON representations for Plone objects.\nBy using adapters the JSON representation can easily be customized.\n\n.. contents:: Table of Contents\n\n\nInstallation\n============\n\nAdd the package as dependency to your setup.py:\n\n.. code:: python\n\n  setup(...\n        install_requires=[\n          ...\n          'ftw.jsondump',\n        ])\n\nor to your buildout configuration:\n\n.. code:: ini\n\n  [instance]\n  eggs += ftw.jsondump\n\nand rerun buildout.\n\n\nUsage\n=====\n\nFor extracting the JSON of an object, use the ``IJSONRepresentation`` adapter:\n\n.. code:: python\n\n  from ftw.jsondump.interfaces import IJSONRepresentation\n  from zope.component import getMultiAdapter\n\n  json_representation = getMultiAdapter((context, request), IJSONRepresentation)\n  print json_representation.json()\n\n\nPartials\n--------\n\nThe JSON is built using \"partials\", which are merged into one ``dict``.\n\nThere are various default partials:\n\n- ``metadata`` partial, providing infos such as ``_type`` and ``_class``\n- ``fields`` partial extracting Archetypes and Dexterity field data\n- ``uid`` partial, providing the UID in ``_uid``\n- ``localroles`` partial, extracting the local roles\n- ``workflow`` partial, providing the ``_workflow_chain`` and the ``_workflow_history``\n- ``properties`` partial, providing local properties in ``_properties``\n- ``interfaces`` partial, extracting the directly provided interfaces in ``_directly_provided``\n\n**Selecting partials**\n\nThe desired partials can be selected when extracting the JSON:\n\n.. code:: python\n\n  from ftw.jsondump.interfaces import IJSONRepresentation\n  from zope.component import getMultiAdapter\n\n  json_representation = getMultiAdapter((context, request), IJSONRepresentation)\n  print json_representation.json(only=['fields', 'metadata'])\n  print json_representation.json(exclude=['localroles'])\n\n\n**File blob data**\nThe file data is extracted by default as base64 encoded string and embedded in the\nJSON document.\n\nThis fieldata can be excluded with the ``filedata`` configuration:\n\n.. code:: python\n\n  from ftw.jsondump.interfaces import IJSONRepresentation\n  from zope.component import getMultiAdapter\n\n  json_representation = getMultiAdapter((context, request), IJSONRepresentation)\n  print json_representation.json(filedata=False)\n\nFor doing custom things with the filedata, a callback can be used:\n\n.. code:: python\n\n  from ftw.jsondump.interfaces import IJSONRepresentation\n  from zope.component import getMultiAdapter\n\n  def file_callback(context, key, fieldname, data, filename, mimetype, jsondata):\n      with open('./tmp/' + filename, 'w+b') as target:\n        target.write(data)\n\n  json_representation = getMultiAdapter((context, request), IJSONRepresentation)\n  print json_representation.json(file_callback=file_callback)\n\n\nCreating custom partials\n------------------------\n\nCustom partials can easily be registered as adapter:\n\n*configure.zcml:*\n\n.. code:: xml\n\n  <adapter factory=\".partial.CustomAnnotations\" name=\"custom_annotations\" />\n\n\n*partial.py:*\n\n.. code:: python\n\n  from ftw.jsondump.interfaces import IPartial\n  from my.package.interfaces import ICustomContent\n  from zope.annotation import IAnnotations\n  from zope.component import adapts\n  from zope.interface import Interface\n  from zope.interface import implements\n\n  class CustomAnnotations(object):\n      implements(IPartial)\n      adapts(ICustomContent, Interface)\n\n\n      def __init__(self, context, request):\n          self.context = context\n          self.request = request\n\n      def __call__(self, config):\n          annotations = IAnnotations(self.context)\n          return {'_custom_annotations': dict(annotations.get('custom_config'))}\n\n\nField data extractors\n---------------------\n\nThe Archetypes and Dexterity partial use field data extractor adapters for extracting\nthe field data and converting it to a JSON serializable value.\n\nCustom extractors can easily be registered for custom fields:\n\n*configure.zcml:*\n\n.. code:: xml\n\n    <adapter factory=\".extractor.CustomFieldExtractor\" />\n\n*extractor.py:*\n\n.. code:: python\n\n  from ftw.jsondump.interfaces import IFieldExtractor\n  from my.package import ICustomField\n  from zope.component import adapts\n  from zope.interface import implements\n  from zope.interface import Interface\n\n\n  class CustomFieldExtractor(object):\n      implements(IFieldExtractor)\n      adapts(Interface, Interface, ICustomField)\n\n      def __init__(self, context, request, field):\n          self.context = context\n          self.request = request\n          self.field = field\n\n      def extract(self, name, data, config):\n          value = self.field.get(self.context)\n          value = value.prepare_for_serialization()\n          data.update({name: value})\n\n\nLinks\n=====\n\n- Github: https://github.com/4teamwork/ftw.jsondump\n- Issues: https://github.com/4teamwork/ftw.jsondump/issues\n- Pypi: http://pypi.python.org/pypi/ftw.jsondump\n- Continuous integration: https://jenkins.4teamwork.ch/search?q=ftw.jsondump\n\nCopyright\n=========\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.jsondump`` is licensed under GNU General Public License, version 2.\n\nChangelog\n=========\n\n1.1.0 (2015-10-11)\n------------------\n\n- Change file_callback signature to also include the key used in the dict.\n  For dexterity content, the key is different than the fieldname because it\n  is prefixed with the interface dottedname.\n\n  - Old: ``file_callback(context, fieldname, data, filename, mimetype, jsondata)``\n  - New: ``file_callback(context, key, fieldname, data, filename, mimetype, jsondata)``\n\n  [jone]\n\n- Dexterity: support exporting RichTextValue objects.\n  [jone]\n\n\n1.0.0 (2015-05-05)\n------------------\n\n- Initial implementation\n  [maethu, jone]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/4teamwork/ftw.jsondump", "keywords": "ftw json representation serialize dump", "license": "GPL2", "maintainer": null, "maintainer_email": null, "name": "ftw.jsondump", "package_url": "https://pypi.org/project/ftw.jsondump/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ftw.jsondump/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/4teamwork/ftw.jsondump"}, "release_url": "https://pypi.org/project/ftw.jsondump/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "JSON representation for plone content", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>ftw.jsondump</tt> provides JSON representations for Plone objects.\nBy using adapters the JSON representation can easily be customized.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#partials\" id=\"id5\" rel=\"nofollow\">Partials</a></li>\n<li><a href=\"#creating-custom-partials\" id=\"id6\" rel=\"nofollow\">Creating custom partials</a></li>\n<li><a href=\"#field-data-extractors\" id=\"id7\" rel=\"nofollow\">Field data extractors</a></li>\n</ul>\n</li>\n<li><a href=\"#links\" id=\"id8\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#copyright\" id=\"id9\" rel=\"nofollow\">Copyright</a></li>\n<li><a href=\"#changelog\" id=\"id10\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id11\" rel=\"nofollow\">1.1.0 (2015-10-11)</a></li>\n<li><a href=\"#id2\" id=\"id12\" rel=\"nofollow\">1.0.0 (2015-05-05)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Installation</a></h2>\n<p>Add the package as dependency to your setup.py:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"o\">...</span>\n      <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"o\">...</span>\n        <span class=\"s1\">'ftw.jsondump'</span><span class=\"p\">,</span>\n      <span class=\"p\">])</span>\n</pre>\n<p>or to your buildout configuration:</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">eggs +</span><span class=\"o\">=</span> <span class=\"s\">ftw.jsondump</span>\n</pre>\n<p>and rerun buildout.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Usage</a></h2>\n<p>For extracting the JSON of an object, use the <tt>IJSONRepresentation</tt> adapter:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.jsondump.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IJSONRepresentation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n\n<span class=\"n\">json_representation</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">IJSONRepresentation</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">json_representation</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<div id=\"partials\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Partials</a></h3>\n<p>The JSON is built using \u201cpartials\u201d, which are merged into one <tt>dict</tt>.</p>\n<p>There are various default partials:</p>\n<ul>\n<li><tt>metadata</tt> partial, providing infos such as <tt>_type</tt> and <tt>_class</tt></li>\n<li><tt>fields</tt> partial extracting Archetypes and Dexterity field data</li>\n<li><tt>uid</tt> partial, providing the UID in <tt>_uid</tt></li>\n<li><tt>localroles</tt> partial, extracting the local roles</li>\n<li><tt>workflow</tt> partial, providing the <tt>_workflow_chain</tt> and the <tt>_workflow_history</tt></li>\n<li><tt>properties</tt> partial, providing local properties in <tt>_properties</tt></li>\n<li><tt>interfaces</tt> partial, extracting the directly provided interfaces in <tt>_directly_provided</tt></li>\n</ul>\n<p><strong>Selecting partials</strong></p>\n<p>The desired partials can be selected when extracting the JSON:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.jsondump.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IJSONRepresentation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n\n<span class=\"n\">json_representation</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">IJSONRepresentation</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">json_representation</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">only</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'fields'</span><span class=\"p\">,</span> <span class=\"s1\">'metadata'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span> <span class=\"n\">json_representation</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'localroles'</span><span class=\"p\">])</span>\n</pre>\n<p><strong>File blob data</strong>\nThe file data is extracted by default as base64 encoded string and embedded in the\nJSON document.</p>\n<p>This fieldata can be excluded with the <tt>filedata</tt> configuration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.jsondump.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IJSONRepresentation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n\n<span class=\"n\">json_representation</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">IJSONRepresentation</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">json_representation</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">filedata</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>For doing custom things with the filedata, a callback can be used:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.jsondump.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IJSONRepresentation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">file_callback</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">fieldname</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">mimetype</span><span class=\"p\">,</span> <span class=\"n\">jsondata</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./tmp/'</span> <span class=\"o\">+</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">'w+b'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">target</span><span class=\"p\">:</span>\n      <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">json_representation</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">IJSONRepresentation</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">json_representation</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">file_callback</span><span class=\"o\">=</span><span class=\"n\">file_callback</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"creating-custom-partials\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Creating custom partials</a></h3>\n<p>Custom partials can easily be registered as adapter:</p>\n<p><em>configure.zcml:</em></p>\n<pre><span class=\"nt\">&lt;adapter</span> <span class=\"na\">factory=</span><span class=\"s\">\".partial.CustomAnnotations\"</span> <span class=\"na\">name=</span><span class=\"s\">\"custom_annotations\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p><em>partial.py:</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.jsondump.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IPartial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my.package.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ICustomContent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.annotation</span> <span class=\"kn\">import</span> <span class=\"n\">IAnnotations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">adapts</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implements</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomAnnotations</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">implements</span><span class=\"p\">(</span><span class=\"n\">IPartial</span><span class=\"p\">)</span>\n    <span class=\"n\">adapts</span><span class=\"p\">(</span><span class=\"n\">ICustomContent</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n        <span class=\"n\">annotations</span> <span class=\"o\">=</span> <span class=\"n\">IAnnotations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'_custom_annotations'</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">annotations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'custom_config'</span><span class=\"p\">))}</span>\n</pre>\n</div>\n<div id=\"field-data-extractors\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Field data extractors</a></h3>\n<p>The Archetypes and Dexterity partial use field data extractor adapters for extracting\nthe field data and converting it to a JSON serializable value.</p>\n<p>Custom extractors can easily be registered for custom fields:</p>\n<p><em>configure.zcml:</em></p>\n<pre><span class=\"nt\">&lt;adapter</span> <span class=\"na\">factory=</span><span class=\"s\">\".extractor.CustomFieldExtractor\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p><em>extractor.py:</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.jsondump.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IFieldExtractor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my.package</span> <span class=\"kn\">import</span> <span class=\"n\">ICustomField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">adapts</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implements</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomFieldExtractor</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">implements</span><span class=\"p\">(</span><span class=\"n\">IFieldExtractor</span><span class=\"p\">)</span>\n    <span class=\"n\">adapts</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">ICustomField</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">field</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">prepare_for_serialization</span><span class=\"p\">()</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">})</span>\n</pre>\n</div>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Links</a></h2>\n<ul>\n<li>Github: <a href=\"https://github.com/4teamwork/ftw.jsondump\" rel=\"nofollow\">https://github.com/4teamwork/ftw.jsondump</a></li>\n<li>Issues: <a href=\"https://github.com/4teamwork/ftw.jsondump/issues\" rel=\"nofollow\">https://github.com/4teamwork/ftw.jsondump/issues</a></li>\n<li>Pypi: <a href=\"http://pypi.python.org/pypi/ftw.jsondump\" rel=\"nofollow\">http://pypi.python.org/pypi/ftw.jsondump</a></li>\n<li>Continuous integration: <a href=\"https://jenkins.4teamwork.ch/search?q=ftw.jsondump\" rel=\"nofollow\">https://jenkins.4teamwork.ch/search?q=ftw.jsondump</a></li>\n</ul>\n</div>\n<div id=\"copyright\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Copyright</a></h2>\n<p>This package is copyright by <a href=\"http://www.4teamwork.ch/\" rel=\"nofollow\">4teamwork</a>.</p>\n<p><tt>ftw.jsondump</tt> is licensed under GNU General Public License, version 2.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id11\" rel=\"nofollow\">1.1.0 (2015-10-11)</a></h3>\n<ul>\n<li><p>Change file_callback signature to also include the key used in the dict.\nFor dexterity content, the key is different than the fieldname because it\nis prefixed with the interface dottedname.</p>\n<ul>\n<li>Old: <tt>file_callback(context, fieldname, data, filename, mimetype, jsondata)</tt></li>\n<li>New: <tt>file_callback(context, key, fieldname, data, filename, mimetype, jsondata)</tt></li>\n</ul>\n<p>[jone]</p>\n</li>\n<li><p>Dexterity: support exporting RichTextValue objects.\n[jone]</p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id12\" rel=\"nofollow\">1.0.0 (2015-05-05)</a></h3>\n<ul>\n<li>Initial implementation\n[maethu, jone]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6573601, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b5f8a2436dde9d5ee0cc274084ca472d", "sha256": "a8a47a901585094166ea732fc966023b1a4b3fc7e2e36e0d7efaa2c20645aafc"}, "downloads": -1, "filename": "ftw.jsondump-1.0.0.zip", "has_sig": false, "md5_digest": "b5f8a2436dde9d5ee0cc274084ca472d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46243, "upload_time": "2015-05-05T11:56:07", "upload_time_iso_8601": "2015-05-05T11:56:07.382214Z", "url": "https://files.pythonhosted.org/packages/8a/83/9ac436089430f418e724e8f9da23f22c2a00286efbd54db08ff2ff9d9685/ftw.jsondump-1.0.0.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b56976b804364098f2c11fd4f6f298ca", "sha256": "9b66c3a98752620e8d9790c5a55d453eaa2b1f7c7f3150d3767b4e57017939fa"}, "downloads": -1, "filename": "ftw.jsondump-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b56976b804364098f2c11fd4f6f298ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24361, "upload_time": "2015-10-11T12:37:00", "upload_time_iso_8601": "2015-10-11T12:37:00.025134Z", "url": "https://files.pythonhosted.org/packages/05/4b/a38f4f4d5eb9fcb88146338d0fd1b35168b64aba0ac53bf392f0d308c4b4/ftw.jsondump-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b56976b804364098f2c11fd4f6f298ca", "sha256": "9b66c3a98752620e8d9790c5a55d453eaa2b1f7c7f3150d3767b4e57017939fa"}, "downloads": -1, "filename": "ftw.jsondump-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b56976b804364098f2c11fd4f6f298ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24361, "upload_time": "2015-10-11T12:37:00", "upload_time_iso_8601": "2015-10-11T12:37:00.025134Z", "url": "https://files.pythonhosted.org/packages/05/4b/a38f4f4d5eb9fcb88146338d0fd1b35168b64aba0ac53bf392f0d308c4b4/ftw.jsondump-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:54 2020"}