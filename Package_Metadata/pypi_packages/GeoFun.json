{"info": {"author": "Riccardo Mogavero", "author_email": "riccardomogavero@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# KMLBuilder\n\nKMLBuilder is a module designed to ingest user-provided GPS coordinates and/or geo-located images, and to produce a final KML file with these. The end result is a folder with the final KML file (w/o coordinates) and an additional 'img' folder containing (resized or not) geo-located images to be accessed via a GIS software of preference. Cuyrrently, this works with GoogleEarth. \n\nBelow are the input requirements for both geo-located images and GPS coordinates:\n  - The Pandas DataFrame must have these headers: 'placemark', 'keep_elevation', 'time', 'lat', 'lon', 'elevation'\n  - 'placemark' is the name of the placemark(s) to be chosen by the user; e.g. if there are more than one trip, then the user could name each group of coordinates individually\n  - 'keep_elevation' is a binary (i.e. 1 or 0) telling the module whether to clamp coordinates to the ground or display the actual elevation recorded  \n  - 'time' is not required; currently kept for future developments purposes\n  - 'lat', 'lon' GPS coordinates must be in decimal WGS84 GCS\n  - 'elevation' is the altitude measured in metres; please note that this needs to be provided if the user wants to display it as is in the GIS of choice\n  - Image format must be one handled by PIL (Pillow) \n  - Image geo-location must be present in their EXIF \n  - Image geo-location coordinates must be in WGS84 GCS\n  - Image EXIF requirements are: 'GPSInfo' for geo-location data extraction, 'DateTimeOriginal' for pictures ordering\n\n\n### Requirements\n\nKMLBuilder uses a number of open source projects to work properly:\n\n* [io]\n* [datetime]\n* [pathlib]\n* [zipfile]\n* [xml.dom.minidom]\n* [PIL]\n* [pandas]\n* [numpy]\n* [colour]\n\n### Installation\n\nInstall the dependencies and the module as you would normally:\n```python\npip install KMLBuilder\n```\n\n\nUsage as follows:\n\n```python\nfrom GeoFun.KMLBuilder import CreateKmlFile\nimport pandas as pd\n\n\n# 1) Load the coordinates data file into a Pandas DataFrame, \ngps_coords_raw = \"coordinates/Apulia.csv\"\ngps_coords_df = pd.read_csv(gps_coords_raw)\n\n# 2) the folder location of images to be loaded into the KML, and: \nimg_folder = \"images/\"\n\n# 3) and the file location of where the KML should be saved\nkml_output = \"kml/Apulia/\"\n\n# 4) and ingest everything into the CreateKmlFile() function: \nCreateKmlFile(kml_output,\n              coords_df=gps_coords_df, \n              img_input_folder=img_folder, \n              resize_opt=100, # This is the resize filesize (in KB); can also be expressed as a 0-1 for percentage\n              zip_files=True, # whether to zip the KML folder\n              verbose=False) # whether to make the process verbose or not\n```\n\n### Todos\n\n - Expand module output types\n - Improve quality\n - Avoid module-sucking \n - Any idea, fire away! :)\n\nLicense\n----\n\nGNU GPLv3", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/rik-git/GeoFun/archive/0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rik-git/GeoFun", "keywords": "kml,geolocated images,GIS,kml builder,GoogleEarth,embed images into kml", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "GeoFun", "package_url": "https://pypi.org/project/GeoFun/", "platform": "", "project_url": "https://pypi.org/project/GeoFun/", "project_urls": {"Download": "https://github.com/rik-git/GeoFun/archive/0.1.tar.gz", "Homepage": "https://github.com/rik-git/GeoFun"}, "release_url": "https://pypi.org/project/GeoFun/0.1/", "requires_dist": null, "requires_python": "", "summary": "A package to process and work with geo-data", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KMLBuilder</h1>\n<p>KMLBuilder is a module designed to ingest user-provided GPS coordinates and/or geo-located images, and to produce a final KML file with these. The end result is a folder with the final KML file (w/o coordinates) and an additional 'img' folder containing (resized or not) geo-located images to be accessed via a GIS software of preference. Cuyrrently, this works with GoogleEarth.</p>\n<p>Below are the input requirements for both geo-located images and GPS coordinates:</p>\n<ul>\n<li>The Pandas DataFrame must have these headers: 'placemark', 'keep_elevation', 'time', 'lat', 'lon', 'elevation'</li>\n<li>'placemark' is the name of the placemark(s) to be chosen by the user; e.g. if there are more than one trip, then the user could name each group of coordinates individually</li>\n<li>'keep_elevation' is a binary (i.e. 1 or 0) telling the module whether to clamp coordinates to the ground or display the actual elevation recorded</li>\n<li>'time' is not required; currently kept for future developments purposes</li>\n<li>'lat', 'lon' GPS coordinates must be in decimal WGS84 GCS</li>\n<li>'elevation' is the altitude measured in metres; please note that this needs to be provided if the user wants to display it as is in the GIS of choice</li>\n<li>Image format must be one handled by PIL (Pillow)</li>\n<li>Image geo-location must be present in their EXIF</li>\n<li>Image geo-location coordinates must be in WGS84 GCS</li>\n<li>Image EXIF requirements are: 'GPSInfo' for geo-location data extraction, 'DateTimeOriginal' for pictures ordering</li>\n</ul>\n<h3>Requirements</h3>\n<p>KMLBuilder uses a number of open source projects to work properly:</p>\n<ul>\n<li>[io]</li>\n<li>[datetime]</li>\n<li>[pathlib]</li>\n<li>[zipfile]</li>\n<li>[xml.dom.minidom]</li>\n<li>[PIL]</li>\n<li>[pandas]</li>\n<li>[numpy]</li>\n<li>[colour]</li>\n</ul>\n<h3>Installation</h3>\n<p>Install the dependencies and the module as you would normally:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">KMLBuilder</span>\n</pre>\n<p>Usage as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">GeoFun.KMLBuilder</span> <span class=\"kn\">import</span> <span class=\"n\">CreateKmlFile</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n\n<span class=\"c1\"># 1) Load the coordinates data file into a Pandas DataFrame, </span>\n<span class=\"n\">gps_coords_raw</span> <span class=\"o\">=</span> <span class=\"s2\">\"coordinates/Apulia.csv\"</span>\n<span class=\"n\">gps_coords_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">gps_coords_raw</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2) the folder location of images to be loaded into the KML, and: </span>\n<span class=\"n\">img_folder</span> <span class=\"o\">=</span> <span class=\"s2\">\"images/\"</span>\n\n<span class=\"c1\"># 3) and the file location of where the KML should be saved</span>\n<span class=\"n\">kml_output</span> <span class=\"o\">=</span> <span class=\"s2\">\"kml/Apulia/\"</span>\n\n<span class=\"c1\"># 4) and ingest everything into the CreateKmlFile() function: </span>\n<span class=\"n\">CreateKmlFile</span><span class=\"p\">(</span><span class=\"n\">kml_output</span><span class=\"p\">,</span>\n              <span class=\"n\">coords_df</span><span class=\"o\">=</span><span class=\"n\">gps_coords_df</span><span class=\"p\">,</span> \n              <span class=\"n\">img_input_folder</span><span class=\"o\">=</span><span class=\"n\">img_folder</span><span class=\"p\">,</span> \n              <span class=\"n\">resize_opt</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"c1\"># This is the resize filesize (in KB); can also be expressed as a 0-1 for percentage</span>\n              <span class=\"n\">zip_files</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># whether to zip the KML folder</span>\n              <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># whether to make the process verbose or not</span>\n</pre>\n<h3>Todos</h3>\n<ul>\n<li>Expand module output types</li>\n<li>Improve quality</li>\n<li>Avoid module-sucking</li>\n<li>Any idea, fire away! :)</li>\n</ul>\n<h2>License</h2>\n<p>GNU GPLv3</p>\n\n          </div>"}, "last_serial": 6148078, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "08f768c94bfd8f999102204eff866290", "sha256": "c36af66e86cb7dedb7015adf908ca6979a5fc2ee21be1ed6e5a29b8858314c5b"}, "downloads": -1, "filename": "GeoFun-0.1.tar.gz", "has_sig": false, "md5_digest": "08f768c94bfd8f999102204eff866290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9446, "upload_time": "2019-11-16T20:08:07", "upload_time_iso_8601": "2019-11-16T20:08:07.809056Z", "url": "https://files.pythonhosted.org/packages/46/3c/bcebf38724b2ca2d380e3edc7df94991a8559ea2bb22f3ac2ce8a95fd616/GeoFun-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "08f768c94bfd8f999102204eff866290", "sha256": "c36af66e86cb7dedb7015adf908ca6979a5fc2ee21be1ed6e5a29b8858314c5b"}, "downloads": -1, "filename": "GeoFun-0.1.tar.gz", "has_sig": false, "md5_digest": "08f768c94bfd8f999102204eff866290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9446, "upload_time": "2019-11-16T20:08:07", "upload_time_iso_8601": "2019-11-16T20:08:07.809056Z", "url": "https://files.pythonhosted.org/packages/46/3c/bcebf38724b2ca2d380e3edc7df94991a8559ea2bb22f3ac2ce8a95fd616/GeoFun-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:06 2020"}