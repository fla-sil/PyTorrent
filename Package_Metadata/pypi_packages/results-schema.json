{"info": {"author": "Center for Data Science and Public Policy", "author_email": "datascifellows@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Copyright \u00a92016.  The University of Chicago (\u201cChicago\u201d). All Rights Reserved.\n\nPermission to use, copy, modify, and distribute this software, including all object code and source code, and any accompanying documentation (together the \u201cProgram\u201d) for educational and not-for-profit research purposes, without fee and without a signed licensing agreement, is hereby granted, provided that the above copyright notice, this paragraph and the following three paragraphs appear in all copies, modifications, and distributions. For the avoidance of doubt, educational and not-for-profit research purposes excludes any service or part of selling a service that uses the Program. To obtain a commercial license for the Program, contact the Technology Commercialization and Licensing, Polsky Center for Entrepreneurship and Innovation, University of Chicago, 1452 East 53rd Street, 2nd floor, Chicago, IL 60615.\n\nCreated by Data Science and Public Policy, University of Chicago\n\nThe Program is copyrighted by Chicago. The Program is supplied \"as is\", without any accompanying services from Chicago. Chicago does not warrant that the operation of the Program will be uninterrupted or error-free. The end-user understands that the Program was developed for research purposes and is advised not to rely exclusively on the Program for any reason.\n\nIN NO EVENT SHALL CHICAGO BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THE PROGRAM, EVEN IF CHICAGO HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. CHICAGO SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE PROGRAM PROVIDED HEREUNDER IS PROVIDED \"AS IS\".  CHICAGO HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\nDescription: # results-schema\n        Store results of modeling runs in a relational database\n        \n        ## Quick Start\n        \n        1. Install\n        \n        `pip install git+https://github.com/dssg/results-schema.git`\n        \n        2. Create a YAML file with your database credentials (see example_db_config.yaml), or an environment variable 'DBURL' with a connection string. The database must be created already.\n        \n        3. Call 'upgrade_db' function from Python console or script\n        \n        ```\n        >>> from results_schema import upgrade_db\n        >>> upgrade_db('my_db_config.yaml')\n        ```\n        \n        This command will create a 'results' schema and the necessary tables.\n        \n        \n        ## Modifying the schema\n        \n        [Alembic](http://alembic.zzzcomputing.com/en/latest/tutorial.html) is a schema migrations library written in Python. It allows us to auto-generate migrations to run incremental database schema changes, such as adding or removing a column. This is done by comparing the definition of a schema in code with that of a live database. There are many valid ways to create migrations, which you can read about in [Alembic's documentation](http://alembic.zzzcomputing.com/en/latest/tutorial.html). But here is a common workflow we will use to modify the schema.\n        \n        1. Have a candidate database for comparison. You can use a toy database for this that you upgrade to the current master, or use your project database if the results schema has not been manually modified.\n        \n        2. Make the desired modifications to [results_schema.schema](results_schema/schema.py).\n        \n        3. Autogenerate a migration: `alembic -c results_schema/alembic.ini -x db_config_file=my_db_config.yaml revision --autogenerate` - This will look at the difference between your schema definition and the database, and generate a new file in results_schema/alembic/versions/.\n        \n        4. Inspect the file generated in step 3 and make sure that the changes it is suggesting make sense. Make any modifications you want; the autogenerate functionality is just meant as a guideline.\n        \n        5. Upgrade the database: `alembic -c results_schema/alembic.ini -x db_config_file=my_db_config.yaml upgrade head` \n        \n        6. Update the [factories file](results_schema/factories/__init__.py) with your changes - see more on factories below if you are unfamiliar with them.\n        \n        7. If everything looks good, create a pull request!\n        \n        \n        ## Using Factories\n        \n        When you want to create rows of these results tables for a unit test, you can use the included factories to make this easier and with less boilerplate.  Factories allow you to only specify the attribute that are important to your test, and choose reasonable defaults for all other attributes. results_schema uses [FactoryBoy](http://factoryboy.readthedocs.io/en/latest/index.html) to accomplish this.\n        \n        A simple example is to just instantiate an `EvaluationFactory`. `Evaluations` depend on `Models`, which depend on both `ModelGroups` and `Experiments`. So instantiating an `EvaluationFactory` actually creates four objects in the database.\n        \n        ```\n        from results_schema.factories import EvaluationFactory, session\n        \n        init_engine(engine)\n        EvaluationFactory()\n        session.commit()\n        \n        results = engine.execute('select model_id, metric, parameter, value from results.evaluations')\n        for row in results:\n        \tprint(row)\n        ```\n        \n        ```\n        (1, 'precision@', '100_abs', Decimal('0.76'))\n        ```\n        \n        This is all well and good, but often your tests will require some more control over the relationships between the objects you create, like creating different evaluations keyed to the same model. You do this by instantiating a `ModelFactory` first and then passing that to each `EvaluationFactory`:\n        \n        ```\n        init_engine(engine)\n        \n        model = ModelFactory()\n        for metric, value in [\n        \t('precision@', 0.4),\n        \t('recall@', 0.3),\n        ]:\n        \tEvaluationFactory(\n        \t\tmodel_rel=model,\n        \t\tmetric=metric,\n        \t\tparameter='100_abs',\n        \t\tvalue=value\n        \t)\n        session.commit()\n        results = engine.execute('select model_id, metric, parameter, value from results.evaluations')\n        for row in results:\n        \tprint(row)\n        ```\n        \n        ```\n        (1, 'precision@', '100_abs', Decimal('0.4'))\n        (1, 'recall@', '100_abs', Decimal('0.3'))\n        ```\n        \nKeywords: analytics datascience modeling modelevaluation\nPlatform: UNKNOWN\nClassifier: Development Status :: 2 - Pre-Alpha\nClassifier: Intended Audience :: Developers\nClassifier: Natural Language :: English\nClassifier: Programming Language :: Python :: 3\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dssg/results-schema", "keywords": "", "license": "BY DOWNLOADING results-schema PROGRAM YOU AGREE TO THE FOLLOWING TERMS OF USE:", "maintainer": "", "maintainer_email": "", "name": "results-schema", "package_url": "https://pypi.org/project/results-schema/", "platform": "", "project_url": "https://pypi.org/project/results-schema/", "project_urls": {"Homepage": "https://github.com/dssg/results-schema"}, "release_url": "https://pypi.org/project/results-schema/2.0.0/", "requires_dist": ["alembic", "factory-boy", "psycopg2", "pyyaml", "sqlalchemy"], "requires_python": "", "summary": "Store results of modeling runs", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Copyright \u00a92016.  The University of Chicago (\u201cChicago\u201d). All Rights Reserved.<br><br>Permission to use, copy, modify, and distribute this software, including all object code and source code, and any accompanying documentation (together the \u201cProgram\u201d) for educational and not-for-profit research purposes, without fee and without a signed licensing agreement, is hereby granted, provided that the above copyright notice, this paragraph and the following three paragraphs appear in all copies, modifications, and distributions. For the avoidance of doubt, educational and not-for-profit research purposes excludes any service or part of selling a service that uses the Program. To obtain a commercial license for the Program, contact the Technology Commercialization and Licensing, Polsky Center for Entrepreneurship and Innovation, University of Chicago, 1452 East 53rd Street, 2nd floor, Chicago, IL 60615.<br><br>Created by Data Science and Public Policy, University of Chicago<br><br>The Program is copyrighted by Chicago. The Program is supplied \"as is\", without any accompanying services from Chicago. Chicago does not warrant that the operation of the Program will be uninterrupted or error-free. The end-user understands that the Program was developed for research purposes and is advised not to rely exclusively on the Program for any reason.<br><br>IN NO EVENT SHALL CHICAGO BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THE PROGRAM, EVEN IF CHICAGO HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. CHICAGO SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE PROGRAM PROVIDED HEREUNDER IS PROVIDED \"AS IS\".  CHICAGO HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.<br><br>Description: # results-schema<br>        Store results of modeling runs in a relational database<br>        <br>        ## Quick Start<br>        <br>        1. Install<br>        <br>        `pip install git+https://github.com/dssg/results-schema.git`<br>        <br>        2. Create a YAML file with your database credentials (see example_db_config.yaml), or an environment variable 'DBURL' with a connection string. The database must be created already.<br>        <br>        3. Call 'upgrade_db' function from Python console or script<br>        <br>        ```<br>        &gt;&gt;&gt; from results_schema import upgrade_db<br>        &gt;&gt;&gt; upgrade_db('my_db_config.yaml')<br>        ```<br>        <br>        This command will create a 'results' schema and the necessary tables.<br>        <br>        <br>        ## Modifying the schema<br>        <br>        [Alembic](http://alembic.zzzcomputing.com/en/latest/tutorial.html) is a schema migrations library written in Python. It allows us to auto-generate migrations to run incremental database schema changes, such as adding or removing a column. This is done by comparing the definition of a schema in code with that of a live database. There are many valid ways to create migrations, which you can read about in [Alembic's documentation](http://alembic.zzzcomputing.com/en/latest/tutorial.html). But here is a common workflow we will use to modify the schema.<br>        <br>        1. Have a candidate database for comparison. You can use a toy database for this that you upgrade to the current master, or use your project database if the results schema has not been manually modified.<br>        <br>        2. Make the desired modifications to [results_schema.schema](results_schema/schema.py).<br>        <br>        3. Autogenerate a migration: `alembic -c results_schema/alembic.ini -x db_config_file=my_db_config.yaml revision --autogenerate` - This will look at the difference between your schema definition and the database, and generate a new file in results_schema/alembic/versions/.<br>        <br>        4. Inspect the file generated in step 3 and make sure that the changes it is suggesting make sense. Make any modifications you want; the autogenerate functionality is just meant as a guideline.<br>        <br>        5. Upgrade the database: `alembic -c results_schema/alembic.ini -x db_config_file=my_db_config.yaml upgrade head` <br>        <br>        6. Update the [factories file](results_schema/factories/__init__.py) with your changes - see more on factories below if you are unfamiliar with them.<br>        <br>        7. If everything looks good, create a pull request!<br>        <br>        <br>        ## Using Factories<br>        <br>        When you want to create rows of these results tables for a unit test, you can use the included factories to make this easier and with less boilerplate.  Factories allow you to only specify the attribute that are important to your test, and choose reasonable defaults for all other attributes. results_schema uses [FactoryBoy](http://factoryboy.readthedocs.io/en/latest/index.html) to accomplish this.<br>        <br>        A simple example is to just instantiate an `EvaluationFactory`. `Evaluations` depend on `Models`, which depend on both `ModelGroups` and `Experiments`. So instantiating an `EvaluationFactory` actually creates four objects in the database.<br>        <br>        ```<br>        from results_schema.factories import EvaluationFactory, session<br>        <br>        init_engine(engine)<br>        EvaluationFactory()<br>        session.commit()<br>        <br>        results = engine.execute('select model_id, metric, parameter, value from results.evaluations')<br>        for row in results:<br>        \tprint(row)<br>        ```<br>        <br>        ```<br>        (1, 'precision@', '100_abs', Decimal('0.76'))<br>        ```<br>        <br>        This is all well and good, but often your tests will require some more control over the relationships between the objects you create, like creating different evaluations keyed to the same model. You do this by instantiating a `ModelFactory` first and then passing that to each `EvaluationFactory`:<br>        <br>        ```<br>        init_engine(engine)<br>        <br>        model = ModelFactory()<br>        for metric, value in [<br>        \t('precision@', 0.4),<br>        \t('recall@', 0.3),<br>        ]:<br>        \tEvaluationFactory(<br>        \t\tmodel_rel=model,<br>        \t\tmetric=metric,<br>        \t\tparameter='100_abs',<br>        \t\tvalue=value<br>        \t)<br>        session.commit()<br>        results = engine.execute('select model_id, metric, parameter, value from results.evaluations')<br>        for row in results:<br>        \tprint(row)<br>        ```<br>        <br>        ```<br>        (1, 'precision@', '100_abs', Decimal('0.4'))<br>        (1, 'recall@', '100_abs', Decimal('0.3'))<br>        ```<br>        <br>Keywords: analytics datascience modeling modelevaluation<br>Platform: UNKNOWN<br>Classifier: Development Status :: 2 - Pre-Alpha<br>Classifier: Intended Audience :: Developers<br>Classifier: Natural Language :: English<br>Classifier: Programming Language :: Python :: 3<br>\n          </div>"}, "last_serial": 4885736, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "94e78b5cb96dc208e8cf5fb8cfeb5c1b", "sha256": "e647bbf1e9cd4bb5ba2ff010a977612b5a8c3d277d283c6d87aca70e4461e303"}, "downloads": -1, "filename": "results_schema-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "94e78b5cb96dc208e8cf5fb8cfeb5c1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11734, "upload_time": "2017-05-12T23:13:27", "upload_time_iso_8601": "2017-05-12T23:13:27.195378Z", "url": "https://files.pythonhosted.org/packages/25/a5/b8d0ca5ccd9ab5cc6c70101cda073078fc0574fb5623ef586916fe782b47/results_schema-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5764128da53e7bc02de2ec514d89e4f4", "sha256": "e88d2c4b5478a1ba1886e7c59865c629178028484c585439574fb6330954eab8"}, "downloads": -1, "filename": "results_schema-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5764128da53e7bc02de2ec514d89e4f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7213, "upload_time": "2017-05-12T23:13:28", "upload_time_iso_8601": "2017-05-12T23:13:28.415879Z", "url": "https://files.pythonhosted.org/packages/1c/42/f79d8714efd4a342e35e0cd3b3f16c2899c2cef033c5efe2bd9394a62b23/results_schema-1.0.1.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "32ecbcdb3d92b1f36759e023713e33d6", "sha256": "4755bb90cad96469045bfdac932bcd8a78ddadfcedb9863ab53ec6fcfa871717"}, "downloads": -1, "filename": "results_schema-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "32ecbcdb3d92b1f36759e023713e33d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11741, "upload_time": "2017-05-15T16:49:22", "upload_time_iso_8601": "2017-05-15T16:49:22.073767Z", "url": "https://files.pythonhosted.org/packages/22/ac/3a8d357825e74c31991c679830d6879998051d4fa8c16b0a86f20c673fdb/results_schema-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e75a1a81ea4e45a309b8e0c3dc692e9a", "sha256": "89d4cc5765fceb60606215d8d947a895cd50b3bbef79a7637638f9511c5e2bec"}, "downloads": -1, "filename": "results_schema-1.0.3.tar.gz", "has_sig": false, "md5_digest": "e75a1a81ea4e45a309b8e0c3dc692e9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7280, "upload_time": "2017-05-15T16:49:23", "upload_time_iso_8601": "2017-05-15T16:49:23.931547Z", "url": "https://files.pythonhosted.org/packages/aa/3a/73cd049fb98e5894e4ee15e65f0de530e6a164a248fae8a3c5d66ebc25a5/results_schema-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "8210a33bf7b2dca717ed7927e23886ce", "sha256": "6b7cbd47a88babd51f68966f22af6b393026ab95b098cbcde336a158286be433"}, "downloads": -1, "filename": "results_schema-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8210a33bf7b2dca717ed7927e23886ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14485, "upload_time": "2017-07-21T19:25:28", "upload_time_iso_8601": "2017-07-21T19:25:28.820758Z", "url": "https://files.pythonhosted.org/packages/f9/37/95e81c37f62367eda6afb9ecc7a7aa82acf4637b40c334bb89b55bacc365/results_schema-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45d55a3b25f563e0427f9fd036cdaa3b", "sha256": "ff93f95ed291ce02c205623e1ded163ae6ca9b985ec5ad7c30eb5135d8e6e364"}, "downloads": -1, "filename": "results_schema-1.0.4.tar.gz", "has_sig": false, "md5_digest": "45d55a3b25f563e0427f9fd036cdaa3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8830, "upload_time": "2017-07-21T19:25:29", "upload_time_iso_8601": "2017-07-21T19:25:29.782882Z", "url": "https://files.pythonhosted.org/packages/6f/ba/bd50f0fa51633d79e28176a63dbef690b99468929fb65386ac721459e77d/results_schema-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8059dbab58c07eace96e59c96bfa4f8e", "sha256": "fc59d3a47e7b05ea29155373ec296e35597c25f40d87fa9d92cc0e41531a5ac9"}, "downloads": -1, "filename": "results_schema-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8059dbab58c07eace96e59c96bfa4f8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14487, "upload_time": "2017-07-21T19:25:25", "upload_time_iso_8601": "2017-07-21T19:25:25.328651Z", "url": "https://files.pythonhosted.org/packages/43/9e/fae7580060cb78ada281b6a8f63c6a22078c70405dfc6334e7bbb70323fb/results_schema-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e8495466edd9649dc69b47f22b3143e", "sha256": "d226cd2cf9726d6ed914fe835752278b99aed0f59bcc050bfef56032fce7f764"}, "downloads": -1, "filename": "results_schema-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7e8495466edd9649dc69b47f22b3143e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8827, "upload_time": "2017-07-21T19:25:26", "upload_time_iso_8601": "2017-07-21T19:25:26.319856Z", "url": "https://files.pythonhosted.org/packages/64/ff/dd4b2f72533599d11bbc0fba9f75b34d2148b603a483ab37983b20d4921c/results_schema-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "7a67ac3a05ac3edbfcd3410fe35b0023", "sha256": "a8ea52b7554bc62945c3132d90eaf66afc7ee78fbdce574b2f2542d44a4085c3"}, "downloads": -1, "filename": "results_schema-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7a67ac3a05ac3edbfcd3410fe35b0023", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15452, "upload_time": "2017-08-31T19:27:55", "upload_time_iso_8601": "2017-08-31T19:27:55.765525Z", "url": "https://files.pythonhosted.org/packages/cb/00/c5bb918c10e544895b6eee94f42118be07cc161fe25709348d65ee536dab/results_schema-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9757c4b20cb1c7d5d5c4a8ca6d21cf7e", "sha256": "1182dbbdc29baa20ec23ca4838ef9b428012cab2d5f80681c12cf8d9d5c4ffb7"}, "downloads": -1, "filename": "results_schema-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9757c4b20cb1c7d5d5c4a8ca6d21cf7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9121, "upload_time": "2017-08-31T19:27:56", "upload_time_iso_8601": "2017-08-31T19:27:56.961475Z", "url": "https://files.pythonhosted.org/packages/3d/62/ef7c8c1a529102b5603fc1fcccafe8720a7d6566e5ed311a34b415473016/results_schema-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "78168b8020ec6e344e3b9edf4bb2dc86", "sha256": "6dd057d68589827df2b18d2bc0f8f06f6465bc0cd3db09ea2761a0f018f94737"}, "downloads": -1, "filename": "results_schema-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78168b8020ec6e344e3b9edf4bb2dc86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16688, "upload_time": "2017-09-01T19:46:38", "upload_time_iso_8601": "2017-09-01T19:46:38.011064Z", "url": "https://files.pythonhosted.org/packages/23/db/4f9f833dca8d05c7eec608a2d99058ebe3fff623b7ba260f618f1bd173f1/results_schema-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "894f3caec389d2780b6d9d0cde4242e9", "sha256": "2871f9ea60e0322b08daeec93bd1e0fe3c2f42f840235167ca64690795edca8c"}, "downloads": -1, "filename": "results_schema-1.2.1.tar.gz", "has_sig": false, "md5_digest": "894f3caec389d2780b6d9d0cde4242e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9435, "upload_time": "2017-09-01T19:46:39", "upload_time_iso_8601": "2017-09-01T19:46:39.465685Z", "url": "https://files.pythonhosted.org/packages/6a/39/0f9f3383bf52c1d93657378a69c34ff8c4860009283e7daf1eddb081326c/results_schema-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "1825cfd1e2d9a34c4b665cf1b7cb9280", "sha256": "64cfd13f5946378d7f805d8175f5fe66c82e16115230fd8b533fd4300952248f"}, "downloads": -1, "filename": "results_schema-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1825cfd1e2d9a34c4b665cf1b7cb9280", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17299, "upload_time": "2019-03-01T17:07:35", "upload_time_iso_8601": "2019-03-01T17:07:35.931219Z", "url": "https://files.pythonhosted.org/packages/93/2c/d98b47d055b6778fa57ec78bf4d3e7eb46ce7a8dc49af033688f3a337a50/results_schema-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c565500716eed9f7ebd1db7db473accb", "sha256": "b5968d84f3298263799021eaa7134256b7332b814042e67b3526fcd14935aff7"}, "downloads": -1, "filename": "results_schema-1.2.2.tar.gz", "has_sig": false, "md5_digest": "c565500716eed9f7ebd1db7db473accb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10195, "upload_time": "2019-03-01T17:07:37", "upload_time_iso_8601": "2019-03-01T17:07:37.696160Z", "url": "https://files.pythonhosted.org/packages/9c/c1/13430ea705561e8e1af4371a4694bb93e12cc8ac3835315eb93763971b10/results_schema-1.2.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "9b15584c38f770095f832f8fb5e41789", "sha256": "06b00abea115794f95ab19c6d2c21db4c2f016a4388473457df8a04424b70af3"}, "downloads": -1, "filename": "results_schema-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b15584c38f770095f832f8fb5e41789", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17298, "upload_time": "2017-11-06T18:16:52", "upload_time_iso_8601": "2017-11-06T18:16:52.332395Z", "url": "https://files.pythonhosted.org/packages/ed/9b/970856bc73e4ab513b29029c16058931529a682e00afa977528d7fdf751f/results_schema-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffc89586ded139584d2c26259d4e65b4", "sha256": "d93cfe59ca67c943f40cb861e955b7a3c6ab1e8b219442d47c9485dc64bbccf3"}, "downloads": -1, "filename": "results_schema-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ffc89586ded139584d2c26259d4e65b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9679, "upload_time": "2017-11-06T18:16:53", "upload_time_iso_8601": "2017-11-06T18:16:53.417938Z", "url": "https://files.pythonhosted.org/packages/ca/e4/9bcd1898af5858eb73bc4d46808953e6a05c4f2948364e462a7071652317/results_schema-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b15584c38f770095f832f8fb5e41789", "sha256": "06b00abea115794f95ab19c6d2c21db4c2f016a4388473457df8a04424b70af3"}, "downloads": -1, "filename": "results_schema-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b15584c38f770095f832f8fb5e41789", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17298, "upload_time": "2017-11-06T18:16:52", "upload_time_iso_8601": "2017-11-06T18:16:52.332395Z", "url": "https://files.pythonhosted.org/packages/ed/9b/970856bc73e4ab513b29029c16058931529a682e00afa977528d7fdf751f/results_schema-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffc89586ded139584d2c26259d4e65b4", "sha256": "d93cfe59ca67c943f40cb861e955b7a3c6ab1e8b219442d47c9485dc64bbccf3"}, "downloads": -1, "filename": "results_schema-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ffc89586ded139584d2c26259d4e65b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9679, "upload_time": "2017-11-06T18:16:53", "upload_time_iso_8601": "2017-11-06T18:16:53.417938Z", "url": "https://files.pythonhosted.org/packages/ca/e4/9bcd1898af5858eb73bc4d46808953e6a05c4f2948364e462a7071652317/results_schema-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:28 2020"}