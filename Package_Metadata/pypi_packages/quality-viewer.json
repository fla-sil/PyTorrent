{"info": {"author": "Chris Sidebottom", "author_email": "chris@damouse.co.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# quality-viewer\nA simple CLI for rendering [Quality Views](https://blog.colinbreck.com/using-quality-views-to-communicate-software-quality-and-evolution/). Built on [Graphviz](https://www.graphviz.org/).\n\n## Installation\n```\npip install quality-viewer\n```\n\n## Usage\nTo use, you need to create a series of JSON documents in a folder. These files define the components in your quality view and the individual scores for each attribute. Scores are out of 10, `quality-viewer` uses the mean to generate the colours in the PDF.\n\nThis is an example of the component definition:\n\n```\n{\n    \"component\": \"my-lovely-component\",\n    \"depends_on\": [\"my-other-component\"],\n    \"attributes\": [\n        {\n            \"name\": \"code\",\n            \"score\": 5,\n            \"notes\": \"I wrote this in Uni\"\n        },\n        {\n            \"name\": \"tests\",\n            \"score\": 2,\n            \"notes\": \"I wrote this in Uni\"\n        }\n    ]\n}\n```\n\nThen you can run the CLI against your folder of component definitions which will generate a PDF in that folder named `quality_view.gv.pdf`:\n\n```\nquality-viewer ./my_components\n```\n\nIf you run these regularly, you probably want to label each PDF. Customise the label on the graph with the `--label` argument:\n\n```\nquality-viewer --label \"Quality Views - Christmas 2019\" ./my_components\n```\n\nA fairly elaborate example, which uses dated quality views can be found at (other repo)[more work]. This is a good repo to get started from.\n\n## Development\nThis repository is setup to validate your work easily, running tests is as simple as:\n\n```\nmake test\n```\n\nAnd checking your coding style is:\n\n```\nmake check\n```\n\nTo automagically conform to the above, run:\n\n```\nmake format\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DaMouse404/quality-viewer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "quality-viewer", "package_url": "https://pypi.org/project/quality-viewer/", "platform": "any", "project_url": "https://pypi.org/project/quality-viewer/", "project_urls": {"Homepage": "https://github.com/DaMouse404/quality-viewer"}, "release_url": "https://pypi.org/project/quality-viewer/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A simple CLI for rendering Quality Views", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>quality-viewer</h1>\n<p>A simple CLI for rendering <a href=\"https://blog.colinbreck.com/using-quality-views-to-communicate-software-quality-and-evolution/\" rel=\"nofollow\">Quality Views</a>. Built on <a href=\"https://www.graphviz.org/\" rel=\"nofollow\">Graphviz</a>.</p>\n<h2>Installation</h2>\n<pre><code>pip install quality-viewer\n</code></pre>\n<h2>Usage</h2>\n<p>To use, you need to create a series of JSON documents in a folder. These files define the components in your quality view and the individual scores for each attribute. Scores are out of 10, <code>quality-viewer</code> uses the mean to generate the colours in the PDF.</p>\n<p>This is an example of the component definition:</p>\n<pre><code>{\n    \"component\": \"my-lovely-component\",\n    \"depends_on\": [\"my-other-component\"],\n    \"attributes\": [\n        {\n            \"name\": \"code\",\n            \"score\": 5,\n            \"notes\": \"I wrote this in Uni\"\n        },\n        {\n            \"name\": \"tests\",\n            \"score\": 2,\n            \"notes\": \"I wrote this in Uni\"\n        }\n    ]\n}\n</code></pre>\n<p>Then you can run the CLI against your folder of component definitions which will generate a PDF in that folder named <code>quality_view.gv.pdf</code>:</p>\n<pre><code>quality-viewer ./my_components\n</code></pre>\n<p>If you run these regularly, you probably want to label each PDF. Customise the label on the graph with the <code>--label</code> argument:</p>\n<pre><code>quality-viewer --label \"Quality Views - Christmas 2019\" ./my_components\n</code></pre>\n<p>A fairly elaborate example, which uses dated quality views can be found at (other repo)[more work]. This is a good repo to get started from.</p>\n<h2>Development</h2>\n<p>This repository is setup to validate your work easily, running tests is as simple as:</p>\n<pre><code>make test\n</code></pre>\n<p>And checking your coding style is:</p>\n<pre><code>make check\n</code></pre>\n<p>To automagically conform to the above, run:</p>\n<pre><code>make format\n</code></pre>\n\n          </div>"}, "last_serial": 6183935, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "794d9254a5af7a9c6b4fb930884bd99f", "sha256": "72b318d409993e7a333d2487464898f6a3d9ad099a2aba12f67075afceb78f11"}, "downloads": -1, "filename": "quality-viewer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "794d9254a5af7a9c6b4fb930884bd99f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3626, "upload_time": "2019-11-22T22:35:58", "upload_time_iso_8601": "2019-11-22T22:35:58.861415Z", "url": "https://files.pythonhosted.org/packages/38/63/4917c063aeb485fa4b4fdee004163510206543e0fd65ff8900e3448ef6b6/quality-viewer-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "183af7bf3c9c10b1eb538018a44acfae", "sha256": "d9d681d346ea87ad0a904ebc181ae6329b9fc5aa2af71165e420e287c7c28a93"}, "downloads": -1, "filename": "quality-viewer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "183af7bf3c9c10b1eb538018a44acfae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3624, "upload_time": "2019-11-22T23:14:29", "upload_time_iso_8601": "2019-11-22T23:14:29.889560Z", "url": "https://files.pythonhosted.org/packages/57/f2/c87f69182da9c88c5c44b531ba9eac89b03dbbc2dd6ae580d79d3b3d5703/quality-viewer-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "183af7bf3c9c10b1eb538018a44acfae", "sha256": "d9d681d346ea87ad0a904ebc181ae6329b9fc5aa2af71165e420e287c7c28a93"}, "downloads": -1, "filename": "quality-viewer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "183af7bf3c9c10b1eb538018a44acfae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3624, "upload_time": "2019-11-22T23:14:29", "upload_time_iso_8601": "2019-11-22T23:14:29.889560Z", "url": "https://files.pythonhosted.org/packages/57/f2/c87f69182da9c88c5c44b531ba9eac89b03dbbc2dd6ae580d79d3b3d5703/quality-viewer-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:59 2020"}