{"info": {"author": "Keming Zhang", "author_email": "kemingz@berkeley.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Scientific/Engineering :: Astronomy"], "description": "[![Build Status](https://travis-ci.com/profjsb/deepCR.svg?token=baKtC9yCzzwzzqM9ihAX&branch=master)](https://travis-ci.com/profjsb/deepCR) [![codecov](https://codecov.io/gh/profjsb/deepCR/branch/master/graph/badge.svg?token=SIwJFmKJqr)](https://codecov.io/gh/profjsb/deepCR)\n[![Documentation Status](https://readthedocs.org/projects/deepcr/badge/?version=latest)](https://deepcr.readthedocs.io/en/latest/?badge=latest)\n\n## deepCR: Deep Learning Based Cosmic Ray Removal for Astronomical Images\n\nIdentify and remove cosmic rays from astronomical images using trained convolutional neural networks.\n\nDocumentation and tutorials: https://deepcr.readthedocs.io/\n\nThis is the installable package which implements the methods described in the paper: Zhang & Bloom (2019), submitted.\n\nCode to reproduce benchmarking results in the paper is at: https://github.com/kmzzhang/deepCR-paper\n\nIf you use this package, please cite Zhang & Bloom (2019): https://arxiv.org/abs/1907.09500 and consider including a\nlink to this repository.\n\nNote: the current release includes only model for HST ACS/WFC.\n\n<img src=\"https://raw.githubusercontent.com/profjsb/deepCR/master/imgs/postage-sm.jpg\" wdith=\"90%\">\n\n### Installation\n\n```bash\npip install deepCR\n```\n\nOr you can install from source:\n\n```bash\ngit clone https://github.com/profjsb/deepCR.git\ncd deepCR/\npython setup.py install\n```\n\n### Quick Start\n\nQuick download of a HST ACS/WFC image\n\n```bash\nwget -O jdba2sooq_flc.fits https://mast.stsci.edu/api/v0.1/Download/file?uri=mast:HST/product/jdba2sooq_flc.fits\n```\n\nWith Python >=3.5:\n\nFor smaller sized images\n```python\nfrom deepCR import deepCR\nfrom astropy.io import fits\nimage = fits.getdata(\"jdba2sooq_flc.fits\")[:512,:512]\n\n# create an instance of deepCR with specified model configuration\nmdl = deepCR(mask=\"ACS-WFC-F606W-2-32\",\n\t     inpaint=\"ACS-WFC-F606W-2-32\",\n             device=\"CPU\")\n\n# apply to input image\nmask, cleaned_image = mdl.clean(image, threshold = 0.5)\n# best threshold is highest value that generate mask covering full extent of CR\n# choose threshold by visualizing outputs.\n# note that deepCR-inpaint would overestimate if mask does not fully cover CR.\n\n# if you only need CR mask you may skip image inpainting for shorter runtime\nmask = mdl.clean(image, threshold = 0.5, inpaint=False)\n\n# if you want probabilistic cosmic ray mask instead of binary mask\nprob_mask = mdl.clean(image, binary=False)\n```\n\nFor WFC full size images (4k * 2k), you should specify **segment = True** to tell deepCR to segment the input image into 256*256 patches, and process one patch at a time.\nOtherwise this would take up > 10gb memory. We recommended you use segment = True for images larger than 1k * 1k on CPU. GPU memory limits may be more strict.\n```python\nimage = fits.getdata(\"jdba2sooq_flc.fits\")\nmask, cleaned_image = mdl.clean(image, threshold = 0.5, segment = True)\n```\n\n(CPU only) In place of **segment = True**, you can also specify **parallel = True** and invoke the multi-threaded version of segment mode. This will speed things up. You don't have to specify segment = True again.\n```python\nimage = fits.getdata(\"jdba2sooq_flc.fits\")\nmask, cleaned_image = mdl.clean(image, threshold = 0.5, parallel = True, n_jobs=-1)\n```\n**n_jobs=-1** makes use of all your CPU cores.\n\nNote that this won't speed things up if you're using GPU!\n\n### Currently available models\n\nmask:\n\n    ACS-WFC-F606W-2-4\n\n    ACS-WFC-F606W-2-32(*)\n\ninpaint:\n\n    ACS-WFC-F606W-2-32(*)\n\n    ACS-WFC-F606W-3-32\n\nRecommended models are marked in (*). Larger number indicate larger capacity.\n\nInput images should come from *_flc.fits* files which are in units of electrons.\n\n### Limitations and Caveats\n\nThe currently included models are trained and benchmarked on HST ACS/WFC images in the F606W filter.\n\nVisual inspection shows that these models also work well on filters from F435W to F814W. However, users should use a higher threshold (e.g. 0.9) for short wavelength filters to minimize false detections, if any.\n\n### Contributing\n\nWe are very interested in getting bug fixes, new functionality, and new trained models from the community (especially for ground-based imaging and spectroscopy). Please fork this repo and issue a PR with your changes. It will be especially helpful if you add some tests for your changes.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/deepCR/", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "deepCR", "package_url": "https://pypi.org/project/deepCR/", "platform": "", "project_url": "https://pypi.org/project/deepCR/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/deepCR/"}, "release_url": "https://pypi.org/project/deepCR/0.1.5/", "requires_dist": null, "requires_python": ">=3.5", "summary": "", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/profjsb/deepCR\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84defdaaf3860759ab07958c47f9dc0a6e0185af/68747470733a2f2f7472617669732d63692e636f6d2f70726f666a73622f6465657043522e7376673f746f6b656e3d62614b74433979437a7a777a7a714d3969684158266272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/profjsb/deepCR\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/505efb095b9a1f58d5541482b90ed93f255161ce/68747470733a2f2f636f6465636f762e696f2f67682f70726f666a73622f6465657043522f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5349774a466d4b4a7172\"></a>\n<a href=\"https://deepcr.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25128d51356ba9cc2bd2b5f45b98e40fa39f1c24/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6465657063722f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h2>deepCR: Deep Learning Based Cosmic Ray Removal for Astronomical Images</h2>\n<p>Identify and remove cosmic rays from astronomical images using trained convolutional neural networks.</p>\n<p>Documentation and tutorials: <a href=\"https://deepcr.readthedocs.io/\" rel=\"nofollow\">https://deepcr.readthedocs.io/</a></p>\n<p>This is the installable package which implements the methods described in the paper: Zhang &amp; Bloom (2019), submitted.</p>\n<p>Code to reproduce benchmarking results in the paper is at: <a href=\"https://github.com/kmzzhang/deepCR-paper\" rel=\"nofollow\">https://github.com/kmzzhang/deepCR-paper</a></p>\n<p>If you use this package, please cite Zhang &amp; Bloom (2019): <a href=\"https://arxiv.org/abs/1907.09500\" rel=\"nofollow\">https://arxiv.org/abs/1907.09500</a> and consider including a\nlink to this repository.</p>\n<p>Note: the current release includes only model for HST ACS/WFC.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/289426676c2cca41370385c5b8b863a7a884adce/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f70726f666a73622f6465657043522f6d61737465722f696d67732f706f73746167652d736d2e6a7067\">\n<h3>Installation</h3>\n<pre>pip install deepCR\n</pre>\n<p>Or you can install from source:</p>\n<pre>git clone https://github.com/profjsb/deepCR.git\n<span class=\"nb\">cd</span> deepCR/\npython setup.py install\n</pre>\n<h3>Quick Start</h3>\n<p>Quick download of a HST ACS/WFC image</p>\n<pre>wget -O jdba2sooq_flc.fits https://mast.stsci.edu/api/v0.1/Download/file?uri<span class=\"o\">=</span>mast:HST/product/jdba2sooq_flc.fits\n</pre>\n<p>With Python &gt;=3.5:</p>\n<p>For smaller sized images</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deepCR</span> <span class=\"kn\">import</span> <span class=\"n\">deepCR</span>\n<span class=\"kn\">from</span> <span class=\"nn\">astropy.io</span> <span class=\"kn\">import</span> <span class=\"n\">fits</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">fits</span><span class=\"o\">.</span><span class=\"n\">getdata</span><span class=\"p\">(</span><span class=\"s2\">\"jdba2sooq_flc.fits\"</span><span class=\"p\">)[:</span><span class=\"mi\">512</span><span class=\"p\">,:</span><span class=\"mi\">512</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># create an instance of deepCR with specified model configuration</span>\n<span class=\"n\">mdl</span> <span class=\"o\">=</span> <span class=\"n\">deepCR</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"s2\">\"ACS-WFC-F606W-2-32\"</span><span class=\"p\">,</span>\n\t     <span class=\"n\">inpaint</span><span class=\"o\">=</span><span class=\"s2\">\"ACS-WFC-F606W-2-32\"</span><span class=\"p\">,</span>\n             <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"CPU\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># apply to input image</span>\n<span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">cleaned_image</span> <span class=\"o\">=</span> <span class=\"n\">mdl</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"c1\"># best threshold is highest value that generate mask covering full extent of CR</span>\n<span class=\"c1\"># choose threshold by visualizing outputs.</span>\n<span class=\"c1\"># note that deepCR-inpaint would overestimate if mask does not fully cover CR.</span>\n\n<span class=\"c1\"># if you only need CR mask you may skip image inpainting for shorter runtime</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mdl</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">inpaint</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># if you want probabilistic cosmic ray mask instead of binary mask</span>\n<span class=\"n\">prob_mask</span> <span class=\"o\">=</span> <span class=\"n\">mdl</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>For WFC full size images (4k * 2k), you should specify <strong>segment = True</strong> to tell deepCR to segment the input image into 256*256 patches, and process one patch at a time.\nOtherwise this would take up &gt; 10gb memory. We recommended you use segment = True for images larger than 1k * 1k on CPU. GPU memory limits may be more strict.</p>\n<pre><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">fits</span><span class=\"o\">.</span><span class=\"n\">getdata</span><span class=\"p\">(</span><span class=\"s2\">\"jdba2sooq_flc.fits\"</span><span class=\"p\">)</span>\n<span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">cleaned_image</span> <span class=\"o\">=</span> <span class=\"n\">mdl</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>(CPU only) In place of <strong>segment = True</strong>, you can also specify <strong>parallel = True</strong> and invoke the multi-threaded version of segment mode. This will speed things up. You don't have to specify segment = True again.</p>\n<pre><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">fits</span><span class=\"o\">.</span><span class=\"n\">getdata</span><span class=\"p\">(</span><span class=\"s2\">\"jdba2sooq_flc.fits\"</span><span class=\"p\">)</span>\n<span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">cleaned_image</span> <span class=\"o\">=</span> <span class=\"n\">mdl</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">parallel</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">n_jobs</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><strong>n_jobs=-1</strong> makes use of all your CPU cores.</p>\n<p>Note that this won't speed things up if you're using GPU!</p>\n<h3>Currently available models</h3>\n<p>mask:</p>\n<pre><code>ACS-WFC-F606W-2-4\n\nACS-WFC-F606W-2-32(*)\n</code></pre>\n<p>inpaint:</p>\n<pre><code>ACS-WFC-F606W-2-32(*)\n\nACS-WFC-F606W-3-32\n</code></pre>\n<p>Recommended models are marked in (*). Larger number indicate larger capacity.</p>\n<p>Input images should come from <em>_flc.fits</em> files which are in units of electrons.</p>\n<h3>Limitations and Caveats</h3>\n<p>The currently included models are trained and benchmarked on HST ACS/WFC images in the F606W filter.</p>\n<p>Visual inspection shows that these models also work well on filters from F435W to F814W. However, users should use a higher threshold (e.g. 0.9) for short wavelength filters to minimize false detections, if any.</p>\n<h3>Contributing</h3>\n<p>We are very interested in getting bug fixes, new functionality, and new trained models from the community (especially for ground-based imaging and spectroscopy). Please fork this repo and issue a PR with your changes. It will be especially helpful if you add some tests for your changes.</p>\n\n          </div>"}, "last_serial": 5921050, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "463687d858525729d2714c7930d95758", "sha256": "4cf7ef2d469171c3def6c788fd4ee3e37e1da7595e93ea34c7d39a8b05af7bd8"}, "downloads": -1, "filename": "deepCR-0.1.0.tar.gz", "has_sig": false, "md5_digest": "463687d858525729d2714c7930d95758", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2536488, "upload_time": "2019-07-21T23:27:38", "upload_time_iso_8601": "2019-07-21T23:27:38.681073Z", "url": "https://files.pythonhosted.org/packages/67/7f/a978fdca46db7946f550957d0c456ec2c1de50b68e62f82e22b786c6f1c1/deepCR-0.1.0.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c47493be493ed66ea5c013875056fb82", "sha256": "dff5d564db3f11cde093d07c14695d00161400ddc9aca2a3691f11e6810596bd"}, "downloads": -1, "filename": "deepCR-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c47493be493ed66ea5c013875056fb82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3137321, "upload_time": "2019-07-23T06:20:33", "upload_time_iso_8601": "2019-07-23T06:20:33.488375Z", "url": "https://files.pythonhosted.org/packages/3f/08/cc69b6e54f120241d205e622dcb868972596004050217fb7b0b6dffdf703/deepCR-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "6f723bd5ee18f8f734be07c07027eefd", "sha256": "1a555dac75667492851118f325fb97739c916917d7a5de39120622ac3b5bbd63"}, "downloads": -1, "filename": "deepCR-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6f723bd5ee18f8f734be07c07027eefd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3137935, "upload_time": "2019-07-23T22:21:49", "upload_time_iso_8601": "2019-07-23T22:21:49.249146Z", "url": "https://files.pythonhosted.org/packages/79/02/90c4b9a5ef2836940d4800802179e888ab9c24c87a63225e8d4a06d6a859/deepCR-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "34992efc63f6155e17aab1eeabc2b26c", "sha256": "34d427f9491ae274d12946611f49ba2c32f1ec171fd7a236ee2a7d6b97af351f"}, "downloads": -1, "filename": "deepCR-0.1.5.tar.gz", "has_sig": false, "md5_digest": "34992efc63f6155e17aab1eeabc2b26c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3145177, "upload_time": "2019-08-14T13:47:20", "upload_time_iso_8601": "2019-08-14T13:47:20.200098Z", "url": "https://files.pythonhosted.org/packages/cd/4d/7a6d39004de588a8edc4dfc3ca7b7ca7ee6fae344303c9c6cb45c8426016/deepCR-0.1.5.tar.gz", "yanked": false}], "0.2.1rc0": [{"comment_text": "", "digests": {"md5": "62602466476e0b0fc8826575e17083e3", "sha256": "838e3b4d47083f193436627ba2592c3430703cb28b84c60fc3e0c2292b882756"}, "downloads": -1, "filename": "deepCR-0.2.1rc0.tar.gz", "has_sig": false, "md5_digest": "62602466476e0b0fc8826575e17083e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4684366, "upload_time": "2019-10-02T23:38:06", "upload_time_iso_8601": "2019-10-02T23:38:06.248012Z", "url": "https://files.pythonhosted.org/packages/6d/f7/ec4865516b66682d5e35d13d7a7ecf03d73b6ad0892258b76a96e8ccb779/deepCR-0.2.1rc0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34992efc63f6155e17aab1eeabc2b26c", "sha256": "34d427f9491ae274d12946611f49ba2c32f1ec171fd7a236ee2a7d6b97af351f"}, "downloads": -1, "filename": "deepCR-0.1.5.tar.gz", "has_sig": false, "md5_digest": "34992efc63f6155e17aab1eeabc2b26c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3145177, "upload_time": "2019-08-14T13:47:20", "upload_time_iso_8601": "2019-08-14T13:47:20.200098Z", "url": "https://files.pythonhosted.org/packages/cd/4d/7a6d39004de588a8edc4dfc3ca7b7ca7ee6fae344303c9c6cb45c8426016/deepCR-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:28 2020"}