{"info": {"author": "Unic AG - Robert Erdin, Mathias Petermann, Nicolas Baer", "author_email": "cloud@unic.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "periskop - Slack Bot Integration Tests\n======================================\n\nperiskop is an integration testing tool for slack bots. An increasing\ndiverse set of use-cases are implemented with chat bots e.g. ChatOps,\nService Desk, etc. With periskop we can implement and run integration\ntests using a simple yaml file.\n\nHere's a quick example of the power of periskop:\n\n::\n\n    test_name: chatops_diskspace\n    bot_name: mrrobot\n    timeout: 60\n    slack:\n      channel: \"#periskop-test\"\n      as_user: periskop-user\n      text: \"!diskspace mymachine /var\"\n    expect:\n      regex: true\n      attachments:\n        text: |\n          .*{u'failures': 0, u'skipped': 1, u'ok': 3, u'unreachable': 0, u'changed': 1}.*\n\nThis test ``chatops_diskspace`` executes the command\n``!diskspace mymachine /var`` in the channel ``#periskop-test`` as user\n``periskop-user`` and checks for the result in an attachment. The result\nis a string with regular expression matching.\n\nGetting Started\n---------------\n\nInstall periskop:\n\n::\n\n    pip install periskop\n\nCheck for successfull installation.\n\n::\n\n    periskop --help\n\nCreate a config file ``config.yml`` with the necessary information to\nrun tests:\n\n::\n\n    slack_token: abcd-efgh-...-...\n    as_user: myusername\n    bot_name: mybotname\n    channel: \"#periskop\"\n\nMake sure that the slack token is a valid API Tester token. We need this\nkind of token, because bots can't talk to other bots :).\n\nCreate your first test ``firsttest.yml``:\n\n::\n\n    test_name: chatops_diskspace\n    bot_name: mrrobot\n    timeout: 60\n    slack:\n      text: \"!diskspace mymachine /var\"\n    expect:\n      regex: true\n      attachments:\n        text: |\n          .*{u'failures': 0, u'skipped': 1, u'ok': 3, u'unreachable': 0, u'changed': 1}.*\n\nList all tests:\n\n::\n\n    periskop list\n\nRun the test:\n\n::\n\n    periskop run firsttest\n\nTest Implementation\n-------------------\n\nSlack Input\n~~~~~~~~~~~\n\nIn the examples above we specified the following simple slack command:\n\n::\n\n    slack:\n      text: \"!diskspace mymachine /var\"\n\nWe can not only specify text but use the full set of arguments defined\nhere: `Slack PostMessage\nAPI <https://api.slack.com/methods/chat.postMessage#arguments>`__\n\nTest Condition\n~~~~~~~~~~~~~~\n\nWe can test either for a full text match or for regex. The test allows\nfor specification of the complete `message event\ntype <https://api.slack.com/events/message>`__. Instead of checking for\nthe attachment you may as well check for the text:\n\n::\n\n    expect:\n      regex: true\n      text: |\n        .*ok.*\n\nRegEx\n^^^^^\n\n::\n\n    test_name: chatops_diskspace\n    bot_name: mrrobot\n    timeout: 60\n    slack:\n      channel: \"#periskop\"\n      as_user: periskop-user\n      text: \"!diskspace mymachine /var\"\n    expect:\n      regex: true\n      attachments:\n        text: |\n          .*{u'failures': 0, u'skipped': 1, u'ok': 3, u'unreachable': 0, u'changed': 1}.*\n\nFull match\n^^^^^^^^^^\n\n::\n\n    test_name: status command\n    bot_name: mrrobot\n    timeout: 300\n    slack:\n      channel: \"#periskop\"\n      as_user: periskop-user\n      text: \"!status mymachine\"\n    expect:\n      attachments:\n        text: |\n          ```<http://mymachine> | SUCCESS =&gt; {\\n    \"changed\": false, \\n    \"ping\": \"pong\"\\n}```\n      text: \"@mrrobot: Here is your status for `<http://mymachine>` host(s):\"`\n\nSetup Development Environment\n-----------------------------\n\n::\n\n    git clone https://github.com/unic/periskop.git\n    python setup.py develop\n\nPyPi\n~~~~\n\nIf you want to update the PyPi package, make sure you have a valid\n``~/.pypirc`` configuration:\n\n::\n\n    [distutils]\n    index-servers =\n      pypi\n      pypitest\n\n    [pypi]\n    repository=https://pypi.python.org/pypi\n    username=your_username\n    password=your_password\n\n    [pypitest]\n    repository=https://testpypi.python.org/pypi\n    username=your_username\n    password=your_password\n\nThen execute\n\n::\n\n    pip install pypandoc\n    brew install pandoc\n    python setup.py register -r pypi", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/unic/periskop", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "periskop", "package_url": "https://pypi.org/project/periskop/", "platform": "any", "project_url": "https://pypi.org/project/periskop/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/unic/periskop"}, "release_url": "https://pypi.org/project/periskop/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Integration testing for ChatOps via Slack", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>periskop is an integration testing tool for slack bots. An increasing\ndiverse set of use-cases are implemented with chat bots e.g. ChatOps,\nService Desk, etc. With periskop we can implement and run integration\ntests using a simple yaml file.</p>\n<p>Here\u2019s a quick example of the power of periskop:</p>\n<pre>test_name: chatops_diskspace\nbot_name: mrrobot\ntimeout: 60\nslack:\n  channel: \"#periskop-test\"\n  as_user: periskop-user\n  text: \"!diskspace mymachine /var\"\nexpect:\n  regex: true\n  attachments:\n    text: |\n      .*{u'failures': 0, u'skipped': 1, u'ok': 3, u'unreachable': 0, u'changed': 1}.*\n</pre>\n<p>This test <tt>chatops_diskspace</tt> executes the command\n<tt>!diskspace mymachine /var</tt> in the channel <tt><span class=\"pre\">#periskop-test</span></tt> as user\n<tt><span class=\"pre\">periskop-user</span></tt> and checks for the result in an attachment. The result\nis a string with regular expression matching.</p>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Install periskop:</p>\n<pre>pip install periskop\n</pre>\n<p>Check for successfull installation.</p>\n<pre>periskop --help\n</pre>\n<p>Create a config file <tt>config.yml</tt> with the necessary information to\nrun tests:</p>\n<pre>slack_token: abcd-efgh-...-...\nas_user: myusername\nbot_name: mybotname\nchannel: \"#periskop\"\n</pre>\n<p>Make sure that the slack token is a valid API Tester token. We need this\nkind of token, because bots can\u2019t talk to other bots :).</p>\n<p>Create your first test <tt>firsttest.yml</tt>:</p>\n<pre>test_name: chatops_diskspace\nbot_name: mrrobot\ntimeout: 60\nslack:\n  text: \"!diskspace mymachine /var\"\nexpect:\n  regex: true\n  attachments:\n    text: |\n      .*{u'failures': 0, u'skipped': 1, u'ok': 3, u'unreachable': 0, u'changed': 1}.*\n</pre>\n<p>List all tests:</p>\n<pre>periskop list\n</pre>\n<p>Run the test:</p>\n<pre>periskop run firsttest\n</pre>\n</div>\n<div id=\"test-implementation\">\n<h2>Test Implementation</h2>\n<div id=\"slack-input\">\n<h3>Slack Input</h3>\n<p>In the examples above we specified the following simple slack command:</p>\n<pre>slack:\n  text: \"!diskspace mymachine /var\"\n</pre>\n<p>We can not only specify text but use the full set of arguments defined\nhere: <a href=\"https://api.slack.com/methods/chat.postMessage#arguments\" rel=\"nofollow\">Slack PostMessage\nAPI</a></p>\n</div>\n<div id=\"test-condition\">\n<h3>Test Condition</h3>\n<p>We can test either for a full text match or for regex. The test allows\nfor specification of the complete <a href=\"https://api.slack.com/events/message\" rel=\"nofollow\">message event\ntype</a>. Instead of checking for\nthe attachment you may as well check for the text:</p>\n<pre>expect:\n  regex: true\n  text: |\n    .*ok.*\n</pre>\n<div id=\"regex\">\n<h4>RegEx</h4>\n<pre>test_name: chatops_diskspace\nbot_name: mrrobot\ntimeout: 60\nslack:\n  channel: \"#periskop\"\n  as_user: periskop-user\n  text: \"!diskspace mymachine /var\"\nexpect:\n  regex: true\n  attachments:\n    text: |\n      .*{u'failures': 0, u'skipped': 1, u'ok': 3, u'unreachable': 0, u'changed': 1}.*\n</pre>\n</div>\n<div id=\"full-match\">\n<h4>Full match</h4>\n<pre>test_name: status command\nbot_name: mrrobot\ntimeout: 300\nslack:\n  channel: \"#periskop\"\n  as_user: periskop-user\n  text: \"!status mymachine\"\nexpect:\n  attachments:\n    text: |\n      ```&lt;http://mymachine&gt; | SUCCESS =&amp;gt; {\\n    \"changed\": false, \\n    \"ping\": \"pong\"\\n}```\n  text: \"@mrrobot: Here is your status for `&lt;http://mymachine&gt;` host(s):\"`\n</pre>\n</div>\n</div>\n</div>\n<div id=\"setup-development-environment\">\n<h2>Setup Development Environment</h2>\n<pre>git clone https://github.com/unic/periskop.git\npython setup.py develop\n</pre>\n<div id=\"pypi\">\n<h3>PyPi</h3>\n<p>If you want to update the PyPi package, make sure you have a valid\n<tt><span class=\"pre\">~/.pypirc</span></tt> configuration:</p>\n<pre>[distutils]\nindex-servers =\n  pypi\n  pypitest\n\n[pypi]\nrepository=https://pypi.python.org/pypi\nusername=your_username\npassword=your_password\n\n[pypitest]\nrepository=https://testpypi.python.org/pypi\nusername=your_username\npassword=your_password\n</pre>\n<p>Then execute</p>\n<pre>pip install pypandoc\nbrew install pandoc\npython setup.py register -r pypi\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2609672, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "49cefc8499a9face8cf18e692dae18bd", "sha256": "ddcbc837018869758aee5a5875faf127d129668132c1611359929925a086f1b3"}, "downloads": -1, "filename": "periskop-1.0.0.tar.gz", "has_sig": false, "md5_digest": "49cefc8499a9face8cf18e692dae18bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6282, "upload_time": "2017-01-31T16:58:50", "upload_time_iso_8601": "2017-01-31T16:58:50.680317Z", "url": "https://files.pythonhosted.org/packages/96/98/c2a8dcf0805ab1835fbecfaed3caedb7c6076339f56e0558c1e67e33ace6/periskop-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49cefc8499a9face8cf18e692dae18bd", "sha256": "ddcbc837018869758aee5a5875faf127d129668132c1611359929925a086f1b3"}, "downloads": -1, "filename": "periskop-1.0.0.tar.gz", "has_sig": false, "md5_digest": "49cefc8499a9face8cf18e692dae18bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6282, "upload_time": "2017-01-31T16:58:50", "upload_time_iso_8601": "2017-01-31T16:58:50.680317Z", "url": "https://files.pythonhosted.org/packages/96/98/c2a8dcf0805ab1835fbecfaed3caedb7c6076339f56e0558c1e67e33ace6/periskop-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:17 2020"}