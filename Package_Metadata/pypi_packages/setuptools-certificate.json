{"info": {"author": "Raphael Guzman", "author_email": "raphael.h.guzman@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Setuptools Certificate Metadata Extension\n\nThis is a setuptools extension that provides new keyword arguments `privkey_path` and `pubkey_path`. \n\nBy specifying the `privkey_path`, setuptools will generate the git hash (SHA1) of the module directory and sign the output based on the PEM key path passed in. The resulting signature will be stored as egg metadata `{{module_name}}.sig` accessible via `pkg_resources` module. \n\nIf passing `pubkey_path`, this will simply be copied in as egg metadata `{{module_name}}.pub`. \n\nThis provides a solution to determining the 'trust-worthiness' of plugins or extensions that may be developed by the community for a given pip package if the public key file is available for the RSA keypair. The choice of what to do for failed verification is up to you.\n\n# Use\n\n## Extensible Package e.g. `base`\n\n``` python\nsetuptools.setup(\n    ...\n    setup_requires=['setuptools_certificate'],\n    pubkey_path='./pubkey.pem',\n    ...\n```\n\n## Plugin Package e.g. `plugin1`\n\n``` python\nsetuptools.setup(\n    ...\n    setup_requires=['setuptools_certificate'],\n    privkey_path='~/keys/privkey.pem',\n    ...\n```\n\n## Verifying Contents\n\n``` python\nimport pkg_resources\nfrom pathlib import Path\nfrom setuptools_certificate import hash_pkg, verify\n\nbase_name = 'base'\nplugin_name = 'plugin1'\nbase_meta = pkg_resources.get_distribution(base_name)\nplugin_meta = pkg_resources.get_distribution(plugin_name)\n\ndata = hash_pkg(str(Path(plugin_meta.module_path, plugin_name)))\nsignature = plugin_meta.get_metadata('{}.sig'.format(plugin_name))\npubkey_path = str(Path(base_meta.egg_info, '{}.pub'.format(base_name)))\n\nverify(pubkey_path, data, signature)\n```\n\n\n# Compatibility with `git` and `openssl` CLI\n\nFor reference, certificates may also be generated and verified using `git` and `openssl` by the following process:\n\n## Generate\n\n``` shell\n$ cd {{/path/to/local/repo/dir}}\n$ git add . --all\n$ GIT_HASH=$(git ls-files -s {{/pip/package/dir}} | git hash-object --stdin)\n$ printf $GIT_HASH | openssl dgst -sha256 -sign {{/path/to/privkey/pem}} -out {{pip_package_name}}.sigbin -sigopt rsa_padding_mode:pss\n$ openssl enc -base64 -in {{pip_package_name}}.sigbin -out {{pip_package_name}}.sig\n$ rm {{pip_package_name}}.sigbin\n$ git reset\n```\n\n## Verify\n\n``` shell\n$ cd {{/path/to/local/repo/dir}}\n$ git add . --all\n$ GIT_HASH=$(git ls-files -s {{/pip/package/dir}} | git hash-object --stdin)\n$ openssl enc -base64 -d -in {{pip_package_name}}.sig -out {{pip_package_name}}.sigbin\n$ printf $GIT_HASH | openssl dgst -sha256 -verify {{/path/to/pubkey/pem}} -signature {{pip_package_name}}.sigbin -sigopt rsa_padding_mode:pss\n$ rm {{pip_package_name}}.sigbin\n$ git reset\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guzman-raphael/setuptools_certificate", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "setuptools-certificate", "package_url": "https://pypi.org/project/setuptools-certificate/", "platform": "", "project_url": "https://pypi.org/project/setuptools-certificate/", "project_urls": {"Homepage": "https://github.com/guzman-raphael/setuptools_certificate"}, "release_url": "https://pypi.org/project/setuptools-certificate/0.0.2/", "requires_dist": ["cryptography"], "requires_python": "", "summary": "A setuptools extension for signed certificate and public key metadata for verifying contents of pip modules.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Setuptools Certificate Metadata Extension</h1>\n<p>This is a setuptools extension that provides new keyword arguments <code>privkey_path</code> and <code>pubkey_path</code>.</p>\n<p>By specifying the <code>privkey_path</code>, setuptools will generate the git hash (SHA1) of the module directory and sign the output based on the PEM key path passed in. The resulting signature will be stored as egg metadata <code>{{module_name}}.sig</code> accessible via <code>pkg_resources</code> module.</p>\n<p>If passing <code>pubkey_path</code>, this will simply be copied in as egg metadata <code>{{module_name}}.pub</code>.</p>\n<p>This provides a solution to determining the 'trust-worthiness' of plugins or extensions that may be developed by the community for a given pip package if the public key file is available for the RSA keypair. The choice of what to do for failed verification is up to you.</p>\n<h1>Use</h1>\n<h2>Extensible Package e.g. <code>base</code></h2>\n<pre><span class=\"n\">setuptools</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'setuptools_certificate'</span><span class=\"p\">],</span>\n    <span class=\"n\">pubkey_path</span><span class=\"o\">=</span><span class=\"s1\">'./pubkey.pem'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>Plugin Package e.g. <code>plugin1</code></h2>\n<pre><span class=\"n\">setuptools</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'setuptools_certificate'</span><span class=\"p\">],</span>\n    <span class=\"n\">privkey_path</span><span class=\"o\">=</span><span class=\"s1\">'~/keys/privkey.pem'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>Verifying Contents</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pkg_resources</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools_certificate</span> <span class=\"kn\">import</span> <span class=\"n\">hash_pkg</span><span class=\"p\">,</span> <span class=\"n\">verify</span>\n\n<span class=\"n\">base_name</span> <span class=\"o\">=</span> <span class=\"s1\">'base'</span>\n<span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"s1\">'plugin1'</span>\n<span class=\"n\">base_meta</span> <span class=\"o\">=</span> <span class=\"n\">pkg_resources</span><span class=\"o\">.</span><span class=\"n\">get_distribution</span><span class=\"p\">(</span><span class=\"n\">base_name</span><span class=\"p\">)</span>\n<span class=\"n\">plugin_meta</span> <span class=\"o\">=</span> <span class=\"n\">pkg_resources</span><span class=\"o\">.</span><span class=\"n\">get_distribution</span><span class=\"p\">(</span><span class=\"n\">plugin_name</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">hash_pkg</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">plugin_meta</span><span class=\"o\">.</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">plugin_name</span><span class=\"p\">)))</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">plugin_meta</span><span class=\"o\">.</span><span class=\"n\">get_metadata</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.sig'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">plugin_name</span><span class=\"p\">))</span>\n<span class=\"n\">pubkey_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">base_meta</span><span class=\"o\">.</span><span class=\"n\">egg_info</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.pub'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">base_name</span><span class=\"p\">)))</span>\n\n<span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">pubkey_path</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">)</span>\n</pre>\n<h1>Compatibility with <code>git</code> and <code>openssl</code> CLI</h1>\n<p>For reference, certificates may also be generated and verified using <code>git</code> and <code>openssl</code> by the following process:</p>\n<h2>Generate</h2>\n<pre>$ <span class=\"nb\">cd</span> <span class=\"o\">{{</span>/path/to/local/repo/dir<span class=\"o\">}}</span>\n$ git add . --all\n$ <span class=\"nv\">GIT_HASH</span><span class=\"o\">=</span><span class=\"k\">$(</span>git ls-files -s <span class=\"o\">{{</span>/pip/package/dir<span class=\"o\">}}</span> <span class=\"p\">|</span> git hash-object --stdin<span class=\"k\">)</span>\n$ <span class=\"nb\">printf</span> <span class=\"nv\">$GIT_HASH</span> <span class=\"p\">|</span> openssl dgst -sha256 -sign <span class=\"o\">{{</span>/path/to/privkey/pem<span class=\"o\">}}</span> -out <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sigbin -sigopt rsa_padding_mode:pss\n$ openssl enc -base64 -in <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sigbin -out <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sig\n$ rm <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sigbin\n$ git reset\n</pre>\n<h2>Verify</h2>\n<pre>$ <span class=\"nb\">cd</span> <span class=\"o\">{{</span>/path/to/local/repo/dir<span class=\"o\">}}</span>\n$ git add . --all\n$ <span class=\"nv\">GIT_HASH</span><span class=\"o\">=</span><span class=\"k\">$(</span>git ls-files -s <span class=\"o\">{{</span>/pip/package/dir<span class=\"o\">}}</span> <span class=\"p\">|</span> git hash-object --stdin<span class=\"k\">)</span>\n$ openssl enc -base64 -d -in <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sig -out <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sigbin\n$ <span class=\"nb\">printf</span> <span class=\"nv\">$GIT_HASH</span> <span class=\"p\">|</span> openssl dgst -sha256 -verify <span class=\"o\">{{</span>/path/to/pubkey/pem<span class=\"o\">}}</span> -signature <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sigbin -sigopt rsa_padding_mode:pss\n$ rm <span class=\"o\">{{</span>pip_package_name<span class=\"o\">}}</span>.sigbin\n$ git reset\n</pre>\n\n          </div>"}, "last_serial": 6555293, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "91a804736f148fa81d0ec83456328309", "sha256": "e83f0290e76a665b80d43a12c78d2d02cac508f55385f13510302f5d90b7fc56"}, "downloads": -1, "filename": "setuptools_certificate-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91a804736f148fa81d0ec83456328309", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5051, "upload_time": "2020-02-01T18:13:09", "upload_time_iso_8601": "2020-02-01T18:13:09.890875Z", "url": "https://files.pythonhosted.org/packages/e9/15/ab6755a34a13035e41304aa5d16704ffa77f837d5ad2327f281d5f9627b7/setuptools_certificate-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a38ae6ffd82a6aeebdca75fb5b02061", "sha256": "82bfdb14b0cb9e6482306a620ff2ab7d140c742b934961ae73bf348b97ce96ff"}, "downloads": -1, "filename": "setuptools_certificate-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3a38ae6ffd82a6aeebdca75fb5b02061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3703, "upload_time": "2020-02-01T18:13:12", "upload_time_iso_8601": "2020-02-01T18:13:12.506038Z", "url": "https://files.pythonhosted.org/packages/69/6c/855d24684f41abdf6324d0439c1d01e87c5abc67ad88db11715d7bed0cda/setuptools_certificate-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bc7ce43584621e42db755e4515a2d70a", "sha256": "b8fe1f87af52af8d9e9851e90356196ed1095804b17a648e544fee754d73f3d0"}, "downloads": -1, "filename": "setuptools_certificate-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc7ce43584621e42db755e4515a2d70a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5049, "upload_time": "2020-02-01T19:04:31", "upload_time_iso_8601": "2020-02-01T19:04:31.026199Z", "url": "https://files.pythonhosted.org/packages/77/b7/9d306a52238a87533143941d23fdc43dee0a44e272b6590e71607be1a465/setuptools_certificate-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8eae2b00f1962284c5bdfc87c2160a36", "sha256": "7cf3406b44fe828be818944b3b3008691fbc233c9bdf51d6a950f68c848ac7e7"}, "downloads": -1, "filename": "setuptools_certificate-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8eae2b00f1962284c5bdfc87c2160a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3698, "upload_time": "2020-02-01T19:04:32", "upload_time_iso_8601": "2020-02-01T19:04:32.374563Z", "url": "https://files.pythonhosted.org/packages/1d/79/c526041d41cd4dad87f4e1daf7843e490032665fca820029996888485348/setuptools_certificate-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc7ce43584621e42db755e4515a2d70a", "sha256": "b8fe1f87af52af8d9e9851e90356196ed1095804b17a648e544fee754d73f3d0"}, "downloads": -1, "filename": "setuptools_certificate-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc7ce43584621e42db755e4515a2d70a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5049, "upload_time": "2020-02-01T19:04:31", "upload_time_iso_8601": "2020-02-01T19:04:31.026199Z", "url": "https://files.pythonhosted.org/packages/77/b7/9d306a52238a87533143941d23fdc43dee0a44e272b6590e71607be1a465/setuptools_certificate-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8eae2b00f1962284c5bdfc87c2160a36", "sha256": "7cf3406b44fe828be818944b3b3008691fbc233c9bdf51d6a950f68c848ac7e7"}, "downloads": -1, "filename": "setuptools_certificate-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8eae2b00f1962284c5bdfc87c2160a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3698, "upload_time": "2020-02-01T19:04:32", "upload_time_iso_8601": "2020-02-01T19:04:32.374563Z", "url": "https://files.pythonhosted.org/packages/1d/79/c526041d41cd4dad87f4e1daf7843e490032665fca820029996888485348/setuptools_certificate-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:31 2020"}