{"info": {"author": "SN", "author_email": "scottnanda@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# wNMF: Weighted Non-Negative Matrix Factorization\n\n## About\n`wNMF` implements a simple version of Non-Negative Matrix Factorization (NMF) that utilizes a weight matrix to weight the importance of each feature in each sample of the data matrix to be factorized.\n\n`wNMF` is easy to use, because it behaves like an `sklearn.decomposition` model, but also allows for multiple fitting attempts.\n\nMore information about the modified multiplicative update algorithim utilized can be found here:\n[Blondel, Vincent & Ho, Ngoc-Diep & Van Dooren, Paul. (2007). Weighted Nonnegative Matrix Factorization and Face Feature Extraction](https://pdfs.semanticscholar.org/e20e/98642009f13686a540c193fdbce2d509c3b8.pdf) \n\n`wNMF` specifically implements solutions for determining the decomposed matrices U and V when minimizing the Frobenius Norm or the Kullback-Leibler Divergence:\n\n**Useful Links**\n- [Source on Github](https://github.com/asn32/weighted-nmf)\n- [Package on PyPI](https://pypi.org/project/weighted-nmf/)\n\n## Installation\nThis package is available on PyPI and can be installed with `pip`:\n```bash\n$ pip install wNMF\n```\n\nAlternatively, download the source from [github](https://github.com/asn32/weighted-nmf) and install:\n```bash\n$ git clone https://github.com/asn32/weighted-nmf.git\n$ cd weighted-nmf\n$ python3 setup.py install --user\n```\n\n## Usage\n`wNMF` is a python library that can be imported.\n```python\nimport wNMF\n```\nAnd it can be used like an `sklearn.decomposition` model. \n\nFirst create an instance of the `wNMF` model by setting the number of components.\n\nOther parameters can be set too, such as the loss function, maximum number of iterations, and whether or not to track the decreasing error over every single run.\n```python\n## Mock data, a 100x100 data matrix, reduce to 25 dimensions\nn=100\nfeatures = 100\ncomponents=25\nX = 100*np.random.uniform(size=n*features).reshape(features,n)\nW = np.ones_like(X)\n\n## Define the model / fit\nmodel = wNMF(n_components=25,\n            beta_loss='kullback-leibler',\n            max_iter=1000,\n            track_error=True)\n```\n\nThen, fit the model to the data using the instance methods `wNMF().fit` or `wNMF().fit_transform`.\n```python\nfit = model.fit(X=X,W=W,n_run=5)\n```\n\nAfter the fit is complete, explore the fit quality by examining the decomposed matrices and / or overall error.\n```python\n## Get the best solutions\nlowest_error = fit.err)\nbest_V = fit.V\nbest_U = fit.U\n\n## Or look at all the solutions from the 5 runs in this example\nall_Vs = fit.V_all\n```\n\n## License\nwnmf is MIT-licensed\n\n## Disclaimer\n`wnmf` is provided with no guarantees\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/asn32/weighted-nmf", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "wNMF", "package_url": "https://pypi.org/project/wNMF/", "platform": "", "project_url": "https://pypi.org/project/wNMF/", "project_urls": {"Homepage": "https://github.com/asn32/weighted-nmf"}, "release_url": "https://pypi.org/project/wNMF/0.0.4/", "requires_dist": ["numpy (>=1.13)"], "requires_python": ">=3.6", "summary": "wNMF: weighted Non-Negative matrix Factorization", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>wNMF: Weighted Non-Negative Matrix Factorization</h1>\n<h2>About</h2>\n<p><code>wNMF</code> implements a simple version of Non-Negative Matrix Factorization (NMF) that utilizes a weight matrix to weight the importance of each feature in each sample of the data matrix to be factorized.</p>\n<p><code>wNMF</code> is easy to use, because it behaves like an <code>sklearn.decomposition</code> model, but also allows for multiple fitting attempts.</p>\n<p>More information about the modified multiplicative update algorithim utilized can be found here:\n<a href=\"https://pdfs.semanticscholar.org/e20e/98642009f13686a540c193fdbce2d509c3b8.pdf\" rel=\"nofollow\">Blondel, Vincent &amp; Ho, Ngoc-Diep &amp; Van Dooren, Paul. (2007). Weighted Nonnegative Matrix Factorization and Face Feature Extraction</a></p>\n<p><code>wNMF</code> specifically implements solutions for determining the decomposed matrices U and V when minimizing the Frobenius Norm or the Kullback-Leibler Divergence:</p>\n<p><strong>Useful Links</strong></p>\n<ul>\n<li><a href=\"https://github.com/asn32/weighted-nmf\" rel=\"nofollow\">Source on Github</a></li>\n<li><a href=\"https://pypi.org/project/weighted-nmf/\" rel=\"nofollow\">Package on PyPI</a></li>\n</ul>\n<h2>Installation</h2>\n<p>This package is available on PyPI and can be installed with <code>pip</code>:</p>\n<pre>$ pip install wNMF\n</pre>\n<p>Alternatively, download the source from <a href=\"https://github.com/asn32/weighted-nmf\" rel=\"nofollow\">github</a> and install:</p>\n<pre>$ git clone https://github.com/asn32/weighted-nmf.git\n$ <span class=\"nb\">cd</span> weighted-nmf\n$ python3 setup.py install --user\n</pre>\n<h2>Usage</h2>\n<p><code>wNMF</code> is a python library that can be imported.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">wNMF</span>\n</pre>\n<p>And it can be used like an <code>sklearn.decomposition</code> model.</p>\n<p>First create an instance of the <code>wNMF</code> model by setting the number of components.</p>\n<p>Other parameters can be set too, such as the loss function, maximum number of iterations, and whether or not to track the decreasing error over every single run.</p>\n<pre><span class=\"c1\">## Mock data, a 100x100 data matrix, reduce to 25 dimensions</span>\n<span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"mi\">25</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">features</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones_like</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## Define the model / fit</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">wNMF</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n            <span class=\"n\">beta_loss</span><span class=\"o\">=</span><span class=\"s1\">'kullback-leibler'</span><span class=\"p\">,</span>\n            <span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n            <span class=\"n\">track_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Then, fit the model to the data using the instance methods <code>wNMF().fit</code> or <code>wNMF().fit_transform</code>.</p>\n<pre><span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"n\">n_run</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>After the fit is complete, explore the fit quality by examining the decomposed matrices and / or overall error.</p>\n<pre><span class=\"c1\">## Get the best solutions</span>\n<span class=\"n\">lowest_error</span> <span class=\"o\">=</span> <span class=\"n\">fit</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"n\">best_V</span> <span class=\"o\">=</span> <span class=\"n\">fit</span><span class=\"o\">.</span><span class=\"n\">V</span>\n<span class=\"n\">best_U</span> <span class=\"o\">=</span> <span class=\"n\">fit</span><span class=\"o\">.</span><span class=\"n\">U</span>\n\n<span class=\"c1\">## Or look at all the solutions from the 5 runs in this example</span>\n<span class=\"n\">all_Vs</span> <span class=\"o\">=</span> <span class=\"n\">fit</span><span class=\"o\">.</span><span class=\"n\">V_all</span>\n</pre>\n<h2>License</h2>\n<p>wnmf is MIT-licensed</p>\n<h2>Disclaimer</h2>\n<p><code>wnmf</code> is provided with no guarantees</p>\n\n          </div>"}, "last_serial": 6122501, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "cdd124adfff11a14341c3299e8104c03", "sha256": "f8e545bc28fd256d81b32cd3a9063e9f7878794c7e0967bdae18f9a51bfa4410"}, "downloads": -1, "filename": "wNMF-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cdd124adfff11a14341c3299e8104c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10915, "upload_time": "2019-11-12T09:43:46", "upload_time_iso_8601": "2019-11-12T09:43:46.697739Z", "url": "https://files.pythonhosted.org/packages/47/d4/5afeb50b4fccb852b5d8e28c1acaf27d5e8e4600d9af641cf3a800db12a5/wNMF-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "578a9eef34106abde765b571abbe0961", "sha256": "c5343d262c78b148843a1531dc075f2ba767c3125794b9838e4c95aab5b60580"}, "downloads": -1, "filename": "wNMF-0.0.4.tar.gz", "has_sig": false, "md5_digest": "578a9eef34106abde765b571abbe0961", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11726, "upload_time": "2019-11-12T09:43:48", "upload_time_iso_8601": "2019-11-12T09:43:48.938286Z", "url": "https://files.pythonhosted.org/packages/2b/7e/8ce9c446e3917a35667bddcf9a6ac9c5422d9a9e005ba83df8fdfcee4df8/wNMF-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cdd124adfff11a14341c3299e8104c03", "sha256": "f8e545bc28fd256d81b32cd3a9063e9f7878794c7e0967bdae18f9a51bfa4410"}, "downloads": -1, "filename": "wNMF-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cdd124adfff11a14341c3299e8104c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10915, "upload_time": "2019-11-12T09:43:46", "upload_time_iso_8601": "2019-11-12T09:43:46.697739Z", "url": "https://files.pythonhosted.org/packages/47/d4/5afeb50b4fccb852b5d8e28c1acaf27d5e8e4600d9af641cf3a800db12a5/wNMF-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "578a9eef34106abde765b571abbe0961", "sha256": "c5343d262c78b148843a1531dc075f2ba767c3125794b9838e4c95aab5b60580"}, "downloads": -1, "filename": "wNMF-0.0.4.tar.gz", "has_sig": false, "md5_digest": "578a9eef34106abde765b571abbe0961", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11726, "upload_time": "2019-11-12T09:43:48", "upload_time_iso_8601": "2019-11-12T09:43:48.938286Z", "url": "https://files.pythonhosted.org/packages/2b/7e/8ce9c446e3917a35667bddcf9a6ac9c5422d9a9e005ba83df8fdfcee4df8/wNMF-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:20 2020"}