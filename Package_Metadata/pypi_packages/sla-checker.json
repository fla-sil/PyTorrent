{"info": {"author": "Andrea Dainese", "author_email": "andrea.dainese@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# SLA Checker\n\nSLA Checker helps to check if an event is within the defined SLA.\n\n## Installation\n\n```\npip3 install sla-checker\n```\n\n## Usage\n\nInput parameters:\n\n* `event_start`: when the event starts (e.g. when a trouble ticket is created)\n* `event_end`: when the event ends (e.g. when the trouble ticket is solved)\n* `country_code` (optional if `working_on_holidays = True`): the country code (e.g. IT)\n* `minutes_to_resolve`: maximum time in minutes allowed between `event_start` and `event_end`\n* `opening_hours` (optional if 7x24 service): define opening hours (e.g. `09:00`)\n* `closing_hours` (optional if 7x24 service): define closing hours (e.g. `18:00`)\n* `working_on_sat` (optional, default is `False`): define if Saturday is a working day\n* `working_on_holidays` (optional, default is `False`): define if Sunday and Holidays are working days\n\nExample (7x24 service with 2 hours SLA):\n\n```\nsla = sla_checker.SLAChecker()\nsla.check(\n  event_start = datetime.datetime(2020, 12, 24, 17, 0, 0),\n  event_end = datetime.datetime(2020, 12, 28, 10, 0, 1),\n  country_code = \"IT\",\n  minutes_to_resolve = 120,\n)\n```\n\nExample (5x9 service with 2 hours SLA):\n\n```\nsla = sla_checker.SLAChecker()\nsla.check(\n  event_start = datetime.datetime(2020, 12, 24, 17, 0, 0),\n  event_end = datetime.datetime(2020, 12, 28, 10, 0, 1),\n  country_code = \"IT\",\n  minutes_to_resolve = 120,\n  opening_hours = \"09:00\",\n  closing_hours = \"18:00\",\n  working_on_sat = False,\n  working_on_holidays = False,\n)\n```\n\nExample (7x9 service with 2 hours SLA):\n\n```\nsla = sla_checker.SLAChecker()\nsla.check(\n  event_start = datetime.datetime(2020, 12, 24, 17, 0, 0),\n  event_end = datetime.datetime(2020, 12, 28, 10, 0, 1),\n  country_code = \"IT\",\n  minutes_to_resolve = 120,\n  opening_hours = \"09:00\",\n  closing_hours = \"18:00\",\n  working_on_sat = True,\n  working_on_holidays = True,\n)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dainok/sla_checker", "keywords": "", "license": "GPL-3.0-or-later", "maintainer": "", "maintainer_email": "", "name": "sla-checker", "package_url": "https://pypi.org/project/sla-checker/", "platform": "", "project_url": "https://pypi.org/project/sla-checker/", "project_urls": {"Homepage": "https://github.com/dainok/sla_checker"}, "release_url": "https://pypi.org/project/sla-checker/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A python module that will check if two events are within a defined SLA.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SLA Checker</h1>\n<p>SLA Checker helps to check if an event is within the defined SLA.</p>\n<h2>Installation</h2>\n<pre><code>pip3 install sla-checker\n</code></pre>\n<h2>Usage</h2>\n<p>Input parameters:</p>\n<ul>\n<li><code>event_start</code>: when the event starts (e.g. when a trouble ticket is created)</li>\n<li><code>event_end</code>: when the event ends (e.g. when the trouble ticket is solved)</li>\n<li><code>country_code</code> (optional if <code>working_on_holidays = True</code>): the country code (e.g. IT)</li>\n<li><code>minutes_to_resolve</code>: maximum time in minutes allowed between <code>event_start</code> and <code>event_end</code></li>\n<li><code>opening_hours</code> (optional if 7x24 service): define opening hours (e.g. <code>09:00</code>)</li>\n<li><code>closing_hours</code> (optional if 7x24 service): define closing hours (e.g. <code>18:00</code>)</li>\n<li><code>working_on_sat</code> (optional, default is <code>False</code>): define if Saturday is a working day</li>\n<li><code>working_on_holidays</code> (optional, default is <code>False</code>): define if Sunday and Holidays are working days</li>\n</ul>\n<p>Example (7x24 service with 2 hours SLA):</p>\n<pre><code>sla = sla_checker.SLAChecker()\nsla.check(\n  event_start = datetime.datetime(2020, 12, 24, 17, 0, 0),\n  event_end = datetime.datetime(2020, 12, 28, 10, 0, 1),\n  country_code = \"IT\",\n  minutes_to_resolve = 120,\n)\n</code></pre>\n<p>Example (5x9 service with 2 hours SLA):</p>\n<pre><code>sla = sla_checker.SLAChecker()\nsla.check(\n  event_start = datetime.datetime(2020, 12, 24, 17, 0, 0),\n  event_end = datetime.datetime(2020, 12, 28, 10, 0, 1),\n  country_code = \"IT\",\n  minutes_to_resolve = 120,\n  opening_hours = \"09:00\",\n  closing_hours = \"18:00\",\n  working_on_sat = False,\n  working_on_holidays = False,\n)\n</code></pre>\n<p>Example (7x9 service with 2 hours SLA):</p>\n<pre><code>sla = sla_checker.SLAChecker()\nsla.check(\n  event_start = datetime.datetime(2020, 12, 24, 17, 0, 0),\n  event_end = datetime.datetime(2020, 12, 28, 10, 0, 1),\n  country_code = \"IT\",\n  minutes_to_resolve = 120,\n  opening_hours = \"09:00\",\n  closing_hours = \"18:00\",\n  working_on_sat = True,\n  working_on_holidays = True,\n)\n</code></pre>\n\n          </div>"}, "last_serial": 6315948, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "bc6245c9044fa81dbc47c63de9daa929", "sha256": "31e90ccd5d1b34812f0ea5d351596672887a8baccb290c2d3a78fb6c34566e52"}, "downloads": -1, "filename": "sla_checker-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc6245c9044fa81dbc47c63de9daa929", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15557, "upload_time": "2019-12-17T08:23:27", "upload_time_iso_8601": "2019-12-17T08:23:27.597086Z", "url": "https://files.pythonhosted.org/packages/48/17/9525046b226d3862424d14d0ab9b5d19970f42926100adcae6cd6b62d5d8/sla_checker-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a1e6f4b192db4a46fa0e18a9d161306", "sha256": "c3787e8fd4bb364e41c90e62bcd215e70579fc7004a6551b2ccce9f1cb906e29"}, "downloads": -1, "filename": "sla_checker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4a1e6f4b192db4a46fa0e18a9d161306", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2986, "upload_time": "2019-12-17T08:23:29", "upload_time_iso_8601": "2019-12-17T08:23:29.214782Z", "url": "https://files.pythonhosted.org/packages/a5/59/6a7325f7722a085f02924057df2cd9004e2f823937e2989516428a531f55/sla_checker-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc6245c9044fa81dbc47c63de9daa929", "sha256": "31e90ccd5d1b34812f0ea5d351596672887a8baccb290c2d3a78fb6c34566e52"}, "downloads": -1, "filename": "sla_checker-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc6245c9044fa81dbc47c63de9daa929", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15557, "upload_time": "2019-12-17T08:23:27", "upload_time_iso_8601": "2019-12-17T08:23:27.597086Z", "url": "https://files.pythonhosted.org/packages/48/17/9525046b226d3862424d14d0ab9b5d19970f42926100adcae6cd6b62d5d8/sla_checker-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a1e6f4b192db4a46fa0e18a9d161306", "sha256": "c3787e8fd4bb364e41c90e62bcd215e70579fc7004a6551b2ccce9f1cb906e29"}, "downloads": -1, "filename": "sla_checker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4a1e6f4b192db4a46fa0e18a9d161306", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2986, "upload_time": "2019-12-17T08:23:29", "upload_time_iso_8601": "2019-12-17T08:23:29.214782Z", "url": "https://files.pythonhosted.org/packages/a5/59/6a7325f7722a085f02924057df2cd9004e2f823937e2989516428a531f55/sla_checker-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:45 2020"}