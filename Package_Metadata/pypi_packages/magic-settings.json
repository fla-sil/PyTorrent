{"info": {"author": "Anton Ostapenko", "author_email": "olsnod@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# Magic-settings\n\n## Installation\n\n```bash\npip install magic-settings\n```\n\nUsing settings from `yaml` file\n\n```bash\npip install magic-settings[yaml]\n```\n\n## Initialization\n\n### Project settings class declaration\n\n```python\nfrom magic_settings import BaseSettings, Property\nfrom functools import partial\n\nclass MySettings(BaseSettings):\n    VERSION = Property(types=str)\n    PROJECT_DIR = Property(types=str)\n    LOGGING_LEVEL = Property(default='INFO', choices=['NOTSET', 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'])\n    RETRIES_NUMBER = Property(types=int, converts=[int])\n    COEFFICIENT = Property(types=float, converts=[float])\n    DEBUG = Property(types=bool, converts=[int, bool], default=False)\n    DISTRIBUTED_SERVICE_HOST_NAMES = Property(types=list, converts=[partial(str.split, sep=',')])\n```\n\nClass ```Property``` is a descriptor with following parameters:\n\n- ***types*** - Type of ```value``` or a tuple of possible ```types```. It is a ```ValueError``` if ```value``` is not one of the ```types```.\n- ***validators*** - List of ```callable``` objects each of which is successively applied to ```value```.  Raises ```ValueError``` if ```value``` does not pass at least one of the validations (if any validation function returns ```False```).\n- ***choices*** - List of any objects. If ```value``` is not in ```choices``` - raises ```ValueError```. When using this parameter, parameters  ```types``` and ```validators``` are ignored.\n- ***default*** - Sets the default value of ```Property```.\n- ***converts*** - List of ```callable``` objects. It is a chain of transformations that are successively applied to the ```value``` and overwrite it each time. It applies to ```value``` only if ```value``` is a string. Raises ```ValueError``` if ```value``` at least one of the transformations failed to apply.\n\n### Property classes\n\nBesides ```Property``` following classes may be used for standard types:\n\n- ```BoolProperty```: accepts boolean values, converts case-insensitive ```true``` or ```false``` to appropriate python boolean value. Also this property accepts numbers (```0``` is False, ```1``` is True).\n- ```FloatProperty```: accepts float number values.\n- ```IntProperty```: accepts integer number values.\n- ```StringProperty```: accepts string values.\n- ```StringListProperty```: accepts list of strings. You can specify delimiter in constructor of this class (```,``` is default value).\n- ```HostListProperty```: accepts list of hosts. Each host is a tuple containing a ```string``` hostname and an ```int``` port. Pairs should be divided by comma, hostname and port should be divided by colon. For example, ```192.168.20.1:80,www.yandex.ru:1234,localhost:8888``` will be converted into ```[('192.168.20.1', 80), ('www.yandex.ru', 1234), ('localhost', 8888)]```.\n\nAbove example may be simplified using these properties:\n\n```python\nfrom magic_settings import (BaseSettings, Property,\n                            BoolProperty, FloatProperty, IntProperty, StringListProperty, StringProperty)\n\nclass MySettings(BaseSettings):\n    VERSION = StringProperty()\n    PROJECT_DIR = StringProperty()\n    LOGGING_LEVEL = Property(default='INFO', choices=['NOTSET', 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'])\n    RETRIES_NUMBER = IntProperty()\n    COEFFICIENT = FloatProperty()\n    DEBUG = BoolProperty(default=False)\n    DISTRIBUTED_SERVICE_HOST_NAMES = StringListProperty()\n``` \n\n### Settings configuration\n\nSettings configuration occurs at the stage of creating a Settings object.\n\n```python\nfrom my_project import my_module, my_awesome_module\nfrom my_config import MySettings\n\nsettings = MySettings(\n    modules=[my_module, my_awesome_module],\n    prefix='MY_PROJECT_ENV_SETTINGS',\n    dotenv_path='/path/to/my/env',\n    override_env=True,\n    yaml_settings_path='/path/to/my/yaml/settings.yaml',\n    use_env=True\n)\n```\n\n### Parameters\n\n- ***modules***: List of Python modules with variables to import. Default ```None```.\n- ***prefix***: The prefix with which the environment variables are taken. Default - ```None```.\n\n    _settings.py_\n\n    ```python\n    class MySettings(BaseSettings):\n        PSYDUCK = Property(types=str)\n    ```\n\n    _.env_\n\n    ```dotenv\n    MYPROJECT_PSYDUCK=Owowowow\n    ```\n\n    _some_other_place.py_\n\n    ```python\n    settings = MySettings(prefix='MYPROJECT')\n    ```\n\n    or\n\n    ```python\n    settings = MySettings(prefix='MYPROJECT_')\n    ```\n\n- ***dotenv_path***: Path to env-file. Default - ```None```. Using for exporting variables from env-file to environment. If ```dotenv_path``` is ```None``` -  walking up the directory tree looking for the specified file - called ```.env``` by default.\n- ***override_env***: ```True``` - override existing system environment variables with variables from `.env` - file, ```False``` - do not override. Default - ```False```.\n- ***yaml_settings_path***: Path to yaml config file. Default - ```None```.\n- ***use_env***: ```True``` - use environment variables. Default - ```True```.\n\n### Exceptions\n\n***ValueError***: If ***modules*** type is not ```list``` or ```NoneType``` and if type of element in ***modules*** is not ```ModuleType```.\n\n## Settings loading\n\nLoading settings can be initiated anywhere in the project.\n\n```python\nfrom where_your_settings import settings\n\nsettings.init()\n```\n\nIf called again, it goes through the configuration files and update properties.\n\n## Settings priority\n\nIn case of intersection of settings the following priority will be applied:\n_my_module_ -> _my_awesome_module_ -> _.env_ -> _settings.yaml_\n\n```python\nclass MySettings(BaseSettings):\n    PSYDUCK = Property(types=str)\n```\n\n_my_module.py_\n\n```python\nPSYDUCK = 'one'\n```\n\n_my_awesome_module.py_\n\n```python\nPSYDUCK = 'two'\n```\n\n_.env_\n\n```dotenv\nMYPROJECTPREFIX_PSYDUCK=env\n```\n\n_setting.yaml_\n\n```yaml\nPSYDUCK: yaml\n```\n\n## Examples\n\n```python\n>>> settings = MySettings(modules=[my_module])\n>>> settings.PSYDUCK\n'one'\n```\n\n```python\n>>> settings = MySettings(modules=[my_module, my_awesome_module])\n>>> settings.PSYDUCK\n'two'\n```\n\n```python\n>>> settings = MySettings(modules=[my_awesome_module, my_module])\n>>> settings.PSYDUCK\n'one'\n```\n\n```python\n>>> settings = MySettings(modules=[my_module, my_awesome_module], dotenv_path='/path/to/dotenv')\n>>> settings.PSYDUCK\n'env'\n```\n\n```python\n>>> settings = MySettings(modules=[my_module, my_awesome_module], dotenv_path='/path/to/dotenv', use_env=False)\n>>> settings.PSYDUCK\n'two'\n```\n\n```python\n>>> settings = MySettings(modules=[my_module, my_awesome_module], dotenv_path='/path/to/dotenv', yaml_settings_path='/path/to/yaml/settings.yaml')\n>>> settings.PSYDUCK\n'yaml'\n```\n\n## Temporary Property override\n\n_my_module.py_\n\n```python\nPIKACHU = 'Psyduck_is_not_fine'\nPSYDUCK = 'Owowowow'\n\n```\n\n```python\nfrom my_project import my_module\nfrom my_config import MySettings\n\nclass MySettings(BaseSettings):\n    PSYDUCK = Property(types=str)\n    PIKACHU = Property(types=str)\n\nsettings = MySettings(modules=[my_module])\nsettings.init()\n\nwith settings.temp_set_attributes(PSYDUCK='I_am_ok', PIKACHU='Psyduck_is_ok'):\n    print(settings.PSYDUCK) # 'I_am_ok'\n    print(settings.PIKACHU) # 'Psyduck_is_ok'\nprint(settings.PSYDUCK) # 'Owowowow'\nprint(settings.PIKACHU) # 'Psyduck_is_not_fine'\n```\n\nMethod ```temp_set_attributes``` is not thread-safe.\n\n## Settings list\n\nYou can use methods `to_dict()`, `to_json()` to get current settings:\n\n```python\nfrom magic_settings import BaseSettings, Property\n\nclass MySettings(BaseSettings):\n    PSYDUCK = Property(types=str)\n    PIKACHU = Property(types=str)\n\nsettings = MySettings(dotenv_path='12345.env')\nsettings.PIKACHU = '3'\nsettings.PSYDUCK = '12345'\n\npprint(settings.to_dict())\n\n{\n    'properties': {\n        'PIKACHU': '3',\n        'PSYDUCK': '12345'\n    },\n    'sources': [{\n        'source_type': 'dotenv',\n        'address': {\n            'dotenv_path': '12345.env',\n            'override': False\n        }\n    }]\n}\n```\n\n## Validation\n\nIt is recommended to use following `BaseSettings` class methods during redefinition `update_settings_from_source` method:\n\n1. `pre_validate` - check that types are configured correctly; check that the values from `choices` and the default pass the type check.\n2. `post_validate` - check if each `Property` is assigned a value.\n\n## Dynamic settings\n\n### Implementing a custom dynamic settings source\n\nExample with storing settings in dict `source`:\n\n```python\nfrom magic_settings import BaseDynamicSettings, Property\n\nsource = {\n    'JIGGLYPUFF': 'pink'\n}\n\nclass BaseDynamicSettingsDict(BaseDynamicSettings):\n    async def update_settings_from_source(self):\n        super().update_config(**source)\n\n    async def update_config(self, **kwargs):\n        source.update(kwargs)\n        return super().update_config(**kwargs)\n```\n\n### Definition of project`s dynamic settings class\n\n```python\nclass MyDynamicSettings(BaseDynamicSettingsDict):\n    JIGGLYPUFF = Property(types=str)\n```\n\n### Dynamic Settings Initialization\n\n```python\nloop = asyncio.get_event_loop()\ndynamic_settings = MyDynamicSettings(loop=loop, update_period=5, task_retries_number=5)\n```\n\n- ***update_period***: time between updating settings from source, in seconds.\n- ***task_retries_number***: the number of attempts to update the settings when an exception occurred before stopping the task.\n\n### Dynamic settings update\n\n#### Updating settings only once\n\n```python\nawait dynamic_settings.update_settings_from_source()\n```\n\n#### Starting the update loop\n\n```python\nawait dynamic_settings.start_update()\n```\n\n#### Stopping the update loop\n\n```python\nawait dynamic_settings.stop_update()\n```\n\n### Writing settings into the source\n\n```python\nawait dynamic_settings.update_config(JIGGLYPUFF='magenta')\n```\n\n### Exceptions\n\n- ***magic_settings.DynamicSettingsSourceError*** - this exception should be selected if the settings source in the class inherited from `BaseDynamicSettings` is unavailable.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/magic-settings/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shocking-rodents/magic-settings/", "keywords": "parser config environment settings configuration", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "magic-settings", "package_url": "https://pypi.org/project/magic-settings/", "platform": "", "project_url": "https://pypi.org/project/magic-settings/", "project_urls": {"Download": "https://pypi.org/project/magic-settings/", "Homepage": "https://github.com/shocking-rodents/magic-settings/"}, "release_url": "https://pypi.org/project/magic-settings/1.2.0/", "requires_dist": ["python-dotenv (~=0.10.2)", "PyYAML (~=5.1) ; extra == 'yaml'"], "requires_python": "~=3.6", "summary": "Configuration manager for Python applications.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Magic-settings</h1>\n<h2>Installation</h2>\n<pre>pip install magic-settings\n</pre>\n<p>Using settings from <code>yaml</code> file</p>\n<pre>pip install magic-settings<span class=\"o\">[</span>yaml<span class=\"o\">]</span>\n</pre>\n<h2>Initialization</h2>\n<h3>Project settings class declaration</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">magic_settings</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSettings</span><span class=\"p\">,</span> <span class=\"n\">Property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySettings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">VERSION</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">PROJECT_DIR</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">LOGGING_LEVEL</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'INFO'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'NOTSET'</span><span class=\"p\">,</span> <span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span> <span class=\"s1\">'WARNING'</span><span class=\"p\">,</span> <span class=\"s1\">'ERROR'</span><span class=\"p\">,</span> <span class=\"s1\">'CRITICAL'</span><span class=\"p\">])</span>\n    <span class=\"n\">RETRIES_NUMBER</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">converts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n    <span class=\"n\">COEFFICIENT</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">converts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">])</span>\n    <span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">converts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">DISTRIBUTED_SERVICE_HOST_NAMES</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">converts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)])</span>\n</pre>\n<p>Class <code>Property</code> is a descriptor with following parameters:</p>\n<ul>\n<li><em><strong>types</strong></em> - Type of <code>value</code> or a tuple of possible <code>types</code>. It is a <code>ValueError</code> if <code>value</code> is not one of the <code>types</code>.</li>\n<li><em><strong>validators</strong></em> - List of <code>callable</code> objects each of which is successively applied to <code>value</code>.  Raises <code>ValueError</code> if <code>value</code> does not pass at least one of the validations (if any validation function returns <code>False</code>).</li>\n<li><em><strong>choices</strong></em> - List of any objects. If <code>value</code> is not in <code>choices</code> - raises <code>ValueError</code>. When using this parameter, parameters  <code>types</code> and <code>validators</code> are ignored.</li>\n<li><em><strong>default</strong></em> - Sets the default value of <code>Property</code>.</li>\n<li><em><strong>converts</strong></em> - List of <code>callable</code> objects. It is a chain of transformations that are successively applied to the <code>value</code> and overwrite it each time. It applies to <code>value</code> only if <code>value</code> is a string. Raises <code>ValueError</code> if <code>value</code> at least one of the transformations failed to apply.</li>\n</ul>\n<h3>Property classes</h3>\n<p>Besides <code>Property</code> following classes may be used for standard types:</p>\n<ul>\n<li><code>BoolProperty</code>: accepts boolean values, converts case-insensitive <code>true</code> or <code>false</code> to appropriate python boolean value. Also this property accepts numbers (<code>0</code> is False, <code>1</code> is True).</li>\n<li><code>FloatProperty</code>: accepts float number values.</li>\n<li><code>IntProperty</code>: accepts integer number values.</li>\n<li><code>StringProperty</code>: accepts string values.</li>\n<li><code>StringListProperty</code>: accepts list of strings. You can specify delimiter in constructor of this class (<code>,</code> is default value).</li>\n<li><code>HostListProperty</code>: accepts list of hosts. Each host is a tuple containing a <code>string</code> hostname and an <code>int</code> port. Pairs should be divided by comma, hostname and port should be divided by colon. For example, <code>192.168.20.1:80,www.yandex.ru:1234,localhost:8888</code> will be converted into <code>[('192.168.20.1', 80), ('www.yandex.ru', 1234), ('localhost', 8888)]</code>.</li>\n</ul>\n<p>Above example may be simplified using these properties:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">magic_settings</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">,</span> <span class=\"n\">Property</span><span class=\"p\">,</span>\n                            <span class=\"n\">BoolProperty</span><span class=\"p\">,</span> <span class=\"n\">FloatProperty</span><span class=\"p\">,</span> <span class=\"n\">IntProperty</span><span class=\"p\">,</span> <span class=\"n\">StringListProperty</span><span class=\"p\">,</span> <span class=\"n\">StringProperty</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySettings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">VERSION</span> <span class=\"o\">=</span> <span class=\"n\">StringProperty</span><span class=\"p\">()</span>\n    <span class=\"n\">PROJECT_DIR</span> <span class=\"o\">=</span> <span class=\"n\">StringProperty</span><span class=\"p\">()</span>\n    <span class=\"n\">LOGGING_LEVEL</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'INFO'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'NOTSET'</span><span class=\"p\">,</span> <span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span> <span class=\"s1\">'WARNING'</span><span class=\"p\">,</span> <span class=\"s1\">'ERROR'</span><span class=\"p\">,</span> <span class=\"s1\">'CRITICAL'</span><span class=\"p\">])</span>\n    <span class=\"n\">RETRIES_NUMBER</span> <span class=\"o\">=</span> <span class=\"n\">IntProperty</span><span class=\"p\">()</span>\n    <span class=\"n\">COEFFICIENT</span> <span class=\"o\">=</span> <span class=\"n\">FloatProperty</span><span class=\"p\">()</span>\n    <span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">BoolProperty</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">DISTRIBUTED_SERVICE_HOST_NAMES</span> <span class=\"o\">=</span> <span class=\"n\">StringListProperty</span><span class=\"p\">()</span>\n</pre>\n<h3>Settings configuration</h3>\n<p>Settings configuration occurs at the stage of creating a Settings object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_project</span> <span class=\"kn\">import</span> <span class=\"n\">my_module</span><span class=\"p\">,</span> <span class=\"n\">my_awesome_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_config</span> <span class=\"kn\">import</span> <span class=\"n\">MySettings</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span>\n    <span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">,</span> <span class=\"n\">my_awesome_module</span><span class=\"p\">],</span>\n    <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'MY_PROJECT_ENV_SETTINGS'</span><span class=\"p\">,</span>\n    <span class=\"n\">dotenv_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/my/env'</span><span class=\"p\">,</span>\n    <span class=\"n\">override_env</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">yaml_settings_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/my/yaml/settings.yaml'</span><span class=\"p\">,</span>\n    <span class=\"n\">use_env</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Parameters</h3>\n<ul>\n<li>\n<p><em><strong>modules</strong></em>: List of Python modules with variables to import. Default <code>None</code>.</p>\n</li>\n<li>\n<p><em><strong>prefix</strong></em>: The prefix with which the environment variables are taken. Default - <code>None</code>.</p>\n<p><em>settings.py</em></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySettings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n</pre>\n<p><em>.env</em></p>\n<pre>MYPROJECT_PSYDUCK=Owowowow\n</pre>\n<p><em>some_other_place.py</em></p>\n<pre><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'MYPROJECT'</span><span class=\"p\">)</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'MYPROJECT_'</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><em><strong>dotenv_path</strong></em>: Path to env-file. Default - <code>None</code>. Using for exporting variables from env-file to environment. If <code>dotenv_path</code> is <code>None</code> -  walking up the directory tree looking for the specified file - called <code>.env</code> by default.</p>\n</li>\n<li>\n<p><em><strong>override_env</strong></em>: <code>True</code> - override existing system environment variables with variables from <code>.env</code> - file, <code>False</code> - do not override. Default - <code>False</code>.</p>\n</li>\n<li>\n<p><em><strong>yaml_settings_path</strong></em>: Path to yaml config file. Default - <code>None</code>.</p>\n</li>\n<li>\n<p><em><strong>use_env</strong></em>: <code>True</code> - use environment variables. Default - <code>True</code>.</p>\n</li>\n</ul>\n<h3>Exceptions</h3>\n<p><em><strong>ValueError</strong></em>: If <em><strong>modules</strong></em> type is not <code>list</code> or <code>NoneType</code> and if type of element in <em><strong>modules</strong></em> is not <code>ModuleType</code>.</p>\n<h2>Settings loading</h2>\n<p>Loading settings can be initiated anywhere in the project.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">where_your_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n</pre>\n<p>If called again, it goes through the configuration files and update properties.</p>\n<h2>Settings priority</h2>\n<p>In case of intersection of settings the following priority will be applied:\n<em>my_module</em> -&gt; <em>my_awesome_module</em> -&gt; <em>.env</em> -&gt; <em>settings.yaml</em></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySettings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n</pre>\n<p><em>my_module.py</em></p>\n<pre><span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"s1\">'one'</span>\n</pre>\n<p><em>my_awesome_module.py</em></p>\n<pre><span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"s1\">'two'</span>\n</pre>\n<p><em>.env</em></p>\n<pre>MYPROJECTPREFIX_PSYDUCK=env\n</pre>\n<p><em>setting.yaml</em></p>\n<pre><span class=\"nt\">PSYDUCK</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yaml</span>\n</pre>\n<h2>Examples</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span>\n<span class=\"s1\">'one'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">,</span> <span class=\"n\">my_awesome_module</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span>\n<span class=\"s1\">'two'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_awesome_module</span><span class=\"p\">,</span> <span class=\"n\">my_module</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span>\n<span class=\"s1\">'one'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">,</span> <span class=\"n\">my_awesome_module</span><span class=\"p\">],</span> <span class=\"n\">dotenv_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/dotenv'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span>\n<span class=\"s1\">'env'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">,</span> <span class=\"n\">my_awesome_module</span><span class=\"p\">],</span> <span class=\"n\">dotenv_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/dotenv'</span><span class=\"p\">,</span> <span class=\"n\">use_env</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span>\n<span class=\"s1\">'two'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">,</span> <span class=\"n\">my_awesome_module</span><span class=\"p\">],</span> <span class=\"n\">dotenv_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/dotenv'</span><span class=\"p\">,</span> <span class=\"n\">yaml_settings_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/yaml/settings.yaml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span>\n<span class=\"s1\">'yaml'</span>\n</pre>\n<h2>Temporary Property override</h2>\n<p><em>my_module.py</em></p>\n<pre><span class=\"n\">PIKACHU</span> <span class=\"o\">=</span> <span class=\"s1\">'Psyduck_is_not_fine'</span>\n<span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"s1\">'Owowowow'</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_project</span> <span class=\"kn\">import</span> <span class=\"n\">my_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_config</span> <span class=\"kn\">import</span> <span class=\"n\">MySettings</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySettings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">PIKACHU</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_module</span><span class=\"p\">])</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">temp_set_attributes</span><span class=\"p\">(</span><span class=\"n\">PSYDUCK</span><span class=\"o\">=</span><span class=\"s1\">'I_am_ok'</span><span class=\"p\">,</span> <span class=\"n\">PIKACHU</span><span class=\"o\">=</span><span class=\"s1\">'Psyduck_is_ok'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span><span class=\"p\">)</span> <span class=\"c1\"># 'I_am_ok'</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PIKACHU</span><span class=\"p\">)</span> <span class=\"c1\"># 'Psyduck_is_ok'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span><span class=\"p\">)</span> <span class=\"c1\"># 'Owowowow'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PIKACHU</span><span class=\"p\">)</span> <span class=\"c1\"># 'Psyduck_is_not_fine'</span>\n</pre>\n<p>Method <code>temp_set_attributes</code> is not thread-safe.</p>\n<h2>Settings list</h2>\n<p>You can use methods <code>to_dict()</code>, <code>to_json()</code> to get current settings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">magic_settings</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSettings</span><span class=\"p\">,</span> <span class=\"n\">Property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySettings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">PIKACHU</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">MySettings</span><span class=\"p\">(</span><span class=\"n\">dotenv_path</span><span class=\"o\">=</span><span class=\"s1\">'12345.env'</span><span class=\"p\">)</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PIKACHU</span> <span class=\"o\">=</span> <span class=\"s1\">'3'</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PSYDUCK</span> <span class=\"o\">=</span> <span class=\"s1\">'12345'</span>\n\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'PIKACHU'</span><span class=\"p\">:</span> <span class=\"s1\">'3'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PSYDUCK'</span><span class=\"p\">:</span> <span class=\"s1\">'12345'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'sources'</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"s1\">'source_type'</span><span class=\"p\">:</span> <span class=\"s1\">'dotenv'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'dotenv_path'</span><span class=\"p\">:</span> <span class=\"s1\">'12345.env'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'override'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Validation</h2>\n<p>It is recommended to use following <code>BaseSettings</code> class methods during redefinition <code>update_settings_from_source</code> method:</p>\n<ol>\n<li><code>pre_validate</code> - check that types are configured correctly; check that the values from <code>choices</code> and the default pass the type check.</li>\n<li><code>post_validate</code> - check if each <code>Property</code> is assigned a value.</li>\n</ol>\n<h2>Dynamic settings</h2>\n<h3>Implementing a custom dynamic settings source</h3>\n<p>Example with storing settings in dict <code>source</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">magic_settings</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDynamicSettings</span><span class=\"p\">,</span> <span class=\"n\">Property</span>\n\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'JIGGLYPUFF'</span><span class=\"p\">:</span> <span class=\"s1\">'pink'</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseDynamicSettingsDict</span><span class=\"p\">(</span><span class=\"n\">BaseDynamicSettings</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">update_settings_from_source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">update_config</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">source</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">update_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">update_config</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<h3>Definition of project`s dynamic settings class</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyDynamicSettings</span><span class=\"p\">(</span><span class=\"n\">BaseDynamicSettingsDict</span><span class=\"p\">):</span>\n    <span class=\"n\">JIGGLYPUFF</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n</pre>\n<h3>Dynamic Settings Initialization</h3>\n<pre><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">dynamic_settings</span> <span class=\"o\">=</span> <span class=\"n\">MyDynamicSettings</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">update_period</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">task_retries_number</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><em><strong>update_period</strong></em>: time between updating settings from source, in seconds.</li>\n<li><em><strong>task_retries_number</strong></em>: the number of attempts to update the settings when an exception occurred before stopping the task.</li>\n</ul>\n<h3>Dynamic settings update</h3>\n<h4>Updating settings only once</h4>\n<pre><span class=\"k\">await</span> <span class=\"n\">dynamic_settings</span><span class=\"o\">.</span><span class=\"n\">update_settings_from_source</span><span class=\"p\">()</span>\n</pre>\n<h4>Starting the update loop</h4>\n<pre><span class=\"k\">await</span> <span class=\"n\">dynamic_settings</span><span class=\"o\">.</span><span class=\"n\">start_update</span><span class=\"p\">()</span>\n</pre>\n<h4>Stopping the update loop</h4>\n<pre><span class=\"k\">await</span> <span class=\"n\">dynamic_settings</span><span class=\"o\">.</span><span class=\"n\">stop_update</span><span class=\"p\">()</span>\n</pre>\n<h3>Writing settings into the source</h3>\n<pre><span class=\"k\">await</span> <span class=\"n\">dynamic_settings</span><span class=\"o\">.</span><span class=\"n\">update_config</span><span class=\"p\">(</span><span class=\"n\">JIGGLYPUFF</span><span class=\"o\">=</span><span class=\"s1\">'magenta'</span><span class=\"p\">)</span>\n</pre>\n<h3>Exceptions</h3>\n<ul>\n<li><em><strong>magic_settings.DynamicSettingsSourceError</strong></em> - this exception should be selected if the settings source in the class inherited from <code>BaseDynamicSettings</code> is unavailable.</li>\n</ul>\n\n          </div>"}, "last_serial": 5667285, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "a8f3c6a85759ad1dc3dc4a45a72d1293", "sha256": "1c5928b6a51f41b62d8287898b271904ac15115314a0afbdd6a16ca6b7b5e3b7"}, "downloads": -1, "filename": "magic_settings-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8f3c6a85759ad1dc3dc4a45a72d1293", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 11068, "upload_time": "2019-08-12T16:02:04", "upload_time_iso_8601": "2019-08-12T16:02:04.734777Z", "url": "https://files.pythonhosted.org/packages/44/d0/1c2364baf665a737f5d68ae9e7e05df6021caaed4337d0c9ece6b7e5f2b6/magic_settings-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5172e046ad5192060de4b80608e5e653", "sha256": "be24793617d9faef25a8b540c3bf1920e2a2587327d1ae84c42ca368405a9363"}, "downloads": -1, "filename": "magic-settings-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5172e046ad5192060de4b80608e5e653", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 12502, "upload_time": "2019-08-12T16:02:06", "upload_time_iso_8601": "2019-08-12T16:02:06.737564Z", "url": "https://files.pythonhosted.org/packages/51/b9/5f570c03cee61c12ae097c1df2a7e3de22070af24674f633a88008c79d2a/magic-settings-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8f3c6a85759ad1dc3dc4a45a72d1293", "sha256": "1c5928b6a51f41b62d8287898b271904ac15115314a0afbdd6a16ca6b7b5e3b7"}, "downloads": -1, "filename": "magic_settings-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8f3c6a85759ad1dc3dc4a45a72d1293", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 11068, "upload_time": "2019-08-12T16:02:04", "upload_time_iso_8601": "2019-08-12T16:02:04.734777Z", "url": "https://files.pythonhosted.org/packages/44/d0/1c2364baf665a737f5d68ae9e7e05df6021caaed4337d0c9ece6b7e5f2b6/magic_settings-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5172e046ad5192060de4b80608e5e653", "sha256": "be24793617d9faef25a8b540c3bf1920e2a2587327d1ae84c42ca368405a9363"}, "downloads": -1, "filename": "magic-settings-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5172e046ad5192060de4b80608e5e653", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 12502, "upload_time": "2019-08-12T16:02:06", "upload_time_iso_8601": "2019-08-12T16:02:06.737564Z", "url": "https://files.pythonhosted.org/packages/51/b9/5f570c03cee61c12ae097c1df2a7e3de22070af24674f633a88008c79d2a/magic-settings-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:03 2020"}