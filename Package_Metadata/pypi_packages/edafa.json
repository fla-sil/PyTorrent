{"info": {"author": "Andrew Khalel", "author_email": "andrewekhalel@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Edafa\n![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg) [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/andrewekhalel/edafa/issues) [![HitCount](http://hits.dwyl.io/andrewekhalel/edafa.svg)](http://hits.dwyl.io/andrewekhalel/edafa)<br/>\nEdafa is a simple wrapper that implements Test Time Augmentations (TTA) on images for computer vision problems like: segmentation, classification, super-resolution, Pansharpening, etc. TTAs guarantees better results in most of the tasks.\n\n### Test Time Augmentation (TTA)\n\nApplying different transformations to test images and then average for more robust results.\n\n![pipeline](https://preview.ibb.co/kH61v0/pipeline.png)\n\n### Installation\n```shell\npip install edafa\n```\n\n### Getting started\nThe easiest way to get up and running is to follow [example notebooks](https://github.com/andrewekhalel/edafa/tree/master/examples) for segmentation and classification showing TTA effect on performance.\n\n### How to use Edafa\nThe whole process can be done in 4 steps:\n1.  Import Predictor class based on your task category: Segmentation (`SegPredictor`) or Classification (`ClassPredictor`) \n```python\nfrom edafa import SegPredictor\n```\n2. Inherit Predictor class and implement the main function \n\t* `predict_patches(self,patches)` : where your model takes image patches (numpy.ndarray) and return prediction (numpy.ndarray)\n\n```python\nclass myPredictor(SegPredictor):\n    def __init__(self,model,*args,**kwargs):\n        super().__init__(*args,**kwargs)\n        self.model = model\n\n    def predict_patches(self,patches):\n        return self.model.predict(patches)\n```\n3. Create an instance of you class\n```python\np = myPredictor(model,patch_size,model_output_channels,conf_file_path)\n```\n4.  Call `predict_images()` to run the prediction process \n```python\np.predict_images(images,overlap=0)\n```\n### Configuration file\nConfiguration file is a json file containing two pieces of information\n1. Augmentations to apply (**augs**). Supported augmentations:\n\t* **NO** : No augmentation\n\t* **ROT90** : Rotate 90 degrees\n\t* **ROT180** : Rotate 180 degrees\n\t* **ROT270** : Rotate 270 degrees\n\t* **FLIP_UD** : Flip upside-down\n\t* **FLIP_LR** : Flip left-right\n\t* **BRIGHT** : Change image brightness randomly\n\t* **CONTRAST** : Change image contrast randomly\n\t* **GAUSSIAN** : Add random gaussian noise\n\t* **GAMMA** : Perform gamma correction with random gamma\n2. Combination of the results (**mean**). Supported mean types:\n\t* **ARITH** : Arithmetic mean\n\t* **GEO** : Geometric mean\n3. Number of bits image (default is 8-bits) (**bits**).\n\nExample of a conf file in `json` format\n```json\n{\n\"augs\":[\"NO\",\n\"FLIP_UD\",\n\"FLIP_LR\"],\n\"mean\":\"ARITH\",\n\"bits\":8\n}\n\n```\nExample of a conf file in `yaml` format\n```yaml\naugs: [NO,FLIP_UD,FLIP_LR]\nmean: ARITH\nbits: 8\n```\nYou can either pass file path (json or yaml) or the actual json text to `conf` parameter.\n\n## Contribution\nAll contributions are welcomed. Please make sure that all tests passed before pull request. To run tests\n```shell\nnosetests\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrewekhalel/edafa", "keywords": "augmentation classification segmentation super-resolution pansharpening keras tensorflow pytorch", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "edafa", "package_url": "https://pypi.org/project/edafa/", "platform": "", "project_url": "https://pypi.org/project/edafa/", "project_urls": {"Homepage": "https://github.com/andrewekhalel/edafa"}, "release_url": "https://pypi.org/project/edafa/0.1.5/", "requires_dist": ["numpy", "opencv-python"], "requires_python": "", "summary": "Test Time Augmentation (TTA) wrapper for computer vision tasks: segmentation,classification, super-resolution, ... etc.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Edafa</h1>\n<p><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"> <a href=\"https://github.com/andrewekhalel/edafa/issues\" rel=\"nofollow\"><img alt=\"contributions welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/793ef3fadef48113e66f3c652ebc9b591bcb1745/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174\"></a> <a href=\"http://hits.dwyl.io/andrewekhalel/edafa\" rel=\"nofollow\"><img alt=\"HitCount\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0476801e331f05e897c0c46d30f81fcc4511cfbb/687474703a2f2f686974732e6477796c2e696f2f616e64726577656b68616c656c2f65646166612e737667\"></a><br>\nEdafa is a simple wrapper that implements Test Time Augmentations (TTA) on images for computer vision problems like: segmentation, classification, super-resolution, Pansharpening, etc. TTAs guarantees better results in most of the tasks.</p>\n<h3>Test Time Augmentation (TTA)</h3>\n<p>Applying different transformations to test images and then average for more robust results.</p>\n<p><img alt=\"pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec05cc0c4fdf7e33f9b361e01c1a6f0bf24f7a34/68747470733a2f2f707265766965772e6962622e636f2f6b48363176302f706970656c696e652e706e67\"></p>\n<h3>Installation</h3>\n<pre>pip install edafa\n</pre>\n<h3>Getting started</h3>\n<p>The easiest way to get up and running is to follow <a href=\"https://github.com/andrewekhalel/edafa/tree/master/examples\" rel=\"nofollow\">example notebooks</a> for segmentation and classification showing TTA effect on performance.</p>\n<h3>How to use Edafa</h3>\n<p>The whole process can be done in 4 steps:</p>\n<ol>\n<li>Import Predictor class based on your task category: Segmentation (<code>SegPredictor</code>) or Classification (<code>ClassPredictor</code>)</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">edafa</span> <span class=\"kn\">import</span> <span class=\"n\">SegPredictor</span>\n</pre>\n<ol>\n<li>Inherit Predictor class and implement the main function\n<ul>\n<li><code>predict_patches(self,patches)</code> : where your model takes image patches (numpy.ndarray) and return prediction (numpy.ndarray)</li>\n</ul>\n</li>\n</ol>\n<pre><span class=\"k\">class</span> <span class=\"nc\">myPredictor</span><span class=\"p\">(</span><span class=\"n\">SegPredictor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">model</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">predict_patches</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">patches</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">patches</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Create an instance of you class</li>\n</ol>\n<pre><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">myPredictor</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"n\">patch_size</span><span class=\"p\">,</span><span class=\"n\">model_output_channels</span><span class=\"p\">,</span><span class=\"n\">conf_file_path</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Call <code>predict_images()</code> to run the prediction process</li>\n</ol>\n<pre><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">predict_images</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span><span class=\"n\">overlap</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h3>Configuration file</h3>\n<p>Configuration file is a json file containing two pieces of information</p>\n<ol>\n<li>Augmentations to apply (<strong>augs</strong>). Supported augmentations:\n<ul>\n<li><strong>NO</strong> : No augmentation</li>\n<li><strong>ROT90</strong> : Rotate 90 degrees</li>\n<li><strong>ROT180</strong> : Rotate 180 degrees</li>\n<li><strong>ROT270</strong> : Rotate 270 degrees</li>\n<li><strong>FLIP_UD</strong> : Flip upside-down</li>\n<li><strong>FLIP_LR</strong> : Flip left-right</li>\n<li><strong>BRIGHT</strong> : Change image brightness randomly</li>\n<li><strong>CONTRAST</strong> : Change image contrast randomly</li>\n<li><strong>GAUSSIAN</strong> : Add random gaussian noise</li>\n<li><strong>GAMMA</strong> : Perform gamma correction with random gamma</li>\n</ul>\n</li>\n<li>Combination of the results (<strong>mean</strong>). Supported mean types:\n<ul>\n<li><strong>ARITH</strong> : Arithmetic mean</li>\n<li><strong>GEO</strong> : Geometric mean</li>\n</ul>\n</li>\n<li>Number of bits image (default is 8-bits) (<strong>bits</strong>).</li>\n</ol>\n<p>Example of a conf file in <code>json</code> format</p>\n<pre><span class=\"p\">{</span>\n<span class=\"nt\">\"augs\"</span><span class=\"p\">:[</span><span class=\"s2\">\"NO\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"FLIP_UD\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"FLIP_LR\"</span><span class=\"p\">],</span>\n<span class=\"nt\">\"mean\"</span><span class=\"p\">:</span><span class=\"s2\">\"ARITH\"</span><span class=\"p\">,</span>\n<span class=\"nt\">\"bits\"</span><span class=\"p\">:</span><span class=\"mi\">8</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Example of a conf file in <code>yaml</code> format</p>\n<pre><span class=\"nt\">augs</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">NO</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">FLIP_UD</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">FLIP_LR</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">mean</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ARITH</span>\n<span class=\"nt\">bits</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8</span>\n</pre>\n<p>You can either pass file path (json or yaml) or the actual json text to <code>conf</code> parameter.</p>\n<h2>Contribution</h2>\n<p>All contributions are welcomed. Please make sure that all tests passed before pull request. To run tests</p>\n<pre>nosetests\n</pre>\n\n          </div>"}, "last_serial": 6901354, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2e66f65c53df7020687b3a996a50245c", "sha256": "b8193083aafa4bcf0412805438a951c26c1b665ad02773a14c9c7725760085ea"}, "downloads": -1, "filename": "edafa-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2e66f65c53df7020687b3a996a50245c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5401, "upload_time": "2018-10-24T10:14:40", "upload_time_iso_8601": "2018-10-24T10:14:40.914115Z", "url": "https://files.pythonhosted.org/packages/8a/c5/bf410f54b15f39218218f1203c3f8ff0421a109a8ccbb7716d00c8b94045/edafa-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e80b9f5b2cb0a9fdf10e421f23f2f3ed", "sha256": "7acdcdbf9be41bfbf8a71d3fbd21dfba928bedaf46ca4762c15512aae587d3c3"}, "downloads": -1, "filename": "edafa-0.1.tar.gz", "has_sig": false, "md5_digest": "e80b9f5b2cb0a9fdf10e421f23f2f3ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5015, "upload_time": "2018-10-24T10:14:42", "upload_time_iso_8601": "2018-10-24T10:14:42.187044Z", "url": "https://files.pythonhosted.org/packages/94/2c/68ba84ec7f263c54c6fc0d3526939e0657384840de8129be731a4396621d/edafa-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "34c8bac9536e715db1fbbce2b2b952bf", "sha256": "a84b8ba548cb4740572fcdf6ef6312b1e3d3fc45c5aa32bcc06ea762902de059"}, "downloads": -1, "filename": "edafa-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "34c8bac9536e715db1fbbce2b2b952bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6873, "upload_time": "2018-10-25T15:12:22", "upload_time_iso_8601": "2018-10-25T15:12:22.179996Z", "url": "https://files.pythonhosted.org/packages/47/15/2a1f523f5263d34104e313bb2a0c4139e06a31fdc34ad8ea64ad287a18aa/edafa-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66e1d4b68f6813300d3b2bb00393fdaf", "sha256": "ade9be1e744717437b1f17bc7498ad8aad435b416ce928f7dd10526678507efd"}, "downloads": -1, "filename": "edafa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "66e1d4b68f6813300d3b2bb00393fdaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5421, "upload_time": "2018-10-25T15:12:23", "upload_time_iso_8601": "2018-10-25T15:12:23.376644Z", "url": "https://files.pythonhosted.org/packages/90/ff/0e985e203b2a3bc13bad0e269eeed7897e5bf9693bce185a1154799ab8c1/edafa-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5486ac703e50c2f75de8a8a5e9bdced0", "sha256": "41ae76f86b7811d7bd67e92dcc54f83ce2d7c4ac5743a1b524cfbdf6d6ff6751"}, "downloads": -1, "filename": "edafa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5486ac703e50c2f75de8a8a5e9bdced0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5396, "upload_time": "2018-10-30T14:33:28", "upload_time_iso_8601": "2018-10-30T14:33:28.831909Z", "url": "https://files.pythonhosted.org/packages/93/8d/e701d2dba1f4fa4bd22b3d4a968f84222b2b400bcb2510f5678428fb5091/edafa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "15001c71e46978b0851e169ef0a37759", "sha256": "485ac2ba3dfe6cbd9efee44a81d7895940a683a27137dd2b6ebadef875c4cf96"}, "downloads": -1, "filename": "edafa-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "15001c71e46978b0851e169ef0a37759", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7091, "upload_time": "2018-11-05T15:52:55", "upload_time_iso_8601": "2018-11-05T15:52:55.716811Z", "url": "https://files.pythonhosted.org/packages/9d/32/e7d7c8bec446a872fe48777bd268912c4ee33f9fb6981a9f40ed0749f346/edafa-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1519dcce9c4c1349b5488fc31c11b8ce", "sha256": "ed4724b4d6ea27f22aaf27cae8f62eb7abdd933ad1afd9b051fd4a051225acea"}, "downloads": -1, "filename": "edafa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1519dcce9c4c1349b5488fc31c11b8ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5571, "upload_time": "2018-11-05T15:52:57", "upload_time_iso_8601": "2018-11-05T15:52:57.412657Z", "url": "https://files.pythonhosted.org/packages/72/cc/0621ad5968e3443f1d626dc4ee188c39b052323f731b3d0802b5efdc5a39/edafa-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "0e5889c0ebc234d37d79c98dc11cb1cb", "sha256": "4bb10446a635a56c8bc617de6873c5e38450b869abdff401e63869bcff7c3dea"}, "downloads": -1, "filename": "edafa-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0e5889c0ebc234d37d79c98dc11cb1cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8135, "upload_time": "2018-11-14T09:41:39", "upload_time_iso_8601": "2018-11-14T09:41:39.961895Z", "url": "https://files.pythonhosted.org/packages/d0/3c/642d2306e5add4e7689ecf91203d5a0fb1f72b32e2b5d8b5074bd1b1f431/edafa-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1743b06baa859fc274aa27af75d7f990", "sha256": "f4b6a46e8a9242ef915ac12f939ab5f1c926bb70fe3dccd1481a6f265e221985"}, "downloads": -1, "filename": "edafa-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1743b06baa859fc274aa27af75d7f990", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6697, "upload_time": "2018-11-14T09:41:41", "upload_time_iso_8601": "2018-11-14T09:41:41.817918Z", "url": "https://files.pythonhosted.org/packages/40/76/d0b5960246458ceaab72ca5a951730803a4f6e55937365741d3d33af5a04/edafa-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c74dcec90706257d2bc2c59608847add", "sha256": "b716c717a4f07d53c46fa215e7aaf2c84cd08c24ca2ee1998ada31b59eb5f281"}, "downloads": -1, "filename": "edafa-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c74dcec90706257d2bc2c59608847add", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9418, "upload_time": "2020-03-28T10:56:08", "upload_time_iso_8601": "2020-03-28T10:56:08.402515Z", "url": "https://files.pythonhosted.org/packages/44/a1/c3974524ad587c1cb39a4607a903fc52e2fea846fcef89f2e5123a300b8d/edafa-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24a7434cd32ffd1d82ede8cd4f07799c", "sha256": "f8153c2dd83cc31e2175ec95a0806479922065635d36d1eb4cfcad9b730c50df"}, "downloads": -1, "filename": "edafa-0.1.5.tar.gz", "has_sig": false, "md5_digest": "24a7434cd32ffd1d82ede8cd4f07799c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7034, "upload_time": "2020-03-28T10:56:10", "upload_time_iso_8601": "2020-03-28T10:56:10.194427Z", "url": "https://files.pythonhosted.org/packages/7a/e0/345050da2e2d8ba9300276c3b91b598284f31816c0bf559752bfd3c6e532/edafa-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c74dcec90706257d2bc2c59608847add", "sha256": "b716c717a4f07d53c46fa215e7aaf2c84cd08c24ca2ee1998ada31b59eb5f281"}, "downloads": -1, "filename": "edafa-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c74dcec90706257d2bc2c59608847add", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9418, "upload_time": "2020-03-28T10:56:08", "upload_time_iso_8601": "2020-03-28T10:56:08.402515Z", "url": "https://files.pythonhosted.org/packages/44/a1/c3974524ad587c1cb39a4607a903fc52e2fea846fcef89f2e5123a300b8d/edafa-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24a7434cd32ffd1d82ede8cd4f07799c", "sha256": "f8153c2dd83cc31e2175ec95a0806479922065635d36d1eb4cfcad9b730c50df"}, "downloads": -1, "filename": "edafa-0.1.5.tar.gz", "has_sig": false, "md5_digest": "24a7434cd32ffd1d82ede8cd4f07799c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7034, "upload_time": "2020-03-28T10:56:10", "upload_time_iso_8601": "2020-03-28T10:56:10.194427Z", "url": "https://files.pythonhosted.org/packages/7a/e0/345050da2e2d8ba9300276c3b91b598284f31816c0bf559752bfd3c6e532/edafa-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:54 2020"}