{"info": {"author": "Tomer Filiba", "author_email": "tomerfiliba@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Cython", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: System :: Archiving :: Backup", "Topic :: System :: Recovery Tools"], "description": "Reed Solomon\n============\n\n|PyPI-Status| |PyPI-Versions| |PyPI-Downloads|\n\n|Build-Status| |Coverage|\n\nA pure-python `universal errors-and-erasures Reed-Solomon Codec <http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction>`_\n, based on the wonderful tutorial at `wikiversity <http://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders>`_,\nwritten by \"Bobmath\" and \"LRQ3000\".\n\n------------------------------------\n\n.. contents:: Table of contents\n   :backlinks: top\n   :local:\n\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install --upgrade reedsolo\n\n.. note::\n\n    When installing from source using ``python setup.py install``, the setup.py will try to build the Cython optimized module ``creedsolo.pyx`` if Cython is installed. You can override this behavior by typing: ``python setup.py install --nocython``.\n\n    A pre-transpiled ``creedsolo.c`` is also available, and can be compiled without Cython by typing: ``python setup.py install --compile``.\n\n    The package on ``pip`` includes a pre-compiled ``creedsolo.pyd`` module for Windows 10 x64.\n\nUsage\n-----\n\nBasic usage with high-level RSCodec class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    # Initialization\n    >>> from reedsolo import RSCodec\n    >>> rsc = RSCodec(10)  # 10 ecc symbols\n\n    # Encoding\n    >>> rsc.encode([1,2,3,4])\n    b'\\x01\\x02\\x03\\x04,\\x9d\\x1c+=\\xf8h\\xfa\\x98M'\n    >>> rsc.encode(bytearray([1,2,3,4]))\n    bytearray(b'\\x01\\x02\\x03\\x04,\\x9d\\x1c+=\\xf8h\\xfa\\x98M')\n    >>> rsc.encode(b'hello world')\n    b'hello world\\xed%T\\xc4\\xfd\\xfd\\x89\\xf3\\xa8\\xaa'\n    # Note that chunking is supported transparently to encode any string length.\n\n    # Decoding (repairing)\n    >>> rsc.decode(b'hello world\\xed%T\\xc4\\xfd\\xfd\\x89\\xf3\\xa8\\xaa')[0]\n    b'hello world'\n    >>> rsc.decode(b'heXlo worXd\\xed%T\\xc4\\xfdX\\x89\\xf3\\xa8\\xaa')[0]     # 3 errors\n    b'hello world'\n    >>> rsc.decode(b'hXXXo worXd\\xed%T\\xc4\\xfdX\\x89\\xf3\\xa8\\xaa')[0]     # 5 errors\n    b'hello world'\n    >>> rsc.decode(b'hXXXo worXd\\xed%T\\xc4\\xfdXX\\xf3\\xa8\\xaa')[0]        # 6 errors - fail\n    Traceback (most recent call last):\n      ...\n    reedsolo.ReedSolomonError: Too many (or few) errors found by Chien Search for the errata locator polynomial!\n\n**Important upgrade notice for pre-1.0 users:** Note that ``RSCodec.decode()`` returns 3 variables:\n\n    1. the decoded (corrected) message\n    2. the decoded message and error correction code (which is itself also corrected)\n    3. and the list of positions of the errata (errors and erasures)\n\nHere is an example:\n\n.. code:: python\n\n    >>> tampered_msg = b'heXlo worXd\\xed%T\\xc4\\xfdX\\x89\\xf3\\xa8\\xaa'\n    >>> decoded_msg, decoded_msgecc, errata_pos = rsc.decode(tampered_msg)\n    >>> print(decoded_msg)  # decoded/corrected message\n    bytearray(b'hello world')\n    >>> print(decoded_msgecc)  # decoded/corrected message and ecc symbols\n    bytearray(b'hello world\\xed%T\\xc4\\xfd\\xfd\\x89\\xf3\\xa8\\xaa')\n    >>> print(errata_pos)  # errata_pos is returned as a bytearray, hardly intelligible\n    bytearray(b'\\x10\\t\\x02')\n    >>> print(list(errata_pos))  # convert to a list to get the errata positions as integer indices\n    [16, 9, 2]\n\nSince we failed to decode with 6 errors with a codec set to 10 error correction code (ecc) symbols, let's try to use a bigger codec, with 12 ecc symbols.\n\n.. code:: python\n\n    >>> rsc = RSCodec(12)  # using 2 more ecc symbols (to correct max 6 errors or 12 erasures)\n    >>> rsc.encode(b'hello world')\n    b'hello world?Ay\\xb2\\xbc\\xdc\\x01q\\xb9\\xe3\\xe2='\n    >>> rsc.decode(b'hello worXXXXy\\xb2XX\\x01q\\xb9\\xe3\\xe2=')[0]         # 6 errors - ok, but any more would fail\n    b'hello world'\n    >>> rsc.decode(b'helXXXXXXXXXXy\\xb2XX\\x01q\\xb9\\xe3\\xe2=', erase_pos=[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16])[0]  # 12 erasures - OK\n    b'hello world'\n\nThis shows that we can decode twice as many erasures (where we provide the location of errors ourselves) than errors (with unknown locations). This is the cost of error correction compared to erasure correction.\n\nTo get the maximum number of errors OR erasures that can be independently corrected (ie, not simultaneously):\n\n.. code:: python\n\n    >>> maxerrors, maxerasures = rsc.maxerrata(verbose=True)\n    This codec can correct up to 6 errors and 12 erasures independently\n    >>> print(maxerrors, maxerasures)\n    6 12\n\nTo get the maximum number of errors AND erasures that can be simultaneously corrected, you need to specify the number of errors or erasures you expect:\n\n.. code:: python\n\n    >>> maxerrors, maxerasures = rsc.maxerrata(erasures=6, verbose=True)  # we know the number of erasures, will calculate how many errors we can afford\n    This codec can correct up to 3 errors and 6 erasures simultaneously\n    >>> print(maxerrors, maxerasures)\n    3 6\n    >>> maxerrors, maxerasures = rsc.maxerrata(errors=5, verbose=True)  # we know the number of errors, will calculate how many erasures we can afford\n    This codec can correct up to 5 errors and 2 erasures simultaneously\n    >>> print(maxerrors, maxerasures)\n    5 2\n\nNote that if a chunk has more errors and erasures than the Singleton Bound as calculated by the ``maxerrata()`` method, the codec will try to raise a ``ReedSolomonError`` exception,\nbut may very well not detect any error either (this is a theoretical limitation of error correction codes). In other words, error correction codes are unreliable to detect if a chunk of a message\nis corrupted beyond the Singleton Bound. If you want more reliability in errata detection, use a checksum or hash such as SHA or MD5 on your message, these are much more reliable and have no bounds\non the number of errata (the only potential issue is with collision but the probability is very very low).\n\nTo check if a message is tampered given its error correction symbols, without decoding, use the ``check()`` method:\n\n.. code:: python\n\n    # Checking\n    >> rsc.check(b'hello worXXXXy\\xb2XX\\x01q\\xb9\\xe3\\xe2=')  # Tampered message will return False\n    [False]\n    >> rmes, rmesecc, errata_pos = rsc.decode(b'hello worXXXXy\\xb2XX\\x01q\\xb9\\xe3\\xe2=')\n    >> rsc.check(rmesecc)  # Corrected or untampered message will return True\n    [True]\n    >> print('Number of detected errors and erasures: %i, their positions: %s' % (len(errata_pos), list(errata_pos)))\n    Number of detected errors and erasures: 6, their positions: [16, 15, 12, 11, 10, 9]\n\nBy default, most Reed-Solomon codecs are limited to characters that can be encoded in 256 bits and with a length of maximum 256 characters. But this codec is universal, you can reduce or increase the length and maximum character value by increasing the Galois Field:\n\n.. code:: python\n\n    # To use longer chunks or bigger values than 255 (may be very slow)\n    >> rsc = RSCodec(12, nsize=4095)  # always use a power of 2 minus 1\n    >> rsc = RSCodec(12, c_exp=12)  # alternative way to set nsize=4095\n    >> mes = 'a' * (4095-12)\n    >> mesecc = rsc.encode(mes)\n    >> mesecc[2] = 1\n    >> mesecc[-1] = 1\n    >> rmes, rmesecc, errata_pos = rsc.decode(mesecc)\n    >> rsc.check(mesecc)\n    [False]\n    >> rsc.check(rmesecc)\n    [True]\n\nNote that the ``RSCodec`` class supports transparent chunking, so you don't need to increase the Galois Field to support longer messages, but characters will still be limited to 256 bits (or\nwhatever field you set with ``c_exp``).\n\nLow-level usage via direct access to math functions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want full control, you can skip the API and directly use the library as-is. Here's how:\n\nFirst you need to init the precomputed tables:\n\n.. code:: python\n\n    >> import reedsolo as rs\n    >> rs.init_tables(0x11d)\n\nPro tip: if you get the error: ValueError: byte must be in range(0, 256), please check that your prime polynomial is correct for your field.\nPro tip2: by default, you can only encode messages of max length and max symbol value = 256. If you want to encode bigger messages,\nplease use the following (where c_exp is the exponent of your Galois Field, eg, 12 = max length 2^12 = 4096):\n\n.. code:: python\n\n    >> prim = rs.find_prime_polys(c_exp=12, fast_primes=True, single=True)\n    >> rs.init_tables(c_exp=12, prim=prim)\n\nLet's define our RS message and ecc size:\n\n.. code:: python\n\n    >> n = 255  # length of total message+ecc\n    >> nsym = 12  # length of ecc\n    >> mes = \"a\" * (n-nsym)  # generate a sample message\n\nTo optimize, you can precompute the generator polynomial:\n\n.. code:: python\n\n    >> gen = rs.rs_generator_poly_all(n)\n\nThen to encode:\n\n.. code:: python\n\n    >> mesecc = rs.rs_encode_msg(mes, nsym, gen=gen[nsym])\n\nLet's tamper our message:\n\n.. code:: python\n\n    >> mesecc[1] = 0\n\nTo decode:\n\n.. code:: python\n\n    >> rmes, recc, errata_pos = rs.rs_correct_msg(mesecc, nsym, erase_pos=erase_pos)\n\nNote that both the message and the ecc are corrected (if possible of course).\nPro tip: if you know a few erasures positions, you can specify them in a list ``erase_pos`` to double the repair power. But you can also just specify an empty list.\n\nYou can check how many errors and/or erasures were corrected, which can be useful to design adaptive bitrate algorithms:\n\n.. code:: python\n\n    >> print('A total of %i errata were corrected over all chunks of this message.' % len(errata_pos))\n\nIf the decoding fails, it will normally automatically check and raise a ReedSolomonError exception that you can handle.\nHowever if you want to manually check if the repaired message is correct, you can do so:\n\n.. code:: python\n\n    >> rs.rs_check(rmes + recc, nsym)\n\nNote: if you want to use multiple reedsolomon with different parameters, you need to backup the globals and restore them before calling reedsolo functions:\n\n.. code:: python\n\n    >> rs.init_tables()\n    >> global gf_log, gf_exp, field_charac\n    >> bak_gf_log, bak_gf_exp, bak_field_charac = gf_log, gf_exp, field_charac\n\n\nThen at anytime, you can do:\n\n.. code:: python\n\n    >> global gf_log, gf_exp, field_charac\n    >> gf_log, gf_exp, field_charac = bak_gf_log, bak_gf_exp, bak_field_charac\n    >> mesecc = rs.rs_encode_msg(mes, nsym)\n    >> rmes, recc, errata_pos = rs.rs_correct_msg(mesecc, nsym)\n\nThe globals backup is not necessary if you use RSCodec, it will be automatically managed.\n\nRead the sourcecode's comments for more info about how it works, and for the various parameters you can setup if\nyou need to interface with other RS codecs.\n\nExtended description\n--------------------\nThe code of wikiversity is here consolidated into a nice API with exceptions handling.\nThe algorithm can correct up to 2*e+v <= nsym, where e is the number of errors,\nv the number of erasures and nsym = n-k = the number of ECC (error correction code) symbols.\nThis means that you can either correct exactly floor(nsym/2) errors, or nsym erasures\n(errors where you know the position), and a combination of both errors and erasures.\nThis is called the Singleton Bound, and is the maximum/optimal theoretical number\nof erasures and errors any error correction algorithm can correct (although there\nare experimental approaches to go a bit further, named list decoding, not implemented\nhere, but feel free to do pull request!).\nThe code should work on pretty much any reasonable version of python (2.4-3.7),\nbut I'm only testing on 2.7 and 3.7. Python 3.8 should work except for Cython which is\ncurrently incompatible with this version.\n\nThe codec has quite reasonable performances if you either use PyPy on the pure-python\nimplementation (reedsolo.py) or either if you compile the Cython extension creedsolo.pyx\n(which is about 2x faster than PyPy). You can expect encoding rates of several MB/s.\n\nThis library is also thoroughly unit tested so that nearly any encoding/decoding case should be covered.\n\nThe codec is universal, meaning that it can decode any message encoded by another RS encoder\nas long as you provide the correct parameters.\nNote however that if you use higher fields (ie, bigger c_exp), the algorithms will be slower, first because\nwe cannot then use the optimized bytearray() structure but only array.array('i', ...), and also because\nReed-Solomon's complexity is quadratic (both in encoding and decoding), so this means that the longer\nyour messages, the longer it will take to encode/decode (quadratically!).\n\nThe algorithm itself can handle messages of a length up to (2^c_exp)-1 symbols per message (or chunk), including the ECC symbols,\nand each symbol can have a value of up to (2^c_exp)-1 (indeed, both the message length and the maximum\nvalue for one character is constrained by the same mathematical reason). By default, we use the field GF(2^8),\nwhich means that you are limited to values between 0 and 255 (perfect to represent a single hexadecimal\nsymbol on computers, so you can encode any binary stream) and limited to messages+ecc of maximum\nlength 255. However, you can \"chunk\" longer messages to fit them into the message length limit.\nThe ``RSCodec`` class will automatically apply chunking, by splitting longer messages into chunks and\nencode/decode them separately; it shouldn't make a difference from an API perspective (ie, from your POV).\n\n\nTo use the Cython implementation, you need to `pip install cython` and a C++ compiler (Microsoft Visual C++ 14.0 for Windows and Python 3.7). Then you can simply cd to the root of the folder where creedsolo.pyx is, and type ``python setup.py build_ext --inplace``. Alternatively, you can generate just the C++ code by typing `cython -3 creedsolo.pyx`. When building a distributable egg or installing the module from source, the Cython module will be automatically transpiled and compiled if both Cython and a C compiler are installed. This behavior can be modified using the ``--nocython`` and ``--compile`` arguments for ``setup.py``.\n\nAuthors\n-------\n\nThis module was conceived and developed by Tomer Filiba.\n\nIt was further extended and is currently maintained by Stephen Karl Larroque.\n\nLicense\n-------\n\nThis software is released to the Public Domain.\n\nIf the Public Domain is not adequate for your purpose, you can instead consider this module under the MIT License as you prefer.\n\n\n.. |PyPI-Status| image:: https://img.shields.io/pypi/v/reedsolo.svg\n   :target: https://pypi.org/project/reedsolo\n.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/reedsolo.svg?logo=python&logoColor=white\n   :target: https://pypi.org/project/reedsolo\n.. |PyPI-Downloads| image:: https://img.shields.io/pypi/dm/reedsolo.svg?label=pypi%20downloads&logo=python&logoColor=white\n   :target: https://pypi.org/project/reedsolo\n.. |Build-Status| image:: https://travis-ci.org/tomerfiliba/reedsolomon.svg?branch=master\n    :target: https://travis-ci.org/tomerfiliba/reedsolomon\n.. |Coverage| image:: https://coveralls.io/repos/tomerfiliba/reedsolomon/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/tomerfiliba/reedsolomon?branch=master\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tomerfiliba/reedsolomon", "keywords": "", "license": "Public Domain", "maintainer": "Stephen Karl Larroque", "maintainer_email": "lrq3000@gmail.com", "name": "reedsolo", "package_url": "https://pypi.org/project/reedsolo/", "platform": "any", "project_url": "https://pypi.org/project/reedsolo/", "project_urls": {"Homepage": "https://github.com/tomerfiliba/reedsolomon"}, "release_url": "https://pypi.org/project/reedsolo/1.5.3/", "requires_dist": null, "requires_python": "", "summary": "Pure-Python Reed Solomon encoder/decoder", "version": "1.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/reedsolo\" rel=\"nofollow\"><img alt=\"PyPI-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cce193eb5a82558af439db7ddc0966c43be661dd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72656564736f6c6f2e737667\"></a> <a href=\"https://pypi.org/project/reedsolo\" rel=\"nofollow\"><img alt=\"PyPI-Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/308411582ca2e583d120cad5a2b00bcfb1f8cee8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72656564736f6c6f2e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a> <a href=\"https://pypi.org/project/reedsolo\" rel=\"nofollow\"><img alt=\"PyPI-Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b2094fc08473891c5db683f71132828f89b8c25/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f72656564736f6c6f2e7376673f6c6162656c3d70797069253230646f776e6c6f616473266c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a></p>\n<p><a href=\"https://travis-ci.org/tomerfiliba/reedsolomon\" rel=\"nofollow\"><img alt=\"Build-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad5731e57549c7b3e186f305e6584dde356a173b/68747470733a2f2f7472617669732d63692e6f72672f746f6d657266696c6962612f72656564736f6c6f6d6f6e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/tomerfiliba/reedsolomon?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b23fb3a973cc04b213a00f62b14b2b8f71db246f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f746f6d657266696c6962612f72656564736f6c6f6d6f6e2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a></p>\n<p>A pure-python <a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" rel=\"nofollow\">universal errors-and-erasures Reed-Solomon Codec</a>\n, based on the wonderful tutorial at <a href=\"http://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders\" rel=\"nofollow\">wikiversity</a>,\nwritten by \u201cBobmath\u201d and \u201cLRQ3000\u201d.</p>\n<hr class=\"docutils\">\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#basic-usage-with-high-level-rscodec-class\" id=\"id3\" rel=\"nofollow\">Basic usage with high-level RSCodec class</a></li>\n<li><a href=\"#low-level-usage-via-direct-access-to-math-functions\" id=\"id4\" rel=\"nofollow\">Low-level usage via direct access to math functions</a></li>\n</ul>\n</li>\n<li><a href=\"#extended-description\" id=\"id5\" rel=\"nofollow\">Extended description</a></li>\n<li><a href=\"#authors\" id=\"id6\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#license\" id=\"id7\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Installation</a></h2>\n<pre>pip install --upgrade reedsolo\n</pre>\n<div>\n<p>Note</p>\n<p>When installing from source using <tt>python setup.py install</tt>, the setup.py will try to build the Cython optimized module <tt>creedsolo.pyx</tt> if Cython is installed. You can override this behavior by typing: <tt>python setup.py install <span class=\"pre\">--nocython</span></tt>.</p>\n<p>A pre-transpiled <tt>creedsolo.c</tt> is also available, and can be compiled without Cython by typing: <tt>python setup.py install <span class=\"pre\">--compile</span></tt>.</p>\n<p>The package on <tt>pip</tt> includes a pre-compiled <tt>creedsolo.pyd</tt> module for Windows 10 x64.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"basic-usage-with-high-level-rscodec-class\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Basic usage with high-level RSCodec class</a></h3>\n<pre><span class=\"c1\"># Initialization</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">reedsolo</span> <span class=\"kn\">import</span> <span class=\"n\">RSCodec</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span> <span class=\"o\">=</span> <span class=\"n\">RSCodec</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># 10 ecc symbols</span>\n\n<span class=\"c1\"># Encoding</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01\\x02\\x03\\x04</span><span class=\"s1\">,</span><span class=\"se\">\\x9d\\x1c</span><span class=\"s1\">+=</span><span class=\"se\">\\xf8</span><span class=\"s1\">h</span><span class=\"se\">\\xfa\\x98</span><span class=\"s1\">M'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"nb\">bytearray</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01\\x02\\x03\\x04</span><span class=\"s1\">,</span><span class=\"se\">\\x9d\\x1c</span><span class=\"s1\">+=</span><span class=\"se\">\\xf8</span><span class=\"s1\">h</span><span class=\"se\">\\xfa\\x98</span><span class=\"s1\">M'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd\\xfd\\x89\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span>\n<span class=\"c1\"># Note that chunking is supported transparently to encode any string length.</span>\n\n<span class=\"c1\"># Decoding (repairing)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd\\xfd\\x89\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'heXlo worXd</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd</span><span class=\"s1\">X</span><span class=\"se\">\\x89\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>     <span class=\"c1\"># 3 errors</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hXXXo worXd</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd</span><span class=\"s1\">X</span><span class=\"se\">\\x89\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>     <span class=\"c1\"># 5 errors</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hXXXo worXd</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd</span><span class=\"s1\">XX</span><span class=\"se\">\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>        <span class=\"c1\"># 6 errors - fail</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">reedsolo</span><span class=\"o\">.</span><span class=\"n\">ReedSolomonError</span><span class=\"p\">:</span> <span class=\"n\">Too</span> <span class=\"n\">many</span> <span class=\"p\">(</span><span class=\"ow\">or</span> <span class=\"n\">few</span><span class=\"p\">)</span> <span class=\"n\">errors</span> <span class=\"n\">found</span> <span class=\"n\">by</span> <span class=\"n\">Chien</span> <span class=\"n\">Search</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">errata</span> <span class=\"n\">locator</span> <span class=\"n\">polynomial</span><span class=\"err\">!</span>\n</pre>\n<p><strong>Important upgrade notice for pre-1.0 users:</strong> Note that <tt>RSCodec.decode()</tt> returns 3 variables:</p>\n<blockquote>\n<ol>\n<li>the decoded (corrected) message</li>\n<li>the decoded message and error correction code (which is itself also corrected)</li>\n<li>and the list of positions of the errata (errors and erasures)</li>\n</ol>\n</blockquote>\n<p>Here is an example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tampered_msg</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'heXlo worXd</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd</span><span class=\"s1\">X</span><span class=\"se\">\\x89\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">decoded_msg</span><span class=\"p\">,</span> <span class=\"n\">decoded_msgecc</span><span class=\"p\">,</span> <span class=\"n\">errata_pos</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">tampered_msg</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decoded_msg</span><span class=\"p\">)</span>  <span class=\"c1\"># decoded/corrected message</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decoded_msgecc</span><span class=\"p\">)</span>  <span class=\"c1\"># decoded/corrected message and ecc symbols</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world</span><span class=\"se\">\\xed</span><span class=\"s1\">%T</span><span class=\"se\">\\xc4\\xfd\\xfd\\x89\\xf3\\xa8\\xaa</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">errata_pos</span><span class=\"p\">)</span>  <span class=\"c1\"># errata_pos is returned as a bytearray, hardly intelligible</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x10\\t\\x02</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">errata_pos</span><span class=\"p\">))</span>  <span class=\"c1\"># convert to a list to get the errata positions as integer indices</span>\n<span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>Since we failed to decode with 6 errors with a codec set to 10 error correction code (ecc) symbols, let\u2019s try to use a bigger codec, with 12 ecc symbols.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span> <span class=\"o\">=</span> <span class=\"n\">RSCodec</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>  <span class=\"c1\"># using 2 more ecc symbols (to correct max 6 errors or 12 erasures)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world?Ay</span><span class=\"se\">\\xb2\\xbc\\xdc\\x01</span><span class=\"s1\">q</span><span class=\"se\">\\xb9\\xe3\\xe2</span><span class=\"s1\">='</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello worXXXXy</span><span class=\"se\">\\xb2</span><span class=\"s1\">XX</span><span class=\"se\">\\x01</span><span class=\"s1\">q</span><span class=\"se\">\\xb9\\xe3\\xe2</span><span class=\"s1\">='</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>         <span class=\"c1\"># 6 errors - ok, but any more would fail</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'helXXXXXXXXXXy</span><span class=\"se\">\\xb2</span><span class=\"s1\">XX</span><span class=\"se\">\\x01</span><span class=\"s1\">q</span><span class=\"se\">\\xb9\\xe3\\xe2</span><span class=\"s1\">='</span><span class=\"p\">,</span> <span class=\"n\">erase_pos</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># 12 erasures - OK</span>\n<span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n</pre>\n<p>This shows that we can decode twice as many erasures (where we provide the location of errors ourselves) than errors (with unknown locations). This is the cost of error correction compared to erasure correction.</p>\n<p>To get the maximum number of errors OR erasures that can be independently corrected (ie, not simultaneously):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">maxerrors</span><span class=\"p\">,</span> <span class=\"n\">maxerasures</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">maxerrata</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">This</span> <span class=\"n\">codec</span> <span class=\"n\">can</span> <span class=\"n\">correct</span> <span class=\"n\">up</span> <span class=\"n\">to</span> <span class=\"mi\">6</span> <span class=\"n\">errors</span> <span class=\"ow\">and</span> <span class=\"mi\">12</span> <span class=\"n\">erasures</span> <span class=\"n\">independently</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">maxerrors</span><span class=\"p\">,</span> <span class=\"n\">maxerasures</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span> <span class=\"mi\">12</span>\n</pre>\n<p>To get the maximum number of errors AND erasures that can be simultaneously corrected, you need to specify the number of errors or erasures you expect:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">maxerrors</span><span class=\"p\">,</span> <span class=\"n\">maxerasures</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">maxerrata</span><span class=\"p\">(</span><span class=\"n\">erasures</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># we know the number of erasures, will calculate how many errors we can afford</span>\n<span class=\"n\">This</span> <span class=\"n\">codec</span> <span class=\"n\">can</span> <span class=\"n\">correct</span> <span class=\"n\">up</span> <span class=\"n\">to</span> <span class=\"mi\">3</span> <span class=\"n\">errors</span> <span class=\"ow\">and</span> <span class=\"mi\">6</span> <span class=\"n\">erasures</span> <span class=\"n\">simultaneously</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">maxerrors</span><span class=\"p\">,</span> <span class=\"n\">maxerasures</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span> <span class=\"mi\">6</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">maxerrors</span><span class=\"p\">,</span> <span class=\"n\">maxerasures</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">maxerrata</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># we know the number of errors, will calculate how many erasures we can afford</span>\n<span class=\"n\">This</span> <span class=\"n\">codec</span> <span class=\"n\">can</span> <span class=\"n\">correct</span> <span class=\"n\">up</span> <span class=\"n\">to</span> <span class=\"mi\">5</span> <span class=\"n\">errors</span> <span class=\"ow\">and</span> <span class=\"mi\">2</span> <span class=\"n\">erasures</span> <span class=\"n\">simultaneously</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">maxerrors</span><span class=\"p\">,</span> <span class=\"n\">maxerasures</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span> <span class=\"mi\">2</span>\n</pre>\n<p>Note that if a chunk has more errors and erasures than the Singleton Bound as calculated by the <tt>maxerrata()</tt> method, the codec will try to raise a <tt>ReedSolomonError</tt> exception,\nbut may very well not detect any error either (this is a theoretical limitation of error correction codes). In other words, error correction codes are unreliable to detect if a chunk of a message\nis corrupted beyond the Singleton Bound. If you want more reliability in errata detection, use a checksum or hash such as SHA or MD5 on your message, these are much more reliable and have no bounds\non the number of errata (the only potential issue is with collision but the probability is very very low).</p>\n<p>To check if a message is tampered given its error correction symbols, without decoding, use the <tt>check()</tt> method:</p>\n<pre><span class=\"c1\"># Checking</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello worXXXXy</span><span class=\"se\">\\xb2</span><span class=\"s1\">XX</span><span class=\"se\">\\x01</span><span class=\"s1\">q</span><span class=\"se\">\\xb9\\xe3\\xe2</span><span class=\"s1\">='</span><span class=\"p\">)</span>  <span class=\"c1\"># Tampered message will return False</span>\n<span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rmes</span><span class=\"p\">,</span> <span class=\"n\">rmesecc</span><span class=\"p\">,</span> <span class=\"n\">errata_pos</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello worXXXXy</span><span class=\"se\">\\xb2</span><span class=\"s1\">XX</span><span class=\"se\">\\x01</span><span class=\"s1\">q</span><span class=\"se\">\\xb9\\xe3\\xe2</span><span class=\"s1\">='</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">rmesecc</span><span class=\"p\">)</span>  <span class=\"c1\"># Corrected or untampered message will return True</span>\n<span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of detected errors and erasures: </span><span class=\"si\">%i</span><span class=\"s1\">, their positions: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errata_pos</span><span class=\"p\">),</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">errata_pos</span><span class=\"p\">)))</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">detected</span> <span class=\"n\">errors</span> <span class=\"ow\">and</span> <span class=\"n\">erasures</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">their</span> <span class=\"n\">positions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre>\n<p>By default, most Reed-Solomon codecs are limited to characters that can be encoded in 256 bits and with a length of maximum 256 characters. But this codec is universal, you can reduce or increase the length and maximum character value by increasing the Galois Field:</p>\n<pre><span class=\"c1\"># To use longer chunks or bigger values than 255 (may be very slow)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rsc</span> <span class=\"o\">=</span> <span class=\"n\">RSCodec</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">nsize</span><span class=\"o\">=</span><span class=\"mi\">4095</span><span class=\"p\">)</span>  <span class=\"c1\"># always use a power of 2 minus 1</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rsc</span> <span class=\"o\">=</span> <span class=\"n\">RSCodec</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">c_exp</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>  <span class=\"c1\"># alternative way to set nsize=4095</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mes</span> <span class=\"o\">=</span> <span class=\"s1\">'a'</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">4095</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mesecc</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">mes</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mesecc</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mesecc</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rmes</span><span class=\"p\">,</span> <span class=\"n\">rmesecc</span><span class=\"p\">,</span> <span class=\"n\">errata_pos</span> <span class=\"o\">=</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">mesecc</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">mesecc</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rsc</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">rmesecc</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]</span>\n</pre>\n<p>Note that the <tt>RSCodec</tt> class supports transparent chunking, so you don\u2019t need to increase the Galois Field to support longer messages, but characters will still be limited to 256 bits (or\nwhatever field you set with <tt>c_exp</tt>).</p>\n</div>\n<div id=\"low-level-usage-via-direct-access-to-math-functions\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Low-level usage via direct access to math functions</a></h3>\n<p>If you want full control, you can skip the API and directly use the library as-is. Here\u2019s how:</p>\n<p>First you need to init the precomputed tables:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">reedsolo</span> <span class=\"k\">as</span> <span class=\"nn\">rs</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">init_tables</span><span class=\"p\">(</span><span class=\"mh\">0x11d</span><span class=\"p\">)</span>\n</pre>\n<p>Pro tip: if you get the error: ValueError: byte must be in range(0, 256), please check that your prime polynomial is correct for your field.\nPro tip2: by default, you can only encode messages of max length and max symbol value = 256. If you want to encode bigger messages,\nplease use the following (where c_exp is the exponent of your Galois Field, eg, 12 = max length 2^12 = 4096):</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">prim</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">find_prime_polys</span><span class=\"p\">(</span><span class=\"n\">c_exp</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">fast_primes</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">init_tables</span><span class=\"p\">(</span><span class=\"n\">c_exp</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">prim</span><span class=\"o\">=</span><span class=\"n\">prim</span><span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s define our RS message and ecc size:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">255</span>  <span class=\"c1\"># length of total message+ecc</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">nsym</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>  <span class=\"c1\"># length of ecc</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mes</span> <span class=\"o\">=</span> <span class=\"s2\">\"a\"</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">nsym</span><span class=\"p\">)</span>  <span class=\"c1\"># generate a sample message</span>\n</pre>\n<p>To optimize, you can precompute the generator polynomial:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">rs_generator_poly_all</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<p>Then to encode:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">mesecc</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">rs_encode_msg</span><span class=\"p\">(</span><span class=\"n\">mes</span><span class=\"p\">,</span> <span class=\"n\">nsym</span><span class=\"p\">,</span> <span class=\"n\">gen</span><span class=\"o\">=</span><span class=\"n\">gen</span><span class=\"p\">[</span><span class=\"n\">nsym</span><span class=\"p\">])</span>\n</pre>\n<p>Let\u2019s tamper our message:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">mesecc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre>\n<p>To decode:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">rmes</span><span class=\"p\">,</span> <span class=\"n\">recc</span><span class=\"p\">,</span> <span class=\"n\">errata_pos</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">rs_correct_msg</span><span class=\"p\">(</span><span class=\"n\">mesecc</span><span class=\"p\">,</span> <span class=\"n\">nsym</span><span class=\"p\">,</span> <span class=\"n\">erase_pos</span><span class=\"o\">=</span><span class=\"n\">erase_pos</span><span class=\"p\">)</span>\n</pre>\n<p>Note that both the message and the ecc are corrected (if possible of course).\nPro tip: if you know a few erasures positions, you can specify them in a list <tt>erase_pos</tt> to double the repair power. But you can also just specify an empty list.</p>\n<p>You can check how many errors and/or erasures were corrected, which can be useful to design adaptive bitrate algorithms:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'A total of </span><span class=\"si\">%i</span><span class=\"s1\"> errata were corrected over all chunks of this message.'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errata_pos</span><span class=\"p\">))</span>\n</pre>\n<p>If the decoding fails, it will normally automatically check and raise a ReedSolomonError exception that you can handle.\nHowever if you want to manually check if the repaired message is correct, you can do so:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">rs_check</span><span class=\"p\">(</span><span class=\"n\">rmes</span> <span class=\"o\">+</span> <span class=\"n\">recc</span><span class=\"p\">,</span> <span class=\"n\">nsym</span><span class=\"p\">)</span>\n</pre>\n<p>Note: if you want to use multiple reedsolomon with different parameters, you need to backup the globals and restore them before calling reedsolo functions:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">init_tables</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">global</span> <span class=\"n\">gf_log</span><span class=\"p\">,</span> <span class=\"n\">gf_exp</span><span class=\"p\">,</span> <span class=\"n\">field_charac</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">bak_gf_log</span><span class=\"p\">,</span> <span class=\"n\">bak_gf_exp</span><span class=\"p\">,</span> <span class=\"n\">bak_field_charac</span> <span class=\"o\">=</span> <span class=\"n\">gf_log</span><span class=\"p\">,</span> <span class=\"n\">gf_exp</span><span class=\"p\">,</span> <span class=\"n\">field_charac</span>\n</pre>\n<p>Then at anytime, you can do:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"k\">global</span> <span class=\"n\">gf_log</span><span class=\"p\">,</span> <span class=\"n\">gf_exp</span><span class=\"p\">,</span> <span class=\"n\">field_charac</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">gf_log</span><span class=\"p\">,</span> <span class=\"n\">gf_exp</span><span class=\"p\">,</span> <span class=\"n\">field_charac</span> <span class=\"o\">=</span> <span class=\"n\">bak_gf_log</span><span class=\"p\">,</span> <span class=\"n\">bak_gf_exp</span><span class=\"p\">,</span> <span class=\"n\">bak_field_charac</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">mesecc</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">rs_encode_msg</span><span class=\"p\">(</span><span class=\"n\">mes</span><span class=\"p\">,</span> <span class=\"n\">nsym</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">rmes</span><span class=\"p\">,</span> <span class=\"n\">recc</span><span class=\"p\">,</span> <span class=\"n\">errata_pos</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">rs_correct_msg</span><span class=\"p\">(</span><span class=\"n\">mesecc</span><span class=\"p\">,</span> <span class=\"n\">nsym</span><span class=\"p\">)</span>\n</pre>\n<p>The globals backup is not necessary if you use RSCodec, it will be automatically managed.</p>\n<p>Read the sourcecode\u2019s comments for more info about how it works, and for the various parameters you can setup if\nyou need to interface with other RS codecs.</p>\n</div>\n</div>\n<div id=\"extended-description\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Extended description</a></h2>\n<p>The code of wikiversity is here consolidated into a nice API with exceptions handling.\nThe algorithm can correct up to 2*e+v &lt;= nsym, where e is the number of errors,\nv the number of erasures and nsym = n-k = the number of ECC (error correction code) symbols.\nThis means that you can either correct exactly floor(nsym/2) errors, or nsym erasures\n(errors where you know the position), and a combination of both errors and erasures.\nThis is called the Singleton Bound, and is the maximum/optimal theoretical number\nof erasures and errors any error correction algorithm can correct (although there\nare experimental approaches to go a bit further, named list decoding, not implemented\nhere, but feel free to do pull request!).\nThe code should work on pretty much any reasonable version of python (2.4-3.7),\nbut I\u2019m only testing on 2.7 and 3.7. Python 3.8 should work except for Cython which is\ncurrently incompatible with this version.</p>\n<p>The codec has quite reasonable performances if you either use PyPy on the pure-python\nimplementation (reedsolo.py) or either if you compile the Cython extension creedsolo.pyx\n(which is about 2x faster than PyPy). You can expect encoding rates of several MB/s.</p>\n<p>This library is also thoroughly unit tested so that nearly any encoding/decoding case should be covered.</p>\n<p>The codec is universal, meaning that it can decode any message encoded by another RS encoder\nas long as you provide the correct parameters.\nNote however that if you use higher fields (ie, bigger c_exp), the algorithms will be slower, first because\nwe cannot then use the optimized bytearray() structure but only array.array(\u2018i\u2019, \u2026), and also because\nReed-Solomon\u2019s complexity is quadratic (both in encoding and decoding), so this means that the longer\nyour messages, the longer it will take to encode/decode (quadratically!).</p>\n<p>The algorithm itself can handle messages of a length up to (2^c_exp)-1 symbols per message (or chunk), including the ECC symbols,\nand each symbol can have a value of up to (2^c_exp)-1 (indeed, both the message length and the maximum\nvalue for one character is constrained by the same mathematical reason). By default, we use the field GF(2^8),\nwhich means that you are limited to values between 0 and 255 (perfect to represent a single hexadecimal\nsymbol on computers, so you can encode any binary stream) and limited to messages+ecc of maximum\nlength 255. However, you can \u201cchunk\u201d longer messages to fit them into the message length limit.\nThe <tt>RSCodec</tt> class will automatically apply chunking, by splitting longer messages into chunks and\nencode/decode them separately; it shouldn\u2019t make a difference from an API perspective (ie, from your POV).</p>\n<p>To use the Cython implementation, you need to <cite>pip install cython</cite> and a C++ compiler (Microsoft Visual C++ 14.0 for Windows and Python 3.7). Then you can simply cd to the root of the folder where creedsolo.pyx is, and type <tt>python setup.py build_ext <span class=\"pre\">--inplace</span></tt>. Alternatively, you can generate just the C++ code by typing <cite>cython -3 creedsolo.pyx</cite>. When building a distributable egg or installing the module from source, the Cython module will be automatically transpiled and compiled if both Cython and a C compiler are installed. This behavior can be modified using the <tt><span class=\"pre\">--nocython</span></tt> and <tt><span class=\"pre\">--compile</span></tt> arguments for <tt>setup.py</tt>.</p>\n</div>\n<div id=\"authors\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Authors</a></h2>\n<p>This module was conceived and developed by Tomer Filiba.</p>\n<p>It was further extended and is currently maintained by Stephen Karl Larroque.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">License</a></h2>\n<p>This software is released to the Public Domain.</p>\n<p>If the Public Domain is not adequate for your purpose, you can instead consider this module under the MIT License as you prefer.</p>\n</div>\n\n          </div>"}, "last_serial": 7165242, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "12a842aed5a11d1c9712a179cd2e464b", "sha256": "c32e9570d996e975cd8b02f4a1044517aba120b8ff7f74dcbf8d106e3a6ddeb2"}, "downloads": -1, "filename": "reedsolo-0.1.tar.gz", "has_sig": false, "md5_digest": "12a842aed5a11d1c9712a179cd2e464b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4041, "upload_time": "2012-06-07T22:27:16", "upload_time_iso_8601": "2012-06-07T22:27:16.420986Z", "url": "https://files.pythonhosted.org/packages/c8/19/9572e3e2604111c80b2ae79b4e9ff3967395d9d60fe9d5b5e55a649532f3/reedsolo-0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb1a12b49fe476877c27a85ccd40dbe2", "sha256": "e7b21bf5ae156cb1941f99786d947632731e482a27c15400be9340736c10e1c4"}, "downloads": -1, "filename": "reedsolo-0.1.zip", "has_sig": false, "md5_digest": "fb1a12b49fe476877c27a85ccd40dbe2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8057, "upload_time": "2012-06-07T22:27:17", "upload_time_iso_8601": "2012-06-07T22:27:17.269540Z", "url": "https://files.pythonhosted.org/packages/12/66/c3680807e02ac92722d91e3c34e27b0411d183014e207a770a2f637e5967/reedsolo-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "14e3ec86c2534713729f09f6e509a93f", "sha256": "397c28491f28cd31317c77e223df743846231e6d8c4c89240a01bcade328a645"}, "downloads": -1, "filename": "reedsolo-0.2.tar.gz", "has_sig": false, "md5_digest": "14e3ec86c2534713729f09f6e509a93f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4299, "upload_time": "2012-06-08T13:25:04", "upload_time_iso_8601": "2012-06-08T13:25:04.611722Z", "url": "https://files.pythonhosted.org/packages/6e/15/ab1133de62ccd0e67bcf54545a03964f26c8280f47290bcc87ac6c99bb29/reedsolo-0.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d1d0df3e7a99978ba001b3a79b7923f", "sha256": "cef7eb63533ca3553523c35897d1e61a8d8b2a0e8c9735bc52b2116b2a65f8e1"}, "downloads": -1, "filename": "reedsolo-0.2.zip", "has_sig": false, "md5_digest": "8d1d0df3e7a99978ba001b3a79b7923f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8585, "upload_time": "2012-06-08T13:25:05", "upload_time_iso_8601": "2012-06-08T13:25:05.278330Z", "url": "https://files.pythonhosted.org/packages/ad/c3/fefaa8e91e6d470bc2f2133a96c0aac5ff8c54f545b5de8eb31808e8e825/reedsolo-0.2.zip", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "eda400a679236abe3a78c5cc682ff1bc", "sha256": "c11f074c1dc3eee86a7c976a7626e92e933e0b15cc0272654ad3760af0685d7f"}, "downloads": -1, "filename": "reedsolo-0.3.tar.gz", "has_sig": false, "md5_digest": "eda400a679236abe3a78c5cc682ff1bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4168, "upload_time": "2012-08-09T10:20:05", "upload_time_iso_8601": "2012-08-09T10:20:05.036573Z", "url": "https://files.pythonhosted.org/packages/b7/fc/9a92265c7e8d556d3af1fc023727707385645fa05714bb25817448d6df76/reedsolo-0.3.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9f072c982059150bbc007e823bcd08f", "sha256": "a0ea07f90aa5b944c2e67805d6f6bcdc2a77f05d81714a40332edbe2fb26a0c0"}, "downloads": -1, "filename": "reedsolo-0.3.win32.exe", "has_sig": false, "md5_digest": "b9f072c982059150bbc007e823bcd08f", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 69061, "upload_time": "2012-08-09T10:20:09", "upload_time_iso_8601": "2012-08-09T10:20:09.097446Z", "url": "https://files.pythonhosted.org/packages/32/97/c570762cf5285c3102c60ea8c56e6a4c9afb26d711841dc7e52f75b27d35/reedsolo-0.3.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfad5a13d5539746638808c927ea6f10", "sha256": "fc0795b16a729fb43d452bcdadda82ff90699bdc296b1cb49443570379a8222b"}, "downloads": -1, "filename": "reedsolo-0.3.zip", "has_sig": false, "md5_digest": "bfad5a13d5539746638808c927ea6f10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8502, "upload_time": "2012-08-09T10:20:06", "upload_time_iso_8601": "2012-08-09T10:20:06.131242Z", "url": "https://files.pythonhosted.org/packages/88/1a/abcf86fe9bb1ae7147ca66645e070bde4e1f380022f301a05b7c1473293a/reedsolo-0.3.zip", "yanked": false}], "1.4.10": [{"comment_text": "", "digests": {"md5": "79d5bf7fabd12a78e3ecebd00771a89f", "sha256": "9e0089892f0e0bf78bb02f0623f5cf7a764c39994ae1a1333226af46bec49444"}, "downloads": -1, "filename": "reedsolo-1.4.10-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "79d5bf7fabd12a78e3ecebd00771a89f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 181410, "upload_time": "2020-03-01T21:17:43", "upload_time_iso_8601": "2020-03-01T21:17:43.211030Z", "url": "https://files.pythonhosted.org/packages/55/e4/6d216ee63b880d5fdda6334718d91ee78f1e6d262041f8b206e6b6ddcc56/reedsolo-1.4.10-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3df3faea9a9013d39b4fd09e9165440", "sha256": "be9717c4536e8542915908d9af7392ac50107b5cc891028b4bb8cea88f3b1432"}, "downloads": -1, "filename": "reedsolo-1.4.10.tar.gz", "has_sig": false, "md5_digest": "d3df3faea9a9013d39b4fd09e9165440", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262784, "upload_time": "2020-03-01T21:17:45", "upload_time_iso_8601": "2020-03-01T21:17:45.999174Z", "url": "https://files.pythonhosted.org/packages/1c/9e/b976539d30f3ae1a1d094b7874332088dc31e517b16547de027016d0ad1c/reedsolo-1.4.10.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "a0ff1274a4ce9194e29945fef9e78814", "sha256": "523dd2fad85e0e09b8db7ab261f4f5d43fc3f0b2bd8e668c67de97631671709b"}, "downloads": -1, "filename": "reedsolo-1.4.3-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "a0ff1274a4ce9194e29945fef9e78814", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 177153, "upload_time": "2020-03-01T18:17:19", "upload_time_iso_8601": "2020-03-01T18:17:19.912495Z", "url": "https://files.pythonhosted.org/packages/5f/69/6fa18183ca6fb27ef78b943e0fa3cdfe6f6f1721bbb84ca7e8430eea57ee/reedsolo-1.4.3-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8d628182912684a76eff2caa3d4bda1", "sha256": "fb00e6055558ce91d6aa7b83c252611c48253602de08340d3249c0ed7fce2c93"}, "downloads": -1, "filename": "reedsolo-1.4.3.tar.gz", "has_sig": false, "md5_digest": "a8d628182912684a76eff2caa3d4bda1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255819, "upload_time": "2020-03-01T18:17:21", "upload_time_iso_8601": "2020-03-01T18:17:21.815138Z", "url": "https://files.pythonhosted.org/packages/be/26/2552a8e3e945ad578c47ab9c8b6b1520d9d1788d17f738efb3b5b97260c2/reedsolo-1.4.3.tar.gz", "yanked": false}], "1.4.5": [{"comment_text": "", "digests": {"md5": "6d4b52072f4aa5aa54b12932122a991b", "sha256": "c6116d3c1e4afd665e24f5cd72e9771bd6f4aab602f838a25ca041e458d275ca"}, "downloads": -1, "filename": "reedsolo-1.4.5-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "6d4b52072f4aa5aa54b12932122a991b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 177325, "upload_time": "2020-03-01T20:01:34", "upload_time_iso_8601": "2020-03-01T20:01:34.899360Z", "url": "https://files.pythonhosted.org/packages/9e/35/ecd1a791e78d353ce39aae6370a481108d854f7ae9cde5e32719fa25b74d/reedsolo-1.4.5-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd3669d786fa77906390d3f6a321d524", "sha256": "76e7282568695a08b667b816cbe45e8d8df98c535c19fe8601886f39245d1d43"}, "downloads": -1, "filename": "reedsolo-1.4.5.tar.gz", "has_sig": false, "md5_digest": "fd3669d786fa77906390d3f6a321d524", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256232, "upload_time": "2020-03-01T20:01:36", "upload_time_iso_8601": "2020-03-01T20:01:36.981031Z", "url": "https://files.pythonhosted.org/packages/27/9b/852bc7ef3208f37daf06e7e9ce4b5c73efcb7da3ff8121bc4ae845670c1a/reedsolo-1.4.5.tar.gz", "yanked": false}], "1.4.6": [{"comment_text": "", "digests": {"md5": "61586846867bbaa9377bd12125edae88", "sha256": "a323b4f7c8fb40b922c776e8804c95afb990c6f14f05b363bc35d64dd02d263a"}, "downloads": -1, "filename": "reedsolo-1.4.6-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "61586846867bbaa9377bd12125edae88", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 177300, "upload_time": "2020-03-01T20:14:15", "upload_time_iso_8601": "2020-03-01T20:14:15.525467Z", "url": "https://files.pythonhosted.org/packages/aa/7d/5e9edb7c043c083d5f6a37a01166921eacc34dd45b955eeab91e61605c47/reedsolo-1.4.6-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "555dcc1c6fac8e7db85f8568ac324d08", "sha256": "97244798e1814d40a4d7bdd52a365fa64a78a0dfffa8b550697a2869b8b03cbe"}, "downloads": -1, "filename": "reedsolo-1.4.6.tar.gz", "has_sig": false, "md5_digest": "555dcc1c6fac8e7db85f8568ac324d08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255268, "upload_time": "2020-03-01T20:14:17", "upload_time_iso_8601": "2020-03-01T20:14:17.860997Z", "url": "https://files.pythonhosted.org/packages/2a/8d/6291ea540c741ad1970c964672acc54b673fe6f74cfa246570396b730154/reedsolo-1.4.6.tar.gz", "yanked": false}], "1.4.8": [{"comment_text": "", "digests": {"md5": "36192752dcf995dd1998733612a2dad3", "sha256": "fa94147c7addce7783030ba01425bc091a8d26356d86e9969dead33c07f90039"}, "downloads": -1, "filename": "reedsolo-1.4.8-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "36192752dcf995dd1998733612a2dad3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 181265, "upload_time": "2020-03-01T21:09:42", "upload_time_iso_8601": "2020-03-01T21:09:42.291225Z", "url": "https://files.pythonhosted.org/packages/7e/c5/90c0ad78eb17cce2e1607ff3ece8308b3017dfe49234ff2b273cef4830ba/reedsolo-1.4.8-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ea92d24ad374f02ed9e35f58809affc", "sha256": "1207b93906804cc7b6193499ac6384dd25f53509be098cbacf45fae34aefffa4"}, "downloads": -1, "filename": "reedsolo-1.4.8.tar.gz", "has_sig": false, "md5_digest": "8ea92d24ad374f02ed9e35f58809affc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262387, "upload_time": "2020-03-01T21:09:45", "upload_time_iso_8601": "2020-03-01T21:09:45.191301Z", "url": "https://files.pythonhosted.org/packages/e0/f1/54dd402de9262237749e33425d20f4e6722999a8545da1c553482208eef6/reedsolo-1.4.8.tar.gz", "yanked": false}], "1.4.9": [{"comment_text": "", "digests": {"md5": "b3165361343a3ab578668b7ca3776d65", "sha256": "e69a85fe2a6af9d178feb77ca33a60f6d25628e7c8905b16a028e0ce737cb349"}, "downloads": -1, "filename": "reedsolo-1.4.9-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "b3165361343a3ab578668b7ca3776d65", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 181270, "upload_time": "2020-03-01T21:12:28", "upload_time_iso_8601": "2020-03-01T21:12:28.906081Z", "url": "https://files.pythonhosted.org/packages/44/a6/c5c971d0aa3824e923e65e64c556eade5058d11c842cdc975948a09b2669/reedsolo-1.4.9-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70fa38c70a1e6fed21c43c20c3f05fc3", "sha256": "4e3edbe98f110f253b56a3b2e886feb2897534c49f8116884d817384e9f0d778"}, "downloads": -1, "filename": "reedsolo-1.4.9.tar.gz", "has_sig": false, "md5_digest": "70fa38c70a1e6fed21c43c20c3f05fc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262397, "upload_time": "2020-03-01T21:12:31", "upload_time_iso_8601": "2020-03-01T21:12:31.088616Z", "url": "https://files.pythonhosted.org/packages/5a/68/d398f446f71f0db7fd848a8d74eb59178f1b12b817c944c6e0d5502e0d3c/reedsolo-1.4.9.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "6b0d5e65aa0b9f32231db64fe6021faa", "sha256": "7eeeb38d5ace05a009a71f7f5daf66500e6ec4f3130dffa36b7317c6d916646f"}, "downloads": -1, "filename": "reedsolo-1.5.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "6b0d5e65aa0b9f32231db64fe6021faa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 185513, "upload_time": "2020-03-02T10:23:04", "upload_time_iso_8601": "2020-03-02T10:23:04.786783Z", "url": "https://files.pythonhosted.org/packages/e8/9e/e3b6f4d71554784d6c020f0a0de6559a4185981e032dd0e2973f0aa1cac2/reedsolo-1.5.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45c764ba2359cfd994c23e856f8466c6", "sha256": "33d195bc4f8b37b322436e2caf2512997a6eefb66102158c033df9a84d14b54a"}, "downloads": -1, "filename": "reedsolo-1.5.0.tar.gz", "has_sig": false, "md5_digest": "45c764ba2359cfd994c23e856f8466c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 269086, "upload_time": "2020-03-02T10:23:07", "upload_time_iso_8601": "2020-03-02T10:23:07.275856Z", "url": "https://files.pythonhosted.org/packages/f7/c2/47aaaf8a43ece71ac9c25d08870b8998dc417f610aaa54f54a339b066b33/reedsolo-1.5.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "57e3e7c5388af2d1229313660c75d6c4", "sha256": "b875ef7414a14e63f55d4e0757a272fb4282495ec38e65ee3fe927972918a54a"}, "downloads": -1, "filename": "reedsolo-1.5.0.win-amd64-py3.7.exe", "has_sig": false, "md5_digest": "57e3e7c5388af2d1229313660c75d6c4", "packagetype": "bdist_wininst", "python_version": "3.7", "requires_python": null, "size": 787024, "upload_time": "2020-03-02T10:35:33", "upload_time_iso_8601": "2020-03-02T10:35:33.799181Z", "url": "https://files.pythonhosted.org/packages/9a/e6/d5a0c2d7000dd6272e346e7261fb41e9ae729304ed9447fdd81f256ceeb1/reedsolo-1.5.0.win-amd64-py3.7.exe", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "1387d1d7ed4bc569eb1295b0f8b4055a", "sha256": "e5be1247bf647170ea5ce52fd53cdaf2a59dac255039d6350360dedcebdb9861"}, "downloads": -1, "filename": "reedsolo-1.5.1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "1387d1d7ed4bc569eb1295b0f8b4055a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 185914, "upload_time": "2020-03-02T11:16:08", "upload_time_iso_8601": "2020-03-02T11:16:08.017038Z", "url": "https://files.pythonhosted.org/packages/ae/17/d0d1446900c591f19f9c09a6e508126f6612ce85657d01354501f0e66281/reedsolo-1.5.1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78e87e132ab9af1ba8b1553d349f7efe", "sha256": "a3338ac360400223013bfa9082113ce171dd12949e43bb9eeacac24173bbfca2"}, "downloads": -1, "filename": "reedsolo-1.5.1.tar.gz", "has_sig": false, "md5_digest": "78e87e132ab9af1ba8b1553d349f7efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270015, "upload_time": "2020-03-02T11:16:10", "upload_time_iso_8601": "2020-03-02T11:16:10.171852Z", "url": "https://files.pythonhosted.org/packages/68/f3/c5b6d252e70334d8613caf7b663454565451cae9f3da424e0be2ae7024e0/reedsolo-1.5.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1f82568a83b29efe75233645720cac9", "sha256": "f2294da2b632a326b90be865d27d10d9496c6c0c29a4af423adb258382c2864a"}, "downloads": -1, "filename": "reedsolo-1.5.1.win-amd64-py3.7.exe", "has_sig": false, "md5_digest": "b1f82568a83b29efe75233645720cac9", "packagetype": "bdist_wininst", "python_version": "3.7", "requires_python": null, "size": 788841, "upload_time": "2020-03-02T11:16:12", "upload_time_iso_8601": "2020-03-02T11:16:12.915002Z", "url": "https://files.pythonhosted.org/packages/a0/57/bd0a70b307e8a4393f740aafb0e27850405a2e58c72c2d1053e017c3c1ad/reedsolo-1.5.1.win-amd64-py3.7.exe", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "0890a771c46a0e03631122e9a3b6856f", "sha256": "dc9a5a505d36d6c2d012a5b8c60b08ddc2b119e50e0bd7f33cd18bac0ea74aae"}, "downloads": -1, "filename": "reedsolo-1.5.3-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "0890a771c46a0e03631122e9a3b6856f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 186249, "upload_time": "2020-05-04T15:40:58", "upload_time_iso_8601": "2020-05-04T15:40:58.129209Z", "url": "https://files.pythonhosted.org/packages/94/3d/5f39c14834a6843e2a8ca191782828756df4db23f0c347f03ed2b649899a/reedsolo-1.5.3-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01735928f56ee01faba7ea5da511c17f", "sha256": "82f02f94eccc3de3c641c55c415e469793c16cec171d7c2203dcffa2833196e0"}, "downloads": -1, "filename": "reedsolo-1.5.3.tar.gz", "has_sig": false, "md5_digest": "01735928f56ee01faba7ea5da511c17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 271097, "upload_time": "2020-05-04T15:41:00", "upload_time_iso_8601": "2020-05-04T15:41:00.015915Z", "url": "https://files.pythonhosted.org/packages/e3/5f/64bbef00d2b33593bae6082dac0112d7e233630ab419ab8ac34ee191d2d2/reedsolo-1.5.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0890a771c46a0e03631122e9a3b6856f", "sha256": "dc9a5a505d36d6c2d012a5b8c60b08ddc2b119e50e0bd7f33cd18bac0ea74aae"}, "downloads": -1, "filename": "reedsolo-1.5.3-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "0890a771c46a0e03631122e9a3b6856f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 186249, "upload_time": "2020-05-04T15:40:58", "upload_time_iso_8601": "2020-05-04T15:40:58.129209Z", "url": "https://files.pythonhosted.org/packages/94/3d/5f39c14834a6843e2a8ca191782828756df4db23f0c347f03ed2b649899a/reedsolo-1.5.3-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01735928f56ee01faba7ea5da511c17f", "sha256": "82f02f94eccc3de3c641c55c415e469793c16cec171d7c2203dcffa2833196e0"}, "downloads": -1, "filename": "reedsolo-1.5.3.tar.gz", "has_sig": false, "md5_digest": "01735928f56ee01faba7ea5da511c17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 271097, "upload_time": "2020-05-04T15:41:00", "upload_time_iso_8601": "2020-05-04T15:41:00.015915Z", "url": "https://files.pythonhosted.org/packages/e3/5f/64bbef00d2b33593bae6082dac0112d7e233630ab419ab8ac34ee191d2d2/reedsolo-1.5.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:29 2020"}