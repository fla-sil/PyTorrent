{"info": {"author": "Zhongming Qu", "author_email": "qzmfranklin@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "======\npitest\n======\n\n.. image:: https://travis-ci.org/qzmfranklin/pitest.svg?branch=master\n    :target: https://travis-ci.org/qzmfranklin/pitest\n    :alt: Build status\n\nAn object oriented testing framework.\n\n\nInstallation\n============\n\nFrom pip3::\n\n    $ pip3 install --upgrade rstcheck\n\nFrom source::\n\n    $ python3 setup.py --quiet install\n\nTests\n=====\n\nInstall the pitest package first, then::\n\n    $ cd unittests\n    $ python3 -m unittest\n\nUsage Examples\n=======================\n\n1. Write a test case:\n\n.. code-block:: python\n\n    import pitest\n\n    class MyTestCase(pitest.TestCaseBase):\n        # By default, test methods are methods whose names start with 'test_'. You\n        # can change the matching patterns by defining the 'test_patterns' class\n        # variable by uncommenting the following line:\n        #       test_patterns = [ 'mytest_*', 'yourtest_*' ]\n\n        # The start * means it matches anything, just like the command line glob.\n\n        # If test methods have inter-dependencies, i.e., certain tests must precede\n        # some other tests, you can define the dependencies using the\n        # 'internal_deps' class variable. Here is an example:\n        #       internal_deps = { 'test_foo1': [ 'test_bar1*', 'test_bar2*' ],\n        #                         'test_hel*lo': [ 'test_no', 'test_yes*' ],\n        #                       }\n\n        # If this test case depend on other test cases, you can specify their\n        # dependencies via the 'deps' class variable. Here is an example:\n        #       deps = [ 'MyTestCase1', 'MyTestCaseFoo*', ]\n\n        # When you reference other test cases, you do NOT need to import the files\n        # that define the referenced test cases. But if they cannot be found by the\n        # end of the day, error will occur.\n\n        def __init__(self[, *args[, **kwargs]]):\n            pass\n\n        # Run once before running all test methods.\n        def setup_instance(self[, *args[, **kwargs]]):\n            pass\n\n        # Run once after running all test methods.\n        def teardown_instance(self[, *args[, **kwargs]]):\n            pass\n\n        # Run once before running every single test method.\n        def setup(self[, *args[, **kwargs]]):\n            pass\n\n        # Run once after running every single test method.\n        def teardown(self[, *args[, **kwargs]]):\n            pass\n\n        # Actual test methods, names matching 'test_patterns'.\n        def test_foo_something(self[, *args[, **kwargs]]):\n            pass\n        def test_foo_something_else(self[, *args[, **kwargs]]):\n            pass\n        def test_bar_something(self[, *args[, **kwargs]]):\n            pass\n        def test_bar_something_else(self[, *args[, **kwargs]]):\n            pass\n\n2. Write argument file\n\n.. code-block:: python\n\n    import pitest\n\n    __pitest_main_default_args_name__ = 'my_args'\n\n    my_args = pitest.TestCaseArgs()\n    my_args.set_method_args('__init__',\n            args = ('Anndee', ),\n            kwargs = { 'kwarg0': 'KoolArg' })\n    my_args.set_method_args('test',\n            args = ('naathing', ),\n            kwargs = { 'kwarg1': 'at owl' })\n\n    my_args2 = pitest.TestCaseArgs()\n    my_args2.set_method_args('__init__',\n            args = ('Bashii', ),\n            kwargs = { 'kwarg0': 'KoolArg2' })\n    my_args2.set_method_args('test',\n            args = ('naathing', ),\n            kwargs = { 'kwarg1': 'at owlll' })\n\n3. Run the test cases\n\nDiscover tests::\n\n    $ python3 -m pitest discover (case | method | all)\n\nRun tests::\n\n    $ python3 -m pitest run (case | method) name\n\nScan given directory::\n\n    $ python3 -m pitest --start-dir some/dir ...\n\nRun tests with dynamic arguments::\n\n    $ python3 -m pitest run case MyTestCase --args-file my_args.py\n\nUse a non-default argument object in the file::\n\n    $ python3 -m pitest run case MyTestCase --args-file my_args.py \\\n                                            --args-name my_args2", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qzmfranklin/pitest", "keywords": "test,unittest", "license": "GPL3,LGPL", "maintainer": null, "maintainer_email": null, "name": "pitest", "package_url": "https://pypi.org/project/pitest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pitest/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/qzmfranklin/pitest"}, "release_url": "https://pypi.org/project/pitest/0.1/", "requires_dist": null, "requires_python": null, "summary": "An Object Oriented Testing Framework.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/qzmfranklin/pitest\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4000cfff8ac3ede44348aa4cd9fcaa04c19172c5/68747470733a2f2f7472617669732d63692e6f72672f717a6d6672616e6b6c696e2f7069746573742e7376673f6272616e63683d6d6173746572\"></a>\n<p>An object oriented testing framework.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From pip3:</p>\n<pre>$ pip3 install --upgrade rstcheck\n</pre>\n<p>From source:</p>\n<pre>$ python3 setup.py --quiet install\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Install the pitest package first, then:</p>\n<pre>$ cd unittests\n$ python3 -m unittest\n</pre>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage Examples</h2>\n<ol>\n<li>Write a test case:</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pitest</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">pitest</span><span class=\"o\">.</span><span class=\"n\">TestCaseBase</span><span class=\"p\">):</span>\n    <span class=\"c1\"># By default, test methods are methods whose names start with 'test_'. You</span>\n    <span class=\"c1\"># can change the matching patterns by defining the 'test_patterns' class</span>\n    <span class=\"c1\"># variable by uncommenting the following line:</span>\n    <span class=\"c1\">#       test_patterns = [ 'mytest_*', 'yourtest_*' ]</span>\n\n    <span class=\"c1\"># The start * means it matches anything, just like the command line glob.</span>\n\n    <span class=\"c1\"># If test methods have inter-dependencies, i.e., certain tests must precede</span>\n    <span class=\"c1\"># some other tests, you can define the dependencies using the</span>\n    <span class=\"c1\"># 'internal_deps' class variable. Here is an example:</span>\n    <span class=\"c1\">#       internal_deps = { 'test_foo1': [ 'test_bar1*', 'test_bar2*' ],</span>\n    <span class=\"c1\">#                         'test_hel*lo': [ 'test_no', 'test_yes*' ],</span>\n    <span class=\"c1\">#                       }</span>\n\n    <span class=\"c1\"># If this test case depend on other test cases, you can specify their</span>\n    <span class=\"c1\"># dependencies via the 'deps' class variable. Here is an example:</span>\n    <span class=\"c1\">#       deps = [ 'MyTestCase1', 'MyTestCaseFoo*', ]</span>\n\n    <span class=\"c1\"># When you reference other test cases, you do NOT need to import the files</span>\n    <span class=\"c1\"># that define the referenced test cases. But if they cannot be found by the</span>\n    <span class=\"c1\"># end of the day, error will occur.</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Run once before running all test methods.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setup_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Run once after running all test methods.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">teardown_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Run once before running every single test method.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Run once after running every single test method.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">teardown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Actual test methods, names matching 'test_patterns'.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_foo_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_foo_something_else</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_bar_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_bar_something_else</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">]]):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<ol>\n<li>Write argument file</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pitest</span>\n\n<span class=\"n\">__pitest_main_default_args_name__</span> <span class=\"o\">=</span> <span class=\"s1\">'my_args'</span>\n\n<span class=\"n\">my_args</span> <span class=\"o\">=</span> <span class=\"n\">pitest</span><span class=\"o\">.</span><span class=\"n\">TestCaseArgs</span><span class=\"p\">()</span>\n<span class=\"n\">my_args</span><span class=\"o\">.</span><span class=\"n\">set_method_args</span><span class=\"p\">(</span><span class=\"s1\">'__init__'</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'Anndee'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'kwarg0'</span><span class=\"p\">:</span> <span class=\"s1\">'KoolArg'</span> <span class=\"p\">})</span>\n<span class=\"n\">my_args</span><span class=\"o\">.</span><span class=\"n\">set_method_args</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'naathing'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'kwarg1'</span><span class=\"p\">:</span> <span class=\"s1\">'at owl'</span> <span class=\"p\">})</span>\n\n<span class=\"n\">my_args2</span> <span class=\"o\">=</span> <span class=\"n\">pitest</span><span class=\"o\">.</span><span class=\"n\">TestCaseArgs</span><span class=\"p\">()</span>\n<span class=\"n\">my_args2</span><span class=\"o\">.</span><span class=\"n\">set_method_args</span><span class=\"p\">(</span><span class=\"s1\">'__init__'</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'Bashii'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'kwarg0'</span><span class=\"p\">:</span> <span class=\"s1\">'KoolArg2'</span> <span class=\"p\">})</span>\n<span class=\"n\">my_args2</span><span class=\"o\">.</span><span class=\"n\">set_method_args</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'naathing'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'kwarg1'</span><span class=\"p\">:</span> <span class=\"s1\">'at owlll'</span> <span class=\"p\">})</span>\n</pre>\n<ol>\n<li>Run the test cases</li>\n</ol>\n<p>Discover tests:</p>\n<pre>$ python3 -m pitest discover (case | method | all)\n</pre>\n<p>Run tests:</p>\n<pre>$ python3 -m pitest run (case | method) name\n</pre>\n<p>Scan given directory:</p>\n<pre>$ python3 -m pitest --start-dir some/dir ...\n</pre>\n<p>Run tests with dynamic arguments:</p>\n<pre>$ python3 -m pitest run case MyTestCase --args-file my_args.py\n</pre>\n<p>Use a non-default argument object in the file:</p>\n<pre>$ python3 -m pitest run case MyTestCase --args-file my_args.py \\\n                                        --args-name my_args2\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2033194, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f4aa40f141c4d2e5d22cc92278c2775c", "sha256": "bcb6877a19ea6d834851476cf5a005cf4517a65896eb31a3bc5f44e47ab99cb5"}, "downloads": -1, "filename": "pitest-0.1.tar.gz", "has_sig": false, "md5_digest": "f4aa40f141c4d2e5d22cc92278c2775c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13694, "upload_time": "2016-03-29T00:46:59", "upload_time_iso_8601": "2016-03-29T00:46:59.814114Z", "url": "https://files.pythonhosted.org/packages/2c/c6/5afbe7e3dd3b62371d42423d104a5ae66548470a124fe12c44cff907d6bd/pitest-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4aa40f141c4d2e5d22cc92278c2775c", "sha256": "bcb6877a19ea6d834851476cf5a005cf4517a65896eb31a3bc5f44e47ab99cb5"}, "downloads": -1, "filename": "pitest-0.1.tar.gz", "has_sig": false, "md5_digest": "f4aa40f141c4d2e5d22cc92278c2775c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13694, "upload_time": "2016-03-29T00:46:59", "upload_time_iso_8601": "2016-03-29T00:46:59.814114Z", "url": "https://files.pythonhosted.org/packages/2c/c6/5afbe7e3dd3b62371d42423d104a5ae66548470a124fe12c44cff907d6bd/pitest-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:59 2020"}