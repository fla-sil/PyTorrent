{"info": {"author": "Christopher DeBoever", "author_email": "cdeboever3@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "cdpybio\n=======\n\nPython module with various submodules tailored to specific tools,\nanalyses, etc. that I perform across projects. Documentation below is\nonly an introduction, most functions are documented with docstrings.\n\nDependencies\n============\n\n-  Biopython\n-  HTSeq\n-  numpy\n-  pandas\n-  pybedtools\n-  pysam (v0.6 or greater)\n-  PyVCF\n-  py.test for testing\n\nSubmodules\n==========\n\n``bedtools``\n------------\n\nMethods for working with bed files. I make heavy use of pybedtools.\n\n``cghub``\n---------\n\nThis submodule contains some useful methods and classes for dealing with\ndata through CGHub. I'll go through the classes and methods.\n\n``GTFuseBam``\n~~~~~~~~~~~~~\n\nA ``GTFuseBam`` object is a single bam file from CGHub mounted with\nGTFuse. You can ``mount`` and ``unmount`` the bam file as you'd like.\n\n``ReadsFromIntervalsBam``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis object takes a GTFuseBam object and a set of intervals and obtains\nthe reads from those intervals in the CGHub bam file and writes them to\na local bam file.\n\n-  ``reads_from_intervals``: Obtain the reads from the given intervals.\n\n``ReadsFromIntervalsEngine``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is an engine that runs in the background and obtains reads from\nintervals for a given set of samples. The main process that runs the\nengine shares the thread with your python session but I use the\nmultiprocessing module to farm out different bam files to different\nthreads so you can obtain reads from multiple bam files simultaneously.\nThis class can be extended.\n\n``FLCVariantCallingEngine(ReadsFromIntervalsEngine)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis engine extends the ``ReadsFromIntervalsEngine`` and performs\nvariant calling after obtaining the reads. Currently implemented to work\nin the Frazer lab computing environment although it would be easy to\nchange for a different computing environment.\n\n``TumorNormalVariantCall``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nClass that wraps the results of a variant calling job for a tumor/normal\npair.\n\n``express``\n-----------\n\nThis submodule has some methods that are useful for dealing with the\noutput from the RNA-seq expression estimation tool eXpress.\n\n-  ``combine_express_output``: Combine multiple eXpress output files\n   into a single pandas dataframe. You can choose which column to\n   combine. You can also aggregate values by gene ID (eXpress estimates\n   transcript expression) if you provide a mapping from transcript IDs\n   to gene IDs. See ``gencode.make_transcript_gene_se``.\n\n``gencode``\n-----------\n\nFunctions for parsing the Gencode gene annotation into various files\nthat are easier to work with.\n\n-  ``make_transcript_gene_se``: Make a file with a simple mapping from\n   transcript IDs to gene IDs.\n-  ``make_gene_info_df``: Make a file indexed by gene ID that has some\n   simple information about each gene.\n-  ``make_splice_junction_df``: Make a file indexed by splice site that\n   has information about each splice site such as gene, strand,\n   acceptor, donor, etc.\n\n``general``\n-----------\n\nSome methods that are generally useful.\n\n``mutect``\n----------\n\nMethods for working with MuTect output.\n\n``pysamext``\n------------\n\nProvides extended functionality on top of pysam.\n\n``star``\n--------\n\n-  ``def read_sj_out_tab``: Read ``sj.out.tab`` file from STAR and parse\n   it.\n-  ``def read_external_annotation``: Read file with junctions from some\n   database. This does not have to be the same splice junction database\n   used with STAR. The file must have some specific columns (see\n   docstring). Compatible with output from the\n   ``gencode.make_splice_junction_df``.\n-  ``def combine_sj_out``: Combine SJ.out.tab files from STAR by\n   filtering based on coverage and comparing to an external annotation\n   to discover novel junctions.\n-  ``def make_logs_df``: Make pandas DataFrame from multiple STAR\n   Log.final.out files.\n\n``variants``\n------------\n\nUseful for tools for working with DNA variants.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/cdeboever3/cdpybio/tarball/0.0.7", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cdeboever3/cdpybio", "keywords": "bioinformatics", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "cdpybio", "package_url": "https://pypi.org/project/cdpybio/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cdpybio/", "project_urls": {"Download": "https://github.com/cdeboever3/cdpybio/tarball/0.0.7", "Homepage": "https://github.com/cdeboever3/cdpybio"}, "release_url": "https://pypi.org/project/cdpybio/0.0.7/", "requires_dist": null, "requires_python": null, "summary": "A collection of useful methods for working with various bioinformatics data, software output files, etc.", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cdpybio\">\n<h2>cdpybio</h2>\n<p>Python module with various submodules tailored to specific tools,\nanalyses, etc. that I perform across projects. Documentation below is\nonly an introduction, most functions are documented with docstrings.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Biopython</li>\n<li>HTSeq</li>\n<li>numpy</li>\n<li>pandas</li>\n<li>pybedtools</li>\n<li>pysam (v0.6 or greater)</li>\n<li>PyVCF</li>\n<li>py.test for testing</li>\n</ul>\n</div>\n<div id=\"submodules\">\n<h2>Submodules</h2>\n<div id=\"bedtools\">\n<h3><tt>bedtools</tt></h3>\n<p>Methods for working with bed files. I make heavy use of pybedtools.</p>\n</div>\n<div id=\"cghub\">\n<h3><tt>cghub</tt></h3>\n<p>This submodule contains some useful methods and classes for dealing with\ndata through CGHub. I\u2019ll go through the classes and methods.</p>\n<div id=\"gtfusebam\">\n<h4><tt>GTFuseBam</tt></h4>\n<p>A <tt>GTFuseBam</tt> object is a single bam file from CGHub mounted with\nGTFuse. You can <tt>mount</tt> and <tt>unmount</tt> the bam file as you\u2019d like.</p>\n</div>\n<div id=\"readsfromintervalsbam\">\n<h4><tt>ReadsFromIntervalsBam</tt></h4>\n<p>This object takes a GTFuseBam object and a set of intervals and obtains\nthe reads from those intervals in the CGHub bam file and writes them to\na local bam file.</p>\n<ul>\n<li><tt>reads_from_intervals</tt>: Obtain the reads from the given intervals.</li>\n</ul>\n</div>\n<div id=\"readsfromintervalsengine\">\n<h4><tt>ReadsFromIntervalsEngine</tt></h4>\n<p>This is an engine that runs in the background and obtains reads from\nintervals for a given set of samples. The main process that runs the\nengine shares the thread with your python session but I use the\nmultiprocessing module to farm out different bam files to different\nthreads so you can obtain reads from multiple bam files simultaneously.\nThis class can be extended.</p>\n</div>\n<div id=\"flcvariantcallingengine-readsfromintervalsengine\">\n<h4><tt>FLCVariantCallingEngine(ReadsFromIntervalsEngine)</tt></h4>\n<p>This engine extends the <tt>ReadsFromIntervalsEngine</tt> and performs\nvariant calling after obtaining the reads. Currently implemented to work\nin the Frazer lab computing environment although it would be easy to\nchange for a different computing environment.</p>\n</div>\n<div id=\"tumornormalvariantcall\">\n<h4><tt>TumorNormalVariantCall</tt></h4>\n<p>Class that wraps the results of a variant calling job for a tumor/normal\npair.</p>\n</div>\n</div>\n<div id=\"express\">\n<h3><tt>express</tt></h3>\n<p>This submodule has some methods that are useful for dealing with the\noutput from the RNA-seq expression estimation tool eXpress.</p>\n<ul>\n<li><tt>combine_express_output</tt>: Combine multiple eXpress output files\ninto a single pandas dataframe. You can choose which column to\ncombine. You can also aggregate values by gene ID (eXpress estimates\ntranscript expression) if you provide a mapping from transcript IDs\nto gene IDs. See <tt>gencode.make_transcript_gene_se</tt>.</li>\n</ul>\n</div>\n<div id=\"gencode\">\n<h3><tt>gencode</tt></h3>\n<p>Functions for parsing the Gencode gene annotation into various files\nthat are easier to work with.</p>\n<ul>\n<li><tt>make_transcript_gene_se</tt>: Make a file with a simple mapping from\ntranscript IDs to gene IDs.</li>\n<li><tt>make_gene_info_df</tt>: Make a file indexed by gene ID that has some\nsimple information about each gene.</li>\n<li><tt>make_splice_junction_df</tt>: Make a file indexed by splice site that\nhas information about each splice site such as gene, strand,\nacceptor, donor, etc.</li>\n</ul>\n</div>\n<div id=\"general\">\n<h3><tt>general</tt></h3>\n<p>Some methods that are generally useful.</p>\n</div>\n<div id=\"mutect\">\n<h3><tt>mutect</tt></h3>\n<p>Methods for working with MuTect output.</p>\n</div>\n<div id=\"pysamext\">\n<h3><tt>pysamext</tt></h3>\n<p>Provides extended functionality on top of pysam.</p>\n</div>\n<div id=\"star\">\n<h3><tt>star</tt></h3>\n<ul>\n<li><tt>def read_sj_out_tab</tt>: Read <tt>sj.out.tab</tt> file from STAR and parse\nit.</li>\n<li><tt>def read_external_annotation</tt>: Read file with junctions from some\ndatabase. This does not have to be the same splice junction database\nused with STAR. The file must have some specific columns (see\ndocstring). Compatible with output from the\n<tt>gencode.make_splice_junction_df</tt>.</li>\n<li><tt>def combine_sj_out</tt>: Combine SJ.out.tab files from STAR by\nfiltering based on coverage and comparing to an external annotation\nto discover novel junctions.</li>\n<li><tt>def make_logs_df</tt>: Make pandas DataFrame from multiple STAR\nLog.final.out files.</li>\n</ul>\n</div>\n<div id=\"variants\">\n<h3><tt>variants</tt></h3>\n<p>Useful for tools for working with DNA variants.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2047921, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "b6407ee436a27a69b12f30560e8a5705", "sha256": "a94236f68e35a8e6dc6bc5261bd83efba12634ce9dd65b7d508fe4872f9a6ca7"}, "downloads": -1, "filename": "cdpybio-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6407ee436a27a69b12f30560e8a5705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36647, "upload_time": "2015-11-13T20:42:19", "upload_time_iso_8601": "2015-11-13T20:42:19.632305Z", "url": "https://files.pythonhosted.org/packages/da/b3/0bc85f1ecafbf668ef82a45b42882bb5a6fddb1a508b3e48289eccb1795a/cdpybio-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "eabdb48fd927fa2429c86449bf6b7cc4", "sha256": "1f4d2000f28d9b0ef548a3a2730b46b2021c7d3f02af7b26bf3b33d4fc5ec66d"}, "downloads": -1, "filename": "cdpybio-0.0.3.tar.gz", "has_sig": false, "md5_digest": "eabdb48fd927fa2429c86449bf6b7cc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36640, "upload_time": "2015-11-13T20:54:58", "upload_time_iso_8601": "2015-11-13T20:54:58.598762Z", "url": "https://files.pythonhosted.org/packages/62/af/c5d23d95ec59f1c25342a7243dc3ba16f52d3c3cfb065cf9183f47b8ee72/cdpybio-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "bcbf71f2ef8ec0dd0ebdca5062ac6f73", "sha256": "599180cbe40255ded84774f1421c8c7b48a229f22ae7c210405495eaafc9b11e"}, "downloads": -1, "filename": "cdpybio-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bcbf71f2ef8ec0dd0ebdca5062ac6f73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36653, "upload_time": "2015-11-13T21:03:54", "upload_time_iso_8601": "2015-11-13T21:03:54.982765Z", "url": "https://files.pythonhosted.org/packages/9a/f2/a593c3bb9485653fcb056f11a49ef85259b1889d65d6127c59ca49ab2bd5/cdpybio-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "cd5b7a2977858f20ae78086dd21239e4", "sha256": "ebc6dccc9d4ceb72bd85a1783c0f7bf1ddcd0e2725d61c64d0c7be3db53843e0"}, "downloads": -1, "filename": "cdpybio-0.0.5.tar.gz", "has_sig": false, "md5_digest": "cd5b7a2977858f20ae78086dd21239e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36557, "upload_time": "2015-11-13T21:48:41", "upload_time_iso_8601": "2015-11-13T21:48:41.009702Z", "url": "https://files.pythonhosted.org/packages/79/75/42697711d7a4b6de6bc09ea56cb087e0a45f0fa0ccdf3d5c6e483bf26b2e/cdpybio-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "f533f967fd0ab67d442e4ffdd282eafc", "sha256": "d50eb6c2fb5a295ccb0e1d4fecb7c62315053ebb7c117dfa00232b46d223d75a"}, "downloads": -1, "filename": "cdpybio-0.0.6.tar.gz", "has_sig": false, "md5_digest": "f533f967fd0ab67d442e4ffdd282eafc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37831, "upload_time": "2015-11-13T22:16:31", "upload_time_iso_8601": "2015-11-13T22:16:31.539787Z", "url": "https://files.pythonhosted.org/packages/c7/12/e621a56272c2401640030733335a3efdd3719d7d7ebd8b48bd25c65c3cc6/cdpybio-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "82da448f1d04da3e7ecda4e21f276536", "sha256": "bd582e0e3b12eab743c6ea8ff18f6bb8cd3e9aadafa872ce99c4834ad6f4e4d2"}, "downloads": -1, "filename": "cdpybio-0.0.7.tar.gz", "has_sig": false, "md5_digest": "82da448f1d04da3e7ecda4e21f276536", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44330, "upload_time": "2016-04-05T20:46:35", "upload_time_iso_8601": "2016-04-05T20:46:35.219215Z", "url": "https://files.pythonhosted.org/packages/8c/2f/73ad5c2e904b9bdb56a00321d1eb2af3bb5fa7a1c9f2fe23d1317e9b99fc/cdpybio-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82da448f1d04da3e7ecda4e21f276536", "sha256": "bd582e0e3b12eab743c6ea8ff18f6bb8cd3e9aadafa872ce99c4834ad6f4e4d2"}, "downloads": -1, "filename": "cdpybio-0.0.7.tar.gz", "has_sig": false, "md5_digest": "82da448f1d04da3e7ecda4e21f276536", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44330, "upload_time": "2016-04-05T20:46:35", "upload_time_iso_8601": "2016-04-05T20:46:35.219215Z", "url": "https://files.pythonhosted.org/packages/8c/2f/73ad5c2e904b9bdb56a00321d1eb2af3bb5fa7a1c9f2fe23d1317e9b99fc/cdpybio-0.0.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:55 2020"}