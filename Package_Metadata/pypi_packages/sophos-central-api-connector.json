{"info": {"author": "Mark Lanczak-Faulds", "author_email": "mark.lanczak-faulds@sophos.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# sophos-central-api-connector\n[![Generic badge](https://img.shields.io/badge/Python-v3.7-blue.svg)](https://shields.io/)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Generic badge](https://img.shields.io/badge/version-0.1.0-green.svg)](https://shields.io/)\n\nPython library to gather alerts and endpoint data from your Sophos Central tenants\n\nSophos Central API Documentation: https://developer.sophos.com/\n\n## Getting Started\nThe below instructions will take you through obtaining a copy of the project and details on how to obtain an Sophos Central API key.\n\n### Prerequisites\nIn order to use the package you will require a valid API key from your Sophos Central tenant. To obtain a valid API key please reference the documentation here: https://developer.sophos.com/intro\n\n### Install\n```\npip3 install --user sophos_central_api_connector\n```\n\n## Basic Examples\n\n### Help\nTo get information on the CLI commands when using the `sophos_central_main.py` simply run:\n\n```\npython3 sophos_central_main.py --help\n```\n\n### Tenants List\nTo get a list of tenants:\n\n```\npython3 sophos_central_main.py --auth <auth_option> --get tenants\n```\n### Endpoint Information\n\nGathering the inventory information can be done for all of your tenants or one specific tenant. There are various methods on how this data can be presented. The output methods are stdout, json or sending the data to Splunk. More detailed example are covered under the Advanced Usage section.\n\nThere are various products which can utilise data from stdout such as running a script in Splunk and indexing the data dynamically. Also this can be used as a response in automation to provide further details on a systems health etc.\n\nThe syntax to use when requesting to get inventory is the following:\n```\npython3 sophos_central_main.py --auth <auth_option> --get inventory --output <output_option>\n```\n\n### Alert/Event Information\n\nTo gather alerts for your tenants you can pass the alerts option when running the --get parameter. Some additional options are available\nwhen gathering alerts above calling the inventory of machines:\n\n- --days\n- --poll_alerts (covered in the Advanced Usage section)\n- --reset (covered in the Advanced Usage section)\n\nAs with calling the inventory option, you can pull alerts for a specific tenant or all of the tenants. In addition you can specify the number of days of events you would like to pull back by using the days parameter.\n\nSophos Central holds event data for 90 days, so when calling the days parameter you can specifiy days as an integer from 1-90. If no days parameter is passed a default of 1 day is set. below is an example of passing the days parameter:\n```\npython3 sophos_central_main.py --auth <auth_option> --get alerts --days <integer: 1-90> --output <output_option>\n```\n## Configuration\nThe following configuration files can be changed to reflect your environment and also your needs.\n\n### sophos_central_api_config.py\nMajority of the variables contained in this config file are to remain static in order to maintain the correct functionality of the Sophos Central API Connector. However, there are two variables which can be changed if you would like default behaviour to be different.\n\n#### DEFAULT_OUTPUT\nThis variable is set to `stdout` so in the event that no output parameter is passed to the CLI then results will be returned to the console. You can change this to be another valid parameter value if desired.\n\n#### DEFAULT_DAYS\nThis variable is set to `1` in the event that no days parameter is passed in certain scenarios. This default is also used for the default number of days passed for polling alert events.\n\n### sophos_config.ini\n> #### **Important!**\n> Whilst you are able to set static API credentials in this configuration we strongly advise that this is only done for testing purposes.\n> Where possible use AWS Secrets Manager to store your credential id and token\n> Please reference the authnetication section under advanced usage to use the correct parameter\n\nYou can access your AWS secrets by configuring your details as below:\n- **secret_name:** \\<secret_name\\>\n- **region_name:** \\<aws_region\\>\n- **client_id_key:** \\<specified_key_name\\>\n- **client_secret_key:** \\<specified_key_name\\>\n\nThe page size configuration is the number of events you would like to appear per page when querying the Sophos Central API. There are maximum sizes which are checked during the execution of the connector. If these are left blank they will use the default page sizes as determined by the API\n\n### splunk_config.ini\nThis config is solely for users who are sending the events and inventory directly to Splunk. There are options for both static token information or there is also an option to use the AWS Secrets Manager. \n\n> #### **Important!**\n> We would recommend that the static entry is only used for testing purposes and the token is stored and accessed securely.\n> Please reference the authnetication section under advanced usage to use the correct parameter\n\n#### splunk_aws\nTo enable the use of the token from the AWS Secrets Manager set : `1`\n\nSetting this option to `0` will allow the use of the static token entry. The 'splunk_hec' section determines the correct settings to where to send the events to Splunk\n\n#### splunk_url\nThis is the URL to your Splunk instance: `http(s)://<your_splunk_url>:8088/services/collector`\n\nInformation on how to configure HEC (HTTP Event Collector) can be found at the following Splunk URL: https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector\n\n#### splunk_ack_enabled\nIf you have set Splunk Index Acknowledgements when creating your HEC token, you will need to set this value to '1'. If you have not set the indexer acknowledgements to `0`. This will ensure that the correct URL is used when sending events to Splunk.\n\n#### verify_ack_result\nThis is not currently in use\n\n#### channel\nIf you have the index acknowledgements checked in your HEC token you will need to provide a channel GUID. These can be anything you like as long as they are unique to your HEC token environment. Further information on setting the channel and enabling Index Acknowledgements\ncan be found on the Splunk website: https://docs.splunk.com/Documentation/Splunk/7.3.1/Data/AboutHECIDXAck\n\n#### ack_batch_size\nThis is not currently in use\n\n#### splunk_transform\nThis section of the config allows you to override the details for source, host and sourcetype when the events are sent to Splunk. If this setting is not set then it will use the data that is contained in the transforms file on the indexer. This is not able to override the index that the data is sent to.\n\n## Advanced Usage\n\n### Authentication\nThere are two options for authentication, the setting used here will be used for all areas of authentication, i.e both Sophos Central API and Splunk HEC token. As mentioned under the configuration section we recommend using the AWS Secrets Manager for storing these credentials. Only use the static credentials for testing purposes.\n\n#### Static Credentials\nTo specify using the static credentials which are in the \\*config.ini files you can use the following:\n`python3 sophos_central_main.py --auth static`\n\n#### AWS Secrets Manager\nTo specify using the AWS settings which are in the \\*config.ini files to retrieve the secrets and token you can use the following:\n`python3 sophos_central_main.py --auth aws`\n\n### Logging\nAll logging is done via the naitive python `logging` library. Valid logging levels are:\n\n- INFO\n- DEBUG\n- CRITICAL\n- WARNING\n- ERROR\n\nFor basic feedback set the logging level to `INFO`\n\n### Output Options\nThere are four output options available for the inventory, simply add one of the following after `--output`:\n- **stdout:** Print the information to the console.\n- **json:** Save the output of the request to a json file\n- **splunk:** This will send the data to Splunk with no changes made. This will apply the settings made in the transform files.\n- **splunk_trans:** Using this output will apply the information set in the splunk_config.ini for the host, source and sourcetype. This will overrun the settings in the transform files in Splunk but not the Index that the data should be sent to.\n\n### Polling Alert Information\nThe polling option is available for alert events. This is so you can gather alerts over a period of time and maintain a list of events in Splunk.\n\nThe correct syntax to poll for alert events is as follows:\n```\npython3 sophos_central_main.py --auth <auth_option> --get alerts --days <integer: 1-90> --poll_alerts --output <splunk or splunk_trans>\n```\nOn the initial run of this syntax the following files will be created:\n- poll_config.json\n- alert_ids.json\n\nThe poll_config.json maintains the results of the last poll attempt and also from when the next poll should get events from and to. Along with maintaining the state of the current run and logging whether any failures have occurred.\n\nWhen running the poll_alerts for a second time a new file will be generated called:\n- temp_alert_ids.json\n\nThis file maintains a list of events which have already been successfully sent to Splunk and will be removed from the alerts obtained from the Sophos Central API.\n\n### Resetting Polling\nIf you need to reset the polling and start re-pulling in events you can pass the reset parameter to initiate this. Along with the reset parameter you can also pass the days parameter in order to specify how many days should be pulled using the API. Syntax on how to pass this is as follows:\n\n```\npython3 sophos_central_main.py --auth <auth_option> --get alerts --days <integer: 1-90> --reset --poll_alerts --output <splunk or splunk_trans>\n```\n\nRunning this syntax will delete the files:\n- poll_config.json\n- alert_ids.json\n- temp_alert_ids.json\n\n## Structure\nBelow is the structure after installing through pip:\n```\nsophos_central_api_connector\n|   .gitignore\n|   LICENSE\n|   README.md\n|   requirements.txt\n|   setup.py\n|___sophos_central_api_connector\n|       sophos_central_api_auth.py\n|       sophos_central_api_awssecrets.py\n|       sophos_central_api_connector_utils.py\n|       sophos_central_api_get_data.py\n|       sophos_central_api_output.py\n|       sophos_central_api_polling.py\n|       sophos_central_api_tenants.py\n|       sophos_central_api_hec_splunk.py\n|       sophos_central_main.py\n|___config\n        sophos_central_api_config.py\n        sophos_config.ini\n        splunk_config.ini\n```\n\nBelow is the structure with all the files that are created through different mechanisms:\n```\nsophos_central_api_connector\n|   .gitignore\n|   LICENSE\n|   README.md\n|   requirements.txt\n|   setup.py\n|___sophos_central_api_connector\n|       sophos_central_api_auth.py\n|       sophos_central_api_awssecrets.py\n|       sophos_central_api_connector_utils.py\n|       sophos_central_api_get_data.py\n|       sophos_central_api_output.py\n|       sophos_central_api_polling.py\n|       sophos_central_api_tenants.py\n|       sophos_central_api_hec_splunk.py\n|       sophos_central_main.py\n|___config\n|       sophos_central_api_config.py\n|       sophos_config.ini\n|       splunk_config.ini\n|___logs\n|       failed_events.json\n|___output\n|   |___get_alerts\n|   |       <tenant_name>_<tenant_id>.json\n|   |       ...\n|   |___get_inventory\n|           <tenant_name>_<tenant_id>.json\n|           ...\n|___polling\n        poll_config.json\n        alert_ids.json\n        temp_alert_ids.json\n```\n\n## ToDo\n- [ ] Add ability to check Splunk HTTP Event Collector Acknowledgements\n- [ ] Improve logging, perhaps write to file\n- [ ] Improve polling failures\n- [ ] Improve retrying failed alert events\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sophos-cybersecurity/sophos-central-api-connector", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sophos-central-api-connector", "package_url": "https://pypi.org/project/sophos-central-api-connector/", "platform": "", "project_url": "https://pypi.org/project/sophos-central-api-connector/", "project_urls": {"Homepage": "https://github.com/sophos-cybersecurity/sophos-central-api-connector"}, "release_url": "https://pypi.org/project/sophos-central-api-connector/0.1.0/", "requires_dist": ["boto3 (==1.10.36)", "botocore (==1.13.36)", "certifi (==2019.11.28)", "chardet (==3.0.4)", "docutils (==0.15.2)", "idna (==2.8)", "jmespath (==0.9.4)", "python-dateutil (==2.8.1)", "requests (==2.22.0)", "s3transfer (==0.2.1)", "six (==1.13.0)", "urllib3 (==1.25.7)"], "requires_python": ">=3.6", "summary": "Sophos Central API Connector", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sophos-central-api-connector</h1>\n<p><a href=\"https://shields.io/\" rel=\"nofollow\"><img alt=\"Generic badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e977318fdc24b6f611d9df1f98e212d476106f8b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d76332e372d626c75652e737667\"></a>\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a>\n<a href=\"https://shields.io/\" rel=\"nofollow\"><img alt=\"Generic badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83c936a28a11f93e9b1bebff01a8a3b543f43a88/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d302e312e302d677265656e2e737667\"></a></p>\n<p>Python library to gather alerts and endpoint data from your Sophos Central tenants</p>\n<p>Sophos Central API Documentation: <a href=\"https://developer.sophos.com/\" rel=\"nofollow\">https://developer.sophos.com/</a></p>\n<h2>Getting Started</h2>\n<p>The below instructions will take you through obtaining a copy of the project and details on how to obtain an Sophos Central API key.</p>\n<h3>Prerequisites</h3>\n<p>In order to use the package you will require a valid API key from your Sophos Central tenant. To obtain a valid API key please reference the documentation here: <a href=\"https://developer.sophos.com/intro\" rel=\"nofollow\">https://developer.sophos.com/intro</a></p>\n<h3>Install</h3>\n<pre><code>pip3 install --user sophos_central_api_connector\n</code></pre>\n<h2>Basic Examples</h2>\n<h3>Help</h3>\n<p>To get information on the CLI commands when using the <code>sophos_central_main.py</code> simply run:</p>\n<pre><code>python3 sophos_central_main.py --help\n</code></pre>\n<h3>Tenants List</h3>\n<p>To get a list of tenants:</p>\n<pre><code>python3 sophos_central_main.py --auth &lt;auth_option&gt; --get tenants\n</code></pre>\n<h3>Endpoint Information</h3>\n<p>Gathering the inventory information can be done for all of your tenants or one specific tenant. There are various methods on how this data can be presented. The output methods are stdout, json or sending the data to Splunk. More detailed example are covered under the Advanced Usage section.</p>\n<p>There are various products which can utilise data from stdout such as running a script in Splunk and indexing the data dynamically. Also this can be used as a response in automation to provide further details on a systems health etc.</p>\n<p>The syntax to use when requesting to get inventory is the following:</p>\n<pre><code>python3 sophos_central_main.py --auth &lt;auth_option&gt; --get inventory --output &lt;output_option&gt;\n</code></pre>\n<h3>Alert/Event Information</h3>\n<p>To gather alerts for your tenants you can pass the alerts option when running the --get parameter. Some additional options are available\nwhen gathering alerts above calling the inventory of machines:</p>\n<ul>\n<li>--days</li>\n<li>--poll_alerts (covered in the Advanced Usage section)</li>\n<li>--reset (covered in the Advanced Usage section)</li>\n</ul>\n<p>As with calling the inventory option, you can pull alerts for a specific tenant or all of the tenants. In addition you can specify the number of days of events you would like to pull back by using the days parameter.</p>\n<p>Sophos Central holds event data for 90 days, so when calling the days parameter you can specifiy days as an integer from 1-90. If no days parameter is passed a default of 1 day is set. below is an example of passing the days parameter:</p>\n<pre><code>python3 sophos_central_main.py --auth &lt;auth_option&gt; --get alerts --days &lt;integer: 1-90&gt; --output &lt;output_option&gt;\n</code></pre>\n<h2>Configuration</h2>\n<p>The following configuration files can be changed to reflect your environment and also your needs.</p>\n<h3>sophos_central_api_config.py</h3>\n<p>Majority of the variables contained in this config file are to remain static in order to maintain the correct functionality of the Sophos Central API Connector. However, there are two variables which can be changed if you would like default behaviour to be different.</p>\n<h4>DEFAULT_OUTPUT</h4>\n<p>This variable is set to <code>stdout</code> so in the event that no output parameter is passed to the CLI then results will be returned to the console. You can change this to be another valid parameter value if desired.</p>\n<h4>DEFAULT_DAYS</h4>\n<p>This variable is set to <code>1</code> in the event that no days parameter is passed in certain scenarios. This default is also used for the default number of days passed for polling alert events.</p>\n<h3>sophos_config.ini</h3>\n<blockquote>\n<h4><strong>Important!</strong></h4>\n<p>Whilst you are able to set static API credentials in this configuration we strongly advise that this is only done for testing purposes.\nWhere possible use AWS Secrets Manager to store your credential id and token\nPlease reference the authnetication section under advanced usage to use the correct parameter</p>\n</blockquote>\n<p>You can access your AWS secrets by configuring your details as below:</p>\n<ul>\n<li><strong>secret_name:</strong> &lt;secret_name&gt;</li>\n<li><strong>region_name:</strong> &lt;aws_region&gt;</li>\n<li><strong>client_id_key:</strong> &lt;specified_key_name&gt;</li>\n<li><strong>client_secret_key:</strong> &lt;specified_key_name&gt;</li>\n</ul>\n<p>The page size configuration is the number of events you would like to appear per page when querying the Sophos Central API. There are maximum sizes which are checked during the execution of the connector. If these are left blank they will use the default page sizes as determined by the API</p>\n<h3>splunk_config.ini</h3>\n<p>This config is solely for users who are sending the events and inventory directly to Splunk. There are options for both static token information or there is also an option to use the AWS Secrets Manager.</p>\n<blockquote>\n<h4><strong>Important!</strong></h4>\n<p>We would recommend that the static entry is only used for testing purposes and the token is stored and accessed securely.\nPlease reference the authnetication section under advanced usage to use the correct parameter</p>\n</blockquote>\n<h4>splunk_aws</h4>\n<p>To enable the use of the token from the AWS Secrets Manager set : <code>1</code></p>\n<p>Setting this option to <code>0</code> will allow the use of the static token entry. The 'splunk_hec' section determines the correct settings to where to send the events to Splunk</p>\n<h4>splunk_url</h4>\n<p>This is the URL to your Splunk instance: <code>http(s)://&lt;your_splunk_url&gt;:8088/services/collector</code></p>\n<p>Information on how to configure HEC (HTTP Event Collector) can be found at the following Splunk URL: <a href=\"https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector\" rel=\"nofollow\">https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector</a></p>\n<h4>splunk_ack_enabled</h4>\n<p>If you have set Splunk Index Acknowledgements when creating your HEC token, you will need to set this value to '1'. If you have not set the indexer acknowledgements to <code>0</code>. This will ensure that the correct URL is used when sending events to Splunk.</p>\n<h4>verify_ack_result</h4>\n<p>This is not currently in use</p>\n<h4>channel</h4>\n<p>If you have the index acknowledgements checked in your HEC token you will need to provide a channel GUID. These can be anything you like as long as they are unique to your HEC token environment. Further information on setting the channel and enabling Index Acknowledgements\ncan be found on the Splunk website: <a href=\"https://docs.splunk.com/Documentation/Splunk/7.3.1/Data/AboutHECIDXAck\" rel=\"nofollow\">https://docs.splunk.com/Documentation/Splunk/7.3.1/Data/AboutHECIDXAck</a></p>\n<h4>ack_batch_size</h4>\n<p>This is not currently in use</p>\n<h4>splunk_transform</h4>\n<p>This section of the config allows you to override the details for source, host and sourcetype when the events are sent to Splunk. If this setting is not set then it will use the data that is contained in the transforms file on the indexer. This is not able to override the index that the data is sent to.</p>\n<h2>Advanced Usage</h2>\n<h3>Authentication</h3>\n<p>There are two options for authentication, the setting used here will be used for all areas of authentication, i.e both Sophos Central API and Splunk HEC token. As mentioned under the configuration section we recommend using the AWS Secrets Manager for storing these credentials. Only use the static credentials for testing purposes.</p>\n<h4>Static Credentials</h4>\n<p>To specify using the static credentials which are in the *config.ini files you can use the following:\n<code>python3 sophos_central_main.py --auth static</code></p>\n<h4>AWS Secrets Manager</h4>\n<p>To specify using the AWS settings which are in the *config.ini files to retrieve the secrets and token you can use the following:\n<code>python3 sophos_central_main.py --auth aws</code></p>\n<h3>Logging</h3>\n<p>All logging is done via the naitive python <code>logging</code> library. Valid logging levels are:</p>\n<ul>\n<li>INFO</li>\n<li>DEBUG</li>\n<li>CRITICAL</li>\n<li>WARNING</li>\n<li>ERROR</li>\n</ul>\n<p>For basic feedback set the logging level to <code>INFO</code></p>\n<h3>Output Options</h3>\n<p>There are four output options available for the inventory, simply add one of the following after <code>--output</code>:</p>\n<ul>\n<li><strong>stdout:</strong> Print the information to the console.</li>\n<li><strong>json:</strong> Save the output of the request to a json file</li>\n<li><strong>splunk:</strong> This will send the data to Splunk with no changes made. This will apply the settings made in the transform files.</li>\n<li><strong>splunk_trans:</strong> Using this output will apply the information set in the splunk_config.ini for the host, source and sourcetype. This will overrun the settings in the transform files in Splunk but not the Index that the data should be sent to.</li>\n</ul>\n<h3>Polling Alert Information</h3>\n<p>The polling option is available for alert events. This is so you can gather alerts over a period of time and maintain a list of events in Splunk.</p>\n<p>The correct syntax to poll for alert events is as follows:</p>\n<pre><code>python3 sophos_central_main.py --auth &lt;auth_option&gt; --get alerts --days &lt;integer: 1-90&gt; --poll_alerts --output &lt;splunk or splunk_trans&gt;\n</code></pre>\n<p>On the initial run of this syntax the following files will be created:</p>\n<ul>\n<li>poll_config.json</li>\n<li>alert_ids.json</li>\n</ul>\n<p>The poll_config.json maintains the results of the last poll attempt and also from when the next poll should get events from and to. Along with maintaining the state of the current run and logging whether any failures have occurred.</p>\n<p>When running the poll_alerts for a second time a new file will be generated called:</p>\n<ul>\n<li>temp_alert_ids.json</li>\n</ul>\n<p>This file maintains a list of events which have already been successfully sent to Splunk and will be removed from the alerts obtained from the Sophos Central API.</p>\n<h3>Resetting Polling</h3>\n<p>If you need to reset the polling and start re-pulling in events you can pass the reset parameter to initiate this. Along with the reset parameter you can also pass the days parameter in order to specify how many days should be pulled using the API. Syntax on how to pass this is as follows:</p>\n<pre><code>python3 sophos_central_main.py --auth &lt;auth_option&gt; --get alerts --days &lt;integer: 1-90&gt; --reset --poll_alerts --output &lt;splunk or splunk_trans&gt;\n</code></pre>\n<p>Running this syntax will delete the files:</p>\n<ul>\n<li>poll_config.json</li>\n<li>alert_ids.json</li>\n<li>temp_alert_ids.json</li>\n</ul>\n<h2>Structure</h2>\n<p>Below is the structure after installing through pip:</p>\n<pre><code>sophos_central_api_connector\n|   .gitignore\n|   LICENSE\n|   README.md\n|   requirements.txt\n|   setup.py\n|___sophos_central_api_connector\n|       sophos_central_api_auth.py\n|       sophos_central_api_awssecrets.py\n|       sophos_central_api_connector_utils.py\n|       sophos_central_api_get_data.py\n|       sophos_central_api_output.py\n|       sophos_central_api_polling.py\n|       sophos_central_api_tenants.py\n|       sophos_central_api_hec_splunk.py\n|       sophos_central_main.py\n|___config\n        sophos_central_api_config.py\n        sophos_config.ini\n        splunk_config.ini\n</code></pre>\n<p>Below is the structure with all the files that are created through different mechanisms:</p>\n<pre><code>sophos_central_api_connector\n|   .gitignore\n|   LICENSE\n|   README.md\n|   requirements.txt\n|   setup.py\n|___sophos_central_api_connector\n|       sophos_central_api_auth.py\n|       sophos_central_api_awssecrets.py\n|       sophos_central_api_connector_utils.py\n|       sophos_central_api_get_data.py\n|       sophos_central_api_output.py\n|       sophos_central_api_polling.py\n|       sophos_central_api_tenants.py\n|       sophos_central_api_hec_splunk.py\n|       sophos_central_main.py\n|___config\n|       sophos_central_api_config.py\n|       sophos_config.ini\n|       splunk_config.ini\n|___logs\n|       failed_events.json\n|___output\n|   |___get_alerts\n|   |       &lt;tenant_name&gt;_&lt;tenant_id&gt;.json\n|   |       ...\n|   |___get_inventory\n|           &lt;tenant_name&gt;_&lt;tenant_id&gt;.json\n|           ...\n|___polling\n        poll_config.json\n        alert_ids.json\n        temp_alert_ids.json\n</code></pre>\n<h2>ToDo</h2>\n<ul>\n<li>[ ] Add ability to check Splunk HTTP Event Collector Acknowledgements</li>\n<li>[ ] Improve logging, perhaps write to file</li>\n<li>[ ] Improve polling failures</li>\n<li>[ ] Improve retrying failed alert events</li>\n</ul>\n\n          </div>"}, "last_serial": 6310737, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ece321983baf61a98780a76e993c818f", "sha256": "c0ce4656aca571b6e66cbb55f04e6375a6626ef9a71ddc0279f000d6e0a683a5"}, "downloads": -1, "filename": "sophos_central_api_connector-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ece321983baf61a98780a76e993c818f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42964, "upload_time": "2019-12-16T13:11:13", "upload_time_iso_8601": "2019-12-16T13:11:13.938131Z", "url": "https://files.pythonhosted.org/packages/b2/af/f6d48b019aa05e37984b74a98ee957ff91234176a5ebcc1da9f4a0983119/sophos_central_api_connector-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1051687d518657aaa36b0ab6f158349", "sha256": "a14907277b2274874c051b810095f02876e01dd8a2f530c6ac97b447fb7a5b82"}, "downloads": -1, "filename": "sophos_central_api_connector-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b1051687d518657aaa36b0ab6f158349", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41184, "upload_time": "2019-12-16T13:11:16", "upload_time_iso_8601": "2019-12-16T13:11:16.826780Z", "url": "https://files.pythonhosted.org/packages/1a/1e/39ea27ed87d85c384291375528fd785e93a420448a4d8192e246b38083a8/sophos_central_api_connector-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ece321983baf61a98780a76e993c818f", "sha256": "c0ce4656aca571b6e66cbb55f04e6375a6626ef9a71ddc0279f000d6e0a683a5"}, "downloads": -1, "filename": "sophos_central_api_connector-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ece321983baf61a98780a76e993c818f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42964, "upload_time": "2019-12-16T13:11:13", "upload_time_iso_8601": "2019-12-16T13:11:13.938131Z", "url": "https://files.pythonhosted.org/packages/b2/af/f6d48b019aa05e37984b74a98ee957ff91234176a5ebcc1da9f4a0983119/sophos_central_api_connector-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1051687d518657aaa36b0ab6f158349", "sha256": "a14907277b2274874c051b810095f02876e01dd8a2f530c6ac97b447fb7a5b82"}, "downloads": -1, "filename": "sophos_central_api_connector-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b1051687d518657aaa36b0ab6f158349", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41184, "upload_time": "2019-12-16T13:11:16", "upload_time_iso_8601": "2019-12-16T13:11:16.826780Z", "url": "https://files.pythonhosted.org/packages/1a/1e/39ea27ed87d85c384291375528fd785e93a420448a4d8192e246b38083a8/sophos_central_api_connector-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:33 2020"}