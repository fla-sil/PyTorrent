{"info": {"author": "Alex Marandon", "author_email": "contact@alexmarandon.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3"], "description": "==================\ndjango-audiotracks\n==================\n\nA Django_ app to publish audio tracks.\n\n.. image:: https://pypip.in/v/django-audiotracks/badge.png\n        :target: https://pypi.python.org/pypi/django-audiotracks\n\n.. image:: https://pypip.in/d/django-audiotracks/badge.png\n        :target: https://pypi.python.org/pypi/django-audiotracks\n\n.. image:: https://travis-ci.org/amarandon/django-audiotracks.png?branch=master\n    :target: https://travis-ci.org/amarandon/django-audiotracks\n\n.. image:: https://coveralls.io/repos/amarandon/django-audiotracks/badge.png?branch=master\n    :target: https://coveralls.io/r/amarandon/django-audiotracks\n\nIntroduction\n~~~~~~~~~~~~\n\ndjango-audiotracks is a simple Django_ app that allows your users to publish\naudio tracks in various formats (Ogg Vorbis, Flac, MP3, WAV). It ships with a\ndefault ``Track`` model, a set of views, default templates, podcast feeds and\nsensible default URL configuration.  It uses mutagen_ to extract metadata from\naudio files.  PIL is required to process images that can be attached to tracks.  \n\nDefault templates include the audio player from MediaElement.js_. I've added\nsome custom code for listing pages so that when a track ends playing, the next\none starts playing automatically.\n\n\nInstallation\n~~~~~~~~~~~~\n\n\nUsing PyPi\n__________\n\nYou can install django-audiotracks from PyPI using pip::\n\n    $ pip install django-audiotracks\n\n\nFrom GitHub\n___________\n\nClone the repository with::\n\n    $ git clone git://github.com/amarandon/django-audiotracks.git\n\nThen install the ``audiotracks`` package in your Python path. A ``setup.py`` script is provided. You\ncan use it with a command such as::\n\n    $ cd django-audiotracks\n    $ python setup.py install\n\nOr if you wish to modify the code::\n\n    $ python setup.py develop\n\nRun the example project\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you get django-audiotracks from GitHub, an example project styled with\nTwitter Bootstrap is provided with the source code. You can run it like this::\n\n    $ cd <django-audiotracks_source_dir>/example_project/\n    $ python manage.py syncdb      # Create initial user at this stage\n    $ python manage.py runserver\n\nLog in and start uploading tracks.\n\n\nAdd ``audiotracks`` to your app\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEdit ``settings.py`` and add ``audiotracks`` to your list of\n``INSTALLED_APPS``. Then synchronize your database with::\n\n    $ python manage.py syncdb\n\nEdit your ROOT_URLCONF_ and add a piece of code similar to::\n\n    urlpatterns += patterns('',\n        # Here we mount the app under /music. Feel free to use something else\n        url(\"^music\", include(\"audiotracks.urls\")),\n        # Some URLs require a Django username\n        url(\"^(?P<username>[\\w\\._-]+)/music\", include(\"audiotracks.urls\")),\n    )\n\nVisit the URL ``/music/upload`` to upload your first track.\n\nViews\n~~~~~\n\nUpload\n______\n\n\n* View function: ``upload_track``\n* Default URL: <app_mount_point>/upload\n\nThis view allows authenticated users to upload a new audio file.  Metadata is\nextracted from the file and used to prefill track attributes. Users get\nredirected to the edit view.\n\nEdit\n____\n\n* View function: ``edit_track``\n* Default URL: <app_mount_point>/edit/<id>\n\nAllow users to edit track attributes such as title, artist name, etc., upload an\nimage to attach to the track or change the audio file. Modified metadata\nis stored back into the audio file itself if the format supports it (eg. it won't\nwork with a WAV file).\n\nDisplay\n_______\n\n* View function: ``track_detail``\n* URL: <app_mount_point_containing_username>/track/<slug>\n\nDisplay track. The URL pattern must capture a ``username`` argument, it will be\nused in the query to select the track. For example, if the app is mounted using\nthe pattern ``\"^(?P<username>[\\w\\._-]+)/music\"``, a URL such as\n/bob/music/track/love-forever will look for the track which slug is love-forever\nand has been uploaded by bob. A user who is logged in and owns the track can see\nlinks to the edit page for this track. \n\nDelete\n______\n\n* View function: ``confirm_delete`` \n* Default URL: <app_mount_point>/confirm_delete/<id>\n\nThis is a confirmation page before deletion. Link to this page if you want to\nprovide a link to delete a track.\n\n* View function: ``delete_track`` \n* Default URL: <app_mount_point>/delete (takes id as POST a param)\n\nThis view takes a track id as a POST parameter and delete the corresponding track.\n\nUser tracks listing\n___________________\n\n* View function: ``user_index``\n* Default URL: <app_mount_point_containing_username>/\n\nIf the app is mounted with a pattern containing a username such as\n``\"^(?P<username>[\\w\\._-]+)/music\"``, a URL such as /bob/music will display a\nlist of tracks uploaded by bob.\n\nLatest tracks listing\n_____________________\n\n* View function: ``latest_tracks``\n* Default URL: <app_mount_point>/\n\nShow latest tracks by all users.\n\n\nPodcast feeds\n_____________\n\n* View function ``feeds.choose_feed``\n* Default URL: <app_mount_point>/feed and <app_mount_point_containing_username>/feed\n\nChoose user feed or global feed depending on whether or not URL contains a\n``username`` parameter\n\n\nM3U playlists\n_____________\n\n* View function ``views.m3u``\n* Default URLs: <app_mount_point>/m3u and <app_mount_point_containing_username>/m3u\n\nServe an M3U_ playlist file.\n\nConfiguration\n~~~~~~~~~~~~~\n\nAUDIOTRACKS_MODEL\n_________________\n\nDefault: ``audiotracks.Track`` (string)\n\nIf the default ``Track`` model doesn't satisfy your needs, you can define your\nown track model that inherits from ``audiotracks.models.AbstractTrack``. For\ninstance if you wish to add tagging you might define a model like this::\n\n   class MyTrack(AbstractTrack):\n       tags = TagField(_(\"Tags\"))\n\nUse the ``AUDIOTRACKS_MODEL`` setting to tell django-audiotracks about your\nmodel, using the convention ``<app_name>.<model_class_name>``. So if your model\nis called ``MyTrack`` and is located withing the app ``myapp``, use this\nsetting::\n\n    AUDIOTRACKS_MODEL = 'myapp.MyTrack'\n\n\nAUDIOTRACKS_PODCAST_LIMIT\n_________________________\n\nDefault: ``10`` (integer)\n\nUse this setting to specify how many tracks podcast feeds should contain.\n\n\nAUDIOTRACKS_PER_PAGE\n____________________\n\nDefault: ``10`` (integer)\n\nUse this setting to specify how many tracks to display per listing page.\n\n\n.. _`Django`: http://djangoproject.com\n.. _`mutagen`: http://code.google.com/p/mutagen/\n.. _`ROOT_URLCONF`: http://docs.djangoproject.com/en/dev/ref/settings/#std:setting-ROOT_URLCONF\n.. _M3U: https://en.wikipedia.org/wiki/M3U\n.. _MediaElement.js: http://mediaelementjs.com/", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amarandon/django-audiotracks", "keywords": "django audio sound", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-audiotracks", "package_url": "https://pypi.org/project/django-audiotracks/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-audiotracks/", "project_urls": {"Homepage": "https://github.com/amarandon/django-audiotracks"}, "release_url": "https://pypi.org/project/django-audiotracks/0.2.4/", "requires_dist": null, "requires_python": null, "summary": "A pluggable Django app to publish audio tracks", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A <a href=\"http://djangoproject.com\" rel=\"nofollow\">Django</a> app to publish audio tracks.</p>\n<a href=\"https://pypi.python.org/pypi/django-audiotracks\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/django-audiotracks/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f49d8b06ebab1c691f856c94548bf2f5799eb1c9/68747470733a2f2f70797069702e696e2f762f646a616e676f2d617564696f747261636b732f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/django-audiotracks\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/django-audiotracks/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a9b0ebd14d11ec1ba1f88fbb481b6557bc3a60f/68747470733a2f2f70797069702e696e2f642f646a616e676f2d617564696f747261636b732f62616467652e706e67\"></a>\n<a href=\"https://travis-ci.org/amarandon/django-audiotracks\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/amarandon/django-audiotracks.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/616f0b794c62cd59501c26040c350999117b84fa/68747470733a2f2f7472617669732d63692e6f72672f616d6172616e646f6e2f646a616e676f2d617564696f747261636b732e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/amarandon/django-audiotracks\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/amarandon/django-audiotracks/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85ea23d54e7b44c408617306df438cbc198492d4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616d6172616e646f6e2f646a616e676f2d617564696f747261636b732f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>django-audiotracks is a simple <a href=\"http://djangoproject.com\" rel=\"nofollow\">Django</a> app that allows your users to publish\naudio tracks in various formats (Ogg Vorbis, Flac, MP3, WAV). It ships with a\ndefault <tt>Track</tt> model, a set of views, default templates, podcast feeds and\nsensible default URL configuration.  It uses <a href=\"http://code.google.com/p/mutagen/\" rel=\"nofollow\">mutagen</a> to extract metadata from\naudio files.  PIL is required to process images that can be attached to tracks.</p>\n<p>Default templates include the audio player from <a href=\"http://mediaelementjs.com/\" rel=\"nofollow\">MediaElement.js</a>. I\u2019ve added\nsome custom code for listing pages so that when a track ends playing, the next\none starts playing automatically.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"using-pypi\">\n<h3>Using PyPi</h3>\n<p>You can install django-audiotracks from PyPI using pip:</p>\n<pre>$ pip install django-audiotracks\n</pre>\n</div>\n<div id=\"from-github\">\n<h3>From GitHub</h3>\n<p>Clone the repository with:</p>\n<pre>$ git clone git://github.com/amarandon/django-audiotracks.git\n</pre>\n<p>Then install the <tt>audiotracks</tt> package in your Python path. A <tt>setup.py</tt> script is provided. You\ncan use it with a command such as:</p>\n<pre>$ cd django-audiotracks\n$ python setup.py install\n</pre>\n<p>Or if you wish to modify the code:</p>\n<pre>$ python setup.py develop\n</pre>\n</div>\n</div>\n<div id=\"run-the-example-project\">\n<h2>Run the example project</h2>\n<p>If you get django-audiotracks from GitHub, an example project styled with\nTwitter Bootstrap is provided with the source code. You can run it like this:</p>\n<pre>$ cd &lt;django-audiotracks_source_dir&gt;/example_project/\n$ python manage.py syncdb      # Create initial user at this stage\n$ python manage.py runserver\n</pre>\n<p>Log in and start uploading tracks.</p>\n</div>\n<div id=\"add-audiotracks-to-your-app\">\n<h2>Add <tt>audiotracks</tt> to your app</h2>\n<p>Edit <tt>settings.py</tt> and add <tt>audiotracks</tt> to your list of\n<tt>INSTALLED_APPS</tt>. Then synchronize your database with:</p>\n<pre>$ python manage.py syncdb\n</pre>\n<p>Edit your <a href=\"http://docs.djangoproject.com/en/dev/ref/settings/#std:setting-ROOT_URLCONF\" rel=\"nofollow\">ROOT_URLCONF</a> and add a piece of code similar to:</p>\n<pre>urlpatterns += patterns('',\n    # Here we mount the app under /music. Feel free to use something else\n    url(\"^music\", include(\"audiotracks.urls\")),\n    # Some URLs require a Django username\n    url(\"^(?P&lt;username&gt;[\\w\\._-]+)/music\", include(\"audiotracks.urls\")),\n)\n</pre>\n<p>Visit the URL <tt>/music/upload</tt> to upload your first track.</p>\n</div>\n<div id=\"views\">\n<h2>Views</h2>\n<div id=\"upload\">\n<h3>Upload</h3>\n<ul>\n<li>View function: <tt>upload_track</tt></li>\n<li>Default URL: &lt;app_mount_point&gt;/upload</li>\n</ul>\n<p>This view allows authenticated users to upload a new audio file.  Metadata is\nextracted from the file and used to prefill track attributes. Users get\nredirected to the edit view.</p>\n</div>\n<div id=\"edit\">\n<h3>Edit</h3>\n<ul>\n<li>View function: <tt>edit_track</tt></li>\n<li>Default URL: &lt;app_mount_point&gt;/edit/&lt;id&gt;</li>\n</ul>\n<p>Allow users to edit track attributes such as title, artist name, etc., upload an\nimage to attach to the track or change the audio file. Modified metadata\nis stored back into the audio file itself if the format supports it (eg. it won\u2019t\nwork with a WAV file).</p>\n</div>\n<div id=\"display\">\n<h3>Display</h3>\n<ul>\n<li>View function: <tt>track_detail</tt></li>\n<li>URL: &lt;app_mount_point_containing_username&gt;/track/&lt;slug&gt;</li>\n</ul>\n<p>Display track. The URL pattern must capture a <tt>username</tt> argument, it will be\nused in the query to select the track. For example, if the app is mounted using\nthe pattern <tt><span class=\"pre\">\"^(?P&lt;username&gt;[\\w\\._-]+)/music\"</span></tt>, a URL such as\n/bob/music/track/love-forever will look for the track which slug is love-forever\nand has been uploaded by bob. A user who is logged in and owns the track can see\nlinks to the edit page for this track.</p>\n</div>\n<div id=\"delete\">\n<h3>Delete</h3>\n<ul>\n<li>View function: <tt>confirm_delete</tt></li>\n<li>Default URL: &lt;app_mount_point&gt;/confirm_delete/&lt;id&gt;</li>\n</ul>\n<p>This is a confirmation page before deletion. Link to this page if you want to\nprovide a link to delete a track.</p>\n<ul>\n<li>View function: <tt>delete_track</tt></li>\n<li>Default URL: &lt;app_mount_point&gt;/delete (takes id as POST a param)</li>\n</ul>\n<p>This view takes a track id as a POST parameter and delete the corresponding track.</p>\n</div>\n<div id=\"user-tracks-listing\">\n<h3>User tracks listing</h3>\n<ul>\n<li>View function: <tt>user_index</tt></li>\n<li>Default URL: &lt;app_mount_point_containing_username&gt;/</li>\n</ul>\n<p>If the app is mounted with a pattern containing a username such as\n<tt><span class=\"pre\">\"^(?P&lt;username&gt;[\\w\\._-]+)/music\"</span></tt>, a URL such as /bob/music will display a\nlist of tracks uploaded by bob.</p>\n</div>\n<div id=\"latest-tracks-listing\">\n<h3>Latest tracks listing</h3>\n<ul>\n<li>View function: <tt>latest_tracks</tt></li>\n<li>Default URL: &lt;app_mount_point&gt;/</li>\n</ul>\n<p>Show latest tracks by all users.</p>\n</div>\n<div id=\"podcast-feeds\">\n<h3>Podcast feeds</h3>\n<ul>\n<li>View function <tt>feeds.choose_feed</tt></li>\n<li>Default URL: &lt;app_mount_point&gt;/feed and &lt;app_mount_point_containing_username&gt;/feed</li>\n</ul>\n<p>Choose user feed or global feed depending on whether or not URL contains a\n<tt>username</tt> parameter</p>\n</div>\n<div id=\"m3u-playlists\">\n<h3>M3U playlists</h3>\n<ul>\n<li>View function <tt>views.m3u</tt></li>\n<li>Default URLs: &lt;app_mount_point&gt;/m3u and &lt;app_mount_point_containing_username&gt;/m3u</li>\n</ul>\n<p>Serve an <a href=\"https://en.wikipedia.org/wiki/M3U\" rel=\"nofollow\">M3U</a> playlist file.</p>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"audiotracks-model\">\n<h3>AUDIOTRACKS_MODEL</h3>\n<p>Default: <tt>audiotracks.Track</tt> (string)</p>\n<p>If the default <tt>Track</tt> model doesn\u2019t satisfy your needs, you can define your\nown track model that inherits from <tt>audiotracks.models.AbstractTrack</tt>. For\ninstance if you wish to add tagging you might define a model like this:</p>\n<pre>class MyTrack(AbstractTrack):\n    tags = TagField(_(\"Tags\"))\n</pre>\n<p>Use the <tt>AUDIOTRACKS_MODEL</tt> setting to tell django-audiotracks about your\nmodel, using the convention <tt><span class=\"pre\">&lt;app_name&gt;.&lt;model_class_name&gt;</span></tt>. So if your model\nis called <tt>MyTrack</tt> and is located withing the app <tt>myapp</tt>, use this\nsetting:</p>\n<pre>AUDIOTRACKS_MODEL = 'myapp.MyTrack'\n</pre>\n</div>\n<div id=\"audiotracks-podcast-limit\">\n<h3>AUDIOTRACKS_PODCAST_LIMIT</h3>\n<p>Default: <tt>10</tt> (integer)</p>\n<p>Use this setting to specify how many tracks podcast feeds should contain.</p>\n</div>\n<div id=\"audiotracks-per-page\">\n<h3>AUDIOTRACKS_PER_PAGE</h3>\n<p>Default: <tt>10</tt> (integer)</p>\n<p>Use this setting to specify how many tracks to display per listing page.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1269844, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0ff49bf76d8b5cb9fe8cb56e5dd2dd94", "sha256": "66980b8c75f5bb4752d2770b40f33f5ef54a57406ce623ffc5ea23edb5899b8d"}, "downloads": -1, "filename": "django-audiotracks-0.1.tar.gz", "has_sig": false, "md5_digest": "0ff49bf76d8b5cb9fe8cb56e5dd2dd94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17791, "upload_time": "2012-02-21T12:34:16", "upload_time_iso_8601": "2012-02-21T12:34:16.844242Z", "url": "https://files.pythonhosted.org/packages/5f/86/7b15d9e43b69fca82acd23f01fc8fde29365bb73b22f01803970bacab817/django-audiotracks-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b8fd98a37412fba3cf2fcbe4cfc92d58", "sha256": "3127b5c9ed9f621d61d15ec7daecb5e60811b849fb8f401002f424ccc980ed59"}, "downloads": -1, "filename": "django-audiotracks-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b8fd98a37412fba3cf2fcbe4cfc92d58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17870, "upload_time": "2012-05-19T13:34:55", "upload_time_iso_8601": "2012-05-19T13:34:55.122175Z", "url": "https://files.pythonhosted.org/packages/3d/0a/1b1584865622a5ebc190bbf8acdaa13ec7a8dc8b742a9e0c7ce8b6fa3fec/django-audiotracks-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c2cd6efba8e59440b830867500dfb140", "sha256": "8bb1872f5caa3af82fe1064aee431cb97cd1c9ce712bf2e8ec85ca150be2596b"}, "downloads": -1, "filename": "django-audiotracks-0.2.tar.gz", "has_sig": false, "md5_digest": "c2cd6efba8e59440b830867500dfb140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136430, "upload_time": "2012-05-25T22:06:03", "upload_time_iso_8601": "2012-05-25T22:06:03.432562Z", "url": "https://files.pythonhosted.org/packages/3d/e1/6afe153a3a9dd47643657fff9e6fd7b46dca4849843fafcde55f7bc035ad/django-audiotracks-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "98bd725b633cb37f9739ab335d6f6290", "sha256": "f4b55a420da993f8c2701c3bfb2c41404b658a80ab89b9fe486b91cb5900aa40"}, "downloads": -1, "filename": "django-audiotracks-0.2.1.tar.gz", "has_sig": false, "md5_digest": "98bd725b633cb37f9739ab335d6f6290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136240, "upload_time": "2012-05-25T22:08:03", "upload_time_iso_8601": "2012-05-25T22:08:03.715516Z", "url": "https://files.pythonhosted.org/packages/df/2a/54c924c24efe7ba2f2b4c0ba5a847379aef5ab4bb5cb75ab84536468467a/django-audiotracks-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "bff364a8bb039afc08d0b0606c082175", "sha256": "555a414e80d4c5c15935211058b9bc744c55e0373e682c94c6dac1df982332dd"}, "downloads": -1, "filename": "django-audiotracks-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bff364a8bb039afc08d0b0606c082175", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135941, "upload_time": "2013-04-08T20:22:14", "upload_time_iso_8601": "2013-04-08T20:22:14.610169Z", "url": "https://files.pythonhosted.org/packages/76/7d/9abcce1f01e72855136be31ff7588630ec12e24518d6b5d433e1fc4a9a2a/django-audiotracks-0.2.2.tar.gz", "yanked": false}], "0.2.3": [], "0.2.4": [{"comment_text": "", "digests": {"md5": "139cf891b9c5c3b51a483a61e4134e95", "sha256": "63eb4f176ef58bbe13a80f53167ed80f6ea161e8d38e39c68acf179acfce13bc"}, "downloads": -1, "filename": "django-audiotracks-0.2.4.tar.gz", "has_sig": false, "md5_digest": "139cf891b9c5c3b51a483a61e4134e95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133524, "upload_time": "2014-10-14T11:40:15", "upload_time_iso_8601": "2014-10-14T11:40:15.599350Z", "url": "https://files.pythonhosted.org/packages/7e/b7/f7e48f6747960923b5141b3aaa3b836f0cf330e006092d12af1a96ff3c65/django-audiotracks-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "139cf891b9c5c3b51a483a61e4134e95", "sha256": "63eb4f176ef58bbe13a80f53167ed80f6ea161e8d38e39c68acf179acfce13bc"}, "downloads": -1, "filename": "django-audiotracks-0.2.4.tar.gz", "has_sig": false, "md5_digest": "139cf891b9c5c3b51a483a61e4134e95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133524, "upload_time": "2014-10-14T11:40:15", "upload_time_iso_8601": "2014-10-14T11:40:15.599350Z", "url": "https://files.pythonhosted.org/packages/7e/b7/f7e48f6747960923b5141b3aaa3b836f0cf330e006092d12af1a96ff3c65/django-audiotracks-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:35 2020"}