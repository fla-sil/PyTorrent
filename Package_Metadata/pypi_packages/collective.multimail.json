{"info": {"author": "Adam Terrey", "author_email": "software@pretaweb.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Plone", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. contents::\n\n.. image:: https://secure.travis-ci.org/collective/collective.multimail.png\n    :target: http://travis-ci.org/collective/collective.multimail\n\nIntroduction\n============\n\nAllows you to use more than one mailhost. Email is filtered by rules which\ndetermine which mailhost to send a particular email to. Each rule can apply\nregular expressions to email headers such as \"to\", \"from\" and \"subject\".\nScripts or views can be configured in place of a mailhost to allow custom\nbehaviour.\n\nPotential uses include:\n\n- using different SMTP servers depending on the sender;\n- expanding special email addresses into multiple send calls;\n- sending via an external API such as twitter;\n- adding additional headers or altering the text of standard Plone emails.\n\nFor example, if you have a rule chain::\n\n    - header-match: {to: 'allsubscribers@notarealdomain'}\n      action: 'send and stop'\n      mailhost: '/sendtoall'\n\n    # Catch-all rule, uses the patched MailHost object.\n    - action: 'send and stop'\n      mailhost: 'default'\n\nand you have a Python Script ``sendtoall``::\n\n    def sendtoall(messageText, mto=None, mfrom=None, subject=None, encode=None, immediate=False, charset='utf8', msg_type=None):\n        for email in context.getSubscribers():\n            context.MailHost.send(messageText, email, mfrom, subject, encode, immediate, charset, msg_type)\n\nYou can use the email address ``allsubscribers@notarealdomain`` in contentrules or\nother places in Plone to deliver an email to a database of subscribers.\n\nDetails\n=======\n\nEither install via Generic Setup or by adding in the ZMI. Once a MultiMailHost\nobject is placed in the same folder as a normal MailHost object, a monkeypatch\nto MailHost will allow MultiMail to handle all email sending.\n\nRule definition\n---------------\n\nA Rule Chain is a YAML list of rule definitions.\nA Rule definition can contain:\n\nheader-match\n  A dictionary of regular expressions for headers such as 'to', 'from'.\n\naction\n  Either 'send and continue', 'send and stop' or 'stop'\n\nmailhost\n  A traversable path to a IMailHost object or callable. Callables need to support\n  the arguments (messageText, email, mfrom, subject, encode, immediate, charset, msg_type).\n  The path is relative to the MultiMailHost and paths starting with / start from the Zope root.\n\nRules are evaluated top to bottom.\n\nRules are set via the ZMI.\n\n``default`` is a special mailhost which uses the orginal mailhost object unfiltered. If\nyou want to resend an email and have it also filtered then use ``/MailHost``.\n\nTODO\n====\n\n- [ ] Test with PloneFormGen\n- [ ] Handle matching when email is sent as text including headers (like PFG)\n- [ ] Ability to disable monkeypatch so can be used standalone\n- [ ] Security around traverse to script\n\n\n\n\nContributors\n============\n\n\n- Adam Terrey, Original Author\n- Dylan Jay\n- Ivan Teoh\n\nChangelog\n=========\n\n\n1.0a6 (2014-01-17)\n------------------\n- Switched to monkey patching to solve problems of being overwritten\n  (djay)\n- Allow normal python scripts of views to be used.\n  (djay)\n- Fix issue when called from PloneFormGen or via acquisition\n  (ivanteoh)\n- Add test for matching rules\n  (ivanteoh)\n\n1.0a4 (2013-05-29)\n------------------\n- First release\n  (aterrey)\n\n\n1.0a1 (unreleased)\n---------------------------\n\n- Initial version\n  (aterrey)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/collective.multimail", "keywords": "", "license": "gpl", "maintainer": null, "maintainer_email": null, "name": "collective.multimail", "package_url": "https://pypi.org/project/collective.multimail/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.multimail/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/collective.multimail"}, "release_url": "https://pypi.org/project/collective.multimail/1.0a6/", "requires_dist": null, "requires_python": null, "summary": "Zope MailHost which routs mail to other MailHosts", "version": "1.0a6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id1\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#details\" id=\"id2\" rel=\"nofollow\">Details</a><ul>\n<li><a href=\"#rule-definition\" id=\"id3\" rel=\"nofollow\">Rule definition</a></li>\n</ul>\n</li>\n<li><a href=\"#todo\" id=\"id4\" rel=\"nofollow\">TODO</a></li>\n<li><a href=\"#contributors\" id=\"id5\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#changelog\" id=\"id6\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#a6-2014-01-17\" id=\"id7\" rel=\"nofollow\">1.0a6 (2014-01-17)</a></li>\n<li><a href=\"#a4-2013-05-29\" id=\"id8\" rel=\"nofollow\">1.0a4 (2013-05-29)</a></li>\n<li><a href=\"#a1-unreleased\" id=\"id9\" rel=\"nofollow\">1.0a1 (unreleased)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<a href=\"http://travis-ci.org/collective/collective.multimail\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/collective/collective.multimail.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/625941e64285956373e4be68c984e5a2087a134d/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f636f6c6c6563746976652f636f6c6c6563746976652e6d756c74696d61696c2e706e67\"></a>\n<div id=\"introduction\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Introduction</a></h2>\n<p>Allows you to use more than one mailhost. Email is filtered by rules which\ndetermine which mailhost to send a particular email to. Each rule can apply\nregular expressions to email headers such as \u201cto\u201d, \u201cfrom\u201d and \u201csubject\u201d.\nScripts or views can be configured in place of a mailhost to allow custom\nbehaviour.</p>\n<p>Potential uses include:</p>\n<ul>\n<li>using different SMTP servers depending on the sender;</li>\n<li>expanding special email addresses into multiple send calls;</li>\n<li>sending via an external API such as twitter;</li>\n<li>adding additional headers or altering the text of standard Plone emails.</li>\n</ul>\n<p>For example, if you have a rule chain:</p>\n<pre>- header-match: {to: 'allsubscribers@notarealdomain'}\n  action: 'send and stop'\n  mailhost: '/sendtoall'\n\n# Catch-all rule, uses the patched MailHost object.\n- action: 'send and stop'\n  mailhost: 'default'\n</pre>\n<p>and you have a Python Script <tt>sendtoall</tt>:</p>\n<pre>def sendtoall(messageText, mto=None, mfrom=None, subject=None, encode=None, immediate=False, charset='utf8', msg_type=None):\n    for email in context.getSubscribers():\n        context.MailHost.send(messageText, email, mfrom, subject, encode, immediate, charset, msg_type)\n</pre>\n<p>You can use the email address <tt>allsubscribers@notarealdomain</tt> in contentrules or\nother places in Plone to deliver an email to a database of subscribers.</p>\n</div>\n<div id=\"details\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Details</a></h2>\n<p>Either install via Generic Setup or by adding in the ZMI. Once a MultiMailHost\nobject is placed in the same folder as a normal MailHost object, a monkeypatch\nto MailHost will allow MultiMail to handle all email sending.</p>\n<div id=\"rule-definition\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Rule definition</a></h3>\n<p>A Rule Chain is a YAML list of rule definitions.\nA Rule definition can contain:</p>\n<dl>\n<dt>header-match</dt>\n<dd>A dictionary of regular expressions for headers such as \u2018to\u2019, \u2018from\u2019.</dd>\n<dt>action</dt>\n<dd>Either \u2018send and continue\u2019, \u2018send and stop\u2019 or \u2018stop\u2019</dd>\n<dt>mailhost</dt>\n<dd>A traversable path to a IMailHost object or callable. Callables need to support\nthe arguments (messageText, email, mfrom, subject, encode, immediate, charset, msg_type).\nThe path is relative to the MultiMailHost and paths starting with / start from the Zope root.</dd>\n</dl>\n<p>Rules are evaluated top to bottom.</p>\n<p>Rules are set via the ZMI.</p>\n<p><tt>default</tt> is a special mailhost which uses the orginal mailhost object unfiltered. If\nyou want to resend an email and have it also filtered then use <tt>/MailHost</tt>.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2><a href=\"#id4\" rel=\"nofollow\">TODO</a></h2>\n<ul>\n<li>[ ] Test with PloneFormGen</li>\n<li>[ ] Handle matching when email is sent as text including headers (like PFG)</li>\n<li>[ ] Ability to disable monkeypatch so can be used standalone</li>\n<li>[ ] Security around traverse to script</li>\n</ul>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Contributors</a></h2>\n<ul>\n<li>Adam Terrey, Original Author</li>\n<li>Dylan Jay</li>\n<li>Ivan Teoh</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"a6-2014-01-17\">\n<h3><a href=\"#id7\" rel=\"nofollow\">1.0a6 (2014-01-17)</a></h3>\n<ul>\n<li>Switched to monkey patching to solve problems of being overwritten\n(djay)</li>\n<li>Allow normal python scripts of views to be used.\n(djay)</li>\n<li>Fix issue when called from PloneFormGen or via acquisition\n(ivanteoh)</li>\n<li>Add test for matching rules\n(ivanteoh)</li>\n</ul>\n</div>\n<div id=\"a4-2013-05-29\">\n<h3><a href=\"#id8\" rel=\"nofollow\">1.0a4 (2013-05-29)</a></h3>\n<ul>\n<li>First release\n(aterrey)</li>\n</ul>\n</div>\n<div id=\"a1-unreleased\">\n<h3><a href=\"#id9\" rel=\"nofollow\">1.0a1 (unreleased)</a></h3>\n<ul>\n<li>Initial version\n(aterrey)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4706119, "releases": {"1.0a4": [{"comment_text": "", "digests": {"md5": "3a35e7d5b6e40d82d19e2401692462ea", "sha256": "0d0e1ee25aa40c5e706a10cdc5b0301c63b8de627403108a8c375ca5cc2fa48c"}, "downloads": -1, "filename": "collective.multimail-1.0a4.zip", "has_sig": false, "md5_digest": "3a35e7d5b6e40d82d19e2401692462ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46446, "upload_time": "2013-05-29T05:48:18", "upload_time_iso_8601": "2013-05-29T05:48:18.017318Z", "url": "https://files.pythonhosted.org/packages/e7/08/7a08ad4a5c72d220cb8aebf9f433e35a7504093c09f2518ee3bf17474a84/collective.multimail-1.0a4.zip", "yanked": false}], "1.0a6": [{"comment_text": "", "digests": {"md5": "570c76a56441b33df3f92dceaa7f56c6", "sha256": "984502b838893784a817f8760c80e1bc56c21cfbb3c121424e8580f5977860d8"}, "downloads": -1, "filename": "collective.multimail-1.0a6.tar.gz", "has_sig": false, "md5_digest": "570c76a56441b33df3f92dceaa7f56c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25683, "upload_time": "2014-01-17T03:59:26", "upload_time_iso_8601": "2014-01-17T03:59:26.378127Z", "url": "https://files.pythonhosted.org/packages/05/b4/035d92d2104ea822c672aa749d32687b329be7547ca0cca479b41456aa9d/collective.multimail-1.0a6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "570c76a56441b33df3f92dceaa7f56c6", "sha256": "984502b838893784a817f8760c80e1bc56c21cfbb3c121424e8580f5977860d8"}, "downloads": -1, "filename": "collective.multimail-1.0a6.tar.gz", "has_sig": false, "md5_digest": "570c76a56441b33df3f92dceaa7f56c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25683, "upload_time": "2014-01-17T03:59:26", "upload_time_iso_8601": "2014-01-17T03:59:26.378127Z", "url": "https://files.pythonhosted.org/packages/05/b4/035d92d2104ea822c672aa749d32687b329be7547ca0cca479b41456aa9d/collective.multimail-1.0a6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:06 2020"}