{"info": {"author": "Damien Drix", "author_email": "damien.drix+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: IPython"], "description": "callipy: call IPython notebooks with arguments\n==============================================\n\nDependencies\n------------\n\n-  ``runipy``: https://github.com/paulgb/runipy\n-  ``IPython`` (tested with IPython 2.3.0)\n\nInstallation\n------------\n\n::\n\n    pip install callipy\n\nSimple Usage\n------------\n\nLet's create a notebook called ``notebook.ipynb``, containing the\nfollowing cell:\n\n::\n\n    y = 2 * x\n\nNow let's call this notebook from another session with a value for ``x``\nand get the result ``y``:\n\n::\n\n    >>> import callipy\n    >>> callipy.call_notebook(\"notebook.ipynb\", x=2).y\n    4\n\nHow it works\n------------\n\nFirst the keyword arguments given to ``call_notebook`` are injected into\nthe notebook's namespace and ``runipy`` is used to execute all of its\ncells:\n\n::\n\n    >>> result = callipy.call_notebook(\"notebook.ipynb\", x=2)\n    >>> result\n    <callipy.NotebookResult at 0x106b92f10>\n\nAfter running the notebook, the value of any variable in the notebook's\nnamespace can be read using attribute or dict notation:\n\n::\n\n    >>> result.y\n    4\n    >>> result['y']\n    4\n\nNote: arguments and output values must be pickleable.\n\nFinally, the notebook object itself can be accessed as\n``result.notebook``. See https://github.com/paulgb/runipy for examples\nof things you can do with the notebook object.\n\nDefault values and validation\n-----------------------------\n\nThat's all good and well, but we have a slight problem: if we try to run\nthe target notebook on its own, it will complain about ``x`` not being\ndefined.\n\nThe solution is to declare the parameters and their default value at the\nbeginning of ``notebook.ipynb``:\n\n::\n\n    %load_ext callipy\n    %param x 5\n\nNow we can run the notebook from the browser, or call it without\narguments, and it will use the default value for every missing argument:\n\n::\n\n    >>> callipy.call_notebook(\"notebook.ipynb\").y\n    10\n\nWhen more than one value is given, the parameter behaves as an\nenumerated type and the first value is the default value:\n\n::\n\n    %param mode \"simple\", \"advanced\"\n\nIf the notebook is called with a value that was not declared, an error\nwill be raised:\n\n::\n\n    >>> callipy.call_notebook(\"notebook.ipynb\", mode=\"wrong\")\n    ValueError: Invalid value 'wrong' for parameter mode: \"simple\", \"advanced\"\n\nYou can customise this behaviour by giving as the default value an\nobject ``mydefault`` that supports the following:\n\n-  ``mydefault[0]``: returns the default value\n-  ``x in mydefault``: tests whether ``x`` is allowed\n\nNote that a lone string is treated as an atomic value, not as an\nenumeration of characters:\n\n::\n\n    %param a \"test\" # the default value is 'test'\n    %param b list(\"test\") # the default value is 't'\n\nFinally, a notebook can be queried for the parameters it declares:\n\n::\n\n    >>> callipy.get_notebook_params(\"notebook.ipynb\")\n    {'x': 5, 'mode': (\"simple\", \"advanced\")}\n\nCaveat: to extract this information, ``callipy`` must execute the\nnotebook. What if this takes time or produces side-effects? To alleviate\nthe problem, the instruction ``%params_done`` can be placed in the\nnotebook:\n\n::\n\n    %param x 5\n    %param mode \"simple\", \"advanced\"\n    %params_done\n\nThen when calling ``get_notebook_params()`` anything after this cell\nwill be ignored.\n\nAcknowledgments\n---------------\n\nBased on the good work by **@paulgb**: https://github.com/paulgb/runipy\n\nAny reference to a famous statue is purely coincidental.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/damiendr/callipy", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "callipy", "package_url": "https://pypi.org/project/callipy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/callipy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/damiendr/callipy"}, "release_url": "https://pypi.org/project/callipy/0.3/", "requires_dist": null, "requires_python": null, "summary": "Calling IPython notebooks with arguments", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><tt>runipy</tt>: <a href=\"https://github.com/paulgb/runipy\" rel=\"nofollow\">https://github.com/paulgb/runipy</a></li>\n<li><tt>IPython</tt> (tested with IPython 2.3.0)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install callipy\n</pre>\n</div>\n<div id=\"simple-usage\">\n<h2>Simple Usage</h2>\n<p>Let\u2019s create a notebook called <tt>notebook.ipynb</tt>, containing the\nfollowing cell:</p>\n<pre>y = 2 * x\n</pre>\n<p>Now let\u2019s call this notebook from another session with a value for <tt>x</tt>\nand get the result <tt>y</tt>:</p>\n<pre>&gt;&gt;&gt; import callipy\n&gt;&gt;&gt; callipy.call_notebook(\"notebook.ipynb\", x=2).y\n4\n</pre>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>First the keyword arguments given to <tt>call_notebook</tt> are injected into\nthe notebook\u2019s namespace and <tt>runipy</tt> is used to execute all of its\ncells:</p>\n<pre>&gt;&gt;&gt; result = callipy.call_notebook(\"notebook.ipynb\", x=2)\n&gt;&gt;&gt; result\n&lt;callipy.NotebookResult at 0x106b92f10&gt;\n</pre>\n<p>After running the notebook, the value of any variable in the notebook\u2019s\nnamespace can be read using attribute or dict notation:</p>\n<pre>&gt;&gt;&gt; result.y\n4\n&gt;&gt;&gt; result['y']\n4\n</pre>\n<p>Note: arguments and output values must be pickleable.</p>\n<p>Finally, the notebook object itself can be accessed as\n<tt>result.notebook</tt>. See <a href=\"https://github.com/paulgb/runipy\" rel=\"nofollow\">https://github.com/paulgb/runipy</a> for examples\nof things you can do with the notebook object.</p>\n</div>\n<div id=\"default-values-and-validation\">\n<h2>Default values and validation</h2>\n<p>That\u2019s all good and well, but we have a slight problem: if we try to run\nthe target notebook on its own, it will complain about <tt>x</tt> not being\ndefined.</p>\n<p>The solution is to declare the parameters and their default value at the\nbeginning of <tt>notebook.ipynb</tt>:</p>\n<pre>%load_ext callipy\n%param x 5\n</pre>\n<p>Now we can run the notebook from the browser, or call it without\narguments, and it will use the default value for every missing argument:</p>\n<pre>&gt;&gt;&gt; callipy.call_notebook(\"notebook.ipynb\").y\n10\n</pre>\n<p>When more than one value is given, the parameter behaves as an\nenumerated type and the first value is the default value:</p>\n<pre>%param mode \"simple\", \"advanced\"\n</pre>\n<p>If the notebook is called with a value that was not declared, an error\nwill be raised:</p>\n<pre>&gt;&gt;&gt; callipy.call_notebook(\"notebook.ipynb\", mode=\"wrong\")\nValueError: Invalid value 'wrong' for parameter mode: \"simple\", \"advanced\"\n</pre>\n<p>You can customise this behaviour by giving as the default value an\nobject <tt>mydefault</tt> that supports the following:</p>\n<ul>\n<li><tt>mydefault[0]</tt>: returns the default value</li>\n<li><tt>x in mydefault</tt>: tests whether <tt>x</tt> is allowed</li>\n</ul>\n<p>Note that a lone string is treated as an atomic value, not as an\nenumeration of characters:</p>\n<pre>%param a \"test\" # the default value is 'test'\n%param b list(\"test\") # the default value is 't'\n</pre>\n<p>Finally, a notebook can be queried for the parameters it declares:</p>\n<pre>&gt;&gt;&gt; callipy.get_notebook_params(\"notebook.ipynb\")\n{'x': 5, 'mode': (\"simple\", \"advanced\")}\n</pre>\n<p>Caveat: to extract this information, <tt>callipy</tt> must execute the\nnotebook. What if this takes time or produces side-effects? To alleviate\nthe problem, the instruction <tt>%params_done</tt> can be placed in the\nnotebook:</p>\n<pre>%param x 5\n%param mode \"simple\", \"advanced\"\n%params_done\n</pre>\n<p>Then when calling <tt>get_notebook_params()</tt> anything after this cell\nwill be ignored.</p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<p>Based on the good work by <strong>@paulgb</strong>: <a href=\"https://github.com/paulgb/runipy\" rel=\"nofollow\">https://github.com/paulgb/runipy</a></p>\n<p>Any reference to a famous statue is purely coincidental.</p>\n</div>\n\n          </div>"}, "last_serial": 1300957, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "49513215eff329561a232e33d63bdd78", "sha256": "a7c11757db06a696385a2f16e8475295efacb701642e1dd007ca77695dbfbc4f"}, "downloads": -1, "filename": "callipy-0.3.tar.gz", "has_sig": false, "md5_digest": "49513215eff329561a232e33d63bdd78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2772, "upload_time": "2014-11-10T12:52:44", "upload_time_iso_8601": "2014-11-10T12:52:44.692140Z", "url": "https://files.pythonhosted.org/packages/ff/ff/8dc8116eea82029c28e9155264dedec3c170d3c44ff46b991db7086c1488/callipy-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49513215eff329561a232e33d63bdd78", "sha256": "a7c11757db06a696385a2f16e8475295efacb701642e1dd007ca77695dbfbc4f"}, "downloads": -1, "filename": "callipy-0.3.tar.gz", "has_sig": false, "md5_digest": "49513215eff329561a232e33d63bdd78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2772, "upload_time": "2014-11-10T12:52:44", "upload_time_iso_8601": "2014-11-10T12:52:44.692140Z", "url": "https://files.pythonhosted.org/packages/ff/ff/8dc8116eea82029c28e9155264dedec3c170d3c44ff46b991db7086c1488/callipy-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:37 2020"}