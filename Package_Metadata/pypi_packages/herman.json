{"info": {"author": "Derek Anderson", "author_email": "public@kered.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "\nHerman\n======\nAccording to Charles, the Peewee ORM is currently going through a major 3.0 rewrite and isn't accepting many (any?) new features for the 2.x line.  Because of this, I made Herman as a light fork of Peewee (2.8.1) implementing some syntactic sugar and minor tweaks I've liked from other ORMs.\n\nThis is mostly for my company's internal use, but anyone else is free to use it.  I'm maintaining API compatibility as a drop in replacement for peewee 2.x.\n\n.. image:: https://api.travis-ci.org/keredson/peewee.png?branch=master\n  :target: https://travis-ci.org/keredson/peewee\n\n\nHow To Install\n==============\n\n.. code-block:: bash\n\n  sudo pip uninstall peewee\n  sudo pip install herman\n\nOr to upgrade:\n\n.. code-block:: bash\n\n  sudo pip install herman --upgrade\n\n*There is no `herman` package.*  Herman represents itself as peewee (with the same peewee `__version__`) as a drop-in replacement.  To check if you're running Peewee or Herman, check for `peewee.__herman_version__`.\n\nDifferences (Herman vs. Peewee)\n===============================\n\n\nSQL Generation\n--------------\n\nThe SQL generated by an ORM isn't just an artifact to be consumed by the database.  Developers need to be able to read it as well.  The more readable it is and the closer it is to what one would naturally write, the less time it takes to manually evaluate / debug it.\n\nFor example, this query:\n\n.. code-block:: python\n\n    Article.select()\n    .join(Person, join_type=pw.JOIN.LEFT_OUTER, on=(Article.author==Person.id))\n    .where(Article.author==derek)\n\nIn Peewee generates this:\n\n.. code-block:: sql\n\n    SELECT \"t1\".\"id\", \"t1\".\"title\", \"t1\".\"author_id\", \"t1\".\"editor_id\" \n    FROM \"article\" AS t1 \n    LEFT OUTER JOIN \"person\" AS t2 ON (\"t1\".\"author_id\" = \"t2\".\"id\") \n    WHERE (\"t1\".\"author_id\" = ?\n\nWhereas Herman generates:\n\n.. code-block:: sql\n\n    SELECT a1.id, a1.title, a1.author_id, a1.editor_id \n    FROM article AS a1 \n    LEFT OUTER JOIN person AS p1 ON (a1.author_id = p1.id) \n    WHERE (a1.author_id = ?) \n\nYou'll notice that in Herman:\n\n* Table and column identifiers in Herman aren't unnecessarily quoted.\n* Table alias names are derived from their table names, not just \"t1..tN\".\n\n\nThe first() Method Uses a Limit\n-------------------------------\n\n.. code-block:: python\n\n    Article.select().first()\n\nIn Peewee generates this:\n\n.. code-block:: sql\n\n    SELECT \"t1\".\"id\", \"t1\".\"title\", \"t1\".\"author_id\", \"t1\".\"editor_id\" FROM \"article\" AS t1\n\nWhere in Herman this is generated:\n\n.. code-block:: sql\n\n    SELECT a1.id, a1.title, a1.author_id, a1.editor_id FROM article AS a1 LIMIT 1\n\nNotice the additional \"LIMIT 1\" in Herman.  Peewee 2.8.1 rather loads entire result set and returns this first object.  (It's my understanding future versions of Peewee will also add a \"LIMIT 1\".)\n\n\nNamed Table Aliases\n-------------------\n\nIn Peewee you can create table aliases as a variable outside your query.  For example:\n\n.. code-block:: python\n\n    author_table = Person.alias()\n    Article.select()\n    .join(author_table)\n    .where(author_table.name=='Derek')\n\nThis gets you a very respectable:\n\n.. code-block:: sql\n\n    SELECT \"t1\".\"id\", \"t1\".\"title\", \"t1\".\"author_id\", \"t1\".\"editor_id\" \n    FROM \"article\" AS t1\n    INNER JOIN \"person\" AS t2 ON (\"t1\".\"author_id\" = \"t2\".\"id\") \n    WHERE (\"t2\".\"name\" = ?)\n\nBut in some queries it's very useful to specify what the aliases are.  In Herman you can do this:\n\n.. code-block:: python\n\n    author_table = Person.alias('author')\n    Article.select()\n    .join(author_table)\n    .where(author_table.name=='Derek')\n\nWhich generates this:\n\n.. code-block:: sql\n\n    SELECT a1.id, a1.title, a1.author_id, a1.editor_id \n    FROM article AS a1 \n    INNER JOIN person AS author ON (a1.author_id = author.id) \n    WHERE (author.\"name\" = ?)\n\nThese two statements are equivalent in Herman:\n\n.. code-block:: python\n\n    author_table = Person.alias('author')\n    author_table = Person.as_('author')\n\nAnd because aliases are named, you're no longer required to use the external variable:\n\n.. code-block:: python\n\n    Article.select()\n    .join(Person.as_('author'))\n    .where(Person.as_('author').name=='Derek')\n\nWhether in-lining the aliases makes it easier or harder to read is entirely dependent on the query and the code block it's in, but it's good to have the option.  Both are supported in Herman.\n\n\nAlias References are Inferred When Unambiguous\n----------------------------------------------\n\nIf a query is otherwise invalid and there is only one possible interpretation of the query author's intent, automatically tie the un-aliased column to the appropriate alias.  For example:\n\n.. code-block:: python\n\n   Person.alias('xyz').select().where(Person.name == 'Derek')\n\nGenerates invalid SQL in Peewee (which is run on the database, which throws an exception):\n\n.. code-block:: sql\n\n    SELECT \"t1\".\"id\", \"t1\".\"name\", \"t1\".\"parent_id\"\n    FROM \"person\" AS t1 WHERE (\"t2\".\"name\" = ?)\n    peewee.OperationalError: no such column: t2.name\n\n\nBut in Herman it's valid:\n\n.. code-block:: sql\n\n    SELECT xyz.id, xyz.\"name\", xyz.parent_id \n    FROM person AS xyz WHERE (xyz.\"name\" = ?)\n\nThis would NOT work if more than one Person alias were included in the query.\n\n\nHerman Raises Exceptions When Invalid Columns Are Referenced\n------------------------------------------------------------\n\nPeewee will generate and run on the database SQL it knows is invalid.  For example:\n\n.. code-block:: python\n\n    Person.select().where(Article.title == 'xyz').first()\n\nIn Peewee will throw a database error:\n\n.. code-block:: sql\n\n    SELECT \"t1\".\"id\", \"t1\".\"name\", \"t1\".\"parent_id\" \n    FROM \"person\" AS t1 WHERE (\"t2\".\"title\" = ?)\n    peewee.OperationalError: no such column: t2.title\n\nThis isn't good for two reasons.  First, I don't like relying on the database to catch easily detectable errors for us.  Second, the error is opaque and specific to the internal implementation details of peewee (the \"t2\").\n\nHerman on the other hand will not generate the SQL at all, instead raising:\n\n.. code-block:: python\n\n    peewee.ProgrammingError: <class '__main__.Article'> is not a part of this query\n\n\nThe get() Method Confirms Uniqueness\n------------------------------------\n\nThe get() method in Peewee adds a \"LIMIT 1\" and returns the first object.  I feel this is incorrect behavior.  The difference between first() and get() is get() should assert that only one matching record exists. (This is something Django got right IMO.)  If my query criteria hasn't correctly isolated a unique row the ORM should throw an exception.\n\nThis is why Herman added a \"LIMIT 2\" to the SQL genned from get(), and does a check on the number of object returned.  For example:\n\n.. code-block:: python\n\n    derek = Person.create(name='Derek')\n    callie = Person.create(name='Callie')\n    Person.select().get()\n\nWill throw:\n\n.. code-block:: sql\n\n    peewee.DataError: Too many instances matching query exist:\n    SQL: SELECT p1.id, p1.\"name\", p1.parent_id FROM person AS p1 LIMIT 2\n\nRather than returning a random Person object selected by the database.\n\n\nThe Shortcut ALL\n----------------\n\nIn Herman, this:\n\n.. code-block:: python\n\n  Person.ALL\n\nIs the same as this:\n\n.. code-block:: python\n\n  Person.select()\n\nIt's just a nomenclature I preferred from Django.  I made it uppercase to prevent conflicts with any columns named \"all\", and to highlight that it's effectively a constant.\n\n\nA New (Additional) Join Syntax\n------------------------------\n\nIf I have a set of models:\n\n.. code-block:: sql\n\n    class Person(pw.Model):\n      name = pw.CharField()\n\n    class Article(pw.Model):\n      title = pw.CharField()\n      author = pw.ForeignKeyField(db_column='author_id', rel_model=Person, to_field='id')\n      editor = pw.ForeignKeyField(db_column='editor_id', rel_model=Person, to_field='id', related_name='edited_articles', null=True)\n\n    class Reply(pw.Model):\n      text = pw.CharField()\n      article = pw.ForeignKeyField(db_column='article_id', rel_model=Article, to_field='id')\n\n\nAnd I want to do something fancy like get all replies with their articles and authors and editors, in Peewee I have to do something like this:\n\n\n.. code-block:: python\n\n  author_table = Person.alias()\n  editor_table = Person.alias()\n  replies = Reply.select(Reply, author_table, editor_table)\n    .join(Article) \n    .join(author_table, join_type=pw.JOIN.LEFT_OUTER, on=(author_table==Article.author)) \n    .switch(Article) \n    .join(editor_table, join_type=pw.JOIN.LEFT_OUTER, on=(editor_table==Article.editor)) \n    .where(author_table.name==\"Derek\")\n\nWhich is all sorts of complicated.  For instance:\n\n* I have to mentally keep track of what the join context is and manipulate it with the switch statement.\n* Because Article has two FKs to the same table, I have to manually specify the on conditionals.\n* Because an editor can be null, the default INNER JOIN will implicitly filter out replies to articles without editors, which is rarely what the developer wants when asking for a list of replies, so I have to use \"join_type=pw.JOIN.LEFT_OUTER\" a lot.\n\nHerman offers a simpler syntax:\n\n.. code-block:: python\n\n  Reply.ALL\n    .plus(Reply.article, Article.author.as_('author'))\n    .plus(Reply.article, Article.editor)\n    .where(Person.as_('author').name==\"Derek\")\n\nWhich generates the same SQL:\n\n.. code-block:: sql\n\n  SELECT r1.id, r1.\"text\", r1.article_id, a1.id, a1.title, a1.author_id, a1.editor_id,\n         author.id, author.\"name\", author.parent_id, p1.id, p1.\"name\", p1.parent_id \n  FROM reply AS r1 \n  LEFT OUTER JOIN article AS a1 ON (r1.article_id = a1.id) \n  LEFT OUTER JOIN person AS author ON (a1.author_id = author.id) \n  LEFT OUTER JOIN person AS p1 ON (a1.editor_id = p1.id) \n  WHERE (author.\"name\" = ?)\n\nThe plus() method takes a variable number of ForeignKeyField objects which represent a path away from the primary query object (Reply in this case).  For example:\n\n.. code-block:: python\n\n  Reply.ALL.plus(Reply.article)\n\nGets all the replies with their associated articles.\n\n.. code-block:: python\n\n  Reply.ALL.plus(Reply.article, Article.editor)\n\nGets all the replies with their associated articles and all the articles editors.  Note that \n\"Reply.article\" is a foreign key from Reply to Article, and Article.editor is a foreign key from Article to Person.  The list of foreign keys must create a logical path where the \"to\" type of one FK matches the \"from\" type of the next FK.\n\nFollowing the same path twice is harmless.  For instance:\n\n.. code-block:: python\n\n  Reply.ALL.plus(Reply.article).plus(Reply.article)\n\nIs no different than calling plus() once.  This is why we can specify multiple paths that have some overlap, for example:\n\n.. code-block:: python\n\n  Reply.ALL\n    .plus(Reply.article, Article.author)\n    .plus(Reply.article, Article.editor)\n\nWhich will join on the article table only once.\n\nYou can also alias your joined tables with:\n\n.. code-block:: python\n\n  Article.author.as_('author')\n\nWhich allows you to reference it later in your conditional:\n\n.. code-block:: python\n\n  .where(Person.as_('author').name==\"Derek\")\n\nHerman's plus() also supports following foreign keys from one-to-many.  Like:\n\n.. code-block:: python\n\n  Article.ALL.plus(Reply.article)\n\nWhich internally does a prefetch to populate the article with all of its replies.  There will be O(k) SQL statements executed, where `k` is the number of two-many relationships.  All of these queries will be grouped into one transaction to guarantee correctness.\n\n*IMPORTANT:*\n\n    Remember that foreign keys represent edges in your object graph, and a call to `plus(*edges)` tells Herman to include that path from the object graph in your query.\n\nThis semantics for plus() have been co-opted from the `DKO <https://github.com/keredson/DKO>`_ project, which I authored for my former employer.  DKO's version of this syntax has been in broad production use since 2010 by hundreds of developers, accessing some of the largest (billions of rows) conventional relational databases that exist.\n\nCalling len() Does a Database Count\n-----------------------------------\n\nIf you call:\n\n.. code-block:: python\n\n  len(Article.select())\n\nPeewee this will load a list of all objects, permanently cache said list, and then call `len()` on that cache.\n\nIn Herman this will call `count()` on the database and return the resulting integer.  It does not build the list of objects in python nor cache anything.  However, for backwards compatability, if something else has already populated the cached results of the query, it will call `len()` on that.\n\n\nA New  DeferredRelation Syntax\n------------------------------\n\nThe semantics behind Peewee's `circular foreign key dependencies <http://docs.peewee-orm.com/en/latest/peewee/model.html#circular-foreign-key-dependencies>`_ get kind of unwieldy when you have more than a few models (and they're spread over multiple files). This is because the DeferredRelation object has to be defined, used, then the other model defined in another file, then set_model has to be called on the original, and then you're left with the object reference dangling around that has no purpose. IE the example in the docs:\n\n.. code-block:: python\n\n  # Create a reference object to stand in for our as-yet-undefined Tweet model.\n  DeferredTweet = DeferredRelation()\n\n  class User(Model):\n    username = CharField()\n    # Tweet has not been defined yet so use the deferred reference.\n    favorite_tweet = ForeignKeyField(DeferredTweet, null=True)\n  \n  class Tweet(Model):\n    message = TextField()\n    user = ForeignKeyField(User, related_name='tweets')\n  \n  # Now that Tweet is defined, we can initialize the reference.\n  DeferredTweet.set_model(Tweet)\n\nOurs happens all in the model definition with an optional parameter given to DeferredRelation. Like:\n\n.. code-block:: python\n\n  class User(Model):\n    username = CharField()\n    # Tweet has not been defined yet so use the deferred reference.\n    favorite_tweet = ForeignKeyField(DeferredRelation('Tweet'), null=True)\n  \n  class Tweet(Model):\n    message = TextField()\n    user = ForeignKeyField(User, related_name='tweets')\n\n\nThis removes the need for the extra variable in the global namespace and the coordination of it over multiple files. And since the parameter is optional, it is fully backwards-compatible with the old syntax.\n\nOur patch for this has been incorporated upstream, so this is forwards-compatible too, following Peewee's next release.\n\n\nPassing an Empty List/Set/Tuple into IN Doesn't Gen Invalid SQL\n---------------------------------------------------------------\n\nIf you try to do a IN operation on an empty list:\n\n.. code-block:: python\n\n  User.select().where(User.id << [])\n\nPeewee will generate the following SQL:\n\n.. code-block:: sql\n\n  SELECT \"t1\".\"id\", \"t1\".\"username\" FROM \"user\" AS t1 WHERE (\"t1\".\"id\" IN ())\n\nWhich the database will reject as invalid, throwing an exception.  We instead generate a \"false\" statement:\n\n.. code-block:: sql\n\n  SELECT u1.id, u1.username FROM \"user\" AS u1 WHERE (0 = 1)\n\nSo you don't have to manually test for empty lists every time you use a SQL IN.\n\n\n\npeewee\n======\n\nPeewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.\n\n* A small, expressive ORM\n* Written in python with support for versions 2.6+ and 3.2+.\n* built-in support for sqlite, mysql and postgresql\n* tons of extensions available in the `playhouse <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html>`_\n\n  * `Postgresql HStore, JSON, arrays and more <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#postgres-ext>`_\n  * `SQLite full-text search, user-defined functions, virtual tables and more <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#sqlite-ext>`_\n  * `Schema migrations <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#migrate>`_ and `model code generator <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pwiz>`_\n  * `Connection pool <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pool>`_\n  * `Encryption <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#sqlcipher-ext>`_\n  * `and much, much more... <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html>`_\n\nNew to peewee? Here is a list of documents you might find most helpful when getting\nstarted:\n\n* `Quickstart guide <http://docs.peewee-orm.com/en/latest/peewee/quickstart.html#quickstart>`_ -- this guide covers all the essentials. It will take you between 5 and 10 minutes to go through it.\n* `Guide to the various query operators <http://docs.peewee-orm.com/en/latest/peewee/querying.html#query-operators>`_ describes how to construct queries and combine expressions.\n* `Field types table <http://docs.peewee-orm.com/en/latest/peewee/models.html#field-types-table>`_ lists the various field types peewee supports and the parameters they accept.\n\nFor flask helpers, check out the `flask_utils extension module <http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#flask-utils>`_. You can also use peewee with the popular extension `flask-admin <https://flask-admin.readthedocs.io/en/latest/>`_ to provide a Django-like admin interface for managing peewee models.\n\nExamples\n--------\n\nDefining models is similar to Django or SQLAlchemy:\n\n.. code-block:: python\n\n    from peewee import *\n    from playhouse.sqlite_ext import SqliteExtDatabase\n    import datetime\n\n    db = SqliteExtDatabase('my_database.db')\n\n    class BaseModel(Model):\n        class Meta:\n            database = db\n\n    class User(BaseModel):\n        username = CharField(unique=True)\n\n    class Tweet(BaseModel):\n        user = ForeignKeyField(User, related_name='tweets')\n        message = TextField()\n        created_date = DateTimeField(default=datetime.datetime.now)\n        is_published = BooleanField(default=True)\n\nConnect to the database and create tables:\n\n.. code-block:: python\n\n    db.connect()\n    db.create_tables([User, Tweet])\n\nCreate a few rows:\n\n.. code-block:: python\n\n    charlie = User.create(username='charlie')\n    huey = User(username='huey')\n    huey.save()\n\n    # No need to set `is_published` or `created_date` since they\n    # will just use the default values we specified.\n    Tweet.create(user=charlie, message='My first tweet')\n\nQueries are expressive and composable:\n\n.. code-block:: python\n\n    # A simple query selecting a user.\n    User.get(User.username == 'charles')\n\n    # Get tweets created by one of several users. The \"<<\" operator\n    # corresponds to the SQL \"IN\" operator.\n    usernames = ['charlie', 'huey', 'mickey']\n    users = User.select().where(User.username << usernames)\n    tweets = Tweet.select().where(Tweet.user << users)\n\n    # We could accomplish the same using a JOIN:\n    tweets = (Tweet\n              .select()\n              .join(User)\n              .where(User.username << usernames))\n\n    # How many tweets were published today?\n    tweets_today = (Tweet\n                    .select()\n                    .where(\n                        (Tweet.created_date >= datetime.date.today()) &\n                        (Tweet.is_published == True))\n                    .count())\n\n    # Paginate the user table and show me page 3 (users 41-60).\n    User.select().order_by(User.username).paginate(3, 20)\n\n    # Order users by the number of tweets they've created:\n    tweet_ct = fn.Count(Tweet.id)\n    users = (User\n             .select(User, tweet_ct.alias('ct'))\n             .join(Tweet, JOIN.LEFT_OUTER)\n             .group_by(User)\n             .order_by(tweet_ct.desc()))\n\n    # Do an atomic update\n    Counter.update(count=Counter.count + 1).where(\n        Counter.url == request.url)\n\nCheck out the `example app <http://docs.peewee-orm.com/en/latest/peewee/example.html>`_ for a working Twitter-clone website written with Flask.\n\nLearning more\n-------------\n\nCheck the `documentation <http://docs.peewee-orm.com/>`_ for more examples.\n\nSpecific question? Come hang out in the #peewee channel on irc.freenode.net, or post to the mailing list, http://groups.google.com/group/peewee-orm . If you would like to report a bug, `create a new issue <https://github.com/coleifer/peewee/issues/new>`_ on GitHub.\n\nStill want more info?\n---------------------\n\n.. image:: http://media.charlesleifer.com/blog/photos/wat.jpg\n\nI've written a number of blog posts about building applications and web-services with peewee (and usually Flask). If you'd like to see some real-life applications that use peewee, the following resources may be useful:\n\n* `Building a note-taking app with Flask and Peewee <http://charlesleifer.com/blog/saturday-morning-hack-a-little-note-taking-app-with-flask/>`_ as well as `Part 2 <http://charlesleifer.com/blog/saturday-morning-hacks-revisiting-the-notes-app/>`_ and `Part 3 <http://charlesleifer.com/blog/saturday-morning-hacks-adding-full-text-search-to-the-flask-note-taking-app/>`_.\n* `Analytics web service built with Flask and Peewee <http://charlesleifer.com/blog/saturday-morning-hacks-building-an-analytics-app-with-flask/>`_.\n* `Personalized news digest (with a boolean query parser!) <http://charlesleifer.com/blog/saturday-morning-hack-personalized-news-digest-with-boolean-query-parser/>`_.\n* `Using peewee to explore CSV files <http://charlesleifer.com/blog/using-peewee-to-explore-csv-files/>`_.\n* `Structuring Flask apps with Peewee <http://charlesleifer.com/blog/structuring-flask-apps-a-how-to-for-those-coming-from-django/>`_.\n* `Creating a lastpass clone with Flask and Peewee <http://charlesleifer.com/blog/creating-a-personal-password-manager/>`_.\n* `Building a web-based encrypted file manager with Flask, peewee and S3 <http://charlesleifer.com/blog/web-based-encrypted-file-storage-using-flask-and-aws/>`_.\n* `Creating a bookmarking web-service that takes screenshots of your bookmarks <http://charlesleifer.com/blog/building-bookmarking-service-python-and-phantomjs/>`_.\n* `Building a pastebin, wiki and a bookmarking service using Flask and Peewee <http://charlesleifer.com/blog/dont-sweat-small-stuff-use-flask-blueprints/>`_.\n* `Encrypted databases with Python and SQLCipher <http://charlesleifer.com/blog/encrypted-sqlite-databases-with-python-and-sqlcipher/>`_.\n* `Dear Diary: An Encrypted, Command-Line Diary with Peewee <http://charlesleifer.com/blog/dear-diary-an-encrypted-command-line-diary-with-python/>`_.\n* `Query Tree Structures in SQLite using Peewee and the Transitive Closure Extension <http://charlesleifer.com/blog/querying-tree-structures-in-sqlite-using-python-and-the-transitive-closure-extension/>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/keredson/peewee/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "herman", "package_url": "https://pypi.org/project/herman/", "platform": "", "project_url": "https://pypi.org/project/herman/", "project_urls": {"Homepage": "http://github.com/keredson/peewee/"}, "release_url": "https://pypi.org/project/herman/1.2.5/", "requires_dist": null, "requires_python": "", "summary": "a little fork of peewee", "version": "1.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"herman\">\n<h2>Herman</h2>\n<p>According to Charles, the Peewee ORM is currently going through a major 3.0 rewrite and isn\u2019t accepting many (any?) new features for the 2.x line.  Because of this, I made Herman as a light fork of Peewee (2.8.1) implementing some syntactic sugar and minor tweaks I\u2019ve liked from other ORMs.</p>\n<p>This is mostly for my company\u2019s internal use, but anyone else is free to use it.  I\u2019m maintaining API compatibility as a drop in replacement for peewee 2.x.</p>\n<a href=\"https://travis-ci.org/keredson/peewee\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/keredson/peewee.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75c7716ce6123875f5497da542de50ef2bdd6458/68747470733a2f2f6170692e7472617669732d63692e6f72672f6b65726564736f6e2f7065657765652e706e673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"how-to-install\">\n<h2>How To Install</h2>\n<pre>sudo pip uninstall peewee\nsudo pip install herman\n</pre>\n<p>Or to upgrade:</p>\n<pre>sudo pip install herman --upgrade\n</pre>\n<p><em>There is no `herman` package.</em>  Herman represents itself as peewee (with the same peewee <cite>__version__</cite>) as a drop-in replacement.  To check if you\u2019re running Peewee or Herman, check for <cite>peewee.__herman_version__</cite>.</p>\n</div>\n<div id=\"differences-herman-vs-peewee\">\n<h2>Differences (Herman vs. Peewee)</h2>\n<div id=\"sql-generation\">\n<h3>SQL Generation</h3>\n<p>The SQL generated by an ORM isn\u2019t just an artifact to be consumed by the database.  Developers need to be able to read it as well.  The more readable it is and the closer it is to what one would naturally write, the less time it takes to manually evaluate / debug it.</p>\n<p>For example, this query:</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">join_type</span><span class=\"o\">=</span><span class=\"n\">pw</span><span class=\"o\">.</span><span class=\"n\">JOIN</span><span class=\"o\">.</span><span class=\"n\">LEFT_OUTER</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">==</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">))</span>\n<span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">==</span><span class=\"n\">derek</span><span class=\"p\">)</span>\n</pre>\n<p>In Peewee generates this:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"title\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"author_id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"editor_id\"</span>\n<span class=\"k\">FROM</span> <span class=\"ss\">\"article\"</span> <span class=\"k\">AS</span> <span class=\"n\">t1</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">OUTER</span> <span class=\"k\">JOIN</span> <span class=\"ss\">\"person\"</span> <span class=\"k\">AS</span> <span class=\"n\">t2</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"author_id\"</span> <span class=\"o\">=</span> <span class=\"ss\">\"t2\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"author_id\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span>\n</pre>\n<p>Whereas Herman generates:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">editor_id</span>\n<span class=\"k\">FROM</span> <span class=\"n\">article</span> <span class=\"k\">AS</span> <span class=\"n\">a1</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">OUTER</span> <span class=\"k\">JOIN</span> <span class=\"n\">person</span> <span class=\"k\">AS</span> <span class=\"n\">p1</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n</pre>\n<p>You\u2019ll notice that in Herman:</p>\n<ul>\n<li>Table and column identifiers in Herman aren\u2019t unnecessarily quoted.</li>\n<li>Table alias names are derived from their table names, not just \u201ct1..tN\u201d.</li>\n</ul>\n</div>\n<div id=\"the-first-method-uses-a-limit\">\n<h3>The first() Method Uses a Limit</h3>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n</pre>\n<p>In Peewee generates this:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"title\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"author_id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"editor_id\"</span> <span class=\"k\">FROM</span> <span class=\"ss\">\"article\"</span> <span class=\"k\">AS</span> <span class=\"n\">t1</span>\n</pre>\n<p>Where in Herman this is generated:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">editor_id</span> <span class=\"k\">FROM</span> <span class=\"n\">article</span> <span class=\"k\">AS</span> <span class=\"n\">a1</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">1</span>\n</pre>\n<p>Notice the additional \u201cLIMIT 1\u201d in Herman.  Peewee 2.8.1 rather loads entire result set and returns this first object.  (It\u2019s my understanding future versions of Peewee will also add a \u201cLIMIT 1\u201d.)</p>\n</div>\n<div id=\"named-table-aliases\">\n<h3>Named Table Aliases</h3>\n<p>In Peewee you can create table aliases as a variable outside your query.  For example:</p>\n<pre><span class=\"n\">author_table</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">()</span>\n<span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"p\">)</span>\n<span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s1\">'Derek'</span><span class=\"p\">)</span>\n</pre>\n<p>This gets you a very respectable:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"title\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"author_id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"editor_id\"</span>\n<span class=\"k\">FROM</span> <span class=\"ss\">\"article\"</span> <span class=\"k\">AS</span> <span class=\"n\">t1</span>\n<span class=\"k\">INNER</span> <span class=\"k\">JOIN</span> <span class=\"ss\">\"person\"</span> <span class=\"k\">AS</span> <span class=\"n\">t2</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"author_id\"</span> <span class=\"o\">=</span> <span class=\"ss\">\"t2\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"ss\">\"t2\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n</pre>\n<p>But in some queries it\u2019s very useful to specify what the aliases are.  In Herman you can do this:</p>\n<pre><span class=\"n\">author_table</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span>\n<span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"p\">)</span>\n<span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s1\">'Derek'</span><span class=\"p\">)</span>\n</pre>\n<p>Which generates this:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">editor_id</span>\n<span class=\"k\">FROM</span> <span class=\"n\">article</span> <span class=\"k\">AS</span> <span class=\"n\">a1</span>\n<span class=\"k\">INNER</span> <span class=\"k\">JOIN</span> <span class=\"n\">person</span> <span class=\"k\">AS</span> <span class=\"n\">author</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span> <span class=\"o\">=</span> <span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n</pre>\n<p>These two statements are equivalent in Herman:</p>\n<pre><span class=\"n\">author_table</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span>\n<span class=\"n\">author_table</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span>\n</pre>\n<p>And because aliases are named, you\u2019re no longer required to use the external variable:</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n<span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">))</span>\n<span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s1\">'Derek'</span><span class=\"p\">)</span>\n</pre>\n<p>Whether in-lining the aliases makes it easier or harder to read is entirely dependent on the query and the code block it\u2019s in, but it\u2019s good to have the option.  Both are supported in Herman.</p>\n</div>\n<div id=\"alias-references-are-inferred-when-unambiguous\">\n<h3>Alias References are Inferred When Unambiguous</h3>\n<p>If a query is otherwise invalid and there is only one possible interpretation of the query author\u2019s intent, automatically tie the un-aliased column to the appropriate alias.  For example:</p>\n<pre><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">'xyz'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'Derek'</span><span class=\"p\">)</span>\n</pre>\n<p>Generates invalid SQL in Peewee (which is run on the database, which throws an exception):</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"parent_id\"</span>\n<span class=\"k\">FROM</span> <span class=\"ss\">\"person\"</span> <span class=\"k\">AS</span> <span class=\"n\">t1</span> <span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"ss\">\"t2\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"n\">peewee</span><span class=\"p\">.</span><span class=\"n\">OperationalError</span><span class=\"p\">:</span> <span class=\"k\">no</span> <span class=\"n\">such</span> <span class=\"k\">column</span><span class=\"p\">:</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">name</span>\n</pre>\n<p>But in Herman it\u2019s valid:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">xyz</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">xyz</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">xyz</span><span class=\"p\">.</span><span class=\"n\">parent_id</span>\n<span class=\"k\">FROM</span> <span class=\"n\">person</span> <span class=\"k\">AS</span> <span class=\"n\">xyz</span> <span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n</pre>\n<p>This would NOT work if more than one Person alias were included in the query.</p>\n</div>\n<div id=\"herman-raises-exceptions-when-invalid-columns-are-referenced\">\n<h3>Herman Raises Exceptions When Invalid Columns Are Referenced</h3>\n<p>Peewee will generate and run on the database SQL it knows is invalid.  For example:</p>\n<pre><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">==</span> <span class=\"s1\">'xyz'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n</pre>\n<p>In Peewee will throw a database error:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"parent_id\"</span>\n<span class=\"k\">FROM</span> <span class=\"ss\">\"person\"</span> <span class=\"k\">AS</span> <span class=\"n\">t1</span> <span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"ss\">\"t2\"</span><span class=\"p\">.</span><span class=\"ss\">\"title\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"n\">peewee</span><span class=\"p\">.</span><span class=\"n\">OperationalError</span><span class=\"p\">:</span> <span class=\"k\">no</span> <span class=\"n\">such</span> <span class=\"k\">column</span><span class=\"p\">:</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">title</span>\n</pre>\n<p>This isn\u2019t good for two reasons.  First, I don\u2019t like relying on the database to catch easily detectable errors for us.  Second, the error is opaque and specific to the internal implementation details of peewee (the \u201ct2\u201d).</p>\n<p>Herman on the other hand will not generate the SQL at all, instead raising:</p>\n<pre><span class=\"n\">peewee</span><span class=\"o\">.</span><span class=\"n\">ProgrammingError</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">__main__</span><span class=\"o\">.</span><span class=\"n\">Article</span><span class=\"s1\">'&gt; is not a part of this query</span>\n</pre>\n</div>\n<div id=\"the-get-method-confirms-uniqueness\">\n<h3>The get() Method Confirms Uniqueness</h3>\n<p>The get() method in Peewee adds a \u201cLIMIT 1\u201d and returns the first object.  I feel this is incorrect behavior.  The difference between first() and get() is get() should assert that only one matching record exists. (This is something Django got right IMO.)  If my query criteria hasn\u2019t correctly isolated a unique row the ORM should throw an exception.</p>\n<p>This is why Herman added a \u201cLIMIT 2\u201d to the SQL genned from get(), and does a check on the number of object returned.  For example:</p>\n<pre><span class=\"n\">derek</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Derek'</span><span class=\"p\">)</span>\n<span class=\"n\">callie</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Callie'</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>Will throw:</p>\n<pre><span class=\"n\">peewee</span><span class=\"p\">.</span><span class=\"n\">DataError</span><span class=\"p\">:</span> <span class=\"n\">Too</span> <span class=\"n\">many</span> <span class=\"n\">instances</span> <span class=\"n\">matching</span> <span class=\"n\">query</span> <span class=\"n\">exist</span><span class=\"p\">:</span>\n<span class=\"k\">SQL</span><span class=\"p\">:</span> <span class=\"k\">SELECT</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">parent_id</span> <span class=\"k\">FROM</span> <span class=\"n\">person</span> <span class=\"k\">AS</span> <span class=\"n\">p1</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">2</span>\n</pre>\n<p>Rather than returning a random Person object selected by the database.</p>\n</div>\n<div id=\"the-shortcut-all\">\n<h3>The Shortcut ALL</h3>\n<p>In Herman, this:</p>\n<pre><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">ALL</span>\n</pre>\n<p>Is the same as this:</p>\n<pre><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n</pre>\n<p>It\u2019s just a nomenclature I preferred from Django.  I made it uppercase to prevent conflicts with any columns named \u201call\u201d, and to highlight that it\u2019s effectively a constant.</p>\n</div>\n<div id=\"a-new-additional-join-syntax\">\n<h3>A New (Additional) Join Syntax</h3>\n<p>If I have a set of models:</p>\n<pre><span class=\"k\">class</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"n\">Article</span><span class=\"p\">(</span><span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n  <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s1\">'author_id'</span><span class=\"p\">,</span> <span class=\"n\">rel_model</span><span class=\"o\">=</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">to_field</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n  <span class=\"n\">editor</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s1\">'editor_id'</span><span class=\"p\">,</span> <span class=\"n\">rel_model</span><span class=\"o\">=</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">to_field</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'edited_articles'</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"n\">Reply</span><span class=\"p\">(</span><span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"nb\">text</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n  <span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"p\">.</span><span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">db_column</span><span class=\"o\">=</span><span class=\"s1\">'article_id'</span><span class=\"p\">,</span> <span class=\"n\">rel_model</span><span class=\"o\">=</span><span class=\"n\">Article</span><span class=\"p\">,</span> <span class=\"n\">to_field</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n</pre>\n<p>And I want to do something fancy like get all replies with their articles and authors and editors, in Peewee I have to do something like this:</p>\n<pre><span class=\"n\">author_table</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">()</span>\n<span class=\"n\">editor_table</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">()</span>\n<span class=\"n\">replies</span> <span class=\"o\">=</span> <span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"p\">,</span> <span class=\"n\">author_table</span><span class=\"p\">,</span> <span class=\"n\">editor_table</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"p\">,</span> <span class=\"n\">join_type</span><span class=\"o\">=</span><span class=\"n\">pw</span><span class=\"o\">.</span><span class=\"n\">JOIN</span><span class=\"o\">.</span><span class=\"n\">LEFT_OUTER</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"o\">==</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">switch</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">editor_table</span><span class=\"p\">,</span> <span class=\"n\">join_type</span><span class=\"o\">=</span><span class=\"n\">pw</span><span class=\"o\">.</span><span class=\"n\">JOIN</span><span class=\"o\">.</span><span class=\"n\">LEFT_OUTER</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">editor_table</span><span class=\"o\">==</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">editor</span><span class=\"p\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">author_table</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s2\">\"Derek\"</span><span class=\"p\">)</span>\n</pre>\n<p>Which is all sorts of complicated.  For instance:</p>\n<ul>\n<li>I have to mentally keep track of what the join context is and manipulate it with the switch statement.</li>\n<li>Because Article has two FKs to the same table, I have to manually specify the on conditionals.</li>\n<li>Because an editor can be null, the default INNER JOIN will implicitly filter out replies to articles without editors, which is rarely what the developer wants when asking for a list of replies, so I have to use \u201cjoin_type=pw.JOIN.LEFT_OUTER\u201d a lot.</li>\n</ul>\n<p>Herman offers a simpler syntax:</p>\n<pre><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">ALL</span>\n  <span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">editor</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s2\">\"Derek\"</span><span class=\"p\">)</span>\n</pre>\n<p>Which generates the same SQL:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">r1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">r1</span><span class=\"p\">.</span><span class=\"ss\">\"text\"</span><span class=\"p\">,</span> <span class=\"n\">r1</span><span class=\"p\">.</span><span class=\"n\">article_id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">editor_id</span><span class=\"p\">,</span>\n       <span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">author</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">parent_id</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">parent_id</span>\n<span class=\"k\">FROM</span> <span class=\"n\">reply</span> <span class=\"k\">AS</span> <span class=\"n\">r1</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">OUTER</span> <span class=\"k\">JOIN</span> <span class=\"n\">article</span> <span class=\"k\">AS</span> <span class=\"n\">a1</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">.</span><span class=\"n\">article_id</span> <span class=\"o\">=</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">OUTER</span> <span class=\"k\">JOIN</span> <span class=\"n\">person</span> <span class=\"k\">AS</span> <span class=\"n\">author</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">author_id</span> <span class=\"o\">=</span> <span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">OUTER</span> <span class=\"k\">JOIN</span> <span class=\"n\">person</span> <span class=\"k\">AS</span> <span class=\"n\">p1</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">editor_id</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"p\">)</span>\n</pre>\n<p>The plus() method takes a variable number of ForeignKeyField objects which represent a path away from the primary query object (Reply in this case).  For example:</p>\n<pre><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">)</span>\n</pre>\n<p>Gets all the replies with their associated articles.</p>\n<pre><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">editor</span><span class=\"p\">)</span>\n</pre>\n<p>Gets all the replies with their associated articles and all the articles editors.  Note that\n\u201cReply.article\u201d is a foreign key from Reply to Article, and Article.editor is a foreign key from Article to Person.  The list of foreign keys must create a logical path where the \u201cto\u201d type of one FK matches the \u201cfrom\u201d type of the next FK.</p>\n<p>Following the same path twice is harmless.  For instance:</p>\n<pre><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">)</span>\n</pre>\n<p>Is no different than calling plus() once.  This is why we can specify multiple paths that have some overlap, for example:</p>\n<pre><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">ALL</span>\n  <span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">editor</span><span class=\"p\">)</span>\n</pre>\n<p>Which will join on the article table only once.</p>\n<p>You can also alias your joined tables with:</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span>\n</pre>\n<p>Which allows you to reference it later in your conditional:</p>\n<pre><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s2\">\"Derek\"</span><span class=\"p\">)</span>\n</pre>\n<p>Herman\u2019s plus() also supports following foreign keys from one-to-many.  Like:</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">Reply</span><span class=\"o\">.</span><span class=\"n\">article</span><span class=\"p\">)</span>\n</pre>\n<p>Which internally does a prefetch to populate the article with all of its replies.  There will be O(k) SQL statements executed, where <cite>k</cite> is the number of two-many relationships.  All of these queries will be grouped into one transaction to guarantee correctness.</p>\n<p><em>IMPORTANT:</em></p>\n<blockquote>\nRemember that foreign keys represent edges in your object graph, and a call to <cite>plus(*edges)</cite> tells Herman to include that path from the object graph in your query.</blockquote>\n<p>This semantics for plus() have been co-opted from the <a href=\"https://github.com/keredson/DKO\" rel=\"nofollow\">DKO</a> project, which I authored for my former employer.  DKO\u2019s version of this syntax has been in broad production use since 2010 by hundreds of developers, accessing some of the largest (billions of rows) conventional relational databases that exist.</p>\n</div>\n<div id=\"calling-len-does-a-database-count\">\n<h3>Calling len() Does a Database Count</h3>\n<p>If you call:</p>\n<pre><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">())</span>\n</pre>\n<p>Peewee this will load a list of all objects, permanently cache said list, and then call <cite>len()</cite> on that cache.</p>\n<p>In Herman this will call <cite>count()</cite> on the database and return the resulting integer.  It does not build the list of objects in python nor cache anything.  However, for backwards compatability, if something else has already populated the cached results of the query, it will call <cite>len()</cite> on that.</p>\n</div>\n<div id=\"a-new-deferredrelation-syntax\">\n<h3>A New  DeferredRelation Syntax</h3>\n<p>The semantics behind Peewee\u2019s <a href=\"http://docs.peewee-orm.com/en/latest/peewee/model.html#circular-foreign-key-dependencies\" rel=\"nofollow\">circular foreign key dependencies</a> get kind of unwieldy when you have more than a few models (and they\u2019re spread over multiple files). This is because the DeferredRelation object has to be defined, used, then the other model defined in another file, then set_model has to be called on the original, and then you\u2019re left with the object reference dangling around that has no purpose. IE the example in the docs:</p>\n<pre><span class=\"c1\"># Create a reference object to stand in for our as-yet-undefined Tweet model.</span>\n<span class=\"n\">DeferredTweet</span> <span class=\"o\">=</span> <span class=\"n\">DeferredRelation</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n  <span class=\"c1\"># Tweet has not been defined yet so use the deferred reference.</span>\n  <span class=\"n\">favorite_tweet</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">DeferredTweet</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">TextField</span><span class=\"p\">()</span>\n  <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'tweets'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now that Tweet is defined, we can initialize the reference.</span>\n<span class=\"n\">DeferredTweet</span><span class=\"o\">.</span><span class=\"n\">set_model</span><span class=\"p\">(</span><span class=\"n\">Tweet</span><span class=\"p\">)</span>\n</pre>\n<p>Ours happens all in the model definition with an optional parameter given to DeferredRelation. Like:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n  <span class=\"c1\"># Tweet has not been defined yet so use the deferred reference.</span>\n  <span class=\"n\">favorite_tweet</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">DeferredRelation</span><span class=\"p\">(</span><span class=\"s1\">'Tweet'</span><span class=\"p\">),</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n  <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">TextField</span><span class=\"p\">()</span>\n  <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'tweets'</span><span class=\"p\">)</span>\n</pre>\n<p>This removes the need for the extra variable in the global namespace and the coordination of it over multiple files. And since the parameter is optional, it is fully backwards-compatible with the old syntax.</p>\n<p>Our patch for this has been incorporated upstream, so this is forwards-compatible too, following Peewee\u2019s next release.</p>\n</div>\n<div id=\"passing-an-empty-list-set-tuple-into-in-doesn-t-gen-invalid-sql\">\n<h3>Passing an Empty List/Set/Tuple into IN Doesn\u2019t Gen Invalid SQL</h3>\n<p>If you try to do a IN operation on an empty list:</p>\n<pre><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">[])</span>\n</pre>\n<p>Peewee will generate the following SQL:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">,</span> <span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"username\"</span> <span class=\"k\">FROM</span> <span class=\"ss\">\"user\"</span> <span class=\"k\">AS</span> <span class=\"n\">t1</span> <span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"ss\">\"t1\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span> <span class=\"k\">IN</span> <span class=\"p\">())</span>\n</pre>\n<p>Which the database will reject as invalid, throwing an exception.  We instead generate a \u201cfalse\u201d statement:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">u1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">u1</span><span class=\"p\">.</span><span class=\"n\">username</span> <span class=\"k\">FROM</span> <span class=\"ss\">\"user\"</span> <span class=\"k\">AS</span> <span class=\"n\">u1</span> <span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>So you don\u2019t have to manually test for empty lists every time you use a SQL IN.</p>\n</div>\n</div>\n<div id=\"peewee\">\n<h2>peewee</h2>\n<p>Peewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.</p>\n<ul>\n<li>A small, expressive ORM</li>\n<li>Written in python with support for versions 2.6+ and 3.2+.</li>\n<li>built-in support for sqlite, mysql and postgresql</li>\n<li>tons of extensions available in the <a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html\" rel=\"nofollow\">playhouse</a><ul>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#postgres-ext\" rel=\"nofollow\">Postgresql HStore, JSON, arrays and more</a></li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#sqlite-ext\" rel=\"nofollow\">SQLite full-text search, user-defined functions, virtual tables and more</a></li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#migrate\" rel=\"nofollow\">Schema migrations</a> and <a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pwiz\" rel=\"nofollow\">model code generator</a></li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pool\" rel=\"nofollow\">Connection pool</a></li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#sqlcipher-ext\" rel=\"nofollow\">Encryption</a></li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html\" rel=\"nofollow\">and much, much more\u2026</a></li>\n</ul>\n</li>\n</ul>\n<p>New to peewee? Here is a list of documents you might find most helpful when getting\nstarted:</p>\n<ul>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/quickstart.html#quickstart\" rel=\"nofollow\">Quickstart guide</a> \u2013 this guide covers all the essentials. It will take you between 5 and 10 minutes to go through it.</li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/querying.html#query-operators\" rel=\"nofollow\">Guide to the various query operators</a> describes how to construct queries and combine expressions.</li>\n<li><a href=\"http://docs.peewee-orm.com/en/latest/peewee/models.html#field-types-table\" rel=\"nofollow\">Field types table</a> lists the various field types peewee supports and the parameters they accept.</li>\n</ul>\n<p>For flask helpers, check out the <a href=\"http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#flask-utils\" rel=\"nofollow\">flask_utils extension module</a>. You can also use peewee with the popular extension <a href=\"https://flask-admin.readthedocs.io/en/latest/\" rel=\"nofollow\">flask-admin</a> to provide a Django-like admin interface for managing peewee models.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Defining models is similar to Django or SQLAlchemy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">peewee</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">playhouse.sqlite_ext</span> <span class=\"kn\">import</span> <span class=\"n\">SqliteExtDatabase</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SqliteExtDatabase</span><span class=\"p\">(</span><span class=\"s1\">'my_database.db'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"n\">db</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Tweet</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKeyField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'tweets'</span><span class=\"p\">)</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_date</span> <span class=\"o\">=</span> <span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n    <span class=\"n\">is_published</span> <span class=\"o\">=</span> <span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Connect to the database and create tables:</p>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">create_tables</span><span class=\"p\">([</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">Tweet</span><span class=\"p\">])</span>\n</pre>\n<p>Create a few rows:</p>\n<pre><span class=\"n\">charlie</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'charlie'</span><span class=\"p\">)</span>\n<span class=\"n\">huey</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'huey'</span><span class=\"p\">)</span>\n<span class=\"n\">huey</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># No need to set `is_published` or `created_date` since they</span>\n<span class=\"c1\"># will just use the default values we specified.</span>\n<span class=\"n\">Tweet</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">charlie</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'My first tweet'</span><span class=\"p\">)</span>\n</pre>\n<p>Queries are expressive and composable:</p>\n<pre><span class=\"c1\"># A simple query selecting a user.</span>\n<span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'charles'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get tweets created by one of several users. The \"&lt;&lt;\" operator</span>\n<span class=\"c1\"># corresponds to the SQL \"IN\" operator.</span>\n<span class=\"n\">usernames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'charlie'</span><span class=\"p\">,</span> <span class=\"s1\">'huey'</span><span class=\"p\">,</span> <span class=\"s1\">'mickey'</span><span class=\"p\">]</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">usernames</span><span class=\"p\">)</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">Tweet</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Tweet</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">users</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We could accomplish the same using a JOIN:</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Tweet</span>\n          <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n          <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n          <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">usernames</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># How many tweets were published today?</span>\n<span class=\"n\">tweets_today</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Tweet</span>\n                <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n                    <span class=\"p\">(</span><span class=\"n\">Tweet</span><span class=\"o\">.</span><span class=\"n\">created_date</span> <span class=\"o\">&gt;=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">())</span> <span class=\"o\">&amp;</span>\n                    <span class=\"p\">(</span><span class=\"n\">Tweet</span><span class=\"o\">.</span><span class=\"n\">is_published</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n                <span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Paginate the user table and show me page 3 (users 41-60).</span>\n<span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">paginate</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Order users by the number of tweets they've created:</span>\n<span class=\"n\">tweet_ct</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"n\">Tweet</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">User</span>\n         <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">tweet_ct</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">'ct'</span><span class=\"p\">))</span>\n         <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">Tweet</span><span class=\"p\">,</span> <span class=\"n\">JOIN</span><span class=\"o\">.</span><span class=\"n\">LEFT_OUTER</span><span class=\"p\">)</span>\n         <span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n         <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">tweet_ct</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">()))</span>\n\n<span class=\"c1\"># Do an atomic update</span>\n<span class=\"n\">Counter</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"n\">Counter</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n    <span class=\"n\">Counter</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">==</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>Check out the <a href=\"http://docs.peewee-orm.com/en/latest/peewee/example.html\" rel=\"nofollow\">example app</a> for a working Twitter-clone website written with Flask.</p>\n</div>\n<div id=\"learning-more\">\n<h3>Learning more</h3>\n<p>Check the <a href=\"http://docs.peewee-orm.com/\" rel=\"nofollow\">documentation</a> for more examples.</p>\n<p>Specific question? Come hang out in the #peewee channel on irc.freenode.net, or post to the mailing list, <a href=\"http://groups.google.com/group/peewee-orm\" rel=\"nofollow\">http://groups.google.com/group/peewee-orm</a> . If you would like to report a bug, <a href=\"https://github.com/coleifer/peewee/issues/new\" rel=\"nofollow\">create a new issue</a> on GitHub.</p>\n</div>\n<div id=\"still-want-more-info\">\n<h3>Still want more info?</h3>\n<img alt=\"http://media.charlesleifer.com/blog/photos/wat.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21ade7f35369eb904b06dddf3fc5b60b955470a3/687474703a2f2f6d656469612e636861726c65736c65696665722e636f6d2f626c6f672f70686f746f732f7761742e6a7067\">\n<p>I\u2019ve written a number of blog posts about building applications and web-services with peewee (and usually Flask). If you\u2019d like to see some real-life applications that use peewee, the following resources may be useful:</p>\n<ul>\n<li><a href=\"http://charlesleifer.com/blog/saturday-morning-hack-a-little-note-taking-app-with-flask/\" rel=\"nofollow\">Building a note-taking app with Flask and Peewee</a> as well as <a href=\"http://charlesleifer.com/blog/saturday-morning-hacks-revisiting-the-notes-app/\" rel=\"nofollow\">Part 2</a> and <a href=\"http://charlesleifer.com/blog/saturday-morning-hacks-adding-full-text-search-to-the-flask-note-taking-app/\" rel=\"nofollow\">Part 3</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/saturday-morning-hacks-building-an-analytics-app-with-flask/\" rel=\"nofollow\">Analytics web service built with Flask and Peewee</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/saturday-morning-hack-personalized-news-digest-with-boolean-query-parser/\" rel=\"nofollow\">Personalized news digest (with a boolean query parser!)</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/using-peewee-to-explore-csv-files/\" rel=\"nofollow\">Using peewee to explore CSV files</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/structuring-flask-apps-a-how-to-for-those-coming-from-django/\" rel=\"nofollow\">Structuring Flask apps with Peewee</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/creating-a-personal-password-manager/\" rel=\"nofollow\">Creating a lastpass clone with Flask and Peewee</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/web-based-encrypted-file-storage-using-flask-and-aws/\" rel=\"nofollow\">Building a web-based encrypted file manager with Flask, peewee and S3</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/building-bookmarking-service-python-and-phantomjs/\" rel=\"nofollow\">Creating a bookmarking web-service that takes screenshots of your bookmarks</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/dont-sweat-small-stuff-use-flask-blueprints/\" rel=\"nofollow\">Building a pastebin, wiki and a bookmarking service using Flask and Peewee</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/encrypted-sqlite-databases-with-python-and-sqlcipher/\" rel=\"nofollow\">Encrypted databases with Python and SQLCipher</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/dear-diary-an-encrypted-command-line-diary-with-python/\" rel=\"nofollow\">Dear Diary: An Encrypted, Command-Line Diary with Peewee</a>.</li>\n<li><a href=\"http://charlesleifer.com/blog/querying-tree-structures-in-sqlite-using-python-and-the-transitive-closure-extension/\" rel=\"nofollow\">Query Tree Structures in SQLite using Peewee and the Transitive Closure Extension</a>.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3432542, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "5e599259ba97cb547fb5a77a5f9a955b", "sha256": "3cc98d874675fdfff9494bda97e8494e4dfcd8320ecf30ad8eba43e4c8176653"}, "downloads": -1, "filename": "herman-1.1.1.tar.gz", "has_sig": false, "md5_digest": "5e599259ba97cb547fb5a77a5f9a955b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 507152, "upload_time": "2016-08-25T20:27:57", "upload_time_iso_8601": "2016-08-25T20:27:57.532163Z", "url": "https://files.pythonhosted.org/packages/da/64/5062a9bccb2f2e4b0c6c744c3c413f991b0197c514ed8c67fcf8dc282633/herman-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "dd2f86c495fdaa0ab0b57b577a77ca70", "sha256": "8a81cd06aaa86855340ff14f9f3827f152a89324c817d31661ff1ea7d2733c98"}, "downloads": -1, "filename": "herman-1.2.0.tar.gz", "has_sig": false, "md5_digest": "dd2f86c495fdaa0ab0b57b577a77ca70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 507157, "upload_time": "2016-08-25T20:28:19", "upload_time_iso_8601": "2016-08-25T20:28:19.480607Z", "url": "https://files.pythonhosted.org/packages/f5/9f/ada00683dea4fdd59e7f144128a4f7d5770bbf4f622270b020a9dbac8c53/herman-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "7bfcaab6d8da0c8739802e5766127166", "sha256": "2a2fa2a29adcca0516797b4064ef04ad82fd8adeeef4c8da867fc16ad2b71b28"}, "downloads": -1, "filename": "herman-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7bfcaab6d8da0c8739802e5766127166", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 507156, "upload_time": "2016-08-25T20:51:34", "upload_time_iso_8601": "2016-08-25T20:51:34.524354Z", "url": "https://files.pythonhosted.org/packages/a6/97/96370cc99d99489c0510ea24006883d0dc26a660f28e493fd8811999ed16/herman-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "7a4df0ab0a86d76a9c95eb55f19dc021", "sha256": "fcd49d351e662ec69bf6ebbef8514e86d1abd83dd927751ed5f9c756e5a41d1f"}, "downloads": -1, "filename": "herman-1.2.2.tar.gz", "has_sig": false, "md5_digest": "7a4df0ab0a86d76a9c95eb55f19dc021", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 507611, "upload_time": "2016-12-02T19:12:55", "upload_time_iso_8601": "2016-12-02T19:12:55.497654Z", "url": "https://files.pythonhosted.org/packages/0f/42/48a05e747769c3661640d9c64a2659a404651cccbd24980736adc8320db2/herman-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "82f9a160a9974f63c00e931be729aefa", "sha256": "a258fadaaa08a446122c7c3aa6a19d9b6319fedbb394da4e1bc04f3253e131bf"}, "downloads": -1, "filename": "herman-1.2.3.tar.gz", "has_sig": false, "md5_digest": "82f9a160a9974f63c00e931be729aefa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 520031, "upload_time": "2016-12-23T21:22:07", "upload_time_iso_8601": "2016-12-23T21:22:07.274433Z", "url": "https://files.pythonhosted.org/packages/17/db/d759eb6f6ddabd7115ad65af55b78f7bb81c594c4afcbf574335c52a16dc/herman-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "b21b2d130998c1dc80ee7ec652532059", "sha256": "3664aa54a6be95151b1fefa08e332b9eb8203a6c21187323db07b594f864c188"}, "downloads": -1, "filename": "herman-1.2.4.tar.gz", "has_sig": false, "md5_digest": "b21b2d130998c1dc80ee7ec652532059", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 520027, "upload_time": "2016-12-29T19:39:32", "upload_time_iso_8601": "2016-12-29T19:39:32.335504Z", "url": "https://files.pythonhosted.org/packages/31/49/9cf90b310aea6ed7edbc0a4f81a3ee3cf410a6a75bc9a3a581276715fbc0/herman-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "e7b4683722fa0b05fc80ae74becf0a50", "sha256": "558862559cfa410aab473e4bff27a562b6a2de5d60023da3de3d5bbe6b0ea20e"}, "downloads": -1, "filename": "herman-1.2.5.tar.gz", "has_sig": false, "md5_digest": "e7b4683722fa0b05fc80ae74becf0a50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 517265, "upload_time": "2017-12-20T21:23:12", "upload_time_iso_8601": "2017-12-20T21:23:12.166336Z", "url": "https://files.pythonhosted.org/packages/79/78/26a0167b209eb4fcfd038b59c55f53913a810902b746f27d38d8ceba5f4e/herman-1.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7b4683722fa0b05fc80ae74becf0a50", "sha256": "558862559cfa410aab473e4bff27a562b6a2de5d60023da3de3d5bbe6b0ea20e"}, "downloads": -1, "filename": "herman-1.2.5.tar.gz", "has_sig": false, "md5_digest": "e7b4683722fa0b05fc80ae74becf0a50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 517265, "upload_time": "2017-12-20T21:23:12", "upload_time_iso_8601": "2017-12-20T21:23:12.166336Z", "url": "https://files.pythonhosted.org/packages/79/78/26a0167b209eb4fcfd038b59c55f53913a810902b746f27d38d8ceba5f4e/herman-1.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:33 2020"}