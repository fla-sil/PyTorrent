{"info": {"author": "Allison Parrish", "author_email": "allison@decontextualize.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Artistic Software", "Topic :: Software Development :: Libraries"], "description": "Simple Neighbors\n================\n\n.. image:: https://img.shields.io/travis/aparrish/simpleneighbors.svg\n        :target: https://travis-ci.org/aparrish/simpleneighbors\n\n.. image:: https://coveralls.io/repos/github/aparrish/simpleneighbors/badge.svg?branch=master\n        :target: https://coveralls.io/github/aparrish/simpleneighbors?branch=master\n\n.. image:: https://img.shields.io/pypi/v/simpleneighbors.svg\n        :target: https://pypi.python.org/pypi/simpleneighbors\n\nSimple Neighbors is a clean and easy interface for performing nearest-neighbor\nlookups on items from a corpus. To install the package::\n\n    pip install simpleneighbors[annoy]\n\nHere's a quick example, showing how to find the names of colors most similar to\n'pink' in the `xkcd colors list\n<https://github.com/dariusk/corpora/blob/master/data/colors/xkcd.json>`_::\n\n    >>> from simpleneighbors import SimpleNeighbors\n    >>> import json\n    >>> color_data = json.load(open('xkcd.json'))['colors']\n    >>> hex2int = lambda s: [int(s[n:n+2], 16) for n in range(1,7,2)]\n    >>> colors = [(item['color'], hex2int(item['hex'])) for item in color_data]\n    >>> sim = SimpleNeighbors(3)\n    >>> sim.feed(colors)\n    >>> sim.build()\n    >>> list(sim.neighbors('pink', 5))\n    ['pink', 'bubblegum pink', 'pale magenta', 'dark mauve', 'light plum']\n\nFor a more complete example, refer to my `Understanding Word Vectors notebook\n<https://github.com/aparrish/rwet/blob/master/understanding-word-vectors.ipynb>`_,\nwhich shows how to use Simple Neighbors to perform similarity lookups on word\nvectors.\n\nRead the complete Simple Neighbors documentation here:\nhttps://simpleneighbors.readthedocs.org.\n\nWhy Simple Neighbors?\n---------------------\n\nApproximate nearest-neighbor lookups are a quick way to find the items in your\ndata set that are closest (or most similar to) any other item in your data, or\nan arbitrary point in the space that your data defines. Your data items might\nbe colors in a (R, G, B) space, or sprites in a (X, Y) space, or word vectors\nin a 300-dimensional space.\n\nYou could always perform pairwise distance calculations to find nearest\nneighbors in your data, but for data of any appreciable size and complexity,\nthis kind of calculation is unbearably slow. Simple Neighbors uses one of a\nhandful of libraries behind the scenes to provide approximate nearest-neighbor\nlookups, which are ultimately a little less accurate than pairwise calculations\nbut much, much faster.\n\nThe library also keeps track of your data, sparing you the extra step of\nmapping each item in your data to its integer index (at the potential cost of\nsome redundancy in data storage, depending on your application).\n\nI made Simple Neighbors because I use nearest neighbor lookups all the time and\nfound myself writing and rewriting the same bits of wrapper code over and over\nagain. I wanted to hide a little bit of the complexity of using these libraries\nto make it easier to build small prototypes and teach workshops using\nnearest-neighbor lookups.\n\nMultiple backend support\n------------------------\n\nSimple Neighbors relies on the approximate nearest neighbor index\nimplementations found in other libraries. By default, Simple Neighbors will\nchoose the best backend based on the packages installed in your environment.\n(You can also specify which backend to use by hand, or create your own.)\n\nCurrently supported backend libraries include:\n\n* ``Annoy``: Erik Bernhardsson's `Annoy <https://pypi.org/project/annoy/>`_ library\n* ``Sklearn``: `scikit-learn's NearestNeighbors <https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestNeighbors.html#sklearn.neighbors.NearestNeighbors>`_\n* ``BruteForcePurePython``: Pure Python brute-force search (included in package)\n\nWhen you install Simple Neighbors, you can direct ``pip`` to install the\nrequired packages for a given backend. For example, to install Simple Neighbors\nwith Annoy::\n\n    pip install simpleneighbors[annoy]\n\nAnnoy is highly recommended! This is the preferred way to use Simple Neighbors.\n\nTo install Simple Neighbors alongside scikit-learn to use the ``Sklearn``\nbackend (which makes use of scikit-learn's `NearestNeighbors` class)::\n\n    pip install simpleneighbors[sklearn]\n\nIf you can't install Annoy or scikit-learn on your platform, you can also use a\npure Python backend::\n\n    pip install simpleneighbors[purepython]\n\nNote that the pure Python version uses a brute force search and is therefore\nvery slow. In general, it's not suitable for datasets with more than a few\nthousand items (or more than a handful of dimensions).\n\nSee the documentation for the ``SimpleNeighbors`` class for more information on\nspecifying backends.\n\n\n\n\n\nHistory\n=======\n\n0.1.0 (2020-01-12)\n------------------\n\n* Support for multiple backends. This was implemented primarily to ease\n  installation for users who can't install Annoy (because of a lack of binary\n  packaging for their platforms).\n\n0.0.1 (2018-07-13)\n------------------\n\n* Initial release.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aparrish/simpleneighbors", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "simpleneighbors", "package_url": "https://pypi.org/project/simpleneighbors/", "platform": "any", "project_url": "https://pypi.org/project/simpleneighbors/", "project_urls": {"Homepage": "https://github.com/aparrish/simpleneighbors"}, "release_url": "https://pypi.org/project/simpleneighbors/0.1.0/", "requires_dist": ["annoy (>=1.16.0); extra == 'annoy'", "annoy (>=1.16.0); extra == 'dev'", "scikit-learn (>=0.20); extra == 'dev'", "coverage; extra == 'dev'", "flake8; extra == 'dev'", "mock; (python_version <= \"2.7\") and extra == 'dev'", "scikit-learn (>=0.20); extra == 'sklearn'"], "requires_python": "", "summary": "A clean and easy interface for nearest-neighbors lookup", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"simple-neighbors\">\n<h2>Simple Neighbors</h2>\n<a href=\"https://travis-ci.org/aparrish/simpleneighbors\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/aparrish/simpleneighbors.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb8ef713179056587e0165ab52be9e87258e7a42/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f61706172726973682f73696d706c656e65696768626f72732e737667\"></a>\n<a href=\"https://coveralls.io/github/aparrish/simpleneighbors?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/aparrish/simpleneighbors/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddab39138b4164ff71f8340c16872dfce6c8c3b9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f61706172726973682f73696d706c656e65696768626f72732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/simpleneighbors\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/simpleneighbors.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e450c285d5a6d7168478429c12fb05b42f76e90/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73696d706c656e65696768626f72732e737667\"></a>\n<p>Simple Neighbors is a clean and easy interface for performing nearest-neighbor\nlookups on items from a corpus. To install the package:</p>\n<pre>pip install simpleneighbors[annoy]\n</pre>\n<p>Here\u2019s a quick example, showing how to find the names of colors most similar to\n\u2018pink\u2019 in the <a href=\"https://github.com/dariusk/corpora/blob/master/data/colors/xkcd.json\" rel=\"nofollow\">xkcd colors list</a>:</p>\n<pre>&gt;&gt;&gt; from simpleneighbors import SimpleNeighbors\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; color_data = json.load(open('xkcd.json'))['colors']\n&gt;&gt;&gt; hex2int = lambda s: [int(s[n:n+2], 16) for n in range(1,7,2)]\n&gt;&gt;&gt; colors = [(item['color'], hex2int(item['hex'])) for item in color_data]\n&gt;&gt;&gt; sim = SimpleNeighbors(3)\n&gt;&gt;&gt; sim.feed(colors)\n&gt;&gt;&gt; sim.build()\n&gt;&gt;&gt; list(sim.neighbors('pink', 5))\n['pink', 'bubblegum pink', 'pale magenta', 'dark mauve', 'light plum']\n</pre>\n<p>For a more complete example, refer to my <a href=\"https://github.com/aparrish/rwet/blob/master/understanding-word-vectors.ipynb\" rel=\"nofollow\">Understanding Word Vectors notebook</a>,\nwhich shows how to use Simple Neighbors to perform similarity lookups on word\nvectors.</p>\n<p>Read the complete Simple Neighbors documentation here:\n<a href=\"https://simpleneighbors.readthedocs.org\" rel=\"nofollow\">https://simpleneighbors.readthedocs.org</a>.</p>\n<div id=\"why-simple-neighbors\">\n<h3>Why Simple Neighbors?</h3>\n<p>Approximate nearest-neighbor lookups are a quick way to find the items in your\ndata set that are closest (or most similar to) any other item in your data, or\nan arbitrary point in the space that your data defines. Your data items might\nbe colors in a (R, G, B) space, or sprites in a (X, Y) space, or word vectors\nin a 300-dimensional space.</p>\n<p>You could always perform pairwise distance calculations to find nearest\nneighbors in your data, but for data of any appreciable size and complexity,\nthis kind of calculation is unbearably slow. Simple Neighbors uses one of a\nhandful of libraries behind the scenes to provide approximate nearest-neighbor\nlookups, which are ultimately a little less accurate than pairwise calculations\nbut much, much faster.</p>\n<p>The library also keeps track of your data, sparing you the extra step of\nmapping each item in your data to its integer index (at the potential cost of\nsome redundancy in data storage, depending on your application).</p>\n<p>I made Simple Neighbors because I use nearest neighbor lookups all the time and\nfound myself writing and rewriting the same bits of wrapper code over and over\nagain. I wanted to hide a little bit of the complexity of using these libraries\nto make it easier to build small prototypes and teach workshops using\nnearest-neighbor lookups.</p>\n</div>\n<div id=\"multiple-backend-support\">\n<h3>Multiple backend support</h3>\n<p>Simple Neighbors relies on the approximate nearest neighbor index\nimplementations found in other libraries. By default, Simple Neighbors will\nchoose the best backend based on the packages installed in your environment.\n(You can also specify which backend to use by hand, or create your own.)</p>\n<p>Currently supported backend libraries include:</p>\n<ul>\n<li><tt>Annoy</tt>: Erik Bernhardsson\u2019s <a href=\"https://pypi.org/project/annoy/\" rel=\"nofollow\">Annoy</a> library</li>\n<li><tt>Sklearn</tt>: <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestNeighbors.html#sklearn.neighbors.NearestNeighbors\" rel=\"nofollow\">scikit-learn\u2019s NearestNeighbors</a></li>\n<li><tt>BruteForcePurePython</tt>: Pure Python brute-force search (included in package)</li>\n</ul>\n<p>When you install Simple Neighbors, you can direct <tt>pip</tt> to install the\nrequired packages for a given backend. For example, to install Simple Neighbors\nwith Annoy:</p>\n<pre>pip install simpleneighbors[annoy]\n</pre>\n<p>Annoy is highly recommended! This is the preferred way to use Simple Neighbors.</p>\n<p>To install Simple Neighbors alongside scikit-learn to use the <tt>Sklearn</tt>\nbackend (which makes use of scikit-learn\u2019s <cite>NearestNeighbors</cite> class):</p>\n<pre>pip install simpleneighbors[sklearn]\n</pre>\n<p>If you can\u2019t install Annoy or scikit-learn on your platform, you can also use a\npure Python backend:</p>\n<pre>pip install simpleneighbors[purepython]\n</pre>\n<p>Note that the pure Python version uses a brute force search and is therefore\nvery slow. In general, it\u2019s not suitable for datasets with more than a few\nthousand items (or more than a handful of dimensions).</p>\n<p>See the documentation for the <tt>SimpleNeighbors</tt> class for more information on\nspecifying backends.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.0 (2020-01-12)</h3>\n<ul>\n<li>Support for multiple backends. This was implemented primarily to ease\ninstallation for users who can\u2019t install Annoy (because of a lack of binary\npackaging for their platforms).</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.0.1 (2018-07-13)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6442269, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "42b52ad37e69fbd32a0fb3dee5296fd5", "sha256": "985402585d63859867d67a9d9527653ee6760b7db77bc9f2d52e5093437a4829"}, "downloads": -1, "filename": "simpleneighbors-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42b52ad37e69fbd32a0fb3dee5296fd5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6880, "upload_time": "2018-07-13T17:57:07", "upload_time_iso_8601": "2018-07-13T17:57:07.397814Z", "url": "https://files.pythonhosted.org/packages/a2/8e/b8ca38e4305bdf5c4cac5d9bf4b65022a2d3641a978b28ce92f9e4063c7b/simpleneighbors-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56a175af44f6ab572634524bf3f6aa47", "sha256": "5f74562ab6dee49c98cba5ee0feb36bd6d38d49979f04f1775abba1672a99520"}, "downloads": -1, "filename": "simpleneighbors-0.0.1.tar.gz", "has_sig": false, "md5_digest": "56a175af44f6ab572634524bf3f6aa47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12977, "upload_time": "2018-07-13T17:57:08", "upload_time_iso_8601": "2018-07-13T17:57:08.688110Z", "url": "https://files.pythonhosted.org/packages/0c/05/e0d0876a71c72878d76db6ed7f007af6346a2fcf6be714b71b64ef60bd97/simpleneighbors-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "6ff9ed15bdbaafbb7f6bcbdfbac65469", "sha256": "840f7729ad8696830e55173e74acc4af7f89ef6e78c2fe92db818eacc934095c"}, "downloads": -1, "filename": "simpleneighbors-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ff9ed15bdbaafbb7f6bcbdfbac65469", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12636, "upload_time": "2020-01-13T03:33:06", "upload_time_iso_8601": "2020-01-13T03:33:06.010152Z", "url": "https://files.pythonhosted.org/packages/f9/10/9092e15d9aa4a9e5a263416121f124e565766767e7866e11d7074ec50df5/simpleneighbors-0.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ff9ed15bdbaafbb7f6bcbdfbac65469", "sha256": "840f7729ad8696830e55173e74acc4af7f89ef6e78c2fe92db818eacc934095c"}, "downloads": -1, "filename": "simpleneighbors-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ff9ed15bdbaafbb7f6bcbdfbac65469", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12636, "upload_time": "2020-01-13T03:33:06", "upload_time_iso_8601": "2020-01-13T03:33:06.010152Z", "url": "https://files.pythonhosted.org/packages/f9/10/9092e15d9aa4a9e5a263416121f124e565766767e7866e11d7074ec50df5/simpleneighbors-0.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:10:27 2020"}