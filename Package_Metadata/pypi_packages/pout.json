{"info": {"author": "Jay Marcyes", "author_email": "jay@marcyes.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Testing"], "description": "# Pout\n\nA collection of handy functions for printing out variables and debugging Python code.\n\n[print](https://docs.python.org/3/library/functions.html#print) didn't give enough information while debugging, [pprint](https://docs.python.org/3/library/pprint.html) wasn't much better. I was also getting sick of typing things like: `print(\"var = \", var)`.\n\nPout tries to print out variables with their name, and for good measure, it also prints where the `pout` function was called so you can easily find it and delete it when you're done debugging.\n\nI use pout extensively in basically every python project I work on.\n\n\n## Methods\n\n### pout.v(arg1, [arg2, ...]) -- easy way to print variables\n\nexample\n\n```python\nfoo = 1\npout.v(foo)\n\nbar = [1, 2, [3, 4], 5]\npout.v(bar)\n```\n\nshould print something like:\n\n    foo = 1\n    (/file.py:line)\n\n    bar (4) =\n    [\n            0: 1,\n            1: 2,\n            2:\n                    [\n                            0: 3,\n                            1: 4\n                    ],\n            3: 5\n    ]\n    (/file.py:line)\n\nYou can send as many variables as you want into the call\n\n\n```python\n# pass in as many variables as you want\npout.v(foo, bar, che)\n\n# a multi-line call is also fine\npout.v(\n    foo,\n    bar\n)\n```\n\n\n### pout.h() -- easy way to print \"here\" in the code\n\nexample\n\n```python\npout.h(1)\n# do something else\npout.h(2)\n\n# do even more of something else\npout.h()\n```\n\nShould print something like:\n\n    here 1 (/file.py:line)\n\n    here 2 (/file.py:line)\n\n    here N (/file.py:N)\n\n\n### pout.t() -- print a backtrace\n\nPrints a nicely formatted backtrace, by default this should compact system python calls (eg, anything in dist-packages) which makes the backtrace easier for me to follow.\n\nexample:\n\n```python\npout.t()\n```\n\nshould print something like:\n\n    15 - C:\\Python27\\lib\\runpy.py:162\n    14 - C:\\Python27\\lib\\runpy.py:72\n    13 - C:\\Python27\\lib\\unittest\\__main__.py:12\n    12 - C:\\Python27\\lib\\unittest\\main.py:95\n    11 - C:\\Python27\\lib\\unittest\\main.py:229\n    10 - C:\\Python27\\lib\\unittest\\runner.py:151\n    09 - C:\\Python27\\lib\\unittest\\suite.py:65\n    08 - C:\\Python27\\lib\\unittest\\suite.py:103\n    07 - C:\\Python27\\lib\\unittest\\suite.py:65\n    06 - C:\\Python27\\lib\\unittest\\suite.py:103\n    05 - C:\\Python27\\lib\\unittest\\suite.py:65\n    04 - C:\\Python27\\lib\\unittest\\suite.py:103\n    03 - C:\\Python27\\lib\\unittest\\case.py:376\n    02 - C:\\Python27\\lib\\unittest\\case.py:318\n    01 - C:\\Projects\\Pout\\_pout\\src\\test_pout.py:50\n\n            pout.t()\n\n\n### pout.p([title]) -- quick and dirty profiling\n\nexample\n\n```python\np(\"starting profile\")\ntime.sleep(1)\np() # stop the \"starting profile\" session\n\n\n# you can go N levels deep\np(\"one\")\np(\"two\")\ntime.sleep(0.5)\np() # stop profiling of \"two\"\ntime.sleep(0.5)\np() # stop profiling of \"one\"\n\n\n# you can also use with\nwith p(\"benchmarking\"):\n    time.sleep(0.5)\n```\n\nshould print something like:\n\n    starting profile - 1008.2 ms\n      start: 1368137723.7 (/file/path:n)\n      stop: 1368137724.71(/file/path:n)\n\n\n    one > two - 509.2 ms\n      start: 1368137722.69 (/file/path:n)\n      stop: 1368137723.2(/file/path:n)\n\n\n    one - 1025.9 ms\n      start: 1368137722.68 (/file/path:n)\n      stop: 1368137723.7(/file/path:n)\n\n\n### pout.x(arg1, [arg2, ...]) -- like pout.v but then will run sys.exit(1)\n\nThis just prints out where it was called from, so you can remember where you exited the code while debugging\n\nexample:\n  \n```python\npout.x()\n```\n\nwill print something like this before exiting with an exit code of 1:\n\n```python\nexit (/file/path:n)\n```\n\n\n### pout.b([title[, rows[, sep]]]) -- prints lots of lines to break up output\n\nThis is is handy if you are printing lots of stuff in a loop and you want to break up the output into sections.\n\nexample:\n\n```python\npout.b()\npout.b('this is the title')\npout.b('this is the title 2', 5)\npout.b('this is the title 3', 3, '=')\n```\n\nWould result in output like:\n\n    ********************************************************************************\n    (/file/path:n)\n\n\n    ****************************** this is the title *******************************\n    (/file/path:n)\n\n\n    ********************************************************************************\n    ********************************************************************************\n    ***************************** this is the title 2 ******************************\n    ********************************************************************************\n    ********************************************************************************\n    (/file/path:n)\n\n\n    ================================================================================\n    ============================= this is the title 3 ==============================\n    ===============================================================================\n    (/file/path:n)\n\n\n### pout.c(str1, [str2, ...]) -- print info about each char in each str\n\nKind of like `od -c` on the command line.\n\nexample:\n\n```python\npout.c('this')\n```\n\nwill print something like:\n\n    Total Characters: 4\n    t\t't'\t\\u0074\tLATIN SMALL LETTER T\n    h\t'h'\t\\u0068\tLATIN SMALL LETTER H\n    i\t'i'\t\\u0069\tLATIN SMALL LETTER I\n    s\t's'\t\\u0073\tLATIN SMALL LETTER S\n    (/file/path:n)\n\nThis could fail if Python isn't compiled with 4 byte unicode support, just something to be aware of, but chances are, if you don't have 4 byte unicode supported Python, you're not doing much with 4 byte unicode.\n\n\n### pout.s(arg1, [arg2, ...]) -- easy way to return pretty versions of variables\n\n  Just like `pout.v()` but will return the value as a string\n\n\n### pout.ss(arg1, [arg2, ...]) -- easy way to return pretty versions of variables without meta information\n\n  Just like `pout.vv()` but will return the value as a string\n\n\n### pout.l([logger_name, [logger_level]]) -- turn logging on just for this context\n\nTurns logging on for the given level (defaults to `logging.DEBUG`) and prints the logs to __stderr__. Useful when you just want to check the logs of something without modifying your current logging configuration.\n\nexample:\n\n```python\nwith pout.l():\n    logger.debug(\"This will print to the screen even if logging is off\")\nlogger.debug(\"this will not print if logging is off\")\n\nwith pout.l(\"name\"):\n    # if \"name\" logger is used it will print to stderr\n# \"name\" logger goes back to previous configuration\n```\n\n### pout.tofile([path])\n\nRoutes pout's output to a file (defaults to `./pout.txt`)\n\nexample:\n\n```python\nwith pout.tofile():\n\t# everything in this with block will print to a file in current directory\n\tpout.b()\n\ts = \"foo\"\n\tpout.v(s)\n\t\npout.s() # this will print to stderr\n```\n\n\n## Customizing Pout\n\n### object magic method\n\nAny class object can define a `__pout__` magic method, similar to Python's built in `__str__` magic method that can return a customized string of the object if you want to. This method can return anything, it will be run through Pout's internal stringify methods to convert it to a string and print it out.\n\n\n### Customizing functionality\n\nYou can create your own interface classes:\n\n```python\nfrom pout.interface import ValueInterface\nclass VChild(ValueInterface):\n\tdef value(self):\n\t\t# we can change how pout.v() prints here\n\t\treturn \"some new string\"\n\n# any pout.v calls will now use your child class, customize as you like\npout.V_CLASS = VChild\n```\n\n\n## Console commands\n\n### pout json\n\nrunning a command on the command line that outputs a whole a bunch of json? Pout can help:\n\n    $ some-command-that-outputs-json | pout json\n\n\n### pout char\n\nRuns `pout.c` but on the output from a command line script:\n\n    $ echo \"some string with chars to analyze\" | pout char\n\n\n## Install\n\nUse PIP\n\n    pip install pout\n\nGenerally, the pypi version and the github version shouldn't be that out of sync, but just in case, you can install from github also:\n\n    pip install --upgrade \"git+https://github.com/Jaymon/pout#egg=pout\"\n\n\n-------------------------------------------------------------------------------\n\n## Make Pout easier to use\n\nWhen debugging, it's really nice not having to put `import pout` at the top of every module you want to use it in, so there's a command for that, if you put:\n\n```python\nimport pout\npout.inject()\n```\n\nSomewhere near the top of your application startup script, then `pout` will be available in all your files whether you imported it or not, it will be just like `str()`, `object`, or the rest of python's standard library.\n\nIf you don't even want to bother with doing that, then just run:\n\n```\n$ pout inject\n```\n\nfrom the command line and it will modify your python environment to make pout available as a builtin module, just like the python standard library. This is super handy for development virtual environments.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Jaymon/pout", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pout", "package_url": "https://pypi.org/project/pout/", "platform": "", "project_url": "https://pypi.org/project/pout/", "project_urls": {"Homepage": "http://github.com/Jaymon/pout"}, "release_url": "https://pypi.org/project/pout/0.8.14/", "requires_dist": null, "requires_python": "", "summary": "Prints out python variables in an easy to read way, handy for debugging", "version": "0.8.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pout</h1>\n<p>A collection of handy functions for printing out variables and debugging Python code.</p>\n<p><a href=\"https://docs.python.org/3/library/functions.html#print\" rel=\"nofollow\">print</a> didn't give enough information while debugging, <a href=\"https://docs.python.org/3/library/pprint.html\" rel=\"nofollow\">pprint</a> wasn't much better. I was also getting sick of typing things like: <code>print(\"var = \", var)</code>.</p>\n<p>Pout tries to print out variables with their name, and for good measure, it also prints where the <code>pout</code> function was called so you can easily find it and delete it when you're done debugging.</p>\n<p>I use pout extensively in basically every python project I work on.</p>\n<h2>Methods</h2>\n<h3>pout.v(arg1, [arg2, ...]) -- easy way to print variables</h3>\n<p>example</p>\n<pre><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n<p>should print something like:</p>\n<pre><code>foo = 1\n(/file.py:line)\n\nbar (4) =\n[\n        0: 1,\n        1: 2,\n        2:\n                [\n                        0: 3,\n                        1: 4\n                ],\n        3: 5\n]\n(/file.py:line)\n</code></pre>\n<p>You can send as many variables as you want into the call</p>\n<pre><span class=\"c1\"># pass in as many variables as you want</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">che</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># a multi-line call is also fine</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span>\n    <span class=\"n\">foo</span><span class=\"p\">,</span>\n    <span class=\"n\">bar</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>pout.h() -- easy way to print \"here\" in the code</h3>\n<p>example</p>\n<pre><span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># do something else</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># do even more of something else</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">()</span>\n</pre>\n<p>Should print something like:</p>\n<pre><code>here 1 (/file.py:line)\n\nhere 2 (/file.py:line)\n\nhere N (/file.py:N)\n</code></pre>\n<h3>pout.t() -- print a backtrace</h3>\n<p>Prints a nicely formatted backtrace, by default this should compact system python calls (eg, anything in dist-packages) which makes the backtrace easier for me to follow.</p>\n<p>example:</p>\n<pre><span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">()</span>\n</pre>\n<p>should print something like:</p>\n<pre><code>15 - C:\\Python27\\lib\\runpy.py:162\n14 - C:\\Python27\\lib\\runpy.py:72\n13 - C:\\Python27\\lib\\unittest\\__main__.py:12\n12 - C:\\Python27\\lib\\unittest\\main.py:95\n11 - C:\\Python27\\lib\\unittest\\main.py:229\n10 - C:\\Python27\\lib\\unittest\\runner.py:151\n09 - C:\\Python27\\lib\\unittest\\suite.py:65\n08 - C:\\Python27\\lib\\unittest\\suite.py:103\n07 - C:\\Python27\\lib\\unittest\\suite.py:65\n06 - C:\\Python27\\lib\\unittest\\suite.py:103\n05 - C:\\Python27\\lib\\unittest\\suite.py:65\n04 - C:\\Python27\\lib\\unittest\\suite.py:103\n03 - C:\\Python27\\lib\\unittest\\case.py:376\n02 - C:\\Python27\\lib\\unittest\\case.py:318\n01 - C:\\Projects\\Pout\\_pout\\src\\test_pout.py:50\n\n        pout.t()\n</code></pre>\n<h3>pout.p([title]) -- quick and dirty profiling</h3>\n<p>example</p>\n<pre><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"s2\">\"starting profile\"</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">()</span> <span class=\"c1\"># stop the \"starting profile\" session</span>\n\n\n<span class=\"c1\"># you can go N levels deep</span>\n<span class=\"n\">p</span><span class=\"p\">(</span><span class=\"s2\">\"one\"</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">(</span><span class=\"s2\">\"two\"</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">()</span> <span class=\"c1\"># stop profiling of \"two\"</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">()</span> <span class=\"c1\"># stop profiling of \"one\"</span>\n\n\n<span class=\"c1\"># you can also use with</span>\n<span class=\"k\">with</span> <span class=\"n\">p</span><span class=\"p\">(</span><span class=\"s2\">\"benchmarking\"</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</pre>\n<p>should print something like:</p>\n<pre><code>starting profile - 1008.2 ms\n  start: 1368137723.7 (/file/path:n)\n  stop: 1368137724.71(/file/path:n)\n\n\none &gt; two - 509.2 ms\n  start: 1368137722.69 (/file/path:n)\n  stop: 1368137723.2(/file/path:n)\n\n\none - 1025.9 ms\n  start: 1368137722.68 (/file/path:n)\n  stop: 1368137723.7(/file/path:n)\n</code></pre>\n<h3>pout.x(arg1, [arg2, ...]) -- like pout.v but then will run sys.exit(1)</h3>\n<p>This just prints out where it was called from, so you can remember where you exited the code while debugging</p>\n<p>example:</p>\n<pre><span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">()</span>\n</pre>\n<p>will print something like this before exiting with an exit code of 1:</p>\n<pre><span class=\"n\">exit</span> <span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">file</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<h3>pout.b([title[, rows[, sep]]]) -- prints lots of lines to break up output</h3>\n<p>This is is handy if you are printing lots of stuff in a loop and you want to break up the output into sections.</p>\n<p>example:</p>\n<pre><span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">()</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s1\">'this is the title'</span><span class=\"p\">)</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s1\">'this is the title 2'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s1\">'this is the title 3'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">)</span>\n</pre>\n<p>Would result in output like:</p>\n<pre><code>********************************************************************************\n(/file/path:n)\n\n\n****************************** this is the title *******************************\n(/file/path:n)\n\n\n********************************************************************************\n********************************************************************************\n***************************** this is the title 2 ******************************\n********************************************************************************\n********************************************************************************\n(/file/path:n)\n\n\n================================================================================\n============================= this is the title 3 ==============================\n===============================================================================\n(/file/path:n)\n</code></pre>\n<h3>pout.c(str1, [str2, ...]) -- print info about each char in each str</h3>\n<p>Kind of like <code>od -c</code> on the command line.</p>\n<p>example:</p>\n<pre><span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'this'</span><span class=\"p\">)</span>\n</pre>\n<p>will print something like:</p>\n<pre><code>Total Characters: 4\nt\t't'\t\\u0074\tLATIN SMALL LETTER T\nh\t'h'\t\\u0068\tLATIN SMALL LETTER H\ni\t'i'\t\\u0069\tLATIN SMALL LETTER I\ns\t's'\t\\u0073\tLATIN SMALL LETTER S\n(/file/path:n)\n</code></pre>\n<p>This could fail if Python isn't compiled with 4 byte unicode support, just something to be aware of, but chances are, if you don't have 4 byte unicode supported Python, you're not doing much with 4 byte unicode.</p>\n<h3>pout.s(arg1, [arg2, ...]) -- easy way to return pretty versions of variables</h3>\n<p>Just like <code>pout.v()</code> but will return the value as a string</p>\n<h3>pout.ss(arg1, [arg2, ...]) -- easy way to return pretty versions of variables without meta information</h3>\n<p>Just like <code>pout.vv()</code> but will return the value as a string</p>\n<h3>pout.l([logger_name, [logger_level]]) -- turn logging on just for this context</h3>\n<p>Turns logging on for the given level (defaults to <code>logging.DEBUG</code>) and prints the logs to <strong>stderr</strong>. Useful when you just want to check the logs of something without modifying your current logging configuration.</p>\n<p>example:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">():</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"This will print to the screen even if logging is off\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"this will not print if logging is off\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># if \"name\" logger is used it will print to stderr</span>\n<span class=\"c1\"># \"name\" logger goes back to previous configuration</span>\n</pre>\n<h3>pout.tofile([path])</h3>\n<p>Routes pout's output to a file (defaults to <code>./pout.txt</code>)</p>\n<p>example:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">tofile</span><span class=\"p\">():</span>\n\t<span class=\"c1\"># everything in this with block will print to a file in current directory</span>\n\t<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">()</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">\"foo\"</span>\n\t<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\t\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">()</span> <span class=\"c1\"># this will print to stderr</span>\n</pre>\n<h2>Customizing Pout</h2>\n<h3>object magic method</h3>\n<p>Any class object can define a <code>__pout__</code> magic method, similar to Python's built in <code>__str__</code> magic method that can return a customized string of the object if you want to. This method can return anything, it will be run through Pout's internal stringify methods to convert it to a string and print it out.</p>\n<h3>Customizing functionality</h3>\n<p>You can create your own interface classes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pout.interface</span> <span class=\"kn\">import</span> <span class=\"n\">ValueInterface</span>\n<span class=\"k\">class</span> <span class=\"nc\">VChild</span><span class=\"p\">(</span><span class=\"n\">ValueInterface</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># we can change how pout.v() prints here</span>\n\t\t<span class=\"k\">return</span> <span class=\"s2\">\"some new string\"</span>\n\n<span class=\"c1\"># any pout.v calls will now use your child class, customize as you like</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">V_CLASS</span> <span class=\"o\">=</span> <span class=\"n\">VChild</span>\n</pre>\n<h2>Console commands</h2>\n<h3>pout json</h3>\n<p>running a command on the command line that outputs a whole a bunch of json? Pout can help:</p>\n<pre><code>$ some-command-that-outputs-json | pout json\n</code></pre>\n<h3>pout char</h3>\n<p>Runs <code>pout.c</code> but on the output from a command line script:</p>\n<pre><code>$ echo \"some string with chars to analyze\" | pout char\n</code></pre>\n<h2>Install</h2>\n<p>Use PIP</p>\n<pre><code>pip install pout\n</code></pre>\n<p>Generally, the pypi version and the github version shouldn't be that out of sync, but just in case, you can install from github also:</p>\n<pre><code>pip install --upgrade \"git+https://github.com/Jaymon/pout#egg=pout\"\n</code></pre>\n<hr>\n<h2>Make Pout easier to use</h2>\n<p>When debugging, it's really nice not having to put <code>import pout</code> at the top of every module you want to use it in, so there's a command for that, if you put:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pout</span>\n<span class=\"n\">pout</span><span class=\"o\">.</span><span class=\"n\">inject</span><span class=\"p\">()</span>\n</pre>\n<p>Somewhere near the top of your application startup script, then <code>pout</code> will be available in all your files whether you imported it or not, it will be just like <code>str()</code>, <code>object</code>, or the rest of python's standard library.</p>\n<p>If you don't even want to bother with doing that, then just run:</p>\n<pre><code>$ pout inject\n</code></pre>\n<p>from the command line and it will modify your python environment to make pout available as a builtin module, just like the python standard library. This is super handy for development virtual environments.</p>\n\n          </div>"}, "last_serial": 7102305, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "98a9f0af9a865fa4d3ca8e7b524a155f", "sha256": "c6167b4e19955a83e2a656624e81f5a7c601a85c199c034e71a5bd069ab00218"}, "downloads": -1, "filename": "pout-0.4.tar.gz", "has_sig": false, "md5_digest": "98a9f0af9a865fa4d3ca8e7b524a155f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13457, "upload_time": "2013-07-08T23:33:44", "upload_time_iso_8601": "2013-07-08T23:33:44.555786Z", "url": "https://files.pythonhosted.org/packages/0c/ad/6791c0a0480cd361497e2e812fc381cdfb8b4944aa23dea4ab9e39343ddc/pout-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "841d981be199d10c31f32a5e62858df4", "sha256": "aef9e456c5109aaca42cea45b7bb06f3ad3ea0c5cac864e7234641c22bc6f553"}, "downloads": -1, "filename": "pout-0.5.tar.gz", "has_sig": false, "md5_digest": "841d981be199d10c31f32a5e62858df4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13555, "upload_time": "2013-07-22T22:25:34", "upload_time_iso_8601": "2013-07-22T22:25:34.905747Z", "url": "https://files.pythonhosted.org/packages/ec/5d/bfd54672838ee41cb150a26d757bde09308a023402095fbb03f2a5d85a8b/pout-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "df236f9c079c0955513c103046b80c8a", "sha256": "4b213f848c3f9390cffdaa6fd1b76d6434e0d49183388b1d7e12b46b15721f91"}, "downloads": -1, "filename": "pout-0.5.1.tar.gz", "has_sig": false, "md5_digest": "df236f9c079c0955513c103046b80c8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13610, "upload_time": "2013-08-02T21:37:22", "upload_time_iso_8601": "2013-08-02T21:37:22.121439Z", "url": "https://files.pythonhosted.org/packages/ba/e9/9541afded5696ef92333a652445caf3d38ea942e7688dc7b094e4dde6cb9/pout-0.5.1.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "d8b3edbe874b5767777606036923f4bc", "sha256": "5f22a7254808bde3deb9870ee8bc8a626f4f2c02a8da1a5bfd74acda9852017f"}, "downloads": -1, "filename": "pout-0.5.6.tar.gz", "has_sig": false, "md5_digest": "d8b3edbe874b5767777606036923f4bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14638, "upload_time": "2014-01-14T22:33:37", "upload_time_iso_8601": "2014-01-14T22:33:37.806888Z", "url": "https://files.pythonhosted.org/packages/e0/ad/4d999a740afa938c07eed77ab206f7cb6bf641f9149629ad90c2ed15f4ba/pout-0.5.6.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "d5c83d7504439ffaa2bbfd328ab02b3b", "sha256": "ebb0e76f99a68194736df1104e16d05f258be3e77bcb0e7c460b95b75ddf5c02"}, "downloads": -1, "filename": "pout-0.5.8.tar.gz", "has_sig": false, "md5_digest": "d5c83d7504439ffaa2bbfd328ab02b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16592, "upload_time": "2016-03-28T20:42:12", "upload_time_iso_8601": "2016-03-28T20:42:12.202786Z", "url": "https://files.pythonhosted.org/packages/c2/04/9b45c07fd36e705267f58b804c9b18121a2b1c16240f9dff197369da688a/pout-0.5.8.tar.gz", "yanked": false}], "0.5.9": [{"comment_text": "", "digests": {"md5": "d161fa234703754a227973c29f66fedf", "sha256": "14a1f9b1adba970f71094cb0fa99f1b3f5988a23cdcee86db1d07b029f2a8920"}, "downloads": -1, "filename": "pout-0.5.9.tar.gz", "has_sig": false, "md5_digest": "d161fa234703754a227973c29f66fedf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17159, "upload_time": "2016-05-04T09:50:07", "upload_time_iso_8601": "2016-05-04T09:50:07.098155Z", "url": "https://files.pythonhosted.org/packages/c7/ad/a1ac9d2fead0822297de95270dcc0484e0bcb169b97293a7bd74d138d3b2/pout-0.5.9.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5dad38ceed4aff55a832c7e8cb3b4057", "sha256": "5d020894f379f01d5b9b25c09f58142fe9c7e6a13fab6a27a0a3ef70fd4225a8"}, "downloads": -1, "filename": "pout-0.6.0.tar.gz", "has_sig": false, "md5_digest": "5dad38ceed4aff55a832c7e8cb3b4057", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17252, "upload_time": "2016-05-10T23:34:12", "upload_time_iso_8601": "2016-05-10T23:34:12.050160Z", "url": "https://files.pythonhosted.org/packages/aa/c7/f35541b9138b116eaeed8d571d4f04da0470a6ec73427b5c0d22b69c1fd2/pout-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "68c3bb40927ee165ad9a61a1f15b57f9", "sha256": "2b61c1913e57dcf5d6b50aca62bbcd1409300acfef55769b0aa9a60d4d029ee4"}, "downloads": -1, "filename": "pout-0.6.1.tar.gz", "has_sig": false, "md5_digest": "68c3bb40927ee165ad9a61a1f15b57f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17662, "upload_time": "2016-08-18T03:08:40", "upload_time_iso_8601": "2016-08-18T03:08:40.377249Z", "url": "https://files.pythonhosted.org/packages/49/c6/c361fc673f6226b0cb3596be66e5bcf22472d310149248733cf3030abf20/pout-0.6.1.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "21a1c03b5579fb74ca3065f946182f8e", "sha256": "92327de73dbc3acdea533c914528ed37ef4d584ed6516f5b9973491c39dc3f51"}, "downloads": -1, "filename": "pout-0.6.3.tar.gz", "has_sig": false, "md5_digest": "21a1c03b5579fb74ca3065f946182f8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17743, "upload_time": "2016-12-12T08:40:18", "upload_time_iso_8601": "2016-12-12T08:40:18.278162Z", "url": "https://files.pythonhosted.org/packages/88/8e/94dc0d209c624852f9bc253f1f419447890d3847260af74cdbc698af5d5a/pout-0.6.3.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "010a6f465e568155425ed334d85d8bc3", "sha256": "39dfb94d43b3e5f0c359db45d914a426ee0d4bf9e939aa5e4c0ae7834475a9f7"}, "downloads": -1, "filename": "pout-0.6.5.tar.gz", "has_sig": false, "md5_digest": "010a6f465e568155425ed334d85d8bc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17826, "upload_time": "2017-01-27T23:53:07", "upload_time_iso_8601": "2017-01-27T23:53:07.255510Z", "url": "https://files.pythonhosted.org/packages/80/b7/2db5faba5240cb5b80672e5aae08b690d3ad18b04c0fa18a9dd639f4fb87/pout-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "d142d0a00861384082f5b00c7ce9d193", "sha256": "9e3ba469a253306b1a39bd50cbcccb3ee56c53bb88175facaf549f4b4c45429d"}, "downloads": -1, "filename": "pout-0.6.6.tar.gz", "has_sig": false, "md5_digest": "d142d0a00861384082f5b00c7ce9d193", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18729, "upload_time": "2017-04-27T09:12:35", "upload_time_iso_8601": "2017-04-27T09:12:35.485304Z", "url": "https://files.pythonhosted.org/packages/ff/41/2e2433a7852da1d005e059d74edbb424c9294b1ee64d0f382a343275868b/pout-0.6.6.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "9b9141744829a57db45dd6e8dd4bcf6e", "sha256": "3db86b375eeb38302de4a2a08ff83ccb4b228371f2c244c5c90bbe59b6c625a3"}, "downloads": -1, "filename": "pout-0.6.7.tar.gz", "has_sig": false, "md5_digest": "9b9141744829a57db45dd6e8dd4bcf6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18751, "upload_time": "2017-08-23T20:14:44", "upload_time_iso_8601": "2017-08-23T20:14:44.462984Z", "url": "https://files.pythonhosted.org/packages/6d/0b/ff721f8e244db9cc0a1eaa912d5bf5f9f5b3457e5909b2e5effff1996fdd/pout-0.6.7.tar.gz", "yanked": false}], "0.6.8": [{"comment_text": "", "digests": {"md5": "976c4593e8968a22572481e2a4c99a8e", "sha256": "1143b01376d6e9fa5975c187e8326f0005866067f4f30769c66fdaac6a521585"}, "downloads": -1, "filename": "pout-0.6.8.tar.gz", "has_sig": false, "md5_digest": "976c4593e8968a22572481e2a4c99a8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19407, "upload_time": "2017-12-28T08:00:57", "upload_time_iso_8601": "2017-12-28T08:00:57.315781Z", "url": "https://files.pythonhosted.org/packages/17/f6/1933342f4dd40f0cf62466a5dc098f0ce49293889f63b84b1c238bc6d455/pout-0.6.8.tar.gz", "yanked": false}], "0.6.9": [{"comment_text": "", "digests": {"md5": "4da37e92d0131ecf6a2e2755c78e9806", "sha256": "7477aba48d25d4258eab8e8ac5cfb911fe3b8ada2ff7b89e2ea350c1eca549d1"}, "downloads": -1, "filename": "pout-0.6.9.tar.gz", "has_sig": false, "md5_digest": "4da37e92d0131ecf6a2e2755c78e9806", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19455, "upload_time": "2018-03-09T09:00:27", "upload_time_iso_8601": "2018-03-09T09:00:27.768215Z", "url": "https://files.pythonhosted.org/packages/69/85/45261b1538c88378ff9030b975f34862f7da81f7218f681518617bef1f65/pout-0.6.9.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "112890a1d798dd2a8bb720cd3050ecf6", "sha256": "ff977f0919fcb4133ea81102a2acb7ce3f6609091e24283f7ee328314e6b8c2f"}, "downloads": -1, "filename": "pout-0.7.0.tar.gz", "has_sig": false, "md5_digest": "112890a1d798dd2a8bb720cd3050ecf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23573, "upload_time": "2018-03-09T09:07:55", "upload_time_iso_8601": "2018-03-09T09:07:55.386317Z", "url": "https://files.pythonhosted.org/packages/2f/68/b7900d12ba82c6daa9bdba3825498c0b8e655b023828a3bd8bffd0b037c7/pout-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "dcb05646a1235a21221c82432f5364b4", "sha256": "e2bfb51c42b0730f8c247a7296195b6f22cbc0f4d788b4f083cabb260d07af52"}, "downloads": -1, "filename": "pout-0.7.1.tar.gz", "has_sig": false, "md5_digest": "dcb05646a1235a21221c82432f5364b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23605, "upload_time": "2018-03-21T00:07:56", "upload_time_iso_8601": "2018-03-21T00:07:56.412361Z", "url": "https://files.pythonhosted.org/packages/55/ec/80b11123a7e9c8996e8dd406a5d40e57215f21fecf439bf05763edebf7e9/pout-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "504af140371e813cf146b5e08b5c2ea6", "sha256": "0d592f73922aaeaa9a27a8f114ffe25b93c6f466ac1b65a0488208dd6cd998db"}, "downloads": -1, "filename": "pout-0.7.2.tar.gz", "has_sig": false, "md5_digest": "504af140371e813cf146b5e08b5c2ea6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24007, "upload_time": "2018-04-18T23:23:42", "upload_time_iso_8601": "2018-04-18T23:23:42.603565Z", "url": "https://files.pythonhosted.org/packages/40/9d/9da82ce75ab17771b6145366882de720372d5971a9f7e9d9de1be60007f7/pout-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "07791c81eaf6f335b4dcd13ba6e814a4", "sha256": "961545f8b91c6af6be79329dfd3fd380975775b6f5f709d1935cd4c9e99d0374"}, "downloads": -1, "filename": "pout-0.7.3.tar.gz", "has_sig": false, "md5_digest": "07791c81eaf6f335b4dcd13ba6e814a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25239, "upload_time": "2018-04-22T22:50:17", "upload_time_iso_8601": "2018-04-22T22:50:17.416280Z", "url": "https://files.pythonhosted.org/packages/47/8a/821399c3accd9478a90c6887132e1820bbe64b8b1633fbc09afa8c1377d1/pout-0.7.3.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "ee30ba8b447b9a7df9af21d04c2b1bae", "sha256": "b329bc693b2ae716421b15ce354080d47ccbfa9230d768d3d89edc65459a9223"}, "downloads": -1, "filename": "pout-0.7.7.tar.gz", "has_sig": false, "md5_digest": "ee30ba8b447b9a7df9af21d04c2b1bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27280, "upload_time": "2018-08-31T20:52:54", "upload_time_iso_8601": "2018-08-31T20:52:54.127043Z", "url": "https://files.pythonhosted.org/packages/a1/68/d6d4e3e99da4ee21368c51a117bb4dbcf11a8eb021d2a5ea9d2b64a0832f/pout-0.7.7.tar.gz", "yanked": false}], "0.7.9": [{"comment_text": "", "digests": {"md5": "eb380fa860e89f2a979937e1a30b97e0", "sha256": "25737cd7410f74499c2cb5022a87a95fadfe441230699f3d509b132d5df930aa"}, "downloads": -1, "filename": "pout-0.7.9.tar.gz", "has_sig": false, "md5_digest": "eb380fa860e89f2a979937e1a30b97e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26654, "upload_time": "2018-11-16T00:01:09", "upload_time_iso_8601": "2018-11-16T00:01:09.391450Z", "url": "https://files.pythonhosted.org/packages/3d/5d/f0d8aca217dab0abde20017d14bc2a4687a4eeb5baf310978709e8912500/pout-0.7.9.tar.gz", "yanked": false}], "0.8.13": [{"comment_text": "", "digests": {"md5": "d253c2dd23be07d027a0a14956cc9a87", "sha256": "757e8dacefc23d0935b27948efdc3170c2cef5850e152b6916fe6811d788c1c4"}, "downloads": -1, "filename": "pout-0.8.13.tar.gz", "has_sig": false, "md5_digest": "d253c2dd23be07d027a0a14956cc9a87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31997, "upload_time": "2020-01-28T21:28:51", "upload_time_iso_8601": "2020-01-28T21:28:51.620780Z", "url": "https://files.pythonhosted.org/packages/17/3b/61a24bd6b0e37676bb068f140806b028b49877024cc4dcf69948fe02528c/pout-0.8.13.tar.gz", "yanked": false}], "0.8.14": [{"comment_text": "", "digests": {"md5": "018e62b06af8d8504e8ed01c31815e4e", "sha256": "5de8dc13c0f9c48c52fa73bc4b8cb0d55c9d00933e5de6a08b887fb8a4e17e19"}, "downloads": -1, "filename": "pout-0.8.14.tar.gz", "has_sig": false, "md5_digest": "018e62b06af8d8504e8ed01c31815e4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32010, "upload_time": "2020-04-26T02:24:10", "upload_time_iso_8601": "2020-04-26T02:24:10.356158Z", "url": "https://files.pythonhosted.org/packages/9b/45/9f52cafd5183cc91502180ce3fc7faa0ba910f30680c3ac8c2c9245ad348/pout-0.8.14.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "018e62b06af8d8504e8ed01c31815e4e", "sha256": "5de8dc13c0f9c48c52fa73bc4b8cb0d55c9d00933e5de6a08b887fb8a4e17e19"}, "downloads": -1, "filename": "pout-0.8.14.tar.gz", "has_sig": false, "md5_digest": "018e62b06af8d8504e8ed01c31815e4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32010, "upload_time": "2020-04-26T02:24:10", "upload_time_iso_8601": "2020-04-26T02:24:10.356158Z", "url": "https://files.pythonhosted.org/packages/9b/45/9f52cafd5183cc91502180ce3fc7faa0ba910f30680c3ac8c2c9245ad348/pout-0.8.14.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:47 2020"}