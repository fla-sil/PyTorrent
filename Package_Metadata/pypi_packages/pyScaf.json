{"info": {"author": "Leszek Pryszcz", "author_email": "l.p.pryszcz+distutils@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": ".. contents:: Table of Contents\n\npyScaf\n======\n\npyScaf orders contigs from genome assemblies utilising several types of information:\n\n- paired-end (PE) and/or mate-pair libraries ([NGS-based mode](#ngs-based-scaffolding))\n- long reads ([NGS-based mode](#scaffolding-based-on-long-reads))\n- synteny to the genome of some related species ([reference-based mode](#reference-based-scaffolding))\n\n=================\nScaffolding modes\n=================\n\nNGS-based scaffolding\n~~~~~~~~~~~~~~~~~~~~~\nThis is under development... Stay tuned. \n\nScaffolding based on long reads\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nExperimental version available.\n\nReference-based scaffolding\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn reference-based mode, pyScaf uses synteny to the genome of closely related species in order to order contigs and estimate distances between adjacent contigs.\n\nContigs are aligned globally (end-to-end) onto reference chromosomes, ignoring:\n\n- matches not satisfying cut-offs (`--identity` and `--overlap`)\n- suboptimal matches (only best match of each query to reference is kept) \n- and removing overlapping matches on reference. \n\nIn preliminary tests, pyScaf performed superbly on simulated heterozygous genomes based on *C. parapsilosis* (13 Mb; CANPA) and *A. thaliana* (119 Mb; ARATH) chromosomes, reconstructing correctly all chromosomes always for CANPA and nearly always for ARATH (`Figures in dropbox <https://www.dropbox.com/sh/bb7lwggo40xrwtc/AAAZ7pByVQQQ-WhUXZVeJaZVa/pyScaf?dl=0>`_, `CANPA table <https://docs.google.com/spreadsheets/d/1InBExy-qKDLj-upd8tlPItVSKc4mLepZjZxB31ii9OY/edit#gid=2036953672>`_, `ARATH table <https://docs.google.com/spreadsheets/d/1InBExy-qKDLj-upd8tlPItVSKc4mLepZjZxB31ii9OY/edit#gid=1920757821>`_).  \nRuns took ~0.5 min for CANPA on `4 CPUs` and ~2 min for ARATH on `16 CPUs`. \n\n**Important remarks:**\n\n- Reduce your assembly before (fasta2homozygous.py) as any redundancy will likely break the synteny.\n- pyScaf works better with contigs than scaffolds, as scaffolds are often affected by mis-assemblies (no *de novo assembler* / scaffolder is perfect...), which breaks synteny. \n- pyScaf works very well if divergence between reference genome and assembled contigs is below 20% at nucleotide level. \n- pyScaf deals with large rearrangements ie. deletions, insertion, inversions, translocations. **Note however, this is experimental implementation!**\n- Consider closing gaps after scaffolding. \n\n=====\nUsage\n=====\nDependencies\n~~~~~~~~~~~~\n- `LAST v700+ <http://last.cbrc.jp/>`_\n- `FastaIndex <https://github.com/lpryszcz/FastaIndex>`_\n\nParameters\n~~~~~~~~~~\nGiven reference genome, the program generates pairwise genome alignment (dotplots) by default. \n\n- Genral options:\n\n  -h, --help            show this help message and exit\n  -f FASTA, --fasta FASTA\n                        assembly FASTA file\n  -o OUTPUT, --output OUTPUT\n                        output stream [scaffolds.fa]\n  -t THREADS, --threads THREADS\n                        max no. of threads to run [4]\n  --log LOG             output log to [stderr]\n  --dotplot\n                        generate dotplot as [png]\n  --version             show program's version number and exit\n\n- Reference-based scaffolding options:\n\n  -r REF, --ref REF, --reference REF\n                        reference FastA file\n  --identity IDENTITY   min. identity [0.33]\n  --overlap OVERLAP     min. overlap  [0.66]\n  -g MAXGAP, --maxgap MAXGAP\n                        max. distance between adjacent contigs [0.01 * assembly_size]\n  --norearrangements    high identity mode (rearrangements not allowed)\n\n- Long read-based scaffolding options (EXPERIMENTAL!): \n\n  -n LONGREADS, --longreads LONGREADS\n                        FastQ/FastA file(s) with PacBio/ONT reads\n\n- NGS-based scaffolding options (!NOT IMPLEMENTED!):\n\n  -i FASTQ, --fastq FASTQ\n                        FASTQ PE/MP files\n  -j JOINS, --joins JOINS\n                        min pairs to join contigs [5]\n  -a LINKRATIO, --linkratio LINKRATIO\n                        max link ratio between two best contig pairs [0.7]\n  -l LOAD, --load LOAD  align subset of reads [0.2]\n  -q MAPQ, --mapq MAPQ  min mapping quality [10]\n\n\nTest run\n~~~~~~~~\nTo perform reference-based assembly, provide assembled contigs and reference genome in FastA format.\nDotplots of below runs can be found in [docs](/docs).\nIf you wish to skip dotplot generation (ie. no X11 on your system), provide `--dotplot ''` parameter. \n\n.. code-block:: bash\n\n    # scaffold homogenised assembly (reduced contigs)\n    ./pyScaf.py -f test/contigs.reduced.fa -r test/ref.fa -o test/contigs.reduced.ref.fa\n\n    # scaffold reduced contigs using global mode (no norearrangements allowed)\n    ./pyScaf.py -f test/contigs.reduced.fa -r test/ref.fa -o test/contigs.reduced.ref.global.fa --norearrangements\n\n    # scaffold heterozygous assembly (de novo assembled contigs)\n    ./pyScaf.py -f test/contigs.fa -r test/ref.fa -o test/contigs.ref.fa\n\n    # scaffold reduced contigs using long reads\n    ## pacbio\n    ./pyScaf.py -f test/contigs.reduced.fa -n test/pacbio.fq.gz -o test/contigs.reduced.pacbio.fa\n    ## nanopore\n    ./pyScaf.py -f test/contigs.reduced.fa -n test/nanopore.fa.gz -o test/contigs.reduced.nanopore.fa\n\n    # generate dotplot\n    lastdb test/ref.fa\n    lastal -f TAB test/ref.fa test/contigs.reduced.pacbio.fa | last-dotplot - test/contigs.reduced.pacbio.fa.ref.png\n    lastal -f TAB test/ref.fa test/contigs.reduced.nanopore.fa | last-dotplot - test/contigs.reduced.nanopore.fa.ref.png\n\n    # clean-up\n    #rm test/contigs.{,reduced.}fa.* test/ref.fa.* test/*.{nanopore,pacbio,ref}* test/*.log\n\n\n================\nProof of concept\n================\npyScaf is under heavy development right now.\nNevertheless, the reference-based mode is functional and produces meaningful assemblies. Moverover, it has been implemented in `Redundans <https://github.com/lpryszcz/redundans>`_.\n\nFor more info, have a look in `workbook <https://docs.google.com/document/d/1WNw6FYZXNI2sKJ1hBZ0LI9CWJSQ-BTQID7jL9lLvYaA/edit?usp=sharing>`_. \n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lpryszcz/pyScaf", "keywords": "assembly scaffolding paired-end long-reads synteny", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyScaf", "package_url": "https://pypi.org/project/pyScaf/", "platform": "", "project_url": "https://pypi.org/project/pyScaf/", "project_urls": {"Homepage": "https://github.com/lpryszcz/pyScaf"}, "release_url": "https://pypi.org/project/pyScaf/0.12a4/", "requires_dist": ["FastaIndex"], "requires_python": "", "summary": "", "version": "0.12a4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#pyscaf\" id=\"id1\" rel=\"nofollow\">pyScaf</a><ul>\n<li><a href=\"#scaffolding-modes\" id=\"id2\" rel=\"nofollow\">Scaffolding modes</a><ul>\n<li><a href=\"#ngs-based-scaffolding\" id=\"id3\" rel=\"nofollow\">NGS-based scaffolding</a></li>\n<li><a href=\"#scaffolding-based-on-long-reads\" id=\"id4\" rel=\"nofollow\">Scaffolding based on long reads</a></li>\n<li><a href=\"#reference-based-scaffolding\" id=\"id5\" rel=\"nofollow\">Reference-based scaffolding</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#dependencies\" id=\"id7\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#parameters\" id=\"id8\" rel=\"nofollow\">Parameters</a></li>\n<li><a href=\"#test-run\" id=\"id9\" rel=\"nofollow\">Test run</a></li>\n</ul>\n</li>\n<li><a href=\"#proof-of-concept\" id=\"id10\" rel=\"nofollow\">Proof of concept</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"pyscaf\">\n<h2><a href=\"#id1\" rel=\"nofollow\">pyScaf</a></h2>\n<p>pyScaf orders contigs from genome assemblies utilising several types of information:</p>\n<ul>\n<li>paired-end (PE) and/or mate-pair libraries ([NGS-based mode](#ngs-based-scaffolding))</li>\n<li>long reads ([NGS-based mode](#scaffolding-based-on-long-reads))</li>\n<li>synteny to the genome of some related species ([reference-based mode](#reference-based-scaffolding))</li>\n</ul>\n<div id=\"scaffolding-modes\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Scaffolding modes</a></h3>\n<div id=\"ngs-based-scaffolding\">\n<h4><a href=\"#id3\" rel=\"nofollow\">NGS-based scaffolding</a></h4>\n<p>This is under development\u2026 Stay tuned.</p>\n</div>\n<div id=\"scaffolding-based-on-long-reads\">\n<h4><a href=\"#id4\" rel=\"nofollow\">Scaffolding based on long reads</a></h4>\n<p>Experimental version available.</p>\n</div>\n<div id=\"reference-based-scaffolding\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Reference-based scaffolding</a></h4>\n<p>In reference-based mode, pyScaf uses synteny to the genome of closely related species in order to order contigs and estimate distances between adjacent contigs.</p>\n<p>Contigs are aligned globally (end-to-end) onto reference chromosomes, ignoring:</p>\n<ul>\n<li>matches not satisfying cut-offs (<cite>\u2013identity</cite> and <cite>\u2013overlap</cite>)</li>\n<li>suboptimal matches (only best match of each query to reference is kept)</li>\n<li>and removing overlapping matches on reference.</li>\n</ul>\n<p>In preliminary tests, pyScaf performed superbly on simulated heterozygous genomes based on <em>C. parapsilosis</em> (13 Mb; CANPA) and <em>A. thaliana</em> (119 Mb; ARATH) chromosomes, reconstructing correctly all chromosomes always for CANPA and nearly always for ARATH (<a href=\"https://www.dropbox.com/sh/bb7lwggo40xrwtc/AAAZ7pByVQQQ-WhUXZVeJaZVa/pyScaf?dl=0\" rel=\"nofollow\">Figures in dropbox</a>, <a href=\"https://docs.google.com/spreadsheets/d/1InBExy-qKDLj-upd8tlPItVSKc4mLepZjZxB31ii9OY/edit#gid=2036953672\" rel=\"nofollow\">CANPA table</a>, <a href=\"https://docs.google.com/spreadsheets/d/1InBExy-qKDLj-upd8tlPItVSKc4mLepZjZxB31ii9OY/edit#gid=1920757821\" rel=\"nofollow\">ARATH table</a>).\nRuns took ~0.5 min for CANPA on <cite>4 CPUs</cite> and ~2 min for ARATH on <cite>16 CPUs</cite>.</p>\n<p><strong>Important remarks:</strong></p>\n<ul>\n<li>Reduce your assembly before (fasta2homozygous.py) as any redundancy will likely break the synteny.</li>\n<li>pyScaf works better with contigs than scaffolds, as scaffolds are often affected by mis-assemblies (no <em>de novo assembler</em> / scaffolder is perfect\u2026), which breaks synteny.</li>\n<li>pyScaf works very well if divergence between reference genome and assembled contigs is below 20% at nucleotide level.</li>\n<li>pyScaf deals with large rearrangements ie. deletions, insertion, inversions, translocations. <strong>Note however, this is experimental implementation!</strong></li>\n<li>Consider closing gaps after scaffolding.</li>\n</ul>\n</div>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Usage</a></h3>\n<div id=\"dependencies\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Dependencies</a></h4>\n<ul>\n<li><a href=\"http://last.cbrc.jp/\" rel=\"nofollow\">LAST v700+</a></li>\n<li><a href=\"https://github.com/lpryszcz/FastaIndex\" rel=\"nofollow\">FastaIndex</a></li>\n</ul>\n</div>\n<div id=\"parameters\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Parameters</a></h4>\n<p>Given reference genome, the program generates pairwise genome alignment (dotplots) by default.</p>\n<ul>\n<li><p>Genral options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td><p>show this help message and exit</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-f <var>FASTA</var></span>, <span class=\"option\">--fasta <var>FASTA</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>assembly FASTA file</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o <var>OUTPUT</var></span>, <span class=\"option\">--output <var>OUTPUT</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>output stream [scaffolds.fa]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-t <var>THREADS</var></span>, <span class=\"option\">--threads <var>THREADS</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>max no. of threads to run [4]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--log <var>LOG</var></span></kbd></td>\n<td><p>output log to [stderr]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--dotplot</span></kbd></td>\n<td><p>generate dotplot as [png]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td><p>show program\u2019s version number and exit</p>\n</td></tr>\n</tbody>\n</table>\n</li>\n<li><p>Reference-based scaffolding options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-r <var>REF</var></span>, <span class=\"option\">--ref <var>REF</var></span>, <span class=\"option\">--reference <var>REF</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>reference FastA file</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--identity <var>IDENTITY</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>min. identity [0.33]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--overlap <var>OVERLAP</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>min. overlap  [0.66]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-g <var>MAXGAP</var></span>, <span class=\"option\">--maxgap <var>MAXGAP</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>max. distance between adjacent contigs [0.01 * assembly_size]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--norearrangements</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>high identity mode (rearrangements not allowed)</p>\n</td></tr>\n</tbody>\n</table>\n</li>\n<li><p>Long read-based scaffolding options (EXPERIMENTAL!):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-n <var>LONGREADS</var></span>, <span class=\"option\">--longreads <var>LONGREADS</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>FastQ/FastA file(s) with PacBio/ONT reads</p>\n</td></tr>\n</tbody>\n</table>\n</li>\n<li><p>NGS-based scaffolding options (!NOT IMPLEMENTED!):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-i <var>FASTQ</var></span>, <span class=\"option\">--fastq <var>FASTQ</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>FASTQ PE/MP files</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-j <var>JOINS</var></span>, <span class=\"option\">--joins <var>JOINS</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>min pairs to join contigs [5]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-a <var>LINKRATIO</var></span>, <span class=\"option\">--linkratio <var>LINKRATIO</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>max link ratio between two best contig pairs [0.7]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-l <var>LOAD</var></span>, <span class=\"option\">--load <var>LOAD</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>align subset of reads [0.2]</p>\n</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-q <var>MAPQ</var></span>, <span class=\"option\">--mapq <var>MAPQ</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><p>min mapping quality [10]</p>\n</td></tr>\n</tbody>\n</table>\n</li>\n</ul>\n</div>\n<div id=\"test-run\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Test run</a></h4>\n<p>To perform reference-based assembly, provide assembled contigs and reference genome in FastA format.\nDotplots of below runs can be found in [docs](/docs).\nIf you wish to skip dotplot generation (ie. no X11 on your system), provide <cite>\u2013dotplot \u2018\u2019</cite> parameter.</p>\n<pre><span class=\"c1\"># scaffold homogenised assembly (reduced contigs)\n</span>./pyScaf.py -f test/contigs.reduced.fa -r test/ref.fa -o test/contigs.reduced.ref.fa\n\n<span class=\"c1\"># scaffold reduced contigs using global mode (no norearrangements allowed)\n</span>./pyScaf.py -f test/contigs.reduced.fa -r test/ref.fa -o test/contigs.reduced.ref.global.fa --norearrangements\n\n<span class=\"c1\"># scaffold heterozygous assembly (de novo assembled contigs)\n</span>./pyScaf.py -f test/contigs.fa -r test/ref.fa -o test/contigs.ref.fa\n\n<span class=\"c1\"># scaffold reduced contigs using long reads\n## pacbio\n</span>./pyScaf.py -f test/contigs.reduced.fa -n test/pacbio.fq.gz -o test/contigs.reduced.pacbio.fa\n<span class=\"c1\">## nanopore\n</span>./pyScaf.py -f test/contigs.reduced.fa -n test/nanopore.fa.gz -o test/contigs.reduced.nanopore.fa\n\n<span class=\"c1\"># generate dotplot\n</span>lastdb test/ref.fa\nlastal -f TAB test/ref.fa test/contigs.reduced.pacbio.fa <span class=\"p\">|</span> last-dotplot - test/contigs.reduced.pacbio.fa.ref.png\nlastal -f TAB test/ref.fa test/contigs.reduced.nanopore.fa <span class=\"p\">|</span> last-dotplot - test/contigs.reduced.nanopore.fa.ref.png\n\n<span class=\"c1\"># clean-up\n#rm test/contigs.{,reduced.}fa.* test/ref.fa.* test/*.{nanopore,pacbio,ref}* test/*.log</span>\n</pre>\n</div>\n</div>\n<div id=\"proof-of-concept\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Proof of concept</a></h3>\n<p>pyScaf is under heavy development right now.\nNevertheless, the reference-based mode is functional and produces meaningful assemblies. Moverover, it has been implemented in <a href=\"https://github.com/lpryszcz/redundans\" rel=\"nofollow\">Redundans</a>.</p>\n<p>For more info, have a look in <a href=\"https://docs.google.com/document/d/1WNw6FYZXNI2sKJ1hBZ0LI9CWJSQ-BTQID7jL9lLvYaA/edit?usp=sharing\" rel=\"nofollow\">workbook</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2584919, "releases": {"0.12a0": [{"comment_text": "", "digests": {"md5": "c9ed6ac8b37b92c9f67ee2b3158bd783", "sha256": "0c3bec17c4c1047fee4dde2982a993945533a8f69393872753e69675b863f1bf"}, "downloads": -1, "filename": "pyScaf-0.12a0-py2-none-any.whl", "has_sig": false, "md5_digest": "c9ed6ac8b37b92c9f67ee2b3158bd783", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19935, "upload_time": "2017-01-19T13:06:05", "upload_time_iso_8601": "2017-01-19T13:06:05.238114Z", "url": "https://files.pythonhosted.org/packages/1c/b1/27e36324e913a034d0183bca499aef64a20301cad26fdfb6246933153650/pyScaf-0.12a0-py2-none-any.whl", "yanked": false}], "0.12a1": [{"comment_text": "", "digests": {"md5": "7a8ae693655bd1cfd7643faebf851367", "sha256": "242768239549d82cdfff5f9500c25e3d4b01439e61e097eccf69eeb8ee80fb4b"}, "downloads": -1, "filename": "pyScaf-0.12a1-py2-none-any.whl", "has_sig": false, "md5_digest": "7a8ae693655bd1cfd7643faebf851367", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20249, "upload_time": "2017-01-19T13:17:30", "upload_time_iso_8601": "2017-01-19T13:17:30.643768Z", "url": "https://files.pythonhosted.org/packages/5e/a1/e2be4b333940264bddd40694a09e33450433f8ddf5dafe155dc72b0be7eb/pyScaf-0.12a1-py2-none-any.whl", "yanked": false}], "0.12a2": [{"comment_text": "", "digests": {"md5": "b04bb35319f8a1ea0095769809f79cd8", "sha256": "3cff06a97cbab925c47f90ad03943edd9f92142f446434c94e2d5dc75ba8d645"}, "downloads": -1, "filename": "pyScaf-0.12a2-py2-none-any.whl", "has_sig": false, "md5_digest": "b04bb35319f8a1ea0095769809f79cd8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20317, "upload_time": "2017-01-19T13:19:16", "upload_time_iso_8601": "2017-01-19T13:19:16.624402Z", "url": "https://files.pythonhosted.org/packages/14/96/3b9ca835dd2ea6fc95636576c4d22644782710bbd4b8a4e16b24da88dee5/pyScaf-0.12a2-py2-none-any.whl", "yanked": false}], "0.12a3": [{"comment_text": "", "digests": {"md5": "7442783b02081c10774e143ea4419ef1", "sha256": "f70296ec03b6893f9dd539658ee34d7ff10d2b69d4d50b6fe501375f24825b93"}, "downloads": -1, "filename": "pyScaf-0.12a3-py2-none-any.whl", "has_sig": false, "md5_digest": "7442783b02081c10774e143ea4419ef1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20319, "upload_time": "2017-01-19T13:22:24", "upload_time_iso_8601": "2017-01-19T13:22:24.351652Z", "url": "https://files.pythonhosted.org/packages/8f/3c/647b0606007f450a843e504ee645d7aba0d04420a2a3216282ed1d6ebec1/pyScaf-0.12a3-py2-none-any.whl", "yanked": false}], "0.12a4": [{"comment_text": "", "digests": {"md5": "5837572dce0c88f79b8240a2f894bf64", "sha256": "8df880c5c0560fa1d2f76b509f964ed14baa0ed884b46616f28be5da4d538dac"}, "downloads": -1, "filename": "pyScaf-0.12a4-py2-none-any.whl", "has_sig": false, "md5_digest": "5837572dce0c88f79b8240a2f894bf64", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20366, "upload_time": "2017-01-19T13:52:56", "upload_time_iso_8601": "2017-01-19T13:52:56.985331Z", "url": "https://files.pythonhosted.org/packages/29/e4/fdc8ffca0a993076d240bc95afcc26c73feaec6128dd3073d07aad3cbed9/pyScaf-0.12a4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c67526747eb04d1e28279ac310916d40", "sha256": "3ce3f6fe80bd058831b6a38a56d464ef10f3ebbdd6bc3dcb0d7f127c0b2c1b36"}, "downloads": -1, "filename": "pyScaf-0.12a4.tar.gz", "has_sig": false, "md5_digest": "c67526747eb04d1e28279ac310916d40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34912, "upload_time": "2017-01-19T13:52:59", "upload_time_iso_8601": "2017-01-19T13:52:59.186182Z", "url": "https://files.pythonhosted.org/packages/ee/52/a947347d00c323a87588d6b6d5ad54b3656a5df2f3bcaad477833a43d1f6/pyScaf-0.12a4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5837572dce0c88f79b8240a2f894bf64", "sha256": "8df880c5c0560fa1d2f76b509f964ed14baa0ed884b46616f28be5da4d538dac"}, "downloads": -1, "filename": "pyScaf-0.12a4-py2-none-any.whl", "has_sig": false, "md5_digest": "5837572dce0c88f79b8240a2f894bf64", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20366, "upload_time": "2017-01-19T13:52:56", "upload_time_iso_8601": "2017-01-19T13:52:56.985331Z", "url": "https://files.pythonhosted.org/packages/29/e4/fdc8ffca0a993076d240bc95afcc26c73feaec6128dd3073d07aad3cbed9/pyScaf-0.12a4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c67526747eb04d1e28279ac310916d40", "sha256": "3ce3f6fe80bd058831b6a38a56d464ef10f3ebbdd6bc3dcb0d7f127c0b2c1b36"}, "downloads": -1, "filename": "pyScaf-0.12a4.tar.gz", "has_sig": false, "md5_digest": "c67526747eb04d1e28279ac310916d40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34912, "upload_time": "2017-01-19T13:52:59", "upload_time_iso_8601": "2017-01-19T13:52:59.186182Z", "url": "https://files.pythonhosted.org/packages/ee/52/a947347d00c323a87588d6b6d5ad54b3656a5df2f3bcaad477833a43d1f6/pyScaf-0.12a4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:21 2020"}