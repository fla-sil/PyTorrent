{"info": {"author": "Romain Strock", "author_email": "romain.strock@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n--------------------------------------------------------\n\nA Tensorflow v2 implementation.\n\n## What is CMA-ES?\n\nQuoting [The CMA Evolution Strategy][1] homepage:\n\n> The CMA-ES (Covariance Matrix Adaptation Evolution Strategy) is an evolutionary algorithm for difficult non-linear non-convex black-box optimisation problems in continuous domain. It is considered as state-of-the-art in evolutionary computation and has been adopted as one of the standard tools for continuous optimisation in many (probably hundreds of) research labs and industrial environments around the world. \n\n## Installation\n\nThe package is [available on PyPI](https://pypi.org/project/cma-es/) and can be installed with pip:\n\n```sh\npip install cma-es\n```\n\n## Example Usage\n\n### 1. Define the fitness function\n\nThe CMA class expects a fitness function with the following signature:\n\n```    \nArgs:\n  x: tf.Tensor of shape (M, N)\n\nReturns:\n  Fitness evaluations: tf.Tensor of shape (M,)\n```\n\nWhere `M` is the number of solutions to evaluate and `N` is the dimension of a single solution.\n\n```python\ndef fitness_fn(x):\n    \"\"\"\n    Six-Hump Camel Function\n    https://www.sfu.ca/~ssurjano/camel6.html\n    \"\"\"\n    return (\n        (4 - 2.1 * x[:,0]**2 + x[:,0]**4 / 3) * x[:,0]**2 +\n        x[:,0] * x[:,1] +\n        (-4 + 4 * x[:,1]**2) * x[:,1]**2\n    )\n```\n\n![Figure1: Six-Hump Camel Function](six_hump_camel_fn.png?raw=true)\n\n### 2. Configure CMA-ES\n\n```python\nfrom cma import CMA\n\ncma = CMA(\n    initial_solution=[1.5, -0.4],\n    initial_step_size=1.0,\n    fitness_function=fitness_fn,\n)\n```\n\nThe initial solution and initial step size (i.e. initial standard deviation of the search distribution) are problem specific.\n\nThe population size is automatically set by default, but it can be overidden by specifying the parameter `population_size`.\n\nFor bounded constraint optimization problems, the parameter `enforce_bounds` can be set, e.g. `enforce_bounds=[[-2, 2], [-1, 1]]` for a 2D function.\n\n### 3. Run the optimizer\n\nThe search method runs until the maximum number of generation is reached or until one of the early termination criteria is met. By default, the maximum number of generations is 500.\n\n```python\nbest_solution, best_fitness = cma.search()\n```\n\nThe notebook [`Example 1 - Six Hump Camel Function`][4] goes into more details, including ways to plot the optimization path such as in the figure below.\n\n![Figure 2: Optimization path](cma_trace.png?raw=true)\n\n## Logging\n\nA user-defined callback function can be specified to inspect variables during the search.\n\nIt is mainly intended for logging purpose, e.g:\n\n```python\nmax_epochs = 500\n\ndef logging_function(cma, logger):\n    if cma.generation % 10 == 0:\n        fitness = cma.best_fitness()\n        logger.info(f'Generation {cma.generation} - fitness {fitness}')\n\n    if cma.termination_criterion_met or cma.generation == max_epochs:\n        sol = cma.best_solution()\n        fitness = cma.best_fitness()\n        logger.info(f'Final solution at gen {cma.generation}: {sol} (fitness: {fitness})')\n\ncma = CMA(\n    initial_solution=[1.5, -0.4],\n    initial_step_size=1.0,\n    fitness_function=fitness_fn,\n    callback_function=logging_function,\n)\ncma.search(max_epochs)\n```\n\nCheck out an example logging progress to TensorBoard: [tensorboard_example.py][6]\n\n## Run on a GPU\n\nBy virtue of being written using TensorFlow, it is trivial to run CMA on a GPU:\n\n```python\nwith tf.device('/GPU:0'):\n    cma.search()\n```\n\n## More examples\n\n- Jupyter notebooks with examples are available:\n  - [Example 1 - Six-Hump Camel Function][4]\n  - [Example 2 - Schwefel Function][5]\n  - [Example 3 - Logging to TensorBoard][6]\n- Unit tests provide a few more examples: `cma/core_test.py`\n\n## Resources\n\n- [CMA-ES at Wikipedia][3]\n- [The CMA Evolution Strategy][1]\n- [The CMA Evolution Strategy: A Tutorial][2]\n\n[1]: http://cma.gforge.inria.fr/\n[2]: https://arxiv.org/abs/1604.00772\n[3]: https://en.wikipedia.org/wiki/CMA-ES\n[4]: https://nbviewer.jupyter.org/github/srom/cma-es/blob/master/notebook/Example%201%20-%20Six%20Hump%20Camel%20Function.ipynb\n[5]: https://nbviewer.jupyter.org/github/srom/cma-es/blob/master/notebook/Example%202%20-%20Schwefel%20Function.ipynb\n[6]: https://github.com/srom/cma-es/blob/master/notebook/tensorboard_example.py", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/srom/cma-es", "keywords": "optimization,numerical-optimization,tensorflow", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cma-es", "package_url": "https://pypi.org/project/cma-es/", "platform": "", "project_url": "https://pypi.org/project/cma-es/", "project_urls": {"Homepage": "https://github.com/srom/cma-es"}, "release_url": "https://pypi.org/project/cma-es/1.3.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Covariance Matrix Adaptation Evolution Strategy (CMA-ES) implemented with TensorFlow v2", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Covariance Matrix Adaptation Evolution Strategy (CMA-ES)</h2>\n<p>A Tensorflow v2 implementation.</p>\n<h2>What is CMA-ES?</h2>\n<p>Quoting <a href=\"http://cma.gforge.inria.fr/\" rel=\"nofollow\">The CMA Evolution Strategy</a> homepage:</p>\n<blockquote>\n<p>The CMA-ES (Covariance Matrix Adaptation Evolution Strategy) is an evolutionary algorithm for difficult non-linear non-convex black-box optimisation problems in continuous domain. It is considered as state-of-the-art in evolutionary computation and has been adopted as one of the standard tools for continuous optimisation in many (probably hundreds of) research labs and industrial environments around the world.</p>\n</blockquote>\n<h2>Installation</h2>\n<p>The package is <a href=\"https://pypi.org/project/cma-es/\" rel=\"nofollow\">available on PyPI</a> and can be installed with pip:</p>\n<pre>pip install cma-es\n</pre>\n<h2>Example Usage</h2>\n<h3>1. Define the fitness function</h3>\n<p>The CMA class expects a fitness function with the following signature:</p>\n<pre><code>Args:\n  x: tf.Tensor of shape (M, N)\n\nReturns:\n  Fitness evaluations: tf.Tensor of shape (M,)\n</code></pre>\n<p>Where <code>M</code> is the number of solutions to evaluate and <code>N</code> is the dimension of a single solution.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">fitness_fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Six-Hump Camel Function</span>\n<span class=\"sd\">    https://www.sfu.ca/~ssurjano/camel6.html</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"mf\">2.1</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">4</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span>\n        <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span>\n        <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n    <span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Figure1: Six-Hump Camel Function\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/036e01f34989c2ba431473664a1f5e914ca85b82/7369785f68756d705f63616d656c5f666e2e706e673f7261773d74727565\"></p>\n<h3>2. Configure CMA-ES</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cma</span> <span class=\"kn\">import</span> <span class=\"n\">CMA</span>\n\n<span class=\"n\">cma</span> <span class=\"o\">=</span> <span class=\"n\">CMA</span><span class=\"p\">(</span>\n    <span class=\"n\">initial_solution</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.4</span><span class=\"p\">],</span>\n    <span class=\"n\">initial_step_size</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span>\n    <span class=\"n\">fitness_function</span><span class=\"o\">=</span><span class=\"n\">fitness_fn</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The initial solution and initial step size (i.e. initial standard deviation of the search distribution) are problem specific.</p>\n<p>The population size is automatically set by default, but it can be overidden by specifying the parameter <code>population_size</code>.</p>\n<p>For bounded constraint optimization problems, the parameter <code>enforce_bounds</code> can be set, e.g. <code>enforce_bounds=[[-2, 2], [-1, 1]]</code> for a 2D function.</p>\n<h3>3. Run the optimizer</h3>\n<p>The search method runs until the maximum number of generation is reached or until one of the early termination criteria is met. By default, the maximum number of generations is 500.</p>\n<pre><span class=\"n\">best_solution</span><span class=\"p\">,</span> <span class=\"n\">best_fitness</span> <span class=\"o\">=</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">()</span>\n</pre>\n<p>The notebook <a href=\"https://nbviewer.jupyter.org/github/srom/cma-es/blob/master/notebook/Example%201%20-%20Six%20Hump%20Camel%20Function.ipynb\" rel=\"nofollow\"><code>Example 1 - Six Hump Camel Function</code></a> goes into more details, including ways to plot the optimization path such as in the figure below.</p>\n<p><img alt=\"Figure 2: Optimization path\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8777b7fc3e1ca4aff1ea006dddf32ed8683dfb1b/636d615f74726163652e706e673f7261773d74727565\"></p>\n<h2>Logging</h2>\n<p>A user-defined callback function can be specified to inspect variables during the search.</p>\n<p>It is mainly intended for logging purpose, e.g:</p>\n<pre><span class=\"n\">max_epochs</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">logging_function</span><span class=\"p\">(</span><span class=\"n\">cma</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">generation</span> <span class=\"o\">%</span> <span class=\"mi\">10</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">fitness</span> <span class=\"o\">=</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">best_fitness</span><span class=\"p\">()</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Generation </span><span class=\"si\">{</span><span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">generation</span><span class=\"si\">}</span><span class=\"s1\"> - fitness </span><span class=\"si\">{</span><span class=\"n\">fitness</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">termination_criterion_met</span> <span class=\"ow\">or</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">generation</span> <span class=\"o\">==</span> <span class=\"n\">max_epochs</span><span class=\"p\">:</span>\n        <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">best_solution</span><span class=\"p\">()</span>\n        <span class=\"n\">fitness</span> <span class=\"o\">=</span> <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">best_fitness</span><span class=\"p\">()</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Final solution at gen </span><span class=\"si\">{</span><span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">generation</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">sol</span><span class=\"si\">}</span><span class=\"s1\"> (fitness: </span><span class=\"si\">{</span><span class=\"n\">fitness</span><span class=\"si\">}</span><span class=\"s1\">)'</span><span class=\"p\">)</span>\n\n<span class=\"n\">cma</span> <span class=\"o\">=</span> <span class=\"n\">CMA</span><span class=\"p\">(</span>\n    <span class=\"n\">initial_solution</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.4</span><span class=\"p\">],</span>\n    <span class=\"n\">initial_step_size</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span>\n    <span class=\"n\">fitness_function</span><span class=\"o\">=</span><span class=\"n\">fitness_fn</span><span class=\"p\">,</span>\n    <span class=\"n\">callback_function</span><span class=\"o\">=</span><span class=\"n\">logging_function</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">max_epochs</span><span class=\"p\">)</span>\n</pre>\n<p>Check out an example logging progress to TensorBoard: <a href=\"https://github.com/srom/cma-es/blob/master/notebook/tensorboard_example.py\" rel=\"nofollow\">tensorboard_example.py</a></p>\n<h2>Run on a GPU</h2>\n<p>By virtue of being written using TensorFlow, it is trivial to run CMA on a GPU:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s1\">'/GPU:0'</span><span class=\"p\">):</span>\n    <span class=\"n\">cma</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">()</span>\n</pre>\n<h2>More examples</h2>\n<ul>\n<li>Jupyter notebooks with examples are available:\n<ul>\n<li><a href=\"https://nbviewer.jupyter.org/github/srom/cma-es/blob/master/notebook/Example%201%20-%20Six%20Hump%20Camel%20Function.ipynb\" rel=\"nofollow\">Example 1 - Six-Hump Camel Function</a></li>\n<li><a href=\"https://nbviewer.jupyter.org/github/srom/cma-es/blob/master/notebook/Example%202%20-%20Schwefel%20Function.ipynb\" rel=\"nofollow\">Example 2 - Schwefel Function</a></li>\n<li><a href=\"https://github.com/srom/cma-es/blob/master/notebook/tensorboard_example.py\" rel=\"nofollow\">Example 3 - Logging to TensorBoard</a></li>\n</ul>\n</li>\n<li>Unit tests provide a few more examples: <code>cma/core_test.py</code></li>\n</ul>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/CMA-ES\" rel=\"nofollow\">CMA-ES at Wikipedia</a></li>\n<li><a href=\"http://cma.gforge.inria.fr/\" rel=\"nofollow\">The CMA Evolution Strategy</a></li>\n<li><a href=\"https://arxiv.org/abs/1604.00772\" rel=\"nofollow\">The CMA Evolution Strategy: A Tutorial</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6146819, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "06d3b3c130f1701ccfa3e9d88c2c981a", "sha256": "437dd3d3ed4d251d8e302624fa6ad8a9b0c36e99b6cb2d75593077967de1ea47"}, "downloads": -1, "filename": "cma-es-1.0.0.tar.gz", "has_sig": false, "md5_digest": "06d3b3c130f1701ccfa3e9d88c2c981a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7042, "upload_time": "2019-10-11T16:15:50", "upload_time_iso_8601": "2019-10-11T16:15:50.267588Z", "url": "https://files.pythonhosted.org/packages/d9/e3/0f748fb567b258a0ebefe2236585d688f1246fab151375db79f230e74bca/cma-es-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "97b2b9a934e18d1072061bef0f033700", "sha256": "844d22b357dcabe267168591ef342ad000696ff2558d5cab3a09e41183a18ce4"}, "downloads": -1, "filename": "cma-es-1.1.0.tar.gz", "has_sig": false, "md5_digest": "97b2b9a934e18d1072061bef0f033700", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7329, "upload_time": "2019-10-12T11:54:30", "upload_time_iso_8601": "2019-10-12T11:54:30.535230Z", "url": "https://files.pythonhosted.org/packages/0c/7a/204ce21f692c6795a6e0c55df3b9dddba3fe8a8e5683730656b291fae149/cma-es-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "f64806f43f3ac3a27ce97c0d12d8de81", "sha256": "5ff8d532cffd6dded1903b71c6b2b8acc8493cf6612b40cbf7392f81ed61928e"}, "downloads": -1, "filename": "cma-es-1.2.0.tar.gz", "has_sig": false, "md5_digest": "f64806f43f3ac3a27ce97c0d12d8de81", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8670, "upload_time": "2019-10-17T11:45:21", "upload_time_iso_8601": "2019-10-17T11:45:21.414783Z", "url": "https://files.pythonhosted.org/packages/56/7c/dd12bd33b12578cb82206858afc526b5923c90d10d7e65f089da10580c35/cma-es-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "0c79f5672adae072e7f3ed462ef06c21", "sha256": "02b39530347c5f4f74652c44bcaa9d22b1fd7444accbca6c01112516c0330352"}, "downloads": -1, "filename": "cma-es-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0c79f5672adae072e7f3ed462ef06c21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8598, "upload_time": "2019-11-16T12:06:04", "upload_time_iso_8601": "2019-11-16T12:06:04.173209Z", "url": "https://files.pythonhosted.org/packages/66/16/37fca482bc8726a1d094c63af7019bb1dd6a01f80a528e68e6b2765e58de/cma-es-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c79f5672adae072e7f3ed462ef06c21", "sha256": "02b39530347c5f4f74652c44bcaa9d22b1fd7444accbca6c01112516c0330352"}, "downloads": -1, "filename": "cma-es-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0c79f5672adae072e7f3ed462ef06c21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8598, "upload_time": "2019-11-16T12:06:04", "upload_time_iso_8601": "2019-11-16T12:06:04.173209Z", "url": "https://files.pythonhosted.org/packages/66/16/37fca482bc8726a1d094c63af7019bb1dd6a01f80a528e68e6b2765e58de/cma-es-1.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:37 2020"}