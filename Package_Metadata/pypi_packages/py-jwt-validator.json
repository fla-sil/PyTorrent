{"info": {"author": "Adrian Lazar", "author_email": "adrian.lazar95@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Security :: Cryptography"], "description": "# py-jwt-validator\n----------------\n\n\n## Realease notes\nVersion | Release notes\n------------ | -------------\n1.0.0 | **MAJOR Release.** Added support for Google, Microsoft and Auth0.\n0.5.0      | **MAJOR Release.** Production stable. Added cache control.\n0.4.0-beta | Security fix. Certificate Chain is mandatory for Okta Custom URL Domain.\n0.3.0-beta | Minor release. Added support for Okta Custom URL Domain.\n0.2.0-beta | Minor release. Added support for AWS Cognito JWT.\n0.1.0-beta | Minor release. Increased configurability.\n0.0.1-beta | First package release.\n\n\n**PyPy**: https://pypi.org/project/py-jwt-validator/\n----------------\n\n\n## Supported IdPs\n* Okta\n* AWS Cognito\n* Google \n* Microsoft\n* Auth0\n\n----------------\n\n\n## Supported Signing Algorithms\n* RS256\n\n----------------\n\n\n## Disclaimer\nThis library is provded as is. None of the listed IdPs will provide support for issues related with the present library. I am the sole maintainer of it.\n\n----------------\n\n\n## Process Chain\n1. Once the class is instantiated the following checks are performed:\n    * JWT Format.\n    * JWT Expiration time.\n    * JWT Claims if given when the class was instantiated.\n    * Is Algorithm Supported.\n\n2. After the above checks are done, it will verify the token signature with the apropriate signing algorithm based on the \"alg\" header claim. If the signature is valid, it will return **None**. Else, it will raise a exception.\n\n    * If a check fails at any given step, the exception **PyJwtException** will be raised.\n    * The /.well-knwon/openid-configuration endoint will be compiled based on the 'iss' claim.\n    * The /keys endpoint will be determined from the output of the /.well-knwon/openid-configuration endpoint\n    * The response from /keys will be cached (**requests_cache**) for subsequent calls.\n\n----------------\n\n\n## Installation\n```\npip install py-jwt-validator\n```\n\n----------------\n\n\n## Usage Examples\n```\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\njwt = access_token / id_token\ntry:\n    PyJwtValidator(jwt)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n```\n\n* If **auto_verify** is set to **False** the class will not perform the signature validation. To check the signature the **verify()** method needs to be used. By default, the method will return None. In order to return the decoded jwt data (header + payload) **True** has to be passed. Example:\n```\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False)\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n```\n\n**Custom Claim Validation:**\n\n```\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False, custom_claim_name=\"custom_claim_value\")\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n```\n\n\n**Cache Control:**\n\n* redis\n\n```\nfrom redis import StrictRedis\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\n\n\nredis = StrictRedis(host=\"localhost\", port=6390)\n\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False, cache_store=\"redis\", cache_store_connection=redis)\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n```\n\n* pymongo\n\n```\nfrom pymongo import MongoClient\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\n\n\nmongo = MongoClient(\"localhost\", 27017)\n\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False, cache_store=\"mongo\", cache_store_connection=mongo)\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n```\n\n----------------\n\n\n## Class Attributes\n* The class **PyJwtValidator** currently accepts:\n\nAttribute | Required | Default value\n----------|----------|--------------\njwt | Yes | **None**\ncid - OIDC Client ID | No | **None**\naud - Audience | No | **None**\niss - Issuer | No | **None**\nauto_verify | No | **True**\ncheck_expiry | No | **True**\ncache_enabled | No | **True**\ncache_lifetime | No | **1 day**\ncache_store | No | **sqlite**\ncache_store_connection | No | **None**\n\n* The class method **verify()** currently accepts:\n\nAttribute | Required | Default value\n----------|----------|--------------\nget_payload | No | **False**\n\n## Note\n\nThe reason why this class returns **None** or exception is to provide more flexibility. Not everyone needs to return the decoded payload of the jwt. \nIt is recommended to use it within **try:** **except** blocks.\n\n----------------\n\n\n## Cache Control\nThis library relies on the **requests** and **requests_cache** libraries. The caching control mechanism was implemented around these libraries. \n\n\n### Cache Control attributes explained\n* cache_enabled - Attribute type: Boolean - Accepted Values: True / False. Determines if the cache control mechanism will be used. If set to False, the response from the /.well-knwon/openid-configuration and /keys endpoints will never be cached. \n* cache_lifetime - Attribute type: Integer - Accepted Values: 1 - 30. Represents the number of *days* the cache will be stored and used. The maximum value can not be higher than 30 days or less than 1 day.\n* cache_store - Attribute type: String - Accepted Values: \"memory\", \"sqlite\", \"mongo\", \"redis\". Determines how and where the **requests_cache** library will store the responses and connect to the caching store. When there is no cache_store_connection provided, it will rely on the defaults for mongo and redis.\n* cache_store_connection - Attribute type: DB instance object - Should be used only when the cache_store is set to \"mongo\" or \"redis\". This is necessary for production environments so you can specify the host, port, database, user and password to use to connect to the respective caching database selected.\n\n### Note\nWhen using redis or mongo as caching database solutions, the appropriate python connector libraries will be required (pymongo / redis).\nFor additional information in regards of how **requests_cache** works, please review their docs: https://requests-cache.readthedocs.io/en/latest/\n\n----------------\n\n\n## UPCOMING\n\n- [ ] - HMAC256 support\n\n----------------\n\n\n## SUGGESTIONS?\n\nPlease feel free to email me at adrian.lazar95@outlook.com or lzr.adrian95@gmail.com. I am opened to improvement / suggestions and critics. \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adrianlzr/py-jwt-validator", "keywords": "jwt jwt-validator python-jwt-valdidator jwt-signature signature jwt-signature-validator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-jwt-validator", "package_url": "https://pypi.org/project/py-jwt-validator/", "platform": "", "project_url": "https://pypi.org/project/py-jwt-validator/", "project_urls": {"Documentation & Source": "https://github.com/adrianlzr/py-jwt-validator", "Homepage": "https://github.com/adrianlzr/py-jwt-validator", "Issue Tracker": "https://github.com/adrianlzr/py-jwt-validator/issues"}, "release_url": "https://pypi.org/project/py-jwt-validator/0.6.0/", "requires_dist": ["six", "requests", "requests-cache"], "requires_python": ">=3", "summary": "Python JWT Signature Validator - Asymetric Keys - From exponent and modulus", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-jwt-validator</h1>\n<hr>\n<h2>Realease notes</h2>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Release notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.0.0</td>\n<td><strong>MAJOR Release.</strong> Added support for Google, Microsoft and Auth0.</td>\n</tr>\n<tr>\n<td>0.5.0</td>\n<td><strong>MAJOR Release.</strong> Production stable. Added cache control.</td>\n</tr>\n<tr>\n<td>0.4.0-beta</td>\n<td>Security fix. Certificate Chain is mandatory for Okta Custom URL Domain.</td>\n</tr>\n<tr>\n<td>0.3.0-beta</td>\n<td>Minor release. Added support for Okta Custom URL Domain.</td>\n</tr>\n<tr>\n<td>0.2.0-beta</td>\n<td>Minor release. Added support for AWS Cognito JWT.</td>\n</tr>\n<tr>\n<td>0.1.0-beta</td>\n<td>Minor release. Increased configurability.</td>\n</tr>\n<tr>\n<td>0.0.1-beta</td>\n<td>First package release.</td>\n</tr></tbody></table>\n<h2><strong>PyPy</strong>: <a href=\"https://pypi.org/project/py-jwt-validator/\" rel=\"nofollow\">https://pypi.org/project/py-jwt-validator/</a></h2>\n<h2>Supported IdPs</h2>\n<ul>\n<li>Okta</li>\n<li>AWS Cognito</li>\n<li>Google</li>\n<li>Microsoft</li>\n<li>Auth0</li>\n</ul>\n<hr>\n<h2>Supported Signing Algorithms</h2>\n<ul>\n<li>RS256</li>\n</ul>\n<hr>\n<h2>Disclaimer</h2>\n<p>This library is provded as is. None of the listed IdPs will provide support for issues related with the present library. I am the sole maintainer of it.</p>\n<hr>\n<h2>Process Chain</h2>\n<ol>\n<li>\n<p>Once the class is instantiated the following checks are performed:</p>\n<ul>\n<li>JWT Format.</li>\n<li>JWT Expiration time.</li>\n<li>JWT Claims if given when the class was instantiated.</li>\n<li>Is Algorithm Supported.</li>\n</ul>\n</li>\n<li>\n<p>After the above checks are done, it will verify the token signature with the apropriate signing algorithm based on the \"alg\" header claim. If the signature is valid, it will return <strong>None</strong>. Else, it will raise a exception.</p>\n<ul>\n<li>If a check fails at any given step, the exception <strong>PyJwtException</strong> will be raised.</li>\n<li>The /.well-knwon/openid-configuration endoint will be compiled based on the 'iss' claim.</li>\n<li>The /keys endpoint will be determined from the output of the /.well-knwon/openid-configuration endpoint</li>\n<li>The response from /keys will be cached (<strong>requests_cache</strong>) for subsequent calls.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Installation</h2>\n<pre><code>pip install py-jwt-validator\n</code></pre>\n<hr>\n<h2>Usage Examples</h2>\n<pre><code>from py_jwt_validator import PyJwtValidator, PyJwtException\njwt = access_token / id_token\ntry:\n    PyJwtValidator(jwt)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n</code></pre>\n<ul>\n<li>If <strong>auto_verify</strong> is set to <strong>False</strong> the class will not perform the signature validation. To check the signature the <strong>verify()</strong> method needs to be used. By default, the method will return None. In order to return the decoded jwt data (header + payload) <strong>True</strong> has to be passed. Example:</li>\n</ul>\n<pre><code>from py_jwt_validator import PyJwtValidator, PyJwtException\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False)\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n</code></pre>\n<p><strong>Custom Claim Validation:</strong></p>\n<pre><code>from py_jwt_validator import PyJwtValidator, PyJwtException\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False, custom_claim_name=\"custom_claim_value\")\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n</code></pre>\n<p><strong>Cache Control:</strong></p>\n<ul>\n<li>redis</li>\n</ul>\n<pre><code>from redis import StrictRedis\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\n\n\nredis = StrictRedis(host=\"localhost\", port=6390)\n\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False, cache_store=\"redis\", cache_store_connection=redis)\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n</code></pre>\n<ul>\n<li>pymongo</li>\n</ul>\n<pre><code>from pymongo import MongoClient\nfrom py_jwt_validator import PyJwtValidator, PyJwtException\n\n\nmongo = MongoClient(\"localhost\", 27017)\n\njwt = access_token / id_token\nvalidator = PyJwtValidator(jwt, auto_verify=False, cache_store=\"mongo\", cache_store_connection=mongo)\ntry:\n    payload = validator.verify(True)\n    print(payload)\nexcept PyJwtException as e:\n    print(f\"Exception caught. Error: {e}\")\n</code></pre>\n<hr>\n<h2>Class Attributes</h2>\n<ul>\n<li>The class <strong>PyJwtValidator</strong> currently accepts:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Required</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jwt</td>\n<td>Yes</td>\n<td><strong>None</strong></td>\n</tr>\n<tr>\n<td>cid - OIDC Client ID</td>\n<td>No</td>\n<td><strong>None</strong></td>\n</tr>\n<tr>\n<td>aud - Audience</td>\n<td>No</td>\n<td><strong>None</strong></td>\n</tr>\n<tr>\n<td>iss - Issuer</td>\n<td>No</td>\n<td><strong>None</strong></td>\n</tr>\n<tr>\n<td>auto_verify</td>\n<td>No</td>\n<td><strong>True</strong></td>\n</tr>\n<tr>\n<td>check_expiry</td>\n<td>No</td>\n<td><strong>True</strong></td>\n</tr>\n<tr>\n<td>cache_enabled</td>\n<td>No</td>\n<td><strong>True</strong></td>\n</tr>\n<tr>\n<td>cache_lifetime</td>\n<td>No</td>\n<td><strong>1 day</strong></td>\n</tr>\n<tr>\n<td>cache_store</td>\n<td>No</td>\n<td><strong>sqlite</strong></td>\n</tr>\n<tr>\n<td>cache_store_connection</td>\n<td>No</td>\n<td><strong>None</strong></td>\n</tr></tbody></table>\n<ul>\n<li>The class method <strong>verify()</strong> currently accepts:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Required</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get_payload</td>\n<td>No</td>\n<td><strong>False</strong></td>\n</tr></tbody></table>\n<h2>Note</h2>\n<p>The reason why this class returns <strong>None</strong> or exception is to provide more flexibility. Not everyone needs to return the decoded payload of the jwt.\nIt is recommended to use it within <strong>try:</strong> <strong>except</strong> blocks.</p>\n<hr>\n<h2>Cache Control</h2>\n<p>This library relies on the <strong>requests</strong> and <strong>requests_cache</strong> libraries. The caching control mechanism was implemented around these libraries.</p>\n<h3>Cache Control attributes explained</h3>\n<ul>\n<li>cache_enabled - Attribute type: Boolean - Accepted Values: True / False. Determines if the cache control mechanism will be used. If set to False, the response from the /.well-knwon/openid-configuration and /keys endpoints will never be cached.</li>\n<li>cache_lifetime - Attribute type: Integer - Accepted Values: 1 - 30. Represents the number of <em>days</em> the cache will be stored and used. The maximum value can not be higher than 30 days or less than 1 day.</li>\n<li>cache_store - Attribute type: String - Accepted Values: \"memory\", \"sqlite\", \"mongo\", \"redis\". Determines how and where the <strong>requests_cache</strong> library will store the responses and connect to the caching store. When there is no cache_store_connection provided, it will rely on the defaults for mongo and redis.</li>\n<li>cache_store_connection - Attribute type: DB instance object - Should be used only when the cache_store is set to \"mongo\" or \"redis\". This is necessary for production environments so you can specify the host, port, database, user and password to use to connect to the respective caching database selected.</li>\n</ul>\n<h3>Note</h3>\n<p>When using redis or mongo as caching database solutions, the appropriate python connector libraries will be required (pymongo / redis).\nFor additional information in regards of how <strong>requests_cache</strong> works, please review their docs: <a href=\"https://requests-cache.readthedocs.io/en/latest/\" rel=\"nofollow\">https://requests-cache.readthedocs.io/en/latest/</a></p>\n<hr>\n<h2>UPCOMING</h2>\n<ul>\n<li>[ ] - HMAC256 support</li>\n</ul>\n<hr>\n<h2>SUGGESTIONS?</h2>\n<p>Please feel free to email me at <a href=\"mailto:adrian.lazar95@outlook.com\">adrian.lazar95@outlook.com</a> or <a href=\"mailto:lzr.adrian95@gmail.com\">lzr.adrian95@gmail.com</a>. I am opened to improvement / suggestions and critics.</p>\n\n          </div>"}, "last_serial": 6539140, "releases": {"0.0.1b0": [{"comment_text": "", "digests": {"md5": "14fc7e23002d2f720cfae98588adb497", "sha256": "8e83fc46d18993395f7638e646e48cee555356f4145882f00fde452673cfdb8b"}, "downloads": -1, "filename": "py_jwt_validator-0.0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "14fc7e23002d2f720cfae98588adb497", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5999, "upload_time": "2019-08-21T23:18:22", "upload_time_iso_8601": "2019-08-21T23:18:22.815568Z", "url": "https://files.pythonhosted.org/packages/fc/23/0bd2fb5ab066bae777394fefa7482e3f5f1191cd17943557cda1caf28a48/py_jwt_validator-0.0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6aea5a5e8af5fd0f64af4db249843728", "sha256": "ec82264025d0bb3bc52c2cf3b6a39dd6ac634bd1172cd655294d0baadfdde0e1"}, "downloads": -1, "filename": "py_jwt_validator-0.0.1b0.tar.gz", "has_sig": false, "md5_digest": "6aea5a5e8af5fd0f64af4db249843728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4170, "upload_time": "2019-08-21T23:18:24", "upload_time_iso_8601": "2019-08-21T23:18:24.610937Z", "url": "https://files.pythonhosted.org/packages/e8/be/72e8fb50b1778bf25d126dd4c7a193bbc49b654dc3bf4bf8bd0c3be70df8/py_jwt_validator-0.0.1b0.tar.gz", "yanked": false}], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "18e5983c9a913fd44dcc9ee1ecdbe423", "sha256": "aa321b9a19206985a5440f286a5215a87ee4881d3a0bd2fa639818e111074b55"}, "downloads": -1, "filename": "py_jwt_validator-0.1.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "18e5983c9a913fd44dcc9ee1ecdbe423", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6453, "upload_time": "2019-08-22T12:01:02", "upload_time_iso_8601": "2019-08-22T12:01:02.059907Z", "url": "https://files.pythonhosted.org/packages/1c/cd/ad2cdd8d6a31474ee6cbdfa2e2eb45f2e0806c0b50e6090fe1859c5d0535/py_jwt_validator-0.1.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d4506fdc3e920f3b7398d76db560292", "sha256": "f6673c1254fff6e5e1f0f4afed96cc08ee0ffc309e5cdb8ff525bda2622649d6"}, "downloads": -1, "filename": "py_jwt_validator-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "9d4506fdc3e920f3b7398d76db560292", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4764, "upload_time": "2019-08-22T12:01:03", "upload_time_iso_8601": "2019-08-22T12:01:03.540511Z", "url": "https://files.pythonhosted.org/packages/fe/85/216e3418797aee7098c121bdcc0d9aafab70b1843b7cfe4f4c3d602a6b0a/py_jwt_validator-0.1.0b0.tar.gz", "yanked": false}], "0.2.0b0": [{"comment_text": "", "digests": {"md5": "94d6ea22511444379db2f4b6050165a2", "sha256": "9818f2df6ccf2b43b5fcbd6beff47c04c904cd87c625a054f730bbac967bd636"}, "downloads": -1, "filename": "py_jwt_validator-0.2.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "94d6ea22511444379db2f4b6050165a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6575, "upload_time": "2019-09-27T12:31:57", "upload_time_iso_8601": "2019-09-27T12:31:57.930296Z", "url": "https://files.pythonhosted.org/packages/42/df/922774768120a952d7e31bf2d01cc7d534c67658cba2932e2bedcd4da618/py_jwt_validator-0.2.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b82fde29f4830d097577009f3e5cd06c", "sha256": "c5ba1724d03343a863d998d77b3a363e0d961582412de0f89b75093825285ae7"}, "downloads": -1, "filename": "py_jwt_validator-0.2.0b0.tar.gz", "has_sig": false, "md5_digest": "b82fde29f4830d097577009f3e5cd06c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4873, "upload_time": "2019-09-27T12:31:59", "upload_time_iso_8601": "2019-09-27T12:31:59.218781Z", "url": "https://files.pythonhosted.org/packages/4f/9a/968e51d8338a4d3f1c0a120ad616c1d035711f32103cbc1b8a4ec933e575/py_jwt_validator-0.2.0b0.tar.gz", "yanked": false}], "0.3.0b0": [{"comment_text": "", "digests": {"md5": "a6a10b3e1a81929380bec7aa67a8cf25", "sha256": "d49a7245fa9806ddf4e7dac64a13e77180adc71cb68308429eb096a6ac7197d9"}, "downloads": -1, "filename": "py_jwt_validator-0.3.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "a6a10b3e1a81929380bec7aa67a8cf25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6719, "upload_time": "2019-10-23T14:59:27", "upload_time_iso_8601": "2019-10-23T14:59:27.394283Z", "url": "https://files.pythonhosted.org/packages/45/06/adc6141cfdb1bede58eb4dd67142e98880bf5bbce6c8de9c00f9c6153603/py_jwt_validator-0.3.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3afe80302eb41e0dc9f906ba837239dd", "sha256": "7019b3328f39cabd20b682696325dce1f12366a6074cda7994ffea97855a473d"}, "downloads": -1, "filename": "py_jwt_validator-0.3.0b0.tar.gz", "has_sig": false, "md5_digest": "3afe80302eb41e0dc9f906ba837239dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4965, "upload_time": "2019-10-23T14:59:28", "upload_time_iso_8601": "2019-10-23T14:59:28.906357Z", "url": "https://files.pythonhosted.org/packages/9c/d0/0c6aad720583e71f73b6ac30ac7fb0784c670be3250a772311626a546fd5/py_jwt_validator-0.3.0b0.tar.gz", "yanked": false}], "0.4.0b0": [{"comment_text": "", "digests": {"md5": "ab4db12b9fcef15a84a1d2223b74a1bd", "sha256": "21c3a4a12b5c62cf1baf84de81b6c5e8612b26d35385a24c0863f64d398edacc"}, "downloads": -1, "filename": "py_jwt_validator-0.4.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4db12b9fcef15a84a1d2223b74a1bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6661, "upload_time": "2020-01-22T10:05:36", "upload_time_iso_8601": "2020-01-22T10:05:36.871142Z", "url": "https://files.pythonhosted.org/packages/5e/cb/0642590169fce27241e83d0956662a2f3c40376de6324e6a73e1ef455c41/py_jwt_validator-0.4.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "391bf9650d9e2d92a239f49d9fff0351", "sha256": "8e9a2dc870b2dc613f0080983dce75dae9e0c8a12d310cf42eebbf7811e16d13"}, "downloads": -1, "filename": "py_jwt_validator-0.4.0b0.tar.gz", "has_sig": false, "md5_digest": "391bf9650d9e2d92a239f49d9fff0351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4941, "upload_time": "2020-01-22T10:05:39", "upload_time_iso_8601": "2020-01-22T10:05:39.038368Z", "url": "https://files.pythonhosted.org/packages/5f/bd/3242429eb0bcd228dbbbfad8d4b0a0502d03616389b886b3032d99b4165a/py_jwt_validator-0.4.0b0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "36078dcc3199cfd85270dc4bb081f3cd", "sha256": "7e8c90fe9a66a100decb5477080704f97ce1283aae465c8eed8a3d4f02de4af9"}, "downloads": -1, "filename": "py_jwt_validator-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36078dcc3199cfd85270dc4bb081f3cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9612, "upload_time": "2020-01-29T11:43:46", "upload_time_iso_8601": "2020-01-29T11:43:46.697344Z", "url": "https://files.pythonhosted.org/packages/0d/53/5b9cdfaf81bc1bd9c7b34b06dd99909e0e012efefcfb996af31e6363825b/py_jwt_validator-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6851be5f7ffd5445d050535ddc4e4b1d", "sha256": "45d2f3200aa28d441d215109546459ba094f81e0716a748a1885398251c72db5"}, "downloads": -1, "filename": "py_jwt_validator-0.5.0.tar.gz", "has_sig": false, "md5_digest": "6851be5f7ffd5445d050535ddc4e4b1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8830, "upload_time": "2020-01-29T11:43:48", "upload_time_iso_8601": "2020-01-29T11:43:48.429435Z", "url": "https://files.pythonhosted.org/packages/80/cc/d8cc762a0ba76ec347b66d68bb37d56239c882d60706f15f2a0be742a9d6/py_jwt_validator-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "aa322aeff45351241e5d783b3b35d4a0", "sha256": "94e0d788daf85eed65971dc6a4a2e88a85075a9b6194bad65e0d76757493e901"}, "downloads": -1, "filename": "py_jwt_validator-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aa322aeff45351241e5d783b3b35d4a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9626, "upload_time": "2020-01-29T14:11:56", "upload_time_iso_8601": "2020-01-29T14:11:56.003143Z", "url": "https://files.pythonhosted.org/packages/89/e2/3310438da6a360648cf1f2db2cc61e68a6589eb4aaec9cb4a1748c12176e/py_jwt_validator-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c1b9ccae512b455174ce9194c0853bb", "sha256": "dcc88dcefeb509aaa61bc30c7745b4674465122c09a6ae7bc04490287c7904ea"}, "downloads": -1, "filename": "py_jwt_validator-0.5.1.tar.gz", "has_sig": false, "md5_digest": "9c1b9ccae512b455174ce9194c0853bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8839, "upload_time": "2020-01-29T14:11:57", "upload_time_iso_8601": "2020-01-29T14:11:57.761454Z", "url": "https://files.pythonhosted.org/packages/3a/e2/fe95d0bc552dbe8a2d3f264d3e57f92c1e77be1c7e0175a9e40216262e30/py_jwt_validator-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "50993a05d63761148c597011b5ac4b18", "sha256": "8d4b2c785dcc4cd420d7457605d507c1992ff3148b07fedd5e99963e01e34885"}, "downloads": -1, "filename": "py_jwt_validator-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "50993a05d63761148c597011b5ac4b18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8841, "upload_time": "2020-01-29T14:20:36", "upload_time_iso_8601": "2020-01-29T14:20:36.455803Z", "url": "https://files.pythonhosted.org/packages/db/ba/64643e933e01819585abd599407b92618ca754bf1f616e25b3f458899fc3/py_jwt_validator-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "978854de68559c095cbff9a14e643a00", "sha256": "1ec1a2a48bd76362265b42200f648b692c66076c84ccf4710b39f7e6edcc536f"}, "downloads": -1, "filename": "py_jwt_validator-0.5.2.tar.gz", "has_sig": false, "md5_digest": "978854de68559c095cbff9a14e643a00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8026, "upload_time": "2020-01-29T14:20:38", "upload_time_iso_8601": "2020-01-29T14:20:38.050788Z", "url": "https://files.pythonhosted.org/packages/d2/1f/b1da6b00639cdd2f0cfea265f0b9714f7416625b6f39a3bb9c9eb5f85dac/py_jwt_validator-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e5d0364ae1c3db40b1cf3895ec65c50a", "sha256": "446c548a7086f76d03c8a47393c50153e7d5c250cc4796666020506c0fb1f267"}, "downloads": -1, "filename": "py_jwt_validator-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5d0364ae1c3db40b1cf3895ec65c50a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8925, "upload_time": "2020-01-29T17:19:23", "upload_time_iso_8601": "2020-01-29T17:19:23.950782Z", "url": "https://files.pythonhosted.org/packages/b8/f9/ddfb190dce2eb10b82218ff17b319d240f38ce48130d92dd4a05159c5b80/py_jwt_validator-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37b3937509cf2b06c624b71556c8d583", "sha256": "a51d30c5e3862c7770a836c9948c6722a1c4ee671451d0d246a5da4b6766b561"}, "downloads": -1, "filename": "py_jwt_validator-0.6.0.tar.gz", "has_sig": false, "md5_digest": "37b3937509cf2b06c624b71556c8d583", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8121, "upload_time": "2020-01-29T17:19:25", "upload_time_iso_8601": "2020-01-29T17:19:25.269231Z", "url": "https://files.pythonhosted.org/packages/9c/9e/6a90d4a5ee07ebe8ad4cd23203408fe5c0805890992905c4bf404e745fe8/py_jwt_validator-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5d0364ae1c3db40b1cf3895ec65c50a", "sha256": "446c548a7086f76d03c8a47393c50153e7d5c250cc4796666020506c0fb1f267"}, "downloads": -1, "filename": "py_jwt_validator-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5d0364ae1c3db40b1cf3895ec65c50a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8925, "upload_time": "2020-01-29T17:19:23", "upload_time_iso_8601": "2020-01-29T17:19:23.950782Z", "url": "https://files.pythonhosted.org/packages/b8/f9/ddfb190dce2eb10b82218ff17b319d240f38ce48130d92dd4a05159c5b80/py_jwt_validator-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37b3937509cf2b06c624b71556c8d583", "sha256": "a51d30c5e3862c7770a836c9948c6722a1c4ee671451d0d246a5da4b6766b561"}, "downloads": -1, "filename": "py_jwt_validator-0.6.0.tar.gz", "has_sig": false, "md5_digest": "37b3937509cf2b06c624b71556c8d583", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8121, "upload_time": "2020-01-29T17:19:25", "upload_time_iso_8601": "2020-01-29T17:19:25.269231Z", "url": "https://files.pythonhosted.org/packages/9c/9e/6a90d4a5ee07ebe8ad4cd23203408fe5c0805890992905c4bf404e745fe8/py_jwt_validator-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:40 2020"}