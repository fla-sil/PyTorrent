{"info": {"author": "BlackMonkey", "author_email": "3213322480@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n\n<div align=\"center\">\n    <img src=\"https://github.com/blackmonkey121/verify/blob/master/image/verify_logo.png\" alt=\"Verify-Logo\">\n</div>\n\n# Verify ![](https://img.shields.io/badge/GPL-3.0-green)  ![](https://img.shields.io/badge/version-0.0.2-informational)  ![](https://img.shields.io/badge/python-3.x-blueviolet)\nAn elegant verification code generation framework.\n\n## Contents\n\n- [No.1 Background](https://github.com/blackmonkey121/verify#background)\n- [No.2 Installation](https://github.com/blackmonkey121/verify#installation)\n- [No.3 Usage](https://github.com/blackmonkey121/verify#usage)\n- [No.4 Example](https://github.com/blackmonkey121/verify#example)\n- [No.5 Expand&Overwrite](https://github.com/blackmonkey121/verify#expand--overwrite)\n- [No.6 Configuration table](https://github.com/blackmonkey121/verify#configuration-table)\n- [No.7 License](https://github.com/blackmonkey121/verify#license)\n\n\n\n## Background\n\nCaptchas are common in web development, but common captchas are easy to identify and bypass. The project provides a simple and flexible captcha generator that is efficient, secure, and easy to extend.\n\n\n\n## Installation\n\n### Way 1\uff1a\n\n```pyhton\npip install verify-python\n```\n\n\n### Way 2\uff1a\n\n```python\npip install git+git://github.com/blackmonkey121/verify.git\n```\n\n**or**\n\n```python\npip install git+https//github.com/blackmonkey121/verify.git\n```\n\n### Way 3\uff1a\n\n**Download**  \ud83d\udc49  [Click me **Download** verify-python](https://github.com/blackmonkey121/verify/archive/master.zip)\n\n```shell\npython setup.py instal   # \u5728 verify-python \u6839\u76ee\u5f55\u4e0b\u6267\u884c\n```\n\n\n\n## Usage\n\n\n###  VerifyGif\n\n```python\nfrom verify import VerifyGif\n\ngif = VerifyGif()    # Get the instance of VerifyGif.\nveri = gif('A48K')   # You can specify it yourself or generate it randomly.\nveri.save_file()   # Save the verify code to `.Verify/verifyxxx.gif`\nveri.get_binary()    # Get the verify code format binary.\n```\n\n\n\n###  VerifyPng\n\n```python\nfrom verify import VerifyPng\n\npng_instance = VerifyPng()\nveri = instance('J7Wd')\nveri.get_binary()\n```\n\n\n\n### Safe\n\nCreate encrypted all request parameters.\n\n```python\nfrom verify import Safe\n\ns = Safe()\n\nret = s.coding(string='Mst4')\n# ret : `IntcInN0clwiOiBcIkRcXHUwMG...XCJSU0FcIiwgXCJ2dFwiOiBcImdpZlwifSI=`\n\nret = s.parse(ret)\n# ret : `{'str': 'Mst4', 'mtd': 'RSA', 'vt': 'gif'}`\n```\n\n\n\n### Config\n\n> **way1** Use config file. This is recommended if there are many configuration information\n\n```python\nfrom verify import Config\n\n# You can tell verify configuration information in the form of a file.\nconfig = Config('my_conifg')/ config = Config('my_conifg.py')   # Extend name can be accept.\n```\n\n> **way2** Inherit the `Config` class, and then rewrite the attributes. This makes your code look clear, and you can add some methods. But it's a bit complicated.\n\n```python\nfrom verify import Config, VerifyGif\n\nclass MyConfig(Config):\n\n    FRAME_NUMBER: int = 24\n    VERIFY_SIZE: tuple = (40, 40)\n    LINES_NUMBER: int = 4 \n\nveri = VerifyGif(config=MyConfig)   # You must pass it as a parameter to VerifyGif/VerifyPng.\n```\n\n> **way3** Add attributes directly to `config`.  This is recommended if there is little configuration information.\n\n```python\nfrom verify import config\n\nconfig.FRAME_NUMBER: int = 24\nconfig.VERIFY_SIZE: tuple = (42, 42)\nconfig.LINES_NUMBER: int = 5\n```\n\n\n\n### Cache\n\n> This is a thread-safe cache. The package itself depends on it, which is convenient if you happen to need it in your project.  For example, save the generated verification code.\n\n```python\nfrom verify import Cache\n\ncache = Cache(contain=1024, expiration=60 * 60)   \n# contain: Maximum capacity.  expiration: timeout.\n\ncache.set('key', 'value')   # set value.\ncache.get('key')   # get value.\ncache.clear()  # clear cache.\n```\n\n**tips:** You have to use your own instantiated object. \n\n\n\n## Example\n\n### business server\n\n> Create the `<img src=\"https://path/verify/verify_url_para\">`\n\n```python\nfrom verify import Safe\n\ns = Safe()\nverify_url_para = s.coding('S7rE')\nurl = url + verify_url_para\n\n# verify_url_para: IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\n\nrander(<img src=\"https://path/verify/verify_url_para\">)\nrender(<img src=\"https://xxx/verify/IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\" alt=\"verify\">)\n```\n\n### verify server \n\n> Get the verify_url_para, parse it. Create the verification code binary format.\n\n```python\nrequest_str = \"IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\"\nfrom verify import Safe, VerifyGif, VerifyPng\n\ns = Safe()\nrequest_data = s.parse(request_str)\n# request_data: {'str': 'S7rE', 'mtd': 'RSA', 'vt': 'gif'}\n\nverify_dict = {'gif': VerifyGif, 'png': VerifyPng}\n\ndef get_verify_binary(request_data):\n    verify_type = request_data.get('vt', None)\n    string = request_data.get('str', None)\n\n    verify_cls = verify_dict.get(verify_type, None)\n\n    if verify_cls is not None:\n        instance = verify_cls()\n        verify = instance(string=string)\n        return verify.get_binary()\n    else:\n        raise Exception('Request parameter error.')\n\nverify_binary = get_verify_binary(request_data)\nreturn verify_binary   # Verification code in binary format.\n```\n\n**[More examples]()**\n\n## Expand & Overwrite\n\n> Provides support for two types of verification codes, namely **`GifVerify`** and **`PngVerify`**,\n>\n> When instantiating them, you can specify`Builder`\u3001`config`\u3001 `Filter`\u3001`Storage`\u3001`Style`.\n\n- **Builder**\n  - **_Create_char_**  create char image.\n  - **_Create_background_**  create background layer.\n  - **_back_fix_char_**  Mix character pictures into the background.\n- **Filter**\n  - **_char_filter_**   Will be called after `create_char` . \n  - **_back_filter_**  will be called after `create_background`.\n  - **_frame_filer_**  will be called after `GifVerify/PngVerify.get_frame`\n\n- **Storage**\n  - **_save_file_**   Save the **GifVerify/PngVerify object** to the file system.\n  - **_get_binary_**  Returns the binary data of this **GifVerify/PngVerify object**.\n- **Style**\n  - **_get_lines_** Location informations of interference line.\n  - **_get_positions_**  Chareset position informations of in the background.\n  - **_get_angles_**  Chareset angle informations of in the background.\n  - **_frame_style_**  All style information of each layer.\n\n\n\n> You can inherit them and rewrite them to meet your needs. For more detailed introduction, please see the [document]().\n\n### Storage\n\n```python\nfrom verify import VerifyPng, PngStorage\n\n\nclass MyStorage(PngStorage):\n\n    def show_img(self):\n\n        from PIL import Image\n\n        img = Image.open(self.instance)   # Read image from self.instance\n\n        img.show()  # show the image.\n\n\nveri = VerifyPng(storage=MyStorage)   # Instantiate VerifyPng\n\npng = veri('HQ3r')  # Return `MyStorage` instance.\n\npng.show_img()   # Call `show_img` methods.\n```\n\n\n\n### Filter\n\n```python\nfrom verify import VerifyPng, PngFilter\n\n\nclass MyFilter(PngFilter):\n\n    def char_filter(self, verify: object, char: 'Image.Image', *args, **kwargs) -> 'Image.Image':\n        ...\n        print('Overwrite char_filter. ')\n        ...\n        return super().char_filter(verify=verify, char=char, *args, **kwargs)\n\n\nveri = VerifyPng(filter=MyFilter)\npng = veri('HQ3r')\n```\n\n\n\n### Builder\n\n```python\nfrom verify import VerifyPng, PngFrameBuilder\n\n\nclass MyBuilder(PngFrameBuilder):\n\n    def create_background(self, back_filter, *args, **kwargs) -> 'Image.Image':\n        ...\n        print('Overwrite create_background. ')\n        ...\n        return super().create_background(back_filter=back_filter, *args, **kwargs)\n\n\nveri = VerifyPng(builder=MyBuilder)\npng = veri('HQ3r')\n```\n\n\n\n### Style\n\n```python\nfrom verify import VerifyPng, PngStyle\n\n\nclass MyStyle(PngStyle):\n\n    def get_angles(self, *args, **kwargs) -> 'Iterable':\n        ...\n        print('Overwrite get_angles. ')\n        ...\n        return super(MyStyle, self).get_angles()\n\n\nveri = VerifyPng(style=MyStyle)\npng = veri('HQ3r')\n```\n\n\n\n### Config\n\n> Config will provide a hook that will call all methods ending in `_clean`. This can dynamically adjust the parameters, especially when the values of other parameters are not clear. You can also filter and add specific parameters.\n\n```python\nfrom verify import VerifyPng, Config\n\n\nclass MyConfig(Config):\n\n    VERIFY_SIZE = (200, 54)   \t\t\t# Write custom configuration information\n    VERIFY_CODE_NUMBER = 6\t\t\t\t\t# it will be used first.\n    VERIFY_CODE_SIZE = (50, 50)\n    DEFORM_OFFSET = 6\n    DEFORM_NUMBER = 2\t\n\n    # Methods ending in `_clean` will be called by default.\n    def deform_clean(self):\n        self.DEFORM_NUMBER = 1 if self.DEFORM_NUMBER < 1 else self.DEFORM_NUMBER\n\nveri = VerifyPng(storage=MyStorage, config=MyConfig)\n\npng = veri()\npng.show()\n```\n\n> You can pass in multiple custom classes at the same time, as long as they follow the corresponding interface.\n\n```python\n...\nveri = VerifyPng(storage=MyStorage, config=MyConfig, filter=MyFilter, builder=MyBuilder, style=MyStyle)\n\npng = veri('H7rJ')\npng.show()\n...\n```\n\n> Follow the interface without inheriting the default class. All interfaces are aggregated in `verify.abc.py`  .\n>\n> **Interface list**: `AbstractVerify`,` AbstractFilter`,` AbstractStyle`, `AbstractStorage`,` AbstractFrameBuilder`\n\n```python\nfrom verify.abc import AbstractFilter\n\n\nclass MyFilter(AbstractFilter):\n\n    def back_filter(self, verify: object, back: 'Image.Image', *args, **kwargs) -> 'Image.Image':\n        return back\n\n    def frame_filter(self, verify: object, *args, **kwargs) -> 'Image.Image':\n        return verify.frame\n\n    def char_filter(self, verify: object, char: 'Image.Image', *args, **kwargs) -> 'Image.Image':\n        return char\n\n\nveri = VerifyPng(filter=MyFilter, storage=MyStorage)\npng = veri('Ag3r')\npng.show()\n```\n\n\n\n## Configuration table\n\n| Configuration |Default|Meaning |\n| ------------- | ------- | ------- |\n| VERIFY_CODE_SET | NUMBERS + CHARS_BIG + CHARS_LOW <  list > |Random character set|\n|CHAR_FONT|ImageFont.truetype('Arial.ttf', 40)| Font and size                      |\n|VERIFY_CODE_NUMBER|4|Number of characters on each layer|\n|VERIFY_CODE_SIZE|(40, 40)  < pixel >|Character size|\n|BACK_COLOR|(255, 255, 255, 255)  < pixel >|Background color|\n|CHAR_COLOR|(0, 0, 0, 255)  < pixel >|Character color|\n|NULL_COLOR|(0, 0, 0, 0)  < pixel >|Null color|\n|VERIFY_SIZE|(180, 60)  < pixel >|CAPTCHA size|\n|BACK_NOISE_NUMBER|200|Number of background noise|\n|BACK_NOISE_TYPE|2  < pixel >|Size of background noise|\n|LINES_NUMBER|4|Number of interference lines|\n|CHAR_CUT_NUMBER|8|Number of character fragments|\n|CHAR_CUT_PRESENT|0.2|Size of incomplete area|\n|CIRCLE_NUMBER|6|Number of interference circle|\n|FRAME_NUMBER|30|Frame number of GIF Verify|\n|TRACK_INTERVAL|10 < pixel >|Character rotation radius|\n|ANGLE_INTERVAL|60 < \u00b160 >|Rotation range of characters|\n|RSA_FOLDER|RSA_KEY|RSA key save directory|\n|RSA_KEY_DIR|`verify.RSA_KEY` < builder-in path >|RSA key save path|\n|SAFE_ENGINE|'RSA'|Default encryption engine|\n|SECRET_KEY|'a-=3bb51t_x#........s4_=w^40xj#7g'|Secret key for fast encryption engine|\n|STORAGE_DIR|'Verify'|Save location of CAPTCHA|\n|DEFORM_NUMBER|2|Number of character twists|\n|DEFORM_OFFSET|6 < pixel >|The degree of character distortion|\n\n\n\n\n## License\n\n### [GPLv 3.0](https://github.com/blackmonkey121/verify/blob/master/LICENSE) \n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blackmonkey121/verify", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "verify-python", "package_url": "https://pypi.org/project/verify-python/", "platform": "", "project_url": "https://pypi.org/project/verify-python/", "project_urls": {"Homepage": "https://github.com/blackmonkey121/verify"}, "release_url": "https://pypi.org/project/verify-python/0.0.2/", "requires_dist": ["itsdangerous (>=1.1.0)", "numpy (>=1.11.3)", "opencv-python (>=3.4)", "Pillow (>=7.0)", "rsa (>=4.0)"], "requires_python": ">=3.3", "summary": "An elegant verification code generator.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n    <img alt=\"Verify-Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f546d664dba102d48fdac9691911b483de5aec9/68747470733a2f2f6769746875622e636f6d2f626c61636b6d6f6e6b65793132312f7665726966792f626c6f622f6d61737465722f696d6167652f7665726966795f6c6f676f2e706e67\">\n</div>\n<h1>Verify <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d20aa40ea03cc5aa534eea05f1b40d86232eb5b9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f47504c2d332e302d677265656e\">  <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e447876afaa4846d9d37a2ef0ee35993fa68d9d7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d302e302e322d696e666f726d6174696f6e616c\">  <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a197f07ec0044b82fbf25bbd753e4fafd42b5547/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e782d626c756576696f6c6574\"></h1>\n<p>An elegant verification code generation framework.</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"https://github.com/blackmonkey121/verify#background\" rel=\"nofollow\">No.1 Background</a></li>\n<li><a href=\"https://github.com/blackmonkey121/verify#installation\" rel=\"nofollow\">No.2 Installation</a></li>\n<li><a href=\"https://github.com/blackmonkey121/verify#usage\" rel=\"nofollow\">No.3 Usage</a></li>\n<li><a href=\"https://github.com/blackmonkey121/verify#example\" rel=\"nofollow\">No.4 Example</a></li>\n<li><a href=\"https://github.com/blackmonkey121/verify#expand--overwrite\" rel=\"nofollow\">No.5 Expand&amp;Overwrite</a></li>\n<li><a href=\"https://github.com/blackmonkey121/verify#configuration-table\" rel=\"nofollow\">No.6 Configuration table</a></li>\n<li><a href=\"https://github.com/blackmonkey121/verify#license\" rel=\"nofollow\">No.7 License</a></li>\n</ul>\n<h2>Background</h2>\n<p>Captchas are common in web development, but common captchas are easy to identify and bypass. The project provides a simple and flexible captcha generator that is efficient, secure, and easy to extend.</p>\n<h2>Installation</h2>\n<h3>Way 1\uff1a</h3>\n<pre>pip install verify-python\n</pre>\n<h3>Way 2\uff1a</h3>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">git</span><span class=\"o\">+</span><span class=\"n\">git</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">blackmonkey121</span><span class=\"o\">/</span><span class=\"n\">verify</span><span class=\"o\">.</span><span class=\"n\">git</span>\n</pre>\n<p><strong>or</strong></p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">git</span><span class=\"o\">+</span><span class=\"n\">https</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">blackmonkey121</span><span class=\"o\">/</span><span class=\"n\">verify</span><span class=\"o\">.</span><span class=\"n\">git</span>\n</pre>\n<h3>Way 3\uff1a</h3>\n<p><strong>Download</strong>  \ud83d\udc49  <a href=\"https://github.com/blackmonkey121/verify/archive/master.zip\" rel=\"nofollow\">Click me <strong>Download</strong> verify-python</a></p>\n<pre>python setup.py instal   <span class=\"c1\"># \u5728 verify-python \u6839\u76ee\u5f55\u4e0b\u6267\u884c</span>\n</pre>\n<h2>Usage</h2>\n<h3>VerifyGif</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyGif</span>\n\n<span class=\"n\">gif</span> <span class=\"o\">=</span> <span class=\"n\">VerifyGif</span><span class=\"p\">()</span>    <span class=\"c1\"># Get the instance of VerifyGif.</span>\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">gif</span><span class=\"p\">(</span><span class=\"s1\">'A48K'</span><span class=\"p\">)</span>   <span class=\"c1\"># You can specify it yourself or generate it randomly.</span>\n<span class=\"n\">veri</span><span class=\"o\">.</span><span class=\"n\">save_file</span><span class=\"p\">()</span>   <span class=\"c1\"># Save the verify code to `.Verify/verifyxxx.gif`</span>\n<span class=\"n\">veri</span><span class=\"o\">.</span><span class=\"n\">get_binary</span><span class=\"p\">()</span>    <span class=\"c1\"># Get the verify code format binary.</span>\n</pre>\n<h3>VerifyPng</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyPng</span>\n\n<span class=\"n\">png_instance</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">()</span>\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s1\">'J7Wd'</span><span class=\"p\">)</span>\n<span class=\"n\">veri</span><span class=\"o\">.</span><span class=\"n\">get_binary</span><span class=\"p\">()</span>\n</pre>\n<h3>Safe</h3>\n<p>Create encrypted all request parameters.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">Safe</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Safe</span><span class=\"p\">()</span>\n\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">coding</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s1\">'Mst4'</span><span class=\"p\">)</span>\n<span class=\"c1\"># ret : `IntcInN0clwiOiBcIkRcXHUwMG...XCJSU0FcIiwgXCJ2dFwiOiBcImdpZlwifSI=`</span>\n\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n<span class=\"c1\"># ret : `{'str': 'Mst4', 'mtd': 'RSA', 'vt': 'gif'}`</span>\n</pre>\n<h3>Config</h3>\n<blockquote>\n<p><strong>way1</strong> Use config file. This is recommended if there are many configuration information</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"c1\"># You can tell verify configuration information in the form of a file.</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">'my_conifg'</span><span class=\"p\">)</span><span class=\"o\">/</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">'my_conifg.py'</span><span class=\"p\">)</span>   <span class=\"c1\"># Extend name can be accept.</span>\n</pre>\n<blockquote>\n<p><strong>way2</strong> Inherit the <code>Config</code> class, and then rewrite the attributes. This makes your code look clear, and you can add some methods. But it's a bit complicated.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">VerifyGif</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n\n    <span class=\"n\">FRAME_NUMBER</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>\n    <span class=\"n\">VERIFY_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n    <span class=\"n\">LINES_NUMBER</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> \n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyGif</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">MyConfig</span><span class=\"p\">)</span>   <span class=\"c1\"># You must pass it as a parameter to VerifyGif/VerifyPng.</span>\n</pre>\n<blockquote>\n<p><strong>way3</strong> Add attributes directly to <code>config</code>.  This is recommended if there is little configuration information.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">FRAME_NUMBER</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">VERIFY_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">LINES_NUMBER</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n</pre>\n<h3>Cache</h3>\n<blockquote>\n<p>This is a thread-safe cache. The package itself depends on it, which is convenient if you happen to need it in your project.  For example, save the generated verification code.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">Cache</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"n\">contain</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">expiration</span><span class=\"o\">=</span><span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span><span class=\"p\">)</span>   \n<span class=\"c1\"># contain: Maximum capacity.  expiration: timeout.</span>\n\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>   <span class=\"c1\"># set value.</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'key'</span><span class=\"p\">)</span>   <span class=\"c1\"># get value.</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>  <span class=\"c1\"># clear cache.</span>\n</pre>\n<p><strong>tips:</strong> You have to use your own instantiated object.</p>\n<h2>Example</h2>\n<h3>business server</h3>\n<blockquote>\n<p>Create the <code>&lt;img src=\"https://path/verify/verify_url_para\"&gt;</code></p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">Safe</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Safe</span><span class=\"p\">()</span>\n<span class=\"n\">verify_url_para</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">coding</span><span class=\"p\">(</span><span class=\"s1\">'S7rE'</span><span class=\"p\">)</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"n\">verify_url_para</span>\n\n<span class=\"c1\"># verify_url_para: IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=</span>\n\n<span class=\"n\">rander</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">img</span> <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s2\">\"https://path/verify/verify_url_para\"</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">img</span> <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s2\">\"https://xxx/verify/IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\"</span> <span class=\"n\">alt</span><span class=\"o\">=</span><span class=\"s2\">\"verify\"</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<h3>verify server</h3>\n<blockquote>\n<p>Get the verify_url_para, parse it. Create the verification code binary format.</p>\n</blockquote>\n<pre><span class=\"n\">request_str</span> <span class=\"o\">=</span> <span class=\"s2\">\"IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">Safe</span><span class=\"p\">,</span> <span class=\"n\">VerifyGif</span><span class=\"p\">,</span> <span class=\"n\">VerifyPng</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Safe</span><span class=\"p\">()</span>\n<span class=\"n\">request_data</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">request_str</span><span class=\"p\">)</span>\n<span class=\"c1\"># request_data: {'str': 'S7rE', 'mtd': 'RSA', 'vt': 'gif'}</span>\n\n<span class=\"n\">verify_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'gif'</span><span class=\"p\">:</span> <span class=\"n\">VerifyGif</span><span class=\"p\">,</span> <span class=\"s1\">'png'</span><span class=\"p\">:</span> <span class=\"n\">VerifyPng</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_verify_binary</span><span class=\"p\">(</span><span class=\"n\">request_data</span><span class=\"p\">):</span>\n    <span class=\"n\">verify_type</span> <span class=\"o\">=</span> <span class=\"n\">request_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'vt'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">request_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'str'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"n\">verify_cls</span> <span class=\"o\">=</span> <span class=\"n\">verify_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">verify_type</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verify_cls</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">verify_cls</span><span class=\"p\">()</span>\n        <span class=\"n\">verify</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"n\">string</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">verify</span><span class=\"o\">.</span><span class=\"n\">get_binary</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'Request parameter error.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">verify_binary</span> <span class=\"o\">=</span> <span class=\"n\">get_verify_binary</span><span class=\"p\">(</span><span class=\"n\">request_data</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">verify_binary</span>   <span class=\"c1\"># Verification code in binary format.</span>\n</pre>\n<p><strong><a href=\"\" rel=\"nofollow\">More examples</a></strong></p>\n<h2>Expand &amp; Overwrite</h2>\n<blockquote>\n<p>Provides support for two types of verification codes, namely <strong><code>GifVerify</code></strong> and <strong><code>PngVerify</code></strong>,</p>\n<p>When instantiating them, you can specify<code>Builder</code>\u3001<code>config</code>\u3001 <code>Filter</code>\u3001<code>Storage</code>\u3001<code>Style</code>.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>Builder</strong></p>\n<ul>\n<li><strong><em>Create_char</em></strong>  create char image.</li>\n<li><strong><em>Create_background</em></strong>  create background layer.</li>\n<li><strong><em>back_fix_char</em></strong>  Mix character pictures into the background.</li>\n</ul>\n</li>\n<li>\n<p><strong>Filter</strong></p>\n<ul>\n<li><strong><em>char_filter</em></strong>   Will be called after <code>create_char</code> .</li>\n<li><strong><em>back_filter</em></strong>  will be called after <code>create_background</code>.</li>\n<li><strong><em>frame_filer</em></strong>  will be called after <code>GifVerify/PngVerify.get_frame</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Storage</strong></p>\n<ul>\n<li><strong><em>save_file</em></strong>   Save the <strong>GifVerify/PngVerify object</strong> to the file system.</li>\n<li><strong><em>get_binary</em></strong>  Returns the binary data of this <strong>GifVerify/PngVerify object</strong>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Style</strong></p>\n<ul>\n<li><strong><em>get_lines</em></strong> Location informations of interference line.</li>\n<li><strong><em>get_positions</em></strong>  Chareset position informations of in the background.</li>\n<li><strong><em>get_angles</em></strong>  Chareset angle informations of in the background.</li>\n<li><strong><em>frame_style</em></strong>  All style information of each layer.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>You can inherit them and rewrite them to meet your needs. For more detailed introduction, please see the <a href=\"\" rel=\"nofollow\">document</a>.</p>\n</blockquote>\n<h3>Storage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyPng</span><span class=\"p\">,</span> <span class=\"n\">PngStorage</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyStorage</span><span class=\"p\">(</span><span class=\"n\">PngStorage</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">show_img</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">)</span>   <span class=\"c1\"># Read image from self.instance</span>\n\n        <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>  <span class=\"c1\"># show the image.</span>\n\n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">MyStorage</span><span class=\"p\">)</span>   <span class=\"c1\"># Instantiate VerifyPng</span>\n\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">(</span><span class=\"s1\">'HQ3r'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return `MyStorage` instance.</span>\n\n<span class=\"n\">png</span><span class=\"o\">.</span><span class=\"n\">show_img</span><span class=\"p\">()</span>   <span class=\"c1\"># Call `show_img` methods.</span>\n</pre>\n<h3>Filter</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyPng</span><span class=\"p\">,</span> <span class=\"n\">PngFilter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFilter</span><span class=\"p\">(</span><span class=\"n\">PngFilter</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">char_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">char</span><span class=\"p\">:</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Overwrite char_filter. '</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">char_filter</span><span class=\"p\">(</span><span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"n\">verify</span><span class=\"p\">,</span> <span class=\"n\">char</span><span class=\"o\">=</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">MyFilter</span><span class=\"p\">)</span>\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">(</span><span class=\"s1\">'HQ3r'</span><span class=\"p\">)</span>\n</pre>\n<h3>Builder</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyPng</span><span class=\"p\">,</span> <span class=\"n\">PngFrameBuilder</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBuilder</span><span class=\"p\">(</span><span class=\"n\">PngFrameBuilder</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_background</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">back_filter</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Overwrite create_background. '</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_background</span><span class=\"p\">(</span><span class=\"n\">back_filter</span><span class=\"o\">=</span><span class=\"n\">back_filter</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"o\">=</span><span class=\"n\">MyBuilder</span><span class=\"p\">)</span>\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">(</span><span class=\"s1\">'HQ3r'</span><span class=\"p\">)</span>\n</pre>\n<h3>Style</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyPng</span><span class=\"p\">,</span> <span class=\"n\">PngStyle</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyStyle</span><span class=\"p\">(</span><span class=\"n\">PngStyle</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_angles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Iterable'</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Overwrite get_angles. '</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyStyle</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_angles</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"n\">MyStyle</span><span class=\"p\">)</span>\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">(</span><span class=\"s1\">'HQ3r'</span><span class=\"p\">)</span>\n</pre>\n<h3>Config</h3>\n<blockquote>\n<p>Config will provide a hook that will call all methods ending in <code>_clean</code>. This can dynamically adjust the parameters, especially when the values of other parameters are not clear. You can also filter and add specific parameters.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyPng</span><span class=\"p\">,</span> <span class=\"n\">Config</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n\n    <span class=\"n\">VERIFY_SIZE</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">)</span>   \t\t\t<span class=\"c1\"># Write custom configuration information</span>\n    <span class=\"n\">VERIFY_CODE_NUMBER</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\t\t\t\t\t<span class=\"c1\"># it will be used first.</span>\n    <span class=\"n\">VERIFY_CODE_SIZE</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">DEFORM_OFFSET</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n    <span class=\"n\">DEFORM_NUMBER</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\t\n\n    <span class=\"c1\"># Methods ending in `_clean` will be called by default.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">deform_clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFORM_NUMBER</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFORM_NUMBER</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFORM_NUMBER</span>\n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">MyStorage</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">MyConfig</span><span class=\"p\">)</span>\n\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">()</span>\n<span class=\"n\">png</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<blockquote>\n<p>You can pass in multiple custom classes at the same time, as long as they follow the corresponding interface.</p>\n</blockquote>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">MyStorage</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">MyConfig</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">MyFilter</span><span class=\"p\">,</span> <span class=\"n\">builder</span><span class=\"o\">=</span><span class=\"n\">MyBuilder</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"n\">MyStyle</span><span class=\"p\">)</span>\n\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">(</span><span class=\"s1\">'H7rJ'</span><span class=\"p\">)</span>\n<span class=\"n\">png</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n</pre>\n<blockquote>\n<p>Follow the interface without inheriting the default class. All interfaces are aggregated in <code>verify.abc.py</code>  .</p>\n<p><strong>Interface list</strong>: <code>AbstractVerify</code>,<code>AbstractFilter</code>,<code>AbstractStyle</code>, <code>AbstractStorage</code>,<code>AbstractFrameBuilder</code></p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verify.abc</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractFilter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFilter</span><span class=\"p\">(</span><span class=\"n\">AbstractFilter</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">back_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">back</span><span class=\"p\">:</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">back</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">frame_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">verify</span><span class=\"o\">.</span><span class=\"n\">frame</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">char_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">char</span><span class=\"p\">:</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Image.Image'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">char</span>\n\n\n<span class=\"n\">veri</span> <span class=\"o\">=</span> <span class=\"n\">VerifyPng</span><span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">MyFilter</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">MyStorage</span><span class=\"p\">)</span>\n<span class=\"n\">png</span> <span class=\"o\">=</span> <span class=\"n\">veri</span><span class=\"p\">(</span><span class=\"s1\">'Ag3r'</span><span class=\"p\">)</span>\n<span class=\"n\">png</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Configuration table</h2>\n<table>\n<thead>\n<tr>\n<th>Configuration</th>\n<th>Default</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VERIFY_CODE_SET</td>\n<td>NUMBERS + CHARS_BIG + CHARS_LOW &lt;  list &gt;</td>\n<td>Random character set</td>\n</tr>\n<tr>\n<td>CHAR_FONT</td>\n<td>ImageFont.truetype('Arial.ttf', 40)</td>\n<td>Font and size</td>\n</tr>\n<tr>\n<td>VERIFY_CODE_NUMBER</td>\n<td>4</td>\n<td>Number of characters on each layer</td>\n</tr>\n<tr>\n<td>VERIFY_CODE_SIZE</td>\n<td>(40, 40)  &lt; pixel &gt;</td>\n<td>Character size</td>\n</tr>\n<tr>\n<td>BACK_COLOR</td>\n<td>(255, 255, 255, 255)  &lt; pixel &gt;</td>\n<td>Background color</td>\n</tr>\n<tr>\n<td>CHAR_COLOR</td>\n<td>(0, 0, 0, 255)  &lt; pixel &gt;</td>\n<td>Character color</td>\n</tr>\n<tr>\n<td>NULL_COLOR</td>\n<td>(0, 0, 0, 0)  &lt; pixel &gt;</td>\n<td>Null color</td>\n</tr>\n<tr>\n<td>VERIFY_SIZE</td>\n<td>(180, 60)  &lt; pixel &gt;</td>\n<td>CAPTCHA size</td>\n</tr>\n<tr>\n<td>BACK_NOISE_NUMBER</td>\n<td>200</td>\n<td>Number of background noise</td>\n</tr>\n<tr>\n<td>BACK_NOISE_TYPE</td>\n<td>2  &lt; pixel &gt;</td>\n<td>Size of background noise</td>\n</tr>\n<tr>\n<td>LINES_NUMBER</td>\n<td>4</td>\n<td>Number of interference lines</td>\n</tr>\n<tr>\n<td>CHAR_CUT_NUMBER</td>\n<td>8</td>\n<td>Number of character fragments</td>\n</tr>\n<tr>\n<td>CHAR_CUT_PRESENT</td>\n<td>0.2</td>\n<td>Size of incomplete area</td>\n</tr>\n<tr>\n<td>CIRCLE_NUMBER</td>\n<td>6</td>\n<td>Number of interference circle</td>\n</tr>\n<tr>\n<td>FRAME_NUMBER</td>\n<td>30</td>\n<td>Frame number of GIF Verify</td>\n</tr>\n<tr>\n<td>TRACK_INTERVAL</td>\n<td>10 &lt; pixel &gt;</td>\n<td>Character rotation radius</td>\n</tr>\n<tr>\n<td>ANGLE_INTERVAL</td>\n<td>60 &lt; \u00b160 &gt;</td>\n<td>Rotation range of characters</td>\n</tr>\n<tr>\n<td>RSA_FOLDER</td>\n<td>RSA_KEY</td>\n<td>RSA key save directory</td>\n</tr>\n<tr>\n<td>RSA_KEY_DIR</td>\n<td><code>verify.RSA_KEY</code> &lt; builder-in path &gt;</td>\n<td>RSA key save path</td>\n</tr>\n<tr>\n<td>SAFE_ENGINE</td>\n<td>'RSA'</td>\n<td>Default encryption engine</td>\n</tr>\n<tr>\n<td>SECRET_KEY</td>\n<td>'a-=3bb51t_x#........s4_=w^40xj#7g'</td>\n<td>Secret key for fast encryption engine</td>\n</tr>\n<tr>\n<td>STORAGE_DIR</td>\n<td>'Verify'</td>\n<td>Save location of CAPTCHA</td>\n</tr>\n<tr>\n<td>DEFORM_NUMBER</td>\n<td>2</td>\n<td>Number of character twists</td>\n</tr>\n<tr>\n<td>DEFORM_OFFSET</td>\n<td>6 &lt; pixel &gt;</td>\n<td>The degree of character distortion</td>\n</tr></tbody></table>\n<h2>License</h2>\n<h3><a href=\"https://github.com/blackmonkey121/verify/blob/master/LICENSE\" rel=\"nofollow\">GPLv 3.0</a></h3>\n\n          </div>"}, "last_serial": 7149728, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "a0d7a266ec0b2eefa77139f57e9e846a", "sha256": "3130d6372062659743647e9f92c6c5b57d51e8901cb138f4194386e9b23b4865"}, "downloads": -1, "filename": "verify_python-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0d7a266ec0b2eefa77139f57e9e846a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.3", "size": 34185, "upload_time": "2020-05-02T04:50:28", "upload_time_iso_8601": "2020-05-02T04:50:28.632088Z", "url": "https://files.pythonhosted.org/packages/e6/03/2a37695a77ed05f10c756a0942b44b2dc43b727d0fe731475b687b40691c/verify_python-0.0.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0d7a266ec0b2eefa77139f57e9e846a", "sha256": "3130d6372062659743647e9f92c6c5b57d51e8901cb138f4194386e9b23b4865"}, "downloads": -1, "filename": "verify_python-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0d7a266ec0b2eefa77139f57e9e846a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.3", "size": 34185, "upload_time": "2020-05-02T04:50:28", "upload_time_iso_8601": "2020-05-02T04:50:28.632088Z", "url": "https://files.pythonhosted.org/packages/e6/03/2a37695a77ed05f10c756a0942b44b2dc43b727d0fe731475b687b40691c/verify_python-0.0.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:36:50 2020"}