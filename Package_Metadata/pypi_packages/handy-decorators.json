{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/siddheshsathe/handy-decorators.svg?branch=master)](https://travis-ci.org/siddheshsathe/handy-decorators)\n---\n# Handy Decorators\n---\nThis is a set of `handy decorators` which one can use for their day-to-day life coding.\n\n## Installation Method\nInstall it via pip\n```bash\npip install handy-decorators\n```\n\n## Description\nThe set of decorators contain some daily needed decorators for being used in our day to day coding life. This has following set of decorators.\n\n### trycatch\nThis decorator surounds your function with a `try-except` block and if your code/function raises an exception, it's caught by this decorator and reported by logging.\n```python\n>>> from decorators import trycatch\n>>> @trycatch\n... def func():\n...     print(0/0) # Division by 0 must raise exception\n...\n>>> func()\nException occurred: [integer division or modulo by zero]\n>>>\n```\n\n### timer\nThis decorator will calculate a time required in seconds by your function for execution.\n```python\n>>> from decorators import timer\n>>> @timer\n... def a():\n...     import time\n...     print('Hi')\n...     time.sleep(1)\n...\n>>> a()\nHi\nTime taken by the function is [1.00103902817] sec\n>>>\n```\n\n### singleton\nThis decorator is for making your class [`singleton`](https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html).\n<br>\nThe features given by this decorator are:\n* If instances of same class are created with **same** args and kwargs, decorator will return previously existing instance\n* If instances of same class are created with **different** args and kwargs, decorator will create a different one for you and store the newly created instance\n\n```python\n>>> from decorators import singleton\n>>>\n>>> @singleton\n... class A:\n...     def __init__(self, *args, **kwargs):\n...         pass\n...\n>>>\n>>> a = A(name='Siddhesh')\n>>> b = A(name='Siddhesh', lname='Sathe')\n>>> c = A(name='Siddhesh', lname='Sathe')\n>>> a is b  # has to be different\nFalse\n>>> b is c  # has to be same\nTrue\n>>>\n```\n---\nPlease create an issue if more decorators are needed.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "handy-decorators", "package_url": "https://pypi.org/project/handy-decorators/", "platform": "", "project_url": "https://pypi.org/project/handy-decorators/", "project_urls": null, "release_url": "https://pypi.org/project/handy-decorators/0.0.7/", "requires_dist": ["logging"], "requires_python": "", "summary": "Handy decorators for day-to-day use!", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2><a href=\"https://travis-ci.org/siddheshsathe/handy-decorators\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e226ce6aa7ee140fa803a46bfce5d6d5eb861ef/68747470733a2f2f7472617669732d63692e6f72672f736964646865736873617468652f68616e64792d6465636f7261746f72732e7376673f6272616e63683d6d6173746572\"></a></h2>\n<h1>Handy Decorators</h1>\n<hr>\n<p>This is a set of <code>handy decorators</code> which one can use for their day-to-day life coding.</p>\n<h2>Installation Method</h2>\n<p>Install it via pip</p>\n<pre>pip install handy-decorators\n</pre>\n<h2>Description</h2>\n<p>The set of decorators contain some daily needed decorators for being used in our day to day coding life. This has following set of decorators.</p>\n<h3>trycatch</h3>\n<p>This decorator surounds your function with a <code>try-except</code> block and if your code/function raises an exception, it's caught by this decorator and reported by logging.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">decorators</span> <span class=\"kn\">import</span> <span class=\"n\">trycatch</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@trycatch</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\"># Division by 0 must raise exception</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">()</span>\n<span class=\"ne\">Exception</span> <span class=\"n\">occurred</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">integer</span> <span class=\"n\">division</span> <span class=\"ow\">or</span> <span class=\"n\">modulo</span> <span class=\"n\">by</span> <span class=\"n\">zero</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<h3>timer</h3>\n<p>This decorator will calculate a time required in seconds by your function for execution.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">decorators</span> <span class=\"kn\">import</span> <span class=\"n\">timer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@timer</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">a</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hi'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">()</span>\n<span class=\"n\">Hi</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">by</span> <span class=\"n\">the</span> <span class=\"n\">function</span> <span class=\"ow\">is</span> <span class=\"p\">[</span><span class=\"mf\">1.00103902817</span><span class=\"p\">]</span> <span class=\"n\">sec</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<h3>singleton</h3>\n<p>This decorator is for making your class <a href=\"https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html\" rel=\"nofollow\"><code>singleton</code></a>.\n<br>\nThe features given by this decorator are:</p>\n<ul>\n<li>If instances of same class are created with <strong>same</strong> args and kwargs, decorator will return previously existing instance</li>\n<li>If instances of same class are created with <strong>different</strong> args and kwargs, decorator will create a different one for you and store the newly created instance</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">decorators</span> <span class=\"kn\">import</span> <span class=\"n\">singleton</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@singleton</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Siddhesh'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Siddhesh'</span><span class=\"p\">,</span> <span class=\"n\">lname</span><span class=\"o\">=</span><span class=\"s1\">'Sathe'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Siddhesh'</span><span class=\"p\">,</span> <span class=\"n\">lname</span><span class=\"o\">=</span><span class=\"s1\">'Sathe'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">b</span>  <span class=\"c1\"># has to be different</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"ow\">is</span> <span class=\"n\">c</span>  <span class=\"c1\"># has to be same</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<hr>\n<p>Please create an issue if more decorators are needed.</p>\n\n          </div>"}, "last_serial": 5621807, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "759263d00ad2bf12803cf00f732f6b27", "sha256": "953deea0a2836d2944436b2b2e6d9e4d980d9b37fc1a75b0fc95cbc8a018aa27"}, "downloads": -1, "filename": "handy_decorators-0.0.7-py2-none-any.whl", "has_sig": false, "md5_digest": "759263d00ad2bf12803cf00f732f6b27", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15446, "upload_time": "2019-08-01T13:04:03", "upload_time_iso_8601": "2019-08-01T13:04:03.183221Z", "url": "https://files.pythonhosted.org/packages/bc/f8/99c760e4f1c6226add1b358a740fe1b1d5bb5fe488dd601acb1446a3bda2/handy_decorators-0.0.7-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "759263d00ad2bf12803cf00f732f6b27", "sha256": "953deea0a2836d2944436b2b2e6d9e4d980d9b37fc1a75b0fc95cbc8a018aa27"}, "downloads": -1, "filename": "handy_decorators-0.0.7-py2-none-any.whl", "has_sig": false, "md5_digest": "759263d00ad2bf12803cf00f732f6b27", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15446, "upload_time": "2019-08-01T13:04:03", "upload_time_iso_8601": "2019-08-01T13:04:03.183221Z", "url": "https://files.pythonhosted.org/packages/bc/f8/99c760e4f1c6226add1b358a740fe1b1d5bb5fe488dd601acb1446a3bda2/handy_decorators-0.0.7-py2-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:36 2020"}