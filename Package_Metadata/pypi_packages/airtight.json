{"info": {"author": "Tom Elliott", "author_email": "tom.elliott@nyu.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "airtight\n========\n\nIf you're going to ``import antigravity``\\ , you'd better make sure the hatch is closed.\n\nThe **airtight** package is written for Python 3.6+. It provides idiosyncratic code that somewhat simplifies the creation and debugging of command-line python scripts.\n\nsimpler than a template\n-----------------------\n\nInstead of copying some 50-line template for your python script and then writing a bunch of calls to `argparse <https://docs.python.org/3/library/argparse.html>`_ and `logging <https://docs.python.org/3/library/logging.html>`_ just build some lists describing the arguments and logging level you want and invoke ``artight.cli.configure_commandline()``\\ :\n\n.. code-block:: python\n\n   #!/usr/bin/env python3\n   # -*- coding: utf-8 -*-\n   \"\"\"\n   Example script template using the airtight module\n   \"\"\"\n\n   from airtight.cli import configure_commandline\n   import logging\n\n   DEFAULT_LOG_LEVEL = logging.WARNING\n   OPTIONAL_ARGUMENTS = [\n       # each argument is a list: short option, long option, default value, \n       # help string, required?\n       ['-l', '--loglevel', 'NOTSET',\n           'desired logging level (' +\n           'case-insensitive string: DEBUG, INFO, WARNING, or ERROR',\n           False],\n       ['-v', '--verbose', False, 'verbose output (logging level == INFO)',\n           False],\n       ['-w', '--veryverbose', False,\n           'very verbose output (logging level == DEBUG)', False],\n       ['-x', '--custom', 7, 'your custom argument', False]\n   ]\n   POSITIONAL_ARGUMENTS = [\n       # each argument is a list with 3 elements: name, type, help\n       ['foovar', str, 'some input value that you want']\n   ]\n\n\n   def main(**kwargs):\n       \"\"\"Main function of your script.\n\n       kwargs -- keyword arguments as parsed from the command line\n       \"\"\"\n       # your additional code here\n\n\n   if __name__ == \"__main__\":\n       main(**configure_commandline(\n               OPTIONAL_ARGUMENTS, POSITIONAL_ARGUMENTS, DEFAULT_LOG_LEVEL))\n\nmake debug logging just a wee bit easier\n----------------------------------------\n\nThe ``airtight.logging`` module provides two methods: ``configure_logging()``\\ , which is used by ``airtight.cli.configure_commandline()``\\ , and ``flog()``\\ , which reduces typing when you want to log a variable's name and value.\n\nSo, you can write:\n\n.. code-block:: python\n\n   > from airtight.logging import flog\n   > fish = 'salmon'\n   > flog(fish)\n   DEBUG:foo_script: fish: 'salmon'\n\n``flog()`` logs to DEBUG by default, but an optional keyword argument ``level`` may be used to specify another standard level, e.g.:\n\n.. code-block:: python\n\n   > from airtight.logging import flog\n   > import logging\n   > fish = 'salmon'\n   > flog(fish, level=logging.WARNING)\n   WARNING:foo_script: fish: 'salmon'\n\nAnother optional keyword argument (\\ ``comment``\\ ) may be specified. A string value supplied via this argument will be postfixed to the logged variable name and value, thus:\n\n.. code-block:: python\n\n   > from airtight.logging import flog\n   > fish = 'salmon'\n   > flog(fish, comment='I like this fish!')\n   DEBUG:foo_script: fish: 'salmon' I like this fish!\n\netc.\n----\n\nBug reports and feature requests are welcome, but really I'd prefer pull requests. \n\ntodo\n----\n\n\n* docstrings", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paregorios/airtight", "keywords": "scripting", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "airtight", "package_url": "https://pypi.org/project/airtight/", "platform": "", "project_url": "https://pypi.org/project/airtight/", "project_urls": {"Homepage": "https://github.com/paregorios/airtight"}, "release_url": "https://pypi.org/project/airtight/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Components for scripts in python 3.6+", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>If you\u2019re going to <tt>import antigravity</tt>, you\u2019d better make sure the hatch is closed.</p>\n<p>The <strong>airtight</strong> package is written for Python 3.6+. It provides idiosyncratic code that somewhat simplifies the creation and debugging of command-line python scripts.</p>\n<div id=\"simpler-than-a-template\">\n<h2>simpler than a template</h2>\n<p>Instead of copying some 50-line template for your python script and then writing a bunch of calls to <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a> and <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">logging</a> just build some lists describing the arguments and logging level you want and invoke <tt>artight.cli.configure_commandline()</tt>:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">\"\"\"\nExample script template using the airtight module\n\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">airtight.cli</span> <span class=\"kn\">import</span> <span class=\"n\">configure_commandline</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">DEFAULT_LOG_LEVEL</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARNING</span>\n<span class=\"n\">OPTIONAL_ARGUMENTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># each argument is a list: short option, long option, default value,</span>\n    <span class=\"c1\"># help string, required?</span>\n    <span class=\"p\">[</span><span class=\"s1\">'-l'</span><span class=\"p\">,</span> <span class=\"s1\">'--loglevel'</span><span class=\"p\">,</span> <span class=\"s1\">'NOTSET'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'desired logging level ('</span> <span class=\"o\">+</span>\n        <span class=\"s1\">'case-insensitive string: DEBUG, INFO, WARNING, or ERROR'</span><span class=\"p\">,</span>\n        <span class=\"kc\">False</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'-v'</span><span class=\"p\">,</span> <span class=\"s1\">'--verbose'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'verbose output (logging level == INFO)'</span><span class=\"p\">,</span>\n        <span class=\"kc\">False</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'-w'</span><span class=\"p\">,</span> <span class=\"s1\">'--veryverbose'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'very verbose output (logging level == DEBUG)'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'-x'</span><span class=\"p\">,</span> <span class=\"s1\">'--custom'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'your custom argument'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">POSITIONAL_ARGUMENTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># each argument is a list with 3 elements: name, type, help</span>\n    <span class=\"p\">[</span><span class=\"s1\">'foovar'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s1\">'some input value that you want'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Main function of your script.\n\n    kwargs -- keyword arguments as parsed from the command line\n    \"\"\"</span>\n    <span class=\"c1\"># your additional code here</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">configure_commandline</span><span class=\"p\">(</span>\n            <span class=\"n\">OPTIONAL_ARGUMENTS</span><span class=\"p\">,</span> <span class=\"n\">POSITIONAL_ARGUMENTS</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_LOG_LEVEL</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"make-debug-logging-just-a-wee-bit-easier\">\n<h2>make debug logging just a wee bit easier</h2>\n<p>The <tt>airtight.logging</tt> module provides two methods: <tt>configure_logging()</tt>, which is used by <tt>airtight.cli.configure_commandline()</tt>, and <tt>flog()</tt>, which reduces typing when you want to log a variable\u2019s name and value.</p>\n<p>So, you can write:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">airtight.logging</span> <span class=\"kn\">import</span> <span class=\"n\">flog</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">fish</span> <span class=\"o\">=</span> <span class=\"s1\">'salmon'</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">flog</span><span class=\"p\">(</span><span class=\"n\">fish</span><span class=\"p\">)</span>\n<span class=\"n\">DEBUG</span><span class=\"p\">:</span><span class=\"n\">foo_script</span><span class=\"p\">:</span> <span class=\"n\">fish</span><span class=\"p\">:</span> <span class=\"s1\">'salmon'</span>\n</pre>\n<p><tt>flog()</tt> logs to DEBUG by default, but an optional keyword argument <tt>level</tt> may be used to specify another standard level, e.g.:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">airtight.logging</span> <span class=\"kn\">import</span> <span class=\"n\">flog</span>\n<span class=\"o\">&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">fish</span> <span class=\"o\">=</span> <span class=\"s1\">'salmon'</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">flog</span><span class=\"p\">(</span><span class=\"n\">fish</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">)</span>\n<span class=\"n\">WARNING</span><span class=\"p\">:</span><span class=\"n\">foo_script</span><span class=\"p\">:</span> <span class=\"n\">fish</span><span class=\"p\">:</span> <span class=\"s1\">'salmon'</span>\n</pre>\n<p>Another optional keyword argument (<tt>comment</tt>) may be specified. A string value supplied via this argument will be postfixed to the logged variable name and value, thus:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">airtight.logging</span> <span class=\"kn\">import</span> <span class=\"n\">flog</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">fish</span> <span class=\"o\">=</span> <span class=\"s1\">'salmon'</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">flog</span><span class=\"p\">(</span><span class=\"n\">fish</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"s1\">'I like this fish!'</span><span class=\"p\">)</span>\n<span class=\"n\">DEBUG</span><span class=\"p\">:</span><span class=\"n\">foo_script</span><span class=\"p\">:</span> <span class=\"n\">fish</span><span class=\"p\">:</span> <span class=\"s1\">'salmon'</span> <span class=\"n\">I</span> <span class=\"n\">like</span> <span class=\"n\">this</span> <span class=\"n\">fish</span><span class=\"err\">!</span>\n</pre>\n</div>\n<div id=\"etc\">\n<h2>etc.</h2>\n<p>Bug reports and feature requests are welcome, but really I\u2019d prefer pull requests.</p>\n</div>\n<div id=\"todo\">\n<h2>todo</h2>\n<ul>\n<li>docstrings</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3234975, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c3e17505adecf2f17e11a9016d1e9389", "sha256": "624fc7f60682caf74ef052833b861cdf148b896e213e6745491c2c18301f5e90"}, "downloads": -1, "filename": "airtight-0.1.tar.gz", "has_sig": false, "md5_digest": "c3e17505adecf2f17e11a9016d1e9389", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16569, "upload_time": "2017-10-08T19:42:12", "upload_time_iso_8601": "2017-10-08T19:42:12.512242Z", "url": "https://files.pythonhosted.org/packages/1e/30/a50514200f6e84c80883f9e13b1b1c0517bcdcb972dd04f19f572c33fb7a/airtight-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9b753f3d14a759ae33af17a30d4acd6c", "sha256": "dcfbd8833dd529d6c2ea5601afebf03dc7f624d94fa735cfaa8c6928d120c057"}, "downloads": -1, "filename": "airtight-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9b753f3d14a759ae33af17a30d4acd6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16903, "upload_time": "2017-10-08T22:43:12", "upload_time_iso_8601": "2017-10-08T22:43:12.989882Z", "url": "https://files.pythonhosted.org/packages/63/0a/235cdd7fa46383883916e803c71c8f0bb71abd8eed0ba760a9580511de3d/airtight-0.2.0.tar.gz", "yanked": false}], "0.2.0a1": [{"comment_text": "", "digests": {"md5": "181462327905e9bb375861722a84afc7", "sha256": "70729d2eae2b71aadf8903ec591e6961049a433ae5f619fa66e671a91c199278"}, "downloads": -1, "filename": "airtight-0.2.0a1.tar.gz", "has_sig": false, "md5_digest": "181462327905e9bb375861722a84afc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16782, "upload_time": "2017-10-08T21:53:44", "upload_time_iso_8601": "2017-10-08T21:53:44.766279Z", "url": "https://files.pythonhosted.org/packages/d9/62/e64aa22d86823fd0eeb72cc9d56a0210b7da117ce1755eddd1e1de7a3607/airtight-0.2.0a1.tar.gz", "yanked": false}], "0.2.0a2": [{"comment_text": "", "digests": {"md5": "06cd2baadcc3fef1e24afc78ba7899ed", "sha256": "0c9950594743a92f43e5cceb1d49ad196959ff007cae55dec98f4f288379224e"}, "downloads": -1, "filename": "airtight-0.2.0a2.tar.gz", "has_sig": false, "md5_digest": "06cd2baadcc3fef1e24afc78ba7899ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16800, "upload_time": "2017-10-08T22:00:24", "upload_time_iso_8601": "2017-10-08T22:00:24.683892Z", "url": "https://files.pythonhosted.org/packages/ba/1a/b809bae288cc01905fc47cb80c478ddda055cdb9dcff1d7761f6bbda89ad/airtight-0.2.0a2.tar.gz", "yanked": false}], "0.2.0a3": [{"comment_text": "", "digests": {"md5": "a3fa2ce73d7327c9d061844795c0024c", "sha256": "77ff065fb3c00aa3e269218340a0d4719156a4aa7ef52029d4f976197393e6ff"}, "downloads": -1, "filename": "airtight-0.2.0a3.tar.gz", "has_sig": false, "md5_digest": "a3fa2ce73d7327c9d061844795c0024c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16910, "upload_time": "2017-10-08T22:35:02", "upload_time_iso_8601": "2017-10-08T22:35:02.217160Z", "url": "https://files.pythonhosted.org/packages/84/d8/728a772ee74304db91a6c018ed1f5fcee40f2bce8c259b79f1f16db1a2c2/airtight-0.2.0a3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b753f3d14a759ae33af17a30d4acd6c", "sha256": "dcfbd8833dd529d6c2ea5601afebf03dc7f624d94fa735cfaa8c6928d120c057"}, "downloads": -1, "filename": "airtight-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9b753f3d14a759ae33af17a30d4acd6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16903, "upload_time": "2017-10-08T22:43:12", "upload_time_iso_8601": "2017-10-08T22:43:12.989882Z", "url": "https://files.pythonhosted.org/packages/63/0a/235cdd7fa46383883916e803c71c8f0bb71abd8eed0ba760a9580511de3d/airtight-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:25 2020"}