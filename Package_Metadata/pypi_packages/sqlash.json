{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: Implementation :: CPython"], "description": "sqlash\n========================================\n\nsqlalchemy short hand (dict from object)\n\nsqlash is simple query language for dict creation from model object.\n\n\nOneToMany or ManyToOne Relation exmaple\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmodels definition\n\n.. code:: python\n\n    import sqlalchemy as sa\n    import sqlalchemy.orm as orm\n    from sqlalchemy.ext.declarative import declarative_base\n\n    Base = declarative_base()\n\n\n    class User(Base):\n        __tablename__ = \"users\"\n        id = sa.Column(sa.Integer, primary_key=True)\n        name = sa.Column(sa.String(255), nullable=False)\n        created_at = sa.Column(sa.DateTime())\n        group_id = sa.Column(sa.Integer, sa.ForeignKey(\"groups.id\"))\n        group = orm.relationship(\"Group\", backref=\"users\", uselist=False)\n\n\n    class Group(Base):\n        __tablename__ = \"groups\"\n        id = sa.Column(sa.Integer, primary_key=True)\n        name = sa.Column(sa.String(255), nullable=False)\n        created_at = sa.Column(sa.DateTime())\n\n\n    # create serializer\n\n    from sqlash import Pair, SerializerFactory\n\n    def datetime_for_human(dt, r):\n        return dt.strftime(\"%Y/%m/%d %H:%M:%S\")\n\n    def int_for_human(v, r):\n        return \"this is {}\".format(v)\n\n    factory = SerializerFactory({t.Integer: int_for_human, t.DateTime: datetime_for_human})\n    serializer = factory()\n\nSerializer object is main of sqlash.\nconstructor of this object takes a mapping of sqlalchemy's field type to convertion function.\nand call Serializer.serialize() method for dict creation (e.g. json)\n\n\none to many example\n\n.. code:: python\n\n    users = [\n        User(name=\"boo\", created_at=datetime(2000, 1, 1)),\n        User(name=\"yoo\", created_at=datetime(2000, 1, 1)),\n    ]\n    group = Group(name=\"foo\", users=users)\n    print(serializer.serialize(group, [\"name\", Pair(\"users\", [\"name\"])]))\n    # {'users': [{'name': 'boo'}, {'name': 'yoo'}], 'name': 'foo'}\n\ncall Serializer.serialize() with [\"name\", Pair(\"users\", [\"name\"])]. \nso return dict including only names.\n\nmany to one\n\n.. code:: python\n\n    user = User(name=\"boo\", created_at=datetime(2000, 1, 1), group=group)\n    print(serializer.serialize(user, [\"name\", Pair(\"group\", [\"name\"])]))\n    # {'group': {'name': 'foo'}, 'name': 'boo'}\n\npassed query([\"name\", Pair(\"group\", [\"name\"])]) is almost same that one to many relation case.\nthis is detecting direction of relationship by serializer object, automatically.\n\nManyToMany relation example\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmay to many relation is also support.\n\nmodels definition\n\n.. code:: python\n\n    members_to_teams = sa.Table(\n        \"members_to_teams\", Base.metadata,\n        sa.Column(\"member_id\", sa.Integer, sa.ForeignKey(\"members.id\")),\n        sa.Column(\"team_id\", sa.Integer, sa.ForeignKey(\"teams.id\")),\n    )\n\n\n    class Member(Base):\n        __tablename__ = \"members\"\n        id = sa.Column(sa.Integer, primary_key=True)\n        name = sa.Column(sa.String(255), nullable=False)\n        created_at = sa.Column(sa.DateTime())\n        teams = orm.relationship(\"Team\", backref=\"members\", secondary=members_to_teams)\n\n\n    class Team(Base):\n        __tablename__ = \"teams\"\n        id = sa.Column(sa.Integer, primary_key=True)\n        name = sa.Column(sa.String(255), nullable=False)\n        created_at = sa.Column(sa.DateTime())\n\n\nmany to many exmaples\n\n.. code:: python\n\n    team0 = Team(name=\"foo\")\n    team1 = Team(name=\"boo\")\n    member0 = Member(name=\"x\")\n    member1 = Member(name=\"y\")\n    member2 = Member(name=\"z\")\n    team0.members.append(member0)\n    team0.members.append(member1)\n    team1.members.append(member1)\n    team1.members.append(member2)\n\n    print(serializer.serialize(team0, [\"name\", \"created_at\", Pair(\"members\", [\"name\", \"created_at\"])]))\n    # {'created_at': None, 'name': 'foo',\n    #  'members': [{'created_at': None, 'name': 'x'},\n    #              {'created_at': None, 'name': 'y'}]}\n\ncall with [\"name\", \"created_at\", Pair(\"members\", [\"name\", \"created_at\"])]. so, collecting name and created.\n\nabbreviation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\"*\" is all of fields, but excludes relationships and foreignkeys\n\n.. code:: python\n\n    user = User(group_id=1, name=\"foo\", created_at=datetime(2000, 1, 1))\n    result = serializer.serialize(user, [\"*\"])\n    assert result == {'name': 'foo', 'created_at': '2000/01/01 00:00:00', 'id': 'this is None'}\n\nrenaming\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\npassing renaming options call factory, then renaming key-name of dict.\n\n.. code:: python\n\n    factory = SerializerFactory({t.Integer: int_for_human, t.DateTime: datetime_for_human})\n    target = factory({\"name\": \"Name\", \"created_at\": \"CreatedAt\", \"id\": \"Id\"})\n    result = target.serialize(user, [\"*\"])\n    assert result == {'Name': 'foo', 'CreatedAt': '2000/01/01 00:00:00', 'Id': 'this is None'}", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "sqlash", "package_url": "https://pypi.org/project/sqlash/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqlash/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/sqlash/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "sqlalchemy shorthand (dict from object)", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>sqlalchemy short hand (dict from object)</p>\n<p>sqlash is simple query language for dict creation from model object.</p>\n<div id=\"onetomany-or-manytoone-relation-exmaple\">\n<h2>OneToMany or ManyToOne Relation exmaple</h2>\n<p>models definition</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span> <span class=\"k\">as</span> <span class=\"nn\">sa</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy.orm</span> <span class=\"k\">as</span> <span class=\"nn\">orm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.ext.declarative</span> <span class=\"kn\">import</span> <span class=\"n\">declarative_base</span>\n\n<span class=\"n\">Base</span> <span class=\"o\">=</span> <span class=\"n\">declarative_base</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"users\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">())</span>\n    <span class=\"n\">group_id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s2\">\"groups.id\"</span><span class=\"p\">))</span>\n    <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s2\">\"Group\"</span><span class=\"p\">,</span> <span class=\"n\">backref</span><span class=\"o\">=</span><span class=\"s2\">\"users\"</span><span class=\"p\">,</span> <span class=\"n\">uselist</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Group</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"groups\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">())</span>\n\n\n<span class=\"c1\"># create serializer</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sqlash</span> <span class=\"kn\">import</span> <span class=\"n\">Pair</span><span class=\"p\">,</span> <span class=\"n\">SerializerFactory</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">datetime_for_human</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%Y/%m/</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">int_for_human</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"this is </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n\n<span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">SerializerFactory</span><span class=\"p\">({</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">:</span> <span class=\"n\">int_for_human</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">:</span> <span class=\"n\">datetime_for_human</span><span class=\"p\">})</span>\n<span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">()</span>\n</pre>\n<p>Serializer object is main of sqlash.\nconstructor of this object takes a mapping of sqlalchemy\u2019s field type to convertion function.\nand call Serializer.serialize() method for dict creation (e.g. json)</p>\n<p>one to many example</p>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"boo\"</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n    <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"yoo\"</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n<span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">])]))</span>\n<span class=\"c1\"># {'users': [{'name': 'boo'}, {'name': 'yoo'}], 'name': 'foo'}</span>\n</pre>\n<p>call Serializer.serialize() with [\u201cname\u201d, Pair(\u201cusers\u201d, [\u201cname\u201d])].\nso return dict including only names.</p>\n<p>many to one</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"boo\"</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">group</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s2\">\"group\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">])]))</span>\n<span class=\"c1\"># {'group': {'name': 'foo'}, 'name': 'boo'}</span>\n</pre>\n<p>passed query([\u201cname\u201d, Pair(\u201cgroup\u201d, [\u201cname\u201d])]) is almost same that one to many relation case.\nthis is detecting direction of relationship by serializer object, automatically.</p>\n</div>\n<div id=\"manytomany-relation-example\">\n<h2>ManyToMany relation example</h2>\n<p>may to many relation is also support.</p>\n<p>models definition</p>\n<pre><span class=\"n\">members_to_teams</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"members_to_teams\"</span><span class=\"p\">,</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">,</span>\n    <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s2\">\"member_id\"</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s2\">\"members.id\"</span><span class=\"p\">)),</span>\n    <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s2\">\"team_id\"</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s2\">\"teams.id\"</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Member</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"members\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">())</span>\n    <span class=\"n\">teams</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s2\">\"Team\"</span><span class=\"p\">,</span> <span class=\"n\">backref</span><span class=\"o\">=</span><span class=\"s2\">\"members\"</span><span class=\"p\">,</span> <span class=\"n\">secondary</span><span class=\"o\">=</span><span class=\"n\">members_to_teams</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Team</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"teams\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">())</span>\n</pre>\n<p>many to many exmaples</p>\n<pre><span class=\"n\">team0</span> <span class=\"o\">=</span> <span class=\"n\">Team</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"n\">team1</span> <span class=\"o\">=</span> <span class=\"n\">Team</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"boo\"</span><span class=\"p\">)</span>\n<span class=\"n\">member0</span> <span class=\"o\">=</span> <span class=\"n\">Member</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"x\"</span><span class=\"p\">)</span>\n<span class=\"n\">member1</span> <span class=\"o\">=</span> <span class=\"n\">Member</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"y\"</span><span class=\"p\">)</span>\n<span class=\"n\">member2</span> <span class=\"o\">=</span> <span class=\"n\">Member</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"z\"</span><span class=\"p\">)</span>\n<span class=\"n\">team0</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">member0</span><span class=\"p\">)</span>\n<span class=\"n\">team0</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">member1</span><span class=\"p\">)</span>\n<span class=\"n\">team1</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">member1</span><span class=\"p\">)</span>\n<span class=\"n\">team1</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">member2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">team0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"created_at\"</span><span class=\"p\">,</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s2\">\"members\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"created_at\"</span><span class=\"p\">])]))</span>\n<span class=\"c1\"># {'created_at': None, 'name': 'foo',</span>\n<span class=\"c1\">#  'members': [{'created_at': None, 'name': 'x'},</span>\n<span class=\"c1\">#              {'created_at': None, 'name': 'y'}]}</span>\n</pre>\n<p>call with [\u201cname\u201d, \u201ccreated_at\u201d, Pair(\u201cmembers\u201d, [\u201cname\u201d, \u201ccreated_at\u201d])]. so, collecting name and created.</p>\n</div>\n<div id=\"abbreviation\">\n<h2>abbreviation</h2>\n<p>\u201c*\u201d is all of fields, but excludes relationships and foreignkeys</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"*\"</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'created_at'</span><span class=\"p\">:</span> <span class=\"s1\">'2000/01/01 00:00:00'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'this is None'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"renaming\">\n<h2>renaming</h2>\n<p>passing renaming options call factory, then renaming key-name of dict.</p>\n<pre><span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">SerializerFactory</span><span class=\"p\">({</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">:</span> <span class=\"n\">int_for_human</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">:</span> <span class=\"n\">datetime_for_human</span><span class=\"p\">})</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CreatedAt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Id\"</span><span class=\"p\">})</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"*\"</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'Name'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'CreatedAt'</span><span class=\"p\">:</span> <span class=\"s1\">'2000/01/01 00:00:00'</span><span class=\"p\">,</span> <span class=\"s1\">'Id'</span><span class=\"p\">:</span> <span class=\"s1\">'this is None'</span><span class=\"p\">}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1273618, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "140a9719455e7e8a4af16f67ea01d62a", "sha256": "9cc907c7973ec04dad0f2b7bc79aca0c84ed97bf9695bce41720cea10dcfb046"}, "downloads": -1, "filename": "sqlash-0.1.tar.gz", "has_sig": false, "md5_digest": "140a9719455e7e8a4af16f67ea01d62a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5485, "upload_time": "2014-06-27T13:36:26", "upload_time_iso_8601": "2014-06-27T13:36:26.357575Z", "url": "https://files.pythonhosted.org/packages/76/4c/4fe6817dac887f9f43ae7f19110d50b8cdcb6691c5acb4aa9d02369f3dbe/sqlash-0.1.tar.gz", "yanked": false}], "0.1.1": []}, "urls": [], "timestamp": "Fri May  8 03:03:50 2020"}