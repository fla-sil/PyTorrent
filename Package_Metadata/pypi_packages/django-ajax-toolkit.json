{"info": {"author": "Eleni Lixourioti", "author_email": "contact@eleni.co", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Unix", "Programming Language :: Python"], "description": "django-ajax-toolkit\n===================\n\n**Dependencies**\n\n* msgpack-python>=0.2.4\n* django>=1.3\n\n\n**CI status (Travis)**\n\n.. image:: https://api.travis-ci.org/Geekfish/django-ajax-toolkit.png?branch=master,release/0.1,release/0.2\n\nInstallation\n------------\n\nGrab it from pypi with::\n\n    pip install django-ajax-toolkit\n\nor::\n\n    easy_install django-ajax-toolkit\n\n\nReturning data objects in views\n-------------------------------\n\nJsonResponse\n~~~~~~~~~~~~\nIf you want to extend your views to work with ajax you may choose to return json data in your response.\nTo make this easier you can use ``JsonResponse`` found in ``ajaxtoolkit.http``::\n\n    from ajaxtoolkit.http import JsonResponse\n\n    class MyView(TemplateView):\n\n        def get(self, request, *args, **kwargs):\n            if request.is_ajax:\n                context = self.get_context_data()\n                return JsonResponse(context)\n            # ...\n\nThis will set the correct mimetype (``application/json``) and serialise your context data into a json object.\n\n\nMsgpackResponse\n~~~~~~~~~~~~~~~\n``MsgpackResponse`` works in a similar way to ``JsonResponse``, but uses msgpack to provide with binary serialisation.\nThe usage is the same as with ``JsonResponse``::\n\n\n    def get(self, request, *args, **kwargs):\n        if request.is_ajax:\n            context = self.get_context_data()\n            return MsgpackResponse(context)\n        # ...\n\n\nAjax Middleware\n---------------\nIf you're using Django's messages framework, you can also add ``ajaxtoolkit.middleware.AjaxMiddleware`` in your\nmiddleware.\n        \n\nThis will inject all messages generated in your request into your ``JsonResponse`` object::\n\n    from django.contrib import messages\n    from ajaxtoolkit.http import JsonResponse\n\n    class MyView(TemplateView):\n\n        def get(self, request, *args, **kwargs):\n            if request.is_ajax:\n                context = self.get_context_data()\n\n                messages.info(request, \"This is very useful\")\n                messages.warning(request, \"Be careful!\")\n\n                return JsonResponse(context)\n            # ...\n\nThis would be rendered as the following::\n\n    {\n        //...\n        'django_messages': [\n            {\"extra_tags\": \"info\",\n             \"message\": \"This is very useful\",\n             \"level\": 20},\n            {\"extra_tags\": \"warning\",\n             \"message\": \"Be careful!\",\n             \"level\": 30}\n        ]\n    }\n\n\nBypassing the message middleware\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to send an http response without attaching messages you can do that\nby setting the ``message_support`` attribute of the response object::\n\n    context = self.get_context_data()\n\n    response = JsonResponse(context)\n    response.message_support = False\n\n    return response\n\nYou can also choose to subclass the original response classes, eg.::\n\n    class MsgpackResponseWithoutMessages(MsgpackResponse):\n        message_support = False\n\n    # ...\n\n\nContribute\n==========\n\nClone, create a virtualenv and run::\n\n    make install\n\nThis will install all dependencies.  You can then run the tests with::\n\n    ./runtests.py", "description_content_type": null, "docs_url": "https://pythonhosted.org/django-ajax-toolkit/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Geekfish/django-ajax-toolkit", "keywords": "django,ajax,utilities,http", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-ajax-toolkit", "package_url": "https://pypi.org/project/django-ajax-toolkit/", "platform": "linux", "project_url": "https://pypi.org/project/django-ajax-toolkit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Geekfish/django-ajax-toolkit"}, "release_url": "https://pypi.org/project/django-ajax-toolkit/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Ajax goodies for django projects.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-ajax-toolkit\">\n<h2>django-ajax-toolkit</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>msgpack-python&gt;=0.2.4</li>\n<li>django&gt;=1.3</li>\n</ul>\n<p><strong>CI status (Travis)</strong></p>\n<img alt=\"https://api.travis-ci.org/Geekfish/django-ajax-toolkit.png?branch=master,release/0.1,release/0.2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04acbbb10190bdda1e96afc2f69b9febb6d6253a/68747470733a2f2f6170692e7472617669732d63692e6f72672f4765656b666973682f646a616e676f2d616a61782d746f6f6c6b69742e706e673f6272616e63683d6d61737465722c72656c656173652f302e312c72656c656173652f302e32\">\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Grab it from pypi with:</p>\n<pre>pip install django-ajax-toolkit\n</pre>\n<p>or:</p>\n<pre>easy_install django-ajax-toolkit\n</pre>\n</div>\n<div id=\"returning-data-objects-in-views\">\n<h3>Returning data objects in views</h3>\n<div id=\"jsonresponse\">\n<h4>JsonResponse</h4>\n<p>If you want to extend your views to work with ajax you may choose to return json data in your response.\nTo make this easier you can use <tt>JsonResponse</tt> found in <tt>ajaxtoolkit.http</tt>:</p>\n<pre>from ajaxtoolkit.http import JsonResponse\n\nclass MyView(TemplateView):\n\n    def get(self, request, *args, **kwargs):\n        if request.is_ajax:\n            context = self.get_context_data()\n            return JsonResponse(context)\n        # ...\n</pre>\n<p>This will set the correct mimetype (<tt>application/json</tt>) and serialise your context data into a json object.</p>\n</div>\n<div id=\"msgpackresponse\">\n<h4>MsgpackResponse</h4>\n<p><tt>MsgpackResponse</tt> works in a similar way to <tt>JsonResponse</tt>, but uses msgpack to provide with binary serialisation.\nThe usage is the same as with <tt>JsonResponse</tt>:</p>\n<pre>def get(self, request, *args, **kwargs):\n    if request.is_ajax:\n        context = self.get_context_data()\n        return MsgpackResponse(context)\n    # ...\n</pre>\n</div>\n</div>\n<div id=\"ajax-middleware\">\n<h3>Ajax Middleware</h3>\n<p>If you\u2019re using Django\u2019s messages framework, you can also add <tt>ajaxtoolkit.middleware.AjaxMiddleware</tt> in your\nmiddleware.</p>\n<p>This will inject all messages generated in your request into your <tt>JsonResponse</tt> object:</p>\n<pre>from django.contrib import messages\nfrom ajaxtoolkit.http import JsonResponse\n\nclass MyView(TemplateView):\n\n    def get(self, request, *args, **kwargs):\n        if request.is_ajax:\n            context = self.get_context_data()\n\n            messages.info(request, \"This is very useful\")\n            messages.warning(request, \"Be careful!\")\n\n            return JsonResponse(context)\n        # ...\n</pre>\n<p>This would be rendered as the following:</p>\n<pre>{\n    //...\n    'django_messages': [\n        {\"extra_tags\": \"info\",\n         \"message\": \"This is very useful\",\n         \"level\": 20},\n        {\"extra_tags\": \"warning\",\n         \"message\": \"Be careful!\",\n         \"level\": 30}\n    ]\n}\n</pre>\n<div id=\"bypassing-the-message-middleware\">\n<h4>Bypassing the message middleware</h4>\n<p>If you want to send an http response without attaching messages you can do that\nby setting the <tt>message_support</tt> attribute of the response object:</p>\n<pre>context = self.get_context_data()\n\nresponse = JsonResponse(context)\nresponse.message_support = False\n\nreturn response\n</pre>\n<p>You can also choose to subclass the original response classes, eg.:</p>\n<pre>class MsgpackResponseWithoutMessages(MsgpackResponse):\n    message_support = False\n\n# ...\n</pre>\n</div>\n</div>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>Clone, create a virtualenv and run:</p>\n<pre>make install\n</pre>\n<p>This will install all dependencies.  You can then run the tests with:</p>\n<pre>./runtests.py\n</pre>\n</div>\n\n          </div>"}, "last_serial": 878891, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "39ff485bdcf87d0134b3a2005eab226a", "sha256": "12db1798280e70a75a8e5665d64555ea6d0b0ea805d01ef899493cbf0bb585d9"}, "downloads": -1, "filename": "django-ajax-toolkit-0.1.tar.gz", "has_sig": false, "md5_digest": "39ff485bdcf87d0134b3a2005eab226a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2940, "upload_time": "2012-06-14T12:21:14", "upload_time_iso_8601": "2012-06-14T12:21:14.755957Z", "url": "https://files.pythonhosted.org/packages/17/d7/066ad5542627b515cd01ef619f30c51ddb4830acd38c2c444616d9f449a5/django-ajax-toolkit-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "94c4f30a879b9a25062a64aaddeb555a", "sha256": "fb938342e2807dec24d839cbae0b8f0e88cd35b7cf3e8689e8793198b8967a3e"}, "downloads": -1, "filename": "django-ajax-toolkit-0.1.1.tar.gz", "has_sig": false, "md5_digest": "94c4f30a879b9a25062a64aaddeb555a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2902, "upload_time": "2013-02-13T15:06:31", "upload_time_iso_8601": "2013-02-13T15:06:31.464633Z", "url": "https://files.pythonhosted.org/packages/d3/14/a657d1bdd7dff1adbb73a4a57d310eb06ed647cfc0b9bbcce2bdb2143448/django-ajax-toolkit-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "172e14c6963b7ede4a22b3c876f1ce5e", "sha256": "ad7ddf7bd029d98b9a6002ba1971ed86280278d29be7b7781168e93303e5c525"}, "downloads": -1, "filename": "django-ajax-toolkit-0.2.tar.gz", "has_sig": false, "md5_digest": "172e14c6963b7ede4a22b3c876f1ce5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3749, "upload_time": "2013-02-13T15:54:17", "upload_time_iso_8601": "2013-02-13T15:54:17.431496Z", "url": "https://files.pythonhosted.org/packages/a9/b7/2a5e97b151f2a54f9471fe20bfc9016f58204502dadd9493983a45168d7f/django-ajax-toolkit-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f9b1e570a6b36b1650b4f2b7bc8bf740", "sha256": "574d7a3c724905b823e83677bfc5c8dda852f302da507b07c83fc63087261569"}, "downloads": -1, "filename": "django-ajax-toolkit-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f9b1e570a6b36b1650b4f2b7bc8bf740", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3902, "upload_time": "2013-03-05T22:57:14", "upload_time_iso_8601": "2013-03-05T22:57:14.245041Z", "url": "https://files.pythonhosted.org/packages/0c/5f/050ca556d97090ef14b74e25005ecdeef0a061bfda40199a720748749f59/django-ajax-toolkit-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "f6e7562c293561efd9566f64533b6e9c", "sha256": "7762a958ff3a03c24bb365b6d8dc1ea3d7e435d1007e5c2935bffbdf5f6d3550"}, "downloads": -1, "filename": "django-ajax-toolkit-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f6e7562c293561efd9566f64533b6e9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4072, "upload_time": "2013-08-21T17:21:15", "upload_time_iso_8601": "2013-08-21T17:21:15.547114Z", "url": "https://files.pythonhosted.org/packages/ef/e8/fadbf26c1267c94b95de1b304a4f11e98c05ccf25cb6d6ee3e11eca881d5/django-ajax-toolkit-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "217c5a821738c7c710ea4d8dda8a16fe", "sha256": "fa476f76892486e4214ed9506c1d18b1fcad0014ffdbd4673efd8ba14de1b532"}, "downloads": -1, "filename": "django-ajax-toolkit-0.3.0.tar.gz", "has_sig": false, "md5_digest": "217c5a821738c7c710ea4d8dda8a16fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4098, "upload_time": "2013-10-02T10:40:18", "upload_time_iso_8601": "2013-10-02T10:40:18.012659Z", "url": "https://files.pythonhosted.org/packages/4a/aa/d6242597f794a1e134f99876661b1cd7e3f307aca2a0dd002d6422e1942a/django-ajax-toolkit-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "217c5a821738c7c710ea4d8dda8a16fe", "sha256": "fa476f76892486e4214ed9506c1d18b1fcad0014ffdbd4673efd8ba14de1b532"}, "downloads": -1, "filename": "django-ajax-toolkit-0.3.0.tar.gz", "has_sig": false, "md5_digest": "217c5a821738c7c710ea4d8dda8a16fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4098, "upload_time": "2013-10-02T10:40:18", "upload_time_iso_8601": "2013-10-02T10:40:18.012659Z", "url": "https://files.pythonhosted.org/packages/4a/aa/d6242597f794a1e134f99876661b1cd7e3f307aca2a0dd002d6422e1942a/django-ajax-toolkit-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:44 2020"}