{"info": {"author": "Johannes Paul, //SEIBERT/MEDIA GmbH", "author_email": "jpaul@seibert-media.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# automatix\nAutomation wrapper for bash and python commands\n\n\n# DESCRIPTION\n\n**automatix** is a wrapper for scripted sysadmin tasks. It offers\n some useful functionality for easier scripting and having full\n control over the automated process.\n\nThe idea of **automatix** is to write down all the commands you would\n normally type to your commandline or python console into a YAML file.\n Then use **automatix** to execute these commands. \n\nThere are different modes for **automatix** to work. Without any\n parameters automatix will try to execute the specified command\n pipeline from the script file until an error occurs or the pipeline\n is done. The interactive mode (**-i**) asks for every single\n commandline step whether to execute, skip or abort.\n Forced mode (**-f**) will also proceed if errors occur.\n\n**automatix** is originally designed for internal //SEIBERT/MEDIA use.\n It comes therefore with bundlewrap and teamvault support as well as\n the possibility to use your own logging library.\n\n## Warning:\n\nBeware that this tool cannot substitute the system administrators\n brain and it needs a responsible handling, since you can do\n (and destroy) almost everything with it.\n\n**Automatix** evaluates YAML files and executes defined commands as\n shell or python commands. There is no check for harmful commands.\n Be aware that this can cause critical damage to your system.\n\nPlease use the interactive mode and doublecheck commands before\n executing. Usage of automatix is at your own risk!\n\n\n# INSTALLATION\n\nAutomatix requires Python &ge; 3.6.\n\n```\npip install automatix\n```\n\n# CONFIGURATION\n\nYou can specify a path to a configuration YAML file via the\n environment variable **AUTOMATIX_CONFIG**.\nDefault location is \"~/.automatix.cfg.yaml\".\n\n### Example: .automatix.cfg.yaml\n\n    # Path to scripts directory\n    script_dir: ~/automatix_script_files\n\n    # Global constants for use in pipeline scripts\n    constants:\n      apt_update: 'apt-get -qy update'\n      apt_upgrade: 'DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::=--force-confold --no-install-recommends upgrade'\n      apt_full_upgrade: 'DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::=--force-confold --no-install-recommends full-upgrade'\n\n    # Encoding\n    encoding: utf-8\n\n    # Path for shell imports\n    import_path: '.'\n\n    # SSH Command used for remote connections\n    ssh_cmd: 'ssh {hostname} sudo '\n\n    # Temporary directory on remote machines for shell imports\n    remote_tmp_dir: 'automatix_tmp'\n\n    # Logger\n    logger: mylogger\n\n    # Logging library (has to implement the init_logger method)\n    logging_lib: mylib.logging\n\n    # Bundlewrap support, bundlewrap has to be installed (default: false)\n    bundlewrap: true\n\n    # Teamvault / Secret support, bundlewrap-teamvault has to be installed (default: false)\n    teamvault: true\n\n# SYNOPSIS\n\n**automatix** \\[**--help**|**-h**\\] \\[**--systems** \\[_SYSTEM1=NODENAME_ ...\\]\\]\n                 \\[**--vars** \\[_VAR1=VALUE1_ ...\\]\\]\n                 \\[**--secrets** \\[_SECRET1=SECRETID_ ...\\]\\]\n                 \\[**--print-overview**|**-p**\\]\n                 \\[**--jump-to**|**-j** _JUMP_TO_\\]\n                 \\[**--interactive**|**-i**\\] \\[**--force**|**-f**\\] \\[**--debug**|**-d**\\]\n                 \\[**--**\\] **scriptfile**\n\n\n## OPTIONS\n\n**scriptfile**\n: The only required parameter for this tool to work. Use \" -- \" if\n needed to delimit this from argument fields. See **SCRIPTFILE**\n section for more information.\n\n**-h**, **--help**\n: View help message and exit.\n\n**--systems** _SYSTEM1=NODENAME_\n: Use this to set systems without adding them to the\n  scriptfile or to overwrite them. You can specify multiple\n  systems like: --systems v1=string1 v2=string2 v3=string3\n\n**--vars** _VAR1=VALUE1_\n: Use this to set vars without adding them to the scriptfile\n  or to overwrite them. You can specify multiple vars\n  like: --vars v1=string1 v2=string2 v3=string3\n\n**--secrets** _SECRET1=SECRETID_\n: Use this to set secrets without adding them to the\n  scriptfile or to overwrite them. You can specify multiple\n  secrets like: --secrets v1=string1 v2=string2 v3=string3 *(only if\n  teamvault is enabled)*\n\n**--print-overview**, **-p**\n: Just print command pipeline overview with indices then exit without\n executing the commandline. Note that the *always pipeline* will be\n executed anyway.\n\n**--jump-to** _JUMP_TO_, **-j** _JUMP_TO_\n: Jump to step with index _JUMP_TO_ instead of starting at the\n beginning. Use **-p** or the output messages to determine the\n desired step index. You can use negative numbers to start counting\n from the end.\n\n**--interactive**, **-i**\n: Confirm actions before executing.\n\n**--force**, **-f**\n: Try always to proceed (except manual steps), even if errors occur\n (no retries).\n\n**--debug**, **-d**\n: Activate debug log level.\n\n\n### EXAMPLE: Usage\n\n    automatix -i --systems source=sourcesystem.com target=targetsystem.org -- scriptfile.yaml\n\n\n## SCRIPTFILE\n\nThe **scriptfile** describes your automated process. Therefore it\n contains information about systems, variables, secrets and the\n command pipeline.\n\nYou can provide a path to your **scriptfile** or place your\n scriptfile in the predefined directory (see **CONFIGURATION**\n section, _script_dir_). The path has precedence over the predefined\n directory, if the file exists at both locations.\n\nThe **scriptfile** has to contain valid YAML.\n\n### EXAMPLE: scriptfile\n\n    name: Migration Server XY\n    # Systems you like to refer to in pipeline (accessible via 'system_source')\n    # If Bundlewrap support is activated use node names instead of hostnames.\n    systems:\n      source: sourcesystem.com\n      target: targetsystem.org\n    # Custom vars to use in pipeline\n    vars:\n      version: 1.2.3\n      domain: 'bla.mein-test-system'\n    # Teamvault Secrets, if activated (left: like vars, right: SECRETID_FIELD, FIELD=username|password|file)\n    secrets:\n      web_user: v6GQag_username\n      web_pw: v6GQag_password\n    # Imports for functions you like to use (path may be modified in configuration)\n    imports:\n      - myfunctions.sh\n    # like command pipeline but will be exectuted always beforehand\n    always:\n      - python: |\n          import mylib as nc\n          PERSISTENT_VARS.update(locals())\n    pipeline:\n      - remote@target: systemctl stop server\n      - remote@source: zfs snapshot -r tank@before-migration\n      - manual: Please trigger preparing tasks via webinterface\n      - myvar=local: curl -L -vvv -k https://{domain}/\n      - local: echo \"1.1.1.1 {domain}\" >> /etc/hosts\n      - sla=python: source_node.metadata.get('sla')\n      - python: |\n            sla = '{sla}'\n            if sla == 'gold':\n                print('Wow that\\'s pretty cool. You have SLA Gold.')\n            else:\n                print('Oh. Running out of money? SLA Gold is worth it. You should check your wallet.')\n            PERSISTENT_VARS['sla'] = sla\n      - cond=python: sla == 'gold'\n      - cond?local: echo \"This command is only executed if sla is gold.\"\n    cleanup:\n      - local: rm temp_files\n\n\n### FIELDS\n\n**name** _(string)_\n: Just a name for the process. Does not do anything.\n\n**systems** _(associative array)_\n: Define some systems. Value has to be an valid and existing\n bundlewrap nodename.\nYou can refer to these systems in the command pipeline in multiple ways:\n\n1) remote@systemname as your command action (see below)\n\n2) via {system_systemname} which will be replaced with the value\n\n3) via systemname_node in python actions to use the bw node object\n\n**vars** _(associative array)_\n: Define some vars. These are accessible in the command pipeline via\n {varname}. Note: Only valid Python variable names are allowed.\n You can use \"*FILE_*\" prefix followed by a file path to assign the file\n content to the variable.\n\n**secrets** _(associative array)_\n: Define teamvault secrets. Value has to be in this format:\n _SECRETID_FIELD_. _FIELD_ must be one of username, password or file.\n The resolved secret values are accessible in command line via\n {secretname}. *(only if teamvault is enabled)*\n\n**imports** _(list)_\n: Listed shell files (see **CONFIGURATION** section, _import_path_)\n will be sourced before every local or remote command execution.\n For remote commands, these files are transferred via tar and ssh to\n your home directory on the remote system beforehand and deleted\n afterwards. This is meant to define some functions you may need.\n\n**always**, **cleanup** _(list of associative arrays)_\n: See **ALWAYS / CLEANUP PIPELINE** section.\n\n**pipeline** _(list of associative arrays)_\n: See **PIPELINE** section.\n\n### PIPELINE\n\nHere you define the commands automatix shall execute.\n\n**KEY**: One of these possible command actions:\n\n1) **manual**: Some manual instruction for the user. The user has to\n confirm, that automatix may proceed.\n\n2) **local**: Local shell command to execute. Imports will be sourced\n beforehand. /bin/bash will be used for execution.\n\n3) **remote@systemname**: Remote shell command to execute. Systemname\n has to be a defined system. The command will be run via SSH (without\n  pseudo-terminal allocation). It uses the standard SSH command.\n  Therefore your .ssh/config should be respected.\n\n4) **python**: Python code to execute. If bundlewrap is enabled,\n system node objects are available via systemname_node.\n\n**ASSIGNMENT**: For **local**, **remote** and **python** action you\n can also define a variable to which the output will be assigned.\n To do this prefix the desired variablename and = before the action\n key, e.g. `myvar=python: system_node.hostname`. Be careful when\n working with multiline statements. In **python** the first line is\n likely to set the variable. All variables will be converted to\n strings when used to build commands in following steps.\n\n**CONDITIONS**: You can define the command only to be executed if\n your condition variable evolves to \"True\" in Python. To achieve this\n write the variable name followed by a question mark at the very\n beginning like `cond?python: destroy_system()`. Be aware that all\n output from **local** or **remote** commands will lead to an\n non-empty string which evolves to \"True\" in Python, but empty output\n will evolve to \"False\".\n\n**VALUE**: Your command. Variables will be replaced with Python\n format function. Therefore use curly brackets to refer to variables,\n systems, secrets and constants.\n\nConstants are available via const_KEY, where KEY is the key of your\n constants in your **CONFIGURATION** file. There you can define some\n widely used constants.\n\nIn most cases its a good idea to define your command in quotes to\n avoid parsing errors, but it is not always necessary. Another way is\n to use '|' to indicate a _literal scalar block_. There you can even\n define whole program structures for python (see example).\n\n#### Escaping in Pipeline\n\nBecause automatix uses Python's format() function:  \n`{` -> `{{`  \n`}` ->  `}}`  \n\nStandard YAML escapes (see also https://yaml.org/spec/1.2/spec.html):  \n`'` -> `''`  \n`\"` -> `\\\"`  \n`\\ ` -> `\\\\`  \n`:` -> Please use quotes (double or single).  \n\n\n### ALWAYS / CLEANUP PIPELINE\n\nSame usage as the 'normal' command pipeline, but will be executed\n every time at start of automatix (**always**) or at the end\n (**cleanup**) even if aborted (a). The commands are executed without\n --interactive flag, independend of the specified parameters.\n\nIntended use case for **always**: python imports or informations that\n are needed afterwards and do not change anything on systems.\n You want to have these available even if using --jump|-j feature.\n\nIntended use case for **cleanup**: Remove temporary files or artifacts.\n\n\n## ENVIRONMENT\n\n**AUTOMATIX_CONFIG**: Specify the path to the configuration file.\n Default is \"~/.automatix.cfg.yaml\".  \n\n**AUTOMATIX_TIME**: Set this to an arbitrary value to print the times\n for the single steps and the whole script.\n\n**ENCODING**: Specify output encoding. Default is \"UTF-8\".  \n\nAdditionally you can modify the environment to adjust things to your\n needs.\n\n\n# TIPS & TRICKS\n\nFor **python** action you can import libraries globally, e.g. `global\n pb; import isaclib.ionos as pb`. This allows you to assign output of\n library functions to (automatix) variables. _**BUT CAUTION: Choosing\n already existing (Python) variable names may lead to unexpected\n behaviour!!!**_ Maybe you want to check the source code (commands.py).  \nExplanation: automatix is written in Python and uses 'exec' to\n execute the command in function context. If you declare variables\n globally they remain across commands.\n\nAn alternative and maybe better way is to use the **PERSISTENT_VARS**\n dictionary to make variables persistent over **python** commands.\n This is added to the local scope of **python** actions.\n Examples:\n- To make all local variables of the actual command persistent use\n `PERSISTENT_VARS.update(locals())`.\n- To delete one persistent variable named \"myvar\" use\n `del PERSISTENT_VARS['myvar']`\n- To make variable \"v2\" persistent use `PERSISTENT_VARS['v2'] = v2`\n\nFor **python** action there are some modules, constants and functions\n which are already imported:   \n`re, subprocess, quote(from shlex)`\n\n# BEST PRACTISES\n\nThere are different ways to start scripting with **automatix**. The\n author's approach is mainly to consider the process and simply write\n down, what to do (manual steps for complex or not automated steps)\n and which commands to use.  \nThen start **automatix** in interactive mode (-i) and adjust the\n single steps one by one. Replace manual steps, if suitable. Whenever\n adjustment is needed, abort, adjust and restart **automatix** with\n jump (-j) to the adjusted step.  \nRepeat this procedure to automate more and more and increase quality,\n whenever you feel like it.\n\nConsider to put often used paths or code sequences in automatix\n variables for better readability.  \nDo the same with variable content like URLs, to make it possible to\n overwrite it by command line options. Where ever possible prefer to\n use functions to determine already available information, such as BW\n metadata, instead of defining things explicitly. This will make\n things easier when using the script with different systems /\n parameters.\n\nPreferred way of using **automatix** is to put often used and complex\n algorithms in shell functions or python libraries (shelllib/pylib)\n and import them. Advantage of this approach is that you can use your\n implemented functions multiple times and build up a toolbox of nice\n functionality over time.\n\n\n# NOTES\n\n**Manual steps** will always cause automatix to stop and wait for\n user input.\n\nBe careful with **assignments** containing line breaks (echo, ...).\n Using the variables may lead to unexpected behaviour or errors.\n\nAssignments containing **null bytes** are currently not supported.\n\nBecause the **always** pipeline should not change anything, aborting\n while running this pipeline will not trigger a cleanup.\n\nIf you want to abort the **pipeline** without triggering the\n **cleanup** pipeline, use CRTL+C.\n\nWhile **aborting remote functions** (via imports), automatix is not\n able to determine still running processes invoked by the function,\n because it only checks the processes for the commands (in this case\n the function name) which is called in the pipeline.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seibert-media/automatix", "keywords": "bash,shell,command,automation,process,wrapper,devops,system administration", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "automatix", "package_url": "https://pypi.org/project/automatix/", "platform": "", "project_url": "https://pypi.org/project/automatix/", "project_urls": {"Homepage": "https://github.com/seibert-media/automatix"}, "release_url": "https://pypi.org/project/automatix/1.2.1/", "requires_dist": ["pyyaml (>=5.1)"], "requires_python": ">=3.6", "summary": "Automation wrapper for bash and python commands", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>automatix</h1>\n<p>Automation wrapper for bash and python commands</p>\n<h1>DESCRIPTION</h1>\n<p><strong>automatix</strong> is a wrapper for scripted sysadmin tasks. It offers\nsome useful functionality for easier scripting and having full\ncontrol over the automated process.</p>\n<p>The idea of <strong>automatix</strong> is to write down all the commands you would\nnormally type to your commandline or python console into a YAML file.\nThen use <strong>automatix</strong> to execute these commands.</p>\n<p>There are different modes for <strong>automatix</strong> to work. Without any\nparameters automatix will try to execute the specified command\npipeline from the script file until an error occurs or the pipeline\nis done. The interactive mode (<strong>-i</strong>) asks for every single\ncommandline step whether to execute, skip or abort.\nForced mode (<strong>-f</strong>) will also proceed if errors occur.</p>\n<p><strong>automatix</strong> is originally designed for internal //SEIBERT/MEDIA use.\nIt comes therefore with bundlewrap and teamvault support as well as\nthe possibility to use your own logging library.</p>\n<h2>Warning:</h2>\n<p>Beware that this tool cannot substitute the system administrators\nbrain and it needs a responsible handling, since you can do\n(and destroy) almost everything with it.</p>\n<p><strong>Automatix</strong> evaluates YAML files and executes defined commands as\nshell or python commands. There is no check for harmful commands.\nBe aware that this can cause critical damage to your system.</p>\n<p>Please use the interactive mode and doublecheck commands before\nexecuting. Usage of automatix is at your own risk!</p>\n<h1>INSTALLATION</h1>\n<p>Automatix requires Python \u2265 3.6.</p>\n<pre><code>pip install automatix\n</code></pre>\n<h1>CONFIGURATION</h1>\n<p>You can specify a path to a configuration YAML file via the\nenvironment variable <strong>AUTOMATIX_CONFIG</strong>.\nDefault location is \"~/.automatix.cfg.yaml\".</p>\n<h3>Example: .automatix.cfg.yaml</h3>\n<pre><code># Path to scripts directory\nscript_dir: ~/automatix_script_files\n\n# Global constants for use in pipeline scripts\nconstants:\n  apt_update: 'apt-get -qy update'\n  apt_upgrade: 'DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::=--force-confold --no-install-recommends upgrade'\n  apt_full_upgrade: 'DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::=--force-confold --no-install-recommends full-upgrade'\n\n# Encoding\nencoding: utf-8\n\n# Path for shell imports\nimport_path: '.'\n\n# SSH Command used for remote connections\nssh_cmd: 'ssh {hostname} sudo '\n\n# Temporary directory on remote machines for shell imports\nremote_tmp_dir: 'automatix_tmp'\n\n# Logger\nlogger: mylogger\n\n# Logging library (has to implement the init_logger method)\nlogging_lib: mylib.logging\n\n# Bundlewrap support, bundlewrap has to be installed (default: false)\nbundlewrap: true\n\n# Teamvault / Secret support, bundlewrap-teamvault has to be installed (default: false)\nteamvault: true\n</code></pre>\n<h1>SYNOPSIS</h1>\n<p><strong>automatix</strong> [<strong>--help</strong>|<strong>-h</strong>] [<strong>--systems</strong> [<em>SYSTEM1=NODENAME</em> ...]]\n[<strong>--vars</strong> [<em>VAR1=VALUE1</em> ...]]\n[<strong>--secrets</strong> [<em>SECRET1=SECRETID</em> ...]]\n[<strong>--print-overview</strong>|<strong>-p</strong>]\n[<strong>--jump-to</strong>|<strong>-j</strong> <em>JUMP_TO</em>]\n[<strong>--interactive</strong>|<strong>-i</strong>] [<strong>--force</strong>|<strong>-f</strong>] [<strong>--debug</strong>|<strong>-d</strong>]\n[<strong>--</strong>] <strong>scriptfile</strong></p>\n<h2>OPTIONS</h2>\n<p><strong>scriptfile</strong>\n: The only required parameter for this tool to work. Use \" -- \" if\nneeded to delimit this from argument fields. See <strong>SCRIPTFILE</strong>\nsection for more information.</p>\n<p><strong>-h</strong>, <strong>--help</strong>\n: View help message and exit.</p>\n<p><strong>--systems</strong> <em>SYSTEM1=NODENAME</em>\n: Use this to set systems without adding them to the\nscriptfile or to overwrite them. You can specify multiple\nsystems like: --systems v1=string1 v2=string2 v3=string3</p>\n<p><strong>--vars</strong> <em>VAR1=VALUE1</em>\n: Use this to set vars without adding them to the scriptfile\nor to overwrite them. You can specify multiple vars\nlike: --vars v1=string1 v2=string2 v3=string3</p>\n<p><strong>--secrets</strong> <em>SECRET1=SECRETID</em>\n: Use this to set secrets without adding them to the\nscriptfile or to overwrite them. You can specify multiple\nsecrets like: --secrets v1=string1 v2=string2 v3=string3 <em>(only if\nteamvault is enabled)</em></p>\n<p><strong>--print-overview</strong>, <strong>-p</strong>\n: Just print command pipeline overview with indices then exit without\nexecuting the commandline. Note that the <em>always pipeline</em> will be\nexecuted anyway.</p>\n<p><strong>--jump-to</strong> <em>JUMP_TO</em>, <strong>-j</strong> <em>JUMP_TO</em>\n: Jump to step with index <em>JUMP_TO</em> instead of starting at the\nbeginning. Use <strong>-p</strong> or the output messages to determine the\ndesired step index. You can use negative numbers to start counting\nfrom the end.</p>\n<p><strong>--interactive</strong>, <strong>-i</strong>\n: Confirm actions before executing.</p>\n<p><strong>--force</strong>, <strong>-f</strong>\n: Try always to proceed (except manual steps), even if errors occur\n(no retries).</p>\n<p><strong>--debug</strong>, <strong>-d</strong>\n: Activate debug log level.</p>\n<h3>EXAMPLE: Usage</h3>\n<pre><code>automatix -i --systems source=sourcesystem.com target=targetsystem.org -- scriptfile.yaml\n</code></pre>\n<h2>SCRIPTFILE</h2>\n<p>The <strong>scriptfile</strong> describes your automated process. Therefore it\ncontains information about systems, variables, secrets and the\ncommand pipeline.</p>\n<p>You can provide a path to your <strong>scriptfile</strong> or place your\nscriptfile in the predefined directory (see <strong>CONFIGURATION</strong>\nsection, <em>script_dir</em>). The path has precedence over the predefined\ndirectory, if the file exists at both locations.</p>\n<p>The <strong>scriptfile</strong> has to contain valid YAML.</p>\n<h3>EXAMPLE: scriptfile</h3>\n<pre><code>name: Migration Server XY\n# Systems you like to refer to in pipeline (accessible via 'system_source')\n# If Bundlewrap support is activated use node names instead of hostnames.\nsystems:\n  source: sourcesystem.com\n  target: targetsystem.org\n# Custom vars to use in pipeline\nvars:\n  version: 1.2.3\n  domain: 'bla.mein-test-system'\n# Teamvault Secrets, if activated (left: like vars, right: SECRETID_FIELD, FIELD=username|password|file)\nsecrets:\n  web_user: v6GQag_username\n  web_pw: v6GQag_password\n# Imports for functions you like to use (path may be modified in configuration)\nimports:\n  - myfunctions.sh\n# like command pipeline but will be exectuted always beforehand\nalways:\n  - python: |\n      import mylib as nc\n      PERSISTENT_VARS.update(locals())\npipeline:\n  - remote@target: systemctl stop server\n  - remote@source: zfs snapshot -r tank@before-migration\n  - manual: Please trigger preparing tasks via webinterface\n  - myvar=local: curl -L -vvv -k https://{domain}/\n  - local: echo \"1.1.1.1 {domain}\" &gt;&gt; /etc/hosts\n  - sla=python: source_node.metadata.get('sla')\n  - python: |\n        sla = '{sla}'\n        if sla == 'gold':\n            print('Wow that\\'s pretty cool. You have SLA Gold.')\n        else:\n            print('Oh. Running out of money? SLA Gold is worth it. You should check your wallet.')\n        PERSISTENT_VARS['sla'] = sla\n  - cond=python: sla == 'gold'\n  - cond?local: echo \"This command is only executed if sla is gold.\"\ncleanup:\n  - local: rm temp_files\n</code></pre>\n<h3>FIELDS</h3>\n<p><strong>name</strong> <em>(string)</em>\n: Just a name for the process. Does not do anything.</p>\n<p><strong>systems</strong> <em>(associative array)</em>\n: Define some systems. Value has to be an valid and existing\nbundlewrap nodename.\nYou can refer to these systems in the command pipeline in multiple ways:</p>\n<ol>\n<li>\n<p>remote@systemname as your command action (see below)</p>\n</li>\n<li>\n<p>via {system_systemname} which will be replaced with the value</p>\n</li>\n<li>\n<p>via systemname_node in python actions to use the bw node object</p>\n</li>\n</ol>\n<p><strong>vars</strong> <em>(associative array)</em>\n: Define some vars. These are accessible in the command pipeline via\n{varname}. Note: Only valid Python variable names are allowed.\nYou can use \"<em>FILE_</em>\" prefix followed by a file path to assign the file\ncontent to the variable.</p>\n<p><strong>secrets</strong> <em>(associative array)</em>\n: Define teamvault secrets. Value has to be in this format:\n<em>SECRETID_FIELD</em>. <em>FIELD</em> must be one of username, password or file.\nThe resolved secret values are accessible in command line via\n{secretname}. <em>(only if teamvault is enabled)</em></p>\n<p><strong>imports</strong> <em>(list)</em>\n: Listed shell files (see <strong>CONFIGURATION</strong> section, <em>import_path</em>)\nwill be sourced before every local or remote command execution.\nFor remote commands, these files are transferred via tar and ssh to\nyour home directory on the remote system beforehand and deleted\nafterwards. This is meant to define some functions you may need.</p>\n<p><strong>always</strong>, <strong>cleanup</strong> <em>(list of associative arrays)</em>\n: See <strong>ALWAYS / CLEANUP PIPELINE</strong> section.</p>\n<p><strong>pipeline</strong> <em>(list of associative arrays)</em>\n: See <strong>PIPELINE</strong> section.</p>\n<h3>PIPELINE</h3>\n<p>Here you define the commands automatix shall execute.</p>\n<p><strong>KEY</strong>: One of these possible command actions:</p>\n<ol>\n<li>\n<p><strong>manual</strong>: Some manual instruction for the user. The user has to\nconfirm, that automatix may proceed.</p>\n</li>\n<li>\n<p><strong>local</strong>: Local shell command to execute. Imports will be sourced\nbeforehand. /bin/bash will be used for execution.</p>\n</li>\n<li>\n<p><strong>remote@systemname</strong>: Remote shell command to execute. Systemname\nhas to be a defined system. The command will be run via SSH (without\npseudo-terminal allocation). It uses the standard SSH command.\nTherefore your .ssh/config should be respected.</p>\n</li>\n<li>\n<p><strong>python</strong>: Python code to execute. If bundlewrap is enabled,\nsystem node objects are available via systemname_node.</p>\n</li>\n</ol>\n<p><strong>ASSIGNMENT</strong>: For <strong>local</strong>, <strong>remote</strong> and <strong>python</strong> action you\ncan also define a variable to which the output will be assigned.\nTo do this prefix the desired variablename and = before the action\nkey, e.g. <code>myvar=python: system_node.hostname</code>. Be careful when\nworking with multiline statements. In <strong>python</strong> the first line is\nlikely to set the variable. All variables will be converted to\nstrings when used to build commands in following steps.</p>\n<p><strong>CONDITIONS</strong>: You can define the command only to be executed if\nyour condition variable evolves to \"True\" in Python. To achieve this\nwrite the variable name followed by a question mark at the very\nbeginning like <code>cond?python: destroy_system()</code>. Be aware that all\noutput from <strong>local</strong> or <strong>remote</strong> commands will lead to an\nnon-empty string which evolves to \"True\" in Python, but empty output\nwill evolve to \"False\".</p>\n<p><strong>VALUE</strong>: Your command. Variables will be replaced with Python\nformat function. Therefore use curly brackets to refer to variables,\nsystems, secrets and constants.</p>\n<p>Constants are available via const_KEY, where KEY is the key of your\nconstants in your <strong>CONFIGURATION</strong> file. There you can define some\nwidely used constants.</p>\n<p>In most cases its a good idea to define your command in quotes to\navoid parsing errors, but it is not always necessary. Another way is\nto use '|' to indicate a <em>literal scalar block</em>. There you can even\ndefine whole program structures for python (see example).</p>\n<h4>Escaping in Pipeline</h4>\n<p>Because automatix uses Python's format() function:<br>\n<code>{</code> -&gt; <code>{{</code><br>\n<code>}</code> -&gt;  <code>}}</code></p>\n<p>Standard YAML escapes (see also <a href=\"https://yaml.org/spec/1.2/spec.html\" rel=\"nofollow\">https://yaml.org/spec/1.2/spec.html</a>):<br>\n<code>'</code> -&gt; <code>''</code><br>\n<code>\"</code> -&gt; <code>\\\"</code><br>\n<code>\\</code> -&gt; <code>\\\\</code><br>\n<code>:</code> -&gt; Please use quotes (double or single).</p>\n<h3>ALWAYS / CLEANUP PIPELINE</h3>\n<p>Same usage as the 'normal' command pipeline, but will be executed\nevery time at start of automatix (<strong>always</strong>) or at the end\n(<strong>cleanup</strong>) even if aborted (a). The commands are executed without\n--interactive flag, independend of the specified parameters.</p>\n<p>Intended use case for <strong>always</strong>: python imports or informations that\nare needed afterwards and do not change anything on systems.\nYou want to have these available even if using --jump|-j feature.</p>\n<p>Intended use case for <strong>cleanup</strong>: Remove temporary files or artifacts.</p>\n<h2>ENVIRONMENT</h2>\n<p><strong>AUTOMATIX_CONFIG</strong>: Specify the path to the configuration file.\nDefault is \"~/.automatix.cfg.yaml\".</p>\n<p><strong>AUTOMATIX_TIME</strong>: Set this to an arbitrary value to print the times\nfor the single steps and the whole script.</p>\n<p><strong>ENCODING</strong>: Specify output encoding. Default is \"UTF-8\".</p>\n<p>Additionally you can modify the environment to adjust things to your\nneeds.</p>\n<h1>TIPS &amp; TRICKS</h1>\n<p>For <strong>python</strong> action you can import libraries globally, e.g. <code>global pb; import isaclib.ionos as pb</code>. This allows you to assign output of\nlibrary functions to (automatix) variables. <em><strong>BUT CAUTION: Choosing\nalready existing (Python) variable names may lead to unexpected\nbehaviour!!!</strong></em> Maybe you want to check the source code (commands.py).<br>\nExplanation: automatix is written in Python and uses 'exec' to\nexecute the command in function context. If you declare variables\nglobally they remain across commands.</p>\n<p>An alternative and maybe better way is to use the <strong>PERSISTENT_VARS</strong>\ndictionary to make variables persistent over <strong>python</strong> commands.\nThis is added to the local scope of <strong>python</strong> actions.\nExamples:</p>\n<ul>\n<li>To make all local variables of the actual command persistent use\n<code>PERSISTENT_VARS.update(locals())</code>.</li>\n<li>To delete one persistent variable named \"myvar\" use\n<code>del PERSISTENT_VARS['myvar']</code></li>\n<li>To make variable \"v2\" persistent use <code>PERSISTENT_VARS['v2'] = v2</code></li>\n</ul>\n<p>For <strong>python</strong> action there are some modules, constants and functions\nwhich are already imported:<br>\n<code>re, subprocess, quote(from shlex)</code></p>\n<h1>BEST PRACTISES</h1>\n<p>There are different ways to start scripting with <strong>automatix</strong>. The\nauthor's approach is mainly to consider the process and simply write\ndown, what to do (manual steps for complex or not automated steps)\nand which commands to use.<br>\nThen start <strong>automatix</strong> in interactive mode (-i) and adjust the\nsingle steps one by one. Replace manual steps, if suitable. Whenever\nadjustment is needed, abort, adjust and restart <strong>automatix</strong> with\njump (-j) to the adjusted step.<br>\nRepeat this procedure to automate more and more and increase quality,\nwhenever you feel like it.</p>\n<p>Consider to put often used paths or code sequences in automatix\nvariables for better readability.<br>\nDo the same with variable content like URLs, to make it possible to\noverwrite it by command line options. Where ever possible prefer to\nuse functions to determine already available information, such as BW\nmetadata, instead of defining things explicitly. This will make\nthings easier when using the script with different systems /\nparameters.</p>\n<p>Preferred way of using <strong>automatix</strong> is to put often used and complex\nalgorithms in shell functions or python libraries (shelllib/pylib)\nand import them. Advantage of this approach is that you can use your\nimplemented functions multiple times and build up a toolbox of nice\nfunctionality over time.</p>\n<h1>NOTES</h1>\n<p><strong>Manual steps</strong> will always cause automatix to stop and wait for\nuser input.</p>\n<p>Be careful with <strong>assignments</strong> containing line breaks (echo, ...).\nUsing the variables may lead to unexpected behaviour or errors.</p>\n<p>Assignments containing <strong>null bytes</strong> are currently not supported.</p>\n<p>Because the <strong>always</strong> pipeline should not change anything, aborting\nwhile running this pipeline will not trigger a cleanup.</p>\n<p>If you want to abort the <strong>pipeline</strong> without triggering the\n<strong>cleanup</strong> pipeline, use CRTL+C.</p>\n<p>While <strong>aborting remote functions</strong> (via imports), automatix is not\nable to determine still running processes invoked by the function,\nbecause it only checks the processes for the commands (in this case\nthe function name) which is called in the pipeline.</p>\n\n          </div>"}, "last_serial": 7170561, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "9cdb305a0697c967c614cded72d6540a", "sha256": "ef4fb208eaf2457561042abe2caa0e35bbd1b857a1938d79fa393dfbdd4567e9"}, "downloads": -1, "filename": "automatix-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9cdb305a0697c967c614cded72d6540a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8514, "upload_time": "2019-11-14T18:13:05", "upload_time_iso_8601": "2019-11-14T18:13:05.966185Z", "url": "https://files.pythonhosted.org/packages/4c/7a/8cf29c8582607774db9a1b5bc92e612a797896f4e9c978c59c36f6fa1a2d/automatix-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae1bae17b4d72e43a05a82364a536dec", "sha256": "58f91484e4607de29d88a6bc1fca3b292b89dc825f10792ee0ff34f4e59f22c9"}, "downloads": -1, "filename": "automatix-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ae1bae17b4d72e43a05a82364a536dec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6430, "upload_time": "2019-11-14T18:13:08", "upload_time_iso_8601": "2019-11-14T18:13:08.100886Z", "url": "https://files.pythonhosted.org/packages/c0/ab/c51d9c24c41f55544f0be90bf53b36dff4fe9f35d4a04e74706f2c6849e5/automatix-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "8406ec69fc4e20150f13fc561fbeb495", "sha256": "20aa7c72d6a255f9e4e307330f70908ea9c34330c0dc29e27e81ef36f303521e"}, "downloads": -1, "filename": "automatix-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8406ec69fc4e20150f13fc561fbeb495", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8865, "upload_time": "2019-11-18T15:19:15", "upload_time_iso_8601": "2019-11-18T15:19:15.793123Z", "url": "https://files.pythonhosted.org/packages/25/9e/c6596633011e14e7e8cba5c00f578fdb2a9962ac574df064e6e1001b0e8e/automatix-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ac9445c00073a5865b981af7ec28a1d", "sha256": "999570a3be27a9e118b19aa0ae3a2935c879f25bb28e27a5175498579ba8500d"}, "downloads": -1, "filename": "automatix-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5ac9445c00073a5865b981af7ec28a1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6828, "upload_time": "2019-11-18T15:19:16", "upload_time_iso_8601": "2019-11-18T15:19:16.864667Z", "url": "https://files.pythonhosted.org/packages/34/79/85fc8e9b46c8457c5e8ebe5abb18984bc7f4c0a01ad80eb056a64f7258fc/automatix-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "97b9d851ece2fee93371d2a7d05399f3", "sha256": "d2e017c58c5f06d370c68c4de43615e3982226dc1d609ec645f0668bfcc616a1"}, "downloads": -1, "filename": "automatix-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97b9d851ece2fee93371d2a7d05399f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15273, "upload_time": "2019-12-02T15:49:06", "upload_time_iso_8601": "2019-12-02T15:49:06.464433Z", "url": "https://files.pythonhosted.org/packages/7a/2b/c84061f06c82c73965171b6fda7e353a5784056af9d03e358e31869020cf/automatix-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9f36a4c95e24b3591b01b02d72fcb5d", "sha256": "fc9421e550ca98543ee3e4888ea6172c85146715d870ce279a2bb6a5983884ee"}, "downloads": -1, "filename": "automatix-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d9f36a4c95e24b3591b01b02d72fcb5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17259, "upload_time": "2019-12-02T15:49:07", "upload_time_iso_8601": "2019-12-02T15:49:07.714778Z", "url": "https://files.pythonhosted.org/packages/fe/fd/232b98939d47cfd469264513f8fe17da4d131697cf8fd99ee4ebd462ef77/automatix-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d62876ec55e818998596b3f90dd5baf8", "sha256": "1e1b07ea25c84a0cd634673d7737542605fc0c0846f481d94f48ebb924ace121"}, "downloads": -1, "filename": "automatix-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d62876ec55e818998596b3f90dd5baf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15587, "upload_time": "2019-12-16T17:17:45", "upload_time_iso_8601": "2019-12-16T17:17:45.130795Z", "url": "https://files.pythonhosted.org/packages/c1/c8/f72c7d09bcc0fd12336ebcc8f23ea1b88bc8758e37c93c0843633a6f89d0/automatix-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9ea470c6e8134228ad38de2388a8ca4", "sha256": "f83ebca52f560c298794a226a906034fc9f5b230cc82941f5bf72be803d67df1"}, "downloads": -1, "filename": "automatix-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9ea470c6e8134228ad38de2388a8ca4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17608, "upload_time": "2019-12-16T17:17:46", "upload_time_iso_8601": "2019-12-16T17:17:46.651708Z", "url": "https://files.pythonhosted.org/packages/90/9e/13b692de8df6dba90d7ad471f1600a318228ff8e9411db14b59a6558cdb5/automatix-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "70a79bfe503d28e16d54c8ae09fcbc4b", "sha256": "3a15e2c0ae0ec31bf5c9aed6e06da25d5c840b6b954dafadfc768402d627f198"}, "downloads": -1, "filename": "automatix-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "70a79bfe503d28e16d54c8ae09fcbc4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15813, "upload_time": "2020-02-28T15:36:10", "upload_time_iso_8601": "2020-02-28T15:36:10.439081Z", "url": "https://files.pythonhosted.org/packages/35/50/3bf9cea2c75adeeea6e5161adba9df9ac2d1faf62f4b306096c5b5b8edcc/automatix-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd0e24188f8f8476e384baf2403562d2", "sha256": "c149801050cbdadb78d64b8c5a49e3eafdfde777693e13f7b035d6b3247a4ca6"}, "downloads": -1, "filename": "automatix-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fd0e24188f8f8476e384baf2403562d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17986, "upload_time": "2020-02-28T15:36:12", "upload_time_iso_8601": "2020-02-28T15:36:12.003950Z", "url": "https://files.pythonhosted.org/packages/29/c8/998571fecaf5eaef8bb82008f6ae9b815b46da42efbfb42660f17b7b9521/automatix-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bfad942661031eac39600d5bfb4d7b60", "sha256": "88383e3d86e665da302b5d51031f49609e95aab14bcc704c8234fe1fb5bcb13c"}, "downloads": -1, "filename": "automatix-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bfad942661031eac39600d5bfb4d7b60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16187, "upload_time": "2020-04-01T10:38:12", "upload_time_iso_8601": "2020-04-01T10:38:12.459335Z", "url": "https://files.pythonhosted.org/packages/65/0f/b3b867215f884b678482e6ec8276f8527cbb5ca2700188b171ead5acc99d/automatix-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c135bcc194074d7b2e750ebd9344b72", "sha256": "a0b45da1d177b580cffe8aa0e2ad5b96e7fde7ebae9dc0a3becf31d077dcdea6"}, "downloads": -1, "filename": "automatix-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c135bcc194074d7b2e750ebd9344b72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20059, "upload_time": "2020-04-01T10:38:13", "upload_time_iso_8601": "2020-04-01T10:38:13.815570Z", "url": "https://files.pythonhosted.org/packages/96/51/92df86a25e70c37af7f16edc1cd89c0a0b9d5ecc732b8019b7522a0c02cd/automatix-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "065fb86bf52cbbfb775f8aba8eefdbc4", "sha256": "38549f86ab0d00e5eca43a79a35eec8b16f6fed035f3ae152239cc53f33dc58f"}, "downloads": -1, "filename": "automatix-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "065fb86bf52cbbfb775f8aba8eefdbc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17109, "upload_time": "2020-04-02T11:01:35", "upload_time_iso_8601": "2020-04-02T11:01:35.983147Z", "url": "https://files.pythonhosted.org/packages/ee/48/37fe5f83652ed193f0623e7b2b8a7ad7a1e3b56f6fb64428a378cfd746cb/automatix-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9a67f6550ca2196c66ed2adc5070a29", "sha256": "97e335d37759273e77325ce99add0ef8b099675b8ce52638fb68d3227063b4ff"}, "downloads": -1, "filename": "automatix-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a9a67f6550ca2196c66ed2adc5070a29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19564, "upload_time": "2020-04-02T11:01:37", "upload_time_iso_8601": "2020-04-02T11:01:37.228238Z", "url": "https://files.pythonhosted.org/packages/cc/94/c1e52d652e4b89788be049c6d1586738f058d4025d070a58b343bc36d9f5/automatix-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "a5929c67f19f48605ffdab0ded1c8ff5", "sha256": "eeef62aa6db07d3aafe1c55c7eeae8ba69968b4c4ed27b00f6c60747cb6e2c72"}, "downloads": -1, "filename": "automatix-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a5929c67f19f48605ffdab0ded1c8ff5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17440, "upload_time": "2020-04-08T09:50:16", "upload_time_iso_8601": "2020-04-08T09:50:16.407775Z", "url": "https://files.pythonhosted.org/packages/1d/71/183b38890c7245c04317f1dac96527a1951b8d6e1493fd697a4bfa063b6b/automatix-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e77acef95ab4899a199e5e6bada2ba8d", "sha256": "0ee9d770dd16f64e7d209fcc5a3fc8d45299eeb63452be67e213f6a359c6c752"}, "downloads": -1, "filename": "automatix-1.2.0.tar.gz", "has_sig": false, "md5_digest": "e77acef95ab4899a199e5e6bada2ba8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19896, "upload_time": "2020-04-08T09:50:17", "upload_time_iso_8601": "2020-04-08T09:50:17.679282Z", "url": "https://files.pythonhosted.org/packages/d2/4a/6bf51a6c5006364c1a44379262330d1a7272d9b57a8c72a5d158c0ca530a/automatix-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ea4e983ba80cda504d8bae9ddf550360", "sha256": "72f964325089fe59b3ac56ccae6bb53d9d4256fc12cb6d50c84b1666236b4c0c"}, "downloads": -1, "filename": "automatix-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ea4e983ba80cda504d8bae9ddf550360", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17446, "upload_time": "2020-05-05T09:17:19", "upload_time_iso_8601": "2020-05-05T09:17:19.510807Z", "url": "https://files.pythonhosted.org/packages/a6/da/564b3e7337a09860e4e8179e340540681e0551c20cff1b05fcb9363bfe0b/automatix-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d34f0d577fc87fece5651771fbdb61a", "sha256": "824206fcd634d7cc123f94194f6eef4cbb3580b7309a489f04e4cb3299b1e330"}, "downloads": -1, "filename": "automatix-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5d34f0d577fc87fece5651771fbdb61a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19916, "upload_time": "2020-05-05T09:17:20", "upload_time_iso_8601": "2020-05-05T09:17:20.912330Z", "url": "https://files.pythonhosted.org/packages/ed/b5/b779350744ef9f7a091885a056ea18b79d4c8097598745d482566da64822/automatix-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea4e983ba80cda504d8bae9ddf550360", "sha256": "72f964325089fe59b3ac56ccae6bb53d9d4256fc12cb6d50c84b1666236b4c0c"}, "downloads": -1, "filename": "automatix-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ea4e983ba80cda504d8bae9ddf550360", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17446, "upload_time": "2020-05-05T09:17:19", "upload_time_iso_8601": "2020-05-05T09:17:19.510807Z", "url": "https://files.pythonhosted.org/packages/a6/da/564b3e7337a09860e4e8179e340540681e0551c20cff1b05fcb9363bfe0b/automatix-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d34f0d577fc87fece5651771fbdb61a", "sha256": "824206fcd634d7cc123f94194f6eef4cbb3580b7309a489f04e4cb3299b1e330"}, "downloads": -1, "filename": "automatix-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5d34f0d577fc87fece5651771fbdb61a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19916, "upload_time": "2020-05-05T09:17:20", "upload_time_iso_8601": "2020-05-05T09:17:20.912330Z", "url": "https://files.pythonhosted.org/packages/ed/b5/b779350744ef9f7a091885a056ea18b79d4c8097598745d482566da64822/automatix-1.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:14 2020"}