{"info": {"author": "Rithin Chalumuri", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# pytspsolver\n\nEasy to use package for rapid experimentation on the classic travelling salesman problem. Contains implementations of various optimization algorithms, cool visualizers and a plug-in architecture.\n\n[![Build Status](https://dev.azure.com/rithinchalumuri/pytspsolver/_apis/build/status/pytspsolver-CI?branchName=master)](https://dev.azure.com/rithinchalumuri/pytspsolver/_build/latest?definitionId=7&branchName=master) \n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/rithinch)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)]()\n\n## Installation\n\n```bash\n> pip install pytspsolver\n```\n\n ## Usage\n \n This package is designed to provide an intutive pythonic interface; allowing you to conduct experiments with minimal code and maximum flexibility. \ud83d\ude05\n \n Here's how you can kick-start a travelling salesman problem experiment:\n \n ```python\nfrom pytspsolver.entities import TSProblem\nfrom pytspsolver.experiments import Experiment\nfrom pytspsolver.solvers import *\nfrom pytspsolver.utilities import create_random_problem, get_tsp_lib_problem, Visualizer\nimport matplotlib.pyplot as plt\n\n# Create a few tsp problems (represented as an adjacency matrix)\nproblems = [create_random_problem(\"UniqueProblemName\"+str(i), i) for i in range(3,12)]\n\n# Pass in the location of TSPLIB95 dataset file\ntsp_prob = get_tsp_lib_problem(\"gr17.tsp\")\n\n# Create a new Experiment\nexperiment = Experiment()\n\n# Add the problems to the experiment (single or list of problems)\nexperiment.add_problem(tsp_prob)\nexperiment.add_problems(problems)\n\n# Add solvers to use in the experiment\nexperiment.add_solver(ExhaustiveSearch(time_limit=50))\nexperiment.add_solver(GreedySearch(time_limit=100))\n\n# Run the experiment desired number of times\nresults = experiment.run(epoch=10) \n\n# Set up Visualizer with experiment results\nvisualizer = Visualizer(results)\n\n# Show visualizations - automatically averages the results from different epochs\nvisualizer.plot_n_vs_time_all(plt)\n\n# Note: the visualizer has various plots available, they can be called in a similar fashion.\n ```\n \n It comes with a plug in architecture, therefore it is very customizable.\n\n ## Additional Examples\n\nA few examples have been implemented using jupyter notebooks; found in the **examples** folder. These notebooks can be accessed by launching jupyter notebook from your current conda environment. \n\n```bash\n> jupyter notebook\n```\n\n\ud83d\udc49 Make sure you are in the right environment when launching jupyter notebook, otherwise, jupyter notebook kernel will be pointing to a different python version which won't have ```pytspsolver``` package installed.\n\n##  Contributions\n\nContributions and pull requests are encouraged! \ud83d\udc4f\n\nIf you spot any issues or would like to add a new feature, please discuss it in the GitHub issues section prior to writing code and submitting a pull request.\n\n## Contributors\n\n* [Venkata Rithin Chalumuri](https://github.com/rithinch)\n* [Genaro Bedenko](https://github.coventry.ac.uk/bedenkog)\n* [Ovidiu Mitroi](https://github.coventry.ac.uk/mitroio)\n* [Rishi Mehangra](https://github.coventry.ac.uk/mehangrr)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rithinch/pytspsolver", "keywords": "tsp,optimization-experiments,python", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytspsolver", "package_url": "https://pypi.org/project/pytspsolver/", "platform": "", "project_url": "https://pypi.org/project/pytspsolver/", "project_urls": {"Homepage": "https://github.com/rithinch/pytspsolver"}, "release_url": "https://pypi.org/project/pytspsolver/0.0.1/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "Easy to use python package for rapid experimentation on the classic travelling salesman problem.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytspsolver</h1>\n<p>Easy to use package for rapid experimentation on the classic travelling salesman problem. Contains implementations of various optimization algorithms, cool visualizers and a plug-in architecture.</p>\n<p><a href=\"https://dev.azure.com/rithinchalumuri/pytspsolver/_build/latest?definitionId=7&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47e06fb7661932949329a3efd32cde4f545d7561/68747470733a2f2f6465762e617a7572652e636f6d2f72697468696e6368616c756d7572692f7079747370736f6c7665722f5f617069732f6275696c642f7374617475732f7079747370736f6c7665722d43493f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://saythanks.io/to/rithinch\" rel=\"nofollow\"><img alt=\"Say Thanks!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<h2>Installation</h2>\n<pre>&gt; pip install pytspsolver\n</pre>\n<h2>Usage</h2>\n<p>This package is designed to provide an intutive pythonic interface; allowing you to conduct experiments with minimal code and maximum flexibility. \ud83d\ude05</p>\n<p>Here's how you can kick-start a travelling salesman problem experiment:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytspsolver.entities</span> <span class=\"kn\">import</span> <span class=\"n\">TSProblem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytspsolver.experiments</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytspsolver.solvers</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytspsolver.utilities</span> <span class=\"kn\">import</span> <span class=\"n\">create_random_problem</span><span class=\"p\">,</span> <span class=\"n\">get_tsp_lib_problem</span><span class=\"p\">,</span> <span class=\"n\">Visualizer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># Create a few tsp problems (represented as an adjacency matrix)</span>\n<span class=\"n\">problems</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">create_random_problem</span><span class=\"p\">(</span><span class=\"s2\">\"UniqueProblemName\"</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Pass in the location of TSPLIB95 dataset file</span>\n<span class=\"n\">tsp_prob</span> <span class=\"o\">=</span> <span class=\"n\">get_tsp_lib_problem</span><span class=\"p\">(</span><span class=\"s2\">\"gr17.tsp\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a new Experiment</span>\n<span class=\"n\">experiment</span> <span class=\"o\">=</span> <span class=\"n\">Experiment</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add the problems to the experiment (single or list of problems)</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">add_problem</span><span class=\"p\">(</span><span class=\"n\">tsp_prob</span><span class=\"p\">)</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">add_problems</span><span class=\"p\">(</span><span class=\"n\">problems</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add solvers to use in the experiment</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">add_solver</span><span class=\"p\">(</span><span class=\"n\">ExhaustiveSearch</span><span class=\"p\">(</span><span class=\"n\">time_limit</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">))</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">add_solver</span><span class=\"p\">(</span><span class=\"n\">GreedySearch</span><span class=\"p\">(</span><span class=\"n\">time_limit</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Run the experiment desired number of times</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Set up Visualizer with experiment results</span>\n<span class=\"n\">visualizer</span> <span class=\"o\">=</span> <span class=\"n\">Visualizer</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show visualizations - automatically averages the results from different epochs</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">plot_n_vs_time_all</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Note: the visualizer has various plots available, they can be called in a similar fashion.</span>\n</pre>\n<p>It comes with a plug in architecture, therefore it is very customizable.</p>\n<h2>Additional Examples</h2>\n<p>A few examples have been implemented using jupyter notebooks; found in the <strong>examples</strong> folder. These notebooks can be accessed by launching jupyter notebook from your current conda environment.</p>\n<pre>&gt; jupyter notebook\n</pre>\n<p>\ud83d\udc49 Make sure you are in the right environment when launching jupyter notebook, otherwise, jupyter notebook kernel will be pointing to a different python version which won't have <code>pytspsolver</code> package installed.</p>\n<h2>Contributions</h2>\n<p>Contributions and pull requests are encouraged! \ud83d\udc4f</p>\n<p>If you spot any issues or would like to add a new feature, please discuss it in the GitHub issues section prior to writing code and submitting a pull request.</p>\n<h2>Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/rithinch\" rel=\"nofollow\">Venkata Rithin Chalumuri</a></li>\n<li><a href=\"https://github.coventry.ac.uk/bedenkog\" rel=\"nofollow\">Genaro Bedenko</a></li>\n<li><a href=\"https://github.coventry.ac.uk/mitroio\" rel=\"nofollow\">Ovidiu Mitroi</a></li>\n<li><a href=\"https://github.coventry.ac.uk/mehangrr\" rel=\"nofollow\">Rishi Mehangra</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5106479, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "932b48fb4a1c48cfbb1a4c8d71dc73aa", "sha256": "e99587f565bae988efe072a1dda67e06d9b899fef4b886d2c2a358674bfbeee0"}, "downloads": -1, "filename": "pytspsolver-0.0.1.tar.gz", "has_sig": false, "md5_digest": "932b48fb4a1c48cfbb1a4c8d71dc73aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12465, "upload_time": "2019-04-06T04:20:29", "upload_time_iso_8601": "2019-04-06T04:20:29.047858Z", "url": "https://files.pythonhosted.org/packages/85/55/01137020738c43d9a6c703a75fa2dd79d2e471d88917beba65536738ccfe/pytspsolver-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "932b48fb4a1c48cfbb1a4c8d71dc73aa", "sha256": "e99587f565bae988efe072a1dda67e06d9b899fef4b886d2c2a358674bfbeee0"}, "downloads": -1, "filename": "pytspsolver-0.0.1.tar.gz", "has_sig": false, "md5_digest": "932b48fb4a1c48cfbb1a4c8d71dc73aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12465, "upload_time": "2019-04-06T04:20:29", "upload_time_iso_8601": "2019-04-06T04:20:29.047858Z", "url": "https://files.pythonhosted.org/packages/85/55/01137020738c43d9a6c703a75fa2dd79d2e471d88917beba65536738ccfe/pytspsolver-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:00 2020"}