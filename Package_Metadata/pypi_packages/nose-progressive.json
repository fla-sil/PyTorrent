{"info": {"author": "Erik Rose", "author_email": "erikrose@grinchcentral.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Testing"], "description": "================\nnose-progressive\n================\n\nGive your tests a progress bar and smarter tracebacks in 3 lines::\n\n    pip install nose-progressive\n    cd your_project\n    nosetests --with-progressive\n\n.. image:: https://github.com/erikrose/nose-progressive/raw/master/in_progress.png\n\nnose-progressive is a nose_ plugin which displays progress in a stationary bar,\nfreeing the rest of the screen (as well as the scrollback buffer) for the\ncompact display of test failures, which it formats beautifully and usefully. It\ndisplays failures and errors as soon as they occur and avoids scrolling them\noff the screen in favor of less useful output. It also offers a number of other\nhuman-centric features to speed the debugging process.\n\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/\n\nThe governing philosophy of nose-progressive is to get useful information onto\nthe screen as soon as possible and keep it there as long as possible while\nstill indicating progress.\n\nFeatures\n========\n\nProgress Bar\n------------\n\nnose-progressive indicates progress in a stationary progress bar at the bottom\nof the screen. It supports a wide variety of terminal types and reacts to\nterminal resizing with all the grace it can muster. And unlike with the\nstandard dot-strewing testrunner, you can always see what test is running.\n\nTracebacks: Prompt, Pretty, and Practical\n-----------------------------------------\n\nnose, like most testrunners, typically waits until the bitter end to show error\nand failure tracebacks, which wastes a lot of time in large tests suites that\ntake many minutes to complete. We show tracebacks as soon as they occur so you\ncan start chasing them immediately, and we format them much better:\n\n* Judicious use of color and other formatting makes the traceback easy to scan.\n  It's especially easy to slide down the list of function names to keep your\n  place while debugging.\n* Omitting the *Traceback (most recent call last)* line and using relative\n  paths (optional), along with many other tweaks, fits much more in limited\n  screen space.\n* Identifying failed tests in a format that can be fed back to nose makes it\n  easy to re-run them::\n\n    FAIL: kitsune.apps.wiki.tests.test_parser:TestWikiVideo.test_video_english\n\n  To re-run the above, do this::\n\n    nosetests --with-progressive kitsune.apps.wiki.tests.test_parser:TestWikiVideo.test_video_english\n\n* The frame of the test itself always comes first; we skip any setup frames\n  from test harnesses and such. This keeps your concentration where it counts.\n  Also, like unittest itself, we hide any frames that descend into trivial\n  comparison helpers like ``assertEquals()`` or ``assertRaises()``.\n\n  (We're actually better at it than unittest. We don't just start hiding\n  frames at the first unittest one after the test; we snip off only the last\n  contiguous run of unittest frames. This lets you wrap your tests in the\n  decorators from the mock library, which masquerades as unittest, and still\n  see your tracebacks.)\n* Editor shortcuts (see below) let you jump right to any problem line in your\n  editor.\n\nEditor Shortcuts\n----------------\n\nFor each frame of a traceback, nose-progressive provides an editor shortcut.\nThis is a combination of a filesystem path and line number in a format\nunderstood by vi, emacs, the BBEdit command-line tool, and a number of other\neditors::\n\n  vi +361 apps/notifications/tests.py  # test_notification_completeness\n\nJust triple-click (or what have you) to select the line, and copy and paste it\nonto the command line. You'll land right at the offending line in your editor\nof choice. As a bonus, the editor shortcut is more compact than the stock\ntraceback formatting.\n\nYou can set which editor to use by setting any of these, which nose-progressive\nchecks in order:\n\n* The ``--progressive-editor`` commandline option\n* The ``NOSE_PROGRESSIVE_EDITOR`` environment variable\n* The ``$EDITOR`` environment variable\n\nCustom Error Classes\n--------------------\n\nnose-progressive fully supports custom error classes like Skip and\nDeprecated. We note the tests that raise them in realtime, just like normal\nerrors and failures::\n\n  TODO: kitsune.apps.sumo.tests.test_readonly:ReadOnlyModeTest.test_login_error\n\nHowever, when an error class is not considered a failure, we don't show it\nunless the ``--progressive-advisories`` option is used, and, even in that case,\nwe don't show a traceback (since usually the important bit of information is\n*that* the test was skipped, not the line it was skipped on). This stems from\nour philosophy of prioritizing useful information.\n\nCustom error classes are summarized in the counts after the run, along with\nfailures and errors::\n\n  4 tests, 1 failure, 1 error, 1 skip in 0.0s\n           ^^^^^^ Bold ^^^^^^\n\nThe non-zero counts of error classes that represent failures are bold to draw\nthe eye and to correspond with the bold details up in the scrollback. Just\nfollow the bold, and you'll find your bugs.\n\nDjango Support\n--------------\n\nnose-progressive can run your Django tests via django-nose_. Just install\ndjango-nose, then run your tests like so::\n\n  ./manage.py test --with-progressive --logging-clear-handlers\n\n.. _django-nose: https://github.com/jbalogh/django-nose\n\nInstallation\n============\n\n::\n\n  pip install nose-progressive\n\nOr, get the bleeding-edge, unreleased version::\n\n  pip install -e git://github.com/erikrose/nose-progressive.git#egg=nose-progressive\n\nUpgrading\n=========\n\nTo upgrade from an older version of nose-progressive, assuming you didn't\ninstall it from git::\n\n  pip install --upgrade nose-progressive\n\nUse\n===\n\nThe simple way::\n\n  nosetests --with-progressive\n\nMy favorite way, which suppresses any noisy log messages thrown by tests unless\nthey fail::\n\n  nosetests --with-progressive --logging-clear-handlers\n\nTo `use nose-progressive by default`_, add ``with-progressive=1`` to\n``.noserc``.\n\n.. _`use nose-progressive by default`: http://readthedocs.org/docs/nose/en/latest/usage.html#basic-usage\n\nOptions\n=======\n\nGeneral Options\n---------------\n\n``--progressive-editor``\n  The editor to use for the shortcuts in tracebacks. Defaults to the value of\n  ``$EDITOR`` and then \"vi\". Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_EDITOR``.\n``--progressive-abs``\n  Display paths in traceback as absolute, rather than relative to the current\n  working directory. This lets you copy and paste it to a shell in a different\n  cwd or to another program entirely. Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_ABSOLUTE_PATHS``.\n``--progressive-advisories``\n  Show even non-failure custom errors, like Skip and Deprecated, during test\n  runs. Equivalent environment variable: ``NOSE_PROGRESSIVE_ADVISORIES``.\n``--progressive-with-styling``\n  nose-progressive automatically omits bold and color formatting when its\n  output is directed to a non- terminal. Specifying\n  ``--progressive-with-styling`` forces such styling to be output regardless.\n  Equivalent environment variable: ``NOSE_PROGRESSIVE_WITH_STYLING``.\n``--progressive-with-bar``\n  nose-progressive automatically omits the progress bar when its output is\n  directed to a non-terminal. Specifying ``--progressive-with-bar`` forces the\n  bar to be output regardless. This option implies\n  ``--progressive-with-styling``. Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_WITH_BAR``.\n\nColor Options\n-------------\n\nEach of these takes an ANSI color expressed as a number from 0 to 15.\n\n``--progressive-function-color=<0..15>``\n  Color of function names in tracebacks. Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_FUNCTION_COLOR``.\n``--progressive-dim-color=<0..15>``\n  Color of de-emphasized text (like editor shortcuts) in tracebacks. Equivalent\n  environment variable: ``NOSE_PROGRESSIVE_DIM_COLOR``.\n``--progressive-bar-filled=<0..15>``\n  Color of the progress bar's filled portion. Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_BAR_FILLED_COLOR``.\n``--progressive-bar-empty=<0..15>``\n  Color of the progress bar's empty portion. Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_BAR_EMPTY_COLOR``.\n\nAdvanced Formatting\n-------------------\n\nIf you can't get what you want with the above options\u2014for example, if your\neditor needs a different line number syntax\u2014you can replace the entire\ntemplate that controls the editor shortcut lines of the traceback. You can even\n`rig clickable URLs\n<http://blog.macromates.com/2007/the-textmate-url-scheme/>`_ `in most terminals\n<http://stackoverflow.com/questions/2338765/is-there-a-way-to-make-a-link-\nclickable-in-the-osx-terminal>`_ that take you straight to the right line in\nyour editor, without even the bother of copy and paste.\n\n``--progressive-editor-shortcut-template='<template>'``\n  ``<template>`` is a `format string\n  <http://docs.python.org/2/library/string.html#formatstrings>`_ as accepted by\n  ``str.format()``. Equivalent environment variable:\n  ``NOSE_PROGRESSIVE_EDITOR_SHORTCUT_TEMPLATE``.\n\nThe default template is... ::\n\n    '  {dim_format}{editor} +{line_number:<{line_number_max_width}} {path}{normal}{function_format}{hash_if_function}{function}{normal}'\n\nHere are the available keys:\n\n=====================    ======================================================\ndim_format               A terminal formatting sequence for de-emphasized text.\n                         Affected by ``--progressive-dim-color``.\n\neditor                   Your editor, set through ``--progressive-editor`` and\n                         ``$EDITOR``\n\nfunction                 The name of the function referenced by this stack\n                         frame\n\nfunction_format          A terminal formatting sequence for the function name.\n                         Affected by ``--progressive-function-color``.\n\nhash_if_function         ``'  # '`` if this frame has a ``function`` with a\n                         name; empty otherwise. Useful for commenting out the\n                         function name at the end of a line.\n\nline_number              The line number of the instruction this stack frame\n                         references\n\nline_number_max_width    The maximum width, in characters, of the line numbers\n                         in the traceback currently being formatted. Useful for\n                         aligning columns.\n\nnormal                   A terminal escape sequence that turns off all special\n                         formatting. A shortcut for ``term.normal``.\n\npath                     The path to the file this stack frame references.\n                         Affected by ``--progressive-abs``.\n\nterm                     A `blessings\n                         <http://pypi.python.org/pypi/blessings/>`_\n                         ``Terminal`` object, through which you can access any\n                         terminal capability, even compound ones such as\n                         ``term.bold_blue_on_bright_red``. This is your escape\n                         hatch to wild and crazy things beyond mere colors.\n=====================    ======================================================\n\nCaveats and Known Bugs\n======================\n\n* Makes a cosmetic mess when used with ``ipdb``. Consider ``pdbpp`` instead.\n* Some logging handlers will smear bits of the progress bar upward if they\n  don't print complete lines. I hope to fix this with some monkeypatching, but\n  in the meantime, passing ``--logging-clear-handlers`` works around this.\n\nHaving trouble? Pop over to the `issue tracker`_.\n\n.. _`issue tracker`: https://github.com/erikrose/nose-progressive/issues\n\nKudos\n=====\n\nThanks to Kumar McMillan for his nose-nicedots_ plugin, which provided\ninspiration and starting points for the path formatting. Thanks to my\nsupport.mozilla.com teammates for writing so many tests that this became\nnecessary. Thanks to Jeff Balogh for django-nose, without which I would have\nhad little motivation to write this.\n\n.. _nose-nicedots: https://github.com/kumar303/nose-nicedots\n\nAuthor\n======\n\nErik Rose, while waiting for tests to complete ;-)\n\nVersion History\n===============\n\n1.5.2\n  * Handle KeyboardInterrupt more gracefully. (Alexander Artemenko)\n  * Look up exception messages more compatibly with Python 3.4. (Paul Weaver)\n  * Gracefully handle proxied SyntaxErrors when using the logcapture plugin. (Lucas Taylor)\n  * Add LICENSE to MANIFEST.in. (Sanny Kumar)\n\n1.5.1\n  * Avoid a TypeError when running nose-progressive from within ``invoke``,\n    which obscures the terminal size.\n  * Fix a Unicode error when running setup.py inside Fedora's ``mock`` tool.\n\n1.5\n  * Add the ``--progressive-editor-shortcut-template`` option, letting you\n    completely customize the editor shortcuts. Now we support any text editor\n    that has a go-to-line option, no matter how it's spelled.\n  * Drop support for Python 2.5. We needed modern string formatting.\n  * Add first-class support for Python 3.2.3 and higher. It turned out my tox\n    config was just wrong.\n  * Tolerate Nones in traceback components: file names and code extracts\n    particularly. (Kyle Gibson)\n\n1.4.3\n  * Fix bar not showing up in Python 3.\n  * Add honest-to-goodness, tox-tested support for Python 3.3. 3.2 may come\n    later. 3.1 and earlier won't, because its stdlib hadn't got its curses act\n    together yet.\n\n1.4.2\n  * Clear the TestLoader's path cache (new in nose 1.3.0) after counting the\n    tests. This solves the problem of finding 0 tests to run under nose 1.3.0.\n  * Make progress bar tests less brittle so they don't falsely fail on OS X\n    10.8 or other platforms where the terminfo isn't exactly what I wrote the\n    test under.\n\n1.4.1\n  * Fix the \"AttributeError: 'dict' object has no attribute 'raw_input'\" error\n    that sometimes occurred at pdb breakpoints. Thanks to David Baumgold for\n    finding the cause!\n\n1.4\n  * Make the final \"OK!\" green and bold. This helps me pick it out faster.\n  * Warn when using ``--with-id`` and ``--verbosity=2`` or higher. (Jason Ward)\n  * Add experimental Python 3 support. Functionality might work, but\n    tests need to be ported to pass.\n  * Allow other nose plugins to process the test loader. (Ratnadeep Debnath)\n  * Show parameter values in the names of generated tests. (Bruno Binet)\n  * Tolerate a corner case in skipped tests without crashing. (Will\n    Kahn-Greene)\n  * Swallow chars that don't decode with UTF-8 when printing tracebacks: both\n    in filenames and source code. (Thanks to Bruno Binet for some patches\n    inspiring a rethink here.)\n\n1.3\n  * Redo progress bar. Now it is made of beautiful terminal magic instead of\n    equal signs. It looks best when your terminal supports at least 16 colors,\n    but there's a monochrome fallback for fewer. Or, you can customize the\n    colors using several new command-line options.\n  * Fix a Unicode encoding error that happened when non-ASCII chars appeared in\n    traceback text. (Naoya INADA)\n\n1.2.1\n  * Tolerate empty tracebacks in the formatter. This avoids exacerbating\n    crashes that occur before any test frames.\n\n1.2\n  * Fix Python 2.5 support. (David Warde-Farley)\n  * Fix display of skipped tests in Python 2.7.\n  * Require nose 0.11.0 or greater. Before that, test counting didn't work\n    sometimes when test generators were involved. (David Warde-Farley)\n  * Hide the progress bar by default when not outputting to a terminal. This\n    lets you redirect nose-progressive's output to a file or another process\n    and get a nice list of tracebacks.\n  * Add an option for forcing the display of terminal formatting, even when\n    redirecting the output to a non-terminal.\n  * Factor out the terminal formatting library into `its own package`_.\n  * Start using tox for testing under multiple versions of Python.\n\n.. _`its own package`: http://pypi.python.org/pypi/blessings/\n\n1.1.1\n  * Fix a bug that would cause the formatter to crash on many SyntaxErrors.\n    This also improves the heuristics for identifying the test frame when\n    there's a SyntaxError: we can now find it as long as the error happens at a\n    frame below that of the test.\n\n1.1\n  * You can now set the editor nose-progressive uses separately from the\n    ``$EDITOR`` shell variable.\n\n1.0\n  * Every stack frame is now an editor shortcut. Not only does this make it\n    easier to navigate, but it's shorter in both height and width.\n  * Reformat tracebacks for great justice. Subtle coloring guides the eye down\n    the list of function names.\n  * Hide unittest-internal and other pre-test stack frames when printing\n    tracebacks. Fewer frames = less noise onscreen = less thinking = win!\n  * Add an option to use absolute paths in tracebacks.\n\n0.7\n  * Pick the correct stack frame for editor shortcuts to syntax errors. Had to\n    handle syntax errors specially, since they don't make it into the traceback\n    proper.\n  * Show the actual value of the $EDITOR env var rather than just \"$EDITOR\".\n    I'm hoping it makes it a little more obvious what to do with it, plus it\n    gives a working default if $EDITOR is not set. Plus plus it doesn't explode\n    if you have flags in your $EDITOR, e.g. ``bbedit -w``.\n\n0.6.1\n  * Fix a crash triggered by a test having no defined module. --failed should\n    always work now.\n\n0.6\n  * Major refactoring. nose-progressive now has its own testrunner and test\n    result class. This makes it fully compatible with the ``capture`` plugin\n    and other plugins that make output.\n  * Fully support custom error classes, like Skips and Deprecations. They are\n    printed during the test run, bolded if they represent failure, and\n    summarized in the counts after the run.\n  * Tests which write directly to stderr or stdout no longer smear the progress\n    bar.\n  * Add $EDITOR to editor shortcut: no more typing!\n  * Work with tests that don't have an address() method.\n  * Work with tests that return a null filename from test_address().\n  * Don't pave over pdb prompts (anymore?).\n  * Don't obscure the traceback when the @with_setup decorator on a test\n    generator fails.\n\n0.5.1\n  * Fix a crash on error when file of a stack frame or function of a test are\n    None.\n\n0.5\n  * Guess the frame of the test, and spit that out as the editor shortcut. No\n    more pointers to eq_()!\n  * More reliably determine the editor shortcut pathname, e.g. when running\n    tests from an egg distribution directory.\n  * Embolden bits of the summary that indicate errors or failures.\n\n0.4\n  * Add time elapsed to the final summary.\n  * Print \"OK!\" if no tests went ill. I seem to need this explicit affirmation\n    in order to avoid thinking after a test run.\n  * In the test failure output, switch the order of the line number and file\n    name. This makes it work with the BBEdit command-line tool in addition to\n    emacs and vi.\n\n0.3.1\n  * Cowboy attempt to fix a crasher on error by changing the entry_point to\n    nose.plugin.0.10\n\n0.3\n  * Progress bar now works with plain old nosetests, not just django-nose.\n    Sorry about that!\n  * Stop printing the test name twice in the progress bar.\n  * Add basic terminal resizing (SIGWINCH) support. Expanding is great, but\n    contracting is still a little ugly. Suggestions welcome.\n\n0.2\n  * Real progress bar!\n  * Don't crash at the end when ``--no-skips`` is passed.\n  * Print the exception, not just the traceback. That's kind of important. :-)\n  * Don't crash when a requested test doesn't exist.\n\n0.1.2\n  * More documentation tweaks. Package ``long_description`` now contains\n    README.\n\n0.1.1\n  * Add instructions for installing without git.\n  * Change package name in readme to the hypenated one. No behavior changes.\n\n0.1\n  * Initial release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erikrose/nose-progressive", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nose-progressive", "package_url": "https://pypi.org/project/nose-progressive/", "platform": "", "project_url": "https://pypi.org/project/nose-progressive/", "project_urls": {"Homepage": "https://github.com/erikrose/nose-progressive"}, "release_url": "https://pypi.org/project/nose-progressive/1.5.2/", "requires_dist": ["nose (>=1.2.1)", "blessings (<2.0,>=1.3)"], "requires_python": "", "summary": "A testrunner with a progress bar and smarter tracebacks", "version": "1.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Give your tests a progress bar and smarter tracebacks in 3 lines:</p>\n<pre>pip install nose-progressive\ncd your_project\nnosetests --with-progressive\n</pre>\n<img alt=\"https://github.com/erikrose/nose-progressive/raw/master/in_progress.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f6d87652d6858b435cf8e61699d1c2f6a678689/68747470733a2f2f6769746875622e636f6d2f6572696b726f73652f6e6f73652d70726f67726573736976652f7261772f6d61737465722f696e5f70726f67726573732e706e67\">\n<p>nose-progressive is a <a href=\"http://somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">nose</a> plugin which displays progress in a stationary bar,\nfreeing the rest of the screen (as well as the scrollback buffer) for the\ncompact display of test failures, which it formats beautifully and usefully. It\ndisplays failures and errors as soon as they occur and avoids scrolling them\noff the screen in favor of less useful output. It also offers a number of other\nhuman-centric features to speed the debugging process.</p>\n<p>The governing philosophy of nose-progressive is to get useful information onto\nthe screen as soon as possible and keep it there as long as possible while\nstill indicating progress.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"progress-bar\">\n<h3>Progress Bar</h3>\n<p>nose-progressive indicates progress in a stationary progress bar at the bottom\nof the screen. It supports a wide variety of terminal types and reacts to\nterminal resizing with all the grace it can muster. And unlike with the\nstandard dot-strewing testrunner, you can always see what test is running.</p>\n</div>\n<div id=\"tracebacks-prompt-pretty-and-practical\">\n<h3>Tracebacks: Prompt, Pretty, and Practical</h3>\n<p>nose, like most testrunners, typically waits until the bitter end to show error\nand failure tracebacks, which wastes a lot of time in large tests suites that\ntake many minutes to complete. We show tracebacks as soon as they occur so you\ncan start chasing them immediately, and we format them much better:</p>\n<ul>\n<li><p>Judicious use of color and other formatting makes the traceback easy to scan.\nIt\u2019s especially easy to slide down the list of function names to keep your\nplace while debugging.</p>\n</li>\n<li><p>Omitting the <em>Traceback (most recent call last)</em> line and using relative\npaths (optional), along with many other tweaks, fits much more in limited\nscreen space.</p>\n</li>\n<li><p>Identifying failed tests in a format that can be fed back to nose makes it\neasy to re-run them:</p>\n<pre>FAIL: kitsune.apps.wiki.tests.test_parser:TestWikiVideo.test_video_english\n</pre>\n<p>To re-run the above, do this:</p>\n<pre>nosetests --with-progressive kitsune.apps.wiki.tests.test_parser:TestWikiVideo.test_video_english\n</pre>\n</li>\n<li><p>The frame of the test itself always comes first; we skip any setup frames\nfrom test harnesses and such. This keeps your concentration where it counts.\nAlso, like unittest itself, we hide any frames that descend into trivial\ncomparison helpers like <tt>assertEquals()</tt> or <tt>assertRaises()</tt>.</p>\n<p>(We\u2019re actually better at it than unittest. We don\u2019t just start hiding\nframes at the first unittest one after the test; we snip off only the last\ncontiguous run of unittest frames. This lets you wrap your tests in the\ndecorators from the mock library, which masquerades as unittest, and still\nsee your tracebacks.)</p>\n</li>\n<li><p>Editor shortcuts (see below) let you jump right to any problem line in your\neditor.</p>\n</li>\n</ul>\n</div>\n<div id=\"editor-shortcuts\">\n<h3>Editor Shortcuts</h3>\n<p>For each frame of a traceback, nose-progressive provides an editor shortcut.\nThis is a combination of a filesystem path and line number in a format\nunderstood by vi, emacs, the BBEdit command-line tool, and a number of other\neditors:</p>\n<pre>vi +361 apps/notifications/tests.py  # test_notification_completeness\n</pre>\n<p>Just triple-click (or what have you) to select the line, and copy and paste it\nonto the command line. You\u2019ll land right at the offending line in your editor\nof choice. As a bonus, the editor shortcut is more compact than the stock\ntraceback formatting.</p>\n<p>You can set which editor to use by setting any of these, which nose-progressive\nchecks in order:</p>\n<ul>\n<li>The <tt><span class=\"pre\">--progressive-editor</span></tt> commandline option</li>\n<li>The <tt>NOSE_PROGRESSIVE_EDITOR</tt> environment variable</li>\n<li>The <tt>$EDITOR</tt> environment variable</li>\n</ul>\n</div>\n<div id=\"custom-error-classes\">\n<h3>Custom Error Classes</h3>\n<p>nose-progressive fully supports custom error classes like Skip and\nDeprecated. We note the tests that raise them in realtime, just like normal\nerrors and failures:</p>\n<pre>TODO: kitsune.apps.sumo.tests.test_readonly:ReadOnlyModeTest.test_login_error\n</pre>\n<p>However, when an error class is not considered a failure, we don\u2019t show it\nunless the <tt><span class=\"pre\">--progressive-advisories</span></tt> option is used, and, even in that case,\nwe don\u2019t show a traceback (since usually the important bit of information is\n<em>that</em> the test was skipped, not the line it was skipped on). This stems from\nour philosophy of prioritizing useful information.</p>\n<p>Custom error classes are summarized in the counts after the run, along with\nfailures and errors:</p>\n<pre>4 tests, 1 failure, 1 error, 1 skip in 0.0s\n         ^^^^^^ Bold ^^^^^^\n</pre>\n<p>The non-zero counts of error classes that represent failures are bold to draw\nthe eye and to correspond with the bold details up in the scrollback. Just\nfollow the bold, and you\u2019ll find your bugs.</p>\n</div>\n<div id=\"django-support\">\n<h3>Django Support</h3>\n<p>nose-progressive can run your Django tests via <a href=\"https://github.com/jbalogh/django-nose\" rel=\"nofollow\">django-nose</a>. Just install\ndjango-nose, then run your tests like so:</p>\n<pre>./manage.py test --with-progressive --logging-clear-handlers\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install nose-progressive\n</pre>\n<p>Or, get the bleeding-edge, unreleased version:</p>\n<pre>pip install -e git://github.com/erikrose/nose-progressive.git#egg=nose-progressive\n</pre>\n</div>\n<div id=\"upgrading\">\n<h2>Upgrading</h2>\n<p>To upgrade from an older version of nose-progressive, assuming you didn\u2019t\ninstall it from git:</p>\n<pre>pip install --upgrade nose-progressive\n</pre>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<p>The simple way:</p>\n<pre>nosetests --with-progressive\n</pre>\n<p>My favorite way, which suppresses any noisy log messages thrown by tests unless\nthey fail:</p>\n<pre>nosetests --with-progressive --logging-clear-handlers\n</pre>\n<p>To <a href=\"http://readthedocs.org/docs/nose/en/latest/usage.html#basic-usage\" rel=\"nofollow\">use nose-progressive by default</a>, add <tt><span class=\"pre\">with-progressive=1</span></tt> to\n<tt>.noserc</tt>.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<div id=\"general-options\">\n<h3>General Options</h3>\n<dl>\n<dt><tt><span class=\"pre\">--progressive-editor</span></tt></dt>\n<dd>The editor to use for the shortcuts in tracebacks. Defaults to the value of\n<tt>$EDITOR</tt> and then \u201cvi\u201d. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_EDITOR</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-abs</span></tt></dt>\n<dd>Display paths in traceback as absolute, rather than relative to the current\nworking directory. This lets you copy and paste it to a shell in a different\ncwd or to another program entirely. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_ABSOLUTE_PATHS</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-advisories</span></tt></dt>\n<dd>Show even non-failure custom errors, like Skip and Deprecated, during test\nruns. Equivalent environment variable: <tt>NOSE_PROGRESSIVE_ADVISORIES</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-with-styling</span></tt></dt>\n<dd>nose-progressive automatically omits bold and color formatting when its\noutput is directed to a non- terminal. Specifying\n<tt><span class=\"pre\">--progressive-with-styling</span></tt> forces such styling to be output regardless.\nEquivalent environment variable: <tt>NOSE_PROGRESSIVE_WITH_STYLING</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-with-bar</span></tt></dt>\n<dd>nose-progressive automatically omits the progress bar when its output is\ndirected to a non-terminal. Specifying <tt><span class=\"pre\">--progressive-with-bar</span></tt> forces the\nbar to be output regardless. This option implies\n<tt><span class=\"pre\">--progressive-with-styling</span></tt>. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_WITH_BAR</tt>.</dd>\n</dl>\n</div>\n<div id=\"color-options\">\n<h3>Color Options</h3>\n<p>Each of these takes an ANSI color expressed as a number from 0 to 15.</p>\n<dl>\n<dt><tt><span class=\"pre\">--progressive-function-color=&lt;0..15&gt;</span></tt></dt>\n<dd>Color of function names in tracebacks. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_FUNCTION_COLOR</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-dim-color=&lt;0..15&gt;</span></tt></dt>\n<dd>Color of de-emphasized text (like editor shortcuts) in tracebacks. Equivalent\nenvironment variable: <tt>NOSE_PROGRESSIVE_DIM_COLOR</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-bar-filled=&lt;0..15&gt;</span></tt></dt>\n<dd>Color of the progress bar\u2019s filled portion. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_BAR_FILLED_COLOR</tt>.</dd>\n<dt><tt><span class=\"pre\">--progressive-bar-empty=&lt;0..15&gt;</span></tt></dt>\n<dd>Color of the progress bar\u2019s empty portion. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_BAR_EMPTY_COLOR</tt>.</dd>\n</dl>\n</div>\n<div id=\"advanced-formatting\">\n<h3>Advanced Formatting</h3>\n<p>If you can\u2019t get what you want with the above options\u2014for example, if your\neditor needs a different line number syntax\u2014you can replace the entire\ntemplate that controls the editor shortcut lines of the traceback. You can even\n<a href=\"http://blog.macromates.com/2007/the-textmate-url-scheme/\" rel=\"nofollow\">rig clickable URLs</a> <a href=\"http://stackoverflow.com/questions/2338765/is-there-a-way-to-make-a-link-clickable-in-the-osx-terminal\" rel=\"nofollow\">in most terminals</a> that take you straight to the right line in\nyour editor, without even the bother of copy and paste.</p>\n<dl>\n<dt><tt><span class=\"pre\">--progressive-editor-shortcut-template='&lt;template&gt;'</span></tt></dt>\n<dd><tt>&lt;template&gt;</tt> is a <a href=\"http://docs.python.org/2/library/string.html#formatstrings\" rel=\"nofollow\">format string</a> as accepted by\n<tt>str.format()</tt>. Equivalent environment variable:\n<tt>NOSE_PROGRESSIVE_EDITOR_SHORTCUT_TEMPLATE</tt>.</dd>\n</dl>\n<p>The default template is\u2026</p>\n<pre>'  {dim_format}{editor} +{line_number:&lt;{line_number_max_width}} {path}{normal}{function_format}{hash_if_function}{function}{normal}'\n</pre>\n<p>Here are the available keys:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>dim_format</td>\n<td>A terminal formatting sequence for de-emphasized text.\nAffected by <tt><span class=\"pre\">--progressive-dim-color</span></tt>.</td>\n</tr>\n<tr><td>editor</td>\n<td>Your editor, set through <tt><span class=\"pre\">--progressive-editor</span></tt> and\n<tt>$EDITOR</tt></td>\n</tr>\n<tr><td>function</td>\n<td>The name of the function referenced by this stack\nframe</td>\n</tr>\n<tr><td>function_format</td>\n<td>A terminal formatting sequence for the function name.\nAffected by <tt><span class=\"pre\">--progressive-function-color</span></tt>.</td>\n</tr>\n<tr><td>hash_if_function</td>\n<td><tt>'\u00a0 # '</tt> if this frame has a <tt>function</tt> with a\nname; empty otherwise. Useful for commenting out the\nfunction name at the end of a line.</td>\n</tr>\n<tr><td>line_number</td>\n<td>The line number of the instruction this stack frame\nreferences</td>\n</tr>\n<tr><td>line_number_max_width</td>\n<td>The maximum width, in characters, of the line numbers\nin the traceback currently being formatted. Useful for\naligning columns.</td>\n</tr>\n<tr><td>normal</td>\n<td>A terminal escape sequence that turns off all special\nformatting. A shortcut for <tt>term.normal</tt>.</td>\n</tr>\n<tr><td>path</td>\n<td>The path to the file this stack frame references.\nAffected by <tt><span class=\"pre\">--progressive-abs</span></tt>.</td>\n</tr>\n<tr><td>term</td>\n<td>A <a href=\"http://pypi.python.org/pypi/blessings/\" rel=\"nofollow\">blessings</a>\n<tt>Terminal</tt> object, through which you can access any\nterminal capability, even compound ones such as\n<tt>term.bold_blue_on_bright_red</tt>. This is your escape\nhatch to wild and crazy things beyond mere colors.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"caveats-and-known-bugs\">\n<h2>Caveats and Known Bugs</h2>\n<ul>\n<li>Makes a cosmetic mess when used with <tt>ipdb</tt>. Consider <tt>pdbpp</tt> instead.</li>\n<li>Some logging handlers will smear bits of the progress bar upward if they\ndon\u2019t print complete lines. I hope to fix this with some monkeypatching, but\nin the meantime, passing <tt><span class=\"pre\">--logging-clear-handlers</span></tt> works around this.</li>\n</ul>\n<p>Having trouble? Pop over to the <a href=\"https://github.com/erikrose/nose-progressive/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n</div>\n<div id=\"kudos\">\n<h2>Kudos</h2>\n<p>Thanks to Kumar McMillan for his <a href=\"https://github.com/kumar303/nose-nicedots\" rel=\"nofollow\">nose-nicedots</a> plugin, which provided\ninspiration and starting points for the path formatting. Thanks to my\nsupport.mozilla.com teammates for writing so many tests that this became\nnecessary. Thanks to Jeff Balogh for django-nose, without which I would have\nhad little motivation to write this.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Erik Rose, while waiting for tests to complete ;-)</p>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<dl>\n<dt>1.5.2</dt>\n<dd><ul>\n<li>Handle KeyboardInterrupt more gracefully. (Alexander Artemenko)</li>\n<li>Look up exception messages more compatibly with Python 3.4. (Paul Weaver)</li>\n<li>Gracefully handle proxied SyntaxErrors when using the logcapture plugin. (Lucas Taylor)</li>\n<li>Add LICENSE to MANIFEST.in. (Sanny Kumar)</li>\n</ul>\n</dd>\n<dt>1.5.1</dt>\n<dd><ul>\n<li>Avoid a TypeError when running nose-progressive from within <tt>invoke</tt>,\nwhich obscures the terminal size.</li>\n<li>Fix a Unicode error when running setup.py inside Fedora\u2019s <tt>mock</tt> tool.</li>\n</ul>\n</dd>\n<dt>1.5</dt>\n<dd><ul>\n<li>Add the <tt><span class=\"pre\">--progressive-editor-shortcut-template</span></tt> option, letting you\ncompletely customize the editor shortcuts. Now we support any text editor\nthat has a go-to-line option, no matter how it\u2019s spelled.</li>\n<li>Drop support for Python 2.5. We needed modern string formatting.</li>\n<li>Add first-class support for Python 3.2.3 and higher. It turned out my tox\nconfig was just wrong.</li>\n<li>Tolerate Nones in traceback components: file names and code extracts\nparticularly. (Kyle Gibson)</li>\n</ul>\n</dd>\n<dt>1.4.3</dt>\n<dd><ul>\n<li>Fix bar not showing up in Python 3.</li>\n<li>Add honest-to-goodness, tox-tested support for Python 3.3. 3.2 may come\nlater. 3.1 and earlier won\u2019t, because its stdlib hadn\u2019t got its curses act\ntogether yet.</li>\n</ul>\n</dd>\n<dt>1.4.2</dt>\n<dd><ul>\n<li>Clear the TestLoader\u2019s path cache (new in nose 1.3.0) after counting the\ntests. This solves the problem of finding 0 tests to run under nose 1.3.0.</li>\n<li>Make progress bar tests less brittle so they don\u2019t falsely fail on OS X\n10.8 or other platforms where the terminfo isn\u2019t exactly what I wrote the\ntest under.</li>\n</ul>\n</dd>\n<dt>1.4.1</dt>\n<dd><ul>\n<li>Fix the \u201cAttributeError: \u2018dict\u2019 object has no attribute \u2018raw_input\u2019\u201d error\nthat sometimes occurred at pdb breakpoints. Thanks to David Baumgold for\nfinding the cause!</li>\n</ul>\n</dd>\n<dt>1.4</dt>\n<dd><ul>\n<li>Make the final \u201cOK!\u201d green and bold. This helps me pick it out faster.</li>\n<li>Warn when using <tt><span class=\"pre\">--with-id</span></tt> and <tt><span class=\"pre\">--verbosity=2</span></tt> or higher. (Jason Ward)</li>\n<li>Add experimental Python 3 support. Functionality might work, but\ntests need to be ported to pass.</li>\n<li>Allow other nose plugins to process the test loader. (Ratnadeep Debnath)</li>\n<li>Show parameter values in the names of generated tests. (Bruno Binet)</li>\n<li>Tolerate a corner case in skipped tests without crashing. (Will\nKahn-Greene)</li>\n<li>Swallow chars that don\u2019t decode with UTF-8 when printing tracebacks: both\nin filenames and source code. (Thanks to Bruno Binet for some patches\ninspiring a rethink here.)</li>\n</ul>\n</dd>\n<dt>1.3</dt>\n<dd><ul>\n<li>Redo progress bar. Now it is made of beautiful terminal magic instead of\nequal signs. It looks best when your terminal supports at least 16 colors,\nbut there\u2019s a monochrome fallback for fewer. Or, you can customize the\ncolors using several new command-line options.</li>\n<li>Fix a Unicode encoding error that happened when non-ASCII chars appeared in\ntraceback text. (Naoya INADA)</li>\n</ul>\n</dd>\n<dt>1.2.1</dt>\n<dd><ul>\n<li>Tolerate empty tracebacks in the formatter. This avoids exacerbating\ncrashes that occur before any test frames.</li>\n</ul>\n</dd>\n<dt>1.2</dt>\n<dd><ul>\n<li>Fix Python 2.5 support. (David Warde-Farley)</li>\n<li>Fix display of skipped tests in Python 2.7.</li>\n<li>Require nose 0.11.0 or greater. Before that, test counting didn\u2019t work\nsometimes when test generators were involved. (David Warde-Farley)</li>\n<li>Hide the progress bar by default when not outputting to a terminal. This\nlets you redirect nose-progressive\u2019s output to a file or another process\nand get a nice list of tracebacks.</li>\n<li>Add an option for forcing the display of terminal formatting, even when\nredirecting the output to a non-terminal.</li>\n<li>Factor out the terminal formatting library into <a href=\"http://pypi.python.org/pypi/blessings/\" rel=\"nofollow\">its own package</a>.</li>\n<li>Start using tox for testing under multiple versions of Python.</li>\n</ul>\n</dd>\n</dl>\n<dl>\n<dt>1.1.1</dt>\n<dd><ul>\n<li>Fix a bug that would cause the formatter to crash on many SyntaxErrors.\nThis also improves the heuristics for identifying the test frame when\nthere\u2019s a SyntaxError: we can now find it as long as the error happens at a\nframe below that of the test.</li>\n</ul>\n</dd>\n<dt>1.1</dt>\n<dd><ul>\n<li>You can now set the editor nose-progressive uses separately from the\n<tt>$EDITOR</tt> shell variable.</li>\n</ul>\n</dd>\n<dt>1.0</dt>\n<dd><ul>\n<li>Every stack frame is now an editor shortcut. Not only does this make it\neasier to navigate, but it\u2019s shorter in both height and width.</li>\n<li>Reformat tracebacks for great justice. Subtle coloring guides the eye down\nthe list of function names.</li>\n<li>Hide unittest-internal and other pre-test stack frames when printing\ntracebacks. Fewer frames = less noise onscreen = less thinking = win!</li>\n<li>Add an option to use absolute paths in tracebacks.</li>\n</ul>\n</dd>\n<dt>0.7</dt>\n<dd><ul>\n<li>Pick the correct stack frame for editor shortcuts to syntax errors. Had to\nhandle syntax errors specially, since they don\u2019t make it into the traceback\nproper.</li>\n<li>Show the actual value of the $EDITOR env var rather than just \u201c$EDITOR\u201d.\nI\u2019m hoping it makes it a little more obvious what to do with it, plus it\ngives a working default if $EDITOR is not set. Plus plus it doesn\u2019t explode\nif you have flags in your $EDITOR, e.g. <tt>bbedit <span class=\"pre\">-w</span></tt>.</li>\n</ul>\n</dd>\n<dt>0.6.1</dt>\n<dd><ul>\n<li>Fix a crash triggered by a test having no defined module. \u2013failed should\nalways work now.</li>\n</ul>\n</dd>\n<dt>0.6</dt>\n<dd><ul>\n<li>Major refactoring. nose-progressive now has its own testrunner and test\nresult class. This makes it fully compatible with the <tt>capture</tt> plugin\nand other plugins that make output.</li>\n<li>Fully support custom error classes, like Skips and Deprecations. They are\nprinted during the test run, bolded if they represent failure, and\nsummarized in the counts after the run.</li>\n<li>Tests which write directly to stderr or stdout no longer smear the progress\nbar.</li>\n<li>Add $EDITOR to editor shortcut: no more typing!</li>\n<li>Work with tests that don\u2019t have an address() method.</li>\n<li>Work with tests that return a null filename from test_address().</li>\n<li>Don\u2019t pave over pdb prompts (anymore?).</li>\n<li>Don\u2019t obscure the traceback when the @with_setup decorator on a test\ngenerator fails.</li>\n</ul>\n</dd>\n<dt>0.5.1</dt>\n<dd><ul>\n<li>Fix a crash on error when file of a stack frame or function of a test are\nNone.</li>\n</ul>\n</dd>\n<dt>0.5</dt>\n<dd><ul>\n<li>Guess the frame of the test, and spit that out as the editor shortcut. No\nmore pointers to eq_()!</li>\n<li>More reliably determine the editor shortcut pathname, e.g. when running\ntests from an egg distribution directory.</li>\n<li>Embolden bits of the summary that indicate errors or failures.</li>\n</ul>\n</dd>\n<dt>0.4</dt>\n<dd><ul>\n<li>Add time elapsed to the final summary.</li>\n<li>Print \u201cOK!\u201d if no tests went ill. I seem to need this explicit affirmation\nin order to avoid thinking after a test run.</li>\n<li>In the test failure output, switch the order of the line number and file\nname. This makes it work with the BBEdit command-line tool in addition to\nemacs and vi.</li>\n</ul>\n</dd>\n<dt>0.3.1</dt>\n<dd><ul>\n<li>Cowboy attempt to fix a crasher on error by changing the entry_point to\nnose.plugin.0.10</li>\n</ul>\n</dd>\n<dt>0.3</dt>\n<dd><ul>\n<li>Progress bar now works with plain old nosetests, not just django-nose.\nSorry about that!</li>\n<li>Stop printing the test name twice in the progress bar.</li>\n<li>Add basic terminal resizing (SIGWINCH) support. Expanding is great, but\ncontracting is still a little ugly. Suggestions welcome.</li>\n</ul>\n</dd>\n<dt>0.2</dt>\n<dd><ul>\n<li>Real progress bar!</li>\n<li>Don\u2019t crash at the end when <tt><span class=\"pre\">--no-skips</span></tt> is passed.</li>\n<li>Print the exception, not just the traceback. That\u2019s kind of important. :-)</li>\n<li>Don\u2019t crash when a requested test doesn\u2019t exist.</li>\n</ul>\n</dd>\n<dt>0.1.2</dt>\n<dd><ul>\n<li>More documentation tweaks. Package <tt>long_description</tt> now contains\nREADME.</li>\n</ul>\n</dd>\n<dt>0.1.1</dt>\n<dd><ul>\n<li>Add instructions for installing without git.</li>\n<li>Change package name in readme to the hypenated one. No behavior changes.</li>\n</ul>\n</dd>\n<dt>0.1</dt>\n<dd><ul>\n<li>Initial release</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 4532069, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4dba1ac7646a9acc18d235434014d3bf", "sha256": "9a69893bcc262f1b9bfdf8d9f83d43a0c3834246ec3a9b500742b5c5e88fcf90"}, "downloads": -1, "filename": "nose-progressive-0.1.tar.gz", "has_sig": false, "md5_digest": "4dba1ac7646a9acc18d235434014d3bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5571, "upload_time": "2011-02-12T02:26:32", "upload_time_iso_8601": "2011-02-12T02:26:32.500630Z", "url": "https://files.pythonhosted.org/packages/72/e5/bd9dfe6cd691511cebc6f4f61b7c050bc2eddbb982bdc0155ff5a34f2129/nose-progressive-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "402ebfce19ca4de11927f22205cb001f", "sha256": "9c1db76caf2b24ec75c3f91c9814ede9955663e1fee8e9085ab6fa2332843940"}, "downloads": -1, "filename": "nose-progressive-0.1.1.tar.gz", "has_sig": false, "md5_digest": "402ebfce19ca4de11927f22205cb001f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5713, "upload_time": "2011-02-12T02:52:16", "upload_time_iso_8601": "2011-02-12T02:52:16.673961Z", "url": "https://files.pythonhosted.org/packages/a6/76/a0bce1073eae4536032cfe59b04c54af15efe82f263be46cb33908e6a087/nose-progressive-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f9391e57ad7266317e351917dba61176", "sha256": "032ca3e7817f6d8a20ade226536c4d10abafd1f33ecdcbbee1d865558d9bb42a"}, "downloads": -1, "filename": "nose-progressive-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f9391e57ad7266317e351917dba61176", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6151, "upload_time": "2011-02-12T08:09:55", "upload_time_iso_8601": "2011-02-12T08:09:55.817249Z", "url": "https://files.pythonhosted.org/packages/7f/fa/4048000f42cf74a8ea733429bbde8f2c812871aa91ee08fa33fe8b4bb114/nose-progressive-0.1.2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5ff71b086f9b85bc57074728604dc69e", "sha256": "b79be568775fdecf02c46b3c2b044d7587e3669b7bd981605ba6b7436855d746"}, "downloads": -1, "filename": "nose-progressive-0.2.tar.gz", "has_sig": false, "md5_digest": "5ff71b086f9b85bc57074728604dc69e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7273, "upload_time": "2011-02-13T10:59:58", "upload_time_iso_8601": "2011-02-13T10:59:58.441217Z", "url": "https://files.pythonhosted.org/packages/56/75/c6fd65fc8b63f6d80919109b21ba69b5eec4f2c721653a5ffd65aa71db1b/nose-progressive-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "d4471ca402eaf2620eda1abc3b506ba0", "sha256": "ec1875c07a3d375946254bdb5eb900373801585799e37f9a7625cc0371baf31d"}, "downloads": -1, "filename": "nose-progressive-0.3.tar.gz", "has_sig": false, "md5_digest": "d4471ca402eaf2620eda1abc3b506ba0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8378, "upload_time": "2011-02-15T20:03:36", "upload_time_iso_8601": "2011-02-15T20:03:36.653185Z", "url": "https://files.pythonhosted.org/packages/5a/a8/5cae952f46eede343078a7a712597ce3b277b9682fd8757503a961b41540/nose-progressive-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "05fa1d8aca78d865e463a2a6469e22f5", "sha256": "6c95397639eb50385a657f75138cdbb0d24b152b8734a8ad3c3f6f4e988e4085"}, "downloads": -1, "filename": "nose-progressive-0.3.1.tar.gz", "has_sig": false, "md5_digest": "05fa1d8aca78d865e463a2a6469e22f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8452, "upload_time": "2011-02-15T21:04:59", "upload_time_iso_8601": "2011-02-15T21:04:59.883921Z", "url": "https://files.pythonhosted.org/packages/54/3a/92a594295589e66b7ebebe2b6f4d6dbdf9988c66db6f76b73ef3cfb7e939/nose-progressive-0.3.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "f23239e3f5e882d9a862aa32c4823117", "sha256": "fb100e84c7917f2ce6342798813be7e4ef27e436b775b0fcd6427d18afc6593e"}, "downloads": -1, "filename": "nose-progressive-0.4.tar.gz", "has_sig": false, "md5_digest": "f23239e3f5e882d9a862aa32c4823117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9008, "upload_time": "2011-02-17T19:46:07", "upload_time_iso_8601": "2011-02-17T19:46:07.184722Z", "url": "https://files.pythonhosted.org/packages/ff/39/0fcf10a567b3b5b509746fa1d41e3bd1f7f9f8a3070dd0dfeaebb58c6632/nose-progressive-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "9c4fa593c7d235052f511fdaa1f4d66e", "sha256": "55c89d75c1582b1926099812fecd7ef735ea15abf33cccaf2356e435d249f26f"}, "downloads": -1, "filename": "nose-progressive-0.5.tar.gz", "has_sig": false, "md5_digest": "9c4fa593c7d235052f511fdaa1f4d66e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10243, "upload_time": "2011-02-18T01:22:21", "upload_time_iso_8601": "2011-02-18T01:22:21.212864Z", "url": "https://files.pythonhosted.org/packages/9e/87/a7f952221b6fb299411ec5bca2d79999253ed4f12172d8db739531e00aa5/nose-progressive-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "39ff27e64c8394029b08ea1dbe1fd294", "sha256": "933bc552109d01eba898779d08dad2a0076b20fee5a6da4c1437ee334aea9fd3"}, "downloads": -1, "filename": "nose-progressive-0.5.1.tar.gz", "has_sig": false, "md5_digest": "39ff27e64c8394029b08ea1dbe1fd294", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11362, "upload_time": "2011-02-18T01:58:08", "upload_time_iso_8601": "2011-02-18T01:58:08.624350Z", "url": "https://files.pythonhosted.org/packages/d8/1a/7874ca44d0552259646e8f73a712c37a0c79a5135d33a389e3d653fd7d50/nose-progressive-0.5.1.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "1e4f7eb17babdb89291a35c4b21663aa", "sha256": "0be62b9563e93d744c0d135b94023e8f6af1c4e2d25df9a2216e240468a93bf5"}, "downloads": -1, "filename": "nose-progressive-0.6.tar.gz", "has_sig": false, "md5_digest": "1e4f7eb17babdb89291a35c4b21663aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19918, "upload_time": "2011-03-01T19:28:43", "upload_time_iso_8601": "2011-03-01T19:28:43.279573Z", "url": "https://files.pythonhosted.org/packages/a6/2b/d1d68f50d443e785ed511207c8ef29ac14a053ccb22c6e6f83a2e50031d9/nose-progressive-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "a793b363cb47ccbffb0c3b088c091c90", "sha256": "f14c62c5c8b26d7cc1b51f118e1fd21665b17a64bcb6fcb24eedece3477c917d"}, "downloads": -1, "filename": "nose-progressive-0.6.1.tar.gz", "has_sig": false, "md5_digest": "a793b363cb47ccbffb0c3b088c091c90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20051, "upload_time": "2011-03-04T09:56:00", "upload_time_iso_8601": "2011-03-04T09:56:00.026581Z", "url": "https://files.pythonhosted.org/packages/be/10/3f8f24fec853f950bd410af0c03544734a61b427abb7d47852cb0dd1d537/nose-progressive-0.6.1.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "1dad4a7ef18982c5739fd00744be4fe3", "sha256": "ca94a256b06a5567ebd8f0f557680d07913b2f43ca8716f69718a3f61da4dd69"}, "downloads": -1, "filename": "nose-progressive-0.7.tar.gz", "has_sig": false, "md5_digest": "1dad4a7ef18982c5739fd00744be4fe3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20671, "upload_time": "2011-03-10T00:06:49", "upload_time_iso_8601": "2011-03-10T00:06:49.577147Z", "url": "https://files.pythonhosted.org/packages/be/5e/0aaa53c68b223748b091104d7b2bf601a2f01857623ff867e11c67f26963/nose-progressive-0.7.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "2ed510d42681784acd38c85a1231c720", "sha256": "5542267a4aefa7c04086aefbefda7d68f51aff60576a2c049633ac1a09fdfa9b"}, "downloads": -1, "filename": "nose-progressive-1.0.tar.gz", "has_sig": false, "md5_digest": "2ed510d42681784acd38c85a1231c720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87546, "upload_time": "2011-11-02T01:37:30", "upload_time_iso_8601": "2011-11-02T01:37:30.014104Z", "url": "https://files.pythonhosted.org/packages/46/e5/8324b0cf8dc7e669e9ea960cdb4cade4b3be1670ac17f375c8df4b003985/nose-progressive-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "28efc919d828c7e1abd330b287a0d02e", "sha256": "d41c84aa35a7786bb95750238ffd3822049835fa6e17c0b91b76f387addfd862"}, "downloads": -1, "filename": "nose-progressive-1.1.tar.gz", "has_sig": false, "md5_digest": "28efc919d828c7e1abd330b287a0d02e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87829, "upload_time": "2011-11-03T23:37:34", "upload_time_iso_8601": "2011-11-03T23:37:34.486733Z", "url": "https://files.pythonhosted.org/packages/b9/c9/60eff2dd9ea77ce41110bf90694f61a5b04d7ba95132d26f8597703b88fa/nose-progressive-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "15158053350c8be63d99f492454846f1", "sha256": "84b3344962aa7558ebfa72b126480860fc652526ac680d22cd1a58d4e497f654"}, "downloads": -1, "filename": "nose-progressive-1.1.1.tar.gz", "has_sig": false, "md5_digest": "15158053350c8be63d99f492454846f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88900, "upload_time": "2011-11-06T03:33:31", "upload_time_iso_8601": "2011-11-06T03:33:31.755428Z", "url": "https://files.pythonhosted.org/packages/7e/83/d6f30592d7917ab61b23a37bdc2f7d5b56aaa6809aed2f5a65370e708875/nose-progressive-1.1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "68f2786f7bcd05b3c9e17c62ab69103f", "sha256": "e3c038a933c825a662aaf8ffac83ea7e0cb28011d19ad943d2f21558ec20a6ab"}, "downloads": -1, "filename": "nose-progressive-1.2.tar.gz", "has_sig": false, "md5_digest": "68f2786f7bcd05b3c9e17c62ab69103f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26573, "upload_time": "2011-11-19T01:08:22", "upload_time_iso_8601": "2011-11-19T01:08:22.875960Z", "url": "https://files.pythonhosted.org/packages/e8/a9/f436470c37b1e220316337cff9b71107f3db53eb941406d6a1fac2565aa9/nose-progressive-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "f94914420e0a1f6f37950af3ccc782f2", "sha256": "2748a6bdb70026bea3234790d30e9c0e407bfbe7eaea09fbcad76835c7893c09"}, "downloads": -1, "filename": "nose-progressive-1.2.1.tar.gz", "has_sig": false, "md5_digest": "f94914420e0a1f6f37950af3ccc782f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26416, "upload_time": "2011-11-28T22:37:33", "upload_time_iso_8601": "2011-11-28T22:37:33.676889Z", "url": "https://files.pythonhosted.org/packages/20/df/0124bbda5436be96f2eb4e1218d74e5e83ef3ca42ccf96f051628061f7b8/nose-progressive-1.2.1.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "180be93929c5962044a35489f193259d", "sha256": "837ac8f9eb4be5b23a15c516bdd7047727a237832d741f8b61cd4a399f7cdba1"}, "downloads": -1, "filename": "nose-progressive-1.3.tar.gz", "has_sig": false, "md5_digest": "180be93929c5962044a35489f193259d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28337, "upload_time": "2011-12-13T20:26:15", "upload_time_iso_8601": "2011-12-13T20:26:15.018209Z", "url": "https://files.pythonhosted.org/packages/73/c1/fee0f82b8d2153ec735a883c7eb33958d238b89334207c32f9d17d54ea26/nose-progressive-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "e5869b8e7286efd9a36bcc73d1b16651", "sha256": "c11596d859f8446f9cb8c5d91e1a1495d827171f36918c2865089886edef5adb"}, "downloads": -1, "filename": "nose-progressive-1.4.tar.gz", "has_sig": false, "md5_digest": "e5869b8e7286efd9a36bcc73d1b16651", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29461, "upload_time": "2013-01-10T07:21:26", "upload_time_iso_8601": "2013-01-10T07:21:26.191566Z", "url": "https://files.pythonhosted.org/packages/0d/5e/e3bdf100b3b039c600cfc7d03c88598c529ac1aed720524a09b54c2e34c7/nose-progressive-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "9722c18f24ddd8e93acbf6b763b676a5", "sha256": "5333c5014740835487771f44a0791d58d70c8ca7c57090181ffb2c322450a006"}, "downloads": -1, "filename": "nose-progressive-1.4.1.tar.gz", "has_sig": false, "md5_digest": "9722c18f24ddd8e93acbf6b763b676a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29537, "upload_time": "2013-03-25T21:29:25", "upload_time_iso_8601": "2013-03-25T21:29:25.725932Z", "url": "https://files.pythonhosted.org/packages/04/a1/6981491e6acb0fffcd96fd8b7edfee258736ceaa792d4e78ec9be76f3e17/nose-progressive-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "3a7518935269be90a5cd74c0788a3002", "sha256": "09cbe52a738b070ab02ed5b7a2932c5956c31f9c7b6dade157b2c487a0ac0882"}, "downloads": -1, "filename": "nose-progressive-1.4.2.tar.gz", "has_sig": false, "md5_digest": "3a7518935269be90a5cd74c0788a3002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29960, "upload_time": "2013-04-22T20:52:11", "upload_time_iso_8601": "2013-04-22T20:52:11.840856Z", "url": "https://files.pythonhosted.org/packages/73/fb/62fc71b99ec94a2727fda8996ba7a50eea7d41715484dfefb19fbab10322/nose-progressive-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "decab70a141ecbd37a4907bcf2cb8d64", "sha256": "52e4759a251a5715eaac0604d6b4700e1057677100911389dacda628767fb8cc"}, "downloads": -1, "filename": "nose-progressive-1.4.3.tar.gz", "has_sig": false, "md5_digest": "decab70a141ecbd37a4907bcf2cb8d64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30426, "upload_time": "2013-04-23T23:42:21", "upload_time_iso_8601": "2013-04-23T23:42:21.038589Z", "url": "https://files.pythonhosted.org/packages/31/7f/23556287fb2e1d2feaa4f18daece0e5c2f8bf95bff619c748d1e5de60d60/nose-progressive-1.4.3.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "eb3d837d7557e2228e4762b85f2d586e", "sha256": "222daa926b94ebd919b8bd5f10fc7eeab8cda356d7e3009c5ec1cfa8215d3f26"}, "downloads": -1, "filename": "nose-progressive-1.5.tar.gz", "has_sig": false, "md5_digest": "eb3d837d7557e2228e4762b85f2d586e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33244, "upload_time": "2013-04-24T22:48:03", "upload_time_iso_8601": "2013-04-24T22:48:03.480639Z", "url": "https://files.pythonhosted.org/packages/f5/83/93f5e4e589d2de1e68e24ee081fa3d2dad5682492a9427137511f6e34d77/nose-progressive-1.5.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "5ee610b2fed523aba0b3ebe9e1dcad22", "sha256": "aac01f33c8446407b3c5e6f2185d5b09f5f3e6cb773f1db2df99efce5a70b81b"}, "downloads": -1, "filename": "nose_progressive-1.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "5ee610b2fed523aba0b3ebe9e1dcad22", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 37823, "upload_time": "2014-04-27T23:43:17", "upload_time_iso_8601": "2014-04-27T23:43:17.372178Z", "url": "https://files.pythonhosted.org/packages/4d/88/870dd0b4fda48e96a31b489393c406af3870ca6829b9573637849e03f13e/nose_progressive-1.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e2780f4d0e2eff5b63715b5bd799274", "sha256": "44bd41344c1cc1de434a72764ed47fdbbbdbcf03c7801114c0433cd6c696cb55"}, "downloads": -1, "filename": "nose-progressive-1.5.1.tar.gz", "has_sig": false, "md5_digest": "1e2780f4d0e2eff5b63715b5bd799274", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33417, "upload_time": "2014-04-27T23:43:14", "upload_time_iso_8601": "2014-04-27T23:43:14.550313Z", "url": "https://files.pythonhosted.org/packages/4d/0c/c8b64017f43cddcae7e2ed5f3d7dc8b924311094882d9d9daa7339b0ff67/nose-progressive-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "68db5ceee608a121f405c07af8759d99", "sha256": "3710b2da2c05ca6b0da90eb01d384165b80822b63cce8a508daac7414321366d"}, "downloads": -1, "filename": "nose_progressive-1.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "68db5ceee608a121f405c07af8759d99", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 38886, "upload_time": "2018-11-27T01:47:34", "upload_time_iso_8601": "2018-11-27T01:47:34.989677Z", "url": "https://files.pythonhosted.org/packages/78/6d/cedf53ece6d9c402a4dffd2802df6245a1731f88e4b47f2869dd6bd7dd67/nose_progressive-1.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59ae4e09827b753b6217851badb1fa8f", "sha256": "3a6e2833e613c1c239baf05a19f66b5920915e62c07251d3ab3f3acb017ef5d7"}, "downloads": -1, "filename": "nose-progressive-1.5.2.tar.gz", "has_sig": false, "md5_digest": "59ae4e09827b753b6217851badb1fa8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32828, "upload_time": "2018-11-27T01:47:36", "upload_time_iso_8601": "2018-11-27T01:47:36.813572Z", "url": "https://files.pythonhosted.org/packages/dc/bc/0f55ba957109922c31ef22444c899004b1221eacff030300de74ad0e04fb/nose-progressive-1.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68db5ceee608a121f405c07af8759d99", "sha256": "3710b2da2c05ca6b0da90eb01d384165b80822b63cce8a508daac7414321366d"}, "downloads": -1, "filename": "nose_progressive-1.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "68db5ceee608a121f405c07af8759d99", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 38886, "upload_time": "2018-11-27T01:47:34", "upload_time_iso_8601": "2018-11-27T01:47:34.989677Z", "url": "https://files.pythonhosted.org/packages/78/6d/cedf53ece6d9c402a4dffd2802df6245a1731f88e4b47f2869dd6bd7dd67/nose_progressive-1.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59ae4e09827b753b6217851badb1fa8f", "sha256": "3a6e2833e613c1c239baf05a19f66b5920915e62c07251d3ab3f3acb017ef5d7"}, "downloads": -1, "filename": "nose-progressive-1.5.2.tar.gz", "has_sig": false, "md5_digest": "59ae4e09827b753b6217851badb1fa8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32828, "upload_time": "2018-11-27T01:47:36", "upload_time_iso_8601": "2018-11-27T01:47:36.813572Z", "url": "https://files.pythonhosted.org/packages/dc/bc/0f55ba957109922c31ef22444c899004b1221eacff030300de74ad0e04fb/nose-progressive-1.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:45 2020"}