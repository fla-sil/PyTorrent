{"info": {"author": "Davide Zanotti", "author_email": "davidezanotti@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": ".. image:: https://travis-ci.org/daveoncode/pyvaru.svg?branch=master\n    :target: https://travis-ci.org/daveoncode/pyvaru\n\n.. image:: https://codecov.io/gh/daveoncode/pyvaru/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/daveoncode/pyvaru\n\n\nWhat is pyvaru?\n---------------\n\nPyvaru is a simple, flexible and unobtrusive data validation library for Python 3 (3.4+),\nbased on the concept of validation rules.\n\nFrom the software design point of view, a rule is a class implementing the strategy pattern, \nby encapsulating the validation logic in an interface method called ``apply()``.\n\nThe library already offers a series of common validation rules like:\n \n- ``TypeRule`` (it checks that the target value is an instance of the expected type)\n- ``FullStringRule`` (it checks the the target value is a string with content)\n- ``ChoiceRule`` (it checks that the target value is contained in a list of available options)\n- ``MinValueRule`` (it checks that the target value is >= x) *\n- ``MaxValueRule`` (it checks that the target value is <= x) *\n- ``MinLengthRule`` (it checks that the target value length is >= x) *\n- ``MaxLengthRule`` (it checks that the target value length is <= x) *\n- ``RangeRule`` (it checks that the target value is contained in a given ``range``)\n- ``IntervalRule`` (it checks that the target value is contained in a given interval)\n- ``PatternRule`` (it checks that the target value matches a given regular expression)\n- ``PastDateRule`` (it checks that the target value is a date in the past)\n- ``FutureDateRule`` (it checks that the target value is a date in the future)\n- ``UniqueItemsRule`` (it checks that the target iterable does not contain duplicated items)\n \n\n\\* where \"x\" is a provided reference value\n\nThe developer is then free to create his custom rules by extending the abstract ``ValidationRule``\nand implementing the logic in the ``apply()`` method. For example:\n\n.. code-block:: python\n\n    class ContainsHelloRule(ValidationRule):\n        def apply(self) -> bool:\n            return 'hello' in self.apply_to\n\nThese rules are then executed by a ``Validator``, which basically executes them in the provided\norder and eventually returns a ``ValidationResult`` containing the validation response.\n\n\nInstallation\n------------\n\n``pip install pyvaru``\n\n\nUsage\n-----\n    \nGiven an existing model to validate, like the one below\n(but it could be a simple dictionary or any data structure since `pyvaru`\ndoes not make any assumption on the data format):\n\n.. code-block:: python\n\n    class User:\n        def __init__(self, first_name: str, last_name: str, date_of_birth: datetime, sex: str):\n            self.first_name = first_name\n            self.last_name = last_name\n            self.date_of_birth = date_of_birth\n            self.sex = sex\n\n        \nWe have to define a validator, by implementing the ``get_rules()`` method and for each field we want to\nvalidate we have to provide one or more proper rule(s).\n\n.. code-block:: python\n\n    from pyvaru import Validator\n    from pyvaru.rules import TypeRule, FullStringRule, ChoiceRule, PastDateRule\n\n    class UserValidator(Validator):\n        def get_rules(self) -> list:\n            user = self.data # type: User\n            return [\n                TypeRule(apply_to=user,\n                         label='User',\n                         valid_type=User,\n                         error_message='User must be an instance of user model.',\n                         stop_if_invalid=True),\n                FullStringRule(lambda: user.first_name, 'First name'),\n                FullStringRule(lambda: user.last_name, 'Last name'),\n                ChoiceRule(lambda: user.sex, 'Sex', choices=('M', 'F')),\n                PastDateRule(lambda: user.date_of_birth, 'Date of birth')\n            ]\n\n\nIt's also possible to create groups of rules by using ``RuleGroup`` and avoid code duplication if multiple rules should\nbe applied to the same field. So this code:\n\n.. code-block:: python\n\n    def get_rules(self) -> list:\n        return [\n            TypeRule(lambda: self.data.countries, 'Countries', valid_type=list),\n            MinLengthRule(lambda: self.data.countries, 'Countries', min_length=1),\n            UniqueItemsRule(lambda: self.data.countries, 'Countries')\n        ]\n\n\ncan be replaced by:\n\n.. code-block:: python\n\n    def get_rules(self) -> list:\n        return [\n            RuleGroup(lambda: self.data.countries,\n                      'Countries',\n                      rules=[(TypeRule, {'valid_type': list}),\n                             (MinLengthRule, {'min_length': 1}),\n                             UniqueItemsRule])\n        ]\n\n\nFinally we have two choices regarding how to use our custom validator:\n    \n1. As a context processor:\n\n.. code-block:: python\n\n    with UserValidator(user):\n        # do whatever you want with your valid model\n\nIn this case the code inside ``with`` will be executed only if the validation succeed, otherwise a\n``ValidationException`` (containing a ``validation_result`` property with the appropriate report) is raised.\n        \n2. By invoking the ``validate()`` method (which returns a ``ValidationResult``)\n\n.. code-block:: python\n\n    validation = UserValidator(user).validate()\n    if validation.is_successful():\n        # do whatever you want with your valid model\n    else:\n        # you can take a proper action and access validation.errors\n        # in order to provide a useful message to the application user,\n        # write logs or whatever\n\n\nAssuming we have a instance of an User configured as the one below:\n\n.. code-block:: python\n\n    user = User(first_name=' ',\n                last_name=None,\n                date_of_birth=datetime(2020, 1, 1),\n                sex='unknown')\n\n\nBy running a validation with the previous defined rules we will obtain a ``ValidationResult`` with the following errors:\n\n.. code-block:: python\n\n    {\n        'First name': ['String is empty.'],\n        'Last name': ['Not a string.'],\n        'Sex': ['Value not found in available choices.'],\n        'Date of birth': ['Not a past date.']\n    }\n\n\nFull API Documentation\n----------------------\n\nGo to: http://pyvaru.readthedocs.io/en/latest/contents.html\n\n\nCredits\n-------\n\nPyvaru is developed and maintained by Davide Zanotti.\n\nBlog: http://www.daveoncode.com\n\nTwitter: https://twitter.com/daveoncode\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daveoncode/pyvaru", "keywords": "validation rule model data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyvaru", "package_url": "https://pypi.org/project/pyvaru/", "platform": "", "project_url": "https://pypi.org/project/pyvaru/", "project_urls": {"Homepage": "https://github.com/daveoncode/pyvaru"}, "release_url": "https://pypi.org/project/pyvaru/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Rule based data validation library for python.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/daveoncode/pyvaru\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/daveoncode/pyvaru.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d01cb271a41a04d2a20c6847e4c03c0b8e43827/68747470733a2f2f7472617669732d63692e6f72672f646176656f6e636f64652f7079766172752e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/daveoncode/pyvaru\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/daveoncode/pyvaru/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b321341f1f3f9901bf517a3c45b461dbfe851ff/68747470733a2f2f636f6465636f762e696f2f67682f646176656f6e636f64652f7079766172752f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<div id=\"what-is-pyvaru\">\n<h2>What is pyvaru?</h2>\n<p>Pyvaru is a simple, flexible and unobtrusive data validation library for Python 3 (3.4+),\nbased on the concept of validation rules.</p>\n<p>From the software design point of view, a rule is a class implementing the strategy pattern,\nby encapsulating the validation logic in an interface method called <tt>apply()</tt>.</p>\n<p>The library already offers a series of common validation rules like:</p>\n<ul>\n<li><tt>TypeRule</tt> (it checks that the target value is an instance of the expected type)</li>\n<li><tt>FullStringRule</tt> (it checks the the target value is a string with content)</li>\n<li><tt>ChoiceRule</tt> (it checks that the target value is contained in a list of available options)</li>\n<li><tt>MinValueRule</tt> (it checks that the target value is &gt;= x) *</li>\n<li><tt>MaxValueRule</tt> (it checks that the target value is &lt;= x) *</li>\n<li><tt>MinLengthRule</tt> (it checks that the target value length is &gt;= x) *</li>\n<li><tt>MaxLengthRule</tt> (it checks that the target value length is &lt;= x) *</li>\n<li><tt>RangeRule</tt> (it checks that the target value is contained in a given <tt>range</tt>)</li>\n<li><tt>IntervalRule</tt> (it checks that the target value is contained in a given interval)</li>\n<li><tt>PatternRule</tt> (it checks that the target value matches a given regular expression)</li>\n<li><tt>PastDateRule</tt> (it checks that the target value is a date in the past)</li>\n<li><tt>FutureDateRule</tt> (it checks that the target value is a date in the future)</li>\n<li><tt>UniqueItemsRule</tt> (it checks that the target iterable does not contain duplicated items)</li>\n</ul>\n<p>* where \u201cx\u201d is a provided reference value</p>\n<p>The developer is then free to create his custom rules by extending the abstract <tt>ValidationRule</tt>\nand implementing the logic in the <tt>apply()</tt> method. For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ContainsHelloRule</span><span class=\"p\">(</span><span class=\"n\">ValidationRule</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'hello'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_to</span>\n</pre>\n<p>These rules are then executed by a <tt>Validator</tt>, which basically executes them in the provided\norder and eventually returns a <tt>ValidationResult</tt> containing the validation response.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install pyvaru</tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Given an existing model to validate, like the one below\n(but it could be a simple dictionary or any data structure since <cite>pyvaru</cite>\ndoes not make any assumption on the data format):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">date_of_birth</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">last_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date_of_birth</span> <span class=\"o\">=</span> <span class=\"n\">date_of_birth</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sex</span> <span class=\"o\">=</span> <span class=\"n\">sex</span>\n</pre>\n<p>We have to define a validator, by implementing the <tt>get_rules()</tt> method and for each field we want to\nvalidate we have to provide one or more proper rule(s).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyvaru</span> <span class=\"kn\">import</span> <span class=\"n\">Validator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyvaru.rules</span> <span class=\"kn\">import</span> <span class=\"n\">TypeRule</span><span class=\"p\">,</span> <span class=\"n\">FullStringRule</span><span class=\"p\">,</span> <span class=\"n\">ChoiceRule</span><span class=\"p\">,</span> <span class=\"n\">PastDateRule</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">Validator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_rules</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"c1\"># type: User</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"n\">TypeRule</span><span class=\"p\">(</span><span class=\"n\">apply_to</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span>\n                     <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'User'</span><span class=\"p\">,</span>\n                     <span class=\"n\">valid_type</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">,</span>\n                     <span class=\"n\">error_message</span><span class=\"o\">=</span><span class=\"s1\">'User must be an instance of user model.'</span><span class=\"p\">,</span>\n                     <span class=\"n\">stop_if_invalid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">FullStringRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"s1\">'First name'</span><span class=\"p\">),</span>\n            <span class=\"n\">FullStringRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">,</span> <span class=\"s1\">'Last name'</span><span class=\"p\">),</span>\n            <span class=\"n\">ChoiceRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"s1\">'Sex'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">)),</span>\n            <span class=\"n\">PastDateRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">date_of_birth</span><span class=\"p\">,</span> <span class=\"s1\">'Date of birth'</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n</pre>\n<p>It\u2019s also possible to create groups of rules by using <tt>RuleGroup</tt> and avoid code duplication if multiple rules should\nbe applied to the same field. So this code:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_rules</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"n\">TypeRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">countries</span><span class=\"p\">,</span> <span class=\"s1\">'Countries'</span><span class=\"p\">,</span> <span class=\"n\">valid_type</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">),</span>\n        <span class=\"n\">MinLengthRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">countries</span><span class=\"p\">,</span> <span class=\"s1\">'Countries'</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"n\">UniqueItemsRule</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">countries</span><span class=\"p\">,</span> <span class=\"s1\">'Countries'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>can be replaced by:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_rules</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"n\">RuleGroup</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">countries</span><span class=\"p\">,</span>\n                  <span class=\"s1\">'Countries'</span><span class=\"p\">,</span>\n                  <span class=\"n\">rules</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"n\">TypeRule</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'valid_type'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">}),</span>\n                         <span class=\"p\">(</span><span class=\"n\">MinLengthRule</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'min_length'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}),</span>\n                         <span class=\"n\">UniqueItemsRule</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>Finally we have two choices regarding how to use our custom validator:</p>\n<ol>\n<li>As a context processor:</li>\n</ol>\n<pre><span class=\"k\">with</span> <span class=\"n\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do whatever you want with your valid model</span>\n</pre>\n<p>In this case the code inside <tt>with</tt> will be executed only if the validation succeed, otherwise a\n<tt>ValidationException</tt> (containing a <tt>validation_result</tt> property with the appropriate report) is raised.</p>\n<ol>\n<li>By invoking the <tt>validate()</tt> method (which returns a <tt>ValidationResult</tt>)</li>\n</ol>\n<pre><span class=\"n\">validation</span> <span class=\"o\">=</span> <span class=\"n\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">is_successful</span><span class=\"p\">():</span>\n    <span class=\"c1\"># do whatever you want with your valid model</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># you can take a proper action and access validation.errors</span>\n    <span class=\"c1\"># in order to provide a useful message to the application user,</span>\n    <span class=\"c1\"># write logs or whatever</span>\n</pre>\n<p>Assuming we have a instance of an User configured as the one below:</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">,</span>\n            <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"s1\">'unknown'</span><span class=\"p\">)</span>\n</pre>\n<p>By running a validation with the previous defined rules we will obtain a <tt>ValidationResult</tt> with the following errors:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'First name'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'String is empty.'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'Last name'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Not a string.'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'Sex'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Value not found in available choices.'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'Date of birth'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Not a past date.'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"full-api-documentation\">\n<h2>Full API Documentation</h2>\n<p>Go to: <a href=\"http://pyvaru.readthedocs.io/en/latest/contents.html\" rel=\"nofollow\">http://pyvaru.readthedocs.io/en/latest/contents.html</a></p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Pyvaru is developed and maintained by Davide Zanotti.</p>\n<p>Blog: <a href=\"http://www.daveoncode.com\" rel=\"nofollow\">http://www.daveoncode.com</a></p>\n<p>Twitter: <a href=\"https://twitter.com/daveoncode\" rel=\"nofollow\">https://twitter.com/daveoncode</a></p>\n</div>\n\n          </div>"}, "last_serial": 2751282, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a634f2f3795a5498a6d20fd4eeaf9df6", "sha256": "16d7a374dae653a0580f7223ace8fddee12679ec55838c5697ccaa30d831adc6"}, "downloads": -1, "filename": "pyvaru-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a634f2f3795a5498a6d20fd4eeaf9df6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7651, "upload_time": "2017-02-06T20:42:54", "upload_time_iso_8601": "2017-02-06T20:42:54.903753Z", "url": "https://files.pythonhosted.org/packages/cb/26/c74cccc798eacbb9a333e5fa7c45f483e50f94e97b269740de72c8668b34/pyvaru-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "302a9c16ec4fcd69c3f0749f19b2644e", "sha256": "16c98c9ab2f96e1033ac7b0b9792dc92df4928e35f00ed7d592c2ffcf87e42eb"}, "downloads": -1, "filename": "pyvaru-0.1.1.tar.gz", "has_sig": false, "md5_digest": "302a9c16ec4fcd69c3f0749f19b2644e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7911, "upload_time": "2017-02-07T13:31:16", "upload_time_iso_8601": "2017-02-07T13:31:16.526669Z", "url": "https://files.pythonhosted.org/packages/43/0e/1d001735fac1e9685edb06b607efa9f9c892904f2be2576308975a9ba239/pyvaru-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b07daa291bdd8c6a1633ba83a828da8c", "sha256": "b1be439f1f6255529e24d4d69df6f70ae8cc2957e76e42df9b8f40e1022b69a9"}, "downloads": -1, "filename": "pyvaru-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b07daa291bdd8c6a1633ba83a828da8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8242, "upload_time": "2017-02-16T11:17:36", "upload_time_iso_8601": "2017-02-16T11:17:36.403367Z", "url": "https://files.pythonhosted.org/packages/ef/10/40e5cbfd56742604dd20d7ebfda2c4289331fefea0f8e80fef0ba471be6e/pyvaru-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bd2fc28c8701bb014bdcd4e9c47f127f", "sha256": "9c52464aafdb1437bca74134d206b701e8b9152f7b6de53a9d40d898b21a6637"}, "downloads": -1, "filename": "pyvaru-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bd2fc28c8701bb014bdcd4e9c47f127f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8012, "upload_time": "2017-04-04T07:15:11", "upload_time_iso_8601": "2017-04-04T07:15:11.768249Z", "url": "https://files.pythonhosted.org/packages/bc/73/08101145042d74f1e441a294345888012ef0ad3198901a192bc4f1418d58/pyvaru-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd2fc28c8701bb014bdcd4e9c47f127f", "sha256": "9c52464aafdb1437bca74134d206b701e8b9152f7b6de53a9d40d898b21a6637"}, "downloads": -1, "filename": "pyvaru-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bd2fc28c8701bb014bdcd4e9c47f127f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8012, "upload_time": "2017-04-04T07:15:11", "upload_time_iso_8601": "2017-04-04T07:15:11.768249Z", "url": "https://files.pythonhosted.org/packages/bc/73/08101145042d74f1e441a294345888012ef0ad3198901a192bc4f1418d58/pyvaru-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:13 2020"}