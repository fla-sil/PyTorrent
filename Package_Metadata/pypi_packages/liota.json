{"info": {"author": "Kohli Vaibhav (VMware)", "author_email": "vkohli@vmware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# LIOTA\nLittle IoT Agent (liota) is an open source project offering some convenience for IoT solution developers in creating IoT Edge System data orchestration applications. Liota has been generalized to allow, via modules, interaction with any data-center component, over any transport, and for any IoT Edge System. It is easy-to-use and provides enterprise-quality modules for interacting with IoT Solutions.\n\n## Design\nThe primary liota design goals are simplicity, ease of use, easy installation and easy modification. Secondary design goals are generality, modularity and enterprise-level quality.\n\n# The Basic Abstractions of Liota\nThe six basic abstractions of liota represent a complete data flow from a device attached to the edge system to an application in a data-center. These are 'Device' (some data source on or attached to the edge system), 'DeviceComms' (communication protocols used between devices and the edge system), 'EdgeSystem' (the edge system hardware and software platforms), 'Metric' (represents a time-series stream from a data source to a data-center application), 'DCCComms' (communication protocols between the edge system and a data-center), and 'DCC' (data-center component, i.e., an ingestion application in a data-center). We have abstract classes for all six of these constructs in a small object hierarchy and a number of concrete classes that comprise this release of liota and allow a liota package or set of packages to create complete data flows from a data source to a component in a data-center.\n\n## Entities\nEntities represent abstractions for the three main passive constructs: System, Devices and Metrics that can be, depending on the DCC, registered with the DCC. Such registration typically creates a concrete representation (let's call these 'Resources' simply to differentiate from the local representation we'll call objects) in the data-center component for the local object. Various pieces of meta-data can be associated with the Resource typically created during or after registration. Examples of such meta-data associated with the Resource, metrics, entries in a key/value store, relationships to other Resources, alerts and actions.\n\nEach DCC must implement a register() method and return a RegisteredEntity object. The registered entity object may include any specific data, e.g., uuid, that the DCC may need to refer to the Resource representing the entity object. An entity may be registered with multiple DCCs in the same liota package or set of packages.\n\n### EdgeSystems and Devices\nThe abstract subclasses of Entities, EdgeSystem and Device are for now mostly placeholders in the hierarchy. We expect, as concrete implementations are created over time we'll see some common data and logic that we can move up into the abstract classes.\n\n**Note:** We recommend creating EdgeSystem Objects before creating DCCComms or DeviceComms objects.\n\n### Metrics\nThe Metric subclass of Entity is the local object representing a stream of (number, timestamp) tuples. Metrics may be registered with one or more DCCs and the DCC returns a registered metric object. The metric object includes a sampling function which is a user defined method (udm), a sampling frequency stating the interval between subsequent executions of the udm and an aggregation count stating how many executions of the udm to aggregate before sending to the DCCs to which the metric has been registered. An important piece of meta-data liota supports are SI units and a prefix eliminating any confusion as to what the stream of numbers represent.\n\n## DeviceComms\nThe abstract class DeviceComms represent mechanisms through which devices send and receive data to/from edge systems. Some examples are CAN bus, Modbus, ProfiNet, Zibgee, GPIO pins, Industrial Serial Protocols as well as sockets, websockets, MQTT, CoAP. The DeviceComms abstract class is a placeholder for these various communication mechanisms.\n\n## DCCComms\nThe abstract class DCCComms represents communication protocols between edge systems and DCCs. Currently, liota supports MQTT, WebSocket and plain old BSD sockets. In near future it will support CoAP. MQTT, WebSocket and CoAP are 'Application' or layer-7 protocols. MQTT is a pub-sub system using TCP and CoAP implements reliable UDP datagrams and a data format specification. These protocols are capable of satisfying most of the use cases for transferring data from IoT gateways to data-center components. With the current implementation the gateway acts as MQTT, WebSocket or a traditional Socket client.\n\n## DCC (Data Center Component)\nThe abstract class DCC represents an application in a data-center. It is potentially the most important and complex abstraction of liota. It provides flexibility to developers for choosing the data-center components they need and using API's provided by liota. With help of this abstraction developers may build custom solutions. The abstract class states basic methods and encapsulates them into unified common API's required to send data to various DCC's. Graphite and Project Ice are currently the data-center components supported with AWS, BlueMix and ThingWorx to come soon. New DCC's can easily be integrated in the abstraction.\n\n## Transports\nLiota supports plain old BSD sockets, WebSocket and MQTT communication protocols.  Refer [MQTT](https://github.com/vmware/liota/blob/master/examples/mqtt/README.md) to know more on different MQTT configuration options available.\n\n## Identity and TLS Configurations\n* Identity class encapsulates certificates or credentials related to a connection used at both DCC and Device side.\n* TLSConf class encapsulates parameters related to TLS configuration.\n* CRLs(Certificate Revocation Lists) check has been implemented: [VRIFY_CRL_CHECK_CHAIN](https://docs.python.org/2/library/ssl.html#ssl.VERIFY_CRL_CHECK_CHAIN) in this mode CRLs of all certificates in the peer cert chain are checked.\nIn order to enable the CRLs set the 'crl_path' in '/etc/liota/liota.conf', it requires a valid path to CRL; if in case intermediate CA is used the CRL should include both Intermediate CRL and Root CRL in PEM format (preferable directory '/usr/lib/liota'). If the check is required to be disabled 'crl_path' should be left blank.\n* Password based CA certificates are not supported.\n\n## Package Manager\nLiota applications can be broken into small pieces that can be loaded and unloaded into a running liota process. We recommend putting the EdgeSystems, Devices, Metrics and DCC(s) in separate packages. Then each construct can be loaded and unloaded at will. See the README in the package directory for complete details.\n\n## Device Discovery\nUnder Development: Liota SDK provides users a way to discover new devices at run-time through a dedicated discovery thread. The discovery thread could listen on a list of end points by spinning up a listening thread for each of them. Currently, Liota supports 4 kinds of end points: MQTT, COAP, Socket, and Named Pipe. However, because of security consideration on edge system, currently only MQTT and Named Pipe are allowed, especially Named Pipe is only accessible to its owner user.\n\nAssume there is a list of DeviceType-to-DCC Mappings, such as {TypeA:[DCC1-Package-Name, DCC2-Package-Name], TypeB:[DCC3-Package-Name]}. Listening thread waits for a json message from devices, registers new devices with each DCC in the mapping list, sets any properties, fills out device file for AW agent. AW agent enrolls discovered device and pushes content to bring the device to compliance.\n\nThe json message from devices starts with Device Type and comprises a dictionary, that is,\n{ 'DeviceType':{key1:value1,key2:value2, ..., keyn:valuen}} e.g., {LM35:{k1:v1,...,SN:12345,kn:vn}}. Assume there is specified unique key for each 'Type' of devices, e.g.,\n[{'Type':'LM35', 'UniqueKey':'SN'}]. We will concatenate the type and unique id to LM35_12345 and use this as the name to register the device.\n\nSee the README in the dev_disc directory under package directory for complete usage details.\n\n## SI Units\nLiota supports SI units and the conversion of the units with help of Pint library which is included in liota package to provide developers the capability to use SI units in their code. We have also included the example [simulated_graphite_temp.py](https://github.com/vmware/liota/blob/master/examples/simulated_graphite_temp.py) which uses the library to convert temperature value from Celsius to Fahrenheit and Kelvin. More details on the usage of the Pint library and conversion of units can be found at this [link](https://pint.readthedocs.io/en/0.7.2/index.html).\n\n## Liota - Future Enhancements\nToward the goal of ubiquity for liota we plan to include the following enhancements:\n* Full support for IEEE 1451, Electronic Transducer Data Sheets\n* Support for CoAP as transports\n* A mechanism for IoT Edge Systems to create planet-wide unique identifiers (possibly based on the blockchain mechanism)\n* Support for actions framework for edge-system defined actions initiated either locally or by data-center components\n* Support for popular IoT ingestion engines\n* Language bindings apart from Python, starting with C, C++, Java and Lua\n\n# Installation and Testing\n\nLiota requires a Python 2.7.9+ environment already installed.\n\nIn general, liota can be installed:\n```bash\n  $ pip install liota\n```\n\nPost liota-installation either you can manually copy the config files from \"/usr/lib/liota/config/\" to \"/etc/liota\" and create \"/var/log/liota\" directory.\nOr you can use the helper script \"post-install-setup.sh\" to copy the config files which exist at the path \"/usr/lib/liota\". The script on execution by default checks if the \"liota\" non-root user exist if it doesn't then non-root \"liota\" user is required to be created manually.\nIf you require Liota to be installed as the different non-root user which pre-exists on the system then the script will be required to be executed in the following way:\n\n```bash\n  $ cd /usr/lib/liota\n  $ LIOTA_USER=\"non-root user\" ./post-install-setup.sh\n```\n\nIt Liota is required to be installed as root user (not the preferred way) then the script should be executed in the following way:\n\n```bash\n  $ cd /usr/lib/liota\n  $ LIOTA_USER=\"root\" ./post-install-setup.sh\n```\n\n## Autostarting Liota Daemon\nFor starting liotad.py in background automatically at reboot perform the following steps:\n\n* Copy autostartliota script present in scripts folder to location:\n```bash\n  /etc/init.d/\n```\n\nTo enable/disable the autostart service perform the following steps:\n\n### On Debian/Ubuntu:\n\n* Execute :\n```bash\n  $ sudo update-rc.d autostartliota defaults\n  $ sudo invoke-rc.d autostartliota start\n```\n\n* To stop the script and remove it from different runlevels, execute:\n```bash\n  $ sudo update-rc.d -f autostartliota remove\n```\n\n### On RHEL/CentOS:\n\n* To add the script to different runlevels (rc[0-6].d folders), execute:\n```bash\n  $ chkconfig --add autostartliota\n```\n\n* To start it, execute the following command and reboot the system:\n```bash\n  $ chkconfig autostartliota on\n```\n\n* To stop the script, execute:\n```bash\n  $ chkconfig autostartliota off\n```\n\n* To remove the script from different runlevels (rc[0-6].d folders), execute:\n```bash\n  $ chkconfig --del autostartliota\n```\n\n## Liota.conf\nliota.conf provides path to find out various configuration & log files. When initializing, liota does a multi-step search for the configuration file:\n* Looks in the current working directory '.'\n* User's home directory '~'\n* A LIOTA_CONF environment variable\n* Finally the default configuration file location for every installation: /etc/liota/. (note this will need to be copied from the system doc directory, typically /usr/lib/liota/config)\n\nHere is the snapshot of liota.conf file:\n\n```bash\n[LOG_CFG]\njson_path = /etc/liota/logging.json\n\n[LOG_PATH]\nlog_path = /var/log/liota\n\n[IOTCC_PATH]\ndev_file_path = /usr/lib/liota/devs\nentity_file_path = /usr/lib/liota/entity\niotcc_path = /usr/lib/liota/iotcc.json\n```\nFeel free to modify [liota.conf](https://github.com/vmware/liota/blob/master/config/liota.conf) and [logging.json](https://github.com/vmware/liota/blob/master/config/logging.json) as appropriate for your testing.\n\n\n## Examples\nPost-installation the sample codes for publishing the data to DCC can be found at following location:\n```bash\n  /usr/lib/liota/examples\n  /usr/lib/liota/packages\n```\n\nPlease look through the example code noting especially the files sampleProp.conf and dk300_edge_system_iotcc.py\n\nThen as an initial test you could bring up an instance of Graphite using the docker instructions found at this [link](https://github.com/hopsoft/docker-graphite-statsd).\n\nset the appropriate values in sampleProp.conf,\n```bash\nGraphiteMetric = <a dot separated string> \"Mymetric.foo.bar.random\"\nGraphiteIP = <The IP address of the graphite instance you just brought up>\nGraphitePort = <typically 2003> # You can test easily by sending directly to carbon\n```\n\nand execute\n```bash\n  $ sudo nohup python simulated_graphite_event_based.py &\n```\n\nIf you would like to test against an instance of Project Ice please send an email to us at:\n\n```web\nliota@vmware.com\n```\nand we'll work with you to get one set up and help with the necessary values in the properties file.\n\n## Log Location\n\nThe default location for log files generated during Liota operation can be found at:\n\n```bash\n  /var/log/liota\n```\nIf the above directory is not available or is not writeable then modify the log location in the file logging.json (find it as described above in the section on liota.conf)\n\n## Uninstall Liota\n\nLiota can be uninstalled easily as per the steps below:\n```bash\n   $ pip uninstall liota\n   $ rm -rf /usr/lib/liota/ /etc/liota/ /var/log/liota/\n```\n\n## Contributing to Liota\n\nWant to hack on Liota and add your own DCC component? Awesome!\nJust fork the project in order to start contributing the code.\n\n## Licensing\nLiota is licensed under the BSD 2-Clause License.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vmware/liota", "keywords": "iot liota agent", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "liota", "package_url": "https://pypi.org/project/liota/", "platform": "Linux", "project_url": "https://pypi.org/project/liota/", "project_urls": {"Homepage": "https://github.com/vmware/liota"}, "release_url": "https://pypi.org/project/liota/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Little IoT Agent (liota)", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # LIOTA<br>Little IoT Agent (liota) is an open source project offering some convenience for IoT solution developers in creating IoT Edge System data orchestration applications. Liota has been generalized to allow, via modules, interaction with any data-center component, over any transport, and for any IoT Edge System. It is easy-to-use and provides enterprise-quality modules for interacting with IoT Solutions.<br><br>## Design<br>The primary liota design goals are simplicity, ease of use, easy installation and easy modification. Secondary design goals are generality, modularity and enterprise-level quality.<br><br># The Basic Abstractions of Liota<br>The six basic abstractions of liota represent a complete data flow from a device attached to the edge system to an application in a data-center. These are 'Device' (some data source on or attached to the edge system), 'DeviceComms' (communication protocols used between devices and the edge system), 'EdgeSystem' (the edge system hardware and software platforms), 'Metric' (represents a time-series stream from a data source to a data-center application), 'DCCComms' (communication protocols between the edge system and a data-center), and 'DCC' (data-center component, i.e., an ingestion application in a data-center). We have abstract classes for all six of these constructs in a small object hierarchy and a number of concrete classes that comprise this release of liota and allow a liota package or set of packages to create complete data flows from a data source to a component in a data-center.<br><br>## Entities<br>Entities represent abstractions for the three main passive constructs: System, Devices and Metrics that can be, depending on the DCC, registered with the DCC. Such registration typically creates a concrete representation (let's call these 'Resources' simply to differentiate from the local representation we'll call objects) in the data-center component for the local object. Various pieces of meta-data can be associated with the Resource typically created during or after registration. Examples of such meta-data associated with the Resource, metrics, entries in a key/value store, relationships to other Resources, alerts and actions.<br><br>Each DCC must implement a register() method and return a RegisteredEntity object. The registered entity object may include any specific data, e.g., uuid, that the DCC may need to refer to the Resource representing the entity object. An entity may be registered with multiple DCCs in the same liota package or set of packages.<br><br>### EdgeSystems and Devices<br>The abstract subclasses of Entities, EdgeSystem and Device are for now mostly placeholders in the hierarchy. We expect, as concrete implementations are created over time we'll see some common data and logic that we can move up into the abstract classes.<br><br>**Note:** We recommend creating EdgeSystem Objects before creating DCCComms or DeviceComms objects.<br><br>### Metrics<br>The Metric subclass of Entity is the local object representing a stream of (number, timestamp) tuples. Metrics may be registered with one or more DCCs and the DCC returns a registered metric object. The metric object includes a sampling function which is a user defined method (udm), a sampling frequency stating the interval between subsequent executions of the udm and an aggregation count stating how many executions of the udm to aggregate before sending to the DCCs to which the metric has been registered. An important piece of meta-data liota supports are SI units and a prefix eliminating any confusion as to what the stream of numbers represent.<br><br>## DeviceComms<br>The abstract class DeviceComms represent mechanisms through which devices send and receive data to/from edge systems. Some examples are CAN bus, Modbus, ProfiNet, Zibgee, GPIO pins, Industrial Serial Protocols as well as sockets, websockets, MQTT, CoAP. The DeviceComms abstract class is a placeholder for these various communication mechanisms.<br><br>## DCCComms<br>The abstract class DCCComms represents communication protocols between edge systems and DCCs. Currently, liota supports MQTT, WebSocket and plain old BSD sockets. In near future it will support CoAP. MQTT, WebSocket and CoAP are 'Application' or layer-7 protocols. MQTT is a pub-sub system using TCP and CoAP implements reliable UDP datagrams and a data format specification. These protocols are capable of satisfying most of the use cases for transferring data from IoT gateways to data-center components. With the current implementation the gateway acts as MQTT, WebSocket or a traditional Socket client.<br><br>## DCC (Data Center Component)<br>The abstract class DCC represents an application in a data-center. It is potentially the most important and complex abstraction of liota. It provides flexibility to developers for choosing the data-center components they need and using API's provided by liota. With help of this abstraction developers may build custom solutions. The abstract class states basic methods and encapsulates them into unified common API's required to send data to various DCC's. Graphite and Project Ice are currently the data-center components supported with AWS, BlueMix and ThingWorx to come soon. New DCC's can easily be integrated in the abstraction.<br><br>## Transports<br>Liota supports plain old BSD sockets, WebSocket and MQTT communication protocols.  Refer [MQTT](https://github.com/vmware/liota/blob/master/examples/mqtt/README.md) to know more on different MQTT configuration options available.<br><br>## Identity and TLS Configurations<br>* Identity class encapsulates certificates or credentials related to a connection used at both DCC and Device side.<br>* TLSConf class encapsulates parameters related to TLS configuration.<br>* CRLs(Certificate Revocation Lists) check has been implemented: [VRIFY_CRL_CHECK_CHAIN](https://docs.python.org/2/library/ssl.html#ssl.VERIFY_CRL_CHECK_CHAIN) in this mode CRLs of all certificates in the peer cert chain are checked.<br>In order to enable the CRLs set the 'crl_path' in '/etc/liota/liota.conf', it requires a valid path to CRL; if in case intermediate CA is used the CRL should include both Intermediate CRL and Root CRL in PEM format (preferable directory '/usr/lib/liota'). If the check is required to be disabled 'crl_path' should be left blank.<br>* Password based CA certificates are not supported.<br><br>## Package Manager<br>Liota applications can be broken into small pieces that can be loaded and unloaded into a running liota process. We recommend putting the EdgeSystems, Devices, Metrics and DCC(s) in separate packages. Then each construct can be loaded and unloaded at will. See the README in the package directory for complete details.<br><br>## Device Discovery<br>Under Development: Liota SDK provides users a way to discover new devices at run-time through a dedicated discovery thread. The discovery thread could listen on a list of end points by spinning up a listening thread for each of them. Currently, Liota supports 4 kinds of end points: MQTT, COAP, Socket, and Named Pipe. However, because of security consideration on edge system, currently only MQTT and Named Pipe are allowed, especially Named Pipe is only accessible to its owner user.<br><br>Assume there is a list of DeviceType-to-DCC Mappings, such as {TypeA:[DCC1-Package-Name, DCC2-Package-Name], TypeB:[DCC3-Package-Name]}. Listening thread waits for a json message from devices, registers new devices with each DCC in the mapping list, sets any properties, fills out device file for AW agent. AW agent enrolls discovered device and pushes content to bring the device to compliance.<br><br>The json message from devices starts with Device Type and comprises a dictionary, that is,<br>{ 'DeviceType':{key1:value1,key2:value2, ..., keyn:valuen}} e.g., {LM35:{k1:v1,...,SN:12345,kn:vn}}. Assume there is specified unique key for each 'Type' of devices, e.g.,<br>[{'Type':'LM35', 'UniqueKey':'SN'}]. We will concatenate the type and unique id to LM35_12345 and use this as the name to register the device.<br><br>See the README in the dev_disc directory under package directory for complete usage details.<br><br>## SI Units<br>Liota supports SI units and the conversion of the units with help of Pint library which is included in liota package to provide developers the capability to use SI units in their code. We have also included the example [simulated_graphite_temp.py](https://github.com/vmware/liota/blob/master/examples/simulated_graphite_temp.py) which uses the library to convert temperature value from Celsius to Fahrenheit and Kelvin. More details on the usage of the Pint library and conversion of units can be found at this [link](https://pint.readthedocs.io/en/0.7.2/index.html).<br><br>## Liota - Future Enhancements<br>Toward the goal of ubiquity for liota we plan to include the following enhancements:<br>* Full support for IEEE 1451, Electronic Transducer Data Sheets<br>* Support for CoAP as transports<br>* A mechanism for IoT Edge Systems to create planet-wide unique identifiers (possibly based on the blockchain mechanism)<br>* Support for actions framework for edge-system defined actions initiated either locally or by data-center components<br>* Support for popular IoT ingestion engines<br>* Language bindings apart from Python, starting with C, C++, Java and Lua<br><br># Installation and Testing<br><br>Liota requires a Python 2.7.9+ environment already installed.<br><br>In general, liota can be installed:<br>```bash<br>  $ pip install liota<br>```<br><br>Post liota-installation either you can manually copy the config files from \"/usr/lib/liota/config/\" to \"/etc/liota\" and create \"/var/log/liota\" directory.<br>Or you can use the helper script \"post-install-setup.sh\" to copy the config files which exist at the path \"/usr/lib/liota\". The script on execution by default checks if the \"liota\" non-root user exist if it doesn't then non-root \"liota\" user is required to be created manually.<br>If you require Liota to be installed as the different non-root user which pre-exists on the system then the script will be required to be executed in the following way:<br><br>```bash<br>  $ cd /usr/lib/liota<br>  $ LIOTA_USER=\"non-root user\" ./post-install-setup.sh<br>```<br><br>It Liota is required to be installed as root user (not the preferred way) then the script should be executed in the following way:<br><br>```bash<br>  $ cd /usr/lib/liota<br>  $ LIOTA_USER=\"root\" ./post-install-setup.sh<br>```<br><br>## Autostarting Liota Daemon<br>For starting liotad.py in background automatically at reboot perform the following steps:<br><br>* Copy autostartliota script present in scripts folder to location:<br>```bash<br>  /etc/init.d/<br>```<br><br>To enable/disable the autostart service perform the following steps:<br><br>### On Debian/Ubuntu:<br><br>* Execute :<br>```bash<br>  $ sudo update-rc.d autostartliota defaults<br>  $ sudo invoke-rc.d autostartliota start<br>```<br><br>* To stop the script and remove it from different runlevels, execute:<br>```bash<br>  $ sudo update-rc.d -f autostartliota remove<br>```<br><br>### On RHEL/CentOS:<br><br>* To add the script to different runlevels (rc[0-6].d folders), execute:<br>```bash<br>  $ chkconfig --add autostartliota<br>```<br><br>* To start it, execute the following command and reboot the system:<br>```bash<br>  $ chkconfig autostartliota on<br>```<br><br>* To stop the script, execute:<br>```bash<br>  $ chkconfig autostartliota off<br>```<br><br>* To remove the script from different runlevels (rc[0-6].d folders), execute:<br>```bash<br>  $ chkconfig --del autostartliota<br>```<br><br>## Liota.conf<br>liota.conf provides path to find out various configuration &amp; log files. When initializing, liota does a multi-step search for the configuration file:<br>* Looks in the current working directory '.'<br>* User's home directory '~'<br>* A LIOTA_CONF environment variable<br>* Finally the default configuration file location for every installation: /etc/liota/. (note this will need to be copied from the system doc directory, typically /usr/lib/liota/config)<br><br>Here is the snapshot of liota.conf file:<br><br>```bash<br>[LOG_CFG]<br>json_path = /etc/liota/logging.json<br><br>[LOG_PATH]<br>log_path = /var/log/liota<br><br>[IOTCC_PATH]<br>dev_file_path = /usr/lib/liota/devs<br>entity_file_path = /usr/lib/liota/entity<br>iotcc_path = /usr/lib/liota/iotcc.json<br>```<br>Feel free to modify [liota.conf](https://github.com/vmware/liota/blob/master/config/liota.conf) and [logging.json](https://github.com/vmware/liota/blob/master/config/logging.json) as appropriate for your testing.<br><br><br>## Examples<br>Post-installation the sample codes for publishing the data to DCC can be found at following location:<br>```bash<br>  /usr/lib/liota/examples<br>  /usr/lib/liota/packages<br>```<br><br>Please look through the example code noting especially the files sampleProp.conf and dk300_edge_system_iotcc.py<br><br>Then as an initial test you could bring up an instance of Graphite using the docker instructions found at this [link](https://github.com/hopsoft/docker-graphite-statsd).<br><br>set the appropriate values in sampleProp.conf,<br>```bash<br>GraphiteMetric = &lt;a dot separated string&gt; \"Mymetric.foo.bar.random\"<br>GraphiteIP = &lt;The IP address of the graphite instance you just brought up&gt;<br>GraphitePort = &lt;typically 2003&gt; # You can test easily by sending directly to carbon<br>```<br><br>and execute<br>```bash<br>  $ sudo nohup python simulated_graphite_event_based.py &amp;<br>```<br><br>If you would like to test against an instance of Project Ice please send an email to us at:<br><br>```web<br>liota@vmware.com<br>```<br>and we'll work with you to get one set up and help with the necessary values in the properties file.<br><br>## Log Location<br><br>The default location for log files generated during Liota operation can be found at:<br><br>```bash<br>  /var/log/liota<br>```<br>If the above directory is not available or is not writeable then modify the log location in the file logging.json (find it as described above in the section on liota.conf)<br><br>## Uninstall Liota<br><br>Liota can be uninstalled easily as per the steps below:<br>```bash<br>   $ pip uninstall liota<br>   $ rm -rf /usr/lib/liota/ /etc/liota/ /var/log/liota/<br>```<br><br>## Contributing to Liota<br><br>Want to hack on Liota and add your own DCC component? Awesome!<br>Just fork the project in order to start contributing the code.<br><br>## Licensing<br>Liota is licensed under the BSD 2-Clause License.<br>\n          </div>"}, "last_serial": 3843296, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a1790a7dfcdbb291cc33de3d10341610", "sha256": "1cf515a0537a8a07540161b141b0ac3388a209ec8596bf1e267924c0fc91ba95"}, "downloads": -1, "filename": "liota-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a1790a7dfcdbb291cc33de3d10341610", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25989, "upload_time": "2016-04-29T20:31:23", "upload_time_iso_8601": "2016-04-29T20:31:23.991195Z", "url": "https://files.pythonhosted.org/packages/2f/67/0848cb80f4925e112fa690cabf2906f2d6bb5510991f0def95a63985c774/liota-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "bbbbbf3f12fcf2bf994f9e6bb68ee729", "sha256": "498ab1045b42ad6838d3201a1cd21992b27f558333571066c8c920752e103cb5"}, "downloads": -1, "filename": "liota-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bbbbbf3f12fcf2bf994f9e6bb68ee729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24292, "upload_time": "2016-06-23T12:07:32", "upload_time_iso_8601": "2016-06-23T12:07:32.294457Z", "url": "https://files.pythonhosted.org/packages/ef/21/7353eac1396556d56b72dab1585ce8aac1f6264b403a7a5339fc4ff5adb3/liota-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e6a346e04e0385c2e48f250acd14fec1", "sha256": "62c413847fae77907c1e8bc5778a668bccef4675fb39a4519e5334b260235f53"}, "downloads": -1, "filename": "liota-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e6a346e04e0385c2e48f250acd14fec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51408, "upload_time": "2016-10-05T20:53:24", "upload_time_iso_8601": "2016-10-05T20:53:24.474606Z", "url": "https://files.pythonhosted.org/packages/a3/0a/7ba83354a5fcf26cca637cb4da154e3e303583f8e5c8fafdaa1fbd7cde1d/liota-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7bc0ea0e30f59cf7bc791566a73112f8", "sha256": "c03733b0d569065e962c34e2964159b3412edac4a4c9215366eff7d7a27ce169"}, "downloads": -1, "filename": "liota-0.2-py2.7.tar.gz", "has_sig": false, "md5_digest": "7bc0ea0e30f59cf7bc791566a73112f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55633, "upload_time": "2017-01-12T11:12:56", "upload_time_iso_8601": "2017-01-12T11:12:56.107010Z", "url": "https://files.pythonhosted.org/packages/f8/8c/b9fb89c150f7bade5478c1bf85d851293c77a82a02af2d47306de4af3d6c/liota-0.2-py2.7.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "be0c60929db806bcf0db76edec2367af", "sha256": "e4caa84e91d559fd487e7b43312233b642440d40aac1c1e1999b01b2690eead7"}, "downloads": -1, "filename": "liota-0.2.1.tar.gz", "has_sig": false, "md5_digest": "be0c60929db806bcf0db76edec2367af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84577, "upload_time": "2017-03-01T11:42:59", "upload_time_iso_8601": "2017-03-01T11:42:59.351489Z", "url": "https://files.pythonhosted.org/packages/ac/21/f9fe86142c367fa56ea93d9e69e3aea6f5bd5c12cbdbde3db73c5255775f/liota-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8879e785e411719a415134e122a614eb", "sha256": "14a10f5dc2813f8cccf805f8a2be3c129fce8c4cba68950c66bd47cffb8cbf15"}, "downloads": -1, "filename": "liota-0.2.2.tar.gz", "has_sig": false, "md5_digest": "8879e785e411719a415134e122a614eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85907, "upload_time": "2017-03-13T18:14:16", "upload_time_iso_8601": "2017-03-13T18:14:16.843580Z", "url": "https://files.pythonhosted.org/packages/6d/3e/b83ff6fcb66782a794789091f6b4cad1ccf715af827767836d71b5d324f9/liota-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "bcc91de144571605ff29d5ca2f3f99d3", "sha256": "9ffaee13550816e35cc0f39fb63741a36b969aa20165ad13858d06686c64b230"}, "downloads": -1, "filename": "liota-0.2.3.tar.gz", "has_sig": false, "md5_digest": "bcc91de144571605ff29d5ca2f3f99d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95941, "upload_time": "2017-04-12T09:43:12", "upload_time_iso_8601": "2017-04-12T09:43:12.850722Z", "url": "https://files.pythonhosted.org/packages/2c/cc/8a3d4cd1c2b33ffd981433172cc039ef3e99983ab916eeda7fa8e7cdef22/liota-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4b1a0eef8065353d85fc1d25ab1082df", "sha256": "0d4d84a43ff77449c66ff6d2cd6b74557ab80b6c3cb8960133a0df468feb5563"}, "downloads": -1, "filename": "liota-0.2.4.tar.gz", "has_sig": false, "md5_digest": "4b1a0eef8065353d85fc1d25ab1082df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97273, "upload_time": "2017-04-17T10:51:25", "upload_time_iso_8601": "2017-04-17T10:51:25.155156Z", "url": "https://files.pythonhosted.org/packages/a9/87/dc4218a5c02159e8d4a6a8cb52362cc49eeea0e0e430e99103486f0d58fa/liota-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "7c525c62a291fb84229f50cd05aa7f39", "sha256": "241e3fcf03b26d2f0f9f4eefff4e09d33adc86010452b256569c987f77fdb183"}, "downloads": -1, "filename": "liota-0.2.5.tar.gz", "has_sig": false, "md5_digest": "7c525c62a291fb84229f50cd05aa7f39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98071, "upload_time": "2017-04-25T06:03:57", "upload_time_iso_8601": "2017-04-25T06:03:57.124810Z", "url": "https://files.pythonhosted.org/packages/72/a6/850065046f67ff1a68f570de614cce2f2464e3011e4cecd0c048c98f720c/liota-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "d28ff0f3b7a0a464f6ea4f1f98a3b42a", "sha256": "480b89b6dd4d5a7b79714d09e265a735c26e81899a2e5a0ca9e1086b9caf6966"}, "downloads": -1, "filename": "liota-0.2.6.tar.gz", "has_sig": false, "md5_digest": "d28ff0f3b7a0a464f6ea4f1f98a3b42a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98026, "upload_time": "2017-04-25T07:42:23", "upload_time_iso_8601": "2017-04-25T07:42:23.427982Z", "url": "https://files.pythonhosted.org/packages/4b/e4/ab43264df05e8ae6e5474754d661adbe2dba42c257ea5a7c2add7f5a82cd/liota-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "12d83c688673a6b6fe3215487283d76c", "sha256": "c7702aab12358810a38767b07f39c9b13da1c2e466814f8099b77b1ad2c462ce"}, "downloads": -1, "filename": "liota-0.2.7.tar.gz", "has_sig": false, "md5_digest": "12d83c688673a6b6fe3215487283d76c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99934, "upload_time": "2017-05-19T02:01:17", "upload_time_iso_8601": "2017-05-19T02:01:17.978370Z", "url": "https://files.pythonhosted.org/packages/39/6a/d9c89aaa6dc37d485f6df9c5cde5fdae3f38dae8c692365b0da43d5ce606/liota-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "0f81c637720a5ff8f548bb29bc6a5475", "sha256": "a784c6d1fda615fded5e493ffeba44b2ac3f47caa475366b6ab212db02180131"}, "downloads": -1, "filename": "liota-0.2.8.tar.gz", "has_sig": false, "md5_digest": "0f81c637720a5ff8f548bb29bc6a5475", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100966, "upload_time": "2017-05-20T02:28:54", "upload_time_iso_8601": "2017-05-20T02:28:54.862625Z", "url": "https://files.pythonhosted.org/packages/64/8e/5f5eae3bb52d67678ae94c60275497a44ecb0e89d1395a4d86f4696d5d5a/liota-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "d1dc2f9df4a75121c4fa1894750486bf", "sha256": "51b1b42cfe7312e2fa1871511e599f1d6344c10614a9166d67b6d4607f17b3ef"}, "downloads": -1, "filename": "liota-0.2.9.tar.gz", "has_sig": false, "md5_digest": "d1dc2f9df4a75121c4fa1894750486bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100976, "upload_time": "2017-05-20T02:32:10", "upload_time_iso_8601": "2017-05-20T02:32:10.658934Z", "url": "https://files.pythonhosted.org/packages/84/7f/034608e138bc8bbc34a58503460835bc7cb91623a996ad1525200fffd0ed/liota-0.2.9.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "75c40a01ea4ed54663925c2d6881a185", "sha256": "aab552a784149868fe1972e30fa8588c17c722cd935df110b7ed584177d12ba9"}, "downloads": -1, "filename": "liota-0.3.tar.gz", "has_sig": false, "md5_digest": "75c40a01ea4ed54663925c2d6881a185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100884, "upload_time": "2017-05-20T02:41:20", "upload_time_iso_8601": "2017-05-20T02:41:20.808936Z", "url": "https://files.pythonhosted.org/packages/60/11/42e9657df31ab5ad20ba2529d6a3c8a9caa56f4a6db18e00a500025f964a/liota-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "3010229bfec1b54f4bea37ccfbc7d777", "sha256": "1dcf885e6816f4e281753826ccf404fd73be9cc605d7b32d40b9bf4617a846d4"}, "downloads": -1, "filename": "liota-0.4.zip", "has_sig": false, "md5_digest": "3010229bfec1b54f4bea37ccfbc7d777", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 313201, "upload_time": "2018-02-12T13:08:14", "upload_time_iso_8601": "2018-02-12T13:08:14.797131Z", "url": "https://files.pythonhosted.org/packages/18/7b/ea6e01d6080837b386e5a38c98f4b525ed2b915077d3123abd704b8b8df3/liota-0.4.zip", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "0c72f7cbecbf459fbd6dfa990a24bfe0", "sha256": "fbd50cff0f1c6707d331453872e52ddb7e9fa0e273c9c1f2669c5f25571ac2b3"}, "downloads": -1, "filename": "liota-0.4.1.zip", "has_sig": false, "md5_digest": "0c72f7cbecbf459fbd6dfa990a24bfe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 300439, "upload_time": "2018-05-08T08:04:32", "upload_time_iso_8601": "2018-05-08T08:04:32.398172Z", "url": "https://files.pythonhosted.org/packages/58/47/16ab8514592918aadd010e3634b8aa472323d1ccc0ce436e31634175b9bb/liota-0.4.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c72f7cbecbf459fbd6dfa990a24bfe0", "sha256": "fbd50cff0f1c6707d331453872e52ddb7e9fa0e273c9c1f2669c5f25571ac2b3"}, "downloads": -1, "filename": "liota-0.4.1.zip", "has_sig": false, "md5_digest": "0c72f7cbecbf459fbd6dfa990a24bfe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 300439, "upload_time": "2018-05-08T08:04:32", "upload_time_iso_8601": "2018-05-08T08:04:32.398172Z", "url": "https://files.pythonhosted.org/packages/58/47/16ab8514592918aadd010e3634b8aa472323d1ccc0ce436e31634175b9bb/liota-0.4.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:45:26 2020"}