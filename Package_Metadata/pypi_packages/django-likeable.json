{"info": {"author": "Thane Thomson", "author_email": "connect@thanethomson.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "django-likeable\n===============\n\nAdds \"liking\" functionality which aims to be scale-friendly\n(see `django-nonrel <http://www.allbuttonspressed.com/projects/django-nonrel>`_)\nby favouring abstract classes instead of direct class inheritance when\nfacilitating liking. Allows liking of any model registered with the\n``contenttypes`` framework.\n\nNote that this app is not yet tested at scale, but will be at some point in the\nnear future. In the meantime, it simply adds \"liking\" functionality to your models.\n\nQuick Installation\n------------------\n1. Add the ``django-likeable`` app to your Python path.\n2. Add ``likeable`` to your list of ``INSTALLED_APPS`` in your project settings.\n3. Create your likeable model:\n\n::\n\n    from likeable import Likeable\n    from django.contrib.auth.models import User\n\n    class BlogEntry(Likeable):\n\n        author = models.ForeignKey(User)\n        content = models.TextField()\n        created = models.DateTimeField(auto_now_add=True)\n\n    class BlogEntryComment(Likeable):\n        \n        entry = models.ForeignKey(BlogEntry)\n        author = models.ForeignKey(User)\n        content = models.TextField()\n        created = models.DateTimeField(auto_now_add=True)\n\nLiking Content Manually\n-----------------------\nYou can use the provided ``Likeable.like`` function to automatically like a particular\nobject by a given user, such as:\n\n::\n\n    from likeable import Like\n    from models import BlogEntry, BlogEntryComment\n    from django.contrib.auth.models import User\n\n    ...\n\n    # harry posts a blog entry\n    harry = User.objects.create(username='harry')\n    blog_entry = BlogEntry.objects.create(author=harry, content=\"This is my first post.\")\n\n    ...\n\n    # sally likes the blog entry\n    sally = User.objects.create(username='sally')\n    blog_entry.like(sally)\n\nLiking Content Via Provided Views\n---------------------------------\nMake sure your project's ``urls.py`` file looks something like this:\n\n::\n\n    from django.conf.urls.defaults import patterns, include, url\n\n    urlpatterns = patterns('',\n\n        # ...\n\n        # add django-likeable's urls\n        url(r'^like/', include('likeable.urls')),\n\n        # ...\n    )\n\n**Enabled URLs**\n\n``like/<content_type_id>/<object_id>``\n\nAuto-detects whether a request comes in via\na plain GET request or an AJAX request, and handles it according to the following two\nviews.\n\n``like/noajax/<content_type_id>/<object_id>``\n\nAttempts to like the object whose\ncontent type ID is ``<content_type_id>`` and primary key is ``<object_id>`` (both\npositive integers). This function automatically attempts to redirect the user to the\nreferring URL after liking the given object. If no object matching the given criteria is\nfound, an HTTP 404 error will be generated.\n\n``like/ajax/<content_type_id>/<object_id>``\n\nAttempts to like the object whose\ncontent type ID is ``<content_type_id>`` and primary key is ``<object_id>`` (both\npositive integers). This function returns a JSON object of the format\n``{'success': true}`` upon success. If no object matching the given criteria is\nfound, an HTTP 404 error will be generated.\n\nOther Batteries Included\n------------------------\n\n``likeable.views.get_like_view_params(obj)``\n\n``obj`` must be any object registered with the ``contenttypes`` framework.\nOn success, this shortcut function will return a tuple containing first the\ncontent type ID primary key as well as the object's primary key, which can\nthen simply be passed to one of the ``django-likeable`` views.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thanethomson/django-likeable", "keywords": null, "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "django-likeable", "package_url": "https://pypi.org/project/django-likeable/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-likeable/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/thanethomson/django-likeable"}, "release_url": "https://pypi.org/project/django-likeable/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Simple Django app to facilitate \"liking\" of any content type.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Adds \u201cliking\u201d functionality which aims to be scale-friendly\n(see <a href=\"http://www.allbuttonspressed.com/projects/django-nonrel\" rel=\"nofollow\">django-nonrel</a>)\nby favouring abstract classes instead of direct class inheritance when\nfacilitating liking. Allows liking of any model registered with the\n<tt>contenttypes</tt> framework.</p>\n<p>Note that this app is not yet tested at scale, but will be at some point in the\nnear future. In the meantime, it simply adds \u201cliking\u201d functionality to your models.</p>\n<div id=\"quick-installation\">\n<h2>Quick Installation</h2>\n<ol>\n<li>Add the <tt><span class=\"pre\">django-likeable</span></tt> app to your Python path.</li>\n<li>Add <tt>likeable</tt> to your list of <tt>INSTALLED_APPS</tt> in your project settings.</li>\n<li>Create your likeable model:</li>\n</ol>\n<pre>from likeable import Likeable\nfrom django.contrib.auth.models import User\n\nclass BlogEntry(Likeable):\n\n    author = models.ForeignKey(User)\n    content = models.TextField()\n    created = models.DateTimeField(auto_now_add=True)\n\nclass BlogEntryComment(Likeable):\n\n    entry = models.ForeignKey(BlogEntry)\n    author = models.ForeignKey(User)\n    content = models.TextField()\n    created = models.DateTimeField(auto_now_add=True)\n</pre>\n</div>\n<div id=\"liking-content-manually\">\n<h2>Liking Content Manually</h2>\n<p>You can use the provided <tt>Likeable.like</tt> function to automatically like a particular\nobject by a given user, such as:</p>\n<pre>from likeable import Like\nfrom models import BlogEntry, BlogEntryComment\nfrom django.contrib.auth.models import User\n\n...\n\n# harry posts a blog entry\nharry = User.objects.create(username='harry')\nblog_entry = BlogEntry.objects.create(author=harry, content=\"This is my first post.\")\n\n...\n\n# sally likes the blog entry\nsally = User.objects.create(username='sally')\nblog_entry.like(sally)\n</pre>\n</div>\n<div id=\"liking-content-via-provided-views\">\n<h2>Liking Content Via Provided Views</h2>\n<p>Make sure your project\u2019s <tt>urls.py</tt> file looks something like this:</p>\n<pre>from django.conf.urls.defaults import patterns, include, url\n\nurlpatterns = patterns('',\n\n    # ...\n\n    # add django-likeable's urls\n    url(r'^like/', include('likeable.urls')),\n\n    # ...\n)\n</pre>\n<p><strong>Enabled URLs</strong></p>\n<p><tt><span class=\"pre\">like/&lt;content_type_id&gt;/&lt;object_id&gt;</span></tt></p>\n<p>Auto-detects whether a request comes in via\na plain GET request or an AJAX request, and handles it according to the following two\nviews.</p>\n<p><tt><span class=\"pre\">like/noajax/&lt;content_type_id&gt;/&lt;object_id&gt;</span></tt></p>\n<p>Attempts to like the object whose\ncontent type ID is <tt>&lt;content_type_id&gt;</tt> and primary key is <tt>&lt;object_id&gt;</tt> (both\npositive integers). This function automatically attempts to redirect the user to the\nreferring URL after liking the given object. If no object matching the given criteria is\nfound, an HTTP 404 error will be generated.</p>\n<p><tt><span class=\"pre\">like/ajax/&lt;content_type_id&gt;/&lt;object_id&gt;</span></tt></p>\n<p>Attempts to like the object whose\ncontent type ID is <tt>&lt;content_type_id&gt;</tt> and primary key is <tt>&lt;object_id&gt;</tt> (both\npositive integers). This function returns a JSON object of the format\n<tt>{'success': true}</tt> upon success. If no object matching the given criteria is\nfound, an HTTP 404 error will be generated.</p>\n</div>\n<div id=\"other-batteries-included\">\n<h2>Other Batteries Included</h2>\n<p><tt>likeable.views.get_like_view_params(obj)</tt></p>\n<p><tt>obj</tt> must be any object registered with the <tt>contenttypes</tt> framework.\nOn success, this shortcut function will return a tuple containing first the\ncontent type ID primary key as well as the object\u2019s primary key, which can\nthen simply be passed to one of the <tt><span class=\"pre\">django-likeable</span></tt> views.</p>\n</div>\n\n          </div>"}, "last_serial": 329128, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:35:20 2020"}