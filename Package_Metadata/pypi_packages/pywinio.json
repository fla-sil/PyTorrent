{"info": {"author": "Hong-She Liang", "author_email": "starofrainnight@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "=======\npywinio\n=======\n\n.. image:: https://img.shields.io/pypi/v/pywinio.svg\n    :target: https://pypi.python.org/pypi/pywinio\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/starofrainnight/pywinio?svg=true\n    :target: https://ci.appveyor.com/project/starofrainnight/pywinio\n\nA wrapper library for WinIO\n\nThanks for the great WinIO library which comes from Yariv Kaplan.\n\nThe WinIO library binary distribution will be accessed from winiobinary package.\n\nNOTE: This library has been renamed from 'rabird.winio' to 'pywinio' after 0.3.0 .\n\n* License: Apache-2.0\n\nUsage\n-----\n\n* Keyboard Emulation\n\n NOTICE: You must have a ps/2 keyboard connected to your PC if you test on win10 or later, otherwise this sample won't works!\n\n::\n\n    import pywinio\n    import time\n    import atexit\n\n    # KeyBoard Commands\n    # Command port\n    KBC_KEY_CMD\t= 0x64\n    # Data port\n    KBC_KEY_DATA = 0x60\n\n    g_winio = None\n\n    def get_winio():\n    \tglobal g_winio\n\n    \tif g_winio is None:\n    \t\tg_winio = pywinio.WinIO()\n    \t\tdef __clear_winio():\n    \t\t\tglobal g_winio\n    \t\t\tg_winio = None\n    \t\tatexit.register(__clear_winio)\n\n    \treturn g_winio\n\n    def wait_for_buffer_empty():\n    \t'''\n    \tWait keyboard buffer empty\n    \t'''\n\n    \twinio = get_winio()\n\n    \tdwRegVal = 0x02\n    \twhile (dwRegVal & 0x02):\n    \t\tdwRegVal = winio.get_port_byte(KBC_KEY_CMD)\n\n    def key_down(scancode):\n    \twinio = get_winio()\n\n    \twait_for_buffer_empty();\n    \twinio.set_port_byte(KBC_KEY_CMD, 0xd2);\n    \twait_for_buffer_empty();\n    \twinio.set_port_byte(KBC_KEY_DATA, scancode)\n\n    def key_up(scancode):\n    \twinio = get_winio()\n\n    \twait_for_buffer_empty();\n    \twinio.set_port_byte( KBC_KEY_CMD, 0xd2);\n    \twait_for_buffer_empty();\n    \twinio.set_port_byte( KBC_KEY_DATA, scancode | 0x80);\n\n    def key_press(scancode, press_time = 0.2):\n    \tkey_down( scancode )\n    \ttime.sleep( press_time )\n    \tkey_up( scancode )\n\n\n    # Press 'A' key\n    # Scancodes references : https://www.win.tue.nl/~aeb/linux/kbd/scancodes-1.html\n    key_press(0x1E)\n\n\nPrivilege Requirements\n-----------------------\n\nWinIo requires administrative privileges to run properly. This can be achieved by:\n\n* Using WinIo from a service running as LocalSystem (SE_LOAD_DRIVER_NAME privilege must be explicitly enabled).\n* Embedding a manifest file in the application that requests privilege elevation.\n* Requiring the user to choose the \"Run as Administrator\" option when launching the application.\n\nThe included C# samples demonstrate using an embedded manifest file to request privilege elevation.\n\nDriver Signing Requirements on 64-bit Systems\n---------------------------------------------\n\n64-bit versions of Windows only load device drivers that are signed by a code signing certificate issued by a public CA such as Verisign, Thawte, etc. WinIo64.sys must not be deployed on production machines unless a code signing certificate is obtained and used to sign this file. The bundled copy of WinIo64.sys is signed with a self-signed certificate and can only be used on development/test machines with Windows running in a special \"test\" mode. In order to use the bundled version of WinIo64.sys, you need to take the following steps:\n\n* Open an elevated command window by right-clicking the icon and clicking \"Run as Administrator\".\n* Type the following command to enable test-signing:\n\n ::\n\n  bcdedit.exe /set TESTSIGNING ON\n\n* Reboot the machine\n\nFor more information on Windows driver signing requirements, please refer to http://www.microsoft.com/whdc/winlogo/drvsign/kmcs_walkthrough.mspx.\n\nLicenses\n---------------------------------------------\n\nThis library was licensed under Apache-2.0 which already descripted in LICENSE\n\nWinIO library's license descripted in LICENSE-WINIO\n\n\n=======\nHistory\n=======\n\n0.3.0 (2018-07-24)\n---------------------\n\n* Renamed to pywinio\n\n0.2.6 (2018-07-20)\n---------------------\n\n* Claim this library renamed to pywinio!\n\n0.2.5 (2018-07-20)\n---------------------\n\n* Removed support of python 2.x\n\n0.2.4 (2018-06-01)\n---------------------\n\n* Supported automatic deploy by appveyor\n\n0.2.0 (2018-01-21)\n---------------------\n\n* Depends on winiobinary project, so we don't need to download WinIo binaries during setup.py\n\n0.1.9 (2015-12-02)\n---------------------\n\n* Can't install from packaged zip file due to missing rabird_bootstrap.py\n\n0.1.8 (2015-09-09)\n---------------------\n\n* Fixed not working with 64bits os\n\n0.1.0 (2015-08-18)\n---------------------\n\n* Fixed not working with python3\n\n0.0.9 (2015-08-18)\n---------------------\n\n* Initial release", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/starofrainnight/pywinio", "keywords": "pywinio,winio", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "pywinio", "package_url": "https://pypi.org/project/pywinio/", "platform": "", "project_url": "https://pypi.org/project/pywinio/", "project_urls": {"Homepage": "https://github.com/starofrainnight/pywinio"}, "release_url": "https://pypi.org/project/pywinio/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "A wrapper library for WinIO", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pywinio\">\n<h2>pywinio</h2>\n<a href=\"https://pypi.python.org/pypi/pywinio\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pywinio.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82c9b2c67ba79fdee614fb7ba61a99ff3e31776a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707977696e696f2e737667\"></a>\n<a href=\"https://ci.appveyor.com/project/starofrainnight/pywinio\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/github/starofrainnight/pywinio?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c611dca19b78c1d58accc165142f233ec461b48c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f737461726f667261696e6e696768742f707977696e696f3f7376673d74727565\"></a>\n<p>A wrapper library for WinIO</p>\n<p>Thanks for the great WinIO library which comes from Yariv Kaplan.</p>\n<p>The WinIO library binary distribution will be accessed from winiobinary package.</p>\n<p>NOTE: This library has been renamed from \u2018rabird.winio\u2019 to \u2018pywinio\u2019 after 0.3.0 .</p>\n<ul>\n<li>License: Apache-2.0</li>\n</ul>\n<div id=\"usage\">\n<h3>Usage</h3>\n<ul>\n<li>Keyboard Emulation</li>\n</ul>\n<blockquote>\nNOTICE: You must have a ps/2 keyboard connected to your PC if you test on win10 or later, otherwise this sample won\u2019t works!</blockquote>\n<pre>import pywinio\nimport time\nimport atexit\n\n# KeyBoard Commands\n# Command port\nKBC_KEY_CMD = 0x64\n# Data port\nKBC_KEY_DATA = 0x60\n\ng_winio = None\n\ndef get_winio():\n    global g_winio\n\n    if g_winio is None:\n            g_winio = pywinio.WinIO()\n            def __clear_winio():\n                    global g_winio\n                    g_winio = None\n            atexit.register(__clear_winio)\n\n    return g_winio\n\ndef wait_for_buffer_empty():\n    '''\n    Wait keyboard buffer empty\n    '''\n\n    winio = get_winio()\n\n    dwRegVal = 0x02\n    while (dwRegVal &amp; 0x02):\n            dwRegVal = winio.get_port_byte(KBC_KEY_CMD)\n\ndef key_down(scancode):\n    winio = get_winio()\n\n    wait_for_buffer_empty();\n    winio.set_port_byte(KBC_KEY_CMD, 0xd2);\n    wait_for_buffer_empty();\n    winio.set_port_byte(KBC_KEY_DATA, scancode)\n\ndef key_up(scancode):\n    winio = get_winio()\n\n    wait_for_buffer_empty();\n    winio.set_port_byte( KBC_KEY_CMD, 0xd2);\n    wait_for_buffer_empty();\n    winio.set_port_byte( KBC_KEY_DATA, scancode | 0x80);\n\ndef key_press(scancode, press_time = 0.2):\n    key_down( scancode )\n    time.sleep( press_time )\n    key_up( scancode )\n\n\n# Press 'A' key\n# Scancodes references : https://www.win.tue.nl/~aeb/linux/kbd/scancodes-1.html\nkey_press(0x1E)\n</pre>\n</div>\n<div id=\"privilege-requirements\">\n<h3>Privilege Requirements</h3>\n<p>WinIo requires administrative privileges to run properly. This can be achieved by:</p>\n<ul>\n<li>Using WinIo from a service running as LocalSystem (SE_LOAD_DRIVER_NAME privilege must be explicitly enabled).</li>\n<li>Embedding a manifest file in the application that requests privilege elevation.</li>\n<li>Requiring the user to choose the \u201cRun as Administrator\u201d option when launching the application.</li>\n</ul>\n<p>The included C# samples demonstrate using an embedded manifest file to request privilege elevation.</p>\n</div>\n<div id=\"driver-signing-requirements-on-64-bit-systems\">\n<h3>Driver Signing Requirements on 64-bit Systems</h3>\n<p>64-bit versions of Windows only load device drivers that are signed by a code signing certificate issued by a public CA such as Verisign, Thawte, etc. WinIo64.sys must not be deployed on production machines unless a code signing certificate is obtained and used to sign this file. The bundled copy of WinIo64.sys is signed with a self-signed certificate and can only be used on development/test machines with Windows running in a special \u201ctest\u201d mode. In order to use the bundled version of WinIo64.sys, you need to take the following steps:</p>\n<ul>\n<li>Open an elevated command window by right-clicking the icon and clicking \u201cRun as Administrator\u201d.</li>\n<li>Type the following command to enable test-signing:</li>\n</ul>\n<blockquote>\n<pre>bcdedit.exe /set TESTSIGNING ON\n</pre>\n</blockquote>\n<ul>\n<li>Reboot the machine</li>\n</ul>\n<p>For more information on Windows driver signing requirements, please refer to <a href=\"http://www.microsoft.com/whdc/winlogo/drvsign/kmcs_walkthrough.mspx\" rel=\"nofollow\">http://www.microsoft.com/whdc/winlogo/drvsign/kmcs_walkthrough.mspx</a>.</p>\n</div>\n<div id=\"licenses\">\n<h3>Licenses</h3>\n<p>This library was licensed under Apache-2.0 which already descripted in LICENSE</p>\n<p>WinIO library\u2019s license descripted in LICENSE-WINIO</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.3.0 (2018-07-24)</h3>\n<ul>\n<li>Renamed to pywinio</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.6 (2018-07-20)</h3>\n<ul>\n<li>Claim this library renamed to pywinio!</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2.5 (2018-07-20)</h3>\n<ul>\n<li>Removed support of python 2.x</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.4 (2018-06-01)</h3>\n<ul>\n<li>Supported automatic deploy by appveyor</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2.0 (2018-01-21)</h3>\n<ul>\n<li>Depends on winiobinary project, so we don\u2019t need to download WinIo binaries during setup.py</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.9 (2015-12-02)</h3>\n<ul>\n<li>Can\u2019t install from packaged zip file due to missing rabird_bootstrap.py</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.8 (2015-09-09)</h3>\n<ul>\n<li>Fixed not working with 64bits os</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.1.0 (2015-08-18)</h3>\n<ul>\n<li>Fixed not working with python3</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.0.9 (2015-08-18)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4717886, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "2ebace15c3ec22d170b06bf606e74561", "sha256": "e9e2b19d0a506e60e563355f254be1de284267dc273590c54f4461d3404c9176"}, "downloads": -1, "filename": "pywinio-0.3.0.zip", "has_sig": false, "md5_digest": "2ebace15c3ec22d170b06bf606e74561", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26847, "upload_time": "2018-07-24T06:19:47", "upload_time_iso_8601": "2018-07-24T06:19:47.020194Z", "url": "https://files.pythonhosted.org/packages/21/49/4e86ad4ec72018a5608a06802edd6d7282440654763395fcc1d4256ab0f0/pywinio-0.3.0.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ef1069937c9bbfd694076f95cdc8ddc4", "sha256": "8154201de8e41109158433cf6d182c500811b78d906871105cb67c372d4212ec"}, "downloads": -1, "filename": "pywinio-0.3.1.zip", "has_sig": false, "md5_digest": "ef1069937c9bbfd694076f95cdc8ddc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26743, "upload_time": "2019-01-20T09:49:37", "upload_time_iso_8601": "2019-01-20T09:49:37.170746Z", "url": "https://files.pythonhosted.org/packages/bf/72/ed15d1813002cbb79371f868856ffeb5dc9569531cc7cce64aa317ed0e37/pywinio-0.3.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef1069937c9bbfd694076f95cdc8ddc4", "sha256": "8154201de8e41109158433cf6d182c500811b78d906871105cb67c372d4212ec"}, "downloads": -1, "filename": "pywinio-0.3.1.zip", "has_sig": false, "md5_digest": "ef1069937c9bbfd694076f95cdc8ddc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26743, "upload_time": "2019-01-20T09:49:37", "upload_time_iso_8601": "2019-01-20T09:49:37.170746Z", "url": "https://files.pythonhosted.org/packages/bf/72/ed15d1813002cbb79371f868856ffeb5dc9569531cc7cce64aa317ed0e37/pywinio-0.3.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:11:17 2020"}