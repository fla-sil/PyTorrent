{"info": {"author": "Felix Andreas", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "<img src=\"hopfieldnetwork/data/icon/icon.svg\" width=\"64\" height=\"64\" align=\"left\"/>\n\n# hopfieldnetwork\n\n> A Hopfield network is a special kind of an artifical neural network. It implements a\n> so called associative or content addressable memory. This means that memory contents\n> are not reached via a memory address, but that the network responses to an input\n> pattern with that stored pattern which has the highest similarity.\n\n**hopfieldnetwork** is a Python package which provides an implementation of a Hopfield\nnetwork. The package also includes a graphical user interface.\n\n## Installing\n\nInstall and update using pip:\n\n``` sh\npip install -U hopfieldnetwork\n```\n\n## Requirements\n\n* Python 2.7 or higher (CPython or PyPy)\n* NumPy\n* Matplotlib\n\n### Usage\n\nImport the `HopfieldNetwork` class:\n\n``` python\nfrom hopfieldnetwork import HopfieldNetwork\n```\n\nCreate a new Hopfield network of size _N_ = 100:\n\n``` python\nhopfield_network1 = HopfieldNetwork(N=100)\n```\n\nSave / Train Images into the Hopfield network:\n\n``` python\nhopfield_network1.train_pattern(input_pattern)\n```\n\nStart an asynchronous update with 5 iterations:\n\n``` python\nhopfield_network1.update_neurons(iterations=5, mode=\"async\")\n```\n\nCompute the energy function of a pattern:\n\n``` python\nhopfield_network1.compute_energy(input_pattern)\n```\n\nSave a network as a file:\n\n``` python\nhopfield_network1.save_network(\"path/to/file\")\n```\n\nOpen an already trained Hopfield network:\n\n``` python\nhopfield_network2 = HopfieldNetwork(filepath=\"network2.npz\")\n```\n\n### Graphical user interface\n\n![Hopfield network GUI](examples/project4/latex/images/gui_screenshot.png?raw=true)\n\nIn the Hopfield network GUI, the one-dimensional vectors of the neuron states are\nvisualized as a two-dimensional binary image. The user has the option to load different\n pictures/patterns into network and then start an asynchronous or synchronous update\n with or without finite temperatures. There are also prestored different networks in the\n  examples tab.\n\n**Start the UI:**\n\nIf you installed the `hopfieldnetwork` package via pip, you can start the UI with:\n\n    hopfieldnetwork-ui\n\nOtherwise you can start UI by running `gui.py` as module:\n\n    python -m hopfieldnetwork.gui\n\n### GUI Layout\n\nThe Hopfield network GUI is divided into three frames:\n\n**Input frame**\\\nThe input frame (left) is the main point of interaction with the network. The user can\nchange the state of an input neuron by a left click to +1, accordingly by to right-click\n to -1. This will only change the state of the input pattern not the state of the actual\n  network. The input pattern can be transfered to the network with the buttons below:\n\n* **Set intial** sets the current input pattern as the start configuration of the neurons.\n* **Save / Train** stores / trains the current input pattern into the Hopfield network.\n* **Rand** sets a random input pattern.\n* **Clear** sets all points of the input pattern to -1.\n\n**Output frame**\\\nThe output frame (center) shows the current neuron configuration.\n\n* **Sync update** starts a synchronous update.\n* **Async update** starts an asynchronous update.\n* **Randomize** randomly flips the state of one tenth of the neurons.\n* **Set partial** sets the first half of the neurons to -1.\n* **Set random** sets a random neuron state.\n\n**Saved pattern frame**\\\nThe Saved pattern frame (right) shows the pattern currently saved in the network.\n\n* **Set initial** sets the currently displayed image as new neuron state.\n* **Set input** sets the currently displayed image as input pattern.\n* **Remove** removes the currently displayed image from the Hopfield network.\n\n**Menu bar**\n\n* In the **Network** tab, a new Hopfield network of any size can be initialized.\n\nIn addition, it is possible to save the current network and load stored networks.\nAlso, a raster graphic (JPG, PNG, GIF, TIF) can be added to the network or an entirly\nnew network can be created out of multiple images.\n\n* In the **Options** tab, the update with finite temperatures can be (de)activated.\n* **View** offers options for visually changing the GUI.\n* In the **Examples** tab, different example networks can be loaded.\n\n## License\n\n[GNU General Public License v3.0](https://github.com/andreasfelix/hopfieldnetwork/blob/master/LICENSE)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreasfelix/hopfieldnetwork", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "hopfieldnetwork", "package_url": "https://pypi.org/project/hopfieldnetwork/", "platform": "", "project_url": "https://pypi.org/project/hopfieldnetwork/", "project_urls": {"Homepage": "https://github.com/andreasfelix/hopfieldnetwork"}, "release_url": "https://pypi.org/project/hopfieldnetwork/1.0.1/", "requires_dist": ["numpy", "matplotlib", "pillow"], "requires_python": ">=2.7", "summary": "A Python implementation of the Hopfield network", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img align=\"left\" height=\"64\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c65107a194193d371906040bb9095d5e4c85a23/686f706669656c646e6574776f726b2f646174612f69636f6e2f69636f6e2e737667\" width=\"64\">\n<h1>hopfieldnetwork</h1>\n<blockquote>\n<p>A Hopfield network is a special kind of an artifical neural network. It implements a\nso called associative or content addressable memory. This means that memory contents\nare not reached via a memory address, but that the network responses to an input\npattern with that stored pattern which has the highest similarity.</p>\n</blockquote>\n<p><strong>hopfieldnetwork</strong> is a Python package which provides an implementation of a Hopfield\nnetwork. The package also includes a graphical user interface.</p>\n<h2>Installing</h2>\n<p>Install and update using pip:</p>\n<pre>pip install -U hopfieldnetwork\n</pre>\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or higher (CPython or PyPy)</li>\n<li>NumPy</li>\n<li>Matplotlib</li>\n</ul>\n<h3>Usage</h3>\n<p>Import the <code>HopfieldNetwork</code> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hopfieldnetwork</span> <span class=\"kn\">import</span> <span class=\"n\">HopfieldNetwork</span>\n</pre>\n<p>Create a new Hopfield network of size <em>N</em> = 100:</p>\n<pre><span class=\"n\">hopfield_network1</span> <span class=\"o\">=</span> <span class=\"n\">HopfieldNetwork</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<p>Save / Train Images into the Hopfield network:</p>\n<pre><span class=\"n\">hopfield_network1</span><span class=\"o\">.</span><span class=\"n\">train_pattern</span><span class=\"p\">(</span><span class=\"n\">input_pattern</span><span class=\"p\">)</span>\n</pre>\n<p>Start an asynchronous update with 5 iterations:</p>\n<pre><span class=\"n\">hopfield_network1</span><span class=\"o\">.</span><span class=\"n\">update_neurons</span><span class=\"p\">(</span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"async\"</span><span class=\"p\">)</span>\n</pre>\n<p>Compute the energy function of a pattern:</p>\n<pre><span class=\"n\">hopfield_network1</span><span class=\"o\">.</span><span class=\"n\">compute_energy</span><span class=\"p\">(</span><span class=\"n\">input_pattern</span><span class=\"p\">)</span>\n</pre>\n<p>Save a network as a file:</p>\n<pre><span class=\"n\">hopfield_network1</span><span class=\"o\">.</span><span class=\"n\">save_network</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/file\"</span><span class=\"p\">)</span>\n</pre>\n<p>Open an already trained Hopfield network:</p>\n<pre><span class=\"n\">hopfield_network2</span> <span class=\"o\">=</span> <span class=\"n\">HopfieldNetwork</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s2\">\"network2.npz\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Graphical user interface</h3>\n<p><img alt=\"Hopfield network GUI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b95c019fd50f8a56c01a93f018f5f4acf538dc5b/6578616d706c65732f70726f6a656374342f6c617465782f696d616765732f6775695f73637265656e73686f742e706e673f7261773d74727565\"></p>\n<p>In the Hopfield network GUI, the one-dimensional vectors of the neuron states are\nvisualized as a two-dimensional binary image. The user has the option to load different\npictures/patterns into network and then start an asynchronous or synchronous update\nwith or without finite temperatures. There are also prestored different networks in the\nexamples tab.</p>\n<p><strong>Start the UI:</strong></p>\n<p>If you installed the <code>hopfieldnetwork</code> package via pip, you can start the UI with:</p>\n<pre><code>hopfieldnetwork-ui\n</code></pre>\n<p>Otherwise you can start UI by running <code>gui.py</code> as module:</p>\n<pre><code>python -m hopfieldnetwork.gui\n</code></pre>\n<h3>GUI Layout</h3>\n<p>The Hopfield network GUI is divided into three frames:</p>\n<p><strong>Input frame</strong><br>\nThe input frame (left) is the main point of interaction with the network. The user can\nchange the state of an input neuron by a left click to +1, accordingly by to right-click\nto -1. This will only change the state of the input pattern not the state of the actual\nnetwork. The input pattern can be transfered to the network with the buttons below:</p>\n<ul>\n<li><strong>Set intial</strong> sets the current input pattern as the start configuration of the neurons.</li>\n<li><strong>Save / Train</strong> stores / trains the current input pattern into the Hopfield network.</li>\n<li><strong>Rand</strong> sets a random input pattern.</li>\n<li><strong>Clear</strong> sets all points of the input pattern to -1.</li>\n</ul>\n<p><strong>Output frame</strong><br>\nThe output frame (center) shows the current neuron configuration.</p>\n<ul>\n<li><strong>Sync update</strong> starts a synchronous update.</li>\n<li><strong>Async update</strong> starts an asynchronous update.</li>\n<li><strong>Randomize</strong> randomly flips the state of one tenth of the neurons.</li>\n<li><strong>Set partial</strong> sets the first half of the neurons to -1.</li>\n<li><strong>Set random</strong> sets a random neuron state.</li>\n</ul>\n<p><strong>Saved pattern frame</strong><br>\nThe Saved pattern frame (right) shows the pattern currently saved in the network.</p>\n<ul>\n<li><strong>Set initial</strong> sets the currently displayed image as new neuron state.</li>\n<li><strong>Set input</strong> sets the currently displayed image as input pattern.</li>\n<li><strong>Remove</strong> removes the currently displayed image from the Hopfield network.</li>\n</ul>\n<p><strong>Menu bar</strong></p>\n<ul>\n<li>In the <strong>Network</strong> tab, a new Hopfield network of any size can be initialized.</li>\n</ul>\n<p>In addition, it is possible to save the current network and load stored networks.\nAlso, a raster graphic (JPG, PNG, GIF, TIF) can be added to the network or an entirly\nnew network can be created out of multiple images.</p>\n<ul>\n<li>In the <strong>Options</strong> tab, the update with finite temperatures can be (de)activated.</li>\n<li><strong>View</strong> offers options for visually changing the GUI.</li>\n<li>In the <strong>Examples</strong> tab, different example networks can be loaded.</li>\n</ul>\n<h2>License</h2>\n<p><a href=\"https://github.com/andreasfelix/hopfieldnetwork/blob/master/LICENSE\" rel=\"nofollow\">GNU General Public License v3.0</a></p>\n\n          </div>"}, "last_serial": 6786593, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f9548377ffedfbf2337d98ce27392732", "sha256": "40e84b7ef5752677c83d8fff5532fc5f280bd3633cf6dcdaaaa2497597f7b582"}, "downloads": -1, "filename": "hopfieldnetwork-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9548377ffedfbf2337d98ce27392732", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 26281, "upload_time": "2020-03-06T00:31:14", "upload_time_iso_8601": "2020-03-06T00:31:14.775234Z", "url": "https://files.pythonhosted.org/packages/43/94/4ba1cdd2c161b30bb71164f3f1bb1027182ca44767b8c900cfb8d8eeaa2f/hopfieldnetwork-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7eff0d6a53eaff713129da84d9f608b", "sha256": "bc6369052b8f577f638caef896603760a5b6d8771d1b095566c67b3f9ba66f78"}, "downloads": -1, "filename": "hopfieldnetwork-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e7eff0d6a53eaff713129da84d9f608b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 14073, "upload_time": "2020-03-06T00:31:17", "upload_time_iso_8601": "2020-03-06T00:31:17.304276Z", "url": "https://files.pythonhosted.org/packages/ed/2c/0f3a9016895b0d171123d30a14ed6a6abe9da21642a916e50d7989e4453c/hopfieldnetwork-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "fe1bff1b17f72d4430b937c3812880e0", "sha256": "095fd0d63a7dca63d980199bf12d5d482ac542a318174f3c0d6d67071ce390f1"}, "downloads": -1, "filename": "hopfieldnetwork-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fe1bff1b17f72d4430b937c3812880e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 88586, "upload_time": "2020-03-10T17:39:21", "upload_time_iso_8601": "2020-03-10T17:39:21.163859Z", "url": "https://files.pythonhosted.org/packages/7f/6d/6d74866a255eccd2a9a8e90005864ed8f639c6992cf45752bed59032b1b2/hopfieldnetwork-1.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe1bff1b17f72d4430b937c3812880e0", "sha256": "095fd0d63a7dca63d980199bf12d5d482ac542a318174f3c0d6d67071ce390f1"}, "downloads": -1, "filename": "hopfieldnetwork-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fe1bff1b17f72d4430b937c3812880e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 88586, "upload_time": "2020-03-10T17:39:21", "upload_time_iso_8601": "2020-03-10T17:39:21.163859Z", "url": "https://files.pythonhosted.org/packages/7f/6d/6d74866a255eccd2a9a8e90005864ed8f639c6992cf45752bed59032b1b2/hopfieldnetwork-1.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:50:38 2020"}