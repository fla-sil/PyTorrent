{"info": {"author": "Alex Kessinger", "author_email": "voidfiles@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Lark is a RESTy inteface for redis\n==================================\n\n.. image:: https://api.travis-ci.org/voidfiles/lark.png\n    :target: https://travis-ci.org/voidfiles/lark\n\n\nLark is a python library that provides a generic method from transforming a HTTP request into a redis command. If you have heard of `webdis <http://webd.is/>`_ this works in roughly the same way. It provides two main framework specific methods for Django, and Flask. Though it should be easy to fit Lark into any python web framework.\n\nFeatures\n--------\n\n* Has a RESTy interface ie. POST for writes, GET for reads, and DELETE for, well, deletes\n* Automatic JSON serilization and deserialization for redis values\n* Automatic key prefixing for multi-user environments\n* Fully tested adapaters for Flask and Django\n* Support for scope based authorization with an eye towards hooking up with `flask-oauthlib <https://flask-oauthlib.readthedocs.org/en/latest/>`_\n* While rough, documentation is available for `all supported methods <http://lark.readthedocs.org/en/latest/redis_api_client.html>`_\n\n\nQuickstart\n----------\n\nTo get started make sure that you have `redis <http://redis.io>`_ installed, then install lark.\n\n::\n\n    pip install lark\n\n\nNext you can create a simple Flask app that mounts the lark blueprint. Lark also comes with a Redis middleware for setting up redis connections.\n\n::\n\n\tfrom flask import Flask\n\tfrom lark.ext.flask.redis_api import redis_api_blueprint\n\tfrom lark.ext.flask.flask_redis import Redis\n\n\tapp = Flask(__name__)\n\t# Add a simpple redis connection to the global object\n\tRedis(app)\n\n\tapp.config['DEFAULT_LARK_SCOPES'] = set(['admin'])\n\n\t# Mount the redis blueprint\n\tapp.register_blueprint(redis_api_blueprint, url_prefix='/api/0')\n\n\n\tif __name__ == '__main__':\n\t    app.run()\n\n\nNow you can run the server and then you will be able to interact with the API like so. You can find documentation on all the calls here.\n\n\n::\n\n\t>>> curl http://127.0.0.1:5000/api/0/get/a/\n\t{\"meta\": {\"status\": \"ok\", \"status_code\": 200}\n\n\n\t>>> curl -X POST -H 'Content-Type: application/json' \\\n\t--data-ascii '{\"value\": \"foo\"}' \\\n\thttp://127.0.0.1:5000/api/0/set/a/\n\t\"meta\": {\"status\": \"ok\", \"status_code\": 200}, \"data\": true}\n\n\t>>> curl http://127.0.0.1:5000/api/0/get/a/\n\t{\"meta\": {\"status\": \"ok\", \"status_code\": 200}, \"data\": \"foo\"}\n\n\n\nPlanned Features\n________________\n\n* Flask middleware to support oauth2\n* A full Web interface for managing, and editing redis values.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/voidfiles/lark", "keywords": "rest lark json", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "lark", "package_url": "https://pypi.org/project/lark/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lark/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/voidfiles/lark"}, "release_url": "https://pypi.org/project/lark/0.0.4/", "requires_dist": null, "requires_python": null, "summary": "Lark is a RESTy interface for python", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/voidfiles/lark\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/voidfiles/lark.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/741f7fbb445c014611cfae9f9b96cc17c1c51ad6/68747470733a2f2f6170692e7472617669732d63692e6f72672f766f696466696c65732f6c61726b2e706e67\"></a>\n<p>Lark is a python library that provides a generic method from transforming a HTTP request into a redis command. If you have heard of <a href=\"http://webd.is/\" rel=\"nofollow\">webdis</a> this works in roughly the same way. It provides two main framework specific methods for Django, and Flask. Though it should be easy to fit Lark into any python web framework.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Has a RESTy interface ie. POST for writes, GET for reads, and DELETE for, well, deletes</li>\n<li>Automatic JSON serilization and deserialization for redis values</li>\n<li>Automatic key prefixing for multi-user environments</li>\n<li>Fully tested adapaters for Flask and Django</li>\n<li>Support for scope based authorization with an eye towards hooking up with <a href=\"https://flask-oauthlib.readthedocs.org/en/latest/\" rel=\"nofollow\">flask-oauthlib</a></li>\n<li>While rough, documentation is available for <a href=\"http://lark.readthedocs.org/en/latest/redis_api_client.html\" rel=\"nofollow\">all supported methods</a></li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>To get started make sure that you have <a href=\"http://redis.io\" rel=\"nofollow\">redis</a> installed, then install lark.</p>\n<pre>pip install lark\n</pre>\n<p>Next you can create a simple Flask app that mounts the lark blueprint. Lark also comes with a Redis middleware for setting up redis connections.</p>\n<pre>from flask import Flask\nfrom lark.ext.flask.redis_api import redis_api_blueprint\nfrom lark.ext.flask.flask_redis import Redis\n\napp = Flask(__name__)\n# Add a simpple redis connection to the global object\nRedis(app)\n\napp.config['DEFAULT_LARK_SCOPES'] = set(['admin'])\n\n# Mount the redis blueprint\napp.register_blueprint(redis_api_blueprint, url_prefix='/api/0')\n\n\nif __name__ == '__main__':\n    app.run()\n</pre>\n<p>Now you can run the server and then you will be able to interact with the API like so. You can find documentation on all the calls here.</p>\n<pre>&gt;&gt;&gt; curl http://127.0.0.1:5000/api/0/get/a/\n{\"meta\": {\"status\": \"ok\", \"status_code\": 200}\n\n\n&gt;&gt;&gt; curl -X POST -H 'Content-Type: application/json' \\\n--data-ascii '{\"value\": \"foo\"}' \\\nhttp://127.0.0.1:5000/api/0/set/a/\n\"meta\": {\"status\": \"ok\", \"status_code\": 200}, \"data\": true}\n\n&gt;&gt;&gt; curl http://127.0.0.1:5000/api/0/get/a/\n{\"meta\": {\"status\": \"ok\", \"status_code\": 200}, \"data\": \"foo\"}\n</pre>\n<div id=\"planned-features\">\n<h3>Planned Features</h3>\n<ul>\n<li>Flask middleware to support oauth2</li>\n<li>A full Web interface for managing, and editing redis values.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 950298, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d05f88ead46f68458e637032e83dbb13", "sha256": "7c35430d5fad7e03bed0890ce263d3ce0a969d3d9c2c415256dfdcbed6bd8fea"}, "downloads": -1, "filename": "lark-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d05f88ead46f68458e637032e83dbb13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11900, "upload_time": "2013-12-21T07:03:56", "upload_time_iso_8601": "2013-12-21T07:03:56.559634Z", "url": "https://files.pythonhosted.org/packages/c2/68/b6fdd5a1f5d5963d8f748281e01c0096610bb6c499f8fdb0078da43b0750/lark-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ff135d114afa81f12f7fba6a80fd5433", "sha256": "498cfb751fd586c22db755ca6413e00cab71ec38e5a5135eb50a1a470d51e835"}, "downloads": -1, "filename": "lark-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ff135d114afa81f12f7fba6a80fd5433", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11937, "upload_time": "2013-12-21T07:21:59", "upload_time_iso_8601": "2013-12-21T07:21:59.134305Z", "url": "https://files.pythonhosted.org/packages/10/4a/3eb52b2172268e6a9ba62449f4acf49829534bb4a7e38184df5869c4c245/lark-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2c3a68415dcc74ef5c9b95b557f59f3e", "sha256": "6426d64ec6489998a2b66dbf54053baecdb75ea6d7102696dfbc1f7ddc0c96f3"}, "downloads": -1, "filename": "lark-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2c3a68415dcc74ef5c9b95b557f59f3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11915, "upload_time": "2013-12-21T07:22:30", "upload_time_iso_8601": "2013-12-21T07:22:30.854839Z", "url": "https://files.pythonhosted.org/packages/4e/df/9e43ac34c31171d9804d8c5b52b71feee4d0dbbe0bbccd386892621937a7/lark-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c8bc450447316cce74cc3ea8b3ccbcb4", "sha256": "716d4b8313c8467c872bddf04819fee79d1fdce7ba1f17014b1632c571bdf5b4"}, "downloads": -1, "filename": "lark-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c8bc450447316cce74cc3ea8b3ccbcb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11900, "upload_time": "2013-12-21T07:23:15", "upload_time_iso_8601": "2013-12-21T07:23:15.023433Z", "url": "https://files.pythonhosted.org/packages/fc/7d/de1552814d3de4f6bc7b8e8b0c50b92edb996305c87e6868bad2030968d9/lark-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8bc450447316cce74cc3ea8b3ccbcb4", "sha256": "716d4b8313c8467c872bddf04819fee79d1fdce7ba1f17014b1632c571bdf5b4"}, "downloads": -1, "filename": "lark-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c8bc450447316cce74cc3ea8b3ccbcb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11900, "upload_time": "2013-12-21T07:23:15", "upload_time_iso_8601": "2013-12-21T07:23:15.023433Z", "url": "https://files.pythonhosted.org/packages/fc/7d/de1552814d3de4f6bc7b8e8b0c50b92edb996305c87e6868bad2030968d9/lark-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:51 2020"}