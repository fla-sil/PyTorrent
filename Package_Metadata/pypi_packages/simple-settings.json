{"info": {"author": "Diego Garcia", "author_email": "drgarcia1986@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "Python Simple Settings\n======================\n.. _badges:\n\n.. image:: https://badge.fury.io/py/simple-settings.svg\n    :target: https://badge.fury.io/py/simple-settings\n    :alt: Package version\n\n.. image:: https://api.codacy.com/project/badge/Grade/d5d1a3dece0e48478de9797563b49310\n    :target: https://www.codacy.com/app/drgarcia1986/simple-settings?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=drgarcia1986/simple-settings&amp;utm_campaign=Badge_Grade\n    :alt: Code Issues\n\n.. image:: https://travis-ci.org/drgarcia1986/simple-settings.svg\n    :target: https://travis-ci.org/drgarcia1986/simple-settings\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/drgarcia1986/simple-settings/badge.svg\n    :target: https://coveralls.io/r/drgarcia1986/simple-settings\n    :alt: Coverage Status\n\n.. _description:\n\nA simple way to manage your project settings.\n\n**simple-settings** is inspired by Django's settings system but is\ngeneric for any python project.\n\nWith simple-settings you just need to specify your settings module using\nthe ``--settings`` command line arg when invoking your python script (or\n``SIMPLE_SETTINGS`` environment var) and all settings will be exposed as\nproperties of the ``simple_settings.settings`` module.\n\n.. code:: python\n\n    >>> from simple_settings import settings\n    >>> print(settings.FOO)\n    'some value in foo'\n\nInstallation\n------------\n\nsimple-settings is available on\n`Pypi <https://pypi.python.org/pypi/simple-settings>`__.\n\n.. code:: bash\n\n    $ pip install simple-settings\n\n..\n\n    To install simple-settings with all dependencies use ``pip install simple-settings[all]``\n\n**simple-settings** is tested with Python 2.7, 3.4, 3.5, 3.6 and PyPy.\n\nHow this works\n--------------\n\nsimple-settings reads and stores all variables (or constants if you\nprefer) of a python module that you specify. To store your settings you\nneed at least one setting file (in any of supported formats).\n\nTo specify your settings module you have two approaches: with command\nline or environment.\n\nFor example, imagine that you have a python module for your project\nsettings and this file is in \"*settings/development.py*\\ \" (a common\nexample). To load settings of this file you can run your project with\ncommand line arg ``--settings``:\n\n.. code:: bash\n\n    $ python app.py --settings=settings.development\n\nsimple-settings accepts ``--simple-settings`` command line arg also.\nOr set the environment variable ``SIMPLE_SETTINGS``:\n\n.. code:: bash\n\n    $ export SIMPLE_SETTINGS=settings.development\n    $ python app.py\n\n..\n\n    the ``settings`` environment variable is deprecated\n\nThe ``simple_settings.settings`` object reads both the command line and\nenvironment in this order (but simple-settings takes the first value it\nencounters), to know which file to load.\n\nAnother option is use class ``LazySettings`` instead of singleton object\n``settings``. With ``LazySettings`` class is possible to determine\nsettings files in object create:\n\n.. code:: python\n\n    from simple_settings import LazySettings\n\n\n    settings = LazySettings('settings.development')\n\nIf you don't pass any value in *LazySettings* init argument, this class\nfollow the same behavior of *settings* object.\n\nExample\n-------\n\nThis is a very dummy example, in real world you would use\nsimple-settings in more complex cases.\n\n**project\\_settings.py**\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn this example we just store a simple string but any python type is\naccepted.\n\n.. code:: python\n\n    SIMPLE_CONF = 'simple'\n\n**app.py**\n~~~~~~~~~~\n\nYou don't need specify which setting *simple-settings* must load, you\ncan do this with command line or environment.\n\n.. code:: python\n\n    from simple_settings import settings\n\n    print(settings.SIMPLE_CONF)\n\n**Run**\n~~~~~~~\n\nYou can specify your settings module with command line:\n\n.. code:: bash\n\n    $ python app.py --settings=project_settings\n    simple\n\nOr environment:\n\n.. code:: bash\n\n    $ export SIMPLE_SETTINGS=project_settings\n    $ python app.py\n    simple\n\nCheck\n`examples <https://github.com/drgarcia1986/simple-settings/tree/master/examples>`__,\nin project repository for more usage samples.\n\nas\\_dict()\n----------\n\nYou can check the loaded settings through method ``settings.as_dict()``\n\n.. code:: python\n\n    >>> settings.as_dict()\n    {'SIMPLE_CONF': 'simple'}\n\nconfigure\n---------\n\nYou can change any settings (and add new settings) in runtime with\nmethod ``configure``:\n\n.. code:: python\n\n    >>> settings.SOME_CONF\n    foo\n    >>> settings.configure(SOME_CONF='bar')\n    >>> settings.SOME_CONF\n    bar\n\n\nKeep in mind that this only modifies the settings during runtime, and any\nmodifications using configure will be lost on program exit.\n\n..\n\n    If you're using ``dynamic settings`` the *configure* method will update the setting value in dynamic storage as well.\n\nTypes of settings\n-----------------\n\nThe simple-settings is prepared to play with the following files types:\n\n-  python modules.\n-  cfg files (simple ``key=value`` files).\n-  yaml files.\n-  json files.\n-  toml files.\n\n..\n\n    To simple-settings load settings of yaml files is necessary to install with extra require *yaml*, e.g.: ``pip install simple-settings[yaml]``\n\n..\n\n    For toml files is necessary to install with extras require *toml*, e.g.: ``pip install simple-settings[toml]``\n\n\nLoading settings from environment variables\n-------------------------------------------\n\nsimple-settings can load all environment variables, e.g. ``python app.py --settings=.environ`` or only environment variables that start with a certain prefix, e.g. ``python app.py --settings=MYPREFIX_.environ``.\n\n\nLoad multiple settings modules\n------------------------------\n\nsimple-settings can load more than one setting module without use import\napproach, just specify yours settings modules separated by comma. For\nexample:\n\n.. code:: bash\n\n    $ python app.py --settings=production,amazon,new_relic,PREFIX_.environ\n\nsimple-setting will load all settings modules in order that was\nspecified (``production``-> ``amazon`` -> ``new_relic`` -> ``PREFIX_.environ``) overriding\npossibles conflicts.\n\nThis also works with *LazySettings* class:\n\n.. code:: python\n\n    from simple_settings import LazySettings\n\n\n    settings = LazySettings('production', 'amazon', 'new_relic', 'PREFIX_.environ')\n\nYou can combine any type of settings (*python modules*, *yaml*, etc.).\n\nIgnored settings\n----------------\n\n-  Python modules:\n\n   -  Variables starting with ``_``.\n\n-  Cfg files:\n\n   -  Keys starting with ``#``.\n\nSpecial Settings\n----------------\n\nsimple-settings has a list of *special settings* that change how\nsimple-settings will load settings. This *special settings* are specified using\na ``SIMPLE_SETTINGS`` dict in the settings module.\n\n.. code:: python\n\n    SIMPLE_SETTINGS = {\n        'OVERRIDE_BY_ENV': True,\n        'CONFIGURE_LOGGING': True,\n        'REQUIRED_SETTINGS': ('API_TOKEN', 'DB_USER'),\n        'DYNAMIC_SETTINGS': {\n            'backend': 'redis',\n            'pattern': 'DYNAMIC_*',\n            'auto_casting': True,\n            'prefix': 'MYAPP_'\n        }\n    }\n\nConfigure logging\n~~~~~~~~~~~~~~~~~\n\nIf you set the *special setting* ``CONFIGURE_LOGGING`` with ``True``,\n*simple-settings* will configure the python logging to you. You just need\nto define your logging configuration with\n`Python dictConfig format <https://docs.python.org/3.5/library/logging.config.html#configuration-dictionary-schema>`__\nand place in ``LOGGING`` setting, e.g.\n\n.. code:: python\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'default': {\n                'format': '%(asctime)s %(levelname)s %(name)s %(message)s'\n            },\n        },\n        'handlers': {\n            'logfile': {\n                'level': 'DEBUG',\n                'class': 'logging.handlers.RotatingFileHandler',\n                'filename': 'my_log.log',\n                'maxBytes': 50 * 1024 * 1024,\n                'backupCount': 10,\n                'formatter': 'default'\n            },\n        },\n        'loggers': {\n            '': {\n                'handlers': ['logfile'],\n                'level': 'ERROR'\n            },\n            'my_project': {\n                'level': 'INFO',\n                'propagate': True,\n            },\n        }\n    }\n\nTo use just get logger with ``logging.getLogger()``, e.g.\n\n.. code:: python\n\n    import logging\n    logger = logging.getLogger('my_project')\n\n\n    logger.info('Hello')\n\n..\n\n    Don't forget, *simple-settings* is lazy and it only configures logging after runs ``setup()`` method or after reads some setting.\n\nOverride settings value\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can override the values of your settings module with environment\nvariables. You just need set the *special setting* ``OVERRIDE_BY_ENV``\nwith ``True`` as value.\n\n.. code:: bash\n\n    $ export SIMPLE_CONF=\"simple from env\"\n    $ python app.py --settings=project_settings\n    simple from env\n\n..\n\n    This is not a dynamic behavior, because settings are only overriden at\n    *\"settings setup\"* time; see ``dynamic settings`` for a real dynamic\n    behavior.\n\nRequired Settings\n~~~~~~~~~~~~~~~~~\n\nYou can determine a list of mandatory settings, i.e. settings that\nrequire a valid value. For this, set the *special setting*\n``REQUIRED_SETTINGS`` to a list (or any iterable) of your required\nsettings. If any setting in this list has an invalid value (or is not\npresent in setting file) then a ``ValueError`` is raised with a list of\nrequired settings not satified in the settings file.\n\nRequired Not None Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also determine a list of settings that must have a not none value, i.e.\nsettings that cannot be set as none. For this, set the *special setting*\n``REQUIRED_NOT_NONE_SETTINGS`` to a list (or any iterable) of the settings that\nyou require to not be none. If any setting in this list has a value of none,\nthen a ``ValueError`` is raised with a list of settings that must be set to not\nnone.\n\nRequired Settings Types\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can enforce that settings must have a particular type. For this, set the\n*special setting* ``REQUIRED_SETTINGS_TYPES`` to a dictionary with the keys\nbeing the name of the setting and the value being the type of the setting (see\nlist below for supported values).\n\nIf any of these settings has a value that is not of the type specified, or is a\nstring that cannot be parsed to the type specified, a ``ValueError`` is raised\nwith a list of settings that are of the wrong type. If there are no errors, the\nsetting value will be converted into that type. If any of the values are none,\ntheir type is not evaluated.\n\nThe supported types are listed below. If you attempt to set a type that is not\none of these types, then a ``ValueError`` will be raised with any unsupported\ntypes.\n\n    - ``\"bool\"`` - python's native boolean type, True values are ``y``, ``yes``, ``t``, ``true``, ``on`` and ``1``; false values are ``n``, ``no``, ``f``, ``false``, ``off`` and ``0``\n    - ``\"int\"`` - python's native integer type, parsed from a string using ``int(value)``\n    - ``\"float\"`` - python's native float type, parsed from a string using ``float(value)``\n    - ``\"str\"`` - python's native string type, not parsed from a string\n    - ``\"json.loads\"`` - Can be some types resulted of python's ``json.loads(value)`` function (e.g. dict: '{\"foo\": \"bar\"} -> {'foo': 'bar'}, int: '1' -> 1, bool: 'true' -> True, list: '[1, 2]' -> [1, 2], etc.)\n\nDynamic Settings\n~~~~~~~~~~~~~~~~\n\nsimple-settings has a list of *dynamic settings* mechanisms that change\na value of setting dynamically. If dynamic setting is activate, for all\nsetting the dynamic reader is called. The current dynamic mechanisms\nsuported is:\n\nDefault Dynamic Settings Configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor all *dynamic settings* backends *simple-settings* accept this\noptional parameters:\n\n-  ``pattern``: if you set some regex pattern the dynamic settings\n   reader only get settings that match with this pattern. (Note that the\n   pattern will be applied to key as entered, ignoring any configured\n   ``prefix`` setting.)\n-  ``auto_casting``: if you set this conf to ``True`` (default is\n   ``False``) *simple settings* use\n   `jsonpickle <https://github.com/jsonpickle/jsonpickle>`__ to encode\n   settings value before save in dynamic storage and decode after read\n   from dynamic storage. With this bahavior you can use complex types\n   (like *dict* and *list*) in dynamic settings.\n-  ``prefix``: if you set a prefix this value will be prepended to the\n   keys when looked up on the backend. The value is prepended without\n   any interpretation, so the key\n   ``key=\"MYKEY\" and prefix=\"my/namespace/\"`` would resolve to\n   ``key=\"my/namespace/MYKEY\"`` and\n   ``key=\"MYKEY\" and prefix=\"MY_NAMESPACE_\"`` would resolve to\n   ``key=\"MY_NAMESPACE_MYKEY\"``.\n\nRedis\n^^^^^\n\nYou can read your settings dynamically in redis if you activate the\n``DYNAMIC_SETTINGS`` special setting with ``redis`` backend:\n\n.. code:: python\n\n    SIMPLE_SETTINGS = {\n        'DYNAMIC_SETTINGS': {\n            'backend': 'redis',\n            'host': 'locahost',\n            'port': 6379,\n        }\n    }\n\n..\n\n    for ``redis`` backend ``localhost`` is default value for ``host`` and ``6379`` is the default value for ``port``.\n\nIn redis dynamic reader the binary types is automatically decoded.\n\n    To install with redis dependencies use:\n    ``pip install simple-settings[redis]``\n\nConsul\n^^^^^^\n\nYou can read your settings dynamically from a consul server if you\nactivate the ``DYNAMIC_SETTINGS`` special setting with the ``consul``\nbackend (uses `consulate <https://github.com/gmr/consulate>`__ library):\n\n.. code:: python\n\n    SIMPLE_SETTINGS = {\n        'DYNAMIC_SETTINGS': {\n            'backend': 'consul',\n            'host': 'locahost',\n            'port': 8500,\n            'prefix': 'mynamespace/'\n        }\n    }\n\n..\n\n    for ``consul`` backend ``localhost`` is default value for ``host`` and ``8500`` is the default value for ``port``.\n\nAdditional attributes for consul backend: ``datacenter``, ``token``,\n``scheme``.\n\n    To install with consul dependencies use:\n    ``pip install simple-settings[consul]``\n\nDATABASE\n^^^^^^^^\n\nYou can read your settings dynamically form a database if you activate\nthe ``DYNAMIC_SETTINGS`` special setting with the ``database`` backend\n(uses `sqlalchemy <http://docs.sqlalchemy.org/>`__ library)\n\n.. code:: python\n\n    SIMPLE_SETTINGS = {\n        'DYNAMIC_SETTINGS': {\n            'backend': 'database',\n            'sqlalchemy.url': 'sqlite:///:memory:',\n            ...\n        }\n    }\n\n..\n\n    To install with database dependencies use: ``pip install simple-settings[database]``\n\n\nAWS S3\n^^^^^^\n\nYou can read your settings dynamically form a AWS S3 bucket if you activate\nthe ``DYNAMIC_SETTINGS`` special setting with the ``s3`` backend\n(uses `boto3 <http://boto3.readthedocs.io/en/latest/>`__ library)\n\n.. code:: python\n\n    SIMPLE_SETTINGS = {\n        'DYNAMIC_SETTINGS': {\n            'backend': 's3',\n            'bucket_name': 'simple-settings',\n            'region': 'us-east-1'\n            ...\n        }\n    }\n\n..\n\n    To install with s3 dependencies use: ``pip install simple-settings[s3]``\n\n\nMemcached\n^^^^^^^^^\n\nYou can read your settings dynamically with memcached if you activate\nthe ``DYNAMIC_SETTINGS`` special setting with the ``memcached`` backend\n(uses `pymemcached <https://pymemcache.readthedocs.io/en/latest/index.html>`__ library)\n\n.. code:: python\n\n    SIMPLE_SETTINGS = {\n        'DYNAMIC_SETTINGS': {\n            'backend': 'memcached',\n            'host': 'localhost',\n            'port': 11211\n            ...\n        }\n    }\n\n..\n\n    To install with memcached dependencies use: ``pip install simple-settings[memcached]``\n\n\nUtils\n-----\n\nSettings Stub\n~~~~~~~~~~~~~\n\nA simple context manager (and decorator) class useful in tests which is\nnecessary to change some setting in the safe way.\n\nContext Manager example\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from simple_settings import settings\n    from simple_settings.utils import settings_stub\n\n\n    with settings_stub(SOME_SETTING='foo'):\n        assert settings.SOME_SETTING == 'foo'\n    assert settings.SOME_SETTING == 'bar'\n\nDecorator example\n^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from simple_settings import settings\n    from simple_settings.utils import settings_stub\n\n\n    @settings_stub(SOME_SETTING='foo')\n    def get_some_setting():\n        return settings.SOME_SETTING\n\n    assert get_some_setting() == 'foo'\n    assert settings.SOME_SETTING == 'bar'\n\n\nAdvanced Usage\n--------------\n\nCustom Strategy\n~~~~~~~~~~~~~~~\n\nTo implement a custom strategy:\n\n.. code:: python\n\n    from simple_settings import settings\n\n    class SettingsCustomStrategy(object):\n        \"\"\"\n        See `/simple_settings/strategies` for sample strategies (e.g. python, json, cfg)\n        \"\"\"\n\n    settings.add_strategy(SettingsCustomStrategy)\n\n\nCustom Dynamic Settings Reader\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can easily create your own dynamic settings reader. To do that you need to\ncreate a class than inherit from ``simple_settings.dynamic_settings.base.BaseReader``\nand implement ``_get`` and ``_set`` methods, f.ex:\n\n.. code:: python\n\n   from simple_settings.dynamic_settings.base import BaseReader\n\n\n   class Reader(BaseReader):\n\n       def __init__(self, conf):\n           super(Reader, self).__init__(conf)\n           self._dict = {}\n\n       def _get(self, key):\n           return self._dict.get(key)\n\n       def _set(self, key, value):\n           self._dict[key] = value\n\n..\n\nTo use it, just configure ``SIMPLE_SETINGS`` special setting with the full path\nof the reader, f.ex:\n\n.. code:: python\n\n   'SIMPLE_SETTINGS': {\n       'DYNAMIC_SETTINGS': {\n         'backend': 'path.of.module.ClassName'\n       }\n   }\n..\n\nAny other config of dynamic settings will be pass to reader backend on argument ``conf``\n\n\nChangelog\n---------\n[0.19.1] - 2019-10-21\n~~~~~~~~~~~~~~~~~~~~~\n\n- Load dynamic settings reader with both ways, full class path and module path\n  (assuming the reader class is called ``Reader``)\n\n[0.19.0] - 2019-10-18\n~~~~~~~~~~~~~~~~~~~~~\n\n- Change import dynamic reader mechanism to using full class path with dot notation\n- Update several dependencies\n- ``json.loads`` of ``REQUIRED_SETTINGS_TYPES`` now converts and validate lists\n\n[0.18.0] - 2019-07-14\n~~~~~~~~~~~~~~~~~~~~~\n\n- Fix ``TypeError`` on ``jsonpickle.decode`` when `auto_casting` is True and\n  dynamic backend returns None.\n- Raise exception containing ``settings_file`` information when an error occurs\n  in ``strategy.load_settings_file`` call from ``_load_settings_pipeline``.\n- If dynamic settings is enabled, query first the dynamic backend before\n  raising an AttributeError.\n\n[0.17.0] - 2019-07-10\n~~~~~~~~~~~~~~~~~~~~~\n\n- Allow settings to be loaded from environment variables via ``.environ`` or ``PREFIX_.environ``\n- Allow ``LazySettings.strategies`` to be easily overridden.\n- Using ``strtobool`` from standard library on ``Required Settings Type`` feature.\n\n[0.16.0] - 2019-02-23\n~~~~~~~~~~~~~~~~~~~~~\n\n- ``json.loads`` as new ``REQUIRED_SETTINGS_TYPES``\n\n[0.15.0] - 2019-02-23\n~~~~~~~~~~~~~~~~~~~~~\n\n- Enforce ordering of special settings being applied\n- Dynamic settings behaviors with ``memcached``.\n- Fix ``TypeError`` on load settings by YAML file with a relative path\n\n[0.14.0] - 2019-01-31\n~~~~~~~~~~~~~~~~~~~~~\n\n- Required not none special setting\n- Required types special setting and type conversion\n\n[0.13.0] - 2018-03-28\n~~~~~~~~~~~~~~~~~~~~~\n\n- Dynamic settings behaviors with ``AWS S3``.\n\n[0.12.1] - 2017-10-27\n~~~~~~~~~~~~~~~~~~~~~\n\n- Fix dynamic settings read behavior to ignore only ``None`` values and not ``zeros`` values ( `#68 <https://github.com/drgarcia1986/simple-settings/issues/68>`__)\n\n[0.12.0] - 2017-03-07\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Load settings from *toml* files.\n\n[0.11.0] - 2017-02-17\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Autoconfigure python logging with ``CONFIGURE_LOGGING`` *special\n   setting*.\n\n[0.10.0] - 2016-10-28\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Support configuring dynamic backends with an optional *prefix*.\n\n[0.9.1] - 2016-09-15\n~~~~~~~~~~~~~~~~~~~~\n\n-  ``configure`` method now works even called before the LazySettings\n   setup.\n\n[0.9.0] - 2016-08-12\n~~~~~~~~~~~~~~~~~~~~\n\n-  ``configure`` method now update settings in dynamic settings.\n-  On get setting value in dynamic setting update local settings with\n   this value.\n-  Auto casting value in dynamic storage to using complex types.\n\n[0.8.1] - 2016-06-04\n~~~~~~~~~~~~~~~~~~~~\n\n-  Fix instalation with ``database`` extra requires.\n\n[0.8.0] - 2016-06-04\n~~~~~~~~~~~~~~~~~~~~\n\n-  Better ``ImportError`` message if using a dynamic reader without your\n   lib dependencies.\n-  Refactor in Settings Stub.\n-  Dynamic settings behaviors with ``SQLAlchemy`` (``database``\n   backend).\n-  Load settings of *json* files.\n\n[0.7.0] - 2016-06-02\n~~~~~~~~~~~~~~~~~~~~\n\n-  Nice python *REPR* for *LazySettings* objects.\n-  Dynamic settings behaviors with ``Redis``.\n-  Dynamic settings behaviors with ``Consul``.\n-  Generate package with python wheel.\n\n[0.6.0] - 2016-05-17\n~~~~~~~~~~~~~~~~~~~~\n\n-  Some refactors.\n-  Determine settings files and modules directly in LazySettings object\n   (to avoid use env or command line argument).\n-  ``configure`` method to update settings.\n-  Use ``safe_load`` instead ``load`` in yaml strategy.\n\n[0.5.0] - 2016-02-03\n~~~~~~~~~~~~~~~~~~~~\n\n-  Some refactors.\n-  Load settings of *yaml* files.\n-  New ``SIMPLE_SETTINGS`` environment variable.\n-  New ``--simple-settings`` command line arg.\n\n[0.4.0] - 2016-01-03\n~~~~~~~~~~~~~~~~~~~~\n\n-  Lazy settings load.\n\n[0.3.1] - 2015-07-23\n~~~~~~~~~~~~~~~~~~~~\n\n-  Avoid to load python modules (as settings) in python files (with\n   this, fix ``deepcopy`` bug in ``as_dict()`` method).\n\n[0.3.0] - 2015-07-19\n~~~~~~~~~~~~~~~~~~~~\n\n-  Deepcopy in ``as_dict`` method to anticipate unexpected changes.\n-  Special Settings Behaviors.\n\n   -  Override settings values by environment.\n   -  Required settings validation.\n\n-  Remove default behavior of override settings values by environment\n   (now it's a special settings).\n-  Settings Stub (useful for tests)\n-  Change bahavior of settings ``__getattr__`` (before may raise\n   ``KeyError`` if simple-settings do not locate the setting, now raise\n   ``AttributeError``)\n\n[0.2.0] - 2015-06-19\n~~~~~~~~~~~~~~~~~~~~\n\n-  Load multiple settings separated by comma (like a pipeline).\n-  Load settings of *cfg* files.\n-  Filter python module attributes to read only user settings.\n\n[0.1.1] - 2015-05-19\n~~~~~~~~~~~~~~~~~~~~\n\n-  Fix parser\\_args error if using simple-settings with others command\n   line arguments.\n\n[0.1.0] - 2015-05-14\n~~~~~~~~~~~~~~~~~~~~\n\n-  First release.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/drgarcia1986/simple-settings/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drgarcia1986/simple-settings", "keywords": "django flask bottle tornado settings configuration conf", "license": "", "maintainer": "", "maintainer_email": "", "name": "simple-settings", "package_url": "https://pypi.org/project/simple-settings/", "platform": "", "project_url": "https://pypi.org/project/simple-settings/", "project_urls": {"Download": "https://github.com/drgarcia1986/simple-settings/tarball/master", "Homepage": "https://github.com/drgarcia1986/simple-settings"}, "release_url": "https://pypi.org/project/simple-settings/0.19.1/", "requires_dist": ["toml (==0.10.0) ; extra == 'all'", "SQLAlchemy (==1.3.8) ; extra == 'all'", "boto3 (==1.4.7) ; extra == 'all'", "redis (==3.3.8) ; extra == 'all'", "PyYAML (==5.1.2) ; extra == 'all'", "pymemcache (==2.2.2) ; extra == 'all'", "consulate (==0.6.0) ; extra == 'all'", "jsonpickle (==1.2) ; extra == 'all'", "six (==1.12.0) ; extra == 'all'", "consulate (==0.6.0) ; extra == 'consul'", "jsonpickle (==1.2) ; extra == 'consul'", "SQLAlchemy (==1.3.8) ; extra == 'database'", "jsonpickle (==1.2) ; extra == 'database'", "pymemcache (==2.2.2) ; extra == 'memcached'", "six (==1.12.0) ; extra == 'memcached'", "jsonpickle (==1.2) ; extra == 'memcached'", "redis (==3.3.8) ; extra == 'redis'", "six (==1.12.0) ; extra == 'redis'", "jsonpickle (==1.2) ; extra == 'redis'", "boto3 (==1.4.7) ; extra == 's3'", "six (==1.12.0) ; extra == 's3'", "jsonpickle (==1.2) ; extra == 's3'", "toml (==0.10.0) ; extra == 'toml'", "PyYAML (==5.1.2) ; extra == 'yaml'"], "requires_python": "", "summary": "A simple way to manage your project settings", "version": "0.19.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/simple-settings\" id=\"badges\" rel=\"nofollow\"><img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28bac61ea0f8035324e6c91d0df8528f1f888023/68747470733a2f2f62616467652e667572792e696f2f70792f73696d706c652d73657474696e67732e737667\"></a>\n<a href=\"https://www.codacy.com/app/drgarcia1986/simple-settings?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=drgarcia1986/simple-settings&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Code Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/487bafdf0f2dd342a556c8150f6fcd237ae60117/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6435643161336465636530653438343738646539373937353633623439333130\"></a>\n<a href=\"https://travis-ci.org/drgarcia1986/simple-settings\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c56d2c1336b1d50468d82b209e96bbb86043394f/68747470733a2f2f7472617669732d63692e6f72672f6472676172636961313938362f73696d706c652d73657474696e67732e737667\"></a>\n<a href=\"https://coveralls.io/r/drgarcia1986/simple-settings\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a9c71816df292571e213cc0b04d609c95870947/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6472676172636961313938362f73696d706c652d73657474696e67732f62616467652e737667\"></a>\n<p id=\"description\">A simple way to manage your project settings.</p>\n<p><strong>simple-settings</strong> is inspired by Django\u2019s settings system but is\ngeneric for any python project.</p>\n<p>With simple-settings you just need to specify your settings module using\nthe <tt><span class=\"pre\">--settings</span></tt> command line arg when invoking your python script (or\n<tt>SIMPLE_SETTINGS</tt> environment var) and all settings will be exposed as\nproperties of the <tt>simple_settings.settings</tt> module.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FOO</span><span class=\"p\">)</span>\n<span class=\"s1\">'some value in foo'</span>\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>simple-settings is available on\n<a href=\"https://pypi.python.org/pypi/simple-settings\" rel=\"nofollow\">Pypi</a>.</p>\n<pre>$ pip install simple-settings\n</pre>\n<blockquote>\nTo install simple-settings with all dependencies use <tt>pip install <span class=\"pre\">simple-settings[all]</span></tt></blockquote>\n<p><strong>simple-settings</strong> is tested with Python 2.7, 3.4, 3.5, 3.6 and PyPy.</p>\n</div>\n<div id=\"how-this-works\">\n<h2>How this works</h2>\n<p>simple-settings reads and stores all variables (or constants if you\nprefer) of a python module that you specify. To store your settings you\nneed at least one setting file (in any of supported formats).</p>\n<p>To specify your settings module you have two approaches: with command\nline or environment.</p>\n<p>For example, imagine that you have a python module for your project\nsettings and this file is in \u201c<em>settings/development.py</em>\u201d (a common\nexample). To load settings of this file you can run your project with\ncommand line arg <tt><span class=\"pre\">--settings</span></tt>:</p>\n<pre>$ python app.py --settings<span class=\"o\">=</span>settings.development\n</pre>\n<p>simple-settings accepts <tt><span class=\"pre\">--simple-settings</span></tt> command line arg also.\nOr set the environment variable <tt>SIMPLE_SETTINGS</tt>:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">SIMPLE_SETTINGS</span><span class=\"o\">=</span>settings.development\n$ python app.py\n</pre>\n<blockquote>\nthe <tt>settings</tt> environment variable is deprecated</blockquote>\n<p>The <tt>simple_settings.settings</tt> object reads both the command line and\nenvironment in this order (but simple-settings takes the first value it\nencounters), to know which file to load.</p>\n<p>Another option is use class <tt>LazySettings</tt> instead of singleton object\n<tt>settings</tt>. With <tt>LazySettings</tt> class is possible to determine\nsettings files in object create:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">LazySettings</span>\n\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">LazySettings</span><span class=\"p\">(</span><span class=\"s1\">'settings.development'</span><span class=\"p\">)</span>\n</pre>\n<p>If you don\u2019t pass any value in <em>LazySettings</em> init argument, this class\nfollow the same behavior of <em>settings</em> object.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>This is a very dummy example, in real world you would use\nsimple-settings in more complex cases.</p>\n<div id=\"project-settings-py\">\n<h3><strong>project_settings.py</strong></h3>\n<p>In this example we just store a simple string but any python type is\naccepted.</p>\n<pre><span class=\"n\">SIMPLE_CONF</span> <span class=\"o\">=</span> <span class=\"s1\">'simple'</span>\n</pre>\n</div>\n<div id=\"app-py\">\n<h3><strong>app.py</strong></h3>\n<p>You don\u2019t need specify which setting <em>simple-settings</em> must load, you\ncan do this with command line or environment.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SIMPLE_CONF</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"run\">\n<h3><strong>Run</strong></h3>\n<p>You can specify your settings module with command line:</p>\n<pre>$ python app.py --settings<span class=\"o\">=</span>project_settings\nsimple\n</pre>\n<p>Or environment:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">SIMPLE_SETTINGS</span><span class=\"o\">=</span>project_settings\n$ python app.py\nsimple\n</pre>\n<p>Check\n<a href=\"https://github.com/drgarcia1986/simple-settings/tree/master/examples\" rel=\"nofollow\">examples</a>,\nin project repository for more usage samples.</p>\n</div>\n</div>\n<div id=\"as-dict\">\n<h2>as_dict()</h2>\n<p>You can check the loaded settings through method <tt>settings.as_dict()</tt></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'SIMPLE_CONF'</span><span class=\"p\">:</span> <span class=\"s1\">'simple'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"configure\">\n<h2>configure</h2>\n<p>You can change any settings (and add new settings) in runtime with\nmethod <tt>configure</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SOME_CONF</span>\n<span class=\"n\">foo</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">SOME_CONF</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SOME_CONF</span>\n<span class=\"n\">bar</span>\n</pre>\n<p>Keep in mind that this only modifies the settings during runtime, and any\nmodifications using configure will be lost on program exit.</p>\n<blockquote>\nIf you\u2019re using <tt>dynamic settings</tt> the <em>configure</em> method will update the setting value in dynamic storage as well.</blockquote>\n</div>\n<div id=\"types-of-settings\">\n<h2>Types of settings</h2>\n<p>The simple-settings is prepared to play with the following files types:</p>\n<ul>\n<li>python modules.</li>\n<li>cfg files (simple <tt>key=value</tt> files).</li>\n<li>yaml files.</li>\n<li>json files.</li>\n<li>toml files.</li>\n</ul>\n<blockquote>\nTo simple-settings load settings of yaml files is necessary to install with extra require <em>yaml</em>, e.g.: <tt>pip install <span class=\"pre\">simple-settings[yaml]</span></tt></blockquote>\n<blockquote>\nFor toml files is necessary to install with extras require <em>toml</em>, e.g.: <tt>pip install <span class=\"pre\">simple-settings[toml]</span></tt></blockquote>\n</div>\n<div id=\"loading-settings-from-environment-variables\">\n<h2>Loading settings from environment variables</h2>\n<p>simple-settings can load all environment variables, e.g. <tt>python app.py <span class=\"pre\">--settings=.environ</span></tt> or only environment variables that start with a certain prefix, e.g. <tt>python app.py <span class=\"pre\">--settings=MYPREFIX_.environ</span></tt>.</p>\n</div>\n<div id=\"load-multiple-settings-modules\">\n<h2>Load multiple settings modules</h2>\n<p>simple-settings can load more than one setting module without use import\napproach, just specify yours settings modules separated by comma. For\nexample:</p>\n<pre>$ python app.py --settings<span class=\"o\">=</span>production,amazon,new_relic,PREFIX_.environ\n</pre>\n<p>simple-setting will load all settings modules in order that was\nspecified (<tt>production</tt>-&gt; <tt>amazon</tt> -&gt; <tt>new_relic</tt> -&gt; <tt>PREFIX_.environ</tt>) overriding\npossibles conflicts.</p>\n<p>This also works with <em>LazySettings</em> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">LazySettings</span>\n\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">LazySettings</span><span class=\"p\">(</span><span class=\"s1\">'production'</span><span class=\"p\">,</span> <span class=\"s1\">'amazon'</span><span class=\"p\">,</span> <span class=\"s1\">'new_relic'</span><span class=\"p\">,</span> <span class=\"s1\">'PREFIX_.environ'</span><span class=\"p\">)</span>\n</pre>\n<p>You can combine any type of settings (<em>python modules</em>, <em>yaml</em>, etc.).</p>\n</div>\n<div id=\"ignored-settings\">\n<h2>Ignored settings</h2>\n<ul>\n<li>Python modules:<ul>\n<li>Variables starting with <tt>_</tt>.</li>\n</ul>\n</li>\n<li>Cfg files:<ul>\n<li>Keys starting with <tt>#</tt>.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"special-settings\">\n<h2>Special Settings</h2>\n<p>simple-settings has a list of <em>special settings</em> that change how\nsimple-settings will load settings. This <em>special settings</em> are specified using\na <tt>SIMPLE_SETTINGS</tt> dict in the settings module.</p>\n<pre><span class=\"n\">SIMPLE_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'OVERRIDE_BY_ENV'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'CONFIGURE_LOGGING'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'REQUIRED_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'API_TOKEN'</span><span class=\"p\">,</span> <span class=\"s1\">'DB_USER'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'redis'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'pattern'</span><span class=\"p\">:</span> <span class=\"s1\">'DYNAMIC_*'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'auto_casting'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">'prefix'</span><span class=\"p\">:</span> <span class=\"s1\">'MYAPP_'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"configure-logging\">\n<h3>Configure logging</h3>\n<p>If you set the <em>special setting</em> <tt>CONFIGURE_LOGGING</tt> with <tt>True</tt>,\n<em>simple-settings</em> will configure the python logging to you. You just need\nto define your logging configuration with\n<a href=\"https://docs.python.org/3.5/library/logging.config.html#configuration-dictionary-schema\" rel=\"nofollow\">Python dictConfig format</a>\nand place in <tt>LOGGING</tt> setting, e.g.</p>\n<pre><span class=\"n\">LOGGING</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'disable_existing_loggers'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'formatters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'format'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> </span><span class=\"si\">%(name)s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'logfile'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'logging.handlers.RotatingFileHandler'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'filename'</span><span class=\"p\">:</span> <span class=\"s1\">'my_log.log'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'maxBytes'</span><span class=\"p\">:</span> <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span>\n            <span class=\"s1\">'backupCount'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"s1\">'formatter'</span><span class=\"p\">:</span> <span class=\"s1\">'default'</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'loggers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">''</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'logfile'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'ERROR'</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'my_project'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'propagate'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To use just get logger with <tt>logging.getLogger()</tt>, e.g.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my_project'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Hello'</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\nDon\u2019t forget, <em>simple-settings</em> is lazy and it only configures logging after runs <tt>setup()</tt> method or after reads some setting.</blockquote>\n</div>\n<div id=\"override-settings-value\">\n<h3>Override settings value</h3>\n<p>You can override the values of your settings module with environment\nvariables. You just need set the <em>special setting</em> <tt>OVERRIDE_BY_ENV</tt>\nwith <tt>True</tt> as value.</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">SIMPLE_CONF</span><span class=\"o\">=</span><span class=\"s2\">\"simple from env\"</span>\n$ python app.py --settings<span class=\"o\">=</span>project_settings\nsimple from env\n</pre>\n<blockquote>\nThis is not a dynamic behavior, because settings are only overriden at\n<em>\u201csettings setup\u201d</em> time; see <tt>dynamic settings</tt> for a real dynamic\nbehavior.</blockquote>\n</div>\n<div id=\"required-settings\">\n<h3>Required Settings</h3>\n<p>You can determine a list of mandatory settings, i.e. settings that\nrequire a valid value. For this, set the <em>special setting</em>\n<tt>REQUIRED_SETTINGS</tt> to a list (or any iterable) of your required\nsettings. If any setting in this list has an invalid value (or is not\npresent in setting file) then a <tt>ValueError</tt> is raised with a list of\nrequired settings not satified in the settings file.</p>\n</div>\n<div id=\"required-not-none-settings\">\n<h3>Required Not None Settings</h3>\n<p>You can also determine a list of settings that must have a not none value, i.e.\nsettings that cannot be set as none. For this, set the <em>special setting</em>\n<tt>REQUIRED_NOT_NONE_SETTINGS</tt> to a list (or any iterable) of the settings that\nyou require to not be none. If any setting in this list has a value of none,\nthen a <tt>ValueError</tt> is raised with a list of settings that must be set to not\nnone.</p>\n</div>\n<div id=\"required-settings-types\">\n<h3>Required Settings Types</h3>\n<p>You can enforce that settings must have a particular type. For this, set the\n<em>special setting</em> <tt>REQUIRED_SETTINGS_TYPES</tt> to a dictionary with the keys\nbeing the name of the setting and the value being the type of the setting (see\nlist below for supported values).</p>\n<p>If any of these settings has a value that is not of the type specified, or is a\nstring that cannot be parsed to the type specified, a <tt>ValueError</tt> is raised\nwith a list of settings that are of the wrong type. If there are no errors, the\nsetting value will be converted into that type. If any of the values are none,\ntheir type is not evaluated.</p>\n<p>The supported types are listed below. If you attempt to set a type that is not\none of these types, then a <tt>ValueError</tt> will be raised with any unsupported\ntypes.</p>\n<blockquote>\n<ul>\n<li><tt>\"bool\"</tt> - python\u2019s native boolean type, True values are <tt>y</tt>, <tt>yes</tt>, <tt>t</tt>, <tt>true</tt>, <tt>on</tt> and <tt>1</tt>; false values are <tt>n</tt>, <tt>no</tt>, <tt>f</tt>, <tt>false</tt>, <tt>off</tt> and <tt>0</tt></li>\n<li><tt>\"int\"</tt> - python\u2019s native integer type, parsed from a string using <tt>int(value)</tt></li>\n<li><tt>\"float\"</tt> - python\u2019s native float type, parsed from a string using <tt>float(value)</tt></li>\n<li><tt>\"str\"</tt> - python\u2019s native string type, not parsed from a string</li>\n<li><tt>\"json.loads\"</tt> - Can be some types resulted of python\u2019s <tt>json.loads(value)</tt> function (e.g. dict: \u2018{\u201cfoo\u201d: \u201cbar\u201d} -&gt; {\u2018foo\u2019: \u2018bar\u2019}, int: \u20181\u2019 -&gt; 1, bool: \u2018true\u2019 -&gt; True, list: \u2018[1, 2]\u2019 -&gt; [1, 2], etc.)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"dynamic-settings\">\n<h3>Dynamic Settings</h3>\n<p>simple-settings has a list of <em>dynamic settings</em> mechanisms that change\na value of setting dynamically. If dynamic setting is activate, for all\nsetting the dynamic reader is called. The current dynamic mechanisms\nsuported is:</p>\n<div id=\"default-dynamic-settings-configuration\">\n<h4>Default Dynamic Settings Configuration</h4>\n<p>For all <em>dynamic settings</em> backends <em>simple-settings</em> accept this\noptional parameters:</p>\n<ul>\n<li><tt>pattern</tt>: if you set some regex pattern the dynamic settings\nreader only get settings that match with this pattern. (Note that the\npattern will be applied to key as entered, ignoring any configured\n<tt>prefix</tt> setting.)</li>\n<li><tt>auto_casting</tt>: if you set this conf to <tt>True</tt> (default is\n<tt>False</tt>) <em>simple settings</em> use\n<a href=\"https://github.com/jsonpickle/jsonpickle\" rel=\"nofollow\">jsonpickle</a> to encode\nsettings value before save in dynamic storage and decode after read\nfrom dynamic storage. With this bahavior you can use complex types\n(like <em>dict</em> and <em>list</em>) in dynamic settings.</li>\n<li><tt>prefix</tt>: if you set a prefix this value will be prepended to the\nkeys when looked up on the backend. The value is prepended without\nany interpretation, so the key\n<tt><span class=\"pre\">key=\"MYKEY\"</span> and <span class=\"pre\">prefix=\"my/namespace/\"</span></tt> would resolve to\n<tt><span class=\"pre\">key=\"my/namespace/MYKEY\"</span></tt> and\n<tt><span class=\"pre\">key=\"MYKEY\"</span> and <span class=\"pre\">prefix=\"MY_NAMESPACE_\"</span></tt> would resolve to\n<tt><span class=\"pre\">key=\"MY_NAMESPACE_MYKEY\"</span></tt>.</li>\n</ul>\n</div>\n<div id=\"redis\">\n<h4>Redis</h4>\n<p>You can read your settings dynamically in redis if you activate the\n<tt>DYNAMIC_SETTINGS</tt> special setting with <tt>redis</tt> backend:</p>\n<pre><span class=\"n\">SIMPLE_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'redis'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'locahost'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">6379</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\nfor <tt>redis</tt> backend <tt>localhost</tt> is default value for <tt>host</tt> and <tt>6379</tt> is the default value for <tt>port</tt>.</blockquote>\n<p>In redis dynamic reader the binary types is automatically decoded.</p>\n<blockquote>\nTo install with redis dependencies use:\n<tt>pip install <span class=\"pre\">simple-settings[redis]</span></tt></blockquote>\n</div>\n<div id=\"consul\">\n<h4>Consul</h4>\n<p>You can read your settings dynamically from a consul server if you\nactivate the <tt>DYNAMIC_SETTINGS</tt> special setting with the <tt>consul</tt>\nbackend (uses <a href=\"https://github.com/gmr/consulate\" rel=\"nofollow\">consulate</a> library):</p>\n<pre><span class=\"n\">SIMPLE_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'consul'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'locahost'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">8500</span><span class=\"p\">,</span>\n        <span class=\"s1\">'prefix'</span><span class=\"p\">:</span> <span class=\"s1\">'mynamespace/'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\nfor <tt>consul</tt> backend <tt>localhost</tt> is default value for <tt>host</tt> and <tt>8500</tt> is the default value for <tt>port</tt>.</blockquote>\n<p>Additional attributes for consul backend: <tt>datacenter</tt>, <tt>token</tt>,\n<tt>scheme</tt>.</p>\n<blockquote>\nTo install with consul dependencies use:\n<tt>pip install <span class=\"pre\">simple-settings[consul]</span></tt></blockquote>\n</div>\n<div id=\"database\">\n<h4>DATABASE</h4>\n<p>You can read your settings dynamically form a database if you activate\nthe <tt>DYNAMIC_SETTINGS</tt> special setting with the <tt>database</tt> backend\n(uses <a href=\"http://docs.sqlalchemy.org/\" rel=\"nofollow\">sqlalchemy</a> library)</p>\n<pre><span class=\"n\">SIMPLE_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'database'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sqlalchemy.url'</span><span class=\"p\">:</span> <span class=\"s1\">'sqlite:///:memory:'</span><span class=\"p\">,</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\nTo install with database dependencies use: <tt>pip install <span class=\"pre\">simple-settings[database]</span></tt></blockquote>\n</div>\n<div id=\"aws-s3\">\n<h4>AWS S3</h4>\n<p>You can read your settings dynamically form a AWS S3 bucket if you activate\nthe <tt>DYNAMIC_SETTINGS</tt> special setting with the <tt>s3</tt> backend\n(uses <a href=\"http://boto3.readthedocs.io/en/latest/\" rel=\"nofollow\">boto3</a> library)</p>\n<pre><span class=\"n\">SIMPLE_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'s3'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'bucket_name'</span><span class=\"p\">:</span> <span class=\"s1\">'simple-settings'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'region'</span><span class=\"p\">:</span> <span class=\"s1\">'us-east-1'</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\nTo install with s3 dependencies use: <tt>pip install <span class=\"pre\">simple-settings[s3]</span></tt></blockquote>\n</div>\n<div id=\"memcached\">\n<h4>Memcached</h4>\n<p>You can read your settings dynamically with memcached if you activate\nthe <tt>DYNAMIC_SETTINGS</tt> special setting with the <tt>memcached</tt> backend\n(uses <a href=\"https://pymemcache.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">pymemcached</a> library)</p>\n<pre><span class=\"n\">SIMPLE_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'memcached'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">11211</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\nTo install with memcached dependencies use: <tt>pip install <span class=\"pre\">simple-settings[memcached]</span></tt></blockquote>\n</div>\n</div>\n</div>\n<div id=\"utils\">\n<h2>Utils</h2>\n<h2 id=\"settings-stub\"><span class=\"section-subtitle\">Settings Stub</span></h2>\n<p>A simple context manager (and decorator) class useful in tests which is\nnecessary to change some setting in the safe way.</p>\n<div id=\"context-manager-example\">\n<h3>Context Manager example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simple_settings.utils</span> <span class=\"kn\">import</span> <span class=\"n\">settings_stub</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">settings_stub</span><span class=\"p\">(</span><span class=\"n\">SOME_SETTING</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SOME_SETTING</span> <span class=\"o\">==</span> <span class=\"s1\">'foo'</span>\n<span class=\"k\">assert</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SOME_SETTING</span> <span class=\"o\">==</span> <span class=\"s1\">'bar'</span>\n</pre>\n</div>\n<div id=\"decorator-example\">\n<h3>Decorator example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simple_settings.utils</span> <span class=\"kn\">import</span> <span class=\"n\">settings_stub</span>\n\n\n<span class=\"nd\">@settings_stub</span><span class=\"p\">(</span><span class=\"n\">SOME_SETTING</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_some_setting</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SOME_SETTING</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">get_some_setting</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'foo'</span>\n<span class=\"k\">assert</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SOME_SETTING</span> <span class=\"o\">==</span> <span class=\"s1\">'bar'</span>\n</pre>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced Usage</h2>\n<div id=\"custom-strategy\">\n<h3>Custom Strategy</h3>\n<p>To implement a custom strategy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SettingsCustomStrategy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    See `/simple_settings/strategies` for sample strategies (e.g. python, json, cfg)\n    \"\"\"</span>\n\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">add_strategy</span><span class=\"p\">(</span><span class=\"n\">SettingsCustomStrategy</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"custom-dynamic-settings-reader\">\n<h3>Custom Dynamic Settings Reader</h3>\n<p>You can easily create your own dynamic settings reader. To do that you need to\ncreate a class than inherit from <tt>simple_settings.dynamic_settings.base.BaseReader</tt>\nand implement <tt>_get</tt> and <tt>_set</tt> methods, f.ex:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_settings.dynamic_settings.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseReader</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Reader</span><span class=\"p\">(</span><span class=\"n\">BaseReader</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n</pre>\n<p>To use it, just configure <tt>SIMPLE_SETINGS</tt> special setting with the full path\nof the reader, f.ex:</p>\n<pre><span class=\"s1\">'SIMPLE_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DYNAMIC_SETTINGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'backend'</span><span class=\"p\">:</span> <span class=\"s1\">'path.of.module.ClassName'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Any other config of dynamic settings will be pass to reader backend on argument <tt>conf</tt></p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>[0.19.1] - 2019-10-21</h3>\n<ul>\n<li>Load dynamic settings reader with both ways, full class path and module path\n(assuming the reader class is called <tt>Reader</tt>)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>[0.19.0] - 2019-10-18</h3>\n<ul>\n<li>Change import dynamic reader mechanism to using full class path with dot notation</li>\n<li>Update several dependencies</li>\n<li><tt>json.loads</tt> of <tt>REQUIRED_SETTINGS_TYPES</tt> now converts and validate lists</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>[0.18.0] - 2019-07-14</h3>\n<ul>\n<li>Fix <tt>TypeError</tt> on <tt>jsonpickle.decode</tt> when <cite>auto_casting</cite> is True and\ndynamic backend returns None.</li>\n<li>Raise exception containing <tt>settings_file</tt> information when an error occurs\nin <tt>strategy.load_settings_file</tt> call from <tt>_load_settings_pipeline</tt>.</li>\n<li>If dynamic settings is enabled, query first the dynamic backend before\nraising an AttributeError.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>[0.17.0] - 2019-07-10</h3>\n<ul>\n<li>Allow settings to be loaded from environment variables via <tt>.environ</tt> or <tt>PREFIX_.environ</tt></li>\n<li>Allow <tt>LazySettings.strategies</tt> to be easily overridden.</li>\n<li>Using <tt>strtobool</tt> from standard library on <tt>Required Settings Type</tt> feature.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>[0.16.0] - 2019-02-23</h3>\n<ul>\n<li><tt>json.loads</tt> as new <tt>REQUIRED_SETTINGS_TYPES</tt></li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>[0.15.0] - 2019-02-23</h3>\n<ul>\n<li>Enforce ordering of special settings being applied</li>\n<li>Dynamic settings behaviors with <tt>memcached</tt>.</li>\n<li>Fix <tt>TypeError</tt> on load settings by YAML file with a relative path</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>[0.14.0] - 2019-01-31</h3>\n<ul>\n<li>Required not none special setting</li>\n<li>Required types special setting and type conversion</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>[0.13.0] - 2018-03-28</h3>\n<ul>\n<li>Dynamic settings behaviors with <tt>AWS S3</tt>.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>[0.12.1] - 2017-10-27</h3>\n<ul>\n<li>Fix dynamic settings read behavior to ignore only <tt>None</tt> values and not <tt>zeros</tt> values ( <a href=\"https://github.com/drgarcia1986/simple-settings/issues/68\" rel=\"nofollow\">#68</a>)</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>[0.12.0] - 2017-03-07</h3>\n<ul>\n<li>Load settings from <em>toml</em> files.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>[0.11.0] - 2017-02-17</h3>\n<ul>\n<li>Autoconfigure python logging with <tt>CONFIGURE_LOGGING</tt> <em>special\nsetting</em>.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>[0.10.0] - 2016-10-28</h3>\n<ul>\n<li>Support configuring dynamic backends with an optional <em>prefix</em>.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>[0.9.1] - 2016-09-15</h3>\n<ul>\n<li><tt>configure</tt> method now works even called before the LazySettings\nsetup.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>[0.9.0] - 2016-08-12</h3>\n<ul>\n<li><tt>configure</tt> method now update settings in dynamic settings.</li>\n<li>On get setting value in dynamic setting update local settings with\nthis value.</li>\n<li>Auto casting value in dynamic storage to using complex types.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>[0.8.1] - 2016-06-04</h3>\n<ul>\n<li>Fix instalation with <tt>database</tt> extra requires.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>[0.8.0] - 2016-06-04</h3>\n<ul>\n<li>Better <tt>ImportError</tt> message if using a dynamic reader without your\nlib dependencies.</li>\n<li>Refactor in Settings Stub.</li>\n<li>Dynamic settings behaviors with <tt>SQLAlchemy</tt> (<tt>database</tt>\nbackend).</li>\n<li>Load settings of <em>json</em> files.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>[0.7.0] - 2016-06-02</h3>\n<ul>\n<li>Nice python <em>REPR</em> for <em>LazySettings</em> objects.</li>\n<li>Dynamic settings behaviors with <tt>Redis</tt>.</li>\n<li>Dynamic settings behaviors with <tt>Consul</tt>.</li>\n<li>Generate package with python wheel.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>[0.6.0] - 2016-05-17</h3>\n<ul>\n<li>Some refactors.</li>\n<li>Determine settings files and modules directly in LazySettings object\n(to avoid use env or command line argument).</li>\n<li><tt>configure</tt> method to update settings.</li>\n<li>Use <tt>safe_load</tt> instead <tt>load</tt> in yaml strategy.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>[0.5.0] - 2016-02-03</h3>\n<ul>\n<li>Some refactors.</li>\n<li>Load settings of <em>yaml</em> files.</li>\n<li>New <tt>SIMPLE_SETTINGS</tt> environment variable.</li>\n<li>New <tt><span class=\"pre\">--simple-settings</span></tt> command line arg.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>[0.4.0] - 2016-01-03</h3>\n<ul>\n<li>Lazy settings load.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>[0.3.1] - 2015-07-23</h3>\n<ul>\n<li>Avoid to load python modules (as settings) in python files (with\nthis, fix <tt>deepcopy</tt> bug in <tt>as_dict()</tt> method).</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>[0.3.0] - 2015-07-19</h3>\n<ul>\n<li>Deepcopy in <tt>as_dict</tt> method to anticipate unexpected changes.</li>\n<li>Special Settings Behaviors.<ul>\n<li>Override settings values by environment.</li>\n<li>Required settings validation.</li>\n</ul>\n</li>\n<li>Remove default behavior of override settings values by environment\n(now it\u2019s a special settings).</li>\n<li>Settings Stub (useful for tests)</li>\n<li>Change bahavior of settings <tt>__getattr__</tt> (before may raise\n<tt>KeyError</tt> if simple-settings do not locate the setting, now raise\n<tt>AttributeError</tt>)</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3>[0.2.0] - 2015-06-19</h3>\n<ul>\n<li>Load multiple settings separated by comma (like a pipeline).</li>\n<li>Load settings of <em>cfg</em> files.</li>\n<li>Filter python module attributes to read only user settings.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3>[0.1.1] - 2015-05-19</h3>\n<ul>\n<li>Fix parser_args error if using simple-settings with others command\nline arguments.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3>[0.1.0] - 2015-05-14</h3>\n<ul>\n<li>First release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6008965, "releases": {"0.0.0": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "425a0110b8546cb7c2df7e7d42648494", "sha256": "2db3a02486820ac2a85b0a0a36009643f24b3d8849a164255ef2eb25d174e14c"}, "downloads": -1, "filename": "simple-settings-0.1.0.zip", "has_sig": false, "md5_digest": "425a0110b8546cb7c2df7e7d42648494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4431, "upload_time": "2015-05-14T03:31:58", "upload_time_iso_8601": "2015-05-14T03:31:58.456513Z", "url": "https://files.pythonhosted.org/packages/a3/1b/ad886d4bbf7285960801cd979a808a546f7d006c07c1b24c8a0cd9875a81/simple-settings-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "82294b626fcfc12dce447b6d97062d32", "sha256": "e911f455fd55bcd7e5d19c41573b21051fd10c1e1f1197d788146087a8438829"}, "downloads": -1, "filename": "simple-settings-0.1.1.tar.gz", "has_sig": false, "md5_digest": "82294b626fcfc12dce447b6d97062d32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2113, "upload_time": "2015-05-19T22:13:51", "upload_time_iso_8601": "2015-05-19T22:13:51.434506Z", "url": "https://files.pythonhosted.org/packages/2b/a4/5fade93d825cae9e3c6ee943fd5beacff223e1be5d9d20d30fea41bf0492/simple-settings-0.1.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "0d7de4532bb8224599bd7855c4b9055f", "sha256": "3023aa7cf2e7867af23be6f1c15650e147e75a7a0cd447eb2574bd2ad05cc496"}, "downloads": -1, "filename": "simple_settings-0.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0d7de4532bb8224599bd7855c4b9055f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13129, "upload_time": "2016-10-29T00:17:16", "upload_time_iso_8601": "2016-10-29T00:17:16.825201Z", "url": "https://files.pythonhosted.org/packages/25/a8/b031582d76ed51f9a0236a80b1d9e6aece4664de92950b2a79bb30442299/simple_settings-0.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b77a2507ef70321c39937626e629bbf", "sha256": "c904e85348b389131888d9e271fb57cf70125f73f8f04e34368d71e002f6db04"}, "downloads": -1, "filename": "simple-settings-0.10.0.tar.gz", "has_sig": false, "md5_digest": "8b77a2507ef70321c39937626e629bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6822, "upload_time": "2016-10-29T00:17:13", "upload_time_iso_8601": "2016-10-29T00:17:13.488377Z", "url": "https://files.pythonhosted.org/packages/f7/90/5b382e31f396954572469eb57f67724c9f7133420fe7166d1d6a21cc12ad/simple-settings-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "b64a29f28e53136d0d85773aae709da3", "sha256": "e289edcf970f30d95c3c015cf432235e868a0c013961aa2a760664362546f992"}, "downloads": -1, "filename": "simple_settings-0.11.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b64a29f28e53136d0d85773aae709da3", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13214, "upload_time": "2017-02-18T00:36:21", "upload_time_iso_8601": "2017-02-18T00:36:21.934515Z", "url": "https://files.pythonhosted.org/packages/fc/72/94b0ab9b6f2a33afe78649278a80911d13dbbfec9c66147d3678c3f1343a/simple_settings-0.11.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85c52ce2199828158902d87fe97eff6f", "sha256": "89d77a79b156b0fcaa9d0da92fcaf310a085653cbeb5753d3cf555329bbb9a57"}, "downloads": -1, "filename": "simple-settings-0.11.0.tar.gz", "has_sig": false, "md5_digest": "85c52ce2199828158902d87fe97eff6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7688, "upload_time": "2017-02-18T00:36:19", "upload_time_iso_8601": "2017-02-18T00:36:19.274242Z", "url": "https://files.pythonhosted.org/packages/10/16/143fbcbaff53fbf826087e0f62eb098601b4d6ccea9d0c9216d1fc7bfb5f/simple-settings-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "ae4371d83485be9766fe893ba97acd8c", "sha256": "9b2e7e7039782e7a040386be9d6112aea78572f3796531e719d67fe23297062e"}, "downloads": -1, "filename": "simple_settings-0.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae4371d83485be9766fe893ba97acd8c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13719, "upload_time": "2017-03-07T13:34:18", "upload_time_iso_8601": "2017-03-07T13:34:18.557651Z", "url": "https://files.pythonhosted.org/packages/64/56/b9382975501fd0451cd5cc51de849bbd2bdbf42899c7eb8b403ee5baf2b7/simple_settings-0.12.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "541fb612f1455604532bcfa5bc36a91d", "sha256": "eea71f3da8baa7c98123f6f582169ff188a97f48435b7a20d16f1e21f08721cb"}, "downloads": -1, "filename": "simple-settings-0.12.0.tar.gz", "has_sig": false, "md5_digest": "541fb612f1455604532bcfa5bc36a91d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7875, "upload_time": "2017-03-07T13:34:16", "upload_time_iso_8601": "2017-03-07T13:34:16.409681Z", "url": "https://files.pythonhosted.org/packages/1a/ce/4d1e1261755679ac39508698d5da78b00a3e4b61d875d3e2f6eea6f0a993/simple-settings-0.12.0.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "0ae20ce7387224ac57a1c0af1378e347", "sha256": "c384685c8f070f16a49f75806da4a45ffccf3d9316d2fd3e201ce108629bbf17"}, "downloads": -1, "filename": "simple_settings-0.12.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ae20ce7387224ac57a1c0af1378e347", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22326, "upload_time": "2017-10-27T17:23:07", "upload_time_iso_8601": "2017-10-27T17:23:07.372625Z", "url": "https://files.pythonhosted.org/packages/70/2e/23bfea8de6f4e3ed05f561ab36ff1116df0dedaf0bbd991aa404808c16ec/simple_settings-0.12.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8efa3e5f81835cc76e159794f741d758", "sha256": "1d8bf51a4f1a25add691c0651dcdcbadb271048a520d145294ffcb25816e99fc"}, "downloads": -1, "filename": "simple-settings-0.12.1.tar.gz", "has_sig": false, "md5_digest": "8efa3e5f81835cc76e159794f741d758", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16010, "upload_time": "2017-10-27T17:23:09", "upload_time_iso_8601": "2017-10-27T17:23:09.081010Z", "url": "https://files.pythonhosted.org/packages/79/80/0a76a3f3fd1913bd2842ae5dfa75e3a057a29f374b2ab170d09fdb8028a9/simple-settings-0.12.1.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "2d9845cff7f5ab09b8850338c040252f", "sha256": "b47bedc64eedade60553ca2125c9cbd60610077ae216a17679611c06fc93a8e1"}, "downloads": -1, "filename": "simple_settings-0.13.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d9845cff7f5ab09b8850338c040252f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23508, "upload_time": "2018-03-28T14:54:24", "upload_time_iso_8601": "2018-03-28T14:54:24.476259Z", "url": "https://files.pythonhosted.org/packages/d7/15/e4d340392577d2ad53396aca76990d95c25878f859c4b509094128bb2873/simple_settings-0.13.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "362340da5ef6f233ae67ea2fdd425d2a", "sha256": "cdf6cbdbb4561fa67c0041dedf89c0ff335338c0a018f0bcbabf91ae087d6def"}, "downloads": -1, "filename": "simple-settings-0.13.0.tar.gz", "has_sig": false, "md5_digest": "362340da5ef6f233ae67ea2fdd425d2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17012, "upload_time": "2018-03-28T14:54:25", "upload_time_iso_8601": "2018-03-28T14:54:25.661664Z", "url": "https://files.pythonhosted.org/packages/ec/62/5aaef8214b3bdc636f70c010ccd56e912086529391c0e1240be967c938ad/simple-settings-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "156afe476c8d7ae105d70eb88289a79d", "sha256": "5691ee442841e40e6232258c7144fdd5989b4a712420c1760ebe6e80bcc15eea"}, "downloads": -1, "filename": "simple_settings-0.14.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "156afe476c8d7ae105d70eb88289a79d", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19052, "upload_time": "2019-01-31T13:58:50", "upload_time_iso_8601": "2019-01-31T13:58:50.588746Z", "url": "https://files.pythonhosted.org/packages/4a/91/fead87f8ec6ae9743f173475eaaa504ae0eecceb0fd822fca2b9bcae0a56/simple_settings-0.14.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "191b95acfc2565d1ccb1f1d856dd4f87", "sha256": "d2520bb38d9f52a61e15e63a9fc463330c06e5d4acb7c2efff6fecfdd5f881d7"}, "downloads": -1, "filename": "simple-settings-0.14.0.tar.gz", "has_sig": false, "md5_digest": "191b95acfc2565d1ccb1f1d856dd4f87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20309, "upload_time": "2019-01-31T13:58:48", "upload_time_iso_8601": "2019-01-31T13:58:48.174606Z", "url": "https://files.pythonhosted.org/packages/cb/9d/37abb1db89cdeb86f71fd87abc3b5b5df06f610847e97e4c4c15c2995eac/simple-settings-0.14.0.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "fae731575b422f025b4864838cb139a3", "sha256": "6225e71b13498dd06a95673da905e64ce0dd2857eb2da717d72d0ee97fb90f36"}, "downloads": -1, "filename": "simple_settings-0.15.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fae731575b422f025b4864838cb139a3", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19961, "upload_time": "2019-02-23T14:13:23", "upload_time_iso_8601": "2019-02-23T14:13:23.788924Z", "url": "https://files.pythonhosted.org/packages/7c/d7/9f080425986344ae03add97229114d27f1768b4d8dccfa424cd1675cbaf0/simple_settings-0.15.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f5866ac1c0885e9043158bfc00d6ba0", "sha256": "9e51f798a5e912b7c80994adb39a02458573c54adebb280eed33ffecae1b7714"}, "downloads": -1, "filename": "simple-settings-0.15.0.tar.gz", "has_sig": false, "md5_digest": "9f5866ac1c0885e9043158bfc00d6ba0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20868, "upload_time": "2019-02-23T14:13:19", "upload_time_iso_8601": "2019-02-23T14:13:19.788870Z", "url": "https://files.pythonhosted.org/packages/40/81/61a78ca1e5f22e450535768d12ec7aa6ff66099615e2764af5dfd11ef7e8/simple-settings-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "834dd8693bc12f14f072b1af627d90aa", "sha256": "bb77c200a2a4b64e4e0f8f2ff17a080aa3da30058aeebf461c3e178b1ae0e7e2"}, "downloads": -1, "filename": "simple_settings-0.16.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "834dd8693bc12f14f072b1af627d90aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20099, "upload_time": "2019-02-23T15:24:03", "upload_time_iso_8601": "2019-02-23T15:24:03.118511Z", "url": "https://files.pythonhosted.org/packages/95/d0/fd94b495a418ebcc2c911414fc1424bce43694f2f41f99941a457a34c3f0/simple_settings-0.16.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b1dcc01f2d953b4739c73e8a41a0a71", "sha256": "ff35c9fc4b4f2be1a708ff48fdaf2dd56c103d087c8971858db329caed69ff1a"}, "downloads": -1, "filename": "simple-settings-0.16.0.tar.gz", "has_sig": false, "md5_digest": "9b1dcc01f2d953b4739c73e8a41a0a71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19443, "upload_time": "2019-02-23T15:24:04", "upload_time_iso_8601": "2019-02-23T15:24:04.770725Z", "url": "https://files.pythonhosted.org/packages/96/d0/510639c77d0de6339cf5d711e852597b3f7a40a38847470507fda371c7c0/simple-settings-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "ee54eeb4cfc74064fd5985ca84091ca1", "sha256": "1bf83881bb3d9e4eeade21935c8bb6df522be4177a08c5ecc142a6659a0d4a55"}, "downloads": -1, "filename": "simple_settings-0.17.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee54eeb4cfc74064fd5985ca84091ca1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 20971, "upload_time": "2019-07-10T18:30:04", "upload_time_iso_8601": "2019-07-10T18:30:04.938600Z", "url": "https://files.pythonhosted.org/packages/29/3c/ad11701756e3500c82db4ab9ee93cb4da03ac11a2505b4c758c3840a5241/simple_settings-0.17.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "242884dc8e5f9e674756b19a6777d8c6", "sha256": "2f89194e75592efa711016a65bdfc58f3317254ad2264f6f1a8c9771000edc84"}, "downloads": -1, "filename": "simple-settings-0.17.0.tar.gz", "has_sig": false, "md5_digest": "242884dc8e5f9e674756b19a6777d8c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23003, "upload_time": "2019-07-10T18:30:01", "upload_time_iso_8601": "2019-07-10T18:30:01.731373Z", "url": "https://files.pythonhosted.org/packages/4f/cd/23fc760a36b03f6e65455efd1ef7bbf9145de815912cf3358f7bd8f82613/simple-settings-0.17.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "ad6a7232e513f99a52e11a9e9ea40acb", "sha256": "1e4e2c573f0cca021b1006579d34c67b7b67d58d25440cf06f0b0515fd3dae17"}, "downloads": -1, "filename": "simple_settings-0.18.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad6a7232e513f99a52e11a9e9ea40acb", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 21209, "upload_time": "2019-07-15T00:18:47", "upload_time_iso_8601": "2019-07-15T00:18:47.314528Z", "url": "https://files.pythonhosted.org/packages/8d/46/4cabd968457d32c10e4373457ddf37bfe9ed0b412a337eac2f6e1776199d/simple_settings-0.18.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2ae95666360cc88a5c666fb1ecf2562", "sha256": "030efdb7928ac04ebf3ff3967fa37f2bd0ba29f69eeba3ce92d92696c6bc3281"}, "downloads": -1, "filename": "simple-settings-0.18.0.tar.gz", "has_sig": false, "md5_digest": "f2ae95666360cc88a5c666fb1ecf2562", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23743, "upload_time": "2019-07-15T00:18:23", "upload_time_iso_8601": "2019-07-15T00:18:23.478163Z", "url": "https://files.pythonhosted.org/packages/40/fa/50eb93e74acdd917bba37c52d48a25746a26fb63a3a076059d75e8c308f7/simple-settings-0.18.0.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "adb02d29fc93311e4f5a364d7d0005c8", "sha256": "7d5600138d16a0d208ec316a39d89c78be0885d0bcb5b461bfa7d9d3f0a402ba"}, "downloads": -1, "filename": "simple_settings-0.19.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "adb02d29fc93311e4f5a364d7d0005c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21762, "upload_time": "2019-10-18T16:57:09", "upload_time_iso_8601": "2019-10-18T16:57:09.130802Z", "url": "https://files.pythonhosted.org/packages/ec/e4/6ccb47cdd76ed33e6c8e2e6bbae25cab76169b35537eebe9cea88adc9e17/simple_settings-0.19.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "227113a176293ef28dd939d6ecdcbc1b", "sha256": "1828bbede8f1d117b568a457296c8b44e14e26894b52d463f7e0947397d89b02"}, "downloads": -1, "filename": "simple-settings-0.19.0.tar.gz", "has_sig": false, "md5_digest": "227113a176293ef28dd939d6ecdcbc1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21356, "upload_time": "2019-10-18T16:57:12", "upload_time_iso_8601": "2019-10-18T16:57:12.355667Z", "url": "https://files.pythonhosted.org/packages/86/9f/512d8614c8e72d6cee0517c8627d4968ea0f493aa9411f29f95fc60a6c09/simple-settings-0.19.0.tar.gz", "yanked": false}], "0.19.1": [{"comment_text": "", "digests": {"md5": "fcddee217ff67850ecac9e1a77cd056e", "sha256": "e399aa5812b1f8c3d8de989c66f7cac893fb3cd4bca412fcd9dbfbfdd38b7f6f"}, "downloads": -1, "filename": "simple_settings-0.19.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fcddee217ff67850ecac9e1a77cd056e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21991, "upload_time": "2019-10-21T19:51:53", "upload_time_iso_8601": "2019-10-21T19:51:53.735961Z", "url": "https://files.pythonhosted.org/packages/2d/a4/2454129fe599401e3977b3e246fc41918b3e63f1a48869b5541c54ef2b44/simple_settings-0.19.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c1b26024765db6fd21d46bd303cbd7c", "sha256": "6179c61bdc3daf5b7a5fd5dcc4da5cf70f92d65bd64662f75cdef5ae810f2b5c"}, "downloads": -1, "filename": "simple-settings-0.19.1.tar.gz", "has_sig": false, "md5_digest": "9c1b26024765db6fd21d46bd303cbd7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21617, "upload_time": "2019-10-21T19:51:56", "upload_time_iso_8601": "2019-10-21T19:51:56.450969Z", "url": "https://files.pythonhosted.org/packages/33/3e/c310041e108932c808068c7d7c078ac6ab2385aff8abc22ede1eef6b2da9/simple-settings-0.19.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b854ecbacca3af9205872e0e39b4e65b", "sha256": "8f0d216e69eb00dcdf891a9dcf7a0843e64887074531cb310113f4f7faf53d11"}, "downloads": -1, "filename": "simple-settings-0.2.0.zip", "has_sig": false, "md5_digest": "b854ecbacca3af9205872e0e39b4e65b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6280, "upload_time": "2015-06-20T01:12:33", "upload_time_iso_8601": "2015-06-20T01:12:33.724564Z", "url": "https://files.pythonhosted.org/packages/11/12/4dc7f8f0a8ec9e9a6deab9c2b879ba24bd95746543d1d8dcc66063cd0126/simple-settings-0.2.0.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5bb4a01b0df8f53b51453ba5dc15e5e1", "sha256": "7306a2a8375576c94038f388428aa89d02fbf2476117189724549bc8f7cd3471"}, "downloads": -1, "filename": "simple-settings-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5bb4a01b0df8f53b51453ba5dc15e5e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3574, "upload_time": "2015-07-19T20:36:25", "upload_time_iso_8601": "2015-07-19T20:36:25.529778Z", "url": "https://files.pythonhosted.org/packages/c8/55/3d73fad33070e295fc2f76a67d1b9921dd02c537744f8e0c57ec8739a5f3/simple-settings-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9a03138472e9f600d079296ae6ccd54d", "sha256": "0b7376aff44d7813e869333fe2bccd589969a4aaeb6df7e30d36b3c4c434af69"}, "downloads": -1, "filename": "simple-settings-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9a03138472e9f600d079296ae6ccd54d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3604, "upload_time": "2015-07-24T01:08:23", "upload_time_iso_8601": "2015-07-24T01:08:23.630031Z", "url": "https://files.pythonhosted.org/packages/56/44/d856319033bd88af6982ce271a8300f856b71511d36a70ab73c19b74a6f5/simple-settings-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "fe3979e03421ba8a6d0d6ce49a626229", "sha256": "9eb3ecbc2f0952098e9d186173552eaf9d580806b02d042ded7479ca455ae591"}, "downloads": -1, "filename": "simple-settings-0.4.0.tar.gz", "has_sig": false, "md5_digest": "fe3979e03421ba8a6d0d6ce49a626229", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3642, "upload_time": "2016-01-03T20:55:44", "upload_time_iso_8601": "2016-01-03T20:55:44.798067Z", "url": "https://files.pythonhosted.org/packages/0b/b6/0b353c49f34588bf0721e7dfeb1630c614b1f9419ffbddc1fd5f1f3243fb/simple-settings-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "ac3cd1009608ec82db2ea4d5a25d0dc0", "sha256": "4c4e103a48ee1f67a4bb155aa19f6674dbcab7ed5b2c08fffca125de87a07521"}, "downloads": -1, "filename": "simple-settings-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ac3cd1009608ec82db2ea4d5a25d0dc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3964, "upload_time": "2016-02-03T13:03:47", "upload_time_iso_8601": "2016-02-03T13:03:47.291661Z", "url": "https://files.pythonhosted.org/packages/48/35/a4a9f6963b5b1ccfed388d020f60a71839bf603ce153c4866370576305e7/simple-settings-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e98aa7b57a4389480f96e4bc06ba3598", "sha256": "10307a60dc6f33ea38770ac4e9d04fc60b6da2be75eba3dcf87372ed95c55a63"}, "downloads": -1, "filename": "simple-settings-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e98aa7b57a4389480f96e4bc06ba3598", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4233, "upload_time": "2016-05-17T17:36:51", "upload_time_iso_8601": "2016-05-17T17:36:51.278377Z", "url": "https://files.pythonhosted.org/packages/95/5e/0c47f462b10257ede831a9a1641ae1e3526282a6e252caa63a40e22322a7/simple-settings-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "a72a8c6844ac2a515cdbc72280659f0f", "sha256": "01d4ee44ea21f48e5730ed83bd160380f530d0fa695eabda70818ddec85dbaf8"}, "downloads": -1, "filename": "simple_settings-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a72a8c6844ac2a515cdbc72280659f0f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 11406, "upload_time": "2016-06-02T23:55:41", "upload_time_iso_8601": "2016-06-02T23:55:41.134505Z", "url": "https://files.pythonhosted.org/packages/68/ae/bc7106b552e825e9e83eb2c175f6500f776fb3b941d939012a1657f5e60d/simple_settings-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9918cbb9611d52e7f3b52b11a213975c", "sha256": "f8f1b71ac9aa5020170dae563c580bf3e732eae3d9b9ca23cb716e6ff64b9cc7"}, "downloads": -1, "filename": "simple-settings-0.7.0.tar.gz", "has_sig": false, "md5_digest": "9918cbb9611d52e7f3b52b11a213975c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6164, "upload_time": "2016-06-02T23:55:34", "upload_time_iso_8601": "2016-06-02T23:55:34.970802Z", "url": "https://files.pythonhosted.org/packages/43/7e/eede81e5bbf1c4fb332a8a0d951b321335c99b6148072ef86c4b03b882df/simple-settings-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "0ca891a3d69a61d057d14062d8d18bed", "sha256": "cb2cbf8f714fe74ea9fecf47b66bd21d628ab33a4272abfb5cd6111dd618b2b0"}, "downloads": -1, "filename": "simple_settings-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ca891a3d69a61d057d14062d8d18bed", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 12974, "upload_time": "2016-06-04T16:11:51", "upload_time_iso_8601": "2016-06-04T16:11:51.100747Z", "url": "https://files.pythonhosted.org/packages/3d/82/472f4c1d2e5bedc98b982c7b3957efbea13beb4f984f7a08434b1cf9646a/simple_settings-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15f094ebc48367c70aed2add616e7cc2", "sha256": "89d96f1e8aa19b7844446a1ebd34dfe56081878add1e228dff0f7676a065da0a"}, "downloads": -1, "filename": "simple-settings-0.8.0.tar.gz", "has_sig": false, "md5_digest": "15f094ebc48367c70aed2add616e7cc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6920, "upload_time": "2016-06-04T16:11:46", "upload_time_iso_8601": "2016-06-04T16:11:46.644197Z", "url": "https://files.pythonhosted.org/packages/be/9b/c80ea27ea3fd24558b5869234f5fa21d7322f1ea2079b347967b0d671e17/simple-settings-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "a4cf8579c34b6d4504cbe25f6dd303b6", "sha256": "0cbdd9168d1e99f768c66fd0587324298c3e97c7c22322d69a8b4e3ddb38dcad"}, "downloads": -1, "filename": "simple_settings-0.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4cf8579c34b6d4504cbe25f6dd303b6", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13003, "upload_time": "2016-06-05T00:10:43", "upload_time_iso_8601": "2016-06-05T00:10:43.958444Z", "url": "https://files.pythonhosted.org/packages/59/dc/7b10ae93ae1ba04e32438524b937142c15d36da63abc9e66b30a707dd129/simple_settings-0.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "228b10b1fd6de1c7152e50a3f59ef6f6", "sha256": "fb89e235b2a6200f7b4b108d37878f5d7b7b1631e11ce9d3da2b6f4fd23ce833"}, "downloads": -1, "filename": "simple-settings-0.8.1.tar.gz", "has_sig": false, "md5_digest": "228b10b1fd6de1c7152e50a3f59ef6f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6935, "upload_time": "2016-06-05T00:10:39", "upload_time_iso_8601": "2016-06-05T00:10:39.481139Z", "url": "https://files.pythonhosted.org/packages/bf/a7/ec1647199430909c735ac2e31501b3f3b305c3bc59707fab2443c68150cd/simple-settings-0.8.1.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "f8843f64c45bd9dac89f585212db66f0", "sha256": "efe387e58f49988e51ed54300fe9dc329515192c9dc4b6e4f580947181390e99"}, "downloads": -1, "filename": "simple_settings-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f8843f64c45bd9dac89f585212db66f0", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13292, "upload_time": "2016-08-13T01:47:05", "upload_time_iso_8601": "2016-08-13T01:47:05.829148Z", "url": "https://files.pythonhosted.org/packages/8b/5b/820018fae691439cf89714e78c0af6975b4d7edd540e33ba29095c55f413/simple_settings-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3777673108b8022f8df2747d56b6ffb4", "sha256": "62942bc681caf89d9380fa39727d5df2039a38080193d0dafc92e0558f27f33c"}, "downloads": -1, "filename": "simple-settings-0.9.0.tar.gz", "has_sig": false, "md5_digest": "3777673108b8022f8df2747d56b6ffb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7206, "upload_time": "2016-08-13T01:47:03", "upload_time_iso_8601": "2016-08-13T01:47:03.173228Z", "url": "https://files.pythonhosted.org/packages/0a/23/9e6bd21e93be2b06d3dd37a734a2c481213ac2507f733bc6529a708a2eb3/simple-settings-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "0f261f9534a3dab2e89c7c481a529b3b", "sha256": "b8a4ca757ab583aa2a9f601ffe7c98834f1f9f9fc12480063d5373a3e4d39f4e"}, "downloads": -1, "filename": "simple_settings-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f261f9534a3dab2e89c7c481a529b3b", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 12823, "upload_time": "2016-09-16T02:21:50", "upload_time_iso_8601": "2016-09-16T02:21:50.885002Z", "url": "https://files.pythonhosted.org/packages/ce/36/544df2f437865273cfa773a543453d487078a15cf910e950253fe26931a6/simple_settings-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49e29d214d43a5d1165caaf683261342", "sha256": "a2c77398ece01506a6ba658e584f3e9cbc2e7c115dc2e920efff019a2c8d6c1b"}, "downloads": -1, "filename": "simple-settings-0.9.1.tar.gz", "has_sig": false, "md5_digest": "49e29d214d43a5d1165caaf683261342", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6605, "upload_time": "2016-09-16T02:21:48", "upload_time_iso_8601": "2016-09-16T02:21:48.010373Z", "url": "https://files.pythonhosted.org/packages/51/da/f416aa558ba2e6c3843d0e41910a7a06a17554950bb5f0790295fc5b22a6/simple-settings-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcddee217ff67850ecac9e1a77cd056e", "sha256": "e399aa5812b1f8c3d8de989c66f7cac893fb3cd4bca412fcd9dbfbfdd38b7f6f"}, "downloads": -1, "filename": "simple_settings-0.19.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fcddee217ff67850ecac9e1a77cd056e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21991, "upload_time": "2019-10-21T19:51:53", "upload_time_iso_8601": "2019-10-21T19:51:53.735961Z", "url": "https://files.pythonhosted.org/packages/2d/a4/2454129fe599401e3977b3e246fc41918b3e63f1a48869b5541c54ef2b44/simple_settings-0.19.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c1b26024765db6fd21d46bd303cbd7c", "sha256": "6179c61bdc3daf5b7a5fd5dcc4da5cf70f92d65bd64662f75cdef5ae810f2b5c"}, "downloads": -1, "filename": "simple-settings-0.19.1.tar.gz", "has_sig": false, "md5_digest": "9c1b26024765db6fd21d46bd303cbd7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21617, "upload_time": "2019-10-21T19:51:56", "upload_time_iso_8601": "2019-10-21T19:51:56.450969Z", "url": "https://files.pythonhosted.org/packages/33/3e/c310041e108932c808068c7d7c078ac6ab2385aff8abc22ede1eef6b2da9/simple-settings-0.19.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:09 2020"}