{"info": {"author": "Michael Henry", "author_email": "drmikehenry@drmikehenry.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Text Processing :: Filters", "Topic :: Utilities"], "description": "*******************************************************************************\n\"Progress Tee\" - an enhanced \"tee\" program with in-place overwriting of status.\n*******************************************************************************\n\n.. image:: https://travis-ci.org/drmikehenry/ptee.svg\n    :target: https://travis-ci.org/drmikehenry/ptee\n\n.. image:: https://img.shields.io/pypi/v/ptee.svg\n    :target: https://pypi.python.org/pypi/ptee\n\n.. image:: https://img.shields.io/pypi/status/ptee.svg\n    :target: https://pypi.python.org/pypi/ptee\n\n.. image:: https://img.shields.io/pypi/pyversions/ptee.svg\n    :target: https://pypi.python.org/pypi/ptee/\n\nIntroduction\n============\n\n``ptee`` (for \"Progress Tee\") is a console utility that builds upon the basic\nfunctionality provided by the standard Unix ``tee`` command.  It accepts lines\nof text from a running command (such as an invocation of ``make``) and displays\nthem to the console such that consecutive less-important lines are overwritten\nin-place, providing feedback regarding the progress of the overall operation\nwithout allowing the more-important lines (such as compiler warnings and errors)\nto scroll away and be overlooked.  In addition, as with standard ``tee``, a copy\nof the text from stdin may optionally be written verbatim to one or more output\nfiles.\n\nThese less-important lines are called \"context\" lines, as they provide context\nleading up to the important lines; the more-important lines are called \"regular\"\nlines.  Each new context overwrites previous context lines in-place on the\nconsole, forming a \"status\" line that stays put without scrolling.  When a\nregular line appears, the text composing the status line is kept (i.e., scrolled\nup) to provide context for the regular text.\n\nFor example, suppose an invocation of ``make`` generates the following output::\n\n  $ make\n  gcc -c -Wall -W -o file1.o file1.c\n  gcc -c -Wall -W -o file2.o file2.c\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n  gcc -c -Wall -W -o file3.o file3.c\n  gcc -c -Wall -W -o file4.o file4.c\n  gcc -c -Wall -W -o file5.o file5.c\n  gcc -o app file1.o file2.o file3.o file4.o file5.o\n\nThe compiler invocation lines (``gcc -c ...``) become uninteresting as soon as\nthe next line shows up, unless there are warnings or errors associated with that\ninvocation.  With ``ptee``, you can supply a regular expression to match these\n\"context\" lines to allow them to overwrite each other on the console.  Lines not\nmatching the regular expression will be displayed on a line of their own (along\nwith the previous context line, if any).  In the above example, the output would\nultimately look like this::\n\n  $ make 2>&1 | ptee --regex '^gcc'\n  gcc -c -Wall -W -o file2.o file2.c\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n\nThe ``2>&1`` in the above invocation redirects stderr to the same location as\nstdout, so that both stdout and stderr are piped into ``ptee``.  This is needed\nbecause gcc's diagnostic messages go to stderr by default.\n\nDuring the run of ``make``, each line of status will be written on top of the\nprevious line of status, providing continuous feedback while keeping the\ninteresting lines from scrolling too far off the screen.\n\nContext Levels\n==============\n\nContext lines may have an associated level, indicating their position in a\nhierarchy.  Levels are integers, starting at zero.  When a context line of\nlevel N is detected, the status line will be built of the most recent lines of\ncontext from levels zero through N, concatenated into a single status line.\nThis can be useful for retaining bigger-picture context information while\nmore detailed context information is coming in.\n\nFor example, consider a build system invoked with a script named ``buildall``,\nwhich generates the following output::\n\n  $ ./buildall\n  x86:\n  Building component1:\n  [compile] file1.o\n  [compile] file2.o\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n  [link] component1\n  Building component2:\n  [compile] file3.o\n  [link] component2\n  x86_64:\n  Building component3:\n  [compile] file4.o\n  [link] component3\n\nIn this build output, some components are being built, first for the x86\nplatform, then for the x86_64 platform.  This output has three levels of\ncontext hierarchy:\n\n- Level 0: the platform (``x86:`` or ``x86_64``);\n- Level 1: the component (e.g., ``Building component1``);\n- Level 2: the build step (e.g., ``[compile] source1``, ``[link] component3``).\n\nConsider the following shell script to invoke ``buildall``::\n\n  #!/bin/sh\n\n  ./buildall 2>&1 | ptee build.out \\\n      --level-regex 0 '^(x86|x86_64):' \\\n      --level-regex 1 '^Building ' \\\n      --level-regex 2 '^\\[.*\\]'\n\nThe filename ``build.out`` is passed to ``ptee`` such that a verbatim copy of\nthe build output will be recorded in the file ``build.out`` for possible future\nanalysis.  When running ``./ba``, the uninteresting context lines are stripped\naway, leaving only the regular lines (the warning message, in this case) and the\ncontext lines at each level leading up to each regular line::\n\n  $ ./ba\n  x86:\n  Building component1:\n  [compile] file2.c\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n\nMore text actually goes to the console for status and feedback, but it is\noverwritten by writing a carriage return (``\\r``) instead of a newline (``\\n``).\nBelow is the actual output, post-processed to show the carriage returns and the\nsubsequent overwriting taking place::\n\n  x86:\\r\n  x86:  Building component1:\\r\n  x86:  Building component1:  [compile] file1.o\\r\n  x86:  Building component1:  [compile] file2.o\\r\n                                               \\r\n  x86:\n  Building component1:\n  [compile] file2.o\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n  x86:  Building component1:  [link] component1\\r\n  x86:  Building component2:                   \\r\n  x86:  Building component2:  [compile] file3.o\\r\n  x86:  Building component2:  [link] component2\\r\n  x86_64:                                      \\r\n  x86_64:  Building component3:\\r\n  x86_64:  Building component3:  [compile] file4.o\\r\n  x86_64:  Building component3:  [link] component3\\r\n\nNotice that the status line that appears briefly during compilation of file1.c\ncontains all three levels of context line, and that the first two levels of\ncontext are the same when subsequently compiling file2.c, so that\nbigger-picture context persists longer in the status line::\n\n  x86:  Building component1:  [compile] file1.o\\r\n  x86:  Building component1:  [compile] file2.o\\r\n\nHeading lines\n=============\n\nIn addition to context lines, ``ptee`` supports the notion of \"heading\" line.\nThese lines do not contribute to the status line; instead, they are printed\nas-is on the console.  Unlike regular lines, however, no context lines are\nprinted before a heading line.  This can be useful for long lines that would be\nawkward if prepended to the status line.  Consider a second example with the\nfollowing modified output::\n\n  $ ./buildall2\n  ------------------------------ x86 ------------------------------\n  Building component1:\n  [compile] file1.o\n  [compile] file2.o\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n  [link] component1\n  Building component2:\n  [compile] file3.o\n  [link] component2\n  ------------------------------ x86_64 ---------------------------\n  Building component3:\n  [compile] file4.o\n  [link] component3\n\nThe banner lines starting with ``------`` are too long to conveniently prepend\nto the status line.  Instead, the ``ba2`` script treats them as headings::\n\n  #!/bin/sh\n\n  ./buildall2 2>&1 | ptee build.out \\\n    --heading-regex '^-----' \\\n    --level-regex 1 '^Building ' \\\n    --level-regex 2 '^\\[.*\\]'\n\nLeading to this output::\n\n  $ ./ba2\n  ------------------------------ x86 ------------------------------\n  Building component1:\n  [compile] file2.o\n  file2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n  ------------------------------ x86_64 ---------------------------\n\nSkipping lines\n==============\n\nSometimes input contains lines that should be skipped entirely, rather than\nbeing treated as status lines.  An example might include spurious compiler\nwarnings that can't easily be suppressed.  The switch\n``--skip-regex COUNT SKIP_REGEX`` provides a way to skip one or more lines that\nmatch a given pattern.  For example, given the following input::\n\n  [compile] file1.o\n  system-header.h:999:18: warning: this is a spurious message\n  in argument 2 of function `badly_written(x, y)`\n  --------------------------------------------^\n  [compile] file2.o\n\nTo skip the three lines of spurious warning, use this invocation::\n\n  ptee --skip-regex 3 system-header.h:999:18:\n\nThis effectively transforms the input to::\n\n  [compile] file1.o\n  [compile] file2.o\n\nStripping overwritten lines\n===========================\n\nWhen writing to the console, status lines are continuously written and\noverwritten to provide feedback on overall progress.  When the operation\ncompletes, only the important lines of text remain.  But if this console output\nwere redirected to a file or piped into another program, the illusion of the\nstatus lines being overwritten would fall apart, because all of the status lines\nwould be still be present in the output.  Therefore, when not writing to the\nconsole, ``ptee`` strips out any status lines that would be overwritten.  This\ndefault behavior can be overridden via the ``--strip`` option (to force the\nstatus to be removed even when writing to a console) and the ``--no-strip``\noption (to retain the status lines even when not writing to a console).  As an\nexample, the post-processed output shown above was generated something like\nthis::\n\n  ./buildall 2>&1 | ptee [switches] --no-strip | perl -0777 -pe 's/\\r/\\\\r\\n/g'\n\nPartial lines\n=============\n\nIn general, ptee processes whole lines of text.  But sometimes the input stream\nmay pause after a partial line, such as when a program displays a prompt to the\nuser and pauses for a response.  To allow the user to see such partial lines,\nptee by default will wait an amount of time controlled by the\n--partial-line-timeout switch; if the input stream stalls for longer than this\namount of time, the partial input will be displayed without further processing,\nand all future input up to the next newline will be immediately displayed.\nSetting the timeout value to zero disables the timeout feature.\n\nText encoding option\n====================\n\nBy default, text is assumed to be in UTF-8 format on stdin and stdout.  This\nmay be overridden using the ``--encoding`` option, e.g., for a hypothetical\nprogram that generates latin1 text::\n\n  generate-latin1-text | ptee --encoding latin1 --regex '<regular expression>'\n\nSee ``ptee --help`` for more information.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drmikehenry/ptee", "keywords": "progress tee in-place overwriting status", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ptee", "package_url": "https://pypi.org/project/ptee/", "platform": "", "project_url": "https://pypi.org/project/ptee/", "project_urls": {"Homepage": "https://github.com/drmikehenry/ptee"}, "release_url": "https://pypi.org/project/ptee/0.4.1/", "requires_dist": ["blessed (==1.17.0)", "six (==1.14.0)", "wcwidth (==0.1.8)", "attrs (==19.3.0) ; extra == 'dev'", "coverage (==5.0.3) ; extra == 'dev'", "entrypoints (==0.3) ; extra == 'dev'", "flake8-import-order (==0.18.1) ; extra == 'dev'", "flake8-polyfill (==1.0.2) ; extra == 'dev'", "flake8-quotes (==2.1.1) ; extra == 'dev'", "flake8 (==3.7.9) ; extra == 'dev'", "importlib-metadata (==1.4.0) ; extra == 'dev'", "mccabe (==0.6.1) ; extra == 'dev'", "more-itertools (==8.1.0) ; extra == 'dev'", "mypy-extensions (==0.4.3) ; extra == 'dev'", "mypy (==0.761) ; extra == 'dev'", "packaging (==20.0) ; extra == 'dev'", "pep8-naming (==0.9.1) ; extra == 'dev'", "pluggy (==0.13.1) ; extra == 'dev'", "py (==1.8.1) ; extra == 'dev'", "pycodestyle (==2.5.0) ; extra == 'dev'", "pyflakes (==2.1.1) ; extra == 'dev'", "pyparsing (==2.4.6) ; extra == 'dev'", "pytest-cov (==2.8.1) ; extra == 'dev'", "pytest (==5.3.3) ; extra == 'dev'", "six (==1.14.0) ; extra == 'dev'", "typed-ast (==1.4.1) ; extra == 'dev'", "typing-extensions (==3.7.4.1) ; extra == 'dev'", "wcwidth (==0.1.8) ; extra == 'dev'", "zipp (==1.0.0) ; extra == 'dev'"], "requires_python": ">=3.5", "summary": "\"Progress tee\", an enhanced \"tee\" program with in-place overwriting of \"status\".", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/drmikehenry/ptee\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/drmikehenry/ptee.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b0fdd8d8e9337781465d97b5cc564e3486d6f5f/68747470733a2f2f7472617669732d63692e6f72672f64726d696b6568656e72792f707465652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/ptee\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/ptee.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dd53f3db7f86fbb68fcf4765dc5dad9bc7ca802/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707465652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/ptee\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/status/ptee.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b54d43e67f9f537ae37dd521ae33763d73ad16f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f707465652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/ptee/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/ptee.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca8e339a0e94f65fe21751c6eb5ccdaaa485f5a9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707465652e737667\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><tt>ptee</tt> (for \u201cProgress Tee\u201d) is a console utility that builds upon the basic\nfunctionality provided by the standard Unix <tt>tee</tt> command.  It accepts lines\nof text from a running command (such as an invocation of <tt>make</tt>) and displays\nthem to the console such that consecutive less-important lines are overwritten\nin-place, providing feedback regarding the progress of the overall operation\nwithout allowing the more-important lines (such as compiler warnings and errors)\nto scroll away and be overlooked.  In addition, as with standard <tt>tee</tt>, a copy\nof the text from stdin may optionally be written verbatim to one or more output\nfiles.</p>\n<p>These less-important lines are called \u201ccontext\u201d lines, as they provide context\nleading up to the important lines; the more-important lines are called \u201cregular\u201d\nlines.  Each new context overwrites previous context lines in-place on the\nconsole, forming a \u201cstatus\u201d line that stays put without scrolling.  When a\nregular line appears, the text composing the status line is kept (i.e., scrolled\nup) to provide context for the regular text.</p>\n<p>For example, suppose an invocation of <tt>make</tt> generates the following output:</p>\n<pre>$ make\ngcc -c -Wall -W -o file1.o file1.c\ngcc -c -Wall -W -o file2.o file2.c\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\ngcc -c -Wall -W -o file3.o file3.c\ngcc -c -Wall -W -o file4.o file4.c\ngcc -c -Wall -W -o file5.o file5.c\ngcc -o app file1.o file2.o file3.o file4.o file5.o\n</pre>\n<p>The compiler invocation lines (<tt>gcc <span class=\"pre\">-c</span> ...</tt>) become uninteresting as soon as\nthe next line shows up, unless there are warnings or errors associated with that\ninvocation.  With <tt>ptee</tt>, you can supply a regular expression to match these\n\u201ccontext\u201d lines to allow them to overwrite each other on the console.  Lines not\nmatching the regular expression will be displayed on a line of their own (along\nwith the previous context line, if any).  In the above example, the output would\nultimately look like this:</p>\n<pre>$ make 2&gt;&amp;1 | ptee --regex '^gcc'\ngcc -c -Wall -W -o file2.o file2.c\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n</pre>\n<p>The <tt><span class=\"pre\">2&gt;&amp;1</span></tt> in the above invocation redirects stderr to the same location as\nstdout, so that both stdout and stderr are piped into <tt>ptee</tt>.  This is needed\nbecause gcc\u2019s diagnostic messages go to stderr by default.</p>\n<p>During the run of <tt>make</tt>, each line of status will be written on top of the\nprevious line of status, providing continuous feedback while keeping the\ninteresting lines from scrolling too far off the screen.</p>\n</div>\n<div id=\"context-levels\">\n<h2>Context Levels</h2>\n<p>Context lines may have an associated level, indicating their position in a\nhierarchy.  Levels are integers, starting at zero.  When a context line of\nlevel N is detected, the status line will be built of the most recent lines of\ncontext from levels zero through N, concatenated into a single status line.\nThis can be useful for retaining bigger-picture context information while\nmore detailed context information is coming in.</p>\n<p>For example, consider a build system invoked with a script named <tt>buildall</tt>,\nwhich generates the following output:</p>\n<pre>$ ./buildall\nx86:\nBuilding component1:\n[compile] file1.o\n[compile] file2.o\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n[link] component1\nBuilding component2:\n[compile] file3.o\n[link] component2\nx86_64:\nBuilding component3:\n[compile] file4.o\n[link] component3\n</pre>\n<p>In this build output, some components are being built, first for the x86\nplatform, then for the x86_64 platform.  This output has three levels of\ncontext hierarchy:</p>\n<ul>\n<li>Level 0: the platform (<tt>x86:</tt> or <tt>x86_64</tt>);</li>\n<li>Level 1: the component (e.g., <tt>Building component1</tt>);</li>\n<li>Level 2: the build step (e.g., <tt>[compile] source1</tt>, <tt>[link] component3</tt>).</li>\n</ul>\n<p>Consider the following shell script to invoke <tt>buildall</tt>:</p>\n<pre>#!/bin/sh\n\n./buildall 2&gt;&amp;1 | ptee build.out \\\n    --level-regex 0 '^(x86|x86_64):' \\\n    --level-regex 1 '^Building ' \\\n    --level-regex 2 '^\\[.*\\]'\n</pre>\n<p>The filename <tt>build.out</tt> is passed to <tt>ptee</tt> such that a verbatim copy of\nthe build output will be recorded in the file <tt>build.out</tt> for possible future\nanalysis.  When running <tt>./ba</tt>, the uninteresting context lines are stripped\naway, leaving only the regular lines (the warning message, in this case) and the\ncontext lines at each level leading up to each regular line:</p>\n<pre>$ ./ba\nx86:\nBuilding component1:\n[compile] file2.c\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n</pre>\n<p>More text actually goes to the console for status and feedback, but it is\noverwritten by writing a carriage return (<tt>\\r</tt>) instead of a newline (<tt>\\n</tt>).\nBelow is the actual output, post-processed to show the carriage returns and the\nsubsequent overwriting taking place:</p>\n<pre>x86:\\r\nx86:  Building component1:\\r\nx86:  Building component1:  [compile] file1.o\\r\nx86:  Building component1:  [compile] file2.o\\r\n                                             \\r\nx86:\nBuilding component1:\n[compile] file2.o\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\nx86:  Building component1:  [link] component1\\r\nx86:  Building component2:                   \\r\nx86:  Building component2:  [compile] file3.o\\r\nx86:  Building component2:  [link] component2\\r\nx86_64:                                      \\r\nx86_64:  Building component3:\\r\nx86_64:  Building component3:  [compile] file4.o\\r\nx86_64:  Building component3:  [link] component3\\r\n</pre>\n<p>Notice that the status line that appears briefly during compilation of file1.c\ncontains all three levels of context line, and that the first two levels of\ncontext are the same when subsequently compiling file2.c, so that\nbigger-picture context persists longer in the status line:</p>\n<pre>x86:  Building component1:  [compile] file1.o\\r\nx86:  Building component1:  [compile] file2.o\\r\n</pre>\n</div>\n<div id=\"heading-lines\">\n<h2>Heading lines</h2>\n<p>In addition to context lines, <tt>ptee</tt> supports the notion of \u201cheading\u201d line.\nThese lines do not contribute to the status line; instead, they are printed\nas-is on the console.  Unlike regular lines, however, no context lines are\nprinted before a heading line.  This can be useful for long lines that would be\nawkward if prepended to the status line.  Consider a second example with the\nfollowing modified output:</p>\n<pre>$ ./buildall2\n------------------------------ x86 ------------------------------\nBuilding component1:\n[compile] file1.o\n[compile] file2.o\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n[link] component1\nBuilding component2:\n[compile] file3.o\n[link] component2\n------------------------------ x86_64 ---------------------------\nBuilding component3:\n[compile] file4.o\n[link] component3\n</pre>\n<p>The banner lines starting with <tt><span class=\"pre\">------</span></tt> are too long to conveniently prepend\nto the status line.  Instead, the <tt>ba2</tt> script treats them as headings:</p>\n<pre>#!/bin/sh\n\n./buildall2 2&gt;&amp;1 | ptee build.out \\\n  --heading-regex '^-----' \\\n  --level-regex 1 '^Building ' \\\n  --level-regex 2 '^\\[.*\\]'\n</pre>\n<p>Leading to this output:</p>\n<pre>$ ./ba2\n------------------------------ x86 ------------------------------\nBuilding component1:\n[compile] file2.o\nfile2.c:1:12: warning: \u2018x\u2019 defined but not used [-Wunused-variable]\n------------------------------ x86_64 ---------------------------\n</pre>\n</div>\n<div id=\"skipping-lines\">\n<h2>Skipping lines</h2>\n<p>Sometimes input contains lines that should be skipped entirely, rather than\nbeing treated as status lines.  An example might include spurious compiler\nwarnings that can\u2019t easily be suppressed.  The switch\n<tt><span class=\"pre\">--skip-regex</span> COUNT SKIP_REGEX</tt> provides a way to skip one or more lines that\nmatch a given pattern.  For example, given the following input:</p>\n<pre>[compile] file1.o\nsystem-header.h:999:18: warning: this is a spurious message\nin argument 2 of function `badly_written(x, y)`\n--------------------------------------------^\n[compile] file2.o\n</pre>\n<p>To skip the three lines of spurious warning, use this invocation:</p>\n<pre>ptee --skip-regex 3 system-header.h:999:18:\n</pre>\n<p>This effectively transforms the input to:</p>\n<pre>[compile] file1.o\n[compile] file2.o\n</pre>\n</div>\n<div id=\"stripping-overwritten-lines\">\n<h2>Stripping overwritten lines</h2>\n<p>When writing to the console, status lines are continuously written and\noverwritten to provide feedback on overall progress.  When the operation\ncompletes, only the important lines of text remain.  But if this console output\nwere redirected to a file or piped into another program, the illusion of the\nstatus lines being overwritten would fall apart, because all of the status lines\nwould be still be present in the output.  Therefore, when not writing to the\nconsole, <tt>ptee</tt> strips out any status lines that would be overwritten.  This\ndefault behavior can be overridden via the <tt><span class=\"pre\">--strip</span></tt> option (to force the\nstatus to be removed even when writing to a console) and the <tt><span class=\"pre\">--no-strip</span></tt>\noption (to retain the status lines even when not writing to a console).  As an\nexample, the post-processed output shown above was generated something like\nthis:</p>\n<pre>./buildall 2&gt;&amp;1 | ptee [switches] --no-strip | perl -0777 -pe 's/\\r/\\\\r\\n/g'\n</pre>\n</div>\n<div id=\"partial-lines\">\n<h2>Partial lines</h2>\n<p>In general, ptee processes whole lines of text.  But sometimes the input stream\nmay pause after a partial line, such as when a program displays a prompt to the\nuser and pauses for a response.  To allow the user to see such partial lines,\nptee by default will wait an amount of time controlled by the\n\u2013partial-line-timeout switch; if the input stream stalls for longer than this\namount of time, the partial input will be displayed without further processing,\nand all future input up to the next newline will be immediately displayed.\nSetting the timeout value to zero disables the timeout feature.</p>\n</div>\n<div id=\"text-encoding-option\">\n<h2>Text encoding option</h2>\n<p>By default, text is assumed to be in UTF-8 format on stdin and stdout.  This\nmay be overridden using the <tt><span class=\"pre\">--encoding</span></tt> option, e.g., for a hypothetical\nprogram that generates latin1 text:</p>\n<pre>generate-latin1-text | ptee --encoding latin1 --regex '&lt;regular expression&gt;'\n</pre>\n<p>See <tt>ptee <span class=\"pre\">--help</span></tt> for more information.</p>\n</div>\n\n          </div>"}, "last_serial": 6647057, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e3a8d7e5ae611984a2213bac7e66d078", "sha256": "e4f6b108e46ecc7253683774d29753f70cb4d6382e5fc4767313b214c412c8fb"}, "downloads": -1, "filename": "ptee-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3a8d7e5ae611984a2213bac7e66d078", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5203, "upload_time": "2015-05-31T20:50:50", "upload_time_iso_8601": "2015-05-31T20:50:50.638118Z", "url": "https://files.pythonhosted.org/packages/f3/80/833029785d2d63da03d0994087e963af0f2da6dc99edf9fec1df094935b0/ptee-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "03832edb0afa0f0bce72bf44b0ccd860", "sha256": "1efeef4f483dba8ea760ba8b8f91894cfaec6e86e534541db8b9a9facbeadd3a"}, "downloads": -1, "filename": "ptee-0.2.0.tar.gz", "has_sig": false, "md5_digest": "03832edb0afa0f0bce72bf44b0ccd860", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5878, "upload_time": "2015-06-23T01:20:14", "upload_time_iso_8601": "2015-06-23T01:20:14.926583Z", "url": "https://files.pythonhosted.org/packages/6b/bd/fb30e952886490c4359a0d3202634dd55b501f945e01b33f5db3fa2b395f/ptee-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5d6d78f492155da3bb660a7b268c81be", "sha256": "eb5ae3857879975364835f61c5b4ef1428819800656415d5edd6fde12d82733b"}, "downloads": -1, "filename": "ptee-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5d6d78f492155da3bb660a7b268c81be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9269, "upload_time": "2016-03-01T11:39:39", "upload_time_iso_8601": "2016-03-01T11:39:39.079374Z", "url": "https://files.pythonhosted.org/packages/fe/e3/96ecd64adf9aa59387672c49820e4a059a8b595d2ace1b1dd776d85e0b63/ptee-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "20d7b053c6396736446dd116f21ea247", "sha256": "2cd4a67e65c035d92c3e666bb004c27cad3570eaef5b8b0626bbdcf1cfe0f9b7"}, "downloads": -1, "filename": "ptee-0.3.1.tar.gz", "has_sig": false, "md5_digest": "20d7b053c6396736446dd116f21ea247", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11974, "upload_time": "2016-09-11T20:51:23", "upload_time_iso_8601": "2016-09-11T20:51:23.997909Z", "url": "https://files.pythonhosted.org/packages/b3/e1/7dea38f0906a2e426765a9a7caad2e0c101aa5ad1bd7d38db0dae5848aa0/ptee-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "e26d8b1a70da415bc7aef740965ce483", "sha256": "9f7377fa98feeb5adf192f0b9e1d0533ef12d0bca76f1d160c3f2dd75787ad40"}, "downloads": -1, "filename": "ptee-0.3.2.tar.gz", "has_sig": false, "md5_digest": "e26d8b1a70da415bc7aef740965ce483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11996, "upload_time": "2016-10-01T14:39:07", "upload_time_iso_8601": "2016-10-01T14:39:07.372128Z", "url": "https://files.pythonhosted.org/packages/2b/2c/95652c1395357de83a602d1bf76c506bafd5f1a2dc8a08adc84deafe0e2e/ptee-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f0329674ce0399375eb32596dab871b7", "sha256": "5cc99e16d6d18ed61c7209c9dbcebdb2b5a9b89d63b5e6c51cc2db0303bc6d92"}, "downloads": -1, "filename": "ptee-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f0329674ce0399375eb32596dab871b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12526, "upload_time": "2020-01-19T23:04:42", "upload_time_iso_8601": "2020-01-19T23:04:42.212082Z", "url": "https://files.pythonhosted.org/packages/e2/9a/e5f7d1a93dd1fa758d25205aee011c9e2d1fb8055113c6caddcd8f1b9cf2/ptee-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "f400cbe670bcbd229779ec6da53c7281", "sha256": "e1f13312f1ce0c23d52201b6fea31f48152576eeee908a65a5196574005f0db6"}, "downloads": -1, "filename": "ptee-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f400cbe670bcbd229779ec6da53c7281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10968, "upload_time": "2020-02-17T15:46:43", "upload_time_iso_8601": "2020-02-17T15:46:43.183789Z", "url": "https://files.pythonhosted.org/packages/ae/36/bbffe59aacab26a64426996f8d8c4b01583d2fc3157135dc2d276c4842d1/ptee-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a9bb4c0b2787cb240acf41d6ebd7623", "sha256": "9e1ff58fdba5d2f4743b841dd4eb04eae838324227ca82f5723e4bb59bd08a26"}, "downloads": -1, "filename": "ptee-0.4.1.tar.gz", "has_sig": false, "md5_digest": "8a9bb4c0b2787cb240acf41d6ebd7623", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13190, "upload_time": "2020-02-17T15:46:44", "upload_time_iso_8601": "2020-02-17T15:46:44.423543Z", "url": "https://files.pythonhosted.org/packages/d6/c6/1c76edcd01ec3d883247286725b36be2c9a55e59db715681b8b428a6a5e2/ptee-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f400cbe670bcbd229779ec6da53c7281", "sha256": "e1f13312f1ce0c23d52201b6fea31f48152576eeee908a65a5196574005f0db6"}, "downloads": -1, "filename": "ptee-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f400cbe670bcbd229779ec6da53c7281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10968, "upload_time": "2020-02-17T15:46:43", "upload_time_iso_8601": "2020-02-17T15:46:43.183789Z", "url": "https://files.pythonhosted.org/packages/ae/36/bbffe59aacab26a64426996f8d8c4b01583d2fc3157135dc2d276c4842d1/ptee-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a9bb4c0b2787cb240acf41d6ebd7623", "sha256": "9e1ff58fdba5d2f4743b841dd4eb04eae838324227ca82f5723e4bb59bd08a26"}, "downloads": -1, "filename": "ptee-0.4.1.tar.gz", "has_sig": false, "md5_digest": "8a9bb4c0b2787cb240acf41d6ebd7623", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13190, "upload_time": "2020-02-17T15:46:44", "upload_time_iso_8601": "2020-02-17T15:46:44.423543Z", "url": "https://files.pythonhosted.org/packages/d6/c6/1c76edcd01ec3d883247286725b36be2c9a55e59db715681b8b428a6a5e2/ptee-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:15 2020"}