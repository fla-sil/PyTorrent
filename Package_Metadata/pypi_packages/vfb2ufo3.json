{"info": {"author": "Jameson R. Spires", "author_email": "jameson.spires@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7"], "description": "# VFB2UFO3\n## Description\nMultiple master-compatible **Unified Font Object** (UFO) version 3 font writer API for Windows FontLab 5.2\n\n**VFB2UFO3** is primarily intended to create scaled UFO instances from a > 1000 UPM multiple master FontLab `.vfb` font with PostScript outlines for use with the AFDKO tools for creating binary fonts while still working with Windows FontLab 5.2. The most significant non-trivial change that will occur in export is the renaming of kerning glyph groups (FontLab *classes*). Providing a `.flc` (FontLab-class) file can speed up conversion significantly when font groups are not identifiable as first/second from their name. All glyph hints/links are ignored. A batch command can be created for use with `psautohint`, which supports hinting outlines with decimal coordinates.\n\n## Installation\nThis package may be installed via PyPi:\n\n`pip install vfb2ufo3`\n\nAlternatively, the latest release `.zip` may be downloaded, unzipped, and added to your FontLab Macros folder as shown:\n\n```\n[user folder]\n`-- Documents\n    `-- Fontlab\n        `-- Studio 5\n            `-- Macros\n                `-- System\n                    `-- Modules\n                        `-- vfb2ufo3\n                            `-- __init__.py\n                            `-- core.pyd\n                            `-- designspace.pyd\n                            `-- fdk.pyd\n                            `-- fea.pyd\n                            `-- fontinfo.pyd\n                            `-- glif.pyd\n                            `-- groups.pyd\n                            `-- kern.pyd\n                            `-- mark.pyd\n                            `-- plist.pyd\n                            `-- tools.pyd\n                            `-- user.py\n                            `-- vfb.pyd\n```\n\n## Requirements\nThis package has no dependencies outside of the standard library. It is written in Cython and in Python 3 syntax where it is natively supported by Cython. The submodules are compiled into `.pyd` extension modules. To recompile the submodules, the PyPi `cython` package and a compiler for Cython to utilize during extension module compilation will be required.\n\n### Optional\n* cython  \n**pip install cython**  \n<https://github.com/cython/cython>  \n\n* Minimalist GNU for Window (MinGW)  \n<http://www.mingw.org>  \n<http://winlibs.com>  \n\n* AFDKO  \n**pip install afdko**  \n<https://github.com/adobe-type-tools/afdko>  \n\n### Functionality\nUFO output is produced without changes to the source font. The source font will be copied and UFOs will be created from the copy. If the font is multiple master, instances will be generated from the copy. If a specific `layer` or `instance_values` are not provided for a multiple master source font, a UFO will be generated for each master in the font.\n\nFonts with a large number of glyphs benefit greatly from supplying additional glyph names to be optimized when removing overlaps (`glyphs_optimize_names`) and/or glyph names and suffixes which can be omitted from the final UFO instance (`glyphs_omit_names`, `glyphs_omit_suffixes`). See **GLYPHS OPTIONS** below.\n\nGenerated instances/layers can be saved and/or left open after generation via the `vfb_save` and `vfb_close` options. If `vfb_save` is set to `True`, the resulting `.vfb` instance will be updated during UFO creation. This includes glyph outline changes (overlap removal and decomposition).\n\nAll path options must be absolute paths; folder and file paths which are not absolute will be ignored. The default output path is the user's Desktop.\n\nA dictionary of attributes may be suppled via the `instance_attributes` option. These attributes should consist of keys from the UFO specification and they must match the data type in the specification. Not all fontinfo attributes are configurable; please see `CONFIGURABLE_ATTRS` in the `fontinfo.pxi` source file for a list of attributes which will be checked and updated to the UFO(s) during creation.\n\n```\n-------------------------------------------------------------------------------\nEXAMPLE UFO GENERATION SCRIPT\n-------------------------------------------------------------------------------\n#FLM: write ufo\n# coding: utf-8\nfrom __future__ import absolute_import, unicode_literals\n\nimport os\n\nfrom vfb2ufo3 import write_ufo\n\nuser_profile_folder = os.environ['USERPROFILE']\noutput_path = os.path.join(user_profile_folder, 'Documents', 'test_font')\n\ninstances = [\n\t0,\n\t200,\n\t400,\n\t650,\n\t1000,\n\t]\nnames = [\n\t'Thin',\n\t'Light',\n\t'Regular',\n\t'SemiBold',\n\t'Bold',\n\t]\nattributes = [\n\t{'openTypeOS2WeightClass': 200},\n\t{'openTypeOS2WeightClass': 300},\n\t{'openTypeOS2WeightClass': 400},\n\t{'openTypeOS2WeightClass': 600},\n\t{'openTypeOS2WeightClass': 700},\n\t]\n\nwrite_ufo(\n\toutput_path=output_path,\n\tinstance_values=instances,\n\tinstance_names=names,\n\tinstance_attributes=attributes,\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\t)\n\n-------------------------------------------------------------------------------\n```\n\n### Scale options\nBy default, the target UPM for UFO output is 1000. For a UPM other than 1000, say 2048, it should be set via the `scale_to_upm` option. The value from the `scale_to_upm` option is ignored if it is lower than 1000. Scaling can be turned off by setting `scale_auto` to `False`; this does not reduce conversion times.\n\nAll scaling operations are performed independently from FontLab; if the `.vfb` instance(s)/master copy are being saved, the `.vfb` font and glyph values will be the original un-scaled values.\n\n### Instance options\nWhen creating instances from a multiple master source font, lists of values, names (optional), and attributes (optional) should be provided to generate instance UFOs from the master font.\n\nIf the source is a multiple master font and a list of instance values is not provided, a UFO for each master will be created.\n\nFor multiple master fonts, the instance values list should be values in `tuple`- or `list`-form with a value for each axis. For single-axis fonts, if the list values are numerical, the values will be converted to single-element lists:\n\n**2-axis font**\n* `instance_values = [[0, 1000], [200, 1000]]`  \n\n* `instance_values = [(0, 1000), (200, 1000)]`  \n\n**1-axis font**\n* `instance_values = [[0], [200]]`  \n\n* `instance_values = [(0,), (200,)]`  \n\n* `instance_values = [0, 200]` becomes `[[0], [200]]`  \n\nIf the optional lists of names and/or attributes are provided in addition to a list of values, they must be of the same length as the values list. A `ValueError` will be raised if the lengths do not match, since this will likely produce undesirable results:\n\n***Correct:***\n```\ninstance_values = [(0, 1000), (200, 1000)]\ninstance_names = ['Light Display', 'Regular Display']\n```\n\n***Incorrect (`ValueError`):***\n```\ninstance_values = [(0, 1000), (200, 1000)]\ninstance_names = ['Light Display']\n```\n\n### Glyph options\nGlyph scaling is independent from the `.vfb` instance itself; if the `.vfb` instance is being saved, the glyphs in the `.vfb` will remain un-scaled.\n\nGlyph decomposition and overlap removal is optional and occurs after instances are generated. This option is intended for final output when a binary font will be created from the UFO.\n\nBy default, when decomposing and removing overlaps from glyph outlines for export, GLIF files for glyphs containing components will be built using contours from each component's base contours.\n\nWhen decomposing only, the optimization outlined above will be used for all glyphs containing components.\n\nThe generated `.vfb` instance(s) will leave components in component-form.\n\nTo disable the optimizations outlined above, set the `glyphs_optimize` option to `False`.\n\n**Omit glyphs from instance**\n* A list of glyph suffixes and/or glyph names can be supplied that should be omitted from the instance UFO via the `glyphs_omit_suffixes` and `glyphs_omit_names` options, respectively.  \n\n**Optimize glyph name and code point lists**\n* If removing overlaps, the default list of code points for glyphs to be constructed in the above manner is composed of glyphs that normally have no overlapping components. The list is located in the `ufo.pxi` source file with the character representations for these code points shown below.  \n\n* The code points from the default code point list can be shown by running the `vfb2ufo3.show_default_optimize_code_points()` function. The code points will print to the FontLab output window and can then be copied into a text editor and edited as needed.  \n\n* A user-supplied code point list (`glyphs_optimize_code_points`) can be a list of `'0x00ac'`-format strings, integers in hexadecimal-form (`0x00ac`), or numeric integers (`172`); values which cannot be converted to an integer will raise a `ValueError`. Only the first code point in each glyph's list of code points (FontLab *unicodes* attribute) is checked for code point set membership.  \n\n* A user-supplied glyph name list (`glyphs_optimize_names`) can be supplied to supplement the code point list for glyphs. Any glyphs containing components that do not overlap should be added to this list.  \n\n* Small case variants of the code points in the code point list will be also added to code point list assuming they end with `.sc`, `.smcp`, or `.c2sc` suffixes.  \n\n#### `OPTIMIZE_CODE_POINTS`\n```\nLatin\n\u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u0100 \u0102 \u01e2 \u01fc \u0200 \u0202 \u01cd \u0226\n\u1e06\n\u0106 \u0108 \u010a \u010c\n\u010e \u1e0c \u1e0e \u1e12\n\u00c8 \u00c9 \u00ca \u00cb \u0112 \u0114 \u0116 \u0116 \u0204 \u0206\n\u011c \u011e \u0120 \u0122 \u1e20 \u01e6 \u01f4\n\u0124 \u1e24 \u1e2a\n\u00cc \u00cd \u0128 \u012a \u012c \u0130 \u00ce \u00cf \u0208 \u020a \u01cf\n\u0134\n\u0136 \u1e32 \u1e34\n\u0139 \u013b \u013d \u013f \u1e36 \u1e38 \u1e3a \u1e3c\n\u1e3e \u1e40 \u1e42\n\u00d1 \u0143 \u0145 \u0147 \u1e44 \u1e46 \u1e48 \u1e4a \u01f8\n\u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u014c \u014e \u0150 \u020c \u020e \u022e \u01d1\n\u0156 \u0158 \u0154 \u1e58 \u1e5a \u1e5c \u1e5e \u0210 \u0212\n\u015a \u015c \u015e \u0218 \u0160 \u1e62\n\u0162 \u021a \u0164 \u1e6c \u1e6e \u1e70\n\u0168 \u016a \u016c \u016e \u0170 \u00d9 \u00da \u00db \u00dc \u0214 \u0216 \u01d3 \u01d5 \u01d7 \u01d9 \u01db\n\u1e7e\n\u0174 \u1e80 \u1e82 \u1e84 \u1e86\n\u1e8a \u1e8c\n\u0176 \u0178 \u00dd \u1e8e \u0232\n\u0179 \u017b \u017d \u1e90 \u1e92 \u1e94\n\u0132 \u01c7 \u01ca \u01c8 \u01cb\n\u01f1 \u01c4 \u01f2 \u01c5\n\u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u0101 \u0103 \u01e3 \u01fd \u0201 \u0203 \u01ce \u0227\n\u1e07\n\u0107 \u0109 \u010b \u010d\n\u010f \u1e0d \u1e0f \u1e13\n\u00e8 \u00e9 \u00ea \u00eb \u0113 \u0115 \u0117 \u011b \u0205 \u0207\n\u011d \u011f \u0121 \u0123 \u1e21 \u01e7 \u01f5\n\u0125 \u1e96 \u1e25 \u1e2b\n\u00ec \u00ed \u0129 \u012b \u012d \u00ee \u00ef \u0209 \u020b \u01d0\n\u0135 \u01f0\n\u0137 \u1e33 \u1e35\n\u013a \u013c \u013e \u0140 \u1e37 \u1e39 \u1e3b \u1e3d\n\u1e3f \u1e41 \u1e43\n\u0144 \u0146 \u0148 \u0149 \u00f1 \u1e45 \u1e47 \u1e49 \u1e4b \u01f9\n\u00f2 \u00f3 \u014d \u014f \u0151 \u00f4 \u00f5 \u00f6 \u020d \u020f \u022f \u01d2\n\u0157 \u0159 \u0155 \u1e59 \u1e5b \u1e5d \u1e5f \u0211 \u0213\n\u015b \u015d \u015f \u0219 \u0161 \u1e63\n\u0163 \u021b \u0165 \u1e6d \u1e6f \u1e71\n\u0169 \u016b \u016d \u016f \u0171 \u00f9 \u00fa \u00fb \u00fc \u0215 \u0217 \u01d4 \u01d6 \u01d8 \u01da \u01dc\n\u1e7f\n\u0175 \u1e81 \u1e83 \u1e85 \u1e87\n\u1e8b \u1e8d\n\u00fd \u00ff \u0177 \u1e8f \u0233\n\u017a \u017c \u017e \u1e91 \u1e93 \u1e95\n\u0133 \u01c9 \u01cc\n\u01f3 \u01c6\n\nCyrillic\n\u0403 \u040c \u040d \u0419 \u04e2 \u04e4 \u040e \u04dc \u04c1 \u0400 \u0401 \u04d6 \u04de \u0476 \u04d8 \u04da \u0405 \u0406 \u0407 \u0408 \u04d0 \u04d2 \u04d4 \u04e6 \u04ee \u04f0 \u04f2 \u04f4 \u04f8 \u04c0 \u04c0\n\u0453 \u045c \u045d \u0439 \u04e3 \u04e5 \u045e \u04dd \u04c2 \u0450 \u0451 \u04d7 \u04df \u0477 \u04d9 \u04db \u0455 \u0456 \u0457 \u0458 \u04d1 \u04d3 \u04d5 \u04e7 \u04ef \u04f1 \u04f3 \u04f5 \u04f9\n\nGreek Mono- and Polytonic\n\u1f08 \u1f09 \u1f0a \u1f0b \u1f0c \u1f0d \u1f0e \u1f0f \u1f88 \u1f89 \u1f8a \u1f8b \u1f8c \u1f8d \u1f8e \u1f8f \u1fb8 \u1fb9 \u1fba \u1fbb \u1fbc\n\u1f18 \u1f19 \u1f1a \u1f1b \u1f1c \u1f1d \u1fc8 \u1fc9\n\u1f28 \u1f29 \u1f2a \u1f2b \u1f2c \u1f2d \u1f2e \u1f2f \u1f98 \u1f99 \u1f9a \u1f9b \u1f9c \u1f9d \u1f9e \u1f9f \u1fca \u1fcb \u1fcc\n\u1f38 \u1f39 \u1f3a \u1f3b \u1f3c \u1f3d \u1f3e \u1f3f \u1fd8 \u1fd9 \u1fda \u1fdb\n\u1f48 \u1f49 \u1f4a \u1f4b \u1f4c \u1f4d \u1ff8 \u1ff9\n\u1fec\n\u1f59 \u1f5b \u1f5d \u1f5f \u1fe8 \u1fe9 \u1fea \u1feb\n\u1f68 \u1f69 \u1f6a \u1f6b \u1f6c \u1f6d \u1f6e \u1f6f \u1fa8 \u1fa9 \u1faa \u1fab \u1fac \u1fad \u1fae \u1faf \u1ffa \u1ffb \u1ffc\n\u1f00 \u1f01 \u1f02 \u1f03 \u1f04 \u1f05 \u1f06 \u1f07 \u1f80 \u1f81 \u1f82 \u1f83 \u1f84 \u1f85 \u1f86 \u1f87 \u1fb0 \u1fb1 \u1fb2 \u1fb3 \u1fb4 \u1fb6 \u1fb7 \u1f70 \u1f71\n\u1f10 \u1f11 \u1f12 \u1f13 \u1f14 \u1f15 \u1f72 \u1f73\n\u1f20 \u1f21 \u1f22 \u1f23 \u1f24 \u1f25 \u1f26 \u1f27 \u1f90 \u1f91 \u1f92 \u1f93 \u1f94 \u1f95 \u1f96 \u1f97 \u1fc2 \u1fc3 \u1fc4 \u1fc6 \u1fc7 \u1f74 \u1f75\n\u1f30 \u1f31 \u1f32 \u1f33 \u1f34 \u1f35 \u1f36 \u1f37 \u1fd0 \u1fd1 \u1fd2 \u1fd3 \u1fd6 \u1fd7 \u1f76 \u1f77\n\u1f40 \u1f41 \u1f42 \u1f43 \u1f44 \u1f45 \u1f78 \u1f79\n\u1fe4 \u1fe5\n\u1f50 \u1f51 \u1f52 \u1f53 \u1f54 \u1f55 \u1f56 \u1f57 \u1fe0 \u1fe1 \u1fe2 \u1fe3 \u1f7a \u1f7b \u1fe6 \u1fe7\n\u1f60 \u1f61 \u1f62 \u1f63 \u1f64 \u1f65 \u1f66 \u1f67 \u1fa0 \u1fa1 \u1fa2 \u1fa3 \u1fa4 \u1fa5 \u1fa6 \u1fa7 \u1ff2 \u1ff3 \u1ff4 \u1ff6 \u1ff7 \u1f7c \u1f7d\n```\n\n#### Features options\nFont groups can be added to the `features.fea` file on export by setting `features_import_groups` to `True`. The font's features are neither formatted nor checked for correctness. Users are responsible for moving referenced feature files from `include()` statements to the chosen output directory. Also see **KERN FEATURE OPTIONS** and **MARK FEATURE OPTIONS** below for `kern` and `mark` feature options.\n\n#### Kern feature options\nKern values will be scaled in parity with the output UFO. This scaling is independent from the created `.vfb` instance. A minimum value can be set using `kern_min_value`. This value should be a positive integer and when set, all kern values (negative and positive) not above the threshold will be omitted from the `kern` feature.\n\nBy default, the `kern` feature from the master font is not included in the `features.fea` file. To include the `kern` feature from the master font, `kern_feature_passthrough` should be set to `True`.\n\nAn external feature file with a `kern` feature can be imported to the font features using the `kern_feature_file_path` option, which expects a path to a text file with the `.fea` extension.\n\nBy default, a new `kern` feature is generated for each instance. Setting `kern_feature_generate` to `False` will turn this off. The `kern` feature generation will add subtables and a lookup as necessary. This is not particularly elegant, and so far, no checks are made to guarantee a working `kern` feature. Any remaining subtable overflows may be due to glyph(s) being in more than one kern group of the same side; however overflows can also be caused by issues from one or more `GPOS` features located earlier in the feature list.\n\n#### Mark feature options\nA `mark` feature can be generated on export by setting `mark_feature_generate` to `True`. A list of anchor names to omit (`mark_anchors_omit`) or a list of anchor names to include (`mark_anchors_include`) can be supplied to fine-tune the `mark` feature output.\n\n#### Group options\nProviding a FontLab-class file (`.flc`) or `groups.plist` speeds up UFO creation time significantly when the group names are not named using first and second group identifiers (see `groups_flc_path` and `groups_plist_path` options). Group names in the `.flc` file do not have match any specific formatting (e.g. `MMK_R_<key glyph>`, `public.kern2.<key glyph>`).\n\nWhen not using either a `.flc` or `groups.plist` file, group names will be checked for UFO3-style group identifiers (`public.kern1.<key glyph>`, `public.kern2.<key glyph>`), MetricsMachine-style identifiers (`MMK_L_<key glyph>`, `MMK_R_<key glyph>`), and the simpler `_L` and `_R` identifier suffixes. Groups which either have no kerning or are not identifiable using their name will be identified as first/second using FontLab's built-in `GetClassLeft`/`GetClassRight` methods.\n\nIf the `export_flc` option is set to `True`, a FontLab-class file (`.flc`) will be generated with group names matching those of the generated UFOs. This file will be located in the same directory as the generated UFO(s).\n\nThe `kern_ignore_no_kerning` option can be set to `True` to ignore groups which have no kerning pairs. This may be desirable if making a binary font from the UFO. This option has no effect when using an imported `.flc` or `groups.plist` file.\n\nFontLab kern classes without a key glyph in a provided `.flc` file or in the master font's kern classes will have the first glyph in the FontLab class marked as the key glyph and it will be noted in the output console. If there is more than one glyph marked as a key glyph, the first marked glyph is considered the key glyph. These key glyph operations *may* affect the kerning. An imported `groups.plist` infers that the glyph in the group name is the key glyph.\n\n**Kern group naming recommendations**\n```\nTypical FontLab-style kerning groups:\n_A: A' Agrave Aacute Acircumflex Atilde Adieresis Aring...\n_A_r: A' AE Agrave Aacute Acircumflex Atilde Adieresis Aring...\n\nRecommended naming for FontLab-style kerning groups:\n_public.kern1.A: A' Agrave Aacute Acircumflex Atilde Adieresis Aring...\n_public.kern2.A: A' AE Agrave Aacute Acircumflex Atilde Adieresis Aring...\n\nFinal output (UFO group plist):\n<key>public.kern1.A</key>\n<array>\n\t<string>A</string>\n\t<string>Agrave</string>\n\t<string>Aacute</string>\n\t<string>Acircumflex</string>\n\t<string>Atilde</string>\n\t<string>Adieresis</string>\n\t<string>Aring</string>\n\t...\n</array>\n\n<key>public.kern2.A</key>\n<array>\n\t<string>A</string>\n\t<string>AE</string>\n\t<string>Agrave</string>\n\t<string>Aacute</string>\n\t<string>Acircumflex</string>\n\t<string>Atilde</string>\n\t<string>Adieresis</string>\n\t<string>Aring</string>\n\t...\n</array>\n```\n\n#### AFDKO options\nThe `OS/2`, `hhea`, `head`, and `name` tables will be added to the features file. The `name` table entry strings will be formatted according to [OpenType Feature File Specification \u00a7 9.e](https://adobe-type-tools.github.io/afdko/OpenTypeFeatureFileSpecification.html#9.e). Any strings unable to be formatted fully for each platform's specific encoding restriction (Windows -- [`UTF-8`](https://en.wikipedia.org/wiki/UTF-8), Macintosh -- [`Mac OS Roman`](https://en.wikipedia.org/wiki/Mac_OS_Roman)) will be formatted to their nearest ASCII equivalent rather than omitting any un-encodable characters. The standard library [`unicodedata`](https://docs.python.org/2.7/library/unicodedata.html) module is used for any entries meeting this criteria.\n\n*[GlyphOrderAndAliasDB](https://adobe-type-tools.github.io/afdko/MakeOTFUserGuide.pdf)* (GOADB) and *[FontMenuNameDB](https://adobe-type-tools.github.io/afdko/MakeOTFUserGuide.pdf)* files can be generated for use with MakeOTF. The GOADB can be provided (`afdko_makeotf_GOADB_path`), derived from the `.vfb`'s original encoding, or the order of the source font.\n\nOptionally, the first 256 glyphs can be filled from the [`Windows-1252`](https://en.wikipedia.org/wiki/Windows-1252) or [`Mac OS Roman`](https://en.wikipedia.org/wiki/Mac_OS_Roman) code pages (`afdko_makeotf_GOADB_win1252`, `afdko_makeotf_GOADB_macos_roman`). The first character of a generated GOADB file will always start with the `.notdef` glyph. If a GOADB file is provided, it is not checked for correctness. Commands to run MakeOTF for each generated instance separately or all instances as a batch using the options `afdko_makeotf_cmd` and `afdko_makeotf_batch_cmd`, respectively.\n\nThere are several explicit keyword options to enable specific MakeOTF switches. For those not available via a keyword option, they should be defined as a list of strings and passed to the `afdko_makeotf_args` option.\n\n#### psautohint options\n[`psautohint`](https://github.com/adobe-type-tools/psautohint) can be utilized for generating glyph hints after UFO generation. Commands to run `psautohint` for each generated instance separately or all instances as a batch using the options `psautohint_cmd` and `psautohint_batch_cmd`, respectively. The default options are `-d` (write decimal (float) hint coordinates) and `-w` (write hints directly to the .glif lib for each glyph).\n\n#### UFOZ options\nUFO instances can be written as a `.ufoz` archive. If you are planning on any file transfer operations after creation, transferring a single `.ufoz` file is much quicker than the large number of small text files in the generated UFO instance(s), especially when transferring through USB. By default, archives are written in compressed mode. Compression can be turned off by setting `ufoz_compress` to `False`.\n\n#### `.designspace` font options\nA `.designspace` document can be created in place of individual UFO instances. A UFO for each master will be generated and the instances will be described in the `.designspace` document. A default instance can be described with the `designspace_default` option. This value must be a list or tuple with a value for each axis in the font. If `glyphs_omit_list` or `glyphs_omit_suffixes_list` lists are provided, the glyphs will remain in the source UFOs and a glyph mute rule for each glyph to be omitted will be added for each instance.\n\n#### Benchmarks\nFor reference, testing was performed on a Windows 10 machine with an Intel Xeon E5 1650v3 @ 3.5 GHz CPU and a solid-state hard drive.\n\nTimes are per-instance (\u00b1.5 sec) and do not include time to load and parse user options, then copy the original font and prepare the copy for conversion to the UFO format. This prep time increases when not providing a FontLab-class or `groups.plist` file.\n\nThe `ufoz` option will reduce times by 0 - 0.5 sec.\n\n**Test (~3200 glyphs @ 10,000 UPM -> 1,000 UPM), <10 sec**\n```\nflc_path = <path to .flc file>\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\tgroups_flc_path=flc_path,\n\t)\n```\n\n**Test (~2900 glyphs @ 10,000 UPM -> 1,000 UPM), \u22489 sec**\n```\nflc_path = <path to .flc file>\nglyphs_omit_list = [\n\t<glyph names to be omitted go here>\n\t]\nglyphs_omit_suffixes_list = [\n\t<glyph name suffixes to be omitted go here>\n\t]\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\tglyphs_omit_list=glyphs_omit_list,\n\tglyphs_omit_suffixes_list=glyphs_omit_suffixes_list,\n\tgroups_flc_path=flc_path,\n\t)\n```\n\n**Test (~2900 glyphs @ 10,000 UPM -> 1,000 UPM), \u22487 sec**\n```\nflc_path = <path to .flc file>\nglyphs_optimize_names = [\n\t<glyph names with no overlapping components go here>\n\t]\nglyphs_omit_list = [\n\t<glyph names to be omitted go here>\n\t]\nglyphs_omit_suffixes_list = [\n\t<glyph name suffixes to be omitted go here>\n\t]\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\tglyphs_optimize_names=glyphs_optimize_names,\n\tglyphs_omit_list=glyphs_omit_list,\n\tglyphs_omit_suffixes_list=glyphs_omit_suffixes_list,\n\tgroups_flc_path=flc_path,\n\t)\n```\n\n**Test (~2900 glyphs @ 10,000 UPM -> 1,000 UPM), \u22484 sec**\n```\nflc_path = <path to .flc file>\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tgroups_flc_path=flc_path,\n\t)\n```\n\n**Test (~2900 glyphs @ 10,000 UPM -> 1,000 UPM), \u22483-4 sec**\n```\nflc_path = <path to .flc file>\nglyphs_omit_list = [\n\t<glyph names to be omitted go here>\n\t]\nglyphs_omit_suffixes_list = [\n\t<glyph name suffixes to be omitted go here>\n\t]\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_omit_list=glyphs_omit_list,\n\tglyphs_omit_suffixes_list=glyphs_omit_suffixes_list,\n\tgroups_flc_path=flc_path,\n\t)\n```\n\n**Test (~3200 glyphs @ 10,000 UPM -> 1,000 UPM), \u22483-4 sec**\n```\nflc_path = <path to .flc file>\n\nvfb2ufo3.write_ufo(\n\tgroups_flc_path=flc_path,\n\t)\n```\n\n#### Notes\nGenerally, no assumptions are made about the correctness of the input. When `adfko_makeotf_release` mode is set, glyph name errors will raise an exception and UFO generation will not continue. Glyph name checks are made prior to building instances. Other errors in the original font will likely be passed through to the UFO.\n\n#### Author\nJameson R Spires\n\n#### License\nThis package is available under the [MIT License](https://opensource.org/licenses/MIT)\n\n#### Version history\n* version 0.6.2  \nreplaced `push_back` with `emplace_back` where possible  \ncorrections to shifted and scaled contour-from-component builds  \n\n* version 0.6.1  \nsmall corrections  \n\n* version 0.6.0  \nsmall fix for single-master font builds  \nsmall changes to several source files  \n`glif.pyx` has been rewritten in C++ as much as possible  \n\n* version 0.5.2  \nsmall change to `groups.pyx`  \nre-added link to known working GCC compiler  \n\n* version 0.5.1  \nmajority of code base rewritten  \nsupport for UFO3 specification only  \nconsiderable improvement in UFO creation times  \ncorrected UFOZ build structure  \nremoved hint operations, added psautohint batch command options  \nimproved option handling  \nimproved group conversion  \nnative `kern` and `mark` feature generation  \n\n* version 0.3.1  \nupdated sample script  \n\n* version 0.3.0  \nadditional documentation  \nslight improvement in glif and .glif file creation times  \nadded sample benchmark times  \n\n* version 0.2.0  \nminor formatting  \nchange to plistlib for groups.plist import  \nremoved commented lines in `__init__.py`  \nadded `futures` package as a required package  \nadded module to PyPi  \n\n* version 0.1.0  \ninitial release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spiratype/vfb_ufo3", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "vfb2ufo3", "package_url": "https://pypi.org/project/vfb2ufo3/", "platform": "", "project_url": "https://pypi.org/project/vfb2ufo3/", "project_urls": {"Homepage": "https://github.com/spiratype/vfb_ufo3"}, "release_url": "https://pypi.org/project/vfb2ufo3/0.6.2/", "requires_dist": null, "requires_python": "", "summary": "UFO converter for Windows FontLab 5.2", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>VFB2UFO3</h1>\n<h2>Description</h2>\n<p>Multiple master-compatible <strong>Unified Font Object</strong> (UFO) version 3 font writer API for Windows FontLab 5.2</p>\n<p><strong>VFB2UFO3</strong> is primarily intended to create scaled UFO instances from a &gt; 1000 UPM multiple master FontLab <code>.vfb</code> font with PostScript outlines for use with the AFDKO tools for creating binary fonts while still working with Windows FontLab 5.2. The most significant non-trivial change that will occur in export is the renaming of kerning glyph groups (FontLab <em>classes</em>). Providing a <code>.flc</code> (FontLab-class) file can speed up conversion significantly when font groups are not identifiable as first/second from their name. All glyph hints/links are ignored. A batch command can be created for use with <code>psautohint</code>, which supports hinting outlines with decimal coordinates.</p>\n<h2>Installation</h2>\n<p>This package may be installed via PyPi:</p>\n<p><code>pip install vfb2ufo3</code></p>\n<p>Alternatively, the latest release <code>.zip</code> may be downloaded, unzipped, and added to your FontLab Macros folder as shown:</p>\n<pre><code>[user folder]\n`-- Documents\n    `-- Fontlab\n        `-- Studio 5\n            `-- Macros\n                `-- System\n                    `-- Modules\n                        `-- vfb2ufo3\n                            `-- __init__.py\n                            `-- core.pyd\n                            `-- designspace.pyd\n                            `-- fdk.pyd\n                            `-- fea.pyd\n                            `-- fontinfo.pyd\n                            `-- glif.pyd\n                            `-- groups.pyd\n                            `-- kern.pyd\n                            `-- mark.pyd\n                            `-- plist.pyd\n                            `-- tools.pyd\n                            `-- user.py\n                            `-- vfb.pyd\n</code></pre>\n<h2>Requirements</h2>\n<p>This package has no dependencies outside of the standard library. It is written in Cython and in Python 3 syntax where it is natively supported by Cython. The submodules are compiled into <code>.pyd</code> extension modules. To recompile the submodules, the PyPi <code>cython</code> package and a compiler for Cython to utilize during extension module compilation will be required.</p>\n<h3>Optional</h3>\n<ul>\n<li>\n<p>cython<br>\n<strong>pip install cython</strong><br>\n<a href=\"https://github.com/cython/cython\" rel=\"nofollow\">https://github.com/cython/cython</a></p>\n</li>\n<li>\n<p>Minimalist GNU for Window (MinGW)<br>\n<a href=\"http://www.mingw.org\" rel=\"nofollow\">http://www.mingw.org</a><br>\n<a href=\"http://winlibs.com\" rel=\"nofollow\">http://winlibs.com</a></p>\n</li>\n<li>\n<p>AFDKO<br>\n<strong>pip install afdko</strong><br>\n<a href=\"https://github.com/adobe-type-tools/afdko\" rel=\"nofollow\">https://github.com/adobe-type-tools/afdko</a></p>\n</li>\n</ul>\n<h3>Functionality</h3>\n<p>UFO output is produced without changes to the source font. The source font will be copied and UFOs will be created from the copy. If the font is multiple master, instances will be generated from the copy. If a specific <code>layer</code> or <code>instance_values</code> are not provided for a multiple master source font, a UFO will be generated for each master in the font.</p>\n<p>Fonts with a large number of glyphs benefit greatly from supplying additional glyph names to be optimized when removing overlaps (<code>glyphs_optimize_names</code>) and/or glyph names and suffixes which can be omitted from the final UFO instance (<code>glyphs_omit_names</code>, <code>glyphs_omit_suffixes</code>). See <strong>GLYPHS OPTIONS</strong> below.</p>\n<p>Generated instances/layers can be saved and/or left open after generation via the <code>vfb_save</code> and <code>vfb_close</code> options. If <code>vfb_save</code> is set to <code>True</code>, the resulting <code>.vfb</code> instance will be updated during UFO creation. This includes glyph outline changes (overlap removal and decomposition).</p>\n<p>All path options must be absolute paths; folder and file paths which are not absolute will be ignored. The default output path is the user's Desktop.</p>\n<p>A dictionary of attributes may be suppled via the <code>instance_attributes</code> option. These attributes should consist of keys from the UFO specification and they must match the data type in the specification. Not all fontinfo attributes are configurable; please see <code>CONFIGURABLE_ATTRS</code> in the <code>fontinfo.pxi</code> source file for a list of attributes which will be checked and updated to the UFO(s) during creation.</p>\n<pre><code>-------------------------------------------------------------------------------\nEXAMPLE UFO GENERATION SCRIPT\n-------------------------------------------------------------------------------\n#FLM: write ufo\n# coding: utf-8\nfrom __future__ import absolute_import, unicode_literals\n\nimport os\n\nfrom vfb2ufo3 import write_ufo\n\nuser_profile_folder = os.environ['USERPROFILE']\noutput_path = os.path.join(user_profile_folder, 'Documents', 'test_font')\n\ninstances = [\n\t0,\n\t200,\n\t400,\n\t650,\n\t1000,\n\t]\nnames = [\n\t'Thin',\n\t'Light',\n\t'Regular',\n\t'SemiBold',\n\t'Bold',\n\t]\nattributes = [\n\t{'openTypeOS2WeightClass': 200},\n\t{'openTypeOS2WeightClass': 300},\n\t{'openTypeOS2WeightClass': 400},\n\t{'openTypeOS2WeightClass': 600},\n\t{'openTypeOS2WeightClass': 700},\n\t]\n\nwrite_ufo(\n\toutput_path=output_path,\n\tinstance_values=instances,\n\tinstance_names=names,\n\tinstance_attributes=attributes,\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\t)\n\n-------------------------------------------------------------------------------\n</code></pre>\n<h3>Scale options</h3>\n<p>By default, the target UPM for UFO output is 1000. For a UPM other than 1000, say 2048, it should be set via the <code>scale_to_upm</code> option. The value from the <code>scale_to_upm</code> option is ignored if it is lower than 1000. Scaling can be turned off by setting <code>scale_auto</code> to <code>False</code>; this does not reduce conversion times.</p>\n<p>All scaling operations are performed independently from FontLab; if the <code>.vfb</code> instance(s)/master copy are being saved, the <code>.vfb</code> font and glyph values will be the original un-scaled values.</p>\n<h3>Instance options</h3>\n<p>When creating instances from a multiple master source font, lists of values, names (optional), and attributes (optional) should be provided to generate instance UFOs from the master font.</p>\n<p>If the source is a multiple master font and a list of instance values is not provided, a UFO for each master will be created.</p>\n<p>For multiple master fonts, the instance values list should be values in <code>tuple</code>- or <code>list</code>-form with a value for each axis. For single-axis fonts, if the list values are numerical, the values will be converted to single-element lists:</p>\n<p><strong>2-axis font</strong></p>\n<ul>\n<li>\n<p><code>instance_values = [[0, 1000], [200, 1000]]</code></p>\n</li>\n<li>\n<p><code>instance_values = [(0, 1000), (200, 1000)]</code></p>\n</li>\n</ul>\n<p><strong>1-axis font</strong></p>\n<ul>\n<li>\n<p><code>instance_values = [[0], [200]]</code></p>\n</li>\n<li>\n<p><code>instance_values = [(0,), (200,)]</code></p>\n</li>\n<li>\n<p><code>instance_values = [0, 200]</code> becomes <code>[[0], [200]]</code></p>\n</li>\n</ul>\n<p>If the optional lists of names and/or attributes are provided in addition to a list of values, they must be of the same length as the values list. A <code>ValueError</code> will be raised if the lengths do not match, since this will likely produce undesirable results:</p>\n<p><em><strong>Correct:</strong></em></p>\n<pre><code>instance_values = [(0, 1000), (200, 1000)]\ninstance_names = ['Light Display', 'Regular Display']\n</code></pre>\n<p><em><strong>Incorrect (<code>ValueError</code>):</strong></em></p>\n<pre><code>instance_values = [(0, 1000), (200, 1000)]\ninstance_names = ['Light Display']\n</code></pre>\n<h3>Glyph options</h3>\n<p>Glyph scaling is independent from the <code>.vfb</code> instance itself; if the <code>.vfb</code> instance is being saved, the glyphs in the <code>.vfb</code> will remain un-scaled.</p>\n<p>Glyph decomposition and overlap removal is optional and occurs after instances are generated. This option is intended for final output when a binary font will be created from the UFO.</p>\n<p>By default, when decomposing and removing overlaps from glyph outlines for export, GLIF files for glyphs containing components will be built using contours from each component's base contours.</p>\n<p>When decomposing only, the optimization outlined above will be used for all glyphs containing components.</p>\n<p>The generated <code>.vfb</code> instance(s) will leave components in component-form.</p>\n<p>To disable the optimizations outlined above, set the <code>glyphs_optimize</code> option to <code>False</code>.</p>\n<p><strong>Omit glyphs from instance</strong></p>\n<ul>\n<li>A list of glyph suffixes and/or glyph names can be supplied that should be omitted from the instance UFO via the <code>glyphs_omit_suffixes</code> and <code>glyphs_omit_names</code> options, respectively.</li>\n</ul>\n<p><strong>Optimize glyph name and code point lists</strong></p>\n<ul>\n<li>\n<p>If removing overlaps, the default list of code points for glyphs to be constructed in the above manner is composed of glyphs that normally have no overlapping components. The list is located in the <code>ufo.pxi</code> source file with the character representations for these code points shown below.</p>\n</li>\n<li>\n<p>The code points from the default code point list can be shown by running the <code>vfb2ufo3.show_default_optimize_code_points()</code> function. The code points will print to the FontLab output window and can then be copied into a text editor and edited as needed.</p>\n</li>\n<li>\n<p>A user-supplied code point list (<code>glyphs_optimize_code_points</code>) can be a list of <code>'0x00ac'</code>-format strings, integers in hexadecimal-form (<code>0x00ac</code>), or numeric integers (<code>172</code>); values which cannot be converted to an integer will raise a <code>ValueError</code>. Only the first code point in each glyph's list of code points (FontLab <em>unicodes</em> attribute) is checked for code point set membership.</p>\n</li>\n<li>\n<p>A user-supplied glyph name list (<code>glyphs_optimize_names</code>) can be supplied to supplement the code point list for glyphs. Any glyphs containing components that do not overlap should be added to this list.</p>\n</li>\n<li>\n<p>Small case variants of the code points in the code point list will be also added to code point list assuming they end with <code>.sc</code>, <code>.smcp</code>, or <code>.c2sc</code> suffixes.</p>\n</li>\n</ul>\n<h4><code>OPTIMIZE_CODE_POINTS</code></h4>\n<pre><code>Latin\n\u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u0100 \u0102 \u01e2 \u01fc \u0200 \u0202 \u01cd \u0226\n\u1e06\n\u0106 \u0108 \u010a \u010c\n\u010e \u1e0c \u1e0e \u1e12\n\u00c8 \u00c9 \u00ca \u00cb \u0112 \u0114 \u0116 \u0116 \u0204 \u0206\n\u011c \u011e \u0120 \u0122 \u1e20 \u01e6 \u01f4\n\u0124 \u1e24 \u1e2a\n\u00cc \u00cd \u0128 \u012a \u012c \u0130 \u00ce \u00cf \u0208 \u020a \u01cf\n\u0134\n\u0136 \u1e32 \u1e34\n\u0139 \u013b \u013d \u013f \u1e36 \u1e38 \u1e3a \u1e3c\n\u1e3e \u1e40 \u1e42\n\u00d1 \u0143 \u0145 \u0147 \u1e44 \u1e46 \u1e48 \u1e4a \u01f8\n\u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u014c \u014e \u0150 \u020c \u020e \u022e \u01d1\n\u0156 \u0158 \u0154 \u1e58 \u1e5a \u1e5c \u1e5e \u0210 \u0212\n\u015a \u015c \u015e \u0218 \u0160 \u1e62\n\u0162 \u021a \u0164 \u1e6c \u1e6e \u1e70\n\u0168 \u016a \u016c \u016e \u0170 \u00d9 \u00da \u00db \u00dc \u0214 \u0216 \u01d3 \u01d5 \u01d7 \u01d9 \u01db\n\u1e7e\n\u0174 \u1e80 \u1e82 \u1e84 \u1e86\n\u1e8a \u1e8c\n\u0176 \u0178 \u00dd \u1e8e \u0232\n\u0179 \u017b \u017d \u1e90 \u1e92 \u1e94\n\u0132 \u01c7 \u01ca \u01c8 \u01cb\n\u01f1 \u01c4 \u01f2 \u01c5\n\u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u0101 \u0103 \u01e3 \u01fd \u0201 \u0203 \u01ce \u0227\n\u1e07\n\u0107 \u0109 \u010b \u010d\n\u010f \u1e0d \u1e0f \u1e13\n\u00e8 \u00e9 \u00ea \u00eb \u0113 \u0115 \u0117 \u011b \u0205 \u0207\n\u011d \u011f \u0121 \u0123 \u1e21 \u01e7 \u01f5\n\u0125 \u1e96 \u1e25 \u1e2b\n\u00ec \u00ed \u0129 \u012b \u012d \u00ee \u00ef \u0209 \u020b \u01d0\n\u0135 \u01f0\n\u0137 \u1e33 \u1e35\n\u013a \u013c \u013e \u0140 \u1e37 \u1e39 \u1e3b \u1e3d\n\u1e3f \u1e41 \u1e43\n\u0144 \u0146 \u0148 \u0149 \u00f1 \u1e45 \u1e47 \u1e49 \u1e4b \u01f9\n\u00f2 \u00f3 \u014d \u014f \u0151 \u00f4 \u00f5 \u00f6 \u020d \u020f \u022f \u01d2\n\u0157 \u0159 \u0155 \u1e59 \u1e5b \u1e5d \u1e5f \u0211 \u0213\n\u015b \u015d \u015f \u0219 \u0161 \u1e63\n\u0163 \u021b \u0165 \u1e6d \u1e6f \u1e71\n\u0169 \u016b \u016d \u016f \u0171 \u00f9 \u00fa \u00fb \u00fc \u0215 \u0217 \u01d4 \u01d6 \u01d8 \u01da \u01dc\n\u1e7f\n\u0175 \u1e81 \u1e83 \u1e85 \u1e87\n\u1e8b \u1e8d\n\u00fd \u00ff \u0177 \u1e8f \u0233\n\u017a \u017c \u017e \u1e91 \u1e93 \u1e95\n\u0133 \u01c9 \u01cc\n\u01f3 \u01c6\n\nCyrillic\n\u0403 \u040c \u040d \u0419 \u04e2 \u04e4 \u040e \u04dc \u04c1 \u0400 \u0401 \u04d6 \u04de \u0476 \u04d8 \u04da \u0405 \u0406 \u0407 \u0408 \u04d0 \u04d2 \u04d4 \u04e6 \u04ee \u04f0 \u04f2 \u04f4 \u04f8 \u04c0 \u04c0\n\u0453 \u045c \u045d \u0439 \u04e3 \u04e5 \u045e \u04dd \u04c2 \u0450 \u0451 \u04d7 \u04df \u0477 \u04d9 \u04db \u0455 \u0456 \u0457 \u0458 \u04d1 \u04d3 \u04d5 \u04e7 \u04ef \u04f1 \u04f3 \u04f5 \u04f9\n\nGreek Mono- and Polytonic\n\u1f08 \u1f09 \u1f0a \u1f0b \u1f0c \u1f0d \u1f0e \u1f0f \u1f88 \u1f89 \u1f8a \u1f8b \u1f8c \u1f8d \u1f8e \u1f8f \u1fb8 \u1fb9 \u1fba \u1fbb \u1fbc\n\u1f18 \u1f19 \u1f1a \u1f1b \u1f1c \u1f1d \u1fc8 \u1fc9\n\u1f28 \u1f29 \u1f2a \u1f2b \u1f2c \u1f2d \u1f2e \u1f2f \u1f98 \u1f99 \u1f9a \u1f9b \u1f9c \u1f9d \u1f9e \u1f9f \u1fca \u1fcb \u1fcc\n\u1f38 \u1f39 \u1f3a \u1f3b \u1f3c \u1f3d \u1f3e \u1f3f \u1fd8 \u1fd9 \u1fda \u1fdb\n\u1f48 \u1f49 \u1f4a \u1f4b \u1f4c \u1f4d \u1ff8 \u1ff9\n\u1fec\n\u1f59 \u1f5b \u1f5d \u1f5f \u1fe8 \u1fe9 \u1fea \u1feb\n\u1f68 \u1f69 \u1f6a \u1f6b \u1f6c \u1f6d \u1f6e \u1f6f \u1fa8 \u1fa9 \u1faa \u1fab \u1fac \u1fad \u1fae \u1faf \u1ffa \u1ffb \u1ffc\n\u1f00 \u1f01 \u1f02 \u1f03 \u1f04 \u1f05 \u1f06 \u1f07 \u1f80 \u1f81 \u1f82 \u1f83 \u1f84 \u1f85 \u1f86 \u1f87 \u1fb0 \u1fb1 \u1fb2 \u1fb3 \u1fb4 \u1fb6 \u1fb7 \u1f70 \u1f71\n\u1f10 \u1f11 \u1f12 \u1f13 \u1f14 \u1f15 \u1f72 \u1f73\n\u1f20 \u1f21 \u1f22 \u1f23 \u1f24 \u1f25 \u1f26 \u1f27 \u1f90 \u1f91 \u1f92 \u1f93 \u1f94 \u1f95 \u1f96 \u1f97 \u1fc2 \u1fc3 \u1fc4 \u1fc6 \u1fc7 \u1f74 \u1f75\n\u1f30 \u1f31 \u1f32 \u1f33 \u1f34 \u1f35 \u1f36 \u1f37 \u1fd0 \u1fd1 \u1fd2 \u1fd3 \u1fd6 \u1fd7 \u1f76 \u1f77\n\u1f40 \u1f41 \u1f42 \u1f43 \u1f44 \u1f45 \u1f78 \u1f79\n\u1fe4 \u1fe5\n\u1f50 \u1f51 \u1f52 \u1f53 \u1f54 \u1f55 \u1f56 \u1f57 \u1fe0 \u1fe1 \u1fe2 \u1fe3 \u1f7a \u1f7b \u1fe6 \u1fe7\n\u1f60 \u1f61 \u1f62 \u1f63 \u1f64 \u1f65 \u1f66 \u1f67 \u1fa0 \u1fa1 \u1fa2 \u1fa3 \u1fa4 \u1fa5 \u1fa6 \u1fa7 \u1ff2 \u1ff3 \u1ff4 \u1ff6 \u1ff7 \u1f7c \u1f7d\n</code></pre>\n<h4>Features options</h4>\n<p>Font groups can be added to the <code>features.fea</code> file on export by setting <code>features_import_groups</code> to <code>True</code>. The font's features are neither formatted nor checked for correctness. Users are responsible for moving referenced feature files from <code>include()</code> statements to the chosen output directory. Also see <strong>KERN FEATURE OPTIONS</strong> and <strong>MARK FEATURE OPTIONS</strong> below for <code>kern</code> and <code>mark</code> feature options.</p>\n<h4>Kern feature options</h4>\n<p>Kern values will be scaled in parity with the output UFO. This scaling is independent from the created <code>.vfb</code> instance. A minimum value can be set using <code>kern_min_value</code>. This value should be a positive integer and when set, all kern values (negative and positive) not above the threshold will be omitted from the <code>kern</code> feature.</p>\n<p>By default, the <code>kern</code> feature from the master font is not included in the <code>features.fea</code> file. To include the <code>kern</code> feature from the master font, <code>kern_feature_passthrough</code> should be set to <code>True</code>.</p>\n<p>An external feature file with a <code>kern</code> feature can be imported to the font features using the <code>kern_feature_file_path</code> option, which expects a path to a text file with the <code>.fea</code> extension.</p>\n<p>By default, a new <code>kern</code> feature is generated for each instance. Setting <code>kern_feature_generate</code> to <code>False</code> will turn this off. The <code>kern</code> feature generation will add subtables and a lookup as necessary. This is not particularly elegant, and so far, no checks are made to guarantee a working <code>kern</code> feature. Any remaining subtable overflows may be due to glyph(s) being in more than one kern group of the same side; however overflows can also be caused by issues from one or more <code>GPOS</code> features located earlier in the feature list.</p>\n<h4>Mark feature options</h4>\n<p>A <code>mark</code> feature can be generated on export by setting <code>mark_feature_generate</code> to <code>True</code>. A list of anchor names to omit (<code>mark_anchors_omit</code>) or a list of anchor names to include (<code>mark_anchors_include</code>) can be supplied to fine-tune the <code>mark</code> feature output.</p>\n<h4>Group options</h4>\n<p>Providing a FontLab-class file (<code>.flc</code>) or <code>groups.plist</code> speeds up UFO creation time significantly when the group names are not named using first and second group identifiers (see <code>groups_flc_path</code> and <code>groups_plist_path</code> options). Group names in the <code>.flc</code> file do not have match any specific formatting (e.g. <code>MMK_R_&lt;key glyph&gt;</code>, <code>public.kern2.&lt;key glyph&gt;</code>).</p>\n<p>When not using either a <code>.flc</code> or <code>groups.plist</code> file, group names will be checked for UFO3-style group identifiers (<code>public.kern1.&lt;key glyph&gt;</code>, <code>public.kern2.&lt;key glyph&gt;</code>), MetricsMachine-style identifiers (<code>MMK_L_&lt;key glyph&gt;</code>, <code>MMK_R_&lt;key glyph&gt;</code>), and the simpler <code>_L</code> and <code>_R</code> identifier suffixes. Groups which either have no kerning or are not identifiable using their name will be identified as first/second using FontLab's built-in <code>GetClassLeft</code>/<code>GetClassRight</code> methods.</p>\n<p>If the <code>export_flc</code> option is set to <code>True</code>, a FontLab-class file (<code>.flc</code>) will be generated with group names matching those of the generated UFOs. This file will be located in the same directory as the generated UFO(s).</p>\n<p>The <code>kern_ignore_no_kerning</code> option can be set to <code>True</code> to ignore groups which have no kerning pairs. This may be desirable if making a binary font from the UFO. This option has no effect when using an imported <code>.flc</code> or <code>groups.plist</code> file.</p>\n<p>FontLab kern classes without a key glyph in a provided <code>.flc</code> file or in the master font's kern classes will have the first glyph in the FontLab class marked as the key glyph and it will be noted in the output console. If there is more than one glyph marked as a key glyph, the first marked glyph is considered the key glyph. These key glyph operations <em>may</em> affect the kerning. An imported <code>groups.plist</code> infers that the glyph in the group name is the key glyph.</p>\n<p><strong>Kern group naming recommendations</strong></p>\n<pre><code>Typical FontLab-style kerning groups:\n_A: A' Agrave Aacute Acircumflex Atilde Adieresis Aring...\n_A_r: A' AE Agrave Aacute Acircumflex Atilde Adieresis Aring...\n\nRecommended naming for FontLab-style kerning groups:\n_public.kern1.A: A' Agrave Aacute Acircumflex Atilde Adieresis Aring...\n_public.kern2.A: A' AE Agrave Aacute Acircumflex Atilde Adieresis Aring...\n\nFinal output (UFO group plist):\n&lt;key&gt;public.kern1.A&lt;/key&gt;\n&lt;array&gt;\n\t&lt;string&gt;A&lt;/string&gt;\n\t&lt;string&gt;Agrave&lt;/string&gt;\n\t&lt;string&gt;Aacute&lt;/string&gt;\n\t&lt;string&gt;Acircumflex&lt;/string&gt;\n\t&lt;string&gt;Atilde&lt;/string&gt;\n\t&lt;string&gt;Adieresis&lt;/string&gt;\n\t&lt;string&gt;Aring&lt;/string&gt;\n\t...\n&lt;/array&gt;\n\n&lt;key&gt;public.kern2.A&lt;/key&gt;\n&lt;array&gt;\n\t&lt;string&gt;A&lt;/string&gt;\n\t&lt;string&gt;AE&lt;/string&gt;\n\t&lt;string&gt;Agrave&lt;/string&gt;\n\t&lt;string&gt;Aacute&lt;/string&gt;\n\t&lt;string&gt;Acircumflex&lt;/string&gt;\n\t&lt;string&gt;Atilde&lt;/string&gt;\n\t&lt;string&gt;Adieresis&lt;/string&gt;\n\t&lt;string&gt;Aring&lt;/string&gt;\n\t...\n&lt;/array&gt;\n</code></pre>\n<h4>AFDKO options</h4>\n<p>The <code>OS/2</code>, <code>hhea</code>, <code>head</code>, and <code>name</code> tables will be added to the features file. The <code>name</code> table entry strings will be formatted according to <a href=\"https://adobe-type-tools.github.io/afdko/OpenTypeFeatureFileSpecification.html#9.e\" rel=\"nofollow\">OpenType Feature File Specification \u00a7 9.e</a>. Any strings unable to be formatted fully for each platform's specific encoding restriction (Windows -- <a href=\"https://en.wikipedia.org/wiki/UTF-8\" rel=\"nofollow\"><code>UTF-8</code></a>, Macintosh -- <a href=\"https://en.wikipedia.org/wiki/Mac_OS_Roman\" rel=\"nofollow\"><code>Mac OS Roman</code></a>) will be formatted to their nearest ASCII equivalent rather than omitting any un-encodable characters. The standard library <a href=\"https://docs.python.org/2.7/library/unicodedata.html\" rel=\"nofollow\"><code>unicodedata</code></a> module is used for any entries meeting this criteria.</p>\n<p><em><a href=\"https://adobe-type-tools.github.io/afdko/MakeOTFUserGuide.pdf\" rel=\"nofollow\">GlyphOrderAndAliasDB</a></em> (GOADB) and <em><a href=\"https://adobe-type-tools.github.io/afdko/MakeOTFUserGuide.pdf\" rel=\"nofollow\">FontMenuNameDB</a></em> files can be generated for use with MakeOTF. The GOADB can be provided (<code>afdko_makeotf_GOADB_path</code>), derived from the <code>.vfb</code>'s original encoding, or the order of the source font.</p>\n<p>Optionally, the first 256 glyphs can be filled from the <a href=\"https://en.wikipedia.org/wiki/Windows-1252\" rel=\"nofollow\"><code>Windows-1252</code></a> or <a href=\"https://en.wikipedia.org/wiki/Mac_OS_Roman\" rel=\"nofollow\"><code>Mac OS Roman</code></a> code pages (<code>afdko_makeotf_GOADB_win1252</code>, <code>afdko_makeotf_GOADB_macos_roman</code>). The first character of a generated GOADB file will always start with the <code>.notdef</code> glyph. If a GOADB file is provided, it is not checked for correctness. Commands to run MakeOTF for each generated instance separately or all instances as a batch using the options <code>afdko_makeotf_cmd</code> and <code>afdko_makeotf_batch_cmd</code>, respectively.</p>\n<p>There are several explicit keyword options to enable specific MakeOTF switches. For those not available via a keyword option, they should be defined as a list of strings and passed to the <code>afdko_makeotf_args</code> option.</p>\n<h4>psautohint options</h4>\n<p><a href=\"https://github.com/adobe-type-tools/psautohint\" rel=\"nofollow\"><code>psautohint</code></a> can be utilized for generating glyph hints after UFO generation. Commands to run <code>psautohint</code> for each generated instance separately or all instances as a batch using the options <code>psautohint_cmd</code> and <code>psautohint_batch_cmd</code>, respectively. The default options are <code>-d</code> (write decimal (float) hint coordinates) and <code>-w</code> (write hints directly to the .glif lib for each glyph).</p>\n<h4>UFOZ options</h4>\n<p>UFO instances can be written as a <code>.ufoz</code> archive. If you are planning on any file transfer operations after creation, transferring a single <code>.ufoz</code> file is much quicker than the large number of small text files in the generated UFO instance(s), especially when transferring through USB. By default, archives are written in compressed mode. Compression can be turned off by setting <code>ufoz_compress</code> to <code>False</code>.</p>\n<h4><code>.designspace</code> font options</h4>\n<p>A <code>.designspace</code> document can be created in place of individual UFO instances. A UFO for each master will be generated and the instances will be described in the <code>.designspace</code> document. A default instance can be described with the <code>designspace_default</code> option. This value must be a list or tuple with a value for each axis in the font. If <code>glyphs_omit_list</code> or <code>glyphs_omit_suffixes_list</code> lists are provided, the glyphs will remain in the source UFOs and a glyph mute rule for each glyph to be omitted will be added for each instance.</p>\n<h4>Benchmarks</h4>\n<p>For reference, testing was performed on a Windows 10 machine with an Intel Xeon E5 1650v3 @ 3.5 GHz CPU and a solid-state hard drive.</p>\n<p>Times are per-instance (\u00b1.5 sec) and do not include time to load and parse user options, then copy the original font and prepare the copy for conversion to the UFO format. This prep time increases when not providing a FontLab-class or <code>groups.plist</code> file.</p>\n<p>The <code>ufoz</code> option will reduce times by 0 - 0.5 sec.</p>\n<p><strong>Test (~3200 glyphs @ 10,000 UPM -&gt; 1,000 UPM), &lt;10 sec</strong></p>\n<pre><code>flc_path = &lt;path to .flc file&gt;\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\tgroups_flc_path=flc_path,\n\t)\n</code></pre>\n<p><strong>Test (~2900 glyphs @ 10,000 UPM -&gt; 1,000 UPM), \u22489 sec</strong></p>\n<pre><code>flc_path = &lt;path to .flc file&gt;\nglyphs_omit_list = [\n\t&lt;glyph names to be omitted go here&gt;\n\t]\nglyphs_omit_suffixes_list = [\n\t&lt;glyph name suffixes to be omitted go here&gt;\n\t]\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\tglyphs_omit_list=glyphs_omit_list,\n\tglyphs_omit_suffixes_list=glyphs_omit_suffixes_list,\n\tgroups_flc_path=flc_path,\n\t)\n</code></pre>\n<p><strong>Test (~2900 glyphs @ 10,000 UPM -&gt; 1,000 UPM), \u22487 sec</strong></p>\n<pre><code>flc_path = &lt;path to .flc file&gt;\nglyphs_optimize_names = [\n\t&lt;glyph names with no overlapping components go here&gt;\n\t]\nglyphs_omit_list = [\n\t&lt;glyph names to be omitted go here&gt;\n\t]\nglyphs_omit_suffixes_list = [\n\t&lt;glyph name suffixes to be omitted go here&gt;\n\t]\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_remove_overlaps=True,\n\tglyphs_optimize_names=glyphs_optimize_names,\n\tglyphs_omit_list=glyphs_omit_list,\n\tglyphs_omit_suffixes_list=glyphs_omit_suffixes_list,\n\tgroups_flc_path=flc_path,\n\t)\n</code></pre>\n<p><strong>Test (~2900 glyphs @ 10,000 UPM -&gt; 1,000 UPM), \u22484 sec</strong></p>\n<pre><code>flc_path = &lt;path to .flc file&gt;\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tgroups_flc_path=flc_path,\n\t)\n</code></pre>\n<p><strong>Test (~2900 glyphs @ 10,000 UPM -&gt; 1,000 UPM), \u22483-4 sec</strong></p>\n<pre><code>flc_path = &lt;path to .flc file&gt;\nglyphs_omit_list = [\n\t&lt;glyph names to be omitted go here&gt;\n\t]\nglyphs_omit_suffixes_list = [\n\t&lt;glyph name suffixes to be omitted go here&gt;\n\t]\n\nvfb2ufo3.write_ufo(\n\tglyphs_decompose=True,\n\tglyphs_omit_list=glyphs_omit_list,\n\tglyphs_omit_suffixes_list=glyphs_omit_suffixes_list,\n\tgroups_flc_path=flc_path,\n\t)\n</code></pre>\n<p><strong>Test (~3200 glyphs @ 10,000 UPM -&gt; 1,000 UPM), \u22483-4 sec</strong></p>\n<pre><code>flc_path = &lt;path to .flc file&gt;\n\nvfb2ufo3.write_ufo(\n\tgroups_flc_path=flc_path,\n\t)\n</code></pre>\n<h4>Notes</h4>\n<p>Generally, no assumptions are made about the correctness of the input. When <code>adfko_makeotf_release</code> mode is set, glyph name errors will raise an exception and UFO generation will not continue. Glyph name checks are made prior to building instances. Other errors in the original font will likely be passed through to the UFO.</p>\n<h4>Author</h4>\n<p>Jameson R Spires</p>\n<h4>License</h4>\n<p>This package is available under the <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a></p>\n<h4>Version history</h4>\n<ul>\n<li>\n<p>version 0.6.2<br>\nreplaced <code>push_back</code> with <code>emplace_back</code> where possible<br>\ncorrections to shifted and scaled contour-from-component builds</p>\n</li>\n<li>\n<p>version 0.6.1<br>\nsmall corrections</p>\n</li>\n<li>\n<p>version 0.6.0<br>\nsmall fix for single-master font builds<br>\nsmall changes to several source files<br>\n<code>glif.pyx</code> has been rewritten in C++ as much as possible</p>\n</li>\n<li>\n<p>version 0.5.2<br>\nsmall change to <code>groups.pyx</code><br>\nre-added link to known working GCC compiler</p>\n</li>\n<li>\n<p>version 0.5.1<br>\nmajority of code base rewritten<br>\nsupport for UFO3 specification only<br>\nconsiderable improvement in UFO creation times<br>\ncorrected UFOZ build structure<br>\nremoved hint operations, added psautohint batch command options<br>\nimproved option handling<br>\nimproved group conversion<br>\nnative <code>kern</code> and <code>mark</code> feature generation</p>\n</li>\n<li>\n<p>version 0.3.1<br>\nupdated sample script</p>\n</li>\n<li>\n<p>version 0.3.0<br>\nadditional documentation<br>\nslight improvement in glif and .glif file creation times<br>\nadded sample benchmark times</p>\n</li>\n<li>\n<p>version 0.2.0<br>\nminor formatting<br>\nchange to plistlib for groups.plist import<br>\nremoved commented lines in <code>__init__.py</code><br>\nadded <code>futures</code> package as a required package<br>\nadded module to PyPi</p>\n</li>\n<li>\n<p>version 0.1.0<br>\ninitial release</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6759291, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "b144050704b755e3e97c02b95cce9213", "sha256": "31dbab5d33cebb965ed29e90ed29885ffae146029640c713144e103e6f4f0b09"}, "downloads": -1, "filename": "vfb2ufo3-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b144050704b755e3e97c02b95cce9213", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 658244, "upload_time": "2019-05-21T08:04:08", "upload_time_iso_8601": "2019-05-21T08:04:08.535903Z", "url": "https://files.pythonhosted.org/packages/6e/76/d2ecb897769d8c0775d664c30af174d62803a0a32fbb13f52c0427322511/vfb2ufo3-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "06914b8bc2d6d5eafcf8755fd486cb9c", "sha256": "9907975d5c489dde84d8cef04e26024e2e0b2a0efeded3a03b54ad586ccaec65"}, "downloads": -1, "filename": "vfb2ufo3-0.3.0.tar.gz", "has_sig": false, "md5_digest": "06914b8bc2d6d5eafcf8755fd486cb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 708537, "upload_time": "2019-05-27T15:40:40", "upload_time_iso_8601": "2019-05-27T15:40:40.943719Z", "url": "https://files.pythonhosted.org/packages/bc/cb/5d72f7317a7437eaff6714bcfdbe3c659de8ad089028dd41cd1284c15e9a/vfb2ufo3-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "a58c2e565573b989de376f0a3bf358ca", "sha256": "6e50f59bcc7012637d9b38292920fd68246a59a8fd22867a84a1da5e0c1343e4"}, "downloads": -1, "filename": "vfb2ufo3-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a58c2e565573b989de376f0a3bf358ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 708535, "upload_time": "2019-05-27T15:53:51", "upload_time_iso_8601": "2019-05-27T15:53:51.331254Z", "url": "https://files.pythonhosted.org/packages/bd/05/7153de71e3b0a77ccf2e79d99309c284e658462516df022152b19425e112/vfb2ufo3-0.3.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "e5fcca5ae2b11364d9836275166a9d18", "sha256": "3e4e64f3e19c5f094decd8237c2c4f5087c369b6aff7b01e10c6ca652c469836"}, "downloads": -1, "filename": "vfb2ufo3-0.5.1.tar.gz", "has_sig": false, "md5_digest": "e5fcca5ae2b11364d9836275166a9d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1209658, "upload_time": "2019-08-10T07:17:23", "upload_time_iso_8601": "2019-08-10T07:17:23.351554Z", "url": "https://files.pythonhosted.org/packages/37/4c/ea1e5e700e67bd9a9da32e0cbbfef24e145faf93d04787679b71685ecb7a/vfb2ufo3-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "12d44daab8cdcd1f9ba457c1028213c7", "sha256": "602867678efb74a03645d87e3d909867fd9dd19bc4ee2846c4a9c971810d01c2"}, "downloads": -1, "filename": "vfb2ufo3-0.6.0.tar.gz", "has_sig": false, "md5_digest": "12d44daab8cdcd1f9ba457c1028213c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1519581, "upload_time": "2020-02-29T05:02:12", "upload_time_iso_8601": "2020-02-29T05:02:12.955595Z", "url": "https://files.pythonhosted.org/packages/43/31/28d9eb0dc769de65a474b29ca469f28fd66fa14f6b5de05100719b8b8dd0/vfb2ufo3-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d41f1d89cf310922935860b7752fbd37", "sha256": "c7d1d811a3f16bdcc9315ec0ab443dfa7ab5363969ba7ff360c7de3f6108b077"}, "downloads": -1, "filename": "vfb2ufo3-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d41f1d89cf310922935860b7752fbd37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1519461, "upload_time": "2020-03-02T06:35:19", "upload_time_iso_8601": "2020-03-02T06:35:19.254785Z", "url": "https://files.pythonhosted.org/packages/23/8c/d764c3115bc8ef07ee43b8371d784857a0e280d4181840bdfa186770ea07/vfb2ufo3-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "e45abeb170c0896e9d98e691bba66eef", "sha256": "25e5fd54b29b3a35a0a62bff817d3a0cf00c473fdb039fd36e2b423c7fdba071"}, "downloads": -1, "filename": "vfb2ufo3-0.6.2.tar.gz", "has_sig": false, "md5_digest": "e45abeb170c0896e9d98e691bba66eef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1540805, "upload_time": "2020-03-06T03:11:39", "upload_time_iso_8601": "2020-03-06T03:11:39.385339Z", "url": "https://files.pythonhosted.org/packages/18/bd/56c53bdbec0c1c8465b52bf02bdd223d34cece3ceb82e599a4f043d8f0c9/vfb2ufo3-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e45abeb170c0896e9d98e691bba66eef", "sha256": "25e5fd54b29b3a35a0a62bff817d3a0cf00c473fdb039fd36e2b423c7fdba071"}, "downloads": -1, "filename": "vfb2ufo3-0.6.2.tar.gz", "has_sig": false, "md5_digest": "e45abeb170c0896e9d98e691bba66eef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1540805, "upload_time": "2020-03-06T03:11:39", "upload_time_iso_8601": "2020-03-06T03:11:39.385339Z", "url": "https://files.pythonhosted.org/packages/18/bd/56c53bdbec0c1c8465b52bf02bdd223d34cece3ceb82e599a4f043d8f0c9/vfb2ufo3-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:28 2020"}