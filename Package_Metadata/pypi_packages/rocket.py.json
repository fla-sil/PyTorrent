{"info": {"author": "Giovani Hidalgo Ceotto", "author_email": "ghceotto@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": ".. image:: https://readthedocs.org/projects/rocketpyalpha/badge/?version=latest\n :target: https://rocketpyalpha.readthedocs.io/en/latest/?badge=latest\n :alt: Documentation Status\n\n.. image:: https://colab.research.google.com/assets/colab-badge.svg\n :target: https://colab.research.google.com/github/giovaniceotto/rocketpy/blob/master/docs/notebooks/getting_started_colab.ipynb\n\n.. image:: https://mybinder.org/badge_logo.svg\n :target: https://mybinder.org/v2/gh/giovaniceotto/RocketPy/master?filepath=docs%2Fnotebooks%2Fgetting_started.ipynb\n\nRocketPy\n========\n\nRocketPy is a trajectory simulation for High-Power Rocketry built by\n`Projeto Jupiter <https://www.facebook.com/ProjetoJupiter/>`__. The code\nis written as a `Python <http://www.python.org>`__ library and allows\nfor a complete 6 degrees of freedom simulation of a rocket's flight\ntrajectory, including high fidelity variable mass effects as well as\ndescent under parachutes. Weather conditions, such as wind profile, can\nbe imported from sophisticated datasets, allowing for realistic\nscenarios. Furthermore, the implementation facilitates complex\nsimulations, such as multi-stage rockets, design and trajectory\noptimization and dispersion analysis.\n\nPreviewing\n----------\n\nYou can preview RocketPy's main functionalities by browsing through a sample notebook either in `Google Colab <https://colab.research.google.com/github/giovaniceotto/rocketpy/blob/master/docs/notebooks/getting_started_colab.ipynb>`__ or in `MyBinder <https://mybinder.org/v2/gh/giovaniceotto/RocketPy/master?filepath=docs%2Fnotebooks%2Fgetting_started.ipynb>`__!\n\nThen, you can read the *Getting Started* section to get your own copy!\n\nGetting Started\n---------------\n\nThese instructions will get you a copy of RocketPy up and running on\nyour local machine.\n\nPrerequisites\n~~~~~~~~~~~~~\n\nThe following is needed in order to run RocketPy:\n\n-  Python >= 3.0\n-  Numpy >= 1.0\n-  Scipy >= 1.0\n-  Matplotlib >= 3.0\n-  requests\n-  netCDF4 >= 1.4 (optional, requires Cython)\n\nAll of these packages, with the exception of netCDF4, should be automatically\ninstalled when RocketPy is installed using either pip or conda.\n\nHowever, in case the user wants to install these packages manually, they can do\nso by following the instructions bellow:\n\nThe first 4 prerequisites come with Anaconda, but Scipy might need\nupdating. The nedCDF4 package can be installed if there is interest in\nimporting weather data from netCDF files. To update Scipy and install\nnetCDF4 using Conda, the following code is used:\n\n::\n\n    $ conda install \"scipy>=1.0\"\n    $ conda install -c anaconda \"netcdf4>=1.4\"\n\nAlternatively, if you only have Python 3.X installed, the packages\nneeded can be installed using pip:\n\n::\n\n    $ pip install \"numpy>=1.0\"\n    $ pip install \"scipy>=1.0\"\n    $ pip install \"matplotlib>=3.0\"\n    $ pip install \"netCDF4>=1.4\"\n    $ pip install \"requests\"\n\nAlthough `Jupyter Notebooks <http://jupyter.org/>`__ are by no means\nrequired to run RocketPy, they are strongly recommend. They already come\nwith Anaconda builds, but can also be installed separately using pip:\n\n::\n\n    $ pip install jupyter\n\nInstallation\n~~~~~~~~~~~~\n\nTo get a copy of RocketPy using pip, just run:\n\n::\n\n    $ pip install rocketpyalpha\n\nAlternatively, the package can also be installed using conda:\n\n::\n\n    $ conda install -c conda-forge rocketpy\n\nIf you want to downloaded it from source, you may do so either by:\n\n-  Downloading it from `RocketPy's\n   GitHub <https://github.com/giovaniceotto/RocketPy>`__ page\n\n   -  Unzip the folder and you are ready to go\n\n-  Or cloning it to a desired directory using git:\n\n   -  ``$ git clone https://github.com/giovaniceotto/RocketPy.git``\n\nThe RockeyPy library can then be installed by running:\n\n::\n\n    $ python setup.py install \n\nDocumentation\n~~~~~~~~~~~~~\n\nYou can find RocketPy's documentation at `Read the Docs<https://rocketpyalpha.readthedocs.io/en/latest/>`__.\n\nRunning Your First Simulation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to run your first rocket trajectory simulation using RocketPy,\nyou can start a Jupyter Notebook and navigate to the ***nbks*** folder.\nOpen ***Getting Started - Examples.ipynb*** and you are ready to go.\n\nOtherwise, you may want to create your own script or your own notebook\nusing RocketPy. To do this, let's see how to use RocketPy's four main\nclasses:\n\n-  Environment - Keeps data related to weather.\n-  SolidMotor - Keeps data related to solid motors. Hybrid motor suport\n   is coming in the next weeks.\n-  Rocket - Keeps data related to a rocket.\n-  Flight - Runs the simulation and keeps the results.\n\nA typical workflow starts with importing these classes from RocketPy:\n\n.. code:: python\n\n    from rocketpy import Environment, Rocket, SolidMotor, Flight\n\nThen create an Environment object. To learn more about it, you can use:\n\n.. code:: python\n\n    help(Environment)\n\nA sample code is:\n\n.. code:: python\n\n    Env = Environment(\n        railLength=5.2,\n        latitude=32.990254,\n        longitude=-106.974998,\n        elevation=1400,\n        date=(2020, 3, 4, 12) # Tomorrow's date in year, month, day, hour UTC format\n    ) \n\n    Env.setAtmosphericModel(type='Forecast', file='GFS')\n\nThis can be followed up by starting a Solid Motor object. To get help on\nit, just use:\n\n.. code:: python\n\n    help(SolidMotor)\n\nA sample Motor object can be created by the following code:\n\n.. code:: python\n\n    Pro75M1670 = SolidMotor(\n        thrustSource=\"../data/motors/Cesaroni_M1670.eng\",\n        burnOut=3.9,\n        grainNumber=5,\n        grainSeparation=5/1000,\n        grainDensity=1815,\n        grainOuterRadius=33/1000,\n        grainInitialInnerRadius=15/1000,\n        grainInitialHeight=120/1000,\n        nozzleRadius=33/1000,\n        throatRadius=11/1000,\n        interpolationMethod='linear'\n    )\n\nWith a Solid Motor defined, you are ready to create your Rocket object.\nAs you may have guessed, to get help on it, use:\n\n.. code:: python\n\n    help(Rocket)\n\nA sample code to create a Rocket is:\n\n.. code:: python\n\n    Calisto = Rocket(\n        motor=Pro75M1670,\n        radius=127/2000,\n        mass=19.197-2.956,\n        inertiaI=6.60,\n        inertiaZ=0.0351,\n        distanceRocketNozzle=-1.255,\n        distanceRocketPropellant=-0.85704,\n        powerOffDrag='../data/calisto/powerOffDragCurve.csv',\n        powerOnDrag='../data/calisto/powerOnDragCurve.csv'\n    )\n\n    Calisto.setRailButtons([0.2, -0.5])\n\n    NoseCone = Calisto.addNose(length=0.55829, kind=\"vonKarman\", distanceToCM=0.71971)\n\n    FinSet = Calisto.addFins(4, span=0.100, rootChord=0.120, tipChord=0.040, distanceToCM=-1.04956)\n\n    Tail = Calisto.addTail(topRadius=0.0635, bottomRadius=0.0435, length=0.060, distanceToCM=-1.194656)\n\nYou may want to add parachutes to your rocket as well:\n\n.. code:: python\n\n    def drogueTrigger(p, y):\n        return True if y[5] < 0 else False\n\n    def mainTrigger(p, y):\n        return True if y[5] < 0 and y[2] < 800 else False\n\n    Main = Calisto.addParachute('Main',\n                                CdS=10.0,\n                                trigger=mainTrigger, \n                                samplingRate=105,\n                                lag=1.5,\n                                noise=(0, 8.3, 0.5))\n\n    Drogue = Calisto.addParachute('Drogue',\n                                  CdS=1.0,\n                                  trigger=drogueTrigger, \n                                  samplingRate=105,\n                                  lag=1.5,\n                                  noise=(0, 8.3, 0.5))\n\nFinally, you can create a Flight object to simulate your trajectory. To\nget help on the Flight class, use:\n\n.. code:: python\n\n    help(Flight)\n\nTo actually create a Flight object, use:\n\n.. code:: python\n\n    TestFlight = Flight(rocket=Calisto, environment=Env, inclination=85, heading=0)\n\nOnce the TestFlight object is created, your simulation is done! Use the\nfollowing code to get a summary of the results:\n\n.. code:: python\n\n    TestFlight.info()\n\nTo seel all available results, use:\n\n.. code:: python\n\n    TestFlight.allInfo()\n\nBuilt With\n----------\n\n-  `Numpy <http://www.numpy.org/>`__\n-  `Scipy <https://www.scipy.org/>`__\n-  `Matplotlib <https://matplotlib.org/>`__\n-  `netCDF4 <https://github.com/Unidata/netcdf4-python>`__\n\nContributing\n------------\n\nPlease read\n`CONTRIBUTING.md <https://github.com/giovaniceotto/RocketPy/blob/master/CONTRIBUTING.md>`__\nfor details on our code of conduct, and the process for submitting pull\nrequests to us. - ***Still working on this!***\n\nVersioning\n----------\n\n***Still working on this!***\n\nAuthors\n-------\n\n-  **Giovani Hidalgo Ceotto**\n\nSee also the list of\n`contributors <https://github.com/giovaniceotto/RocketPy/contributors>`__\nwho participated in this project.\n\nLicense\n-------\n\nThis project is licensed under the MIT License - see the\n`LICENSE.md <https://github.com/giovaniceotto/RocketPy/blob/master/LICENSE>`__\nfile for details\n\nAcknowledgments\n---------------\n\n***Still working on this!***\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/giovaniceotto/RocketPy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rocket.py", "package_url": "https://pypi.org/project/rocket.py/", "platform": "", "project_url": "https://pypi.org/project/rocket.py/", "project_urls": {"Homepage": "https://github.com/giovaniceotto/RocketPy"}, "release_url": "https://pypi.org/project/rocket.py/0.9.4/", "requires_dist": ["numpy (>=1.0)", "scipy (>=1.0)", "matplotlib (>=3.0)", "requests"], "requires_python": ">=3.6", "summary": "Advanced 6-DOF trajectory simulation for High-Power Rocketry.", "version": "0.9.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>.. image:: <a href=\"https://readthedocs.org/projects/rocketpyalpha/badge/?version=latest\" rel=\"nofollow\">https://readthedocs.org/projects/rocketpyalpha/badge/?version=latest</a>\n:target: <a href=\"https://rocketpyalpha.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\">https://rocketpyalpha.readthedocs.io/en/latest/?badge=latest</a>\n:alt: Documentation Status</p>\n<p>.. image:: <a href=\"https://colab.research.google.com/assets/colab-badge.svg\" rel=\"nofollow\">https://colab.research.google.com/assets/colab-badge.svg</a>\n:target: <a href=\"https://colab.research.google.com/github/giovaniceotto/rocketpy/blob/master/docs/notebooks/getting_started_colab.ipynb\" rel=\"nofollow\">https://colab.research.google.com/github/giovaniceotto/rocketpy/blob/master/docs/notebooks/getting_started_colab.ipynb</a></p>\n<p>.. image:: <a href=\"https://mybinder.org/badge_logo.svg\" rel=\"nofollow\">https://mybinder.org/badge_logo.svg</a>\n:target: <a href=\"https://mybinder.org/v2/gh/giovaniceotto/RocketPy/master?filepath=docs%2Fnotebooks%2Fgetting_started.ipynb\" rel=\"nofollow\">https://mybinder.org/v2/gh/giovaniceotto/RocketPy/master?filepath=docs%2Fnotebooks%2Fgetting_started.ipynb</a></p>\n<h1>RocketPy</h1>\n<p>RocketPy is a trajectory simulation for High-Power Rocketry built by\n<code>Projeto Jupiter &lt;https://www.facebook.com/ProjetoJupiter/&gt;</code><strong>. The code\nis written as a <code>Python &lt;http://www.python.org&gt;</code></strong> library and allows\nfor a complete 6 degrees of freedom simulation of a rocket's flight\ntrajectory, including high fidelity variable mass effects as well as\ndescent under parachutes. Weather conditions, such as wind profile, can\nbe imported from sophisticated datasets, allowing for realistic\nscenarios. Furthermore, the implementation facilitates complex\nsimulations, such as multi-stage rockets, design and trajectory\noptimization and dispersion analysis.</p>\n<h2>Previewing</h2>\n<p>You can preview RocketPy's main functionalities by browsing through a sample notebook either in <code>Google Colab &lt;https://colab.research.google.com/github/giovaniceotto/rocketpy/blob/master/docs/notebooks/getting_started_colab.ipynb&gt;</code>__ or in <code>MyBinder &lt;https://mybinder.org/v2/gh/giovaniceotto/RocketPy/master?filepath=docs%2Fnotebooks%2Fgetting_started.ipynb&gt;</code>__!</p>\n<p>Then, you can read the <em>Getting Started</em> section to get your own copy!</p>\n<h2>Getting Started</h2>\n<p>These instructions will get you a copy of RocketPy up and running on\nyour local machine.</p>\n<p>Prerequisites</p>\n<pre><code>\nThe following is needed in order to run RocketPy:\n\n-  Python &gt;= 3.0\n-  Numpy &gt;= 1.0\n-  Scipy &gt;= 1.0\n-  Matplotlib &gt;= 3.0\n-  requests\n-  netCDF4 &gt;= 1.4 (optional, requires Cython)\n\nAll of these packages, with the exception of netCDF4, should be automatically\ninstalled when RocketPy is installed using either pip or conda.\n\nHowever, in case the user wants to install these packages manually, they can do\nso by following the instructions bellow:\n\nThe first 4 prerequisites come with Anaconda, but Scipy might need\nupdating. The nedCDF4 package can be installed if there is interest in\nimporting weather data from netCDF files. To update Scipy and install\nnetCDF4 using Conda, the following code is used:\n\n::\n\n    $ conda install \"scipy&gt;=1.0\"\n    $ conda install -c anaconda \"netcdf4&gt;=1.4\"\n\nAlternatively, if you only have Python 3.X installed, the packages\nneeded can be installed using pip:\n\n::\n\n    $ pip install \"numpy&gt;=1.0\"\n    $ pip install \"scipy&gt;=1.0\"\n    $ pip install \"matplotlib&gt;=3.0\"\n    $ pip install \"netCDF4&gt;=1.4\"\n    $ pip install \"requests\"\n\nAlthough `Jupyter Notebooks &lt;http://jupyter.org/&gt;`__ are by no means\nrequired to run RocketPy, they are strongly recommend. They already come\nwith Anaconda builds, but can also be installed separately using pip:\n\n::\n\n    $ pip install jupyter\n\nInstallation\n~~~~~~~~~~~~\n\nTo get a copy of RocketPy using pip, just run:\n\n::\n\n    $ pip install rocketpyalpha\n\nAlternatively, the package can also be installed using conda:\n\n::\n\n    $ conda install -c conda-forge rocketpy\n\nIf you want to downloaded it from source, you may do so either by:\n\n-  Downloading it from `RocketPy's\n   GitHub &lt;https://github.com/giovaniceotto/RocketPy&gt;`__ page\n\n   -  Unzip the folder and you are ready to go\n\n-  Or cloning it to a desired directory using git:\n\n   -  ``$ git clone https://github.com/giovaniceotto/RocketPy.git``\n\nThe RockeyPy library can then be installed by running:\n\n::\n\n    $ python setup.py install \n\nDocumentation\n</code></pre>\n<p>You can find RocketPy's documentation at <code>Read the Docs&lt;https://rocketpyalpha.readthedocs.io/en/latest/&gt;</code>__.</p>\n<p>Running Your First Simulation</p>\n<pre><code>\nIn order to run your first rocket trajectory simulation using RocketPy,\nyou can start a Jupyter Notebook and navigate to the ***nbks*** folder.\nOpen ***Getting Started - Examples.ipynb*** and you are ready to go.\n\nOtherwise, you may want to create your own script or your own notebook\nusing RocketPy. To do this, let's see how to use RocketPy's four main\nclasses:\n\n-  Environment - Keeps data related to weather.\n-  SolidMotor - Keeps data related to solid motors. Hybrid motor suport\n   is coming in the next weeks.\n-  Rocket - Keeps data related to a rocket.\n-  Flight - Runs the simulation and keeps the results.\n\nA typical workflow starts with importing these classes from RocketPy:\n\n.. code:: python\n\n    from rocketpy import Environment, Rocket, SolidMotor, Flight\n\nThen create an Environment object. To learn more about it, you can use:\n\n.. code:: python\n\n    help(Environment)\n\nA sample code is:\n\n.. code:: python\n\n    Env = Environment(\n        railLength=5.2,\n        latitude=32.990254,\n        longitude=-106.974998,\n        elevation=1400,\n        date=(2020, 3, 4, 12) # Tomorrow's date in year, month, day, hour UTC format\n    ) \n\n    Env.setAtmosphericModel(type='Forecast', file='GFS')\n\nThis can be followed up by starting a Solid Motor object. To get help on\nit, just use:\n\n.. code:: python\n\n    help(SolidMotor)\n\nA sample Motor object can be created by the following code:\n\n.. code:: python\n\n    Pro75M1670 = SolidMotor(\n        thrustSource=\"../data/motors/Cesaroni_M1670.eng\",\n        burnOut=3.9,\n        grainNumber=5,\n        grainSeparation=5/1000,\n        grainDensity=1815,\n        grainOuterRadius=33/1000,\n        grainInitialInnerRadius=15/1000,\n        grainInitialHeight=120/1000,\n        nozzleRadius=33/1000,\n        throatRadius=11/1000,\n        interpolationMethod='linear'\n    )\n\nWith a Solid Motor defined, you are ready to create your Rocket object.\nAs you may have guessed, to get help on it, use:\n\n.. code:: python\n\n    help(Rocket)\n\nA sample code to create a Rocket is:\n\n.. code:: python\n\n    Calisto = Rocket(\n        motor=Pro75M1670,\n        radius=127/2000,\n        mass=19.197-2.956,\n        inertiaI=6.60,\n        inertiaZ=0.0351,\n        distanceRocketNozzle=-1.255,\n        distanceRocketPropellant=-0.85704,\n        powerOffDrag='../data/calisto/powerOffDragCurve.csv',\n        powerOnDrag='../data/calisto/powerOnDragCurve.csv'\n    )\n\n    Calisto.setRailButtons([0.2, -0.5])\n\n    NoseCone = Calisto.addNose(length=0.55829, kind=\"vonKarman\", distanceToCM=0.71971)\n\n    FinSet = Calisto.addFins(4, span=0.100, rootChord=0.120, tipChord=0.040, distanceToCM=-1.04956)\n\n    Tail = Calisto.addTail(topRadius=0.0635, bottomRadius=0.0435, length=0.060, distanceToCM=-1.194656)\n\nYou may want to add parachutes to your rocket as well:\n\n.. code:: python\n\n    def drogueTrigger(p, y):\n        return True if y[5] &lt; 0 else False\n\n    def mainTrigger(p, y):\n        return True if y[5] &lt; 0 and y[2] &lt; 800 else False\n\n    Main = Calisto.addParachute('Main',\n                                CdS=10.0,\n                                trigger=mainTrigger, \n                                samplingRate=105,\n                                lag=1.5,\n                                noise=(0, 8.3, 0.5))\n\n    Drogue = Calisto.addParachute('Drogue',\n                                  CdS=1.0,\n                                  trigger=drogueTrigger, \n                                  samplingRate=105,\n                                  lag=1.5,\n                                  noise=(0, 8.3, 0.5))\n\nFinally, you can create a Flight object to simulate your trajectory. To\nget help on the Flight class, use:\n\n.. code:: python\n\n    help(Flight)\n\nTo actually create a Flight object, use:\n\n.. code:: python\n\n    TestFlight = Flight(rocket=Calisto, environment=Env, inclination=85, heading=0)\n\nOnce the TestFlight object is created, your simulation is done! Use the\nfollowing code to get a summary of the results:\n\n.. code:: python\n\n    TestFlight.info()\n\nTo seel all available results, use:\n\n.. code:: python\n\n    TestFlight.allInfo()\n\nBuilt With\n----------\n\n-  `Numpy &lt;http://www.numpy.org/&gt;`__\n-  `Scipy &lt;https://www.scipy.org/&gt;`__\n-  `Matplotlib &lt;https://matplotlib.org/&gt;`__\n-  `netCDF4 &lt;https://github.com/Unidata/netcdf4-python&gt;`__\n\nContributing\n------------\n\nPlease read\n`CONTRIBUTING.md &lt;https://github.com/giovaniceotto/RocketPy/blob/master/CONTRIBUTING.md&gt;`__\nfor details on our code of conduct, and the process for submitting pull\nrequests to us. - ***Still working on this!***\n\nVersioning\n----------\n\n***Still working on this!***\n\nAuthors\n-------\n\n-  **Giovani Hidalgo Ceotto**\n\nSee also the list of\n`contributors &lt;https://github.com/giovaniceotto/RocketPy/contributors&gt;`__\nwho participated in this project.\n\nLicense\n-------\n\nThis project is licensed under the MIT License - see the\n`LICENSE.md &lt;https://github.com/giovaniceotto/RocketPy/blob/master/LICENSE&gt;`__\nfile for details\n\nAcknowledgments\n---------------\n\n***Still working on this!***\n\n\n</code></pre>\n\n          </div>"}, "last_serial": 6877432, "releases": {"0.9.3": [{"comment_text": "", "digests": {"md5": "d9974560574651626259eae9113a920e", "sha256": "f8f93261fb2993fafd554ea8a2f4594d851b7b4863a6a6d3a3a4bc02edf6788f"}, "downloads": -1, "filename": "rocket.py-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d9974560574651626259eae9113a920e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 139601, "upload_time": "2020-03-24T22:50:41", "upload_time_iso_8601": "2020-03-24T22:50:41.527737Z", "url": "https://files.pythonhosted.org/packages/5b/fc/f459f87557163e59dc8773027a1210900e6a2a017ea893e832844a086f17/rocket.py-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a334773922041f3e9bca64ca06f75e0", "sha256": "75208bd726910193ff794e3eb1ba7416b97a4eecacb5781a17af8f42792fc86f"}, "downloads": -1, "filename": "rocket.py-0.9.3.tar.gz", "has_sig": false, "md5_digest": "4a334773922041f3e9bca64ca06f75e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69870, "upload_time": "2020-03-24T22:50:48", "upload_time_iso_8601": "2020-03-24T22:50:48.814740Z", "url": "https://files.pythonhosted.org/packages/8c/b9/aff5261066405de77892a0014f20f8eac169ce49d39c1711fdcdb960e7c6/rocket.py-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "c62570e29d1cfc905e3fcc31985ccc01", "sha256": "599a71a76d1afca03217276fe046f1e38920fa02879a1eb1bcdd9acbe92bcbcf"}, "downloads": -1, "filename": "rocket.py-0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c62570e29d1cfc905e3fcc31985ccc01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 139679, "upload_time": "2020-03-25T00:15:08", "upload_time_iso_8601": "2020-03-25T00:15:08.929649Z", "url": "https://files.pythonhosted.org/packages/af/a9/4757d8acaca1f5024de6f964157344e4d41b4526df7d88b57968f433d747/rocket.py-0.9.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7c50b4a2038f8450bd8111875149d68", "sha256": "cf836ba5f0d4f055ca48aee87789d41cbc3a5c245798db98d017c0ca756e5ff3"}, "downloads": -1, "filename": "rocket.py-0.9.4.tar.gz", "has_sig": false, "md5_digest": "b7c50b4a2038f8450bd8111875149d68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69709, "upload_time": "2020-03-25T00:15:10", "upload_time_iso_8601": "2020-03-25T00:15:10.751613Z", "url": "https://files.pythonhosted.org/packages/c5/fe/f597ce9cc732c30a1265b4a53fc608074818e41db027c687165e11697e75/rocket.py-0.9.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c62570e29d1cfc905e3fcc31985ccc01", "sha256": "599a71a76d1afca03217276fe046f1e38920fa02879a1eb1bcdd9acbe92bcbcf"}, "downloads": -1, "filename": "rocket.py-0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c62570e29d1cfc905e3fcc31985ccc01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 139679, "upload_time": "2020-03-25T00:15:08", "upload_time_iso_8601": "2020-03-25T00:15:08.929649Z", "url": "https://files.pythonhosted.org/packages/af/a9/4757d8acaca1f5024de6f964157344e4d41b4526df7d88b57968f433d747/rocket.py-0.9.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7c50b4a2038f8450bd8111875149d68", "sha256": "cf836ba5f0d4f055ca48aee87789d41cbc3a5c245798db98d017c0ca756e5ff3"}, "downloads": -1, "filename": "rocket.py-0.9.4.tar.gz", "has_sig": false, "md5_digest": "b7c50b4a2038f8450bd8111875149d68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69709, "upload_time": "2020-03-25T00:15:10", "upload_time_iso_8601": "2020-03-25T00:15:10.751613Z", "url": "https://files.pythonhosted.org/packages/c5/fe/f597ce9cc732c30a1265b4a53fc608074818e41db027c687165e11697e75/rocket.py-0.9.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:34 2020"}