{"info": {"author": "Ryan Morshead", "author_email": "ryan.morshead@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers"], "description": "# fstr\n\n<a href=\"https://travis-ci.org/rmorshea/fstr\"><img alt=\"Build Status\" src=\"https://travis-ci.org/rmorshea/fstr.svg?branch=master\"></a>\n<a href=\"https://pypi.org/project/fstr/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/fstr.svg\"></a>\n<a href=\"https://github.com/ambv/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://github.com/rmorshea/fstr/blob/master/LICENSE\"><img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-purple.svg\"></a>\n\n**1. Use f-string syntax in Python 2:**\n\n```python\nimport fstr\n\nx = 1\ny = 2\n\ntemplate = fstr(\"{x} + {y} = {x + y}\")\n\nprint(template.evaluate())\n```\n\n```\n1 + 2 = 3\n```\n\n**2. Use f-string syntax instead of `str.format` in both Python 2 and 3:**\n\n```python\nimport fstr\n\ncommon_error_message = fstr(\"function {function.__name__!r} failed because {error}\")\n\ndef add(x, y):\n    try:\n        return x + y\n    except Exception as e:\n        msg = common_error_message.format(function=add, error=e)\n        print(msg)\n\ndef sub(x, y):\n    try:\n        return x + y\n    except Exception as e:\n        msg = common_error_message.format(function=sub, error=e)\n        print(msg)\n\nadd(1, \"2\")\nsub(\"5\", 3)\n```\n\n```\nfunction 'add' failed because unsupported operand type(s) for +: 'int' and 'str'\nfunction 'sub' failed because can only concatenate str (not \"int\") to str\n```\n\n\n# Full [PEP-498](https://www.python.org/dev/peps/pep-0498) Compliance\n\nOther backward compatibility libraries for f-string syntax in Python 2 only implement some of the capabilities defined in the PEP's [specification](https://www.python.org/dev/peps/pep-0498/#specification). The test cases for `fstr` were even lifted (with minor changes) from [CPython's test suite](https://github.com/python/cpython/blob/master/Lib/test/test_fstring.py).\n\n\n## Format Specifiers\n\nFormat specifiers may contain evaluated expressions.\n\n```python\nimport fstr\nimport decimal\n\nwidth = 10\nprecision = 4\nvalue = decimal.Decimal('12.34567')\n\nfstr(\"result: {value:{width}.{precision}}\").evaluate()\n```\n\n```\n'result:      12.35'\n```\n\nOnce expressions in a format specifier are evaluated (if necessary), format specifiers are not interpreted by the f-string evaluator. Just as in `str.format()`, they are merely passed in to the `__format__()` method of the object being formatted.\n\n\n## Lambdas In Expressions\n\n```python\nimport fstr\n\nfstr(\"{(lambda x: x*2)(3)}\").format()\n```\n\n```\n'6'\n```\n\n## Error Handling\n\nExact messages will vary depending on whether you are using Python<3.6 or not.\n\n---\n\n```python\nimport fstr\n\nfstr(\"x={x\")\n```\n\n```\nFile \"fstr\", line 1\n  x={x\n      ^\nSyntaxError: Mismatched braces in f-string.\n```\n\n---\n\n```python\nimport fstr\n\nfstr(\"x={!x}\")\n```\n\n```\nFile \"fstr\", line 1\n  x={!x}\n    ^\nSyntaxError: Empty expresion not allowed.\n```\n\n\n# Performance Considerations\n\n`fstr` is not meant to be a replacement for python's f-string syntax. Rather it serves primarily as a slightly slower, but more convenient way to do string formatting in the\ncases where you might otherwise use `str.format`. Additionally Python's f-string syntax is able to make performance optimizations at compile time that are not afforded to either `str.format` or `fstr.format`. Given this we only compare `fstr.format` to `str.format`.\n\nThe performance of `fstr` differs depending on whether you:\n\n+ Use Python<3.6 or not.\n+ Define your f-string template ahead of time.\n\nFor example, this will be **significantly** slower\n\n```python\nfor i in range(10):\n   s = fstr(\"{i}**2 = {i**2}\").format(i=i)\n```\n\nthan if you define your template outside the loop:\n\n```python\ntemplate = fstr(\"{i}**2 = {i**2}\")\n\nfor i in range(10):\n   s = template.format(i=i)\n```\n\n## `str.format` vs `fstr.format`\n\n```python\nfrom timeit import timeit\n\nstr_setup = \"template = '{x}' * 10\"\nfstr_setup = \"import fstr\\ntemplate = fstr('{x}' * 10)\"\n\nstr_result = timeit(\"template.format(x=1)\", setup=str_setup, number=1000000)\nfstr_result = timeit(\"template.format(x=1)\", setup=fstr_setup, number=1000000)\n\nprint(\"str.format() : %s seconds\" % str_result)\nprint(\"fstr.format() : %s seconds\" % fstr_result)\n```\n\n### Python < 3.6\n\n```\nstr.format() : 0.741672992706 seconds\nfstr.format() : 6.77992010117 seconds\n```\n\n### Python >= 3.6\n\n```\nstr.format: 0.7007193689933047 seconds\nfstr.format: 0.9083925349987112 seconds\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rmorshea/fstr", "keywords": "fstring,f-string", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fstr", "package_url": "https://pypi.org/project/fstr/", "platform": "Linux", "project_url": "https://pypi.org/project/fstr/", "project_urls": {"Homepage": "https://github.com/rmorshea/fstr"}, "release_url": "https://pypi.org/project/fstr/0.1.0a2/", "requires_dist": ["six (==1.11.0)"], "requires_python": "", "summary": "A library for performing delayed f-string evaluation.", "version": "0.1.0a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fstr</h1>\n<p><a href=\"https://travis-ci.org/rmorshea/fstr\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c08a11df7d3baace8105db78ad22016f6cd41a2c/68747470733a2f2f7472617669732d63692e6f72672f726d6f72736865612f667374722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/fstr/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80a672c161dafe5215684e8a260819527879e635/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f667374722e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://github.com/rmorshea/fstr/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a49f461fc8c1f6b9d30d1ab91e98210f92db2e6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d707572706c652e737667\"></a></p>\n<p><strong>1. Use f-string syntax in Python 2:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstr</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{x}</span><span class=\"s2\"> + </span><span class=\"si\">{y}</span><span class=\"s2\"> = {x + y}\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">())</span>\n</pre>\n<pre><code>1 + 2 = 3\n</code></pre>\n<p><strong>2. Use f-string syntax instead of <code>str.format</code> in both Python 2 and 3:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstr</span>\n\n<span class=\"n\">common_error_message</span> <span class=\"o\">=</span> <span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"function </span><span class=\"si\">{function.__name__!r}</span><span class=\"s2\"> failed because </span><span class=\"si\">{error}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">common_error_message</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">common_error_message</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n<span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"2\"</span><span class=\"p\">)</span>\n<span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">\"5\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>function 'add' failed because unsupported operand type(s) for +: 'int' and 'str'\nfunction 'sub' failed because can only concatenate str (not \"int\") to str\n</code></pre>\n<h1>Full <a href=\"https://www.python.org/dev/peps/pep-0498\" rel=\"nofollow\">PEP-498</a> Compliance</h1>\n<p>Other backward compatibility libraries for f-string syntax in Python 2 only implement some of the capabilities defined in the PEP's <a href=\"https://www.python.org/dev/peps/pep-0498/#specification\" rel=\"nofollow\">specification</a>. The test cases for <code>fstr</code> were even lifted (with minor changes) from <a href=\"https://github.com/python/cpython/blob/master/Lib/test/test_fstring.py\" rel=\"nofollow\">CPython's test suite</a>.</p>\n<h2>Format Specifiers</h2>\n<p>Format specifiers may contain evaluated expressions.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">decimal</span>\n\n<span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'12.34567'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"result: {value:</span><span class=\"si\">{width}</span><span class=\"s2\">.</span><span class=\"si\">{precision}</span><span class=\"s2\">}\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n</pre>\n<pre><code>'result:      12.35'\n</code></pre>\n<p>Once expressions in a format specifier are evaluated (if necessary), format specifiers are not interpreted by the f-string evaluator. Just as in <code>str.format()</code>, they are merely passed in to the <code>__format__()</code> method of the object being formatted.</p>\n<h2>Lambdas In Expressions</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstr</span>\n\n<span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"{(lambda x: x*2)(3)}\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">()</span>\n</pre>\n<pre><code>'6'\n</code></pre>\n<h2>Error Handling</h2>\n<p>Exact messages will vary depending on whether you are using Python&lt;3.6 or not.</p>\n<hr>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstr</span>\n\n<span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"x={x\"</span><span class=\"p\">)</span>\n</pre>\n<pre><code>File \"fstr\", line 1\n  x={x\n      ^\nSyntaxError: Mismatched braces in f-string.\n</code></pre>\n<hr>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstr</span>\n\n<span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"x={!x}\"</span><span class=\"p\">)</span>\n</pre>\n<pre><code>File \"fstr\", line 1\n  x={!x}\n    ^\nSyntaxError: Empty expresion not allowed.\n</code></pre>\n<h1>Performance Considerations</h1>\n<p><code>fstr</code> is not meant to be a replacement for python's f-string syntax. Rather it serves primarily as a slightly slower, but more convenient way to do string formatting in the\ncases where you might otherwise use <code>str.format</code>. Additionally Python's f-string syntax is able to make performance optimizations at compile time that are not afforded to either <code>str.format</code> or <code>fstr.format</code>. Given this we only compare <code>fstr.format</code> to <code>str.format</code>.</p>\n<p>The performance of <code>fstr</code> differs depending on whether you:</p>\n<ul>\n<li>Use Python&lt;3.6 or not.</li>\n<li>Define your f-string template ahead of time.</li>\n</ul>\n<p>For example, this will be <strong>significantly</strong> slower</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n   <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{i}</span><span class=\"s2\">**2 = {i**2}\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<p>than if you define your template outside the loop:</p>\n<pre><span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">fstr</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{i}</span><span class=\"s2\">**2 = {i**2}\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n   <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<h2><code>str.format</code> vs <code>fstr.format</code></h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timeit</span> <span class=\"kn\">import</span> <span class=\"n\">timeit</span>\n\n<span class=\"n\">str_setup</span> <span class=\"o\">=</span> <span class=\"s2\">\"template = '</span><span class=\"si\">{x}</span><span class=\"s2\">' * 10\"</span>\n<span class=\"n\">fstr_setup</span> <span class=\"o\">=</span> <span class=\"s2\">\"import fstr</span><span class=\"se\">\\n</span><span class=\"s2\">template = fstr('</span><span class=\"si\">{x}</span><span class=\"s2\">' * 10)\"</span>\n\n<span class=\"n\">str_result</span> <span class=\"o\">=</span> <span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s2\">\"template.format(x=1)\"</span><span class=\"p\">,</span> <span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"n\">str_setup</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">)</span>\n<span class=\"n\">fstr_result</span> <span class=\"o\">=</span> <span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s2\">\"template.format(x=1)\"</span><span class=\"p\">,</span> <span class=\"n\">setup</span><span class=\"o\">=</span><span class=\"n\">fstr_setup</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"str.format() : </span><span class=\"si\">%s</span><span class=\"s2\"> seconds\"</span> <span class=\"o\">%</span> <span class=\"n\">str_result</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"fstr.format() : </span><span class=\"si\">%s</span><span class=\"s2\"> seconds\"</span> <span class=\"o\">%</span> <span class=\"n\">fstr_result</span><span class=\"p\">)</span>\n</pre>\n<h3>Python &lt; 3.6</h3>\n<pre><code>str.format() : 0.741672992706 seconds\nfstr.format() : 6.77992010117 seconds\n</code></pre>\n<h3>Python &gt;= 3.6</h3>\n<pre><code>str.format: 0.7007193689933047 seconds\nfstr.format: 0.9083925349987112 seconds\n</code></pre>\n\n          </div>"}, "last_serial": 4692026, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "1895d915260092cd386ccee1383f741b", "sha256": "b51a008afacdec85273009700cb5f0f88da3678531037ed19ad7037af73d8705"}, "downloads": -1, "filename": "fstr-0.1.0a1-py2-none-any.whl", "has_sig": false, "md5_digest": "1895d915260092cd386ccee1383f741b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5008, "upload_time": "2019-01-13T20:36:12", "upload_time_iso_8601": "2019-01-13T20:36:12.792576Z", "url": "https://files.pythonhosted.org/packages/cc/e2/4d16ea4374db2d0ce3569072e7010f0774798f39765f92ed72689dde17c2/fstr-0.1.0a1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ce99fa8ca7f2ad01987a9dbbdc72545", "sha256": "25025ac74d6a304797f06c4278bae063adb47e5e3f52d68255848bd203c88a50"}, "downloads": -1, "filename": "fstr-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "7ce99fa8ca7f2ad01987a9dbbdc72545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4523, "upload_time": "2019-01-13T20:36:15", "upload_time_iso_8601": "2019-01-13T20:36:15.190160Z", "url": "https://files.pythonhosted.org/packages/2a/3e/1f740be2282e344e19aa5afffccfe385f93859afe61e28d8af6b43423012/fstr-0.1.0a1.tar.gz", "yanked": false}], "0.1.0a2": [{"comment_text": "", "digests": {"md5": "81d98732c6cc0ad969e6ae2971425186", "sha256": "bd4b6e3b8fe7ff33a761fec109165ca990704b4a4c164171749a6842e9122488"}, "downloads": -1, "filename": "fstr-0.1.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "81d98732c6cc0ad969e6ae2971425186", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6930, "upload_time": "2019-01-13T23:04:15", "upload_time_iso_8601": "2019-01-13T23:04:15.586580Z", "url": "https://files.pythonhosted.org/packages/61/21/57edec2a033ca59065e3bb51fa7364d10b2e4ccf4a15d5e61e3c0424b4dd/fstr-0.1.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51a24be7bd3e97331587aeb20f46972e", "sha256": "c9ea83f18ad7e10e3f3d0b53a18fb2d9134ccd9c6c9f4998bde9022dd783ad9b"}, "downloads": -1, "filename": "fstr-0.1.0a2.tar.gz", "has_sig": false, "md5_digest": "51a24be7bd3e97331587aeb20f46972e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6831, "upload_time": "2019-01-13T23:04:17", "upload_time_iso_8601": "2019-01-13T23:04:17.226971Z", "url": "https://files.pythonhosted.org/packages/e8/19/d3f61d1ff62559f4fce0abcfe969d6d71865f391f1890305d0292664a7a8/fstr-0.1.0a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81d98732c6cc0ad969e6ae2971425186", "sha256": "bd4b6e3b8fe7ff33a761fec109165ca990704b4a4c164171749a6842e9122488"}, "downloads": -1, "filename": "fstr-0.1.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "81d98732c6cc0ad969e6ae2971425186", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6930, "upload_time": "2019-01-13T23:04:15", "upload_time_iso_8601": "2019-01-13T23:04:15.586580Z", "url": "https://files.pythonhosted.org/packages/61/21/57edec2a033ca59065e3bb51fa7364d10b2e4ccf4a15d5e61e3c0424b4dd/fstr-0.1.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51a24be7bd3e97331587aeb20f46972e", "sha256": "c9ea83f18ad7e10e3f3d0b53a18fb2d9134ccd9c6c9f4998bde9022dd783ad9b"}, "downloads": -1, "filename": "fstr-0.1.0a2.tar.gz", "has_sig": false, "md5_digest": "51a24be7bd3e97331587aeb20f46972e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6831, "upload_time": "2019-01-13T23:04:17", "upload_time_iso_8601": "2019-01-13T23:04:17.226971Z", "url": "https://files.pythonhosted.org/packages/e8/19/d3f61d1ff62559f4fce0abcfe969d6d71865f391f1890305d0292664a7a8/fstr-0.1.0a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:01 2020"}