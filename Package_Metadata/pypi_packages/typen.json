{"info": {"author": "Kevin Duff", "author_email": "kduff@enthought.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "# Strong Type Hints with Traits\n\n[![Build Status](https://travis-ci.org/k2bd/typen.svg?branch=master)](https://travis-ci.org/k2bd/typen)\n\nThis package supplies simple decorators to enforce Python type hints on function parameters and return types.\n\n```python\nfrom typen import enforce_type_hints\n\n\n@enforce_type_hints\ndef halve_integer(a: int) -> float:\n    return a / 2\n\nhalve_integer(5)  # 2.5\n\nhalve_integer(5.0)  # ParameterTypeError\n```\n\n```python\n@enforce_type_hints\ndef give_int(a) -> int:\n    return a\n\ngive_int(1)  # 1\n\ngive_int(\"a\")  # ReturnTypeError\n```\n\n## Trait Type Hints\n\n[Trait](https://github.com/enthought/traits) types can also be used to define complex patterns in type hints\n\n```python\nfrom traits.api import Array, Either, Enum, Instance, Int, Str, Tuple\n\n\n@enforce_type_hints\ndef complicated_function(\n        a: Either(Str, Int),  # Either a string or an int\n        b: Enum(2, 5, \"foo\"),  # One of a specific set of values\n        c: Instance(MyClass),  # Class instances\n        d: Array(size=(None, 2)),  # Numpy array validation\n        ) -> Tuple(Str, Either(Str, Int)):  # Complicated return specification\n    ...\n```\n\n## Strict Enforcement\n\nType hints can also be required with the `@strict_type_hints` decorator. Both of the following examples will raise an exception when the function is first called. Without strict enforcement, parameters and return values without type hints can have any value.\n\n```python\nfrom typen import strict_type_hints\n\n\n@strict_type_hints\ndef add_numbers(a, b: float) -> float:\n    return a + b\n\nadd_numbers(1, 2)  # UnspecifiedParameterTypeError\n```\n\n```python\n@strict_type_hints\ndef add_numbers(a: float, b: float):\n    return a + b\n\nadd_numbers(1, 2)  # UnspecifiedReturnTypeError\n```\n\n## Packed args and kwargs\n\nType hints on packed parameters apply to all values passed through that packing.\n\n```python\n@enforce_type_hints\ndef foos_vs_bars(*foos: int, **bars: str) -> bool:\n    return sum(foos) >= len(bars)\n\n\nfoos_vs_bars(1, 2, 3, a=\"a\", b=\"b\", c=\"c\")  # True\n\nfoos_vs_bars(2, 3, 5, d=4)  # ParameterTypeError\n\nfoos_vs_bars(2, \"three\", 5, e=\"e\")  # ParameterTypeError\n```\n\n## Method Decoration\n\nMethods can be decorated as well. `self`-references are exempt from strict type hint requirements, as is the return type of `__init__`. `@enforce_type_hints` and `@strict_type_hints` should decorate the product of the `@classmethod` or `@staticmethod` decorators.\n\n```python\nclass ExClass:\n    @strict_type_hints\n    def __init__(self, a: int, b: int):\n        ...\n\n    @strict_type_hints\n    @classmethod\n    def a_class_method(cls, a: int, c: int) -> int:\n        ...\n\n    @strict_type_hints\n    @staticmethod\n    def a_static_method(a: int, c: int) -> int:\n        ...\n\n```\n\n## Coercion\n\nValues are enforced to types based on [Trait type coercion](https://docs.enthought.com/traits/traits_user_manual/defining.html#trait-type-coercion). Casting behaviour is not added to the function:\n\n```python\n@enforce_type_hints\ndef add_numbers(a: float, b: float) -> float:\n    return a + b\n\ntype(add_numbers(1, 2))  # int\n```\n\n## Recovering from `ReturnTypeError`\n\nBecause the function has to be executed to enforce the return value, the invalid value is stored on the exception. This makes it possible to recover from a `ReturnTypeError` programatically.\n\n```python\nfrom typen.exceptions import ReturnTypeError\n\n\n@enforce_type_hints\ndef give_int(a) -> int:\n    return a\n\ntry:\n    give_int(\"a\")\nexcept ReturnTypeError as err:\n    print(err.return_value)  # a\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/k2bd/typen", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "typen", "package_url": "https://pypi.org/project/typen/", "platform": "", "project_url": "https://pypi.org/project/typen/", "project_urls": {"Homepage": "https://github.com/k2bd/typen"}, "release_url": "https://pypi.org/project/typen/0.0.3/", "requires_dist": ["traits"], "requires_python": ">=3.6", "summary": "Strong type hints with Traits", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Strong Type Hints with Traits</h1>\n<p><a href=\"https://travis-ci.org/k2bd/typen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fba2ead35d46d7fcced71dba6e406091dddae85e/68747470733a2f2f7472617669732d63692e6f72672f6b3262642f747970656e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This package supplies simple decorators to enforce Python type hints on function parameters and return types.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typen</span> <span class=\"kn\">import</span> <span class=\"n\">enforce_type_hints</span>\n\n\n<span class=\"nd\">@enforce_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">halve_integer</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">halve_integer</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># 2.5</span>\n\n<span class=\"n\">halve_integer</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>  <span class=\"c1\"># ParameterTypeError</span>\n</pre>\n<pre><span class=\"nd\">@enforce_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">give_int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"n\">give_int</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># 1</span>\n\n<span class=\"n\">give_int</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ReturnTypeError</span>\n</pre>\n<h2>Trait Type Hints</h2>\n<p><a href=\"https://github.com/enthought/traits\" rel=\"nofollow\">Trait</a> types can also be used to define complex patterns in type hints</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">traits.api</span> <span class=\"kn\">import</span> <span class=\"n\">Array</span><span class=\"p\">,</span> <span class=\"n\">Either</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">,</span> <span class=\"n\">Instance</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span>\n\n\n<span class=\"nd\">@enforce_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">complicated_function</span><span class=\"p\">(</span>\n        <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Either</span><span class=\"p\">(</span><span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">),</span>  <span class=\"c1\"># Either a string or an int</span>\n        <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">Enum</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">),</span>  <span class=\"c1\"># One of a specific set of values</span>\n        <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">MyClass</span><span class=\"p\">),</span>  <span class=\"c1\"># Class instances</span>\n        <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>  <span class=\"c1\"># Numpy array validation</span>\n        <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"n\">Either</span><span class=\"p\">(</span><span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">)):</span>  <span class=\"c1\"># Complicated return specification</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>Strict Enforcement</h2>\n<p>Type hints can also be required with the <code>@strict_type_hints</code> decorator. Both of the following examples will raise an exception when the function is first called. Without strict enforcement, parameters and return values without type hints can have any value.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typen</span> <span class=\"kn\">import</span> <span class=\"n\">strict_type_hints</span>\n\n\n<span class=\"nd\">@strict_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">add_numbers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># UnspecifiedParameterTypeError</span>\n</pre>\n<pre><span class=\"nd\">@strict_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">add_numbers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># UnspecifiedReturnTypeError</span>\n</pre>\n<h2>Packed args and kwargs</h2>\n<p>Type hints on packed parameters apply to all values passed through that packing.</p>\n<pre><span class=\"nd\">@enforce_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">foos_vs_bars</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foos</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">bars</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">foos</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bars</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">foos_vs_bars</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s2\">\"c\"</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n\n<span class=\"n\">foos_vs_bars</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># ParameterTypeError</span>\n\n<span class=\"n\">foos_vs_bars</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"three\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"s2\">\"e\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ParameterTypeError</span>\n</pre>\n<h2>Method Decoration</h2>\n<p>Methods can be decorated as well. <code>self</code>-references are exempt from strict type hint requirements, as is the return type of <code>__init__</code>. <code>@enforce_type_hints</code> and <code>@strict_type_hints</code> should decorate the product of the <code>@classmethod</code> or <code>@staticmethod</code> decorators.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExClass</span><span class=\"p\">:</span>\n    <span class=\"nd\">@strict_type_hints</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"nd\">@strict_type_hints</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">a_class_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"nd\">@strict_type_hints</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">a_static_method</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<h2>Coercion</h2>\n<p>Values are enforced to types based on <a href=\"https://docs.enthought.com/traits/traits_user_manual/defining.html#trait-type-coercion\" rel=\"nofollow\">Trait type coercion</a>. Casting behaviour is not added to the function:</p>\n<pre><span class=\"nd\">@enforce_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">add_numbers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>  <span class=\"c1\"># int</span>\n</pre>\n<h2>Recovering from <code>ReturnTypeError</code></h2>\n<p>Because the function has to be executed to enforce the return value, the invalid value is stored on the exception. This makes it possible to recover from a <code>ReturnTypeError</code> programatically.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typen.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ReturnTypeError</span>\n\n\n<span class=\"nd\">@enforce_type_hints</span>\n<span class=\"k\">def</span> <span class=\"nf\">give_int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">give_int</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">ReturnTypeError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"p\">)</span>  <span class=\"c1\"># a</span>\n</pre>\n\n          </div>"}, "last_serial": 6117914, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3d036a395e69438b2f3a1a2c99111f5a", "sha256": "e7ef206556e4cda062ec823f4d2098b3567d9f4fdc98ed25141fb19c166a0c4b"}, "downloads": -1, "filename": "typen-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d036a395e69438b2f3a1a2c99111f5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12174, "upload_time": "2019-11-11T16:13:34", "upload_time_iso_8601": "2019-11-11T16:13:34.146683Z", "url": "https://files.pythonhosted.org/packages/07/e7/37b2df1439cf2a5f9cb37f6d2de25e407cda6108f54be6b0a1bd985f6e7a/typen-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e22b850213175a882fcc932d4253afad", "sha256": "f5e783136b9ed34e94ab5456e2086285ff504c8909b7d57c85d11cf895edea13"}, "downloads": -1, "filename": "typen-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e22b850213175a882fcc932d4253afad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11831, "upload_time": "2019-11-11T16:29:56", "upload_time_iso_8601": "2019-11-11T16:29:56.662443Z", "url": "https://files.pythonhosted.org/packages/b1/c7/34126c85dc7c66dc8561f11038da08cee87b28fa4954f794e5f6614dec40/typen-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "eee23e570eecd39826bd5bf1d6721833", "sha256": "db9347a5a44c862bc5a4bceafb23f86c9be4d25107af7936cb36f1a2903f01d0"}, "downloads": -1, "filename": "typen-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eee23e570eecd39826bd5bf1d6721833", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11833, "upload_time": "2019-11-11T16:38:08", "upload_time_iso_8601": "2019-11-11T16:38:08.034051Z", "url": "https://files.pythonhosted.org/packages/90/94/cc061cc6e3cb5711f19a0a19dd449f5eec049617cb254b1ef426a2a85f6d/typen-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eee23e570eecd39826bd5bf1d6721833", "sha256": "db9347a5a44c862bc5a4bceafb23f86c9be4d25107af7936cb36f1a2903f01d0"}, "downloads": -1, "filename": "typen-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eee23e570eecd39826bd5bf1d6721833", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11833, "upload_time": "2019-11-11T16:38:08", "upload_time_iso_8601": "2019-11-11T16:38:08.034051Z", "url": "https://files.pythonhosted.org/packages/90/94/cc061cc6e3cb5711f19a0a19dd449f5eec049617cb254b1ef426a2a85f6d/typen-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:42:46 2020"}