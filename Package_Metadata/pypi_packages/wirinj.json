{"info": {"author": "David Cimadevilla", "author_email": "dev.davidcim@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Wirinj\n======\nA new dependency injection library for Python 3 with an original and clean design.\n\nWhy another dependency injection library?\n-----------------------------------------\n\nWorking on a large project I tried out [python-dependency-injector](https://github.com/ets-labs/python-dependency-injector) first.\nThen, I decided to switch to [pinject](https://github.com/google/pinject).\nAs none of them had the features I wanted, I finally decided to write my own library to meet my needs:\n\n- Minimal boiler plate code.\n- Avoiding dependencies to the injection library itself.\n- Friendly with [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment)'s [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) (e.g. with [PyCharm](https://www.jetbrains.com/pycharm/)).\n- Using [reflection](https://en.wikipedia.org/wiki/Reflection_(computer_programming)#Python) to detect dependencies automatically.\n- Easy to define and use of factories.\n- Autowiring option.\n- Easy to fix dependency problems.\n- Detailed injection reports.\n- Powerful but simple wiring configuration.\n- Avoiding naming conventions.\n- Detection of [type annotations](https://docs.python.org/3/library/typing.html).\n- [Private injection](#private-injection).\n- Open and extendable architecture.\n\nInstallation\n------------\n\npython >= 3.5\n\n```shell\n$ pip install wirinj\n```\n\nMinimal example\n---------------\n\n[minimal.py](./examples/basic/minimal.py):\n\n```python\nfrom wirinj import Injector, Autowiring\n\nclass Cat:\n    pass\n\ninj = Injector(Autowiring())\n\ncat = inj.get(Cat)\nprint(cat)\n```\n\nReturns:\n\n```\n<__main__.Cat object at 0x7fbe537f52b0>\n```\n\nBasic usage\n-----------\n\nExample ([basic_usage.py](examples/basic/basic_usage.py)):\n\n```python\nfrom wirinj import Injector, Definitions, Instance, Singleton, Factory\n\nclass Cat:\n    pass\n\nclass Dog:\n    pass\n\n# Wiring definitions\ndefs = {\n    'sound': 'Meow',\n    Cat: Instance(),\n    Dog: Singleton(),\n    'cat_factory': Factory(Cat),\n}\n\n# Create injector\ninj = Injector(Definitions(defs))\n```\n\\\nGet a `'sound'`:\n```python\nsound = inj.get('sound')\nprint(sound)\n```\n```\nMeow\n```\n\\\nGet a `Cat`:\n```python\ncat1 = inj.get(Cat)\ncat2 = inj.get(Cat)\n\nprint(cat1)\nprint(cat2)\nprint(cat1 is cat2)\n```\n```\n<__main__.Cat object at 0x7fab3ddc2208>\n<__main__.Cat object at 0x7fab3c1fa438>\nFalse\n```\n`Cat` returns different instances each time because it is defined as an `Instance()`.\n\n\\\nGet the `Dog`:\n```python\ndog = inj.get(Dog)\ndog2 = inj.get(Dog)\n\nprint(dog)\nprint(dog2)\nprint(dog is dog2)\n```\n```\n<__main__.Dog object at 0x7fab3c1fa748>\n<__main__.Dog object at 0x7fab3c1fa748>\nTrue\n```\n`Dog` always returns the same object because it is defined as a `Singleton()`.\n\n\\\nGet a `cat factory` and use it to create a new `Cat`:\n```python\ncat_factory = inj.get('cat_factory')\ncat3 = cat_factory()\n\nprint(cat3)\n```\n```\n<__main__.Cat object at 0x7fc6a98119b0>\n```\n`cat_factory` returns a factory because it is defined as a `Factory(Cat)`.\n\nThe @inject decorator\n-----------------------------\n\nIf you are using an [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) such as [PyCharm](https://www.jetbrains.com/pycharm/), you will notice that [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) do not work with the previous example.\nThe _IDE_ cannot know the type of, for example, `cat1` or `dog`.\n\nYou can be IDE-friendly by decorating a function with `@inject`:\n\nExample ([inject_function.py](examples/basic/inject_function.py)):\n\n```python\nfrom wirinj import inject\n\ndefs = {\n    'sound': 'Meow',\n    Cat: Instance(),\n    Dog: Singleton(),\n    'cat_factory': Factory(Cat),\n}\n\n@inject(Definitions(defs))\ndef fn(cat1: Cat, cat2: Cat, dog: Dog, sound, cat_factory):\n\n    print('sound:', sound)\n    print('cat1:, cat1)\n    print('cat2:', cat2)\n    print('cat1 = cat2: ', cat1 is cat2)\n    print('dog:', dog)\n\n    cat3 = cat_factory()\n    print('cat3:', cat3)\n\nfn()\n```\n\nReturns:\n\n``` \nsound:  Meow\ncat1:  <__main__.Cat object at 0x7f675ce5db38>\ncat2:  <__main__.Cat object at 0x7f675ce5df28>\ncat1 = cat2:  False\ndog:  <__main__.Dog object at 0x7f675ce5dac8>\ncat3:  <__main__.Cat object at 0x7f675ce72400>\n```\n\n`@inject` inspects the arguments of the `fn` function signature and inject the required dependencies.\nYou get all the needed dependencies through the function arguments.\nYou type less and it is clearer and IDE friendly.\n\nAs `cat1` and `cat2` arguments matches `Cat: Instance()` configuration, two new `Cat` instances are injected.\n\nSimillary, `dog` matches `Dog: Singleton()`.\nTherefore, any `Dog` argument will be injected with the same single `Dog`. \n\nIn contrast, for `sound` and `cat_factory`, the configuration entry is matched by __name__ and not by __class__.\nThis is because, in the wiring configuration `dict`, the __key__ of `'sound': 'Meow'` and `'cat_factory': Factory(Cat)` are of type `string`:\n\n- When the _key_ is a __class__, the injector will look at the __type__ annotation of the argument.\n- When the _key_ is a __string__ the injector will look at the __name__ of the argument.\n\n\nFactories\n---------\n\nYou can object that, in the previos example, the [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) will not work with `cat_factory`.\nThat's true; fortunately, this can be easily fixed:\n\n#### IDE friendly factories\n\nJust add a type annotation of type `Type[Cat]` to the factory argument:\n\nExample ([ide_friendly_factory.py](examples/basic/ide_friendly_factory.py)):\n\n```python\nfrom typing import Type\n\nclass Cat:\n    def __init__(self, sound):\n        pass\n\n...\n\n@inject(...)\ndef fn(cat_factory: Type[Cat]):\n    cat = cat_factory('Meow')\n    print('cat:', cat)\n\nfn()\n```\n\nNow, it is recognized by the IDE:\n\n![](img/code_inspect.png)\n\n\\\n`Type[Cat]`, as explained in the [typing](https://docs.python.org/3/library/typing.html#typing.Type) module docs, represents the class `Cat` or a subclass of it:\n\n```python\nfrom typing import Type\n\nclass Cat:\n    pass\n\nclass BlackCat(Cat):\n    pass\n\ndef func(cat_class: Type[Cat]):\n    return cat_class()\n\nprint('Cat: ', func(Cat))\nprint('BlackCat: ', func(BlackCat))\n```\n\nReturns:\n```\nCat:  <__main__.Cat object at 0x7fc458bc7588>\nBlackCat:  <__main__.BlackCat object at 0x7fc458bc7588>\n```\n\n### Defining the factory by type\n\nTo not be limited to a particular name, such as `cat_factory`, we can define the factory dependency by type.\n\n```python\ndefs = {\n    Type[Cat]: Factory(),\n}\n```\n\nThis way you can name the argument as you like, as long as its type annotation is `Type[Cat]`.\nFor example: \n\n```python\n@inject(...)\ndef fn(cats: Type[Cat]):\n    cat = cats()\n```\n\nDependency definitions\n----------------------\n\n`Definitions` class is a convenient way to configure the wiring of your classes according to a definition `dict`.\nMost of the previous examples have made use of a `Definitions` object with a `dict` as an argument.\nNow I'm going to explain it in detail.\n\n### Definition format\n\nOne or several `dict` define your wiring configuration. \nEach _key_ represents the argument to be injected.\nThe _value_ represents how is it injected:\n\n```python\ndefs = {\n    Cat: Instance(),\n    'dog': Singleton(Dog),\n}\n\ninj = Injector(Definitions(defs))\n```\n\n### dict keys\n\n- If the _key_ is a `class` it will match the argument's __type__ annotation.\nE.g.: the first key in the example above causes any argument of type `Cat`, no matter its name, to be injected with a new _instance_ of `Cat`.\n\n- If the _key_ is a `string` it will match the argument __name__.\nE.g.: the second key causes any argument whose name is `'dog'` to be injected with a unique `Dog` instance.\nHere, as the class can't be inferred from the key, you need to explicitly provide the class as an argument: `'dog': Singleton(Dog)`.  \n\n### dict values\n\nEach _value_ in the `dict` can be:\n\n- A _literal_ value you want to be injected. E.g. `'db_name': 'my-db'`.\n- `Instance`: inject a new instance each time.\n- `Singleton`: inject the same single instance every time.\n- `Factory`: inject a factory object that can be called to create new objects dynamically.\n- `CustomInstance`: similar to `Instance` but you provide a custom function which returns new instances.\n- `CustomSingleton`: similar to `Singleton` but you provide a custom function which returns the singleton.\n- Other user defined subclasses of `DependencyBuilder` or `Dependency`.\n\nExample ([definition_types.py](examples/basic/definition_types.py)):\n\n```python\ndef dog_creator():\n    \"\"\" Custom instantiation \"\"\"\n    ...\n    return dog\n\ndefs = {\n    House: Singleton(),\n    Cat: Instance(),\n    Type[Cat]: Factory(),\n    Dog: CustomInstance(dog_creator),\n    Type[Dog]: Factory(),\n}\n\n@inject(Definitions(defs))\ndef fn(house: House, cat_factory: Type[Cat], dog_factory: Type[Dog]):\n    cat = cat_factory()\n    dog = dog_factory()\n    ...    \n\nfn()\n```\n\n### Providing a class\n\n`Instance`, `Singleton` and `Factory` accept an optional class argument to specify the class of the object to be created.\nYou pass the class in two use cases:\n- The _key_ is a `string` and therefore the dependency class is undefined.\n- The argument is annotated with a _base class_ but you want to provide a _subclass_ of it.\n\nExample of both cases ([explicit_type.py](examples/basic/explicit_type.py)):\n\n```python\nclass Pet:\n    pass\n\nclass Cat(Pet):\n    pass\n\nclass Dog(Pet):\n    pass\n\ndefs = {\n    'cat': Singleton(Cat),\n    Pet: Singleton(Dog),\n}\n\n@inject(Definitions(defs))\ndef fn(cat, pet: Pet):\n    print('cat is a', cat.__class__.__name__)\n    print('pet is a', pet.__class__.__name__)    \nfn()\n```\n\nreturns:\n```\ncat is a Cat\npet is a Dog\n```\n\n### Creation path\n\n```python\nclass Nail:\n    pass\n\nclass Leg:\n    def __init__(self, nail: Nail):\n        pass\n\nclass Cat:\n    def __init__(self, leg: Leg):\n        pass\n```\n\nImagine you ask for a `Cat` which requires a `Leg` which requires a `Nail`.\nThe injector will gather:\n - First, the `Nail` that has no dependencies.\n - Then, the `Leg` with the `Nail` as an argument.\n - Finally, the `Cat` with the `Leg` as an argument.\n\nWe can think of this process as a path: `Cat` -> nail:`Nail` -> leg:`Leg`.\nI call this the `creation path`. \n\nYou can explicitly specify a `creation path` constraint in the definition `dict`.\n\nExample ([creation_path.py](examples/basic/creation_path.py)):\n\n```python\nclass Animal:\n    def __init__(self, sound):\n        self.sound = sound\n\nclass Dog(Animal):\n    pass\n\nclass Cat(Animal):\n    pass\n\nclass Cow(Animal):\n    pass\n\ndefs = {\n    Dog: Instance(),\n    Cat: Instance(),\n    Cow: Instance(),\n\n    (Dog, 'sound'): 'woof',\n    (Cat, 'sound'): 'meow',\n    'sound': '?',\n}\n\n@inject(Definitions(defs))\ndef fn(cat: Cat, dog: Dog, cow: Cow):\n    print('Cat:', cat.sound)\n    print('Dog:', dog.sound)\n    print('Cow:', cow.sound)\n\nfn()\n```\n\nReturns:\n\n```\nCat: meow\nDog: woof\nCow: ?\n```\n\nTo restrict a definition entry to a particular `creation path` we use a `tuple` in the __key__ part.\nThis `tuple` must match the last entries in the `creation path`.\n\nFor each `tuple` entry, a `string` refers to the argument __name__ and a `class` refers to the argument __type__ annotation. \n\nIf two entries match the required dependency, the more specific one will be chosen.\n\n### Custom dependencies\n\n`Instance` and `Singleton` are used for simple class instantiation.\nWhen a custom process is required to create or locate the dependency, use `CustomInstance` or `CustomSingleton`.\nBoth take a `function` as an argument.\n\nExample ([custom_dependencies.py](examples/basic/custom_dependencies.py)):\n\n```python\nfrom random import randint\n\nclass Cat:\n    def __init__(self, color, weight):\n        self.color = color\n        self.weight = weight\n\n    def __str__(self):\n        return 'A {1} pounds {0} cat.'.format(self.color, self.weight) \n\ndef create_cat(color):\n    return Cat(color, randint(4, 20)) \n\ndefs = {\n    'color': 'blue',\n    Cat: CustomInstance(create_cat),\n}\n\n@inject(Definitions(defs))\ndef fn(cat1: Cat, cat2: Cat, cat3: Cat):\n    print(cat1)\n    print(cat2)\n    print(cat3)\n\nfn()\n```\n\nreturns:\n\n```\nA 11 pounds blue cat.\nA 5 pounds blue cat.\nA 14 pounds blue cat.\n```\n\n\n### Custom dependencies with arguments\n\nIn the previous example, the object is instantiated without arguments,\nso all of `__init__`'s arguments are injected from dependencies.\n\nIf your class requires some arguments to be passed to be created (__explicit arguments__) in addition to the automatically injected dependencies (__injection arguments__),\nI recommend to follow these rules:\n\n0. In the `__init__` method, place the _explicit arguments_ in the first place and then, the _injection arguments_.\nThis allow you to use positional arguments when you create the object.\n\n0. Set the default value of the _injection arguments_ to `None`.\nThis way the IDE [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) will not complain about missing arguments.\nAlso, this is the only way you can have defaults in your _explicit arguments_ if they are followed by _injection arguments_. \n\n0. About the creation function that you pass to `CustomInstance`, use the same name and position for the _explicit arguments_ as you use in the `__init__` method. \nThe rest of the arguments don't have to be related at all to the `__init__` arguments.\nIndeed, you can specify as many dependency arguments as you need to create the object.\nThe injection process will inspect the function signature and will provide them.\n\nExample ([custom_dependencies_with_args.py](examples/basic/custom_dependencies_with_args.py)):\n\n```python\nclass Cat:\n    def __init__(self, name, color=None, weight=None):\n        self.name = name\n        self.color = color\n        self.weight = weight\n\n    def __str__(self):\n        return '{0} is a {2} pounds {1} cat.'.format(self.name, self.color, self.weight)\n\ndef create_cat(name, color):\n    return Cat(name, color, randint(4, 20))\n\ndefs = {\n    'color': 'black',\n    Cat: CustomInstance(create_cat),\n    Type[Cat]: Factory(),\n}\n\n@inject(Definitions(defs))\ndef fn(factory: Type[Cat]):\n    cat = factory('Tom')\n    print(cat)\n    cat2 = factory('Sam')\n    print(cat2)\n\nfn()\n```\n\nreturns:\n```\nTom is a 8 pounds black cat.\nSam is a 14 pounds black cat.\n```\n\nAbout the 3 arguments of `Cat`.`__init__`:\n- One comes from calling the factory.\n- Another one from the dependency configuration.\n- The third is generated by the custom creation function.\n\n### Setting default to `Injected`\nInstead of setting the default value of the _injection arguments_ to `None`, you can use the special value `Injected`:\n- __Pros__: if one argument is missing, a specific `MissingDependenciesError` is raised.\nOtherwise, the execution would continue with `None` default and fail later in an unpredictable way.\n- __Cons__: you add a dependency to `wirinj`.\n\n```python\nfrom wirinj import Injected\n\nclass Cat:\n    def __init__(self, name, color=Injected, weight=Injected):\n        ...\n```\n\n\n### Splitting definitions\n\nYou can split the dependency configuration in several `dict` definitions.\n\nExample ([splitted_definitions.py](examples/basic/splitted_definitions.py)):\n\n```python\ndefs1 = {\n    Cat: Instance(),\n    Type[Cat]: Factory()\n}\n\ndefs2 = {\n    Engine: Instance(),\n    Type[Engine]: Factory()\n}\n\n@inject(Definitions(defs1, defs2))\ndef fn(...):\n    ...\n\nfn()\n```\n\n`Definitions` accepts any number of definition `dict`s.\n\n\nAutowiring\n----------\n\nDependency injection comes at the cost of having to maintain it.\nThe `Autowiring` class makes this task lighter.\n\nYou add `Autowiring` at the end of the wiring configurations as a last resort to provide a dependency on the fly when it is undefined.\nThe dependency type, `Instance`, `Singleton` or `Factory`, is chosen by heuristic rules.\n\nLet's view an example:\n\nExample ([autowiring.py](examples/basic/autowiring.py)):\n\n```python\n    class Cat:\n        pass\n\n    class Dog:\n        pass\n\n    class Horse:\n        pass\n\n    defs = {\n        Cat: Instance(),\n    }\n\n    @inject(Definitions(defs), Autowiring())\n    def fn(cat: Cat, dog: Dog, horse_factory: Type[Horse]):\n        print(cat.__class__.__name__)\n        print(dog.__class__.__name__)\n        horse = horse_factory()\n        print(horse.__class__.__name__)\n\n    fn()\n```\n\nReturns:\n\n```\nCat\nDog\nHorse\n```\n\n3 dependencies are automatically generated by `Autowiring`:\n- A `Dog` singleton.\n- A `Type[Horse]` factory.\n- A `Horse` instance.\n\n### Heuristic rules\n\n`Autowiring` works only for arguments that have a _type annotation_:\n- If the type of the annotation is a `class`, as with `dog: Dog` in the previous example, a _singleton_ will be generated.\n- If the type is a `Type[class]`, as with `horse_factory: Type[Horse]`, a _factory_ will be provided.\n- If the injection occurs in a factory, as when `horse_factory()` is called, an _instance_ will be created.\n\n### Autowiring for production\n\nIn my opinion, this kind of _magic_ should not be used in production environments;\nyou should not take the risk to leave such important wiring decisions in the hands of a heuristic algorithm.\n\nFortunately, you can use `AutowiringReport` class to easily convert the autowiring configuration into a regular dependency definition:\n\n### Autowiring report\n\nIt's quite simple to use; just pass an `AutowiringReport` instance to `Autowiring`:\n\nExample ([autowiring_report.py](examples/report/autowiring_report.py)):\n\n```python\nreport = AutowiringReport()\n\n@inject(Definitions(deps), Autowiring(report))\ndef fn(cat: Cat, dog: Dog, horse_factory: Type[Horse]):\n    ...    \n\nfn()\n\nprint(report.get())\n```\n\nReturns:\n```\n...\n--------------- wirinj ---------------\nAutowiring report:\n\nDefinitions({\n    Dog: Singleton(),\n    Type[Horse]: Factory(),\n    Horse: Instance(),\n}),\n--------------------------------------\n```\n\nCall `report.get()` to get the report.\nReview and copy the definitions to your configuration file, remove `Autowiring`, and you will be production ready.\n\n### _No singletons_ option\n\nYou may set `use_singletons` to `False` to force all dependencies to be injected as an `Instance`.\n\n```python\nAutowiring(use_singletons=False)\n```\n\n\nInjection reports\n-------------------\n\nDuring each injection process, a _dependency tree_ is built with all the dependencies that are being gathered.\n\nAs you change your code, your dependency configuration can get out of sync.\n`wirinj` include reporting features that can help you to solve this dependency issues:\n\n### Debugging the injection\n\nThe injection process can be debugged to expose the creation order and the _dependency tree_.\n\nTake this composition of classes ([cat_example_classes.py](examples/report/cat_example_classes.py)) :\n\n```python\nclass Nail:\n    pass\n\nclass Leg:\n    def __init__(self, nail1: Nail, nail2: Nail, nail3: Nail, nail4: Nail, nail5: Nail):\n        pass\n\nclass Mouth:\n    pass\n\nclass Ear:\n    pass\n\nclass Eye:\n    pass\n\nclass Head:\n    def __init__(self, mouth: Mouth, ear1: Ear, ear2: Ear, eye1: Eye, eye2: Eye):\n        pass\n\nclass Body:\n    pass\n\nclass Tail:\n    pass\n\nclass Cat:\n    def __init__(self, head: Head, body: Body, tail: Tail, leg1: Leg, leg2: Leg, leg3: Leg, leg4: Leg):\n        pass\n```\n\nNow, we can debug the injection process just by setting the logging level to `DEBUG` and then, requesting a `Cat` from the `Injector`:\n\nExample ([injection_debug_report.py](examples/report/injection_debug_report.py)):\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\ninj = Injector(Autowiring(use_singletons=False))\n\ncat = inj.get(Cat)\n```\nNote that we are replacing all the dependency definitions by a simple `Autowiring()`.\nWe pass the argument `use_singletons=False` to force all dependencies to be injected as an `Instance`.\nBy default `Autowiring` generates `Singleton` dependencies and, in this case, we don't want all the legs of the `Cat` to be the same.\n\nThe code above returns this:\n```\n--------------- wirinj ---------------\n        mouth:Mouth\n        ear1:Ear\n        ear2:Ear\n        eye1:Eye\n        eye2:Eye\n    head:Head\n    body:Body\n    tail:Tail\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg1:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg2:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg3:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg4:Leg\n:Cat\n--------------------------------------\n```\nYou can see how all the dependencies are gathered, and in which order.\nThe final object is the requested `Cat` object.\n\n### Missing dependencies\n\nInjection doesn't stop when a dependency is missing.\nIt continues building the _dependency tree_ as far as it can.\nThis makes it possible to fix several dependency issues in one shot.\n\nIf one ore more dependencies are missing, an `ERROR` level report will be logged.\nTherefore, you don't need to change the `logging` level to get it; just look above the _error traceback_ after a dependency exception.\n\nExample ([missing_dependencies_report.py](examples/report/missing_dependencies_report.py)):\n\n```python\n    from examples.report.cat_example_classes import Cat, Head\n    from wirinj import Injector, Definitions, Instance\n\n    inj = Injector(Definitions({\n        Cat: Instance(),\n        Head: Instance(),\n    }))\n    cat2 = inj.get(Cat)\n```\n\nIn the example above, we only define the wiring for `Cat` and `Head`.\nAll the other dependencies, such as `Mouth`, `Ear`, `Eye`, etc, are undefined.\n\nAfter running the example, we get:\n```\n--------------- wirinj ---------------\nMissing dependencies:\n        mouth:Mouth *** NotFound ***\n        ear1:Ear *** NotFound ***\n        ear2:Ear *** NotFound ***\n        eye1:Eye *** NotFound ***\n        eye2:Eye *** NotFound ***\n    head:Head\n    body:Body *** NotFound ***\n    tail:Tail *** NotFound ***\n    leg1:Leg *** NotFound ***\n    leg2:Leg *** NotFound ***\n    leg3:Leg *** NotFound ***\n    leg4:Leg *** NotFound ***\n:Cat\n--------------------------------------\nTraceback (most recent call last):\n...\nwirinj.errors.MissingDependenciesError: Missing dependencies.\n```\n\nNotice that, although the first dependency, `Mouth`, failed to be satisfied, the injection process continues in order to gather as much information as possible about the missing dependencies.\n\nWith this report, it becomes clear which classes are undefined, and what needs to be added in the injection configuration.\n\n### Instance error\n\nIf an exception is raised during the instantiation of any of the dependencies,\nyou will not get the `dependency tree` logs as it happens when a dependency is missing.\n\nYou'll need to track the stack trace to fix the problem.\nHowever, there is a task planned in the [TO-DO](TODO.md) list to log the `dependency tree` in these cases too.\n\n\nPrivate injection\n----------------------------------\n\nYou use _dependency injection_ to decouple your class from its dependencies.\nA _factory_ is a specific type of dependency which allows you to create objects dynamically.\n\nSome factories require arguments to create the new object.\nThese arguments are passed to the `__init__` method along with other required dependencies.\n\nI call _private injection_ to a special form of injection that separates the `__init__` arguments in two groups:\n- __Public__ arguments: those you pass to the factory.\n- __Private__ arguments: other implementation dependencies.\n\nLet's compare the two modes:\n\n### Regular injection\n\nSome of the `__init__` arguments come from the factory call;\nthe remaining ones are injected automatically.\n\nExample ([regular_injection.py](examples/private_injection/regular_injection.py)):\n\n```python\nclass Cat:\n    def __init__(self, color, weight, feeder: Feeder = None):\n        ...\n\n@inject(...)\ndef fn(factory: Type[Cat]):\n    cat = factory('blue', 12)\n...\n```\n\nWhile `color` and `weight` are passed to the factory, the `feeder`argument is injected.\n\n### Private injection\n\nThis is the equivalent _private_ form for the previous code:\n\nExample ([private_injection.py](examples/private_injection/private_injection.py)):\n\n```python\nclass Cat:        \n    def __deps__(self, feeder: Feeder):\n        pass\n\n    @deps\n    def __init__(self, color, weight):\n        ...\n\n@inject(...)\ndef fn(factory: Type[Cat]):\n    cat = factory('blue', 12)\n```\n\nThe `@deps` decorator works this way:\n\n 0. The `@deps` decorator on `__init__` enables _private injection_.\n 0. The special method `__deps__` define which dependencies are required.\n 0. All the dependencies are located and injected before the object is initialized.\n 0. Finally, the real `__init__` method is called.\n\nNotice that `__deps__` is a mock method, it is not ever called.\nIts sole purpose is to define the dependencies through its argument signature.\n\n\n### Why using private injection\n\nYou split the initialization arguments in two parts:\n- `__init__` takes only the public API arguments.\n- _Private arguments_ are hidden and defined by the `__deps__` method.\n\n__pros__:\n- You keep your implementation dependencies apart of the public `__init__` interface.\n- Calling a factory is beautifully identical to instantiate a real class.\n- You keep the same `__init__` signature on all subclasses.\n- Each subclass can have different dependencies.\n- You don't have to code a new factory wrapper for each class to hide the implementation dependencies.\n- You can use positional arguments to call the factory.\n- You don't need to set the default values to `Null` for the _dependency arguments_.\n- You can freely use default values in `__init__`.  \n\n__cons__:\n- Your class will be dependent on the `@deps` decorator. \n\n\n### `@deps` decorator\n\nIn the previous sections, I have explained how this decorator is used.\nWhat I'm going to explain here is related only to the internal functioning of the feature.\n\nWhen you wrap `__init__` with the decorator `@deps`, two simple things happen:\n 0. A hidden argument `_dependencies` is added to `__init__` waiting for a `dict` to be passed.\n 0. The object is initialized with these dependencies __before__ `__init__` is called.  \n\nNotice that you can use this mechanism, even if you are not using other `wirinj` features, by setting the `_dependencies` argument manually.\nBy the time `__init__` is called, your object dependencies will already be initialized.\n\n\n### Enabling code completion with `__deps__`\n\nOf course, the IDE (e.g. `PyCharm`) will not detect the dependencies defined by `__deps__`:\n\n```python\nclass Cat:        \n    def __deps__(self, feeder: Feeder):\n        pass\n```\nIdeally, an _IDE_ plugin would detect the `__deps__` signature, making the dependencies available in [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#).\n\nAs long as [this plugin doesn't exist](TODO.md), you can achieve the same by adding some mock code to the `__deps__` method:\n\n```python\nclass Cat:        \n    def __deps__(self, feeder: Feeder):\n        self.feeder = feeder\n```\nIt will never be executed, but now, the IDE will recognize the dependencies as member variables:\n\n![](img/code_inspect_deps.png)\n\n\n### A full injection example\n\nThis silly example aims to illustrate several aspects of the `wirinj` library.\n\nThe two main classes, `Bob` and `Mike`, extend `PetDeliveryPerson`.\nThey are used to deliver pets to the client using one or more vehicles.\nWhenever a `Vehicle` is needed, it is built in advance.\n\nWhile `Bob` uses his only vehicle by repeating the route several times, `Mike` builds a fleet of autonomous vehicles to deliver all the pets in one trip.\n\nThe classes ([pet_delivery/classes.py](examples/pet_delivery/classes.py)):\n\n```python\nclass Pet:\n    def __deps__(self, sound: str, weight):\n        self.sound = sound\n        self.weight = weight\n\n    @deps\n    def __init__(self, gift_wrapped):\n        self.gift_wrapped = gift_wrapped\n\n    def cry(self):\n        return self.sound.lower() if self.gift_wrapped else self.sound.upper()\n\n\nclass Cat(Pet):\n    pass\n\n\nclass Dog(Pet):\n    pass\n\n\nclass Bird(Pet):\n    pass\n\n\nclass Part:\n    def __deps__(self, mount_sound):\n        self.mount_sound = mount_sound\n\n    @deps\n    def __init__(self):\n        pass\n\n    def mount(self):\n        return self.mount_sound\n\n\nclass Engine(Part):\n    pass\n\n\nclass Plate(Part):\n    pass\n\n\nclass Wheel(Part):\n    pass\n\n\nclass Container(Part):\n    pass\n\n\nclass VehicleBuilder:\n\n    def __deps__(self,\n                 engine_factory: Type[Engine],\n                 plate_factory: Type[Plate],\n                 wheel_factory: Type[Wheel],\n                 container_factory: Type[Container],\n                 ):\n        self.engine_factory = engine_factory\n        self.plate_factory = plate_factory\n        self.wheel_factory = wheel_factory\n        self.container_factory = container_factory\n\n    @deps\n    def __init__(self):\n        pass\n\n    def build(self, recipe: Dict):\n        parts = []  # type: List[Part]\n        parts += [self.engine_factory() for _ in range(recipe.get('engines', 0))]\n        parts += [self.plate_factory() for _ in range(recipe.get('plates', 0))]\n        parts += [self.wheel_factory() for _ in range(recipe.get('wheels', 0))]\n        parts += [self.container_factory() for _ in range(recipe.get('containers', 0))]\n\n        mounting = ''\n        for part in parts:\n            mounting += ' ' + part.mount()\n\n        return mounting\n\n\nclass Vehicle:\n    def __deps__(self, builder: VehicleBuilder, recipe: Dict, max_load_weight):\n        self.builder = builder\n        self.recipe = recipe\n        self.max_load_weight = max_load_weight\n\n    @deps\n    def __init__(self):\n        self.pets = []\n        self.build()\n\n    def go(self, miles):\n        logger.info('{} goes {} miles'.format(self.__class__.__name__, miles))\n\n    def come_back(self):\n        logger.info('{} commes back'.format(self.__class__.__name__))\n\n    def build(self):\n        logger.info('{} is built: {}'.format(\n            self.__class__.__name__,\n            self.builder.build(self.recipe)\n        ))\n\n    def get_available_load(self):\n        return self.max_load_weight - sum(pet.weight for pet in self.pets)\n\n\nclass Car(Vehicle):\n    pass\n\n\nclass Van(Vehicle):\n    pass\n\n\nclass Truck(Vehicle):\n    pass\n\n\nclass PetLoader:\n\n    def upload(self, pets: List[Pet], vehicle: Vehicle):\n        info = 'Uploading to the {}:'.format(vehicle.__class__.__name__.lower())\n        while pets:\n            pet = pets.pop()\n            if vehicle.get_available_load() >= pet.weight:\n                vehicle.pets.append(pet)\n                info += ' ' + pet.__class__.__name__\n            else:\n                pets.append(pet)\n                break\n        logger.info(info)\n\n    def download(self, vehicle):\n        logger.info('{} pets delivered'.format(len(vehicle.pets)))\n        vehicle.pets = []\n\n\nclass PetPicker:\n\n    def __deps__(self, pet_store: Type[Pet]):\n        self.pet_store = pet_store\n\n    @deps\n    def __init__(self):\n        # raise Exception('HORROR!!!!')\n        pass\n\n    def pick(self, qty, gift_wrapped):\n        info = 'Picking pets up: '\n        pets = []\n        for _ in range(qty):\n            pet = self.pet_store(gift_wrapped)\n            info += ' ' + pet.cry()\n            pets.append(pet)\n        logger.info(info)\n        return pets\n\n\nclass PetDeliveryPerson:\n\n    @deps\n    def __init__(self):\n        pass\n\n    def deliver(self, pet_qty, miles, gift_wrapped):\n        pass\n\n\nclass Bob(PetDeliveryPerson):\n    \"\"\"Bob builds a car and deliver pets in his vehicle repeating the route several times.\"\"\"\n\n    def __deps__(self, vehicle: Vehicle, pet_picker: PetPicker, pet_loader: PetLoader):\n        self.vehicle = vehicle\n        self.pet_picker = pet_picker\n        self.pet_loader = pet_loader\n\n    def deliver(self, pet_qty, miles, gift_wrapped):\n        # Pick up pets\n        pets = self.pet_picker.pick(pet_qty, gift_wrapped)\n\n        # Bob owns one vehicle only\n        while pets:\n            self.pet_loader.upload(pets, self.vehicle)\n            self.vehicle.go(miles)\n            self.pet_loader.download(self.vehicle)\n            self.vehicle.come_back()\n\n\nclass Mike(PetDeliveryPerson):\n    \"\"\"Mike builds several autonomous vehicles and use them to deliver the pets all together\"\"\"\n\n    def __deps__(self, vehicle_factory: Type[Vehicle], pet_picker: PetPicker, pet_loader: PetLoader):\n        self.vehicle_factory = vehicle_factory\n        self.pet_picker = pet_picker\n        self.pet_loader = pet_loader\n\n    @deps\n    def __init__(self):\n        super().__init__()\n        self.vehicles = []  # type: List[Vehicle]\n\n    def get_vehicle(self):\n        if self.vehicles:\n            return self.vehicles.pop()\n        else:\n            return self.vehicle_factory()\n\n    def park_vehicles(self, vehicles):\n        self.vehicles += vehicles\n\n    def deliver(self, pet_qty, miles, gift_wrapped):\n\n        # Pick up pets\n        pets = self.pet_picker.pick(pet_qty, gift_wrapped)\n\n        # Get vehicles and upload them\n        vehicles = []\n        while pets:\n            vehicle = self.get_vehicle()\n            vehicles.append(vehicle)\n            self.pet_loader.upload(pets, vehicle)\n\n        # Go\n        for vehicle in vehicles:\n            vehicle.go(miles)\n\n        # Deliver pets\n        for vehicle in vehicles:\n            self.pet_loader.download(vehicle)\n\n        # Come back\n        for vehicle in vehicles:\n            vehicle.come_back()\n\n        # Park\n        self.park_vehicles(vehicles)\n```\n\nInjection definitions ([pet_delivery/defs.py](examples/pet_delivery/defs.py)):\n\n```python\npet_defs = {\n    Dog: Instance(),\n    Cat: Instance(),\n    Bird: Instance(),\n\n    (Dog, 'sound'): 'Woof',\n    (Dog, 'weight'): 10,\n\n    (Cat, 'sound'): 'Meow',\n    (Cat, 'weight'): 5,\n\n    (Bird, 'sound'): 'Chirp',\n    (Bird, 'weight'): 0.1,\n}\n\n\nvehicle_defs = {\n    Engine: Instance(),\n    Plate: Instance(),\n    Wheel: Instance(),\n    Container: Instance(),\n\n    Type[Engine]: Factory(),\n    Type[Plate]: Factory(),\n    Type[Wheel]: Factory(),\n    Type[Container]: Factory(),\n\n    VehicleBuilder: Singleton(),\n\n    (Engine, 'mount_sound'): 'RRRRoarrr',\n    (Plate, 'mount_sound'): 'plaf',\n    (Wheel, 'mount_sound'): 'pffff',\n    (Container, 'mount_sound'): 'BLOOOOM',\n\n    Car: Instance(),\n    (Car, 'max_load_weight'): 10,\n    (Car, 'recipe'): {\n        'engines': 1,\n        'plates': 6,\n        'wheels': 4,\n    },\n\n    Van: Instance(),\n    (Van, 'max_load_weight'): 50,\n    (Van, 'recipe'): {\n        'engines': 1,\n        'plates': 8,\n        'wheels': 4,\n    },\n\n    Truck: Instance(),\n    (Truck, 'max_load_weight'): 200,\n    (Truck, 'recipe'): {\n        'engines': 1,\n        'plates': 20,\n        'wheels': 12,\n        'container': 1,\n    },\n}\n\ncommon_defs = {\n    PetPicker: Singleton(),\n    PetLoader: Singleton(),\n\n    Bob: Singleton(),\n    Mike: Singleton(),\n}\n```\n\nRunning the app ([pet_delivery/example_1.py](examples/pet_delivery/example_1.py)):\n\n```python\nworld_one_defs = {\n    (Bob, Vehicle): Singleton(Car),\n    (Bob, PetPicker, Type[Pet]): Factory(Bird),\n\n    (Mike, Type[Vehicle]): Factory(Van),\n    (Mike, PetPicker, Type[Pet]): Factory(Cat),\n}\n\nworld_one = Definitions(\n    pet_defs,\n    vehicle_defs,\n    common_defs,\n    world_one_defs,\n)\n\nlogging.basicConfig(format='%(message)s', level=logging.INFO)\n\n@inject(world_one)\ndef do(bob: Bob, mike: Mike):\n    bob.deliver(100, 5, False)\n    bob.deliver(50, 200, True)\n\n    mike.deliver(20, 1000, True)\n\ndo()\n```\n\nRunning the same app with another wiring configuration ([pet_delivery/example_2.py](examples/pet_delivery/example_2.py)):\n\n```python\nworld_two_defs = {\n    (Bob, Vehicle): Singleton(Van),\n    (Bob, PetPicker, Type[Pet]): Factory(Cat),\n\n    (Mike, Type[Vehicle]): Factory(Truck),\n    (Mike, PetPicker, Type[Pet]): Factory(Dog),\n}\n\nworld_two = Definitions(\n    pet_defs,\n    vehicle_defs,\n    common_defs,\n    world_two_defs,\n)\n\nlogging.basicConfig(format='%(message)s', level=logging.INFO)\n\n@inject(world_two)\ndef do(bob: Bob, mike: Mike):\n    bob.deliver(100, 5, False)\n    bob.deliver(50, 200, True)\n\n    mike.deliver(20, 1000, True)\n\ndo()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/davidcim/wirinj", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wirinj", "package_url": "https://pypi.org/project/wirinj/", "platform": "", "project_url": "https://pypi.org/project/wirinj/", "project_urls": {"Homepage": "https://github.com/davidcim/wirinj"}, "release_url": "https://pypi.org/project/wirinj/0.6.4/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A new dependency injection library for Python 3 with an original and clean design.", "version": "0.6.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Wirinj</h1>\n<p>A new dependency injection library for Python 3 with an original and clean design.</p>\n<h2>Why another dependency injection library?</h2>\n<p>Working on a large project I tried out <a href=\"https://github.com/ets-labs/python-dependency-injector\" rel=\"nofollow\">python-dependency-injector</a> first.\nThen, I decided to switch to <a href=\"https://github.com/google/pinject\" rel=\"nofollow\">pinject</a>.\nAs none of them had the features I wanted, I finally decided to write my own library to meet my needs:</p>\n<ul>\n<li>Minimal boiler plate code.</li>\n<li>Avoiding dependencies to the injection library itself.</li>\n<li>Friendly with <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\" rel=\"nofollow\">IDE</a>'s <a href=\"https://www.jetbrains.com/help/pycharm/auto-completing-code.html#\" rel=\"nofollow\">code completion</a> (e.g. with <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"nofollow\">PyCharm</a>).</li>\n<li>Using <a href=\"https://en.wikipedia.org/wiki/Reflection_(computer_programming)#Python\" rel=\"nofollow\">reflection</a> to detect dependencies automatically.</li>\n<li>Easy to define and use of factories.</li>\n<li>Autowiring option.</li>\n<li>Easy to fix dependency problems.</li>\n<li>Detailed injection reports.</li>\n<li>Powerful but simple wiring configuration.</li>\n<li>Avoiding naming conventions.</li>\n<li>Detection of <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"nofollow\">type annotations</a>.</li>\n<li><a href=\"#private-injection\" rel=\"nofollow\">Private injection</a>.</li>\n<li>Open and extendable architecture.</li>\n</ul>\n<h2>Installation</h2>\n<p>python &gt;= 3.5</p>\n<pre>$ pip install wirinj\n</pre>\n<h2>Minimal example</h2>\n<p><a href=\"./examples/basic/minimal.py\" rel=\"nofollow\">minimal.py</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wirinj</span> <span class=\"kn\">import</span> <span class=\"n\">Injector</span><span class=\"p\">,</span> <span class=\"n\">Autowiring</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">inj</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">(</span><span class=\"n\">Autowiring</span><span class=\"p\">())</span>\n\n<span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">)</span>\n</pre>\n<p>Returns:</p>\n<pre><code>&lt;__main__.Cat object at 0x7fbe537f52b0&gt;\n</code></pre>\n<h2>Basic usage</h2>\n<p>Example (<a href=\"examples/basic/basic_usage.py\" rel=\"nofollow\">basic_usage.py</a>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wirinj</span> <span class=\"kn\">import</span> <span class=\"n\">Injector</span><span class=\"p\">,</span> <span class=\"n\">Definitions</span><span class=\"p\">,</span> <span class=\"n\">Instance</span><span class=\"p\">,</span> <span class=\"n\">Singleton</span><span class=\"p\">,</span> <span class=\"n\">Factory</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Wiring definitions</span>\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'Meow'</span><span class=\"p\">,</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Dog</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n    <span class=\"s1\">'cat_factory'</span><span class=\"p\">:</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Create injector</span>\n<span class=\"n\">inj</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n</pre>\n<p><br>\nGet a <code>'sound'</code>:</p>\n<pre><span class=\"n\">sound</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'sound'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sound</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Meow\n</code></pre>\n<p><br>\nGet a <code>Cat</code>:</p>\n<pre><span class=\"n\">cat1</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span>\n<span class=\"n\">cat2</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat1</span> <span class=\"ow\">is</span> <span class=\"n\">cat2</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;__main__.Cat object at 0x7fab3ddc2208&gt;\n&lt;__main__.Cat object at 0x7fab3c1fa438&gt;\nFalse\n</code></pre>\n<p><code>Cat</code> returns different instances each time because it is defined as an <code>Instance()</code>.</p>\n<p><br>\nGet the <code>Dog</code>:</p>\n<pre><span class=\"n\">dog</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">)</span>\n<span class=\"n\">dog2</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dog2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span> <span class=\"ow\">is</span> <span class=\"n\">dog2</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;__main__.Dog object at 0x7fab3c1fa748&gt;\n&lt;__main__.Dog object at 0x7fab3c1fa748&gt;\nTrue\n</code></pre>\n<p><code>Dog</code> always returns the same object because it is defined as a <code>Singleton()</code>.</p>\n<p><br>\nGet a <code>cat factory</code> and use it to create a new <code>Cat</code>:</p>\n<pre><span class=\"n\">cat_factory</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cat_factory'</span><span class=\"p\">)</span>\n<span class=\"n\">cat3</span> <span class=\"o\">=</span> <span class=\"n\">cat_factory</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;__main__.Cat object at 0x7fc6a98119b0&gt;\n</code></pre>\n<p><code>cat_factory</code> returns a factory because it is defined as a <code>Factory(Cat)</code>.</p>\n<h2>The @inject decorator</h2>\n<p>If you are using an <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\" rel=\"nofollow\">IDE</a> such as <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"nofollow\">PyCharm</a>, you will notice that <a href=\"https://www.jetbrains.com/help/pycharm/auto-completing-code.html#\" rel=\"nofollow\">code completion</a> do not work with the previous example.\nThe <em>IDE</em> cannot know the type of, for example, <code>cat1</code> or <code>dog</code>.</p>\n<p>You can be IDE-friendly by decorating a function with <code>@inject</code>:</p>\n<p>Example (<a href=\"examples/basic/inject_function.py\" rel=\"nofollow\">inject_function.py</a>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wirinj</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'Meow'</span><span class=\"p\">,</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Dog</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n    <span class=\"s1\">'cat_factory'</span><span class=\"p\">:</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat1</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">cat2</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">dog</span><span class=\"p\">:</span> <span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">,</span> <span class=\"n\">cat_factory</span><span class=\"p\">):</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sound:'</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cat1:, cat1)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cat2:'</span><span class=\"p\">,</span> <span class=\"n\">cat2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cat1 = cat2: '</span><span class=\"p\">,</span> <span class=\"n\">cat1</span> <span class=\"ow\">is</span> <span class=\"n\">cat2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'dog:'</span><span class=\"p\">,</span> <span class=\"n\">dog</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cat3</span> <span class=\"o\">=</span> <span class=\"n\">cat_factory</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cat3:'</span><span class=\"p\">,</span> <span class=\"n\">cat3</span><span class=\"p\">)</span>\n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>Returns:</p>\n<pre><code>sound:  Meow\ncat1:  &lt;__main__.Cat object at 0x7f675ce5db38&gt;\ncat2:  &lt;__main__.Cat object at 0x7f675ce5df28&gt;\ncat1 = cat2:  False\ndog:  &lt;__main__.Dog object at 0x7f675ce5dac8&gt;\ncat3:  &lt;__main__.Cat object at 0x7f675ce72400&gt;\n</code></pre>\n<p><code>@inject</code> inspects the arguments of the <code>fn</code> function signature and inject the required dependencies.\nYou get all the needed dependencies through the function arguments.\nYou type less and it is clearer and IDE friendly.</p>\n<p>As <code>cat1</code> and <code>cat2</code> arguments matches <code>Cat: Instance()</code> configuration, two new <code>Cat</code> instances are injected.</p>\n<p>Simillary, <code>dog</code> matches <code>Dog: Singleton()</code>.\nTherefore, any <code>Dog</code> argument will be injected with the same single <code>Dog</code>.</p>\n<p>In contrast, for <code>sound</code> and <code>cat_factory</code>, the configuration entry is matched by <strong>name</strong> and not by <strong>class</strong>.\nThis is because, in the wiring configuration <code>dict</code>, the <strong>key</strong> of <code>'sound': 'Meow'</code> and <code>'cat_factory': Factory(Cat)</code> are of type <code>string</code>:</p>\n<ul>\n<li>When the <em>key</em> is a <strong>class</strong>, the injector will look at the <strong>type</strong> annotation of the argument.</li>\n<li>When the <em>key</em> is a <strong>string</strong> the injector will look at the <strong>name</strong> of the argument.</li>\n</ul>\n<h2>Factories</h2>\n<p>You can object that, in the previos example, the <a href=\"https://www.jetbrains.com/help/pycharm/auto-completing-code.html#\" rel=\"nofollow\">code completion</a> will not work with <code>cat_factory</code>.\nThat's true; fortunately, this can be easily fixed:</p>\n<h4>IDE friendly factories</h4>\n<p>Just add a type annotation of type <code>Type[Cat]</code> to the factory argument:</p>\n<p>Example (<a href=\"examples/basic/ide_friendly_factory.py\" rel=\"nofollow\">ide_friendly_factory.py</a>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Type</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]):</span>\n    <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">cat_factory</span><span class=\"p\">(</span><span class=\"s1\">'Meow'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cat:'</span><span class=\"p\">,</span> <span class=\"n\">cat</span><span class=\"p\">)</span>\n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>Now, it is recognized by the IDE:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a50d5a1ed2c8a2547fc432f32b43385f49eea53e/696d672f636f64655f696e73706563742e706e67\"></p>\n<p><br>\n<code>Type[Cat]</code>, as explained in the <a href=\"https://docs.python.org/3/library/typing.html#typing.Type\" rel=\"nofollow\">typing</a> module docs, represents the class <code>Cat</code> or a subclass of it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Type</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BlackCat</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">cat_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]):</span>\n    <span class=\"k\">return</span> <span class=\"n\">cat_class</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Cat: '</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'BlackCat: '</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">BlackCat</span><span class=\"p\">))</span>\n</pre>\n<p>Returns:</p>\n<pre><code>Cat:  &lt;__main__.Cat object at 0x7fc458bc7588&gt;\nBlackCat:  &lt;__main__.BlackCat object at 0x7fc458bc7588&gt;\n</code></pre>\n<h3>Defining the factory by type</h3>\n<p>To not be limited to a particular name, such as <code>cat_factory</code>, we can define the factory dependency by type.</p>\n<pre><span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This way you can name the argument as you like, as long as its type annotation is <code>Type[Cat]</code>.\nFor example:</p>\n<pre><span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cats</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]):</span>\n    <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">cats</span><span class=\"p\">()</span>\n</pre>\n<h2>Dependency definitions</h2>\n<p><code>Definitions</code> class is a convenient way to configure the wiring of your classes according to a definition <code>dict</code>.\nMost of the previous examples have made use of a <code>Definitions</code> object with a <code>dict</code> as an argument.\nNow I'm going to explain it in detail.</p>\n<h3>Definition format</h3>\n<p>One or several <code>dict</code> define your wiring configuration.\nEach <em>key</em> represents the argument to be injected.\nThe <em>value</em> represents how is it injected:</p>\n<pre><span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">inj</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n</pre>\n<h3>dict keys</h3>\n<ul>\n<li>\n<p>If the <em>key</em> is a <code>class</code> it will match the argument's <strong>type</strong> annotation.\nE.g.: the first key in the example above causes any argument of type <code>Cat</code>, no matter its name, to be injected with a new <em>instance</em> of <code>Cat</code>.</p>\n</li>\n<li>\n<p>If the <em>key</em> is a <code>string</code> it will match the argument <strong>name</strong>.\nE.g.: the second key causes any argument whose name is <code>'dog'</code> to be injected with a unique <code>Dog</code> instance.\nHere, as the class can't be inferred from the key, you need to explicitly provide the class as an argument: <code>'dog': Singleton(Dog)</code>.</p>\n</li>\n</ul>\n<h3>dict values</h3>\n<p>Each <em>value</em> in the <code>dict</code> can be:</p>\n<ul>\n<li>A <em>literal</em> value you want to be injected. E.g. <code>'db_name': 'my-db'</code>.</li>\n<li><code>Instance</code>: inject a new instance each time.</li>\n<li><code>Singleton</code>: inject the same single instance every time.</li>\n<li><code>Factory</code>: inject a factory object that can be called to create new objects dynamically.</li>\n<li><code>CustomInstance</code>: similar to <code>Instance</code> but you provide a custom function which returns new instances.</li>\n<li><code>CustomSingleton</code>: similar to <code>Singleton</code> but you provide a custom function which returns the singleton.</li>\n<li>Other user defined subclasses of <code>DependencyBuilder</code> or <code>Dependency</code>.</li>\n</ul>\n<p>Example (<a href=\"examples/basic/definition_types.py\" rel=\"nofollow\">definition_types.py</a>):</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">dog_creator</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\" Custom instantiation \"\"\"</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">dog</span>\n\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">House</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n    <span class=\"n\">Dog</span><span class=\"p\">:</span> <span class=\"n\">CustomInstance</span><span class=\"p\">(</span><span class=\"n\">dog_creator</span><span class=\"p\">),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Dog</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">house</span><span class=\"p\">:</span> <span class=\"n\">House</span><span class=\"p\">,</span> <span class=\"n\">cat_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">],</span> <span class=\"n\">dog_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Dog</span><span class=\"p\">]):</span>\n    <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">cat_factory</span><span class=\"p\">()</span>\n    <span class=\"n\">dog</span> <span class=\"o\">=</span> <span class=\"n\">dog_factory</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>    \n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<h3>Providing a class</h3>\n<p><code>Instance</code>, <code>Singleton</code> and <code>Factory</code> accept an optional class argument to specify the class of the object to be created.\nYou pass the class in two use cases:</p>\n<ul>\n<li>The <em>key</em> is a <code>string</code> and therefore the dependency class is undefined.</li>\n<li>The argument is annotated with a <em>base class</em> but you want to provide a <em>subclass</em> of it.</li>\n</ul>\n<p>Example of both cases (<a href=\"examples/basic/explicit_type.py\" rel=\"nofollow\">explicit_type.py</a>):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">),</span>\n    <span class=\"n\">Pet</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">,</span> <span class=\"n\">pet</span><span class=\"p\">:</span> <span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cat is a'</span><span class=\"p\">,</span> <span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'pet is a'</span><span class=\"p\">,</span> <span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>    \n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>returns:</p>\n<pre><code>cat is a Cat\npet is a Dog\n</code></pre>\n<h3>Creation path</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Nail</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Leg</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nail</span><span class=\"p\">:</span> <span class=\"n\">Nail</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">leg</span><span class=\"p\">:</span> <span class=\"n\">Leg</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Imagine you ask for a <code>Cat</code> which requires a <code>Leg</code> which requires a <code>Nail</code>.\nThe injector will gather:</p>\n<ul>\n<li>First, the <code>Nail</code> that has no dependencies.</li>\n<li>Then, the <code>Leg</code> with the <code>Nail</code> as an argument.</li>\n<li>Finally, the <code>Cat</code> with the <code>Leg</code> as an argument.</li>\n</ul>\n<p>We can think of this process as a path: <code>Cat</code> -&gt; nail:<code>Nail</code> -&gt; leg:<code>Leg</code>.\nI call this the <code>creation path</code>.</p>\n<p>You can explicitly specify a <code>creation path</code> constraint in the definition <code>dict</code>.</p>\n<p>Example (<a href=\"examples/basic/creation_path.py\" rel=\"nofollow\">creation_path.py</a>):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Animal</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sound</span> <span class=\"o\">=</span> <span class=\"n\">sound</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cow</span><span class=\"p\">(</span><span class=\"n\">Animal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Dog</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Cow</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">):</span> <span class=\"s1\">'woof'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">):</span> <span class=\"s1\">'meow'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sound'</span><span class=\"p\">:</span> <span class=\"s1\">'?'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">dog</span><span class=\"p\">:</span> <span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"n\">cow</span><span class=\"p\">:</span> <span class=\"n\">Cow</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Cat:'</span><span class=\"p\">,</span> <span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">sound</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Dog:'</span><span class=\"p\">,</span> <span class=\"n\">dog</span><span class=\"o\">.</span><span class=\"n\">sound</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Cow:'</span><span class=\"p\">,</span> <span class=\"n\">cow</span><span class=\"o\">.</span><span class=\"n\">sound</span><span class=\"p\">)</span>\n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>Returns:</p>\n<pre><code>Cat: meow\nDog: woof\nCow: ?\n</code></pre>\n<p>To restrict a definition entry to a particular <code>creation path</code> we use a <code>tuple</code> in the <strong>key</strong> part.\nThis <code>tuple</code> must match the last entries in the <code>creation path</code>.</p>\n<p>For each <code>tuple</code> entry, a <code>string</code> refers to the argument <strong>name</strong> and a <code>class</code> refers to the argument <strong>type</strong> annotation.</p>\n<p>If two entries match the required dependency, the more specific one will be chosen.</p>\n<h3>Custom dependencies</h3>\n<p><code>Instance</code> and <code>Singleton</code> are used for simple class instantiation.\nWhen a custom process is required to create or locate the dependency, use <code>CustomInstance</code> or <code>CustomSingleton</code>.\nBoth take a <code>function</code> as an argument.</p>\n<p>Example (<a href=\"examples/basic/custom_dependencies.py\" rel=\"nofollow\">custom_dependencies.py</a>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randint</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'A </span><span class=\"si\">{1}</span><span class=\"s1\"> pounds </span><span class=\"si\">{0}</span><span class=\"s1\"> cat.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span><span class=\"p\">)</span> \n\n<span class=\"k\">def</span> <span class=\"nf\">create_cat</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Cat</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span> \n\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'color'</span><span class=\"p\">:</span> <span class=\"s1\">'blue'</span><span class=\"p\">,</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">CustomInstance</span><span class=\"p\">(</span><span class=\"n\">create_cat</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat1</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">cat2</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">cat3</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat3</span><span class=\"p\">)</span>\n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>returns:</p>\n<pre><code>A 11 pounds blue cat.\nA 5 pounds blue cat.\nA 14 pounds blue cat.\n</code></pre>\n<h3>Custom dependencies with arguments</h3>\n<p>In the previous example, the object is instantiated without arguments,\nso all of <code>__init__</code>'s arguments are injected from dependencies.</p>\n<p>If your class requires some arguments to be passed to be created (<strong>explicit arguments</strong>) in addition to the automatically injected dependencies (<strong>injection arguments</strong>),\nI recommend to follow these rules:</p>\n<ol>\n<li>\n<p>In the <code>__init__</code> method, place the <em>explicit arguments</em> in the first place and then, the <em>injection arguments</em>.\nThis allow you to use positional arguments when you create the object.</p>\n</li>\n<li>\n<p>Set the default value of the <em>injection arguments</em> to <code>None</code>.\nThis way the IDE <a href=\"https://www.jetbrains.com/help/pycharm/auto-completing-code.html#\" rel=\"nofollow\">code completion</a> will not complain about missing arguments.\nAlso, this is the only way you can have defaults in your <em>explicit arguments</em> if they are followed by <em>injection arguments</em>.</p>\n</li>\n<li>\n<p>About the creation function that you pass to <code>CustomInstance</code>, use the same name and position for the <em>explicit arguments</em> as you use in the <code>__init__</code> method.\nThe rest of the arguments don't have to be related at all to the <code>__init__</code> arguments.\nIndeed, you can specify as many dependency arguments as you need to create the object.\nThe injection process will inspect the function signature and will provide them.</p>\n</li>\n</ol>\n<p>Example (<a href=\"examples/basic/custom_dependencies_with_args.py\" rel=\"nofollow\">custom_dependencies_with_args.py</a>):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\"> is a </span><span class=\"si\">{2}</span><span class=\"s1\"> pounds </span><span class=\"si\">{1}</span><span class=\"s1\"> cat.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_cat</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Cat</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n\n<span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'color'</span><span class=\"p\">:</span> <span class=\"s1\">'black'</span><span class=\"p\">,</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">CustomInstance</span><span class=\"p\">(</span><span class=\"n\">create_cat</span><span class=\"p\">),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]):</span>\n    <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"s1\">'Tom'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">)</span>\n    <span class=\"n\">cat2</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"s1\">'Sam'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>returns:</p>\n<pre><code>Tom is a 8 pounds black cat.\nSam is a 14 pounds black cat.\n</code></pre>\n<p>About the 3 arguments of <code>Cat</code>.<code>__init__</code>:</p>\n<ul>\n<li>One comes from calling the factory.</li>\n<li>Another one from the dependency configuration.</li>\n<li>The third is generated by the custom creation function.</li>\n</ul>\n<h3>Setting default to <code>Injected</code></h3>\n<p>Instead of setting the default value of the <em>injection arguments</em> to <code>None</code>, you can use the special value <code>Injected</code>:</p>\n<ul>\n<li><strong>Pros</strong>: if one argument is missing, a specific <code>MissingDependenciesError</code> is raised.\nOtherwise, the execution would continue with <code>None</code> default and fail later in an unpredictable way.</li>\n<li><strong>Cons</strong>: you add a dependency to <code>wirinj</code>.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wirinj</span> <span class=\"kn\">import</span> <span class=\"n\">Injected</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">Injected</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"n\">Injected</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<h3>Splitting definitions</h3>\n<p>You can split the dependency configuration in several <code>dict</code> definitions.</p>\n<p>Example (<a href=\"examples/basic/splitted_definitions.py\" rel=\"nofollow\">splitted_definitions.py</a>):</p>\n<pre><span class=\"n\">defs1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">defs2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Engine</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Engine</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs1</span><span class=\"p\">,</span> <span class=\"n\">defs2</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p><code>Definitions</code> accepts any number of definition <code>dict</code>s.</p>\n<h2>Autowiring</h2>\n<p>Dependency injection comes at the cost of having to maintain it.\nThe <code>Autowiring</code> class makes this task lighter.</p>\n<p>You add <code>Autowiring</code> at the end of the wiring configurations as a last resort to provide a dependency on the fly when it is undefined.\nThe dependency type, <code>Instance</code>, <code>Singleton</code> or <code>Factory</code>, is chosen by heuristic rules.</p>\n<p>Let's view an example:</p>\n<p>Example (<a href=\"examples/basic/autowiring.py\" rel=\"nofollow\">autowiring.py</a>):</p>\n<pre>    <span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Horse</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">defs</span><span class=\"p\">),</span> <span class=\"n\">Autowiring</span><span class=\"p\">())</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">dog</span><span class=\"p\">:</span> <span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"n\">horse_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Horse</span><span class=\"p\">]):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n        <span class=\"n\">horse</span> <span class=\"o\">=</span> <span class=\"n\">horse_factory</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">horse</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fn</span><span class=\"p\">()</span>\n</pre>\n<p>Returns:</p>\n<pre><code>Cat\nDog\nHorse\n</code></pre>\n<p>3 dependencies are automatically generated by <code>Autowiring</code>:</p>\n<ul>\n<li>A <code>Dog</code> singleton.</li>\n<li>A <code>Type[Horse]</code> factory.</li>\n<li>A <code>Horse</code> instance.</li>\n</ul>\n<h3>Heuristic rules</h3>\n<p><code>Autowiring</code> works only for arguments that have a <em>type annotation</em>:</p>\n<ul>\n<li>If the type of the annotation is a <code>class</code>, as with <code>dog: Dog</code> in the previous example, a <em>singleton</em> will be generated.</li>\n<li>If the type is a <code>Type[class]</code>, as with <code>horse_factory: Type[Horse]</code>, a <em>factory</em> will be provided.</li>\n<li>If the injection occurs in a factory, as when <code>horse_factory()</code> is called, an <em>instance</em> will be created.</li>\n</ul>\n<h3>Autowiring for production</h3>\n<p>In my opinion, this kind of <em>magic</em> should not be used in production environments;\nyou should not take the risk to leave such important wiring decisions in the hands of a heuristic algorithm.</p>\n<p>Fortunately, you can use <code>AutowiringReport</code> class to easily convert the autowiring configuration into a regular dependency definition:</p>\n<h3>Autowiring report</h3>\n<p>It's quite simple to use; just pass an <code>AutowiringReport</code> instance to <code>Autowiring</code>:</p>\n<p>Example (<a href=\"examples/report/autowiring_report.py\" rel=\"nofollow\">autowiring_report.py</a>):</p>\n<pre><span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">AutowiringReport</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">(</span><span class=\"n\">deps</span><span class=\"p\">),</span> <span class=\"n\">Autowiring</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">:</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">dog</span><span class=\"p\">:</span> <span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"n\">horse_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Horse</span><span class=\"p\">]):</span>\n    <span class=\"o\">...</span>    \n\n<span class=\"n\">fn</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n</pre>\n<p>Returns:</p>\n<pre><code>...\n--------------- wirinj ---------------\nAutowiring report:\n\nDefinitions({\n    Dog: Singleton(),\n    Type[Horse]: Factory(),\n    Horse: Instance(),\n}),\n--------------------------------------\n</code></pre>\n<p>Call <code>report.get()</code> to get the report.\nReview and copy the definitions to your configuration file, remove <code>Autowiring</code>, and you will be production ready.</p>\n<h3><em>No singletons</em> option</h3>\n<p>You may set <code>use_singletons</code> to <code>False</code> to force all dependencies to be injected as an <code>Instance</code>.</p>\n<pre><span class=\"n\">Autowiring</span><span class=\"p\">(</span><span class=\"n\">use_singletons</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>Injection reports</h2>\n<p>During each injection process, a <em>dependency tree</em> is built with all the dependencies that are being gathered.</p>\n<p>As you change your code, your dependency configuration can get out of sync.\n<code>wirinj</code> include reporting features that can help you to solve this dependency issues:</p>\n<h3>Debugging the injection</h3>\n<p>The injection process can be debugged to expose the creation order and the <em>dependency tree</em>.</p>\n<p>Take this composition of classes (<a href=\"examples/report/cat_example_classes.py\" rel=\"nofollow\">cat_example_classes.py</a>) :</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Nail</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Leg</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nail1</span><span class=\"p\">:</span> <span class=\"n\">Nail</span><span class=\"p\">,</span> <span class=\"n\">nail2</span><span class=\"p\">:</span> <span class=\"n\">Nail</span><span class=\"p\">,</span> <span class=\"n\">nail3</span><span class=\"p\">:</span> <span class=\"n\">Nail</span><span class=\"p\">,</span> <span class=\"n\">nail4</span><span class=\"p\">:</span> <span class=\"n\">Nail</span><span class=\"p\">,</span> <span class=\"n\">nail5</span><span class=\"p\">:</span> <span class=\"n\">Nail</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Mouth</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ear</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Eye</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Head</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mouth</span><span class=\"p\">:</span> <span class=\"n\">Mouth</span><span class=\"p\">,</span> <span class=\"n\">ear1</span><span class=\"p\">:</span> <span class=\"n\">Ear</span><span class=\"p\">,</span> <span class=\"n\">ear2</span><span class=\"p\">:</span> <span class=\"n\">Ear</span><span class=\"p\">,</span> <span class=\"n\">eye1</span><span class=\"p\">:</span> <span class=\"n\">Eye</span><span class=\"p\">,</span> <span class=\"n\">eye2</span><span class=\"p\">:</span> <span class=\"n\">Eye</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Body</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Tail</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">:</span> <span class=\"n\">Head</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Body</span><span class=\"p\">,</span> <span class=\"n\">tail</span><span class=\"p\">:</span> <span class=\"n\">Tail</span><span class=\"p\">,</span> <span class=\"n\">leg1</span><span class=\"p\">:</span> <span class=\"n\">Leg</span><span class=\"p\">,</span> <span class=\"n\">leg2</span><span class=\"p\">:</span> <span class=\"n\">Leg</span><span class=\"p\">,</span> <span class=\"n\">leg3</span><span class=\"p\">:</span> <span class=\"n\">Leg</span><span class=\"p\">,</span> <span class=\"n\">leg4</span><span class=\"p\">:</span> <span class=\"n\">Leg</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Now, we can debug the injection process just by setting the logging level to <code>DEBUG</code> and then, requesting a <code>Cat</code> from the <code>Injector</code>:</p>\n<p>Example (<a href=\"examples/report/injection_debug_report.py\" rel=\"nofollow\">injection_debug_report.py</a>):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">inj</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">(</span><span class=\"n\">Autowiring</span><span class=\"p\">(</span><span class=\"n\">use_singletons</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span>\n</pre>\n<p>Note that we are replacing all the dependency definitions by a simple <code>Autowiring()</code>.\nWe pass the argument <code>use_singletons=False</code> to force all dependencies to be injected as an <code>Instance</code>.\nBy default <code>Autowiring</code> generates <code>Singleton</code> dependencies and, in this case, we don't want all the legs of the <code>Cat</code> to be the same.</p>\n<p>The code above returns this:</p>\n<pre><code>--------------- wirinj ---------------\n        mouth:Mouth\n        ear1:Ear\n        ear2:Ear\n        eye1:Eye\n        eye2:Eye\n    head:Head\n    body:Body\n    tail:Tail\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg1:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg2:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg3:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg4:Leg\n:Cat\n--------------------------------------\n</code></pre>\n<p>You can see how all the dependencies are gathered, and in which order.\nThe final object is the requested <code>Cat</code> object.</p>\n<h3>Missing dependencies</h3>\n<p>Injection doesn't stop when a dependency is missing.\nIt continues building the <em>dependency tree</em> as far as it can.\nThis makes it possible to fix several dependency issues in one shot.</p>\n<p>If one ore more dependencies are missing, an <code>ERROR</code> level report will be logged.\nTherefore, you don't need to change the <code>logging</code> level to get it; just look above the <em>error traceback</em> after a dependency exception.</p>\n<p>Example (<a href=\"examples/report/missing_dependencies_report.py\" rel=\"nofollow\">missing_dependencies_report.py</a>):</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">examples.report.cat_example_classes</span> <span class=\"kn\">import</span> <span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"n\">Head</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">wirinj</span> <span class=\"kn\">import</span> <span class=\"n\">Injector</span><span class=\"p\">,</span> <span class=\"n\">Definitions</span><span class=\"p\">,</span> <span class=\"n\">Instance</span>\n\n    <span class=\"n\">inj</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">(</span><span class=\"n\">Definitions</span><span class=\"p\">({</span>\n        <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n        <span class=\"n\">Head</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"p\">}))</span>\n    <span class=\"n\">cat2</span> <span class=\"o\">=</span> <span class=\"n\">inj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span>\n</pre>\n<p>In the example above, we only define the wiring for <code>Cat</code> and <code>Head</code>.\nAll the other dependencies, such as <code>Mouth</code>, <code>Ear</code>, <code>Eye</code>, etc, are undefined.</p>\n<p>After running the example, we get:</p>\n<pre><code>--------------- wirinj ---------------\nMissing dependencies:\n        mouth:Mouth *** NotFound ***\n        ear1:Ear *** NotFound ***\n        ear2:Ear *** NotFound ***\n        eye1:Eye *** NotFound ***\n        eye2:Eye *** NotFound ***\n    head:Head\n    body:Body *** NotFound ***\n    tail:Tail *** NotFound ***\n    leg1:Leg *** NotFound ***\n    leg2:Leg *** NotFound ***\n    leg3:Leg *** NotFound ***\n    leg4:Leg *** NotFound ***\n:Cat\n--------------------------------------\nTraceback (most recent call last):\n...\nwirinj.errors.MissingDependenciesError: Missing dependencies.\n</code></pre>\n<p>Notice that, although the first dependency, <code>Mouth</code>, failed to be satisfied, the injection process continues in order to gather as much information as possible about the missing dependencies.</p>\n<p>With this report, it becomes clear which classes are undefined, and what needs to be added in the injection configuration.</p>\n<h3>Instance error</h3>\n<p>If an exception is raised during the instantiation of any of the dependencies,\nyou will not get the <code>dependency tree</code> logs as it happens when a dependency is missing.</p>\n<p>You'll need to track the stack trace to fix the problem.\nHowever, there is a task planned in the <a href=\"TODO.md\" rel=\"nofollow\">TO-DO</a> list to log the <code>dependency tree</code> in these cases too.</p>\n<h2>Private injection</h2>\n<p>You use <em>dependency injection</em> to decouple your class from its dependencies.\nA <em>factory</em> is a specific type of dependency which allows you to create objects dynamically.</p>\n<p>Some factories require arguments to create the new object.\nThese arguments are passed to the <code>__init__</code> method along with other required dependencies.</p>\n<p>I call <em>private injection</em> to a special form of injection that separates the <code>__init__</code> arguments in two groups:</p>\n<ul>\n<li><strong>Public</strong> arguments: those you pass to the factory.</li>\n<li><strong>Private</strong> arguments: other implementation dependencies.</li>\n</ul>\n<p>Let's compare the two modes:</p>\n<h3>Regular injection</h3>\n<p>Some of the <code>__init__</code> arguments come from the factory call;\nthe remaining ones are injected automatically.</p>\n<p>Example (<a href=\"examples/private_injection/regular_injection.py\" rel=\"nofollow\">regular_injection.py</a>):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">feeder</span><span class=\"p\">:</span> <span class=\"n\">Feeder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]):</span>\n    <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>While <code>color</code> and <code>weight</code> are passed to the factory, the <code>feeder</code>argument is injected.</p>\n<h3>Private injection</h3>\n<p>This is the equivalent <em>private</em> form for the previous code:</p>\n<p>Example (<a href=\"examples/private_injection/private_injection.py\" rel=\"nofollow\">private_injection.py</a>):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>        \n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">feeder</span><span class=\"p\">:</span> <span class=\"n\">Feeder</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">]):</span>\n    <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>@deps</code> decorator works this way:</p>\n<ol>\n<li>The <code>@deps</code> decorator on <code>__init__</code> enables <em>private injection</em>.</li>\n<li>The special method <code>__deps__</code> define which dependencies are required.</li>\n<li>All the dependencies are located and injected before the object is initialized.</li>\n<li>Finally, the real <code>__init__</code> method is called.</li>\n</ol>\n<p>Notice that <code>__deps__</code> is a mock method, it is not ever called.\nIts sole purpose is to define the dependencies through its argument signature.</p>\n<h3>Why using private injection</h3>\n<p>You split the initialization arguments in two parts:</p>\n<ul>\n<li><code>__init__</code> takes only the public API arguments.</li>\n<li><em>Private arguments</em> are hidden and defined by the <code>__deps__</code> method.</li>\n</ul>\n<p><strong>pros</strong>:</p>\n<ul>\n<li>You keep your implementation dependencies apart of the public <code>__init__</code> interface.</li>\n<li>Calling a factory is beautifully identical to instantiate a real class.</li>\n<li>You keep the same <code>__init__</code> signature on all subclasses.</li>\n<li>Each subclass can have different dependencies.</li>\n<li>You don't have to code a new factory wrapper for each class to hide the implementation dependencies.</li>\n<li>You can use positional arguments to call the factory.</li>\n<li>You don't need to set the default values to <code>Null</code> for the <em>dependency arguments</em>.</li>\n<li>You can freely use default values in <code>__init__</code>.</li>\n</ul>\n<p><strong>cons</strong>:</p>\n<ul>\n<li>Your class will be dependent on the <code>@deps</code> decorator.</li>\n</ul>\n<h3><code>@deps</code> decorator</h3>\n<p>In the previous sections, I have explained how this decorator is used.\nWhat I'm going to explain here is related only to the internal functioning of the feature.</p>\n<p>When you wrap <code>__init__</code> with the decorator <code>@deps</code>, two simple things happen:\n0. A hidden argument <code>_dependencies</code> is added to <code>__init__</code> waiting for a <code>dict</code> to be passed.\n0. The object is initialized with these dependencies <strong>before</strong> <code>__init__</code> is called.</p>\n<p>Notice that you can use this mechanism, even if you are not using other <code>wirinj</code> features, by setting the <code>_dependencies</code> argument manually.\nBy the time <code>__init__</code> is called, your object dependencies will already be initialized.</p>\n<h3>Enabling code completion with <code>__deps__</code></h3>\n<p>Of course, the IDE (e.g. <code>PyCharm</code>) will not detect the dependencies defined by <code>__deps__</code>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>        \n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">feeder</span><span class=\"p\">:</span> <span class=\"n\">Feeder</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Ideally, an <em>IDE</em> plugin would detect the <code>__deps__</code> signature, making the dependencies available in <a href=\"https://www.jetbrains.com/help/pycharm/auto-completing-code.html#\" rel=\"nofollow\">code completion</a>.</p>\n<p>As long as <a href=\"TODO.md\" rel=\"nofollow\">this plugin doesn't exist</a>, you can achieve the same by adding some mock code to the <code>__deps__</code> method:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">:</span>        \n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">feeder</span><span class=\"p\">:</span> <span class=\"n\">Feeder</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feeder</span> <span class=\"o\">=</span> <span class=\"n\">feeder</span>\n</pre>\n<p>It will never be executed, but now, the IDE will recognize the dependencies as member variables:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a189b0720aadcc12c36de08b6de94e43dc52f28/696d672f636f64655f696e73706563745f646570732e706e67\"></p>\n<h3>A full injection example</h3>\n<p>This silly example aims to illustrate several aspects of the <code>wirinj</code> library.</p>\n<p>The two main classes, <code>Bob</code> and <code>Mike</code>, extend <code>PetDeliveryPerson</code>.\nThey are used to deliver pets to the client using one or more vehicles.\nWhenever a <code>Vehicle</code> is needed, it is built in advance.</p>\n<p>While <code>Bob</code> uses his only vehicle by repeating the route several times, <code>Mike</code> builds a fleet of autonomous vehicles to deliver all the pets in one trip.</p>\n<p>The classes (<a href=\"examples/pet_delivery/classes.py\" rel=\"nofollow\">pet_delivery/classes.py</a>):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sound</span> <span class=\"o\">=</span> <span class=\"n\">sound</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gift_wrapped</span> <span class=\"o\">=</span> <span class=\"n\">gift_wrapped</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">cry</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sound</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gift_wrapped</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sound</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Bird</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Part</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mount_sound</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mount_sound</span> <span class=\"o\">=</span> <span class=\"n\">mount_sound</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">mount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mount_sound</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Engine</span><span class=\"p\">(</span><span class=\"n\">Part</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Plate</span><span class=\"p\">(</span><span class=\"n\">Part</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Wheel</span><span class=\"p\">(</span><span class=\"n\">Part</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Container</span><span class=\"p\">(</span><span class=\"n\">Part</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VehicleBuilder</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                 <span class=\"n\">engine_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Engine</span><span class=\"p\">],</span>\n                 <span class=\"n\">plate_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Plate</span><span class=\"p\">],</span>\n                 <span class=\"n\">wheel_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Wheel</span><span class=\"p\">],</span>\n                 <span class=\"n\">container_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Container</span><span class=\"p\">],</span>\n                 <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine_factory</span> <span class=\"o\">=</span> <span class=\"n\">engine_factory</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plate_factory</span> <span class=\"o\">=</span> <span class=\"n\">plate_factory</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wheel_factory</span> <span class=\"o\">=</span> <span class=\"n\">wheel_factory</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">container_factory</span> <span class=\"o\">=</span> <span class=\"n\">container_factory</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">recipe</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">):</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># type: List[Part]</span>\n        <span class=\"n\">parts</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine_factory</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">recipe</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'engines'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))]</span>\n        <span class=\"n\">parts</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plate_factory</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">recipe</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'plates'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))]</span>\n        <span class=\"n\">parts</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wheel_factory</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">recipe</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'wheels'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))]</span>\n        <span class=\"n\">parts</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">container_factory</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">recipe</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'containers'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))]</span>\n\n        <span class=\"n\">mounting</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n            <span class=\"n\">mounting</span> <span class=\"o\">+=</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">mount</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">mounting</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Vehicle</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">builder</span><span class=\"p\">:</span> <span class=\"n\">VehicleBuilder</span><span class=\"p\">,</span> <span class=\"n\">recipe</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">max_load_weight</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">builder</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">recipe</span> <span class=\"o\">=</span> <span class=\"n\">recipe</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_load_weight</span> <span class=\"o\">=</span> <span class=\"n\">max_load_weight</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">miles</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> goes </span><span class=\"si\">{}</span><span class=\"s1\"> miles'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">miles</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">come_back</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> commes back'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> is built: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">recipe</span><span class=\"p\">)</span>\n        <span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_available_load</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_load_weight</span> <span class=\"o\">-</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"k\">for</span> <span class=\"n\">pet</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pets</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">(</span><span class=\"n\">Vehicle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Van</span><span class=\"p\">(</span><span class=\"n\">Vehicle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Truck</span><span class=\"p\">(</span><span class=\"n\">Vehicle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PetLoader</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">upload</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pets</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"p\">],</span> <span class=\"n\">vehicle</span><span class=\"p\">:</span> <span class=\"n\">Vehicle</span><span class=\"p\">):</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"s1\">'Uploading to the </span><span class=\"si\">{}</span><span class=\"s1\">:'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n        <span class=\"k\">while</span> <span class=\"n\">pets</span><span class=\"p\">:</span>\n            <span class=\"n\">pet</span> <span class=\"o\">=</span> <span class=\"n\">pets</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">get_available_load</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">weight</span><span class=\"p\">:</span>\n                <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">pets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">)</span>\n                <span class=\"n\">info</span> <span class=\"o\">+=</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">pets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">download</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vehicle</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> pets delivered'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">pets</span><span class=\"p\">)))</span>\n        <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PetPicker</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pet_store</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_store</span> <span class=\"o\">=</span> <span class=\"n\">pet_store</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># raise Exception('HORROR!!!!')</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pick</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">qty</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">):</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"s1\">'Picking pets up: '</span>\n        <span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">qty</span><span class=\"p\">):</span>\n            <span class=\"n\">pet</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_store</span><span class=\"p\">(</span><span class=\"n\">gift_wrapped</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span> <span class=\"o\">+=</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">cry</span><span class=\"p\">()</span>\n            <span class=\"n\">pets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">pets</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PetDeliveryPerson</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deliver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pet_qty</span><span class=\"p\">,</span> <span class=\"n\">miles</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Bob</span><span class=\"p\">(</span><span class=\"n\">PetDeliveryPerson</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Bob builds a car and deliver pets in his vehicle repeating the route several times.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vehicle</span><span class=\"p\">:</span> <span class=\"n\">Vehicle</span><span class=\"p\">,</span> <span class=\"n\">pet_picker</span><span class=\"p\">:</span> <span class=\"n\">PetPicker</span><span class=\"p\">,</span> <span class=\"n\">pet_loader</span><span class=\"p\">:</span> <span class=\"n\">PetLoader</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle</span> <span class=\"o\">=</span> <span class=\"n\">vehicle</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_picker</span> <span class=\"o\">=</span> <span class=\"n\">pet_picker</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_loader</span> <span class=\"o\">=</span> <span class=\"n\">pet_loader</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deliver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pet_qty</span><span class=\"p\">,</span> <span class=\"n\">miles</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Pick up pets</span>\n        <span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_picker</span><span class=\"o\">.</span><span class=\"n\">pick</span><span class=\"p\">(</span><span class=\"n\">pet_qty</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Bob owns one vehicle only</span>\n        <span class=\"k\">while</span> <span class=\"n\">pets</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_loader</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">pets</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">miles</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_loader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">come_back</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Mike</span><span class=\"p\">(</span><span class=\"n\">PetDeliveryPerson</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Mike builds several autonomous vehicles and use them to deliver the pets all together\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__deps__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vehicle_factory</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Vehicle</span><span class=\"p\">],</span> <span class=\"n\">pet_picker</span><span class=\"p\">:</span> <span class=\"n\">PetPicker</span><span class=\"p\">,</span> <span class=\"n\">pet_loader</span><span class=\"p\">:</span> <span class=\"n\">PetLoader</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle_factory</span> <span class=\"o\">=</span> <span class=\"n\">vehicle_factory</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_picker</span> <span class=\"o\">=</span> <span class=\"n\">pet_picker</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_loader</span> <span class=\"o\">=</span> <span class=\"n\">pet_loader</span>\n\n    <span class=\"nd\">@deps</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicles</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># type: List[Vehicle]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_vehicle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicle_factory</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">park_vehicles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vehicles</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vehicles</span> <span class=\"o\">+=</span> <span class=\"n\">vehicles</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deliver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pet_qty</span><span class=\"p\">,</span> <span class=\"n\">miles</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Pick up pets</span>\n        <span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_picker</span><span class=\"o\">.</span><span class=\"n\">pick</span><span class=\"p\">(</span><span class=\"n\">pet_qty</span><span class=\"p\">,</span> <span class=\"n\">gift_wrapped</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get vehicles and upload them</span>\n        <span class=\"n\">vehicles</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">while</span> <span class=\"n\">pets</span><span class=\"p\">:</span>\n            <span class=\"n\">vehicle</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vehicle</span><span class=\"p\">()</span>\n            <span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_loader</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">pets</span><span class=\"p\">,</span> <span class=\"n\">vehicle</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Go</span>\n        <span class=\"k\">for</span> <span class=\"n\">vehicle</span> <span class=\"ow\">in</span> <span class=\"n\">vehicles</span><span class=\"p\">:</span>\n            <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">miles</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Deliver pets</span>\n        <span class=\"k\">for</span> <span class=\"n\">vehicle</span> <span class=\"ow\">in</span> <span class=\"n\">vehicles</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pet_loader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Come back</span>\n        <span class=\"k\">for</span> <span class=\"n\">vehicle</span> <span class=\"ow\">in</span> <span class=\"n\">vehicles</span><span class=\"p\">:</span>\n            <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">come_back</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Park</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">park_vehicles</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">)</span>\n</pre>\n<p>Injection definitions (<a href=\"examples/pet_delivery/defs.py\" rel=\"nofollow\">pet_delivery/defs.py</a>):</p>\n<pre><span class=\"n\">pet_defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Dog</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Cat</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Bird</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">):</span> <span class=\"s1\">'Woof'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">):</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">):</span> <span class=\"s1\">'Meow'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">):</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Bird</span><span class=\"p\">,</span> <span class=\"s1\">'sound'</span><span class=\"p\">):</span> <span class=\"s1\">'Chirp'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Bird</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">):</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">vehicle_defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">Engine</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Plate</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Wheel</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"n\">Container</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Engine</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Plate</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Wheel</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n    <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Container</span><span class=\"p\">]:</span> <span class=\"n\">Factory</span><span class=\"p\">(),</span>\n\n    <span class=\"n\">VehicleBuilder</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Engine</span><span class=\"p\">,</span> <span class=\"s1\">'mount_sound'</span><span class=\"p\">):</span> <span class=\"s1\">'RRRRoarrr'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Plate</span><span class=\"p\">,</span> <span class=\"s1\">'mount_sound'</span><span class=\"p\">):</span> <span class=\"s1\">'plaf'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Wheel</span><span class=\"p\">,</span> <span class=\"s1\">'mount_sound'</span><span class=\"p\">):</span> <span class=\"s1\">'pffff'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Container</span><span class=\"p\">,</span> <span class=\"s1\">'mount_sound'</span><span class=\"p\">):</span> <span class=\"s1\">'BLOOOOM'</span><span class=\"p\">,</span>\n\n    <span class=\"n\">Car</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"p\">(</span><span class=\"n\">Car</span><span class=\"p\">,</span> <span class=\"s1\">'max_load_weight'</span><span class=\"p\">):</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Car</span><span class=\"p\">,</span> <span class=\"s1\">'recipe'</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'engines'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'plates'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n        <span class=\"s1\">'wheels'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"n\">Van</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"p\">(</span><span class=\"n\">Van</span><span class=\"p\">,</span> <span class=\"s1\">'max_load_weight'</span><span class=\"p\">):</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Van</span><span class=\"p\">,</span> <span class=\"s1\">'recipe'</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'engines'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'plates'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"s1\">'wheels'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"n\">Truck</span><span class=\"p\">:</span> <span class=\"n\">Instance</span><span class=\"p\">(),</span>\n    <span class=\"p\">(</span><span class=\"n\">Truck</span><span class=\"p\">,</span> <span class=\"s1\">'max_load_weight'</span><span class=\"p\">):</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">Truck</span><span class=\"p\">,</span> <span class=\"s1\">'recipe'</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'engines'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'plates'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"s1\">'wheels'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n        <span class=\"s1\">'container'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">common_defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">PetPicker</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n    <span class=\"n\">PetLoader</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n\n    <span class=\"n\">Bob</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n    <span class=\"n\">Mike</span><span class=\"p\">:</span> <span class=\"n\">Singleton</span><span class=\"p\">(),</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Running the app (<a href=\"examples/pet_delivery/example_1.py\" rel=\"nofollow\">pet_delivery/example_1.py</a>):</p>\n<pre><span class=\"n\">world_one_defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"n\">Bob</span><span class=\"p\">,</span> <span class=\"n\">Vehicle</span><span class=\"p\">):</span> <span class=\"n\">Singleton</span><span class=\"p\">(</span><span class=\"n\">Car</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">Bob</span><span class=\"p\">,</span> <span class=\"n\">PetPicker</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"p\">]):</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Bird</span><span class=\"p\">),</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Mike</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Vehicle</span><span class=\"p\">]):</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Van</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">Mike</span><span class=\"p\">,</span> <span class=\"n\">PetPicker</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"p\">]):</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world_one</span> <span class=\"o\">=</span> <span class=\"n\">Definitions</span><span class=\"p\">(</span>\n    <span class=\"n\">pet_defs</span><span class=\"p\">,</span>\n    <span class=\"n\">vehicle_defs</span><span class=\"p\">,</span>\n    <span class=\"n\">common_defs</span><span class=\"p\">,</span>\n    <span class=\"n\">world_one_defs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">world_one</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">:</span> <span class=\"n\">Bob</span><span class=\"p\">,</span> <span class=\"n\">mike</span><span class=\"p\">:</span> <span class=\"n\">Mike</span><span class=\"p\">):</span>\n    <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">mike</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">do</span><span class=\"p\">()</span>\n</pre>\n<p>Running the same app with another wiring configuration (<a href=\"examples/pet_delivery/example_2.py\" rel=\"nofollow\">pet_delivery/example_2.py</a>):</p>\n<pre><span class=\"n\">world_two_defs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"n\">Bob</span><span class=\"p\">,</span> <span class=\"n\">Vehicle</span><span class=\"p\">):</span> <span class=\"n\">Singleton</span><span class=\"p\">(</span><span class=\"n\">Van</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">Bob</span><span class=\"p\">,</span> <span class=\"n\">PetPicker</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"p\">]):</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">),</span>\n\n    <span class=\"p\">(</span><span class=\"n\">Mike</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Vehicle</span><span class=\"p\">]):</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Truck</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">Mike</span><span class=\"p\">,</span> <span class=\"n\">PetPicker</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"p\">]):</span> <span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world_two</span> <span class=\"o\">=</span> <span class=\"n\">Definitions</span><span class=\"p\">(</span>\n    <span class=\"n\">pet_defs</span><span class=\"p\">,</span>\n    <span class=\"n\">vehicle_defs</span><span class=\"p\">,</span>\n    <span class=\"n\">common_defs</span><span class=\"p\">,</span>\n    <span class=\"n\">world_two_defs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">world_two</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">:</span> <span class=\"n\">Bob</span><span class=\"p\">,</span> <span class=\"n\">mike</span><span class=\"p\">:</span> <span class=\"n\">Mike</span><span class=\"p\">):</span>\n    <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">mike</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">do</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7182376, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "5f8a9c7f643cea62ff2a6decd49d55f6", "sha256": "0761a06a479c31c1e19247a92a8003e1d67be3153c7e299d9e7717c768e65d45"}, "downloads": -1, "filename": "wirinj-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f8a9c7f643cea62ff2a6decd49d55f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15956, "upload_time": "2020-01-28T00:49:50", "upload_time_iso_8601": "2020-01-28T00:49:50.059663Z", "url": "https://files.pythonhosted.org/packages/b4/79/5760622a65e8569f3723f1efe31b325f490016b152e541b296182bce3905/wirinj-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bd9f2e42fc7e2724acdfed6116fb743", "sha256": "1aa337b770fd0b9bb511c270fe283c08b3927bd78dfa019f5f996022fcbf5fce"}, "downloads": -1, "filename": "wirinj-0.5.0.tar.gz", "has_sig": false, "md5_digest": "7bd9f2e42fc7e2724acdfed6116fb743", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10877, "upload_time": "2020-01-28T00:49:52", "upload_time_iso_8601": "2020-01-28T00:49:52.505248Z", "url": "https://files.pythonhosted.org/packages/d4/e5/62a090369220f21f0cc43576bcac101b7b02ae32184ce22b5d40953a53dd/wirinj-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a5c39121cf7c8e83280e77b96b211253", "sha256": "158984ce2a0577bb363ecdb70c52fa518ac49a30e6d2cec47ca55f47aa97d64f"}, "downloads": -1, "filename": "wirinj-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a5c39121cf7c8e83280e77b96b211253", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 61009, "upload_time": "2020-02-14T21:47:02", "upload_time_iso_8601": "2020-02-14T21:47:02.410266Z", "url": "https://files.pythonhosted.org/packages/fc/c5/73da0fa256b5aea396e7c928318d24b293a5c0cc89f79a918068698a6a89/wirinj-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c14a38ea44bf82649ec0f41709c1ec1d", "sha256": "642573b30c975a4036e262e683ebea674a14a9833d1b3b8af0d1afec3a4357f6"}, "downloads": -1, "filename": "wirinj-0.6.0.tar.gz", "has_sig": false, "md5_digest": "c14a38ea44bf82649ec0f41709c1ec1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44285, "upload_time": "2020-02-14T21:47:05", "upload_time_iso_8601": "2020-02-14T21:47:05.539597Z", "url": "https://files.pythonhosted.org/packages/57/7b/d3e1c001c3d2a23e27bce4e56e5dbd2eccda96bd8a135b1e61b8b7b7d800/wirinj-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "f1ca822401578f54de73c68420ef6ffe", "sha256": "78d4497f841ea40bd9a46a58ca92ba9b120c3f076112a32afe595c52607a8fcc"}, "downloads": -1, "filename": "wirinj-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f1ca822401578f54de73c68420ef6ffe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 91266, "upload_time": "2020-02-14T21:55:16", "upload_time_iso_8601": "2020-02-14T21:55:16.431888Z", "url": "https://files.pythonhosted.org/packages/e5/21/386dcd26f3c44cf46a65cdaf29564395c21a5b362ed043e416dd2601ec3f/wirinj-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74cc4b6e92d42f6f76c4dc69b028ca72", "sha256": "a13579f2a5d57aa564efdb36f70b2e6df1723cfb502a3dda4056343eecc0af9c"}, "downloads": -1, "filename": "wirinj-0.6.1.tar.gz", "has_sig": false, "md5_digest": "74cc4b6e92d42f6f76c4dc69b028ca72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44254, "upload_time": "2020-02-14T21:55:20", "upload_time_iso_8601": "2020-02-14T21:55:20.962785Z", "url": "https://files.pythonhosted.org/packages/54/ed/53a103f75a5e3e25ef5485fd2162c4b6884a189ef7c155b2fb092ddccad9/wirinj-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "bfdbeaf5c078bfc09174397ab7fdce14", "sha256": "172e17461779d68fd78c2920414a8c00ed2d0bd8e959eeb45988f50d4ecced7d"}, "downloads": -1, "filename": "wirinj-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bfdbeaf5c078bfc09174397ab7fdce14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 125210, "upload_time": "2020-02-17T23:04:10", "upload_time_iso_8601": "2020-02-17T23:04:10.392678Z", "url": "https://files.pythonhosted.org/packages/4e/98/3d973d886e12cabf175307d99816a8cc91a4f542294f3e5483bc6c2fdb3e/wirinj-0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "048c36ee7b56c0055fb17bea6d69751d", "sha256": "2f68ed65d7363df2406716d563a820ef56cf3d57488872aea6b3d383fc3958a0"}, "downloads": -1, "filename": "wirinj-0.6.2.tar.gz", "has_sig": false, "md5_digest": "048c36ee7b56c0055fb17bea6d69751d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44866, "upload_time": "2020-02-17T23:04:12", "upload_time_iso_8601": "2020-02-17T23:04:12.896150Z", "url": "https://files.pythonhosted.org/packages/10/6f/2b079e3267faf0ecec295f56973dc96ed86750d76ebf8fa9200bfefc815d/wirinj-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "d20de4a3b07417c129161bcfc61f1c4f", "sha256": "7547026edbb9c136c7cd48145ccc174c0658fc8f2ed4869b17b3d5e9f9e8b99e"}, "downloads": -1, "filename": "wirinj-0.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d20de4a3b07417c129161bcfc61f1c4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 159826, "upload_time": "2020-02-19T23:46:40", "upload_time_iso_8601": "2020-02-19T23:46:40.516400Z", "url": "https://files.pythonhosted.org/packages/07/49/0bcb60cb5c4de3a7ba7381e2c7bc9a5850967ef9b1969d2f95d41e87db8f/wirinj-0.6.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87fc6e18da990e418d0532683cca07fc", "sha256": "f0bec180c576a2aad87a46967d136bd28238bf291f384f50d5137a22b16f7960"}, "downloads": -1, "filename": "wirinj-0.6.3.tar.gz", "has_sig": false, "md5_digest": "87fc6e18da990e418d0532683cca07fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45084, "upload_time": "2020-02-19T23:46:42", "upload_time_iso_8601": "2020-02-19T23:46:42.874781Z", "url": "https://files.pythonhosted.org/packages/11/09/5938dd0842d20563ee5eab496e8efffbbd7810841e95b067f330b93770fb/wirinj-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "9f82dd0a51a9dec20b879a68dd8a30fe", "sha256": "683c43f9fa925c97d6ad9c82fca861bafe77e1e4366d88a257017c69cfa11fc6"}, "downloads": -1, "filename": "wirinj-0.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9f82dd0a51a9dec20b879a68dd8a30fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 229562, "upload_time": "2020-05-06T18:47:36", "upload_time_iso_8601": "2020-05-06T18:47:36.901355Z", "url": "https://files.pythonhosted.org/packages/8a/8f/fc9659cb17020d666b89e95d475e2e21d5d270e9022c04d4134e1fff7952/wirinj-0.6.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c2f0ab49760cf240cd8891f5b1684f6", "sha256": "0842687635022366c558e96b227dbd233b7943c57c702c44035ef927d047b59c"}, "downloads": -1, "filename": "wirinj-0.6.4.tar.gz", "has_sig": false, "md5_digest": "3c2f0ab49760cf240cd8891f5b1684f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45085, "upload_time": "2020-05-06T18:47:38", "upload_time_iso_8601": "2020-05-06T18:47:38.740553Z", "url": "https://files.pythonhosted.org/packages/98/28/af85218c53c5f790ddebf73cf0023a6510042b4908177daf2c8d4a5e2c85/wirinj-0.6.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f82dd0a51a9dec20b879a68dd8a30fe", "sha256": "683c43f9fa925c97d6ad9c82fca861bafe77e1e4366d88a257017c69cfa11fc6"}, "downloads": -1, "filename": "wirinj-0.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9f82dd0a51a9dec20b879a68dd8a30fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 229562, "upload_time": "2020-05-06T18:47:36", "upload_time_iso_8601": "2020-05-06T18:47:36.901355Z", "url": "https://files.pythonhosted.org/packages/8a/8f/fc9659cb17020d666b89e95d475e2e21d5d270e9022c04d4134e1fff7952/wirinj-0.6.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c2f0ab49760cf240cd8891f5b1684f6", "sha256": "0842687635022366c558e96b227dbd233b7943c57c702c44035ef927d047b59c"}, "downloads": -1, "filename": "wirinj-0.6.4.tar.gz", "has_sig": false, "md5_digest": "3c2f0ab49760cf240cd8891f5b1684f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45085, "upload_time": "2020-05-06T18:47:38", "upload_time_iso_8601": "2020-05-06T18:47:38.740553Z", "url": "https://files.pythonhosted.org/packages/98/28/af85218c53c5f790ddebf73cf0023a6510042b4908177daf2c8d4a5e2c85/wirinj-0.6.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:41 2020"}