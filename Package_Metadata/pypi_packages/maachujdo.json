{"info": {"author": "Ventsislav Varbanovski @nu11secur1ty", "author_email": "venvaropt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Maachujdo\n########################################\n#                                      #\n# For Kali Linux 2020.x > Python 3.7.5 #\n#                                      #\n########################################\n\n\n- Need packages\n\n```bash\ngit clone https://github.com/nu11secur1ty/maachujdo\ncd maachujdo\npip3 install -r kosaka.txt\n\n# installing the module\npip3 install maachujdo\n```\n- Installing the module \"maachujdo\"\n-  -  If you are not changing the path environment of pip3\n\n```bash \npython3 -m pip install -i https://test.pypi.org/simple/ maachujdo\n```\n# NOTE: \n\n- pip3 setup path environment\n-  -  find package\n\n```bash\nwhereis pip3\n```\n-  make a soft link to use pip3 by default\n\n```bash\nln -s /usr/bin/pip3 /usr/bin/pip\n```\n\n- Then you can use the command to install maachujdo\n\n```bash\npip install maachujdo\n```\n################################################\n\n- test\n\n```bash \npython3\n>>>from maachujdo import kusupraishchesaneebesh\n```\n- or \n\n```python\n#!/usr/bin/python3\nfrom maachujdo import kusupraishchesaneebesh\nprint(\"Yeah you are a samurai ;)\")\n```\n- then\n\n```bash\ngit clone https://github.com/nu11secur1ty/maachujdo.git\n\ncd maachujdo/maachujdo_module/\n\npython3 nakokrujen.py -t 0.0.0.0>target -g 0.0.0.0>gateway\n```\n\n# Uninstall the module\n\n```bash\npip uninstall maachujdo\npip3 uninstall maachujdo\n```\n---------------------------------------------------------\n- link test:\n\n`https://test.pypi.org/project/maachujdo/`\n\n\n- link \n\n`https://pypi.org/project/maachujdo/`\n\n-----------------------------------------------------------\n\n# Understanding of Web Protocols - HTTP and HTTPS\n\nDo you know that 68% of internet users believe that current laws for protecting their rights are not good enough?\n\nEvery time Google introduces a new preference, the internet takes/ is forced to note. Something similar happened when Google announced that websites with SSL Certificate / HTTPS protocol will be preferred in search engine results. I will try to cover the fundamentals of HTTP and HTTPS protocols\n\nBefore we dive deeper into understanding about HTTP and HTTPS protocol, let\u2019s try to understand the meaning of the word protocol. \n\n\n# What is HTTP?\n\nHTTP is Hypertext transfer protocol. Simply put - Rules to sending and receiving text-based messages. As we all know, computers work in a language of 1's and 0's i.e. Binary language. Therefore, potentially every set of 1's and 0's construct something, it could be a word.\n\nLet's say I want to write 'a'. Now, if 0 stands for 'a', 1 stands for 'b', and 01 stands for 'c', I can infer that a combination of 0's and 1's can construct a word as well. In this case, the text is already constructed and is being sent on the wire. The computer works on many languages - pure binary, text and some other formats like byte codes. Here, what is being transferred is text. I am emphasizing on 'text' because this text is interpreted by the browser and the moment browser interprets it, it becomes hypertext, and the protocol that transfers the text is referred to as hypertext transfer protocol - HTTP.\n\nUsing HTTP, you can definitely transfer images and text and even sound, but not videos.\n\n# What is HTTPS?\n\nHyper Text Transfer Protocol Secure (HTTPS) is the secure version of HTTP, the protocol over which data is sent between your browser and the website that you are connected to. The 'S' at the end of HTTPS stands for 'Secure'. It means all communications between your browser and the website are encrypted. HTTPS is often used to protect highly confidential online transactions like online banking and online shopping order forms.\n\n---------------------------------------------------------------------------------------\n\n# What is the importance of HTTPS?\n\nWe agreed upon the fact that what is being transferred from one point to another is text. To understand why HTTPS protocol, we first should know how wi-fi routers function.Let's say you are at an airport and you are connecting to the wi-fi which is the property of a third party. Now, when you are communicating over HTTP, the text is being transferred by their router. And if I go to a low version of the router, I can comfortably check and read the text that is being transferred. There could be a password that I can use to login to your bank site and do a fraudulent transaction!. Point being - this is fundamentally insecure. This is called the man in the middle attack. \n\nAnd this why do we need https when HTTP seems to suffice.\n\n\n- Encryption and Encryption Levels\n\nEncryption is simple terms is a hiding information. There are various ways to do so. You must have heard these terms - 128 bit encrypt HTTPS and 64 bit encrypt HTTPS. 128-bit Encrypt is a high encryption technique and it's very difficult to decrypt (decode). In the case of HTTPS when the data is being transferred on the wires, the man in the middle may still know what is being transferred, but can not make sense out of it as the data is encrypted. Only the browser will decrypt it and show it, and the server will decrypt it and use it for transactions.\n\nFor the curious one\u2019s - There also happens to be a movie on encryption, Imitation Games. The entire plot of the movie was based on decrypting the German codes, which were to reform the entire course of the war. Those codes were very difficult to decrypt, but how Alan Turing finally does it.\nHow does this happens when you request to open a site in a browser?\n\nTo understand this, let us imagine that there is one Server that resides somewhere serving all the request for one domain. Now, when I type xyz.com, it's a server that I am connecting to, taking data from and rendering it in the browser.\n\nTo simplify further, imagine a domain name google.com being broadcasted from one server. There resides one machine somewhere connected to the internet and the moment you say google.com in your browser, you connect to that machine, pick data from that machine and show it in the browser. If you have saved your picture, it gets uploaded to that machine. Now, if you want to see that picture, you go to google.com/show-me-my-picture, which transfers the picture from the machine to the browser to be shown to you.\n\nThis process cannot be completed if I am not able to reach that particular machine. For this to happen, every machine has an address (the way we have a mobile number), it is called the IP address and every domain has an IP map. The moment you enter this user-friendly URL - google.com, it converts this username into IP and connects to the router to reach out to that particular service line associated with this URL. Once it reaches to the server, it raises a request of what is needed. It is represented as 'google.com/s=', helping the user understand the request made by him. As a result, the server gives him the results according to your request, which gets rendered to the browser.\nNow, to save our data from such attacks, we need to encrypt that data.\n\n# Conclusion\nThis is the point of SSL, to prevent this kind of unauthorized snooping. To authorize your proxy you need to tell the device to trust the proxy certificate, and tell the device clients to trust your certificate or use the devices private key, which it sounds like you don't have access to. For more information: \n\nhttps://en.wikipedia.org/wiki/Transport_Layer_Security\n\n# Have fun ;)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nu11secur1ty/maachujdo", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "maachujdo", "package_url": "https://pypi.org/project/maachujdo/", "platform": "", "project_url": "https://pypi.org/project/maachujdo/", "project_urls": {"Homepage": "https://github.com/nu11secur1ty/maachujdo"}, "release_url": "https://pypi.org/project/maachujdo/1.1.39/", "requires_dist": null, "requires_python": ">=3.7", "summary": "HTTP Sniff Login", "version": "1.1.39", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Maachujdo</h1>\n<p>########################################</p>\n<h1></h1>\n<h1>For Kali Linux 2020.x &gt; Python 3.7.5</h1>\n<h1></h1>\n<p>########################################</p>\n<ul>\n<li>Need packages</li>\n</ul>\n<pre>git clone https://github.com/nu11secur1ty/maachujdo\n<span class=\"nb\">cd</span> maachujdo\npip3 install -r kosaka.txt\n\n<span class=\"c1\"># installing the module</span>\npip3 install maachujdo\n</pre>\n<ul>\n<li>Installing the module \"maachujdo\"</li>\n<li>\n<ul>\n<li>If you are not changing the path environment of pip3</li>\n</ul>\n</li>\n</ul>\n<pre>python3 -m pip install -i https://test.pypi.org/simple/ maachujdo\n</pre>\n<h1>NOTE:</h1>\n<ul>\n<li>pip3 setup path environment</li>\n<li>\n<ul>\n<li>find package</li>\n</ul>\n</li>\n</ul>\n<pre>whereis pip3\n</pre>\n<ul>\n<li>make a soft link to use pip3 by default</li>\n</ul>\n<pre>ln -s /usr/bin/pip3 /usr/bin/pip\n</pre>\n<ul>\n<li>Then you can use the command to install maachujdo</li>\n</ul>\n<pre>pip install maachujdo\n</pre>\n<p>################################################</p>\n<ul>\n<li>test</li>\n</ul>\n<pre>python3\n&gt;&gt;&gt;from maachujdo import kusupraishchesaneebesh\n</pre>\n<ul>\n<li>or</li>\n</ul>\n<pre><span class=\"ch\">#!/usr/bin/python3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">maachujdo</span> <span class=\"kn\">import</span> <span class=\"n\">kusupraishchesaneebesh</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Yeah you are a samurai ;)\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>then</li>\n</ul>\n<pre>git clone https://github.com/nu11secur1ty/maachujdo.git\n\n<span class=\"nb\">cd</span> maachujdo/maachujdo_module/\n\npython3 nakokrujen.py -t <span class=\"m\">0</span>.0.0.0&gt;target -g <span class=\"m\">0</span>.0.0.0&gt;gateway\n</pre>\n<h1>Uninstall the module</h1>\n<pre>pip uninstall maachujdo\npip3 uninstall maachujdo\n</pre>\n<hr>\n<ul>\n<li>link test:</li>\n</ul>\n<p><code>https://test.pypi.org/project/maachujdo/</code></p>\n<ul>\n<li>link</li>\n</ul>\n<p><code>https://pypi.org/project/maachujdo/</code></p>\n<hr>\n<h1>Understanding of Web Protocols - HTTP and HTTPS</h1>\n<p>Do you know that 68% of internet users believe that current laws for protecting their rights are not good enough?</p>\n<p>Every time Google introduces a new preference, the internet takes/ is forced to note. Something similar happened when Google announced that websites with SSL Certificate / HTTPS protocol will be preferred in search engine results. I will try to cover the fundamentals of HTTP and HTTPS protocols</p>\n<p>Before we dive deeper into understanding about HTTP and HTTPS protocol, let\u2019s try to understand the meaning of the word protocol.</p>\n<h1>What is HTTP?</h1>\n<p>HTTP is Hypertext transfer protocol. Simply put - Rules to sending and receiving text-based messages. As we all know, computers work in a language of 1's and 0's i.e. Binary language. Therefore, potentially every set of 1's and 0's construct something, it could be a word.</p>\n<p>Let's say I want to write 'a'. Now, if 0 stands for 'a', 1 stands for 'b', and 01 stands for 'c', I can infer that a combination of 0's and 1's can construct a word as well. In this case, the text is already constructed and is being sent on the wire. The computer works on many languages - pure binary, text and some other formats like byte codes. Here, what is being transferred is text. I am emphasizing on 'text' because this text is interpreted by the browser and the moment browser interprets it, it becomes hypertext, and the protocol that transfers the text is referred to as hypertext transfer protocol - HTTP.</p>\n<p>Using HTTP, you can definitely transfer images and text and even sound, but not videos.</p>\n<h1>What is HTTPS?</h1>\n<p>Hyper Text Transfer Protocol Secure (HTTPS) is the secure version of HTTP, the protocol over which data is sent between your browser and the website that you are connected to. The 'S' at the end of HTTPS stands for 'Secure'. It means all communications between your browser and the website are encrypted. HTTPS is often used to protect highly confidential online transactions like online banking and online shopping order forms.</p>\n<hr>\n<h1>What is the importance of HTTPS?</h1>\n<p>We agreed upon the fact that what is being transferred from one point to another is text. To understand why HTTPS protocol, we first should know how wi-fi routers function.Let's say you are at an airport and you are connecting to the wi-fi which is the property of a third party. Now, when you are communicating over HTTP, the text is being transferred by their router. And if I go to a low version of the router, I can comfortably check and read the text that is being transferred. There could be a password that I can use to login to your bank site and do a fraudulent transaction!. Point being - this is fundamentally insecure. This is called the man in the middle attack.</p>\n<p>And this why do we need https when HTTP seems to suffice.</p>\n<ul>\n<li>Encryption and Encryption Levels</li>\n</ul>\n<p>Encryption is simple terms is a hiding information. There are various ways to do so. You must have heard these terms - 128 bit encrypt HTTPS and 64 bit encrypt HTTPS. 128-bit Encrypt is a high encryption technique and it's very difficult to decrypt (decode). In the case of HTTPS when the data is being transferred on the wires, the man in the middle may still know what is being transferred, but can not make sense out of it as the data is encrypted. Only the browser will decrypt it and show it, and the server will decrypt it and use it for transactions.</p>\n<p>For the curious one\u2019s - There also happens to be a movie on encryption, Imitation Games. The entire plot of the movie was based on decrypting the German codes, which were to reform the entire course of the war. Those codes were very difficult to decrypt, but how Alan Turing finally does it.\nHow does this happens when you request to open a site in a browser?</p>\n<p>To understand this, let us imagine that there is one Server that resides somewhere serving all the request for one domain. Now, when I type xyz.com, it's a server that I am connecting to, taking data from and rendering it in the browser.</p>\n<p>To simplify further, imagine a domain name google.com being broadcasted from one server. There resides one machine somewhere connected to the internet and the moment you say google.com in your browser, you connect to that machine, pick data from that machine and show it in the browser. If you have saved your picture, it gets uploaded to that machine. Now, if you want to see that picture, you go to google.com/show-me-my-picture, which transfers the picture from the machine to the browser to be shown to you.</p>\n<p>This process cannot be completed if I am not able to reach that particular machine. For this to happen, every machine has an address (the way we have a mobile number), it is called the IP address and every domain has an IP map. The moment you enter this user-friendly URL - google.com, it converts this username into IP and connects to the router to reach out to that particular service line associated with this URL. Once it reaches to the server, it raises a request of what is needed. It is represented as 'google.com/s=', helping the user understand the request made by him. As a result, the server gives him the results according to your request, which gets rendered to the browser.\nNow, to save our data from such attacks, we need to encrypt that data.</p>\n<h1>Conclusion</h1>\n<p>This is the point of SSL, to prevent this kind of unauthorized snooping. To authorize your proxy you need to tell the device to trust the proxy certificate, and tell the device clients to trust your certificate or use the devices private key, which it sounds like you don't have access to. For more information:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Transport_Layer_Security</a></p>\n<h1>Have fun ;)</h1>\n\n          </div>"}, "last_serial": 6547691, "releases": {"1.1.39": [{"comment_text": "", "digests": {"md5": "d5c95225bedd8955175dbc5fa5cd336f", "sha256": "7f49c8df0418eb7a332c7cd712948122fff087bfc3475c591385f8dc5f141814"}, "downloads": -1, "filename": "maachujdo-1.1.39-py3-none-any.whl", "has_sig": false, "md5_digest": "d5c95225bedd8955175dbc5fa5cd336f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18300, "upload_time": "2020-01-31T08:19:03", "upload_time_iso_8601": "2020-01-31T08:19:03.911938Z", "url": "https://files.pythonhosted.org/packages/ba/29/eabe2e638afb9c94720b5e0797fa66cf010b4105b417c814e8a70ccba68e/maachujdo-1.1.39-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c24194582a5388880b4f472603e9f1a5", "sha256": "62a1ce485fe28e8a9e15bec4a0675e6ffd10e4f0ef44db2a2d36386a962ed623"}, "downloads": -1, "filename": "maachujdo-1.1.39.tar.gz", "has_sig": false, "md5_digest": "c24194582a5388880b4f472603e9f1a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5486, "upload_time": "2020-01-31T08:19:05", "upload_time_iso_8601": "2020-01-31T08:19:05.811178Z", "url": "https://files.pythonhosted.org/packages/97/d7/6996265ef0a7d6aaf974c12e1fb0b4ffb548128dfdbc020fd21cc35b7108/maachujdo-1.1.39.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5c95225bedd8955175dbc5fa5cd336f", "sha256": "7f49c8df0418eb7a332c7cd712948122fff087bfc3475c591385f8dc5f141814"}, "downloads": -1, "filename": "maachujdo-1.1.39-py3-none-any.whl", "has_sig": false, "md5_digest": "d5c95225bedd8955175dbc5fa5cd336f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18300, "upload_time": "2020-01-31T08:19:03", "upload_time_iso_8601": "2020-01-31T08:19:03.911938Z", "url": "https://files.pythonhosted.org/packages/ba/29/eabe2e638afb9c94720b5e0797fa66cf010b4105b417c814e8a70ccba68e/maachujdo-1.1.39-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c24194582a5388880b4f472603e9f1a5", "sha256": "62a1ce485fe28e8a9e15bec4a0675e6ffd10e4f0ef44db2a2d36386a962ed623"}, "downloads": -1, "filename": "maachujdo-1.1.39.tar.gz", "has_sig": false, "md5_digest": "c24194582a5388880b4f472603e9f1a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5486, "upload_time": "2020-01-31T08:19:05", "upload_time_iso_8601": "2020-01-31T08:19:05.811178Z", "url": "https://files.pythonhosted.org/packages/97/d7/6996265ef0a7d6aaf974c12e1fb0b4ffb548128dfdbc020fd21cc35b7108/maachujdo-1.1.39.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:27 2020"}