{"info": {"author": "Dmitry Dygalo", "author_email": "dmitry.dygalo@kiwi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": ".. _-konfetti-:\n\n\ud83c\udf8a konfetti \ud83c\udf8a\n==============\n\n|codecov| |Build| |Version| |Python versions| |License|\n\nDescription\n-----------\n\n``konfetti`` is a Python configuration management library that simplifies the process of setting up your application to run on your company\u2019s infrastructure.\n\nThis library will help you to retrieve secrets from Vault, manages the access to settings required by our monitoring services, such as Datadog and Sentry, and set up tests for evaluating your app's behavior.\n\nKonfetti manages your app's configuration settings through lazy evaluation: It only calls and configures what your app needs and when it needs it.\n\nKey benefits:\n^^^^^^^^^^^^^\n\n**Configurable lazy evaluation** - You can choose the moment when Konfetti will evaluate your the configuration of your app.\n\n**Faster & simpler test runs** - No need for evaluating the configuration of the whole project if it's not used.\n\n**Faster and flexible testing** - Isolating small parts of your application no longer requires you to perform a complete setup for each test.\n\n**Integration with popular Web Application Frameworks** - Konfetti can seamlessly work with Django, Flask, and Celery.\n\n\nThe interface design and features are heavily inspired by `decouple`_, `Django`_, `envparse`_ and `dynaconf`_.\n\n\nQuickstart\n----------\n\nBefore Konfetti can perform its tasks, you'll need to create a settings module and then tell Konfetti the location of this module.\n\n1. Creating the Settings Module\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease find the application settings, for your production, local, or other environments, using the following path:\n``app_name/settings/production.py``\n\nNext, please review the below code block and copy the relevant parts in your settings file.\n\n\n> :warning: **Variables need to be named with all uppercase letters, other variables will be ignored**\n\n> :warning: **If your app requires Vault access, then you'll need to specify `VAULT_ADDR` and `VAULT_TOKEN` in the settings module**\n\n\n.. code:: python\n\n   # app_name/settings/production.py\n   from konfetti import env, vault\n\n   VAULT_ADDR = env(\"VAULT_ADDR\")\n   VAULT_TOKEN = env(\"VAULT_TOKEN\")\n\n   DEBUG = env(\"DEBUG\", default=False)\n   DATABASE_URI = vault(\"path/to/db\")\n\nApart from the import statement ``from konfetti import env, vault``, you can remove the settings for the features that you don't use.\n\nIf, for instance, you don\u2019t use a database, then you can remove the `DATABASE_URI` variable. Depending on your settings, it might also be called `DB_URI`, or similar.\n\nFurthermore, you can remove `VAULT_ADDR` and `VAULT_TOKEN` if your app doesn\u2019t require secrets.\n\n2. Configuring the Access Point\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   # app_name/settings/__init__.py\n   from konfetti import Konfig, AsyncVaultBackend\n\n   config = Konfig(vault_backend=AsyncVaultBackend(\"/secret/team\"))\n\nIn your app's environment variables, please add the KONFETTI_SETTINGS variable with the path to your settings module.  In the case of the code block above, it would be:\n\n``export KONFETTI_SETTINGS=app_name.settings.production``\n\nAlternatively the access point could be initiated from an object, importable string, mapping or a JSON file:\n\n**Object**\n\n.. code:: python\n\n   class TestSettings:\n       VALUE = \"secret\"\n   config = Konfig.from_object(TestSettings, ...)\n\n**Importable string**\n\n.. code:: python\n\n   config = Konfig.from_object(\"path.to.settings\", ...)\n\n   # If the config is in the same module\n   SECRET = vault(\"/path/to\")[\"secret\"]\n   config = Konfig.from_object(__name__, ...)\n\n**Mapping**\n\n.. code:: python\n\n   config = Konfig.from_mapping({\"SECRET\": 42}, ...)\n\n**JSON**\n\n.. code:: python\n\n   config = Konfig.from_json(\"/path/to.json\")\n\nUsage\n^^^^^\n\nThe settings module/class with configuration options shouldn't be\naccessed directly, because the aforementioned features are implemented\nin the access point level.\n\n.. code:: python\n\n   from app_name.settings import config\n\n   async def something():\n       await config.DATABASE_URI  # asynchronously taken from Vault\n       debug = config.DEBUG  # Usual sync access\n\nDocumentation\n-------------\n\nFor full documentation, please see https://konfetti.readthedocs.io/en/latest/\n\nOr you can look at the ``docs/`` directory in the repository.\n\nPython support\n--------------\n\nKonfetti supports Python 2.7, 3.5, 3.6, 3.7 and 3.8\n\nLicense\n-------\n\nThe code in this project is licensed under `MIT license`_. By contributing to `konfetti`, you agree that your contributions will be licensed under its MIT license.\n\n.. |codecov| image:: https://codecov.io/gh/kiwicom/konfetti/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/kiwicom/konfetti\n.. |Build| image:: https://travis-ci.org/kiwicom/konfetti.svg?branch=master\n   :target: https://travis-ci.org/kiwicom/konfetti\n.. |Version| image:: https://img.shields.io/pypi/v/konfetti.svg\n   :target: https://pypi.org/project/konfetti/\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/konfetti.svg\n   :target: https://pypi.org/project/konfetti/\n.. |License| image:: https://img.shields.io/pypi/l/konfetti.svg\n   :target: https://opensource.org/licenses/MIT\n\n.. _Django: https://github.com/django/django\n.. _decouple: https://github.com/henriquebastos/python-decouple\n.. _envparse: https://github.com/rconradharris/envparse\n.. _dynaconf: https://github.com/rochacbruno/dynaconf\n\n.. _MIT license: https://opensource.org/licenses/MIT\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kiwicom/konfetti", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "konfetti", "package_url": "https://pypi.org/project/konfetti/", "platform": "", "project_url": "https://pypi.org/project/konfetti/", "project_urls": {"Homepage": "https://github.com/kiwicom/konfetti"}, "release_url": "https://pypi.org/project/konfetti/0.8.0/", "requires_dist": ["attrs", "python-dotenv", "aiohttp ; extra == 'async-vault'", "tenacity ; extra == 'async-vault'", "hvac ; extra == 'vault'", "tenacity ; extra == 'vault'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "`konfetti` provides a framework-independent way for configuration of applications or libraries written in Python.", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codecov.io/gh/kiwicom/konfetti\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d05262e46dd3471fb97096fa31db15b0b0f570fa/68747470733a2f2f636f6465636f762e696f2f67682f6b697769636f6d2f6b6f6e66657474692f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://travis-ci.org/kiwicom/konfetti\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a7b57aec14e8a4a55bb0434e889f3fbd4cacb77/68747470733a2f2f7472617669732d63692e6f72672f6b697769636f6d2f6b6f6e66657474692e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/konfetti/\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2419b1109c759688e2c5bdef216319189401d2cd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b6f6e66657474692e737667\"></a> <a href=\"https://pypi.org/project/konfetti/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7fe17d8ad7faf8324f6150dd43b5e8cc7fb1a98/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6b6f6e66657474692e737667\"></a> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9de71b8d89f90b750aaa0e4da4418a375716a3d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6b6f6e66657474692e737667\"></a></p>\n<div id=\"description\">\n<h2>Description</h2>\n<p><tt>konfetti</tt> is a Python configuration management library that simplifies the process of setting up your application to run on your company\u2019s infrastructure.</p>\n<p>This library will help you to retrieve secrets from Vault, manages the access to settings required by our monitoring services, such as Datadog and Sentry, and set up tests for evaluating your app\u2019s behavior.</p>\n<p>Konfetti manages your app\u2019s configuration settings through lazy evaluation: It only calls and configures what your app needs and when it needs it.</p>\n<div id=\"key-benefits\">\n<h3>Key benefits:</h3>\n<p><strong>Configurable lazy evaluation</strong> - You can choose the moment when Konfetti will evaluate your the configuration of your app.</p>\n<p><strong>Faster &amp; simpler test runs</strong> - No need for evaluating the configuration of the whole project if it\u2019s not used.</p>\n<p><strong>Faster and flexible testing</strong> - Isolating small parts of your application no longer requires you to perform a complete setup for each test.</p>\n<p><strong>Integration with popular Web Application Frameworks</strong> - Konfetti can seamlessly work with Django, Flask, and Celery.</p>\n<p>The interface design and features are heavily inspired by <a href=\"https://github.com/henriquebastos/python-decouple\" rel=\"nofollow\">decouple</a>, <a href=\"https://github.com/django/django\" rel=\"nofollow\">Django</a>, <a href=\"https://github.com/rconradharris/envparse\" rel=\"nofollow\">envparse</a> and <a href=\"https://github.com/rochacbruno/dynaconf\" rel=\"nofollow\">dynaconf</a>.</p>\n</div>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Before Konfetti can perform its tasks, you\u2019ll need to create a settings module and then tell Konfetti the location of this module.</p>\n<div id=\"creating-the-settings-module\">\n<h3>1. Creating the Settings Module</h3>\n<p>Please find the application settings, for your production, local, or other environments, using the following path:\n<tt>app_name/settings/production.py</tt></p>\n<p>Next, please review the below code block and copy the relevant parts in your settings file.</p>\n<p>&gt; :warning: <strong>Variables need to be named with all uppercase letters, other variables will be ignored</strong></p>\n<p>&gt; :warning: <strong>If your app requires Vault access, then you\u2019ll need to specify `VAULT_ADDR` and `VAULT_TOKEN` in the settings module</strong></p>\n<pre><span class=\"c1\"># app_name/settings/production.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">konfetti</span> <span class=\"kn\">import</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">vault</span>\n\n<span class=\"n\">VAULT_ADDR</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s2\">\"VAULT_ADDR\"</span><span class=\"p\">)</span>\n<span class=\"n\">VAULT_TOKEN</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s2\">\"VAULT_TOKEN\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">DATABASE_URI</span> <span class=\"o\">=</span> <span class=\"n\">vault</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/db\"</span><span class=\"p\">)</span>\n</pre>\n<p>Apart from the import statement <tt>from konfetti import env, vault</tt>, you can remove the settings for the features that you don\u2019t use.</p>\n<p>If, for instance, you don\u2019t use a database, then you can remove the <cite>DATABASE_URI</cite> variable. Depending on your settings, it might also be called <cite>DB_URI</cite>, or similar.</p>\n<p>Furthermore, you can remove <cite>VAULT_ADDR</cite> and <cite>VAULT_TOKEN</cite> if your app doesn\u2019t require secrets.</p>\n</div>\n<div id=\"configuring-the-access-point\">\n<h3>2. Configuring the Access Point</h3>\n<pre><span class=\"c1\"># app_name/settings/__init__.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">konfetti</span> <span class=\"kn\">import</span> <span class=\"n\">Konfig</span><span class=\"p\">,</span> <span class=\"n\">AsyncVaultBackend</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Konfig</span><span class=\"p\">(</span><span class=\"n\">vault_backend</span><span class=\"o\">=</span><span class=\"n\">AsyncVaultBackend</span><span class=\"p\">(</span><span class=\"s2\">\"/secret/team\"</span><span class=\"p\">))</span>\n</pre>\n<p>In your app\u2019s environment variables, please add the KONFETTI_SETTINGS variable with the path to your settings module.  In the case of the code block above, it would be:</p>\n<p><tt>export KONFETTI_SETTINGS=app_name.settings.production</tt></p>\n<p>Alternatively the access point could be initiated from an object, importable string, mapping or a JSON file:</p>\n<p><strong>Object</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TestSettings</span><span class=\"p\">:</span>\n    <span class=\"n\">VALUE</span> <span class=\"o\">=</span> <span class=\"s2\">\"secret\"</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Konfig</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">TestSettings</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Importable string</strong></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Konfig</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"s2\">\"path.to.settings\"</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If the config is in the same module</span>\n<span class=\"n\">SECRET</span> <span class=\"o\">=</span> <span class=\"n\">vault</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to\"</span><span class=\"p\">)[</span><span class=\"s2\">\"secret\"</span><span class=\"p\">]</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Konfig</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Mapping</strong></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Konfig</span><span class=\"o\">.</span><span class=\"n\">from_mapping</span><span class=\"p\">({</span><span class=\"s2\">\"SECRET\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">},</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>JSON</strong></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Konfig</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to.json\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>The settings module/class with configuration options shouldn\u2019t be\naccessed directly, because the aforementioned features are implemented\nin the access point level.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">app_name.settings</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">something</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">DATABASE_URI</span>  <span class=\"c1\"># asynchronously taken from Vault</span>\n    <span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>  <span class=\"c1\"># Usual sync access</span>\n</pre>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For full documentation, please see <a href=\"https://konfetti.readthedocs.io/en/latest/\" rel=\"nofollow\">https://konfetti.readthedocs.io/en/latest/</a></p>\n<p>Or you can look at the <tt>docs/</tt> directory in the repository.</p>\n</div>\n<div id=\"python-support\">\n<h2>Python support</h2>\n<p>Konfetti supports Python 2.7, 3.5, 3.6, 3.7 and 3.8</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The code in this project is licensed under <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>. By contributing to <cite>konfetti</cite>, you agree that your contributions will be licensed under its MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 6457539, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "1fa2f8d0dcdd712a4a36104ac424a678", "sha256": "04bb557dda19cd3bf343d4bdc02b3212f75a2e535092260fc4bfb3908ddfc819"}, "downloads": -1, "filename": "konfetti-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1fa2f8d0dcdd712a4a36104ac424a678", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24448, "upload_time": "2019-06-30T13:22:38", "upload_time_iso_8601": "2019-06-30T13:22:38.989839Z", "url": "https://files.pythonhosted.org/packages/1f/35/97805c34f9d49872797c440903d30cc6a228dd7bbb6e308dc856aa383b80/konfetti-0.6.0-py2.py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "a9c48e8f54e7c27c7b3de391503384f4", "sha256": "48202f2b0e6363810487b6146f82ff1f95c4ec23d54f45d94d79a0d85aecfc08"}, "downloads": -1, "filename": "konfetti-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a9c48e8f54e7c27c7b3de391503384f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24864, "upload_time": "2019-07-15T09:34:11", "upload_time_iso_8601": "2019-07-15T09:34:11.125359Z", "url": "https://files.pythonhosted.org/packages/09/c0/c9c35b00f8198ef05acb76325d8c1793a0bb5ea95b9c12f3d095b248853b/konfetti-0.7.0-py2.py3-none-any.whl", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "ebba07ffbb12bbd51c2b8c9aa3dca6ec", "sha256": "70764a7cb07acc318efb7903125ac596e5b6606e7f1e67fe7218715462eba560"}, "downloads": -1, "filename": "konfetti-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebba07ffbb12bbd51c2b8c9aa3dca6ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24888, "upload_time": "2019-07-17T07:51:18", "upload_time_iso_8601": "2019-07-17T07:51:18.124642Z", "url": "https://files.pythonhosted.org/packages/a9/9c/16dd569efaa08ad33a380d83a2efac116c13288baad01fa1dc357bcdf1ea/konfetti-0.7.1-py2.py3-none-any.whl", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "a54fbee88026cc7538fda3a83ef8d8be", "sha256": "a5659cb4396646812b578db3dc4ca31b48a32d2d4bfc3ac9835212e3e3ea4286"}, "downloads": -1, "filename": "konfetti-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a54fbee88026cc7538fda3a83ef8d8be", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 25059, "upload_time": "2019-07-18T07:26:03", "upload_time_iso_8601": "2019-07-18T07:26:03.184298Z", "url": "https://files.pythonhosted.org/packages/13/00/ff9738acfeded13b91b977d45ee0b0d648292a955bd5b357ba88c6bc7226/konfetti-0.7.2-py2.py3-none-any.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "2eeae22b844eab69add891cd07f73b79", "sha256": "0466b4246bb8f59499184bd9b542da3587a0c3938f76b9e8a91113176031047e"}, "downloads": -1, "filename": "konfetti-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2eeae22b844eab69add891cd07f73b79", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26021, "upload_time": "2020-01-15T09:52:50", "upload_time_iso_8601": "2020-01-15T09:52:50.749080Z", "url": "https://files.pythonhosted.org/packages/4e/20/f59a2f9b7ed781b643b463417156996cbeb1516fef9020ebf6c649e98f0a/konfetti-0.8.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2eeae22b844eab69add891cd07f73b79", "sha256": "0466b4246bb8f59499184bd9b542da3587a0c3938f76b9e8a91113176031047e"}, "downloads": -1, "filename": "konfetti-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2eeae22b844eab69add891cd07f73b79", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26021, "upload_time": "2020-01-15T09:52:50", "upload_time_iso_8601": "2020-01-15T09:52:50.749080Z", "url": "https://files.pythonhosted.org/packages/4e/20/f59a2f9b7ed781b643b463417156996cbeb1516fef9020ebf6c649e98f0a/konfetti-0.8.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:02 2020"}