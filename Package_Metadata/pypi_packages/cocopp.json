{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Education", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# `cocopp`: COmparing Continuous Optimisers (COCO) post-processing\n\nThe ([`cocopp`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.html)) package takes data generated with the [COCO framework](https://github.com/numbbo/coco) to compare continuous opitmizers and produces output figures and tables in <tt class=\"rst-docutils literal\">html</tt> format and for including into LaTeX-documents.\n\n## Installation\n\n       pip install cocopp\n\n## Usage\n\nThe [`cocopp.Interface`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.Interface.html) class contains the most basic commands and data of the package, sufficient for most use cases.\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> <span class=\"py-keyword\">import</span> cocopp\n<span class=\"py-prompt\">>>></span> <span class=\"py-builtin\">sorted</span>(cocopp.Interface.dir())\n<span class=\"py-output\">['archives', 'config', 'genericsettings', 'load', 'main']</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">>>></span> <span class=\"py-builtin\">all</span>(<span class=\"py-builtin\">hasattr</span>(cocopp, name) <span class=\"py-keyword\">for</span> name <span class=\"py-keyword\">in</span> cocopp.Interface.dir())\n<span class=\"py-output\">True</span></pre>\n\nThe main method of the [`cocopp`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.html) package is [`main`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.rungeneric.html#main) (currently aliased to [`cocopp.rungeneric.main`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.rungeneric.html#main)). The [`main`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.rungeneric.html#main) method also allows basic use of the post-processing through a shell command-line interface. The recommended use is however from an IPython/Jupyter shell or notebook:\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> <span class=\"py-keyword\">import</span> cocopp\n<span class=\"py-prompt\">>>></span> cocopp.main(<span class=\"py-string\">'exdata/my_output another_folder yet_another_or_not'</span>)  <span class=\"py-comment\"></span></pre>\n\npostprocesses data from one or several folders, for example data generated with the help from the [`cocoex`](https://coco.gforge.inria.fr/apidocs-cocoex) module. Each folder should contain data of a full experiment with a single algorithm. (Within the folder the data can be distributed over subfolders). Results can be explored from the <tt class=\"rst-docutils literal\">ppdata/index.html</tt> file, unless a a different output folder is specified with the <tt class=\"rst-docutils literal\"><span class=\"pre\">-o</span></tt> option. **Comparative data** from over 200 full experiments are archived online and can be listed, filtered, and retrieved from [`cocopp.archives`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.archives.html) (of type [`OfficialArchives`](https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.archiving.OfficialArchives.html)) and processed alone or together with local data. For example\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> cocopp.archives.bbob(<span class=\"py-string\">'bfgs'</span>)  <span class=\"py-comment\"></span>\n<span class=\"py-output\">['2009/BFGS_...</span></pre>\n\nlists all data sets run on the `bbob` testbed containing <tt class=\"rst-docutils literal\">'bfgs'</tt> in their name. The first in the list can be postprocessed by\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> cocopp.main(<span class=\"py-string\">'bfgs!'</span>)  <span class=\"py-comment\"></span></pre>\n\nAll of them can be processed like\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> cocopp.main(<span class=\"py-string\">'bfgs*'</span>)  <span class=\"py-comment\"></span></pre>\n\nOnly a trailing `*` is accepted and any string containing the substring is matched. The postprocessing result of\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> cocopp.main(<span class=\"py-string\">'bbob/2009/*'</span>)  <span class=\"py-comment\"></span></pre>\n\ncan be browsed at [http://coco.gforge.inria.fr/ppdata-archive/bbob/2009-all](http://coco.gforge.inria.fr/ppdata-archive/bbob/2009-all). To display algorithms in the background, the <tt class=\"rst-docutils literal\">genericsettings.background</tt> variable needs to be set:\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> cocopp.genericsettings.background = {<span class=\"py-builtin\">None</span>: cocopp.archives.bbob.get_all(<span class=\"py-string\">'bfgs'</span>)}  <span class=\"py-comment\"></span></pre>\n\nwhere [`None`](http://docs.python.org/library/constants.html#None) invokes the default color (grey) and line style (solid) <tt class=\"rst-docutils literal\">genericsettings.background_default_style</tt>. Now we could compare our own data with the first <tt class=\"rst-docutils literal\">'bfgs'</tt>-matching archived algorithm where all other archived BFGS data are shown in the background with the command\n\n<pre class=\"py-doctest\"><span class=\"py-prompt\">>>></span> cocopp.main(<span class=\"py-string\">'exdata/my_output bfgs!'</span>)  <span class=\"py-comment\"></span></pre>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/numbbo/coco", "keywords": "", "license": "BSD", "maintainer": "Dimo Brockhoff and Nikolaus Hansen", "maintainer_email": "dimo.brockhoff@inria.fr", "name": "cocopp", "package_url": "https://pypi.org/project/cocopp/", "platform": "", "project_url": "https://pypi.org/project/cocopp/", "project_urls": {"Homepage": "https://github.com/numbbo/coco"}, "release_url": "https://pypi.org/project/cocopp/2.3.3.18/", "requires_dist": ["numpy (>=1.7)", "matplotlib (>=3.1)"], "requires_python": "", "summary": "Benchmarking framework for all types of black-box optimization algorithms, postprocessing.", "version": "2.3.3.18", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>cocopp</code>: COmparing Continuous Optimisers (COCO) post-processing</h1>\n<p>The (<a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.html\" rel=\"nofollow\"><code>cocopp</code></a>) package takes data generated with the <a href=\"https://github.com/numbbo/coco\" rel=\"nofollow\">COCO framework</a> to compare continuous opitmizers and produces output figures and tables in <tt>html</tt> format and for including into LaTeX-documents.</p>\n<h2>Installation</h2>\n<pre><code>   pip install cocopp\n</code></pre>\n<h2>Usage</h2>\n<p>The <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.Interface.html\" rel=\"nofollow\"><code>cocopp.Interface</code></a> class contains the most basic commands and data of the package, sufficient for most use cases.</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> <span class=\"py-keyword\">import</span> cocopp\n<span class=\"py-prompt\">&gt;&gt;&gt;</span> <span class=\"py-builtin\">sorted</span>(cocopp.Interface.dir())\n<span class=\"py-output\">['archives', 'config', 'genericsettings', 'load', 'main']</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt;</span> <span class=\"py-builtin\">all</span>(<span class=\"py-builtin\">hasattr</span>(cocopp, name) <span class=\"py-keyword\">for</span> name <span class=\"py-keyword\">in</span> cocopp.Interface.dir())\n<span class=\"py-output\">True</span></pre>\n<p>The main method of the <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.html\" rel=\"nofollow\"><code>cocopp</code></a> package is <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.rungeneric.html#main\" rel=\"nofollow\"><code>main</code></a> (currently aliased to <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.rungeneric.html#main\" rel=\"nofollow\"><code>cocopp.rungeneric.main</code></a>). The <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.rungeneric.html#main\" rel=\"nofollow\"><code>main</code></a> method also allows basic use of the post-processing through a shell command-line interface. The recommended use is however from an IPython/Jupyter shell or notebook:</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> <span class=\"py-keyword\">import</span> cocopp\n<span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.main(<span class=\"py-string\">'exdata/my_output another_folder yet_another_or_not'</span>)  <span class=\"py-comment\"></span></pre>\n<p>postprocesses data from one or several folders, for example data generated with the help from the <a href=\"https://coco.gforge.inria.fr/apidocs-cocoex\" rel=\"nofollow\"><code>cocoex</code></a> module. Each folder should contain data of a full experiment with a single algorithm. (Within the folder the data can be distributed over subfolders). Results can be explored from the <tt>ppdata/index.html</tt> file, unless a a different output folder is specified with the <tt><span class=\"pre\">-o</span></tt> option. <strong>Comparative data</strong> from over 200 full experiments are archived online and can be listed, filtered, and retrieved from <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.archives.html\" rel=\"nofollow\"><code>cocopp.archives</code></a> (of type <a href=\"https://coco.gforge.inria.fr/apidocs-cocopp/cocopp.archiving.OfficialArchives.html\" rel=\"nofollow\"><code>OfficialArchives</code></a>) and processed alone or together with local data. For example</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.archives.bbob(<span class=\"py-string\">'bfgs'</span>)  <span class=\"py-comment\"></span>\n<span class=\"py-output\">['2009/BFGS_...</span></pre>\n<p>lists all data sets run on the <code>bbob</code> testbed containing <tt>'bfgs'</tt> in their name. The first in the list can be postprocessed by</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.main(<span class=\"py-string\">'bfgs!'</span>)  <span class=\"py-comment\"></span></pre>\n<p>All of them can be processed like</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.main(<span class=\"py-string\">'bfgs*'</span>)  <span class=\"py-comment\"></span></pre>\n<p>Only a trailing <code>*</code> is accepted and any string containing the substring is matched. The postprocessing result of</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.main(<span class=\"py-string\">'bbob/2009/*'</span>)  <span class=\"py-comment\"></span></pre>\n<p>can be browsed at <a href=\"http://coco.gforge.inria.fr/ppdata-archive/bbob/2009-all\" rel=\"nofollow\">http://coco.gforge.inria.fr/ppdata-archive/bbob/2009-all</a>. To display algorithms in the background, the <tt>genericsettings.background</tt> variable needs to be set:</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.genericsettings.background = {<span class=\"py-builtin\">None</span>: cocopp.archives.bbob.get_all(<span class=\"py-string\">'bfgs'</span>)}  <span class=\"py-comment\"></span></pre>\n<p>where <a href=\"http://docs.python.org/library/constants.html#None\" rel=\"nofollow\"><code>None</code></a> invokes the default color (grey) and line style (solid) <tt>genericsettings.background_default_style</tt>. Now we could compare our own data with the first <tt>'bfgs'</tt>-matching archived algorithm where all other archived BFGS data are shown in the background with the command</p>\n<pre><span class=\"py-prompt\">&gt;&gt;&gt;</span> cocopp.main(<span class=\"py-string\">'exdata/my_output bfgs!'</span>)  <span class=\"py-comment\"></span></pre>\n\n          </div>"}, "last_serial": 7100832, "releases": {"2.3.3.17": [{"comment_text": "", "digests": {"md5": "f2abd9d39bb2ef17d06328414184c641", "sha256": "c6aa62c9c3c723e5f6afaf611d8126bdf5a56900e6ed24349222fa82c61c46e1"}, "downloads": -1, "filename": "cocopp-2.3.3.17-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f2abd9d39bb2ef17d06328414184c641", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4674756, "upload_time": "2020-04-25T18:27:54", "upload_time_iso_8601": "2020-04-25T18:27:54.156716Z", "url": "https://files.pythonhosted.org/packages/d5/2f/736e619bc75145ea651c2bd43fb922e37ff2a1093529cb758ebb098098be/cocopp-2.3.3.17-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79f28321f2f76d58a3b1e3156bddc6e9", "sha256": "2876552280cfe944eec314eac8ea496be6f8a1d9ce94f2ae4719d2a22a58d79b"}, "downloads": -1, "filename": "cocopp-2.3.3.17.tar.gz", "has_sig": false, "md5_digest": "79f28321f2f76d58a3b1e3156bddc6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4633340, "upload_time": "2020-04-25T18:28:42", "upload_time_iso_8601": "2020-04-25T18:28:42.932378Z", "url": "https://files.pythonhosted.org/packages/f7/ac/193dfc568f3939a22ad13d31dbe50144ec80542e93c9eb55eff2655fa3a5/cocopp-2.3.3.17.tar.gz", "yanked": false}], "2.3.3.18": [{"comment_text": "", "digests": {"md5": "ea6548afad64eb008dab7395880b43fd", "sha256": "8df6bae872890ca97ff4c3d94e47ee4ab47f454b975e2a6d6827316626efa41f"}, "downloads": -1, "filename": "cocopp-2.3.3.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ea6548afad64eb008dab7395880b43fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4674771, "upload_time": "2020-04-25T19:05:24", "upload_time_iso_8601": "2020-04-25T19:05:24.398410Z", "url": "https://files.pythonhosted.org/packages/c4/89/48484926704a41e53d10cd6449fabb7ed8d8d3b4cd0928ada3dfd1b0fa11/cocopp-2.3.3.18-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dfa142fd17f68d654327d2657a6b286", "sha256": "24a121d13effc5565069b7357a2414c317c91dee42513ee87d66309e6b61247e"}, "downloads": -1, "filename": "cocopp-2.3.3.18.tar.gz", "has_sig": false, "md5_digest": "9dfa142fd17f68d654327d2657a6b286", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4633362, "upload_time": "2020-04-25T19:06:12", "upload_time_iso_8601": "2020-04-25T19:06:12.204075Z", "url": "https://files.pythonhosted.org/packages/90/2f/560583666240a4262ab429c724265427cd5c8deb82f69eb984eca84412db/cocopp-2.3.3.18.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea6548afad64eb008dab7395880b43fd", "sha256": "8df6bae872890ca97ff4c3d94e47ee4ab47f454b975e2a6d6827316626efa41f"}, "downloads": -1, "filename": "cocopp-2.3.3.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ea6548afad64eb008dab7395880b43fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4674771, "upload_time": "2020-04-25T19:05:24", "upload_time_iso_8601": "2020-04-25T19:05:24.398410Z", "url": "https://files.pythonhosted.org/packages/c4/89/48484926704a41e53d10cd6449fabb7ed8d8d3b4cd0928ada3dfd1b0fa11/cocopp-2.3.3.18-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dfa142fd17f68d654327d2657a6b286", "sha256": "24a121d13effc5565069b7357a2414c317c91dee42513ee87d66309e6b61247e"}, "downloads": -1, "filename": "cocopp-2.3.3.18.tar.gz", "has_sig": false, "md5_digest": "9dfa142fd17f68d654327d2657a6b286", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4633362, "upload_time": "2020-04-25T19:06:12", "upload_time_iso_8601": "2020-04-25T19:06:12.204075Z", "url": "https://files.pythonhosted.org/packages/90/2f/560583666240a4262ab429c724265427cd5c8deb82f69eb984eca84412db/cocopp-2.3.3.18.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:20 2020"}