{"info": {"author": "Patrick Fuller", "author_email": "pat@numat-tech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Human Machine Interfaces"], "description": "sartorius\n=========\n\nAsynchronous python ethernet interface and command-line tool for Sartorius and\nMinebea Intec scales.\n\n![](https://www.dataweigh.com/media/11870/signum1.jpg)\n\nCompatibility\n=============\n\nThis driver should work for any ethernet scale that uses the standardized communications\nprotocol of the Scale Manufacturers Association. However, it has only been tested\non the following models:\n\n * Minebea Intec Signum\n * Sartorius Entris\n * Sartorius Miras\n\nInstallation\n============\n\n```\npip install sartorius\n```\n\nScale Setup\n===========\n\nFor scale setup, navigate to `SETUP` - `UNICOM` - `DATAPROT` - `ETHER`.\n\n  * Make sure `SRC.IP` is set to a valid LAN address\n  * Ensure `MODE` - `SBI-SRV` - `6.1.1` is set (manual says this should be default but it is not)\n  * All other defaults are good\n\nThis driver is intended to be stable to disconnects, so operators should be\nable to unplug and reposition the device without affecting any long polling.\n\nCommand Line\n============\n\n```\n$ sartorius scale-ip.local\n{\n    \"mass\": 0.0,\n    \"units\": \"kg\",\n    \"stable\": true,\n    \"info\": {\n        \"model\": \"SIWADCP-1-\",\n        \"serial\": \"37454321\",\n        \"software\": \"00-37-09\"\n    }\n}\n```\n\nYou can tare and zero with `--zero` and remove the info field with `--no-info`.\nSee `sartorius --help` for more.\n\nTo use in shell scripts, parse the json output with something like\n[jq](https://stedolan.github.io/jq/). For example,\n`sartorius scale-ip.local | jq .mass` will return the mass.\n\nPython\n======\n\nIf you'd like to link this to more complex behavior, consider using a Python\nscript. This driver exclusively supports asynchronous Python \u22653.7.\n\n```python\nimport asyncio\nimport sartorius\n\nasync def get():\n    async with sartorius.Scale('scale-ip.local') as scale:\n        await scale.zero()             # Zero and tare the scale\n        print(await scale.get())       # Get mass, units, stability\n        print(await scale.get_info())  # Get model, serial, software version\n\nasyncio.run(get())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/numat/sartorius/", "keywords": "", "license": "GPLv2", "maintainer": "", "maintainer_email": "", "name": "sartorius", "package_url": "https://pypi.org/project/sartorius/", "platform": "", "project_url": "https://pypi.org/project/sartorius/", "project_urls": {"Homepage": "http://github.com/numat/sartorius/"}, "release_url": "https://pypi.org/project/sartorius/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python driver for Sartorius and Minebea Intec scales.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sartorius</h1>\n<p>Asynchronous python ethernet interface and command-line tool for Sartorius and\nMinebea Intec scales.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4452b85101612f2c4ceae77a4859146511bdf6fa/68747470733a2f2f7777772e6461746177656967682e636f6d2f6d656469612f31313837302f7369676e756d312e6a7067\"></p>\n<h1>Compatibility</h1>\n<p>This driver should work for any ethernet scale that uses the standardized communications\nprotocol of the Scale Manufacturers Association. However, it has only been tested\non the following models:</p>\n<ul>\n<li>Minebea Intec Signum</li>\n<li>Sartorius Entris</li>\n<li>Sartorius Miras</li>\n</ul>\n<h1>Installation</h1>\n<pre><code>pip install sartorius\n</code></pre>\n<h1>Scale Setup</h1>\n<p>For scale setup, navigate to <code>SETUP</code> - <code>UNICOM</code> - <code>DATAPROT</code> - <code>ETHER</code>.</p>\n<ul>\n<li>Make sure <code>SRC.IP</code> is set to a valid LAN address</li>\n<li>Ensure <code>MODE</code> - <code>SBI-SRV</code> - <code>6.1.1</code> is set (manual says this should be default but it is not)</li>\n<li>All other defaults are good</li>\n</ul>\n<p>This driver is intended to be stable to disconnects, so operators should be\nable to unplug and reposition the device without affecting any long polling.</p>\n<h1>Command Line</h1>\n<pre><code>$ sartorius scale-ip.local\n{\n    \"mass\": 0.0,\n    \"units\": \"kg\",\n    \"stable\": true,\n    \"info\": {\n        \"model\": \"SIWADCP-1-\",\n        \"serial\": \"37454321\",\n        \"software\": \"00-37-09\"\n    }\n}\n</code></pre>\n<p>You can tare and zero with <code>--zero</code> and remove the info field with <code>--no-info</code>.\nSee <code>sartorius --help</code> for more.</p>\n<p>To use in shell scripts, parse the json output with something like\n<a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a>. For example,\n<code>sartorius scale-ip.local | jq .mass</code> will return the mass.</p>\n<h1>Python</h1>\n<p>If you'd like to link this to more complex behavior, consider using a Python\nscript. This driver exclusively supports asynchronous Python \u22653.7.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sartorius</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">sartorius</span><span class=\"o\">.</span><span class=\"n\">Scale</span><span class=\"p\">(</span><span class=\"s1\">'scale-ip.local'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">scale</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">scale</span><span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">()</span>             <span class=\"c1\"># Zero and tare the scale</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">scale</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>       <span class=\"c1\"># Get mass, units, stability</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">scale</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">())</span>  <span class=\"c1\"># Get model, serial, software version</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 4994975, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1822ec737fccc2229a252fcb57d79d6e", "sha256": "385b079aeba7ba0e56bf6190f9fe036cbda2bdc9bb9df23d85baeda6c6d3ffa4"}, "downloads": -1, "filename": "sartorius-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1822ec737fccc2229a252fcb57d79d6e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12887, "upload_time": "2019-03-27T22:02:15", "upload_time_iso_8601": "2019-03-27T22:02:15.093125Z", "url": "https://files.pythonhosted.org/packages/8e/96/27e57dd669365a253192b97a78d4a44a16c2700fe8d62223848e4aaadabf/sartorius-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c834c6af7ca2504499147af537f5bf22", "sha256": "20c42a674d540112a543632fe566e76d54803f1120a5beb4dc588ae0055f93e0"}, "downloads": -1, "filename": "sartorius-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c834c6af7ca2504499147af537f5bf22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4826, "upload_time": "2019-03-27T22:02:17", "upload_time_iso_8601": "2019-03-27T22:02:17.136089Z", "url": "https://files.pythonhosted.org/packages/38/eb/7854fcbd13df24be587a1ba3e602fbe548343e6e576f1b734f06f72c9823/sartorius-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1822ec737fccc2229a252fcb57d79d6e", "sha256": "385b079aeba7ba0e56bf6190f9fe036cbda2bdc9bb9df23d85baeda6c6d3ffa4"}, "downloads": -1, "filename": "sartorius-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1822ec737fccc2229a252fcb57d79d6e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12887, "upload_time": "2019-03-27T22:02:15", "upload_time_iso_8601": "2019-03-27T22:02:15.093125Z", "url": "https://files.pythonhosted.org/packages/8e/96/27e57dd669365a253192b97a78d4a44a16c2700fe8d62223848e4aaadabf/sartorius-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c834c6af7ca2504499147af537f5bf22", "sha256": "20c42a674d540112a543632fe566e76d54803f1120a5beb4dc588ae0055f93e0"}, "downloads": -1, "filename": "sartorius-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c834c6af7ca2504499147af537f5bf22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4826, "upload_time": "2019-03-27T22:02:17", "upload_time_iso_8601": "2019-03-27T22:02:17.136089Z", "url": "https://files.pythonhosted.org/packages/38/eb/7854fcbd13df24be587a1ba3e602fbe548343e6e576f1b734f06f72c9823/sartorius-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:34 2020"}