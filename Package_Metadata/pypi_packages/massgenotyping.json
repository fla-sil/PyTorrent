{"info": {"author": "Tetsuo I. Kohyama", "author_email": "tetsuo_kohyama@ees.hokudai.ac.jp", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "==============\nmassgenotyping\n==============\n\nPython package for microsatellite genotyping from highly multiplexed amplicon sequencing data\n\n\nFeatures\n--------\n\n* Semi-automatic genotyping optimized for amplicon sequencing data of microsatellite loci\n\n* Visual genotyping with interactive plots\n\n* Fast SSR search in sequences\n\n* Automatic grouping and naming of alleles based on polymorphisms in both SSR and non-SSR regions\n\n* Support for multi-core processing\n\n\nRequirements\n------------\n\n* Python 3.6 or higher\n\n* `NGmerge <https://github.com/jsh58/NGmerge>`_\n\n* `MAFFT <https://mafft.cbrc.jp/alignment/software/>`_\n\n* BLASTn (included in `BLAST+ <https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&DOC_TYPE=Download>`_ command line applications provided by NCBI)\n\n* Optional: `ripgrep <https://github.com/BurntSushi/ripgrep>`_\n\n\nInstallation\n------------\n\nThis package works fine on Linux and macOS, but has not yet been fully tested on Windows.\n\nInstall via PyPI\n\n.. code:: bash\n\n    pip3 install massgenotyping\n\nInstall manually via Git\n\n.. code:: bash\n\n    git clone git://github.com/kohyamat/massgenotyping.git\n    cd massgenotyping\n    python3 setup.py install\n\nUse :code:`--user` option if you want to install the package into the local directory (usually under :code:`~/.local`).\nThis will install the excutable :code:`mgt` under :code:`~/.local/bin`, so add :code:`~/.local/bin` to :code:`$PATH` if necessary.\n\n\nUsage\n-----\n\n.. code:: bash\n\n    mgt [-h] SUBCOMMAND [OPTIONS]\n\n**Subcommand list:**\n\n* :code:`demultiplex`: demultiplex raw amplicon sequences based on primer sequences\n\n* :code:`merge-pairs`: merge paired-end reads\n\n* :code:`denoise`: reduce any noise that may have been generated during sequencing and PCR\n\n* :code:`filter`: filtering for erroneous sequence variants and screening for putative alleles\n\n* :code:`allele-check`: check allele candidates and create an allele database\n\n* :code:`allele-call`: assign alleles to raw amplicon sequences\n\n* :code:`show-alignment`: show a sequence alingment\n\nThe details of the options for each subcommand can be checked by :code:`mgt SUBCOMMAND -h`.\n\n\nTutorials with example data\n---------------------------\n\n**1. Demultiplex raw amplicon sequences based on primer sequences**\n\nAs a first step, the sequence data is split based on the primer sequence. \nThe input can be one or two sequence files in the FASTQ format, or a directory containing multiple sequence files.\nPrimer sequences can be read from CSV or FASTA files.\nPlease check the example data for the format of the input data.\n\n.. code:: bash\n\n    mgt demultiplex examples/sequence_data -g \"*_R[12]_*\" -m examples/marker_data.csv\n\nThe result files are written in subdirectories within the output directory (:code:`./project` by default) for each marker.\n\n**2. Merge paired-end reads and trim primer sequecnes**\n\nFor the paired-end sequencing data, the respective sequence pairs are merged using NGmerge program.\nThe following command removes the the primer sequences after merging sequence pairs.\n\n.. code:: bash\n\n    mgt merge-pairs ./project -m examples/marker_data.csv --trim-primer\n\nFor single-end data, this step can be skipped. The removal of the primer sequence can also be performed in the step 1.\n\n**3. Reduce noise (optional but recommended)**\n\nThis step corrects any noise (very low-frequency point mutations) that may have been generated during sequencing or PCR.\nThis step is not necessarily required, but it will make the following step easier.\n\n.. code:: bash\n\n    mgt denoise ./project/*/*_merged.fastq.gz\n\n**4. Filter out erroneous sequence variants**\n\nIn this step, the sequence of putative alleles is extracted for each marker in each sample,\nwhile removing any erroneous sequence variants, such as 'stutter' sequences.\nAfter some rough filtering, an interactive plot allows you to choose which sequence variants to keep.\nYou can skip this visual-checking procedure with the :code:`--force-no-visual-check` option.\n\n.. code:: bash\n\n    mgt filter ./project -m examples/marker_data.csv\n\n**5. Check a multiple sequence alignment and make an allele database**\n\nThe database is created after checking the alignment of the putative allele sequences.\nIf necessary, you can further filter out the erroneous sequence variants.\n\n.. code:: bash\n\n    mgt allele-check ./project\n\n\n**6. Assign alleles to raw amplicon sequences**\n\nFinally, the following command perform a BLASTn search against the database created for each marker and assign alleles to the raw sequence data.\nThe genotype tables are created within the output directory.\n\n.. code:: bash\n\n    mgt allele-call ./project -m examples/marker_data.csv\n\nScreenshots\n-----------\n\n.. image:: https://user-images.githubusercontent.com/6261781/78501753-205e3280-7798-11ea-98ce-32a4f631bb05.png\n   :scale: 50%\n   :alt: Figure 1\n\n**Figure 1.** Checking the multiple sequence alignment across the samples (*STEP 5*).\n\n.. image:: https://user-images.githubusercontent.com/6261781/78501825-877be700-7798-11ea-8382-3b991a42502f.png\n   :scale: 50%\n   :alt: Figure 2\n\n**Figure 2.** Visual genotyping (*STEP 6*).\n\n\nContributing to massgenotyping\n------------------------------\n\nContributions of any kind are welcome!\n\n\nLicense\n-------\n\n`MIT <LICENSE>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kohyamat/massgenotyping", "keywords": "Genotyping,Microsatellite,NGS,Amplicon sequencing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "massgenotyping", "package_url": "https://pypi.org/project/massgenotyping/", "platform": "", "project_url": "https://pypi.org/project/massgenotyping/", "project_urls": {"Homepage": "https://github.com/kohyamat/massgenotyping"}, "release_url": "https://pypi.org/project/massgenotyping/0.1.0/", "requires_dist": ["biopython", "dataclasses-json", "fuzzysearch", "matplotlib", "natsort", "numpy", "pandas", "python-Levenshtein", "seaborn", "tqdm", "dataclasses ; python_version == \"3.6\""], "requires_python": ">=3.6", "summary": "Python packages for microsatellite genotyping from amplicon sequencing data", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python package for microsatellite genotyping from highly multiplexed amplicon sequencing data</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Semi-automatic genotyping optimized for amplicon sequencing data of microsatellite loci</li>\n<li>Visual genotyping with interactive plots</li>\n<li>Fast SSR search in sequences</li>\n<li>Automatic grouping and naming of alleles based on polymorphisms in both SSR and non-SSR regions</li>\n<li>Support for multi-core processing</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6 or higher</li>\n<li><a href=\"https://github.com/jsh58/NGmerge\" rel=\"nofollow\">NGmerge</a></li>\n<li><a href=\"https://mafft.cbrc.jp/alignment/software/\" rel=\"nofollow\">MAFFT</a></li>\n<li>BLASTn (included in <a href=\"https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&amp;DOC_TYPE=Download\" rel=\"nofollow\">BLAST+</a> command line applications provided by NCBI)</li>\n<li>Optional: <a href=\"https://github.com/BurntSushi/ripgrep\" rel=\"nofollow\">ripgrep</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This package works fine on Linux and macOS, but has not yet been fully tested on Windows.</p>\n<p>Install via PyPI</p>\n<pre>pip3 install massgenotyping\n</pre>\n<p>Install manually via Git</p>\n<pre>git clone git://github.com/kohyamat/massgenotyping.git\n<span class=\"nb\">cd</span> massgenotyping\npython3 setup.py install\n</pre>\n<p>Use <code>--user</code> option if you want to install the package into the local directory (usually under <code>~/.local</code>).\nThis will install the excutable <code>mgt</code> under <code>~/.local/bin</code>, so add <code>~/.local/bin</code> to <code>$PATH</code> if necessary.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>mgt <span class=\"o\">[</span>-h<span class=\"o\">]</span> SUBCOMMAND <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Subcommand list:</strong></p>\n<ul>\n<li><code>demultiplex</code>: demultiplex raw amplicon sequences based on primer sequences</li>\n<li><code>merge-pairs</code>: merge paired-end reads</li>\n<li><code>denoise</code>: reduce any noise that may have been generated during sequencing and PCR</li>\n<li><code>filter</code>: filtering for erroneous sequence variants and screening for putative alleles</li>\n<li><code>allele-check</code>: check allele candidates and create an allele database</li>\n<li><code>allele-call</code>: assign alleles to raw amplicon sequences</li>\n<li><code>show-alignment</code>: show a sequence alingment</li>\n</ul>\n<p>The details of the options for each subcommand can be checked by <code>mgt SUBCOMMAND -h</code>.</p>\n</div>\n<div id=\"tutorials-with-example-data\">\n<h2>Tutorials with example data</h2>\n<p><strong>1. Demultiplex raw amplicon sequences based on primer sequences</strong></p>\n<p>As a first step, the sequence data is split based on the primer sequence.\nThe input can be one or two sequence files in the FASTQ format, or a directory containing multiple sequence files.\nPrimer sequences can be read from CSV or FASTA files.\nPlease check the example data for the format of the input data.</p>\n<pre>mgt demultiplex examples/sequence_data -g <span class=\"s2\">\"*_R[12]_*\"</span> -m examples/marker_data.csv\n</pre>\n<p>The result files are written in subdirectories within the output directory (<code>./project</code> by default) for each marker.</p>\n<p><strong>2. Merge paired-end reads and trim primer sequecnes</strong></p>\n<p>For the paired-end sequencing data, the respective sequence pairs are merged using NGmerge program.\nThe following command removes the the primer sequences after merging sequence pairs.</p>\n<pre>mgt merge-pairs ./project -m examples/marker_data.csv --trim-primer\n</pre>\n<p>For single-end data, this step can be skipped. The removal of the primer sequence can also be performed in the step 1.</p>\n<p><strong>3. Reduce noise (optional but recommended)</strong></p>\n<p>This step corrects any noise (very low-frequency point mutations) that may have been generated during sequencing or PCR.\nThis step is not necessarily required, but it will make the following step easier.</p>\n<pre>mgt denoise ./project/*/*_merged.fastq.gz\n</pre>\n<p><strong>4. Filter out erroneous sequence variants</strong></p>\n<p>In this step, the sequence of putative alleles is extracted for each marker in each sample,\nwhile removing any erroneous sequence variants, such as \u2018stutter\u2019 sequences.\nAfter some rough filtering, an interactive plot allows you to choose which sequence variants to keep.\nYou can skip this visual-checking procedure with the <code>--force-no-visual-check</code> option.</p>\n<pre>mgt filter ./project -m examples/marker_data.csv\n</pre>\n<p><strong>5. Check a multiple sequence alignment and make an allele database</strong></p>\n<p>The database is created after checking the alignment of the putative allele sequences.\nIf necessary, you can further filter out the erroneous sequence variants.</p>\n<pre>mgt allele-check ./project\n</pre>\n<p><strong>6. Assign alleles to raw amplicon sequences</strong></p>\n<p>Finally, the following command perform a BLASTn search against the database created for each marker and assign alleles to the raw sequence data.\nThe genotype tables are created within the output directory.</p>\n<pre>mgt allele-call ./project -m examples/marker_data.csv\n</pre>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<img alt=\"Figure 1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc45ff628d517c6e9f4092a4209fa99395e2944b/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363236313738312f37383530313735332d32303565333238302d373739382d313165612d393863652d3332613466363331626230352e706e67\">\n<p><strong>Figure 1.</strong> Checking the multiple sequence alignment across the samples (<em>STEP 5</em>).</p>\n<img alt=\"Figure 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04c6db1c4dc3e7c1716cff486bcc29f8498c6285/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363236313738312f37383530313832352d38373762653730302d373739382d313165612d383338322d3362393931613432353032662e706e67\">\n<p><strong>Figure 2.</strong> Visual genotyping (<em>STEP 6</em>).</p>\n</div>\n<div id=\"contributing-to-massgenotyping\">\n<h2>Contributing to massgenotyping</h2>\n<p>Contributions of any kind are welcome!</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT</a></p>\n</div>\n\n          </div>"}, "last_serial": 6969497, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b2ca50b360510f765983992fb0e4ed1e", "sha256": "1ef92d7fd3e9f82f234f9d69c83d23c04a227ed4f7f62890c3d3ed18da7648ac"}, "downloads": -1, "filename": "massgenotyping-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b2ca50b360510f765983992fb0e4ed1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53248, "upload_time": "2020-04-07T13:23:33", "upload_time_iso_8601": "2020-04-07T13:23:33.404871Z", "url": "https://files.pythonhosted.org/packages/ca/3a/c01b696a91b2e2d9f2394d94d8afb5b81a023cb500e5443a695bb2cb0c4d/massgenotyping-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a11d961710e863c77b7eb67f3a6dde7", "sha256": "737ba4a75cfc9a9b4a58a468ef0a821048c5fe3b6d1189f5edb5c3fa6485d680"}, "downloads": -1, "filename": "massgenotyping-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a11d961710e863c77b7eb67f3a6dde7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 328968, "upload_time": "2020-04-07T13:23:36", "upload_time_iso_8601": "2020-04-07T13:23:36.686149Z", "url": "https://files.pythonhosted.org/packages/c1/fc/df9fbfb0f5dce606752ae37a78334f81c79b6f67cf4f48ac5a72eab4280a/massgenotyping-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2ca50b360510f765983992fb0e4ed1e", "sha256": "1ef92d7fd3e9f82f234f9d69c83d23c04a227ed4f7f62890c3d3ed18da7648ac"}, "downloads": -1, "filename": "massgenotyping-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b2ca50b360510f765983992fb0e4ed1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53248, "upload_time": "2020-04-07T13:23:33", "upload_time_iso_8601": "2020-04-07T13:23:33.404871Z", "url": "https://files.pythonhosted.org/packages/ca/3a/c01b696a91b2e2d9f2394d94d8afb5b81a023cb500e5443a695bb2cb0c4d/massgenotyping-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a11d961710e863c77b7eb67f3a6dde7", "sha256": "737ba4a75cfc9a9b4a58a468ef0a821048c5fe3b6d1189f5edb5c3fa6485d680"}, "downloads": -1, "filename": "massgenotyping-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a11d961710e863c77b7eb67f3a6dde7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 328968, "upload_time": "2020-04-07T13:23:36", "upload_time_iso_8601": "2020-04-07T13:23:36.686149Z", "url": "https://files.pythonhosted.org/packages/c1/fc/df9fbfb0f5dce606752ae37a78334f81c79b6f67cf4f48ac5a72eab4280a/massgenotyping-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:29 2020"}