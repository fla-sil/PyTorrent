{"info": {"author": "[ods.ai] Arseny Kravchenko et al", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![Build status](https://badge.buildkite.com/3be2c7533d11e157a0b1fef8af1231356349694c459f072ccc.svg)](https://buildkite.com/ceevee/ceevee-tests)\n\n# ceevee\n\n`ceevee` (read like CV, i.e. computer vision) is a Python library for various computer vision problems with a focus on easy usage.\n\n`ceevee` aims to be a bridge between deep learning practitioners training accurate models and product-oriented software engineers who just want to process their images instead of diving into the deep learning ecosystem.\n\nPython 3.6+ is supported.\n\n## Install\n\nFrom PyPI - not available yet\n\nFrom source\n```\npython setup.py bdist_wheel\npip install -U ceevee-0.0.1-py3-none-any.whl\n```\n\n## Tasks\n\n## Usage\n\nAll tasks shares the same API\n\n### CLI API\n\n`python -m ceevee.cli task /path/to/img1.jpg /path/to/img2.jpg ... /path/to/imgN.jpg > result.json`\n\n### HTTP API\n\nHTTP API is based on [Falcon](https://github.com/falconry/falcon),\nso it can be used with any WSGI server, such as uWSGI or Gunicorn.\n\n- install your favourite WSGI server (e.g. `pip install gunicorn`)\n- set env variable `CEEVEE_TASKS` for your tasks,\n multiple comma separated tasks are supported, e.g. `CEEVEE_TASKS=task1,task2` \n- run a server `CEEVEE_TASKS=dummy gunicorn ceevee.cv_http`;\n- send a POST request with `image` parameter. \n\n```\n$ http -f POST localhost:8000/dummy image@/tmp/img.jpg\nHTTP/1.1 200 OK\nConnection: close\nDate: Sat, 14 Sep 2019 13:47:39 GMT\nServer: gunicorn/19.9.0\ncontent-length: 37\ncontent-type: application/json\n\n{\n    \"result\": [\n        500,\n        500,\n        3\n    ],\n    \"success\": true\n}\n```\n\n### Python API\n\n```python\nfrom ceevee.utils import read_img\nfrom ceevee.dummy import DummyPredictor\nbaseline = DummyPredictor()\nimg = read_img('/path/to/img.jpg')\nresult = baseline(img)\n```\n\n## Contributions\n\nYes, you can add a new model!\n\n### Checklist:\n- create a GitHub issue with your suggested model;\n- create a new Baseline class (see `ceevee.dummy.DummyBaseline`) and implement three methods (`preprocess`, `process`, \n`postprocess`);\n- add your model to `MODELS` at `ceevee/__init__.py`\n- add tests to `tests/`;\n- once CI is green, create a pull request!\n\n# ToDo:\n\n- infrastructure:\n    - packaging, pip\n- APIs:\n    - http: tests, error handling \n- models: \n    - face detection\n    - face emotion\n    - face keypoints \n    - car detection\n    - crowd density estimation", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arsenyinfo/ceevee", "keywords": "Machine Learning,Deep Learning,Computer Vision,PyTorch", "license": "", "maintainer": "", "maintainer_email": "", "name": "ceevee", "package_url": "https://pypi.org/project/ceevee/", "platform": "", "project_url": "https://pypi.org/project/ceevee/", "project_urls": {"Homepage": "https://github.com/arsenyinfo/ceevee"}, "release_url": "https://pypi.org/project/ceevee/0.0.1/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "Python library for various computer vision problems with a focus on easy usage", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://buildkite.com/ceevee/ceevee-tests\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33172c8575ad2d783daa392981264916ac03baa6/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f33626532633735333364313165313537613062316665663861663132333133353633343936393463343539663037326363632e737667\"></a></p>\n<h1>ceevee</h1>\n<p><code>ceevee</code> (read like CV, i.e. computer vision) is a Python library for various computer vision problems with a focus on easy usage.</p>\n<p><code>ceevee</code> aims to be a bridge between deep learning practitioners training accurate models and product-oriented software engineers who just want to process their images instead of diving into the deep learning ecosystem.</p>\n<p>Python 3.6+ is supported.</p>\n<h2>Install</h2>\n<p>From PyPI - not available yet</p>\n<p>From source</p>\n<pre><code>python setup.py bdist_wheel\npip install -U ceevee-0.0.1-py3-none-any.whl\n</code></pre>\n<h2>Tasks</h2>\n<h2>Usage</h2>\n<p>All tasks shares the same API</p>\n<h3>CLI API</h3>\n<p><code>python -m ceevee.cli task /path/to/img1.jpg /path/to/img2.jpg ... /path/to/imgN.jpg &gt; result.json</code></p>\n<h3>HTTP API</h3>\n<p>HTTP API is based on <a href=\"https://github.com/falconry/falcon\" rel=\"nofollow\">Falcon</a>,\nso it can be used with any WSGI server, such as uWSGI or Gunicorn.</p>\n<ul>\n<li>install your favourite WSGI server (e.g. <code>pip install gunicorn</code>)</li>\n<li>set env variable <code>CEEVEE_TASKS</code> for your tasks,\nmultiple comma separated tasks are supported, e.g. <code>CEEVEE_TASKS=task1,task2</code></li>\n<li>run a server <code>CEEVEE_TASKS=dummy gunicorn ceevee.cv_http</code>;</li>\n<li>send a POST request with <code>image</code> parameter.</li>\n</ul>\n<pre><code>$ http -f POST localhost:8000/dummy image@/tmp/img.jpg\nHTTP/1.1 200 OK\nConnection: close\nDate: Sat, 14 Sep 2019 13:47:39 GMT\nServer: gunicorn/19.9.0\ncontent-length: 37\ncontent-type: application/json\n\n{\n    \"result\": [\n        500,\n        500,\n        3\n    ],\n    \"success\": true\n}\n</code></pre>\n<h3>Python API</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ceevee.utils</span> <span class=\"kn\">import</span> <span class=\"n\">read_img</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ceevee.dummy</span> <span class=\"kn\">import</span> <span class=\"n\">DummyPredictor</span>\n<span class=\"n\">baseline</span> <span class=\"o\">=</span> <span class=\"n\">DummyPredictor</span><span class=\"p\">()</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">read_img</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/img.jpg'</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">baseline</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributions</h2>\n<p>Yes, you can add a new model!</p>\n<h3>Checklist:</h3>\n<ul>\n<li>create a GitHub issue with your suggested model;</li>\n<li>create a new Baseline class (see <code>ceevee.dummy.DummyBaseline</code>) and implement three methods (<code>preprocess</code>, <code>process</code>,\n<code>postprocess</code>);</li>\n<li>add your model to <code>MODELS</code> at <code>ceevee/__init__.py</code></li>\n<li>add tests to <code>tests/</code>;</li>\n<li>once CI is green, create a pull request!</li>\n</ul>\n<h1>ToDo:</h1>\n<ul>\n<li>infrastructure:\n<ul>\n<li>packaging, pip</li>\n</ul>\n</li>\n<li>APIs:\n<ul>\n<li>http: tests, error handling</li>\n</ul>\n</li>\n<li>models:\n<ul>\n<li>face detection</li>\n<li>face emotion</li>\n<li>face keypoints</li>\n<li>car detection</li>\n<li>crowd density estimation</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5923350, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "53f6fd45dfc1c6636a031b053e001dd5", "sha256": "1c320f2159b3d2d3bd54c1ec9c1962d4e349d07d35e4e32923dddfa402627583"}, "downloads": -1, "filename": "ceevee-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53f6fd45dfc1c6636a031b053e001dd5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5673, "upload_time": "2019-10-03T13:06:34", "upload_time_iso_8601": "2019-10-03T13:06:34.617147Z", "url": "https://files.pythonhosted.org/packages/17/fa/c3f205fa0296003a14f14ea264db377677dc2b40d260f10710f422c0f32f/ceevee-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb506f0475ea1f2560b33a74db74fd35", "sha256": "68bfcd589bb1a67afd3f29a2158837597c39d61808ccaa25c5e67a7a79aecc23"}, "downloads": -1, "filename": "ceevee-0.0.1.tar.gz", "has_sig": false, "md5_digest": "eb506f0475ea1f2560b33a74db74fd35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5027, "upload_time": "2019-10-03T12:59:15", "upload_time_iso_8601": "2019-10-03T12:59:15.944551Z", "url": "https://files.pythonhosted.org/packages/41/4e/3aa1b32cc4591cbc03e82ef64331618b779a6b79ecd82de99f11b4a77c59/ceevee-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53f6fd45dfc1c6636a031b053e001dd5", "sha256": "1c320f2159b3d2d3bd54c1ec9c1962d4e349d07d35e4e32923dddfa402627583"}, "downloads": -1, "filename": "ceevee-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53f6fd45dfc1c6636a031b053e001dd5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5673, "upload_time": "2019-10-03T13:06:34", "upload_time_iso_8601": "2019-10-03T13:06:34.617147Z", "url": "https://files.pythonhosted.org/packages/17/fa/c3f205fa0296003a14f14ea264db377677dc2b40d260f10710f422c0f32f/ceevee-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb506f0475ea1f2560b33a74db74fd35", "sha256": "68bfcd589bb1a67afd3f29a2158837597c39d61808ccaa25c5e67a7a79aecc23"}, "downloads": -1, "filename": "ceevee-0.0.1.tar.gz", "has_sig": false, "md5_digest": "eb506f0475ea1f2560b33a74db74fd35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5027, "upload_time": "2019-10-03T12:59:15", "upload_time_iso_8601": "2019-10-03T12:59:15.944551Z", "url": "https://files.pythonhosted.org/packages/41/4e/3aa1b32cc4591cbc03e82ef64331618b779a6b79ecd82de99f11b4a77c59/ceevee-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:53 2020"}