{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "The problem: I want to look up the weather from wunderground from my terminal without opening up a web browser. I figured \"hey, this should be easy / fun to do using Python!\" -- WRONG! XML is always a pain to work with, and there is no *easy* way to get XML schema into a dict. Most people don't even use XML correctly; you should use JSON if you just have strings inside of XML tags and nothing more. Every API I've ever seen / worked with uses XML in this way, and so they could all replace it with the *much* easier to parse JSON.\n\nUpdate: You can now pass in the location as the first argument to the script. \n\nUpdate 2: You can use *any* location search format that wunderground supports; this includes zipcode, airport code, city name and state, etc.\nIf Wunderground returns valid XML for your query, pycliweather will parse it; the searches are limited only by the Wunderground API.\n\nIn the example below, I'm using 'dallas texas'. There is also a default specified in the code should a location not be passed.\n\nAnyway, here is what should come out when you run this:\n\nlikwid@helios pycliweather(master)$ weather dallas texas\nLocation: dallas+texas\nSunrise: 6:18\nSunset: 20:37\nMoon visible: 95% \n\nFriday - Partly Cloudy - 79F to 99F - 0% chance of rain\nSaturday - Partly Cloudy - 79F to 104F - 10% chance of rain\nSunday - Partly Cloudy - 79F to 101F - 10% chance of rain\nMonday - Partly Cloudy - 77F to 99F - 10% chance of rain\nTuesday - Chance of a Thunderstorm - 77F to 95F - 20% chance of rain\nWednesday - Chance of a Thunderstorm - 76F to 92F - 30% chance of rain", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "Attribution-NonCommercial-ShareAlike 3.0 Unported", "maintainer": null, "maintainer_email": null, "name": "pycliweather", "package_url": "https://pypi.org/project/pycliweather/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pycliweather/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/pycliweather/0.3/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The problem: I want to look up the weather from wunderground from my terminal without opening up a web browser. I figured \u201chey, this should be easy / fun to do using Python!\u201d \u2013 WRONG! XML is always a pain to work with, and there is no <em>easy</em> way to get XML schema into a dict. Most people don\u2019t even use XML correctly; you should use JSON if you just have strings inside of XML tags and nothing more. Every API I\u2019ve ever seen / worked with uses XML in this way, and so they could all replace it with the <em>much</em> easier to parse JSON.</p>\n<p>Update: You can now pass in the location as the first argument to the script.</p>\n<p>Update 2: You can use <em>any</em> location search format that wunderground supports; this includes zipcode, airport code, city name and state, etc.\nIf Wunderground returns valid XML for your query, pycliweather will parse it; the searches are limited only by the Wunderground API.</p>\n<p>In the example below, I\u2019m using \u2018dallas texas\u2019. There is also a default specified in the code should a location not be passed.</p>\n<p>Anyway, here is what should come out when you run this:</p>\n<p><a href=\"mailto:likwid%40helios\">likwid<span>@</span>helios</a> pycliweather(master)$ weather dallas texas\nLocation: dallas+texas\nSunrise: 6:18\nSunset: 20:37\nMoon visible: 95%</p>\n<p>Friday - Partly Cloudy - 79F to 99F - 0% chance of rain\nSaturday - Partly Cloudy - 79F to 104F - 10% chance of rain\nSunday - Partly Cloudy - 79F to 101F - 10% chance of rain\nMonday - Partly Cloudy - 77F to 99F - 10% chance of rain\nTuesday - Chance of a Thunderstorm - 77F to 95F - 20% chance of rain\nWednesday - Chance of a Thunderstorm - 76F to 92F - 30% chance of rain</p>\n\n          </div>"}, "last_serial": 797049, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "03af338c9c60e2441c069f7bdf214b92", "sha256": "ef5ef66c36d30a4be9a450c52039fea1fb7f61c25d04bff4c99ad65cbac4c5c4"}, "downloads": -1, "filename": "pycliweather-0.3.tar.gz", "has_sig": false, "md5_digest": "03af338c9c60e2441c069f7bdf214b92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3050, "upload_time": "2011-07-14T05:25:32", "upload_time_iso_8601": "2011-07-14T05:25:32.506512Z", "url": "https://files.pythonhosted.org/packages/d4/36/cc95e11e36d5fd340450a7797ec295b90619d70b2729414a8d78c1f96cda/pycliweather-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03af338c9c60e2441c069f7bdf214b92", "sha256": "ef5ef66c36d30a4be9a450c52039fea1fb7f61c25d04bff4c99ad65cbac4c5c4"}, "downloads": -1, "filename": "pycliweather-0.3.tar.gz", "has_sig": false, "md5_digest": "03af338c9c60e2441c069f7bdf214b92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3050, "upload_time": "2011-07-14T05:25:32", "upload_time_iso_8601": "2011-07-14T05:25:32.506512Z", "url": "https://files.pythonhosted.org/packages/d4/36/cc95e11e36d5fd340450a7797ec295b90619d70b2729414a8d78c1f96cda/pycliweather-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:23 2020"}