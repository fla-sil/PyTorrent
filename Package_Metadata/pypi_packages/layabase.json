{"info": {"author": "Colin Bounouar", "author_email": "colin.bounouar.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "<h2 align=\"center\">Database for layab</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/layabase/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/layabase\"></a>\n<a href=\"https://travis-ci.org/Colin-b/layabase\"><img alt=\"Build status\" src=\"https://api.travis-ci.org/Colin-b/layabase.svg?branch=master\"></a>\n<a href=\"https://travis-ci.org/Colin-b/layabase\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://travis-ci.org/Colin-b/layabase\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-725 passed-blue\"></a>\n<a href=\"https://pypi.org/project/layabase/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/layabase\"></a>\n</p>\n\nQuery your databases easily and transparently thanks to this module providing helpers on top of most brilliant python\ndatabase modules ([SQLAlchemy](https://docs.sqlalchemy.org) and [PyMongo](https://api.mongodb.com/python/current/)).\n\n## Table of Contents\n\n  * [Features](#features)\n  * [How to use](#usage)\n  * [Technical documentation](#technical)\n\n## Features\n\nFeatures:\n\n- Audit\n  - Automatic audit support (if [`layabauth`](https://pypi.org/project/layabauth/) python module is used, user will be logged as well)\n- Rollback\n  - Automatic rollback support (when history is activated)\n- History\n  - Automatic history management\n- Validation\n  - Enforce proper values are received (type, restricted choices, required fields)\n- Conversion\n  - Converting JSON received data to appropriate database data type\n  - Converting Database data type to JSON\n- Health check\n- Smart queries\n  - HTTP query parameters are extracted and converted from HTTP query arguments\n    - Special parameter: order_by (__Feature not available for mongo__)\n    - Special parameter: limit\n    - Special parameter: offset\n  - Query on multiple equality via `field=value1&field=value2`\n  - Query on excluded intervals via `field=>value1&field=<value2`\n  - Query on included intervals via `field=>=value1&field=<=value2`\n  - Query on restricted values via `field=!=value1&field=!=value2` (__Feature not yet available__)\n  - Query via a mix of all those features if needed as long as it make sense to you\n  - Query regex thanks to `*` character via `field=v*lue` (__Feature not yet available for mongo__) \n\n## Usage\n\nYou will define a class to help you with the manipulation of:\n\n * A collection if this is a MongoDB you are connecting to.\n * A table if this is a non-Mongo database you are connecting to.\n\nThis class will describe:\n\n * The document fields if this is a MongoDB you are connecting to.\n * The table columns if this is a non-Mongo database you are connecting to.\n\nBy providing this class to a layabase.CRUDController instance, you will automatically have all features described in the previous section.\n\n## CRUD Controller\n\nlayabase.CRUDController provides C.R.U.D. methods (and more, as listed in features) on a specified table or mongo collection.\n\n### Controller definition\n\n```python\nimport layabase\n\n# This will be the class describing your table or collection as defined in Table or Collection sections afterwards\ntable_or_collection = None \n\ncontroller = layabase.CRUDController(table_or_collection)\n```\n\n### Controller features\n\n#### Retrieving data\n\nYou can retrieve a list of rows or documents described as dictionaries:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nall_rows_or_documents = controller.get({})\n\nfiltered_rows_or_documents = controller.get({\"value\": 'value1'})\n```\n\nYou can retrieve a single row or document described as dictionary:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nrow_or_document = controller.get_one({\"value\": 'value1'})\n```\n\n#### Inserting data\n\nYou can insert many rows or documents at once using dictionary representation:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\ninserted_rows_or_documents = controller.post_many([\n    {'key': 'key1', 'value': 'value1'},\n    {'key': 'key2', 'value': 'value2'},\n])\n```\n\nYou can insert a single row or document using dictionary representation:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\ninserted_row_or_document = controller.post({'key': 'key1', 'value': 'value1'})\n```\n\n#### Updating data\n\nYou can update many rows or documents at once using (partial) dictionary representation:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nupdated_rows_or_documents = controller.put_many([{'key': 'key1', 'value': 'new value1'}, {'key': 'key2', 'value': 'new value2'}])\n```\n\nYou can update a single row or document using (partial) dictionary representation:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nupdated_row_or_document = controller.put({'key': 'key1', 'value': 'new value1'})\n```\n\n#### Removing data\n\nYou can remove a subset of rows or documents:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nnb_removed_rows_or_documents = controller.delete({\"key\": 'key1'})\n```\n\nYou can remove all rows or documents:\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nnb_removed_rows_or_documents = controller.delete({})\n```\n\n#### Retrieving table or collection mapping\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\n# non mongo description = {'table': 'MyTable', 'key': 'key', 'value': 'value'}\n# mongo description = {'table': 'MyCollection', 'key': 'key', 'value': 'value'}\ndescription = controller.get_model_description()\n```\n\n#### Auditing\n\n```python\nimport layabase\n\n# This will be the controller as created in Controller definition section\ncontroller: layabase.CRUDController = None\n\nall_audit_models_as_dict_list = controller.get_audit({})\n\nfiltered_audit_models_as_dict_list = controller.get_audit({\"value\": 'value1'})\n```\n\n## Link to a database\n\n### Link to a Mongo database\n\n```python\nimport layabase\n\n\n# Should be a list of CRUDController inherited classes\nmy_controllers = []\nlayabase.load(\"mongodb://host:port/server_name\", my_controllers)\n```\n\n### Link to a Mongo in-memory database\n\n```python\nimport layabase\n\n\n# Should be a list of CRUDController inherited classes\nmy_controllers = []\nlayabase.load(\"mongomock\", my_controllers)\n```\n\n### Link to a non Mongo database\n\n```python\nimport layabase\n\n\n# Should be a list of CRUDController inherited classes\nmy_controllers = []\nlayabase.load(\"your_connection_string\", my_controllers)\n```\n\n## Relational databases (non-Mongo)\n\n[SQLAlchemy](https://docs.sqlalchemy.org) is the underlying framework used to manipulate relational databases.\n\nTo create a representation of a table you will need to create a [Mixin](https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/mixins.html#declarative-mixins).\n\n### Table\n\nYou can add extra information to a column thanks to the info parameter.\n\nIf the field should be required on queries: \n```python\ninfo={'marshmallow': {\"required_on_query\": True}}\n```\n\nIf `*` character in queries values should be interpreted as any characters: \n```python\ninfo={'marshmallow': {\"interpret_star_character\": True}}\n```\n\nIf the field can be queried with comparison signs such as >, <, >=, <=: \n```python\ninfo={'marshmallow': {\"allow_comparison_signs\": True}}\n```\n\nWhen querying, provide a single value of a list of values.\n\nif provided in `order_by` parameter, it will be considered as ascending order, add ` desc` at the end of the value to explicitly order by in descending order.\n\nIf the field allow comparison signs (`allow_comparison_signs`), you can add `>`, `>=`, `<`, `<=` in front of the value.\n\n```python\nfrom sqlalchemy import Column, String\n\nclass MyTable:\n    __tablename__ = \"my_table\"\n\n    key = Column(String, primary_key=True)\n    value = Column(String)\n```\n\n## MongoDB (non-relational)\n\n[PyMongo](https://api.mongodb.com/python/current/) is the underlying framework used to manipulate MongoDB.\n\nTo create a representation of a collection you will need to create a Mixin class.\n\nTo link your model to the underlying collection, you will need to provide a connection string.\n\n### Collection\n\n```python\nfrom layabase.mongo import Column\n\nclass MyCollection:\n    __collection_name__ = \"my_collection\"\n\n    key = Column(str, is_primary_key=True)\n    dict_value = Column(dict)\n```\n\n##### String fields\n\nFields containing string can be described using layabase.mongo.Column\n\n```python\nfrom layabase.mongo import Column\n\nclass MyCollection:\n    __collection_name__ = \"my_collection\"\n\n    key = Column()\n```\n\nAs string is considered as the default field type, not providing the type explicitly when creating a column is valid.\n\nThe following parameters can also be provided when creating a column of string type:\n\n<table>\n    <th>\n        <td><em>Description</em></td>\n        <td><em>Default value</em></td>\n    </th>\n    <tr>\n        <td><strong>choices</strong></td>\n        <td>Restrict valid values. Should be a list of string or a function (without parameters) returning a list of string.</td>\n        <td>None (unrestricted)</td>\n    </tr>\n    <tr>\n        <td><strong>default_value</strong></td>\n        <td>Default field value returned to the client if field is not set. Should be a string or a function (with dictionary as parameter) returning a string.</td>\n        <td>None</td>\n    </tr>\n    <tr>\n        <td><strong>description</strong></td>\n        <td>Field description used in OpenAPI definition and in error messages. Should be a string value.</td>\n        <td>None</td>\n    </tr>\n    <tr>\n        <td><strong>index_type</strong></td>\n        <td>If and how this field should be indexed. Value should be one of IndexType enum.</td>\n        <td>None (not indexed)</td>\n    </tr>\n    <tr>\n        <td><strong>allow_none_as_filter</strong></td>\n        <td>If None value should be kept in queries (GET/DELETE). Should be a boolean value.</td>\n        <td>False (remove None from queries)</td>\n    </tr>\n    <tr>\n        <td><strong>is_primary_key</strong></td>\n        <td>If this field value is not allowed to be modified after insert. Should be a boolean value.</td>\n        <td>False (field value can always be modified)</td>\n    </tr>\n    <tr>\n        <td><strong>is_nullable</strong></td>\n        <td>If field value is optional. Should be a boolean value. Note that it is not allowed to force False if field has a default value.</td>\n        <td>\n        Default to True if field is not a primary key.\n        Default to True if field has a default value.\n        Otherwise default to False.</td>\n    </tr>\n    <tr>\n        <td><strong>is_required</strong></td>\n        <td>If field value must be specified in client requests. Use it to avoid heavy requests. Should be a boolean value.</td>\n        <td>False (optional)</td>\n    </tr>\n    <tr>\n        <td><strong>min_length</strong></td>\n        <td>Minimum value length.</td>\n        <td>None (no minimum length)</td>\n    </tr>\n    <tr>\n        <td><strong>max_length</strong></td>\n        <td>Maximum value length.</td>\n        <td>None (no maximum length)</td>\n    </tr>\n    <tr>\n        <td><strong>allow_comparison_signs</strong></td>\n        <td>If field value should be interpreted to extract >, >=, <, <= prefix.</td>\n        <td>False (value is kept as provided for equlity comparison)</td>\n    </tr>\n</table>\n\n##### Dictionary fields\n\nFields containing a dictionary can be described using layabase.mongo.DictColumn\n\n```python\nfrom layabase.mongo import DictColumn\n\nclass MyCollection:\n    __collection_name__ = \"my_collection\"\n\n    key = DictColumn()\n```\n\n##### List fields\n\nFields containing a list can be described using layabase.mongo.ListColumn\n\n```python\nfrom layabase.mongo import ListColumn, Column\n\nclass MyCollection:\n    __collection_name__ = \"my_collection\"\n\n    key = ListColumn(Column())\n```\n\n## How to install\n1. [python 3.6+](https://www.python.org/downloads/) must be installed\n2. Use pip to install module:\n```sh\npython -m pip install layabase\n```\n\nNote that depending on what you want to connect to, you will have to use a different module name than layabase:\n* Mongo database: layabase[mongo]\n* Mongo in-memory database: layabase mongomock\n* Other database: layabase[sqlalchemy]\n\n## Technical\n\n * [Requirements](#developer-requirements)\n * [Usage](#developer-usage)\n\n## Developer-Requirements\n\nThe module requires the following to run:\n\n  * [python 3.6+](https://www.python.org/downloads/)\n\n## Developer-Usage\n\n## Installation\n\nDependencies can be installed via `setup.py`:\n\n```sh\npython -m pip install .\n```\n\n### Testing\n\nTest specific dependencies can be installed via `setup.py` `testing` optional:\n\n```sh\npython -m pip install .[testing]\n```\n\nThen you can launch tests using [pytest](http://doc.pytest.org/en/latest/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/layabase/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://colin-b.github.io/layabase/", "keywords": "mongo,sqla,db,flask", "license": "MIT", "maintainer": "Colin Bounouar", "maintainer_email": "colin.bounouar.dev@gmail.com", "name": "layabase", "package_url": "https://pypi.org/project/layabase/", "platform": "Windows", "project_url": "https://pypi.org/project/layabase/", "project_urls": {"Changelog": "https://github.com/Colin-b/layabase/blob/master/CHANGELOG.md", "Download": "https://pypi.org/project/layabase/", "GitHub": "https://github.com/Colin-b/layabase", "Homepage": "https://colin-b.github.io/layabase/", "Issues": "https://github.com/Colin-b/layabase/issues"}, "release_url": "https://pypi.org/project/layabase/3.5.1/", "requires_dist": ["layaberr (==2.*)", "pymongo[tls] (==3.*) ; extra == 'mongo'", "iso8601 (==0.1.*) ; extra == 'mongo'", "marshmallow (==3.*) ; extra == 'sqlalchemy'", "SQLAlchemy (==1.*) ; extra == 'sqlalchemy'", "marshmallow-sqlalchemy (==0.21.*) ; extra == 'sqlalchemy'", "pytest-flask (==0.15.*) ; extra == 'testing'", "mongomock (==3.*) ; extra == 'testing'", "pytest-cov (==2.*) ; extra == 'testing'", "pymongo[tls] (==3.*) ; extra == 'testing'", "iso8601 (==0.1.*) ; extra == 'testing'", "marshmallow (==3.*) ; extra == 'testing'", "SQLAlchemy (==1.*) ; extra == 'testing'", "marshmallow-sqlalchemy (==0.21.*) ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "Database for layab", "version": "3.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Database for layab</h2>\n<p align=\"center\">\n<a href=\"https://pypi.org/project/layabase/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a3d1586ee82c9d9958c957119b88a039a7d7f4a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c61796162617365\"></a>\n<a href=\"https://travis-ci.org/Colin-b/layabase\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02f953eb4929afeca95da5d45ce7733ed3d2b09f/68747470733a2f2f6170692e7472617669732d63692e6f72672f436f6c696e2d622f6c617961626173652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://travis-ci.org/Colin-b/layabase\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0280f255d36847e3743058a68bedfb93626e993f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://travis-ci.org/Colin-b/layabase\" rel=\"nofollow\"><img alt=\"Number of tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbc77cf44f70dff7357eb0005ed9172ff0eca1db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f74657374732d373235207061737365642d626c7565\"></a>\n<a href=\"https://pypi.org/project/layabase/\" rel=\"nofollow\"><img alt=\"Number of downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/785e42ae4f81056391faf070a3694f090ff7f263/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6c61796162617365\"></a>\n</p>\n<p>Query your databases easily and transparently thanks to this module providing helpers on top of most brilliant python\ndatabase modules (<a href=\"https://docs.sqlalchemy.org\" rel=\"nofollow\">SQLAlchemy</a> and <a href=\"https://api.mongodb.com/python/current/\" rel=\"nofollow\">PyMongo</a>).</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">How to use</a></li>\n<li><a href=\"#technical\" rel=\"nofollow\">Technical documentation</a></li>\n</ul>\n<h2>Features</h2>\n<p>Features:</p>\n<ul>\n<li>Audit\n<ul>\n<li>Automatic audit support (if <a href=\"https://pypi.org/project/layabauth/\" rel=\"nofollow\"><code>layabauth</code></a> python module is used, user will be logged as well)</li>\n</ul>\n</li>\n<li>Rollback\n<ul>\n<li>Automatic rollback support (when history is activated)</li>\n</ul>\n</li>\n<li>History\n<ul>\n<li>Automatic history management</li>\n</ul>\n</li>\n<li>Validation\n<ul>\n<li>Enforce proper values are received (type, restricted choices, required fields)</li>\n</ul>\n</li>\n<li>Conversion\n<ul>\n<li>Converting JSON received data to appropriate database data type</li>\n<li>Converting Database data type to JSON</li>\n</ul>\n</li>\n<li>Health check</li>\n<li>Smart queries\n<ul>\n<li>HTTP query parameters are extracted and converted from HTTP query arguments\n<ul>\n<li>Special parameter: order_by (<strong>Feature not available for mongo</strong>)</li>\n<li>Special parameter: limit</li>\n<li>Special parameter: offset</li>\n</ul>\n</li>\n<li>Query on multiple equality via <code>field=value1&amp;field=value2</code></li>\n<li>Query on excluded intervals via <code>field=&gt;value1&amp;field=&lt;value2</code></li>\n<li>Query on included intervals via <code>field=&gt;=value1&amp;field=&lt;=value2</code></li>\n<li>Query on restricted values via <code>field=!=value1&amp;field=!=value2</code> (<strong>Feature not yet available</strong>)</li>\n<li>Query via a mix of all those features if needed as long as it make sense to you</li>\n<li>Query regex thanks to <code>*</code> character via <code>field=v*lue</code> (<strong>Feature not yet available for mongo</strong>)</li>\n</ul>\n</li>\n</ul>\n<h2>Usage</h2>\n<p>You will define a class to help you with the manipulation of:</p>\n<ul>\n<li>A collection if this is a MongoDB you are connecting to.</li>\n<li>A table if this is a non-Mongo database you are connecting to.</li>\n</ul>\n<p>This class will describe:</p>\n<ul>\n<li>The document fields if this is a MongoDB you are connecting to.</li>\n<li>The table columns if this is a non-Mongo database you are connecting to.</li>\n</ul>\n<p>By providing this class to a layabase.CRUDController instance, you will automatically have all features described in the previous section.</p>\n<h2>CRUD Controller</h2>\n<p>layabase.CRUDController provides C.R.U.D. methods (and more, as listed in features) on a specified table or mongo collection.</p>\n<h3>Controller definition</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the class describing your table or collection as defined in Table or Collection sections afterwards</span>\n<span class=\"n\">table_or_collection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> \n\n<span class=\"n\">controller</span> <span class=\"o\">=</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span><span class=\"p\">(</span><span class=\"n\">table_or_collection</span><span class=\"p\">)</span>\n</pre>\n<h3>Controller features</h3>\n<h4>Retrieving data</h4>\n<p>You can retrieve a list of rows or documents described as dictionaries:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">all_rows_or_documents</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">({})</span>\n\n<span class=\"n\">filtered_rows_or_documents</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">({</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s1\">'value1'</span><span class=\"p\">})</span>\n</pre>\n<p>You can retrieve a single row or document described as dictionary:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">row_or_document</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">get_one</span><span class=\"p\">({</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s1\">'value1'</span><span class=\"p\">})</span>\n</pre>\n<h4>Inserting data</h4>\n<p>You can insert many rows or documents at once using dictionary representation:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">inserted_rows_or_documents</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">post_many</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'value1'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'key2'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'value2'</span><span class=\"p\">},</span>\n<span class=\"p\">])</span>\n</pre>\n<p>You can insert a single row or document using dictionary representation:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">inserted_row_or_document</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'value1'</span><span class=\"p\">})</span>\n</pre>\n<h4>Updating data</h4>\n<p>You can update many rows or documents at once using (partial) dictionary representation:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">updated_rows_or_documents</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">put_many</span><span class=\"p\">([{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'new value1'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'key2'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'new value2'</span><span class=\"p\">}])</span>\n</pre>\n<p>You can update a single row or document using (partial) dictionary representation:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">updated_row_or_document</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'new value1'</span><span class=\"p\">})</span>\n</pre>\n<h4>Removing data</h4>\n<p>You can remove a subset of rows or documents:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">nb_removed_rows_or_documents</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">({</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s1\">'key1'</span><span class=\"p\">})</span>\n</pre>\n<p>You can remove all rows or documents:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">nb_removed_rows_or_documents</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">({})</span>\n</pre>\n<h4>Retrieving table or collection mapping</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"c1\"># non mongo description = {'table': 'MyTable', 'key': 'key', 'value': 'value'}</span>\n<span class=\"c1\"># mongo description = {'table': 'MyCollection', 'key': 'key', 'value': 'value'}</span>\n<span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">get_model_description</span><span class=\"p\">()</span>\n</pre>\n<h4>Auditing</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n<span class=\"c1\"># This will be the controller as created in Controller definition section</span>\n<span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">CRUDController</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">all_audit_models_as_dict_list</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">get_audit</span><span class=\"p\">({})</span>\n\n<span class=\"n\">filtered_audit_models_as_dict_list</span> <span class=\"o\">=</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">get_audit</span><span class=\"p\">({</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s1\">'value1'</span><span class=\"p\">})</span>\n</pre>\n<h2>Link to a database</h2>\n<h3>Link to a Mongo database</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n\n<span class=\"c1\"># Should be a list of CRUDController inherited classes</span>\n<span class=\"n\">my_controllers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"mongodb://host:port/server_name\"</span><span class=\"p\">,</span> <span class=\"n\">my_controllers</span><span class=\"p\">)</span>\n</pre>\n<h3>Link to a Mongo in-memory database</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n\n<span class=\"c1\"># Should be a list of CRUDController inherited classes</span>\n<span class=\"n\">my_controllers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"mongomock\"</span><span class=\"p\">,</span> <span class=\"n\">my_controllers</span><span class=\"p\">)</span>\n</pre>\n<h3>Link to a non Mongo database</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">layabase</span>\n\n\n<span class=\"c1\"># Should be a list of CRUDController inherited classes</span>\n<span class=\"n\">my_controllers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">layabase</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"your_connection_string\"</span><span class=\"p\">,</span> <span class=\"n\">my_controllers</span><span class=\"p\">)</span>\n</pre>\n<h2>Relational databases (non-Mongo)</h2>\n<p><a href=\"https://docs.sqlalchemy.org\" rel=\"nofollow\">SQLAlchemy</a> is the underlying framework used to manipulate relational databases.</p>\n<p>To create a representation of a table you will need to create a <a href=\"https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/mixins.html#declarative-mixins\" rel=\"nofollow\">Mixin</a>.</p>\n<h3>Table</h3>\n<p>You can add extra information to a column thanks to the info parameter.</p>\n<p>If the field should be required on queries:</p>\n<pre><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'marshmallow'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"required_on_query\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}}</span>\n</pre>\n<p>If <code>*</code> character in queries values should be interpreted as any characters:</p>\n<pre><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'marshmallow'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"interpret_star_character\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}}</span>\n</pre>\n<p>If the field can be queried with comparison signs such as &gt;, &lt;, &gt;=, &lt;=:</p>\n<pre><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'marshmallow'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"allow_comparison_signs\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}}</span>\n</pre>\n<p>When querying, provide a single value of a list of values.</p>\n<p>if provided in <code>order_by</code> parameter, it will be considered as ascending order, add <code>desc</code> at the end of the value to explicitly order by in descending order.</p>\n<p>If the field allow comparison signs (<code>allow_comparison_signs</code>), you can add <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code> in front of the value.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">String</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTable</span><span class=\"p\">:</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_table\"</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n</pre>\n<h2>MongoDB (non-relational)</h2>\n<p><a href=\"https://api.mongodb.com/python/current/\" rel=\"nofollow\">PyMongo</a> is the underlying framework used to manipulate MongoDB.</p>\n<p>To create a representation of a collection you will need to create a Mixin class.</p>\n<p>To link your model to the underlying collection, you will need to provide a connection string.</p>\n<h3>Collection</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">layabase.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCollection</span><span class=\"p\">:</span>\n    <span class=\"n\">__collection_name__</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_collection\"</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">is_primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">dict_value</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n</pre>\n<h5>String fields</h5>\n<p>Fields containing string can be described using layabase.mongo.Column</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">layabase.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCollection</span><span class=\"p\">:</span>\n    <span class=\"n\">__collection_name__</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_collection\"</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">()</span>\n</pre>\n<p>As string is considered as the default field type, not providing the type explicitly when creating a column is valid.</p>\n<p>The following parameters can also be provided when creating a column of string type:</p>\n<table>\n    <tr><th>\n        </th><td><em>Description</em></td>\n        <td><em>Default value</em></td>\n    \n    </tr><tr>\n        <td><strong>choices</strong></td>\n        <td>Restrict valid values. Should be a list of string or a function (without parameters) returning a list of string.</td>\n        <td>None (unrestricted)</td>\n    </tr>\n    <tr>\n        <td><strong>default_value</strong></td>\n        <td>Default field value returned to the client if field is not set. Should be a string or a function (with dictionary as parameter) returning a string.</td>\n        <td>None</td>\n    </tr>\n    <tr>\n        <td><strong>description</strong></td>\n        <td>Field description used in OpenAPI definition and in error messages. Should be a string value.</td>\n        <td>None</td>\n    </tr>\n    <tr>\n        <td><strong>index_type</strong></td>\n        <td>If and how this field should be indexed. Value should be one of IndexType enum.</td>\n        <td>None (not indexed)</td>\n    </tr>\n    <tr>\n        <td><strong>allow_none_as_filter</strong></td>\n        <td>If None value should be kept in queries (GET/DELETE). Should be a boolean value.</td>\n        <td>False (remove None from queries)</td>\n    </tr>\n    <tr>\n        <td><strong>is_primary_key</strong></td>\n        <td>If this field value is not allowed to be modified after insert. Should be a boolean value.</td>\n        <td>False (field value can always be modified)</td>\n    </tr>\n    <tr>\n        <td><strong>is_nullable</strong></td>\n        <td>If field value is optional. Should be a boolean value. Note that it is not allowed to force False if field has a default value.</td>\n        <td>\n        Default to True if field is not a primary key.\n        Default to True if field has a default value.\n        Otherwise default to False.</td>\n    </tr>\n    <tr>\n        <td><strong>is_required</strong></td>\n        <td>If field value must be specified in client requests. Use it to avoid heavy requests. Should be a boolean value.</td>\n        <td>False (optional)</td>\n    </tr>\n    <tr>\n        <td><strong>min_length</strong></td>\n        <td>Minimum value length.</td>\n        <td>None (no minimum length)</td>\n    </tr>\n    <tr>\n        <td><strong>max_length</strong></td>\n        <td>Maximum value length.</td>\n        <td>None (no maximum length)</td>\n    </tr>\n    <tr>\n        <td><strong>allow_comparison_signs</strong></td>\n        <td>If field value should be interpreted to extract &gt;, &gt;=, &lt;, &lt;= prefix.</td>\n        <td>False (value is kept as provided for equlity comparison)</td>\n    </tr>\n</table>\n<h5>Dictionary fields</h5>\n<p>Fields containing a dictionary can be described using layabase.mongo.DictColumn</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">layabase.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">DictColumn</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCollection</span><span class=\"p\">:</span>\n    <span class=\"n\">__collection_name__</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_collection\"</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">DictColumn</span><span class=\"p\">()</span>\n</pre>\n<h5>List fields</h5>\n<p>Fields containing a list can be described using layabase.mongo.ListColumn</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">layabase.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">ListColumn</span><span class=\"p\">,</span> <span class=\"n\">Column</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCollection</span><span class=\"p\">:</span>\n    <span class=\"n\">__collection_name__</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_collection\"</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">ListColumn</span><span class=\"p\">(</span><span class=\"n\">Column</span><span class=\"p\">())</span>\n</pre>\n<h2>How to install</h2>\n<ol>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">python 3.6+</a> must be installed</li>\n<li>Use pip to install module:</li>\n</ol>\n<pre>python -m pip install layabase\n</pre>\n<p>Note that depending on what you want to connect to, you will have to use a different module name than layabase:</p>\n<ul>\n<li>Mongo database: layabase[mongo]</li>\n<li>Mongo in-memory database: layabase mongomock</li>\n<li>Other database: layabase[sqlalchemy]</li>\n</ul>\n<h2>Technical</h2>\n<ul>\n<li><a href=\"#developer-requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#developer-usage\" rel=\"nofollow\">Usage</a></li>\n</ul>\n<h2>Developer-Requirements</h2>\n<p>The module requires the following to run:</p>\n<ul>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">python 3.6+</a></li>\n</ul>\n<h2>Developer-Usage</h2>\n<h2>Installation</h2>\n<p>Dependencies can be installed via <code>setup.py</code>:</p>\n<pre>python -m pip install .\n</pre>\n<h3>Testing</h3>\n<p>Test specific dependencies can be installed via <code>setup.py</code> <code>testing</code> optional:</p>\n<pre>python -m pip install .<span class=\"o\">[</span>testing<span class=\"o\">]</span>\n</pre>\n<p>Then you can launch tests using <a href=\"http://doc.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>.</p>\n\n          </div>"}, "last_serial": 6543476, "releases": {"3.4.0": [{"comment_text": "", "digests": {"md5": "ba9c8f760c56f4190d911d2289e9b908", "sha256": "5066f63e23df27bc2d73e8f1b258e3e58f8a7d7d96c67889f0043f63d446435b"}, "downloads": -1, "filename": "layabase-3.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ba9c8f760c56f4190d911d2289e9b908", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40890, "upload_time": "2019-12-02T23:25:40", "upload_time_iso_8601": "2019-12-02T23:25:40.716321Z", "url": "https://files.pythonhosted.org/packages/01/56/4706ae5bc206e8f345a523f94c09635e451cf729bae6ac67e28aa94991ae/layabase-3.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c2cca79e5a5520a6e9146d18c9d1da2", "sha256": "e70262da7370afeb027228fc7cf031d4634078fe55b849bda714ac3bfbec13ee"}, "downloads": -1, "filename": "layabase-3.4.0.tar.gz", "has_sig": false, "md5_digest": "0c2cca79e5a5520a6e9146d18c9d1da2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37812, "upload_time": "2019-12-02T23:25:43", "upload_time_iso_8601": "2019-12-02T23:25:43.020404Z", "url": "https://files.pythonhosted.org/packages/cf/db/b331bf96385af35e4f9d726be5ca041668ab315b08bb801b6d871bc04d13/layabase-3.4.0.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "2056250487787ffbc16bf9dd4f23969b", "sha256": "de74f0e62a84f9b83a3b8c3997b6b3b3944ffabc9cbe0f938ed9a69e36239abb"}, "downloads": -1, "filename": "layabase-3.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2056250487787ffbc16bf9dd4f23969b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40934, "upload_time": "2020-01-07T16:05:44", "upload_time_iso_8601": "2020-01-07T16:05:44.956697Z", "url": "https://files.pythonhosted.org/packages/19/37/acd3b6caf1b414094797a5b8de6c3f0ee4186c6754deb8bd18741dd4fece/layabase-3.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7bbe64c5f681d7c7230ae2a03836379", "sha256": "5721dcfc68e15c0927f53f6e36e1a323dae2b0302b9aaa754c88188841902c89"}, "downloads": -1, "filename": "layabase-3.5.0.tar.gz", "has_sig": false, "md5_digest": "a7bbe64c5f681d7c7230ae2a03836379", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37885, "upload_time": "2020-01-07T16:05:46", "upload_time_iso_8601": "2020-01-07T16:05:46.251233Z", "url": "https://files.pythonhosted.org/packages/68/e9/64b161578c64fa8690da9b2cf575a40ec2e88939b2ccbb8ddeb651fcc7ff/layabase-3.5.0.tar.gz", "yanked": false}], "3.5.1": [{"comment_text": "", "digests": {"md5": "42052f4ed6327087bd80f256a0d4cd5b", "sha256": "3465f8a0860d61822db9f25bf154adfc5617aaafc0df6b389ac52ccaf7eab33d"}, "downloads": -1, "filename": "layabase-3.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "42052f4ed6327087bd80f256a0d4cd5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40939, "upload_time": "2020-01-30T13:27:54", "upload_time_iso_8601": "2020-01-30T13:27:54.311697Z", "url": "https://files.pythonhosted.org/packages/9c/fb/96e7d6523e0f6c2f0e3f6499b01e7e1344a72e8e3e64fd845ac6c170334a/layabase-3.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e0b48b49b3aee2fe7ff2f9daf725816", "sha256": "5efae810ae1da241c7df4a0bcd7bd2939b4331b3a86d6b284af82c6b936db9ba"}, "downloads": -1, "filename": "layabase-3.5.1.tar.gz", "has_sig": false, "md5_digest": "0e0b48b49b3aee2fe7ff2f9daf725816", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37894, "upload_time": "2020-01-30T13:27:55", "upload_time_iso_8601": "2020-01-30T13:27:55.822344Z", "url": "https://files.pythonhosted.org/packages/47/c5/df1fe05f94872cdd456cae804640336f4ed89eda535d3c275abb2ee3a03c/layabase-3.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42052f4ed6327087bd80f256a0d4cd5b", "sha256": "3465f8a0860d61822db9f25bf154adfc5617aaafc0df6b389ac52ccaf7eab33d"}, "downloads": -1, "filename": "layabase-3.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "42052f4ed6327087bd80f256a0d4cd5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40939, "upload_time": "2020-01-30T13:27:54", "upload_time_iso_8601": "2020-01-30T13:27:54.311697Z", "url": "https://files.pythonhosted.org/packages/9c/fb/96e7d6523e0f6c2f0e3f6499b01e7e1344a72e8e3e64fd845ac6c170334a/layabase-3.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e0b48b49b3aee2fe7ff2f9daf725816", "sha256": "5efae810ae1da241c7df4a0bcd7bd2939b4331b3a86d6b284af82c6b936db9ba"}, "downloads": -1, "filename": "layabase-3.5.1.tar.gz", "has_sig": false, "md5_digest": "0e0b48b49b3aee2fe7ff2f9daf725816", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37894, "upload_time": "2020-01-30T13:27:55", "upload_time_iso_8601": "2020-01-30T13:27:55.822344Z", "url": "https://files.pythonhosted.org/packages/47/c5/df1fe05f94872cdd456cae804640336f4ed89eda535d3c275abb2ee3a03c/layabase-3.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:41 2020"}