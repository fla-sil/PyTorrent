{"info": {"author": "Dan Kamins", "author_email": "dos@axonchisel.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Office/Business :: Financial", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Monitoring"], "description": "Ax\\_Metrics - \"BI Glue\" Business Intelligence middleware Python library\n=======================================================================\n\nOverview\n--------\n\nAx\\_Metrics is an Business Intelligence (BI) open source Python\nmiddleware library facilitating aggregation of metrics and KPIs from any\nsource and custom reporting for humans or other APIs.\n\nTarget Problem\n~~~~~~~~~~~~~~\n\n1. You have multiple systems of all scales generating metrics and logs.\n\n2. Your centralized or distributed Data Warehouse (DW) collects this\n   data, indexes it by time, and makes it available.\n\n3. You want fast, friendly, pretty, clean access to KPIs that will help\n   you grow your business.\n\n4. Most solutions are incompatible, insecure, expensive, or far too\n   complex.\n\n5. You have technical knowledge at least on the level of understanding\n   HTML, XML, YAML, etc.\n\nThe Solution: Ax\\_Metrics\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAx\\_Metrics is a library to empower BI initiatives. The *components\ndescribed below* work together to comprise a powerful hub for connecting\ndata, processing it, and getting it where it needs to be.\n\nMDefL\n^^^^^\n\nAx\\_Metrics **Metrics Definition Language** - Model your metrics and\nKPIs (Key Performance Indicators) with just a few lines of this\nYAML-based definition language, defining where and how they're located,\nindexed, and typed. *Some example metric sets (\"MetSets\") used by\nautomated tests: metset1.yml and metset-http.yml.*\n\nEMFetch\n^^^^^^^\n\nAx\\_Metrics **Extensible Metrics Fetch** - The EMFetch engine provides\nlow level access to raw time-indexed metrics data for the rest of\nAx\\_Metrics. Metrics described by your MDefL reference the EMFetch\nplugin used to access them. *Plugins like emf\\_http are available for\nuse, or extend them with your own Python code to easily integrate with\nany custom data source.*\n\nMQL\n^^^\n\nAx\\_Metrics **Metrics Query Language** - Create MQL queries in this\nYAML-based query language to slice, dice, time shift, forecast, smooth,\ncompare, and format your data into reports for humans or other APIs. *An\nexample query used by automated tests can be seen in mqe-query2.yml,\nwhile an even more complex query set containing multiple pre-defined\nqueries can be seen in queryset2.yml.*\n\nMQEngine\n^^^^^^^^\n\nAx\\_Metrics **Metrics Query Engine** - Embed MQEngine in your BI flow or\nplace it behind a web server to process MQL queries on demand, within\nany security/authorization layer and web app you already use. MQEngine\nis the Ax\\_Metrics core that processes any query you throw at it and\nyields data sets.\n\nEROut\n^^^^^\n\nAx\\_Metrics **Extensible Report Outputter** - ERout outputters present\ndata reports from MQEngine in many formats, for humans or further API\nconsumption. *Plugins like csv and geckoboard\\_numsec (for your 60\" LCD\ndashboard powered by `Geckoboard <http://www.geckoboard.com/>`__) are\navailable for use, or extend them with your own Python code to easily\nintegrate with other any data consumer, human or machine.*\n\nServant\n^^^^^^^\n\nAx\\_Metrics **Servant** - The high layer Servant is available to wrap\neverything up in a convenient package. This is the recommended\nintegration point for most Ax\\_Metrics use: *build a Servant around a\nServantConfig object, then construct ServantRequest objects and feed\nthem to the Servant. This is also the best place to start if you want to\ndig into the Ax\\_Metrics code itself, as it leads to all other pieces.\nSee test\\_servant.py for test code that invokes Servant.*\n\nAx\\_Metrics is *NOT...*\n~~~~~~~~~~~~~~~~~~~~~~~\n\nNOT a web service\n^^^^^^^^^^^^^^^^^\n\nAx\\_Metrics does NOT include any web services or APIs that run in the\nbackground or require hosting or IT/DevOps support. It is a software\nlibrary to utilize and integrate as you see fit. (Though it does include\nsome helper routines to make integrating with your own web environment\neasier.)\n\nNO persistence DW capabilities\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAx\\_Metrics fetches data dynamically and generates reports on demand.\nSome data may be cached for performance purposes, but this cache should\nbe considered a volatile implementation detail only. Your data is\nassumed to already persist in a queryable form.\n\nNOT a turnkey solution\n^^^^^^^^^^^^^^^^^^^^^^\n\nAx\\_Metrics requires custom integration into DW sources, custom\ndefinition of metrics and reports, and often customization of output\nformats. It is a powerful and time-saving support library for use in BI\ndata visualization projects, but it is not a magic bullet.\n\nNOT a visualizer or chart generator\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAx\\_Metrics is designed to be used *with* visualization and charting (or\nother) output systems. It is a middleware library that helps fetch,\nanalyze, and wrangle your data into a format ready to be visualized.\n\n\"Can't I can just use SQL instead?\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your data already exists in a relational database, then you already\nhave direct access to it. You can write SQL queries to generate various\nreports, but as you analyze more deeply, your queries will become\ncomplex, slow, and eventually impossible, requiring additional\nprocessing outside of your DB.\n\nReview various 3rd party charting packages and you'll see mostly\nsimplistic examples like \"sales per month by region\" which are easily\nqueryable from raw data. That's a great start, but it will only get your\nBI efforts so far.\n\nAx\\_Metrics treats raw time series data (such as might be stored and\nqueryable in a relational DB) as the *input* to deeper BI analysis. Read\non to see some examples of the types of reports it can produce. And in\naddition to higher level analysis, Ax\\_Metrics can also provide ties in\nto multiple DW sources as well as the foundation for your metrics\ndefinitions and queries, all written in the high-level user-friendly\nlanguages MDefL and MQL, allowing you to focus on your own personal\nbusiness metrics instead of reinventing the wheel.\n\nIn summary, you can use SQL (or anything else) to query raw time series\ndata, but when you layer Ax\\_Metrics on top of that, you add\nintelligence and move your data closer to more powerful and useful\nvisualization and analysis.\n\nExamples of Use\n---------------\n\nExample Metrics\n~~~~~~~~~~~~~~~\n\nAnything that can be measured numerically over some period of time is a\nvalid metric.\n\nExamples:\n\n-  new trials\n-  new sales\n-  new revenue\n-  invites sent\n-  invites read\n-  invites accepted\n-  web visitors\n-  web requests\n-  expenses\n-  app server errors\n\nExample Reports\n~~~~~~~~~~~~~~~\n\nOnce your metrics are defined and the EMFetch plugins integrated with\nyour data sources, a wide variety of reports can be easily built to view\nthat data. Much of the power of Ax\\_Metrics arises out of the rich time\nframe model and query language.\n\nExamples:\n\n-  amount per 5 minutes for the last 6 hours\n-  daily amount over past 30 days, compared to same 30 day period 1 year\n   ago *(e.g. visualized as multi-series (2) line chart)*\n-  amount in current calendar week to date, compared to previous week\n   and same week 1 year ago *(e.g. as multi-series (3) line chart)*\n-  amount in calendar month to date, compared to forecast amount *(e.g.\n   visualized as bullet chart)*\n-  amount in last completed calendar quarter, measured weekly with 30\n   day smoothing, compared to forecast amount, previous quarter, and\n   same quarter last 2 years *(e.g. visualized as multi-series (5) line\n   chart)*\n\nInstallation\n------------\n\nInstall with pip\n~~~~~~~~~~~~~~~~\n\n::\n\n    $ pip install ax_metrics\n\nMeta\n----\n\nStatus\n~~~~~~\n\nCreated 2014-11. Initial implementation released.\n\nRequirements\n~~~~~~~~~~~~\n\n-  Python 2.6+ (Python 3 is not supported at this time)\n-  A few small PyPi packages that should be installed automatically if\n   you use pip. (See setup.py for details)\n\nOfficial Links\n~~~~~~~~~~~~~~\n\nSource repository & issue tracker:\n\n-  https://github.com/axonchisel/ax\\_metrics\n\nLicense\n~~~~~~~\n\nThis open source software is licensed under the permissive `MIT\nlicense <http://choosealicense.com/licenses/mit/>`__. The full license\ntext can be found in LICENSE.txt within this repo.\n\nDevelopers\n~~~~~~~~~~\n\nInterested in digging in to the Ax\\_Metrics code and possibly\ncontributing? Here are some essential links:\n\n-  Developers Overview Guide - contributing, project structure, etc.\n-  https://github.com/axonchisel/ax\\_metrics - GitHub official page\n\nGenesis\n~~~~~~~\n\nThis project was inspired in late 2014 by a need to effectively digest\nand visualize large amounts of business metrics -- to measure, guide,\nchallenge, and inspire. The source code is cleaned and released under a\nliberal license in the hopes that others will find it useful and build\non it.\n\nHistory\n~~~~~~~\n\nVersion 0.9.2 (2015-01-08)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  Fix `#1 <https://github.com/axonchisel/ax_metrics/issues/1>`__\n   (Stepper time shifts ghosts incorrectly when range\\_val>1).\n-  More graceful installation (remove ref to nonexistent \\*.txt docs,\n   calmer notice when pandoc missing).\n\nVersion 0.9.1 (2014-12-08)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  First public release.\n\nVersion 0.0.0 (2014-11-07)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  Project created.\n\n--------------\n\nAx\\_Metrics - Copyright (c) 2014 Dan Kamins, AxonChisel.net", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/axonchisel/ax_metrics", "keywords": "business intelligence,BI,data,data warehouse,DW,BIDW,metrics,KPI,analytics,middleware,library,api,report,chart,dashboard", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Ax_Metrics", "package_url": "https://pypi.org/project/Ax_Metrics/", "platform": "Any", "project_url": "https://pypi.org/project/Ax_Metrics/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/axonchisel/ax_metrics"}, "release_url": "https://pypi.org/project/Ax_Metrics/0.9.2/", "requires_dist": null, "requires_python": null, "summary": "\"BI Glue\" Business Intelligence middleware library for aggregation of metrics/KPI from any source and custom reporting for humans or other APIs", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>Ax_Metrics is an Business Intelligence (BI) open source Python\nmiddleware library facilitating aggregation of metrics and KPIs from any\nsource and custom reporting for humans or other APIs.</p>\n<div id=\"target-problem\">\n<h3>Target Problem</h3>\n<ol>\n<li>You have multiple systems of all scales generating metrics and logs.</li>\n<li>Your centralized or distributed Data Warehouse (DW) collects this\ndata, indexes it by time, and makes it available.</li>\n<li>You want fast, friendly, pretty, clean access to KPIs that will help\nyou grow your business.</li>\n<li>Most solutions are incompatible, insecure, expensive, or far too\ncomplex.</li>\n<li>You have technical knowledge at least on the level of understanding\nHTML, XML, YAML, etc.</li>\n</ol>\n</div>\n<div id=\"the-solution-ax-metrics\">\n<h3>The Solution: Ax_Metrics</h3>\n<p>Ax_Metrics is a library to empower BI initiatives. The <em>components\ndescribed below</em> work together to comprise a powerful hub for connecting\ndata, processing it, and getting it where it needs to be.</p>\n<div id=\"mdefl\">\n<h4>MDefL</h4>\n<p>Ax_Metrics <strong>Metrics Definition Language</strong> - Model your metrics and\nKPIs (Key Performance Indicators) with just a few lines of this\nYAML-based definition language, defining where and how they\u2019re located,\nindexed, and typed. <em>Some example metric sets (\u201cMetSets\u201d) used by\nautomated tests: metset1.yml and metset-http.yml.</em></p>\n</div>\n<div id=\"emfetch\">\n<h4>EMFetch</h4>\n<p>Ax_Metrics <strong>Extensible Metrics Fetch</strong> - The EMFetch engine provides\nlow level access to raw time-indexed metrics data for the rest of\nAx_Metrics. Metrics described by your MDefL reference the EMFetch\nplugin used to access them. <em>Plugins like emf_http are available for\nuse, or extend them with your own Python code to easily integrate with\nany custom data source.</em></p>\n</div>\n<div id=\"mql\">\n<h4>MQL</h4>\n<p>Ax_Metrics <strong>Metrics Query Language</strong> - Create MQL queries in this\nYAML-based query language to slice, dice, time shift, forecast, smooth,\ncompare, and format your data into reports for humans or other APIs. <em>An\nexample query used by automated tests can be seen in mqe-query2.yml,\nwhile an even more complex query set containing multiple pre-defined\nqueries can be seen in queryset2.yml.</em></p>\n</div>\n<div id=\"mqengine\">\n<h4>MQEngine</h4>\n<p>Ax_Metrics <strong>Metrics Query Engine</strong> - Embed MQEngine in your BI flow or\nplace it behind a web server to process MQL queries on demand, within\nany security/authorization layer and web app you already use. MQEngine\nis the Ax_Metrics core that processes any query you throw at it and\nyields data sets.</p>\n</div>\n<div id=\"erout\">\n<h4>EROut</h4>\n<p>Ax_Metrics <strong>Extensible Report Outputter</strong> - ERout outputters present\ndata reports from MQEngine in many formats, for humans or further API\nconsumption. <em>Plugins like csv and geckoboard_numsec (for your 60\u201d LCD\ndashboard powered by `Geckoboard &lt;http://www.geckoboard.com/&gt;`__) are\navailable for use, or extend them with your own Python code to easily\nintegrate with other any data consumer, human or machine.</em></p>\n</div>\n<div id=\"servant\">\n<h4>Servant</h4>\n<p>Ax_Metrics <strong>Servant</strong> - The high layer Servant is available to wrap\neverything up in a convenient package. This is the recommended\nintegration point for most Ax_Metrics use: <em>build a Servant around a\nServantConfig object, then construct ServantRequest objects and feed\nthem to the Servant. This is also the best place to start if you want to\ndig into the Ax_Metrics code itself, as it leads to all other pieces.\nSee test_servant.py for test code that invokes Servant.</em></p>\n</div>\n</div>\n<div id=\"ax-metrics-is-not\">\n<h3>Ax_Metrics is <em>NOT\u2026</em></h3>\n<div id=\"not-a-web-service\">\n<h4>NOT a web service</h4>\n<p>Ax_Metrics does NOT include any web services or APIs that run in the\nbackground or require hosting or IT/DevOps support. It is a software\nlibrary to utilize and integrate as you see fit. (Though it does include\nsome helper routines to make integrating with your own web environment\neasier.)</p>\n</div>\n<div id=\"no-persistence-dw-capabilities\">\n<h4>NO persistence DW capabilities</h4>\n<p>Ax_Metrics fetches data dynamically and generates reports on demand.\nSome data may be cached for performance purposes, but this cache should\nbe considered a volatile implementation detail only. Your data is\nassumed to already persist in a queryable form.</p>\n</div>\n<div id=\"not-a-turnkey-solution\">\n<h4>NOT a turnkey solution</h4>\n<p>Ax_Metrics requires custom integration into DW sources, custom\ndefinition of metrics and reports, and often customization of output\nformats. It is a powerful and time-saving support library for use in BI\ndata visualization projects, but it is not a magic bullet.</p>\n</div>\n<div id=\"not-a-visualizer-or-chart-generator\">\n<h4>NOT a visualizer or chart generator</h4>\n<p>Ax_Metrics is designed to be used <em>with</em> visualization and charting (or\nother) output systems. It is a middleware library that helps fetch,\nanalyze, and wrangle your data into a format ready to be visualized.</p>\n</div>\n</div>\n<div id=\"can-t-i-can-just-use-sql-instead\">\n<h3>\u201cCan\u2019t I can just use SQL instead?\u201d</h3>\n<p>If your data already exists in a relational database, then you already\nhave direct access to it. You can write SQL queries to generate various\nreports, but as you analyze more deeply, your queries will become\ncomplex, slow, and eventually impossible, requiring additional\nprocessing outside of your DB.</p>\n<p>Review various 3rd party charting packages and you\u2019ll see mostly\nsimplistic examples like \u201csales per month by region\u201d which are easily\nqueryable from raw data. That\u2019s a great start, but it will only get your\nBI efforts so far.</p>\n<p>Ax_Metrics treats raw time series data (such as might be stored and\nqueryable in a relational DB) as the <em>input</em> to deeper BI analysis. Read\non to see some examples of the types of reports it can produce. And in\naddition to higher level analysis, Ax_Metrics can also provide ties in\nto multiple DW sources as well as the foundation for your metrics\ndefinitions and queries, all written in the high-level user-friendly\nlanguages MDefL and MQL, allowing you to focus on your own personal\nbusiness metrics instead of reinventing the wheel.</p>\n<p>In summary, you can use SQL (or anything else) to query raw time series\ndata, but when you layer Ax_Metrics on top of that, you add\nintelligence and move your data closer to more powerful and useful\nvisualization and analysis.</p>\n</div>\n</div>\n<div id=\"examples-of-use\">\n<h2>Examples of Use</h2>\n<div id=\"example-metrics\">\n<h3>Example Metrics</h3>\n<p>Anything that can be measured numerically over some period of time is a\nvalid metric.</p>\n<p>Examples:</p>\n<ul>\n<li>new trials</li>\n<li>new sales</li>\n<li>new revenue</li>\n<li>invites sent</li>\n<li>invites read</li>\n<li>invites accepted</li>\n<li>web visitors</li>\n<li>web requests</li>\n<li>expenses</li>\n<li>app server errors</li>\n</ul>\n</div>\n<div id=\"example-reports\">\n<h3>Example Reports</h3>\n<p>Once your metrics are defined and the EMFetch plugins integrated with\nyour data sources, a wide variety of reports can be easily built to view\nthat data. Much of the power of Ax_Metrics arises out of the rich time\nframe model and query language.</p>\n<p>Examples:</p>\n<ul>\n<li>amount per 5 minutes for the last 6 hours</li>\n<li>daily amount over past 30 days, compared to same 30 day period 1 year\nago <em>(e.g. visualized as multi-series (2) line chart)</em></li>\n<li>amount in current calendar week to date, compared to previous week\nand same week 1 year ago <em>(e.g. as multi-series (3) line chart)</em></li>\n<li>amount in calendar month to date, compared to forecast amount <em>(e.g.\nvisualized as bullet chart)</em></li>\n<li>amount in last completed calendar quarter, measured weekly with 30\nday smoothing, compared to forecast amount, previous quarter, and\nsame quarter last 2 years <em>(e.g. visualized as multi-series (5) line\nchart)</em></li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<h2 id=\"install-with-pip\"><span class=\"section-subtitle\">Install with pip</span></h2>\n<pre>$ pip install ax_metrics\n</pre>\n</div>\n<div id=\"meta\">\n<h2>Meta</h2>\n<div id=\"status\">\n<h3>Status</h3>\n<p>Created 2014-11. Initial implementation released.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python 2.6+ (Python 3 is not supported at this time)</li>\n<li>A few small PyPi packages that should be installed automatically if\nyou use pip. (See setup.py for details)</li>\n</ul>\n</div>\n<div id=\"official-links\">\n<h3>Official Links</h3>\n<p>Source repository &amp; issue tracker:</p>\n<ul>\n<li><a href=\"https://github.com/axonchisel/ax_metrics\" rel=\"nofollow\">https://github.com/axonchisel/ax_metrics</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This open source software is licensed under the permissive <a href=\"http://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT\nlicense</a>. The full license\ntext can be found in LICENSE.txt within this repo.</p>\n</div>\n<div id=\"developers\">\n<h3>Developers</h3>\n<p>Interested in digging in to the Ax_Metrics code and possibly\ncontributing? Here are some essential links:</p>\n<ul>\n<li>Developers Overview Guide - contributing, project structure, etc.</li>\n<li><a href=\"https://github.com/axonchisel/ax_metrics\" rel=\"nofollow\">https://github.com/axonchisel/ax_metrics</a> - GitHub official page</li>\n</ul>\n</div>\n<div id=\"genesis\">\n<h3>Genesis</h3>\n<p>This project was inspired in late 2014 by a need to effectively digest\nand visualize large amounts of business metrics \u2013 to measure, guide,\nchallenge, and inspire. The source code is cleaned and released under a\nliberal license in the hopes that others will find it useful and build\non it.</p>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<div id=\"version-0-9-2-2015-01-08\">\n<h4>Version 0.9.2 (2015-01-08)</h4>\n<ul>\n<li>Fix <a href=\"https://github.com/axonchisel/ax_metrics/issues/1\" rel=\"nofollow\">#1</a>\n(Stepper time shifts ghosts incorrectly when range_val&gt;1).</li>\n<li>More graceful installation (remove ref to nonexistent *.txt docs,\ncalmer notice when pandoc missing).</li>\n</ul>\n</div>\n<div id=\"version-0-9-1-2014-12-08\">\n<h4>Version 0.9.1 (2014-12-08)</h4>\n<ul>\n<li>First public release.</li>\n</ul>\n</div>\n<div id=\"version-0-0-0-2014-11-07\">\n<h4>Version 0.0.0 (2014-11-07)</h4>\n<ul>\n<li>Project created.</li>\n</ul>\n<hr class=\"docutils\">\n<p>Ax_Metrics - Copyright (c) 2014 Dan Kamins, AxonChisel.net</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1376217, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "a01cc664c021995d9586c0c20bc05ba9", "sha256": "8e092c4f0ccd2de7670c42139a08f330e0bcefbd00906cbad5dcf36e11cd5c1c"}, "downloads": -1, "filename": "Ax_Metrics-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a01cc664c021995d9586c0c20bc05ba9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82508, "upload_time": "2014-12-09T05:47:47", "upload_time_iso_8601": "2014-12-09T05:47:47.744467Z", "url": "https://files.pythonhosted.org/packages/f5/af/0aeea33c57ac0ad67634dc7646e719820f82ebe350b7653e259e728a8cb0/Ax_Metrics-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "65d57302070f71d1f0e31fecd23479b8", "sha256": "3dc97d6d22b536fbb0a4ab4ea3b49e52a1590488aa79309087b149c22a1537b4"}, "downloads": -1, "filename": "Ax_Metrics-0.9.2.tar.gz", "has_sig": false, "md5_digest": "65d57302070f71d1f0e31fecd23479b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82917, "upload_time": "2015-01-09T01:17:26", "upload_time_iso_8601": "2015-01-09T01:17:26.441318Z", "url": "https://files.pythonhosted.org/packages/1f/3c/c534f2823de2ce77c2d03ffff9da94cc6cae0d190e91daf1c4689074d242/Ax_Metrics-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65d57302070f71d1f0e31fecd23479b8", "sha256": "3dc97d6d22b536fbb0a4ab4ea3b49e52a1590488aa79309087b149c22a1537b4"}, "downloads": -1, "filename": "Ax_Metrics-0.9.2.tar.gz", "has_sig": false, "md5_digest": "65d57302070f71d1f0e31fecd23479b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82917, "upload_time": "2015-01-09T01:17:26", "upload_time_iso_8601": "2015-01-09T01:17:26.441318Z", "url": "https://files.pythonhosted.org/packages/1f/3c/c534f2823de2ce77c2d03ffff9da94cc6cae0d190e91daf1c4689074d242/Ax_Metrics-0.9.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:30 2020"}