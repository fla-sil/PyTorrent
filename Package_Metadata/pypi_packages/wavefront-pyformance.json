{"info": {"author": "Wavefront by VMware", "author_email": "chitimba@wavefront.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# wavefront-pyformance\n\n[![image](https://img.shields.io/pypi/v/wavefront-pyformance.svg)](https://pypi.org/project/wavefront-pyformance/)\n[![image](https://img.shields.io/pypi/l/wavefront-pyformance.svg)](https://pypi.org/project/wavefront-pyformance/)\n[![image](https://img.shields.io/pypi/pyversions/wavefront-pyformance.svg)](https://pypi.org/project/wavefront-pyformance/)\n[![travis build status](https://travis-ci.com/wavefrontHQ/wavefront-pyformance.svg?branch=master)](https://travis-ci.com/wavefrontHQ/wavefront-pyformance)\n\n\nThis is a plugin for [pyformance](https://github.com/omergertel/pyformance) which adds Wavefront reporters (via proxy or direct ingestion) and an abstraction that supports tagging at the host level. It also includes support for Wavefront delta counters.\n\n## Requirements\nPython 2.7+ and Python 3.x are supported.\n\n```\npip install wavefront-pyformance\n```\n\n## Usage\n\n### Wavefront Reporter\n\nThe Wavefront Reporters support tagging at the host level. Tags passed to a reporter will be applied to every metric before being sent to Wavefront.\n\n#### Create Wavefront Reporter\nYou can create a `WavefrontProxyReporter` or `WavefrontDirectReporter` as follows:\n\n```Python\nimport pyformance\nfrom wavefront_pyformance import wavefront_reporter\n\nreg = pyformance.MetricsRegistry()\n\n# report metrics to a Wavefront proxy every 60s\nwf_proxy_reporter = wavefront_reporter.WavefrontProxyReporter(\n    host=host, port=2878, registry=reg,\n    source='wavefront-pyformance-example',\n    tags={'key1': 'val1', 'key2': 'val2'},\n    prefix='python.proxy.',\n    reporting_interval=60)\nwf_proxy_reporter.start()\n\n# report metrics directly to a Wavefront server every 60s\nwf_direct_reporter = wavefront_reporter.WavefrontDirectReporter(\n    server=server, token=token, registry=reg,\n    source='wavefront-pyformance-exmaple',\n    tags={'key1': 'val1', 'key2': 'val2'},\n    prefix='python.direct.',\n    reporting_interval=60)\nwf_direct_reporter.start()\n```\n#### Flush and stop Wavefront Reporter\n After create Wavefront Reporter, `start()` will make the reporter automatically reporting every `reporting_interval` seconds.\n Besides that, you can also call `report_now()` to perform reporting immediately.\n ```Python\n# Report immediately\nwf_reporter.report_now()\n\n# Stop Wavefront Reporter\nwf_reporter.stop()\n```\n\n### Delta Counter\n\nTo create a Wavefront delta counter:\n\n```Python\nimport pyformance\nfrom wavefront_pyformance import delta\n\nreg = pyformance.MetricsRegistry()\nd_0 = delta.delta_counter(reg, 'requests_delta')\nd_0.inc(10)\n```\n\nNote: Having the same metric name for any two types of metrics will result in only one time series at the server and thus cause collisions.\nIn general, all metric names should be different. In case you have metrics that you want to track as both a Counter and Delta Counter, consider adding a relevant suffix to one of the metrics to differentiate one metric name from another.\n\n### Wavefront Histogram\n\nTo create a [Wavefront Histogram](https://docs.wavefront.com/proxies_histograms.html):\n\n```Python\nimport pyformance\nfrom wavefront_pyformance import wavefront_histogram\n\nreg = pyformance.MetricsRegistry()\nh_0 = wavefront_histogram.wavefront_histogram(reg, 'requests_duration')\nh_0.add(10)\n```\n\n### Python Runtime Metrics\n\nTo enable Python runtime metrics reporting, set the `enable_runtime_metrics` flag to True:\n\n```Python\n    wf_proxy_reporter = wavefront_reporter.WavefrontProxyReporter(\n        host=host, port=2878, registry=reg,\n        source='runtime-metric-test',\n        tags={'global_tag1': 'val1', 'global_tag2': 'val2'},\n        prefix='python.proxy.',\n        enable_runtime_metrics=True).report_minute_distribution()\n\n    wf_direct_reporter = wavefront_reporter.WavefrontDirectReporter(\n        server=server, token=token, registry=reg,\n        source='runtime-metric-test',\n        tags={'global_tag1': 'val1', 'global_tag2': 'val2'},\n        prefix='python.direct.',\n        enable_runtime_metrics=True).report_minute_distribution()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wavefrontHQ/wavefront-pyformance", "keywords": "PyFormance,Wavefront,Wavefront Pyformance", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "wavefront-pyformance", "package_url": "https://pypi.org/project/wavefront-pyformance/", "platform": "", "project_url": "https://pypi.org/project/wavefront-pyformance/", "project_urls": {"Homepage": "https://github.com/wavefrontHQ/wavefront-pyformance"}, "release_url": "https://pypi.org/project/wavefront-pyformance/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Wavefront Pyformance Library", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>wavefront-pyformance</h1>\n<p><a href=\"https://pypi.org/project/wavefront-pyformance/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/037a59ed7bcf409ea7f6d6826d073d9160d9ef3c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7761766566726f6e742d7079666f726d616e63652e737667\"></a>\n<a href=\"https://pypi.org/project/wavefront-pyformance/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7076e4614c0f69cf5f430106e1f4d757eea4c395/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7761766566726f6e742d7079666f726d616e63652e737667\"></a>\n<a href=\"https://pypi.org/project/wavefront-pyformance/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/379f3cadb533d060b3b38f893c803dddb81df223/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7761766566726f6e742d7079666f726d616e63652e737667\"></a>\n<a href=\"https://travis-ci.com/wavefrontHQ/wavefront-pyformance\" rel=\"nofollow\"><img alt=\"travis build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58b86079a6930549a8f79742acf0f8aec2487ea9/68747470733a2f2f7472617669732d63692e636f6d2f7761766566726f6e7448512f7761766566726f6e742d7079666f726d616e63652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This is a plugin for <a href=\"https://github.com/omergertel/pyformance\" rel=\"nofollow\">pyformance</a> which adds Wavefront reporters (via proxy or direct ingestion) and an abstraction that supports tagging at the host level. It also includes support for Wavefront delta counters.</p>\n<h2>Requirements</h2>\n<p>Python 2.7+ and Python 3.x are supported.</p>\n<pre><code>pip install wavefront-pyformance\n</code></pre>\n<h2>Usage</h2>\n<h3>Wavefront Reporter</h3>\n<p>The Wavefront Reporters support tagging at the host level. Tags passed to a reporter will be applied to every metric before being sent to Wavefront.</p>\n<h4>Create Wavefront Reporter</h4>\n<p>You can create a <code>WavefrontProxyReporter</code> or <code>WavefrontDirectReporter</code> as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyformance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wavefront_pyformance</span> <span class=\"kn\">import</span> <span class=\"n\">wavefront_reporter</span>\n\n<span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">pyformance</span><span class=\"o\">.</span><span class=\"n\">MetricsRegistry</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># report metrics to a Wavefront proxy every 60s</span>\n<span class=\"n\">wf_proxy_reporter</span> <span class=\"o\">=</span> <span class=\"n\">wavefront_reporter</span><span class=\"o\">.</span><span class=\"n\">WavefrontProxyReporter</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">2878</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"o\">=</span><span class=\"n\">reg</span><span class=\"p\">,</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'wavefront-pyformance-example'</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"s1\">'val1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">},</span>\n    <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'python.proxy.'</span><span class=\"p\">,</span>\n    <span class=\"n\">reporting_interval</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">wf_proxy_reporter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># report metrics directly to a Wavefront server every 60s</span>\n<span class=\"n\">wf_direct_reporter</span> <span class=\"o\">=</span> <span class=\"n\">wavefront_reporter</span><span class=\"o\">.</span><span class=\"n\">WavefrontDirectReporter</span><span class=\"p\">(</span>\n    <span class=\"n\">server</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"o\">=</span><span class=\"n\">reg</span><span class=\"p\">,</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'wavefront-pyformance-exmaple'</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"s1\">'val1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">},</span>\n    <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'python.direct.'</span><span class=\"p\">,</span>\n    <span class=\"n\">reporting_interval</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">wf_direct_reporter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<h4>Flush and stop Wavefront Reporter</h4>\n<p>After create Wavefront Reporter, <code>start()</code> will make the reporter automatically reporting every <code>reporting_interval</code> seconds.\nBesides that, you can also call <code>report_now()</code> to perform reporting immediately.</p>\n<pre><span class=\"c1\"># Report immediately</span>\n<span class=\"n\">wf_reporter</span><span class=\"o\">.</span><span class=\"n\">report_now</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Stop Wavefront Reporter</span>\n<span class=\"n\">wf_reporter</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<h3>Delta Counter</h3>\n<p>To create a Wavefront delta counter:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyformance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wavefront_pyformance</span> <span class=\"kn\">import</span> <span class=\"n\">delta</span>\n\n<span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">pyformance</span><span class=\"o\">.</span><span class=\"n\">MetricsRegistry</span><span class=\"p\">()</span>\n<span class=\"n\">d_0</span> <span class=\"o\">=</span> <span class=\"n\">delta</span><span class=\"o\">.</span><span class=\"n\">delta_counter</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">,</span> <span class=\"s1\">'requests_delta'</span><span class=\"p\">)</span>\n<span class=\"n\">d_0</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>Note: Having the same metric name for any two types of metrics will result in only one time series at the server and thus cause collisions.\nIn general, all metric names should be different. In case you have metrics that you want to track as both a Counter and Delta Counter, consider adding a relevant suffix to one of the metrics to differentiate one metric name from another.</p>\n<h3>Wavefront Histogram</h3>\n<p>To create a <a href=\"https://docs.wavefront.com/proxies_histograms.html\" rel=\"nofollow\">Wavefront Histogram</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyformance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wavefront_pyformance</span> <span class=\"kn\">import</span> <span class=\"n\">wavefront_histogram</span>\n\n<span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">pyformance</span><span class=\"o\">.</span><span class=\"n\">MetricsRegistry</span><span class=\"p\">()</span>\n<span class=\"n\">h_0</span> <span class=\"o\">=</span> <span class=\"n\">wavefront_histogram</span><span class=\"o\">.</span><span class=\"n\">wavefront_histogram</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">,</span> <span class=\"s1\">'requests_duration'</span><span class=\"p\">)</span>\n<span class=\"n\">h_0</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<h3>Python Runtime Metrics</h3>\n<p>To enable Python runtime metrics reporting, set the <code>enable_runtime_metrics</code> flag to True:</p>\n<pre>    <span class=\"n\">wf_proxy_reporter</span> <span class=\"o\">=</span> <span class=\"n\">wavefront_reporter</span><span class=\"o\">.</span><span class=\"n\">WavefrontProxyReporter</span><span class=\"p\">(</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">2878</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"o\">=</span><span class=\"n\">reg</span><span class=\"p\">,</span>\n        <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'runtime-metric-test'</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'global_tag1'</span><span class=\"p\">:</span> <span class=\"s1\">'val1'</span><span class=\"p\">,</span> <span class=\"s1\">'global_tag2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">},</span>\n        <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'python.proxy.'</span><span class=\"p\">,</span>\n        <span class=\"n\">enable_runtime_metrics</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">report_minute_distribution</span><span class=\"p\">()</span>\n\n    <span class=\"n\">wf_direct_reporter</span> <span class=\"o\">=</span> <span class=\"n\">wavefront_reporter</span><span class=\"o\">.</span><span class=\"n\">WavefrontDirectReporter</span><span class=\"p\">(</span>\n        <span class=\"n\">server</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"o\">=</span><span class=\"n\">reg</span><span class=\"p\">,</span>\n        <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'runtime-metric-test'</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'global_tag1'</span><span class=\"p\">:</span> <span class=\"s1\">'val1'</span><span class=\"p\">,</span> <span class=\"s1\">'global_tag2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">},</span>\n        <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'python.direct.'</span><span class=\"p\">,</span>\n        <span class=\"n\">enable_runtime_metrics</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">report_minute_distribution</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6591529, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "3ff415c6a554e22f37be6fc97187bc8c", "sha256": "a0c4e86def15dbaff113d99e6d06a86791e355272ee8b8c05771ac34d67b0242"}, "downloads": -1, "filename": "wavefront_pyformance-0.9.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3ff415c6a554e22f37be6fc97187bc8c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6551, "upload_time": "2018-06-05T20:52:45", "upload_time_iso_8601": "2018-06-05T20:52:45.466294Z", "url": "https://files.pythonhosted.org/packages/3d/8e/bdf4961b5ea4b3456d9174b549fce704b6f279f55bbb004f15b0d47f7d78/wavefront_pyformance-0.9.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e16438fbc0d7aa8ee8b3d06685d7d69f", "sha256": "05a88ffbb279e1df33cc12bf2a04bdcd194a703dcca488cbf3c2b543764d4654"}, "downloads": -1, "filename": "wavefront_pyformance-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e16438fbc0d7aa8ee8b3d06685d7d69f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4717, "upload_time": "2018-06-05T20:52:46", "upload_time_iso_8601": "2018-06-05T20:52:46.559839Z", "url": "https://files.pythonhosted.org/packages/86/da/d666c014ac58d9aab909364d435b17ad10461b1dc7d7f5ab55820be6cf7a/wavefront_pyformance-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "5f3a4d0a5a2ec14c80d966b751ab26eb", "sha256": "df2eb6d399416fc94961418258cb6acb08dfec0921b755c749ad9f710b002cf9"}, "downloads": -1, "filename": "wavefront_pyformance-0.9.2-py2-none-any.whl", "has_sig": false, "md5_digest": "5f3a4d0a5a2ec14c80d966b751ab26eb", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6551, "upload_time": "2018-06-07T20:46:16", "upload_time_iso_8601": "2018-06-07T20:46:16.149472Z", "url": "https://files.pythonhosted.org/packages/76/46/393ab28be400c66b2833493d93b3790c09ecc02a1fc485df584f44eb5a20/wavefront_pyformance-0.9.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38d601fe0c04021d9cc5a2cd30fd9e1d", "sha256": "80312cc930c79c898b4de483897b3e5ef6c7ca4f86bdc99dfc1a679712bdf566"}, "downloads": -1, "filename": "wavefront_pyformance-0.9.2.tar.gz", "has_sig": false, "md5_digest": "38d601fe0c04021d9cc5a2cd30fd9e1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4725, "upload_time": "2018-06-07T20:46:17", "upload_time_iso_8601": "2018-06-07T20:46:17.410340Z", "url": "https://files.pythonhosted.org/packages/c9/cc/5d90b1a097ddd4b19b299708bb44e85de5d5f5fcc374d109eae947fd25be/wavefront_pyformance-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "137b55f00e8bc1b40d3558de7173f7d5", "sha256": "0cd7058acd21f6c90bccd1697e54f7422e253f57c2964da1769bf7ce9f9f6473"}, "downloads": -1, "filename": "wavefront_pyformance-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "137b55f00e8bc1b40d3558de7173f7d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11556, "upload_time": "2019-03-01T23:51:26", "upload_time_iso_8601": "2019-03-01T23:51:26.207590Z", "url": "https://files.pythonhosted.org/packages/2d/24/b43b2fb6160680f142fb7275f41db298a5fd3af386639b2de42094521ce4/wavefront_pyformance-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5f0dcfa0eaa90dfc15d5874a4779cf7", "sha256": "dadff82934d9390c0b9db06708988115058705922fb3ac9cf365781569479c89"}, "downloads": -1, "filename": "wavefront-pyformance-0.9.3.tar.gz", "has_sig": false, "md5_digest": "a5f0dcfa0eaa90dfc15d5874a4779cf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5881, "upload_time": "2019-03-01T23:51:27", "upload_time_iso_8601": "2019-03-01T23:51:27.711988Z", "url": "https://files.pythonhosted.org/packages/0a/9c/23ba05169757644ad223db4cf88ded6d40369c57b7f8ba5ce1da5b756e6c/wavefront-pyformance-0.9.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4802257b302f1999e955597ea14f2874", "sha256": "a2ddb7dec8a278881f06648f9af7c00660039ab0cfef3306dea102578b88c803"}, "downloads": -1, "filename": "wavefront-pyformance-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4802257b302f1999e955597ea14f2874", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6012, "upload_time": "2019-03-29T00:01:42", "upload_time_iso_8601": "2019-03-29T00:01:42.850313Z", "url": "https://files.pythonhosted.org/packages/f2/22/8f4337801f159170b1ac973a436ccf487d57a71c7f82dfffef4b9e5094bc/wavefront-pyformance-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7c234308067d001cac3349f1d4f67881", "sha256": "f437bee3ac64895c49455c4bd5013a52709f8e866f6f46b070e6d1903c696aa9"}, "downloads": -1, "filename": "wavefront-pyformance-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7c234308067d001cac3349f1d4f67881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9149, "upload_time": "2020-02-07T22:46:31", "upload_time_iso_8601": "2020-02-07T22:46:31.666391Z", "url": "https://files.pythonhosted.org/packages/e2/19/81809aa8953ee3b75e822a8f89b63e62e31ceed4b73f7623ce45cf2ac8d5/wavefront-pyformance-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c234308067d001cac3349f1d4f67881", "sha256": "f437bee3ac64895c49455c4bd5013a52709f8e866f6f46b070e6d1903c696aa9"}, "downloads": -1, "filename": "wavefront-pyformance-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7c234308067d001cac3349f1d4f67881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9149, "upload_time": "2020-02-07T22:46:31", "upload_time_iso_8601": "2020-02-07T22:46:31.666391Z", "url": "https://files.pythonhosted.org/packages/e2/19/81809aa8953ee3b75e822a8f89b63e62e31ceed4b73f7623ce45cf2ac8d5/wavefront-pyformance-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:57 2020"}