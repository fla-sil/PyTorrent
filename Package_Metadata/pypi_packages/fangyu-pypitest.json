{"info": {"author": "Fangyu Wu", "author_email": "fywu85@gmail.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://github.com/ray-project/ray/raw/master/doc/source/images/ray_header_logo.png\n\n.. image:: https://travis-ci.com/ray-project/ray.svg?branch=master\n    :target: https://travis-ci.com/ray-project/ray\n\n.. image:: https://readthedocs.org/projects/ray/badge/?version=latest\n    :target: http://ray.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/pypi-0.7.1-blue.svg\n    :target: https://pypi.org/project/ray/\n\n|\n\n\n**Ray is a fast and simple framework for building and running distributed applications.**\n\nRay is packaged with the following libraries for accelerating machine learning workloads:\n\n- `Tune`_: Scalable Hyperparameter Tuning\n- `RLlib`_: Scalable Reinforcement Learning\n- `Distributed Training <https://ray.readthedocs.io/en/latest/distributed_training.html>`__\n\nInstall Ray with: ``pip install ray``. For nightly wheels, see the `Installation page <https://ray.readthedocs.io/en/latest/installation.html>`__.\n\nQuick Start\n-----------\n\nExecute Python functions in parallel.\n\n.. code-block:: python\n\n    import ray\n    ray.init()\n\n    @ray.remote\n    def f(x):\n        return x * x\n\n    futures = [f.remote(i) for i in range(4)]\n    print(ray.get(futures))\n\nTo use Ray's actor model:\n\n.. code-block:: python\n\n\n    import ray\n    ray.init()\n\n    @ray.remote\n    class Counter():\n        def __init__(self):\n            self.n = 0\n\n        def increment(self):\n            self.n += 1\n\n        def read(self):\n            return self.n\n\n    counters = [Counter.remote() for i in range(4)]\n    [c.increment.remote() for c in counters]\n    futures = [c.read.remote() for c in counters]\n    print(ray.get(futures))\n\n\nRay programs can run on a single machine, and can also seamlessly scale to large clusters. To execute the above Ray script in the cloud, just download `this configuration file <https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/aws/example-full.yaml>`__, and run:\n\n``ray submit [CLUSTER.YAML] example.py --start``\n\nRead more about `launching clusters <https://ray.readthedocs.io/en/latest/autoscaling.html>`_.\n\nTune Quick Start\n----------------\n\n.. image:: https://github.com/ray-project/ray/raw/master/doc/source/images/tune-wide.png\n\n`Tune`_ is a library for hyperparameter tuning at any scale.\n\n- Launch a multi-node distributed hyperparameter sweep in less than 10 lines of code.\n- Supports any deep learning framework, including PyTorch, TensorFlow, and Keras.\n- Visualize results with `TensorBoard <https://www.tensorflow.org/get_started/summaries_and_tensorboard>`__.\n- Choose among scalable SOTA algorithms such as `Population Based Training (PBT)`_, `Vizier's Median Stopping Rule`_, `HyperBand/ASHA`_.\n- Tune integrates with many optimization libraries such as `Facebook Ax <http://ax.dev>`_, `HyperOpt <https://github.com/hyperopt/hyperopt>`_, and `Bayesian Optimization <https://github.com/fmfn/BayesianOptimization>`_ and enables you to scale them transparently.\n\nTo run this example, you will need to install the following:\n\n.. code-block:: bash\n\n    $ pip install ray torch torchvision filelock\n\n\nThis example runs a parallel grid search to train a Convolutional Neural Network using PyTorch.\n\n.. code-block:: python\n\n\n    import torch.optim as optim\n    from ray import tune\n    from ray.tune.examples.mnist_pytorch import (\n        get_data_loaders, ConvNet, train, test)\n\n\n    def train_mnist(config):\n        train_loader, test_loader = get_data_loaders()\n        model = ConvNet()\n        optimizer = optim.SGD(model.parameters(), lr=config[\"lr\"])\n        for i in range(10):\n            train(model, optimizer, train_loader)\n            acc = test(model, test_loader)\n            tune.track.log(mean_accuracy=acc)\n\n\n    analysis = tune.run(\n        train_mnist, config={\"lr\": tune.grid_search([0.001, 0.01, 0.1])})\n\n    print(\"Best config: \", analysis.get_best_config(metric=\"mean_accuracy\"))\n\n    # Get a dataframe for analyzing trial results.\n    df = analysis.dataframe()\n\nIf TensorBoard is installed, automatically visualize all trial results:\n\n.. code-block:: bash\n\n    tensorboard --logdir ~/ray_results\n\n.. _`Tune`: https://ray.readthedocs.io/en/latest/tune.html\n.. _`Population Based Training (PBT)`: https://ray.readthedocs.io/en/latest/tune-schedulers.html#population-based-training-pbt\n.. _`Vizier's Median Stopping Rule`: https://ray.readthedocs.io/en/latest/tune-schedulers.html#median-stopping-rule\n.. _`HyperBand/ASHA`: https://ray.readthedocs.io/en/latest/tune-schedulers.html#asynchronous-hyperband\n\nRLlib Quick Start\n-----------------\n\n.. image:: https://github.com/ray-project/ray/raw/master/doc/source/images/rllib-stack.png\n\n`RLlib`_ is an open-source library for reinforcement learning built on top of Ray that offers both high scalability and a unified API for a variety of applications.\n\n.. code-block:: bash\n\n  pip install tensorflow  # or tensorflow-gpu\n  pip install ray[rllib]  # also recommended: ray[debug]\n\n.. code-block:: python\n\n    import gym\n    from gym.spaces import Discrete, Box\n    from ray import tune\n\n    class SimpleCorridor(gym.Env):\n        def __init__(self, config):\n            self.end_pos = config[\"corridor_length\"]\n            self.cur_pos = 0\n            self.action_space = Discrete(2)\n            self.observation_space = Box(0.0, self.end_pos, shape=(1, ))\n\n        def reset(self):\n            self.cur_pos = 0\n            return [self.cur_pos]\n\n        def step(self, action):\n            if action == 0 and self.cur_pos > 0:\n                self.cur_pos -= 1\n            elif action == 1:\n                self.cur_pos += 1\n            done = self.cur_pos >= self.end_pos\n            return [self.cur_pos], 1 if done else 0, done, {}\n\n    tune.run(\n        \"PPO\",\n        config={\n            \"env\": SimpleCorridor,\n            \"num_workers\": 4,\n            \"env_config\": {\"corridor_length\": 5}})\n\n.. _`RLlib`: https://ray.readthedocs.io/en/latest/rllib.html\n\n\nMore Information\n----------------\n\n- `Documentation`_\n- `Tutorial`_\n- `Blog`_\n- `Ray paper`_\n- `Ray HotOS paper`_\n- `RLlib paper`_\n- `Tune paper`_\n\n.. _`Documentation`: http://ray.readthedocs.io/en/latest/index.html\n.. _`Tutorial`: https://github.com/ray-project/tutorial\n.. _`Blog`: https://ray-project.github.io/\n.. _`Ray paper`: https://arxiv.org/abs/1712.05889\n.. _`Ray HotOS paper`: https://arxiv.org/abs/1703.03924\n.. _`RLlib paper`: https://arxiv.org/abs/1712.09381\n.. _`Tune paper`: https://arxiv.org/abs/1807.05118\n\nGetting Involved\n----------------\n\n- `ray-dev@googlegroups.com`_: For discussions about development or any general\n  questions.\n- `StackOverflow`_: For questions about how to use Ray.\n- `GitHub Issues`_: For reporting bugs and feature requests.\n- `Pull Requests`_: For submitting code contributions.\n\n.. _`ray-dev@googlegroups.com`: https://groups.google.com/forum/#!forum/ray-dev\n.. _`GitHub Issues`: https://github.com/ray-project/ray/issues\n.. _`StackOverflow`: https://stackoverflow.com/questions/tagged/ray\n.. _`Pull Requests`: https://github.com/ray-project/ray/pulls", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ray-project/ray", "keywords": "ray distributed parallel machine-learning reinforcement-learning deep-learning python", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "fangyu-pypitest", "package_url": "https://pypi.org/project/fangyu-pypitest/", "platform": "", "project_url": "https://pypi.org/project/fangyu-pypitest/", "project_urls": {"Homepage": "https://github.com/ray-project/ray"}, "release_url": "https://pypi.org/project/fangyu-pypitest/0.8.0.dev4/", "requires_dist": null, "requires_python": "", "summary": "A system for parallel and distributed Python that unifies the ML ecosystem.", "version": "0.8.0.dev4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://github.com/ray-project/ray/raw/master/doc/source/images/ray_header_logo.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98ae79911b7a91517ba16ef2dc7dc3b972214820/68747470733a2f2f6769746875622e636f6d2f7261792d70726f6a6563742f7261792f7261772f6d61737465722f646f632f736f757263652f696d616765732f7261795f6865616465725f6c6f676f2e706e67\">\n<a href=\"https://travis-ci.com/ray-project/ray\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/ray-project/ray.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f91046734d7c48d50619ac4bc2507b3756e262f2/68747470733a2f2f7472617669732d63692e636f6d2f7261792d70726f6a6563742f7261792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://ray.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/ray/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9769719e9d96af523809aad5a124a2e0cb1219af/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7261792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/ray/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/pypi-0.7.1-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/781fa79942efa619234f371395a8c03872f102f1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970692d302e372e312d626c75652e737667\"></a>\n<div>\n<div><br></div>\n</div>\n<p><strong>Ray is a fast and simple framework for building and running distributed applications.</strong></p>\n<p>Ray is packaged with the following libraries for accelerating machine learning workloads:</p>\n<ul>\n<li><a href=\"https://ray.readthedocs.io/en/latest/tune.html\" rel=\"nofollow\">Tune</a>: Scalable Hyperparameter Tuning</li>\n<li><a href=\"https://ray.readthedocs.io/en/latest/rllib.html\" rel=\"nofollow\">RLlib</a>: Scalable Reinforcement Learning</li>\n<li><a href=\"https://ray.readthedocs.io/en/latest/distributed_training.html\" rel=\"nofollow\">Distributed Training</a></li>\n</ul>\n<p>Install Ray with: <tt>pip install ray</tt>. For nightly wheels, see the <a href=\"https://ray.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">Installation page</a>.</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>Execute Python functions in parallel.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n<span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@ray</span><span class=\"o\">.</span><span class=\"n\">remote</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n\n<span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">futures</span><span class=\"p\">))</span>\n</pre>\n<p>To use Ray\u2019s actor model:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n<span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@ray</span><span class=\"o\">.</span><span class=\"n\">remote</span>\n<span class=\"k\">class</span> <span class=\"nc\">Counter</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">increment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span>\n\n<span class=\"n\">counters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Counter</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">increment</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">counters</span><span class=\"p\">]</span>\n<span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">counters</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">futures</span><span class=\"p\">))</span>\n</pre>\n<p>Ray programs can run on a single machine, and can also seamlessly scale to large clusters. To execute the above Ray script in the cloud, just download <a href=\"https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/aws/example-full.yaml\" rel=\"nofollow\">this configuration file</a>, and run:</p>\n<p><tt>ray submit [CLUSTER.YAML] example.py <span class=\"pre\">--start</span></tt></p>\n<p>Read more about <a href=\"https://ray.readthedocs.io/en/latest/autoscaling.html\" rel=\"nofollow\">launching clusters</a>.</p>\n</div>\n<div id=\"tune-quick-start\">\n<h2>Tune Quick Start</h2>\n<img alt=\"https://github.com/ray-project/ray/raw/master/doc/source/images/tune-wide.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52262d810d75f8a6a8953f2d8428a5fcc50b77db/68747470733a2f2f6769746875622e636f6d2f7261792d70726f6a6563742f7261792f7261772f6d61737465722f646f632f736f757263652f696d616765732f74756e652d776964652e706e67\">\n<p><a href=\"https://ray.readthedocs.io/en/latest/tune.html\" rel=\"nofollow\">Tune</a> is a library for hyperparameter tuning at any scale.</p>\n<ul>\n<li>Launch a multi-node distributed hyperparameter sweep in less than 10 lines of code.</li>\n<li>Supports any deep learning framework, including PyTorch, TensorFlow, and Keras.</li>\n<li>Visualize results with <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" rel=\"nofollow\">TensorBoard</a>.</li>\n<li>Choose among scalable SOTA algorithms such as <a href=\"https://ray.readthedocs.io/en/latest/tune-schedulers.html#population-based-training-pbt\" rel=\"nofollow\">Population Based Training (PBT)</a>, <a href=\"https://ray.readthedocs.io/en/latest/tune-schedulers.html#median-stopping-rule\" rel=\"nofollow\">Vizier\u2019s Median Stopping Rule</a>, <a href=\"https://ray.readthedocs.io/en/latest/tune-schedulers.html#asynchronous-hyperband\" rel=\"nofollow\">HyperBand/ASHA</a>.</li>\n<li>Tune integrates with many optimization libraries such as <a href=\"http://ax.dev\" rel=\"nofollow\">Facebook Ax</a>, <a href=\"https://github.com/hyperopt/hyperopt\" rel=\"nofollow\">HyperOpt</a>, and <a href=\"https://github.com/fmfn/BayesianOptimization\" rel=\"nofollow\">Bayesian Optimization</a> and enables you to scale them transparently.</li>\n</ul>\n<p>To run this example, you will need to install the following:</p>\n<pre>$ pip install ray torch torchvision filelock\n</pre>\n<p>This example runs a parallel grid search to train a Convolutional Neural Network using PyTorch.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch.optim</span> <span class=\"k\">as</span> <span class=\"nn\">optim</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ray</span> <span class=\"kn\">import</span> <span class=\"n\">tune</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ray.tune.examples.mnist_pytorch</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">get_data_loaders</span><span class=\"p\">,</span> <span class=\"n\">ConvNet</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">train_mnist</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">):</span>\n    <span class=\"n\">train_loader</span><span class=\"p\">,</span> <span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">get_data_loaders</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ConvNet</span><span class=\"p\">()</span>\n    <span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">\"lr\"</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">train_loader</span><span class=\"p\">)</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">test_loader</span><span class=\"p\">)</span>\n        <span class=\"n\">tune</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">mean_accuracy</span><span class=\"o\">=</span><span class=\"n\">acc</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">analysis</span> <span class=\"o\">=</span> <span class=\"n\">tune</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"n\">train_mnist</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"lr\"</span><span class=\"p\">:</span> <span class=\"n\">tune</span><span class=\"o\">.</span><span class=\"n\">grid_search</span><span class=\"p\">([</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Best config: \"</span><span class=\"p\">,</span> <span class=\"n\">analysis</span><span class=\"o\">.</span><span class=\"n\">get_best_config</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s2\">\"mean_accuracy\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Get a dataframe for analyzing trial results.</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">analysis</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">()</span>\n</pre>\n<p>If TensorBoard is installed, automatically visualize all trial results:</p>\n<pre>tensorboard --logdir ~/ray_results\n</pre>\n</div>\n<div id=\"rllib-quick-start\">\n<h2>RLlib Quick Start</h2>\n<img alt=\"https://github.com/ray-project/ray/raw/master/doc/source/images/rllib-stack.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/267761bdd2f59bb979582f3956b131f75ecb1fdf/68747470733a2f2f6769746875622e636f6d2f7261792d70726f6a6563742f7261792f7261772f6d61737465722f646f632f736f757263652f696d616765732f726c6c69622d737461636b2e706e67\">\n<p><a href=\"https://ray.readthedocs.io/en/latest/rllib.html\" rel=\"nofollow\">RLlib</a> is an open-source library for reinforcement learning built on top of Ray that offers both high scalability and a unified API for a variety of applications.</p>\n<pre>pip install tensorflow  <span class=\"c1\"># or tensorflow-gpu\n</span>pip install ray<span class=\"o\">[</span>rllib<span class=\"o\">]</span>  <span class=\"c1\"># also recommended: ray[debug]</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gym</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gym.spaces</span> <span class=\"kn\">import</span> <span class=\"n\">Discrete</span><span class=\"p\">,</span> <span class=\"n\">Box</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ray</span> <span class=\"kn\">import</span> <span class=\"n\">tune</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleCorridor</span><span class=\"p\">(</span><span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">Env</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_pos</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">\"corridor_length\"</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">action_space</span> <span class=\"o\">=</span> <span class=\"n\">Discrete</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">observation_space</span> <span class=\"o\">=</span> <span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_pos</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">step</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">done</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_pos</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cur_pos</span><span class=\"p\">],</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">done</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">tune</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"PPO\"</span><span class=\"p\">,</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"env\"</span><span class=\"p\">:</span> <span class=\"n\">SimpleCorridor</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"num_workers\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"env_config\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"corridor_length\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}})</span>\n</pre>\n</div>\n<div id=\"more-information\">\n<h2>More Information</h2>\n<ul>\n<li><a href=\"http://ray.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"https://github.com/ray-project/tutorial\" rel=\"nofollow\">Tutorial</a></li>\n<li><a href=\"https://ray-project.github.io/\" rel=\"nofollow\">Blog</a></li>\n<li><a href=\"https://arxiv.org/abs/1712.05889\" rel=\"nofollow\">Ray paper</a></li>\n<li><a href=\"https://arxiv.org/abs/1703.03924\" rel=\"nofollow\">Ray HotOS paper</a></li>\n<li><a href=\"https://arxiv.org/abs/1712.09381\" rel=\"nofollow\">RLlib paper</a></li>\n<li><a href=\"https://arxiv.org/abs/1807.05118\" rel=\"nofollow\">Tune paper</a></li>\n</ul>\n</div>\n<div id=\"getting-involved\">\n<h2>Getting Involved</h2>\n<ul>\n<li><a href=\"https://groups.google.com/forum/#!forum/ray-dev\" rel=\"nofollow\">ray-dev@googlegroups.com</a>: For discussions about development or any general\nquestions.</li>\n<li><a href=\"https://stackoverflow.com/questions/tagged/ray\" rel=\"nofollow\">StackOverflow</a>: For questions about how to use Ray.</li>\n<li><a href=\"https://github.com/ray-project/ray/issues\" rel=\"nofollow\">GitHub Issues</a>: For reporting bugs and feature requests.</li>\n<li><a href=\"https://github.com/ray-project/ray/pulls\" rel=\"nofollow\">Pull Requests</a>: For submitting code contributions.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5789166, "releases": {"0.8.0.dev4": [{"comment_text": "", "digests": {"md5": "cdbb22803595d04f1b7e51159e1686cf", "sha256": "e02d907d8453ad759e3ce1cdadcb38b8e8ec11e76d6c7cfeaa719d86e47002c2"}, "downloads": -1, "filename": "fangyu-pypitest-0.8.0.dev4.tar.gz", "has_sig": false, "md5_digest": "cdbb22803595d04f1b7e51159e1686cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 673563, "upload_time": "2019-09-06T01:20:48", "upload_time_iso_8601": "2019-09-06T01:20:48.520328Z", "url": "https://files.pythonhosted.org/packages/54/2a/87d7e82e94d99d5f7639c7586e869064b8bafd72107d397778f1c9f7440b/fangyu-pypitest-0.8.0.dev4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cdbb22803595d04f1b7e51159e1686cf", "sha256": "e02d907d8453ad759e3ce1cdadcb38b8e8ec11e76d6c7cfeaa719d86e47002c2"}, "downloads": -1, "filename": "fangyu-pypitest-0.8.0.dev4.tar.gz", "has_sig": false, "md5_digest": "cdbb22803595d04f1b7e51159e1686cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 673563, "upload_time": "2019-09-06T01:20:48", "upload_time_iso_8601": "2019-09-06T01:20:48.520328Z", "url": "https://files.pythonhosted.org/packages/54/2a/87d7e82e94d99d5f7639c7586e869064b8bafd72107d397778f1c9f7440b/fangyu-pypitest-0.8.0.dev4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:46 2020"}