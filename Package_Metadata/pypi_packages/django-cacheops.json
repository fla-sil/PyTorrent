{"info": {"author": "Alexander Schepanovski", "author_email": "suor.web@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Cacheops  \n========\n\n|Gitter|\n\nA slick app that supports automatic or manual queryset caching and automatic\ngranular event-driven invalidation.\n\nIt uses `redis <http://redis.io/>`_ as backend for ORM cache and redis or\nfilesystem for simple time-invalidated one.\n\nAnd there is more to it:\n\n- decorators to cache any user function or view as a queryset or by time\n- extensions for django and jinja2 templates\n- transparent transaction support\n- dog-pile prevention mechanism\n- a couple of hacks to make django faster\n\n\nRequirements\n------------\n\n| Python 2.7 or 3.3+, Django 1.8+ and Redis 2.6+ (4.0+ recommended)\n\n\nInstallation\n------------\n\nUsing pip::\n\n    $ pip install django-cacheops\n\nOr you can get latest one from github::\n\n    $ git clone git://github.com/Suor/django-cacheops.git\n    $ pip install -e django-cacheops\n\n\nSetup\n-----\n\nAdd ``cacheops`` to your ``INSTALLED_APPS``.\n\nSetup redis connection and enable caching for desired models:\n\n.. code:: python\n\n    CACHEOPS_REDIS = {\n        'host': 'localhost', # redis-server is on same machine\n        'port': 6379,        # default redis port\n        'db': 1,             # SELECT non-default redis database\n                             # using separate redis db or redis instance\n                             # is highly recommended\n\n        'socket_timeout': 3,   # connection timeout in seconds, optional\n        'password': '...',     # optional\n        'unix_socket_path': '' # replaces host and port\n    }\n\n    # Alternatively the redis connection can be defined using a URL:\n    CACHEOPS_REDIS = \"redis://localhost:6379/1\"\n    # or\n    CACHEOPS_REDIS = \"unix://path/to/socket?db=1\"\n    # or with password (note a colon)\n    CACHEOPS_REDIS = \"redis://:password@localhost:6379/1\"\n\n    # If you want to use sentinel, specify this variable\n    CACHEOPS_SENTINEL = {\n        'locations': [('localhost', 26379)], # sentinel locations, required\n        'service_name': 'mymaster',          # sentinel service name, required\n        'socket_timeout': 0.1,               # connection timeout in seconds, optional\n        'db': 0                              # redis database, default: 0\n        ...                                  # everything else is passed to Sentinel()\n    }\n\n    # To use your own redis client class,\n    # should be compatible or subclass cacheops.redis.CacheopsRedis\n    CACHEOPS_CLIENT_CLASS = 'your.redis.ClientClass'\n\n    CACHEOPS = {\n        # Automatically cache any User.objects.get() calls for 15 minutes\n        # This also includes .first() and .last() calls,\n        # as well as request.user or post.author access,\n        # where Post.author is a foreign key to auth.User\n        'auth.user': {'ops': 'get', 'timeout': 60*15},\n\n        # Automatically cache all gets and queryset fetches\n        # to other django.contrib.auth models for an hour\n        'auth.*': {'ops': {'fetch', 'get'}, 'timeout': 60*60},\n\n        # Cache all queries to Permission\n        # 'all' is an alias for {'get', 'fetch', 'count', 'aggregate', 'exists'}\n        'auth.permission': {'ops': 'all', 'timeout': 60*60},\n\n        # Enable manual caching on all other models with default timeout of an hour\n        # Use Post.objects.cache().get(...)\n        #  or Tags.objects.filter(...).order_by(...).cache()\n        # to cache particular ORM request.\n        # Invalidation is still automatic\n        '*.*': {'ops': (), 'timeout': 60*60},\n\n        # And since ops is empty by default you can rewrite last line as:\n        '*.*': {'timeout': 60*60},\n\n        # NOTE: binding signals has its overhead, like preventing fast mass deletes,\n        #       you might want to only register whatever you cache and dependencies.\n\n        # Finally you can explicitely forbid even manual caching with:\n        'some_app.*': None,\n    }\n\nYou can configure default profile setting with ``CACHEOPS_DEFAULTS``. This way you can rewrite the config above:\n\n.. code:: python\n\n    CACHEOPS_DEFAULTS = {\n        'timeout': 60*60\n    }\n    CACHEOPS = {\n        'auth.user': {'ops': 'get', 'timeout': 60*15},\n        'auth.*': {'ops': ('fetch', 'get')},\n        'auth.permission': {'ops': 'all'},\n        '*.*': {},\n    }\n\nUsing ``'*.*'`` with non-empty ``ops`` is **not recommended**\nsince it will easily cache something you don't intent to or even now about like migrations tables.\nThe better approach will be restricting by app with ``'app_name.*'``.\n\nBesides ``ops`` and ``timeout`` options you can also use:\n\n``local_get: True``\n    To cache simple gets for this model in process local memory.\n    This is very fast, but is not invalidated in any way until process is restarted.\n    Still could be useful for extremely rarely changed things.\n\n``cache_on_save=True | 'field_name'``\n    To write an instance to cache upon save.\n    Cached instance will be retrieved on ``.get(field_name=...)`` request.\n    Setting to ``True`` causes caching by primary key.\n\nAdditionally, you can tell cacheops to degrade gracefully on redis fail with:\n\n.. code:: python\n\n    CACHEOPS_DEGRADE_ON_FAILURE = True\n\nThere is also a possibility to make all cacheops methods and decorators no-op, e.g. for testing:\n\n.. code:: python\n\n    from django.test import override_settings\n\n    @override_settings(CACHEOPS_ENABLED=False)\n    def test_something():\n        # ...\n        assert cond\n\n\nUsage\n-----\n\n| **Automatic caching**\n\nIt's automatic you just need to set it up.\n\n\n| **Manual caching**\n\nYou can force any queryset to use cache by calling it's ``.cache()`` method:\n\n.. code:: python\n\n    Article.objects.filter(tag=2).cache()\n\n\nHere you can specify which ops should be cached for queryset, for example, this code:\n\n.. code:: python\n\n    qs = Article.objects.filter(tag=2).cache(ops=['count'])\n    paginator = Paginator(objects, ipp)\n    articles = list(pager.page(page_num)) # hits database\n\n\nwill cache count call in ``Paginator`` but not later articles fetch.\nThere are five possible actions - ``get``, ``fetch``, ``count``, ``aggregate`` and ``exists``.\nYou can pass any subset of this ops to ``.cache()`` method even empty - to turn off caching.\nThere is, however, a shortcut for the latter:\n\n.. code:: python\n\n    qs = Article.objects.filter(visible=True).nocache()\n    qs1 = qs.filter(tag=2)       # hits database\n    qs2 = qs.filter(category=3)  # hits it once more\n\n\nIt is useful when you want to disable automatic caching on particular queryset.\n\nYou can also override default timeout for particular queryset with ``.cache(timeout=...)``.\n\n\n| **Function caching**\n\nYou can cache and invalidate result of a function the same way as a queryset.\nCached results of the next function will be invalidated on any ``Article`` change,\naddition or deletion:\n\n.. code:: python\n\n    from cacheops import cached_as\n\n    @cached_as(Article, timeout=120)\n    def article_stats():\n        return {\n            'tags': list(Article.objects.values('tag').annotate(Count('id')))\n            'categories': list(Article.objects.values('category').annotate(Count('id')))\n        }\n\n\nNote that we are using list on both querysets here, it's because we don't want\nto cache queryset objects but their results.\n\nAlso note that if you want to filter queryset based on arguments,\ne.g. to make invalidation more granular, you can use a local function:\n\n.. code:: python\n\n    def articles_block(category, count=5):\n        qs = Article.objects.filter(category=category)\n\n        @cached_as(qs, extra=count)\n        def _articles_block():\n            articles = list(qs.filter(photo=True)[:count])\n            if len(articles) < count:\n                articles += list(qs.filter(photo=False)[:count-len(articles)])\n            return articles\n\n        return _articles_block()\n\nWe added ``extra`` here to make different keys for calls with same ``category`` but different\n``count``. Cache key will also depend on function arguments, so we could just pass ``count`` as\nan argument to inner function. We also omitted ``timeout`` here, so a default for the model\nwill be used.\n\nAnother possibility is to make function cache invalidate on changes to any one of several models:\n\n.. code:: python\n\n    @cached_as(Article.objects.filter(public=True), Tag)\n    def article_stats():\n        return {...}\n\nAs you can see, we can mix querysets and models here.\n\n\n| **View caching**\n\nYou can also cache and invalidate a view as a queryset. This works mostly the same way as function\ncaching, but only path of the request parameter is used to construct cache key:\n\n.. code:: python\n\n    from cacheops import cached_view_as\n\n    @cached_view_as(News)\n    def news_index(request):\n        # ...\n        return HttpResponse(...)\n\nYou can pass ``timeout``, ``extra`` and several samples the same way as to ``@cached_as()``.\n\nClass based views can also be cached:\n\n.. code:: python\n\n    class NewsIndex(ListView):\n        model = News\n\n    news_index = cached_view_as(News)(NewsIndex.as_view())\n\n\nInvalidation\n------------\n\nCacheops uses both time and event-driven invalidation. The event-driven one\nlistens on model signals and invalidates appropriate caches on ``Model.save()``, ``.delete()``\nand m2m changes.\n\nInvalidation tries to be granular which means it won't invalidate a queryset\nthat cannot be influenced by added/updated/deleted object judging by query\nconditions. Most of the time this will do what you want, if it won't you can use\none of the following:\n\n.. code:: python\n\n    from cacheops import invalidate_obj, invalidate_model, invalidate_all\n\n    invalidate_obj(some_article)  # invalidates queries affected by some_article\n    invalidate_model(Article)     # invalidates all queries for model\n    invalidate_all()              # flush redis cache database\n\nAnd last there is ``invalidate`` command::\n\n    ./manage.py invalidate articles.Article.34  # same as invalidate_obj\n    ./manage.py invalidate articles.Article     # same as invalidate_model\n    ./manage.py invalidate articles   # invalidate all models in articles\n\nAnd the one that FLUSHES cacheops redis database::\n\n    ./manage.py invalidate all\n\nDon't use that if you share redis database for both cache and something else.\n\n\n| **Turning off and postponing invalidation**\n\nThere is also a way to turn off invalidation for a while:\n\n.. code:: python\n\n    from cacheops import no_invalidation\n\n    with no_invalidation:\n        # ... do some changes\n        obj.save()\n\nAlso works as decorator:\n\n.. code:: python\n\n    @no_invalidation\n    def some_work(...):\n        # ... do some changes\n        obj.save()\n\nCombined with ``try ... finally`` it could be used to postpone invalidation:\n\n.. code:: python\n\n    try:\n        with no_invalidation:\n            # ...\n    finally:\n        invalidate_obj(...)\n        # ... or\n        invalidate_model(...)\n\nPostponing invalidation can speed up batch jobs.\n\n\n| **Mass updates**\n\nNormally `qs.update(...)` doesn't emit any events and thus doesn't trigger invalidation.\nAnd there is no transparent and efficient way to do that: trying to act on conditions will\ninvalidate too much if update conditions are orthogonal to many queries conditions,\nand to act on specific objects we will need to fetch all of them,\nwhich `QuerySet.update()` users generally try to avoid.\n\nIn the case you actually want to perform the latter cacheops provides a shortcut:\n\n.. code:: python\n\n    qs.invalidated_update(...)\n\nNote that all the updated objects are fetched twice, prior and post the update.\n\n\nSimple time-invalidated cache\n-----------------------------\n\nTo cache result of a function call or a view for some time use:\n\n.. code:: python\n\n    from cacheops import cached, cached_view\n\n    @cached(timeout=number_of_seconds)\n    def top_articles(category):\n        return ... # Some costly queries\n\n    @cached_view(timeout=number_of_seconds)\n    def top_articles(request, category=None):\n        # Some costly queries\n        return HttpResponse(...)\n\n\n``@cached()`` will generate separate entry for each combination of decorated function and its\narguments. Also you can use ``extra`` same way as in ``@cached_as()``, most useful for nested\nfunctions:\n\n.. code:: python\n\n    @property\n    def articles_json(self):\n        @cached(timeout=10*60, extra=self.category_id)\n        def _articles_json():\n            ...\n            return json.dumps(...)\n\n        return _articles_json()\n\n\nYou can manually invalidate or update a result of a cached function:\n\n.. code:: python\n\n    top_articles.invalidate(some_category)\n    top_articles.key(some_category).set(new_value)\n\n\nTo invalidate cached view you can pass absolute uri instead of request:\n\n.. code:: python\n\n    top_articles.invalidate('http://example.com/page', some_category)\n\n\nCacheops also provides get/set primitives for simple cache:\n\n.. code:: python\n\n    from cacheops import cache\n\n    cache.set(cache_key, data, timeout=None)\n    cache.get(cache_key)\n    cache.delete(cache_key)\n\n\n``cache.get`` will raise ``CacheMiss`` if nothing is stored for given key:\n\n.. code:: python\n\n    from cacheops import cache, CacheMiss\n\n    try:\n        result = cache.get(key)\n    except CacheMiss:\n        ... # deal with it\n\n\nFile Cache\n----------\n\nFile based cache can be used the same way as simple time-invalidated one:\n\n.. code:: python\n\n    from cacheops import file_cache\n\n    @file_cache.cached(timeout=number_of_seconds)\n    def top_articles(category):\n        return ... # Some costly queries\n\n    @file_cache.cached_view(timeout=number_of_seconds)\n    def top_articles(request, category):\n        # Some costly queries\n        return HttpResponse(...)\n\n    # later, on appropriate event\n    top_articles.invalidate(some_category)\n    # or\n    top_articles.key(some_category).set(some_value)\n\n    # primitives\n    file_cache.set(cache_key, data, timeout=None)\n    file_cache.get(cache_key)\n    file_cache.delete(cache_key)\n\n\nIt has several improvements upon django built-in file cache, both about high load.\nFirst, it's safe against concurrent writes. Second, it's invalidation is done as separate task,\nyou'll need to call this from crontab for that to work::\n\n    /path/manage.py cleanfilecache\n    /path/manage.py cleanfilecache /path/to/non-default/cache/dir\n\n\nDjango templates integration\n----------------------------\n\nCacheops provides tags to cache template fragments. They mimic ``@cached_as``\nand ``@cached`` decorators, however, they require explicit naming of each fragment:\n\n.. code:: django\n\n    {% load cacheops %}\n\n    {% cached_as <queryset> <timeout> <fragment_name> [<extra1> <extra2> ...] %}\n        ... some template code ...\n    {% endcached_as %}\n\n    {% cached <timeout> <fragment_name> [<extra1> <extra2> ...] %}\n        ... some template code ...\n    {% endcached %}\n\nYou can use ``None`` for timeout in ``@cached_as`` to use it's default value for model.\n\nTo invalidate cached fragment use:\n\n.. code:: python\n\n    from cacheops import invalidate_fragment\n\n    invalidate_fragment(fragment_name, extra1, ...)\n\nIf you have more complex fragment caching needs, cacheops provides a helper to\nmake your own template tags which decorate a template fragment in a way\nanalogous to decorating a function with ``@cached`` or ``@cached_as``.\nThis is **experimental** feature for now.\n\nTo use it create ``myapp/templatetags/mycachetags.py`` and add something like this there:\n\n.. code:: python\n\n    from cacheops import cached_as, CacheopsLibrary\n\n    register = CacheopsLibrary()\n\n    @register.decorator_tag(takes_context=True)\n    def cache_menu(context, menu_name):\n        from django.utils import translation\n        from myapp.models import Flag, MenuItem\n\n        request = context.get('request')\n        if request and request.user.is_staff():\n            # Use noop decorator to bypass caching for staff\n            return lambda func: func\n\n        return cached_as(\n            # Invalidate cache if any menu item or a flag for menu changes\n            MenuItem,\n            Flag.objects.filter(name='menu'),\n            # Vary for menu name and language, also stamp it as \"menu\" to be safe\n            extra=(\"menu\", menu_name, translation.get_language()),\n            timeout=24 * 60 * 60\n        )\n\n``@decorator_tag`` here creates a template tag behaving the same as returned decorator\nupon wrapped template fragment. Resulting template tag could be used as follows:\n\n.. code:: django\n\n    {% load mycachetags %}\n\n    {% cache_menu \"top\" %}\n        ... the top menu template code ...\n    {% endcache_menu %}\n\n    ... some template code ..\n\n    {% cache_menu \"bottom\" %}\n        ... the bottom menu template code ...\n    {% endcache_menu %}\n\n\nJinja2 extension\n----------------\n\nAdd ``cacheops.jinja2.cache`` to your extensions and use:\n\n.. code:: jinja\n\n    {% cached_as <queryset> [, timeout=<timeout>] [, extra=<key addition>] %}\n        ... some template code ...\n    {% endcached_as %}\n\nor\n\n.. code:: jinja\n\n    {% cached [timeout=<timeout>] [, extra=<key addition>] %}\n        ...\n    {% endcached %}\n\nTags work the same way as corresponding decorators.\n\n\nTransactions\n------------\n\nCacheops transparently supports transactions. This is implemented by following simple rules:\n\n1. Once transaction is dirty (has changes) caching turns off. The reason is that the state of database at this point is only visible to current transaction and should not affect other users and vice versa.\n\n2. Any invalidating calls are scheduled to run on the outer commit of transaction.\n\n3. Savepoints and rollbacks are also handled appropriately.\n\nMind that simple and file cache don't turn itself off in transactions but work as usual.\n\n\nDog-pile effect prevention\n--------------------------\n\nThere is optional locking mechanism to prevent several threads or processes simultaneously performing same heavy task. It works with ``@cached_as()`` and querysets:\n\n.. code:: python\n\n    @cached_as(qs, lock=True)\n    def heavy_func(...):\n        # ...\n\n    for item in qs.cache(lock=True):\n        # ...\n\nIt is also possible to specify ``lock: True`` in ``CACHEOPS`` setting but that would probably be a waste. Locking has no overhead on cache hit though.\n\n\nMultiple database support\n-------------------------\n\nBy default cacheops considers query result is same for same query, not depending\non database queried. That could be changed with ``db_agnostic`` cache profile option:\n\n.. code:: python\n\n    CACHEOPS = {\n        'some.model': {'ops': 'get', 'db_agnostic': False, 'timeout': ...}\n    }\n\n\nSharing redis instance\n----------------------\n\nCacheops provides a way to share a redis instance by adding prefix to cache keys:\n\n.. code:: python\n\n    CACHEOPS_PREFIX = lambda query: ...\n    # or\n    CACHEOPS_PREFIX = 'some.module.cacheops_prefix'\n\nA most common usage would probably be a prefix by host name:\n\n.. code:: python\n\n    # get_request() returns current request saved to threadlocal by some middleware\n    cacheops_prefix = lambda _: get_request().get_host()\n\nA ``query`` object passed to callback also enables reflection on used databases and tables:\n\n.. code:: python\n\n    def cacheops_prefix(query):\n        query.dbs    # A list of databases queried\n        query.tables # A list of tables query is invalidated on\n\n        if set(query.tables) <= HELPER_TABLES:\n            return 'helper:'\n        if query.tables == ['blog_post']:\n            return 'blog:'\n\n**NOTE:** prefix is not used in simple and file cache. This might change in future cacheops.\n\n\nUsing memory limit\n------------------\n\nIf your cache never grows too large you may not bother. But if you do you have some options.\nCacheops stores cached data along with invalidation data,\nso you can't just set ``maxmemory`` and let redis evict at its will.\nFor now cacheops offers 2 imperfect strategies, which are considered **experimental**.\nSo be careful and consider `leaving feedback <https://github.com/Suor/django-cacheops/issues/143>`_.\n\nFirst strategy is configuring ``maxmemory-policy volatile-ttl``. Invalidation data is guaranteed to have higher TTL than referenced keys.\nRedis however doesn't guarantee perfect TTL eviction order, it selects several keys and removes\none with the least TTL, thus invalidator could be evicted before cache key it refers leaving it orphan and causing it survive next invalidation.\nYou can reduce this chance by increasing ``maxmemory-samples`` redis config option and by reducing cache timeout.\n\nSecond strategy, probably more efficient one is adding ``CACHEOPS_LRU = True`` to your settings and then using ``maxmemory-policy volatile-lru``.\nHowever, this makes invalidation structures persistent, they are still removed on associated events, but in absence of them can clutter redis database.\n\n\nKeeping stats\n-------------\n\nCacheops provides ``cache_read`` and ``cache_invalidated`` signals for you to keep track.\n\nCache read signal is emitted immediately after each cache lookup. Passed arguments are: ``sender`` - model class if queryset cache is fetched,\n``func`` - decorated function and ``hit`` - fetch success as boolean value.\n\nHere is a simple stats implementation:\n\n.. code:: python\n\n    from cacheops.signals import cache_read\n    from statsd.defaults.django import statsd\n\n    def stats_collector(sender, func, hit, **kwargs):\n        event = 'hit' if hit else 'miss'\n        statsd.incr('cacheops.%s' % event)\n\n    cache_read.connect(stats_collector)\n\nCache invalidation signal is emitted after object, model or global invalidation passing ``sender`` and ``obj_dict`` args. Note that during normal operation cacheops only uses object invalidation, calling it once for each model create/delete and twice for update: passing old and new object dictionary.\n\n\nCAVEATS\n-------\n\n1. Conditions other than ``__exact``, ``__in`` and ``__isnull=True`` don't make invalidation\n   more granular.\n2. Conditions on TextFields, FileFields and BinaryFields don't make it either.\n   One should not test on their equality anyway.\n3. Update of \"selected_related\" object does not invalidate cache for queryset.\n   Use ``.prefetch_related()`` instead.\n4. Mass updates don't trigger invalidation by default. But see ``.invalidated_update()``.\n5. Sliced queries are invalidated as non-sliced ones.\n6. Doesn't work with ``.raw()`` and other sql queries.\n7. Conditions on subqueries don't affect invalidation.\n8. Doesn't work right with multi-table inheritance.\n\nHere 1, 2, 3, 5 are part of the design compromise, trying to solve them will make\nthings complicated and slow. 7 can be implemented if needed, but it's\nprobably counter-productive since one can just break queries into simpler ones,\nwhich cache better. 4 is a deliberate choice, making it \"right\" will flush\ncache too much when update conditions are orthogonal to most queries conditions,\nsee, however, `.invalidated_update()`. 8 is postponed until it will gain\nmore interest or a champion willing to implement it emerges.\n\nAll unsupported things could still be used easily enough with the help of ``@cached_as()``.\n\n\nPerformance tips\n----------------\n\nHere come some performance tips to make cacheops and Django ORM faster.\n\n1. When you use cache you pickle and unpickle lots of django model instances, which could be slow. You can optimize django models serialization with `django-pickling <http://github.com/Suor/django-pickling>`_.\n\n2. Constructing querysets is rather slow in django, mainly because most of ``QuerySet`` methods clone self, then change it and return the clone. Original queryset is usually thrown away. Cacheops adds ``.inplace()`` method, which makes queryset mutating, preventing useless cloning::\n\n    items = Item.objects.inplace().filter(category=12).order_by('-date')[:20]\n\n   You can revert queryset to cloning state using ``.cloning()`` call.\n\n   Note that this is a micro-optimization technique. Using it is only desirable in the hottest places, not everywhere.\n\n3. Use template fragment caching when possible, it's way more fast because you don't need to generate anything. Also pickling/unpickling a string is much faster than a list of model instances.\n\n4. Run separate redis instance for cache with disabled `persistence <http://redis.io/topics/persistence>`_. You can manually call `SAVE <http://redis.io/commands/save>`_ or `BGSAVE <http://redis.io/commands/bgsave>`_ to stay hot upon server restart.\n\n5. If you filter queryset on many different or complex conditions cache could degrade performance (comparing to uncached db calls) in consequence of frequent cache misses. Disable cache in such cases entirely or on some heuristics which detect if this request would be probably hit. E.g. enable cache if only some primary fields are used in filter.\n\n   Caching querysets with large amount of filters also slows down all subsequent invalidation on that model. You can disable caching if more than some amount of fields is used in filter simultaneously.\n\n\nWriting a test\n--------------\n\nWriting a test for an issue you are experiencing can speed up its resolution a lot.\nHere is how you do that. I suppose you have some application code causing it.\n\n1. Make a fork.\n2. Install all from ``requirements-test.txt``.\n3. Ensure you can run tests with ``./run_tests.py``.\n4. Copy relevant models code to ``tests/models.py``.\n5. Go to ``tests/tests.py`` and paste code causing exception to ``IssueTests.test_{issue_number}``.\n6. Execute ``./run_tests.py {issue_number}`` and see it failing.\n7. Cut down model and test code until error disappears and make a step back.\n8. Commit changes and make a pull request.\n\n\nTODO\n----\n\n- faster .get() handling for simple cases such as get by pk/id, with simple key calculation\n- integrate previous one with prefetch_related()\n- shard cache between multiple redises\n- respect subqueries?\n- respect headers in @cached_view*?\n- group invalidate_obj() calls?\n- a postpone invalidation context manager/decorator?\n- fast mode: store cache in local memory, but check in with redis if it's valid\n- an interface for complex fields to extract exact on parts or transforms: ArrayField.len => field__len=?, ArrayField[0] => field__0=?, JSONField['some_key'] => field__some_key=?\n- custom cache eviction strategy in lua\n- cache a string directly (no pickle) for direct serving (custom key function?)\n\n\n.. |Build Status| image:: https://travis-ci.org/Suor/django-cacheops.svg?branch=master\n   :target: https://travis-ci.org/Suor/django-cacheops\n\n\n.. |Gitter| image:: https://badges.gitter.im/JoinChat.svg\n   :alt: Join the chat at https://gitter.im/Suor/django-cacheops\n   :target: https://gitter.im/Suor/django-cacheops?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Suor/django-cacheops", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-cacheops", "package_url": "https://pypi.org/project/django-cacheops/", "platform": "", "project_url": "https://pypi.org/project/django-cacheops/", "project_urls": {"Homepage": "http://github.com/Suor/django-cacheops"}, "release_url": "https://pypi.org/project/django-cacheops/4.2/", "requires_dist": null, "requires_python": "", "summary": "A slick ORM cache with automatic granular event-driven invalidation for Django.", "version": "4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitter.im/Suor/django-cacheops?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/Suor/django-cacheops\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80eb8731c1b22ceb3dc55aceefa7e2b8ee2de06c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e436861742e737667\"></a></p>\n<p>A slick app that supports automatic or manual queryset caching and automatic\ngranular event-driven invalidation.</p>\n<p>It uses <a href=\"http://redis.io/\" rel=\"nofollow\">redis</a> as backend for ORM cache and redis or\nfilesystem for simple time-invalidated one.</p>\n<p>And there is more to it:</p>\n<ul>\n<li>decorators to cache any user function or view as a queryset or by time</li>\n<li>extensions for django and jinja2 templates</li>\n<li>transparent transaction support</li>\n<li>dog-pile prevention mechanism</li>\n<li>a couple of hacks to make django faster</li>\n</ul>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<div>\n<div>Python 2.7 or 3.3+, Django 1.8+ and Redis 2.6+ (4.0+ recommended)</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using pip:</p>\n<pre>$ pip install django-cacheops\n</pre>\n<p>Or you can get latest one from github:</p>\n<pre>$ git clone git://github.com/Suor/django-cacheops.git\n$ pip install -e django-cacheops\n</pre>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Add <tt>cacheops</tt> to your <tt>INSTALLED_APPS</tt>.</p>\n<p>Setup redis connection and enable caching for desired models:</p>\n<pre><span class=\"n\">CACHEOPS_REDIS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"c1\"># redis-server is on same machine</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">6379</span><span class=\"p\">,</span>        <span class=\"c1\"># default redis port</span>\n    <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>             <span class=\"c1\"># SELECT non-default redis database</span>\n                         <span class=\"c1\"># using separate redis db or redis instance</span>\n                         <span class=\"c1\"># is highly recommended</span>\n\n    <span class=\"s1\">'socket_timeout'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>   <span class=\"c1\"># connection timeout in seconds, optional</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'...'</span><span class=\"p\">,</span>     <span class=\"c1\"># optional</span>\n    <span class=\"s1\">'unix_socket_path'</span><span class=\"p\">:</span> <span class=\"s1\">''</span> <span class=\"c1\"># replaces host and port</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Alternatively the redis connection can be defined using a URL:</span>\n<span class=\"n\">CACHEOPS_REDIS</span> <span class=\"o\">=</span> <span class=\"s2\">\"redis://localhost:6379/1\"</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">CACHEOPS_REDIS</span> <span class=\"o\">=</span> <span class=\"s2\">\"unix://path/to/socket?db=1\"</span>\n<span class=\"c1\"># or with password (note a colon)</span>\n<span class=\"n\">CACHEOPS_REDIS</span> <span class=\"o\">=</span> <span class=\"s2\">\"redis://:password@localhost:6379/1\"</span>\n\n<span class=\"c1\"># If you want to use sentinel, specify this variable</span>\n<span class=\"n\">CACHEOPS_SENTINEL</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'locations'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">26379</span><span class=\"p\">)],</span> <span class=\"c1\"># sentinel locations, required</span>\n    <span class=\"s1\">'service_name'</span><span class=\"p\">:</span> <span class=\"s1\">'mymaster'</span><span class=\"p\">,</span>          <span class=\"c1\"># sentinel service name, required</span>\n    <span class=\"s1\">'socket_timeout'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>               <span class=\"c1\"># connection timeout in seconds, optional</span>\n    <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span>                              <span class=\"c1\"># redis database, default: 0</span>\n    <span class=\"o\">...</span>                                  <span class=\"c1\"># everything else is passed to Sentinel()</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># To use your own redis client class,</span>\n<span class=\"c1\"># should be compatible or subclass cacheops.redis.CacheopsRedis</span>\n<span class=\"n\">CACHEOPS_CLIENT_CLASS</span> <span class=\"o\">=</span> <span class=\"s1\">'your.redis.ClientClass'</span>\n\n<span class=\"n\">CACHEOPS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Automatically cache any User.objects.get() calls for 15 minutes</span>\n    <span class=\"c1\"># This also includes .first() and .last() calls,</span>\n    <span class=\"c1\"># as well as request.user or post.author access,</span>\n    <span class=\"c1\"># where Post.author is a foreign key to auth.User</span>\n    <span class=\"s1\">'auth.user'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">15</span><span class=\"p\">},</span>\n\n    <span class=\"c1\"># Automatically cache all gets and queryset fetches</span>\n    <span class=\"c1\"># to other django.contrib.auth models for an hour</span>\n    <span class=\"s1\">'auth.*'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'fetch'</span><span class=\"p\">,</span> <span class=\"s1\">'get'</span><span class=\"p\">},</span> <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">60</span><span class=\"p\">},</span>\n\n    <span class=\"c1\"># Cache all queries to Permission</span>\n    <span class=\"c1\"># 'all' is an alias for {'get', 'fetch', 'count', 'aggregate', 'exists'}</span>\n    <span class=\"s1\">'auth.permission'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"s1\">'all'</span><span class=\"p\">,</span> <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">60</span><span class=\"p\">},</span>\n\n    <span class=\"c1\"># Enable manual caching on all other models with default timeout of an hour</span>\n    <span class=\"c1\"># Use Post.objects.cache().get(...)</span>\n    <span class=\"c1\">#  or Tags.objects.filter(...).order_by(...).cache()</span>\n    <span class=\"c1\"># to cache particular ORM request.</span>\n    <span class=\"c1\"># Invalidation is still automatic</span>\n    <span class=\"s1\">'*.*'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"p\">(),</span> <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">60</span><span class=\"p\">},</span>\n\n    <span class=\"c1\"># And since ops is empty by default you can rewrite last line as:</span>\n    <span class=\"s1\">'*.*'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">60</span><span class=\"p\">},</span>\n\n    <span class=\"c1\"># NOTE: binding signals has its overhead, like preventing fast mass deletes,</span>\n    <span class=\"c1\">#       you might want to only register whatever you cache and dependencies.</span>\n\n    <span class=\"c1\"># Finally you can explicitely forbid even manual caching with:</span>\n    <span class=\"s1\">'some_app.*'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can configure default profile setting with <tt>CACHEOPS_DEFAULTS</tt>. This way you can rewrite the config above:</p>\n<pre><span class=\"n\">CACHEOPS_DEFAULTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">60</span>\n<span class=\"p\">}</span>\n<span class=\"n\">CACHEOPS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'auth.user'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"o\">*</span><span class=\"mi\">15</span><span class=\"p\">},</span>\n    <span class=\"s1\">'auth.*'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'fetch'</span><span class=\"p\">,</span> <span class=\"s1\">'get'</span><span class=\"p\">)},</span>\n    <span class=\"s1\">'auth.permission'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"s1\">'all'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'*.*'</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Using <tt><span class=\"pre\">'*.*'</span></tt> with non-empty <tt>ops</tt> is <strong>not recommended</strong>\nsince it will easily cache something you don\u2019t intent to or even now about like migrations tables.\nThe better approach will be restricting by app with <tt><span class=\"pre\">'app_name.*'</span></tt>.</p>\n<p>Besides <tt>ops</tt> and <tt>timeout</tt> options you can also use:</p>\n<dl>\n<dt><tt>local_get: True</tt></dt>\n<dd>To cache simple gets for this model in process local memory.\nThis is very fast, but is not invalidated in any way until process is restarted.\nStill could be useful for extremely rarely changed things.</dd>\n<dt><tt>cache_on_save=True | 'field_name'</tt></dt>\n<dd>To write an instance to cache upon save.\nCached instance will be retrieved on <tt><span class=\"pre\">.get(field_name=...)</span></tt> request.\nSetting to <tt>True</tt> causes caching by primary key.</dd>\n</dl>\n<p>Additionally, you can tell cacheops to degrade gracefully on redis fail with:</p>\n<pre><span class=\"n\">CACHEOPS_DEGRADE_ON_FAILURE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>There is also a possibility to make all cacheops methods and decorators no-op, e.g. for testing:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">override_settings</span>\n\n<span class=\"nd\">@override_settings</span><span class=\"p\">(</span><span class=\"n\">CACHEOPS_ENABLED</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">assert</span> <span class=\"n\">cond</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div>\n<div><strong>Automatic caching</strong></div>\n</div>\n<p>It\u2019s automatic you just need to set it up.</p>\n<div>\n<div><strong>Manual caching</strong></div>\n</div>\n<p>You can force any queryset to use cache by calling it\u2019s <tt>.cache()</tt> method:</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">()</span>\n</pre>\n<p>Here you can specify which ops should be cached for queryset, for example, this code:</p>\n<pre><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'count'</span><span class=\"p\">])</span>\n<span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">ipp</span><span class=\"p\">)</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pager</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"n\">page_num</span><span class=\"p\">))</span> <span class=\"c1\"># hits database</span>\n</pre>\n<p>will cache count call in <tt>Paginator</tt> but not later articles fetch.\nThere are five possible actions - <tt>get</tt>, <tt>fetch</tt>, <tt>count</tt>, <tt>aggregate</tt> and <tt>exists</tt>.\nYou can pass any subset of this ops to <tt>.cache()</tt> method even empty - to turn off caching.\nThere is, however, a shortcut for the latter:</p>\n<pre><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nocache</span><span class=\"p\">()</span>\n<span class=\"n\">qs1</span> <span class=\"o\">=</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>       <span class=\"c1\"># hits database</span>\n<span class=\"n\">qs2</span> <span class=\"o\">=</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># hits it once more</span>\n</pre>\n<p>It is useful when you want to disable automatic caching on particular queryset.</p>\n<p>You can also override default timeout for particular queryset with <tt><span class=\"pre\">.cache(timeout=...)</span></tt>.</p>\n<div>\n<div><strong>Function caching</strong></div>\n</div>\n<p>You can cache and invalidate result of a function the same way as a queryset.\nCached results of the next function will be invalidated on any <tt>Article</tt> change,\naddition or deletion:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">cached_as</span>\n\n<span class=\"nd\">@cached_as</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">article_stats</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s1\">'tag'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)))</span>\n        <span class=\"s1\">'categories'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s1\">'category'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)))</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>Note that we are using list on both querysets here, it\u2019s because we don\u2019t want\nto cache queryset objects but their results.</p>\n<p>Also note that if you want to filter queryset based on arguments,\ne.g. to make invalidation more granular, you can use a local function:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">articles_block</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">category</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_as</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"n\">count</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_articles_block</span><span class=\"p\">():</span>\n        <span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">photo</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[:</span><span class=\"n\">count</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">:</span>\n            <span class=\"n\">articles</span> <span class=\"o\">+=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">photo</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[:</span><span class=\"n\">count</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">)])</span>\n        <span class=\"k\">return</span> <span class=\"n\">articles</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_articles_block</span><span class=\"p\">()</span>\n</pre>\n<p>We added <tt>extra</tt> here to make different keys for calls with same <tt>category</tt> but different\n<tt>count</tt>. Cache key will also depend on function arguments, so we could just pass <tt>count</tt> as\nan argument to inner function. We also omitted <tt>timeout</tt> here, so a default for the model\nwill be used.</p>\n<p>Another possibility is to make function cache invalidate on changes to any one of several models:</p>\n<pre><span class=\"nd\">@cached_as</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">public</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">Tag</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">article_stats</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n</pre>\n<p>As you can see, we can mix querysets and models here.</p>\n<div>\n<div><strong>View caching</strong></div>\n</div>\n<p>You can also cache and invalidate a view as a queryset. This works mostly the same way as function\ncaching, but only path of the request parameter is used to construct cache key:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">cached_view_as</span>\n\n<span class=\"nd\">@cached_view_as</span><span class=\"p\">(</span><span class=\"n\">News</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">news_index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>You can pass <tt>timeout</tt>, <tt>extra</tt> and several samples the same way as to <tt>@cached_as()</tt>.</p>\n<p>Class based views can also be cached:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">NewsIndex</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">News</span>\n\n<span class=\"n\">news_index</span> <span class=\"o\">=</span> <span class=\"n\">cached_view_as</span><span class=\"p\">(</span><span class=\"n\">News</span><span class=\"p\">)(</span><span class=\"n\">NewsIndex</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"invalidation\">\n<h2>Invalidation</h2>\n<p>Cacheops uses both time and event-driven invalidation. The event-driven one\nlistens on model signals and invalidates appropriate caches on <tt>Model.save()</tt>, <tt>.delete()</tt>\nand m2m changes.</p>\n<p>Invalidation tries to be granular which means it won\u2019t invalidate a queryset\nthat cannot be influenced by added/updated/deleted object judging by query\nconditions. Most of the time this will do what you want, if it won\u2019t you can use\none of the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">invalidate_obj</span><span class=\"p\">,</span> <span class=\"n\">invalidate_model</span><span class=\"p\">,</span> <span class=\"n\">invalidate_all</span>\n\n<span class=\"n\">invalidate_obj</span><span class=\"p\">(</span><span class=\"n\">some_article</span><span class=\"p\">)</span>  <span class=\"c1\"># invalidates queries affected by some_article</span>\n<span class=\"n\">invalidate_model</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">)</span>     <span class=\"c1\"># invalidates all queries for model</span>\n<span class=\"n\">invalidate_all</span><span class=\"p\">()</span>              <span class=\"c1\"># flush redis cache database</span>\n</pre>\n<p>And last there is <tt>invalidate</tt> command:</p>\n<pre>./manage.py invalidate articles.Article.34  # same as invalidate_obj\n./manage.py invalidate articles.Article     # same as invalidate_model\n./manage.py invalidate articles   # invalidate all models in articles\n</pre>\n<p>And the one that FLUSHES cacheops redis database:</p>\n<pre>./manage.py invalidate all\n</pre>\n<p>Don\u2019t use that if you share redis database for both cache and something else.</p>\n<div>\n<div><strong>Turning off and postponing invalidation</strong></div>\n</div>\n<p>There is also a way to turn off invalidation for a while:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">no_invalidation</span>\n\n<span class=\"k\">with</span> <span class=\"n\">no_invalidation</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ... do some changes</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>Also works as decorator:</p>\n<pre><span class=\"nd\">@no_invalidation</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_work</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... do some changes</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>Combined with <tt>try ... finally</tt> it could be used to postpone invalidation:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">no_invalidation</span><span class=\"p\">:</span>\n        <span class=\"c1\"># ...</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">invalidate_obj</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... or</span>\n    <span class=\"n\">invalidate_model</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Postponing invalidation can speed up batch jobs.</p>\n<div>\n<div><strong>Mass updates</strong></div>\n</div>\n<p>Normally <cite>qs.update(\u2026)</cite> doesn\u2019t emit any events and thus doesn\u2019t trigger invalidation.\nAnd there is no transparent and efficient way to do that: trying to act on conditions will\ninvalidate too much if update conditions are orthogonal to many queries conditions,\nand to act on specific objects we will need to fetch all of them,\nwhich <cite>QuerySet.update()</cite> users generally try to avoid.</p>\n<p>In the case you actually want to perform the latter cacheops provides a shortcut:</p>\n<pre><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">invalidated_update</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Note that all the updated objects are fetched twice, prior and post the update.</p>\n</div>\n<div id=\"simple-time-invalidated-cache\">\n<h2>Simple time-invalidated cache</h2>\n<p>To cache result of a function call or a view for some time use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">cached</span><span class=\"p\">,</span> <span class=\"n\">cached_view</span>\n\n<span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">number_of_seconds</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">top_articles</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"o\">...</span> <span class=\"c1\"># Some costly queries</span>\n\n<span class=\"nd\">@cached_view</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">number_of_seconds</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">top_articles</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Some costly queries</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><tt>@cached()</tt> will generate separate entry for each combination of decorated function and its\narguments. Also you can use <tt>extra</tt> same way as in <tt>@cached_as()</tt>, most useful for nested\nfunctions:</p>\n<pre><span class=\"nd\">@property</span>\n<span class=\"k\">def</span> <span class=\"nf\">articles_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">category_id</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_articles_json</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_articles_json</span><span class=\"p\">()</span>\n</pre>\n<p>You can manually invalidate or update a result of a cached function:</p>\n<pre><span class=\"n\">top_articles</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"p\">(</span><span class=\"n\">some_category</span><span class=\"p\">)</span>\n<span class=\"n\">top_articles</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"n\">some_category</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">new_value</span><span class=\"p\">)</span>\n</pre>\n<p>To invalidate cached view you can pass absolute uri instead of request:</p>\n<pre><span class=\"n\">top_articles</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com/page'</span><span class=\"p\">,</span> <span class=\"n\">some_category</span><span class=\"p\">)</span>\n</pre>\n<p>Cacheops also provides get/set primitives for simple cache:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n</pre>\n<p><tt>cache.get</tt> will raise <tt>CacheMiss</tt> if nothing is stored for given key:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">CacheMiss</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">CacheMiss</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span> <span class=\"c1\"># deal with it</span>\n</pre>\n</div>\n<div id=\"file-cache\">\n<h2>File Cache</h2>\n<p>File based cache can be used the same way as simple time-invalidated one:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">file_cache</span>\n\n<span class=\"nd\">@file_cache</span><span class=\"o\">.</span><span class=\"n\">cached</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">number_of_seconds</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">top_articles</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"o\">...</span> <span class=\"c1\"># Some costly queries</span>\n\n<span class=\"nd\">@file_cache</span><span class=\"o\">.</span><span class=\"n\">cached_view</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">number_of_seconds</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">top_articles</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Some costly queries</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># later, on appropriate event</span>\n<span class=\"n\">top_articles</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"p\">(</span><span class=\"n\">some_category</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">top_articles</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"n\">some_category</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">some_value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># primitives</span>\n<span class=\"n\">file_cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">file_cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n<span class=\"n\">file_cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n</pre>\n<p>It has several improvements upon django built-in file cache, both about high load.\nFirst, it\u2019s safe against concurrent writes. Second, it\u2019s invalidation is done as separate task,\nyou\u2019ll need to call this from crontab for that to work:</p>\n<pre>/path/manage.py cleanfilecache\n/path/manage.py cleanfilecache /path/to/non-default/cache/dir\n</pre>\n</div>\n<div id=\"django-templates-integration\">\n<h2>Django templates integration</h2>\n<p>Cacheops provides tags to cache template fragments. They mimic <tt>@cached_as</tt>\nand <tt>@cached</tt> decorators, however, they require explicit naming of each fragment:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">cacheops</span> <span class=\"cp\">%}</span><span class=\"x\">\n\n</span><span class=\"cp\">{%</span> <span class=\"k\">cached_as</span> <span class=\"o\">&lt;</span><span class=\"nv\">queryset</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nv\">timeout</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nv\">fragment_name</span><span class=\"o\">&gt;</span> <span class=\"o\">[&lt;</span><span class=\"nv\">extra1</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nv\">extra2</span><span class=\"o\">&gt;</span> <span class=\"p\">...</span><span class=\"o\">]</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ... some template code ...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcached_as</span> <span class=\"cp\">%}</span><span class=\"x\">\n\n</span><span class=\"cp\">{%</span> <span class=\"k\">cached</span> <span class=\"o\">&lt;</span><span class=\"nv\">timeout</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nv\">fragment_name</span><span class=\"o\">&gt;</span> <span class=\"o\">[&lt;</span><span class=\"nv\">extra1</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nv\">extra2</span><span class=\"o\">&gt;</span> <span class=\"p\">...</span><span class=\"o\">]</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ... some template code ...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcached</span> <span class=\"cp\">%}</span>\n</pre>\n<p>You can use <tt>None</tt> for timeout in <tt>@cached_as</tt> to use it\u2019s default value for model.</p>\n<p>To invalidate cached fragment use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">invalidate_fragment</span>\n\n<span class=\"n\">invalidate_fragment</span><span class=\"p\">(</span><span class=\"n\">fragment_name</span><span class=\"p\">,</span> <span class=\"n\">extra1</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>If you have more complex fragment caching needs, cacheops provides a helper to\nmake your own template tags which decorate a template fragment in a way\nanalogous to decorating a function with <tt>@cached</tt> or <tt>@cached_as</tt>.\nThis is <strong>experimental</strong> feature for now.</p>\n<p>To use it create <tt>myapp/templatetags/mycachetags.py</tt> and add something like this there:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops</span> <span class=\"kn\">import</span> <span class=\"n\">cached_as</span><span class=\"p\">,</span> <span class=\"n\">CacheopsLibrary</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">CacheopsLibrary</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">decorator_tag</span><span class=\"p\">(</span><span class=\"n\">takes_context</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cache_menu</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">menu_name</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">translation</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Flag</span><span class=\"p\">,</span> <span class=\"n\">MenuItem</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'request'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_staff</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Use noop decorator to bypass caching for staff</span>\n        <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">func</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">cached_as</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Invalidate cache if any menu item or a flag for menu changes</span>\n        <span class=\"n\">MenuItem</span><span class=\"p\">,</span>\n        <span class=\"n\">Flag</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'menu'</span><span class=\"p\">),</span>\n        <span class=\"c1\"># Vary for menu name and language, also stamp it as \"menu\" to be safe</span>\n        <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"menu\"</span><span class=\"p\">,</span> <span class=\"n\">menu_name</span><span class=\"p\">,</span> <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">get_language</span><span class=\"p\">()),</span>\n        <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n    <span class=\"p\">)</span>\n</pre>\n<p><tt>@decorator_tag</tt> here creates a template tag behaving the same as returned decorator\nupon wrapped template fragment. Resulting template tag could be used as follows:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">mycachetags</span> <span class=\"cp\">%}</span><span class=\"x\">\n\n</span><span class=\"cp\">{%</span> <span class=\"k\">cache_menu</span> <span class=\"s2\">\"top\"</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ... the top menu template code ...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcache_menu</span> <span class=\"cp\">%}</span><span class=\"x\">\n\n... some template code ..\n\n</span><span class=\"cp\">{%</span> <span class=\"k\">cache_menu</span> <span class=\"s2\">\"bottom\"</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ... the bottom menu template code ...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcache_menu</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"jinja2-extension\">\n<h2>Jinja2 extension</h2>\n<p>Add <tt>cacheops.jinja2.cache</tt> to your extensions and use:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cached_as</span> <span class=\"o\">&lt;</span><span class=\"nv\">queryset</span><span class=\"o\">&gt;</span> <span class=\"o\">[,</span> <span class=\"nv\">timeout</span><span class=\"o\">=&lt;</span><span class=\"nv\">timeout</span><span class=\"o\">&gt;]</span> <span class=\"o\">[,</span> <span class=\"nv\">extra</span><span class=\"o\">=&lt;</span><span class=\"nv\">key</span> <span class=\"nv\">addition</span><span class=\"o\">&gt;]</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ... some template code ...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcached_as</span> <span class=\"cp\">%}</span>\n</pre>\n<p>or</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cached</span> <span class=\"o\">[</span><span class=\"nv\">timeout</span><span class=\"o\">=&lt;</span><span class=\"nv\">timeout</span><span class=\"o\">&gt;]</span> <span class=\"o\">[,</span> <span class=\"nv\">extra</span><span class=\"o\">=&lt;</span><span class=\"nv\">key</span> <span class=\"nv\">addition</span><span class=\"o\">&gt;]</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcached</span> <span class=\"cp\">%}</span>\n</pre>\n<p>Tags work the same way as corresponding decorators.</p>\n</div>\n<div id=\"transactions\">\n<h2>Transactions</h2>\n<p>Cacheops transparently supports transactions. This is implemented by following simple rules:</p>\n<ol>\n<li>Once transaction is dirty (has changes) caching turns off. The reason is that the state of database at this point is only visible to current transaction and should not affect other users and vice versa.</li>\n<li>Any invalidating calls are scheduled to run on the outer commit of transaction.</li>\n<li>Savepoints and rollbacks are also handled appropriately.</li>\n</ol>\n<p>Mind that simple and file cache don\u2019t turn itself off in transactions but work as usual.</p>\n</div>\n<div id=\"dog-pile-effect-prevention\">\n<h2>Dog-pile effect prevention</h2>\n<p>There is optional locking mechanism to prevent several threads or processes simultaneously performing same heavy task. It works with <tt>@cached_as()</tt> and querysets:</p>\n<pre><span class=\"nd\">@cached_as</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">,</span> <span class=\"n\">lock</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">heavy_func</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">(</span><span class=\"n\">lock</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>It is also possible to specify <tt>lock: True</tt> in <tt>CACHEOPS</tt> setting but that would probably be a waste. Locking has no overhead on cache hit though.</p>\n</div>\n<div id=\"multiple-database-support\">\n<h2>Multiple database support</h2>\n<p>By default cacheops considers query result is same for same query, not depending\non database queried. That could be changed with <tt>db_agnostic</tt> cache profile option:</p>\n<pre><span class=\"n\">CACHEOPS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'some.model'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"s1\">'db_agnostic'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"sharing-redis-instance\">\n<h2>Sharing redis instance</h2>\n<p>Cacheops provides a way to share a redis instance by adding prefix to cache keys:</p>\n<pre><span class=\"n\">CACHEOPS_PREFIX</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">CACHEOPS_PREFIX</span> <span class=\"o\">=</span> <span class=\"s1\">'some.module.cacheops_prefix'</span>\n</pre>\n<p>A most common usage would probably be a prefix by host name:</p>\n<pre><span class=\"c1\"># get_request() returns current request saved to threadlocal by some middleware</span>\n<span class=\"n\">cacheops_prefix</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">get_request</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_host</span><span class=\"p\">()</span>\n</pre>\n<p>A <tt>query</tt> object passed to callback also enables reflection on used databases and tables:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">cacheops_prefix</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">dbs</span>    <span class=\"c1\"># A list of databases queried</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">tables</span> <span class=\"c1\"># A list of tables query is invalidated on</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">HELPER_TABLES</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'helper:'</span>\n    <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">tables</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'blog_post'</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'blog:'</span>\n</pre>\n<p><strong>NOTE:</strong> prefix is not used in simple and file cache. This might change in future cacheops.</p>\n</div>\n<div id=\"using-memory-limit\">\n<h2>Using memory limit</h2>\n<p>If your cache never grows too large you may not bother. But if you do you have some options.\nCacheops stores cached data along with invalidation data,\nso you can\u2019t just set <tt>maxmemory</tt> and let redis evict at its will.\nFor now cacheops offers 2 imperfect strategies, which are considered <strong>experimental</strong>.\nSo be careful and consider <a href=\"https://github.com/Suor/django-cacheops/issues/143\" rel=\"nofollow\">leaving feedback</a>.</p>\n<p>First strategy is configuring <tt><span class=\"pre\">maxmemory-policy</span> <span class=\"pre\">volatile-ttl</span></tt>. Invalidation data is guaranteed to have higher TTL than referenced keys.\nRedis however doesn\u2019t guarantee perfect TTL eviction order, it selects several keys and removes\none with the least TTL, thus invalidator could be evicted before cache key it refers leaving it orphan and causing it survive next invalidation.\nYou can reduce this chance by increasing <tt><span class=\"pre\">maxmemory-samples</span></tt> redis config option and by reducing cache timeout.</p>\n<p>Second strategy, probably more efficient one is adding <tt>CACHEOPS_LRU = True</tt> to your settings and then using <tt><span class=\"pre\">maxmemory-policy</span> <span class=\"pre\">volatile-lru</span></tt>.\nHowever, this makes invalidation structures persistent, they are still removed on associated events, but in absence of them can clutter redis database.</p>\n</div>\n<div id=\"keeping-stats\">\n<h2>Keeping stats</h2>\n<p>Cacheops provides <tt>cache_read</tt> and <tt>cache_invalidated</tt> signals for you to keep track.</p>\n<p>Cache read signal is emitted immediately after each cache lookup. Passed arguments are: <tt>sender</tt> - model class if queryset cache is fetched,\n<tt>func</tt> - decorated function and <tt>hit</tt> - fetch success as boolean value.</p>\n<p>Here is a simple stats implementation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cacheops.signals</span> <span class=\"kn\">import</span> <span class=\"n\">cache_read</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statsd.defaults.django</span> <span class=\"kn\">import</span> <span class=\"n\">statsd</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">stats_collector</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">hit</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"s1\">'hit'</span> <span class=\"k\">if</span> <span class=\"n\">hit</span> <span class=\"k\">else</span> <span class=\"s1\">'miss'</span>\n    <span class=\"n\">statsd</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"s1\">'cacheops.</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n\n<span class=\"n\">cache_read</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">stats_collector</span><span class=\"p\">)</span>\n</pre>\n<p>Cache invalidation signal is emitted after object, model or global invalidation passing <tt>sender</tt> and <tt>obj_dict</tt> args. Note that during normal operation cacheops only uses object invalidation, calling it once for each model create/delete and twice for update: passing old and new object dictionary.</p>\n</div>\n<div id=\"caveats\">\n<h2>CAVEATS</h2>\n<ol>\n<li>Conditions other than <tt>__exact</tt>, <tt>__in</tt> and <tt>__isnull=True</tt> don\u2019t make invalidation\nmore granular.</li>\n<li>Conditions on TextFields, FileFields and BinaryFields don\u2019t make it either.\nOne should not test on their equality anyway.</li>\n<li>Update of \u201cselected_related\u201d object does not invalidate cache for queryset.\nUse <tt>.prefetch_related()</tt> instead.</li>\n<li>Mass updates don\u2019t trigger invalidation by default. But see <tt>.invalidated_update()</tt>.</li>\n<li>Sliced queries are invalidated as non-sliced ones.</li>\n<li>Doesn\u2019t work with <tt>.raw()</tt> and other sql queries.</li>\n<li>Conditions on subqueries don\u2019t affect invalidation.</li>\n<li>Doesn\u2019t work right with multi-table inheritance.</li>\n</ol>\n<p>Here 1, 2, 3, 5 are part of the design compromise, trying to solve them will make\nthings complicated and slow. 7 can be implemented if needed, but it\u2019s\nprobably counter-productive since one can just break queries into simpler ones,\nwhich cache better. 4 is a deliberate choice, making it \u201cright\u201d will flush\ncache too much when update conditions are orthogonal to most queries conditions,\nsee, however, <cite>.invalidated_update()</cite>. 8 is postponed until it will gain\nmore interest or a champion willing to implement it emerges.</p>\n<p>All unsupported things could still be used easily enough with the help of <tt>@cached_as()</tt>.</p>\n</div>\n<div id=\"performance-tips\">\n<h2>Performance tips</h2>\n<p>Here come some performance tips to make cacheops and Django ORM faster.</p>\n<ol>\n<li><p>When you use cache you pickle and unpickle lots of django model instances, which could be slow. You can optimize django models serialization with <a href=\"http://github.com/Suor/django-pickling\" rel=\"nofollow\">django-pickling</a>.</p>\n</li>\n<li><p>Constructing querysets is rather slow in django, mainly because most of <tt>QuerySet</tt> methods clone self, then change it and return the clone. Original queryset is usually thrown away. Cacheops adds <tt>.inplace()</tt> method, which makes queryset mutating, preventing useless cloning:</p>\n<pre>items = Item.objects.inplace().filter(category=12).order_by('-date')[:20]\n</pre>\n<p>You can revert queryset to cloning state using <tt>.cloning()</tt> call.</p>\n<p>Note that this is a micro-optimization technique. Using it is only desirable in the hottest places, not everywhere.</p>\n</li>\n<li><p>Use template fragment caching when possible, it\u2019s way more fast because you don\u2019t need to generate anything. Also pickling/unpickling a string is much faster than a list of model instances.</p>\n</li>\n<li><p>Run separate redis instance for cache with disabled <a href=\"http://redis.io/topics/persistence\" rel=\"nofollow\">persistence</a>. You can manually call <a href=\"http://redis.io/commands/save\" rel=\"nofollow\">SAVE</a> or <a href=\"http://redis.io/commands/bgsave\" rel=\"nofollow\">BGSAVE</a> to stay hot upon server restart.</p>\n</li>\n<li><p>If you filter queryset on many different or complex conditions cache could degrade performance (comparing to uncached db calls) in consequence of frequent cache misses. Disable cache in such cases entirely or on some heuristics which detect if this request would be probably hit. E.g. enable cache if only some primary fields are used in filter.</p>\n<p>Caching querysets with large amount of filters also slows down all subsequent invalidation on that model. You can disable caching if more than some amount of fields is used in filter simultaneously.</p>\n</li>\n</ol>\n</div>\n<div id=\"writing-a-test\">\n<h2>Writing a test</h2>\n<p>Writing a test for an issue you are experiencing can speed up its resolution a lot.\nHere is how you do that. I suppose you have some application code causing it.</p>\n<ol>\n<li>Make a fork.</li>\n<li>Install all from <tt><span class=\"pre\">requirements-test.txt</span></tt>.</li>\n<li>Ensure you can run tests with <tt>./run_tests.py</tt>.</li>\n<li>Copy relevant models code to <tt>tests/models.py</tt>.</li>\n<li>Go to <tt>tests/tests.py</tt> and paste code causing exception to <tt>IssueTests.test_{issue_number}</tt>.</li>\n<li>Execute <tt>./run_tests.py {issue_number}</tt> and see it failing.</li>\n<li>Cut down model and test code until error disappears and make a step back.</li>\n<li>Commit changes and make a pull request.</li>\n</ol>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>faster .get() handling for simple cases such as get by pk/id, with simple key calculation</li>\n<li>integrate previous one with prefetch_related()</li>\n<li>shard cache between multiple redises</li>\n<li>respect subqueries?</li>\n<li>respect headers in @cached_view*?</li>\n<li>group invalidate_obj() calls?</li>\n<li>a postpone invalidation context manager/decorator?</li>\n<li>fast mode: store cache in local memory, but check in with redis if it\u2019s valid</li>\n<li>an interface for complex fields to extract exact on parts or transforms: ArrayField.len =&gt; field__len=?, ArrayField[0] =&gt; field__0=?, JSONField[\u2018some_key\u2019] =&gt; field__some_key=?</li>\n<li>custom cache eviction strategy in lua</li>\n<li>cache a string directly (no pickle) for direct serving (custom key function?)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5766319, "releases": {"0.8": [{"comment_text": "", "digests": {"md5": "cdcdeb5168d6faa4dbc50f905975f315", "sha256": "aa8c45cbbd66466b4a2ac156a7f367175c0d77d2c79606d76f83b587c5960396"}, "downloads": -1, "filename": "django-cacheops-0.8.tar.gz", "has_sig": false, "md5_digest": "cdcdeb5168d6faa4dbc50f905975f315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14894, "upload_time": "2011-09-24T15:30:00", "upload_time_iso_8601": "2011-09-24T15:30:00.840393Z", "url": "https://files.pythonhosted.org/packages/03/61/cd8bf50ef31c3ed55e0173ad8989c76a1fdd8e308aed13d34f7c9e97cd03/django-cacheops-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "2d19a0b98e2388b147c7d75b5baa5f5a", "sha256": "c7dc5206b9926110ae4d23bacd20ea4523b953994fefa297c4bca26e7bcdfd26"}, "downloads": -1, "filename": "django-cacheops-0.8.1.tar.gz", "has_sig": false, "md5_digest": "2d19a0b98e2388b147c7d75b5baa5f5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14966, "upload_time": "2011-09-25T18:12:57", "upload_time_iso_8601": "2011-09-25T18:12:57.263347Z", "url": "https://files.pythonhosted.org/packages/fc/54/83d9e860668e18599cd8549f1140c73882935e01b586d246cdbcf0091e9e/django-cacheops-0.8.1.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "18e079f8d77a239f440d6642ee424b06", "sha256": "f809a7b35d685dc5d2fb41901f38289762f5d6cba45df10cbc1b8cb0a48cd087"}, "downloads": -1, "filename": "django-cacheops-0.9.tar.gz", "has_sig": false, "md5_digest": "18e079f8d77a239f440d6642ee424b06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17074, "upload_time": "2011-10-13T14:53:42", "upload_time_iso_8601": "2011-10-13T14:53:42.893434Z", "url": "https://files.pythonhosted.org/packages/2f/c0/a0f9b07c162c04cb67a3de16948c7a5132a845f5ad185b88911f7f2f415f/django-cacheops-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "86abad1f759fdb3a9db92decffc8f399", "sha256": "16d38e3398bf482c4638eec3d4f9b4e657b4c103b8a63de7cd313b9ff6f619b7"}, "downloads": -1, "filename": "django-cacheops-0.9.1.tar.gz", "has_sig": false, "md5_digest": "86abad1f759fdb3a9db92decffc8f399", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17106, "upload_time": "2011-11-24T14:46:01", "upload_time_iso_8601": "2011-11-24T14:46:01.856404Z", "url": "https://files.pythonhosted.org/packages/9a/a4/de2db23fd71a38c9bf9ae5ff12f3e6df231348c9618e701362b336ac75a8/django-cacheops-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "322a4ef62782be9de4071e8798935a02", "sha256": "245e7eb53013221e0510ffbe6dc1a5e3259fae4fcfb0913a6a7958030e021d58"}, "downloads": -1, "filename": "django-cacheops-0.9.2.tar.gz", "has_sig": false, "md5_digest": "322a4ef62782be9de4071e8798935a02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21226, "upload_time": "2012-04-30T04:23:17", "upload_time_iso_8601": "2012-04-30T04:23:17.376294Z", "url": "https://files.pythonhosted.org/packages/1e/31/709e42b1cb427f054970a009ea3c1ef74f53896fe1d3b9b450a96bf2fa24/django-cacheops-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "fcb029bba7c2b092156f9d5db500005e", "sha256": "4255640061e3dfc549f259771ca92f61a05ad10c306f40ba5f19a8eeabdbb333"}, "downloads": -1, "filename": "django-cacheops-0.9.3.tar.gz", "has_sig": false, "md5_digest": "fcb029bba7c2b092156f9d5db500005e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22046, "upload_time": "2012-12-24T16:51:11", "upload_time_iso_8601": "2012-12-24T16:51:11.789667Z", "url": "https://files.pythonhosted.org/packages/e3/f9/9d7cde8cebaccbaf946667c1fcad53bb91e3b421e6686a31c9bde4f3fc68/django-cacheops-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "e7299b00cddc6906e06ef25863013ab5", "sha256": "5e2e27db01778fb0785f66e8e9a1fa2efc95f530ccd2d8e83f0ec4bf80e1d369"}, "downloads": -1, "filename": "django-cacheops-0.9.4.tar.gz", "has_sig": false, "md5_digest": "e7299b00cddc6906e06ef25863013ab5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22143, "upload_time": "2013-01-26T11:07:24", "upload_time_iso_8601": "2013-01-26T11:07:24.351720Z", "url": "https://files.pythonhosted.org/packages/0b/ba/3515e47ff6cfad4705f6173dc4d585bb3cc59c94e8838dac9ccaf7dbacb1/django-cacheops-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "be132b72437fa419a514b4bd8ecd1e98", "sha256": "8495eb1d9de9aa53f7513f13474ba2cc9955d1a27aa51c63fbc07d53ef59e5c8"}, "downloads": -1, "filename": "django-cacheops-0.9.5.tar.gz", "has_sig": false, "md5_digest": "be132b72437fa419a514b4bd8ecd1e98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22256, "upload_time": "2013-02-03T10:49:15", "upload_time_iso_8601": "2013-02-03T10:49:15.843742Z", "url": "https://files.pythonhosted.org/packages/12/e8/c81d59e4f647cf839b621251559fcb0cbd62151eb1c71342b3162dbb3acd/django-cacheops-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "e874bb75336085f2829b7b6759e2824e", "sha256": "5e7322b408cafd03fbeb834c5a4a8728e1f03ca245a31620f3e608e4b94ec49c"}, "downloads": -1, "filename": "django-cacheops-0.9.6.tar.gz", "has_sig": false, "md5_digest": "e874bb75336085f2829b7b6759e2824e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19598, "upload_time": "2013-02-25T09:00:40", "upload_time_iso_8601": "2013-02-25T09:00:40.214533Z", "url": "https://files.pythonhosted.org/packages/1a/f5/090bd5ddae01e72e42c92858ca3a6384088e42c9cc5e8e6434c9e08dee1c/django-cacheops-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "3d1d76f79c3c310e3e03348ebc17ca8a", "sha256": "7b95e752e469d2ccc0b8a9ae0e1f1de12fab399b7c32270dc0e85b131801fac6"}, "downloads": -1, "filename": "django-cacheops-0.9.7.tar.gz", "has_sig": false, "md5_digest": "3d1d76f79c3c310e3e03348ebc17ca8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20331, "upload_time": "2013-04-18T08:49:04", "upload_time_iso_8601": "2013-04-18T08:49:04.014548Z", "url": "https://files.pythonhosted.org/packages/b7/cb/725a2f0fd31893478f569a7ed6cc05b1470547f2a9cec32bc21d4cafb610/django-cacheops-0.9.7.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "3c711dc8f8ddd6b190807d8c9f6f0549", "sha256": "8cd92222d6e279fcde96728b0768d509da0411a813d82d2e5115b794b59bc76b"}, "downloads": -1, "filename": "django-cacheops-0.9.8.tar.gz", "has_sig": false, "md5_digest": "3c711dc8f8ddd6b190807d8c9f6f0549", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20446, "upload_time": "2013-05-31T03:16:55", "upload_time_iso_8601": "2013-05-31T03:16:55.460839Z", "url": "https://files.pythonhosted.org/packages/1c/20/8654cd41c4e7585ed87061907ce41dad547d6deeaa64cfb9eec6810db508/django-cacheops-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "22680d5005b8a678608b705415d9b3af", "sha256": "b981dcc993d798be4f4a4ef97315620e5db9e764e09903cf68b7654df27a84db"}, "downloads": -1, "filename": "django-cacheops-0.9.9.tar.gz", "has_sig": false, "md5_digest": "22680d5005b8a678608b705415d9b3af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20506, "upload_time": "2013-06-10T08:05:52", "upload_time_iso_8601": "2013-06-10T08:05:52.089124Z", "url": "https://files.pythonhosted.org/packages/c9/c1/eaadd9d3ed1521f3178691fc490d0b8673ab88f61f9ec7620eef201c7c9c/django-cacheops-0.9.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "15b2ec3e3bea0ecc9eb41bf8f4f6e81d", "sha256": "45a98082dea04cc26dd1f9cdbb2b9e3b2135d0d8aed5d671213abf5a1c679a28"}, "downloads": -1, "filename": "django-cacheops-1.0.0.tar.gz", "has_sig": false, "md5_digest": "15b2ec3e3bea0ecc9eb41bf8f4f6e81d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20750, "upload_time": "2013-07-01T01:37:00", "upload_time_iso_8601": "2013-07-01T01:37:00.942313Z", "url": "https://files.pythonhosted.org/packages/ea/c6/547bf31ef9b488f9d025dce6eb7f029b7c30b443db42e679f5005362f7dc/django-cacheops-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2b5e310d1cd9f8913b775c2187c1b752", "sha256": "a01cda8c8bd0ecb9ed839f1aeb7018b8b5337d18d05346e7332038ae60acb440"}, "downloads": -1, "filename": "django-cacheops-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2b5e310d1cd9f8913b775c2187c1b752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24654, "upload_time": "2013-08-13T13:12:53", "upload_time_iso_8601": "2013-08-13T13:12:53.036632Z", "url": "https://files.pythonhosted.org/packages/09/d3/3f01da0c47595a33feba3704656fc355d57094563dbcdf238dc85cb68d46/django-cacheops-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9c34391f52ec2f8a90941e736127d887", "sha256": "a901c855d114043ad5ca100bb34ac8a3eb2b4f62e237691a0d9b198550f19392"}, "downloads": -1, "filename": "django-cacheops-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9c34391f52ec2f8a90941e736127d887", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25277, "upload_time": "2013-08-30T12:06:20", "upload_time_iso_8601": "2013-08-30T12:06:20.496758Z", "url": "https://files.pythonhosted.org/packages/0e/f8/fb7d1867cd645f6b00b0f987ae57eb86bef975bd3d9dc1d9c97da44ccc7b/django-cacheops-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "3a9d12e86e15d4de600b562261be4320", "sha256": "d8cb83bbe2a297323ecfe6f69ee227ac0ee63c9b86b4bc287475831c11603e87"}, "downloads": -1, "filename": "django-cacheops-1.0.3.tar.gz", "has_sig": false, "md5_digest": "3a9d12e86e15d4de600b562261be4320", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25681, "upload_time": "2013-10-03T05:09:07", "upload_time_iso_8601": "2013-10-03T05:09:07.672944Z", "url": "https://files.pythonhosted.org/packages/36/3e/04a11466faf805f6b99019944f98478879c94430679b05539cdf1acfbcbd/django-cacheops-1.0.3.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "46de3918777b0ebe5489290905d9a2b4", "sha256": "b13732288e41d6f8a5f00865b308ec0308fb8723a60575671f84b35240b28b0d"}, "downloads": -1, "filename": "django-cacheops-1.1.tar.gz", "has_sig": false, "md5_digest": "46de3918777b0ebe5489290905d9a2b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28183, "upload_time": "2013-11-18T09:57:02", "upload_time_iso_8601": "2013-11-18T09:57:02.691438Z", "url": "https://files.pythonhosted.org/packages/78/42/66ffc129b9ac481e2544c782db561d33b477868b25e5dedc32e63e9912fe/django-cacheops-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "89608ac2b0d82750d794f9218445eed5", "sha256": "dca7d952ff17f038e3ba59efa9ca666d76f3afea3aee6424a95ba95d63599ecd"}, "downloads": -1, "filename": "django-cacheops-1.1.1.tar.gz", "has_sig": false, "md5_digest": "89608ac2b0d82750d794f9218445eed5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28180, "upload_time": "2013-11-27T00:51:28", "upload_time_iso_8601": "2013-11-27T00:51:28.468798Z", "url": "https://files.pythonhosted.org/packages/84/43/5869d412e809a55d691ce60baef6a60ca35c84d950c4333db50eb3ad8635/django-cacheops-1.1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "fb59cb42092281ff28db20126e26dbfe", "sha256": "1a29bc104b591f097f19db489373bf1f3b8c86211dc5823ae69cb30cbea79e23"}, "downloads": -1, "filename": "django-cacheops-1.2.tar.gz", "has_sig": false, "md5_digest": "fb59cb42092281ff28db20126e26dbfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28601, "upload_time": "2013-12-03T08:56:51", "upload_time_iso_8601": "2013-12-03T08:56:51.862213Z", "url": "https://files.pythonhosted.org/packages/f7/39/e4b33e3e8d2fad15a60b5778c02638d27df17c62843a80c9e53f29b27279/django-cacheops-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "3f172795bef349f3ffaa364a8fde7764", "sha256": "af2b99d5654e18d02159859634736d93c937d780e2e6aafe768ee1892fd8d83f"}, "downloads": -1, "filename": "django-cacheops-1.2.1.tar.gz", "has_sig": false, "md5_digest": "3f172795bef349f3ffaa364a8fde7764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28630, "upload_time": "2013-12-03T12:58:28", "upload_time_iso_8601": "2013-12-03T12:58:28.900586Z", "url": "https://files.pythonhosted.org/packages/70/73/f26d9c2cff66074fdd69a9b38887b79a07a0177976bbf0434b16ea592b91/django-cacheops-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "d4cfaaf05d91f13a6538cbad1bffd331", "sha256": "866d866dbf523c6d53b27d4b8808b89a04c665d39bdd6610ebd46b46aa12b26e"}, "downloads": -1, "filename": "django-cacheops-1.3.0.tar.gz", "has_sig": false, "md5_digest": "d4cfaaf05d91f13a6538cbad1bffd331", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28700, "upload_time": "2014-02-06T01:54:10", "upload_time_iso_8601": "2014-02-06T01:54:10.986860Z", "url": "https://files.pythonhosted.org/packages/0e/3b/d242d5df0fef769ccc67ab433cdd0b8fbbe5595da78927f0d81e4a13918a/django-cacheops-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "5da6bce76b62d9da25da98aa825a6990", "sha256": "1372a81ad5ef0b90a22c51c8267cda3309616e1407390e17bcc41358fd9a6181"}, "downloads": -1, "filename": "django-cacheops-1.3.1.tar.gz", "has_sig": false, "md5_digest": "5da6bce76b62d9da25da98aa825a6990", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28747, "upload_time": "2014-02-26T08:12:04", "upload_time_iso_8601": "2014-02-26T08:12:04.585763Z", "url": "https://files.pythonhosted.org/packages/f3/d0/5e5ed27ad0719d1da7565e4e221cbdf59167c128048d98999e2b56db4528/django-cacheops-1.3.1.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "ca6ce540e89f3fd4918c96fcb456f0d0", "sha256": "e25f956eb787692ad96c6d67f1eb2adbb449a6140ae4495efe4f669d05de0bd3"}, "downloads": -1, "filename": "django-cacheops-2.0.tar.gz", "has_sig": false, "md5_digest": "ca6ce540e89f3fd4918c96fcb456f0d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31645, "upload_time": "2014-06-13T03:27:39", "upload_time_iso_8601": "2014-06-13T03:27:39.344239Z", "url": "https://files.pythonhosted.org/packages/ba/ac/a5c6988a1cc3a3b3efad256eff3e22c648b2e6d252934246f118776209ec/django-cacheops-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "adc73ce55c531366c8446dc53c0df1bc", "sha256": "2cd43bab9cddd8ef314b72d25e5c56cf5951cbe3d681f986ea591d8e4cc11f2e"}, "downloads": -1, "filename": "django-cacheops-2.1.tar.gz", "has_sig": false, "md5_digest": "adc73ce55c531366c8446dc53c0df1bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32220, "upload_time": "2014-07-12T19:58:21", "upload_time_iso_8601": "2014-07-12T19:58:21.706823Z", "url": "https://files.pythonhosted.org/packages/0b/ea/d1c1b3a299e5e72b18119da9a3f828ecb5dc8dbe1fa939b41ac2c806f40a/django-cacheops-2.1.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "13cff84919b401aef75dfcd4b59baad1", "sha256": "ccc320834fd39f1c5c10350713c691e9961f26efb7675b10b5be4a686b74d72d"}, "downloads": -1, "filename": "django-cacheops-2.1.1.tar.gz", "has_sig": false, "md5_digest": "13cff84919b401aef75dfcd4b59baad1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32366, "upload_time": "2014-07-16T10:41:32", "upload_time_iso_8601": "2014-07-16T10:41:32.367229Z", "url": "https://files.pythonhosted.org/packages/00/38/6014417273dc8f68a589969e9f9f0d3cfe70ca097315ef41743b4b56139a/django-cacheops-2.1.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "6638af6c1fd6e3659156548d4dc191f5", "sha256": "9adcada7c518c02088ef35cf15d53e5e0f3b18fe248b0aa8ab86844a7e7227a3"}, "downloads": -1, "filename": "django-cacheops-2.2.tar.gz", "has_sig": false, "md5_digest": "6638af6c1fd6e3659156548d4dc191f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33463, "upload_time": "2014-10-16T13:51:07", "upload_time_iso_8601": "2014-10-16T13:51:07.597409Z", "url": "https://files.pythonhosted.org/packages/47/af/f6f52873422e24897a86faa58bf295237c24ecfeefd0ca12d530f433808f/django-cacheops-2.2.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "6ec362cc2888a3f93957d2d30bb5ac60", "sha256": "7036fb64b0ec90573edc2a5f1fc756e35fbed55b5078ec6657c4a6bbca28c2bb"}, "downloads": -1, "filename": "django-cacheops-2.2.1.tar.gz", "has_sig": false, "md5_digest": "6ec362cc2888a3f93957d2d30bb5ac60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33559, "upload_time": "2014-10-22T04:24:44", "upload_time_iso_8601": "2014-10-22T04:24:44.574557Z", "url": "https://files.pythonhosted.org/packages/79/6a/9e18ec9d75fc1ad425aa4ec1bc8e61caf6c6830263cafcda25ee732a3be2/django-cacheops-2.2.1.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "f9e4752f51692bab1399b15059fd303d", "sha256": "5dda779ab1a2a45d218ecc2779eb8b7407ff74dcb9533265f4fcb887d5f49161"}, "downloads": -1, "filename": "django-cacheops-2.3.tar.gz", "has_sig": false, "md5_digest": "f9e4752f51692bab1399b15059fd303d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34909, "upload_time": "2015-02-10T14:36:34", "upload_time_iso_8601": "2015-02-10T14:36:34.729969Z", "url": "https://files.pythonhosted.org/packages/e7/ff/841ef945f85ae17e3142cb38e25db9d4c8c759c60697a8bf40d916e3948f/django-cacheops-2.3.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "ef64aadd586fb2a2f24774f91067191c", "sha256": "3c2df2c495bae1ec47bda9d4fdb3ad83beed965b8cd80c2b36ebd49399f3aef9"}, "downloads": -1, "filename": "django-cacheops-2.3.1.tar.gz", "has_sig": false, "md5_digest": "ef64aadd586fb2a2f24774f91067191c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35436, "upload_time": "2015-04-01T05:09:38", "upload_time_iso_8601": "2015-04-01T05:09:38.655460Z", "url": "https://files.pythonhosted.org/packages/1f/b2/245a029d773adbd89ad8e050065ed52fadcffe82713e4bc1bb14f93ead44/django-cacheops-2.3.1.tar.gz", "yanked": false}], "2.3.2": [{"comment_text": "", "digests": {"md5": "8a52375ca69fea2d1129b7f0eb16615d", "sha256": "cdca899aa2df4965da232b7f0058ab0f05edcae1a1cf7e08a2e342171053dd08"}, "downloads": -1, "filename": "django-cacheops-2.3.2.tar.gz", "has_sig": false, "md5_digest": "8a52375ca69fea2d1129b7f0eb16615d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36446, "upload_time": "2015-05-11T11:36:32", "upload_time_iso_8601": "2015-05-11T11:36:32.867288Z", "url": "https://files.pythonhosted.org/packages/c4/5a/0f0d18ec916e364a7c04e3e7e7882adb871920c0db66f18810a0615a3f79/django-cacheops-2.3.2.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "a58974902595752c8a1600910c3d31eb", "sha256": "491cb4df06828e439a5c183026044d99e4e8a365d09459e54f30a60d6176e25f"}, "downloads": -1, "filename": "django-cacheops-2.4.tar.gz", "has_sig": false, "md5_digest": "a58974902595752c8a1600910c3d31eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38611, "upload_time": "2015-08-11T13:01:15", "upload_time_iso_8601": "2015-08-11T13:01:15.786795Z", "url": "https://files.pythonhosted.org/packages/63/88/e500f7e4b70bca05b726e14ffebead4b607f564c0212fd861d7903aec15d/django-cacheops-2.4.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "9bf15b0cc5472f929ade1c0fc20a572b", "sha256": "d5bd62c2726628a0155b7aeb5ced6202c1834664e3984e8fc3fdceb25ac856d4"}, "downloads": -1, "filename": "django-cacheops-2.4.1.tar.gz", "has_sig": false, "md5_digest": "9bf15b0cc5472f929ade1c0fc20a572b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38791, "upload_time": "2015-09-04T05:44:35", "upload_time_iso_8601": "2015-09-04T05:44:35.438580Z", "url": "https://files.pythonhosted.org/packages/db/d5/eaae3a31be7a2beb5b06da63ff94857a228128b31357e1633b5f1445f3d5/django-cacheops-2.4.1.tar.gz", "yanked": false}], "2.4.2": [{"comment_text": "", "digests": {"md5": "7dd1ff5a973be4570e058c472203c639", "sha256": "19e4c73ce02e810b89e84d7015e7a06e2ee5572dec0d0d116da32d87981b8577"}, "downloads": -1, "filename": "django-cacheops-2.4.2.tar.gz", "has_sig": false, "md5_digest": "7dd1ff5a973be4570e058c472203c639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38854, "upload_time": "2015-10-16T06:08:44", "upload_time_iso_8601": "2015-10-16T06:08:44.267042Z", "url": "https://files.pythonhosted.org/packages/25/c8/dcf7826dad02b139c62fd07e30b1246f56b780644bb8f0c5283133546904/django-cacheops-2.4.2.tar.gz", "yanked": false}], "2.4.3": [{"comment_text": "", "digests": {"md5": "6ece17bf60effba721fd718152754af6", "sha256": "c278de0e89f39516eb5d31a4c4395437e7471d86628c178304faacca3f596dea"}, "downloads": -1, "filename": "django-cacheops-2.4.3.tar.gz", "has_sig": false, "md5_digest": "6ece17bf60effba721fd718152754af6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38854, "upload_time": "2015-11-07T16:22:18", "upload_time_iso_8601": "2015-11-07T16:22:18.610313Z", "url": "https://files.pythonhosted.org/packages/5e/9c/442b8496079c563b1ec000020bd56131d6ff0e093deb3ce0e127828595ed/django-cacheops-2.4.3.tar.gz", "yanked": false}], "2.4.5": [{"comment_text": "", "digests": {"md5": "d59251a29a992e7ed66d8edd3aaefc58", "sha256": "04aafbc0fbf15e9e0067687b0c7e7c70a705b3435a02cff19b59ae1603d33a8b"}, "downloads": -1, "filename": "django-cacheops-2.4.5.tar.gz", "has_sig": false, "md5_digest": "d59251a29a992e7ed66d8edd3aaefc58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38998, "upload_time": "2016-06-13T08:00:21", "upload_time_iso_8601": "2016-06-13T08:00:21.047476Z", "url": "https://files.pythonhosted.org/packages/5d/8f/b024c7f42493677003a587cee285ef15542272f28a1d390e1dbb392683ed/django-cacheops-2.4.5.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "db44c2510ad62ab9e5b74766b30e3afd", "sha256": "a7f18c9b98a8b9a0acc8b213ce461139417247e8ff95b4aaf2b3aa9c4bfbb9d6"}, "downloads": -1, "filename": "django-cacheops-3.0.tar.gz", "has_sig": false, "md5_digest": "db44c2510ad62ab9e5b74766b30e3afd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39561, "upload_time": "2016-08-07T11:43:19", "upload_time_iso_8601": "2016-08-07T11:43:19.415321Z", "url": "https://files.pythonhosted.org/packages/78/fa/a5a0128ef7e82c8c0bc20ffdde1e78791cbe9c2d9bb1b8e754394fda8090/django-cacheops-3.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "b192cc9472c1ca44c5d6e55ab574ab2a", "sha256": "1ec281c65ea6c470b730fab1f99e62522e9796bd78bc526379ebece3b1f327d0"}, "downloads": -1, "filename": "django-cacheops-3.0.1.tar.gz", "has_sig": false, "md5_digest": "b192cc9472c1ca44c5d6e55ab574ab2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39621, "upload_time": "2016-10-12T14:19:34", "upload_time_iso_8601": "2016-10-12T14:19:34.900225Z", "url": "https://files.pythonhosted.org/packages/e5/cb/0bd0cfd465c593d0de411f4c79134e167d698d1cbc4741c310526411233d/django-cacheops-3.0.1.tar.gz", "yanked": false}], "3.1": [{"comment_text": "", "digests": {"md5": "249271f698b5d3f2c769421c3d140566", "sha256": "1f0e2fc821b33624a196832f09e11acffa32114e2b1b396d2c0ff9304205d0fd"}, "downloads": -1, "filename": "django-cacheops-3.1.tar.gz", "has_sig": false, "md5_digest": "249271f698b5d3f2c769421c3d140566", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41577, "upload_time": "2016-11-10T09:46:55", "upload_time_iso_8601": "2016-11-10T09:46:55.228301Z", "url": "https://files.pythonhosted.org/packages/a9/25/6faeb4c1d1833956240a3d71c2ef098646c757455000ee313b8986be8794/django-cacheops-3.1.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "95e22f0d2963f1bc7446fb057c118afd", "sha256": "06ea0994ebe7853c391bf2c8b846cab8157ea110ee3d6c9cf22f5296bfdd9294"}, "downloads": -1, "filename": "django-cacheops-3.1.1.tar.gz", "has_sig": false, "md5_digest": "95e22f0d2963f1bc7446fb057c118afd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41638, "upload_time": "2016-11-16T04:40:58", "upload_time_iso_8601": "2016-11-16T04:40:58.042200Z", "url": "https://files.pythonhosted.org/packages/f5/aa/af6f071367994f65576f34847ca2e6ea08a8b6b88808bedbe8bd4117554b/django-cacheops-3.1.1.tar.gz", "yanked": false}], "3.1.2": [{"comment_text": "", "digests": {"md5": "9ff478593d81eb4768c1df0b9302f2dd", "sha256": "11fdf59fca96716f0bd33297fd40a029ebf561ca65b0dcb7f27a379a57d083b2"}, "downloads": -1, "filename": "django-cacheops-3.1.2.tar.gz", "has_sig": false, "md5_digest": "9ff478593d81eb4768c1df0b9302f2dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41777, "upload_time": "2017-02-15T12:22:07", "upload_time_iso_8601": "2017-02-15T12:22:07.379800Z", "url": "https://files.pythonhosted.org/packages/11/37/1fac25261ed87f421099d47c8bfa4f7f81590ad06e40ded3d90677f445b9/django-cacheops-3.1.2.tar.gz", "yanked": false}], "3.1.3": [{"comment_text": "", "digests": {"md5": "7d90e23d166297e9c50907076be0fb6d", "sha256": "5a69192f7769ca118634c2f0332cb469db0ef3a9bed35a56d71a1d1e0109e77a"}, "downloads": -1, "filename": "django-cacheops-3.1.3.tar.gz", "has_sig": false, "md5_digest": "7d90e23d166297e9c50907076be0fb6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42124, "upload_time": "2017-03-29T14:18:30", "upload_time_iso_8601": "2017-03-29T14:18:30.851360Z", "url": "https://files.pythonhosted.org/packages/c8/f6/8c8d778914bba78fec8c2c4fcab6ea8588c254c7809886edeab58b7b9c65/django-cacheops-3.1.3.tar.gz", "yanked": false}], "3.2": [{"comment_text": "", "digests": {"md5": "510295d886b0bf079c67a8f5595e91be", "sha256": "c1bf0ba088b47106a1994503662b339ce26f7f366f27f9204771e5f408c076c4"}, "downloads": -1, "filename": "django-cacheops-3.2.tar.gz", "has_sig": false, "md5_digest": "510295d886b0bf079c67a8f5595e91be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42547, "upload_time": "2017-05-09T03:15:23", "upload_time_iso_8601": "2017-05-09T03:15:23.123725Z", "url": "https://files.pythonhosted.org/packages/0d/c6/9e26dad0afa184b08bfbd1afdc597d24282c7d6da0806f3046cf8612630b/django-cacheops-3.2.tar.gz", "yanked": false}], "3.2.1": [{"comment_text": "", "digests": {"md5": "622c35ba75c39ea0e9983225b7c2f0b8", "sha256": "8c44901ecae9c842c32795534a466b1a818851fb430fdc51ef754accd6913521"}, "downloads": -1, "filename": "django-cacheops-3.2.1.tar.gz", "has_sig": false, "md5_digest": "622c35ba75c39ea0e9983225b7c2f0b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42505, "upload_time": "2017-05-17T10:14:05", "upload_time_iso_8601": "2017-05-17T10:14:05.471427Z", "url": "https://files.pythonhosted.org/packages/0d/1c/9bacebe5418a0d8f9deb3584aab2acc3a765162a007bde6c434c05d6a2b1/django-cacheops-3.2.1.tar.gz", "yanked": false}], "4.0": [{"comment_text": "", "digests": {"md5": "09611faf06221726d72546774b5291c8", "sha256": "19099cfd165c7fd04ba9f30532735e3655c91afd7a59b247654fde2abd4d42d2"}, "downloads": -1, "filename": "django-cacheops-4.0.tar.gz", "has_sig": false, "md5_digest": "09611faf06221726d72546774b5291c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51026, "upload_time": "2017-09-16T12:18:15", "upload_time_iso_8601": "2017-09-16T12:18:15.306236Z", "url": "https://files.pythonhosted.org/packages/45/5d/181d167b86a4b2fcf52de821cbe8f4b51e47dcc21f7a41b70ff039d252e4/django-cacheops-4.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "04555f4e243ff9cf4ed871010966b860", "sha256": "ad3a6fcddad7fdf90861e2db09fc44b5451416ca641d01e882a514dcd9ecbc90"}, "downloads": -1, "filename": "django-cacheops-4.0.1.tar.gz", "has_sig": false, "md5_digest": "04555f4e243ff9cf4ed871010966b860", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51387, "upload_time": "2017-10-02T09:10:12", "upload_time_iso_8601": "2017-10-02T09:10:12.796027Z", "url": "https://files.pythonhosted.org/packages/3d/2b/5fd8cc4d1a663e79798ae26de7a55e8990528f797aba972ead11f2b4fb51/django-cacheops-4.0.1.tar.gz", "yanked": false}], "4.0.2": [{"comment_text": "", "digests": {"md5": "f1d82ab08c630ca84c1166f84465d30b", "sha256": "edc299b6ec6ee0ab2fd58e2b307905c20815bbabdf3483409dd17e8a03dd7b7a"}, "downloads": -1, "filename": "django-cacheops-4.0.2.tar.gz", "has_sig": false, "md5_digest": "f1d82ab08c630ca84c1166f84465d30b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51412, "upload_time": "2017-11-14T04:08:54", "upload_time_iso_8601": "2017-11-14T04:08:54.564957Z", "url": "https://files.pythonhosted.org/packages/41/b0/1b6aac2e17f0aa6695a83ad38728ce40ea939b5aa22b0c747e1ec64d9fec/django-cacheops-4.0.2.tar.gz", "yanked": false}], "4.0.3": [{"comment_text": "", "digests": {"md5": "c363cbfae49bcbc8b7afaa437c9e9bba", "sha256": "bd7accc7fba0c921bfe9152a57fa8707c02ef368fb2399fa5be6d23e848b3fcb"}, "downloads": -1, "filename": "django-cacheops-4.0.3.tar.gz", "has_sig": false, "md5_digest": "c363cbfae49bcbc8b7afaa437c9e9bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52011, "upload_time": "2017-12-02T05:07:02", "upload_time_iso_8601": "2017-12-02T05:07:02.926329Z", "url": "https://files.pythonhosted.org/packages/f7/28/6ac95f1bc6ab224d253ba4452ccb058b79d095bfc2e32d73f9ff8dd1124c/django-cacheops-4.0.3.tar.gz", "yanked": false}], "4.0.4": [{"comment_text": "", "digests": {"md5": "2e3ba9d6fc7d745811b32c25945cd531", "sha256": "bfc0788aa1d637b7acb7a7a76dc67f9af8a2899d55f8fc2b292e8555a6cf3916"}, "downloads": -1, "filename": "django-cacheops-4.0.4.tar.gz", "has_sig": false, "md5_digest": "2e3ba9d6fc7d745811b32c25945cd531", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52282, "upload_time": "2018-01-02T09:46:31", "upload_time_iso_8601": "2018-01-02T09:46:31.082655Z", "url": "https://files.pythonhosted.org/packages/1b/e0/f36906dc36a8524ba7bf9bbf8e72b645a7b0db564195f774c232c54173f1/django-cacheops-4.0.4.tar.gz", "yanked": false}], "4.0.5": [{"comment_text": "", "digests": {"md5": "c0d2a382754ffdb5ff7fa0554c2eae8f", "sha256": "01510d51f1ad1969a72abf02102076cf4c9c0a94ea936a53f2b7028b9f1bd661"}, "downloads": -1, "filename": "django-cacheops-4.0.5.tar.gz", "has_sig": false, "md5_digest": "c0d2a382754ffdb5ff7fa0554c2eae8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52403, "upload_time": "2018-01-30T12:49:37", "upload_time_iso_8601": "2018-01-30T12:49:37.439920Z", "url": "https://files.pythonhosted.org/packages/f9/71/2654821e2b2b414af72a36cb74ccc5ce92e544d030ec47b1e586459880d0/django-cacheops-4.0.5.tar.gz", "yanked": false}], "4.0.6": [{"comment_text": "", "digests": {"md5": "e721643111945adf850531bec84dae4b", "sha256": "53e60e9085d760edce3c7f440f4fc827a6315ef7e6ebbeaebeeeac653968ba56"}, "downloads": -1, "filename": "django-cacheops-4.0.6.tar.gz", "has_sig": false, "md5_digest": "e721643111945adf850531bec84dae4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52448, "upload_time": "2018-03-09T12:39:38", "upload_time_iso_8601": "2018-03-09T12:39:38.392103Z", "url": "https://files.pythonhosted.org/packages/6a/9d/4cbb83c39a6e4ab41a8371096563c8312f984a772b47cb60a8e891681c9e/django-cacheops-4.0.6.tar.gz", "yanked": false}], "4.0.7": [{"comment_text": "", "digests": {"md5": "ccdaeab71344333b74838fc0ca278c29", "sha256": "feca7ad2a148857d5128aa3e635a4f2572e839919ffffa9a9d720766e7479e6b"}, "downloads": -1, "filename": "django_cacheops-4.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ccdaeab71344333b74838fc0ca278c29", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 48164, "upload_time": "2018-06-30T04:14:13", "upload_time_iso_8601": "2018-06-30T04:14:13.930031Z", "url": "https://files.pythonhosted.org/packages/3e/c3/ee62c1356a7afbe51e7e3f1134db8b81e22b7e1c05526db1297a7f79086e/django_cacheops-4.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2b18bf48dd5887a6146be151213618b", "sha256": "176655c2f0947b5c12765eb223c4f32032e1833f980a754ffce188d0bd20950a"}, "downloads": -1, "filename": "django-cacheops-4.0.7.tar.gz", "has_sig": false, "md5_digest": "a2b18bf48dd5887a6146be151213618b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52643, "upload_time": "2018-06-30T04:14:11", "upload_time_iso_8601": "2018-06-30T04:14:11.622023Z", "url": "https://files.pythonhosted.org/packages/0b/12/a1fc5189fc87d399050a4a02a06fb49ab3ccc97cc637be1fb31d12bf7e66/django-cacheops-4.0.7.tar.gz", "yanked": false}], "4.1": [{"comment_text": "", "digests": {"md5": "6732f9ebadced67456bf9e3f26e63fb4", "sha256": "9cd17f2e3cdc38e9652a3b971a7b49412ceb5645a9ca6dd5ce18cbdea537cfb8"}, "downloads": -1, "filename": "django_cacheops-4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6732f9ebadced67456bf9e3f26e63fb4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 48766, "upload_time": "2018-09-10T15:07:38", "upload_time_iso_8601": "2018-09-10T15:07:38.332994Z", "url": "https://files.pythonhosted.org/packages/d8/ab/1a68554727571e3c31b8606859e7133042d0113b27cc08a6457f35077fbb/django_cacheops-4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e3179801c1bed7dc498ddc6489e29b3", "sha256": "2a5cd01ad64f565d0ad18bf103c96988ccdf7d245601dedd8ef52f9ef63e0727"}, "downloads": -1, "filename": "django-cacheops-4.1.tar.gz", "has_sig": false, "md5_digest": "6e3179801c1bed7dc498ddc6489e29b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53766, "upload_time": "2018-09-10T15:07:35", "upload_time_iso_8601": "2018-09-10T15:07:35.590348Z", "url": "https://files.pythonhosted.org/packages/66/55/81f45ab8403dde64b0227996ac4b0789450564ea51a2264c3daf749f95c6/django-cacheops-4.1.tar.gz", "yanked": false}], "4.2": [{"comment_text": "", "digests": {"md5": "039ae925002d9a917c16b4611776fb72", "sha256": "a94418c8ba816c7c65d8cc2dd265313e042f4339c3b62a3682ebec89d75ff222"}, "downloads": -1, "filename": "django_cacheops-4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "039ae925002d9a917c16b4611776fb72", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 38968, "upload_time": "2019-09-01T07:23:24", "upload_time_iso_8601": "2019-09-01T07:23:24.239156Z", "url": "https://files.pythonhosted.org/packages/c6/c9/6f2ff431ffe57f6e5bbecb41b21f01e0523fa4ff816cae1caa97025b65fb/django_cacheops-4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1861d7b11dec1f8d0061f9071ce5ae3d", "sha256": "56ea95ad4eb1b61b6c014b7b23f3203ef8816611c9e8a097a7e99628810e9f16"}, "downloads": -1, "filename": "django-cacheops-4.2.tar.gz", "has_sig": false, "md5_digest": "1861d7b11dec1f8d0061f9071ce5ae3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50240, "upload_time": "2019-09-01T07:23:20", "upload_time_iso_8601": "2019-09-01T07:23:20.865032Z", "url": "https://files.pythonhosted.org/packages/8b/12/859bbc4f2684c01aeb9b7b57e80e87cc0902259e37f2dcc0497c33e20c9c/django-cacheops-4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "039ae925002d9a917c16b4611776fb72", "sha256": "a94418c8ba816c7c65d8cc2dd265313e042f4339c3b62a3682ebec89d75ff222"}, "downloads": -1, "filename": "django_cacheops-4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "039ae925002d9a917c16b4611776fb72", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 38968, "upload_time": "2019-09-01T07:23:24", "upload_time_iso_8601": "2019-09-01T07:23:24.239156Z", "url": "https://files.pythonhosted.org/packages/c6/c9/6f2ff431ffe57f6e5bbecb41b21f01e0523fa4ff816cae1caa97025b65fb/django_cacheops-4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1861d7b11dec1f8d0061f9071ce5ae3d", "sha256": "56ea95ad4eb1b61b6c014b7b23f3203ef8816611c9e8a097a7e99628810e9f16"}, "downloads": -1, "filename": "django-cacheops-4.2.tar.gz", "has_sig": false, "md5_digest": "1861d7b11dec1f8d0061f9071ce5ae3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50240, "upload_time": "2019-09-01T07:23:20", "upload_time_iso_8601": "2019-09-01T07:23:20.865032Z", "url": "https://files.pythonhosted.org/packages/8b/12/859bbc4f2684c01aeb9b7b57e80e87cc0902259e37f2dcc0497c33e20c9c/django-cacheops-4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:17 2020"}