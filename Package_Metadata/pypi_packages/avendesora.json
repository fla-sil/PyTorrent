{"info": {"author": "Ken Kundert and Kale Kundert", "author_email": "avendesora@nurdletech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Security :: Cryptography", "Topic :: Utilities"], "description": "Avendesora Collaborative Password Manager\n=========================================\n\n*Avendesora, the leaf of the Tree of Life is the key.*\n\n.. image:: https://img.shields.io/travis/KenKundert/avendesora/master.svg\n    :target: https://travis-ci.org/KenKundert/avendesora\n\n.. image:: https://img.shields.io/coveralls/KenKundert/avendesora.svg\n    :target: https://coveralls.io/r/KenKundert/avendesora\n\n.. image:: https://img.shields.io/pypi/v/avendesora.svg\n    :target: https://pypi.python.org/pypi/avendesora\n\n.. image:: https://img.shields.io/pypi/pyversions/avendesora.svg\n    :target: https://pypi.python.org/pypi/avendesora/\n\n.. IGNORE: pypi statics are broken and unlikely to be fixed\n    .. image:: https://img.shields.io/pypi/dm/avendesora.svg\n        :target: https://pypi.python.org/pypi/avendesora/\n\n.. image:: https://requires.io/github/KenKundert/avendesora/requirements.svg?branch=master\n     :target: https://requires.io/github/KenKundert/avendesora/requirements/?branch=master\n     :alt: Requirements Status\n\n:Authors: Ken & Kale Kundert\n:Version: 1.17.0\n:Released: 2020-04-15\n\nAvendesora replaces Abraxas, which are both alternatives to the traditional \npassword vault.\n\nPlease report all bugs and suggestions to avendesora@nurdletech.com\n\nIntroduction\n------------\n\nAvendesora is powerful command-line utility that can securely hold and \nconveniently provide access to a wide variety of information about your \naccounts, including its secrets such as passwords. Account values can be \ndisplayed, copied to the clipboard, or automatically typed into running \napplications such as you web browser or terminal windows.  Avendesora can also \nopen accounts in your web browser, automatically recognize which account to use \nbased on the window title, and warn you if the browser is not using encryption \nwhen you go to enter your password.\n\nAccount secrets can be saved in encrypted form, as with password vaults, or \ngenerated from a root secret.  Generated secrets have two important benefits.  \nFirst, they are produced from a random seed, and so are quite unpredictable.  \nThis is important, because the predictability of a passwords can be exploited \nwhen cracking passwords.  Second, if a root secret is shared with another \ntrusted party, then you both can generate new shared secrets without passing any \nfurther secrets.\n\nSecrets are generated from a collection of seeds, one of which must be random \nwith a very high degree of entropy. The random seed is referred to as the \n'master seed' or the 'root seed'.  It is extremely important that the master \nseed remain completely secure.  Never disclose a master seed to anyone except \nfor a person you wish to collaborate with, and then only used the shared master \nseed for shared secrets.  All of your private secrets should be generated from \nprivate master seeds.  The seeds generally include the master seed, the account \nname, the secret name, and perhaps a version name.  For example, imagine having \na Gmail account, then the account name might simply be 'gmail', and the secret \nname might be 'passcode'.  In this case, your master seed is combined with the \nwords 'gmail' and 'passcode', the combination is hashed, and then password is \ngenerated with an appropriate recipe that you specify.  There are recipes for \npasswords, pass phrases, PINs, security questions, etc.  The password itself is \nnot stored, rather it is the seeds that are stored and the password is \nregenerated when needed. Notice that all the seeds except the master seed need \nnot be kept secure. Thus, once you have shared a master seed with \na collaborator, all you need to do is share the remaining seeds and your \ncollaborator can generate exactly the same password. Another important thing to \nnotice is that the generated password is dependent on the account and secret \nnames. Thus if you rename your account or your secret, the password will change.  \nSo you should be careful when you first create your account to name it \nappropriately so you don't feel the need to change it in the future. For \nexample, 'gmail' might not be a good account name if you expect to have multiple \nGmail accounts. In this case you might want to include your username in the \naccount name. You can always make the shorter 'gmail' as an account alias so you \ncan still access the account quickly.\n\n\nInstallation\n------------\n\nInstall with::\n\n   pip3 install --user avendesora\n\nThis will place avendesora in ~/.local/bin, which should be added to your path.\n\nYou will also need to install some operating system commands. On Fedora use::\n\n   dnf install gnupg2 xdotool xsel gobject-introspection-devel\n\nIf you would like to use scrypt as a way of encrypting fields, you will need to \ninstall scrypt by hand using::\n\n   pip3 install --user scrypt\n\n\nUpgrading\n---------\n\nAvendesora is primarily a password generator. As a result, there is always \na chance that something could change in the password generation algorithm that \ncauses the generated passwords to change. Of course, the program is thoroughly \ntested to assure this does not happen, but there is still a small chance that \nsomething slips through.  To assure that you are not affected by this, you \nshould archive your passwords before you upgrade with::\n\n   avendesora changed\n   avendesora archive\n\nThe *changed* command should always be run before an *archive* command. It \nallows you to review all the changes that have occurred so that you can verify \nthat they were all intentional.  Once you are comfortable, run the *archive* \ncommand to save all the changes.  Then upgrade with::\n\n   pip3 install -upgrade --user avendesora\n\nFinally, run::\n\n   avendesora changed\n\nto confirm that none of your generated passwords have changed.\n\nIt is a good idea to run 'avendesora changed' and 'avendesora archive' on \na routine basis to keep your archive up to date.\n\nUpon updating you may find that Avendesora produces a message that a 'hash' has \nchanged.  This is an indication that something has changed in the program that \ncould affect the generated secrets.  Again, care is taken when developing \nAvendesora to prevent this from happening.  But it is an indication that you \nshould take extra care.  Specifically you should follow the above procedure to \nassure that the value of your generated secrets have not changed.  Once you have \nconfirmed that the upgrade has not affected your generated secrets, you should \nfollow the directions given in the warning and update the appropriate hash \ncontained in ~/.config/avendesora/.hashes.\n\n\nRequirements\n------------\n\nGPG\n\"\"\"\nTo use Avendesora, you will need GPG and you will need a GPG ID that is \nassociated with a private key. That GPG ID could be in the form of an email \naddress or an ID string that can be found using 'gpg --list-keys'.\n\nIf you do not yet have a GPG key, you can get one using::\n\n   $ gpg --gen-key\n\nYou should probably choose 4096 RSA keys. Now, edit ~/.gnupg/gpg-conf and add \nthe line::\n\n   use-agent\n\nThat way, you generally need to give your GPG key pass phrase less often. The \nagent remembers the passphrase for you for a time. Ten minutes is the default, \nbut you can configure gpg-agent to cache passphrases for as long as you like.\n\nIf you use the agent, be sure to also use screen locking so your passwords are \nsecure when you walk away from your computer.\n\n\nVim\n\"\"\"\n\nIf you use Vim, it is very helpful for you to install GPG support in Vim. To do \nso first download::\n\n    http://www.vim.org/scripts/script.php?script_id=3645\n\nThen copy the file into your Vim configuration hierarchy::\n\n    cp gnupg.vim ~/.vim/plugin\n\n\nInitialization\n--------------\n\nTo operate, Avendesora needs a collection of configuration and accounts files \nthat are stored in ~/.config/avendesora. To create this directory and the \ninitial versions of these files, run::\n\n    avendesora init -g <gpg_id>\n\nFor example::\n\n    avendesora init -g bob@nurdletech.com\n\nor::\n\n    avendesora init -g 1B2AFA1C\n\nIf you would like to have more than one person access your passwords, you should \ngive GPG IDs for everyone::\n\n    avendesora init -g bob@nurdletech.com,rob@nurdletech.com\n\nAfter initialization, there should be several files in ~/.config/avendesora. In \nparticular, you should see at least an initial accounts files and a config file.\n\n\nConfiguration\n-------------\n\nThe config file (~/.config/avendesora/config) allows you to personalize \nAvendesora to your needs. After initializing your account you should take the \ntime to review the config file and adjust it to fit your needs. You should be \nvery thoughtful in this initial configuration, because some decisions (or \nnondecisions) you make can be very difficult to change later.  The reason for \nthis is that they may affect the passwords you generate, and if you change them \nyou may change existing generated passwords. In particular, be careful with \n*dictionary_file* and *default_passphase_separator*. Changing these values when \nfirst initializing Avendesora is fine, but should not be done or done very \ncarefully once you start creating accounts and secrets.\n\nDuring an initial configuration is also a convenient time to determine which of \nyour files should be encrypted with GPG. To assure that a file is encrypted, \ngive it a GPG file suffix (.gpg or .asc). The appropriate settings to adjust \nare: *archive_file*, *log_file*, both of which are set in the config file, and \nthe accounts files, which are found in ~/.config/avendesora/.accounts_files. For \nsecurity reasons it is highly recommended that the archive file be encrypted, \nand any accounts file that contain sensitive accounts. If you change the suffix \non an accounts file and you have not yet placed any accounts in that file, you \ncan simply delete the existing file and then regenerate it using::\n\n    avendesora init -g <gpg_id>\n\nAny files that already exist will not be touched, but any missing files will be \nrecreated, and this time they will be encrypted or not based on the extension \nyou give.\n\n\nUsing Avendesora\n----------------\n\nAvendesora supports a series of commands, the complete list of which can be had \nby running the help command::\n\n    > avendesora help\n\nMore information on a command is accessed by adding the name of the command as \nthe second argument to the help command::\n\n    > avendesora help name\n\nAs an aid to finding the right help topic the topics that contain a particular \nsearch term are listed by adding the -s or --search command line option::\n\n    > avendesora help -s term\n\nIf the first argument is not a command, then it must be the name of an account.  \nIn this case, the *credentials* command is run if only the account name is \ngiven, otherwise the *value* command is run (any options to the value command \nshould be given after the account name). The *credentials* command generally \ngives the information you would need to login to an account, typically the \nusername or email and the passcode.  The *value* command allows you to request \nthe value of a specific piece of information from the account. So for example::\n\n    > avendesora amazon\n    email: albert@ricochet.com\n    password: XDyfL5it\n\n    > avendesora citi pin\n    56713522\n\n    > avendesora southwest 0\n    questions.0 (First foreign country I visited): contour subtract impel\n\nIf you give a number for the desired value, Avendesora assumes you want the \nanswer to the corresponding security question.\n\n\nAccounts\n--------\n\nAvendesora holds information about your accounts in accounts files. The list of \ncurrent accounts files is contained in ~/.config/avendesora/.accounts_files.  \nEach is a possibly encrypted Python file. All information known about \na particular account is contained in the attributes of a class that is created \nfor that account. For example:\n\n.. code-block:: python\n\n    class BigBank(Account):\n        aliases = 'bb'\n        username = 'gman33'\n        email = 'gman33@pizza.com'\n        urls = 'https://bigbank.com/login'\n        passcode = Password(length=12)\n        verbal = Passphrase(length=2)\n        pin = PIN()\n        accounts = {\n            'checking':   Hidden('MTIzNDU2Nzg='),\n            'savings':    Hidden('MjM0NTY3ODk='),\n            'creditcard': Hidden('ODczMi0yODk0LTI4NjEtMjgxMA=='),\n        }\n        questions = [\n            Question('What city were you born in?'),\n            Question('What street did you grow up on?'),\n            Question('What was your childhood nickname?'),\n        ]\n        customer_service = '1-866-229-6633'\n\nEach attribute represents a piece of information that can be requested. For \nexample, a summary of all information can be requested with::\n\n    > avendesora values bb\n    names: bigbank, bb\n    accounts:\n        checking: <reveal with 'avendesora show bigbank accounts.checking'>\n        creditcard: <reveal with 'avendesora show bigbank accounts.creditcard'>\n        savings: <reveal with 'avendesora show bigbank accounts.savings'>\n    customer service: 1-866-229-6633\n    email: gman33@pizza.com\n    passcode: <reveal with 'avendesora show bigbank passcode'>\n    pin: <reveal with 'avendesora show bigbank pin'>\n    questions:\n        0: What city were you born in? <reveal with 'avendesora show bigbank questions.0'>\n        1: What street did you grow up on? <reveal with 'avendesora show bigbank questions.1'>\n        2: What was your childhood nickname? <reveal with 'avendesora show bigbank questions.2'>\n    urls: https://bigbank.com/login\n    username: gman33\n    verbal: <reveal with 'avendesora show bigbank verbal'>\n\nThe attributes have various levels of confidentiality.  Simple strings are not \nconsidered sensitive. Those values provided by Python classes inherit the \nconfidentiality of the class.  Hide() and Hidden() provides simple concealment.  \nGPG() and Scrypt() provides full encryption. And classes like Password(), \nPasswordRecipe(), Passphrase(), PIN() and Question() generate secrets.  \nAttributes that are considered sensitive are not shown in the above summary, but \ncan be requested individually::\n\n    > avendesora value bb pin\n    pin: 7784\n\nAttributes can be simple scalars, such as *pin*. They can be arrays, such as \n*questions*::\n\n    > avendesora value bigbank questions.1\n    questions.1 (What street did you grow up on?): lockout insulator crumb\n\nOr they can be dictionaries::\n\n    > avendesora value bb accounts.checking\n    accounts.checking: 12345678\n\nThe passcode attribute is the default scalar attribute::\n\n    > avendesora value bb\n    passcode: Nj3gpqHNfiie\n\nThe questions attribute is the default array attribute, which is used if the \nrequested field is a number::\n\n    > avendesora value bb 0\n    questions.0 (What city were you born in?): muffin favorite boyfriend\n\nYou can also use simple scripts as the requested value::\n\n    > avendesora value 'username: {username}, password: {passcode}'\n    username: gman33, password: Nj3gpqHNfiie\n\nFinally, the attributes themselves may be scripts. For example, if you added the \nfollowing to you account::\n\n    cc = Script('{accounts.creditcard} 02/23 363')\n\nThen you could access a summary of your credit card information with::\n\n    > avendesora value cc\n    8732-2894-2861-2810 02/23 363\n\n\nAdding And Editing Accounts\n---------------------------\n\nYou add new accounts using the *add* command::\n\n    > avendesora add [<template>]\n\nThe available templates can be found using::\n\n    > avendesora help add\n\nYou can add new templates or edit the existing templates by changing \n*account_templates* in ~/.config/avendesora/config.\n\nThe *add* command will open your editor (set this with the *edit_template* \nsetting in the config file). If you are using default version of *edit_template* \nthe template will be opened in Vim with the *n* key is mapped to take you to the \nnext field. You can edit any part of the template you like, but at a minimum you \nneed to edit the fields.\n\nOnce an account exists, you can edit it using::\n\n    > avendesora edit [<account>]\n\nThis opens the accounts file with your editor (set this with the *edit_account* \nsetting in the config file). If you are using default version of *edit_account*, \nwhich uses VIM, it should take you directly to the account.\n\n\nFinding Accounts\n----------------\n\nThere are two ways of finding accounts. First, you can list any accounts whose \nname or aliases contains a text fragment. For example::\n\n    > avendesora find bank\n    bank:\n        bankofamerica (boa)\n\nSecond, you can list any accounts that contain a text fragment in any non-secret \nfield. For example::\n\n    > avendesora search 4408\n    4408:\n        bankofamerica (boa)\n\n\nAutotyping Passwords\n--------------------\n\nThere are a couple of things that must be done to enable autotyping of \npasswords. First, at least some secrets must be configured for discovery.  \nDiscovery allows secrets to determine whether they are good candidates for use \nin a particular situation based on the environment. The environment includes \nsuch things as with title of the active window, the user name, the host name, \netc.  If multiple secrets are suitable, a small window pops up and lets you \nchoose between them. To see how to configure secrets for discovery, run \n'avendesora help discovery'.\n\nTo make secret discovery easier and more robust it is helpful to add a plugin to \nyour web browser to make its title more informative. For Firefox, the best \nplugin to use is *AddURLToWindowTitle*. For Chrome it is *URLinTitle*. (The \nlatest versions of Firefox are incompatible with *AddURLToWindowTitle*, however \nyou can use the Firefox version of *URLinTitle* instead.) It is recommended that \nyou install the appropriate one into your browser.  For AddURLToWindowTitle, set \nthe following options:\n\n  | show full URL = yes\n  | separator string = '-'\n  | show field attributes = no\n\nFor URLinTitle, set:\n\n  | tab title format = '{title} - {protocol}://{hostname}{port}/{path}'\n\nFinally, you need to configure your window manager to run Avendesora when you \ntype a special hot key, such as ``Alt p``.  The idea is that you are in \na situation where you need a secret, such as visiting your bank's website in \nyour browser, then you click on the account name field with your mouse and type \nyour hot key. This runs Avendesora without an account name. In this case, \nAvendesora uses secret discovery to determine which secret to use and the script \nthat should be used to produce the required information. Generally the script \nwould be to enter the account name, then tab, then the password, and finally \nreturn, but you can configure the script as you choose. This is all done as part \nof configuring discovery. The method for associating Avendesora to a particular \nhot key is dependent on your window manager. With Gnome, it requires that you \nopen your Keyboard Shortcuts preferences and create a new shortcut. When you do \nthis, choose 'avendesora value' as the command to run.\n\n\nPython API\n----------\n\nYou can access account information from Avendesora using Python using a simple \nrelatively high-level interface as shown in this example:\n\n.. code-block:: python\n\n    from avendesora import PasswordGenerator, PasswordError\n    from inform import display, fatal, os_error\n    from shlib import Run\n    from pathlib import Path\n\n    try:\n        pw = PasswordGenerator()\n        account = pw.get_account('mybank')\n        name = account.get_value('NAME')\n        username = account.get_value('username')\n        passcode = account.get_value('passcode')\n        url = account.get_value('ofxurl')\n    except PasswordError as err:\n        fatal(err)\n\n    try:\n        curl = Run(f'curl --user {username!s}:{passcode!s} {url!s}', 'sOEW0')\n        Path(f'{name!s}.ofx').write_text(curl.stdout)\n    except OSError as err:\n        fatal(os_error(err))\n\n\nPasswordGenerator():\n    Initializes the password generator. You should pass no arguments.\n\nget_account(name, request_seed=False, stealth_name=None):\n    Accesses a particular account. Takes a string for the account name or alias.  \n    The name is case insensitive and the '-' may be given for '_'.\n\n    Optionally takes a second argument (*request_seed*) that may be a Boolean, \n    a string, or a function that returns a string. The string is used as an \n    additional seed (see: `avendesora help misdirection`), and if True is passed \n    in, the user in queried for the seed.\n\n    The stealth name is used as account name if the account is a stealth \n    account.\n\n\nget_name():\n    return name of account.\n\nget_value(field):\n    Returns the value of a particular account attribute given a user-oriented \n    string that describes the desired attribute.  The value requested must be \n    a scalar value, meaning that you must individually request members of arrays \n    or dictionary attributes. Here are some examples that demonstrate the various \n    ways of accessing the various kinds of attributes:\n\n    .. code-block:: python\n\n        passcode = account.get_value()\n        username = account.get_value('username')\n        both = account.get_value('username: {username}, password: {passcode}')\n        checking = account.get_value('accounts.checking')\n        savings = account.get_value('accounts[checking]')\n        answer0 = account.get_value(0)\n        answer1 = account.get_value('questions.1')\n        answer2 = account.get_value('questions[2]')\n\n    If the argument passed to get_value is a field, then it may consist of \n    a name (the identifier for the first level of the field) and a key (the \n    identifier for the second level of the field). The field is case insensitive \n    and a '-' will match a '_' and visa versa.\n\n    You can also specify the name and key separately in a tuple:\n\n    .. code-block:: python\n\n        username = account.get_value(('username',))\n        checking = account.get_value(('accounts', 'checking'))\n        answer0 = account.get_value((0,))\n        answer1 = account.get_value(('questions', 1))\n\n    The value is returned as an object that contains four attributes, value (the \n    actual value), is_secret (whether the value is secret or contains a secret), \n    name (the name of the value), and desc (the description, contains the actual \n    question of the answer to a question is requested).  Converting the object \n    to a string returns the value rendered as a string.  There is also the \n    render() method that returns a string that combines the name and the \n    description with the value. It takes an optional collection of format \n    strings, the first one that matches is used. The format strings may contain \n    keys in braces that get replaced by the corresponding attributes. The known \n    keys are n {name}, k (key), f (field, combination of name and key), \n    d (description) and v (value).  A format string does not match it if \n    contains a key for a value that is not available. If no format string \n    matches, the value is returned as a string.  The default formats are ('{f} \n    ({d}): {v}', '{f}: {v}').\n\n    If a composite field is requested get_value() raises a PasswordError, and \n    the exception contains the *is_collection* and *collection* attributes. The \n    first is a Boolean and the second is the list of available keys.  \n    PassworError returns None for unknown attributes, so it is always safe to \n    access these attributes without checking whether they exist.\n\nget_values(field):\n    Used to get the values for a composite field. It iterates through the value \n    and returns a tuple that contains the key and the value for each item in the \n    field.\n\n    Field is an identifier that may consist of a name (the identifier for the \n    first level of the field) and a key (the identifier for the second level of \n    the field).  The field is case insensitive and a '-' will match a '_' and \n    visa versa.\n\n    Here is how you might iterate through both the scalar and composite values \n    in an account:\n\n    .. code-block:: python\n\n        try:\n            value = acct.get_value(field)\n            lines += value.render('{n}: {v}').split('\\n')\n        except PasswordError as e:\n            if not e.is_collection:\n                raise\n            lines += [name + ':']\n            for key, value in acct.get_values(name):\n                lines += indent(\n                    value.render(('{k}) {d}: {v}', '{k}: {v}'))\n                ).split('\\n')\n\nget_fields():\n    Iterates through the fields, each iteration yields a name and possibly \n    a collection of keys ([None] is returned if the name corresponds to \n    a scalar).  The name and keys returned are the resolved names, which can be \n    passed to get_scalar() and get_composite().\n\n    Here is how this method can be used to iterate through the account values:\n\n    .. code-block:: python\n\n        # gather user fields\n        lines = []\n        for field, keys in account.get_fields():\n            if keys == [None]:\n                v = account.get_value(field)\n                lines += v.render('{n}: {v}').split('\\n')\n            else:\n                lines.append(field + ':')\n                for k, v in account.get_values(field):\n                    lines += indent(\n                        v.render(('{k}) {d}: {v}', '{k}: {v}'))\n                    ).split('\\n')\n        account_summary = '\\n'.join(lines)\n\n    get_fields() accepts a Boolean argument that if specified and is true will \n    iterate through all fields, including those generally only used by \n    Avendesora, such as aliases and discovery.\n\n\nget_scalar(name, key=None, default=False):\n    A lower level interface than get_value that given a name and perhaps a key \n    returns a scalar value.  Also takes an optional default value that is \n    returned if the value is not found. Unlike get_value, the actual value is \n    returned, not a object that contains multiple facets of the value. Also, the \n    name and key must match exactly.\n\n    The name is the field name, and the key would identity which value is \n    desired if the field is a composite. If default is False, an error is raise \n    if the value is not present, otherwise the default value itself is returned.\n\n    If the value returned is an Avendesora object (GeneratedSecret,\n    ObscuredSecret, Script), then you should cast it to a string to get its\n    resolved value.\n\nget_composite(name):\n    A lower level interface than get_value that given a name returns the value \n    of the associated field, which may be a scalar (string or integer) or \n    a composite (array of dictionary).  Unlike get_value, the actual value is \n    returned, not a object that contains multiple facets of the value.  Also, \n    the name and key must match exactly.\n\n    If the value returned is an Avendesora object (GeneratedSecret,\n    ObscuredSecret, Script), then you should cast it to a string to get its\n    resolved value.\n\nAPI Example\n-----------\n\nThe following example creates encrypted files that contain account information \nthat would be needed by close family members and by a business partner in case \nanything happened to you.  This is an abbreviated version of an example given in \nthe users' guide.\n\n.. code-block:: python\n\n    #!/bin/env python3\n\n    from avendesora import PasswordGenerator, PasswordError\n    from textwrap import dedent\n    from inform import (\n        display, done, Error, error, indent, is_collection, os_error\n    )\n    import gnupg\n\n\n    files = [\n        {   'FILENAME': 'family.gpg',\n            'RECIPIENTS': 'me@home.com son@home.com daughter@home.com'.split(),\n            'ACCOUNTS': 'bank brokerage creditcard'.split(),\n        },\n        {   'FILENAME': 'partner.gpg',\n            'RECIPIENTS': 'me@work.com partner@work.com'.split(),\n            'ACCOUNTS': 'login ssh root backups'.split(),\n        },\n    ]\n\n    try:\n        pw = PasswordGenerator()\n\n        for each in files:\n            accounts = []\n            for account_name in each['ACCOUNTS']:\n                acct = pw.get_account(account_name)\n                title = acct.get_scalar('desc', default=account_name)\n                lines = [title, len(title)*'=']\n\n                for name, keys in acct.get_fields():\n                    if keys:\n                        lines.append(name + ':')\n                        for key, value in acct.get_values(name):\n                            lines += indent(\n                                value.render(('{k}) {d}: {v}', '{k}: {v}'))\n                            ).split('\\n')\n                    else:\n                        value = acct.get_value(name)\n                        lines += value.render('{n}: {v}').split('\\n')\n                accounts.append('\\n'.join(lines))\n\n            gpg = gnupg.GPG(gpgbinary='gpg2')\n            encrypted = gpg.encrypt('\\n\\n\\n'.join(accounts), each['RECIPIENTS'])\n            if not encrypted.ok:\n                raise Error(\n                    'unable to encrypt:', encrypted.stderr, culprit=each['FILENAME']\n                )\n            try:\n                with open(each['FILENAME'], 'w') as file:\n                    file.write(str(encrypted))\n                print(\"%s: created.\" % each['FILENAME'])\n            except OSError as e:\n                raise Error(os_error(e))\n\n    except (PasswordError, Error) as e:\n        e.terminate()\n\n\nGetting Help\n------------\n\nYou can find the documentation on `ReadTheDocs <https://avendesora.readthedocs.io>`_.\n\nThe *help* command provides information on how to use Avendesora's various \nfeatures.  To get a listing of the topics available, use::\n\n    avendesora help\n\nThen, for information on a specific topic use::\n\n    avendesora help <topic>\n\nIt is worth browsing all of the available topics at least once to get a sense of \nall that Avendesora can do.\n\n\nContributing\n------------\n\nPlease ask questions or report bugs on `Github Issues \n<https://github.com/KenKundert/avendesora/issues>`_. I will entertain pull \nrequests if you make improvements. Currently *Avendesora* is very *Fedora* and \n*VIM* centric. I am particularly interested in help adapting *Avendesora* in the \nfollowing ways:\n\n- Support for other editors, window managers and distributions.\n- Support for Windows and OSX.\n- Support for Android and iOS (perhaps through exports to a password manager \n  that already support smartphones).", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/kenkundert/avendesora/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://avendesora.readthedocs.io", "keywords": "avendesora,password,XKCD", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "avendesora", "package_url": "https://pypi.org/project/avendesora/", "platform": "", "project_url": "https://pypi.org/project/avendesora/", "project_urls": {"Download": "https://github.com/kenkundert/avendesora/tarball/master", "Homepage": "https://avendesora.readthedocs.io"}, "release_url": "https://pypi.org/project/avendesora/1.17.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "summary": "A password generator and account manager.", "version": "1.17.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Avendesora, the leaf of the Tree of Life is the key.</em></p>\n<a href=\"https://travis-ci.org/KenKundert/avendesora\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/KenKundert/avendesora/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d50e2da1df9073b89529b4e77a637068744c02e9/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4b656e4b756e646572742f6176656e6465736f72612f6d61737465722e737667\"></a>\n<a href=\"https://coveralls.io/r/KenKundert/avendesora\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/KenKundert/avendesora.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07202bea78d070c9fabca463adb435711a20f896/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4b656e4b756e646572742f6176656e6465736f72612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/avendesora\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/avendesora.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2068611b1b10feb2cde1d4abea5816519991b8fc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6176656e6465736f72612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/avendesora/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/avendesora.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54ee68520c0a28924e954fc96326788bfa2fc2e6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6176656e6465736f72612e737667\"></a>\n<a href=\"https://requires.io/github/KenKundert/avendesora/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f2d9334f4972d3a6dde136c6f48127937040fd7/68747470733a2f2f72657175697265732e696f2f6769746875622f4b656e4b756e646572742f6176656e6465736f72612f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Authors:</th><td>Ken &amp; Kale Kundert</td>\n</tr>\n<tr><th>Version:</th><td>1.17.0</td>\n</tr>\n<tr><th>Released:</th><td>2020-04-15</td>\n</tr>\n</tbody>\n</table>\n<p>Avendesora replaces Abraxas, which are both alternatives to the traditional\npassword vault.</p>\n<p>Please report all bugs and suggestions to <a href=\"mailto:avendesora%40nurdletech.com\">avendesora<span>@</span>nurdletech<span>.</span>com</a></p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Avendesora is powerful command-line utility that can securely hold and\nconveniently provide access to a wide variety of information about your\naccounts, including its secrets such as passwords. Account values can be\ndisplayed, copied to the clipboard, or automatically typed into running\napplications such as you web browser or terminal windows.  Avendesora can also\nopen accounts in your web browser, automatically recognize which account to use\nbased on the window title, and warn you if the browser is not using encryption\nwhen you go to enter your password.</p>\n<p>Account secrets can be saved in encrypted form, as with password vaults, or\ngenerated from a root secret.  Generated secrets have two important benefits.\nFirst, they are produced from a random seed, and so are quite unpredictable.\nThis is important, because the predictability of a passwords can be exploited\nwhen cracking passwords.  Second, if a root secret is shared with another\ntrusted party, then you both can generate new shared secrets without passing any\nfurther secrets.</p>\n<p>Secrets are generated from a collection of seeds, one of which must be random\nwith a very high degree of entropy. The random seed is referred to as the\n\u2018master seed\u2019 or the \u2018root seed\u2019.  It is extremely important that the master\nseed remain completely secure.  Never disclose a master seed to anyone except\nfor a person you wish to collaborate with, and then only used the shared master\nseed for shared secrets.  All of your private secrets should be generated from\nprivate master seeds.  The seeds generally include the master seed, the account\nname, the secret name, and perhaps a version name.  For example, imagine having\na Gmail account, then the account name might simply be \u2018gmail\u2019, and the secret\nname might be \u2018passcode\u2019.  In this case, your master seed is combined with the\nwords \u2018gmail\u2019 and \u2018passcode\u2019, the combination is hashed, and then password is\ngenerated with an appropriate recipe that you specify.  There are recipes for\npasswords, pass phrases, PINs, security questions, etc.  The password itself is\nnot stored, rather it is the seeds that are stored and the password is\nregenerated when needed. Notice that all the seeds except the master seed need\nnot be kept secure. Thus, once you have shared a master seed with\na collaborator, all you need to do is share the remaining seeds and your\ncollaborator can generate exactly the same password. Another important thing to\nnotice is that the generated password is dependent on the account and secret\nnames. Thus if you rename your account or your secret, the password will change.\nSo you should be careful when you first create your account to name it\nappropriately so you don\u2019t feel the need to change it in the future. For\nexample, \u2018gmail\u2019 might not be a good account name if you expect to have multiple\nGmail accounts. In this case you might want to include your username in the\naccount name. You can always make the shorter \u2018gmail\u2019 as an account alias so you\ncan still access the account quickly.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with:</p>\n<pre>pip3 install --user avendesora\n</pre>\n<p>This will place avendesora in ~/.local/bin, which should be added to your path.</p>\n<p>You will also need to install some operating system commands. On Fedora use:</p>\n<pre>dnf install gnupg2 xdotool xsel gobject-introspection-devel\n</pre>\n<p>If you would like to use scrypt as a way of encrypting fields, you will need to\ninstall scrypt by hand using:</p>\n<pre>pip3 install --user scrypt\n</pre>\n</div>\n<div id=\"upgrading\">\n<h2>Upgrading</h2>\n<p>Avendesora is primarily a password generator. As a result, there is always\na chance that something could change in the password generation algorithm that\ncauses the generated passwords to change. Of course, the program is thoroughly\ntested to assure this does not happen, but there is still a small chance that\nsomething slips through.  To assure that you are not affected by this, you\nshould archive your passwords before you upgrade with:</p>\n<pre>avendesora changed\navendesora archive\n</pre>\n<p>The <em>changed</em> command should always be run before an <em>archive</em> command. It\nallows you to review all the changes that have occurred so that you can verify\nthat they were all intentional.  Once you are comfortable, run the <em>archive</em>\ncommand to save all the changes.  Then upgrade with:</p>\n<pre>pip3 install -upgrade --user avendesora\n</pre>\n<p>Finally, run:</p>\n<pre>avendesora changed\n</pre>\n<p>to confirm that none of your generated passwords have changed.</p>\n<p>It is a good idea to run \u2018avendesora changed\u2019 and \u2018avendesora archive\u2019 on\na routine basis to keep your archive up to date.</p>\n<p>Upon updating you may find that Avendesora produces a message that a \u2018hash\u2019 has\nchanged.  This is an indication that something has changed in the program that\ncould affect the generated secrets.  Again, care is taken when developing\nAvendesora to prevent this from happening.  But it is an indication that you\nshould take extra care.  Specifically you should follow the above procedure to\nassure that the value of your generated secrets have not changed.  Once you have\nconfirmed that the upgrade has not affected your generated secrets, you should\nfollow the directions given in the warning and update the appropriate hash\ncontained in ~/.config/avendesora/.hashes.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<div id=\"gpg\">\n<h3>GPG</h3>\n<p>To use Avendesora, you will need GPG and you will need a GPG ID that is\nassociated with a private key. That GPG ID could be in the form of an email\naddress or an ID string that can be found using \u2018gpg \u2013list-keys\u2019.</p>\n<p>If you do not yet have a GPG key, you can get one using:</p>\n<pre>$ gpg --gen-key\n</pre>\n<p>You should probably choose 4096 RSA keys. Now, edit ~/.gnupg/gpg-conf and add\nthe line:</p>\n<pre>use-agent\n</pre>\n<p>That way, you generally need to give your GPG key pass phrase less often. The\nagent remembers the passphrase for you for a time. Ten minutes is the default,\nbut you can configure gpg-agent to cache passphrases for as long as you like.</p>\n<p>If you use the agent, be sure to also use screen locking so your passwords are\nsecure when you walk away from your computer.</p>\n</div>\n<div id=\"vim\">\n<h3>Vim</h3>\n<p>If you use Vim, it is very helpful for you to install GPG support in Vim. To do\nso first download:</p>\n<pre>http://www.vim.org/scripts/script.php?script_id=3645\n</pre>\n<p>Then copy the file into your Vim configuration hierarchy:</p>\n<pre>cp gnupg.vim ~/.vim/plugin\n</pre>\n</div>\n</div>\n<div id=\"initialization\">\n<h2>Initialization</h2>\n<p>To operate, Avendesora needs a collection of configuration and accounts files\nthat are stored in ~/.config/avendesora. To create this directory and the\ninitial versions of these files, run:</p>\n<pre>avendesora init -g &lt;gpg_id&gt;\n</pre>\n<p>For example:</p>\n<pre>avendesora init -g bob@nurdletech.com\n</pre>\n<p>or:</p>\n<pre>avendesora init -g 1B2AFA1C\n</pre>\n<p>If you would like to have more than one person access your passwords, you should\ngive GPG IDs for everyone:</p>\n<pre>avendesora init -g bob@nurdletech.com,rob@nurdletech.com\n</pre>\n<p>After initialization, there should be several files in ~/.config/avendesora. In\nparticular, you should see at least an initial accounts files and a config file.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The config file (~/.config/avendesora/config) allows you to personalize\nAvendesora to your needs. After initializing your account you should take the\ntime to review the config file and adjust it to fit your needs. You should be\nvery thoughtful in this initial configuration, because some decisions (or\nnondecisions) you make can be very difficult to change later.  The reason for\nthis is that they may affect the passwords you generate, and if you change them\nyou may change existing generated passwords. In particular, be careful with\n<em>dictionary_file</em> and <em>default_passphase_separator</em>. Changing these values when\nfirst initializing Avendesora is fine, but should not be done or done very\ncarefully once you start creating accounts and secrets.</p>\n<p>During an initial configuration is also a convenient time to determine which of\nyour files should be encrypted with GPG. To assure that a file is encrypted,\ngive it a GPG file suffix (.gpg or .asc). The appropriate settings to adjust\nare: <em>archive_file</em>, <em>log_file</em>, both of which are set in the config file, and\nthe accounts files, which are found in ~/.config/avendesora/.accounts_files. For\nsecurity reasons it is highly recommended that the archive file be encrypted,\nand any accounts file that contain sensitive accounts. If you change the suffix\non an accounts file and you have not yet placed any accounts in that file, you\ncan simply delete the existing file and then regenerate it using:</p>\n<pre>avendesora init -g &lt;gpg_id&gt;\n</pre>\n<p>Any files that already exist will not be touched, but any missing files will be\nrecreated, and this time they will be encrypted or not based on the extension\nyou give.</p>\n</div>\n<div id=\"using-avendesora\">\n<h2>Using Avendesora</h2>\n<p>Avendesora supports a series of commands, the complete list of which can be had\nby running the help command:</p>\n<pre>&gt; avendesora help\n</pre>\n<p>More information on a command is accessed by adding the name of the command as\nthe second argument to the help command:</p>\n<pre>&gt; avendesora help name\n</pre>\n<p>As an aid to finding the right help topic the topics that contain a particular\nsearch term are listed by adding the -s or \u2013search command line option:</p>\n<pre>&gt; avendesora help -s term\n</pre>\n<p>If the first argument is not a command, then it must be the name of an account.\nIn this case, the <em>credentials</em> command is run if only the account name is\ngiven, otherwise the <em>value</em> command is run (any options to the value command\nshould be given after the account name). The <em>credentials</em> command generally\ngives the information you would need to login to an account, typically the\nusername or email and the passcode.  The <em>value</em> command allows you to request\nthe value of a specific piece of information from the account. So for example:</p>\n<pre>&gt; avendesora amazon\nemail: albert@ricochet.com\npassword: XDyfL5it\n\n&gt; avendesora citi pin\n56713522\n\n&gt; avendesora southwest 0\nquestions.0 (First foreign country I visited): contour subtract impel\n</pre>\n<p>If you give a number for the desired value, Avendesora assumes you want the\nanswer to the corresponding security question.</p>\n</div>\n<div id=\"accounts\">\n<h2>Accounts</h2>\n<p>Avendesora holds information about your accounts in accounts files. The list of\ncurrent accounts files is contained in ~/.config/avendesora/.accounts_files.\nEach is a possibly encrypted Python file. All information known about\na particular account is contained in the attributes of a class that is created\nfor that account. For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BigBank</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"p\">):</span>\n    <span class=\"n\">aliases</span> <span class=\"o\">=</span> <span class=\"s1\">'bb'</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s1\">'gman33'</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">'gman33@pizza.com'</span>\n    <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"s1\">'https://bigbank.com/login'</span>\n    <span class=\"n\">passcode</span> <span class=\"o\">=</span> <span class=\"n\">Password</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n    <span class=\"n\">verbal</span> <span class=\"o\">=</span> <span class=\"n\">Passphrase</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">pin</span> <span class=\"o\">=</span> <span class=\"n\">PIN</span><span class=\"p\">()</span>\n    <span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'checking'</span><span class=\"p\">:</span>   <span class=\"n\">Hidden</span><span class=\"p\">(</span><span class=\"s1\">'MTIzNDU2Nzg='</span><span class=\"p\">),</span>\n        <span class=\"s1\">'savings'</span><span class=\"p\">:</span>    <span class=\"n\">Hidden</span><span class=\"p\">(</span><span class=\"s1\">'MjM0NTY3ODk='</span><span class=\"p\">),</span>\n        <span class=\"s1\">'creditcard'</span><span class=\"p\">:</span> <span class=\"n\">Hidden</span><span class=\"p\">(</span><span class=\"s1\">'ODczMi0yODk0LTI4NjEtMjgxMA=='</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">questions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"s1\">'What city were you born in?'</span><span class=\"p\">),</span>\n        <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"s1\">'What street did you grow up on?'</span><span class=\"p\">),</span>\n        <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"s1\">'What was your childhood nickname?'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">customer_service</span> <span class=\"o\">=</span> <span class=\"s1\">'1-866-229-6633'</span>\n</pre>\n<p>Each attribute represents a piece of information that can be requested. For\nexample, a summary of all information can be requested with:</p>\n<pre>&gt; avendesora values bb\nnames: bigbank, bb\naccounts:\n    checking: &lt;reveal with 'avendesora show bigbank accounts.checking'&gt;\n    creditcard: &lt;reveal with 'avendesora show bigbank accounts.creditcard'&gt;\n    savings: &lt;reveal with 'avendesora show bigbank accounts.savings'&gt;\ncustomer service: 1-866-229-6633\nemail: gman33@pizza.com\npasscode: &lt;reveal with 'avendesora show bigbank passcode'&gt;\npin: &lt;reveal with 'avendesora show bigbank pin'&gt;\nquestions:\n    0: What city were you born in? &lt;reveal with 'avendesora show bigbank questions.0'&gt;\n    1: What street did you grow up on? &lt;reveal with 'avendesora show bigbank questions.1'&gt;\n    2: What was your childhood nickname? &lt;reveal with 'avendesora show bigbank questions.2'&gt;\nurls: https://bigbank.com/login\nusername: gman33\nverbal: &lt;reveal with 'avendesora show bigbank verbal'&gt;\n</pre>\n<p>The attributes have various levels of confidentiality.  Simple strings are not\nconsidered sensitive. Those values provided by Python classes inherit the\nconfidentiality of the class.  Hide() and Hidden() provides simple concealment.\nGPG() and Scrypt() provides full encryption. And classes like Password(),\nPasswordRecipe(), Passphrase(), PIN() and Question() generate secrets.\nAttributes that are considered sensitive are not shown in the above summary, but\ncan be requested individually:</p>\n<pre>&gt; avendesora value bb pin\npin: 7784\n</pre>\n<p>Attributes can be simple scalars, such as <em>pin</em>. They can be arrays, such as\n<em>questions</em>:</p>\n<pre>&gt; avendesora value bigbank questions.1\nquestions.1 (What street did you grow up on?): lockout insulator crumb\n</pre>\n<p>Or they can be dictionaries:</p>\n<pre>&gt; avendesora value bb accounts.checking\naccounts.checking: 12345678\n</pre>\n<p>The passcode attribute is the default scalar attribute:</p>\n<pre>&gt; avendesora value bb\npasscode: Nj3gpqHNfiie\n</pre>\n<p>The questions attribute is the default array attribute, which is used if the\nrequested field is a number:</p>\n<pre>&gt; avendesora value bb 0\nquestions.0 (What city were you born in?): muffin favorite boyfriend\n</pre>\n<p>You can also use simple scripts as the requested value:</p>\n<pre>&gt; avendesora value 'username: {username}, password: {passcode}'\nusername: gman33, password: Nj3gpqHNfiie\n</pre>\n<p>Finally, the attributes themselves may be scripts. For example, if you added the\nfollowing to you account:</p>\n<pre>cc = Script('{accounts.creditcard} 02/23 363')\n</pre>\n<p>Then you could access a summary of your credit card information with:</p>\n<pre>&gt; avendesora value cc\n8732-2894-2861-2810 02/23 363\n</pre>\n</div>\n<div id=\"adding-and-editing-accounts\">\n<h2>Adding And Editing Accounts</h2>\n<p>You add new accounts using the <em>add</em> command:</p>\n<pre>&gt; avendesora add [&lt;template&gt;]\n</pre>\n<p>The available templates can be found using:</p>\n<pre>&gt; avendesora help add\n</pre>\n<p>You can add new templates or edit the existing templates by changing\n<em>account_templates</em> in ~/.config/avendesora/config.</p>\n<p>The <em>add</em> command will open your editor (set this with the <em>edit_template</em>\nsetting in the config file). If you are using default version of <em>edit_template</em>\nthe template will be opened in Vim with the <em>n</em> key is mapped to take you to the\nnext field. You can edit any part of the template you like, but at a minimum you\nneed to edit the fields.</p>\n<p>Once an account exists, you can edit it using:</p>\n<pre>&gt; avendesora edit [&lt;account&gt;]\n</pre>\n<p>This opens the accounts file with your editor (set this with the <em>edit_account</em>\nsetting in the config file). If you are using default version of <em>edit_account</em>,\nwhich uses VIM, it should take you directly to the account.</p>\n</div>\n<div id=\"finding-accounts\">\n<h2>Finding Accounts</h2>\n<p>There are two ways of finding accounts. First, you can list any accounts whose\nname or aliases contains a text fragment. For example:</p>\n<pre>&gt; avendesora find bank\nbank:\n    bankofamerica (boa)\n</pre>\n<p>Second, you can list any accounts that contain a text fragment in any non-secret\nfield. For example:</p>\n<pre>&gt; avendesora search 4408\n4408:\n    bankofamerica (boa)\n</pre>\n</div>\n<div id=\"autotyping-passwords\">\n<h2>Autotyping Passwords</h2>\n<p>There are a couple of things that must be done to enable autotyping of\npasswords. First, at least some secrets must be configured for discovery.\nDiscovery allows secrets to determine whether they are good candidates for use\nin a particular situation based on the environment. The environment includes\nsuch things as with title of the active window, the user name, the host name,\netc.  If multiple secrets are suitable, a small window pops up and lets you\nchoose between them. To see how to configure secrets for discovery, run\n\u2018avendesora help discovery\u2019.</p>\n<p>To make secret discovery easier and more robust it is helpful to add a plugin to\nyour web browser to make its title more informative. For Firefox, the best\nplugin to use is <em>AddURLToWindowTitle</em>. For Chrome it is <em>URLinTitle</em>. (The\nlatest versions of Firefox are incompatible with <em>AddURLToWindowTitle</em>, however\nyou can use the Firefox version of <em>URLinTitle</em> instead.) It is recommended that\nyou install the appropriate one into your browser.  For AddURLToWindowTitle, set\nthe following options:</p>\n<blockquote>\n<div>\n<div>show full URL = yes</div>\n<div>separator string = \u2018-\u2018</div>\n<div>show field attributes = no</div>\n</div>\n</blockquote>\n<p>For URLinTitle, set:</p>\n<blockquote>\n<div>\n<div>tab title format = \u2018{title} - {protocol}://{hostname}{port}/{path}\u2019</div>\n</div>\n</blockquote>\n<p>Finally, you need to configure your window manager to run Avendesora when you\ntype a special hot key, such as <tt>Alt p</tt>.  The idea is that you are in\na situation where you need a secret, such as visiting your bank\u2019s website in\nyour browser, then you click on the account name field with your mouse and type\nyour hot key. This runs Avendesora without an account name. In this case,\nAvendesora uses secret discovery to determine which secret to use and the script\nthat should be used to produce the required information. Generally the script\nwould be to enter the account name, then tab, then the password, and finally\nreturn, but you can configure the script as you choose. This is all done as part\nof configuring discovery. The method for associating Avendesora to a particular\nhot key is dependent on your window manager. With Gnome, it requires that you\nopen your Keyboard Shortcuts preferences and create a new shortcut. When you do\nthis, choose \u2018avendesora value\u2019 as the command to run.</p>\n</div>\n<div id=\"python-api\">\n<h2>Python API</h2>\n<p>You can access account information from Avendesora using Python using a simple\nrelatively high-level interface as shown in this example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">avendesora</span> <span class=\"kn\">import</span> <span class=\"n\">PasswordGenerator</span><span class=\"p\">,</span> <span class=\"n\">PasswordError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">inform</span> <span class=\"kn\">import</span> <span class=\"n\">display</span><span class=\"p\">,</span> <span class=\"n\">fatal</span><span class=\"p\">,</span> <span class=\"n\">os_error</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shlib</span> <span class=\"kn\">import</span> <span class=\"n\">Run</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"n\">PasswordGenerator</span><span class=\"p\">()</span>\n    <span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"s1\">'mybank'</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'NAME'</span><span class=\"p\">)</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">)</span>\n    <span class=\"n\">passcode</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'passcode'</span><span class=\"p\">)</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'ofxurl'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">PasswordError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n    <span class=\"n\">fatal</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">curl</span> <span class=\"o\">=</span> <span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'curl --user </span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">!s}</span><span class=\"s1\">:</span><span class=\"si\">{</span><span class=\"n\">passcode</span><span class=\"si\">!s}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">url</span><span class=\"si\">!s}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'sOEW0'</span><span class=\"p\">)</span>\n    <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">!s}</span><span class=\"s1\">.ofx'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span><span class=\"n\">curl</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n    <span class=\"n\">fatal</span><span class=\"p\">(</span><span class=\"n\">os_error</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))</span>\n</pre>\n<dl>\n<dt>PasswordGenerator():</dt>\n<dd>Initializes the password generator. You should pass no arguments.</dd>\n<dt>get_account(name, request_seed=False, stealth_name=None):</dt>\n<dd><p>Accesses a particular account. Takes a string for the account name or alias.\nThe name is case insensitive and the \u2018-\u2018 may be given for \u2018_\u2019.</p>\n<p>Optionally takes a second argument (<em>request_seed</em>) that may be a Boolean,\na string, or a function that returns a string. The string is used as an\nadditional seed (see: <cite>avendesora help misdirection</cite>), and if True is passed\nin, the user in queried for the seed.</p>\n<p>The stealth name is used as account name if the account is a stealth\naccount.</p>\n</dd>\n<dt>get_name():</dt>\n<dd>return name of account.</dd>\n<dt>get_value(field):</dt>\n<dd><p>Returns the value of a particular account attribute given a user-oriented\nstring that describes the desired attribute.  The value requested must be\na scalar value, meaning that you must individually request members of arrays\nor dictionary attributes. Here are some examples that demonstrate the various\nways of accessing the various kinds of attributes:</p>\n<pre><span class=\"n\">passcode</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">()</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">)</span>\n<span class=\"n\">both</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'username: </span><span class=\"si\">{username}</span><span class=\"s1\">, password: </span><span class=\"si\">{passcode}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">checking</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'accounts.checking'</span><span class=\"p\">)</span>\n<span class=\"n\">savings</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'accounts[checking]'</span><span class=\"p\">)</span>\n<span class=\"n\">answer0</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">answer1</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'questions.1'</span><span class=\"p\">)</span>\n<span class=\"n\">answer2</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'questions[2]'</span><span class=\"p\">)</span>\n</pre>\n<p>If the argument passed to get_value is a field, then it may consist of\na name (the identifier for the first level of the field) and a key (the\nidentifier for the second level of the field). The field is case insensitive\nand a \u2018-\u2018 will match a \u2018_\u2019 and visa versa.</p>\n<p>You can also specify the name and key separately in a tuple:</p>\n<pre><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">((</span><span class=\"s1\">'username'</span><span class=\"p\">,))</span>\n<span class=\"n\">checking</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">((</span><span class=\"s1\">'accounts'</span><span class=\"p\">,</span> <span class=\"s1\">'checking'</span><span class=\"p\">))</span>\n<span class=\"n\">answer0</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,))</span>\n<span class=\"n\">answer1</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">((</span><span class=\"s1\">'questions'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<p>The value is returned as an object that contains four attributes, value (the\nactual value), is_secret (whether the value is secret or contains a secret),\nname (the name of the value), and desc (the description, contains the actual\nquestion of the answer to a question is requested).  Converting the object\nto a string returns the value rendered as a string.  There is also the\nrender() method that returns a string that combines the name and the\ndescription with the value. It takes an optional collection of format\nstrings, the first one that matches is used. The format strings may contain\nkeys in braces that get replaced by the corresponding attributes. The known\nkeys are n {name}, k (key), f (field, combination of name and key),\nd (description) and v (value).  A format string does not match it if\ncontains a key for a value that is not available. If no format string\nmatches, the value is returned as a string.  The default formats are (\u2018{f}\n({d}): {v}\u2019, \u2018{f}: {v}\u2019).</p>\n<p>If a composite field is requested get_value() raises a PasswordError, and\nthe exception contains the <em>is_collection</em> and <em>collection</em> attributes. The\nfirst is a Boolean and the second is the list of available keys.\nPassworError returns None for unknown attributes, so it is always safe to\naccess these attributes without checking whether they exist.</p>\n</dd>\n<dt>get_values(field):</dt>\n<dd><p>Used to get the values for a composite field. It iterates through the value\nand returns a tuple that contains the key and the value for each item in the\nfield.</p>\n<p>Field is an identifier that may consist of a name (the identifier for the\nfirst level of the field) and a key (the identifier for the second level of\nthe field).  The field is case insensitive and a \u2018-\u2018 will match a \u2018_\u2019 and\nvisa versa.</p>\n<p>Here is how you might iterate through both the scalar and composite values\nin an account:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n    <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{n}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">PasswordError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_collection</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span>\n    <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">':'</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"n\">get_values</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"n\">indent</span><span class=\"p\">(</span>\n            <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">((</span><span class=\"s1\">'</span><span class=\"si\">{k}</span><span class=\"s1\">) </span><span class=\"si\">{d}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{k}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n</dd>\n<dt>get_fields():</dt>\n<dd><p>Iterates through the fields, each iteration yields a name and possibly\na collection of keys ([None] is returned if the name corresponds to\na scalar).  The name and keys returned are the resolved names, which can be\npassed to get_scalar() and get_composite().</p>\n<p>Here is how this method can be used to iterate through the account values:</p>\n<pre><span class=\"c1\"># gather user fields</span>\n<span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">keys</span> <span class=\"ow\">in</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_fields</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">keys</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]:</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n        <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{n}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">field</span> <span class=\"o\">+</span> <span class=\"s1\">':'</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">get_values</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">):</span>\n            <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"n\">indent</span><span class=\"p\">(</span>\n                <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">((</span><span class=\"s1\">'</span><span class=\"si\">{k}</span><span class=\"s1\">) </span><span class=\"si\">{d}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{k}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">account_summary</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span>\n</pre>\n<p>get_fields() accepts a Boolean argument that if specified and is true will\niterate through all fields, including those generally only used by\nAvendesora, such as aliases and discovery.</p>\n</dd>\n<dt>get_scalar(name, key=None, default=False):</dt>\n<dd><p>A lower level interface than get_value that given a name and perhaps a key\nreturns a scalar value.  Also takes an optional default value that is\nreturned if the value is not found. Unlike get_value, the actual value is\nreturned, not a object that contains multiple facets of the value. Also, the\nname and key must match exactly.</p>\n<p>The name is the field name, and the key would identity which value is\ndesired if the field is a composite. If default is False, an error is raise\nif the value is not present, otherwise the default value itself is returned.</p>\n<p>If the value returned is an Avendesora object (GeneratedSecret,\nObscuredSecret, Script), then you should cast it to a string to get its\nresolved value.</p>\n</dd>\n<dt>get_composite(name):</dt>\n<dd><p>A lower level interface than get_value that given a name returns the value\nof the associated field, which may be a scalar (string or integer) or\na composite (array of dictionary).  Unlike get_value, the actual value is\nreturned, not a object that contains multiple facets of the value.  Also,\nthe name and key must match exactly.</p>\n<p>If the value returned is an Avendesora object (GeneratedSecret,\nObscuredSecret, Script), then you should cast it to a string to get its\nresolved value.</p>\n</dd>\n</dl>\n</div>\n<div id=\"api-example\">\n<h2>API Example</h2>\n<p>The following example creates encrypted files that contain account information\nthat would be needed by close family members and by a business partner in case\nanything happened to you.  This is an abbreviated version of an example given in\nthe users\u2019 guide.</p>\n<pre><span class=\"ch\">#!/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">avendesora</span> <span class=\"kn\">import</span> <span class=\"n\">PasswordGenerator</span><span class=\"p\">,</span> <span class=\"n\">PasswordError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">textwrap</span> <span class=\"kn\">import</span> <span class=\"n\">dedent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">inform</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">display</span><span class=\"p\">,</span> <span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"p\">,</span> <span class=\"n\">is_collection</span><span class=\"p\">,</span> <span class=\"n\">os_error</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gnupg</span>\n\n\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>   <span class=\"s1\">'FILENAME'</span><span class=\"p\">:</span> <span class=\"s1\">'family.gpg'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'RECIPIENTS'</span><span class=\"p\">:</span> <span class=\"s1\">'me@home.com son@home.com daughter@home.com'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span>\n        <span class=\"s1\">'ACCOUNTS'</span><span class=\"p\">:</span> <span class=\"s1\">'bank brokerage creditcard'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>   <span class=\"s1\">'FILENAME'</span><span class=\"p\">:</span> <span class=\"s1\">'partner.gpg'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'RECIPIENTS'</span><span class=\"p\">:</span> <span class=\"s1\">'me@work.com partner@work.com'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span>\n        <span class=\"s1\">'ACCOUNTS'</span><span class=\"p\">:</span> <span class=\"s1\">'login ssh root backups'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"n\">PasswordGenerator</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">account_name</span> <span class=\"ow\">in</span> <span class=\"n\">each</span><span class=\"p\">[</span><span class=\"s1\">'ACCOUNTS'</span><span class=\"p\">]:</span>\n            <span class=\"n\">acct</span> <span class=\"o\">=</span> <span class=\"n\">pw</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"n\">account_name</span><span class=\"p\">)</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"n\">get_scalar</span><span class=\"p\">(</span><span class=\"s1\">'desc'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">account_name</span><span class=\"p\">)</span>\n            <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"s1\">'='</span><span class=\"p\">]</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">keys</span> <span class=\"ow\">in</span> <span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"n\">get_fields</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n                    <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">':'</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"n\">get_values</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n                        <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"n\">indent</span><span class=\"p\">(</span>\n                            <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">((</span><span class=\"s1\">'</span><span class=\"si\">{k}</span><span class=\"s1\">) </span><span class=\"si\">{d}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{k}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n                        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">lines</span> <span class=\"o\">+=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{n}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">))</span>\n\n        <span class=\"n\">gpg</span> <span class=\"o\">=</span> <span class=\"n\">gnupg</span><span class=\"o\">.</span><span class=\"n\">GPG</span><span class=\"p\">(</span><span class=\"n\">gpgbinary</span><span class=\"o\">=</span><span class=\"s1\">'gpg2'</span><span class=\"p\">)</span>\n        <span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"n\">gpg</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n\\n\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">),</span> <span class=\"n\">each</span><span class=\"p\">[</span><span class=\"s1\">'RECIPIENTS'</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">encrypted</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span>\n                <span class=\"s1\">'unable to encrypt:'</span><span class=\"p\">,</span> <span class=\"n\">encrypted</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">culprit</span><span class=\"o\">=</span><span class=\"n\">each</span><span class=\"p\">[</span><span class=\"s1\">'FILENAME'</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">each</span><span class=\"p\">[</span><span class=\"s1\">'FILENAME'</span><span class=\"p\">],</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n                <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">encrypted</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">: created.\"</span> <span class=\"o\">%</span> <span class=\"n\">each</span><span class=\"p\">[</span><span class=\"s1\">'FILENAME'</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">os_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"n\">PasswordError</span><span class=\"p\">,</span> <span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"getting-help\">\n<h2>Getting Help</h2>\n<p>You can find the documentation on <a href=\"https://avendesora.readthedocs.io\" rel=\"nofollow\">ReadTheDocs</a>.</p>\n<p>The <em>help</em> command provides information on how to use Avendesora\u2019s various\nfeatures.  To get a listing of the topics available, use:</p>\n<pre>avendesora help\n</pre>\n<p>Then, for information on a specific topic use:</p>\n<pre>avendesora help &lt;topic&gt;\n</pre>\n<p>It is worth browsing all of the available topics at least once to get a sense of\nall that Avendesora can do.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Please ask questions or report bugs on <a href=\"https://github.com/KenKundert/avendesora/issues\" rel=\"nofollow\">Github Issues</a>. I will entertain pull\nrequests if you make improvements. Currently <em>Avendesora</em> is very <em>Fedora</em> and\n<em>VIM</em> centric. I am particularly interested in help adapting <em>Avendesora</em> in the\nfollowing ways:</p>\n<ul>\n<li>Support for other editors, window managers and distributions.</li>\n<li>Support for Windows and OSX.</li>\n<li>Support for Android and iOS (perhaps through exports to a password manager\nthat already support smartphones).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7028678, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "cfe21a7a3f67f1cf083d081dbd45fd2c", "sha256": "b7087a04192f57c382260b47a6178099a37c3a50cc1276c4b0be37a22f3138de"}, "downloads": -1, "filename": "avendesora-0.0.0.tar.gz", "has_sig": false, "md5_digest": "cfe21a7a3f67f1cf083d081dbd45fd2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30402, "upload_time": "2016-01-05T08:22:18", "upload_time_iso_8601": "2016-01-05T08:22:18.436295Z", "url": "https://files.pythonhosted.org/packages/92/1c/b1a95d00ac9eebec8ac008cb3f4788718267568f1aa3fcb4ec70f58e9c7d/avendesora-0.0.0.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "158613f7cfd675ce41148fe7ec69e68d", "sha256": "e503d941829e66f22f252985756c98b5af84ec503844c97056b50b6d5b933462"}, "downloads": -1, "filename": "avendesora-0.0.2.tar.gz", "has_sig": false, "md5_digest": "158613f7cfd675ce41148fe7ec69e68d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16938, "upload_time": "2016-01-14T07:42:00", "upload_time_iso_8601": "2016-01-14T07:42:00.472118Z", "url": "https://files.pythonhosted.org/packages/1c/6d/c959b2f4019c9fde735b0e839b2fd32caf211b15bb11ae0e05bd6940e2bc/avendesora-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "07f31c49428613dd2e2d5e8125a10913", "sha256": "d47247396f6669a637c506accfe8c3620964b4a3eaa8d652c40b7cf3fd880f46"}, "downloads": -1, "filename": "avendesora-0.0.3.tar.gz", "has_sig": false, "md5_digest": "07f31c49428613dd2e2d5e8125a10913", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31209, "upload_time": "2016-01-17T05:36:15", "upload_time_iso_8601": "2016-01-17T05:36:15.289681Z", "url": "https://files.pythonhosted.org/packages/00/08/8f2ca91c342a3164d45e51a1f93464beafc41210a15eeb4a19ff8d750215/avendesora-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f448e5c61e9aa250cf79bc46e7b856a1", "sha256": "9bdc02cadbc5ef95044386ea6b54397218729a326de9a596b32fcdab13d2e532"}, "downloads": -1, "filename": "avendesora-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f448e5c61e9aa250cf79bc46e7b856a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31186, "upload_time": "2016-01-17T05:53:05", "upload_time_iso_8601": "2016-01-17T05:53:05.791693Z", "url": "https://files.pythonhosted.org/packages/94/c0/ad294ff6eb95108fb45275cf06d82adb4a38d9212aac946c94e3f8520a44/avendesora-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "5d1f9391433373ab3156b9bd201c02ff", "sha256": "35f715d2a124772ef05de1831a069825da8499013460930d6b1cb7027fb15a94"}, "downloads": -1, "filename": "avendesora-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5d1f9391433373ab3156b9bd201c02ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 138702, "upload_time": "2016-07-07T00:30:59", "upload_time_iso_8601": "2016-07-07T00:30:59.249376Z", "url": "https://files.pythonhosted.org/packages/89/5e/44a8f3d99ef554f66add43fb1417ba531da72dcccfc84616311fc99e2709/avendesora-0.1.0.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "520d8ea41086234effb61802e644001a", "sha256": "12ba0ceb4c7a88ffaea6bead0c0695efd088ef25648bcc028ed4d3a541051e8d"}, "downloads": -1, "filename": "avendesora-0.10.0.tar.gz", "has_sig": false, "md5_digest": "520d8ea41086234effb61802e644001a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2938772, "upload_time": "2016-08-17T23:38:50", "upload_time_iso_8601": "2016-08-17T23:38:50.008956Z", "url": "https://files.pythonhosted.org/packages/f9/be/fe54d30c525d343875ed8033e51fb6004f4d7cdd1472090dd9f1cc517d75/avendesora-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "05ea760235f1ac251e6b29511183aea5", "sha256": "8325158f3030f0fa812a4e7763045d934a7054e1201dfe57bcfab358d9c49f80"}, "downloads": -1, "filename": "avendesora-0.11.0.tar.gz", "has_sig": false, "md5_digest": "05ea760235f1ac251e6b29511183aea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33130103, "upload_time": "2016-08-24T20:31:23", "upload_time_iso_8601": "2016-08-24T20:31:23.304457Z", "url": "https://files.pythonhosted.org/packages/da/b1/54f8ed4d0cf930779fbf6512276ace9a81d884603e6a336c25031f6a3e2d/avendesora-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "61d1e0e5ab170dda0c7fd68faa630b0f", "sha256": "c8d60bf0b94d9b910fbaebff789acb68dcb8f9e5da8e1644cb7b4b6e2675c964"}, "downloads": -1, "filename": "avendesora-0.12.0.tar.gz", "has_sig": false, "md5_digest": "61d1e0e5ab170dda0c7fd68faa630b0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 130138, "upload_time": "2016-09-27T07:07:07", "upload_time_iso_8601": "2016-09-27T07:07:07.457872Z", "url": "https://files.pythonhosted.org/packages/f9/7e/a3397c9ef44101a6a51045bc675d7662456aa408dfe9ae5e0c4dfd6f88f1/avendesora-0.12.0.tar.gz", "yanked": false}], "0.14.8": [{"comment_text": "", "digests": {"md5": "4eb08a27c7dabb58a96a6eee2d0f2e45", "sha256": "7be30ca165cfdc0acf96c302806110c5ec7c92b4cf408f60a032530e12ce287f"}, "downloads": -1, "filename": "avendesora-0.14.8.tar.gz", "has_sig": false, "md5_digest": "4eb08a27c7dabb58a96a6eee2d0f2e45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133947, "upload_time": "2016-12-10T23:24:05", "upload_time_iso_8601": "2016-12-10T23:24:05.272926Z", "url": "https://files.pythonhosted.org/packages/5e/fd/2dc3d710c9c220fb5af8b4a832b9c7638ef919c6be1d20526c1b68c77acf/avendesora-0.14.8.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "82d0a210b3d630ff3989f64cf331536a", "sha256": "5518cda088b6c53626e960364635cda796261dd37aee4bdde65300afb57d81cc"}, "downloads": -1, "filename": "avendesora-0.15.0.tar.gz", "has_sig": false, "md5_digest": "82d0a210b3d630ff3989f64cf331536a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133953, "upload_time": "2016-12-10T23:25:16", "upload_time_iso_8601": "2016-12-10T23:25:16.092410Z", "url": "https://files.pythonhosted.org/packages/88/c2/2ec5913c620f0520fe984a3f54ff603c493fdc184c7f7208f175d717de26/avendesora-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "9c991735782a545800c584e4431cd811", "sha256": "6a2a24735d33ddca4fc93a10adfab91b17cdc46979a26c19180f24c510e3dfdb"}, "downloads": -1, "filename": "avendesora-0.16.0.tar.gz", "has_sig": false, "md5_digest": "9c991735782a545800c584e4431cd811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 583524, "upload_time": "2016-12-21T01:39:18", "upload_time_iso_8601": "2016-12-21T01:39:18.559341Z", "url": "https://files.pythonhosted.org/packages/e6/05/5d1b0835b221b14d8fb485868ff7f0d7f697b4c5c3b10af8f4e956fc29b7/avendesora-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "c8ab01d9810f85f38c85e2d0335e29b9", "sha256": "4e7232b2ddc305b9d5a0269f135c43e8445d4e20e70deb183b775eb7701f7b27"}, "downloads": -1, "filename": "avendesora-0.17.0.tar.gz", "has_sig": false, "md5_digest": "c8ab01d9810f85f38c85e2d0335e29b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 593799, "upload_time": "2016-12-22T09:22:38", "upload_time_iso_8601": "2016-12-22T09:22:38.237226Z", "url": "https://files.pythonhosted.org/packages/08/f5/bf27fffd16ce195f9e8c40986e1a692b65d20a2e48eb9b7d8f1313e042f9/avendesora-0.17.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "0ca6269e1bb03dc0476069c9a6dd0043", "sha256": "af0bc574b3d395ab889e141a72d7c87e5ce501f17dbda40c8ad3935ffece3aa6"}, "downloads": -1, "filename": "avendesora-0.18.0.tar.gz", "has_sig": false, "md5_digest": "0ca6269e1bb03dc0476069c9a6dd0043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 597367, "upload_time": "2016-12-28T05:07:47", "upload_time_iso_8601": "2016-12-28T05:07:47.544658Z", "url": "https://files.pythonhosted.org/packages/b1/f1/7eb8423032e320f1bc811b74a9ca6d74852aa7421c29d34b55f0179d69f9/avendesora-0.18.0.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "bd0984c11651147ebca4e230fdda90ac", "sha256": "546cb7747137a6ad20e74efd48e8bb47c53b2fd0dddcc912f2c7799cbc5352cf"}, "downloads": -1, "filename": "avendesora-0.19.0.tar.gz", "has_sig": false, "md5_digest": "bd0984c11651147ebca4e230fdda90ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 602161, "upload_time": "2016-12-29T23:55:48", "upload_time_iso_8601": "2016-12-29T23:55:48.339657Z", "url": "https://files.pythonhosted.org/packages/cf/6c/4a9f411ed00504e8ef7b0dce3306cf2bf3e2a0604a499f186fe0a5140e9e/avendesora-0.19.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1fdb95d2560c4e8a60a5c301f8bc8ce0", "sha256": "f642a2d3e0a3a69eb044d40a198c6f08573856cef4bc6535bffcb05fb0f9481c"}, "downloads": -1, "filename": "avendesora-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1fdb95d2560c4e8a60a5c301f8bc8ce0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1786367, "upload_time": "2016-07-20T05:08:00", "upload_time_iso_8601": "2016-07-20T05:08:00.425216Z", "url": "https://files.pythonhosted.org/packages/b1/ea/2fbe831e627908bba048b0ed7f4abdc5afdb0aea0dc39a3cb3db0104e906/avendesora-0.2.0.tar.gz", "yanked": false}], "0.20.1": [{"comment_text": "", "digests": {"md5": "1887416db46e98d031a1de5fce3f7be3", "sha256": "ed28ebfdd760dc708549d4553d16568f41bd52e57136c48cc963cbc689807be6"}, "downloads": -1, "filename": "avendesora-0.20.1.tar.gz", "has_sig": false, "md5_digest": "1887416db46e98d031a1de5fce3f7be3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 602215, "upload_time": "2016-12-30T04:21:21", "upload_time_iso_8601": "2016-12-30T04:21:21.683113Z", "url": "https://files.pythonhosted.org/packages/ad/f9/a81480bd0298927a1c46814dd9ed217b356d1d69b8d862c17861ad23675a/avendesora-0.20.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "9ddbe6aaf1f2330608493e4b856407ed", "sha256": "5e86c0d21d2504fafc84c78382cb1b523e756fb6b18ab29ee093fc33e6e7ee02"}, "downloads": -1, "filename": "avendesora-0.6.0.tar.gz", "has_sig": false, "md5_digest": "9ddbe6aaf1f2330608493e4b856407ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72141, "upload_time": "2016-08-05T04:22:40", "upload_time_iso_8601": "2016-08-05T04:22:40.058078Z", "url": "https://files.pythonhosted.org/packages/76/4f/f6c926dcb31e274d0a29d1fd33a8fc422fb0296730d57acddf72d50ce05f/avendesora-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "89714d4505a4811b82b0920beca9379a", "sha256": "1ba6567a10ba975cd76b38fe9e1e41edc906383fd5e1a75104b2a07ccbc5e4cb"}, "downloads": -1, "filename": "avendesora-0.6.1.tar.gz", "has_sig": false, "md5_digest": "89714d4505a4811b82b0920beca9379a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3070694, "upload_time": "2016-08-05T05:19:40", "upload_time_iso_8601": "2016-08-05T05:19:40.728528Z", "url": "https://files.pythonhosted.org/packages/2c/c1/255d05fa8afb50dda88c068bfb751737238349ae8f36f4b0a4d24070e6d9/avendesora-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "668bd71fbc2934ffb45d8722970fe711", "sha256": "640eed663e6e1922352c73a0490818bd9a096ebecfeeccac02d6c7f5c6b5b408"}, "downloads": -1, "filename": "avendesora-0.7.0.tar.gz", "has_sig": false, "md5_digest": "668bd71fbc2934ffb45d8722970fe711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2171877, "upload_time": "2016-08-08T20:29:01", "upload_time_iso_8601": "2016-08-08T20:29:01.941782Z", "url": "https://files.pythonhosted.org/packages/0c/ca/e5df3f83df0f5c5e6f69d1a1a7f784fdc0d6fe8167c0655eb715519c7150/avendesora-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "36ed3223f2d54edf6c6e9e05ce111553", "sha256": "03a0a610376a756c0f5783e4a63c41e5c8b34eb3c12e04a5ea3d1b487164fab3"}, "downloads": -1, "filename": "avendesora-0.7.1.tar.gz", "has_sig": false, "md5_digest": "36ed3223f2d54edf6c6e9e05ce111553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2410430, "upload_time": "2016-08-10T18:55:48", "upload_time_iso_8601": "2016-08-10T18:55:48.532450Z", "url": "https://files.pythonhosted.org/packages/c3/7c/bed40fd8e1cfb0593f3d8e553e23dc63792427fd5a11f21f5bbc5ed10646/avendesora-0.7.1.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "9055d7b33f85390db4bbeff6b217a92f", "sha256": "cbaa42d3e668957c34d666af81ce5f35753767db89685303fac3ffb495d26bfb"}, "downloads": -1, "filename": "avendesora-0.8.1.tar.gz", "has_sig": false, "md5_digest": "9055d7b33f85390db4bbeff6b217a92f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2624402, "upload_time": "2016-08-14T07:04:21", "upload_time_iso_8601": "2016-08-14T07:04:21.470279Z", "url": "https://files.pythonhosted.org/packages/dd/36/4fc6ca64999ad1d6d021589977c950b2741b48d631ff7da5856ac668972b/avendesora-0.8.1.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "e1ff9d9c2d292f725914c9870aad0dbf", "sha256": "e8298a37b188e93e7eff9f14d1f29bfa5f4404676b278cfd81170b43f35cfa56"}, "downloads": -1, "filename": "avendesora-0.9.0.tar.gz", "has_sig": false, "md5_digest": "e1ff9d9c2d292f725914c9870aad0dbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2785338, "upload_time": "2016-08-17T22:22:11", "upload_time_iso_8601": "2016-08-17T22:22:11.428156Z", "url": "https://files.pythonhosted.org/packages/67/2a/1a0cbbc2aed17fb294fa90328fbc7fcb9d26a30a95e1e9b1c13de8070ecd/avendesora-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "33de68cf245e291eb5577c281140cb12", "sha256": "92cb58f87679004cf7d8d18a91a736a12433009efdb0f6d482b66e4cbf2fc792"}, "downloads": -1, "filename": "avendesora-1.0.0.tar.gz", "has_sig": false, "md5_digest": "33de68cf245e291eb5577c281140cb12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 603765, "upload_time": "2017-01-02T18:33:45", "upload_time_iso_8601": "2017-01-02T18:33:45.264244Z", "url": "https://files.pythonhosted.org/packages/4c/ce/78945f3c79a3d27eb25f83d2845f67aa05534e0a873c6690cfdb7addfb43/avendesora-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "15da30b56407618dfb01beccb03bc208", "sha256": "1d7668ded060ff0849d901fac0ae759e2d904c4c4d096a965b05c2072c7ca1ba"}, "downloads": -1, "filename": "avendesora-1.1.0.tar.gz", "has_sig": false, "md5_digest": "15da30b56407618dfb01beccb03bc208", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 604163, "upload_time": "2017-01-03T23:48:36", "upload_time_iso_8601": "2017-01-03T23:48:36.118786Z", "url": "https://files.pythonhosted.org/packages/a0/fe/ec2fa8a4ce39ae6d406b3bfaeefc952c8e99e3faa3f9650ebe3c32884076/avendesora-1.1.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "2ff67d6cd2b8dae1d00c540cedd20367", "sha256": "dea8a59a1fef67c73c8faec6b5d92b7e8c517aa20427a986f5b17511a1bc1b9c"}, "downloads": -1, "filename": "avendesora-1.10.1.tar.gz", "has_sig": true, "md5_digest": "2ff67d6cd2b8dae1d00c540cedd20367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 307428, "upload_time": "2018-02-22T06:33:45", "upload_time_iso_8601": "2018-02-22T06:33:45.447008Z", "url": "https://files.pythonhosted.org/packages/b4/f2/8d99a89d6ae301a9e3e855fb9a18958c3dfe3d10d1ff3781cbf52fd38d6e/avendesora-1.10.1.tar.gz", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "9e65fc97a854376e330e15d227887569", "sha256": "21d1f0c6d5deb6b64df4dee41d34b177b29e1ab00708f92fb7cacd2665f5954e"}, "downloads": -1, "filename": "avendesora-1.11.0.tar.gz", "has_sig": true, "md5_digest": "9e65fc97a854376e330e15d227887569", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 311100, "upload_time": "2018-06-15T06:44:48", "upload_time_iso_8601": "2018-06-15T06:44:48.381424Z", "url": "https://files.pythonhosted.org/packages/4e/be/98201f22fb3e3e28969eb9b46e6a370991c41b248af8d39cc15dd807db7e/avendesora-1.11.0.tar.gz", "yanked": false}], "1.12.0": [{"comment_text": "", "digests": {"md5": "4d4093f1c5b184f49d2fd845fab266d6", "sha256": "54107b2b95ef285f56fa879184836b6905f61b2624008f3a1870818d5a163875"}, "downloads": -1, "filename": "avendesora-1.12.0.tar.gz", "has_sig": false, "md5_digest": "4d4093f1c5b184f49d2fd845fab266d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 342172, "upload_time": "2019-01-17T08:23:35", "upload_time_iso_8601": "2019-01-17T08:23:35.831581Z", "url": "https://files.pythonhosted.org/packages/19/b3/c165d912d8f137a91f5ca7fc126c7b720507fb5dd8f382292348b3363c32/avendesora-1.12.0.tar.gz", "yanked": false}], "1.13.0": [{"comment_text": "", "digests": {"md5": "16297917e2fb55a6eda0f717e29f0a5c", "sha256": "da7875f92d42ee5df37047e08554056e18e4114c0003b74856593a3661a51b0c"}, "downloads": -1, "filename": "avendesora-1.13.0.tar.gz", "has_sig": false, "md5_digest": "16297917e2fb55a6eda0f717e29f0a5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 346598, "upload_time": "2019-02-06T22:25:20", "upload_time_iso_8601": "2019-02-06T22:25:20.097869Z", "url": "https://files.pythonhosted.org/packages/ab/44/d38171b0541c91cbf5ff0747950638ea224c5cc17bb2d0052e63b9d9c85c/avendesora-1.13.0.tar.gz", "yanked": false}], "1.14.0": [{"comment_text": "", "digests": {"md5": "52456694606381a8d91d68b1b9cbc3c1", "sha256": "f993ab342a992dbb6c2f253d30e4ab0fa82d5fa24e51e991e6a570541aa98470"}, "downloads": -1, "filename": "avendesora-1.14.0.tar.gz", "has_sig": false, "md5_digest": "52456694606381a8d91d68b1b9cbc3c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 349055, "upload_time": "2019-04-28T21:29:45", "upload_time_iso_8601": "2019-04-28T21:29:45.038783Z", "url": "https://files.pythonhosted.org/packages/ab/6a/3503f87de770dd2de31433e4ced9c7aed0a3fd7df74bdac8ebc02fbad21b/avendesora-1.14.0.tar.gz", "yanked": false}], "1.15.0": [{"comment_text": "", "digests": {"md5": "6f7c7bb5b4d347595673de2f0740ed70", "sha256": "d2b3d1fed528fd4f273da421c0f5fef29774e11f871c5ca1eb92e2d0ee05dec6"}, "downloads": -1, "filename": "avendesora-1.15.0.tar.gz", "has_sig": false, "md5_digest": "6f7c7bb5b4d347595673de2f0740ed70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 349454, "upload_time": "2019-09-29T01:19:33", "upload_time_iso_8601": "2019-09-29T01:19:33.701392Z", "url": "https://files.pythonhosted.org/packages/ff/9f/2a98d65b7ba96c8bbd80fc839c6bc49474b77fcda8c6c06b42d18f281698/avendesora-1.15.0.tar.gz", "yanked": false}], "1.16.0": [{"comment_text": "", "digests": {"md5": "9882b856b323c50d4b908c36c0aa1098", "sha256": "f3f28b7717ec5778874d49a87f63e8985d4a772d6dcef8035362c701b48414b0"}, "downloads": -1, "filename": "avendesora-1.16.0.tar.gz", "has_sig": false, "md5_digest": "9882b856b323c50d4b908c36c0aa1098", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 350452, "upload_time": "2019-12-25T23:32:11", "upload_time_iso_8601": "2019-12-25T23:32:11.691004Z", "url": "https://files.pythonhosted.org/packages/0c/63/fe24e6ba5e9966432046e72c1b049e1f773901660b4ce75cd60c62a01fd5/avendesora-1.16.0.tar.gz", "yanked": false}], "1.17.0": [{"comment_text": "", "digests": {"md5": "90d72bb20018b5b6b00f5834f6073da8", "sha256": "a1611892d1039101f01a5327cb691e28466cbc596379ad61ac7a536aed65cb95"}, "downloads": -1, "filename": "avendesora-1.17.0.tar.gz", "has_sig": false, "md5_digest": "90d72bb20018b5b6b00f5834f6073da8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 365921, "upload_time": "2020-04-16T01:31:49", "upload_time_iso_8601": "2020-04-16T01:31:49.998771Z", "url": "https://files.pythonhosted.org/packages/b8/14/eed703b6887710151060e20f331739de99616a2ecb763c59cddd32d16cad/avendesora-1.17.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "2c6852ca72a6a5c2b6e6633ce4b09e42", "sha256": "940805c93dbdc9e0665b240aa40d856832e3611f7a99542ad78092f7e7c42faa"}, "downloads": -1, "filename": "avendesora-1.2.0.tar.gz", "has_sig": false, "md5_digest": "2c6852ca72a6a5c2b6e6633ce4b09e42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 604174, "upload_time": "2017-01-05T08:15:38", "upload_time_iso_8601": "2017-01-05T08:15:38.361729Z", "url": "https://files.pythonhosted.org/packages/f3/3f/952ca5ae00725be00486b1cbdcfad87a1b585ebc83e12391fb6e4fb3b606/avendesora-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "62d2213e2eabaaea54f8d7c01ba501cb", "sha256": "1f9b6c47d8e680de8d902ffb5adff31529e2b90b6e87f81d6482f4dfa6b07785"}, "downloads": -1, "filename": "avendesora-1.3.0.tar.gz", "has_sig": false, "md5_digest": "62d2213e2eabaaea54f8d7c01ba501cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 606068, "upload_time": "2017-01-08T23:16:24", "upload_time_iso_8601": "2017-01-08T23:16:24.544346Z", "url": "https://files.pythonhosted.org/packages/c1/e9/1e402ae2a86b0b5e109574798599d96fc7ef703b97a3d5bab2d5035a4895/avendesora-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "80e5fa4e7b8dfdffb2806c89319447ad", "sha256": "d347d2434374704ebf779a2c03e56b2f27c4cbcee32722567f1fada8dc465ac3"}, "downloads": -1, "filename": "avendesora-1.4.0.tar.gz", "has_sig": false, "md5_digest": "80e5fa4e7b8dfdffb2806c89319447ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 609285, "upload_time": "2017-01-10T05:42:51", "upload_time_iso_8601": "2017-01-10T05:42:51.745100Z", "url": "https://files.pythonhosted.org/packages/93/e1/8ae133d3fb2922b8b75bdd1f2e43725d928002802e5182e9e0c944fd82ab/avendesora-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "db7580ee931de327d6eb1b8e5b286ffd", "sha256": "12ed550efeefc738396125c7c913f2f07ef89734b17a6e8ec87371ba418fc8ea"}, "downloads": -1, "filename": "avendesora-1.5.0.tar.gz", "has_sig": false, "md5_digest": "db7580ee931de327d6eb1b8e5b286ffd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 611137, "upload_time": "2017-03-02T07:41:36", "upload_time_iso_8601": "2017-03-02T07:41:36.007594Z", "url": "https://files.pythonhosted.org/packages/fe/b0/7328ba2796c41a1c2cc1fedd1624af07916e59fa18b6e0ee35b3bcab0307/avendesora-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "6b384bd5ed877d2244f1e0d6cf52a6ca", "sha256": "b4735f92875b20f2ce6ae830955fdf738d7851eea4bac77b7cb43f7255d79e3a"}, "downloads": -1, "filename": "avendesora-1.6.0.tar.gz", "has_sig": true, "md5_digest": "6b384bd5ed877d2244f1e0d6cf52a6ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 260227, "upload_time": "2017-04-07T18:54:33", "upload_time_iso_8601": "2017-04-07T18:54:33.126418Z", "url": "https://files.pythonhosted.org/packages/31/33/7b3abbf71be576766e1f6ae7f554f2e07b11cf767f126d0956b641ded204/avendesora-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "c8f3cdb9352917dc8f910bceee7cf6c6", "sha256": "b9ed63b732c8cc5fdfa1e87d61c1aacaa1ed6861f4a666e87082c0ffff59940b"}, "downloads": -1, "filename": "avendesora-1.7.0.tar.gz", "has_sig": true, "md5_digest": "c8f3cdb9352917dc8f910bceee7cf6c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 164711, "upload_time": "2017-06-01T07:12:13", "upload_time_iso_8601": "2017-06-01T07:12:13.259835Z", "url": "https://files.pythonhosted.org/packages/55/fe/b826207f1c8d1578c120523127d3b18ae535419b6b54e3042eda6c0b0d45/avendesora-1.7.0.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "e46b2b57fe1da7ad865c76df2bda125c", "sha256": "dc1cd1318be3521009f16628a3c7efed78078bc76bff4c51cf105f0faff83d93"}, "downloads": -1, "filename": "avendesora-1.8.0.tar.gz", "has_sig": true, "md5_digest": "e46b2b57fe1da7ad865c76df2bda125c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 294874, "upload_time": "2017-11-23T17:23:15", "upload_time_iso_8601": "2017-11-23T17:23:15.623019Z", "url": "https://files.pythonhosted.org/packages/da/bc/ef8ee78e8424cd4ee62a4d0a40672610484c17c40f1d535dd7db97190ea4/avendesora-1.8.0.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "f546ac52229d6dfb8f57c88eb7f19465", "sha256": "4ee60949d10203f9fbf4bfe7b831aff5da80d4b37574af61ec3e813db162d39a"}, "downloads": -1, "filename": "avendesora-1.9.0.tar.gz", "has_sig": true, "md5_digest": "f546ac52229d6dfb8f57c88eb7f19465", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 302565, "upload_time": "2017-12-26T02:26:39", "upload_time_iso_8601": "2017-12-26T02:26:39.627399Z", "url": "https://files.pythonhosted.org/packages/eb/fe/12714fa3f10d97bae0361b5a4c3e9c353a9f932c2bd5e26a44d24f6f6baa/avendesora-1.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90d72bb20018b5b6b00f5834f6073da8", "sha256": "a1611892d1039101f01a5327cb691e28466cbc596379ad61ac7a536aed65cb95"}, "downloads": -1, "filename": "avendesora-1.17.0.tar.gz", "has_sig": false, "md5_digest": "90d72bb20018b5b6b00f5834f6073da8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 365921, "upload_time": "2020-04-16T01:31:49", "upload_time_iso_8601": "2020-04-16T01:31:49.998771Z", "url": "https://files.pythonhosted.org/packages/b8/14/eed703b6887710151060e20f331739de99616a2ecb763c59cddd32d16cad/avendesora-1.17.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:05 2020"}