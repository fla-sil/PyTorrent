{"info": {"author": "Mark Vartanyan", "author_email": "kolypto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://api.travis-ci.org/kolypto/py-nplusone-loader.png?branch=master)](https://travis-ci.org/kolypto/py-nplusone-loader)\n[![Pythons](https://img.shields.io/badge/python-3.6%E2%80%933.8-blue.svg)](.travis.yml)\n\nAn SqlAlchemy loader that solves the N+1 problem\n\nTL;DR\n=====\n\nWhat happens if you touch an unloaded column or relationship while looping over results from the DB?\n\n```python\nusers = ssn.query(User).all()\n\nfor user in users:\n    user.articles  # load a relationship\n```\n\nRight. If you have 1000 users, you'll end up with 1000 queries.\n\nHere's a simple solution for you that will lazy-load an attribute for all those users with just one query:\n\n```python\nfrom nplus1loader import default_columns, nplus1loader\n\nusers = ssn.query(User).options(\n    default_columns(User),\n    nplus1loader('*')\n).all()\n\nfor user in users:\n    user.articles\n```\n\nIt will only make 1 query to load all the users, then when it sees that you want articles,\nit will only make 1 additional query to load all articles\u00b9 for those users.\n\n\u00b9: it will actually make 1 query per 500 users.\n\nThe N+1 Problem\n===============\n\nFirst of all, what's the N+1 problem?\nSuppose you have the following code which loads a number of objects from the DB,\nbut some fields are deferred:\n\n```python\nusers = ssn.query(User).options(\n    load_only('id')  # worst case scenario\n)\n```\n\nAnd then somewhere in the code some `jsonify()` function decides to check one of\nthe unloaded properties:\n\n```python\nfor user in users:\n    user.state  # load the attribute\n```\n\nBecause the attribute hasn't been loaded on the whole collection...\nit will trigger N queries to load that attribute on every iteration of the loop.\nCrying shame.\n\nIn many cases we can tell SqlAlchemy to load exactly the attributes we are going\nto use (by using `undefer()` / `joinedload()` / `selectinload()`), but in other\ncases that's utterly impossible. We just don't know the names of those attributes\nin advance.\n\nThe Solution\n============\n\nThis module offers a solution: when your code *touches* one unloaded attribute\non a collection, it assumes that you're going to iterate through them, and loads\nall of them for you.\n\nThe solution is, however, not all-encompassing: you only enable it where you see fit.\nIt's implemented as a load option, like this:\n\n```python\nfrom nplus1loader import nplus1loader\n\nusers = ssn.query(User).options(\n    load_only('id'),  # worst case scenario\n    nplus1loader('*')  # include every column and every relationship\n)\n```\n\nNow, whenever you touch any unloaded column or relationship on any of those loaded users,\nthe attribute will be loaded for all User instance in that session.\nSo now, you can safely iterate through them.\n\n*Warning*: do not rely on this mechanism; only use it as a safeguard for production apps.\nIt is recommended that you do something like this instead:\n\n```python\nfrom nplus1loader import default_columns, raiseload_all, nplus1loader\n\nusers = ssn.query(User).options(\n    default_columns(User),\n    raiseload_all('*') if in_testing else nplus1loader('*')\n)\n```\n\nMake sure you import the module first in order for those load options to get registered :)\n\n```python\nimport nplus1loader\n```\n\nOne minor inconvenience\n=======================\n\nDid you notice the `default_columns()` load option?\nYou'll have to insert it early into your query, I'm sorry.\n\nThis is because `nplus1loader('*')` is a catch-all column loader option.\nIn other words, if no column strategies are given by you, there are no loaded columns,\nand this `nplus1loader('*')` will handle all columns!\n\nThis is not what we want. We would instead want to apply the defaults... then override them...\nand put this `nplus1loader('*')` in the end. But that's not possible with SqlAlchemy.\n\nSo we have to live with this `default_columns(Model)`: it reads the default loading strategies\nfrom your Model and applies it early. In other words, it knows which columns are deferred by default.\n\nIf you don't put it there, `nplus1loader()` will remove all columns from the query, and you'll get\nthis weird error:\n\n    sqlalchemy.exc.InvalidRequestError: Query contains no columns with which to SELECT from.\n\nThis is effectively the same as `defer('*')`.\n\nNow... why can't we just `undefer('*')` everything?\n\nBecause that's not right with some `Column(deferred=True)`, and `Column(deferred_group='password')`,\nwhich have other preferences about being loaded.\nSo `default_columns(User)` will respect those defaults.\n\nLogging\n=======\n\nAll logging is done to the 'lib.db.nplus1loader.NPlusOneLazyColumnLoader' logger:\n\n    05:09:37 [W] nplus1loader.NPlusOneLazyColumnLoader: Number.es: N+1 loading of 4 instances\n    emitted by: _nplusone_lazy_loading() nplus1loader/strategies.py:76\n\nOther solutions\n===============\n\n* [operator/sqlalchemy_bulk_lazy_loader](https://github.com/operator/sqlalchemy_bulk_lazy_loader)\n  only supports relationships and not columns, has code copy-pasted from an old SqlAlchemy version,\n  requires re-configuring your relationships on the model (lazy='bulk')\n* [operator/sqlalchemy_bulk_lazy_loader](operator/sqlalchemy_bulk_lazy_loader)\n  is a monitoring tool; it does not solve the N+1 problem at all\n\nBoth projects served as a source of inspiration.\n\n\n\nDatabase support\n================\n\nTested with:\n\n* PostgreSQL\n* MySQL\n* SQLite\n\n\n\nOther Included Tools\n====================\n\nHandle specific attributes\n--------------------------\n\nThe `nplus1loader` package has other tools that you might find useful.\n\nFirst of all, you can be more specific about which attributes you want to have handled by the N+1 loader.\nYou can opt to handle only relationships, all, or specific ones:\n\n```python\nnplus1loader_rels('*')\nnplus1loader_rels(relationship_name, ...)\n```\n\nor you can opt to handle only columns:\n\n```python\nnplus1loader_cols('*')\nnplus1loader_cols(column_name, ...)\n```\n\nnplus1loader('*', nested=True)\n------------------------------\n\nYou may have noticed that the N+1 loader has the `nested=True` keyword argument.\nIt controls which options should be put on those relationships that have been lazy-loaded in bulk.\n\nBy default, loader options in SqlAlchemy would only affect your top-level entities.\nFor instance:\n\n```python\nquery(User).options(\n    default_columns(User)\n        .nplus1loader('*')\n)\n```\n\nwould only apply the N+1 loader on the immediate attributes of the `User`, but not to its related models.\nSo, if the N+1 loader happens to load User's `Article`s, the attributes of `Article` would use the plain\nSqlAlchemy lazy-loading one by one.\n\nWith `nested=True`, the N+1 loader would also put an `nplus1loader('*')` on `Article` when those are loaded.\n\nThis `nested=True` is the default, and you don't have to bother about it.\nMoreover, there probably is no sane reason for disabling it, ever. So it's a good candidate for removal.\n\n\n`default_columns(Model)`\n------------------------\n\nThis loader option takes the default `defer()`/`undefer()` settings from a model and sets them on a Query.\nIn itself, this option is useless, but it enables you to alter the defaults by using other loading options.\n\nIn particular, `nplus1loader('*')` won't work unless you apply `default_columns()` first.\n\nNote that `nplus1loader('*')` can be chained from `default_columns()`, or it can be written after a comma.\nBoth will have the same effect.\n\n\n`raiseload_all('*')`\n--------------------\n\nRaiseload for both columns and relationships.\n\nExample:\n\n```python\nssn.query(User).options(\n    default_columns('id'),\n    # Raise an error if any attribute at all is lazy-loaded\n    raiseload_all('*')\n)\n```\n\nThe error that it throws is `nplus1loader.LazyLoadingAttributeError()`, so it's easy to catch in your code ;)\n\n\n`raiseload_col(*columns)`\n-------------------------\n\nRaiseload for columns. Use to fine-tune.\n\nExample:\n\n```python\nssn.query(User).options(\n    load_only('id'),\n    # Raise an error if any other column is lazy-loaded\n    raiseload_col('*')\n)\n```\n\nYou can also specify individual columns as a list.\n\nThe error that it throws is `nplus1loader.LazyLoadingAttributeError()`.\n\n\n`raiseload_rel(*relations)`\n---------------------------\n\nRaiseload for relatioships. Use to fine-tune.\n\nIt's essentially the same as `sqlalchemy.orm.raiseload()`, but throws the `nplus1loader.LazyLoadingAttributeError()`\nerror instead.\n\n\n`bulk_load_attribute_for_instance_states()`\n-------------------------------------------\n\nThis is the heart of N+1 loader.\n\nYou give it a list of instances, name one unlaoded attribute,\nand it makes just one query to load this attribute's value from the database, and efficiently\naugments all the existing instances with the loaded value of this attribute.\n\nThis is an advanced feature.\nSee the code: [nplus1loader/bulk_load.py](nplus1loader/bulk_load.py)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kolypto/py-nplus1loader", "keywords": "sqlalchemy,nplus1", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "nplus1loader", "package_url": "https://pypi.org/project/nplus1loader/", "platform": "any", "project_url": "https://pypi.org/project/nplus1loader/", "project_urls": {"Homepage": "https://github.com/kolypto/py-nplus1loader"}, "release_url": "https://pypi.org/project/nplus1loader/1.0.1/", "requires_dist": ["sqlalchemy (>=1.3.0)", "funcy"], "requires_python": ">= 3.6", "summary": "SqlAlchemy N+1 Loader: a solution to the N+1 problem", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kolypto/py-nplusone-loader\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e3887895f4b8d88a84acf24085e698fc0266eaf/68747470733a2f2f6170692e7472617669732d63692e6f72672f6b6f6c7970746f2f70792d6e706c75736f6e652d6c6f616465722e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\".travis.yml\" rel=\"nofollow\"><img alt=\"Pythons\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78b45142b63fda857930c9443f13e851a98117e6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36254532253830253933332e382d626c75652e737667\"></a></p>\n<p>An SqlAlchemy loader that solves the N+1 problem</p>\n<h1>TL;DR</h1>\n<p>What happens if you touch an unloaded column or relationship while looping over results from the DB?</p>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">articles</span>  <span class=\"c1\"># load a relationship</span>\n</pre>\n<p>Right. If you have 1000 users, you'll end up with 1000 queries.</p>\n<p>Here's a simple solution for you that will lazy-load an attribute for all those users with just one query:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nplus1loader</span> <span class=\"kn\">import</span> <span class=\"n\">default_columns</span><span class=\"p\">,</span> <span class=\"n\">nplus1loader</span>\n\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">default_columns</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">),</span>\n    <span class=\"n\">nplus1loader</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">articles</span>\n</pre>\n<p>It will only make 1 query to load all the users, then when it sees that you want articles,\nit will only make 1 additional query to load all articles\u00b9 for those users.</p>\n<p>\u00b9: it will actually make 1 query per 500 users.</p>\n<h1>The N+1 Problem</h1>\n<p>First of all, what's the N+1 problem?\nSuppose you have the following code which loads a number of objects from the DB,\nbut some fields are deferred:</p>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">load_only</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>  <span class=\"c1\"># worst case scenario</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And then somewhere in the code some <code>jsonify()</code> function decides to check one of\nthe unloaded properties:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">state</span>  <span class=\"c1\"># load the attribute</span>\n</pre>\n<p>Because the attribute hasn't been loaded on the whole collection...\nit will trigger N queries to load that attribute on every iteration of the loop.\nCrying shame.</p>\n<p>In many cases we can tell SqlAlchemy to load exactly the attributes we are going\nto use (by using <code>undefer()</code> / <code>joinedload()</code> / <code>selectinload()</code>), but in other\ncases that's utterly impossible. We just don't know the names of those attributes\nin advance.</p>\n<h1>The Solution</h1>\n<p>This module offers a solution: when your code <em>touches</em> one unloaded attribute\non a collection, it assumes that you're going to iterate through them, and loads\nall of them for you.</p>\n<p>The solution is, however, not all-encompassing: you only enable it where you see fit.\nIt's implemented as a load option, like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nplus1loader</span> <span class=\"kn\">import</span> <span class=\"n\">nplus1loader</span>\n\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">load_only</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">),</span>  <span class=\"c1\"># worst case scenario</span>\n    <span class=\"n\">nplus1loader</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>  <span class=\"c1\"># include every column and every relationship</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now, whenever you touch any unloaded column or relationship on any of those loaded users,\nthe attribute will be loaded for all User instance in that session.\nSo now, you can safely iterate through them.</p>\n<p><em>Warning</em>: do not rely on this mechanism; only use it as a safeguard for production apps.\nIt is recommended that you do something like this instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nplus1loader</span> <span class=\"kn\">import</span> <span class=\"n\">default_columns</span><span class=\"p\">,</span> <span class=\"n\">raiseload_all</span><span class=\"p\">,</span> <span class=\"n\">nplus1loader</span>\n\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">default_columns</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">),</span>\n    <span class=\"n\">raiseload_all</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">in_testing</span> <span class=\"k\">else</span> <span class=\"n\">nplus1loader</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Make sure you import the module first in order for those load options to get registered :)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nplus1loader</span>\n</pre>\n<h1>One minor inconvenience</h1>\n<p>Did you notice the <code>default_columns()</code> load option?\nYou'll have to insert it early into your query, I'm sorry.</p>\n<p>This is because <code>nplus1loader('*')</code> is a catch-all column loader option.\nIn other words, if no column strategies are given by you, there are no loaded columns,\nand this <code>nplus1loader('*')</code> will handle all columns!</p>\n<p>This is not what we want. We would instead want to apply the defaults... then override them...\nand put this <code>nplus1loader('*')</code> in the end. But that's not possible with SqlAlchemy.</p>\n<p>So we have to live with this <code>default_columns(Model)</code>: it reads the default loading strategies\nfrom your Model and applies it early. In other words, it knows which columns are deferred by default.</p>\n<p>If you don't put it there, <code>nplus1loader()</code> will remove all columns from the query, and you'll get\nthis weird error:</p>\n<pre><code>sqlalchemy.exc.InvalidRequestError: Query contains no columns with which to SELECT from.\n</code></pre>\n<p>This is effectively the same as <code>defer('*')</code>.</p>\n<p>Now... why can't we just <code>undefer('*')</code> everything?</p>\n<p>Because that's not right with some <code>Column(deferred=True)</code>, and <code>Column(deferred_group='password')</code>,\nwhich have other preferences about being loaded.\nSo <code>default_columns(User)</code> will respect those defaults.</p>\n<h1>Logging</h1>\n<p>All logging is done to the 'lib.db.nplus1loader.NPlusOneLazyColumnLoader' logger:</p>\n<pre><code>05:09:37 [W] nplus1loader.NPlusOneLazyColumnLoader: Number.es: N+1 loading of 4 instances\nemitted by: _nplusone_lazy_loading() nplus1loader/strategies.py:76\n</code></pre>\n<h1>Other solutions</h1>\n<ul>\n<li><a href=\"https://github.com/operator/sqlalchemy_bulk_lazy_loader\" rel=\"nofollow\">operator/sqlalchemy_bulk_lazy_loader</a>\nonly supports relationships and not columns, has code copy-pasted from an old SqlAlchemy version,\nrequires re-configuring your relationships on the model (lazy='bulk')</li>\n<li><a href=\"operator/sqlalchemy_bulk_lazy_loader\" rel=\"nofollow\">operator/sqlalchemy_bulk_lazy_loader</a>\nis a monitoring tool; it does not solve the N+1 problem at all</li>\n</ul>\n<p>Both projects served as a source of inspiration.</p>\n<h1>Database support</h1>\n<p>Tested with:</p>\n<ul>\n<li>PostgreSQL</li>\n<li>MySQL</li>\n<li>SQLite</li>\n</ul>\n<h1>Other Included Tools</h1>\n<h2>Handle specific attributes</h2>\n<p>The <code>nplus1loader</code> package has other tools that you might find useful.</p>\n<p>First of all, you can be more specific about which attributes you want to have handled by the N+1 loader.\nYou can opt to handle only relationships, all, or specific ones:</p>\n<pre><span class=\"n\">nplus1loader_rels</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"n\">nplus1loader_rels</span><span class=\"p\">(</span><span class=\"n\">relationship_name</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>or you can opt to handle only columns:</p>\n<pre><span class=\"n\">nplus1loader_cols</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"n\">nplus1loader_cols</span><span class=\"p\">(</span><span class=\"n\">column_name</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h2>nplus1loader('*', nested=True)</h2>\n<p>You may have noticed that the N+1 loader has the <code>nested=True</code> keyword argument.\nIt controls which options should be put on those relationships that have been lazy-loaded in bulk.</p>\n<p>By default, loader options in SqlAlchemy would only affect your top-level entities.\nFor instance:</p>\n<pre><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">default_columns</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">nplus1loader</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>would only apply the N+1 loader on the immediate attributes of the <code>User</code>, but not to its related models.\nSo, if the N+1 loader happens to load User's <code>Article</code>s, the attributes of <code>Article</code> would use the plain\nSqlAlchemy lazy-loading one by one.</p>\n<p>With <code>nested=True</code>, the N+1 loader would also put an <code>nplus1loader('*')</code> on <code>Article</code> when those are loaded.</p>\n<p>This <code>nested=True</code> is the default, and you don't have to bother about it.\nMoreover, there probably is no sane reason for disabling it, ever. So it's a good candidate for removal.</p>\n<h2><code>default_columns(Model)</code></h2>\n<p>This loader option takes the default <code>defer()</code>/<code>undefer()</code> settings from a model and sets them on a Query.\nIn itself, this option is useless, but it enables you to alter the defaults by using other loading options.</p>\n<p>In particular, <code>nplus1loader('*')</code> won't work unless you apply <code>default_columns()</code> first.</p>\n<p>Note that <code>nplus1loader('*')</code> can be chained from <code>default_columns()</code>, or it can be written after a comma.\nBoth will have the same effect.</p>\n<h2><code>raiseload_all('*')</code></h2>\n<p>Raiseload for both columns and relationships.</p>\n<p>Example:</p>\n<pre><span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">default_columns</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">),</span>\n    <span class=\"c1\"># Raise an error if any attribute at all is lazy-loaded</span>\n    <span class=\"n\">raiseload_all</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The error that it throws is <code>nplus1loader.LazyLoadingAttributeError()</code>, so it's easy to catch in your code ;)</p>\n<h2><code>raiseload_col(*columns)</code></h2>\n<p>Raiseload for columns. Use to fine-tune.</p>\n<p>Example:</p>\n<pre><span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span>\n    <span class=\"n\">load_only</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">),</span>\n    <span class=\"c1\"># Raise an error if any other column is lazy-loaded</span>\n    <span class=\"n\">raiseload_col</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can also specify individual columns as a list.</p>\n<p>The error that it throws is <code>nplus1loader.LazyLoadingAttributeError()</code>.</p>\n<h2><code>raiseload_rel(*relations)</code></h2>\n<p>Raiseload for relatioships. Use to fine-tune.</p>\n<p>It's essentially the same as <code>sqlalchemy.orm.raiseload()</code>, but throws the <code>nplus1loader.LazyLoadingAttributeError()</code>\nerror instead.</p>\n<h2><code>bulk_load_attribute_for_instance_states()</code></h2>\n<p>This is the heart of N+1 loader.</p>\n<p>You give it a list of instances, name one unlaoded attribute,\nand it makes just one query to load this attribute's value from the database, and efficiently\naugments all the existing instances with the loaded value of this attribute.</p>\n<p>This is an advanced feature.\nSee the code: <a href=\"nplus1loader/bulk_load.py\" rel=\"nofollow\">nplus1loader/bulk_load.py</a></p>\n\n          </div>"}, "last_serial": 7176174, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "fb1b23caea90bf31e0f4719f9e16e28d", "sha256": "7dbe9fe313a30afc197e4cc734979bae5d0a31c2d9731be0defc196f7e3a1344"}, "downloads": -1, "filename": "nplus1loader-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fb1b23caea90bf31e0f4719f9e16e28d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 14533, "upload_time": "2020-04-15T21:36:09", "upload_time_iso_8601": "2020-04-15T21:36:09.396925Z", "url": "https://files.pythonhosted.org/packages/e5/83/afc9dbb3ee582e2dfd5c99d066b219af2e34a68d433c441408219565d3f5/nplus1loader-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "197d1aa9863454eda32a917025a5c32f", "sha256": "cf85715c0eed41c10178003773819490e5993256bbb74d1bbc539c88de0b8698"}, "downloads": -1, "filename": "nplus1loader-1.0.0.tar.gz", "has_sig": false, "md5_digest": "197d1aa9863454eda32a917025a5c32f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 12925, "upload_time": "2020-04-15T21:36:11", "upload_time_iso_8601": "2020-04-15T21:36:11.138632Z", "url": "https://files.pythonhosted.org/packages/a8/6c/593b61f9adbcfe5c5ba56d3f6c1a4d775bdc0e61108eedbab68b5a85c0bc/nplus1loader-1.0.0.tar.gz", "yanked": false}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "e5d9daf93966a93a6c4b861225064b12", "sha256": "a8be89ad4ff598546773501f47113cb082057116a70111aae164ee43dca0564f"}, "downloads": -1, "filename": "nplus1loader-1.0.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "e5d9daf93966a93a6c4b861225064b12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 14555, "upload_time": "2020-04-15T21:00:10", "upload_time_iso_8601": "2020-04-15T21:00:10.804726Z", "url": "https://files.pythonhosted.org/packages/fd/bb/bd531bb08f836f1e2cd8a85af77ceb4f7e0261181ec608ff3ce694a61fa9/nplus1loader-1.0.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29f9c1e78d9d4d643b0471eb99f7faab", "sha256": "5ba0124d40dad827e8e5f68a711fd746b3f4aaa0c384cd45d71a82af352a6766"}, "downloads": -1, "filename": "nplus1loader-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "29f9c1e78d9d4d643b0471eb99f7faab", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 12925, "upload_time": "2020-04-15T21:00:12", "upload_time_iso_8601": "2020-04-15T21:00:12.883525Z", "url": "https://files.pythonhosted.org/packages/ad/9b/4c22aade365e8a9fe2f35aae074f80183c1ea08192b4fe7ad0dd3d889fec/nplus1loader-1.0.0b1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "cecf1740942b2a1fc46711e91eb060fe", "sha256": "ab282cba3352587cce8ce3506003dfdd2d672f1beeab4bac204471080af205c3"}, "downloads": -1, "filename": "nplus1loader-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cecf1740942b2a1fc46711e91eb060fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 16144, "upload_time": "2020-04-24T00:18:25", "upload_time_iso_8601": "2020-04-24T00:18:25.315314Z", "url": "https://files.pythonhosted.org/packages/a4/be/ca44c585939cbaf0413673c3a1a424b9b40cd8df8f70262fd91ef9e502ee/nplus1loader-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf5889597818eddcaee6389039d2680f", "sha256": "27f240f493130044e12aca42ff1bdd80b66035a04a3368fb1c3ad9c43124adb1"}, "downloads": -1, "filename": "nplus1loader-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cf5889597818eddcaee6389039d2680f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 14587, "upload_time": "2020-04-24T00:18:26", "upload_time_iso_8601": "2020-04-24T00:18:26.897285Z", "url": "https://files.pythonhosted.org/packages/76/26/fcecd2a18d7f28c0bbae24f4f2268d6dd74e4ab13223e96009e707334d7d/nplus1loader-1.0.1.tar.gz", "yanked": false}], "1.0.2b1": [{"comment_text": "", "digests": {"md5": "6a86d61392dd191cf9a110df4f349619", "sha256": "b9bcbc166c30949a03cd431bf523cbc8ba0c13b64d82bbf00a990dd3e497f29b"}, "downloads": -1, "filename": "nplus1loader-1.0.2b1-py3-none-any.whl", "has_sig": false, "md5_digest": "6a86d61392dd191cf9a110df4f349619", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 17525, "upload_time": "2020-05-05T22:03:53", "upload_time_iso_8601": "2020-05-05T22:03:53.708972Z", "url": "https://files.pythonhosted.org/packages/91/e9/b094c8fc72b1dae4014c2618bcf6d8634609903708d761df16afbff82c6d/nplus1loader-1.0.2b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35d7a306325bde72b44efd85e8814e84", "sha256": "2c96fa175b954013375095f43331b4129a2bd0ba72b42db13a4076dd5efb167f"}, "downloads": -1, "filename": "nplus1loader-1.0.2b1.tar.gz", "has_sig": false, "md5_digest": "35d7a306325bde72b44efd85e8814e84", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 15512, "upload_time": "2020-05-05T22:03:55", "upload_time_iso_8601": "2020-05-05T22:03:55.677053Z", "url": "https://files.pythonhosted.org/packages/19/4f/d3e2364ddf7db8c94b410410b7b8af485f01cbafd022c2ddc0bdde91dd50/nplus1loader-1.0.2b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cecf1740942b2a1fc46711e91eb060fe", "sha256": "ab282cba3352587cce8ce3506003dfdd2d672f1beeab4bac204471080af205c3"}, "downloads": -1, "filename": "nplus1loader-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cecf1740942b2a1fc46711e91eb060fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 16144, "upload_time": "2020-04-24T00:18:25", "upload_time_iso_8601": "2020-04-24T00:18:25.315314Z", "url": "https://files.pythonhosted.org/packages/a4/be/ca44c585939cbaf0413673c3a1a424b9b40cd8df8f70262fd91ef9e502ee/nplus1loader-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf5889597818eddcaee6389039d2680f", "sha256": "27f240f493130044e12aca42ff1bdd80b66035a04a3368fb1c3ad9c43124adb1"}, "downloads": -1, "filename": "nplus1loader-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cf5889597818eddcaee6389039d2680f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 14587, "upload_time": "2020-04-24T00:18:26", "upload_time_iso_8601": "2020-04-24T00:18:26.897285Z", "url": "https://files.pythonhosted.org/packages/76/26/fcecd2a18d7f28c0bbae24f4f2268d6dd74e4ab13223e96009e707334d7d/nplus1loader-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:32 2020"}