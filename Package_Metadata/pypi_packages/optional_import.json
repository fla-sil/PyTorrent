{"info": {"author": "Chris Martin", "author_email": "ch.martin@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Usage\n-----\n\nThis library contains only the context manager ``optional_import``:\n\n.. code:: python\n\n    >>> from optional_import import optional_import\n\nA successful import works as usual:\n\n.. code:: python\n\n    >>> with optional_import():\n    ...     import collections\n    >>> type(collections)\n    <type 'module'>\n\nIf the import does not exist, ``optional_import`` suppresses the\n``ImportError`` that would otherwise be raised.\n\n.. code:: python\n\n    >>> import unicorns\n    Traceback (most recent call last):\n      ...\n    ImportError: No module named unicorns\n\n    >>> with optional_import():\n    ...     import unicorns\n\n    >>> unicorns\n    Traceback (most recent call last):\n      ...\n    NameError: name 'unicorns' is not defined\n\n\nExample: Django local settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA common pattern in Django is to put default settings in ``settings.py``,\nput optional site-specific settings in ``settings_local.py``, and import\n``*`` from the local settings file if it exists.\n\n.. code:: python\n\n    with optional_import():\n        from .settings_local import *\n\n\nWhy not just catch ``ImportError``?\n-----------------------------------\n\nOptional imports can almost be achieved simply by catching ``ImportError``:\n\n.. code:: python\n\n    try:\n        import foo\n    except ImportError:\n        pass\n\nBut this approach introduces a problem: If ``foo`` exists but raises\n``ImportError``, we want that error to be raised, but instead it is\nswallowed by the ``except`` clause.\n\nWith ``optional_import``, the error is raised as desired. In the following\nexample, the ``bad`` module tries to import a nonexistent package ``unicorns``:\n\n.. code:: python\n\n    >>> with optional_import():\n    ...     import bad\n    Traceback (most recent call last):\n      ...\n    ImportError: No module named unicorns", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cardforcoin/optional_import", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "optional_import", "package_url": "https://pypi.org/project/optional_import/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/optional_import/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cardforcoin/optional_import"}, "release_url": "https://pypi.org/project/optional_import/1.2/", "requires_dist": null, "requires_python": null, "summary": "Import something if it exists.", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"usage\">\n<h2>Usage</h2>\n<p>This library contains only the context manager <tt>optional_import</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">optional_import</span> <span class=\"kn\">import</span> <span class=\"n\">optional_import</span>\n</pre>\n<p>A successful import works as usual:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">optional_import</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">collections</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s1\">'module'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>If the import does not exist, <tt>optional_import</tt> suppresses the\n<tt>ImportError</tt> that would otherwise be raised.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">unicorns</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"n\">unicorns</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">optional_import</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"kn\">import</span> <span class=\"nn\">unicorns</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">unicorns</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"ne\">NameError</span><span class=\"p\">:</span> <span class=\"n\">name</span> <span class=\"s1\">'unicorns'</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">defined</span>\n</pre>\n<div id=\"example-django-local-settings\">\n<h3>Example: Django local settings</h3>\n<p>A common pattern in Django is to put default settings in <tt>settings.py</tt>,\nput optional site-specific settings in <tt>settings_local.py</tt>, and import\n<tt>*</tt> from the local settings file if it exists.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">optional_import</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">.settings_local</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n</div>\n</div>\n<div id=\"why-not-just-catch-importerror\">\n<h2>Why not just catch <tt>ImportError</tt>?</h2>\n<p>Optional imports can almost be achieved simply by catching <tt>ImportError</tt>:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">foo</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>But this approach introduces a problem: If <tt>foo</tt> exists but raises\n<tt>ImportError</tt>, we want that error to be raised, but instead it is\nswallowed by the <tt>except</tt> clause.</p>\n<p>With <tt>optional_import</tt>, the error is raised as desired. In the following\nexample, the <tt>bad</tt> module tries to import a nonexistent package <tt>unicorns</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">optional_import</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"kn\">import</span> <span class=\"nn\">bad</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"n\">unicorns</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1129998, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "88fde520ed2ee8f5848a97eb626800f9", "sha256": "0762ea1cf0fe8b6bf57364859ed72215af1f13eaf5e01cd67e1b1d366aaf71ef"}, "downloads": -1, "filename": "optional_import-1.0.tar.gz", "has_sig": false, "md5_digest": "88fde520ed2ee8f5848a97eb626800f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2137, "upload_time": "2014-06-18T19:20:24", "upload_time_iso_8601": "2014-06-18T19:20:24.494584Z", "url": "https://files.pythonhosted.org/packages/29/de/01d8ec7c9af7679b0ad861dbfd832cf4233046d927cdf2b55ae24cc5299a/optional_import-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "0b4f9eb6d6d87fa0ece014455ba0ccd0", "sha256": "4c24efe1553a8330edbb84b253e9c8d7baa1f8c893095e679618ce5e88bf3083"}, "downloads": -1, "filename": "optional_import-1.1.tar.gz", "has_sig": false, "md5_digest": "0b4f9eb6d6d87fa0ece014455ba0ccd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2124, "upload_time": "2014-06-18T19:43:52", "upload_time_iso_8601": "2014-06-18T19:43:52.616254Z", "url": "https://files.pythonhosted.org/packages/94/ab/10d23ad45716cbee8349f0182511d6c42c0e0d88e3877693188cce28a726/optional_import-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "eccd26664b97e9db881e161a458a67dd", "sha256": "cd651eb9824a93d586905a4c54c19a9f2865f59201b022dcd32a8fc71f1faf86"}, "downloads": -1, "filename": "optional_import-1.2.tar.gz", "has_sig": false, "md5_digest": "eccd26664b97e9db881e161a458a67dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2359, "upload_time": "2014-06-19T03:40:22", "upload_time_iso_8601": "2014-06-19T03:40:22.800064Z", "url": "https://files.pythonhosted.org/packages/de/c6/cbbda50cb62ade7d16acaaa5d1b1a34589281ee8b24d54ba36d5d6d35811/optional_import-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eccd26664b97e9db881e161a458a67dd", "sha256": "cd651eb9824a93d586905a4c54c19a9f2865f59201b022dcd32a8fc71f1faf86"}, "downloads": -1, "filename": "optional_import-1.2.tar.gz", "has_sig": false, "md5_digest": "eccd26664b97e9db881e161a458a67dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2359, "upload_time": "2014-06-19T03:40:22", "upload_time_iso_8601": "2014-06-19T03:40:22.800064Z", "url": "https://files.pythonhosted.org/packages/de/c6/cbbda50cb62ade7d16acaaa5d1b1a34589281ee8b24d54ba36d5d6d35811/optional_import-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:00 2020"}