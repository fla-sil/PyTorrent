{"info": {"author": "Florian Strzelecki", "author_email": "florian.strzelecki@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing", "Topic :: Text Processing :: Markup :: XML"], "description": "===================\nPython XML-Unittest\n===================\n\n.. image:: https://travis-ci.org/Exirel/python-xmlunittest.svg?branch=master\n    :target: https://travis-ci.org/Exirel/python-xmlunittest\n.. image:: https://coveralls.io/repos/Exirel/python-xmlunittest/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/Exirel/python-xmlunittest?branch=master\n.. image:: https://gemnasium.com/Exirel/python-xmlunittest.svg\n    :target: https://gemnasium.com/Exirel/python-xmlunittest\n.. image:: https://badge.fury.io/py/xmlunittest.svg\n    :target: http://badge.fury.io/py/xmlunittest\n\nAnyone uses XML, for RSS, for configuration files, for... well, we all use XML\nfor our own reasons (folk says one can not simply uses XML, but still...).\n\nSo, your code generates XML, and everything is fine. As you follow best\npractices (if you don\u2019t, I think you should), you have written some good\nunit-tests, where you compare code\u2019s result with an expected result. I mean you\ncompare string with string. One day, something bad might happen.\n\nXML is not a simple string, it is a structured document. One can not simply\ncompare two XML string and expect everything to be fine: attributes\u2019s order can\nchange unexpectedly, elements can be optional, and no one can explain simply\nhow spaces and tabs works in XML formatting.\n\nHere comes XML unittest TestCase: if you want to use the built-in unittest\npackage (or if it is a requirement), and you are not afraid of using xpath\nexpression with ``lxml``, this library is made for you.\n\nYou will be able to test your XML document, and use the power of xpath and\nvarious schema languages to write tests that matter.\n\n\nLinks\n=====\n\n- Distribution: https://pypi.python.org/pypi/xmlunittest\n- Documentation: http://python-xmlunittest.readthedocs.org/en/latest/\n- Source: https://github.com/Exirel/python-xmlunittest\n\n\nHow to\n======\n\n- Extends ``xmlunittest.XmlTestCase``\n- Write your tests, using the function or method that generate XML document\n- Use ``xmlunittest.XmlTestCase``\u2018s assertion methods to validate\n- Keep your tests readable\n\nExample:\n\n.. code-block:: python\n\n    from xmlunittest import XmlTestCase\n\n\n    class CustomTestCase(XmlTestCase):\n\n        def test_my_custom_test(self):\n            # In a real case, data come from a call to your function/method.\n            data = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n            <root xmlns:ns=\"uri\">\n                <leaf id=\"1\" active=\"on\" />\n                <leaf id=\"2\" active=\"on\" />\n                <leaf id=\"3\" active=\"off\" />\n            </root>\"\"\"\n\n            # Everything starts with `assertXmlDocument`\n            root = self.assertXmlDocument(data)\n\n            # Check namespace\n            self.assertXmlNamespace(root, 'ns', 'uri')\n            # Check\n            self.assertXpathsUniqueValue(root, ('./leaf/@id', ))\n            self.assertXpathValues(root, './leaf/@active', ('on', 'off'))", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://python-xmlunittest.readthedocs.org/en/latest/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xmlunittest", "package_url": "https://pypi.org/project/xmlunittest/", "platform": "", "project_url": "https://pypi.org/project/xmlunittest/", "project_urls": {"Homepage": "http://python-xmlunittest.readthedocs.org/en/latest/"}, "release_url": "https://pypi.org/project/xmlunittest/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Library using lxml and unittest for unit testing XML.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/Exirel/python-xmlunittest\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Exirel/python-xmlunittest.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22abad15f3780fbba28e8dda3b77051409667a50/68747470733a2f2f7472617669732d63692e6f72672f45786972656c2f707974686f6e2d786d6c756e6974746573742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Exirel/python-xmlunittest?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/Exirel/python-xmlunittest/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d516699f44ac773a1b58f3e074900fb055b0abf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f45786972656c2f707974686f6e2d786d6c756e6974746573742f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://gemnasium.com/Exirel/python-xmlunittest\" rel=\"nofollow\"><img alt=\"https://gemnasium.com/Exirel/python-xmlunittest.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ded002c0c9f43160d4cf18da7fd2714b520a8145/68747470733a2f2f67656d6e617369756d2e636f6d2f45786972656c2f707974686f6e2d786d6c756e6974746573742e737667\"></a>\n<a href=\"http://badge.fury.io/py/xmlunittest\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/xmlunittest.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ac5db4a55144ef6c9fac5ec15047ea7a7bb4ca2/68747470733a2f2f62616467652e667572792e696f2f70792f786d6c756e6974746573742e737667\"></a>\n<p>Anyone uses XML, for RSS, for configuration files, for\u2026 well, we all use XML\nfor our own reasons (folk says one can not simply uses XML, but still\u2026).</p>\n<p>So, your code generates XML, and everything is fine. As you follow best\npractices (if you don\u2019t, I think you should), you have written some good\nunit-tests, where you compare code\u2019s result with an expected result. I mean you\ncompare string with string. One day, something bad might happen.</p>\n<p>XML is not a simple string, it is a structured document. One can not simply\ncompare two XML string and expect everything to be fine: attributes\u2019s order can\nchange unexpectedly, elements can be optional, and no one can explain simply\nhow spaces and tabs works in XML formatting.</p>\n<p>Here comes XML unittest TestCase: if you want to use the built-in unittest\npackage (or if it is a requirement), and you are not afraid of using xpath\nexpression with <tt>lxml</tt>, this library is made for you.</p>\n<p>You will be able to test your XML document, and use the power of xpath and\nvarious schema languages to write tests that matter.</p>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Distribution: <a href=\"https://pypi.python.org/pypi/xmlunittest\" rel=\"nofollow\">https://pypi.python.org/pypi/xmlunittest</a></li>\n<li>Documentation: <a href=\"http://python-xmlunittest.readthedocs.org/en/latest/\" rel=\"nofollow\">http://python-xmlunittest.readthedocs.org/en/latest/</a></li>\n<li>Source: <a href=\"https://github.com/Exirel/python-xmlunittest\" rel=\"nofollow\">https://github.com/Exirel/python-xmlunittest</a></li>\n</ul>\n</div>\n<div id=\"how-to\">\n<h2>How to</h2>\n<ul>\n<li>Extends <tt>xmlunittest.XmlTestCase</tt></li>\n<li>Write your tests, using the function or method that generate XML document</li>\n<li>Use <tt>xmlunittest.XmlTestCase</tt>\u2018s assertion methods to validate</li>\n<li>Keep your tests readable</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xmlunittest</span> <span class=\"kn\">import</span> <span class=\"n\">XmlTestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomTestCase</span><span class=\"p\">(</span><span class=\"n\">XmlTestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_my_custom_test</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># In a real case, data come from a call to your function/method.</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n        &lt;root xmlns:ns=\"uri\"&gt;\n            &lt;leaf id=\"1\" active=\"on\" /&gt;\n            &lt;leaf id=\"2\" active=\"on\" /&gt;\n            &lt;leaf id=\"3\" active=\"off\" /&gt;\n        &lt;/root&gt;\"\"\"</span>\n\n        <span class=\"c1\"># Everything starts with `assertXmlDocument`</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertXmlDocument</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check namespace</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertXmlNamespace</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">'ns'</span><span class=\"p\">,</span> <span class=\"s1\">'uri'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Check</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertXpathsUniqueValue</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'./leaf/@id'</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertXpathValues</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">'./leaf/@active'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'on'</span><span class=\"p\">,</span> <span class=\"s1\">'off'</span><span class=\"p\">))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3980643, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "b3326819bee432fe0bed8b28c51c9b77", "sha256": "d36d4a5f1c7f8e85c0a82e10f30ca60c76f4b81fe468ca4bce3eee8f9f523919"}, "downloads": -1, "filename": "xmlunittest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b3326819bee432fe0bed8b28c51c9b77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9533, "upload_time": "2013-11-28T21:42:23", "upload_time_iso_8601": "2013-11-28T21:42:23.004445Z", "url": "https://files.pythonhosted.org/packages/6c/3a/527003cc82d9e21d52914e445539ab89756e8537fd0851ebd95d1dbe2ebb/xmlunittest-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b1af22813220c8e68097576a9fe8dd34", "sha256": "2369e72302e0327d8464d7e524664d4d6145da10d435cbaad18c213bbe487e2b"}, "downloads": -1, "filename": "xmlunittest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b1af22813220c8e68097576a9fe8dd34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13179, "upload_time": "2013-12-14T17:44:12", "upload_time_iso_8601": "2013-12-14T17:44:12.509303Z", "url": "https://files.pythonhosted.org/packages/a6/ff/3fd4e483c4c01e68d2add4a2dfa2097bb62a9119a699e4de27ba8fd2fd9e/xmlunittest-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f5ecdc063c7ab733114039cb91417d88", "sha256": "8a60afbd4ad829cf8213a52cc57e4cb2ba857052fd0319f745aa22f4735d8ec1"}, "downloads": -1, "filename": "xmlunittest-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f5ecdc063c7ab733114039cb91417d88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10752, "upload_time": "2014-09-30T14:38:50", "upload_time_iso_8601": "2014-09-30T14:38:50.288660Z", "url": "https://files.pythonhosted.org/packages/c3/2f/9503a1ec178ab611c263d4f10b2b3b9213370cdae94895ef2f679fd3eddb/xmlunittest-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8135d5e29519df2ca33c677d9fcf17bc", "sha256": "c218aa9084641d8159e569c54f9719ef92630ab885b499ff1ed6022b9d14d6c5"}, "downloads": -1, "filename": "xmlunittest-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8135d5e29519df2ca33c677d9fcf17bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11186, "upload_time": "2015-02-14T16:13:30", "upload_time_iso_8601": "2015-02-14T16:13:30.488302Z", "url": "https://files.pythonhosted.org/packages/24/3b/a8adf648969854e685195583c5529bd5b78964ad53c172e787f2a4914db7/xmlunittest-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "cdadd3594f94e39f593c8eb456614c32", "sha256": "ccd3ef3503263687ed69683a4d7fc3918338d40cef0d4e36aabaf04aad8b6d8f"}, "downloads": -1, "filename": "xmlunittest-0.3.2.tar.gz", "has_sig": false, "md5_digest": "cdadd3594f94e39f593c8eb456614c32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11363, "upload_time": "2016-01-05T17:36:28", "upload_time_iso_8601": "2016-01-05T17:36:28.355084Z", "url": "https://files.pythonhosted.org/packages/cb/09/0b050641a9950e157fe814ea48e68085a1110ca65eafb75832b3bc04b18f/xmlunittest-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "736f91e7f2d73f16d336fea8651b9181", "sha256": "fae86083a453e95199f408b4c17bc106f579523ca76f3d8c0881121749327356"}, "downloads": -1, "filename": "xmlunittest-0.4.0.tar.gz", "has_sig": false, "md5_digest": "736f91e7f2d73f16d336fea8651b9181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11720, "upload_time": "2016-10-10T17:36:08", "upload_time_iso_8601": "2016-10-10T17:36:08.895371Z", "url": "https://files.pythonhosted.org/packages/a5/f7/eaea4aadb16680ded498920172769683d4ac07d54d5405b5ef9644dfb702/xmlunittest-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c6d9ed64b544149c06680ca047bd996d", "sha256": "9c7e11603fc03adcef8ee6af2a4e6162846305adedc4c4524ee42ac551b0d8ff"}, "downloads": -1, "filename": "xmlunittest-0.5.0.tar.gz", "has_sig": false, "md5_digest": "c6d9ed64b544149c06680ca047bd996d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11802, "upload_time": "2018-06-20T09:08:41", "upload_time_iso_8601": "2018-06-20T09:08:41.677181Z", "url": "https://files.pythonhosted.org/packages/06/45/1f6ed447b4613f8fc30a0a22b35232224235f627ecceb1092ee3117f63dc/xmlunittest-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6d9ed64b544149c06680ca047bd996d", "sha256": "9c7e11603fc03adcef8ee6af2a4e6162846305adedc4c4524ee42ac551b0d8ff"}, "downloads": -1, "filename": "xmlunittest-0.5.0.tar.gz", "has_sig": false, "md5_digest": "c6d9ed64b544149c06680ca047bd996d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11802, "upload_time": "2018-06-20T09:08:41", "upload_time_iso_8601": "2018-06-20T09:08:41.677181Z", "url": "https://files.pythonhosted.org/packages/06/45/1f6ed447b4613f8fc30a0a22b35232224235f627ecceb1092ee3117f63dc/xmlunittest-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:55 2020"}