{"info": {"author": "Nathan Hoad", "author_email": "nathan@getoffmalawn.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "aiomanhole\n==========\n\nManhole for accessing asyncio applications. This is useful for debugging\napplication state in situations where you have access to the process, but need\nto access internal application state.\n\nAdding a manhole to your application is simple::\n\n    from aiomanhole import start_manhole\n\n    start_manhole(namespace={\n        'gizmo': application_state_gizmo,\n        'whatsit': application_state_whatsit,\n    })\n\nQuick example, in one shell, run this::\n\n    $ python -m aiomanhole\n\nIn a secondary shell, run this::\n\n    $ nc -U /var/tmp/testing.manhole\n    Well this is neat\n    >>> f = 5 + 5\n    >>> f\n    10\n    >>> import os\n    >>> os.getpid()\n    4238\n    >>> import sys\n    >>> sys.exit(0)\n\n\nAnd you'll see the manhole you started has exited.\n\nThe package provides both a threaded and non-threaded interpreter, and allows\nyou to share the namespace between clients if you want.\n\n\nI'm getting \"Address is already in use\" when I start! Help!\n===========================================================\n\nUnlike regular TCP/UDP sockets, UNIX domain sockets are entries in the\nfilesystem. When your process shuts down, the UNIX socket that is created is\nnot cleaned up. What this means is that when your application starts up again,\nit will attempt to bind a UNIX socket to that path again and fail, as it is\nalready present (it's \"already in use\").\n\nThe standard approach to working with UNIX sockets is to delete them before you\ntry to bind to it again, for example::\n\n    import os\n    try:\n        os.unlink('/path/to/my.manhole')\n    except FileNotFoundError:\n        pass\n    start_manhole('/path/to/my.manhole')\n\n\nYou may be tempted to try and clean up the socket on shutdown, but don't. What\nif your application crashes? What if your computer loses power? There are lots\nof things that can go wrong, and hoping the previous run was successful, while\nadmirably positive, is not something you can do.\n\n\nCan I specify what is available in the manhole?\n===============================================\nYes! When you call `start_manhole`, just pass along a dictionary of what you\nwant to provide as the namespace parameter::\n\n    from aiomanhole import start_manhole\n\n    start_manhole(namespace={\n        'gizmo': application_state_gizmo,\n        'whatsit': application_state_whatsit,\n        'None': 5,  # don't do this though\n    })\n\n\nWhen should I use threaded=True?\n================================\n\nSpecifying threaded=True means that statements in the interactive session are\nexecuted in a thread, as opposed to executing them in the event loop.\n\nSay for example you did this in a non-threaded interactive session::\n\n    >>> while True:\n    ...  pass\n    ...\n\nYou've just broken your application! You can't abort that without restarting\nthe application. If however you ran that in a threaded application, you'd\n'only' have a thread trashing the CPU, slowing down your application, as\nopposed to making it totally unresponsive.\n\nBy default, a threaded interpreter will time out commands after 5 seconds,\nthough this is configurable. Not that this will **not** kill the thread, but\nallow you to keep running commands.\n\n\nChange History\n==============\n\n0.6.0 (30th April 2019)\n - Don't use the global loop. Thanks Timothy Fitz!\n - Allow a port of 0. Thanks Timothy Fitz!\n - Fix unit test failure.\n\n0.5.0 (6th August 2018)\n - Fix syntax error in 3.7\n - Drop 3.4 support.\n\n0.4.2 (3rd March 2017)\n - Handle clients putting the socket into a half-closed state when an EOF\n   occurs.\n\n0.4.1 (3rd March 2017)\n - Ensure prompts are bytes, broken in 0.4.0.\n\n0.4.0 (3rd March 2017)\n - Ensure actual syntax errors get reported to the client.\n\n0.3.0 (23rd August 2016)\n - **Behaviour change** aiomanhole no longer attempts to remove the UNIX socket\n   on shutdown. This was flakey behaviour and does not match best practice\n   (i.e. removing the UNIX socket on startup before you start your server). As\n   a result, errors creating the manhole will now be logged instead of silently\n   failing.\n - `start_manhole` now returns a Future that you can wait on.\n - Giving a loop to `start_manhole` now works more reliably. This won't matter\n   for most people.\n - Feels \"snappier\"\n\n0.2.1 (14th September 2014)\n - Handle a banner of None.\n - Fixed small typo in MANIFEST.in for the changelog.\n - Feels \"snappier\"\n\n0.2.0 (25th June 2014)\n - Handle multiline statements much better.\n - setup.py pointed to wrong domain for project URL\n - Removed pointless insertion of '_' into the namespace.\n - Added lots of tests.\n - Feels \"snappier\"\n\n0.1.1 (19th June 2014)\n - Use setuptools as a fallback when installing.\n - Feels \"snappier\"\n\n0.1 (19th June 2014)\n - Initial release\n - Feels \"snappier\"\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nathan-hoad/aiomanhole", "keywords": "", "license": "BSD (3-clause)", "maintainer": "", "maintainer_email": "", "name": "aiomanhole", "package_url": "https://pypi.org/project/aiomanhole/", "platform": "", "project_url": "https://pypi.org/project/aiomanhole/", "project_urls": {"Homepage": "https://github.com/nathan-hoad/aiomanhole"}, "release_url": "https://pypi.org/project/aiomanhole/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "Python module to provide a manhole in asyncio applications", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"aiomanhole\">\n<h2>aiomanhole</h2>\n<p>Manhole for accessing asyncio applications. This is useful for debugging\napplication state in situations where you have access to the process, but need\nto access internal application state.</p>\n<p>Adding a manhole to your application is simple:</p>\n<pre>from aiomanhole import start_manhole\n\nstart_manhole(namespace={\n    'gizmo': application_state_gizmo,\n    'whatsit': application_state_whatsit,\n})\n</pre>\n<p>Quick example, in one shell, run this:</p>\n<pre>$ python -m aiomanhole\n</pre>\n<p>In a secondary shell, run this:</p>\n<pre>$ nc -U /var/tmp/testing.manhole\nWell this is neat\n&gt;&gt;&gt; f = 5 + 5\n&gt;&gt;&gt; f\n10\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getpid()\n4238\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.exit(0)\n</pre>\n<p>And you\u2019ll see the manhole you started has exited.</p>\n<p>The package provides both a threaded and non-threaded interpreter, and allows\nyou to share the namespace between clients if you want.</p>\n</div>\n<div id=\"i-m-getting-address-is-already-in-use-when-i-start-help\">\n<h2>I\u2019m getting \u201cAddress is already in use\u201d when I start! Help!</h2>\n<p>Unlike regular TCP/UDP sockets, UNIX domain sockets are entries in the\nfilesystem. When your process shuts down, the UNIX socket that is created is\nnot cleaned up. What this means is that when your application starts up again,\nit will attempt to bind a UNIX socket to that path again and fail, as it is\nalready present (it\u2019s \u201calready in use\u201d).</p>\n<p>The standard approach to working with UNIX sockets is to delete them before you\ntry to bind to it again, for example:</p>\n<pre>import os\ntry:\n    os.unlink('/path/to/my.manhole')\nexcept FileNotFoundError:\n    pass\nstart_manhole('/path/to/my.manhole')\n</pre>\n<p>You may be tempted to try and clean up the socket on shutdown, but don\u2019t. What\nif your application crashes? What if your computer loses power? There are lots\nof things that can go wrong, and hoping the previous run was successful, while\nadmirably positive, is not something you can do.</p>\n</div>\n<div id=\"can-i-specify-what-is-available-in-the-manhole\">\n<h2>Can I specify what is available in the manhole?</h2>\n<p>Yes! When you call <cite>start_manhole</cite>, just pass along a dictionary of what you\nwant to provide as the namespace parameter:</p>\n<pre>from aiomanhole import start_manhole\n\nstart_manhole(namespace={\n    'gizmo': application_state_gizmo,\n    'whatsit': application_state_whatsit,\n    'None': 5,  # don't do this though\n})\n</pre>\n</div>\n<div id=\"when-should-i-use-threaded-true\">\n<h2>When should I use threaded=True?</h2>\n<p>Specifying threaded=True means that statements in the interactive session are\nexecuted in a thread, as opposed to executing them in the event loop.</p>\n<p>Say for example you did this in a non-threaded interactive session:</p>\n<pre>&gt;&gt;&gt; while True:\n...  pass\n...\n</pre>\n<p>You\u2019ve just broken your application! You can\u2019t abort that without restarting\nthe application. If however you ran that in a threaded application, you\u2019d\n\u2018only\u2019 have a thread trashing the CPU, slowing down your application, as\nopposed to making it totally unresponsive.</p>\n<p>By default, a threaded interpreter will time out commands after 5 seconds,\nthough this is configurable. Not that this will <strong>not</strong> kill the thread, but\nallow you to keep running commands.</p>\n</div>\n<div id=\"change-history\">\n<h2>Change History</h2>\n<dl>\n<dt>0.6.0 (30th April 2019)</dt>\n<dd><ul>\n<li>Don\u2019t use the global loop. Thanks Timothy Fitz!</li>\n<li>Allow a port of 0. Thanks Timothy Fitz!</li>\n<li>Fix unit test failure.</li>\n</ul>\n</dd>\n<dt>0.5.0 (6th August 2018)</dt>\n<dd><ul>\n<li>Fix syntax error in 3.7</li>\n<li>Drop 3.4 support.</li>\n</ul>\n</dd>\n<dt>0.4.2 (3rd March 2017)</dt>\n<dd><ul>\n<li>Handle clients putting the socket into a half-closed state when an EOF\noccurs.</li>\n</ul>\n</dd>\n<dt>0.4.1 (3rd March 2017)</dt>\n<dd><ul>\n<li>Ensure prompts are bytes, broken in 0.4.0.</li>\n</ul>\n</dd>\n<dt>0.4.0 (3rd March 2017)</dt>\n<dd><ul>\n<li>Ensure actual syntax errors get reported to the client.</li>\n</ul>\n</dd>\n<dt>0.3.0 (23rd August 2016)</dt>\n<dd><ul>\n<li><strong>Behaviour change</strong> aiomanhole no longer attempts to remove the UNIX socket\non shutdown. This was flakey behaviour and does not match best practice\n(i.e. removing the UNIX socket on startup before you start your server). As\na result, errors creating the manhole will now be logged instead of silently\nfailing.</li>\n<li><cite>start_manhole</cite> now returns a Future that you can wait on.</li>\n<li>Giving a loop to <cite>start_manhole</cite> now works more reliably. This won\u2019t matter\nfor most people.</li>\n<li>Feels \u201csnappier\u201d</li>\n</ul>\n</dd>\n<dt>0.2.1 (14th September 2014)</dt>\n<dd><ul>\n<li>Handle a banner of None.</li>\n<li>Fixed small typo in MANIFEST.in for the changelog.</li>\n<li>Feels \u201csnappier\u201d</li>\n</ul>\n</dd>\n<dt>0.2.0 (25th June 2014)</dt>\n<dd><ul>\n<li>Handle multiline statements much better.</li>\n<li>setup.py pointed to wrong domain for project URL</li>\n<li>Removed pointless insertion of \u2018_\u2019 into the namespace.</li>\n<li>Added lots of tests.</li>\n<li>Feels \u201csnappier\u201d</li>\n</ul>\n</dd>\n<dt>0.1.1 (19th June 2014)</dt>\n<dd><ul>\n<li>Use setuptools as a fallback when installing.</li>\n<li>Feels \u201csnappier\u201d</li>\n</ul>\n</dd>\n<dt>0.1 (19th June 2014)</dt>\n<dd><ul>\n<li>Initial release</li>\n<li>Feels \u201csnappier\u201d</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 5210438, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cab1ae66809c6507ced68afd9601070e", "sha256": "3d8fdacc087d4ea78365ecf9a4d8efa20da8e2c0599635430c48737262671f6b"}, "downloads": -1, "filename": "aiomanhole-0.1.tar.gz", "has_sig": false, "md5_digest": "cab1ae66809c6507ced68afd9601070e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4831, "upload_time": "2014-06-19T03:16:51", "upload_time_iso_8601": "2014-06-19T03:16:51.789030Z", "url": "https://files.pythonhosted.org/packages/87/20/1aea3f38cc3ed7beeeeea1f98d6707bf3a029171763b48e8e5ebab2e8222/aiomanhole-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a076a99fe0c479e6b40312e6c76ff2d4", "sha256": "6fd98cf4030af017c75846396c3c1d8157ae900595b59826b1fee7b47a445f20"}, "downloads": -1, "filename": "aiomanhole-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a076a99fe0c479e6b40312e6c76ff2d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4375, "upload_time": "2014-06-19T03:20:04", "upload_time_iso_8601": "2014-06-19T03:20:04.378060Z", "url": "https://files.pythonhosted.org/packages/8b/35/dbcba2f8fb2fff2be992bad42bbce87f3a72189dc2b181e98ee88b1c994f/aiomanhole-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ddad0136b18526489f4a0274a9cf11ef", "sha256": "dd7854d4494f5dc8d9f9b400f32317f12d60544d61242a72764529ee2e92e18b"}, "downloads": -1, "filename": "aiomanhole-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ddad0136b18526489f4a0274a9cf11ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5354, "upload_time": "2014-06-25T01:54:03", "upload_time_iso_8601": "2014-06-25T01:54:03.154024Z", "url": "https://files.pythonhosted.org/packages/e4/6f/7b83a9507af777504792e949ab0c26355428529ad80560e62dbcfe79e537/aiomanhole-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a67b1df5ae3ed6bce9682941e18accfe", "sha256": "34ab93db39815d0e3f080f9cd5dc28832fca7ac2a14a0cb4ee5677fe058d96d5"}, "downloads": -1, "filename": "aiomanhole-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a67b1df5ae3ed6bce9682941e18accfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5723, "upload_time": "2014-09-14T01:25:49", "upload_time_iso_8601": "2014-09-14T01:25:49.600980Z", "url": "https://files.pythonhosted.org/packages/48/6e/5d944a84d14504d6e8d5aae48a4864be3b0ea8445ee6daa061651b1deb1e/aiomanhole-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f7116d11a045c8c78a2c374cf1eedf3c", "sha256": "fc07ba3f2e9ec5834a7a3e4c29a278f9a35e06cc966216e32ad66e7748f14e29"}, "downloads": -1, "filename": "aiomanhole-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f7116d11a045c8c78a2c374cf1eedf3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6571, "upload_time": "2016-08-23T00:49:32", "upload_time_iso_8601": "2016-08-23T00:49:32.268259Z", "url": "https://files.pythonhosted.org/packages/21/da/fc81b74d5e7dda932dd2742b5cb595a9cf34708524c9261b993353795cdc/aiomanhole-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "402bf121865a74cd065d78701935b7d2", "sha256": "b805cffb2bd6930c44a1c26ee4dcaf81f9b5cac44e94bf1e34356496ffe7c1d8"}, "downloads": -1, "filename": "aiomanhole-0.4.0.tar.gz", "has_sig": false, "md5_digest": "402bf121865a74cd065d78701935b7d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6689, "upload_time": "2017-03-02T23:45:10", "upload_time_iso_8601": "2017-03-02T23:45:10.512700Z", "url": "https://files.pythonhosted.org/packages/6e/8b/d8c19bf7b2af02c0c2f58561154afd004845e8c51f37bab73be72f708fbb/aiomanhole-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "131646c3a6098a95969a6e36e4c4abeb", "sha256": "d671107f72d985c29827cd46718fffe442c60aa372744bd3532594eb4af26a3e"}, "downloads": -1, "filename": "aiomanhole-0.4.1.tar.gz", "has_sig": false, "md5_digest": "131646c3a6098a95969a6e36e4c4abeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6708, "upload_time": "2017-03-03T01:00:42", "upload_time_iso_8601": "2017-03-03T01:00:42.330658Z", "url": "https://files.pythonhosted.org/packages/6a/1c/939865402dd6e4f92ff7fa4392e60fd14abf95ae435589d5c28de9122bab/aiomanhole-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "07d8ad85199a482bbd8aad063f7602f1", "sha256": "89418ccb2b3aa28125e0bce944e4cf35a4de01efb42181110b8653385398a4d7"}, "downloads": -1, "filename": "aiomanhole-0.4.2.tar.gz", "has_sig": false, "md5_digest": "07d8ad85199a482bbd8aad063f7602f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6775, "upload_time": "2017-03-03T04:29:21", "upload_time_iso_8601": "2017-03-03T04:29:21.977620Z", "url": "https://files.pythonhosted.org/packages/a1/55/4ae971649ca8dd623c32ca0f1c75b4b6b5b80b2468627821bc743e2b0d54/aiomanhole-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "fb7529fa2aff67e1f9f9967d26399748", "sha256": "d9fde84da406d08b7f534276d57ef68f23def36acd8fdd5ca9a1a50eaad664c3"}, "downloads": -1, "filename": "aiomanhole-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fb7529fa2aff67e1f9f9967d26399748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6835, "upload_time": "2018-08-07T00:15:21", "upload_time_iso_8601": "2018-08-07T00:15:21.332182Z", "url": "https://files.pythonhosted.org/packages/69/e9/eac05bd70e0003f86b43bad7fff1ab4f9646085bbdb4aba3964aca522246/aiomanhole-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7536ae4203218b54c1fe1339b89fe287", "sha256": "c54d3e89ba76666f95f656e331e63a3fb6a490ffa11a37680ce8eead5ba23a30"}, "downloads": -1, "filename": "aiomanhole-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7536ae4203218b54c1fe1339b89fe287", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7091, "upload_time": "2019-04-30T22:52:06", "upload_time_iso_8601": "2019-04-30T22:52:06.747250Z", "url": "https://files.pythonhosted.org/packages/47/09/8a3fde9c52f4778a0de4e4b0fb49d7f89f575b70c214fe1b932388768b5a/aiomanhole-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50606cafe4adc921b6bbbf51202a8764", "sha256": "3efc7e1655d0ad623c556297f8cca90a4c5d8bb76dc53bf6ad5f10cc4b0d571d"}, "downloads": -1, "filename": "aiomanhole-0.6.0.tar.gz", "has_sig": false, "md5_digest": "50606cafe4adc921b6bbbf51202a8764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6868, "upload_time": "2019-04-30T22:52:08", "upload_time_iso_8601": "2019-04-30T22:52:08.886782Z", "url": "https://files.pythonhosted.org/packages/9f/41/1af9e13b8151e107689f9f4f2e82a889c43a3eba7fb19d5168a69dd5749e/aiomanhole-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7536ae4203218b54c1fe1339b89fe287", "sha256": "c54d3e89ba76666f95f656e331e63a3fb6a490ffa11a37680ce8eead5ba23a30"}, "downloads": -1, "filename": "aiomanhole-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7536ae4203218b54c1fe1339b89fe287", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7091, "upload_time": "2019-04-30T22:52:06", "upload_time_iso_8601": "2019-04-30T22:52:06.747250Z", "url": "https://files.pythonhosted.org/packages/47/09/8a3fde9c52f4778a0de4e4b0fb49d7f89f575b70c214fe1b932388768b5a/aiomanhole-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50606cafe4adc921b6bbbf51202a8764", "sha256": "3efc7e1655d0ad623c556297f8cca90a4c5d8bb76dc53bf6ad5f10cc4b0d571d"}, "downloads": -1, "filename": "aiomanhole-0.6.0.tar.gz", "has_sig": false, "md5_digest": "50606cafe4adc921b6bbbf51202a8764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6868, "upload_time": "2019-04-30T22:52:08", "upload_time_iso_8601": "2019-04-30T22:52:08.886782Z", "url": "https://files.pythonhosted.org/packages/9f/41/1af9e13b8151e107689f9f4f2e82a889c43a3eba7fb19d5168a69dd5749e/aiomanhole-0.6.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:06 2020"}