{"info": {"author": "Alex Boonstra, Walter Doekes, OSSO B.V.", "author_email": "wjdoekes+planb@osso.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: System :: Archiving :: Backup"], "description": "|PlanB|\n=======\n\nPlanB backs up your remote SSH-accessible files using rsync to a local ZFS\nstorage. Manage many hosts and host groups. Automate daily, weekly, monthly and\nyearly backups with snapshots.\n\n\n------------\nHow it looks\n------------\n\nAt the moment, the interface is just a Django admin interface:\n\n.. image:: assets/example_hosts.png\n    :alt: A list of hosts configured in PlanB with most recent backup status\n\nThe files are stored on ZFS storage, using snapshots to keep earlier versions\nof tiles. See this example shell transscript::\n\n    # zfs list | grep mongo2\n    rpool/BACKUP/experience-mongo2         9,34G  1,60T   855M  /srv/backups/experience-mongo2\n\n    # ls -l /srv/backups/experience-mongo2/data/srv/mongodb\n    total 646610\n    -rw------- 1 planb nogroup   67108864 jun 17 17:03 experience.0\n    -rw------- 1 planb nogroup  134217728 jun  9 16:01 experience.1\n    ...\n\nThose are the \"current\" files in the workspace. But you can go back in time::\n\n    # zfs list -r -t all rpool/BACKUP/experience-mongo2 | head -n4\n    NAME                                                  USED  AVAIL  REFER  MOUNTPOINT\n    rpool/BACKUP/experience-mongo2                       9,34G  1,60T   855M  /srv/backups/experience-mongo2\n    rpool/BACKUP/experience-mongo2@daily-201706031147        0      -   809M  -\n    rpool/BACKUP/experience-mongo2@monthly-201706031147      0      -   809M  -\n\n    # cd /srv/backups/experience-mongo2/.zfs/\n    # ls -1\n    daily-201706031147\n    daily-201706031211\n    daily-201706040001\n    daily-201706050002\n    ...\n\n    # ls daily-201706031147/data/srv/mongodb -l\n    total 581434\n    -rw------- 1 planb nogroup   67108864 jun  2 18:21 experience.0\n    -rw------- 1 planb nogroup  134217728 mei 29 14:38 experience.1\n    ...\n\n\n--------------------\nRequirements / setup\n--------------------\n\nPlanB can be installed as a standalone Django_ application, or it can be\nintegrated in another Django project.\n\nSee `requirements.txt`_ or `setup.py`_ for up-to-date dependencies/requirements.\n\nBasically, you'll need: ZFS storage, ssh and rsync, a webserver (nginx), python\nhosting (uwsgi), a database (mysql), a communication/cache bus (redis) and a\nfew python packages.\n\nFor more detailed steps, see `Setting it all up`_ below.\n\n.. _Django: https://www.djangoproject.com/\n.. _`requirements.txt`: ./requirements.txt\n.. _`setup.py`: ./setup.py\n\n\n----\nTODO\n----\n\n* Fix logrotate sample.\n* Add uwsgi-uid==djangoq-uid check?\n* Re-add some form of \"list-stale-mounts\" (!).\n  # contrib/list-stale-mounts | mail -E -s \"[$HOSTNAME] Stale ZFS mounts?\"\n  ^-- document this in FAQ below..\n* Re-add non-INFO output from planb_custom.daily...\n  # run_backupinfo | grep -vFB1 INFO/ /var/log/osso-backup/billing.log |\n  # mail -E -s \"[$HOSTNAME] Backup billing push\"\n* Alter HostGroup:\n  - use fs-name and human-name\n  - use asciifield for fs-name?\n* Alter HostConfig:\n  - use fs-name and optionally human-name\n  - use asciifield for fs-name?\n* Replace the exception mails for common errors (like failing rsync) to\n  use mail_admins style mail.\n* After using mail_admins style mail, we can start introducing mail digests\n  instead: daily summary of backup successes and failures.\n* Fix admin \"Planb\" name as \"PlanB\".\n* Split off the subparts of the HostConfig to separate configs:\n  - include-config\n  - transport-config\n  - retention-config\n  - host-status (use this as main enqueue-view?)\n* Use hostgroup+hostname in more places. Right now the friendly_name is\n  too short. Also, use unique_together, so the friendlyname can be reused.\n* BUG: Items added to /exclude list are not deleted from destination if\n  they have already been backed up once.\n* Replace the \"daily report\" hack with a signal-receiver.\n\n\n-------\nWARNING\n-------\n\nThe Django-Q task scheduler is highly configurable from the\n``/admin/``-view. With a little effort it will run user-supplied python\ncode directly. Any user with access to the schedulers will have\ntremendous powers\n\n**Recommendation**: don't give your users powers to edit the schedulers.\nUse the fine-grained permissions of the Django-admin systems to limit\nthem to Hosts and HostGroups only.\n\n*Perhaps we should disable web-access to it altogether.*\n\n\n-----------------\nSetting it all up\n-----------------\n\nIf you follow the HOWTO below, you'll set up PlanB as a standalone\nproject. Those familiar with Django_ will know how to integrate it into\ntheir own project.\n\nThe setup below assumes you'll be using the ``planb`` user. You're free\nto change that consistently of course.\n\n\nSetting up a ZFS pool\n~~~~~~~~~~~~~~~~~~~~~\n\nTODO: Document this briefly.\n\n\nSetting up the project\n~~~~~~~~~~~~~~~~~~~~~~\n\nSetting up a virtualenv (optional)::\n\n    mkdir -p /srv/virtualenvs\n    echo 'WORKON_HOME=/srv/virtualenvs' >>~/.bashrc\n    apt-get install python3-virtualenv python3-pip virtualenvwrapper\n    # you may need to log in/out once after this\n\n    mkvirtualenv planb --python=$(which python3) --system-site-packages\n\n    mkdir /etc/planb\n    cd /etc/planb\n    pwd >$VIRTUAL_ENV/.project\n\n    workon planb\n\nInstalling PlanB using pip::\n\n    apt-get install mysql-server redis-server\n    pip3 install planb\n\nInstalling PlanB without pip::\n\n    apt-get install mysql-server redis-server python3-mysqldb python3-redis \\\n      python3-setproctitle\n    pip install git+https://github.com/ossobv/planb.git@master\n\nSetting up a local ``planb`` user::\n\n    adduser planb --disabled-password --home=/var/spool/planb \\\n      --shell=/bin/bash --system\n\n    sudo -H -u planb ssh-keygen -b 8192\n\n.. note:: *You may want to back that ssh key up somewhere.*\n\nSetting up the local environment::\n\n    cat >/etc/planb/envvars <<EOF\n    USER=planb\n    PYTHONPATH=/etc/planb\n    DJANGO_SETTINGS_MODULE=settings\n    EOF\n\n.. note:: *During development, you can use a local* ``./envvars`` *in your\n           development directory or set* ``PLANB_ENVFILE`` *to a\n           specific path. You can set* ``PYTHONPATH`` *to*\n           ``/etc/planb:/home/yourname/src/planb`` *to develop on the\n           production machine.*\n\nSetting up the local configuration::\n\n    cp ${VIRTUAL_ENV:-/usr/local}/share/planb/example_settings.py \\\n      /etc/planb/settings.py\n    ${EDITOR:-vi} /etc/planb/settings.py\n\n**Replace all *FIXME* entries in the ``settings.py``**\n\nMake sure the SQL database exists. How to do that is beyond the scope of\nthis readme.\n\nAt this point, you should be able to run the ``planb`` script.\n\nSet up the database and a web-user::\n\n    planb migrate\n    planb createsuperuser\n\nSetting up uwsgi ``planb.ini``::\n\n    [uwsgi]\n    plugin = python3\n    workers = 4\n\n    chdir = /\n    virtualenv = /srv/virtualenvs/planb\n    wsgi-file = /srv/virtualenvs/planb/share/planb/wsgi.py\n\n    uid = planb\n    gid = www-data\n    chmod-socket = 660\n\n    for-readline = /etc/planb/envvars\n       env = %(_)\n    endfor =\n\nSet up static path, static files and log path::\n\n    # see the STATIC_ROOT entry in your settings.py\n    install -o planb -d /srv/http/YOURHOSTNAME/static\n\n    planb collectstatic\n\n    install -o planb -d /var/log/planb\n\nSetting up nginx config::\n\n    server {\n        listen 80;\n        server_name YOURHOSTNAME;\n\n        root /srv/http/YOURHOSTNAME;\n\n        location / {\n            uwsgi_pass unix:/run/uwsgi/app/planb/socket;\n            include uwsgi_params;\n        }\n\n        location /static/ {\n        }\n    }\n\nGiving *PlanB* access to ZFS tools and paths::\n\n    cat >/etc/sudoers.d/planb <<EOF\n    planb ALL=NOPASSWD: /sbin/zfs, /bin/chown\n    EOF\n\n    zfs create rpool/BACKUP -o mountpoint=/srv/backups\n    chown planb /srv/backups\n    chmod 700 /srv/backups\n\nSetting up ``qcluster`` for scheduled tasks::\n\n    # (in the source, this file is in rc.d)\n    cp ${VIRTUAL_ENV:-/usr/local}/share/planb/planb-queue.service \\\n      /etc/systemd/system/\n\n    ${EDITOR:-vi} /etc/systemd/system/planb-queue.service\n\n    systemctl daemon-reload &&\n      systemctl enable planb-queue &&\n      systemctl start planb-queue &&\n      systemctl status planb-queue\n\nInstalling automatic jobs::\n\n    planb loaddata planb_jobs\n\n\n-------------------------\nConfiguring a remote host\n-------------------------\n\nCreate a ``remotebackup`` user on the remote host (or ``encbackup`` for\nencrypted backups, which is beyond the scope of this document)::\n\n    adduser --disabled-password remotebackup\n\nConfigure sudo access using ``visudo -f /etc/sudoers.d/remotebackup``::\n\n    # Backup user needs to be able to get the files\n    remotebackup ALL=NOPASSWD: /usr/bin/rsync --server --sender *\n    remotebackup ALL=NOPASSWD: /usr/bin/ionice -c2 -n7 /usr/bin/rsync --server --sender *\n    remotebackup ALL=NOPASSWD: /usr/bin/ionice -c3 /usr/bin/rsync --server --sender *\n\nObserve how the ``--server --sender`` makes the rsync read-only.\n\nSet up the ssh key like you'd normally do::\n\n    mkdir -p ~remotebackup/.ssh\n    cat >>~remotebackup/.ssh/authorized_keys <<EOF\n    ... ssh public key from /var/spool/planb/.ssh/id_rsa.pub goes here ...\n    EOF\n\n    chmod 640 ~remotebackup/.ssh/authorized_keys\n    chown remotebackup -R ~remotebackup/.ssh\n\nWhen you use this pattern, you can tick ``use_sudo`` and set the remote\nuser to ``remotebackup``.\n\n\n-------------------------------\nAdding post-backup notification\n-------------------------------\n\nDo you want a notification when a backup succeeds? Or when it fails?\n\nYou can add something like this to your settings::\n\n    from datetime import datetime\n    from subprocess import check_call\n    from django.dispatch import receiver\n    from planb.signals import backup_done\n\n    @receiver(backup_done)\n    def notify_zabbix(sender, hostconfig, success, **kwargs):\n        if success:\n            key = 'planb.get_latest[{}]'.format(hostconfig.identifier)\n            val = datetime.now().strftime('%s')\n            cmd = (\n                'zabbix_sender', '-c', '/etc/zabbix/zabbix_agentd.conf',\n                '-k', key, '-o', val)\n            check_call(cmd)\n\nThat combines nicely with a backup host discovery rule using ``blist``::\n\n    # Machine discovery (redirects stderr to mail).\n    UserParameter=planb.discovery, \\\n      ( planb blist --zabbix 3>&2 2>&1 1>&3 \\\n      | mail -E -s 'ERROR: planb.discovery (zabbix)' root ) 2>&1\n\n\n----------------\nDoing daily jobs\n----------------\n\nA quick hack to get daily reports up and running is by placing something\nlike this in ``/etc/planb/planb_custom.py``::\n\n    from planb.contrib.billing import BossoBillingPoster, daily_hostgroup_report\n\n    def daily_billing_report():\n        \"\"\"\n        This function is added into: Home >> Task Queue >> Scheduled task\n        As: \"Report to Billing\" <planb_custom.daily_bosso_report>\n        \"\"\"\n        daily_hostgroup_report(BossoBillingPoster('http://my.url.here/'))\n\n\n------\nF.A.Q.\n------\n\nCan I use the software and customize it to my own needs?\n    It is licensed under the GNU GPL version 3.0 or higher. See the LICENSE\n    file for the full text. That means: probably yes, but you may be required to\n    share any changes you make. But you were going to do that anyway, right?\n\n\nThe ``uwsgi`` log complains about *\"No module named site\"*.\n    If your uwsgi fails to start, and the log looks like this::\n\n        Python version: 2.7.12 (default, Nov 19 2016, 06:48:10)\n        Set PythonHome to /srv/virtualenvs/planb\n        ImportError: No module named site\n\n    Then your uWSGI is missing the Python 3 module. Go install\n    ``uwsgi-plugin-python3``.\n\n\nThe ``mkvirtualenv`` said ``locale.Error: unsupported locale setting``.\n    You need to install the right locales until ``perl -e setlocale`` is\n    silent. How depends on your system and your config. See ``locale`` and\n    e.g. ``locale-gen en_US.UTF-8``.\n\n\nRsync complains about ``Invalid or incomplete multibyte or wide character``.\n    If rsync returns with code 23 and says this::\n\n        rsync: recv_generator: failed to stat \"...\\#351es-BCS 27-09-11.csv\":\n          Invalid or incomplete multibyte or wide character (84)\n\n    Then you might be backing up old hosts with legacy Latin-1 encoding\n    on the filesystem. Adding ``--iconv=utf8,latin1`` to the hostconfig\n    flags should fix it.\n\n    You may need rsync version 3 or higher for that.\n\n    Right now we opt to *not* implement any of these workarounds:\n\n    * Patch rsync to cope with ``EILSEQ`` (84) \"Illegal byte sequence\".\n    * Cope with error code 23 and pretend that everything went fine.\n\n    Instead, you should install a recent rsync and/or fix the filenames\n    on your remote filesystem.\n\n\nRsync complains about ``failed to stat`` or ``mkdir failed``.\n    If rsync returns these messages::\n\n        rsync: recv_generator: failed to stat \"...\": Permission denied (13)\n        rsync: recv_generator: mkdir \"...\" failed: Permission denied (13)\n\n    Then you may be looking at parent directories with crooked\n    permissions, like 077. Fix the permissions on the remote end.\n\n    However, many of these problems have likely been fixed by the\n    addition of the --chmod=Du+rwx rsync option.\n\n\nBackup success mail are sent, but failure mails are not.\n    Check the ``DEBUG`` setting. At the moment, error-mails are sent\n    through the logging subsystem and that is disabled when running in\n    debug-mode.\n\n\n-------\nAuthors\n-------\n\nPlanB was started in 2013 as \"OSSO backup\" by Alex Boonstra at OSSO B.V. Since\nthen, it has been evolved into *PlanB*. When it was Open Sourced by Walter\nDoekes in 2017, the old commits were dropped to ensure that any private company\ninformation was not disclosed.\n\n\n.. |PlanB| image:: assets/planb_head.png\n    :alt: GoCollect\n\n\n\n-------\nChanges\n-------\n\nv1.6.post1 - *2019-03-20*\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Show last snapshot size distribution, and first backup success date,\n  in hostconfig edit-view.\n- Show real-used-size instead of apparent-used-size in snapshot data\n  distribution. If you have ZFS compression enabled, you'll see a drop\n  in the snapshot size summaries (not in the total disk usage).\n- Hide last-error message in hostconfig edit-view for hosts that are\n  disabled.\n\n**Other**\n\n- Single Sign-On (Discourse style) can be enabled (using the optional\n  kleides-dssoclient dependency). See KLEIDES_DSSO_ENDPOINT option.\n- Tweak permissions so you don't need is_superuser powers anymore.\n- Update BossoBillingPoster for posting backup data counts to (internal)\n  Bosso system.\n\n\nv1.5 - *2018-06-13*\n~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Show \"time since last backup\" in listing, instead of just OK/FAIL.\n\n**Tasks**\n\n- Add locking to dutree scanner, so the filesystem isn't raped. Only do\n  one dutree scan at a time.\n- Change scheduler: jobs are now scheduled ahead of time by deducting\n  the expected duration.\n- Fix rsync issue when remote directory permissions are wrong\n  (unreadable by user). In that case, the download (as root user) would\n  succeed, but later changes would fail locally (planb user).\n\n**Other**\n\n- Change schema, removing unnecessary weekly/monthly booleans.\n- Fix ``total_size_mb`` in report, which was too large.\n- Improve ``breport`` command to output to stdout by default.\n\n\nv1.4 - *2018-04-06*\n~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Show job failures in hostconfig detail view.\n- Reduce clutter in hostconfig list view, using smaller items and less\n  clutter.\n- Show average run time, instead of last run time.\n\n**Other**\n\n- Fix bug with sending of breport emails.\n- Use git version for pip-install if available; add makefile for quick\n  commands.\n- Update qcluster argv so it's still considered busy while doing the\n  dutree scan.\n\n\nv1.3 - *2018-03-19*\n~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Disallow deletion of non-empty host groups.\n\n**CLI**\n\n- Add ``breport`` command to send out backup reports. See the template\n  in templates/planb/report_email_body.txt. Note that the report is\n  still in alpha stage. NOTE: To get e-mail reports as well, you need\n  to have ``rst2html`` installed.\n- Add ``--with-disabled`` to ``confexport`` command to get complete\n  exports.\n- Fix that planb runserver can be used for development (through\n  PYTHONPATH propagation).\n\n**Other**\n\n- Dependency updates to Django 2.0+.\n- Add backup history record keeping, for better logging and averages.\n\n\nv1.2 - *2017-09-18*\n~~~~~~~~~~~~~~~~~~~\n\n- Fix release, this time without pyc files and with wheel package.\n  Run this for upload: python setup.py sdist bdist_wheel upload\n\n\nv1.1 - *2017-09-18*\n~~~~~~~~~~~~~~~~~~~\n\n**Settings**\n\n- Add ``PLANB_DEFAULT_INCLUDES``.\n- Rename ``ZFS_BIN``, ``SUDO_BIN`` and ``RSYNC_BIN`` to ``PLANB_<setting>``.\n- Fix allowing use of alternate ``DJANGO_SETTINGS_MODULE``.\n\n**Web interface**\n\n- Add hosts to hostgroup listing.\n- Allow ordering hosts by enabled/queued/running.\n\n**CLI**\n\n- Add \"stale mounts\" listing (planb slist).\n- Create \"hostconfig\" export in YAML or JSON format (planb confexport).\n\n**Queue**\n\n- Fix so long running jobs don't suffer from lost DB connections.\n\n**Other**\n\n- Misc refactoring/cleanup.\n\n\nv1.0 - *2017-07-11*\n~~~~~~~~~~~~~~~~~~~\n\n- Initial release.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ossobv/planb", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "planb", "package_url": "https://pypi.org/project/planb/", "platform": "linux", "project_url": "https://pypi.org/project/planb/", "project_urls": {"Homepage": "https://github.com/ossobv/planb"}, "release_url": "https://pypi.org/project/planb/1.6.post1/", "requires_dist": null, "requires_python": "", "summary": "PlanB automates remote SSH+rsync backups", "version": "1.6.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PlanB backs up your remote SSH-accessible files using rsync to a local ZFS\nstorage. Manage many hosts and host groups. Automate daily, weekly, monthly and\nyearly backups with snapshots.</p>\n<div id=\"how-it-looks\">\n<h2>How it looks</h2>\n<p>At the moment, the interface is just a Django admin interface:</p>\n<img alt=\"A list of hosts configured in PlanB with most recent backup status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0894615ac4a6b532f445d2bcd44523271576b7e2/6173736574732f6578616d706c655f686f7374732e706e67\">\n<p>The files are stored on ZFS storage, using snapshots to keep earlier versions\nof tiles. See this example shell transscript:</p>\n<pre># zfs list | grep mongo2\nrpool/BACKUP/experience-mongo2         9,34G  1,60T   855M  /srv/backups/experience-mongo2\n\n# ls -l /srv/backups/experience-mongo2/data/srv/mongodb\ntotal 646610\n-rw------- 1 planb nogroup   67108864 jun 17 17:03 experience.0\n-rw------- 1 planb nogroup  134217728 jun  9 16:01 experience.1\n...\n</pre>\n<p>Those are the \u201ccurrent\u201d files in the workspace. But you can go back in time:</p>\n<pre># zfs list -r -t all rpool/BACKUP/experience-mongo2 | head -n4\nNAME                                                  USED  AVAIL  REFER  MOUNTPOINT\nrpool/BACKUP/experience-mongo2                       9,34G  1,60T   855M  /srv/backups/experience-mongo2\nrpool/BACKUP/experience-mongo2@daily-201706031147        0      -   809M  -\nrpool/BACKUP/experience-mongo2@monthly-201706031147      0      -   809M  -\n\n# cd /srv/backups/experience-mongo2/.zfs/\n# ls -1\ndaily-201706031147\ndaily-201706031211\ndaily-201706040001\ndaily-201706050002\n...\n\n# ls daily-201706031147/data/srv/mongodb -l\ntotal 581434\n-rw------- 1 planb nogroup   67108864 jun  2 18:21 experience.0\n-rw------- 1 planb nogroup  134217728 mei 29 14:38 experience.1\n...\n</pre>\n</div>\n<div id=\"requirements-setup\">\n<h2>Requirements / setup</h2>\n<p>PlanB can be installed as a standalone <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> application, or it can be\nintegrated in another Django project.</p>\n<p>See <a href=\"./requirements.txt\" rel=\"nofollow\">requirements.txt</a> or <a href=\"./setup.py\" rel=\"nofollow\">setup.py</a> for up-to-date dependencies/requirements.</p>\n<p>Basically, you\u2019ll need: ZFS storage, ssh and rsync, a webserver (nginx), python\nhosting (uwsgi), a database (mysql), a communication/cache bus (redis) and a\nfew python packages.</p>\n<p>For more detailed steps, see <a href=\"#setting-it-all-up\" rel=\"nofollow\">Setting it all up</a> below.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Fix logrotate sample.</li>\n<li>Add uwsgi-uid==djangoq-uid check?</li>\n<li>Re-add some form of \u201clist-stale-mounts\u201d (!).\n# contrib/list-stale-mounts | mail -E -s \u201c[$HOSTNAME] Stale ZFS mounts?\u201d\n^\u2013 document this in FAQ below..</li>\n<li>Re-add non-INFO output from planb_custom.daily\u2026\n# run_backupinfo | grep -vFB1 INFO/ /var/log/osso-backup/billing.log |\n# mail -E -s \u201c[$HOSTNAME] Backup billing push\u201d</li>\n<li>Alter HostGroup:\n- use fs-name and human-name\n- use asciifield for fs-name?</li>\n<li>Alter HostConfig:\n- use fs-name and optionally human-name\n- use asciifield for fs-name?</li>\n<li>Replace the exception mails for common errors (like failing rsync) to\nuse mail_admins style mail.</li>\n<li>After using mail_admins style mail, we can start introducing mail digests\ninstead: daily summary of backup successes and failures.</li>\n<li>Fix admin \u201cPlanb\u201d name as \u201cPlanB\u201d.</li>\n<li>Split off the subparts of the HostConfig to separate configs:\n- include-config\n- transport-config\n- retention-config\n- host-status (use this as main enqueue-view?)</li>\n<li>Use hostgroup+hostname in more places. Right now the friendly_name is\ntoo short. Also, use unique_together, so the friendlyname can be reused.</li>\n<li>BUG: Items added to /exclude list are not deleted from destination if\nthey have already been backed up once.</li>\n<li>Replace the \u201cdaily report\u201d hack with a signal-receiver.</li>\n</ul>\n</div>\n<div id=\"warning\">\n<h2>WARNING</h2>\n<p>The Django-Q task scheduler is highly configurable from the\n<tt>/admin/</tt>-view. With a little effort it will run user-supplied python\ncode directly. Any user with access to the schedulers will have\ntremendous powers</p>\n<p><strong>Recommendation</strong>: don\u2019t give your users powers to edit the schedulers.\nUse the fine-grained permissions of the Django-admin systems to limit\nthem to Hosts and HostGroups only.</p>\n<p><em>Perhaps we should disable web-access to it altogether.</em></p>\n</div>\n<div id=\"setting-it-all-up\">\n<h2>Setting it all up</h2>\n<p>If you follow the HOWTO below, you\u2019ll set up PlanB as a standalone\nproject. Those familiar with <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> will know how to integrate it into\ntheir own project.</p>\n<p>The setup below assumes you\u2019ll be using the <tt>planb</tt> user. You\u2019re free\nto change that consistently of course.</p>\n<div id=\"setting-up-a-zfs-pool\">\n<h3>Setting up a ZFS pool</h3>\n<p>TODO: Document this briefly.</p>\n</div>\n<div id=\"setting-up-the-project\">\n<h3>Setting up the project</h3>\n<p>Setting up a virtualenv (optional):</p>\n<pre>mkdir -p /srv/virtualenvs\necho 'WORKON_HOME=/srv/virtualenvs' &gt;&gt;~/.bashrc\napt-get install python3-virtualenv python3-pip virtualenvwrapper\n# you may need to log in/out once after this\n\nmkvirtualenv planb --python=$(which python3) --system-site-packages\n\nmkdir /etc/planb\ncd /etc/planb\npwd &gt;$VIRTUAL_ENV/.project\n\nworkon planb\n</pre>\n<p>Installing PlanB using pip:</p>\n<pre>apt-get install mysql-server redis-server\npip3 install planb\n</pre>\n<p>Installing PlanB without pip:</p>\n<pre>apt-get install mysql-server redis-server python3-mysqldb python3-redis \\\n  python3-setproctitle\npip install git+https://github.com/ossobv/planb.git@master\n</pre>\n<p>Setting up a local <tt>planb</tt> user:</p>\n<pre>adduser planb --disabled-password --home=/var/spool/planb \\\n  --shell=/bin/bash --system\n\nsudo -H -u planb ssh-keygen -b 8192\n</pre>\n<div>\n<p>Note</p>\n<p><em>You may want to back that ssh key up somewhere.</em></p>\n</div>\n<p>Setting up the local environment:</p>\n<pre>cat &gt;/etc/planb/envvars &lt;&lt;EOF\nUSER=planb\nPYTHONPATH=/etc/planb\nDJANGO_SETTINGS_MODULE=settings\nEOF\n</pre>\n<div>\n<p>Note</p>\n<p><em>During development, you can use a local</em> <tt>./envvars</tt> <em>in your\ndevelopment directory or set</em> <tt>PLANB_ENVFILE</tt> <em>to a\nspecific path. You can set</em> <tt>PYTHONPATH</tt> <em>to</em>\n<tt><span class=\"pre\">/etc/planb:/home/yourname/src/planb</span></tt> <em>to develop on the\nproduction machine.</em></p>\n</div>\n<p>Setting up the local configuration:</p>\n<pre>cp ${VIRTUAL_ENV:-/usr/local}/share/planb/example_settings.py \\\n  /etc/planb/settings.py\n${EDITOR:-vi} /etc/planb/settings.py\n</pre>\n<p><strong>Replace all *FIXME* entries in the ``settings.py``</strong></p>\n<p>Make sure the SQL database exists. How to do that is beyond the scope of\nthis readme.</p>\n<p>At this point, you should be able to run the <tt>planb</tt> script.</p>\n<p>Set up the database and a web-user:</p>\n<pre>planb migrate\nplanb createsuperuser\n</pre>\n<p>Setting up uwsgi <tt>planb.ini</tt>:</p>\n<pre>[uwsgi]\nplugin = python3\nworkers = 4\n\nchdir = /\nvirtualenv = /srv/virtualenvs/planb\nwsgi-file = /srv/virtualenvs/planb/share/planb/wsgi.py\n\nuid = planb\ngid = www-data\nchmod-socket = 660\n\nfor-readline = /etc/planb/envvars\n   env = %(_)\nendfor =\n</pre>\n<p>Set up static path, static files and log path:</p>\n<pre># see the STATIC_ROOT entry in your settings.py\ninstall -o planb -d /srv/http/YOURHOSTNAME/static\n\nplanb collectstatic\n\ninstall -o planb -d /var/log/planb\n</pre>\n<p>Setting up nginx config:</p>\n<pre>server {\n    listen 80;\n    server_name YOURHOSTNAME;\n\n    root /srv/http/YOURHOSTNAME;\n\n    location / {\n        uwsgi_pass unix:/run/uwsgi/app/planb/socket;\n        include uwsgi_params;\n    }\n\n    location /static/ {\n    }\n}\n</pre>\n<p>Giving <em>PlanB</em> access to ZFS tools and paths:</p>\n<pre>cat &gt;/etc/sudoers.d/planb &lt;&lt;EOF\nplanb ALL=NOPASSWD: /sbin/zfs, /bin/chown\nEOF\n\nzfs create rpool/BACKUP -o mountpoint=/srv/backups\nchown planb /srv/backups\nchmod 700 /srv/backups\n</pre>\n<p>Setting up <tt>qcluster</tt> for scheduled tasks:</p>\n<pre># (in the source, this file is in rc.d)\ncp ${VIRTUAL_ENV:-/usr/local}/share/planb/planb-queue.service \\\n  /etc/systemd/system/\n\n${EDITOR:-vi} /etc/systemd/system/planb-queue.service\n\nsystemctl daemon-reload &amp;&amp;\n  systemctl enable planb-queue &amp;&amp;\n  systemctl start planb-queue &amp;&amp;\n  systemctl status planb-queue\n</pre>\n<p>Installing automatic jobs:</p>\n<pre>planb loaddata planb_jobs\n</pre>\n</div>\n</div>\n<div id=\"configuring-a-remote-host\">\n<h2>Configuring a remote host</h2>\n<p>Create a <tt>remotebackup</tt> user on the remote host (or <tt>encbackup</tt> for\nencrypted backups, which is beyond the scope of this document):</p>\n<pre>adduser --disabled-password remotebackup\n</pre>\n<p>Configure sudo access using <tt>visudo <span class=\"pre\">-f</span> /etc/sudoers.d/remotebackup</tt>:</p>\n<pre># Backup user needs to be able to get the files\nremotebackup ALL=NOPASSWD: /usr/bin/rsync --server --sender *\nremotebackup ALL=NOPASSWD: /usr/bin/ionice -c2 -n7 /usr/bin/rsync --server --sender *\nremotebackup ALL=NOPASSWD: /usr/bin/ionice -c3 /usr/bin/rsync --server --sender *\n</pre>\n<p>Observe how the <tt><span class=\"pre\">--server</span> <span class=\"pre\">--sender</span></tt> makes the rsync read-only.</p>\n<p>Set up the ssh key like you\u2019d normally do:</p>\n<pre>mkdir -p ~remotebackup/.ssh\ncat &gt;&gt;~remotebackup/.ssh/authorized_keys &lt;&lt;EOF\n... ssh public key from /var/spool/planb/.ssh/id_rsa.pub goes here ...\nEOF\n\nchmod 640 ~remotebackup/.ssh/authorized_keys\nchown remotebackup -R ~remotebackup/.ssh\n</pre>\n<p>When you use this pattern, you can tick <tt>use_sudo</tt> and set the remote\nuser to <tt>remotebackup</tt>.</p>\n</div>\n<div id=\"adding-post-backup-notification\">\n<h2>Adding post-backup notification</h2>\n<p>Do you want a notification when a backup succeeds? Or when it fails?</p>\n<p>You can add something like this to your settings:</p>\n<pre>from datetime import datetime\nfrom subprocess import check_call\nfrom django.dispatch import receiver\nfrom planb.signals import backup_done\n\n@receiver(backup_done)\ndef notify_zabbix(sender, hostconfig, success, **kwargs):\n    if success:\n        key = 'planb.get_latest[{}]'.format(hostconfig.identifier)\n        val = datetime.now().strftime('%s')\n        cmd = (\n            'zabbix_sender', '-c', '/etc/zabbix/zabbix_agentd.conf',\n            '-k', key, '-o', val)\n        check_call(cmd)\n</pre>\n<p>That combines nicely with a backup host discovery rule using <tt>blist</tt>:</p>\n<pre># Machine discovery (redirects stderr to mail).\nUserParameter=planb.discovery, \\\n  ( planb blist --zabbix 3&gt;&amp;2 2&gt;&amp;1 1&gt;&amp;3 \\\n  | mail -E -s 'ERROR: planb.discovery (zabbix)' root ) 2&gt;&amp;1\n</pre>\n</div>\n<div id=\"doing-daily-jobs\">\n<h2>Doing daily jobs</h2>\n<p>A quick hack to get daily reports up and running is by placing something\nlike this in <tt>/etc/planb/planb_custom.py</tt>:</p>\n<pre>from planb.contrib.billing import BossoBillingPoster, daily_hostgroup_report\n\ndef daily_billing_report():\n    \"\"\"\n    This function is added into: Home &gt;&gt; Task Queue &gt;&gt; Scheduled task\n    As: \"Report to Billing\" &lt;planb_custom.daily_bosso_report&gt;\n    \"\"\"\n    daily_hostgroup_report(BossoBillingPoster('http://my.url.here/'))\n</pre>\n</div>\n<div id=\"f-a-q\">\n<h2>F.A.Q.</h2>\n<dl>\n<dt>Can I use the software and customize it to my own needs?</dt>\n<dd>It is licensed under the GNU GPL version 3.0 or higher. See the LICENSE\nfile for the full text. That means: probably yes, but you may be required to\nshare any changes you make. But you were going to do that anyway, right?</dd>\n<dt>The <tt>uwsgi</tt> log complains about <em>\u201cNo module named site\u201d</em>.</dt>\n<dd><p>If your uwsgi fails to start, and the log looks like this:</p>\n<pre>Python version: 2.7.12 (default, Nov 19 2016, 06:48:10)\nSet PythonHome to /srv/virtualenvs/planb\nImportError: No module named site\n</pre>\n<p>Then your uWSGI is missing the Python 3 module. Go install\n<tt><span class=\"pre\">uwsgi-plugin-python3</span></tt>.</p>\n</dd>\n<dt>The <tt>mkvirtualenv</tt> said <tt>locale.Error: unsupported locale setting</tt>.</dt>\n<dd>You need to install the right locales until <tt>perl <span class=\"pre\">-e</span> setlocale</tt> is\nsilent. How depends on your system and your config. See <tt>locale</tt> and\ne.g. <tt><span class=\"pre\">locale-gen</span> <span class=\"pre\">en_US.UTF-8</span></tt>.</dd>\n<dt>Rsync complains about <tt>Invalid or incomplete multibyte or wide character</tt>.</dt>\n<dd><p>If rsync returns with code 23 and says this:</p>\n<pre>rsync: recv_generator: failed to stat \"...\\#351es-BCS 27-09-11.csv\":\n  Invalid or incomplete multibyte or wide character (84)\n</pre>\n<p>Then you might be backing up old hosts with legacy Latin-1 encoding\non the filesystem. Adding <tt><span class=\"pre\">--iconv=utf8,latin1</span></tt> to the hostconfig\nflags should fix it.</p>\n<p>You may need rsync version 3 or higher for that.</p>\n<p>Right now we opt to <em>not</em> implement any of these workarounds:</p>\n<ul>\n<li>Patch rsync to cope with <tt>EILSEQ</tt> (84) \u201cIllegal byte sequence\u201d.</li>\n<li>Cope with error code 23 and pretend that everything went fine.</li>\n</ul>\n<p>Instead, you should install a recent rsync and/or fix the filenames\non your remote filesystem.</p>\n</dd>\n<dt>Rsync complains about <tt>failed to stat</tt> or <tt>mkdir failed</tt>.</dt>\n<dd><p>If rsync returns these messages:</p>\n<pre>rsync: recv_generator: failed to stat \"...\": Permission denied (13)\nrsync: recv_generator: mkdir \"...\" failed: Permission denied (13)\n</pre>\n<p>Then you may be looking at parent directories with crooked\npermissions, like 077. Fix the permissions on the remote end.</p>\n<p>However, many of these problems have likely been fixed by the\naddition of the \u2013chmod=Du+rwx rsync option.</p>\n</dd>\n<dt>Backup success mail are sent, but failure mails are not.</dt>\n<dd>Check the <tt>DEBUG</tt> setting. At the moment, error-mails are sent\nthrough the logging subsystem and that is disabled when running in\ndebug-mode.</dd>\n</dl>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>PlanB was started in 2013 as \u201cOSSO backup\u201d by Alex Boonstra at OSSO B.V. Since\nthen, it has been evolved into <em>PlanB</em>. When it was Open Sourced by Walter\nDoekes in 2017, the old commits were dropped to ensure that any private company\ninformation was not disclosed.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"v1-6-post1-2019-03-20\">\n<h3>v1.6.post1 - <em>2019-03-20</em></h3>\n<p><strong>Web interface</strong></p>\n<ul>\n<li>Show last snapshot size distribution, and first backup success date,\nin hostconfig edit-view.</li>\n<li>Show real-used-size instead of apparent-used-size in snapshot data\ndistribution. If you have ZFS compression enabled, you\u2019ll see a drop\nin the snapshot size summaries (not in the total disk usage).</li>\n<li>Hide last-error message in hostconfig edit-view for hosts that are\ndisabled.</li>\n</ul>\n<p><strong>Other</strong></p>\n<ul>\n<li>Single Sign-On (Discourse style) can be enabled (using the optional\nkleides-dssoclient dependency). See KLEIDES_DSSO_ENDPOINT option.</li>\n<li>Tweak permissions so you don\u2019t need is_superuser powers anymore.</li>\n<li>Update BossoBillingPoster for posting backup data counts to (internal)\nBosso system.</li>\n</ul>\n</div>\n<div id=\"v1-5-2018-06-13\">\n<h3>v1.5 - <em>2018-06-13</em></h3>\n<p><strong>Web interface</strong></p>\n<ul>\n<li>Show \u201ctime since last backup\u201d in listing, instead of just OK/FAIL.</li>\n</ul>\n<p><strong>Tasks</strong></p>\n<ul>\n<li>Add locking to dutree scanner, so the filesystem isn\u2019t raped. Only do\none dutree scan at a time.</li>\n<li>Change scheduler: jobs are now scheduled ahead of time by deducting\nthe expected duration.</li>\n<li>Fix rsync issue when remote directory permissions are wrong\n(unreadable by user). In that case, the download (as root user) would\nsucceed, but later changes would fail locally (planb user).</li>\n</ul>\n<p><strong>Other</strong></p>\n<ul>\n<li>Change schema, removing unnecessary weekly/monthly booleans.</li>\n<li>Fix <tt>total_size_mb</tt> in report, which was too large.</li>\n<li>Improve <tt>breport</tt> command to output to stdout by default.</li>\n</ul>\n</div>\n<div id=\"v1-4-2018-04-06\">\n<h3>v1.4 - <em>2018-04-06</em></h3>\n<p><strong>Web interface</strong></p>\n<ul>\n<li>Show job failures in hostconfig detail view.</li>\n<li>Reduce clutter in hostconfig list view, using smaller items and less\nclutter.</li>\n<li>Show average run time, instead of last run time.</li>\n</ul>\n<p><strong>Other</strong></p>\n<ul>\n<li>Fix bug with sending of breport emails.</li>\n<li>Use git version for pip-install if available; add makefile for quick\ncommands.</li>\n<li>Update qcluster argv so it\u2019s still considered busy while doing the\ndutree scan.</li>\n</ul>\n</div>\n<div id=\"v1-3-2018-03-19\">\n<h3>v1.3 - <em>2018-03-19</em></h3>\n<p><strong>Web interface</strong></p>\n<ul>\n<li>Disallow deletion of non-empty host groups.</li>\n</ul>\n<p><strong>CLI</strong></p>\n<ul>\n<li>Add <tt>breport</tt> command to send out backup reports. See the template\nin templates/planb/report_email_body.txt. Note that the report is\nstill in alpha stage. NOTE: To get e-mail reports as well, you need\nto have <tt>rst2html</tt> installed.</li>\n<li>Add <tt><span class=\"pre\">--with-disabled</span></tt> to <tt>confexport</tt> command to get complete\nexports.</li>\n<li>Fix that planb runserver can be used for development (through\nPYTHONPATH propagation).</li>\n</ul>\n<p><strong>Other</strong></p>\n<ul>\n<li>Dependency updates to Django 2.0+.</li>\n<li>Add backup history record keeping, for better logging and averages.</li>\n</ul>\n</div>\n<div id=\"v1-2-2017-09-18\">\n<h3>v1.2 - <em>2017-09-18</em></h3>\n<ul>\n<li>Fix release, this time without pyc files and with wheel package.\nRun this for upload: python setup.py sdist bdist_wheel upload</li>\n</ul>\n</div>\n<div id=\"v1-1-2017-09-18\">\n<h3>v1.1 - <em>2017-09-18</em></h3>\n<p><strong>Settings</strong></p>\n<ul>\n<li>Add <tt>PLANB_DEFAULT_INCLUDES</tt>.</li>\n<li>Rename <tt>ZFS_BIN</tt>, <tt>SUDO_BIN</tt> and <tt>RSYNC_BIN</tt> to <tt>PLANB_&lt;setting&gt;</tt>.</li>\n<li>Fix allowing use of alternate <tt>DJANGO_SETTINGS_MODULE</tt>.</li>\n</ul>\n<p><strong>Web interface</strong></p>\n<ul>\n<li>Add hosts to hostgroup listing.</li>\n<li>Allow ordering hosts by enabled/queued/running.</li>\n</ul>\n<p><strong>CLI</strong></p>\n<ul>\n<li>Add \u201cstale mounts\u201d listing (planb slist).</li>\n<li>Create \u201chostconfig\u201d export in YAML or JSON format (planb confexport).</li>\n</ul>\n<p><strong>Queue</strong></p>\n<ul>\n<li>Fix so long running jobs don\u2019t suffer from lost DB connections.</li>\n</ul>\n<p><strong>Other</strong></p>\n<ul>\n<li>Misc refactoring/cleanup.</li>\n</ul>\n</div>\n<div id=\"v1-0-2017-07-11\">\n<h3>v1.0 - <em>2017-07-11</em></h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6472546, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "e19916e53a27e8e623feb14843e57f74", "sha256": "cbc4ad0f1b08493b5d42f826861b3e3042aa299091433f95bd7ef587377b68bb"}, "downloads": -1, "filename": "planb-1.0.tar.gz", "has_sig": false, "md5_digest": "e19916e53a27e8e623feb14843e57f74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46130, "upload_time": "2017-07-11T13:22:05", "upload_time_iso_8601": "2017-07-11T13:22:05.467877Z", "url": "https://files.pythonhosted.org/packages/c9/5c/0584f5a52c908f710e169ea84443c63b2d68bd3a57eacf3dd0c6935a1bec/planb-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "e13b19a7d1438413b307493906633649", "sha256": "c739f25d0819a60746e1239eb8da4035faf012946906f8be274d163e1e5d42fd"}, "downloads": -1, "filename": "planb-1.1.tar.gz", "has_sig": false, "md5_digest": "e13b19a7d1438413b307493906633649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78422, "upload_time": "2017-09-18T10:25:46", "upload_time_iso_8601": "2017-09-18T10:25:46.305707Z", "url": "https://files.pythonhosted.org/packages/e7/d0/db7544875b26df6cb8d9fe8bccec79115b47a84a56780fdd54487dbcf043/planb-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "3300339f34513679ed37f32e125186e1", "sha256": "4e1d8970a564ab87cbf98338a8c7f7587e1d32427f74baf8db825334722187ba"}, "downloads": -1, "filename": "planb-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3300339f34513679ed37f32e125186e1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 70012, "upload_time": "2017-09-18T10:47:13", "upload_time_iso_8601": "2017-09-18T10:47:13.182350Z", "url": "https://files.pythonhosted.org/packages/3c/94/44148deee71a1b1b2f6896f49104c0f293e1c71a4854c7e033015d2fd4a7/planb-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1771de5059a09bbf418648ce058629fa", "sha256": "2d66a1f5f8ab31d9603c2e1b41c02cd59aff15104b2a6e1945e0fef6f92174ca"}, "downloads": -1, "filename": "planb-1.1.1.tar.gz", "has_sig": false, "md5_digest": "1771de5059a09bbf418648ce058629fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47172, "upload_time": "2017-09-18T10:47:11", "upload_time_iso_8601": "2017-09-18T10:47:11.499396Z", "url": "https://files.pythonhosted.org/packages/9a/c8/933959100102828795e8d46a660fb923f0dde1d3332225822744b9b7e82f/planb-1.1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4d3c44e6400359c0242647a71008f909", "sha256": "6aa916786f0bcbc62d1d82e2e25d66a14207c6f5e83d856756be8b559a47cf44"}, "downloads": -1, "filename": "planb-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4d3c44e6400359c0242647a71008f909", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 70091, "upload_time": "2017-09-18T10:52:57", "upload_time_iso_8601": "2017-09-18T10:52:57.273549Z", "url": "https://files.pythonhosted.org/packages/6b/6b/beb8cf7bbc906dbeef5b32fc7c82a9eab025264fd9933f1717ee37340ed5/planb-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52237d36ef78b7ca69960a5d4475c01a", "sha256": "3cd17a083d66208fdacd83766e026900e4f962a5aaa54d92706e6e25627da757"}, "downloads": -1, "filename": "planb-1.2.tar.gz", "has_sig": false, "md5_digest": "52237d36ef78b7ca69960a5d4475c01a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47427, "upload_time": "2017-09-18T10:52:55", "upload_time_iso_8601": "2017-09-18T10:52:55.548452Z", "url": "https://files.pythonhosted.org/packages/49/42/de97a4c927f819fdfcb9c7b4db769464faa0100ad86578cc3491410cda76/planb-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "329b603ea8955caf3c386419fb930ecc", "sha256": "69250195e790483b8c012430509808857ddf3fbf5b36333f4cbbd0f884678a34"}, "downloads": -1, "filename": "planb-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "329b603ea8955caf3c386419fb930ecc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 77040, "upload_time": "2018-03-19T10:14:25", "upload_time_iso_8601": "2018-03-19T10:14:25.096749Z", "url": "https://files.pythonhosted.org/packages/78/f3/dcfdd5016e7d3671e2877c3307acfee8b94490f51e2ac67181fb6b6a1f71/planb-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fccefbc503038ff5d68b2ed60a17922", "sha256": "5c91d62327fca9850a2ffbc45f7026a5400d4e838dd39285f93c8eaa8d28ec41"}, "downloads": -1, "filename": "planb-1.3.tar.gz", "has_sig": false, "md5_digest": "3fccefbc503038ff5d68b2ed60a17922", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57921, "upload_time": "2018-03-19T10:14:28", "upload_time_iso_8601": "2018-03-19T10:14:28.071828Z", "url": "https://files.pythonhosted.org/packages/c4/88/0a2cc705922d254e0d21590d8a1a4d54df930b5e1c388320d819544db1b8/planb-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "41d7f83259d778a9eb85f6866a02b007", "sha256": "cab2029ffd700ea6301c7559762843129a23bfbecb35572b498ad8399f9bef40"}, "downloads": -1, "filename": "planb-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "41d7f83259d778a9eb85f6866a02b007", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 81722, "upload_time": "2018-04-06T15:51:09", "upload_time_iso_8601": "2018-04-06T15:51:09.292843Z", "url": "https://files.pythonhosted.org/packages/90/c7/94a8437ecba42555899c4ff77fcd3fbc4f618f6e9432f19077a7d0b2e22b/planb-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ef22672027389f583b83fc1028979a9", "sha256": "1538654af56175db43e70d0b56214e4c9996cc20b649172e49fa79d307310896"}, "downloads": -1, "filename": "planb-1.4.tar.gz", "has_sig": false, "md5_digest": "5ef22672027389f583b83fc1028979a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62035, "upload_time": "2018-04-06T15:51:10", "upload_time_iso_8601": "2018-04-06T15:51:10.767808Z", "url": "https://files.pythonhosted.org/packages/4e/d2/9e3c5848aad57cc7420ae44e86ce3fabad6bbe4e865e8ff4b8b034ef13e0/planb-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "afec56378874820d609cea7871691051", "sha256": "11a0fb633d8094314cd886c39c90ae4da7122ea2cb931d08e25835fb54d84ee7"}, "downloads": -1, "filename": "planb-1.5.tar.gz", "has_sig": false, "md5_digest": "afec56378874820d609cea7871691051", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57593, "upload_time": "2018-06-13T09:26:35", "upload_time_iso_8601": "2018-06-13T09:26:35.849428Z", "url": "https://files.pythonhosted.org/packages/bd/a0/1cab0b133d2724afa3057f224b3c3d2d24a2e9d4818b14a2783a3cec74cd/planb-1.5.tar.gz", "yanked": false}], "1.6.post1": [{"comment_text": "", "digests": {"md5": "be25d4d899f9add9c8b29ddcbc2d674f", "sha256": "6e423954a4c20f4b2ce56b396dc818fada73936166c08ba1bf615763263696ca"}, "downloads": -1, "filename": "planb-1.6.post1.tar.gz", "has_sig": false, "md5_digest": "be25d4d899f9add9c8b29ddcbc2d674f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66721, "upload_time": "2019-03-20T12:51:08", "upload_time_iso_8601": "2019-03-20T12:51:08.731909Z", "url": "https://files.pythonhosted.org/packages/4a/be/d1349a3c74c2ead231c313a865e1c51c85def1dc1cb939eb2a108ccb836a/planb-1.6.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be25d4d899f9add9c8b29ddcbc2d674f", "sha256": "6e423954a4c20f4b2ce56b396dc818fada73936166c08ba1bf615763263696ca"}, "downloads": -1, "filename": "planb-1.6.post1.tar.gz", "has_sig": false, "md5_digest": "be25d4d899f9add9c8b29ddcbc2d674f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66721, "upload_time": "2019-03-20T12:51:08", "upload_time_iso_8601": "2019-03-20T12:51:08.731909Z", "url": "https://files.pythonhosted.org/packages/4a/be/d1349a3c74c2ead231c313a865e1c51c85def1dc1cb939eb2a108ccb836a/planb-1.6.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:43 2020"}