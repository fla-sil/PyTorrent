{"info": {"author": "Levi Notik", "author_email": "levi@greatjones.co", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "\nGraphene-Django-Subscriptions\n=============================\n\nThis package adds support to Subscription's requests and its integration with websockets using Channels package. You can test websockets notifications with this mini web tool. It's intuitive and simple: `websocket_example_client <https://github.com/eamigo86/graphene-django-subscriptions/tree/master/example_websocket_client>`_\n\n\nInstallation:\n-------------\n\nFor installing graphene-django-subscriptions, just run this command in your shell:\n\n.. code:: bash\n\n    pip install \"graphene-django-subscriptions\"\n\nDocumentation:\n--------------\n\n***************************************\nExtra functionalities  (Subscriptions):\n***************************************\n    1.  Subscription  (Abstract class to define subscriptions to a DjangoSerializerMutation)\n    2.  GraphqlAPIDemultiplexer  (Custom WebSocket consumer subclass that handles demultiplexing streams)\n\n\nSubscriptions:\n--------------\n\nThis first approach to add Graphql subscriptions support  with Channels in graphene-django, use channels-api package.\n\n*****************************************\n1- Defining custom Subscriptions classes:\n*****************************************\n\nYou must to have defined a Serializer class for each model that you want to define a Subscription class:\n\n.. code:: python\n\n    # app/graphql/subscriptions.py\n    import graphene\n    from graphene_django_subscriptions.subscription import Subscription\n    from .serializers import UserSerializer, GroupSerializer\n\n\n    class UserSubscription(Subscription):\n        class Meta:\n            serializer_class = UserSerializer\n            stream = 'users'\n            description = 'User Subscription'\n\n\n    class GroupSubscription(Subscription):\n        class Meta:\n            serializer_class = GroupSerializer\n            stream = 'groups'\n            description = 'Group Subscription'\n\n\nAdd the subscriptions definitions into your app's schema:\n\n.. code:: python\n\n    # app/graphql/schema.py\n    import graphene\n    from .subscriptions import UserSubscription, GroupSubscription\n\n\n    class Subscriptions(graphene.ObjectType):\n        user_subscription = UserSubscription.Field()\n        GroupSubscription = PersonSubscription.Field()\n\n\nAdd the app's schema into your project root schema:\n\n.. code:: python\n\n    # schema.py\n    import graphene\n    import custom.app.route.graphql.schema\n\n\n    class RootQuery(custom.app.route.graphql.schema.Query, graphene.ObjectType):\n        class Meta:\n            description = 'The project root query definition'\n\n\n    class RootMutation(custom.app.route.graphql.schema.Mutation, graphene.ObjectType):\n        class Meta:\n            description = 'The project root mutation definition'\n\n\n    class RootSubscription(custom.app.route.graphql.schema.Subscriptions, graphene.ObjectType):\n        class Meta:\n            description = 'The project root subscription definition'\n\n\n    schema = graphene.Schema(\n        query=RootQuery,\n        mutation=RootMutation,\n        subscription=RootSubscription\n    )\n\n\n********************************************************\n2- Defining Channels settings and custom routing config:\n********************************************************\n**Note**: For more information about this step see Channels documentation.\n\nYou must to have defined a DjangoSerializerMutation class for each model that you want to define a Subscription class:\n\nWe define app routing, as if they were app urls:\n\n.. code:: python\n\n    # app/routing.py\n    from graphene_django_subscriptions.consumers import GraphqlAPIDemultiplexer\n    from channels.routing import route_class\n    from .graphql.subscriptions import UserSubscription, GroupSubscription\n\n\n    class CustomAppDemultiplexer(GraphqlAPIDemultiplexer):\n        consumers = {\n          'users': UserSubscription.get_binding().consumer,\n          'groups': GroupSubscription.get_binding().consumer\n        }\n\n\n    app_routing = [\n        route_class(CustomAppDemultiplexer)\n    ]\n\n\nDefining our project routing, like custom root project urls:\n\n.. code:: python\n\n    # project/routing.py\n    from channels import include\n\n    project_routing = [\n        include(\"custom.app.folder.routing.app_routing\", path=r\"^/custom_websocket_path\"),\n    ]\n\n\nYou should put into your INSTALLED_APPS the channels and channels_api modules and you must to add your project's routing definition into the CHANNEL_LAYERS setting:\n\n.. code:: python\n\n    # settings.py\n    ...\n    INSTALLED_APPS = (\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'channels',\n        'channels_api',\n\n        'custom_app'\n    )\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"asgiref.inmemory.ChannelLayer\",\n            \"ROUTING\": \"myproject.routing.project_routing\",  # Our project routing\n        },\n    }\n    ...\n\nYou must add **'graphene_django_subscriptions.depromise_subscription'** middleware at the end of your GRAPHENE dict config on your settings.py:\n\n.. code:: python\n\n    # settings.py\n    ...\n    GRAPHENE = {\n        'SCHEMA_INDENT': 4,\n        'MIDDLEWARE': [\n            # Others middleware\n            'graphene_django_subscriptions.depromise_subscription',\n        ]\n    }\n    ...\n\n\n***************************\n3- Subscription's examples:\n***************************\n\nIn your WEB client you must define websocket connection to: 'ws://host:port/custom_websocket_path'.\nWhen the connection is established, the server return a websocket's message like this:\n{\"channel_id\": \"GthKdsYVrK!WxRCdJQMPi\", \"connect\": \"success\"}, where you must store the channel_id value to later use in your graphql subscriptions request for subscribe or unsubscribe operations.\n\nThe graphql's subscription request accept five possible parameters:\n1.  **operation**: Operation to perform: subscribe or unsubscribe. (required)\n2.  **action**: Action to which you wish to subscribe: create, update, delete or all_actions. (required)\n3.  **channelId**: Identification of the connection by websocket. (required)\n4.  **id**: Object's ID field value that you wish to subscribe to. (optional)\n5.  **data**: Model's fields that you want to appear in the subscription notifications. (optional)\n\n.. code:: python\n\n    subscription{\n        userSubscription(\n            action: UPDATE,\n            operation: SUBSCRIBE,\n            channelId: \"GthKdsYVrK!WxRCdJQMPi\",\n            id: 5,\n            data: [ID, USERNAME, FIRST_NAME, LAST_NAME, EMAIL, IS_SUPERUSER]\n        ){\n            ok\n            error\n            stream\n        }\n    }\n\n\nIn this case, the subscription request sent return a websocket message to client like this: *{\"action\": \"update\", \"operation\": \"subscribe\", \"ok\": true, \"stream\": \"users\", \"error\": null}* and from that moment each time than the user with id=5 get modified, you will receive a message through websocket's connection with the following format:\n\n.. code:: python\n\n    {\n        \"stream\": \"users\",\n        \"payload\": {\n            \"action\": \"update\",\n            \"model\": \"auth.user\",\n            \"data\": {\n                \"id\": 5,\n                \"username\": \"meaghan90\",\n                \"first_name\": \"Meaghan\",\n                \"last_name\": \"Ackerman\",\n                \"email\": \"meaghan@gmail.com\",\n                \"is_superuser\": false\n            }\n        }\n    }\n\n\nFor unsubscribe you must send a graphql request like this:\n\n.. code:: python\n\n    subscription{\n        userSubscription(\n            action: UPDATE,\n            operation: UNSUBSCRIBE,\n            channelId: \"GthKdsYVrK!WxRCdJQMPi\",\n            id: 5\n        ){\n            ok\n            error\n            stream\n        }\n    }\n\n\n*NOTE*: Each time than the graphql's server restart, you must to reestablish the websocket connection and resend the graphql's subscription request with the new websocket connection id.\n\n\nChange Log:\n-----------\n\n*******\nv0.0.6:\n*******\n1. Fixed minor bug on model_fields_enum generation when define fields in serializer class like this: fields = \"__all__\"\n2. This avoid malfunction with the posterior versions of graphene-django.\n\n*******\nv0.0.4:\n*******\n1. Fixed minor bug on *subscription_resolver* function.\n\n*******\nv0.0.3:\n*******\n1. Added **depromise_subscription** middleware to allow use subscriptions on graphene-django>=2.0.\n2. Updated setup dependence to graphene-django-extras>=0.3.0.\n\n*******\nv0.0.2:\n*******\n1. Changed mutation_class dependence on Subscription Meta class definition to serializer_class to get better\nintegration.\n2. Fixed some minor bugs.\n\n*******\nv0.0.1:\n*******\n1. First commit\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eamigo86/graphene-django-subscriptions", "keywords": "api graphql subscription rest graphene django channels", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gql-graphene-django-subscriptions", "package_url": "https://pypi.org/project/gql-graphene-django-subscriptions/", "platform": "any", "project_url": "https://pypi.org/project/gql-graphene-django-subscriptions/", "project_urls": {"Homepage": "https://github.com/eamigo86/graphene-django-subscriptions"}, "release_url": "https://pypi.org/project/gql-graphene-django-subscriptions/0.0.7/", "requires_dist": ["graphene-django (==2.6.0)", "graphene-django-extras (>=0.3.0)", "channels-api (>=0.4.0)"], "requires_python": "", "summary": "Graphene-Django-Subscriptions add subscriptions support to graphene-django through Channels module", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package adds support to Subscription\u2019s requests and its integration with websockets using Channels package. You can test websockets notifications with this mini web tool. It\u2019s intuitive and simple: <a href=\"https://github.com/eamigo86/graphene-django-subscriptions/tree/master/example_websocket_client\" rel=\"nofollow\">websocket_example_client</a></p>\n<div id=\"installation\">\n<h2>Installation:</h2>\n<p>For installing graphene-django-subscriptions, just run this command in your shell:</p>\n<pre>pip install <span class=\"s2\">\"graphene-django-subscriptions\"</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation:</h2>\n<h2 id=\"extra-functionalities-subscriptions\"><span class=\"section-subtitle\">Extra functionalities  (Subscriptions):</span></h2>\n<blockquote>\n<ol>\n<li>Subscription  (Abstract class to define subscriptions to a DjangoSerializerMutation)</li>\n<li>GraphqlAPIDemultiplexer  (Custom WebSocket consumer subclass that handles demultiplexing streams)</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"subscriptions\">\n<h2>Subscriptions:</h2>\n<p>This first approach to add Graphql subscriptions support  with Channels in graphene-django, use channels-api package.</p>\n<div id=\"defining-custom-subscriptions-classes\">\n<h3>1- Defining custom Subscriptions classes:</h3>\n<p>You must to have defined a Serializer class for each model that you want to define a Subscription class:</p>\n<pre><span class=\"c1\"># app/graphql/subscriptions.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django_subscriptions.subscription</span> <span class=\"kn\">import</span> <span class=\"n\">Subscription</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">UserSerializer</span><span class=\"p\">,</span> <span class=\"n\">GroupSerializer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserSubscription</span><span class=\"p\">(</span><span class=\"n\">Subscription</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'User Subscription'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GroupSubscription</span><span class=\"p\">(</span><span class=\"n\">Subscription</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">GroupSerializer</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s1\">'groups'</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Group Subscription'</span>\n</pre>\n<p>Add the subscriptions definitions into your app\u2019s schema:</p>\n<pre><span class=\"c1\"># app/graphql/schema.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">UserSubscription</span><span class=\"p\">,</span> <span class=\"n\">GroupSubscription</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscriptions</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">user_subscription</span> <span class=\"o\">=</span> <span class=\"n\">UserSubscription</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"n\">GroupSubscription</span> <span class=\"o\">=</span> <span class=\"n\">PersonSubscription</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n</pre>\n<p>Add the app\u2019s schema into your project root schema:</p>\n<pre><span class=\"c1\"># schema.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">import</span> <span class=\"nn\">custom.app.route.graphql.schema</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RootQuery</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The project root query definition'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RootMutation</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Mutation</span><span class=\"p\">,</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The project root mutation definition'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RootSubscription</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"p\">,</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The project root subscription definition'</span>\n\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span>\n    <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">RootQuery</span><span class=\"p\">,</span>\n    <span class=\"n\">mutation</span><span class=\"o\">=</span><span class=\"n\">RootMutation</span><span class=\"p\">,</span>\n    <span class=\"n\">subscription</span><span class=\"o\">=</span><span class=\"n\">RootSubscription</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"defining-channels-settings-and-custom-routing-config\">\n<h3>2- Defining Channels settings and custom routing config:</h3>\n<p><strong>Note</strong>: For more information about this step see Channels documentation.</p>\n<p>You must to have defined a DjangoSerializerMutation class for each model that you want to define a Subscription class:</p>\n<p>We define app routing, as if they were app urls:</p>\n<pre><span class=\"c1\"># app/routing.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django_subscriptions.consumers</span> <span class=\"kn\">import</span> <span class=\"n\">GraphqlAPIDemultiplexer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels.routing</span> <span class=\"kn\">import</span> <span class=\"n\">route_class</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.graphql.subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">UserSubscription</span><span class=\"p\">,</span> <span class=\"n\">GroupSubscription</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomAppDemultiplexer</span><span class=\"p\">(</span><span class=\"n\">GraphqlAPIDemultiplexer</span><span class=\"p\">):</span>\n    <span class=\"n\">consumers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'users'</span><span class=\"p\">:</span> <span class=\"n\">UserSubscription</span><span class=\"o\">.</span><span class=\"n\">get_binding</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">consumer</span><span class=\"p\">,</span>\n      <span class=\"s1\">'groups'</span><span class=\"p\">:</span> <span class=\"n\">GroupSubscription</span><span class=\"o\">.</span><span class=\"n\">get_binding</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">consumer</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"n\">app_routing</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">route_class</span><span class=\"p\">(</span><span class=\"n\">CustomAppDemultiplexer</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Defining our project routing, like custom root project urls:</p>\n<pre><span class=\"c1\"># project/routing.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels</span> <span class=\"kn\">import</span> <span class=\"n\">include</span>\n\n<span class=\"n\">project_routing</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"custom.app.folder.routing.app_routing\"</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"^/custom_websocket_path\"</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You should put into your INSTALLED_APPS the channels and channels_api modules and you must to add your project\u2019s routing definition into the CHANNEL_LAYERS setting:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"o\">...</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.sites'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'channels'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'channels_api'</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">'custom_app'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">CHANNEL_LAYERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"BACKEND\"</span><span class=\"p\">:</span> <span class=\"s2\">\"asgiref.inmemory.ChannelLayer\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"ROUTING\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myproject.routing.project_routing\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Our project routing</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"o\">...</span>\n</pre>\n<p>You must add <strong>\u2018graphene_django_subscriptions.depromise_subscription\u2019</strong> middleware at the end of your GRAPHENE dict config on your settings.py:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"o\">...</span>\n<span class=\"n\">GRAPHENE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'SCHEMA_INDENT'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'MIDDLEWARE'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\"># Others middleware</span>\n        <span class=\"s1\">'graphene_django_subscriptions.depromise_subscription'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"subscription-s-examples\">\n<h3>3- Subscription\u2019s examples:</h3>\n<p>In your WEB client you must define websocket connection to: \u2018ws://host:port/custom_websocket_path\u2019.\nWhen the connection is established, the server return a websocket\u2019s message like this:\n{\u201cchannel_id\u201d: \u201cGthKdsYVrK!WxRCdJQMPi\u201d, \u201cconnect\u201d: \u201csuccess\u201d}, where you must store the channel_id value to later use in your graphql subscriptions request for subscribe or unsubscribe operations.</p>\n<p>The graphql\u2019s subscription request accept five possible parameters:\n1.  <strong>operation</strong>: Operation to perform: subscribe or unsubscribe. (required)\n2.  <strong>action</strong>: Action to which you wish to subscribe: create, update, delete or all_actions. (required)\n3.  <strong>channelId</strong>: Identification of the connection by websocket. (required)\n4.  <strong>id</strong>: Object\u2019s ID field value that you wish to subscribe to. (optional)\n5.  <strong>data</strong>: Model\u2019s fields that you want to appear in the subscription notifications. (optional)</p>\n<pre><span class=\"n\">subscription</span><span class=\"p\">{</span>\n    <span class=\"n\">userSubscription</span><span class=\"p\">(</span>\n        <span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">UPDATE</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">SUBSCRIBE</span><span class=\"p\">,</span>\n        <span class=\"n\">channelId</span><span class=\"p\">:</span> <span class=\"s2\">\"GthKdsYVrK!WxRCdJQMPi\"</span><span class=\"p\">,</span>\n        <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"n\">USERNAME</span><span class=\"p\">,</span> <span class=\"n\">FIRST_NAME</span><span class=\"p\">,</span> <span class=\"n\">LAST_NAME</span><span class=\"p\">,</span> <span class=\"n\">EMAIL</span><span class=\"p\">,</span> <span class=\"n\">IS_SUPERUSER</span><span class=\"p\">]</span>\n    <span class=\"p\">){</span>\n        <span class=\"n\">ok</span>\n        <span class=\"n\">error</span>\n        <span class=\"n\">stream</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In this case, the subscription request sent return a websocket message to client like this: <em>{\u201caction\u201d: \u201cupdate\u201d, \u201coperation\u201d: \u201csubscribe\u201d, \u201cok\u201d: true, \u201cstream\u201d: \u201cusers\u201d, \u201cerror\u201d: null}</em> and from that moment each time than the user with id=5 get modified, you will receive a message through websocket\u2019s connection with the following format:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"stream\"</span><span class=\"p\">:</span> <span class=\"s2\">\"users\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"payload\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"update\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"model\"</span><span class=\"p\">:</span> <span class=\"s2\">\"auth.user\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"meaghan90\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Meaghan\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ackerman\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"meaghan@gmail.com\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_superuser\"</span><span class=\"p\">:</span> <span class=\"n\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For unsubscribe you must send a graphql request like this:</p>\n<pre><span class=\"n\">subscription</span><span class=\"p\">{</span>\n    <span class=\"n\">userSubscription</span><span class=\"p\">(</span>\n        <span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">UPDATE</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">UNSUBSCRIBE</span><span class=\"p\">,</span>\n        <span class=\"n\">channelId</span><span class=\"p\">:</span> <span class=\"s2\">\"GthKdsYVrK!WxRCdJQMPi\"</span><span class=\"p\">,</span>\n        <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n    <span class=\"p\">){</span>\n        <span class=\"n\">ok</span>\n        <span class=\"n\">error</span>\n        <span class=\"n\">stream</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><em>NOTE</em>: Each time than the graphql\u2019s server restart, you must to reestablish the websocket connection and resend the graphql\u2019s subscription request with the new websocket connection id.</p>\n</div>\n</div>\n<div id=\"change-log\">\n<h2>Change Log:</h2>\n<div id=\"v0-0-6\">\n<h3>v0.0.6:</h3>\n<ol>\n<li>Fixed minor bug on model_fields_enum generation when define fields in serializer class like this: fields = \u201c__all__\u201d</li>\n<li>This avoid malfunction with the posterior versions of graphene-django.</li>\n</ol>\n</div>\n<div id=\"v0-0-4\">\n<h3>v0.0.4:</h3>\n<ol>\n<li>Fixed minor bug on <em>subscription_resolver</em> function.</li>\n</ol>\n</div>\n<div id=\"v0-0-3\">\n<h3>v0.0.3:</h3>\n<ol>\n<li>Added <strong>depromise_subscription</strong> middleware to allow use subscriptions on graphene-django&gt;=2.0.</li>\n<li>Updated setup dependence to graphene-django-extras&gt;=0.3.0.</li>\n</ol>\n</div>\n<div id=\"v0-0-2\">\n<h3>v0.0.2:</h3>\n<p>1. Changed mutation_class dependence on Subscription Meta class definition to serializer_class to get better\nintegration.\n2. Fixed some minor bugs.</p>\n</div>\n<div id=\"v0-0-1\">\n<h3>v0.0.1:</h3>\n<ol>\n<li>First commit</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6267477, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "c55f1edff7c5965996deb332ab67d64d", "sha256": "27b3a84e61b5007c992be5bfa932950e007dd90e91f7d1d35284101036810583"}, "downloads": -1, "filename": "gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c55f1edff7c5965996deb332ab67d64d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13957, "upload_time": "2019-12-09T17:21:12", "upload_time_iso_8601": "2019-12-09T17:21:12.046987Z", "url": "https://files.pythonhosted.org/packages/15/6a/19b72e2b58be1fc62be0d11cd3fd3358e5992e98425516c2bcb2f6e226e6/gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c55f1edff7c5965996deb332ab67d64d", "sha256": "27b3a84e61b5007c992be5bfa932950e007dd90e91f7d1d35284101036810583"}, "downloads": -1, "filename": "gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c55f1edff7c5965996deb332ab67d64d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13957, "upload_time": "2019-12-09T17:21:12", "upload_time_iso_8601": "2019-12-09T17:21:12.046987Z", "url": "https://files.pythonhosted.org/packages/15/6a/19b72e2b58be1fc62be0d11cd3fd3358e5992e98425516c2bcb2f6e226e6/gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:55:03 2020"}