{"info": {"author": "William Silversmith", "author_email": "ws9@princeton.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "[![Build Status](https://travis-ci.org/seung-lab/tinybrain.svg?branch=master)](https://travis-ci.org/seung-lab/tinybrain) [![PyPI version](https://badge.fury.io/py/tinybrain.svg)](https://badge.fury.io/py/tinybrain)  \n\n# tinybrain\n\nImage pyramid generation specialized for connectomics data types and procedures. If your brain wasn't tiny before, it will be now.  \n\n```python \nimport tinybrain \n\nimg = load_3d_em_stack()\n\n# factors (2,2), (2,2,1), and (2,2,1,1) are on a fast path\nimg_pyramid = tinybrain.downsample_with_averaging(img, factor=(2,2,1), num_mips=5)\n\nlabels = load_3d_labels()\nlabel_pyramid = tinybrain.downsample_segmentation(labels, factor=(2,2,1), num_mips=5)\n```\n\n## Installation \n\n```bash\npip install numpy\npip install tinybrain\n```\n\n## Motivation\n\nImage heirarchy generation in connectomics uses a few different techniques for\nvisualizing data, but predominantly we create image pyramids of uint8 grayscale \nimages using 2x2 average pooling and of uint8 to uint64 segmentation labels using \n2x2 mode pooling.  \n\nIt's possible to compute both of these using numpy, however as multiple packages found \nit useful to copy the downsample functions, it makes sense to formalize these functions \ninto a seperate library located on PyPI.\n\nGiven the disparate circumstances that they will be used in, these functions should work \nfast as possible with low memory usage and avoid numerical issues such as integer truncation\nwhile generating multiple mip levels.\n\n## Considerations: downsample_with_averaging \n\nIt's advisable to generate multiple mip levels at once rather than recursively computing\nnew images as for integer type images, this leads to integer truncation issues. In the common\ncase of 2x2x1 downsampling, a recursively computed image would lose 0.75 brightness per a \nmip level. Therefore, take advantage of the `num_mips` argument which strikes a balance\nthat limits integer truncation loss to once every 4 mip levels. This compromise allows\nfor the use of integer arithmatic and no more memory usage than 2x the input image including\nthe output downsamples. If you seek to eliminate the loss beyond 4 mip levels, try promoting \nthe type before downsampling.  \n\nA C++ high performance path is triggered for 2x2x1x1 downsample factors on uint8, uint16, float32, \nand float64 data types in Fortran order. Other factors, data types, and orderings are computed using a numpy pathway that is much slower and more memory intensive.\n\n\n### Example Benchmark \n\nOn a 1024x1024x100 uint8 image I ran the following code. PIL and OpenCV are actually much faster than this benchmark shows because most of the time is spent writing to the numpy array. tinybrain has a large advantage working on 3D and 4D arrays. Of course, this is a very simple benchmark and it may be possible to tune each of these approaches. On single slices, Pillow was faster than tinybrain.\n\n```python\nimg = np.load(\"image.npy\")\n\ns = time.time()\ndownsample_with_averaging(img, (2,2,1))\nprint(\"Original \", time.time() - s)\n\ns = time.time()\nout = tinybrain.downsample_with_averaging(img, (2,2,1))\nprint(\"tinybrain \", time.time() - s)\n\ns = time.time()\nout = np.zeros(shape=(512,512,100))\nfor z in range(img.shape[2]):\n  out[:,:,z] = cv2.resize(img[:,:,z], dsize=(512, 512) )\nprint(\"OpenCV \", time.time() - s)\n\ns = time.time()\nout = np.zeros(shape=(512,512,100))\nfor z in range(img.shape[2]):\n  pilimg = Image.fromarray(img[:,:,z])\n  out[:,:,z] = pilimg.resize( (512, 512) )\nprint(\"Pillow \", time.time() - s)\n\n# Method     Run Time             Rel. Perf.\n# Original   1820 ms +/- 3.73 ms    1.0x\n# tinybrain    67 ms +/- 0.40 ms   27.2x \n# OpenCV      469 ms +/- 1.12 ms    3.9x\n# Pillow      937 ms +/- 7.63 ms    1.9x\n```\n\n## Considerations: downsample_segmentation \n\nThe `downsample_segmentation` function performs mode pooling operations provided the downsample factor is a power of two, including in three dimensions. If the factor is a non-power of two, striding is used. The mode pooling, which is usually what you want, is computed recursively. Mode pooling is superior to striding, but the recursive calculatioon can introduce defects at mip levels higher than 1. This may be improved in the future.  \n\nThe way the calculation is actually done uses an ensemble of several different methods. For (2,2,1,1) downsamples, a Cython fast, low memory path is selected that implements [*countless if*](https://towardsdatascience.com/countless-high-performance-2x-downsampling-of-labeled-images-using-python-and-numpy-e70ad3275589). For (4,4,1) or other 2D powers of two, the [*countless 2d*](https://towardsdatascience.com/countless-high-performance-2x-downsampling-of-labeled-images-using-python-and-numpy-e70ad3275589) algorithm is used. For (2,2,2), (4,4,4), etc, the [*dynamic countless 3d*](https://towardsdatascience.com/countless-3d-vectorized-2x-downsampling-of-labeled-volume-images-using-python-and-numpy-59d686c2f75) algorithm is used. For 2D powers of two, [*stippled countless 2d*](https://medium.com/@willsilversmith/countless-2d-inflated-2x-downsampling-of-labeled-images-holding-zero-values-as-background-4d13a7675f2d) is used if the sparse flag is enabled. For all other configurations, striding is used.  \n\nCountless 2d paths are also fast, but use slightly more memory and time. Countless 3D is okay for (2,2,2) and (4,4,4) but will use time and memory exponential in the product of dimensions. This state of affairs could be improved by implementing a counting based algorithm in Cython/C++ for arbitrary factors that doesn't compute recursively. The countless algorithms were developed before I knew how to write Cython and package libraries. However, C++ implementations of countless are much faster than counting for computing the first mip level. In particular, an AVX2 SIMD implementation can saturate memory bandwidth.    \n\nDocumentation for the countless algorithm family is located here: https://github.com/william-silversmith/countless\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seung-lab/tinybrain/", "keywords": "", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "tinybrain", "package_url": "https://pypi.org/project/tinybrain/", "platform": "", "project_url": "https://pypi.org/project/tinybrain/", "project_urls": {"Homepage": "https://github.com/seung-lab/tinybrain/"}, "release_url": "https://pypi.org/project/tinybrain/0.1.1/", "requires_dist": ["numpy"], "requires_python": "", "summary": "Image pyramid generation specialized for connectomics data types and procedures.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/seung-lab/tinybrain\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc944eb9181583bc8de7e73847a24c3dcbf4666a/68747470733a2f2f7472617669732d63692e6f72672f7365756e672d6c61622f74696e79627261696e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/tinybrain\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2378328661b72db20373de6918eae66629093cf/68747470733a2f2f62616467652e667572792e696f2f70792f74696e79627261696e2e737667\"></a></p>\n<h1>tinybrain</h1>\n<p>Image pyramid generation specialized for connectomics data types and procedures. If your brain wasn't tiny before, it will be now.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tinybrain</span> \n\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">load_3d_em_stack</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># factors (2,2), (2,2,1), and (2,2,1,1) are on a fast path</span>\n<span class=\"n\">img_pyramid</span> <span class=\"o\">=</span> <span class=\"n\">tinybrain</span><span class=\"o\">.</span><span class=\"n\">downsample_with_averaging</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">num_mips</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_3d_labels</span><span class=\"p\">()</span>\n<span class=\"n\">label_pyramid</span> <span class=\"o\">=</span> <span class=\"n\">tinybrain</span><span class=\"o\">.</span><span class=\"n\">downsample_segmentation</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">num_mips</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<pre>pip install numpy\npip install tinybrain\n</pre>\n<h2>Motivation</h2>\n<p>Image heirarchy generation in connectomics uses a few different techniques for\nvisualizing data, but predominantly we create image pyramids of uint8 grayscale\nimages using 2x2 average pooling and of uint8 to uint64 segmentation labels using\n2x2 mode pooling.</p>\n<p>It's possible to compute both of these using numpy, however as multiple packages found\nit useful to copy the downsample functions, it makes sense to formalize these functions\ninto a seperate library located on PyPI.</p>\n<p>Given the disparate circumstances that they will be used in, these functions should work\nfast as possible with low memory usage and avoid numerical issues such as integer truncation\nwhile generating multiple mip levels.</p>\n<h2>Considerations: downsample_with_averaging</h2>\n<p>It's advisable to generate multiple mip levels at once rather than recursively computing\nnew images as for integer type images, this leads to integer truncation issues. In the common\ncase of 2x2x1 downsampling, a recursively computed image would lose 0.75 brightness per a\nmip level. Therefore, take advantage of the <code>num_mips</code> argument which strikes a balance\nthat limits integer truncation loss to once every 4 mip levels. This compromise allows\nfor the use of integer arithmatic and no more memory usage than 2x the input image including\nthe output downsamples. If you seek to eliminate the loss beyond 4 mip levels, try promoting\nthe type before downsampling.</p>\n<p>A C++ high performance path is triggered for 2x2x1x1 downsample factors on uint8, uint16, float32,\nand float64 data types in Fortran order. Other factors, data types, and orderings are computed using a numpy pathway that is much slower and more memory intensive.</p>\n<h3>Example Benchmark</h3>\n<p>On a 1024x1024x100 uint8 image I ran the following code. PIL and OpenCV are actually much faster than this benchmark shows because most of the time is spent writing to the numpy array. tinybrain has a large advantage working on 3D and 4D arrays. Of course, this is a very simple benchmark and it may be possible to tune each of these approaches. On single slices, Pillow was faster than tinybrain.</p>\n<pre><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"image.npy\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">downsample_with_averaging</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Original \"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">tinybrain</span><span class=\"o\">.</span><span class=\"n\">downsample_with_averaging</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"tinybrain \"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">z</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]):</span>\n  <span class=\"n\">out</span><span class=\"p\">[:,:,</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">[:,:,</span><span class=\"n\">z</span><span class=\"p\">],</span> <span class=\"n\">dsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"OpenCV \"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">z</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]):</span>\n  <span class=\"n\">pilimg</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">fromarray</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">[:,:,</span><span class=\"n\">z</span><span class=\"p\">])</span>\n  <span class=\"n\">out</span><span class=\"p\">[:,:,</span><span class=\"n\">z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pilimg</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Pillow \"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Method     Run Time             Rel. Perf.</span>\n<span class=\"c1\"># Original   1820 ms +/- 3.73 ms    1.0x</span>\n<span class=\"c1\"># tinybrain    67 ms +/- 0.40 ms   27.2x </span>\n<span class=\"c1\"># OpenCV      469 ms +/- 1.12 ms    3.9x</span>\n<span class=\"c1\"># Pillow      937 ms +/- 7.63 ms    1.9x</span>\n</pre>\n<h2>Considerations: downsample_segmentation</h2>\n<p>The <code>downsample_segmentation</code> function performs mode pooling operations provided the downsample factor is a power of two, including in three dimensions. If the factor is a non-power of two, striding is used. The mode pooling, which is usually what you want, is computed recursively. Mode pooling is superior to striding, but the recursive calculatioon can introduce defects at mip levels higher than 1. This may be improved in the future.</p>\n<p>The way the calculation is actually done uses an ensemble of several different methods. For (2,2,1,1) downsamples, a Cython fast, low memory path is selected that implements <a href=\"https://towardsdatascience.com/countless-high-performance-2x-downsampling-of-labeled-images-using-python-and-numpy-e70ad3275589\" rel=\"nofollow\"><em>countless if</em></a>. For (4,4,1) or other 2D powers of two, the <a href=\"https://towardsdatascience.com/countless-high-performance-2x-downsampling-of-labeled-images-using-python-and-numpy-e70ad3275589\" rel=\"nofollow\"><em>countless 2d</em></a> algorithm is used. For (2,2,2), (4,4,4), etc, the <a href=\"https://towardsdatascience.com/countless-3d-vectorized-2x-downsampling-of-labeled-volume-images-using-python-and-numpy-59d686c2f75\" rel=\"nofollow\"><em>dynamic countless 3d</em></a> algorithm is used. For 2D powers of two, <a href=\"https://medium.com/@willsilversmith/countless-2d-inflated-2x-downsampling-of-labeled-images-holding-zero-values-as-background-4d13a7675f2d\" rel=\"nofollow\"><em>stippled countless 2d</em></a> is used if the sparse flag is enabled. For all other configurations, striding is used.</p>\n<p>Countless 2d paths are also fast, but use slightly more memory and time. Countless 3D is okay for (2,2,2) and (4,4,4) but will use time and memory exponential in the product of dimensions. This state of affairs could be improved by implementing a counting based algorithm in Cython/C++ for arbitrary factors that doesn't compute recursively. The countless algorithms were developed before I knew how to write Cython and package libraries. However, C++ implementations of countless are much faster than counting for computing the first mip level. In particular, an AVX2 SIMD implementation can saturate memory bandwidth.</p>\n<p>Documentation for the countless algorithm family is located here: <a href=\"https://github.com/william-silversmith/countless\" rel=\"nofollow\">https://github.com/william-silversmith/countless</a></p>\n\n          </div>"}, "last_serial": 6019986, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "269af3a4cb58405999b0e2e14ceaf67c", "sha256": "a04de7654f5c66347c7470dd2678e4b1da779f85fbbdb589939e32f91f700fd4"}, "downloads": -1, "filename": "tinybrain-0.0.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "269af3a4cb58405999b0e2e14ceaf67c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 807481, "upload_time": "2019-03-07T05:19:53", "upload_time_iso_8601": "2019-03-07T05:19:53.842766Z", "url": "https://files.pythonhosted.org/packages/71/f5/30cd0332096c5fb6caf68f80358d434193c2d23f389282466233c891b708/tinybrain-0.0.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d32d1d6d7fce95eba56993d9b37b538c", "sha256": "5d0c065dc5cef3c8957c14850d655baede4168c8455cba85efcc07b04dda5ac3"}, "downloads": -1, "filename": "tinybrain-0.0.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d32d1d6d7fce95eba56993d9b37b538c", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 820884, "upload_time": "2019-03-07T05:19:55", "upload_time_iso_8601": "2019-03-07T05:19:55.834235Z", "url": "https://files.pythonhosted.org/packages/b2/4f/92b812cf7354637af9e30787222f9f7294491e0d50f86f1b689fc54e571e/tinybrain-0.0.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b61f7054bcfa7d24776cb5f92dca1b8", "sha256": "230010a161db03d2ca32c560d7891b6a4dcf4fa5d6fd95957fded894174b7214"}, "downloads": -1, "filename": "tinybrain-0.0.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4b61f7054bcfa7d24776cb5f92dca1b8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 837805, "upload_time": "2019-03-07T05:19:57", "upload_time_iso_8601": "2019-03-07T05:19:57.559665Z", "url": "https://files.pythonhosted.org/packages/2e/48/3e6144cec836e41b5deb5153db92e82cdd1c7d2fea3590f7e4e0c6f158c3/tinybrain-0.0.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e4e0d9169d344b50ef831fa0a08c59c", "sha256": "abd5e7ef35b8abd5f110e6064025740eac44a15f66d3b6133789c707694a952b"}, "downloads": -1, "filename": "tinybrain-0.0.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "9e4e0d9169d344b50ef831fa0a08c59c", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 836569, "upload_time": "2019-03-07T05:19:59", "upload_time_iso_8601": "2019-03-07T05:19:59.351326Z", "url": "https://files.pythonhosted.org/packages/17/16/690780bb0c66fcb127ae4b1eaa530eb6f9ade58b0d5f829bd39e05d8eb05/tinybrain-0.0.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3eea4706997f52816443c2faaed6faa7", "sha256": "125196eff2445c7a5b37e57b299b779b2b0a1b4abd04f4ffa4f970a02ffbfa6e"}, "downloads": -1, "filename": "tinybrain-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3eea4706997f52816443c2faaed6faa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 218228, "upload_time": "2019-03-07T05:20:01", "upload_time_iso_8601": "2019-03-07T05:20:01.037747Z", "url": "https://files.pythonhosted.org/packages/20/ef/053f0350946f7ff35675d5369a2aa1591f39615bbcf3e85b6e31209025ac/tinybrain-0.0.1.tar.gz", "yanked": false}], "0.0.1.dev7": [{"comment_text": "", "digests": {"md5": "9e3992166ac465c0aa459499efc46bff", "sha256": "fa03247739542eb579836c2e353dcddd1e7b054f7fb19995bbac1bc4afc3f847"}, "downloads": -1, "filename": "tinybrain-0.0.1.dev7.tar.gz", "has_sig": false, "md5_digest": "9e3992166ac465c0aa459499efc46bff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 211855, "upload_time": "2019-03-06T05:36:20", "upload_time_iso_8601": "2019-03-06T05:36:20.049064Z", "url": "https://files.pythonhosted.org/packages/a6/d7/482d4ce032521870bf3c195b1fad37e1421be2772556ba8d1d0d1271ec1e/tinybrain-0.0.1.dev7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "24997a79329fe87060fff623b156fdc6", "sha256": "c1e37065b994c61a4daab5e8029d439e8cc0195228015cb8060a018bb67054ae"}, "downloads": -1, "filename": "tinybrain-0.1.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "24997a79329fe87060fff623b156fdc6", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 782029, "upload_time": "2019-03-09T00:39:37", "upload_time_iso_8601": "2019-03-09T00:39:37.134277Z", "url": "https://files.pythonhosted.org/packages/8b/7f/577d85f6362f5597d279ce029301b01374e1ce6c8180acd6d9e74b8dd161/tinybrain-0.1.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c5fad7f5d4453ed49566906d197638a", "sha256": "8e32284f19a797d870860e75f447947bf61f44f338535eb78df10c49efd1fc14"}, "downloads": -1, "filename": "tinybrain-0.1.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4c5fad7f5d4453ed49566906d197638a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 795299, "upload_time": "2019-03-09T00:39:38", "upload_time_iso_8601": "2019-03-09T00:39:38.936560Z", "url": "https://files.pythonhosted.org/packages/bb/fc/a5e12308abda2afb07d10163c9572f41896172fcbd9ac7d7e0895d629f40/tinybrain-0.1.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "877feaf5ce69a15dcfbe638d40a42efd", "sha256": "61b1c4b4b9a2ba4f785ad79174c669be7f253b90e85d0740531696984e83c803"}, "downloads": -1, "filename": "tinybrain-0.1.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "877feaf5ce69a15dcfbe638d40a42efd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 808597, "upload_time": "2019-03-09T00:39:40", "upload_time_iso_8601": "2019-03-09T00:39:40.731244Z", "url": "https://files.pythonhosted.org/packages/35/00/5a39b9203ee9e8bdba3d502333b650501988c81588c843ffddf7012a0725/tinybrain-0.1.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50ec9ba4512c96eb0222f73f2fb1fb2a", "sha256": "3a24161cdfb837e1fef9e902f78b81f4262a053d575e9cf82a9ab1858814b3ac"}, "downloads": -1, "filename": "tinybrain-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "50ec9ba4512c96eb0222f73f2fb1fb2a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 367042, "upload_time": "2019-06-01T04:05:13", "upload_time_iso_8601": "2019-06-01T04:05:13.442161Z", "url": "https://files.pythonhosted.org/packages/ad/c7/bda99312c10082832c5bc96c78422738a25e1ba4ba638281f239e5efa000/tinybrain-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "554d062a0ffacccc5301a5f8c56b1e55", "sha256": "7afc856c5fc272353e55c7a6f5ebee9369a8f3b7a7a83f8d743a9a5ba4446392"}, "downloads": -1, "filename": "tinybrain-0.1.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "554d062a0ffacccc5301a5f8c56b1e55", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 807435, "upload_time": "2019-03-09T00:39:42", "upload_time_iso_8601": "2019-03-09T00:39:42.392302Z", "url": "https://files.pythonhosted.org/packages/6f/4b/271db698bb4e7d7b7a4d1cc83f6c5c2cc51de54fc0ca3b9fe30deb3db203/tinybrain-0.1.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b403fb01c1784b95c91228b12287de74", "sha256": "91a4dc14b40b3d606523e3f45aa37b712aa84e2bc5839708217bef5ce972b99a"}, "downloads": -1, "filename": "tinybrain-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b403fb01c1784b95c91228b12287de74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 215854, "upload_time": "2019-03-09T00:39:43", "upload_time_iso_8601": "2019-03-09T00:39:43.986522Z", "url": "https://files.pythonhosted.org/packages/d1/39/43a49368de6daefa4be139a9b7a04cadab1fe21922bf84537a2c85fa7d61/tinybrain-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "64cc2310e483c4c8aabacf0b5e0bb16d", "sha256": "c9bf38a74e44deb74f10836b370bedcb2141438e44832ec6e2902daaf1fda661"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp27-cp27m-macosx_10_14_intel.whl", "has_sig": false, "md5_digest": "64cc2310e483c4c8aabacf0b5e0bb16d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 373452, "upload_time": "2019-07-25T04:40:29", "upload_time_iso_8601": "2019-07-25T04:40:29.801737Z", "url": "https://files.pythonhosted.org/packages/6c/9b/c64722d7f74330ec2a04357b5b677600c135bf34ca2c28475ce6c75d6c7a/tinybrain-0.1.1-cp27-cp27m-macosx_10_14_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10966ec841535a0fddb199fbd0a1698", "sha256": "794d6f24883b2f271e72780aaea4ece1ef3b67502f88d27acdb3fbee2ab67369"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b10966ec841535a0fddb199fbd0a1698", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 790344, "upload_time": "2019-06-11T00:25:02", "upload_time_iso_8601": "2019-06-11T00:25:02.552051Z", "url": "https://files.pythonhosted.org/packages/df/47/8c557dd124f63dd8f04dec5612a67e2025fccd4dbf5ce8289b2dd2a3152b/tinybrain-0.1.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21469fdfd5777c2d8fafa9441959b5cf", "sha256": "bac2c98e09d153f452515166f8f31bdfaed883b3162e556404ca70f928823192"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "21469fdfd5777c2d8fafa9441959b5cf", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 489056, "upload_time": "2019-07-25T04:44:10", "upload_time_iso_8601": "2019-07-25T04:44:10.268734Z", "url": "https://files.pythonhosted.org/packages/29/31/664ffc41b6ae38df1552a439f26fe927d29d110616458360f4c13e3230ff/tinybrain-0.1.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a09007321701778c8afd1352827d0e", "sha256": "f0e1709bb3aa37f047cc7c0b91525274c269b42e200a1b5e339c4dc706ea0bff"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "45a09007321701778c8afd1352827d0e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 795208, "upload_time": "2019-06-11T00:25:04", "upload_time_iso_8601": "2019-06-11T00:25:04.643966Z", "url": "https://files.pythonhosted.org/packages/36/ab/ac35f50add8414e2c18e6ca9fa637001c9c090abb20996c0e1c6eac50241/tinybrain-0.1.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a90538b7213f4ec1fbd123a5ec0026a9", "sha256": "146d39b039c68e721443f02a7bc76cc57511957e74b033f8f83b95c2daa19dff"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp36-cp36m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "a90538b7213f4ec1fbd123a5ec0026a9", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 364848, "upload_time": "2019-07-25T04:39:16", "upload_time_iso_8601": "2019-07-25T04:39:16.698001Z", "url": "https://files.pythonhosted.org/packages/34/b6/beebc44815f9d0154005affc4c976f2d7c1b85c890f04116621e9d825b15/tinybrain-0.1.1-cp36-cp36m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b63c72b2ff5f6087ce52b56282d34dd", "sha256": "6910e1b0ffd43150294fb5fba04e57a2bbb89bbb29fe298534542e9fc82e86e9"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "1b63c72b2ff5f6087ce52b56282d34dd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 804704, "upload_time": "2019-06-11T00:25:06", "upload_time_iso_8601": "2019-06-11T00:25:06.290784Z", "url": "https://files.pythonhosted.org/packages/6c/80/833213e15dc192ddc627d49cba34cc52569c45f283188af8e2865996866e/tinybrain-0.1.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25f01805fa473bcc9679730e3195e861", "sha256": "f948c01b3a7b5f618cb42cda0911372701c171a71d4d9fcab5244dd65a83b610"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "25f01805fa473bcc9679730e3195e861", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 365151, "upload_time": "2019-07-25T04:37:58", "upload_time_iso_8601": "2019-07-25T04:37:58.600512Z", "url": "https://files.pythonhosted.org/packages/de/13/5f8c971ea244622264bb014caadf7138f06a4fe437f0b328677a48c8cb6c/tinybrain-0.1.1-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4de092b9146ecb54ebbcfdf752b9fbc2", "sha256": "f804c2af0e2c2c9cf08da1f25932bb3777cb0d5cce1355cd50f7a082783a08df"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4de092b9146ecb54ebbcfdf752b9fbc2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 803723, "upload_time": "2019-06-11T00:25:08", "upload_time_iso_8601": "2019-06-11T00:25:08.040779Z", "url": "https://files.pythonhosted.org/packages/43/c8/2fd9cac3e9446fb7767a7618d42b322bb85239317f5b87c0f979292d6307/tinybrain-0.1.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf43b0079f5e1c98581edf97a0b40304", "sha256": "b7a48c927ad6a62096e4ec1a9c221c060c9a8cdae831253a6e3db7a23f8c44c4"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "bf43b0079f5e1c98581edf97a0b40304", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 367093, "upload_time": "2019-10-23T18:34:24", "upload_time_iso_8601": "2019-10-23T18:34:24.653017Z", "url": "https://files.pythonhosted.org/packages/4f/e1/e91bfd6e3bf4b4929696cdec8b21c618c6977a5c1f729a53e44f37b30211/tinybrain-0.1.1-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3212903b721ca0bded4cd08cd943c6ee", "sha256": "3226b4ab9f45a0c180194b8de745dc997bf923e3f3fcf715313dbbb199927061"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "3212903b721ca0bded4cd08cd943c6ee", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 839035, "upload_time": "2019-10-23T18:36:54", "upload_time_iso_8601": "2019-10-23T18:36:54.655614Z", "url": "https://files.pythonhosted.org/packages/a4/93/4579d111f0ab885d6f8aa6c8b8d5d7dd03d2f8969d403c2ce3fcdec83159/tinybrain-0.1.1-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa85545b5b235a7f5ce5d0aa7f6d3cc5", "sha256": "8b0a4136da940c650f72386e5c2b185ac1af31584dd86ef4a72150de120cbff7"}, "downloads": -1, "filename": "tinybrain-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fa85545b5b235a7f5ce5d0aa7f6d3cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217141, "upload_time": "2019-06-11T00:25:10", "upload_time_iso_8601": "2019-06-11T00:25:10.199946Z", "url": "https://files.pythonhosted.org/packages/62/83/4cc00ffee635915dfe8d78f789f24a894208d549456c434df2f92584f984/tinybrain-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "64cc2310e483c4c8aabacf0b5e0bb16d", "sha256": "c9bf38a74e44deb74f10836b370bedcb2141438e44832ec6e2902daaf1fda661"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp27-cp27m-macosx_10_14_intel.whl", "has_sig": false, "md5_digest": "64cc2310e483c4c8aabacf0b5e0bb16d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 373452, "upload_time": "2019-07-25T04:40:29", "upload_time_iso_8601": "2019-07-25T04:40:29.801737Z", "url": "https://files.pythonhosted.org/packages/6c/9b/c64722d7f74330ec2a04357b5b677600c135bf34ca2c28475ce6c75d6c7a/tinybrain-0.1.1-cp27-cp27m-macosx_10_14_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10966ec841535a0fddb199fbd0a1698", "sha256": "794d6f24883b2f271e72780aaea4ece1ef3b67502f88d27acdb3fbee2ab67369"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b10966ec841535a0fddb199fbd0a1698", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 790344, "upload_time": "2019-06-11T00:25:02", "upload_time_iso_8601": "2019-06-11T00:25:02.552051Z", "url": "https://files.pythonhosted.org/packages/df/47/8c557dd124f63dd8f04dec5612a67e2025fccd4dbf5ce8289b2dd2a3152b/tinybrain-0.1.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21469fdfd5777c2d8fafa9441959b5cf", "sha256": "bac2c98e09d153f452515166f8f31bdfaed883b3162e556404ca70f928823192"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "21469fdfd5777c2d8fafa9441959b5cf", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 489056, "upload_time": "2019-07-25T04:44:10", "upload_time_iso_8601": "2019-07-25T04:44:10.268734Z", "url": "https://files.pythonhosted.org/packages/29/31/664ffc41b6ae38df1552a439f26fe927d29d110616458360f4c13e3230ff/tinybrain-0.1.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a09007321701778c8afd1352827d0e", "sha256": "f0e1709bb3aa37f047cc7c0b91525274c269b42e200a1b5e339c4dc706ea0bff"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "45a09007321701778c8afd1352827d0e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 795208, "upload_time": "2019-06-11T00:25:04", "upload_time_iso_8601": "2019-06-11T00:25:04.643966Z", "url": "https://files.pythonhosted.org/packages/36/ab/ac35f50add8414e2c18e6ca9fa637001c9c090abb20996c0e1c6eac50241/tinybrain-0.1.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a90538b7213f4ec1fbd123a5ec0026a9", "sha256": "146d39b039c68e721443f02a7bc76cc57511957e74b033f8f83b95c2daa19dff"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp36-cp36m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "a90538b7213f4ec1fbd123a5ec0026a9", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 364848, "upload_time": "2019-07-25T04:39:16", "upload_time_iso_8601": "2019-07-25T04:39:16.698001Z", "url": "https://files.pythonhosted.org/packages/34/b6/beebc44815f9d0154005affc4c976f2d7c1b85c890f04116621e9d825b15/tinybrain-0.1.1-cp36-cp36m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b63c72b2ff5f6087ce52b56282d34dd", "sha256": "6910e1b0ffd43150294fb5fba04e57a2bbb89bbb29fe298534542e9fc82e86e9"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "1b63c72b2ff5f6087ce52b56282d34dd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 804704, "upload_time": "2019-06-11T00:25:06", "upload_time_iso_8601": "2019-06-11T00:25:06.290784Z", "url": "https://files.pythonhosted.org/packages/6c/80/833213e15dc192ddc627d49cba34cc52569c45f283188af8e2865996866e/tinybrain-0.1.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25f01805fa473bcc9679730e3195e861", "sha256": "f948c01b3a7b5f618cb42cda0911372701c171a71d4d9fcab5244dd65a83b610"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "25f01805fa473bcc9679730e3195e861", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 365151, "upload_time": "2019-07-25T04:37:58", "upload_time_iso_8601": "2019-07-25T04:37:58.600512Z", "url": "https://files.pythonhosted.org/packages/de/13/5f8c971ea244622264bb014caadf7138f06a4fe437f0b328677a48c8cb6c/tinybrain-0.1.1-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4de092b9146ecb54ebbcfdf752b9fbc2", "sha256": "f804c2af0e2c2c9cf08da1f25932bb3777cb0d5cce1355cd50f7a082783a08df"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4de092b9146ecb54ebbcfdf752b9fbc2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 803723, "upload_time": "2019-06-11T00:25:08", "upload_time_iso_8601": "2019-06-11T00:25:08.040779Z", "url": "https://files.pythonhosted.org/packages/43/c8/2fd9cac3e9446fb7767a7618d42b322bb85239317f5b87c0f979292d6307/tinybrain-0.1.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf43b0079f5e1c98581edf97a0b40304", "sha256": "b7a48c927ad6a62096e4ec1a9c221c060c9a8cdae831253a6e3db7a23f8c44c4"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "bf43b0079f5e1c98581edf97a0b40304", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 367093, "upload_time": "2019-10-23T18:34:24", "upload_time_iso_8601": "2019-10-23T18:34:24.653017Z", "url": "https://files.pythonhosted.org/packages/4f/e1/e91bfd6e3bf4b4929696cdec8b21c618c6977a5c1f729a53e44f37b30211/tinybrain-0.1.1-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3212903b721ca0bded4cd08cd943c6ee", "sha256": "3226b4ab9f45a0c180194b8de745dc997bf923e3f3fcf715313dbbb199927061"}, "downloads": -1, "filename": "tinybrain-0.1.1-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "3212903b721ca0bded4cd08cd943c6ee", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 839035, "upload_time": "2019-10-23T18:36:54", "upload_time_iso_8601": "2019-10-23T18:36:54.655614Z", "url": "https://files.pythonhosted.org/packages/a4/93/4579d111f0ab885d6f8aa6c8b8d5d7dd03d2f8969d403c2ce3fcdec83159/tinybrain-0.1.1-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa85545b5b235a7f5ce5d0aa7f6d3cc5", "sha256": "8b0a4136da940c650f72386e5c2b185ac1af31584dd86ef4a72150de120cbff7"}, "downloads": -1, "filename": "tinybrain-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fa85545b5b235a7f5ce5d0aa7f6d3cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217141, "upload_time": "2019-06-11T00:25:10", "upload_time_iso_8601": "2019-06-11T00:25:10.199946Z", "url": "https://files.pythonhosted.org/packages/62/83/4cc00ffee635915dfe8d78f789f24a894208d549456c434df2f92584f984/tinybrain-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:07 2020"}