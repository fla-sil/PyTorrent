{"info": {"author": "Patrick McClory, Patrick Pierson", "author_email": "patrick@dualspark.com, patrick.pierson@ionchannel.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Code Generators", "Topic :: Utilities"], "description": "Cloudformation Environment Generator\n------------------------------------\n|Build Status|\n\n.. |Build Status| image:: https://travis-ci.org/AWSFrederick/cloudformation-environmentbase.svg?branch=master\n   :target: https://travis-ci.org/AWSFrederick/cloudformation-environmentbase\n\n|Gitter Chat|\n\n.. |Gitter Chat| image:: https://badges.gitter.im/gitterHQ/gitter.png\n   :target: https://gitter.im/cloudformation-environmentbase/Lobby\n\nWhat is Environmentbase?\n------------------------\n\nEnvironmentbase extends\n`troposphere <https://github.com/cloudtools/troposphere>`__, a library\nof wrapper objects for programmatically generating Cloudformation\ntemplates. Environmentbase embraces this model of automation development\nand extends it in several ways:\n\n-  provides a configurable base layer of networking resources enabling\n   you to focus on services instead of networking\n-  provides a small but growing library of functional infrastructure\n   patterns encapsulating industry best practices.\n-  provides an extension mechanism to develop your own configurable,\n   reusable 'patterns' using child-templates.\n\nMoreover the Environmentbase platform allows for a service oriented\ndevelopment model, whereby small teams can build, test and deploy\nindependent infrastructure automation templates, each focused on a\nspecific service or function. These templates can be imported and\nassociated to a 'top-level' (integration) template to centrally deploy\nand manage the full environment. The same template can be deployed in\nany region or AWS account to produce identical environments.\n\n| Out of the box, this will create a VPC that should deploy cleanly into\n  any region\n| across the publicly available AWS regions. The VPC network, by\n  default, will\n| include:\n\n-  A public (/24) and a private subnet (/22) in three different\n   Availability Zones\n-  A highly available NAT instance per AZ\n-  An S3 bucket configured to allow Amazon ELB (within the same region)\n   and AWS\n   CloudTrail to aggregate logs\n\n| There are a number of configuration options documented within the\n  script itself\n| using `docopt <http://docopt.org>`__. An overview of the general\n  capabilities and\n| features is as follows:\n\n-  This script queries the AWS VPC API to ensure that the AZ's selected\n   for\n   deployment will allow subnets to be deployed to them (sometimes an\n   issue in\n   older accounts)\n-  Modify the base network CIDR block and subnet size and count via\n   parameters\n-  Set prefixes for S3 key names for ELB and CloudTrail logging paths\n   within the\n   created bucket\n\n| Used from the command line, this will generate the network alone, but\n  when used\n| as a Python module, it's a powerful building block to help generate\n  the basic\n| structures for more complex environments in CloudFormation very\n  easily.\n\nPython Usage\n------------\n\n| The Python class EnvironmentBase is designed to be useful from command\n  line\n| tools, but has further utility as a base class for more complicated\n| environments. The original aim of this script was to build a reusable\n  artifact\n| that could serve as the common networking design for multi-AZ,\n  multi-subnet\n| demo environments. As such, the environmentbase.py script contains a\n  number of\n| methods that are meant to be used by sub-classes and provide\n  abstractions for\n| common workflows and use cases. To use this class, simply add it as a\n  dependency\n| in your requirements.txt or setup.py. The following is an example\n  showing how to\n| import core envbase components and patterns, including the bastion\n  host pattern:\n\n.. code:: python\n\n    from environmentbase.networkbase import NetworkBase\n    from environmentbase.patterns.bastion import Bastion\n\n    class MyEnvClass(NetworkBase):\n        '''\n        Class creates a VPC, common network components for the environment and a bastion host\n        '''\n\n        def create_hook(self):\n\n            # Do custom troposphere resource creation here\n            self.add_child_template(Bastion())\n\n\n        def deploy_hook(self):\n\n            # Do custom deploy steps here\n\n\n    if __name__ == '__main__':\n\n        MyEnvClass()\n\nOverriding these two functions allows you to hook into the template\ngeneration and stack creation processes of environmentbase to inject the\nresources and deployment steps for your environment. This create\\_hook()\nwill add a bastion host as a child stack of the environment. See the\n`Development <DEVELOPMENT.md>`__ documentation for more detailed\nexamples.\n\nSee `here <src/examples/>`__ for more examples of using patterns.\n\n| Documentation within the class takes a modified usage of the\n| `doxygen <http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#pythonblocks>`__\n| standard by adding a @classarg identifier that indicates that a given\n  method\n| utilizes an argument that's passed in via the class constructor along\n  with the\n| type and description of that parameter.\n\nGetting Started\n---------------\n\nTo use this script, you must install some requirements (listed\n`here <https://github.com/DualSpark/cloudformation-environmentbase/blob/master/setup.py#L65>`__)\n\n| We recommend you create a `virtual\n  environment <https://virtualenv.pypa.io/en/latest/>`__ to isolate the\n  dependencies from the rest of your system, but it is not required.\n| Run the following commands from the root of the environmentbase\n  directory to install the dependencies:\n\n.. code:: bash\n\n    python setup.py install\n\nTo use the script itself, you can run it directly from the command line:\n\n.. code:: bash\n\n    environmentbase --help\n\nYou must have your AWS credentials configured as required by\n`boto <http://boto.readthedocs.org/en/latest/boto_config_tut.html>`__.\n\nIf you have the AWS CLI, you can run ``aws configure`` to generate the\ncredentials files in the appropriate place. If you have already\nconfigured the AWS CLI, then no further steps are necessary.\n\nYou must ensure that the account you are authenticating with has at\nleast the following permissions:\n\n.. code:: javascript\n\n    {\"Statement\": [ {\"Action\": [\"ec2:DescribeAvailabilityZones\",\n    \"ec2:DescribeRegions\"], \"Effect\": \"Allow\", \"Resource\": \"*\" }]}\n\nThis is required to perform the VPC lookups.\n\nOnce you have configured your credentials, you can run the generator as\nfollows:\n\n.. code:: bash\n\n    environmentbase init\n\nThis initialization command will generate two files: ``config.json`` and\n``ami_cache.json``. You may override the config filename with the\n``--config-file`` parameter. This is useful when managing multiple\nstacks simultaneously.\n\nYou should now look at the generated ``config.json`` file and fill out\nat least the following fields:\n\n| ``template : ec2_key_default`` - This must be the name of a valid SSH\n  key in your AWS account\n| ``template : s3_bucket`` - S3 bucket used to upload the generated\n  cloudformation templates\n| ``logging : s3_bucket`` - S3 bucket used for cloudtrail and ELB\n  logging\n\nYou must ensure that the above two buckets exist and that you have\naccess to write to them (they can be the same bucket). Also, the logging\ns3\\_bucket must have the correct access policy -- it needs to allow the\nAWS ELB and Cloudtrail accounts access to upload their logging data. See\na sample access policy\n`here <src/environmentbase/data/logging_bucket_policy.json>`__, just\nreplace all instances of ``%%S3_BUCKET%%`` with your logging bucket name\nand attach the policy to your S3 bucket.\n\nYou may also edit the other fields to customize the environment to your\nliking. After you have configured your environment, run:\n\n.. code:: bash\n\n    environmentbase create\n\nThis will generate the cloudformation templates using your updated\nconfig. It will save them both to S3 in your template bucket as well as\nlocally. You can use the config ``template.include_timestamp`` setting\nto toggle whether or not a timestamp will be included the template\nfilenames (This can be useful for keeping versioned templates, it is\nenabled by default). Then run:\n\n.. code:: bash\n\n    environmentbase deploy\n\nThis will create a cloudformation stack from your generated template on\n`AWS <https://console.aws.amazon.com/cloudformation/>`__\n\nYou can use the config setting ``global.monitor_stack`` to enable real\ntime tracking of the event stream from the stack deployment. You can\nthen enable ``global.write_stack_outputs`` to automatically save all the\nstack outputs to a local file as they are brought up in AWS. You can\nalso hook into the stack event stream with your own scripting using the\n``stack_event_hook()`` function in environmentbase. Simply override this\nfunction in your controller and inject any real time deployment\nscripting.\n\nYou may run the following command to delete your stack when you are done\nwith it:\n\n.. code:: bash\n\n    environmentbase delete\n\nSee `File Descriptions <FILE_DESCRIPTIONS.md>`__ for a detailed\nexplanation on the various files generated and consumed by\nEnvironmentBase\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AWSFrederick/cloudformation-environmentbase", "keywords": "", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "cfn-environment-base", "package_url": "https://pypi.org/project/cfn-environment-base/", "platform": "", "project_url": "https://pypi.org/project/cfn-environment-base/", "project_urls": {"Homepage": "https://github.com/AWSFrederick/cloudformation-environmentbase"}, "release_url": "https://pypi.org/project/cfn-environment-base/0.9.19/", "requires_dist": null, "requires_python": "", "summary": "Base environment for Troposphere based CFN project environments", "version": "0.9.19", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cloudformation-environment-generator\">\n<h2>Cloudformation Environment Generator</h2>\n<p><a href=\"https://travis-ci.org/AWSFrederick/cloudformation-environmentbase\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ee2c30a954f40255411c439b75787cf52f741db/68747470733a2f2f7472617669732d63692e6f72672f41575346726564657269636b2f636c6f7564666f726d6174696f6e2d656e7669726f6e6d656e74626173652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://gitter.im/cloudformation-environmentbase/Lobby\" rel=\"nofollow\"><img alt=\"Gitter Chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccaa9f480b61b818a4de6009abf3eaca6dc76efa/68747470733a2f2f6261646765732e6769747465722e696d2f67697474657248512f6769747465722e706e67\"></a></p>\n</div>\n<div id=\"what-is-environmentbase\">\n<h2>What is Environmentbase?</h2>\n<p>Environmentbase extends\n<a href=\"https://github.com/cloudtools/troposphere\" rel=\"nofollow\">troposphere</a>, a library\nof wrapper objects for programmatically generating Cloudformation\ntemplates. Environmentbase embraces this model of automation development\nand extends it in several ways:</p>\n<ul>\n<li>provides a configurable base layer of networking resources enabling\nyou to focus on services instead of networking</li>\n<li>provides a small but growing library of functional infrastructure\npatterns encapsulating industry best practices.</li>\n<li>provides an extension mechanism to develop your own configurable,\nreusable \u2018patterns\u2019 using child-templates.</li>\n</ul>\n<p>Moreover the Environmentbase platform allows for a service oriented\ndevelopment model, whereby small teams can build, test and deploy\nindependent infrastructure automation templates, each focused on a\nspecific service or function. These templates can be imported and\nassociated to a \u2018top-level\u2019 (integration) template to centrally deploy\nand manage the full environment. The same template can be deployed in\nany region or AWS account to produce identical environments.</p>\n<div>\n<div>Out of the box, this will create a VPC that should deploy cleanly into\nany region</div>\n<div>across the publicly available AWS regions. The VPC network, by\ndefault, will</div>\n<div>include:</div>\n</div>\n<ul>\n<li>A public (/24) and a private subnet (/22) in three different\nAvailability Zones</li>\n<li>A highly available NAT instance per AZ</li>\n<li>An S3 bucket configured to allow Amazon ELB (within the same region)\nand AWS\nCloudTrail to aggregate logs</li>\n</ul>\n<div>\n<div>There are a number of configuration options documented within the\nscript itself</div>\n<div>using <a href=\"http://docopt.org\" rel=\"nofollow\">docopt</a>. An overview of the general\ncapabilities and</div>\n<div>features is as follows:</div>\n</div>\n<ul>\n<li>This script queries the AWS VPC API to ensure that the AZ\u2019s selected\nfor\ndeployment will allow subnets to be deployed to them (sometimes an\nissue in\nolder accounts)</li>\n<li>Modify the base network CIDR block and subnet size and count via\nparameters</li>\n<li>Set prefixes for S3 key names for ELB and CloudTrail logging paths\nwithin the\ncreated bucket</li>\n</ul>\n<div>\n<div>Used from the command line, this will generate the network alone, but\nwhen used</div>\n<div>as a Python module, it\u2019s a powerful building block to help generate\nthe basic</div>\n<div>structures for more complex environments in CloudFormation very\neasily.</div>\n</div>\n</div>\n<div id=\"python-usage\">\n<h2>Python Usage</h2>\n<div>\n<div>The Python class EnvironmentBase is designed to be useful from command\nline</div>\n<div>tools, but has further utility as a base class for more complicated</div>\n<div>environments. The original aim of this script was to build a reusable\nartifact</div>\n<div>that could serve as the common networking design for multi-AZ,\nmulti-subnet</div>\n<div>demo environments. As such, the environmentbase.py script contains a\nnumber of</div>\n<div>methods that are meant to be used by sub-classes and provide\nabstractions for</div>\n<div>common workflows and use cases. To use this class, simply add it as a\ndependency</div>\n<div>in your requirements.txt or setup.py. The following is an example\nshowing how to</div>\n<div>import core envbase components and patterns, including the bastion\nhost pattern:</div>\n</div>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">environmentbase.networkbase</span> <span class=\"kn\">import</span> <span class=\"n\">NetworkBase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">environmentbase.patterns.bastion</span> <span class=\"kn\">import</span> <span class=\"n\">Bastion</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyEnvClass</span><span class=\"p\">(</span><span class=\"n\">NetworkBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    Class creates a VPC, common network components for the environment and a bastion host\n    '''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_hook</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Do custom troposphere resource creation here</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_child_template</span><span class=\"p\">(</span><span class=\"n\">Bastion</span><span class=\"p\">())</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">deploy_hook</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Do custom deploy steps here</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"n\">MyEnvClass</span><span class=\"p\">()</span>\n</pre>\n<p>Overriding these two functions allows you to hook into the template\ngeneration and stack creation processes of environmentbase to inject the\nresources and deployment steps for your environment. This create_hook()\nwill add a bastion host as a child stack of the environment. See the\n<a href=\"DEVELOPMENT.md\" rel=\"nofollow\">Development</a> documentation for more detailed\nexamples.</p>\n<p>See <a href=\"src/examples/\" rel=\"nofollow\">here</a> for more examples of using patterns.</p>\n<div>\n<div>Documentation within the class takes a modified usage of the</div>\n<div><a href=\"http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#pythonblocks\" rel=\"nofollow\">doxygen</a></div>\n<div>standard by adding a @classarg identifier that indicates that a given\nmethod</div>\n<div>utilizes an argument that\u2019s passed in via the class constructor along\nwith the</div>\n<div>type and description of that parameter.</div>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>To use this script, you must install some requirements (listed\n<a href=\"https://github.com/DualSpark/cloudformation-environmentbase/blob/master/setup.py#L65\" rel=\"nofollow\">here</a>)</p>\n<div>\n<div>We recommend you create a <a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtual\nenvironment</a> to isolate the\ndependencies from the rest of your system, but it is not required.</div>\n<div>Run the following commands from the root of the environmentbase\ndirectory to install the dependencies:</div>\n</div>\n<pre>python setup.py install\n</pre>\n<p>To use the script itself, you can run it directly from the command line:</p>\n<pre>environmentbase --help\n</pre>\n<p>You must have your AWS credentials configured as required by\n<a href=\"http://boto.readthedocs.org/en/latest/boto_config_tut.html\" rel=\"nofollow\">boto</a>.</p>\n<p>If you have the AWS CLI, you can run <tt>aws configure</tt> to generate the\ncredentials files in the appropriate place. If you have already\nconfigured the AWS CLI, then no further steps are necessary.</p>\n<p>You must ensure that the account you are authenticating with has at\nleast the following permissions:</p>\n<pre><span class=\"p\">{</span><span class=\"s2\">\"Statement\"</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s2\">\"Action\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"ec2:DescribeAvailabilityZones\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"ec2:DescribeRegions\"</span><span class=\"p\">],</span> <span class=\"s2\">\"Effect\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Resource\"</span><span class=\"o\">:</span> <span class=\"s2\">\"*\"</span> <span class=\"p\">}]}</span>\n</pre>\n<p>This is required to perform the VPC lookups.</p>\n<p>Once you have configured your credentials, you can run the generator as\nfollows:</p>\n<pre>environmentbase init\n</pre>\n<p>This initialization command will generate two files: <tt>config.json</tt> and\n<tt>ami_cache.json</tt>. You may override the config filename with the\n<tt><span class=\"pre\">--config-file</span></tt> parameter. This is useful when managing multiple\nstacks simultaneously.</p>\n<p>You should now look at the generated <tt>config.json</tt> file and fill out\nat least the following fields:</p>\n<div>\n<div><tt>template : ec2_key_default</tt> - This must be the name of a valid SSH\nkey in your AWS account</div>\n<div><tt>template : s3_bucket</tt> - S3 bucket used to upload the generated\ncloudformation templates</div>\n<div><tt>logging : s3_bucket</tt> - S3 bucket used for cloudtrail and ELB\nlogging</div>\n</div>\n<p>You must ensure that the above two buckets exist and that you have\naccess to write to them (they can be the same bucket). Also, the logging\ns3_bucket must have the correct access policy \u2013 it needs to allow the\nAWS ELB and Cloudtrail accounts access to upload their logging data. See\na sample access policy\n<a href=\"src/environmentbase/data/logging_bucket_policy.json\" rel=\"nofollow\">here</a>, just\nreplace all instances of <tt>%%S3_BUCKET%%</tt> with your logging bucket name\nand attach the policy to your S3 bucket.</p>\n<p>You may also edit the other fields to customize the environment to your\nliking. After you have configured your environment, run:</p>\n<pre>environmentbase create\n</pre>\n<p>This will generate the cloudformation templates using your updated\nconfig. It will save them both to S3 in your template bucket as well as\nlocally. You can use the config <tt>template.include_timestamp</tt> setting\nto toggle whether or not a timestamp will be included the template\nfilenames (This can be useful for keeping versioned templates, it is\nenabled by default). Then run:</p>\n<pre>environmentbase deploy\n</pre>\n<p>This will create a cloudformation stack from your generated template on\n<a href=\"https://console.aws.amazon.com/cloudformation/\" rel=\"nofollow\">AWS</a></p>\n<p>You can use the config setting <tt>global.monitor_stack</tt> to enable real\ntime tracking of the event stream from the stack deployment. You can\nthen enable <tt>global.write_stack_outputs</tt> to automatically save all the\nstack outputs to a local file as they are brought up in AWS. You can\nalso hook into the stack event stream with your own scripting using the\n<tt>stack_event_hook()</tt> function in environmentbase. Simply override this\nfunction in your controller and inject any real time deployment\nscripting.</p>\n<p>You may run the following command to delete your stack when you are done\nwith it:</p>\n<pre>environmentbase delete\n</pre>\n<p>See <a href=\"FILE_DESCRIPTIONS.md\" rel=\"nofollow\">File Descriptions</a> for a detailed\nexplanation on the various files generated and consumed by\nEnvironmentBase</p>\n</div>\n\n          </div>"}, "last_serial": 2903914, "releases": {"0.9.18": [{"comment_text": "", "digests": {"md5": "2d6c9c1b96d8bdafae0b0312876a5466", "sha256": "bd6272b91714285beff94046f255f70bcc0eca5f741a61bf6316db6f1348af1b"}, "downloads": -1, "filename": "cfn-environment-base-0.9.18.tar.gz", "has_sig": false, "md5_digest": "2d6c9c1b96d8bdafae0b0312876a5466", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84293, "upload_time": "2017-05-27T03:44:08", "upload_time_iso_8601": "2017-05-27T03:44:08.524452Z", "url": "https://files.pythonhosted.org/packages/b0/7c/e5480e48b142fe3825e36add7cb41b48f45d0388d6296311955cbe49a125/cfn-environment-base-0.9.18.tar.gz", "yanked": false}], "0.9.19": [{"comment_text": "", "digests": {"md5": "29848b24df7726daedf19d1a42e9ad47", "sha256": "33bee0ae5a704e8a27d24e9cf018f947bb3b305496328a3d107cee6e94fc659e"}, "downloads": -1, "filename": "cfn-environment-base-0.9.19.tar.gz", "has_sig": false, "md5_digest": "29848b24df7726daedf19d1a42e9ad47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84270, "upload_time": "2017-05-27T21:51:32", "upload_time_iso_8601": "2017-05-27T21:51:32.133155Z", "url": "https://files.pythonhosted.org/packages/a5/90/b08032748b4f2cd04b64284130e783a6e8c3da4088fe939bfa5a38ec3409/cfn-environment-base-0.9.19.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29848b24df7726daedf19d1a42e9ad47", "sha256": "33bee0ae5a704e8a27d24e9cf018f947bb3b305496328a3d107cee6e94fc659e"}, "downloads": -1, "filename": "cfn-environment-base-0.9.19.tar.gz", "has_sig": false, "md5_digest": "29848b24df7726daedf19d1a42e9ad47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84270, "upload_time": "2017-05-27T21:51:32", "upload_time_iso_8601": "2017-05-27T21:51:32.133155Z", "url": "https://files.pythonhosted.org/packages/a5/90/b08032748b4f2cd04b64284130e783a6e8c3da4088fe939bfa5a38ec3409/cfn-environment-base-0.9.19.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:38 2020"}