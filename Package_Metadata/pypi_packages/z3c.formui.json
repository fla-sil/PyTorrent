{"info": {"author": "Stephan Richter, Roger Ineichen and the Zope Community", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope :: 3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides a set of default layouts for the ``z3c.form``\nframework. In particular it provides a DIV-based and a TABLE-based layout. The\ndeveloper can use either layout by inheriting from a different base layer.\n\nThe package also has some support for layout/pagelet templates.\n\n\n.. contents::\n\n====================\nForm User Interfaces\n====================\n\nThis package provides several useful templates to get a quick start with the\n``z3c.form`` package. Previous form frameworks always included default\ntemplates that were implemented in a particular user-interface development\npattern. If you wanted to use an alternative strategy to develop user\ninterfaces, it was often tedious to do so. This package aims to provide some\noptions without requiring them for the basic framework.\n\n\nLayout Template Support\n-----------------------\n\nOne common pattern in Zope 3 user interface development is the use of layout\ntemplates (see z3c.template). This package provides some mixin classes to the\nregular form classes to support layout-based templating.\n\n  >>> from z3c.form import testing\n  >>> testing.setupFormDefaults()\n\nBefore we can start writing forms, we must have the content to work with:\n\n  >>> import zope.interface\n  >>> import zope.schema\n  >>> class IPerson(zope.interface.Interface):\n  ...\n  ...     name = zope.schema.TextLine(\n  ...         title=u'Name',\n  ...         required=True)\n  ...\n  ...     age = zope.schema.Int(\n  ...         title=u'Age',\n  ...         description=u\"The person's age.\",\n  ...         min=0,\n  ...         default=20,\n  ...         required=False)\n\n  >>> from zope.schema.fieldproperty import FieldProperty\n  >>> @zope.interface.implementer(IPerson)\n  ... class Person(object):\n  ...     name = FieldProperty(IPerson['name'])\n  ...     age = FieldProperty(IPerson['age'])\n  ...\n  ...     def __init__(self, name, age):\n  ...         self.name = name\n  ...         self.age = age\n  ...\n  ...     def __repr__(self):\n  ...         return '<%s %r>' % (self.__class__.__name__, self.name)\n\nOkay, that should suffice for now. Let's now create a working add form:\n\n  >>> from z3c.form import field\n  >>> from z3c.formui import form, layout\n  >>> class PersonAddForm(form.AddForm):\n  ...\n  ...     fields = field.Fields(IPerson)\n  ...\n  ...     def create(self, data):\n  ...         return Person(**data)\n  ...\n  ...     def add(self, object):\n  ...         self.context[object.id] = object\n  ...\n  ...     def nextURL(self):\n  ...         return 'index.html'\n\nLet's create a request:\n\n  >>> from z3c.form.testing import TestRequest\n  >>> from zope.interface import alsoProvides\n  >>> divRequest = TestRequest()\n\nAnd support the div form layer for our request:\n\n  >>> from z3c.formui.interfaces import IDivFormLayer\n  >>> alsoProvides(divRequest, IDivFormLayer)\n\nNow create the form:\n\n  >>> addForm = PersonAddForm(root, divRequest)\n\nSince we have not specified a template yet, we have to do this now. We use our\ndiv based form template:\n\n  >>> import os\n  >>> import z3c.formui\n  >>> divFormTemplate = os.path.join(os.path.dirname(z3c.formui.__file__),\n  ...     'div-form.pt')\n\n  >>> from z3c.template.template import TemplateFactory\n  >>> divFormFactory = TemplateFactory(divFormTemplate, 'text/html')\n\nNow register the form (content) template:\n\n  >>> import zope.interface\n  >>> import zope.component\n  >>> from z3c.template.interfaces import IContentTemplate\n  >>> zope.component.provideAdapter(divFormFactory,\n  ...     (zope.interface.Interface, IDivFormLayer),\n  ...     IContentTemplate)\n\nAnd let's define a layout template which simply calls the render method. For a\nmore advanced content/layout render concept see z3c.pagelet.\n\n  >>> import tempfile\n  >>> temp_dir = tempfile.mkdtemp()\n\n  >>> myLayout = os.path.join(temp_dir, 'myLayout.pt')\n  >>> with open(myLayout, 'w') as file:\n  ...     _ = file.write('''<html>\n  ...   <body>\n  ...     <tal:block content=\"structure view/render\">\n  ...       content\n  ...     </tal:block>\n  ...   </body>\n  ... </html>''')\n  >>> myLayoutFactory = TemplateFactory(myLayout, 'text/html')\n\n  >>> from z3c.template.interfaces import ILayoutTemplate\n  >>> zope.component.provideAdapter(myLayoutFactory,\n  ...     (zope.interface.Interface, zope.interface.Interface), ILayoutTemplate)\n\nNow we can get our layout template:\n\n  >>> layout = zope.component.getMultiAdapter((addForm, divRequest),\n  ...     ILayoutTemplate)\n\n  >>> layout.__class__.__name__\n  'ViewPageTemplateFile'\n\n  >>> os.path.basename(layout.filename)\n  'myLayout.pt'\n\n\nDIV-based Layout\n----------------\n\nLet's now render the page. Note the output doesn't contain the layout template:\n\n  >>> addForm.update()\n  >>> print(addForm.render())\n  <form action=\"http://127.0.0.1\" method=\"post\"\n          enctype=\"multipart/form-data\" class=\"edit-form\"\n          name=\"form\" id=\"form\">\n    <div class=\"viewspace\">\n      <div class=\"required-info\">\n        <span class=\"required\">*</span> &ndash; required\n      </div>\n      <div>\n        <div id=\"form-widgets-name-row\" class=\"row required\">\n          <div class=\"label\">\n            <label for=\"form-widgets-name\">\n              <span>Name</span>\n              <span class=\"required\">*</span>\n            </label>\n          </div>\n          <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n                   name=\"form.widgets.name\"\n                   class=\"text-widget required textline-field\" value=\"\" />\n          </div>\n        </div>\n        <div id=\"form-widgets-age-row\" class=\"row\">\n          <div class=\"label\">\n            <label for=\"form-widgets-age\">\n              <span>Age</span>\n            </label>\n          </div>\n          <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n                   name=\"form.widgets.age\" class=\"text-widget int-field\"\n                   value=\"20\" />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div>\n      <div class=\"buttons\">\n        <input type=\"submit\" id=\"form-buttons-add\"\n               name=\"form.buttons.add\"\n               class=\"submit-widget button-field\" value=\"Add\" />\n      </div>\n    </div>\n  </form>\n\nBut we can call our form which uses the new layout template which renders\nthe form within the div-form content template:\n\n  >>> print(addForm())\n  <html>\n    <body>\n      <form action=\"http://127.0.0.1\" method=\"post\"\n        enctype=\"multipart/form-data\" class=\"edit-form\"\n        name=\"form\" id=\"form\">\n        <div class=\"viewspace\">\n          <div class=\"required-info\">\n            <span class=\"required\">*</span>\n            &ndash; required\n          </div>\n          <div>\n            <div id=\"form-widgets-name-row\" class=\"row required\">\n              <div class=\"label\">\n                <label for=\"form-widgets-name\">\n                  <span>Name</span>\n                  <span class=\"required\">*</span>\n                </label>\n              </div>\n              <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n                   name=\"form.widgets.name\"\n                   class=\"text-widget required textline-field\" value=\"\" />\n              </div>\n            </div>\n            <div id=\"form-widgets-age-row\" class=\"row\">\n              <div class=\"label\">\n                <label for=\"form-widgets-age\">\n                  <span>Age</span>\n                </label>\n              </div>\n              <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n                   name=\"form.widgets.age\" class=\"text-widget int-field\"\n                   value=\"20\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div class=\"buttons\">\n            <input type=\"submit\" id=\"form-buttons-add\"\n             name=\"form.buttons.add\"\n             class=\"submit-widget button-field\" value=\"Add\" />\n          </div>\n        </div>\n      </form>\n    </body>\n  </html>\n\n\nTable-based Forms\n-----------------\n\nThere is a table based layout too. Let's define the template and use them:\n\n  >>> from z3c.formui.interfaces import ITableFormLayer\n  >>> tableFormTemplate = os.path.join(os.path.dirname(z3c.formui.__file__),\n  ...     'table-form.pt')\n\n  >>> from z3c.template.template import TemplateFactory\n  >>> tableFormFactory = TemplateFactory(tableFormTemplate, 'text/html')\n\nNow register the form (content) template:\n\n  >>> zope.component.provideAdapter(tableFormFactory,\n  ...     (zope.interface.Interface, ITableFormLayer), IContentTemplate)\n\nPatch the request and call the form again:\n\n  >>> tableRequest = TestRequest()\n  >>> alsoProvides(tableRequest, ITableFormLayer)\n\nNow our new request should know the table based form template:\n\n  >>> addForm = PersonAddForm(root, tableRequest)\n  >>> print(addForm())\n  <html>\n    <body>\n      <form action=\"http://127.0.0.1\" method=\"post\"\n        enctype=\"multipart/form-data\" class=\"edit-form\"\n        name=\"form\" id=\"form\">\n        <div class=\"viewspace\">\n          <div class=\"required-info\">\n            <span class=\"required\">*</span>\n            &ndash; required\n          </div>\n          <div>\n          <table class=\"form-fields\">\n                <tr class=\"row required\">\n                  <td class=\"label\">\n                    <label for=\"form-widgets-name\">\n                      <span>Name</span>\n                      <span class=\"required\"> * </span>\n                    </label>\n                  </td>\n                  <td class=\"field\">\n                    <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n                         name=\"form.widgets.name\"\n                         class=\"text-widget required textline-field\" value=\"\" />\n                    </div>\n                  </td>\n                </tr>\n                <tr class=\"row\">\n                  <td class=\"label\">\n                    <label for=\"form-widgets-age\">\n                      <span>Age</span>\n                    </label>\n                  </td>\n                  <td class=\"field\">\n                    <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n                         name=\"form.widgets.age\" class=\"text-widget int-field\"\n                         value=\"20\" />\n                    </div>\n                  </td>\n                </tr>\n          </table>\n        </div>\n      </div>\n      <div>\n        <div class=\"buttons\">\n          <input type=\"submit\" id=\"form-buttons-add\"\n         name=\"form.buttons.add\"\n         class=\"submit-widget button-field\" value=\"Add\" />\n        </div>\n      </div>\n      </form>\n    </body>\n  </html>\n\n\n`AddForm` rendering for `IAdding`\n---------------------------------\n\nThe `z3c.formui` package also provides a layout-aware version of\n`z3c.form.adding.AddForm` which can be used for creating forms for the\n`zope.app.container.interfaces.IAdding` mechanism.\n\nLet's check its template support. First, create the form for an `Adding`\ninstance. We just need to define the ``create()`` method, because the default\n``add()`` and ``nextURL()`` methods are already defined using the `Adding`\nobject.\n\n  >>> from z3c.formui import adding\n  >>> class AddingPersonAddForm(adding.AddForm):\n  ...\n  ...     fields = field.Fields(IPerson)\n  ...\n  ...     def create(self, data):\n  ...         return Person(**data)\n\n\nLet's now instantiate the \"fake\" adding component and the add form:\n\n  >>> class Adding(object):\n  ...     def __init__(self, context, request):\n  ...         self.context = context\n  ...         self.request = request\n  >>> rootAdding = Adding(root, divRequest)\n\n  >>> addForm = AddingPersonAddForm(rootAdding, divRequest)\n\nFirst, let's ensure that we can lookup a layout template for the form:\n\n  >>> layout = zope.component.getMultiAdapter(\n  ...     (addForm, divRequest), ILayoutTemplate)\n\n  >>> layout.__class__.__name__\n  'ViewPageTemplateFile'\n\nOkay, that worked. Let's now render the div-based addform:\n\n  >>> print(addForm())\n  <html>\n    <body>\n      <form action=\"http://127.0.0.1\" method=\"post\"\n        enctype=\"multipart/form-data\" class=\"edit-form\"\n        name=\"form\" id=\"form\">\n        <div class=\"viewspace\">\n          <div class=\"required-info\">\n            <span class=\"required\">*</span>\n            &ndash; required\n          </div>\n          <div>\n            <div id=\"form-widgets-name-row\" class=\"row required\">\n              <div class=\"label\">\n                <label for=\"form-widgets-name\">\n                  <span>Name</span>\n                  <span class=\"required\">*</span>\n                </label>\n              </div>\n              <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n                   name=\"form.widgets.name\"\n                   class=\"text-widget required textline-field\" value=\"\" />\n              </div>\n            </div>\n            <div id=\"form-widgets-age-row\" class=\"row\">\n              <div class=\"label\">\n                <label for=\"form-widgets-age\">\n                  <span>Age</span>\n                </label>\n              </div>\n              <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n                   name=\"form.widgets.age\" class=\"text-widget int-field\"\n                   value=\"20\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div class=\"buttons\">\n            <input type=\"submit\" id=\"form-buttons-add\"\n             name=\"form.buttons.add\"\n             class=\"submit-widget button-field\" value=\"Add\" />\n          </div>\n        </div>\n      </form>\n    </body>\n  </html>\n\nOkay, now we are going to check table layout support.\n\n  >>> rootAdding = Adding(root, tableRequest)\n  >>> addForm = AddingPersonAddForm(rootAdding, tableRequest)\n\nAgain, the layout should be available:\n\n  >>> layout = zope.component.getMultiAdapter((addForm, tableRequest),\n  ...     ILayoutTemplate)\n\n  >>> layout.__class__.__name__\n  'ViewPageTemplateFile'\n\nLet's now render the form:\n\n  >>> print(addForm())\n  <html>\n    <body>\n      <form action=\"http://127.0.0.1\" method=\"post\"\n        enctype=\"multipart/form-data\" class=\"edit-form\"\n        name=\"form\" id=\"form\">\n        <div class=\"viewspace\">\n          <div class=\"required-info\">\n            <span class=\"required\">*</span>\n            &ndash; required\n          </div>\n          <div>\n          <table class=\"form-fields\">\n                <tr class=\"row required\">\n                  <td class=\"label\">\n                    <label for=\"form-widgets-name\">\n                      <span>Name</span>\n                      <span class=\"required\"> * </span>\n                    </label>\n                  </td>\n                  <td class=\"field\">\n                    <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n                         name=\"form.widgets.name\"\n                         class=\"text-widget required textline-field\" value=\"\" />\n                    </div>\n                  </td>\n                </tr>\n                <tr class=\"row\">\n                  <td class=\"label\">\n                    <label for=\"form-widgets-age\">\n                      <span>Age</span>\n                    </label>\n                  </td>\n                  <td class=\"field\">\n                    <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n                         name=\"form.widgets.age\" class=\"text-widget int-field\"\n                         value=\"20\" />\n                    </div>\n                  </td>\n                </tr>\n          </table>\n        </div>\n      </div>\n      <div>\n        <div class=\"buttons\">\n          <input type=\"submit\" id=\"form-buttons-add\"\n         name=\"form.buttons.add\"\n         class=\"submit-widget button-field\" value=\"Add\" />\n        </div>\n      </div>\n      </form>\n    </body>\n  </html>\n\n\nForm Macros\n-----------\n\nLoad the configuration, which will make sure that all macros get registered\ncorrectly:\n\n  >>> from zope.configuration import xmlconfig\n  >>> import zope.component\n  >>> import zope.viewlet\n  >>> import zope.security\n  >>> import zope.publisher\n  >>> import zope.browserresource\n  >>> import z3c.macro\n  >>> import z3c.template\n  >>> import z3c.formui\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.component)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.viewlet)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.security)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.publisher)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.browserresource)()\n  >>> xmlconfig.XMLConfig('meta.zcml', z3c.macro)()\n  >>> xmlconfig.XMLConfig('meta.zcml', z3c.template)()\n  >>> xmlconfig.XMLConfig('configure.zcml', z3c.formui)()\n\nDiv IContentTemplate\n--------------------\n\nCreate some dummy form discriminators for calling div layout templates and\nmacros and check the div IContentTemplates:\n\n  >>> objects = (addForm, divRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate).filename\n  '...div-form.pt'\n\n  >>> objects = (form.DisplayForm(None, None), divRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate, '').filename\n  '...div-form-display.pt'\n\nWe offer the following named IContentTemplate:\n\n  >>> objects = (form.DisplayForm(None, None), divRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate,\n  ...     'display').filename\n  '...div-form-display.pt'\n\n  >>> objects = (form.DisplayForm(None, None), divRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate,\n  ...     'subform').filename\n  '...subform.pt'\n\n\nTable ILayoutTemplate\n---------------------\n\nThere is one generic layout template to build sub forms:\n\n  >>> objects = (form.DisplayForm(None, None), divRequest)\n  >>> zope.component.getMultiAdapter(objects, ILayoutTemplate,\n  ...     'subform').filename\n  '...subform-layout.pt'\n\n\nDiv layout macros\n-----------------\n\nWe have different form macros available for IInputForm:\n\n\n  >>> from z3c.macro.interfaces import IMacroTemplate\n  >>> objects = (None, addForm, divRequest)\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form')\n  [...div-form.pt'), ...metal:define-macro': u'form'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform')\n  [...div-form.pt'), ...define-macro': u'subform'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-label')\n  [...div-form.pt'), ...define-macro': u'label'...\n\n\n  >>> zope.component.getMultiAdapter(\n  ...     objects, IMacroTemplate, 'form-required-info')\n  [...div-form.pt'), ...define-macro', u'required-info'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-header')\n  [...div-form.pt'), ...define-macro': u'header'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-errors')\n  [...div-form.pt'), ...define-macro': u'errors'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'widget-rows')\n  [...div-form.pt'), ...define-macro': u'widget-rows'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'widget-row')\n  [...div-form.pt'), ...define-macro': u'widget-row'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-groups')\n  [...div-form.pt'), ...define-macro': u'groups'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-buttons')\n  [...div-form.pt'), ...define-macro', u'buttons'...\n\n\nAnd we have different form macros available for IDisplayForm:\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform-display')\n  [...div-form-display.pt'), ...define-macro': u'subform-display'...\n\n\nTable IContentTemplate\n----------------------\n\nCreate some dummy form discriminators for calling table layout templates and\nmacros and check the div IContentTemplates:\n\n  >>> objects = (addForm, tableRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate, '').filename\n  '...table-form.pt'\n\n  >>> objects = (form.DisplayForm(None, None), tableRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate, '').filename\n  '...table-form-display.pt'\n\nWe offer the following named IContentTemplate:\n\n  >>> objects = (form.DisplayForm(None, None), tableRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate,\n  ...     'display').filename\n  '...table-form-display.pt'\n\n  >>> objects = (form.DisplayForm(None, None), tableRequest)\n  >>> zope.component.getMultiAdapter(objects, IContentTemplate,\n  ...     'subform').filename\n  '...subform.pt'\n\n\n\nTable ILayoutTemplate\n---------------------\n\nThere is one generic layout template to build sub forms:\n\n  >>> objects = (form.DisplayForm(None, None), tableRequest)\n  >>> zope.component.getMultiAdapter(objects, ILayoutTemplate,\n  ...     'subform').filename\n  '...subform-layout.pt'\n\n\nTable layout macros\n-------------------\n\nWe have different form macros available for IInputForm:\n\n  >>> objects = (None, addForm, tableRequest)\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form')\n  [...table-form.pt'), ...metal:define-macro': u'form'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform')\n  [...table-form.pt'), ...define-macro': u'subform'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-label')\n  [...table-form.pt'), ...define-macro': u'label'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-required-info')\n  [...table-form.pt'), ...define-macro', u'required-info'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-header')\n  [...table-form.pt'), ...define-macro': u'header'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-errors')\n  [...table-form.pt'), ...define-macro': u'errors'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-table')\n  [...table-form.pt'), ...define-macro', u'formtable'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-row')\n  [...table-form.pt'), ...define-macro': u'formrow'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-label-cell')\n  [...table-form.pt'), ...define-macro', u'labelcell'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-widget-cell')\n  [...table-form.pt'), ...define-macro', u'widgetcell'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-groups')\n  [...table-form.pt'), ...define-macro': u'groups'...\n\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-buttons')\n  [...table-form.pt'), ...define-macro', u'buttons'...\n\n\nAnd we have different form macros available for IDisplayForm:\n\n  >>> zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform-display')\n  [...table-form-display.pt'), ...define-macro': u'subform-display'...\n\n\nSubform\n-------\n\nLet's give a quick overview how subform content and layout templates get used:\nFirst define a new form which uses the template getter methods offered\nfrom z3.template\n\n  >>> from z3c.template.template import getPageTemplate, getLayoutTemplate\n\nThe ``provider`` TALES expression which is a part of the lookup concept\nwas already registered by the testing setup, so we don't need to do it\nhere.\n\nand the TALES expression called ``macro`` which can lookup our macro adapters.\nYes, macros are adapters in our content/layout template concept. See z3c.macro\nfor more information about the implementation. However, we already registered\nthe ``macro`` type in the testing setup, as it's needed for rendering form\ntemplates.\n\nand at least we need a pagelet\nrenderer. By default we use the provider called ``PageletRenderer`` defined\nin the z3c.pagelet package. But right now, we don't have a dependency on\nthis package. So let's implement a simple renderer and use them as a\nIContentProvider:\n\n  >>> class PageletRenderer(object):\n  ...     zope.component.adapts(zope.interface.Interface,\n  ...         zope.publisher.interfaces.browser.IBrowserRequest,\n  ...         zope.interface.Interface)\n  ...\n  ...     def __init__(self, context, request, pagelet):\n  ...         self.__updated = False\n  ...         self.__parent__ = pagelet\n  ...         self.context = context\n  ...         self.request = request\n  ...\n  ...     def update(self):\n  ...         pass\n  ...\n  ...     def render(self):\n  ...         return self.__parent__.render()\n\n  >>> from zope.contentprovider.interfaces import IContentProvider\n  >>> zope.component.provideAdapter(PageletRenderer,\n  ...     provides=IContentProvider, name='pagelet')\n\nNow define the form:\n\n  >>> class PersonEditForm(form.EditForm):\n  ...     \"\"\"Edit form including layout support. See z3c.formui.form.\"\"\"\n  ...\n  ...     template = getPageTemplate('subform')\n  ...     layout = getLayoutTemplate('subform')\n  ...\n  ...     fields = field.Fields(IPerson)\n\nNow we can render the form with our previous created person instance:\n\n  >>> person = Person(u'Jessy', 6)\n  >>> editForm = PersonEditForm(person, divRequest)\n\nNow we call the form which will update and render it:\n\n  >>> print(editForm())\n  <div class=\"viewspace\">\n    <div class=\"required-info\">\n      <span class=\"required\">*</span>\n      &ndash; required\n    </div>\n    <div>\n      <div id=\"form-widgets-name-row\" class=\"row required\">\n        <div class=\"label\">\n          <label for=\"form-widgets-name\">\n            <span>Name</span>\n            <span class=\"required\">*</span>\n          </label>\n        </div>\n        <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n             name=\"form.widgets.name\"\n             class=\"text-widget required textline-field\"\n             value=\"Jessy\" />\n        </div>\n      </div>\n      <div id=\"form-widgets-age-row\" class=\"row\">\n        <div class=\"label\">\n          <label for=\"form-widgets-age\">\n            <span>Age</span>\n          </label>\n        </div>\n        <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n           name=\"form.widgets.age\" class=\"text-widget int-field\"\n           value=\"6\" />\n        </div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <div class=\"buttons\">\n      <input type=\"submit\" id=\"form-buttons-apply\"\n             name=\"form.buttons.apply\"\n             class=\"submit-widget button-field\" value=\"Apply\" />\n    </div>\n  </div>\n\nYou can see that the form above is a real subform. It doesn't define the form\ntag which makes it usable as a subform in parent forms.\n\nOf course this works with table layout based forms too. Let's use our table\nrequest and render the form again:\n\n  >>> editForm = PersonEditForm(person, tableRequest)\n  >>> print(editForm())\n  <div class=\"viewspace\">\n    <div class=\"required-info\">\n      <span class=\"required\">*</span>\n      &ndash; required\n    </div>\n    <div>\n      <table class=\"form-fields\">\n        <tr class=\"row required\">\n          <td class=\"label\">\n            <label for=\"form-widgets-name\">\n              <span>Name</span>\n              <span class=\"required\"> * </span>\n            </label>\n          </td>\n          <td class=\"field\">\n            <div class=\"widget\"><input type=\"text\" id=\"form-widgets-name\"\n                 name=\"form.widgets.name\"\n                 class=\"text-widget required textline-field\"\n                 value=\"Jessy\" />\n            </div>\n          </td>\n        </tr>\n        <tr class=\"row\">\n          <td class=\"label\">\n            <label for=\"form-widgets-age\">\n              <span>Age</span>\n            </label>\n          </td>\n          <td class=\"field\">\n            <div class=\"widget\"><input type=\"text\" id=\"form-widgets-age\"\n                 name=\"form.widgets.age\" class=\"text-widget int-field\"\n                 value=\"6\" />\n            </div>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div>\n    <div class=\"buttons\">\n      <input type=\"submit\" id=\"form-buttons-apply\"\n             name=\"form.buttons.apply\"\n            class=\"submit-widget button-field\" value=\"Apply\" />\n    </div>\n  </div>\n\nRedirection\n-----------\n\nThe form doesn't bother rendering itself and its layout when\nrequest is a redirection as the rendering doesn't make any sense with\nbrowser requests in that case. Let's create a view that does a\nredirection in its update method:\n\n >>> class RedirectingView(PersonEditForm):\n ...     def update(self):\n ...         super(RedirectingView, self).update()\n ...         self.request.response.redirect('.')\n\nIt will return an empty string when called as a browser page.\n\n >>> redirectView = RedirectingView(person, divRequest)\n >>> redirectView() == ''\n True\n\nHowever, the ``render`` method will render form's template as usual:\n\n >>> '<div class=\"viewspace\">' in redirectView.render()\n True\n\nThe same thing should work for AddForms:\n\n >>> class RedirectingAddView(PersonAddForm):\n ...     def update(self):\n ...         super(RedirectingAddView, self).update()\n ...         self.request.response.redirect('.')\n >>> redirectView = RedirectingAddView(person, divRequest)\n >>> redirectView() == ''\n True\n\nNo required fields\n------------------\n\nIf there no required fields in the form, standard templates won't render\nthe \"required-info\" hint.\n\n  >>> class IAdditionalInfo(zope.interface.Interface):\n  ...\n  ...     location = zope.schema.TextLine(title=u'Location', required=False)\n  ...     about = zope.schema.Text(title=u'About', required=False)\n\n  >>> class AdditionalInfoForm(form.AddForm):\n  ...\n  ...     fields = field.Fields(IAdditionalInfo)\n\n  >>> additionalInfoForm = AdditionalInfoForm(root, divRequest)\n  >>> additionalInfoForm.update()\n  >>> '<div class=\"required-info\">' in additionalInfoForm.render()\n  False\n\n  >>> additionalInfoForm = AdditionalInfoForm(root, tableRequest)\n  >>> additionalInfoForm.update()\n  >>> '<div class=\"required-info\">' in additionalInfoForm.render()\n  False\n\nCleanup\n-------\n\n  >>> import shutil\n  >>> shutil.rmtree(temp_dir)\n\n\n=======\nCHANGES\n=======\n\n3.1 (2018-11-15)\n----------------\n\n- Added support for Python 3.4, 3.5, 3.6, 3.7.\n\n- Dropped support for Python 2.6 and 3.3.\n\n\n3.0.0 (2015-11-09)\n------------------\n\n- Standardize namespace __init__\n\n- Split config, mostly to be able to include in pyramid without browser\n  resources and viewlets\n\n\n3.0.0a2 (2013-02-26)\n--------------------\n\n- Added missing version Trove classifiers.\n\n\n3.0.0a1 (2013-02-25)\n--------------------\n\n- Added support for Python 3.3.\n\n- Dropped support for Python 2.4 and 2.5.\n\n\n2.3.0 (2012-03-15)\n------------------\n\n- Feature: Mark a widget row with the \"required\" class when the widget is\n  required. Similarly, when the widget has an error attached, add the \"error\"\n  class to the widget row. That allows you to change the styles of the label\n  and the widget if it is reuqired.\n\n\n2.2.1 (2012-01-09)\n------------------\n\n- No longer using deprecated ``zope.testing.doctest`` but built-in\n  ``doctest`` instead.\n\n- Fixed tests so they do not break for `z3c.form` 2.5.0.\n\n\n2.2.0 (2009-12-28)\n------------------\n\n- Fixed tests so they do not break for `z3c.form` 2.2.0.\n\n- Using ``requiredInfo`` property (introduced in `z3c.form` 2.0.0) to\n  render the information about required fields. This property returns\n  an i18n message id making the information translateable.\n\n- Added support for groups containing groups: They get displayed now.\n\n2.1.0 (2009-09-01)\n------------------\n\n- Feature: Don't show required info hint if there's no required fields.\n\n- Bug: Don't render add forms when redirecting as well.\n\n- Bug: Fix redirection tests with newer zope.publisher that restricts\n  untrusted redirects to different domains.\n\n2.0.0 (2009-06-14)\n------------------\n\n- Feature: Added support for context-specific template lookup, introduced in\n  `z3c.template` 1.2.0 - templates can now be registered using (view, request,\n  context) discriminator.\n\n- Feature: Added support for `z3c.pt` templates using `z3c.ptcompat`\n  compatibility package.\n\n- Feature: Added layout support for `IAdding` component based add forms.\n\n- Feature: Added CSS for multi-widget which was added in `z3c.form` 2.0.0.\n\n- Bug: Changed usage of ``template/macros/*`` to ``macro:*``, because the\n  first one doesn't work when we override a form template and use the form\n  macro, registered with this package.\n\n- Bug: Don't do rendering in form's `__call__` method when request is a\n  redirection.\n\n- Bug: Reformatted long-description to render properly on pypi.\n\n\n1.4.2 (2008-08-26)\n------------------\n\n- Bug: Corrected typos and unwanted unicode characters.\n\n\n1.4.1 (2008-01-23)\n------------------\n\n- Bug: Fixed up meta-data and the release.\n\n\n1.4.0 (2008-01-21)\n------------------\n\n- Feature: Added subform content and layout template. This allows you to\n  configure real sub forms which do not render the form tag.\n\n- Feature: Improve layout implementation, support built-in layout templates.\n\n- Feature: Use ``IContentTemplate`` instead of ``IPageTemplate`` in layout\n  base classes. This will help to prevent running into recursion errors if\n  there is a missing layout template.\n\n- Feature: Added form module which offers built-in layout support.\n\n- Bug: Added missing display ``IContentTemplate``, otherwise we can run into a\n  recursion in some cases.\n\n- Bug: Renamed table macro argument from ``form-required-info`` to\n  ``required-info``. The macro ``form-required-info`` did not exist.\n\n- Bug: Added unit tests for layout support.\n\n- Bug: Added tests for layout macros.\n\n- Bug: Added tests for layout templates.\n\n\n1.3.0 (2007-08-24)\n------------------\n\n- Refactoring: Update CSS classes to reflect latest changes to the widget\n  classes in ``z3c.form``.\n\n- Bug: Error view snippets may have a empty ``widget`` attribute values, so we\n  cannot rely on accessing the label of the widget. This is the case, if the\n  error view sniipet was created from an invariants validation error.\n\n- Bug: The table-form template did not properly render the error at the\n  widget, because the ``render()`` method was not called. Thanks to Markus\n  Leist for the report.\n\n\n1.2.0 (2007-07-18)\n------------------\n\n- Feature: The row div element now also has an id of the form\n  \"<widget-id>-row\".\n\n\n1.1.1 (2007-07-04)\n------------------\n\n- Refactoring: Split up registrations for simpler management of UI\n  components. This also makes it easier to see for developers how to create a\n  new template for forms.\n\n\n1.1.0 (2007-06-29)\n------------------\n\n- Feature: Registered all defined macros for each form template. Also, added\n  more slots to the templates providing more hooks for customization.\n\n- Feature: Added a macro/slot for the \"required info\", which explains how\n  required fields are marked.\n\n- Feature: Added support for form labels.\n\n- Feature: Added support for groups to templates.\n\n\n1.0.1 (2007-06-22)\n------------------\n\n- Bug: Make sure we use the id for the \"for\" attribute of the \"label\"\n  element and not the name. This has worked until recently, because the\n  name and id were the same, but they are different now.\n\n\n1.0.0 (2007-05-24)\n------------------\n\n- Initial Release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/z3c.formui", "keywords": "zope3 form widget", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "z3c.formui", "package_url": "https://pypi.org/project/z3c.formui/", "platform": "", "project_url": "https://pypi.org/project/z3c.formui/", "project_urls": {"Homepage": "https://github.com/zopefoundation/z3c.formui"}, "release_url": "https://pypi.org/project/z3c.formui/3.1/", "requires_dist": ["setuptools", "z3c.form (>=2.2.0)", "z3c.macro", "z3c.template", "zope.component", "zope.publisher", "zope.viewlet", "z3c.form[test]; extra == 'test'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "A set of initial UI components for z3c.form.", "version": "3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a set of default layouts for the <tt>z3c.form</tt>\nframework. In particular it provides a DIV-based and a TABLE-based layout. The\ndeveloper can use either layout by inheriting from a different base layer.</p>\n<p>The package also has some support for layout/pagelet templates.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#form-user-interfaces\" id=\"id18\" rel=\"nofollow\">Form User Interfaces</a><ul>\n<li><a href=\"#layout-template-support\" id=\"id19\" rel=\"nofollow\">Layout Template Support</a></li>\n<li><a href=\"#div-based-layout\" id=\"id20\" rel=\"nofollow\">DIV-based Layout</a></li>\n<li><a href=\"#table-based-forms\" id=\"id21\" rel=\"nofollow\">Table-based Forms</a></li>\n<li><a href=\"#addform-rendering-for-iadding\" id=\"id22\" rel=\"nofollow\"><cite>AddForm</cite> rendering for <cite>IAdding</cite></a></li>\n<li><a href=\"#form-macros\" id=\"id23\" rel=\"nofollow\">Form Macros</a></li>\n<li><a href=\"#div-icontenttemplate\" id=\"id24\" rel=\"nofollow\">Div IContentTemplate</a></li>\n<li><a href=\"#table-ilayouttemplate\" id=\"id25\" rel=\"nofollow\">Table ILayoutTemplate</a></li>\n<li><a href=\"#div-layout-macros\" id=\"id26\" rel=\"nofollow\">Div layout macros</a></li>\n<li><a href=\"#table-icontenttemplate\" id=\"id27\" rel=\"nofollow\">Table IContentTemplate</a></li>\n<li><a href=\"#id1\" id=\"id28\" rel=\"nofollow\">Table ILayoutTemplate</a></li>\n<li><a href=\"#table-layout-macros\" id=\"id29\" rel=\"nofollow\">Table layout macros</a></li>\n<li><a href=\"#subform\" id=\"id30\" rel=\"nofollow\">Subform</a></li>\n<li><a href=\"#redirection\" id=\"id31\" rel=\"nofollow\">Redirection</a></li>\n<li><a href=\"#no-required-fields\" id=\"id32\" rel=\"nofollow\">No required fields</a></li>\n<li><a href=\"#cleanup\" id=\"id33\" rel=\"nofollow\">Cleanup</a></li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id34\" rel=\"nofollow\">CHANGES</a><ul>\n<li><a href=\"#id2\" id=\"id35\" rel=\"nofollow\">3.1 (2018-11-15)</a></li>\n<li><a href=\"#id3\" id=\"id36\" rel=\"nofollow\">3.0.0 (2015-11-09)</a></li>\n<li><a href=\"#a2-2013-02-26\" id=\"id37\" rel=\"nofollow\">3.0.0a2 (2013-02-26)</a></li>\n<li><a href=\"#a1-2013-02-25\" id=\"id38\" rel=\"nofollow\">3.0.0a1 (2013-02-25)</a></li>\n<li><a href=\"#id4\" id=\"id39\" rel=\"nofollow\">2.3.0 (2012-03-15)</a></li>\n<li><a href=\"#id5\" id=\"id40\" rel=\"nofollow\">2.2.1 (2012-01-09)</a></li>\n<li><a href=\"#id6\" id=\"id41\" rel=\"nofollow\">2.2.0 (2009-12-28)</a></li>\n<li><a href=\"#id7\" id=\"id42\" rel=\"nofollow\">2.1.0 (2009-09-01)</a></li>\n<li><a href=\"#id8\" id=\"id43\" rel=\"nofollow\">2.0.0 (2009-06-14)</a></li>\n<li><a href=\"#id9\" id=\"id44\" rel=\"nofollow\">1.4.2 (2008-08-26)</a></li>\n<li><a href=\"#id10\" id=\"id45\" rel=\"nofollow\">1.4.1 (2008-01-23)</a></li>\n<li><a href=\"#id11\" id=\"id46\" rel=\"nofollow\">1.4.0 (2008-01-21)</a></li>\n<li><a href=\"#id12\" id=\"id47\" rel=\"nofollow\">1.3.0 (2007-08-24)</a></li>\n<li><a href=\"#id13\" id=\"id48\" rel=\"nofollow\">1.2.0 (2007-07-18)</a></li>\n<li><a href=\"#id14\" id=\"id49\" rel=\"nofollow\">1.1.1 (2007-07-04)</a></li>\n<li><a href=\"#id15\" id=\"id50\" rel=\"nofollow\">1.1.0 (2007-06-29)</a></li>\n<li><a href=\"#id16\" id=\"id51\" rel=\"nofollow\">1.0.1 (2007-06-22)</a></li>\n<li><a href=\"#id17\" id=\"id52\" rel=\"nofollow\">1.0.0 (2007-05-24)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"form-user-interfaces\">\n<h2><a href=\"#id18\" rel=\"nofollow\">Form User Interfaces</a></h2>\n<p>This package provides several useful templates to get a quick start with the\n<tt>z3c.form</tt> package. Previous form frameworks always included default\ntemplates that were implemented in a particular user-interface development\npattern. If you wanted to use an alternative strategy to develop user\ninterfaces, it was often tedious to do so. This package aims to provide some\noptions without requiring them for the basic framework.</p>\n<div id=\"layout-template-support\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Layout Template Support</a></h3>\n<p>One common pattern in Zope 3 user interface development is the use of layout\ntemplates (see z3c.template). This package provides some mixin classes to the\nregular form classes to support layout-based templating.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.form import testing\n&gt;&gt;&gt; testing.setupFormDefaults()\n</pre>\n</blockquote>\n<p>Before we can start writing forms, we must have the content to work with:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; import zope.schema\n&gt;&gt;&gt; class IPerson(zope.interface.Interface):\n...\n...     name = zope.schema.TextLine(\n...         title=u'Name',\n...         required=True)\n...\n...     age = zope.schema.Int(\n...         title=u'Age',\n...         description=u\"The person's age.\",\n...         min=0,\n...         default=20,\n...         required=False)\n</pre>\n<pre>&gt;&gt;&gt; from zope.schema.fieldproperty import FieldProperty\n&gt;&gt;&gt; @zope.interface.implementer(IPerson)\n... class Person(object):\n...     name = FieldProperty(IPerson['name'])\n...     age = FieldProperty(IPerson['age'])\n...\n...     def __init__(self, name, age):\n...         self.name = name\n...         self.age = age\n...\n...     def __repr__(self):\n...         return '&lt;%s %r&gt;' % (self.__class__.__name__, self.name)\n</pre>\n</blockquote>\n<p>Okay, that should suffice for now. Let\u2019s now create a working add form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.form import field\n&gt;&gt;&gt; from z3c.formui import form, layout\n&gt;&gt;&gt; class PersonAddForm(form.AddForm):\n...\n...     fields = field.Fields(IPerson)\n...\n...     def create(self, data):\n...         return Person(**data)\n...\n...     def add(self, object):\n...         self.context[object.id] = object\n...\n...     def nextURL(self):\n...         return 'index.html'\n</pre>\n</blockquote>\n<p>Let\u2019s create a request:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.form.testing import TestRequest\n&gt;&gt;&gt; from zope.interface import alsoProvides\n&gt;&gt;&gt; divRequest = TestRequest()\n</pre>\n</blockquote>\n<p>And support the div form layer for our request:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.formui.interfaces import IDivFormLayer\n&gt;&gt;&gt; alsoProvides(divRequest, IDivFormLayer)\n</pre>\n</blockquote>\n<p>Now create the form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; addForm = PersonAddForm(root, divRequest)\n</pre>\n</blockquote>\n<p>Since we have not specified a template yet, we have to do this now. We use our\ndiv based form template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; import z3c.formui\n&gt;&gt;&gt; divFormTemplate = os.path.join(os.path.dirname(z3c.formui.__file__),\n...     'div-form.pt')\n</pre>\n<pre>&gt;&gt;&gt; from z3c.template.template import TemplateFactory\n&gt;&gt;&gt; divFormFactory = TemplateFactory(divFormTemplate, 'text/html')\n</pre>\n</blockquote>\n<p>Now register the form (content) template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; from z3c.template.interfaces import IContentTemplate\n&gt;&gt;&gt; zope.component.provideAdapter(divFormFactory,\n...     (zope.interface.Interface, IDivFormLayer),\n...     IContentTemplate)\n</pre>\n</blockquote>\n<p>And let\u2019s define a layout template which simply calls the render method. For a\nmore advanced content/layout render concept see z3c.pagelet.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; temp_dir = tempfile.mkdtemp()\n</pre>\n<pre>&gt;&gt;&gt; myLayout = os.path.join(temp_dir, 'myLayout.pt')\n&gt;&gt;&gt; with open(myLayout, 'w') as file:\n...     _ = file.write('''&lt;html&gt;\n...   &lt;body&gt;\n...     &lt;tal:block content=\"structure view/render\"&gt;\n...       content\n...     &lt;/tal:block&gt;\n...   &lt;/body&gt;\n... &lt;/html&gt;''')\n&gt;&gt;&gt; myLayoutFactory = TemplateFactory(myLayout, 'text/html')\n</pre>\n<pre>&gt;&gt;&gt; from z3c.template.interfaces import ILayoutTemplate\n&gt;&gt;&gt; zope.component.provideAdapter(myLayoutFactory,\n...     (zope.interface.Interface, zope.interface.Interface), ILayoutTemplate)\n</pre>\n</blockquote>\n<p>Now we can get our layout template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; layout = zope.component.getMultiAdapter((addForm, divRequest),\n...     ILayoutTemplate)\n</pre>\n<pre>&gt;&gt;&gt; layout.__class__.__name__\n'ViewPageTemplateFile'\n</pre>\n<pre>&gt;&gt;&gt; os.path.basename(layout.filename)\n'myLayout.pt'\n</pre>\n</blockquote>\n</div>\n<div id=\"div-based-layout\">\n<h3><a href=\"#id20\" rel=\"nofollow\">DIV-based Layout</a></h3>\n<p>Let\u2019s now render the page. Note the output doesn\u2019t contain the layout template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; addForm.update()\n&gt;&gt;&gt; print(addForm.render())\n&lt;form action=\"http://127.0.0.1\" method=\"post\"\n        enctype=\"multipart/form-data\" class=\"edit-form\"\n        name=\"form\" id=\"form\"&gt;\n  &lt;div class=\"viewspace\"&gt;\n    &lt;div class=\"required-info\"&gt;\n      &lt;span class=\"required\"&gt;*&lt;/span&gt; &amp;ndash; required\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;div id=\"form-widgets-name-row\" class=\"row required\"&gt;\n        &lt;div class=\"label\"&gt;\n          &lt;label for=\"form-widgets-name\"&gt;\n            &lt;span&gt;Name&lt;/span&gt;\n            &lt;span class=\"required\"&gt;*&lt;/span&gt;\n          &lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n                 name=\"form.widgets.name\"\n                 class=\"text-widget required textline-field\" value=\"\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div id=\"form-widgets-age-row\" class=\"row\"&gt;\n        &lt;div class=\"label\"&gt;\n          &lt;label for=\"form-widgets-age\"&gt;\n            &lt;span&gt;Age&lt;/span&gt;\n          &lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n                 name=\"form.widgets.age\" class=\"text-widget int-field\"\n                 value=\"20\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"buttons\"&gt;\n      &lt;input type=\"submit\" id=\"form-buttons-add\"\n             name=\"form.buttons.add\"\n             class=\"submit-widget button-field\" value=\"Add\" /&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</pre>\n</blockquote>\n<p>But we can call our form which uses the new layout template which renders\nthe form within the div-form content template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print(addForm())\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;form action=\"http://127.0.0.1\" method=\"post\"\n      enctype=\"multipart/form-data\" class=\"edit-form\"\n      name=\"form\" id=\"form\"&gt;\n      &lt;div class=\"viewspace\"&gt;\n        &lt;div class=\"required-info\"&gt;\n          &lt;span class=\"required\"&gt;*&lt;/span&gt;\n          &amp;ndash; required\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;div id=\"form-widgets-name-row\" class=\"row required\"&gt;\n            &lt;div class=\"label\"&gt;\n              &lt;label for=\"form-widgets-name\"&gt;\n                &lt;span&gt;Name&lt;/span&gt;\n                &lt;span class=\"required\"&gt;*&lt;/span&gt;\n              &lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n                 name=\"form.widgets.name\"\n                 class=\"text-widget required textline-field\" value=\"\" /&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div id=\"form-widgets-age-row\" class=\"row\"&gt;\n            &lt;div class=\"label\"&gt;\n              &lt;label for=\"form-widgets-age\"&gt;\n                &lt;span&gt;Age&lt;/span&gt;\n              &lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n                 name=\"form.widgets.age\" class=\"text-widget int-field\"\n                 value=\"20\" /&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div class=\"buttons\"&gt;\n          &lt;input type=\"submit\" id=\"form-buttons-add\"\n           name=\"form.buttons.add\"\n           class=\"submit-widget button-field\" value=\"Add\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"table-based-forms\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Table-based Forms</a></h3>\n<p>There is a table based layout too. Let\u2019s define the template and use them:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.formui.interfaces import ITableFormLayer\n&gt;&gt;&gt; tableFormTemplate = os.path.join(os.path.dirname(z3c.formui.__file__),\n...     'table-form.pt')\n</pre>\n<pre>&gt;&gt;&gt; from z3c.template.template import TemplateFactory\n&gt;&gt;&gt; tableFormFactory = TemplateFactory(tableFormTemplate, 'text/html')\n</pre>\n</blockquote>\n<p>Now register the form (content) template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.provideAdapter(tableFormFactory,\n...     (zope.interface.Interface, ITableFormLayer), IContentTemplate)\n</pre>\n</blockquote>\n<p>Patch the request and call the form again:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; tableRequest = TestRequest()\n&gt;&gt;&gt; alsoProvides(tableRequest, ITableFormLayer)\n</pre>\n</blockquote>\n<p>Now our new request should know the table based form template:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; addForm = PersonAddForm(root, tableRequest)\n&gt;&gt;&gt; print(addForm())\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;form action=\"http://127.0.0.1\" method=\"post\"\n      enctype=\"multipart/form-data\" class=\"edit-form\"\n      name=\"form\" id=\"form\"&gt;\n      &lt;div class=\"viewspace\"&gt;\n        &lt;div class=\"required-info\"&gt;\n          &lt;span class=\"required\"&gt;*&lt;/span&gt;\n          &amp;ndash; required\n        &lt;/div&gt;\n        &lt;div&gt;\n        &lt;table class=\"form-fields\"&gt;\n              &lt;tr class=\"row required\"&gt;\n                &lt;td class=\"label\"&gt;\n                  &lt;label for=\"form-widgets-name\"&gt;\n                    &lt;span&gt;Name&lt;/span&gt;\n                    &lt;span class=\"required\"&gt; * &lt;/span&gt;\n                  &lt;/label&gt;\n                &lt;/td&gt;\n                &lt;td class=\"field\"&gt;\n                  &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n                       name=\"form.widgets.name\"\n                       class=\"text-widget required textline-field\" value=\"\" /&gt;\n                  &lt;/div&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n              &lt;tr class=\"row\"&gt;\n                &lt;td class=\"label\"&gt;\n                  &lt;label for=\"form-widgets-age\"&gt;\n                    &lt;span&gt;Age&lt;/span&gt;\n                  &lt;/label&gt;\n                &lt;/td&gt;\n                &lt;td class=\"field\"&gt;\n                  &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n                       name=\"form.widgets.age\" class=\"text-widget int-field\"\n                       value=\"20\" /&gt;\n                  &lt;/div&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n        &lt;/table&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;div class=\"buttons\"&gt;\n        &lt;input type=\"submit\" id=\"form-buttons-add\"\n       name=\"form.buttons.add\"\n       class=\"submit-widget button-field\" value=\"Add\" /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"addform-rendering-for-iadding\">\n<h3><a href=\"#id22\" rel=\"nofollow\"><cite>AddForm</cite> rendering for <cite>IAdding</cite></a></h3>\n<p>The <cite>z3c.formui</cite> package also provides a layout-aware version of\n<cite>z3c.form.adding.AddForm</cite> which can be used for creating forms for the\n<cite>zope.app.container.interfaces.IAdding</cite> mechanism.</p>\n<p>Let\u2019s check its template support. First, create the form for an <cite>Adding</cite>\ninstance. We just need to define the <tt>create()</tt> method, because the default\n<tt>add()</tt> and <tt>nextURL()</tt> methods are already defined using the <cite>Adding</cite>\nobject.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.formui import adding\n&gt;&gt;&gt; class AddingPersonAddForm(adding.AddForm):\n...\n...     fields = field.Fields(IPerson)\n...\n...     def create(self, data):\n...         return Person(**data)\n</pre>\n</blockquote>\n<p>Let\u2019s now instantiate the \u201cfake\u201d adding component and the add form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Adding(object):\n...     def __init__(self, context, request):\n...         self.context = context\n...         self.request = request\n&gt;&gt;&gt; rootAdding = Adding(root, divRequest)\n</pre>\n<pre>&gt;&gt;&gt; addForm = AddingPersonAddForm(rootAdding, divRequest)\n</pre>\n</blockquote>\n<p>First, let\u2019s ensure that we can lookup a layout template for the form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; layout = zope.component.getMultiAdapter(\n...     (addForm, divRequest), ILayoutTemplate)\n</pre>\n<pre>&gt;&gt;&gt; layout.__class__.__name__\n'ViewPageTemplateFile'\n</pre>\n</blockquote>\n<p>Okay, that worked. Let\u2019s now render the div-based addform:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print(addForm())\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;form action=\"http://127.0.0.1\" method=\"post\"\n      enctype=\"multipart/form-data\" class=\"edit-form\"\n      name=\"form\" id=\"form\"&gt;\n      &lt;div class=\"viewspace\"&gt;\n        &lt;div class=\"required-info\"&gt;\n          &lt;span class=\"required\"&gt;*&lt;/span&gt;\n          &amp;ndash; required\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;div id=\"form-widgets-name-row\" class=\"row required\"&gt;\n            &lt;div class=\"label\"&gt;\n              &lt;label for=\"form-widgets-name\"&gt;\n                &lt;span&gt;Name&lt;/span&gt;\n                &lt;span class=\"required\"&gt;*&lt;/span&gt;\n              &lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n                 name=\"form.widgets.name\"\n                 class=\"text-widget required textline-field\" value=\"\" /&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div id=\"form-widgets-age-row\" class=\"row\"&gt;\n            &lt;div class=\"label\"&gt;\n              &lt;label for=\"form-widgets-age\"&gt;\n                &lt;span&gt;Age&lt;/span&gt;\n              &lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n                 name=\"form.widgets.age\" class=\"text-widget int-field\"\n                 value=\"20\" /&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div class=\"buttons\"&gt;\n          &lt;input type=\"submit\" id=\"form-buttons-add\"\n           name=\"form.buttons.add\"\n           class=\"submit-widget button-field\" value=\"Add\" /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</blockquote>\n<p>Okay, now we are going to check table layout support.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rootAdding = Adding(root, tableRequest)\n&gt;&gt;&gt; addForm = AddingPersonAddForm(rootAdding, tableRequest)\n</pre>\n</blockquote>\n<p>Again, the layout should be available:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; layout = zope.component.getMultiAdapter((addForm, tableRequest),\n...     ILayoutTemplate)\n</pre>\n<pre>&gt;&gt;&gt; layout.__class__.__name__\n'ViewPageTemplateFile'\n</pre>\n</blockquote>\n<p>Let\u2019s now render the form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print(addForm())\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;form action=\"http://127.0.0.1\" method=\"post\"\n      enctype=\"multipart/form-data\" class=\"edit-form\"\n      name=\"form\" id=\"form\"&gt;\n      &lt;div class=\"viewspace\"&gt;\n        &lt;div class=\"required-info\"&gt;\n          &lt;span class=\"required\"&gt;*&lt;/span&gt;\n          &amp;ndash; required\n        &lt;/div&gt;\n        &lt;div&gt;\n        &lt;table class=\"form-fields\"&gt;\n              &lt;tr class=\"row required\"&gt;\n                &lt;td class=\"label\"&gt;\n                  &lt;label for=\"form-widgets-name\"&gt;\n                    &lt;span&gt;Name&lt;/span&gt;\n                    &lt;span class=\"required\"&gt; * &lt;/span&gt;\n                  &lt;/label&gt;\n                &lt;/td&gt;\n                &lt;td class=\"field\"&gt;\n                  &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n                       name=\"form.widgets.name\"\n                       class=\"text-widget required textline-field\" value=\"\" /&gt;\n                  &lt;/div&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n              &lt;tr class=\"row\"&gt;\n                &lt;td class=\"label\"&gt;\n                  &lt;label for=\"form-widgets-age\"&gt;\n                    &lt;span&gt;Age&lt;/span&gt;\n                  &lt;/label&gt;\n                &lt;/td&gt;\n                &lt;td class=\"field\"&gt;\n                  &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n                       name=\"form.widgets.age\" class=\"text-widget int-field\"\n                       value=\"20\" /&gt;\n                  &lt;/div&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n        &lt;/table&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;div class=\"buttons\"&gt;\n        &lt;input type=\"submit\" id=\"form-buttons-add\"\n       name=\"form.buttons.add\"\n       class=\"submit-widget button-field\" value=\"Add\" /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"form-macros\">\n<h3><a href=\"#id23\" rel=\"nofollow\">Form Macros</a></h3>\n<p>Load the configuration, which will make sure that all macros get registered\ncorrectly:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; import zope.viewlet\n&gt;&gt;&gt; import zope.security\n&gt;&gt;&gt; import zope.publisher\n&gt;&gt;&gt; import zope.browserresource\n&gt;&gt;&gt; import z3c.macro\n&gt;&gt;&gt; import z3c.template\n&gt;&gt;&gt; import z3c.formui\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', zope.component)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', zope.viewlet)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', zope.security)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', zope.publisher)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', zope.browserresource)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', z3c.macro)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', z3c.template)()\n&gt;&gt;&gt; xmlconfig.XMLConfig('configure.zcml', z3c.formui)()\n</pre>\n</blockquote>\n</div>\n<div id=\"div-icontenttemplate\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Div IContentTemplate</a></h3>\n<p>Create some dummy form discriminators for calling div layout templates and\nmacros and check the div IContentTemplates:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (addForm, divRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate).filename\n'...div-form.pt'\n</pre>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), divRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate, '').filename\n'...div-form-display.pt'\n</pre>\n</blockquote>\n<p>We offer the following named IContentTemplate:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), divRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate,\n...     'display').filename\n'...div-form-display.pt'\n</pre>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), divRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate,\n...     'subform').filename\n'...subform.pt'\n</pre>\n</blockquote>\n</div>\n<div id=\"table-ilayouttemplate\">\n<h3><a href=\"#id25\" rel=\"nofollow\">Table ILayoutTemplate</a></h3>\n<p>There is one generic layout template to build sub forms:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), divRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, ILayoutTemplate,\n...     'subform').filename\n'...subform-layout.pt'\n</pre>\n</blockquote>\n</div>\n<div id=\"div-layout-macros\">\n<h3><a href=\"#id26\" rel=\"nofollow\">Div layout macros</a></h3>\n<p>We have different form macros available for IInputForm:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.macro.interfaces import IMacroTemplate\n&gt;&gt;&gt; objects = (None, addForm, divRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form')\n[...div-form.pt'), ...metal:define-macro': u'form'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform')\n[...div-form.pt'), ...define-macro': u'subform'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-label')\n[...div-form.pt'), ...define-macro': u'label'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(\n...     objects, IMacroTemplate, 'form-required-info')\n[...div-form.pt'), ...define-macro', u'required-info'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-header')\n[...div-form.pt'), ...define-macro': u'header'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-errors')\n[...div-form.pt'), ...define-macro': u'errors'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'widget-rows')\n[...div-form.pt'), ...define-macro': u'widget-rows'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'widget-row')\n[...div-form.pt'), ...define-macro': u'widget-row'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-groups')\n[...div-form.pt'), ...define-macro': u'groups'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-buttons')\n[...div-form.pt'), ...define-macro', u'buttons'...\n</pre>\n</blockquote>\n<p>And we have different form macros available for IDisplayForm:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform-display')\n[...div-form-display.pt'), ...define-macro': u'subform-display'...\n</pre>\n</blockquote>\n</div>\n<div id=\"table-icontenttemplate\">\n<h3><a href=\"#id27\" rel=\"nofollow\">Table IContentTemplate</a></h3>\n<p>Create some dummy form discriminators for calling table layout templates and\nmacros and check the div IContentTemplates:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (addForm, tableRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate, '').filename\n'...table-form.pt'\n</pre>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), tableRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate, '').filename\n'...table-form-display.pt'\n</pre>\n</blockquote>\n<p>We offer the following named IContentTemplate:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), tableRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate,\n...     'display').filename\n'...table-form-display.pt'\n</pre>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), tableRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IContentTemplate,\n...     'subform').filename\n'...subform.pt'\n</pre>\n</blockquote>\n</div>\n<div id=\"id1\">\n<h3><a href=\"#id28\" rel=\"nofollow\">Table ILayoutTemplate</a></h3>\n<p>There is one generic layout template to build sub forms:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (form.DisplayForm(None, None), tableRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, ILayoutTemplate,\n...     'subform').filename\n'...subform-layout.pt'\n</pre>\n</blockquote>\n</div>\n<div id=\"table-layout-macros\">\n<h3><a href=\"#id29\" rel=\"nofollow\">Table layout macros</a></h3>\n<p>We have different form macros available for IInputForm:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; objects = (None, addForm, tableRequest)\n&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form')\n[...table-form.pt'), ...metal:define-macro': u'form'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform')\n[...table-form.pt'), ...define-macro': u'subform'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-label')\n[...table-form.pt'), ...define-macro': u'label'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-required-info')\n[...table-form.pt'), ...define-macro', u'required-info'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-header')\n[...table-form.pt'), ...define-macro': u'header'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-errors')\n[...table-form.pt'), ...define-macro': u'errors'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-table')\n[...table-form.pt'), ...define-macro', u'formtable'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-row')\n[...table-form.pt'), ...define-macro': u'formrow'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-label-cell')\n[...table-form.pt'), ...define-macro', u'labelcell'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-widget-cell')\n[...table-form.pt'), ...define-macro', u'widgetcell'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-groups')\n[...table-form.pt'), ...define-macro': u'groups'...\n</pre>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'form-buttons')\n[...table-form.pt'), ...define-macro', u'buttons'...\n</pre>\n</blockquote>\n<p>And we have different form macros available for IDisplayForm:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.component.getMultiAdapter(objects, IMacroTemplate, 'subform-display')\n[...table-form-display.pt'), ...define-macro': u'subform-display'...\n</pre>\n</blockquote>\n</div>\n<div id=\"subform\">\n<h3><a href=\"#id30\" rel=\"nofollow\">Subform</a></h3>\n<p>Let\u2019s give a quick overview how subform content and layout templates get used:\nFirst define a new form which uses the template getter methods offered\nfrom z3.template</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.template.template import getPageTemplate, getLayoutTemplate\n</pre>\n</blockquote>\n<p>The <tt>provider</tt> TALES expression which is a part of the lookup concept\nwas already registered by the testing setup, so we don\u2019t need to do it\nhere.</p>\n<p>and the TALES expression called <tt>macro</tt> which can lookup our macro adapters.\nYes, macros are adapters in our content/layout template concept. See z3c.macro\nfor more information about the implementation. However, we already registered\nthe <tt>macro</tt> type in the testing setup, as it\u2019s needed for rendering form\ntemplates.</p>\n<p>and at least we need a pagelet\nrenderer. By default we use the provider called <tt>PageletRenderer</tt> defined\nin the z3c.pagelet package. But right now, we don\u2019t have a dependency on\nthis package. So let\u2019s implement a simple renderer and use them as a\nIContentProvider:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class PageletRenderer(object):\n...     zope.component.adapts(zope.interface.Interface,\n...         zope.publisher.interfaces.browser.IBrowserRequest,\n...         zope.interface.Interface)\n...\n...     def __init__(self, context, request, pagelet):\n...         self.__updated = False\n...         self.__parent__ = pagelet\n...         self.context = context\n...         self.request = request\n...\n...     def update(self):\n...         pass\n...\n...     def render(self):\n...         return self.__parent__.render()\n</pre>\n<pre>&gt;&gt;&gt; from zope.contentprovider.interfaces import IContentProvider\n&gt;&gt;&gt; zope.component.provideAdapter(PageletRenderer,\n...     provides=IContentProvider, name='pagelet')\n</pre>\n</blockquote>\n<p>Now define the form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class PersonEditForm(form.EditForm):\n...     \"\"\"Edit form including layout support. See z3c.formui.form.\"\"\"\n...\n...     template = getPageTemplate('subform')\n...     layout = getLayoutTemplate('subform')\n...\n...     fields = field.Fields(IPerson)\n</pre>\n</blockquote>\n<p>Now we can render the form with our previous created person instance:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; person = Person(u'Jessy', 6)\n&gt;&gt;&gt; editForm = PersonEditForm(person, divRequest)\n</pre>\n</blockquote>\n<p>Now we call the form which will update and render it:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print(editForm())\n&lt;div class=\"viewspace\"&gt;\n  &lt;div class=\"required-info\"&gt;\n    &lt;span class=\"required\"&gt;*&lt;/span&gt;\n    &amp;ndash; required\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div id=\"form-widgets-name-row\" class=\"row required\"&gt;\n      &lt;div class=\"label\"&gt;\n        &lt;label for=\"form-widgets-name\"&gt;\n          &lt;span&gt;Name&lt;/span&gt;\n          &lt;span class=\"required\"&gt;*&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n           name=\"form.widgets.name\"\n           class=\"text-widget required textline-field\"\n           value=\"Jessy\" /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"form-widgets-age-row\" class=\"row\"&gt;\n      &lt;div class=\"label\"&gt;\n        &lt;label for=\"form-widgets-age\"&gt;\n          &lt;span&gt;Age&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n      &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n         name=\"form.widgets.age\" class=\"text-widget int-field\"\n         value=\"6\" /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;div class=\"buttons\"&gt;\n    &lt;input type=\"submit\" id=\"form-buttons-apply\"\n           name=\"form.buttons.apply\"\n           class=\"submit-widget button-field\" value=\"Apply\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n</blockquote>\n<p>You can see that the form above is a real subform. It doesn\u2019t define the form\ntag which makes it usable as a subform in parent forms.</p>\n<p>Of course this works with table layout based forms too. Let\u2019s use our table\nrequest and render the form again:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; editForm = PersonEditForm(person, tableRequest)\n&gt;&gt;&gt; print(editForm())\n&lt;div class=\"viewspace\"&gt;\n  &lt;div class=\"required-info\"&gt;\n    &lt;span class=\"required\"&gt;*&lt;/span&gt;\n    &amp;ndash; required\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;table class=\"form-fields\"&gt;\n      &lt;tr class=\"row required\"&gt;\n        &lt;td class=\"label\"&gt;\n          &lt;label for=\"form-widgets-name\"&gt;\n            &lt;span&gt;Name&lt;/span&gt;\n            &lt;span class=\"required\"&gt; * &lt;/span&gt;\n          &lt;/label&gt;\n        &lt;/td&gt;\n        &lt;td class=\"field\"&gt;\n          &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-name\"\n               name=\"form.widgets.name\"\n               class=\"text-widget required textline-field\"\n               value=\"Jessy\" /&gt;\n          &lt;/div&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr class=\"row\"&gt;\n        &lt;td class=\"label\"&gt;\n          &lt;label for=\"form-widgets-age\"&gt;\n            &lt;span&gt;Age&lt;/span&gt;\n          &lt;/label&gt;\n        &lt;/td&gt;\n        &lt;td class=\"field\"&gt;\n          &lt;div class=\"widget\"&gt;&lt;input type=\"text\" id=\"form-widgets-age\"\n               name=\"form.widgets.age\" class=\"text-widget int-field\"\n               value=\"6\" /&gt;\n          &lt;/div&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;div class=\"buttons\"&gt;\n    &lt;input type=\"submit\" id=\"form-buttons-apply\"\n           name=\"form.buttons.apply\"\n          class=\"submit-widget button-field\" value=\"Apply\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"redirection\">\n<h3><a href=\"#id31\" rel=\"nofollow\">Redirection</a></h3>\n<p>The form doesn\u2019t bother rendering itself and its layout when\nrequest is a redirection as the rendering doesn\u2019t make any sense with\nbrowser requests in that case. Let\u2019s create a view that does a\nredirection in its update method:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class RedirectingView(PersonEditForm):\n...     def update(self):\n...         super(RedirectingView, self).update()\n...         self.request.response.redirect('.')\n</pre>\n</blockquote>\n<p>It will return an empty string when called as a browser page.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; redirectView = RedirectingView(person, divRequest)\n&gt;&gt;&gt; redirectView() == ''\nTrue\n</pre>\n</blockquote>\n<p>However, the <tt>render</tt> method will render form\u2019s template as usual:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; '&lt;div class=\"viewspace\"&gt;' in redirectView.render()\nTrue\n</pre>\n</blockquote>\n<p>The same thing should work for AddForms:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class RedirectingAddView(PersonAddForm):\n...     def update(self):\n...         super(RedirectingAddView, self).update()\n...         self.request.response.redirect('.')\n&gt;&gt;&gt; redirectView = RedirectingAddView(person, divRequest)\n&gt;&gt;&gt; redirectView() == ''\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"no-required-fields\">\n<h3><a href=\"#id32\" rel=\"nofollow\">No required fields</a></h3>\n<p>If there no required fields in the form, standard templates won\u2019t render\nthe \u201crequired-info\u201d hint.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class IAdditionalInfo(zope.interface.Interface):\n...\n...     location = zope.schema.TextLine(title=u'Location', required=False)\n...     about = zope.schema.Text(title=u'About', required=False)\n</pre>\n<pre>&gt;&gt;&gt; class AdditionalInfoForm(form.AddForm):\n...\n...     fields = field.Fields(IAdditionalInfo)\n</pre>\n<pre>&gt;&gt;&gt; additionalInfoForm = AdditionalInfoForm(root, divRequest)\n&gt;&gt;&gt; additionalInfoForm.update()\n&gt;&gt;&gt; '&lt;div class=\"required-info\"&gt;' in additionalInfoForm.render()\nFalse\n</pre>\n<pre>&gt;&gt;&gt; additionalInfoForm = AdditionalInfoForm(root, tableRequest)\n&gt;&gt;&gt; additionalInfoForm.update()\n&gt;&gt;&gt; '&lt;div class=\"required-info\"&gt;' in additionalInfoForm.render()\nFalse\n</pre>\n</blockquote>\n</div>\n<div id=\"cleanup\">\n<h3><a href=\"#id33\" rel=\"nofollow\">Cleanup</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.rmtree(temp_dir)\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id34\" rel=\"nofollow\">CHANGES</a></h2>\n<div id=\"id2\">\n<h3><a href=\"#id35\" rel=\"nofollow\">3.1 (2018-11-15)</a></h3>\n<ul>\n<li>Added support for Python 3.4, 3.5, 3.6, 3.7.</li>\n<li>Dropped support for Python 2.6 and 3.3.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id36\" rel=\"nofollow\">3.0.0 (2015-11-09)</a></h3>\n<ul>\n<li>Standardize namespace __init__</li>\n<li>Split config, mostly to be able to include in pyramid without browser\nresources and viewlets</li>\n</ul>\n</div>\n<div id=\"a2-2013-02-26\">\n<h3><a href=\"#id37\" rel=\"nofollow\">3.0.0a2 (2013-02-26)</a></h3>\n<ul>\n<li>Added missing version Trove classifiers.</li>\n</ul>\n</div>\n<div id=\"a1-2013-02-25\">\n<h3><a href=\"#id38\" rel=\"nofollow\">3.0.0a1 (2013-02-25)</a></h3>\n<ul>\n<li>Added support for Python 3.3.</li>\n<li>Dropped support for Python 2.4 and 2.5.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id39\" rel=\"nofollow\">2.3.0 (2012-03-15)</a></h3>\n<ul>\n<li>Feature: Mark a widget row with the \u201crequired\u201d class when the widget is\nrequired. Similarly, when the widget has an error attached, add the \u201cerror\u201d\nclass to the widget row. That allows you to change the styles of the label\nand the widget if it is reuqired.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id40\" rel=\"nofollow\">2.2.1 (2012-01-09)</a></h3>\n<ul>\n<li>No longer using deprecated <tt>zope.testing.doctest</tt> but built-in\n<tt>doctest</tt> instead.</li>\n<li>Fixed tests so they do not break for <cite>z3c.form</cite> 2.5.0.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id41\" rel=\"nofollow\">2.2.0 (2009-12-28)</a></h3>\n<ul>\n<li>Fixed tests so they do not break for <cite>z3c.form</cite> 2.2.0.</li>\n<li>Using <tt>requiredInfo</tt> property (introduced in <cite>z3c.form</cite> 2.0.0) to\nrender the information about required fields. This property returns\nan i18n message id making the information translateable.</li>\n<li>Added support for groups containing groups: They get displayed now.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id42\" rel=\"nofollow\">2.1.0 (2009-09-01)</a></h3>\n<ul>\n<li>Feature: Don\u2019t show required info hint if there\u2019s no required fields.</li>\n<li>Bug: Don\u2019t render add forms when redirecting as well.</li>\n<li>Bug: Fix redirection tests with newer zope.publisher that restricts\nuntrusted redirects to different domains.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id43\" rel=\"nofollow\">2.0.0 (2009-06-14)</a></h3>\n<ul>\n<li>Feature: Added support for context-specific template lookup, introduced in\n<cite>z3c.template</cite> 1.2.0 - templates can now be registered using (view, request,\ncontext) discriminator.</li>\n<li>Feature: Added support for <cite>z3c.pt</cite> templates using <cite>z3c.ptcompat</cite>\ncompatibility package.</li>\n<li>Feature: Added layout support for <cite>IAdding</cite> component based add forms.</li>\n<li>Feature: Added CSS for multi-widget which was added in <cite>z3c.form</cite> 2.0.0.</li>\n<li>Bug: Changed usage of <tt>template/macros/*</tt> to <tt>macro:*</tt>, because the\nfirst one doesn\u2019t work when we override a form template and use the form\nmacro, registered with this package.</li>\n<li>Bug: Don\u2019t do rendering in form\u2019s <cite>__call__</cite> method when request is a\nredirection.</li>\n<li>Bug: Reformatted long-description to render properly on pypi.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id44\" rel=\"nofollow\">1.4.2 (2008-08-26)</a></h3>\n<ul>\n<li>Bug: Corrected typos and unwanted unicode characters.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id45\" rel=\"nofollow\">1.4.1 (2008-01-23)</a></h3>\n<ul>\n<li>Bug: Fixed up meta-data and the release.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id46\" rel=\"nofollow\">1.4.0 (2008-01-21)</a></h3>\n<ul>\n<li>Feature: Added subform content and layout template. This allows you to\nconfigure real sub forms which do not render the form tag.</li>\n<li>Feature: Improve layout implementation, support built-in layout templates.</li>\n<li>Feature: Use <tt>IContentTemplate</tt> instead of <tt>IPageTemplate</tt> in layout\nbase classes. This will help to prevent running into recursion errors if\nthere is a missing layout template.</li>\n<li>Feature: Added form module which offers built-in layout support.</li>\n<li>Bug: Added missing display <tt>IContentTemplate</tt>, otherwise we can run into a\nrecursion in some cases.</li>\n<li>Bug: Renamed table macro argument from <tt><span class=\"pre\">form-required-info</span></tt> to\n<tt><span class=\"pre\">required-info</span></tt>. The macro <tt><span class=\"pre\">form-required-info</span></tt> did not exist.</li>\n<li>Bug: Added unit tests for layout support.</li>\n<li>Bug: Added tests for layout macros.</li>\n<li>Bug: Added tests for layout templates.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id47\" rel=\"nofollow\">1.3.0 (2007-08-24)</a></h3>\n<ul>\n<li>Refactoring: Update CSS classes to reflect latest changes to the widget\nclasses in <tt>z3c.form</tt>.</li>\n<li>Bug: Error view snippets may have a empty <tt>widget</tt> attribute values, so we\ncannot rely on accessing the label of the widget. This is the case, if the\nerror view sniipet was created from an invariants validation error.</li>\n<li>Bug: The table-form template did not properly render the error at the\nwidget, because the <tt>render()</tt> method was not called. Thanks to Markus\nLeist for the report.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id48\" rel=\"nofollow\">1.2.0 (2007-07-18)</a></h3>\n<ul>\n<li>Feature: The row div element now also has an id of the form\n\u201c&lt;widget-id&gt;-row\u201d.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id49\" rel=\"nofollow\">1.1.1 (2007-07-04)</a></h3>\n<ul>\n<li>Refactoring: Split up registrations for simpler management of UI\ncomponents. This also makes it easier to see for developers how to create a\nnew template for forms.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id50\" rel=\"nofollow\">1.1.0 (2007-06-29)</a></h3>\n<ul>\n<li>Feature: Registered all defined macros for each form template. Also, added\nmore slots to the templates providing more hooks for customization.</li>\n<li>Feature: Added a macro/slot for the \u201crequired info\u201d, which explains how\nrequired fields are marked.</li>\n<li>Feature: Added support for form labels.</li>\n<li>Feature: Added support for groups to templates.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id51\" rel=\"nofollow\">1.0.1 (2007-06-22)</a></h3>\n<ul>\n<li>Bug: Make sure we use the id for the \u201cfor\u201d attribute of the \u201clabel\u201d\nelement and not the name. This has worked until recently, because the\nname and id were the same, but they are different now.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id52\" rel=\"nofollow\">1.0.0 (2007-05-24)</a></h3>\n<ul>\n<li>Initial Release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4491037, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c25efc7e232e2744d17b63dd10c7e987", "sha256": "1dc6d854535655fdd081a3fead11fcf423ac4b12d76eb9e4a809b11695433e38"}, "downloads": -1, "filename": "z3c.formui-1.0.0-py2.4.egg", "has_sig": false, "md5_digest": "c25efc7e232e2744d17b63dd10c7e987", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 10822, "upload_time": "2007-05-24T15:22:14", "upload_time_iso_8601": "2007-05-24T15:22:14Z", "url": "https://files.pythonhosted.org/packages/9c/26/9758e4432ef1e953a8125ddfdc23e430096b77f51d96c4a414c4d1a12838/z3c.formui-1.0.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "242409af3e71e7776c09c27d11156139", "sha256": "4c15bc015ad330821fd6c73740743c4b58e5ffabca820b1a5333b843f58215e5"}, "downloads": -1, "filename": "z3c.formui-1.0.0.tar.gz", "has_sig": false, "md5_digest": "242409af3e71e7776c09c27d11156139", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6828, "upload_time": "2007-05-24T15:22:06", "upload_time_iso_8601": "2007-05-24T15:22:06Z", "url": "https://files.pythonhosted.org/packages/61/48/0997bba9d40848345548d81893dc2ccb083c944c21d8dccc53c9108ea594/z3c.formui-1.0.0.tar.gz", "yanked": false}], "1.0.0c2": [{"comment_text": "", "digests": {"md5": "b9d5fa6fb2266fd4e088f5fff9fcf90f", "sha256": "161d13eacb5d5645c904e316faeab7e1805bbf5e24cc1b8e19a8aa86d6849be6"}, "downloads": -1, "filename": "z3c.formui-1.0.0c2-py2.4.egg", "has_sig": false, "md5_digest": "b9d5fa6fb2266fd4e088f5fff9fcf90f", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 10796, "upload_time": "2007-05-22T17:47:34", "upload_time_iso_8601": "2007-05-22T17:47:34Z", "url": "https://files.pythonhosted.org/packages/94/d3/bf03266e4bf39ac25b8c27b22efb5a62bd215a12d39afaf6dee59eaf3d48/z3c.formui-1.0.0c2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c8fc7f7ba75c7af460902f1c9a4d70c", "sha256": "ff7c77e5d5e4fe8c2d1e5f0100eadb7772eab64db8af5f92d01f46da8b4be8cc"}, "downloads": -1, "filename": "z3c.formui-1.0.0c2.tar.gz", "has_sig": false, "md5_digest": "5c8fc7f7ba75c7af460902f1c9a4d70c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5704, "upload_time": "2007-05-22T17:47:25", "upload_time_iso_8601": "2007-05-22T17:47:25Z", "url": "https://files.pythonhosted.org/packages/9a/17/8c4f93b82eec35f0516fdd6decb3aff3318053e39421f90971a5c8e90d93/z3c.formui-1.0.0c2.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4030aaa91f68e90dbfbb07e683898432", "sha256": "4fff973d64ab69f70d3c8cc4d80c89a54546b0cb40b69cff78fbdeed48d37da4"}, "downloads": -1, "filename": "z3c.formui-1.0.1-py2.4.egg", "has_sig": false, "md5_digest": "4030aaa91f68e90dbfbb07e683898432", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 11139, "upload_time": "2007-06-22T17:20:19", "upload_time_iso_8601": "2007-06-22T17:20:19Z", "url": "https://files.pythonhosted.org/packages/26/67/46cb68b085611158904282962d35b2620b91cd4f5a5a2b5b2ac7496e2a74/z3c.formui-1.0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "510f8be6640bbe35b41ba6c41b2e3653", "sha256": "99ad92a7886e99a5ad4a4fdd85ec6fbcac4a2495d1b5cea52921ccc881bce031"}, "downloads": -1, "filename": "z3c.formui-1.0.1.tar.gz", "has_sig": false, "md5_digest": "510f8be6640bbe35b41ba6c41b2e3653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7127, "upload_time": "2007-06-22T17:17:00", "upload_time_iso_8601": "2007-06-22T17:17:00Z", "url": "https://files.pythonhosted.org/packages/8f/2c/36eba1545193a8d27c04c4fb569a95f6422171daf077d7c23315ac852904/z3c.formui-1.0.1.tar.gz", "yanked": false}], "1.0c1": [{"comment_text": "", "digests": {"md5": "69c988a8f8c720bee457cac934b132aa", "sha256": "1aa2c126b1e8276830238632f7c71679b6011e803aac7ce36f9506b67a95ac97"}, "downloads": -1, "filename": "z3c.formui-1.0c1-py2.4.egg", "has_sig": false, "md5_digest": "69c988a8f8c720bee457cac934b132aa", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 10562, "upload_time": "2007-05-22T15:08:12", "upload_time_iso_8601": "2007-05-22T15:08:12Z", "url": "https://files.pythonhosted.org/packages/fb/7a/5a79c9a733aa1ccc6a9dc189cd6f8ce8d26976a0bb8b038dd9d448617db6/z3c.formui-1.0c1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "be13e66b98b6aa0a6a96d96753b08cf9", "sha256": "b1cdeae07cbaeaf7fd0b524955f03593a005bc2f973669ed0cfc35f2641ada6b"}, "downloads": -1, "filename": "z3c.formui-1.0c1.tar.gz", "has_sig": false, "md5_digest": "be13e66b98b6aa0a6a96d96753b08cf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4945, "upload_time": "2007-05-22T15:06:12", "upload_time_iso_8601": "2007-05-22T15:06:12Z", "url": "https://files.pythonhosted.org/packages/5a/2f/c0f6991c7765b31d01ca9bbd5e81b0118d35229f80a47e2bc4a7e7ec3b9e/z3c.formui-1.0c1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "94e5c68bd20e7c46f0da6480e90c19cd", "sha256": "d8da9b38faca2216bc28a06099b9fd5f5e81f888c858421e65c566925ff98b9d"}, "downloads": -1, "filename": "z3c.formui-1.1.0-py2.4.egg", "has_sig": false, "md5_digest": "94e5c68bd20e7c46f0da6480e90c19cd", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 11811, "upload_time": "2007-06-29T05:54:23", "upload_time_iso_8601": "2007-06-29T05:54:23Z", "url": "https://files.pythonhosted.org/packages/fc/e6/211bfd27d3587af54e65fafe8c25789e5f432beba539f90559fcefad2988/z3c.formui-1.1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b496525b7a1e6cfb9dc2977b81a6f21c", "sha256": "3aaaebf0537146c0ed7efea3a22e22e4b50d9c9e6d69320e06a29faa01490cf6"}, "downloads": -1, "filename": "z3c.formui-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b496525b7a1e6cfb9dc2977b81a6f21c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7617, "upload_time": "2007-06-29T05:54:13", "upload_time_iso_8601": "2007-06-29T05:54:13Z", "url": "https://files.pythonhosted.org/packages/32/c6/cd84938592291ac7f98cdc284b2229eb3fed113ff5a76603ce115c3a12bf/z3c.formui-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "30077c363dd5b5e2dcbae4ad3c74a44f", "sha256": "8382fe3270a62b72fd2a0711989204ea89f30908ae912661123bca58421b241b"}, "downloads": -1, "filename": "z3c.formui-1.1.1-py2.4.egg", "has_sig": false, "md5_digest": "30077c363dd5b5e2dcbae4ad3c74a44f", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 12606, "upload_time": "2007-07-04T17:34:20", "upload_time_iso_8601": "2007-07-04T17:34:20Z", "url": "https://files.pythonhosted.org/packages/f3/20/a625655c5887779a10a0219039b84e38c77cab08d1017442a37722f21a3e/z3c.formui-1.1.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f84a71a29408548e9ac34a5ea11f2172", "sha256": "3ec7bd3ceaa788b61af853a467d93782de7dc42d099774de45aaba57436e295b"}, "downloads": -1, "filename": "z3c.formui-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f84a71a29408548e9ac34a5ea11f2172", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7860, "upload_time": "2007-07-04T17:34:08", "upload_time_iso_8601": "2007-07-04T17:34:08Z", "url": "https://files.pythonhosted.org/packages/95/48/64c54128d7c8acc6b50432cfb89611b5089fc9d07592b45391b97b2b72ea/z3c.formui-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5c15142978980abcec51eefa0c0eaec8", "sha256": "bdf713ec1a55f07ae105128d103db2a41cb9b9227eacc60e97d0a9a0c41ebbae"}, "downloads": -1, "filename": "z3c.formui-1.2.0-py2.4.egg", "has_sig": false, "md5_digest": "5c15142978980abcec51eefa0c0eaec8", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 12680, "upload_time": "2007-07-19T05:56:51", "upload_time_iso_8601": "2007-07-19T05:56:51Z", "url": "https://files.pythonhosted.org/packages/ea/2a/2fd58868e815e350aed28246bbbf6d17c2a403ad62bfc266ab98a5c57478/z3c.formui-1.2.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "db60159f2d3bf13ead61f83752c4cba8", "sha256": "0c3de2933f024310929b1d6460e0514df4222b373e3580ea0a9963bc5d0e95ee"}, "downloads": -1, "filename": "z3c.formui-1.2.0.tar.gz", "has_sig": false, "md5_digest": "db60159f2d3bf13ead61f83752c4cba8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7957, "upload_time": "2007-07-19T05:56:44", "upload_time_iso_8601": "2007-07-19T05:56:44Z", "url": "https://files.pythonhosted.org/packages/49/95/20259a35b6f21ff8614d523ee1d62868c614f032c3567fa4039b33728a8a/z3c.formui-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "69f0db41231ffda39ba2d5688407c654", "sha256": "a43d4b48a44d7d2ca1356a2cd686b4e8b250a9a9224aa30675e46709461c030b"}, "downloads": -1, "filename": "z3c.formui-1.3.0-py2.4.egg", "has_sig": false, "md5_digest": "69f0db41231ffda39ba2d5688407c654", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 12935, "upload_time": "2007-08-24T03:43:56", "upload_time_iso_8601": "2007-08-24T03:43:56Z", "url": "https://files.pythonhosted.org/packages/fa/9e/4c58170c0fd6fb43d0b5cd2fcb78a65e3fc3b7b1125543ca1efa2bfc89bb/z3c.formui-1.3.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "431139b3869cbc5d916177a879a5c653", "sha256": "2a7010ee90ca0bead58c7e5935d97ddffbedc07e759c659cd5f2177ff9e9a1d8"}, "downloads": -1, "filename": "z3c.formui-1.3.0.tar.gz", "has_sig": false, "md5_digest": "431139b3869cbc5d916177a879a5c653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8428, "upload_time": "2007-08-24T03:43:48", "upload_time_iso_8601": "2007-08-24T03:43:48Z", "url": "https://files.pythonhosted.org/packages/5b/f4/415fc5fb5e72375c2f958da28cee5026deea25d665cdc89529ff76194e3b/z3c.formui-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "f48c85721d5e90940e5db4aa5a573d47", "sha256": "23333abba3e36a4a8be415e8ab2fb5a784b3a93f2b3c2a43dc3d3877e360cc1d"}, "downloads": -1, "filename": "z3c.formui-1.4.0.tar.gz", "has_sig": false, "md5_digest": "f48c85721d5e90940e5db4aa5a573d47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16185, "upload_time": "2008-01-21T05:40:28", "upload_time_iso_8601": "2008-01-21T05:40:28Z", "url": "https://files.pythonhosted.org/packages/fe/77/94a308adf6e9fcce54eaa270678d2aa716bca33064c1377d5a6f4fbcf94d/z3c.formui-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "782ff23a9cdc3194b3694a13dd9b7217", "sha256": "f9c6621242551f2ef0e19653bcb64b6b91b3ce439adf88e7ed97ed895ec94981"}, "downloads": -1, "filename": "z3c.formui-1.4.1.tar.gz", "has_sig": false, "md5_digest": "782ff23a9cdc3194b3694a13dd9b7217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22469, "upload_time": "2008-01-23T22:00:52", "upload_time_iso_8601": "2008-01-23T22:00:52Z", "url": "https://files.pythonhosted.org/packages/df/c9/b1988c7cccdb311a4ef438e964cde3ebb727fbc462b3547cd50ab7c83ed8/z3c.formui-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "bb7383690b8949e3de702666796906ea", "sha256": "f98e9f28ba792e73ab16d4d13e8fff3c6b065b5ad0d77d5a1e145faed14e81e2"}, "downloads": -1, "filename": "z3c.formui-1.4.2.tar.gz", "has_sig": false, "md5_digest": "bb7383690b8949e3de702666796906ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22560, "upload_time": "2008-08-27T04:41:56", "upload_time_iso_8601": "2008-08-27T04:41:56Z", "url": "https://files.pythonhosted.org/packages/75/b3/4543230f159d65e2d9f4dc0dcf3008333d8686a86e208b13919b7782aa19/z3c.formui-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "636b1d359c96e133298ec8c0b8d27d10", "sha256": "1ac8228142c9bfea667d83f32cb5ca50183377660c9ba801636a9b04a81b28ee"}, "downloads": -1, "filename": "z3c.formui-1.4.3.tar.gz", "has_sig": false, "md5_digest": "636b1d359c96e133298ec8c0b8d27d10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23680, "upload_time": "2009-03-07T12:38:56", "upload_time_iso_8601": "2009-03-07T12:38:56.023557Z", "url": "https://files.pythonhosted.org/packages/c1/c7/f94e80d5322f8baf930b467513329cc53bf32046abefa05c217a5a83d493/z3c.formui-1.4.3.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "39f8cd014963b3a8ae73617d8750a4a3", "sha256": "b4eae9fd78308eb61e664c1396cbccb93a9b4923f43d7f743cb880de7149a99b"}, "downloads": -1, "filename": "z3c.formui-2.0.0.tar.gz", "has_sig": false, "md5_digest": "39f8cd014963b3a8ae73617d8750a4a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26137, "upload_time": "2009-06-14T04:58:39", "upload_time_iso_8601": "2009-06-14T04:58:39.488652Z", "url": "https://files.pythonhosted.org/packages/42/5d/a052981c41c3cb26d3589dcc51c55f9c2e48a64d926c333039bf1a154cfd/z3c.formui-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "58439eaf1a609d3d27f25ce3dcf22257", "sha256": "ec09e7d7c6fbdbc91d87b1f60a061a017e9243376763619c69d508ea303353b8"}, "downloads": -1, "filename": "z3c.formui-2.1.0.tar.gz", "has_sig": false, "md5_digest": "58439eaf1a609d3d27f25ce3dcf22257", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27912, "upload_time": "2009-09-01T20:27:37", "upload_time_iso_8601": "2009-09-01T20:27:37.900556Z", "url": "https://files.pythonhosted.org/packages/bb/b4/24bd215d269813fef1f5179425a32f9687f12c9524e3278036f2d3b4bd84/z3c.formui-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "9f507fb083e7f80b03b2acdc892ae192", "sha256": "850694867213bdaf8bc68d78308b2e580bcbde767dddbf2161645824fa15f5c2"}, "downloads": -1, "filename": "z3c.formui-2.2.0.tar.gz", "has_sig": false, "md5_digest": "9f507fb083e7f80b03b2acdc892ae192", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27284, "upload_time": "2009-12-28T12:50:54", "upload_time_iso_8601": "2009-12-28T12:50:54.889197Z", "url": "https://files.pythonhosted.org/packages/06/de/d5f1f1dfe5d38580afde30826f53a4257bcf99991e3221f95396e28fdea0/z3c.formui-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "ec0577a16568438d4f6cbcce4725295d", "sha256": "300be466dc2facefe63555e5e5289106957068fd501fee1c1795d211b83f8f84"}, "downloads": -1, "filename": "z3c.formui-2.2.1.tar.gz", "has_sig": false, "md5_digest": "ec0577a16568438d4f6cbcce4725295d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30259, "upload_time": "2012-01-09T20:08:30", "upload_time_iso_8601": "2012-01-09T20:08:30.435625Z", "url": "https://files.pythonhosted.org/packages/8c/b3/c54296da59a1ee63cd203591af186e9df513569566161ce47a7d21e30117/z3c.formui-2.2.1.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "00d3a9119bc5339c34b237000515441e", "sha256": "65b1cfc23b445b58c3302a0815d417671d156035cfcd65725a1da933304dbf58"}, "downloads": -1, "filename": "z3c.formui-2.3.0.tar.gz", "has_sig": false, "md5_digest": "00d3a9119bc5339c34b237000515441e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30046, "upload_time": "2012-03-15T21:22:57", "upload_time_iso_8601": "2012-03-15T21:22:57.328525Z", "url": "https://files.pythonhosted.org/packages/13/f9/3ffc6dde23c288e42163d74c0eaba0a9a454747433a4d9c46fe90d402e3c/z3c.formui-2.3.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "ba1b28ff1c4d7d0bdd1f051b8671595d", "sha256": "b3be6ccaf24bc9f337f0c292a7d13ad393c1b3521109e7987c826c7391b3fb70"}, "downloads": -1, "filename": "z3c.formui-3.0.0.tar.gz", "has_sig": false, "md5_digest": "ba1b28ff1c4d7d0bdd1f051b8671595d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30572, "upload_time": "2015-11-09T14:47:45", "upload_time_iso_8601": "2015-11-09T14:47:45.666635Z", "url": "https://files.pythonhosted.org/packages/d4/93/683357b75df7290b1f1fa4b85d886e8181f92d41f7ecbfb3c4d9b6df51ab/z3c.formui-3.0.0.tar.gz", "yanked": false}], "3.0.0a1": [{"comment_text": "", "digests": {"md5": "f85de178775a6df51164cc17cfe3d5b9", "sha256": "651caaa3251200a5e9e8d403924fc76f7a6b298ad914e7d55b5d6aa9982bb0f1"}, "downloads": -1, "filename": "z3c.formui-3.0.0a1.zip", "has_sig": false, "md5_digest": "f85de178775a6df51164cc17cfe3d5b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44323, "upload_time": "2013-02-25T15:17:03", "upload_time_iso_8601": "2013-02-25T15:17:03.849705Z", "url": "https://files.pythonhosted.org/packages/91/ab/f0512b704e1bf28786ff0c5412e8f7a00a00f8b0a9fec0ebb301bc945091/z3c.formui-3.0.0a1.zip", "yanked": false}], "3.0.0a2": [{"comment_text": "", "digests": {"md5": "f0760ad09af46969bbba2a5a166e37f3", "sha256": "5fa1abcf6c89f71b061503fb20adaba49418e2b789772ef8bec7172471d35e88"}, "downloads": -1, "filename": "z3c.formui-3.0.0a2.zip", "has_sig": false, "md5_digest": "f0760ad09af46969bbba2a5a166e37f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44482, "upload_time": "2013-02-26T15:49:16", "upload_time_iso_8601": "2013-02-26T15:49:16.879183Z", "url": "https://files.pythonhosted.org/packages/24/c5/98f8745d66ac067f4c0b2493efe3223f5518dd38380d7012ef04489f4422/z3c.formui-3.0.0a2.zip", "yanked": false}], "3.1": [{"comment_text": "", "digests": {"md5": "7223891e794d6fdc4ebb562e5ce741de", "sha256": "51ecdae00d7b7ceb1ec1508d47aa41d8344d40031af24865930afe1969e80a02"}, "downloads": -1, "filename": "z3c.formui-3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7223891e794d6fdc4ebb562e5ce741de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 37707, "upload_time": "2018-11-15T19:50:33", "upload_time_iso_8601": "2018-11-15T19:50:33.433910Z", "url": "https://files.pythonhosted.org/packages/8c/21/8acdc10f2253a3539b7110c43e02da0a313d92c0ed8bd39a26849e5f7688/z3c.formui-3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a26b05f919185c518bffdb8facf0f4a", "sha256": "f64e53fd2facb6779f49a705a513a57c5cbc9c72c960b8e17d492a7bd794230d"}, "downloads": -1, "filename": "z3c.formui-3.1.tar.gz", "has_sig": false, "md5_digest": "4a26b05f919185c518bffdb8facf0f4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 32946, "upload_time": "2018-11-15T19:50:35", "upload_time_iso_8601": "2018-11-15T19:50:35.430399Z", "url": "https://files.pythonhosted.org/packages/4a/1a/b15c7b18acc6569922b3fe35f4a11467fbed4e632651f417c42349cc1e5d/z3c.formui-3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7223891e794d6fdc4ebb562e5ce741de", "sha256": "51ecdae00d7b7ceb1ec1508d47aa41d8344d40031af24865930afe1969e80a02"}, "downloads": -1, "filename": "z3c.formui-3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7223891e794d6fdc4ebb562e5ce741de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 37707, "upload_time": "2018-11-15T19:50:33", "upload_time_iso_8601": "2018-11-15T19:50:33.433910Z", "url": "https://files.pythonhosted.org/packages/8c/21/8acdc10f2253a3539b7110c43e02da0a313d92c0ed8bd39a26849e5f7688/z3c.formui-3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a26b05f919185c518bffdb8facf0f4a", "sha256": "f64e53fd2facb6779f49a705a513a57c5cbc9c72c960b8e17d492a7bd794230d"}, "downloads": -1, "filename": "z3c.formui-3.1.tar.gz", "has_sig": false, "md5_digest": "4a26b05f919185c518bffdb8facf0f4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 32946, "upload_time": "2018-11-15T19:50:35", "upload_time_iso_8601": "2018-11-15T19:50:35.430399Z", "url": "https://files.pythonhosted.org/packages/4a/1a/b15c7b18acc6569922b3fe35f4a11467fbed4e632651f417c42349cc1e5d/z3c.formui-3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:00 2020"}