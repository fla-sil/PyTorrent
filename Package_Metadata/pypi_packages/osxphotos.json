{"info": {"author": "Rhet Turnbull", "author_email": "rturnbull+git@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: MacOS X", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# OSXPhotos\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n- [OSXPhotos](#osxphotos)\n  * [What is osxphotos?](#what-is-osxphotos)\n  * [Supported operating systems](#supported-operating-systems)\n  * [Installation instructions](#installation-instructions)\n  * [Command Line Usage](#command-line-usage)\n  * [Example uses of the package](#example-uses-of-the-package)\n  * [Package Interface](#package-interface)\n    + [PhotosDB](#photosdb)\n    + [PhotoInfo](#photoinfo)\n    + [AlbumInfo](#albuminfo)\n    + [FolderInfo](#folderinfo)\n    + [PlaceInfo](#placeinfo)\n    + [Template Substitutions](#template-substitutions)\n    + [Utility Functions](#utility-functions)\n  * [Examples](#examples)\n  * [Related Projects](#related-projects)\n  * [Contributing](#contributing)\n  * [Known Bugs](#known-bugs)\n  * [Implementation Notes](#implementation-notes)\n  * [Dependencies](#dependencies)\n  * [Acknowledgements](#acknowledgements)\n\n\n## What is osxphotos?\n\nOSXPhotos provides the ability to interact with and query Apple's Photos.app library database on MacOS. Using this package you can query the Photos database for information about the photos stored in a Photos library on your Mac--for example, file name, file path, and metadata such as keywords/tags, persons/faces, albums, etc. You can also easily export both the original and edited photos.\n\n## Supported operating systems\n\nOnly works on MacOS (aka Mac OS X). Tested on MacOS 10.12.6 / Photos 2.0, 10.13.6 / Photos 3.0, MacOS 10.14.5, 10.14.6 / Photos 4.0, MacOS 10.15.1 & 10.15.4 / Photos 5.0. \n\nRequires python >= 3.6 though if you use `pip` to install, you must use python >= 3.8.  See notes [below](#Installation-instructions). I highly recommend running this with python >= 3.8 as I'll eventually drop support for 3.6 and 3.7.\n\nThis package will read Photos databases for any supported version on any supported OS version.  E.g. you can read a database created with Photos 4.0 on MacOS 10.14 on a machine running MacOS 10.12.\n\n\n## Installation instructions\n\nosxmetadata uses setuptools, thus simply run:\n\n\tpython3 setup.py install\n\nIf you're using python 3.6 or 3.7, you'll need to do this first to get around an issue with bpylist2:\n\n\tpip install -r requirements.txt\n\nYou can also install directly from [pypi](https://pypi.org/) but you must use python >= 3.8 to avoid an error with bpylist2.  The package currently works fine with python 3.6 or 3.7 but I know of no way to get `pip` to install the right dependencies. \n\n    pip install osxphotos\n\n## Command Line Usage\n\nThis package will install a command line utility called `osxphotos` that allows you to query the Photos database.  Alternatively, you can also run the command line utility like this: `python3 -m osxphotos`\n\nIf you only care about the command line tool, I recommend installing with [pipx](https://github.com/pipxproject/pipx)\n\nAfter installing pipx:\n`pipx install osxphotos`\n\nThen you should be able to run `osxphotos` on the command line:\n\n```\n> osxphotos\nUsage: osxphotos [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --db <Photos database path>  Specify Photos database path. Path to Photos\n                               library/database can be specified using either\n                               --db or directly as PHOTOS_LIBRARY positional\n                               argument. If neither --db or PHOTOS_LIBRARY\n                               provided, will attempt to find the library to\n                               use in the following order: 1. last opened\n                               library, 2. system library, 3.\n                               ~/Pictures/Photos Library.photoslibrary\n  --json                       Print output in JSON format.\n  -v, --version                Show the version and exit.\n  -h, --help                   Show this message and exit.\n\nCommands:\n  albums    Print out albums found in the Photos library.\n  dump      Print list of all photos & associated info from the Photos...\n  export    Export photos from the Photos database.\n  help      Print help; for help on commands: help <command>.\n  info      Print out descriptive info of the Photos library database.\n  keywords  Print out keywords found in the Photos library.\n  list      Print list of Photos libraries found on the system.\n  persons   Print out persons (faces) found in the Photos library.\n  places    Print out places found in the Photos library.\n  query     Query the Photos database using 1 or more search options; if...\n```\n\nTo get help on a specific command, use `osxphotos help <command_name>`\n\nExample: `osxphotos help export`\n\n```\nUsage: osxphotos export [OPTIONS] [PHOTOS_LIBRARY]... DEST\nUsage: __main__.py export [OPTIONS] [PHOTOS_LIBRARY]... DEST\n\n  Export photos from the Photos database. Export path DEST is required.\n  Optionally, query the Photos database using 1 or more search options;  if\n  more than one option is provided, they are treated as \"AND\"  (e.g. search\n  for photos matching all options). If no query options are provided, all\n  photos will be exported. By default, all versions of all photos will be\n  exported including edited versions, live photo movies, burst photos, and\n  associated RAW images.  See --skip-edited, --skip-live, --skip-bursts, and\n  --skip-raw options to modify this behavior.\n\nOptions:\n  --db <Photos database path>     Specify Photos database path. Path to Photos\n                                  library/database can be specified using\n                                  either --db or directly as PHOTOS_LIBRARY\n                                  positional argument. If neither --db or\n                                  PHOTOS_LIBRARY provided, will attempt to\n                                  find the library to use in the following\n                                  order: 1. last opened library, 2. system\n                                  library, 3. ~/Pictures/Photos\n                                  Library.photoslibrary\n  -V, --verbose                   Print verbose output.\n  --keyword KEYWORD               Search for photos with keyword KEYWORD. If\n                                  more than one keyword, treated as \"OR\", e.g.\n                                  find photos match any keyword\n  --person PERSON                 Search for photos with person PERSON. If\n                                  more than one person, treated as \"OR\", e.g.\n                                  find photos match any person\n  --album ALBUM                   Search for photos in album ALBUM. If more\n                                  than one album, treated as \"OR\", e.g. find\n                                  photos match any album\n  --folder FOLDER                 Search for photos in an album in folder\n                                  FOLDER. If more than one folder, treated as\n                                  \"OR\", e.g. find photos in any FOLDER.  Only\n                                  searches top level folders (e.g. does not\n                                  look at subfolders)\n  --uuid UUID                     Search for photos with UUID(s).\n  --title TITLE                   Search for TITLE in title of photo.\n  --no-title                      Search for photos with no title.\n  --description DESC              Search for DESC in description of photo.\n  --no-description                Search for photos with no description.\n  --place PLACE                   Search for PLACE in photo's reverse\n                                  geolocation info\n  --no-place                      Search for photos with no associated place\n                                  name info (no reverse geolocation info)\n  --uti UTI                       Search for photos whose uniform type\n                                  identifier (UTI) matches UTI\n  -i, --ignore-case               Case insensitive search for title,\n                                  description, or place. Does not apply to\n                                  keyword, person, or album.\n  --edited                        Search for photos that have been edited.\n  --external-edit                 Search for photos edited in external editor.\n  --favorite                      Search for photos marked favorite.\n  --not-favorite                  Search for photos not marked favorite.\n  --hidden                        Search for photos marked hidden.\n  --not-hidden                    Search for photos not marked hidden.\n  --shared                        Search for photos in shared iCloud album\n                                  (Photos 5 only).\n  --not-shared                    Search for photos not in shared iCloud album\n                                  (Photos 5 only).\n  --burst                         Search for photos that were taken in a\n                                  burst.\n  --not-burst                     Search for photos that are not part of a\n                                  burst.\n  --live                          Search for Apple live photos\n  --not-live                      Search for photos that are not Apple live\n                                  photos.\n  --portrait                      Search for Apple portrait mode photos.\n  --not-portrait                  Search for photos that are not Apple\n                                  portrait mode photos.\n  --screenshot                    Search for screenshot photos.\n  --not-screenshot                Search for photos that are not screenshot\n                                  photos.\n  --slow-mo                       Search for slow motion videos.\n  --not-slow-mo                   Search for photos that are not slow motion\n                                  videos.\n  --time-lapse                    Search for time lapse videos.\n  --not-time-lapse                Search for photos that are not time lapse\n                                  videos.\n  --hdr                           Search for high dynamic range (HDR) photos.\n  --not-hdr                       Search for photos that are not HDR photos.\n  --selfie                        Search for selfies (photos taken with front-\n                                  facing cameras).\n  --not-selfie                    Search for photos that are not selfies.\n  --panorama                      Search for panorama photos.\n  --not-panorama                  Search for photos that are not panoramas.\n  --has-raw                       Search for photos with both a jpeg and RAW\n                                  version\n  --only-movies                   Search only for movies (default searches\n                                  both images and movies).\n  --only-photos                   Search only for photos/images (default\n                                  searches both images and movies).\n  --from-date [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\n                                  Search by start item date, e.g.\n                                  2000-01-12T12:00:00 or 2000-12-31 (ISO 8601\n                                  w/o TZ).\n  --to-date [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\n                                  Search by end item date, e.g.\n                                  2000-01-12T12:00:00 or 2000-12-31 (ISO 8601\n                                  w/o TZ).\n  --overwrite                     Overwrite existing files. Default behavior\n                                  is to add (1), (2), etc to filename if file\n                                  already exists. Use this with caution as it\n                                  may create name collisions on export. (e.g.\n                                  if two files happen to have the same name)\n  --export-by-date                Automatically create output folders to\n                                  organize photos by date created (e.g.\n                                  DEST/2019/12/20/photoname.jpg).\n  --skip-edited                   Do not export edited version of photo if an\n                                  edited version exists.\n  --skip-bursts                   Do not export all associated burst images in\n                                  the library if a photo is a burst photo.\n  --skip-live                     Do not export the associated live video\n                                  component of a live photo.\n  --skip-raw                      Do not export associated RAW images of a\n                                  RAW/jpeg pair.  Note: this does not skip RAW\n                                  photos if the RAW photo does not have an\n                                  associated jpeg image (e.g. the RAW file was\n                                  imported to Photos without a jpeg preview).\n  --person-keyword                Use person in image as keyword/tag when\n                                  exporting metadata.\n  --album-keyword                 Use album name as keyword/tag when exporting\n                                  metadata.\n  --keyword-template TEMPLATE     For use with --exiftool, --sidecar; specify\n                                  a template string to use as keyword in the\n                                  form '{name,DEFAULT}' This is the same\n                                  format as --directory.  For example, if you\n                                  wanted to add the full path to the folder\n                                  and album photo is contained in as a keyword\n                                  when exporting you could specify --keyword-\n                                  template \"{folder_album}\" You may specify\n                                  more than one template, for example\n                                  --keyword-template \"{folder_album}\"\n                                  --keyword-template \"{created.year}\" See\n                                  Templating System below.\n  --current-name                  Use photo's current filename instead of\n                                  original filename for export.  Note:\n                                  Starting with Photos 5, all photos are\n                                  renamed upon import.  By default, photos are\n                                  exported with the the original name they had\n                                  before import.\n  --sidecar FORMAT                Create sidecar for each photo exported;\n                                  valid FORMAT values: xmp, json; --sidecar\n                                  json: create JSON sidecar useable by\n                                  exiftool (https://exiftool.org/) The sidecar\n                                  file can be used to apply metadata to the\n                                  file with exiftool, for example: \"exiftool\n                                  -j=photoname.json photoname.jpg\" The sidecar\n                                  file is named in format photoname.json\n                                  --sidecar xmp: create XMP sidecar used by\n                                  Adobe Lightroom, etc.The sidecar file is\n                                  named in format photoname.xmp\n  --download-missing              Attempt to download missing photos from\n                                  iCloud. The current implementation uses\n                                  Applescript to interact with Photos to\n                                  export the photo which will force Photos to\n                                  download from iCloud if the photo does not\n                                  exist on disk.  This will be slow and will\n                                  require internet connection. This obviously\n                                  only works if the Photos library is synched\n                                  to iCloud.  Note: --download-missing does\n                                  not currently export all burst images; only\n                                  the primary photo will be exported--\n                                  associated burst images will be skipped.\n  --exiftool                      Use exiftool to write metadata directly to\n                                  exported photos. To use this option,\n                                  exiftool must be installed and in the path.\n                                  exiftool may be installed from\n                                  https://exiftool.org/\n  --directory DIRECTORY           Optional template for specifying name of\n                                  output directory in the form\n                                  '{name,DEFAULT}'. See below for additional\n                                  details on templating system.\n  --no-extended-attributes        Don't copy extended attributes when\n                                  exporting.  You only need this if exporting\n                                  to a filesystem that doesn't support Mac OS\n                                  extended attributes.  Only use this if you\n                                  get an error while exporting.\n  -h, --help                      Show this message and exit.\n\n**Templating System**\n\nWith the --directory option you may specify a template for the export\ndirectory.  This directory will be appended to the export path specified in\nthe export DEST argument to export.  For example, if template is\n'{created.year}/{created.month}', and export desitnation DEST is\n'/Users/maria/Pictures/export', the actual export directory for a photo would\nbe '/Users/maria/Pictures/export/2020/March' if the photo was created in March\n2020.\n\nThe templating system may also be used with the --keyword-template option to\nset keywords on export (with --exiftool or --sidecar), for example, to set a\nnew keyword in format 'folder/subfolder/album' to preserve the folder/album\nstructure, you can use --keyword-template \"{folder_album}\"\n\nIn the template, valid template substitutions will be replaced by the\ncorresponding value from the table below.  Invalid substitutions will result\nin a an error and the script will abort.\n\nIf you want the actual text of the template substition to appear in the\nrendered name, use double braces, e.g. '{{' or '}}', thus using\n'{created.year}/{{name}}' for --directory would result in output of\n2020/{name}/photoname.jpg\n\nYou may specify an optional default value to use if the substitution does not\ncontain a value (e.g. the value is null) by specifying the default value after\na ',' in the template string: for example, if template is\n'{created.year}/{place.address,NO_ADDRESS}' but there was no address\nassociated with the photo, the resulting output would be:\n'2020/NO_ADDRESS/photoname.jpg'. If specified, the default value may not\ncontain a brace symbol ('{' or '}').\n\nIf you do not specify a default value and the template substitution has no\nvalue, '_' (underscore) will be used as the default value. For example, in the\nabove example, this would result in '2020/_/photoname.jpg' if address was null\nI plan to eventually extend the templating system to the exported filename so\nyou can specify the filename using a template.\n\nSubstitution                    Description\n{name}                          Current filename of the photo\n{original_name}                 Photo's original filename when imported to\n                                Photos\n{title}                         Title of the photo\n{descr}                         Description of the photo\n{created.date}                  Photo's creation date in ISO format, e.g.\n                                '2020-03-22'\n{created.year}                  4-digit year of file creation time\n{created.yy}                    2-digit year of file creation time\n{created.mm}                    2-digit month of the file creation time\n                                (zero padded)\n{created.month}                 Month name in user's locale of the file\n                                creation time\n{created.mon}                   Month abbreviation in the user's locale of\n                                the file creation time\n{created.doy}                   3-digit day of year (e.g Julian day) of file\n                                creation time, starting from 1 (zero padded)\n{modified.date}                 Photo's modification date in ISO format,\n                                e.g. '2020-03-22'\n{modified.year}                 4-digit year of file modification time\n{modified.yy}                   2-digit year of file modification time\n{modified.mm}                   2-digit month of the file modification time\n                                (zero padded)\n{modified.month}                Month name in user's locale of the file\n                                modification time\n{modified.mon}                  Month abbreviation in the user's locale of\n                                the file modification time\n{modified.doy}                  3-digit day of year (e.g Julian day) of file\n                                modification time, starting from 1 (zero\n                                padded)\n{place.name}                    Place name from the photo's reverse\n                                geolocation data, as displayed in Photos\n{place.country_code}            The ISO country code from the photo's\n                                reverse geolocation data\n{place.name.country}            Country name from the photo's reverse\n                                geolocation data\n{place.name.state_province}     State or province name from the photo's\n                                reverse geolocation data\n{place.name.city}               City or locality name from the photo's\n                                reverse geolocation data\n{place.name.area_of_interest}   Area of interest name (e.g. landmark or\n                                public place) from the photo's reverse\n                                geolocation data\n{place.address}                 Postal address from the photo's reverse\n                                geolocation data, e.g. '2007 18th St NW,\n                                Washington, DC 20009, United States'\n{place.address.street}          Street part of the postal address, e.g.\n                                '2007 18th St NW'\n{place.address.city}            City part of the postal address, e.g.\n                                'Washington'\n{place.address.state_province}  State/province part of the postal address,\n                                e.g. 'DC'\n{place.address.postal_code}     Postal code part of the postal address, e.g.\n                                '20009'\n{place.address.country}         Country name of the postal address, e.g.\n                                'United States'\n{place.address.country_code}    ISO country code of the postal address, e.g.\n                                'US'\n\nThe following substitutions may result in multiple values. Thus if specified\nfor --directory these could result in multiple copies of a photo being being\nexported, one to each directory.  For example: --directory\n'{created.year}/{album}' could result in the same photo being exported to each\nof the following directories if the photos were created in 2019 and were in\nalbums 'Vacation' and 'Family': 2019/Vacation, 2019/Family\n\nSubstitution    Description\n{album}         Album(s) photo is contained in\n{folder_album}  Folder path + album photo is contained in. e.g.\n                'Folder/Subfolder/Album' or just 'Album' if no enclosing\n                folder\n{keyword}       Keyword(s) assigned to photo\n{person}        Person(s) / face(s) in a photo\n```\n\nExample: export all photos to ~/Desktop/export group in folders by date created\n\n`osxphotos export --export-by-date ~/Pictures/Photos\\ Library.photoslibrary ~/Desktop/export`\n\n**Note**: Photos library/database path can also be specified using --db option:\n\n`osxphotos export --export-by-date --db ~/Pictures/Photos\\ Library.photoslibrary ~/Desktop/export`\n\nExample: find all photos with keyword \"Kids\" and output results to json file named results.json:\n\n`osxphotos query --keyword Kids --json ~/Pictures/Photos\\ Library.photoslibrary >results.json`\n\nExample: export photos to file structure based on 4-digit year and full name of month of photo's creation date:\n\n`osxphotos export ~/Desktop/export --directory \"{created.year}/{created.month}\"`\n\n\n## Example uses of the package \n\n```python\n\"\"\" Simple usage of the package \"\"\"\nimport os.path\n\nimport osxphotos\n\ndef main():\n    db = os.path.expanduser(\"~/Pictures/Photos Library.photoslibrary\")\n    photosdb = osxphotos.PhotosDB(db)\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.album_names)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Foo and containing John Smith\n    photos = photosdb.photos(keywords=[\"Foo\"],persons=[\"John Smith\"])\n\n    # find all photos that include Alice Smith but do not contain the keyword Bar\n    photos = [p for p in photosdb.photos(persons=[\"Alice Smith\"]) \n                if p not in photosdb.photos(keywords=[\"Bar\"]) ]\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.original_filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n        )\n\nif __name__ == \"__main__\":\n    main()\n```\n\n```python\n\"\"\" Export all photos to specified directory using album names as folders\n    If file has been edited, also export the edited version, \n    otherwise, export the original version \n    This will result in duplicate photos if photo is in more than album \"\"\"\n\nimport os.path\nimport pathlib\nimport sys\n\nimport click\nfrom pathvalidate import is_valid_filepath, sanitize_filepath\n\nimport osxphotos\n\n\n@click.command()\n@click.argument(\"export_path\", type=click.Path(exists=True))\n@click.option(\n    \"--default-album\",\n    help=\"Default folder for photos with no album. Defaults to 'unfiled'\",\n    default=\"unfiled\",\n)\n@click.option(\n    \"--library-path\",\n    help=\"Path to Photos library, default to last used library\",\n    default=None,\n)\ndef export(export_path, default_album, library_path):\n    export_path = os.path.expanduser(export_path)\n    library_path = os.path.expanduser(library_path) if library_path else None\n\n    if library_path is not None:\n        photosdb = osxphotos.PhotosDB(library_path)\n    else:\n        photosdb = osxphotos.PhotosDB()\n\n    photos = photosdb.photos()\n\n    for p in photos:\n        if not p.ismissing:\n            albums = p.albums\n            if not albums:\n                albums = [default_album]\n            for album in albums:\n                click.echo(f\"exporting {p.filename} in album {album}\")\n\n                # make sure no invalid characters in destination path (could be in album name)\n                album_name = sanitize_filepath(album, platform=\"auto\")\n\n                # create destination folder, if necessary, based on album name\n                dest_dir = os.path.join(export_path, album_name)\n\n                # verify path is a valid path\n                if not is_valid_filepath(dest_dir, platform=\"auto\"):\n                    sys.exit(f\"Invalid filepath {dest_dir}\")\n\n                # create destination dir if needed\n                if not os.path.isdir(dest_dir):\n                    os.makedirs(dest_dir)\n\n                # export the photo\n                if p.hasadjustments:\n                    # export edited version\n                    exported = p.export(dest_dir, edited=True)\n                    edited_name = pathlib.Path(p.path_edited).name\n                    click.echo(f\"Exported {edited_name} to {exported}\")\n                # export unedited version\n                exported = p.export(dest_dir)\n                click.echo(f\"Exported {p.filename} to {exported}\")\n        else:\n            click.echo(f\"Skipping missing photo: {p.filename}\")\n\n\nif __name__ == \"__main__\":\n    export()  # pylint: disable=no-value-for-parameter\n```\n\n## Package Interface\n\n### PhotosDB\n\n#### Read a Photos library database\n\n```python\nosxphotos.PhotosDB() # not recommended, see Note below\nosxphotos.PhotosDB(path)\nosxphotos.PhotosDB(dbfile=path)\n```\n\nReads the Photos library database and returns a PhotosDB object.  \n\nPass the path to a Photos library or to a specific database file (e.g. \"/Users/smith/Pictures/Photos Library.photoslibrary\" or \"/Users/smith/Pictures/Photos Library.photoslibrary/database/photos.db\").  Normally, it's recommended you pass the path the .photoslibrary folder, not the actual database path.  The latter option is provided for debugging -- e.g. for reading a database file if you don't have the entire library. Path to photos library may be passed **either** as first argument **or** as named argument `dbfile`. **Note**: In Photos, users may specify a different library to open by holding down the *option* key while opening Photos.app. See also [get_last_library_path](#get_last_library_path) and [get_system_library_path](#get_system_library_path)\n\nIf an invalid path is passed, PhotosDB will raise `FileNotFoundError` exception.\n\n**Note**: If neither path or dbfile is passed, PhotosDB will use get_last_library_path to open the last opened Photos library.  This usually works but is not 100% reliable.  It can also lead to loading a different library than expected if the user has held down *option* key when opening Photos to switch libraries.  It is therefore recommended you explicitely pass the path to `PhotosDB()`.  \n\n#### Open the default (last opened) Photos library\n\nThe default library is the library that would open if the user opened Photos.app.\n\n```python\nimport osxphotos\nphotosdb = osxphotos.PhotosDB(osxphotos.utils.get_last_library_path())\n```\n\n#### Open System Photos library\n\nIn Photos 5 (Catalina / MacOS 10.15), you can use `get_system_library_path()` to get the path to the System photo library if you want to ensure PhotosDB opens the system library.  This does not work on older versions of MacOS. E.g.\n\n```python\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(path)\n```\n\nalso,\n\n```python\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(dbfile=path)\n```\n\n#### Open a specific Photos library\n```python\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(dbfile=\"/Users/smith/Pictures/Test.photoslibrary/database/photos.db\")\n```\n\nor\n\n```python\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Test.photoslibrary\")\n```\n\nPass the fully qualified path to the Photos library or the actual database file inside the library. The database is called photos.db and resides in the database folder in your Photos library.  If you pass only the path to the library, PhotosDB will add the database path automatically.  The option to pass the actual database path is provided so database files can be queried even if separated from the actual .photoslibrary file. \n\nReturns a PhotosDB object. \n\n**Note**: If you have a large library (e.g. many thousdands of photos), creating the PhotosDB object can take a long time (10s of seconds).  See [Implementation Notes](#implementation-notes) for additional details. \n\n#### `keywords`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nkeywords = photosdb.keywords\n```\n\nReturns a list of the keywords found in the Photos library\n\n#### `album_info`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nalbums = photosdb.album_info\n```\n\nReturns a list of [AlbumInfo](#AlbumInfo) objects representing albums in the database or empty list if there are no albums.  See also [albums](#albums).\n\n#### `albums`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nalbum_names = photosdb.albums\n```\n\nReturns a list of the album names found in the Photos library.  \n\n**Note**: In Photos 5.0 (MacOS 10.15/Catalina), It is possible to have more than one album with the same name in Photos.  Albums with duplicate names are treated as a single album and the photos in each are combined.  For example, if you have two albums named \"Wedding\" and each has 2 photos, osxphotos will treat this as a single album named \"Wedding\" with 4 photos in it.\n\nSee also [album_info](#album_info.)\n\n#### `albums_shared`\n\nReturns list of shared album names found in photos database (e.g. albums shared via iCloud photo sharing)\n\n**Note**: *Only valid for Photos 5 / MacOS 10.15*; on Photos <= 4, prints warning and returns empty list.\n\n#### `folder_info`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folder_info\n```\n\nReturns a list of [FolderInfo](#FolderInfo) objects representing top level folders in the database or empty list if there are no folders.  See also [folders](#folders).\n\n**Note**: Currently folder_info is only implemented for Photos 5 (Catalina); will return empty list and output warning if called on earlier database versions.\n\n#### `folders`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folders\n```\n\nReturns a list names of top level folder names in the database. \n\n**Note**: Currently folders is only implemented for Photos 5 (Catalina); will return empty list and output warning if called on earlier database versions.\n\n#### `persons`\n```python\n# assumes photosdb is a PhotosDB object (see above)\npersons = photosdb.persons\n```\n\nReturns a list of the persons (faces) found in the Photos library\n\n#### `keywords_as_dict`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nkeyword_dict = photosdb.keywords_as_dict\n```\n\nReturns a dictionary of keywords found in the Photos library where key is the keyword and value is the count of how many times that keyword appears in the library (ie. how many photos are tagged with the keyword).  Resulting dictionary is in reverse sorted order (e.g. keyword with the highest count is first).\n\n#### `persons_as_dict`\n```python\n# assumes photosdb is a PhotosDB object (see above)\npersons_dict = photosdb.persons_as_dict\n```\n\nReturns a dictionary of persons (faces) found in the Photos library where key is the person name and value is the count of how many times that person appears in the library (ie. how many photos are tagged with the person).  Resulting dictionary is in reverse sorted order (e.g. person who appears in the most photos is listed first).\n\n#### `albums_as_dict`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nalbums_dict = photosdb.albums_as_dict\n```\n\nReturns a dictionary of albums found in the Photos library where key is the album name and value is the count of how many photos are in the album.  Resulting dictionary is in reverse sorted order (e.g. album with the most photos is listed first).  \n\n**Note**: In Photos 5.0 (MacOS 10.15/Catalina), It is possible to have more than one album with the same name in Photos.  Albums with duplicate names are treated as a single album and the photos in each are combined.  For example, if you have two albums named \"Wedding\" and each has 2 photos, osxphotos will treat this as a single album named \"Wedding\" with 4 photos in it.\n\n#### `albums_shared_as_dict`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nalbums_shared_dict = photosdb.albums_shared_as_dict\n```\n\nReturns a dictionary of shared albums (e.g. shared via iCloud photo sharing) found in the Photos library where key is the album name and value is the count of how many photos are in the album.  Resulting dictionary is in reverse sorted order (e.g. album with the most photos is listed first).   \n\n**Note**: *Photos 5 / MacOS 10.15 only*.  On earlier versions of Photos, prints warning and returns empty dictionary.\n\n#### `library_path`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.library_path\n```\n\nReturns the path to the Photos library as a string\n\n#### `db_path`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.db_path\n```\n\nReturns the path to the Photos database PhotosDB was initialized with\n\n#### `db_version`\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.db_version\n```\n\nReturns the version number for Photos library database.  You likely won't need this but it's provided in case needed for debugging. PhotosDB will print a warning to `sys.stderr` if you open a database version that has not been tested. \n\n\n#### ` photos(keywords=None, uuid=None, persons=None, albums=None, images=True, movies=False, from_date=None, to_date=None)`\n\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos([keywords=['keyword',]], [uuid=['uuid',]], [persons=['person',]], [albums=['album',]],[from_date=datetime.datetime],[to_date=datetime.datetime])\n```\n\nReturns a list of [PhotoInfo](#PhotoInfo) objects.  Each PhotoInfo object represents a photo in the Photos Libary.\n\nIf called with no parameters, returns a list of every photo in the Photos library. \n\nMay be called with one or more of the following parameters:\n```python\nphotos = photosdb.photos(\n    keywords = [],\n    uuid = [],\n    persons = [],\n    albums = [],\n    images = bool,\n    movies = bool,\n    from_date = datetime.datetime,\n    to_date = datetime.datetime\n)\n```\n\n- ```keywords```: list of one or more keywords.  Returns only photos containing the keyword(s).  If more than one keyword is provided finds photos matching any of the keywords (e.g. treated as \"or\")\n- ```uuid```: list of one or more uuids.  Returns only photos whos UUID matches.  **Note**: The UUID is the universally unique identifier that the Photos database uses to identify each photo.  You shouldn't normally need to use this but it is a way to access a specific photo if you know the UUID.  If more than more uuid is provided, returns photos that match any of the uuids (e.g. treated as \"or\")\n- ```persons```: list of one or more persons. Returns only photos containing the person(s).  If more than one person provided, returns photos that match any of the persons (e.g. treated as \"or\")\n- ```albums```: list of one or more album names.  Returns only photos contained in the album(s). If more than one album name is provided, returns photos contained in any of the albums (.e.g. treated as \"or\")\n- ```images```: bool; if True, returns photos/images; default is True\n- ```movies```: bool; if True, returns movies/videos; default is False\n- ```from_date```: datetime.datetime; if provided, finds photos where creation date >= from_date; default is None\n- ```to_date```: datetime.datetime; if provided, finds photos where creation date <= to_date; default is None\n\nIf more than one of (keywords, uuid, persons, albums,from_date, to_date) is provided, they are treated as \"and\" criteria. E.g.\n\nFinds all photos with (keyword = \"wedding\" or \"birthday\") and (persons = \"Juan Rodriguez\")\n\n```python\nphotos=photosdb.photos(keywords=[\"wedding\",\"birthday\"],persons=[\"Juan Rodriguez\"])\n```\n\nFind all photos tagged with keyword \"wedding\":\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos(keywords=[\"wedding\"])\n ```\n\nFind all photos of Maria Smith\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(persons=[\"Maria Smith\"])\n```\n\nFind all photos in album \"Summer Vacation\" or album \"Ski Trip\"\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(albums=[\"Summer Vacation\", \"Ski Trip\"])\n```\n\nFind the single photo with uuid = \"osMNIO5sQFGZTbj9WrydRB\"\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(uuid=[\"osMNIO5sQFGZTbj9WrydRB\"])\n```\n\nIf you need to do more complicated searches, you can do this programmaticaly.  For example, find photos with keyword = \"Kids\" but not in album \"Vacation 2019\" \n\n```python\n# assumes photosdb is a PhotosDB object (see above)\nphotos1 = photosdb.photos(albums=[\"Vacation 2019\"])\nphotos2 = photosdb.photos(keywords=[\"Kids\"])\nphotos3 = [p for p in photos2 if p not in photos1]\n```\n\nBy default, photos() only returns images, not movies.  To also get movies, pass movies=True:\n```python\nphotos_and_movies = photosdb.photos(movies=True)\n```\n\nTo get only movies:\n```python\nmovies = photosdb.photos(images=False, movies=True)\n```\n**Note** PhotosDB.photos() may return a different number of photos than Photos.app reports in the GUI. This is because photos() returns [hidden](#hidden) photos, [shared](#shared) photos, and for [burst](#burst) photos, all selected burst images even if non-selected burst images have not been deleted. Photos only reports 1 single photo for each set of burst images until you \"finalize\" the burst by selecting key photos and deleting the others using the \"Make a selection\" option. \n\nFor example, in my library, Photos says I have 19,386 photos and 474 movies.  However, PhotosDB.photos() reports 25,002 photos.  The difference is due to 5,609 shared photos and 7 hidden photos.  (*Note* Shared photos only valid for Photos 5).  Similarly, filtering for just movies returns 625 results.  The difference between 625 and 474 reported by Photos is due to 151 shared movies.\n\n```python\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n>>> photos = photosdb.photos()\n>>> len(photos)\n25002\n>>> shared = [p for p in photos if p.shared]\n>>> len(shared)\n5609\n>>> not_shared = [p for p in photos if not p.shared]\n>>> len(not_shared)\n19393\n>>> hidden = [p for p in photos if p.hidden]\n>>> len(hidden)\n7\n>>> movies = photosdb.photos(movies=True, images=False)\n>>> len(movies)\n625\n>>> shared_movies = [m for m in movies if m.shared]\n>>> len(shared_movies)\n151\n>>>\n```\n\n\n### PhotoInfo \nPhotosDB.photos() returns a list of PhotoInfo objects.  Each PhotoInfo object represents a single photo in the Photos library.\n\n#### `uuid`\nReturns the universally unique identifier (uuid) of the photo.  This is how Photos keeps track of individual photos within the database.\n\n#### `filename`\nReturns the current filename of the photo on disk.  See also [original_filename](#original_filename)\n\n#### `original_filename`\nReturns the original filename of the photo when it was imported to Photos.  **Note**: Photos 5.0+ renames the photo when it adds the file to the library using UUID.  See also [filename](#filename)\n\n#### `date`\nReturns the create date of the photo as a datetime.datetime object\n\n#### `date_modified`\nReturns the modification date of the photo as a datetime.datetime object or None if photo has no modification date\n\n#### `description`\nReturns the description of the photo\n\n#### `title`\nReturns the title of the photo\n\n#### `keywords`\nReturns a list of keywords (e.g. tags) applied to the photo\n\n#### `albums`\nReturns a list of albums the photo is contained in. See also [album_info](#album_info).\n\n#### `album_info`\nReturns a list of [AlbumInfo](#AlbumInfo) objects representing the albums the photo is contained in.  See also [albums](#albums).\n\n#### `persons`\nReturns a list of the names of the persons in the photo\n\n#### `path`\nReturns the absolute path to the photo on disk as a string.  **Note**: this returns the path to the *original* unedited file (see [hasadjustments](#hasadjustments)).  If the file is missing on disk, path=`None` (see [ismissing](#ismissing)).\n\n#### `path_edited`\nReturns the absolute path to the edited photo on disk as a string.  If the photo has not been edited, returns `None`.  See also [path](#path) and [hasadjustments](#hasadjustments).  \n\n**Note**: will also return None if the edited photo is missing on disk. \n\n#### `ismissing`\nReturns `True` if the original image file is missing on disk, otherwise `False`.  This can occur if the file has been uploaded to iCloud but not yet downloaded to the local library or if the file was deleted or imported from a disk that has been unmounted and user hasn't enabled \"Copy items to the Photos library\" in Photos preferences. **Note**: this status is computed based on data in the Photos library and `ismissing` does not verify if the photo is actually missing. See also [path](#path).\n\n#### `hasadjustments`\nReturns `True` if the picture has been edited, otherwise `False`\n\n#### `external_edit`\nReturns `True` if the picture was edited in an external editor (outside Photos.app), otherwise `False`\n\n#### `favorite`\nReturns `True` if the picture has been marked as a favorite, otherwise `False`\n\n#### `hidden`\nReturns `True` if the picture has been marked as hidden, otherwise `False`\n\n#### `location`\nReturns latitude and longitude as a tuple of floats (latitude, longitude).  If location is not set, latitude and longitude are returned as `None`\n\n#### `place`\nReturns a [PlaceInfo](#PlaceInfo) object with reverse geolocation data or None if there is the photo has no reverse geolocation information.\n\n#### `shared`\nReturns True if photo is in a shared album, otherwise False.\n\n**Note**: *Only valid on Photos 5 / MacOS 10.15*; on Photos <= 4, returns None instead of True/False. \n\n#### `isphoto`\nReturns True if type is photo/still image, otherwise False\n\n#### `ismovie`\nReturns True if type is movie/video, otherwise False\n\n#### `iscloudasset`\nReturns True if photo is a cloud asset, that is, it is in a library synched to iCloud.  See also [incloud](#incloud)\n\n#### `incloud`\nReturns True if photo is a [cloud asset](#iscloudasset) and is synched to iCloud otherwise False if photo is a cloud asset and not yet synched to iCloud. Returns None if photo is not a cloud asset.\n\n**Note**: Applies to master (original) photo only.  It's possible for the master to be in iCloud but a local edited version is not yet synched to iCloud. `incloud` provides status of only the master photo.  osxphotos does not yet provide a means to determine if the edited version is in iCloud.  If you need this feature, please open an [issue](https://github.com/RhetTbull/osxphotos/issues).\n\n#### `uti`\nReturns Uniform Type Identifier (UTI) for the image, for example: 'public.jpeg' or 'com.apple.quicktime-movie'\n\n#### `burst`\nReturns True if photos is a burst image (e.g. part of a set of burst images), otherwise False.\nSee [burst_photos](#burst_photos)\n\n#### `burst_photos`\nIf photo is a burst image (see [burst](#burst)), returns a list of PhotoInfo objects for all other photos in the same burst set. If not a burst image, returns empty list.\n\nExample below gets list of all photos that are bursts, selects one of of them and prints out the names of the other images in the burst set.  PhotosDB.photos() will only return the photos in the burst set that the user [selected](https://support.apple.com/guide/photos/view-photo-bursts-phtde06a275d/mac) using \"Make a Selection...\" in Photos or the key image Photos selected if the user has not yet made a selection.  This is similar to how Photos displays and counts burst photos.  Using `burst_photos` you can access the other images in the burst set to export them, etc. \n\n```python\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n>>> bursts = [p for p in photosdb.photos() if p.burst]\n>>> burst_photo = bursts[5]\n>>> len(burst_photo.burst_photos)\n4\n>>> burst_photo.original_filename\n'IMG_9851.JPG'\n>>> for photo in burst_photo.burst_photos:\n...     print(photo.original_filename)\n...\nIMG_9853.JPG\nIMG_9852.JPG\nIMG_9854.JPG\nIMG_9855.JPG\n```\n\n#### `live_photo`\nReturns True if photo is an Apple live photo (ie. it has an associated \"live\" video component), otherwise returns False.  See [path_live_photo](#path_live_photo).\n\n#### `path_live_photo`\nReturns the path to the live video component of a [live photo](#live_photo). If photo is not a live photo, returns None.\n\n**Note**: will also return None if the live video component is missing on disk. It's possible that the original photo may be on disk ([ismissing](#ismissing)==False) but the video component is missing, likely because it has not been downloaded from iCloud.\n\n#### `portrait`\nReturns True if photo was taken in iPhone portrait mode, otherwise False.\n\n#### `hdr`\nReturns True if photo was taken in High Dynamic Range (HDR) mode, otherwise False.\n\n#### `selfie`\nReturns True if photo is a selfie (taken with front-facing camera), otherwise False.  \n\n**Note**: Only implemented for Photos version 3.0+.  On Photos version < 3.0, returns None.\n\n#### `time_lapse`\nReturns True if photo is a time lapse video, otherwise False.\n\n#### `panorama`\nReturns True if photo is a panorama, otherwise False.\n\n**Note**: The result of `PhotoInfo.panorama` will differ from the \"Panoramas\" Media Types smart album in that it will also identify panorama photos from older phones that Photos does not recognize as panoramas. \n\n#### `json()`\nReturns a JSON representation of all photo info \n\n#### `export()`\n`export(dest, *filename, edited=False, live_photo=False, overwrite=False, increment=True, sidecar_json=False, sidecar_xmp=False, use_photos_export=False, timeout=120, exiftool=False, no_xattr=False, use_albums_as_keywords=False, use_persons_as_keywords=False)`\n\nExport photo from the Photos library to another destination on disk.  \n- dest: must be valid destination path as str (or exception raised).\n- *filename (optional): name of picture as str; if not provided, will use current filename.  **NOTE**: if provided, user must ensure file extension (suffix) is correct. For example, if photo is .CR2 file, edited image may be .jpeg.  If you provide an extension different than what the actual file is, export will print a warning but will happily export the photo using the incorrect file extension.  e.g. to get the extension of the edited photo, look at [PhotoInfo.path_edited](#path_edited).\n- edited: boolean; if True (default=False), will export the edited version of the photo (or raise exception if no edited version)\n- overwrite: boolean; if True (default=False), will overwrite files if they alreay exist\n- live_photo: boolean; if True (default=False), will also export the associted .mov for live photos; exported live photo will be named filename.mov\n- increment: boolean; if True (default=True), will increment file name until a non-existent name is found\n- sidecar_json: (boolean, default = False); if True will also write a json sidecar with metadata in format readable by exiftool; sidecar filename will be dest/filename.json where filename is the stem of the photo name\n- sidecar_xmp: (boolean, default = False); if True will also write a XMP sidecar with metadata; sidecar filename will be dest/filename.xmp where filename is the stem of the photo name\n- use_photos_export: boolean; (default=False), if True will attempt to export photo via applescript interaction with Photos; useful for forcing download of missing photos.  This only works if the Photos library being used is the default library (last opened by Photos) as applescript will directly interact with whichever library Photos is currently using.\n- timeout: (int, default=120) timeout in seconds used with use_photos_export\n- exiftool: (boolean, default = False) if True, will use [exiftool](https://exiftool.org/) to write metadata directly to the exported photo; exiftool must be installed and in the system path\n- no_xattr: (boolean, default = False); if True, exports file without preserving extended attributes\n- use_albums_as_keywords: (boolean, default = False); if True, will use album names as keywords when exporting metadata with exiftool or sidecar\n- use_persons_as_keywords: (boolean, default = False); if True, will use person names as keywords when exporting metadata with exiftool or sidecar\n\nReturns: list of paths to exported files. More than one file could be exported, for example if live_photo=True, both the original imaage and the associated .mov file will be exported\n\nThe json sidecar file can be used by exiftool to apply the metadata from the json file to the image.  For example: \n\n```python\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\nphotos = photosdb.photos()\nphotos[0].export(\"/tmp\",\"photo_name.jpg\",sidecar_json=True)\n```\n\nThen\n\n`exiftool -j=photo_name.json photo_name.jpg`\n\nIf overwrite=False and increment=False, export will fail if destination file already exists\n\n**Implementation Note**: Because the usual python file copy methods don't preserve all the metadata available on MacOS, export uses `/usr/bin/ditto` to do the copy for export. ditto preserves most metadata such as extended attributes, permissions, ACLs, etc.\n\n#### <a name=\"rendertemplate\">`render_template()`</a>\n\n`render_template(template, none_str = \"_\", path_sep = None)`\nRender template string for photo.  none_str is used if template substitution results in None value and no default specified. \n- `template`: str in form \"{name,DEFAULT}\" where name is one of the values in table below. The \",\" and default value that follows are optional. If specified, \"DEFAULT\" will be used if \"name\" is None.  This is useful for values which are not always present, for example reverse geolocation data.\n- `none_str`: optional str to use as substitution when template value is None and no default specified in the template string.  default is \"_\".\n- `path_sep`: optional character to use as path separator, default is os.path.sep\n\nReturns a tuple of (rendered, unmatched) where rendered is a list of rendered strings with all substitutions made and unmatched is a list of any strings that resembled a template substitution but did not match a known substitution. E.g. if template contained \"{foo}\", unmatched would be [\"foo\"].\n\ne.g. `render_filepath_template(\"{created.year}/{foo}\", photo)` would return `([\"2020/{foo}\"],[\"foo\"])`\n\nIf you want to include \"{\" or \"}\" in the output, use \"{{\" or \"}}\"\n\ne.g. `render_filepath_template(\"{created.year}/{{foo}}\", photo)` would return `([\"2020/{foo}\"],[])`\n\nSome substitutions, notably `album`, `keyword`, and `person` could return multiple values, hence a new string will be return for each possible substitution (hence why a list of rendered strings is returned).  For example, a photo in 2 albums: 'Vacation' and 'Family' would result in the following rendered values if template was \"{created.year}/{album}\" and created.year == 2020: `[\"2020/Vacation\",\"2020/Family\"]` \n\nSee [Template Substitutions](#template-substitutions) for additional details.\n\n### AlbumInfo\nPhotosDB.album_info and PhotoInfo.album_info return a list of AlbumInfo objects.  Each AlbumInfo object represents a single album in the Photos library.\n\n#### `uuid`\nReturns the universally unique identifier (uuid) of the album.  This is how Photos keeps track of individual objects within the database.\n\n#### `title`\nReturns the title or name of the album.\n\n#### `photos`\nReturns a list of [PhotoInfo](#PhotoInfo) objects representing each photo contained in the album.\n\n#### `folder_list`\nReturns a hierarchical list of [FolderInfo](#FolderInfo) objects representing the folders the album is contained in.  For example, if album \"AlbumInFolder\" is in SubFolder2 of Folder1 as illustrated below, would return a list of `FolderInfo` objects representing [\"Folder1\", \"SubFolder2\"] \n\n```txt\nPhotos Library\n\u251c\u2500\u2500 Folder1\n\u00a0 \u00a0 \u251c\u2500\u2500 SubFolder1\n  \u00a0 \u251c\u2500\u2500 SubFolder2\n  \u00a0  \u00a0\u00a0 \u2514\u2500\u2500 AlbumInFolder\n```\n\n#### `folder_names`\nReturns a hierarchical list of names of the folders the album is contained in.  For example, if album is in SubFolder2 of Folder1 as illustrated below, would return [\"Folder1\", \"SubFolder2\"].  \n\n```txt\nPhotos Library\n\u251c\u2500\u2500 Folder1\n\u00a0 \u00a0 \u251c\u2500\u2500 SubFolder1\n  \u00a0 \u251c\u2500\u2500 SubFolder2\n  \u00a0  \u00a0\u00a0 \u2514\u2500\u2500 AlbumInFolder\n```\n\n#### `parent`\nReturns a [FolderInfo](#FolderInfo) object representing the albums parent folder or `None` if album is not a in a folder.\n\n\n### FolderInfo \nPhotosDB.folder_info returns a list of FolderInfo objects representing the top level folders in the library.  Each FolderInfo object represents a single folder in the Photos library.\n\n#### `uuid`\nReturns the universally unique identifier (uuid) of the folder.  This is how Photos keeps track of individual objects within the database.\n\n#### `title`\nReturns the title or name of the folder.\n\n#### `album_info`\nReturns a list of [AlbumInfo](#AlbumInfo) objects representing each album contained in the folder.\n\n#### `subfolders`\nReturns a list of [FolderInfo](#FolderInfo) objects representing the sub-folders of the folder.  \n\n#### `parent`\nReturns a [FolderInfo](#FolderInfo) object representing the folder's parent folder or `None` if album is not a in a folder.\n\n**Note**: FolderInfo and AlbumInfo objects effectively work as a linked list.  The children of a folder are contained in `subfolders` and `album_info` and the parent object of both `AlbumInfo` and `FolderInfo` is represented by `parent`.  For example:\n\n```python\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB()\n>>> photosdb.folder_info\n[<osxphotos.albuminfo.FolderInfo object at 0x10fcc0160>]\n>>> photosdb.folder_info[0].title\n'Folder1'\n>>> photosdb.folder_info[0].subfolders[1].title\n'SubFolder2'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].title\n'AlbumInFolder'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].parent.title\n'SubFolder2'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].parent.album_info[0].title\n'AlbumInFolder'\n```\n\n\n### PlaceInfo\n[PhotoInfo.place](#place) returns a PlaceInfo object if the photo contains valid reverse geolocation information.  PlaceInfo has the following properties.  \n\n**Note** For Photos versions <= 4, only `name`, `names`, and `country_code` properties are defined.  All others return `None`.  This is because older versions of Photos do not store the more detailed reverse geolocation information.\n\n#### `ishome`\nReturns `True` if photo place is user's home address, otherwise `False`.\n\n#### `name`\nReturns the name of the local place as str.  This is what Photos displays in the Info window.  **Note** Photos 5 uses a different algorithm to determine the name than earlier versions which means the same Photo may have a different place name in Photos 4 and Photos 5. `PhotoInfo.name` will return the name Photos would have shown depending on the version of the library being processed.  In Photos 5, the place name is generally more detailed than in earlier versions of Photos.\n\nFor example, I have photo in my library that under Photos 4, has place name of \"\u200e\u2068Mayfair Shopping Centre\u2069, \u2068Victoria\u2069, \u2068Canada\u2069\" and under Photos 5 the same photo has place name of \"Mayfair\u2069, \u2068Vancouver Island\u2069, \u2068Victoria\u2069, \u2068British Columbia\u2069, \u2068Canada\u2069\".\n\nReturns `None` if photo does not contain a name.\n\n#### `names`\nReturns a `PlaceNames` namedtuple with the following fields.  Each field is a list with zero or more values, sorted by area in ascending order.  E.g. `names.area_of_interest` could be ['Gulf Islands National Seashore', 'Santa Rosa Island'], [\"Knott's Berry Farm\"], or [] if `area_of_interest` not defined.  The value shown in Photos is the first value in the list. With the exception of `body_of_water` each of these field corresponds to an attribute of a [CLPlacemark](https://developer.apple.com/documentation/corelocation/clplacemark) object.  **Note** The `PlaceNames` namedtuple contains reserved fields not listed below (see implementation for details), thus it should be referenced only by name (e.g. `names.city`) and not by index.\n\n- `country`; the name of the country associated with the placemark.\n- `state_province`; administrativeArea, The state or province associated with the placemark.\n- `sub_administrative_area`; additional administrative area information for the placemark.\n- `city`; locality; the city associated with the placemark.\n- `additional_city_info`; subLocality, Additional city-level information for the placemark.\n- `ocean`; the name of the ocean associated with the placemark.\n- `area_of_interest`; areasOfInterest, The relevant areas of interest associated with the placemark.\n- `inland_water`; the name of the inland water body associated with the placemark.\n- `region`; the geographic region associated with the placemark.\n- `sub_throughfare`; additional street-level information for the placemark.\n- `postal_code`; the postal code associated with the placemark.\n- `street_address`; throughfare, The street address associated with the placemark.\n- `body_of_water`; in Photos 4, any body of water; in Photos 5 contains the union of ocean and inland_water\n\n**Note**: In Photos <= 4.0, only the following fields are defined; all others are set to empty list:\n\n- `country`\n- `state_province`\n- `sub_administrative_area`\n- `city` \n- `additional_city_info`\n- `area_of_interest`\n- `body_of_water`\n\n#### `country_code`\nReturns the country_code of place, for example \"GB\".  Returns `None` if PhotoInfo contains no country code.\n\n#### `address_str`\nReturns the full postal address as a string if defined, otherwise `None`.\n\nFor example: \"2038 18th St NW, Washington, DC  20009, United States\"\n\n#### `address`:\nReturns a `PostalAddress` namedtuple with details of the postal address containing the following fields:\n- `city`\n- `country`\n- `postal_code`\n- `state`\n- `street`\n- `sub_administrative_area`\n- `sub_locality`\n- `iso_country_code`\n\nFor example:\n```python\n>>> photo.place.address\nPostalAddress(street='3700 Wailea Alanui Dr', sub_locality=None, city='Kihei', sub_administrative_area='Maui', state='HI', postal_code='96753', country='United States', iso_country_code='US')\n>>> photo.place.address.postal_code\n'96753'\n```\n\n### Template Substitutions\n\nThe following substitutions are availabe for use with `PhotoInfo.render_template()` \n\n| Substitution | Description |\n|--------------|-------------|\n|{name}|Filename of the photo|\n|{original_name}|Photo's original filename when imported to Photos|\n|{title}|Title of the photo|\n|{descr}|Description of the photo|\n|{created.date}|Photo's creation date in ISO format, e.g. '2020-03-22'|\n|{created.year}|4-digit year of file creation time|\n|{created.yy}|2-digit year of file creation time|\n|{created.mm}|2-digit month of the file creation time (zero padded)|\n|{created.month}|Month name in user's locale of the file creation time|\n|{created.mon}|Month abbreviation in the user's locale of the file creation time|\n|{created.doy}|3-digit day of year (e.g Julian day) of file creation time, starting from 1 (zero padded)|\n|{modified.date}|Photo's modification date in ISO format, e.g. '2020-03-22'|\n|{modified.year}|4-digit year of file modification time|\n|{modified.yy}|2-digit year of file modification time|\n|{modified.mm}|2-digit month of the file modification time (zero padded)|\n|{modified.month}|Month name in user's locale of the file modification time|\n|{modified.mon}|Month abbreviation in the user's locale of the file modification time|\n|{modified.doy}|3-digit day of year (e.g Julian day) of file modification time, starting from 1 (zero padded)|\n|{place.name}|Place name from the photo's reverse geolocation data, as displayed in Photos|\n|{place.country_code}|The ISO country code from the photo's reverse geolocation data|\n|{place.name.country}|Country name from the photo's reverse geolocation data|\n|{place.name.state_province}|State or province name from the photo's reverse geolocation data|\n|{place.name.city}|City or locality name from the photo's reverse geolocation data|\n|{place.name.area_of_interest}|Area of interest name (e.g. landmark or public place) from the photo's reverse geolocation data|\n|{place.address}|Postal address from the photo's reverse geolocation data, e.g. '2007 18th St NW, Washington, DC 20009, United States'|\n|{place.address.street}|Street part of the postal address, e.g. '2007 18th St NW'|\n|{place.address.city}|City part of the postal address, e.g. 'Washington'|\n|{place.address.state_province}|State/province part of the postal address, e.g. 'DC'|\n|{place.address.postal_code}|Postal code part of the postal address, e.g. '20009'|\n|{place.address.country}|Country name of the postal address, e.g. 'United States'|\n|{place.address.country_code}|ISO country code of the postal address, e.g. 'US'|\n|{album}|Album(s) photo is contained in|\n|{keyword}|Keyword(s) assigned to photo|\n|{person}|Person(s) / face(s) in a photo|\n\n\n### Utility Functions\n\nThe following functions are located in osxphotos.utils\n\n#### `get_system_library_path()`\n\n**MacOS 10.15 Only** Returns path to System Photo Library as string.  On MacOS version < 10.15, returns None.\n\n#### `get_last_library_path()`\n\nReturns path to last opened Photo Library as string.  \n\n#### `list_photo_libraries()`\n\nReturns list of Photos libraries found on the system.  **Note**: On MacOS 10.15, this appears to list all libraries. On older systems, it may not find some libraries if they are not located in ~/Pictures.  Provided for convenience but do not rely on this to find all libraries on the system.\n\n#### `dd_to_dms_str(lat, lon)`\nConvert latitude, longitude in degrees to degrees, minutes, seconds as string.\n- `lat`: latitude in degrees\n- `lon`: longitude in degrees\nreturns: string tuple in format (\"51 deg 30' 12.86\\\\\" N\", \"0 deg 7' 54.50\\\\\" W\")\nThis is the same format used by exiftool's json format.\n\n#### `create_path_by_date(dest, dt)`\nCreates a path in dest folder in form dest/YYYY/MM/DD/\n- `dest`: valid path as str\n- `dt`: datetime.timetuple() object\nChecks to see if path exists, if it does, do nothing and return path. If path does not exist, creates it and returns path.  Useful for exporting photos to a date-based folder structure.\n\n## Examples\n\n```python\nimport osxphotos\n\ndef main():\n\n    photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n    print(f\"db file = {photosdb.db_path}\")\n    print(f\"db version = {photosdb.db_version}\")\n\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.album_names)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Kids and containing person Katie\n    photos = photosdb.photos(keywords=[\"Kids\"], persons=[\"Katie\"])\n    print(f\"found {len(photos)} photos\")\n\n    # find all photos that include Katie but do not contain the keyword wedding\n    photos = [\n        p\n        for p in photosdb.photos(persons=[\"Katie\"])\n        if p not in photosdb.photos(keywords=[\"wedding\"])\n    ]\n\n    # get all photos in the database\n    photos = photosdb.photos()\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n            p.ismissing,\n            p.hasadjustments,\n        )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Related Projects\n\n- [rhettbull/photosmeta](https://github.com/rhettbull/photosmeta): uses osxphotos and [exiftool](https://exiftool.org/) to apply metadata from Photos as exif data in the photo files.  Can also export photos while preserving metadata and also apply Photos keywords as spotlight tags to make it easier to search for photos using spotlight.  This is mostly made obsolete by osxphotos.  The one feature that photosmeta has that osxphotos does not is ability to update the metadata of the actual photo files in the Photos library without exporting them. (Use with caution!)\n- [patrikhson/photo-export](https://github.com/patrikhson/photo-export): Exports older versions of Photos databases.  Provided the inspiration for osxphotos.\n- [orangeturtle739/photos-export](https://github.com/orangeturtle739/photos-export): Set of scripts to export Photos libraries.\n- [ndbroadbent/icloud_photos_downloader](https://github.com/ndbroadbent/icloud_photos_downloader): Download photos from iCloud.  Currently unmaintained.\n- [AaronVanGeffen/ExportPhotosLibrary](https://github.com/AaronVanGeffen/ExportPhotosLibrary): Another python script for exporting older versions of Photos libraries.\n- [MossieurPropre/PhotosAlbumExporter](https://github.com/MossieurPropre/PhotosAlbumExporter): Javascript script to export photos while maintaining album structure.\n- [ajslater/magritte](https://github.com/ajslater/magritte): Another python command line script for exporting photos from older versions of Photos libraries.\n\n## Contributing\n\nContributing is easy!  if you find bugs or want to suggest additional features/changes, please open an [issue](https://github.com/rhettbull/osxphotos/issues/).\n\nI'll gladly consider pull requests for bug fixes or feature implementations.  \n\nIf you have an interesting example that shows usage of this package, submit an issue or pull request and i'll include it or link to it.\n\nTesting against \"real world\" Photos libraries would be especially helpful.  If you discover issues in testing against your Photos libraries, please open an issue.  I've done extensive testing against my own Photos library but that's a since data point and I'm certain there are issues lurking in various edge cases I haven't discovered yet.\n\n## Known Bugs\n\nMy goal is make osxphotos as reliable and comprehensive as possible.  The test suite currently has over 400 tests--but there are still some [bugs](https://github.com/RhetTbull/osxphotos/issues?q=is%3Aissue+is%3Aopen+label%3Abug) or incomplete features lurking.  If you find bugs please open an [issue](https://github.com/RhetTbull/osxphotos/issues).  Notable issues include:\n\n- RAW images imported to Photos with an associated jpeg preview are not handled correctly by osxphotos.  osxphotos query and export will operate on the jpeg preview instead of the RAW image as will `PhotoInfo.path`.  If the user selects \"Use RAW as original\" in Photos, the RAW image will be exported or operated on but the jpeg will be ignored.  See [Issue #101](https://github.com/RhetTbull/osxphotos/issues/101) Note: Beta version of fix for this bug is implemented in the current version of osxphotos.\n- The `--download-missing` option for `osxphotos export` does not work correctly with burst images.  It will download the primary image but not the other burst images.  See [Issue #75](https://github.com/RhetTbull/osxphotos/issues/75)\n\n## Implementation Notes\n\nThis package works by creating a copy of the sqlite3 database that photos uses to store data about the photos library. The class PhotosDB then queries this database to extract information about the photos such as persons (faces identified in the photos), albums, keywords, etc.  If your library is large, the database can be hundreds of MB in size and the copy read then  can take many 10s of seconds to complete.  Once copied, the entire database is processed and an in-memory data structure is created meaning all subsequent accesses of the PhotosDB object occur much more quickly. \n\nIf apple changes the database format this will likely break.\n\nApple does provide a framework ([PhotoKit](https://developer.apple.com/documentation/photokit?language=objc)) for querying the user's Photos library and I attempted to create the funcationality in this package using this framework but unfortunately PhotoKit does not provide access to much of the needed metadata (such as Faces/Persons) and Apple's System Integrity Protection (SIP) made the interface unreliable.  If you'd like to experiment with the PhotoKit interface, here's some sample [code](https://gist.github.com/RhetTbull/41cc85e5bdeb30f761147ce32fba5c94).  While copying the sqlite file is a bit kludgy, it allows osxphotos to provide access to all available metadata.\n\n## Dependencies\n- [PyObjC](https://pythonhosted.org/pyobjc/)\n- [PyYAML](https://pypi.org/project/PyYAML/)\n- [Click](https://pypi.org/project/click/)\n- [Mako](https://www.makotemplates.org/)\n- [bpylist2](https://pypi.org/project/bpylist2/)\n- [pathvalidate](https://pypi.org/project/pathvalidate/)\n\n## Acknowledgements\nThis project was originally inspired by [photo-export](https://github.com/patrikhson/photo-export) by Patrick F\u00e4ltstr\u00f6m,  Copyright (c) 2015 Patrik F\u00e4ltstr\u00f6m paf@frobbit.se\n\nI use [py-applescript](https://github.com/rdhyee/py-applescript) by \"Raymond Yee / rdhyee\" to interact with Photos. Rather than import this package, I included the entire package (which is published as public domain code) in a private package to prevent ambiguity with other applescript packages on PyPi. py-applescript uses a native bridge via PyObjC and is very fast compared to the other osascript based packages.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/RhetTbull/osxphotos", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RhetTbull/", "keywords": "", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "osxphotos", "package_url": "https://pypi.org/project/osxphotos/", "platform": "", "project_url": "https://pypi.org/project/osxphotos/", "project_urls": {"Download": "https://github.com/RhetTbull/osxphotos", "GitHub": "https://github.com/RhetTbull/osxphotos", "Homepage": "https://github.com/RhetTbull/"}, "release_url": "https://pypi.org/project/osxphotos/0.28.13/", "requires_dist": ["pyobjc (>=6.0.1)", "Click (>=7)", "PyYAML (>=5.1.2)", "Mako (>=1.1.1)", "pathvalidate (==2.2.1)", "bpylist2 (==2.0.3) ; python_version < \"3.8\"", "bpylist2 (==3.0.0) ; python_version >= \"3.8\""], "requires_python": "", "summary": "Manipulate (read-only) Apple's Photos app library on Mac OS X", "version": "0.28.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OSXPhotos</h1>\n<p><a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<ul>\n<li><a href=\"#osxphotos\" rel=\"nofollow\">OSXPhotos</a>\n<ul>\n<li><a href=\"#what-is-osxphotos\" rel=\"nofollow\">What is osxphotos?</a></li>\n<li><a href=\"#supported-operating-systems\" rel=\"nofollow\">Supported operating systems</a></li>\n<li><a href=\"#installation-instructions\" rel=\"nofollow\">Installation instructions</a></li>\n<li><a href=\"#command-line-usage\" rel=\"nofollow\">Command Line Usage</a></li>\n<li><a href=\"#example-uses-of-the-package\" rel=\"nofollow\">Example uses of the package</a></li>\n<li><a href=\"#package-interface\" rel=\"nofollow\">Package Interface</a>\n<ul>\n<li><a href=\"#photosdb\" rel=\"nofollow\">PhotosDB</a></li>\n<li><a href=\"#photoinfo\" rel=\"nofollow\">PhotoInfo</a></li>\n<li><a href=\"#albuminfo\" rel=\"nofollow\">AlbumInfo</a></li>\n<li><a href=\"#folderinfo\" rel=\"nofollow\">FolderInfo</a></li>\n<li><a href=\"#placeinfo\" rel=\"nofollow\">PlaceInfo</a></li>\n<li><a href=\"#template-substitutions\" rel=\"nofollow\">Template Substitutions</a></li>\n<li><a href=\"#utility-functions\" rel=\"nofollow\">Utility Functions</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#related-projects\" rel=\"nofollow\">Related Projects</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#known-bugs\" rel=\"nofollow\">Known Bugs</a></li>\n<li><a href=\"#implementation-notes\" rel=\"nofollow\">Implementation Notes</a></li>\n<li><a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#acknowledgements\" rel=\"nofollow\">Acknowledgements</a></li>\n</ul>\n</li>\n</ul>\n<h2>What is osxphotos?</h2>\n<p>OSXPhotos provides the ability to interact with and query Apple's Photos.app library database on MacOS. Using this package you can query the Photos database for information about the photos stored in a Photos library on your Mac--for example, file name, file path, and metadata such as keywords/tags, persons/faces, albums, etc. You can also easily export both the original and edited photos.</p>\n<h2>Supported operating systems</h2>\n<p>Only works on MacOS (aka Mac OS X). Tested on MacOS 10.12.6 / Photos 2.0, 10.13.6 / Photos 3.0, MacOS 10.14.5, 10.14.6 / Photos 4.0, MacOS 10.15.1 &amp; 10.15.4 / Photos 5.0.</p>\n<p>Requires python &gt;= 3.6 though if you use <code>pip</code> to install, you must use python &gt;= 3.8.  See notes <a href=\"#Installation-instructions\" rel=\"nofollow\">below</a>. I highly recommend running this with python &gt;= 3.8 as I'll eventually drop support for 3.6 and 3.7.</p>\n<p>This package will read Photos databases for any supported version on any supported OS version.  E.g. you can read a database created with Photos 4.0 on MacOS 10.14 on a machine running MacOS 10.12.</p>\n<h2>Installation instructions</h2>\n<p>osxmetadata uses setuptools, thus simply run:</p>\n<pre><code>python3 setup.py install\n</code></pre>\n<p>If you're using python 3.6 or 3.7, you'll need to do this first to get around an issue with bpylist2:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<p>You can also install directly from <a href=\"https://pypi.org/\" rel=\"nofollow\">pypi</a> but you must use python &gt;= 3.8 to avoid an error with bpylist2.  The package currently works fine with python 3.6 or 3.7 but I know of no way to get <code>pip</code> to install the right dependencies.</p>\n<pre><code>pip install osxphotos\n</code></pre>\n<h2>Command Line Usage</h2>\n<p>This package will install a command line utility called <code>osxphotos</code> that allows you to query the Photos database.  Alternatively, you can also run the command line utility like this: <code>python3 -m osxphotos</code></p>\n<p>If you only care about the command line tool, I recommend installing with <a href=\"https://github.com/pipxproject/pipx\" rel=\"nofollow\">pipx</a></p>\n<p>After installing pipx:\n<code>pipx install osxphotos</code></p>\n<p>Then you should be able to run <code>osxphotos</code> on the command line:</p>\n<pre><code>&gt; osxphotos\nUsage: osxphotos [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --db &lt;Photos database path&gt;  Specify Photos database path. Path to Photos\n                               library/database can be specified using either\n                               --db or directly as PHOTOS_LIBRARY positional\n                               argument. If neither --db or PHOTOS_LIBRARY\n                               provided, will attempt to find the library to\n                               use in the following order: 1. last opened\n                               library, 2. system library, 3.\n                               ~/Pictures/Photos Library.photoslibrary\n  --json                       Print output in JSON format.\n  -v, --version                Show the version and exit.\n  -h, --help                   Show this message and exit.\n\nCommands:\n  albums    Print out albums found in the Photos library.\n  dump      Print list of all photos &amp; associated info from the Photos...\n  export    Export photos from the Photos database.\n  help      Print help; for help on commands: help &lt;command&gt;.\n  info      Print out descriptive info of the Photos library database.\n  keywords  Print out keywords found in the Photos library.\n  list      Print list of Photos libraries found on the system.\n  persons   Print out persons (faces) found in the Photos library.\n  places    Print out places found in the Photos library.\n  query     Query the Photos database using 1 or more search options; if...\n</code></pre>\n<p>To get help on a specific command, use <code>osxphotos help &lt;command_name&gt;</code></p>\n<p>Example: <code>osxphotos help export</code></p>\n<pre><code>Usage: osxphotos export [OPTIONS] [PHOTOS_LIBRARY]... DEST\nUsage: __main__.py export [OPTIONS] [PHOTOS_LIBRARY]... DEST\n\n  Export photos from the Photos database. Export path DEST is required.\n  Optionally, query the Photos database using 1 or more search options;  if\n  more than one option is provided, they are treated as \"AND\"  (e.g. search\n  for photos matching all options). If no query options are provided, all\n  photos will be exported. By default, all versions of all photos will be\n  exported including edited versions, live photo movies, burst photos, and\n  associated RAW images.  See --skip-edited, --skip-live, --skip-bursts, and\n  --skip-raw options to modify this behavior.\n\nOptions:\n  --db &lt;Photos database path&gt;     Specify Photos database path. Path to Photos\n                                  library/database can be specified using\n                                  either --db or directly as PHOTOS_LIBRARY\n                                  positional argument. If neither --db or\n                                  PHOTOS_LIBRARY provided, will attempt to\n                                  find the library to use in the following\n                                  order: 1. last opened library, 2. system\n                                  library, 3. ~/Pictures/Photos\n                                  Library.photoslibrary\n  -V, --verbose                   Print verbose output.\n  --keyword KEYWORD               Search for photos with keyword KEYWORD. If\n                                  more than one keyword, treated as \"OR\", e.g.\n                                  find photos match any keyword\n  --person PERSON                 Search for photos with person PERSON. If\n                                  more than one person, treated as \"OR\", e.g.\n                                  find photos match any person\n  --album ALBUM                   Search for photos in album ALBUM. If more\n                                  than one album, treated as \"OR\", e.g. find\n                                  photos match any album\n  --folder FOLDER                 Search for photos in an album in folder\n                                  FOLDER. If more than one folder, treated as\n                                  \"OR\", e.g. find photos in any FOLDER.  Only\n                                  searches top level folders (e.g. does not\n                                  look at subfolders)\n  --uuid UUID                     Search for photos with UUID(s).\n  --title TITLE                   Search for TITLE in title of photo.\n  --no-title                      Search for photos with no title.\n  --description DESC              Search for DESC in description of photo.\n  --no-description                Search for photos with no description.\n  --place PLACE                   Search for PLACE in photo's reverse\n                                  geolocation info\n  --no-place                      Search for photos with no associated place\n                                  name info (no reverse geolocation info)\n  --uti UTI                       Search for photos whose uniform type\n                                  identifier (UTI) matches UTI\n  -i, --ignore-case               Case insensitive search for title,\n                                  description, or place. Does not apply to\n                                  keyword, person, or album.\n  --edited                        Search for photos that have been edited.\n  --external-edit                 Search for photos edited in external editor.\n  --favorite                      Search for photos marked favorite.\n  --not-favorite                  Search for photos not marked favorite.\n  --hidden                        Search for photos marked hidden.\n  --not-hidden                    Search for photos not marked hidden.\n  --shared                        Search for photos in shared iCloud album\n                                  (Photos 5 only).\n  --not-shared                    Search for photos not in shared iCloud album\n                                  (Photos 5 only).\n  --burst                         Search for photos that were taken in a\n                                  burst.\n  --not-burst                     Search for photos that are not part of a\n                                  burst.\n  --live                          Search for Apple live photos\n  --not-live                      Search for photos that are not Apple live\n                                  photos.\n  --portrait                      Search for Apple portrait mode photos.\n  --not-portrait                  Search for photos that are not Apple\n                                  portrait mode photos.\n  --screenshot                    Search for screenshot photos.\n  --not-screenshot                Search for photos that are not screenshot\n                                  photos.\n  --slow-mo                       Search for slow motion videos.\n  --not-slow-mo                   Search for photos that are not slow motion\n                                  videos.\n  --time-lapse                    Search for time lapse videos.\n  --not-time-lapse                Search for photos that are not time lapse\n                                  videos.\n  --hdr                           Search for high dynamic range (HDR) photos.\n  --not-hdr                       Search for photos that are not HDR photos.\n  --selfie                        Search for selfies (photos taken with front-\n                                  facing cameras).\n  --not-selfie                    Search for photos that are not selfies.\n  --panorama                      Search for panorama photos.\n  --not-panorama                  Search for photos that are not panoramas.\n  --has-raw                       Search for photos with both a jpeg and RAW\n                                  version\n  --only-movies                   Search only for movies (default searches\n                                  both images and movies).\n  --only-photos                   Search only for photos/images (default\n                                  searches both images and movies).\n  --from-date [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\n                                  Search by start item date, e.g.\n                                  2000-01-12T12:00:00 or 2000-12-31 (ISO 8601\n                                  w/o TZ).\n  --to-date [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\n                                  Search by end item date, e.g.\n                                  2000-01-12T12:00:00 or 2000-12-31 (ISO 8601\n                                  w/o TZ).\n  --overwrite                     Overwrite existing files. Default behavior\n                                  is to add (1), (2), etc to filename if file\n                                  already exists. Use this with caution as it\n                                  may create name collisions on export. (e.g.\n                                  if two files happen to have the same name)\n  --export-by-date                Automatically create output folders to\n                                  organize photos by date created (e.g.\n                                  DEST/2019/12/20/photoname.jpg).\n  --skip-edited                   Do not export edited version of photo if an\n                                  edited version exists.\n  --skip-bursts                   Do not export all associated burst images in\n                                  the library if a photo is a burst photo.\n  --skip-live                     Do not export the associated live video\n                                  component of a live photo.\n  --skip-raw                      Do not export associated RAW images of a\n                                  RAW/jpeg pair.  Note: this does not skip RAW\n                                  photos if the RAW photo does not have an\n                                  associated jpeg image (e.g. the RAW file was\n                                  imported to Photos without a jpeg preview).\n  --person-keyword                Use person in image as keyword/tag when\n                                  exporting metadata.\n  --album-keyword                 Use album name as keyword/tag when exporting\n                                  metadata.\n  --keyword-template TEMPLATE     For use with --exiftool, --sidecar; specify\n                                  a template string to use as keyword in the\n                                  form '{name,DEFAULT}' This is the same\n                                  format as --directory.  For example, if you\n                                  wanted to add the full path to the folder\n                                  and album photo is contained in as a keyword\n                                  when exporting you could specify --keyword-\n                                  template \"{folder_album}\" You may specify\n                                  more than one template, for example\n                                  --keyword-template \"{folder_album}\"\n                                  --keyword-template \"{created.year}\" See\n                                  Templating System below.\n  --current-name                  Use photo's current filename instead of\n                                  original filename for export.  Note:\n                                  Starting with Photos 5, all photos are\n                                  renamed upon import.  By default, photos are\n                                  exported with the the original name they had\n                                  before import.\n  --sidecar FORMAT                Create sidecar for each photo exported;\n                                  valid FORMAT values: xmp, json; --sidecar\n                                  json: create JSON sidecar useable by\n                                  exiftool (https://exiftool.org/) The sidecar\n                                  file can be used to apply metadata to the\n                                  file with exiftool, for example: \"exiftool\n                                  -j=photoname.json photoname.jpg\" The sidecar\n                                  file is named in format photoname.json\n                                  --sidecar xmp: create XMP sidecar used by\n                                  Adobe Lightroom, etc.The sidecar file is\n                                  named in format photoname.xmp\n  --download-missing              Attempt to download missing photos from\n                                  iCloud. The current implementation uses\n                                  Applescript to interact with Photos to\n                                  export the photo which will force Photos to\n                                  download from iCloud if the photo does not\n                                  exist on disk.  This will be slow and will\n                                  require internet connection. This obviously\n                                  only works if the Photos library is synched\n                                  to iCloud.  Note: --download-missing does\n                                  not currently export all burst images; only\n                                  the primary photo will be exported--\n                                  associated burst images will be skipped.\n  --exiftool                      Use exiftool to write metadata directly to\n                                  exported photos. To use this option,\n                                  exiftool must be installed and in the path.\n                                  exiftool may be installed from\n                                  https://exiftool.org/\n  --directory DIRECTORY           Optional template for specifying name of\n                                  output directory in the form\n                                  '{name,DEFAULT}'. See below for additional\n                                  details on templating system.\n  --no-extended-attributes        Don't copy extended attributes when\n                                  exporting.  You only need this if exporting\n                                  to a filesystem that doesn't support Mac OS\n                                  extended attributes.  Only use this if you\n                                  get an error while exporting.\n  -h, --help                      Show this message and exit.\n\n**Templating System**\n\nWith the --directory option you may specify a template for the export\ndirectory.  This directory will be appended to the export path specified in\nthe export DEST argument to export.  For example, if template is\n'{created.year}/{created.month}', and export desitnation DEST is\n'/Users/maria/Pictures/export', the actual export directory for a photo would\nbe '/Users/maria/Pictures/export/2020/March' if the photo was created in March\n2020.\n\nThe templating system may also be used with the --keyword-template option to\nset keywords on export (with --exiftool or --sidecar), for example, to set a\nnew keyword in format 'folder/subfolder/album' to preserve the folder/album\nstructure, you can use --keyword-template \"{folder_album}\"\n\nIn the template, valid template substitutions will be replaced by the\ncorresponding value from the table below.  Invalid substitutions will result\nin a an error and the script will abort.\n\nIf you want the actual text of the template substition to appear in the\nrendered name, use double braces, e.g. '{{' or '}}', thus using\n'{created.year}/{{name}}' for --directory would result in output of\n2020/{name}/photoname.jpg\n\nYou may specify an optional default value to use if the substitution does not\ncontain a value (e.g. the value is null) by specifying the default value after\na ',' in the template string: for example, if template is\n'{created.year}/{place.address,NO_ADDRESS}' but there was no address\nassociated with the photo, the resulting output would be:\n'2020/NO_ADDRESS/photoname.jpg'. If specified, the default value may not\ncontain a brace symbol ('{' or '}').\n\nIf you do not specify a default value and the template substitution has no\nvalue, '_' (underscore) will be used as the default value. For example, in the\nabove example, this would result in '2020/_/photoname.jpg' if address was null\nI plan to eventually extend the templating system to the exported filename so\nyou can specify the filename using a template.\n\nSubstitution                    Description\n{name}                          Current filename of the photo\n{original_name}                 Photo's original filename when imported to\n                                Photos\n{title}                         Title of the photo\n{descr}                         Description of the photo\n{created.date}                  Photo's creation date in ISO format, e.g.\n                                '2020-03-22'\n{created.year}                  4-digit year of file creation time\n{created.yy}                    2-digit year of file creation time\n{created.mm}                    2-digit month of the file creation time\n                                (zero padded)\n{created.month}                 Month name in user's locale of the file\n                                creation time\n{created.mon}                   Month abbreviation in the user's locale of\n                                the file creation time\n{created.doy}                   3-digit day of year (e.g Julian day) of file\n                                creation time, starting from 1 (zero padded)\n{modified.date}                 Photo's modification date in ISO format,\n                                e.g. '2020-03-22'\n{modified.year}                 4-digit year of file modification time\n{modified.yy}                   2-digit year of file modification time\n{modified.mm}                   2-digit month of the file modification time\n                                (zero padded)\n{modified.month}                Month name in user's locale of the file\n                                modification time\n{modified.mon}                  Month abbreviation in the user's locale of\n                                the file modification time\n{modified.doy}                  3-digit day of year (e.g Julian day) of file\n                                modification time, starting from 1 (zero\n                                padded)\n{place.name}                    Place name from the photo's reverse\n                                geolocation data, as displayed in Photos\n{place.country_code}            The ISO country code from the photo's\n                                reverse geolocation data\n{place.name.country}            Country name from the photo's reverse\n                                geolocation data\n{place.name.state_province}     State or province name from the photo's\n                                reverse geolocation data\n{place.name.city}               City or locality name from the photo's\n                                reverse geolocation data\n{place.name.area_of_interest}   Area of interest name (e.g. landmark or\n                                public place) from the photo's reverse\n                                geolocation data\n{place.address}                 Postal address from the photo's reverse\n                                geolocation data, e.g. '2007 18th St NW,\n                                Washington, DC 20009, United States'\n{place.address.street}          Street part of the postal address, e.g.\n                                '2007 18th St NW'\n{place.address.city}            City part of the postal address, e.g.\n                                'Washington'\n{place.address.state_province}  State/province part of the postal address,\n                                e.g. 'DC'\n{place.address.postal_code}     Postal code part of the postal address, e.g.\n                                '20009'\n{place.address.country}         Country name of the postal address, e.g.\n                                'United States'\n{place.address.country_code}    ISO country code of the postal address, e.g.\n                                'US'\n\nThe following substitutions may result in multiple values. Thus if specified\nfor --directory these could result in multiple copies of a photo being being\nexported, one to each directory.  For example: --directory\n'{created.year}/{album}' could result in the same photo being exported to each\nof the following directories if the photos were created in 2019 and were in\nalbums 'Vacation' and 'Family': 2019/Vacation, 2019/Family\n\nSubstitution    Description\n{album}         Album(s) photo is contained in\n{folder_album}  Folder path + album photo is contained in. e.g.\n                'Folder/Subfolder/Album' or just 'Album' if no enclosing\n                folder\n{keyword}       Keyword(s) assigned to photo\n{person}        Person(s) / face(s) in a photo\n</code></pre>\n<p>Example: export all photos to ~/Desktop/export group in folders by date created</p>\n<p><code>osxphotos export --export-by-date ~/Pictures/Photos\\ Library.photoslibrary ~/Desktop/export</code></p>\n<p><strong>Note</strong>: Photos library/database path can also be specified using --db option:</p>\n<p><code>osxphotos export --export-by-date --db ~/Pictures/Photos\\ Library.photoslibrary ~/Desktop/export</code></p>\n<p>Example: find all photos with keyword \"Kids\" and output results to json file named results.json:</p>\n<p><code>osxphotos query --keyword Kids --json ~/Pictures/Photos\\ Library.photoslibrary &gt;results.json</code></p>\n<p>Example: export photos to file structure based on 4-digit year and full name of month of photo's creation date:</p>\n<p><code>osxphotos export ~/Desktop/export --directory \"{created.year}/{created.month}\"</code></p>\n<h2>Example uses of the package</h2>\n<pre><span class=\"sd\">\"\"\" Simple usage of the package \"\"\"</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os.path</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s2\">\"~/Pictures/Photos Library.photoslibrary\"</span><span class=\"p\">)</span>\n    <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">persons</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">album_names</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">keywords_as_dict</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">persons_as_dict</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">albums_as_dict</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># find all photos with Keyword = Foo and containing John Smith</span>\n    <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Foo\"</span><span class=\"p\">],</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"John Smith\"</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># find all photos that include Alice Smith but do not contain the keyword Bar</span>\n    <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Alice Smith\"</span><span class=\"p\">])</span> \n                <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Bar\"</span><span class=\"p\">])</span> <span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">original_filename</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">albums</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">persons</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"sd\">\"\"\" Export all photos to specified directory using album names as folders</span>\n<span class=\"sd\">    If file has been edited, also export the edited version, </span>\n<span class=\"sd\">    otherwise, export the original version </span>\n<span class=\"sd\">    This will result in duplicate photos if photo is in more than album \"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os.path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">click</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathvalidate</span> <span class=\"kn\">import</span> <span class=\"n\">is_valid_filepath</span><span class=\"p\">,</span> <span class=\"n\">sanitize_filepath</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n\n<span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"s2\">\"export_path\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">exists</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"--default-album\"</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Default folder for photos with no album. Defaults to 'unfiled'\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"unfiled\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"--library-path\"</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Path to Photos library, default to last used library\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">export</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">,</span> <span class=\"n\">default_album</span><span class=\"p\">,</span> <span class=\"n\">library_path</span><span class=\"p\">):</span>\n    <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n    <span class=\"n\">library_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"n\">library_path</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">library_path</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">library_path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">library_path</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">()</span>\n\n    <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">ismissing</span><span class=\"p\">:</span>\n            <span class=\"n\">albums</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">albums</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">albums</span><span class=\"p\">:</span>\n                <span class=\"n\">albums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">default_album</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">album</span> <span class=\"ow\">in</span> <span class=\"n\">albums</span><span class=\"p\">:</span>\n                <span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"exporting </span><span class=\"si\">{</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\"> in album </span><span class=\"si\">{</span><span class=\"n\">album</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># make sure no invalid characters in destination path (could be in album name)</span>\n                <span class=\"n\">album_name</span> <span class=\"o\">=</span> <span class=\"n\">sanitize_filepath</span><span class=\"p\">(</span><span class=\"n\">album</span><span class=\"p\">,</span> <span class=\"n\">platform</span><span class=\"o\">=</span><span class=\"s2\">\"auto\"</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># create destination folder, if necessary, based on album name</span>\n                <span class=\"n\">dest_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">,</span> <span class=\"n\">album_name</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># verify path is a valid path</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_valid_filepath</span><span class=\"p\">(</span><span class=\"n\">dest_dir</span><span class=\"p\">,</span> <span class=\"n\">platform</span><span class=\"o\">=</span><span class=\"s2\">\"auto\"</span><span class=\"p\">):</span>\n                    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Invalid filepath </span><span class=\"si\">{</span><span class=\"n\">dest_dir</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># create destination dir if needed</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">dest_dir</span><span class=\"p\">):</span>\n                    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">dest_dir</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># export the photo</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">hasadjustments</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># export edited version</span>\n                    <span class=\"n\">exported</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">dest_dir</span><span class=\"p\">,</span> <span class=\"n\">edited</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"n\">edited_name</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">path_edited</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                    <span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Exported </span><span class=\"si\">{</span><span class=\"n\">edited_name</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">exported</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n                <span class=\"c1\"># export unedited version</span>\n                <span class=\"n\">exported</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">dest_dir</span><span class=\"p\">)</span>\n                <span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Exported </span><span class=\"si\">{</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">exported</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Skipping missing photo: </span><span class=\"si\">{</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">export</span><span class=\"p\">()</span>  <span class=\"c1\"># pylint: disable=no-value-for-parameter</span>\n</pre>\n<h2>Package Interface</h2>\n<h3>PhotosDB</h3>\n<h4>Read a Photos library database</h4>\n<pre><span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">()</span> <span class=\"c1\"># not recommended, see Note below</span>\n<span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">dbfile</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<p>Reads the Photos library database and returns a PhotosDB object.</p>\n<p>Pass the path to a Photos library or to a specific database file (e.g. \"/Users/smith/Pictures/Photos Library.photoslibrary\" or \"/Users/smith/Pictures/Photos Library.photoslibrary/database/photos.db\").  Normally, it's recommended you pass the path the .photoslibrary folder, not the actual database path.  The latter option is provided for debugging -- e.g. for reading a database file if you don't have the entire library. Path to photos library may be passed <strong>either</strong> as first argument <strong>or</strong> as named argument <code>dbfile</code>. <strong>Note</strong>: In Photos, users may specify a different library to open by holding down the <em>option</em> key while opening Photos.app. See also <a href=\"#get_last_library_path\" rel=\"nofollow\">get_last_library_path</a> and <a href=\"#get_system_library_path\" rel=\"nofollow\">get_system_library_path</a></p>\n<p>If an invalid path is passed, PhotosDB will raise <code>FileNotFoundError</code> exception.</p>\n<p><strong>Note</strong>: If neither path or dbfile is passed, PhotosDB will use get_last_library_path to open the last opened Photos library.  This usually works but is not 100% reliable.  It can also lead to loading a different library than expected if the user has held down <em>option</em> key when opening Photos to switch libraries.  It is therefore recommended you explicitely pass the path to <code>PhotosDB()</code>.</p>\n<h4>Open the default (last opened) Photos library</h4>\n<p>The default library is the library that would open if the user opened Photos.app.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n<span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">get_last_library_path</span><span class=\"p\">())</span>\n</pre>\n<h4>Open System Photos library</h4>\n<p>In Photos 5 (Catalina / MacOS 10.15), you can use <code>get_system_library_path()</code> to get the path to the System photo library if you want to ensure PhotosDB opens the system library.  This does not work on older versions of MacOS. E.g.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">get_system_library_path</span><span class=\"p\">()</span>\n<span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<p>also,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">get_system_library_path</span><span class=\"p\">()</span>\n<span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">dbfile</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<h4>Open a specific Photos library</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"n\">dbfile</span><span class=\"o\">=</span><span class=\"s2\">\"/Users/smith/Pictures/Test.photoslibrary/database/photos.db\"</span><span class=\"p\">)</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"s2\">\"/Users/smith/Pictures/Test.photoslibrary\"</span><span class=\"p\">)</span>\n</pre>\n<p>Pass the fully qualified path to the Photos library or the actual database file inside the library. The database is called photos.db and resides in the database folder in your Photos library.  If you pass only the path to the library, PhotosDB will add the database path automatically.  The option to pass the actual database path is provided so database files can be queried even if separated from the actual .photoslibrary file.</p>\n<p>Returns a PhotosDB object.</p>\n<p><strong>Note</strong>: If you have a large library (e.g. many thousdands of photos), creating the PhotosDB object can take a long time (10s of seconds).  See <a href=\"#implementation-notes\" rel=\"nofollow\">Implementation Notes</a> for additional details.</p>\n<h4><code>keywords</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">keywords</span>\n</pre>\n<p>Returns a list of the keywords found in the Photos library</p>\n<h4><code>album_info</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">albums</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">album_info</span>\n</pre>\n<p>Returns a list of <a href=\"#AlbumInfo\" rel=\"nofollow\">AlbumInfo</a> objects representing albums in the database or empty list if there are no albums.  See also <a href=\"#albums\" rel=\"nofollow\">albums</a>.</p>\n<h4><code>albums</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">album_names</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">albums</span>\n</pre>\n<p>Returns a list of the album names found in the Photos library.</p>\n<p><strong>Note</strong>: In Photos 5.0 (MacOS 10.15/Catalina), It is possible to have more than one album with the same name in Photos.  Albums with duplicate names are treated as a single album and the photos in each are combined.  For example, if you have two albums named \"Wedding\" and each has 2 photos, osxphotos will treat this as a single album named \"Wedding\" with 4 photos in it.</p>\n<p>See also <a href=\"#album_info.\" rel=\"nofollow\">album_info</a></p>\n<h4><code>albums_shared</code></h4>\n<p>Returns list of shared album names found in photos database (e.g. albums shared via iCloud photo sharing)</p>\n<p><strong>Note</strong>: <em>Only valid for Photos 5 / MacOS 10.15</em>; on Photos &lt;= 4, prints warning and returns empty list.</p>\n<h4><code>folder_info</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">folders</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span>\n</pre>\n<p>Returns a list of <a href=\"#FolderInfo\" rel=\"nofollow\">FolderInfo</a> objects representing top level folders in the database or empty list if there are no folders.  See also <a href=\"#folders\" rel=\"nofollow\">folders</a>.</p>\n<p><strong>Note</strong>: Currently folder_info is only implemented for Photos 5 (Catalina); will return empty list and output warning if called on earlier database versions.</p>\n<h4><code>folders</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">folders</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folders</span>\n</pre>\n<p>Returns a list names of top level folder names in the database.</p>\n<p><strong>Note</strong>: Currently folders is only implemented for Photos 5 (Catalina); will return empty list and output warning if called on earlier database versions.</p>\n<h4><code>persons</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">persons</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">persons</span>\n</pre>\n<p>Returns a list of the persons (faces) found in the Photos library</p>\n<h4><code>keywords_as_dict</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">keyword_dict</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">keywords_as_dict</span>\n</pre>\n<p>Returns a dictionary of keywords found in the Photos library where key is the keyword and value is the count of how many times that keyword appears in the library (ie. how many photos are tagged with the keyword).  Resulting dictionary is in reverse sorted order (e.g. keyword with the highest count is first).</p>\n<h4><code>persons_as_dict</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">persons_dict</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">persons_as_dict</span>\n</pre>\n<p>Returns a dictionary of persons (faces) found in the Photos library where key is the person name and value is the count of how many times that person appears in the library (ie. how many photos are tagged with the person).  Resulting dictionary is in reverse sorted order (e.g. person who appears in the most photos is listed first).</p>\n<h4><code>albums_as_dict</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">albums_dict</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">albums_as_dict</span>\n</pre>\n<p>Returns a dictionary of albums found in the Photos library where key is the album name and value is the count of how many photos are in the album.  Resulting dictionary is in reverse sorted order (e.g. album with the most photos is listed first).</p>\n<p><strong>Note</strong>: In Photos 5.0 (MacOS 10.15/Catalina), It is possible to have more than one album with the same name in Photos.  Albums with duplicate names are treated as a single album and the photos in each are combined.  For example, if you have two albums named \"Wedding\" and each has 2 photos, osxphotos will treat this as a single album named \"Wedding\" with 4 photos in it.</p>\n<h4><code>albums_shared_as_dict</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">albums_shared_dict</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">albums_shared_as_dict</span>\n</pre>\n<p>Returns a dictionary of shared albums (e.g. shared via iCloud photo sharing) found in the Photos library where key is the album name and value is the count of how many photos are in the album.  Resulting dictionary is in reverse sorted order (e.g. album with the most photos is listed first).</p>\n<p><strong>Note</strong>: <em>Photos 5 / MacOS 10.15 only</em>.  On earlier versions of Photos, prints warning and returns empty dictionary.</p>\n<h4><code>library_path</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">library_path</span>\n</pre>\n<p>Returns the path to the Photos library as a string</p>\n<h4><code>db_path</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">db_path</span>\n</pre>\n<p>Returns the path to the Photos database PhotosDB was initialized with</p>\n<h4><code>db_version</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">db_version</span>\n</pre>\n<p>Returns the version number for Photos library database.  You likely won't need this but it's provided in case needed for debugging. PhotosDB will print a warning to <code>sys.stderr</code> if you open a database version that has not been tested.</p>\n<h4><code>photos(keywords=None, uuid=None, persons=None, albums=None, images=True, movies=False, from_date=None, to_date=None)</code></h4>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">([</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'keyword'</span><span class=\"p\">,]],</span> <span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'uuid'</span><span class=\"p\">,]],</span> <span class=\"p\">[</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'person'</span><span class=\"p\">,]],</span> <span class=\"p\">[</span><span class=\"n\">albums</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'album'</span><span class=\"p\">,]],[</span><span class=\"n\">from_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">],[</span><span class=\"n\">to_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">])</span>\n</pre>\n<p>Returns a list of <a href=\"#PhotoInfo\" rel=\"nofollow\">PhotoInfo</a> objects.  Each PhotoInfo object represents a photo in the Photos Libary.</p>\n<p>If called with no parameters, returns a list of every photo in the Photos library.</p>\n<p>May be called with one or more of the following parameters:</p>\n<pre><span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span>\n    <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n    <span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n    <span class=\"n\">persons</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n    <span class=\"n\">albums</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n    <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n    <span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n    <span class=\"n\">from_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span>\n    <span class=\"n\">to_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n<span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>keywords</code>: list of one or more keywords.  Returns only photos containing the keyword(s).  If more than one keyword is provided finds photos matching any of the keywords (e.g. treated as \"or\")</li>\n<li><code>uuid</code>: list of one or more uuids.  Returns only photos whos UUID matches.  <strong>Note</strong>: The UUID is the universally unique identifier that the Photos database uses to identify each photo.  You shouldn't normally need to use this but it is a way to access a specific photo if you know the UUID.  If more than more uuid is provided, returns photos that match any of the uuids (e.g. treated as \"or\")</li>\n<li><code>persons</code>: list of one or more persons. Returns only photos containing the person(s).  If more than one person provided, returns photos that match any of the persons (e.g. treated as \"or\")</li>\n<li><code>albums</code>: list of one or more album names.  Returns only photos contained in the album(s). If more than one album name is provided, returns photos contained in any of the albums (.e.g. treated as \"or\")</li>\n<li><code>images</code>: bool; if True, returns photos/images; default is True</li>\n<li><code>movies</code>: bool; if True, returns movies/videos; default is False</li>\n<li><code>from_date</code>: datetime.datetime; if provided, finds photos where creation date &gt;= from_date; default is None</li>\n<li><code>to_date</code>: datetime.datetime; if provided, finds photos where creation date &lt;= to_date; default is None</li>\n</ul>\n<p>If more than one of (keywords, uuid, persons, albums,from_date, to_date) is provided, they are treated as \"and\" criteria. E.g.</p>\n<p>Finds all photos with (keyword = \"wedding\" or \"birthday\") and (persons = \"Juan Rodriguez\")</p>\n<pre><span class=\"n\">photos</span><span class=\"o\">=</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"wedding\"</span><span class=\"p\">,</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">],</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Juan Rodriguez\"</span><span class=\"p\">])</span>\n</pre>\n<p>Find all photos tagged with keyword \"wedding\":</p>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"wedding\"</span><span class=\"p\">])</span>\n</pre>\n<p>Find all photos of Maria Smith</p>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photos</span><span class=\"o\">=</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Maria Smith\"</span><span class=\"p\">])</span>\n</pre>\n<p>Find all photos in album \"Summer Vacation\" or album \"Ski Trip\"</p>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photos</span><span class=\"o\">=</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">albums</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Summer Vacation\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Ski Trip\"</span><span class=\"p\">])</span>\n</pre>\n<p>Find the single photo with uuid = \"osMNIO5sQFGZTbj9WrydRB\"</p>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photos</span><span class=\"o\">=</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"osMNIO5sQFGZTbj9WrydRB\"</span><span class=\"p\">])</span>\n</pre>\n<p>If you need to do more complicated searches, you can do this programmaticaly.  For example, find photos with keyword = \"Kids\" but not in album \"Vacation 2019\"</p>\n<pre><span class=\"c1\"># assumes photosdb is a PhotosDB object (see above)</span>\n<span class=\"n\">photos1</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">albums</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Vacation 2019\"</span><span class=\"p\">])</span>\n<span class=\"n\">photos2</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Kids\"</span><span class=\"p\">])</span>\n<span class=\"n\">photos3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos2</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">photos1</span><span class=\"p\">]</span>\n</pre>\n<p>By default, photos() only returns images, not movies.  To also get movies, pass movies=True:</p>\n<pre><span class=\"n\">photos_and_movies</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>To get only movies:</p>\n<pre><span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">movies</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong> PhotosDB.photos() may return a different number of photos than Photos.app reports in the GUI. This is because photos() returns <a href=\"#hidden\" rel=\"nofollow\">hidden</a> photos, <a href=\"#shared\" rel=\"nofollow\">shared</a> photos, and for <a href=\"#burst\" rel=\"nofollow\">burst</a> photos, all selected burst images even if non-selected burst images have not been deleted. Photos only reports 1 single photo for each set of burst images until you \"finalize\" the burst by selecting key photos and deleting the others using the \"Make a selection\" option.</p>\n<p>For example, in my library, Photos says I have 19,386 photos and 474 movies.  However, PhotosDB.photos() reports 25,002 photos.  The difference is due to 5,609 shared photos and 7 hidden photos.  (<em>Note</em> Shared photos only valid for Photos 5).  Similarly, filtering for just movies returns 625 results.  The difference between 625 and 474 reported by Photos is due to 151 shared movies.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"s2\">\"/Users/smith/Pictures/Photos Library.photoslibrary\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">photos</span><span class=\"p\">)</span>\n<span class=\"mi\">25002</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">shared</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos</span> <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shared</span><span class=\"p\">)</span>\n<span class=\"mi\">5609</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">not_shared</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">not_shared</span><span class=\"p\">)</span>\n<span class=\"mi\">19393</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos</span> <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">hidden</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hidden</span><span class=\"p\">)</span>\n<span class=\"mi\">7</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">images</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"p\">)</span>\n<span class=\"mi\">625</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">shared_movies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">movies</span> <span class=\"k\">if</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shared_movies</span><span class=\"p\">)</span>\n<span class=\"mi\">151</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<h3>PhotoInfo</h3>\n<p>PhotosDB.photos() returns a list of PhotoInfo objects.  Each PhotoInfo object represents a single photo in the Photos library.</p>\n<h4><code>uuid</code></h4>\n<p>Returns the universally unique identifier (uuid) of the photo.  This is how Photos keeps track of individual photos within the database.</p>\n<h4><code>filename</code></h4>\n<p>Returns the current filename of the photo on disk.  See also <a href=\"#original_filename\" rel=\"nofollow\">original_filename</a></p>\n<h4><code>original_filename</code></h4>\n<p>Returns the original filename of the photo when it was imported to Photos.  <strong>Note</strong>: Photos 5.0+ renames the photo when it adds the file to the library using UUID.  See also <a href=\"#filename\" rel=\"nofollow\">filename</a></p>\n<h4><code>date</code></h4>\n<p>Returns the create date of the photo as a datetime.datetime object</p>\n<h4><code>date_modified</code></h4>\n<p>Returns the modification date of the photo as a datetime.datetime object or None if photo has no modification date</p>\n<h4><code>description</code></h4>\n<p>Returns the description of the photo</p>\n<h4><code>title</code></h4>\n<p>Returns the title of the photo</p>\n<h4><code>keywords</code></h4>\n<p>Returns a list of keywords (e.g. tags) applied to the photo</p>\n<h4><code>albums</code></h4>\n<p>Returns a list of albums the photo is contained in. See also <a href=\"#album_info\" rel=\"nofollow\">album_info</a>.</p>\n<h4><code>album_info</code></h4>\n<p>Returns a list of <a href=\"#AlbumInfo\" rel=\"nofollow\">AlbumInfo</a> objects representing the albums the photo is contained in.  See also <a href=\"#albums\" rel=\"nofollow\">albums</a>.</p>\n<h4><code>persons</code></h4>\n<p>Returns a list of the names of the persons in the photo</p>\n<h4><code>path</code></h4>\n<p>Returns the absolute path to the photo on disk as a string.  <strong>Note</strong>: this returns the path to the <em>original</em> unedited file (see <a href=\"#hasadjustments\" rel=\"nofollow\">hasadjustments</a>).  If the file is missing on disk, path=<code>None</code> (see <a href=\"#ismissing\" rel=\"nofollow\">ismissing</a>).</p>\n<h4><code>path_edited</code></h4>\n<p>Returns the absolute path to the edited photo on disk as a string.  If the photo has not been edited, returns <code>None</code>.  See also <a href=\"#path\" rel=\"nofollow\">path</a> and <a href=\"#hasadjustments\" rel=\"nofollow\">hasadjustments</a>.</p>\n<p><strong>Note</strong>: will also return None if the edited photo is missing on disk.</p>\n<h4><code>ismissing</code></h4>\n<p>Returns <code>True</code> if the original image file is missing on disk, otherwise <code>False</code>.  This can occur if the file has been uploaded to iCloud but not yet downloaded to the local library or if the file was deleted or imported from a disk that has been unmounted and user hasn't enabled \"Copy items to the Photos library\" in Photos preferences. <strong>Note</strong>: this status is computed based on data in the Photos library and <code>ismissing</code> does not verify if the photo is actually missing. See also <a href=\"#path\" rel=\"nofollow\">path</a>.</p>\n<h4><code>hasadjustments</code></h4>\n<p>Returns <code>True</code> if the picture has been edited, otherwise <code>False</code></p>\n<h4><code>external_edit</code></h4>\n<p>Returns <code>True</code> if the picture was edited in an external editor (outside Photos.app), otherwise <code>False</code></p>\n<h4><code>favorite</code></h4>\n<p>Returns <code>True</code> if the picture has been marked as a favorite, otherwise <code>False</code></p>\n<h4><code>hidden</code></h4>\n<p>Returns <code>True</code> if the picture has been marked as hidden, otherwise <code>False</code></p>\n<h4><code>location</code></h4>\n<p>Returns latitude and longitude as a tuple of floats (latitude, longitude).  If location is not set, latitude and longitude are returned as <code>None</code></p>\n<h4><code>place</code></h4>\n<p>Returns a <a href=\"#PlaceInfo\" rel=\"nofollow\">PlaceInfo</a> object with reverse geolocation data or None if there is the photo has no reverse geolocation information.</p>\n<h4><code>shared</code></h4>\n<p>Returns True if photo is in a shared album, otherwise False.</p>\n<p><strong>Note</strong>: <em>Only valid on Photos 5 / MacOS 10.15</em>; on Photos &lt;= 4, returns None instead of True/False.</p>\n<h4><code>isphoto</code></h4>\n<p>Returns True if type is photo/still image, otherwise False</p>\n<h4><code>ismovie</code></h4>\n<p>Returns True if type is movie/video, otherwise False</p>\n<h4><code>iscloudasset</code></h4>\n<p>Returns True if photo is a cloud asset, that is, it is in a library synched to iCloud.  See also <a href=\"#incloud\" rel=\"nofollow\">incloud</a></p>\n<h4><code>incloud</code></h4>\n<p>Returns True if photo is a <a href=\"#iscloudasset\" rel=\"nofollow\">cloud asset</a> and is synched to iCloud otherwise False if photo is a cloud asset and not yet synched to iCloud. Returns None if photo is not a cloud asset.</p>\n<p><strong>Note</strong>: Applies to master (original) photo only.  It's possible for the master to be in iCloud but a local edited version is not yet synched to iCloud. <code>incloud</code> provides status of only the master photo.  osxphotos does not yet provide a means to determine if the edited version is in iCloud.  If you need this feature, please open an <a href=\"https://github.com/RhetTbull/osxphotos/issues\" rel=\"nofollow\">issue</a>.</p>\n<h4><code>uti</code></h4>\n<p>Returns Uniform Type Identifier (UTI) for the image, for example: 'public.jpeg' or 'com.apple.quicktime-movie'</p>\n<h4><code>burst</code></h4>\n<p>Returns True if photos is a burst image (e.g. part of a set of burst images), otherwise False.\nSee <a href=\"#burst_photos\" rel=\"nofollow\">burst_photos</a></p>\n<h4><code>burst_photos</code></h4>\n<p>If photo is a burst image (see <a href=\"#burst\" rel=\"nofollow\">burst</a>), returns a list of PhotoInfo objects for all other photos in the same burst set. If not a burst image, returns empty list.</p>\n<p>Example below gets list of all photos that are bursts, selects one of of them and prints out the names of the other images in the burst set.  PhotosDB.photos() will only return the photos in the burst set that the user <a href=\"https://support.apple.com/guide/photos/view-photo-bursts-phtde06a275d/mac\" rel=\"nofollow\">selected</a> using \"Make a Selection...\" in Photos or the key image Photos selected if the user has not yet made a selection.  This is similar to how Photos displays and counts burst photos.  Using <code>burst_photos</code> you can access the other images in the burst set to export them, etc.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"s2\">\"/Users/smith/Pictures/Photos Library.photoslibrary\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bursts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">burst</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">burst_photo</span> <span class=\"o\">=</span> <span class=\"n\">bursts</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">burst_photo</span><span class=\"o\">.</span><span class=\"n\">burst_photos</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">burst_photo</span><span class=\"o\">.</span><span class=\"n\">original_filename</span>\n<span class=\"s1\">'IMG_9851.JPG'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">photo</span> <span class=\"ow\">in</span> <span class=\"n\">burst_photo</span><span class=\"o\">.</span><span class=\"n\">burst_photos</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">original_filename</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">IMG_9853</span><span class=\"o\">.</span><span class=\"n\">JPG</span>\n<span class=\"n\">IMG_9852</span><span class=\"o\">.</span><span class=\"n\">JPG</span>\n<span class=\"n\">IMG_9854</span><span class=\"o\">.</span><span class=\"n\">JPG</span>\n<span class=\"n\">IMG_9855</span><span class=\"o\">.</span><span class=\"n\">JPG</span>\n</pre>\n<h4><code>live_photo</code></h4>\n<p>Returns True if photo is an Apple live photo (ie. it has an associated \"live\" video component), otherwise returns False.  See <a href=\"#path_live_photo\" rel=\"nofollow\">path_live_photo</a>.</p>\n<h4><code>path_live_photo</code></h4>\n<p>Returns the path to the live video component of a <a href=\"#live_photo\" rel=\"nofollow\">live photo</a>. If photo is not a live photo, returns None.</p>\n<p><strong>Note</strong>: will also return None if the live video component is missing on disk. It's possible that the original photo may be on disk (<a href=\"#ismissing\" rel=\"nofollow\">ismissing</a>==False) but the video component is missing, likely because it has not been downloaded from iCloud.</p>\n<h4><code>portrait</code></h4>\n<p>Returns True if photo was taken in iPhone portrait mode, otherwise False.</p>\n<h4><code>hdr</code></h4>\n<p>Returns True if photo was taken in High Dynamic Range (HDR) mode, otherwise False.</p>\n<h4><code>selfie</code></h4>\n<p>Returns True if photo is a selfie (taken with front-facing camera), otherwise False.</p>\n<p><strong>Note</strong>: Only implemented for Photos version 3.0+.  On Photos version &lt; 3.0, returns None.</p>\n<h4><code>time_lapse</code></h4>\n<p>Returns True if photo is a time lapse video, otherwise False.</p>\n<h4><code>panorama</code></h4>\n<p>Returns True if photo is a panorama, otherwise False.</p>\n<p><strong>Note</strong>: The result of <code>PhotoInfo.panorama</code> will differ from the \"Panoramas\" Media Types smart album in that it will also identify panorama photos from older phones that Photos does not recognize as panoramas.</p>\n<h4><code>json()</code></h4>\n<p>Returns a JSON representation of all photo info</p>\n<h4><code>export()</code></h4>\n<p><code>export(dest, *filename, edited=False, live_photo=False, overwrite=False, increment=True, sidecar_json=False, sidecar_xmp=False, use_photos_export=False, timeout=120, exiftool=False, no_xattr=False, use_albums_as_keywords=False, use_persons_as_keywords=False)</code></p>\n<p>Export photo from the Photos library to another destination on disk.</p>\n<ul>\n<li>dest: must be valid destination path as str (or exception raised).</li>\n<li>*filename (optional): name of picture as str; if not provided, will use current filename.  <strong>NOTE</strong>: if provided, user must ensure file extension (suffix) is correct. For example, if photo is .CR2 file, edited image may be .jpeg.  If you provide an extension different than what the actual file is, export will print a warning but will happily export the photo using the incorrect file extension.  e.g. to get the extension of the edited photo, look at <a href=\"#path_edited\" rel=\"nofollow\">PhotoInfo.path_edited</a>.</li>\n<li>edited: boolean; if True (default=False), will export the edited version of the photo (or raise exception if no edited version)</li>\n<li>overwrite: boolean; if True (default=False), will overwrite files if they alreay exist</li>\n<li>live_photo: boolean; if True (default=False), will also export the associted .mov for live photos; exported live photo will be named filename.mov</li>\n<li>increment: boolean; if True (default=True), will increment file name until a non-existent name is found</li>\n<li>sidecar_json: (boolean, default = False); if True will also write a json sidecar with metadata in format readable by exiftool; sidecar filename will be dest/filename.json where filename is the stem of the photo name</li>\n<li>sidecar_xmp: (boolean, default = False); if True will also write a XMP sidecar with metadata; sidecar filename will be dest/filename.xmp where filename is the stem of the photo name</li>\n<li>use_photos_export: boolean; (default=False), if True will attempt to export photo via applescript interaction with Photos; useful for forcing download of missing photos.  This only works if the Photos library being used is the default library (last opened by Photos) as applescript will directly interact with whichever library Photos is currently using.</li>\n<li>timeout: (int, default=120) timeout in seconds used with use_photos_export</li>\n<li>exiftool: (boolean, default = False) if True, will use <a href=\"https://exiftool.org/\" rel=\"nofollow\">exiftool</a> to write metadata directly to the exported photo; exiftool must be installed and in the system path</li>\n<li>no_xattr: (boolean, default = False); if True, exports file without preserving extended attributes</li>\n<li>use_albums_as_keywords: (boolean, default = False); if True, will use album names as keywords when exporting metadata with exiftool or sidecar</li>\n<li>use_persons_as_keywords: (boolean, default = False); if True, will use person names as keywords when exporting metadata with exiftool or sidecar</li>\n</ul>\n<p>Returns: list of paths to exported files. More than one file could be exported, for example if live_photo=True, both the original imaage and the associated .mov file will be exported</p>\n<p>The json sidecar file can be used by exiftool to apply the metadata from the json file to the image.  For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"s2\">\"/Users/smith/Pictures/Photos Library.photoslibrary\"</span><span class=\"p\">)</span>\n<span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">()</span>\n<span class=\"n\">photos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp\"</span><span class=\"p\">,</span><span class=\"s2\">\"photo_name.jpg\"</span><span class=\"p\">,</span><span class=\"n\">sidecar_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Then</p>\n<p><code>exiftool -j=photo_name.json photo_name.jpg</code></p>\n<p>If overwrite=False and increment=False, export will fail if destination file already exists</p>\n<p><strong>Implementation Note</strong>: Because the usual python file copy methods don't preserve all the metadata available on MacOS, export uses <code>/usr/bin/ditto</code> to do the copy for export. ditto preserves most metadata such as extended attributes, permissions, ACLs, etc.</p>\n<h4><a><code>render_template()</code></a></h4>\n<p><code>render_template(template, none_str = \"_\", path_sep = None)</code>\nRender template string for photo.  none_str is used if template substitution results in None value and no default specified.</p>\n<ul>\n<li><code>template</code>: str in form \"{name,DEFAULT}\" where name is one of the values in table below. The \",\" and default value that follows are optional. If specified, \"DEFAULT\" will be used if \"name\" is None.  This is useful for values which are not always present, for example reverse geolocation data.</li>\n<li><code>none_str</code>: optional str to use as substitution when template value is None and no default specified in the template string.  default is \"_\".</li>\n<li><code>path_sep</code>: optional character to use as path separator, default is os.path.sep</li>\n</ul>\n<p>Returns a tuple of (rendered, unmatched) where rendered is a list of rendered strings with all substitutions made and unmatched is a list of any strings that resembled a template substitution but did not match a known substitution. E.g. if template contained \"{foo}\", unmatched would be [\"foo\"].</p>\n<p>e.g. <code>render_filepath_template(\"{created.year}/{foo}\", photo)</code> would return <code>([\"2020/{foo}\"],[\"foo\"])</code></p>\n<p>If you want to include \"{\" or \"}\" in the output, use \"{{\" or \"}}\"</p>\n<p>e.g. <code>render_filepath_template(\"{created.year}/{{foo}}\", photo)</code> would return <code>([\"2020/{foo}\"],[])</code></p>\n<p>Some substitutions, notably <code>album</code>, <code>keyword</code>, and <code>person</code> could return multiple values, hence a new string will be return for each possible substitution (hence why a list of rendered strings is returned).  For example, a photo in 2 albums: 'Vacation' and 'Family' would result in the following rendered values if template was \"{created.year}/{album}\" and created.year == 2020: <code>[\"2020/Vacation\",\"2020/Family\"]</code></p>\n<p>See <a href=\"#template-substitutions\" rel=\"nofollow\">Template Substitutions</a> for additional details.</p>\n<h3>AlbumInfo</h3>\n<p>PhotosDB.album_info and PhotoInfo.album_info return a list of AlbumInfo objects.  Each AlbumInfo object represents a single album in the Photos library.</p>\n<h4><code>uuid</code></h4>\n<p>Returns the universally unique identifier (uuid) of the album.  This is how Photos keeps track of individual objects within the database.</p>\n<h4><code>title</code></h4>\n<p>Returns the title or name of the album.</p>\n<h4><code>photos</code></h4>\n<p>Returns a list of <a href=\"#PhotoInfo\" rel=\"nofollow\">PhotoInfo</a> objects representing each photo contained in the album.</p>\n<h4><code>folder_list</code></h4>\n<p>Returns a hierarchical list of <a href=\"#FolderInfo\" rel=\"nofollow\">FolderInfo</a> objects representing the folders the album is contained in.  For example, if album \"AlbumInFolder\" is in SubFolder2 of Folder1 as illustrated below, would return a list of <code>FolderInfo</code> objects representing [\"Folder1\", \"SubFolder2\"]</p>\n<pre>Photos Library\n\u251c\u2500\u2500 Folder1\n\u00a0 \u00a0 \u251c\u2500\u2500 SubFolder1\n  \u00a0 \u251c\u2500\u2500 SubFolder2\n  \u00a0  \u00a0\u00a0 \u2514\u2500\u2500 AlbumInFolder\n</pre>\n<h4><code>folder_names</code></h4>\n<p>Returns a hierarchical list of names of the folders the album is contained in.  For example, if album is in SubFolder2 of Folder1 as illustrated below, would return [\"Folder1\", \"SubFolder2\"].</p>\n<pre>Photos Library\n\u251c\u2500\u2500 Folder1\n\u00a0 \u00a0 \u251c\u2500\u2500 SubFolder1\n  \u00a0 \u251c\u2500\u2500 SubFolder2\n  \u00a0  \u00a0\u00a0 \u2514\u2500\u2500 AlbumInFolder\n</pre>\n<h4><code>parent</code></h4>\n<p>Returns a <a href=\"#FolderInfo\" rel=\"nofollow\">FolderInfo</a> object representing the albums parent folder or <code>None</code> if album is not a in a folder.</p>\n<h3>FolderInfo</h3>\n<p>PhotosDB.folder_info returns a list of FolderInfo objects representing the top level folders in the library.  Each FolderInfo object represents a single folder in the Photos library.</p>\n<h4><code>uuid</code></h4>\n<p>Returns the universally unique identifier (uuid) of the folder.  This is how Photos keeps track of individual objects within the database.</p>\n<h4><code>title</code></h4>\n<p>Returns the title or name of the folder.</p>\n<h4><code>album_info</code></h4>\n<p>Returns a list of <a href=\"#AlbumInfo\" rel=\"nofollow\">AlbumInfo</a> objects representing each album contained in the folder.</p>\n<h4><code>subfolders</code></h4>\n<p>Returns a list of <a href=\"#FolderInfo\" rel=\"nofollow\">FolderInfo</a> objects representing the sub-folders of the folder.</p>\n<h4><code>parent</code></h4>\n<p>Returns a <a href=\"#FolderInfo\" rel=\"nofollow\">FolderInfo</a> object representing the folder's parent folder or <code>None</code> if album is not a in a folder.</p>\n<p><strong>Note</strong>: FolderInfo and AlbumInfo objects effectively work as a linked list.  The children of a folder are contained in <code>subfolders</code> and <code>album_info</code> and the parent object of both <code>AlbumInfo</code> and <code>FolderInfo</code> is represented by <code>parent</code>.  For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">albuminfo</span><span class=\"o\">.</span><span class=\"n\">FolderInfo</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x10fcc0160</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"s1\">'Folder1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subfolders</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"s1\">'SubFolder2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subfolders</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">album_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"s1\">'AlbumInFolder'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subfolders</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">album_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"s1\">'SubFolder2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">folder_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subfolders</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">album_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">album_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"s1\">'AlbumInFolder'</span>\n</pre>\n<h3>PlaceInfo</h3>\n<p><a href=\"#place\" rel=\"nofollow\">PhotoInfo.place</a> returns a PlaceInfo object if the photo contains valid reverse geolocation information.  PlaceInfo has the following properties.</p>\n<p><strong>Note</strong> For Photos versions &lt;= 4, only <code>name</code>, <code>names</code>, and <code>country_code</code> properties are defined.  All others return <code>None</code>.  This is because older versions of Photos do not store the more detailed reverse geolocation information.</p>\n<h4><code>ishome</code></h4>\n<p>Returns <code>True</code> if photo place is user's home address, otherwise <code>False</code>.</p>\n<h4><code>name</code></h4>\n<p>Returns the name of the local place as str.  This is what Photos displays in the Info window.  <strong>Note</strong> Photos 5 uses a different algorithm to determine the name than earlier versions which means the same Photo may have a different place name in Photos 4 and Photos 5. <code>PhotoInfo.name</code> will return the name Photos would have shown depending on the version of the library being processed.  In Photos 5, the place name is generally more detailed than in earlier versions of Photos.</p>\n<p>For example, I have photo in my library that under Photos 4, has place name of \"\u200e\u2068Mayfair Shopping Centre\u2069, \u2068Victoria\u2069, \u2068Canada\u2069\" and under Photos 5 the same photo has place name of \"Mayfair\u2069, \u2068Vancouver Island\u2069, \u2068Victoria\u2069, \u2068British Columbia\u2069, \u2068Canada\u2069\".</p>\n<p>Returns <code>None</code> if photo does not contain a name.</p>\n<h4><code>names</code></h4>\n<p>Returns a <code>PlaceNames</code> namedtuple with the following fields.  Each field is a list with zero or more values, sorted by area in ascending order.  E.g. <code>names.area_of_interest</code> could be ['Gulf Islands National Seashore', 'Santa Rosa Island'], [\"Knott's Berry Farm\"], or [] if <code>area_of_interest</code> not defined.  The value shown in Photos is the first value in the list. With the exception of <code>body_of_water</code> each of these field corresponds to an attribute of a <a href=\"https://developer.apple.com/documentation/corelocation/clplacemark\" rel=\"nofollow\">CLPlacemark</a> object.  <strong>Note</strong> The <code>PlaceNames</code> namedtuple contains reserved fields not listed below (see implementation for details), thus it should be referenced only by name (e.g. <code>names.city</code>) and not by index.</p>\n<ul>\n<li><code>country</code>; the name of the country associated with the placemark.</li>\n<li><code>state_province</code>; administrativeArea, The state or province associated with the placemark.</li>\n<li><code>sub_administrative_area</code>; additional administrative area information for the placemark.</li>\n<li><code>city</code>; locality; the city associated with the placemark.</li>\n<li><code>additional_city_info</code>; subLocality, Additional city-level information for the placemark.</li>\n<li><code>ocean</code>; the name of the ocean associated with the placemark.</li>\n<li><code>area_of_interest</code>; areasOfInterest, The relevant areas of interest associated with the placemark.</li>\n<li><code>inland_water</code>; the name of the inland water body associated with the placemark.</li>\n<li><code>region</code>; the geographic region associated with the placemark.</li>\n<li><code>sub_throughfare</code>; additional street-level information for the placemark.</li>\n<li><code>postal_code</code>; the postal code associated with the placemark.</li>\n<li><code>street_address</code>; throughfare, The street address associated with the placemark.</li>\n<li><code>body_of_water</code>; in Photos 4, any body of water; in Photos 5 contains the union of ocean and inland_water</li>\n</ul>\n<p><strong>Note</strong>: In Photos &lt;= 4.0, only the following fields are defined; all others are set to empty list:</p>\n<ul>\n<li><code>country</code></li>\n<li><code>state_province</code></li>\n<li><code>sub_administrative_area</code></li>\n<li><code>city</code></li>\n<li><code>additional_city_info</code></li>\n<li><code>area_of_interest</code></li>\n<li><code>body_of_water</code></li>\n</ul>\n<h4><code>country_code</code></h4>\n<p>Returns the country_code of place, for example \"GB\".  Returns <code>None</code> if PhotoInfo contains no country code.</p>\n<h4><code>address_str</code></h4>\n<p>Returns the full postal address as a string if defined, otherwise <code>None</code>.</p>\n<p>For example: \"2038 18th St NW, Washington, DC  20009, United States\"</p>\n<h4><code>address</code>:</h4>\n<p>Returns a <code>PostalAddress</code> namedtuple with details of the postal address containing the following fields:</p>\n<ul>\n<li><code>city</code></li>\n<li><code>country</code></li>\n<li><code>postal_code</code></li>\n<li><code>state</code></li>\n<li><code>street</code></li>\n<li><code>sub_administrative_area</code></li>\n<li><code>sub_locality</code></li>\n<li><code>iso_country_code</code></li>\n</ul>\n<p>For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">address</span>\n<span class=\"n\">PostalAddress</span><span class=\"p\">(</span><span class=\"n\">street</span><span class=\"o\">=</span><span class=\"s1\">'3700 Wailea Alanui Dr'</span><span class=\"p\">,</span> <span class=\"n\">sub_locality</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s1\">'Kihei'</span><span class=\"p\">,</span> <span class=\"n\">sub_administrative_area</span><span class=\"o\">=</span><span class=\"s1\">'Maui'</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">'HI'</span><span class=\"p\">,</span> <span class=\"n\">postal_code</span><span class=\"o\">=</span><span class=\"s1\">'96753'</span><span class=\"p\">,</span> <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s1\">'United States'</span><span class=\"p\">,</span> <span class=\"n\">iso_country_code</span><span class=\"o\">=</span><span class=\"s1\">'US'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">postal_code</span>\n<span class=\"s1\">'96753'</span>\n</pre>\n<h3>Template Substitutions</h3>\n<p>The following substitutions are availabe for use with <code>PhotoInfo.render_template()</code></p>\n<table>\n<thead>\n<tr>\n<th>Substitution</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>{name}</td>\n<td>Filename of the photo</td>\n</tr>\n<tr>\n<td>{original_name}</td>\n<td>Photo's original filename when imported to Photos</td>\n</tr>\n<tr>\n<td>{title}</td>\n<td>Title of the photo</td>\n</tr>\n<tr>\n<td>{descr}</td>\n<td>Description of the photo</td>\n</tr>\n<tr>\n<td>{created.date}</td>\n<td>Photo's creation date in ISO format, e.g. '2020-03-22'</td>\n</tr>\n<tr>\n<td>{created.year}</td>\n<td>4-digit year of file creation time</td>\n</tr>\n<tr>\n<td>{created.yy}</td>\n<td>2-digit year of file creation time</td>\n</tr>\n<tr>\n<td>{created.mm}</td>\n<td>2-digit month of the file creation time (zero padded)</td>\n</tr>\n<tr>\n<td>{created.month}</td>\n<td>Month name in user's locale of the file creation time</td>\n</tr>\n<tr>\n<td>{created.mon}</td>\n<td>Month abbreviation in the user's locale of the file creation time</td>\n</tr>\n<tr>\n<td>{created.doy}</td>\n<td>3-digit day of year (e.g Julian day) of file creation time, starting from 1 (zero padded)</td>\n</tr>\n<tr>\n<td>{modified.date}</td>\n<td>Photo's modification date in ISO format, e.g. '2020-03-22'</td>\n</tr>\n<tr>\n<td>{modified.year}</td>\n<td>4-digit year of file modification time</td>\n</tr>\n<tr>\n<td>{modified.yy}</td>\n<td>2-digit year of file modification time</td>\n</tr>\n<tr>\n<td>{modified.mm}</td>\n<td>2-digit month of the file modification time (zero padded)</td>\n</tr>\n<tr>\n<td>{modified.month}</td>\n<td>Month name in user's locale of the file modification time</td>\n</tr>\n<tr>\n<td>{modified.mon}</td>\n<td>Month abbreviation in the user's locale of the file modification time</td>\n</tr>\n<tr>\n<td>{modified.doy}</td>\n<td>3-digit day of year (e.g Julian day) of file modification time, starting from 1 (zero padded)</td>\n</tr>\n<tr>\n<td>{place.name}</td>\n<td>Place name from the photo's reverse geolocation data, as displayed in Photos</td>\n</tr>\n<tr>\n<td>{place.country_code}</td>\n<td>The ISO country code from the photo's reverse geolocation data</td>\n</tr>\n<tr>\n<td>{place.name.country}</td>\n<td>Country name from the photo's reverse geolocation data</td>\n</tr>\n<tr>\n<td>{place.name.state_province}</td>\n<td>State or province name from the photo's reverse geolocation data</td>\n</tr>\n<tr>\n<td>{place.name.city}</td>\n<td>City or locality name from the photo's reverse geolocation data</td>\n</tr>\n<tr>\n<td>{place.name.area_of_interest}</td>\n<td>Area of interest name (e.g. landmark or public place) from the photo's reverse geolocation data</td>\n</tr>\n<tr>\n<td>{place.address}</td>\n<td>Postal address from the photo's reverse geolocation data, e.g. '2007 18th St NW, Washington, DC 20009, United States'</td>\n</tr>\n<tr>\n<td>{place.address.street}</td>\n<td>Street part of the postal address, e.g. '2007 18th St NW'</td>\n</tr>\n<tr>\n<td>{place.address.city}</td>\n<td>City part of the postal address, e.g. 'Washington'</td>\n</tr>\n<tr>\n<td>{place.address.state_province}</td>\n<td>State/province part of the postal address, e.g. 'DC'</td>\n</tr>\n<tr>\n<td>{place.address.postal_code}</td>\n<td>Postal code part of the postal address, e.g. '20009'</td>\n</tr>\n<tr>\n<td>{place.address.country}</td>\n<td>Country name of the postal address, e.g. 'United States'</td>\n</tr>\n<tr>\n<td>{place.address.country_code}</td>\n<td>ISO country code of the postal address, e.g. 'US'</td>\n</tr>\n<tr>\n<td>{album}</td>\n<td>Album(s) photo is contained in</td>\n</tr>\n<tr>\n<td>{keyword}</td>\n<td>Keyword(s) assigned to photo</td>\n</tr>\n<tr>\n<td>{person}</td>\n<td>Person(s) / face(s) in a photo</td>\n</tr></tbody></table>\n<h3>Utility Functions</h3>\n<p>The following functions are located in osxphotos.utils</p>\n<h4><code>get_system_library_path()</code></h4>\n<p><strong>MacOS 10.15 Only</strong> Returns path to System Photo Library as string.  On MacOS version &lt; 10.15, returns None.</p>\n<h4><code>get_last_library_path()</code></h4>\n<p>Returns path to last opened Photo Library as string.</p>\n<h4><code>list_photo_libraries()</code></h4>\n<p>Returns list of Photos libraries found on the system.  <strong>Note</strong>: On MacOS 10.15, this appears to list all libraries. On older systems, it may not find some libraries if they are not located in ~/Pictures.  Provided for convenience but do not rely on this to find all libraries on the system.</p>\n<h4><code>dd_to_dms_str(lat, lon)</code></h4>\n<p>Convert latitude, longitude in degrees to degrees, minutes, seconds as string.</p>\n<ul>\n<li><code>lat</code>: latitude in degrees</li>\n<li><code>lon</code>: longitude in degrees\nreturns: string tuple in format (\"51 deg 30' 12.86\\\" N\", \"0 deg 7' 54.50\\\" W\")\nThis is the same format used by exiftool's json format.</li>\n</ul>\n<h4><code>create_path_by_date(dest, dt)</code></h4>\n<p>Creates a path in dest folder in form dest/YYYY/MM/DD/</p>\n<ul>\n<li><code>dest</code>: valid path as str</li>\n<li><code>dt</code>: datetime.timetuple() object\nChecks to see if path exists, if it does, do nothing and return path. If path does not exist, creates it and returns path.  Useful for exporting photos to a date-based folder structure.</li>\n</ul>\n<h2>Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">osxphotos</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\n    <span class=\"n\">photosdb</span> <span class=\"o\">=</span> <span class=\"n\">osxphotos</span><span class=\"o\">.</span><span class=\"n\">PhotosDB</span><span class=\"p\">(</span><span class=\"s2\">\"/Users/smith/Pictures/Photos Library.photoslibrary\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"db file = </span><span class=\"si\">{</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">db_path</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"db version = </span><span class=\"si\">{</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">db_version</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">persons</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">album_names</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">keywords_as_dict</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">persons_as_dict</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">albums_as_dict</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># find all photos with Keyword = Kids and containing person Katie</span>\n    <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Kids\"</span><span class=\"p\">],</span> <span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Katie\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"found </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">photos</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> photos\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># find all photos that include Katie but do not contain the keyword wedding</span>\n    <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">p</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Katie\"</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"wedding\"</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># get all photos in the database</span>\n    <span class=\"n\">photos</span> <span class=\"o\">=</span> <span class=\"n\">photosdb</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">photos</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">albums</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">persons</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">ismissing</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">hasadjustments</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Related Projects</h2>\n<ul>\n<li><a href=\"https://github.com/rhettbull/photosmeta\" rel=\"nofollow\">rhettbull/photosmeta</a>: uses osxphotos and <a href=\"https://exiftool.org/\" rel=\"nofollow\">exiftool</a> to apply metadata from Photos as exif data in the photo files.  Can also export photos while preserving metadata and also apply Photos keywords as spotlight tags to make it easier to search for photos using spotlight.  This is mostly made obsolete by osxphotos.  The one feature that photosmeta has that osxphotos does not is ability to update the metadata of the actual photo files in the Photos library without exporting them. (Use with caution!)</li>\n<li><a href=\"https://github.com/patrikhson/photo-export\" rel=\"nofollow\">patrikhson/photo-export</a>: Exports older versions of Photos databases.  Provided the inspiration for osxphotos.</li>\n<li><a href=\"https://github.com/orangeturtle739/photos-export\" rel=\"nofollow\">orangeturtle739/photos-export</a>: Set of scripts to export Photos libraries.</li>\n<li><a href=\"https://github.com/ndbroadbent/icloud_photos_downloader\" rel=\"nofollow\">ndbroadbent/icloud_photos_downloader</a>: Download photos from iCloud.  Currently unmaintained.</li>\n<li><a href=\"https://github.com/AaronVanGeffen/ExportPhotosLibrary\" rel=\"nofollow\">AaronVanGeffen/ExportPhotosLibrary</a>: Another python script for exporting older versions of Photos libraries.</li>\n<li><a href=\"https://github.com/MossieurPropre/PhotosAlbumExporter\" rel=\"nofollow\">MossieurPropre/PhotosAlbumExporter</a>: Javascript script to export photos while maintaining album structure.</li>\n<li><a href=\"https://github.com/ajslater/magritte\" rel=\"nofollow\">ajslater/magritte</a>: Another python command line script for exporting photos from older versions of Photos libraries.</li>\n</ul>\n<h2>Contributing</h2>\n<p>Contributing is easy!  if you find bugs or want to suggest additional features/changes, please open an <a href=\"https://github.com/rhettbull/osxphotos/issues/\" rel=\"nofollow\">issue</a>.</p>\n<p>I'll gladly consider pull requests for bug fixes or feature implementations.</p>\n<p>If you have an interesting example that shows usage of this package, submit an issue or pull request and i'll include it or link to it.</p>\n<p>Testing against \"real world\" Photos libraries would be especially helpful.  If you discover issues in testing against your Photos libraries, please open an issue.  I've done extensive testing against my own Photos library but that's a since data point and I'm certain there are issues lurking in various edge cases I haven't discovered yet.</p>\n<h2>Known Bugs</h2>\n<p>My goal is make osxphotos as reliable and comprehensive as possible.  The test suite currently has over 400 tests--but there are still some <a href=\"https://github.com/RhetTbull/osxphotos/issues?q=is%3Aissue+is%3Aopen+label%3Abug\" rel=\"nofollow\">bugs</a> or incomplete features lurking.  If you find bugs please open an <a href=\"https://github.com/RhetTbull/osxphotos/issues\" rel=\"nofollow\">issue</a>.  Notable issues include:</p>\n<ul>\n<li>RAW images imported to Photos with an associated jpeg preview are not handled correctly by osxphotos.  osxphotos query and export will operate on the jpeg preview instead of the RAW image as will <code>PhotoInfo.path</code>.  If the user selects \"Use RAW as original\" in Photos, the RAW image will be exported or operated on but the jpeg will be ignored.  See <a href=\"https://github.com/RhetTbull/osxphotos/issues/101\" rel=\"nofollow\">Issue #101</a> Note: Beta version of fix for this bug is implemented in the current version of osxphotos.</li>\n<li>The <code>--download-missing</code> option for <code>osxphotos export</code> does not work correctly with burst images.  It will download the primary image but not the other burst images.  See <a href=\"https://github.com/RhetTbull/osxphotos/issues/75\" rel=\"nofollow\">Issue #75</a></li>\n</ul>\n<h2>Implementation Notes</h2>\n<p>This package works by creating a copy of the sqlite3 database that photos uses to store data about the photos library. The class PhotosDB then queries this database to extract information about the photos such as persons (faces identified in the photos), albums, keywords, etc.  If your library is large, the database can be hundreds of MB in size and the copy read then  can take many 10s of seconds to complete.  Once copied, the entire database is processed and an in-memory data structure is created meaning all subsequent accesses of the PhotosDB object occur much more quickly.</p>\n<p>If apple changes the database format this will likely break.</p>\n<p>Apple does provide a framework (<a href=\"https://developer.apple.com/documentation/photokit?language=objc\" rel=\"nofollow\">PhotoKit</a>) for querying the user's Photos library and I attempted to create the funcationality in this package using this framework but unfortunately PhotoKit does not provide access to much of the needed metadata (such as Faces/Persons) and Apple's System Integrity Protection (SIP) made the interface unreliable.  If you'd like to experiment with the PhotoKit interface, here's some sample <a href=\"https://gist.github.com/RhetTbull/41cc85e5bdeb30f761147ce32fba5c94\" rel=\"nofollow\">code</a>.  While copying the sqlite file is a bit kludgy, it allows osxphotos to provide access to all available metadata.</p>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://pythonhosted.org/pyobjc/\" rel=\"nofollow\">PyObjC</a></li>\n<li><a href=\"https://pypi.org/project/PyYAML/\" rel=\"nofollow\">PyYAML</a></li>\n<li><a href=\"https://pypi.org/project/click/\" rel=\"nofollow\">Click</a></li>\n<li><a href=\"https://www.makotemplates.org/\" rel=\"nofollow\">Mako</a></li>\n<li><a href=\"https://pypi.org/project/bpylist2/\" rel=\"nofollow\">bpylist2</a></li>\n<li><a href=\"https://pypi.org/project/pathvalidate/\" rel=\"nofollow\">pathvalidate</a></li>\n</ul>\n<h2>Acknowledgements</h2>\n<p>This project was originally inspired by <a href=\"https://github.com/patrikhson/photo-export\" rel=\"nofollow\">photo-export</a> by Patrick F\u00e4ltstr\u00f6m,  Copyright (c) 2015 Patrik F\u00e4ltstr\u00f6m <a href=\"mailto:paf@frobbit.se\">paf@frobbit.se</a></p>\n<p>I use <a href=\"https://github.com/rdhyee/py-applescript\" rel=\"nofollow\">py-applescript</a> by \"Raymond Yee / rdhyee\" to interact with Photos. Rather than import this package, I included the entire package (which is published as public domain code) in a private package to prevent ambiguity with other applescript packages on PyPi. py-applescript uses a native bridge via PyObjC and is very fast compared to the other osascript based packages.</p>\n\n          </div>"}, "last_serial": 7149766, "releases": {"0.10.4": [{"comment_text": "", "digests": {"md5": "170ff905bb3629c6c1d4d07006b8f7ce", "sha256": "bb6a0975f5c2d3c311f52c3bd8a1f66af62c0402f4e4b220b4818af98dd15231"}, "downloads": -1, "filename": "osxphotos-0.10.4-py3-none-any.whl", "has_sig": false, "md5_digest": "170ff905bb3629c6c1d4d07006b8f7ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30327, "upload_time": "2019-07-28T02:06:45", "upload_time_iso_8601": "2019-07-28T02:06:45.314634Z", "url": "https://files.pythonhosted.org/packages/eb/69/819c7ca3f52b5a627c7e3f96aef537e530920379b29441a852d9d6f1888f/osxphotos-0.10.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c04b69165336ce075a48685de883812", "sha256": "f46045cbf1cf62766bc735ae96fd202f4eed463dff040ed26fa8e19246a2b853"}, "downloads": -1, "filename": "osxphotos-0.10.4.tar.gz", "has_sig": false, "md5_digest": "7c04b69165336ce075a48685de883812", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33659, "upload_time": "2019-07-28T02:06:47", "upload_time_iso_8601": "2019-07-28T02:06:47.850318Z", "url": "https://files.pythonhosted.org/packages/93/ce/7e0a8745933c9230e395a9dfa52b48fdb1d8cd30ba91448a9466bc914634/osxphotos-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "0c970fe05745849a4dccb5a0043f1445", "sha256": "d932f7851dbee55a2aad052dc6732827f596aeb401e62c02fea3a73df5867158"}, "downloads": -1, "filename": "osxphotos-0.10.5-py3-none-any.whl", "has_sig": false, "md5_digest": "0c970fe05745849a4dccb5a0043f1445", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30386, "upload_time": "2019-08-17T15:08:44", "upload_time_iso_8601": "2019-08-17T15:08:44.080549Z", "url": "https://files.pythonhosted.org/packages/3c/7d/d266b565491cb325b2195385caa3aeca94d1a4a381b6f087d5b175284fcc/osxphotos-0.10.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f808582b8ac0c9ca2f3d2da58f6eb4c4", "sha256": "e32805d673a56f0694fd00783e8308f466b97639f5635339234f27a08f7c342a"}, "downloads": -1, "filename": "osxphotos-0.10.5.tar.gz", "has_sig": false, "md5_digest": "f808582b8ac0c9ca2f3d2da58f6eb4c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33702, "upload_time": "2019-08-17T15:08:45", "upload_time_iso_8601": "2019-08-17T15:08:45.980649Z", "url": "https://files.pythonhosted.org/packages/49/a6/a55320f5f17e056b6b8a424bc8d4e5a81e22ebb74b5a7513109014aff96c/osxphotos-0.10.5.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "ae54b1e33f6bfeed53e74916c830bb56", "sha256": "00ecf41086ee0482a2df26708e0378b17697ee41d512c34935913e3524aa2463"}, "downloads": -1, "filename": "osxphotos-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ae54b1e33f6bfeed53e74916c830bb56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33147, "upload_time": "2019-08-20T04:33:55", "upload_time_iso_8601": "2019-08-20T04:33:55.240376Z", "url": "https://files.pythonhosted.org/packages/81/23/5555b89532543041e8c357f74266f7db15698867391a63bebd6c30ac7657/osxphotos-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67bcdb279e39336d39932dd61184f5bd", "sha256": "3ad24ec34755a1a128ede41bf07521756db478795637c0c540b2b3c1a674cfd4"}, "downloads": -1, "filename": "osxphotos-0.11.0.tar.gz", "has_sig": false, "md5_digest": "67bcdb279e39336d39932dd61184f5bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36582, "upload_time": "2019-08-20T04:33:57", "upload_time_iso_8601": "2019-08-20T04:33:57.174657Z", "url": "https://files.pythonhosted.org/packages/fc/c9/da48a8f5eb6aa7de0253be6026c4f3e3c87a22d06fa9b010d1ff7e41d092/osxphotos-0.11.0.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "f339b60579effc9fd1e73d416392cda8", "sha256": "e31dfc20aef7f493071ab8f770f82d18d598b33b7be1b27e74cdbbf17ad11409"}, "downloads": -1, "filename": "osxphotos-0.12.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f339b60579effc9fd1e73d416392cda8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33285, "upload_time": "2019-08-24T15:11:13", "upload_time_iso_8601": "2019-08-24T15:11:13.783100Z", "url": "https://files.pythonhosted.org/packages/11/09/b30bad54633a64c1ef153f27517111472b437c5cecf7b95abd352820af4d/osxphotos-0.12.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0c9531f2a32cc65e35b9bec09153593", "sha256": "9783681dfcbe026e27c4480f0f732a9fb72fba0e36131b80c0a697c363c58cea"}, "downloads": -1, "filename": "osxphotos-0.12.1.tar.gz", "has_sig": false, "md5_digest": "b0c9531f2a32cc65e35b9bec09153593", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36836, "upload_time": "2019-08-24T15:11:15", "upload_time_iso_8601": "2019-08-24T15:11:15.588950Z", "url": "https://files.pythonhosted.org/packages/6a/01/388190d1ccf26ec3b87e5c42cf37671e3c9352fb5d2915ace350fba4a30b/osxphotos-0.12.1.tar.gz", "yanked": false}], "0.12.2": [{"comment_text": "", "digests": {"md5": "f67115f3ab3ca9f65b5b69992814fa70", "sha256": "14ea7e6247e82ab5623eafdf645ebdb837a1ac6afcafde9366e9635e4fb03615"}, "downloads": -1, "filename": "osxphotos-0.12.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f67115f3ab3ca9f65b5b69992814fa70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33290, "upload_time": "2019-08-24T15:18:46", "upload_time_iso_8601": "2019-08-24T15:18:46.501654Z", "url": "https://files.pythonhosted.org/packages/89/43/f23176d95760fddf613bf220ea9eb247c31471f4b37c2f6a2a086e437111/osxphotos-0.12.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92808efdf96add829e9202bf73a58811", "sha256": "0afa5ad4cb923ee2df884208ae7c088c5affc678164749d71f73d0cda20ea549"}, "downloads": -1, "filename": "osxphotos-0.12.2.tar.gz", "has_sig": false, "md5_digest": "92808efdf96add829e9202bf73a58811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36840, "upload_time": "2019-08-24T15:18:48", "upload_time_iso_8601": "2019-08-24T15:18:48.405900Z", "url": "https://files.pythonhosted.org/packages/30/f1/5ca75bda554cb5d01453e9273a80d7653017ba0727eb50f080298207616c/osxphotos-0.12.2.tar.gz", "yanked": false}], "0.12.3": [{"comment_text": "", "digests": {"md5": "8ef330804bbea346142d511955412a71", "sha256": "b14d4060c214486e1485dc25583540e6a08774c65ddfb514d860a576330a1c6f"}, "downloads": -1, "filename": "osxphotos-0.12.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8ef330804bbea346142d511955412a71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33291, "upload_time": "2019-08-24T15:31:03", "upload_time_iso_8601": "2019-08-24T15:31:03.856924Z", "url": "https://files.pythonhosted.org/packages/f0/19/c37df5566ff9eb9871b63ed2595f1150dd916a7d7933ea12c109b2f9b698/osxphotos-0.12.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e25c7b0792a8e3b8fcb759d6017b0c3e", "sha256": "d468eb3a1d341f5c5301a36163d4025946742e92a2ab45d885833ea788c4d51a"}, "downloads": -1, "filename": "osxphotos-0.12.3.tar.gz", "has_sig": false, "md5_digest": "e25c7b0792a8e3b8fcb759d6017b0c3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36839, "upload_time": "2019-08-24T15:31:05", "upload_time_iso_8601": "2019-08-24T15:31:05.377266Z", "url": "https://files.pythonhosted.org/packages/ea/81/bc8566a42744890d77a37687dbe7aae26b39cf65a9db7bfe302a5a1daaba/osxphotos-0.12.3.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "3de635a42d55df08e756874e5c39d569", "sha256": "1bdaebb6d0db4b03d1b2161189216ee377372a42fda608860b2ef7e7ee2f7159"}, "downloads": -1, "filename": "osxphotos-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3de635a42d55df08e756874e5c39d569", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50199, "upload_time": "2019-11-18T02:20:29", "upload_time_iso_8601": "2019-11-18T02:20:29.372067Z", "url": "https://files.pythonhosted.org/packages/0a/6c/cf000573b198030a4188f0b4205b5747d1caca70efd7b7045dbfb99e1c1a/osxphotos-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c418b8e2dfdf818968886a16fe3fc86", "sha256": "e533b69f6991c1ec8b04f5e9008f08195615f96164967a000e08166b983ce090"}, "downloads": -1, "filename": "osxphotos-0.13.0.tar.gz", "has_sig": false, "md5_digest": "2c418b8e2dfdf818968886a16fe3fc86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40449, "upload_time": "2019-11-18T02:20:32", "upload_time_iso_8601": "2019-11-18T02:20:32.378986Z", "url": "https://files.pythonhosted.org/packages/0a/c0/18a2d28f718ea78d304abe4997eb4bc65a41505e36ef8fe95fa535764412/osxphotos-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "090a04029364e34d7ae44a73837c6844", "sha256": "346b1a3c55e9457c94c62dd0174e5491626c54b3ab236de1c61a48df4cecf2d6"}, "downloads": -1, "filename": "osxphotos-0.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "090a04029364e34d7ae44a73837c6844", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50411, "upload_time": "2019-11-24T04:27:56", "upload_time_iso_8601": "2019-11-24T04:27:56.722890Z", "url": "https://files.pythonhosted.org/packages/db/9a/5245209b1facab8f4f45f0e1841c6919a4551221b252518bfd4393a3c953/osxphotos-0.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b762a9ee06bcc047147b579d6d1091f", "sha256": "24b3a6a45fe21b701963747bad36c7ed470c5fceba4141427c644851e215a27c"}, "downloads": -1, "filename": "osxphotos-0.14.0.tar.gz", "has_sig": false, "md5_digest": "3b762a9ee06bcc047147b579d6d1091f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40736, "upload_time": "2019-11-24T04:27:58", "upload_time_iso_8601": "2019-11-24T04:27:58.435080Z", "url": "https://files.pythonhosted.org/packages/92/f1/bd0965834fce25f845e34137b02ae110abc0c465e3bdd97ce5970e657eb9/osxphotos-0.14.0.tar.gz", "yanked": false}], "0.14.14": [{"comment_text": "", "digests": {"md5": "48267d1e1861d333bf6b699b7987cc10", "sha256": "7289a8842e196a340e834e04dcb57c63d7f656ed0aa3240205ef3ec275a0cf2e"}, "downloads": -1, "filename": "osxphotos-0.14.14-py3-none-any.whl", "has_sig": false, "md5_digest": "48267d1e1861d333bf6b699b7987cc10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40579, "upload_time": "2019-12-08T00:08:47", "upload_time_iso_8601": "2019-12-08T00:08:47.890695Z", "url": "https://files.pythonhosted.org/packages/3c/7f/e3012428ec61bfd1c65f40ee42305926677000e558a6766f5185d932674b/osxphotos-0.14.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3775011fe7bfea1e908015ac418b0315", "sha256": "0d972bdd7a4e3466b12e7a8b7750a4ef46d044d06ad65d5d1cca9e129703d310"}, "downloads": -1, "filename": "osxphotos-0.14.14.tar.gz", "has_sig": false, "md5_digest": "3775011fe7bfea1e908015ac418b0315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44863, "upload_time": "2019-12-08T00:08:49", "upload_time_iso_8601": "2019-12-08T00:08:49.705643Z", "url": "https://files.pythonhosted.org/packages/fb/a0/90405b7288ec4fadaea587619cfb3b8895dbb1ce366fba6ec8acb3514f57/osxphotos-0.14.14.tar.gz", "yanked": false}], "0.14.2": [{"comment_text": "", "digests": {"md5": "3920715f09d4ff1a4b60832478266d17", "sha256": "913a797ae5432f58f211c8f538c3ae6170ad3d475386a7b192b73cab6edecaf3"}, "downloads": -1, "filename": "osxphotos-0.14.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3920715f09d4ff1a4b60832478266d17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49707, "upload_time": "2019-11-24T16:46:46", "upload_time_iso_8601": "2019-11-24T16:46:46.221468Z", "url": "https://files.pythonhosted.org/packages/10/b1/95048c2983f68401f076db21aee3e0a312ba2ab76cbe402f7a211f3b37fc/osxphotos-0.14.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d2b2a72993800e9ed55da888812b6ed", "sha256": "559ceb67bd82f6c544b5ddbb073b289600ac352da1137845098e4e8ed85e135c"}, "downloads": -1, "filename": "osxphotos-0.14.2.tar.gz", "has_sig": false, "md5_digest": "4d2b2a72993800e9ed55da888812b6ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40041, "upload_time": "2019-11-24T16:46:48", "upload_time_iso_8601": "2019-11-24T16:46:48.133183Z", "url": "https://files.pythonhosted.org/packages/26/cc/e377ffd8482e34d61a77a8ce25973f8775da33202cbddea600fbb49e5cd1/osxphotos-0.14.2.tar.gz", "yanked": false}], "0.14.21": [{"comment_text": "", "digests": {"md5": "abdfbc7e15dc19ed4d79c7aeb54f6800", "sha256": "d50fb4c7f7cd6002fbf1b17128fb54edfebf6a150a3585925df952f7e4b02653"}, "downloads": -1, "filename": "osxphotos-0.14.21-py3-none-any.whl", "has_sig": false, "md5_digest": "abdfbc7e15dc19ed4d79c7aeb54f6800", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42405, "upload_time": "2019-12-09T01:28:27", "upload_time_iso_8601": "2019-12-09T01:28:27.129391Z", "url": "https://files.pythonhosted.org/packages/bb/df/d2f12322712c09808e456cc5307050635e6b352432955fa5050bf206d0ed/osxphotos-0.14.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b187ce3b6e0337a2702092e73c13066", "sha256": "c96c12faed07d425c6af11274ae378014283669cfad9b9ad21277b9e1e7cc01a"}, "downloads": -1, "filename": "osxphotos-0.14.21.tar.gz", "has_sig": false, "md5_digest": "1b187ce3b6e0337a2702092e73c13066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47272, "upload_time": "2019-12-09T01:28:28", "upload_time_iso_8601": "2019-12-09T01:28:28.744158Z", "url": "https://files.pythonhosted.org/packages/fe/91/1a8e539121ff5c24a2feead1111d36f298944e9b8b6eb4f0c38ad9a3e052/osxphotos-0.14.21.tar.gz", "yanked": false}], "0.14.4": [{"comment_text": "", "digests": {"md5": "0af5b5a2516fc7a7b04f27c5e6e46851", "sha256": "facc030228b46e67bfd23b00b990e21c9623f3ae7287681aae5aab816e5d8cac"}, "downloads": -1, "filename": "osxphotos-0.14.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0af5b5a2516fc7a7b04f27c5e6e46851", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50787, "upload_time": "2019-11-25T05:14:26", "upload_time_iso_8601": "2019-11-25T05:14:26.476969Z", "url": "https://files.pythonhosted.org/packages/f5/f9/5b8bf31361cae7d81aa742dffe77b03c4ea90ba6fcc6d1dd20460bc23b22/osxphotos-0.14.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5469e2d860217c2c7ba22787f3fcf46d", "sha256": "8ccf8c9484f8b344ab58a52f4eb7242fc1470a77ab63a5cf3b1cb063ae5ee998"}, "downloads": -1, "filename": "osxphotos-0.14.4.tar.gz", "has_sig": false, "md5_digest": "5469e2d860217c2c7ba22787f3fcf46d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41429, "upload_time": "2019-11-25T05:14:28", "upload_time_iso_8601": "2019-11-25T05:14:28.509956Z", "url": "https://files.pythonhosted.org/packages/38/0e/34762f71e824fdb939225edbfbda50f00e7fc3a8ca4c0f5720b5cafcc163/osxphotos-0.14.4.tar.gz", "yanked": false}], "0.14.6": [{"comment_text": "", "digests": {"md5": "81ca660a611ea66bd4f36a9aced4621c", "sha256": "3a10a8d7af8ba7c92511071e3fe343f9311c34e78575936e8e957f2c24bbccb5"}, "downloads": -1, "filename": "osxphotos-0.14.6-py3-none-any.whl", "has_sig": false, "md5_digest": "81ca660a611ea66bd4f36a9aced4621c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51522, "upload_time": "2019-11-28T17:26:10", "upload_time_iso_8601": "2019-11-28T17:26:10.138203Z", "url": "https://files.pythonhosted.org/packages/54/56/c752b7a9b06cf5af961a2106be53f299674cfe4a047e3df5fdfadbd0acd1/osxphotos-0.14.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cddd621a287892af32b52d1c8d2f6308", "sha256": "644ee73d5526a18a701f0ba27eafc027c7ccbb1809b2f53dcab11f693e3f8d0b"}, "downloads": -1, "filename": "osxphotos-0.14.6.tar.gz", "has_sig": false, "md5_digest": "cddd621a287892af32b52d1c8d2f6308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42470, "upload_time": "2019-11-28T17:26:12", "upload_time_iso_8601": "2019-11-28T17:26:12.384832Z", "url": "https://files.pythonhosted.org/packages/42/d7/feb846cd3a1f0dffe8e9074dc2779230c9a22ca7bc954b1f83929da807f1/osxphotos-0.14.6.tar.gz", "yanked": false}], "0.14.8": [{"comment_text": "", "digests": {"md5": "2d068c9663442a17cd0f18fcc18cf962", "sha256": "ae94d1f7e0200ba89841b292dc9a3646cf6f6f71a3ac23e2124e3a91634f02bd"}, "downloads": -1, "filename": "osxphotos-0.14.8-py3-none-any.whl", "has_sig": false, "md5_digest": "2d068c9663442a17cd0f18fcc18cf962", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53064, "upload_time": "2019-11-30T19:03:54", "upload_time_iso_8601": "2019-11-30T19:03:54.356953Z", "url": "https://files.pythonhosted.org/packages/fb/66/9b67d53bf4faf942f32645aa3a2c2e1f58fafd453bb310d00f540c8e3a8d/osxphotos-0.14.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8354b6802186d39209f1fc6341e70d8e", "sha256": "ff1c38c30478e242e25ba75c04f71945d65af470fe7381c34dadf135b74766a2"}, "downloads": -1, "filename": "osxphotos-0.14.8.tar.gz", "has_sig": false, "md5_digest": "8354b6802186d39209f1fc6341e70d8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43987, "upload_time": "2019-11-30T19:03:56", "upload_time_iso_8601": "2019-11-30T19:03:56.458043Z", "url": "https://files.pythonhosted.org/packages/d0/bf/60834afc15d515d8b30550f77d641b79648d9458cd1a35007e63d6b0c234/osxphotos-0.14.8.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "b23e8789acf2dffe661c054993a8c193", "sha256": "7ff079287b472f539bf5bf33b63a43c3bbb0e84e266732b0a37edc7649c5ccb7"}, "downloads": -1, "filename": "osxphotos-0.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b23e8789acf2dffe661c054993a8c193", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44505, "upload_time": "2019-12-14T18:38:13", "upload_time_iso_8601": "2019-12-14T18:38:13.290938Z", "url": "https://files.pythonhosted.org/packages/e7/b4/feaef91ca76556416adf7ce4c4a3518c770735c2dac04d34a26ee5212a07/osxphotos-0.15.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a4a81431b9e255e00cc89cf007de820", "sha256": "e10787bb85c2f31f9ba1c45f7cac22dbd3c99b70df610ed53e50a3acea44d2fb"}, "downloads": -1, "filename": "osxphotos-0.15.0.tar.gz", "has_sig": false, "md5_digest": "3a4a81431b9e255e00cc89cf007de820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50208, "upload_time": "2019-12-14T18:38:15", "upload_time_iso_8601": "2019-12-14T18:38:15.248691Z", "url": "https://files.pythonhosted.org/packages/90/b1/f9fca259f263f24ab1bf5f8d9a48ebee8a57fe64aa978f47320e1a38a94e/osxphotos-0.15.0.tar.gz", "yanked": false}], "0.17.2": [{"comment_text": "", "digests": {"md5": "78be2ccfe4e3389c5483d043346b1f89", "sha256": "119963408222ced575e3133423327991fefd5fb23226770458c632c646f3ea39"}, "downloads": -1, "filename": "osxphotos-0.17.2-py3-none-any.whl", "has_sig": false, "md5_digest": "78be2ccfe4e3389c5483d043346b1f89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32289, "upload_time": "2019-12-22T21:05:53", "upload_time_iso_8601": "2019-12-22T21:05:53.524642Z", "url": "https://files.pythonhosted.org/packages/21/7e/7f6e52eb2d575f2067a4d4de82fd912aff52f78beaf7007a1ba88803389a/osxphotos-0.17.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74be118e7ae2e60b16cdaeffe2d4f800", "sha256": "b9d465d227ec8c8159d6e1047b62389c60f6ba70f8028499fb3a2baf43ff0a45"}, "downloads": -1, "filename": "osxphotos-0.17.2.tar.gz", "has_sig": false, "md5_digest": "74be118e7ae2e60b16cdaeffe2d4f800", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37747, "upload_time": "2019-12-22T21:05:55", "upload_time_iso_8601": "2019-12-22T21:05:55.995556Z", "url": "https://files.pythonhosted.org/packages/79/4a/3018c6068e3d2bbe107fff32a2f84e5681b9c259d93aed5054ef7e18867a/osxphotos-0.17.2.tar.gz", "yanked": false}], "0.17.6": [{"comment_text": "", "digests": {"md5": "8058753bfea33cdcb688d84157d5df67", "sha256": "2433d8b2e9479105d32ce9ecadcdd113d7db335762cc1a6646022cd79bb2e64a"}, "downloads": -1, "filename": "osxphotos-0.17.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8058753bfea33cdcb688d84157d5df67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32683, "upload_time": "2019-12-24T17:01:40", "upload_time_iso_8601": "2019-12-24T17:01:40.084922Z", "url": "https://files.pythonhosted.org/packages/fd/b9/ba545c12c973cde702b90addf65ee1061623a12162ad45e0cc109eee4a32/osxphotos-0.17.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3aa47d192dd74b0e37f060464fd236d", "sha256": "46212d17c18666df0b21b970f48ec7af1ca2218856f6e5b027d15d1da80ba73f"}, "downloads": -1, "filename": "osxphotos-0.17.6.tar.gz", "has_sig": false, "md5_digest": "a3aa47d192dd74b0e37f060464fd236d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38237, "upload_time": "2019-12-24T17:01:41", "upload_time_iso_8601": "2019-12-24T17:01:41.989462Z", "url": "https://files.pythonhosted.org/packages/ec/d2/222d825ffd4217a662205f5d6255576a6b8471cbe2338d389122821416a6/osxphotos-0.17.6.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "ea6c9391ddeb6b8e488a56d0b901868c", "sha256": "761c09efb922303080f44508a0c840ac53caaec36d7889e052594eea2e5f0730"}, "downloads": -1, "filename": "osxphotos-0.18.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea6c9391ddeb6b8e488a56d0b901868c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34064, "upload_time": "2019-12-27T07:01:57", "upload_time_iso_8601": "2019-12-27T07:01:57.648261Z", "url": "https://files.pythonhosted.org/packages/65/17/fa402c986edc41b14b21b4a8c1113dd12621b3217f36ff976fb144d01692/osxphotos-0.18.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3c81f083d769ab1f12344a5e8b47451", "sha256": "6197187cc0e743eecc90df91eabf4d09599b20db6a979d860a6ce6833795806b"}, "downloads": -1, "filename": "osxphotos-0.18.0.tar.gz", "has_sig": false, "md5_digest": "b3c81f083d769ab1f12344a5e8b47451", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41302, "upload_time": "2019-12-27T07:02:00", "upload_time_iso_8601": "2019-12-27T07:02:00.623132Z", "url": "https://files.pythonhosted.org/packages/2e/7b/7b853c1d9998fe8318c8cae270280de7cc25ceac1706134bd623705e52f5/osxphotos-0.18.0.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "436e7f8ce51861c020cbc6d28d2d8f74", "sha256": "8b3da6e6fd949ea57ce17922044c2db670fce8c4810c50d249de2fa8b71e2c7f"}, "downloads": -1, "filename": "osxphotos-0.19.0-py3-none-any.whl", "has_sig": false, "md5_digest": "436e7f8ce51861c020cbc6d28d2d8f74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34995, "upload_time": "2019-12-29T09:20:43", "upload_time_iso_8601": "2019-12-29T09:20:43.399025Z", "url": "https://files.pythonhosted.org/packages/12/e3/c408a710dd19d7f5521ffbb3924be2123e09b05c026e5c5a9255e2ad530f/osxphotos-0.19.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fde2663f9bfae601e441ad89c94ef9a", "sha256": "10c9de3795081d726dacd84a563a52d8306912d87f1bf0934e416f8a0786b300"}, "downloads": -1, "filename": "osxphotos-0.19.0.tar.gz", "has_sig": false, "md5_digest": "7fde2663f9bfae601e441ad89c94ef9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43057, "upload_time": "2019-12-29T09:20:46", "upload_time_iso_8601": "2019-12-29T09:20:46.276605Z", "url": "https://files.pythonhosted.org/packages/91/18/7c265c83036d7baf1cc6302f4a0f1096722a06eac2b1db5c477283874067/osxphotos-0.19.0.tar.gz", "yanked": false}], "0.20.0": [{"comment_text": "", "digests": {"md5": "738900154d2e4da1926e085025976ed5", "sha256": "cdffeaaff6f7c5c2ff9651b9d58873416361f905d534ebe4d1d1b2514e2e9713"}, "downloads": -1, "filename": "osxphotos-0.20.0-py3-none-any.whl", "has_sig": false, "md5_digest": "738900154d2e4da1926e085025976ed5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37419, "upload_time": "2020-01-01T05:34:09", "upload_time_iso_8601": "2020-01-01T05:34:09.828579Z", "url": "https://files.pythonhosted.org/packages/d3/e8/74e0055f52c4efd1ae6d5daf3dc96e9a94032c3566f0be57cc83059b5d4c/osxphotos-0.20.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2efbb8148b8a26846e84f89af99f9257", "sha256": "dc25a6dceb36702ef7f4f3b55be72a1e9e8242b1d60f3524b6759b0eec5f030b"}, "downloads": -1, "filename": "osxphotos-0.20.0.tar.gz", "has_sig": false, "md5_digest": "2efbb8148b8a26846e84f89af99f9257", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50518, "upload_time": "2020-01-01T05:34:11", "upload_time_iso_8601": "2020-01-01T05:34:11.977528Z", "url": "https://files.pythonhosted.org/packages/78/0c/73d6f5148ec1d6497dc2ab5ff951c729e2622b653f9b428e081055d2777c/osxphotos-0.20.0.tar.gz", "yanked": false}], "0.21.0": [{"comment_text": "", "digests": {"md5": "6c177287166434169c508230f6334fe3", "sha256": "66e862a1fc6aa7f265aaa3972d3d56e7a34b43e0408e3f2727a08da7cd1c8976"}, "downloads": -1, "filename": "osxphotos-0.21.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6c177287166434169c508230f6334fe3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39905, "upload_time": "2020-01-04T18:25:40", "upload_time_iso_8601": "2020-01-04T18:25:40.388344Z", "url": "https://files.pythonhosted.org/packages/30/9e/ac36a3335b1c1041193c5388ccbab735a20b0f54dce2b6efc9db45ff3e97/osxphotos-0.21.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a8825e5cb76f9d3c27390133b16be16", "sha256": "727cc9790c4fd53302e235f51524220af73260d8479cb89289b0a33950ea2e4b"}, "downloads": -1, "filename": "osxphotos-0.21.0.tar.gz", "has_sig": false, "md5_digest": "8a8825e5cb76f9d3c27390133b16be16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55688, "upload_time": "2020-01-04T18:25:42", "upload_time_iso_8601": "2020-01-04T18:25:42.685969Z", "url": "https://files.pythonhosted.org/packages/c9/8b/17002a2c9ea962a50132bf41bc5cc450c58abc76c1a75514b70ae315ad26/osxphotos-0.21.0.tar.gz", "yanked": false}], "0.21.1": [{"comment_text": "", "digests": {"md5": "2f6a59b56f0ea9cdd0c66bd6d07f4903", "sha256": "ecb59e349838f3901ef821c0d5903db601a8afcb8025b08a7f48df0e1624e692"}, "downloads": -1, "filename": "osxphotos-0.21.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2f6a59b56f0ea9cdd0c66bd6d07f4903", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40203, "upload_time": "2020-01-05T16:48:11", "upload_time_iso_8601": "2020-01-05T16:48:11.361563Z", "url": "https://files.pythonhosted.org/packages/30/23/2c0dc95604bbdf37b600a3e5cdbd51f78b910ddc9f02daac90dafa6b8be1/osxphotos-0.21.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "278cc875df2aa386f883b8b64e71c274", "sha256": "c831a707b08b62826827fd5fdb5bf3d634586d812ae483bac9dddd75a78c2871"}, "downloads": -1, "filename": "osxphotos-0.21.1.tar.gz", "has_sig": false, "md5_digest": "278cc875df2aa386f883b8b64e71c274", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56051, "upload_time": "2020-01-05T16:48:13", "upload_time_iso_8601": "2020-01-05T16:48:13.310581Z", "url": "https://files.pythonhosted.org/packages/61/f0/d515af8def33bb4ad7c645ce31239d33941a78cbcb4cd10f03be829b8083/osxphotos-0.21.1.tar.gz", "yanked": false}], "0.21.2": [{"comment_text": "", "digests": {"md5": "965dfdce69731cbb36bb4553e25a4cbf", "sha256": "217f5588d8cfcadc36e4f28dfae6eeea126fe92dee66d48061488c435791aa53"}, "downloads": -1, "filename": "osxphotos-0.21.2-py3-none-any.whl", "has_sig": false, "md5_digest": "965dfdce69731cbb36bb4553e25a4cbf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40425, "upload_time": "2020-01-06T02:38:27", "upload_time_iso_8601": "2020-01-06T02:38:27.914289Z", "url": "https://files.pythonhosted.org/packages/03/26/bfc97f0bf0c8ba86e7fcf4c84f83448302e8fb427c20aba5044a32bbdd76/osxphotos-0.21.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b140ea9796cf993c058889348d4ccecd", "sha256": "474217e60a506cd6a8d0e80ba88c15e030c8a55b14b12a609bc3f99c83112eaf"}, "downloads": -1, "filename": "osxphotos-0.21.2.tar.gz", "has_sig": false, "md5_digest": "b140ea9796cf993c058889348d4ccecd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56243, "upload_time": "2020-01-06T02:38:30", "upload_time_iso_8601": "2020-01-06T02:38:30.089746Z", "url": "https://files.pythonhosted.org/packages/7a/04/36780d68347e003b03b51a2d8eed084a3cea1bf4368586146ce32b27df06/osxphotos-0.21.2.tar.gz", "yanked": false}], "0.21.5": [{"comment_text": "", "digests": {"md5": "daba27ac36a78f60820fbf76bcbfa48f", "sha256": "730a666d0193f82de141d7902863a55e325fcee7294847731018dc1598894388"}, "downloads": -1, "filename": "osxphotos-0.21.5-py3-none-any.whl", "has_sig": false, "md5_digest": "daba27ac36a78f60820fbf76bcbfa48f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 61209, "upload_time": "2020-01-13T03:46:07", "upload_time_iso_8601": "2020-01-13T03:46:07.307123Z", "url": "https://files.pythonhosted.org/packages/15/97/69acf9107dad03b20054e7d2c7cd1a28cf13e97a288c5bb5b72e636f7ce6/osxphotos-0.21.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f929e4f2e8bd3402e8e9cffe8c2f880b", "sha256": "3333ffcb3b04ee4fda2edfa76813b2d08fe41e1ce787618c8e0a84bc6df0b2bb"}, "downloads": -1, "filename": "osxphotos-0.21.5.tar.gz", "has_sig": false, "md5_digest": "f929e4f2e8bd3402e8e9cffe8c2f880b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77974, "upload_time": "2020-01-13T03:46:09", "upload_time_iso_8601": "2020-01-13T03:46:09.310778Z", "url": "https://files.pythonhosted.org/packages/de/90/f8ca1bf4d3b97d59c609fee10bc9a1d98e6072d23ccf65da3ad2eee31372/osxphotos-0.21.5.tar.gz", "yanked": false}], "0.21.6": [{"comment_text": "", "digests": {"md5": "39071806a8291470ffcd8ff80c43d7d3", "sha256": "4d4188119fe000402acfe2314c9b1f3723ebd7dc1a2a11ca21fd6a24bd78d600"}, "downloads": -1, "filename": "osxphotos-0.21.6-py3-none-any.whl", "has_sig": false, "md5_digest": "39071806a8291470ffcd8ff80c43d7d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 61186, "upload_time": "2020-01-14T13:43:15", "upload_time_iso_8601": "2020-01-14T13:43:15.323040Z", "url": "https://files.pythonhosted.org/packages/f2/33/b9919cc722d2f55f8a70afda38a1ca56bfedef6e9e828e2cecb39d2d5e87/osxphotos-0.21.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "909738966459a4061999d5f7dcd405c3", "sha256": "08b959d21b2b17e07864385588871951739db3c09fec7d0bb455714c467c9d5a"}, "downloads": -1, "filename": "osxphotos-0.21.6.tar.gz", "has_sig": false, "md5_digest": "909738966459a4061999d5f7dcd405c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77949, "upload_time": "2020-01-14T13:43:17", "upload_time_iso_8601": "2020-01-14T13:43:17.502783Z", "url": "https://files.pythonhosted.org/packages/06/86/6cfb622d897c6afc3322a9f3356263bce774b2d78426fcdd1fbd0d7d5686/osxphotos-0.21.6.tar.gz", "yanked": false}], "0.22.0": [{"comment_text": "", "digests": {"md5": "ae9cb045e1af8c43d081de34fd701da3", "sha256": "fc29fd367ea5b41723c50071a1ea9194331d4c85ee049f7ac1c9a3a4fe6e319e"}, "downloads": -1, "filename": "osxphotos-0.22.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ae9cb045e1af8c43d081de34fd701da3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 61944, "upload_time": "2020-01-18T00:51:59", "upload_time_iso_8601": "2020-01-18T00:51:59.949567Z", "url": "https://files.pythonhosted.org/packages/58/86/5ffad12e4ce1f0913106c6326af56b8a709d7cbdeb6ef197f85823e7e9e0/osxphotos-0.22.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8ec9be237b794c3b54f657b022060f1", "sha256": "d26105792bd706c731897f301ce76a092938ee3f96b10b65c0cc72b79dfda5f1"}, "downloads": -1, "filename": "osxphotos-0.22.0.tar.gz", "has_sig": false, "md5_digest": "e8ec9be237b794c3b54f657b022060f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79415, "upload_time": "2020-01-18T00:52:02", "upload_time_iso_8601": "2020-01-18T00:52:02.208235Z", "url": "https://files.pythonhosted.org/packages/5c/9a/575951ed66e7b946b57d000709a3769c20bfac34c04837f4f8262ba32c72/osxphotos-0.22.0.tar.gz", "yanked": false}], "0.22.10": [{"comment_text": "", "digests": {"md5": "c4f75dcf28e8955f5d7434debb646e81", "sha256": "c780fcfd3cb7474f5ce098473f77d851febbff28afdad692ca23d8d2db4509b7"}, "downloads": -1, "filename": "osxphotos-0.22.10-py3-none-any.whl", "has_sig": false, "md5_digest": "c4f75dcf28e8955f5d7434debb646e81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 68087, "upload_time": "2020-02-08T15:30:56", "upload_time_iso_8601": "2020-02-08T15:30:56.594174Z", "url": "https://files.pythonhosted.org/packages/e2/47/c09896289e73f34ec81a78704ddc89eae8f263441d8aac7f31bf3b5b754b/osxphotos-0.22.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ddf0c277ac0765b86abf50a6f12eed9f", "sha256": "4c9595981ce2d8ca55172bc4ea599e678da89362175a79fd616ba1e9f8d60294"}, "downloads": -1, "filename": "osxphotos-0.22.10.tar.gz", "has_sig": false, "md5_digest": "ddf0c277ac0765b86abf50a6f12eed9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85390, "upload_time": "2020-02-08T15:30:58", "upload_time_iso_8601": "2020-02-08T15:30:58.590096Z", "url": "https://files.pythonhosted.org/packages/60/31/98e1a2999bfcf831b30cb3c6d0c31c9d416c93fccb8b6ba24d0308ee3d50/osxphotos-0.22.10.tar.gz", "yanked": false}], "0.22.12": [{"comment_text": "", "digests": {"md5": "b90d6c5957fadd6308197784b5ef8367", "sha256": "9719e53858cca984d6d81e84f1f88733e9accb2fa56026a7c6ded5cbc6efbe0b"}, "downloads": -1, "filename": "osxphotos-0.22.12-py3-none-any.whl", "has_sig": false, "md5_digest": "b90d6c5957fadd6308197784b5ef8367", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71098, "upload_time": "2020-03-07T22:52:10", "upload_time_iso_8601": "2020-03-07T22:52:10.082362Z", "url": "https://files.pythonhosted.org/packages/07/e4/7c523362537774b529828d246eaf8bde85b8025a0bc4d653d477cc3a5fb6/osxphotos-0.22.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3907a640bf56fa5f360cac11eeeb868b", "sha256": "ddb49146253993e4bceab1f1b97a6b7b39ee15dad8f3157179163e2a87f12224"}, "downloads": -1, "filename": "osxphotos-0.22.12.tar.gz", "has_sig": false, "md5_digest": "3907a640bf56fa5f360cac11eeeb868b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88425, "upload_time": "2020-03-07T22:52:12", "upload_time_iso_8601": "2020-03-07T22:52:12.178672Z", "url": "https://files.pythonhosted.org/packages/fa/7e/78fddfc7c1f2742a87c3d2bada6b46026654cbdfa8e019b8264384e25559/osxphotos-0.22.12.tar.gz", "yanked": false}], "0.22.13": [{"comment_text": "", "digests": {"md5": "c1e89ea7c113a83895781674ddf4eb8f", "sha256": "1e5f7bf3fcdc6d785e2bb60a29e96c7b55af6db75a783c5e9d661b8e508b8c17"}, "downloads": -1, "filename": "osxphotos-0.22.13-py3-none-any.whl", "has_sig": false, "md5_digest": "c1e89ea7c113a83895781674ddf4eb8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71666, "upload_time": "2020-03-08T19:56:30", "upload_time_iso_8601": "2020-03-08T19:56:30.675265Z", "url": "https://files.pythonhosted.org/packages/e8/9d/711d71c1de253f6b4f13767cb3147652488f445fd2b2c5b9dbc388a4c819/osxphotos-0.22.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d65723bec1444674e4498c57631f3bdf", "sha256": "2768dda39a89a6dea5d4e15c073d16a52769ae8e4e439fb0a7c69480d0ab75b5"}, "downloads": -1, "filename": "osxphotos-0.22.13.tar.gz", "has_sig": false, "md5_digest": "d65723bec1444674e4498c57631f3bdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89571, "upload_time": "2020-03-08T19:56:32", "upload_time_iso_8601": "2020-03-08T19:56:32.817106Z", "url": "https://files.pythonhosted.org/packages/7e/6d/10e8fb23a03c0a142c62db1a072f069d124a90e4ddf11c14f77de0dd788e/osxphotos-0.22.13.tar.gz", "yanked": false}], "0.22.16": [{"comment_text": "", "digests": {"md5": "ef00893b2928489dc63664b0f030ae29", "sha256": "61f0934a8d29cfbeb66d9924c3df6fcf4c57c458fa34a32e76d1fa293433e078"}, "downloads": -1, "filename": "osxphotos-0.22.16-py3-none-any.whl", "has_sig": false, "md5_digest": "ef00893b2928489dc63664b0f030ae29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72897, "upload_time": "2020-03-14T15:56:21", "upload_time_iso_8601": "2020-03-14T15:56:21.627089Z", "url": "https://files.pythonhosted.org/packages/48/74/d373e0d50214975525360ba978139b8479ba42bb05b29c39613e5bfff75f/osxphotos-0.22.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80c2bf6d2e3dd21b0934fab3ba745014", "sha256": "2b56abb5d6f1284b8b6c18a45daa47d553066fb84afef26a4a7133c44bf09bde"}, "downloads": -1, "filename": "osxphotos-0.22.16.tar.gz", "has_sig": false, "md5_digest": "80c2bf6d2e3dd21b0934fab3ba745014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91488, "upload_time": "2020-03-14T15:56:23", "upload_time_iso_8601": "2020-03-14T15:56:23.764052Z", "url": "https://files.pythonhosted.org/packages/8d/8b/0b6fc5753c6af54b55e1c5169530bd386bf21152f5499ed02b3924c6fd4f/osxphotos-0.22.16.tar.gz", "yanked": false}], "0.22.17": [{"comment_text": "", "digests": {"md5": "a7b8cce4735c5d39fc037b3e543b9fdb", "sha256": "7000bc2ac273a5b5065aa890c3f3073d99fb183408787ad35b96ace49e68a0e9"}, "downloads": -1, "filename": "osxphotos-0.22.17-py3-none-any.whl", "has_sig": false, "md5_digest": "a7b8cce4735c5d39fc037b3e543b9fdb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 73959, "upload_time": "2020-03-14T16:14:10", "upload_time_iso_8601": "2020-03-14T16:14:10.065418Z", "url": "https://files.pythonhosted.org/packages/03/79/2c565eb07a6db8d43692f305094ff6205380f10ee57e8ef3022d1b2db69d/osxphotos-0.22.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2cc9af47c3b11b644a9e581e6506b7f", "sha256": "2b28b0d7530c53ce5845c308e51cb1c623a25ad2dde7cdbd3352277ac63d0acc"}, "downloads": -1, "filename": "osxphotos-0.22.17.tar.gz", "has_sig": false, "md5_digest": "a2cc9af47c3b11b644a9e581e6506b7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92474, "upload_time": "2020-03-14T16:14:12", "upload_time_iso_8601": "2020-03-14T16:14:12.101157Z", "url": "https://files.pythonhosted.org/packages/b1/25/4a2fc441662fccc6edb20ed20d4ea97bb3e8d65ee7aabdd08a144a4a5412/osxphotos-0.22.17.tar.gz", "yanked": false}], "0.22.21": [{"comment_text": "", "digests": {"md5": "75ad83ef410fedbdc440caac1cddb74e", "sha256": "ecda9ea61ff9b2b4920616a0c9847590c508cfe676f4a7602eed3b706eeecea9"}, "downloads": -1, "filename": "osxphotos-0.22.21-py3-none-any.whl", "has_sig": false, "md5_digest": "75ad83ef410fedbdc440caac1cddb74e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74208, "upload_time": "2020-03-15T03:30:49", "upload_time_iso_8601": "2020-03-15T03:30:49.406204Z", "url": "https://files.pythonhosted.org/packages/22/88/fe9f71d5ebe3ef65ab6211fc75d360602ae7057f3bb41f335e6138e574fe/osxphotos-0.22.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d3a7570b33450d931e390461dd9549a", "sha256": "45811ed0c13100e601da1758f7969f9761f6052157628ac6a35f80a2a52b815a"}, "downloads": -1, "filename": "osxphotos-0.22.21.tar.gz", "has_sig": false, "md5_digest": "5d3a7570b33450d931e390461dd9549a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92716, "upload_time": "2020-03-15T03:30:51", "upload_time_iso_8601": "2020-03-15T03:30:51.156349Z", "url": "https://files.pythonhosted.org/packages/ac/6b/763160882e84fd5c2b0b9f2b330883ec0c18789d5a6762823d903c8c1554/osxphotos-0.22.21.tar.gz", "yanked": false}], "0.22.23": [{"comment_text": "", "digests": {"md5": "e33591813df3fa2fabde3a9777d12829", "sha256": "dd87887f865ddb2eef7f12a6d4ddb7d7504e43c7484147c4aa81ee60114b01b6"}, "downloads": -1, "filename": "osxphotos-0.22.23-py3-none-any.whl", "has_sig": false, "md5_digest": "e33591813df3fa2fabde3a9777d12829", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74584, "upload_time": "2020-03-15T17:10:07", "upload_time_iso_8601": "2020-03-15T17:10:07.808582Z", "url": "https://files.pythonhosted.org/packages/b9/78/b891af471b1485e247d22622ba7cd378a4699bf50b5fd3d754a0533213d9/osxphotos-0.22.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce0250e6c4407cd512fba3b00f3b2509", "sha256": "6473a8a580679d577624b7f6964cb7c75916db2b4a7d9abecee02b46fccb3d15"}, "downloads": -1, "filename": "osxphotos-0.22.23.tar.gz", "has_sig": false, "md5_digest": "ce0250e6c4407cd512fba3b00f3b2509", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93464, "upload_time": "2020-03-15T17:10:09", "upload_time_iso_8601": "2020-03-15T17:10:09.839592Z", "url": "https://files.pythonhosted.org/packages/48/c7/3f6bb1d8af32b5409f26bd1b59606d03ce0879100ad371df366d00a9ed3a/osxphotos-0.22.23.tar.gz", "yanked": false}], "0.22.4": [{"comment_text": "", "digests": {"md5": "48f3eac363d26c90def1c88e91d39f2b", "sha256": "dbe2279979706bdd2b5a6d615446d3d7ece38223e84c40148239bcd7a4a60715"}, "downloads": -1, "filename": "osxphotos-0.22.4-py3-none-any.whl", "has_sig": false, "md5_digest": "48f3eac363d26c90def1c88e91d39f2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 62375, "upload_time": "2020-01-20T15:58:45", "upload_time_iso_8601": "2020-01-20T15:58:45.066721Z", "url": "https://files.pythonhosted.org/packages/04/5e/1f68be3147548bdb10fe37c6643a8195382f0370600025ec67ac3f659a59/osxphotos-0.22.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1cb1049f7a88bd59fd64fb49a462043", "sha256": "d32ded15f70cf18e3a1c8e029c8c079257575749ea2ee56e0b0144018e9dcac1"}, "downloads": -1, "filename": "osxphotos-0.22.4.tar.gz", "has_sig": false, "md5_digest": "a1cb1049f7a88bd59fd64fb49a462043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78945, "upload_time": "2020-01-20T15:58:46", "upload_time_iso_8601": "2020-01-20T15:58:46.922969Z", "url": "https://files.pythonhosted.org/packages/7a/59/dc8763862c54202468522f7afac089160a1cef8ff96f5d5f9747f7382856/osxphotos-0.22.4.tar.gz", "yanked": false}], "0.22.5": [{"comment_text": "", "digests": {"md5": "bd693055feb0ba8bdce9095eed5452cd", "sha256": "f4fb1401a0cda71a1a127b383780b330d39db64465bba09668c66360dc8ecef3"}, "downloads": -1, "filename": "osxphotos-0.22.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bd693055feb0ba8bdce9095eed5452cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 62707, "upload_time": "2020-01-20T16:35:05", "upload_time_iso_8601": "2020-01-20T16:35:05.803785Z", "url": "https://files.pythonhosted.org/packages/42/c2/e9c050083dc737a33d6b68fd52d391930273fda5148c3069a95db0900091/osxphotos-0.22.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee16a9c248d3906b8f64750d56a0415", "sha256": "95dbb582b91f9843fb4f4bf644dd7763de0e0f84b2afe31e6af2665bb08cea8b"}, "downloads": -1, "filename": "osxphotos-0.22.5.tar.gz", "has_sig": false, "md5_digest": "7ee16a9c248d3906b8f64750d56a0415", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79863, "upload_time": "2020-01-20T16:35:08", "upload_time_iso_8601": "2020-01-20T16:35:08.386108Z", "url": "https://files.pythonhosted.org/packages/39/f5/a527bfbe955d0732a22b46474fb40efe0021918b80123b4023e1564134f8/osxphotos-0.22.5.tar.gz", "yanked": false}], "0.22.7": [{"comment_text": "", "digests": {"md5": "08fd6f287dabd333b93f92b374d3a141", "sha256": "8c11149497629ad83992dfc664deb522a22fb123862f1a8ca7c2575b1afe7715"}, "downloads": -1, "filename": "osxphotos-0.22.7-py3-none-any.whl", "has_sig": false, "md5_digest": "08fd6f287dabd333b93f92b374d3a141", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64031, "upload_time": "2020-01-27T04:24:08", "upload_time_iso_8601": "2020-01-27T04:24:08.958666Z", "url": "https://files.pythonhosted.org/packages/9c/a5/f4afacaea6f346472cbbb04a3c483feb9c9b2cd7ae17ab8c9b1b614c4e39/osxphotos-0.22.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3de3aa0394ff48668653df682da4edc6", "sha256": "fc8d3b44257e866746ae980c68d58680af9662cc65a6af1be9f5d977939b2337"}, "downloads": -1, "filename": "osxphotos-0.22.7.tar.gz", "has_sig": false, "md5_digest": "3de3aa0394ff48668653df682da4edc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81499, "upload_time": "2020-01-27T04:24:10", "upload_time_iso_8601": "2020-01-27T04:24:10.912509Z", "url": "https://files.pythonhosted.org/packages/fa/5b/c9c87f73a9600fdba75e492d2bfcbcec03e1b231631b10f2b69dbf1cffd0/osxphotos-0.22.7.tar.gz", "yanked": false}], "0.22.9": [{"comment_text": "", "digests": {"md5": "9eaca056845c890e82886f2439ee26b7", "sha256": "453b3a10ff8e144ae68b38adf5e27278dca89931f4a102d337887deddd16eb15"}, "downloads": -1, "filename": "osxphotos-0.22.9-py3-none-any.whl", "has_sig": false, "md5_digest": "9eaca056845c890e82886f2439ee26b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 65633, "upload_time": "2020-02-01T16:17:27", "upload_time_iso_8601": "2020-02-01T16:17:27.534554Z", "url": "https://files.pythonhosted.org/packages/7e/61/9f2d959cb185cc64b197123c31708e647f616e76eab5f21d9258426b64e9/osxphotos-0.22.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f9f72e44d5c293129169221ce71a83f", "sha256": "c6b41470f29ec733d8d5d050abb093d092e5df428ee93a147bcf6d9a2343193a"}, "downloads": -1, "filename": "osxphotos-0.22.9.tar.gz", "has_sig": false, "md5_digest": "9f9f72e44d5c293129169221ce71a83f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83369, "upload_time": "2020-02-01T16:17:29", "upload_time_iso_8601": "2020-02-01T16:17:29.401139Z", "url": "https://files.pythonhosted.org/packages/e3/1f/5503a960a261187211aa994c2f33eb09014cde66f2f8d04e843bcb0c26bf/osxphotos-0.22.9.tar.gz", "yanked": false}], "0.23.1": [{"comment_text": "", "digests": {"md5": "5a706faa129e93e5e448a7304f0eae1e", "sha256": "e77a3c91400f01766e6188d531c301e25c550eb1d88ffe944b79f0f4f53d42e1"}, "downloads": -1, "filename": "osxphotos-0.23.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5a706faa129e93e5e448a7304f0eae1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 78866, "upload_time": "2020-03-21T21:03:44", "upload_time_iso_8601": "2020-03-21T21:03:44.110517Z", "url": "https://files.pythonhosted.org/packages/e9/60/b5f13486d360996a1b7d970167597bb402530fdd32169e151223dbe96486/osxphotos-0.23.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d232434adc7f274ad9a54b4271e3caca", "sha256": "680c569e51fe2d41f37aca192ac3fb32438392354069aef3825223d5cb60c550"}, "downloads": -1, "filename": "osxphotos-0.23.1.tar.gz", "has_sig": false, "md5_digest": "d232434adc7f274ad9a54b4271e3caca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100404, "upload_time": "2020-03-21T21:03:46", "upload_time_iso_8601": "2020-03-21T21:03:46.588283Z", "url": "https://files.pythonhosted.org/packages/b3/d0/43a5bb3b32fc76d4b8a9d7c94f92024950b4723172040f0d48ef5d061fd0/osxphotos-0.23.1.tar.gz", "yanked": false}], "0.23.3": [{"comment_text": "", "digests": {"md5": "8a52e131e0305a6a935dc0c116b25819", "sha256": "6c69e2694325241e3a961a01c74c2e5dfb9e35a15e86dbb748ff0b51ba88bd10"}, "downloads": -1, "filename": "osxphotos-0.23.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8a52e131e0305a6a935dc0c116b25819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 83795, "upload_time": "2020-03-22T16:47:03", "upload_time_iso_8601": "2020-03-22T16:47:03.272292Z", "url": "https://files.pythonhosted.org/packages/02/11/d045f1de98c2eeb36f763e87712bc95c93505d124014d6c07d09dbce6d46/osxphotos-0.23.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a38885e2030d693b7fbec04d62fedd41", "sha256": "49b3246099598ff49ef5333cbe761fb52bfd726a2b8b381cfab774541fc54340"}, "downloads": -1, "filename": "osxphotos-0.23.3.tar.gz", "has_sig": false, "md5_digest": "a38885e2030d693b7fbec04d62fedd41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108131, "upload_time": "2020-03-22T16:47:05", "upload_time_iso_8601": "2020-03-22T16:47:05.107642Z", "url": "https://files.pythonhosted.org/packages/be/48/e8b6df9a1a04bef70933b8e6a11dd5ba60225f3ca241960f055c28b54868/osxphotos-0.23.3.tar.gz", "yanked": false}], "0.23.4": [{"comment_text": "", "digests": {"md5": "e0eca49edd75c79f553e737f05faf09f", "sha256": "59d53513045b93ca4d9774421cbe3491a17cd2988e2433d7bbacc49eea7f4bcd"}, "downloads": -1, "filename": "osxphotos-0.23.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e0eca49edd75c79f553e737f05faf09f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 83819, "upload_time": "2020-03-22T20:09:04", "upload_time_iso_8601": "2020-03-22T20:09:04.433622Z", "url": "https://files.pythonhosted.org/packages/f5/a6/10327191c30374041d194518773dcedb8bd121f82c03158469bdc083dbea/osxphotos-0.23.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fe2c7446e164d44fb47395a243c2134", "sha256": "ccffd0e6e58d5d5de831e34e26d82c40bee2172343041bec64b1fc319debc533"}, "downloads": -1, "filename": "osxphotos-0.23.4.tar.gz", "has_sig": false, "md5_digest": "3fe2c7446e164d44fb47395a243c2134", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108183, "upload_time": "2020-03-22T20:09:06", "upload_time_iso_8601": "2020-03-22T20:09:06.729547Z", "url": "https://files.pythonhosted.org/packages/d1/10/a27e6f27c91dfb317848f9cedeae33c0b6a2650cf6f4b6380546d75d6d19/osxphotos-0.23.4.tar.gz", "yanked": false}], "0.24.1": [{"comment_text": "", "digests": {"md5": "c775031d8eb118ec29bbf2ad7fa6bef9", "sha256": "033da3de1d20210a9d9e2d5383930853489efed3d6d699f0942a1fc49297c277"}, "downloads": -1, "filename": "osxphotos-0.24.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c775031d8eb118ec29bbf2ad7fa6bef9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 88860, "upload_time": "2020-03-28T17:04:20", "upload_time_iso_8601": "2020-03-28T17:04:20.475265Z", "url": "https://files.pythonhosted.org/packages/94/c8/1d015fdea735db3a2f81fe81d9489ad6f0259b7a14806b4a498103b76ed6/osxphotos-0.24.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee7f6d585dae23d9d9996e545a51a2ef", "sha256": "8b19c2f2bb675232a4fcbdcf71828a015d4a9f68de0f81442d4995b130f97304"}, "downloads": -1, "filename": "osxphotos-0.24.1.tar.gz", "has_sig": false, "md5_digest": "ee7f6d585dae23d9d9996e545a51a2ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118264, "upload_time": "2020-03-28T17:04:22", "upload_time_iso_8601": "2020-03-28T17:04:22.321228Z", "url": "https://files.pythonhosted.org/packages/c7/82/62739e49dd5b4570febddd76d61c089b1bfd5d72d20178c619a3f1e14281/osxphotos-0.24.1.tar.gz", "yanked": false}], "0.24.2": [{"comment_text": "", "digests": {"md5": "b5e22eea2d0e2f740b605918b0aef631", "sha256": "00d89ea8b8192713f0482885dba3a566e225567ab4529e4e5385b3d1533956e0"}, "downloads": -1, "filename": "osxphotos-0.24.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b5e22eea2d0e2f740b605918b0aef631", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 88899, "upload_time": "2020-03-28T17:22:30", "upload_time_iso_8601": "2020-03-28T17:22:30.095883Z", "url": "https://files.pythonhosted.org/packages/02/62/dbb38382a568b2ef1d6c16b9f05f2929253fe619ae33bad4235495995ad3/osxphotos-0.24.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97c3e322945183b5084fba807536ab90", "sha256": "f189ff6c919e56d9d4280fa06ea91c8422b2ee9469f956d063f908f09b2ce8af"}, "downloads": -1, "filename": "osxphotos-0.24.2.tar.gz", "has_sig": false, "md5_digest": "97c3e322945183b5084fba807536ab90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118341, "upload_time": "2020-03-28T17:22:34", "upload_time_iso_8601": "2020-03-28T17:22:34.711368Z", "url": "https://files.pythonhosted.org/packages/b4/b8/b94d29cabb1e7009fe7d45648564a5c6e685b4878e69b97358852d36a54d/osxphotos-0.24.2.tar.gz", "yanked": false}], "0.25.0": [{"comment_text": "", "digests": {"md5": "27d2e82cc019107f3812eda0a996215d", "sha256": "f3a0d3b904cf47304daae0bc6f089f6f9b4491c9dfa1b71b4f93e59c7cfb979d"}, "downloads": -1, "filename": "osxphotos-0.25.0-py3-none-any.whl", "has_sig": false, "md5_digest": "27d2e82cc019107f3812eda0a996215d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 91463, "upload_time": "2020-04-04T21:06:45", "upload_time_iso_8601": "2020-04-04T21:06:45.862363Z", "url": "https://files.pythonhosted.org/packages/36/b2/1be8439cc1ac742326405f38d58d90ed3ea67b3890c994ecc4556027d2ae/osxphotos-0.25.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfdcbe59a268b46f44364ce5b5b84361", "sha256": "415cd375cc4a67319bdc6a9255a84687f912a501656050826d6fcaaf6d94406d"}, "downloads": -1, "filename": "osxphotos-0.25.0.tar.gz", "has_sig": false, "md5_digest": "dfdcbe59a268b46f44364ce5b5b84361", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121767, "upload_time": "2020-04-04T21:06:48", "upload_time_iso_8601": "2020-04-04T21:06:48.453822Z", "url": "https://files.pythonhosted.org/packages/b3/12/ac7eb85a5d7eba09522f9ba123ca0336d729b5ae469c0e77aeb56fce6b52/osxphotos-0.25.0.tar.gz", "yanked": false}], "0.25.1": [{"comment_text": "", "digests": {"md5": "ed252f599200ec144fc81cc47f5cabd2", "sha256": "6dfe5fcf65db77f15054b4a6998bf463dcd1f7adaf9733b8b2a3d167d00031d2"}, "downloads": -1, "filename": "osxphotos-0.25.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed252f599200ec144fc81cc47f5cabd2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 91868, "upload_time": "2020-04-05T16:25:26", "upload_time_iso_8601": "2020-04-05T16:25:26.104555Z", "url": "https://files.pythonhosted.org/packages/9e/40/a24d99458a58b6d4234eb3e9031fab7cbe575720fb27acae29dfb3dec6c4/osxphotos-0.25.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cb197a1f1bc984634b78b47b17fe840", "sha256": "c42129c037d65559e78dda4f8acc198405b29ff9b8d221381f677221e1a07300"}, "downloads": -1, "filename": "osxphotos-0.25.1.tar.gz", "has_sig": false, "md5_digest": "4cb197a1f1bc984634b78b47b17fe840", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122250, "upload_time": "2020-04-05T16:25:28", "upload_time_iso_8601": "2020-04-05T16:25:28.894489Z", "url": "https://files.pythonhosted.org/packages/7a/61/f648d940e2425341fe20507edcdf37ecca196c2ef433ecae6fb87a117109/osxphotos-0.25.1.tar.gz", "yanked": false}], "0.26.0": [{"comment_text": "", "digests": {"md5": "869d77d0de72b40f22e7bed693ee58c2", "sha256": "ecd7ffbc246f1ecd6c216b6083f9a54fe41d213d4fdcda321a2ca82f6dc68eb6"}, "downloads": -1, "filename": "osxphotos-0.26.0-py3-none-any.whl", "has_sig": false, "md5_digest": "869d77d0de72b40f22e7bed693ee58c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 92325, "upload_time": "2020-04-11T00:33:46", "upload_time_iso_8601": "2020-04-11T00:33:46.737542Z", "url": "https://files.pythonhosted.org/packages/e0/cc/744beccd9c9006a60148a25d3c2feee9fe7a5b8a0036627ecb027d208957/osxphotos-0.26.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08048b1d5ad2487b46789be3e64c68ac", "sha256": "7f0ebf36833440f7b3910070f7de62193a94be2e9d3333222203cf5dd4f94eba"}, "downloads": -1, "filename": "osxphotos-0.26.0.tar.gz", "has_sig": false, "md5_digest": "08048b1d5ad2487b46789be3e64c68ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123022, "upload_time": "2020-04-11T00:33:49", "upload_time_iso_8601": "2020-04-11T00:33:49.110120Z", "url": "https://files.pythonhosted.org/packages/21/49/a7d69309d9d7038805fc89594049cccc6e1bb2e8a73c82560d5429afcfe9/osxphotos-0.26.0.tar.gz", "yanked": false}], "0.26.1": [{"comment_text": "", "digests": {"md5": "d6de1c7a7a538050c362e4ff86e3d22a", "sha256": "e7684526aa6d4e174ee4680302a6b8e0b02f8c6ae04a4560de9c9dd20fbc6fb8"}, "downloads": -1, "filename": "osxphotos-0.26.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d6de1c7a7a538050c362e4ff86e3d22a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 92874, "upload_time": "2020-04-11T01:54:25", "upload_time_iso_8601": "2020-04-11T01:54:25.021547Z", "url": "https://files.pythonhosted.org/packages/9a/03/cce9109336fc94517b0cd005bb3a874271a45f5e369feb131a1af8a8d185/osxphotos-0.26.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c02c29ac79a91466a27b14ae71ce0ac", "sha256": "f694498c257b527f89c89264dd751d588f895897ce4a84012d35636dd41b0e91"}, "downloads": -1, "filename": "osxphotos-0.26.1.tar.gz", "has_sig": false, "md5_digest": "5c02c29ac79a91466a27b14ae71ce0ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123228, "upload_time": "2020-04-11T01:54:27", "upload_time_iso_8601": "2020-04-11T01:54:27.160080Z", "url": "https://files.pythonhosted.org/packages/a5/4f/4e9d10db858f14cafffe51074f9b67df67ce09579834de1d16feb2bb35fa/osxphotos-0.26.1.tar.gz", "yanked": false}], "0.27.0": [{"comment_text": "", "digests": {"md5": "e280d9693812e5b9cb53fed9f99dc3b0", "sha256": "af0489927ebb3aff198ba3dc9d0e5443f0b7b6b513231a3d4842176c807cb2f0"}, "downloads": -1, "filename": "osxphotos-0.27.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e280d9693812e5b9cb53fed9f99dc3b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 96200, "upload_time": "2020-04-11T21:31:44", "upload_time_iso_8601": "2020-04-11T21:31:44.888329Z", "url": "https://files.pythonhosted.org/packages/04/e6/57505dcfaeb8f32de2cff9dec17ac80198c6f0f6a2bf7e869f2d3f873193/osxphotos-0.27.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fe9ab4cd506241981d0af374b39187a", "sha256": "88402c912bbf3d84620a3d9735f2b2f0ad4124da1c4c964461eefd6502a139b6"}, "downloads": -1, "filename": "osxphotos-0.27.0.tar.gz", "has_sig": false, "md5_digest": "0fe9ab4cd506241981d0af374b39187a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128024, "upload_time": "2020-04-11T21:31:47", "upload_time_iso_8601": "2020-04-11T21:31:47.022009Z", "url": "https://files.pythonhosted.org/packages/f8/d1/31ee72057d33c5d22d521090845daebd0fa5289f58da767c8370f79b2023/osxphotos-0.27.0.tar.gz", "yanked": false}], "0.27.1": [{"comment_text": "", "digests": {"md5": "52bf6f04c0761ed3e3ff10b1377835b2", "sha256": "39510bed3cbbaf1b2da214fd3aa551829ae365c167bf0095b0f33816396857a3"}, "downloads": -1, "filename": "osxphotos-0.27.1-py3-none-any.whl", "has_sig": false, "md5_digest": "52bf6f04c0761ed3e3ff10b1377835b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 96425, "upload_time": "2020-04-12T16:02:07", "upload_time_iso_8601": "2020-04-12T16:02:07.116440Z", "url": "https://files.pythonhosted.org/packages/8b/6b/eb7b505c2b4f95807bcc79c685cd79ed4ac91b60413ba06baf7bb730c630/osxphotos-0.27.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f902e8d69c42e25f28a688c4ae890434", "sha256": "452fe6630e1b5415ffcda21d8c378798ce6cd7d80c7a316b06f40c85f841221e"}, "downloads": -1, "filename": "osxphotos-0.27.1.tar.gz", "has_sig": false, "md5_digest": "f902e8d69c42e25f28a688c4ae890434", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128355, "upload_time": "2020-04-12T16:02:09", "upload_time_iso_8601": "2020-04-12T16:02:09.103403Z", "url": "https://files.pythonhosted.org/packages/08/d1/4cf8ec961224e5cea4f7c3a934d9b02690eb92f7c33e5ed1bc3ef764ad02/osxphotos-0.27.1.tar.gz", "yanked": false}], "0.27.3": [{"comment_text": "", "digests": {"md5": "872e747ca47dafda77fb8d02a0901da3", "sha256": "11346003b335d8461824c8133f7d0016b43b44f880b14b3265bc800e29592c90"}, "downloads": -1, "filename": "osxphotos-0.27.3-py3-none-any.whl", "has_sig": false, "md5_digest": "872e747ca47dafda77fb8d02a0901da3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 96469, "upload_time": "2020-04-12T19:24:27", "upload_time_iso_8601": "2020-04-12T19:24:27.770637Z", "url": "https://files.pythonhosted.org/packages/65/39/10c6fac1524cb62350279b5183ba54464c07ef444923791cd24bafc6744f/osxphotos-0.27.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c222e4adea3bb78874733fba8df4f1d8", "sha256": "567021fc9cdddd91599ab0f325eed941829cf07b3f6e3491d597a0930554b8d5"}, "downloads": -1, "filename": "osxphotos-0.27.3.tar.gz", "has_sig": false, "md5_digest": "c222e4adea3bb78874733fba8df4f1d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128391, "upload_time": "2020-04-12T19:24:30", "upload_time_iso_8601": "2020-04-12T19:24:30.065187Z", "url": "https://files.pythonhosted.org/packages/e4/33/1991a320f3ed4e349b067bda6715c48eadd41219df710b9e10603bdd172f/osxphotos-0.27.3.tar.gz", "yanked": false}], "0.27.4": [{"comment_text": "", "digests": {"md5": "e903ea84cd88e76eeed620b143e5897c", "sha256": "e9769c5f4e9b498494401da0ff0ac9499e0eed35e358afb2558b35d97cdff395"}, "downloads": -1, "filename": "osxphotos-0.27.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e903ea84cd88e76eeed620b143e5897c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 96988, "upload_time": "2020-04-12T21:57:22", "upload_time_iso_8601": "2020-04-12T21:57:22.382993Z", "url": "https://files.pythonhosted.org/packages/29/ad/14c1e53b53c011cb432b3f0e207bb7b500f65632e369ed03593461f3e26f/osxphotos-0.27.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa8afe9b2d0d07968c581ffb8ed5fd4d", "sha256": "7f38fcfe5fb2f9bb91005b1c880a8c53fa8ef1aa89bab2499a7916696c15904e"}, "downloads": -1, "filename": "osxphotos-0.27.4.tar.gz", "has_sig": false, "md5_digest": "aa8afe9b2d0d07968c581ffb8ed5fd4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129397, "upload_time": "2020-04-12T21:57:24", "upload_time_iso_8601": "2020-04-12T21:57:24.394101Z", "url": "https://files.pythonhosted.org/packages/cf/67/f8cbf96ba15206fcaa8fa433724b1a6af733642ab388f9a61ac6ee186369/osxphotos-0.27.4.tar.gz", "yanked": false}], "0.28.1": [{"comment_text": "", "digests": {"md5": "621699b45975fb235de4b9c1b60f04df", "sha256": "5e11a78ba153c470cc51b981a69ccab8997e81e4ba9cac8e75bfc8115bb7002f"}, "downloads": -1, "filename": "osxphotos-0.28.1-py3-none-any.whl", "has_sig": false, "md5_digest": "621699b45975fb235de4b9c1b60f04df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 98960, "upload_time": "2020-04-18T06:28:23", "upload_time_iso_8601": "2020-04-18T06:28:23.960909Z", "url": "https://files.pythonhosted.org/packages/cc/b3/30f5b11390d5180d6c31c8e0c27caa3a3fd7b167461ce2160679b4e06d59/osxphotos-0.28.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fdfd3c82ff93b200848cca54cbf441e", "sha256": "a82abe3e34d34645ef0389d1f29cafe1618cb7f0b00d9bfc73116d6948d6802c"}, "downloads": -1, "filename": "osxphotos-0.28.1.tar.gz", "has_sig": false, "md5_digest": "3fdfd3c82ff93b200848cca54cbf441e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132637, "upload_time": "2020-04-18T06:28:26", "upload_time_iso_8601": "2020-04-18T06:28:26.076424Z", "url": "https://files.pythonhosted.org/packages/e8/c4/5e48fcedc704149c9173de6a4efa0aad6b336ed11be42d6ce86e2d924b08/osxphotos-0.28.1.tar.gz", "yanked": false}], "0.28.10": [{"comment_text": "", "digests": {"md5": "5ca495073bb2ec298c2f07fa5ce0ef32", "sha256": "fe0b939009df425c1cfa6eae16c0fd1ae2e21a6a001ad545f537253d99f009db"}, "downloads": -1, "filename": "osxphotos-0.28.10-py3-none-any.whl", "has_sig": false, "md5_digest": "5ca495073bb2ec298c2f07fa5ce0ef32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100948, "upload_time": "2020-04-29T01:21:18", "upload_time_iso_8601": "2020-04-29T01:21:18.636079Z", "url": "https://files.pythonhosted.org/packages/a2/af/3b77cb252fba1315c37f7b68f3fab604d2b231b72a5a2b972a5c9d9d58d9/osxphotos-0.28.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ceb3922f43ac2678a666c75e3ce547c3", "sha256": "23bdd59f5edb436764958371e660207cca07903ae4fdcd7116ce2569ee923cac"}, "downloads": -1, "filename": "osxphotos-0.28.10.tar.gz", "has_sig": false, "md5_digest": "ceb3922f43ac2678a666c75e3ce547c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135955, "upload_time": "2020-04-29T01:21:21", "upload_time_iso_8601": "2020-04-29T01:21:21.102594Z", "url": "https://files.pythonhosted.org/packages/c9/15/5fc5be85439950337066f7a858038e5beea6225506c360d65dfe83128012/osxphotos-0.28.10.tar.gz", "yanked": false}], "0.28.13": [{"comment_text": "", "digests": {"md5": "5d9150aafa06de9720d5ef0fd203eeab", "sha256": "a83cfac8cb851688e1e34c556f5ee4bbd40e722489e777ee54a61c070d0f6f53"}, "downloads": -1, "filename": "osxphotos-0.28.13-py3-none-any.whl", "has_sig": false, "md5_digest": "5d9150aafa06de9720d5ef0fd203eeab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 102550, "upload_time": "2020-05-02T05:14:50", "upload_time_iso_8601": "2020-05-02T05:14:50.209397Z", "url": "https://files.pythonhosted.org/packages/ca/49/913ef7b071ebe4f0c200f6e7dd60b35100faa237c830516e791d57b40b5c/osxphotos-0.28.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2437484b90ec66ba8276449b43d8699a", "sha256": "b362a2c1167fef4629cd1995751a4a3b569d9d16e12ac3b0ab8713fabcff8769"}, "downloads": -1, "filename": "osxphotos-0.28.13.tar.gz", "has_sig": false, "md5_digest": "2437484b90ec66ba8276449b43d8699a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137856, "upload_time": "2020-05-02T05:14:52", "upload_time_iso_8601": "2020-05-02T05:14:52.021179Z", "url": "https://files.pythonhosted.org/packages/d5/c7/7e754224626c3bd30d59b7652fe19316c6bf882c7eb35deb962902e30c4a/osxphotos-0.28.13.tar.gz", "yanked": false}], "0.28.2": [{"comment_text": "", "digests": {"md5": "77e306af7b4aa7ee75aeb3a41a4c93b4", "sha256": "9c41b2ba2ee0c4f36921d98106041bb101b7b8d4ba438e5b9d3a1603770e841d"}, "downloads": -1, "filename": "osxphotos-0.28.2-py3-none-any.whl", "has_sig": false, "md5_digest": "77e306af7b4aa7ee75aeb3a41a4c93b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99897, "upload_time": "2020-04-18T19:28:32", "upload_time_iso_8601": "2020-04-18T19:28:32.394231Z", "url": "https://files.pythonhosted.org/packages/b0/a3/02e2c79d6f9187ad4167efd540c76c63c0264e9a894585486f48e62d1117/osxphotos-0.28.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edca74c87b7146fcb14cb3d723e7f161", "sha256": "ed37f9f95001c38a0c2ad00c6302c6e7b1d4adffb9a95d81fb8ae3066bded7c4"}, "downloads": -1, "filename": "osxphotos-0.28.2.tar.gz", "has_sig": false, "md5_digest": "edca74c87b7146fcb14cb3d723e7f161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133570, "upload_time": "2020-04-18T19:28:34", "upload_time_iso_8601": "2020-04-18T19:28:34.803669Z", "url": "https://files.pythonhosted.org/packages/cf/5a/5703c3a3c4d105a252da29074ec9cb3635fb35ba939252e2077ea1349887/osxphotos-0.28.2.tar.gz", "yanked": false}], "0.28.3": [{"comment_text": "", "digests": {"md5": "3cb70ef47661238ec397543e6f907302", "sha256": "75a576b477caef7fe5043730bfe8105efd18aaa07616694b35972a5487cab890"}, "downloads": -1, "filename": "osxphotos-0.28.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3cb70ef47661238ec397543e6f907302", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100170, "upload_time": "2020-04-21T04:30:02", "upload_time_iso_8601": "2020-04-21T04:30:02.812098Z", "url": "https://files.pythonhosted.org/packages/90/12/0dd12052df60fa92b4124e379dc50317f2924740e07886cf4207f4c9d059/osxphotos-0.28.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4922fb28168cfad00a07c6ade9ceb728", "sha256": "618560c6921709887c45d1d0d3526770c29d9b940d854e41012d03a8f167a84f"}, "downloads": -1, "filename": "osxphotos-0.28.3.tar.gz", "has_sig": false, "md5_digest": "4922fb28168cfad00a07c6ade9ceb728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133349, "upload_time": "2020-04-21T04:30:05", "upload_time_iso_8601": "2020-04-21T04:30:05.129360Z", "url": "https://files.pythonhosted.org/packages/6f/63/4a795d757b9b2e7eb8da87d94d47d575f71c8b025fa5b922287504a2a28f/osxphotos-0.28.3.tar.gz", "yanked": false}], "0.28.4": [{"comment_text": "", "digests": {"md5": "0e3e56ad1df498205bae97fe74e7821b", "sha256": "b9d1278a0d0d7741c10131fbd38deb32848fae0ab604d692252f6db5709eb484"}, "downloads": -1, "filename": "osxphotos-0.28.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0e3e56ad1df498205bae97fe74e7821b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100160, "upload_time": "2020-04-21T04:40:34", "upload_time_iso_8601": "2020-04-21T04:40:34.616267Z", "url": "https://files.pythonhosted.org/packages/e1/23/9a7b22464bcd3637ea483ebdee46fb457852d35008971d82517f2c3602ae/osxphotos-0.28.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e94d2aa1c006ce91c572083381605d41", "sha256": "a90bf0e5f9a857fbe7e181cb66c432dc5e852c289dd5403b72ddb0fba2e2b358"}, "downloads": -1, "filename": "osxphotos-0.28.4.tar.gz", "has_sig": false, "md5_digest": "e94d2aa1c006ce91c572083381605d41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134431, "upload_time": "2020-04-21T04:40:36", "upload_time_iso_8601": "2020-04-21T04:40:36.524267Z", "url": "https://files.pythonhosted.org/packages/b8/1c/ce79730605d83efa23af33824c70f60447f520de8a73a86900bb7985a2f6/osxphotos-0.28.4.tar.gz", "yanked": false}], "0.28.5": [{"comment_text": "", "digests": {"md5": "c8937862f3bf5256d9aaac761e9a511d", "sha256": "db6f87234559b7999e97100fcd8fe6ec634fdc70aba55ba47faed15444ff8feb"}, "downloads": -1, "filename": "osxphotos-0.28.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c8937862f3bf5256d9aaac761e9a511d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100290, "upload_time": "2020-04-21T05:17:14", "upload_time_iso_8601": "2020-04-21T05:17:14.804520Z", "url": "https://files.pythonhosted.org/packages/4a/33/927dbcb83c14b1d0a3c83449989ee097a6b1cfab128024df00b595cab6d1/osxphotos-0.28.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff03fc478fb5a224e61525a8b010241b", "sha256": "777d71ede51d70fc839364efec99ec976f3eabda79ddb128d201ce39642ceb65"}, "downloads": -1, "filename": "osxphotos-0.28.5.tar.gz", "has_sig": false, "md5_digest": "ff03fc478fb5a224e61525a8b010241b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134854, "upload_time": "2020-04-21T05:17:17", "upload_time_iso_8601": "2020-04-21T05:17:17.116656Z", "url": "https://files.pythonhosted.org/packages/fd/75/4f05e1f84586cb1216c99d15dd354f24970d8c5099339216896741993950/osxphotos-0.28.5.tar.gz", "yanked": false}], "0.28.6": [{"comment_text": "", "digests": {"md5": "2031794a45e785a3564bbe3d04b7649b", "sha256": "68ebabddccce481b07b525dd2c5ca37e6f27abf1d486feb4b3669150dba0d2e2"}, "downloads": -1, "filename": "osxphotos-0.28.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2031794a45e785a3564bbe3d04b7649b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100324, "upload_time": "2020-04-26T23:41:43", "upload_time_iso_8601": "2020-04-26T23:41:43.730213Z", "url": "https://files.pythonhosted.org/packages/18/a9/7582da999d72a9ab08391711445ff61f6a3334f12ec256c56cb112865fbc/osxphotos-0.28.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19433c22ad951e732d8ca2a13bbf1ec3", "sha256": "b986de6859ccc4b851177cde807110bc6123c23adcfb4439ad64a9396dee398a"}, "downloads": -1, "filename": "osxphotos-0.28.6.tar.gz", "has_sig": false, "md5_digest": "19433c22ad951e732d8ca2a13bbf1ec3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134906, "upload_time": "2020-04-26T23:41:47", "upload_time_iso_8601": "2020-04-26T23:41:47.325504Z", "url": "https://files.pythonhosted.org/packages/1c/1b/52141b3e5a8876e9336c5914b25afe14fa37f993a4b542ef0c9f8cf957bb/osxphotos-0.28.6.tar.gz", "yanked": false}], "0.28.7": [{"comment_text": "", "digests": {"md5": "be920709ff11fb86ce9ae3a06e7e9336", "sha256": "65fcce2078702c695667f9af6a969bfce0d45bcf68e7c9044907b5c24596a112"}, "downloads": -1, "filename": "osxphotos-0.28.7-py3-none-any.whl", "has_sig": false, "md5_digest": "be920709ff11fb86ce9ae3a06e7e9336", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100819, "upload_time": "2020-04-28T06:22:14", "upload_time_iso_8601": "2020-04-28T06:22:14.159346Z", "url": "https://files.pythonhosted.org/packages/99/8a/0acccfc43079fcb8b5bc443f74c1beb862fb47f3d5609ba95f362a8c9fea/osxphotos-0.28.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b425e067cfeee46cb2e8cd35a574947", "sha256": "93d962e05e1a1a698767968d98c6fe8c30b6635893a07fc808cb1ae36cad9030"}, "downloads": -1, "filename": "osxphotos-0.28.7.tar.gz", "has_sig": false, "md5_digest": "3b425e067cfeee46cb2e8cd35a574947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135586, "upload_time": "2020-04-28T06:22:16", "upload_time_iso_8601": "2020-04-28T06:22:16.265826Z", "url": "https://files.pythonhosted.org/packages/d7/75/9510317d33999a6ce3dc23afcf4a5bc044b455fb15518ee9c341026983c5/osxphotos-0.28.7.tar.gz", "yanked": false}], "0.28.8": [{"comment_text": "", "digests": {"md5": "ef03c05a64b5d1cebed1ba7206b4e3ef", "sha256": "8635d614194d2ee97c83859b13c6f34f888009c7cd3cd13f6ba3c11e98c8fb66"}, "downloads": -1, "filename": "osxphotos-0.28.8-py3-none-any.whl", "has_sig": false, "md5_digest": "ef03c05a64b5d1cebed1ba7206b4e3ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100911, "upload_time": "2020-04-28T14:52:39", "upload_time_iso_8601": "2020-04-28T14:52:39.587437Z", "url": "https://files.pythonhosted.org/packages/87/10/45cc7a6c5e55237a4536c68ed913e8b95665e05093540893245eba0fd43f/osxphotos-0.28.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3bcb10ce49172008d7c4e1a08abeecb", "sha256": "e72ecb5bc5e1e675db910264bb3f7ddfcfc2b6d0c20438ca945b87190fc28a86"}, "downloads": -1, "filename": "osxphotos-0.28.8.tar.gz", "has_sig": false, "md5_digest": "e3bcb10ce49172008d7c4e1a08abeecb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135707, "upload_time": "2020-04-28T14:52:41", "upload_time_iso_8601": "2020-04-28T14:52:41.529379Z", "url": "https://files.pythonhosted.org/packages/4f/c8/f5eece4d222ca257805d3d9aaacdaf59df13234ac1064387fc1e75675f81/osxphotos-0.28.8.tar.gz", "yanked": false}], "0.28.9": [{"comment_text": "", "digests": {"md5": "7865996d3ee1c1540a37ce0913558488", "sha256": "927e775ac5ddd864fdc89178002ab234e2564722611a305aea490e49f2e235a4"}, "downloads": -1, "filename": "osxphotos-0.28.9-py3-none-any.whl", "has_sig": false, "md5_digest": "7865996d3ee1c1540a37ce0913558488", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 100953, "upload_time": "2020-04-28T14:55:13", "upload_time_iso_8601": "2020-04-28T14:55:13.683014Z", "url": "https://files.pythonhosted.org/packages/08/cb/664ee9aeb2ff2288262c045cf2111e55b8810178383d30fac9660d094fec/osxphotos-0.28.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d5041474ab233aa7b6fa6bba9c9ce2", "sha256": "b32d51fce661f801a6ee143e9769048b1bc11799dcbfd535cb70b92c3d79aa31"}, "downloads": -1, "filename": "osxphotos-0.28.9.tar.gz", "has_sig": false, "md5_digest": "28d5041474ab233aa7b6fa6bba9c9ce2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135946, "upload_time": "2020-04-28T14:55:15", "upload_time_iso_8601": "2020-04-28T14:55:15.763932Z", "url": "https://files.pythonhosted.org/packages/2a/f6/b21ee9136e8df4a15018a8b73ed6a9c6ae979631f04dcc9e3d48d27c0160/osxphotos-0.28.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d9150aafa06de9720d5ef0fd203eeab", "sha256": "a83cfac8cb851688e1e34c556f5ee4bbd40e722489e777ee54a61c070d0f6f53"}, "downloads": -1, "filename": "osxphotos-0.28.13-py3-none-any.whl", "has_sig": false, "md5_digest": "5d9150aafa06de9720d5ef0fd203eeab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 102550, "upload_time": "2020-05-02T05:14:50", "upload_time_iso_8601": "2020-05-02T05:14:50.209397Z", "url": "https://files.pythonhosted.org/packages/ca/49/913ef7b071ebe4f0c200f6e7dd60b35100faa237c830516e791d57b40b5c/osxphotos-0.28.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2437484b90ec66ba8276449b43d8699a", "sha256": "b362a2c1167fef4629cd1995751a4a3b569d9d16e12ac3b0ab8713fabcff8769"}, "downloads": -1, "filename": "osxphotos-0.28.13.tar.gz", "has_sig": false, "md5_digest": "2437484b90ec66ba8276449b43d8699a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137856, "upload_time": "2020-05-02T05:14:52", "upload_time_iso_8601": "2020-05-02T05:14:52.021179Z", "url": "https://files.pythonhosted.org/packages/d5/c7/7e754224626c3bd30d59b7652fe19316c6bf882c7eb35deb962902e30c4a/osxphotos-0.28.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:52 2020"}