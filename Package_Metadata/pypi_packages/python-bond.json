{"info": {"author": "Yuri D'Elia", "author_email": "wavexx@thregr.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: No Input/Output (Daemon)", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: JavaScript", "Programming Language :: Perl", "Programming Language :: PHP", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Interpreters", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\npython ``bond``\n===============\n---------------------------------------------------\nAmbivalent bonds between Python and other languages\n---------------------------------------------------\n\n.. contents::\n\nThe Python module ``bond`` supports transparent remote/recursive evaluation\nbetween Python and another interpreter through automatic call serialization.\n\nIn poorer words, a ``bond`` lets you call functions in other languages as they\nwere normal Python functions. It *also* allows other languages to *call Python\nfunctions* as if they were native.\n\nRemote output is also transparently redirected locally, and since the\nevaluation is performed through a persistent co-process, you can actually spawn\ninterpreters on different hosts through \"ssh\" efficiently.\n\n``bond`` currently supports PHP, Perl, JavaScript (Node.js) and Python itself.\n\n\nOverview\n========\n\n.. code:: python3\n\n  >>> # Let's bond with a PHP interpreter\n  >>> from bond import make_bond\n  >>> php = make_bond('PHP')\n  >>> php.eval_block('echo \"Hello world!\\n\";')\n  Hello world!\n\n  >>> # Make an expensive split function using PHP's explode\n  >>> split = php.callable('explode')\n  >>> split(' ', \"Hello world splitted by PHP!\")\n  [u'Hello', u'world', u'splitted', u'by', u'PHP!']\n\n  >>> # Call Python from PHP\n  >>> def call_me():\n  ...     print(\"Hi, this is Python talking!\")\n  >>> php.export(call_me)\n  >>> php.eval('call_me()')\n  Hi, this is Python talking!\n\n  >>> # Use some remote resources\n  >>> remote_php = make_bond('PHP', 'ssh remote php')\n  >>> remote_php.eval_block('function call_me() { echo \"Hi from \" . system(\"hostname\") . \"!\"; }')\n  >>> remote_php.eval('call_me()')\n  Hi from remote!\n\n  >>> # Bridge two worlds!\n  >>> perl = make_bond('Perl')\n  >>> php.proxy('explode', perl)\n  >>> # note: explode is now available to Perl, but still executes in PHP\n  >>> perl.eval('explode(\"=\", \"Mind=blown!\")')\n  [u'Mind', u'blown!']\n\n\nPractical examples\n==================\n\nIncremental code-base migration\n-------------------------------\n\nI originally needed ``bond`` for migrating a large PHP project to Python. With\n``bond`` you can rewrite a program incrementally, while still executing all the\nexisting code unchanged. You can start by rewriting just a single function in\nan empty shell, wrapping your existing code:\n\n.. code:: python3\n\n  from bond import make_bond\n  import sys\n\n  php = make_bond('PHP')\n  php.eval_block('include(\"my_original_program.php\");')\n\n  def new_function(arg)\n      # do something here\n      pass\n\n  php.export(new_function, 'function_to_be_replaced')\n  php.call('main', sys.argv)\n\n\nMixing Python 2/3 code bases\n----------------------------\n\nYou can use ``bond`` to mix Python 2/3 code. Python <=> Python bonds\nautomatically use pickling as a protocol, which makes serialization almost\ninvisible.\n\nIn this scenario, you can start writing new code directly on Python 3, while\nusing Python 2 only for the libraries which are still missing.\n\nFor example, you can use ``Mechanize`` on Python 3 with minimal changes:\n\n.. code:: python3\n\n  from bond import make_bond\n  py2 = make_bond('Python', 'python2', trans_except=False)\n  py2.eval_block('import mechanize; br = mechanize.Browser()')\n  py2.call('br.open', 'http://www.example.com')\n  title = py2.call('br.title')\n\n``eval_block`` is only being used as an example here to make it self-contained.\nA more reasonable solution for larger chunks of code is to split the source\ninto a distinct file that can be loaded at once in the remote interpreter:\n\n.. code:: python3\n\n  from bond import make_bond\n  py2 = make_bond('Python', 'python2', trans_except=False)\n  py2.eval_block('import .mypython2lib')\n\nThis reduces the amount of clutter and keeps the distinction between new and\nlegacy code clear. You should also keep in mind that since the remote language\nis itself Python, expressions themselves (for whenever ``call`` is\ninsufficient) can be quoted just by using ``repr``.\n\nSimilarly, you can use ``bond`` to combine regular CPython and PyPy runtimes\n(all the required modules work as expected on PyPy):\n\n.. code:: python3\n\n  from bond import make_bond\n  pypy = make_bond('Python', 'pypy')\n\n\nRemote/parallel computation\n---------------------------\n\nYou can easily use ``bond`` to perform remote/parallel computation. Nobody\nstops you from having multiple interpreters at the same time: you can create\nmultiple bonds to setup a poor-man's distributed system with minimal effort:\n\n.. code:: python3\n\n  # setup the workers\n  from bond import make_bond\n  hosts = ['host1', 'host2', 'host3']\n  nodes = [make_bond('Python', 'ssh {} python'.format(host)) for host in hosts]\n\n  # load our libraries first\n  for node in nodes:\n      node.eval_block('from library import *')\n\n  # execute \"do_something\" remotely on each worker\n  from threading import Thread\n  threads = [Thread(target=lambda: node.call('do_something')) for node in nodes]\n  for thread in threads: thread.start()\n\n  # collect the results\n  results = [thread.join() for thread in threads]\n\nDistributed producer/consumer schemes also come for free by proxying calls:\n\n.. code:: python3\n\n  host1.eval_block(r'''def consumer(data):\n     # do something with data\n     pass\n  ''')\n\n  host2.eval_block(r'''def producer():\n      while True:\n\t data = function()\n\t consumer(data)\n  ''')\n\n  host1.proxy('consumer', host2)\n  host2.call('producer')\n\nIt's even more interesting if you realize that the producers/consumers don't\neven have to be written in the same language, and don't know that the call is\nactually being forwarded.\n\n``bond`` doesn't even need to be installed remotely: the required setup is\ninjected directly into a live interpreter. The wire protocol is simple enough\nthat any language supporting an interactive REPL can be called. In fact, `the\ndrivers themselves <https://github.com/wavexx/bond-drivers>`_ are designed to\nbe used from any other language.\n\n\nPrivilege separation\n--------------------\n\nThere might be times when it makes sense to create an unprivileged context to\nperform potentially dangerous operations, such as decoding an uploaded file on\nwhich you have zero trust. A common approach would be to communicate with an\nunprivileged daemon built for the purpose, but it usually requires dedicated\neffort. Running such processes using ``bond`` instead is almost trivial:\n\n.. code:: python3\n\n  # early in the setup phase of our daemon we create a bond using\n  # passwordless sudo, changing to an unprivileged user\n  py = make_bond('Python', 'sudo -u nobody python',\n\t\t trans_except=False, protocol='JSON')\n  py.eval_block('from mylibrary import decode_file')\n\n  # make decode_file() available as a normal function\n  decode_file = py.callable('decode_file')\n\n  # assuming decode_file() takes a file name which is at least readable by\n  # the unprivileged user, we can just take it's return value\n  data = decode_file(path)\n\nContrarily to other examples involving Python, here we actually restrict the\nserialization protocol to plain ``JSON``. Nothing changes from the caller (our)\nperspective, except that the bond now can't share with us anything beyond\ntrivial types. Python <=> Python bonds use ``pickle`` by default, which is not\nsensible here as ``pickle`` allows arbitrary Python structures and handlers to\nbe run (including bytecode itself).\n\nIf just running the context as another user is not enough, then setting up an\nLXC container doesn't add much complexity, since we can just use\n``lxc-execute`` to attach directly to the new instance's STDIO:\n\n.. code:: python3\n\n  py = make_bond('Python', 'lxc-execute -n <name> -f <config> /path/to/python',\n\t\t trans_except=False, protocol='JSON')\n\nThis way an ephemeral container is started/destroyed automatically along with\nour daemon. The container itself can expose just a few shared/read-only\ndirectories, or nothing at all if the entire I/O is built on top of ``bond``.\n\n\nAPI\n===\n\nInitialization\n--------------\n\nA ``bond.Bond`` object is not normally constructed directly, but by using the\n``bond.make_bond()`` function:\n\n.. code:: python3\n\n  import bond\n  interpreter = bond.make_bond('language')\n\nThe first argument should be the desired language name (\"JavaScript\", \"PHP\",\n\"Perl\", \"Python\"). The list of supported languages can be fetched dynamically\nusing ``bond.list_drivers()``.\n\nYou can override the default interpreter command using the second argument,\nwhich allows to specify any shell command to be executed:\n\n.. code:: python3\n\n  import bond\n  py = bond.make_bond('Python', 'ssh remote python3')\n\nAn additional *list* of arguments to the interpreter can be provided using the\nthird argument, ``args``:\n\n.. code:: python3\n\n  import bond\n  py = bond.make_bond('Python', 'ssh remote python3', ['-E', '-OO'])\n\nThe *arguments*, contrarily to the command, are automatically quoted.\n\nSome command line arguments may be supplied automatically by the driver to\nforce an interactive shell; for example \"-i\" is supplied if Python is\nrequested. You can disable default arguments by using ``def_args=False``.\n\nThe following keyword arguments are supported:\n\n``cwd``:\n\n  Working directory for the interpreter (defaults to current working\n  directory).\n\n``env``:\n\n  Environment for the interpreter (defaults to ``os.environ``).\n\n``def_args``:\n\n  Enable (default) or suppress default, extra command-line arguments to the\n  interpreter.\n\n``timeout``:\n\n  Defines the timeout for the underlying communication protocol. Note that\n  ``bond`` cannot distinguish between a slow call or noise generated while the\n  interpreter is set up. Defaults to 60 seconds.\n\n``logfile``:\n\n  Accepts a file handle which is used to log the entire communication with the\n  underlying interpreter for debugging purposes.\n\n``trans_except``:\n\n  Enables/disables \"transparent exceptions\". Exceptions are always first class,\n  but when ``trans_except`` is enabled, the exception objects themselves will\n  be forwarded across the bond. If ``trans_except`` is disabled (the default\n  for all languages except Python), then local exceptions will always contain a\n  string representation of the remote exception instead, which avoids\n  serialization errors.\n\n``protocol``:\n\n  Forces a specific serialization protocol to be chosen. It's automatically\n  selected when not specified, and usually matches \"JSON\".\n\n\n``bond.Bond`` Methods\n---------------------\n\nThe resulting ``bond.Bond`` class has the following methods:\n\n``eval(code)``:\n\n  Evaluate and return the value of a *single statement* of code in the\n  interpreter.\n\n``eval_block(code)``:\n\n  Execute a \"code\" block inside the top-level of the interpreter. Any construct\n  which is legal by the current interpreter is allowed. Nothing is returned.\n\n``ref(code)``:\n\n  Return a reference to an *single, unevaluated statement* of code, which can\n  be later used in eval(), eval_block() or as an *immediate* argument to call().\n  See `Quoted expressions`_.\n\n``close()``:\n\n  Terminate the communication with the interpreter.\n\n``call(name, *args)``:\n\n  Call a function \"name\" in the interpreter using the supplied list of\n  arguments \\*args (apply \\*args to a callable statement defined by \"name\").\n  The arguments are automatically converted to their other language's\n  counterpart. The return value is captured and converted back to Python as\n  well.\n\n``callable(name)``:\n\n  Return a function that calls \"name\":\n\n  .. code:: python\n\n    explode = php.callable('explode')\n    # Now you can call explode as a normal, local function\n    explode(' ', 'Hello world')\n\n``export(func, name)``:\n\n  Export a local function \"func\" so that can be called on the remote language\n  as \"name\". If \"name\" is not specified, use the local function name directly.\n  Note that \"func\" must be a function *reference*, not a function name.\n\n``proxy(name, other, remote)``:\n\n  Export a function \"name\" from the current ``bond`` to \"other\", named as\n  \"remote\". If \"remote\" is not provided, the same value as \"name\" is used.\n\n``interact()``:\n\n  Start an interactive session with the underlying interpreter. By default, all\n  input lines are executed with bond.eval_block(). If \"!\" is pre-pended,\n  execute a single statement with bond.eval() and print it's return value. You\n  can continue the statement on multiple lines by leaving a trailing \"\\\\\". Type\n  Ctrl+C to abort a multi-line block without executing it.\n\n\nExceptions\n----------\n\nAll exceptions thrown by the ``bond`` module are of base type ``RuntimeError``\n<= ``BondException``.\n\n``BondException``:\n  Thrown during initialization or unrecoverable errors.\n\n``TerminatedException``:\n  Thrown when the bond exits unexpectedly.\n\n``SerializationException``:\n  Thrown when an object/exception which is sent *or* received cannot be\n  serialized by the current protocol. The ``side`` attribute can be either\n  \"local\" (when attempting to *send*) or \"remote\" (when *receiving*). A\n  ``SerializationException`` is not fatal.\n\n``RemoteException``:\n  Thrown for uncaught remote exceptions. The \"data\" attribute contains either\n  the error message (with ``trans_except=False``) or the remote exception\n  itself (``trans_except=True``).\n\nBeware that both ``SerializationException`` (with ``side=\"remote\"``) and\n``RemoteException`` may actually be originating from uncaught *local*\nexceptions when an exported function is called. Pay attention to the error\ntext/data in these cases, as it will contain several nested exceptions.\n\n\nQuoted expressions\n------------------\n\n``bond`` has minimal support for quoted expressions, through the use of\n``Bond.ref()``. ``ref()`` returns a reference to a unevaluated statement that\ncan be fed back to ``eval()``, ``eval_block()``, or as an *immediate* (i.e.:\nnot nested) argument to ``call()``. References are bound to the interpreter\nthat created them.\n\n``ref()`` allows to \"call\" methods that take remote un-serializable arguments,\nsuch as file descriptors, without the use of a support function and/or eval:\n\n.. code:: python3\n\n  pl = make_bond('Perl')\n  pl.eval_block('open($fd, \">file.txt\");')\n  fd = pl.ref('$fd')\n  pl.call('syswrite', fd, \"Hello world!\")\n  pl.call('close', fd)\n\nSince ``ref()`` objects cannot be nested, there are still cases where it might\nbe necessary to use a support function. To demonstrate, we rewrite the above\nexample without quoted expressions, while still allowing an argument (\"Hello\nworld!\") to be local:\n\n.. code:: python3\n\n  pl = make_bond('Perl')\n  pl.eval_block('open($fd, \">file.txt\");')\n  pl.eval_block('sub syswrite_fd { syswrite($fd, shift()); };')\n  pl.call('syswrite_fd', \"Hello world!\")\n  pl.eval('close($fd)')\n\nOr more succinctly:\n\n.. code:: python3\n\n  pl.call('sub { syswrite($fd, shift()); }', \"Hello world!\")\n\n\nLanguage support\n================\n\nPython\n------\n\nPython, as the identity language, has no restriction on data types. Everything\nis pickled on both sides, including exceptions.\n\n\nSerialization:\n\n* Performed locally and remotely using ``cPickle`` in Python 2 or `pickle\n  <https://docs.python.org/2/library/pickle.html>`_ in Python 3.\n\n* Serialization exceptions on the remote side are of base type\n  ``TypeError`` <= ``_BOND_SerializationException``.\n\n\nPython 2 / Python 3 / PyPy:\n\nYou can freely mix Python versions between hosts/interpreters (that is: you can\nrun Python 3 code from a Python 2 host and vice-versa). You'll need to disable\ntransparent exceptions between major versions though, as the exception\nhierarchy is different:\n\n.. code:: python3\n\n  # assuming a python2.7 environment\n  from bond import make_bond\n  py = make_bond('Python', 'python3', trans_except=False)\n\n\nPHP\n---\n\nRequirements:\n\n* The PHP's >= 5.3 command line interpreter needs to be installed. On\n  Debian/Ubuntu, the required package is ``php5-cli``.\n\nSerialization:\n\n* Performed remotely using ``JSON``. Implement the `JsonSerializable\n  <http://php.net/manual/en/jsonserializable.jsonserialize.php>`_ interface to\n  tweak which/how objects are encoded.\n\n* Serialization exceptions on the remote side are of base type\n  ``_BOND_SerializationException``. The detailed results of the error can\n  also be retrieved using `json_last_error\n  <http://php.net/manual/en/function.json-last-error.php>`_.\n\nLimitations:\n\n* PHP <= 5.3 doesn't support the ``JsonSerializable`` interface, and thus lacks\n  the ability of serializing arbitrary objects.\n\n* You cannot use ``call`` on a built-in function such as \"echo\". You have to\n  use a real function instead, like \"print\". You can still call \"echo\" by using\n  ``eval`` or ``eval_block``.\n\n* Unfortunately, you cannot catch \"fatal errors\" in PHP. If the evaluated code\n  triggers a fatal error it will terminate the bond without appeal. A common\n  example of such error can be attempting to use an undefined variable or\n  function (which could happen while prototyping).\n\n* Due to the inability to override built-in functions, ``error_reporting()`` is\n  not completely transparent and always returns 0. It shouldn't be used to\n  control the display error level. Use ``_BOND_error_reporting()`` instead,\n  which has the same usage/signature as the built-in function.\n\n\nPerl\n----\n\nPerl is a quirky language, due to its syntax. We assume here you're an\nexperienced Perl developer.\n\nRequirements:\n\n* Perl >= 5.14 is required, with the following modules:\n\n  - ``JSON``\n  - ``Data::Dump``\n  - ``IO::String``\n\n  On Debian/Ubuntu, the required packages are ``libjson-perl``\n  ``libdata-dump-perl`` and ``libio-string-perl``.\n\nSerialization:\n\n* Performed remotely using ``JSON``. Implement the `TO_JSON\n  <http://search.cpan.org/dist/JSON/lib/JSON.pm#allow_blessed>`_ method on\n  blessed references to tweak which/how objects are encoded.\n\n* Serialization exceptions on the remote side are generated by dying with a\n  ``_BOND_SerializationException`` @ISA.\n\nGotchas:\n\n* By default, evaluation is forced in array context, as otherwise most of the\n  built-ins working with arrays would return an useless scalar. Use the\n  \"scalar\" keyword for the rare cases when you really need it to.\n\n* You can \"call\" any function-like statement, as long as the last argument is\n  expected to be an argument list. This allows you to call builtins directly:\n\n  .. code:: python3\n\n    perl.call('map { $_ + 1 }', [1, 2, 3])\n\n* You can of course \"call\" a statement that returns any ``CODE``. Meaning that\n  you can call references to functions as long as you dereference them first:\n\n  .. code:: python3\n\n    perl.call('&$fun_ref', ...)\n    perl.call('&{ $any->{expression} }', ...)\n\n  Likewise you can \"call\" objects methods directly:\n\n  .. code:: python3\n\n    perl.call('$object->method', ...)\n\n* ``eval_block`` introduces a new block. Variables declared as \"my\" will not be\n  visible into a subsequent ``eval_block``. Use a fully qualified name or \"our\"\n  to define variables that should persist across blocks:\n\n  .. code:: python3\n\n    perl.eval_block('our $variable = 1;')\n    perl.eval_block('do_something_with($variable);')\n\n\nJavaScript\n----------\n\nJavaScript is supported through `Node.js <http://nodejs.org/>`_.\n\nRequirements:\n\n* Node.js v0.6.12 and v0.10.29 have been tested. On Debian/Ubuntu, the required\n  package is ``nodejs``.\n\nSerialization:\n\n* Performed remotely using ``JSON``. Implement the `toJSON\n  <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify>`_\n  property to tweak which/how objects are encoded.\n\n* Serialization exceptions on the remote side are of base type\n  ``TypeError`` <= ``_BOND_SerializationException``.\n\nLimitations:\n\n* Currently the code expects an unix-like environment with ``/dev/stdin`` to\n  perform synchronous I/O.\n\n* Since there's no distinction between \"plain\" objects (dictionaries) and any\n  other object, almost everything will be silently serialized. Define a custom\n  \"toJSON\" property on your \"real\" objects to control this behavior.\n\n* When executing a remote JavaScript bond with Node.js <= 0.6, you need to\n  manually invoke the REPL, as follows:\n\n  .. code:: python3\n\n    js = make_bond('JavaScript',\n\t\t   \"ssh remote node -e 'require\\(\\\\\\\"repl\\\\\\\"\\).start\\(\\)'\",\n\t\t   def_args=False)\n\n  When executing \"node\" locally, or when using Node.js >= 0.10, this is not\n  required (the \"-i\" flag is automatically provided).\n\n\nCommon limitations\n------------------\n\n* Except for Python, only basic types (booleans, numbers, strings, lists/arrays\n  and maps/dictionaries) can be transferred between the interpreters.\n\n* Serialization is performed locally using ``JSON``. Implement a custom\n  `JSONEncoder <https://docs.python.org/2/library/json.html#json.JSONEncoder>`_\n  to tweak which/how objects are encoded.\n\n* If an object that cannot be serialized reaches a \"call\", \"eval\", or even a\n  non-local return such as an *error or exception*, it will generate a\n  ``SerializationException`` on the local (Python) side.\n\n* Strings are *always* UTF-8 encoded.\n\n* References are implicitly broken as *objects are transferred by value*. This\n  is obvious, as you're talking with a separate process, but it can easily be\n  forgotten due to the blurring of the boundary.\n\n* Calling functions across the bridge is slow, also in Python, due to the\n  serialization. But the execution speed of the functions themselves is *not\n  affected*. This might be perfectly reasonable if there are only occasional\n  calls between languages, and/or the calls themselves take a significant\n  fraction of time.\n\n\nGeneral/support mailing list\n============================\n\nIf you are interested in announcements and development discussions about\n``bond``, you can subscribe to the `bond-devel` mailing list by sending an\nempty email to <bond-devel+subscribe@thregr.org>.\n\nYou can contact the main author directly at <wavexx@thregr.org>, though using\nthe general list is encouraged.\n\n\nAuthors and Copyright\n=====================\n\n`python-bond` can be found at\nhttp://www.thregr.org/~wavexx/software/python-bond/\n\n| \"python-bond\" is distributed under the GNU GPLv2+ license (see COPYING).\n| Copyright(c) 2014-2015 by wave++ \"Yuri D'Elia\" <wavexx@thregr.org>.\n\npython-bond's GIT repository is publicly accessible at::\n\n  git://src.thregr.org/python-bond\n\nor at https://github.com/wavexx/python-bond\n\n\nLatest release notes\n====================\n\n* Performance/documentation tweaks.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.thregr.org/~wavexx/software/python-bond/", "keywords": "javascript php perl python", "license": "GPL2", "maintainer": null, "maintainer_email": null, "name": "python-bond", "package_url": "https://pypi.org/project/python-bond/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-bond/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.thregr.org/~wavexx/software/python-bond/"}, "release_url": "https://pypi.org/project/python-bond/1.4/", "requires_dist": null, "requires_python": null, "summary": "transparent remote/recursive evaluation between Python and other languages", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#practical-examples\" id=\"id2\" rel=\"nofollow\">Practical examples</a><ul>\n<li><a href=\"#incremental-code-base-migration\" id=\"id3\" rel=\"nofollow\">Incremental code-base migration</a></li>\n<li><a href=\"#mixing-python-2-3-code-bases\" id=\"id4\" rel=\"nofollow\">Mixing Python 2/3 code bases</a></li>\n<li><a href=\"#remote-parallel-computation\" id=\"id5\" rel=\"nofollow\">Remote/parallel computation</a></li>\n<li><a href=\"#privilege-separation\" id=\"id6\" rel=\"nofollow\">Privilege separation</a></li>\n</ul>\n</li>\n<li><a href=\"#api\" id=\"id7\" rel=\"nofollow\">API</a><ul>\n<li><a href=\"#initialization\" id=\"id8\" rel=\"nofollow\">Initialization</a></li>\n<li><a href=\"#bond-bond-methods\" id=\"id9\" rel=\"nofollow\"><tt>bond.Bond</tt> Methods</a></li>\n<li><a href=\"#exceptions\" id=\"id10\" rel=\"nofollow\">Exceptions</a></li>\n<li><a href=\"#quoted-expressions\" id=\"id11\" rel=\"nofollow\">Quoted expressions</a></li>\n</ul>\n</li>\n<li><a href=\"#language-support\" id=\"id12\" rel=\"nofollow\">Language support</a><ul>\n<li><a href=\"#python\" id=\"id13\" rel=\"nofollow\">Python</a></li>\n<li><a href=\"#php\" id=\"id14\" rel=\"nofollow\">PHP</a></li>\n<li><a href=\"#perl\" id=\"id15\" rel=\"nofollow\">Perl</a></li>\n<li><a href=\"#javascript\" id=\"id16\" rel=\"nofollow\">JavaScript</a></li>\n<li><a href=\"#common-limitations\" id=\"id17\" rel=\"nofollow\">Common limitations</a></li>\n</ul>\n</li>\n<li><a href=\"#general-support-mailing-list\" id=\"id18\" rel=\"nofollow\">General/support mailing list</a></li>\n<li><a href=\"#authors-and-copyright\" id=\"id19\" rel=\"nofollow\">Authors and Copyright</a></li>\n<li><a href=\"#latest-release-notes\" id=\"id20\" rel=\"nofollow\">Latest release notes</a></li>\n</ul>\n</div>\n<p>The Python module <tt>bond</tt> supports transparent remote/recursive evaluation\nbetween Python and another interpreter through automatic call serialization.</p>\n<p>In poorer words, a <tt>bond</tt> lets you call functions in other languages as they\nwere normal Python functions. It <em>also</em> allows other languages to <em>call Python\nfunctions</em> as if they were native.</p>\n<p>Remote output is also transparently redirected locally, and since the\nevaluation is performed through a persistent co-process, you can actually spawn\ninterpreters on different hosts through \u201cssh\u201d efficiently.</p>\n<p><tt>bond</tt> currently supports PHP, Perl, JavaScript (Node.js) and Python itself.</p>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Let's bond with a PHP interpreter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">php</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'PHP'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'echo \"Hello world!</span><span class=\"se\">\\n</span><span class=\"s1\">\";'</span><span class=\"p\">)</span>\n<span class=\"n\">Hello</span> <span class=\"n\">world</span><span class=\"err\">!</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Make an expensive split function using PHP's explode</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"s1\">'explode'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello world splitted by PHP!\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'Hello'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'world'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'splitted'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'by'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'PHP!'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Call Python from PHP</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">call_me</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hi, this is Python talking!\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">call_me</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s1\">'call_me()'</span><span class=\"p\">)</span>\n<span class=\"n\">Hi</span><span class=\"p\">,</span> <span class=\"n\">this</span> <span class=\"ow\">is</span> <span class=\"n\">Python</span> <span class=\"n\">talking</span><span class=\"err\">!</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Use some remote resources</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">remote_php</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'PHP'</span><span class=\"p\">,</span> <span class=\"s1\">'ssh remote php'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">remote_php</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'function call_me() { echo \"Hi from \" . system(\"hostname\") . \"!\"; }'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">remote_php</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s1\">'call_me()'</span><span class=\"p\">)</span>\n<span class=\"n\">Hi</span> <span class=\"kn\">from</span> <span class=\"nn\">remote</span><span class=\"err\">!</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Bridge two worlds!</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">perl</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Perl'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">proxy</span><span class=\"p\">(</span><span class=\"s1\">'explode'</span><span class=\"p\">,</span> <span class=\"n\">perl</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># note: explode is now available to Perl, but still executes in PHP</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s1\">'explode(\"=\", \"Mind=blown!\")'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'Mind'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'blown!'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"practical-examples\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Practical examples</a></h2>\n<div id=\"incremental-code-base-migration\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Incremental code-base migration</a></h3>\n<p>I originally needed <tt>bond</tt> for migrating a large PHP project to Python. With\n<tt>bond</tt> you can rewrite a program incrementally, while still executing all the\nexisting code unchanged. You can start by rewriting just a single function in\nan empty shell, wrapping your existing code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">php</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'PHP'</span><span class=\"p\">)</span>\n<span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'include(\"my_original_program.php\");'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">new_function</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n    <span class=\"c1\"># do something here</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">new_function</span><span class=\"p\">,</span> <span class=\"s1\">'function_to_be_replaced'</span><span class=\"p\">)</span>\n<span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'main'</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mixing-python-2-3-code-bases\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Mixing Python 2/3 code bases</a></h3>\n<p>You can use <tt>bond</tt> to mix Python 2/3 code. Python &lt;=&gt; Python bonds\nautomatically use pickling as a protocol, which makes serialization almost\ninvisible.</p>\n<p>In this scenario, you can start writing new code directly on Python 3, while\nusing Python 2 only for the libraries which are still missing.</p>\n<p>For example, you can use <tt>Mechanize</tt> on Python 3 with minimal changes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"n\">py2</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'python2'</span><span class=\"p\">,</span> <span class=\"n\">trans_except</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">py2</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'import mechanize; br = mechanize.Browser()'</span><span class=\"p\">)</span>\n<span class=\"n\">py2</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'br.open'</span><span class=\"p\">,</span> <span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n<span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">py2</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'br.title'</span><span class=\"p\">)</span>\n</pre>\n<p><tt>eval_block</tt> is only being used as an example here to make it self-contained.\nA more reasonable solution for larger chunks of code is to split the source\ninto a distinct file that can be loaded at once in the remote interpreter:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"n\">py2</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'python2'</span><span class=\"p\">,</span> <span class=\"n\">trans_except</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">py2</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'import .mypython2lib'</span><span class=\"p\">)</span>\n</pre>\n<p>This reduces the amount of clutter and keeps the distinction between new and\nlegacy code clear. You should also keep in mind that since the remote language\nis itself Python, expressions themselves (for whenever <tt>call</tt> is\ninsufficient) can be quoted just by using <tt>repr</tt>.</p>\n<p>Similarly, you can use <tt>bond</tt> to combine regular CPython and PyPy runtimes\n(all the required modules work as expected on PyPy):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"n\">pypy</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'pypy'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"remote-parallel-computation\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Remote/parallel computation</a></h3>\n<p>You can easily use <tt>bond</tt> to perform remote/parallel computation. Nobody\nstops you from having multiple interpreters at the same time: you can create\nmultiple bonds to setup a poor-man\u2019s distributed system with minimal effort:</p>\n<pre><span class=\"c1\"># setup the workers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"n\">hosts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'host1'</span><span class=\"p\">,</span> <span class=\"s1\">'host2'</span><span class=\"p\">,</span> <span class=\"s1\">'host3'</span><span class=\"p\">]</span>\n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'ssh </span><span class=\"si\">{}</span><span class=\"s1\"> python'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">host</span> <span class=\"ow\">in</span> <span class=\"n\">hosts</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># load our libraries first</span>\n<span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n    <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'from library import *'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># execute \"do_something\" remotely on each worker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span>\n<span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'do_something'</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">thread</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># collect the results</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">thread</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">]</span>\n</pre>\n<p>Distributed producer/consumer schemes also come for free by proxying calls:</p>\n<pre><span class=\"n\">host1</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'''def consumer(data):\n   # do something with data\n   pass\n'''</span><span class=\"p\">)</span>\n\n<span class=\"n\">host2</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'''def producer():\n    while True:\n       data = function()\n       consumer(data)\n'''</span><span class=\"p\">)</span>\n\n<span class=\"n\">host1</span><span class=\"o\">.</span><span class=\"n\">proxy</span><span class=\"p\">(</span><span class=\"s1\">'consumer'</span><span class=\"p\">,</span> <span class=\"n\">host2</span><span class=\"p\">)</span>\n<span class=\"n\">host2</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'producer'</span><span class=\"p\">)</span>\n</pre>\n<p>It\u2019s even more interesting if you realize that the producers/consumers don\u2019t\neven have to be written in the same language, and don\u2019t know that the call is\nactually being forwarded.</p>\n<p><tt>bond</tt> doesn\u2019t even need to be installed remotely: the required setup is\ninjected directly into a live interpreter. The wire protocol is simple enough\nthat any language supporting an interactive REPL can be called. In fact, <a href=\"https://github.com/wavexx/bond-drivers\" rel=\"nofollow\">the\ndrivers themselves</a> are designed to\nbe used from any other language.</p>\n</div>\n<div id=\"privilege-separation\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Privilege separation</a></h3>\n<p>There might be times when it makes sense to create an unprivileged context to\nperform potentially dangerous operations, such as decoding an uploaded file on\nwhich you have zero trust. A common approach would be to communicate with an\nunprivileged daemon built for the purpose, but it usually requires dedicated\neffort. Running such processes using <tt>bond</tt> instead is almost trivial:</p>\n<pre><span class=\"c1\"># early in the setup phase of our daemon we create a bond using</span>\n<span class=\"c1\"># passwordless sudo, changing to an unprivileged user</span>\n<span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'sudo -u nobody python'</span><span class=\"p\">,</span>\n               <span class=\"n\">trans_except</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s1\">'JSON'</span><span class=\"p\">)</span>\n<span class=\"n\">py</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'from mylibrary import decode_file'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make decode_file() available as a normal function</span>\n<span class=\"n\">decode_file</span> <span class=\"o\">=</span> <span class=\"n\">py</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"s1\">'decode_file'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># assuming decode_file() takes a file name which is at least readable by</span>\n<span class=\"c1\"># the unprivileged user, we can just take it's return value</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">decode_file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<p>Contrarily to other examples involving Python, here we actually restrict the\nserialization protocol to plain <tt>JSON</tt>. Nothing changes from the caller (our)\nperspective, except that the bond now can\u2019t share with us anything beyond\ntrivial types. Python &lt;=&gt; Python bonds use <tt>pickle</tt> by default, which is not\nsensible here as <tt>pickle</tt> allows arbitrary Python structures and handlers to\nbe run (including bytecode itself).</p>\n<p>If just running the context as another user is not enough, then setting up an\nLXC container doesn\u2019t add much complexity, since we can just use\n<tt><span class=\"pre\">lxc-execute</span></tt> to attach directly to the new instance\u2019s STDIO:</p>\n<pre><span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'lxc-execute -n &lt;name&gt; -f &lt;config&gt; /path/to/python'</span><span class=\"p\">,</span>\n               <span class=\"n\">trans_except</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s1\">'JSON'</span><span class=\"p\">)</span>\n</pre>\n<p>This way an ephemeral container is started/destroyed automatically along with\nour daemon. The container itself can expose just a few shared/read-only\ndirectories, or nothing at all if the entire I/O is built on top of <tt>bond</tt>.</p>\n</div>\n</div>\n<div id=\"api\">\n<h2><a href=\"#id7\" rel=\"nofollow\">API</a></h2>\n<div id=\"initialization\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Initialization</a></h3>\n<p>A <tt>bond.Bond</tt> object is not normally constructed directly, but by using the\n<tt>bond.make_bond()</tt> function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bond</span>\n<span class=\"n\">interpreter</span> <span class=\"o\">=</span> <span class=\"n\">bond</span><span class=\"o\">.</span><span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'language'</span><span class=\"p\">)</span>\n</pre>\n<p>The first argument should be the desired language name (\u201cJavaScript\u201d, \u201cPHP\u201d,\n\u201cPerl\u201d, \u201cPython\u201d). The list of supported languages can be fetched dynamically\nusing <tt>bond.list_drivers()</tt>.</p>\n<p>You can override the default interpreter command using the second argument,\nwhich allows to specify any shell command to be executed:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bond</span>\n<span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">bond</span><span class=\"o\">.</span><span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'ssh remote python3'</span><span class=\"p\">)</span>\n</pre>\n<p>An additional <em>list</em> of arguments to the interpreter can be provided using the\nthird argument, <tt>args</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bond</span>\n<span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">bond</span><span class=\"o\">.</span><span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'ssh remote python3'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'-E'</span><span class=\"p\">,</span> <span class=\"s1\">'-OO'</span><span class=\"p\">])</span>\n</pre>\n<p>The <em>arguments</em>, contrarily to the command, are automatically quoted.</p>\n<p>Some command line arguments may be supplied automatically by the driver to\nforce an interactive shell; for example \u201c-i\u201d is supplied if Python is\nrequested. You can disable default arguments by using <tt>def_args=False</tt>.</p>\n<p>The following keyword arguments are supported:</p>\n<p><tt>cwd</tt>:</p>\n<blockquote>\nWorking directory for the interpreter (defaults to current working\ndirectory).</blockquote>\n<p><tt>env</tt>:</p>\n<blockquote>\nEnvironment for the interpreter (defaults to <tt>os.environ</tt>).</blockquote>\n<p><tt>def_args</tt>:</p>\n<blockquote>\nEnable (default) or suppress default, extra command-line arguments to the\ninterpreter.</blockquote>\n<p><tt>timeout</tt>:</p>\n<blockquote>\nDefines the timeout for the underlying communication protocol. Note that\n<tt>bond</tt> cannot distinguish between a slow call or noise generated while the\ninterpreter is set up. Defaults to 60 seconds.</blockquote>\n<p><tt>logfile</tt>:</p>\n<blockquote>\nAccepts a file handle which is used to log the entire communication with the\nunderlying interpreter for debugging purposes.</blockquote>\n<p><tt>trans_except</tt>:</p>\n<blockquote>\nEnables/disables \u201ctransparent exceptions\u201d. Exceptions are always first class,\nbut when <tt>trans_except</tt> is enabled, the exception objects themselves will\nbe forwarded across the bond. If <tt>trans_except</tt> is disabled (the default\nfor all languages except Python), then local exceptions will always contain a\nstring representation of the remote exception instead, which avoids\nserialization errors.</blockquote>\n<p><tt>protocol</tt>:</p>\n<blockquote>\nForces a specific serialization protocol to be chosen. It\u2019s automatically\nselected when not specified, and usually matches \u201cJSON\u201d.</blockquote>\n</div>\n<div id=\"bond-bond-methods\">\n<h3><a href=\"#id9\" rel=\"nofollow\"><tt>bond.Bond</tt> Methods</a></h3>\n<p>The resulting <tt>bond.Bond</tt> class has the following methods:</p>\n<p><tt>eval(code)</tt>:</p>\n<blockquote>\nEvaluate and return the value of a <em>single statement</em> of code in the\ninterpreter.</blockquote>\n<p><tt>eval_block(code)</tt>:</p>\n<blockquote>\nExecute a \u201ccode\u201d block inside the top-level of the interpreter. Any construct\nwhich is legal by the current interpreter is allowed. Nothing is returned.</blockquote>\n<p><tt>ref(code)</tt>:</p>\n<blockquote>\nReturn a reference to an <em>single, unevaluated statement</em> of code, which can\nbe later used in eval(), eval_block() or as an <em>immediate</em> argument to call().\nSee <a href=\"#quoted-expressions\" rel=\"nofollow\">Quoted expressions</a>.</blockquote>\n<p><tt>close()</tt>:</p>\n<blockquote>\nTerminate the communication with the interpreter.</blockquote>\n<p><tt>call(name, *args)</tt>:</p>\n<blockquote>\nCall a function \u201cname\u201d in the interpreter using the supplied list of\narguments *args (apply *args to a callable statement defined by \u201cname\u201d).\nThe arguments are automatically converted to their other language\u2019s\ncounterpart. The return value is captured and converted back to Python as\nwell.</blockquote>\n<p><tt>callable(name)</tt>:</p>\n<blockquote>\n<p>Return a function that calls \u201cname\u201d:</p>\n<pre><span class=\"n\">explode</span> <span class=\"o\">=</span> <span class=\"n\">php</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"s1\">'explode'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Now you can call explode as a normal, local function</span>\n<span class=\"n\">explode</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'Hello world'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p><tt>export(func, name)</tt>:</p>\n<blockquote>\nExport a local function \u201cfunc\u201d so that can be called on the remote language\nas \u201cname\u201d. If \u201cname\u201d is not specified, use the local function name directly.\nNote that \u201cfunc\u201d must be a function <em>reference</em>, not a function name.</blockquote>\n<p><tt>proxy(name, other, remote)</tt>:</p>\n<blockquote>\nExport a function \u201cname\u201d from the current <tt>bond</tt> to \u201cother\u201d, named as\n\u201cremote\u201d. If \u201cremote\u201d is not provided, the same value as \u201cname\u201d is used.</blockquote>\n<p><tt>interact()</tt>:</p>\n<blockquote>\nStart an interactive session with the underlying interpreter. By default, all\ninput lines are executed with bond.eval_block(). If \u201c!\u201d is pre-pended,\nexecute a single statement with bond.eval() and print it\u2019s return value. You\ncan continue the statement on multiple lines by leaving a trailing \u201c\". Type\nCtrl+C to abort a multi-line block without executing it.</blockquote>\n</div>\n<div id=\"exceptions\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Exceptions</a></h3>\n<p>All exceptions thrown by the <tt>bond</tt> module are of base type <tt>RuntimeError</tt>\n&lt;= <tt>BondException</tt>.</p>\n<dl>\n<dt><tt>BondException</tt>:</dt>\n<dd>Thrown during initialization or unrecoverable errors.</dd>\n<dt><tt>TerminatedException</tt>:</dt>\n<dd>Thrown when the bond exits unexpectedly.</dd>\n<dt><tt>SerializationException</tt>:</dt>\n<dd>Thrown when an object/exception which is sent <em>or</em> received cannot be\nserialized by the current protocol. The <tt>side</tt> attribute can be either\n\u201clocal\u201d (when attempting to <em>send</em>) or \u201cremote\u201d (when <em>receiving</em>). A\n<tt>SerializationException</tt> is not fatal.</dd>\n<dt><tt>RemoteException</tt>:</dt>\n<dd>Thrown for uncaught remote exceptions. The \u201cdata\u201d attribute contains either\nthe error message (with <tt>trans_except=False</tt>) or the remote exception\nitself (<tt>trans_except=True</tt>).</dd>\n</dl>\n<p>Beware that both <tt>SerializationException</tt> (with <tt><span class=\"pre\">side=\"remote\"</span></tt>) and\n<tt>RemoteException</tt> may actually be originating from uncaught <em>local</em>\nexceptions when an exported function is called. Pay attention to the error\ntext/data in these cases, as it will contain several nested exceptions.</p>\n</div>\n<div id=\"quoted-expressions\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Quoted expressions</a></h3>\n<p><tt>bond</tt> has minimal support for quoted expressions, through the use of\n<tt>Bond.ref()</tt>. <tt>ref()</tt> returns a reference to a unevaluated statement that\ncan be fed back to <tt>eval()</tt>, <tt>eval_block()</tt>, or as an <em>immediate</em> (i.e.:\nnot nested) argument to <tt>call()</tt>. References are bound to the interpreter\nthat created them.</p>\n<p><tt>ref()</tt> allows to \u201ccall\u201d methods that take remote un-serializable arguments,\nsuch as file descriptors, without the use of a support function and/or eval:</p>\n<pre><span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Perl'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'open($fd, \"&gt;file.txt\");'</span><span class=\"p\">)</span>\n<span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"s1\">'$fd'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'syswrite'</span><span class=\"p\">,</span> <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello world!\"</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'close'</span><span class=\"p\">,</span> <span class=\"n\">fd</span><span class=\"p\">)</span>\n</pre>\n<p>Since <tt>ref()</tt> objects cannot be nested, there are still cases where it might\nbe necessary to use a support function. To demonstrate, we rewrite the above\nexample without quoted expressions, while still allowing an argument (\u201cHello\nworld!\u201d) to be local:</p>\n<pre><span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Perl'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'open($fd, \"&gt;file.txt\");'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'sub syswrite_fd { syswrite($fd, shift()); };'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'syswrite_fd'</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello world!\"</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s1\">'close($fd)'</span><span class=\"p\">)</span>\n</pre>\n<p>Or more succinctly:</p>\n<pre><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'sub { syswrite($fd, shift()); }'</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello world!\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"language-support\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Language support</a></h2>\n<div id=\"python\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Python</a></h3>\n<p>Python, as the identity language, has no restriction on data types. Everything\nis pickled on both sides, including exceptions.</p>\n<p>Serialization:</p>\n<ul>\n<li>Performed locally and remotely using <tt>cPickle</tt> in Python 2 or <a href=\"https://docs.python.org/2/library/pickle.html\" rel=\"nofollow\">pickle</a> in Python 3.</li>\n<li>Serialization exceptions on the remote side are of base type\n<tt>TypeError</tt> &lt;= <tt>_BOND_SerializationException</tt>.</li>\n</ul>\n<p>Python 2 / Python 3 / PyPy:</p>\n<p>You can freely mix Python versions between hosts/interpreters (that is: you can\nrun Python 3 code from a Python 2 host and vice-versa). You\u2019ll need to disable\ntransparent exceptions between major versions though, as the exception\nhierarchy is different:</p>\n<pre><span class=\"c1\"># assuming a python2.7 environment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bond</span> <span class=\"kn\">import</span> <span class=\"n\">make_bond</span>\n<span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'python3'</span><span class=\"p\">,</span> <span class=\"n\">trans_except</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"php\">\n<h3><a href=\"#id14\" rel=\"nofollow\">PHP</a></h3>\n<p>Requirements:</p>\n<ul>\n<li>The PHP\u2019s &gt;= 5.3 command line interpreter needs to be installed. On\nDebian/Ubuntu, the required package is <tt><span class=\"pre\">php5-cli</span></tt>.</li>\n</ul>\n<p>Serialization:</p>\n<ul>\n<li>Performed remotely using <tt>JSON</tt>. Implement the <a href=\"http://php.net/manual/en/jsonserializable.jsonserialize.php\" rel=\"nofollow\">JsonSerializable</a> interface to\ntweak which/how objects are encoded.</li>\n<li>Serialization exceptions on the remote side are of base type\n<tt>_BOND_SerializationException</tt>. The detailed results of the error can\nalso be retrieved using <a href=\"http://php.net/manual/en/function.json-last-error.php\" rel=\"nofollow\">json_last_error</a>.</li>\n</ul>\n<p>Limitations:</p>\n<ul>\n<li>PHP &lt;= 5.3 doesn\u2019t support the <tt>JsonSerializable</tt> interface, and thus lacks\nthe ability of serializing arbitrary objects.</li>\n<li>You cannot use <tt>call</tt> on a built-in function such as \u201cecho\u201d. You have to\nuse a real function instead, like \u201cprint\u201d. You can still call \u201cecho\u201d by using\n<tt>eval</tt> or <tt>eval_block</tt>.</li>\n<li>Unfortunately, you cannot catch \u201cfatal errors\u201d in PHP. If the evaluated code\ntriggers a fatal error it will terminate the bond without appeal. A common\nexample of such error can be attempting to use an undefined variable or\nfunction (which could happen while prototyping).</li>\n<li>Due to the inability to override built-in functions, <tt>error_reporting()</tt> is\nnot completely transparent and always returns 0. It shouldn\u2019t be used to\ncontrol the display error level. Use <tt>_BOND_error_reporting()</tt> instead,\nwhich has the same usage/signature as the built-in function.</li>\n</ul>\n</div>\n<div id=\"perl\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Perl</a></h3>\n<p>Perl is a quirky language, due to its syntax. We assume here you\u2019re an\nexperienced Perl developer.</p>\n<p>Requirements:</p>\n<ul>\n<li><p>Perl &gt;= 5.14 is required, with the following modules:</p>\n<ul>\n<li><tt>JSON</tt></li>\n<li><tt><span class=\"pre\">Data::Dump</span></tt></li>\n<li><tt><span class=\"pre\">IO::String</span></tt></li>\n</ul>\n<p>On Debian/Ubuntu, the required packages are <tt><span class=\"pre\">libjson-perl</span></tt>\n<tt><span class=\"pre\">libdata-dump-perl</span></tt> and <tt><span class=\"pre\">libio-string-perl</span></tt>.</p>\n</li>\n</ul>\n<p>Serialization:</p>\n<ul>\n<li>Performed remotely using <tt>JSON</tt>. Implement the <a href=\"http://search.cpan.org/dist/JSON/lib/JSON.pm#allow_blessed\" rel=\"nofollow\">TO_JSON</a> method on\nblessed references to tweak which/how objects are encoded.</li>\n<li>Serialization exceptions on the remote side are generated by dying with a\n<tt>_BOND_SerializationException</tt> @ISA.</li>\n</ul>\n<p>Gotchas:</p>\n<ul>\n<li><p>By default, evaluation is forced in array context, as otherwise most of the\nbuilt-ins working with arrays would return an useless scalar. Use the\n\u201cscalar\u201d keyword for the rare cases when you really need it to.</p>\n</li>\n<li><p>You can \u201ccall\u201d any function-like statement, as long as the last argument is\nexpected to be an argument list. This allows you to call builtins directly:</p>\n<pre><span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'map { $_ + 1 }'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n</pre>\n</li>\n<li><p>You can of course \u201ccall\u201d a statement that returns any <tt>CODE</tt>. Meaning that\nyou can call references to functions as long as you dereference them first:</p>\n<pre><span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'&amp;$fun_ref'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'&amp;{ $any-&gt;</span><span class=\"si\">{expression}</span><span class=\"s1\"> }'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Likewise you can \u201ccall\u201d objects methods directly:</p>\n<pre><span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'$object-&gt;method'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p><tt>eval_block</tt> introduces a new block. Variables declared as \u201cmy\u201d will not be\nvisible into a subsequent <tt>eval_block</tt>. Use a fully qualified name or \u201cour\u201d\nto define variables that should persist across blocks:</p>\n<pre><span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'our $variable = 1;'</span><span class=\"p\">)</span>\n<span class=\"n\">perl</span><span class=\"o\">.</span><span class=\"n\">eval_block</span><span class=\"p\">(</span><span class=\"s1\">'do_something_with($variable);'</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"javascript\">\n<h3><a href=\"#id16\" rel=\"nofollow\">JavaScript</a></h3>\n<p>JavaScript is supported through <a href=\"http://nodejs.org/\" rel=\"nofollow\">Node.js</a>.</p>\n<p>Requirements:</p>\n<ul>\n<li>Node.js v0.6.12 and v0.10.29 have been tested. On Debian/Ubuntu, the required\npackage is <tt>nodejs</tt>.</li>\n</ul>\n<p>Serialization:</p>\n<ul>\n<li>Performed remotely using <tt>JSON</tt>. Implement the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" rel=\"nofollow\">toJSON</a>\nproperty to tweak which/how objects are encoded.</li>\n<li>Serialization exceptions on the remote side are of base type\n<tt>TypeError</tt> &lt;= <tt>_BOND_SerializationException</tt>.</li>\n</ul>\n<p>Limitations:</p>\n<ul>\n<li><p>Currently the code expects an unix-like environment with <tt>/dev/stdin</tt> to\nperform synchronous I/O.</p>\n</li>\n<li><p>Since there\u2019s no distinction between \u201cplain\u201d objects (dictionaries) and any\nother object, almost everything will be silently serialized. Define a custom\n\u201ctoJSON\u201d property on your \u201creal\u201d objects to control this behavior.</p>\n</li>\n<li><p>When executing a remote JavaScript bond with Node.js &lt;= 0.6, you need to\nmanually invoke the REPL, as follows:</p>\n<pre><span class=\"n\">js</span> <span class=\"o\">=</span> <span class=\"n\">make_bond</span><span class=\"p\">(</span><span class=\"s1\">'JavaScript'</span><span class=\"p\">,</span>\n               <span class=\"s2\">\"ssh remote node -e 'require\\(</span><span class=\"se\">\\\\\\\"</span><span class=\"s2\">repl</span><span class=\"se\">\\\\\\\"</span><span class=\"s2\">\\).start\\(\\)'\"</span><span class=\"p\">,</span>\n               <span class=\"n\">def_args</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>When executing \u201cnode\u201d locally, or when using Node.js &gt;= 0.10, this is not\nrequired (the \u201c-i\u201d flag is automatically provided).</p>\n</li>\n</ul>\n</div>\n<div id=\"common-limitations\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Common limitations</a></h3>\n<ul>\n<li>Except for Python, only basic types (booleans, numbers, strings, lists/arrays\nand maps/dictionaries) can be transferred between the interpreters.</li>\n<li>Serialization is performed locally using <tt>JSON</tt>. Implement a custom\n<a href=\"https://docs.python.org/2/library/json.html#json.JSONEncoder\" rel=\"nofollow\">JSONEncoder</a>\nto tweak which/how objects are encoded.</li>\n<li>If an object that cannot be serialized reaches a \u201ccall\u201d, \u201ceval\u201d, or even a\nnon-local return such as an <em>error or exception</em>, it will generate a\n<tt>SerializationException</tt> on the local (Python) side.</li>\n<li>Strings are <em>always</em> UTF-8 encoded.</li>\n<li>References are implicitly broken as <em>objects are transferred by value</em>. This\nis obvious, as you\u2019re talking with a separate process, but it can easily be\nforgotten due to the blurring of the boundary.</li>\n<li>Calling functions across the bridge is slow, also in Python, due to the\nserialization. But the execution speed of the functions themselves is <em>not\naffected</em>. This might be perfectly reasonable if there are only occasional\ncalls between languages, and/or the calls themselves take a significant\nfraction of time.</li>\n</ul>\n</div>\n</div>\n<div id=\"general-support-mailing-list\">\n<h2><a href=\"#id18\" rel=\"nofollow\">General/support mailing list</a></h2>\n<p>If you are interested in announcements and development discussions about\n<tt>bond</tt>, you can subscribe to the <cite>bond-devel</cite> mailing list by sending an\nempty email to &lt;<a href=\"mailto:bond-devel+subscribe%40thregr.org\">bond-devel+subscribe<span>@</span>thregr<span>.</span>org</a>&gt;.</p>\n<p>You can contact the main author directly at &lt;<a href=\"mailto:wavexx%40thregr.org\">wavexx<span>@</span>thregr<span>.</span>org</a>&gt;, though using\nthe general list is encouraged.</p>\n</div>\n<div id=\"authors-and-copyright\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Authors and Copyright</a></h2>\n<p><cite>python-bond</cite> can be found at\n<a href=\"http://www.thregr.org/~wavexx/software/python-bond/\" rel=\"nofollow\">http://www.thregr.org/~wavexx/software/python-bond/</a></p>\n<div>\n<div>\u201cpython-bond\u201d is distributed under the GNU GPLv2+ license (see COPYING).</div>\n<div>Copyright(c) 2014-2015 by wave++ \u201cYuri D\u2019Elia\u201d &lt;<a href=\"mailto:wavexx%40thregr.org\">wavexx<span>@</span>thregr<span>.</span>org</a>&gt;.</div>\n</div>\n<p>python-bond\u2019s GIT repository is publicly accessible at:</p>\n<pre>git://src.thregr.org/python-bond\n</pre>\n<p>or at <a href=\"https://github.com/wavexx/python-bond\" rel=\"nofollow\">https://github.com/wavexx/python-bond</a></p>\n</div>\n<div id=\"latest-release-notes\">\n<h2><a href=\"#id20\" rel=\"nofollow\">Latest release notes</a></h2>\n<ul>\n<li>Performance/documentation tweaks.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1567649, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "58b409a28381ae1197940d840eec2a72", "sha256": "ec96a09263d0713a72abca6b7a925e2921fc50217028eb64c49399f901ec98cf"}, "downloads": -1, "filename": "python-bond-0.1.tar.gz", "has_sig": false, "md5_digest": "58b409a28381ae1197940d840eec2a72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21095, "upload_time": "2014-07-28T14:18:42", "upload_time_iso_8601": "2014-07-28T14:18:42.930340Z", "url": "https://files.pythonhosted.org/packages/c0/f7/6978b534477e5936311ad7b88da3ccaef48715beae2ce23b79cdfa69158a/python-bond-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ed9c74e1f88e9199a7db59028d4c42d7", "sha256": "83372fbdc17d8b415e64d808e5b4b432d8cc767fe3d49e70b48d0acb1202a364"}, "downloads": -1, "filename": "python-bond-0.2.tar.gz", "has_sig": false, "md5_digest": "ed9c74e1f88e9199a7db59028d4c42d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24146, "upload_time": "2014-07-30T15:23:56", "upload_time_iso_8601": "2014-07-30T15:23:56.947347Z", "url": "https://files.pythonhosted.org/packages/61/86/664a9119852f14633ed5a4c1c488c4c7c351df5376c7d7663540a7c186ef/python-bond-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5a71a834eccaacfaf77b276e537945c4", "sha256": "62c8978d4cc1512eb9f9431f010443aca1b79c6eb7fc7529ccc52871c437b726"}, "downloads": -1, "filename": "python-bond-0.3.tar.gz", "has_sig": false, "md5_digest": "5a71a834eccaacfaf77b276e537945c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30117, "upload_time": "2014-08-04T13:04:40", "upload_time_iso_8601": "2014-08-04T13:04:40.702684Z", "url": "https://files.pythonhosted.org/packages/c4/6c/e4a23acc87a0713fe24141f7c9493e5ad8106a998c38bece73aef46bbb1a/python-bond-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "3b9314feb1ea9f259ffe39299234a13c", "sha256": "a867e1cfbecc4a3850766c3cef633d8e8395c3d75051e00c6c8c2ad96012cd92"}, "downloads": -1, "filename": "python-bond-0.4.tar.gz", "has_sig": false, "md5_digest": "3b9314feb1ea9f259ffe39299234a13c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33027, "upload_time": "2014-08-06T22:13:35", "upload_time_iso_8601": "2014-08-06T22:13:35.950922Z", "url": "https://files.pythonhosted.org/packages/4c/b0/74f0db9d6906e5fd8c612542e13902c25ddd81da8c9be874cf0b083b52e5/python-bond-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "9ed89b3765d7b11606bf34b4e03cf6aa", "sha256": "fcd0a7421ff639c5ffd7f6eb5720fb45c7b32372cf1cead2fe8232190091f613"}, "downloads": -1, "filename": "python-bond-0.5.tar.gz", "has_sig": false, "md5_digest": "9ed89b3765d7b11606bf34b4e03cf6aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35331, "upload_time": "2014-08-11T20:26:52", "upload_time_iso_8601": "2014-08-11T20:26:52.581337Z", "url": "https://files.pythonhosted.org/packages/d3/7b/333fdbe764cd88868ce5095e6adbb0077f2b69212a463dce3351b5fbefbf/python-bond-0.5.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "1b1e1cc34a926cd09e57ff56889dbf18", "sha256": "5726dd5ec5daab94ba7fe46693440a6ef9ba93f2c699e8d54f708a517abc28bc"}, "downloads": -1, "filename": "python-bond-1.0.tar.gz", "has_sig": false, "md5_digest": "1b1e1cc34a926cd09e57ff56889dbf18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47982, "upload_time": "2014-08-19T21:07:18", "upload_time_iso_8601": "2014-08-19T21:07:18.193027Z", "url": "https://files.pythonhosted.org/packages/46/5f/2e9baa5fa64d4e5be8dd137674d3006d31e3a4391382e6d6975d32918c66/python-bond-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "37e4e7c68d2b466b5be3a0e9d120b39a", "sha256": "71be1aff5dd11d3d705b60d24579472c30cd0c1976591d987a2cd13c452e9097"}, "downloads": -1, "filename": "python-bond-1.1.tar.gz", "has_sig": false, "md5_digest": "37e4e7c68d2b466b5be3a0e9d120b39a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48753, "upload_time": "2014-08-20T19:41:40", "upload_time_iso_8601": "2014-08-20T19:41:40.193726Z", "url": "https://files.pythonhosted.org/packages/5e/24/0990b01cff33e92f2ac257b0036516ef4ff2361dbf3dbd4a8201d0f0edf3/python-bond-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "e86f5c21d04f1844d872a3722a7bba6b", "sha256": "d14850755feb3cbb7445bd4ca98883738de0ccda251897ebd27f353a595c936b"}, "downloads": -1, "filename": "python-bond-1.2.tar.gz", "has_sig": false, "md5_digest": "e86f5c21d04f1844d872a3722a7bba6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50299, "upload_time": "2014-08-21T17:41:56", "upload_time_iso_8601": "2014-08-21T17:41:56.552172Z", "url": "https://files.pythonhosted.org/packages/55/02/9f2b900f5d32fd5e3fc685a37120254fa1e300e7ce97d876a0a42490d04b/python-bond-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "e11586b4785a3b34a4f51904d8bba237", "sha256": "0f2fb498b6d4736c0db4c5a5ff3226a857e6c1fc1c6f63964f928f434efa2ec7"}, "downloads": -1, "filename": "python-bond-1.3.tar.gz", "has_sig": false, "md5_digest": "e11586b4785a3b34a4f51904d8bba237", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52413, "upload_time": "2014-09-12T10:58:06", "upload_time_iso_8601": "2014-09-12T10:58:06.066059Z", "url": "https://files.pythonhosted.org/packages/93/6b/a72d78d7391157bc74b8f018b8fb1e6e2f05e8d7280d097557c549e94aa9/python-bond-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "837ca4c50ce7d518ee9e1a9cddea7af9", "sha256": "3a729265cba3e21533e573aa398584a5ca3a12f88a0cf9b24616780cacd87a0e"}, "downloads": -1, "filename": "python-bond-1.4.tar.gz", "has_sig": false, "md5_digest": "837ca4c50ce7d518ee9e1a9cddea7af9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48072, "upload_time": "2015-05-27T15:39:24", "upload_time_iso_8601": "2015-05-27T15:39:24.233201Z", "url": "https://files.pythonhosted.org/packages/f8/21/3fa181233e500a59549fd794030da3ca906df87c814e974efd05eded33d6/python-bond-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "837ca4c50ce7d518ee9e1a9cddea7af9", "sha256": "3a729265cba3e21533e573aa398584a5ca3a12f88a0cf9b24616780cacd87a0e"}, "downloads": -1, "filename": "python-bond-1.4.tar.gz", "has_sig": false, "md5_digest": "837ca4c50ce7d518ee9e1a9cddea7af9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48072, "upload_time": "2015-05-27T15:39:24", "upload_time_iso_8601": "2015-05-27T15:39:24.233201Z", "url": "https://files.pythonhosted.org/packages/f8/21/3fa181233e500a59549fd794030da3ca906df87c814e974efd05eded33d6/python-bond-1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:37 2020"}