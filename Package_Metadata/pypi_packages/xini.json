{"info": {"author": "Mark Gemmill", "author_email": "mark@markgemmill.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "### xini - eXtract pyproject.toml configs to INI\n\n`pyproject.toml` is a fantastic idea. I want all my tool configurations\nin my pyproject.toml file. Not all my tools support a `pyproject.toml`\nconfiguration option though, but why wait?\n\n`xini` pulls configurations from a `pyproject.toml` file for:\n\n   * pytest\n   * flake8\n   * coverage\n   * pylint\n\nAnd generates the appropriate ini-config files.\n\n\n### Install\n\n    ... pip install xini\n\n\n#### How Does It Work?\n\n1. Write tool configuration in the `pyproject.toml` under the appropriate \"[tool.toolname]\"\n   section. This becomes the standard location for your configurations.\n   Keep `pyproject.toml` in source control as normal.\n\n2. Run `xini` in the root project directory where the `pyproject.toml` file exits.\n   (`xini` does not search for `pyproject.toml` files anywhere but the current directory.)\n\n3. `xini` generates standard named ini-config files in the current directory\n   (e.g. .flake8, .coveragerc, etc.). Tools that use old-style ini file formats can then\n   run using the generated config file. **No need to maintain these ini-config files in source\n   control.**\n\n4. Make config changes in `pyproject.toml` and run `xini` to regnerate ini-config files.\n\n\n#### The Future\n\nIt is my sincere hope that there is no future for this project. I wish\nall tool developers to build support for `pyproject.toml` as a configuration\noption so a tool like `xini` is unnecessary.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/mgemmill/xini/src/master/", "keywords": "", "license": "BSD-3-Clause", "maintainer": "Mark Gemmill", "maintainer_email": "mark@markgemmill.com", "name": "xini", "package_url": "https://pypi.org/project/xini/", "platform": "", "project_url": "https://pypi.org/project/xini/", "project_urls": {"Homepage": "https://bitbucket.org/mgemmill/xini/src/master/"}, "release_url": "https://pypi.org/project/xini/0.2.2/", "requires_dist": ["toml (>=0.10.0,<0.11.0)", "docopt (>=0.6.2,<0.7.0)"], "requires_python": ">=3.6,<4.0", "summary": "", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>xini - eXtract pyproject.toml configs to INI</h3>\n<p><code>pyproject.toml</code> is a fantastic idea. I want all my tool configurations\nin my pyproject.toml file. Not all my tools support a <code>pyproject.toml</code>\nconfiguration option though, but why wait?</p>\n<p><code>xini</code> pulls configurations from a <code>pyproject.toml</code> file for:</p>\n<ul>\n<li>pytest</li>\n<li>flake8</li>\n<li>coverage</li>\n<li>pylint</li>\n</ul>\n<p>And generates the appropriate ini-config files.</p>\n<h3>Install</h3>\n<pre><code>... pip install xini\n</code></pre>\n<h4>How Does It Work?</h4>\n<ol>\n<li>\n<p>Write tool configuration in the <code>pyproject.toml</code> under the appropriate \"[tool.toolname]\"\nsection. This becomes the standard location for your configurations.\nKeep <code>pyproject.toml</code> in source control as normal.</p>\n</li>\n<li>\n<p>Run <code>xini</code> in the root project directory where the <code>pyproject.toml</code> file exits.\n(<code>xini</code> does not search for <code>pyproject.toml</code> files anywhere but the current directory.)</p>\n</li>\n<li>\n<p><code>xini</code> generates standard named ini-config files in the current directory\n(e.g. .flake8, .coveragerc, etc.). Tools that use old-style ini file formats can then\nrun using the generated config file. <strong>No need to maintain these ini-config files in source\ncontrol.</strong></p>\n</li>\n<li>\n<p>Make config changes in <code>pyproject.toml</code> and run <code>xini</code> to regnerate ini-config files.</p>\n</li>\n</ol>\n<h4>The Future</h4>\n<p>It is my sincere hope that there is no future for this project. I wish\nall tool developers to build support for <code>pyproject.toml</code> as a configuration\noption so a tool like <code>xini</code> is unnecessary.</p>\n\n          </div>"}, "last_serial": 4719938, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "9a6e58d891025ca44453d08ac0989059", "sha256": "74fe4a9c5427897f82d426342e853dc1d5523fe2e30c8735721468e9bdc3b032"}, "downloads": -1, "filename": "xini-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9a6e58d891025ca44453d08ac0989059", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10591, "upload_time": "2019-01-21T04:05:44", "upload_time_iso_8601": "2019-01-21T04:05:44.422413Z", "url": "https://files.pythonhosted.org/packages/4e/d9/130110522d3b935e4edec289f05f0bb01711ac638875e7ba5b29ff1d638a/xini-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cb8d4ada607c5ad34c076acaccfc5ed", "sha256": "da32091a00156500fe6d9b0f5a3de934fd1e639308cd5fb3ebafb56c2577adb5"}, "downloads": -1, "filename": "xini-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7cb8d4ada607c5ad34c076acaccfc5ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4313, "upload_time": "2019-01-21T04:05:46", "upload_time_iso_8601": "2019-01-21T04:05:46.481976Z", "url": "https://files.pythonhosted.org/packages/4f/d0/1f889e7967e1bbef48b5cf8eeab19a81ae761dacef01191e885e2e501cbf/xini-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a6e58d891025ca44453d08ac0989059", "sha256": "74fe4a9c5427897f82d426342e853dc1d5523fe2e30c8735721468e9bdc3b032"}, "downloads": -1, "filename": "xini-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9a6e58d891025ca44453d08ac0989059", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10591, "upload_time": "2019-01-21T04:05:44", "upload_time_iso_8601": "2019-01-21T04:05:44.422413Z", "url": "https://files.pythonhosted.org/packages/4e/d9/130110522d3b935e4edec289f05f0bb01711ac638875e7ba5b29ff1d638a/xini-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cb8d4ada607c5ad34c076acaccfc5ed", "sha256": "da32091a00156500fe6d9b0f5a3de934fd1e639308cd5fb3ebafb56c2577adb5"}, "downloads": -1, "filename": "xini-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7cb8d4ada607c5ad34c076acaccfc5ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4313, "upload_time": "2019-01-21T04:05:46", "upload_time_iso_8601": "2019-01-21T04:05:46.481976Z", "url": "https://files.pythonhosted.org/packages/4f/d0/1f889e7967e1bbef48b5cf8eeab19a81ae761dacef01191e885e2e501cbf/xini-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:27 2020"}