{"info": {"author": "Ben Stein", "author_email": "ben.s.stein@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pandashape: a simpleish Python package for easy data cleanup and preparation of Pandas dataframes\n\nI made `pandashape` because I've been finding I do a lot of the same repetitive cleanup for simple modeling with scikit-learn.\nI've intentionally designed it to make data preparation expressive, concise, and easily repeatable - just put your use of \n\n## Getting started\n\nJust install with pip!\n\n`pip install pandashape`\n\n## Using pandashape\nCreate your dataframe however you choose - from a CSV, `.txt.` file, random generation, whatever. Then make a PandaShaper and use\nthe expressive syntax to define a pipeline for cleanup:\n\n```python\n# import packages\nimport numpy as np\nimport pandas as pd\nfrom pandashape import PandaShaper, Columns\nfrom pandashape.transformers import MassLabelEncoder, NullColumnsDropper\n\n# create your frame\nmy_df = pd.read_csv('./my_data.csv')\n\n# wrap it in a shaper\nshaper = PandaShaper(my_df)\n\n# create a pipeline of transform operations (these will happen in order)\n# and assign the output to a new (transformed) frame!\ntransformed_df = shaper.transform(\n    {\n        # drop columns that have 80% or less null data\n        'columns': Columns.All,\n        'transformers': [\n            NullColumnsDropper(null_values=[np.nan, None, ''], threshold=0.8),\n            ModeImputer()\n        ]\n    },\n    {\n        # MassLabelEncoder one-hot-encodes targeted categorical columns if they\n        # have a number of values \u00e2\u2030\u00a5 the breakpoint or label encodes them normally \n        'columns': ['Education', 'SES'], \n        'transformers': MassLabelEncoder(label_encoding_breakpoint=4)\n    }\n)\n\n# inspect the new frame to see the fruits of your labors!\ntransformed_df.head()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jammerware/panda-shape.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pandashape", "package_url": "https://pypi.org/project/pandashape/", "platform": "", "project_url": "https://pypi.org/project/pandashape/", "project_urls": {"Homepage": "https://github.com/jammerware/panda-shape.git"}, "release_url": "https://pypi.org/project/pandashape/0.0.2/", "requires_dist": ["pandas", "numpy"], "requires_python": ">=3.6", "summary": "A package designed to simplify data preprocessing for use with Pandas", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pandashape: a simpleish Python package for easy data cleanup and preparation of Pandas dataframes</h1>\n<p>I made <code>pandashape</code> because I've been finding I do a lot of the same repetitive cleanup for simple modeling with scikit-learn.\nI've intentionally designed it to make data preparation expressive, concise, and easily repeatable - just put your use of</p>\n<h2>Getting started</h2>\n<p>Just install with pip!</p>\n<p><code>pip install pandashape</code></p>\n<h2>Using pandashape</h2>\n<p>Create your dataframe however you choose - from a CSV, <code>.txt.</code> file, random generation, whatever. Then make a PandaShaper and use\nthe expressive syntax to define a pipeline for cleanup:</p>\n<pre><span class=\"c1\"># import packages</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pandashape</span> <span class=\"kn\">import</span> <span class=\"n\">PandaShaper</span><span class=\"p\">,</span> <span class=\"n\">Columns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pandashape.transformers</span> <span class=\"kn\">import</span> <span class=\"n\">MassLabelEncoder</span><span class=\"p\">,</span> <span class=\"n\">NullColumnsDropper</span>\n\n<span class=\"c1\"># create your frame</span>\n<span class=\"n\">my_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'./my_data.csv'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># wrap it in a shaper</span>\n<span class=\"n\">shaper</span> <span class=\"o\">=</span> <span class=\"n\">PandaShaper</span><span class=\"p\">(</span><span class=\"n\">my_df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a pipeline of transform operations (these will happen in order)</span>\n<span class=\"c1\"># and assign the output to a new (transformed) frame!</span>\n<span class=\"n\">transformed_df</span> <span class=\"o\">=</span> <span class=\"n\">shaper</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># drop columns that have 80% or less null data</span>\n        <span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"n\">Columns</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">,</span>\n        <span class=\"s1\">'transformers'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"n\">NullColumnsDropper</span><span class=\"p\">(</span><span class=\"n\">null_values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">],</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">),</span>\n            <span class=\"n\">ModeImputer</span><span class=\"p\">()</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># MassLabelEncoder one-hot-encodes targeted categorical columns if they</span>\n        <span class=\"c1\"># have a number of values \u00e2\u2030\u00a5 the breakpoint or label encodes them normally </span>\n        <span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Education'</span><span class=\"p\">,</span> <span class=\"s1\">'SES'</span><span class=\"p\">],</span> \n        <span class=\"s1\">'transformers'</span><span class=\"p\">:</span> <span class=\"n\">MassLabelEncoder</span><span class=\"p\">(</span><span class=\"n\">label_encoding_breakpoint</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># inspect the new frame to see the fruits of your labors!</span>\n<span class=\"n\">transformed_df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7157900, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "753769aa7f972eb67bb3c108e3871726", "sha256": "106a62f15b941cb4870a7e48f27f34a5a86750e4a936c87de8b73be44c020014"}, "downloads": -1, "filename": "pandashape-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "753769aa7f972eb67bb3c108e3871726", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6643, "upload_time": "2020-05-03T16:16:31", "upload_time_iso_8601": "2020-05-03T16:16:31.885094Z", "url": "https://files.pythonhosted.org/packages/be/96/8dabc9f7c7e65255a84472866b9799b90384b0fe12fb93e743ac90265cd8/pandashape-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dea3a29d747f59ca186bcac62f28e4d9", "sha256": "fb4229f55f2cb4612f1dc0864c995947097bba57d88d82bb6196673cec30f591"}, "downloads": -1, "filename": "pandashape-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dea3a29d747f59ca186bcac62f28e4d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3520, "upload_time": "2020-05-03T16:16:33", "upload_time_iso_8601": "2020-05-03T16:16:33.715515Z", "url": "https://files.pythonhosted.org/packages/91/b3/786bf1597406c41d7025964c6b41de580a6cbeb2fd4d146c439b7ce4aac1/pandashape-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2982c02d0ed78ec50f2fb41731ca6dd3", "sha256": "8fd55d291820f4f4dab90eba379ec1d2039328e44f5bdb813f73855bd9f37198"}, "downloads": -1, "filename": "pandashape-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2982c02d0ed78ec50f2fb41731ca6dd3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7901, "upload_time": "2020-05-03T16:29:38", "upload_time_iso_8601": "2020-05-03T16:29:38.836479Z", "url": "https://files.pythonhosted.org/packages/65/0e/50ab0ea904e029ed2c73fc5e808cf1feac208e452df2595fc4bd22dd1904/pandashape-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f8217ce2bf9c1dd0fa7024ecb8807c9", "sha256": "aac85b02ed2693010c273465f74eaada3a08e0d906230dbac999bb40d10de2fa"}, "downloads": -1, "filename": "pandashape-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1f8217ce2bf9c1dd0fa7024ecb8807c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5739, "upload_time": "2020-05-03T16:29:40", "upload_time_iso_8601": "2020-05-03T16:29:40.306106Z", "url": "https://files.pythonhosted.org/packages/19/a6/d2ba3886ee130cee8c13eae4b09f9f63a5b093078b1b2444fd3ac6165309/pandashape-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2982c02d0ed78ec50f2fb41731ca6dd3", "sha256": "8fd55d291820f4f4dab90eba379ec1d2039328e44f5bdb813f73855bd9f37198"}, "downloads": -1, "filename": "pandashape-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2982c02d0ed78ec50f2fb41731ca6dd3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7901, "upload_time": "2020-05-03T16:29:38", "upload_time_iso_8601": "2020-05-03T16:29:38.836479Z", "url": "https://files.pythonhosted.org/packages/65/0e/50ab0ea904e029ed2c73fc5e808cf1feac208e452df2595fc4bd22dd1904/pandashape-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f8217ce2bf9c1dd0fa7024ecb8807c9", "sha256": "aac85b02ed2693010c273465f74eaada3a08e0d906230dbac999bb40d10de2fa"}, "downloads": -1, "filename": "pandashape-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1f8217ce2bf9c1dd0fa7024ecb8807c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5739, "upload_time": "2020-05-03T16:29:40", "upload_time_iso_8601": "2020-05-03T16:29:40.306106Z", "url": "https://files.pythonhosted.org/packages/19/a6/d2ba3886ee130cee8c13eae4b09f9f63a5b093078b1b2444fd3ac6165309/pandashape-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:31 2020"}