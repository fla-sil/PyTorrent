{"info": {"author": "Andreas Jung", "author_email": "info@zopyx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Zope2", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database :: Front-Ends", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=====================================================\nz3c.sqlalchemy - A SQLAlchemy wrapper for Python/Zope\n=====================================================\n\n\nWhat is z3c.sqlalchemy?\n=======================\n\nz3c.sqlalchemy is yet another wrapper around SQLAlchemy. The functionality of\nthe wrapper is basically focused on easy integration with Zope 2 and Zope 3.\nThe wrapper cares about connection handling, optional transaction integration\nwith Zope 2/3 and wrapper management (caching, introspection). z3c.sqlalchemy\ngives you flexible control over the mapper creation. Mapper classes can be\n\n- auto-generated (with or without autodetection of table relationships)\n- configured by the developer \n\n\nWhat z3c.sqlalchemy does not do and won't do:\n=============================================\n\n- no support for Zope 3 schemas \n- no support for Archetypes schemas\n\nz3c.sqlachemy just tries to provide you with the basic functionalities you need\nto write SQLAlchemy-based applications with Zope 2/3. Higher-level\nfunctionalities like integration with Archetypes/Zope 3 schemas are subject to\nhigher-level frameworks.  z3c.sqlalchemy does not address these frameworks.\n\n\nRequirements:\n=============\n\n- Zope 2.8+, Zope 3.X\n- SQLAlchemy 0.4.6 or higher  (no support for SQLAlchemy 0.3) \n- zope.sqlalchemy 0.1.0 or higher\n- Python 2.4+\n\n\nInstallation:\n=============\n\nEither using easy_install::\n\n  easy_install z3c.sqlalchemy\n\nor using Python directly::\n\n  python2.4 setup.py install\n\nNote:\n-----\nz3c.sqlalchemy depends on the modules **zope.component**, **zope.schema**\nand **zope.interface**. If you are using z3c.sqlalchemy in a Python-only\nenvironment, ensure the these components have to be installed either\nas eggs or by setting the PYTHONPATH to a corresponding Zope 2 \nor Zope 3 installation.\n\n\nUsage\n=====\n\nBasic usage: \n\n   from z3c.sqlalchemy import createSAWrapper\n   wrapper = createSAWrapper('postgres://postgres:postgres@host/someDB')\n   session = wrapper.session\n   FormatMapper = wrapper.getMapper('format') # auto-generated mapper for table 'format'\n   for row in session.query(FormatMapper).select(...): print row\n   session.flush() # if necessary\n\nThe session will participate automatically in a Zope transaction.  The wrapper\nwill call automatically session.flush() upon a transaction commit.  Please note\nthat 'wrapper.session' will always return the same session instance within the\nsame transaction and same thread.\n\nFor a real-world application you don't want to create a new wrapper for every\nnew request.  Instead you want to register a wrapper instance as named utility\n(ISQLAlchemyWrapper) and lookup up the wrapper (the utility!) by name from\nwithin your application. This approach is very similiar to looking up an\ndatabases adapter or a ZSQL method through acquisition.\n   \nBy default \"wrapper.getMapper(name)\" will always auto-generate a new mapper\nclass by using SQLAlchemy auto-load feature. The drawback of this approach is\nthat the mapper class does not know about relationships to other tables. Assume\nwe have a one-to-many relationship between table A and B and you want\nz3c.sqlalchemy to generate a mapper that is aware of this relationship. For\nthis purpose you can create a wrapper with a \"model\" as optional parameter. A\nmodel is basically a configuration or a series of hints in order to tell\nz3c.sqlalchemy how mappers a generated.\n\nExample::\n\n   from z3c.sqlalchemy import createSAWrapper, Model\n   model = Model()\n   model.add(name='A', relations=('B',))\n   wrapper = createSAWrapper('postgres://postgres:postgres@host/someDB', model=model)\n   AMapper= wrapper.getMapper('A') \n\nThis will generate a mapper AMapper where all instances of AMapper have a\nproperty 'B' that relates to all corresponding rows in B (see the SQLAlchemy\ndocumentation on mappers, properties and relation()). In this example you\ndefine the relationship between A and B explictly through the 'relations'\nparameter (as a sequence of related table names).\n\nz3c.sqlalchemy also supports the auto-detection of relationships between tables.\nUnfortunately SQLAlchemy does not support this feature out-of-the-box and in a portable\nway. Therefore this feature of z3c.sqlalchemy is highly experimental and currently\nonly available for Postgres (tested with Postgres 8.X).::\n\n   from z3c.sqlalchemy import createSAWrapper, Model\n   model = Model()\n   model.add(name='A', autodetect_relations=True)\n   wrapper = createSAWrapper('postgres://postgres:postgres@host/someDB', model=model)\n   AMapper= wrapper.getMapper('A') \n\nIn this case z3c.sqlalchemy will scan all tables in order to detect\nrelationships automatically and build the mapper class and its properties\naccording to the found relationships. Warning: this feature is experimental and\nit might take some time to scan all tables before the first request. Currently\nonly Postgres tables in the 'public' schema are supported).\n\nIn same cases you might be interested to use your own base classes for a\ngenerated mapper.  Also this usecase is supported by passing the base class to\nthe model using the 'mapper_class' parameter::\n\n   from z3c.sqlalchemy import createSAWrapper, Model\n   from z3c.sqlalchemy.mapper import MappedClassBase\n   class MyAMapper(MappedClassBase): pass\n   model = Model()\n   model.add(name='A', relations=('B',) mapper_class = MyAMapper)\n   wrapper = createSAWrapper('postgres://postgres:postgres@host/someDB', model=model)\n   AMapper= wrapper.getMapper('A')  # AMapper will be an instance of MyAMapper\n\nWhen you are working with wrapper in a Zope 2/3 environment you are usually\ninterested to to register a wrapper instance as named utility implementing\nISQLAlchemyWrapper. You can can perform the registration lazily by passing the\nname utility as 'name' parameter to the createSAWrapper(...,\nname='my.postgres.test.db') method.\n\nA convenience method for obtaining a wrapper instance by name is available\nthrough getSAWrapper::\n\n    createSAWrapper(dsn,..., name='my.name')\n    ...\n    wrapper = getSAWrapper('my.name')\n\n\nSupported systems\n=================\n\nz3c.sqlalchemy was developed with Zope 2.8/Zope 3.0 and basically tested against\nPostgres 7.4.X and 8.X and SQLite 3.3.\n\n\nKnown issues\n============\n\nRunning z3c.sqalchemy against MySQL databases without transaction support might\ncause trouble upon the implicit commit() operation. For this reason MySQL without\ntransaction support isn't supported right now\n\n\nAuthor\n======\n\nz3c.sqlalchemy was written by Andreas Jung for Haufe Mediengruppe, Freiburg, Germany\nand ZOPYX Ltd. & Co. KG, Tuebingen, Germany.\n\n\nLicense\n=======\n\nz3c.sqlalchemy is licensed under the Zope Public License 2.1. \n\nSee LICENSE.txt.\n\n\nContact\n=======\n\n| ZOPYX Ltd. & Co. KG\n| Andreas Jung\n| Charlottenstr. 37/1\n| D-72070 Tuebingen, Germany \n| E-mail: info at zopyx dot com\n| Web: http://www.zopyx.com\n\n\nCredits\n=======\n\nParts of the code are influenced by z3c.zalchemy (Juergen Kartnaller, Michael\nBernstein & others) and Alchemist/ore.alchemist (Kapil Thangavelu). Thanks to\nMartin Aspeli for giving valuable feedback.\n\nChanges\n=======\n\n1.4.0 (2009-12-02)\n------------------\n\n- removed compatibility code with older Zope versions\n\n- fixed import issue with modern zope.component versions\n\n- fixed registering of custom mappers\n\n1.3.11 (26.10.2009)\n-------------------\n\n- Don't create a new MetaData in LazyMapperCollection,\n  but use the one created in the wrapper.\n  In some cases, you could have some tables in the metadata created in the wrapper,\n  and some tables in the metadata created in the LazyMapperCollection,\n  which gave an error when trying to create relations.\n\n- When generating the mapper class, make sure table.name is a string.\n  It can be unicode when use_unicode=1 with MySQL engine.\n\n1.3.10 (04.08.2009)\n-------------------\n\n - removed SA deprecation warning\n\n1.3.9 (06.01.2009)\n------------------\n\n - made 'twophase' configurable\n\n1.3.8 (06.01.2009)\n------------------\n\n - replace asDict() with a dictish proxy implementation\n\n1.3.7 (12.12.2008)\n------------------\n\n - better support for SQLAlchemy declarative layer\n\n1.3.6 (23.11.2008)\n------------------\n\n  - zip_safe=False\n\n1.3.5 (05.09.2008)\n------------------\n\n  - restored compatibiltiy with SA 0.4.X\n\n1.3.4 (04.09.2008)\n------------------\n\n  - added 'extension_options' parameter\n\n1.3.2 (29.07.2008)\n------------------\n\n  - updated dependencies to latest zope.sqlalchemy release\n\n1.3.1 (24.06.2008)\n------------------\n\n  - relaxed zope.* dependencies\n\n1.3.0 (02.06.2008)\n------------------\n\n  - support for sqlalchemy.ext.declarative\n\n1.2.0 (25.05.2008)\n------------------\n\n  - now using zope.sqlalchemy for ZODB transaction integration\n\n  - internal class renaming\n\n  - removed PythonBaseWrapper. Now there is only *one* ZopeWrappe class.\n\n  - requires SQLAlchemy 0.4.6 or higher\n\n  - requires zope.sqlalchemy 0.1 or higher\n\n1.1.5 (08.05.2008)\n------------------\n\n  - better error handling in case of a rollback (patch by Dieter Maurer)\n\n1.1.4 (15.03.2008)\n------------------\n\n  - reorganized .txt files\n\n1.1.3 (20.02.2008)\n-------------------\n\n  - another savepoint fix\n\n  - fixed regression error introduced by previous change: commit the\n    zope transaction when ready in tpc_finish [maurits]\n\n  - fixed issue where session's transaction.nested was being called as\n    a callable (it should be straight attribute access) [Rocky]\n\n\n1.1.2 (16.02.2008)\n-------------------\n\n  - fixed ZODB savepoint implementation. Now returning a proper dummy\n    savepoint\n\n1.1.1 (13.02.2008)\n-------------------\n\n  - the SessionDataManager now supports ZODB savepoints\n\n1.1.0 (17.01.2008)\n-------------------\n\n  - WARNING: this version requires SA 0.4.X and higher \n\n  - fixed import issues with the upcoming SA 0.4.X series\n\n  - create_session() calls (for SA 0.4.X)\n\n  - the unittests support an optional $TEST_DSN environment in order\n    to run the test against an existing database (other than SQLite)\n               \n  - major overhoul of the Zope transaction integration: now using\n    one DataManager for the session object and the connection. The \n    connection as returned through the 'connection' property is also\n    used for creating a new 'session'. Older z3c.sqlalchemy version\n    used separate connections. This allows applications to use both\n    a session and a connection within the same Zope request/thread\n    without running into transaction problems. SQL actions and\n    session related modifications should happen within the same\n    transaction.\n\n  - Wrapper constructor now accepts two new optional dicts \n    'engine_options' and 'session_options' that will be passed down \n    to the engine and the sessionmaker.  Patch provided by \n    Klaus Barthelmann.\n\n  - mapped objects now provide a method asDict() to return the values \n    of an objects as dict.\n\n \n1.0.11 (30.07.2007)\n-------------------\n\n  - replaced BoundMetaData() with MetaData() (requires SA 0.3.9+)\n\n  - removed zope.* dependencies in order to avoid zope.* version\n    mismatches for now\n\n\n1.0.10 (16.07.2007)\n-------------------\n\n  - using Zope 3.3.X as a fixed depenceny \n \n\n1.0.9 (08.07.2007)\n------------------\n\n  - added namespace declarations\n\n  - reST-ified documentation\n\n\n1.0.8 (28.06.2007)\n------------------\n\n  - SessionDataManager: create a session transaction as late\n    as possible and only if necessary in order to minimize deadlocks.\n    So z3c.sqlalchemy won't create a transaction any more if there\n    only SELECT operations within the current session.\n\n\n1.0.7 (27.06.2007)\n------------------\n\n  - SessionDataManager: moved commit code from tpc_vote()\n    to tpc_finish() (Thanks to Christian Theune for the hint)\n\n1.0.6 (25.06.2007)\n------------------\n\n  - added 'namespace_packages' directive to setup.py\n\n  - cache 'metadata' property\n\n1.0.5 (13.06.2007)\n------------------\n\n  - It should be now safe to use sessions from multiple wrappers\n    within one Zope transaction. In former versions of z3c.sqlalchemy\n    calling wrapper1.session and wrapper2.session within the same\n    transaction would return a session bound to wrapper1 in both\n    cases.\n\n1.0.4 (09.06.2007)\n------------------\n\n  - added new 'transactional' flag (used by SQLAlchemyDA only)\n\n1.0.3 (26.05.2007)\n------------------\n\n   - new 'cascade' parameter for the Model.add()\n\n   - tweaked the ZODB transaction integration a bit\n\n1.0.2 (13.05.2007)\n------------------\n\n   - MappedClassBase has a new convinience method getMapper() that returns a\n     mapper class associated through a relation with the current mapper\n\n\n1.0.1 (unreleased)\n------------------\n\n   - MappedClassBase: new clone() method\n\n   - more checks in Model.add()\n\n\n1.0.0 (05.05.2007)\n------------------\n\n   - source code polishing\n   \n   - documentation update\n\n\n0.1.13 (05.05.2007)\n-------------------\n\n   - sessions were returned from the wrong cache\n\n   - moved the rollback/commit handling inside the SessionDataManager\n     in order to play more nicely with the TPC. See\n     http://mail.zope.org/pipermail/zodb-dev/2007-May/010996.html\n\n\n0.1.12 (03.05.2007)\n-------------------\n\n   - createSAWrapper() got a new optional 'name' parameter in order\n     to register the wrapper automatically instead of using a dedicated\n     registerSAWrapper(wrapper, name) call\n\n0.1.11 (02.05.2007)\n-------------------\n\n   - added check for the 'mapper_class' attribute (classes from now\n     on must be a subclass of MapperClassBase)\n\n   - a Zope-aware SAWrapper now has a 'connection' property that can\n     be used to execute SQL statements directly. 'connection' is an \n     instance of sqlalchemy.Connection and directly tied to the current\n     Zope transaction.\n\n   - changed the caching of the connection and session object for Zope wrapper\n     since the id of a transaction is not reliable (different transaction\n     object can re-use the same memory address leading to cache errors)\n\n\n0.1.10 (30.04.2007)\n-------------------\n\n   - fixed a bug in mapper (unfortunately I forgot to commit a\n     necessary change)\n\n   - removed the 'primary_key' parameter introduced in 0.1.9 because\n     we don't need. It can be defined within the model using a\n     PrimaryKeyConstraint()\n\n   - createSAWrapper: setting forZope=True for a non-postgres DSN\n     now also returns a Zope-aware wrapper instance (instead\n     of a BaseWrapper instance).  (Reported by Martin Aspeli)\n\n\n0.1.9 (26.04.2007)\n------------------\n\n   - base.py: the 'model' parameter can now also be a callable\n     returning an instance of model.Model\n\n   - base.py: calling a model provider or a method providing a\n     model with a BoundMetaData instance in order to allow \n     table auto-loading\n\n   - Model.add() got a new parameter 'primary_key' in order to specify a\n     primary_key hint. This is useful when you are trying to auto-load a view\n     as Table() having no primary key information. The 'primary_key' parameter is\n     either None or a sequence of column names.\n\n\n0.1.8 (23.04.2007)\n------------------\n\n   - added shorter method names as aliases \n\n   - don't generate a new mapper class if a custom mapper\n     class is defined within the model\n\n\n0.1.7 (21.04.2007)\n------------------\n\n   - replaced 'echo' parameter of the constructor with a generic keyword\n     parameter in order to provide full parameter support for\n     create_engine. Optional arguments passed to the constructur are\n     passed directly to create_engine()\n\n   - fixed the documentation a bit\n\n   - added registerMapper() to BaseWrapper class\n\n   - registerSQLAlchemyWrapper() now defers the registration until\n     the Wrapper is used first when calling getSQLAlchemyWrapper() \n\n   - the 'name' parameter of Model.add() now supports schemas (if\n     available). E.g. when using Postgres you can reference as\n     table within a different schema through '<schema>.<tablename>'.\n\n   - Model.add() accepts a new optional parameter 'table_name' that\n     can be used to specify the name of a table (including schema\n     information) when you want to use the 'name' parameter as\n     an alias for the related table/mapper.\n\n \n0.1.6 (28.03.2007)\n------------------\n\n   - fixed a bug in registerSQLAlchemyWrapper\n\n0.1.5 (28.03.2007)\n------------------\n  \n   - registerSQLAlchemyWrapper() should now work with Zope 2.8-2.10\n\n   - abort() was defined twice inside the DataManager class\n \n0.1.4 (21.03.2007)\n------------------\n\n   - the Model class now behave (where needed) as a sorted\n     dictionary. Its items() method must returned all items\n     in insertion order.\n\n0.1.3 (20.03.2007)\n------------------\n\n   - added getMappers() convenience method\n\n   - the Zope wrapper uses SessionTransactions in order to be able\n     to flush() as session with a transaction in order to read\n     row previously inserted within the same transaction\n\n\n0.1.2 (unreleased)\n------------------\n\n   - fixed class hierarchy issues with Postgres wrapper classes\n\n\n0.1.1 (unreleased)\n------------------\n\n   - fixed setup.py\n\n0.1 (18.03.2007)\n----------------\n\n   - initial version", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.zope.org/z3c.sqlalchemy/tags/1.4.0", "keywords": null, "license": "ZPL (see LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "z3c.sqlalchemy", "package_url": "https://pypi.org/project/z3c.sqlalchemy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.sqlalchemy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.zope.org/z3c.sqlalchemy/tags/1.4.0"}, "release_url": "https://pypi.org/project/z3c.sqlalchemy/1.4.0/", "requires_dist": null, "requires_python": null, "summary": "A SQLAlchemy wrapper for Zope 2 and Zope 3", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-z3c-sqlalchemy\">\n<h2>What is z3c.sqlalchemy?</h2>\n<p>z3c.sqlalchemy is yet another wrapper around SQLAlchemy. The functionality of\nthe wrapper is basically focused on easy integration with Zope 2 and Zope 3.\nThe wrapper cares about connection handling, optional transaction integration\nwith Zope 2/3 and wrapper management (caching, introspection). z3c.sqlalchemy\ngives you flexible control over the mapper creation. Mapper classes can be</p>\n<ul>\n<li>auto-generated (with or without autodetection of table relationships)</li>\n<li>configured by the developer</li>\n</ul>\n</div>\n<div id=\"what-z3c-sqlalchemy-does-not-do-and-won-t-do\">\n<h2>What z3c.sqlalchemy does not do and won\u2019t do:</h2>\n<ul>\n<li>no support for Zope 3 schemas</li>\n<li>no support for Archetypes schemas</li>\n</ul>\n<p>z3c.sqlachemy just tries to provide you with the basic functionalities you need\nto write SQLAlchemy-based applications with Zope 2/3. Higher-level\nfunctionalities like integration with Archetypes/Zope 3 schemas are subject to\nhigher-level frameworks.  z3c.sqlalchemy does not address these frameworks.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements:</h2>\n<ul>\n<li>Zope 2.8+, Zope 3.X</li>\n<li>SQLAlchemy 0.4.6 or higher  (no support for SQLAlchemy 0.3)</li>\n<li>zope.sqlalchemy 0.1.0 or higher</li>\n<li>Python 2.4+</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation:</h2>\n<p>Either using easy_install:</p>\n<pre>easy_install z3c.sqlalchemy\n</pre>\n<p>or using Python directly:</p>\n<pre>python2.4 setup.py install\n</pre>\n<div id=\"note\">\n<h3>Note:</h3>\n<p>z3c.sqlalchemy depends on the modules <strong>zope.component</strong>, <strong>zope.schema</strong>\nand <strong>zope.interface</strong>. If you are using z3c.sqlalchemy in a Python-only\nenvironment, ensure the these components have to be installed either\nas eggs or by setting the PYTHONPATH to a corresponding Zope 2\nor Zope 3 installation.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Basic usage:</p>\n<blockquote>\nfrom z3c.sqlalchemy import createSAWrapper\nwrapper = createSAWrapper(\u2018postgres://postgres:postgres@host/someDB\u2019)\nsession = wrapper.session\nFormatMapper = wrapper.getMapper(\u2018format\u2019) # auto-generated mapper for table \u2018format\u2019\nfor row in session.query(FormatMapper).select(\u2026): print row\nsession.flush() # if necessary</blockquote>\n<p>The session will participate automatically in a Zope transaction.  The wrapper\nwill call automatically session.flush() upon a transaction commit.  Please note\nthat \u2018wrapper.session\u2019 will always return the same session instance within the\nsame transaction and same thread.</p>\n<p>For a real-world application you don\u2019t want to create a new wrapper for every\nnew request.  Instead you want to register a wrapper instance as named utility\n(ISQLAlchemyWrapper) and lookup up the wrapper (the utility!) by name from\nwithin your application. This approach is very similiar to looking up an\ndatabases adapter or a ZSQL method through acquisition.</p>\n<p>By default \u201cwrapper.getMapper(name)\u201d will always auto-generate a new mapper\nclass by using SQLAlchemy auto-load feature. The drawback of this approach is\nthat the mapper class does not know about relationships to other tables. Assume\nwe have a one-to-many relationship between table A and B and you want\nz3c.sqlalchemy to generate a mapper that is aware of this relationship. For\nthis purpose you can create a wrapper with a \u201cmodel\u201d as optional parameter. A\nmodel is basically a configuration or a series of hints in order to tell\nz3c.sqlalchemy how mappers a generated.</p>\n<p>Example:</p>\n<pre>from z3c.sqlalchemy import createSAWrapper, Model\nmodel = Model()\nmodel.add(name='A', relations=('B',))\nwrapper = createSAWrapper('postgres://postgres:postgres@host/someDB', model=model)\nAMapper= wrapper.getMapper('A')\n</pre>\n<p>This will generate a mapper AMapper where all instances of AMapper have a\nproperty \u2018B\u2019 that relates to all corresponding rows in B (see the SQLAlchemy\ndocumentation on mappers, properties and relation()). In this example you\ndefine the relationship between A and B explictly through the \u2018relations\u2019\nparameter (as a sequence of related table names).</p>\n<p>z3c.sqlalchemy also supports the auto-detection of relationships between tables.\nUnfortunately SQLAlchemy does not support this feature out-of-the-box and in a portable\nway. Therefore this feature of z3c.sqlalchemy is highly experimental and currently\nonly available for Postgres (tested with Postgres 8.X).:</p>\n<pre>from z3c.sqlalchemy import createSAWrapper, Model\nmodel = Model()\nmodel.add(name='A', autodetect_relations=True)\nwrapper = createSAWrapper('postgres://postgres:postgres@host/someDB', model=model)\nAMapper= wrapper.getMapper('A')\n</pre>\n<p>In this case z3c.sqlalchemy will scan all tables in order to detect\nrelationships automatically and build the mapper class and its properties\naccording to the found relationships. Warning: this feature is experimental and\nit might take some time to scan all tables before the first request. Currently\nonly Postgres tables in the \u2018public\u2019 schema are supported).</p>\n<p>In same cases you might be interested to use your own base classes for a\ngenerated mapper.  Also this usecase is supported by passing the base class to\nthe model using the \u2018mapper_class\u2019 parameter:</p>\n<pre>from z3c.sqlalchemy import createSAWrapper, Model\nfrom z3c.sqlalchemy.mapper import MappedClassBase\nclass MyAMapper(MappedClassBase): pass\nmodel = Model()\nmodel.add(name='A', relations=('B',) mapper_class = MyAMapper)\nwrapper = createSAWrapper('postgres://postgres:postgres@host/someDB', model=model)\nAMapper= wrapper.getMapper('A')  # AMapper will be an instance of MyAMapper\n</pre>\n<p>When you are working with wrapper in a Zope 2/3 environment you are usually\ninterested to to register a wrapper instance as named utility implementing\nISQLAlchemyWrapper. You can can perform the registration lazily by passing the\nname utility as \u2018name\u2019 parameter to the createSAWrapper(\u2026,\nname=\u2019my.postgres.test.db\u2019) method.</p>\n<p>A convenience method for obtaining a wrapper instance by name is available\nthrough getSAWrapper:</p>\n<pre>createSAWrapper(dsn,..., name='my.name')\n...\nwrapper = getSAWrapper('my.name')\n</pre>\n</div>\n<div id=\"supported-systems\">\n<h2>Supported systems</h2>\n<p>z3c.sqlalchemy was developed with Zope 2.8/Zope 3.0 and basically tested against\nPostgres 7.4.X and 8.X and SQLite 3.3.</p>\n</div>\n<div id=\"known-issues\">\n<h2>Known issues</h2>\n<p>Running z3c.sqalchemy against MySQL databases without transaction support might\ncause trouble upon the implicit commit() operation. For this reason MySQL without\ntransaction support isn\u2019t supported right now</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>z3c.sqlalchemy was written by Andreas Jung for Haufe Mediengruppe, Freiburg, Germany\nand ZOPYX Ltd. &amp; Co. KG, Tuebingen, Germany.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>z3c.sqlalchemy is licensed under the Zope Public License 2.1.</p>\n<p>See LICENSE.txt.</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<div>\n<div>ZOPYX Ltd. &amp; Co. KG</div>\n<div>Andreas Jung</div>\n<div>Charlottenstr. 37/1</div>\n<div>D-72070 Tuebingen, Germany</div>\n<div>E-mail: info at zopyx dot com</div>\n<div>Web: <a href=\"http://www.zopyx.com\" rel=\"nofollow\">http://www.zopyx.com</a></div>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Parts of the code are influenced by z3c.zalchemy (Juergen Kartnaller, Michael\nBernstein &amp; others) and Alchemist/ore.alchemist (Kapil Thangavelu). Thanks to\nMartin Aspeli for giving valuable feedback.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>1.4.0 (2009-12-02)</h3>\n<ul>\n<li>removed compatibility code with older Zope versions</li>\n<li>fixed import issue with modern zope.component versions</li>\n<li>fixed registering of custom mappers</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.3.11 (26.10.2009)</h3>\n<ul>\n<li>Don\u2019t create a new MetaData in LazyMapperCollection,\nbut use the one created in the wrapper.\nIn some cases, you could have some tables in the metadata created in the wrapper,\nand some tables in the metadata created in the LazyMapperCollection,\nwhich gave an error when trying to create relations.</li>\n<li>When generating the mapper class, make sure table.name is a string.\nIt can be unicode when use_unicode=1 with MySQL engine.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.3.10 (04.08.2009)</h3>\n<blockquote>\n<ul>\n<li>removed SA deprecation warning</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h3>1.3.9 (06.01.2009)</h3>\n<blockquote>\n<ul>\n<li>made \u2018twophase\u2019 configurable</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h3>1.3.8 (06.01.2009)</h3>\n<blockquote>\n<ul>\n<li>replace asDict() with a dictish proxy implementation</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h3>1.3.7 (12.12.2008)</h3>\n<blockquote>\n<ul>\n<li>better support for SQLAlchemy declarative layer</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h3>1.3.6 (23.11.2008)</h3>\n<blockquote>\n<ul>\n<li>zip_safe=False</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id8\">\n<h3>1.3.5 (05.09.2008)</h3>\n<blockquote>\n<ul>\n<li>restored compatibiltiy with SA 0.4.X</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id9\">\n<h3>1.3.4 (04.09.2008)</h3>\n<blockquote>\n<ul>\n<li>added \u2018extension_options\u2019 parameter</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id10\">\n<h3>1.3.2 (29.07.2008)</h3>\n<blockquote>\n<ul>\n<li>updated dependencies to latest zope.sqlalchemy release</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id11\">\n<h3>1.3.1 (24.06.2008)</h3>\n<blockquote>\n<ul>\n<li>relaxed zope.* dependencies</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id12\">\n<h3>1.3.0 (02.06.2008)</h3>\n<blockquote>\n<ul>\n<li>support for sqlalchemy.ext.declarative</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id13\">\n<h3>1.2.0 (25.05.2008)</h3>\n<blockquote>\n<ul>\n<li>now using zope.sqlalchemy for ZODB transaction integration</li>\n<li>internal class renaming</li>\n<li>removed PythonBaseWrapper. Now there is only <em>one</em> ZopeWrappe class.</li>\n<li>requires SQLAlchemy 0.4.6 or higher</li>\n<li>requires zope.sqlalchemy 0.1 or higher</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id14\">\n<h3>1.1.5 (08.05.2008)</h3>\n<blockquote>\n<ul>\n<li>better error handling in case of a rollback (patch by Dieter Maurer)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id15\">\n<h3>1.1.4 (15.03.2008)</h3>\n<blockquote>\n<ul>\n<li>reorganized .txt files</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id16\">\n<h3>1.1.3 (20.02.2008)</h3>\n<blockquote>\n<ul>\n<li>another savepoint fix</li>\n<li>fixed regression error introduced by previous change: commit the\nzope transaction when ready in tpc_finish [maurits]</li>\n<li>fixed issue where session\u2019s transaction.nested was being called as\na callable (it should be straight attribute access) [Rocky]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id17\">\n<h3>1.1.2 (16.02.2008)</h3>\n<blockquote>\n<ul>\n<li>fixed ZODB savepoint implementation. Now returning a proper dummy\nsavepoint</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id18\">\n<h3>1.1.1 (13.02.2008)</h3>\n<blockquote>\n<ul>\n<li>the SessionDataManager now supports ZODB savepoints</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id19\">\n<h3>1.1.0 (17.01.2008)</h3>\n<blockquote>\n<ul>\n<li>WARNING: this version requires SA 0.4.X and higher</li>\n<li>fixed import issues with the upcoming SA 0.4.X series</li>\n<li>create_session() calls (for SA 0.4.X)</li>\n<li>the unittests support an optional $TEST_DSN environment in order\nto run the test against an existing database (other than SQLite)</li>\n<li>major overhoul of the Zope transaction integration: now using\none DataManager for the session object and the connection. The\nconnection as returned through the \u2018connection\u2019 property is also\nused for creating a new \u2018session\u2019. Older z3c.sqlalchemy version\nused separate connections. This allows applications to use both\na session and a connection within the same Zope request/thread\nwithout running into transaction problems. SQL actions and\nsession related modifications should happen within the same\ntransaction.</li>\n<li>Wrapper constructor now accepts two new optional dicts\n\u2018engine_options\u2019 and \u2018session_options\u2019 that will be passed down\nto the engine and the sessionmaker.  Patch provided by\nKlaus Barthelmann.</li>\n<li>mapped objects now provide a method asDict() to return the values\nof an objects as dict.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id20\">\n<h3>1.0.11 (30.07.2007)</h3>\n<blockquote>\n<ul>\n<li>replaced BoundMetaData() with MetaData() (requires SA 0.3.9+)</li>\n<li>removed zope.* dependencies in order to avoid zope.* version\nmismatches for now</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id21\">\n<h3>1.0.10 (16.07.2007)</h3>\n<blockquote>\n<ul>\n<li>using Zope 3.3.X as a fixed depenceny</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id22\">\n<h3>1.0.9 (08.07.2007)</h3>\n<blockquote>\n<ul>\n<li>added namespace declarations</li>\n<li>reST-ified documentation</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id23\">\n<h3>1.0.8 (28.06.2007)</h3>\n<blockquote>\n<ul>\n<li>SessionDataManager: create a session transaction as late\nas possible and only if necessary in order to minimize deadlocks.\nSo z3c.sqlalchemy won\u2019t create a transaction any more if there\nonly SELECT operations within the current session.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id24\">\n<h3>1.0.7 (27.06.2007)</h3>\n<blockquote>\n<ul>\n<li>SessionDataManager: moved commit code from tpc_vote()\nto tpc_finish() (Thanks to Christian Theune for the hint)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id25\">\n<h3>1.0.6 (25.06.2007)</h3>\n<blockquote>\n<ul>\n<li>added \u2018namespace_packages\u2019 directive to setup.py</li>\n<li>cache \u2018metadata\u2019 property</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id26\">\n<h3>1.0.5 (13.06.2007)</h3>\n<blockquote>\n<ul>\n<li>It should be now safe to use sessions from multiple wrappers\nwithin one Zope transaction. In former versions of z3c.sqlalchemy\ncalling wrapper1.session and wrapper2.session within the same\ntransaction would return a session bound to wrapper1 in both\ncases.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id27\">\n<h3>1.0.4 (09.06.2007)</h3>\n<blockquote>\n<ul>\n<li>added new \u2018transactional\u2019 flag (used by SQLAlchemyDA only)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id28\">\n<h3>1.0.3 (26.05.2007)</h3>\n<blockquote>\n<ul>\n<li>new \u2018cascade\u2019 parameter for the Model.add()</li>\n<li>tweaked the ZODB transaction integration a bit</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id29\">\n<h3>1.0.2 (13.05.2007)</h3>\n<blockquote>\n<ul>\n<li>MappedClassBase has a new convinience method getMapper() that returns a\nmapper class associated through a relation with the current mapper</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"unreleased\">\n<h3>1.0.1 (unreleased)</h3>\n<blockquote>\n<ul>\n<li>MappedClassBase: new clone() method</li>\n<li>more checks in Model.add()</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id30\">\n<h3>1.0.0 (05.05.2007)</h3>\n<blockquote>\n<ul>\n<li>source code polishing</li>\n<li>documentation update</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id31\">\n<h3>0.1.13 (05.05.2007)</h3>\n<blockquote>\n<ul>\n<li>sessions were returned from the wrong cache</li>\n<li>moved the rollback/commit handling inside the SessionDataManager\nin order to play more nicely with the TPC. See\n<a href=\"http://mail.zope.org/pipermail/zodb-dev/2007-May/010996.html\" rel=\"nofollow\">http://mail.zope.org/pipermail/zodb-dev/2007-May/010996.html</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id32\">\n<h3>0.1.12 (03.05.2007)</h3>\n<blockquote>\n<ul>\n<li>createSAWrapper() got a new optional \u2018name\u2019 parameter in order\nto register the wrapper automatically instead of using a dedicated\nregisterSAWrapper(wrapper, name) call</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id33\">\n<h3>0.1.11 (02.05.2007)</h3>\n<blockquote>\n<ul>\n<li>added check for the \u2018mapper_class\u2019 attribute (classes from now\non must be a subclass of MapperClassBase)</li>\n<li>a Zope-aware SAWrapper now has a \u2018connection\u2019 property that can\nbe used to execute SQL statements directly. \u2018connection\u2019 is an\ninstance of sqlalchemy.Connection and directly tied to the current\nZope transaction.</li>\n<li>changed the caching of the connection and session object for Zope wrapper\nsince the id of a transaction is not reliable (different transaction\nobject can re-use the same memory address leading to cache errors)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id34\">\n<h3>0.1.10 (30.04.2007)</h3>\n<blockquote>\n<ul>\n<li>fixed a bug in mapper (unfortunately I forgot to commit a\nnecessary change)</li>\n<li>removed the \u2018primary_key\u2019 parameter introduced in 0.1.9 because\nwe don\u2019t need. It can be defined within the model using a\nPrimaryKeyConstraint()</li>\n<li>createSAWrapper: setting forZope=True for a non-postgres DSN\nnow also returns a Zope-aware wrapper instance (instead\nof a BaseWrapper instance).  (Reported by Martin Aspeli)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id35\">\n<h3>0.1.9 (26.04.2007)</h3>\n<blockquote>\n<ul>\n<li>base.py: the \u2018model\u2019 parameter can now also be a callable\nreturning an instance of model.Model</li>\n<li>base.py: calling a model provider or a method providing a\nmodel with a BoundMetaData instance in order to allow\ntable auto-loading</li>\n<li>Model.add() got a new parameter \u2018primary_key\u2019 in order to specify a\nprimary_key hint. This is useful when you are trying to auto-load a view\nas Table() having no primary key information. The \u2018primary_key\u2019 parameter is\neither None or a sequence of column names.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id36\">\n<h3>0.1.8 (23.04.2007)</h3>\n<blockquote>\n<ul>\n<li>added shorter method names as aliases</li>\n<li>don\u2019t generate a new mapper class if a custom mapper\nclass is defined within the model</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id37\">\n<h3>0.1.7 (21.04.2007)</h3>\n<blockquote>\n<ul>\n<li>replaced \u2018echo\u2019 parameter of the constructor with a generic keyword\nparameter in order to provide full parameter support for\ncreate_engine. Optional arguments passed to the constructur are\npassed directly to create_engine()</li>\n<li>fixed the documentation a bit</li>\n<li>added registerMapper() to BaseWrapper class</li>\n<li>registerSQLAlchemyWrapper() now defers the registration until\nthe Wrapper is used first when calling getSQLAlchemyWrapper()</li>\n<li>the \u2018name\u2019 parameter of Model.add() now supports schemas (if\navailable). E.g. when using Postgres you can reference as\ntable within a different schema through \u2018&lt;schema&gt;.&lt;tablename&gt;\u2019.</li>\n<li>Model.add() accepts a new optional parameter \u2018table_name\u2019 that\ncan be used to specify the name of a table (including schema\ninformation) when you want to use the \u2018name\u2019 parameter as\nan alias for the related table/mapper.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id38\">\n<h3>0.1.6 (28.03.2007)</h3>\n<blockquote>\n<ul>\n<li>fixed a bug in registerSQLAlchemyWrapper</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id39\">\n<h3>0.1.5 (28.03.2007)</h3>\n<blockquote>\n<ul>\n<li>registerSQLAlchemyWrapper() should now work with Zope 2.8-2.10</li>\n<li>abort() was defined twice inside the DataManager class</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id40\">\n<h3>0.1.4 (21.03.2007)</h3>\n<blockquote>\n<ul>\n<li>the Model class now behave (where needed) as a sorted\ndictionary. Its items() method must returned all items\nin insertion order.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id41\">\n<h3>0.1.3 (20.03.2007)</h3>\n<blockquote>\n<ul>\n<li>added getMappers() convenience method</li>\n<li>the Zope wrapper uses SessionTransactions in order to be able\nto flush() as session with a transaction in order to read\nrow previously inserted within the same transaction</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id42\">\n<h3>0.1.2 (unreleased)</h3>\n<blockquote>\n<ul>\n<li>fixed class hierarchy issues with Postgres wrapper classes</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id43\">\n<h3>0.1.1 (unreleased)</h3>\n<blockquote>\n<ul>\n<li>fixed setup.py</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id44\">\n<h3>0.1 (18.03.2007)</h3>\n<blockquote>\n<ul>\n<li>initial version</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 802113, "releases": {"1.0.12": [{"comment_text": "", "digests": {"md5": "304e6f71a59a38715205400463aeb2d3", "sha256": "f31553ac7f847442afd6732aff51babfd2f5cf54f17002be3f2152fce221a7ae"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.0.12-py2.4.egg", "has_sig": false, "md5_digest": "304e6f71a59a38715205400463aeb2d3", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 263599, "upload_time": "2008-05-04T19:25:49", "upload_time_iso_8601": "2008-05-04T19:25:49Z", "url": "https://files.pythonhosted.org/packages/6b/d5/60e032119d05a9161a7d3af1b55871abbd76bbeb3a972d1f6ff6550ebbc1/z3c.sqlalchemy-1.0.12-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9ab0dd610b36979195f14c1380b1d74", "sha256": "e07ce33b341b926351530293ff2d4d4abbb02602d90d60d4998ae03f7b226dec"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.0.12.tar.gz", "has_sig": false, "md5_digest": "c9ab0dd610b36979195f14c1380b1d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 238265, "upload_time": "2008-05-04T19:25:45", "upload_time_iso_8601": "2008-05-04T19:25:45Z", "url": "https://files.pythonhosted.org/packages/65/5a/a28fc6d0e32a76f17e45d6500dcfcce7259a773ac32ffd92ed2d7612811c/z3c.sqlalchemy-1.0.12.tar.gz", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "9ef81560bc94594fcd61a4efbc2864f1", "sha256": "37050c4ef8dd8168c4c074744c49601bd890f3ce604340de26a693e6da574257"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.0.13-py2.4.egg", "has_sig": false, "md5_digest": "9ef81560bc94594fcd61a4efbc2864f1", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 263685, "upload_time": "2008-06-06T06:13:23", "upload_time_iso_8601": "2008-06-06T06:13:23Z", "url": "https://files.pythonhosted.org/packages/9b/6d/2ba4d3853b06ae1ea079534a4ac24efc0d273ba957f550754fe9c240b6c4/z3c.sqlalchemy-1.0.13-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "432903d68cb8adde91b11d0518e80a52", "sha256": "1306e0f91a3f07b4053a2afbc5e06b67d97dbc9c508f6a69c4ad327abef45d4b"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.0.13.tar.gz", "has_sig": false, "md5_digest": "432903d68cb8adde91b11d0518e80a52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 238337, "upload_time": "2008-06-06T06:13:27", "upload_time_iso_8601": "2008-06-06T06:13:27Z", "url": "https://files.pythonhosted.org/packages/4d/b1/a76720c665a830bc6eb29a602e937a3c18e84658588f79af3c54efbb64a8/z3c.sqlalchemy-1.0.13.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "d0046fea6b3f702940c67ccb6affc2a1", "sha256": "80914841c081a556f37b4f373134a02ee6cd62d47dd2b0b7526b9466c254d228"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.0.9-py2.4.egg", "has_sig": false, "md5_digest": "d0046fea6b3f702940c67ccb6affc2a1", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 263591, "upload_time": "2008-05-04T19:16:34", "upload_time_iso_8601": "2008-05-04T19:16:34Z", "url": "https://files.pythonhosted.org/packages/69/19/0fa5f54d5e32b0269e38613ebaed8541f01173f6f40097fed1bcabbb0b42/z3c.sqlalchemy-1.0.9-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c369c2303a5a6f100a20396addbcd3e4", "sha256": "96730e4c47cdc2e8c9e5fba85241cca0ba58e0a526f7ab92e8753fce7e47fc1b"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.0.9.tar.gz", "has_sig": false, "md5_digest": "c369c2303a5a6f100a20396addbcd3e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 238233, "upload_time": "2008-05-04T19:16:37", "upload_time_iso_8601": "2008-05-04T19:16:37Z", "url": "https://files.pythonhosted.org/packages/d9/93/e31d80e8122ffb3f07f8d0b1bbe0ef67a1ee1a2d9ff4d158d8876db9f839/z3c.sqlalchemy-1.0.9.tar.gz", "yanked": false}], "1.1.15": [{"comment_text": "", "digests": {"md5": "4d91f7fa622d2367287d233499e44900", "sha256": "809efe02925b874fabedf5efe4516eb1459fd0c25c6210b78dbcc625a043e561"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.1.15-py2.4.egg", "has_sig": false, "md5_digest": "4d91f7fa622d2367287d233499e44900", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 260240, "upload_time": "2008-05-08T05:32:59", "upload_time_iso_8601": "2008-05-08T05:32:59Z", "url": "https://files.pythonhosted.org/packages/b6/08/620387a5573df94e7e5d806397943762f605413ada69a2270512533ee4fd/z3c.sqlalchemy-1.1.15-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "38dbb0ed4ac29260b84a2cdcd1df7e83", "sha256": "2c3dca6825cc9a8cb555adf0db058ec911401d093fe3c6668115f9858e34284b"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.1.15-py2.5.egg", "has_sig": false, "md5_digest": "38dbb0ed4ac29260b84a2cdcd1df7e83", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 39974, "upload_time": "2008-05-09T18:32:46", "upload_time_iso_8601": "2008-05-09T18:32:46Z", "url": "https://files.pythonhosted.org/packages/68/40/d72a119b6a0ac8b19af77151846c635823c1022d334089bd18c9b4bb1837/z3c.sqlalchemy-1.1.15-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "346ba136176d53643a1bda9d64b6d64b", "sha256": "1baac02a76121351787768d4d73de67a172b95580da7300a50f0f11c29ac5458"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.1.15.tar.gz", "has_sig": false, "md5_digest": "346ba136176d53643a1bda9d64b6d64b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 243148, "upload_time": "2008-05-08T05:33:02", "upload_time_iso_8601": "2008-05-08T05:33:02Z", "url": "https://files.pythonhosted.org/packages/9e/62/069b32b1a60e4357ad68aa56a7e77b6d65b10ae9b2fb688c9fc64c4d6749/z3c.sqlalchemy-1.1.15.tar.gz", "yanked": false}], "1.1.2": [], "1.2.0": [{"comment_text": "", "digests": {"md5": "92476dcbeb1a0e1fe762d2710553ed89", "sha256": "84a49c1653deb203fe82f22f95049223c004cdcc1ca414340f64547a4692e7f5"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.2.0-py2.4.egg", "has_sig": false, "md5_digest": "92476dcbeb1a0e1fe762d2710553ed89", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 257589, "upload_time": "2008-05-25T10:02:46", "upload_time_iso_8601": "2008-05-25T10:02:46Z", "url": "https://files.pythonhosted.org/packages/69/04/12f8f3b0ce3cb5422d30406f93fcbbb787540666f33f711c99d3892d3f0f/z3c.sqlalchemy-1.2.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7249e3108d5673c9144a689b0d4a2fd", "sha256": "45a9a56d3e3b290c851cdc52f17fd15e1af7577eaafeb7aedb54c5c20b59201a"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a7249e3108d5673c9144a689b0d4a2fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22806, "upload_time": "2008-05-25T10:02:47", "upload_time_iso_8601": "2008-05-25T10:02:47Z", "url": "https://files.pythonhosted.org/packages/1c/fe/beda0d5897ff06fafaa36bfc114bae064648823eebf1d02ec4db62222c00/z3c.sqlalchemy-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "8572e35ff4d85e627aedf4c4c4f8ba16", "sha256": "b6068219799dec145c4e05ae8127f7eeb7bbcd435230ee3a678e892e0fb9e0c7"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.0-py2.4.egg", "has_sig": false, "md5_digest": "8572e35ff4d85e627aedf4c4c4f8ba16", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 258384, "upload_time": "2008-06-02T15:06:45", "upload_time_iso_8601": "2008-06-02T15:06:45Z", "url": "https://files.pythonhosted.org/packages/bb/da/568877e36ae29c3cf16b2527b87785e2606c7b6ce6ac10a231cfc32b7285/z3c.sqlalchemy-1.3.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4bbc70f6349be3379c4196f5cd8abee", "sha256": "fea79352a28a7407500f3679069e2557778553707f189f3a747bce4c73344db4"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "a4bbc70f6349be3379c4196f5cd8abee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23060, "upload_time": "2008-06-02T15:06:45", "upload_time_iso_8601": "2008-06-02T15:06:45Z", "url": "https://files.pythonhosted.org/packages/a3/db/77cf53fcd1f9e7856bfecd533c44360c5c8486e5adfa5c62785eb1ab2486/z3c.sqlalchemy-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "a651d88a49964e4fb9064651e2561f8f", "sha256": "9c279fd719b015ef0964c857f47b8fb807b97020527513b20751a2fabc891936"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.1-py2.4.egg", "has_sig": false, "md5_digest": "a651d88a49964e4fb9064651e2561f8f", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 258401, "upload_time": "2008-06-24T08:31:56", "upload_time_iso_8601": "2008-06-24T08:31:56Z", "url": "https://files.pythonhosted.org/packages/7a/92/54b011da560923f3729d01052c29877f1e482fc1b6fba6eeaf19834a248c/z3c.sqlalchemy-1.3.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "648feee3c353d170bea4681d88b6eba7", "sha256": "8b314e7941fde178ad19cd4043fd1cc630626984ea342a666dade7628ee50643"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.1.tar.gz", "has_sig": false, "md5_digest": "648feee3c353d170bea4681d88b6eba7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23093, "upload_time": "2008-06-24T08:31:56", "upload_time_iso_8601": "2008-06-24T08:31:56Z", "url": "https://files.pythonhosted.org/packages/04/b3/80fa2fab5e616bd3fdaf9bac44fc7c541e50890ad3c3fef2ff5da6ebb67d/z3c.sqlalchemy-1.3.1.tar.gz", "yanked": false}], "1.3.10": [{"comment_text": "", "digests": {"md5": "6b1d39971f3fce09be6a13080d16becc", "sha256": "21d9c1c33beb805814acf01cb0c01e89fc0798fe48fdf47a6f06458cbd17efa6"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.10.tar.gz", "has_sig": false, "md5_digest": "6b1d39971f3fce09be6a13080d16becc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25572, "upload_time": "2009-08-04T08:46:59", "upload_time_iso_8601": "2009-08-04T08:46:59.126824Z", "url": "https://files.pythonhosted.org/packages/6e/a4/bf615597a22a4febe805479ed087b5111e87dee949530f1277a22fe852c9/z3c.sqlalchemy-1.3.10.tar.gz", "yanked": false}], "1.3.10.1": [{"comment_text": "", "digests": {"md5": "e9171cc1cd85d812c965308717e83cd2", "sha256": "652b32578d354296467ceeb14b2c3a597b3ea2812715fdd9d0327d2d542858f0"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.10.1.tar.gz", "has_sig": false, "md5_digest": "e9171cc1cd85d812c965308717e83cd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25585, "upload_time": "2009-08-04T08:55:29", "upload_time_iso_8601": "2009-08-04T08:55:29.717366Z", "url": "https://files.pythonhosted.org/packages/60/cf/a4c944b6b63bd1623921288749a315573719f08512674278bb2c2b89f12a/z3c.sqlalchemy-1.3.10.1.tar.gz", "yanked": false}], "1.3.11": [{"comment_text": "", "digests": {"md5": "4cde0544d91aa963454a4b6233f3e257", "sha256": "9524a80363bc489d489e294413154cac9e851f1ee843be744c9c4ac0843aaead"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.11.tar.gz", "has_sig": false, "md5_digest": "4cde0544d91aa963454a4b6233f3e257", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25999, "upload_time": "2009-10-26T13:52:48", "upload_time_iso_8601": "2009-10-26T13:52:48.321458Z", "url": "https://files.pythonhosted.org/packages/b1/b8/efad597f43e598d59b6bd0b7876ca933b819f7c6ba841e7415bcca99790c/z3c.sqlalchemy-1.3.11.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "e8523a4e79b9f73a9db7c7ce2fc95ab9", "sha256": "3fdcb8e0813aa2f59631aaa543c35dacd4844ed3d60d43aff2f9a582e0ebca6e"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.2-py2.4.egg", "has_sig": false, "md5_digest": "e8523a4e79b9f73a9db7c7ce2fc95ab9", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 258426, "upload_time": "2008-07-29T15:04:38", "upload_time_iso_8601": "2008-07-29T15:04:38Z", "url": "https://files.pythonhosted.org/packages/65/cf/484dc8153f8ceb97b55dc2ef63321caabc1638b48017bf309286dc167645/z3c.sqlalchemy-1.3.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e96683faca44197378031b8c9c8deba", "sha256": "caa9bc0b1fca2a2318acb060968f1c02e90cb62636f388f5379a6de2fb9a7e3a"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.2.tar.gz", "has_sig": false, "md5_digest": "4e96683faca44197378031b8c9c8deba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23177, "upload_time": "2008-07-29T15:04:38", "upload_time_iso_8601": "2008-07-29T15:04:38Z", "url": "https://files.pythonhosted.org/packages/8e/2e/682514ca21b0cd31ac9d528d07793202332fcf2681128fef4ee24c1b902f/z3c.sqlalchemy-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "925f72a9b306ef51569c8fa2a50d56dc", "sha256": "753ade81d8ac8933f9622c6ecc25ff085a472a06366aac489eeb9ef4bc02d84a"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.3-py2.4.egg", "has_sig": false, "md5_digest": "925f72a9b306ef51569c8fa2a50d56dc", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 258410, "upload_time": "2008-08-05T10:44:51", "upload_time_iso_8601": "2008-08-05T10:44:51Z", "url": "https://files.pythonhosted.org/packages/86/87/03a3c8ed493154d0bf31a15f2d850ac84bfe4838634d9c9f80cc45564054/z3c.sqlalchemy-1.3.3-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6f95709b0e19f405bf5893c5aad70f5", "sha256": "c0659a5b03a4ef7479b594416ba867699f153dfcdaaa578ec7b9f0418fc825e9"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.3.tar.gz", "has_sig": false, "md5_digest": "a6f95709b0e19f405bf5893c5aad70f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23150, "upload_time": "2008-08-05T10:44:52", "upload_time_iso_8601": "2008-08-05T10:44:52Z", "url": "https://files.pythonhosted.org/packages/62/85/e3239a4bb3125820c28034a5d8e503573271d9039482b01aa74d7339479e/z3c.sqlalchemy-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "cb34fe6e9390a710ea6f8ae77c4b9273", "sha256": "c537e6fde0dfeb821c95cf9af3c119a278cef02d97b0c3b3230feaa15ad19261"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.4.tar.gz", "has_sig": false, "md5_digest": "cb34fe6e9390a710ea6f8ae77c4b9273", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23256, "upload_time": "2008-09-04T12:47:10", "upload_time_iso_8601": "2008-09-04T12:47:10Z", "url": "https://files.pythonhosted.org/packages/7d/0c/553b62cc718b48a5bf1a53df2c10807713f465bc319e85a64e086f168485/z3c.sqlalchemy-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "a449c473413e26e2404e84bffd4d0e9a", "sha256": "6715b7337385e8dfe5c5c83d13efc2ddfb0c0d3eb5986e0878567895c5b1c5fd"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.5.tar.gz", "has_sig": false, "md5_digest": "a449c473413e26e2404e84bffd4d0e9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23270, "upload_time": "2008-09-05T09:53:21", "upload_time_iso_8601": "2008-09-05T09:53:21Z", "url": "https://files.pythonhosted.org/packages/f8/11/17f4dd349fc0278122406aa74d1002f094d870c917343bbdf80bfd6a0c21/z3c.sqlalchemy-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "028e38c617ee4a964bd9124ae8e30c3c", "sha256": "1e101e0b0378f6dc1c650a150f9cd18fb2a76dba1c5c77f48cbf8bcdb45f6d6d"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.6.tar.gz", "has_sig": false, "md5_digest": "028e38c617ee4a964bd9124ae8e30c3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23306, "upload_time": "2008-11-23T16:13:01", "upload_time_iso_8601": "2008-11-23T16:13:01Z", "url": "https://files.pythonhosted.org/packages/54/26/ab8f616d4ad1249ddd87e0e6b8947bc9c373c806776556c746fdef84bfb2/z3c.sqlalchemy-1.3.6.tar.gz", "yanked": false}], "1.3.7": [{"comment_text": "", "digests": {"md5": "cd5695d99ece1e9fcfebe829e5bbe7fb", "sha256": "af54ebb7dfe7c78f09f3f2ea96f62a210e8e2598a10af8172128d21e4e1c2e0a"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.7.tar.gz", "has_sig": false, "md5_digest": "cd5695d99ece1e9fcfebe829e5bbe7fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23464, "upload_time": "2008-12-12T07:28:14", "upload_time_iso_8601": "2008-12-12T07:28:14Z", "url": "https://files.pythonhosted.org/packages/31/d0/9428333a7e87df236c85d1c768acbc60eeb0219dfbbaba4f85d0b1527ae9/z3c.sqlalchemy-1.3.7.tar.gz", "yanked": false}], "1.3.8": [{"comment_text": "", "digests": {"md5": "4cf075c05c7e0311b577329114be5f81", "sha256": "990f9367fc6fbe7d331e0b69cf1158a62cd8a11e8c52de82d7c402b86e178e90"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.8.tar.gz", "has_sig": false, "md5_digest": "4cf075c05c7e0311b577329114be5f81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23788, "upload_time": "2009-01-05T10:34:10", "upload_time_iso_8601": "2009-01-05T10:34:10Z", "url": "https://files.pythonhosted.org/packages/7e/9a/8349d650f2d8e581cd74abec91810fb9824bd86dda0e1fe422ad228d9610/z3c.sqlalchemy-1.3.8.tar.gz", "yanked": false}], "1.3.9": [{"comment_text": "", "digests": {"md5": "8a60b3c33534dbe166b87c7612426258", "sha256": "148bb6c9c25bfa76f85f3594a90f050f0cfc2b4107da59024b79d721f18ccf3e"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.3.9.tar.gz", "has_sig": false, "md5_digest": "8a60b3c33534dbe166b87c7612426258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23830, "upload_time": "2009-01-05T14:52:27", "upload_time_iso_8601": "2009-01-05T14:52:27Z", "url": "https://files.pythonhosted.org/packages/92/81/cbb98d51e9f15c2de8a8c992b1b7178310cad95d9c2b457e3fb5f78a40dc/z3c.sqlalchemy-1.3.9.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d84bb0684a665274edbaf587f69efc7c", "sha256": "801bb4e104f71c0083831e49e65fb29b799f6aa223e38f3a93c202c4d091f7cc"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d84bb0684a665274edbaf587f69efc7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24154, "upload_time": "2009-12-02T13:30:08", "upload_time_iso_8601": "2009-12-02T13:30:08.233002Z", "url": "https://files.pythonhosted.org/packages/0a/77/ff9067e9af38a94d1b701a83e7e9a0b45ac5a1d84c4da3224d8554379f3f/z3c.sqlalchemy-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d84bb0684a665274edbaf587f69efc7c", "sha256": "801bb4e104f71c0083831e49e65fb29b799f6aa223e38f3a93c202c4d091f7cc"}, "downloads": -1, "filename": "z3c.sqlalchemy-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d84bb0684a665274edbaf587f69efc7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24154, "upload_time": "2009-12-02T13:30:08", "upload_time_iso_8601": "2009-12-02T13:30:08.233002Z", "url": "https://files.pythonhosted.org/packages/0a/77/ff9067e9af38a94d1b701a83e7e9a0b45ac5a1d84c4da3224d8554379f3f/z3c.sqlalchemy-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:28 2020"}