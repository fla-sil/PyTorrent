{"info": {"author": "Band Protocol", "author_email": "opensource@bandprotocol.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux"], "description": "# PyLibra \ud83d\udc0d\n\n## Summary\n\nPyLibra is an unofficial python client for [Libra blockchain](http://libra.org). The library allows Python program to interact with Libra nodes with [protobuf](https://developers.google.com/protocol-buffers/) message through [grpc](https://grpc.io/). Note that this library performs key management internally. No server required!\n\n## Installation\n\n```sh\n$ pip install pylibra\n```\n\n## Usage\n\nBelow you can find example usages together with explanation. Note that this is an alpha software and interface can change all the time, especially when Libra's interface itself is not yet settle.\n\n### LibraWallet\n\nYou can create a wallet using `LibraWallet` class. A wallet is like your masterkey and you can create almost infinitely many Libra accounts from it. Note that PyLibra's mnemonic scheme is not similar to that of [Libra's CLI](https://github.com/libra/libra/tree/master/client/src), so you cannot import mnemonic between the two libraries (yet).\n\n```py\nfrom pylibra import LibraWallet\n\n# Create a new random wallet\nwallet1 = LibraWallet()\nprint(wallet1.to_mnemonic())\n\n# Regenerate wallet from an existing Mnemonic\nwallet2 = LibraWallet(\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\")\nprint(wallet2.to_mnemonic())\n```\n\n### Account\n\nAn `Account` can be created by calling `get_account` function on a wallet, with a nonce integer. You use any number (0, 1, 2, ...) to generate a new account under your wallet. This is similar to how [MetaMask](https://metamask.io) keeps track of account. An `Account` contains its `address`, `public_key`, and `private_key`.\n\n```py\nfrom pylibra import LibraWallet\n\nwallet = LibraWallet()\n\naccount1 = wallet.get_account(0)\nprint(account1.address)\nprint(account1.public_key)\nprint(account1.private_key)\n\naccount2 = wallet.get_account(1)\nprint(account2.address)\nprint(account2.public_key)\nprint(account2.private_key)\n```\n\n### LibraClient\n\nA `LibraClient` must be created in order to send protobuf message to a Libra node. You can create a client with the following code.\n\n```py\nfrom pylibra import LibraClient\n\nclient1 = LibraClient()  # Default client connecting to the official testnet\nclient2 = LibraClient('localhost:80')  # Client connecting to a local node\n```\n\n### Get Account State of an Address\n\nYou can query an account's state by using `get_account_state` function on `LibraClient`. The function returns an `AccountState`, which contains the address' sequence number, balance, and more. If an account has not been created yet (never received any funds), the function will return `None`.\n\n```py\nfrom pylibra import LibraClient, LibraWallet\n\nclient = LibraClient()\nwallet = LibraWallet(\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\")\naccount = wallet.get_account(0)\n\n# You can pass in a hex string address \naccount_state = client.get_account_state(\"4988ceb593200955bf64a024907a94206518d6ac2f624eec569abce38f98da86\")\nprint(account_state.balance)\nprint(account_state.sequence_number)\nprint(account_state.received_events_count)\nprint(account_state.sent_events_count)\n\n# Account object can also be passed\naccount_state = client.get_account_state(account)\n```\n\n### Mint Testnet Libra Token\n\nYou can mint testnet libra with `mint_with_faucet` function, which sends a HTTP GET request to [http://faucet.testnet.libra.org](http://faucet.testnet.libra.org). You can customize this URL by passing a key-value argument `faucet` when creating a `LibraClient` (for example, when you want to have your own faucet service). The second argument is the mini-libra amount which is `10^6` times the amount of Libra token. (e.g. `10000` mini-libra is `0.01` Libra token).\n\n```py\nfrom pylibra import LibraClient, LibraWallet\n\nclient = LibraClient()\nwallet = LibraWallet(\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\")\naccount = wallet.get_account(0)\n\n# Mint 0.01 Libra to the given address\nclient.mint_with_faucet(\"4988ceb593200955bf64a024907a94206518d6ac2f624eec569abce38f98da86\", 10000)  \n\n# Or the given account\nclient.mint_with_faucet(account, 10000)\n```\n\n### Creating a Transfer Transaction Script and Sending the Transaction\n\nNote that in the official testnet, the Libra node ONLY allows sending [the official transfer transaction script](https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/peer_to_peer_transfer.mvir). In the future, this libra can be extended to support more transaction scripts as well, as you can see that the logic of creating and sending a transaction is completely independent!\n\n```py\nfrom pylibra import LibraClient, LibraWallet\nfrom pylibra.transaction import TransferTransaction\n\nclient = LibraClient()\nwallet = LibraWallet(\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\")\naccount1 = wallet.get_account(0)\naccount2 = wallet.get_account(1)\n\n# Create a transfer transaction object to send 0.001 Libra to account2\ntx1 = TransferTransaction(account2, 1000)\n# Or to send to a plain hex address\ntx2 = TransferTransaction(\"4988ceb593200955bf64a024907a94206518d6ac2f624eec569abce38f98da86\", 1000)\n\n# You can send a transaction by calling `send_transaction` function, which takes a sender `Account` and a `Transaction` object. You can also optionally passed `max_gas_amount`, `gas_unit_price`, and `expiration_time`. \nclient.send_transaction(account1, tx1)\n# Specify gas limit, gas price, and expiration time (this case, it will expire in year 2508)\nclient.send_transaction(account1, tx2, max_gas_amount=10000, gas_unit_price=0, expiration_time=17000000000)\n```\n\n## License\n\nThis software is created by [Band Protocol](https://bandprotocol.com) and is released under [the MIT License](https://opensource.org/licenses/MIT).\n\n## Contributing\n\nAny and all contributions are welcome! The process is simple: fork this repo, make your changes, and submit a pull request.\n\n### Running Unit Tests\n\nPyLibra uses [pytest](https://docs.pytest.org/) to run unit tests. \n\n```\n$ PYTHONPATH=. pytest\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bandprotocol/pylibra", "keywords": "libra,client,cryptocurrency,blockchain", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pylibra", "package_url": "https://pypi.org/project/pylibra/", "platform": "", "project_url": "https://pypi.org/project/pylibra/", "project_urls": {"Homepage": "https://github.com/bandprotocol/pylibra"}, "release_url": "https://pypi.org/project/pylibra/0.1.10/", "requires_dist": null, "requires_python": "", "summary": "A Python client for Libra network", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyLibra \ud83d\udc0d</h1>\n<h2>Summary</h2>\n<p>PyLibra is an unofficial python client for <a href=\"http://libra.org\" rel=\"nofollow\">Libra blockchain</a>. The library allows Python program to interact with Libra nodes with <a href=\"https://developers.google.com/protocol-buffers/\" rel=\"nofollow\">protobuf</a> message through <a href=\"https://grpc.io/\" rel=\"nofollow\">grpc</a>. Note that this library performs key management internally. No server required!</p>\n<h2>Installation</h2>\n<pre>$ pip install pylibra\n</pre>\n<h2>Usage</h2>\n<p>Below you can find example usages together with explanation. Note that this is an alpha software and interface can change all the time, especially when Libra's interface itself is not yet settle.</p>\n<h3>LibraWallet</h3>\n<p>You can create a wallet using <code>LibraWallet</code> class. A wallet is like your masterkey and you can create almost infinitely many Libra accounts from it. Note that PyLibra's mnemonic scheme is not similar to that of <a href=\"https://github.com/libra/libra/tree/master/client/src\" rel=\"nofollow\">Libra's CLI</a>, so you cannot import mnemonic between the two libraries (yet).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibra</span> <span class=\"kn\">import</span> <span class=\"n\">LibraWallet</span>\n\n<span class=\"c1\"># Create a new random wallet</span>\n<span class=\"n\">wallet1</span> <span class=\"o\">=</span> <span class=\"n\">LibraWallet</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">wallet1</span><span class=\"o\">.</span><span class=\"n\">to_mnemonic</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Regenerate wallet from an existing Mnemonic</span>\n<span class=\"n\">wallet2</span> <span class=\"o\">=</span> <span class=\"n\">LibraWallet</span><span class=\"p\">(</span><span class=\"s2\">\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">wallet2</span><span class=\"o\">.</span><span class=\"n\">to_mnemonic</span><span class=\"p\">())</span>\n</pre>\n<h3>Account</h3>\n<p>An <code>Account</code> can be created by calling <code>get_account</code> function on a wallet, with a nonce integer. You use any number (0, 1, 2, ...) to generate a new account under your wallet. This is similar to how <a href=\"https://metamask.io\" rel=\"nofollow\">MetaMask</a> keeps track of account. An <code>Account</code> contains its <code>address</code>, <code>public_key</code>, and <code>private_key</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibra</span> <span class=\"kn\">import</span> <span class=\"n\">LibraWallet</span>\n\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">LibraWallet</span><span class=\"p\">()</span>\n\n<span class=\"n\">account1</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account1</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account1</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account1</span><span class=\"o\">.</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n\n<span class=\"n\">account2</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account2</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account2</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account2</span><span class=\"o\">.</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n</pre>\n<h3>LibraClient</h3>\n<p>A <code>LibraClient</code> must be created in order to send protobuf message to a Libra node. You can create a client with the following code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibra</span> <span class=\"kn\">import</span> <span class=\"n\">LibraClient</span>\n\n<span class=\"n\">client1</span> <span class=\"o\">=</span> <span class=\"n\">LibraClient</span><span class=\"p\">()</span>  <span class=\"c1\"># Default client connecting to the official testnet</span>\n<span class=\"n\">client2</span> <span class=\"o\">=</span> <span class=\"n\">LibraClient</span><span class=\"p\">(</span><span class=\"s1\">'localhost:80'</span><span class=\"p\">)</span>  <span class=\"c1\"># Client connecting to a local node</span>\n</pre>\n<h3>Get Account State of an Address</h3>\n<p>You can query an account's state by using <code>get_account_state</code> function on <code>LibraClient</code>. The function returns an <code>AccountState</code>, which contains the address' sequence number, balance, and more. If an account has not been created yet (never received any funds), the function will return <code>None</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibra</span> <span class=\"kn\">import</span> <span class=\"n\">LibraClient</span><span class=\"p\">,</span> <span class=\"n\">LibraWallet</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">LibraClient</span><span class=\"p\">()</span>\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">LibraWallet</span><span class=\"p\">(</span><span class=\"s2\">\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\"</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can pass in a hex string address </span>\n<span class=\"n\">account_state</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_account_state</span><span class=\"p\">(</span><span class=\"s2\">\"4988ceb593200955bf64a024907a94206518d6ac2f624eec569abce38f98da86\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account_state</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account_state</span><span class=\"o\">.</span><span class=\"n\">sequence_number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account_state</span><span class=\"o\">.</span><span class=\"n\">received_events_count</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account_state</span><span class=\"o\">.</span><span class=\"n\">sent_events_count</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Account object can also be passed</span>\n<span class=\"n\">account_state</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_account_state</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"p\">)</span>\n</pre>\n<h3>Mint Testnet Libra Token</h3>\n<p>You can mint testnet libra with <code>mint_with_faucet</code> function, which sends a HTTP GET request to <a href=\"http://faucet.testnet.libra.org\" rel=\"nofollow\">http://faucet.testnet.libra.org</a>. You can customize this URL by passing a key-value argument <code>faucet</code> when creating a <code>LibraClient</code> (for example, when you want to have your own faucet service). The second argument is the mini-libra amount which is <code>10^6</code> times the amount of Libra token. (e.g. <code>10000</code> mini-libra is <code>0.01</code> Libra token).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibra</span> <span class=\"kn\">import</span> <span class=\"n\">LibraClient</span><span class=\"p\">,</span> <span class=\"n\">LibraWallet</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">LibraClient</span><span class=\"p\">()</span>\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">LibraWallet</span><span class=\"p\">(</span><span class=\"s2\">\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\"</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Mint 0.01 Libra to the given address</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">mint_with_faucet</span><span class=\"p\">(</span><span class=\"s2\">\"4988ceb593200955bf64a024907a94206518d6ac2f624eec569abce38f98da86\"</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>  \n\n<span class=\"c1\"># Or the given account</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">mint_with_faucet</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n</pre>\n<h3>Creating a Transfer Transaction Script and Sending the Transaction</h3>\n<p>Note that in the official testnet, the Libra node ONLY allows sending <a href=\"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/peer_to_peer_transfer.mvir\" rel=\"nofollow\">the official transfer transaction script</a>. In the future, this libra can be extended to support more transaction scripts as well, as you can see that the logic of creating and sending a transaction is completely independent!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibra</span> <span class=\"kn\">import</span> <span class=\"n\">LibraClient</span><span class=\"p\">,</span> <span class=\"n\">LibraWallet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylibra.transaction</span> <span class=\"kn\">import</span> <span class=\"n\">TransferTransaction</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">LibraClient</span><span class=\"p\">()</span>\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">LibraWallet</span><span class=\"p\">(</span><span class=\"s2\">\"student deliver dentist cat gorilla sleep proud naive gown fiber awkward weasel\"</span><span class=\"p\">)</span>\n<span class=\"n\">account1</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">account2</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a transfer transaction object to send 0.001 Libra to account2</span>\n<span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">TransferTransaction</span><span class=\"p\">(</span><span class=\"n\">account2</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or to send to a plain hex address</span>\n<span class=\"n\">tx2</span> <span class=\"o\">=</span> <span class=\"n\">TransferTransaction</span><span class=\"p\">(</span><span class=\"s2\">\"4988ceb593200955bf64a024907a94206518d6ac2f624eec569abce38f98da86\"</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can send a transaction by calling `send_transaction` function, which takes a sender `Account` and a `Transaction` object. You can also optionally passed `max_gas_amount`, `gas_unit_price`, and `expiration_time`. </span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_transaction</span><span class=\"p\">(</span><span class=\"n\">account1</span><span class=\"p\">,</span> <span class=\"n\">tx1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Specify gas limit, gas price, and expiration time (this case, it will expire in year 2508)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_transaction</span><span class=\"p\">(</span><span class=\"n\">account1</span><span class=\"p\">,</span> <span class=\"n\">tx2</span><span class=\"p\">,</span> <span class=\"n\">max_gas_amount</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">gas_unit_price</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expiration_time</span><span class=\"o\">=</span><span class=\"mi\">17000000000</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p>This software is created by <a href=\"https://bandprotocol.com\" rel=\"nofollow\">Band Protocol</a> and is released under <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">the MIT License</a>.</p>\n<h2>Contributing</h2>\n<p>Any and all contributions are welcome! The process is simple: fork this repo, make your changes, and submit a pull request.</p>\n<h3>Running Unit Tests</h3>\n<p>PyLibra uses <a href=\"https://docs.pytest.org/\" rel=\"nofollow\">pytest</a> to run unit tests.</p>\n<pre><code>$ PYTHONPATH=. pytest\n</code></pre>\n\n          </div>"}, "last_serial": 5586325, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a43d6696381a45b7abb268dc13de1fe8", "sha256": "2fded4b5adb53b7a4ccb2b858ef21f70cfaef2e12716ee505dbd7f0a97534c75"}, "downloads": -1, "filename": "pylibra-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a43d6696381a45b7abb268dc13de1fe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 993, "upload_time": "2019-07-01T04:36:47", "upload_time_iso_8601": "2019-07-01T04:36:47.127023Z", "url": "https://files.pythonhosted.org/packages/c8/66/f2706a4fab444d51b06e0d737babb326e94c0247cf9c982a25fadb9a379e/pylibra-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f24639ea89beaa1a038922f956a52e17", "sha256": "f868afe9cfd9871185669b38bab554f74af081c37cd090eeefd686afe712b952"}, "downloads": -1, "filename": "pylibra-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f24639ea89beaa1a038922f956a52e17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1404, "upload_time": "2019-07-01T04:45:15", "upload_time_iso_8601": "2019-07-01T04:45:15.828350Z", "url": "https://files.pythonhosted.org/packages/5a/5e/8934af87c9927b908f5a69854e4a3c74f916057bb80027c5d26554fa18c4/pylibra-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4ae60126b8a4de6901dc303eca0a4a35", "sha256": "c3c69342ceea7f4df1a775a56b819e62ac99af61d2fc26f26f109ea5c448c1d7"}, "downloads": -1, "filename": "pylibra-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4ae60126b8a4de6901dc303eca0a4a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2144, "upload_time": "2019-07-01T04:52:33", "upload_time_iso_8601": "2019-07-01T04:52:33.530251Z", "url": "https://files.pythonhosted.org/packages/31/8c/a4c09cdd10df94b3b525ab661788f87c21ed3414f6c409a8d0607695ab1d/pylibra-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f8f9b9b7e39696a6be35a06eb952e241", "sha256": "fdd0e914daead1fa6b36f7e3665573d21a843855c167a4c3cd003c48cddc6735"}, "downloads": -1, "filename": "pylibra-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f8f9b9b7e39696a6be35a06eb952e241", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3486, "upload_time": "2019-07-03T11:57:39", "upload_time_iso_8601": "2019-07-03T11:57:39.512828Z", "url": "https://files.pythonhosted.org/packages/3e/b0/ea29f9d7f5158d3bc24f891d8bed38bce5138dbbfe5eb7893a6f2acf66fd/pylibra-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "3fae294797471265a345daf3c56f2a15", "sha256": "4ff44712396d109e931e3a6c6ac0ef88c9780426238038b527227ec1f28ecea4"}, "downloads": -1, "filename": "pylibra-0.0.5.tar.gz", "has_sig": false, "md5_digest": "3fae294797471265a345daf3c56f2a15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3480, "upload_time": "2019-07-03T11:59:31", "upload_time_iso_8601": "2019-07-03T11:59:31.518861Z", "url": "https://files.pythonhosted.org/packages/a4/c3/27d91e645d7ba4a56ea554bb85c3a65606b6a012748a526591fe71a7131c/pylibra-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "7a0c1da1443d14de127ac1c1ae0c7b2c", "sha256": "28f98037896d6b2b2c23fc9059563c17a812d9f2abb8390c2ba126deab1bfd1b"}, "downloads": -1, "filename": "pylibra-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7a0c1da1443d14de127ac1c1ae0c7b2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24093, "upload_time": "2019-07-03T13:57:29", "upload_time_iso_8601": "2019-07-03T13:57:29.381898Z", "url": "https://files.pythonhosted.org/packages/0e/95/88def277a8bd3ec7162e8a5aa9e59397a05309fa6236ffb2f51b8f76c3ba/pylibra-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "8b08bfc474f32acb75ef87a1a5f33e60", "sha256": "21e10ecac1040b473223984df3a9469114ba1a613ee7d7324c3eb2291bb499bc"}, "downloads": -1, "filename": "pylibra-0.0.7.tar.gz", "has_sig": false, "md5_digest": "8b08bfc474f32acb75ef87a1a5f33e60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24114, "upload_time": "2019-07-03T14:02:41", "upload_time_iso_8601": "2019-07-03T14:02:41.105352Z", "url": "https://files.pythonhosted.org/packages/bf/07/304d0ac3d34bc8fafd54574748220ae07d1f146663ffb86aae94eeb2a8d6/pylibra-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "0e2bde79c539bd6aed91a3ad2f706c75", "sha256": "3808d57c6c56bffdcd8f4065c79e129c9bd759ed71268e6deb7f950a6eab16c3"}, "downloads": -1, "filename": "pylibra-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0e2bde79c539bd6aed91a3ad2f706c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24080, "upload_time": "2019-07-03T14:17:16", "upload_time_iso_8601": "2019-07-03T14:17:16.333384Z", "url": "https://files.pythonhosted.org/packages/3a/ab/173ef7391500aafa2ad71ec64bea8da0ac41e47c7f70bf88d54832e2e692/pylibra-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2ff6b1b6393153257c77098a2696eb4d", "sha256": "171733ab682471c11a26fc5d0e05ae17284928f8cb2e5c9e034c1c9573ee2b8b"}, "downloads": -1, "filename": "pylibra-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2ff6b1b6393153257c77098a2696eb4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24095, "upload_time": "2019-07-03T14:18:29", "upload_time_iso_8601": "2019-07-03T14:18:29.204397Z", "url": "https://files.pythonhosted.org/packages/04/db/f5d7fe2aedfd5640487aff541665bf96efe80a1bfadc6cb13570c75fcca2/pylibra-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "9fa92d32b85708ca968978c2c1d14114", "sha256": "4d295586a6d1779d79cabe6c7460380e2aca43c62b8ce5cb94fff79e1ff4bc47"}, "downloads": -1, "filename": "pylibra-0.1.10.tar.gz", "has_sig": false, "md5_digest": "9fa92d32b85708ca968978c2c1d14114", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29345, "upload_time": "2019-07-26T01:04:29", "upload_time_iso_8601": "2019-07-26T01:04:29.619211Z", "url": "https://files.pythonhosted.org/packages/41/f9/b950f323977c6afaaeb1f6c5cd85fb62b0508a84d268f79b289ba0c8072a/pylibra-0.1.10.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6fb0d7a876d613ee4be7cc4d079b495c", "sha256": "75578d237960bcc88a89c7f423b5e26552739f0b243c62c90a4668352a2a56d5"}, "downloads": -1, "filename": "pylibra-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6fb0d7a876d613ee4be7cc4d079b495c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24105, "upload_time": "2019-07-03T14:21:15", "upload_time_iso_8601": "2019-07-03T14:21:15.311779Z", "url": "https://files.pythonhosted.org/packages/31/22/61e0506ef3204d98394f4edab268344de53296fa30eec7a0955dda9314ef/pylibra-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "66218a18c48b1073b360251c22062323", "sha256": "9200aa0d587c94782f3eaecbf7284f64cee5a39a7184a60603c806c7885c55ed"}, "downloads": -1, "filename": "pylibra-0.1.3.tar.gz", "has_sig": false, "md5_digest": "66218a18c48b1073b360251c22062323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24096, "upload_time": "2019-07-03T15:38:02", "upload_time_iso_8601": "2019-07-03T15:38:02.413020Z", "url": "https://files.pythonhosted.org/packages/bf/55/fc3a212361df980ba6d2e559ad72dfc90f44f57b5ad239285b9acb90944f/pylibra-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "28f34373624799034ba807c42ef1ce0f", "sha256": "b9a8b0f084bbdad43412577607f40955168cabfe029eee8c4a803270ee332b51"}, "downloads": -1, "filename": "pylibra-0.1.4.tar.gz", "has_sig": false, "md5_digest": "28f34373624799034ba807c42ef1ce0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24156, "upload_time": "2019-07-03T16:09:30", "upload_time_iso_8601": "2019-07-03T16:09:30.364043Z", "url": "https://files.pythonhosted.org/packages/08/45/166efe44879d8d5084c2020d911e7755a0008295bcef9145d506e45a4168/pylibra-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "182464fd22ff864e2020ec08ea8cc54b", "sha256": "420270fe149eac704b0ccb7bc3fe687317ee83dd20a2ce264ad31641bc232cf6"}, "downloads": -1, "filename": "pylibra-0.1.5.tar.gz", "has_sig": false, "md5_digest": "182464fd22ff864e2020ec08ea8cc54b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24174, "upload_time": "2019-07-03T16:11:22", "upload_time_iso_8601": "2019-07-03T16:11:22.016820Z", "url": "https://files.pythonhosted.org/packages/ff/60/16aeb5732b302d761c20ffc1a7ace4f8fe5c7f1da98d1799fd2e9dda3aa3/pylibra-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "7949af138ea72126d2b7fbad1e700502", "sha256": "6b2ce2d3a84cd0abe7c4d988a02c250c81645081378663146f751cc702f56e0c"}, "downloads": -1, "filename": "pylibra-0.1.6.tar.gz", "has_sig": false, "md5_digest": "7949af138ea72126d2b7fbad1e700502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24216, "upload_time": "2019-07-03T16:18:33", "upload_time_iso_8601": "2019-07-03T16:18:33.579577Z", "url": "https://files.pythonhosted.org/packages/d5/2a/23affa213505d571521dde62862f20f8d597a7f2f54fee77a4d9b4c95c20/pylibra-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "57ff9194f16fe35b2dfb6fdc1612ffad", "sha256": "36112cbac54c2ce408423de3f3e77c0b04d5f839a1a47ef5779342567d72b495"}, "downloads": -1, "filename": "pylibra-0.1.7.tar.gz", "has_sig": false, "md5_digest": "57ff9194f16fe35b2dfb6fdc1612ffad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28717, "upload_time": "2019-07-03T16:21:30", "upload_time_iso_8601": "2019-07-03T16:21:30.707036Z", "url": "https://files.pythonhosted.org/packages/6c/b6/d1e0ee4158093053611c9d526254228da716dabac57f51d6230ddb6c20e9/pylibra-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "67228f43376defbafc79ff1e1509a7da", "sha256": "e7b3270f199611ffad8fe26220390d70aacb1a0bfc665514219c78484d804e59"}, "downloads": -1, "filename": "pylibra-0.1.8.tar.gz", "has_sig": false, "md5_digest": "67228f43376defbafc79ff1e1509a7da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29330, "upload_time": "2019-07-24T10:18:22", "upload_time_iso_8601": "2019-07-24T10:18:22.835255Z", "url": "https://files.pythonhosted.org/packages/ff/68/818898d78dc6e51bd98765c847c4be114a132050c571e077f194a4ede602/pylibra-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "1f8945864c39a9b6b7b66ec98de6381e", "sha256": "a3018a159ef841c3df8feb9eeef8215f9ef3c3151415985fc728f4d3b8195367"}, "downloads": -1, "filename": "pylibra-0.1.9.tar.gz", "has_sig": false, "md5_digest": "1f8945864c39a9b6b7b66ec98de6381e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29341, "upload_time": "2019-07-26T00:47:56", "upload_time_iso_8601": "2019-07-26T00:47:56.142022Z", "url": "https://files.pythonhosted.org/packages/82/c6/2ee499bfaa1c3586c41009d569fa308611367e15cb0a939952b74eeb6fb7/pylibra-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fa92d32b85708ca968978c2c1d14114", "sha256": "4d295586a6d1779d79cabe6c7460380e2aca43c62b8ce5cb94fff79e1ff4bc47"}, "downloads": -1, "filename": "pylibra-0.1.10.tar.gz", "has_sig": false, "md5_digest": "9fa92d32b85708ca968978c2c1d14114", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29345, "upload_time": "2019-07-26T01:04:29", "upload_time_iso_8601": "2019-07-26T01:04:29.619211Z", "url": "https://files.pythonhosted.org/packages/41/f9/b950f323977c6afaaeb1f6c5cd85fb62b0508a84d268f79b289ba0c8072a/pylibra-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:09 2020"}