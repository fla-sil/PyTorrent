{"info": {"author": "Justin Quick", "author_email": "justquick@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Django Live Validation\n======================\n \nDjango Live Validation provides quick and easy client-side form validation which validates as you type.\nIt uses the `Live Validation <http://livevalidation.com/>`_ JS library in conjunction with Django Forms.\nThis is by no means a replacement to Django's built in form validation, but it is a suppliment which is purely client-side baed which cuts down on server-side requests for validation. \nThis version of django-livevalidation requires Django >= 1.2, for previous versions please use this project: http://opensource.washingtontimes.com/projects/django-livevalidation/\n\n\nInstall\n--------\n\nPlace ``'livevalidaiton'`` into your ``INSTALLED_APPS`` and make sure it is above the Django admin since it overrides some of the admin templates::\n\n    INSTALLED_APPS = (\n        'livevalidation',\n        ...\n        'django.contrib.admin',\n    )\n \n\nUsage\n------\n\nTo use livevalidation in your templates, make sure you load the headers first before doing anything::\n\n    {% include 'livevalidation/header.html' %}\n    \nThis loads the JS library at ``js/livevalidation_standalone.compressed.js`` and the CSS at ``css/livevalidation.css``. Feel free to tweak the CSS to your liking\n\nNow you can use the templatetag to validate a form instance::\n\n    {% live_validate form [option=value ...] %}\n    \nWhere the ``form`` is any ``django.forms.Form`` (or subclass) instance. \nThe optional option=value kwargs are in pairs as follows:\n\n-  **validMessage** - message to be used upon successful validation (DEFAULT: \"Thankyou!\")\n-  **onValid** - javascript function name to execute when field passes validation \n-  **onInvalid** - javascript function name to execute when field fails validation\n-  **insertAfterWhatNode** - id of node to have the message inserted after (DEFAULT: the field that is being validated)\n-  **onlyOnBlur** - whether you want it to validate as you type or only on blur (DEFAULT: False)\n-  **wait** - the time you want it to pause from the last keystroke before it validates (milliseconds) (DEFAULT: 0)\n-  **onlyOnSubmit** - if it is part of a form, whether you want it to validate it only when the form is submitted (DEFAULT: False)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/washingtontimes/django-livevalidation", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-livevalidation", "package_url": "https://pypi.org/project/django-livevalidation/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-livevalidation/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/washingtontimes/django-livevalidation"}, "release_url": "https://pypi.org/project/django-livevalidation/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Live validation for Django forms. It validates as you type. Uses scripts from livevalidation.com", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django Live Validation provides quick and easy client-side form validation which validates as you type.\nIt uses the <a href=\"http://livevalidation.com/\" rel=\"nofollow\">Live Validation</a> JS library in conjunction with Django Forms.\nThis is by no means a replacement to Django\u2019s built in form validation, but it is a suppliment which is purely client-side baed which cuts down on server-side requests for validation.\nThis version of django-livevalidation requires Django &gt;= 1.2, for previous versions please use this project: <a href=\"http://opensource.washingtontimes.com/projects/django-livevalidation/\" rel=\"nofollow\">http://opensource.washingtontimes.com/projects/django-livevalidation/</a></p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Place <tt>'livevalidaiton'</tt> into your <tt>INSTALLED_APPS</tt> and make sure it is above the Django admin since it overrides some of the admin templates:</p>\n<pre>INSTALLED_APPS = (\n    'livevalidation',\n    ...\n    'django.contrib.admin',\n)\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use livevalidation in your templates, make sure you load the headers first before doing anything:</p>\n<pre>{% include 'livevalidation/header.html' %}\n</pre>\n<p>This loads the JS library at <tt>js/livevalidation_standalone.compressed.js</tt> and the CSS at <tt>css/livevalidation.css</tt>. Feel free to tweak the CSS to your liking</p>\n<p>Now you can use the templatetag to validate a form instance:</p>\n<pre>{% live_validate form [option=value ...] %}\n</pre>\n<p>Where the <tt>form</tt> is any <tt>django.forms.Form</tt> (or subclass) instance.\nThe optional option=value kwargs are in pairs as follows:</p>\n<ul>\n<li><strong>validMessage</strong> - message to be used upon successful validation (DEFAULT: \u201cThankyou!\u201d)</li>\n<li><strong>onValid</strong> - javascript function name to execute when field passes validation</li>\n<li><strong>onInvalid</strong> - javascript function name to execute when field fails validation</li>\n<li><strong>insertAfterWhatNode</strong> - id of node to have the message inserted after (DEFAULT: the field that is being validated)</li>\n<li><strong>onlyOnBlur</strong> - whether you want it to validate as you type or only on blur (DEFAULT: False)</li>\n<li><strong>wait</strong> - the time you want it to pause from the last keystroke before it validates (milliseconds) (DEFAULT: 0)</li>\n<li><strong>onlyOnSubmit</strong> - if it is part of a form, whether you want it to validate it only when the form is submitted (DEFAULT: False)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 789987, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "6bc7b19e5c809fb40b7bb04adbd90938", "sha256": "0c649030baf9130471d192f91426fdde9306ff4600bcba03055ad4fee50aade4"}, "downloads": -1, "filename": "django-livevalidation-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6bc7b19e5c809fb40b7bb04adbd90938", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47760, "upload_time": "2010-09-02T17:31:34", "upload_time_iso_8601": "2010-09-02T17:31:34.819489Z", "url": "https://files.pythonhosted.org/packages/58/8d/78ca3f3478bfaf04e6ee42717afa577bf53276199e58700d5d014bc45898/django-livevalidation-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6bc7b19e5c809fb40b7bb04adbd90938", "sha256": "0c649030baf9130471d192f91426fdde9306ff4600bcba03055ad4fee50aade4"}, "downloads": -1, "filename": "django-livevalidation-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6bc7b19e5c809fb40b7bb04adbd90938", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47760, "upload_time": "2010-09-02T17:31:34", "upload_time_iso_8601": "2010-09-02T17:31:34.819489Z", "url": "https://files.pythonhosted.org/packages/58/8d/78ca3f3478bfaf04e6ee42717afa577bf53276199e58700d5d014bc45898/django-livevalidation-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:18 2020"}