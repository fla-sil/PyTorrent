{"info": {"author": "Sergey Parshin", "author_email": "s.parshin@yadro.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# py-lspci\n[![Actions Status](https://github.com/YADRO-KNS/py-lspci/workflows/Python%20application/badge.svg)](https://github.com/YADRO-KNS/py-lspci/actions)\n![PyPI - Status](https://img.shields.io/pypi/status/py-lspci.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/py-lspci.svg)\n![PyPI](https://img.shields.io/pypi/v/py-lspci.svg)\n![PyPI - License](https://img.shields.io/pypi/l/py-lspci.svg)\n\n----\npy-lspci \u2013 parser for lspci output on remote or local UNIX machines. \nThis package provides convenient interface to interact with lspci output in form of Python objects.\n\n## Getting Started\n\n### Prerequisites\n\npy-lspci requires python 3.6 or newer versions to run. \nAlso targets that you could interact with py-lspci must have [pciutils](http://mj.ucw.cz/sw/pciutils/) installed \non them.\n\n### Installing \n\nCloning project from git repository\n```bash\ngit clone https://github.com/YADRO-KNS/py-lspci.git\n```\n\nInstalling from PyPi\n```bash\npip3 install py-lspci\n```\n\n## Examples \n\n### Connection\nFirst we have to establish connection to our target as user with sudo privileges:\n```python\nimport pylspci\n\nscanner = pylspci.ScannerPCI(ip='192.168.1.1', username='admin', password='pa$$w0rd')\n```\nIn cases if we targeting local machine we need to provide user password if user isn't root:\n```python\nimport pylspci\n\nscanner = pylspci.ScannerPCI(ip='127.0.0.1', password='pa$$w0rd')\n```\n### Select\nWith *ScannerPCI* object now we can write requests to get data from lspci output, main tool to do that is \n**select** method, that will return *PCISelect* iterator object.\n```\n>>> scanner.select()\n<pylspci.pci_scanner.PCISelect object at 0x7fa1dcda3940>\n```\nSelect will return all PCI devices that matches select request.\n```\n>>> scanner.select().count()\n22\n>>> scanner.select(pci_address='0000:00:00.0').count()\n1\n```\nFor broad select requests you could use asterisk:\n```\n>>> scanner.select(type='Bridge').count()\n0\n>>> scanner.select(type='*Bridge').count()\n10\n```\nUse multiple keyword arguments to specify search. \nYou could search by any attributes or properties of *PCIDevice* class.:\n```\n>>> scanner.select(type='*Bridge', is_upstream=True).count()\n1\n```\nWith *PCISelect* object you could loop over PCI devices that matches search parameters:\n```\n>>> for device in scanner.select(is_downstream=True):\n...     print(device)\n...\n0000:08:00.0 PCI bridge Intel Corporation JHL6240 Thunderbolt 3 Bridge [x4/x4][2.5GT/s/2.5GT/s]\n0000:08:01.0 PCI bridge Intel Corporation JHL6240 Thunderbolt 3 Bridge [x4/x4][2.5GT/s/2.5GT/s]\n0000:08:02.0 PCI bridge Intel Corporation JHL6240 Thunderbolt 3 Bridge [x4/x4][2.5GT/s/2.5GT/s]\n```\nAlso you can chain your select requests:\n```\n>>> scanner.select(type='PCI bridge').count()\n8\n>>> scanner.select(type='PCI bridge').select(is_upstream=True).count()\n1\n```\n### Get\nAnother search method is **get**. Basically it is the same select that will return first matching object\n instead of list of objects or will raise exception in case if there was no matches.\n```\n>>> print(scanner.get(type='*Host'))\n0000:07:00.0 PCI bridge Intel Corporation [x2/x2][8GT/s/8GT/s]\n>>> print(scanner.get(type='*Host', is_upstream=True))\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\n  File \"/home/sergey/PycharmProjects/py-lspci/pylspci/pci_scanner.py\", line 98, in get\n    if parent.is_host_bridge:\npylspci.pci_scanner.DoesNotExist: Unable to find PCI Device matching: {'type': '*Host', 'is_upstream': True}\n```\n### Get Connected\nAnother tool is **get_connected** method of Scanner, that returns *PCISelect* with all devices connected to passed device.\nFor Host Bridge it will return all devices in Root Complex. For Upstream of PCI Bridge - all Downstreams. \nFor Downstream or Root Ports - all connected Upstreams or Endpoints. End for Endpoints it will return empty list.\n\n```\n>>> scanner.get_connected(scanner.get(type='*Host')).count()\n14\n```\npy-lspci uses cached value of lspci output, in case if you need to refresh that data, use *force_rescan* argument, \nfor any of mentioned methods.\n```\n>>> scanner.select(force_rescan=True)\n```\n### PCI rescan procedure\nLast but not least method of *ScannerPCI* is **pci_rescan** that causes full rescan of PCI bus on target machine.\nBe careful with this one, because not all distros support proper PCI rescan.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning.\n\n## Authors\n\n* **[Sergey Parshin](https://github.com/shooshp)** \n\nSee also the list of [contributors](https://github.com/YADRO-KNS/py-lspci/graphs/contributors) who participated in this project.\n\n## License\nThe code is available as open source under the terms of the [MIT License](LICENSE).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/YADRO-KNS/py-lspci", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-lspci", "package_url": "https://pypi.org/project/py-lspci/", "platform": "", "project_url": "https://pypi.org/project/py-lspci/", "project_urls": {"Homepage": "https://github.com/YADRO-KNS/py-lspci"}, "release_url": "https://pypi.org/project/py-lspci/0.0.3/", "requires_dist": ["paramiko (==2.7.1)"], "requires_python": "", "summary": "Parser for lspci output on remote or local machines", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-lspci</h1>\n<p><a href=\"https://github.com/YADRO-KNS/py-lspci/actions\" rel=\"nofollow\"><img alt=\"Actions Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6740cc5ecf22d074c429e8fed3f665afc65b2b52/68747470733a2f2f6769746875622e636f6d2f594144524f2d4b4e532f70792d6c737063692f776f726b666c6f77732f507974686f6e2532306170706c69636174696f6e2f62616467652e737667\"></a>\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/706031ab590e0aa0f48195f0ea17e0cc826b4c1e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f70792d6c737063692e737667\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e21b6150628f728e31a6f92941998cf8bd1a4874/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70792d6c737063692e737667\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9cb7293c5b54c40a05c21509a6051beefb5c044f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70792d6c737063692e737667\">\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/beacac9e1a32b4998f582f93eb754c29657f9b61/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70792d6c737063692e737667\"></p>\n<hr>\n<p>py-lspci \u2013 parser for lspci output on remote or local UNIX machines.\nThis package provides convenient interface to interact with lspci output in form of Python objects.</p>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<p>py-lspci requires python 3.6 or newer versions to run.\nAlso targets that you could interact with py-lspci must have <a href=\"http://mj.ucw.cz/sw/pciutils/\" rel=\"nofollow\">pciutils</a> installed\non them.</p>\n<h3>Installing</h3>\n<p>Cloning project from git repository</p>\n<pre>git clone https://github.com/YADRO-KNS/py-lspci.git\n</pre>\n<p>Installing from PyPi</p>\n<pre>pip3 install py-lspci\n</pre>\n<h2>Examples</h2>\n<h3>Connection</h3>\n<p>First we have to establish connection to our target as user with sudo privileges:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pylspci</span>\n\n<span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"n\">pylspci</span><span class=\"o\">.</span><span class=\"n\">ScannerPCI</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s1\">'192.168.1.1'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'pa$$w0rd'</span><span class=\"p\">)</span>\n</pre>\n<p>In cases if we targeting local machine we need to provide user password if user isn't root:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pylspci</span>\n\n<span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"n\">pylspci</span><span class=\"o\">.</span><span class=\"n\">ScannerPCI</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'pa$$w0rd'</span><span class=\"p\">)</span>\n</pre>\n<h3>Select</h3>\n<p>With <em>ScannerPCI</em> object now we can write requests to get data from lspci output, main tool to do that is\n<strong>select</strong> method, that will return <em>PCISelect</em> iterator object.</p>\n<pre><code>&gt;&gt;&gt; scanner.select()\n&lt;pylspci.pci_scanner.PCISelect object at 0x7fa1dcda3940&gt;\n</code></pre>\n<p>Select will return all PCI devices that matches select request.</p>\n<pre><code>&gt;&gt;&gt; scanner.select().count()\n22\n&gt;&gt;&gt; scanner.select(pci_address='0000:00:00.0').count()\n1\n</code></pre>\n<p>For broad select requests you could use asterisk:</p>\n<pre><code>&gt;&gt;&gt; scanner.select(type='Bridge').count()\n0\n&gt;&gt;&gt; scanner.select(type='*Bridge').count()\n10\n</code></pre>\n<p>Use multiple keyword arguments to specify search.\nYou could search by any attributes or properties of <em>PCIDevice</em> class.:</p>\n<pre><code>&gt;&gt;&gt; scanner.select(type='*Bridge', is_upstream=True).count()\n1\n</code></pre>\n<p>With <em>PCISelect</em> object you could loop over PCI devices that matches search parameters:</p>\n<pre><code>&gt;&gt;&gt; for device in scanner.select(is_downstream=True):\n...     print(device)\n...\n0000:08:00.0 PCI bridge Intel Corporation JHL6240 Thunderbolt 3 Bridge [x4/x4][2.5GT/s/2.5GT/s]\n0000:08:01.0 PCI bridge Intel Corporation JHL6240 Thunderbolt 3 Bridge [x4/x4][2.5GT/s/2.5GT/s]\n0000:08:02.0 PCI bridge Intel Corporation JHL6240 Thunderbolt 3 Bridge [x4/x4][2.5GT/s/2.5GT/s]\n</code></pre>\n<p>Also you can chain your select requests:</p>\n<pre><code>&gt;&gt;&gt; scanner.select(type='PCI bridge').count()\n8\n&gt;&gt;&gt; scanner.select(type='PCI bridge').select(is_upstream=True).count()\n1\n</code></pre>\n<h3>Get</h3>\n<p>Another search method is <strong>get</strong>. Basically it is the same select that will return first matching object\ninstead of list of objects or will raise exception in case if there was no matches.</p>\n<pre><code>&gt;&gt;&gt; print(scanner.get(type='*Host'))\n0000:07:00.0 PCI bridge Intel Corporation [x2/x2][8GT/s/8GT/s]\n&gt;&gt;&gt; print(scanner.get(type='*Host', is_upstream=True))\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n  File \"/home/sergey/PycharmProjects/py-lspci/pylspci/pci_scanner.py\", line 98, in get\n    if parent.is_host_bridge:\npylspci.pci_scanner.DoesNotExist: Unable to find PCI Device matching: {'type': '*Host', 'is_upstream': True}\n</code></pre>\n<h3>Get Connected</h3>\n<p>Another tool is <strong>get_connected</strong> method of Scanner, that returns <em>PCISelect</em> with all devices connected to passed device.\nFor Host Bridge it will return all devices in Root Complex. For Upstream of PCI Bridge - all Downstreams.\nFor Downstream or Root Ports - all connected Upstreams or Endpoints. End for Endpoints it will return empty list.</p>\n<pre><code>&gt;&gt;&gt; scanner.get_connected(scanner.get(type='*Host')).count()\n14\n</code></pre>\n<p>py-lspci uses cached value of lspci output, in case if you need to refresh that data, use <em>force_rescan</em> argument,\nfor any of mentioned methods.</p>\n<pre><code>&gt;&gt;&gt; scanner.select(force_rescan=True)\n</code></pre>\n<h3>PCI rescan procedure</h3>\n<p>Last but not least method of <em>ScannerPCI</em> is <strong>pci_rescan</strong> that causes full rescan of PCI bus on target machine.\nBe careful with this one, because not all distros support proper PCI rescan.</p>\n<h2>Versioning</h2>\n<p>We use <a href=\"http://semver.org/\" rel=\"nofollow\">SemVer</a> for versioning.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong><a href=\"https://github.com/shooshp\" rel=\"nofollow\">Sergey Parshin</a></strong></li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/YADRO-KNS/py-lspci/graphs/contributors\" rel=\"nofollow\">contributors</a> who participated in this project.</p>\n<h2>License</h2>\n<p>The code is available as open source under the terms of the <a href=\"LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 6581125, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "77c5c18f8ba0aeb827d7ae7e6261ca24", "sha256": "ed5fa4bcbc8ec9967c3383f0de96eecadaa5cf24db6f51a02797c2f3c44ac22d"}, "downloads": -1, "filename": "py_lspci-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "77c5c18f8ba0aeb827d7ae7e6261ca24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10766, "upload_time": "2019-11-26T15:52:06", "upload_time_iso_8601": "2019-11-26T15:52:06.442500Z", "url": "https://files.pythonhosted.org/packages/6c/27/918890a70fa01081c863dfbc53452f17b32304ed78beeb30259bf66944c5/py_lspci-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b1404eb0c90eec8c69d45f72cee6bf0", "sha256": "f4679f2f33847db7039488c3fb647b1de2381f1b7085e2748443a59a5085c6d3"}, "downloads": -1, "filename": "py-lspci-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2b1404eb0c90eec8c69d45f72cee6bf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7902, "upload_time": "2019-11-26T15:52:09", "upload_time_iso_8601": "2019-11-26T15:52:09.067399Z", "url": "https://files.pythonhosted.org/packages/9d/e2/35743f3c36b44d629ea78040fb6bc25b7b7532927be6e7ef92d0d8f64b73/py-lspci-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9d3aab63e565239ed0d61d2b58ed6c4a", "sha256": "2076ecede5facd3f81719c0e298995351c159923025db58e9ea37cc0a6f757a4"}, "downloads": -1, "filename": "py_lspci-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9d3aab63e565239ed0d61d2b58ed6c4a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11111, "upload_time": "2019-11-27T11:20:02", "upload_time_iso_8601": "2019-11-27T11:20:02.399094Z", "url": "https://files.pythonhosted.org/packages/13/24/008b17e26af3e7e1cecbea5e653bc77e0eead5fa2db2f33f48320e6c7c12/py_lspci-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af445496aa56b928732e1b74744a0066", "sha256": "4ae5fb769aef365d267390aeab3ff3c22abb29704b6c21dc48fd7db7301c0b3a"}, "downloads": -1, "filename": "py-lspci-0.0.2.tar.gz", "has_sig": false, "md5_digest": "af445496aa56b928732e1b74744a0066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8311, "upload_time": "2019-11-27T11:20:04", "upload_time_iso_8601": "2019-11-27T11:20:04.976578Z", "url": "https://files.pythonhosted.org/packages/15/1f/355685d14e4797c51fe6de441978f5e6fafe9523b82e1f762909469e496c/py-lspci-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "5667ced32966b8a172f734e660286513", "sha256": "bb2a19df900e858cd2a0cb61f9c673b3d90fd559dfe6d0e345f72665d3efd6a3"}, "downloads": -1, "filename": "py_lspci-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5667ced32966b8a172f734e660286513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11055, "upload_time": "2020-02-06T10:16:17", "upload_time_iso_8601": "2020-02-06T10:16:17.290005Z", "url": "https://files.pythonhosted.org/packages/e6/11/fdf971d41f78e49050fb3321857691904028805f67d0b279439a8f4d083b/py_lspci-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6498b307e9c9abeceedab50bc656c21d", "sha256": "d305d452e4d721650db0db1c1ef6b4c5c875e39af27ac0647914b98729a11838"}, "downloads": -1, "filename": "py-lspci-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6498b307e9c9abeceedab50bc656c21d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8279, "upload_time": "2020-02-06T10:16:20", "upload_time_iso_8601": "2020-02-06T10:16:20.486553Z", "url": "https://files.pythonhosted.org/packages/03/ea/d8c608018a1f827cde45bb534214f8bef35dacc4b843f919646d0713dde3/py-lspci-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5667ced32966b8a172f734e660286513", "sha256": "bb2a19df900e858cd2a0cb61f9c673b3d90fd559dfe6d0e345f72665d3efd6a3"}, "downloads": -1, "filename": "py_lspci-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5667ced32966b8a172f734e660286513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11055, "upload_time": "2020-02-06T10:16:17", "upload_time_iso_8601": "2020-02-06T10:16:17.290005Z", "url": "https://files.pythonhosted.org/packages/e6/11/fdf971d41f78e49050fb3321857691904028805f67d0b279439a8f4d083b/py_lspci-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6498b307e9c9abeceedab50bc656c21d", "sha256": "d305d452e4d721650db0db1c1ef6b4c5c875e39af27ac0647914b98729a11838"}, "downloads": -1, "filename": "py-lspci-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6498b307e9c9abeceedab50bc656c21d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8279, "upload_time": "2020-02-06T10:16:20", "upload_time_iso_8601": "2020-02-06T10:16:20.486553Z", "url": "https://files.pythonhosted.org/packages/03/ea/d8c608018a1f827cde45bb534214f8bef35dacc4b843f919646d0713dde3/py-lspci-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:45 2020"}