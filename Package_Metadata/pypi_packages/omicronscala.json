{"info": {"author": "Mirco Panighel", "author_email": "panighel@iom.cnr.it", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# omicronscala\n\nA python package to read .par SCALA files from Omicron.\n\nIntroduction\n============\nThis pure Python package read .par SCALA files from Omicron.\n\nInstallation\n============\n\n```\n    pip install omicronscala\n```\n\nUsage\n=====\n\nThe recommended import\n\n```\n    import omicronscala\n```\nSee the docstring help for more detailed information.\n\nLoading\n-------\n\nTo load a .par file\n\n```\n    f = omicronscala.load('path/to/file.par)\n```\nThe instance f is a container of channels, which can be accessed by key,\nand each channel has its own attributes:\n\n```\n    ch = f[0]\n    ch.data\n    ch.attrs\n    ch.name\n```\n\nxarray dataset\n--------------\n\nThe .par file can be conveniently loaded as an xarray Dataset\n(provided that xarray package is installed):\n\n```\n    ds = omicronscala.to_dataset('path/to/file.par')\n    ds.Z_Forward\n```\n\nNeXuS export\n------------\n\nThe .par file can be converted and saved to NeXuS file with\n(nxarray package is required):\n\n```\n    omicronscala.to_nexus('path/to/file.par')\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/mpanighel/omicronscala", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "omicronscala", "package_url": "https://pypi.org/project/omicronscala/", "platform": "", "project_url": "https://pypi.org/project/omicronscala/", "project_urls": {"Homepage": "https://gitlab.com/mpanighel/omicronscala"}, "release_url": "https://pypi.org/project/omicronscala/0.0.1/", "requires_dist": ["numpy"], "requires_python": ">=3.5", "summary": "A python package to read and parse .par files from Omicron.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>omicronscala</h1>\n<p>A python package to read .par SCALA files from Omicron.</p>\n<h1>Introduction</h1>\n<p>This pure Python package read .par SCALA files from Omicron.</p>\n<h1>Installation</h1>\n<pre><code>    pip install omicronscala\n</code></pre>\n<h1>Usage</h1>\n<p>The recommended import</p>\n<pre><code>    import omicronscala\n</code></pre>\n<p>See the docstring help for more detailed information.</p>\n<h2>Loading</h2>\n<p>To load a .par file</p>\n<pre><code>    f = omicronscala.load('path/to/file.par)\n</code></pre>\n<p>The instance f is a container of channels, which can be accessed by key,\nand each channel has its own attributes:</p>\n<pre><code>    ch = f[0]\n    ch.data\n    ch.attrs\n    ch.name\n</code></pre>\n<h2>xarray dataset</h2>\n<p>The .par file can be conveniently loaded as an xarray Dataset\n(provided that xarray package is installed):</p>\n<pre><code>    ds = omicronscala.to_dataset('path/to/file.par')\n    ds.Z_Forward\n</code></pre>\n<h2>NeXuS export</h2>\n<p>The .par file can be converted and saved to NeXuS file with\n(nxarray package is required):</p>\n<pre><code>    omicronscala.to_nexus('path/to/file.par')\n</code></pre>\n\n          </div>"}, "last_serial": 7118237, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "117a1a6bf77917d6beb47f419f2ae381", "sha256": "841f13a83e1d29b7353189a26a19c88c44711701949214c7d2acb7bf9d42306c"}, "downloads": -1, "filename": "omicronscala-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "117a1a6bf77917d6beb47f419f2ae381", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6234, "upload_time": "2020-04-28T08:35:08", "upload_time_iso_8601": "2020-04-28T08:35:08.510029Z", "url": "https://files.pythonhosted.org/packages/88/d0/448b9447aaaf46ac247f1b2642c1a4a139febfe029e016752a98aa5e2ca8/omicronscala-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91f1c6aa884603ff1e0d1659baf83de2", "sha256": "4c65794a359cf1a3aa4ca7b549ef4dfc2ab33db611f1039bc698a9bdea441ed3"}, "downloads": -1, "filename": "omicronscala-0.0.1.tar.gz", "has_sig": false, "md5_digest": "91f1c6aa884603ff1e0d1659baf83de2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4639, "upload_time": "2020-04-28T08:35:10", "upload_time_iso_8601": "2020-04-28T08:35:10.550378Z", "url": "https://files.pythonhosted.org/packages/16/57/a580c74bfee6ef043e3a168bec4118a6f7451418960e211e8e60fe3f5f23/omicronscala-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "117a1a6bf77917d6beb47f419f2ae381", "sha256": "841f13a83e1d29b7353189a26a19c88c44711701949214c7d2acb7bf9d42306c"}, "downloads": -1, "filename": "omicronscala-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "117a1a6bf77917d6beb47f419f2ae381", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6234, "upload_time": "2020-04-28T08:35:08", "upload_time_iso_8601": "2020-04-28T08:35:08.510029Z", "url": "https://files.pythonhosted.org/packages/88/d0/448b9447aaaf46ac247f1b2642c1a4a139febfe029e016752a98aa5e2ca8/omicronscala-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91f1c6aa884603ff1e0d1659baf83de2", "sha256": "4c65794a359cf1a3aa4ca7b549ef4dfc2ab33db611f1039bc698a9bdea441ed3"}, "downloads": -1, "filename": "omicronscala-0.0.1.tar.gz", "has_sig": false, "md5_digest": "91f1c6aa884603ff1e0d1659baf83de2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4639, "upload_time": "2020-04-28T08:35:10", "upload_time_iso_8601": "2020-04-28T08:35:10.550378Z", "url": "https://files.pythonhosted.org/packages/16/57/a580c74bfee6ef043e3a168bec4118a6f7451418960e211e8e60fe3f5f23/omicronscala-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:31 2020"}