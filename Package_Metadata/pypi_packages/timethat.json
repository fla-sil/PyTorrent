{"info": {"author": "Mehmet Ozgur Bayhan", "author_email": "mozgurbayhan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Bug Tracking"], "description": "# Time That\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n[![PyPI version](https://img.shields.io/pypi/v/timethat)](https://pypi.org/project/timethat/)\n[![PyPI - Downloads](https://pepy.tech/badge/timethat)](https://pepy.tech/project/timethat)\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/timethat)](https://pypi.org/project/timethat/)\n[![pylint status](https://gitlab.com/mozgurbayhan/timethat/-/jobs/artifacts/master/raw/pylint/pylint.svg?job=pylint)](https://gitlab.com/mozgurbayhan/timethat/commits/master)\n[![coverage report](https://gitlab.com/mozgurbayhan/timethat/badges/master/coverage.svg)](https://gitlab.com/mozgurbayhan/timethat/commits/master)\n[![pipeline status](https://gitlab.com/mozgurbayhan/timethat/badges/master/pipeline.svg)](https://gitlab.com/mozgurbayhan/timethat/commits/master)\n\nA human friendly time calculator for functions and code blocks\n## Install\n\n```bash\npip install timethat\n```\n\n## Usage\n\n\n### 1) You can use it directly for functions\n\n```python\nfrom timethat import TimedFunction\nfrom time import sleep\n\n@TimedFunction()\ndef suspicious_function():\n    time.sleep(1)\n\nif __name__ == '__main__':\n    suspicious_function()\n\n```\n**results:**\n\n>TimeThat ->    1.00 sec. -> suspicious_function\n\n**TimedFunction optional parameters**:\n\n**tag**: use tag instead of function name\n\n**talk**: directly echo or echo in results\n\nFor example: @TimedFunction(tag=\"CustomTag\", talk:False)\n\n### 2) Or you can use it in wherever you want\n\n```python\nfrom timethat import TimeThat\nfrom time import sleep\n\ndef suspicious_function():\n    TimeThat.start(\"X1\")\n    for x in range(100):\n    \tsleep(1)\n    \tkiller_loop = True    \n    TimeThat.stop(\"X1\")\n\nif __name__ == '__main__':\n    suspicious_function()\n\n```\n\nresults:\n\n>TimeThat ->    3.00 sec. -> X1\n\n**Stop optional parameters**:\n\n**talk**:  echo directly if true else echo later\n\n### 3) Or you can use it to measure total calculations\n\n```python\nfrom timethat import TimeThat\nfrom time import sleep\n\ndef suspicious_function():\n    for x in range(3):\n        TimeThat.start(\"X1\")\n        sleep(0.3)\n        killer_loop = True\n        TimeThat.stop(\"X1\",talk=False)\n\n    for x in range(3):\n        TimeThat.start(\"X2\")\n        sleep(1)\n        killer_loop = True\n        TimeThat.stop(\"X2\",talk=False)\n\n    TimeThat.summary()\n\nif __name__ == '__main__':\n    suspicious_function()\n\n```\n\nresults:\n\n>TimeThat -> Total:    0.90 sec, Average:    0.30 sec, Count:   3  -> X1\n>\n>TimeThat -> Total:    3.00 sec, Average:    1.00 sec, Count:   3  -> X2\n\n\n**Summary optional parameters**:\n\n**tags:** echos all timers if None else only echo given timers\n\n**reset:** resets all timers\n\n### 4) And you can use logging instead of printout\n\n```python\nimport timethat\ntimethat.TALK_TO_LOG = True\n# Now it will print out to logging instead of console\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/mozgurbayhan/timethat", "keywords": "time  development tracker debug", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "timethat", "package_url": "https://pypi.org/project/timethat/", "platform": "", "project_url": "https://pypi.org/project/timethat/", "project_urls": {"Bug Reports": "https://gitlab.com/mozgurbayhan/timethat/issues", "Funding": "https://www.losev.org.tr/bagis/Bagis.html", "Homepage": "https://gitlab.com/mozgurbayhan/timethat", "Say Thanks!": "https://gitlab.com/mozgurbayhan/timethat", "Source": "https://gitlab.com/mozgurbayhan/timethat"}, "release_url": "https://pypi.org/project/timethat/1.1.5/", "requires_dist": null, "requires_python": ">=3", "summary": "A human friendly time calculator for functions and code blocks", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Time That</h1>\n<p><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68a99107ffdf24c5fb2cc4bca38b7b662e501b97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d3166343235662e737667\"></a>\n<a href=\"https://pypi.org/project/timethat/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/481858bb5e25e73d21f6cf48133813a334a24742/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696d6574686174\"></a>\n<a href=\"https://pepy.tech/project/timethat\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f0fac6d2ad10976f0ab0bbb20bd532b8eb7c6b36/68747470733a2f2f706570792e746563682f62616467652f74696d6574686174\"></a>\n<a href=\"https://pypi.org/project/timethat/\" rel=\"nofollow\"><img alt=\"PyPI - Implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f64fbeffa17f1f019aaf98a3c2042a101c14c1d0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f74696d6574686174\"></a>\n<a href=\"https://gitlab.com/mozgurbayhan/timethat/commits/master\" rel=\"nofollow\"><img alt=\"pylint status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a890af58111bba583f4526cc4e6e68e05b6b2252/68747470733a2f2f6769746c61622e636f6d2f6d6f7a67757262617968616e2f74696d65746861742f2d2f6a6f62732f6172746966616374732f6d61737465722f7261772f70796c696e742f70796c696e742e7376673f6a6f623d70796c696e74\"></a>\n<a href=\"https://gitlab.com/mozgurbayhan/timethat/commits/master\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c7d4f71adcab38f1b6a960690dd6dfb6101ebc8/68747470733a2f2f6769746c61622e636f6d2f6d6f7a67757262617968616e2f74696d65746861742f6261646765732f6d61737465722f636f7665726167652e737667\"></a>\n<a href=\"https://gitlab.com/mozgurbayhan/timethat/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/041f14b12f30ffbe48263c71a25c1f7a34d00dc8/68747470733a2f2f6769746c61622e636f6d2f6d6f7a67757262617968616e2f74696d65746861742f6261646765732f6d61737465722f706970656c696e652e737667\"></a></p>\n<p>A human friendly time calculator for functions and code blocks</p>\n<h2>Install</h2>\n<pre>pip install timethat\n</pre>\n<h2>Usage</h2>\n<h3>1) You can use it directly for functions</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timethat</span> <span class=\"kn\">import</span> <span class=\"n\">TimedFunction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"nd\">@TimedFunction</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">suspicious_function</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">suspicious_function</span><span class=\"p\">()</span>\n</pre>\n<p><strong>results:</strong></p>\n<blockquote>\n<p>TimeThat -&gt;    1.00 sec. -&gt; suspicious_function</p>\n</blockquote>\n<p><strong>TimedFunction optional parameters</strong>:</p>\n<p><strong>tag</strong>: use tag instead of function name</p>\n<p><strong>talk</strong>: directly echo or echo in results</p>\n<p>For example: @TimedFunction(tag=\"CustomTag\", talk:False)</p>\n<h3>2) Or you can use it in wherever you want</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timethat</span> <span class=\"kn\">import</span> <span class=\"n\">TimeThat</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">suspicious_function</span><span class=\"p\">():</span>\n    <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s2\">\"X1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n    \t<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    \t<span class=\"n\">killer_loop</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>    \n    <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s2\">\"X1\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">suspicious_function</span><span class=\"p\">()</span>\n</pre>\n<p>results:</p>\n<blockquote>\n<p>TimeThat -&gt;    3.00 sec. -&gt; X1</p>\n</blockquote>\n<p><strong>Stop optional parameters</strong>:</p>\n<p><strong>talk</strong>:  echo directly if true else echo later</p>\n<h3>3) Or you can use it to measure total calculations</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timethat</span> <span class=\"kn\">import</span> <span class=\"n\">TimeThat</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">suspicious_function</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s2\">\"X1\"</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n        <span class=\"n\">killer_loop</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s2\">\"X1\"</span><span class=\"p\">,</span><span class=\"n\">talk</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s2\">\"X2\"</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">killer_loop</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s2\">\"X2\"</span><span class=\"p\">,</span><span class=\"n\">talk</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">TimeThat</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">suspicious_function</span><span class=\"p\">()</span>\n</pre>\n<p>results:</p>\n<blockquote>\n<p>TimeThat -&gt; Total:    0.90 sec, Average:    0.30 sec, Count:   3  -&gt; X1</p>\n<p>TimeThat -&gt; Total:    3.00 sec, Average:    1.00 sec, Count:   3  -&gt; X2</p>\n</blockquote>\n<p><strong>Summary optional parameters</strong>:</p>\n<p><strong>tags:</strong> echos all timers if None else only echo given timers</p>\n<p><strong>reset:</strong> resets all timers</p>\n<h3>4) And you can use logging instead of printout</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timethat</span>\n<span class=\"n\">timethat</span><span class=\"o\">.</span><span class=\"n\">TALK_TO_LOG</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"c1\"># Now it will print out to logging instead of console</span>\n</pre>\n\n          </div>"}, "last_serial": 6335334, "releases": {"1.0.6": [{"comment_text": "", "digests": {"md5": "a455a01a6d7a85194640da3b54eee303", "sha256": "57fde1b515fd383ddf97c5ef5af29877b98ee8857151bd1d5346e95e2efd7e6c"}, "downloads": -1, "filename": "timethat-1.0.6.tar.gz", "has_sig": false, "md5_digest": "a455a01a6d7a85194640da3b54eee303", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3743, "upload_time": "2019-11-17T19:48:18", "upload_time_iso_8601": "2019-11-17T19:48:18.758486Z", "url": "https://files.pythonhosted.org/packages/a9/e2/f2131e776dbd2fc5e0f32505947e002324170a6d303ccbe801f385d9b807/timethat-1.0.6.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "256f9699a45b4d3878a7b8071342b0d2", "sha256": "7f4b1418ff9cb9cc492ebd22bb507bedcfb647f23a60cc86fe3c2cd86fede4a9"}, "downloads": -1, "filename": "timethat-1.1.1.tar.gz", "has_sig": false, "md5_digest": "256f9699a45b4d3878a7b8071342b0d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3294, "upload_time": "2019-12-07T22:45:47", "upload_time_iso_8601": "2019-12-07T22:45:47.831046Z", "url": "https://files.pythonhosted.org/packages/25/35/2dc1e80f578cca54dd2b2a39480d4c27e6c5cacbc0ea0dabeaf02cf6f602/timethat-1.1.1.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "9bee080c694fc607a4931e3bb4bb76a0", "sha256": "4fd616c5bfdbb533a1d093fbe3256c130ef564d2bca77b4fc1db8f97b54dcf84"}, "downloads": -1, "filename": "timethat-1.1.5.tar.gz", "has_sig": false, "md5_digest": "9bee080c694fc607a4931e3bb4bb76a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4538, "upload_time": "2019-12-19T21:17:22", "upload_time_iso_8601": "2019-12-19T21:17:22.534772Z", "url": "https://files.pythonhosted.org/packages/62/cf/a27710ad24874bd94beeaa113ce8a099aa00d01d5a3cbfe70004feabf6b9/timethat-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9bee080c694fc607a4931e3bb4bb76a0", "sha256": "4fd616c5bfdbb533a1d093fbe3256c130ef564d2bca77b4fc1db8f97b54dcf84"}, "downloads": -1, "filename": "timethat-1.1.5.tar.gz", "has_sig": false, "md5_digest": "9bee080c694fc607a4931e3bb4bb76a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4538, "upload_time": "2019-12-19T21:17:22", "upload_time_iso_8601": "2019-12-19T21:17:22.534772Z", "url": "https://files.pythonhosted.org/packages/62/cf/a27710ad24874bd94beeaa113ce8a099aa00d01d5a3cbfe70004feabf6b9/timethat-1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:22 2020"}