{"info": {"author": "Mitchel Cabuloy", "author_email": "mixxorz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# django-service-objects [![Latest Version][latest-version-image]][latest-version-link]\n[![Build Status][build-status-image]][build-status-link] \n[![Python Support][python-support-image]][python-support-link]\n[![PyPI - Django Version][django-version-image]][django-link]\n[![License][license-image]][license-link]\n\nService objects for Django\n\n## What?\n\nThis is a small library providing a `Service` base class to derive your service objects from. What are service objects? You can read more about the whys and hows in [this blog post](http://mitchel.me/2017/django-service-objects/), but for the most part, it encapsulates your business logic, decoupling it from your views and model methods. Put your business logic in service objects.\n\n## Installation guide\n\nInstall from pypi:\n\n`pip install django-service-objects`\n\nAdd `service_objects` to your `INSTALLED_APPS`:\n\n```python\n# settings.py\n\nINSTALLED_APPS = (\n    ...\n    'service_objects',\n    ...\n)\n```\n\n## Example\n\nLet's say you want to register new users. You could make a `CreateUser` service.\n\n```python\nfrom django import forms\n\nfrom service_objects.services import Service\n\nclass CreateUser(Service):\n    email = forms.EmailField()\n    password = forms.CharField(max_length=255)\n    subscribe_to_newsletter = forms.BooleanField(required=False)\n\n    def process(self):\n        email = self.cleaned_data['email']\n        password = self.cleaned_data['password']\n        subscribe_to_newsletter = self.cleaned_data['subscribe_to_newsletter']\n\n        self.user = User.objects.create_user(username=email, email=email, password=password)\n        self.subscribe_to_newsletter = subscribe_to_newsletter\n\n        if self.subscribe_to_newsletter:\n            newsletter = Newsletter.objects.get()\n            newsletter.subscribers.add(self.user)\n            newsletter.save()\n            \n        return self.user\n    \n    def post_process(self):\n        WelcomeEmail.send(self.user, is_subscribed=self.subsribe_to_newsletter)\n        \n        # Calling a celery task after successfully creating the user.\n        create_billing_account.delay(self.user.id)\n```\n\nNotice that it's basically a Django form but with a `process` method. This method gets called when you call `execute()` on the process. If your inputs are invalid, it raises `InvalidInputsError`.\n\nThe newly added `post_process` can also be included for running extra tasks that need to be executed after the service completes.\n\nHere's how you use it:\n\n```python\nCreateUser.execute({\n    'email': 'kvothe@edemaruh.com',\n    'password': 'doorsofstone',\n    'subscribe_to_newsletter': True,\n})\n```\n\nNow you can use it anywhere.\n\nIn your views\n\n```python\n# views.py\n\n# Function Based View\ndef create_user_view(request):\n    form = NewUserForm()\n    if request.method == 'POST':\n        form = NewUserForm(request.POST)\n\n        if form.is_valid():\n            try:\n                CreateUser.execute(request.POST)\n                return redirect('/success/')\n            except Exception:\n                form.add_error(None, 'Something went wrong')\n\n    return render(request, 'registration/new-user.html', {'form': form})\n\n\n# Class Based View\nclass CreateUserView(ServiceView):\n    form_class = NewUserForm\n    service_class = CreateUser\n    template_name = 'registration/new-user.html'\n    success_url = '/success/'\n\n```\n\nA management command\n\n```python\n# management/commands/create_user.py\n\nclass Command(BaseCommand):\n    help = \"Creates a new user\"\n\n    def add_arguments(self, parser):\n        parser.add_argument('email')\n        parser.add_argument('password')\n\n    def handle(self, *args, **options):\n        user = CreateUser.execute(options)\n        self.stdout.write(f'New user created : {user.email}')\n\n```\n\nIn your tests\n\n```python\nclass CreateUserTest(TestCase):\n\n    def test_create_user(self):\n        inputs = {\n            'email': 'kvothe@edemaruh.com',\n            'password': 'do0r$0f$stone42',\n            'subscribe_to_newsletter': True,\n        }\n\n        CreateUser.execute(inputs)\n\n        user = User.objects.get()\n        self.assertEqual(user.email, inputs['email'])\n\n        newsletter = Newsletter.objects.get()\n        self.assertIn(user, newsletter.subscribers.all())\n```\n\nAnd anywhere you want. You can even execute services inside other services. The possibilities are endless!\n\n## Documentation\n\nDocs can be found on [readthedocs](http://django-service-objects.readthedocs.io/en/stable/).\n\nIf you have any questions about service objects, you can tweet me [@mixxorz](https://twitter.com/mixxorz).\n\n[latest-version-image]: https://img.shields.io/pypi/v/django-service-objects.svg\n[latest-version-link]: https://pypi.org/project/django-service-objects/\n[build-status-image]: https://img.shields.io/travis/mixxorz/django-service-objects/master.svg\n[build-status-link]: https://travis-ci.org/mixxorz/django-service-objects\n[python-support-image]: https://img.shields.io/pypi/pyversions/django-service-objects.svg\n[python-support-link]: https://pypi.org/project/django-service-objects/\n[django-version-image]: https://img.shields.io/pypi/djversions/django_service_objects.svg\n[django-link]: https://docs.djangoproject.com/en/3.0/releases/\n[license-image]: https://img.shields.io/pypi/l/django-service-objects.svg\n[license-link]: https://github.com/mixxorz/django-service-objects/blob/master/LICENSE", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mixxorz/django-service-objects", "keywords": "", "license": "MIT License", "maintainer": "Mitchel Cabuloy", "maintainer_email": "mixxorz@gmail.com", "name": "django-service-objects", "package_url": "https://pypi.org/project/django-service-objects/", "platform": "", "project_url": "https://pypi.org/project/django-service-objects/", "project_urls": {"Homepage": "https://github.com/mixxorz/django-service-objects"}, "release_url": "https://pypi.org/project/django-service-objects/0.7.0/", "requires_dist": null, "requires_python": "", "summary": "Service objects for Django", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-service-objects <a href=\"https://pypi.org/project/django-service-objects/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2bbcdbd0cf7823967ebc6cf5bb83ec056bf4c804/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d736572766963652d6f626a656374732e737667\"></a></h1>\n<p><a href=\"https://travis-ci.org/mixxorz/django-service-objects\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4da2c05b599e002c98c385a8086389ad4d84766d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6978786f727a2f646a616e676f2d736572766963652d6f626a656374732f6d61737465722e737667\"></a>\n<a href=\"https://pypi.org/project/django-service-objects/\" rel=\"nofollow\"><img alt=\"Python Support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/564433d5eda511c7ac637295b19c6b95da00182c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d736572766963652d6f626a656374732e737667\"></a>\n<a href=\"https://docs.djangoproject.com/en/3.0/releases/\" rel=\"nofollow\"><img alt=\"PyPI - Django Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e612bdc880b46edf1385e5d081ab907ccaabe77/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646a76657273696f6e732f646a616e676f5f736572766963655f6f626a656374732e737667\"></a>\n<a href=\"https://github.com/mixxorz/django-service-objects/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/596ef92b77e8ef85e8048a37972b2f11ebf5c7ff/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d736572766963652d6f626a656374732e737667\"></a></p>\n<p>Service objects for Django</p>\n<h2>What?</h2>\n<p>This is a small library providing a <code>Service</code> base class to derive your service objects from. What are service objects? You can read more about the whys and hows in <a href=\"http://mitchel.me/2017/django-service-objects/\" rel=\"nofollow\">this blog post</a>, but for the most part, it encapsulates your business logic, decoupling it from your views and model methods. Put your business logic in service objects.</p>\n<h2>Installation guide</h2>\n<p>Install from pypi:</p>\n<p><code>pip install django-service-objects</code></p>\n<p>Add <code>service_objects</code> to your <code>INSTALLED_APPS</code>:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'service_objects'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Example</h2>\n<p>Let's say you want to register new users. You could make a <code>CreateUser</code> service.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">service_objects.services</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CreateUser</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">subscribe_to_newsletter</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">]</span>\n        <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">]</span>\n        <span class=\"n\">subscribe_to_newsletter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'subscribe_to_newsletter'</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subscribe_to_newsletter</span> <span class=\"o\">=</span> <span class=\"n\">subscribe_to_newsletter</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subscribe_to_newsletter</span><span class=\"p\">:</span>\n            <span class=\"n\">newsletter</span> <span class=\"o\">=</span> <span class=\"n\">Newsletter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n            <span class=\"n\">newsletter</span><span class=\"o\">.</span><span class=\"n\">subscribers</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n            <span class=\"n\">newsletter</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n            \n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">post_process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">WelcomeEmail</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">is_subscribed</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subsribe_to_newsletter</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># Calling a celery task after successfully creating the user.</span>\n        <span class=\"n\">create_billing_account</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<p>Notice that it's basically a Django form but with a <code>process</code> method. This method gets called when you call <code>execute()</code> on the process. If your inputs are invalid, it raises <code>InvalidInputsError</code>.</p>\n<p>The newly added <code>post_process</code> can also be included for running extra tasks that need to be executed after the service completes.</p>\n<p>Here's how you use it:</p>\n<pre><span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">({</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'kvothe@edemaruh.com'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'doorsofstone'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'subscribe_to_newsletter'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Now you can use it anywhere.</p>\n<p>In your views</p>\n<pre><span class=\"c1\"># views.py</span>\n\n<span class=\"c1\"># Function Based View</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_user_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">NewUserForm</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">'POST'</span><span class=\"p\">:</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">NewUserForm</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s1\">'/success/'</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">add_error</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'Something went wrong'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'registration/new-user.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'form'</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">})</span>\n\n\n<span class=\"c1\"># Class Based View</span>\n<span class=\"k\">class</span> <span class=\"nc\">CreateUserView</span><span class=\"p\">(</span><span class=\"n\">ServiceView</span><span class=\"p\">):</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">NewUserForm</span>\n    <span class=\"n\">service_class</span> <span class=\"o\">=</span> <span class=\"n\">CreateUser</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'registration/new-user.html'</span>\n    <span class=\"n\">success_url</span> <span class=\"o\">=</span> <span class=\"s1\">'/success/'</span>\n</pre>\n<p>A management command</p>\n<pre><span class=\"c1\"># management/commands/create_user.py</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s2\">\"Creates a new user\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'New user created : </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>In your tests</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CreateUserTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_create_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'kvothe@edemaruh.com'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'do0r$0f$stone42'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'subscribe_to_newsletter'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">])</span>\n\n        <span class=\"n\">newsletter</span> <span class=\"o\">=</span> <span class=\"n\">Newsletter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIn</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">newsletter</span><span class=\"o\">.</span><span class=\"n\">subscribers</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n</pre>\n<p>And anywhere you want. You can even execute services inside other services. The possibilities are endless!</p>\n<h2>Documentation</h2>\n<p>Docs can be found on <a href=\"http://django-service-objects.readthedocs.io/en/stable/\" rel=\"nofollow\">readthedocs</a>.</p>\n<p>If you have any questions about service objects, you can tweet me <a href=\"https://twitter.com/mixxorz\" rel=\"nofollow\">@mixxorz</a>.</p>\n\n          </div>"}, "last_serial": 7081733, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9e105b72883fd4f15aef13473151792b", "sha256": "df730b7e4c8eee6ee7d7ff14a01110807ca5bc79da34be8cca2fb7576623e74a"}, "downloads": -1, "filename": "django-service-objects-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9e105b72883fd4f15aef13473151792b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2230, "upload_time": "2017-08-13T16:33:05", "upload_time_iso_8601": "2017-08-13T16:33:05.051852Z", "url": "https://files.pythonhosted.org/packages/ae/55/4aba42e301b5003b5cb43dac782917b49080619b1847166ba0e2d70d32b6/django-service-objects-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4a3866b984fd1cfa1fb7065653b66f61", "sha256": "6684bb448d02d536737171f8bb8c4f1d066d0ec051f82b8f92c16f932b956e30"}, "downloads": -1, "filename": "django-service-objects-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4a3866b984fd1cfa1fb7065653b66f61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3730, "upload_time": "2017-09-02T05:38:12", "upload_time_iso_8601": "2017-09-02T05:38:12.776242Z", "url": "https://files.pythonhosted.org/packages/60/b7/91c5081fe528857ab8b728e53b6ec143190715bcf7d4b4672f7a6d1303f8/django-service-objects-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "dc9aa6ae7380b47704bead5376c56471", "sha256": "296a89fab23592eb7db0a4494df05333407faa767934df8ca0e62d8944e5e855"}, "downloads": -1, "filename": "django-service-objects-0.3.0.tar.gz", "has_sig": false, "md5_digest": "dc9aa6ae7380b47704bead5376c56471", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3816, "upload_time": "2017-12-14T08:08:32", "upload_time_iso_8601": "2017-12-14T08:08:32.399210Z", "url": "https://files.pythonhosted.org/packages/9b/26/9edd99d1be9e0b0e3c91b2714f383ece39283f93e0ba6218793143d5a871/django-service-objects-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0c21135ae77854efdefe9c315c3451ef", "sha256": "73d73cb586a8113ba43fe092438892e31abd8e647800b5770dab99abddfd38da"}, "downloads": -1, "filename": "django-service-objects-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0c21135ae77854efdefe9c315c3451ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3819, "upload_time": "2017-12-30T03:33:42", "upload_time_iso_8601": "2017-12-30T03:33:42.491596Z", "url": "https://files.pythonhosted.org/packages/fa/24/1e3ba468eb916393edc7b3cf278c052e662f29e415cb869c69c2b7924d60/django-service-objects-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2edcfa03e43e27d3de9dc2cc85e05c94", "sha256": "4970c5aee725566f91aae95dd78da151a242edaae3e0c332a51688de059d5763"}, "downloads": -1, "filename": "django-service-objects-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2edcfa03e43e27d3de9dc2cc85e05c94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6562, "upload_time": "2018-03-30T12:30:55", "upload_time_iso_8601": "2018-03-30T12:30:55.321357Z", "url": "https://files.pythonhosted.org/packages/1e/36/205b648b6b00ef5e3d860f2a59910f5355ce7ea93200e379d374892ff3dd/django-service-objects-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "e8ceb0c69728372d2bfa71dd09ca4029", "sha256": "15b8bcf1cdb90d3d3f9873721792410da4e31504a90de99fca4e6ad8c14dcae9"}, "downloads": -1, "filename": "django-service-objects-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e8ceb0c69728372d2bfa71dd09ca4029", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8354, "upload_time": "2018-08-27T06:32:29", "upload_time_iso_8601": "2018-08-27T06:32:29.595985Z", "url": "https://files.pythonhosted.org/packages/b9/80/3028c1064ee50591949f21a690476b8b86517c2d209420329024a9e5abbd/django-service-objects-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b32acb14799fee2bef94348f325f99e6", "sha256": "e6260aeefc21d1da32590a647bcc13ed24d39205502b56445566e70177271644"}, "downloads": -1, "filename": "django-service-objects-0.6.0.tar.gz", "has_sig": false, "md5_digest": "b32acb14799fee2bef94348f325f99e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9501, "upload_time": "2020-01-03T13:54:07", "upload_time_iso_8601": "2020-01-03T13:54:07.488664Z", "url": "https://files.pythonhosted.org/packages/89/ae/cca2f14426ed1d3d9cb8a3fdd7fbb25b9e3feea6fc7d1527ab2f9d73403d/django-service-objects-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "f5cab5d6fa42911261a38b60b3e6bdf1", "sha256": "42be7b09c5df229951d849c99cd7efc414e01caa15c3b652ba5e668a35f18888"}, "downloads": -1, "filename": "django-service-objects-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f5cab5d6fa42911261a38b60b3e6bdf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10841, "upload_time": "2020-04-23T04:58:05", "upload_time_iso_8601": "2020-04-23T04:58:05.310620Z", "url": "https://files.pythonhosted.org/packages/bc/07/0bf4af701b0ae8cd9a8b66251e968ff8169cad2ff3adb54088da261d0707/django-service-objects-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5cab5d6fa42911261a38b60b3e6bdf1", "sha256": "42be7b09c5df229951d849c99cd7efc414e01caa15c3b652ba5e668a35f18888"}, "downloads": -1, "filename": "django-service-objects-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f5cab5d6fa42911261a38b60b3e6bdf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10841, "upload_time": "2020-04-23T04:58:05", "upload_time_iso_8601": "2020-04-23T04:58:05.310620Z", "url": "https://files.pythonhosted.org/packages/bc/07/0bf4af701b0ae8cd9a8b66251e968ff8169cad2ff3adb54088da261d0707/django-service-objects-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:35 2020"}