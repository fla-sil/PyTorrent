{"info": {"author": "Ali Farouk", "author_email": "alifarouk102@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "# django-webpack-loader\n\n[![Join the chat at https://gitter.im/owais/django-webpack-loader](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/owais/django-webpack-loader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/owais/django-webpack-loader.svg?branch=master)](https://travis-ci.org/owais/django-webpack-loader)\n[![Coverage Status](https://coveralls.io/repos/owais/django-webpack-loader/badge.svg?branch=master&service=github)](https://coveralls.io/github/owais/django-webpack-loader?branch=master)\n\n<br>\n\nRead http://owaislone.org/blog/webpack-plus-reactjs-and-django/ for a detailed step by step guide on setting up webpack with django using this library.\n\nUse webpack to generate your static bundles without django's staticfiles or opaque wrappers.\n\nDjango webpack loader consumes the output generated by [webpack-bundle-tracker](https://github.com/owais/webpack-bundle-tracker) and lets you use the generated bundles in django.\n\nA [changelog](CHANGELOG.md) is also available.\n\n## Compatibility\n\nTest cases cover Django>=1.6 on Python 2.7 and Python>=3.4. 100% code coverage is the target so we can be sure everything works anytime. It should probably work on older version of django as well but the package does not ship any test cases for them.\n\n## Install\n\n```bash\nnpm install --save-dev webpack-bundle-tracker\n\npip install django4-webpack-loader\n```\n\n<br>\n\n## Configuration\n\n<br>\n\n### Assumptions\n\nAssuming `BASE_DIR` in settings refers to the root of your django app.\n\n```python\nimport sys\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n```\n\n<br>\n\nAssuming `assets/` is in `settings.STATICFILES_DIRS` like\n\n```python\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'assets'),\n)\n```\n\n<br>\n\nAssuming your webpack config lives at `./webpack.config.js` and looks like this\n\n```javascript\nvar path = require(\"path\");\nvar webpack = require(\"webpack\");\nvar BundleTracker = require(\"webpack-bundle-tracker\");\n\nmodule.exports = {\n  context: __dirname,\n  entry: \"./assets/js/index\",\n  output: {\n    path: path.resolve(\"./assets/webpack_bundles/\"),\n    filename: \"[name]-[hash].js\"\n  },\n\n  plugins: [new BundleTracker({ filename: \"./webpack-stats.json\" })]\n};\n```\n\n<br>\n\n### Default Configuration\n\n```python\nWEBPACK_LOADER = {\n    'DEFAULT': {\n        'CACHE': not DEBUG,\n        'BUNDLE_DIR_NAME': 'webpack_bundles/', # must end with slash\n        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),\n        'POLL_INTERVAL': 0.1,\n        'TIMEOUT': None,\n        'IGNORE': ['.+\\.hot-update.js', '.+\\.map']\n    }\n}\n```\n\n<br>\n\n#### CACHE\n\n```python\nWEBPACK_LOADER = {\n    'DEFAULT': {\n        'CACHE': not DEBUG\n    }\n}\n```\n\nWhen `CACHE` is set to True, webpack-loader will read the stats file only once and cache the result. This means web workers need to be restarted in order to pick up any changes made to the stats files.\n\n<br>\n\n#### BUNDLE_DIR_NAME\n\n```python\nWEBPACK_LOADER = {\n    'DEFAULT': {\n        'BUNDLE_DIR_NAME': 'bundles/' # end with slash\n    }\n}\n```\n\n`BUNDLE_DIR_NAME` refers to the dir in which webpack outputs the bundles. It should not be the full path. If `./assets` is one of your static dirs and webpack generates the bundles in `./assets/output/bundles/`, then `BUNDLE_DIR_NAME` should be `output/bundles/`.\n\nIf the bundle generates a file called `main-cf4b5fab6e00a404e0c7.js` and your STATIC_URL is `/static/`, then the `<script>` tag will look like this\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"/static/output/bundles/main-cf4b5fab6e00a404e0c7.js\"\n/>\n```\n\n<br>\n\n#### STATS_FILE\n\n```python\nWEBPACK_LOADER = {\n    'DEFAULT': {\n        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json')\n    }\n}\n```\n\n`STATS_FILE` is the filesystem path to the file generated by `webpack-bundle-tracker` plugin. If you initialize `webpack-bundle-tracker` plugin like this\n\n```javascript\nnew BundleTracker({ filename: \"./webpack-stats.json\" });\n```\n\nand your webpack config is located at `/home/src/webpack.config.js`, then the value of `STATS_FILE` should be `/home/src/webpack-stats.json`\n\n<br>\n\n#### IGNORE\n\n`IGNORE` is a list of regular expressions. If a file generated by webpack matches one of the expressions, the file will not be included in the template.\n\n<br>\n\n#### POLL_INTERVAL\n\n`POLL_INTERVAL` is the number of seconds webpack_loader should wait between polling the stats file. The stats file is polled every 100 miliseconds by default and any requests to are blocked while webpack compiles the bundles. You can reduce this if your bundles take shorter to compile.\n\n**NOTE:** Stats file is not polled when in production (DEBUG=False).\n\n<br>\n\n#### TIMEOUT\n\n`TIMEOUT` is the number of seconds webpack_loader should wait for webpack to finish compiling before raising an exception. `0`, `None` or leaving the value out of settings disables timeouts.\n\n<br>\n\n## Usage\n\n<br>\n\n### Manually run webpack to build assets.\n\nOne of the core principles of django-webpack-loader is to not manage webpack itself in order to give you the flexibility to run webpack the way you want. If you are new to webpack, check one of the [examples](https://github.com/owais/django-webpack-loader/tree/master/examples), read [my detailed blog post](http://owaislone.org/blog/webpack-plus-reactjs-and-django/) or check [webpack docs](http://webpack.github.io/).\n\n### Settings\n\nAdd `webpack_loader` to `INSTALLED_APPS`\n\n```\nINSTALLED_APPS = (\n    ...\n    'webpack_loader',\n)\n```\n\n### Templates\n\n### render_bundle\n\n```HTML+Django\n{% load render_bundle from webpack_loader %}\n\n{% render_bundle 'main' %}\n```\n\n`render_bundle` will render the proper `<script>` and `<link>` tags needed in your template.\n\n`render_bundle` also takes a second argument which can be a file extension to match. This is useful when you want to render different types for files in separately. For example, to render CSS in head and JS at bottom we can do something like this,\n\n```HTML+Django\n{% load render_bundle from webpack_loader %}\n\n<html>\n  <head>\n    {% render_bundle 'main' 'css' %}\n  </head>\n  <body>\n    ....\n    {% render_bundle 'main' 'js' %}\n  </body>\n</head>\n```\n\n### render_entrypoint (Available only when using Webpack v.4 or newer)\n\n```HTML+Django\n{% load render_entrypoint from webpack_loader %}\n\n{% render_entrypoint 'index' %}\n```\n\n`render_entrypoint` will render all the proper `<script>` and `<link>` tags needed in your template for that endpoint.\nUsing this, you can make use of webpack 4 code splitting features.\nExample webpack config:\n\n```javascript\nmodule.exports = {\n  ...,\n  entry: {\n    index: \"./myapp/static/src/pages/index.js\",\n    contact_us: \"./myapp/static/src/pages/contact_us.js\",\n  },\n  ...,\n  plugins: [new BundleTracker({ filename: \"./webpack-stats.json\" })]\n};\n```\n\nJust as `render_bundle`, `render_entrypoint` also takes a second argument which can be a file extension to match, and can be used in a similar way,\n\n```HTML+Django\n{% load render_entrypoint from webpack_loader %}\n\n<html>\n  <head>\n    {% render_entrypoint 'main' 'css' %}\n  </head>\n  <body>\n    ....\n    {% render_entrypoint 'main' 'js' %}\n  </body>\n</head>\n```\n\n<br>\n\n### Multiple webpack projects\n\nVersion 2.0 and up of webpack loader also supports multiple webpack configurations. The following configuration defines 2 webpack stats files in settings and uses the `config` argument in the template tags to influence which stats file to load the bundles from.\n\n```python\nWEBPACK_LOADER = {\n    'DEFAULT': {\n        'BUNDLE_DIR_NAME': 'bundles/',\n        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),\n    },\n    'DASHBOARD': {\n        'BUNDLE_DIR_NAME': 'dashboard_bundles/',\n        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats-dashboard.json'),\n    }\n}\n```\n\n```HTML+Django\n{% load render_bundle from webpack_loader %}\n\n<html>\n  <body>\n    ....\n    {% render_bundle 'main' 'js' 'DEFAULT' %}\n    {% render_bundle 'main' 'js' 'DASHBOARD' %}\n\n    <!-- or render all files from a bundle -->\n    {% render_bundle 'main' config='DASHBOARD' %}\n\n    <!-- the following tags do the same thing -->\n    {% render_bundle 'main' 'css' 'DASHBOARD' %}\n    {% render_bundle 'main' extension='css' config='DASHBOARD' %}\n    {% render_bundle 'main' config='DASHBOARD' extension='css' %}\n\n    <!-- add some extra attributes to the tag -->\n    {% render_bundle 'main' 'js' 'DEFAULT' attrs='async chatset=\"UTF-8\"'%}\n  </body>\n</head>\n```\n\n### File URLs instead of html tags\n\nIf you need the URL to an asset without the HTML tags, the `get_files`\ntemplate tag can be used. A common use case is specifying the URL to a\ncustom css file for a Javascript plugin.\n\n`get_files` works exactly like `render_bundle` except it returns a list of\nmatching files and lets you assign the list to a custom template variable. For example,\n\n```HTML+Django\n{% get_files 'editor' 'css' as editor_css_files %}\nCKEDITOR.config.contentsCss = '{{ editor_css_files.0.publicPath }}';\n\n<!-- or list down name, path and download url for every file -->\n<ul>\n{% for css_file in editor_css_files %}\n    <li>{{ css_file.name }} : {{ css_file.path }} : {{ css_file.publicPath }}</li>\n{% endfor %}\n</ul>\n```\n\n### Refer other static assets\n\n`webpack_static` template tag provides facilities to load static assets managed by webpack\nin django templates. It is like django's built in `static` tag but for webpack assets instead.\n\nIn the below example, `logo.png` can be any static asset shipped with any npm or bower package.\n\n```HTML+Django\n{% load webpack_static from webpack_loader %}\n\n<!-- render full public path of logo.png -->\n<img src=\"{% webpack_static 'logo.png' %}\"/>\n```\n\nThe public path is based on `webpack.config.js` [output.publicPath](https://webpack.js.org/configuration/output/#output-publicpath).\n\n<br>\n\n### From Python code\n\nIf you want to access the webpack asset path information from your application code then you can use\nthe function in the `webpack_loader.utils` module.\n\n```python\n>>> utils.get_files('main')\n[{'url': '/static/bundles/main.js', u'path': u'/home/mike/root/projects/django-webpack-loader/tests/assets/bundles/main.js', u'name': u'main.js'},\n {'url': '/static/bundles/styles.css', u'path': u'/home/mike/root/projects/django-webpack-loader/tests/assets/bundles/styles.css', u'name': u'styles.css'}]\n>>> utils.get_as_tags('main')\n['<script type=\"text/javascript\" src=\"/static/bundles/main.js\" ></script>',\n '<link type=\"text/css\" href=\"/static/bundles/styles.css\" rel=\"stylesheet\" />']\n```\n\n## How to use in Production\n\n**It is up to you**. There are a few ways to handle this. I like to have slightly separate configs for production and local. I tell git to ignore my local stats + bundle file but track the ones for production. Before pushing out newer version to production, I generate a new bundle using production config and commit the new stats file and bundle. I store the stats file and bundles in a directory that is added to the `STATICFILES_DIR`. This gives me integration with collectstatic for free. The generated bundles are automatically collected to the target directory and synched to S3.\n\n`./webpack_production.config.js`\n\n```javascript\nvar config = require(\"./webpack.config.js\");\nvar BundleTracker = require(\"webpack-bundle-tracker\");\n\nconfig.output.path = require(\"path\").resolve(\"./assets/dist\");\n\nconfig.plugins = [new BundleTracker({ filename: \"./webpack-stats-prod.json\" })];\n\n// override any other settings here like using Uglify or other things that make sense for production environments.\n\nmodule.exports = config;\n```\n\n`settings.py`\n\n```python\nif not DEBUG:\n    WEBPACK_LOADER.update({\n        'BUNDLE_DIR_NAME': 'dist/',\n        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats-prod.json')\n    })\n```\n\n<br><br>\n\nYou can also simply generate the bundles on the server before running collectstatic if that works for you.\n\n## Extra\n\n### Jinja2 Configuration\n\nIf you need to output your assets in a jinja template we provide a Jinja2 extension that's compatible with the [Django Jinja](https://github.com/niwinz/django-jinja) module and Django 1.8.\n\nTo install the extension add it to the django_jinja `TEMPLATES` configuration in the `[\"OPTIONS\"][\"extension\"]` list.\n\n```python\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django_jinja.backend.Jinja2\",\n        \"OPTIONS\": {\n            \"extensions\": [\n                \"django_jinja.builtins.extensions.DjangoFiltersExtension\",\n                \"webpack_loader.contrib.jinja2ext.WebpackExtension\",\n            ],\n        }\n    }\n]\n```\n\nThen in your base jinja template:\n\n```HTML\n{{ render_bundle('main') }}\n```\n\n---\n\n<br>\n\nEnjoy your webpack with django :)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alihazemfarouk/django-webpack-loader", "keywords": "django,webpack,assets", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-webpack4-loader", "package_url": "https://pypi.org/project/django-webpack4-loader/", "platform": "", "project_url": "https://pypi.org/project/django-webpack4-loader/", "project_urls": {"Homepage": "https://github.com/alihazemfarouk/django-webpack-loader"}, "release_url": "https://pypi.org/project/django-webpack4-loader/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "Transparently use webpack with django. Forked from https://github.com/scdekov/django-webpack-loader", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            # django-webpack-loader<br><br>[![Join the chat at https://gitter.im/owais/django-webpack-loader](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/owais/django-webpack-loader?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)<br>[![Build Status](https://travis-ci.org/owais/django-webpack-loader.svg?branch=master)](https://travis-ci.org/owais/django-webpack-loader)<br>[![Coverage Status](https://coveralls.io/repos/owais/django-webpack-loader/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/owais/django-webpack-loader?branch=master)<br><br>&lt;br&gt;<br><br>Read http://owaislone.org/blog/webpack-plus-reactjs-and-django/ for a detailed step by step guide on setting up webpack with django using this library.<br><br>Use webpack to generate your static bundles without django's staticfiles or opaque wrappers.<br><br>Django webpack loader consumes the output generated by [webpack-bundle-tracker](https://github.com/owais/webpack-bundle-tracker) and lets you use the generated bundles in django.<br><br>A [changelog](CHANGELOG.md) is also available.<br><br>## Compatibility<br><br>Test cases cover Django&gt;=1.6 on Python 2.7 and Python&gt;=3.4. 100% code coverage is the target so we can be sure everything works anytime. It should probably work on older version of django as well but the package does not ship any test cases for them.<br><br>## Install<br><br>```bash<br>npm install --save-dev webpack-bundle-tracker<br><br>pip install django4-webpack-loader<br>```<br><br>&lt;br&gt;<br><br>## Configuration<br><br>&lt;br&gt;<br><br>### Assumptions<br><br>Assuming `BASE_DIR` in settings refers to the root of your django app.<br><br>```python<br>import sys<br>import os<br><br>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br>```<br><br>&lt;br&gt;<br><br>Assuming `assets/` is in `settings.STATICFILES_DIRS` like<br><br>```python<br>STATICFILES_DIRS = (<br>    os.path.join(BASE_DIR, 'assets'),<br>)<br>```<br><br>&lt;br&gt;<br><br>Assuming your webpack config lives at `./webpack.config.js` and looks like this<br><br>```javascript<br>var path = require(\"path\");<br>var webpack = require(\"webpack\");<br>var BundleTracker = require(\"webpack-bundle-tracker\");<br><br>module.exports = {<br>  context: __dirname,<br>  entry: \"./assets/js/index\",<br>  output: {<br>    path: path.resolve(\"./assets/webpack_bundles/\"),<br>    filename: \"[name]-[hash].js\"<br>  },<br><br>  plugins: [new BundleTracker({ filename: \"./webpack-stats.json\" })]<br>};<br>```<br><br>&lt;br&gt;<br><br>### Default Configuration<br><br>```python<br>WEBPACK_LOADER = {<br>    'DEFAULT': {<br>        'CACHE': not DEBUG,<br>        'BUNDLE_DIR_NAME': 'webpack_bundles/', # must end with slash<br>        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),<br>        'POLL_INTERVAL': 0.1,<br>        'TIMEOUT': None,<br>        'IGNORE': ['.+\\.hot-update.js', '.+\\.map']<br>    }<br>}<br>```<br><br>&lt;br&gt;<br><br>#### CACHE<br><br>```python<br>WEBPACK_LOADER = {<br>    'DEFAULT': {<br>        'CACHE': not DEBUG<br>    }<br>}<br>```<br><br>When `CACHE` is set to True, webpack-loader will read the stats file only once and cache the result. This means web workers need to be restarted in order to pick up any changes made to the stats files.<br><br>&lt;br&gt;<br><br>#### BUNDLE_DIR_NAME<br><br>```python<br>WEBPACK_LOADER = {<br>    'DEFAULT': {<br>        'BUNDLE_DIR_NAME': 'bundles/' # end with slash<br>    }<br>}<br>```<br><br>`BUNDLE_DIR_NAME` refers to the dir in which webpack outputs the bundles. It should not be the full path. If `./assets` is one of your static dirs and webpack generates the bundles in `./assets/output/bundles/`, then `BUNDLE_DIR_NAME` should be `output/bundles/`.<br><br>If the bundle generates a file called `main-cf4b5fab6e00a404e0c7.js` and your STATIC_URL is `/static/`, then the `&lt;script&gt;` tag will look like this<br><br>```html<br>&lt;script<br>  type=\"text/javascript\"<br>  src=\"/static/output/bundles/main-cf4b5fab6e00a404e0c7.js\"<br>/&gt;<br>```<br><br>&lt;br&gt;<br><br>#### STATS_FILE<br><br>```python<br>WEBPACK_LOADER = {<br>    'DEFAULT': {<br>        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json')<br>    }<br>}<br>```<br><br>`STATS_FILE` is the filesystem path to the file generated by `webpack-bundle-tracker` plugin. If you initialize `webpack-bundle-tracker` plugin like this<br><br>```javascript<br>new BundleTracker({ filename: \"./webpack-stats.json\" });<br>```<br><br>and your webpack config is located at `/home/src/webpack.config.js`, then the value of `STATS_FILE` should be `/home/src/webpack-stats.json`<br><br>&lt;br&gt;<br><br>#### IGNORE<br><br>`IGNORE` is a list of regular expressions. If a file generated by webpack matches one of the expressions, the file will not be included in the template.<br><br>&lt;br&gt;<br><br>#### POLL_INTERVAL<br><br>`POLL_INTERVAL` is the number of seconds webpack_loader should wait between polling the stats file. The stats file is polled every 100 miliseconds by default and any requests to are blocked while webpack compiles the bundles. You can reduce this if your bundles take shorter to compile.<br><br>**NOTE:** Stats file is not polled when in production (DEBUG=False).<br><br>&lt;br&gt;<br><br>#### TIMEOUT<br><br>`TIMEOUT` is the number of seconds webpack_loader should wait for webpack to finish compiling before raising an exception. `0`, `None` or leaving the value out of settings disables timeouts.<br><br>&lt;br&gt;<br><br>## Usage<br><br>&lt;br&gt;<br><br>### Manually run webpack to build assets.<br><br>One of the core principles of django-webpack-loader is to not manage webpack itself in order to give you the flexibility to run webpack the way you want. If you are new to webpack, check one of the [examples](https://github.com/owais/django-webpack-loader/tree/master/examples), read [my detailed blog post](http://owaislone.org/blog/webpack-plus-reactjs-and-django/) or check [webpack docs](http://webpack.github.io/).<br><br>### Settings<br><br>Add `webpack_loader` to `INSTALLED_APPS`<br><br>```<br>INSTALLED_APPS = (<br>    ...<br>    'webpack_loader',<br>)<br>```<br><br>### Templates<br><br>### render_bundle<br><br>```HTML+Django<br>{% load render_bundle from webpack_loader %}<br><br>{% render_bundle 'main' %}<br>```<br><br>`render_bundle` will render the proper `&lt;script&gt;` and `&lt;link&gt;` tags needed in your template.<br><br>`render_bundle` also takes a second argument which can be a file extension to match. This is useful when you want to render different types for files in separately. For example, to render CSS in head and JS at bottom we can do something like this,<br><br>```HTML+Django<br>{% load render_bundle from webpack_loader %}<br><br>&lt;html&gt;<br>  &lt;head&gt;<br>    {% render_bundle 'main' 'css' %}<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    ....<br>    {% render_bundle 'main' 'js' %}<br>  &lt;/body&gt;<br>&lt;/head&gt;<br>```<br><br>### render_entrypoint (Available only when using Webpack v.4 or newer)<br><br>```HTML+Django<br>{% load render_entrypoint from webpack_loader %}<br><br>{% render_entrypoint 'index' %}<br>```<br><br>`render_entrypoint` will render all the proper `&lt;script&gt;` and `&lt;link&gt;` tags needed in your template for that endpoint.<br>Using this, you can make use of webpack 4 code splitting features.<br>Example webpack config:<br><br>```javascript<br>module.exports = {<br>  ...,<br>  entry: {<br>    index: \"./myapp/static/src/pages/index.js\",<br>    contact_us: \"./myapp/static/src/pages/contact_us.js\",<br>  },<br>  ...,<br>  plugins: [new BundleTracker({ filename: \"./webpack-stats.json\" })]<br>};<br>```<br><br>Just as `render_bundle`, `render_entrypoint` also takes a second argument which can be a file extension to match, and can be used in a similar way,<br><br>```HTML+Django<br>{% load render_entrypoint from webpack_loader %}<br><br>&lt;html&gt;<br>  &lt;head&gt;<br>    {% render_entrypoint 'main' 'css' %}<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    ....<br>    {% render_entrypoint 'main' 'js' %}<br>  &lt;/body&gt;<br>&lt;/head&gt;<br>```<br><br>&lt;br&gt;<br><br>### Multiple webpack projects<br><br>Version 2.0 and up of webpack loader also supports multiple webpack configurations. The following configuration defines 2 webpack stats files in settings and uses the `config` argument in the template tags to influence which stats file to load the bundles from.<br><br>```python<br>WEBPACK_LOADER = {<br>    'DEFAULT': {<br>        'BUNDLE_DIR_NAME': 'bundles/',<br>        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),<br>    },<br>    'DASHBOARD': {<br>        'BUNDLE_DIR_NAME': 'dashboard_bundles/',<br>        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats-dashboard.json'),<br>    }<br>}<br>```<br><br>```HTML+Django<br>{% load render_bundle from webpack_loader %}<br><br>&lt;html&gt;<br>  &lt;body&gt;<br>    ....<br>    {% render_bundle 'main' 'js' 'DEFAULT' %}<br>    {% render_bundle 'main' 'js' 'DASHBOARD' %}<br><br>    &lt;!-- or render all files from a bundle --&gt;<br>    {% render_bundle 'main' config='DASHBOARD' %}<br><br>    &lt;!-- the following tags do the same thing --&gt;<br>    {% render_bundle 'main' 'css' 'DASHBOARD' %}<br>    {% render_bundle 'main' extension='css' config='DASHBOARD' %}<br>    {% render_bundle 'main' config='DASHBOARD' extension='css' %}<br><br>    &lt;!-- add some extra attributes to the tag --&gt;<br>    {% render_bundle 'main' 'js' 'DEFAULT' attrs='async chatset=\"UTF-8\"'%}<br>  &lt;/body&gt;<br>&lt;/head&gt;<br>```<br><br>### File URLs instead of html tags<br><br>If you need the URL to an asset without the HTML tags, the `get_files`<br>template tag can be used. A common use case is specifying the URL to a<br>custom css file for a Javascript plugin.<br><br>`get_files` works exactly like `render_bundle` except it returns a list of<br>matching files and lets you assign the list to a custom template variable. For example,<br><br>```HTML+Django<br>{% get_files 'editor' 'css' as editor_css_files %}<br>CKEDITOR.config.contentsCss = '{{ editor_css_files.0.publicPath }}';<br><br>&lt;!-- or list down name, path and download url for every file --&gt;<br>&lt;ul&gt;<br>{% for css_file in editor_css_files %}<br>    &lt;li&gt;{{ css_file.name }} : {{ css_file.path }} : {{ css_file.publicPath }}&lt;/li&gt;<br>{% endfor %}<br>&lt;/ul&gt;<br>```<br><br>### Refer other static assets<br><br>`webpack_static` template tag provides facilities to load static assets managed by webpack<br>in django templates. It is like django's built in `static` tag but for webpack assets instead.<br><br>In the below example, `logo.png` can be any static asset shipped with any npm or bower package.<br><br>```HTML+Django<br>{% load webpack_static from webpack_loader %}<br><br>&lt;!-- render full public path of logo.png --&gt;<br>&lt;img src=\"{% webpack_static 'logo.png' %}\"/&gt;<br>```<br><br>The public path is based on `webpack.config.js` [output.publicPath](https://webpack.js.org/configuration/output/#output-publicpath).<br><br>&lt;br&gt;<br><br>### From Python code<br><br>If you want to access the webpack asset path information from your application code then you can use<br>the function in the `webpack_loader.utils` module.<br><br>```python<br>&gt;&gt;&gt; utils.get_files('main')<br>[{'url': '/static/bundles/main.js', u'path': u'/home/mike/root/projects/django-webpack-loader/tests/assets/bundles/main.js', u'name': u'main.js'},<br> {'url': '/static/bundles/styles.css', u'path': u'/home/mike/root/projects/django-webpack-loader/tests/assets/bundles/styles.css', u'name': u'styles.css'}]<br>&gt;&gt;&gt; utils.get_as_tags('main')<br>['&lt;script type=\"text/javascript\" src=\"/static/bundles/main.js\" &gt;&lt;/script&gt;',<br> '&lt;link type=\"text/css\" href=\"/static/bundles/styles.css\" rel=\"stylesheet\" /&gt;']<br>```<br><br>## How to use in Production<br><br>**It is up to you**. There are a few ways to handle this. I like to have slightly separate configs for production and local. I tell git to ignore my local stats + bundle file but track the ones for production. Before pushing out newer version to production, I generate a new bundle using production config and commit the new stats file and bundle. I store the stats file and bundles in a directory that is added to the `STATICFILES_DIR`. This gives me integration with collectstatic for free. The generated bundles are automatically collected to the target directory and synched to S3.<br><br>`./webpack_production.config.js`<br><br>```javascript<br>var config = require(\"./webpack.config.js\");<br>var BundleTracker = require(\"webpack-bundle-tracker\");<br><br>config.output.path = require(\"path\").resolve(\"./assets/dist\");<br><br>config.plugins = [new BundleTracker({ filename: \"./webpack-stats-prod.json\" })];<br><br>// override any other settings here like using Uglify or other things that make sense for production environments.<br><br>module.exports = config;<br>```<br><br>`settings.py`<br><br>```python<br>if not DEBUG:<br>    WEBPACK_LOADER.update({<br>        'BUNDLE_DIR_NAME': 'dist/',<br>        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats-prod.json')<br>    })<br>```<br><br>&lt;br&gt;&lt;br&gt;<br><br>You can also simply generate the bundles on the server before running collectstatic if that works for you.<br><br>## Extra<br><br>### Jinja2 Configuration<br><br>If you need to output your assets in a jinja template we provide a Jinja2 extension that's compatible with the [Django Jinja](https://github.com/niwinz/django-jinja) module and Django 1.8.<br><br>To install the extension add it to the django_jinja `TEMPLATES` configuration in the `[\"OPTIONS\"][\"extension\"]` list.<br><br>```python<br>TEMPLATES = [<br>    {<br>        \"BACKEND\": \"django_jinja.backend.Jinja2\",<br>        \"OPTIONS\": {<br>            \"extensions\": [<br>                \"django_jinja.builtins.extensions.DjangoFiltersExtension\",<br>                \"webpack_loader.contrib.jinja2ext.WebpackExtension\",<br>            ],<br>        }<br>    }<br>]<br>```<br><br>Then in your base jinja template:<br><br>```HTML<br>{{ render_bundle('main') }}<br>```<br><br>---<br><br>&lt;br&gt;<br><br>Enjoy your webpack with django :)<br><br><br>\n          </div>"}, "last_serial": 4775776, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b7161dea7a503a128a76339f45c3f39d", "sha256": "2cd1ea199c066b00c857f89269ff12686f9c4b1d8e2c23de7a26d2ee651233eb"}, "downloads": -1, "filename": "django_webpack4_loader-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7161dea7a503a128a76339f45c3f39d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13900, "upload_time": "2019-01-08T13:52:40", "upload_time_iso_8601": "2019-01-08T13:52:40.192872Z", "url": "https://files.pythonhosted.org/packages/b5/de/89b13ade29bb58e9546597353eaca3c20b7796c22406fa6a739d20d8693b/django_webpack4_loader-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f15f734bae5e9e20c186cef0505f306", "sha256": "4a04c3a1decf0154af707e674fa870b106d16432d1526510db4e5d7ef5613361"}, "downloads": -1, "filename": "django-webpack4-loader-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3f15f734bae5e9e20c186cef0505f306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10977, "upload_time": "2019-01-08T13:52:42", "upload_time_iso_8601": "2019-01-08T13:52:42.966051Z", "url": "https://files.pythonhosted.org/packages/06/f2/6a01a060a74bd5b275450d8d0affbac3e23786a634e1c447a873fa759af9/django-webpack4-loader-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "481ae82cc4b02d86ee7af8379ae4609d", "sha256": "f81466aef7d9f04a6e406a6b3c953cf38bf689b333dcc2339eef10f7f8227a52"}, "downloads": -1, "filename": "django_webpack4_loader-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "481ae82cc4b02d86ee7af8379ae4609d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17647, "upload_time": "2019-01-09T11:10:28", "upload_time_iso_8601": "2019-01-09T11:10:28.917207Z", "url": "https://files.pythonhosted.org/packages/03/ff/58172a803e27325f680bce184c0bb2d227bf2b379d725c9bcee40c162060/django_webpack4_loader-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffe8d645d7cd801b1863a12753c92a13", "sha256": "6ef51c12d2cdecc8eeb738ecaf11a041710f591fbdebfe0d30d97b9bb4f5c93a"}, "downloads": -1, "filename": "django-webpack4-loader-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ffe8d645d7cd801b1863a12753c92a13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11050, "upload_time": "2019-01-09T11:10:30", "upload_time_iso_8601": "2019-01-09T11:10:30.684710Z", "url": "https://files.pythonhosted.org/packages/c2/45/448d01d8895162c533a63c2bfb6f38f508faa363402c4bb518682a7bb76e/django-webpack4-loader-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "09fd5221a9dfbcb9c115564b3b491d82", "sha256": "93daac0d73d65192305e61ca984c002f19a26abfd6b2285fd149c34a221ba23e"}, "downloads": -1, "filename": "django_webpack4_loader-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "09fd5221a9dfbcb9c115564b3b491d82", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17654, "upload_time": "2019-01-09T11:31:52", "upload_time_iso_8601": "2019-01-09T11:31:52.648123Z", "url": "https://files.pythonhosted.org/packages/56/f8/3d2058e65acbe98bdfd17805d76e152f49fc6daccbc3a08f6b379d4c8d78/django_webpack4_loader-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "945a1b6ff878cc72d587a92f45738f45", "sha256": "bb6d6b2004518c9cf01789e1ef77b9db81e94f178fe3abc5a5e5b0a7427c013e"}, "downloads": -1, "filename": "django-webpack4-loader-0.0.3.tar.gz", "has_sig": false, "md5_digest": "945a1b6ff878cc72d587a92f45738f45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11043, "upload_time": "2019-01-09T11:31:54", "upload_time_iso_8601": "2019-01-09T11:31:54.872749Z", "url": "https://files.pythonhosted.org/packages/84/c6/22ff83825ba83c3564e628d6c4097048669bf17aec927c908829e3f71e63/django-webpack4-loader-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "452daaf10fe58308845681b99072a390", "sha256": "92a14407dcae1f5464291a8e69c7f3f214149c74239ebab0984895d609ca1881"}, "downloads": -1, "filename": "django_webpack4_loader-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "452daaf10fe58308845681b99072a390", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17776, "upload_time": "2019-01-09T12:09:37", "upload_time_iso_8601": "2019-01-09T12:09:37.277249Z", "url": "https://files.pythonhosted.org/packages/24/7f/bad629379248d1d53e0c22d505f1e29de4d87e7d5fc1a6071d4d9fc82ebb/django_webpack4_loader-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a9523b8c7236413ffacb304e5b820e5", "sha256": "045ef656a42a7aaab82649e75a2e8793a246c4adaab455daea0d474b816849f3"}, "downloads": -1, "filename": "django-webpack4-loader-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6a9523b8c7236413ffacb304e5b820e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11144, "upload_time": "2019-01-09T12:09:39", "upload_time_iso_8601": "2019-01-09T12:09:39.155000Z", "url": "https://files.pythonhosted.org/packages/40/2b/b40d724c7ce1bf5f125a9bea7523e48158040845e9e5d258f4610f3ab2cb/django-webpack4-loader-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "37c8b3e1742a03d0ea2ebcf3f28ada4e", "sha256": "be90257041170f39c025ff674c9064569c9303b464536488b6a6cedd8e3d28be"}, "downloads": -1, "filename": "django_webpack4_loader-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "37c8b3e1742a03d0ea2ebcf3f28ada4e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17777, "upload_time": "2019-02-03T21:41:38", "upload_time_iso_8601": "2019-02-03T21:41:38.792986Z", "url": "https://files.pythonhosted.org/packages/4e/4d/29da8d9e1fef86262126c2b8a82f8fd24570d74b229a544ee4b0068ed28d/django_webpack4_loader-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e111c57e4c1bd004a44a7f302952271a", "sha256": "baa043c4601ed763d161490e2888cf6aa93a2fd9b60681e6b19e35dc7fcb155d"}, "downloads": -1, "filename": "django-webpack4-loader-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e111c57e4c1bd004a44a7f302952271a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11155, "upload_time": "2019-02-03T21:41:41", "upload_time_iso_8601": "2019-02-03T21:41:41.224176Z", "url": "https://files.pythonhosted.org/packages/10/ff/a951492aa57a4c09b0e2f57f4d67b931a62af3c5405657a6c934b78ea5c8/django-webpack4-loader-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37c8b3e1742a03d0ea2ebcf3f28ada4e", "sha256": "be90257041170f39c025ff674c9064569c9303b464536488b6a6cedd8e3d28be"}, "downloads": -1, "filename": "django_webpack4_loader-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "37c8b3e1742a03d0ea2ebcf3f28ada4e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17777, "upload_time": "2019-02-03T21:41:38", "upload_time_iso_8601": "2019-02-03T21:41:38.792986Z", "url": "https://files.pythonhosted.org/packages/4e/4d/29da8d9e1fef86262126c2b8a82f8fd24570d74b229a544ee4b0068ed28d/django_webpack4_loader-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e111c57e4c1bd004a44a7f302952271a", "sha256": "baa043c4601ed763d161490e2888cf6aa93a2fd9b60681e6b19e35dc7fcb155d"}, "downloads": -1, "filename": "django-webpack4-loader-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e111c57e4c1bd004a44a7f302952271a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11155, "upload_time": "2019-02-03T21:41:41", "upload_time_iso_8601": "2019-02-03T21:41:41.224176Z", "url": "https://files.pythonhosted.org/packages/10/ff/a951492aa57a4c09b0e2f57f4d67b931a62af3c5405657a6c934b78ea5c8/django-webpack4-loader-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:55 2020"}