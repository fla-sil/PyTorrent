{"info": {"author": "Laurent Faucheux", "author_email": "laurent.faucheux@hotmail.fr", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "# PyLUCCBA\r\n\r\n<details>\r\n    <summary>A Land-Use-Change Cost-Benefit-Analysis calculator coded in Python.</summary>\r\n</details>\r\n\r\n*This package offers a compilation of environmental and economic data to generate environment-related net present values of any biofuel project with impacts to the environment (GHG emissions or sequestrations). It is coded in Python (compatible with both versions: 2 and 3). Python is a cross platform and a comprehensive extensible and editable language with a large community of users. The structure of the package is simple with accessible input data to which it is possible to add or suppress one\u2019s own trajectories (of prices, carbon stocks, etc).*\r\n\r\n*NB: In the following description we use the expression project's Net Present Value (NPV) multiple times. Note that this use is abusive since it actually refers to the environmental component of projects. For more details, see [Dupoux (In press)](https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf)*\r\n\r\n<hr>\r\n\r\n- [Code coverage](#code-coverage)\r\n- [Installation](#installation)\r\n- [Example usage](#example-usage)\r\n    - [A note on the carbon profitability payback period](#a-note-on-the-carbon-profitability-payback-period)\r\n    - [A note on the compensatory rate](#a-note-on-the-compensatory-rate)\r\n- [Invoking documentation](#invoking-documentation)\r\n- [Data](#data)\r\n- [Data customization/addition](#data-customizationaddition)\r\n- [Format of results](#format-of-results)\r\n- [Paper's results replication](#papers-results-replication)\r\n- [References](#references)\r\n\r\n<hr>\r\n\r\n## Code coverage\r\n\r\n|  Module  | statements | missing | excluded | coverage |\r\n| -------- | ---------- | ------- | -------- | -------- |\r\n| core.py  | 880        | 26      | 0        | 97%      |\r\n| tools.py | 308        | 60      | 0        | 81%      |\r\n| Total    | 1188       | 86      | 0        | 93%      |\r\n\r\n<hr>\r\n\r\n## Installation\r\n\r\nFirst, you need Python installed, either [Python2.7.+](https://www.python.org/downloads/) or [Python3.+](https://www.python.org/downloads/). Either versions are good for our purpose. Then, we are going to use a package management system to install [PyLUCCBA](https://github.com/lfaucheux/PyLUCCBA), namely [pip](https://en.wikipedia.org/wiki/Pip_(package_manager)), _already installed if you are using Python 2 >=2.7.9 or Python 3 >=3.4_. Open a session in your OS [shell](https://en.wikipedia.org/wiki/Shell_(computing)) prompt and type\r\n\r\n    pip install pyluccba\r\n\r\nOr using a non-python-builtin approach, namely [git](https://git-scm.com/downloads),\r\n\r\n    git clone git://github.com/lfaucheux/PyLUCCBA.git\r\n    cd PyLUCCBA\r\n    python setup.py install \r\n\r\n\r\n<hr>\r\n\r\n## Example usage\r\n\r\n*The example that follows is done with the idea of showing how to go beyond the replication of the results presented in [Dupoux (In press)](https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf) via the Python Shell*.\r\n\r\nLet's first import the module `PyLUCCBA`\r\n\r\n    >>> import PyLUCCBA as cc\r\n\r\nThe alias of `PyLUCCBA`, namely `cc`, actually contains many objects definitions, such as that of the calculator that we are going to use in examples. The name of the calculator is `CBACalculator`.\r\n\r\nBut before using the calculator as such, let's define (and introduce) the set of parameters that we are going to use to configure `CBACalculator`. As can be expected when performing a cost benefit analysis, these parameters are related to: *(i)* the horizon of the project, *(ii)* the discount rate that we want to use in our calculations, *(iii)* the scenarized price trajectory of carbon dioxide (CO2), *(iv)* the scenarized trajectory of quantities of bio-ethanol to produce annually and *(...)* so on. Let's introduce them all in practice:\r\n\r\n    >>> cba = cc.CBACalculator(\r\n            run_name               = 'Example-1',\r\n            country                = 'france',\r\n            project_first_year     = 2020,\r\n            project_horizon        = 20,\r\n            discount_rate          = .03,\r\n            co2_prices_scenario    = 'SPC2009',\r\n            output_flows_scenario  = 'O',\r\n            initial_landuse        = 'improved grassland',\r\n            final_landuse          = 'wheat',\r\n            input_flows_scenario   = 'IFP',\r\n            T_so                   = 20,\r\n            T_vg_diff              = 1,\r\n            T_vg_unif              = 20,\r\n            polat_repeated_pattern = True,\r\n            final_currency         = 'EUR',\r\n            change_rates           = {'EUR':{'USD/EUR':1.14}}, # https://www.google.fr/#q=EUR+USD\r\n            return_charts          = True,\r\n            save_charts            = True,\r\n            from_local_data        = False,\r\n        )\r\n\r\nThe following table enumerates all parameters that can be used to create an instance of `CBACalculator`.\r\n\r\n Parameter's name         | Description\r\n ------------------------ | -------\r\n `run_name`               | name of the folder that will contain the generated results and charts, *e.g.* `'Example-1'`.\r\n `country`                | name of the country under study. Only *one* possible choice currently: `France`.\r\n `project_first_year`     | first year of the project.\r\n `project_horizon`        | duration of the biofuel production project (years).\r\n `discount_rate`          | rate involved in the calculations of net present values. Set to `0.` by default.\r\n `co2_prices_scenario`    | name of the trajectory of CO2 prices. The current choices are `'A'`, `'B'`, `'C'`, `'DEBUG'`, `'O'`, `'OECD2018'`, `'SPC2009'`, `'SPC2019'`, `'WEO2015-450S'`, `'WEO2015-CPS'`, `'WEO2018-CPS'`, `'WEO2015-NPS'`, `'WEO2018-NPS'` or `'WEO2018-SDS'`.\r\n `output`                 | name of the produced biofuel. Set to `'eth'` by default. Only *one* possible choice currently: `'eth'`. ***NB***: `'eth'` actually stands for **bio**ethanol.\r\n `black_output`           | name of the counterfactual produced output. Serves as the reference according to which the production of bioethanol (`'eth'`) is considered (or not) as pro-environmental. Set to `'oil'` by default. Only *one* possible choice currently: `'oil'`. ***NB***: `'oil'` actually stands for gasoline.\r\n `output_flows_scenario`  | name of the trajectory of annually produced quantities of biofuel. The current choices are `'DEBUG'` or `'O'`.\r\n `initial_landuse`        | use of the land *before* land conversion. The current choices are `'forestland30'`, `'improved grassland'`, `'annual cropland'` or `'degraded grassland'`.\r\n `final_landuse`          | use of the land *after* land conversion. The current choices are `'miscanthus'`, `'sugarbeet'` or `'wheat'`.\r\n `input_flows_scenario`   | name of the trajectory of input-to-ouput yields. The current choices depend on the value set for `final_landuse`. If `final_landuse` is set to `'miscanthus'`, the possibilities are `'DEBUG'` and `'DOE'`. If `final_landuse` is set to `'wheat'` or `'sugarbeet'`, the possibilities are `'IFP'` and `'DEBUG'`.\r\n `T_so`                   | period over which soil carbon emissions due to LUC are considered.\r\n `T_vg_diff`              | period over which vegetation carbon emissions due to LUC are considered in the differentiated annualization approach.\r\n `T_vg_unif`              | period over which vegetation carbon emissions due to LUC are considered in the uniform annualization approach.\r\n `polat_repeated_pattern` | if `True`, retro/extra-polation pattern is repeated before/after the first/last mentioned value. Otherwise, it is maintained constant.\r\n `final_currency`         | currency used to conduct the study and express the results. The current choices are `'EUR'` or `'USD'`. Set to `'EUR'` by default.\r\n `change_rates`           | `final_currency`-dependent exchange rate to consider in calculations, *e.g.* `{'EUR':{'USD/EUR':1.14,}}` *(or `{'EUR':{'EUR/USD':0.8772,}}` since the tool ensures dimensional homogeneity)*.\r\n `return_charts`          | if `True`, charts are returned (for interactive use, e.g. hovering). Set to `True` by default.\r\n `save_charts`            | if `True`, charts are saved on the disk. Set to `True` by default.\r\n `from_local_data`        | if `True`, scenarized trajectories (*e.g.* of CO2 prices, of output flows quantities, of yields) are read from the 'resources' folder that is located next to the working script. If `False`, those are read from the 'resources' folder natively contained in the package directory. Set to `False` by default.\r\n\r\nOnce we have our instance of `CBACalculator` in hand, *i.e.* `cba`, we may wonder what are the scenarized trajectories over which we are about to conduct our study, *e.g.* of CO2 prices, produced quantities of biofuel, etc. In this case, we can simply type:\r\n\r\n    >>> cba.chart_of_output_flows_traj.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20ETH%20%5BO%5D.png?raw=true\" width=\"60%\"/><img></p>\r\n\r\nAs it reads in the above chart, we are about to work with a constant level of production over the project horizon. Note the absence of flow in 2020: this illustrates the need for waiting one year before having enough wheat to produce biofuel.\r\n\r\nWe may then wonder what is the counterfactual trajectory in terms of gasoline \u2013 targeting the same [energy efficiency](https://en.wikipedia.org/wiki/Energy_conversion_efficiency) (in joule) as conversion basis: \r\n\r\n    >>> cba.chart_of_black_output_flows_traj.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20OIL%20%5BO%5D.png?raw=true\" width=\"60%\"/><img></p>\r\n\r\nNow, let's see which trajectory of CO2 prices is behind the name `'SPC2009'` \u2013 which stands for [Quinet (2009)](http://www.ladocumentationfrancaise.fr/var/storage/rapports-publics/094000195.pdf)'s shadow price of carbon:\r\n\r\n    >>> cba.chart_of_co2_prices_traj.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/PRICES%20co2%20%5BSPC2009%5D.png?raw=true\" width=\"60%\"/><img></p>\r\n\r\nWe may also wonder which quantities trajectory of wheat is implied by that of biofuel on the one hand, and by the value we set for the parameter `input_flows_scenario`, that is `'IFP'` , on the other hand \u2013 where *I.F.P* stands for *Institut Fran\u00e7ais du P\u00e9trole \u00e9nergies nouvelles* \u2013 which made a report in [2013](https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/yields/Input/Input.txt) in which it reads that, with 1 tonne of wheat, one can produce [0.2844](https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/yields/Input/WHEAT_yields_FR.csv) tonnes of bioethanol. Let's vizualize that:\r\n\r\n    >>> cba.chart_of_input_flows_traj.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20input%20%5BIFP%5D%5BWHEAT%5D.png?raw=true\" width=\"60%\"/><img></p>\r\n\r\nNote the absence of input flow in 2040: as explained previously, this illustrates the time delay that exists between the cultivation of wheat and its processing into bioethanol, *e.g.* wheat cultivated in 2039 is used for the production of bioethanol planned in 2040.\r\n\r\nThe land use change from `initial_landuse='improved grassland'` to `final_landuse='wheat'` has effects in terms of CO2 emissions. These emissions clearly do not exhibit the same profile depending on how we choose to consider them over the project horizon. First, regarding soil CO2 emissions:\r\n\r\n    >>> cba.carbon_and_co2_flows_traj_annualizer.so_emitting\r\n    True\r\n    >>> cba.chart_of_soco2_unif_flows_traj.show()\r\n    >>> cba.chart_of_soco2_diff_flows_traj.show()\r\n    ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\r\n    ---- [***]The solution converged.[0.000000e+00][***]\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2%20so%20%5Bunif-IMPROVED%20GRASSLAND~WHEAT%5D.png?raw=true\" width=\"50%\"/><img><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2%20so%20%5Bdiff-IMPROVED%20GRASSLAND~WHEAT%5D.png?raw=true\" width=\"50%\"/><img></p>\r\n\r\nOf course, the comparison makes sense since the total emitted stocks are identical:\r\n\r\n    >>> import numpy as np\r\n    >>> np.sum(cba.soco2_unif_flows_traj)\r\n    -10.90041830757967 # tonnes\r\n    >>> np.sum(cba.soco2_diff_flows_traj)\r\n    -10.90041830757967 # tonnes\r\n\r\nOn the side of vegetation-related emissions, converting grassland into wheat field generates a loss of carbon since the latter is harvested annually while the former sequestrates carbon on a pertpetual basis. Here again, emissions' profiles are clearly different under differentiated or uniform annualization approach, see \r\n\r\n    >>> cba.carbon_and_co2_flows_traj_annualizer.vg_emitting\r\n    True\r\n    >>> cba.chart_of_vgco2_unif_flows_traj.show()\r\n    >>> np.sum(cba.vgco2_unif_flows_traj)\r\n    -7.130970463238133 # tonnes\r\n    >>> cba.chart_of_vgco2_diff_flows_traj.show()\r\n    ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\r\n    ---- [***]The solution converged.[0.000000e+00][***]\r\n    >>> np.sum(cba.vgco2_diff_flows_traj)\r\n    -7.130970463238132 # tonnes\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2%20vg%20%5Bunif-IMPROVED%20GRASSLAND~WHEAT%5D.png?raw=true\" width=\"50%\"/><img><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2%20vg%20%5Bdiff-IMPROVED%20GRASSLAND~WHEAT%5D.png?raw=true\" width=\"50%\"/><img></p>\r\n\r\nIndependently of how we annualize the LUC-related CO2 emissions, the cultivation and the processing of wheat generate emissions annually as well. See\r\n\r\n    >>> cba.chart_of_cult_input_co2eq_flows_traj.show()\r\n    >>> cba.chart_of_proc_input_co2eq_flows_traj.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2eq%20%5Bcult-WHEAT%5D.png?raw=true\" width=\"50%\"/><img><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2eq%20%5Bproc-WHEAT%5D.png?raw=true\" width=\"50%\"/><img></p>\r\n\r\nOnce again, the two above charts unambiguously illustrate the time delay that exists between the cultivation of wheat and its processing into bioethanol, *i.e.* wheat cultivated in year *t-1* is used for the production of bioethanol planned in year *t*. Also, note that these cultivation- and processing-related emissions are in *CO2eq* since *CH4* and *N2O* flows are considered as well, using their relative global warming potentials \u2013 relatively to that of CO2 \u2013 as a basis of conversion. See calculation details at [PyGWP](https://github.com/lfaucheux/PyGWP). \r\n\r\nFinally, under the two types of annualization approach, the total emissions following a change in land use from improved grassland into wheat field are:\r\n\r\n    >>> cba.chart_of_total_unif_co2_flows_traj.show()\r\n    >>> cba.chart_of_total_diff_co2_flows_traj.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2%20total%20%5Bunif-ETH%5D.png?raw=true\" width=\"50%\"/><img><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/FLOWS%20TONNES%20co2%20total%20%5Bdiff-ETH%5D.png?raw=true\" width=\"50%\"/><img></p>\r\n\r\nwhich, when monetized with a non-zero discount rate and compared in terms of absolute deviations from gasoline's valorized CO2 flows, lead to sensitivly different profiles for the values of the environmental component of the project, see rather\r\n\r\n    >>> cba.chart_of_NPV_total_unif_minus_black_output_co2_flows_trajs.show()\r\n    >>> cba.chart_of_NPV_total_diff_minus_black_output_co2_flows_trajs.show()\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/dNPV%20co2%20total%20%5Bunif-SPC2009-ETHvsOIL%5D.png?raw=true\" width=\"50%\"/><img><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/dNPV%20co2%20total%20%5Bdiff-SPC2009-ETHvsOIL%5D.png?raw=true\" width=\"50%\"/><img></p>\r\n\r\nNote the slope-breaks that occur during the last year. This is due to the fact that cultivation and its associated emission flows generally \u2013 depending on the type of final land use \u2013 finish one year before the end of the project, which structurally increases projects' NPVs.\r\n\r\n### A note on the carbon profitability payback period\r\n\r\nActually, it looks like extending the horizon of the project may be a good idea to see whether one of the two NPVs' profiles \u2013 shown above \u2013 exhibit positive values over the long run. Put differently, let's vizualize *when* the project exhibits positive NPV under each annualization approach.\r\n\r\n\u2022\t*NB1: the project horizon must be long enough for such a payback period to exist. Hence the extension from 20 to 50 years configured below.*\r\n\r\n\u2022\t*NB2: given that cultivation and its associated flows of emission generally \u2013 depending on the type of final land use \u2013 stop before the end of the project, the last year of the project is structurally more environment-friendly, which increases projects' NPVs (see the jump in the charts above), in some cases to such an extent that the last year actually becomes the payback period, hence the NB1*.\r\n\r\n    >>> cba._clear_caches()    # we clear the cache of our instance since we are going to change a calculation parameter.\r\n    GlobalWarmingPotential     # the tool enumerates objects whose cache have been cleaned.\r\n    OutputFlows\r\n    CarbonAndCo2FlowsAnnualizer\r\n    LandSurfaceFlows\r\n    Co2Prices\r\n    CBACalculator\r\n    >>> cba.project_horizon = 50    # we set a long project horizon\r\n    >>> cba.chart_of_NPV_total_unif_minus_black_output_co2_flows_trajs.show()\r\n    >>> cba.chart_of_NPV_total_diff_minus_black_output_co2_flows_trajs.show()\r\n    ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\r\n    ---- [***]The solution converged.[0.000000e+00][***]\r\n    ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\r\n    ---- [***]The solution converged.[0.000000e+00][***]\r\n\r\n<p align=\"center\"><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/dNPV%20co2%20total%20%5Bunif-SPC2009-ETHvsOIL%5D-extended.png?raw=true\" width=\"50%\"/><img><img src=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/examples/Example-1/dNPV%20co2%20total%20%5Bdiff-SPC2009-ETHvsOIL%5D-extended.png?raw=true\" width=\"50%\"/><img></p>\r\n\r\nRather than vizualizing the NPVs' profiles, we may use a precise way to know *when* a project becomes *environmentally* profitable \u2013 referred to as *Carbon Profitability Payback Period* in [Dupoux (In press)](https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf) \u2013 for each type of annualization approach.\r\n\r\n    >>> cba.unif_payback_period\r\n    41 # years\r\n    >>> cba.diff_payback_period\r\n    35 # years\r\n\r\nLet's be precautious and go back to the project's settings of interest for the rest of the example.\r\n\r\n    >>> cba._clear_caches()\r\n    GlobalWarmingPotential\r\n    OutputFlows\r\n    CarbonAndCo2FlowsAnnualizer\r\n    LandSurfaceFlows\r\n    Co2Prices\r\n    CBACalculator\r\n    >>> cba.project_horizon = 20    # let's go back to our initial settings !\r\n\r\n### A note on the compensatory rate\r\n\r\nWe may wonder under which discount rate the two approaches of annualization \u2013 uniform *versus* differentiated \u2013 would lead to the same NPV over the project horizon. To do so, we have to use another object that is defined in `PyLUCCBA`, namely `CBAParametersEndogenizer`. Let's continue our example and instantiate it:\r\n\r\n    >>> gen = cc.CBAParametersEndogenizer(CBACalculator_instance = cba)\r\n\r\nWith `gen` in hand, we can now determine which discount rate equalizes our two NPVs, as follows:\r\n\r\n    >>> cba_eq = gen.endo_disc_rate_which_eqs_NPV_total_unif_co2_flows_traj_to_NPV_total_diff_co2_flows_traj\r\n    ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\r\n    ---- [***]The solution converged.[0.000000e+00][***]\r\n    ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\r\n    ---- [***]The solution converged.[0.000000e+00][***]\r\n    ---- disc rate equating unif- and diff-based NPVs sol=[0.05420086]\r\n    ---- [***]The solution converged.[4.440892e-16][***]\r\n\r\nNote that `cba_eq` is the `disc_rate`-balanced counterpart of `cba`. It reads above that, \"so configured\", our project would have identical NPVs under the uniform and differentiated annualization approaches for a discount rate of 5.42%.\r\n\r\nAt anytime, we can have a quick look at what is meant exactly by \"so configured\", typing\r\n\r\n    >>> print(cba_eq.summary_args)\r\n    **************************************************************************************\r\n    run_name                : Example-1\r\n    output                  : ETH\r\n    black_output            : OIL\r\n    initial_landuse         : IMPROVED GRASSLAND\r\n    final_landuse/input     : WHEAT\r\n    country                 : FRANCE\r\n    project_horizon         : 21 # because of the time delay between cultivation and processing, taken at t0 - 1.\r\n    T_so                    : 20\r\n    T_vg_diff               : 1\r\n    T_vg_unif               : 20\r\n    project_first_year      : 2020\r\n    polat_repeated_pattern  : True\r\n    co2_prices_scenario     : SPC2009\r\n    discount_rate           : [0.05420086] # our endogenized compensatory rate\r\n    diff_payback_period     : []\r\n    unif_payback_period     : []\r\n    final_currency          : EUR\r\n    change_rates            : {'USD/EUR': 1.14}\r\n    output_flows_scenario   : O\r\n    input_flows_scenario    : IFP\r\n    message                 : _ENDOGENIZER finally says sol=0.0542008612895724 \r\n                              obj(sol)=[4.4408921e-16]\r\n\r\n<hr>\r\n\r\n## Invoking documentation\r\n\r\nYou should abuse of the python-builtin function [`help`](https://www.programiz.com/python-programming/methods/built-in/help) on any object defined in PyLUCCBA, as well as on any instantiated object, *e.g.*\r\n\r\n    >>> import PyLUCCBA as cc\r\n    >>> help(cc.CBAParametersEndogenizer)\r\n    Help on CBAParametersEndogenizer in module PyLUCCBA.core object:\r\n\r\n    class CBAParametersEndogenizer(builtins.object)\r\n     |  Class object designed to handle a CBACalculator instances and to\r\n     |  endogenize some of its parameter.\r\n     |  \r\n     |  Methods defined here:\r\n     |  \r\n     |  __init__(self, CBACalculator_instance)\r\n     |      Initialize self.  See help(type(self)) for accurate signature.\r\n     |  \r\n     |  ----------------------------------------------------------------------\r\n     |  Data descriptors defined here:\r\n     |  \r\n     |  OBJECTIVE_NPV_total_unif_co2_flows_traj_VS_NPV_total_diff_co2_flows_traj\r\n     |      Method which computes the objective of the discount rate\r\n     |      endogenizing process.\r\n     |      \r\n     |      Testing/Example\r\n     |      ---------------\r\n     |      >>> _dr_ = 0.03847487575799428 ## the solution\r\n     |      >>> cba = CBACalculator._testing_instancer(\r\n     |      ...     dr = _dr_, \r\n     |      ...     sc = 'WEO2015-CPS',\r\n     |      ... )\r\n     |      >>> CBAParametersEndogenizer(\r\n     |      ...     CBACalculator_instance = cba\r\n     |      ... ).OBJECTIVE_NPV_total_unif_co2_flows_traj_VS_NPV_total_diff_co2_flows_traj\r\n     |      ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\r\n     |      ---- [***]The solution converged.[0.000000e+00][***]\r\n     |      ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\r\n     |      ---- [***]The solution converged.[0.000000e+00][***]\r\n     |      array([2.22044605e-16])\r\n     |  \r\n     |  __dict__\r\n     |      dictionary for instance variables (if defined)\r\n     |  \r\n     |  __weakref__\r\n     |      list of weak references to the object (if defined)\r\n     |  \r\n     |  endo_disc_rate_which_eqs_NPV_total_unif_co2_flows_traj_to_NPV_total_diff_co2_flows_traj\r\n     |      Returns a CBACalculator instance configured with the discount rate\r\n     |      which equates NPV_total_unif_co2_flows_traj TO NPV_total_diff_co2_flows_traj.\r\n     |      \r\n     |      Testing/Example\r\n     |      ---------------\r\n     |      >>> cba = CBACalculator._testing_instancer(\r\n     |      ...     sc = 'WEO2015-CPS',\r\n     |      ... )\r\n     |      >>> o = CBAParametersEndogenizer(\r\n     |      ...     CBACalculator_instance = cba\r\n     |      ... )\r\n     |      >>> o.endo_disc_rate_which_eqs_NPV_total_unif_co2_flows_traj_to_NPV_total_diff_co2_flows_traj.discount_rate[0]\r\n     |      ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\r\n     |      ---- [***]The solution converged.[0.000000e+00][***]\r\n     |      ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\r\n     |      ---- [***]The solution converged.[0.000000e+00][***]\r\n     |      ---- disc rate equating unif- and diff-based NPVs sol=[0.03847488]\r\n     |      ---- [***]The solution converged.[2.220446e-16][***]\r\n     |      0.038474875757994256\r\n\r\n\r\nI invite you to test the function `help` on any of the following objects: `cc.BlackOutputAndSubstitutesSpecificities`, `cc.CBACalculator`, `cc.CBAParametersEndogenizer`, `cc.CarbonAndCo2FlowsAnnualizer`, `cc.Co2Prices`, `cc.GlobalWarmingPotential`, `cc.InputFlows`, `cc.LandSurfaceFlows`, `cc.OutputFlows`, `cc.VGCAndSOCDeltas`, `cc.VegetationsAndSoilSpecificities`.\r\n\r\n\r\n<hr>\r\n\r\n## Data\r\n\r\nData are stored in the [resources](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources) folder, composed of the following subfolders:\r\n\r\n\u2022\tThe [__meta__](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/__meta__) folder, which includes [BioGrace Excel tool - version 4c.xls](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/resources/__meta__/BioGrace%20Excel%20tool%20-%20version%204c.xls) and [Data_CarbonStocks_Emissions.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/resources/__meta__/Data_CarbonStocks_Emissions.xlsx), in which you can see all the calculations of carbon stocks for each type of land use.\r\n\r\n\u2022\tThe [dluc](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/dluc) folder, which includes three datafiles, namely *(i) [cs_changes_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/dluc/cs_changes_fr.csv)* relating to the carbon stock associated with specific types of land use, *(ii) [so_ghgs_shares_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/dluc/so_ghgs_shares_fr.csv)* relating to the share of soil carbon that translate to actual emissions/sequestrations and *(iii) [vg_ghgs_shares_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/dluc/vg_ghgs_shares_fr.csv)* relating to the share of vegetation carbon that translate to actual emissions/sequestrations. Each of these csv files possesses a txt counterpart with the same name, which provides mandatory information regarding, e.g., the unit of measurement of data.\r\n\r\n\u2022\tThe [externality](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/externality) folder, which includes three datafiles, namely *(i) [co2_prices_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/co2_prices_fr.csv)* relating to the CO2 price-trajectory scenarios, *(ii) [cult_ghgs_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/cult_ghgs_fr.csv)* relating to the quantity of GHG emissions associated with the cultivation of land and *(iii) [proc_ghgs_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/proc_ghgs_fr.csv)* relating to the processing of energy crop to biofuel. Each of these csv files possesses a txt counterpart that has the same name, which provides mandatory information regarding, e.g., the unit of measurement of data.\r\n\r\n\u2022\tThe [input](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/input) folder, which includes four datafiles, namely *(i) [haeth_yields_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/haeth_yields_fr.csv)* relating to the number of tonnes of ethanol per hectare over time and *(ii) [miscanthus_yields_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/miscanthus_yields_fr.csv)*, *[sugarbeet_yields_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/sugarbeet_yields_fr.csv)* and *[wheat_yields_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/wheat_yields_fr.csv)* relating to the number of tonnes of feedstock necessary to produce one tonne of biofuel. As before, almost each of these csv files has a txt counterpart that provides mandatory information on data. In the case of datafiles with no txt counterpart, the tool searches for information in a txt file with the same name as the parent folder's, i.e. *input.txt* in this case.\r\n\r\n\u2022\tThe [output](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/output) folder, which includes three datafiles, namely *(i) [eth_yields_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/output/eth_yields_fr.csv)* that tautologically states that one tonne of biofuel is produced per tonne of output, *(ii) [cult_to_proc_delays_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/output/cult_to_proc_delays_fr.csv)* relating to the time delay required between cultivation and processing of feedstock and *(iii) [subs_intensities_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/output/subs_intensities_fr.csv)* relating to the amount of energy and emissions associated with bioethanol and oil. Once again, each of these csv files has a txt counterpart that provides mandatory information on data. \r\n\r\n*NB1*: all files with a name containing either *\"_yields\"* or *\"_prices\"* consist of temporal trajectories. These trajectories can be sparse. Indeed, when sparse trajectories with more than one point are provided, say, CO2 prices such as in the scenario *WEO2015-CPS* \u2013 see [co2_prices_fr.csv](https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/externality/co2_prices_fr.csv) \u2013, the tool automatically retro/inter/extrapolates the values for each year in an exponential way. When both retro- and extrapolation are possible, retropolation is chosen by using the next period's rate of growth. Then, if the parameter `polat_repeated_pattern` is set to `True`, extrapolation is performed by repeating the entire anterior pattern of growth rates from the last known value. If the parameter is set to `False`, the last known value is kept constant over the project horizon. In the case of sparse trajectories that contain only one value \u2013 see *e.g.* [wheat_yields_fr.csv](https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/input/wheat_yields_fr.csv) \u2013, the trajectory is assumed to be flat over the project horizon.\r\n\r\n*NB2*: all files with a name containing either *\"_yields\"* or *\"_prices\"* must possess a txt file counterpart providing information on their unit of measurement. Indeed, they are read and interpreted with the intention of ensuring the dimensional homogenity of calculations. For example, if, say, *tonne/ha* is required for calculation and that the unit of measurement is *ha/tonne*, the numerical inverse is computed prior to core-calculations.\r\n\r\n\r\n<hr>\r\n\r\n## Data customization/addition\r\n\r\nYou may want to add your own scenarii regarding, e.g., how the price of CO2 evolves over time, the trajectory of output flows produced annually, the quantity of input that is required to produce 1 tonne of output, etc...\r\nThe easiest way of working with custom data is to imitate the package-native data contained in the [*resources*](https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources) folder. Let's start with a local copy of this folder:\r\n\r\n    >>> import PyLUCCBA as cc\r\n    >>> cc.folder_copier(name='resources')\r\n    'resources' folder copied to C:\\path\\to\\folder\r\n\r\nNow, to explore the data, go to `C:\\path\\to\\folder`, where you will see a folder named *resources* that is the exact copy of the data used in [Dupoux (In press)](https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf).\r\n\r\n#### Adding new data\r\n\r\nTo add new data, e.g. a scenario of CO2 prices, go to the folder *resources\\externality* of your local copy. There, you will find two files, namely [co2_prices_fr.csv](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/co2_prices_fr.csv) and [co2_prices_fr.txt](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/co2_prices_fr.txt). First, open the csv file, add a scenario's name [in the first line](https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/externality/co2_prices_fr.csv#L1), *e.g.* `customPricesScenario`, and prices in the just-named column. Remember that your newly-added trajectory can be sparse and that the tool will retro/intra/extrapolate missing prices. Second, open the txt file and add two lines related to `customPricesScenario`, as shown below:\r\n\r\n    customPricesScenario:unit:EUR/tonne\r\n    customPricesScenario:yrb:none\r\n\r\nThe first line specifies the currency in which prices are expressed. Note that the tool is actually not capable of dealing with other mass-units than `tonne`, so stick to it. The second line is not mandatory. It only allows you to simplify the potential future improvements of the tool. Finally, to imply the just-added trajectory of prices in your calculations, simply instantiate `CBACalculator` with `'customPricesScenario'`, *i.e.*\r\n\r\n    >>> cba = cc.CBACalculator(\r\n            # ...\r\n            co2_prices_scenario = 'customPricesScenario', # not case sensitive\r\n            from_local_data     = True, # [!!!]\r\n            # ...\r\n        )\r\n\r\nNote that to add a new trajectory of annual output flows or one of yields, the approach is exactly the same as that described for CO2 prices. Simply enrich/modify your local copy.\r\n\r\n<hr>\r\n\r\n## Format of results\r\n\r\n  The generated results consist of three .xlsx files, namely [\\_quantities.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_quantities.xlsx), [\\_values.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_values.xlsx)  and [\\_NPVs.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_NPVs.xlsx) all three located in a folder that is named (by default) according to the arguments involved in the computation:\r\n\r\n\u2022\t[\\_quantities.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_quantities.xlsx) displays the quantities associated to each flow, among which, emissions from the process of production, emissions from the cultivation of the feedstock, land use change impact from soil, land use change impact from biomass, etc.\r\n\r\n\u2022\t[\\_values.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_values.xlsx) displays the monetary value of the different types of flows from both bioethanol and gasoline (\u201cblack\u201d) depending of the carbon price scenario that is chosen.\r\n\r\n\u2022\t[\\_NPVs.xlsx](https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_NPVs.xlsx) displays the net present values for both the uniform and the differentiated annualizations for the different types of flow again.\r\n\r\nNote that each column has a title that is very verbose \u2013 so as to make things as explicit as possible \u2013 regarding what is calculated. When the prefix **ut_** appears in the title it means that it is calculated for one unit tonne of biofuel. When the prefix **um_** appears in the title, it means that it is calculated for one unit megajoule of biofuel. When nothing is specified, it takes into account the total quantity of biofuel produced.\r\n\r\n<hr>\r\n\r\n## Paper's results replication\r\n\r\nAll the results presented in [Dupoux (In press)](https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf) can easily be reproduced. To replicate a specific result, one has to `import` the associated script. Its importation will run the code that is required to generate the results. The table that follows makes the association between the python `import`-commands and the cases presented in the paper.\r\n\r\n Paper's section and page | Python command                                                     | Invoked script\r\n ------------------------ | ------------------------------------------------------------------ | -------------------\r\n Subsection 3.2 page 12   | `from PyLUCCBA.examples import study_Grassland_DiscountingEffect`  | [*study_Grassland_DiscountingEffect.py*](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_DiscountingEffect.py)\r\n Subsection 3.2 page 13   | `from PyLUCCBA.examples import study_Grassland_CarbonPriceEffect`  | [*study_Grassland_CarbonPriceEffect.py*](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CarbonPriceEffect.py)\r\n Subsection 3.2 page 14   | `from PyLUCCBA.examples import study_Grassland_CombinedEffect`     | [*study_Grassland_CombinedEffect.py*](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CombinedEffect.py)\r\n Subsection 4.1 page 14   | `from PyLUCCBA.examples import study_Grassland_CompensatoryRate`   | [*study_Grassland_CompensatoryRate.py*](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CompensatoryRate.py)\r\n Subsection 4.2 page 15   | `from PyLUCCBA.examples import study_Grassland_PaybackPeriod`      | [*study_Grassland_PaybackPeriod.py*](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_PaybackPeriod.py)\r\n\r\n\r\nIn case you want to modify those scripts instead of simply invoking them, you can first copy them to your working directory, typing\r\n\r\n    >>> import PyLUCCBA as cc\r\n    >>> cc.folder_copier(name='examples')\r\n    'examples' folder copied to C:\\path\\to\\folder\r\n\r\nSecond, go to `C:\\path\\to\\folder`, where you will see a folder named `examples` that contains the exact copies of the scripts enumerated in the above table. To edit one of those scripts, say, [*study_Grassland_CompensatoryRate.py*](https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CompensatoryRate.py), right-click it and select option *Edit with [IDLE](http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/idle.html#windows-in-idle)*. Modify anything you want. To execute the script, type **F5**.\r\n\r\n<hr>\r\n\r\n## References\r\n\r\nHoefnagels, R., E. Smeets, and A. Faaij (2010). \u201c[Greenhouse gas footprints of different biofuel production systems](https://www.sciencedirect.com/science/article/pii/S1364032110000535)\u201d. _Renewable and Sustainable Energy Reviews_ 14.7, pp. 1661\u20131694.\r\n\r\nIEA (2015). _World Energy Outlook 2015_. Tech. rep. International Energy Agency.\r\n\r\nIPCC (2006). \u201cVolume 4: Agriculture, Forestry and Other Land Use\u201d. _IPCC guidelines for national greenhouse gas inventories 4_.\r\n\r\nPoeplau, C., A. Don, L. Vesterdal, J. Leifeld, B. VanWesemael, J. Schumacher, and A. Gensior (2011). \u201c[Temporal dynamics of soil organic carbon after land-use change in the temperate zone - carbon response functions as a model approach](https://www.researchgate.net/publication/242081920_Temporal_dynamics_of_soil_organic_carbon_after_land-use_change_in_the_temperate_zone-Carbon_response_functions_as_a_model_approach)\u201d. _Global Change Biology_ 17.7, pp. 2415\u20132427.\r\n\r\nThe European Commission (2010). \u201c[Commission decision of 10 June 2010 on guidelines for the calculation of land carbon stocks for the purpose of Annex V to Directive 2009/28/EC](https://www.emissions-euets.com/component/content/article/261-commission-decision-of-10-june-2010-on-guidelines-for-the-calculation-of-land-carbon-stocks-for-the-purpose-of-annex-v-to-directive-200928ec)\u201d. _Official Journal of The European Union_ 2010/335/E.\r\n\r\nDupoux, M. \u201c[The land use change time-accounting failure](https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf)\u201d (in press).\r\n\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/lfaucheux/PyLUCCBA/archive/0.9.23.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lfaucheux/PyLUCCBA", "keywords": "land use change,cost benefit analysis,environmental economics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyLUCCBA", "package_url": "https://pypi.org/project/PyLUCCBA/", "platform": "", "project_url": "https://pypi.org/project/PyLUCCBA/", "project_urls": {"Download": "https://github.com/lfaucheux/PyLUCCBA/archive/0.9.23.tar.gz", "Homepage": "https://github.com/lfaucheux/PyLUCCBA"}, "release_url": "https://pypi.org/project/PyLUCCBA/0.9.23/", "requires_dist": ["numpy (>=1.14.0)", "scipy (>=1.0.0)", "openpyxl (>=2.5.5)", "matplotlib (>=1.4.3)"], "requires_python": "", "summary": "A Land-Use-Change Cost-Benefit-Analysis calculator coded in Python27&3, PyLUCCBA.", "version": "0.9.23", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyLUCCBA</h1>\n<details>\n    <summary>A Land-Use-Change Cost-Benefit-Analysis calculator coded in Python.</summary>\n</details>\n<p><em>This package offers a compilation of environmental and economic data to generate environment-related net present values of any biofuel project with impacts to the environment (GHG emissions or sequestrations). It is coded in Python (compatible with both versions: 2 and 3). Python is a cross platform and a comprehensive extensible and editable language with a large community of users. The structure of the package is simple with accessible input data to which it is possible to add or suppress one\u2019s own trajectories (of prices, carbon stocks, etc).</em></p>\n<p><em>NB: In the following description we use the expression project's Net Present Value (NPV) multiple times. Note that this use is abusive since it actually refers to the environmental component of projects. For more details, see <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf\" rel=\"nofollow\">Dupoux (In press)</a></em></p>\n<hr>\n<ul>\n<li><a href=\"#code-coverage\" rel=\"nofollow\">Code coverage</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#example-usage\" rel=\"nofollow\">Example usage</a>\n<ul>\n<li><a href=\"#a-note-on-the-carbon-profitability-payback-period\" rel=\"nofollow\">A note on the carbon profitability payback period</a></li>\n<li><a href=\"#a-note-on-the-compensatory-rate\" rel=\"nofollow\">A note on the compensatory rate</a></li>\n</ul>\n</li>\n<li><a href=\"#invoking-documentation\" rel=\"nofollow\">Invoking documentation</a></li>\n<li><a href=\"#data\" rel=\"nofollow\">Data</a></li>\n<li><a href=\"#data-customizationaddition\" rel=\"nofollow\">Data customization/addition</a></li>\n<li><a href=\"#format-of-results\" rel=\"nofollow\">Format of results</a></li>\n<li><a href=\"#papers-results-replication\" rel=\"nofollow\">Paper's results replication</a></li>\n<li><a href=\"#references\" rel=\"nofollow\">References</a></li>\n</ul>\n<hr>\n<h2>Code coverage</h2>\n<table>\n<thead>\n<tr>\n<th>Module</th>\n<th>statements</th>\n<th>missing</th>\n<th>excluded</th>\n<th>coverage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>core.py</td>\n<td>880</td>\n<td>26</td>\n<td>0</td>\n<td>97%</td>\n</tr>\n<tr>\n<td>tools.py</td>\n<td>308</td>\n<td>60</td>\n<td>0</td>\n<td>81%</td>\n</tr>\n<tr>\n<td>Total</td>\n<td>1188</td>\n<td>86</td>\n<td>0</td>\n<td>93%</td>\n</tr></tbody></table>\n<hr>\n<h2>Installation</h2>\n<p>First, you need Python installed, either <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python2.7.+</a> or <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python3.+</a>. Either versions are good for our purpose. Then, we are going to use a package management system to install <a href=\"https://github.com/lfaucheux/PyLUCCBA\" rel=\"nofollow\">PyLUCCBA</a>, namely <a href=\"https://en.wikipedia.org/wiki/Pip_(package_manager)\" rel=\"nofollow\">pip</a>, <em>already installed if you are using Python 2 &gt;=2.7.9 or Python 3 &gt;=3.4</em>. Open a session in your OS <a href=\"https://en.wikipedia.org/wiki/Shell_(computing)\" rel=\"nofollow\">shell</a> prompt and type</p>\n<pre><code>pip install pyluccba\n</code></pre>\n<p>Or using a non-python-builtin approach, namely <a href=\"https://git-scm.com/downloads\" rel=\"nofollow\">git</a>,</p>\n<pre><code>git clone git://github.com/lfaucheux/PyLUCCBA.git\ncd PyLUCCBA\npython setup.py install \n</code></pre>\n<hr>\n<h2>Example usage</h2>\n<p><em>The example that follows is done with the idea of showing how to go beyond the replication of the results presented in <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf\" rel=\"nofollow\">Dupoux (In press)</a> via the Python Shell</em>.</p>\n<p>Let's first import the module <code>PyLUCCBA</code></p>\n<pre><code>&gt;&gt;&gt; import PyLUCCBA as cc\n</code></pre>\n<p>The alias of <code>PyLUCCBA</code>, namely <code>cc</code>, actually contains many objects definitions, such as that of the calculator that we are going to use in examples. The name of the calculator is <code>CBACalculator</code>.</p>\n<p>But before using the calculator as such, let's define (and introduce) the set of parameters that we are going to use to configure <code>CBACalculator</code>. As can be expected when performing a cost benefit analysis, these parameters are related to: <em>(i)</em> the horizon of the project, <em>(ii)</em> the discount rate that we want to use in our calculations, <em>(iii)</em> the scenarized price trajectory of carbon dioxide (CO2), <em>(iv)</em> the scenarized trajectory of quantities of bio-ethanol to produce annually and <em>(...)</em> so on. Let's introduce them all in practice:</p>\n<pre><code>&gt;&gt;&gt; cba = cc.CBACalculator(\n        run_name               = 'Example-1',\n        country                = 'france',\n        project_first_year     = 2020,\n        project_horizon        = 20,\n        discount_rate          = .03,\n        co2_prices_scenario    = 'SPC2009',\n        output_flows_scenario  = 'O',\n        initial_landuse        = 'improved grassland',\n        final_landuse          = 'wheat',\n        input_flows_scenario   = 'IFP',\n        T_so                   = 20,\n        T_vg_diff              = 1,\n        T_vg_unif              = 20,\n        polat_repeated_pattern = True,\n        final_currency         = 'EUR',\n        change_rates           = {'EUR':{'USD/EUR':1.14}}, # https://www.google.fr/#q=EUR+USD\n        return_charts          = True,\n        save_charts            = True,\n        from_local_data        = False,\n    )\n</code></pre>\n<p>The following table enumerates all parameters that can be used to create an instance of <code>CBACalculator</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter's name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>run_name</code></td>\n<td>name of the folder that will contain the generated results and charts, <em>e.g.</em> <code>'Example-1'</code>.</td>\n</tr>\n<tr>\n<td><code>country</code></td>\n<td>name of the country under study. Only <em>one</em> possible choice currently: <code>France</code>.</td>\n</tr>\n<tr>\n<td><code>project_first_year</code></td>\n<td>first year of the project.</td>\n</tr>\n<tr>\n<td><code>project_horizon</code></td>\n<td>duration of the biofuel production project (years).</td>\n</tr>\n<tr>\n<td><code>discount_rate</code></td>\n<td>rate involved in the calculations of net present values. Set to <code>0.</code> by default.</td>\n</tr>\n<tr>\n<td><code>co2_prices_scenario</code></td>\n<td>name of the trajectory of CO2 prices. The current choices are <code>'A'</code>, <code>'B'</code>, <code>'C'</code>, <code>'DEBUG'</code>, <code>'O'</code>, <code>'OECD2018'</code>, <code>'SPC2009'</code>, <code>'SPC2019'</code>, <code>'WEO2015-450S'</code>, <code>'WEO2015-CPS'</code>, <code>'WEO2018-CPS'</code>, <code>'WEO2015-NPS'</code>, <code>'WEO2018-NPS'</code> or <code>'WEO2018-SDS'</code>.</td>\n</tr>\n<tr>\n<td><code>output</code></td>\n<td>name of the produced biofuel. Set to <code>'eth'</code> by default. Only <em>one</em> possible choice currently: <code>'eth'</code>. <em><strong>NB</strong></em>: <code>'eth'</code> actually stands for <strong>bio</strong>ethanol.</td>\n</tr>\n<tr>\n<td><code>black_output</code></td>\n<td>name of the counterfactual produced output. Serves as the reference according to which the production of bioethanol (<code>'eth'</code>) is considered (or not) as pro-environmental. Set to <code>'oil'</code> by default. Only <em>one</em> possible choice currently: <code>'oil'</code>. <em><strong>NB</strong></em>: <code>'oil'</code> actually stands for gasoline.</td>\n</tr>\n<tr>\n<td><code>output_flows_scenario</code></td>\n<td>name of the trajectory of annually produced quantities of biofuel. The current choices are <code>'DEBUG'</code> or <code>'O'</code>.</td>\n</tr>\n<tr>\n<td><code>initial_landuse</code></td>\n<td>use of the land <em>before</em> land conversion. The current choices are <code>'forestland30'</code>, <code>'improved grassland'</code>, <code>'annual cropland'</code> or <code>'degraded grassland'</code>.</td>\n</tr>\n<tr>\n<td><code>final_landuse</code></td>\n<td>use of the land <em>after</em> land conversion. The current choices are <code>'miscanthus'</code>, <code>'sugarbeet'</code> or <code>'wheat'</code>.</td>\n</tr>\n<tr>\n<td><code>input_flows_scenario</code></td>\n<td>name of the trajectory of input-to-ouput yields. The current choices depend on the value set for <code>final_landuse</code>. If <code>final_landuse</code> is set to <code>'miscanthus'</code>, the possibilities are <code>'DEBUG'</code> and <code>'DOE'</code>. If <code>final_landuse</code> is set to <code>'wheat'</code> or <code>'sugarbeet'</code>, the possibilities are <code>'IFP'</code> and <code>'DEBUG'</code>.</td>\n</tr>\n<tr>\n<td><code>T_so</code></td>\n<td>period over which soil carbon emissions due to LUC are considered.</td>\n</tr>\n<tr>\n<td><code>T_vg_diff</code></td>\n<td>period over which vegetation carbon emissions due to LUC are considered in the differentiated annualization approach.</td>\n</tr>\n<tr>\n<td><code>T_vg_unif</code></td>\n<td>period over which vegetation carbon emissions due to LUC are considered in the uniform annualization approach.</td>\n</tr>\n<tr>\n<td><code>polat_repeated_pattern</code></td>\n<td>if <code>True</code>, retro/extra-polation pattern is repeated before/after the first/last mentioned value. Otherwise, it is maintained constant.</td>\n</tr>\n<tr>\n<td><code>final_currency</code></td>\n<td>currency used to conduct the study and express the results. The current choices are <code>'EUR'</code> or <code>'USD'</code>. Set to <code>'EUR'</code> by default.</td>\n</tr>\n<tr>\n<td><code>change_rates</code></td>\n<td><code>final_currency</code>-dependent exchange rate to consider in calculations, <em>e.g.</em> <code>{'EUR':{'USD/EUR':1.14,}}</code> <em>(or <code>{'EUR':{'EUR/USD':0.8772,}}</code> since the tool ensures dimensional homogeneity)</em>.</td>\n</tr>\n<tr>\n<td><code>return_charts</code></td>\n<td>if <code>True</code>, charts are returned (for interactive use, e.g. hovering). Set to <code>True</code> by default.</td>\n</tr>\n<tr>\n<td><code>save_charts</code></td>\n<td>if <code>True</code>, charts are saved on the disk. Set to <code>True</code> by default.</td>\n</tr>\n<tr>\n<td><code>from_local_data</code></td>\n<td>if <code>True</code>, scenarized trajectories (<em>e.g.</em> of CO2 prices, of output flows quantities, of yields) are read from the 'resources' folder that is located next to the working script. If <code>False</code>, those are read from the 'resources' folder natively contained in the package directory. Set to <code>False</code> by default.</td>\n</tr></tbody></table>\n<p>Once we have our instance of <code>CBACalculator</code> in hand, <em>i.e.</em> <code>cba</code>, we may wonder what are the scenarized trajectories over which we are about to conduct our study, <em>e.g.</em> of CO2 prices, produced quantities of biofuel, etc. In this case, we can simply type:</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_output_flows_traj.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82c52ea7deae20f9a9e726f2f71e0cd2abe6bdd3/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e45532532304554482532302535424f2535442e706e673f7261773d74727565\" width=\"60%\"><img></p>\n<p>As it reads in the above chart, we are about to work with a constant level of production over the project horizon. Note the absence of flow in 2020: this illustrates the need for waiting one year before having enough wheat to produce biofuel.</p>\n<p>We may then wonder what is the counterfactual trajectory in terms of gasoline \u2013 targeting the same <a href=\"https://en.wikipedia.org/wiki/Energy_conversion_efficiency\" rel=\"nofollow\">energy efficiency</a> (in joule) as conversion basis:</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_black_output_flows_traj.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97e3fe70263381720f9a4ab4459a358696f0ad4b/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e45532532304f494c2532302535424f2535442e706e673f7261773d74727565\" width=\"60%\"><img></p>\n<p>Now, let's see which trajectory of CO2 prices is behind the name <code>'SPC2009'</code> \u2013 which stands for <a href=\"http://www.ladocumentationfrancaise.fr/var/storage/rapports-publics/094000195.pdf\" rel=\"nofollow\">Quinet (2009)</a>'s shadow price of carbon:</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_co2_prices_traj.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c33bf570352a1df50a10527e7a8f0f3ae699a6d6/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f505249434553253230636f32253230253542535043323030392535442e706e673f7261773d74727565\" width=\"60%\"><img></p>\n<p>We may also wonder which quantities trajectory of wheat is implied by that of biofuel on the one hand, and by the value we set for the parameter <code>input_flows_scenario</code>, that is <code>'IFP'</code> , on the other hand \u2013 where <em>I.F.P</em> stands for <em>Institut Fran\u00e7ais du P\u00e9trole \u00e9nergies nouvelles</em> \u2013 which made a report in <a href=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/yields/Input/Input.txt\" rel=\"nofollow\">2013</a> in which it reads that, with 1 tonne of wheat, one can produce <a href=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/yields/Input/WHEAT_yields_FR.csv\" rel=\"nofollow\">0.2844</a> tonnes of bioethanol. Let's vizualize that:</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_input_flows_traj.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ccddc42f3884d13784a6b3656f61b1d61635a4a/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230696e70757425323025354249465025354425354257484541542535442e706e673f7261773d74727565\" width=\"60%\"><img></p>\n<p>Note the absence of input flow in 2040: as explained previously, this illustrates the time delay that exists between the cultivation of wheat and its processing into bioethanol, <em>e.g.</em> wheat cultivated in 2039 is used for the production of bioethanol planned in 2040.</p>\n<p>The land use change from <code>initial_landuse='improved grassland'</code> to <code>final_landuse='wheat'</code> has effects in terms of CO2 emissions. These emissions clearly do not exhibit the same profile depending on how we choose to consider them over the project horizon. First, regarding soil CO2 emissions:</p>\n<pre><code>&gt;&gt;&gt; cba.carbon_and_co2_flows_traj_annualizer.so_emitting\nTrue\n&gt;&gt;&gt; cba.chart_of_soco2_unif_flows_traj.show()\n&gt;&gt;&gt; cba.chart_of_soco2_diff_flows_traj.show()\n---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\n---- [***]The solution converged.[0.000000e+00][***]\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1016833e023ffd922030f7e3d13d57156fd8362/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f32253230736f253230253542756e69662d494d50524f56454425323047524153534c414e447e57484541542535442e706e673f7261773d74727565\" width=\"50%\"><img><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ae1265269b7d48fa87382e203842b7c1b7c305a/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f32253230736f253230253542646966662d494d50524f56454425323047524153534c414e447e57484541542535442e706e673f7261773d74727565\" width=\"50%\"><img></p>\n<p>Of course, the comparison makes sense since the total emitted stocks are identical:</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.sum(cba.soco2_unif_flows_traj)\n-10.90041830757967 # tonnes\n&gt;&gt;&gt; np.sum(cba.soco2_diff_flows_traj)\n-10.90041830757967 # tonnes\n</code></pre>\n<p>On the side of vegetation-related emissions, converting grassland into wheat field generates a loss of carbon since the latter is harvested annually while the former sequestrates carbon on a pertpetual basis. Here again, emissions' profiles are clearly different under differentiated or uniform annualization approach, see</p>\n<pre><code>&gt;&gt;&gt; cba.carbon_and_co2_flows_traj_annualizer.vg_emitting\nTrue\n&gt;&gt;&gt; cba.chart_of_vgco2_unif_flows_traj.show()\n&gt;&gt;&gt; np.sum(cba.vgco2_unif_flows_traj)\n-7.130970463238133 # tonnes\n&gt;&gt;&gt; cba.chart_of_vgco2_diff_flows_traj.show()\n---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\n---- [***]The solution converged.[0.000000e+00][***]\n&gt;&gt;&gt; np.sum(cba.vgco2_diff_flows_traj)\n-7.130970463238132 # tonnes\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9b4b93f5b349cbece7966851ea25a6f3d6a43b9/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f322532307667253230253542756e69662d494d50524f56454425323047524153534c414e447e57484541542535442e706e673f7261773d74727565\" width=\"50%\"><img><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ec7ed1425ac809261d952270f0edbcce9eb28c3/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f322532307667253230253542646966662d494d50524f56454425323047524153534c414e447e57484541542535442e706e673f7261773d74727565\" width=\"50%\"><img></p>\n<p>Independently of how we annualize the LUC-related CO2 emissions, the cultivation and the processing of wheat generate emissions annually as well. See</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_cult_input_co2eq_flows_traj.show()\n&gt;&gt;&gt; cba.chart_of_proc_input_co2eq_flows_traj.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/354ce8c76dfa3d5ff8db2afc348a85c70117cc98/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f32657125323025354263756c742d57484541542535442e706e673f7261773d74727565\" width=\"50%\"><img><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c123a281ccbbfdd9f1e592421924d68bf356f1e0/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f32657125323025354270726f632d57484541542535442e706e673f7261773d74727565\" width=\"50%\"><img></p>\n<p>Once again, the two above charts unambiguously illustrate the time delay that exists between the cultivation of wheat and its processing into bioethanol, <em>i.e.</em> wheat cultivated in year <em>t-1</em> is used for the production of bioethanol planned in year <em>t</em>. Also, note that these cultivation- and processing-related emissions are in <em>CO2eq</em> since <em>CH4</em> and <em>N2O</em> flows are considered as well, using their relative global warming potentials \u2013 relatively to that of CO2 \u2013 as a basis of conversion. See calculation details at <a href=\"https://github.com/lfaucheux/PyGWP\" rel=\"nofollow\">PyGWP</a>.</p>\n<p>Finally, under the two types of annualization approach, the total emissions following a change in land use from improved grassland into wheat field are:</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_total_unif_co2_flows_traj.show()\n&gt;&gt;&gt; cba.chart_of_total_diff_co2_flows_traj.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef15b8bce3f02c7f2b46c316290d31e5f717d0d3/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f32253230746f74616c253230253542756e69662d4554482535442e706e673f7261773d74727565\" width=\"50%\"><img><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5f00862d27d7e74d6ad5cf2059b7b394f88f641/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f464c4f5753253230544f4e4e4553253230636f32253230746f74616c253230253542646966662d4554482535442e706e673f7261773d74727565\" width=\"50%\"><img></p>\n<p>which, when monetized with a non-zero discount rate and compared in terms of absolute deviations from gasoline's valorized CO2 flows, lead to sensitivly different profiles for the values of the environmental component of the project, see rather</p>\n<pre><code>&gt;&gt;&gt; cba.chart_of_NPV_total_unif_minus_black_output_co2_flows_trajs.show()\n&gt;&gt;&gt; cba.chart_of_NPV_total_diff_minus_black_output_co2_flows_trajs.show()\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3cd093ca293050df6728885e8bd2633902dc593d/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f644e5056253230636f32253230746f74616c253230253542756e69662d535043323030392d45544876734f494c2535442e706e673f7261773d74727565\" width=\"50%\"><img><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f8182b94f970f08f3b4436756720e4f26c55f66/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f644e5056253230636f32253230746f74616c253230253542646966662d535043323030392d45544876734f494c2535442e706e673f7261773d74727565\" width=\"50%\"><img></p>\n<p>Note the slope-breaks that occur during the last year. This is due to the fact that cultivation and its associated emission flows generally \u2013 depending on the type of final land use \u2013 finish one year before the end of the project, which structurally increases projects' NPVs.</p>\n<h3>A note on the carbon profitability payback period</h3>\n<p>Actually, it looks like extending the horizon of the project may be a good idea to see whether one of the two NPVs' profiles \u2013 shown above \u2013 exhibit positive values over the long run. Put differently, let's vizualize <em>when</em> the project exhibits positive NPV under each annualization approach.</p>\n<p>\u2022\t<em>NB1: the project horizon must be long enough for such a payback period to exist. Hence the extension from 20 to 50 years configured below.</em></p>\n<p>\u2022\t<em>NB2: given that cultivation and its associated flows of emission generally \u2013 depending on the type of final land use \u2013 stop before the end of the project, the last year of the project is structurally more environment-friendly, which increases projects' NPVs (see the jump in the charts above), in some cases to such an extent that the last year actually becomes the payback period, hence the NB1</em>.</p>\n<pre><code>&gt;&gt;&gt; cba._clear_caches()    # we clear the cache of our instance since we are going to change a calculation parameter.\nGlobalWarmingPotential     # the tool enumerates objects whose cache have been cleaned.\nOutputFlows\nCarbonAndCo2FlowsAnnualizer\nLandSurfaceFlows\nCo2Prices\nCBACalculator\n&gt;&gt;&gt; cba.project_horizon = 50    # we set a long project horizon\n&gt;&gt;&gt; cba.chart_of_NPV_total_unif_minus_black_output_co2_flows_trajs.show()\n&gt;&gt;&gt; cba.chart_of_NPV_total_diff_minus_black_output_co2_flows_trajs.show()\n---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\n---- [***]The solution converged.[0.000000e+00][***]\n---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\n---- [***]The solution converged.[0.000000e+00][***]\n</code></pre>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c12d495ba6d7257ce10285d1964783666d44ce77/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f644e5056253230636f32253230746f74616c253230253542756e69662d535043323030392d45544876734f494c2535442d657874656e6465642e706e673f7261773d74727565\" width=\"50%\"><img><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/377010023a09410687eef7ec7dd12b9d8af86639/68747470733a2f2f6769746875622e636f6d2f6c66617563686575782f50794c55434342412f626c6f622f6d61737465722f50794c55434342412f6578616d706c65732f4578616d706c652d312f644e5056253230636f32253230746f74616c253230253542646966662d535043323030392d45544876734f494c2535442d657874656e6465642e706e673f7261773d74727565\" width=\"50%\"><img></p>\n<p>Rather than vizualizing the NPVs' profiles, we may use a precise way to know <em>when</em> a project becomes <em>environmentally</em> profitable \u2013 referred to as <em>Carbon Profitability Payback Period</em> in <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf\" rel=\"nofollow\">Dupoux (In press)</a> \u2013 for each type of annualization approach.</p>\n<pre><code>&gt;&gt;&gt; cba.unif_payback_period\n41 # years\n&gt;&gt;&gt; cba.diff_payback_period\n35 # years\n</code></pre>\n<p>Let's be precautious and go back to the project's settings of interest for the rest of the example.</p>\n<pre><code>&gt;&gt;&gt; cba._clear_caches()\nGlobalWarmingPotential\nOutputFlows\nCarbonAndCo2FlowsAnnualizer\nLandSurfaceFlows\nCo2Prices\nCBACalculator\n&gt;&gt;&gt; cba.project_horizon = 20    # let's go back to our initial settings !\n</code></pre>\n<h3>A note on the compensatory rate</h3>\n<p>We may wonder under which discount rate the two approaches of annualization \u2013 uniform <em>versus</em> differentiated \u2013 would lead to the same NPV over the project horizon. To do so, we have to use another object that is defined in <code>PyLUCCBA</code>, namely <code>CBAParametersEndogenizer</code>. Let's continue our example and instantiate it:</p>\n<pre><code>&gt;&gt;&gt; gen = cc.CBAParametersEndogenizer(CBACalculator_instance = cba)\n</code></pre>\n<p>With <code>gen</code> in hand, we can now determine which discount rate equalizes our two NPVs, as follows:</p>\n<pre><code>&gt;&gt;&gt; cba_eq = gen.endo_disc_rate_which_eqs_NPV_total_unif_co2_flows_traj_to_NPV_total_diff_co2_flows_traj\n---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\n---- [***]The solution converged.[0.000000e+00][***]\n---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\n---- [***]The solution converged.[0.000000e+00][***]\n---- disc rate equating unif- and diff-based NPVs sol=[0.05420086]\n---- [***]The solution converged.[4.440892e-16][***]\n</code></pre>\n<p>Note that <code>cba_eq</code> is the <code>disc_rate</code>-balanced counterpart of <code>cba</code>. It reads above that, \"so configured\", our project would have identical NPVs under the uniform and differentiated annualization approaches for a discount rate of 5.42%.</p>\n<p>At anytime, we can have a quick look at what is meant exactly by \"so configured\", typing</p>\n<pre><code>&gt;&gt;&gt; print(cba_eq.summary_args)\n**************************************************************************************\nrun_name                : Example-1\noutput                  : ETH\nblack_output            : OIL\ninitial_landuse         : IMPROVED GRASSLAND\nfinal_landuse/input     : WHEAT\ncountry                 : FRANCE\nproject_horizon         : 21 # because of the time delay between cultivation and processing, taken at t0 - 1.\nT_so                    : 20\nT_vg_diff               : 1\nT_vg_unif               : 20\nproject_first_year      : 2020\npolat_repeated_pattern  : True\nco2_prices_scenario     : SPC2009\ndiscount_rate           : [0.05420086] # our endogenized compensatory rate\ndiff_payback_period     : []\nunif_payback_period     : []\nfinal_currency          : EUR\nchange_rates            : {'USD/EUR': 1.14}\noutput_flows_scenario   : O\ninput_flows_scenario    : IFP\nmessage                 : _ENDOGENIZER finally says sol=0.0542008612895724 \n                          obj(sol)=[4.4408921e-16]\n</code></pre>\n<hr>\n<h2>Invoking documentation</h2>\n<p>You should abuse of the python-builtin function <a href=\"https://www.programiz.com/python-programming/methods/built-in/help\" rel=\"nofollow\"><code>help</code></a> on any object defined in PyLUCCBA, as well as on any instantiated object, <em>e.g.</em></p>\n<pre><code>&gt;&gt;&gt; import PyLUCCBA as cc\n&gt;&gt;&gt; help(cc.CBAParametersEndogenizer)\nHelp on CBAParametersEndogenizer in module PyLUCCBA.core object:\n\nclass CBAParametersEndogenizer(builtins.object)\n |  Class object designed to handle a CBACalculator instances and to\n |  endogenize some of its parameter.\n |  \n |  Methods defined here:\n |  \n |  __init__(self, CBACalculator_instance)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  OBJECTIVE_NPV_total_unif_co2_flows_traj_VS_NPV_total_diff_co2_flows_traj\n |      Method which computes the objective of the discount rate\n |      endogenizing process.\n |      \n |      Testing/Example\n |      ---------------\n |      &gt;&gt;&gt; _dr_ = 0.03847487575799428 ## the solution\n |      &gt;&gt;&gt; cba = CBACalculator._testing_instancer(\n |      ...     dr = _dr_, \n |      ...     sc = 'WEO2015-CPS',\n |      ... )\n |      &gt;&gt;&gt; CBAParametersEndogenizer(\n |      ...     CBACalculator_instance = cba\n |      ... ).OBJECTIVE_NPV_total_unif_co2_flows_traj_VS_NPV_total_diff_co2_flows_traj\n |      ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\n |      ---- [***]The solution converged.[0.000000e+00][***]\n |      ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\n |      ---- [***]The solution converged.[0.000000e+00][***]\n |      array([2.22044605e-16])\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  endo_disc_rate_which_eqs_NPV_total_unif_co2_flows_traj_to_NPV_total_diff_co2_flows_traj\n |      Returns a CBACalculator instance configured with the discount rate\n |      which equates NPV_total_unif_co2_flows_traj TO NPV_total_diff_co2_flows_traj.\n |      \n |      Testing/Example\n |      ---------------\n |      &gt;&gt;&gt; cba = CBACalculator._testing_instancer(\n |      ...     sc = 'WEO2015-CPS',\n |      ... )\n |      &gt;&gt;&gt; o = CBAParametersEndogenizer(\n |      ...     CBACalculator_instance = cba\n |      ... )\n |      &gt;&gt;&gt; o.endo_disc_rate_which_eqs_NPV_total_unif_co2_flows_traj_to_NPV_total_diff_co2_flows_traj.discount_rate[0]\n |      ---- a_parameter_which_solves_soc_chosen_CRF_constrained sol=[0.52418009]\n |      ---- [***]The solution converged.[0.000000e+00][***]\n |      ---- a_parameter_which_solves_vgc_chosen_CRF_constrained sol=[0.02458071]\n |      ---- [***]The solution converged.[0.000000e+00][***]\n |      ---- disc rate equating unif- and diff-based NPVs sol=[0.03847488]\n |      ---- [***]The solution converged.[2.220446e-16][***]\n |      0.038474875757994256\n</code></pre>\n<p>I invite you to test the function <code>help</code> on any of the following objects: <code>cc.BlackOutputAndSubstitutesSpecificities</code>, <code>cc.CBACalculator</code>, <code>cc.CBAParametersEndogenizer</code>, <code>cc.CarbonAndCo2FlowsAnnualizer</code>, <code>cc.Co2Prices</code>, <code>cc.GlobalWarmingPotential</code>, <code>cc.InputFlows</code>, <code>cc.LandSurfaceFlows</code>, <code>cc.OutputFlows</code>, <code>cc.VGCAndSOCDeltas</code>, <code>cc.VegetationsAndSoilSpecificities</code>.</p>\n<hr>\n<h2>Data</h2>\n<p>Data are stored in the <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources\" rel=\"nofollow\">resources</a> folder, composed of the following subfolders:</p>\n<p>\u2022\tThe <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/__meta__\" rel=\"nofollow\"><strong>meta</strong></a> folder, which includes <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/resources/__meta__/BioGrace%20Excel%20tool%20-%20version%204c.xls\" rel=\"nofollow\">BioGrace Excel tool - version 4c.xls</a> and <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/resources/__meta__/Data_CarbonStocks_Emissions.xlsx\" rel=\"nofollow\">Data_CarbonStocks_Emissions.xlsx</a>, in which you can see all the calculations of carbon stocks for each type of land use.</p>\n<p>\u2022\tThe <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/dluc\" rel=\"nofollow\">dluc</a> folder, which includes three datafiles, namely <em>(i) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/dluc/cs_changes_fr.csv\" rel=\"nofollow\">cs_changes_fr.csv</a></em> relating to the carbon stock associated with specific types of land use, <em>(ii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/dluc/so_ghgs_shares_fr.csv\" rel=\"nofollow\">so_ghgs_shares_fr.csv</a></em> relating to the share of soil carbon that translate to actual emissions/sequestrations and <em>(iii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/dluc/vg_ghgs_shares_fr.csv\" rel=\"nofollow\">vg_ghgs_shares_fr.csv</a></em> relating to the share of vegetation carbon that translate to actual emissions/sequestrations. Each of these csv files possesses a txt counterpart with the same name, which provides mandatory information regarding, e.g., the unit of measurement of data.</p>\n<p>\u2022\tThe <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/externality\" rel=\"nofollow\">externality</a> folder, which includes three datafiles, namely <em>(i) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/co2_prices_fr.csv\" rel=\"nofollow\">co2_prices_fr.csv</a></em> relating to the CO2 price-trajectory scenarios, <em>(ii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/cult_ghgs_fr.csv\" rel=\"nofollow\">cult_ghgs_fr.csv</a></em> relating to the quantity of GHG emissions associated with the cultivation of land and <em>(iii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/proc_ghgs_fr.csv\" rel=\"nofollow\">proc_ghgs_fr.csv</a></em> relating to the processing of energy crop to biofuel. Each of these csv files possesses a txt counterpart that has the same name, which provides mandatory information regarding, e.g., the unit of measurement of data.</p>\n<p>\u2022\tThe <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/input\" rel=\"nofollow\">input</a> folder, which includes four datafiles, namely <em>(i) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/haeth_yields_fr.csv\" rel=\"nofollow\">haeth_yields_fr.csv</a></em> relating to the number of tonnes of ethanol per hectare over time and <em>(ii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/miscanthus_yields_fr.csv\" rel=\"nofollow\">miscanthus_yields_fr.csv</a></em>, <em><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/sugarbeet_yields_fr.csv\" rel=\"nofollow\">sugarbeet_yields_fr.csv</a></em> and <em><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/input/wheat_yields_fr.csv\" rel=\"nofollow\">wheat_yields_fr.csv</a></em> relating to the number of tonnes of feedstock necessary to produce one tonne of biofuel. As before, almost each of these csv files has a txt counterpart that provides mandatory information on data. In the case of datafiles with no txt counterpart, the tool searches for information in a txt file with the same name as the parent folder's, i.e. <em>input.txt</em> in this case.</p>\n<p>\u2022\tThe <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources/output\" rel=\"nofollow\">output</a> folder, which includes three datafiles, namely <em>(i) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/output/eth_yields_fr.csv\" rel=\"nofollow\">eth_yields_fr.csv</a></em> that tautologically states that one tonne of biofuel is produced per tonne of output, <em>(ii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/output/cult_to_proc_delays_fr.csv\" rel=\"nofollow\">cult_to_proc_delays_fr.csv</a></em> relating to the time delay required between cultivation and processing of feedstock and <em>(iii) <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/output/subs_intensities_fr.csv\" rel=\"nofollow\">subs_intensities_fr.csv</a></em> relating to the amount of energy and emissions associated with bioethanol and oil. Once again, each of these csv files has a txt counterpart that provides mandatory information on data.</p>\n<p><em>NB1</em>: all files with a name containing either <em>\"_yields\"</em> or <em>\"_prices\"</em> consist of temporal trajectories. These trajectories can be sparse. Indeed, when sparse trajectories with more than one point are provided, say, CO2 prices such as in the scenario <em>WEO2015-CPS</em> \u2013 see <a href=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/externality/co2_prices_fr.csv\" rel=\"nofollow\">co2_prices_fr.csv</a> \u2013, the tool automatically retro/inter/extrapolates the values for each year in an exponential way. When both retro- and extrapolation are possible, retropolation is chosen by using the next period's rate of growth. Then, if the parameter <code>polat_repeated_pattern</code> is set to <code>True</code>, extrapolation is performed by repeating the entire anterior pattern of growth rates from the last known value. If the parameter is set to <code>False</code>, the last known value is kept constant over the project horizon. In the case of sparse trajectories that contain only one value \u2013 see <em>e.g.</em> <a href=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/input/wheat_yields_fr.csv\" rel=\"nofollow\">wheat_yields_fr.csv</a> \u2013, the trajectory is assumed to be flat over the project horizon.</p>\n<p><em>NB2</em>: all files with a name containing either <em>\"_yields\"</em> or <em>\"_prices\"</em> must possess a txt file counterpart providing information on their unit of measurement. Indeed, they are read and interpreted with the intention of ensuring the dimensional homogenity of calculations. For example, if, say, <em>tonne/ha</em> is required for calculation and that the unit of measurement is <em>ha/tonne</em>, the numerical inverse is computed prior to core-calculations.</p>\n<hr>\n<h2>Data customization/addition</h2>\n<p>You may want to add your own scenarii regarding, e.g., how the price of CO2 evolves over time, the trajectory of output flows produced annually, the quantity of input that is required to produce 1 tonne of output, etc...\nThe easiest way of working with custom data is to imitate the package-native data contained in the <a href=\"https://github.com/lfaucheux/PyLUCCBA/tree/master/PyLUCCBA/resources\" rel=\"nofollow\"><em>resources</em></a> folder. Let's start with a local copy of this folder:</p>\n<pre><code>&gt;&gt;&gt; import PyLUCCBA as cc\n&gt;&gt;&gt; cc.folder_copier(name='resources')\n'resources' folder copied to C:\\path\\to\\folder\n</code></pre>\n<p>Now, to explore the data, go to <code>C:\\path\\to\\folder</code>, where you will see a folder named <em>resources</em> that is the exact copy of the data used in <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf\" rel=\"nofollow\">Dupoux (In press)</a>.</p>\n<h4>Adding new data</h4>\n<p>To add new data, e.g. a scenario of CO2 prices, go to the folder <em>resources\\externality</em> of your local copy. There, you will find two files, namely <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/co2_prices_fr.csv\" rel=\"nofollow\">co2_prices_fr.csv</a> and <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/resources/externality/co2_prices_fr.txt\" rel=\"nofollow\">co2_prices_fr.txt</a>. First, open the csv file, add a scenario's name <a href=\"https://github.com/lfaucheux/PyLUCCBA/blob/master/PyLUCCBA/resources/externality/co2_prices_fr.csv#L1\" rel=\"nofollow\">in the first line</a>, <em>e.g.</em> <code>customPricesScenario</code>, and prices in the just-named column. Remember that your newly-added trajectory can be sparse and that the tool will retro/intra/extrapolate missing prices. Second, open the txt file and add two lines related to <code>customPricesScenario</code>, as shown below:</p>\n<pre><code>customPricesScenario:unit:EUR/tonne\ncustomPricesScenario:yrb:none\n</code></pre>\n<p>The first line specifies the currency in which prices are expressed. Note that the tool is actually not capable of dealing with other mass-units than <code>tonne</code>, so stick to it. The second line is not mandatory. It only allows you to simplify the potential future improvements of the tool. Finally, to imply the just-added trajectory of prices in your calculations, simply instantiate <code>CBACalculator</code> with <code>'customPricesScenario'</code>, <em>i.e.</em></p>\n<pre><code>&gt;&gt;&gt; cba = cc.CBACalculator(\n        # ...\n        co2_prices_scenario = 'customPricesScenario', # not case sensitive\n        from_local_data     = True, # [!!!]\n        # ...\n    )\n</code></pre>\n<p>Note that to add a new trajectory of annual output flows or one of yields, the approach is exactly the same as that described for CO2 prices. Simply enrich/modify your local copy.</p>\n<hr>\n<h2>Format of results</h2>\n<p>The generated results consist of three .xlsx files, namely <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_quantities.xlsx\" rel=\"nofollow\">_quantities.xlsx</a>, <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_values.xlsx\" rel=\"nofollow\">_values.xlsx</a>  and <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_NPVs.xlsx\" rel=\"nofollow\">_NPVs.xlsx</a> all three located in a folder that is named (by default) according to the arguments involved in the computation:</p>\n<p>\u2022\t<a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_quantities.xlsx\" rel=\"nofollow\">_quantities.xlsx</a> displays the quantities associated to each flow, among which, emissions from the process of production, emissions from the cultivation of the feedstock, land use change impact from soil, land use change impact from biomass, etc.</p>\n<p>\u2022\t<a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_values.xlsx\" rel=\"nofollow\">_values.xlsx</a> displays the monetary value of the different types of flows from both bioethanol and gasoline (\u201cblack\u201d) depending of the carbon price scenario that is chosen.</p>\n<p>\u2022\t<a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/PyLUCCBA/examples/Example-1/_NPVs.xlsx\" rel=\"nofollow\">_NPVs.xlsx</a> displays the net present values for both the uniform and the differentiated annualizations for the different types of flow again.</p>\n<p>Note that each column has a title that is very verbose \u2013 so as to make things as explicit as possible \u2013 regarding what is calculated. When the prefix <strong>ut_</strong> appears in the title it means that it is calculated for one unit tonne of biofuel. When the prefix <strong>um_</strong> appears in the title, it means that it is calculated for one unit megajoule of biofuel. When nothing is specified, it takes into account the total quantity of biofuel produced.</p>\n<hr>\n<h2>Paper's results replication</h2>\n<p>All the results presented in <a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf\" rel=\"nofollow\">Dupoux (In press)</a> can easily be reproduced. To replicate a specific result, one has to <code>import</code> the associated script. Its importation will run the code that is required to generate the results. The table that follows makes the association between the python <code>import</code>-commands and the cases presented in the paper.</p>\n<table>\n<thead>\n<tr>\n<th>Paper's section and page</th>\n<th>Python command</th>\n<th>Invoked script</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Subsection 3.2 page 12</td>\n<td><code>from PyLUCCBA.examples import study_Grassland_DiscountingEffect</code></td>\n<td><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_DiscountingEffect.py\" rel=\"nofollow\"><em>study_Grassland_DiscountingEffect.py</em></a></td>\n</tr>\n<tr>\n<td>Subsection 3.2 page 13</td>\n<td><code>from PyLUCCBA.examples import study_Grassland_CarbonPriceEffect</code></td>\n<td><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CarbonPriceEffect.py\" rel=\"nofollow\"><em>study_Grassland_CarbonPriceEffect.py</em></a></td>\n</tr>\n<tr>\n<td>Subsection 3.2 page 14</td>\n<td><code>from PyLUCCBA.examples import study_Grassland_CombinedEffect</code></td>\n<td><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CombinedEffect.py\" rel=\"nofollow\"><em>study_Grassland_CombinedEffect.py</em></a></td>\n</tr>\n<tr>\n<td>Subsection 4.1 page 14</td>\n<td><code>from PyLUCCBA.examples import study_Grassland_CompensatoryRate</code></td>\n<td><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CompensatoryRate.py\" rel=\"nofollow\"><em>study_Grassland_CompensatoryRate.py</em></a></td>\n</tr>\n<tr>\n<td>Subsection 4.2 page 15</td>\n<td><code>from PyLUCCBA.examples import study_Grassland_PaybackPeriod</code></td>\n<td><a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_PaybackPeriod.py\" rel=\"nofollow\"><em>study_Grassland_PaybackPeriod.py</em></a></td>\n</tr></tbody></table>\n<p>In case you want to modify those scripts instead of simply invoking them, you can first copy them to your working directory, typing</p>\n<pre><code>&gt;&gt;&gt; import PyLUCCBA as cc\n&gt;&gt;&gt; cc.folder_copier(name='examples')\n'examples' folder copied to C:\\path\\to\\folder\n</code></pre>\n<p>Second, go to <code>C:\\path\\to\\folder</code>, where you will see a folder named <code>examples</code> that contains the exact copies of the scripts enumerated in the above table. To edit one of those scripts, say, <a href=\"https://raw.githubusercontent.com/lfaucheux/PyLUCCBA/master/PyLUCCBA/examples/study_Grassland_CompensatoryRate.py\" rel=\"nofollow\"><em>study_Grassland_CompensatoryRate.py</em></a>, right-click it and select option <em>Edit with <a href=\"http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/idle.html#windows-in-idle\" rel=\"nofollow\">IDLE</a></em>. Modify anything you want. To execute the script, type <strong>F5</strong>.</p>\n<hr>\n<h2>References</h2>\n<p>Hoefnagels, R., E. Smeets, and A. Faaij (2010). \u201c<a href=\"https://www.sciencedirect.com/science/article/pii/S1364032110000535\" rel=\"nofollow\">Greenhouse gas footprints of different biofuel production systems</a>\u201d. <em>Renewable and Sustainable Energy Reviews</em> 14.7, pp. 1661\u20131694.</p>\n<p>IEA (2015). <em>World Energy Outlook 2015</em>. Tech. rep. International Energy Agency.</p>\n<p>IPCC (2006). \u201cVolume 4: Agriculture, Forestry and Other Land Use\u201d. <em>IPCC guidelines for national greenhouse gas inventories 4</em>.</p>\n<p>Poeplau, C., A. Don, L. Vesterdal, J. Leifeld, B. VanWesemael, J. Schumacher, and A. Gensior (2011). \u201c<a href=\"https://www.researchgate.net/publication/242081920_Temporal_dynamics_of_soil_organic_carbon_after_land-use_change_in_the_temperate_zone-Carbon_response_functions_as_a_model_approach\" rel=\"nofollow\">Temporal dynamics of soil organic carbon after land-use change in the temperate zone - carbon response functions as a model approach</a>\u201d. <em>Global Change Biology</em> 17.7, pp. 2415\u20132427.</p>\n<p>The European Commission (2010). \u201c<a href=\"https://www.emissions-euets.com/component/content/article/261-commission-decision-of-10-june-2010-on-guidelines-for-the-calculation-of-land-carbon-stocks-for-the-purpose-of-annex-v-to-directive-200928ec\" rel=\"nofollow\">Commission decision of 10 June 2010 on guidelines for the calculation of land carbon stocks for the purpose of Annex V to Directive 2009/28/EC</a>\u201d. <em>Official Journal of The European Union</em> 2010/335/E.</p>\n<p>Dupoux, M. \u201c<a href=\"https://github.com/lfaucheux/PyLUCCBA/raw/master/Dupoux_inpress.pdf\" rel=\"nofollow\">The land use change time-accounting failure</a>\u201d (in press).</p>\n\n          </div>"}, "last_serial": 5022523, "releases": {"0.1.33": [{"comment_text": "", "digests": {"md5": "53381ad523f69823fc2c898e39624cfb", "sha256": "1aedb2fbb63ccf6c122fefa739cf1a0dac06b9e3b299e30e4ee99ae91e419207"}, "downloads": -1, "filename": "PyLUCCBA-0.1.33.tar.gz", "has_sig": false, "md5_digest": "53381ad523f69823fc2c898e39624cfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6369949, "upload_time": "2018-09-02T15:39:35", "upload_time_iso_8601": "2018-09-02T15:39:35.236037Z", "url": "https://files.pythonhosted.org/packages/fa/64/277fcb40b7ce77bafb724db0925eff26609944f1278fd8a421ea12854b79/PyLUCCBA-0.1.33.tar.gz", "yanked": false}], "0.1.38": [{"comment_text": "", "digests": {"md5": "58e7874fe5af43b33fe9b8b5e3f19b11", "sha256": "e825da6c1270c3bf4c9517ad750e0644db9a41caa689406869e34e7d61098e5a"}, "downloads": -1, "filename": "PyLUCCBA-0.1.38.tar.gz", "has_sig": false, "md5_digest": "58e7874fe5af43b33fe9b8b5e3f19b11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8887881, "upload_time": "2018-09-04T15:41:57", "upload_time_iso_8601": "2018-09-04T15:41:57.569708Z", "url": "https://files.pythonhosted.org/packages/8b/cb/aed8352245e838fff159f7b86bcb0c672a40aa0080483991f00153df6377/PyLUCCBA-0.1.38.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "d2796b387772aef48209ce483b5d15d2", "sha256": "24192dabc303bf5e0d1b68dd3e7f7187bde2a76d6a1358dd367feae637203f52"}, "downloads": -1, "filename": "PyLUCCBA-0.9.0.tar.gz", "has_sig": false, "md5_digest": "d2796b387772aef48209ce483b5d15d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8528760, "upload_time": "2019-03-19T16:46:10", "upload_time_iso_8601": "2019-03-19T16:46:10.080032Z", "url": "https://files.pythonhosted.org/packages/51/af/4db03165ddd5cee4c418ce7a2db30f2219d94fe556e53f71e5820b74e818/PyLUCCBA-0.9.0.tar.gz", "yanked": false}], "0.9.13": [{"comment_text": "", "digests": {"md5": "f8fcecc283e321c72c860d96a2936029", "sha256": "391d94d164ca2460b4935b31f7d41e5c3c5fb8603ec5277f516a1fb8e91f48df"}, "downloads": -1, "filename": "PyLUCCBA-0.9.13-py2-none-any.whl", "has_sig": false, "md5_digest": "f8fcecc283e321c72c860d96a2936029", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8771680, "upload_time": "2019-03-24T10:54:59", "upload_time_iso_8601": "2019-03-24T10:54:59.075222Z", "url": "https://files.pythonhosted.org/packages/8d/40/dc0d49bfb7ca742f69a13cabe3cfee43ef9d6f923d9fd822afd9fd57cdc2/PyLUCCBA-0.9.13-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baebf59bd4e54d00e7ee88d4538fef38", "sha256": "f22cd5b8a1ddb749274463b9a200efbaf98d5d9721f10de8abff71d7bec98b5f"}, "downloads": -1, "filename": "PyLUCCBA-0.9.13.tar.gz", "has_sig": false, "md5_digest": "baebf59bd4e54d00e7ee88d4538fef38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8531478, "upload_time": "2019-03-24T10:55:08", "upload_time_iso_8601": "2019-03-24T10:55:08.802961Z", "url": "https://files.pythonhosted.org/packages/ea/e0/5cfc5f1ee6ad38b6545f9d1f9af7cf2a27054f9032624cf58a2483179913/PyLUCCBA-0.9.13.tar.gz", "yanked": false}], "0.9.23": [{"comment_text": "", "digests": {"md5": "c6446c1d6a8c6676eb5693eda9b0506c", "sha256": "3acb9a1497e95ec647d5d1db4b451bf91cd719481fa72d700a6c13d4e26e07c9"}, "downloads": -1, "filename": "PyLUCCBA-0.9.23-py2-none-any.whl", "has_sig": false, "md5_digest": "c6446c1d6a8c6676eb5693eda9b0506c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8776161, "upload_time": "2019-04-01T14:36:50", "upload_time_iso_8601": "2019-04-01T14:36:50.526780Z", "url": "https://files.pythonhosted.org/packages/ce/1a/f290215487ab5ef9e79a021f80a7eec3bb002c53a2e3474ca5f682d5c2de/PyLUCCBA-0.9.23-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9953d0436eb4e9875757065b6de27579", "sha256": "5301cde4cc01e4bfaac6db4f8d99d4b159aab29ae65266a19b8a8b9d83452245"}, "downloads": -1, "filename": "PyLUCCBA-0.9.23.tar.gz", "has_sig": false, "md5_digest": "9953d0436eb4e9875757065b6de27579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8532560, "upload_time": "2019-04-01T14:37:47", "upload_time_iso_8601": "2019-04-01T14:37:47.365648Z", "url": "https://files.pythonhosted.org/packages/4f/e6/7946249e9eddb869f50be09413e331d7317b34929a3afd24744896c85373/PyLUCCBA-0.9.23.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "ecdbdd8cbeed297b0debc36375d6b009", "sha256": "62cfa755d14767db482a551a228f1b48cc5eaa57f76c5a4e28178bd980c03370"}, "downloads": -1, "filename": "PyLUCCBA-0.9.3.tar.gz", "has_sig": false, "md5_digest": "ecdbdd8cbeed297b0debc36375d6b009", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8531165, "upload_time": "2019-03-20T11:09:32", "upload_time_iso_8601": "2019-03-20T11:09:32.237815Z", "url": "https://files.pythonhosted.org/packages/7e/b7/7ebd1d53575eb8256f30154c52b6b24cb8c929308646fff30a145cde00a0/PyLUCCBA-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6446c1d6a8c6676eb5693eda9b0506c", "sha256": "3acb9a1497e95ec647d5d1db4b451bf91cd719481fa72d700a6c13d4e26e07c9"}, "downloads": -1, "filename": "PyLUCCBA-0.9.23-py2-none-any.whl", "has_sig": false, "md5_digest": "c6446c1d6a8c6676eb5693eda9b0506c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8776161, "upload_time": "2019-04-01T14:36:50", "upload_time_iso_8601": "2019-04-01T14:36:50.526780Z", "url": "https://files.pythonhosted.org/packages/ce/1a/f290215487ab5ef9e79a021f80a7eec3bb002c53a2e3474ca5f682d5c2de/PyLUCCBA-0.9.23-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9953d0436eb4e9875757065b6de27579", "sha256": "5301cde4cc01e4bfaac6db4f8d99d4b159aab29ae65266a19b8a8b9d83452245"}, "downloads": -1, "filename": "PyLUCCBA-0.9.23.tar.gz", "has_sig": false, "md5_digest": "9953d0436eb4e9875757065b6de27579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8532560, "upload_time": "2019-04-01T14:37:47", "upload_time_iso_8601": "2019-04-01T14:37:47.365648Z", "url": "https://files.pythonhosted.org/packages/4f/e6/7946249e9eddb869f50be09413e331d7317b34929a3afd24744896c85373/PyLUCCBA-0.9.23.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:42 2020"}