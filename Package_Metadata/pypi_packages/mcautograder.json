{"info": {"author": "Chris Pyles", "author_email": "cpyles@berkeley.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Multiple Choice Autograder\n\n [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/chrispyles/mcautograder/master?filepath=demo/mcautograder-demo.ipynb)\n\nThis repository contains a small Python-based multiple-choice question autograder inteded for use in Jupyter Notebooks. It is meant to be packaged with each assignment so that they are easier for use on third-party servers, e.g. MyBinder.\n\n## Installation\n\nYou can install `mcautograder` using pip.\n\n```bash\npip install mcautograder\n```\n\n## Usage\n\nTo use the autograder, import the `mcautograder` package and make sure to your [tests file](#tests) is in the same directory as your notebook. When you load the notebook dependencies, import the file and initialize the grader by creating an instance of the `Notebook` class:\n\n```python\nimport mcautograder\ngrader = mcautograder.Notebook()\n```\n\n**The autpgrader automatically assumes that the tests file is stored as `\"./.tests.py\"`.** More details [below](#tests).\n\nIf you want the autograder to score the questions, make sure to set `scored=True` in your `Notebook` call. **The default behavior of the autograder is to allow students to submit answers until they get the correct one.** If you want to change this behavior, you must set the `max_attempts` argument to an integer, the maximum number of retakes allowed. If this is the case, when students hit that ceiling, the check cells will throw an `AssertionError` because they've hit the retake ceiling.\n\nAn example call for a scored notebook with a retake ceiling of 5 is given below.\n\n```python\ngrader = Notebook(scored=True, max_attempts=5)\n```\n\nTo use the autograder to check answers, have students assign their answers to variables in the notebook; these answers can strings of length 1 or single-digit integers. Then call the `Notebook.check()` function; the first argument should be the question identifier in your tests file and the second should be the variable the student created.\n\n```python\nmy_answer = \"A\"\ngrader.check(\"q1\", my_answer)\n```\n\nIf the student's response matches the test file, then `Correct.` will be printed; otherwise, `Try again.` will be printed. If the student enters an invalid response (e.g. `float`, answer of > 1 character, hit retake ceiling), the grader will throw an `AssertionError` with a descriptive message.\n\nTo get the score on a scored autograder, simply call `Notebook.score()`:\n\n```python\ngrader.score()\n```\n\nThe output will contain the fraction of earned points out of possible points and the percentage.\n\nFor a more descriptive introduction to the autograder, launch our [Binder](https://mybinder.org/v2/gh/chrispyles/mcautograder/master?filepath=demo/mcautograder-demo.ipynb).\n\n<div id=\"tests\"></div>\n\n## Tests\n\nThe autograder relies on a tests file to get the answers for the questions. In this repo, the file is `tests.py` and it is public; in practice, I usually distribute the answers as a hidden file, `.tests.py`. It is unhidden here so that you can peruse its structure and contents.\n\nThe `Notebook` constructor by default assumes that your tests are in the file `.tests.py`. If you have a different preferred location, you can pass the path to the file by setting the `tests` argument of the constructor:\n\n```python\ngrader = Notebook(tests=SOME_OTHER_PATH)\n```\n\nIn the file, we define a variable `answers` which is a list containing dictionaries, each of which represents a single question. Each dictionary should contain 3 keys: `\"identifier\"`, `\"answer\"`, and, optionally, `\"points\"`. If your assignment is unscored, you can leave off the `\"points\"` key. A description of the keys' values is given below:\n\n| Key | Value Type | Value Description |\n|-----|-----|-----|\n| `\"identifier\"` | `str` | a unique question identifier |\n| `\"answer\"` | `str`, `int` | the answer to the question; specifications below |\n| `\"points\"` | `int` | optional; the number of points assigned to that question |\n\nAnswers **must** be of length 1 (i.e. a single-character string or a single-digit integer). The autograder is currently set up to throw an `AssertionError` if an answer of length > 1 is submitted, although we do intend to add this functionality later.\n\nAn example of a file is given below.\n\n```python\nanswers = [\n\t{\n\t\t\"identifier\": \"q1\",\n\t\t\"answer\": 3,\n\t\t\"points\": 1,\n\t}, {\n\t\t\"identifier\": \"q2\",\n\t\t\"answer\": 2,\n\t\t\"points\": 2,\n\t}, {\n\t\t\"identifier\": \"q3\",\n\t\t\"answer\": \"D\",\n\t\t\"points\": 3,\n\t}\n]\n```\n\nThe identifiers have no set format. This is because the identifier is passed to `Notebook.check()` when you call it in the notebook.\n\n## Branches\n\nThe `master` branch contains the current state of `mcautograder` as it is hosted on PyPI. The `dev` branch contains the next version of `mcautograder` in development. _Do not commit directly to the `master` branch._ Make commits in the `dev` branch and then PR to the `master` branch before uploading to PyPI.\n\n## Changelog\n\n**v0.0.6:**\n\n* Added state serialization to prevent dead kernels from resetting notebooks\n* Added `\".tests.py\"` as default argument value for `Notebook` constructor\n* Added `AssertionError` for scored notebooks with 0 points\n* Added try/except statement for scored notebook identifiers without `\"points\"` key\n\n**v0.0.5:**\n\n* Changed `mcautograder.py` to `notebook.py` for less confusion\n* Changed `max_retakes` param to `max_attempts` for better understanding\n* Upadted docstring format for sphinx autodoc\n* Added license field for setuptools\n\n**v0.0.4:**\n\n* Moved utils to separate file for documentation\n\n**v0.0.3:**\n\n* Changed structure of tests file to be more intuitive\n* Added docstrings and better documentation\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrispyles/mcautograder", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "mcautograder", "package_url": "https://pypi.org/project/mcautograder/", "platform": "", "project_url": "https://pypi.org/project/mcautograder/", "project_urls": {"Homepage": "https://github.com/chrispyles/mcautograder"}, "release_url": "https://pypi.org/project/mcautograder/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Small multiple choice question autograding library", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multiple Choice Autograder</h1>\n<p><a href=\"https://mybinder.org/v2/gh/chrispyles/mcautograder/master?filepath=demo/mcautograder-demo.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<p>This repository contains a small Python-based multiple-choice question autograder inteded for use in Jupyter Notebooks. It is meant to be packaged with each assignment so that they are easier for use on third-party servers, e.g. MyBinder.</p>\n<h2>Installation</h2>\n<p>You can install <code>mcautograder</code> using pip.</p>\n<pre>pip install mcautograder\n</pre>\n<h2>Usage</h2>\n<p>To use the autograder, import the <code>mcautograder</code> package and make sure to your <a href=\"#tests\" rel=\"nofollow\">tests file</a> is in the same directory as your notebook. When you load the notebook dependencies, import the file and initialize the grader by creating an instance of the <code>Notebook</code> class:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mcautograder</span>\n<span class=\"n\">grader</span> <span class=\"o\">=</span> <span class=\"n\">mcautograder</span><span class=\"o\">.</span><span class=\"n\">Notebook</span><span class=\"p\">()</span>\n</pre>\n<p><strong>The autpgrader automatically assumes that the tests file is stored as <code>\"./.tests.py\"</code>.</strong> More details <a href=\"#tests\" rel=\"nofollow\">below</a>.</p>\n<p>If you want the autograder to score the questions, make sure to set <code>scored=True</code> in your <code>Notebook</code> call. <strong>The default behavior of the autograder is to allow students to submit answers until they get the correct one.</strong> If you want to change this behavior, you must set the <code>max_attempts</code> argument to an integer, the maximum number of retakes allowed. If this is the case, when students hit that ceiling, the check cells will throw an <code>AssertionError</code> because they've hit the retake ceiling.</p>\n<p>An example call for a scored notebook with a retake ceiling of 5 is given below.</p>\n<pre><span class=\"n\">grader</span> <span class=\"o\">=</span> <span class=\"n\">Notebook</span><span class=\"p\">(</span><span class=\"n\">scored</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_attempts</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>To use the autograder to check answers, have students assign their answers to variables in the notebook; these answers can strings of length 1 or single-digit integers. Then call the <code>Notebook.check()</code> function; the first argument should be the question identifier in your tests file and the second should be the variable the student created.</p>\n<pre><span class=\"n\">my_answer</span> <span class=\"o\">=</span> <span class=\"s2\">\"A\"</span>\n<span class=\"n\">grader</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"q1\"</span><span class=\"p\">,</span> <span class=\"n\">my_answer</span><span class=\"p\">)</span>\n</pre>\n<p>If the student's response matches the test file, then <code>Correct.</code> will be printed; otherwise, <code>Try again.</code> will be printed. If the student enters an invalid response (e.g. <code>float</code>, answer of &gt; 1 character, hit retake ceiling), the grader will throw an <code>AssertionError</code> with a descriptive message.</p>\n<p>To get the score on a scored autograder, simply call <code>Notebook.score()</code>:</p>\n<pre><span class=\"n\">grader</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">()</span>\n</pre>\n<p>The output will contain the fraction of earned points out of possible points and the percentage.</p>\n<p>For a more descriptive introduction to the autograder, launch our <a href=\"https://mybinder.org/v2/gh/chrispyles/mcautograder/master?filepath=demo/mcautograder-demo.ipynb\" rel=\"nofollow\">Binder</a>.</p>\n<div id=\"tests\"></div>\n<h2>Tests</h2>\n<p>The autograder relies on a tests file to get the answers for the questions. In this repo, the file is <code>tests.py</code> and it is public; in practice, I usually distribute the answers as a hidden file, <code>.tests.py</code>. It is unhidden here so that you can peruse its structure and contents.</p>\n<p>The <code>Notebook</code> constructor by default assumes that your tests are in the file <code>.tests.py</code>. If you have a different preferred location, you can pass the path to the file by setting the <code>tests</code> argument of the constructor:</p>\n<pre><span class=\"n\">grader</span> <span class=\"o\">=</span> <span class=\"n\">Notebook</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"o\">=</span><span class=\"n\">SOME_OTHER_PATH</span><span class=\"p\">)</span>\n</pre>\n<p>In the file, we define a variable <code>answers</code> which is a list containing dictionaries, each of which represents a single question. Each dictionary should contain 3 keys: <code>\"identifier\"</code>, <code>\"answer\"</code>, and, optionally, <code>\"points\"</code>. If your assignment is unscored, you can leave off the <code>\"points\"</code> key. A description of the keys' values is given below:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value Type</th>\n<th>Value Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\"identifier\"</code></td>\n<td><code>str</code></td>\n<td>a unique question identifier</td>\n</tr>\n<tr>\n<td><code>\"answer\"</code></td>\n<td><code>str</code>, <code>int</code></td>\n<td>the answer to the question; specifications below</td>\n</tr>\n<tr>\n<td><code>\"points\"</code></td>\n<td><code>int</code></td>\n<td>optional; the number of points assigned to that question</td>\n</tr></tbody></table>\n<p>Answers <strong>must</strong> be of length 1 (i.e. a single-character string or a single-digit integer). The autograder is currently set up to throw an <code>AssertionError</code> if an answer of length &gt; 1 is submitted, although we do intend to add this functionality later.</p>\n<p>An example of a file is given below.</p>\n<pre><span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"s2\">\"identifier\"</span><span class=\"p\">:</span> <span class=\"s2\">\"q1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"answer\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"points\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n\t<span class=\"p\">},</span> <span class=\"p\">{</span>\n\t\t<span class=\"s2\">\"identifier\"</span><span class=\"p\">:</span> <span class=\"s2\">\"q2\"</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"answer\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"points\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n\t<span class=\"p\">},</span> <span class=\"p\">{</span>\n\t\t<span class=\"s2\">\"identifier\"</span><span class=\"p\">:</span> <span class=\"s2\">\"q3\"</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"answer\"</span><span class=\"p\">:</span> <span class=\"s2\">\"D\"</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"points\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The identifiers have no set format. This is because the identifier is passed to <code>Notebook.check()</code> when you call it in the notebook.</p>\n<h2>Branches</h2>\n<p>The <code>master</code> branch contains the current state of <code>mcautograder</code> as it is hosted on PyPI. The <code>dev</code> branch contains the next version of <code>mcautograder</code> in development. <em>Do not commit directly to the <code>master</code> branch.</em> Make commits in the <code>dev</code> branch and then PR to the <code>master</code> branch before uploading to PyPI.</p>\n<h2>Changelog</h2>\n<p><strong>v0.0.6:</strong></p>\n<ul>\n<li>Added state serialization to prevent dead kernels from resetting notebooks</li>\n<li>Added <code>\".tests.py\"</code> as default argument value for <code>Notebook</code> constructor</li>\n<li>Added <code>AssertionError</code> for scored notebooks with 0 points</li>\n<li>Added try/except statement for scored notebook identifiers without <code>\"points\"</code> key</li>\n</ul>\n<p><strong>v0.0.5:</strong></p>\n<ul>\n<li>Changed <code>mcautograder.py</code> to <code>notebook.py</code> for less confusion</li>\n<li>Changed <code>max_retakes</code> param to <code>max_attempts</code> for better understanding</li>\n<li>Upadted docstring format for sphinx autodoc</li>\n<li>Added license field for setuptools</li>\n</ul>\n<p><strong>v0.0.4:</strong></p>\n<ul>\n<li>Moved utils to separate file for documentation</li>\n</ul>\n<p><strong>v0.0.3:</strong></p>\n<ul>\n<li>Changed structure of tests file to be more intuitive</li>\n<li>Added docstrings and better documentation</li>\n</ul>\n\n          </div>"}, "last_serial": 5705027, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "cc97444a4990b36a7d864397ede8353a", "sha256": "921a4134df9f6ff3ea923d619c7b258609e9f6cba55604fc3c5ae2eb2989aaf8"}, "downloads": -1, "filename": "mcautograder-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc97444a4990b36a7d864397ede8353a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5149, "upload_time": "2019-06-25T00:20:37", "upload_time_iso_8601": "2019-06-25T00:20:37.236987Z", "url": "https://files.pythonhosted.org/packages/ad/b1/d8cdc445df956730f13f9d06b4035a073e86b9c31e360f75460a549a41a8/mcautograder-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c57f9d8b90725781a7774121ee9fa55d", "sha256": "463efd6a0da5bffbc4b7fc160eb569ba1f9fee551e1561c9c4f87cae96f88b0e"}, "downloads": -1, "filename": "mcautograder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c57f9d8b90725781a7774121ee9fa55d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3710, "upload_time": "2019-06-25T00:20:39", "upload_time_iso_8601": "2019-06-25T00:20:39.294421Z", "url": "https://files.pythonhosted.org/packages/6b/2e/9f18ca85a43a8e26488bd1dd959948c14e48457201f06ca55a542b943d29/mcautograder-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8faf3c4bcaf7c16c267158ec93d54dd2", "sha256": "516be8ae9c1f3b665f2ff25528e435da04e3b6fa2679636ad54f5e6234534132"}, "downloads": -1, "filename": "mcautograder-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8faf3c4bcaf7c16c267158ec93d54dd2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5708, "upload_time": "2019-06-26T02:55:24", "upload_time_iso_8601": "2019-06-26T02:55:24.093322Z", "url": "https://files.pythonhosted.org/packages/aa/f0/f9e9cb319f310a794dd8bb07bbcd607105345e94e76ca31759748f89f90b/mcautograder-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b99f48da3c7a211839c5e8dbc1a2a656", "sha256": "c3b5b9fa5007ba4e8943bb371902a69de26bc31b213d88f3d2b244d3cbd5ad72"}, "downloads": -1, "filename": "mcautograder-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b99f48da3c7a211839c5e8dbc1a2a656", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4407, "upload_time": "2019-06-26T02:55:25", "upload_time_iso_8601": "2019-06-26T02:55:25.469290Z", "url": "https://files.pythonhosted.org/packages/83/d0/459d4a418725d7764c91601e2c7493d241742a9331a2aeab03ab6a0f8bc1/mcautograder-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "457302b02ab5325dd0ca2174beb08a52", "sha256": "95deb3bdc765601a510458ed764f93bad1f42b979c56143f3475d0803d0b3478"}, "downloads": -1, "filename": "mcautograder-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "457302b02ab5325dd0ca2174beb08a52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5974, "upload_time": "2019-06-26T04:18:09", "upload_time_iso_8601": "2019-06-26T04:18:09.992021Z", "url": "https://files.pythonhosted.org/packages/14/18/cfafd2b9f9012832e04f177cefd0cc67d4241a04899a20e8deb9e6d4f564/mcautograder-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8b47f5e8648ba3d06c1e79ae158421e", "sha256": "311e822c101ae0254696bb025c88b7aae959f0f91a1e4517017a869e25e38d4f"}, "downloads": -1, "filename": "mcautograder-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c8b47f5e8648ba3d06c1e79ae158421e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4474, "upload_time": "2019-06-26T04:18:11", "upload_time_iso_8601": "2019-06-26T04:18:11.339956Z", "url": "https://files.pythonhosted.org/packages/80/e0/5c4f3b4011a94256217238883a1ce85d2e21a06191b37bd55af17482d19e/mcautograder-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "8075fb4bb34f5f327b83699897168a92", "sha256": "051b77183c860765c8a5cc71a362290a19dcf32e2dc82ae0fa901640a454a1c5"}, "downloads": -1, "filename": "mcautograder-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8075fb4bb34f5f327b83699897168a92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7570, "upload_time": "2019-06-28T05:32:31", "upload_time_iso_8601": "2019-06-28T05:32:31.367558Z", "url": "https://files.pythonhosted.org/packages/89/14/bd9d4f56bbbdb0f6c77055f8e3e70ece6d0cef2d7071351668a3e2a2f16c/mcautograder-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ec009096b4933224e15702c32ff7a88", "sha256": "a2f06fbc7a93e47dedc542395393ca4a212316a06d6f2bcb9b4ec4366abdbdf2"}, "downloads": -1, "filename": "mcautograder-0.0.5.tar.gz", "has_sig": false, "md5_digest": "4ec009096b4933224e15702c32ff7a88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4688, "upload_time": "2019-06-28T05:32:32", "upload_time_iso_8601": "2019-06-28T05:32:32.815925Z", "url": "https://files.pythonhosted.org/packages/70/8a/d025ddcd9acbbdad97d91583c06bfbd31521ca0a664c304fad3b11dfde4e/mcautograder-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "16f5bc003634348337648f538ac941f8", "sha256": "6fb59e45e144ee7b11383cdb5045b79c2e6036a1785549ec26f21664ee349291"}, "downloads": -1, "filename": "mcautograder-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "16f5bc003634348337648f538ac941f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6954, "upload_time": "2019-08-20T18:56:01", "upload_time_iso_8601": "2019-08-20T18:56:01.197357Z", "url": "https://files.pythonhosted.org/packages/53/c4/d2431555f0663f853eaa02084495af485ac9c586e30e8cf0b32a4b485ff5/mcautograder-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09d72d6ac5af71060ff82dc0c86cf45b", "sha256": "7e911513646a99edeb28535170dab0c797cf6d2971ffc79f47fb0deba03e3369"}, "downloads": -1, "filename": "mcautograder-0.0.6.tar.gz", "has_sig": false, "md5_digest": "09d72d6ac5af71060ff82dc0c86cf45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5420, "upload_time": "2019-08-20T18:56:03", "upload_time_iso_8601": "2019-08-20T18:56:03.242416Z", "url": "https://files.pythonhosted.org/packages/d1/e5/bd5102dd17d7302705dc94d7491cd657b7db4d438544a18cc157ed5628be/mcautograder-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16f5bc003634348337648f538ac941f8", "sha256": "6fb59e45e144ee7b11383cdb5045b79c2e6036a1785549ec26f21664ee349291"}, "downloads": -1, "filename": "mcautograder-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "16f5bc003634348337648f538ac941f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6954, "upload_time": "2019-08-20T18:56:01", "upload_time_iso_8601": "2019-08-20T18:56:01.197357Z", "url": "https://files.pythonhosted.org/packages/53/c4/d2431555f0663f853eaa02084495af485ac9c586e30e8cf0b32a4b485ff5/mcautograder-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09d72d6ac5af71060ff82dc0c86cf45b", "sha256": "7e911513646a99edeb28535170dab0c797cf6d2971ffc79f47fb0deba03e3369"}, "downloads": -1, "filename": "mcautograder-0.0.6.tar.gz", "has_sig": false, "md5_digest": "09d72d6ac5af71060ff82dc0c86cf45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5420, "upload_time": "2019-08-20T18:56:03", "upload_time_iso_8601": "2019-08-20T18:56:03.242416Z", "url": "https://files.pythonhosted.org/packages/d1/e5/bd5102dd17d7302705dc94d7491cd657b7db4d438544a18cc157ed5628be/mcautograder-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:00 2020"}