{"info": {"author": "Chris McDonough / Agendaless Consulting", "author_email": "repoze-dev@lists.repoze.org", "bugtrack_url": null, "classifiers": ["Framework :: BFG", "Intended Audience :: Developers", "License :: Repoze Public License", "Programming Language :: Python"], "description": "``repoze.bfg`` bindings for `Mako <http://www.makotemplates.org/>`_\n===================================================================\n\nThese are bindings for the `Mako templating system\n<http://www.makotemplates.org/>`_ for the `repoze.bfg\n<http://bfg.repoze.org/`_ web framework.\n\nHigh-Level API\n--------------\n\nThe API follows the pattern of the \"default\" template API for\n``repoze.bfg``, which includes three functions: ``get_template``,\n``render_template``, and ``render_template_to_response``.  From within\na repoze.bfg view function, you might do::\n\n  from webob import Response\n\n  from repoze.bfg.renderers import get_renderer\n  template = get_renderer('templates/foo.mak')\n  return Response(template.render_unicode(foo=1))\n\nOr::\n\n  from repoze.bfg.renderers import render\n  s = render('templates/foo.mak', {foo:1})\n  return Response(s)\n\nOr::\n\n  from repoze.bfg.renderers import render_to_response\n  return render_to_response('templates/foo.mak', {foo:1})\n\nAll of these examples are equivalent.  The first argument passed in to\neach of them (representing the template location) should be a file\npath relative to the lookup loader root.\n\nThe value passed to ``render`` or ``render_to_response`` should be one\nof the following:\n\n- A *dictionary* representing the values passed to the template.\n\n- A *tuple*, consisting of two values in the form ``(function_name,\n  values)``.  If a tuple is returned, the ``def`` named after\n  ``function_name`` in the template is rendered instead of the entire\n  template using the ``values`` provided, which must be a dictionary).\n  Positional arguments to the function defined within the template are\n  filled in by name using the same-named values within the ``values``\n  dictionary.\n\nConfiguring the Loookup Loader\n------------------------------\n\nIn your bfg application's ``.ini`` file, use a ``mako.directories``\nsetting::\n\n  [app:main]\n  use = egg:mypackage\n  mako.directories = mypackage:templates\n                     anotherpackage:templates\n  reload_templates = true\n  debug_authorization = false\n  debug_notfound = false\n\n``mako.directories`` should be a sequence of absolute directory names\nor resource specifications, one per line.\n\nOther values:\n\n``mako.input_encoding``\n   Set the mako template input encoding.  The default is ``utf-8``.\n\n``reload_templates``\n   If this is ``True``, Mako templates will be checked for changes at\n   every rendering boundary.  This slows down rendering but is\n   convenient for development.\n\nEnsuring the Mako Renderer Extension is Active\n----------------------------------------------\n\n``repoze.bfg.mako`` can also act as a \"renderer\" for a view when it is\nactive in the ``repoze.bfg`` application you're developing::\n\n  @bfg_view(renderer='templates/foo.mak')\n  def aview(request):\n      return {'foo':1}\n\nThere are two ways to make sure that the mako extension is active.\nBoth are completely equivalent.\n\n#) Ensure that some ZCML file with an analogue of the following\n   contents is executed::\n\n    <include package=\"repoze.bfg.mako\"/>\n\n#) Call the ``add_renderer`` method of a Configurator in your\n   application:\n\n   from repoze.bfg.mako import renderer_factory\n   config.add_renderer(.'mak', renderer_factory)\n   config.add_renderer(.'mako', renderer_factory)\n\nIn either case, files with the ``.mak`` and ``.mako`` extensions are\nnow considered to be Mako templates.\n\nNote that when mako is used as a ``renderer`` in this fashion, the\n``repoze.bfg`` context that is usually available as ``context`` within\nthe template global namespace is available as ``_context`` (the\n``context`` name without the underscore is reserved for internal Mako\nusage).\n\nInstallation\n------------\n\nInstall using setuptools, e.g. (within a virtualenv)::\n\n  $ easy_install -i http://dist.repoze.org/bfg/dev/simple repoze.bfg.mako\n\nCreating a Mako ``repoze.bfg`` Project\n--------------------------------------\n\nAfter you've got ``repoze.bfg.mako`` installed, you can invoke the\nfollowing command to create a Mako-based ``repoze.bfg`` project::\n\n  $ paster create -t bin/paster create -t bfg_mako_starter\n\nReporting Bugs / Development Versions\n-------------------------------------\n\nVisit http://bugs.repoze.org to report bugs.  Visit\nhttp://svn.repoze.org to download development or tagged versions.\n\n\n\n\n0.3 (2010-09-19)\n----------------\n\n- A ``repoze.bfg.mako`` renderer may now be called with a *tuple*,\n  consisting of two values in the form ``(function_name, values)``.\n  If a tuple is provided to a renderer, the ``def`` named after\n  ``function_name`` in the template is rendered instead of the entire\n  template using the ``values`` provided, which must be a dictionary).\n\n0.2 (2010-09-06)\n----------------\n\n- Removed ``repoze.bfg.mako`` functions named ``render_template``,\n  ``render_template_to_response``, ``get_template`` and\n  ``get_renderer``.  As of ``repoze.bfg`` 1.3a6, use of these\n  functions should be replaced with usage of similarly-named functions\n  present in the ``repoze.bfg.renderers`` module .\n\n- Added integration tests for imperative rendering and ZCML loading.\n\n0.1 (2010-07-24)\n----------------\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.repoze.org", "keywords": "web wsgi zope", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "repoze.bfg.mako", "package_url": "https://pypi.org/project/repoze.bfg.mako/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/repoze.bfg.mako/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.repoze.org"}, "release_url": "https://pypi.org/project/repoze.bfg.mako/0.3/", "requires_dist": null, "requires_python": null, "summary": "Mako template bindings for repoze.bfg", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            ``repoze.bfg`` bindings for `Mako &lt;http://www.makotemplates.org/&gt;`_<br>===================================================================<br><br>These are bindings for the `Mako templating system<br>&lt;http://www.makotemplates.org/&gt;`_ for the `repoze.bfg<br>&lt;http://bfg.repoze.org/`_ web framework.<br><br>High-Level API<br>--------------<br><br>The API follows the pattern of the \"default\" template API for<br>``repoze.bfg``, which includes three functions: ``get_template``,<br>``render_template``, and ``render_template_to_response``.  From within<br>a repoze.bfg view function, you might do::<br><br>  from webob import Response<br><br>  from repoze.bfg.renderers import get_renderer<br>  template = get_renderer('templates/foo.mak')<br>  return Response(template.render_unicode(foo=1))<br><br>Or::<br><br>  from repoze.bfg.renderers import render<br>  s = render('templates/foo.mak', {foo:1})<br>  return Response(s)<br><br>Or::<br><br>  from repoze.bfg.renderers import render_to_response<br>  return render_to_response('templates/foo.mak', {foo:1})<br><br>All of these examples are equivalent.  The first argument passed in to<br>each of them (representing the template location) should be a file<br>path relative to the lookup loader root.<br><br>The value passed to ``render`` or ``render_to_response`` should be one<br>of the following:<br><br>- A *dictionary* representing the values passed to the template.<br><br>- A *tuple*, consisting of two values in the form ``(function_name,<br>  values)``.  If a tuple is returned, the ``def`` named after<br>  ``function_name`` in the template is rendered instead of the entire<br>  template using the ``values`` provided, which must be a dictionary).<br>  Positional arguments to the function defined within the template are<br>  filled in by name using the same-named values within the ``values``<br>  dictionary.<br><br>Configuring the Loookup Loader<br>------------------------------<br><br>In your bfg application's ``.ini`` file, use a ``mako.directories``<br>setting::<br><br>  [app:main]<br>  use = egg:mypackage<br>  mako.directories = mypackage:templates<br>                     anotherpackage:templates<br>  reload_templates = true<br>  debug_authorization = false<br>  debug_notfound = false<br><br>``mako.directories`` should be a sequence of absolute directory names<br>or resource specifications, one per line.<br><br>Other values:<br><br>``mako.input_encoding``<br>   Set the mako template input encoding.  The default is ``utf-8``.<br><br>``reload_templates``<br>   If this is ``True``, Mako templates will be checked for changes at<br>   every rendering boundary.  This slows down rendering but is<br>   convenient for development.<br><br>Ensuring the Mako Renderer Extension is Active<br>----------------------------------------------<br><br>``repoze.bfg.mako`` can also act as a \"renderer\" for a view when it is<br>active in the ``repoze.bfg`` application you're developing::<br><br>  @bfg_view(renderer='templates/foo.mak')<br>  def aview(request):<br>      return {'foo':1}<br><br>There are two ways to make sure that the mako extension is active.<br>Both are completely equivalent.<br><br>#) Ensure that some ZCML file with an analogue of the following<br>   contents is executed::<br><br>    &lt;include package=\"repoze.bfg.mako\"/&gt;<br><br>#) Call the ``add_renderer`` method of a Configurator in your<br>   application:<br><br>   from repoze.bfg.mako import renderer_factory<br>   config.add_renderer(.'mak', renderer_factory)<br>   config.add_renderer(.'mako', renderer_factory)<br><br>In either case, files with the ``.mak`` and ``.mako`` extensions are<br>now considered to be Mako templates.<br><br>Note that when mako is used as a ``renderer`` in this fashion, the<br>``repoze.bfg`` context that is usually available as ``context`` within<br>the template global namespace is available as ``_context`` (the<br>``context`` name without the underscore is reserved for internal Mako<br>usage).<br><br>Installation<br>------------<br><br>Install using setuptools, e.g. (within a virtualenv)::<br><br>  $ easy_install -i http://dist.repoze.org/bfg/dev/simple repoze.bfg.mako<br><br>Creating a Mako ``repoze.bfg`` Project<br>--------------------------------------<br><br>After you've got ``repoze.bfg.mako`` installed, you can invoke the<br>following command to create a Mako-based ``repoze.bfg`` project::<br><br>  $ paster create -t bin/paster create -t bfg_mako_starter<br><br>Reporting Bugs / Development Versions<br>-------------------------------------<br><br>Visit http://bugs.repoze.org to report bugs.  Visit<br>http://svn.repoze.org to download development or tagged versions.<br><br><br><br><br>0.3 (2010-09-19)<br>----------------<br><br>- A ``repoze.bfg.mako`` renderer may now be called with a *tuple*,<br>  consisting of two values in the form ``(function_name, values)``.<br>  If a tuple is provided to a renderer, the ``def`` named after<br>  ``function_name`` in the template is rendered instead of the entire<br>  template using the ``values`` provided, which must be a dictionary).<br><br>0.2 (2010-09-06)<br>----------------<br><br>- Removed ``repoze.bfg.mako`` functions named ``render_template``,<br>  ``render_template_to_response``, ``get_template`` and<br>  ``get_renderer``.  As of ``repoze.bfg`` 1.3a6, use of these<br>  functions should be replaced with usage of similarly-named functions<br>  present in the ``repoze.bfg.renderers`` module .<br><br>- Added integration tests for imperative rendering and ZCML loading.<br><br>0.1 (2010-07-24)<br>----------------<br><br>- Initial release.\n          </div>"}, "last_serial": 798796, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fa04c8b0e211ce9b4008ef6c587eb479", "sha256": "14fe3454794b170732bcfe3b46e41ef64850194036a54ab8d96239a3806c415d"}, "downloads": -1, "filename": "repoze.bfg.mako-0.1.tar.gz", "has_sig": false, "md5_digest": "fa04c8b0e211ce9b4008ef6c587eb479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24981, "upload_time": "2010-07-24T06:55:39", "upload_time_iso_8601": "2010-07-24T06:55:39.898083Z", "url": "https://files.pythonhosted.org/packages/bf/3e/f8a1422cea940a488d76370c5347ced3816f85eae2d0d7f13c18c67f54b3/repoze.bfg.mako-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ad520f626683a8a48131651c636b513a", "sha256": "bbc5f6fa14ac1434221a349cab843191f0f6fe0b664ecad5da6ecf76b3ada90d"}, "downloads": -1, "filename": "repoze.bfg.mako-0.2.tar.gz", "has_sig": false, "md5_digest": "ad520f626683a8a48131651c636b513a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24863, "upload_time": "2010-09-06T20:17:31", "upload_time_iso_8601": "2010-09-06T20:17:31.897536Z", "url": "https://files.pythonhosted.org/packages/c3/b6/33411ddf679c78a1bc14ade0e5d01857adb90fac92e4894066fe4c8c1d04/repoze.bfg.mako-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4986b703672ee4afe9d64545d79ba1b0", "sha256": "197cd93939a494aa4b5a6c390f652209e334315e97c7b69daa77facce338fb8a"}, "downloads": -1, "filename": "repoze.bfg.mako-0.3.tar.gz", "has_sig": false, "md5_digest": "4986b703672ee4afe9d64545d79ba1b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25347, "upload_time": "2010-09-19T15:57:51", "upload_time_iso_8601": "2010-09-19T15:57:51.444262Z", "url": "https://files.pythonhosted.org/packages/56/b0/5a5343b1ce67e3b7da9b4caa0508bbcb286e6a08803888f334a9567bc4e5/repoze.bfg.mako-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4986b703672ee4afe9d64545d79ba1b0", "sha256": "197cd93939a494aa4b5a6c390f652209e334315e97c7b69daa77facce338fb8a"}, "downloads": -1, "filename": "repoze.bfg.mako-0.3.tar.gz", "has_sig": false, "md5_digest": "4986b703672ee4afe9d64545d79ba1b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25347, "upload_time": "2010-09-19T15:57:51", "upload_time_iso_8601": "2010-09-19T15:57:51.444262Z", "url": "https://files.pythonhosted.org/packages/56/b0/5a5343b1ce67e3b7da9b4caa0508bbcb286e6a08803888f334a9567bc4e5/repoze.bfg.mako-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:27 2020"}