{"info": {"author": "Katherine Crowson", "author_email": "crowsonkb@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "partial-apply\n=============\n\nPartial application of functions and method names, supporting placeholder values for positional arguments.\n\nUnlike `functools.partial() <https://docs.python.org/3/library/functools.html#functools.partial>`_, placeholder values are supported so that positional arguments for partial application do not need to be supplied solely from left to right. Keyword arguments are handled equivalently to ``functools.partial()``. It is also possible to \"partially apply\" a method name, producing a function which looks up the method to call on the object supplied as its first argument.\n\n**Dependencies:**\n\n- Python 2.7 or 3.4+.\n\n**Installation:**\n\n- ``$ pip install partial-apply``\n\n**Documentation:**\n\n- Sphinx generated API documentation is available in the ``docs`` subdirectory of this repository and is also published on `GitHub Pages <https://crowsonkb.github.io/partial-apply/>`_.\n\nExamples\n--------\n\nAn example of placeholder use:\n``````````````````````````````\n\n.. code:: python\n\n   from partial_apply import Empty, PartialFn, PartialMethod\n\n   isint = PartialFn(isinstance, Empty, int)\n\nThis makes a function ``isint()`` that takes one positional argument and returns ``True`` if it is an ``int`` and ``False`` otherwise. That is, calling ``isint(1)`` is equivalent to calling ``isinstance(1, int)``. The supplied positional arguments fill in ``Empty`` placeholder slots from left to right before reverting to ``functools.partial()``-style appending.\n\nAn example of ``PartialMethod`` use:\n````````````````````````````````````\n\n.. code:: python\n\n   count_true = PartialMethod('count', True)\n   count_true((False, True))  # returns 1\n   count_true([False, True])  # returns 1\n\nThis makes a function ``count_true()`` that counts the number of ``True`` values in a sequence. It looks up the sequence method ``count`` on the first argument and calls it with the single argument ``True``. The calls shown are equivalent to ``(False, True).count(True)`` and ``[False, True].count(True)``. Since ``count_true()`` only stores the method name and not the method itself, it works on any type with a ``count()`` method.\n\nLike ``PartialFn``, ``PartialMethod`` supports placeholder positional arguments and ``functools.partial()``-like keyword arguments.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/crowsonkb/partial-apply", "keywords": "functional,higher-order,partial", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "partial-apply", "package_url": "https://pypi.org/project/partial-apply/", "platform": "", "project_url": "https://pypi.org/project/partial-apply/", "project_urls": {"Homepage": "https://github.com/crowsonkb/partial-apply"}, "release_url": "https://pypi.org/project/partial-apply/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Partial application of functions and method names, supporting placeholder values for positional arguments.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Partial application of functions and method names, supporting placeholder values for positional arguments.</p>\n<p>Unlike <a href=\"https://docs.python.org/3/library/functools.html#functools.partial\" rel=\"nofollow\">functools.partial()</a>, placeholder values are supported so that positional arguments for partial application do not need to be supplied solely from left to right. Keyword arguments are handled equivalently to <tt>functools.partial()</tt>. It is also possible to \u201cpartially apply\u201d a method name, producing a function which looks up the method to call on the object supplied as its first argument.</p>\n<p><strong>Dependencies:</strong></p>\n<ul>\n<li>Python 2.7 or 3.4+.</li>\n</ul>\n<p><strong>Installation:</strong></p>\n<ul>\n<li><tt>$ pip install <span class=\"pre\">partial-apply</span></tt></li>\n</ul>\n<p><strong>Documentation:</strong></p>\n<ul>\n<li>Sphinx generated API documentation is available in the <tt>docs</tt> subdirectory of this repository and is also published on <a href=\"https://crowsonkb.github.io/partial-apply/\" rel=\"nofollow\">GitHub Pages</a>.</li>\n</ul>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"an-example-of-placeholder-use\">\n<h3>An example of placeholder use:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">partial_apply</span> <span class=\"kn\">import</span> <span class=\"n\">Empty</span><span class=\"p\">,</span> <span class=\"n\">PartialFn</span><span class=\"p\">,</span> <span class=\"n\">PartialMethod</span>\n\n<span class=\"n\">isint</span> <span class=\"o\">=</span> <span class=\"n\">PartialFn</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">,</span> <span class=\"n\">Empty</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</pre>\n<p>This makes a function <tt>isint()</tt> that takes one positional argument and returns <tt>True</tt> if it is an <tt>int</tt> and <tt>False</tt> otherwise. That is, calling <tt>isint(1)</tt> is equivalent to calling <tt>isinstance(1, int)</tt>. The supplied positional arguments fill in <tt>Empty</tt> placeholder slots from left to right before reverting to <tt>functools.partial()</tt>-style appending.</p>\n</div>\n<div id=\"an-example-of-partialmethod-use\">\n<h3>An example of <tt>PartialMethod</tt> use:</h3>\n<pre><span class=\"n\">count_true</span> <span class=\"o\">=</span> <span class=\"n\">PartialMethod</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">count_true</span><span class=\"p\">((</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">))</span>  <span class=\"c1\"># returns 1</span>\n<span class=\"n\">count_true</span><span class=\"p\">([</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>  <span class=\"c1\"># returns 1</span>\n</pre>\n<p>This makes a function <tt>count_true()</tt> that counts the number of <tt>True</tt> values in a sequence. It looks up the sequence method <tt>count</tt> on the first argument and calls it with the single argument <tt>True</tt>. The calls shown are equivalent to <tt>(False, <span class=\"pre\">True).count(True)</span></tt> and <tt>[False, <span class=\"pre\">True].count(True)</span></tt>. Since <tt>count_true()</tt> only stores the method name and not the method itself, it works on any type with a <tt>count()</tt> method.</p>\n<p>Like <tt>PartialFn</tt>, <tt>PartialMethod</tt> supports placeholder positional arguments and <tt>functools.partial()</tt>-like keyword arguments.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4614568, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "714ff7c883ebf6ab4ae5c96b2ebe720b", "sha256": "477f8b6d8a4019e0b293be72df97225901fe55d8fffc6997ac465f856f0c9444"}, "downloads": -1, "filename": "partial_apply-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "714ff7c883ebf6ab4ae5c96b2ebe720b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5248, "upload_time": "2018-12-19T00:47:07", "upload_time_iso_8601": "2018-12-19T00:47:07.543145Z", "url": "https://files.pythonhosted.org/packages/78/df/d8bed299f6a8d0198e22f10cec0f18a9dfa20ba845b0a160c4933013ad4f/partial_apply-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9c9bf5aace927e027aa2436583f87a7", "sha256": "34fde581a8380f025b6386cc15cbb8c3c47c718e88b6312765da6a2ca6c0430d"}, "downloads": -1, "filename": "partial_apply-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b9c9bf5aace927e027aa2436583f87a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5251, "upload_time": "2018-12-19T00:47:09", "upload_time_iso_8601": "2018-12-19T00:47:09.739797Z", "url": "https://files.pythonhosted.org/packages/1f/b6/ac0316759271f12cf88dce3a667af6a78643646e6d462d753cf0ba311d8f/partial_apply-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f2f0afb1cb11d8170fa021e273cf7f3", "sha256": "1241f8c2789f8e01c6171471f19f8bf77fb553ae363d63dabb13c9a4ba286bec"}, "downloads": -1, "filename": "partial-apply-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1f2f0afb1cb11d8170fa021e273cf7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4525, "upload_time": "2018-12-19T00:47:10", "upload_time_iso_8601": "2018-12-19T00:47:10.767012Z", "url": "https://files.pythonhosted.org/packages/db/8d/0b978badb6e725ce8c0a2c8f6b87fbe4f04668a9b14f5310fc3e44469f11/partial-apply-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "714ff7c883ebf6ab4ae5c96b2ebe720b", "sha256": "477f8b6d8a4019e0b293be72df97225901fe55d8fffc6997ac465f856f0c9444"}, "downloads": -1, "filename": "partial_apply-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "714ff7c883ebf6ab4ae5c96b2ebe720b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5248, "upload_time": "2018-12-19T00:47:07", "upload_time_iso_8601": "2018-12-19T00:47:07.543145Z", "url": "https://files.pythonhosted.org/packages/78/df/d8bed299f6a8d0198e22f10cec0f18a9dfa20ba845b0a160c4933013ad4f/partial_apply-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9c9bf5aace927e027aa2436583f87a7", "sha256": "34fde581a8380f025b6386cc15cbb8c3c47c718e88b6312765da6a2ca6c0430d"}, "downloads": -1, "filename": "partial_apply-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b9c9bf5aace927e027aa2436583f87a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5251, "upload_time": "2018-12-19T00:47:09", "upload_time_iso_8601": "2018-12-19T00:47:09.739797Z", "url": "https://files.pythonhosted.org/packages/1f/b6/ac0316759271f12cf88dce3a667af6a78643646e6d462d753cf0ba311d8f/partial_apply-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f2f0afb1cb11d8170fa021e273cf7f3", "sha256": "1241f8c2789f8e01c6171471f19f8bf77fb553ae363d63dabb13c9a4ba286bec"}, "downloads": -1, "filename": "partial-apply-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1f2f0afb1cb11d8170fa021e273cf7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4525, "upload_time": "2018-12-19T00:47:10", "upload_time_iso_8601": "2018-12-19T00:47:10.767012Z", "url": "https://files.pythonhosted.org/packages/db/8d/0b978badb6e725ce8c0a2c8f6b87fbe4f04668a9b14f5310fc3e44469f11/partial-apply-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:14 2020"}