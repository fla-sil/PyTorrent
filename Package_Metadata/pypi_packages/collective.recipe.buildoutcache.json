{"info": {"author": "Beno\u00eet Suttor", "author_email": "bsuttor@imio.be", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "Topic :: Software Development :: Build Tools"], "description": ".. contents::\n\nIntroduction\n============\n\nThis recipe is used to generate buildout-cache.tar.gz2 file.\n\nThe recipe was inspired by update-packages script from Plone Installers-UnifiedInstaller (https://github.com/plone/Installers-UnifiedInstaller/blob/master/update_packages.py)\nThe recipe will start a buildout with forced eggs-directory and download-cache. After it will deleted eggs with binary components, make some cleanup, and finally generate compressed file contains buildout-cache.\n\n\nSupported options\n=================\n\nThe recipe supports the following optionnal options:\n\n.. Note to recipe author!\n   ----------------------\n   For each option the recipe uses you should include a description\n   about the purpose of the option, the format and semantics of the\n   values it accepts, whether it is mandatory or optional and what the\n   default value is if it is omitted.\n\n\ntarget\n    Name of target compressed file. Default value is `buildout-cache.tar.bz2`.\n\nbuildout_file\n    Name of buildout file which be used for constuction of buildout cache. Default value is `buildout.cfg`.\n\nwork_dir\n    Directory where eggs are downloaded for creation of tar.gz2 file. This directroy is deleted before and after the script. Default value is `tmp`.\n\ntimeout\n    Timeout using for buildout in second. If no timeout define but a socket-timeout into buildout section, socket-timeout value is used. Default value is 10.\n\npreremove_old_work_dir\n    Sometime we want to keep word_dir if a build failed. Default value is True, so work_dir will be deleted by default.\n\n\nExample usage\n=============\n\nWe'll start by creating a `buildout.cfg` file that uses the recipe:\n\n::\n\n    [buildout]\n    parts = makebuildoutcache\n\n    [makebuildoutcache]\n    recipe = collective.recipe.buildoutcache\n    target = buildout-cache.tar.bz2\n    buildout_file = buildout.cfg\n    work_dir = my-temp-buildout-work-dir\n\nFor recipe installation you can make this command line:\n\n::\n\n    ./bin/buildout install makebuildoutcache\n\nAnd start recipe script:\n\n::\n\n    ./bin/makebuildoutcache\n\nThen all these packages will download temporally into the directory **my-temp-buildout-work-dir** defined and later it will create a **buildout-cache.tar.bz2** file in the Buildout directory.\n\nbuildout-cache.tar.bz2 archive\n==============================\n\nThe **buildout-cache.tar.bz2** archive contains one single buildout-cache folder. In this folder, there are 2 folders:\n\n* **eggs:** contains all eggs use by your buildout except eggs which have to be compiled.\n\n* **downloads:** contains zip eggs which must be compiled (as AccessControl, lxml, Pillow, ZODB, ...).\n\nBefore starting a buildout, we download and extract buildout-cache and use it on our buildout directory. We add eggs-directory and download-cache parameters on buildout section like this:\n\n::\n\n    [buildout]\n\n    eggs-directory = buildout-cache/eggs\n    download-cache = buildout-cache/downloads\n\nContributors\n************\n\n- Beno\u00eet Suttor, Original Author\nChange history\n**************\n\nChangelog\n=========\n\n1.0.3 (2015-11-24)\n------------------\n\n- Fix way to get bool from a str.\n  [bsuttor]\n\n\n1.0.2 (2015-11-24)\n------------------\n\n- Add preremove_old_work_dir option. You can now not delete work dir if a build failed.\n  [bsuttor]\n\n\n1.0.1 (2015-11-19)\n------------------\n\n- Add timeout option\n  [bsuttor]\n\n- Return code if bin/buildout do not work during construction of cache.\n  [bsuttor]\n\n\n1.0 (2015-07-01)\n----------------\n\n- Package created using templer\n  []\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/collective.recipe.buildoutcache", "keywords": "Plone Buildout Recipe Buildout-Cache Python", "license": "gpl", "maintainer": null, "maintainer_email": null, "name": "collective.recipe.buildoutcache", "package_url": "https://pypi.org/project/collective.recipe.buildoutcache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.recipe.buildoutcache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/collective.recipe.buildoutcache"}, "release_url": "https://pypi.org/project/collective.recipe.buildoutcache/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Recipe for generate buildout-cache.tar.gz2", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. contents::<br><br>Introduction<br>============<br><br>This recipe is used to generate buildout-cache.tar.gz2 file.<br><br>The recipe was inspired by update-packages script from Plone Installers-UnifiedInstaller (https://github.com/plone/Installers-UnifiedInstaller/blob/master/update_packages.py)<br>The recipe will start a buildout with forced eggs-directory and download-cache. After it will deleted eggs with binary components, make some cleanup, and finally generate compressed file contains buildout-cache.<br><br><br>Supported options<br>=================<br><br>The recipe supports the following optionnal options:<br><br>.. Note to recipe author!<br>   ----------------------<br>   For each option the recipe uses you should include a description<br>   about the purpose of the option, the format and semantics of the<br>   values it accepts, whether it is mandatory or optional and what the<br>   default value is if it is omitted.<br><br><br>target<br>    Name of target compressed file. Default value is `buildout-cache.tar.bz2`.<br><br>buildout_file<br>    Name of buildout file which be used for constuction of buildout cache. Default value is `buildout.cfg`.<br><br>work_dir<br>    Directory where eggs are downloaded for creation of tar.gz2 file. This directroy is deleted before and after the script. Default value is `tmp`.<br><br>timeout<br>    Timeout using for buildout in second. If no timeout define but a socket-timeout into buildout section, socket-timeout value is used. Default value is 10.<br><br>preremove_old_work_dir<br>    Sometime we want to keep word_dir if a build failed. Default value is True, so work_dir will be deleted by default.<br><br><br>Example usage<br>=============<br><br>We'll start by creating a `buildout.cfg` file that uses the recipe:<br><br>::<br><br>    [buildout]<br>    parts = makebuildoutcache<br><br>    [makebuildoutcache]<br>    recipe = collective.recipe.buildoutcache<br>    target = buildout-cache.tar.bz2<br>    buildout_file = buildout.cfg<br>    work_dir = my-temp-buildout-work-dir<br><br>For recipe installation you can make this command line:<br><br>::<br><br>    ./bin/buildout install makebuildoutcache<br><br>And start recipe script:<br><br>::<br><br>    ./bin/makebuildoutcache<br><br>Then all these packages will download temporally into the directory **my-temp-buildout-work-dir** defined and later it will create a **buildout-cache.tar.bz2** file in the Buildout directory.<br><br>buildout-cache.tar.bz2 archive<br>==============================<br><br>The **buildout-cache.tar.bz2** archive contains one single buildout-cache folder. In this folder, there are 2 folders:<br><br>* **eggs:** contains all eggs use by your buildout except eggs which have to be compiled.<br><br>* **downloads:** contains zip eggs which must be compiled (as AccessControl, lxml, Pillow, ZODB, ...).<br><br>Before starting a buildout, we download and extract buildout-cache and use it on our buildout directory. We add eggs-directory and download-cache parameters on buildout section like this:<br><br>::<br><br>    [buildout]<br><br>    eggs-directory = buildout-cache/eggs<br>    download-cache = buildout-cache/downloads<br><br>Contributors<br>************<br><br>- Beno\u00eet Suttor, Original Author<br>Change history<br>**************<br><br>Changelog<br>=========<br><br>1.0.3 (2015-11-24)<br>------------------<br><br>- Fix way to get bool from a str.<br>  [bsuttor]<br><br><br>1.0.2 (2015-11-24)<br>------------------<br><br>- Add preremove_old_work_dir option. You can now not delete work dir if a build failed.<br>  [bsuttor]<br><br><br>1.0.1 (2015-11-19)<br>------------------<br><br>- Add timeout option<br>  [bsuttor]<br><br>- Return code if bin/buildout do not work during construction of cache.<br>  [bsuttor]<br><br><br>1.0 (2015-07-01)<br>----------------<br><br>- Package created using templer<br>  []<br><br>Download<br>********\n          </div>"}, "last_serial": 1831345, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3f5797a4bfdbb7a4be2092b111a5886a", "sha256": "c1afc743829ad57e7ff5193b73d5d50a0363a61d5fd624626a349bf7cb0faa19"}, "downloads": -1, "filename": "collective.recipe.buildoutcache-1.0.zip", "has_sig": false, "md5_digest": "3f5797a4bfdbb7a4be2092b111a5886a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28486, "upload_time": "2015-07-01T06:53:04", "upload_time_iso_8601": "2015-07-01T06:53:04.882345Z", "url": "https://files.pythonhosted.org/packages/ed/0b/2570b67494b84b27dac8ddd1973d0742c971bd5fa80cf88d419097eb7cbc/collective.recipe.buildoutcache-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "01679519749abc45d4129890009079af", "sha256": "4deb6daf051ae97b683e98326ddd7477d9688ea249d5bd9a455b1e39cb28ebb6"}, "downloads": -1, "filename": "collective.recipe.buildoutcache-1.0.1.tar.gz", "has_sig": false, "md5_digest": "01679519749abc45d4129890009079af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19101, "upload_time": "2015-11-19T12:55:10", "upload_time_iso_8601": "2015-11-19T12:55:10.207912Z", "url": "https://files.pythonhosted.org/packages/23/0c/bcc199f6d7b6055ec0d85cd45c4f7692e0c424453643da5935dc2c6c27b3/collective.recipe.buildoutcache-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1dd400ab24fa2219ecd1128b960170d6", "sha256": "39b7f93a3881fa71c4ec8436b3d5f6a570f66f73544b2ce0fb77b013ddd95b4f"}, "downloads": -1, "filename": "collective.recipe.buildoutcache-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1dd400ab24fa2219ecd1128b960170d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19354, "upload_time": "2015-11-24T12:59:08", "upload_time_iso_8601": "2015-11-24T12:59:08.861072Z", "url": "https://files.pythonhosted.org/packages/ac/da/0e1018c34699ea282d3689b2c2709fab604c47ec4705374c525199ad5091/collective.recipe.buildoutcache-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "abd3ba8531245e7ee17c9d6d1dc91dc4", "sha256": "0f34a8f452e051380c8d6ce706c95b566c7ca8c4cc77ed11d7dda945da9ac454"}, "downloads": -1, "filename": "collective.recipe.buildoutcache-1.0.3.tar.gz", "has_sig": false, "md5_digest": "abd3ba8531245e7ee17c9d6d1dc91dc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19457, "upload_time": "2015-11-24T13:26:53", "upload_time_iso_8601": "2015-11-24T13:26:53.239754Z", "url": "https://files.pythonhosted.org/packages/eb/b7/673b863b265af137f9758f5d9bf57acb8d1b51a57d11a4968df3d25e2238/collective.recipe.buildoutcache-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "abd3ba8531245e7ee17c9d6d1dc91dc4", "sha256": "0f34a8f452e051380c8d6ce706c95b566c7ca8c4cc77ed11d7dda945da9ac454"}, "downloads": -1, "filename": "collective.recipe.buildoutcache-1.0.3.tar.gz", "has_sig": false, "md5_digest": "abd3ba8531245e7ee17c9d6d1dc91dc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19457, "upload_time": "2015-11-24T13:26:53", "upload_time_iso_8601": "2015-11-24T13:26:53.239754Z", "url": "https://files.pythonhosted.org/packages/eb/b7/673b863b265af137f9758f5d9bf57acb8d1b51a57d11a4968df3d25e2238/collective.recipe.buildoutcache-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:56 2020"}