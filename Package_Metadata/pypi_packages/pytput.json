{"info": {"author": "S\u00e9bastien MB", "author_email": "seb@essembeh.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries", "Topic :: Terminals :: Terminal Emulators/X Terminals", "Topic :: Utilities"], "description": "\n![Github](https://img.shields.io/github/tag/essembeh/pytput.svg)\n![PyPi](https://img.shields.io/pypi/v/pytput.svg)\n![Python](https://img.shields.io/pypi/pyversions/pytput.svg)\n\n\n\n# PyTput\n\n> TL;DR: You can format your message with `{message:bold,underline,purple}`\n> \nSimple executable and *Python3 API* to format messages using colors and styles from `tput`:\n- `pytput` executable to be used in any *shell-like* script\n- *Python3* module to format messages directly in any python application\n\n![help](images/help.png)\n\n\n# Install\n\nInstall via `pip`:\n\n```sh\n# Install pip for python3\n$ sudo apt install python3 python3-pip python3-setuptools\n# Install from PyPI\n$ pip3 install --user pytput\n# ... Or directly from the sources\n$ pip3 install --user git+https://github.com/essembeh/pytput\n```\n\nTo setup a development environment:\n\n```sh\n$ git clone https://github.com/essembeh/pytput\n$ cd pytput\n$ make venv\n$ source venv/bin/activate\n(venv) $ pip install -e .\n```\n\n# Usage\n\n## Using *strcolor* instead of *str*\n\n`strcolor` is a subclass of builtin `str` class to overide the default `str.format` method to use `TputFormatter`\n\n```python\nfrom pytput import strcolor\n# Create a strcolor like a string \na = strcolor(\"Hello\")\n# You can print it\nprint(a)\n# You can append text\na += \" {who:red,bold}\"\nprint(a)\n# When formatting, styles are applied\nprint(a.format(who=\"World\"))\n# And you can also use *constant* like {'today':bold} will be the string \"today\" with bold style applied\na += \", how are you {'today':green,underline}\"\nprint(a.format(who=\"User\"))\n```\n![strcolor](images/strcolor.png)\n\n> Styles can be combined with `','` like `{message:underline,bold,yellow}`\n\n> You can also reuse `string.Formatter` format specification like `{myint:05d,underline,bold,yellow}` or `{mystr:.10,underline,dim,red}`\n\n> You can apply a style to constant strings with `{'today':bold}` or `{\"today\":bold}`\n\n## Using a *TputFormatter* class\n\nYou can use the `TputFormatter` class to decorate variables with *styles*.\n\n```python\nfrom pytput import TputFormatter\ntf = TputFormatter()\n# Build a colored string and print it\nprint(tf.format(\"{'Hello':bg_yellow,bold} {who:cyan,underline}!\", who=\"World\"))\n# You can combine multiple styles and common str.format spec\nprint(tf.format(\"{'Hello':.2,bg_yellow,underline} {myvalue:04d,cyan}!\", myvalue=42))\n```\n\n![TputFormatter](images/formatter.png)\n\nHere is the list of available styles\n\n| Formatter keyword | tput command   |\n| ----------------- | -------------- |\n| *bold*            | `tput bold`    |\n| *dim*             | `tput dim`     |\n| *underline*       | `tput smul`    |\n| *blink*           | `tput blink`   |\n| *standout*        | `tput smso`    |\n| *reverse*         | `tput rev`     |\n| *reset*           | `tput sgr0`    |\n| *black*           | `tput setaf 0` |\n| *red*             | `tput setaf 1` |\n| *green*           | `tput setaf 2` |\n| *yellow*          | `tput setaf 3` |\n| *blue*            | `tput setaf 4` |\n| *purple*          | `tput setaf 5` |\n| *cyan*            | `tput setaf 6` |\n| *white*           | `tput setaf 7` |\n| *bg_black*        | `tput setab 0` |\n| *bg_red*          | `tput setab 1` |\n| *bg_green*        | `tput setab 2` |\n| *bg_yellow*       | `tput setab 3` |\n| *bg_blue*         | `tput setab 4` |\n| *bg_purple*       | `tput setab 5` |\n| *bg_cyan*         | `tput setab 6` |\n| *bg_white*        | `tput setab 7` |\n\n\n## Directly use *Style*\n\n\n```python\nfrom pytput import Style\nprint(Style.RED.apply(\"Hello\"), Style.GREEN.apply(\"World\"))\n```\n![Style](images/style.png)\n\n\n## Using *pytput* executable\n\n*PyTput* comes with an handy executable to use colors and styles directly from the command line. This is usefull to customize messages in shell scripts for example.\n\n```sh\n$ pytput '{\"Hello\":red} {0:green}!' 'World'\n$ pytput \"{'This is':bold,red} {0:underline,dim,yellow} {1:bg_purple,yellow,bold}\" \"a message\" \"with styles ;)\"\n$ pytput \"{0:red,bold,underline}\" \"Simple error message\"\n$ pytput \"{'Another message':bg_purple,white,bold}\"\n```\n\n![CLI](images/cli.png)\n\n> See `pytput --help` for more details.\n\n## Disabling *pytput*\n\nBy default, *pytput API* is disabled if `sys.stdout.isatty()` is `False`, so you won't write any color nor style if you pipe the output or redirect it in a file.\n\nUsing `pytput` executable, you can force colors and styles using the `--force` argument.\n\n```sh\n# You get colors by default\n$ pytput '{0:red} {\"World\":green}!' 'Hello'\n# Colors will be disabled\n$ pytput '{0:red} {\"World\":green}!' 'Hello' | cat \n$ pytput '{0:red} {\"World\":green}!' 'Hello' > /tmp/pytput.txt\n$ cat /tmp/pytput.txt\n# Colors will be enabled\n$ pytput --force '{0:red} {\"World\":green}!' 'Hello' | cat \n$ pytput --force '{0:red} {\"World\":green}!' 'Hello' > /tmp/pytput.txt\n$ cat /tmp/pytput.txt\n```\n\n![force](images/force.png)\n\nUsing *pytput python3 API*, you can force styles and colors even if `sys.stdout` is not a TTY using `TputFormatter`:\n```python\nfrom pytput import TputFormatter, strcolor\n\n# These lines won't have colors if you redirect stdout to a file\nprint(TputFormatter().format(\"{0:red} {'World':green}!\", \"Hello\"))\nprint(strcolor(\"{0:red} {'World':green}!\").format(\"Hello\"))\n\n# These line will have colors even if stdout is redirected \nprint(TputFormatter(check_tty=False).format(\"{0:red} {'World':green}!\", \"Hello\"))\nprint(strcolor(\"{0:red} {'World':green}!\").format(\"Hello\", check_tty=False))\n```\n\nYou can totally disable `pytput` by setting `PYTPUT_DISABLE` variable in environment.\n```sh\n# Colors will be enabled\n$ pytput '{0:red} {\"World\":green}!' 'Hello'\n# Colors will be disabled\n$ PYTPUT_DISABLE=1 pytput '{0:red} {\"World\":green}!' 'Hello'\n```\n![env](images/env.png)\n\n> Note: When using *pytput API* (`strcolor`, `TputFormatter` ...), setting the environment variable `PYTPUT_DISABLE=1` will also disable all colors and styles.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/essembeh/pytput", "keywords": "", "license": "Mozilla Public License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "pytput", "package_url": "https://pypi.org/project/pytput/", "platform": "", "project_url": "https://pypi.org/project/pytput/", "project_urls": {"Homepage": "https://github.com/essembeh/pytput"}, "release_url": "https://pypi.org/project/pytput/0.3.0/", "requires_dist": ["dataclasses ; python_version < \"3.7\""], "requires_python": ">=3.6.0", "summary": "Python3 API to format messages using colors and styles", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d073df7df9865b4757e4a48848fa1bc3171c4040/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f657373656d6265682f7079747075742e737667\">\n<img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9136bd97852a1ed70dcd938b7e8895e2efce5e5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079747075742e737667\">\n<img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a72e50b88c228e15a0ab2c9b1a5183b5820c8576/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079747075742e737667\"></p>\n<h1>PyTput</h1>\n<blockquote>\n<p>TL;DR: You can format your message with <code>{message:bold,underline,purple}</code></p>\n</blockquote>\n<p>Simple executable and <em>Python3 API</em> to format messages using colors and styles from <code>tput</code>:</p>\n<ul>\n<li><code>pytput</code> executable to be used in any <em>shell-like</em> script</li>\n<li><em>Python3</em> module to format messages directly in any python application</li>\n</ul>\n<p><img alt=\"help\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfda8fe66d1b2f9af9a2dabb62a3214ecdfc34fb/696d616765732f68656c702e706e67\"></p>\n<h1>Install</h1>\n<p>Install via <code>pip</code>:</p>\n<pre><span class=\"c1\"># Install pip for python3</span>\n$ sudo apt install python3 python3-pip python3-setuptools\n<span class=\"c1\"># Install from PyPI</span>\n$ pip3 install --user pytput\n<span class=\"c1\"># ... Or directly from the sources</span>\n$ pip3 install --user git+https://github.com/essembeh/pytput\n</pre>\n<p>To setup a development environment:</p>\n<pre>$ git clone https://github.com/essembeh/pytput\n$ <span class=\"nb\">cd</span> pytput\n$ make venv\n$ <span class=\"nb\">source</span> venv/bin/activate\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install -e .\n</pre>\n<h1>Usage</h1>\n<h2>Using <em>strcolor</em> instead of <em>str</em></h2>\n<p><code>strcolor</code> is a subclass of builtin <code>str</code> class to overide the default <code>str.format</code> method to use <code>TputFormatter</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytput</span> <span class=\"kn\">import</span> <span class=\"n\">strcolor</span>\n<span class=\"c1\"># Create a strcolor like a string </span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">strcolor</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># You can print it</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"c1\"># You can append text</span>\n<span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"s2\">\" {who:red,bold}\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"c1\"># When formatting, styles are applied</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">who</span><span class=\"o\">=</span><span class=\"s2\">\"World\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># And you can also use *constant* like {'today':bold} will be the string \"today\" with bold style applied</span>\n<span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"s2\">\", how are you {'today':green,underline}\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">who</span><span class=\"o\">=</span><span class=\"s2\">\"User\"</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"strcolor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/754e9b70d65be568c1b125cd178ebb49aa36e3a3/696d616765732f737472636f6c6f722e706e67\"></p>\n<blockquote>\n<p>Styles can be combined with <code>','</code> like <code>{message:underline,bold,yellow}</code></p>\n</blockquote>\n<blockquote>\n<p>You can also reuse <code>string.Formatter</code> format specification like <code>{myint:05d,underline,bold,yellow}</code> or <code>{mystr:.10,underline,dim,red}</code></p>\n</blockquote>\n<blockquote>\n<p>You can apply a style to constant strings with <code>{'today':bold}</code> or <code>{\"today\":bold}</code></p>\n</blockquote>\n<h2>Using a <em>TputFormatter</em> class</h2>\n<p>You can use the <code>TputFormatter</code> class to decorate variables with <em>styles</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytput</span> <span class=\"kn\">import</span> <span class=\"n\">TputFormatter</span>\n<span class=\"n\">tf</span> <span class=\"o\">=</span> <span class=\"n\">TputFormatter</span><span class=\"p\">()</span>\n<span class=\"c1\"># Build a colored string and print it</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"{'Hello':bg_yellow,bold} {who:cyan,underline}!\"</span><span class=\"p\">,</span> <span class=\"n\">who</span><span class=\"o\">=</span><span class=\"s2\">\"World\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># You can combine multiple styles and common str.format spec</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"{'Hello':.2,bg_yellow,underline} {myvalue:04d,cyan}!\"</span><span class=\"p\">,</span> <span class=\"n\">myvalue</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"TputFormatter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfa07575132f9dc61deece5291e2aa6916acb03f/696d616765732f666f726d61747465722e706e67\"></p>\n<p>Here is the list of available styles</p>\n<table>\n<thead>\n<tr>\n<th>Formatter keyword</th>\n<th>tput command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>bold</em></td>\n<td><code>tput bold</code></td>\n</tr>\n<tr>\n<td><em>dim</em></td>\n<td><code>tput dim</code></td>\n</tr>\n<tr>\n<td><em>underline</em></td>\n<td><code>tput smul</code></td>\n</tr>\n<tr>\n<td><em>blink</em></td>\n<td><code>tput blink</code></td>\n</tr>\n<tr>\n<td><em>standout</em></td>\n<td><code>tput smso</code></td>\n</tr>\n<tr>\n<td><em>reverse</em></td>\n<td><code>tput rev</code></td>\n</tr>\n<tr>\n<td><em>reset</em></td>\n<td><code>tput sgr0</code></td>\n</tr>\n<tr>\n<td><em>black</em></td>\n<td><code>tput setaf 0</code></td>\n</tr>\n<tr>\n<td><em>red</em></td>\n<td><code>tput setaf 1</code></td>\n</tr>\n<tr>\n<td><em>green</em></td>\n<td><code>tput setaf 2</code></td>\n</tr>\n<tr>\n<td><em>yellow</em></td>\n<td><code>tput setaf 3</code></td>\n</tr>\n<tr>\n<td><em>blue</em></td>\n<td><code>tput setaf 4</code></td>\n</tr>\n<tr>\n<td><em>purple</em></td>\n<td><code>tput setaf 5</code></td>\n</tr>\n<tr>\n<td><em>cyan</em></td>\n<td><code>tput setaf 6</code></td>\n</tr>\n<tr>\n<td><em>white</em></td>\n<td><code>tput setaf 7</code></td>\n</tr>\n<tr>\n<td><em>bg_black</em></td>\n<td><code>tput setab 0</code></td>\n</tr>\n<tr>\n<td><em>bg_red</em></td>\n<td><code>tput setab 1</code></td>\n</tr>\n<tr>\n<td><em>bg_green</em></td>\n<td><code>tput setab 2</code></td>\n</tr>\n<tr>\n<td><em>bg_yellow</em></td>\n<td><code>tput setab 3</code></td>\n</tr>\n<tr>\n<td><em>bg_blue</em></td>\n<td><code>tput setab 4</code></td>\n</tr>\n<tr>\n<td><em>bg_purple</em></td>\n<td><code>tput setab 5</code></td>\n</tr>\n<tr>\n<td><em>bg_cyan</em></td>\n<td><code>tput setab 6</code></td>\n</tr>\n<tr>\n<td><em>bg_white</em></td>\n<td><code>tput setab 7</code></td>\n</tr></tbody></table>\n<h2>Directly use <em>Style</em></h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytput</span> <span class=\"kn\">import</span> <span class=\"n\">Style</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Style</span><span class=\"o\">.</span><span class=\"n\">RED</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">),</span> <span class=\"n\">Style</span><span class=\"o\">.</span><span class=\"n\">GREEN</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"s2\">\"World\"</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"Style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e84b7e9be53e3b33fa7e71df40ea15281f28c71/696d616765732f7374796c652e706e67\"></p>\n<h2>Using <em>pytput</em> executable</h2>\n<p><em>PyTput</em> comes with an handy executable to use colors and styles directly from the command line. This is usefull to customize messages in shell scripts for example.</p>\n<pre>$ pytput <span class=\"s1\">'{\"Hello\":red} {0:green}!'</span> <span class=\"s1\">'World'</span>\n$ pytput <span class=\"s2\">\"{'This is':bold,red} {0:underline,dim,yellow} {1:bg_purple,yellow,bold}\"</span> <span class=\"s2\">\"a message\"</span> <span class=\"s2\">\"with styles ;)\"</span>\n$ pytput <span class=\"s2\">\"{0:red,bold,underline}\"</span> <span class=\"s2\">\"Simple error message\"</span>\n$ pytput <span class=\"s2\">\"{'Another message':bg_purple,white,bold}\"</span>\n</pre>\n<p><img alt=\"CLI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e72872a81a09c298439a274e719c1f91568e721f/696d616765732f636c692e706e67\"></p>\n<blockquote>\n<p>See <code>pytput --help</code> for more details.</p>\n</blockquote>\n<h2>Disabling <em>pytput</em></h2>\n<p>By default, <em>pytput API</em> is disabled if <code>sys.stdout.isatty()</code> is <code>False</code>, so you won't write any color nor style if you pipe the output or redirect it in a file.</p>\n<p>Using <code>pytput</code> executable, you can force colors and styles using the <code>--force</code> argument.</p>\n<pre><span class=\"c1\"># You get colors by default</span>\n$ pytput <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span>\n<span class=\"c1\"># Colors will be disabled</span>\n$ pytput <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span> <span class=\"p\">|</span> cat \n$ pytput <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span> &gt; /tmp/pytput.txt\n$ cat /tmp/pytput.txt\n<span class=\"c1\"># Colors will be enabled</span>\n$ pytput --force <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span> <span class=\"p\">|</span> cat \n$ pytput --force <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span> &gt; /tmp/pytput.txt\n$ cat /tmp/pytput.txt\n</pre>\n<p><img alt=\"force\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12d2fe6e919d64211aaadfa493f871039e236ee9/696d616765732f666f7263652e706e67\"></p>\n<p>Using <em>pytput python3 API</em>, you can force styles and colors even if <code>sys.stdout</code> is not a TTY using <code>TputFormatter</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytput</span> <span class=\"kn\">import</span> <span class=\"n\">TputFormatter</span><span class=\"p\">,</span> <span class=\"n\">strcolor</span>\n\n<span class=\"c1\"># These lines won't have colors if you redirect stdout to a file</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">TputFormatter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"{0:red} {'World':green}!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">strcolor</span><span class=\"p\">(</span><span class=\"s2\">\"{0:red} {'World':green}!\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># These line will have colors even if stdout is redirected </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">TputFormatter</span><span class=\"p\">(</span><span class=\"n\">check_tty</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"{0:red} {'World':green}!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">strcolor</span><span class=\"p\">(</span><span class=\"s2\">\"{0:red} {'World':green}!\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"n\">check_tty</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n</pre>\n<p>You can totally disable <code>pytput</code> by setting <code>PYTPUT_DISABLE</code> variable in environment.</p>\n<pre><span class=\"c1\"># Colors will be enabled</span>\n$ pytput <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span>\n<span class=\"c1\"># Colors will be disabled</span>\n$ <span class=\"nv\">PYTPUT_DISABLE</span><span class=\"o\">=</span><span class=\"m\">1</span> pytput <span class=\"s1\">'{0:red} {\"World\":green}!'</span> <span class=\"s1\">'Hello'</span>\n</pre>\n<p><img alt=\"env\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ace73a6c558a21fbb5f55392df4d5081a9cb11e3/696d616765732f656e762e706e67\"></p>\n<blockquote>\n<p>Note: When using <em>pytput API</em> (<code>strcolor</code>, <code>TputFormatter</code> ...), setting the environment variable <code>PYTPUT_DISABLE=1</code> will also disable all colors and styles.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6341937, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a11319625068123732667b231999164a", "sha256": "b3e1200a4e03000444fafa0d48f9a48cb36f037f4de9ac1009e2dbc4cc582548"}, "downloads": -1, "filename": "pytput-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a11319625068123732667b231999164a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14121, "upload_time": "2019-07-20T20:01:10", "upload_time_iso_8601": "2019-07-20T20:01:10.636752Z", "url": "https://files.pythonhosted.org/packages/9e/df/386e4066fe8f37e02f738d482f27cb4cd53227b22a861f88f981a0ba3876/pytput-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3a9f81b84a67d5637559e90a842cf28", "sha256": "f890b28310eb935c9d8c79c5afe4ba008423283c9e94f3adf4b3ab831d8c18a0"}, "downloads": -1, "filename": "pytput-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a3a9f81b84a67d5637559e90a842cf28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213462, "upload_time": "2019-07-20T20:01:13", "upload_time_iso_8601": "2019-07-20T20:01:13.987981Z", "url": "https://files.pythonhosted.org/packages/ce/98/f70924667c73ebe8f674969b9857c5986810644208e9029898c6eda9112b/pytput-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8fc2fb49ce743181393afef64154cfe9", "sha256": "b6ad09ea8115644129a8ec4c5320e1892e36501b308bcfc68026ec09ed834d5f"}, "downloads": -1, "filename": "pytput-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8fc2fb49ce743181393afef64154cfe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14101, "upload_time": "2019-07-23T11:34:20", "upload_time_iso_8601": "2019-07-23T11:34:20.747211Z", "url": "https://files.pythonhosted.org/packages/d4/21/826c3bd997a000f3cc7e50130f12340b003e350cd53d47ec1d45049db6fe/pytput-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b50ef23384182dedd4cb011c540c564a", "sha256": "d355feefb35e8baca098dfcbd824f3083ff9860786b353a56117afef01d5ad55"}, "downloads": -1, "filename": "pytput-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b50ef23384182dedd4cb011c540c564a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 223825, "upload_time": "2019-07-23T11:34:22", "upload_time_iso_8601": "2019-07-23T11:34:22.822772Z", "url": "https://files.pythonhosted.org/packages/90/f2/54587c04aaf35a47670634d16b8e44bdf210aa22c78d9e73cdd3de0cda72/pytput-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fc0f866008ed06549a71d4bc02c160e4", "sha256": "e4241d6c235bdfba87b9eb54447a48cabcc123c7632b541c3267316d11405ecc"}, "downloads": -1, "filename": "pytput-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fc0f866008ed06549a71d4bc02c160e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14282, "upload_time": "2019-07-23T20:54:02", "upload_time_iso_8601": "2019-07-23T20:54:02.041681Z", "url": "https://files.pythonhosted.org/packages/13/c1/625151140f49fba6a9f4c4046d6717aeef4ce30417d8fa8a7368cdc654d5/pytput-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a887b7b2566d379eb0e51e58981d9562", "sha256": "c1867b79c8231190bcb6c423375cd349c44467aa77cb034d9e3fc5170deb4824"}, "downloads": -1, "filename": "pytput-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a887b7b2566d379eb0e51e58981d9562", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 223957, "upload_time": "2019-07-23T20:54:04", "upload_time_iso_8601": "2019-07-23T20:54:04.316309Z", "url": "https://files.pythonhosted.org/packages/da/db/7435d5dcb16e38c02d5ad2876fc8b4152de07b92808d264f8f3423f7565e/pytput-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6513c0aa84505f874dd562ff0c4ffc0f", "sha256": "eb52f76ada12aa35be9acbcd10002ab09f119a22401e3e63031feebff8c5ae9e"}, "downloads": -1, "filename": "pytput-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6513c0aa84505f874dd562ff0c4ffc0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 13200, "upload_time": "2019-12-19T21:26:22", "upload_time_iso_8601": "2019-12-19T21:26:22.090340Z", "url": "https://files.pythonhosted.org/packages/68/25/adfb8bbf6bb085135ac32b4bd45a161e8303f3cfb829c8ab843ca49a523f/pytput-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a6f5d9c4333c31910777fe95fa9915d", "sha256": "d1ccf9f412e9dad17f9e5f7a0170bfb7d357fb267deb4028d3cd0a63d48e7471"}, "downloads": -1, "filename": "pytput-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1a6f5d9c4333c31910777fe95fa9915d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 197514, "upload_time": "2019-12-19T21:26:23", "upload_time_iso_8601": "2019-12-19T21:26:23.819268Z", "url": "https://files.pythonhosted.org/packages/4b/ed/4f0c970832803e9cb614079db37e13111d87b43726abaab41018b86bd7a3/pytput-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "437950f857c9318a1d78a648ab36fe60", "sha256": "c6d87eb1073197be7ffc259649bc9f557ff72e31623c83794037fea25e4173bb"}, "downloads": -1, "filename": "pytput-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "437950f857c9318a1d78a648ab36fe60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 13204, "upload_time": "2019-12-20T21:46:42", "upload_time_iso_8601": "2019-12-20T21:46:42.656117Z", "url": "https://files.pythonhosted.org/packages/2e/16/6970769c57b10caa8d8ab43facb31733e52ad3cb1e4598ccd617fd67141a/pytput-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fefd69ce0e08d48acbc36020c3ea0161", "sha256": "fda2e35eae97b16608da8ed0ade7d13da91d55a0537c040c404c29fe012ddf5f"}, "downloads": -1, "filename": "pytput-0.3.0.tar.gz", "has_sig": false, "md5_digest": "fefd69ce0e08d48acbc36020c3ea0161", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 197520, "upload_time": "2019-12-20T21:46:44", "upload_time_iso_8601": "2019-12-20T21:46:44.581052Z", "url": "https://files.pythonhosted.org/packages/5a/a3/92ada5fc37b86ec2a44d085580a475abce05948cb5c87cfe8434d9b87310/pytput-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "437950f857c9318a1d78a648ab36fe60", "sha256": "c6d87eb1073197be7ffc259649bc9f557ff72e31623c83794037fea25e4173bb"}, "downloads": -1, "filename": "pytput-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "437950f857c9318a1d78a648ab36fe60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 13204, "upload_time": "2019-12-20T21:46:42", "upload_time_iso_8601": "2019-12-20T21:46:42.656117Z", "url": "https://files.pythonhosted.org/packages/2e/16/6970769c57b10caa8d8ab43facb31733e52ad3cb1e4598ccd617fd67141a/pytput-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fefd69ce0e08d48acbc36020c3ea0161", "sha256": "fda2e35eae97b16608da8ed0ade7d13da91d55a0537c040c404c29fe012ddf5f"}, "downloads": -1, "filename": "pytput-0.3.0.tar.gz", "has_sig": false, "md5_digest": "fefd69ce0e08d48acbc36020c3ea0161", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 197520, "upload_time": "2019-12-20T21:46:44", "upload_time_iso_8601": "2019-12-20T21:46:44.581052Z", "url": "https://files.pythonhosted.org/packages/5a/a3/92ada5fc37b86ec2a44d085580a475abce05948cb5c87cfe8434d9b87310/pytput-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:26 2020"}