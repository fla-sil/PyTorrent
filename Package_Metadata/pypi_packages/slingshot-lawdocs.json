{"info": {"author": "A Mosca", "author_email": "staff.amosca@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3.7"], "description": "# Slingshot\nSlingshot is a Python library bringed on by **A Mosca** team for creating reproducible procedural documents for Brazilian law-suits. It was created during the development of **A Mosca** web application in order to democratize access to justice in Brazil, but as the code became more complex, we set the project apart and started to develop both independently. \n\n## Installation\n\n```\npip install slingshot-lawdocs\n```\n\n## Objective\nBringing to the community of law and technology students a open-source quality tool for creating procedural documents without having to lay on expensive and proprietary solutions bringed on by lawtechs for law suits. \n\n## Why should you use Slingshot\nSlingshot creates procedural documents by chaining content blocks (Layers) in a way that is very alike to Keras high level Deep Learning framework, and let law-academic learn programming in a useful, rich and difunded language, Python. \n\nAlso, not only it is very easy to learn (as Python itseld), but part the knowledge adquired on learning how to use it can be leveraged to use in other coding tasks, as Data Science activities, web-crawling and even web-development.\n\n## Knowledge requirements\n * Python syntax\n * String manipulations\n * Python OOP basics (we already did the hard part for you)\n \n ## System requirements\n  * Python >= 3.7\n  * python-markdown\n  * pandoc\n  * pdfkit\n  \n ## Slingshot basics\n Slingshot documents are built by chaineble-content blocks, **ContentLayer** class objects that are wrapped by **ProceduralDocument** class objects. Once all the content blocks are added and chained to the **ProceduralDocument**, it has built-in methods that generates and formats it in both **pdf**, **docx** and **html** format. \n \n There are two main tasks that can be performed with Slingshot:\n  * Creating new content block Layers\n  * Elaborating procedural Documents by chaining content block Layers.\n  \n  ### ProceduralDocument\n  This class consists of a wrapper with some text lists referring to the \"facts\", \"law\" and \"requests\" part of the ProceduralDocument, aside from the \"parts\" and some \"preliminars\". When the ProceduralDocument is compilied, it gathers from the ContentLayer its info and puts it into the right place, so the text can be fully generated and formatted.\n  \n  ### Example on creating a procedural document with layers\n  \n   \n```python\n# Here we import the used layers, parts and the core document\nfrom slingshot.procedural_document.layers.models import ContratoServicos, InversaoOnusProva, PropagandaEnganosa\nfrom slingshot.procedural_document.layers.models import CobrancaIndevida, ImpossivelCancelar, DanoMoral, RegistroSerasa\nfrom slingshot.procedural_document.layers.parts import Author, Claro_SP_re\nfrom slingshot.procedural_document.core import ProceduralDocument\n```\n\n```python\n# We first have to instance the document\npet = ProceduralDocument()\n```\n\n\n```python\n# We then add the layers chaining them to the document - alike to Keras\npet.add(Author(name=\"Equipe A Mosca\"\n               profession=\"nerds revoltados com computadores\"\n               address=\"Rua da Nossa Casinha 1000, casa 8\",\n               cpf=\"123.456.789-00\"))\n\npet.add(ContratoServicos(service=\"ades\u00e3o a plano de celular\",\n                        docs = [\"contas pagas\"]))\n\npet.add(Claro_SP_re)\n\npet.add(InversaoOnusProva())\n\npet.add(PropagandaEnganosa(prometido=\"plano de internet sem corte de dados\",\n                          real=\"plano de celular com corte de dados ao fim da franquia\",\n                          valor=1000,\n                          docs=\"fotos e panfletos da operadora\",\n                          dano_ocorrido=\"usar o GPS na volta do trabalho, para n\u00e3o se atrasar para buscar o amigo\",\n                          deseja_prometido=True))\n\npet.add(CobrancaIndevida(tarifas_cobradas=[\"Dados a mais\"],\n                         valor=2000,\n                         docs=[\"contas\"]))\n\npet.add(RegistroSerasa(divida_registrada=\"Conta do celular (11) - 99999-8888\",\n                       valor=2000,\n                        docs=[\"Conta do m\u00eas de setembro\"]))\n\npet.add(ImpossivelCancelar(dano_moral=3000,\n                           docs=[\"Pedido de cancelamento e email\"]))\n\npet.add(DanoMoral(2000))\n```\n\n```python\n# We then compile our document. Our engine distributes all the facts, law and requests on their specific fields to generate the document\n# Here you just fill holes with the right info\npet.compile()\n```\n\n```python\n# You can seek the summary if you want - very alike to Keras model\n# See what it prints:\npet.summary()\n```\n\n```\nA\u00e7\u00e3o condenat\u00f3ria com base no CDC\n#############\nCAMADAS DA PETICAO:\nAutor\nParte Re\nContexto - Presta\u00e7\u00e3o de servi\u00e7os\nPreliminar - Inversao \u00f4nus da prova\nPropaganda enganosa\nCobranca indevida\nRegistro indevido no Serasa\nImpossivel cancelar plano\nDano moral puro\n#############\nValor da causa: R$ 12000\n```\n\n```python\n# with this line, it generates your pdf, docx and html document\na = pet.save_document(path='my_procedural_document',\n                      to_pdf=True,\n                      to_word=True)\n```\n\n### Coding a simple ContentLayer for request\n\nWe will inherit from its parent class and decide the content and the holes to be filled with content. When handled by our wrapper, everything goes to its proper part and the ProceduralDocument text is generated.\n```python\n\n#see that it inherits from Request class. It has some aside features, as\n#the layer name that appears on the summary,\n#the value of hte request,\n#the document that prove the allegations,\n#the holes that are filled to give sense to the layer.\n\n\nclass RegistroSerasa(Request):\n    def __init__(self, divida_registrada, valor, docs):\n        super(RegistroSerasa, self).__init__()\n        self.layer_type = \"Registro indevido no Serasa\"\n        self.value = valor\n        self.suposta_divida = divida_registrada\n        self.docs = docs\n        self.set_texts()\n    \n    def set_texts(self):\n        self.set_facts()\n        self.set_law()\n        self.set_requests()\n    \n    def set_facts(self):\n        docs = str(self.docs).replace(\"[\", \"\").replace(\"]\", \"\")\n        base = \"Conforme a documenta\u00e7\u00e3o anexa ({}), a parte re registrou divida inexistente \" \\\n        \"da autora no valor o montate de R$ {}, nas empresas de score de cr\u00e9dito, a t\u00edtulo de {}. \" \\\n        \"Ocorre que as referidas supostas d\u00edvidas nao existem e n\u00e3o justificam o cadastro nos bancos de score de cr\u00e9dito.\".format(docs, self.value, self.suposta_divida)\n        t1 = \"A parte autora ainda ressalta n\u00e3o ser devedor contumaz, de forma que o registro indevido \" \\\n        \"do nome nas empresas de score de credito caracteriza dano moral.\"\n        self.fact.append(base)\n        self.fact.append(t1)\n        \n    def set_law(self):\n        base = \"De acordo com o Art 42, caput do CDC/CC, o consumidor n\u00e3o ser\u00e1 exposto a rid\u00edculo quando da cobran\u00e7a de d\u00edvidas. (*Art. 42. Na cobran\u00e7a de d\u00e9bitos, o consumidor inadimplente n\u00e3o ser\u00e1 exposto a rid\u00edculo, nem ser\u00e1 submetido a qualquer tipo de constrangimento ou amea\u00e7a.*)\"\n        t1 = \"Ocorre que, neste caso, isso aconteceu, tendo em vista que a inser\u00e7\u00e3o de seu nome indevidamente no cadastro de devedores \" \\\n        \"o exp\u00f5e ao rid\u00edculo e abala a sua imagem, al\u00e9m de impedir que adquira cr\u00e9dito no mercado. Por isso, deve haver remo\u00e7\u00e3o imediata de seu nome dos respectivos cadastros \"\\\n        \"e compensacao pelo dano moral e \u00e0 sua imagem. \"\n        t2 = \"Esse entendimento foi validado em jurisprudencia, que, inclusive, reconhece a exist\u00eancia de dano moral \"\\\n            \"para esse tipo de caso de inclus\u00e3o indevida no cadastro de devedores do Serasa:\\n\\n\"\\\n            \"\"\" * PRESTA\u00c7\u00c3O DE SERVI\u00c7OS DE TELEFONIA A\u00c7\u00c3O DE CANCELAMENTO DE COBRAN\u00c7A INDEVIDA E DE REGISTRO INDEVIDO JUNTO AO SERASA/SPCC/C REPARA\u00c7\u00c3O DE DANOS MORAIS COM PEDIDO DE TUTELA ANTECIPADA INEXIGIBILIDADE DOS D\u00c9BITOS SERVI\u00c7O CONTRATADO FUNCIONAMENTO N\u00c3O COMPROVADO PESSOA JUR\u00cdDICA NEGATIVA\u00c7\u00c3O INDEVIDA DO NOME DA AUTORA EM \u00d3RG\u00c3OS DE PROTE\u00c7\u00c3O AO CR\u00c9DITO DANO MORALCARACTERIZADO SENTEN\u00c7A QUE ARBITROU QUANTIA EM CONFORMIDADE COMOS CRIT\u00c9RIOS DE PROPORCIONALIDADE E RAZOABILIDADE INDENIZA\u00c7\u00c3O DEVIDA FIXADA EM R$ 10.000,00 VALOR MANTIDO SENTEN\u00c7A MANTIDA. *TJSP- Apela\u00e7\u00e3o c\u00edvel AC :  0058685-32.2012.8.26.0114 publicado em 24/01/2017*\"\"\"\n        self.law.append(base)\n        self.law.append(t1)\n        self.law.append(t2)\n```\n  ## Contributing\n  If you want to help us, pull request on models (or whatever built-in models archives there are when you want to do it) file new layer you make. With that, you help democratizing the access to justice in Brazil. Also, if you add new features, we are looking forward to see it.\n  \n  ## DISCLAIMER\n  Slingshot is free to use, you can do whatever you want with it, just remember to cite \"A Mosca\" as the organization behind it. Also, we are not responsable for what you do with the code we've made.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amosca-team/slingshot/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "slingshot-lawdocs", "package_url": "https://pypi.org/project/slingshot-lawdocs/", "platform": "", "project_url": "https://pypi.org/project/slingshot-lawdocs/", "project_urls": {"Homepage": "https://github.com/amosca-team/slingshot/"}, "release_url": "https://pypi.org/project/slingshot-lawdocs/0.5.5/", "requires_dist": null, "requires_python": "", "summary": "Slingshot is a Python library bringed on by A Mosca team for creating reproducible procedural documents for Brazilian law-suits.", "version": "0.5.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Slingshot</h1>\n<p>Slingshot is a Python library bringed on by <strong>A Mosca</strong> team for creating reproducible procedural documents for Brazilian law-suits. It was created during the development of <strong>A Mosca</strong> web application in order to democratize access to justice in Brazil, but as the code became more complex, we set the project apart and started to develop both independently.</p>\n<h2>Installation</h2>\n<pre><code>pip install slingshot-lawdocs\n</code></pre>\n<h2>Objective</h2>\n<p>Bringing to the community of law and technology students a open-source quality tool for creating procedural documents without having to lay on expensive and proprietary solutions bringed on by lawtechs for law suits.</p>\n<h2>Why should you use Slingshot</h2>\n<p>Slingshot creates procedural documents by chaining content blocks (Layers) in a way that is very alike to Keras high level Deep Learning framework, and let law-academic learn programming in a useful, rich and difunded language, Python.</p>\n<p>Also, not only it is very easy to learn (as Python itseld), but part the knowledge adquired on learning how to use it can be leveraged to use in other coding tasks, as Data Science activities, web-crawling and even web-development.</p>\n<h2>Knowledge requirements</h2>\n<ul>\n<li>Python syntax</li>\n<li>String manipulations</li>\n<li>Python OOP basics (we already did the hard part for you)</li>\n</ul>\n<h2>System requirements</h2>\n<ul>\n<li>Python &gt;= 3.7</li>\n<li>python-markdown</li>\n<li>pandoc</li>\n<li>pdfkit</li>\n</ul>\n<h2>Slingshot basics</h2>\n<p>Slingshot documents are built by chaineble-content blocks, <strong>ContentLayer</strong> class objects that are wrapped by <strong>ProceduralDocument</strong> class objects. Once all the content blocks are added and chained to the <strong>ProceduralDocument</strong>, it has built-in methods that generates and formats it in both <strong>pdf</strong>, <strong>docx</strong> and <strong>html</strong> format.</p>\n<p>There are two main tasks that can be performed with Slingshot:</p>\n<ul>\n<li>Creating new content block Layers</li>\n<li>Elaborating procedural Documents by chaining content block Layers.</li>\n</ul>\n<h3>ProceduralDocument</h3>\n<p>This class consists of a wrapper with some text lists referring to the \"facts\", \"law\" and \"requests\" part of the ProceduralDocument, aside from the \"parts\" and some \"preliminars\". When the ProceduralDocument is compilied, it gathers from the ContentLayer its info and puts it into the right place, so the text can be fully generated and formatted.</p>\n<h3>Example on creating a procedural document with layers</h3>\n<pre><span class=\"c1\"># Here we import the used layers, parts and the core document</span>\n<span class=\"kn\">from</span> <span class=\"nn\">slingshot.procedural_document.layers.models</span> <span class=\"kn\">import</span> <span class=\"n\">ContratoServicos</span><span class=\"p\">,</span> <span class=\"n\">InversaoOnusProva</span><span class=\"p\">,</span> <span class=\"n\">PropagandaEnganosa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">slingshot.procedural_document.layers.models</span> <span class=\"kn\">import</span> <span class=\"n\">CobrancaIndevida</span><span class=\"p\">,</span> <span class=\"n\">ImpossivelCancelar</span><span class=\"p\">,</span> <span class=\"n\">DanoMoral</span><span class=\"p\">,</span> <span class=\"n\">RegistroSerasa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">slingshot.procedural_document.layers.parts</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span><span class=\"p\">,</span> <span class=\"n\">Claro_SP_re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">slingshot.procedural_document.core</span> <span class=\"kn\">import</span> <span class=\"n\">ProceduralDocument</span>\n</pre>\n<pre><span class=\"c1\"># We first have to instance the document</span>\n<span class=\"n\">pet</span> <span class=\"o\">=</span> <span class=\"n\">ProceduralDocument</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># We then add the layers chaining them to the document - alike to Keras</span>\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Author</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Equipe A Mosca\"</span>\n               <span class=\"n\">profession</span><span class=\"o\">=</span><span class=\"s2\">\"nerds revoltados com computadores\"</span>\n               <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s2\">\"Rua da Nossa Casinha 1000, casa 8\"</span><span class=\"p\">,</span>\n               <span class=\"n\">cpf</span><span class=\"o\">=</span><span class=\"s2\">\"123.456.789-00\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ContratoServicos</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">=</span><span class=\"s2\">\"ades\u00e3o a plano de celular\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"contas pagas\"</span><span class=\"p\">]))</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Claro_SP_re</span><span class=\"p\">)</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">InversaoOnusProva</span><span class=\"p\">())</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">PropagandaEnganosa</span><span class=\"p\">(</span><span class=\"n\">prometido</span><span class=\"o\">=</span><span class=\"s2\">\"plano de internet sem corte de dados\"</span><span class=\"p\">,</span>\n                          <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"s2\">\"plano de celular com corte de dados ao fim da franquia\"</span><span class=\"p\">,</span>\n                          <span class=\"n\">valor</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n                          <span class=\"n\">docs</span><span class=\"o\">=</span><span class=\"s2\">\"fotos e panfletos da operadora\"</span><span class=\"p\">,</span>\n                          <span class=\"n\">dano_ocorrido</span><span class=\"o\">=</span><span class=\"s2\">\"usar o GPS na volta do trabalho, para n\u00e3o se atrasar para buscar o amigo\"</span><span class=\"p\">,</span>\n                          <span class=\"n\">deseja_prometido</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">CobrancaIndevida</span><span class=\"p\">(</span><span class=\"n\">tarifas_cobradas</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Dados a mais\"</span><span class=\"p\">],</span>\n                         <span class=\"n\">valor</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span>\n                         <span class=\"n\">docs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"contas\"</span><span class=\"p\">]))</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">RegistroSerasa</span><span class=\"p\">(</span><span class=\"n\">divida_registrada</span><span class=\"o\">=</span><span class=\"s2\">\"Conta do celular (11) - 99999-8888\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">valor</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span>\n                        <span class=\"n\">docs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Conta do m\u00eas de setembro\"</span><span class=\"p\">]))</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ImpossivelCancelar</span><span class=\"p\">(</span><span class=\"n\">dano_moral</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">,</span>\n                           <span class=\"n\">docs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Pedido de cancelamento e email\"</span><span class=\"p\">]))</span>\n\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">DanoMoral</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"c1\"># We then compile our document. Our engine distributes all the facts, law and requests on their specific fields to generate the document</span>\n<span class=\"c1\"># Here you just fill holes with the right info</span>\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># You can seek the summary if you want - very alike to Keras model</span>\n<span class=\"c1\"># See what it prints:</span>\n<span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n</pre>\n<pre><code>A\u00e7\u00e3o condenat\u00f3ria com base no CDC\n#############\nCAMADAS DA PETICAO:\nAutor\nParte Re\nContexto - Presta\u00e7\u00e3o de servi\u00e7os\nPreliminar - Inversao \u00f4nus da prova\nPropaganda enganosa\nCobranca indevida\nRegistro indevido no Serasa\nImpossivel cancelar plano\nDano moral puro\n#############\nValor da causa: R$ 12000\n</code></pre>\n<pre><span class=\"c1\"># with this line, it generates your pdf, docx and html document</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pet</span><span class=\"o\">.</span><span class=\"n\">save_document</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'my_procedural_document'</span><span class=\"p\">,</span>\n                      <span class=\"n\">to_pdf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                      <span class=\"n\">to_word</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Coding a simple ContentLayer for request</h3>\n<p>We will inherit from its parent class and decide the content and the holes to be filled with content. When handled by our wrapper, everything goes to its proper part and the ProceduralDocument text is generated.</p>\n<pre><span class=\"c1\">#see that it inherits from Request class. It has some aside features, as</span>\n<span class=\"c1\">#the layer name that appears on the summary,</span>\n<span class=\"c1\">#the value of hte request,</span>\n<span class=\"c1\">#the document that prove the allegations,</span>\n<span class=\"c1\">#the holes that are filled to give sense to the layer.</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RegistroSerasa</span><span class=\"p\">(</span><span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">divida_registrada</span><span class=\"p\">,</span> <span class=\"n\">valor</span><span class=\"p\">,</span> <span class=\"n\">docs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">RegistroSerasa</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"Registro indevido no Serasa\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">valor</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">suposta_divida</span> <span class=\"o\">=</span> <span class=\"n\">divida_registrada</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"n\">docs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_texts</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">set_texts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_facts</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_law</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_requests</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">set_facts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"[\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"]\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"s2\">\"Conforme a documenta\u00e7\u00e3o anexa (</span><span class=\"si\">{}</span><span class=\"s2\">), a parte re registrou divida inexistente \"</span> \\\n        <span class=\"s2\">\"da autora no valor o montate de R$ </span><span class=\"si\">{}</span><span class=\"s2\">, nas empresas de score de cr\u00e9dito, a t\u00edtulo de </span><span class=\"si\">{}</span><span class=\"s2\">. \"</span> \\\n        <span class=\"s2\">\"Ocorre que as referidas supostas d\u00edvidas nao existem e n\u00e3o justificam o cadastro nos bancos de score de cr\u00e9dito.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">suposta_divida</span><span class=\"p\">)</span>\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"s2\">\"A parte autora ainda ressalta n\u00e3o ser devedor contumaz, de forma que o registro indevido \"</span> \\\n        <span class=\"s2\">\"do nome nas empresas de score de credito caracteriza dano moral.\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fact</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fact</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">set_law</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"s2\">\"De acordo com o Art 42, caput do CDC/CC, o consumidor n\u00e3o ser\u00e1 exposto a rid\u00edculo quando da cobran\u00e7a de d\u00edvidas. (*Art. 42. Na cobran\u00e7a de d\u00e9bitos, o consumidor inadimplente n\u00e3o ser\u00e1 exposto a rid\u00edculo, nem ser\u00e1 submetido a qualquer tipo de constrangimento ou amea\u00e7a.*)\"</span>\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"s2\">\"Ocorre que, neste caso, isso aconteceu, tendo em vista que a inser\u00e7\u00e3o de seu nome indevidamente no cadastro de devedores \"</span> \\\n        <span class=\"s2\">\"o exp\u00f5e ao rid\u00edculo e abala a sua imagem, al\u00e9m de impedir que adquira cr\u00e9dito no mercado. Por isso, deve haver remo\u00e7\u00e3o imediata de seu nome dos respectivos cadastros \"</span>\\\n        <span class=\"s2\">\"e compensacao pelo dano moral e \u00e0 sua imagem. \"</span>\n        <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"s2\">\"Esse entendimento foi validado em jurisprudencia, que, inclusive, reconhece a exist\u00eancia de dano moral \"</span>\\\n            <span class=\"s2\">\"para esse tipo de caso de inclus\u00e3o indevida no cadastro de devedores do Serasa:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span>\\\n            <span class=\"sd\">\"\"\" * PRESTA\u00c7\u00c3O DE SERVI\u00c7OS DE TELEFONIA A\u00c7\u00c3O DE CANCELAMENTO DE COBRAN\u00c7A INDEVIDA E DE REGISTRO INDEVIDO JUNTO AO SERASA/SPCC/C REPARA\u00c7\u00c3O DE DANOS MORAIS COM PEDIDO DE TUTELA ANTECIPADA INEXIGIBILIDADE DOS D\u00c9BITOS SERVI\u00c7O CONTRATADO FUNCIONAMENTO N\u00c3O COMPROVADO PESSOA JUR\u00cdDICA NEGATIVA\u00c7\u00c3O INDEVIDA DO NOME DA AUTORA EM \u00d3RG\u00c3OS DE PROTE\u00c7\u00c3O AO CR\u00c9DITO DANO MORALCARACTERIZADO SENTEN\u00c7A QUE ARBITROU QUANTIA EM CONFORMIDADE COMOS CRIT\u00c9RIOS DE PROPORCIONALIDADE E RAZOABILIDADE INDENIZA\u00c7\u00c3O DEVIDA FIXADA EM R$ 10.000,00 VALOR MANTIDO SENTEN\u00c7A MANTIDA. *TJSP- Apela\u00e7\u00e3o c\u00edvel AC :  0058685-32.2012.8.26.0114 publicado em 24/01/2017*\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">law</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">law</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">law</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributing</h2>\n<p>If you want to help us, pull request on models (or whatever built-in models archives there are when you want to do it) file new layer you make. With that, you help democratizing the access to justice in Brazil. Also, if you add new features, we are looking forward to see it.</p>\n<h2>DISCLAIMER</h2>\n<p>Slingshot is free to use, you can do whatever you want with it, just remember to cite \"A Mosca\" as the organization behind it. Also, we are not responsable for what you do with the code we've made.</p>\n\n          </div>"}, "last_serial": 6426634, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "9cdd18d7b2efa380d841754642b37128", "sha256": "ce497fb2b7725fd83833bf7614ed213ba0eea0e47cd981d9045d447a2c05ca7f"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.tar.gz", "has_sig": false, "md5_digest": "9cdd18d7b2efa380d841754642b37128", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5660, "upload_time": "2020-01-10T00:22:20", "upload_time_iso_8601": "2020-01-10T00:22:20.431756Z", "url": "https://files.pythonhosted.org/packages/8d/34/dc5538c22faf31770387b19ca93cb157a1359bd4076ca8fb4e14132fca92/slingshot-lawdocs-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "d6cf18922babcacfc7695c2893f2760e", "sha256": "8260a06404609bb5088804867bc43a7af8af6f51d5929d6eef67d4502edf3684"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d6cf18922babcacfc7695c2893f2760e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5731, "upload_time": "2020-01-10T00:26:46", "upload_time_iso_8601": "2020-01-10T00:26:46.567773Z", "url": "https://files.pythonhosted.org/packages/f0/fe/02c3d84f0a17b9ee5395fc3aac08e62cde0f417d2bdb3e4252799b4c0336/slingshot-lawdocs-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "59b8a3a1e674c52da421f40af0e54b7f", "sha256": "3ea10285321aa07af45045336a1438866a207c1d8126de274ed56da7ac24bd6a"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.2.tar.gz", "has_sig": false, "md5_digest": "59b8a3a1e674c52da421f40af0e54b7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7221, "upload_time": "2020-01-10T00:29:10", "upload_time_iso_8601": "2020-01-10T00:29:10.823627Z", "url": "https://files.pythonhosted.org/packages/ed/9d/1a52c142476c0c81b85ef2c3d90a36eb3c43c67d184271f15ce89186af1c/slingshot-lawdocs-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "35f85de0b4504b1597d914277ef22897", "sha256": "74af7c15672fc43e4510ef42421709b2b7a40a798eb9a84ec2409bffc7ae7c0e"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.3.tar.gz", "has_sig": false, "md5_digest": "35f85de0b4504b1597d914277ef22897", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19597, "upload_time": "2020-01-10T00:56:18", "upload_time_iso_8601": "2020-01-10T00:56:18.086819Z", "url": "https://files.pythonhosted.org/packages/9e/44/d81c9bc76765b83a18b478996a176e909804081dc94bae7397d6740ea910/slingshot-lawdocs-0.5.3.tar.gz", "yanked": false}], "0.5.3a1": [{"comment_text": "", "digests": {"md5": "3276126d297475e7d7a38a471586e0ed", "sha256": "5a3428b0b6abe6e3bdd8d7e5b43d57658991dfd5ebab7de00f8a959aeafa8f1c"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.3a1.tar.gz", "has_sig": false, "md5_digest": "3276126d297475e7d7a38a471586e0ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20452, "upload_time": "2020-01-10T01:12:18", "upload_time_iso_8601": "2020-01-10T01:12:18.889702Z", "url": "https://files.pythonhosted.org/packages/fb/f2/5654ca271eb51f77f98d245dac819795d84eb6e1b6453b48b82147056e82/slingshot-lawdocs-0.5.3a1.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "0e90405a3df68a73a1b9850c5b9b0264", "sha256": "724111a003b34125e3bb881cb35606fd22295875bc8c097eed7ff5c75387b043"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.4.tar.gz", "has_sig": false, "md5_digest": "0e90405a3df68a73a1b9850c5b9b0264", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20462, "upload_time": "2020-01-10T01:17:38", "upload_time_iso_8601": "2020-01-10T01:17:38.737820Z", "url": "https://files.pythonhosted.org/packages/da/2f/bc79a941918e267fe13ee7f4839e20fb510964095a75a6c86db10f08acdd/slingshot-lawdocs-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "4cf92806857de2aff3ad814a24f784ec", "sha256": "2e6478eb2f51affdaea4a7aa6dde1c6ccdcf8297d641ee8b0655aacb41f2f815"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.5.tar.gz", "has_sig": false, "md5_digest": "4cf92806857de2aff3ad814a24f784ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20474, "upload_time": "2020-01-10T01:20:19", "upload_time_iso_8601": "2020-01-10T01:20:19.213188Z", "url": "https://files.pythonhosted.org/packages/81/2f/454ddf28b0885572776c26c86bf789f54a7acb319b5a409ddcd3000cc2e3/slingshot-lawdocs-0.5.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4cf92806857de2aff3ad814a24f784ec", "sha256": "2e6478eb2f51affdaea4a7aa6dde1c6ccdcf8297d641ee8b0655aacb41f2f815"}, "downloads": -1, "filename": "slingshot-lawdocs-0.5.5.tar.gz", "has_sig": false, "md5_digest": "4cf92806857de2aff3ad814a24f784ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20474, "upload_time": "2020-01-10T01:20:19", "upload_time_iso_8601": "2020-01-10T01:20:19.213188Z", "url": "https://files.pythonhosted.org/packages/81/2f/454ddf28b0885572776c26c86bf789f54a7acb319b5a409ddcd3000cc2e3/slingshot-lawdocs-0.5.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:21 2020"}