{"info": {"author": "Adam Bouhenguel", "author_email": "adam@bouhenguel.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======================================================\nTFI: Use any TensorFlow model in a single line of code\n======================================================\n\n.. teaser-begin\n\nTFI provides a simple Python interface to any TensorFlow model. It does this by automatically generating a Python class on the fly.\n\n.. -spiel-end-\n\nHere's an example of using TFI with a SavedModel based on `Inception v1 <https://github.com/tensorflow/models/blob/master/slim/nets/inception_v1.py>`_. This particular SavedModel has a single ``predict`` method and a `SignatureDef <https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/meta_graph.proto>`_ that looks something like: ``predict(images float <1,224,224,3>) -> (categories string <1001>, scores float <1,1001>)``\n\nTFI in Action\n=============\n\n.. code-block:: pycon\n\n   >>> import tfi\n   >>> InceptionV1 = tfi.saved_model.as_class(\"./inception-v1.saved_model\")\n\nPassing in data\n===============\n\nTFI can automatically adapt any data you provide to the shape expected by the graph. Let's take a random photo of a dog I found on the internet...\n\n.. image:: https://www.royalcanin.com/~/media/Royal-Canin/Product-Categories/dog-medium-landing-hero.ashx\n   :alt: dog\n\n.. code-block:: pycon\n\n   >>> model = InceptionV1()\n   >>> image = tfi.data.file(\"./dog-medium-landing-hero.jpg\")\n   >>> result = model.predict(images=[image])\n   >>> categories, scores = result.categories, result.scores[0]\n\nIf we print the top 5 probabilities, we see:\n\n.. code-block:: pycon\n\n   >>> [(scores[i], categories[i].decode('utf-8')) for i in scores.argsort()[:-5:-1]]\n   [(0.80796158, 'bloodhound, sleuthhound'),\n    (0.10305813, 'English foxhound'),\n    (0.064740285, 'redbone'),\n    (0.009166114, 'beagle')]\n\nNot bad!\n\nImage data\n==========\nThe ``tf.data.file`` function uses `mimetypes <https://docs.python.org/3.6/library/mimetypes.html>`_ to discover the right data decoder to use. If an input to a graph is an ``\"image/*\"``, TFI will automatically decode and resize the image to the proper size. In the example above, the JPEG image of a dog is automatically decoded and resized to 224x224.\n\nBatches\n=======\nIf you look closely at the example code above, you'll see that the images argument is actually an array. The class generated by TFI is smart enough to convert an array of images to an appropriately sized batch of Tensors.\n\nGraphs with variables\n=====================\nEach instance of the class has separate variables from other instances. If a graph's variables are mutated during a session in a useful way, you can continue to use those mutations by calling methods again on that same instance.\n\nIf you'd like to have multiple instances that do not interfere with one another, you can create a second instance and call methods on each of them separately.\n\nTFI and SavedModels\n===================\n\nTFI uses the information in a SavedModel's SignatureDefs to generate methods on the resulting class. The keyword argument names for each method are also pulled from info in the SignatureDef.\n\nThe SavedModel used in the example was created using the `tf.estimator.Estimator#export_savedmodel <https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator#export_savedmodel>`_ function.\n\nGetting Started\n===============\n`TFI is on PyPI <https://pypi.python.org/pypi/tfi>`_, install it with ``pip install tfi``.\n\nFuture work\n===========\n\nAdapting ``tfi.data`` functions to handle queues and datasets wouldn't require much effort. If this is something you'd like me to do, please `file an issue <https://github.com/ajbouh/tfi/issues/new>`_ with your specific use case!\n\nExtending `tfi.data` to support more formats is also quite straightforward. `File an issue <https://github.com/ajbouh/tfi/issues/new>`_ with a specific format you'd like to see. For bonus points, include the expected tensor dtype and shape. For double bonus points, include a way for me to test it in a real model.\n\nIt's not very easy to create well-formed SavedModels today. If this is something you'd like TFI to do in the future... `file an issue <https://github.com/ajbouh/tfi/issues/new>`_. ;)\n\nAcknowledgements\n================\nIf you're curious, the photo used above was from `a random Google image search <https://goo.gl/images/UNNf2W>`_.\n\nPyPI packaging was way easier because of `this fantastic guide <https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/>`_.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ajbouh/tfi", "keywords": "tensorflow,savedmodel,boilerplate", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tfi", "package_url": "https://pypi.org/project/tfi/", "platform": "", "project_url": "https://pypi.org/project/tfi/", "project_urls": {"Homepage": "https://github.com/ajbouh/tfi"}, "release_url": "https://pypi.org/project/tfi/0.4/", "requires_dist": ["tensorflow (>=1.3)"], "requires_python": "", "summary": "Use any TensorFlow model in a single line of code", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>TFI provides a simple Python interface to any TensorFlow model. It does this by automatically generating a Python class on the fly.</p>\n<p>Here\u2019s an example of using TFI with a SavedModel based on <a href=\"https://github.com/tensorflow/models/blob/master/slim/nets/inception_v1.py\" rel=\"nofollow\">Inception v1</a>. This particular SavedModel has a single <tt>predict</tt> method and a <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/meta_graph.proto\" rel=\"nofollow\">SignatureDef</a> that looks something like: <tt>predict(images float &lt;1,224,224,3&gt;) <span class=\"pre\">-&gt;</span> (categories string &lt;1001&gt;, scores float &lt;1,1001&gt;)</tt></p>\n<div id=\"tfi-in-action\">\n<h2>TFI in Action</h2>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">tfi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">InceptionV1</span> <span class=\"o\">=</span> <span class=\"n\">tfi</span><span class=\"o\">.</span><span class=\"n\">saved_model</span><span class=\"o\">.</span><span class=\"n\">as_class</span><span class=\"p\">(</span><span class=\"s2\">\"./inception-v1.saved_model\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"passing-in-data\">\n<h2>Passing in data</h2>\n<p>TFI can automatically adapt any data you provide to the shape expected by the graph. Let\u2019s take a random photo of a dog I found on the internet\u2026</p>\n<img alt=\"dog\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb1fbb247707cb6b7898063c35d5eb38ee2c88e9/68747470733a2f2f7777772e726f79616c63616e696e2e636f6d2f7e2f6d656469612f526f79616c2d43616e696e2f50726f647563742d43617465676f726965732f646f672d6d656469756d2d6c616e64696e672d6865726f2e61736878\">\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">InceptionV1</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">tfi</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s2\">\"./dog-medium-landing-hero.jpg\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">categories</span><span class=\"p\">,</span> <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<p>If we print the top 5 probabilities, we see:</p>\n<pre><span class=\"p\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[:</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"go\">[(0.80796158, 'bloodhound, sleuthhound'),\n (0.10305813, 'English foxhound'),\n (0.064740285, 'redbone'),\n (0.009166114, 'beagle')]</span>\n</pre>\n<p>Not bad!</p>\n</div>\n<div id=\"image-data\">\n<h2>Image data</h2>\n<p>The <tt>tf.data.file</tt> function uses <a href=\"https://docs.python.org/3.6/library/mimetypes.html\" rel=\"nofollow\">mimetypes</a> to discover the right data decoder to use. If an input to a graph is an <tt><span class=\"pre\">\"image/*\"</span></tt>, TFI will automatically decode and resize the image to the proper size. In the example above, the JPEG image of a dog is automatically decoded and resized to 224x224.</p>\n</div>\n<div id=\"batches\">\n<h2>Batches</h2>\n<p>If you look closely at the example code above, you\u2019ll see that the images argument is actually an array. The class generated by TFI is smart enough to convert an array of images to an appropriately sized batch of Tensors.</p>\n</div>\n<div id=\"graphs-with-variables\">\n<h2>Graphs with variables</h2>\n<p>Each instance of the class has separate variables from other instances. If a graph\u2019s variables are mutated during a session in a useful way, you can continue to use those mutations by calling methods again on that same instance.</p>\n<p>If you\u2019d like to have multiple instances that do not interfere with one another, you can create a second instance and call methods on each of them separately.</p>\n</div>\n<div id=\"tfi-and-savedmodels\">\n<h2>TFI and SavedModels</h2>\n<p>TFI uses the information in a SavedModel\u2019s SignatureDefs to generate methods on the resulting class. The keyword argument names for each method are also pulled from info in the SignatureDef.</p>\n<p>The SavedModel used in the example was created using the <a href=\"https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator#export_savedmodel\" rel=\"nofollow\">tf.estimator.Estimator#export_savedmodel</a> function.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p><a href=\"https://pypi.python.org/pypi/tfi\" rel=\"nofollow\">TFI is on PyPI</a>, install it with <tt>pip install tfi</tt>.</p>\n</div>\n<div id=\"future-work\">\n<h2>Future work</h2>\n<p>Adapting <tt>tfi.data</tt> functions to handle queues and datasets wouldn\u2019t require much effort. If this is something you\u2019d like me to do, please <a href=\"https://github.com/ajbouh/tfi/issues/new\" rel=\"nofollow\">file an issue</a> with your specific use case!</p>\n<p>Extending <cite>tfi.data</cite> to support more formats is also quite straightforward. <a href=\"https://github.com/ajbouh/tfi/issues/new\" rel=\"nofollow\">File an issue</a> with a specific format you\u2019d like to see. For bonus points, include the expected tensor dtype and shape. For double bonus points, include a way for me to test it in a real model.</p>\n<p>It\u2019s not very easy to create well-formed SavedModels today. If this is something you\u2019d like TFI to do in the future\u2026 <a href=\"https://github.com/ajbouh/tfi/issues/new\" rel=\"nofollow\">file an issue</a>. ;)</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>If you\u2019re curious, the photo used above was from <a href=\"https://goo.gl/images/UNNf2W\" rel=\"nofollow\">a random Google image search</a>.</p>\n<p>PyPI packaging was way easier because of <a href=\"https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\" rel=\"nofollow\">this fantastic guide</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3174902, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "67558006c23da8047968a3e6ec68d44a", "sha256": "177e789f45224e16c29fecab2a7c57fe1439262bd65aad50d216263074972864"}, "downloads": -1, "filename": "tfi-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67558006c23da8047968a3e6ec68d44a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9943, "upload_time": "2017-09-14T22:53:45", "upload_time_iso_8601": "2017-09-14T22:53:45.658847Z", "url": "https://files.pythonhosted.org/packages/6f/03/8c273630fee9690c10fb330c7646db31854b44714cdaed298741805f55e6/tfi-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47e081d737864595863f2ee6eff67492", "sha256": "3ae3fa81fb64b6dbe4bd044b2d590986a159a1c0a387171ea3a9ffed7809eb08"}, "downloads": -1, "filename": "tfi-0.4.tar.gz", "has_sig": false, "md5_digest": "47e081d737864595863f2ee6eff67492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7463, "upload_time": "2017-09-14T22:53:46", "upload_time_iso_8601": "2017-09-14T22:53:46.744569Z", "url": "https://files.pythonhosted.org/packages/64/ef/eb268e7f73845e2dbb238b53de2ee54b105150d1da9439520647658771a5/tfi-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67558006c23da8047968a3e6ec68d44a", "sha256": "177e789f45224e16c29fecab2a7c57fe1439262bd65aad50d216263074972864"}, "downloads": -1, "filename": "tfi-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67558006c23da8047968a3e6ec68d44a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9943, "upload_time": "2017-09-14T22:53:45", "upload_time_iso_8601": "2017-09-14T22:53:45.658847Z", "url": "https://files.pythonhosted.org/packages/6f/03/8c273630fee9690c10fb330c7646db31854b44714cdaed298741805f55e6/tfi-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47e081d737864595863f2ee6eff67492", "sha256": "3ae3fa81fb64b6dbe4bd044b2d590986a159a1c0a387171ea3a9ffed7809eb08"}, "downloads": -1, "filename": "tfi-0.4.tar.gz", "has_sig": false, "md5_digest": "47e081d737864595863f2ee6eff67492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7463, "upload_time": "2017-09-14T22:53:46", "upload_time_iso_8601": "2017-09-14T22:53:46.744569Z", "url": "https://files.pythonhosted.org/packages/64/ef/eb268e7f73845e2dbb238b53de2ee54b105150d1da9439520647658771a5/tfi-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:34 2020"}