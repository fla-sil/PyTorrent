{"info": {"author": "Jerry Pussinen", "author_email": "jerry.pussinen@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# test-skeleton\n\n[![Build Status](https://travis-ci.org/jerry-git/test-skeleton.svg?branch=master)](https://travis-ci.org/jerry-git/test-skeleton)\n[![Pypi](https://img.shields.io/pypi/v/test-skeleton.svg)](https://pypi.python.org/pypi/test-skeleton)\n[![Py vers](https://img.shields.io/pypi/pyversions/test-skeleton.svg)](https://pypi.python.org/pypi/test-skeleton)\n\nA tool for creating a skeleton for Python unit tests based on source code.\n\nBasically, this is a tool for non-TDD development. Use TDD if possible.\n\nA potential use case for this tool could e.g. a legacy project which lacks tests.\n\n\n## Usage\n```bash\npython -m test_skeleton path/to/your/source_file.py\n```\n\nThe result will be printed to std out. If you want to store it into a file, use `--save` flag. The result will be stored into test_<original_filename> in your current working directory. \n\n\n## Example\n\nInput:\n```python\nclass Klass(object):\n    klass_var = ''\n\n    def __init__(self):\n        self.a = ''\n\n    @property\n    def property1(self):\n        pass\n\n    @classmethod\n    def klassmethod1(cls):\n        pass\n\n    def method_with_under_scores(self):\n        pass\n\n\ndef helper_function1():\n    pass\n\n```\nOutput:\n```python\nclass TestKlass:\n    class TestProperty1:\n        def test_TODO(self):\n            pass\n\n    class TestKlassmethod1:\n        def test_TODO(self):\n            pass\n\n    class TestMethodWithUnderScores:\n        def test_TODO(self):\n            pass\n\n\nclass TestHelperFunction1:\n    def test_TODO(self):\n        pass\n\n```", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jerry-git/test-skeleton", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "test-skeleton", "package_url": "https://pypi.org/project/test-skeleton/", "platform": "", "project_url": "https://pypi.org/project/test-skeleton/", "project_urls": {"Homepage": "https://github.com/jerry-git/test-skeleton"}, "release_url": "https://pypi.org/project/test-skeleton/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "a tool for creating a skeleton for Python unit tests based on source code", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # test-skeleton<br><br>[![Build Status](https://travis-ci.org/jerry-git/test-skeleton.svg?branch=master)](https://travis-ci.org/jerry-git/test-skeleton)<br>[![Pypi](https://img.shields.io/pypi/v/test-skeleton.svg)](https://pypi.python.org/pypi/test-skeleton)<br>[![Py vers](https://img.shields.io/pypi/pyversions/test-skeleton.svg)](https://pypi.python.org/pypi/test-skeleton)<br><br>A tool for creating a skeleton for Python unit tests based on source code.<br><br>Basically, this is a tool for non-TDD development. Use TDD if possible.<br><br>A potential use case for this tool could e.g. a legacy project which lacks tests.<br><br><br>## Usage<br>```bash<br>python -m test_skeleton path/to/your/source_file.py<br>```<br><br>The result will be printed to std out. If you want to store it into a file, use `--save` flag. The result will be stored into test_&lt;original_filename&gt; in your current working directory. <br><br><br>## Example<br><br>Input:<br>```python<br>class Klass(object):<br>    klass_var = ''<br><br>    def __init__(self):<br>        self.a = ''<br><br>    @property<br>    def property1(self):<br>        pass<br><br>    @classmethod<br>    def klassmethod1(cls):<br>        pass<br><br>    def method_with_under_scores(self):<br>        pass<br><br><br>def helper_function1():<br>    pass<br><br>```<br>Output:<br>```python<br>class TestKlass:<br>    class TestProperty1:<br>        def test_TODO(self):<br>            pass<br><br>    class TestKlassmethod1:<br>        def test_TODO(self):<br>            pass<br><br>    class TestMethodWithUnderScores:<br>        def test_TODO(self):<br>            pass<br><br><br>class TestHelperFunction1:<br>    def test_TODO(self):<br>        pass<br><br>```\n          </div>"}, "last_serial": 3442278, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "c3b2de8d9d56a891a2248330c6390a0a", "sha256": "f255cbe10f843d60b5de52b1e6edb5f25a0bdc4588ab3c6b84ff73bfccc5736a"}, "downloads": -1, "filename": "test-skeleton-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c3b2de8d9d56a891a2248330c6390a0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5763, "upload_time": "2017-12-25T17:13:41", "upload_time_iso_8601": "2017-12-25T17:13:41.712617Z", "url": "https://files.pythonhosted.org/packages/ac/32/7ad8f706bf451116b63f340aab73e912f66d3f7bb46cc6527b3b48567245/test-skeleton-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3b2de8d9d56a891a2248330c6390a0a", "sha256": "f255cbe10f843d60b5de52b1e6edb5f25a0bdc4588ab3c6b84ff73bfccc5736a"}, "downloads": -1, "filename": "test-skeleton-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c3b2de8d9d56a891a2248330c6390a0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5763, "upload_time": "2017-12-25T17:13:41", "upload_time_iso_8601": "2017-12-25T17:13:41.712617Z", "url": "https://files.pythonhosted.org/packages/ac/32/7ad8f706bf451116b63f340aab73e912f66d3f7bb46cc6527b3b48567245/test-skeleton-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:18 2020"}