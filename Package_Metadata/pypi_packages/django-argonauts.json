{"info": {"author": "Fusionbox, Inc.", "author_email": "programmers@fusionbox.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "================\nDjango-Argonauts\n================\n\n.. image:: https://api.travis-ci.org/fusionbox/django-argonauts.png\n   :alt: Building Status\n   :target: https://travis-ci.org/fusionbox/django-argonauts\n\n\nA lightweight collection of JSON helpers for Django. Includes a template filter\nfor safely outputting JSON, views that encode and decode JSON, and a helper for\nwriting simple REST views.\n\nA special JSON encoder is used to serialize QuerySets and objects with\n``to_json`` methods.\n\n------\nFilter\n------\n\nYou can serialize an object in JSON using the ``|json`` filter. This is useful\nto generate safe JavaScript:\n\n.. code:: html\n\n  {% load argonauts %}\n  <script type=\"application/javascript\">\n    (function () {\n        var object_list = {{ object_list|json }};\n        // do something with object_list\n    })();\n  </script>\n\n``|json`` is safe to use anywhere in XML or XHTML except in an attribute. It's\nimportant to use this tag rather than dumping the output of ``json.dumps`` into\nHTML, because an attacker could output a closing tag and effect an XSS attack.\nFor example, if we output ``json.dumps(\"</script><script>console.log('xss');\n//\")`` in template like this:\n\n.. code:: html\n\n  <script>\n    var somedata = {{ somedata_as_json|safe }};\n  </script>\n\nWe get:\n\n.. code:: html\n\n  <script>\n    var somedata = \"</script>\n  <script>\n    console.log('xss'); //\";\n  </script>\n\nThis allows the attacker to inject their own JavaScript. The ``|json`` tag\nprevents this by encoding the closing ``</script>`` tag with JSON's unicode\nescapes. If we output ``{{ somedata|json }}``, we get:\n\n.. code:: html\n\n  <script>\n    var somedata = \"\\u0060xscript\\u0062x\\u0060xscript\\u0062xconsole.log('xss');//\";\n  </script>\n\nIt also escapes ampersands in order to generate valid XML. For example, with the value\n``foo & bar``:\n\n.. code:: xml\n\n  <document><json>{{ value|json }}</json></document>\n  <!-- Results in valid XML:\n  <document><json>\"foo \\u0038x bar\"</json></document>\n  -->\n\n-----\nViews\n-----\n\n``JsonResponseMixin``\n=====================\n\n``JsonResponseMixin`` implements ``render_to_response`` method that serializes\nan object into a JSON response. Thus it is compatible with generic Django\nviews:\n\n.. code:: python\n\n    from django.db import models\n    from django.views.generic.detail import BaseDetailView\n    from argonauts.views import JsonResponseMixin\n\n    class Blog(models.Model):\n        title = models.CharField(max_length=255)\n        body = models.TextField()\n\n        def to_json(self):\n            return {\n                'title': self.title,\n                'body': self.body,\n            }\n\n    class BlogDetailView(JsonResponseMixin, BaseDetailView):\n        \"\"\"\n        Detail view returning object serialized in JSON\n        \"\"\"\n        model = Blog\n\n\n``JsonRequestMixin``\n====================\n\n``JsonRequestMixin`` gives access to the request data through ``data()`` method.\n\n.. code:: python\n\n    from django.views.generic.base import View\n    from argonauts.views import JsonRequestMixin:\n    from argonauts.http import JsonResponse\n\n    class EchoView(JsonRequestMixin, View):\n        def dispatch(self, *args, **kwargs):\n            return JsonResponse(self.data())\n\n\n``RestView``\n============\n\n``RestView`` is an abstract class. Subclasses should implement `auth()`, for\nhandling authentication, and at least one HTTP method.\n\n``RestView`` implements `OPTIONS` http method, and inherits from\n``JsonRequestMixin`` and ``JsonResponseMixin``.\n\n.. code:: python\n\n    from django.core.exceptions import PermissionDenied\n    from argonauts.views import RestView\n    from .utils import get_action\n\n    class CrazyRestView(RestView):\n        def auth(self, *args, **kwargs):\n            if not self.request.user.is_superuser:\n                raise PermissionDenied\n\n        def post(self, *args, **kwargs):\n            action = kwargs.pop('action')\n            action_func = get_action(action)\n            return self.render_to_response(action_func(self.data()))\n\n\nChangelog\n=========\n\n1.2.0 (2016-09-20)\n------------------\n\n- Add support for requests without a Content-Type header to JsonTestClient\n- Remove support for old versions of Django (<= 1.7)\n\n\n1.1.4 (2015-07-29)\n------------------\n\n- Tests mocked http requests don't always have charset\n\n\n1.1.3 (2015-05-27)\n------------------\n\n- Fixed package (include the CHANGELOG in ``MANIFEST.in``)\n\n\n1.1.2 (2015-05-27)\n------------------\n\n- Added ``JsonTestCase`` and ``JsonTestMixin``\n\n\n1.1.1 (2015-04-20)\n------------------\n\n- Fixed package\n\n\n1.1.0 (2015-04-20)\n------------------\n\nCleanup:\n\n- Dropped support for Django 1.3\n- Added support for Python 3\n- Updated documentation\n- Switched testing to py.test\n- Switched to zest.releaser\n\n\n1.0.1 (2013-10-06)\n------------------\n\n- Fixed tests\n\n\n1.0.0 (2013-07-05)\n------------------\n\nInitial release:\n\n- Extracted from django-fusionbox\n- Safe JSON Serializer\n- Safe JSON template filter\n- JSON Views", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fusionbox/django-argonauts", "keywords": "rest json views django helpers", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-argonauts", "package_url": "https://pypi.org/project/django-argonauts/", "platform": "", "project_url": "https://pypi.org/project/django-argonauts/", "project_urls": {"Homepage": "https://github.com/fusionbox/django-argonauts"}, "release_url": "https://pypi.org/project/django-argonauts/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "A lightweight collection of JSON helpers for Django.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/fusionbox/django-argonauts\" rel=\"nofollow\"><img alt=\"Building Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08215e406f784b8362fa976777f80ffae980f4c2/68747470733a2f2f6170692e7472617669732d63692e6f72672f667573696f6e626f782f646a616e676f2d6172676f6e617574732e706e67\"></a>\n<p>A lightweight collection of JSON helpers for Django. Includes a template filter\nfor safely outputting JSON, views that encode and decode JSON, and a helper for\nwriting simple REST views.</p>\n<p>A special JSON encoder is used to serialize QuerySets and objects with\n<tt>to_json</tt> methods.</p>\n<div id=\"filter\">\n<h2>Filter</h2>\n<p>You can serialize an object in JSON using the <tt>|json</tt> filter. This is useful\nto generate safe JavaScript:</p>\n<pre>{% load argonauts %}\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/javascript\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">object_list</span> <span class=\"o\">=</span> <span class=\"p\">{{</span> <span class=\"nx\">object_list</span><span class=\"o\">|</span><span class=\"nx\">json</span> <span class=\"p\">}};</span>\n      <span class=\"c1\">// do something with object_list\n</span>  <span class=\"p\">})();</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p><tt>|json</tt> is safe to use anywhere in XML or XHTML except in an attribute. It\u2019s\nimportant to use this tag rather than dumping the output of <tt>json.dumps</tt> into\nHTML, because an attacker could output a closing tag and effect an XSS attack.\nFor example, if we output <tt><span class=\"pre\">json.dumps(\"&lt;/script&gt;&lt;script&gt;console.log('xss');</span>\n<span class=\"pre\">//\")</span></tt> in template like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"p\">{{</span> <span class=\"nx\">somedata_as_json</span><span class=\"o\">|</span><span class=\"nx\">safe</span> <span class=\"p\">}};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>We get:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"err\">\"</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'xss'</span><span class=\"p\">);</span> <span class=\"c1\">//\";\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>This allows the attacker to inject their own JavaScript. The <tt>|json</tt> tag\nprevents this by encoding the closing <tt>&lt;/script&gt;</tt> tag with JSON\u2019s unicode\nescapes. If we output <tt>{{ somedata|json }}</tt>, we get:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"s2\">\"\\u0060xscript\\u0062x\\u0060xscript\\u0062xconsole.log('xss');//\"</span><span class=\"p\">;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>It also escapes ampersands in order to generate valid XML. For example, with the value\n<tt>foo &amp; bar</tt>:</p>\n<pre><span class=\"nt\">&lt;document&gt;&lt;json&gt;</span>{{ value|json }}<span class=\"nt\">&lt;/json&gt;&lt;/document&gt;</span>\n<span class=\"c\">&lt;!-- Results in valid XML:\n&lt;document&gt;&lt;json&gt;\"foo \\u0038x bar\"&lt;/json&gt;&lt;/document&gt;\n--&gt;</span>\n</pre>\n</div>\n<div id=\"views\">\n<h2>Views</h2>\n<div id=\"jsonresponsemixin\">\n<h3><tt>JsonResponseMixin</tt></h3>\n<p><tt>JsonResponseMixin</tt> implements <tt>render_to_response</tt> method that serializes\nan object into a JSON response. Thus it is compatible with generic Django\nviews:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argonauts.views</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponseMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogDetailView</span><span class=\"p\">(</span><span class=\"n\">JsonResponseMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseDetailView</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Detail view returning object serialized in JSON\n    \"\"\"</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span>\n</pre>\n</div>\n<div id=\"jsonrequestmixin\">\n<h3><tt>JsonRequestMixin</tt></h3>\n<p><tt>JsonRequestMixin</tt> gives access to the request data through <tt>data()</tt> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argonauts.views</span> <span class=\"kn\">import</span> <span class=\"n\">JsonRequestMixin</span><span class=\"p\">:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argonauts.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoView</span><span class=\"p\">(</span><span class=\"n\">JsonRequestMixin</span><span class=\"p\">,</span> <span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"restview\">\n<h3><tt>RestView</tt></h3>\n<p><tt>RestView</tt> is an abstract class. Subclasses should implement <cite>auth()</cite>, for\nhandling authentication, and at least one HTTP method.</p>\n<p><tt>RestView</tt> implements <cite>OPTIONS</cite> http method, and inherits from\n<tt>JsonRequestMixin</tt> and <tt>JsonResponseMixin</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionDenied</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argonauts.views</span> <span class=\"kn\">import</span> <span class=\"n\">RestView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_action</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CrazyRestView</span><span class=\"p\">(</span><span class=\"n\">RestView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">auth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">PermissionDenied</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">)</span>\n        <span class=\"n\">action_func</span> <span class=\"o\">=</span> <span class=\"n\">get_action</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"n\">action_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<div id=\"id1\">\n<h4>1.2.0 (2016-09-20)</h4>\n<ul>\n<li>Add support for requests without a Content-Type header to JsonTestClient</li>\n<li>Remove support for old versions of Django (&lt;= 1.7)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>1.1.4 (2015-07-29)</h4>\n<ul>\n<li>Tests mocked http requests don\u2019t always have charset</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>1.1.3 (2015-05-27)</h4>\n<ul>\n<li>Fixed package (include the CHANGELOG in <tt>MANIFEST.in</tt>)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>1.1.2 (2015-05-27)</h4>\n<ul>\n<li>Added <tt>JsonTestCase</tt> and <tt>JsonTestMixin</tt></li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4>1.1.1 (2015-04-20)</h4>\n<ul>\n<li>Fixed package</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h4>1.1.0 (2015-04-20)</h4>\n<p>Cleanup:</p>\n<ul>\n<li>Dropped support for Django 1.3</li>\n<li>Added support for Python 3</li>\n<li>Updated documentation</li>\n<li>Switched testing to py.test</li>\n<li>Switched to zest.releaser</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h4>1.0.1 (2013-10-06)</h4>\n<ul>\n<li>Fixed tests</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h4>1.0.0 (2013-07-05)</h4>\n<p>Initial release:</p>\n<ul>\n<li>Extracted from django-fusionbox</li>\n<li>Safe JSON Serializer</li>\n<li>Safe JSON template filter</li>\n<li>JSON Views</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2353729, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "14397e132f7e97eae4fe6cc8de2a29ee", "sha256": "fc8efe3e2d09374938c575bc3990288eed1b7ec40d8bf8762ab77a82bdb75bea"}, "downloads": -1, "filename": "django-argonauts-1.0.0.tar.gz", "has_sig": false, "md5_digest": "14397e132f7e97eae4fe6cc8de2a29ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7108, "upload_time": "2013-08-06T00:44:59", "upload_time_iso_8601": "2013-08-06T00:44:59.641589Z", "url": "https://files.pythonhosted.org/packages/92/2a/09936c8e0b287ca8ad2485a152af67ccdfd4a0a2481f1e9e2577cc18d1f3/django-argonauts-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e418cce841cd28f929c6c9055f0bb7ea", "sha256": "f41f57a6140f8b935ad311394a50ed3a62201ce23a9bf50ff384b4d891cd5a1a"}, "downloads": -1, "filename": "django-argonauts-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e418cce841cd28f929c6c9055f0bb7ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7198, "upload_time": "2013-10-16T20:19:52", "upload_time_iso_8601": "2013-10-16T20:19:52.167770Z", "url": "https://files.pythonhosted.org/packages/07/0e/462a67552860c31bd8faa3c8ddac52d79a7b61b5850a78d16c38d99e5a06/django-argonauts-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6070e77d1987a54c9f9be831ef9417d4", "sha256": "4a4a04f6afde2924fa3f4efc2a9e8257125e17117d4cbce49b2a118e2aa57df2"}, "downloads": -1, "filename": "django-argonauts-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6070e77d1987a54c9f9be831ef9417d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6560, "upload_time": "2015-04-20T23:25:37", "upload_time_iso_8601": "2015-04-20T23:25:37.406979Z", "url": "https://files.pythonhosted.org/packages/61/9f/20b709f88740080c5559ed3419124e35e5a53f69ff105aa95b2126504983/django-argonauts-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "1fe102800d4dce0995a04ded5c3b1265", "sha256": "b34b13c080cebd7f7a197745cb9b1cc7b9a8bc0a938322e8983b7de7e63c06fd"}, "downloads": -1, "filename": "django-argonauts-1.1.1.tar.gz", "has_sig": false, "md5_digest": "1fe102800d4dce0995a04ded5c3b1265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6562, "upload_time": "2015-04-20T23:29:25", "upload_time_iso_8601": "2015-04-20T23:29:25.099705Z", "url": "https://files.pythonhosted.org/packages/6d/7b/4371f1201d0b3d137aaa3cf630f0982118375f3e71fd2e8892f621ee43b2/django-argonauts-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "7e3e5371c8a625d9cedac6eaa70f9e05", "sha256": "f3e3fdee2101c1a510b85304b7e0c83d010242ab3982d3ef1f7844e591b0d55e"}, "downloads": -1, "filename": "django-argonauts-1.1.2.tar.gz", "has_sig": false, "md5_digest": "7e3e5371c8a625d9cedac6eaa70f9e05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7188, "upload_time": "2015-05-27T18:02:43", "upload_time_iso_8601": "2015-05-27T18:02:43.010363Z", "url": "https://files.pythonhosted.org/packages/7d/a2/022f7fde7f65bdd2a1e9455de094a472dc24c8f33e263aa80cb07b65cef3/django-argonauts-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "29480ad33c6e7aaa6ed914bb2de4f546", "sha256": "2f520c6d0ca93e25a1a98815d3d534cb2127a5d576b74373e8ed45d7bdd2afa2"}, "downloads": -1, "filename": "django-argonauts-1.1.3.tar.gz", "has_sig": false, "md5_digest": "29480ad33c6e7aaa6ed914bb2de4f546", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7359, "upload_time": "2015-05-27T20:08:33", "upload_time_iso_8601": "2015-05-27T20:08:33.854942Z", "url": "https://files.pythonhosted.org/packages/5b/38/a99f75df6408e33be1d81327ac14ee0c9137cd018cfa3e28f6454cb600bf/django-argonauts-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "51bb10b86437472c7cd8121c810c7c9f", "sha256": "6c07e9f837523875ad5d7cc5375bb8526d8e1d72a0999eb8ce3fb617ea718fcd"}, "downloads": -1, "filename": "django-argonauts-1.1.4.tar.gz", "has_sig": false, "md5_digest": "51bb10b86437472c7cd8121c810c7c9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7412, "upload_time": "2015-07-29T17:57:50", "upload_time_iso_8601": "2015-07-29T17:57:50.748518Z", "url": "https://files.pythonhosted.org/packages/36/ae/0decc6425ab0af0836c51b1b13ff0efc4daf99d2fdecab482d6c52004139/django-argonauts-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "22e8d2efc63eea80c714bfb38a2956a0", "sha256": "7a41748545c839ed8145036c0b9f2d0cd03fa856ee77aa0f6ba4d96e4086811a"}, "downloads": -1, "filename": "django-argonauts-1.2.0.tar.gz", "has_sig": false, "md5_digest": "22e8d2efc63eea80c714bfb38a2956a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7435, "upload_time": "2016-09-20T21:01:06", "upload_time_iso_8601": "2016-09-20T21:01:06.967683Z", "url": "https://files.pythonhosted.org/packages/00/fa/440898ae46aceb7094d3b5b2bdd5f63a2190b80e21becf46609aa4ef6571/django-argonauts-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22e8d2efc63eea80c714bfb38a2956a0", "sha256": "7a41748545c839ed8145036c0b9f2d0cd03fa856ee77aa0f6ba4d96e4086811a"}, "downloads": -1, "filename": "django-argonauts-1.2.0.tar.gz", "has_sig": false, "md5_digest": "22e8d2efc63eea80c714bfb38a2956a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7435, "upload_time": "2016-09-20T21:01:06", "upload_time_iso_8601": "2016-09-20T21:01:06.967683Z", "url": "https://files.pythonhosted.org/packages/00/fa/440898ae46aceb7094d3b5b2bdd5f63a2190b80e21becf46609aa4ef6571/django-argonauts-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:37 2020"}