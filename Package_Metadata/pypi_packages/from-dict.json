{"info": {"author": "Wanja Chresta", "author_email": "wanja.hs@chrummibei.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# from-dict\nCreate data structures from dictionaries.\n\n## Features\n* Transform dicts to `attr.s`, `dataclass` and `NamedTuple`\n* Supports nested structures when using `typing.List` and `typing.Dict` type hints.\n* Insert additional fields existing in dict into structure with `fd_copy_unknown=True`\n* Optional run-time type-checking with `fd_check_types=True`\n\n\n## Example\n```python\nfrom dataclasses import dataclass  # or import attr.dataclass for Python < 3.7\nfrom typing import List, Optional\nfrom from_dict import from_dict\n\n\n@dataclass(frozen=True)\nclass Preference:\n    name: str\n    score: int\n\n\n@dataclass(frozen=True)\nclass Customer:\n    name: str\n    nick_name: Optional[str]\n    preferences: List[Preference]\n\n\ninput_customer_data = {\n    \"name\": \"Christopher Lee\",\n    \"nick_name\": None,\n    \"preferences\": [\n        { \"name\": \"The Hobbit\", \"score\": 37 },\n        { \"name\": \"Count Dooku\", \"score\": 2 },\n        { \"name\": \"Saruman\", \"score\": 99 }\n    ],\n    \"friend\": \"Mellon\"\n}\n\ncustomer = from_dict(Customer, input_customer_data)\n# Structured data is available as attributes since attr.s exposes them like that\nassert customer.name == \"Christopher Lee\"\n# Nested structures are also constructed. List[sub_strucutre] and Dict[key, sub_structure] are supported\nassert customer.preferences[0].name == \"The Hobbit\"\n# Data not defined in the strucutre is inserted into the __dict__ if possible\nassert customer.__dict__[\"friend\"] == \"Mellon\"\n```\n\n## Use cases\n\n`from-dict` is especially useful when used on big and partially known data structures like JSON. Since undefined \nstructure is ignored, we can use `from-dict` to avoid `try-catch` and `KeyError` hell:\n\nAssume we want to interact with the Google GeoCoding API\n(cf. https://developers.google.com/maps/documentation/geocoding/intro):\n\nThe JSON that is returned on requests contains some keys that we are not interested in. So we create \ndata-structures that contain the keys that we actually want to use:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass(frozen=True)\nclass AddressComponent:\n    long_name: str\n    short_name: str\n    types: List[str]\n\n@dataclass(frozen=True)\nclass Result:\n    address_components: List[AddressComponent]\n    formatted_address: str\n\n@dataclass(frozen=True)\nclass Response:\n    results: List[Result]\n```\n\nWith that, given the `response` of the API, we can extract the fields and ignore everything else.\n\n```python\nfrom from_dict import from_dict\n\n# This will throw a TypeError if something goes wrong.\nstructured_response: Response = from_dict(Response, \n                                          response, \n                                          fd_check_types=True,   # Do check types at run-time\n                                          fd_copy_unknown=False  # Do not copy undefined data to __dict__\n                                          )\n\n# Now, we can access the data in a statically known manner\nfor res in structured_response.results:\n    print(f\"The formatted address is {res.formatted_address}\")\n    for addr_comp in res.address_components:\n        print(f\"Component {addr_comp.long_name}\")\n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wchresta/from-dict", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "from-dict", "package_url": "https://pypi.org/project/from-dict/", "platform": "", "project_url": "https://pypi.org/project/from-dict/", "project_urls": {"Homepage": "https://github.com/wchresta/from-dict"}, "release_url": "https://pypi.org/project/from-dict/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Create data structures from dictionaries.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>from-dict</h1>\n<p>Create data structures from dictionaries.</p>\n<h2>Features</h2>\n<ul>\n<li>Transform dicts to <code>attr.s</code>, <code>dataclass</code> and <code>NamedTuple</code></li>\n<li>Supports nested structures when using <code>typing.List</code> and <code>typing.Dict</code> type hints.</li>\n<li>Insert additional fields existing in dict into structure with <code>fd_copy_unknown=True</code></li>\n<li>Optional run-time type-checking with <code>fd_check_types=True</code></li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>  <span class=\"c1\"># or import attr.dataclass for Python &lt; 3.7</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n<span class=\"kn\">from</span> <span class=\"nn\">from_dict</span> <span class=\"kn\">import</span> <span class=\"n\">from_dict</span>\n\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Preference</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Customer</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">nick_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"n\">preferences</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Preference</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">input_customer_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Christopher Lee\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"nick_name\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"preferences\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The Hobbit\"</span><span class=\"p\">,</span> <span class=\"s2\">\"score\"</span><span class=\"p\">:</span> <span class=\"mi\">37</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Count Dooku\"</span><span class=\"p\">,</span> <span class=\"s2\">\"score\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Saruman\"</span><span class=\"p\">,</span> <span class=\"s2\">\"score\"</span><span class=\"p\">:</span> <span class=\"mi\">99</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"friend\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mellon\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">customer</span> <span class=\"o\">=</span> <span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">Customer</span><span class=\"p\">,</span> <span class=\"n\">input_customer_data</span><span class=\"p\">)</span>\n<span class=\"c1\"># Structured data is available as attributes since attr.s exposes them like that</span>\n<span class=\"k\">assert</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Christopher Lee\"</span>\n<span class=\"c1\"># Nested structures are also constructed. List[sub_strucutre] and Dict[key, sub_structure] are supported</span>\n<span class=\"k\">assert</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">preferences</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"The Hobbit\"</span>\n<span class=\"c1\"># Data not defined in the strucutre is inserted into the __dict__ if possible</span>\n<span class=\"k\">assert</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"s2\">\"friend\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"Mellon\"</span>\n</pre>\n<h2>Use cases</h2>\n<p><code>from-dict</code> is especially useful when used on big and partially known data structures like JSON. Since undefined\nstructure is ignored, we can use <code>from-dict</code> to avoid <code>try-catch</code> and <code>KeyError</code> hell:</p>\n<p>Assume we want to interact with the Google GeoCoding API\n(cf. <a href=\"https://developers.google.com/maps/documentation/geocoding/intro\" rel=\"nofollow\">https://developers.google.com/maps/documentation/geocoding/intro</a>):</p>\n<p>The JSON that is returned on requests contains some keys that we are not interested in. So we create\ndata-structures that contain the keys that we actually want to use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">AddressComponent</span><span class=\"p\">:</span>\n    <span class=\"n\">long_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">short_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">types</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Result</span><span class=\"p\">:</span>\n    <span class=\"n\">address_components</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">AddressComponent</span><span class=\"p\">]</span>\n    <span class=\"n\">formatted_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Response</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Result</span><span class=\"p\">]</span>\n</pre>\n<p>With that, given the <code>response</code> of the API, we can extract the fields and ignore everything else.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">from_dict</span> <span class=\"kn\">import</span> <span class=\"n\">from_dict</span>\n\n<span class=\"c1\"># This will throw a TypeError if something goes wrong.</span>\n<span class=\"n\">structured_response</span><span class=\"p\">:</span> <span class=\"n\">Response</span> <span class=\"o\">=</span> <span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">Response</span><span class=\"p\">,</span> \n                                          <span class=\"n\">response</span><span class=\"p\">,</span> \n                                          <span class=\"n\">fd_check_types</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>   <span class=\"c1\"># Do check types at run-time</span>\n                                          <span class=\"n\">fd_copy_unknown</span><span class=\"o\">=</span><span class=\"kc\">False</span>  <span class=\"c1\"># Do not copy undefined data to __dict__</span>\n                                          <span class=\"p\">)</span>\n\n<span class=\"c1\"># Now, we can access the data in a statically known manner</span>\n<span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">structured_response</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"The formatted address is </span><span class=\"si\">{</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">formatted_address</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">addr_comp</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">address_components</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Component </span><span class=\"si\">{</span><span class=\"n\">addr_comp</span><span class=\"o\">.</span><span class=\"n\">long_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6665202, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "440b371888c54540948c56779c3b0703", "sha256": "a92eb63343e69707049a644450a5f4f5b26ce6ef3ed9e043ffade040c7546945"}, "downloads": -1, "filename": "from_dict-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "440b371888c54540948c56779c3b0703", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4130, "upload_time": "2020-02-17T03:56:29", "upload_time_iso_8601": "2020-02-17T03:56:29.290778Z", "url": "https://files.pythonhosted.org/packages/cb/a2/29e5621ba8ec5e43e762bc98fd76b48443372c117da320d7a9171d920bfd/from_dict-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d88fa5321197eeed16499f97c5851c50", "sha256": "30f2574544e61c185b2af70afe56f45e17aecbe20e68bce0bbb65d6a90d973c6"}, "downloads": -1, "filename": "from-dict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d88fa5321197eeed16499f97c5851c50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2869, "upload_time": "2020-02-17T03:56:31", "upload_time_iso_8601": "2020-02-17T03:56:31.540257Z", "url": "https://files.pythonhosted.org/packages/ee/3c/c749038816beb32f4a8f6965cd020dbf488f3837d81c40c2aec9e8a80373/from-dict-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0f7415abe402978a2bb5a99b3a56b772", "sha256": "59663d84ee00eea3aaa1f7891dbc172c78b7c13798ea0fad4ac1cfce9cf95eed"}, "downloads": -1, "filename": "from_dict-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f7415abe402978a2bb5a99b3a56b772", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5674, "upload_time": "2020-02-20T00:45:31", "upload_time_iso_8601": "2020-02-20T00:45:31.711403Z", "url": "https://files.pythonhosted.org/packages/30/02/76a6fe59b492ff07c4b2f3348de4e200f320f9a80c25e1fe4f6ebf02d98d/from_dict-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "853ca469464fa2cd9edaac6630b0137b", "sha256": "f6440be99a8cfa678884cb1f6da5ba004b67819dd8a1fa84a78bd265fec1356a"}, "downloads": -1, "filename": "from-dict-0.2.0.tar.gz", "has_sig": false, "md5_digest": "853ca469464fa2cd9edaac6630b0137b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4646, "upload_time": "2020-02-20T00:45:33", "upload_time_iso_8601": "2020-02-20T00:45:33.067206Z", "url": "https://files.pythonhosted.org/packages/c0/92/d0b32591cbf862e0597c4bd2d36ec14f3dcde6d70d95bfcfdd3e0b70a7d8/from-dict-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f7415abe402978a2bb5a99b3a56b772", "sha256": "59663d84ee00eea3aaa1f7891dbc172c78b7c13798ea0fad4ac1cfce9cf95eed"}, "downloads": -1, "filename": "from_dict-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f7415abe402978a2bb5a99b3a56b772", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5674, "upload_time": "2020-02-20T00:45:31", "upload_time_iso_8601": "2020-02-20T00:45:31.711403Z", "url": "https://files.pythonhosted.org/packages/30/02/76a6fe59b492ff07c4b2f3348de4e200f320f9a80c25e1fe4f6ebf02d98d/from_dict-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "853ca469464fa2cd9edaac6630b0137b", "sha256": "f6440be99a8cfa678884cb1f6da5ba004b67819dd8a1fa84a78bd265fec1356a"}, "downloads": -1, "filename": "from-dict-0.2.0.tar.gz", "has_sig": false, "md5_digest": "853ca469464fa2cd9edaac6630b0137b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4646, "upload_time": "2020-02-20T00:45:33", "upload_time_iso_8601": "2020-02-20T00:45:33.067206Z", "url": "https://files.pythonhosted.org/packages/c0/92/d0b32591cbf862e0597c4bd2d36ec14f3dcde6d70d95bfcfdd3e0b70a7d8/from-dict-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:10 2020"}