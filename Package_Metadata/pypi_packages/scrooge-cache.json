{"info": {"author": "Marcelo Moraes", "author_email": "marcelomoraesjr28@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Scrooge Cache\n=======================================\n\n[![Build Status](https://travis-ci.org/marcelomoraes28/scrooge_cache.svg?branch=master)](https://travis-ci.org/marcelomoraes28/scrooge_cache)\n[![Coverage Status](https://coveralls.io/repos/github/marcelomoraes28/scrooge_cache/badge.svg?branch=master)](https://coveralls.io/github/marcelomoraes28/scrooge_cache?branch=master)\n[![Pypi Version](https://img.shields.io/badge/pypi-0.1.2-yellow.svg)](https://img.shields.io/badge/pypi-0.1.2--beta-yellow.svg)\n[![Python Version](https://img.shields.io/badge/python-3.6%7C3.7-blue.svg)](https://img.shields.io/badge/python-3.6%7C3.7-blue.svg)\n\n![alt text](https://github.com/marcelomoraes28/scrooge_cache/raw/master/scrooge_mcduck.png)\n\nWhat is Scrooge?\n----------------------------------\n\nScrooge is a **S**mart **C**ache Sto**r**age f**o**r str**o**nger **g**entlem**e**n\n\n**Backend supports:**\n- [memcache](https://memcached.org/)\n- [redis](https://redis.io/)\n\n\nHow can I use?\n-------------\n\nScrooge is able to cache function returns based on its input arguments for a given time.\n\n**Rules:**\n- Just a unique namespace per backend instance;\n- If you do not set expiration_time scrooge will take infinite time;\n- The return of decorated function must be str or int or float or tuple, or list or dict;\n- If you use redis backend you can defined the db index using the parameter `db=index`, if you do not do this the default will be 0;\n\nInstalling\n-------------\n```\npip install scrooge-cache\n```\nQuick start\n-----------\n\n**Using with redis as backend**\n\nThis example below will cache the function return for an undetermined time\n\n```python\nimport time\nfrom scrooge import RedisBackend, Client\n\nbackend = RedisBackend(host='127.0.0.1', port=6379)\nclient = Client(cache_backend=backend)\n\n# Cached for an undetermined time\n@client.gentlemen_cache(namespace='f1')\ndef function_to_be_cached(p1, p2):\n    time.sleep(5)\n    return {\"p1\": p1, \"p2\": p2}\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\n# The return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n```\n\nThis example below will cache the function return for 10 seconds\n\n```python\nimport time\nfrom scrooge import RedisBackend, Client\n\nbackend = RedisBackend(host='127.0.0.1', port=6379)\nclient = Client(cache_backend=backend)\n\n# Cached for 10 seconds\n@client.gentlemen_cache(namespace='f1', expiration_time=10)\ndef function_to_be_cached(p1, p2):\n    time.sleep(5)\n    return {\"p1\": p1, \"p2\": p2}\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\n# The return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\ntime.sleep(5)\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n```\n\n**Using with memcache as backend**\n\nThis example below will cache the function return for an undetermined time\n\n```python\nimport time\nfrom scrooge import MemcacheBackend, Client\n\nbackend = MemcacheBackend(host='127.0.0.1', port=11211)\nclient = Client(cache_backend=backend)\n\n# Cached for an undetermined time\n@client.gentlemen_cache(namespace='f1')\ndef function_to_be_cached(p1, p2):\n    time.sleep(5)\n    return {\"p1\": p1, \"p2\": p2}\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\n# The return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n```\n\nThis example below will cache the function return for 10 seconds\n\n```python\nimport time\nfrom scrooge import MemcacheBackend, Client\n\nbackend = MemcacheBackend(host='127.0.0.1', port=11211)\nclient = Client(cache_backend=backend)\n\n# Cached for 10 seconds\n@client.gentlemen_cache(namespace='f1', expiration_time=10)\ndef function_to_be_cached(p1, p2):\n    time.sleep(5)\n    return {\"p1\": p1, \"p2\": p2}\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\n# The return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\ntime.sleep(5)\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n```\n\n**No caching**\n\nIf you wanna a cacheless request, you can do this using the `no_cache` argument\n\n```python\nimport time\nfrom scrooge import MemcacheBackend, Client\n\nbackend = MemcacheBackend(host='127.0.0.1', port=11211)\nclient = Client(cache_backend=backend)\n\n# Cached for 10 seconds\n@client.gentlemen_cache(namespace='f1', expiration_time=10)\ndef function_to_be_cached(p1, p2):\n    time.sleep(5)\n    return {\"p1\": p1, \"p2\": p2}\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\n# Cacheless request below\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5, no_cache=True))\n```\n\n**Force cache update**\n\nIf you wanna force the cache update, you can do this using the `force_cache_update` argument\n\n```python\nimport time\nfrom scrooge import MemcacheBackend, Client\n\nbackend = MemcacheBackend(host='127.0.0.1', port=11211)\nclient = Client(cache_backend=backend)\n\n# Cached for 10 seconds\n@client.gentlemen_cache(namespace='f1', expiration_time=10)\ndef function_to_be_cached(p1, p2):\n    time.sleep(5)\n    return {\"p1\": p1, \"p2\": p2}\n\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5))\n\n# Force cache update\n# After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}\nprint(function_to_be_cached(4,5, force_cache_update=True))\n```\n\nRun tests\n------------\n```\npytest -ra\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marcelomoraes28/scrooge_cache", "keywords": "cache scrooge redis memcache", "license": "", "maintainer": "", "maintainer_email": "", "name": "scrooge-cache", "package_url": "https://pypi.org/project/scrooge-cache/", "platform": "", "project_url": "https://pypi.org/project/scrooge-cache/", "project_urls": {"Homepage": "https://github.com/marcelomoraes28/scrooge_cache"}, "release_url": "https://pypi.org/project/scrooge-cache/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Scrooge Cache", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Scrooge Cache</h1>\n<p><a href=\"https://travis-ci.org/marcelomoraes28/scrooge_cache\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85082008dae579ca763b6a3ec84dbb8e439f6bef/68747470733a2f2f7472617669732d63692e6f72672f6d617263656c6f6d6f7261657332382f7363726f6f67655f63616368652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/marcelomoraes28/scrooge_cache?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/099e248bc071b3097413f68567fdb1b2688ccee3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d617263656c6f6d6f7261657332382f7363726f6f67655f63616368652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://img.shields.io/badge/pypi-0.1.2--beta-yellow.svg\" rel=\"nofollow\"><img alt=\"Pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fe3f89f48d24c80ffe128f31472269378af14a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970692d302e312e322d79656c6c6f772e737667\"></a>\n<a href=\"https://img.shields.io/badge/python-3.6%7C3.7-blue.svg\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ede16a6a85a3870446125061e4c2133e1812713/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36253743332e372d626c75652e737667\"></a></p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c4abee59403ad88a28ddc16ed051dc5d6b1b364/68747470733a2f2f6769746875622e636f6d2f6d617263656c6f6d6f7261657332382f7363726f6f67655f63616368652f7261772f6d61737465722f7363726f6f67655f6d636475636b2e706e67\"></p>\n<h2>What is Scrooge?</h2>\n<p>Scrooge is a <strong>S</strong>mart <strong>C</strong>ache Sto<strong>r</strong>age f<strong>o</strong>r str<strong>o</strong>nger <strong>g</strong>entlem<strong>e</strong>n</p>\n<p><strong>Backend supports:</strong></p>\n<ul>\n<li><a href=\"https://memcached.org/\" rel=\"nofollow\">memcache</a></li>\n<li><a href=\"https://redis.io/\" rel=\"nofollow\">redis</a></li>\n</ul>\n<h2>How can I use?</h2>\n<p>Scrooge is able to cache function returns based on its input arguments for a given time.</p>\n<p><strong>Rules:</strong></p>\n<ul>\n<li>Just a unique namespace per backend instance;</li>\n<li>If you do not set expiration_time scrooge will take infinite time;</li>\n<li>The return of decorated function must be str or int or float or tuple, or list or dict;</li>\n<li>If you use redis backend you can defined the db index using the parameter <code>db=index</code>, if you do not do this the default will be 0;</li>\n</ul>\n<h2>Installing</h2>\n<pre><code>pip install scrooge-cache\n</code></pre>\n<h2>Quick start</h2>\n<p><strong>Using with redis as backend</strong></p>\n<p>This example below will cache the function return for an undetermined time</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrooge</span> <span class=\"kn\">import</span> <span class=\"n\">RedisBackend</span><span class=\"p\">,</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">RedisBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6379</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cached for an undetermined time</span>\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">gentlemen_cache</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'f1'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"n\">p2</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># The return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre>\n<p>This example below will cache the function return for 10 seconds</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrooge</span> <span class=\"kn\">import</span> <span class=\"n\">RedisBackend</span><span class=\"p\">,</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">RedisBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6379</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cached for 10 seconds</span>\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">gentlemen_cache</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'f1'</span><span class=\"p\">,</span> <span class=\"n\">expiration_time</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"n\">p2</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># The return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Using with memcache as backend</strong></p>\n<p>This example below will cache the function return for an undetermined time</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrooge</span> <span class=\"kn\">import</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">,</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">11211</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cached for an undetermined time</span>\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">gentlemen_cache</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'f1'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"n\">p2</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># The return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre>\n<p>This example below will cache the function return for 10 seconds</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrooge</span> <span class=\"kn\">import</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">,</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">11211</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cached for 10 seconds</span>\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">gentlemen_cache</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'f1'</span><span class=\"p\">,</span> <span class=\"n\">expiration_time</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"n\">p2</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># The return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre>\n<p><strong>No caching</strong></p>\n<p>If you wanna a cacheless request, you can do this using the <code>no_cache</code> argument</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrooge</span> <span class=\"kn\">import</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">,</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">11211</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cached for 10 seconds</span>\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">gentlemen_cache</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'f1'</span><span class=\"p\">,</span> <span class=\"n\">expiration_time</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"n\">p2</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Cacheless request below</span>\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">no_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Force cache update</strong></p>\n<p>If you wanna force the cache update, you can do this using the <code>force_cache_update</code> argument</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrooge</span> <span class=\"kn\">import</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">,</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">MemcacheBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">11211</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cached for 10 seconds</span>\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">gentlemen_cache</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'f1'</span><span class=\"p\">,</span> <span class=\"n\">expiration_time</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"n\">p2</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Force cache update</span>\n<span class=\"c1\"># After 5 seconds the return will be {\"p1\": 4, \"p2\": 5}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">function_to_be_cached</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">force_cache_update</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<h2>Run tests</h2>\n<pre><code>pytest -ra\n</code></pre>\n\n          </div>"}, "last_serial": 5427824, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c7ca0184c7b54bce51e1f0615d741fae", "sha256": "89679cb9b98bef424aa1c35391c00a2b4de94a6cfa32258e2e26bd10e2badcc4"}, "downloads": -1, "filename": "scrooge_cache-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c7ca0184c7b54bce51e1f0615d741fae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3975, "upload_time": "2019-02-22T16:48:12", "upload_time_iso_8601": "2019-02-22T16:48:12.400287Z", "url": "https://files.pythonhosted.org/packages/e8/3c/5c986fb26db06d00eb16968b1abea30da0991dc62f97c7ca17e6ac38d066/scrooge_cache-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f86bdb0486862321d42fa6a45a0ea6a8", "sha256": "61ab77fa0c400907dccb40cacc85eec06cbd29e3d53192c3d665c32afceb51dc"}, "downloads": -1, "filename": "scrooge_cache-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f86bdb0486862321d42fa6a45a0ea6a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4160, "upload_time": "2019-02-27T20:35:58", "upload_time_iso_8601": "2019-02-27T20:35:58.176183Z", "url": "https://files.pythonhosted.org/packages/8d/60/749ad4242d5008a83ff52768479d8997f29d42a11e44ba6b632b548ed646/scrooge_cache-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2af60087f0abbc46b9ae253ada0ea4a8", "sha256": "1227e5836902355a161a5425b0c9304c52776adef5761e2bd9758ae698f2deef"}, "downloads": -1, "filename": "scrooge_cache-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2af60087f0abbc46b9ae253ada0ea4a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4304, "upload_time": "2019-04-25T13:22:43", "upload_time_iso_8601": "2019-04-25T13:22:43.674794Z", "url": "https://files.pythonhosted.org/packages/69/cf/c12793de290d4758a36e5a294af60c46a88fe9e8cc0fe5d44c0187ae3cae/scrooge_cache-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "de806c302e126fe593c23bb6577eadce", "sha256": "01ce6c13ab768bf5a5b14fda14344091434a892b003ad4e9f3410daf70a96f3e"}, "downloads": -1, "filename": "scrooge_cache-0.1.2.tar.gz", "has_sig": false, "md5_digest": "de806c302e126fe593c23bb6577eadce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4261, "upload_time": "2019-06-18T23:03:12", "upload_time_iso_8601": "2019-06-18T23:03:12.617322Z", "url": "https://files.pythonhosted.org/packages/ef/8c/eb69a007e055fcfdd72fcb259202b9456b206c77334d662eee7baadc3912/scrooge_cache-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "324290aecedf729b805a52f6e460250e", "sha256": "8681799f466ec2f0a0666f01b9031c4b35eb7263e88980bc57217c39a8afaf0d"}, "downloads": -1, "filename": "scrooge_cache-0.1.3.tar.gz", "has_sig": false, "md5_digest": "324290aecedf729b805a52f6e460250e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4260, "upload_time": "2019-06-20T22:03:58", "upload_time_iso_8601": "2019-06-20T22:03:58.361416Z", "url": "https://files.pythonhosted.org/packages/ac/8b/361a391d32242a72f9a3469a089d5f5514f39ef9f684089e12bf1d117fcf/scrooge_cache-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "324290aecedf729b805a52f6e460250e", "sha256": "8681799f466ec2f0a0666f01b9031c4b35eb7263e88980bc57217c39a8afaf0d"}, "downloads": -1, "filename": "scrooge_cache-0.1.3.tar.gz", "has_sig": false, "md5_digest": "324290aecedf729b805a52f6e460250e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4260, "upload_time": "2019-06-20T22:03:58", "upload_time_iso_8601": "2019-06-20T22:03:58.361416Z", "url": "https://files.pythonhosted.org/packages/ac/8b/361a391d32242a72f9a3469a089d5f5514f39ef9f684089e12bf1d117fcf/scrooge_cache-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:28 2020"}