{"info": {"author": "Ben Cole", "author_email": "benc@netsight.co.uk", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Plone", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://travis-ci.org/netsight/netsight.cloudstorage.svg?branch=master\n    :target: https://travis-ci.org/netsight/netsight.cloudstorage\n    \nnetsight.cloudstorage\n=====================\n\nSupport for (securely) offloading Plone file data to the cloud.\n\nThis package provides two things:\n\n* Offloading large files to the cloud\n* Transcoding of video to web-compatible format\n* Doing so in a secure manner that doesn't bypass Plone's security model\n\nAt the moment this is done using `Amazon Web Services`_\n(S3 for cloudstorage, Elastic Transcoder for transcoding),\nbut could potentially be expanded to support other cloud storage services.\n\nFile data is first stored in Plone, and then synced to the cloud. Subsequent\nrequests for the file data are redirected to a unique auto-expiring\ncloud URL (which prevents the data from unauthorised access).\n\n.. _`Amazon Web Services`:  http://aws.amazon.com\n\nRequirements\n============\n\nUploads are handled asynchronously by `Celery`_, for which you need to\nconfigure a `supported broker`_.\n\n.. _`Celery`: http://docs.celeryproject.org\n.. _`supported broker`: http://docs.celeryproject.org/en/latest/getting-started/brokers\n\nBuildout configuration\n======================\n\nYou will need to add the following to your buildout:\n\n* `netsight.cloudstorage` egg into 'eggs'\n* A part to build celery (e.g. using collective.recipe.celery)\n* `broker_url` and `plone_url` variables to your zope instance\n\nExample buildout config\n-----------------------\n\n.. code:: ini\n\n   [buildout]\n   ...\n\n   [celery]\n   recipe = collective.recipe.celery\n   eggs =\n        ${instance:eggs}\n        netsight.cloudstorage\n   broker-transport = redis\n   broker-host = redis://localhost:6379/0\n   result-backend = redis\n   result-dburi = redis://localhost:6379/0\n   imports = netsight.cloudstorage.tasks\n   celeryd-logfile = ${buildout:directory}/var/log/celeryd.log\n   celeryd-log-level = info\n   celeryd-concurrency = 2\n\n   [instance]\n   ...\n   zope-conf-additional =\n        <product-config netsight.cloudstorage>\n                broker_url ${celery:broker-host}\n                plone_url http://localhost:8080\n        </product-config>\n\n\nPlease note that `plone_url` is used by the celery working to read from and send events to Plone. If you are using Virtual Hosting, you will need to include your VH config in the variable e.g.:\n\n  plone_url http://localhost:8080/VirtualHostBase/http/www.example.com:80/Plone/VirtualHostRoot/\n\nAn example buildout configuration for redis is provided in case you want to configure\nit using buildout and run with supervisor. Look at files `redis.cfg` and `redis.conf.tpl`\nfor more information.\n\n\nAWS Configuration\n=================\n\nInstalling the `netsight.cloudstorage` add-on in the control panel will give you\na 'CloudStorage Settings' option. You will need to provide:\n\n* Your AWS Access Key\n* Your AWS Secret Access Key\n* S3 bucket name\n  This is the name of the bucket where files will be uploaded.\n  If it does not exist, it will be created for you when the first file is\n  uploaded.\n* Minimum file size\n  Any files uploaded above this size will automatically be sent to the cloud.\n  Smaller files can still be manually uploaded.\n\nExample AWS Policy\n------------------\n\nHere is an example policy you can use to grant a specific user access to a specific S3 bucket:\n\n.. code:: json\n\n  {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"s3:*\",\n            \"Resource\": [\n                \"arn:aws:s3:::netsight-cloudstorage-mybucket\",\n                \"arn:aws:s3:::netsight-cloudstorage-mybucket/*\"\n            ]\n        }\n    ]\n  }\n\nFor more details on AWS users and policies, see http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html\n\nHow it works\n============\n\nThe package registers an event subscribe that watches for new file field uploads.\nIf the size of the file data exceeds the 'minimum file size' set above, it\nwill register a celery task that asyncronously uploads the data to the cloud.\n\nOnce the upload is complete, celery will notify Plone, which generates an email\nto the content creator.\n\nOnce the cloud copy is available, the package patches the 'download' methods so\nthat any requests for the file data result in a redirect to the cloud copy.\nEach request generates an auto-expiring one-time URL to the cloud copy, ensuring\nthe security of the cloud data.\n\nTranscoding\n===========\n\nFiles with a 'video' mimetype are also sent through a transcoding pipeline if this\noption is enabled in the control panel.\n\nThis transcoded version is stored separately, and must be manually requested\nby passing 'transcoded=true' on the file download request e.g.\n\n  http://myplonesite/folder/myfile/at_download/file?transcoded=true\n\nFiles are currently transcoded using the 'Generic 480p 16:9' preset (`1351620000001-000020`_)\n\nTo enable transcoding, you first need to create a specific S3 bucket to save the\ntranscoded files. This specific S3 bucket must be called like the one used to\nstore the files, but ended in \"-transcoded\". If you S3 bucket is called\n\"netsight-cloudstorage-plone-storage\", you need to create a new bucket called\n\"netsight-cloudstorage-plone-storage-transcoded\".\n\nThen you need to create a transcoding pipeline. To do that, login to your AWS account,\ngo to Application Services -> Elastic Transcoder and create a new Pipeline. Choose a\nname for the pipeline (you will have to set this name in the Control Panel), set\nthe default S3 bucket (\"netsight-cloudstorage-plone-storage\") as an input bucket and\nset the new one (\"netsight-cloudstorage-plone-storage-transcoded\") as an ouput bucket\nboth for files and playlists, and also for thumbnails.\n\n\n.. _`1351620000001-000020`: http://docs.aws.amazon.com/elastictranscoder/latest/developerguide/system-presets.html\n\nTODO\n====\n\n* Support for other transcoding presets\n* Support other cloud backends\n\nContributors\n============\n\n- Ben Cole (Architecture and initial implementation)\n- Matthew Sital-Singh (Implementation and documentation)\n- Mikel Larreategi (Improved Dexterity support and optional transcoding)\n\nChangelog\n=========\n\n1.8.1 (2016-05-06)\n------------------\n\n- Remove dependency on plone.namedfile\n  [mattss]\n\n\n1.8 (2016-02-09)\n----------------\n\n- Provide an example of how to install and configure a redis server\n  with buildout [erral]\n\n- Add a control panel option to disable transcoding [erral]\n\n- Better support of dexterity content-types using plone.namedfile.\n  Now dexterity types' blobs are uploaded automatically to cloud\n  storage [erral]\n\n- Allow generating differing expiry URLs [benc]\n\n- Remove files from cloud when removed from Plone [mattss]\n\n1.7.1 (2014-12-11)\n------------------\n\n- Fixed issue with a log line [benc]\n\n\n1.7 (2014-12-09)\n----------------\n\n- Handling of content with multiple fields where at least one is below file\n  size threshold [benc]\n\n\n1.6.9 (2014-12-09)\n------------------\n\n- Added more verbose logging throughout [benc]\n\n1.6.8 (2014-12-09)\n------------------\n\n- Added more verbose error logging to callback task\n  [benc]\n- Added more logging to callback view\n  [benc]\n- Updated requests required version\n  [benc]\n\n\n1.6.7 (2014-12-08)\n------------------\n\n- Added more logging to upload_callback to aid debugging\n  [benc]\n\n\n1.6.6 (2014-11-27)\n------------------\n\n- Removed bucket creation in transcoding - no longer needed as not creating pipeline\n  [benc]\n- Fixed email notifications configuration\n  [benc]\n\n\n1.6.5 (2014-11-27)\n------------------\n\n- Removed pipeline creation\n  [benc]\n- Made pipeline name optional in control panel\n  [benc]\n\n\n1.6.1 (2014-11-21)\n------------------\n\n- Added workaround for \"connection reset by peer\"\n  [benc]\n\n\n1.6 (2014-11-17)\n----------------\n\n- Added abaility to disable email notifications\n  [benc]\n\n\n1.5 (2014-11-06)\n----------------\n\n- Added transcoding for video files\n  [benc]\n- Added customisable pipeline name\n  [benc]\n- Added fleshed out README\n  [mattss]\n- Added travis config\n  [mattss]\n\n\n1.4 (2014-10-23)\n----------------\n\n- AWS transcoding support!\n  [benc]\n- Improved support for virtual hosts\n  [benc, mattss]\n\n\n1.3 (2014-10-22)\n----------------\n\n- Half-baked release\n  [names removed to protect the innocent]\n\n\n1.2 (2014-09-26)\n----------------\n\n- General help text updates\n  [mattss]\n- Clear cloud storage setting when re-queued\n  [mattss]\n\n\n1.1 (2014-09-25)\n----------------\n\n- Switch to chunked uploads\n  [benc]\n- Fix bug with download patch\n  [mattss]\n- Add correct filename and mimetype to url generator\n  [mattss]\n- Add manual upload trigger view\n  [benc]\n\n\n1.0 (2014-09-23)\n----------------\n\n- Initial release\n  [benc]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/netsight/netsight.cloudstorage", "keywords": "", "license": "gpl", "maintainer": null, "maintainer_email": null, "name": "netsight.cloudstorage", "package_url": "https://pypi.org/project/netsight.cloudstorage/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/netsight.cloudstorage/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/netsight/netsight.cloudstorage"}, "release_url": "https://pypi.org/project/netsight.cloudstorage/1.8.1/", "requires_dist": null, "requires_python": null, "summary": "Allows you to store large files in the cloud", "version": "1.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/netsight/netsight.cloudstorage\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/netsight/netsight.cloudstorage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f051a85aa4b1ff7eb3ae027396f9cb9ca89030dd/68747470733a2f2f7472617669732d63692e6f72672f6e657473696768742f6e657473696768742e636c6f756473746f726167652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"netsight-cloudstorage\">\n<h2>netsight.cloudstorage</h2>\n<p>Support for (securely) offloading Plone file data to the cloud.</p>\n<p>This package provides two things:</p>\n<ul>\n<li>Offloading large files to the cloud</li>\n<li>Transcoding of video to web-compatible format</li>\n<li>Doing so in a secure manner that doesn\u2019t bypass Plone\u2019s security model</li>\n</ul>\n<p>At the moment this is done using <a href=\"http://aws.amazon.com\" rel=\"nofollow\">Amazon Web Services</a>\n(S3 for cloudstorage, Elastic Transcoder for transcoding),\nbut could potentially be expanded to support other cloud storage services.</p>\n<p>File data is first stored in Plone, and then synced to the cloud. Subsequent\nrequests for the file data are redirected to a unique auto-expiring\ncloud URL (which prevents the data from unauthorised access).</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Uploads are handled asynchronously by <a href=\"http://docs.celeryproject.org\" rel=\"nofollow\">Celery</a>, for which you need to\nconfigure a <a href=\"http://docs.celeryproject.org/en/latest/getting-started/brokers\" rel=\"nofollow\">supported broker</a>.</p>\n</div>\n<div id=\"buildout-configuration\">\n<h2>Buildout configuration</h2>\n<p>You will need to add the following to your buildout:</p>\n<ul>\n<li><cite>netsight.cloudstorage</cite> egg into \u2018eggs\u2019</li>\n<li>A part to build celery (e.g. using collective.recipe.celery)</li>\n<li><cite>broker_url</cite> and <cite>plone_url</cite> variables to your zope instance</li>\n</ul>\n<div id=\"example-buildout-config\">\n<h3>Example buildout config</h3>\n<pre><span class=\"k\">[buildout]</span>\n<span class=\"na\">...</span>\n\n<span class=\"k\">[celery]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">collective.recipe.celery</span>\n<span class=\"na\">eggs</span> <span class=\"o\">=</span><span class=\"s\">\n     ${instance:eggs}\n     netsight.cloudstorage</span>\n<span class=\"na\">broker-transport</span> <span class=\"o\">=</span> <span class=\"s\">redis</span>\n<span class=\"na\">broker-host</span> <span class=\"o\">=</span> <span class=\"s\">redis://localhost:6379/0</span>\n<span class=\"na\">result-backend</span> <span class=\"o\">=</span> <span class=\"s\">redis</span>\n<span class=\"na\">result-dburi</span> <span class=\"o\">=</span> <span class=\"s\">redis://localhost:6379/0</span>\n<span class=\"na\">imports</span> <span class=\"o\">=</span> <span class=\"s\">netsight.cloudstorage.tasks</span>\n<span class=\"na\">celeryd-logfile</span> <span class=\"o\">=</span> <span class=\"s\">${buildout:directory}/var/log/celeryd.log</span>\n<span class=\"na\">celeryd-log-level</span> <span class=\"o\">=</span> <span class=\"s\">info</span>\n<span class=\"na\">celeryd-concurrency</span> <span class=\"o\">=</span> <span class=\"s\">2</span>\n\n<span class=\"k\">[instance]</span>\n<span class=\"na\">...</span>\n<span class=\"na\">zope-conf-additional</span> <span class=\"o\">=</span><span class=\"s\">\n     &lt;product-config netsight.cloudstorage&gt;\n             broker_url ${celery:broker-host}\n             plone_url http://localhost:8080\n     &lt;/product-config&gt;</span>\n</pre>\n<p>Please note that <cite>plone_url</cite> is used by the celery working to read from and send events to Plone. If you are using Virtual Hosting, you will need to include your VH config in the variable e.g.:</p>\n<blockquote>\nplone_url <a href=\"http://localhost:8080/VirtualHostBase/http/www.example.com:80/Plone/VirtualHostRoot/\" rel=\"nofollow\">http://localhost:8080/VirtualHostBase/http/www.example.com:80/Plone/VirtualHostRoot/</a></blockquote>\n<p>An example buildout configuration for redis is provided in case you want to configure\nit using buildout and run with supervisor. Look at files <cite>redis.cfg</cite> and <cite>redis.conf.tpl</cite>\nfor more information.</p>\n</div>\n</div>\n<div id=\"aws-configuration\">\n<h2>AWS Configuration</h2>\n<p>Installing the <cite>netsight.cloudstorage</cite> add-on in the control panel will give you\na \u2018CloudStorage Settings\u2019 option. You will need to provide:</p>\n<ul>\n<li>Your AWS Access Key</li>\n<li>Your AWS Secret Access Key</li>\n<li>S3 bucket name\nThis is the name of the bucket where files will be uploaded.\nIf it does not exist, it will be created for you when the first file is\nuploaded.</li>\n<li>Minimum file size\nAny files uploaded above this size will automatically be sent to the cloud.\nSmaller files can still be manually uploaded.</li>\n</ul>\n<div id=\"example-aws-policy\">\n<h3>Example AWS Policy</h3>\n<p>Here is an example policy you can use to grant a specific user access to a specific S3 bucket:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"Version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2012-10-17\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"Statement\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n          <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"s3:*\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n              <span class=\"s2\">\"arn:aws:s3:::netsight-cloudstorage-mybucket\"</span><span class=\"p\">,</span>\n              <span class=\"s2\">\"arn:aws:s3:::netsight-cloudstorage-mybucket/*\"</span>\n          <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For more details on AWS users and policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html\" rel=\"nofollow\">http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html</a></p>\n</div>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>The package registers an event subscribe that watches for new file field uploads.\nIf the size of the file data exceeds the \u2018minimum file size\u2019 set above, it\nwill register a celery task that asyncronously uploads the data to the cloud.</p>\n<p>Once the upload is complete, celery will notify Plone, which generates an email\nto the content creator.</p>\n<p>Once the cloud copy is available, the package patches the \u2018download\u2019 methods so\nthat any requests for the file data result in a redirect to the cloud copy.\nEach request generates an auto-expiring one-time URL to the cloud copy, ensuring\nthe security of the cloud data.</p>\n</div>\n<div id=\"transcoding\">\n<h2>Transcoding</h2>\n<p>Files with a \u2018video\u2019 mimetype are also sent through a transcoding pipeline if this\noption is enabled in the control panel.</p>\n<p>This transcoded version is stored separately, and must be manually requested\nby passing \u2018transcoded=true\u2019 on the file download request e.g.</p>\n<blockquote>\n<a href=\"http://myplonesite/folder/myfile/at_download/file?transcoded=true\" rel=\"nofollow\">http://myplonesite/folder/myfile/at_download/file?transcoded=true</a></blockquote>\n<p>Files are currently transcoded using the \u2018Generic 480p 16:9\u2019 preset (<a href=\"http://docs.aws.amazon.com/elastictranscoder/latest/developerguide/system-presets.html\" rel=\"nofollow\">1351620000001-000020</a>)</p>\n<p>To enable transcoding, you first need to create a specific S3 bucket to save the\ntranscoded files. This specific S3 bucket must be called like the one used to\nstore the files, but ended in \u201c-transcoded\u201d. If you S3 bucket is called\n\u201cnetsight-cloudstorage-plone-storage\u201d, you need to create a new bucket called\n\u201cnetsight-cloudstorage-plone-storage-transcoded\u201d.</p>\n<p>Then you need to create a transcoding pipeline. To do that, login to your AWS account,\ngo to Application Services -&gt; Elastic Transcoder and create a new Pipeline. Choose a\nname for the pipeline (you will have to set this name in the Control Panel), set\nthe default S3 bucket (\u201cnetsight-cloudstorage-plone-storage\u201d) as an input bucket and\nset the new one (\u201cnetsight-cloudstorage-plone-storage-transcoded\u201d) as an ouput bucket\nboth for files and playlists, and also for thumbnails.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Support for other transcoding presets</li>\n<li>Support other cloud backends</li>\n</ul>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Ben Cole (Architecture and initial implementation)</li>\n<li>Matthew Sital-Singh (Implementation and documentation)</li>\n<li>Mikel Larreategi (Improved Dexterity support and optional transcoding)</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id2\">\n<h3>1.8.1 (2016-05-06)</h3>\n<ul>\n<li>Remove dependency on plone.namedfile\n[mattss]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.8 (2016-02-09)</h3>\n<ul>\n<li>Provide an example of how to install and configure a redis server\nwith buildout [erral]</li>\n<li>Add a control panel option to disable transcoding [erral]</li>\n<li>Better support of dexterity content-types using plone.namedfile.\nNow dexterity types\u2019 blobs are uploaded automatically to cloud\nstorage [erral]</li>\n<li>Allow generating differing expiry URLs [benc]</li>\n<li>Remove files from cloud when removed from Plone [mattss]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.7.1 (2014-12-11)</h3>\n<ul>\n<li>Fixed issue with a log line [benc]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.7 (2014-12-09)</h3>\n<ul>\n<li>Handling of content with multiple fields where at least one is below file\nsize threshold [benc]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.6.9 (2014-12-09)</h3>\n<ul>\n<li>Added more verbose logging throughout [benc]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.6.8 (2014-12-09)</h3>\n<ul>\n<li>Added more verbose error logging to callback task\n[benc]</li>\n<li>Added more logging to callback view\n[benc]</li>\n<li>Updated requests required version\n[benc]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.6.7 (2014-12-08)</h3>\n<ul>\n<li>Added more logging to upload_callback to aid debugging\n[benc]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.6.6 (2014-11-27)</h3>\n<ul>\n<li>Removed bucket creation in transcoding - no longer needed as not creating pipeline\n[benc]</li>\n<li>Fixed email notifications configuration\n[benc]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.6.5 (2014-11-27)</h3>\n<ul>\n<li>Removed pipeline creation\n[benc]</li>\n<li>Made pipeline name optional in control panel\n[benc]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.6.1 (2014-11-21)</h3>\n<ul>\n<li>Added workaround for \u201cconnection reset by peer\u201d\n[benc]</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.6 (2014-11-17)</h3>\n<ul>\n<li>Added abaility to disable email notifications\n[benc]</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>1.5 (2014-11-06)</h3>\n<ul>\n<li>Added transcoding for video files\n[benc]</li>\n<li>Added customisable pipeline name\n[benc]</li>\n<li>Added fleshed out README\n[mattss]</li>\n<li>Added travis config\n[mattss]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>1.4 (2014-10-23)</h3>\n<ul>\n<li>AWS transcoding support!\n[benc]</li>\n<li>Improved support for virtual hosts\n[benc, mattss]</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>1.3 (2014-10-22)</h3>\n<ul>\n<li>Half-baked release\n[names removed to protect the innocent]</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>1.2 (2014-09-26)</h3>\n<ul>\n<li>General help text updates\n[mattss]</li>\n<li>Clear cloud storage setting when re-queued\n[mattss]</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>1.1 (2014-09-25)</h3>\n<ul>\n<li>Switch to chunked uploads\n[benc]</li>\n<li>Fix bug with download patch\n[mattss]</li>\n<li>Add correct filename and mimetype to url generator\n[mattss]</li>\n<li>Add manual upload trigger view\n[benc]</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>1.0 (2014-09-23)</h3>\n<ul>\n<li>Initial release\n[benc]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2102729, "releases": {"1.5": [{"comment_text": "", "digests": {"md5": "7ace9260cec11709dce8d04a32ac724f", "sha256": "e73be6721d8227cf2b4f9a8dbf320233a98c820b5729425b04474bacf39a7548"}, "downloads": -1, "filename": "netsight.cloudstorage-1.5.zip", "has_sig": false, "md5_digest": "7ace9260cec11709dce8d04a32ac724f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39486, "upload_time": "2014-11-06T12:08:00", "upload_time_iso_8601": "2014-11-06T12:08:00.731914Z", "url": "https://files.pythonhosted.org/packages/d0/59/2e1b7989b91668d3a9898ea6e724772d98695d733292025fea2aae91c69c/netsight.cloudstorage-1.5.zip", "yanked": false}], "1.6": [], "1.6.1": [], "1.6.5": [{"comment_text": "", "digests": {"md5": "d33abde650ecd72e00dff2ffb3c39601", "sha256": "d118749bf450a7dcc1c44c0bbd1a93b49ec5cc108c9a57da004b4faa06caec79"}, "downloads": -1, "filename": "netsight.cloudstorage-1.6.5.zip", "has_sig": false, "md5_digest": "d33abde650ecd72e00dff2ffb3c39601", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43181, "upload_time": "2014-11-27T10:50:57", "upload_time_iso_8601": "2014-11-27T10:50:57.760554Z", "url": "https://files.pythonhosted.org/packages/dd/d2/b41e2166e0a1bcdbb80d737ab96817e6969253bc3288049896a3b0101f08/netsight.cloudstorage-1.6.5.zip", "yanked": false}], "1.6.6": [{"comment_text": "", "digests": {"md5": "16790e2c88d00acb68b90f0caa341429", "sha256": "2abeb8e1067e93a17f8457c6ea9139c3ed8691a1a9f6cc91bea49234b87071a6"}, "downloads": -1, "filename": "netsight.cloudstorage-1.6.6.zip", "has_sig": false, "md5_digest": "16790e2c88d00acb68b90f0caa341429", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40299, "upload_time": "2014-11-27T16:27:15", "upload_time_iso_8601": "2014-11-27T16:27:15.542238Z", "url": "https://files.pythonhosted.org/packages/71/4e/326fe1ce5ba063b5f31a99569f058768270d24a252d589a67ba98f16adb1/netsight.cloudstorage-1.6.6.zip", "yanked": false}], "1.6.7": [{"comment_text": "", "digests": {"md5": "500f69be79f88ddbc04c6959f9aa2fb9", "sha256": "76efa9d3481d7f39ab411121e7becc17ac872df9586870f18bd40f7cdaed02b1"}, "downloads": -1, "filename": "netsight.cloudstorage-1.6.7.zip", "has_sig": false, "md5_digest": "500f69be79f88ddbc04c6959f9aa2fb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40485, "upload_time": "2014-12-08T17:05:30", "upload_time_iso_8601": "2014-12-08T17:05:30.921570Z", "url": "https://files.pythonhosted.org/packages/1a/f7/efe04a92a5fa3aee2aaef2a4a72f8be274e03e9d928d2f48d2eddd082ba2/netsight.cloudstorage-1.6.7.zip", "yanked": false}], "1.6.8": [{"comment_text": "", "digests": {"md5": "c486b994c36cd1a43ff6e6fa71aab954", "sha256": "605c1cc99daaf98b1d9e74013fc3ac2c24bc4c36aab34a43b3b9a1d4327bdc4b"}, "downloads": -1, "filename": "netsight.cloudstorage-1.6.8.zip", "has_sig": false, "md5_digest": "c486b994c36cd1a43ff6e6fa71aab954", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40650, "upload_time": "2014-12-09T11:21:19", "upload_time_iso_8601": "2014-12-09T11:21:19.803399Z", "url": "https://files.pythonhosted.org/packages/0a/a1/c64a8d3adc049a64cad7584471f492de6ce1d8659ba246722ecc4cdc342c/netsight.cloudstorage-1.6.8.zip", "yanked": false}], "1.6.9": [{"comment_text": "", "digests": {"md5": "7eb418b5aec2521a919f92262759eaf8", "sha256": "f93783767e03862c1eabf1c062cf5a9a8fa7aebdf6a980bd6099aba60c1ba210"}, "downloads": -1, "filename": "netsight.cloudstorage-1.6.9.zip", "has_sig": false, "md5_digest": "7eb418b5aec2521a919f92262759eaf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40779, "upload_time": "2014-12-09T12:46:22", "upload_time_iso_8601": "2014-12-09T12:46:22.803205Z", "url": "https://files.pythonhosted.org/packages/ce/8f/572505d137518fde727989043afc707a2328cbe45a854d4b90d0363ce4f0/netsight.cloudstorage-1.6.9.zip", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "ffd26ebd18a9a4f2e74734881ee48b3a", "sha256": "dafcc09220c6ea4390cf44606f4b67f571ac1403154c4e39f3a179eff9cf99f8"}, "downloads": -1, "filename": "netsight.cloudstorage-1.7.zip", "has_sig": false, "md5_digest": "ffd26ebd18a9a4f2e74734881ee48b3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40820, "upload_time": "2014-12-09T15:50:16", "upload_time_iso_8601": "2014-12-09T15:50:16.016195Z", "url": "https://files.pythonhosted.org/packages/12/cb/c326d637e9b594ba6ac6e9b30a21dbe1e5cefdfa168840fb64bca841b1a3/netsight.cloudstorage-1.7.zip", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "314f625c78acaa2943beed5914eb381c", "sha256": "4a32eabb20ab2013961ccbb9240dfe12d04e268e30074570baed507d5e6247b3"}, "downloads": -1, "filename": "netsight.cloudstorage-1.7.1.zip", "has_sig": false, "md5_digest": "314f625c78acaa2943beed5914eb381c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41061, "upload_time": "2014-12-11T09:22:25", "upload_time_iso_8601": "2014-12-11T09:22:25.755728Z", "url": "https://files.pythonhosted.org/packages/e4/70/115db066db9ee2298f40dafa60e780c248f3e87cf7a5007019707a77d888/netsight.cloudstorage-1.7.1.zip", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "80d741ef4097d05d1e3943203f54512f", "sha256": "7f88f69e55a3721c33404391a840de185be9d1fe77e5835d23a0314329f0eeac"}, "downloads": -1, "filename": "netsight.cloudstorage-1.8.zip", "has_sig": false, "md5_digest": "80d741ef4097d05d1e3943203f54512f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46482, "upload_time": "2016-02-09T12:24:11", "upload_time_iso_8601": "2016-02-09T12:24:11.077754Z", "url": "https://files.pythonhosted.org/packages/dd/ad/ec7cacc692c473bc16716e297b37d5cd49ca2ee6ad2eca628df0f9fa5368/netsight.cloudstorage-1.8.zip", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "4eb554bfd9a82772e0d7c64d3cc849ec", "sha256": "ee5c74f01dfc95dcefd96a24d57dfa669c6e62ffdc3a34b830bda303961b1fde"}, "downloads": -1, "filename": "netsight.cloudstorage-1.8.1.tar.gz", "has_sig": false, "md5_digest": "4eb554bfd9a82772e0d7c64d3cc849ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29857, "upload_time": "2016-05-06T14:55:17", "upload_time_iso_8601": "2016-05-06T14:55:17.307527Z", "url": "https://files.pythonhosted.org/packages/a2/a4/b8c8b644cebb605017ebe2ac6ae1a6ba303c73906929f2f8400f4b93265b/netsight.cloudstorage-1.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4eb554bfd9a82772e0d7c64d3cc849ec", "sha256": "ee5c74f01dfc95dcefd96a24d57dfa669c6e62ffdc3a34b830bda303961b1fde"}, "downloads": -1, "filename": "netsight.cloudstorage-1.8.1.tar.gz", "has_sig": false, "md5_digest": "4eb554bfd9a82772e0d7c64d3cc849ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29857, "upload_time": "2016-05-06T14:55:17", "upload_time_iso_8601": "2016-05-06T14:55:17.307527Z", "url": "https://files.pythonhosted.org/packages/a2/a4/b8c8b644cebb605017ebe2ac6ae1a6ba303c73906929f2f8400f4b93265b/netsight.cloudstorage-1.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:55 2020"}