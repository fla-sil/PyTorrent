{"info": {"author": "J\u00fcrgen Knauth", "author_email": "pubsrc@binary-overflow.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Topic :: Software Development :: Testing"], "description": "jk_exceptionhelper\n==================\n\nIntroduction\n------------\n\nThis python module wraps around python exceptions. As the python exception API is quite a bit obscure this python module provides a clean API for analysis and logging purposes.\n\nInformation about this module can be found here:\n\n* [github.org](https://github.com/jkpubsrc/....)\n* [pypi.python.org](https://pypi.python.org/pypi/jk_exceptionhelper)\n\nWhy this module?\n----------------\n\nAs the python exception API is quite a bit obscure this python module tries to solve this problem. By focusing on this problem in an isolated way improvements can easily be made without breaking and adapting a variety of implementations.\n\nHow to use this module\n----------------------\n\n### Import this module\n\nPlease include this module into your application using the following code:\n\n```python\nimport jk_exceptionhelper\n```\n\n### Analyse the exeption\n\nExample:\n\n```python\ntry:\n\ta = 0\n\tb = 5 / a\nexcept Exception as ex:\n\tee = jk_exceptionhelper.analyseException(ex)\n```\n\nNow `ee` contains an instance of `ExceptionObject`. `ExceptionObject` contains all relevant information from the exception for your convenience to work with. (For details about the `ExceptionObject` API see below.)\n\n### Output the exception data\n\nExample:\n\n```python\ntry:\n\ta = 0\n\tb = 5 / a\nexcept Exception as ex:\n\tjk_exceptionhelper.analyseException(ex).dump()\n```\n\nThis will print all data collected to STDOUT. Example:\n\n```\nZeroDivisionError\n: exceptionTextHR:\n:\tdivision by zero\n: stackTrace:\n:\t(<stdin>:3, '')\n\\-\n```\n\nAPI: Functions\n--------------\n\n### Function `analyseException()`\n\n`ExceptionObject analyseException()`\n\nThis function should be called at the first statement within an `except` block. It returns an object of type `ExceptionObject` containing all relevant information from the exception for your convenience to work with.\n\nAPI: Classes\n------------\n\n## Class 'ExceptionObject'\n\n### Fields\n\n| Type\t| Name\t| Required?\t| Description\t|\n| ----- | ----- | --------- | ------------- |\n| `class`\t\t\t\t| `exceptionClass`\t\t| optional\t| The original exception class. This instance will only be present if `analyseException()` was called within an `except` block.\t|\n| `str`\t\t\t\t\t| `exceptionClassName`\t| required\t| The class name of the exception.\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| `str`\t\t\t\t\t| `exceptionTextHR`\t\t| optional\t| A human readable text that was contained within the exception.\t\t\t\t\t\t|\n| `StackTraceItem[]`\t| `stackTrace`\t\t\t| optional\t| The stack trace. The last item of the list is the topmost stack element.\t\t\t\t|\n| `ExceptionObject`\t\t| `nestedException`\t\t| optional\t| The parent exception object if this exception has been caught in an `except` block.\t|\n\n### Static Methods\n\n#### Static Method `StackTraceItem fromJSON(dict data)`\n\n`StackTraceItem fromJSON(dict data)`\n\nDeserialize a data structure created by `toJSON()`.\n\n### Methods\n\n#### Method `void dump()`\n\n`void dump()`\n\nPrint the contents of the exception to STDOUT.\n\nExample:\n\n```python\ntry:\n\ta = 0\n\tb = 5 / a\nexcept:\n\tanalyseException().dump()\n```\n\nThis will print something like this:\n\n```\nZeroDivisionError\n: exceptionTextHR:\n:\tdivision by zero\n: stackTrace:\n:\t(./test2.py:55, 'b = 5 / a')\n:\t(./test2.py:59, 'main3()')\n:\t(./test2.py:63, 'main2()')\n:\t(./test2.py:67, 'main1()')\n```\n\n#### Method `dict toJSON(bool bRecursive = True)`\n\n`dict toJSON(bool bRecursive = True)`\n\nSerialize the exception object to JSON format.\n\nArguments:\n\n* `bool bRecursive` : If `True` (which is the default) nested exceptions are serialized as well. If `False` these get skipped.\n\nExample:\n\n```python\ntry:\n\ta = 0\n\tb = 5 / a\nexcept:\n\tedata = analyseException().toJSON()\n```\n\n#### Method `dict toJSON(bool bRecursive = True)`\n\n`dict toJSON_flat()`\n\nSame as `toJSON(False)`.\n\nArguments:\n\n* (none)\n\nContact Information\n-------------------\n\nThis is Open Source code. That not only gives you the possibility of freely using this code it also\nallows you to contribute. Feel free to contact the author(s) of this software listed below, either\nfor comments, collaboration requests, suggestions for improvement or reporting bugs:\n\n* J\u00fcrgen Knauth: jknauth@uni-goettingen.de, pubsrc@binary-overflow.de\n\nLicense\n-------\n\nThis software is provided under the following license:\n\n* Apache Software License 2.0", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/jkpubsrc/python-module-jk-exceptionhelper/tarball/0.2020.3.4", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jkpubsrc/python-module-jk-exceptionhelper", "keywords": "exception handling,debugging", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "jk-exceptionhelper", "package_url": "https://pypi.org/project/jk-exceptionhelper/", "platform": "", "project_url": "https://pypi.org/project/jk-exceptionhelper/", "project_urls": {"Download": "https://github.com/jkpubsrc/python-module-jk-exceptionhelper/tarball/0.2020.3.4", "Homepage": "https://github.com/jkpubsrc/python-module-jk-exceptionhelper"}, "release_url": "https://pypi.org/project/jk-exceptionhelper/0.2020.3.4/", "requires_dist": null, "requires_python": "", "summary": "As the python exception API is quite a bit obscure this python module wraps around python exceptions to provide a clean interface for analysis and logging purposes.", "version": "0.2020.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jk_exceptionhelper</h1>\n<h2>Introduction</h2>\n<p>This python module wraps around python exceptions. As the python exception API is quite a bit obscure this python module provides a clean API for analysis and logging purposes.</p>\n<p>Information about this module can be found here:</p>\n<ul>\n<li><a href=\"https://github.com/jkpubsrc/....\" rel=\"nofollow\">github.org</a></li>\n<li><a href=\"https://pypi.python.org/pypi/jk_exceptionhelper\" rel=\"nofollow\">pypi.python.org</a></li>\n</ul>\n<h2>Why this module?</h2>\n<p>As the python exception API is quite a bit obscure this python module tries to solve this problem. By focusing on this problem in an isolated way improvements can easily be made without breaking and adapting a variety of implementations.</p>\n<h2>How to use this module</h2>\n<h3>Import this module</h3>\n<p>Please include this module into your application using the following code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jk_exceptionhelper</span>\n</pre>\n<h3>Analyse the exeption</h3>\n<p>Example:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"n\">a</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\t<span class=\"n\">ee</span> <span class=\"o\">=</span> <span class=\"n\">jk_exceptionhelper</span><span class=\"o\">.</span><span class=\"n\">analyseException</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n</pre>\n<p>Now <code>ee</code> contains an instance of <code>ExceptionObject</code>. <code>ExceptionObject</code> contains all relevant information from the exception for your convenience to work with. (For details about the <code>ExceptionObject</code> API see below.)</p>\n<h3>Output the exception data</h3>\n<p>Example:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"n\">a</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\t<span class=\"n\">jk_exceptionhelper</span><span class=\"o\">.</span><span class=\"n\">analyseException</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span>\n</pre>\n<p>This will print all data collected to STDOUT. Example:</p>\n<pre><code>ZeroDivisionError\n: exceptionTextHR:\n:\tdivision by zero\n: stackTrace:\n:\t(&lt;stdin&gt;:3, '')\n\\-\n</code></pre>\n<h2>API: Functions</h2>\n<h3>Function <code>analyseException()</code></h3>\n<p><code>ExceptionObject analyseException()</code></p>\n<p>This function should be called at the first statement within an <code>except</code> block. It returns an object of type <code>ExceptionObject</code> containing all relevant information from the exception for your convenience to work with.</p>\n<h2>API: Classes</h2>\n<h2>Class 'ExceptionObject'</h2>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Name</th>\n<th>Required?</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>class</code></td>\n<td><code>exceptionClass</code></td>\n<td>optional</td>\n<td>The original exception class. This instance will only be present if <code>analyseException()</code> was called within an <code>except</code> block.</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td><code>exceptionClassName</code></td>\n<td>required</td>\n<td>The class name of the exception.</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td><code>exceptionTextHR</code></td>\n<td>optional</td>\n<td>A human readable text that was contained within the exception.</td>\n</tr>\n<tr>\n<td><code>StackTraceItem[]</code></td>\n<td><code>stackTrace</code></td>\n<td>optional</td>\n<td>The stack trace. The last item of the list is the topmost stack element.</td>\n</tr>\n<tr>\n<td><code>ExceptionObject</code></td>\n<td><code>nestedException</code></td>\n<td>optional</td>\n<td>The parent exception object if this exception has been caught in an <code>except</code> block.</td>\n</tr></tbody></table>\n<h3>Static Methods</h3>\n<h4>Static Method <code>StackTraceItem fromJSON(dict data)</code></h4>\n<p><code>StackTraceItem fromJSON(dict data)</code></p>\n<p>Deserialize a data structure created by <code>toJSON()</code>.</p>\n<h3>Methods</h3>\n<h4>Method <code>void dump()</code></h4>\n<p><code>void dump()</code></p>\n<p>Print the contents of the exception to STDOUT.</p>\n<p>Example:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"n\">a</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n\t<span class=\"n\">analyseException</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span>\n</pre>\n<p>This will print something like this:</p>\n<pre><code>ZeroDivisionError\n: exceptionTextHR:\n:\tdivision by zero\n: stackTrace:\n:\t(./test2.py:55, 'b = 5 / a')\n:\t(./test2.py:59, 'main3()')\n:\t(./test2.py:63, 'main2()')\n:\t(./test2.py:67, 'main1()')\n</code></pre>\n<h4>Method <code>dict toJSON(bool bRecursive = True)</code></h4>\n<p><code>dict toJSON(bool bRecursive = True)</code></p>\n<p>Serialize the exception object to JSON format.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>bool bRecursive</code> : If <code>True</code> (which is the default) nested exceptions are serialized as well. If <code>False</code> these get skipped.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"n\">a</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n\t<span class=\"n\">edata</span> <span class=\"o\">=</span> <span class=\"n\">analyseException</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">toJSON</span><span class=\"p\">()</span>\n</pre>\n<h4>Method <code>dict toJSON(bool bRecursive = True)</code></h4>\n<p><code>dict toJSON_flat()</code></p>\n<p>Same as <code>toJSON(False)</code>.</p>\n<p>Arguments:</p>\n<ul>\n<li>(none)</li>\n</ul>\n<h2>Contact Information</h2>\n<p>This is Open Source code. That not only gives you the possibility of freely using this code it also\nallows you to contribute. Feel free to contact the author(s) of this software listed below, either\nfor comments, collaboration requests, suggestions for improvement or reporting bugs:</p>\n<ul>\n<li>J\u00fcrgen Knauth: <a href=\"mailto:jknauth@uni-goettingen.de\">jknauth@uni-goettingen.de</a>, <a href=\"mailto:pubsrc@binary-overflow.de\">pubsrc@binary-overflow.de</a></li>\n</ul>\n<h2>License</h2>\n<p>This software is provided under the following license:</p>\n<ul>\n<li>Apache Software License 2.0</li>\n</ul>\n\n          </div>"}, "last_serial": 6746783, "releases": {"0.2019.10.8": [{"comment_text": "", "digests": {"md5": "5ffc87e724e26bd18598359b4f4f12bb", "sha256": "b4db03cacbf0411ce3c67aa2bc7c5195c3d1d4a49ce675801a922c0f317d9c8d"}, "downloads": -1, "filename": "jk_exceptionhelper-0.2019.10.8.tar.gz", "has_sig": false, "md5_digest": "5ffc87e724e26bd18598359b4f4f12bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9114, "upload_time": "2020-01-20T18:47:13", "upload_time_iso_8601": "2020-01-20T18:47:13.382506Z", "url": "https://files.pythonhosted.org/packages/99/e3/e4cf3d6d586f632e7a823563ccfad2897b45d079b9e4bc1e17e06d64b75d/jk_exceptionhelper-0.2019.10.8.tar.gz", "yanked": false}], "0.2019.9.30": [{"comment_text": "", "digests": {"md5": "c0917eadbbea6b1b374f9186f153c3ba", "sha256": "b42a2e7c8dedd81e7ca74b79a7a6e41670a3d7db4ef95940411b69a628c7ae01"}, "downloads": -1, "filename": "jk_exceptionhelper-0.2019.9.30.tar.gz", "has_sig": false, "md5_digest": "c0917eadbbea6b1b374f9186f153c3ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9036, "upload_time": "2019-09-30T15:32:07", "upload_time_iso_8601": "2019-09-30T15:32:07.342623Z", "url": "https://files.pythonhosted.org/packages/39/1b/c42a9a7cd0e7ae66e9a410087cac43c3fbecfadfb54c26f99850aead5daa/jk_exceptionhelper-0.2019.9.30.tar.gz", "yanked": false}], "0.2020.3.4": [{"comment_text": "", "digests": {"md5": "3cbf15a66b116b8ae9c0e7afb079db8d", "sha256": "d71d5cf386210dceb6b3d080051378ab71b8046be353f0a1e64c2b8a59645439"}, "downloads": -1, "filename": "jk_exceptionhelper-0.2020.3.4.tar.gz", "has_sig": false, "md5_digest": "3cbf15a66b116b8ae9c0e7afb079db8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9187, "upload_time": "2020-03-04T10:24:00", "upload_time_iso_8601": "2020-03-04T10:24:00.116300Z", "url": "https://files.pythonhosted.org/packages/5e/39/e22d13af76a18653422a37d1b50b264d0a7865ad98376f613a93327b781d/jk_exceptionhelper-0.2020.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3cbf15a66b116b8ae9c0e7afb079db8d", "sha256": "d71d5cf386210dceb6b3d080051378ab71b8046be353f0a1e64c2b8a59645439"}, "downloads": -1, "filename": "jk_exceptionhelper-0.2020.3.4.tar.gz", "has_sig": false, "md5_digest": "3cbf15a66b116b8ae9c0e7afb079db8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9187, "upload_time": "2020-03-04T10:24:00", "upload_time_iso_8601": "2020-03-04T10:24:00.116300Z", "url": "https://files.pythonhosted.org/packages/5e/39/e22d13af76a18653422a37d1b50b264d0a7865ad98376f613a93327b781d/jk_exceptionhelper-0.2020.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:29 2020"}