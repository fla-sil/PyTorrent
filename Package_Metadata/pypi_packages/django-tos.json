{"info": {"author": "Frank Wiles", "author_email": "frank@revsys.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "==========\ndjango-tos\n==========\n\n.. image:: https://secure.travis-ci.org/revsys/django-tos.png\n    :alt: Build Status\n    :target: http://travis-ci.org/revsys/django-tos\n\nThis project gives the admin the ability to reset terms of agreement with the end users. It tracks when TOS are changed and when users agree to the new TOS.\n\nSummary\n=======\n\n- Keeps track of when TOS is changed\n- Users need to be informed and agree/re-agree when they login (custom login is provided)\n- Just two models (TOS and user agreement)\n\nTerms Of Service Installation\n=============================\n\n1. ``pip install django-tos``\n\n2. Add ``tos`` to your ``INSTALLED_APPS`` setting.\n\n3. Sync your database with ``python manage.py migrate`` or ``python manage.py syncdb`` for Django < 1.7.\n\nConfiguration\n=============\n\nOptions\n```````\n\nThere are two ways to configure ``django-tos`` - either enable the TOS check when users sign in, or use middleware to enable the TOS check on every ``GET`` request.\n\nIf you cannot override your login view (for instance, if you're using `django-allauth <https://django-allauth.readthedocs.io/en/latest/>`_) you should use the second option.\n\nOption 1: TOS Check On Sign In\n``````````````````````````````\n\nIn your root urlconf file ``urls.py`` add:\n\n.. code-block:: python\n\n    from tos.views import login\n\n    # terms of service links\n    urlpatterns += patterns('',\n        url(r'^login/$', login, {}, 'auth_login',),\n        url(r'^terms-of-service/', include('tos.urls')),\n    )\n\nOption 2: Middleware Check\n``````````````````````````\n\nThis option uses the ``incr`` methods for the configured Django cache. If you are using ``django-tos`` in a complex or parallel environment, be sure to use a cache backend that supports atomic increment operations. For more information, see the notes at the end of `this section of the Django documentation <https://docs.djangoproject.com/en/1.9/topics/cache/#basic-usage>`_.\n\nAlso, to ensure that warming the cache with users who can skip the agreement check works properly, you will need to include ``tos`` before your app (``myapp`` in the example) in your ``INSTALLED_APPS`` setting:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'tos',\n        ...\n        'myapp',  # Example app name\n        ...\n    )\n\nAdvantages\n----------\n\n* Can optionally use a separate cache for TOS agreements (necessary if your default cache does not support atomic increment operations)\n* Allow some of your users to skip the TOS check (eg: developers, staff, admin, superusers, employees)\n* Uses signals to invalidate cached agreements\n* Skips the agreement check when the user is anonymous or not signed in\n* Skips the agreement check when the request is AJAX\n* Skips the agreement check when the request isn't a ``GET`` request (to avoid getting in the way of data mutations)\n  \nDisadvantages\n-------------\n\n* Requires a cache key for each user who is signed in\n* Requires an additional cache key for each staff user\n* May leave keys in the cache when the active ``TermsOfService`` changes\n\nEfficiency\n----------\n\n* Best case for staff users: 2 cache hits\n* Best case for non-staff users: 1 cache miss, 2 cache hits\n* Worst case: 1 cache hit, 2 cache misses, 1 database query, 1 cache set (this should only happen when the user signs in)\n\nOption 2 Configuration\n----------------------\n\n1. In your root urlconf file ``urls.py`` only add the terms-of-service URLs:\n\n   .. code-block:: python\n\n       # terms of service links\n       urlpatterns += patterns('',\n           url(r'^terms-of-service/', include('tos.urls')),\n       )\n\n2. Optional: Since the cache used by TOS will be overwhelmingly read-heavy, you can use a separate cache specifically for TOS. To do so, create a new cache in your project's ``settings.py``:\n\n   .. code-block:: python\n   \n       CACHES = {\n           ...\n           # The cache specifically for django-tos\n           'tos': {  # Can use any name here\n               'BACKEND': ...,\n               'LOCATION': ...,\n               'NAME': 'tos-cache',  # Can use any name here\n           },\n       }\n\n   and configure ``django-tos`` to use the new cache:\n\n   .. code-block:: python\n\n       TOS_CACHE_NAME = 'tos'  # Must match the key name in in CACHES\n\n   this setting defaults to the ``default`` cache.\n\n4. Then in your project's ``settings.py`` add the middleware to ``MIDDLEWARE_CLASSES``:\n\n   .. code-block:: python\n\n       MIDDLEWARE_CLASSES = (\n           ...\n           # Terms of service checks\n           'tos.middleware.UserAgreementMiddleware',\n       )\n\n5. Optional: To allow users to skip the TOS check, you will need to set corresponding cache keys for them in the TOS cache. The cache key for each user will need to be prefixed with ``django:tos:skip_tos_check:``, and have the user ID appended to it.\n\n   Here is an example app configuration that allows staff users and superusers to skip the TOS agreement check:\n\n   .. code-block:: python\n\n       from django.apps import AppConfig, apps\n       from django.conf import settings\n       from django.contrib.auth import get_user_model\n       from django.core.cache import caches\n       from django.db.models import Q\n       from django.db.models.signals import post_save, pre_save\n       from django.dispatch import receiver\n\n       class MyAppConfig(AppConfig):\n           name = 'myapp'\n\n           def ready(self):\n               if 'tos' in settings.INSTALLED_APPS:\n                   cache = caches[getattr(settings, 'TOS_CACHE_NAME', 'default')]\n                   tos_app = apps.get_app_config('tos')\n                   TermsOfService = tos_app.get_model('TermsOfService')\n\n                   @receiver(post_save, sender=get_user_model(), dispatch_uid='set_staff_in_cache_for_tos')\n                   def set_staff_in_cache_for_tos(user, instance, **kwargs):\n                       if kwargs.get('raw', False):\n                           return\n\n                       # Get the cache prefix\n                       key_version = cache.get('django:tos:key_version')\n\n                       # If the user is staff allow them to skip the TOS agreement check\n                       if instance.is_staff or instance.is_superuser:\n                           cache.set('django:tos:skip_tos_check:{}'.format(instance.id), version=key_version)\n\n                       # But if they aren't make sure we invalidate them from the cache\n                       elif cache.get('django:tos:skip_tos_check:{}'.format(instance.id), False):\n                           cache.delete('django:tos:skip_tos_check:{}'.format(instance.id), version=key_version)\n\n                   @receiver(post_save, sender=TermsOfService, dispatch_uid='add_staff_users_to_tos_cache')\n                   def add_staff_users_to_tos_cache(*args, **kwargs):\n                       if kwargs.get('raw', False):\n                           return\n\n                       # Get the cache prefix\n                       key_version = cache.get('django:tos:key_version')\n\n                       # Efficiently cache all of the users who are allowed to skip the TOS\n                       # agreement check\n                       cache.set_many({\n                           'django:tos:skip_tos_check:{}'.format(staff_user.id): True\n                           for staff_user in get_user_model().objects.filter(\n                               Q(is_staff=True) | Q(is_superuser=True))\n                       }, version=key_version)\n\n                   # Immediately add staff users to the cache\n                   add_staff_users_to_tos_cache()\n\n===============\ndjango-tos-i18n\n===============\n\ndjango-tos internationalization using django-modeltranslation.\n\nTerms Of Service i18n Installation\n==================================\n\nAssuming you have correctly installed django-tos in your app you only need to\nadd following apps to ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS += ('modeltranslation', 'tos_i18n')\n\nand also you should also define your languages in Django ``LANGUAGES``\nvariable, e.g.:\n\n.. code-block:: python\n\n    LANGUAGES = (\n        ('pl', 'Polski'),\n        ('en', 'English'),\n    )\n\nPlease note that adding those to ``INSTALLED_APPS`` **changes** Django models.\nConcretely it adds for every registered ``field`` that should translated,\nadditional fields with name ``field_<lang_code>``, e.g. for given model:\n\n.. code-block:: python\n\n    class MyModel(models.Model):\n        name = models.CharField(max_length=10)\n\nThere will be generated fields: ``name`` , ``name_en``, ``name_pl``.\n\nYou should probably migrate your database, and if you're using Django < 1.7 using South is recommended. These migrations should be kept in your local project.\n\nHow to migrate tos with South\n`````````````````````````````\n\nHere is some step-by-step example how to convert your legacy django-tos\ninstalation synced using syncdb into a translated django-tos-i18n with South\nmigrations.\n\n1. Inform South that you want to store migrations in custom place by putting\n   this in your Django settings file:\n\n   .. code-block:: python\n\n       SOUTH_MIGRATION_MODULES = {\n           'tos': 'YOUR_APP.migrations.tos',\n       }\n\n2. Add required directory (package):\n\n   .. code-block:: bash\n\n       mkdir -p YOUR_APP/migrations/tos\n       touch YOUR_APP/migrations/tos/__init__.py\n\n3. Create initial migration (referring to the database state as it is now):\n\n   .. code-block:: bash\n\n       python manage.py schemamigration --initial tos\n\n4. Fake migration (because the changes are already in the database):\n\n   .. code-block:: bash\n\n       python manage.py migrate tos --fake\n\n5. Install tos_i18n (and modeltranslation) to ``INSTALLED_APPS``:\n\n   .. code-block:: python\n\n       INSTALLED_APPS += ('modeltranslation', 'tos_i18n',)\n\n6. Make sure that the Django ``LANGUAGES`` setting is properly configured.\n\n7. Migrate what changed:\n\n   .. code-block:: bash\n\n    $ python manage.py schemamigration --auto tos\n    $ python migrate tos\n\n\nThat's it. You are now running tos in i18n mode with the languages you declared\nin ``LANGUAGES`` setting. This will also make all required adjustments in the\nDjango admin.\n\nFor more info on how translation works in details please refer to the\n`django-modeltranslation documentation\n<https://django-modeltranslation.readthedocs.org/en/latest/>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/revsys/django-tos/tree/master", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-tos", "package_url": "https://pypi.org/project/django-tos/", "platform": "", "project_url": "https://pypi.org/project/django-tos/", "project_urls": {"Homepage": "http://github.com/revsys/django-tos/tree/master"}, "release_url": "https://pypi.org/project/django-tos/0.7.2/", "requires_dist": null, "requires_python": "", "summary": "django-tos is a reusable Django application for setting Terms of Service.", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-tos\">\n<h2>django-tos</h2>\n<a href=\"http://travis-ci.org/revsys/django-tos\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8408349fdaff7a8c28a259f9f66587895aa5bf01/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f7265767379732f646a616e676f2d746f732e706e67\"></a>\n<p>This project gives the admin the ability to reset terms of agreement with the end users. It tracks when TOS are changed and when users agree to the new TOS.</p>\n<div id=\"summary\">\n<h3>Summary</h3>\n<ul>\n<li>Keeps track of when TOS is changed</li>\n<li>Users need to be informed and agree/re-agree when they login (custom login is provided)</li>\n<li>Just two models (TOS and user agreement)</li>\n</ul>\n</div>\n<div id=\"terms-of-service-installation\">\n<h3>Terms Of Service Installation</h3>\n<ol>\n<li><tt>pip install <span class=\"pre\">django-tos</span></tt></li>\n<li>Add <tt>tos</tt> to your <tt>INSTALLED_APPS</tt> setting.</li>\n<li>Sync your database with <tt>python manage.py migrate</tt> or <tt>python manage.py syncdb</tt> for Django &lt; 1.7.</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<div id=\"options\">\n<h4>Options</h4>\n<p>There are two ways to configure <tt><span class=\"pre\">django-tos</span></tt> - either enable the TOS check when users sign in, or use middleware to enable the TOS check on every <tt>GET</tt> request.</p>\n<p>If you cannot override your login view (for instance, if you\u2019re using <a href=\"https://django-allauth.readthedocs.io/en/latest/\" rel=\"nofollow\">django-allauth</a>) you should use the second option.</p>\n</div>\n<div id=\"option-1-tos-check-on-sign-in\">\n<h4>Option 1: TOS Check On Sign In</h4>\n<p>In your root urlconf file <tt>urls.py</tt> add:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tos.views</span> <span class=\"kn\">import</span> <span class=\"n\">login</span>\n\n<span class=\"c1\"># terms of service links</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^login/$'</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"s1\">'auth_login'</span><span class=\"p\">,),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^terms-of-service/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'tos.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"option-2-middleware-check\">\n<h4>Option 2: Middleware Check</h4>\n<p>This option uses the <tt>incr</tt> methods for the configured Django cache. If you are using <tt><span class=\"pre\">django-tos</span></tt> in a complex or parallel environment, be sure to use a cache backend that supports atomic increment operations. For more information, see the notes at the end of <a href=\"https://docs.djangoproject.com/en/1.9/topics/cache/#basic-usage\" rel=\"nofollow\">this section of the Django documentation</a>.</p>\n<p>Also, to ensure that warming the cache with users who can skip the agreement check works properly, you will need to include <tt>tos</tt> before your app (<tt>myapp</tt> in the example) in your <tt>INSTALLED_APPS</tt> setting:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'tos'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'myapp'</span><span class=\"p\">,</span>  <span class=\"c1\"># Example app name</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<div id=\"advantages\">\n<h5>Advantages</h5>\n<ul>\n<li>Can optionally use a separate cache for TOS agreements (necessary if your default cache does not support atomic increment operations)</li>\n<li>Allow some of your users to skip the TOS check (eg: developers, staff, admin, superusers, employees)</li>\n<li>Uses signals to invalidate cached agreements</li>\n<li>Skips the agreement check when the user is anonymous or not signed in</li>\n<li>Skips the agreement check when the request is AJAX</li>\n<li>Skips the agreement check when the request isn\u2019t a <tt>GET</tt> request (to avoid getting in the way of data mutations)</li>\n</ul>\n</div>\n<div id=\"disadvantages\">\n<h5>Disadvantages</h5>\n<ul>\n<li>Requires a cache key for each user who is signed in</li>\n<li>Requires an additional cache key for each staff user</li>\n<li>May leave keys in the cache when the active <tt>TermsOfService</tt> changes</li>\n</ul>\n</div>\n<div id=\"efficiency\">\n<h5>Efficiency</h5>\n<ul>\n<li>Best case for staff users: 2 cache hits</li>\n<li>Best case for non-staff users: 1 cache miss, 2 cache hits</li>\n<li>Worst case: 1 cache hit, 2 cache misses, 1 database query, 1 cache set (this should only happen when the user signs in)</li>\n</ul>\n</div>\n<div id=\"option-2-configuration\">\n<h5>Option 2 Configuration</h5>\n<ol>\n<li><p>In your root urlconf file <tt>urls.py</tt> only add the terms-of-service URLs:</p>\n<pre><span class=\"c1\"># terms of service links</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^terms-of-service/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'tos.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Optional: Since the cache used by TOS will be overwhelmingly read-heavy, you can use a separate cache specifically for TOS. To do so, create a new cache in your project\u2019s <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"o\">...</span>\n    <span class=\"c1\"># The cache specifically for django-tos</span>\n    <span class=\"s1\">'tos'</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># Can use any name here</span>\n        <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n        <span class=\"s1\">'LOCATION'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'tos-cache'</span><span class=\"p\">,</span>  <span class=\"c1\"># Can use any name here</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>and configure <tt><span class=\"pre\">django-tos</span></tt> to use the new cache:</p>\n<pre><span class=\"n\">TOS_CACHE_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'tos'</span>  <span class=\"c1\"># Must match the key name in in CACHES</span>\n</pre>\n<p>this setting defaults to the <tt>default</tt> cache.</p>\n</li>\n</ol>\n<ol>\n<li><p>Then in your project\u2019s <tt>settings.py</tt> add the middleware to <tt>MIDDLEWARE_CLASSES</tt>:</p>\n<pre><span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"c1\"># Terms of service checks</span>\n    <span class=\"s1\">'tos.middleware.UserAgreementMiddleware'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Optional: To allow users to skip the TOS check, you will need to set corresponding cache keys for them in the TOS cache. The cache key for each user will need to be prefixed with <tt>django:tos:skip_tos_check:</tt>, and have the user ID appended to it.</p>\n<p>Here is an example app configuration that allows staff users and superusers to skip the TOS agreement check:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span><span class=\"p\">,</span> <span class=\"n\">apps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">get_user_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.cache</span> <span class=\"kn\">import</span> <span class=\"n\">caches</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Q</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">pre_save</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'myapp'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'tos'</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">INSTALLED_APPS</span><span class=\"p\">:</span>\n            <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">caches</span><span class=\"p\">[</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"s1\">'TOS_CACHE_NAME'</span><span class=\"p\">,</span> <span class=\"s1\">'default'</span><span class=\"p\">)]</span>\n            <span class=\"n\">tos_app</span> <span class=\"o\">=</span> <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_app_config</span><span class=\"p\">(</span><span class=\"s1\">'tos'</span><span class=\"p\">)</span>\n            <span class=\"n\">TermsOfService</span> <span class=\"o\">=</span> <span class=\"n\">tos_app</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'TermsOfService'</span><span class=\"p\">)</span>\n\n            <span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">get_user_model</span><span class=\"p\">(),</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s1\">'set_staff_in_cache_for_tos'</span><span class=\"p\">)</span>\n            <span class=\"k\">def</span> <span class=\"nf\">set_staff_in_cache_for_tos</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'raw'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span>\n\n                <span class=\"c1\"># Get the cache prefix</span>\n                <span class=\"n\">key_version</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'django:tos:key_version'</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># If the user is staff allow them to skip the TOS agreement check</span>\n                <span class=\"k\">if</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">is_staff</span> <span class=\"ow\">or</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span><span class=\"p\">:</span>\n                    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'django:tos:skip_tos_check:</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">key_version</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># But if they aren't make sure we invalidate them from the cache</span>\n                <span class=\"k\">elif</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'django:tos:skip_tos_check:</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'django:tos:skip_tos_check:</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">key_version</span><span class=\"p\">)</span>\n\n            <span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">TermsOfService</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s1\">'add_staff_users_to_tos_cache'</span><span class=\"p\">)</span>\n            <span class=\"k\">def</span> <span class=\"nf\">add_staff_users_to_tos_cache</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'raw'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span>\n\n                <span class=\"c1\"># Get the cache prefix</span>\n                <span class=\"n\">key_version</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'django:tos:key_version'</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Efficiently cache all of the users who are allowed to skip the TOS</span>\n                <span class=\"c1\"># agreement check</span>\n                <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set_many</span><span class=\"p\">({</span>\n                    <span class=\"s1\">'django:tos:skip_tos_check:</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">staff_user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">):</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">for</span> <span class=\"n\">staff_user</span> <span class=\"ow\">in</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                        <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">is_staff</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">is_superuser</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n                <span class=\"p\">},</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">key_version</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Immediately add staff users to the cache</span>\n            <span class=\"n\">add_staff_users_to_tos_cache</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div id=\"django-tos-i18n\">\n<h2>django-tos-i18n</h2>\n<p>django-tos internationalization using django-modeltranslation.</p>\n<div id=\"terms-of-service-i18n-installation\">\n<h3>Terms Of Service i18n Installation</h3>\n<p>Assuming you have correctly installed django-tos in your app you only need to\nadd following apps to <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"s1\">'modeltranslation'</span><span class=\"p\">,</span> <span class=\"s1\">'tos_i18n'</span><span class=\"p\">)</span>\n</pre>\n<p>and also you should also define your languages in Django <tt>LANGUAGES</tt>\nvariable, e.g.:</p>\n<pre><span class=\"n\">LANGUAGES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"s1\">'pl'</span><span class=\"p\">,</span> <span class=\"s1\">'Polski'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'English'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Please note that adding those to <tt>INSTALLED_APPS</tt> <strong>changes</strong> Django models.\nConcretely it adds for every registered <tt>field</tt> that should translated,\nadditional fields with name <tt>field_&lt;lang_code&gt;</tt>, e.g. for given model:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>There will be generated fields: <tt>name</tt> , <tt>name_en</tt>, <tt>name_pl</tt>.</p>\n<p>You should probably migrate your database, and if you\u2019re using Django &lt; 1.7 using South is recommended. These migrations should be kept in your local project.</p>\n<div id=\"how-to-migrate-tos-with-south\">\n<h4>How to migrate tos with South</h4>\n<p>Here is some step-by-step example how to convert your legacy django-tos\ninstalation synced using syncdb into a translated django-tos-i18n with South\nmigrations.</p>\n<ol>\n<li><p>Inform South that you want to store migrations in custom place by putting\nthis in your Django settings file:</p>\n<pre><span class=\"n\">SOUTH_MIGRATION_MODULES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'tos'</span><span class=\"p\">:</span> <span class=\"s1\">'YOUR_APP.migrations.tos'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li><p>Add required directory (package):</p>\n<pre>mkdir -p YOUR_APP/migrations/tos\ntouch YOUR_APP/migrations/tos/__init__.py\n</pre>\n</li>\n<li><p>Create initial migration (referring to the database state as it is now):</p>\n<pre>python manage.py schemamigration --initial tos\n</pre>\n</li>\n<li><p>Fake migration (because the changes are already in the database):</p>\n<pre>python manage.py migrate tos --fake\n</pre>\n</li>\n<li><p>Install tos_i18n (and modeltranslation) to <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"s1\">'modeltranslation'</span><span class=\"p\">,</span> <span class=\"s1\">'tos_i18n'</span><span class=\"p\">,)</span>\n</pre>\n</li>\n<li><p>Make sure that the Django <tt>LANGUAGES</tt> setting is properly configured.</p>\n</li>\n<li><p>Migrate what changed:</p>\n<pre>$ python manage.py schemamigration --auto tos\n$ python migrate tos\n</pre>\n</li>\n</ol>\n<p>That\u2019s it. You are now running tos in i18n mode with the languages you declared\nin <tt>LANGUAGES</tt> setting. This will also make all required adjustments in the\nDjango admin.</p>\n<p>For more info on how translation works in details please refer to the\n<a href=\"https://django-modeltranslation.readthedocs.org/en/latest/\" rel=\"nofollow\">django-modeltranslation documentation</a>.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2754287, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "923ba1d2f78411eefe529cee977cf0c6", "sha256": "a0a43735c24a9bd97c77ea89abb34e1ca89ecd731f49ddc93554f17f2e3e8fa3"}, "downloads": -1, "filename": "django-tos-0.4.0.tar.gz", "has_sig": false, "md5_digest": "923ba1d2f78411eefe529cee977cf0c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8040, "upload_time": "2016-03-03T21:11:14", "upload_time_iso_8601": "2016-03-03T21:11:14.397727Z", "url": "https://files.pythonhosted.org/packages/b9/a4/b9c201f5f247a18e2f6e4661c85d02fff85bd6f822921d6a90ea11ea7adf/django-tos-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "50e362423200a6283730ed56159ad27e", "sha256": "1306f469fc292c02283f7b6f88ce7a2db9363f131ff6b1db96ca57c288f070dc"}, "downloads": -1, "filename": "django-tos-0.5.0.tar.gz", "has_sig": false, "md5_digest": "50e362423200a6283730ed56159ad27e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8040, "upload_time": "2016-04-07T20:46:06", "upload_time_iso_8601": "2016-04-07T20:46:06.272523Z", "url": "https://files.pythonhosted.org/packages/da/da/99f1ba8d9f44a889734bf310101f19257f9bb2d9febc08cc3ae6ae9e0d15/django-tos-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "d9a56ac614c0b73f80f7beee00bf55d0", "sha256": "57384a25f2f4c68845dccfa5f2e4a1e9b177a84494a6b341efcfa0275a5d9581"}, "downloads": -1, "filename": "django-tos-0.6.0.tar.gz", "has_sig": false, "md5_digest": "d9a56ac614c0b73f80f7beee00bf55d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8564, "upload_time": "2016-06-25T16:04:37", "upload_time_iso_8601": "2016-06-25T16:04:37.822304Z", "url": "https://files.pythonhosted.org/packages/21/9c/7584271bfce3dd2909f74bb560e65faa8d7e5ce2ba137afa0d1b21742aa0/django-tos-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "3fc1e17ecfba8e398e26ff0d102139c6", "sha256": "fa7b5dff025d512f2d52ab806a0b201ab5e5bd3170bdfce453fc0a11dcc064ba"}, "downloads": -1, "filename": "django-tos-0.7.0.tar.gz", "has_sig": false, "md5_digest": "3fc1e17ecfba8e398e26ff0d102139c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12033, "upload_time": "2016-08-11T10:49:22", "upload_time_iso_8601": "2016-08-11T10:49:22.678274Z", "url": "https://files.pythonhosted.org/packages/78/58/14d89489d801d79180588f874669ef8ecf75e82196e047c64298d4949871/django-tos-0.7.0.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "bb2735777978c62f4552f9dfb2052240", "sha256": "b0f58d8cf65db2013174331b59a9c1bad7a791ad862b6a52a9b2315f97fc564f"}, "downloads": -1, "filename": "django-tos-0.7.2.tar.gz", "has_sig": false, "md5_digest": "bb2735777978c62f4552f9dfb2052240", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12622, "upload_time": "2017-04-05T08:14:36", "upload_time_iso_8601": "2017-04-05T08:14:36.509172Z", "url": "https://files.pythonhosted.org/packages/fd/0a/6d3698b6bdba5b767df577800cd0d47bac929e6b23fe927d7c240df40ad6/django-tos-0.7.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb2735777978c62f4552f9dfb2052240", "sha256": "b0f58d8cf65db2013174331b59a9c1bad7a791ad862b6a52a9b2315f97fc564f"}, "downloads": -1, "filename": "django-tos-0.7.2.tar.gz", "has_sig": false, "md5_digest": "bb2735777978c62f4552f9dfb2052240", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12622, "upload_time": "2017-04-05T08:14:36", "upload_time_iso_8601": "2017-04-05T08:14:36.509172Z", "url": "https://files.pythonhosted.org/packages/fd/0a/6d3698b6bdba5b767df577800cd0d47bac929e6b23fe927d7c240df40ad6/django-tos-0.7.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:23 2020"}