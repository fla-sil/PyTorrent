{"info": {"author": "Hai Victor Habi", "author_email": "victoropensource@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.com/haihabi/torch_rain.svg?token=eE741jb2R5GqWJWLJhiE&branch=master)](https://travis-ci.com/haihabi/torch_rain)\n# PyNNcml\nA python toolbox based on PyTorch which utilized neural network for rain estimation and classification from commercial microwave link (CMLs) data. This toolbox provides an implementation of algorithms for extracting rain-rate using neural networks and CMLs. Addinaly this project provides an example dataset with data from two CMLs and implementation of performance and robustness metrics.  \n# Install\nInstallation via pip:\n```\npip install pynncml\n\n```\n\n\n# Projects Structure\n\n1. Wet Dry Classification\n2. Baseline \n3. Power Law \n4. Rain estimation\n5. Metrics\n6. Robustness\n# Dataset\nThis repository includes an example of a dataset with a reference rain gauge.\n# Usage\nThe following examples:\n* Wet Dry Classification using neural network[1] shown in the following [notebook](https://github.com/haihabi/torch_rain/blob/master/examples/wet_dry_classification_rnn.ipynb) \n* wet Dry Classification using statistic test [5]  shown in the following [notebook](https://github.com/haihabi/torch_rain/blob/master/examples/wet_dry_classification.ipynb)\n* Rain estimation using dynamic baseline[4] shown in the following [notebook](https://github.com/haihabi/torch_rain/blob/master/examples/rain_estimation_dynamic.ipynb)\n* Rain estimation using constant baseline[5] shown in the following [notebook](https://github.com/haihabi/torch_rain/blob/master/examples/rain_estimation_constant.ipynb)\n\nShow jupyter notebooks of TorchRain\n\n\n# Model Zoo\nIn this project we supply a set of trained networks in our [Model Zoo](https://github.com/haihabi/torch_rain/tree/master/torchrain/model_zoo), this networks are trained on our own dataset which is not publicly available.\nThe model contains three types of networks: Wet-dry classification network, one-step network (rain estimation only) and two-step network (rain estimation and wet-dry classification). Moreover, we have provided all of these networks with a various number of RNN cells (1, 2, 3). From more details about network structure and results see the publication list.\n\n# Contributing\n\nIf you find a bug or have a question, please create a GitHub issue.\n\n\n\n# Publications\n\nPlease cite one of following paper if you found our neural network model useful. Thanks!\n\n>[1] Habi, Hai Victor and Messer, Hagit. \"Wet-Dry Classification Using LSTM and Commercial Microwave Links\"\n\n```\n@inproceedings{habi2018wet,\n  title={Wet-Dry Classification Using LSTM and Commercial Microwave Links},\n  author={Habi, Hai Victor and Messer, Hagit},\n  booktitle={2018 IEEE 10th Sensor Array and Multichannel Signal Processing Workshop (SAM)},\n  pages={149--153},\n  year={2018},\n  organization={IEEE}\n} \n\n```\n\n>[2] Habi, Hai Victor and Messer, Hagit. \"RNN MODELS FOR RAIN DETECTION\"\n\n```\n@inproceedings{habi2019rnn,\n  title={RNN MODELS FOR RAIN DETECTION},\n  author={Habi, Hai Victor and Messer, Hagit},\n  booktitle={2019 IEEE International Workshop on Signal Processing Systems  (SiPS)},\n  year={2019},\n  organization={IEEE}\n} \n\n```\n\n>[3] Habi, Hai Victor. \"Rain Detection and Estimation Using Recurrent Neural Network and Commercial Microwave Links\"\n\n```\n@article{habi2020,\n  title={Rain Detection and Estimation Using Recurrent Neural Network and Commercial Microwave Links},\n  author={Habi, Hai Victor},\n  journal={M.Sc. Thesis, Tel Aviv University},\n  year={2019}\n}\n\n```\n\nAlso this package contains the implementaion of the following papers:\n\n[4] J. Ostrometzky and H. Messer, \u201cDynamic determination of the baselinelevel in microwave links for rain monitoring from minimum attenuationvalues,\u201dIEEE Journal of Selected Topics in Applied Earth Observationsand Remote Sensing, vol. 11, no. 1, pp. 24\u201333, Jan 2018.\n\n[5] M. Schleiss and A. Berne, \u201cIdentification of dry and rainy periods usingtelecommunication  microwave  links,\u201dIEEE  Geoscience  and  RemoteSensing Letters, vol. 7, no. 3, pp. 611\u2013615, 2010\n\n[6] Jonatan Ostrometzky, Adam Eshel, Pinhas Alpert, and Hagit Messer. Induced bias in attenuation measurements taken from commercial microwave links. In 2017 IEEE International\nConference on Acoustics, Speech and Signal Processing (ICASSP), pages 3744\u20133748. IEEE,2017. <br>\n\n[7] Jonatan Ostrometzky, Roi Raich, Adam Eshel, and Hagit Messer.\nCalibration of the\nattenuation-rain rate power-law parameters using measurements from commercial microwave networks. In 2016 IEEE International Conference on Acoustics, Speech and Signal\nProcessing (ICASSP), pages 3736\u20133740. IEEE, 2016.\n\nIf you found on of this methods usefully please cite.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/haihabi/torch_rain", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pynncml", "package_url": "https://pypi.org/project/pynncml/", "platform": "", "project_url": "https://pypi.org/project/pynncml/", "project_urls": {"Homepage": "https://github.com/haihabi/torch_rain"}, "release_url": "https://pypi.org/project/pynncml/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A python toolbox based on PyTorch which utilized neural network for rain estimation and classification from commercial microwave link (CMLs) data.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/haihabi/torch_rain\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3a0a8e5b39e28931eeaf8f688a1c8b35ad2d7b9/68747470733a2f2f7472617669732d63692e636f6d2f686169686162692f746f7263685f7261696e2e7376673f746f6b656e3d65453734316a623252354771574a574c4a686945266272616e63683d6d6173746572\"></a></p>\n<h1>PyNNcml</h1>\n<p>A python toolbox based on PyTorch which utilized neural network for rain estimation and classification from commercial microwave link (CMLs) data. This toolbox provides an implementation of algorithms for extracting rain-rate using neural networks and CMLs. Addinaly this project provides an example dataset with data from two CMLs and implementation of performance and robustness metrics.</p>\n<h1>Install</h1>\n<p>Installation via pip:</p>\n<pre><code>pip install pynncml\n\n</code></pre>\n<h1>Projects Structure</h1>\n<ol>\n<li>Wet Dry Classification</li>\n<li>Baseline</li>\n<li>Power Law</li>\n<li>Rain estimation</li>\n<li>Metrics</li>\n<li>Robustness</li>\n</ol>\n<h1>Dataset</h1>\n<p>This repository includes an example of a dataset with a reference rain gauge.</p>\n<h1>Usage</h1>\n<p>The following examples:</p>\n<ul>\n<li>Wet Dry Classification using neural network[1] shown in the following <a href=\"https://github.com/haihabi/torch_rain/blob/master/examples/wet_dry_classification_rnn.ipynb\" rel=\"nofollow\">notebook</a></li>\n<li>wet Dry Classification using statistic test [5]  shown in the following <a href=\"https://github.com/haihabi/torch_rain/blob/master/examples/wet_dry_classification.ipynb\" rel=\"nofollow\">notebook</a></li>\n<li>Rain estimation using dynamic baseline[4] shown in the following <a href=\"https://github.com/haihabi/torch_rain/blob/master/examples/rain_estimation_dynamic.ipynb\" rel=\"nofollow\">notebook</a></li>\n<li>Rain estimation using constant baseline[5] shown in the following <a href=\"https://github.com/haihabi/torch_rain/blob/master/examples/rain_estimation_constant.ipynb\" rel=\"nofollow\">notebook</a></li>\n</ul>\n<p>Show jupyter notebooks of TorchRain</p>\n<h1>Model Zoo</h1>\n<p>In this project we supply a set of trained networks in our <a href=\"https://github.com/haihabi/torch_rain/tree/master/torchrain/model_zoo\" rel=\"nofollow\">Model Zoo</a>, this networks are trained on our own dataset which is not publicly available.\nThe model contains three types of networks: Wet-dry classification network, one-step network (rain estimation only) and two-step network (rain estimation and wet-dry classification). Moreover, we have provided all of these networks with a various number of RNN cells (1, 2, 3). From more details about network structure and results see the publication list.</p>\n<h1>Contributing</h1>\n<p>If you find a bug or have a question, please create a GitHub issue.</p>\n<h1>Publications</h1>\n<p>Please cite one of following paper if you found our neural network model useful. Thanks!</p>\n<blockquote>\n<p>[1] Habi, Hai Victor and Messer, Hagit. \"Wet-Dry Classification Using LSTM and Commercial Microwave Links\"</p>\n</blockquote>\n<pre><code>@inproceedings{habi2018wet,\n  title={Wet-Dry Classification Using LSTM and Commercial Microwave Links},\n  author={Habi, Hai Victor and Messer, Hagit},\n  booktitle={2018 IEEE 10th Sensor Array and Multichannel Signal Processing Workshop (SAM)},\n  pages={149--153},\n  year={2018},\n  organization={IEEE}\n} \n\n</code></pre>\n<blockquote>\n<p>[2] Habi, Hai Victor and Messer, Hagit. \"RNN MODELS FOR RAIN DETECTION\"</p>\n</blockquote>\n<pre><code>@inproceedings{habi2019rnn,\n  title={RNN MODELS FOR RAIN DETECTION},\n  author={Habi, Hai Victor and Messer, Hagit},\n  booktitle={2019 IEEE International Workshop on Signal Processing Systems  (SiPS)},\n  year={2019},\n  organization={IEEE}\n} \n\n</code></pre>\n<blockquote>\n<p>[3] Habi, Hai Victor. \"Rain Detection and Estimation Using Recurrent Neural Network and Commercial Microwave Links\"</p>\n</blockquote>\n<pre><code>@article{habi2020,\n  title={Rain Detection and Estimation Using Recurrent Neural Network and Commercial Microwave Links},\n  author={Habi, Hai Victor},\n  journal={M.Sc. Thesis, Tel Aviv University},\n  year={2019}\n}\n\n</code></pre>\n<p>Also this package contains the implementaion of the following papers:</p>\n<p>[4] J. Ostrometzky and H. Messer, \u201cDynamic determination of the baselinelevel in microwave links for rain monitoring from minimum attenuationvalues,\u201dIEEE Journal of Selected Topics in Applied Earth Observationsand Remote Sensing, vol. 11, no. 1, pp. 24\u201333, Jan 2018.</p>\n<p>[5] M. Schleiss and A. Berne, \u201cIdentification of dry and rainy periods usingtelecommunication  microwave  links,\u201dIEEE  Geoscience  and  RemoteSensing Letters, vol. 7, no. 3, pp. 611\u2013615, 2010</p>\n<p>[6] Jonatan Ostrometzky, Adam Eshel, Pinhas Alpert, and Hagit Messer. Induced bias in attenuation measurements taken from commercial microwave links. In 2017 IEEE International\nConference on Acoustics, Speech and Signal Processing (ICASSP), pages 3744\u20133748. IEEE,2017. <br></p>\n<p>[7] Jonatan Ostrometzky, Roi Raich, Adam Eshel, and Hagit Messer.\nCalibration of the\nattenuation-rain rate power-law parameters using measurements from commercial microwave networks. In 2016 IEEE International Conference on Acoustics, Speech and Signal\nProcessing (ICASSP), pages 3736\u20133740. IEEE, 2016.</p>\n<p>If you found on of this methods usefully please cite.</p>\n\n          </div>"}, "last_serial": 6675234, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8e33cf916cd67138175037de4a75a3ed", "sha256": "52867e03d0fadaabc74748e698e47ec138a8e479d20c304495c84ce0830c8de4"}, "downloads": -1, "filename": "pynncml-0.1.tar.gz", "has_sig": false, "md5_digest": "8e33cf916cd67138175037de4a75a3ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3069157, "upload_time": "2020-02-15T11:58:32", "upload_time_iso_8601": "2020-02-15T11:58:32.348059Z", "url": "https://files.pythonhosted.org/packages/85/2b/5619333edb0601dc2c918607fc50d057a9fd3e370ab9e1a5403048d32166/pynncml-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4556d377383bcfa2e536c884ebfde1ac", "sha256": "8e55e132cb024a7442c55dc8d6e1dc55a6c62462a06083cd1d77dde6e10d403f"}, "downloads": -1, "filename": "pynncml-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4556d377383bcfa2e536c884ebfde1ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3069203, "upload_time": "2020-02-21T13:17:30", "upload_time_iso_8601": "2020-02-21T13:17:30.828160Z", "url": "https://files.pythonhosted.org/packages/19/87/06170d0eeb70c6d03aa82e63886662ae182ec833d8c7ab3692bea884cca6/pynncml-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4556d377383bcfa2e536c884ebfde1ac", "sha256": "8e55e132cb024a7442c55dc8d6e1dc55a6c62462a06083cd1d77dde6e10d403f"}, "downloads": -1, "filename": "pynncml-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4556d377383bcfa2e536c884ebfde1ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3069203, "upload_time": "2020-02-21T13:17:30", "upload_time_iso_8601": "2020-02-21T13:17:30.828160Z", "url": "https://files.pythonhosted.org/packages/19/87/06170d0eeb70c6d03aa82e63886662ae182ec833d8c7ab3692bea884cca6/pynncml-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:08 2020"}