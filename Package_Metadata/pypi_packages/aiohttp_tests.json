{"info": {"author": "tumbler", "author_email": "zimbler@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "aiohttp\\_tests\n==============\n\nUnittest helper utilities for aiohttp-based applications.\n\nExample usage:\n\n.. code:: python\n\n\n    import asyncio\n    import time\n    from unittest import mock\n\n    import aiohttp_tests as at\n    from aiohttp import web\n\n\n    settings = mock.Mock()\n\n\n    @at.override_settings(settings, SETTINGS_VALUE='new_value')\n    class ExampleTestCase(at.BaseTestCase):\n        \"\"\" Aiohttp tests utilities example\"\"\"\n\n        @asyncio.coroutine\n        def sample_view(self, request):\n            text = yield from self.sample_async_method()\n            return web.Response(text=text)\n\n        @asyncio.coroutine\n        def sample_async_method(self):\n            yield from asyncio.sleep(0.1)\n            return 'OK'\n\n        def init_app(self, loop):\n            \"\"\" You must initialize aiohttp application correctly.\"\"\"\n            app = web.Application(loop=loop)\n            app.router.add_route('GET', '/', self.sample_view)\n            return app\n\n        def init_patchers(self):\n            super().init_patchers()\n            # Short alias for mock.patch that stores patcher and mock objects\n            # locally. Patchers are stopped automatically on teardown.\n            # Method is called by BaseTestCase.setUp\n            self.mock('time.time', return_value=self.now)\n\n        def setUp(self):\n            self.now = time.time()\n            super().setUp()\n\n        def testMockUtils(self):\n            \"\"\" Shows usage of get_mock and get_patcher methods.\"\"\"\n            self.assertEqual(time.time(), self.now)\n            self.get_mock('time.time').return_value = self.now - 1\n            self.assertEqual(time.time(), self.now - 1)\n            self.get_patcher('time.time').stop()\n            self.assertGreater(time.time(), self.now)\n\n        def testOverrideSettings(self):\n            \"\"\" Django-style override_settings decorator for any settings module.\"\"\"\n            self.assertEqual(settings.SETTINGS_VALUE, 'new_value')\n\n            with at.override_settings(settings, SETTINGS_VALUE='other_value'):\n                self.assertEqual(settings.SETTINGS_VALUE, 'other_value')\n\n        def testSyncClient(self):\n            \"\"\" Synchronous execution of requests, with new event loop every time.\n            Other HTTP methods, HTTP headers, request body or form/data are also\n            supported.\n            \"\"\"\n            response = self.client.get('/', headers={'Accept': 'application/json'})\n            self.assertEqual(response.status, 200)\n            self.assertEqual(response.text, 'OK')\n            self.assertEqual(response.headers.get('content-type'),\n                             'text/plain; charset=utf-8')\n\n            # other HTTP methods\n            response = self.client.post('/', body='POST body')\n            self.assertEqual(response.status, 405)\n\n            # urlencoded form/data also supported\n            response = self.client.request('PUT', '/', data={'field': 'value'})\n            self.assertEqual(response.status, 405)\n\n        @at.async_test\n        def testAsyncClient(self):\n            \"\"\" test client requests could be done async, if needed.\"\"\"\n\n            # you can mock any coroutine to return a 'done' Future with custom\n            # result.\n            done_future = self.empty_result(\"async response\")\n\n            # mock.patck.object shortcut\n            self.mock_object(self, 'sample_async_method', return_value=done_future)\n            response = yield from self.client.get('/')\n            self.assertEqual(response.text, \"async response\")", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tumb1er/aiohttp_tests/", "keywords": null, "license": "Beer License", "maintainer": null, "maintainer_email": null, "name": "aiohttp_tests", "package_url": "https://pypi.org/project/aiohttp_tests/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/aiohttp_tests/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tumb1er/aiohttp_tests/"}, "release_url": "https://pypi.org/project/aiohttp_tests/1.0.4/", "requires_dist": null, "requires_python": null, "summary": "unittest helper for aiohttp", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Unittest helper utilities for aiohttp-based applications.</p>\n<p>Example usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">unittest</span> <span class=\"kn\">import</span> <span class=\"n\">mock</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp_tests</span> <span class=\"k\">as</span> <span class=\"nn\">at</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">Mock</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@at</span><span class=\"o\">.</span><span class=\"n\">override_settings</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">SETTINGS_VALUE</span><span class=\"o\">=</span><span class=\"s1\">'new_value'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTestCase</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">BaseTestCase</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Aiohttp tests utilities example\"\"\"</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sample_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sample_async_method</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sample_async_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'OK'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">init_app</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" You must initialize aiohttp application correctly.\"\"\"</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sample_view</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">init_patchers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">init_patchers</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Short alias for mock.patch that stores patcher and mock objects</span>\n        <span class=\"c1\"># locally. Patchers are stopped automatically on teardown.</span>\n        <span class=\"c1\"># Method is called by BaseTestCase.setUp</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"s1\">'time.time'</span><span class=\"p\">,</span> <span class=\"n\">return_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setUp</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">testMockUtils</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Shows usage of get_mock and get_patcher methods.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_mock</span><span class=\"p\">(</span><span class=\"s1\">'time.time'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_patcher</span><span class=\"p\">(</span><span class=\"s1\">'time.time'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertGreater</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">testOverrideSettings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Django-style override_settings decorator for any settings module.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SETTINGS_VALUE</span><span class=\"p\">,</span> <span class=\"s1\">'new_value'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">override_settings</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">SETTINGS_VALUE</span><span class=\"o\">=</span><span class=\"s1\">'other_value'</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SETTINGS_VALUE</span><span class=\"p\">,</span> <span class=\"s1\">'other_value'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">testSyncClient</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Synchronous execution of requests, with new event loop every time.\n        Other HTTP methods, HTTP headers, request body or form/data are also\n        supported.\n        \"\"\"</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Accept'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'content-type'</span><span class=\"p\">),</span>\n                         <span class=\"s1\">'text/plain; charset=utf-8'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># other HTTP methods</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'POST body'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"mi\">405</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># urlencoded form/data also supported</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'PUT'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'field'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"mi\">405</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@at</span><span class=\"o\">.</span><span class=\"n\">async_test</span>\n    <span class=\"k\">def</span> <span class=\"nf\">testAsyncClient</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" test client requests could be done async, if needed.\"\"\"</span>\n\n        <span class=\"c1\"># you can mock any coroutine to return a 'done' Future with custom</span>\n        <span class=\"c1\"># result.</span>\n        <span class=\"n\">done_future</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">empty_result</span><span class=\"p\">(</span><span class=\"s2\">\"async response\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># mock.patck.object shortcut</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mock_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">'sample_async_method'</span><span class=\"p\">,</span> <span class=\"n\">return_value</span><span class=\"o\">=</span><span class=\"n\">done_future</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s2\">\"async response\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 2968413, "releases": {"0.1.1": [], "0.2.3": [{"comment_text": "", "digests": {"md5": "b2c135fe6fccf3ff79194846a69eb5a5", "sha256": "4ea358a8154d5413eb58877926f1685618708fbc68c10dda2662bef8c6892808"}, "downloads": -1, "filename": "aiohttp_tests-0.2.3.tar.gz", "has_sig": false, "md5_digest": "b2c135fe6fccf3ff79194846a69eb5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4817, "upload_time": "2016-08-12T09:35:02", "upload_time_iso_8601": "2016-08-12T09:35:02.279079Z", "url": "https://files.pythonhosted.org/packages/2d/08/7e9db4a8e6ea7d61ab08f66baa82a509961a051ca88cad07495a78808994/aiohttp_tests-0.2.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d9787743ee9c5b935ad5e1c4ac805e7e", "sha256": "510a2045e1527a7b4a2d3571da7f043672e828f47de87d54a0359316ebe6e5fe"}, "downloads": -1, "filename": "aiohttp_tests-0.3.1.tar.gz", "has_sig": false, "md5_digest": "d9787743ee9c5b935ad5e1c4ac805e7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5012, "upload_time": "2016-08-12T13:58:54", "upload_time_iso_8601": "2016-08-12T13:58:54.763955Z", "url": "https://files.pythonhosted.org/packages/0c/4c/9b887fe2c6c84c495ba773324abf3c044dff70b424f1ffa83d0e2ee31ed1/aiohttp_tests-0.3.1.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b78778b1ff8c657143ed5096527aa351", "sha256": "256efb06a378450684013e5da92054d0a5252439f14a51616433976e6cd85b1e"}, "downloads": -1, "filename": "aiohttp_tests-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b78778b1ff8c657143ed5096527aa351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5117, "upload_time": "2016-08-16T11:21:53", "upload_time_iso_8601": "2016-08-16T11:21:53.130652Z", "url": "https://files.pythonhosted.org/packages/8b/be/6dfc5f5b5406d1736ab1937bfa12037fe4f9008a8daec77e866a3aa1a594/aiohttp_tests-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "e4b2518e87aad8a57c4ea83d7fd7e527", "sha256": "412432a95e1acafbf16dfdb60b0ca3630aa6ed4dbc3c8d7014f68691b3353200"}, "downloads": -1, "filename": "aiohttp_tests-0.3.4.tar.gz", "has_sig": false, "md5_digest": "e4b2518e87aad8a57c4ea83d7fd7e527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5121, "upload_time": "2016-09-16T13:19:55", "upload_time_iso_8601": "2016-09-16T13:19:55.039616Z", "url": "https://files.pythonhosted.org/packages/3c/51/3be66946e0bba6b304dc5f049017511ae8e656c01bbe6fb61bb39006bfce/aiohttp_tests-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9f696833224e5afd1c2093aa03b80578", "sha256": "797aed52716f235202f30955d4b28b873b882e1cc665a08a1dc67d82aa9ac0b4"}, "downloads": -1, "filename": "aiohttp_tests-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9f696833224e5afd1c2093aa03b80578", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5107, "upload_time": "2016-09-21T12:37:48", "upload_time_iso_8601": "2016-09-21T12:37:48.421435Z", "url": "https://files.pythonhosted.org/packages/b2/43/699809905233575730d0318397b49f288a8e47e2439cc3c0cb4d30b8a25f/aiohttp_tests-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "1ae2e55cc9e4954d05e907abc240c0f0", "sha256": "f369c39373115fd6b426410921775bad29a3528bb880bbcc99986b4085051fe5"}, "downloads": -1, "filename": "aiohttp_tests-0.4.1.tar.gz", "has_sig": false, "md5_digest": "1ae2e55cc9e4954d05e907abc240c0f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5126, "upload_time": "2016-09-30T07:22:17", "upload_time_iso_8601": "2016-09-30T07:22:17.552127Z", "url": "https://files.pythonhosted.org/packages/2c/3f/742a0a4c2fb7b30501589d3bd1c6f7153b2307880b4f8a622abe1e91d565/aiohttp_tests-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "1eb61d09bcb000578acd46f6de7432f2", "sha256": "a3cc7c893c7d5a847a1a97ec457ad38ac5131f46cdb2204db5da34ce11c6868d"}, "downloads": -1, "filename": "aiohttp_tests-0.4.2.tar.gz", "has_sig": false, "md5_digest": "1eb61d09bcb000578acd46f6de7432f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5163, "upload_time": "2016-09-30T14:05:29", "upload_time_iso_8601": "2016-09-30T14:05:29.639271Z", "url": "https://files.pythonhosted.org/packages/08/63/349c9a195a82453ec3a5b8b0cf912d34b0fb208e1394c036c3d31b685faa/aiohttp_tests-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "76340f32a115feacb2483357b02c19fc", "sha256": "eff1406df7b55a2461deddd85e8da7ff44366b2bd5a89443cd1a5095765340bc"}, "downloads": -1, "filename": "aiohttp_tests-0.5.0.tar.gz", "has_sig": false, "md5_digest": "76340f32a115feacb2483357b02c19fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5023, "upload_time": "2016-10-07T12:58:34", "upload_time_iso_8601": "2016-10-07T12:58:34.761581Z", "url": "https://files.pythonhosted.org/packages/7d/60/a47aa8fb6fa4c609e4a200aa9da4840c700981c71b43cce1d73a7a936b64/aiohttp_tests-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "6350c21e0f592143731298ac07b02e17", "sha256": "4a95fd16ed2920d2d691cbaeb0f5cf8667bdabd9477bca190b4624ae6c2170c1"}, "downloads": -1, "filename": "aiohttp_tests-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6350c21e0f592143731298ac07b02e17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5154, "upload_time": "2017-02-27T07:11:34", "upload_time_iso_8601": "2017-02-27T07:11:34.499413Z", "url": "https://files.pythonhosted.org/packages/34/d1/5fb22283b29f3fab03f9af742b5806085793a64a5535560ad358138489f7/aiohttp_tests-0.6.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7bae55f579501d2388a364759c419d10", "sha256": "4e2e0554255756536e40831ec2863ecf98e35795fb1fbe44f208951c161a1965"}, "downloads": -1, "filename": "aiohttp_tests-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7bae55f579501d2388a364759c419d10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4440, "upload_time": "2017-04-19T07:18:28", "upload_time_iso_8601": "2017-04-19T07:18:28.649171Z", "url": "https://files.pythonhosted.org/packages/07/90/2193b3075b475dec11c4e2f34380fa714a9e025585f9e1e437e76568dcd6/aiohttp_tests-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c7c519ad12cbee9baa0a9886a79dd948", "sha256": "7d005101c0f2c6033588bbd0a62525de4d4e41110fcbd90b26e43fe4109ecb21"}, "downloads": -1, "filename": "aiohttp_tests-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c7c519ad12cbee9baa0a9886a79dd948", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4444, "upload_time": "2017-04-19T07:37:08", "upload_time_iso_8601": "2017-04-19T07:37:08.029472Z", "url": "https://files.pythonhosted.org/packages/dc/f4/15380ec96a487568497e3d1ee7934cf9c97e53af4180724d44342479a6a8/aiohttp_tests-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "06beac9d5248b37afaa517351ce0c090", "sha256": "e4257631c80ca3fa435fb7f9321073ed223b16c8d60fbb837ff790924ef337fa"}, "downloads": -1, "filename": "aiohttp_tests-1.0.2.tar.gz", "has_sig": false, "md5_digest": "06beac9d5248b37afaa517351ce0c090", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4447, "upload_time": "2017-04-19T08:00:02", "upload_time_iso_8601": "2017-04-19T08:00:02.089585Z", "url": "https://files.pythonhosted.org/packages/36/fd/e8da5459af67bedf66ac14f7f89be16caa865d335e49223231d47ebb080d/aiohttp_tests-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "25dba2ebb24c0c68916869a91cc1f393", "sha256": "0b1b2f87789d4791141a53fd3798e2f4b67fd7bad15ee9a04b3d666222454ba5"}, "downloads": -1, "filename": "aiohttp_tests-1.0.3.tar.gz", "has_sig": false, "md5_digest": "25dba2ebb24c0c68916869a91cc1f393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4445, "upload_time": "2017-04-19T09:03:38", "upload_time_iso_8601": "2017-04-19T09:03:38.475142Z", "url": "https://files.pythonhosted.org/packages/26/f0/6f57a507d4cf92165d318c5180be6e67f05126883130a47d62acda7d89ba/aiohttp_tests-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "8e6a29d943f8792b2070c5ed078bbe71", "sha256": "7574e36888161b9a42975c75c6db7baa4084fd249679907cffa3cbfd7facfa2f"}, "downloads": -1, "filename": "aiohttp_tests-1.0.4.tar.gz", "has_sig": false, "md5_digest": "8e6a29d943f8792b2070c5ed078bbe71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4462, "upload_time": "2017-06-22T14:56:15", "upload_time_iso_8601": "2017-06-22T14:56:15.701830Z", "url": "https://files.pythonhosted.org/packages/07/2f/ae88338a39d999b7736edfa312ccc3cc273a1519babc6dbcb895bd76611d/aiohttp_tests-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e6a29d943f8792b2070c5ed078bbe71", "sha256": "7574e36888161b9a42975c75c6db7baa4084fd249679907cffa3cbfd7facfa2f"}, "downloads": -1, "filename": "aiohttp_tests-1.0.4.tar.gz", "has_sig": false, "md5_digest": "8e6a29d943f8792b2070c5ed078bbe71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4462, "upload_time": "2017-06-22T14:56:15", "upload_time_iso_8601": "2017-06-22T14:56:15.701830Z", "url": "https://files.pythonhosted.org/packages/07/2f/ae88338a39d999b7736edfa312ccc3cc273a1519babc6dbcb895bd76611d/aiohttp_tests-1.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:14 2020"}