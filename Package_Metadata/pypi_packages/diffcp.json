{"info": {"author": "Akshay Agrawal, Shane Barratt, Stephen Boyd, Enzo Busseti, Walaa Moursi", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/cvxgrp/diffcp.svg?branch=master)](https://travis-ci.org/cvxgrp/diffcp)\n\n# diffcp\n\n`diffcp` is a Python package for computing the derivative of a convex cone program, with respect to its problem data. The derivative is implemented as an abstract linear map, with methods for its forward application and its adjoint. \n\nThe implementation is based on the calculations in our paper [Differentiating through a cone program](http://web.stanford.edu/~boyd/papers/diff_cone_prog.html).\n\n### Installation\n`diffcp` is available on PyPI, as a source distribution. Install it with\n\n```bash\npip install diffcp\n```\n\nYou will need a C++11-capable compiler to build `diffcp`.\n\n`diffcp` requires:\n* [NumPy](https://github.com/numpy/numpy) >= 1.15\n* [SciPy](https://github.com/scipy/scipy) >= 1.10\n* [SCS](https://github.com/bodono/scs-python) >= 2.0.2\n* [pybind11](https://github.com/pybind/pybind11/tree/stable) >= 2.4\n* [threadpoolctl](https://github.com/joblib/threadpoolctl) >= 1.1\n* Python 3.x\n\n`diffcp` uses Eigen; Eigen operations can be automatically vectorized by compilers. To enable vectorization, install with\n\n```bash\nMARCH_NATIVE=1 pip install diffcp\n```\n\nOpenMP can be enabled by passing extra arguments to your compiler. For example, on linux, you can tell gcc to activate the OpenMP extension by specifying the flag \"-fopenmp\":\n\n```bash\nOPENMP_FLAG=\"-fopenmp\" pip install diffcp\n```\n\nTo enable both vectorization and OpenMP (on linux), use\n\n```bash\nMARCH_NATIVE=1 OPENMP_FLAG=\"-fopenmp\" pip install diffcp\n```\n\n### Cone programs\n`diffcp` differentiates through a primal-dual cone program pair. The primal problem must be expressed as \n\n```\nminimize        c'x\nsubject to      Ax + s = b\n                s in K\n```\nwhere  `x` and `s` are variables, `A`, `b` and `c` are the user-supplied problem data, and `K` is a user-defined convex cone. The corresponding dual problem is\n\n```\nminimize        b'y\nsubject to      A'y + c == 0\n                y in K^*\n```\n\nwith dual variable `y`.\n\n### Usage\n\n`diffcp` exposes the function\n\n```python\nsolve_and_derivative(A, b, c, cone_dict, warm_start=None, **kwargs).\n```\n\nThis function returns a primal-dual solution `x`, `y`, and `s`, along with\nfunctions for evaluating the derivative and its adjoint (transpose).\nThese functions respectively compute right and left multiplication of the derivative\nof the solution map at `A`, `b`, and `c` by a vector.\nIn the case that the problem is not solved, i.e. SCS returns something\nother than \"Solved\" or \"Solved/Innacurate\" for status, we raise\na `SolverError` Exception.\n\n#### Arguments\nThe arguments `A`, `b`, and `c` correspond to the problem data of a cone program.\n* `A` must be a [SciPy sparse CSC matrix](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html).\n* `b` and `c` must be NumPy arrays.\n* `cone_dict` is a dictionary that defines the convex cone `K`.\n* `warm_start` is an optional tuple `(x, y, s)` at which to warm-start SCS.\n* `**kwargs` are keyword arguments to forward to SCS (e.g., `verbose=True`).\n\nThese inputs must conform to the [SCS convention](https://github.com/bodono/scs-python) for problem data. The keys in `cone_dict` correspond to the cones, with\n* `diffcp.ZERO` for the zero cone,\n* `diffcp.POS` for the positive orthant,\n* `diffcp.SOC` for a product of SOC cones,\n* `diffcp.PSD` for a product of PSD cones, and\n* `diffcp.EXP` for a product of exponential cones.\n\nThe values in `cone_dict` denote the sizes of each cone; the values of `diffcp.SOC`, `diffcp.PSD`, and `diffcp.EXP` should be lists. The order of the rows of `A` must match the ordering of the cones given above. For more details, consult the [SCS documentation](https://github.com/cvxgrp/scs/blob/master/README.md).\n\n#### Return value\nThe function `solve_and_derivative` returns a tuple\n\n```python\n(x, y, s, derivative, adjoint_derivative)\n```\n\n* `x`, `y`, and `s` are a primal-dual solution.\n\n* `derivative` is a function that applies the derivative at `(A, b, c)` to perturbations `dA`, `db`, `dc`. It has the signature \n```derivative(dA, db, dc) -> dx, dy, ds```, where `dA` is a SciPy sparse CSC matrix with the same sparsity pattern as `A`, and `db` and `dc` are NumPy arrays. `dx`, `dy`, and `ds` are NumPy arrays, approximating the change in the primal-dual solution due to the perturbation.\n\n* `adjoint_derivative` is a function that applies the adjoint of the derivative to perturbations `dx`, `dy`, `ds`. It has the signature \n```adjoint_derivative(dx, dy, ds) -> dA, db, dc```, where `dx`, `dy`, and `ds` are NumPy arrays.\n\n#### Example\n```python\nimport numpy as np\nfrom scipy import sparse\n\nimport diffcp\n\ncone_dict = {\n    diffcp.ZERO: 3,\n    diffcp.POS: 3,\n    diffcp.SOC: [5]\n}\n\nm = 3 + 3 + 5\nn = 5\n\nA, b, c = diffcp.utils.random_cone_prog(m, n, cone_dict)\nx, y, s, D, DT = diffcp.solve_and_derivative(A, b, c, cone_dict)\n\n# evaluate the derivative\nnonzeros = A.nonzero()\ndata = 1e-4 * np.random.randn(A.size)\ndA = sparse.csc_matrix((data, nonzeros), shape=A.shape)\ndb = 1e-4 * np.random.randn(m)\ndc = 1e-4 * np.random.randn(n)\ndx, dy, ds = D(dA, db, dc)\n\n# evaluate the adjoint of the derivative\ndx = c\ndy = np.zeros(m)\nds = np.zeros(m)\ndA, db, dc = DT(dx, dy, ds)\n```\n\nFor more examples, including the SDP example described in the paper, see the [`examples`](examples/) directory.\n\n### Citing\nIf you wish to cite `diffcp`, please use the following BibTex:\n\n```\n@article{diffcp2019,\n    author       = {Agrawal, A. and Barratt, S. and Boyd, S. and Busseti, E. and Moursi, W.},\n    title        = {Differentiating through a Cone Program},\n    journal      = {Journal of Applied and Numerical Optimization},\n    year         = {2019},\n    volume       = {1},\n    number       = {2},\n    pages        = {107--115},\n}\n\n@misc{diffcp,\n    author       = {Agrawal, A. and Barratt, S. and Boyd, S. and Busseti, E. and Moursi, W.},\n    title        = {{diffcp}: differentiating through a cone program, version 1.0},\n    howpublished = {\\url{https://github.com/cvxgrp/diffcp}},\n    year         = 2019\n}\n```\n\nThe following thesis concurrently derived the mathematics behind differentiating cone programs.\n```\n@phdthesis{amos2019differentiable,\n  author       = {Brandon Amos},\n  title        = {{Differentiable Optimization-Based Modeling for Machine Learning}},\n  school       = {Carnegie Mellon University},\n  year         = 2019,\n  month        = May,\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/cvxgrp/diffcp/", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "diffcp", "package_url": "https://pypi.org/project/diffcp/", "platform": "", "project_url": "https://pypi.org/project/diffcp/", "project_urls": {"Homepage": "http://github.com/cvxgrp/diffcp/"}, "release_url": "https://pypi.org/project/diffcp/1.0.13/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/cvxgrp/diffcp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1c086d93483273fc084c21870854e8bd81139a6/68747470733a2f2f7472617669732d63692e6f72672f6376786772702f6469666663702e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>diffcp</h1>\n<p><code>diffcp</code> is a Python package for computing the derivative of a convex cone program, with respect to its problem data. The derivative is implemented as an abstract linear map, with methods for its forward application and its adjoint.</p>\n<p>The implementation is based on the calculations in our paper <a href=\"http://web.stanford.edu/%7Eboyd/papers/diff_cone_prog.html\" rel=\"nofollow\">Differentiating through a cone program</a>.</p>\n<h3>Installation</h3>\n<p><code>diffcp</code> is available on PyPI, as a source distribution. Install it with</p>\n<pre>pip install diffcp\n</pre>\n<p>You will need a C++11-capable compiler to build <code>diffcp</code>.</p>\n<p><code>diffcp</code> requires:</p>\n<ul>\n<li><a href=\"https://github.com/numpy/numpy\" rel=\"nofollow\">NumPy</a> &gt;= 1.15</li>\n<li><a href=\"https://github.com/scipy/scipy\" rel=\"nofollow\">SciPy</a> &gt;= 1.10</li>\n<li><a href=\"https://github.com/bodono/scs-python\" rel=\"nofollow\">SCS</a> &gt;= 2.0.2</li>\n<li><a href=\"https://github.com/pybind/pybind11/tree/stable\" rel=\"nofollow\">pybind11</a> &gt;= 2.4</li>\n<li><a href=\"https://github.com/joblib/threadpoolctl\" rel=\"nofollow\">threadpoolctl</a> &gt;= 1.1</li>\n<li>Python 3.x</li>\n</ul>\n<p><code>diffcp</code> uses Eigen; Eigen operations can be automatically vectorized by compilers. To enable vectorization, install with</p>\n<pre><span class=\"nv\">MARCH_NATIVE</span><span class=\"o\">=</span><span class=\"m\">1</span> pip install diffcp\n</pre>\n<p>OpenMP can be enabled by passing extra arguments to your compiler. For example, on linux, you can tell gcc to activate the OpenMP extension by specifying the flag \"-fopenmp\":</p>\n<pre><span class=\"nv\">OPENMP_FLAG</span><span class=\"o\">=</span><span class=\"s2\">\"-fopenmp\"</span> pip install diffcp\n</pre>\n<p>To enable both vectorization and OpenMP (on linux), use</p>\n<pre><span class=\"nv\">MARCH_NATIVE</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">OPENMP_FLAG</span><span class=\"o\">=</span><span class=\"s2\">\"-fopenmp\"</span> pip install diffcp\n</pre>\n<h3>Cone programs</h3>\n<p><code>diffcp</code> differentiates through a primal-dual cone program pair. The primal problem must be expressed as</p>\n<pre><code>minimize        c'x\nsubject to      Ax + s = b\n                s in K\n</code></pre>\n<p>where  <code>x</code> and <code>s</code> are variables, <code>A</code>, <code>b</code> and <code>c</code> are the user-supplied problem data, and <code>K</code> is a user-defined convex cone. The corresponding dual problem is</p>\n<pre><code>minimize        b'y\nsubject to      A'y + c == 0\n                y in K^*\n</code></pre>\n<p>with dual variable <code>y</code>.</p>\n<h3>Usage</h3>\n<p><code>diffcp</code> exposes the function</p>\n<pre><span class=\"n\">solve_and_derivative</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">cone_dict</span><span class=\"p\">,</span> <span class=\"n\">warm_start</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span><span class=\"o\">.</span>\n</pre>\n<p>This function returns a primal-dual solution <code>x</code>, <code>y</code>, and <code>s</code>, along with\nfunctions for evaluating the derivative and its adjoint (transpose).\nThese functions respectively compute right and left multiplication of the derivative\nof the solution map at <code>A</code>, <code>b</code>, and <code>c</code> by a vector.\nIn the case that the problem is not solved, i.e. SCS returns something\nother than \"Solved\" or \"Solved/Innacurate\" for status, we raise\na <code>SolverError</code> Exception.</p>\n<h4>Arguments</h4>\n<p>The arguments <code>A</code>, <code>b</code>, and <code>c</code> correspond to the problem data of a cone program.</p>\n<ul>\n<li><code>A</code> must be a <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html\" rel=\"nofollow\">SciPy sparse CSC matrix</a>.</li>\n<li><code>b</code> and <code>c</code> must be NumPy arrays.</li>\n<li><code>cone_dict</code> is a dictionary that defines the convex cone <code>K</code>.</li>\n<li><code>warm_start</code> is an optional tuple <code>(x, y, s)</code> at which to warm-start SCS.</li>\n<li><code>**kwargs</code> are keyword arguments to forward to SCS (e.g., <code>verbose=True</code>).</li>\n</ul>\n<p>These inputs must conform to the <a href=\"https://github.com/bodono/scs-python\" rel=\"nofollow\">SCS convention</a> for problem data. The keys in <code>cone_dict</code> correspond to the cones, with</p>\n<ul>\n<li><code>diffcp.ZERO</code> for the zero cone,</li>\n<li><code>diffcp.POS</code> for the positive orthant,</li>\n<li><code>diffcp.SOC</code> for a product of SOC cones,</li>\n<li><code>diffcp.PSD</code> for a product of PSD cones, and</li>\n<li><code>diffcp.EXP</code> for a product of exponential cones.</li>\n</ul>\n<p>The values in <code>cone_dict</code> denote the sizes of each cone; the values of <code>diffcp.SOC</code>, <code>diffcp.PSD</code>, and <code>diffcp.EXP</code> should be lists. The order of the rows of <code>A</code> must match the ordering of the cones given above. For more details, consult the <a href=\"https://github.com/cvxgrp/scs/blob/master/README.md\" rel=\"nofollow\">SCS documentation</a>.</p>\n<h4>Return value</h4>\n<p>The function <code>solve_and_derivative</code> returns a tuple</p>\n<pre><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">derivative</span><span class=\"p\">,</span> <span class=\"n\">adjoint_derivative</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<p><code>x</code>, <code>y</code>, and <code>s</code> are a primal-dual solution.</p>\n</li>\n<li>\n<p><code>derivative</code> is a function that applies the derivative at <code>(A, b, c)</code> to perturbations <code>dA</code>, <code>db</code>, <code>dc</code>. It has the signature\n<code>derivative(dA, db, dc) -&gt; dx, dy, ds</code>, where <code>dA</code> is a SciPy sparse CSC matrix with the same sparsity pattern as <code>A</code>, and <code>db</code> and <code>dc</code> are NumPy arrays. <code>dx</code>, <code>dy</code>, and <code>ds</code> are NumPy arrays, approximating the change in the primal-dual solution due to the perturbation.</p>\n</li>\n<li>\n<p><code>adjoint_derivative</code> is a function that applies the adjoint of the derivative to perturbations <code>dx</code>, <code>dy</code>, <code>ds</code>. It has the signature\n<code>adjoint_derivative(dx, dy, ds) -&gt; dA, db, dc</code>, where <code>dx</code>, <code>dy</code>, and <code>ds</code> are NumPy arrays.</p>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">sparse</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">diffcp</span>\n\n<span class=\"n\">cone_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">diffcp</span><span class=\"o\">.</span><span class=\"n\">ZERO</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">diffcp</span><span class=\"o\">.</span><span class=\"n\">POS</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">diffcp</span><span class=\"o\">.</span><span class=\"n\">SOC</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">5</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">diffcp</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">random_cone_prog</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">cone_dict</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">,</span> <span class=\"n\">DT</span> <span class=\"o\">=</span> <span class=\"n\">diffcp</span><span class=\"o\">.</span><span class=\"n\">solve_and_derivative</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">cone_dict</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># evaluate the derivative</span>\n<span class=\"n\">nonzeros</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">dA</span> <span class=\"o\">=</span> <span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span><span class=\"p\">((</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">nonzeros</span><span class=\"p\">),</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">dc</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">dA</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">dc</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># evaluate the adjoint of the derivative</span>\n<span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n<span class=\"n\">dy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">dA</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">dc</span> <span class=\"o\">=</span> <span class=\"n\">DT</span><span class=\"p\">(</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"p\">)</span>\n</pre>\n<p>For more examples, including the SDP example described in the paper, see the <a href=\"examples/\" rel=\"nofollow\"><code>examples</code></a> directory.</p>\n<h3>Citing</h3>\n<p>If you wish to cite <code>diffcp</code>, please use the following BibTex:</p>\n<pre><code>@article{diffcp2019,\n    author       = {Agrawal, A. and Barratt, S. and Boyd, S. and Busseti, E. and Moursi, W.},\n    title        = {Differentiating through a Cone Program},\n    journal      = {Journal of Applied and Numerical Optimization},\n    year         = {2019},\n    volume       = {1},\n    number       = {2},\n    pages        = {107--115},\n}\n\n@misc{diffcp,\n    author       = {Agrawal, A. and Barratt, S. and Boyd, S. and Busseti, E. and Moursi, W.},\n    title        = {{diffcp}: differentiating through a cone program, version 1.0},\n    howpublished = {\\url{https://github.com/cvxgrp/diffcp}},\n    year         = 2019\n}\n</code></pre>\n<p>The following thesis concurrently derived the mathematics behind differentiating cone programs.</p>\n<pre><code>@phdthesis{amos2019differentiable,\n  author       = {Brandon Amos},\n  title        = {{Differentiable Optimization-Based Modeling for Machine Learning}},\n  school       = {Carnegie Mellon University},\n  year         = 2019,\n  month        = May,\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6083929, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "56915171db43eeba918ef14a6d70a475", "sha256": "d6b3ca8d7b93ccdf7abfe76170860a8e5b8c6fed995f76a2b529ac2e4b3f8d74"}, "downloads": -1, "filename": "diffcp-1.0.0.tar.gz", "has_sig": false, "md5_digest": "56915171db43eeba918ef14a6d70a475", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14605, "upload_time": "2019-04-17T00:39:35", "upload_time_iso_8601": "2019-04-17T00:39:35.699146Z", "url": "https://files.pythonhosted.org/packages/a7/23/02c80878aaa56c24d9da33b0306dc9f0a85efdb381358773f986044124f6/diffcp-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "57932923d5f0f4e24c2b2b076740685c", "sha256": "ff706d96f8a33fe6ca814463582205f80bc232ed15646be55586de5c2116aad6"}, "downloads": -1, "filename": "diffcp-1.0.1.tar.gz", "has_sig": false, "md5_digest": "57932923d5f0f4e24c2b2b076740685c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14572, "upload_time": "2019-04-17T00:49:27", "upload_time_iso_8601": "2019-04-17T00:49:27.419249Z", "url": "https://files.pythonhosted.org/packages/29/ea/293018dbec68965ab168dac65d2414ad4daee8079974f1f5ac8ae1994868/diffcp-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "95aec648a842c0c18f995aa601016f9b", "sha256": "0905d0e827fed6115ea6bac5af767061e4eefd101d98b634c93c13e2b11664be"}, "downloads": -1, "filename": "diffcp-1.0.10.tar.gz", "has_sig": false, "md5_digest": "95aec648a842c0c18f995aa601016f9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4264701, "upload_time": "2019-10-23T06:29:48", "upload_time_iso_8601": "2019-10-23T06:29:48.703432Z", "url": "https://files.pythonhosted.org/packages/68/bb/34261508a6654733b1d8b110328e8870987bceae7c55065d3298df003f97/diffcp-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "04fcbac0e98c665c408b2bb5ddf2de8a", "sha256": "8ce86aafae7da611cbe0c88a07fc820c3e6177990e514e1166967677fecec9cf"}, "downloads": -1, "filename": "diffcp-1.0.11.tar.gz", "has_sig": false, "md5_digest": "04fcbac0e98c665c408b2bb5ddf2de8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2143882, "upload_time": "2019-10-23T20:56:22", "upload_time_iso_8601": "2019-10-23T20:56:22.538585Z", "url": "https://files.pythonhosted.org/packages/cd/98/bf10236d0b0f1b8aa8a0694afb1476940fdcfb78d7802239352fe559e340/diffcp-1.0.11.tar.gz", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "b5716856cb28dd86200e2e2b8720c269", "sha256": "4469e5f1de42fd8fda1a0fc179d18bb4453abda227ae26869c78bcfed53eca6b"}, "downloads": -1, "filename": "diffcp-1.0.12.tar.gz", "has_sig": false, "md5_digest": "b5716856cb28dd86200e2e2b8720c269", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2144508, "upload_time": "2019-10-28T18:28:01", "upload_time_iso_8601": "2019-10-28T18:28:01.162829Z", "url": "https://files.pythonhosted.org/packages/71/15/13ed6834f033365481439af339fdc1e184c7dc08b38fc6d1031494915baf/diffcp-1.0.12.tar.gz", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "b2141f756dec3f8846d32ceedd481315", "sha256": "ddb55efcf4d7d93558a3bf0b32e4dee9892d5b11da314d9e0396ac2c5993c900"}, "downloads": -1, "filename": "diffcp-1.0.13.tar.gz", "has_sig": false, "md5_digest": "b2141f756dec3f8846d32ceedd481315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2144933, "upload_time": "2019-11-06T00:37:35", "upload_time_iso_8601": "2019-11-06T00:37:35.871941Z", "url": "https://files.pythonhosted.org/packages/57/a2/324055d1c788eb410851feea6fca51ca8677789460cdfe7c8bc802dd4e58/diffcp-1.0.13.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ff357971a1579147a09ee8faa525a947", "sha256": "8c23d2fab084a058095f9686db42a82710f37c089af06648864bace726728cb1"}, "downloads": -1, "filename": "diffcp-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ff357971a1579147a09ee8faa525a947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14002, "upload_time": "2019-04-17T05:52:20", "upload_time_iso_8601": "2019-04-17T05:52:20.199627Z", "url": "https://files.pythonhosted.org/packages/d5/5d/cf45fc07d26ee045fbf8df6623303aaf87c591655c526ef9ce7c397eec19/diffcp-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "41ca4e3812ab65844014fe0ec6852506", "sha256": "cc67d3431cf8c6f0e2378e6504b8431a10291cdf1bc11ab88134599af24e862c"}, "downloads": -1, "filename": "diffcp-1.0.3.tar.gz", "has_sig": false, "md5_digest": "41ca4e3812ab65844014fe0ec6852506", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11941, "upload_time": "2019-05-14T00:42:34", "upload_time_iso_8601": "2019-05-14T00:42:34.763296Z", "url": "https://files.pythonhosted.org/packages/9b/9c/6a9ccc0dcbad29bc781b8467c6d773958dc2382d94d1129c32d0d42c2206/diffcp-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "806b0ebc18bbade4a925c10a65c99838", "sha256": "87fde733e4e4940f8feec104da31ca10ddbd5af3bb193d2f079e198a6f5cd1a8"}, "downloads": -1, "filename": "diffcp-1.0.4.tar.gz", "has_sig": false, "md5_digest": "806b0ebc18bbade4a925c10a65c99838", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12231, "upload_time": "2019-07-23T03:55:29", "upload_time_iso_8601": "2019-07-23T03:55:29.883179Z", "url": "https://files.pythonhosted.org/packages/a8/6e/181ee23386b6637edaaff39c35b839912f74ddb3eca4745bc87f2324b01d/diffcp-1.0.4.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "82534675ad3268671a72ce4edff60e00", "sha256": "105d15a3cbf712db73959342e5fb33fda8fdee6564ab4e3258f64c2426f51c85"}, "downloads": -1, "filename": "diffcp-1.0.6.tar.gz", "has_sig": false, "md5_digest": "82534675ad3268671a72ce4edff60e00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4263483, "upload_time": "2019-10-18T21:39:44", "upload_time_iso_8601": "2019-10-18T21:39:44.198205Z", "url": "https://files.pythonhosted.org/packages/c7/eb/2c4f9c5d8fe2391638b2b1d0f34ebb3f274366bd9a7a107289954cee8ffc/diffcp-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "d783a1e0a37faa620d1269df36f4878f", "sha256": "4f9624960826af8706b68ff34f3bac8ebaf7988be0721d73d1909b126998b7a2"}, "downloads": -1, "filename": "diffcp-1.0.7.tar.gz", "has_sig": false, "md5_digest": "d783a1e0a37faa620d1269df36f4878f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4264067, "upload_time": "2019-10-22T19:17:07", "upload_time_iso_8601": "2019-10-22T19:17:07.021437Z", "url": "https://files.pythonhosted.org/packages/20/b0/40fc720f8d9c130d4c81e089aa408e4c77e5441b8ebad899a2b379fa323e/diffcp-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "93646c8e9d70943b2b95b91ddf900d75", "sha256": "5afe1656f2ed00dbd735ed55fc57dc0d2078d1bf23e8f0e162369c5fc6b92f4d"}, "downloads": -1, "filename": "diffcp-1.0.8.tar.gz", "has_sig": false, "md5_digest": "93646c8e9d70943b2b95b91ddf900d75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4264045, "upload_time": "2019-10-22T21:24:19", "upload_time_iso_8601": "2019-10-22T21:24:19.337269Z", "url": "https://files.pythonhosted.org/packages/32/fe/50def080a3809f9e5915b717ac89ff3fec7b9ac39f53e12ba7207f940424/diffcp-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "ba1deb713cb9cdd4baaaebda12d91088", "sha256": "a53dce1c0aefec41202ad57f9cca1996bb285973949c0e42284b97b8bc32b379"}, "downloads": -1, "filename": "diffcp-1.0.9.tar.gz", "has_sig": false, "md5_digest": "ba1deb713cb9cdd4baaaebda12d91088", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4264226, "upload_time": "2019-10-23T05:10:54", "upload_time_iso_8601": "2019-10-23T05:10:54.566941Z", "url": "https://files.pythonhosted.org/packages/7b/a7/bcfb652c3f335057fd0ca57d86278590d1ff7f912b477efe8bac5a4669f0/diffcp-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2141f756dec3f8846d32ceedd481315", "sha256": "ddb55efcf4d7d93558a3bf0b32e4dee9892d5b11da314d9e0396ac2c5993c900"}, "downloads": -1, "filename": "diffcp-1.0.13.tar.gz", "has_sig": false, "md5_digest": "b2141f756dec3f8846d32ceedd481315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2144933, "upload_time": "2019-11-06T00:37:35", "upload_time_iso_8601": "2019-11-06T00:37:35.871941Z", "url": "https://files.pythonhosted.org/packages/57/a2/324055d1c788eb410851feea6fca51ca8677789460cdfe7c8bc802dd4e58/diffcp-1.0.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:29 2020"}