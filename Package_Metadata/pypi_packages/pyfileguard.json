{"info": {"author": "k.r. goger", "author_email": "k.r.goger+pyfileguard@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "\n# File Guard and Large File Guard\n\nsupport for preserving the old content of a file.\nsupport for large files provide access via `seek()` to a specific file position.\n\n# use in own code\n\nuse `with context` and `rollback()` to rewind the changes done.\n\n# when to use in own code\n\nthere are some typical use cases, such as:\n- in test scenarios when you need to rollback for the next test case\n- when wrting changed config files from your code (falls back to old state)\n- when randomly accessing larger files in binary mode\n\n\n# code for small files\n\nfor small files `FileGuard` makes a copy using a `TemporaryFile`.\nin error case or when calling `rollback()` the file is copied back.\n\n\n    import shutil\n    from fileguard import FileGuard, LargeFileGuard, dumpbim\n\n\n    def sample():\n\n        # copy test file\n        shutil.copy2(\"monty.bak.txt\",\"monty.txt\")\n\n        try:\n            with FileGuard(\"monty.txt\",mode=\"+w\",\n                           always_restore=False,\n                           blksize = 512,\n                           debug=True,\n                           ) as f:\n                print(\"before write\",f)\n                f.write(\"content gone\")\n                f.flush()\n                print(\"after write\",f)\n\n                raise Exception(\"something went wrong\")\n\n        except Exception as ex:\n            print(\"err\", ex)\n\n        with open( \"monty.txt\", \"rb\" ) as f:\n            c = f.read()\n            print(\"---file content---\")\n            print(c)\n\n\n# code for large files\n\nfor large files `LargeFileGuard` provides methods like `seek()` and `tell()`\nto set the file pointer position. when writing to `LargeFileGuard` it preserves\nthe content of the underlying file by writing to a journal or \"before-image\" file.\nin error case or by calling `rollback()` the changes are rewinded.\n\n\n    sample2():\n\n        # copy test file\n        shutil.copy2(\"monty.bak.txt\",\"monty.txt\")\n\n        try:\n            with LargeFileGuard(\"monty.txt\",\"r+\",\n                                    always_restore=False, # always rewind\n                                    keep_bim=True, # keep bim file, deleted otherwise\n                                    blksize=512,\n                                    debug=True,\n                                ) as f:\n                print(\"before write\",f)\n                f.write(\"!!! new content at 0 !!!\")\n                f.seek(100)\n                f.write(\"!!! new content at 100 !!!\")\n                f.seek( 0, 2 )\n                f.write(\"!!! new ending !!!\")\n                f.flush()\n                print(\"after write\",f)\n\n                f.seek(0)\n                c = f.read()\n                print(c)\n\n                # uncomment want to test...\n                f.rollback()\n                #raise Exception(\"something went wrong\")\n\n        except Exception as ex:\n\n            print(\"err\", ex)\n\n        with open( \"monty.txt\", \"rb\" ) as f:\n            c = f.read()\n            print(\"---file content---\")\n            print(c)\n\n        print( dumpbim(\"monty.txt\") )\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kr-g/pyfileguard", "keywords": "utility test testing file handling bim guard before-image", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyfileguard", "package_url": "https://pypi.org/project/pyfileguard/", "platform": "", "project_url": "https://pypi.org/project/pyfileguard/", "project_urls": {"Homepage": "https://github.com/kr-g/pyfileguard"}, "release_url": "https://pypi.org/project/pyfileguard/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "File Guard and Large File Guard for preserving file content", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>File Guard and Large File Guard</h1>\n<p>support for preserving the old content of a file.\nsupport for large files provide access via <code>seek()</code> to a specific file position.</p>\n<h1>use in own code</h1>\n<p>use <code>with context</code> and <code>rollback()</code> to rewind the changes done.</p>\n<h1>when to use in own code</h1>\n<p>there are some typical use cases, such as:</p>\n<ul>\n<li>in test scenarios when you need to rollback for the next test case</li>\n<li>when wrting changed config files from your code (falls back to old state)</li>\n<li>when randomly accessing larger files in binary mode</li>\n</ul>\n<h1>code for small files</h1>\n<p>for small files <code>FileGuard</code> makes a copy using a <code>TemporaryFile</code>.\nin error case or when calling <code>rollback()</code> the file is copied back.</p>\n<pre><code>import shutil\nfrom fileguard import FileGuard, LargeFileGuard, dumpbim\n\n\ndef sample():\n\n    # copy test file\n    shutil.copy2(\"monty.bak.txt\",\"monty.txt\")\n\n    try:\n        with FileGuard(\"monty.txt\",mode=\"+w\",\n                       always_restore=False,\n                       blksize = 512,\n                       debug=True,\n                       ) as f:\n            print(\"before write\",f)\n            f.write(\"content gone\")\n            f.flush()\n            print(\"after write\",f)\n\n            raise Exception(\"something went wrong\")\n\n    except Exception as ex:\n        print(\"err\", ex)\n\n    with open( \"monty.txt\", \"rb\" ) as f:\n        c = f.read()\n        print(\"---file content---\")\n        print(c)\n</code></pre>\n<h1>code for large files</h1>\n<p>for large files <code>LargeFileGuard</code> provides methods like <code>seek()</code> and <code>tell()</code>\nto set the file pointer position. when writing to <code>LargeFileGuard</code> it preserves\nthe content of the underlying file by writing to a journal or \"before-image\" file.\nin error case or by calling <code>rollback()</code> the changes are rewinded.</p>\n<pre><code>sample2():\n\n    # copy test file\n    shutil.copy2(\"monty.bak.txt\",\"monty.txt\")\n\n    try:\n        with LargeFileGuard(\"monty.txt\",\"r+\",\n                                always_restore=False, # always rewind\n                                keep_bim=True, # keep bim file, deleted otherwise\n                                blksize=512,\n                                debug=True,\n                            ) as f:\n            print(\"before write\",f)\n            f.write(\"!!! new content at 0 !!!\")\n            f.seek(100)\n            f.write(\"!!! new content at 100 !!!\")\n            f.seek( 0, 2 )\n            f.write(\"!!! new ending !!!\")\n            f.flush()\n            print(\"after write\",f)\n\n            f.seek(0)\n            c = f.read()\n            print(c)\n\n            # uncomment want to test...\n            f.rollback()\n            #raise Exception(\"something went wrong\")\n\n    except Exception as ex:\n\n        print(\"err\", ex)\n\n    with open( \"monty.txt\", \"rb\" ) as f:\n        c = f.read()\n        print(\"---file content---\")\n        print(c)\n\n    print( dumpbim(\"monty.txt\") )\n</code></pre>\n\n          </div>"}, "last_serial": 6368341, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "6ac1d96faaa07f51eb65fbe8bb6c6b7d", "sha256": "5dca66a15dbfbb6c3e0fae4a6dee63d5f2eaa2d266f4cd2078cd339689e36123"}, "downloads": -1, "filename": "pyfileguard-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6ac1d96faaa07f51eb65fbe8bb6c6b7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5757, "upload_time": "2019-12-28T13:06:28", "upload_time_iso_8601": "2019-12-28T13:06:28.940041Z", "url": "https://files.pythonhosted.org/packages/03/83/7d4bea4c2d6d6667ac0801f24f994a65d183f043f2b2570abff308629816/pyfileguard-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31d7f19ff3fe098bdd4de3bfddc8e609", "sha256": "c2a07667de850096c9d949619f154a2127b2db690676d1ac6360a14eb592e680"}, "downloads": -1, "filename": "pyfileguard-0.0.3.tar.gz", "has_sig": false, "md5_digest": "31d7f19ff3fe098bdd4de3bfddc8e609", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4143, "upload_time": "2019-12-28T13:06:31", "upload_time_iso_8601": "2019-12-28T13:06:31.535326Z", "url": "https://files.pythonhosted.org/packages/8d/eb/c65672a6a78c17cda8ae3de0de384a1049fd0e7630b866ec4a584f8e004c/pyfileguard-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ac1d96faaa07f51eb65fbe8bb6c6b7d", "sha256": "5dca66a15dbfbb6c3e0fae4a6dee63d5f2eaa2d266f4cd2078cd339689e36123"}, "downloads": -1, "filename": "pyfileguard-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6ac1d96faaa07f51eb65fbe8bb6c6b7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5757, "upload_time": "2019-12-28T13:06:28", "upload_time_iso_8601": "2019-12-28T13:06:28.940041Z", "url": "https://files.pythonhosted.org/packages/03/83/7d4bea4c2d6d6667ac0801f24f994a65d183f043f2b2570abff308629816/pyfileguard-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31d7f19ff3fe098bdd4de3bfddc8e609", "sha256": "c2a07667de850096c9d949619f154a2127b2db690676d1ac6360a14eb592e680"}, "downloads": -1, "filename": "pyfileguard-0.0.3.tar.gz", "has_sig": false, "md5_digest": "31d7f19ff3fe098bdd4de3bfddc8e609", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4143, "upload_time": "2019-12-28T13:06:31", "upload_time_iso_8601": "2019-12-28T13:06:31.535326Z", "url": "https://files.pythonhosted.org/packages/8d/eb/c65672a6a78c17cda8ae3de0de384a1049fd0e7630b866ec4a584f8e004c/pyfileguard-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:49 2020"}