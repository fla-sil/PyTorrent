{"info": {"author": "laughingman7743", "author_email": "laughingman7743@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Java", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database :: Front-Ends"], "description": ".. image:: https://img.shields.io/pypi/pyversions/PyAthenaJDBC.svg\n    :target: https://pypi.python.org/pypi/PyAthenaJDBC/\n\n.. image:: https://travis-ci.org/laughingman7743/PyAthenaJDBC.svg?branch=master\n    :target: https://travis-ci.org/laughingman7743/PyAthenaJDBC\n\n.. image:: https://codecov.io/gh/laughingman7743/PyAthenaJDBC/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/laughingman7743/PyAthenaJDBC\n\n.. image:: https://img.shields.io/pypi/l/PyAthenaJDBC.svg\n    :target: https://github.com/laughingman7743/PyAthenaJDBC/blob/master/LICENSE\n\n\nPyAthenaJDBC\n============\n\nPyAthenaJDBC is a Python `DB API 2.0 (PEP 249)`_ compliant wrapper for `Amazon Athena JDBC driver`_.\n\n.. _`DB API 2.0 (PEP 249)`: https://www.python.org/dev/peps/pep-0249/\n.. _`Amazon Athena JDBC driver`: http://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html\n\nRequirements\n------------\n\n* Python\n\n  - CPython 2,7, 3,4, 3.5, 3.6\n\n* Java\n\n  - Java >= 8\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install PyAthenaJDBC\n\nExtra packages:\n\n+---------------+------------------------------------------+----------+\n| Package       | Install command                          | Version  |\n+===============+==========================================+==========+\n| Pandas        | ``pip install PyAthenaJDBC[Pandas]``     | >=0.19.0 |\n+---------------+------------------------------------------+----------+\n| SQLAlchemy    | ``pip install PyAthenaJDBC[SQLAlchemy]`` | >=1.0.0  |\n+---------------+------------------------------------------+----------+\n\nUsage\n-----\n\nBasic usage\n~~~~~~~~~~~\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM one_row\n            \"\"\")\n            print(cursor.description)\n            print(cursor.fetchall())\n    finally:\n        conn.close()\n\nCursor iteration\n~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM many_rows LIMIT 10\n            \"\"\")\n            for row in cursor:\n                print(row)\n    finally:\n        conn.close()\n\nQuery with parameter\n~~~~~~~~~~~~~~~~~~~~\n\nSupported `DB API paramstyle`_ is only ``PyFormat``.\n``PyFormat`` only supports `named placeholders`_ with old ``%`` operator style and parameters specify dictionary format.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT col_string FROM one_row_complex\n            WHERE col_string = %(param)s\n            \"\"\", {'param': 'a string'})\n            print(cursor.fetchall())\n    finally:\n        conn.close()\n\nif ``%`` character is contained in your query, it must be escaped with ``%%`` like the following:\n\n.. code:: sql\n\n    SELECT col_string FROM one_row_complex\n    WHERE col_string = %(param)s OR col_string LIKE 'a%%'\n\n.. _`DB API paramstyle`: https://www.python.org/dev/peps/pep-0249/#paramstyle\n.. _`named placeholders`: https://pyformat.info/#named_placeholders\n\nJVM Options\n~~~~~~~~~~~\n\nIn the connect method or connection object, you can specify JVM options with a string array.\n\nYou can increase the JVM heap size like the following:\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   jvm_options=['-Xms1024m', '-Xmx4096m'])\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM many_rows\n            \"\"\")\n            print(cursor.fetchall())\n    finally:\n        conn.close()\n\nSQLAlchemy\n~~~~~~~~~~\n\nInstall SQLAlchemy with ``pip install SQLAlchemy>=1.0.0`` or ``pip install PyAthenaJDBC[SQLAlchemy]``.\nSupported SQLAlchemy is 1.0.0 or higher.\n\n.. code:: python\n\n    import contextlib\n    from urllib.parse import quote_plus  # PY2: from urllib import quote_plus\n    from sqlalchemy.engine import create_engine\n    from sqlalchemy.sql.expression import select\n    from sqlalchemy.sql.functions import func\n    from sqlalchemy.sql.schema import Table, MetaData\n\n    conn_str = 'awsathena+jdbc://{access_key}:{secret_key}@athena.{region_name}.amazonaws.com:443/'\\\n               '{schema_name}?s3_staging_dir={s3_staging_dir}'\n    engine = create_engine(conn_str.format(\n        access_key=quote_plus('YOUR_ACCESS_KEY'),\n        secret_key=quote_plus('YOUR_SECRET_ACCESS_KEY'),\n        region_name='us-west-2',\n        schema_name='default',\n        s3_staging_dir=quote_plus('s3://YOUR_S3_BUCKET/path/to/')))\n    try:\n        with contextlib.closing(engine.connect()) as conn:\n            many_rows = Table('many_rows', MetaData(bind=engine), autoload=True)\n            print(select([func.count('*')], from_obj=many_rows).scalar())\n    finally:\n        engine.dispose()\n\nThe connection string has the following format:\n\n.. code:: python\n\n    awsathena+jdbc://{access_key}:{secret_key}@athena.{region_name}.amazonaws.com:443/{schema_name}?s3_staging_dir={s3_staging_dir}&driver_path={driver_path}&...\n\nNOTE: ``s3_staging_dir`` requires quote. If ``access_key``, ``secret_key`` and other parameter contain special characters, quote is also required.\n\nPandas\n~~~~~~\n\nMinimal example for Pandas DataFrame:\n\n.. code:: python\n\n    from pyathenajdbc import connect\n    import pandas as pd\n\n    conn = connect(access_key='YOUR_ACCESS_KEY_ID',\n                   secret_key='YOUR_SECRET_ACCESS_KEY',\n                   s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   jvm_path='/path/to/jvm')  # optional, as used by JPype\n    df = pd.read_sql(\"SELECT * FROM many_rows LIMIT 10\", conn)\n\nAs Pandas DataFrame:\n\n.. code:: python\n\n    import contextlib\n    from pyathenajdbc import connect\n    from pyathenajdbc.util import as_pandas\n\n    with contextlib.closing(\n            connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/'\n                    region_name='us-west-2'))) as conn:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM many_rows\n            \"\"\")\n            df = as_pandas(cursor)\n    print(df.describe())\n\nExamples\n--------\n\nRedash_ query runner example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSee `examples/redash/athena.py`_\n\n.. _Redash: https://github.com/getredash/redash\n.. _`examples/redash/athena.py`: examples/redash/athena.py\n\nCredential\n----------\n\nSupport `AWS CLI credentials`_, `Properties file credentials`_ and `AWS credentials provider chain`_.\n\n.. _`AWS CLI credentials`: http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\n.. _`Properties file credentials`: http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/PropertiesFileCredentialsProvider.html\n.. _`AWS credentials provider chain`: http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n\nCredential Files\n~~~~~~~~~~~~~~~~\n\n~/.aws/credentials\n\n.. code:: cfg\n\n    [default]\n    aws_access_key_id=YOUR_ACCESS_KEY_ID\n    aws_secret_access_key=YOUR_SECRET_ACCESS_KEY\n\n~/.aws/config\n\n.. code:: cfg\n\n    [default]\n    region=us-west-2\n    output=json\n\nEnvironment variables\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID\n    $ export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY\n    $ export AWS_DEFAULT_REGION=us-west-2\n\nAdditional environment variable:\n\n.. code:: bash\n\n    $ export AWS_ATHENA_S3_STAGING_DIR=s3://YOUR_S3_BUCKET/path/to/\n\nProperties file credentials\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a property file of the following format.\n\n/path/to/AWSCredentials.properties\n\n.. code:: properties\n\n    accessKeyId:YOUR_ACCESS_KEY_ID\n    secretKey:YOUR_SECRET_ACCESS_KEY\n\nSpecify the property file path with ``credential_file`` of the connect method or connection object.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(credential_file='/path/to/AWSCredentials.properties',\n                   s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n\nPyAthenaJDBC uses the property file to authenticate Amazon Athena.\n\nAWS credentials provider chain\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSee `AWS credentials provider chain`_\n\n    AWS credentials provider chain that looks for credentials in this order:\n\n        * Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (RECOMMENDED since they are recognized by all the AWS SDKs and CLI except for .NET), or AWS_ACCESS_KEY and AWS_SECRET_KEY (only recognized by Java SDK)\n        * Java System Properties - aws.accessKeyId and aws.secretKey\n        * Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI\n        * Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable,\n        * Instance profile credentials delivered through the Amazon EC2 metadata service\n\nIn the connect method or connection object, you can connect by specifying at least ``s3_staging_dir`` and ``region_name``.\nIt is not necessary to specify ``access_key`` and ``secret_key``.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n\nTerraform_ Instance profile example:\n\nSee `examples/terraform/`_\n\n.. _Terraform: https://github.com/hashicorp/terraform\n.. _`examples/terraform/`: examples/terraform/\n\n\nTesting\n-------\n\nDepends on the following environment variables:\n\n.. code:: bash\n\n    $ export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID\n    $ export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY\n    $ export AWS_DEFAULT_REGION=us-west-2\n    $ export AWS_ATHENA_S3_STAGING_DIR=s3://YOUR_S3_BUCKET/path/to/\n\nRun test\n~~~~~~~~\n\n.. code:: bash\n\n    $ pip install pipenv\n    $ pipenv install --dev\n    $ pipenv run scripts/test_data/upload_test_data.sh\n    $ pipenv run pytest\n    $ pipenv run scripts/test_data/delete_test_data.sh\n\nRun test multiple Python versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ pip install pipenv\n    $ pipenv install --dev\n    $ pipenv run scripts/test_data/upload_test_data.sh\n    $ pyenv local 3.6.5 3.5.5 3.4.8 2.7.14\n    $ pipenv run tox\n    $ pipenv run scripts/test_data/delete_test_data.sh\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tanaya1234/PyAthenaJDBC-1", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "PyAthenaJDBC-qubole", "package_url": "https://pypi.org/project/PyAthenaJDBC-qubole/", "platform": "", "project_url": "https://pypi.org/project/PyAthenaJDBC-qubole/", "project_urls": {"Homepage": "https://github.com/tanaya1234/PyAthenaJDBC-1"}, "release_url": "https://pypi.org/project/PyAthenaJDBC-qubole/1.3.4/", "requires_dist": ["future", "jpype1 (>=0.6.0)", "botocore (>=1.0.0)", "pandas (>=0.19.0); extra == 'Pandas'", "SQLAlchemy (>=1.0.0); extra == 'SQLAlchemy'"], "requires_python": "", "summary": "Python DB API 2.0 (PEP 249) compliant wrapper for Amazon Athena JDBC driver", "version": "1.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/PyAthenaJDBC/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/PyAthenaJDBC.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0110f9263992bc80987ee8ab70eba6c49165071/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f5079417468656e614a4442432e737667\"></a>\n<a href=\"https://travis-ci.org/laughingman7743/PyAthenaJDBC\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/laughingman7743/PyAthenaJDBC.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2545aa531ffc28ca165bc99f8d6dc660a348e8b/68747470733a2f2f7472617669732d63692e6f72672f6c61756768696e676d616e373734332f5079417468656e614a4442432e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/laughingman7743/PyAthenaJDBC\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/laughingman7743/PyAthenaJDBC/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3378530c9aeb7f0de1490dde709780de78f32cb2/68747470733a2f2f636f6465636f762e696f2f67682f6c61756768696e676d616e373734332f5079417468656e614a4442432f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/laughingman7743/PyAthenaJDBC/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/PyAthenaJDBC.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40f53294abf77112fae946ed9a60c5c77b606bc6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f5079417468656e614a4442432e737667\"></a>\n<div id=\"pyathenajdbc\">\n<h2>PyAthenaJDBC</h2>\n<p>PyAthenaJDBC is a Python <a href=\"https://www.python.org/dev/peps/pep-0249/\" rel=\"nofollow\">DB API 2.0 (PEP 249)</a> compliant wrapper for <a href=\"http://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html\" rel=\"nofollow\">Amazon Athena JDBC driver</a>.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python<ul>\n<li>CPython 2,7, 3,4, 3.5, 3.6</li>\n</ul>\n</li>\n<li>Java<ul>\n<li>Java &gt;= 8</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>$ pip install PyAthenaJDBC\n</pre>\n<p>Extra packages:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Package</th>\n<th>Install command</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Pandas</td>\n<td><tt>pip install PyAthenaJDBC[Pandas]</tt></td>\n<td>&gt;=0.19.0</td>\n</tr>\n<tr><td>SQLAlchemy</td>\n<td><tt>pip install PyAthenaJDBC[SQLAlchemy]</tt></td>\n<td>&gt;=1.0.0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"basic-usage\">\n<h4>Basic usage</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM one_row\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"cursor-iteration\">\n<h4>Cursor iteration</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM many_rows LIMIT 10\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"query-with-parameter\">\n<h4>Query with parameter</h4>\n<p>Supported <a href=\"https://www.python.org/dev/peps/pep-0249/#paramstyle\" rel=\"nofollow\">DB API paramstyle</a> is only <tt>PyFormat</tt>.\n<tt>PyFormat</tt> only supports <a href=\"https://pyformat.info/#named_placeholders\" rel=\"nofollow\">named placeholders</a> with old <tt>%</tt> operator style and parameters specify dictionary format.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT col_string FROM one_row_complex\n        WHERE col_string = </span><span class=\"si\">%(param)s</span><span class=\"s2\">\n        \"\"\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'param'</span><span class=\"p\">:</span> <span class=\"s1\">'a string'</span><span class=\"p\">})</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>if <tt>%</tt> character is contained in your query, it must be escaped with <tt>%%</tt> like the following:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">col_string</span> <span class=\"k\">FROM</span> <span class=\"n\">one_row_complex</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">col_string</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">)</span><span class=\"n\">s</span> <span class=\"k\">OR</span> <span class=\"n\">col_string</span> <span class=\"k\">LIKE</span> <span class=\"s1\">'a%%'</span>\n</pre>\n</div>\n<div id=\"jvm-options\">\n<h4>JVM Options</h4>\n<p>In the connect method or connection object, you can specify JVM options with a string array.</p>\n<p>You can increase the JVM heap size like the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">jvm_options</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'-Xms1024m'</span><span class=\"p\">,</span> <span class=\"s1\">'-Xmx4096m'</span><span class=\"p\">])</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM many_rows\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"sqlalchemy\">\n<h4>SQLAlchemy</h4>\n<p>Install SQLAlchemy with <tt>pip install <span class=\"pre\">SQLAlchemy&gt;=1.0.0</span></tt> or <tt>pip install PyAthenaJDBC[SQLAlchemy]</tt>.\nSupported SQLAlchemy is 1.0.0 or higher.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote_plus</span>  <span class=\"c1\"># PY2: from urllib import quote_plus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.engine</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.sql.expression</span> <span class=\"kn\">import</span> <span class=\"n\">select</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.sql.functions</span> <span class=\"kn\">import</span> <span class=\"n\">func</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.sql.schema</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span>\n\n<span class=\"n\">conn_str</span> <span class=\"o\">=</span> <span class=\"s1\">'awsathena+jdbc://</span><span class=\"si\">{access_key}</span><span class=\"s1\">:</span><span class=\"si\">{secret_key}</span><span class=\"s1\">@athena.</span><span class=\"si\">{region_name}</span><span class=\"s1\">.amazonaws.com:443/'</span>\\\n           <span class=\"s1\">'</span><span class=\"si\">{schema_name}</span><span class=\"s1\">?s3_staging_dir=</span><span class=\"si\">{s3_staging_dir}</span><span class=\"s1\">'</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"n\">conn_str</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">access_key</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'YOUR_ACCESS_KEY'</span><span class=\"p\">),</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'YOUR_SECRET_ACCESS_KEY'</span><span class=\"p\">),</span>\n    <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span>\n    <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">)))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">contextlib</span><span class=\"o\">.</span><span class=\"n\">closing</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"n\">many_rows</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'many_rows'</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">),</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)],</span> <span class=\"n\">from_obj</span><span class=\"o\">=</span><span class=\"n\">many_rows</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>\n</pre>\n<p>The connection string has the following format:</p>\n<pre><span class=\"n\">awsathena</span><span class=\"o\">+</span><span class=\"n\">jdbc</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"p\">{</span><span class=\"n\">access_key</span><span class=\"p\">}:{</span><span class=\"n\">secret_key</span><span class=\"p\">}</span><span class=\"nd\">@athena</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"n\">region_name</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">amazonaws</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"p\">:</span><span class=\"mi\">443</span><span class=\"o\">/</span><span class=\"p\">{</span><span class=\"n\">schema_name</span><span class=\"p\">}</span><span class=\"err\">?</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">s3_staging_dir</span><span class=\"p\">}</span><span class=\"o\">&amp;</span><span class=\"n\">driver_path</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">driver_path</span><span class=\"p\">}</span><span class=\"o\">&amp;...</span>\n</pre>\n<p>NOTE: <tt>s3_staging_dir</tt> requires quote. If <tt>access_key</tt>, <tt>secret_key</tt> and other parameter contain special characters, quote is also required.</p>\n</div>\n<div id=\"pandas\">\n<h4>Pandas</h4>\n<p>Minimal example for Pandas DataFrame:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">access_key</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_ACCESS_KEY_ID'</span><span class=\"p\">,</span>\n               <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_SECRET_ACCESS_KEY'</span><span class=\"p\">,</span>\n               <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">jvm_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/jvm'</span><span class=\"p\">)</span>  <span class=\"c1\"># optional, as used by JPype</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT * FROM many_rows LIMIT 10\"</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">)</span>\n</pre>\n<p>As Pandas DataFrame:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc.util</span> <span class=\"kn\">import</span> <span class=\"n\">as_pandas</span>\n\n<span class=\"k\">with</span> <span class=\"n\">contextlib</span><span class=\"o\">.</span><span class=\"n\">closing</span><span class=\"p\">(</span>\n        <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span>\n                <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)))</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM many_rows\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">as_pandas</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">())</span>\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<h3 id=\"redash-query-runner-example\"><span class=\"section-subtitle\"><a href=\"https://github.com/getredash/redash\" rel=\"nofollow\">Redash</a> query runner example</span></h3>\n<p>See <a href=\"examples/redash/athena.py\" rel=\"nofollow\">examples/redash/athena.py</a></p>\n</div>\n<div id=\"credential\">\n<h3>Credential</h3>\n<p>Support <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\" rel=\"nofollow\">AWS CLI credentials</a>, <a href=\"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/PropertiesFileCredentialsProvider.html\" rel=\"nofollow\">Properties file credentials</a> and <a href=\"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\" rel=\"nofollow\">AWS credentials provider chain</a>.</p>\n<div id=\"credential-files\">\n<h4>Credential Files</h4>\n<p>~/.aws/credentials</p>\n<pre><span class=\"k\">[default]</span>\n<span class=\"na\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"s\">YOUR_ACCESS_KEY_ID</span>\n<span class=\"na\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"s\">YOUR_SECRET_ACCESS_KEY</span>\n</pre>\n<p>~/.aws/config</p>\n<pre><span class=\"k\">[default]</span>\n<span class=\"na\">region</span><span class=\"o\">=</span><span class=\"s\">us-west-2</span>\n<span class=\"na\">output</span><span class=\"o\">=</span><span class=\"s\">json</span>\n</pre>\n</div>\n<div id=\"environment-variables\">\n<h4>Environment variables</h4>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ACCESS_KEY_ID</span><span class=\"o\">=</span>YOUR_ACCESS_KEY_ID\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_SECRET_ACCESS_KEY</span><span class=\"o\">=</span>YOUR_SECRET_ACCESS_KEY\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_DEFAULT_REGION</span><span class=\"o\">=</span>us-west-2\n</pre>\n<p>Additional environment variable:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ATHENA_S3_STAGING_DIR</span><span class=\"o\">=</span>s3://YOUR_S3_BUCKET/path/to/\n</pre>\n</div>\n<div id=\"id1\">\n<h4>Properties file credentials</h4>\n<p>Create a property file of the following format.</p>\n<p>/path/to/AWSCredentials.properties</p>\n<pre><span class=\"na\">accessKeyId</span><span class=\"o\">:</span><span class=\"s\">YOUR_ACCESS_KEY_ID</span>\n<span class=\"na\">secretKey</span><span class=\"o\">:</span><span class=\"s\">YOUR_SECRET_ACCESS_KEY</span>\n</pre>\n<p>Specify the property file path with <tt>credential_file</tt> of the connect method or connection object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">credential_file</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/AWSCredentials.properties'</span><span class=\"p\">,</span>\n               <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n</pre>\n<p>PyAthenaJDBC uses the property file to authenticate Amazon Athena.</p>\n</div>\n<div id=\"id2\">\n<h4>AWS credentials provider chain</h4>\n<p>See <a href=\"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\" rel=\"nofollow\">AWS credentials provider chain</a></p>\n<blockquote>\n<p>AWS credentials provider chain that looks for credentials in this order:</p>\n<blockquote>\n<ul>\n<li>Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (RECOMMENDED since they are recognized by all the AWS SDKs and CLI except for .NET), or AWS_ACCESS_KEY and AWS_SECRET_KEY (only recognized by Java SDK)</li>\n<li>Java System Properties - aws.accessKeyId and aws.secretKey</li>\n<li>Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI</li>\n<li>Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\u201d environment variable is set and security manager has permission to access the variable,</li>\n<li>Instance profile credentials delivered through the Amazon EC2 metadata service</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>In the connect method or connection object, you can connect by specifying at least <tt>s3_staging_dir</tt> and <tt>region_name</tt>.\nIt is not necessary to specify <tt>access_key</tt> and <tt>secret_key</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n</pre>\n<p><a href=\"https://github.com/hashicorp/terraform\" rel=\"nofollow\">Terraform</a> Instance profile example:</p>\n<p>See <a href=\"examples/terraform/\" rel=\"nofollow\">examples/terraform/</a></p>\n</div>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>Depends on the following environment variables:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ACCESS_KEY_ID</span><span class=\"o\">=</span>YOUR_ACCESS_KEY_ID\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_SECRET_ACCESS_KEY</span><span class=\"o\">=</span>YOUR_SECRET_ACCESS_KEY\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_DEFAULT_REGION</span><span class=\"o\">=</span>us-west-2\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ATHENA_S3_STAGING_DIR</span><span class=\"o\">=</span>s3://YOUR_S3_BUCKET/path/to/\n</pre>\n<div id=\"run-test\">\n<h4>Run test</h4>\n<pre>$ pip install pipenv\n$ pipenv install --dev\n$ pipenv run scripts/test_data/upload_test_data.sh\n$ pipenv run pytest\n$ pipenv run scripts/test_data/delete_test_data.sh\n</pre>\n</div>\n<div id=\"run-test-multiple-python-versions\">\n<h4>Run test multiple Python versions</h4>\n<pre>$ pip install pipenv\n$ pipenv install --dev\n$ pipenv run scripts/test_data/upload_test_data.sh\n$ pyenv <span class=\"nb\">local</span> <span class=\"m\">3</span>.6.5 <span class=\"m\">3</span>.5.5 <span class=\"m\">3</span>.4.8 <span class=\"m\">2</span>.7.14\n$ pipenv run tox\n$ pipenv run scripts/test_data/delete_test_data.sh\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4208591, "releases": {"1.3.4": [{"comment_text": "", "digests": {"md5": "f56411e45dbf3568ce3b74825e44588f", "sha256": "383cccdffe8b54677a2000323ff5ccbfa8fcd0a2138e2eb58e6dea655f688073"}, "downloads": -1, "filename": "PyAthenaJDBC_qubole-1.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f56411e45dbf3568ce3b74825e44588f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24769, "upload_time": "2018-08-26T16:05:50", "upload_time_iso_8601": "2018-08-26T16:05:50.530228Z", "url": "https://files.pythonhosted.org/packages/6e/32/66d70e6609ff86c9ba6e8dfd335c88e82a947f3d58ce80ace45ac6d84c65/PyAthenaJDBC_qubole-1.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a10be159c9767fb93bfe150b3f95a258", "sha256": "972a36244425aa1929299c4e1438473141b81cc09e7a0af3bd6d3a48115a093b"}, "downloads": -1, "filename": "PyAthenaJDBC_qubole-1.3.4.tar.gz", "has_sig": false, "md5_digest": "a10be159c9767fb93bfe150b3f95a258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22665, "upload_time": "2018-08-26T16:05:52", "upload_time_iso_8601": "2018-08-26T16:05:52.303322Z", "url": "https://files.pythonhosted.org/packages/dc/fa/25a6344e917801c7cafb52962b13feff01b62517f847d9f330e9e53c3eef/PyAthenaJDBC_qubole-1.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f56411e45dbf3568ce3b74825e44588f", "sha256": "383cccdffe8b54677a2000323ff5ccbfa8fcd0a2138e2eb58e6dea655f688073"}, "downloads": -1, "filename": "PyAthenaJDBC_qubole-1.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f56411e45dbf3568ce3b74825e44588f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24769, "upload_time": "2018-08-26T16:05:50", "upload_time_iso_8601": "2018-08-26T16:05:50.530228Z", "url": "https://files.pythonhosted.org/packages/6e/32/66d70e6609ff86c9ba6e8dfd335c88e82a947f3d58ce80ace45ac6d84c65/PyAthenaJDBC_qubole-1.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a10be159c9767fb93bfe150b3f95a258", "sha256": "972a36244425aa1929299c4e1438473141b81cc09e7a0af3bd6d3a48115a093b"}, "downloads": -1, "filename": "PyAthenaJDBC_qubole-1.3.4.tar.gz", "has_sig": false, "md5_digest": "a10be159c9767fb93bfe150b3f95a258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22665, "upload_time": "2018-08-26T16:05:52", "upload_time_iso_8601": "2018-08-26T16:05:52.303322Z", "url": "https://files.pythonhosted.org/packages/dc/fa/25a6344e917801c7cafb52962b13feff01b62517f847d9f330e9e53c3eef/PyAthenaJDBC_qubole-1.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:01 2020"}