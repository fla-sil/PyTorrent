{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "===========\nWhiffle\n===========\n\nWhiffle provides a wrapper around the Wikidot XML-RPC API.\nExample scripts are provided for re-parenting pages and changing tags\nin large batches.\n\nChange Log\n==========\n\nv0.1\tInitial release\nv1.0\tModified for the v2 API\n\n\nInstallation\n============\n\nWhiffle is a normal Python package and is held on the PyPI repository.\nIt can be installed using *pip* or any other method of your choice. If\nyou know what I'm talking about then you don't need me to hold your\nhand.\n\nIf you are new to Python or installing packages from PyPI, then the\neasiest way to install Whiffle is manually.\n\n* Extract all the files into an empty folder.\n* From a command prompt in that folder, give the command\n    python setup.py install\n\nUsing Whiffle\n=============\n\nThe first thing you need to do is to configure the \"identity.ini\" file.\nThis file must be in the current directory when an application that uses\nwhiffle executes. There is a skeleton in the bin folder that you can use\nto get started.\n\nThe identity.ini file\n---------------------\n\n    [default@wikidot]\n        This heading allows you to have multiple identities and sites.\n\tUntil you want to do two things at once, leave it alone. The\n\t\"@wikidot\" and the brackets must be there, but you can change\n\tthe name (\"default\"). \n    user: AWikidotUserName\n        This is the Wikidot username that has API access to the site\n    key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n        This is the API key of the wikidot user\n    site: AWikidotSiteName\n        This is the Wikidot site that you are working on. It's just the\n\tname, no \"http\" or \"wikidot.com\".\n\nOnce you have set up the identity.ini file, look at the examples:\naddtag.py and chparent.py in the bin sub-folder of the installation\nfolder. These are probably the best way to get started and may be all\nyou need.\n\naddtag.py\n---------\n\nUsage: addtag.py [options] page [tag]\nAdds or removes tags from Wikidot pages.\n\nOptions:\n    -h, --help\n        show this help message and exit\n\t\n    -i IDENTITY, --identity=IDENTITY\n        define the name of the entry in the identity.ini file to use.\n\tThe default is \"default\".\n\t\n    -r, --remove\n        remove the specified tag (default action is to add it).\n\t\n    -f FILE, --file=FILE\n        define the name of the a file, each line of which\n        contains <page>SPACE<tag> or just <page>. If <tag> is\n        not specified on any line, then the one specified on\n        the command line is used. If every line specifies a\n        tag, then a tag is not required on the command line.\n\nExamples:\n* addtag.py start fred\n    adds the tag \"fred\" to the page \"start\".\n\n* addtag.py -r start fred\n    removes the tag \"fred\" from the page \"start\".\n\n* addtag.py language:python good\n    adds the tag \"good\" to the page \"language:python\"\n    \n* addtag.py -f myfile.txt defaulttag\n    assuming the file myfile.txt contains:\n        start fred\n\tstop\n    adds the tag \"fred\" to the page \"start\" and adds the tag\n    \"defaulttag\" to the page \"stop\".\n    \n    Specifying the the tag on the command line is not necessary if every\n    line of the file specifies a tag.\n    \nchparent.py\n-----------\n\nUsage: chparent.py [options] parent child\nChanges the parent of a page\n\nOptions:\n    -h, --help\n        show this help message and exit\n    -i IDENTITY, --identity=IDENTITY\n        define the name of the entry in the identity.ini file to use.\n        The default is \"default\".\n    -f FILE, --file=FILE\n        define the name of the a file, each line of which contains\n        <parent>SPACE<child>. If this option is specified then the\n        parent and child should not be given on the command line.\n\nExamples:\n\n* chparent start help\n    makes page \"start\" the parent of page \"help\"\n    \n* chparent -f myfile.txt\n    assuming the file myfile.txt contains:\n        start help\n        help help:how-to-edit\n    makes page \"start\" the parent of page \"help\" and makes page \"help\"\n    the parent of page \"help:how-to-edit\" \n\n    \n    \nUsing Whiffle in your own application\n=====================================\n\nEach program should include the following::\n    from whiffle import wikidotapi, ApiError, SemanticError\n    ...\n    api = wikidotapi.connection(identity)\n    ...\n    \nThe parameter to wikidotapi.connection() is optional, and it defaults to\n\"default\", which is the identity used in the skeleton identity.ini file.\n\nCalls can then be made on the methods of the \"api\" object. See the\nexample code for the syntax.\n\npage_is_valid(name)\n-------------------\nReturns True if the name is a valid page name. Validation is only aimed\nat preventing pages being created that are impossible to delete, and\ndoes not attempt to replicate Wikidot rules.\n\ncategory_is_valid(name)\n-------------------\nReturns True if the name is a valid category name. Validation is only aimed\nat preventing pages being created that are impossible to delete, and\ndoes not attempt to replicate Wikidot rules.\n\nsite_is_valid(name)\n-------------------\nReturns True if the name is a valid page name. Validation is only basic,\nand does not attempt to replicate Wikidot rules.\n\nSite\n----\nThe name of the current site. The default is that found in the\nidentity.ini file. Site can be assigned to in order to work on multiple\nsites in the same application::\n    dosomething()\n    api.Site = \"newsite\"\n    dosomething()\n    \nPages\n-----\nA list of page names. This list is updated the first time Pages is used\nand a cached copy is used thereafter. To refresh the cache, call\n\"refresh_pages()\".\n\nThe content of this list is that returned by a pages.select API call. \n\nCategories\n----------\nA list of dictionaries, each of which describe a category. This list is\nupdated the first time Categories is used and a cached copy is used\nthereafter. To refresh the cache, call \"refresh_categories()\".\n\nThe content of this list is that returned by a categories.select API\ncall. \n\npage_exists(page, category=\"_default\")\n--------------------------------------\nReturns True if the page already exists (according to the Pages cache).\nThe page name can be given either as \"category:page\" or the page name\nand the category can be given separately.\n\nget_page_item(page, item, category=\"_default\")\n----------------------------------------------\nGets a datum from the given key for the given page (from the Pages\ncache). The page name can be given either as \"category:page\" or the page name\nand the category can be given separately.\n\nThe item parameter is a string containing the dictionary key. Valid keys\nare those returned by the page.get_one API method.\n\nset_page_item(page, item, value, create=False, category=\"_default\")\n----------------------------------------------\nSets the datum for given key on the given page. The page name can be\ngiven either as \"category:page\" or the page name and the category can be\ngiven separately.\n\nThe item parameter is a string containing the dictionary key. Valid keys\nare those taken by thepages.save-one API method, and the value parameter\nmust be a valid value for that entry.\n\nIf the create parameter is True, then this call may create a new\n(probably blank) page. Otherwise this call will raise an exception if\nthe page does not already exist (according to the Pages cache).\n\nadd_tag(page, tag, category=\"_default\", ErrorIfRedundant=True)\n--------------------------------------------------------------\nAdds the given tag to the given page. The page name can be\ngiven either as \"category:page\" or the page name and the category can be\ngiven separately.\n\nIf the ErrorIfRedundant parameter is False, then this call will not fail\nif the page already has the given tag. Otherwise an exception will be\nraised if the tag is already on the page.\n\nremove_tag(page, tag, category=\"_default\", ErrorIfRedundant=True)\n--------------------------------------------------------------\nRemoves the given tag from the given page. The page name can be\ngiven either as \"category:page\" or the page name and the category can be\ngiven separately.\n\nIf the ErrorIfRedundant parameter is False, then this call will not fail\nif the page does not have the given tag. Otherwise an exception will be\nraised if the tag is not on the page.\n\nserver\n------\nThe API server proxy. This can be used to make API calls::\n    api.server.site.categories ({\"site\": self.Site})\nOf course if you make calls through this object then Whiffle does not\ndo any validation checks; you are on your own.\n\nApiError\n--------\nAn exception raised by the api object. Most exceptions are of this type\nexcept for...\n\nSemanticError\n-------------\nAn exception raised by the api object due to an atempt to write to a\nread-only object.\n\n\n\nHello World\n===========\n\nHere is the Whiffle version of Hello World::\n\n    from whiffle import wikidotapi\n    \n    api = wikidotapi.connection()\n    api.set_page_item(\"hello\", \"content\", \"**Hello World!**\", create=True)\n\nThat creates the page \"hello\" and puts the text \"Hello World!\" on it in\nbold.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "GNU Lesser General Public License v3 or later", "maintainer": null, "maintainer_email": null, "name": "Whiffle", "package_url": "https://pypi.org/project/Whiffle/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Whiffle/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/Whiffle/1.0/", "requires_dist": null, "requires_python": null, "summary": "A wrapper around the Wikidot XML-RPC API", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===========<br>Whiffle<br>===========<br><br>Whiffle provides a wrapper around the Wikidot XML-RPC API.<br>Example scripts are provided for re-parenting pages and changing tags<br>in large batches.<br><br>Change Log<br>==========<br><br>v0.1\tInitial release<br>v1.0\tModified for the v2 API<br><br><br>Installation<br>============<br><br>Whiffle is a normal Python package and is held on the PyPI repository.<br>It can be installed using *pip* or any other method of your choice. If<br>you know what I'm talking about then you don't need me to hold your<br>hand.<br><br>If you are new to Python or installing packages from PyPI, then the<br>easiest way to install Whiffle is manually.<br><br>* Extract all the files into an empty folder.<br>* From a command prompt in that folder, give the command<br>    python setup.py install<br><br>Using Whiffle<br>=============<br><br>The first thing you need to do is to configure the \"identity.ini\" file.<br>This file must be in the current directory when an application that uses<br>whiffle executes. There is a skeleton in the bin folder that you can use<br>to get started.<br><br>The identity.ini file<br>---------------------<br><br>    [default@wikidot]<br>        This heading allows you to have multiple identities and sites.<br>\tUntil you want to do two things at once, leave it alone. The<br>\t\"@wikidot\" and the brackets must be there, but you can change<br>\tthe name (\"default\"). <br>    user: AWikidotUserName<br>        This is the Wikidot username that has API access to the site<br>    key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>        This is the API key of the wikidot user<br>    site: AWikidotSiteName<br>        This is the Wikidot site that you are working on. It's just the<br>\tname, no \"http\" or \"wikidot.com\".<br><br>Once you have set up the identity.ini file, look at the examples:<br>addtag.py and chparent.py in the bin sub-folder of the installation<br>folder. These are probably the best way to get started and may be all<br>you need.<br><br>addtag.py<br>---------<br><br>Usage: addtag.py [options] page [tag]<br>Adds or removes tags from Wikidot pages.<br><br>Options:<br>    -h, --help<br>        show this help message and exit<br>\t<br>    -i IDENTITY, --identity=IDENTITY<br>        define the name of the entry in the identity.ini file to use.<br>\tThe default is \"default\".<br>\t<br>    -r, --remove<br>        remove the specified tag (default action is to add it).<br>\t<br>    -f FILE, --file=FILE<br>        define the name of the a file, each line of which<br>        contains &lt;page&gt;SPACE&lt;tag&gt; or just &lt;page&gt;. If &lt;tag&gt; is<br>        not specified on any line, then the one specified on<br>        the command line is used. If every line specifies a<br>        tag, then a tag is not required on the command line.<br><br>Examples:<br>* addtag.py start fred<br>    adds the tag \"fred\" to the page \"start\".<br><br>* addtag.py -r start fred<br>    removes the tag \"fred\" from the page \"start\".<br><br>* addtag.py language:python good<br>    adds the tag \"good\" to the page \"language:python\"<br>    <br>* addtag.py -f myfile.txt defaulttag<br>    assuming the file myfile.txt contains:<br>        start fred<br>\tstop<br>    adds the tag \"fred\" to the page \"start\" and adds the tag<br>    \"defaulttag\" to the page \"stop\".<br>    <br>    Specifying the the tag on the command line is not necessary if every<br>    line of the file specifies a tag.<br>    <br>chparent.py<br>-----------<br><br>Usage: chparent.py [options] parent child<br>Changes the parent of a page<br><br>Options:<br>    -h, --help<br>        show this help message and exit<br>    -i IDENTITY, --identity=IDENTITY<br>        define the name of the entry in the identity.ini file to use.<br>        The default is \"default\".<br>    -f FILE, --file=FILE<br>        define the name of the a file, each line of which contains<br>        &lt;parent&gt;SPACE&lt;child&gt;. If this option is specified then the<br>        parent and child should not be given on the command line.<br><br>Examples:<br><br>* chparent start help<br>    makes page \"start\" the parent of page \"help\"<br>    <br>* chparent -f myfile.txt<br>    assuming the file myfile.txt contains:<br>        start help<br>        help help:how-to-edit<br>    makes page \"start\" the parent of page \"help\" and makes page \"help\"<br>    the parent of page \"help:how-to-edit\" <br><br>    <br>    <br>Using Whiffle in your own application<br>=====================================<br><br>Each program should include the following::<br>    from whiffle import wikidotapi, ApiError, SemanticError<br>    ...<br>    api = wikidotapi.connection(identity)<br>    ...<br>    <br>The parameter to wikidotapi.connection() is optional, and it defaults to<br>\"default\", which is the identity used in the skeleton identity.ini file.<br><br>Calls can then be made on the methods of the \"api\" object. See the<br>example code for the syntax.<br><br>page_is_valid(name)<br>-------------------<br>Returns True if the name is a valid page name. Validation is only aimed<br>at preventing pages being created that are impossible to delete, and<br>does not attempt to replicate Wikidot rules.<br><br>category_is_valid(name)<br>-------------------<br>Returns True if the name is a valid category name. Validation is only aimed<br>at preventing pages being created that are impossible to delete, and<br>does not attempt to replicate Wikidot rules.<br><br>site_is_valid(name)<br>-------------------<br>Returns True if the name is a valid page name. Validation is only basic,<br>and does not attempt to replicate Wikidot rules.<br><br>Site<br>----<br>The name of the current site. The default is that found in the<br>identity.ini file. Site can be assigned to in order to work on multiple<br>sites in the same application::<br>    dosomething()<br>    api.Site = \"newsite\"<br>    dosomething()<br>    <br>Pages<br>-----<br>A list of page names. This list is updated the first time Pages is used<br>and a cached copy is used thereafter. To refresh the cache, call<br>\"refresh_pages()\".<br><br>The content of this list is that returned by a pages.select API call. <br><br>Categories<br>----------<br>A list of dictionaries, each of which describe a category. This list is<br>updated the first time Categories is used and a cached copy is used<br>thereafter. To refresh the cache, call \"refresh_categories()\".<br><br>The content of this list is that returned by a categories.select API<br>call. <br><br>page_exists(page, category=\"_default\")<br>--------------------------------------<br>Returns True if the page already exists (according to the Pages cache).<br>The page name can be given either as \"category:page\" or the page name<br>and the category can be given separately.<br><br>get_page_item(page, item, category=\"_default\")<br>----------------------------------------------<br>Gets a datum from the given key for the given page (from the Pages<br>cache). The page name can be given either as \"category:page\" or the page name<br>and the category can be given separately.<br><br>The item parameter is a string containing the dictionary key. Valid keys<br>are those returned by the page.get_one API method.<br><br>set_page_item(page, item, value, create=False, category=\"_default\")<br>----------------------------------------------<br>Sets the datum for given key on the given page. The page name can be<br>given either as \"category:page\" or the page name and the category can be<br>given separately.<br><br>The item parameter is a string containing the dictionary key. Valid keys<br>are those taken by thepages.save-one API method, and the value parameter<br>must be a valid value for that entry.<br><br>If the create parameter is True, then this call may create a new<br>(probably blank) page. Otherwise this call will raise an exception if<br>the page does not already exist (according to the Pages cache).<br><br>add_tag(page, tag, category=\"_default\", ErrorIfRedundant=True)<br>--------------------------------------------------------------<br>Adds the given tag to the given page. The page name can be<br>given either as \"category:page\" or the page name and the category can be<br>given separately.<br><br>If the ErrorIfRedundant parameter is False, then this call will not fail<br>if the page already has the given tag. Otherwise an exception will be<br>raised if the tag is already on the page.<br><br>remove_tag(page, tag, category=\"_default\", ErrorIfRedundant=True)<br>--------------------------------------------------------------<br>Removes the given tag from the given page. The page name can be<br>given either as \"category:page\" or the page name and the category can be<br>given separately.<br><br>If the ErrorIfRedundant parameter is False, then this call will not fail<br>if the page does not have the given tag. Otherwise an exception will be<br>raised if the tag is not on the page.<br><br>server<br>------<br>The API server proxy. This can be used to make API calls::<br>    api.server.site.categories ({\"site\": self.Site})<br>Of course if you make calls through this object then Whiffle does not<br>do any validation checks; you are on your own.<br><br>ApiError<br>--------<br>An exception raised by the api object. Most exceptions are of this type<br>except for...<br><br>SemanticError<br>-------------<br>An exception raised by the api object due to an atempt to write to a<br>read-only object.<br><br><br><br>Hello World<br>===========<br><br>Here is the Whiffle version of Hello World::<br><br>    from whiffle import wikidotapi<br>    <br>    api = wikidotapi.connection()<br>    api.set_page_item(\"hello\", \"content\", \"**Hello World!**\", create=True)<br><br>That creates the page \"hello\" and puts the text \"Hello World!\" on it in<br>bold.\n          </div>"}, "last_serial": 786009, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7165db8386115051595ba71666fb05fa", "sha256": "827c75a33e15dd90e444454e363316b245bfded94713b430396e4b6b9c784b1c"}, "downloads": -1, "filename": "Whiffle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7165db8386115051595ba71666fb05fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22533, "upload_time": "2010-09-05T16:06:10", "upload_time_iso_8601": "2010-09-05T16:06:10.565914Z", "url": "https://files.pythonhosted.org/packages/56/08/8e72076a18bd47734bb86ac738b89fc79710f6aab4817eecdfcf6e1edc44/Whiffle-0.1.0.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "a9bc9844d00fce3ab7d3e06277d14f73", "sha256": "b47cad9126ab26ca4309170d37294ef0763174360a01a75a71f1ba1ff702dfcc"}, "downloads": -1, "filename": "Whiffle-1.0.tar.gz", "has_sig": false, "md5_digest": "a9bc9844d00fce3ab7d3e06277d14f73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21886, "upload_time": "2010-09-28T00:52:00", "upload_time_iso_8601": "2010-09-28T00:52:00.560525Z", "url": "https://files.pythonhosted.org/packages/79/29/dc911d0f06b38a4cf94b7dc378e5ed554fb422488761e1b913c44e715f2b/Whiffle-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a9bc9844d00fce3ab7d3e06277d14f73", "sha256": "b47cad9126ab26ca4309170d37294ef0763174360a01a75a71f1ba1ff702dfcc"}, "downloads": -1, "filename": "Whiffle-1.0.tar.gz", "has_sig": false, "md5_digest": "a9bc9844d00fce3ab7d3e06277d14f73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21886, "upload_time": "2010-09-28T00:52:00", "upload_time_iso_8601": "2010-09-28T00:52:00.560525Z", "url": "https://files.pythonhosted.org/packages/79/29/dc911d0f06b38a4cf94b7dc378e5ed554fb422488761e1b913c44e715f2b/Whiffle-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:44 2020"}