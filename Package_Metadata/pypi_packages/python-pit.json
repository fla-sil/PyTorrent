{"info": {"author": "Sam Zhang", "author_email": "shimian.zhang@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "pit-- Python as a stream filter\n=======================================\n\nWhat's new in version 0.3\n~~~~~~~~~~~~~\n* Autoimport support with [autoimp](github.com/autoimp). Dependency frozen at 1.0.4 for now.\n* Runs on Python 3 \n* Version flag\n\nWhat's new in version 0.2\n~~~~~~~~~~~~~\n\n* NOTE: expression evaluation is now default; -e now stands for _execute_\n* -b flag can be used to execute code before loop\n* optional positonal statement after loop\n\nWhat's new in version 0.1.1\n~~~~~~~~~~~~~\n* Lines of standard input can be split up by a field separator.\n* -e flag evaluates command as an expression.\n\nPit is a tool for making it easier to run Python on the command line.\nIt is designed to be a swiss army knife for people who aren't as familiar with\n(or who don't want to deal with) the entire array of Unix utilities.\n\nExample uses:\n-------------\n\nQuick calculator\n~~~~~~~~~~~~~~~\n::\n    pit \"math.log(.97**12)\"\n\n\nString processing\n~~~~~~~~~~~~~~~\nLines of standard input are piped into the underscore variable, _\n::\n    cat document.txt | pit \"_[::-1]\" #Reverses all lines\n\nFilter lines\n~~~~~~~~~~~~~~\n::\n    cat document.txt | pit -f 'len(_) > 10' # Filter for long lines\n    cat document.txt | pit -f 'random.random() > 0.5' # Sample lines from document with probability 0.5\n\nCount unique occurences of lines in a document:\n~~~~~~~~~~~~~~\nThe -e flag causes pit to execute the code, rather than evaluate it.\nThe -b flag (--begin) allows initialization code to be set up.\nAn optional positional argument after the main code section is run after the input ends.\n::\n    cat redundant.txt | pit -b 'a=set()' 'a.add(_)' 'print(len(a))'\n\nConvert entire document to base64:\n~~~~~~~~~~~~~~\nThe -p flag reads until EOF into the underscore variable.\n::\n    >cat document.txt | pit -p 'base64.encodestring(_)'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/samzhang111/pit", "keywords": null, "license": "GNU GPL", "maintainer": null, "maintainer_email": null, "name": "python-pit", "package_url": "https://pypi.org/project/python-pit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-pit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/samzhang111/pit"}, "release_url": "https://pypi.org/project/python-pit/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Python stream filter", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            pit-- Python as a stream filter<br>=======================================<br><br>What's new in version 0.3<br>~~~~~~~~~~~~~<br>* Autoimport support with [autoimp](github.com/autoimp). Dependency frozen at 1.0.4 for now.<br>* Runs on Python 3 <br>* Version flag<br><br>What's new in version 0.2<br>~~~~~~~~~~~~~<br><br>* NOTE: expression evaluation is now default; -e now stands for _execute_<br>* -b flag can be used to execute code before loop<br>* optional positonal statement after loop<br><br>What's new in version 0.1.1<br>~~~~~~~~~~~~~<br>* Lines of standard input can be split up by a field separator.<br>* -e flag evaluates command as an expression.<br><br>Pit is a tool for making it easier to run Python on the command line.<br>It is designed to be a swiss army knife for people who aren't as familiar with<br>(or who don't want to deal with) the entire array of Unix utilities.<br><br>Example uses:<br>-------------<br><br>Quick calculator<br>~~~~~~~~~~~~~~~<br>::<br>    pit \"math.log(.97**12)\"<br><br><br>String processing<br>~~~~~~~~~~~~~~~<br>Lines of standard input are piped into the underscore variable, _<br>::<br>    cat document.txt | pit \"_[::-1]\" #Reverses all lines<br><br>Filter lines<br>~~~~~~~~~~~~~~<br>::<br>    cat document.txt | pit -f 'len(_) &gt; 10' # Filter for long lines<br>    cat document.txt | pit -f 'random.random() &gt; 0.5' # Sample lines from document with probability 0.5<br><br>Count unique occurences of lines in a document:<br>~~~~~~~~~~~~~~<br>The -e flag causes pit to execute the code, rather than evaluate it.<br>The -b flag (--begin) allows initialization code to be set up.<br>An optional positional argument after the main code section is run after the input ends.<br>::<br>    cat redundant.txt | pit -b 'a=set()' 'a.add(_)' 'print(len(a))'<br><br>Convert entire document to base64:<br>~~~~~~~~~~~~~~<br>The -p flag reads until EOF into the underscore variable.<br>::<br>    &gt;cat document.txt | pit -p 'base64.encodestring(_)'\n          </div>"}, "last_serial": 1734223, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "c9be9c37bc805d46b24e362a64a89615", "sha256": "8cdf18114aa2822e0431bac461b5eef9a60cf09e002afefd6e90d8166a784e9f"}, "downloads": -1, "filename": "python-pit-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c9be9c37bc805d46b24e362a64a89615", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2731, "upload_time": "2014-06-19T06:50:23", "upload_time_iso_8601": "2014-06-19T06:50:23.306958Z", "url": "https://files.pythonhosted.org/packages/d6/cc/7edd30f967e55b60627d80dcd57b5e58e9da52276632dbb9732e092888a8/python-pit-0.2.0.tar.gz", "yanked": false}], "0.3.0": []}, "urls": [], "timestamp": "Fri May  8 03:15:59 2020"}