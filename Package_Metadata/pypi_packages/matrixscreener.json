{"info": {"author": "Arve Seljebu", "author_email": "arve.seljebu@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "DEPRECIATED\n===========\n\nThis software has been split up in smaller modules:\n\n-  `leicacam <https://github.com/arve0/leicacam>`__: Communicate with\n   Leica microscopes over CAM TCP/IP socket.\n-  `leicaexperiment <https://github.com/arve0/leicaexperiment>`__: Read\n   Leica LAS Matrix Screener experiments (output from scans).\n-  `leicascanningtemplate <https://github.com/arve0/leicascanningtemplate>`__:\n   Read Leica matrix screener scanning templates (define wells etc).\n-  `leicaautomator <https://github.com/arve0/leicaautomator>`__: Attempt\n   at fully automating a microscope scan.\n\nmatrixscreener\n==============\n\nThis is a python module for interfacing with *Leica LAS AF/X Matrix\nScreener*. It can read experiments and communicate with the microscope\nover network.\n\nThe module can be used to:\n\n-  stitch wells from an experiment exported with the *LAS AF Data\n   Exporter*\n-  batch compress images lossless\n-  programmatically select slides/wells/fields/images given by\n   attributes like\n\n   -  slide (S)\n   -  well position (U, V)\n   -  field position (X, Y)\n   -  z-stack position (Z)\n   -  channel (C)\n\n-  read experiment data from OME-XML\n\nThe module is developed on Mac OS X, but should work on Linux and\nWindows too. If you find any bugs, please report them as an\n`issue <https://github.com/arve0/matrixscreener/issues/new>`__ on\ngithub. Pull request are also welcome.\n\nFeatures\n--------\n\n-  Access experiment as a python object\n-  Compress to PNGs without loosing precision, metadata or colormap\n-  ImageJ stitching (Fiji is installed via\n   `fijibin <https://github.com/arve0/fijibin>`__)\n-  Communicate with microscope over CAM TCP/IP socket\n\nInstall\n-------\n\n::\n\n    pip install matrixscreener\n\nExamples\n--------\n\n**stitch experiment**\n\n.. code:: python\n\n    import matrixscreener\n    # create short hand\n    Experiment = matrixscreener.experiment.Experiment\n\n    # path should contain AditionalData and slide--S*\n    scan = Experiment('path/to/experiment')\n\n    print(matrixscreener.imagej._bin) # Fiji installed via package fijibin\n    matrixscreener.imagej._bin = '/path/to/imagej'\n\n    # if path is omitted, experiment path is used for output files\n    stitched_images = experiment.stitch('/path/to/output/files/')\n\n**stitch specific well**\n\n.. code:: python\n\n    from matrixscreener import experiment\n\n    # path should contain AditionalData and slide--S*\n    stitched_images = experiment.stitch('/path/to/well')\n\n**do stuff on all images**\n\n.. code:: python\n\n    from matrixscreener import experiment\n\n    scan = experiment.Experiment('path/to/experiment--')\n\n    for image in scan.images:\n        do stuff...\n\n**do stuff on specific wells/fields**\n\n.. code:: python\n\n    from matrixscreener import experiment\n\n    # select specific parts\n    selected_wells = [well for well in scan.wells if 'U00' in well]\n    for well in selected_wells:\n        do stuff...\n\n    def condition(path):\n        x_above = experiment.attribute(path, 'X') > 1\n        x_below = experiment.attribute(path, 'X') < 5\n        return x_above and x_below\n\n    selected_fields = [field for field in scan.fields if condition(field)]\n    for field in selected_fields:\n        do stuff..\n\n**subtract data**\n\n.. code:: python\n\n    from matrixscreener.experiment import attribute\n\n    # get all channels\n    channels = [attribute(image, 'C') for image in scan.images]\n    min_ch, max_ch = min(channels), max(channels)\n\n**communicate with microscope**\n\n.. code:: python\n\n    from matrixscreener.cam import CAM\n\n    cam = CAM()   # initiate and connect, default localhost:8895\n\n    # some commands are created as short hands\n    # start matrix scan\n    response = cam.start_scan()\n    print(response)\n\n    # but you could also create your own command with a list of tuples\n    command = [('cmd', 'enableall'),\n               ('value', 'true')]\n    response = cam.send(command)\n    print(response)\n\n    # or even send it as a bytes string (note the b)\n    command = b'/cmd:enableall /value:true'\n    response = cam.send(command)\n    print(response)\n\n**batch lossless compress of experiment**\n\n::\n\n    import matrixscreener as ms\n\n    e = ms.experiment.Experiment('/path/to/experiment')\n    pngs = ms.experiment.compress(e.images)\n    print(pngs)\n\nSee also `this\nnotebook <http://nbviewer.ipython.org/github/arve0/matrixscreener/tree/master/notebooks/compress.ipynb>`__.\n\nDevelop\n-------\n\n::\n\n    git clone https://github.com/arve0/matrixscreener.git\n    cd matrixscreener\n    # hack\n    ./setup.py install\n\nTesting\n-------\n\n::\n\n    pip install tox\n    tox\n\n**specific test, here compression test**\n\n::\n\n    pip install pytest numpy\n    py.test -k compression tests/test_experiment.py\n\n**specific test with extra output, jump into pdb upon error**\n\n::\n\n    DEBUG=matrixscreener py.test -k compression tests/test_experiment.py --pdb -s\n\nAPI Reference\n-------------\n\nAll commands should be documented in docstrings in `numpy\nformat <https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`__.\n\nAPI reference is available\n`online <http://matrixscreener.readthedocs.org>`__, can be read with\n`pydoc <https://docs.python.org/3.4/library/pydoc.html>`__ or any\neditor/repl that does autocomplete with docstrings.\n\nIn example:\n\n::\n\n    pydoc matrixscreener\n    pydoc matrixscreener.cam\n    pydoc matrixscreener.experiment\n    pydoc matrixscreener.imagej\n\nRelease procedure\n-----------------\n\n-  Create\n   `.pypirc <https://docs.python.org/3.5/distutils/packageindex.html#the-pypirc-file>`__\n   if missing.\n\n   ::\n\n       [distutils]\n       index-servers=\n               pypi\n               pypitest\n\n       [pypitest]\n       repository = https://testpypi.python.org/pypi\n       username = username\n       password = password\n\n       [pypi]\n       repository = https://pypi.python.org/pypi\n       username = username\n       password = password\n\n-  Update ``changelog.md``\n-  Update version in ``__init__.py``, ``setup.py`` and ``doc/conf.py``\n-  Git commit and tag version\n-  ``./generate-rst.sh`` (pandoc needed)\n-  Stage release:\n   ``python setup.py sdist bdist_wheel upload -r pypitest``\n-  Release: ``python setup.py sdist bdist_wheel upload``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arve0/matrixscreener", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "matrixscreener", "package_url": "https://pypi.org/project/matrixscreener/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/matrixscreener/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/arve0/matrixscreener"}, "release_url": "https://pypi.org/project/matrixscreener/0.6.1/", "requires_dist": null, "requires_python": null, "summary": "Python API for Leica LAS AF MatrixScreener", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"depreciated\">\n<h2>DEPRECIATED</h2>\n<p>This software has been split up in smaller modules:</p>\n<ul>\n<li><a href=\"https://github.com/arve0/leicacam\" rel=\"nofollow\">leicacam</a>: Communicate with\nLeica microscopes over CAM TCP/IP socket.</li>\n<li><a href=\"https://github.com/arve0/leicaexperiment\" rel=\"nofollow\">leicaexperiment</a>: Read\nLeica LAS Matrix Screener experiments (output from scans).</li>\n<li><a href=\"https://github.com/arve0/leicascanningtemplate\" rel=\"nofollow\">leicascanningtemplate</a>:\nRead Leica matrix screener scanning templates (define wells etc).</li>\n<li><a href=\"https://github.com/arve0/leicaautomator\" rel=\"nofollow\">leicaautomator</a>: Attempt\nat fully automating a microscope scan.</li>\n</ul>\n</div>\n<div id=\"matrixscreener\">\n<h2>matrixscreener</h2>\n<p>This is a python module for interfacing with <em>Leica LAS AF/X Matrix\nScreener</em>. It can read experiments and communicate with the microscope\nover network.</p>\n<p>The module can be used to:</p>\n<ul>\n<li>stitch wells from an experiment exported with the <em>LAS AF Data\nExporter</em></li>\n<li>batch compress images lossless</li>\n<li>programmatically select slides/wells/fields/images given by\nattributes like<ul>\n<li>slide (S)</li>\n<li>well position (U, V)</li>\n<li>field position (X, Y)</li>\n<li>z-stack position (Z)</li>\n<li>channel (C)</li>\n</ul>\n</li>\n<li>read experiment data from OME-XML</li>\n</ul>\n<p>The module is developed on Mac OS X, but should work on Linux and\nWindows too. If you find any bugs, please report them as an\n<a href=\"https://github.com/arve0/matrixscreener/issues/new\" rel=\"nofollow\">issue</a> on\ngithub. Pull request are also welcome.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Access experiment as a python object</li>\n<li>Compress to PNGs without loosing precision, metadata or colormap</li>\n<li>ImageJ stitching (Fiji is installed via\n<a href=\"https://github.com/arve0/fijibin\" rel=\"nofollow\">fijibin</a>)</li>\n<li>Communicate with microscope over CAM TCP/IP socket</li>\n</ul>\n</div>\n<div id=\"install\">\n<h3>Install</h3>\n<pre>pip install matrixscreener\n</pre>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p><strong>stitch experiment</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matrixscreener</span>\n<span class=\"c1\"># create short hand</span>\n<span class=\"n\">Experiment</span> <span class=\"o\">=</span> <span class=\"n\">matrixscreener</span><span class=\"o\">.</span><span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">Experiment</span>\n\n<span class=\"c1\"># path should contain AditionalData and slide--S*</span>\n<span class=\"n\">scan</span> <span class=\"o\">=</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"s1\">'path/to/experiment'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">matrixscreener</span><span class=\"o\">.</span><span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">_bin</span><span class=\"p\">)</span> <span class=\"c1\"># Fiji installed via package fijibin</span>\n<span class=\"n\">matrixscreener</span><span class=\"o\">.</span><span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">_bin</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/imagej'</span>\n\n<span class=\"c1\"># if path is omitted, experiment path is used for output files</span>\n<span class=\"n\">stitched_images</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">stitch</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/output/files/'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>stitch specific well</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matrixscreener</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"c1\"># path should contain AditionalData and slide--S*</span>\n<span class=\"n\">stitched_images</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">stitch</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/well'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>do stuff on all images</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matrixscreener</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"n\">scan</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"s1\">'path/to/experiment--'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">image</span> <span class=\"ow\">in</span> <span class=\"n\">scan</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"p\">:</span>\n    <span class=\"n\">do</span> <span class=\"n\">stuff</span><span class=\"o\">...</span>\n</pre>\n<p><strong>do stuff on specific wells/fields</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matrixscreener</span> <span class=\"kn\">import</span> <span class=\"n\">experiment</span>\n\n<span class=\"c1\"># select specific parts</span>\n<span class=\"n\">selected_wells</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">well</span> <span class=\"k\">for</span> <span class=\"n\">well</span> <span class=\"ow\">in</span> <span class=\"n\">scan</span><span class=\"o\">.</span><span class=\"n\">wells</span> <span class=\"k\">if</span> <span class=\"s1\">'U00'</span> <span class=\"ow\">in</span> <span class=\"n\">well</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">well</span> <span class=\"ow\">in</span> <span class=\"n\">selected_wells</span><span class=\"p\">:</span>\n    <span class=\"n\">do</span> <span class=\"n\">stuff</span><span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">condition</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"n\">x_above</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"n\">x_below</span> <span class=\"o\">=</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span>\n    <span class=\"k\">return</span> <span class=\"n\">x_above</span> <span class=\"ow\">and</span> <span class=\"n\">x_below</span>\n\n<span class=\"n\">selected_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">scan</span><span class=\"o\">.</span><span class=\"n\">fields</span> <span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)]</span>\n<span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">selected_fields</span><span class=\"p\">:</span>\n    <span class=\"n\">do</span> <span class=\"n\">stuff</span><span class=\"o\">..</span>\n</pre>\n<p><strong>subtract data</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matrixscreener.experiment</span> <span class=\"kn\">import</span> <span class=\"n\">attribute</span>\n\n<span class=\"c1\"># get all channels</span>\n<span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">image</span> <span class=\"ow\">in</span> <span class=\"n\">scan</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"p\">]</span>\n<span class=\"n\">min_ch</span><span class=\"p\">,</span> <span class=\"n\">max_ch</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</pre>\n<p><strong>communicate with microscope</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matrixscreener.cam</span> <span class=\"kn\">import</span> <span class=\"n\">CAM</span>\n\n<span class=\"n\">cam</span> <span class=\"o\">=</span> <span class=\"n\">CAM</span><span class=\"p\">()</span>   <span class=\"c1\"># initiate and connect, default localhost:8895</span>\n\n<span class=\"c1\"># some commands are created as short hands</span>\n<span class=\"c1\"># start matrix scan</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">start_scan</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># but you could also create your own command with a list of tuples</span>\n<span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'cmd'</span><span class=\"p\">,</span> <span class=\"s1\">'enableall'</span><span class=\"p\">),</span>\n           <span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"s1\">'true'</span><span class=\"p\">)]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or even send it as a bytes string (note the b)</span>\n<span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'/cmd:enableall /value:true'</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<p><strong>batch lossless compress of experiment</strong></p>\n<pre>import matrixscreener as ms\n\ne = ms.experiment.Experiment('/path/to/experiment')\npngs = ms.experiment.compress(e.images)\nprint(pngs)\n</pre>\n<p>See also <a href=\"http://nbviewer.ipython.org/github/arve0/matrixscreener/tree/master/notebooks/compress.ipynb\" rel=\"nofollow\">this\nnotebook</a>.</p>\n</div>\n<div id=\"develop\">\n<h3>Develop</h3>\n<pre>git clone https://github.com/arve0/matrixscreener.git\ncd matrixscreener\n# hack\n./setup.py install\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<pre>pip install tox\ntox\n</pre>\n<p><strong>specific test, here compression test</strong></p>\n<pre>pip install pytest numpy\npy.test -k compression tests/test_experiment.py\n</pre>\n<p><strong>specific test with extra output, jump into pdb upon error</strong></p>\n<pre>DEBUG=matrixscreener py.test -k compression tests/test_experiment.py --pdb -s\n</pre>\n</div>\n<div id=\"api-reference\">\n<h3>API Reference</h3>\n<p>All commands should be documented in docstrings in <a href=\"https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\" rel=\"nofollow\">numpy\nformat</a>.</p>\n<p>API reference is available\n<a href=\"http://matrixscreener.readthedocs.org\" rel=\"nofollow\">online</a>, can be read with\n<a href=\"https://docs.python.org/3.4/library/pydoc.html\" rel=\"nofollow\">pydoc</a> or any\neditor/repl that does autocomplete with docstrings.</p>\n<p>In example:</p>\n<pre>pydoc matrixscreener\npydoc matrixscreener.cam\npydoc matrixscreener.experiment\npydoc matrixscreener.imagej\n</pre>\n</div>\n<div id=\"release-procedure\">\n<h3>Release procedure</h3>\n<ul>\n<li><p>Create\n<a href=\"https://docs.python.org/3.5/distutils/packageindex.html#the-pypirc-file\" rel=\"nofollow\">.pypirc</a>\nif missing.</p>\n<pre>[distutils]\nindex-servers=\n        pypi\n        pypitest\n\n[pypitest]\nrepository = https://testpypi.python.org/pypi\nusername = username\npassword = password\n\n[pypi]\nrepository = https://pypi.python.org/pypi\nusername = username\npassword = password\n</pre>\n</li>\n<li><p>Update <tt>changelog.md</tt></p>\n</li>\n<li><p>Update version in <tt>__init__.py</tt>, <tt>setup.py</tt> and <tt>doc/conf.py</tt></p>\n</li>\n<li><p>Git commit and tag version</p>\n</li>\n<li><p><tt><span class=\"pre\">./generate-rst.sh</span></tt> (pandoc needed)</p>\n</li>\n<li><p>Stage release:\n<tt>python setup.py sdist bdist_wheel upload <span class=\"pre\">-r</span> pypitest</tt></p>\n</li>\n<li><p>Release: <tt>python setup.py sdist bdist_wheel upload</tt></p>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3737498, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "e55c89a05379c62d9d11d2fd53533fef", "sha256": "50cac735c4a2900f483b93094aa9ba390f4cbed083113949bbeb827a933a71f5"}, "downloads": -1, "filename": "matrixscreener-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e55c89a05379c62d9d11d2fd53533fef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7787, "upload_time": "2015-01-20T10:50:08", "upload_time_iso_8601": "2015-01-20T10:50:08.135717Z", "url": "https://files.pythonhosted.org/packages/ce/fd/7997fd11032c3c781a338c8e8953f0bd1b14db24f0d09fd72cdf5f106dea/matrixscreener-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d3dcadec993f2ee4e9a2de3904fcc5df", "sha256": "95f90c37e98a4e92648f61d99867ab4ef898dc24237282bcaa61fc6445d59279"}, "downloads": -1, "filename": "matrixscreener-0.3.1.tar.gz", "has_sig": false, "md5_digest": "d3dcadec993f2ee4e9a2de3904fcc5df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8179, "upload_time": "2015-01-26T15:34:42", "upload_time_iso_8601": "2015-01-26T15:34:42.253733Z", "url": "https://files.pythonhosted.org/packages/bb/d1/d58dffd150811e17d9501aee594828d17fb9c6985253a6f34a4bc3603bf8/matrixscreener-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "aeedf1953df474085bcfb54988341f43", "sha256": "d4e24330d8cc36994c75d51945fccd81464f03b4d62e203c6beab46ee516f054"}, "downloads": -1, "filename": "matrixscreener-0.4.0.tar.gz", "has_sig": false, "md5_digest": "aeedf1953df474085bcfb54988341f43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10128, "upload_time": "2015-02-04T13:57:20", "upload_time_iso_8601": "2015-02-04T13:57:20.770448Z", "url": "https://files.pythonhosted.org/packages/f2/0c/174393bce94ce57972d4f46ae001cebf0e6f4ea6eaf3b2804f95f730dc75/matrixscreener-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "22906d85eab9e3212f1ba44f0f03f4de", "sha256": "6a366a437ceacdb22b0819eaa537a47b6a13c845b42a5eed3dd8cf5c41c89857"}, "downloads": -1, "filename": "matrixscreener-0.4.1.tar.gz", "has_sig": false, "md5_digest": "22906d85eab9e3212f1ba44f0f03f4de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10642, "upload_time": "2015-02-07T23:58:07", "upload_time_iso_8601": "2015-02-07T23:58:07.441245Z", "url": "https://files.pythonhosted.org/packages/46/1e/b70686869600081e1d35325888bebba6e748d1cc2945402bda3e9555a5b8/matrixscreener-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "0d8c7ac274000d36e1fa7b01a027b9a0", "sha256": "688ab453326c583e145a619ec9c07cca263b111364efcb4c350c72dee546161f"}, "downloads": -1, "filename": "matrixscreener-0.4.2.tar.gz", "has_sig": false, "md5_digest": "0d8c7ac274000d36e1fa7b01a027b9a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10767, "upload_time": "2015-02-10T13:09:46", "upload_time_iso_8601": "2015-02-10T13:09:46.555466Z", "url": "https://files.pythonhosted.org/packages/c2/69/a7b1ce9f2756e3e956bd4cfc19b9d36f8c5949b6a22897c1712650e2c4d2/matrixscreener-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "67a3d1edccb3d7ae37ceb0f156dea648", "sha256": "692809966665f4f94830275525150e7d9e650e1fa1ad18343c1dc5b9433511da"}, "downloads": -1, "filename": "matrixscreener-0.5.0.tar.gz", "has_sig": false, "md5_digest": "67a3d1edccb3d7ae37ceb0f156dea648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10112, "upload_time": "2015-02-13T00:21:14", "upload_time_iso_8601": "2015-02-13T00:21:14.956294Z", "url": "https://files.pythonhosted.org/packages/7a/2d/415c78f5854d4486bea26611278c53ec0001f6b31f4c067cf58b0d0882fd/matrixscreener-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "9117e8bbd96afc226f5ae2f426743994", "sha256": "c6c3eab97ad84e4e6a420cc0ed244098cf314d8b8dbf9e46158d135f01dd9651"}, "downloads": -1, "filename": "matrixscreener-0.5.1.tar.gz", "has_sig": false, "md5_digest": "9117e8bbd96afc226f5ae2f426743994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10123, "upload_time": "2015-02-13T00:38:30", "upload_time_iso_8601": "2015-02-13T00:38:30.686979Z", "url": "https://files.pythonhosted.org/packages/e0/98/c8b84a0a27ea540360b04178fae26d8d92fa9ff2e439cd15f09ab3e11cb6/matrixscreener-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "20baeacb0e9a0e518547dcb3c5b45d62", "sha256": "decbdfead4a7ca5982d340921ede3ca9eb914de7a6265e636dd1f5eb0e5e52e7"}, "downloads": -1, "filename": "matrixscreener-0.5.2.tar.gz", "has_sig": false, "md5_digest": "20baeacb0e9a0e518547dcb3c5b45d62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10155, "upload_time": "2015-02-19T11:54:29", "upload_time_iso_8601": "2015-02-19T11:54:29.455086Z", "url": "https://files.pythonhosted.org/packages/39/f9/59f624fdd53161d9c7fdc684a3601e06529011ed4a059fe642669661aead/matrixscreener-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5a346b927420bd2d6e86d4c94b6a5cc4", "sha256": "ffbcc25822fc14c6421706f6efe3e1df0d72f64df0c1645a9f43a66d3219f570"}, "downloads": -1, "filename": "matrixscreener-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a346b927420bd2d6e86d4c94b6a5cc4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 10292, "upload_time": "2016-05-25T09:15:31", "upload_time_iso_8601": "2016-05-25T09:15:31.202690Z", "url": "https://files.pythonhosted.org/packages/82/12/df0081c682c5a418301b935c64d732173169bdf99f19087ccb2feb59c077/matrixscreener-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a2c86f46622393de28cdaf6ca619648", "sha256": "a98e7d29dccb16c8b7610b49b6c5129ae436892f28d185f6b8c32634cc834e08"}, "downloads": -1, "filename": "matrixscreener-0.6.0.tar.gz", "has_sig": false, "md5_digest": "8a2c86f46622393de28cdaf6ca619648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8203, "upload_time": "2016-05-25T09:15:06", "upload_time_iso_8601": "2016-05-25T09:15:06.642568Z", "url": "https://files.pythonhosted.org/packages/de/cd/c34e0b32384f184fe1825acd52d64310a79c26ad337624771a70114c07d0/matrixscreener-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "a10321510e1de13be02be9a9a460332d", "sha256": "d0417ee88791f14874f69dc52e2d64c252009a167e3bb44473c8741d5873fc2f"}, "downloads": -1, "filename": "matrixscreener-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a10321510e1de13be02be9a9a460332d", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14755, "upload_time": "2016-05-25T09:29:38", "upload_time_iso_8601": "2016-05-25T09:29:38.798369Z", "url": "https://files.pythonhosted.org/packages/e1/b1/ed74b76ae59e51b3d5c574e0683459502df7d6c42c8a647ef697f9f8a323/matrixscreener-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce1a9b694a4ebae09969834ce42bb6fd", "sha256": "c898fe329a09918bdf10097642609ed6cc5be137acafc2eef9579bb88ab5833d"}, "downloads": -1, "filename": "matrixscreener-0.6.1.tar.gz", "has_sig": false, "md5_digest": "ce1a9b694a4ebae09969834ce42bb6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10990, "upload_time": "2016-05-25T09:29:27", "upload_time_iso_8601": "2016-05-25T09:29:27.910662Z", "url": "https://files.pythonhosted.org/packages/f8/f0/fa2d42628fd53e61974c7b1d0b0d648790d8fe3fd9cc88498c5ffc90165a/matrixscreener-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a10321510e1de13be02be9a9a460332d", "sha256": "d0417ee88791f14874f69dc52e2d64c252009a167e3bb44473c8741d5873fc2f"}, "downloads": -1, "filename": "matrixscreener-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a10321510e1de13be02be9a9a460332d", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14755, "upload_time": "2016-05-25T09:29:38", "upload_time_iso_8601": "2016-05-25T09:29:38.798369Z", "url": "https://files.pythonhosted.org/packages/e1/b1/ed74b76ae59e51b3d5c574e0683459502df7d6c42c8a647ef697f9f8a323/matrixscreener-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce1a9b694a4ebae09969834ce42bb6fd", "sha256": "c898fe329a09918bdf10097642609ed6cc5be137acafc2eef9579bb88ab5833d"}, "downloads": -1, "filename": "matrixscreener-0.6.1.tar.gz", "has_sig": false, "md5_digest": "ce1a9b694a4ebae09969834ce42bb6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10990, "upload_time": "2016-05-25T09:29:27", "upload_time_iso_8601": "2016-05-25T09:29:27.910662Z", "url": "https://files.pythonhosted.org/packages/f8/f0/fa2d42628fd53e61974c7b1d0b0d648790d8fe3fd9cc88498c5ffc90165a/matrixscreener-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:14 2020"}