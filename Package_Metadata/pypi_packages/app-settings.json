{"info": {"author": "Ilya Dunin", "author_email": "ilya.mirea@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "app\\_settings module\n====================\n\nSimplify usage of YAML files for application configuration.\n\nInspired by Ruby Gem \"config\" https://github.com/railsconfig/config But\nnot all features implemented yet.\n\nUsage example\n-------------\n\nInstallation: ``pip install app_settings``\n\nCreate sample app with following structure:\n\n.. code:: bash\n\n    /my_app\n      my_app.py\n      /config\n        settings.yml  # at least one *.yml file required\n        additional_settings.yml\n        /settings  # use this only in case if you need different settings for your environments\n          production.yml\n          production.db.yml\n          development.yml\n          development.db.yml   \n\n``AppSettings`` -- singleton, so it is not possible to create more than\none instance of config object.\n\nBy default, script will try to load all ``./config/*.yml`` and, if exist\n``./config/settings/${APP_ENV}*.yml`` configuration files.\n\nTake note, that all variables defined in ``./config/*.yml`` files will\nbe overridden by variables from ``./config/settings/${APP_ENV}.yml``.\n\nAlso, ``./config/*.yml`` loaded in alphabetical order, so if you will\ndefine variable VAR in ``additional_settings.yml`` it will be redefined\nby VAR from ``settings.yml``.\n\nIf you have settings, which not depends on the environment, simply use\n``./config/{file name}.yml``; In case, when you need settings, which\ndepends on the environment, use ``./config/settings/{ENV}.yml``.\n\nEnvironment (development/stage/production etc)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your application use more than one environment, for example\n``development`` and ``production``, you can specify what config file to\nload by setting env variable\n\n.. code:: python\n\n    # before your application starts\n    # export APP_ENV='production' or APP_ENV='production' python my_app.py \n\n    from app_settings import AppSettings\n\n    cfg = AppSettings()\n\nBy default, if no ``APP_ENV`` is given, file\n``./config/settings/development.yml`` will be loaded, that's why this\nfile is required.\n\nAlso it is possible to redefine name of variable.\n\n.. code:: python\n\n    # export TEST_ENV='production'\n\n    from app_settings import AppSettings\n\n    cfg = AppSettings(env_name='TEST_ENV')\n\nWorking with environment variables\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is possible to redefine or set settings from environment variables.\nAppSettings will read all env variables with ``SETTINGS`` prefix (by\ndefault).\n\n.. code:: yaml\n\n    # settings.yml\n    level1:\n      redefined: 'redefined'\n      not_redefined: 'not redefined'\n\n.. code:: python\n\n    # export SETTINGS__MY_VAR='test'\n    # export SETTINGS__LEVEL1__REDEFINED='val'\n\n    from app_settings import AppSettings\n\n    cfg = AppSettings()\n    print(cfg.my_var)  # 'test'\n    print(cfg.level1.redefined)  # 'val'\n    print(cfg.level1.not_redefined)  # 'not redefined'\n\nYou can setup your own prefix:\n\n.. code:: python\n\n    # export MYPREFIX__MY_VAR='test'\n    # export MYPREFIX__LEVEL1__REDEFINED='val'\n\n    from app_settings import AppSettings\n\n    cfg = AppSettings(prefix='myprefix')\n    print(cfg.my_var)  # 'test'\n    print(cfg.level1.redefined)  # 'val'\n\nAlso it is possible to setup environment variable splitter (default:\n``__``).\n\n.. code:: python\n\n    # export SETTINGS.MY_VAR='test'\n    # export SETTINGS.LEVEL1.REDEFINED='val'\n\n    from app_settings import AppSettings\n\n    cfg = AppSettings(splitter='.')\n    print(cfg.my_var)  # 'test'\n    print(cfg.level1.redefined)  # 'val'\n\nIf you don't need to set/redefine settings from environment variables,\nuse ``use_env`` flag.\n\n.. code:: python\n\n    from app_settings import AppSettings\n    cfg = AppSettings(use_env=False)\n\nSuppress KeyError exception\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn case, if you don't want to receive KeyError exception if key not\ndefined in file, you can use ``raise_error`` flag. By default: True\n\n.. code:: python\n\n    from app_settings import AppSettings\n    cfg = AppSettings(raise_error=False)\n\n    key = cfg.this_value_not_exist  # key == None\n\nConfig path\n~~~~~~~~~~~\n\nYou can redefine default config path\n\n.. code:: python\n\n    from app_settings import AppSettings\n\n    cfg = AppSettings(configs_path='my_config_path')\n\nRun tests\n---------\n\n.. code:: bash\n\n    cd app_settings\n    python -m pytest -v --alluredir=./tests/results -n `nproc` --cov=app_settings --cov-config .coveragerc ./tests\n\nSample usage for tests\n~~~~~~~~~~~~~~~~~~~~~~\n\nRun these commands to create sample files structure\n\n.. code:: bash\n\n    $ cd <your project dir> \n    $ mkdir -p config/settings && \\ \n        touch config/settings.yml && \\\n        touch config/settings/{production.yml,testing.yml} && \\\n        echo \"implicity_wait: 5\" > config/settings.yml && \\\n        echo 'search_text: \"production environment\"' > config/settings/production.yml && \\\n        echo 'search_text: \"testing environment\"' > config/settings/testing.yml\n    $ touch test_with_app_settings.py\n\nInstall all python requirements:\n\n.. code:: bash\n\n    pip install selenium pytest app_settings\n\nCopy code to ``test_with_app_settings.py``\n\n.. code:: python\n\n    ### Example, don't use it in your code\n    import os\n    os.environ['TEST_ENV'] = 'production'\n    ### example\n\n    import pytest\n    from app_settings import AppSettings\n    from selenium import webdriver\n\n\n    @pytest.fixture(scope='session')\n    def settings():\n        cfg = AppSettings(env_name='TEST_ENV')\n        return cfg\n\n\n    @pytest.fixture\n    def browser(settings):\n        driver = webdriver.Chrome()\n        driver.implicitly_wait(settings.implicity_wait)\n        yield driver\n        driver.close()\n\n\n    def test_example(browser, settings):\n        browser.get(\"https://ya.ru\")\n        search_field = browser.find_element_by_id('text')\n        search_field.send_keys(settings.search_text)  # depending on env\n        search_button = browser.find_element_by_tag_name('button')\n        search_button.click()\n        browser.find_elements_by_css_selector(\"div ul li\")\n\nTODO\n----\n\n1. Add reload feature\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ivdunin/app_settings", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "app-settings", "package_url": "https://pypi.org/project/app-settings/", "platform": "", "project_url": "https://pypi.org/project/app-settings/", "project_urls": {"Homepage": "https://github.com/ivdunin/app_settings"}, "release_url": "https://pypi.org/project/app-settings/1.3/", "requires_dist": ["PyYAML (>=3.13)"], "requires_python": "", "summary": "YAML for application configuration, lite version (inspired by Ruby gem \"config\")", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simplify usage of YAML files for application configuration.</p>\n<p>Inspired by Ruby Gem \u201cconfig\u201d <a href=\"https://github.com/railsconfig/config\" rel=\"nofollow\">https://github.com/railsconfig/config</a> But\nnot all features implemented yet.</p>\n<div id=\"usage-example\">\n<h2>Usage example</h2>\n<p>Installation: <tt>pip install app_settings</tt></p>\n<p>Create sample app with following structure:</p>\n<pre>/my_app\n  my_app.py\n  /config\n    settings.yml  <span class=\"c1\"># at least one *.yml file required\n</span>    additional_settings.yml\n    /settings  <span class=\"c1\"># use this only in case if you need different settings for your environments\n</span>      production.yml\n      production.db.yml\n      development.yml\n      development.db.yml\n</pre>\n<p><tt>AppSettings</tt> \u2013 singleton, so it is not possible to create more than\none instance of config object.</p>\n<p>By default, script will try to load all <tt><span class=\"pre\">./config/*.yml</span></tt> and, if exist\n<tt><span class=\"pre\">./config/settings/${APP_ENV}*.yml</span></tt> configuration files.</p>\n<p>Take note, that all variables defined in <tt><span class=\"pre\">./config/*.yml</span></tt> files will\nbe overridden by variables from <tt><span class=\"pre\">./config/settings/${APP_ENV}.yml</span></tt>.</p>\n<p>Also, <tt><span class=\"pre\">./config/*.yml</span></tt> loaded in alphabetical order, so if you will\ndefine variable VAR in <tt>additional_settings.yml</tt> it will be redefined\nby VAR from <tt>settings.yml</tt>.</p>\n<p>If you have settings, which not depends on the environment, simply use\n<tt><span class=\"pre\">./config/{file</span> <span class=\"pre\">name}.yml</span></tt>; In case, when you need settings, which\ndepends on the environment, use <tt><span class=\"pre\">./config/settings/{ENV}.yml</span></tt>.</p>\n<div id=\"environment-development-stage-production-etc\">\n<h3>Environment (development/stage/production etc)</h3>\n<p>If your application use more than one environment, for example\n<tt>development</tt> and <tt>production</tt>, you can specify what config file to\nload by setting env variable</p>\n<pre><span class=\"c1\"># before your application starts</span>\n<span class=\"c1\"># export APP_ENV='production' or APP_ENV='production' python my_app.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">()</span>\n</pre>\n<p>By default, if no <tt>APP_ENV</tt> is given, file\n<tt>./config/settings/development.yml</tt> will be loaded, that\u2019s why this\nfile is required.</p>\n<p>Also it is possible to redefine name of variable.</p>\n<pre><span class=\"c1\"># export TEST_ENV='production'</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">env_name</span><span class=\"o\">=</span><span class=\"s1\">'TEST_ENV'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"working-with-environment-variables\">\n<h3>Working with environment variables</h3>\n<p>It is possible to redefine or set settings from environment variables.\nAppSettings will read all env variables with <tt>SETTINGS</tt> prefix (by\ndefault).</p>\n<pre><span class=\"c1\"># settings.yml</span>\n<span class=\"nt\">level1</span><span class=\"p\">:</span>\n  <span class=\"nt\">redefined</span><span class=\"p\">:</span> <span class=\"s\">'redefined'</span>\n  <span class=\"nt\">not_redefined</span><span class=\"p\">:</span> <span class=\"s\">'not</span><span class=\"nv\"> </span><span class=\"s\">redefined'</span>\n</pre>\n<pre><span class=\"c1\"># export SETTINGS__MY_VAR='test'</span>\n<span class=\"c1\"># export SETTINGS__LEVEL1__REDEFINED='val'</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">my_var</span><span class=\"p\">)</span>  <span class=\"c1\"># 'test'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">level1</span><span class=\"o\">.</span><span class=\"n\">redefined</span><span class=\"p\">)</span>  <span class=\"c1\"># 'val'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">level1</span><span class=\"o\">.</span><span class=\"n\">not_redefined</span><span class=\"p\">)</span>  <span class=\"c1\"># 'not redefined'</span>\n</pre>\n<p>You can setup your own prefix:</p>\n<pre><span class=\"c1\"># export MYPREFIX__MY_VAR='test'</span>\n<span class=\"c1\"># export MYPREFIX__LEVEL1__REDEFINED='val'</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'myprefix'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">my_var</span><span class=\"p\">)</span>  <span class=\"c1\"># 'test'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">level1</span><span class=\"o\">.</span><span class=\"n\">redefined</span><span class=\"p\">)</span>  <span class=\"c1\"># 'val'</span>\n</pre>\n<p>Also it is possible to setup environment variable splitter (default:\n<tt>__</tt>).</p>\n<pre><span class=\"c1\"># export SETTINGS.MY_VAR='test'</span>\n<span class=\"c1\"># export SETTINGS.LEVEL1.REDEFINED='val'</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">splitter</span><span class=\"o\">=</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">my_var</span><span class=\"p\">)</span>  <span class=\"c1\"># 'test'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">level1</span><span class=\"o\">.</span><span class=\"n\">redefined</span><span class=\"p\">)</span>  <span class=\"c1\"># 'val'</span>\n</pre>\n<p>If you don\u2019t need to set/redefine settings from environment variables,\nuse <tt>use_env</tt> flag.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">use_env</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"suppress-keyerror-exception\">\n<h3>Suppress KeyError exception</h3>\n<p>In case, if you don\u2019t want to receive KeyError exception if key not\ndefined in file, you can use <tt>raise_error</tt> flag. By default: True</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">raise_error</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">this_value_not_exist</span>  <span class=\"c1\"># key == None</span>\n</pre>\n</div>\n<div id=\"config-path\">\n<h3>Config path</h3>\n<p>You can redefine default config path</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">configs_path</span><span class=\"o\">=</span><span class=\"s1\">'my_config_path'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"run-tests\">\n<h2>Run tests</h2>\n<pre><span class=\"nb\">cd</span> app_settings\npython -m pytest -v --alluredir<span class=\"o\">=</span>./tests/results -n <span class=\"sb\">`</span>nproc<span class=\"sb\">`</span> --cov<span class=\"o\">=</span>app_settings --cov-config .coveragerc ./tests\n</pre>\n<div id=\"sample-usage-for-tests\">\n<h3>Sample usage for tests</h3>\n<p>Run these commands to create sample files structure</p>\n<pre>$ <span class=\"nb\">cd</span> &lt;your project dir&gt;\n$ mkdir -p config/settings <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>    touch config/settings.yml <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>    touch config/settings/<span class=\"o\">{</span>production.yml,testing.yml<span class=\"o\">}</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>    <span class=\"nb\">echo</span> <span class=\"s2\">\"implicity_wait: 5\"</span> &gt; config/settings.yml <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>    <span class=\"nb\">echo</span> <span class=\"s1\">'search_text: \"production environment\"'</span> &gt; config/settings/production.yml <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>    <span class=\"nb\">echo</span> <span class=\"s1\">'search_text: \"testing environment\"'</span> &gt; config/settings/testing.yml\n$ touch test_with_app_settings.py\n</pre>\n<p>Install all python requirements:</p>\n<pre>pip install selenium pytest app_settings\n</pre>\n<p>Copy code to <tt>test_with_app_settings.py</tt></p>\n<pre><span class=\"c1\">### Example, don't use it in your code</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'TEST_ENV'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'production'</span>\n<span class=\"c1\">### example</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">app_settings</span> <span class=\"kn\">import</span> <span class=\"n\">AppSettings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s1\">'session'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">settings</span><span class=\"p\">():</span>\n    <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">AppSettings</span><span class=\"p\">(</span><span class=\"n\">env_name</span><span class=\"o\">=</span><span class=\"s1\">'TEST_ENV'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cfg</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">browser</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">):</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Chrome</span><span class=\"p\">()</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">implicitly_wait</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">implicity_wait</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">driver</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">browser</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">):</span>\n    <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"https://ya.ru\"</span><span class=\"p\">)</span>\n    <span class=\"n\">search_field</span> <span class=\"o\">=</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">find_element_by_id</span><span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">)</span>\n    <span class=\"n\">search_field</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">search_text</span><span class=\"p\">)</span>  <span class=\"c1\"># depending on env</span>\n    <span class=\"n\">search_button</span> <span class=\"o\">=</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">find_element_by_tag_name</span><span class=\"p\">(</span><span class=\"s1\">'button'</span><span class=\"p\">)</span>\n    <span class=\"n\">search_button</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n    <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_css_selector</span><span class=\"p\">(</span><span class=\"s2\">\"div ul li\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ol>\n<li>Add reload feature</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 5744774, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3c93435603d1254cf0a5a6c38d5bf285", "sha256": "6de12045ce668d66ff72811f9883b3090850bb546beee70e96037eee4f4047e0"}, "downloads": -1, "filename": "app_settings-1.0.tar.gz", "has_sig": false, "md5_digest": "3c93435603d1254cf0a5a6c38d5bf285", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6479, "upload_time": "2019-03-10T19:57:10", "upload_time_iso_8601": "2019-03-10T19:57:10.802432Z", "url": "https://files.pythonhosted.org/packages/5a/5c/676a153b8c9fe47a8441be003cddff428edf3dd576778ae11520333fc1cb/app_settings-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b642efe912c5fc9659939c8d5ab3086e", "sha256": "bcce753086919f6d738328b2c1a2a6f08b631247af021bb502f062719e6b939e"}, "downloads": -1, "filename": "app_settings-1.1.tar.gz", "has_sig": false, "md5_digest": "b642efe912c5fc9659939c8d5ab3086e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6681, "upload_time": "2019-03-10T20:57:57", "upload_time_iso_8601": "2019-03-10T20:57:57.608040Z", "url": "https://files.pythonhosted.org/packages/91/5a/8e4155516f3e4c411c25016f9b940daee6e3656f88e78f3f337a3721624c/app_settings-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "86eb7e4697b4332ecfd872fd6157a954", "sha256": "4d0d3852327f87873e5a8352a7deee88be2ca1ab98d5175760fba99138170a88"}, "downloads": -1, "filename": "app_settings-1.2.tar.gz", "has_sig": false, "md5_digest": "86eb7e4697b4332ecfd872fd6157a954", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6839, "upload_time": "2019-03-13T16:03:42", "upload_time_iso_8601": "2019-03-13T16:03:42.446349Z", "url": "https://files.pythonhosted.org/packages/4e/44/6c65372a83657f3de5f106f2aa02575de9501ded54c9ef67202379ea15b3/app_settings-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "5a65ab739501d9e13516f5032d91d632", "sha256": "5a0d35589d6a43ff62345a868d3d2dc6efe40431fc0072ad886d1df6bdace5e7"}, "downloads": -1, "filename": "app_settings-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5a65ab739501d9e13516f5032d91d632", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5863, "upload_time": "2019-08-28T19:06:38", "upload_time_iso_8601": "2019-08-28T19:06:38.145080Z", "url": "https://files.pythonhosted.org/packages/cc/22/2feee37be066cec711c911cea89681ca15e08101e498bc79c2a58fef6aa9/app_settings-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b31d28c49f757a28a7421508baa667d2", "sha256": "d24ead302e5bb1736bf4bd74c9fa7b1cd6867d65fc94346875cc3a208aa1f7db"}, "downloads": -1, "filename": "app_settings-1.3.tar.gz", "has_sig": false, "md5_digest": "b31d28c49f757a28a7421508baa667d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5153, "upload_time": "2019-08-28T19:06:40", "upload_time_iso_8601": "2019-08-28T19:06:40.254812Z", "url": "https://files.pythonhosted.org/packages/26/e9/5505fd74c8d60e51ecb8b945a00caacdf8703206393b860056eab5ab0846/app_settings-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a65ab739501d9e13516f5032d91d632", "sha256": "5a0d35589d6a43ff62345a868d3d2dc6efe40431fc0072ad886d1df6bdace5e7"}, "downloads": -1, "filename": "app_settings-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5a65ab739501d9e13516f5032d91d632", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5863, "upload_time": "2019-08-28T19:06:38", "upload_time_iso_8601": "2019-08-28T19:06:38.145080Z", "url": "https://files.pythonhosted.org/packages/cc/22/2feee37be066cec711c911cea89681ca15e08101e498bc79c2a58fef6aa9/app_settings-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b31d28c49f757a28a7421508baa667d2", "sha256": "d24ead302e5bb1736bf4bd74c9fa7b1cd6867d65fc94346875cc3a208aa1f7db"}, "downloads": -1, "filename": "app_settings-1.3.tar.gz", "has_sig": false, "md5_digest": "b31d28c49f757a28a7421508baa667d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5153, "upload_time": "2019-08-28T19:06:40", "upload_time_iso_8601": "2019-08-28T19:06:40.254812Z", "url": "https://files.pythonhosted.org/packages/26/e9/5505fd74c8d60e51ecb8b945a00caacdf8703206393b860056eab5ab0846/app_settings-1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:35 2020"}