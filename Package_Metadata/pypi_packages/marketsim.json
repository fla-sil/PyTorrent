{"info": {"author": "Mahiro Ando", "author_email": "ma514y@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# marketsim\n\nThis utility helps simulate a stock market.\n\n* Market orders and limit orders\n* Limit order books\n* Continuous tradnig and auction\n\n## Example: Continuous Trading\n\n```\nfrom marketsim import Market\nmarket = Market()\n\nmarket.execute_order('buy', 'symbol1', quantity=10, price=100)\n    # places a limit order and attempts to execute it immediately\n    # returns an empty array (no executions at this point)\n\nmarket.execute_order('sell', 'symbol1', quantity=10, price=None)\n    # places a market order and attempts to execute it immediately\n    # returns a list of Execution object(s)\n```\n\n## Example: Auction\n\n```\nfrom marketsim import Market\nmarket = Market()\n\nmarket.place_order('buy', 'symbol1', quantity=10, price=100, time=0)\n    # places a limit order without execution\n\nmarket.place_order('sell', 'symbol1', quantity=10, price=None, time=0)\n    # places a market order without execution\n\nmarket.execute()\n    # executes all trades at once\n    # returns a list of Execution object(s)\n\n# Note:\n# A constant \"time\" value is specified to effectively disable time priority,\n# which ensures all limit orders at the same price will be evenly filled.\n```\n\n## class Market\n\nA Market object manages order books of multiple symbols.\n\n```\nfrom marketsim import Market, Product, Order, Side\nmarket = Market()\n\n# Place and execute orders (returns a list of Execution objects)\nmarket.execute(Order(Side.BUY, 'symbol1', quantity=10, price=100))\nmarket.execute_order(Side.BUY, 'symbol1', quantity=10, price=100)\nmarket.execute_order('buy', 'symbol1', quantity=10, price=100)\n\n# Place orders without execution\nmarket.place(Order(Side.SELL, 'symbol1', quantity=10, price=100))\nmarket.place_order(Side.SELL, 'symbol1', quantity=10, price=100)\nmarket.place_order('sell', 'symbol1', quantity=10, price=100)\n\n# Execute orders that have been placed (returns a list of Execution objects)\nmarket.execute()\n\n# Cancel order by object\norder = Order(Side.BUY, 'symbol1', quantity=10, price=100)\nmarket.place(order)\nmarket.cancel(order)\n    # Note: order ID is internally assigned as the Python object ID by default\n\n# Cancel order by specific ID\nmarket.place_order(Side.SELL, 'symbol1', quantity=10, price=100, id='order #1')\nmarket.cancel_order(id='order #1')\n\n# Retrieve information per symbol\nmarket['symbol1'].bid_price\nmarket['symbol1'].ask_price\nmarket['symbol1'].last_price\n\n# Retrieve Product objects from a market object\nmarket = Market()\nproduct = market.get_product('symbol1') # returns None\nproduct = market.ensure_product('symbol1') # creates a new product if not existing\nproduct = market.get_product('symbol1') # returns the object\nproduct = market['symbol1'] # synonym for get_product()\nmarket.set_product('symbol2', Product('symbol2'))\nmarket.['symbol2'] = Product('symbol2')\n\n# Get all products\nmarket.get_products() # returns a list of Product objects\n\n# Iterate all products\nfor product in market:\n    pass\n\n```\n\n## class Product\n\nA Product object represents an order book of a single symbol.\n\n```\nfrom marketsim import Market, Product, Order, Side\n\n# Create a standalone product\nproduct = Product('symbol1')\n\n# Information per symbol\nproduct.bid_price # initially None\nproduct.ask_price # initially None\nproduct.last_price # initially None\n\n# Order book\nproduct.format_order_book()\n\n# Example output:\n\"\"\"\n| BID    | PRICE | ASK    |\n|========|=======|========|\n|        | 140   | 20 (2) |\n|        | 130   | 20 (2) |\n| 20 (2) | 110   |        |\n| 20 (2) | 100   |        |\n\"\"\"\n\n# Order queues\nproduct.order_queues[Side.BUY]\nproduct.order_queues[Side.SELL]\nproduct[Side.BUY] # synonym for product.order_queues[Side.BUY]\nproduct[Side.SELL] # synonym for product.order_queues[Side.SELL]\n```\n\n## class Order, Side\n\nAn Order object can be used to place an order into a Market instance.\n\n```\nfrom marketsim import Order, Side\n\n# Limit order\norder = Order(Side.BUY, 'symbol1', quantity=10, price=100)\n\n# Market order\norder = Order(Side.BUY, 'symbol1', quantity=10)\n\n# Order with ID (useful when cancelling an order)\norder = Order(Side.BUY, 'symbol1', quantity=10, id='order #1')\n\n# Order with time (useful to control price-time priority)\norder = Order(Side.BUY, 'symbol1', quantity=10, time=12345)\n    # Default: Unix timestamp in seconds with a fractional value in microseconds\n    # Specify a constant value across all placed orders to simulate pro-rata.\n\n# Side can be specified in alternative ways\norder = Order(Side.BUY, 'symbol1', quantity=10)\norder = Order('BUY', 'symbol1', quantity=10)\norder = Order('Buy', 'symbol1', quantity=10)\norder = Order('buy', 'symbol1', quantity=10)\norder = Order(1, 'symbol1', quantity=10) # 1 means BUY, as in FIX tag 54\n\norder = Order(Side.SELL, 'symbol1', quantity=10)\norder = Order('SELL', 'symbol1', quantity=10)\norder = Order('Sell', 'symbol1', quantity=10)\norder = Order('sell', 'symbol1', quantity=10)\norder = Order(2, 'symbol1', quantity=10) # 2 means SELL, as in FIX tag 54\n\n# Special case for a cancel\norder = Order(id='order #1')\n\n# Retrieve individual attributes\norder.side # Side object\norder.symbol\norder.quantity\norder.price (None if market order)\norder.id\norder.time\n```\n\n## class Execution, Fill\n\nAn Execution object represents an execution result where bid and ask orders are matched.\n\nIn general, when execution is invoked for a market, zero or more execution objects are returned. For example, one bid order can be matched with multiple ask orders of smaller quantity, or it could be queued without being matched with any orders at all.\n\nEach Execution object contains bid- and ask-sides of Fill objects.\n\n```\nfrom marketsim import Market\n\nmarket = Market()\nmarket.place_order('buy', 'symbol1', quantity=10, price=100)\nmarket.place_order('sell', 'symbol1', quantity=10, price=100)\nexecutions = market.execute()\n\nfor execution in executions:\n    execution.quantity # executed number of shares\n    execution.price    # executed price\n    execution.bid_fill # bid-side Fill object\n    execution.ask_fill # ask-side Fill object\n\n    execution.bid_fill.order    # original Order object\n    execution.bid_fill.quantity # same as execution.quantity\n    execution.bid_fill.price    # same as execution.price\n    execution.bid_fill.order_quantity # original order quantity\n    execution.bid_fill.order_price    # original order price (None if market order)\n    execution.bid_fill.cumulative_quantity # cumulative quantity filled for the order entry\n```\n\n## class OrderQueue, OrderStat\n\nAn OrderQueue object maintains a queue of order entries on one side (either bid or ask).\n\n```\nfrom marketsim import Market, Side\nmarket = Market()\nmarket.place_order(...)\nmarket.place_order(...)\n\nproduct = market['symbol1']\norder_queue = product[Side.BUY]\n\n# Aggregated volume/count\norder_queue.market_order_volume\norder_queue.market_order_count\norder_queue.limit_order_volume\norder_queue.limit_order_count\n\norder_stats = order_queue.get_order_book() # returns a list of OrderStat objects\n\n# Individual limit order volume/count per price\nfor order_stat in order_stats:\n    order_stat.price\n    order_stat.volume\n    order_stat.count\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mahiro/python-marketsim", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "marketsim", "package_url": "https://pypi.org/project/marketsim/", "platform": "", "project_url": "https://pypi.org/project/marketsim/", "project_urls": {"Homepage": "https://github.com/mahiro/python-marketsim"}, "release_url": "https://pypi.org/project/marketsim/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Stock market simulation", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>marketsim</h1>\n<p>This utility helps simulate a stock market.</p>\n<ul>\n<li>Market orders and limit orders</li>\n<li>Limit order books</li>\n<li>Continuous tradnig and auction</li>\n</ul>\n<h2>Example: Continuous Trading</h2>\n<pre><code>from marketsim import Market\nmarket = Market()\n\nmarket.execute_order('buy', 'symbol1', quantity=10, price=100)\n    # places a limit order and attempts to execute it immediately\n    # returns an empty array (no executions at this point)\n\nmarket.execute_order('sell', 'symbol1', quantity=10, price=None)\n    # places a market order and attempts to execute it immediately\n    # returns a list of Execution object(s)\n</code></pre>\n<h2>Example: Auction</h2>\n<pre><code>from marketsim import Market\nmarket = Market()\n\nmarket.place_order('buy', 'symbol1', quantity=10, price=100, time=0)\n    # places a limit order without execution\n\nmarket.place_order('sell', 'symbol1', quantity=10, price=None, time=0)\n    # places a market order without execution\n\nmarket.execute()\n    # executes all trades at once\n    # returns a list of Execution object(s)\n\n# Note:\n# A constant \"time\" value is specified to effectively disable time priority,\n# which ensures all limit orders at the same price will be evenly filled.\n</code></pre>\n<h2>class Market</h2>\n<p>A Market object manages order books of multiple symbols.</p>\n<pre><code>from marketsim import Market, Product, Order, Side\nmarket = Market()\n\n# Place and execute orders (returns a list of Execution objects)\nmarket.execute(Order(Side.BUY, 'symbol1', quantity=10, price=100))\nmarket.execute_order(Side.BUY, 'symbol1', quantity=10, price=100)\nmarket.execute_order('buy', 'symbol1', quantity=10, price=100)\n\n# Place orders without execution\nmarket.place(Order(Side.SELL, 'symbol1', quantity=10, price=100))\nmarket.place_order(Side.SELL, 'symbol1', quantity=10, price=100)\nmarket.place_order('sell', 'symbol1', quantity=10, price=100)\n\n# Execute orders that have been placed (returns a list of Execution objects)\nmarket.execute()\n\n# Cancel order by object\norder = Order(Side.BUY, 'symbol1', quantity=10, price=100)\nmarket.place(order)\nmarket.cancel(order)\n    # Note: order ID is internally assigned as the Python object ID by default\n\n# Cancel order by specific ID\nmarket.place_order(Side.SELL, 'symbol1', quantity=10, price=100, id='order #1')\nmarket.cancel_order(id='order #1')\n\n# Retrieve information per symbol\nmarket['symbol1'].bid_price\nmarket['symbol1'].ask_price\nmarket['symbol1'].last_price\n\n# Retrieve Product objects from a market object\nmarket = Market()\nproduct = market.get_product('symbol1') # returns None\nproduct = market.ensure_product('symbol1') # creates a new product if not existing\nproduct = market.get_product('symbol1') # returns the object\nproduct = market['symbol1'] # synonym for get_product()\nmarket.set_product('symbol2', Product('symbol2'))\nmarket.['symbol2'] = Product('symbol2')\n\n# Get all products\nmarket.get_products() # returns a list of Product objects\n\n# Iterate all products\nfor product in market:\n    pass\n\n</code></pre>\n<h2>class Product</h2>\n<p>A Product object represents an order book of a single symbol.</p>\n<pre><code>from marketsim import Market, Product, Order, Side\n\n# Create a standalone product\nproduct = Product('symbol1')\n\n# Information per symbol\nproduct.bid_price # initially None\nproduct.ask_price # initially None\nproduct.last_price # initially None\n\n# Order book\nproduct.format_order_book()\n\n# Example output:\n\"\"\"\n| BID    | PRICE | ASK    |\n|========|=======|========|\n|        | 140   | 20 (2) |\n|        | 130   | 20 (2) |\n| 20 (2) | 110   |        |\n| 20 (2) | 100   |        |\n\"\"\"\n\n# Order queues\nproduct.order_queues[Side.BUY]\nproduct.order_queues[Side.SELL]\nproduct[Side.BUY] # synonym for product.order_queues[Side.BUY]\nproduct[Side.SELL] # synonym for product.order_queues[Side.SELL]\n</code></pre>\n<h2>class Order, Side</h2>\n<p>An Order object can be used to place an order into a Market instance.</p>\n<pre><code>from marketsim import Order, Side\n\n# Limit order\norder = Order(Side.BUY, 'symbol1', quantity=10, price=100)\n\n# Market order\norder = Order(Side.BUY, 'symbol1', quantity=10)\n\n# Order with ID (useful when cancelling an order)\norder = Order(Side.BUY, 'symbol1', quantity=10, id='order #1')\n\n# Order with time (useful to control price-time priority)\norder = Order(Side.BUY, 'symbol1', quantity=10, time=12345)\n    # Default: Unix timestamp in seconds with a fractional value in microseconds\n    # Specify a constant value across all placed orders to simulate pro-rata.\n\n# Side can be specified in alternative ways\norder = Order(Side.BUY, 'symbol1', quantity=10)\norder = Order('BUY', 'symbol1', quantity=10)\norder = Order('Buy', 'symbol1', quantity=10)\norder = Order('buy', 'symbol1', quantity=10)\norder = Order(1, 'symbol1', quantity=10) # 1 means BUY, as in FIX tag 54\n\norder = Order(Side.SELL, 'symbol1', quantity=10)\norder = Order('SELL', 'symbol1', quantity=10)\norder = Order('Sell', 'symbol1', quantity=10)\norder = Order('sell', 'symbol1', quantity=10)\norder = Order(2, 'symbol1', quantity=10) # 2 means SELL, as in FIX tag 54\n\n# Special case for a cancel\norder = Order(id='order #1')\n\n# Retrieve individual attributes\norder.side # Side object\norder.symbol\norder.quantity\norder.price (None if market order)\norder.id\norder.time\n</code></pre>\n<h2>class Execution, Fill</h2>\n<p>An Execution object represents an execution result where bid and ask orders are matched.</p>\n<p>In general, when execution is invoked for a market, zero or more execution objects are returned. For example, one bid order can be matched with multiple ask orders of smaller quantity, or it could be queued without being matched with any orders at all.</p>\n<p>Each Execution object contains bid- and ask-sides of Fill objects.</p>\n<pre><code>from marketsim import Market\n\nmarket = Market()\nmarket.place_order('buy', 'symbol1', quantity=10, price=100)\nmarket.place_order('sell', 'symbol1', quantity=10, price=100)\nexecutions = market.execute()\n\nfor execution in executions:\n    execution.quantity # executed number of shares\n    execution.price    # executed price\n    execution.bid_fill # bid-side Fill object\n    execution.ask_fill # ask-side Fill object\n\n    execution.bid_fill.order    # original Order object\n    execution.bid_fill.quantity # same as execution.quantity\n    execution.bid_fill.price    # same as execution.price\n    execution.bid_fill.order_quantity # original order quantity\n    execution.bid_fill.order_price    # original order price (None if market order)\n    execution.bid_fill.cumulative_quantity # cumulative quantity filled for the order entry\n</code></pre>\n<h2>class OrderQueue, OrderStat</h2>\n<p>An OrderQueue object maintains a queue of order entries on one side (either bid or ask).</p>\n<pre><code>from marketsim import Market, Side\nmarket = Market()\nmarket.place_order(...)\nmarket.place_order(...)\n\nproduct = market['symbol1']\norder_queue = product[Side.BUY]\n\n# Aggregated volume/count\norder_queue.market_order_volume\norder_queue.market_order_count\norder_queue.limit_order_volume\norder_queue.limit_order_count\n\norder_stats = order_queue.get_order_book() # returns a list of OrderStat objects\n\n# Individual limit order volume/count per price\nfor order_stat in order_stats:\n    order_stat.price\n    order_stat.volume\n    order_stat.count\n</code></pre>\n\n          </div>"}, "last_serial": 6639288, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d29b3ae2a0c892f7a8fef6e108e798cd", "sha256": "6b3e0def9a40b0e4c80641a26e78471e3931e3672d642cfe1227efc002ee435c"}, "downloads": -1, "filename": "marketsim-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d29b3ae2a0c892f7a8fef6e108e798cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15330, "upload_time": "2020-02-16T08:10:23", "upload_time_iso_8601": "2020-02-16T08:10:23.760869Z", "url": "https://files.pythonhosted.org/packages/0f/5e/628d26779474d7548685ae1d7f85edce96b6deac6c1506341399f8eadaf5/marketsim-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efa0c9da4d565f107ac9fa76c77a215d", "sha256": "446a7d7ddc87397ebead96b6f56bba950554ed0e49a3d31c95b9cd108894b3d7"}, "downloads": -1, "filename": "marketsim-0.0.1.tar.gz", "has_sig": false, "md5_digest": "efa0c9da4d565f107ac9fa76c77a215d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14684, "upload_time": "2020-02-16T08:10:26", "upload_time_iso_8601": "2020-02-16T08:10:26.178087Z", "url": "https://files.pythonhosted.org/packages/0f/75/3cbc5fc31f89b0d8ad738eae4b7f55142b104ce81ecb98a3ddf46cb88d4d/marketsim-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d29b3ae2a0c892f7a8fef6e108e798cd", "sha256": "6b3e0def9a40b0e4c80641a26e78471e3931e3672d642cfe1227efc002ee435c"}, "downloads": -1, "filename": "marketsim-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d29b3ae2a0c892f7a8fef6e108e798cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15330, "upload_time": "2020-02-16T08:10:23", "upload_time_iso_8601": "2020-02-16T08:10:23.760869Z", "url": "https://files.pythonhosted.org/packages/0f/5e/628d26779474d7548685ae1d7f85edce96b6deac6c1506341399f8eadaf5/marketsim-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efa0c9da4d565f107ac9fa76c77a215d", "sha256": "446a7d7ddc87397ebead96b6f56bba950554ed0e49a3d31c95b9cd108894b3d7"}, "downloads": -1, "filename": "marketsim-0.0.1.tar.gz", "has_sig": false, "md5_digest": "efa0c9da4d565f107ac9fa76c77a215d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14684, "upload_time": "2020-02-16T08:10:26", "upload_time_iso_8601": "2020-02-16T08:10:26.178087Z", "url": "https://files.pythonhosted.org/packages/0f/75/3cbc5fc31f89b0d8ad738eae4b7f55142b104ce81ecb98a3ddf46cb88d4d/marketsim-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:42 2020"}