{"info": {"author": "Max Bridgland", "author_email": "mabridgland@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: IronPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Networking", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "# PipPKG API\n\nPipPKG is a GUI for Pip that I have been working on in order to make managing your pip packages easier. While the GUI isn't complete I have completed the API wrapper for PyPi.org I will be using in it. I decided to open source it and release it on pip so that you guys could use it in your projects as well. You **do not need any API keys to use this**. Read on for more documentation.\n\n# Getting Started\n\n*Installing with VirtualEnv and Pip*\n```\ncd project-name\nvirtualenv env\nsource env/bin/activate on Unix or source .\\env\\bin\\activate on Windows\npip3 install pippkg-api requests\n```\n\n*Installing without VirtualEnv w/ Pip*\n```\npip3 install pippkg-api requests --user\ncd project-name\n```\n\n*Installing with VirtualEnv w/ Setup.py*\n```\ncd project-name\nvirtualenv env\nsource env/bin/activate on Unix or source .\\env\\bin\\activate on Windows\ngit clone https://github.com/M4cs/PipPKG-API.git\ncd PipPKG-API/\npython3 setup.py install\n```\n\n*Installing without VirtualEnv w/ Setup.py*\n```\ngit clone https://github.com/M4cs/PipPKG-API.git\ncd PipPKG-API/\npython3 setup.py install\n```\n\n# PipPKG API - Packages\n\nThe packages module in PipPKG API is used for gaining general information about the most recent version of the package. With this module you can grab basically any general info about the package in question. Below is documentation on how to use the module.\n\n\n## Getting Started\n\nImport PipPKG API Packages like this:\n```\nfrom pippkg-api import packages\n```\n\nTo get the info for the package define pkginfo (or any variable) like so:\n```\npkginfo = packages.package('name-of-pip-package')\n```\n\n**You must include the above two lines in order to use both the Packages and Releases module in PipPKG API. In the rest of this documentation pkginfo will refer to the variable above.**\n\n### package('name of package') - Returns Dictionary of JSON Response\n\nThe `package()` module is the function that grabs and stores all the information about the queried package in a dictionary. The rest of the functions then read from this dictionary to return a value. \n\n### getAuthor(pkginfo) - Returns String\n\nThe `getAuthor()` function does exactly what it sounds like. It returns the Author of the package.\n\nUsage:\n```\nauthor = packages.getAuthor()\n```\n\n### getLongDesc(pkginfo) - Returns String\n\nThe `getLongDesc()` function gets the main description of the package. This is the description you will see when visiting the PyPi page for said module.\n\nUsage:\n```\nlongDescription = packages.getLongDesc(pkginfo)\n```\n\n### getLicense(pkginfo) - Returns String\n\nThe `getLicense()` function gets the license of the queried package and returns it.\n\nUsage:\n```\nlicenseType = packages.getLicense(pkginfo)\n```\n\n### getSummary(pkginfo) - Returns String\n\nThe `getSummary()` function returns the short summary of the package. Like the one you would see when quering with pip.\n\nUsage:\n```\nsummary = packages.getSummary(pkginfo)\n```\n\n### getReqs(pkginfo) - Returns List\n\nThe `getReqs()` function returns a list of requirements for the said project.\n\nUsage:\n```\nrequirements = packages.getReqs(pkginfo)\n>> ['requests', 'colorama']\nrequirements[0]\n>> 'requests'\n```\n\n### getHomePage(pkginfo) - Returns String\n\nThe `getHomePage()` function returns the URL for the home page of the pip package.\n\nUsage:\n```\nhomepage = packages.getHomePage(pkginfo)\n>> https://example.com/and/file/path.html\n```\n\n### getClassifiers(pkginfo) - Returns List\n\nThe `getClassifiers()` function returns a list of all classifiers of said package.\n\nUsage:\n```\nclassifiers = packages.getClassifiers(pkginfo)\n```\n\n# This Documentation is Not Complete! If you would like to find more functions look above in the source code. Most functions are pretty self explainatory.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/M4cs/PipPKG-API", "keywords": "", "license": "GNU General Public License v3 (GPLv3) (GPL)", "maintainer": "", "maintainer_email": "", "name": "pippkgapi", "package_url": "https://pypi.org/project/pippkgapi/", "platform": "", "project_url": "https://pypi.org/project/pippkgapi/", "project_urls": {"Discord Server": "https://discordapp.com/invite/7VN9VZe", "Homepage": "https://github.com/M4cs/PipPKG-API", "Wiki": "https://github.com/M4cs/PipPKG-API/blob/master/README.md"}, "release_url": "https://pypi.org/project/pippkgapi/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "UnOfficial PyPi API Wrapper", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PipPKG API</h1>\n<p>PipPKG is a GUI for Pip that I have been working on in order to make managing your pip packages easier. While the GUI isn't complete I have completed the API wrapper for PyPi.org I will be using in it. I decided to open source it and release it on pip so that you guys could use it in your projects as well. You <strong>do not need any API keys to use this</strong>. Read on for more documentation.</p>\n<h1>Getting Started</h1>\n<p><em>Installing with VirtualEnv and Pip</em></p>\n<pre><code>cd project-name\nvirtualenv env\nsource env/bin/activate on Unix or source .\\env\\bin\\activate on Windows\npip3 install pippkg-api requests\n</code></pre>\n<p><em>Installing without VirtualEnv w/ Pip</em></p>\n<pre><code>pip3 install pippkg-api requests --user\ncd project-name\n</code></pre>\n<p><em>Installing with VirtualEnv w/ Setup.py</em></p>\n<pre><code>cd project-name\nvirtualenv env\nsource env/bin/activate on Unix or source .\\env\\bin\\activate on Windows\ngit clone https://github.com/M4cs/PipPKG-API.git\ncd PipPKG-API/\npython3 setup.py install\n</code></pre>\n<p><em>Installing without VirtualEnv w/ Setup.py</em></p>\n<pre><code>git clone https://github.com/M4cs/PipPKG-API.git\ncd PipPKG-API/\npython3 setup.py install\n</code></pre>\n<h1>PipPKG API - Packages</h1>\n<p>The packages module in PipPKG API is used for gaining general information about the most recent version of the package. With this module you can grab basically any general info about the package in question. Below is documentation on how to use the module.</p>\n<h2>Getting Started</h2>\n<p>Import PipPKG API Packages like this:</p>\n<pre><code>from pippkg-api import packages\n</code></pre>\n<p>To get the info for the package define pkginfo (or any variable) like so:</p>\n<pre><code>pkginfo = packages.package('name-of-pip-package')\n</code></pre>\n<p><strong>You must include the above two lines in order to use both the Packages and Releases module in PipPKG API. In the rest of this documentation pkginfo will refer to the variable above.</strong></p>\n<h3>package('name of package') - Returns Dictionary of JSON Response</h3>\n<p>The <code>package()</code> module is the function that grabs and stores all the information about the queried package in a dictionary. The rest of the functions then read from this dictionary to return a value.</p>\n<h3>getAuthor(pkginfo) - Returns String</h3>\n<p>The <code>getAuthor()</code> function does exactly what it sounds like. It returns the Author of the package.</p>\n<p>Usage:</p>\n<pre><code>author = packages.getAuthor()\n</code></pre>\n<h3>getLongDesc(pkginfo) - Returns String</h3>\n<p>The <code>getLongDesc()</code> function gets the main description of the package. This is the description you will see when visiting the PyPi page for said module.</p>\n<p>Usage:</p>\n<pre><code>longDescription = packages.getLongDesc(pkginfo)\n</code></pre>\n<h3>getLicense(pkginfo) - Returns String</h3>\n<p>The <code>getLicense()</code> function gets the license of the queried package and returns it.</p>\n<p>Usage:</p>\n<pre><code>licenseType = packages.getLicense(pkginfo)\n</code></pre>\n<h3>getSummary(pkginfo) - Returns String</h3>\n<p>The <code>getSummary()</code> function returns the short summary of the package. Like the one you would see when quering with pip.</p>\n<p>Usage:</p>\n<pre><code>summary = packages.getSummary(pkginfo)\n</code></pre>\n<h3>getReqs(pkginfo) - Returns List</h3>\n<p>The <code>getReqs()</code> function returns a list of requirements for the said project.</p>\n<p>Usage:</p>\n<pre><code>requirements = packages.getReqs(pkginfo)\n&gt;&gt; ['requests', 'colorama']\nrequirements[0]\n&gt;&gt; 'requests'\n</code></pre>\n<h3>getHomePage(pkginfo) - Returns String</h3>\n<p>The <code>getHomePage()</code> function returns the URL for the home page of the pip package.</p>\n<p>Usage:</p>\n<pre><code>homepage = packages.getHomePage(pkginfo)\n&gt;&gt; https://example.com/and/file/path.html\n</code></pre>\n<h3>getClassifiers(pkginfo) - Returns List</h3>\n<p>The <code>getClassifiers()</code> function returns a list of all classifiers of said package.</p>\n<p>Usage:</p>\n<pre><code>classifiers = packages.getClassifiers(pkginfo)\n</code></pre>\n<h1>This Documentation is Not Complete! If you would like to find more functions look above in the source code. Most functions are pretty self explainatory.</h1>\n\n          </div>"}, "last_serial": 4671613, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7d1d06f29fd78c81f4eb02a24ec3da25", "sha256": "a8a76cb642074fccba33b4e7de1b577a44d62bb444d6aefb7f9737c2d1b1b5bf"}, "downloads": -1, "filename": "pippkgapi-0.0.1-py3.6.egg", "has_sig": false, "md5_digest": "7d1d06f29fd78c81f4eb02a24ec3da25", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 6240, "upload_time": "2019-01-08T06:21:28", "upload_time_iso_8601": "2019-01-08T06:21:28.900176Z", "url": "https://files.pythonhosted.org/packages/45/47/b216edeb34ace8635402593da79fb278afac8503b26a948012fbe2e563ff/pippkgapi-0.0.1-py3.6.egg", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d66dd1b91b39e03681e4332dd76b5e51", "sha256": "253847d41de3a9b8e5d95b570de959a44034adfef1c0af4992d26340b62c09fc"}, "downloads": -1, "filename": "pippkgapi-0.0.2-py3.6.egg", "has_sig": false, "md5_digest": "d66dd1b91b39e03681e4332dd76b5e51", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 6242, "upload_time": "2019-01-08T06:21:30", "upload_time_iso_8601": "2019-01-08T06:21:30.638180Z", "url": "https://files.pythonhosted.org/packages/25/32/346a8d7be432b663c966124adcae3f47cd7bae8826eb6c9f32b76d287959/pippkgapi-0.0.2-py3.6.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d66dd1b91b39e03681e4332dd76b5e51", "sha256": "253847d41de3a9b8e5d95b570de959a44034adfef1c0af4992d26340b62c09fc"}, "downloads": -1, "filename": "pippkgapi-0.0.2-py3.6.egg", "has_sig": false, "md5_digest": "d66dd1b91b39e03681e4332dd76b5e51", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 6242, "upload_time": "2019-01-08T06:21:30", "upload_time_iso_8601": "2019-01-08T06:21:30.638180Z", "url": "https://files.pythonhosted.org/packages/25/32/346a8d7be432b663c966124adcae3f47cd7bae8826eb6c9f32b76d287959/pippkgapi-0.0.2-py3.6.egg", "yanked": false}], "timestamp": "Fri May  8 02:54:10 2020"}