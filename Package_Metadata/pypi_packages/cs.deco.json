{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "*Latest release 20200417*:\n@decorator: do not override __doc__ on the decorated function, just provide default.\nNew @logging_wrapper which bumps the `stacklevel` parameter in Python 3.8 and above so that shims recite the correct caller.\n\nAssorted decorator functions.\n\n## Function `cached(*args, **kwargs)`\n\n@OBSOLETE(metadeco)\n\nDecorator to cache the result of a method and keep a revision\n     counter for changes.\n\n     The cached values are stored on the instance (`self`).\n     The revision counter supports the `@revised` decorator.\n\n     This decorator may be used in 2 modes.\n     Directly:\n\n         @cachedmethod\n         def method(self, ...)\n\n     or indirectly:\n\n         @cachedmethod(poll_delay=0.25)\n         def method(self, ...)\n\n     Optional keyword arguments:\n     * `attr_name`: the basis name for the supporting attributes.\n       Default: the name of the method.\n     * `poll_delay`: minimum time between polls; after the first\n       access, subsequent accesses before the `poll_delay` has elapsed\n       will return the cached value.\n       Default: `None`, meaning no poll delay.\n     * `sig_func`: a signature function, which should be significantly\n       cheaper than the method. If the signature is unchanged, the\n       cached value will be returned. The signature function\n       expects the instance (`self`) as its first parameter.\n       Default: `None`, meaning no signature function;\n       the first computed value will be kept and never updated.\n     * `unset_value`: the value to return before the method has been\n       called successfully.\n       Default: `None`.\n\n     If the method raises an exception, this will be logged and\n     the method will return the previously cached value,\n     unless there is not yet a cached value\n     in which case the exception will be reraised.\n\n     If the signature function raises an exception\n     then a log message is issued and the signature is considered unchanged.\n\n     An example use of this decorator might be to keep a \"live\"\n     configuration data structure, parsed from a configuration\n     file which might be modified after the program starts. One\n     might provide a signature function which called `os.stat()` on\n     the file to check for changes before invoking a full read and\n     parse of the file.\n\n     *Note*: use of this decorator requires the `cs.pfx` module.\n\n## Function `cachedmethod(*da, **dkw)`\n\nDecorator to cache the result of a method and keep a revision\ncounter for changes.\n\nThe cached values are stored on the instance (`self`).\nThe revision counter supports the `@revised` decorator.\n\nThis decorator may be used in 2 modes.\nDirectly:\n\n    @cachedmethod\n    def method(self, ...)\n\nor indirectly:\n\n    @cachedmethod(poll_delay=0.25)\n    def method(self, ...)\n\nOptional keyword arguments:\n* `attr_name`: the basis name for the supporting attributes.\n  Default: the name of the method.\n* `poll_delay`: minimum time between polls; after the first\n  access, subsequent accesses before the `poll_delay` has elapsed\n  will return the cached value.\n  Default: `None`, meaning no poll delay.\n* `sig_func`: a signature function, which should be significantly\n  cheaper than the method. If the signature is unchanged, the\n  cached value will be returned. The signature function\n  expects the instance (`self`) as its first parameter.\n  Default: `None`, meaning no signature function;\n  the first computed value will be kept and never updated.\n* `unset_value`: the value to return before the method has been\n  called successfully.\n  Default: `None`.\n\nIf the method raises an exception, this will be logged and\nthe method will return the previously cached value,\nunless there is not yet a cached value\nin which case the exception will be reraised.\n\nIf the signature function raises an exception\nthen a log message is issued and the signature is considered unchanged.\n\nAn example use of this decorator might be to keep a \"live\"\nconfiguration data structure, parsed from a configuration\nfile which might be modified after the program starts. One\nmight provide a signature function which called `os.stat()` on\nthe file to check for changes before invoking a full read and\nparse of the file.\n\n*Note*: use of this decorator requires the `cs.pfx` module.\n\n## Function `contextual(func)`\n\nWrap a simple function as a context manager.\n\nThis was written to support users of `@strable`,\nwhich requires its `open_func` to be a context manager;\nthis turns an arbitrary function into a context manager.\n\nExample promoting a trivial function:\n\n    >>> f = lambda: 3\n    >>> cf = contextual(f)\n    >>> with cf() as x: print(x)\n    3\n\n## Function `decorator(deco)`\n\nWrapper for decorator functions to support optional arguments.\n\nThe actual decorator function ends up being called as:\n\n    mydeco(func, *da, **dkw)\n\nallowing `da` and `dkw` to affect the behaviour of the decorator `mydeco`.\n\nExamples:\n\n    @decorator\n    def mydeco(func, *da, kw=None):\n      ... decorate func subject to the values of da and kw\n\n    @mydeco\n    def func1(...):\n      ...\n\n    @mydeco('foo', arg2='bah')\n    def func2(...):\n      ...\n\n## Function `fmtdoc(func)`\n\nDecorator to replace a function's docstring with that string\nformatted against the function's module `__dict__`.\n\nThis supports simple formatted docstrings:\n\n    ENVVAR_NAME = 'FUNC_DEFAULT'\n\n    @fmtdoc\n    def func():\n        \"\"\"Do something with os.environ[{ENVVAR_NAME}].\"\"\"\n        print(os.environ[ENVVAR_NAME])\n\nThis gives `func` this docstring:\n\n    Do something with os.environ[FUNC_DEFAULT].\n\n*Warning*: this decorator is intended for wiring \"constants\"\ninto docstrings, not for dynamic values. Use for other types\nof values should be considered with trepidation.\n\n## Function `logging_wrapper(*da, **dkw)`\n\nDecorator for logging call shims\nwhich bumps the `stacklevel` keyword argument so that the logging system\nchooses the correct frame to cite in messages.\n\nNote: has no effect on Python < 3.8 because `stacklevel` only\nappeared in that version.\n\n## Function `observable_class(property_names, only_unequal=False)`\n\nClass decorator to make various instance attributes observable.\n\nParameters:\n* `property_names`:\n  an interable of instance property names to set up as\n  observable properties. As a special case a single `str` can\n  be supplied if only one attribute is to be observed.\n* `only_unequal`:\n  only call the observers if the new property value is not\n  equal to the previous proerty value. This requires property\n  values to be comparable for inequality.\n  Default: `False`, meaning that all updates will be reported.\n\n## Function `OBSOLETE(*da, **dkw)`\n\nDecorator for obsolete functions.\n\nUse:\n\n    @OBSOLETE\n    def func(...):\n\nThis emits a warning log message before calling the decorated function.\n\n## Function `strable(*da, **dkw)`\n\nDecorator for functions which may accept a `str`\ninstead of their core type.\n\nParameters:\n* `func`: the function to decorate\n* `open_func`: the \"open\" factory to produce the core type\n  if a string is provided;\n  the default is the builtin \"open\" function.\n  The returned value should be a context manager.\n  Simpler functions can be decorated with `@contextual`\n  to turn them into context managers if need be.\n\nThe usual (and default) example is a function to process an\nopen file, designed to be handed a file object but which may\nbe called with a filename. If the first argument is a `str`\nthen that file is opened and the function called with the\nopen file.\n\nExamples:\n\n    @strable\n    def count_lines(f):\n      return len(line for line in f)\n\n    class Recording:\n      \"Class representing a video recording.\"\n      ...\n    @strable(open_func=Recording)\n    def process_video(r):\n      ... do stuff with `r` as a Recording instance ...\n\n*Note*: use of this decorator requires the `cs.pfx` module.\n\n## Function `warning(msg, *args, **kw)`\n\nIssue a warning message.\n\n\n\n# Release Log\n\n*Release 20200417*:\n@decorator: do not override __doc__ on the decorated function, just provide default.\nNew @logging_wrapper which bumps the `stacklevel` parameter in Python 3.8 and above so that shims recite the correct caller.\n\n*Release 20200318.1*:\nNew @OBSOLETE to issue a warning on a call to an obsolete function, like an improved @cs.logutils.OBSOLETE (which needs to retire).\n\n*Release 20200318*:\n@cachedmethod: tighten up the \"is the value changed\" try/except.\n\n*Release 20191012*:\nNew @contextual decorator to turn a simple function into a context manager.\n@strable: mention context manager requirement and @contextual as workaround.\n\n*Release 20191006*:\nRename @cached to @cachedmethod, leave compatible @cached behind which issues a warning (will be removed in a future release).\n\n*Release 20191004*:\nAvoid circular import with cs.pfx by removing requirement and doing the import later if needed.\n\n*Release 20190905*:\nBugfix @deco: it turns out that you may not set the .__module__ attribute on a property object.\n\n*Release 20190830.2*:\nMake some getattr calls robust.\n\n*Release 20190830.1*:\n@decorator: set the __module__ of the wrapper.\n\n*Release 20190830*:\n@decorator: set the __module__ of the wrapper from the decorated target, aids cs.distinf.\n\n*Release 20190729*:\n@cached: sidestep uninitialised value.\n\n*Release 20190601.1*:\n@strable: fix the example in the docstring.\n\n*Release 20190601*:\nBugfix @decorator to correctly propagate the docstring of the subdecorator.\nImprove other docstrings.\n\n*Release 20190526*:\n@decorator: add support for positional arguments and rewrite - simpler and clearer.\n\n*Release 20190512*:\n@fmtdoc: add caveat against misuse of this decorator.\n\n*Release 20190404*:\nNew @fmtdoc decorator to format a function's doctsring against its module's globals.\n\n*Release 20190403*:\n@cached: bugfix: avoid using unset sig_func value on first pass.\n@observable_class: further tweaks.\n\n*Release 20190322.1*:\n@observable_class: bugfix __init__ wrapper function.\n\n*Release 20190322*:\nNew class decorator @observable_class.\nBugfix import of \"warning\".\n\n*Release 20190309*:\n@cached: improve the exception handling.\n\n*Release 20190307.2*:\nFix docstring typo.\n\n*Release 20190307.1*:\nBugfix @decorator: final plumbing step for decorated decorator.\n\n*Release 20190307*:\n@decorator: drop unused arguments, they get used by the returned decorator.\nRework the @cached logic.\n\n*Release 20190220*:\nBugfix @decorator decorator, do not decorate twice.\nHave a cut at inheriting the decorated function's docstring.\n\n*Release 20181227*:\nNew decoartor @strable for function which may accept a str instead of their primary type.\nImprovements to @cached.\n\n*Release 20171231*:\nInitial PyPI release.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python2,python3", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "cs.deco", "package_url": "https://pypi.org/project/cs.deco/", "platform": "", "project_url": "https://pypi.org/project/cs.deco/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.deco/20200417/", "requires_dist": null, "requires_python": "", "summary": "Assorted decorator functions.", "version": "20200417", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Latest release 20200417</em>:\n@decorator: do not override <strong>doc</strong> on the decorated function, just provide default.\nNew @logging_wrapper which bumps the <code>stacklevel</code> parameter in Python 3.8 and above so that shims recite the correct caller.</p>\n<p>Assorted decorator functions.</p>\n<h2>Function <code>cached(*args, **kwargs)</code></h2>\n<p>@OBSOLETE(metadeco)</p>\n<p>Decorator to cache the result of a method and keep a revision\ncounter for changes.</p>\n<pre><code> The cached values are stored on the instance (`self`).\n The revision counter supports the `@revised` decorator.\n\n This decorator may be used in 2 modes.\n Directly:\n\n     @cachedmethod\n     def method(self, ...)\n\n or indirectly:\n\n     @cachedmethod(poll_delay=0.25)\n     def method(self, ...)\n\n Optional keyword arguments:\n * `attr_name`: the basis name for the supporting attributes.\n   Default: the name of the method.\n * `poll_delay`: minimum time between polls; after the first\n   access, subsequent accesses before the `poll_delay` has elapsed\n   will return the cached value.\n   Default: `None`, meaning no poll delay.\n * `sig_func`: a signature function, which should be significantly\n   cheaper than the method. If the signature is unchanged, the\n   cached value will be returned. The signature function\n   expects the instance (`self`) as its first parameter.\n   Default: `None`, meaning no signature function;\n   the first computed value will be kept and never updated.\n * `unset_value`: the value to return before the method has been\n   called successfully.\n   Default: `None`.\n\n If the method raises an exception, this will be logged and\n the method will return the previously cached value,\n unless there is not yet a cached value\n in which case the exception will be reraised.\n\n If the signature function raises an exception\n then a log message is issued and the signature is considered unchanged.\n\n An example use of this decorator might be to keep a \"live\"\n configuration data structure, parsed from a configuration\n file which might be modified after the program starts. One\n might provide a signature function which called `os.stat()` on\n the file to check for changes before invoking a full read and\n parse of the file.\n\n *Note*: use of this decorator requires the `cs.pfx` module.\n</code></pre>\n<h2>Function <code>cachedmethod(*da, **dkw)</code></h2>\n<p>Decorator to cache the result of a method and keep a revision\ncounter for changes.</p>\n<p>The cached values are stored on the instance (<code>self</code>).\nThe revision counter supports the <code>@revised</code> decorator.</p>\n<p>This decorator may be used in 2 modes.\nDirectly:</p>\n<pre><code>@cachedmethod\ndef method(self, ...)\n</code></pre>\n<p>or indirectly:</p>\n<pre><code>@cachedmethod(poll_delay=0.25)\ndef method(self, ...)\n</code></pre>\n<p>Optional keyword arguments:</p>\n<ul>\n<li><code>attr_name</code>: the basis name for the supporting attributes.\nDefault: the name of the method.</li>\n<li><code>poll_delay</code>: minimum time between polls; after the first\naccess, subsequent accesses before the <code>poll_delay</code> has elapsed\nwill return the cached value.\nDefault: <code>None</code>, meaning no poll delay.</li>\n<li><code>sig_func</code>: a signature function, which should be significantly\ncheaper than the method. If the signature is unchanged, the\ncached value will be returned. The signature function\nexpects the instance (<code>self</code>) as its first parameter.\nDefault: <code>None</code>, meaning no signature function;\nthe first computed value will be kept and never updated.</li>\n<li><code>unset_value</code>: the value to return before the method has been\ncalled successfully.\nDefault: <code>None</code>.</li>\n</ul>\n<p>If the method raises an exception, this will be logged and\nthe method will return the previously cached value,\nunless there is not yet a cached value\nin which case the exception will be reraised.</p>\n<p>If the signature function raises an exception\nthen a log message is issued and the signature is considered unchanged.</p>\n<p>An example use of this decorator might be to keep a \"live\"\nconfiguration data structure, parsed from a configuration\nfile which might be modified after the program starts. One\nmight provide a signature function which called <code>os.stat()</code> on\nthe file to check for changes before invoking a full read and\nparse of the file.</p>\n<p><em>Note</em>: use of this decorator requires the <code>cs.pfx</code> module.</p>\n<h2>Function <code>contextual(func)</code></h2>\n<p>Wrap a simple function as a context manager.</p>\n<p>This was written to support users of <code>@strable</code>,\nwhich requires its <code>open_func</code> to be a context manager;\nthis turns an arbitrary function into a context manager.</p>\n<p>Example promoting a trivial function:</p>\n<pre><code>&gt;&gt;&gt; f = lambda: 3\n&gt;&gt;&gt; cf = contextual(f)\n&gt;&gt;&gt; with cf() as x: print(x)\n3\n</code></pre>\n<h2>Function <code>decorator(deco)</code></h2>\n<p>Wrapper for decorator functions to support optional arguments.</p>\n<p>The actual decorator function ends up being called as:</p>\n<pre><code>mydeco(func, *da, **dkw)\n</code></pre>\n<p>allowing <code>da</code> and <code>dkw</code> to affect the behaviour of the decorator <code>mydeco</code>.</p>\n<p>Examples:</p>\n<pre><code>@decorator\ndef mydeco(func, *da, kw=None):\n  ... decorate func subject to the values of da and kw\n\n@mydeco\ndef func1(...):\n  ...\n\n@mydeco('foo', arg2='bah')\ndef func2(...):\n  ...\n</code></pre>\n<h2>Function <code>fmtdoc(func)</code></h2>\n<p>Decorator to replace a function's docstring with that string\nformatted against the function's module <code>__dict__</code>.</p>\n<p>This supports simple formatted docstrings:</p>\n<pre><code>ENVVAR_NAME = 'FUNC_DEFAULT'\n\n@fmtdoc\ndef func():\n    \"\"\"Do something with os.environ[{ENVVAR_NAME}].\"\"\"\n    print(os.environ[ENVVAR_NAME])\n</code></pre>\n<p>This gives <code>func</code> this docstring:</p>\n<pre><code>Do something with os.environ[FUNC_DEFAULT].\n</code></pre>\n<p><em>Warning</em>: this decorator is intended for wiring \"constants\"\ninto docstrings, not for dynamic values. Use for other types\nof values should be considered with trepidation.</p>\n<h2>Function <code>logging_wrapper(*da, **dkw)</code></h2>\n<p>Decorator for logging call shims\nwhich bumps the <code>stacklevel</code> keyword argument so that the logging system\nchooses the correct frame to cite in messages.</p>\n<p>Note: has no effect on Python &lt; 3.8 because <code>stacklevel</code> only\nappeared in that version.</p>\n<h2>Function <code>observable_class(property_names, only_unequal=False)</code></h2>\n<p>Class decorator to make various instance attributes observable.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>property_names</code>:\nan interable of instance property names to set up as\nobservable properties. As a special case a single <code>str</code> can\nbe supplied if only one attribute is to be observed.</li>\n<li><code>only_unequal</code>:\nonly call the observers if the new property value is not\nequal to the previous proerty value. This requires property\nvalues to be comparable for inequality.\nDefault: <code>False</code>, meaning that all updates will be reported.</li>\n</ul>\n<h2>Function <code>OBSOLETE(*da, **dkw)</code></h2>\n<p>Decorator for obsolete functions.</p>\n<p>Use:</p>\n<pre><code>@OBSOLETE\ndef func(...):\n</code></pre>\n<p>This emits a warning log message before calling the decorated function.</p>\n<h2>Function <code>strable(*da, **dkw)</code></h2>\n<p>Decorator for functions which may accept a <code>str</code>\ninstead of their core type.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>func</code>: the function to decorate</li>\n<li><code>open_func</code>: the \"open\" factory to produce the core type\nif a string is provided;\nthe default is the builtin \"open\" function.\nThe returned value should be a context manager.\nSimpler functions can be decorated with <code>@contextual</code>\nto turn them into context managers if need be.</li>\n</ul>\n<p>The usual (and default) example is a function to process an\nopen file, designed to be handed a file object but which may\nbe called with a filename. If the first argument is a <code>str</code>\nthen that file is opened and the function called with the\nopen file.</p>\n<p>Examples:</p>\n<pre><code>@strable\ndef count_lines(f):\n  return len(line for line in f)\n\nclass Recording:\n  \"Class representing a video recording.\"\n  ...\n@strable(open_func=Recording)\ndef process_video(r):\n  ... do stuff with `r` as a Recording instance ...\n</code></pre>\n<p><em>Note</em>: use of this decorator requires the <code>cs.pfx</code> module.</p>\n<h2>Function <code>warning(msg, *args, **kw)</code></h2>\n<p>Issue a warning message.</p>\n<h1>Release Log</h1>\n<p><em>Release 20200417</em>:\n@decorator: do not override <strong>doc</strong> on the decorated function, just provide default.\nNew @logging_wrapper which bumps the <code>stacklevel</code> parameter in Python 3.8 and above so that shims recite the correct caller.</p>\n<p><em>Release 20200318.1</em>:\nNew @OBSOLETE to issue a warning on a call to an obsolete function, like an improved @cs.logutils.OBSOLETE (which needs to retire).</p>\n<p><em>Release 20200318</em>:\n@cachedmethod: tighten up the \"is the value changed\" try/except.</p>\n<p><em>Release 20191012</em>:\nNew @contextual decorator to turn a simple function into a context manager.\n@strable: mention context manager requirement and @contextual as workaround.</p>\n<p><em>Release 20191006</em>:\nRename @cached to @cachedmethod, leave compatible @cached behind which issues a warning (will be removed in a future release).</p>\n<p><em>Release 20191004</em>:\nAvoid circular import with cs.pfx by removing requirement and doing the import later if needed.</p>\n<p><em>Release 20190905</em>:\nBugfix @deco: it turns out that you may not set the .<strong>module</strong> attribute on a property object.</p>\n<p><em>Release 20190830.2</em>:\nMake some getattr calls robust.</p>\n<p><em>Release 20190830.1</em>:\n@decorator: set the <strong>module</strong> of the wrapper.</p>\n<p><em>Release 20190830</em>:\n@decorator: set the <strong>module</strong> of the wrapper from the decorated target, aids cs.distinf.</p>\n<p><em>Release 20190729</em>:\n@cached: sidestep uninitialised value.</p>\n<p><em>Release 20190601.1</em>:\n@strable: fix the example in the docstring.</p>\n<p><em>Release 20190601</em>:\nBugfix @decorator to correctly propagate the docstring of the subdecorator.\nImprove other docstrings.</p>\n<p><em>Release 20190526</em>:\n@decorator: add support for positional arguments and rewrite - simpler and clearer.</p>\n<p><em>Release 20190512</em>:\n@fmtdoc: add caveat against misuse of this decorator.</p>\n<p><em>Release 20190404</em>:\nNew @fmtdoc decorator to format a function's doctsring against its module's globals.</p>\n<p><em>Release 20190403</em>:\n@cached: bugfix: avoid using unset sig_func value on first pass.\n@observable_class: further tweaks.</p>\n<p><em>Release 20190322.1</em>:\n@observable_class: bugfix <strong>init</strong> wrapper function.</p>\n<p><em>Release 20190322</em>:\nNew class decorator @observable_class.\nBugfix import of \"warning\".</p>\n<p><em>Release 20190309</em>:\n@cached: improve the exception handling.</p>\n<p><em>Release 20190307.2</em>:\nFix docstring typo.</p>\n<p><em>Release 20190307.1</em>:\nBugfix @decorator: final plumbing step for decorated decorator.</p>\n<p><em>Release 20190307</em>:\n@decorator: drop unused arguments, they get used by the returned decorator.\nRework the @cached logic.</p>\n<p><em>Release 20190220</em>:\nBugfix @decorator decorator, do not decorate twice.\nHave a cut at inheriting the decorated function's docstring.</p>\n<p><em>Release 20181227</em>:\nNew decoartor @strable for function which may accept a str instead of their primary type.\nImprovements to @cached.</p>\n<p><em>Release 20171231</em>:\nInitial PyPI release.</p>\n\n          </div>"}, "last_serial": 7036168, "releases": {"20171231": [{"comment_text": "", "digests": {"md5": "fa77dff47b323a7976524c28f44db547", "sha256": "9557b9f0a09b718459a5e830e8aeda1faa7cc941017b7d8a01455cad47080765"}, "downloads": -1, "filename": "cs.deco-20171231.tar.gz", "has_sig": false, "md5_digest": "fa77dff47b323a7976524c28f44db547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2999, "upload_time": "2017-12-30T21:46:14", "upload_time_iso_8601": "2017-12-30T21:46:14.508534Z", "url": "https://files.pythonhosted.org/packages/5d/c7/dcc17fd6b6a7ffd736c01c5608b54fe768994c26956eb596dd3d543c295a/cs.deco-20171231.tar.gz", "yanked": false}], "20181227": [{"comment_text": "", "digests": {"md5": "f8e02c3e5248c1084d4c03b2c0c7933d", "sha256": "9ae8c89a140e9e5dd89251956136e711bdc01376255deb14ae7021e25303136d"}, "downloads": -1, "filename": "cs.deco-20181227.tar.gz", "has_sig": false, "md5_digest": "f8e02c3e5248c1084d4c03b2c0c7933d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3565, "upload_time": "2018-12-27T05:32:30", "upload_time_iso_8601": "2018-12-27T05:32:30.046986Z", "url": "https://files.pythonhosted.org/packages/fe/3a/dfd014392be2f1ed77596dd823ba1b03dca982c04a2865f46c5531b309c7/cs.deco-20181227.tar.gz", "yanked": false}], "20190220": [{"comment_text": "", "digests": {"md5": "3717b9cd22aeefc266d704d0d1f524d0", "sha256": "04562692583e94b1d0b1dc66ed5979d3936e08b1b2aa5584edf5e3464855f6cf"}, "downloads": -1, "filename": "cs.deco-20190220.tar.gz", "has_sig": false, "md5_digest": "3717b9cd22aeefc266d704d0d1f524d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3600, "upload_time": "2019-02-20T09:04:15", "upload_time_iso_8601": "2019-02-20T09:04:15.161588Z", "url": "https://files.pythonhosted.org/packages/7e/dd/377302bd522e8762489d50e06fe86966c01a5b267c8bee2d12346edae08a/cs.deco-20190220.tar.gz", "yanked": false}], "20190307": [{"comment_text": "", "digests": {"md5": "13bed8e97bde8eafb7a193205a7c2af3", "sha256": "da6aba9282b5bdd5a109a74cea2208f8b96a4b4acb1dc06598685b839b190d14"}, "downloads": -1, "filename": "cs.deco-20190307.tar.gz", "has_sig": false, "md5_digest": "13bed8e97bde8eafb7a193205a7c2af3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3742, "upload_time": "2019-03-07T09:32:29", "upload_time_iso_8601": "2019-03-07T09:32:29.592232Z", "url": "https://files.pythonhosted.org/packages/df/15/b69d0ec7f13e691be0e82871557e81bbac4897561a60e5456bc0488a3a93/cs.deco-20190307.tar.gz", "yanked": false}], "20190307.1": [{"comment_text": "", "digests": {"md5": "c426ad318f51f4d0174d1da1539c0798", "sha256": "f43e5970b2051db031837e0814e66ed8f9a3c7fd006142dd913c49e64e4bb94e"}, "downloads": -1, "filename": "cs.deco-20190307.1.tar.gz", "has_sig": false, "md5_digest": "c426ad318f51f4d0174d1da1539c0798", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4474, "upload_time": "2019-03-07T09:39:47", "upload_time_iso_8601": "2019-03-07T09:39:47.482172Z", "url": "https://files.pythonhosted.org/packages/bb/33/87277555488ae126e7ac9ce3aeb6ce84dfb3eb30cccd6f8aaddc4ebba215/cs.deco-20190307.1.tar.gz", "yanked": false}], "20190307.2": [{"comment_text": "", "digests": {"md5": "6b890b0a13de726430179f1cd102abfc", "sha256": "afac1ef14b7de5c48b80fea313d09f7972556825512096c2833e1a6e3a4d94f9"}, "downloads": -1, "filename": "cs.deco-20190307.2.tar.gz", "has_sig": false, "md5_digest": "6b890b0a13de726430179f1cd102abfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4476, "upload_time": "2019-03-07T09:42:38", "upload_time_iso_8601": "2019-03-07T09:42:38.232424Z", "url": "https://files.pythonhosted.org/packages/bb/90/e1c50b8cf3e71a89d1087a897e63f7e75c96fa6a1166c3e7485fa2736b2e/cs.deco-20190307.2.tar.gz", "yanked": false}], "20190309": [{"comment_text": "", "digests": {"md5": "1edfdae4489222983df744c5b16c131d", "sha256": "c68ad0a7bb8f7625ec9cf9c13de156e1e66e04cbd2c846606074126fe2bffb4a"}, "downloads": -1, "filename": "cs.deco-20190309.tar.gz", "has_sig": false, "md5_digest": "1edfdae4489222983df744c5b16c131d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4645, "upload_time": "2019-03-09T04:13:37", "upload_time_iso_8601": "2019-03-09T04:13:37.334545Z", "url": "https://files.pythonhosted.org/packages/cf/8d/03a1d71448def9d4260ba933a4583b84e201aeebdacb31260952797c1e7e/cs.deco-20190309.tar.gz", "yanked": false}], "20190322": [{"comment_text": "", "digests": {"md5": "f1907e92fe8f53080167a631dd4e7109", "sha256": "8a4caab442718ffd47a0325a1ebf0a1de2edcc6ba299075f650a552df757a404"}, "downloads": -1, "filename": "cs.deco-20190322.tar.gz", "has_sig": false, "md5_digest": "f1907e92fe8f53080167a631dd4e7109", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5633, "upload_time": "2019-03-22T01:01:09", "upload_time_iso_8601": "2019-03-22T01:01:09.602290Z", "url": "https://files.pythonhosted.org/packages/9d/79/fa9e1f272c29a449d56fb0344929d3202304a94e551e5389bfa9bd212e5e/cs.deco-20190322.tar.gz", "yanked": false}], "20190322.1": [{"comment_text": "", "digests": {"md5": "adf8371e19c9fc0d7d7202eb44e890b8", "sha256": "02670f86eb701721dce9eb63a59ea532f6b8eaaf0f348424cc861cb4ecd57447"}, "downloads": -1, "filename": "cs.deco-20190322.1.tar.gz", "has_sig": false, "md5_digest": "adf8371e19c9fc0d7d7202eb44e890b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5635, "upload_time": "2019-03-22T01:32:16", "upload_time_iso_8601": "2019-03-22T01:32:16.048187Z", "url": "https://files.pythonhosted.org/packages/b8/3e/14a0b36834b20e1927694edbd958041389a4d23553aa2072feb6897fd72d/cs.deco-20190322.1.tar.gz", "yanked": false}], "20190403": [{"comment_text": "", "digests": {"md5": "907656800f231ead98d199ebc23d3855", "sha256": "71c59ab904b1d538bbb9075669f96ca8987eb166dbcb07764a4c657c8d67ec49"}, "downloads": -1, "filename": "cs.deco-20190403.tar.gz", "has_sig": false, "md5_digest": "907656800f231ead98d199ebc23d3855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5679, "upload_time": "2019-04-02T21:32:34", "upload_time_iso_8601": "2019-04-02T21:32:34.028737Z", "url": "https://files.pythonhosted.org/packages/5b/a0/09c5bef96180b2cf17f59ffd4936fb7fea9c573d736b44b3d5d42449f158/cs.deco-20190403.tar.gz", "yanked": false}], "20190404": [{"comment_text": "", "digests": {"md5": "c7268add7fbcf931966dcdf5f0069042", "sha256": "f13741038f959dc465826a0a5c9737766ba02dfeeb00186b7733b7fe8b49ca86"}, "downloads": -1, "filename": "cs.deco-20190404.tar.gz", "has_sig": false, "md5_digest": "c7268add7fbcf931966dcdf5f0069042", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6064, "upload_time": "2019-04-04T04:17:01", "upload_time_iso_8601": "2019-04-04T04:17:01.935069Z", "url": "https://files.pythonhosted.org/packages/5f/5b/ef973d1bcf898de957ac5d37627c83c15a0a734cc8dbee0076e1b7e23ad9/cs.deco-20190404.tar.gz", "yanked": false}], "20190512": [{"comment_text": "", "digests": {"md5": "7bfae6a4450fa463cb312d4223974fb2", "sha256": "ca7aca02f86d3ea38e87f6029cf401a0d56348ba6b76c7db42efed3a50557e87"}, "downloads": -1, "filename": "cs.deco-20190512.tar.gz", "has_sig": false, "md5_digest": "7bfae6a4450fa463cb312d4223974fb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6165, "upload_time": "2019-05-12T00:01:22", "upload_time_iso_8601": "2019-05-12T00:01:22.990279Z", "url": "https://files.pythonhosted.org/packages/b8/f1/d56578d5ec9cc86da6cce2f3f8d8b7b5f501202eda5d212a338c11709b63/cs.deco-20190512.tar.gz", "yanked": false}], "20190526": [{"comment_text": "", "digests": {"md5": "62b94b588709fc466e6f807dfe9c3fe0", "sha256": "760523e13e332f3760c8c45749af5ce6d45556c3d424efe949990b777f4fb4b1"}, "downloads": -1, "filename": "cs.deco-20190526.tar.gz", "has_sig": false, "md5_digest": "62b94b588709fc466e6f807dfe9c3fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5582, "upload_time": "2019-05-26T10:19:49", "upload_time_iso_8601": "2019-05-26T10:19:49.156327Z", "url": "https://files.pythonhosted.org/packages/b2/39/d7c913a27fe17a10ade082d655846c6c9926221ceb68e7642048c7fcad3b/cs.deco-20190526.tar.gz", "yanked": false}], "20190601": [{"comment_text": "", "digests": {"md5": "a6c08e08444bf655254a0125544bd330", "sha256": "e55db127215c3e2634414e66667c9bbef7d77f9d9198384ef3b30e845919ee62"}, "downloads": -1, "filename": "cs.deco-20190601.tar.gz", "has_sig": false, "md5_digest": "a6c08e08444bf655254a0125544bd330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6452, "upload_time": "2019-06-01T09:55:35", "upload_time_iso_8601": "2019-06-01T09:55:35.694244Z", "url": "https://files.pythonhosted.org/packages/b5/03/7690d43c6dba3544ee0210d5148130b9817158dff24438708fde8011bb03/cs.deco-20190601.tar.gz", "yanked": false}], "20190601.1": [{"comment_text": "", "digests": {"md5": "b9a952e931719d16638b6b2bda2c5e91", "sha256": "545e15d2827e67dcfce72735d97c9d16fd931021e9febe75dee5efb2a757580f"}, "downloads": -1, "filename": "cs.deco-20190601.1.tar.gz", "has_sig": false, "md5_digest": "b9a952e931719d16638b6b2bda2c5e91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6456, "upload_time": "2019-06-01T10:00:37", "upload_time_iso_8601": "2019-06-01T10:00:37.128405Z", "url": "https://files.pythonhosted.org/packages/ad/14/6778f6335bba731de5002bbdb118fc5a1e42fe15eb82b02dbad1e31ff310/cs.deco-20190601.1.tar.gz", "yanked": false}], "20190729": [{"comment_text": "", "digests": {"md5": "9a4fc01280ae846e898cbf3617040949", "sha256": "aff036c14b7215f28fdbcbb818a5674509c09978e02c4553477f889b78c9f391"}, "downloads": -1, "filename": "cs.deco-20190729.tar.gz", "has_sig": false, "md5_digest": "9a4fc01280ae846e898cbf3617040949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6462, "upload_time": "2019-07-28T23:36:00", "upload_time_iso_8601": "2019-07-28T23:36:00.966609Z", "url": "https://files.pythonhosted.org/packages/ac/42/b02bde3530fb1d84d0f610b5ab589dba0f4c285dcb8c9844ea3e4545427a/cs.deco-20190729.tar.gz", "yanked": false}], "20190830": [{"comment_text": "", "digests": {"md5": "aee0ce1f54f0da2f3c35d09e82f61206", "sha256": "53055de98113b851ecc91d3937630ace1359af084911f8e18a5ce89d688ae0d9"}, "downloads": -1, "filename": "cs.deco-20190830.tar.gz", "has_sig": false, "md5_digest": "aee0ce1f54f0da2f3c35d09e82f61206", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7452, "upload_time": "2019-08-29T21:57:44", "upload_time_iso_8601": "2019-08-29T21:57:44.019220Z", "url": "https://files.pythonhosted.org/packages/22/a0/f8e38999f899bd040abc0fb73244e0c5415f1a4a47095770d4b896c02bf2/cs.deco-20190830.tar.gz", "yanked": false}], "20190830.1": [{"comment_text": "", "digests": {"md5": "a350f67ce615eef5b423715070c6099d", "sha256": "619dbc91f85b8cd842498566c60936e2402091b72b2a5408f60fb19bd91e7d90"}, "downloads": -1, "filename": "cs.deco-20190830.1.tar.gz", "has_sig": false, "md5_digest": "a350f67ce615eef5b423715070c6099d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7491, "upload_time": "2019-08-29T22:02:45", "upload_time_iso_8601": "2019-08-29T22:02:45.090567Z", "url": "https://files.pythonhosted.org/packages/db/27/b959d9dfec3d63cf00ea4e9e4c0be336ff0696083f5c82ecbe9918a59d33/cs.deco-20190830.1.tar.gz", "yanked": false}], "20190830.2": [{"comment_text": "", "digests": {"md5": "11c52c65ac37365c9da9595137fb2f48", "sha256": "57293fdb761f3195ad2a70a3281d5b59af966854c248029c5da0b36fcb5ffba3"}, "downloads": -1, "filename": "cs.deco-20190830.2.tar.gz", "has_sig": false, "md5_digest": "11c52c65ac37365c9da9595137fb2f48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7512, "upload_time": "2019-08-29T22:14:50", "upload_time_iso_8601": "2019-08-29T22:14:50.468435Z", "url": "https://files.pythonhosted.org/packages/ac/13/3a7ff90e164c8c99a7180ab3f472d7df9b545baf69ff601d0e679c3d6e5a/cs.deco-20190830.2.tar.gz", "yanked": false}], "20190905": [{"comment_text": "", "digests": {"md5": "85e6c2a60a1e0d669906fd43c14c8bc9", "sha256": "fea916a7d2b62726c72ac97982b6a8eb9e2f1160d56c4fb75eab60acfa895d03"}, "downloads": -1, "filename": "cs.deco-20190905.tar.gz", "has_sig": false, "md5_digest": "85e6c2a60a1e0d669906fd43c14c8bc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8450, "upload_time": "2019-09-05T03:19:21", "upload_time_iso_8601": "2019-09-05T03:19:21.566406Z", "url": "https://files.pythonhosted.org/packages/43/b5/a0755848fd7352b9953a450fd9b741f20ca6c46cd5b0f22b3f267651b11d/cs.deco-20190905.tar.gz", "yanked": false}], "20191004": [{"comment_text": "", "digests": {"md5": "52e6efcfc1870b020161a907f9d1af0b", "sha256": "f372d8f64648c78f4896815c4d0457c261a80c1ed43dc2c36f9fbd1fc7be6e68"}, "downloads": -1, "filename": "cs.deco-20191004.tar.gz", "has_sig": false, "md5_digest": "52e6efcfc1870b020161a907f9d1af0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8512, "upload_time": "2019-10-04T10:29:45", "upload_time_iso_8601": "2019-10-04T10:29:45.723036Z", "url": "https://files.pythonhosted.org/packages/0a/19/98f9d1eb52bebefe2f83180e8b9ab24e274ab5b74c741501b0911ccf1078/cs.deco-20191004.tar.gz", "yanked": false}], "20191006": [{"comment_text": "", "digests": {"md5": "5bb76158840c274cc6613561574255eb", "sha256": "d4e9061fc27d135db5b468bdbafcf10010e3fb97b81a7eec7dc4312429aa353b"}, "downloads": -1, "filename": "cs.deco-20191006.tar.gz", "has_sig": false, "md5_digest": "5bb76158840c274cc6613561574255eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8759, "upload_time": "2019-10-06T03:05:39", "upload_time_iso_8601": "2019-10-06T03:05:39.467856Z", "url": "https://files.pythonhosted.org/packages/db/d5/3019c080abd1301746cf7754763d64077afa643a21fcf222dfd66eea08c1/cs.deco-20191006.tar.gz", "yanked": false}], "20191012": [{"comment_text": "", "digests": {"md5": "51f6391a1a728c8c65cc3eaa89f096eb", "sha256": "e5268e0b9de740f12ced52c7bcc1b2cfb74df6ffc9d7f22b94b768ab3bb27a66"}, "downloads": -1, "filename": "cs.deco-20191012.tar.gz", "has_sig": false, "md5_digest": "51f6391a1a728c8c65cc3eaa89f096eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9299, "upload_time": "2019-10-12T04:31:31", "upload_time_iso_8601": "2019-10-12T04:31:31.489537Z", "url": "https://files.pythonhosted.org/packages/7a/7d/42c2c74f6f8de4d6b32fea5f2f18ef52a90a0c0a60e26f34da1b2bb70340/cs.deco-20191012.tar.gz", "yanked": false}], "20200318": [{"comment_text": "", "digests": {"md5": "c5ad44e5ac543dfcb36afffbb718d9de", "sha256": "f590f08fdbc4ce46040007a544248d8e3fec0e7b1e74649ced11ff32450b85d4"}, "downloads": -1, "filename": "cs.deco-20200318.tar.gz", "has_sig": false, "md5_digest": "c5ad44e5ac543dfcb36afffbb718d9de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10159, "upload_time": "2020-03-17T20:57:34", "upload_time_iso_8601": "2020-03-17T20:57:34.380309Z", "url": "https://files.pythonhosted.org/packages/e7/ee/887f2fe23bc888fee289cec10ca60dbc7231ff93251aa187d43b95ed15cf/cs.deco-20200318.tar.gz", "yanked": false}], "20200318.1": [{"comment_text": "", "digests": {"md5": "131fcda3c84c09d5fc641704a622602b", "sha256": "0c0602a906af37eb1e5011aed76f34832a9d4d74498444e1a23da5594930b728"}, "downloads": -1, "filename": "cs.deco-20200318.1.tar.gz", "has_sig": false, "md5_digest": "131fcda3c84c09d5fc641704a622602b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9776, "upload_time": "2020-03-18T00:12:32", "upload_time_iso_8601": "2020-03-18T00:12:32.840503Z", "url": "https://files.pythonhosted.org/packages/1f/a2/815c9016ae7a5a3b5f1975fd583f3805ca4aa95b63413bedf320d2010e00/cs.deco-20200318.1.tar.gz", "yanked": false}], "20200417": [{"comment_text": "", "digests": {"md5": "c721f084cdd55dc86700018960037730", "sha256": "6ca262af32665681bf0daa174a68dc263d43969169d9ff9deb2e5ce5c257ebc3"}, "downloads": -1, "filename": "cs.deco-20200417.tar.gz", "has_sig": false, "md5_digest": "c721f084cdd55dc86700018960037730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11893, "upload_time": "2020-04-16T23:37:21", "upload_time_iso_8601": "2020-04-16T23:37:21.687933Z", "url": "https://files.pythonhosted.org/packages/98/d4/ced17d68792eb99b80e490bda74cacd339383ddec0926af1fa764b1145c3/cs.deco-20200417.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c721f084cdd55dc86700018960037730", "sha256": "6ca262af32665681bf0daa174a68dc263d43969169d9ff9deb2e5ce5c257ebc3"}, "downloads": -1, "filename": "cs.deco-20200417.tar.gz", "has_sig": false, "md5_digest": "c721f084cdd55dc86700018960037730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11893, "upload_time": "2020-04-16T23:37:21", "upload_time_iso_8601": "2020-04-16T23:37:21.687933Z", "url": "https://files.pythonhosted.org/packages/98/d4/ced17d68792eb99b80e490bda74cacd339383ddec0926af1fa764b1145c3/cs.deco-20200417.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:51 2020"}