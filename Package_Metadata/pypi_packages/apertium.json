{"info": {"author": "Lokendra Singh, Arghya Bhatttacharya, Sushain K. Cherivirala, Andi Qu", "author_email": "sushain@skc.name", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Text Processing :: Linguistic"], "description": "# Apertium + Python\n\n[![Travis Build Status](https://travis-ci.com/apertium/apertium-python.svg?branch=master)](https://travis-ci.com/apertium/apertium-python)\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/sesdinoy4cw2p1tk/branch/master?svg=true)](https://ci.appveyor.com/project/apertium/apertium-python/branch/master)\n[![ReadTheDocs Docs Status](https://readthedocs.org/projects/apertium-python/badge)](https://readthedocs.org/projects/apertium-python)\n[![Coverage Status](https://coveralls.io/repos/github/apertium/apertium-python/badge.svg?branch=master)](https://coveralls.io/github/apertium/apertium-python?branch=master)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/apertium.svg)]((https://pypi.org/project/apertium/))\n\n## Introduction\n\n- The codebase is in development for the GSoC '19 project called **Apertium API in Python**\n- The Apertium core modules are written in C++.\n- This project makes the Apertium modules available in Python, which because of its simplicity is more appealing to users.\n\n## About the Exisiting Code Base\n\n- The existing codebase has `Subprocess` and [SWIG](http://www.swig.org/) wrapper implementations of the higher level functions of Apertium and CG modules.\n\n## Installation\n\n- Installation on Ubuntu and Windows is natively supported:\n\n    ```\n    pip install apertium\n    ```\n\n- For developers, `pipenv` can be used to install the development dependencies and enter a shell with them:\n\n    ```\n    pip install pipenv\n    pipenv install --dev\n    pipenv shell\n    ```\n\n- Apertium packages can be installed from Python interpreter as well.\n  - Install `apertium-all-dev` by calling `apertium.installer.install_apertium()`\n  - Install language packages with `apertium.installer.install_module(language_name)`. For example `apertium-eng` can be installed by executing `apertium.installer.install_module('eng')`\n\n## Usage\n\n- For multiple invocations `Method 1` is more performant, as the dictionary needs to be loaded only once.\n\n### Analysis\n\nPerforming Morphological Analysis\n\nMethod 1: Create an `Analyzer` object and call its `analyze` method.\n```python\nIn [1]: import apertium\nIn [2]: a = apertium.Analyzer('en')\nIn [3]: a.analyze('cats')\nOut[3]: [cats/cat<n><pl>, ./.<sent>]\n```\n\nMethod 2: Calling `analyze()` directly.\n```python\nIn [1]: import apertium\nIn [2]: apertium.analyze('en', 'cats')\nOut[2]: cats/cat<n><pl>\n```\n\n### Generation\n\nPerforming Morphological Generation\n\nMethod 1:  Create a `Generator` object and call its `generate` method.\n```python\nIn [1]: import apertium\nIn [2]: g = apertium.Generator('en')\nIn [3]: g.generate('^cat<n><pl>$')\nOut[3]: 'cats'\n```\n\nMethod 2: Calling `generate()` directly.\n```python\nIn [1]: import apertium\nIn [2]: apertium.generate('en', '^cat<n><pl>$')\nOut[2]: 'cats'\n```\n\n### Tagger\n\nMethod 1:  Create a `Tagger` object and call its `tag` method.\n```python\nIn [1]: import apertium\nIn [2]: tagger = apertium.Tagger('eng')\nIn [3]: tagger.tag('cats')\nOut[3]: [cats/cat<n><pl>]\n```\n\nMethod 2: Calling `tag()` directly.\n```python\nIn [1]: import apertium\nIn [2]: apertium.tag('en', 'cats')\nOut[2]: [cats/cat<n><pl>]\n```\n\n### Translation\n\nMethod 1:  Create a `Translator` object and call its `translate` method.\n```python\nIn [1]: import apertium\nIn [2]: t = apertium.Translator('eng', 'spa')\nIn [3]: t.translate('cats')\nOut[3]: 'Gatos'\n```\n\nMethod 2: Calling `translate()` directly.\n```python\nIn [1]: import apertium\nIn [2]: apertium.translate('en', 'spa', 'cats')\nOut[2]: 'Gatos'\n```\n\n### Installing more modes from other language data\n\nOne can also install modes by providing the path to the `lang-data`:\n\n```python\nIn [1]: import apertium\nIn [2]: apertium.append_pair_path('..')\n```", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/apertium/apertium-python", "keywords": "apertium machine translation linguistics", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "apertium", "package_url": "https://pypi.org/project/apertium/", "platform": "Ubuntu", "project_url": "https://pypi.org/project/apertium/", "project_urls": {"Homepage": "https://github.com/apertium/apertium-python"}, "release_url": "https://pypi.org/project/apertium/0.2.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Apertium core modules available in Python", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Apertium + Python</h1>\n<p><a href=\"https://travis-ci.com/apertium/apertium-python\" rel=\"nofollow\"><img alt=\"Travis Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3aa68297b2e06ced4cea0ecb2a14852458a92ee/68747470733a2f2f7472617669732d63692e636f6d2f617065727469756d2f617065727469756d2d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/apertium/apertium-python/branch/master\" rel=\"nofollow\"><img alt=\"Appveyor Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/305fcb1ce3857b5effaaa4aee2d188c152b33227/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f73657364696e6f79346377327031746b2f6272616e63682f6d61737465723f7376673d74727565\"></a>\n<a href=\"https://readthedocs.org/projects/apertium-python\" rel=\"nofollow\"><img alt=\"ReadTheDocs Docs Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2780c8682ad7a86ffad7f605258e57f67d5cc489/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f617065727469756d2d707974686f6e2f6261646765\"></a>\n<a href=\"https://coveralls.io/github/apertium/apertium-python?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d334aabe8c5a36e501ce209ac2dda0089d0d4bf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f617065727469756d2f617065727469756d2d707974686f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"(https://pypi.org/project/apertium/)\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93c3ddfed27b530a4ddf763c74541456edc76b68/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f617065727469756d2e737667\"></a></p>\n<h2>Introduction</h2>\n<ul>\n<li>The codebase is in development for the GSoC '19 project called <strong>Apertium API in Python</strong></li>\n<li>The Apertium core modules are written in C++.</li>\n<li>This project makes the Apertium modules available in Python, which because of its simplicity is more appealing to users.</li>\n</ul>\n<h2>About the Exisiting Code Base</h2>\n<ul>\n<li>The existing codebase has <code>Subprocess</code> and <a href=\"http://www.swig.org/\" rel=\"nofollow\">SWIG</a> wrapper implementations of the higher level functions of Apertium and CG modules.</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>\n<p>Installation on Ubuntu and Windows is natively supported:</p>\n<pre><code>pip install apertium\n</code></pre>\n</li>\n<li>\n<p>For developers, <code>pipenv</code> can be used to install the development dependencies and enter a shell with them:</p>\n<pre><code>pip install pipenv\npipenv install --dev\npipenv shell\n</code></pre>\n</li>\n<li>\n<p>Apertium packages can be installed from Python interpreter as well.</p>\n<ul>\n<li>Install <code>apertium-all-dev</code> by calling <code>apertium.installer.install_apertium()</code></li>\n<li>Install language packages with <code>apertium.installer.install_module(language_name)</code>. For example <code>apertium-eng</code> can be installed by executing <code>apertium.installer.install_module('eng')</code></li>\n</ul>\n</li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li>For multiple invocations <code>Method 1</code> is more performant, as the dictionary needs to be loaded only once.</li>\n</ul>\n<h3>Analysis</h3>\n<p>Performing Morphological Analysis</p>\n<p>Method 1: Create an <code>Analyzer</code> object and call its <code>analyze</code> method.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">Analyzer</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"s1\">'cats'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"n\">cats</span><span class=\"o\">/</span><span class=\"n\">cat</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">pl</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">./.&lt;</span><span class=\"n\">sent</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>Method 2: Calling <code>analyze()</code> directly.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'cats'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">cats</span><span class=\"o\">/</span><span class=\"n\">cat</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">pl</span><span class=\"o\">&gt;</span>\n</pre>\n<h3>Generation</h3>\n<p>Performing Morphological Generation</p>\n<p>Method 1:  Create a <code>Generator</code> object and call its <code>generate</code> method.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s1\">'^cat&lt;n&gt;&lt;pl&gt;$'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s1\">'cats'</span>\n</pre>\n<p>Method 2: Calling <code>generate()</code> directly.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'^cat&lt;n&gt;&lt;pl&gt;$'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">'cats'</span>\n</pre>\n<h3>Tagger</h3>\n<p>Method 1:  Create a <code>Tagger</code> object and call its <code>tag</code> method.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">tagger</span> <span class=\"o\">=</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">Tagger</span><span class=\"p\">(</span><span class=\"s1\">'eng'</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">tagger</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'cats'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"n\">cats</span><span class=\"o\">/</span><span class=\"n\">cat</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">pl</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>Method 2: Calling <code>tag()</code> directly.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'cats'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"n\">cats</span><span class=\"o\">/</span><span class=\"n\">cat</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">pl</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<h3>Translation</h3>\n<p>Method 1:  Create a <code>Translator</code> object and call its <code>translate</code> method.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">Translator</span><span class=\"p\">(</span><span class=\"s1\">'eng'</span><span class=\"p\">,</span> <span class=\"s1\">'spa'</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"s1\">'cats'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s1\">'Gatos'</span>\n</pre>\n<p>Method 2: Calling <code>translate()</code> directly.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'spa'</span><span class=\"p\">,</span> <span class=\"s1\">'cats'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">'Gatos'</span>\n</pre>\n<h3>Installing more modes from other language data</h3>\n<p>One can also install modes by providing the path to the <code>lang-data</code>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">apertium</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">apertium</span><span class=\"o\">.</span><span class=\"n\">append_pair_path</span><span class=\"p\">(</span><span class=\"s1\">'..'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6068932, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1f73c80d0bda493d602dfeb3a2bcaf96", "sha256": "77437b2731ba4857ecd638b497a60ebe8456b88252d1eab282bff66539ab57a7"}, "downloads": -1, "filename": "apertium-0.1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "1f73c80d0bda493d602dfeb3a2bcaf96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 26896, "upload_time": "2019-09-01T17:58:40", "upload_time_iso_8601": "2019-09-01T17:58:40.090293Z", "url": "https://files.pythonhosted.org/packages/34/2c/a75cda570a9b372eb46702c79a8ee0041bfe797f4fa6e2a26b285cc9d385/apertium-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ada4768dbb111792ed657d8d38133b65", "sha256": "c96daf87b966b59b13d7b58d231041675fbbeb34b0617833657296a24447151e"}, "downloads": -1, "filename": "apertium-0.1.0.tar.gz", "has_sig": true, "md5_digest": "ada4768dbb111792ed657d8d38133b65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13311, "upload_time": "2019-09-01T17:58:42", "upload_time_iso_8601": "2019-09-01T17:58:42.743648Z", "url": "https://files.pythonhosted.org/packages/81/da/457b276c15ddd54919ab8879d5b6451274049a6d0f0cfbe4d489b480008e/apertium-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "818f3252fcb6f3b9bbc8dba8239ba009", "sha256": "26ca52c12096f0a11b898849f39e058ae59f2165e58909495d9ef077691cba27"}, "downloads": -1, "filename": "apertium-0.2.0-py3-none-any.whl", "has_sig": true, "md5_digest": "818f3252fcb6f3b9bbc8dba8239ba009", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27010, "upload_time": "2019-09-06T03:52:49", "upload_time_iso_8601": "2019-09-06T03:52:49.946715Z", "url": "https://files.pythonhosted.org/packages/4d/bf/989a1a0d975bf2838bc2a1554afc068c0a66b394e7bae4398ed73ccf1bf8/apertium-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b869d8d7eb67ce23eea9de71467f9045", "sha256": "e3ae26d738765f17d828941fc5dc70791940a0c12d78dffd774632e58a79a4b3"}, "downloads": -1, "filename": "apertium-0.2.0.tar.gz", "has_sig": true, "md5_digest": "b869d8d7eb67ce23eea9de71467f9045", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13446, "upload_time": "2019-09-06T03:52:53", "upload_time_iso_8601": "2019-09-06T03:52:53.209113Z", "url": "https://files.pythonhosted.org/packages/0b/84/f34950cead942c85976cd8d31806b89db4124557c76d2dd4fefbbadb1688/apertium-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d3dbc9ce6d3a62f42d2255f782d50df3", "sha256": "f8d5a7d8237a8da4c5058462a0997f2c6987e7ceb48979f2231d859dee6f6706"}, "downloads": -1, "filename": "apertium-0.2.1-py3-none-any.whl", "has_sig": true, "md5_digest": "d3dbc9ce6d3a62f42d2255f782d50df3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27010, "upload_time": "2019-09-12T04:02:56", "upload_time_iso_8601": "2019-09-12T04:02:56.562703Z", "url": "https://files.pythonhosted.org/packages/2e/6d/7ca375afce1b34487f465b7a528fcfcb147f03b867ae1b1d80bf882147cf/apertium-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e02a3102e872ad7f3d0fec097fbeede0", "sha256": "1e71f01565ae4db6b6400ebdafcda9352e571708097d9f6ffe679018641358a6"}, "downloads": -1, "filename": "apertium-0.2.1.tar.gz", "has_sig": true, "md5_digest": "e02a3102e872ad7f3d0fec097fbeede0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13654, "upload_time": "2019-09-12T04:02:58", "upload_time_iso_8601": "2019-09-12T04:02:58.679860Z", "url": "https://files.pythonhosted.org/packages/4a/5c/f96dbe711fd85d8e7c10fd804dc993ca7486c9ea984e169856ace7ac22a6/apertium-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "c665376641da21502ef6195b74222e44", "sha256": "00e6cf29f5321498ae77c54eb00024ccf75fe2723ea0333b719ba1613903502c"}, "downloads": -1, "filename": "apertium-0.2.2.tar.gz", "has_sig": true, "md5_digest": "c665376641da21502ef6195b74222e44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13622, "upload_time": "2019-09-14T02:37:35", "upload_time_iso_8601": "2019-09-14T02:37:35.142442Z", "url": "https://files.pythonhosted.org/packages/d5/5f/b75ed2e8548bb402676e83cdfc90161aceb39a58dd497dbce751814d4476/apertium-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "4670202e9e0d7b2cae5f5a29fd0b0f91", "sha256": "af573718d93e02a22a1a1f32d765058ea6087b737804f957bb8ab2efbebf89c6"}, "downloads": -1, "filename": "apertium-0.2.3.tar.gz", "has_sig": true, "md5_digest": "4670202e9e0d7b2cae5f5a29fd0b0f91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13456, "upload_time": "2019-11-02T19:18:46", "upload_time_iso_8601": "2019-11-02T19:18:46.441735Z", "url": "https://files.pythonhosted.org/packages/bc/0a/b75646773a53aa8318ecb164b2d9e39889cf458097b67abd6cc6dba0b9dc/apertium-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4670202e9e0d7b2cae5f5a29fd0b0f91", "sha256": "af573718d93e02a22a1a1f32d765058ea6087b737804f957bb8ab2efbebf89c6"}, "downloads": -1, "filename": "apertium-0.2.3.tar.gz", "has_sig": true, "md5_digest": "4670202e9e0d7b2cae5f5a29fd0b0f91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13456, "upload_time": "2019-11-02T19:18:46", "upload_time_iso_8601": "2019-11-02T19:18:46.441735Z", "url": "https://files.pythonhosted.org/packages/bc/0a/b75646773a53aa8318ecb164b2d9e39889cf458097b67abd6cc6dba0b9dc/apertium-0.2.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:51 2020"}