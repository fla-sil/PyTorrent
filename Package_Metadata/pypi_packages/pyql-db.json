{"info": {"author": "Joshua Jamison", "author_email": "joshjamison1@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyql\n\nA simple ORM(Object-relational mapping) for accessing, inserting, updating, deleting data within RBDMS tables using python\n\n### Instalation\n\n    $ python3 -m venv env\n\n    $ source my-project/bin/activate\n\nInstall with PIP\n\n     (env)$ pip install pyql-db   \n\nDownload & install Library from Github:\n\n    (env)$ git clone https://github.com/codemation/pyql.git\n\nUse install script to install the pyql into the activated environment libraries\n\n    (env)$ cd pyql; sudo ./install.py install\n\n### Compatable Databases - Currently\n\n- mysql\n- sqlite\n\n## Getting Started \n\n### DB connection\n\n        import sqlite3\n        db = database(\n            sqlite3.connect, \n            database=\"testdb\"\n            )\n\n        import mysql.connector\n\n        db = database(\n            mysql.connector.connect,\n            database='mysql_database',\n            user='mysqluser',\n            password='my-secret-pw',\n            host='localhost',\n            type='mysql'\n            )\nExisting tables schemas within databases are loaded when database object is instantiated and ready for use immedielty.\n\n### Table Create\nRequires List of at least 2 item tuples, max 3\n\n('ColumnName', type, 'modifiers')\n\n- ColumnName - str - database column name exclusions apply\n- types: str, int, float, byte, bool, None # JSON dumpable dicts fall under str types\n- modifiers: NOT NULL, UNIQUE, AUTO_INCREMENT\n\nNote Some differences may apply for column options i.e AUTOINCREMENT(sqlite) vs AUTO_INCREMENT(mysql) - \nSee DB documentation for reference.\n\nNote: Unique constraints are not validated by pyql but at db, so if modifier is supported it will be added when table is created.\n\n    # Table Create    \n    db.create_table(\n        'stocks', \n        [    \n            ('order_num', int, 'AUTO_INCREMENT'),\n            ('date', str),\n            ('trans', str),\n            ('symbol', str),\n            ('qty', float),\n            ('price', str)\n        ], \n        'order_num' # Primary Key \n    )\n\n    mysql> describe stocks;\n    +-----------+---------+------+-----+---------+----------------+\n    | Field     | Type    | Null | Key | Default | Extra          |\n    +-----------+---------+------+-----+---------+----------------+\n    | order_num | int(11) | NO   | PRI | NULL    | auto_increment |\n    | date      | text    | YES  |     | NULL    |                |\n    | trans     | text    | YES  |     | NULL    |                |\n    | condition | text    | YES  |     | NULL    |                |\n    | symbol    | text    | YES  |     | NULL    |                |\n    | qty       | double  | YES  |     | NULL    |                |\n    | price     | text    | YES  |     | NULL    |                |\n    +-----------+---------+------+-----+---------+----------------+\n    6 rows in set (0.00 sec)\n\n#### Creating Tables with Foreign Keys\n\n    db.create_table(\n        'departments', \n        [    \n            ('id', int, 'UNIQUE'),\n            ('name', str)\n\n        ], \n        'id' # Primary Key \n    )\n\n    db.create_table(\n        'positions', \n        [    \n            ('id', int, 'UNIQUE'),\n            ('name', str),\n            ('departmentId', int)\n        ], \n        'id', # Primary Key\n        fKeys={\n            'departmentId': {\n                    'table': 'departments', \n                    'ref': 'id',\n                    'mods': 'ON UPDATE CASCADE ON DELETE CASCADE'\n            }\n        }\n    )\n\n    db.create_table(\n        'employees', \n        [    \n            ('id', int, 'UNIQUE'),\n            ('name', str),\n            ('positionId', int)\n        ], \n        'id', # Primary Key\n        fKeys={\n            'positionId': {\n                    'table': 'positions', \n                    'ref': 'id',\n                    'mods': 'ON UPDATE CASCADE ON DELETE CASCADE'\n            }\n        }\n    )\n\n\n### Insert Data\nRequires key-value pairs - may be input using dict or the following\n\nUn-packing\n\n    # Note order_num is not required as auto_increment was specified\n    trade = {'date': '2006-01-05', 'trans': 'BUY', 'symbol': 'RHAT', 'qty': 100.0, 'price': 35.14}\n    db.tables['stocks'].insert(**trade)\n\n    query:\n        INSERT INTO stocks (date, trans, symbol, qty, price) VALUES (\"2006-01-05\", \"BUY\", \"RHAT\", 100, 35.14)\n\nIn-Line\n\n    # Note order_num is not required as auto_increment was specified\n    db.tables['stocks'].insert(\n        date='2006-01-05', \n        trans='BUY',\n        symbol='RHAT',\n        qty=200.0,\n        price=65.14\n    )\n\n    query:\n        INSERT INTO stocks (date, trans, symbol, qty, price) VALUES (\"2006-01-05\", \"BUY\", \"RHAT\", 200, 65.14)\n\n#### Inserting Special Data \n- Columns of type string can hold JSON dumpable python dictionaries as JSON strings and are automatically converted back into dicts when read. \n- Nested Dicts are also Ok, but all items should be JSON compatible data types\n\n\n        txData = {\n            'type': 'BUY', \n            'condition': {\n                        'limit': '36.00', \n                        'time': 'EndOfTradingDay'\n            }\n        }\n\n        trade = {\n            'order_num': 1, 'date': '2006-01-05', \n            'trans': txData, # \n            'symbol': 'RHAT', \n            'qty': 100, 'price': 35.14, 'afterHours': True\n        }\n\n        db.tables['stocks'].insert(**trade)\n        query:\n            INSERT INTO stocks (order_num, date, trans, symbol, qty, price, afterHours) VALUES (1, \"2006-01-05\", '{\"type\": \"BUY\", \"condition\": {\"limit\": \"36.00\", \"time\": \"EndOfTradingDay\"}}', \"RHAT\", 100, 35.14, True)\n        result:\n            In:\n                db.tables['stocks'][1]['trans']['condition']\n            Out: #\n                {'limit': '36.00', 'time': 'EndOfTradingDay'}\n\n\n### Select Data\n#### Basic Usage:\n\nAll Rows & Columns in table\n\n    db.tables['employees'].select('*')\n\nAll Rows & Specific Columns \n\n    db.tables['employees'].select('id', 'name', 'positionId')\n\nAll Rows & Specific Columns with Matching Values\n\n    db.tables['employees'].select('id', 'name', 'positionId', where={'id': 1000})\n\nAll Rows & Specific Columns with Multple Matching Values\n\n    db.tables['employees'].select('id', 'name', 'positionId', where={'id': 1000, 'name': 'Frank Franklin'})\n\n#### Advanced Usage:\n\nAll Rows & Columns from employees, Combining ALL Rows & Columns of table positions (if foreign keys match)\n\n    # Basic Join\n    db.tables['employees'].select('*', join='positions')\n    query:\n        SELECT * FROM employees JOIN positions ON employees.positionId = positions.id\n    output:\n        [{\n            'employees.id': 1000, 'employees.name': 'Frank Franklin', \n            'employees.positionId': 100101, 'positions.name': 'Director', \n            'positions.departmentId': 1001},\n            ...\n        ]\nAll Rows & Specific Columns from employees, Combining All Rows & Specific Columns of table positions (if foreign keys match)\n\n    # Basic Join \n    db.tables['employees'].select('employees.name', 'positions.name', join='positions')\n    query:\n        SELECT employees.name,positions.name FROM employees JOIN positions ON employees.positionId = positions.id\n    output:\n        [\n            {'employees.name': 'Frank Franklin', 'positions.name': 'Director'}, \n            {'employees.name': 'Eli Doe', 'positions.name': 'Manager'},\n            ...\n        ]\n\nAll Rows & Specific Columns from employees, Combining All Rows & Specific Columns of table positions (if foreign keys match) with matching 'position.name' value\n\n    # Basic Join with conditions\n    db.tables['employees'].select('employees.name', 'positions.name', join='positions', where={'positions.name': 'Director'})\n    query:\n        SELECT employees.name,positions.name FROM employees JOIN positions ON employees.positionId = positions.id WHERE positions.name='Director'\n    output:\n        [\n            {'employees.name': 'Frank Franklin', 'positions.name': 'Director'}, \n            {'employees.name': 'Elly Doe', 'positions.name': 'Director'},\n            ..\n        ]\n\nAll Rows & Specific Columns from employees, Combining Specific Rows & Specific Columns of tables positions & departments\n\nNote: join='xTable' will only work if the calling table has a f-key reference to table 'xTable'\n\n    # Multi-table Join with conditions\n    db.tables['employees'].select(\n        'employees.name', \n        'positions.name', \n        'departments.name', \n        join={\n            'positions': {'employees.positionId': 'positions.id'}, \n            'departments': {'positions.departmentId': 'departments.id'}\n        }, \n        where={'positions.name': 'Director'})\n    query:\n        SELECT employees.name,positions.name,departments.name FROM employees JOIN positions ON employees.positionId = positions.id JOIN departments ON positions.departmentId = departments.id WHERE positions.name='Director'\n    result:\n        [\n            {'employees.name': 'Frank Franklin', 'positions.name': 'Director', 'departments.name': 'HR'}, \n            {'employees.name': 'Elly Doe', 'positions.name': 'Director', 'departments.name': 'Sales'}\n        ]\n\nSpecial Note: When performing multi-table joins, joining columns must be explicity provided. The key-value order is not explicity important, but will determine which column name is present in returned rows\n\n    join={'yTable': {'yTable.id': 'xTable.yId'}}\n    result:\n        [\n            {'xTable.a': 'val1', 'yTable.id': 'val2'},\n            {'xTable.a': 'val1', 'yTable.id': 'val3'}\n        ]\nOR\n\n    join={'yTable': {'xTable.yId': 'yTable.id'}}\n    result:\n        [\n            {'xTable.a': 'val1', 'xTable.yId': 'val2'},\n            {'xTable.a': 'val1', 'xTable.yId': 'val3'}\n        ]\n\n\n#### Special Examples:\n\nBracket indexs can only be used for primary keys and return all column values\n\n    db.tables['employees'][1000]\n    query:\n        SELECT * FROM employees WHERE id=1000\n    result:\n        {'id': 1000, 'name': 'Frank Franklin', 'positionId': 100101}\n\n\nIterate through table - grab all rows - allowing client side filtering \n\n    for row in db.tables['employees']:\n        print(row['id], row['name'])\n    query:\n        SELECT * FROM employees\n    result:\n        1000 Frank Franklin\n        1001 Eli Doe\n        1002 Chris Smith\n        1003 Clara Carson\n\nUsing list comprehension\n\n    sel = [(row['id'], row['name']) for row in db.tables['employees']]\n    query:\n        SELECT * FROM employees\n    result:\n        [\n            (1000, 'Frank Franklin'), \n            (1001, 'Eli Doe'), \n            (1002, 'Chris Smith'), \n            (1003, 'Clara Carson'),\n            ...\n        ]\n\n\n### Update Data\n\nDefine update values in-line or un-pack\n\n    db.tables['stocks'].update(symbol='NTAP',trans='SELL', where={'order_num': 1})\n    query:\n        UPDATE stocks SET symbol = 'NTAP', trans = 'SELL' WHERE order_num=1\n\nUn-Pack\n\n    #JSON capable Data \n    txData = {'type': 'BUY', 'condition': {'limit': '36.00', 'time': 'EndOfTradingDay'}}\n    toUpdate = {'symbol': 'NTAP', 'trans': txData}\n    where = {'order_num': 1}\n\n    db.tables['stocks'].update(**toUpdate, where=where)\n    query:\n        UPDATE stocks SET symbol = 'NTAP', trans = '{\"type\": \"BUY\", \"condition\": {\"limit\": \"36.00\", \"time\": \"EndOfTradingDay\"}}' WHERE order_num=1\n\nBracket Assigment - Primary Key name assumed inside Brackets for value\n\n    #JSON capable Data \n\n    txData = {'type': 'BUY', 'condition': {'limit': '36.00', 'time': 'EndOfTradingDay'}}\n    toUpdate = {'symbol': 'NTAP', 'trans': txData, 'qty': 500}\n\n    db.tables['stocks'][2] = toUpdate\n\n    query:\n        # check that primary_key value 2 exists\n        SELECT * FROM stocks WHERE order_num=2\n\n        # update \n        UPDATE stocks SET symbol = 'NTAP', trans = '{\"type\": \"BUY\", \"condition\": {\"limit\": \"36.00\", \"time\": \"EndOfTradingDay\"}}', qty = 500 WHERE order_num=2\n\n    result:\n        db.tables['stocks'][2]\n        {\n            'order_num': 2, \n            'date': '2006-01-05', \n            'trans': {'type': 'BUY', 'condition': {'limit': '36.00', 'time': 'EndOfTradingDay'}}, \n            'symbol': 'NTAP', \n            'qty': 500, \n            'price': 35.16, \n            'afterHours': True\n        }\n\n\n### Delete Data \n\n    db.tables['stocks'].delete(where={'order_num': 1})\n\n### Other\nTable Exists\n\n    'employees' in db\n    query:\n        show tables\n    result:\n        True\n\nPrimary Key Exists:\n\n    1000 in db.tables['employees']\n    query:\n        SELECT * FROM employees WHERE id=1000\n    result:\n        True\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/codemation/pyql", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyql-db", "package_url": "https://pypi.org/project/pyql-db/", "platform": "", "project_url": "https://pypi.org/project/pyql-db/", "project_urls": {"Homepage": "https://github.com/codemation/pyql"}, "release_url": "https://pypi.org/project/pyql-db/2.5/", "requires_dist": ["mysql-connector-python"], "requires_python": ">=3.4, <4", "summary": "Simple python database orchestration utility which makes it easy to add tables, insert, select, update, delete items with tables", "version": "2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyql</h1>\n<p>A simple ORM(Object-relational mapping) for accessing, inserting, updating, deleting data within RBDMS tables using python</p>\n<h3>Instalation</h3>\n<pre><code>$ python3 -m venv env\n\n$ source my-project/bin/activate\n</code></pre>\n<p>Install with PIP</p>\n<pre><code> (env)$ pip install pyql-db   \n</code></pre>\n<p>Download &amp; install Library from Github:</p>\n<pre><code>(env)$ git clone https://github.com/codemation/pyql.git\n</code></pre>\n<p>Use install script to install the pyql into the activated environment libraries</p>\n<pre><code>(env)$ cd pyql; sudo ./install.py install\n</code></pre>\n<h3>Compatable Databases - Currently</h3>\n<ul>\n<li>mysql</li>\n<li>sqlite</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>DB connection</h3>\n<pre><code>    import sqlite3\n    db = database(\n        sqlite3.connect, \n        database=\"testdb\"\n        )\n\n    import mysql.connector\n\n    db = database(\n        mysql.connector.connect,\n        database='mysql_database',\n        user='mysqluser',\n        password='my-secret-pw',\n        host='localhost',\n        type='mysql'\n        )\n</code></pre>\n<p>Existing tables schemas within databases are loaded when database object is instantiated and ready for use immedielty.</p>\n<h3>Table Create</h3>\n<p>Requires List of at least 2 item tuples, max 3</p>\n<p>('ColumnName', type, 'modifiers')</p>\n<ul>\n<li>ColumnName - str - database column name exclusions apply</li>\n<li>types: str, int, float, byte, bool, None # JSON dumpable dicts fall under str types</li>\n<li>modifiers: NOT NULL, UNIQUE, AUTO_INCREMENT</li>\n</ul>\n<p>Note Some differences may apply for column options i.e AUTOINCREMENT(sqlite) vs AUTO_INCREMENT(mysql) -\nSee DB documentation for reference.</p>\n<p>Note: Unique constraints are not validated by pyql but at db, so if modifier is supported it will be added when table is created.</p>\n<pre><code># Table Create    \ndb.create_table(\n    'stocks', \n    [    \n        ('order_num', int, 'AUTO_INCREMENT'),\n        ('date', str),\n        ('trans', str),\n        ('symbol', str),\n        ('qty', float),\n        ('price', str)\n    ], \n    'order_num' # Primary Key \n)\n\nmysql&gt; describe stocks;\n+-----------+---------+------+-----+---------+----------------+\n| Field     | Type    | Null | Key | Default | Extra          |\n+-----------+---------+------+-----+---------+----------------+\n| order_num | int(11) | NO   | PRI | NULL    | auto_increment |\n| date      | text    | YES  |     | NULL    |                |\n| trans     | text    | YES  |     | NULL    |                |\n| condition | text    | YES  |     | NULL    |                |\n| symbol    | text    | YES  |     | NULL    |                |\n| qty       | double  | YES  |     | NULL    |                |\n| price     | text    | YES  |     | NULL    |                |\n+-----------+---------+------+-----+---------+----------------+\n6 rows in set (0.00 sec)\n</code></pre>\n<h4>Creating Tables with Foreign Keys</h4>\n<pre><code>db.create_table(\n    'departments', \n    [    \n        ('id', int, 'UNIQUE'),\n        ('name', str)\n\n    ], \n    'id' # Primary Key \n)\n\ndb.create_table(\n    'positions', \n    [    \n        ('id', int, 'UNIQUE'),\n        ('name', str),\n        ('departmentId', int)\n    ], \n    'id', # Primary Key\n    fKeys={\n        'departmentId': {\n                'table': 'departments', \n                'ref': 'id',\n                'mods': 'ON UPDATE CASCADE ON DELETE CASCADE'\n        }\n    }\n)\n\ndb.create_table(\n    'employees', \n    [    \n        ('id', int, 'UNIQUE'),\n        ('name', str),\n        ('positionId', int)\n    ], \n    'id', # Primary Key\n    fKeys={\n        'positionId': {\n                'table': 'positions', \n                'ref': 'id',\n                'mods': 'ON UPDATE CASCADE ON DELETE CASCADE'\n        }\n    }\n)\n</code></pre>\n<h3>Insert Data</h3>\n<p>Requires key-value pairs - may be input using dict or the following</p>\n<p>Un-packing</p>\n<pre><code># Note order_num is not required as auto_increment was specified\ntrade = {'date': '2006-01-05', 'trans': 'BUY', 'symbol': 'RHAT', 'qty': 100.0, 'price': 35.14}\ndb.tables['stocks'].insert(**trade)\n\nquery:\n    INSERT INTO stocks (date, trans, symbol, qty, price) VALUES (\"2006-01-05\", \"BUY\", \"RHAT\", 100, 35.14)\n</code></pre>\n<p>In-Line</p>\n<pre><code># Note order_num is not required as auto_increment was specified\ndb.tables['stocks'].insert(\n    date='2006-01-05', \n    trans='BUY',\n    symbol='RHAT',\n    qty=200.0,\n    price=65.14\n)\n\nquery:\n    INSERT INTO stocks (date, trans, symbol, qty, price) VALUES (\"2006-01-05\", \"BUY\", \"RHAT\", 200, 65.14)\n</code></pre>\n<h4>Inserting Special Data</h4>\n<ul>\n<li>\n<p>Columns of type string can hold JSON dumpable python dictionaries as JSON strings and are automatically converted back into dicts when read.</p>\n</li>\n<li>\n<p>Nested Dicts are also Ok, but all items should be JSON compatible data types</p>\n<pre><code>  txData = {\n      'type': 'BUY', \n      'condition': {\n                  'limit': '36.00', \n                  'time': 'EndOfTradingDay'\n      }\n  }\n\n  trade = {\n      'order_num': 1, 'date': '2006-01-05', \n      'trans': txData, # \n      'symbol': 'RHAT', \n      'qty': 100, 'price': 35.14, 'afterHours': True\n  }\n\n  db.tables['stocks'].insert(**trade)\n  query:\n      INSERT INTO stocks (order_num, date, trans, symbol, qty, price, afterHours) VALUES (1, \"2006-01-05\", '{\"type\": \"BUY\", \"condition\": {\"limit\": \"36.00\", \"time\": \"EndOfTradingDay\"}}', \"RHAT\", 100, 35.14, True)\n  result:\n      In:\n          db.tables['stocks'][1]['trans']['condition']\n      Out: #\n          {'limit': '36.00', 'time': 'EndOfTradingDay'}\n</code></pre>\n</li>\n</ul>\n<h3>Select Data</h3>\n<h4>Basic Usage:</h4>\n<p>All Rows &amp; Columns in table</p>\n<pre><code>db.tables['employees'].select('*')\n</code></pre>\n<p>All Rows &amp; Specific Columns</p>\n<pre><code>db.tables['employees'].select('id', 'name', 'positionId')\n</code></pre>\n<p>All Rows &amp; Specific Columns with Matching Values</p>\n<pre><code>db.tables['employees'].select('id', 'name', 'positionId', where={'id': 1000})\n</code></pre>\n<p>All Rows &amp; Specific Columns with Multple Matching Values</p>\n<pre><code>db.tables['employees'].select('id', 'name', 'positionId', where={'id': 1000, 'name': 'Frank Franklin'})\n</code></pre>\n<h4>Advanced Usage:</h4>\n<p>All Rows &amp; Columns from employees, Combining ALL Rows &amp; Columns of table positions (if foreign keys match)</p>\n<pre><code># Basic Join\ndb.tables['employees'].select('*', join='positions')\nquery:\n    SELECT * FROM employees JOIN positions ON employees.positionId = positions.id\noutput:\n    [{\n        'employees.id': 1000, 'employees.name': 'Frank Franklin', \n        'employees.positionId': 100101, 'positions.name': 'Director', \n        'positions.departmentId': 1001},\n        ...\n    ]\n</code></pre>\n<p>All Rows &amp; Specific Columns from employees, Combining All Rows &amp; Specific Columns of table positions (if foreign keys match)</p>\n<pre><code># Basic Join \ndb.tables['employees'].select('employees.name', 'positions.name', join='positions')\nquery:\n    SELECT employees.name,positions.name FROM employees JOIN positions ON employees.positionId = positions.id\noutput:\n    [\n        {'employees.name': 'Frank Franklin', 'positions.name': 'Director'}, \n        {'employees.name': 'Eli Doe', 'positions.name': 'Manager'},\n        ...\n    ]\n</code></pre>\n<p>All Rows &amp; Specific Columns from employees, Combining All Rows &amp; Specific Columns of table positions (if foreign keys match) with matching 'position.name' value</p>\n<pre><code># Basic Join with conditions\ndb.tables['employees'].select('employees.name', 'positions.name', join='positions', where={'positions.name': 'Director'})\nquery:\n    SELECT employees.name,positions.name FROM employees JOIN positions ON employees.positionId = positions.id WHERE positions.name='Director'\noutput:\n    [\n        {'employees.name': 'Frank Franklin', 'positions.name': 'Director'}, \n        {'employees.name': 'Elly Doe', 'positions.name': 'Director'},\n        ..\n    ]\n</code></pre>\n<p>All Rows &amp; Specific Columns from employees, Combining Specific Rows &amp; Specific Columns of tables positions &amp; departments</p>\n<p>Note: join='xTable' will only work if the calling table has a f-key reference to table 'xTable'</p>\n<pre><code># Multi-table Join with conditions\ndb.tables['employees'].select(\n    'employees.name', \n    'positions.name', \n    'departments.name', \n    join={\n        'positions': {'employees.positionId': 'positions.id'}, \n        'departments': {'positions.departmentId': 'departments.id'}\n    }, \n    where={'positions.name': 'Director'})\nquery:\n    SELECT employees.name,positions.name,departments.name FROM employees JOIN positions ON employees.positionId = positions.id JOIN departments ON positions.departmentId = departments.id WHERE positions.name='Director'\nresult:\n    [\n        {'employees.name': 'Frank Franklin', 'positions.name': 'Director', 'departments.name': 'HR'}, \n        {'employees.name': 'Elly Doe', 'positions.name': 'Director', 'departments.name': 'Sales'}\n    ]\n</code></pre>\n<p>Special Note: When performing multi-table joins, joining columns must be explicity provided. The key-value order is not explicity important, but will determine which column name is present in returned rows</p>\n<pre><code>join={'yTable': {'yTable.id': 'xTable.yId'}}\nresult:\n    [\n        {'xTable.a': 'val1', 'yTable.id': 'val2'},\n        {'xTable.a': 'val1', 'yTable.id': 'val3'}\n    ]\n</code></pre>\n<p>OR</p>\n<pre><code>join={'yTable': {'xTable.yId': 'yTable.id'}}\nresult:\n    [\n        {'xTable.a': 'val1', 'xTable.yId': 'val2'},\n        {'xTable.a': 'val1', 'xTable.yId': 'val3'}\n    ]\n</code></pre>\n<h4>Special Examples:</h4>\n<p>Bracket indexs can only be used for primary keys and return all column values</p>\n<pre><code>db.tables['employees'][1000]\nquery:\n    SELECT * FROM employees WHERE id=1000\nresult:\n    {'id': 1000, 'name': 'Frank Franklin', 'positionId': 100101}\n</code></pre>\n<p>Iterate through table - grab all rows - allowing client side filtering</p>\n<pre><code>for row in db.tables['employees']:\n    print(row['id], row['name'])\nquery:\n    SELECT * FROM employees\nresult:\n    1000 Frank Franklin\n    1001 Eli Doe\n    1002 Chris Smith\n    1003 Clara Carson\n</code></pre>\n<p>Using list comprehension</p>\n<pre><code>sel = [(row['id'], row['name']) for row in db.tables['employees']]\nquery:\n    SELECT * FROM employees\nresult:\n    [\n        (1000, 'Frank Franklin'), \n        (1001, 'Eli Doe'), \n        (1002, 'Chris Smith'), \n        (1003, 'Clara Carson'),\n        ...\n    ]\n</code></pre>\n<h3>Update Data</h3>\n<p>Define update values in-line or un-pack</p>\n<pre><code>db.tables['stocks'].update(symbol='NTAP',trans='SELL', where={'order_num': 1})\nquery:\n    UPDATE stocks SET symbol = 'NTAP', trans = 'SELL' WHERE order_num=1\n</code></pre>\n<p>Un-Pack</p>\n<pre><code>#JSON capable Data \ntxData = {'type': 'BUY', 'condition': {'limit': '36.00', 'time': 'EndOfTradingDay'}}\ntoUpdate = {'symbol': 'NTAP', 'trans': txData}\nwhere = {'order_num': 1}\n\ndb.tables['stocks'].update(**toUpdate, where=where)\nquery:\n    UPDATE stocks SET symbol = 'NTAP', trans = '{\"type\": \"BUY\", \"condition\": {\"limit\": \"36.00\", \"time\": \"EndOfTradingDay\"}}' WHERE order_num=1\n</code></pre>\n<p>Bracket Assigment - Primary Key name assumed inside Brackets for value</p>\n<pre><code>#JSON capable Data \n\ntxData = {'type': 'BUY', 'condition': {'limit': '36.00', 'time': 'EndOfTradingDay'}}\ntoUpdate = {'symbol': 'NTAP', 'trans': txData, 'qty': 500}\n\ndb.tables['stocks'][2] = toUpdate\n\nquery:\n    # check that primary_key value 2 exists\n    SELECT * FROM stocks WHERE order_num=2\n\n    # update \n    UPDATE stocks SET symbol = 'NTAP', trans = '{\"type\": \"BUY\", \"condition\": {\"limit\": \"36.00\", \"time\": \"EndOfTradingDay\"}}', qty = 500 WHERE order_num=2\n\nresult:\n    db.tables['stocks'][2]\n    {\n        'order_num': 2, \n        'date': '2006-01-05', \n        'trans': {'type': 'BUY', 'condition': {'limit': '36.00', 'time': 'EndOfTradingDay'}}, \n        'symbol': 'NTAP', \n        'qty': 500, \n        'price': 35.16, \n        'afterHours': True\n    }\n</code></pre>\n<h3>Delete Data</h3>\n<pre><code>db.tables['stocks'].delete(where={'order_num': 1})\n</code></pre>\n<h3>Other</h3>\n<p>Table Exists</p>\n<pre><code>'employees' in db\nquery:\n    show tables\nresult:\n    True\n</code></pre>\n<p>Primary Key Exists:</p>\n<pre><code>1000 in db.tables['employees']\nquery:\n    SELECT * FROM employees WHERE id=1000\nresult:\n    True\n</code></pre>\n\n          </div>"}, "last_serial": 7082418, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "028c30ad019c84dc0a1554483a5df4a0", "sha256": "4cd422fb4669065f4d32fda862839929f9fcffe2691458d5fe2e0ee8fbca84a7"}, "downloads": -1, "filename": "pyql_db-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "028c30ad019c84dc0a1554483a5df4a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 6635, "upload_time": "2019-11-12T14:16:42", "upload_time_iso_8601": "2019-11-12T14:16:42.664514Z", "url": "https://files.pythonhosted.org/packages/51/cc/ba8ea368bee9b1ab26baae8cd5a302a4d49ea58d9b2be84cf7716876cd34/pyql_db-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "dad813a24594d7f69cb8df2e8ace8345", "sha256": "a9fcaeb7d07172f0eb1f3f62188d072e1f1beb6ee26c6d4d7ee2ee9ba9951000"}, "downloads": -1, "filename": "pyql_db-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dad813a24594d7f69cb8df2e8ace8345", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 6636, "upload_time": "2019-11-12T14:19:31", "upload_time_iso_8601": "2019-11-12T14:19:31.628279Z", "url": "https://files.pythonhosted.org/packages/6d/f9/d719a7823f9d8aad4bcba5ec9040f0ed14653741338601288a5b3ad2b46a/pyql_db-0.2-py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "94a20d72b3c56f703716d6a1679209f1", "sha256": "c9d3597df9bacf2300144dbf3e62fc63306469e94816bafe952abe98a609e806"}, "downloads": -1, "filename": "pyql_db-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "94a20d72b3c56f703716d6a1679209f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 10816, "upload_time": "2019-11-12T14:47:07", "upload_time_iso_8601": "2019-11-12T14:47:07.285532Z", "url": "https://files.pythonhosted.org/packages/ad/56/cec58452ec92cbb1a7e00d0125a9fc7c05a6eb3854aa38f7dc9936c650ec/pyql_db-0.4-py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "e8776adf3672044db3a68827afd4b310", "sha256": "ff6b72e64ba44e9d1404747915077f59daf2f813a30af14c34f9f747df9d40cd"}, "downloads": -1, "filename": "pyql_db-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e8776adf3672044db3a68827afd4b310", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 10817, "upload_time": "2019-11-12T15:00:59", "upload_time_iso_8601": "2019-11-12T15:00:59.571806Z", "url": "https://files.pythonhosted.org/packages/00/a4/4871a43d48978613f43756acc4071ef2824dae79fdc0184fef4f6001b68d/pyql_db-0.5-py3-none-any.whl", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "178ca45ad1d21e6de8a85a9d79b8e232", "sha256": "553b50c5071901e1e041d92863ed2531dfa8e1f10343319f61d11e3aad75cd8c"}, "downloads": -1, "filename": "pyql_db-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "178ca45ad1d21e6de8a85a9d79b8e232", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 6651, "upload_time": "2019-11-12T15:33:24", "upload_time_iso_8601": "2019-11-12T15:33:24.961384Z", "url": "https://files.pythonhosted.org/packages/c2/24/02e0ca073656855072111f9b4a3362f64cc474bbcee22e8153ecef77e35c/pyql_db-0.7-py3-none-any.whl", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "c5bb07622039fd70655c1be682110dab", "sha256": "29ee14c91842e11c3a463cfd108f8ca70bc9bcc67074a398d17c44d55bb189af"}, "downloads": -1, "filename": "pyql_db-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "c5bb07622039fd70655c1be682110dab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8154, "upload_time": "2019-12-01T22:31:24", "upload_time_iso_8601": "2019-12-01T22:31:24.021551Z", "url": "https://files.pythonhosted.org/packages/68/b7/ffc5a1877821fe2a11b7b507e483c04d10ff69c3a55256f469068a8ca43f/pyql_db-0.8-py3-none-any.whl", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "f75dc3f9769b982c7ca00be3d4c87d55", "sha256": "f1d63dccdc80225b49157aec3798e2a6b81eebf0198228d8dee047204fb2b106"}, "downloads": -1, "filename": "pyql_db-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "f75dc3f9769b982c7ca00be3d4c87d55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8349, "upload_time": "2019-12-22T12:14:20", "upload_time_iso_8601": "2019-12-22T12:14:20.207147Z", "url": "https://files.pythonhosted.org/packages/75/cb/61178f552d3c6c01e94f65490b3c3ac912428f81bd1d4da8859a00f88984/pyql_db-0.9-py3-none-any.whl", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "041517c9c51a91042f4349fb6a696e42", "sha256": "d4273b7358e424dcfaf05dcf3a65588e9f19d09c3973f08d52308a999a4e9375"}, "downloads": -1, "filename": "pyql_db-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "041517c9c51a91042f4349fb6a696e42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 7963, "upload_time": "2019-12-24T00:03:55", "upload_time_iso_8601": "2019-12-24T00:03:55.888256Z", "url": "https://files.pythonhosted.org/packages/94/a5/2f5141992bbeb77785db617c373ca261a883d4dbfe02116b396fc25c85fb/pyql_db-1.0-py3-none-any.whl", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "3def038f00004e921e82fcb251dd290d", "sha256": "4603c365ddf8a2cb3e5c6b1987aa8cdf27d9069506e3c451e03eeaf255a50efd"}, "downloads": -1, "filename": "pyql_db-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3def038f00004e921e82fcb251dd290d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8041, "upload_time": "2019-12-24T10:45:26", "upload_time_iso_8601": "2019-12-24T10:45:26.625097Z", "url": "https://files.pythonhosted.org/packages/15/df/6c8a445baac30e62f271fd67753da5c5aea3230a076336244c7b7683cfa6/pyql_db-1.1-py3-none-any.whl", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4b040d5577e5e0facd257ee32ae1a5d3", "sha256": "a16423edc74bbed2239049c7ecd0c45b65e321a05265b44b1608a7614e53c639"}, "downloads": -1, "filename": "pyql_db-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4b040d5577e5e0facd257ee32ae1a5d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8170, "upload_time": "2019-12-24T11:28:37", "upload_time_iso_8601": "2019-12-24T11:28:37.998549Z", "url": "https://files.pythonhosted.org/packages/c2/5a/f8e1b591e99031bbdb5e0c0d72d0b1f4a83b7d74d001e0216f22a7d28012/pyql_db-1.2-py3-none-any.whl", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "7f30e4590a81321daa93f98d77686c4c", "sha256": "ead8a36c508b4e0137335eaf5c85706d7923efffd6fa8a80ae96d66851190650"}, "downloads": -1, "filename": "pyql_db-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7f30e4590a81321daa93f98d77686c4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8174, "upload_time": "2019-12-24T11:41:26", "upload_time_iso_8601": "2019-12-24T11:41:26.792650Z", "url": "https://files.pythonhosted.org/packages/1b/3a/45a5bd1601c426d20a854f2d8e1b0a378c0b9458905f291487861b29435f/pyql_db-1.3-py3-none-any.whl", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "fa162ed2525119891cbaa18d19156f2a", "sha256": "083af756d50f5cff50650fa7f737fb59eb35f7be297615d739df560d34fdf753"}, "downloads": -1, "filename": "pyql_db-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fa162ed2525119891cbaa18d19156f2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8184, "upload_time": "2020-01-02T13:59:11", "upload_time_iso_8601": "2020-01-02T13:59:11.539218Z", "url": "https://files.pythonhosted.org/packages/53/34/84bd2549d88ffe45079d1c33c8a12b5cc43409cb26be6f8d7c08057fb1d4/pyql_db-1.4-py3-none-any.whl", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "d50ac1a92c57733ab20cd996cc7619e8", "sha256": "9b94653865b8f4b3e6934f0b6ee031f480d592a775112ad97b400660a6624d4e"}, "downloads": -1, "filename": "pyql_db-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d50ac1a92c57733ab20cd996cc7619e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 8540, "upload_time": "2020-03-19T22:41:17", "upload_time_iso_8601": "2020-03-19T22:41:17.029762Z", "url": "https://files.pythonhosted.org/packages/42/78/d6bd10a668c6c4cc62e6b1bb6f12fdbf6d2b355830c10fa04bfcb4315421/pyql_db-1.5-py3-none-any.whl", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "b21daf57ebe3902ea0b5266e39c68687", "sha256": "48218bb0baee80df8f345e613f1f64ff3a9dc26ff942ea480f2bcf8e07471c73"}, "downloads": -1, "filename": "pyql_db-1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b21daf57ebe3902ea0b5266e39c68687", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 9138, "upload_time": "2020-03-19T23:42:19", "upload_time_iso_8601": "2020-03-19T23:42:19.344967Z", "url": "https://files.pythonhosted.org/packages/cb/fd/7905b95038d3f8231a878ce275f7211d706bd05ed71d1f2726706887eaed/pyql_db-1.6-py3-none-any.whl", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "0a8adec8b715874f548a51ff33a8e324", "sha256": "4cf66819a3d3ee8f9e56c8859722ee2a59e4bdb66303b4d79485472d19d02d49"}, "downloads": -1, "filename": "pyql_db-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0a8adec8b715874f548a51ff33a8e324", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 9372, "upload_time": "2020-03-22T23:04:45", "upload_time_iso_8601": "2020-03-22T23:04:45.540661Z", "url": "https://files.pythonhosted.org/packages/a2/f7/556d4c721dd801f787844b9ae7c8c0451fc8236c0dfcfbee06434d0167e4/pyql_db-1.7-py3-none-any.whl", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "b18a4d6d922d546281b716a52868ac99", "sha256": "9733aae6757b18ad2acaf8a92ea352508d2ebd0db82d266f9499084affffba3e"}, "downloads": -1, "filename": "pyql_db-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b18a4d6d922d546281b716a52868ac99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 9463, "upload_time": "2020-03-22T23:51:40", "upload_time_iso_8601": "2020-03-22T23:51:40.666852Z", "url": "https://files.pythonhosted.org/packages/54/2d/1da6849879b3549888044b7160929d03978852c25e10d5a334a79f0cb036/pyql_db-1.8-py3-none-any.whl", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "85cac980a5b0bf1e7791476624365bd7", "sha256": "834c1d352f763dc93e971997536e25c34c5c1fb49e5a901f6f80141eabbe2918"}, "downloads": -1, "filename": "pyql_db-1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "85cac980a5b0bf1e7791476624365bd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 9779, "upload_time": "2020-03-23T13:19:52", "upload_time_iso_8601": "2020-03-23T13:19:52.140890Z", "url": "https://files.pythonhosted.org/packages/ba/92/495aca71a90de2044da661bc8e6aab7a5126b9a621d07b6b0802311323d8/pyql_db-1.9-py3-none-any.whl", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "068e80547b7217cba83ba275100993b0", "sha256": "a5be3548e6a82178aca3373eff9a04efe465118fa66a6039d771ae0a4733936a"}, "downloads": -1, "filename": "pyql_db-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "068e80547b7217cba83ba275100993b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 9821, "upload_time": "2020-03-23T21:41:47", "upload_time_iso_8601": "2020-03-23T21:41:47.949261Z", "url": "https://files.pythonhosted.org/packages/9a/c9/a2fc06171f3bfa182f0fb5b9543529773c7c0388a25ce06f71a130fd833c/pyql_db-2.0-py3-none-any.whl", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "a22ac8cd61ef4d4bf1fb352404074b60", "sha256": "99a2af258a05372bdaff144310d9a84f218d4827430b02a62256e19f24483670"}, "downloads": -1, "filename": "pyql_db-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a22ac8cd61ef4d4bf1fb352404074b60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 9869, "upload_time": "2020-03-27T12:55:43", "upload_time_iso_8601": "2020-03-27T12:55:43.099230Z", "url": "https://files.pythonhosted.org/packages/60/d4/a29ec701edddaad4fab4b934f4d0e014f52ec6e0f8565a8a8017d9d372fc/pyql_db-2.1-py3-none-any.whl", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "f27bc2d8b9ccfb1eaae88b0548a01b17", "sha256": "15e6010a190ea1ecf6247116164d7de6383e0d78651c032f5ddbbf80e46fb2d7"}, "downloads": -1, "filename": "pyql_db-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f27bc2d8b9ccfb1eaae88b0548a01b17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 14973, "upload_time": "2020-04-21T13:36:19", "upload_time_iso_8601": "2020-04-21T13:36:19.581587Z", "url": "https://files.pythonhosted.org/packages/01/d0/991c20ff9d18cb26ec6ff5bad1eb8f3055ce1b6ebaf88ae060c455846f2b/pyql_db-2.2-py3-none-any.whl", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "918ee7cecf828c6f7335e0260c47d7c6", "sha256": "49aa2b849f20a17492a9b7eba77b97f7b39cba8c1e82e57e2817fd74bda689c3"}, "downloads": -1, "filename": "pyql_db-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "918ee7cecf828c6f7335e0260c47d7c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 14972, "upload_time": "2020-04-21T20:55:55", "upload_time_iso_8601": "2020-04-21T20:55:55.842051Z", "url": "https://files.pythonhosted.org/packages/76/6e/8039d5975a5b598ab5049fea2941e75b895e4d0cb9080a0277d1811e4b65/pyql_db-2.3-py3-none-any.whl", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "04af0897f6faee11a9bb3fdd17aa6927", "sha256": "e3ce137d97a9daddc37a58208afff19751052ffdfa70ceda1837004014e51fb7"}, "downloads": -1, "filename": "pyql_db-2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "04af0897f6faee11a9bb3fdd17aa6927", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 15101, "upload_time": "2020-04-22T10:45:32", "upload_time_iso_8601": "2020-04-22T10:45:32.772745Z", "url": "https://files.pythonhosted.org/packages/c7/91/b3b21da7e1d1fd622ae4b007b4464bb6dd1e9e0ab1754468adc1671f0de2/pyql_db-2.4-py3-none-any.whl", "yanked": false}], "2.5": [{"comment_text": "", "digests": {"md5": "645502c1554883b83de15df62c6be34d", "sha256": "d895637b1081429fcee3984cb5355eaf566d3a307dbe5b84b58aba595efcd967"}, "downloads": -1, "filename": "pyql_db-2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "645502c1554883b83de15df62c6be34d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 15159, "upload_time": "2020-04-23T07:23:40", "upload_time_iso_8601": "2020-04-23T07:23:40.233347Z", "url": "https://files.pythonhosted.org/packages/73/34/c4d2a064418e16208db4d7add79ade4d0a494c365c59579f64892f942319/pyql_db-2.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "645502c1554883b83de15df62c6be34d", "sha256": "d895637b1081429fcee3984cb5355eaf566d3a307dbe5b84b58aba595efcd967"}, "downloads": -1, "filename": "pyql_db-2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "645502c1554883b83de15df62c6be34d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 15159, "upload_time": "2020-04-23T07:23:40", "upload_time_iso_8601": "2020-04-23T07:23:40.233347Z", "url": "https://files.pythonhosted.org/packages/73/34/c4d2a064418e16208db4d7add79ade4d0a494c365c59579f64892f942319/pyql_db-2.5-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:52 2020"}