{"info": {"author": "dipe", "author_email": "dp@nowhere.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Customer Service", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: POSIX :: Other", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Unix Shell", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "Proxmox tools / scripts\n=======================\n\nprox\n----\n\nprox is a command line interface to rapidly deploy LXC containers on proxmox from a remote host\nusing proxmox REST API.\n\nprox supports a number of sub commands and command line options:\n\n::\n\n    > prox --help\n    usage: prox  [-h] [--debug]\n                 {assist,gui,ssh,connect,list,ls,show,start,run,stop,shutdown,destroy,delete,modify,mod,snap,snapshot,rollback,rb,new,create}\n                 ...\n\n    a tool for deploying resources from proxmox (LXC containers or VMs)\n\n    positional arguments:\n      {assist,gui,ssh,connect,list,ls,show,start,run,stop,shutdown,destroy,delete,modify,mod,snap,snapshot,rollback,rb,new,create}\n                            sub-command help\n        assist (gui)        navigate application via GUI (experimental)\n        ssh (connect)       connect to first host via ssh\n        list (ls, show)     list hosts(s) with status, size and contact (optional)\n        start (run)         start the host(s)\n        stop (shutdown)     stop the host(s)\n        destroy (delete)    delete the hosts(s) from disk\n        modify (mod)        modify the config of one or more hosts\n        snap (snapshot)     take a snapshot of the host\n        rollback (rb)       roll back a snapshot\n        new (create)        create one or more new hosts\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --debug, -g           verbose output for all commands\n\nand one of the most common sub command will the 'prox new' to create a new machine:\n\n::\n\n    > prox new --help\n    usage: prox new [-h] [--runlist RUNLIST] [--mem MEM] [--disk DISK]\n                    [--cores CORES] [--store-net] [--bootstrap] [--no-bootstrap]\n                    [hosts [hosts ...]]\n\n    positional arguments:\n      hosts                 hostname(s) of VM/containers (separated by space),\n                            example: prox new host1 host2 host3\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --runlist RUNLIST, -r RUNLIST\n                            a local shell script file or a command to execute\n                            after install\n      --mem MEM, -m MEM     Memory allocation for the machine, e.g. 4G or 512\n                            Default: 512\n      --disk DISK, -d DISK  disk storage allocated to the machine. Default: 4\n      --cores CORES, -c CORES\n                            Number of cores to be allocated for the machine.\n                            Default: 2\n      --store-net, -s       use networked storage with backup (nfs, ceph) instead\n                            of local storage\n      --bootstrap, -b       auto-configure the system using Chef.\n      --no-bootstrap, -n    do not auto-configure the system using Chef.\n\nTo install prox you can simply use pip3. But before you may need a few OS packages. On Ubuntu /\nDebian you would run:\n\n::\n\n    sudo apt-get install -y python3-pip python3-dev libffi-dev libssl-dev\n\nand on CentOS/RedHat you would run:\n\n::\n\n    yum -y install epel-release python34-devel libffi-devel openssl-devel\n\nafter that you can run pip3:\n\n::\n\n    pip3 install --upgrade pip\n    pip3 install --upgrade proxmox-tools\n\nafter that you just need to configure prox, you can do this by uncommenting the lines that start\nwith 'export ' directly in file /usr/local/bin/prox or you paste the export statements into file\n~/.proxrc in the home directory of the user who runs prox.\n\n::\n\n    > cat ~/.proxrc\n    export PPROXHOST='proxmox.domain.org'\n    export PREALM='pam' \n    export PLXCTEMPLATE='proxnfs:vztmpl/ubuntu-16.04-standard_16.04-1_amd64.tar.gz'\n    export PSTORLOC='proxazfs'\n    export PSTORNET='proxnfs'\n\nnow let's say you want to deploy a new docker host named sausage:\n\n::\n\n    > prox new --mem 1024 --disk 8 sausage\n    Password for 'user':\n\n    creating host sausage with ID 121 in pool SciComp\n        ...UPID:proxa3:00001F6C:00F2DBDE:57EE629A:vzcreate:121:user@DOMAIN.ORG:\n    Starting host 121 ..\n        ...UPID:proxa3:00001FB3:00F2E185:57EE62A8:vzstart:121:user@DOMAIN.ORG:\n    Machine 121 : running, cpu: 0% \n\n    waiting for machine sausage to come up .. hit ctrl+c to stop ping\n\nnow you can install docker manually. As a next step let's assume you would like to install docker on\nmultiple machines. We can create a runlist in a simple text file and each command in that list will\nbe executed on each machine. In this case we made a runlist that installs docker:\n\n::\n\n    > cat ~/runlist-docker\n    sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n    sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" > /etc/apt/sources.list.d/docker.list\n    sudo apt-get update\n    sudo apt-get install -y docker-engine\n\nnow we can use the prox command to install multiple machines:\n\n::\n\n    > prox new --runlist ~/runlist-docker --disk 8 sausage1 sausage2 sausage3\n    Password for 'user':\n\n    creating host sausage1 with ID 116 in pool SciComp\n        ...UPID:proxa3:000039A6:0111B96E:57EEB19E:vzcreate:116:user@DOMAIN.ORG:\n    creating host sausage2 with ID 118 in pool SciComp\n        ...UPID:proxa3:000039B6:0111B980:57EEB19E:vzcreate:118:user@DOMAIN.ORG:\n    creating host sausage3 with ID 121 in pool SciComp\n        ...UPID:proxa3:000039C4:0111B991:57EEB19E:vzcreate:121:user@DOMAIN.ORG:\n    Starting host 116 ..\n    starting host 116, re-try 0\n        ...UPID:proxa3:00003A04:0111BCB7:57EEB1A6:vzstart:116:user@DOMAIN.ORG:\n    Machine 116 : running, cpu: 0% \n    Starting host 118 ..\n        ...UPID:proxa3:00003AF7:0111BD3C:57EEB1A8:vzstart:118:user@DOMAIN.ORG:\n    Machine 118 : running, cpu: 0% \n    Starting host 121 ..\n        ...UPID:proxa3:00003BE2:0111BDC2:57EEB1A9:vzstart:121:user@DOMAIN.ORG:\n    Machine 121 : running, cpu: -1% \n\nand after you are done with your work you can stop and then destroy these machines:\n\n::\n\n    > prox stop sausage1 sausage2 sausage3\n    Password for 'user':\n\n    UPID:proxa2:000060FE:01121EA2:57EEB2A1:vzstop:116:user@DOMAIN.ORG:\n    UPID:proxa3:00006110:01121EB3:57EEB2A1:vzstop:118:user@DOMAIN.ORG:\n    UPID:proxa4:00006127:01121EC6:57EEB2A1:vzstop:121:user@DOMAIN.ORG:\n\n    > prox destroy sausage1 sausage2 sausage3\n    Password for 'user':\n\n    UPID:proxa2:000061C7:01122C18:57EEB2C4:vzdestroy:116:user@DOMAIN.ORG:\n    UPID:proxa3:000061CB:01122C2A:57EEB2C4:vzdestroy:118:user@DOMAIN.ORG:\n    UPID:proxa4:000061CF:01122C3B:57EEB2C4:vzdestroy:121:user@DOMAIN.ORG:\n\nproxhostname.py\n---------------\n\nscript runs inside newly deployed ProxMox VM or Container, queries promox API for correct hostname\naccording to MAC address found on the local system and set the new hostname\n\nIf you have an IPAM device (such as Infoblox) you just need to change the hostname on your Linux to\nhave dynamic DNS get you a new IP address. This allows you to deploy many hosts within seconds\n\ntested with Ubuntu 14.04 and Ubuntu 16.04\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/FredHutch/proxmox-tools/tarball/1.4", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FredHutch/proxmox-tools", "keywords": "proxmox", "license": "", "maintainer": "", "maintainer_email": "", "name": "proxmox-tools", "package_url": "https://pypi.org/project/proxmox-tools/", "platform": "", "project_url": "https://pypi.org/project/proxmox-tools/", "project_urls": {"Download": "https://github.com/FredHutch/proxmox-tools/tarball/1.4", "Homepage": "https://github.com/FredHutch/proxmox-tools"}, "release_url": "https://pypi.org/project/proxmox-tools/1.4/", "requires_dist": null, "requires_python": "", "summary": "prox is a command line interface to rapidly deploy LXC containers on proxmox from a remote host using proxmox REST API", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"prox\">\n<h2>prox</h2>\n<p>prox is a command line interface to rapidly deploy LXC containers on proxmox from a remote host\nusing proxmox REST API.</p>\n<p>prox supports a number of sub commands and command line options:</p>\n<pre>&gt; prox --help\nusage: prox  [-h] [--debug]\n             {assist,gui,ssh,connect,list,ls,show,start,run,stop,shutdown,destroy,delete,modify,mod,snap,snapshot,rollback,rb,new,create}\n             ...\n\na tool for deploying resources from proxmox (LXC containers or VMs)\n\npositional arguments:\n  {assist,gui,ssh,connect,list,ls,show,start,run,stop,shutdown,destroy,delete,modify,mod,snap,snapshot,rollback,rb,new,create}\n                        sub-command help\n    assist (gui)        navigate application via GUI (experimental)\n    ssh (connect)       connect to first host via ssh\n    list (ls, show)     list hosts(s) with status, size and contact (optional)\n    start (run)         start the host(s)\n    stop (shutdown)     stop the host(s)\n    destroy (delete)    delete the hosts(s) from disk\n    modify (mod)        modify the config of one or more hosts\n    snap (snapshot)     take a snapshot of the host\n    rollback (rb)       roll back a snapshot\n    new (create)        create one or more new hosts\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --debug, -g           verbose output for all commands\n</pre>\n<p>and one of the most common sub command will the \u2018prox new\u2019 to create a new machine:</p>\n<pre>&gt; prox new --help\nusage: prox new [-h] [--runlist RUNLIST] [--mem MEM] [--disk DISK]\n                [--cores CORES] [--store-net] [--bootstrap] [--no-bootstrap]\n                [hosts [hosts ...]]\n\npositional arguments:\n  hosts                 hostname(s) of VM/containers (separated by space),\n                        example: prox new host1 host2 host3\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --runlist RUNLIST, -r RUNLIST\n                        a local shell script file or a command to execute\n                        after install\n  --mem MEM, -m MEM     Memory allocation for the machine, e.g. 4G or 512\n                        Default: 512\n  --disk DISK, -d DISK  disk storage allocated to the machine. Default: 4\n  --cores CORES, -c CORES\n                        Number of cores to be allocated for the machine.\n                        Default: 2\n  --store-net, -s       use networked storage with backup (nfs, ceph) instead\n                        of local storage\n  --bootstrap, -b       auto-configure the system using Chef.\n  --no-bootstrap, -n    do not auto-configure the system using Chef.\n</pre>\n<p>To install prox you can simply use pip3. But before you may need a few OS packages. On Ubuntu /\nDebian you would run:</p>\n<pre>sudo apt-get install -y python3-pip python3-dev libffi-dev libssl-dev\n</pre>\n<p>and on CentOS/RedHat you would run:</p>\n<pre>yum -y install epel-release python34-devel libffi-devel openssl-devel\n</pre>\n<p>after that you can run pip3:</p>\n<pre>pip3 install --upgrade pip\npip3 install --upgrade proxmox-tools\n</pre>\n<p>after that you just need to configure prox, you can do this by uncommenting the lines that start\nwith \u2018export \u2018 directly in file /usr/local/bin/prox or you paste the export statements into file\n~/.proxrc in the home directory of the user who runs prox.</p>\n<pre>&gt; cat ~/.proxrc\nexport PPROXHOST='proxmox.domain.org'\nexport PREALM='pam'\nexport PLXCTEMPLATE='proxnfs:vztmpl/ubuntu-16.04-standard_16.04-1_amd64.tar.gz'\nexport PSTORLOC='proxazfs'\nexport PSTORNET='proxnfs'\n</pre>\n<p>now let\u2019s say you want to deploy a new docker host named sausage:</p>\n<pre>&gt; prox new --mem 1024 --disk 8 sausage\nPassword for 'user':\n\ncreating host sausage with ID 121 in pool SciComp\n    ...UPID:proxa3:00001F6C:00F2DBDE:57EE629A:vzcreate:121:user@DOMAIN.ORG:\nStarting host 121 ..\n    ...UPID:proxa3:00001FB3:00F2E185:57EE62A8:vzstart:121:user@DOMAIN.ORG:\nMachine 121 : running, cpu: 0%\n\nwaiting for machine sausage to come up .. hit ctrl+c to stop ping\n</pre>\n<p>now you can install docker manually. As a next step let\u2019s assume you would like to install docker on\nmultiple machines. We can create a runlist in a simple text file and each command in that list will\nbe executed on each machine. In this case we made a runlist that installs docker:</p>\n<pre>&gt; cat ~/runlist-docker\nsudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\nsudo echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" &gt; /etc/apt/sources.list.d/docker.list\nsudo apt-get update\nsudo apt-get install -y docker-engine\n</pre>\n<p>now we can use the prox command to install multiple machines:</p>\n<pre>&gt; prox new --runlist ~/runlist-docker --disk 8 sausage1 sausage2 sausage3\nPassword for 'user':\n\ncreating host sausage1 with ID 116 in pool SciComp\n    ...UPID:proxa3:000039A6:0111B96E:57EEB19E:vzcreate:116:user@DOMAIN.ORG:\ncreating host sausage2 with ID 118 in pool SciComp\n    ...UPID:proxa3:000039B6:0111B980:57EEB19E:vzcreate:118:user@DOMAIN.ORG:\ncreating host sausage3 with ID 121 in pool SciComp\n    ...UPID:proxa3:000039C4:0111B991:57EEB19E:vzcreate:121:user@DOMAIN.ORG:\nStarting host 116 ..\nstarting host 116, re-try 0\n    ...UPID:proxa3:00003A04:0111BCB7:57EEB1A6:vzstart:116:user@DOMAIN.ORG:\nMachine 116 : running, cpu: 0%\nStarting host 118 ..\n    ...UPID:proxa3:00003AF7:0111BD3C:57EEB1A8:vzstart:118:user@DOMAIN.ORG:\nMachine 118 : running, cpu: 0%\nStarting host 121 ..\n    ...UPID:proxa3:00003BE2:0111BDC2:57EEB1A9:vzstart:121:user@DOMAIN.ORG:\nMachine 121 : running, cpu: -1%\n</pre>\n<p>and after you are done with your work you can stop and then destroy these machines:</p>\n<pre>&gt; prox stop sausage1 sausage2 sausage3\nPassword for 'user':\n\nUPID:proxa2:000060FE:01121EA2:57EEB2A1:vzstop:116:user@DOMAIN.ORG:\nUPID:proxa3:00006110:01121EB3:57EEB2A1:vzstop:118:user@DOMAIN.ORG:\nUPID:proxa4:00006127:01121EC6:57EEB2A1:vzstop:121:user@DOMAIN.ORG:\n\n&gt; prox destroy sausage1 sausage2 sausage3\nPassword for 'user':\n\nUPID:proxa2:000061C7:01122C18:57EEB2C4:vzdestroy:116:user@DOMAIN.ORG:\nUPID:proxa3:000061CB:01122C2A:57EEB2C4:vzdestroy:118:user@DOMAIN.ORG:\nUPID:proxa4:000061CF:01122C3B:57EEB2C4:vzdestroy:121:user@DOMAIN.ORG:\n</pre>\n</div>\n<div id=\"proxhostname-py\">\n<h2>proxhostname.py</h2>\n<p>script runs inside newly deployed ProxMox VM or Container, queries promox API for correct hostname\naccording to MAC address found on the local system and set the new hostname</p>\n<p>If you have an IPAM device (such as Infoblox) you just need to change the hostname on your Linux to\nhave dynamic DNS get you a new IP address. This allows you to deploy many hosts within seconds</p>\n<p>tested with Ubuntu 14.04 and Ubuntu 16.04</p>\n</div>\n\n          </div>"}, "last_serial": 4594444, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3479809d59d6b699e0800873e9e7840a", "sha256": "71c3686f820ab5cbf0ce1152da012d764a1b3b6ebba44706e12f9b23fe264bab"}, "downloads": -1, "filename": "proxmox-tools-1.0.tar.gz", "has_sig": false, "md5_digest": "3479809d59d6b699e0800873e9e7840a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23657, "upload_time": "2016-11-13T20:15:42", "upload_time_iso_8601": "2016-11-13T20:15:42.936007Z", "url": "https://files.pythonhosted.org/packages/1e/d6/3f92b67b3fdae323942c8d00203019ff78bafa13865a168f512b3eacd6f2/proxmox-tools-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5af79c27167f63d69cc436a0fc561d18", "sha256": "3154072d1a4b38999de713fbef063045b17439fb4e42d86d4561ad11520c4cbc"}, "downloads": -1, "filename": "proxmox-tools-1.1.tar.gz", "has_sig": false, "md5_digest": "5af79c27167f63d69cc436a0fc561d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23652, "upload_time": "2016-11-13T20:20:42", "upload_time_iso_8601": "2016-11-13T20:20:42.927515Z", "url": "https://files.pythonhosted.org/packages/df/65/3d1122d8df30cdfe32290b21a15f5d4181ae9afa8191e0b78d7c64234bee/proxmox-tools-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "87ea4c627385e1bf19adc8d25d89e309", "sha256": "977002d9abb43dfbcc02e2797de546aa3d3dadaeb4255184a87251a65182a8e3"}, "downloads": -1, "filename": "proxmox-tools-1.2.tar.gz", "has_sig": false, "md5_digest": "87ea4c627385e1bf19adc8d25d89e309", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23656, "upload_time": "2016-11-13T20:23:48", "upload_time_iso_8601": "2016-11-13T20:23:48.035121Z", "url": "https://files.pythonhosted.org/packages/23/4e/fa2dc6dfc698c71504378bb5bf755794a5dfe2a9009de75887568cd6dc68/proxmox-tools-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "ff0efd6b4704bce0ba70fb8272e18477", "sha256": "30b3a97f90cacec722b2bc292e41d1b54c91737897c695ae9fe67bcb6a2bf8b6"}, "downloads": -1, "filename": "proxmox-tools-1.3.tar.gz", "has_sig": false, "md5_digest": "ff0efd6b4704bce0ba70fb8272e18477", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23934, "upload_time": "2017-09-11T21:35:45", "upload_time_iso_8601": "2017-09-11T21:35:45.558389Z", "url": "https://files.pythonhosted.org/packages/c6/94/5ca0165e822256b6c764f91731172938a6be973e86e6cb40744844101bfa/proxmox-tools-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "4443e0c8c966b835580b41d761fdc93e", "sha256": "310ebfa06964086185f4487d6a902580633c0e3ba892bc3ac6d68771172269cb"}, "downloads": -1, "filename": "proxmox-tools-1.4.tar.gz", "has_sig": false, "md5_digest": "4443e0c8c966b835580b41d761fdc93e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25211, "upload_time": "2018-12-13T13:28:22", "upload_time_iso_8601": "2018-12-13T13:28:22.601811Z", "url": "https://files.pythonhosted.org/packages/39/dd/b2e8ad47bb51244b6ff5f7747fc70cfe2bf5e33502579c2efeb1cfe936aa/proxmox-tools-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4443e0c8c966b835580b41d761fdc93e", "sha256": "310ebfa06964086185f4487d6a902580633c0e3ba892bc3ac6d68771172269cb"}, "downloads": -1, "filename": "proxmox-tools-1.4.tar.gz", "has_sig": false, "md5_digest": "4443e0c8c966b835580b41d761fdc93e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25211, "upload_time": "2018-12-13T13:28:22", "upload_time_iso_8601": "2018-12-13T13:28:22.601811Z", "url": "https://files.pythonhosted.org/packages/39/dd/b2e8ad47bb51244b6ff5f7747fc70cfe2bf5e33502579c2efeb1cfe936aa/proxmox-tools-1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:22 2020"}