{"info": {"author": "Jan Schulz", "author_email": "jasc@gmx.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Utilities"], "description": "knitpy: Elegant, flexible and fast dynamic report generation with python\r\n========================================================================\r\n\r\nThis is a port of knitr (http://yihui.name/knitr/) and rmarkdown\r\n(http://rmarkdown.rstudio.com/) to python.\r\n\r\nTo start with, you can run the `example overview\r\ndocument <examples/knitpy_overview.pymd>`__. To convert to all defined\r\noutput formats, run\r\n``knitpy --to=\"all\"  -- examples\\knitpy_overview.pymd``. This will\r\nproduce a ``html``, ``docx`` and ``pdf`` output (if you have\r\n``pdflatex`` in path). You can view a `markdown\r\nrendered <examples/knitpy_overview.html_document.md>`__ and a `html\r\nrendered <http://htmlpreview.github.io/?https://github.com/JanSchulz/knitpy/blob/master/examples/knitpy_overview.html>`__\r\nversion of this file. It's not yet as pretty as the knitr version...\r\n\r\nFor a description of the code format see http://rmarkdown.rstudio.com/\r\nand replace ``{r <r style options>}`` by\r\n``{python <python style options>}`` and of course use python code\r\nblocks...\r\n\r\nIt uses the IPython kernel infrastructure to execute code, so all\r\nkernels for IPython are (aem... can potentially be) supported.\r\n\r\nWhat works:\r\n-----------\r\n\r\n-  code blocks and inline code\r\n-  plots are shown inline\r\n-  ``knitpy filename.pymd`` will convert filename ``filename.pymd`` to\r\n   the defaul output format ``html``.\r\n-  output formats ``html``, ``pdf`` and ``docx``. Change with\r\n   ``--to=<format>``\r\n-  ``--to=all`` will convert to all export formats specified in the yaml\r\n   header\r\n-  code chunk arguments ``eval``, ``results`` (apart form \"hold\"),\r\n   ``include`` and ``echo``\r\n-  errors in code chunks are shown in the document\r\n-  uses the IPython display framework, so rich output for objects\r\n   implementing ``_repr_html_()`` or ``_repr_markdown_()``. Mimetypes\r\n   not understood by the final output format are automatically converted\r\n   via pandoc.\r\n-  config files: generate an empty one with\r\n   ``knitpy --init --profile-dir=.``\r\n-  using it from python (-> your app/ ipython notebook):\r\n   ``import knitpy; knitpy.render(filename.pymd, output=\"html\")`` will\r\n   convert ``filename.pymd`` to ``filename.html``. ``output=all`` will\r\n   convert to all document types (as specified in the YAML header of the\r\n   document). The call will return a list of converted documents.\r\n-  debugging with \\`\\ ``--debug``, ``--kernel-debug=True``,\r\n   ``--output-debug=True``\r\n\r\nWhat does not work (=everything else :-) ):\r\n-------------------------------------------\r\n\r\n-  most YAML headers are currently ignored\r\n-  some advertised command-line options are ignored\r\n-  most code chunk arguments (apart from the ones above) are ignored\r\n-  probably lots of other stuff...\r\n\r\nTodo\r\n----\r\n\r\n-  fix the above...\r\n-  refactor the parsing, so that it is line based\r\n-  errors make more sense, because it knows the line (\"block starting at\r\n   line....\")\r\n-  add some traits for the default pdflatex/pandoc executeable, so they\r\n   don't have to be in path\r\n-  the final output has to configure the \"includeable\" markup docs\r\n-  html in html\r\n-  latex in html?\r\n-  ...\r\n-  more arguments for code blocks\r\n-  more output formats? -> make output format configurable\r\n-  more unit-/outputtests...\r\n-  codeblocks + inline\r\n-  yaml\r\n-  errors\r\n-  pandoc caller (via mocks?)\r\n-  Documentation\r\n-  what works? what is not supported?\r\n-  differences to rmarkdown / knitr?\r\n-  implement more kernel engines (R...) and make it possible to\r\n   supply/change ones (for installed kernels for python2/3 or coda\r\n   environments)\r\n-  implement a nice default html template\r\n-  Try https://github.com/timtylin/scholdoc-templates\r\n-  implement \"code tidying\"\r\n-  maybe use https://github.com/google/yapf?\r\n-  use metadata in keep\\_md output (like rmarkdown does...\r\n-  should output ``#<title>\\n<author>\\n<date>`` before the rest\r\n-  remove the first yaml block, but keep everything else...\r\n-  chunk caching", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/janschulz/knitpy/issues", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "knitpy", "package_url": "https://pypi.org/project/knitpy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/knitpy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/janschulz/knitpy/issues"}, "release_url": "https://pypi.org/project/knitpy/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Elegant, flexible and fast dynamic report generation with python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a port of knitr (<a href=\"http://yihui.name/knitr/\" rel=\"nofollow\">http://yihui.name/knitr/</a>) and rmarkdown\n(<a href=\"http://rmarkdown.rstudio.com/\" rel=\"nofollow\">http://rmarkdown.rstudio.com/</a>) to python.</p>\n<p>To start with, you can run the <a href=\"examples/knitpy_overview.pymd\" rel=\"nofollow\">example overview\ndocument</a>. To convert to all defined\noutput formats, run\n<tt>knitpy <span class=\"pre\">--to=\"all\"</span>\u00a0 <span class=\"pre\">--</span> examples\\knitpy_overview.pymd</tt>. This will\nproduce a <tt>html</tt>, <tt>docx</tt> and <tt>pdf</tt> output (if you have\n<tt>pdflatex</tt> in path). You can view a <a href=\"examples/knitpy_overview.html_document.md\" rel=\"nofollow\">markdown\nrendered</a> and a <a href=\"http://htmlpreview.github.io/?https://github.com/JanSchulz/knitpy/blob/master/examples/knitpy_overview.html\" rel=\"nofollow\">html\nrendered</a>\nversion of this file. It\u2019s not yet as pretty as the knitr version\u2026</p>\n<p>For a description of the code format see <a href=\"http://rmarkdown.rstudio.com/\" rel=\"nofollow\">http://rmarkdown.rstudio.com/</a>\nand replace <tt>{r &lt;r style options&gt;}</tt> by\n<tt>{python &lt;python style options&gt;}</tt> and of course use python code\nblocks\u2026</p>\n<p>It uses the IPython kernel infrastructure to execute code, so all\nkernels for IPython are (aem\u2026 can potentially be) supported.</p>\n<div id=\"what-works\">\n<h2>What works:</h2>\n<ul>\n<li>code blocks and inline code</li>\n<li>plots are shown inline</li>\n<li><tt>knitpy filename.pymd</tt> will convert filename <tt>filename.pymd</tt> to\nthe defaul output format <tt>html</tt>.</li>\n<li>output formats <tt>html</tt>, <tt>pdf</tt> and <tt>docx</tt>. Change with\n<tt><span class=\"pre\">--to=&lt;format&gt;</span></tt></li>\n<li><tt><span class=\"pre\">--to=all</span></tt> will convert to all export formats specified in the yaml\nheader</li>\n<li>code chunk arguments <tt>eval</tt>, <tt>results</tt> (apart form \u201chold\u201d),\n<tt>include</tt> and <tt>echo</tt></li>\n<li>errors in code chunks are shown in the document</li>\n<li>uses the IPython display framework, so rich output for objects\nimplementing <tt>_repr_html_()</tt> or <tt>_repr_markdown_()</tt>. Mimetypes\nnot understood by the final output format are automatically converted\nvia pandoc.</li>\n<li>config files: generate an empty one with\n<tt>knitpy <span class=\"pre\">--init</span> <span class=\"pre\">--profile-dir=.</span></tt></li>\n<li>using it from python (-&gt; your app/ ipython notebook):\n<tt>import knitpy; knitpy.render(filename.pymd, <span class=\"pre\">output=\"html\")</span></tt> will\nconvert <tt>filename.pymd</tt> to <tt>filename.html</tt>. <tt>output=all</tt> will\nconvert to all document types (as specified in the YAML header of the\ndocument). The call will return a list of converted documents.</li>\n<li>debugging with `<tt><span class=\"pre\">--debug</span></tt>, <tt><span class=\"pre\">--kernel-debug=True</span></tt>,\n<tt><span class=\"pre\">--output-debug=True</span></tt></li>\n</ul>\n</div>\n<div id=\"what-does-not-work-everything-else\">\n<h2>What does not work (=everything else :-) ):</h2>\n<ul>\n<li>most YAML headers are currently ignored</li>\n<li>some advertised command-line options are ignored</li>\n<li>most code chunk arguments (apart from the ones above) are ignored</li>\n<li>probably lots of other stuff\u2026</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>fix the above\u2026</li>\n<li>refactor the parsing, so that it is line based</li>\n<li>errors make more sense, because it knows the line (\u201cblock starting at\nline\u2026.\u201d)</li>\n<li>add some traits for the default pdflatex/pandoc executeable, so they\ndon\u2019t have to be in path</li>\n<li>the final output has to configure the \u201cincludeable\u201d markup docs</li>\n<li>html in html</li>\n<li>latex in html?</li>\n<li>\u2026</li>\n<li>more arguments for code blocks</li>\n<li>more output formats? -&gt; make output format configurable</li>\n<li>more unit-/outputtests\u2026</li>\n<li>codeblocks + inline</li>\n<li>yaml</li>\n<li>errors</li>\n<li>pandoc caller (via mocks?)</li>\n<li>Documentation</li>\n<li>what works? what is not supported?</li>\n<li>differences to rmarkdown / knitr?</li>\n<li>implement more kernel engines (R\u2026) and make it possible to\nsupply/change ones (for installed kernels for python2/3 or coda\nenvironments)</li>\n<li>implement a nice default html template</li>\n<li>Try <a href=\"https://github.com/timtylin/scholdoc-templates\" rel=\"nofollow\">https://github.com/timtylin/scholdoc-templates</a></li>\n<li>implement \u201ccode tidying\u201d</li>\n<li>maybe use <a href=\"https://github.com/google/yapf\" rel=\"nofollow\">https://github.com/google/yapf</a>?</li>\n<li>use metadata in keep_md output (like rmarkdown does\u2026</li>\n<li>should output <tt><span class=\"pre\">#&lt;title&gt;\\n&lt;author&gt;\\n&lt;date&gt;</span></tt> before the rest</li>\n<li>remove the first yaml block, but keep everything else\u2026</li>\n<li>chunk caching</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1486137, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "139161de008277045f4ede28e499e9d4", "sha256": "c4e7f99d1d827f87fe691c3f28dc674dedc52b2bd362b0d45b4a0b54cae4cb94"}, "downloads": -1, "filename": "knitpy-0.1.1.zip", "has_sig": false, "md5_digest": "139161de008277045f4ede28e499e9d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25559, "upload_time": "2015-04-01T07:46:36", "upload_time_iso_8601": "2015-04-01T07:46:36.940697Z", "url": "https://files.pythonhosted.org/packages/03/d5/9e5139a91ca35603b6a3d1767dece2f9b51535a764eb77b3dbef8c22c4e0/knitpy-0.1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "139161de008277045f4ede28e499e9d4", "sha256": "c4e7f99d1d827f87fe691c3f28dc674dedc52b2bd362b0d45b4a0b54cae4cb94"}, "downloads": -1, "filename": "knitpy-0.1.1.zip", "has_sig": false, "md5_digest": "139161de008277045f4ede28e499e9d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25559, "upload_time": "2015-04-01T07:46:36", "upload_time_iso_8601": "2015-04-01T07:46:36.940697Z", "url": "https://files.pythonhosted.org/packages/03/d5/9e5139a91ca35603b6a3d1767dece2f9b51535a764eb77b3dbef8c22c4e0/knitpy-0.1.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:49:14 2020"}