{"info": {"author": "Nathan R. Yergler", "author_email": "nathan@creativecommons.org", "bugtrack_url": null, "classifiers": [], "description": "========\nrdfadict\n========\n\n:Date: $LastChangedDate$\n:Version: $LastChangedRevision$\n:Author: Nathan R. Yergler <nathan@creativecommons.org>\n:Organization: `Creative Commons <http://creativecommons.org>`_\n:Copyright: \n   2006-2008, Nathan R. Yergler, Creative Commons; \n   licensed to the public under the `MIT license \n   <http://opensource.org/licenses/mit-license.php>`_.\n\n.. contents::\n\nInstallation\n************\n\nrdfadict and its dependencies may be installed using `easy_install \n<http://peak.telecommunity.com/DevCenter/EasyInstall>`_ (recommended) ::\n\n  $ easy_install rdfadict\n\nor by using the standard distutils setup.py::\n\n  $ python setup.py install\n\nIf you are installing from source, you will also need the following\npackages:\n\n* `rdflib 2.4.x <http://rdflib.net/>`_\n* `pyRdfa <http://www.w3.org/2007/08/pyRdfa/>`_\n* `html5lib <http://code.google.com/p/html5lib/>`_ (required if you\n  want to support non-XHTML documents)\n\n``easy_install`` will satisfy depedencies for you if necessary.\n\n\nUsage\n*****\n\n.. admonition:: Document Purpose\n\n     This document is intended to provide a set of literate tests\n     for the ``rdfadict`` package; it is **not** intended to provide thorough\n     coverage of RDFa syntax or semantics.  See the `RDF Primer \n     <http://www.w3.org/2006/07/SWD/RDFa/primer/>`_ or the `RDFa Syntax \n     <http://www.w3.org/2006/07/SWD/RDFa/syntax/>`_ for details on RDFa.\n\n**rdfadict** parses RDFa metadata encoded in HTML or XHTML documents.  It can\nparse a block of text (as a string), or a URL.  For example, given the \nfollowing block of sample text:\n\n  >>> rdfa_sample = \"\"\"\n  ... <div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n  ...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  ... <h1 property=\"dc:title\">Vacation in the South of France</h1>\n  ... <h2>created \n  ... by <span property=\"dc:creator\">Mark Birbeck</span>\n  ... on <span property=\"dc:date\" type=\"xsd:date\"\n  ...          content=\"2006-01-02\">\n  ...   January 2nd, 2006\n  ...    </span>\n  ... </h2>\n  ... </div>\"\"\"\n\nTriples can be extracted using **rdfadict**:\n\n  >>> import rdfadict\n  >>> base_uri = \"http://example.com/rdfadict/\"\n  >>> parser = rdfadict.RdfaParser()\n  >>> triples = parser.parse_string(rdfa_sample, base_uri)\n\nWe define the variable ``base_uri`` to let the parser know what URI assertions\nwithout subjects apply to.  \n\nBased on our example text, we expect to get three triples back -- title, \ncreator and date.  Triple are indexed as a dictionary, first by subject,\nthen by predicate, finally retuning a ``list`` of objects.  For example, \na list of all subjects is retrieved using:\n\n  >>> triples.keys()\n  ['http://example.com/rdfadict/']\n\nIf assertions were made about resources other than the default, those URIs\nwould appear in this list.  We can verify how many predicates were found\nfor this subject by accessing the next level of the dictionary:\n\n  >>> len(triples['http://example.com/rdfadict/'].keys())\n  3\n\nFinally, we can retrieve the value for the title by fully dereferencing\nthe dictionary:\n\n  >>> triples['http://example.com/rdfadict/'][\n  ...     'http://purl.org/dc/elements/1.1/title']\n  ['Vacation in the South of France']\n\nNote that the objects are stored as a list by the default triple sink.\n\nMultiple Assertions\n===================\n\nBecause the ``property`` attribute always denotes triple with a literal string\nas its object and ``rel`` and ``rev`` denote triples with URIs as their \nobjects, it is possible to make multiple assertions with a single HTML tag.\n\nFor example:\n\n  >>> multi_rdfa = \"\"\"\n  ... <div xmlns:foaf=\"http://xmlns.com/foaf/0.1/\" \n  ...      xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n  ...   This photo was taken by <a about=\"photo1.jpg\" property=\"dc:title\"\n  ...   content=\"Portrait of Mark\" rel=\"dc:creator\"\n  ...   rev=\"foaf:img\" \n  ...   href=\"http://www.blogger.com/profile/1109404\">Mark Birbeck</a>.\n  ... </div>\n  ... \"\"\"\n\nIn this statement we are making three assertions: two involving URI objects\n(specified by ``rel`` and ``rev``), and one involving the ``property``.\n\n  >>> import rdfadict\n  >>> parser = rdfadict.RdfaParser()\n  >>> multi_base_uri = \"http://example.com/multiassert/\"\n  >>> triples = parser.parse_string(multi_rdfa, multi_base_uri)\n\nWe expect the triples generated to have two subjects: the photo URI (for the \n``rel`` and ``property`` assertions) and the ``href`` URI (for the ``rev``\nassertion).\n\n  >>> len(triples.keys()) == 2\n  True\n  >>> 'http://example.com/multiassert/photo1.jpg' in triples.keys()\n  True\n  >>> 'http://www.blogger.com/profile/1109404' in triples.keys()\n  True\n\nFinally, we verify that the assertions made about each subject are correct:\n\n  >>> len(triples['http://example.com/multiassert/photo1.jpg'].keys()) == 2\n  True\n  >>> triples['http://example.com/multiassert/photo1.jpg'] \\\n  ...          ['http://purl.org/dc/elements/1.1/creator']\n  ['http://www.blogger.com/profile/1109404']\n  >>> triples['http://example.com/multiassert/photo1.jpg'] \\\n  ...          ['http://purl.org/dc/elements/1.1/title']\n  ['Portrait of Mark']\n\n  >>> triples['http://www.blogger.com/profile/1109404']\n  {'http://xmlns.com/foaf/0.1/img': ['http://example.com/multiassert/photo1.jpg']}\n\n\nResolving Statements\n====================\n\nWhen resolving statements, the REL, REV, CLASS and PROPERTY attributes expect\na `CURIE <http://www.w3.org/2001/sw/BestPractices/HTML/2005-10-21-curie>`_, \nwhile the HREF property expects a URI.  When resolving CURIEs, un-namespaced \nvalues which are not HTML reserved words (such as license) are ignored to \nprevent \"triple bloat\".\n\nGiven an example:\n\n  >>> rdfa_sample2 = \"\"\"\n  ... <div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n  ...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  ... <link rel=\"alternate\" href=\"/foo/bar\" />\n  ... <h1 property=\"dc:title\">Vacation in the South of France</h1>\n  ... <h2>created \n  ... by <span property=\"dc:creator\">Mark Birbeck</span>\n  ... on <span property=\"dc:date\" type=\"xsd:date\"\n  ...          content=\"2006-01-02\">\n  ...   January 2nd, 2006\n  ...    </span>\n  ... </h2>\n  ... <img src=\"/myphoto.jpg\" class=\"photo\" />\n  ... (<a href=\"http://creativecommons.org/licenses/by/3.0/\" rel=\"license\"\n  ...    about=\"/myphoto.jpg\">CC License</a>)\n  ... </div>\"\"\"\n\nWe can extract RDFa triples from it:\n\n  >>> parser = rdfadict.RdfaParser()\n  >>> base_uri2 = \"http://example.com/rdfadict/sample2\"\n  >>> triples = parser.parse_string(rdfa_sample2, base_uri2)\n\nThis block of RDFa includes a license statement about another document, the\nphoto:\n\n  >>> len(triples[\"http://example.com/myphoto.jpg\"])\n  1\n\n  >>> triples[\"http://example.com/myphoto.jpg\"].keys()\n  ['http://www.w3.org/1999/xhtml/vocab#license']\n  >>> triples[\"http://example.com/myphoto.jpg\"] \\\n  ...    ['http://www.w3.org/1999/xhtml/vocab#license']\n  ['http://creativecommons.org/licenses/by/3.0/']\n\nThere are two things to note with respect to this example.  First, the relative\nURI for the photo is resolved with respect to the ``base_uri`` value.  Second,\nthe \"class\" attribute is not processed, because it's value is not in a \ndeclared namespace:\n\n  >>> 'photo' in [ n.lower() for n in\n  ...      triples['http://example.com/rdfadict/sample2'].keys() ]\n  False\n\nSimilar to this case is the ``link`` tag in the example HTML.  Based on the\nsubject resolution rules for ``link`` and ``meta`` tags, no subject can be \nresolved for this assertion.  However, this does not throw an exception because\nthe value of the ``rel`` attribute is not namespaced.\n\nConsider an alternative, contrived example:\n\n  >>> link_sample = \"\"\"\n  ... <div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n  ...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n  ...      about=\"http://example.com/\">\n  ... <link rel=\"dc:creator\" href=\"http://example.com/birbeck\" />\n  ... </div>\"\"\"\n\nBased on the subject resolution rules for ``link`` tags, we expect to see\none assertion: that http://example.com/birbeck represents the creator of\nhttp://example.com.  This can be tested; note we supply a different \n``base_uri`` to ensure the subject is being properly resolved.\n\n  >>> parser = rdfadict.RdfaParser()\n  >>> link_base_uri = 'http://example.com/foo'\n  >>> triples = parser.parse_string(link_sample, link_base_uri)\n\n  >>> triples.keys()\n  ['http://example.com/']\n  >>> len(triples['http://example.com/'])\n  1\n  >>> triples['http://example.com/']['http://purl.org/dc/elements/1.1/creator']\n  ['http://example.com/birbeck']\n\nNote that this HTML makes **no** assertions about the source document:\n\n  >>> link_base_uri in triples.keys()\n  False\n\nIf the HTML sample is modified slightly, and the ``about`` attribute\nis omitted, rdfadict is resolves the subject to the explicit base URI.\n\n  >>> link_sample = \"\"\"\n  ... <div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n  ...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" >\n  ... <link rel=\"dc:creator\" href=\"http://example.com/birbeck\" />\n  ... </div>\"\"\"\n  >>> parser = rdfadict.RdfaParser()\n  >>> link_base_uri = 'http://example.com/foo'\n  >>> triples = parser.parse_string(link_sample, link_base_uri)\n  >>> link_base_uri in triples.keys()\n  True\n\nIf a namespace is unable to be resolved, the assertion is ignored.\n\n  >>> ns_sample = \"\"\"\n  ... <a href=\"http://example.com/foo\" rel=\"foo:bar\">Content</a>\n  ... \"\"\"\n  >>> parser = rdfadict.RdfaParser()\n  >>> triples = parser.parse_string(ns_sample, 'http://example.com/bob')\n  >>> triples\n  {}\n\nSee the `RDFa Primer <http://www.w3.org/2006/07/SWD/RDFa/primer/>`_\nfor more RDFa examples.\n\nParsing Files\n=============\n\n**rdfadict** can parse from three sources: URLs, file-like objects, or\nstrings.  The examples thus far have parsed strings using the\n``parse_string`` method.  A file-like object can also be used:\n\n   >>> from StringIO import StringIO\n   >>> file_sample = \"\"\"\n   ... <html>\n   ...  <body>\n   ...    <a href=\"http://creativecommons.org/licenses/by/3.0/\"\n   ...       rel=\"license\">the license</a>\n   ...  </body>\n   ... </html>\n   ... \"\"\"\n   >>> parser = rdfadict.RdfaParser()\n   >>> result = parser.parse_file(StringIO(file_sample),\n   ...                            \"http://creativecommons.org\")\n   >>> result.keys()\n   ['http://creativecommons.org']\n   >>> result['http://creativecommons.org']\n   {'http://www.w3.org/1999/xhtml/vocab#license': ['http://creativecommons.org/licenses/by/3.0/']}\n\nParsing By URL\n==============\n\n**rdfadict** can parse a document retrievable by URI.  Behind the\nscenes it uses ``urllib2`` to open the document.  \n\n  >>> parser = rdfadict.RdfaParser()\n  >>> result = \\\n  ... parser.parse_url('http://creativecommons.org/licenses/by/2.1/jp/')\n  >>> print result['http://creativecommons.org/licenses/by/2.1/jp/']\\\n  ... ['http://purl.org/dc/elements/1.1/title'][0]\n  \u8868\u793a 2.1 \u65e5\u672c\n\nNote that ``parse_file`` is not recommended for use with ``urllib2``\nhandler objects.  In the event that pyRdfa encounters a non-XHTML\nsource, it re-opens the URL to begin processing with a more tolerant\nparser.  When ``parse_file`` is used to initiate parsing, it is unable\nto re-open the URL correctly.\n\nTriple Sinks\n============\n\n**rdfadict** uses a simple interface (the triple sink) to pass RDF triples\nextracted back to some storage mechanism.  A class which acts as a triple\nsink only needs to define a single method, ``triple``.  For example::\n\n   class StdOutTripleSink(object):\n       \"\"\"A triple sink which prints out the triples as they are received.\"\"\"\n\n       def triple(self, subject, predicate, object):\n           \"\"\"Process the given triple.\"\"\"\n\n           print subject, predicate, object\n\nThe default triple sink models the triples as a nested dictionary, \nas described above.  Also included with the package is a list triple sink,\nwhich stores the triples as a list of 3-tuples.  To use a different sink,\npass an instance in as the ``sink`` parameter to either parse method.  For\nexample:\n\n   >>> parser = rdfadict.RdfaParser()\n   >>> list_sink = rdfadict.sink.SimpleTripleSink()\n   >>> result = parser.parse_string(rdfa_sample, base_uri, sink=list_sink)\n\n   >>> result is list_sink\n   True\n\n   >>> len(list_sink)\n   3\n\nNote that the parse method returns the sink used.  Since the sink we're using\nis really just a ``list``, the interpreter prints the contents upon return.\n\nLimitations and Known Issues\n****************************\n\n**rdfadict** currently does not implement the following areas properly; \nnumbers in parenthesis refer to the section number  in the `RDFa Syntax \nDocument <http://www.w3.org/2006/07/SWD/RDFa/syntax/>`_.\n\n* ``xml:base`` is not respected (2.3)\n* Typing is not implemented; this includes implicit XMLLiteral typing as well\n  as explicit types specified by the ``datatype`` attribute (5.1)\n* Blank nodes are not guaranteed to work per the syntax document (5.2); if\n  you try to use them, you will probably be disappointed.\n* Reification is not implemented (5.3).\n\n\nChange History\n**************\n\n0.7.3 (2011-01-27)\n==================\n\n* Corrected minor bug; the Sets modules was imported in all cases,\n  resulting in a DeprecationWarning.\n\n0.7.1.1 (2010-03-17)\n====================\n\n* Added missing MANIFEST.in, which prevented setup.py from working\n  when run from an sdist (as opposed to a checkout).\n\n0.7.1 (2009-07-20)\n==================\n\n* Updated DictSetTripleSink to coerce ``triple()`` parameters to\n  ``unicode`` instead of ``str``.\n\n0.7 (2009-06-02)\n================\n\n* DictTripleSink uses ``encode`` instead of ``str``, making it\n  friendlier to Unicode.\n* Eliminated custom pyRDFa wrapper.\n* Added a test for handling Unicode triples. \n\n0.6 (2008-10-14)\n================\n\n* Added DictSetTripleSink\n\n0.5.2 (2008-08-14)\n==================\n\n* Corrected bug with parse_url; non-XHTML sources will now be parsed\n  correctly.\n\n0.5.1 (2008-08-13)\n==================\n\n* Added ``parse_file`` method for parsing data from a file-like\n  object.\n* ``parseurl`` and ``parsestring`` are now aliased to ``parse_url``\n  and ``parse_string`` respectively.\n\n0.5 (2008-08-12)\n================\n\n* rdfadict now acts as a wrapper for `pyRdfa\n  <http://www.w3.org/2007/08/pyRdfa/>`_ for full compliance with the\n  candidate recommendation.\n* The ``cc`` namespace is no longer special cased with a default\n  value.\n* Removed tidy extra and uTidylib dependency; parsing is now handled\n  by pyRdfa which uses html5lib for handling more broken HTML.\n* Doctests are now in README.txt in the rdfadict package.\n* The default XHTML namespace is now\n  http://www.w3.org/1999/xhtml/vocab instead of\n  http://www.w3.org/1999/xhtml\n\n0.4.2 (2007-06-05)\n==================\n\n* Corrected dependency link for uTidylib.\n\n0.4.1 (2007-03-21)\n==================\n\n* Use `uTidylib <http://utidylib.berlios.de>`_ instead of ``os.system`` for\n  wrapping tidy.\n\n0.4.0 (2007-03-20)\n==================\n\n* Provide rudimentary fallback to Tidy when we encounter HTML which is not\n  well-formed XML.\n\n0.3.3 (2007-03-14)\n==================\n\n* Removed special case for ``cc:license``; instead, ``cc`` namespace simply \n  has a default value of ``http://web.resource.org/cc/``.\n\n0.3.2 (2007-03-12)\n==================\n\n* Ignore assertions which have unresolvable namespace prefixes.\n* Special case handling for ``cc:license``.\n\n0.3.1 (2007-03-09)\n==================\n\n* Fixed bug in subject resolution exception handling.\n\n0.3 (2007-03-08)\n================\n\n* Fixed resolution of URIs v. CURIEs\n* Drop assertions with non-namespaced CURIEs as the predicate (per updated spec)\n* Updated test suite to comply with updated RDFa specification\n* Corrected subject resolution behavior for <link> and <meta> elements\n* Implemented entry point and extractor interface for compatibility with the\n  ccrdf.rdfextract library.\n* Fixed parsing of ``rev`` assertions, which was formerly completely broken.\n\n0.2 (2006-11-21)\n================\n\n* Directly subclass list and dict for our sample triple sinks\n* Additional package metadata for PyPI\n* Additional documentation of sink interface and tests for the SimpleTripleSink\n\n0.1 (2006-11-20)\n================\n\n* Initial public release\n\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://wiki.creativecommons.org/RdfaDict", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "rdfadict", "package_url": "https://pypi.org/project/rdfadict/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rdfadict/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://wiki.creativecommons.org/RdfaDict"}, "release_url": "https://pypi.org/project/rdfadict/0.7.4/", "requires_dist": null, "requires_python": null, "summary": "An RDFa parser wth a simple dictionary-like interface.", "version": "0.7.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Date:</th>\n<td>$LastChangedDate$</td></tr>\n<tr><th>Version:</th>\n<td>$LastChangedRevision$</td></tr>\n<tr><th>Author:</th>\n<td>Nathan R. Yergler &lt;<a href=\"mailto:nathan%40creativecommons.org\">nathan<span>@</span>creativecommons<span>.</span>org</a>&gt;</td></tr>\n<tr><th>Organization:</th>\n<td><a href=\"http://creativecommons.org\" rel=\"nofollow\">Creative Commons</a></td></tr>\n<tr><th>Copyright:</th>\n<td>2006-2008, Nathan R. Yergler, Creative Commons;\nlicensed to the public under the <a href=\"http://opensource.org/licenses/mit-license.php\" rel=\"nofollow\">MIT license</a>.</td></tr>\n</tbody>\n</table>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id19\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id20\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#multiple-assertions\" id=\"id21\" rel=\"nofollow\">Multiple Assertions</a></li>\n<li><a href=\"#resolving-statements\" id=\"id22\" rel=\"nofollow\">Resolving Statements</a></li>\n<li><a href=\"#parsing-files\" id=\"id23\" rel=\"nofollow\">Parsing Files</a></li>\n<li><a href=\"#parsing-by-url\" id=\"id24\" rel=\"nofollow\">Parsing By URL</a></li>\n<li><a href=\"#triple-sinks\" id=\"id25\" rel=\"nofollow\">Triple Sinks</a></li>\n</ul>\n</li>\n<li><a href=\"#limitations-and-known-issues\" id=\"id26\" rel=\"nofollow\">Limitations and Known Issues</a></li>\n<li><a href=\"#change-history\" id=\"id27\" rel=\"nofollow\">Change History</a><ul>\n<li><a href=\"#id1\" id=\"id28\" rel=\"nofollow\">0.7.3 (2011-01-27)</a></li>\n<li><a href=\"#id2\" id=\"id29\" rel=\"nofollow\">0.7.1.1 (2010-03-17)</a></li>\n<li><a href=\"#id3\" id=\"id30\" rel=\"nofollow\">0.7.1 (2009-07-20)</a></li>\n<li><a href=\"#id4\" id=\"id31\" rel=\"nofollow\">0.7 (2009-06-02)</a></li>\n<li><a href=\"#id5\" id=\"id32\" rel=\"nofollow\">0.6 (2008-10-14)</a></li>\n<li><a href=\"#id6\" id=\"id33\" rel=\"nofollow\">0.5.2 (2008-08-14)</a></li>\n<li><a href=\"#id7\" id=\"id34\" rel=\"nofollow\">0.5.1 (2008-08-13)</a></li>\n<li><a href=\"#id8\" id=\"id35\" rel=\"nofollow\">0.5 (2008-08-12)</a></li>\n<li><a href=\"#id10\" id=\"id36\" rel=\"nofollow\">0.4.2 (2007-06-05)</a></li>\n<li><a href=\"#id11\" id=\"id37\" rel=\"nofollow\">0.4.1 (2007-03-21)</a></li>\n<li><a href=\"#id12\" id=\"id38\" rel=\"nofollow\">0.4.0 (2007-03-20)</a></li>\n<li><a href=\"#id13\" id=\"id39\" rel=\"nofollow\">0.3.3 (2007-03-14)</a></li>\n<li><a href=\"#id14\" id=\"id40\" rel=\"nofollow\">0.3.2 (2007-03-12)</a></li>\n<li><a href=\"#id15\" id=\"id41\" rel=\"nofollow\">0.3.1 (2007-03-09)</a></li>\n<li><a href=\"#id16\" id=\"id42\" rel=\"nofollow\">0.3 (2007-03-08)</a></li>\n<li><a href=\"#id17\" id=\"id43\" rel=\"nofollow\">0.2 (2006-11-21)</a></li>\n<li><a href=\"#id18\" id=\"id44\" rel=\"nofollow\">0.1 (2006-11-20)</a></li>\n</ul>\n</li>\n<li><a href=\"#download\" id=\"id45\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Installation</a></h2>\n<p>rdfadict and its dependencies may be installed using <a href=\"http://peak.telecommunity.com/DevCenter/EasyInstall\" rel=\"nofollow\">easy_install</a> (recommended)</p>\n<pre>$ easy_install rdfadict\n</pre>\n<p>or by using the standard distutils setup.py:</p>\n<pre>$ python setup.py install\n</pre>\n<p>If you are installing from source, you will also need the following\npackages:</p>\n<ul>\n<li><a href=\"http://rdflib.net/\" rel=\"nofollow\">rdflib 2.4.x</a></li>\n<li><a href=\"http://www.w3.org/2007/08/pyRdfa/\" rel=\"nofollow\">pyRdfa</a></li>\n<li><a href=\"http://code.google.com/p/html5lib/\" rel=\"nofollow\">html5lib</a> (required if you\nwant to support non-XHTML documents)</li>\n</ul>\n<p><tt>easy_install</tt> will satisfy depedencies for you if necessary.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id20\" rel=\"nofollow\">Usage</a></h2>\n<div>\n<p>Document Purpose</p>\n<p>This document is intended to provide a set of literate tests\nfor the <tt>rdfadict</tt> package; it is <strong>not</strong> intended to provide thorough\ncoverage of RDFa syntax or semantics.  See the <a href=\"http://www.w3.org/2006/07/SWD/RDFa/primer/\" rel=\"nofollow\">RDF Primer</a> or the <a href=\"http://www.w3.org/2006/07/SWD/RDFa/syntax/\" rel=\"nofollow\">RDFa Syntax</a> for details on RDFa.</p>\n</div>\n<p><strong>rdfadict</strong> parses RDFa metadata encoded in HTML or XHTML documents.  It can\nparse a block of text (as a string), or a URL.  For example, given the\nfollowing block of sample text:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rdfa_sample = \"\"\"\n... &lt;div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n... &lt;h1 property=\"dc:title\"&gt;Vacation in the South of France&lt;/h1&gt;\n... &lt;h2&gt;created\n... by &lt;span property=\"dc:creator\"&gt;Mark Birbeck&lt;/span&gt;\n... on &lt;span property=\"dc:date\" type=\"xsd:date\"\n...          content=\"2006-01-02\"&gt;\n...   January 2nd, 2006\n...    &lt;/span&gt;\n... &lt;/h2&gt;\n... &lt;/div&gt;\"\"\"\n</pre>\n</blockquote>\n<p>Triples can be extracted using <strong>rdfadict</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import rdfadict\n&gt;&gt;&gt; base_uri = \"http://example.com/rdfadict/\"\n&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; triples = parser.parse_string(rdfa_sample, base_uri)\n</pre>\n</blockquote>\n<p>We define the variable <tt>base_uri</tt> to let the parser know what URI assertions\nwithout subjects apply to.</p>\n<p>Based on our example text, we expect to get three triples back \u2013 title,\ncreator and date.  Triple are indexed as a dictionary, first by subject,\nthen by predicate, finally retuning a <tt>list</tt> of objects.  For example,\na list of all subjects is retrieved using:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; triples.keys()\n['http://example.com/rdfadict/']\n</pre>\n</blockquote>\n<p>If assertions were made about resources other than the default, those URIs\nwould appear in this list.  We can verify how many predicates were found\nfor this subject by accessing the next level of the dictionary:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; len(triples['http://example.com/rdfadict/'].keys())\n3\n</pre>\n</blockquote>\n<p>Finally, we can retrieve the value for the title by fully dereferencing\nthe dictionary:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; triples['http://example.com/rdfadict/'][\n...     'http://purl.org/dc/elements/1.1/title']\n['Vacation in the South of France']\n</pre>\n</blockquote>\n<p>Note that the objects are stored as a list by the default triple sink.</p>\n<div id=\"multiple-assertions\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Multiple Assertions</a></h3>\n<p>Because the <tt>property</tt> attribute always denotes triple with a literal string\nas its object and <tt>rel</tt> and <tt>rev</tt> denote triples with URIs as their\nobjects, it is possible to make multiple assertions with a single HTML tag.</p>\n<p>For example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; multi_rdfa = \"\"\"\n... &lt;div xmlns:foaf=\"http://xmlns.com/foaf/0.1/\"\n...      xmlns:dc=\"http://purl.org/dc/elements/1.1/\"&gt;\n...   This photo was taken by &lt;a about=\"photo1.jpg\" property=\"dc:title\"\n...   content=\"Portrait of Mark\" rel=\"dc:creator\"\n...   rev=\"foaf:img\"\n...   href=\"http://www.blogger.com/profile/1109404\"&gt;Mark Birbeck&lt;/a&gt;.\n... &lt;/div&gt;\n... \"\"\"\n</pre>\n</blockquote>\n<p>In this statement we are making three assertions: two involving URI objects\n(specified by <tt>rel</tt> and <tt>rev</tt>), and one involving the <tt>property</tt>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import rdfadict\n&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; multi_base_uri = \"http://example.com/multiassert/\"\n&gt;&gt;&gt; triples = parser.parse_string(multi_rdfa, multi_base_uri)\n</pre>\n</blockquote>\n<p>We expect the triples generated to have two subjects: the photo URI (for the\n<tt>rel</tt> and <tt>property</tt> assertions) and the <tt>href</tt> URI (for the <tt>rev</tt>\nassertion).</p>\n<blockquote>\n<pre>&gt;&gt;&gt; len(triples.keys()) == 2\nTrue\n&gt;&gt;&gt; 'http://example.com/multiassert/photo1.jpg' in triples.keys()\nTrue\n&gt;&gt;&gt; 'http://www.blogger.com/profile/1109404' in triples.keys()\nTrue\n</pre>\n</blockquote>\n<p>Finally, we verify that the assertions made about each subject are correct:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; len(triples['http://example.com/multiassert/photo1.jpg'].keys()) == 2\nTrue\n&gt;&gt;&gt; triples['http://example.com/multiassert/photo1.jpg'] \\\n...          ['http://purl.org/dc/elements/1.1/creator']\n['http://www.blogger.com/profile/1109404']\n&gt;&gt;&gt; triples['http://example.com/multiassert/photo1.jpg'] \\\n...          ['http://purl.org/dc/elements/1.1/title']\n['Portrait of Mark']\n</pre>\n<pre>&gt;&gt;&gt; triples['http://www.blogger.com/profile/1109404']\n{'http://xmlns.com/foaf/0.1/img': ['http://example.com/multiassert/photo1.jpg']}\n</pre>\n</blockquote>\n</div>\n<div id=\"resolving-statements\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Resolving Statements</a></h3>\n<p>When resolving statements, the REL, REV, CLASS and PROPERTY attributes expect\na <a href=\"http://www.w3.org/2001/sw/BestPractices/HTML/2005-10-21-curie\" rel=\"nofollow\">CURIE</a>,\nwhile the HREF property expects a URI.  When resolving CURIEs, un-namespaced\nvalues which are not HTML reserved words (such as license) are ignored to\nprevent \u201ctriple bloat\u201d.</p>\n<p>Given an example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rdfa_sample2 = \"\"\"\n... &lt;div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n... &lt;link rel=\"alternate\" href=\"/foo/bar\" /&gt;\n... &lt;h1 property=\"dc:title\"&gt;Vacation in the South of France&lt;/h1&gt;\n... &lt;h2&gt;created\n... by &lt;span property=\"dc:creator\"&gt;Mark Birbeck&lt;/span&gt;\n... on &lt;span property=\"dc:date\" type=\"xsd:date\"\n...          content=\"2006-01-02\"&gt;\n...   January 2nd, 2006\n...    &lt;/span&gt;\n... &lt;/h2&gt;\n... &lt;img src=\"/myphoto.jpg\" class=\"photo\" /&gt;\n... (&lt;a href=\"http://creativecommons.org/licenses/by/3.0/\" rel=\"license\"\n...    about=\"/myphoto.jpg\"&gt;CC License&lt;/a&gt;)\n... &lt;/div&gt;\"\"\"\n</pre>\n</blockquote>\n<p>We can extract RDFa triples from it:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; base_uri2 = \"http://example.com/rdfadict/sample2\"\n&gt;&gt;&gt; triples = parser.parse_string(rdfa_sample2, base_uri2)\n</pre>\n</blockquote>\n<p>This block of RDFa includes a license statement about another document, the\nphoto:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; len(triples[\"http://example.com/myphoto.jpg\"])\n1\n</pre>\n<pre>&gt;&gt;&gt; triples[\"http://example.com/myphoto.jpg\"].keys()\n['http://www.w3.org/1999/xhtml/vocab#license']\n&gt;&gt;&gt; triples[\"http://example.com/myphoto.jpg\"] \\\n...    ['http://www.w3.org/1999/xhtml/vocab#license']\n['http://creativecommons.org/licenses/by/3.0/']\n</pre>\n</blockquote>\n<p>There are two things to note with respect to this example.  First, the relative\nURI for the photo is resolved with respect to the <tt>base_uri</tt> value.  Second,\nthe \u201cclass\u201d attribute is not processed, because it\u2019s value is not in a\ndeclared namespace:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; 'photo' in [ n.lower() for n in\n...      triples['http://example.com/rdfadict/sample2'].keys() ]\nFalse\n</pre>\n</blockquote>\n<p>Similar to this case is the <tt>link</tt> tag in the example HTML.  Based on the\nsubject resolution rules for <tt>link</tt> and <tt>meta</tt> tags, no subject can be\nresolved for this assertion.  However, this does not throw an exception because\nthe value of the <tt>rel</tt> attribute is not namespaced.</p>\n<p>Consider an alternative, contrived example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; link_sample = \"\"\"\n... &lt;div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n...      about=\"http://example.com/\"&gt;\n... &lt;link rel=\"dc:creator\" href=\"http://example.com/birbeck\" /&gt;\n... &lt;/div&gt;\"\"\"\n</pre>\n</blockquote>\n<p>Based on the subject resolution rules for <tt>link</tt> tags, we expect to see\none assertion: that <a href=\"http://example.com/birbeck\" rel=\"nofollow\">http://example.com/birbeck</a> represents the creator of\n<a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>.  This can be tested; note we supply a different\n<tt>base_uri</tt> to ensure the subject is being properly resolved.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; link_base_uri = 'http://example.com/foo'\n&gt;&gt;&gt; triples = parser.parse_string(link_sample, link_base_uri)\n</pre>\n<pre>&gt;&gt;&gt; triples.keys()\n['http://example.com/']\n&gt;&gt;&gt; len(triples['http://example.com/'])\n1\n&gt;&gt;&gt; triples['http://example.com/']['http://purl.org/dc/elements/1.1/creator']\n['http://example.com/birbeck']\n</pre>\n</blockquote>\n<p>Note that this HTML makes <strong>no</strong> assertions about the source document:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; link_base_uri in triples.keys()\nFalse\n</pre>\n</blockquote>\n<p>If the HTML sample is modified slightly, and the <tt>about</tt> attribute\nis omitted, rdfadict is resolves the subject to the explicit base URI.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; link_sample = \"\"\"\n... &lt;div xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n...      xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" &gt;\n... &lt;link rel=\"dc:creator\" href=\"http://example.com/birbeck\" /&gt;\n... &lt;/div&gt;\"\"\"\n&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; link_base_uri = 'http://example.com/foo'\n&gt;&gt;&gt; triples = parser.parse_string(link_sample, link_base_uri)\n&gt;&gt;&gt; link_base_uri in triples.keys()\nTrue\n</pre>\n</blockquote>\n<p>If a namespace is unable to be resolved, the assertion is ignored.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ns_sample = \"\"\"\n... &lt;a href=\"http://example.com/foo\" rel=\"foo:bar\"&gt;Content&lt;/a&gt;\n... \"\"\"\n&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; triples = parser.parse_string(ns_sample, 'http://example.com/bob')\n&gt;&gt;&gt; triples\n{}\n</pre>\n</blockquote>\n<p>See the <a href=\"http://www.w3.org/2006/07/SWD/RDFa/primer/\" rel=\"nofollow\">RDFa Primer</a>\nfor more RDFa examples.</p>\n</div>\n<div id=\"parsing-files\">\n<h3><a href=\"#id23\" rel=\"nofollow\">Parsing Files</a></h3>\n<p><strong>rdfadict</strong> can parse from three sources: URLs, file-like objects, or\nstrings.  The examples thus far have parsed strings using the\n<tt>parse_string</tt> method.  A file-like object can also be used:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from StringIO import StringIO\n&gt;&gt;&gt; file_sample = \"\"\"\n... &lt;html&gt;\n...  &lt;body&gt;\n...    &lt;a href=\"http://creativecommons.org/licenses/by/3.0/\"\n...       rel=\"license\"&gt;the license&lt;/a&gt;\n...  &lt;/body&gt;\n... &lt;/html&gt;\n... \"\"\"\n&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; result = parser.parse_file(StringIO(file_sample),\n...                            \"http://creativecommons.org\")\n&gt;&gt;&gt; result.keys()\n['http://creativecommons.org']\n&gt;&gt;&gt; result['http://creativecommons.org']\n{'http://www.w3.org/1999/xhtml/vocab#license': ['http://creativecommons.org/licenses/by/3.0/']}\n</pre>\n</blockquote>\n</div>\n<div id=\"parsing-by-url\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Parsing By URL</a></h3>\n<p><strong>rdfadict</strong> can parse a document retrievable by URI.  Behind the\nscenes it uses <tt>urllib2</tt> to open the document.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; result = \\\n... parser.parse_url('http://creativecommons.org/licenses/by/2.1/jp/')\n&gt;&gt;&gt; print result['http://creativecommons.org/licenses/by/2.1/jp/']\\\n... ['http://purl.org/dc/elements/1.1/title'][0]\n\u8868\u793a 2.1 \u65e5\u672c\n</pre>\n</blockquote>\n<p>Note that <tt>parse_file</tt> is not recommended for use with <tt>urllib2</tt>\nhandler objects.  In the event that pyRdfa encounters a non-XHTML\nsource, it re-opens the URL to begin processing with a more tolerant\nparser.  When <tt>parse_file</tt> is used to initiate parsing, it is unable\nto re-open the URL correctly.</p>\n</div>\n<div id=\"triple-sinks\">\n<h3><a href=\"#id25\" rel=\"nofollow\">Triple Sinks</a></h3>\n<p><strong>rdfadict</strong> uses a simple interface (the triple sink) to pass RDF triples\nextracted back to some storage mechanism.  A class which acts as a triple\nsink only needs to define a single method, <tt>triple</tt>.  For example:</p>\n<pre>class StdOutTripleSink(object):\n    \"\"\"A triple sink which prints out the triples as they are received.\"\"\"\n\n    def triple(self, subject, predicate, object):\n        \"\"\"Process the given triple.\"\"\"\n\n        print subject, predicate, object\n</pre>\n<p>The default triple sink models the triples as a nested dictionary,\nas described above.  Also included with the package is a list triple sink,\nwhich stores the triples as a list of 3-tuples.  To use a different sink,\npass an instance in as the <tt>sink</tt> parameter to either parse method.  For\nexample:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; parser = rdfadict.RdfaParser()\n&gt;&gt;&gt; list_sink = rdfadict.sink.SimpleTripleSink()\n&gt;&gt;&gt; result = parser.parse_string(rdfa_sample, base_uri, sink=list_sink)\n</pre>\n<pre>&gt;&gt;&gt; result is list_sink\nTrue\n</pre>\n<pre>&gt;&gt;&gt; len(list_sink)\n3\n</pre>\n</blockquote>\n<p>Note that the parse method returns the sink used.  Since the sink we\u2019re using\nis really just a <tt>list</tt>, the interpreter prints the contents upon return.</p>\n</div>\n</div>\n<div id=\"limitations-and-known-issues\">\n<h2><a href=\"#id26\" rel=\"nofollow\">Limitations and Known Issues</a></h2>\n<p><strong>rdfadict</strong> currently does not implement the following areas properly;\nnumbers in parenthesis refer to the section number  in the <a href=\"http://www.w3.org/2006/07/SWD/RDFa/syntax/\" rel=\"nofollow\">RDFa Syntax\nDocument</a>.</p>\n<ul>\n<li><tt>xml:base</tt> is not respected (2.3)</li>\n<li>Typing is not implemented; this includes implicit XMLLiteral typing as well\nas explicit types specified by the <tt>datatype</tt> attribute (5.1)</li>\n<li>Blank nodes are not guaranteed to work per the syntax document (5.2); if\nyou try to use them, you will probably be disappointed.</li>\n<li>Reification is not implemented (5.3).</li>\n</ul>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id27\" rel=\"nofollow\">Change History</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id28\" rel=\"nofollow\">0.7.3 (2011-01-27)</a></h3>\n<ul>\n<li>Corrected minor bug; the Sets modules was imported in all cases,\nresulting in a DeprecationWarning.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id29\" rel=\"nofollow\">0.7.1.1 (2010-03-17)</a></h3>\n<ul>\n<li>Added missing MANIFEST.in, which prevented setup.py from working\nwhen run from an sdist (as opposed to a checkout).</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id30\" rel=\"nofollow\">0.7.1 (2009-07-20)</a></h3>\n<ul>\n<li>Updated DictSetTripleSink to coerce <tt>triple()</tt> parameters to\n<tt>unicode</tt> instead of <tt>str</tt>.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id31\" rel=\"nofollow\">0.7 (2009-06-02)</a></h3>\n<ul>\n<li>DictTripleSink uses <tt>encode</tt> instead of <tt>str</tt>, making it\nfriendlier to Unicode.</li>\n<li>Eliminated custom pyRDFa wrapper.</li>\n<li>Added a test for handling Unicode triples.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id32\" rel=\"nofollow\">0.6 (2008-10-14)</a></h3>\n<ul>\n<li>Added DictSetTripleSink</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id33\" rel=\"nofollow\">0.5.2 (2008-08-14)</a></h3>\n<ul>\n<li>Corrected bug with parse_url; non-XHTML sources will now be parsed\ncorrectly.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id34\" rel=\"nofollow\">0.5.1 (2008-08-13)</a></h3>\n<ul>\n<li>Added <tt>parse_file</tt> method for parsing data from a file-like\nobject.</li>\n<li><tt>parseurl</tt> and <tt>parsestring</tt> are now aliased to <tt>parse_url</tt>\nand <tt>parse_string</tt> respectively.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id35\" rel=\"nofollow\">0.5 (2008-08-12)</a></h3>\n<ul>\n<li>rdfadict now acts as a wrapper for <a href=\"http://www.w3.org/2007/08/pyRdfa/\" rel=\"nofollow\">pyRdfa</a> for full compliance with the\ncandidate recommendation.</li>\n<li>The <tt>cc</tt> namespace is no longer special cased with a default\nvalue.</li>\n<li>Removed tidy extra and uTidylib dependency; parsing is now handled\nby pyRdfa which uses html5lib for handling more broken HTML.</li>\n<li>Doctests are now in README.txt in the rdfadict package.</li>\n<li>The default XHTML namespace is now\n<a href=\"http://www.w3.org/1999/xhtml/vocab\" rel=\"nofollow\">http://www.w3.org/1999/xhtml/vocab</a> instead of\n<a href=\"http://www.w3.org/1999/xhtml\" rel=\"nofollow\">http://www.w3.org/1999/xhtml</a></li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id36\" rel=\"nofollow\">0.4.2 (2007-06-05)</a></h3>\n<ul>\n<li>Corrected dependency link for uTidylib.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id37\" rel=\"nofollow\">0.4.1 (2007-03-21)</a></h3>\n<ul>\n<li>Use <a href=\"http://utidylib.berlios.de\" rel=\"nofollow\">uTidylib</a> instead of <tt>os.system</tt> for\nwrapping tidy.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id38\" rel=\"nofollow\">0.4.0 (2007-03-20)</a></h3>\n<ul>\n<li>Provide rudimentary fallback to Tidy when we encounter HTML which is not\nwell-formed XML.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id39\" rel=\"nofollow\">0.3.3 (2007-03-14)</a></h3>\n<ul>\n<li>Removed special case for <tt>cc:license</tt>; instead, <tt>cc</tt> namespace simply\nhas a default value of <tt><span class=\"pre\">http://web.resource.org/cc/</span></tt>.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id40\" rel=\"nofollow\">0.3.2 (2007-03-12)</a></h3>\n<ul>\n<li>Ignore assertions which have unresolvable namespace prefixes.</li>\n<li>Special case handling for <tt>cc:license</tt>.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id41\" rel=\"nofollow\">0.3.1 (2007-03-09)</a></h3>\n<ul>\n<li>Fixed bug in subject resolution exception handling.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id42\" rel=\"nofollow\">0.3 (2007-03-08)</a></h3>\n<ul>\n<li>Fixed resolution of URIs v. CURIEs</li>\n<li>Drop assertions with non-namespaced CURIEs as the predicate (per updated spec)</li>\n<li>Updated test suite to comply with updated RDFa specification</li>\n<li>Corrected subject resolution behavior for &lt;link&gt; and &lt;meta&gt; elements</li>\n<li>Implemented entry point and extractor interface for compatibility with the\nccrdf.rdfextract library.</li>\n<li>Fixed parsing of <tt>rev</tt> assertions, which was formerly completely broken.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id43\" rel=\"nofollow\">0.2 (2006-11-21)</a></h3>\n<ul>\n<li>Directly subclass list and dict for our sample triple sinks</li>\n<li>Additional package metadata for PyPI</li>\n<li>Additional documentation of sink interface and tests for the SimpleTripleSink</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id44\" rel=\"nofollow\">0.1 (2006-11-20)</a></h3>\n<ul>\n<li>Initial public release</li>\n</ul>\n</div>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id45\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 704979, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f9a15002b210d2b7c675c4e6942efab0", "sha256": "fcc98e3d8e27dcdfba0dd68cd905e4068157267d0fc963815e3d518eaae1bba5"}, "downloads": -1, "filename": "rdfadict-0.1-py2.4.egg", "has_sig": false, "md5_digest": "f9a15002b210d2b7c675c4e6942efab0", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 5585, "upload_time": "2006-11-21T15:21:18", "upload_time_iso_8601": "2006-11-21T15:21:18Z", "url": "https://files.pythonhosted.org/packages/8e/16/54e09189bd3fa21c3e9746378464beaacb58636202a0cf9e915283a9f4d5/rdfadict-0.1-py2.4.egg", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ccf7bf115194a0bc1014efbc3509bbf8", "sha256": "7a21b07347c657d67a0faae7828fddce23e23926426f59f38c4e0893b5524018"}, "downloads": -1, "filename": "rdfadict-0.2-py2.4.egg", "has_sig": false, "md5_digest": "ccf7bf115194a0bc1014efbc3509bbf8", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 7681, "upload_time": "2006-11-21T16:28:41", "upload_time_iso_8601": "2006-11-21T16:28:41Z", "url": "https://files.pythonhosted.org/packages/5d/d5/e769b5fa69bd6e1212774580683c0b82e0554baaee2f5e709162c309e5db/rdfadict-0.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe0ff3e877cf0e9418ca18481e7c917d", "sha256": "b5d47d31a6c775b483a8a46f7ba86f4e094df684396b2f47203fe7d708a5e2c2"}, "downloads": -1, "filename": "rdfadict-0.2-py2.5.egg", "has_sig": false, "md5_digest": "fe0ff3e877cf0e9418ca18481e7c917d", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 7626, "upload_time": "2006-11-21T16:31:24", "upload_time_iso_8601": "2006-11-21T16:31:24Z", "url": "https://files.pythonhosted.org/packages/e2/ec/1c66fae6db22fa86c328624941f8b4fd74667ac3817ccf33ae29f7f55ae4/rdfadict-0.2-py2.5.egg", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "7bb3ad2d41d3fbc4aceacb455e3d9618", "sha256": "9489cbabf93c21b3e0f953350d25ab567fa1479c35ea570e8d33c1e1cacc7d95"}, "downloads": -1, "filename": "rdfadict-0.3-py2.4.egg", "has_sig": false, "md5_digest": "7bb3ad2d41d3fbc4aceacb455e3d9618", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 17963, "upload_time": "2007-03-08T18:40:21", "upload_time_iso_8601": "2007-03-08T18:40:21Z", "url": "https://files.pythonhosted.org/packages/cd/48/33d5abc479d591a734d714fa0defddd886ca351c50e6a65ba818721742b1/rdfadict-0.3-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bf6066b21274be7a566516040276811", "sha256": "6ff5bc72939b811676a5f05b5cc0b559667e4267b6694e8a4c1cec9b46faedeb"}, "downloads": -1, "filename": "rdfadict-0.3.tar.gz", "has_sig": false, "md5_digest": "9bf6066b21274be7a566516040276811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13329, "upload_time": "2007-03-08T18:40:23", "upload_time_iso_8601": "2007-03-08T18:40:23Z", "url": "https://files.pythonhosted.org/packages/63/b4/57d5094bffd1860baabb113a62b389d1efc0fc8a820d74467729e33e2403/rdfadict-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "67f740d2d02a6d0913ca5ac79b2e3d54", "sha256": "88cb1beb276b996695062a0faca9475f946587fedc455a760c709ca754575dd8"}, "downloads": -1, "filename": "rdfadict-0.3.1-py2.4.egg", "has_sig": false, "md5_digest": "67f740d2d02a6d0913ca5ac79b2e3d54", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 19028, "upload_time": "2007-03-09T14:52:46", "upload_time_iso_8601": "2007-03-09T14:52:46Z", "url": "https://files.pythonhosted.org/packages/10/5e/33748ac00a4cdcf148ba3ca30570c2b2182ccb7baf0528008a1bf576efbd/rdfadict-0.3.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ee03433b62c34bae778f341f667f3c3", "sha256": "8eb79798772ca26f2e4b55d5b94f6596b07f865c3188e2e4a28321b3cd33f9af"}, "downloads": -1, "filename": "rdfadict-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0ee03433b62c34bae778f341f667f3c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14823, "upload_time": "2007-03-09T14:52:45", "upload_time_iso_8601": "2007-03-09T14:52:45Z", "url": "https://files.pythonhosted.org/packages/7f/c7/bc8d80dc4362dca130d7711524c01fdffdac9e2c0ce0da17aa6c2ff4b884/rdfadict-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "dd3916660770762134f558ba633c50a0", "sha256": "58d9fa34c85ca6cd7103d21b8c9223139a76a0739a229f5ae6b538f8498f2810"}, "downloads": -1, "filename": "rdfadict-0.3.2-py2.4.egg", "has_sig": false, "md5_digest": "dd3916660770762134f558ba633c50a0", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 19452, "upload_time": "2007-03-12T22:20:47", "upload_time_iso_8601": "2007-03-12T22:20:47Z", "url": "https://files.pythonhosted.org/packages/16/55/9863516442200786849d06701631a7b2e40365889d6762d9d660af05af9f/rdfadict-0.3.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5271627cc850eef30b6e906ca0670831", "sha256": "f5f88b16508ec8586a0de91c9cd212f0449084bbc4e0affa439869b693f78b5f"}, "downloads": -1, "filename": "rdfadict-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5271627cc850eef30b6e906ca0670831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15531, "upload_time": "2007-03-12T22:20:48", "upload_time_iso_8601": "2007-03-12T22:20:48Z", "url": "https://files.pythonhosted.org/packages/6e/2c/049fadf69678f68ec668fe06a51fd8c1650cc95131ccce2379d0355f1495/rdfadict-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "ae861317753be5b8fa93613ab27807e4", "sha256": "9cd71a01cf689cb2b4e87aa7df5ce5c30bb5d4f6028f435231c16464d74586a9"}, "downloads": -1, "filename": "rdfadict-0.3.3-py2.4.egg", "has_sig": false, "md5_digest": "ae861317753be5b8fa93613ab27807e4", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 19633, "upload_time": "2007-03-14T21:40:10", "upload_time_iso_8601": "2007-03-14T21:40:10Z", "url": "https://files.pythonhosted.org/packages/c3/fc/56ccc4e93b03d430c5105054595e640100e010037a1a975d435ec0a121c8/rdfadict-0.3.3-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b466727635d2c75801ab3702de7bdaab", "sha256": "f1c65a76090350b179bc9f7e612499c0ce66c93136ef440aecf06eb134097767"}, "downloads": -1, "filename": "rdfadict-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b466727635d2c75801ab3702de7bdaab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15826, "upload_time": "2007-03-14T21:40:12", "upload_time_iso_8601": "2007-03-14T21:40:12Z", "url": "https://files.pythonhosted.org/packages/c6/39/c71490858244d14890186f4b02522a70f7f9c6a1ea2abe15292157c707ba/rdfadict-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a7d240c0584e31a72c3e7afb99efc5d8", "sha256": "ee63c5b5aca526761f509fab884d284c83062755a7ad77ec014dd64e8454a743"}, "downloads": -1, "filename": "rdfadict-0.4.0-py2.4.egg", "has_sig": false, "md5_digest": "a7d240c0584e31a72c3e7afb99efc5d8", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 21785, "upload_time": "2007-03-20T15:53:16", "upload_time_iso_8601": "2007-03-20T15:53:16Z", "url": "https://files.pythonhosted.org/packages/06/1c/28f7494bdedc7dfdd9538d48fcf5ea04db6a36bcbaad12b2f466305455b5/rdfadict-0.4.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b9f6044c74e46d6d3196c5c6581a922", "sha256": "deda698f5cb2f1a526d7cf7497c4eadca93295ad3cc9c418758b5ddbba7a012e"}, "downloads": -1, "filename": "rdfadict-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3b9f6044c74e46d6d3196c5c6581a922", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17073, "upload_time": "2007-03-20T15:53:17", "upload_time_iso_8601": "2007-03-20T15:53:17Z", "url": "https://files.pythonhosted.org/packages/f5/3f/52e05cdd352a8fdd1b10a7d4c560f79236196fa0d65de71b1ef84297d4bd/rdfadict-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "af3034c471187a2bec7533a4c91ca6f4", "sha256": "ab9ad085193d155e703d4ab42721ac0c77e772f97e03638e532b27047a7ee71d"}, "downloads": -1, "filename": "rdfadict-0.4.1-py2.4.egg", "has_sig": false, "md5_digest": "af3034c471187a2bec7533a4c91ca6f4", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 21149, "upload_time": "2007-03-21T13:07:12", "upload_time_iso_8601": "2007-03-21T13:07:12Z", "url": "https://files.pythonhosted.org/packages/2e/04/ef71e3e6648acb8baa75db12d57649ac2b48ed9910176ee9feb8b0d21fbf/rdfadict-0.4.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "569c0a9135d7c190db9dea3f032048ec", "sha256": "c8e0d80d9ea11a1eae55639aed17ace9d545018e57f175f9ae8f717b291fd018"}, "downloads": -1, "filename": "rdfadict-0.4.1.tar.gz", "has_sig": false, "md5_digest": "569c0a9135d7c190db9dea3f032048ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16932, "upload_time": "2007-03-21T13:07:13", "upload_time_iso_8601": "2007-03-21T13:07:13Z", "url": "https://files.pythonhosted.org/packages/81/e2/f5690ccc6d7f68de4fd72e7d31db5b974da76da48d6c0d8a3349e5006de1/rdfadict-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "96f4c9654c52d9e3b0bb6a3a8bb0ab74", "sha256": "7725be72800b48a712c5fde4019f35b93a3ee86788b25fb8a41fdd79450635e1"}, "downloads": -1, "filename": "rdfadict-0.4.2-py2.4.egg", "has_sig": false, "md5_digest": "96f4c9654c52d9e3b0bb6a3a8bb0ab74", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 21138, "upload_time": "2007-07-05T17:35:02", "upload_time_iso_8601": "2007-07-05T17:35:02Z", "url": "https://files.pythonhosted.org/packages/53/e0/c662f1951cca1e3c9f3dc0f924c41db6d3886fccc14d106f07b6802b953d/rdfadict-0.4.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "80c2154bf5a8540e65f7efb6ca427393", "sha256": "bfccfceef742b2135380388a0dbcc2ec493e859bf94b2ac0a556287860182e15"}, "downloads": -1, "filename": "rdfadict-0.4.2-py2.5.egg", "has_sig": false, "md5_digest": "80c2154bf5a8540e65f7efb6ca427393", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 21056, "upload_time": "2007-07-05T17:34:39", "upload_time_iso_8601": "2007-07-05T17:34:39Z", "url": "https://files.pythonhosted.org/packages/d4/14/7b5dbe4aa469c814383bd52fe6488fa5c02b4a9fd57fc9d21f436dff5ab2/rdfadict-0.4.2-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8daad27e61ce93517dae8c93f511aa6", "sha256": "3582bbfb596f3d0afd70c5b8878d0644227889c5f1198b6788c4405e3197dd62"}, "downloads": -1, "filename": "rdfadict-0.4.2.tar.gz", "has_sig": false, "md5_digest": "a8daad27e61ce93517dae8c93f511aa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12334, "upload_time": "2007-07-05T17:34:41", "upload_time_iso_8601": "2007-07-05T17:34:41Z", "url": "https://files.pythonhosted.org/packages/9c/f8/bbc487894dbd15911b42de55be719b88059210052383d9804171daef345c/rdfadict-0.4.2.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "8161917e5242ad45d37322aa19e27e06", "sha256": "27f294efa16da7277f0bc46ad00052c932f9217a92be4a7086d3774b809e9309"}, "downloads": -1, "filename": "rdfadict-0.5-py2.5.egg", "has_sig": false, "md5_digest": "8161917e5242ad45d37322aa19e27e06", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 27303, "upload_time": "2008-08-13T15:43:05", "upload_time_iso_8601": "2008-08-13T15:43:05Z", "url": "https://files.pythonhosted.org/packages/f2/e7/c68d5ad146c3f47ec2975b8772970722efab7938ef24a7c546d1fa4a7fc7/rdfadict-0.5-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "70daf31b52f0cf59a3640a478284179e", "sha256": "9674fb4720dac8e3a6cab92bd3684b610eee0f118afa154971866a91bfc699e5"}, "downloads": -1, "filename": "rdfadict-0.5.tar.gz", "has_sig": false, "md5_digest": "70daf31b52f0cf59a3640a478284179e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13096, "upload_time": "2008-08-13T15:43:06", "upload_time_iso_8601": "2008-08-13T15:43:06Z", "url": "https://files.pythonhosted.org/packages/f3/ac/adc287a5242bf7429c457ffff79bf5b6b64dd86b0dad5b9680c06af2a13c/rdfadict-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "709084361fbbe3569b1d4b3fa6ef5d50", "sha256": "0e87010351900d0c6144112d787326bb4456dc6ac78336f126477eac386ed4ee"}, "downloads": -1, "filename": "rdfadict-0.5.1-py2.5.egg", "has_sig": false, "md5_digest": "709084361fbbe3569b1d4b3fa6ef5d50", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 28209, "upload_time": "2008-08-13T16:38:07", "upload_time_iso_8601": "2008-08-13T16:38:07Z", "url": "https://files.pythonhosted.org/packages/80/e9/89b40f1be3104e138ea933a483405178c182c0344e1bdb3dda82aceabb29/rdfadict-0.5.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed1932746bd2dde64989711e69cb1e72", "sha256": "43af840905afdee7896c13609b0fef0950dc7fbe1995e3542bde67c25fa1e6fd"}, "downloads": -1, "filename": "rdfadict-0.5.1.tar.gz", "has_sig": false, "md5_digest": "ed1932746bd2dde64989711e69cb1e72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13630, "upload_time": "2008-08-13T16:38:10", "upload_time_iso_8601": "2008-08-13T16:38:10Z", "url": "https://files.pythonhosted.org/packages/8f/df/61c207d09da64c86ef7a3941ef0697c1dd3716e8c4bb56b830135d80e126/rdfadict-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "36af6c3977fedbed7f470c35649ccddb", "sha256": "e68a3dab200dd4969add6ac3acd1a50bc55af4c34ea564030849a559190db065"}, "downloads": -1, "filename": "rdfadict-0.5.2.tar.gz", "has_sig": false, "md5_digest": "36af6c3977fedbed7f470c35649ccddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14294, "upload_time": "2008-08-14T16:55:00", "upload_time_iso_8601": "2008-08-14T16:55:00Z", "url": "https://files.pythonhosted.org/packages/89/54/44f2358380a81d2166de94d133d7ed24415c677a706ff48d94a320b2604d/rdfadict-0.5.2.tar.gz", "yanked": false}], "0.5.2.dev": [{"comment_text": "", "digests": {"md5": "bc8e6cfe7851b37c43dcd285b8ee42e3", "sha256": "11af9a7ab7fe8f9eb72a26519e7b692ffe3240eb776e9669eaa541175117d71c"}, "downloads": -1, "filename": "rdfadict-0.5.2.dev.tar.gz", "has_sig": false, "md5_digest": "bc8e6cfe7851b37c43dcd285b8ee42e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14295, "upload_time": "2008-08-14T16:54:00", "upload_time_iso_8601": "2008-08-14T16:54:00Z", "url": "https://files.pythonhosted.org/packages/6a/7f/621a58eb12b70853db1e550d8bc91dc16d7c97ac9d1510150e913d9af4e0/rdfadict-0.5.2.dev.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e95cfbeb541d389b5c9c5b8e24486d60", "sha256": "ff990d5c2d3ccb5e4c754fc7c61439773f67a52ee39a286093fdcb6e84fd0ddc"}, "downloads": -1, "filename": "rdfadict-0.6.tar.gz", "has_sig": false, "md5_digest": "e95cfbeb541d389b5c9c5b8e24486d60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18516, "upload_time": "2008-10-14T17:37:38", "upload_time_iso_8601": "2008-10-14T17:37:38Z", "url": "https://files.pythonhosted.org/packages/8b/1f/49c38d8e34a8d8a447e5b8a4fae736cdc73604ccd3ad9414edb5287478e5/rdfadict-0.6.tar.gz", "yanked": false}], "0.6.1.dev": [], "0.6.dev": [{"comment_text": "", "digests": {"md5": "d7e64142e3991e74709f2266621ff8a2", "sha256": "9abe4d86599ae2e89bdd7b253352afb803d630d341cf0ab9bb4e9ad22ed1cf2c"}, "downloads": -1, "filename": "rdfadict-0.6.dev.tar.gz", "has_sig": false, "md5_digest": "d7e64142e3991e74709f2266621ff8a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18487, "upload_time": "2008-10-14T17:31:27", "upload_time_iso_8601": "2008-10-14T17:31:27Z", "url": "https://files.pythonhosted.org/packages/ee/37/09378bfd38913053162a1221f255025ccf68ac2a5ef14c33041dbe9ca2a8/rdfadict-0.6.dev.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "51f4cf91bf153715e7089d8233ff747f", "sha256": "48a674e8f26f94c51de608f45126d9e80d3c087c44599dbf66739339202a73bd"}, "downloads": -1, "filename": "rdfadict-0.7-py2.6.egg", "has_sig": false, "md5_digest": "51f4cf91bf153715e7089d8233ff747f", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 26971, "upload_time": "2009-06-03T01:14:06", "upload_time_iso_8601": "2009-06-03T01:14:06.335679Z", "url": "https://files.pythonhosted.org/packages/75/63/06f76a27f6941422fb78369266f02e7e4adbe4698dd3ea7bf43aa5042fc0/rdfadict-0.7-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d42ad3af48798c5655374bfb987c5526", "sha256": "7cdb454e9b4ef35744d2639f52c436bd91dd209810a870caa758552578fa0ada"}, "downloads": -1, "filename": "rdfadict-0.7.tar.gz", "has_sig": false, "md5_digest": "d42ad3af48798c5655374bfb987c5526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18892, "upload_time": "2009-06-03T01:14:05", "upload_time_iso_8601": "2009-06-03T01:14:05.161989Z", "url": "https://files.pythonhosted.org/packages/31/77/d5e3303e791b26251e254ceaa16754049f422d09b2bf40deb07ec665c48a/rdfadict-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "7b9922348d0d58c1f81f01a1850daa17", "sha256": "2abe7614c28dea2fbf83501601011018d8604f281a2a5c602b8df9aa41629ca3"}, "downloads": -1, "filename": "rdfadict-0.7.1-py2.5.egg", "has_sig": false, "md5_digest": "7b9922348d0d58c1f81f01a1850daa17", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 22990, "upload_time": "2009-07-20T20:57:33", "upload_time_iso_8601": "2009-07-20T20:57:33.068389Z", "url": "https://files.pythonhosted.org/packages/da/55/781e890994516d5edbed984e2c231a8a9da9598e5ac81060f099556fd503/rdfadict-0.7.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "27f3ff26b4147da573804aa027c700dd", "sha256": "a5d9ef78a7cdd29f6aa6bc1a1736836c7af1c7d31bed55932b813941ae5ffbfb"}, "downloads": -1, "filename": "rdfadict-0.7.1-py2.6.egg", "has_sig": false, "md5_digest": "27f3ff26b4147da573804aa027c700dd", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 22989, "upload_time": "2009-07-20T20:57:38", "upload_time_iso_8601": "2009-07-20T20:57:38.926548Z", "url": "https://files.pythonhosted.org/packages/16/4e/859c9c08e2f26928d87af6c8fe94c87f8019eedb3fca1bee5e6b3b295190/rdfadict-0.7.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "248d2da07fb7c816876d282923fb7803", "sha256": "299bf090db76c413d6995b871f3b7c0592586584d231e9922e2808a3f646cab3"}, "downloads": -1, "filename": "rdfadict-0.7.1.tar.gz", "has_sig": false, "md5_digest": "248d2da07fb7c816876d282923fb7803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15923, "upload_time": "2009-07-20T20:56:37", "upload_time_iso_8601": "2009-07-20T20:56:37.913702Z", "url": "https://files.pythonhosted.org/packages/c6/48/2048dc084b0e8167a5397b605d29e7738804ac268b7b2a054f67684974f6/rdfadict-0.7.1.tar.gz", "yanked": false}], "0.7.1.1": [{"comment_text": "", "digests": {"md5": "45222ab469fd8e3ce63b3fa389e1cbaf", "sha256": "dce79ad51d2f7f3dd47f7792c50d817eb21a5867f7840a469390b6dfa55b3272"}, "downloads": -1, "filename": "rdfadict-0.7.1.1.tar.gz", "has_sig": false, "md5_digest": "45222ab469fd8e3ce63b3fa389e1cbaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10275, "upload_time": "2010-03-17T19:38:40", "upload_time_iso_8601": "2010-03-17T19:38:40.089553Z", "url": "https://files.pythonhosted.org/packages/cc/0a/e85d629f6319db1400f09d0630ced458a1af4f7e6a23f4d32f76297e55d6/rdfadict-0.7.1.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "7506a707a618940bf00bc4e8dc7ec9cf", "sha256": "175ff69540f7a728e72b977026fe3eef3f7ea8b9c1d9b640fe2ec51763f25607"}, "downloads": -1, "filename": "rdfadict-0.7.2.tar.gz", "has_sig": false, "md5_digest": "7506a707a618940bf00bc4e8dc7ec9cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14889, "upload_time": "2010-04-29T20:55:04", "upload_time_iso_8601": "2010-04-29T20:55:04.810712Z", "url": "https://files.pythonhosted.org/packages/36/2b/ac6804f8d3a1900a17902261462bc255886efc65bab18ebc8bcb237911f4/rdfadict-0.7.2.tar.gz", "yanked": false}], "0.7.3.dev": [], "0.7.4": [{"comment_text": "", "digests": {"md5": "c6a1e4e86847be9414a735d0f044134a", "sha256": "a797143aac0ed58a812b895deb784dbf381ad4e1c1f707ab265b7039adb70394"}, "downloads": -1, "filename": "rdfadict-0.7.4.tar.gz", "has_sig": false, "md5_digest": "c6a1e4e86847be9414a735d0f044134a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13318, "upload_time": "2011-01-27T20:25:55", "upload_time_iso_8601": "2011-01-27T20:25:55.695947Z", "url": "https://files.pythonhosted.org/packages/f6/42/99fe1143d3ec68cb68cdbbd1f1feb167a24b3f4c9c2e87db5ed3882f93c9/rdfadict-0.7.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6a1e4e86847be9414a735d0f044134a", "sha256": "a797143aac0ed58a812b895deb784dbf381ad4e1c1f707ab265b7039adb70394"}, "downloads": -1, "filename": "rdfadict-0.7.4.tar.gz", "has_sig": false, "md5_digest": "c6a1e4e86847be9414a735d0f044134a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13318, "upload_time": "2011-01-27T20:25:55", "upload_time_iso_8601": "2011-01-27T20:25:55.695947Z", "url": "https://files.pythonhosted.org/packages/f6/42/99fe1143d3ec68cb68cdbbd1f1feb167a24b3f4c9c2e87db5ed3882f93c9/rdfadict-0.7.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:39 2020"}