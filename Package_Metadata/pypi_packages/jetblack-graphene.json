{"info": {"author": "Syrus Akbary", "author_email": "me@syrusakbary.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "Forked version of Graphene\n--------------------------\n\nThis is a forked version of graphene with support for subscriptions.\n\nFor executing a subscription, you can directly call the ``subscribe`` method on it.\nThis method is async and must be awaited.\n\n.. code:: python\n\n    import asyncio\n    from datetime import datetime\n    from graphene import ObjectType, String, Schema, Field\n\n    # All schema require a query.\n    class Query(ObjectType):\n        hello = String()\n\n        def resolve_hello(root, info):\n            return 'Hello, world!'\n\n    class Subscription(ObjectType):\n        time_of_day = Field(String)\n\n        async def subscribe_time_of_day(root, info):\n            while True:\n                yield { 'time_of_day': datetime.now().isoformat()}\n                await asyncio.sleep(1)\n\n    SCHEMA = Schema(query=Query, subscription=Subscription)\n\n    async def main(schema):\n\n        subscription = 'subscription { timeOfDay }'\n        result = await schema.subscribe(subscription)\n        async for item in result:\n            print(item.data['timeOfDay'])\n\n    asyncio.run(main(SCHEMA))\n\nThe ``result`` is an async iterator which yields items in the same manner as a query.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/graphql-python/graphene", "keywords": "api graphql protocol rest relay graphene", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jetblack-graphene", "package_url": "https://pypi.org/project/jetblack-graphene/", "platform": "", "project_url": "https://pypi.org/project/jetblack-graphene/", "project_urls": {"Homepage": "https://github.com/graphql-python/graphene"}, "release_url": "https://pypi.org/project/jetblack-graphene/3.0b0/", "requires_dist": ["graphql-core (<4,>=3.1.0b1)", "graphql-relay (<4,>=3.0)", "aniso8601 (<9,>=8)", "unidecode (<2,>=1.1.1)", "black (==19.10b0) ; extra == 'dev'", "flake8 (<4,>=3.7) ; extra == 'dev'", "pytest (<6,>=5.3) ; extra == 'dev'", "pytest-benchmark (<4,>=3.2) ; extra == 'dev'", "pytest-cov (<3,>=2.8) ; extra == 'dev'", "pytest-mock (<3,>=2) ; extra == 'dev'", "pytest-asyncio (<2,>=0.10) ; extra == 'dev'", "snapshottest (<1,>=0.5) ; extra == 'dev'", "coveralls (<2,>=1.11) ; extra == 'dev'", "promise (<3,>=2.3) ; extra == 'dev'", "mock (<5,>=4.0) ; extra == 'dev'", "pytz (==2019.3) ; extra == 'dev'", "iso8601 (<2,>=0.1) ; extra == 'dev'", "pytest (<6,>=5.3) ; extra == 'test'", "pytest-benchmark (<4,>=3.2) ; extra == 'test'", "pytest-cov (<3,>=2.8) ; extra == 'test'", "pytest-mock (<3,>=2) ; extra == 'test'", "pytest-asyncio (<2,>=0.10) ; extra == 'test'", "snapshottest (<1,>=0.5) ; extra == 'test'", "coveralls (<2,>=1.11) ; extra == 'test'", "promise (<3,>=2.3) ; extra == 'test'", "mock (<5,>=4.0) ; extra == 'test'", "pytz (==2019.3) ; extra == 'test'", "iso8601 (<2,>=0.1) ; extra == 'test'"], "requires_python": "", "summary": "GraphQL Framework for Python", "version": "3.0b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a forked version of graphene with support for subscriptions.</p>\n<p>For executing a subscription, you can directly call the <tt>subscribe</tt> method on it.\nThis method is async and must be awaited.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectType</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"c1\"># All schema require a query.</span>\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_hello</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'Hello, world!'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscription</span><span class=\"p\">(</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">time_of_day</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">subscribe_time_of_day</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"p\">{</span> <span class=\"s1\">'time_of_day'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()}</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">SCHEMA</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">subscription</span><span class=\"o\">=</span><span class=\"n\">Subscription</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">):</span>\n\n    <span class=\"n\">subscription</span> <span class=\"o\">=</span> <span class=\"s1\">'subscription { timeOfDay }'</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">subscription</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'timeOfDay'</span><span class=\"p\">])</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">SCHEMA</span><span class=\"p\">))</span>\n</pre>\n<p>The <tt>result</tt> is an async iterator which yields items in the same manner as a query.</p>\n\n          </div>"}, "last_serial": 6754192, "releases": {"3.0b0": [{"comment_text": "", "digests": {"md5": "4ce267bc1fddb168a00c7da9132b3845", "sha256": "ba96d7ce5855ac969a356a534c8898f1dddcaedda920ef381f1ac6d6899a6270"}, "downloads": -1, "filename": "jetblack_graphene-3.0b0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ce267bc1fddb168a00c7da9132b3845", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 96089, "upload_time": "2020-03-05T09:44:09", "upload_time_iso_8601": "2020-03-05T09:44:09.975751Z", "url": "https://files.pythonhosted.org/packages/fb/74/142edb442cb9b00fe4d7abe7ae55d1dfcccd0e39efde8969cab51565f8d8/jetblack_graphene-3.0b0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "065dbf712ed2c0ee08a3e960e38f2a9f", "sha256": "7bc750ee3c61be4182af8d979e27d4e41aaa9626e9edeb79fdcd83a8c19e6f5c"}, "downloads": -1, "filename": "jetblack-graphene-3.0b0.tar.gz", "has_sig": false, "md5_digest": "065dbf712ed2c0ee08a3e960e38f2a9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31483, "upload_time": "2020-03-05T09:44:13", "upload_time_iso_8601": "2020-03-05T09:44:13.021443Z", "url": "https://files.pythonhosted.org/packages/4d/97/8feb7ac792639ddbc8e9fb898525f5c79ca2b9621a4a433ee576b4b7fe75/jetblack-graphene-3.0b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ce267bc1fddb168a00c7da9132b3845", "sha256": "ba96d7ce5855ac969a356a534c8898f1dddcaedda920ef381f1ac6d6899a6270"}, "downloads": -1, "filename": "jetblack_graphene-3.0b0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ce267bc1fddb168a00c7da9132b3845", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 96089, "upload_time": "2020-03-05T09:44:09", "upload_time_iso_8601": "2020-03-05T09:44:09.975751Z", "url": "https://files.pythonhosted.org/packages/fb/74/142edb442cb9b00fe4d7abe7ae55d1dfcccd0e39efde8969cab51565f8d8/jetblack_graphene-3.0b0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "065dbf712ed2c0ee08a3e960e38f2a9f", "sha256": "7bc750ee3c61be4182af8d979e27d4e41aaa9626e9edeb79fdcd83a8c19e6f5c"}, "downloads": -1, "filename": "jetblack-graphene-3.0b0.tar.gz", "has_sig": false, "md5_digest": "065dbf712ed2c0ee08a3e960e38f2a9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31483, "upload_time": "2020-03-05T09:44:13", "upload_time_iso_8601": "2020-03-05T09:44:13.021443Z", "url": "https://files.pythonhosted.org/packages/4d/97/8feb7ac792639ddbc8e9fb898525f5c79ca2b9621a4a433ee576b4b7fe75/jetblack-graphene-3.0b0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:49 2020"}