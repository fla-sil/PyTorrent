{"info": {"author": "Pablo Brasero Moreno", "author_email": "pablo@pablobm.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Education", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Security"], "description": "=======\ncrackie\n=======\n\nA simple, silly library to generate combinations.\n\nI wrote this when I forgot part of a password, and decided to try run ~500,000\ncombinations on the parts I remembered. It worked! Also I decided to publish it\nbecause I had never created a Python package before, so this would learn me\nsomething.\n\n\nUsage\n=====\n\nSay you have forgotten a password, but remember the basics of it. For example,\nyou remember that it was made up of two words, with some characters altered.\nThe words could be \"verd\" and \"uberous\", and the alterations could be things\nlike random capital letters, numbers instead of letters, etc. Something that\ncould be modeled like this::\n\n  variations = [\n      {\"V\", \"v\"},\n      {\"E\", \"e\", \"3\"},\n      {\"R\", \"r\"},\n      {\"D\", \"d\"},\n      {\"\", \"-\", \"_\", \" \"},\n      {\"U\", \"u\"},\n      {\"B\", \"b\", \"8\"},\n      {\"E\", \"e\", \"3\"},\n      {\"R\", \"r\"},\n      {\"O\", \"o\", \"0\"},\n      {\"U\", \"u\"},\n      {\"S\", \"s\", \"5\", \"$\"},\n      {\"\", \"!\", \"1\"},\n  ]\n\nThen you can use this library to generate all possible combinations, such as\n\"VERDUBEROUS\", \"V3rd_ubEr0U5\" or \"v3rd ub3r0U5!\".\n\nYou'll need a way to test the passwords. For example, if it's a GnuPG passphrase\nthat you have forgotten, you can use this code to test a single password::\n\n  def try_password(password):\n      p = Popen(\n          ['gpg', '--pinentry-mode', 'loopback', '--decrypt', '--passphrase', password],\n          stdout=PIPE,\n          stdin=PIPE\n      )\n      p.communicate(input)\n      p.returncode == 0\n\nAnd then use the generator ``each_possible_combination`` to do exactly that\n(testing each possible combination). Like this::\n\n  from crackie import each_possible_combination\n\n  for candidate in each_possible_combination(variations):\n      candidate_string = ''.join(candidate)\n      if try_password(candidate_string):\n          print(\"Found the password!\", candidate_string);\n          break", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.sr.ht/~pablobm/crackie", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "crackie", "package_url": "https://pypi.org/project/crackie/", "platform": "any", "project_url": "https://pypi.org/project/crackie/", "project_urls": {"Homepage": "https://git.sr.ht/~pablobm/crackie"}, "release_url": "https://pypi.org/project/crackie/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A simple, silly library to generate combinations.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple, silly library to generate combinations.</p>\n<p>I wrote this when I forgot part of a password, and decided to try run ~500,000\ncombinations on the parts I remembered. It worked! Also I decided to publish it\nbecause I had never created a Python package before, so this would learn me\nsomething.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Say you have forgotten a password, but remember the basics of it. For example,\nyou remember that it was made up of two words, with some characters altered.\nThe words could be \u201cverd\u201d and \u201cuberous\u201d, and the alterations could be things\nlike random capital letters, numbers instead of letters, etc. Something that\ncould be modeled like this:</p>\n<pre>variations = [\n    {\"V\", \"v\"},\n    {\"E\", \"e\", \"3\"},\n    {\"R\", \"r\"},\n    {\"D\", \"d\"},\n    {\"\", \"-\", \"_\", \" \"},\n    {\"U\", \"u\"},\n    {\"B\", \"b\", \"8\"},\n    {\"E\", \"e\", \"3\"},\n    {\"R\", \"r\"},\n    {\"O\", \"o\", \"0\"},\n    {\"U\", \"u\"},\n    {\"S\", \"s\", \"5\", \"$\"},\n    {\"\", \"!\", \"1\"},\n]\n</pre>\n<p>Then you can use this library to generate all possible combinations, such as\n\u201cVERDUBEROUS\u201d, \u201cV3rd_ubEr0U5\u201d or \u201cv3rd ub3r0U5!\u201d.</p>\n<p>You\u2019ll need a way to test the passwords. For example, if it\u2019s a GnuPG passphrase\nthat you have forgotten, you can use this code to test a single password:</p>\n<pre>def try_password(password):\n    p = Popen(\n        ['gpg', '--pinentry-mode', 'loopback', '--decrypt', '--passphrase', password],\n        stdout=PIPE,\n        stdin=PIPE\n    )\n    p.communicate(input)\n    p.returncode == 0\n</pre>\n<p>And then use the generator <tt>each_possible_combination</tt> to do exactly that\n(testing each possible combination). Like this:</p>\n<pre>from crackie import each_possible_combination\n\nfor candidate in each_possible_combination(variations):\n    candidate_string = ''.join(candidate)\n    if try_password(candidate_string):\n        print(\"Found the password!\", candidate_string);\n        break\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6187503, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f951763e7d5e7e3bfac999f49921e694", "sha256": "3bf9b090d643f2f9169541efaaaceef57f41f430da10fee2e52fe4a1fdacbd1f"}, "downloads": -1, "filename": "crackie-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f951763e7d5e7e3bfac999f49921e694", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12608, "upload_time": "2019-11-23T18:47:03", "upload_time_iso_8601": "2019-11-23T18:47:03.715913Z", "url": "https://files.pythonhosted.org/packages/56/b8/e2a15e644a26966a563fcc74ea25b82d77cc74f02069fad18360b48284ad/crackie-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f951763e7d5e7e3bfac999f49921e694", "sha256": "3bf9b090d643f2f9169541efaaaceef57f41f430da10fee2e52fe4a1fdacbd1f"}, "downloads": -1, "filename": "crackie-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f951763e7d5e7e3bfac999f49921e694", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12608, "upload_time": "2019-11-23T18:47:03", "upload_time_iso_8601": "2019-11-23T18:47:03.715913Z", "url": "https://files.pythonhosted.org/packages/56/b8/e2a15e644a26966a563fcc74ea25b82d77cc74f02069fad18360b48284ad/crackie-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:30 2020"}