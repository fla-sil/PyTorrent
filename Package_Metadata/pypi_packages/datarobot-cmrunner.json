{"info": {"author": "DataRobot", "author_email": "info@datarobot.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# README\n\nCustom Model Runner\n\n## About\nThe DataRobot Custom Model Runner is a tool that allows you to locally run Python, R, and Java custom models.\nIt can be used to verify that a custom model can run and make predictions before you upload it to DataRobot.\nHowever, this testing is only for development purposes. DataRobot recommends that any custom model you wish to deploy should also be tested in the Custom Model Workshop after uploading it.  \nThe DataRobot Custom Model Runner can also:\n- run performance and memory usage testing for models,\n- run models in a docker container.\n\n## Installation\n\n#### Prerequisites:\nPython models:\n- Python 3 is recommended.\n\nJava models:\n- JRE >= 11.\n\nR models:\n- Python >= 3.6.\n- R framework installed.\n- **cmrun** uses `rpy2` package (by default the latest version is installed) to run R.\nYou may need to adjust **rpy2** and **pandas** versions for compatibility.\n\nInstall cmrunner with Python/Java models support:  \n```pip install datarobot-cmrunner```\n\nInstall cmrunner with R support:  \n```pip install datarobot-cmrunner[R]```\n\n### Autocompletion\nCMRunner supports autocompletion based on the `argcomplete` package. Additional configuration is required to use it:\n- run `activate-global-python-argcomplete --user`; this should create a file: `~/.bash_completion.d/python-argcomplete`,\n- source created file `source ~/.bash_completion.d/python-argcomplete` in your `~/.bashrc` or another profile-related file according to your system.\n\nIf global completion is not completing your script, bash may have registered a default completion function:\n- run `complete | grep cmrun`; if there is an output `complete -F _minimal <some_line_containing_cmrun>` do\n- `complete -r <some_line_containing_cmrun>`\n\nFor more information and troubleshooting visit the [argcomplete](https://pypi.org/project/argcomplete/) information page.\n\n## Content of the Model Folder\nThe model folder should contain your model artifacts and any other code needed for cmrun to run your model.\n`cmrun` has built in support for the following libraries; if your model is based on one of these libraries, `cmrun` expects your\nmodel artifact to have a matching file extension.\n\n### Python\n| Library | File Extension | Example |\n| --- | --- | --- |\n| scikit-learn | *.pkl | sklean-regressor.pkl |\n| xgboost | *.pkl | xgboost-regressor.pkl |\n| PyTorch | *.pth | torch-regressor.pth |\n| keras | *.h5 | keras-regressor.h5 |\n\n### R\n| Library | File Extension | Example |\n| --- | --- | --- |\n| caret | *.rds | brnn-regressor.rds |\n\nThis tool makes the following assumption about your serialized model:\n- The data sent to custom model can be used to make predictions without\nadditional pre-processing\n- Regression models return a single floating point per row of prediction data\n- Binary classification models return two floating point values that sum to 1.0 per row of prediction data\n  - The first value is the positive class probability, the second is the negative class probability\n- There is a single pkl/pth/h5 file present\n- Your model uses one of the above frameworks\n\n### Custom hooks for Python and R models\nIf the assumptions mentioned above are incorrect for your model, `cmrun` supports several hooks for custom code.  If needed,\ninclude any necessary hooks in a file called `custom.py` for python models or `custom.R` for R models alongside your model artifacts in your model folder:\n\n> _**NOTE:**_ The following hook signatures are written with Python 3 type annotations. The Python types match the following R types\n> - DataFrame = data.frame\n> - None = NULL\n> - str = character\n> - Any = R Object (the deserialized model)\n> - *args, **kwargs = ... (these aren't types, they're just placeholders for additional parameter)\n\n- `init() -> None`\n  - Executed once before loading your model\n- `load_model(input_dir: str) -> Any`\n  - `input_dir` is the directory to load serialized models from\n  - If used, this hook must return a non-None value\n  - Can be used to load supported models if your model has multiple artifacts, or for loading models that\n  `cmrun` does not natively support\n- `transform(data: DataFrame, model: Any) -> DataFrame`\n  - `data` is the dataframe given to `cmrun` to make predictions on\n  - `model` is the deserialized model loaded by `cmrun` or by `load_model`, if supplied\n  - Intended to apply transformations to the prediction data before making predictions. This is most useful\n  if `cmrun` supports the model's library, but your model requires additional data processing before it can make predictions\n- `score(data: DataFrame, model: Any, positive_class_label: Optional[str], negative_class_label: Optional[str], *args: List[Any], **kwargs: Dict[str, Any]) -> DataFrame`\n  - `data` is the dataframe to make predictions against. If `transform` is supplied, `data` will be the transformed data.\n  - `model` is the deserialized model loaded by `cmrun` or by `load_model`, if supplied\n  - `positive_class_label` is the positive class label for a binary classification model, or `None` for regression\n  - `negative_class_label` is the negative class label for a binary classification model, or `None` for regression\n  - This method should return predictions as a dataframe with the following format:\n    - Binary Classification: must have columns for each class label with floating- point class probabilities as values. Each row\n    should sum to 1.0\n    - Regression: must have a single column called `Predictions` with numerical values\n  - This hook is only needed if you would like to use `cmrun` with a framework not natively supported by the tool.\n- `post_process(predictions: DataFrame, model: Any) -> DataFrame`\n  - `predictions` is the dataframe of predictions produced by `cmrun` or by the `predict` hook, if supplied\n  - `model` is the deserialized model loaded by `cmrun` or by `load_model`, if supplied\n  - This method should return predictions as a dataframe with the following format:\n    - Binary Classification: must have columns for each class label with floating- point class probabilities as values. Each row\n    should sum to 1.0\n    - Regression: must have a single column called `Predictions` with numerical values\n  - This method is only needed if your model's output does not match the above expectations\n\n### Java\n| Library | File Extension | Example |\n| --- | --- | --- |\n| datarobot-prediction | *.jar | dr-regressor.jar |\n\n**cmrunner** currently supports models with DataRobot-generated Scoring Code or models that implement the either the `IClassificationPredictor`\nor `IRegressionPredictor` interface from the [datarobot-prediction](https://mvnrepository.com/artifact/com.datarobot/datarobot-prediction).\nThe model artifact must have a **jar** extension.\n\n#### Additional params\nDefine CMRUNNER_JAVA_XMX environment variable to set JVM maximum heap memory size (-Xmx java parameter), e.g:\n```CMRUNNER_JAVA_XMX=512m```\n\n\n## Usage\nHelp:  \n```cmrun -help```\n\n### Batch scoring mode\n\n#### Run a custom binary classification model   \nMake batch predictions with a custom binary classification model. Optionally, specify an output file. Otherwise, predictions are returned to the command line:  \n```cmrun score -m ~/custom_model/ --input 10k.csv  --positive-class-label yes --negative-class-label no --output 10k-results.csv --verbose```\n\n#### Run a custom regression model\nMake batch predictions with a custom regression model:  \n```cmrun score -m ~/custom_model/ --input fast-iron.csv --verbose```\n\n### Testing model performance\nYou can test how the model performs and get its latency times and memory usage.  \nIn this mode, the model is started with a prediction server. Different request combinations are submitted to it.\nAfter it completes, it returns a report.  \n```cmrun perf-test -m ~/custom_model/ --input 10k.csv --positive-class-label yes --negative-class-label no```  \nReport example:\n```\nsamples   iters    min     avg     max    used (MB)   total (MB)\n============================================================================\nTest case         1     100   0.028   0.030   0.054     306.934    31442.840\nTest case        10     100   0.030   0.034   0.069     307.375    31442.840\nTest case       100      10   0.036   0.038   0.045     307.512    31442.840\nTest case      1000      10   0.042   0.047   0.058     308.258    31442.840\nTest case    100000       1   0.674   0.674   0.674     330.902    31442.840\n50MB file    838861       1   5.206   5.206   5.206     453.121    31442.840\n```\nFor more feature options see:\n```cmrun perf-test --help```\n\n### Prediction server mode\nThe CMRunner can run as a prediction server. To do so, provide a server address argument:  \n```cmrun server -m ~/custom model --address localhost:6789```\n\nThe CM Runner prediction server provides the following routes. You may provide the environment variable URL_PREFIX. Note that URLs must end with /.\n\n* A GET URL_PREFIX/ route, which checks if the server is alive.  \nExample: GET http://localhost:6789/\n\n* A POST URL_PREFIX/shutdown/ route, which shuts the server down.  \nExample: POST http://localhost:6789/shutdown/\n\n* A POST URL_PREFIX/predict/ route, which returns predictions on data.  \nExample: POST http://localhost:6789/predict/  \nFor this /predict/ route, provide inference data (for the model to make predictions) as form data with a <key:value> pair, where:  \nkey = X  \nvalue = filename of the CSV that contains the inference data\n\n### Running inside a docker container\nIn every mode **cmrunner** can be run inside a docker container by providing an option ```--docker <image_name>```.\nThe container should implement an environment required to run the model.\n**cmrunner** must be installed as a part of this environment.  \nExample on how to run inside of container:  \n```cmrun score -m ~/custom_model/ --input dataset.csv --docker <container_name>```  \n```cmrun perf-test  -m ~/custom_model/ --input dataset.csv --docker <container_name>```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://datarobot.com", "keywords": "", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "datarobot-cmrunner", "package_url": "https://pypi.org/project/datarobot-cmrunner/", "platform": "", "project_url": "https://pypi.org/project/datarobot-cmrunner/", "project_urls": {"Homepage": "http://datarobot.com"}, "release_url": "https://pypi.org/project/datarobot-cmrunner/1.0.17.post1/", "requires_dist": ["flask", "numpy", "pandas", "requests", "jinja2", "progress", "texttable", "argcomplete (==1.11.1)", "mlpiper (==2.2.0)", "rpy2 ; (python_version >= \"3.6\") and extra == 'r'", "scipy ; extra == 'keras'", "numpy ; extra == 'keras'", "h5py ; extra == 'keras'", "keras ; extra == 'keras'", "tensorflow ; extra == 'keras'", "scikit-learn ; extra == 'scikit-learn'", "scipy ; extra == 'scikit-learn'", "numpy ; extra == 'scikit-learn'", "torch ; extra == 'torch'", "numpy ; extra == 'torch'", "scikit-learn ; extra == 'torch'", "scipy ; extra == 'torch'", "scipy ; extra == 'xgboost'", "numpy ; extra == 'xgboost'", "xgboost ; extra == 'xgboost'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Custom Model Runner", "version": "1.0.17.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>README</h1>\n<p>Custom Model Runner</p>\n<h2>About</h2>\n<p>The DataRobot Custom Model Runner is a tool that allows you to locally run Python, R, and Java custom models.\nIt can be used to verify that a custom model can run and make predictions before you upload it to DataRobot.\nHowever, this testing is only for development purposes. DataRobot recommends that any custom model you wish to deploy should also be tested in the Custom Model Workshop after uploading it.<br>\nThe DataRobot Custom Model Runner can also:</p>\n<ul>\n<li>run performance and memory usage testing for models,</li>\n<li>run models in a docker container.</li>\n</ul>\n<h2>Installation</h2>\n<h4>Prerequisites:</h4>\n<p>Python models:</p>\n<ul>\n<li>Python 3 is recommended.</li>\n</ul>\n<p>Java models:</p>\n<ul>\n<li>JRE &gt;= 11.</li>\n</ul>\n<p>R models:</p>\n<ul>\n<li>Python &gt;= 3.6.</li>\n<li>R framework installed.</li>\n<li><strong>cmrun</strong> uses <code>rpy2</code> package (by default the latest version is installed) to run R.\nYou may need to adjust <strong>rpy2</strong> and <strong>pandas</strong> versions for compatibility.</li>\n</ul>\n<p>Install cmrunner with Python/Java models support:<br>\n<code>pip install datarobot-cmrunner</code></p>\n<p>Install cmrunner with R support:<br>\n<code>pip install datarobot-cmrunner[R]</code></p>\n<h3>Autocompletion</h3>\n<p>CMRunner supports autocompletion based on the <code>argcomplete</code> package. Additional configuration is required to use it:</p>\n<ul>\n<li>run <code>activate-global-python-argcomplete --user</code>; this should create a file: <code>~/.bash_completion.d/python-argcomplete</code>,</li>\n<li>source created file <code>source ~/.bash_completion.d/python-argcomplete</code> in your <code>~/.bashrc</code> or another profile-related file according to your system.</li>\n</ul>\n<p>If global completion is not completing your script, bash may have registered a default completion function:</p>\n<ul>\n<li>run <code>complete | grep cmrun</code>; if there is an output <code>complete -F _minimal &lt;some_line_containing_cmrun&gt;</code> do</li>\n<li><code>complete -r &lt;some_line_containing_cmrun&gt;</code></li>\n</ul>\n<p>For more information and troubleshooting visit the <a href=\"https://pypi.org/project/argcomplete/\" rel=\"nofollow\">argcomplete</a> information page.</p>\n<h2>Content of the Model Folder</h2>\n<p>The model folder should contain your model artifacts and any other code needed for cmrun to run your model.\n<code>cmrun</code> has built in support for the following libraries; if your model is based on one of these libraries, <code>cmrun</code> expects your\nmodel artifact to have a matching file extension.</p>\n<h3>Python</h3>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th>File Extension</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scikit-learn</td>\n<td>*.pkl</td>\n<td>sklean-regressor.pkl</td>\n</tr>\n<tr>\n<td>xgboost</td>\n<td>*.pkl</td>\n<td>xgboost-regressor.pkl</td>\n</tr>\n<tr>\n<td>PyTorch</td>\n<td>*.pth</td>\n<td>torch-regressor.pth</td>\n</tr>\n<tr>\n<td>keras</td>\n<td>*.h5</td>\n<td>keras-regressor.h5</td>\n</tr></tbody></table>\n<h3>R</h3>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th>File Extension</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>caret</td>\n<td>*.rds</td>\n<td>brnn-regressor.rds</td>\n</tr></tbody></table>\n<p>This tool makes the following assumption about your serialized model:</p>\n<ul>\n<li>The data sent to custom model can be used to make predictions without\nadditional pre-processing</li>\n<li>Regression models return a single floating point per row of prediction data</li>\n<li>Binary classification models return two floating point values that sum to 1.0 per row of prediction data\n<ul>\n<li>The first value is the positive class probability, the second is the negative class probability</li>\n</ul>\n</li>\n<li>There is a single pkl/pth/h5 file present</li>\n<li>Your model uses one of the above frameworks</li>\n</ul>\n<h3>Custom hooks for Python and R models</h3>\n<p>If the assumptions mentioned above are incorrect for your model, <code>cmrun</code> supports several hooks for custom code.  If needed,\ninclude any necessary hooks in a file called <code>custom.py</code> for python models or <code>custom.R</code> for R models alongside your model artifacts in your model folder:</p>\n<blockquote>\n<p><em><strong>NOTE:</strong></em> The following hook signatures are written with Python 3 type annotations. The Python types match the following R types</p>\n<ul>\n<li>DataFrame = data.frame</li>\n<li>None = NULL</li>\n<li>str = character</li>\n<li>Any = R Object (the deserialized model)</li>\n<li>*args, **kwargs = ... (these aren't types, they're just placeholders for additional parameter)</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>init() -&gt; None</code>\n<ul>\n<li>Executed once before loading your model</li>\n</ul>\n</li>\n<li><code>load_model(input_dir: str) -&gt; Any</code>\n<ul>\n<li><code>input_dir</code> is the directory to load serialized models from</li>\n<li>If used, this hook must return a non-None value</li>\n<li>Can be used to load supported models if your model has multiple artifacts, or for loading models that\n<code>cmrun</code> does not natively support</li>\n</ul>\n</li>\n<li><code>transform(data: DataFrame, model: Any) -&gt; DataFrame</code>\n<ul>\n<li><code>data</code> is the dataframe given to <code>cmrun</code> to make predictions on</li>\n<li><code>model</code> is the deserialized model loaded by <code>cmrun</code> or by <code>load_model</code>, if supplied</li>\n<li>Intended to apply transformations to the prediction data before making predictions. This is most useful\nif <code>cmrun</code> supports the model's library, but your model requires additional data processing before it can make predictions</li>\n</ul>\n</li>\n<li><code>score(data: DataFrame, model: Any, positive_class_label: Optional[str], negative_class_label: Optional[str], *args: List[Any], **kwargs: Dict[str, Any]) -&gt; DataFrame</code>\n<ul>\n<li><code>data</code> is the dataframe to make predictions against. If <code>transform</code> is supplied, <code>data</code> will be the transformed data.</li>\n<li><code>model</code> is the deserialized model loaded by <code>cmrun</code> or by <code>load_model</code>, if supplied</li>\n<li><code>positive_class_label</code> is the positive class label for a binary classification model, or <code>None</code> for regression</li>\n<li><code>negative_class_label</code> is the negative class label for a binary classification model, or <code>None</code> for regression</li>\n<li>This method should return predictions as a dataframe with the following format:\n<ul>\n<li>Binary Classification: must have columns for each class label with floating- point class probabilities as values. Each row\nshould sum to 1.0</li>\n<li>Regression: must have a single column called <code>Predictions</code> with numerical values</li>\n</ul>\n</li>\n<li>This hook is only needed if you would like to use <code>cmrun</code> with a framework not natively supported by the tool.</li>\n</ul>\n</li>\n<li><code>post_process(predictions: DataFrame, model: Any) -&gt; DataFrame</code>\n<ul>\n<li><code>predictions</code> is the dataframe of predictions produced by <code>cmrun</code> or by the <code>predict</code> hook, if supplied</li>\n<li><code>model</code> is the deserialized model loaded by <code>cmrun</code> or by <code>load_model</code>, if supplied</li>\n<li>This method should return predictions as a dataframe with the following format:\n<ul>\n<li>Binary Classification: must have columns for each class label with floating- point class probabilities as values. Each row\nshould sum to 1.0</li>\n<li>Regression: must have a single column called <code>Predictions</code> with numerical values</li>\n</ul>\n</li>\n<li>This method is only needed if your model's output does not match the above expectations</li>\n</ul>\n</li>\n</ul>\n<h3>Java</h3>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th>File Extension</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>datarobot-prediction</td>\n<td>*.jar</td>\n<td>dr-regressor.jar</td>\n</tr></tbody></table>\n<p><strong>cmrunner</strong> currently supports models with DataRobot-generated Scoring Code or models that implement the either the <code>IClassificationPredictor</code>\nor <code>IRegressionPredictor</code> interface from the <a href=\"https://mvnrepository.com/artifact/com.datarobot/datarobot-prediction\" rel=\"nofollow\">datarobot-prediction</a>.\nThe model artifact must have a <strong>jar</strong> extension.</p>\n<h4>Additional params</h4>\n<p>Define CMRUNNER_JAVA_XMX environment variable to set JVM maximum heap memory size (-Xmx java parameter), e.g:\n<code>CMRUNNER_JAVA_XMX=512m</code></p>\n<h2>Usage</h2>\n<p>Help:<br>\n<code>cmrun -help</code></p>\n<h3>Batch scoring mode</h3>\n<h4>Run a custom binary classification model</h4>\n<p>Make batch predictions with a custom binary classification model. Optionally, specify an output file. Otherwise, predictions are returned to the command line:<br>\n<code>cmrun score -m ~/custom_model/ --input 10k.csv --positive-class-label yes --negative-class-label no --output 10k-results.csv --verbose</code></p>\n<h4>Run a custom regression model</h4>\n<p>Make batch predictions with a custom regression model:<br>\n<code>cmrun score -m ~/custom_model/ --input fast-iron.csv --verbose</code></p>\n<h3>Testing model performance</h3>\n<p>You can test how the model performs and get its latency times and memory usage.<br>\nIn this mode, the model is started with a prediction server. Different request combinations are submitted to it.\nAfter it completes, it returns a report.<br>\n<code>cmrun perf-test -m ~/custom_model/ --input 10k.csv --positive-class-label yes --negative-class-label no</code><br>\nReport example:</p>\n<pre><code>samples   iters    min     avg     max    used (MB)   total (MB)\n============================================================================\nTest case         1     100   0.028   0.030   0.054     306.934    31442.840\nTest case        10     100   0.030   0.034   0.069     307.375    31442.840\nTest case       100      10   0.036   0.038   0.045     307.512    31442.840\nTest case      1000      10   0.042   0.047   0.058     308.258    31442.840\nTest case    100000       1   0.674   0.674   0.674     330.902    31442.840\n50MB file    838861       1   5.206   5.206   5.206     453.121    31442.840\n</code></pre>\n<p>For more feature options see:\n<code>cmrun perf-test --help</code></p>\n<h3>Prediction server mode</h3>\n<p>The CMRunner can run as a prediction server. To do so, provide a server address argument:<br>\n<code>cmrun server -m ~/custom model --address localhost:6789</code></p>\n<p>The CM Runner prediction server provides the following routes. You may provide the environment variable URL_PREFIX. Note that URLs must end with /.</p>\n<ul>\n<li>\n<p>A GET URL_PREFIX/ route, which checks if the server is alive.<br>\nExample: GET <a href=\"http://localhost:6789/\" rel=\"nofollow\">http://localhost:6789/</a></p>\n</li>\n<li>\n<p>A POST URL_PREFIX/shutdown/ route, which shuts the server down.<br>\nExample: POST <a href=\"http://localhost:6789/shutdown/\" rel=\"nofollow\">http://localhost:6789/shutdown/</a></p>\n</li>\n<li>\n<p>A POST URL_PREFIX/predict/ route, which returns predictions on data.<br>\nExample: POST <a href=\"http://localhost:6789/predict/\" rel=\"nofollow\">http://localhost:6789/predict/</a><br>\nFor this /predict/ route, provide inference data (for the model to make predictions) as form data with a <a>key:value</a> pair, where:<br>\nkey = X<br>\nvalue = filename of the CSV that contains the inference data</p>\n</li>\n</ul>\n<h3>Running inside a docker container</h3>\n<p>In every mode <strong>cmrunner</strong> can be run inside a docker container by providing an option <code>--docker &lt;image_name&gt;</code>.\nThe container should implement an environment required to run the model.\n<strong>cmrunner</strong> must be installed as a part of this environment.<br>\nExample on how to run inside of container:<br>\n<code>cmrun score -m ~/custom_model/ --input dataset.csv --docker &lt;container_name&gt;</code><br>\n<code>cmrun perf-test -m ~/custom_model/ --input dataset.csv --docker &lt;container_name&gt;</code></p>\n\n          </div>"}, "last_serial": 7192773, "releases": {"1.0.10": [{"comment_text": "", "digests": {"md5": "6ab2a17550dfcd1a5eae7b96e4d420cb", "sha256": "ce34b3847d6ea6c2cdede780914328ea34240f7f7c1c7b63dcb560fe33595966"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ab2a17550dfcd1a5eae7b96e4d420cb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 821700, "upload_time": "2020-04-21T00:54:58", "upload_time_iso_8601": "2020-04-21T00:54:58.026478Z", "url": "https://files.pythonhosted.org/packages/18/ef/476d79c081aa1b1e4644050f8ac49b89f989d828bf018a182cb42911c047/datarobot_cmrunner-1.0.10-py2.py3-none-any.whl", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "dba56d46622a63892cea17ac7117ab9f", "sha256": "78f0d9809e71fc09349def6007be7fdb6ec2a899f037466cf16e5bcdd1b41cc4"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dba56d46622a63892cea17ac7117ab9f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 821754, "upload_time": "2020-04-21T17:48:29", "upload_time_iso_8601": "2020-04-21T17:48:29.730458Z", "url": "https://files.pythonhosted.org/packages/46/11/f372725aafdda94c8617206f904576efaa6d17e3b388ebaa2dc35e39d8d6/datarobot_cmrunner-1.0.11-py2.py3-none-any.whl", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "570f519e7e4519e68048e4a817fd7b76", "sha256": "07e4e3d8c8c942702673e456a8f7e417ac2c0caf2125df692bb718c9ac8eff78"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "570f519e7e4519e68048e4a817fd7b76", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2469311, "upload_time": "2020-04-23T21:23:44", "upload_time_iso_8601": "2020-04-23T21:23:44.851892Z", "url": "https://files.pythonhosted.org/packages/a4/27/87dc48537578b4a388b791af9af75a4fac39c825fa64f2418b4fbac74107/datarobot_cmrunner-1.0.12-py2.py3-none-any.whl", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "db3af02d6c9bc95ad3ad978d6e2fd230", "sha256": "85c46d3244f0cec5c7595b82950e750dcb73f549606d84131043626983918704"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db3af02d6c9bc95ad3ad978d6e2fd230", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2476375, "upload_time": "2020-04-27T17:49:58", "upload_time_iso_8601": "2020-04-27T17:49:58.535013Z", "url": "https://files.pythonhosted.org/packages/d7/4e/8b4120e627b39728749f325992aeca9ee5d268d373ef42dc0327a84651ea/datarobot_cmrunner-1.0.13-py2.py3-none-any.whl", "yanked": false}], "1.0.14": [{"comment_text": "", "digests": {"md5": "5b17c622132b3a3a4ff607e3da7d5f89", "sha256": "9315226c80dd329d8153ffe2c6a52d602e1b5dbb6516fec2d2f46d8c2b0ce718"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b17c622132b3a3a4ff607e3da7d5f89", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480207, "upload_time": "2020-05-01T01:15:06", "upload_time_iso_8601": "2020-05-01T01:15:06.857533Z", "url": "https://files.pythonhosted.org/packages/9b/77/e4a67baedc53cb7ab9b6711437af986ad02b219d2083ca76ef3dbad9741d/datarobot_cmrunner-1.0.14-py2.py3-none-any.whl", "yanked": false}], "1.0.15": [{"comment_text": "", "digests": {"md5": "daa2d87983b2c5a6248c4cb586b0e2b2", "sha256": "f61d27466d300759517005d0bf21ff0e89740425a9b6645544be27e470d244d6"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "daa2d87983b2c5a6248c4cb586b0e2b2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480766, "upload_time": "2020-05-04T20:03:11", "upload_time_iso_8601": "2020-05-04T20:03:11.594819Z", "url": "https://files.pythonhosted.org/packages/f7/31/a158a6fcdaaa72355e50bb3d39b605ca0e8f0694f0c178161be2f70f7fc6/datarobot_cmrunner-1.0.15-py2.py3-none-any.whl", "yanked": false}], "1.0.15.post1": [{"comment_text": "", "digests": {"md5": "06b60a794e1e0527f54f54d83d911bea", "sha256": "4bfdc7370a5d533f102a8fa41e3431633d0a23d9eb79d8747f2b1579cf94c139"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.15.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06b60a794e1e0527f54f54d83d911bea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480861, "upload_time": "2020-05-04T20:08:47", "upload_time_iso_8601": "2020-05-04T20:08:47.978763Z", "url": "https://files.pythonhosted.org/packages/55/8e/d6094c77b93c14826bafea7986049688c2055b800c7caf2f73125affb287/datarobot_cmrunner-1.0.15.post1-py2.py3-none-any.whl", "yanked": false}], "1.0.15.post2": [{"comment_text": "", "digests": {"md5": "caa778f7b3a4b2afc1b2488bcdd218cf", "sha256": "c17e5120395c33b75b6eb09199e6d82b4d8d644e76e74edfe66410f24b6b9944"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.15.post2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "caa778f7b3a4b2afc1b2488bcdd218cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480928, "upload_time": "2020-05-04T22:06:11", "upload_time_iso_8601": "2020-05-04T22:06:11.093396Z", "url": "https://files.pythonhosted.org/packages/6b/40/1dfe554c6e91ddfb150cf45d0ba8bc3891ed23c12210c6fce42f8446ea27/datarobot_cmrunner-1.0.15.post2-py2.py3-none-any.whl", "yanked": false}], "1.0.16": [{"comment_text": "", "digests": {"md5": "e2118d153b9b97af221330b051797cda", "sha256": "29acc2b01b519048b16b3854c0616cb095f1aea92bee9d5bbb0eb222cdbfa290"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.16-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2118d153b9b97af221330b051797cda", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480855, "upload_time": "2020-05-05T19:44:28", "upload_time_iso_8601": "2020-05-05T19:44:28.821269Z", "url": "https://files.pythonhosted.org/packages/78/3c/c8c72f7912785c288e99350201a354637c1ce35d8b14ff58dd24dbb7ec85/datarobot_cmrunner-1.0.16-py2.py3-none-any.whl", "yanked": false}], "1.0.16.post1": [{"comment_text": "", "digests": {"md5": "00da0a210a856123a641673892ecf5f6", "sha256": "583cb55086271cc71a74cc2c9d1243c9976890e64d1a533bfaba22bd643211b1"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.16.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "00da0a210a856123a641673892ecf5f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2481004, "upload_time": "2020-05-07T04:22:23", "upload_time_iso_8601": "2020-05-07T04:22:23.052584Z", "url": "https://files.pythonhosted.org/packages/0f/88/2e41dfa428560f93701feaee4cdbc1f1f657003e67a194fac61e26f7123b/datarobot_cmrunner-1.0.16.post1-py2.py3-none-any.whl", "yanked": false}], "1.0.17": [{"comment_text": "", "digests": {"md5": "b89df97bf9696e36aa2e9fba1daf03ea", "sha256": "9019c9fe1fe9c6476fd4b3a9f0a9737698cd73b39aaf7f2c06a003150374089f"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.17-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b89df97bf9696e36aa2e9fba1daf03ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480935, "upload_time": "2020-05-07T21:17:11", "upload_time_iso_8601": "2020-05-07T21:17:11.956661Z", "url": "https://files.pythonhosted.org/packages/1d/40/9689da9c8769b0fa16e19746a686c543a9c358ec9982b043a0e4abc5c4a6/datarobot_cmrunner-1.0.17-py2.py3-none-any.whl", "yanked": false}], "1.0.17.dev1": [{"comment_text": "", "digests": {"md5": "f5b0357f0b2a362d57bdbdaf795d97fe", "sha256": "09ef6ae10c49d4ff97b8ffb29e7f453b0648b4ee111e1a46820aec05a024c6c6"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.17.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5b0357f0b2a362d57bdbdaf795d97fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480917, "upload_time": "2020-05-07T21:11:05", "upload_time_iso_8601": "2020-05-07T21:11:05.463267Z", "url": "https://files.pythonhosted.org/packages/95/83/1a8ebbb334c2ff96ef4d7e4f28b015e703cef10de846df283d4f9125a3ce/datarobot_cmrunner-1.0.17.dev1-py2.py3-none-any.whl", "yanked": false}], "1.0.17.dev2": [{"comment_text": "", "digests": {"md5": "ffc9794feadf738258869d6d1213a640", "sha256": "92155041b8881ad023fb379ed33e99da402659c14cfb865aa51956a34dbf0714"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.17.dev2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ffc9794feadf738258869d6d1213a640", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480924, "upload_time": "2020-05-07T21:13:29", "upload_time_iso_8601": "2020-05-07T21:13:29.207145Z", "url": "https://files.pythonhosted.org/packages/91/00/06258da9d6a5f9d17208d7da93546166ca400b2434d04189e296f022f867/datarobot_cmrunner-1.0.17.dev2-py2.py3-none-any.whl", "yanked": false}], "1.0.17.post1": [{"comment_text": "", "digests": {"md5": "01792961d417c34bddd77acb157d5a3f", "sha256": "8874f14f037a45b253e2fa3067ea8ebe5668c724e92f75da2f28d19d16978b81"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.17.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "01792961d417c34bddd77acb157d5a3f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480847, "upload_time": "2020-05-07T22:44:21", "upload_time_iso_8601": "2020-05-07T22:44:21.278271Z", "url": "https://files.pythonhosted.org/packages/a2/54/22a65c59322572b12d94809345856c3e00622acd208f9518260e270900e6/datarobot_cmrunner-1.0.17.post1-py2.py3-none-any.whl", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "ed8fd190c5c14bcd69236737613fba56", "sha256": "1a9c0b1d418026d2409f3d9444fe8d3de2f85a2f16f9173adb4b3a9488ef27f0"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed8fd190c5c14bcd69236737613fba56", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 820961, "upload_time": "2020-04-16T21:45:29", "upload_time_iso_8601": "2020-04-16T21:45:29.499720Z", "url": "https://files.pythonhosted.org/packages/81/6a/8949c2f85cddf8a43922472d06a10e15b5f6d9400e9246e3e230f3b704cd/datarobot_cmrunner-1.0.9-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01792961d417c34bddd77acb157d5a3f", "sha256": "8874f14f037a45b253e2fa3067ea8ebe5668c724e92f75da2f28d19d16978b81"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.17.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "01792961d417c34bddd77acb157d5a3f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 2480847, "upload_time": "2020-05-07T22:44:21", "upload_time_iso_8601": "2020-05-07T22:44:21.278271Z", "url": "https://files.pythonhosted.org/packages/a2/54/22a65c59322572b12d94809345856c3e00622acd208f9518260e270900e6/datarobot_cmrunner-1.0.17.post1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:40:13 2020"}