{"info": {"author": "dhrone", "author_email": "ron@ritchey.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Embedded Systems"], "description": "# pyIOT\n![pyIOT Diagram](https://raw.githubusercontent.com/dhrone/pyIOT/master/doc/source/_static/pyIOT_System.jpg)\n\nA python module to simplify writing device drivers for the Amazon AWS IOT service\n\npyIOT abstracts the AWS IOT-Core service handling all of the communications between it and our device.  To implement a pyIOT application, you only need to specify how to convert from the protocol of your device into the properties that you want to expose to IOT-Core and vice-versa.  This enables IOT-Core applications to be written in a handful of lines of code.\n\nHere's an example pyIOT application for a simple relay...\n\n```python\n\nimport serial\nimport pyIOT\n\nclass Relay(Component):\n  @Component.componentToProperty('relayState', '^RELAY(ON|OFF)$')\n  def toRelayState(self, property, value):\n      val = { 'ON': True, 'OFF': False }.get(value)\n      if val: return val\n      raise ValueError('{0} is not a valid value for property {1}'.format(value, property))\n\n  @Component.propertyToComponent('relayState', 'RELAY{0}')\n  def fromRelayState(self, value):\n      val = { True: 'ON', False: 'OFF' }.get(value)\n      if val: return val\n      raise ValueError('{0} is not a valid relayState'.format(value))\n\n  def queryStatus(self):\n    return 'RELAY?\\n'\n\ntry:\n  ser = serial.Serial('/dev/ttyUSB0',9600, timeout=0.5)\n  relayComponent = Relay(name = 'RelayComponent1', stream = ser, synchronous=True)\n\n  relayThing = Thing(endpoint='<your endpoint>', thingName='relayOne', rootCAPath='root-CA.crt', certificatePath='relayOne.crt',\n    privateKeyPath='relayOne.private.key', region='us-east-1', components=relayComponent)\n  relayThing.start()\nexcept KeyboardInterrupt:\n  relayComponent.exit()\n```\n# Features\n\n* Handles all communications between AWS IOT-Core and your device\n* Optionally allows several components to be combined into a single IOT device\n* Supports synchronous and asynchronous components\n* Easily interfaces with serial and network driven components\n* Allows custom communication methods including GPIO driven applications\n\n# Documentation\n\nFor more details on pyIOT and its usage, please consult the documenation at https://pyiot.readthedocs.io\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dhrone/pyIOT", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyIOT", "package_url": "https://pypi.org/project/pyIOT/", "platform": "", "project_url": "https://pypi.org/project/pyIOT/", "project_urls": {"Homepage": "https://github.com/dhrone/pyIOT"}, "release_url": "https://pypi.org/project/pyIOT/0.1.1/", "requires_dist": ["pyserial", "awsiotpythonsdk"], "requires_python": "", "summary": "Simplifies driver development for Amazon's IOT-Core service", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyIOT</h1>\n<p><img alt=\"pyIOT Diagram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/365aa3a03aedbfa28ea5cf9ea3b64b59c3564c3f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6468726f6e652f7079494f542f6d61737465722f646f632f736f757263652f5f7374617469632f7079494f545f53797374656d2e6a7067\"></p>\n<p>A python module to simplify writing device drivers for the Amazon AWS IOT service</p>\n<p>pyIOT abstracts the AWS IOT-Core service handling all of the communications between it and our device.  To implement a pyIOT application, you only need to specify how to convert from the protocol of your device into the properties that you want to expose to IOT-Core and vice-versa.  This enables IOT-Core applications to be written in a handful of lines of code.</p>\n<p>Here's an example pyIOT application for a simple relay...</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyIOT</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Relay</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n  <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">componentToProperty</span><span class=\"p\">(</span><span class=\"s1\">'relayState'</span><span class=\"p\">,</span> <span class=\"s1\">'^RELAY(ON|OFF)$'</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">toRelayState</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">property</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n      <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'ON'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'OFF'</span><span class=\"p\">:</span> <span class=\"kc\">False</span> <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">val</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\"> is not a valid value for property </span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">property</span><span class=\"p\">))</span>\n\n  <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">propertyToComponent</span><span class=\"p\">(</span><span class=\"s1\">'relayState'</span><span class=\"p\">,</span> <span class=\"s1\">'RELAY</span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">fromRelayState</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n      <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"kc\">True</span><span class=\"p\">:</span> <span class=\"s1\">'ON'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">:</span> <span class=\"s1\">'OFF'</span> <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">val</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\"> is not a valid relayState'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">queryStatus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'RELAY?</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'/dev/ttyUSB0'</span><span class=\"p\">,</span><span class=\"mi\">9600</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"n\">relayComponent</span> <span class=\"o\">=</span> <span class=\"n\">Relay</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'RelayComponent1'</span><span class=\"p\">,</span> <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">ser</span><span class=\"p\">,</span> <span class=\"n\">synchronous</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n  <span class=\"n\">relayThing</span> <span class=\"o\">=</span> <span class=\"n\">Thing</span><span class=\"p\">(</span><span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"s1\">'&lt;your endpoint&gt;'</span><span class=\"p\">,</span> <span class=\"n\">thingName</span><span class=\"o\">=</span><span class=\"s1\">'relayOne'</span><span class=\"p\">,</span> <span class=\"n\">rootCAPath</span><span class=\"o\">=</span><span class=\"s1\">'root-CA.crt'</span><span class=\"p\">,</span> <span class=\"n\">certificatePath</span><span class=\"o\">=</span><span class=\"s1\">'relayOne.crt'</span><span class=\"p\">,</span>\n    <span class=\"n\">privateKeyPath</span><span class=\"o\">=</span><span class=\"s1\">'relayOne.private.key'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'us-east-1'</span><span class=\"p\">,</span> <span class=\"n\">components</span><span class=\"o\">=</span><span class=\"n\">relayComponent</span><span class=\"p\">)</span>\n  <span class=\"n\">relayThing</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n  <span class=\"n\">relayComponent</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">()</span>\n</pre>\n<h1>Features</h1>\n<ul>\n<li>Handles all communications between AWS IOT-Core and your device</li>\n<li>Optionally allows several components to be combined into a single IOT device</li>\n<li>Supports synchronous and asynchronous components</li>\n<li>Easily interfaces with serial and network driven components</li>\n<li>Allows custom communication methods including GPIO driven applications</li>\n</ul>\n<h1>Documentation</h1>\n<p>For more details on pyIOT and its usage, please consult the documenation at <a href=\"https://pyiot.readthedocs.io\" rel=\"nofollow\">https://pyiot.readthedocs.io</a></p>\n\n          </div>"}, "last_serial": 4188108, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "2fd628223ddb0efd8214f2afc922c67c", "sha256": "b29ce343dfcd14945fb8d410128a222df41143400a6ea4ee06fdf1300915151e"}, "downloads": -1, "filename": "pyIOT-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2fd628223ddb0efd8214f2afc922c67c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18718, "upload_time": "2018-08-20T11:55:09", "upload_time_iso_8601": "2018-08-20T11:55:09.601350Z", "url": "https://files.pythonhosted.org/packages/38/08/fde36803f3e77cddae02c16aa941a09d55024dff62660b5faec255e7fac0/pyIOT-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fd628223ddb0efd8214f2afc922c67c", "sha256": "b29ce343dfcd14945fb8d410128a222df41143400a6ea4ee06fdf1300915151e"}, "downloads": -1, "filename": "pyIOT-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2fd628223ddb0efd8214f2afc922c67c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18718, "upload_time": "2018-08-20T11:55:09", "upload_time_iso_8601": "2018-08-20T11:55:09.601350Z", "url": "https://files.pythonhosted.org/packages/38/08/fde36803f3e77cddae02c16aa941a09d55024dff62660b5faec255e7fac0/pyIOT-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:56 2020"}