{"info": {"author": "Martin Hjelmare", "author_email": "marhje52@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator"], "description": "# camacq [![Build Status](https://github.com/CellProfiling/cam_acq/workflows/Test%20application/badge.svg)](https://github.com/CellProfiling/cam_acq/actions) [![Documentation Status](https://readthedocs.org/projects/cam-acq/badge/?version=latest)](http://cam-acq.readthedocs.io/en/latest/?badge=latest)\n\nPython project to control microscope through client-server program.\n\n## Install\n\n- Install the camacq package. Python version 3.6+ is supported.\n\n    ```sh\n    # Check python version.\n    python --version\n    # Install package.\n    pip install camacq\n    # Test that program is callable and show help.\n    camacq -h\n    ```\n\n## Run\n\n```sh\ncamacq\n```\n\n## Configure\n\ncamacq uses a yaml configuration file, config.yml, for configuring\nalmost all settings in the app. The configuration file is found in the\nconfiguration directory. The default configuration directory is located\nin the home directory and called `.camacq`.\n\nThe location of the configuration directory can be overridden when\nstarting camacq.\n\n```sh\ncamacq --config /my_custom_config_dir\n```\n\nWhen camacq is started it checks the configuration directory for the\nconfiguration file, and if none is found creates a default configuration\nfile. See below for an example of how to configure the leica api and a\nsimple automation, in the configuration yaml file.\n\n```yaml\nleica:\n  host: localhost\n  port: 8895\n  imaging_dir: '/imaging_dir'\n\nautomations:\n  - name: start\n    trigger:\n      - type: event\n        id: camacq_start_event\n    action:\n      - type: command\n        id: start_imaging\n```\n\n## API\n\nTo interact with a microscope camacq needs to connect to an API from a\nmicroscope vendor, which in turn will control the microscope. Currently\ncamacq can connect to the Computer Aided Microscopy (CAM) interface of\nLeica Microsystems' microscopes that have that feature activated. The\ndesign of camacq is built to be able to easily extend to APIs of other\nmicroscope vendors in the future. We welcome pull requests for this and\nother improvements. The API interface should be contained within a\nseparate Python library, that instantiates a client object which camacq\ncan use.\n\n```yaml\nleica:\n  host: localhost\n  port: 8895\n  imaging_dir: '/imaging_dir'\n```\n\n## Automations\n\nTo tell the microscope what to do, camacq uses automations. Automations\nare blocks of yaml consisting of triggers, optional conditions and\nactions. A trigger is the notification of an event in camacq, eg a new\nimage is saved. An action is what camacq should do when the trigger\ntriggers, eg go to the next well. A condition is a criteria that has to\nbe true to allow the action to execute, when a trigger has triggered.\n\nAs events happen, camacq checks the configured automations to see if any\nautomation trigger matches the event. If there is a match, it also\nchecks for possible conditions and if they are true. If both trigger and\nconditions matches and resolves to true, the corresponding action(s)\nwill be executed.\n\nFor each automation block, it is possible to have multiple triggers,\nmultiple conditions and multiple actions. Eg we can configure an\nautomation with two triggers and two actions. If any of the triggers\nmatches an event, both actions will be executed, in sequence.\n\n```yaml\nautomations:\n  name: image_next_well\n  trigger:\n    - type: event\n      id: camacq_start_event\n    - type: event\n      id: well_event\n      data:\n        well_img_ok: true\n  action:\n    - type: sample\n      id: set_sample\n      data:\n        plate_name: plate_1\n        well_x: 1\n        well_y: >\n          {{ trigger.event.well_y + 1 }}\n    - type: command\n      id: start_imaging\n```\n\n### Trigger\n\nLet us look more closely at the trigger section of the above automation.\n\n```yaml\ntrigger:\n  - type: event\n    id: camacq_start_event\n  - type: event\n    id: well_event\n    data:\n      well_img_ok: true\n```\n\nThis section now holds a sequence of two trigger items, where each has a\ntype and an id. The second item also has a `data` key. The\n`type` key tells camacq what type of trigger it should\nconfigure. Currently only triggers of type `event` are\navailable. See the [documentation](http://cam-acq.readthedocs.io) for\nall available event ids. The `id` key sets the trigger id\nwhich will be the first part of the matching criteria for the trigger.\nThe second part is optional and is the value of the `data`\nkey. This key can hold key-value pairs with event data that should match\nthe attributes of the event for the trigger to trigger. So for the\nsecond item we want the event to have id `well_event` and\nto have an attribute called `well_img_ok` which should\nreturn `True`, for the event to trigger our trigger.\n\n### Action\n\nLooking at the action section of our example automation, we see that it\nalso has two items. And exactly as for the triggers, each action has a\n`type` and an `id`, and can optionally specify\na `data` key. Actions can have different types, eg\n`sample` or `command`. You will find all of\nthe action types in the [documentation](http://cam-acq.readthedocs.io).\nFor an action, the `data` key sets the keyword arguments\nthat should be provided to the action handler function that executes the\naction.\n\n```yaml\naction:\n  - type: sample\n    id: set_sample\n    data:\n      plate_name: plate_1\n      well_x: 1\n      well_y: >\n        {{ trigger.event.well_y + 1 }}\n  - type: command\n    id: start_imaging\n```\n\nIn our example we want to do two things, first set a well, and then\nstart the imaging. To not have to define this automation for each well\nwe want to image, automations allow for dynamic rendering of the value\nof a data key, via use of the [Jinja2](http://jinja.pocoo.org/docs)\ntemplate language. You can recognize this part by the curly brackets.\nSee the template section below for further details.\n\n### Template\n\nUsing templates in automations allows us to build powerful and flexible\npieces of automation configuration code to control the microscope.\nBesides having all the standard Jinja2 features, we also have the\ntrigger event and the full sample state data available as variables when\nthe template is rendered. Eg if a well event triggered the automation we\ncan use `trigger.event.container` inside the template and have\naccess to all the attributes of the well container that triggered the event.\nUseful sample attributes are also directly available on the\n`trigger.event` eg `trigger.event.well_x`.\n\n```yaml\nwell_y: >\n  {% if trigger.event.container is defined %}\n    {{ trigger.event.well_y + 1 }}\n  {% else %}\n    1\n  {% endif %}\n```\n\nIf we need access to some sample state that isn't part of the trigger,\nwe can use `samples` directly in the template. Via this\nvariable the whole sample state data is accessible from inside a\ntemplate. See below for the sample attribute structure. Note that only\ncondition and action values in key-value pairs support rendering a\ntemplate. Templates are not supported in the keys of key-value pairs and\nnot in trigger sections.\n\n### Condition\n\nA condition can be used to check the current sample state and only\nexecute the action if some criteria is met. Say eg we want to make sure\nthat channel 3 of well 1:1 of plate 1 is green and that gain is set to\n800.\n\n```yaml\ncondition:\n  type: AND\n  conditions:\n    - condition: >\n        {% if samples.leica.data['{\"name\": \"channel\", \"plate_name\": \"plate_1\", \"well_x\": 1, \"well_y\": 1, \"channel_id\": 3}'].values['channel_name'] == 'green' %}\n          true\n        {% endif %}\n    - condition: >\n        {% if samples.leica.data['{\"name\": \"channel\", \"plate_name\": \"plate_1\", \"well_x\": 1, \"well_y\": 1, \"channel_id\": 3}'].values['gain'] == 800 %}\n          true\n        {% endif %}\n```\n\nThe trigger event data is also available in the condition template as a\nvariable. Below example will evaluate to true if the well that triggered\nthe event has either 1 or 2 as x coordinate.\n\n```yaml\ncondition:\n  type: OR\n  conditions:\n    - condition: >\n        {% if trigger.event.well_x == 1 %}\n          true\n        {% endif %}\n    - condition: >\n        {% if trigger.event.well_x == 2 %}\n          true\n        {% endif %}\n```\n\nCurrently each condition must be a template that renders to the string\n`true` if the condition criteria is met.\n\n## Sample\n\nThe sample state should represent the sample with a representation that\nis specific to each implemented microscope api using the `ImageContainer`\napi of camacq. An image container has a `name`, a dictionary of `images` and\na dictionary of `values` as attributes. The container also fires a specific\nevent on container change.\n\nThere are two special cases of the image container. The first is the main\nsample container of each microscope api, eg the leica container. The main\ncontainer has an extra attribute `data` which is a dictionary with all the\ncontainers of the sample. The second special case is the image in the\ndictionary of images of an image container. The image is also a container\nand has only itself in the images dictionary and a `path` attribute with\nthe path of the image.\n\nEg for the leica sample there are plate, well, field, z_slice, channel and\nimage containers under the main leica sample container.\n\nAll implemented sample states are available as a variable `samples` in\ntemplates in automations. The leica sample is available as `samples.leica`.\n\nSee below for the leica sample state attribute structure in camacq.\nThe words in all capital letters are example values. Each image container\nhas a name, which is either of plate, well, field, z_slice, channel or image.\nThe different leica containers have different leica specific attributes\nthat aren't all shown below.\n\n```yaml\nsamples:\n  leica:\n    name: leica\n    images:\n      PATH:\n        name: image\n        path: PATH\n        plate_name: PLATE_NAME\n        well_x: WELL_X\n        well_y: WELL_Y\n        field_x: FIELD_X\n        field_y: FIELD_Y\n        z_slice_id: Z_SLICE_ID\n        channel_id: CHANNEL_ID\n        images:\n          PATH: self\n        values:\n          VALUE_KEY: VALUE\n    values:\n      VALUE_KEY: VALUE\n    data:\n      CONTAINER_ID:\n        name: plate/well/field/z_slice/channel/image\n        images:\n          PATH:\n            name: image\n            path: PATH\n            plate_name: PLATE_NAME\n            well_x: WELL_X\n            well_y: WELL_Y\n            field_x: FIELD_X\n            field_y: FIELD_Y\n            z_slice_id: Z_SLICE_ID\n            channel_id: CHANNEL_ID\n            images:\n              PATH: self\n            values:\n              VALUE_KEY: VALUE\n        values:\n          VALUE_KEY: VALUE\n```\n\n## Plugins\n\nTo extend the functionality of camacq and to make it possible to do\nautomated feedback microscopy, camacq supports plugins. A plugin is a\nmodule or a package in camacq that provides code for a specific task. It\ncan eg be an image analysis script. See the\n[documentation](http://cam-acq.readthedocs.io) for all default available\nplugins.\n\nTo install a custom plugin, create a Python package with a `setup.py` module that\nimplements the entry_points interface with key `\"camacq.plugins\"`.\n\n```py\nsetup(\n    ...\n    entry_points={\"camacq.plugins\": \"plugin_a = package_a.plugin_a\"},\n    ...\n)\n```\n\nSee the packaging [docs](https://packaging.python.org/guides/creating-and-discovering-plugins/#using-package-metadata) for details.\n\n`camacq` will\nautomatically load installed modules or packages that implement this entry_point.\n\nAdd a `setup_module` coroutine function in the module or package. This function\nwill be awaited with `center` and `config` as arguments.\n\n```py\nasync def setup_module(center, config):\n    \"\"\"Set up the plugin package.\"\"\"\n```\n\nEach plugin must have its own configuration section at the root of the config.\n\n```yaml\nexample_plugin:\n  ...\n```\n\n## Development\n\nInstall the packages needed for development.\n\n```sh\npip install -r requirements_dev.txt\n```\n\nUse the Makefile to run common development tasks.\n\n```sh\nmake\n```\n\n### Release\n\nSee the [release instructions](RELEASE.md).\n\n## Credits\n\nA lot of the inspiration for the architecture of camacq comes from\nanother open-source Python automation app: [Home\nAssistant](https://github.com/home-assistant/home-assistant). This is\nalso the source for the automations interface in camacq.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/CellProfiling/cam_acq/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CellProfiling/cam_acq", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "camacq", "package_url": "https://pypi.org/project/camacq/", "platform": "", "project_url": "https://pypi.org/project/camacq/", "project_urls": {"Download": "https://github.com/CellProfiling/cam_acq/archive/master.zip", "Homepage": "https://github.com/CellProfiling/cam_acq"}, "release_url": "https://pypi.org/project/camacq/0.7.5/", "requires_dist": ["async-timeout", "colorlog", "jinja2", "leicacam (>=0.4.0)", "leicaimage", "numpy", "ruamel.yaml (>=0.15)", "tifffile", "voluptuous", "xmltodict"], "requires_python": ">=3.6", "summary": "Control microscope through client server program.", "version": "0.7.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>camacq <a href=\"https://github.com/CellProfiling/cam_acq/actions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dfdfab7b280cc2034e94ebb09e09ad33594fd292/68747470733a2f2f6769746875622e636f6d2f43656c6c50726f66696c696e672f63616d5f6163712f776f726b666c6f77732f546573742532306170706c69636174696f6e2f62616467652e737667\"></a> <a href=\"http://cam-acq.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d14f389cde4c130b1cc943e1724ff16b16c3f606/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f63616d2d6163712f62616467652f3f76657273696f6e3d6c6174657374\"></a></h1>\n<p>Python project to control microscope through client-server program.</p>\n<h2>Install</h2>\n<ul>\n<li>\n<p>Install the camacq package. Python version 3.6+ is supported.</p>\n<pre><span class=\"c1\"># Check python version.</span>\npython --version\n<span class=\"c1\"># Install package.</span>\npip install camacq\n<span class=\"c1\"># Test that program is callable and show help.</span>\ncamacq -h\n</pre>\n</li>\n</ul>\n<h2>Run</h2>\n<pre>camacq\n</pre>\n<h2>Configure</h2>\n<p>camacq uses a yaml configuration file, config.yml, for configuring\nalmost all settings in the app. The configuration file is found in the\nconfiguration directory. The default configuration directory is located\nin the home directory and called <code>.camacq</code>.</p>\n<p>The location of the configuration directory can be overridden when\nstarting camacq.</p>\n<pre>camacq --config /my_custom_config_dir\n</pre>\n<p>When camacq is started it checks the configuration directory for the\nconfiguration file, and if none is found creates a default configuration\nfile. See below for an example of how to configure the leica api and a\nsimple automation, in the configuration yaml file.</p>\n<pre><span class=\"nt\">leica</span><span class=\"p\">:</span>\n  <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">localhost</span>\n  <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8895</span>\n  <span class=\"nt\">imaging_dir</span><span class=\"p\">:</span> <span class=\"s\">'/imaging_dir'</span>\n\n<span class=\"nt\">automations</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">start</span>\n    <span class=\"nt\">trigger</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">event</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">camacq_start_event</span>\n    <span class=\"nt\">action</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">command</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">start_imaging</span>\n</pre>\n<h2>API</h2>\n<p>To interact with a microscope camacq needs to connect to an API from a\nmicroscope vendor, which in turn will control the microscope. Currently\ncamacq can connect to the Computer Aided Microscopy (CAM) interface of\nLeica Microsystems' microscopes that have that feature activated. The\ndesign of camacq is built to be able to easily extend to APIs of other\nmicroscope vendors in the future. We welcome pull requests for this and\nother improvements. The API interface should be contained within a\nseparate Python library, that instantiates a client object which camacq\ncan use.</p>\n<pre><span class=\"nt\">leica</span><span class=\"p\">:</span>\n  <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">localhost</span>\n  <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8895</span>\n  <span class=\"nt\">imaging_dir</span><span class=\"p\">:</span> <span class=\"s\">'/imaging_dir'</span>\n</pre>\n<h2>Automations</h2>\n<p>To tell the microscope what to do, camacq uses automations. Automations\nare blocks of yaml consisting of triggers, optional conditions and\nactions. A trigger is the notification of an event in camacq, eg a new\nimage is saved. An action is what camacq should do when the trigger\ntriggers, eg go to the next well. A condition is a criteria that has to\nbe true to allow the action to execute, when a trigger has triggered.</p>\n<p>As events happen, camacq checks the configured automations to see if any\nautomation trigger matches the event. If there is a match, it also\nchecks for possible conditions and if they are true. If both trigger and\nconditions matches and resolves to true, the corresponding action(s)\nwill be executed.</p>\n<p>For each automation block, it is possible to have multiple triggers,\nmultiple conditions and multiple actions. Eg we can configure an\nautomation with two triggers and two actions. If any of the triggers\nmatches an event, both actions will be executed, in sequence.</p>\n<pre><span class=\"nt\">automations</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">image_next_well</span>\n  <span class=\"nt\">trigger</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">event</span>\n      <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">camacq_start_event</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">event</span>\n      <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">well_event</span>\n      <span class=\"nt\">data</span><span class=\"p\">:</span>\n        <span class=\"nt\">well_img_ok</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n  <span class=\"nt\">action</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sample</span>\n      <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">set_sample</span>\n      <span class=\"nt\">data</span><span class=\"p\">:</span>\n        <span class=\"nt\">plate_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">plate_1</span>\n        <span class=\"nt\">well_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"nt\">well_y</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n          <span class=\"no\">{{ trigger.event.well_y + 1 }}</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">command</span>\n      <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">start_imaging</span>\n</pre>\n<h3>Trigger</h3>\n<p>Let us look more closely at the trigger section of the above automation.</p>\n<pre><span class=\"nt\">trigger</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">event</span>\n    <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">camacq_start_event</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">event</span>\n    <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">well_event</span>\n    <span class=\"nt\">data</span><span class=\"p\">:</span>\n      <span class=\"nt\">well_img_ok</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<p>This section now holds a sequence of two trigger items, where each has a\ntype and an id. The second item also has a <code>data</code> key. The\n<code>type</code> key tells camacq what type of trigger it should\nconfigure. Currently only triggers of type <code>event</code> are\navailable. See the <a href=\"http://cam-acq.readthedocs.io\" rel=\"nofollow\">documentation</a> for\nall available event ids. The <code>id</code> key sets the trigger id\nwhich will be the first part of the matching criteria for the trigger.\nThe second part is optional and is the value of the <code>data</code>\nkey. This key can hold key-value pairs with event data that should match\nthe attributes of the event for the trigger to trigger. So for the\nsecond item we want the event to have id <code>well_event</code> and\nto have an attribute called <code>well_img_ok</code> which should\nreturn <code>True</code>, for the event to trigger our trigger.</p>\n<h3>Action</h3>\n<p>Looking at the action section of our example automation, we see that it\nalso has two items. And exactly as for the triggers, each action has a\n<code>type</code> and an <code>id</code>, and can optionally specify\na <code>data</code> key. Actions can have different types, eg\n<code>sample</code> or <code>command</code>. You will find all of\nthe action types in the <a href=\"http://cam-acq.readthedocs.io\" rel=\"nofollow\">documentation</a>.\nFor an action, the <code>data</code> key sets the keyword arguments\nthat should be provided to the action handler function that executes the\naction.</p>\n<pre><span class=\"nt\">action</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sample</span>\n    <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">set_sample</span>\n    <span class=\"nt\">data</span><span class=\"p\">:</span>\n      <span class=\"nt\">plate_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">plate_1</span>\n      <span class=\"nt\">well_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n      <span class=\"nt\">well_y</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n        <span class=\"no\">{{ trigger.event.well_y + 1 }}</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">command</span>\n    <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">start_imaging</span>\n</pre>\n<p>In our example we want to do two things, first set a well, and then\nstart the imaging. To not have to define this automation for each well\nwe want to image, automations allow for dynamic rendering of the value\nof a data key, via use of the <a href=\"http://jinja.pocoo.org/docs\" rel=\"nofollow\">Jinja2</a>\ntemplate language. You can recognize this part by the curly brackets.\nSee the template section below for further details.</p>\n<h3>Template</h3>\n<p>Using templates in automations allows us to build powerful and flexible\npieces of automation configuration code to control the microscope.\nBesides having all the standard Jinja2 features, we also have the\ntrigger event and the full sample state data available as variables when\nthe template is rendered. Eg if a well event triggered the automation we\ncan use <code>trigger.event.container</code> inside the template and have\naccess to all the attributes of the well container that triggered the event.\nUseful sample attributes are also directly available on the\n<code>trigger.event</code> eg <code>trigger.event.well_x</code>.</p>\n<pre><span class=\"nt\">well_y</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n  <span class=\"no\">{% if trigger.event.container is defined %}</span>\n    <span class=\"no\">{{ trigger.event.well_y + 1 }}</span>\n  <span class=\"no\">{% else %}</span>\n    <span class=\"no\">1</span>\n  <span class=\"no\">{% endif %}</span>\n</pre>\n<p>If we need access to some sample state that isn't part of the trigger,\nwe can use <code>samples</code> directly in the template. Via this\nvariable the whole sample state data is accessible from inside a\ntemplate. See below for the sample attribute structure. Note that only\ncondition and action values in key-value pairs support rendering a\ntemplate. Templates are not supported in the keys of key-value pairs and\nnot in trigger sections.</p>\n<h3>Condition</h3>\n<p>A condition can be used to check the current sample state and only\nexecute the action if some criteria is met. Say eg we want to make sure\nthat channel 3 of well 1:1 of plate 1 is green and that gain is set to\n800.</p>\n<pre><span class=\"nt\">condition</span><span class=\"p\">:</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AND</span>\n  <span class=\"nt\">conditions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">condition</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n        <span class=\"no\">{% if samples.leica.data['{\"name\": \"channel\", \"plate_name\": \"plate_1\", \"well_x\": 1, \"well_y\": 1, \"channel_id\": 3}'].values['channel_name'] == 'green' %}</span>\n          <span class=\"no\">true</span>\n        <span class=\"no\">{% endif %}</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">condition</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n        <span class=\"no\">{% if samples.leica.data['{\"name\": \"channel\", \"plate_name\": \"plate_1\", \"well_x\": 1, \"well_y\": 1, \"channel_id\": 3}'].values['gain'] == 800 %}</span>\n          <span class=\"no\">true</span>\n        <span class=\"no\">{% endif %}</span>\n</pre>\n<p>The trigger event data is also available in the condition template as a\nvariable. Below example will evaluate to true if the well that triggered\nthe event has either 1 or 2 as x coordinate.</p>\n<pre><span class=\"nt\">condition</span><span class=\"p\">:</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">OR</span>\n  <span class=\"nt\">conditions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">condition</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n        <span class=\"no\">{% if trigger.event.well_x == 1 %}</span>\n          <span class=\"no\">true</span>\n        <span class=\"no\">{% endif %}</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">condition</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">&gt;</span>\n        <span class=\"no\">{% if trigger.event.well_x == 2 %}</span>\n          <span class=\"no\">true</span>\n        <span class=\"no\">{% endif %}</span>\n</pre>\n<p>Currently each condition must be a template that renders to the string\n<code>true</code> if the condition criteria is met.</p>\n<h2>Sample</h2>\n<p>The sample state should represent the sample with a representation that\nis specific to each implemented microscope api using the <code>ImageContainer</code>\napi of camacq. An image container has a <code>name</code>, a dictionary of <code>images</code> and\na dictionary of <code>values</code> as attributes. The container also fires a specific\nevent on container change.</p>\n<p>There are two special cases of the image container. The first is the main\nsample container of each microscope api, eg the leica container. The main\ncontainer has an extra attribute <code>data</code> which is a dictionary with all the\ncontainers of the sample. The second special case is the image in the\ndictionary of images of an image container. The image is also a container\nand has only itself in the images dictionary and a <code>path</code> attribute with\nthe path of the image.</p>\n<p>Eg for the leica sample there are plate, well, field, z_slice, channel and\nimage containers under the main leica sample container.</p>\n<p>All implemented sample states are available as a variable <code>samples</code> in\ntemplates in automations. The leica sample is available as <code>samples.leica</code>.</p>\n<p>See below for the leica sample state attribute structure in camacq.\nThe words in all capital letters are example values. Each image container\nhas a name, which is either of plate, well, field, z_slice, channel or image.\nThe different leica containers have different leica specific attributes\nthat aren't all shown below.</p>\n<pre><span class=\"nt\">samples</span><span class=\"p\">:</span>\n  <span class=\"nt\">leica</span><span class=\"p\">:</span>\n    <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">leica</span>\n    <span class=\"nt\">images</span><span class=\"p\">:</span>\n      <span class=\"nt\">PATH</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">image</span>\n        <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PATH</span>\n        <span class=\"nt\">plate_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PLATE_NAME</span>\n        <span class=\"nt\">well_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">WELL_X</span>\n        <span class=\"nt\">well_y</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">WELL_Y</span>\n        <span class=\"nt\">field_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">FIELD_X</span>\n        <span class=\"nt\">field_y</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">FIELD_Y</span>\n        <span class=\"nt\">z_slice_id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Z_SLICE_ID</span>\n        <span class=\"nt\">channel_id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">CHANNEL_ID</span>\n        <span class=\"nt\">images</span><span class=\"p\">:</span>\n          <span class=\"nt\">PATH</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">self</span>\n        <span class=\"nt\">values</span><span class=\"p\">:</span>\n          <span class=\"nt\">VALUE_KEY</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">VALUE</span>\n    <span class=\"nt\">values</span><span class=\"p\">:</span>\n      <span class=\"nt\">VALUE_KEY</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">VALUE</span>\n    <span class=\"nt\">data</span><span class=\"p\">:</span>\n      <span class=\"nt\">CONTAINER_ID</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">plate/well/field/z_slice/channel/image</span>\n        <span class=\"nt\">images</span><span class=\"p\">:</span>\n          <span class=\"nt\">PATH</span><span class=\"p\">:</span>\n            <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">image</span>\n            <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PATH</span>\n            <span class=\"nt\">plate_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PLATE_NAME</span>\n            <span class=\"nt\">well_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">WELL_X</span>\n            <span class=\"nt\">well_y</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">WELL_Y</span>\n            <span class=\"nt\">field_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">FIELD_X</span>\n            <span class=\"nt\">field_y</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">FIELD_Y</span>\n            <span class=\"nt\">z_slice_id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Z_SLICE_ID</span>\n            <span class=\"nt\">channel_id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">CHANNEL_ID</span>\n            <span class=\"nt\">images</span><span class=\"p\">:</span>\n              <span class=\"nt\">PATH</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">self</span>\n            <span class=\"nt\">values</span><span class=\"p\">:</span>\n              <span class=\"nt\">VALUE_KEY</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">VALUE</span>\n        <span class=\"nt\">values</span><span class=\"p\">:</span>\n          <span class=\"nt\">VALUE_KEY</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">VALUE</span>\n</pre>\n<h2>Plugins</h2>\n<p>To extend the functionality of camacq and to make it possible to do\nautomated feedback microscopy, camacq supports plugins. A plugin is a\nmodule or a package in camacq that provides code for a specific task. It\ncan eg be an image analysis script. See the\n<a href=\"http://cam-acq.readthedocs.io\" rel=\"nofollow\">documentation</a> for all default available\nplugins.</p>\n<p>To install a custom plugin, create a Python package with a <code>setup.py</code> module that\nimplements the entry_points interface with key <code>\"camacq.plugins\"</code>.</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"camacq.plugins\"</span><span class=\"p\">:</span> <span class=\"s2\">\"plugin_a = package_a.plugin_a\"</span><span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>See the packaging <a href=\"https://packaging.python.org/guides/creating-and-discovering-plugins/#using-package-metadata\" rel=\"nofollow\">docs</a> for details.</p>\n<p><code>camacq</code> will\nautomatically load installed modules or packages that implement this entry_point.</p>\n<p>Add a <code>setup_module</code> coroutine function in the module or package. This function\nwill be awaited with <code>center</code> and <code>config</code> as arguments.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">setup_module</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Set up the plugin package.\"\"\"</span>\n</pre>\n<p>Each plugin must have its own configuration section at the root of the config.</p>\n<pre><span class=\"nt\">example_plugin</span><span class=\"p\">:</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<h2>Development</h2>\n<p>Install the packages needed for development.</p>\n<pre>pip install -r requirements_dev.txt\n</pre>\n<p>Use the Makefile to run common development tasks.</p>\n<pre>make\n</pre>\n<h3>Release</h3>\n<p>See the <a href=\"RELEASE.md\" rel=\"nofollow\">release instructions</a>.</p>\n<h2>Credits</h2>\n<p>A lot of the inspiration for the architecture of camacq comes from\nanother open-source Python automation app: <a href=\"https://github.com/home-assistant/home-assistant\" rel=\"nofollow\">Home\nAssistant</a>. This is\nalso the source for the automations interface in camacq.</p>\n\n          </div>"}, "last_serial": 6796378, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "85374c1529168590926d9d3aab0eef69", "sha256": "0ae7ddc5bf019a542139188bf063aaa55307938fe9c457d21180a189bf9fe85a"}, "downloads": -1, "filename": "camacq-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "85374c1529168590926d9d3aab0eef69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38093, "upload_time": "2019-11-09T16:23:37", "upload_time_iso_8601": "2019-11-09T16:23:37.440910Z", "url": "https://files.pythonhosted.org/packages/88/e1/0490d90042899e288307234201a39b46f76876f0c6d9a484ba9f6b57d1d1/camacq-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9140ca1c5416e8c7b9d059099079d0bc", "sha256": "03da023c27c68bd8978d725fb48d5529ed0f03f517f52c8e38b973e3765276ad"}, "downloads": -1, "filename": "camacq-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9140ca1c5416e8c7b9d059099079d0bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49038, "upload_time": "2019-11-09T16:23:40", "upload_time_iso_8601": "2019-11-09T16:23:40.485525Z", "url": "https://files.pythonhosted.org/packages/3a/45/2dbc3390acfddb438d4b898de239be1d23551a788a835a7e082611c0056a/camacq-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "d0b82a4967ee13ed0b56ad4ad44a0b0d", "sha256": "3f2583f45d82406d2ce36ca79b61904dfa2e1ea27837fc82c9f86891bfcc7576"}, "downloads": -1, "filename": "camacq-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d0b82a4967ee13ed0b56ad4ad44a0b0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59906, "upload_time": "2019-12-07T19:48:08", "upload_time_iso_8601": "2019-12-07T19:48:08.895730Z", "url": "https://files.pythonhosted.org/packages/f4/d7/faf548e73392a355adc5a0c397413b13464c032d4df70e5ef2380746cc48/camacq-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e83303c2f6803bfbe48abe59df9fc29b", "sha256": "b8a91c59cbbca391b25570e185a4e488d2c6b69aa2b712d6087ec3526d2c12b4"}, "downloads": -1, "filename": "camacq-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e83303c2f6803bfbe48abe59df9fc29b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 59942, "upload_time": "2019-12-07T19:48:10", "upload_time_iso_8601": "2019-12-07T19:48:10.798442Z", "url": "https://files.pythonhosted.org/packages/2f/a4/326687ad65fa75797e8fcdb2580c5db9a9472f54ba74ac204e0d9f441605/camacq-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f287967add68b90e7a575a2321ada466", "sha256": "b4ed882e3a9fb293ec8f2a1795d57148806ef9ffcf959b05a1cfe6443ac28f66"}, "downloads": -1, "filename": "camacq-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f287967add68b90e7a575a2321ada466", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 51900, "upload_time": "2019-12-12T13:17:17", "upload_time_iso_8601": "2019-12-12T13:17:17.838305Z", "url": "https://files.pythonhosted.org/packages/37/6a/3a21dd2203eb6156364780aa0c13a556f63e379023f49c116832c406c5d5/camacq-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b79c49e175699d803b778c9a937fd14a", "sha256": "7da16eccf18679a73401f6d36bb5225bb5e8a9b78e351377c36cdaf336eb4dd6"}, "downloads": -1, "filename": "camacq-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b79c49e175699d803b778c9a937fd14a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31557, "upload_time": "2019-12-12T13:17:19", "upload_time_iso_8601": "2019-12-12T13:17:19.112112Z", "url": "https://files.pythonhosted.org/packages/a7/dc/74b7e02aa9db7b2fa82baed100c4baf0fbcc9eb09cc267f8fa0904388f64/camacq-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c54c6940ee67e6e516b31f77014f616d", "sha256": "21e852d92f4b42f5a45279b6550cb60fb959edd9e87681b28d6f7ccafa70e572"}, "downloads": -1, "filename": "camacq-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c54c6940ee67e6e516b31f77014f616d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43255, "upload_time": "2020-02-14T16:32:58", "upload_time_iso_8601": "2020-02-14T16:32:58.735870Z", "url": "https://files.pythonhosted.org/packages/dd/10/88dd3817b4148cd26c7b23417c02a0fabd469a86ad294cb8c8b6487b6f7c/camacq-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2bc27fbbd35e4390fae443a7865322a", "sha256": "a6a32979026b153e6f2682681328c56e0733154a424de294d3cf053c7eeb3a3b"}, "downloads": -1, "filename": "camacq-0.6.0.tar.gz", "has_sig": false, "md5_digest": "d2bc27fbbd35e4390fae443a7865322a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31353, "upload_time": "2020-02-14T16:32:59", "upload_time_iso_8601": "2020-02-14T16:32:59.963047Z", "url": "https://files.pythonhosted.org/packages/a1/e2/6bb2ce06ba6e75d04c9d4ee19590997af7bf0d27e60f1aa4fee00a3907ff/camacq-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "0094a810a456be1d800fb2a128ebecd7", "sha256": "807fe2db828db881f29df65974681dfc72b816b3175ec5fab3308562e8122d11"}, "downloads": -1, "filename": "camacq-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0094a810a456be1d800fb2a128ebecd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47325, "upload_time": "2020-03-10T01:45:40", "upload_time_iso_8601": "2020-03-10T01:45:40.236809Z", "url": "https://files.pythonhosted.org/packages/3d/84/93515ce733007bdeaaa0ea4ad4ed14118c3199f1d13c8b12afe7634132fd/camacq-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80d42645c95f8177d747c4cc96a52f01", "sha256": "a0f433a0e20bcba32b2196eca3455b24c6fcf05ba6f91ac031a848e5e53c605b"}, "downloads": -1, "filename": "camacq-0.7.0.tar.gz", "has_sig": false, "md5_digest": "80d42645c95f8177d747c4cc96a52f01", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49818, "upload_time": "2020-03-10T01:45:42", "upload_time_iso_8601": "2020-03-10T01:45:42.269168Z", "url": "https://files.pythonhosted.org/packages/54/95/90003f0d7acc5cb00c27bff1d6506fa3d08abc4f0db5ede98f892989d017/camacq-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "3489fdd95abbdfaa039b194eb13be54a", "sha256": "aef3f52da017b4db73d5fc07b60e97fb13a15dd5c7af08cfa248ac966e6fd6d4"}, "downloads": -1, "filename": "camacq-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3489fdd95abbdfaa039b194eb13be54a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47325, "upload_time": "2020-03-10T02:03:36", "upload_time_iso_8601": "2020-03-10T02:03:36.857048Z", "url": "https://files.pythonhosted.org/packages/1e/b7/985ae51f848482cfdbcf500f17a1d354f3d304bc3d574903b099095cb722/camacq-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cd01a63f13ef2d59c37c98dcd638a76", "sha256": "a4705effb3abc7d70a18f1d7d73ebbff13d0831e0043c59e2014871d66396779"}, "downloads": -1, "filename": "camacq-0.7.1.tar.gz", "has_sig": false, "md5_digest": "8cd01a63f13ef2d59c37c98dcd638a76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49871, "upload_time": "2020-03-10T02:03:38", "upload_time_iso_8601": "2020-03-10T02:03:38.903518Z", "url": "https://files.pythonhosted.org/packages/7c/f7/938184495bbb6b2c833c456dce8d654d905e108b4aff77d05897b24417fb/camacq-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "34cf18ef2c5325a115217a2fc3cb1284", "sha256": "effa524c28ce25c7b35e0e36cb634a2aed175d564d506c0096c0453ef9eefdb0"}, "downloads": -1, "filename": "camacq-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "34cf18ef2c5325a115217a2fc3cb1284", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47328, "upload_time": "2020-03-10T15:12:30", "upload_time_iso_8601": "2020-03-10T15:12:30.574788Z", "url": "https://files.pythonhosted.org/packages/11/af/d8b28fd1633db1559fa03c4180fc47bfe02d7dbdde08e7e0d917eb96d848/camacq-0.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9406add7208c050a18c9d60e81df625", "sha256": "33524e921ca3e3abdddc0cf9dccaad266118efc70daeb10f6dfc89eb0f6e5698"}, "downloads": -1, "filename": "camacq-0.7.2.tar.gz", "has_sig": false, "md5_digest": "d9406add7208c050a18c9d60e81df625", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 50088, "upload_time": "2020-03-10T15:12:32", "upload_time_iso_8601": "2020-03-10T15:12:32.547780Z", "url": "https://files.pythonhosted.org/packages/ba/a6/b20d6e8b535ce27c7f5d8126b3acba1ff5c37865a659d1ff88303b057995/camacq-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "f1fe73a6f113f3989b53c6960b97fb8a", "sha256": "36194abec629fee5bbcfc5c0e133788594a8ec9fe5192a4078adc32b3da347bd"}, "downloads": -1, "filename": "camacq-0.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f1fe73a6f113f3989b53c6960b97fb8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43256, "upload_time": "2020-03-10T15:21:08", "upload_time_iso_8601": "2020-03-10T15:21:08.102118Z", "url": "https://files.pythonhosted.org/packages/86/e5/9b47375c4ae9d245a67c91b648b9caf12fb24c2725d27643e16c79e898d0/camacq-0.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56c6f6b1052665608848b737d233305d", "sha256": "7d4e4caa42d4259163e5e8da8eb0238163f8a07d1870339119ab9a8d486c6a75"}, "downloads": -1, "filename": "camacq-0.7.3.tar.gz", "has_sig": false, "md5_digest": "56c6f6b1052665608848b737d233305d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32124, "upload_time": "2020-03-10T15:21:09", "upload_time_iso_8601": "2020-03-10T15:21:09.477866Z", "url": "https://files.pythonhosted.org/packages/0c/a7/ef459de8bfa02e1334101619b49d00bae05d663460ed5ad2f7526de6c01b/camacq-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "f6abae5630578b71034e233ba7a6e17d", "sha256": "826288b1684752fe8731ccaa5c234abc92e6fcd3dd978fd81496f7ae367a0731"}, "downloads": -1, "filename": "camacq-0.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f6abae5630578b71034e233ba7a6e17d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43256, "upload_time": "2020-03-11T22:41:10", "upload_time_iso_8601": "2020-03-11T22:41:10.016493Z", "url": "https://files.pythonhosted.org/packages/8c/ff/837bd3c4e1115fb8087889131c3f7998879b635d5f843ba54e9391d4d98d/camacq-0.7.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7d9f50f91693e75e30cfef0d2225242", "sha256": "bb1c8efdfd062d504b3fdecc9bac357fea6fe8ae9005d25f9ee7f861befa3ac5"}, "downloads": -1, "filename": "camacq-0.7.4.tar.gz", "has_sig": false, "md5_digest": "a7d9f50f91693e75e30cfef0d2225242", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32134, "upload_time": "2020-03-11T22:41:11", "upload_time_iso_8601": "2020-03-11T22:41:11.480113Z", "url": "https://files.pythonhosted.org/packages/6f/46/5455dcc7de43d95473d3426effdf9bf897591e376a6b4249e81ef8374370/camacq-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "9d9ef184840895585b6b31f0741b12c1", "sha256": "574a89cbdb52af0d84338686b2a854b890d6fd7b4fdf3765c19122626c966340"}, "downloads": -1, "filename": "camacq-0.7.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9d9ef184840895585b6b31f0741b12c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43292, "upload_time": "2020-03-12T00:25:23", "upload_time_iso_8601": "2020-03-12T00:25:23.121860Z", "url": "https://files.pythonhosted.org/packages/ee/3d/7f68e14a23b9c0835006c6e5d0de379d85f66fbeab0fd7648f67821d33a2/camacq-0.7.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f095a7be81abe75b2772fe4cb383edf", "sha256": "44ae531c449985189aa2012bb909a39270b3256d1c44594112fdb74c03d590b6"}, "downloads": -1, "filename": "camacq-0.7.5.tar.gz", "has_sig": false, "md5_digest": "7f095a7be81abe75b2772fe4cb383edf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32182, "upload_time": "2020-03-12T00:25:24", "upload_time_iso_8601": "2020-03-12T00:25:24.415819Z", "url": "https://files.pythonhosted.org/packages/42/3a/8833fd9b3d9fb4c81f77fb268770d6a72c8b2cc8af2ad0a94f4e33521efa/camacq-0.7.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d9ef184840895585b6b31f0741b12c1", "sha256": "574a89cbdb52af0d84338686b2a854b890d6fd7b4fdf3765c19122626c966340"}, "downloads": -1, "filename": "camacq-0.7.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9d9ef184840895585b6b31f0741b12c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43292, "upload_time": "2020-03-12T00:25:23", "upload_time_iso_8601": "2020-03-12T00:25:23.121860Z", "url": "https://files.pythonhosted.org/packages/ee/3d/7f68e14a23b9c0835006c6e5d0de379d85f66fbeab0fd7648f67821d33a2/camacq-0.7.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f095a7be81abe75b2772fe4cb383edf", "sha256": "44ae531c449985189aa2012bb909a39270b3256d1c44594112fdb74c03d590b6"}, "downloads": -1, "filename": "camacq-0.7.5.tar.gz", "has_sig": false, "md5_digest": "7f095a7be81abe75b2772fe4cb383edf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32182, "upload_time": "2020-03-12T00:25:24", "upload_time_iso_8601": "2020-03-12T00:25:24.415819Z", "url": "https://files.pythonhosted.org/packages/42/3a/8833fd9b3d9fb4c81f77fb268770d6a72c8b2cc8af2ad0a94f4e33521efa/camacq-0.7.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:35 2020"}