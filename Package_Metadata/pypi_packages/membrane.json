{"info": {"author": "jscul", "author_email": "cullen.scott.john@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# membrane.py \ud83e\udda0\nA [Flask](https://palletsprojects.com/p/flask/) arg-parser &amp; splitter to ensure wanted data gets through, unwanted data stays out, and required data shows up.\n\nCompatible with [Flask-RESTful](https://flask-restful.readthedocs.io/en/latest/). \ud83d\udc4d\n\n## Basic Usage \ud83d\udc0d\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route('/')\ndef route_handler():\n    return \"No args~!\"\n```\n\nAbove we see a basic `Flask` application with a root API handler. No query options are yet passed to our root.\n\nLet's say we wanted to handle the query parameter `?limit=0` in the request handler. We can use membrane to do this.\n\n```python\nfrom flask import Flask, jsonify\nfrom membrane import membrane\napp = Flask(__name__)\n\n\n@app.route('/')\n@membrane({'limit': int})\ndef route_handler(microbe):\n\t'''Here microbe should be either an empty dict: {} or dict: {\"limit\": ?}'''\n\n    return jsonify(microbe)\n```\n\n## Defining Membranes \ud83d\udd2c\n\nThe *membrane*, a wrapper function, can take multiple layers of type *dict* which will act as a filter for the: 1) query parameters; 2) body; and 3) headers passed to the request handler. The route_handler will take these filtered dicts as `*args`.\n\nThe basic structure is as follows:\n\n```python\nsimple_membrane = {\"limit\": int}\ncomplex_membrane = {\n\t\"other_parameter\": {\n\t\t\"type\": lambda x: int(x),\n\t\t\"options\": (1, 2, 3,),\n\t\t\"default\": 1,\n\t\t\"required\": False,\n\t\t\"location\": \"params\"\n\t}\n}\n```\n\nIn the simple_membrane, we want to take limit from either the params, body, or headers and convert it to an int (or verify that it is of type int). We're also allowed to use custom functions to handle conversions here.\n\nThe complex_membrane is different in that it's a dict with additional options.\n\n - `type`: any callable function or class.\n - `options`: a tuple of accepted values.\n - `default`: if not provided, use this as a default. If you need this value to be generated at the time of parsing, provide a callable function that returns the proper value.\n - `required`: should the server throw an error if this value is not provided?\n - `location`: where in the request should we search for this value: (\"params\", \"body\", \"headers\", \"files\").\n\nTo use multiple layers for a route handler, simply list them out.\n\n```python\n@app.route('/')\n@membrane(simple_membrane, complex_membrane)\ndef route_handler(simple_microbe, complex_microbe):\n    return jsonify([simple_microbe, complex_microbe])\n```\n\n## Error Handling \u26a0\ufe0f\n\nExported from membrane are exceptions: `RequiredFieldError`, `NotAnOptionError`, `TypeConversionError`.\n\nYou can handle these errors yourself or use our default error handler.\n\n```python\nfrom membrane import error_handler\n\napp = Flask(__name__)\nerror_handler(app)\n```\n\nOtherwise you can handle these errors however you like.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jscul/membrane.py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "membrane", "package_url": "https://pypi.org/project/membrane/", "platform": "", "project_url": "https://pypi.org/project/membrane/", "project_urls": {"Homepage": "https://github.com/jscul/membrane.py"}, "release_url": "https://pypi.org/project/membrane/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Flask and Flask-RESTful argument parser.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>membrane.py \ud83e\udda0</h1>\n<p>A <a href=\"https://palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a> arg-parser &amp; splitter to ensure wanted data gets through, unwanted data stays out, and required data shows up.</p>\n<p>Compatible with <a href=\"https://flask-restful.readthedocs.io/en/latest/\" rel=\"nofollow\">Flask-RESTful</a>. \ud83d\udc4d</p>\n<h2>Basic Usage \ud83d\udc0d</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">route_handler</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"No args~!\"</span>\n</pre>\n<p>Above we see a basic <code>Flask</code> application with a root API handler. No query options are yet passed to our root.</p>\n<p>Let's say we wanted to handle the query parameter <code>?limit=0</code> in the request handler. We can use membrane to do this.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n<span class=\"kn\">from</span> <span class=\"nn\">membrane</span> <span class=\"kn\">import</span> <span class=\"n\">membrane</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"nd\">@membrane</span><span class=\"p\">({</span><span class=\"s1\">'limit'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">route_handler</span><span class=\"p\">(</span><span class=\"n\">microbe</span><span class=\"p\">):</span>\n\t<span class=\"sd\">'''Here microbe should be either an empty dict: {} or dict: {\"limit\": ?}'''</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">microbe</span><span class=\"p\">)</span>\n</pre>\n<h2>Defining Membranes \ud83d\udd2c</h2>\n<p>The <em>membrane</em>, a wrapper function, can take multiple layers of type <em>dict</em> which will act as a filter for the: 1) query parameters; 2) body; and 3) headers passed to the request handler. The route_handler will take these filtered dicts as <code>*args</code>.</p>\n<p>The basic structure is as follows:</p>\n<pre><span class=\"n\">simple_membrane</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">}</span>\n<span class=\"n\">complex_membrane</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s2\">\"other_parameter\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n\t\t<span class=\"s2\">\"options\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,),</span>\n\t\t<span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"location\"</span><span class=\"p\">:</span> <span class=\"s2\">\"params\"</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In the simple_membrane, we want to take limit from either the params, body, or headers and convert it to an int (or verify that it is of type int). We're also allowed to use custom functions to handle conversions here.</p>\n<p>The complex_membrane is different in that it's a dict with additional options.</p>\n<ul>\n<li><code>type</code>: any callable function or class.</li>\n<li><code>options</code>: a tuple of accepted values.</li>\n<li><code>default</code>: if not provided, use this as a default. If you need this value to be generated at the time of parsing, provide a callable function that returns the proper value.</li>\n<li><code>required</code>: should the server throw an error if this value is not provided?</li>\n<li><code>location</code>: where in the request should we search for this value: (\"params\", \"body\", \"headers\", \"files\").</li>\n</ul>\n<p>To use multiple layers for a route handler, simply list them out.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"nd\">@membrane</span><span class=\"p\">(</span><span class=\"n\">simple_membrane</span><span class=\"p\">,</span> <span class=\"n\">complex_membrane</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">route_handler</span><span class=\"p\">(</span><span class=\"n\">simple_microbe</span><span class=\"p\">,</span> <span class=\"n\">complex_microbe</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">([</span><span class=\"n\">simple_microbe</span><span class=\"p\">,</span> <span class=\"n\">complex_microbe</span><span class=\"p\">])</span>\n</pre>\n<h2>Error Handling \u26a0\ufe0f</h2>\n<p>Exported from membrane are exceptions: <code>RequiredFieldError</code>, <code>NotAnOptionError</code>, <code>TypeConversionError</code>.</p>\n<p>You can handle these errors yourself or use our default error handler.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">membrane</span> <span class=\"kn\">import</span> <span class=\"n\">error_handler</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">error_handler</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Otherwise you can handle these errors however you like.</p>\n\n          </div>"}, "last_serial": 6133899, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9f5a65676817ee12a65f17cd94c0eb34", "sha256": "2f165b7508d01544940c768abff2e6737b2ebda879377c2bc3e1c4024a767719"}, "downloads": -1, "filename": "membrane-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f5a65676817ee12a65f17cd94c0eb34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5313, "upload_time": "2019-11-08T20:16:22", "upload_time_iso_8601": "2019-11-08T20:16:22.669252Z", "url": "https://files.pythonhosted.org/packages/fd/30/9382f65f982a9a9ae59538e9eb2e0f14c02af9001290be44a3efe91285d8/membrane-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "086f376e71bb51557527c4e2b2ef1c52", "sha256": "dc24ae4119e58b25b2dee11fabbf892eb6343b2060a544a4abf30a2f1f233baa"}, "downloads": -1, "filename": "membrane-0.0.1.tar.gz", "has_sig": false, "md5_digest": "086f376e71bb51557527c4e2b2ef1c52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3917, "upload_time": "2019-11-08T20:16:25", "upload_time_iso_8601": "2019-11-08T20:16:25.121100Z", "url": "https://files.pythonhosted.org/packages/fb/9a/17b4e34d041dbe04ea1583ef93acaca2a13382fba8aa1d10338d2190f72d/membrane-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e27cdc947a0bffbf81b380082d929098", "sha256": "be714089cee3798d2a4e0b3c99f92a05f35b68f70b58840106c0be3988fd52aa"}, "downloads": -1, "filename": "membrane-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e27cdc947a0bffbf81b380082d929098", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7243, "upload_time": "2019-11-08T20:36:41", "upload_time_iso_8601": "2019-11-08T20:36:41.724837Z", "url": "https://files.pythonhosted.org/packages/bb/7c/6b22d616de03ce9326b600c7f7128d0a4e186f87fe5c8e962423d07f5fb5/membrane-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a2e4c4b2bfe1526c7de63e54c692cd0", "sha256": "7f9b8261b9cdde99f30aa511978b0a05f17bc31eced629829ac55f5e34818a8f"}, "downloads": -1, "filename": "membrane-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7a2e4c4b2bfe1526c7de63e54c692cd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3903, "upload_time": "2019-11-08T20:36:43", "upload_time_iso_8601": "2019-11-08T20:36:43.701216Z", "url": "https://files.pythonhosted.org/packages/d0/3c/e2e86374793595d6ecfe04471d8e0f48759c7125b7d15358f287923230b0/membrane-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f9129c01d577b3ab3ff67b6bb4be88ad", "sha256": "72c76633c17746b12755046efc7bb0d917c5b2af7df5a2bd70d59a68cc3d855a"}, "downloads": -1, "filename": "membrane-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f9129c01d577b3ab3ff67b6bb4be88ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5347, "upload_time": "2019-11-08T20:40:57", "upload_time_iso_8601": "2019-11-08T20:40:57.356757Z", "url": "https://files.pythonhosted.org/packages/37/d5/66bd4615b5d7abee4d728f1c7614f467031c2029599cde3cb0f4106844a3/membrane-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3798f3c50dd01e1a34af528fbe59beda", "sha256": "dcc5d2142aa32a7012f63f2f09368b7ddcd4fd3d20ce4d58f7577d1f2486a313"}, "downloads": -1, "filename": "membrane-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3798f3c50dd01e1a34af528fbe59beda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3904, "upload_time": "2019-11-08T20:41:00", "upload_time_iso_8601": "2019-11-08T20:41:00.599523Z", "url": "https://files.pythonhosted.org/packages/ed/5d/47d33ba91a364638f0521be799b845db9e568263834ee8b30a5d89df521f/membrane-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a1b5f4f0d766208dc9c35e3518c28e4b", "sha256": "3b99db52232c1daf57f84bec7fbfbe92d91568857f503448dd5d57a3593a9d1b"}, "downloads": -1, "filename": "membrane-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a1b5f4f0d766208dc9c35e3518c28e4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5330, "upload_time": "2019-11-14T01:20:27", "upload_time_iso_8601": "2019-11-14T01:20:27.194160Z", "url": "https://files.pythonhosted.org/packages/33/fe/19857336f39d3a9ee738934cdbf5908d441cc3146d85f3254361089a6ed1/membrane-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c31767a6f2ee7f081a5cae5a9513bd2d", "sha256": "00a19ec79f012edc5cd0dee496a8ad6f09c06ad58de749199aaa7e5de10fb1b4"}, "downloads": -1, "filename": "membrane-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c31767a6f2ee7f081a5cae5a9513bd2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3884, "upload_time": "2019-11-14T01:20:28", "upload_time_iso_8601": "2019-11-14T01:20:28.787233Z", "url": "https://files.pythonhosted.org/packages/71/6c/9dcb579fa60a23551a56f065a4ecfc058a9ad50e3caef08fab202c010e92/membrane-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1b5f4f0d766208dc9c35e3518c28e4b", "sha256": "3b99db52232c1daf57f84bec7fbfbe92d91568857f503448dd5d57a3593a9d1b"}, "downloads": -1, "filename": "membrane-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a1b5f4f0d766208dc9c35e3518c28e4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5330, "upload_time": "2019-11-14T01:20:27", "upload_time_iso_8601": "2019-11-14T01:20:27.194160Z", "url": "https://files.pythonhosted.org/packages/33/fe/19857336f39d3a9ee738934cdbf5908d441cc3146d85f3254361089a6ed1/membrane-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c31767a6f2ee7f081a5cae5a9513bd2d", "sha256": "00a19ec79f012edc5cd0dee496a8ad6f09c06ad58de749199aaa7e5de10fb1b4"}, "downloads": -1, "filename": "membrane-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c31767a6f2ee7f081a5cae5a9513bd2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3884, "upload_time": "2019-11-14T01:20:28", "upload_time_iso_8601": "2019-11-14T01:20:28.787233Z", "url": "https://files.pythonhosted.org/packages/71/6c/9dcb579fa60a23551a56f065a4ecfc058a9ad50e3caef08fab202c010e92/membrane-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:22 2020"}