{"info": {"author": "Frederik Siegumfeldt", "author_email": "siegumfeldt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# staticsql\n\n`staticsql` is a library for working with StaticSQL entity metadata files. For more information about StaticSQL, see https://github.com/iteg-hq/staticsql.\n\n## Quick start\n\nInstall:\n\n```\npip install staticsql\n```\n\nVersion check:\n\n```\n>>> import staticsql\n>>> staticsql.__version__\n'0.9.3'\n```\n\n`staticsql` provides a number of ways of creating metadata objects:\n\n- Creating them programmatically\n- Loading them from existing json files\n- Parsing SQL files\n- Extracting them from live databases\n\nWe'll look at these in turn below.\n\n### Using `Entity` and `Attribute`\n\nYou can create metadata definitions in code, by using the `Entity` and `Attribute` classes:\n\n```python\n>>> from staticsql.entity import Entity, Attribute\n>>> \n>>> entity = Entity(schema=\"dbo\", name=\"Person\")\n>>>\n>>> name_attribute = Attribute(name=\"Name\", data_type=\"NVARCHAR(50)\")\n>>> age_attribute = Attribute(name=\"Age\", data_type=\"INT\", is_nullable=False)\n>>> entity.attributes.extend([name_attribute, age_attribute])\n>>> \n>>> print(entity.json())\n{\n    \"schema\": \"dbo\",\n    \"name\": \"Person\",\n    \"attributes\": [\n        {\n            \"name\": \"Name\",\n            \"data_type\": \"NVARCHAR(50)\",\n            \"is_nullable\": True\n        },\n        {\n            \"name\": \"Age\",\n            \"data_type\": \"INT\",\n            \"is_nullable\": false\n        }\n    ]\n}\n>>> entity.save()\n```\n\nThe `save()` method of `Entity` saves the metadata to `dbo.Person.json` - the name is constructed using the schema and entity names. You can pass a path to `save` to save it under a different name.\n\n### Loading from json files\n\nYou can load, modify and save existing metadata files:\n\n```python\n>>> import staticsql.entity\n>>> \n>>> entity = staticsql.entity.load(\"dbo.Person.json\")\n>>> entity.attributes.append(\n...     Attribute(name=\"Address\",\n...               data_type=\"NVARCHAR(200)\",\n...               is_nullable=True))\n>>> entity.save()\n```\n\nIn this case, calling `save()` with no arguments saves the file to the path from which it was loaded, and passing a path to `save()` saves it somewhere else.\n\n### Parsing SQL\n\nIf the entities you're working with exist as CREATE TABLE statements (from a data modelling tool or a legacy solution), you can turn them into metadata objects by using `staticsql.sql.parse()`:\n\n```python\n>>> import staticsql.sql\n>>> \n>>> print(staticsql.sql.parse(\"\"\"\n... CREATE TABLE dbo.Person (\n...     [Name] NVARCHAR(50) NOT NULL PRIMARY KEY\n...   , Age INT NULL\n... )\n... \"\"\", unique_tag=\"unique\").json())\n{\n    \"schema\": \"dbo\",\n    \"name\": \"Person\",\n    \"attributes\": [\n        {\n            \"name\": \"Name\",\n            \"data_type\": \"NVARCHAR(50)\",\n            \"is_nullable\": false,\n            \"tags\": [\n                \"unique:1\"\n            ]\n        },\n        {\n            \"name\": \"Age\",\n            \"data_type\": \"INT\",\n            \"is_nullable\": true\n        }\n    ]\n}\n>>>\n```\n\nPassing `unique_tag` tells `staticsql` to tag the metadata with primary key information. If you don't pass it, no tags will be added. \n\nYou can also use `parse()` on view definitions:\n\n```\n>>> print(parse(\"\"\"\n... CREATE VIEW schema.Person\n... AS\n... SELECT \n...     'Bruce Wayne' AS [Name]\n...   , 53 AS Age\n... FROM schema.Table\n... \"\"\").json())\n{\n    \"schema\": \"schema\",\n    \"name\": \"Person\",\n    \"attributes\": [\n        {\n            \"name\": \"Name\",\n            \"data_type\": null,\n            \"is_nullable\": null\n        },\n        {\n            \"name\": \"Age\",\n            \"data_type\": null,\n            \"is_nullable\": null\n        }\n    ]\n}\n```\n\nNeither data types nor nullability of the columns are inferred.\n\n### Extracting from databases\n\nYou can extract metadata from database connections using `staticsql.database.extract()`:\n\n```python\n>>> import staticsql.database\n>>> import pyodbc\n>>> with pyodbc.connect(\"Connection=String;goes=here;\") as conn:\n...     for entity in staticsql.database.extract(conn):\n...         entity.save()\n```\n\nThis creates one file per entity and will extract all metadata for views, including column data types and nullability.\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iteg-hq/staticsql", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "staticsql", "package_url": "https://pypi.org/project/staticsql/", "platform": "", "project_url": "https://pypi.org/project/staticsql/", "project_urls": {"Homepage": "https://github.com/iteg-hq/staticsql"}, "release_url": "https://pypi.org/project/staticsql/0.9.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Library for working with StaticSQL entity metadata files.", "version": "0.9.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>staticsql</h1>\n<p><code>staticsql</code> is a library for working with StaticSQL entity metadata files. For more information about StaticSQL, see <a href=\"https://github.com/iteg-hq/staticsql\" rel=\"nofollow\">https://github.com/iteg-hq/staticsql</a>.</p>\n<h2>Quick start</h2>\n<p>Install:</p>\n<pre><code>pip install staticsql\n</code></pre>\n<p>Version check:</p>\n<pre><code>&gt;&gt;&gt; import staticsql\n&gt;&gt;&gt; staticsql.__version__\n'0.9.3'\n</code></pre>\n<p><code>staticsql</code> provides a number of ways of creating metadata objects:</p>\n<ul>\n<li>Creating them programmatically</li>\n<li>Loading them from existing json files</li>\n<li>Parsing SQL files</li>\n<li>Extracting them from live databases</li>\n</ul>\n<p>We'll look at these in turn below.</p>\n<h3>Using <code>Entity</code> and <code>Attribute</code></h3>\n<p>You can create metadata definitions in code, by using the <code>Entity</code> and <code>Attribute</code> classes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">staticsql.entity</span> <span class=\"kn\">import</span> <span class=\"n\">Entity</span><span class=\"p\">,</span> <span class=\"n\">Attribute</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">entity</span> <span class=\"o\">=</span> <span class=\"n\">Entity</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s2\">\"dbo\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Person\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">name_attribute</span> <span class=\"o\">=</span> <span class=\"n\">Attribute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s2\">\"NVARCHAR(50)\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">age_attribute</span> <span class=\"o\">=</span> <span class=\"n\">Attribute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Age\"</span><span class=\"p\">,</span> <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s2\">\"INT\"</span><span class=\"p\">,</span> <span class=\"n\">is_nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">name_attribute</span><span class=\"p\">,</span> <span class=\"n\">age_attribute</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">())</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dbo\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Person\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"attributes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NVARCHAR(50)\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_nullable\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Age\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"INT\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_nullable\"</span><span class=\"p\">:</span> <span class=\"n\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>save()</code> method of <code>Entity</code> saves the metadata to <code>dbo.Person.json</code> - the name is constructed using the schema and entity names. You can pass a path to <code>save</code> to save it under a different name.</p>\n<h3>Loading from json files</h3>\n<p>You can load, modify and save existing metadata files:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">staticsql.entity</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">entity</span> <span class=\"o\">=</span> <span class=\"n\">staticsql</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"dbo.Person.json\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">Attribute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Address\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>               <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s2\">\"NVARCHAR(200)\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>               <span class=\"n\">is_nullable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>In this case, calling <code>save()</code> with no arguments saves the file to the path from which it was loaded, and passing a path to <code>save()</code> saves it somewhere else.</p>\n<h3>Parsing SQL</h3>\n<p>If the entities you're working with exist as CREATE TABLE statements (from a data modelling tool or a legacy solution), you can turn them into metadata objects by using <code>staticsql.sql.parse()</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">staticsql.sql</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">staticsql</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">... CREATE TABLE dbo.Person (</span>\n<span class=\"s2\">...     [Name] NVARCHAR(50) NOT NULL PRIMARY KEY</span>\n<span class=\"s2\">...   , Age INT NULL</span>\n<span class=\"s2\">... )</span>\n<span class=\"s2\">... \"\"\"</span><span class=\"p\">,</span> <span class=\"n\">unique_tag</span><span class=\"o\">=</span><span class=\"s2\">\"unique\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">())</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dbo\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Person\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"attributes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NVARCHAR(50)\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_nullable\"</span><span class=\"p\">:</span> <span class=\"n\">false</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"unique:1\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Age\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"INT\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_nullable\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Passing <code>unique_tag</code> tells <code>staticsql</code> to tag the metadata with primary key information. If you don't pass it, no tags will be added.</p>\n<p>You can also use <code>parse()</code> on view definitions:</p>\n<pre><code>&gt;&gt;&gt; print(parse(\"\"\"\n... CREATE VIEW schema.Person\n... AS\n... SELECT \n...     'Bruce Wayne' AS [Name]\n...   , 53 AS Age\n... FROM schema.Table\n... \"\"\").json())\n{\n    \"schema\": \"schema\",\n    \"name\": \"Person\",\n    \"attributes\": [\n        {\n            \"name\": \"Name\",\n            \"data_type\": null,\n            \"is_nullable\": null\n        },\n        {\n            \"name\": \"Age\",\n            \"data_type\": null,\n            \"is_nullable\": null\n        }\n    ]\n}\n</code></pre>\n<p>Neither data types nor nullability of the columns are inferred.</p>\n<h3>Extracting from databases</h3>\n<p>You can extract metadata from database connections using <code>staticsql.database.extract()</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">staticsql.database</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyodbc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">pyodbc</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">\"Connection=String;goes=here;\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">entity</span> <span class=\"ow\">in</span> <span class=\"n\">staticsql</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>This creates one file per entity and will extract all metadata for views, including column data types and nullability.</p>\n\n          </div>"}, "last_serial": 7187350, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "f4ad2dd8c464e52b75dc7d60fa969826", "sha256": "c79c19ff80f33734dce9e284a2a5b2d4877020d2e40dd4cfb5f1cf8ee3358670"}, "downloads": -1, "filename": "staticsql-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f4ad2dd8c464e52b75dc7d60fa969826", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5552, "upload_time": "2020-04-15T20:38:19", "upload_time_iso_8601": "2020-04-15T20:38:19.525086Z", "url": "https://files.pythonhosted.org/packages/67/66/263b739fd5bf90fb2d71e1224a3c48844742e7cc90464c77378474b51056/staticsql-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a39a3452c45067ba2f72d2ac0cf692c4", "sha256": "7e57d33f586d2a416f4e64bb4f707788bdf4128d7a7e9c20640bff62c178b271"}, "downloads": -1, "filename": "staticsql-0.9.0.tar.gz", "has_sig": false, "md5_digest": "a39a3452c45067ba2f72d2ac0cf692c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4667, "upload_time": "2020-04-15T20:38:21", "upload_time_iso_8601": "2020-04-15T20:38:21.610592Z", "url": "https://files.pythonhosted.org/packages/37/b4/656e37da143e0b2963e5e7bcbc1ed84c239906b258cda71b3f3060c80e16/staticsql-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "2afb1e1cda37a053bb91162a474f88a4", "sha256": "702d6a6bc5b3235287b8e6f99a90b9bff678ad46d49dd3fea4d4007c7be04f7e"}, "downloads": -1, "filename": "staticsql-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2afb1e1cda37a053bb91162a474f88a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6565, "upload_time": "2020-04-23T08:16:40", "upload_time_iso_8601": "2020-04-23T08:16:40.027674Z", "url": "https://files.pythonhosted.org/packages/72/5e/c2d9bfcdaf1bcc2252c6c4e4fde08a00c3d4e5a51d7a79f25222bd3b59a5/staticsql-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17d33b73ae56908b10a1709f293ff39a", "sha256": "f032ed0f76177291a8f647b1dae5f3c6640211c65395705175074fdfee713e6f"}, "downloads": -1, "filename": "staticsql-0.9.1.tar.gz", "has_sig": false, "md5_digest": "17d33b73ae56908b10a1709f293ff39a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5592, "upload_time": "2020-04-23T08:16:40", "upload_time_iso_8601": "2020-04-23T08:16:40.945023Z", "url": "https://files.pythonhosted.org/packages/6e/20/79ebeda2ec52b613fa7886cc10bcf468e6c1dd5e5299d46b34d96bbc918c/staticsql-0.9.1.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "3f10a6dcf145cf68082e819d921cb23d", "sha256": "26e14788d3724d0a7ff8ed5cfcfe1dc09a759b56ec25e5ee1830f468f107c554"}, "downloads": -1, "filename": "staticsql-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3f10a6dcf145cf68082e819d921cb23d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11997, "upload_time": "2020-05-01T20:28:30", "upload_time_iso_8601": "2020-05-01T20:28:30.257391Z", "url": "https://files.pythonhosted.org/packages/4a/40/26597135ebf0a0c32cb5e214bb0b3016fb06e427f6133a26de08d7f0f637/staticsql-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15b7fddc1a419ec87b38d820b3226983", "sha256": "90bb63a4137495d71ccbb4ae46e04ed4d37265d0f8f3916475b66f1379390a0a"}, "downloads": -1, "filename": "staticsql-0.9.3.tar.gz", "has_sig": false, "md5_digest": "15b7fddc1a419ec87b38d820b3226983", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10915, "upload_time": "2020-05-01T20:28:31", "upload_time_iso_8601": "2020-05-01T20:28:31.408306Z", "url": "https://files.pythonhosted.org/packages/df/7f/a4911c18ae0422364c27e4d2951e3b621b57b6f479afa83da4c551c4214c/staticsql-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "52c6043679230d4bbb17ad7bdc9f5f71", "sha256": "47d5d2a87ab0d9885e30f756401dac249fcf94654b753ae60358543c867a6534"}, "downloads": -1, "filename": "staticsql-0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "52c6043679230d4bbb17ad7bdc9f5f71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12095, "upload_time": "2020-05-07T10:39:50", "upload_time_iso_8601": "2020-05-07T10:39:50.015462Z", "url": "https://files.pythonhosted.org/packages/56/86/7fbbbafb4e16ee0176da09b6f042bc4ab834926ea2b7bfd956244945e74a/staticsql-0.9.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e52f2ebd279dd526981ad1ee60b14d69", "sha256": "cfeeec73cdc504ffe2cfe684f44d322f79912805986b96be91634589ec9e6a01"}, "downloads": -1, "filename": "staticsql-0.9.4.tar.gz", "has_sig": false, "md5_digest": "e52f2ebd279dd526981ad1ee60b14d69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11046, "upload_time": "2020-05-07T10:39:51", "upload_time_iso_8601": "2020-05-07T10:39:51.064761Z", "url": "https://files.pythonhosted.org/packages/5f/bb/2fd56542dfb3a3692d42ff4d9dfbc5f6a3e81c94c678874acfd173ed17bd/staticsql-0.9.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52c6043679230d4bbb17ad7bdc9f5f71", "sha256": "47d5d2a87ab0d9885e30f756401dac249fcf94654b753ae60358543c867a6534"}, "downloads": -1, "filename": "staticsql-0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "52c6043679230d4bbb17ad7bdc9f5f71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12095, "upload_time": "2020-05-07T10:39:50", "upload_time_iso_8601": "2020-05-07T10:39:50.015462Z", "url": "https://files.pythonhosted.org/packages/56/86/7fbbbafb4e16ee0176da09b6f042bc4ab834926ea2b7bfd956244945e74a/staticsql-0.9.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e52f2ebd279dd526981ad1ee60b14d69", "sha256": "cfeeec73cdc504ffe2cfe684f44d322f79912805986b96be91634589ec9e6a01"}, "downloads": -1, "filename": "staticsql-0.9.4.tar.gz", "has_sig": false, "md5_digest": "e52f2ebd279dd526981ad1ee60b14d69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11046, "upload_time": "2020-05-07T10:39:51", "upload_time_iso_8601": "2020-05-07T10:39:51.064761Z", "url": "https://files.pythonhosted.org/packages/5f/bb/2fd56542dfb3a3692d42ff4d9dfbc5f6a3e81c94c678874acfd173ed17bd/staticsql-0.9.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:26 2020"}