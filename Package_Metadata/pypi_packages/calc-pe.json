{"info": {"author": "Daniele Ongari", "author_email": "daniele.ongari@epfl.ch", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "# calc_pe\n\ncalc_pe computes the parasitic energy for CO<sub>2</sub> capture from CO<sub>2</sub> and N<sub>2</sub>  isotherms.\n\n### Install\n```\ngit clone https://github.com/danieleongari/calc_pe.git\ncd calc_pe\npip install .\n```\n\n### Input and run\n\n```\n$ calc_pe Mg-MOF74 coal -rho 914.88 -cp 896 -process TPSA -datapath ./tests/\n```\n\nSee `calc_pe --help` for the input description.\n\nUse `calc_pe --log` for printing the debug log file.\n\n#### NB:\n\n* The isotherm data should be put in the `{datapath}/{structure_name}` folder.\n\n* The temperature at which the isotherm data is calculated is automatically\nread from the filename `{datapath}/{structure_name}/{adsorbate_name}/{temperature}.csv`.\n\n* Isotherms are fitted using [`pyiast.InterpolatorIsotherm`](https://pyiast.readthedocs.io/en/latest/#interpolatorisotherm)\nwith `fill_value = uptake.max()`. Therefore, the isotherm should be well\nsaturated, because for higher pressures the loading is extrapolated as the\nmaximum uptake.\n\n* The heat of adsorption (HoA) needs to be provided in kJ/mol for all the\nloading pressures of the isotherm. It is needed to shift the original isotherm\nto a new temperature using the Classius-Clapyeron equation. Note that the HoA\nis defined here with a NEGATIVE value.\n\n* You can provide density and cp as single value files `cp.csv` and `rho.csv`:\nsee the tests as example.\n\n* For testing the minimal inputs are:\n```\n$ cd tests/\n$ calc_pe Mg-MOF74 coal\n$ calc_pe HKUST-1 coal\n```\n\n### Output\n\nIn the output, the program prints:\n\n```\nMg-MOF74: PE(MJ/kg)= 0.867: Pd(bar)= 0.01 Td(K)= 333.0 EL(-) = 0.235 Q(MJ/kg)= 0.124 Wcomp(MJ/kg)= 0.743 WCv(kg/m3)= 114.655 WCg(kg/kg)= 0.193 pur(-)= 0.967\n```\n\n* Name of the adsorbent\n* `PE(MJ/kg)`: parasitic energy per kg of CO<sub>2</sub> (Note: PE=Q+Wcomp)\n* `Pd(bar)`: optimal desorption pressure\n* `Td(K)`: optimal desorption temperature\n* `EL(J/J)`: fraction of electricity loss\n* `Q(MJ/kg)`: heat requirement\n* `Wcomp(MJ/kg)`: compression work\n* `WCv(kg/m3)`: volumetric working capacity, i.e.,\nmass of CO<sub>2</sub> produced per m<sup>2</sup> of bed,\nconsidering `-vf` void fraction.\n* `WCg(kg/kg)`: gravimetric working capacity, i.e.,\nmass of CO<sub>2</sub> produced per kg of bed,\nconsidering `-vf` void fraction.\n* `pur(mol/mol)`: molar fraction of CO<sub>2</sub> final purity (-)\n\nA warning is printed in case of negative working capacity\nfor all the tested desorption conditions, e.g.:\n\n```\n$ calc_pe HKUST-1 air\nHKUST-1: Unfeasible process!\n```\n\n#### NB:\n\n* The Henry coefficient for CO<sub>2</sub> is a good pre-screening parameter\n\n* The working capacity is also very important, since it allows for less cycles\nusing the same amount of adsorbent (or less adsorbent needed with the same\ncycles).\n\n* The final CO<sub>2</sub> purity is less than the imposed purity, `-yd`\n(default: 0.99): we use the `yd` value as an approximation of the gas phase at\ndesorption to get the uptake in the adsorbent at the desorption condition\n(using IAST). Note that the PE is not very sensitive to `yd`\n(see [Joos et al. (2016)](http://doi.org/10.1039/c6fd00031b))\nand there is not a motivated need for reiteration.\nThe final CO<sub>2</sub> purity is computed as the working capacity of\nCO<sub>2</sub> over the sum of the working capacities of both CO<sub>2</sub>\nand N<sub>2</sub>.\n\n* By default the program prints the results for optimal PE (i.e., the lowest).\nHowever, one can search for other optimal parameters by using the `-opt` command:\nlowest `Q` if he is not interest in compressing the CO<sub>2</sub>,\nhighest working capacity (`WC`) or highest CO<sub>2</sub> final purity (`pur`).\n*Note that these may not be anymore optimization problems, returning just\nthe max/min T and P conditions.*\n\n\n### Dependencies\n\ncalc_pe uses:\n\n* [pyIAST](https://github.com/CorySimon/pyIAST)\n* numpy\n* pandas\n\n### References\n\nIf you use calc_pe, please consider citing:\n\n* [Evaluating different classes of porous materials for carbon capture (2014)](http://doi.org/10.1039/C4EE02636E)\n* [In silico screening of carbon-capture materials (2012)](http://dx.doi.org/10.1038/nmat3336)\n\nThis program has been used in:\n\n* [Building a Consistent and Reproducible Database for Adsorption Evaluation in Covalent\u2013Organic Frameworks](https://pubs.acs.org/doi/abs/10.1021/acscentsci.9b00619)\n\n### Authors\n* Johanna M. Huck\n* Li-Chiang Lin\n* Cory M. Simon\n* Adam Berger\n* Daniele Ongari (restyling, December 2018)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danieleongari/calc_pe", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "calc-pe", "package_url": "https://pypi.org/project/calc-pe/", "platform": "", "project_url": "https://pypi.org/project/calc-pe/", "project_urls": {"Homepage": "https://github.com/danieleongari/calc_pe"}, "release_url": "https://pypi.org/project/calc-pe/1.0.1/", "requires_dist": ["numpy", "pandas (>=0.24.0)", "pyiast"], "requires_python": "", "summary": "Calculator for the CO2 parasitic energy from CO2 and N2 isotherms", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>calc_pe</h1>\n<p>calc_pe computes the parasitic energy for CO<sub>2</sub> capture from CO<sub>2</sub> and N<sub>2</sub>  isotherms.</p>\n<h3>Install</h3>\n<pre><code>git clone https://github.com/danieleongari/calc_pe.git\ncd calc_pe\npip install .\n</code></pre>\n<h3>Input and run</h3>\n<pre><code>$ calc_pe Mg-MOF74 coal -rho 914.88 -cp 896 -process TPSA -datapath ./tests/\n</code></pre>\n<p>See <code>calc_pe --help</code> for the input description.</p>\n<p>Use <code>calc_pe --log</code> for printing the debug log file.</p>\n<h4>NB:</h4>\n<ul>\n<li>\n<p>The isotherm data should be put in the <code>{datapath}/{structure_name}</code> folder.</p>\n</li>\n<li>\n<p>The temperature at which the isotherm data is calculated is automatically\nread from the filename <code>{datapath}/{structure_name}/{adsorbate_name}/{temperature}.csv</code>.</p>\n</li>\n<li>\n<p>Isotherms are fitted using <a href=\"https://pyiast.readthedocs.io/en/latest/#interpolatorisotherm\" rel=\"nofollow\"><code>pyiast.InterpolatorIsotherm</code></a>\nwith <code>fill_value = uptake.max()</code>. Therefore, the isotherm should be well\nsaturated, because for higher pressures the loading is extrapolated as the\nmaximum uptake.</p>\n</li>\n<li>\n<p>The heat of adsorption (HoA) needs to be provided in kJ/mol for all the\nloading pressures of the isotherm. It is needed to shift the original isotherm\nto a new temperature using the Classius-Clapyeron equation. Note that the HoA\nis defined here with a NEGATIVE value.</p>\n</li>\n<li>\n<p>You can provide density and cp as single value files <code>cp.csv</code> and <code>rho.csv</code>:\nsee the tests as example.</p>\n</li>\n<li>\n<p>For testing the minimal inputs are:</p>\n</li>\n</ul>\n<pre><code>$ cd tests/\n$ calc_pe Mg-MOF74 coal\n$ calc_pe HKUST-1 coal\n</code></pre>\n<h3>Output</h3>\n<p>In the output, the program prints:</p>\n<pre><code>Mg-MOF74: PE(MJ/kg)= 0.867: Pd(bar)= 0.01 Td(K)= 333.0 EL(-) = 0.235 Q(MJ/kg)= 0.124 Wcomp(MJ/kg)= 0.743 WCv(kg/m3)= 114.655 WCg(kg/kg)= 0.193 pur(-)= 0.967\n</code></pre>\n<ul>\n<li>Name of the adsorbent</li>\n<li><code>PE(MJ/kg)</code>: parasitic energy per kg of CO<sub>2</sub> (Note: PE=Q+Wcomp)</li>\n<li><code>Pd(bar)</code>: optimal desorption pressure</li>\n<li><code>Td(K)</code>: optimal desorption temperature</li>\n<li><code>EL(J/J)</code>: fraction of electricity loss</li>\n<li><code>Q(MJ/kg)</code>: heat requirement</li>\n<li><code>Wcomp(MJ/kg)</code>: compression work</li>\n<li><code>WCv(kg/m3)</code>: volumetric working capacity, i.e.,\nmass of CO<sub>2</sub> produced per m<sup>2</sup> of bed,\nconsidering <code>-vf</code> void fraction.</li>\n<li><code>WCg(kg/kg)</code>: gravimetric working capacity, i.e.,\nmass of CO<sub>2</sub> produced per kg of bed,\nconsidering <code>-vf</code> void fraction.</li>\n<li><code>pur(mol/mol)</code>: molar fraction of CO<sub>2</sub> final purity (-)</li>\n</ul>\n<p>A warning is printed in case of negative working capacity\nfor all the tested desorption conditions, e.g.:</p>\n<pre><code>$ calc_pe HKUST-1 air\nHKUST-1: Unfeasible process!\n</code></pre>\n<h4>NB:</h4>\n<ul>\n<li>\n<p>The Henry coefficient for CO<sub>2</sub> is a good pre-screening parameter</p>\n</li>\n<li>\n<p>The working capacity is also very important, since it allows for less cycles\nusing the same amount of adsorbent (or less adsorbent needed with the same\ncycles).</p>\n</li>\n<li>\n<p>The final CO<sub>2</sub> purity is less than the imposed purity, <code>-yd</code>\n(default: 0.99): we use the <code>yd</code> value as an approximation of the gas phase at\ndesorption to get the uptake in the adsorbent at the desorption condition\n(using IAST). Note that the PE is not very sensitive to <code>yd</code>\n(see <a href=\"http://doi.org/10.1039/c6fd00031b\" rel=\"nofollow\">Joos et al. (2016)</a>)\nand there is not a motivated need for reiteration.\nThe final CO<sub>2</sub> purity is computed as the working capacity of\nCO<sub>2</sub> over the sum of the working capacities of both CO<sub>2</sub>\nand N<sub>2</sub>.</p>\n</li>\n<li>\n<p>By default the program prints the results for optimal PE (i.e., the lowest).\nHowever, one can search for other optimal parameters by using the <code>-opt</code> command:\nlowest <code>Q</code> if he is not interest in compressing the CO<sub>2</sub>,\nhighest working capacity (<code>WC</code>) or highest CO<sub>2</sub> final purity (<code>pur</code>).\n<em>Note that these may not be anymore optimization problems, returning just\nthe max/min T and P conditions.</em></p>\n</li>\n</ul>\n<h3>Dependencies</h3>\n<p>calc_pe uses:</p>\n<ul>\n<li><a href=\"https://github.com/CorySimon/pyIAST\" rel=\"nofollow\">pyIAST</a></li>\n<li>numpy</li>\n<li>pandas</li>\n</ul>\n<h3>References</h3>\n<p>If you use calc_pe, please consider citing:</p>\n<ul>\n<li><a href=\"http://doi.org/10.1039/C4EE02636E\" rel=\"nofollow\">Evaluating different classes of porous materials for carbon capture (2014)</a></li>\n<li><a href=\"http://dx.doi.org/10.1038/nmat3336\" rel=\"nofollow\">In silico screening of carbon-capture materials (2012)</a></li>\n</ul>\n<p>This program has been used in:</p>\n<ul>\n<li><a href=\"https://pubs.acs.org/doi/abs/10.1021/acscentsci.9b00619\" rel=\"nofollow\">Building a Consistent and Reproducible Database for Adsorption Evaluation in Covalent\u2013Organic Frameworks</a></li>\n</ul>\n<h3>Authors</h3>\n<ul>\n<li>Johanna M. Huck</li>\n<li>Li-Chiang Lin</li>\n<li>Cory M. Simon</li>\n<li>Adam Berger</li>\n<li>Daniele Ongari (restyling, December 2018)</li>\n</ul>\n\n          </div>"}, "last_serial": 6137101, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "55571d9eac48a3bde53a9e27dcae5e42", "sha256": "cbfc4cad837297db846ab99554b164348763f0fd0ad1e8d7d2a9057d09739811"}, "downloads": -1, "filename": "calc_pe-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55571d9eac48a3bde53a9e27dcae5e42", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9865, "upload_time": "2019-11-14T15:10:46", "upload_time_iso_8601": "2019-11-14T15:10:46.917383Z", "url": "https://files.pythonhosted.org/packages/02/76/4c36b7a892c369d7b508d06bce385d4fc991198614277add72e91fa3dcea/calc_pe-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bd1e2201e39a989c079c68745727d26", "sha256": "46fcc92974b06486864492f23aa9580aaee026d88a26476c533bd8dabd9d801c"}, "downloads": -1, "filename": "calc_pe-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0bd1e2201e39a989c079c68745727d26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9713, "upload_time": "2019-11-14T15:10:49", "upload_time_iso_8601": "2019-11-14T15:10:49.403307Z", "url": "https://files.pythonhosted.org/packages/2e/79/fc11c3e2ebb69052610d36f8fe8e34a72e74aac85a8539107ffc146174d8/calc_pe-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55571d9eac48a3bde53a9e27dcae5e42", "sha256": "cbfc4cad837297db846ab99554b164348763f0fd0ad1e8d7d2a9057d09739811"}, "downloads": -1, "filename": "calc_pe-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55571d9eac48a3bde53a9e27dcae5e42", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9865, "upload_time": "2019-11-14T15:10:46", "upload_time_iso_8601": "2019-11-14T15:10:46.917383Z", "url": "https://files.pythonhosted.org/packages/02/76/4c36b7a892c369d7b508d06bce385d4fc991198614277add72e91fa3dcea/calc_pe-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bd1e2201e39a989c079c68745727d26", "sha256": "46fcc92974b06486864492f23aa9580aaee026d88a26476c533bd8dabd9d801c"}, "downloads": -1, "filename": "calc_pe-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0bd1e2201e39a989c079c68745727d26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9713, "upload_time": "2019-11-14T15:10:49", "upload_time_iso_8601": "2019-11-14T15:10:49.403307Z", "url": "https://files.pythonhosted.org/packages/2e/79/fc11c3e2ebb69052610d36f8fe8e34a72e74aac85a8539107ffc146174d8/calc_pe-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:39 2020"}