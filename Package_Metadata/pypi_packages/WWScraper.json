{"info": {"author": "Kurt Telep", "author_email": "ktelep@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Topic :: Utilities"], "description": "WWScraper\n=========\n\nIntroduction\n------------\nWWScraper is a module designed to scrape the mobile WeightWatchers website.\n\nThe following functionality is supported:\n   Getting current PointsTracker data for any date\n   Searching the WW Database for foods\n   Quick Adding foods to the current day's tracker\n   Adding foods from the WW Database to the current day's tracker.\n\nNote: Food adds from the database only support their default unit of measure.\n\nThis module is in no way affiliated with WeightWatchers International, and is \nnot guaranteed to continue to work in the event of changes to their mobile site.\nIt requires you have a valid, paid eTools account in order to access this data.\n\nHistory\n-------\nI designed this module as I was not happy with the WW website requiring me to \nload up a bulky flash app just to search for foods, and the mobile interface \nis quite clumsy even in a full blown browser.  Being a nerd who spend a lot \nof time at the command line, I wanted a way to push points up to the site \nwithout having to fire up a browser.\n\nRequirements\n------------\nmechanize\nBeautifulSoup\n\nBasic Usage\n-----------\n\n    from WWScraper import WWScrape\n    \n    # Instantiate the object, and connect\n    ww_site = WWScrape()\n    ww_site.connect('wwmobileuser','wwmobilepass')\n   \n    # Quick add a food\n    ww_site.quick_add_food('Tacos',4,'Morning') \n\n    # Do a food search\n    potato_data = ww_site.food_search('potato')\n    \n    # Display our results (provided in tuples)\n    for result in potato_data:\n        print \"Name: %s, ID: %s, Serving: %s, Points: %s\" % result\n \n    # Add a food (assuming food_id has the id returned from a search)\n    ww_site.add_food(food_id,'Anytime')\n\n    # Add a food, but we ate twice the default amount listed\n    ww_site.add_food(food_id,'Anytime',multiplier=2)\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://http://pypi.python.org/pypi/WWScraper", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "WWScraper", "package_url": "https://pypi.org/project/WWScraper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/WWScraper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://http://pypi.python.org/pypi/WWScraper"}, "release_url": "https://pypi.org/project/WWScraper/0.21/", "requires_dist": null, "requires_python": null, "summary": "WeightWatchers eTools Site Scraper", "version": "0.21", "yanked": false, "html_description": "<div class=\"project-description\">\n            WWScraper<br>=========<br><br>Introduction<br>------------<br>WWScraper is a module designed to scrape the mobile WeightWatchers website.<br><br>The following functionality is supported:<br>   Getting current PointsTracker data for any date<br>   Searching the WW Database for foods<br>   Quick Adding foods to the current day's tracker<br>   Adding foods from the WW Database to the current day's tracker.<br><br>Note: Food adds from the database only support their default unit of measure.<br><br>This module is in no way affiliated with WeightWatchers International, and is <br>not guaranteed to continue to work in the event of changes to their mobile site.<br>It requires you have a valid, paid eTools account in order to access this data.<br><br>History<br>-------<br>I designed this module as I was not happy with the WW website requiring me to <br>load up a bulky flash app just to search for foods, and the mobile interface <br>is quite clumsy even in a full blown browser.  Being a nerd who spend a lot <br>of time at the command line, I wanted a way to push points up to the site <br>without having to fire up a browser.<br><br>Requirements<br>------------<br>mechanize<br>BeautifulSoup<br><br>Basic Usage<br>-----------<br><br>    from WWScraper import WWScrape<br>    <br>    # Instantiate the object, and connect<br>    ww_site = WWScrape()<br>    ww_site.connect('wwmobileuser','wwmobilepass')<br>   <br>    # Quick add a food<br>    ww_site.quick_add_food('Tacos',4,'Morning') <br><br>    # Do a food search<br>    potato_data = ww_site.food_search('potato')<br>    <br>    # Display our results (provided in tuples)<br>    for result in potato_data:<br>        print \"Name: %s, ID: %s, Serving: %s, Points: %s\" % result<br> <br>    # Add a food (assuming food_id has the id returned from a search)<br>    ww_site.add_food(food_id,'Anytime')<br><br>    # Add a food, but we ate twice the default amount listed<br>    ww_site.add_food(food_id,'Anytime',multiplier=2)<br><br>\n          </div>"}, "last_serial": 785984, "releases": {"0.1": [{"comment_text": "built for Linux-3.2.0-26-generic-x86_64-with-glibc2.7", "digests": {"md5": "33dde9396c44f9f3769696e2b7488ca6", "sha256": "e8925e94c7ad4b169d6f23313e6ec0e4f9de7646169a7117df6f3f43cf0ffb6b"}, "downloads": -1, "filename": "WWScraper-0.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "33dde9396c44f9f3769696e2b7488ca6", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 5696, "upload_time": "2012-07-23T02:36:41", "upload_time_iso_8601": "2012-07-23T02:36:41.576332Z", "url": "https://files.pythonhosted.org/packages/01/60/cdcb48a85c432c49f95a8ffeab51917a60c029c982a8888a1d01e1d53d89/WWScraper-0.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "865a69f2c6da652ecaf9e5fa5955fc84", "sha256": "3c59a9ccc81f0bb2d8ca1663a478670810b5fae770615472079dbad5471180e1"}, "downloads": -1, "filename": "WWScraper-0.1.tar.gz", "has_sig": false, "md5_digest": "865a69f2c6da652ecaf9e5fa5955fc84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3842, "upload_time": "2012-07-23T02:36:43", "upload_time_iso_8601": "2012-07-23T02:36:43.252855Z", "url": "https://files.pythonhosted.org/packages/bc/20/11c9f0220411ea82476c152b2bc33855f67435c66809b3f371478cfb37c2/WWScraper-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "01fec5cef4f0f20da01a31f58d6c9b76", "sha256": "6b66a447216b15047d35d25e16e66badfbc048f24e90269a26f976c9c977cf44"}, "downloads": -1, "filename": "WWScraper-0.2.tar.gz", "has_sig": false, "md5_digest": "01fec5cef4f0f20da01a31f58d6c9b76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3856, "upload_time": "2012-09-03T20:12:43", "upload_time_iso_8601": "2012-09-03T20:12:43.063305Z", "url": "https://files.pythonhosted.org/packages/e8/d9/887dda7c95e4ec3e1c54a8b1169e832be5fb11112d286704f034bce82f75/WWScraper-0.2.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "1a376050b7312765c9ac4bf70452e5b1", "sha256": "585a2f67760625d1e13de63c898f58f0e0776ee7d869d3af5421ead636d287ef"}, "downloads": -1, "filename": "WWScraper-0.21.tar.gz", "has_sig": false, "md5_digest": "1a376050b7312765c9ac4bf70452e5b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5582, "upload_time": "2012-09-08T20:07:58", "upload_time_iso_8601": "2012-09-08T20:07:58.020916Z", "url": "https://files.pythonhosted.org/packages/7e/93/5e4a629daeec040abd48508b9f41c572c384d78c8d36e4a8bdc2f7473ef9/WWScraper-0.21.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a376050b7312765c9ac4bf70452e5b1", "sha256": "585a2f67760625d1e13de63c898f58f0e0776ee7d869d3af5421ead636d287ef"}, "downloads": -1, "filename": "WWScraper-0.21.tar.gz", "has_sig": false, "md5_digest": "1a376050b7312765c9ac4bf70452e5b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5582, "upload_time": "2012-09-08T20:07:58", "upload_time_iso_8601": "2012-09-08T20:07:58.020916Z", "url": "https://files.pythonhosted.org/packages/7e/93/5e4a629daeec040abd48508b9f41c572c384d78c8d36e4a8bdc2f7473ef9/WWScraper-0.21.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:40 2020"}