{"info": {"author": "Ad Engineering FANDOM", "author_email": "murbanek@fandom.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<p align=\"center\"><img width=\"500\" src=\"images/sroka.png\"/></p>\n\n# sroka package\n\nPackage providing simple Python access to data in:\n* Google Analytics\n* Google AdManager (GAM earlier DoubleClick for Publishers, DFP)\n* MOAT\n* Qubole\n* Rubicon\n* Athena\n* Google sheets\n* s3\n* MySQL\n* neo4j\n\nSroka library was checked to work for Python **>=3.5 <3.8**.\n\n## Developers\n\nInstall requirements and enable custom githooks:\n```\npip install -r requirements.txt\ngit config --local core.hooksPath .githooks/\n```  \nCheck style with flake8:\n```\nflake8 .\n```\n\n\n## Installation\n\n### Pypi last release\n\n```pip install sroka```\n\n### GitHub version (beta version)\n\n```pip install git+ssh://git@github.com/Wikia/sroka```\n\n\n## Configuration\n\nin home folder create `~/.sroka_config` (hidden folder) file where you will store:\n* ```config.ini``` file based on ```config.sample.ini``` with information to access Qubole, MOAT, Athena, S3 and Rubicon\n* ```client_secrets.json``` for GA access\n* ```ad_manager.json``` for GAM access\n\nAlternatively, you may set localization of your files during analysis:\n\n```python\nfrom sroka.config.config import setup_env_variables\nfrom sroka.config.config import setup_client_secret\nfrom sroka.config.config import setup_admanager_config\nsetup_env_variables('/file_path/config.ini')\nsetup_client_secret('/file_path/client_secrets.json')\nsetup_admanager_config('/file_path/ad_manager.json')\n```\n\n## Getting GA, GAM ang Google docs jsons with secrets\n\n### Google Analytics\n\n1.\tUse\u00a0[this wizard](https://console.developers.google.com/flows/enableapi?apiid=analytics.googleapis.com)\u00a0\nto create or select a project in the Google Developers Console and automatically turn on the API. Click\u00a0Continue, then\u00a0Go to credentials.\n2.\tOn the\u00a0Add credentials to your project\u00a0page, click the\u00a0Cancel\u00a0button.\n3.\tAt the top of the page, select the\u00a0OAuth consent screen\u00a0tab. Select an\u00a0Email address, enter a\u00a0Product name\u00a0if not already set, and click the\u00a0Save\u00a0button.\n4.\tSelect the\u00a0Credentials\u00a0tab, click the\u00a0Create credentials\u00a0button and select\u00a0OAuth client ID.\n5.\tSelect the application type\u00a0Other, enter the chosen name, and click the\u00a0Create\u00a0button.\n6.\tClick\u00a0OK\u00a0to dismiss the resulting dialog.\n7.\tClick the\u00a0file_download\u00a0(Download JSON) button to the right of the client ID.\n\n\n### GAM\n\n1. Follow [these instructions](https://developers.google.com/ad-manager/api/authentication#service) \n    - while adding a service account note that the role needs to have necessary viewing and reporting permissions.\n\nYou should end up with .json (!) file with credentials\n\n2. Make sure the *Name* in \"OAuth 2.0 client IDs\" matches the *service account* in \"Service account keys\": [here](https://console.developers.google.com/apis/credentials)\n4. Create GAM account as service account not a new user: https://support.google.com/admanager/answer/6078734?hl=en\n3. Once you have a service account, it can be used to access data in different networks. Simply add it as a new service account through GAM UI of the second network.\n4. Additional information can be specified in ```config.ini``` file:\n* network code - a default value that can be overwritten in a function call\n* application name - custom name of your network, if not specified, a generic value will be passed.\n\n\n### Google drive sheets credentials\n\nGo to [link](https://developers.google.com/sheets/api/quickstart/python) and click blue button\n`ENABLE THE GOOGLE SHEETS API` to create a project with access to google sheets. You should\nend up with `credentials.json` file that should be downloaded to `~/.sroka_config` folder.\n\n\n\n## Getting credentials & access tokens\n\n### Qubole\n\n1. Find your Qubole API Token (go to user -> My Profile -> my_account -> API Token -> show)\n2. Copy your Qubole API Token to ```config.ini``` file\n\n\n### Athena and s3 credentials\n\n1. You should have your aws_access_key_id and aws_secret_access_key from registration process in AWS console.\n2. s3bucket_name can be found in AWS console in Athena view when you click `Settings`, there you have `Query result location`.\nThe name of location without `s3://` and `/` is what you need.\n3. For Athena usage you need to set also region (AWS regional endpoint), e.g. `'us-east-1'`\n\n\n### Rubicon credentials\n1. You should have your id, username and password from Rubicon\n2. Copy values to ```config.ini``` file in relevant fields\n\n\n### MySQL connection information\n\n1. In order to connect to a remote MySQL server, you need to provide the `host` and `port` values in the configuration. If it is accessible through a unix socket, you need to provide the path to this socket instead in the `unix_socket` configuration field.\n2. If the MySQL server is protected by user credentials, you need to provide the `user` and `password` values in the configuration.\n3. You can optionally specify the database to which you want to connect in the `database` configuration field.\n\n## Common issues\n\n### macOS\n\nIf you see an error like `ValueError: unknown locale: UTF-8`\n\nPlease add to `~/.bash_profile` lines like this:\n\n```\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n```\n### installing sroka\n\n1. If `PyYAML` package is not building correctly, it may be caused by the fact that newer versions of pip won\u2019t uninstall the package because it\u2019s handled by disutils. Please install `PyYAML` package first with `--ignore-installed` flag. \n\n2. If numpy gets messed up during sroka installation it is probably caused by multiple versions installed. Please uninstall all using pip uninstall and then reinstall latest one.\n\n### Google APIs cached files\n\nIf you encounter RefreshError similar to \n`google.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', '{\\n  \"error\": \"invalid_grant\",\\n  \"error_description\": \"Bad Request\"\\n}')`\n, try removing all files from `~/.cache` directory.\n\n## Credits\n\nAll people that contributed to sroka development before going opensource (including CR and QA):\n* [martynaut](https://github.com/martynaut)\n* [dorotamierzwa](https://github.com/dorotamierzwa)\n* [fraszczakszymon](https://github.com/fraszczakszymon)\n* [bckatarzyna](https://github.com/bckatarzyna)\n* [jacekbj](https://github.com/jacekbj)\n* [nandy-andy](https://github.com/nandy-andy)\n* [dmnsobczak](https://github.com/dmnsobczak)\n* [szczeles](https://github.com/szczeles)\n* [kvas-damian](https://github.com/kvas-damian)\n* [pnather](https://github.com/pnather)\n* [philthyharry](https://github.com/philthyharry)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Wikia/sroka", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sroka", "package_url": "https://pypi.org/project/sroka/", "platform": "", "project_url": "https://pypi.org/project/sroka/", "project_urls": {"Homepage": "https://github.com/Wikia/sroka"}, "release_url": "https://pypi.org/project/sroka/0.0.4/", "requires_dist": ["boto3 (>=1.9.19)", "botocore (>=1.12.19)", "flake8 (==3.7.7)", "google-auth-httplib2 (>=0.0.3)", "google-api-python-client (>=1.6.7)", "google-auth-oauthlib (>=0.2.0)", "googleads (>=18.0.0)", "isort (==4.3.9)", "mysql-connector-python (==8.0.17)", "numpy (>=1.16.2)", "pandas (>=0.24.0)", "pyarrow (>=0.11.1)", "qds-sdk (>=1.10.1)", "requests (>=2.20)", "retrying (>=1.3.3)", "urllib3 (<1.25,>=1.24.2)", "py2neo (>=4.2.0)", "lxml (<4.3) ; python_version < \"3.6\""], "requires_python": "", "summary": "Package for access GA, GAM, MOAT, Qubole, Athena, S3, Rubicon APIs", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06227aa0d4de042af306271729f706386ae689f1/696d616765732f73726f6b612e706e67\" width=\"500\"></p>\n<h1>sroka package</h1>\n<p>Package providing simple Python access to data in:</p>\n<ul>\n<li>Google Analytics</li>\n<li>Google AdManager (GAM earlier DoubleClick for Publishers, DFP)</li>\n<li>MOAT</li>\n<li>Qubole</li>\n<li>Rubicon</li>\n<li>Athena</li>\n<li>Google sheets</li>\n<li>s3</li>\n<li>MySQL</li>\n<li>neo4j</li>\n</ul>\n<p>Sroka library was checked to work for Python <strong>&gt;=3.5 &lt;3.8</strong>.</p>\n<h2>Developers</h2>\n<p>Install requirements and enable custom githooks:</p>\n<pre><code>pip install -r requirements.txt\ngit config --local core.hooksPath .githooks/\n</code></pre>\n<p>Check style with flake8:</p>\n<pre><code>flake8 .\n</code></pre>\n<h2>Installation</h2>\n<h3>Pypi last release</h3>\n<p><code>pip install sroka</code></p>\n<h3>GitHub version (beta version)</h3>\n<p><code>pip install git+ssh://git@github.com/Wikia/sroka</code></p>\n<h2>Configuration</h2>\n<p>in home folder create <code>~/.sroka_config</code> (hidden folder) file where you will store:</p>\n<ul>\n<li><code>config.ini</code> file based on <code>config.sample.ini</code> with information to access Qubole, MOAT, Athena, S3 and Rubicon</li>\n<li><code>client_secrets.json</code> for GA access</li>\n<li><code>ad_manager.json</code> for GAM access</li>\n</ul>\n<p>Alternatively, you may set localization of your files during analysis:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sroka.config.config</span> <span class=\"kn\">import</span> <span class=\"n\">setup_env_variables</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sroka.config.config</span> <span class=\"kn\">import</span> <span class=\"n\">setup_client_secret</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sroka.config.config</span> <span class=\"kn\">import</span> <span class=\"n\">setup_admanager_config</span>\n<span class=\"n\">setup_env_variables</span><span class=\"p\">(</span><span class=\"s1\">'/file_path/config.ini'</span><span class=\"p\">)</span>\n<span class=\"n\">setup_client_secret</span><span class=\"p\">(</span><span class=\"s1\">'/file_path/client_secrets.json'</span><span class=\"p\">)</span>\n<span class=\"n\">setup_admanager_config</span><span class=\"p\">(</span><span class=\"s1\">'/file_path/ad_manager.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>Getting GA, GAM ang Google docs jsons with secrets</h2>\n<h3>Google Analytics</h3>\n<ol>\n<li>Use\u00a0<a href=\"https://console.developers.google.com/flows/enableapi?apiid=analytics.googleapis.com\" rel=\"nofollow\">this wizard</a>\u00a0\nto create or select a project in the Google Developers Console and automatically turn on the API. Click\u00a0Continue, then\u00a0Go to credentials.</li>\n<li>On the\u00a0Add credentials to your project\u00a0page, click the\u00a0Cancel\u00a0button.</li>\n<li>At the top of the page, select the\u00a0OAuth consent screen\u00a0tab. Select an\u00a0Email address, enter a\u00a0Product name\u00a0if not already set, and click the\u00a0Save\u00a0button.</li>\n<li>Select the\u00a0Credentials\u00a0tab, click the\u00a0Create credentials\u00a0button and select\u00a0OAuth client ID.</li>\n<li>Select the application type\u00a0Other, enter the chosen name, and click the\u00a0Create\u00a0button.</li>\n<li>Click\u00a0OK\u00a0to dismiss the resulting dialog.</li>\n<li>Click the\u00a0file_download\u00a0(Download JSON) button to the right of the client ID.</li>\n</ol>\n<h3>GAM</h3>\n<ol>\n<li>Follow <a href=\"https://developers.google.com/ad-manager/api/authentication#service\" rel=\"nofollow\">these instructions</a>\n<ul>\n<li>while adding a service account note that the role needs to have necessary viewing and reporting permissions.</li>\n</ul>\n</li>\n</ol>\n<p>You should end up with .json (!) file with credentials</p>\n<ol>\n<li>Make sure the <em>Name</em> in \"OAuth 2.0 client IDs\" matches the <em>service account</em> in \"Service account keys\": <a href=\"https://console.developers.google.com/apis/credentials\" rel=\"nofollow\">here</a></li>\n<li>Create GAM account as service account not a new user: <a href=\"https://support.google.com/admanager/answer/6078734?hl=en\" rel=\"nofollow\">https://support.google.com/admanager/answer/6078734?hl=en</a></li>\n<li>Once you have a service account, it can be used to access data in different networks. Simply add it as a new service account through GAM UI of the second network.</li>\n<li>Additional information can be specified in <code>config.ini</code> file:</li>\n</ol>\n<ul>\n<li>network code - a default value that can be overwritten in a function call</li>\n<li>application name - custom name of your network, if not specified, a generic value will be passed.</li>\n</ul>\n<h3>Google drive sheets credentials</h3>\n<p>Go to <a href=\"https://developers.google.com/sheets/api/quickstart/python\" rel=\"nofollow\">link</a> and click blue button\n<code>ENABLE THE GOOGLE SHEETS API</code> to create a project with access to google sheets. You should\nend up with <code>credentials.json</code> file that should be downloaded to <code>~/.sroka_config</code> folder.</p>\n<h2>Getting credentials &amp; access tokens</h2>\n<h3>Qubole</h3>\n<ol>\n<li>Find your Qubole API Token (go to user -&gt; My Profile -&gt; my_account -&gt; API Token -&gt; show)</li>\n<li>Copy your Qubole API Token to <code>config.ini</code> file</li>\n</ol>\n<h3>Athena and s3 credentials</h3>\n<ol>\n<li>You should have your aws_access_key_id and aws_secret_access_key from registration process in AWS console.</li>\n<li>s3bucket_name can be found in AWS console in Athena view when you click <code>Settings</code>, there you have <code>Query result location</code>.\nThe name of location without <code>s3://</code> and <code>/</code> is what you need.</li>\n<li>For Athena usage you need to set also region (AWS regional endpoint), e.g. <code>'us-east-1'</code></li>\n</ol>\n<h3>Rubicon credentials</h3>\n<ol>\n<li>You should have your id, username and password from Rubicon</li>\n<li>Copy values to <code>config.ini</code> file in relevant fields</li>\n</ol>\n<h3>MySQL connection information</h3>\n<ol>\n<li>In order to connect to a remote MySQL server, you need to provide the <code>host</code> and <code>port</code> values in the configuration. If it is accessible through a unix socket, you need to provide the path to this socket instead in the <code>unix_socket</code> configuration field.</li>\n<li>If the MySQL server is protected by user credentials, you need to provide the <code>user</code> and <code>password</code> values in the configuration.</li>\n<li>You can optionally specify the database to which you want to connect in the <code>database</code> configuration field.</li>\n</ol>\n<h2>Common issues</h2>\n<h3>macOS</h3>\n<p>If you see an error like <code>ValueError: unknown locale: UTF-8</code></p>\n<p>Please add to <code>~/.bash_profile</code> lines like this:</p>\n<pre><code>export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre>\n<h3>installing sroka</h3>\n<ol>\n<li>\n<p>If <code>PyYAML</code> package is not building correctly, it may be caused by the fact that newer versions of pip won\u2019t uninstall the package because it\u2019s handled by disutils. Please install <code>PyYAML</code> package first with <code>--ignore-installed</code> flag.</p>\n</li>\n<li>\n<p>If numpy gets messed up during sroka installation it is probably caused by multiple versions installed. Please uninstall all using pip uninstall and then reinstall latest one.</p>\n</li>\n</ol>\n<h3>Google APIs cached files</h3>\n<p>If you encounter RefreshError similar to\n<code>google.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', '{\\n \"error\": \"invalid_grant\",\\n \"error_description\": \"Bad Request\"\\n}')</code>\n, try removing all files from <code>~/.cache</code> directory.</p>\n<h2>Credits</h2>\n<p>All people that contributed to sroka development before going opensource (including CR and QA):</p>\n<ul>\n<li><a href=\"https://github.com/martynaut\" rel=\"nofollow\">martynaut</a></li>\n<li><a href=\"https://github.com/dorotamierzwa\" rel=\"nofollow\">dorotamierzwa</a></li>\n<li><a href=\"https://github.com/fraszczakszymon\" rel=\"nofollow\">fraszczakszymon</a></li>\n<li><a href=\"https://github.com/bckatarzyna\" rel=\"nofollow\">bckatarzyna</a></li>\n<li><a href=\"https://github.com/jacekbj\" rel=\"nofollow\">jacekbj</a></li>\n<li><a href=\"https://github.com/nandy-andy\" rel=\"nofollow\">nandy-andy</a></li>\n<li><a href=\"https://github.com/dmnsobczak\" rel=\"nofollow\">dmnsobczak</a></li>\n<li><a href=\"https://github.com/szczeles\" rel=\"nofollow\">szczeles</a></li>\n<li><a href=\"https://github.com/kvas-damian\" rel=\"nofollow\">kvas-damian</a></li>\n<li><a href=\"https://github.com/pnather\" rel=\"nofollow\">pnather</a></li>\n<li><a href=\"https://github.com/philthyharry\" rel=\"nofollow\">philthyharry</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6385952, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c40f210d64f3338e56bc47f5c4e31b1b", "sha256": "217b254d1de4952ddf2c595affda61cd1cdde8d10d4fe99088994bbedf84ea2f"}, "downloads": -1, "filename": "sroka-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c40f210d64f3338e56bc47f5c4e31b1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19228, "upload_time": "2019-04-24T12:06:13", "upload_time_iso_8601": "2019-04-24T12:06:13.778168Z", "url": "https://files.pythonhosted.org/packages/c0/e6/b67178fa86e78c0a080bacb924058a962e1b80b0ff88451b891627264792/sroka-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1c89bba1d725b2b5191b07e22e456cc0", "sha256": "201d46df8222e31148ca96d9b9657db3d6edef54c0284b3d4f832304964e080f"}, "downloads": -1, "filename": "sroka-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1c89bba1d725b2b5191b07e22e456cc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19328, "upload_time": "2019-12-02T13:39:36", "upload_time_iso_8601": "2019-12-02T13:39:36.160562Z", "url": "https://files.pythonhosted.org/packages/ee/10/ebeb727064cc29324f3aa78136168adcc43a939a6b014287e34fbfdd1f23/sroka-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "550df8775aafb9679eba2b301abe8297", "sha256": "c80c7b49e6f5c05df218b32bc55bf4b0f96fa15b6253e9ee90fac1d30868bb24"}, "downloads": -1, "filename": "sroka-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "550df8775aafb9679eba2b301abe8297", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23619, "upload_time": "2019-12-02T14:33:59", "upload_time_iso_8601": "2019-12-02T14:33:59.203943Z", "url": "https://files.pythonhosted.org/packages/ad/ed/aebdc566a7f57457f49c37d5508a3518838761c531327a8b2a767ccbda81/sroka-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c455de220b718dbd3f9bb3827c7c80cc", "sha256": "39c994f0f9090b64c4c8fdd35efdeeeef60a191727a937c8c956d855eaf20244"}, "downloads": -1, "filename": "sroka-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c455de220b718dbd3f9bb3827c7c80cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19075, "upload_time": "2019-12-02T14:34:00", "upload_time_iso_8601": "2019-12-02T14:34:00.910464Z", "url": "https://files.pythonhosted.org/packages/64/34/5e8956a4545ee2a8a845fb40e024056b7434cefc59f8c07c70552b1f1f70/sroka-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "25c2fa2e4dac43d91095e9bbed112346", "sha256": "b55ac1f9f17e61d67b88db7cb0d0951b068b10be9c7d758d18900a468c7d1686"}, "downloads": -1, "filename": "sroka-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "25c2fa2e4dac43d91095e9bbed112346", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24405, "upload_time": "2020-01-02T13:17:39", "upload_time_iso_8601": "2020-01-02T13:17:39.570069Z", "url": "https://files.pythonhosted.org/packages/49/15/8c22a5f2804b0bae18cca2b8e85219192cec89f5500ba21ff48f62d9ba9e/sroka-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc494432b950f3ad5ff93b295bc8febd", "sha256": "6b7aa6aca7be1aeb6fe0c6c073d5d8733fe72008d29788073e4f44c5a59e8768"}, "downloads": -1, "filename": "sroka-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cc494432b950f3ad5ff93b295bc8febd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19478, "upload_time": "2020-01-02T13:17:42", "upload_time_iso_8601": "2020-01-02T13:17:42.039147Z", "url": "https://files.pythonhosted.org/packages/79/43/ee035a03ee4b977ae145fdb61eb10af917278734d91c2cac29f8e1f6e89a/sroka-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25c2fa2e4dac43d91095e9bbed112346", "sha256": "b55ac1f9f17e61d67b88db7cb0d0951b068b10be9c7d758d18900a468c7d1686"}, "downloads": -1, "filename": "sroka-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "25c2fa2e4dac43d91095e9bbed112346", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24405, "upload_time": "2020-01-02T13:17:39", "upload_time_iso_8601": "2020-01-02T13:17:39.570069Z", "url": "https://files.pythonhosted.org/packages/49/15/8c22a5f2804b0bae18cca2b8e85219192cec89f5500ba21ff48f62d9ba9e/sroka-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc494432b950f3ad5ff93b295bc8febd", "sha256": "6b7aa6aca7be1aeb6fe0c6c073d5d8733fe72008d29788073e4f44c5a59e8768"}, "downloads": -1, "filename": "sroka-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cc494432b950f3ad5ff93b295bc8febd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19478, "upload_time": "2020-01-02T13:17:42", "upload_time_iso_8601": "2020-01-02T13:17:42.039147Z", "url": "https://files.pythonhosted.org/packages/79/43/ee035a03ee4b977ae145fdb61eb10af917278734d91c2cac29f8e1f6e89a/sroka-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:19 2020"}