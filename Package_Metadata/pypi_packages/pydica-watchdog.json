{"info": {"author": "Yesudeep Mangalapilly", "author_email": "yesudeep@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows :: Windows NT/2000", "Operating System :: OS Independent", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: C", "Programming Language :: Python", "Topic :: Software Development :: Libraries", "Topic :: System :: Filesystems", "Topic :: System :: Monitoring", "Topic :: Utilities"], "description": "Watchdog\n========\nPython API and shell utilities to monitor file system events.\n\n\nExample API Usage\n-----------------\nA simple program that uses watchdog to monitor directories specified\nas command-line arguments and logs events generated::\n\n    import sys\n    import time\n    import logging\n    from watchdog.observers import Observer\n    from watchdog.events import LoggingEventHandler\n\n    if __name__ == \"__main__\":\n        logging.basicConfig(level=logging.INFO,\n                            format='%(asctime)s - %(message)s',\n                            datefmt='%Y-%m-%d %H:%M:%S')\n        path = sys.argv[1] if len(sys.argv) > 1 else '.'\n        event_handler = LoggingEventHandler()\n        observer = Observer()\n        observer.schedule(event_handler, path, recursive=True)\n        observer.start()\n        try:\n            while True:\n                time.sleep(1)\n        except KeyboardInterrupt:\n            observer.stop()\n        observer.join()\n\n\nShell Utilities\n---------------\nWatchdog comes with a utility script called ``watchmedo``.\nPlease type ``watchmedo --help`` at the shell prompt to\nknow more about this tool.\n\nHere is how you can log the current directory recursively\nfor events related only to ``*.py`` and ``*.txt`` files while\nignoring all directory events::\n\n    watchmedo log \\\n        --patterns=\"*.py;*.txt\" \\\n        --ignore-directories \\\n        --recursive \\\n        .\n\nYou can use the ``shell-command`` subcommand to execute shell commands in\nresponse to events::\n\n    watchmedo shell-command \\\n        --patterns=\"*.py;*.txt\" \\\n        --recursive \\\n        --command='echo \"${watch_src_path}\"' \\\n        .\n\nPlease see the help information for these commands by typing::\n\n    watchmedo [command] --help\n\nNetwork Drives and Virtual Machines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are cases where the automatic configuration of ``watchmedo`` goes wrong\nwhen mounted file systems are different.\n\nAlthough ``watchmedo log`` has an option to require explicit polling,\nthis does not apply to other subcommands.\n\nEspecially a virtual machine with Windows in a Linux/Os X host will not get\nany events, but with polling you get many false events.\nThe reason is that the ``inode`` information from the virtualization is faked\nand changes all the time.\n\nTo make this work for all subcommands there is an alternative ``watchmount`` command\nwith the same options, i.E.::\n\n    watchmount shell-command \\\n        --patterns=\"*.py;*.txt\" \\\n        --recursive \\\n        --command='echo \"${watch_src_path}\"' \\\n        .\n\nThe auto-detection of the best treatment of certain networked connection\nis a non-trivial topic for later versions ...\n\nAbout ``watchmedo`` Tricks\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n``watchmedo`` can read ``tricks.yaml`` files and execute tricks within them in\nresponse to file system events. Tricks are actually event handlers that\nsubclass ``watchdog.tricks.Trick`` and are written by plugin authors. Trick\nclasses are augmented with a few additional features that regular event handlers\ndon't need.\n\nAn example ``tricks.yaml`` file::\n\n    tricks:\n    - watchdog.tricks.LoggerTrick:\n        patterns: [\"*.py\", \"*.js\"]\n    - watchmedo_webtricks.GoogleClosureTrick:\n        patterns: ['*.js']\n        hash_names: true\n        mappings_format: json                  # json|yaml|python\n        mappings_module: app/javascript_mappings\n        suffix: .min.js\n        compilation_level: advanced            # simple|advanced\n        source_directory: app/static/js/\n        destination_directory: app/public/js/\n        files:\n          index-page:\n          - app/static/js/vendor/jquery*.js\n          - app/static/js/base.js\n          - app/static/js/index-page.js\n          about-page:\n          - app/static/js/vendor/jquery*.js\n          - app/static/js/base.js\n          - app/static/js/about-page/**/*.js\n\nThe directory containing the ``tricks.yaml`` file will be monitored. Each trick\nclass is initialized with its corresponding keys in the ``tricks.yaml`` file as\narguments and events are fed to an instance of this class as they arrive.\n\nTricks will be included in the 0.5.0 release. I need community input about them.\nPlease file enhancement requests at the `issue tracker`_.\n\n\nInstallation\n------------\nInstalling from PyPI using ``pip``::\n\n    pip install watchdog\n\nInstalling from PyPI using ``easy_install``::\n\n    easy_install watchdog\n\nInstalling from source::\n\n    python setup.py install\n\n\nInstallation Caveats\n~~~~~~~~~~~~~~~~~~~~\nThe ``watchmedo`` script depends on PyYAML_ which links with LibYAML_,\nwhich brings a performance boost to the PyYAML parser. However, installing\nLibYAML_ is optional but recommended. On Mac OS X, you can use homebrew_\nto install LibYAML::\n\n    brew install libyaml\n\nOn Linux, use your favorite package manager to install LibYAML. Here's how you\ndo it on Ubuntu::\n\n    sudo aptitude install libyaml-dev\n\nOn Windows, please install PyYAML_ using the binaries they provide.\n\nDocumentation\n-------------\nYou can browse the latest release documentation_ online.\n\nSupported Platforms\n-------------------\n* Linux 2.6 (inotify)\n* Mac OS X (FSEvents, kqueue)\n* FreeBSD/BSD (kqueue)\n* Windows (ReadDirectoryChangesW with I/O completion ports;\n  ReadDirectoryChangesW worker threads)\n* OS-independent (polling the disk for directory snapshots and comparing them\n  periodically; slow and not recommended)\n\nNote that when using watchdog with kqueue, you need the\nnumber of file descriptors allowed to be opened by programs\nrunning on your system to be increased to more than the\nnumber of files that you will be monitoring. The easiest way\nto do that is to edit your ``~/.profile`` file and add\na line similar to::\n\n    ulimit -n 1024\n\nThis is an inherent problem with kqueue because it uses\nfile descriptors to monitor files. That plus the enormous\namount of bookkeeping that watchdog needs to do in order\nto monitor file descriptors just makes this a painful way\nto monitor files and directories. In essence, kqueue is\nnot a very scalable way to monitor a deeply nested\ndirectory of files and directories with a large number of\nfiles.\n\nAbout using watchdog with editors like Vim\n------------------------------------------\nVim does not modify files unless directed to do so.\nIt creates backup files and then swaps them in to replace\nthe files you are editing on the disk. This means that\nif you use Vim to edit your files, the on-modified events\nfor those files will not be triggered by watchdog.\nYou may need to configure Vim to appropriately to disable\nthis feature.\n\n\nDependencies\n------------\n1. Python 2.5 or above.\n2. pathtools_\n3. select_backport_ (select.kqueue replacement for Python2.5/2.6 on BSD/Mac OS X)\n4. XCode_ (only on Mac OS X)\n5. PyYAML_ (only for ``watchmedo`` script)\n6. argh_ (only for ``watchmedo`` script)\n\n\nLicensing\n---------\nWatchdog is licensed under the terms of the `Apache License, version 2.0`_.\n\nCopyright 2011 `Yesudeep Mangalapilly`_.\n\nCopyright 2012 Google, Inc.\n\nProject `source code`_ is available at Github. Please report bugs and file\nenhancement requests at the `issue tracker`_.\n\nWhy Watchdog?\n-------------\nToo many people tried to do the same thing and none did what I needed Python\nto do:\n\n* pnotify_\n* `unison fsmonitor`_\n* fsmonitor_\n* guard_\n* pyinotify_\n* `inotify-tools`_\n* jnotify_\n* treewalker_\n* `file.monitor`_\n* pyfilesystem_\n\n.. links:\n.. _Yesudeep Mangalapilly: yesudeep@gmail.com\n.. _source code: http://github.com/gorakhargosh/watchdog\n.. _issue tracker: http://github.com/gorakhargosh/watchdog/issues\n.. _Apache License, version 2.0: http://www.apache.org/licenses/LICENSE-2.0\n.. _documentation: http://packages.python.org/watchdog/\n\n.. _homebrew: http://mxcl.github.com/homebrew/\n.. _select_backport: http://pypi.python.org/pypi/select_backport\n.. _argh: http://pypi.python.org/pypi/argh\n.. _PyYAML: http://www.pyyaml.org/\n.. _XCode: http://developer.apple.com/technologies/tools/xcode.html\n.. _LibYAML: http://pyyaml.org/wiki/LibYAML\n.. _pathtools: http://github.com/gorakhargosh/pathtools\n\n.. _pnotify: http://mark.heily.com/pnotify\n.. _unison fsmonitor: https://webdav.seas.upenn.edu/viewvc/unison/trunk/src/fsmonitor.py?view=markup&pathrev=471\n.. _fsmonitor: http://github.com/shaurz/fsmonitor\n.. _guard: http://github.com/guard/guard\n.. _pyinotify: http://github.com/seb-m/pyinotify\n.. _inotify-tools: http://github.com/rvoicilas/inotify-tools\n.. _jnotify: http://jnotify.sourceforge.net/\n.. _treewalker: http://github.com/jbd/treewatcher\n.. _file.monitor: http://github.com/pke/file.monitor\n.. _pyfilesystem: http://code.google.com/p/pyfilesystem", "description_content_type": null, "docs_url": "https://pythonhosted.org/pydica-watchdog/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pydica/watchdog", "keywords": "python filesystem virtual monitoring monitor FSEvents kqueue inotify ReadDirectoryChangesW polling DirectorySnapshot", "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "pydica-watchdog", "package_url": "https://pypi.org/project/pydica-watchdog/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pydica-watchdog/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/pydica/watchdog"}, "release_url": "https://pypi.org/project/pydica-watchdog/0.6.2/", "requires_dist": null, "requires_python": null, "summary": "Native and Virtual Filesystem Events Monitoring", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python API and shell utilities to monitor file system events.</p>\n<div id=\"example-api-usage\">\n<h2>Example API Usage</h2>\n<p>A simple program that uses watchdog to monitor directories specified\nas command-line arguments and logs events generated:</p>\n<pre>import sys\nimport time\nimport logging\nfrom watchdog.observers import Observer\nfrom watchdog.events import LoggingEventHandler\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s - %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S')\n    path = sys.argv[1] if len(sys.argv) &gt; 1 else '.'\n    event_handler = LoggingEventHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n</pre>\n</div>\n<div id=\"shell-utilities\">\n<h2>Shell Utilities</h2>\n<p>Watchdog comes with a utility script called <tt>watchmedo</tt>.\nPlease type <tt>watchmedo <span class=\"pre\">--help</span></tt> at the shell prompt to\nknow more about this tool.</p>\n<p>Here is how you can log the current directory recursively\nfor events related only to <tt>*.py</tt> and <tt>*.txt</tt> files while\nignoring all directory events:</p>\n<pre>watchmedo log \\\n    --patterns=\"*.py;*.txt\" \\\n    --ignore-directories \\\n    --recursive \\\n    .\n</pre>\n<p>You can use the <tt><span class=\"pre\">shell-command</span></tt> subcommand to execute shell commands in\nresponse to events:</p>\n<pre>watchmedo shell-command \\\n    --patterns=\"*.py;*.txt\" \\\n    --recursive \\\n    --command='echo \"${watch_src_path}\"' \\\n    .\n</pre>\n<p>Please see the help information for these commands by typing:</p>\n<pre>watchmedo [command] --help\n</pre>\n<div id=\"network-drives-and-virtual-machines\">\n<h3>Network Drives and Virtual Machines</h3>\n<p>There are cases where the automatic configuration of <tt>watchmedo</tt> goes wrong\nwhen mounted file systems are different.</p>\n<p>Although <tt>watchmedo log</tt> has an option to require explicit polling,\nthis does not apply to other subcommands.</p>\n<p>Especially a virtual machine with Windows in a Linux/Os X host will not get\nany events, but with polling you get many false events.\nThe reason is that the <tt>inode</tt> information from the virtualization is faked\nand changes all the time.</p>\n<p>To make this work for all subcommands there is an alternative <tt>watchmount</tt> command\nwith the same options, i.E.:</p>\n<pre>watchmount shell-command \\\n    --patterns=\"*.py;*.txt\" \\\n    --recursive \\\n    --command='echo \"${watch_src_path}\"' \\\n    .\n</pre>\n<p>The auto-detection of the best treatment of certain networked connection\nis a non-trivial topic for later versions \u2026</p>\n</div>\n<div id=\"about-watchmedo-tricks\">\n<h3>About <tt>watchmedo</tt> Tricks</h3>\n<p><tt>watchmedo</tt> can read <tt>tricks.yaml</tt> files and execute tricks within them in\nresponse to file system events. Tricks are actually event handlers that\nsubclass <tt>watchdog.tricks.Trick</tt> and are written by plugin authors. Trick\nclasses are augmented with a few additional features that regular event handlers\ndon\u2019t need.</p>\n<p>An example <tt>tricks.yaml</tt> file:</p>\n<pre>tricks:\n- watchdog.tricks.LoggerTrick:\n    patterns: [\"*.py\", \"*.js\"]\n- watchmedo_webtricks.GoogleClosureTrick:\n    patterns: ['*.js']\n    hash_names: true\n    mappings_format: json                  # json|yaml|python\n    mappings_module: app/javascript_mappings\n    suffix: .min.js\n    compilation_level: advanced            # simple|advanced\n    source_directory: app/static/js/\n    destination_directory: app/public/js/\n    files:\n      index-page:\n      - app/static/js/vendor/jquery*.js\n      - app/static/js/base.js\n      - app/static/js/index-page.js\n      about-page:\n      - app/static/js/vendor/jquery*.js\n      - app/static/js/base.js\n      - app/static/js/about-page/**/*.js\n</pre>\n<p>The directory containing the <tt>tricks.yaml</tt> file will be monitored. Each trick\nclass is initialized with its corresponding keys in the <tt>tricks.yaml</tt> file as\narguments and events are fed to an instance of this class as they arrive.</p>\n<p>Tricks will be included in the 0.5.0 release. I need community input about them.\nPlease file enhancement requests at the <a href=\"http://github.com/gorakhargosh/watchdog/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing from PyPI using <tt>pip</tt>:</p>\n<pre>pip install watchdog\n</pre>\n<p>Installing from PyPI using <tt>easy_install</tt>:</p>\n<pre>easy_install watchdog\n</pre>\n<p>Installing from source:</p>\n<pre>python setup.py install\n</pre>\n<div id=\"installation-caveats\">\n<h3>Installation Caveats</h3>\n<p>The <tt>watchmedo</tt> script depends on <a href=\"http://www.pyyaml.org/\" rel=\"nofollow\">PyYAML</a> which links with <a href=\"http://pyyaml.org/wiki/LibYAML\" rel=\"nofollow\">LibYAML</a>,\nwhich brings a performance boost to the PyYAML parser. However, installing\n<a href=\"http://pyyaml.org/wiki/LibYAML\" rel=\"nofollow\">LibYAML</a> is optional but recommended. On Mac OS X, you can use <a href=\"http://mxcl.github.com/homebrew/\" rel=\"nofollow\">homebrew</a>\nto install LibYAML:</p>\n<pre>brew install libyaml\n</pre>\n<p>On Linux, use your favorite package manager to install LibYAML. Here\u2019s how you\ndo it on Ubuntu:</p>\n<pre>sudo aptitude install libyaml-dev\n</pre>\n<p>On Windows, please install <a href=\"http://www.pyyaml.org/\" rel=\"nofollow\">PyYAML</a> using the binaries they provide.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>You can browse the latest release <a href=\"http://packages.python.org/watchdog/\" rel=\"nofollow\">documentation</a> online.</p>\n</div>\n<div id=\"supported-platforms\">\n<h2>Supported Platforms</h2>\n<ul>\n<li>Linux 2.6 (inotify)</li>\n<li>Mac OS X (FSEvents, kqueue)</li>\n<li>FreeBSD/BSD (kqueue)</li>\n<li>Windows (ReadDirectoryChangesW with I/O completion ports;\nReadDirectoryChangesW worker threads)</li>\n<li>OS-independent (polling the disk for directory snapshots and comparing them\nperiodically; slow and not recommended)</li>\n</ul>\n<p>Note that when using watchdog with kqueue, you need the\nnumber of file descriptors allowed to be opened by programs\nrunning on your system to be increased to more than the\nnumber of files that you will be monitoring. The easiest way\nto do that is to edit your <tt><span class=\"pre\">~/.profile</span></tt> file and add\na line similar to:</p>\n<pre>ulimit -n 1024\n</pre>\n<p>This is an inherent problem with kqueue because it uses\nfile descriptors to monitor files. That plus the enormous\namount of bookkeeping that watchdog needs to do in order\nto monitor file descriptors just makes this a painful way\nto monitor files and directories. In essence, kqueue is\nnot a very scalable way to monitor a deeply nested\ndirectory of files and directories with a large number of\nfiles.</p>\n</div>\n<div id=\"about-using-watchdog-with-editors-like-vim\">\n<h2>About using watchdog with editors like Vim</h2>\n<p>Vim does not modify files unless directed to do so.\nIt creates backup files and then swaps them in to replace\nthe files you are editing on the disk. This means that\nif you use Vim to edit your files, the on-modified events\nfor those files will not be triggered by watchdog.\nYou may need to configure Vim to appropriately to disable\nthis feature.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ol>\n<li>Python 2.5 or above.</li>\n<li><a href=\"http://github.com/gorakhargosh/pathtools\" rel=\"nofollow\">pathtools</a></li>\n<li><a href=\"http://pypi.python.org/pypi/select_backport\" rel=\"nofollow\">select_backport</a> (select.kqueue replacement for Python2.5/2.6 on BSD/Mac OS X)</li>\n<li><a href=\"http://developer.apple.com/technologies/tools/xcode.html\" rel=\"nofollow\">XCode</a> (only on Mac OS X)</li>\n<li><a href=\"http://www.pyyaml.org/\" rel=\"nofollow\">PyYAML</a> (only for <tt>watchmedo</tt> script)</li>\n<li><a href=\"http://pypi.python.org/pypi/argh\" rel=\"nofollow\">argh</a> (only for <tt>watchmedo</tt> script)</li>\n</ol>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>Watchdog is licensed under the terms of the <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache License, version 2.0</a>.</p>\n<p>Copyright 2011 <a href=\"mailto:yesudeep%40gmail.com\">Yesudeep Mangalapilly</a>.</p>\n<p>Copyright 2012 Google, Inc.</p>\n<p>Project <a href=\"http://github.com/gorakhargosh/watchdog\" rel=\"nofollow\">source code</a> is available at Github. Please report bugs and file\nenhancement requests at the <a href=\"http://github.com/gorakhargosh/watchdog/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n</div>\n<div id=\"why-watchdog\">\n<h2>Why Watchdog?</h2>\n<p>Too many people tried to do the same thing and none did what I needed Python\nto do:</p>\n<ul>\n<li><a href=\"http://mark.heily.com/pnotify\" rel=\"nofollow\">pnotify</a></li>\n<li><a href=\"https://webdav.seas.upenn.edu/viewvc/unison/trunk/src/fsmonitor.py?view=markup&amp;pathrev=471\" rel=\"nofollow\">unison fsmonitor</a></li>\n<li><a href=\"http://github.com/shaurz/fsmonitor\" rel=\"nofollow\">fsmonitor</a></li>\n<li><a href=\"http://github.com/guard/guard\" rel=\"nofollow\">guard</a></li>\n<li><a href=\"http://github.com/seb-m/pyinotify\" rel=\"nofollow\">pyinotify</a></li>\n<li><a href=\"http://github.com/rvoicilas/inotify-tools\" rel=\"nofollow\">inotify-tools</a></li>\n<li><a href=\"http://jnotify.sourceforge.net/\" rel=\"nofollow\">jnotify</a></li>\n<li><a href=\"http://github.com/jbd/treewatcher\" rel=\"nofollow\">treewalker</a></li>\n<li><a href=\"http://github.com/pke/file.monitor\" rel=\"nofollow\">file.monitor</a></li>\n<li><a href=\"http://code.google.com/p/pyfilesystem\" rel=\"nofollow\">pyfilesystem</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 826139, "releases": {"0.6.2": [{"comment_text": "", "digests": {"md5": "b227d51ea563af2d1cdbe5f4f9d48f3f", "sha256": "ec15c9435b458a66a8a4fb3399ae45a2e8406091bd51b2019bd5151230d37b4c"}, "downloads": -1, "filename": "pydica-watchdog-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b227d51ea563af2d1cdbe5f4f9d48f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83365, "upload_time": "2013-07-25T12:52:53", "upload_time_iso_8601": "2013-07-25T12:52:53.772907Z", "url": "https://files.pythonhosted.org/packages/0a/92/2dd8857c5c42e8681426dc14db28941affe144ad462942df38a5938ec39b/pydica-watchdog-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b227d51ea563af2d1cdbe5f4f9d48f3f", "sha256": "ec15c9435b458a66a8a4fb3399ae45a2e8406091bd51b2019bd5151230d37b4c"}, "downloads": -1, "filename": "pydica-watchdog-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b227d51ea563af2d1cdbe5f4f9d48f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83365, "upload_time": "2013-07-25T12:52:53", "upload_time_iso_8601": "2013-07-25T12:52:53.772907Z", "url": "https://files.pythonhosted.org/packages/0a/92/2dd8857c5c42e8681426dc14db28941affe144ad462942df38a5938ec39b/pydica-watchdog-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:02 2020"}