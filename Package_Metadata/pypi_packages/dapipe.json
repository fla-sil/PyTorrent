{"info": {"author": "Ariel Iporre", "author_email": "ariel.iporre.rivas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "<h1 align=\"center\"> DPIPE</h1>\n\n<p align=\"center\">\n  <img src=\"images/pipeguy.png\" data-canonical-src=\"https://gyazo.com/eb5c5741b6a9a16c692170a41a49c858.png\" width=\"200\" />\n</p>\n\nWith dpipe you can create ready to use datasets from paths or list of files. You should \nspecify the type and the location of the input and target. The labels are assumed to be the name of the folder containing the file,\nif you need a dataset for classification. \n\nThe inputs and targets can be a list of paths, a path to be explored containing images or videos. For example:\n````shell script\n./dataset\n  |\n  |--cat/img1.png|\n  |--cat/img2.png\n  |--dog/img1.png\n  |--dog/img2.png\n````\nThe function `make_dataset` outputs a `dpipe.dataset_builder` object that has the method to predefined multiprocessing setups based on the recomendation of tensorflow.\n\n| method        | action          \n| ------------- |:-------------:| \n| `dataset_builder.prefetch()`      | Preloads samples on memory |\n| `dataset_builder.batch()`      | Creates a batch dataset |\n| `dataset_builder.enumerate()`      | Creates a appends an index to the output |\n| `dataset_builder.filter()`      | Applies a filter concurrently |\n| `dataset_builder.map()`      | Applies a function to each element concurrently |\n| `dataset_builder.repeat()`      | Creates a repeated dataset |\n| `dataset_builder.shuffle()`      | Shuffles the dataset after a complete run |\n \n\nThe dataset can be specified as:\n````python\nfrom dpipe import make_dataset\ndataset = make_dataset('image', 'label', x_path='./dataset', x_size=(128,128)).build()\n````\n## Creating dataset (more options)\nAdditionally, we defined the dataset from functions or objects. Two use cases are presented here. A dataset can be created from a function and a list of element to parse, for example a list of files and a reading function. \nFor example, if we need are training a denoising autoencoder, we need image noisy and clean image pairs; this can be handled with the function `dpipe.from_function`:\n```python\nimport glob # to find the files\nimport matplotlib.image as mpimg # to read the images (you need to install it.)\nimport numpy as np\nfrom dpipe import from_function\n\nfilelist = glob.glob('./dataset','*.png')\ndef read_file(filename):\n    target = mpimg.imread(filename) # read the image\n    noisy_image = np.random.randn(target.shape)\n    return noisy_image, target\n# undetermined shape is used to define dimentions that vary across shamples, in this case the height and the width of the images\ndataset = from_function(read_file, filelist, undetermined_shape=((1,2),(1,2))).build()\n```\nIf you are accessing your data in an object oriented way, you can use `dpipe.from_object`. In the next example lets consider you want use consume a list of files with records on it via generator function, this can also be handled with `dpipe.from_function` though. The code should look like this\n```python\nimport os\nimport pandas as pd\nfrom dpipe import from_object\n\nclass Reader():\n    def __init__(self,datapath='./dataset'):\n        self.filelist = os.listdir(datapath)\n    def __len__(self):\n        return len(self.filelist)\n    def my_reading_function(self,filename):\n        df = pd.read_csv(filename)\n        for v, t in zip(df.values, df.targets):\n            yield v, t\nreader = Reader()\ndataset = from_object(reader, 'my_reading_function',).build()\n```\nThe `build()` function that creates a dataset with arguments ready to use with the `fit()` method of and `tf.model` object. This is used like this:\n```python\ntraining_ds = from_object(reader_training, 'my_reading_function').shuffle(len(reader_training), reshuffle_each_iteration=True).batch(32).repeat().build()\nvalidation_ds = from_object(reader_validation, 'my_reading_function',training=False).batch(32).build()\nmodel.fit(x=training_ds,validation_data=validation_ds, epochs=10,**training_ds.built_args,**validation_ds_ds.built_args)\n```\n# Installation\n````shell script\npip install datapipe\n````\nIt requires to install FFMPEG ([here](https://www.ffmpeg.org)) to work with video formats.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/aiporre/multidataloader/archive/v0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aiporre/multidataloader.git", "keywords": "", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "dapipe", "package_url": "https://pypi.org/project/dapipe/", "platform": "", "project_url": "https://pypi.org/project/dapipe/", "project_urls": {"Download": "https://github.com/aiporre/multidataloader/archive/v0.1.tar.gz", "Homepage": "https://github.com/aiporre/multidataloader.git"}, "release_url": "https://pypi.org/project/dapipe/0.1/", "requires_dist": null, "requires_python": "", "summary": "Creates dataset builder objects", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1> DPIPE</h1>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9e8a2fefcbedf58d6fe200402051ddc06cc364a/696d616765732f706970656775792e706e67\" width=\"200\">\n</p>\n<p>With dpipe you can create ready to use datasets from paths or list of files. You should\nspecify the type and the location of the input and target. The labels are assumed to be the name of the folder containing the file,\nif you need a dataset for classification.</p>\n<p>The inputs and targets can be a list of paths, a path to be explored containing images or videos. For example:</p>\n<pre>./dataset\n  <span class=\"p\">|</span>\n  <span class=\"p\">|</span>--cat/img1.png<span class=\"p\">|</span>\n  <span class=\"p\">|</span>--cat/img2.png\n  <span class=\"p\">|</span>--dog/img1.png\n  <span class=\"p\">|</span>--dog/img2.png\n</pre>\n<p>The function <code>make_dataset</code> outputs a <code>dpipe.dataset_builder</code> object that has the method to predefined multiprocessing setups based on the recomendation of tensorflow.</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th align=\"center\">action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>dataset_builder.prefetch()</code></td>\n<td align=\"center\">Preloads samples on memory</td>\n</tr>\n<tr>\n<td><code>dataset_builder.batch()</code></td>\n<td align=\"center\">Creates a batch dataset</td>\n</tr>\n<tr>\n<td><code>dataset_builder.enumerate()</code></td>\n<td align=\"center\">Creates a appends an index to the output</td>\n</tr>\n<tr>\n<td><code>dataset_builder.filter()</code></td>\n<td align=\"center\">Applies a filter concurrently</td>\n</tr>\n<tr>\n<td><code>dataset_builder.map()</code></td>\n<td align=\"center\">Applies a function to each element concurrently</td>\n</tr>\n<tr>\n<td><code>dataset_builder.repeat()</code></td>\n<td align=\"center\">Creates a repeated dataset</td>\n</tr>\n<tr>\n<td><code>dataset_builder.shuffle()</code></td>\n<td align=\"center\">Shuffles the dataset after a complete run</td>\n</tr></tbody></table>\n<p>The dataset can be specified as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dpipe</span> <span class=\"kn\">import</span> <span class=\"n\">make_dataset</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">make_dataset</span><span class=\"p\">(</span><span class=\"s1\">'image'</span><span class=\"p\">,</span> <span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"n\">x_path</span><span class=\"o\">=</span><span class=\"s1\">'./dataset'</span><span class=\"p\">,</span> <span class=\"n\">x_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"mi\">128</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<h2>Creating dataset (more options)</h2>\n<p>Additionally, we defined the dataset from functions or objects. Two use cases are presented here. A dataset can be created from a function and a list of element to parse, for example a list of files and a reading function.\nFor example, if we need are training a denoising autoencoder, we need image noisy and clean image pairs; this can be handled with the function <code>dpipe.from_function</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">glob</span> <span class=\"c1\"># to find the files</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.image</span> <span class=\"k\">as</span> <span class=\"nn\">mpimg</span> <span class=\"c1\"># to read the images (you need to install it.)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dpipe</span> <span class=\"kn\">import</span> <span class=\"n\">from_function</span>\n\n<span class=\"n\">filelist</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">'./dataset'</span><span class=\"p\">,</span><span class=\"s1\">'*.png'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">mpimg</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span> <span class=\"c1\"># read the image</span>\n    <span class=\"n\">noisy_image</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">noisy_image</span><span class=\"p\">,</span> <span class=\"n\">target</span>\n<span class=\"c1\"># undetermined shape is used to define dimentions that vary across shamples, in this case the height and the width of the images</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">from_function</span><span class=\"p\">(</span><span class=\"n\">read_file</span><span class=\"p\">,</span> <span class=\"n\">filelist</span><span class=\"p\">,</span> <span class=\"n\">undetermined_shape</span><span class=\"o\">=</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<p>If you are accessing your data in an object oriented way, you can use <code>dpipe.from_object</code>. In the next example lets consider you want use consume a list of files with records on it via generator function, this can also be handled with <code>dpipe.from_function</code> though. The code should look like this</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dpipe</span> <span class=\"kn\">import</span> <span class=\"n\">from_object</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Reader</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">datapath</span><span class=\"o\">=</span><span class=\"s1\">'./dataset'</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filelist</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">datapath</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filelist</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_reading_function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">targets</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">t</span>\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">Reader</span><span class=\"p\">()</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"s1\">'my_reading_function'</span><span class=\"p\">,)</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>build()</code> function that creates a dataset with arguments ready to use with the <code>fit()</code> method of and <code>tf.model</code> object. This is used like this:</p>\n<pre><span class=\"n\">training_ds</span> <span class=\"o\">=</span> <span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">reader_training</span><span class=\"p\">,</span> <span class=\"s1\">'my_reading_function'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">reader_training</span><span class=\"p\">),</span> <span class=\"n\">reshuffle_each_iteration</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"n\">validation_ds</span> <span class=\"o\">=</span> <span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">reader_validation</span><span class=\"p\">,</span> <span class=\"s1\">'my_reading_function'</span><span class=\"p\">,</span><span class=\"n\">training</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">training_ds</span><span class=\"p\">,</span><span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"n\">validation_ds</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">training_ds</span><span class=\"o\">.</span><span class=\"n\">built_args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">validation_ds_ds</span><span class=\"o\">.</span><span class=\"n\">built_args</span><span class=\"p\">)</span>\n</pre>\n<h1>Installation</h1>\n<pre>pip install datapipe\n</pre>\n<p>It requires to install FFMPEG (<a href=\"https://www.ffmpeg.org\" rel=\"nofollow\">here</a>) to work with video formats.</p>\n\n          </div>"}, "last_serial": 6688314, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "247a6741fb7be296c1d634637d4b22dc", "sha256": "a0df72befe0ecc0e986988ec5cb525de1b4525ebd0c2604e91524f0f24955a5e"}, "downloads": -1, "filename": "dapipe-0.1.tar.gz", "has_sig": false, "md5_digest": "247a6741fb7be296c1d634637d4b22dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12388, "upload_time": "2020-02-24T12:20:43", "upload_time_iso_8601": "2020-02-24T12:20:43.175089Z", "url": "https://files.pythonhosted.org/packages/8d/be/b9bab26265b3e92ea45179a3e74d9b2e462e35cfcdb7bde99bb6e2096086/dapipe-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "247a6741fb7be296c1d634637d4b22dc", "sha256": "a0df72befe0ecc0e986988ec5cb525de1b4525ebd0c2604e91524f0f24955a5e"}, "downloads": -1, "filename": "dapipe-0.1.tar.gz", "has_sig": false, "md5_digest": "247a6741fb7be296c1d634637d4b22dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12388, "upload_time": "2020-02-24T12:20:43", "upload_time_iso_8601": "2020-02-24T12:20:43.175089Z", "url": "https://files.pythonhosted.org/packages/8d/be/b9bab26265b3e92ea45179a3e74d9b2e462e35cfcdb7bde99bb6e2096086/dapipe-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:42 2020"}