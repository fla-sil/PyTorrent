{"info": {"author": "Thomas Grusz", "author_email": "thomas.grusz@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# linalg_simple\n\n_A simple linear algebra package written in Python 3_\n\nThis is a more or less direct implementation of the **Udacity** [Linear Algebra Refresher Course](https://www.udacity.com/course/linear-algebra-refresher-course--ud953).\n\n---\n\n## Installation\n\n**linalg_simple** is available from the Python Package Index [PyPi](https://pypi.org).\nIf you have Python 3 installed on your system you can use the `pip install` command:\n\n```\npip install linalg_simple\n```\n\n---\n\n## Classes\n\nThe linalg_simple package currently offers the `Vector()` class, which can directly be imported into your project with:\n\n```python\nfrom linalg import Vector\n```\n\n---\n\n## Vector Class\n\n### _Attributes_\n\nThe `Vector()` class has two attributes:\n\n- `Vector.coordinates` (Decimal object)\n- `Vector.dimension` (int)\n\n### _Methods_\n\nThe following `Vector()` class methods are available:\n\n### Constructor\n\nArguments: int, float\n\n```\nv1 = Vector([1.5, -4.8, 3])\n```\n\n### + Method\n\n```\nv3 = v1 + v2\n```\n\n### - Method\n\n```\nv3 = v1 - v2\n```\n\n### Scalar Mutliplication\n\nArguments: int, float\n\n```\nv1.times_scalar(42)\n```\n\n### Magnitude\n\n```\nvector_length = v1.magnitude()\n```\n\n### Vector Normalization\n\n```\nunit_vector = v1.normalized()\n```\n\n### Dot Product\n\nArguments: vector object\n\n```\ndot_product = v1.dot(v2)\n```\n\n### Angle between two vectors\n\nArguments: vector object\n\n```\nangle = v1.angle_with(v2)\n```\n\n### Check if vector's length is zero\n\nTo avoid precision errors, you can indicate a tolerance (default: 1e-10).\n\n```\nv1.is_zero()\n```\n\n### Check if two vectors are orthogonal to each other\n\nTo avoid precision errors, you can indicate a tolerance (default: 1e-10).\n\nArguments: vector object, tolerance\n\n```\nv1.is_orthogonal_to(v2)\n```\n\n### Check if two vectors are parallel to each other\n\nArguments: vector object\n\n```\nv1.is_parallel_to(v2)\n```\n\n### Calculate projection of a vector onto a basis vector\n\nArguments: vector object (basis vector)\n\n```\nprojection_vector = v1.component_parallel_to(v2)\n```\n\n### Calculate orthogonal component of vector\n\nArguments: vector object (basis vector)\n\n```\nprojection_vector = v1.component_orthogonal_to(v2)\n```\n\n### Calculate Cross Product of two vectors\n\nThe vectors should be 3D (2D vectors will be augmented to 3D).\n\nArguments: vector object\n\n```\ncrossproduct_vector = v1.cross(v2)\n```\n\n### Calculate the parallelogram spanned by two vectors\n\nArguments: vector object\n\n```\narea = v1.area_of_parallelogram_with(v2)\n```\n\n### Calculate area of a parallelogram spanned by two vectors\n\nArguments: vector object\n\n```\narea = v1.area_of_parallelogram_with(v2)\n```\n\n### Calculate area of a trinagle spanned by two vectors\n\nArguments: vector object\n\n```\narea = v1.area_of_triangle_with(v2)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thomasgrusz/linalg_pkg", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "linalg-simple", "package_url": "https://pypi.org/project/linalg-simple/", "platform": "", "project_url": "https://pypi.org/project/linalg-simple/", "project_urls": {"Homepage": "https://github.com/thomasgrusz/linalg_pkg"}, "release_url": "https://pypi.org/project/linalg-simple/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple Linear Algebra Package", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>linalg_simple</h1>\n<p><em>A simple linear algebra package written in Python 3</em></p>\n<p>This is a more or less direct implementation of the <strong>Udacity</strong> <a href=\"https://www.udacity.com/course/linear-algebra-refresher-course--ud953\" rel=\"nofollow\">Linear Algebra Refresher Course</a>.</p>\n<hr>\n<h2>Installation</h2>\n<p><strong>linalg_simple</strong> is available from the Python Package Index <a href=\"https://pypi.org\" rel=\"nofollow\">PyPi</a>.\nIf you have Python 3 installed on your system you can use the <code>pip install</code> command:</p>\n<pre><code>pip install linalg_simple\n</code></pre>\n<hr>\n<h2>Classes</h2>\n<p>The linalg_simple package currently offers the <code>Vector()</code> class, which can directly be imported into your project with:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">linalg</span> <span class=\"kn\">import</span> <span class=\"n\">Vector</span>\n</pre>\n<hr>\n<h2>Vector Class</h2>\n<h3><em>Attributes</em></h3>\n<p>The <code>Vector()</code> class has two attributes:</p>\n<ul>\n<li><code>Vector.coordinates</code> (Decimal object)</li>\n<li><code>Vector.dimension</code> (int)</li>\n</ul>\n<h3><em>Methods</em></h3>\n<p>The following <code>Vector()</code> class methods are available:</p>\n<h3>Constructor</h3>\n<p>Arguments: int, float</p>\n<pre><code>v1 = Vector([1.5, -4.8, 3])\n</code></pre>\n<h3>+ Method</h3>\n<pre><code>v3 = v1 + v2\n</code></pre>\n<h3>- Method</h3>\n<pre><code>v3 = v1 - v2\n</code></pre>\n<h3>Scalar Mutliplication</h3>\n<p>Arguments: int, float</p>\n<pre><code>v1.times_scalar(42)\n</code></pre>\n<h3>Magnitude</h3>\n<pre><code>vector_length = v1.magnitude()\n</code></pre>\n<h3>Vector Normalization</h3>\n<pre><code>unit_vector = v1.normalized()\n</code></pre>\n<h3>Dot Product</h3>\n<p>Arguments: vector object</p>\n<pre><code>dot_product = v1.dot(v2)\n</code></pre>\n<h3>Angle between two vectors</h3>\n<p>Arguments: vector object</p>\n<pre><code>angle = v1.angle_with(v2)\n</code></pre>\n<h3>Check if vector's length is zero</h3>\n<p>To avoid precision errors, you can indicate a tolerance (default: 1e-10).</p>\n<pre><code>v1.is_zero()\n</code></pre>\n<h3>Check if two vectors are orthogonal to each other</h3>\n<p>To avoid precision errors, you can indicate a tolerance (default: 1e-10).</p>\n<p>Arguments: vector object, tolerance</p>\n<pre><code>v1.is_orthogonal_to(v2)\n</code></pre>\n<h3>Check if two vectors are parallel to each other</h3>\n<p>Arguments: vector object</p>\n<pre><code>v1.is_parallel_to(v2)\n</code></pre>\n<h3>Calculate projection of a vector onto a basis vector</h3>\n<p>Arguments: vector object (basis vector)</p>\n<pre><code>projection_vector = v1.component_parallel_to(v2)\n</code></pre>\n<h3>Calculate orthogonal component of vector</h3>\n<p>Arguments: vector object (basis vector)</p>\n<pre><code>projection_vector = v1.component_orthogonal_to(v2)\n</code></pre>\n<h3>Calculate Cross Product of two vectors</h3>\n<p>The vectors should be 3D (2D vectors will be augmented to 3D).</p>\n<p>Arguments: vector object</p>\n<pre><code>crossproduct_vector = v1.cross(v2)\n</code></pre>\n<h3>Calculate the parallelogram spanned by two vectors</h3>\n<p>Arguments: vector object</p>\n<pre><code>area = v1.area_of_parallelogram_with(v2)\n</code></pre>\n<h3>Calculate area of a parallelogram spanned by two vectors</h3>\n<p>Arguments: vector object</p>\n<pre><code>area = v1.area_of_parallelogram_with(v2)\n</code></pre>\n<h3>Calculate area of a trinagle spanned by two vectors</h3>\n<p>Arguments: vector object</p>\n<pre><code>area = v1.area_of_triangle_with(v2)\n</code></pre>\n\n          </div>"}, "last_serial": 6623328, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f884a2fd5ba7aa8d7349527e4b1788b7", "sha256": "9c8c1fe8666d81752a3d3f958e24b45e4f15309b8efa3ea1c85af93ae187b256"}, "downloads": -1, "filename": "linalg_simple-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f884a2fd5ba7aa8d7349527e4b1788b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4367, "upload_time": "2020-02-13T11:29:36", "upload_time_iso_8601": "2020-02-13T11:29:36.954823Z", "url": "https://files.pythonhosted.org/packages/f7/6c/abe69a6fb7ae024f5571a816d5b8a200980d53a68ba77890a0a30c6cdfaa/linalg_simple-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3a4d71e4de09bc266845db8073a690c1", "sha256": "3ce8e6bf9cf4584141acce2148a694a2b10edda856653cbbe1596fbf4e5dd4c4"}, "downloads": -1, "filename": "linalg_simple-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3a4d71e4de09bc266845db8073a690c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4522, "upload_time": "2020-02-13T13:17:27", "upload_time_iso_8601": "2020-02-13T13:17:27.832452Z", "url": "https://files.pythonhosted.org/packages/49/50/43f7618c9f3bf9d9fae4533628476ae28396b6923f177b6ceebe329c098e/linalg_simple-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a4d71e4de09bc266845db8073a690c1", "sha256": "3ce8e6bf9cf4584141acce2148a694a2b10edda856653cbbe1596fbf4e5dd4c4"}, "downloads": -1, "filename": "linalg_simple-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3a4d71e4de09bc266845db8073a690c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4522, "upload_time": "2020-02-13T13:17:27", "upload_time_iso_8601": "2020-02-13T13:17:27.832452Z", "url": "https://files.pythonhosted.org/packages/49/50/43f7618c9f3bf9d9fae4533628476ae28396b6923f177b6ceebe329c098e/linalg_simple-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:50 2020"}