{"info": {"author": "Francois-Michel De Rainville", "author_email": "f.derainville@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Topic :: Scientific/Engineering"], "description": "Python Nearly Orthogonal Latin Hypercube Generator\r\n==================================================\r\n\r\nThis library allows to generate Nearly Orthogonal Latin Hypercubes (NOLH) according to\r\nCioppa (2007) and De Rainville et al. (2012) and reference therein.\r\n\r\nInstallation\r\n------------\r\nClone the repository ::\r\n\r\n    $ git clone http://github.com/fmder/pynolh.git\r\n\r\nand from the cloned directory type ::\r\n\r\n    $ python setup.py install\r\n\r\nPyNOLH requires Numpy.\r\n\r\nUsage\r\n-----\r\nThe library contains a single generator and a function to retrieve the necessary parameters\r\nfrom a desired dimensionality. To generate a 6 dimension NOLH from the indentity permutation::\r\n\r\n    import pynolh\r\n\r\n    dim = 6\r\n    m, q, r = pynolh.params(dim)\r\n    conf = range(q)\r\n    remove = range(dim - r, dim)\r\n    nolh = pynolh.nolh(conf, remove)\r\n\r\nThe NOLH returned is a numpy array with one row being one sample.\r\n\r\nYou can also produce a NOLH from a random permutation configuration vector and remove random columns::\r\n\r\n    import pynolh\r\n    import random\r\n\r\n    dim = 6\r\n    m, q, r = pynolh.params(dim)\r\n    conf = random.sample(range(q), q)\r\n    remove = random.sample(range(q), r)\r\n    nolh = pynolh.nolh(conf, remove)\r\n\r\nThe `nolh()` function accepts configurations with either numbers in [0 q-1] or [1 q]. ::\r\n\r\n    import pynolh\r\n\r\n    dim = 6\r\n    m, q, r = pynolh.params(dim)\r\n    conf = range(1, q + 1)\r\n    remove = range(dim - r + 1, dim + 1)\r\n    nolh = pynolh.nolh(conf, remove)\r\n\r\nSome prebuilt configurations are given within the library. The `CONF` module attribute is a dictionary with the dimension as key and a configuration, columns to remove pair as value. ::\r\n\r\n    import pynolh\r\n\r\n    conf, remove = pynolh.CONF[6]\r\n    nolh = pynolh.nolh(conf, remove)\r\n\r\nThe configurations for dimensions 2 to 7 are from Cioppa (2007) and 8 to 29 are from De Rainville et al. 2012.\r\n\r\nConfiguration Repository\r\n------------------------\r\nSee the `Quasi Random Sequences Repository <http://qrand.gel.ulaval.ca>`_ for more configurations. \r\n\r\nReferences\r\n----------\r\nCioppa, T. M., & Lucas, T. W. (2007). Efficient nearly orthogonal and space-filling Latin hypercubes. *Technometrics*, 49(1).\r\n\r\nDe Rainville, F.-M., Gagn\u00e9, C., Teytaud, O., & Laurendeau, D. (2012). Evolutionary optimization of low-discrepancy sequences. *ACM Transactions on Modeling and Computer Simulation (TOMACS)*, 22(2), 9.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/fmder/pynolh/downloads", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fmder/pynolh", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "pynolh", "package_url": "https://pypi.org/project/pynolh/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pynolh/", "project_urls": {"Download": "https://github.com/fmder/pynolh/downloads", "Homepage": "https://github.com/fmder/pynolh"}, "release_url": "https://pypi.org/project/pynolh/0.1/", "requires_dist": null, "requires_python": null, "summary": "Nearly Orthogonal Latin Hypercube Generator", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library allows to generate Nearly Orthogonal Latin Hypercubes (NOLH) according to\nCioppa (2007) and De Rainville et al. (2012) and reference therein.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Clone the repository</p>\n<pre>$ git clone http://github.com/fmder/pynolh.git\n</pre>\n<p>and from the cloned directory type</p>\n<pre>$ python setup.py install\n</pre>\n<p>PyNOLH requires Numpy.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The library contains a single generator and a function to retrieve the necessary parameters\nfrom a desired dimensionality. To generate a 6 dimension NOLH from the indentity permutation:</p>\n<pre>import pynolh\n\ndim = 6\nm, q, r = pynolh.params(dim)\nconf = range(q)\nremove = range(dim - r, dim)\nnolh = pynolh.nolh(conf, remove)\n</pre>\n<p>The NOLH returned is a numpy array with one row being one sample.</p>\n<p>You can also produce a NOLH from a random permutation configuration vector and remove random columns:</p>\n<pre>import pynolh\nimport random\n\ndim = 6\nm, q, r = pynolh.params(dim)\nconf = random.sample(range(q), q)\nremove = random.sample(range(q), r)\nnolh = pynolh.nolh(conf, remove)\n</pre>\n<p>The <cite>nolh()</cite> function accepts configurations with either numbers in [0 q-1] or [1 q].</p>\n<pre>import pynolh\n\ndim = 6\nm, q, r = pynolh.params(dim)\nconf = range(1, q + 1)\nremove = range(dim - r + 1, dim + 1)\nnolh = pynolh.nolh(conf, remove)\n</pre>\n<p>Some prebuilt configurations are given within the library. The <cite>CONF</cite> module attribute is a dictionary with the dimension as key and a configuration, columns to remove pair as value.</p>\n<pre>import pynolh\n\nconf, remove = pynolh.CONF[6]\nnolh = pynolh.nolh(conf, remove)\n</pre>\n<p>The configurations for dimensions 2 to 7 are from Cioppa (2007) and 8 to 29 are from De Rainville et al. 2012.</p>\n</div>\n<div id=\"configuration-repository\">\n<h2>Configuration Repository</h2>\n<p>See the <a href=\"http://qrand.gel.ulaval.ca\" rel=\"nofollow\">Quasi Random Sequences Repository</a> for more configurations.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>Cioppa, T. M., &amp; Lucas, T. W. (2007). Efficient nearly orthogonal and space-filling Latin hypercubes. <em>Technometrics</em>, 49(1).</p>\n<p>De Rainville, F.-M., Gagn\u00e9, C., Teytaud, O., &amp; Laurendeau, D. (2012). Evolutionary optimization of low-discrepancy sequences. <em>ACM Transactions on Modeling and Computer Simulation (TOMACS)</em>, 22(2), 9.</p>\n</div>\n\n          </div>"}, "last_serial": 1044526, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "55390fade4da96fbb54b338df217f182", "sha256": "fee53e0d79f6d6d636bc4e75ea7e10ea27fcf88a51e02c73e79ea0ae5ae99bf0"}, "downloads": -1, "filename": "pynolh-0.1.tar.gz", "has_sig": false, "md5_digest": "55390fade4da96fbb54b338df217f182", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6292, "upload_time": "2014-03-28T15:54:18", "upload_time_iso_8601": "2014-03-28T15:54:18.917958Z", "url": "https://files.pythonhosted.org/packages/39/21/4a19c5faedf63c959c5fedfd57091bf385b509bd20bbac15ee572b380743/pynolh-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55390fade4da96fbb54b338df217f182", "sha256": "fee53e0d79f6d6d636bc4e75ea7e10ea27fcf88a51e02c73e79ea0ae5ae99bf0"}, "downloads": -1, "filename": "pynolh-0.1.tar.gz", "has_sig": false, "md5_digest": "55390fade4da96fbb54b338df217f182", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6292, "upload_time": "2014-03-28T15:54:18", "upload_time_iso_8601": "2014-03-28T15:54:18.917958Z", "url": "https://files.pythonhosted.org/packages/39/21/4a19c5faedf63c959c5fedfd57091bf385b509bd20bbac15ee572b380743/pynolh-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:05 2020"}