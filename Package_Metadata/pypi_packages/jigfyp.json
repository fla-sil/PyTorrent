{"info": {"author": "Thomas Levine", "author_email": "_@thomaslevine.com", "bugtrack_url": null, "classifiers": [], "description": "Jigfyp is a query-builder for leveldb.\nIt lets you specify leveldb ranges as tuples of strings.\n\nInitializing\n---------------\nInitalize a Jigfyp with a LevelDB object. ::\n\n    import leveldb, Jigfyp\n\n    db = leveldb.LevelDB()\n    j = jigfyp.Jigfyp(db)\n\nWorking with individual keys\n-------------------------------\nThe key in these examples is ``b'one!two!three'``. ::\n\n    j.put_one((b'one', b'two', b'three'), b'Hi')\n    j.get_one((b'one', b'two', b'three'))\n    j.delete_one((b'one', b'two', b'three'))\n\nWorking with ranges of keys\n-------------------------------\nHere's one way of adding a few records. ::\n\n    j.put_one((b'one', b'two', b'three'), b'Hi')\n    j.put_one((b'one', b'two', b'four'), b'Hi')\n    j.put_one((b'one', b'two', b'seven), b'Hi')\n    j.put_one((b'over', b'nine', b'thousand'), b'Hi')\n\nIf you're writing several records, you can use the ``put_many`` method to save\nthe same data but with a ``leveldb.WriteBatch``, which is usually faster. ::\n\n    records = [\n        ((b'one', b'two', b'three'), b'Hi'),\n        ((b'one', b'two', b'four'), b'Hi'),\n        ((b'one', b'two', b'seven), b'Hi'),\n        ((b'over', b'nine', b'thousand'), b'Hi'),\n    ]\n    j.put_many(records)\n\nThe cool part is the ``get_many`` and ``delete_many`` methods. With these,\nyou specify a partial key, and everything that starts with that key is emitted.\nConsider a database containing the four above records. If we pass no arguments\nto ``get_many``, we'll read all the data. ::\n\n    j.get_many()\n\nIf we pass ``(b'one', b'two')``, ::\n\n    j.get_many(b'one', b'two')\n\nwe'll get three records with these keys ::\n\n* ``(b'one', b'two', b'three')``\n* ``(b'one', b'two', b'four')``\n\nand not the record with these keys\n\n* ``(b'one', b'two', b'seven)``\n* ``(b'over', b'nine', b'thousand')``\n\nSimilarly, if we run the following command, ::\n\n    j.delete_many(b'one')\n\nwe delete all the records whose keys begin with ``b'one'``, leaving us with a\nsingle record in the database, with the key ``(b'over', b'nine', b'thousand')``.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://dada.pink/jigfyp/", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "jigfyp", "package_url": "https://pypi.org/project/jigfyp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jigfyp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://dada.pink/jigfyp/"}, "release_url": "https://pypi.org/project/jigfyp/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Index a leveldb with tuples", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Jigfyp is a query-builder for leveldb.\nIt lets you specify leveldb ranges as tuples of strings.</p>\n<div id=\"initializing\">\n<h2>Initializing</h2>\n<p>Initalize a Jigfyp with a LevelDB object.</p>\n<pre>import leveldb, Jigfyp\n\ndb = leveldb.LevelDB()\nj = jigfyp.Jigfyp(db)\n</pre>\n</div>\n<div id=\"working-with-individual-keys\">\n<h2>Working with individual keys</h2>\n<p>The key in these examples is <tt>b'one!two!three'</tt>.</p>\n<pre>j.put_one((b'one', b'two', b'three'), b'Hi')\nj.get_one((b'one', b'two', b'three'))\nj.delete_one((b'one', b'two', b'three'))\n</pre>\n</div>\n<div id=\"working-with-ranges-of-keys\">\n<h2>Working with ranges of keys</h2>\n<p>Here\u2019s one way of adding a few records.</p>\n<pre>j.put_one((b'one', b'two', b'three'), b'Hi')\nj.put_one((b'one', b'two', b'four'), b'Hi')\nj.put_one((b'one', b'two', b'seven), b'Hi')\nj.put_one((b'over', b'nine', b'thousand'), b'Hi')\n</pre>\n<p>If you\u2019re writing several records, you can use the <tt>put_many</tt> method to save\nthe same data but with a <tt>leveldb.WriteBatch</tt>, which is usually faster.</p>\n<pre>records = [\n    ((b'one', b'two', b'three'), b'Hi'),\n    ((b'one', b'two', b'four'), b'Hi'),\n    ((b'one', b'two', b'seven), b'Hi'),\n    ((b'over', b'nine', b'thousand'), b'Hi'),\n]\nj.put_many(records)\n</pre>\n<p>The cool part is the <tt>get_many</tt> and <tt>delete_many</tt> methods. With these,\nyou specify a partial key, and everything that starts with that key is emitted.\nConsider a database containing the four above records. If we pass no arguments\nto <tt>get_many</tt>, we\u2019ll read all the data.</p>\n<pre>j.get_many()\n</pre>\n<p>If we pass <tt>(b'one', b'two')</tt>,</p>\n<pre>j.get_many(b'one', b'two')\n</pre>\n<p>we\u2019ll get three records with these keys</p>\n<pre>* ``(b'one', b'two', b'three')``\n* ``(b'one', b'two', b'four')``\n</pre>\n<p>and not the record with these keys</p>\n<ul>\n<li><tt>(b'one', b'two', b'seven)</tt></li>\n<li><tt>(b'over', b'nine', b'thousand')</tt></li>\n</ul>\n<p>Similarly, if we run the following command,</p>\n<pre>j.delete_many(b'one')\n</pre>\n<p>we delete all the records whose keys begin with <tt>b'one'</tt>, leaving us with a\nsingle record in the database, with the key <tt>(b'over', b'nine', b'thousand')</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 1675368, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "913d7fd53c0f1b5071b14fbcfe7a8ccf", "sha256": "ad38e1c7ecede3187c1b9de90fdd180b0c0503216ce8dc078828a92e0faab2b8"}, "downloads": -1, "filename": "jigfyp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "913d7fd53c0f1b5071b14fbcfe7a8ccf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2212, "upload_time": "2015-08-13T00:29:34", "upload_time_iso_8601": "2015-08-13T00:29:34.942907Z", "url": "https://files.pythonhosted.org/packages/bd/8f/4d5b9068ddec8c066e6b4fc8b6d01fbf68b104aaa04aceaa7c874900a2a8/jigfyp-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "913d7fd53c0f1b5071b14fbcfe7a8ccf", "sha256": "ad38e1c7ecede3187c1b9de90fdd180b0c0503216ce8dc078828a92e0faab2b8"}, "downloads": -1, "filename": "jigfyp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "913d7fd53c0f1b5071b14fbcfe7a8ccf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2212, "upload_time": "2015-08-13T00:29:34", "upload_time_iso_8601": "2015-08-13T00:29:34.942907Z", "url": "https://files.pythonhosted.org/packages/bd/8f/4d5b9068ddec8c066e6b4fc8b6d01fbf68b104aaa04aceaa7c874900a2a8/jigfyp-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:42 2020"}