{"info": {"author": "Bradley Ayers", "author_email": "bradley.ayers@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Database"], "description": "=================\ndjango-db-signals\n=================\n\nThis app adds a set of signals to some of Django's database operations:\n\n- ``django.db.signals.pre_commit``\n- ``django.db.signals.post_commit``\n- ``django.db.signals.pre_rollback``\n- ``django.db.signals.post_rollback``\n- ``django.db.signals.pre_transaction_management``\n- ``django.db.signals.post_transaction_management``\n\n\nRequirements\n============\n\n- Python 2.6/2.7/3.2/3.3 (3.x requires Django >=1.5)\n- Django 1.2/1.3/1.4/1.5\n\n\nInstallation\n============\n\n1. Install from PyPI: ``pip install django-db-signals``.\n2. Add ``'django_db_signals'`` to ``INSTALLED_APPS``.\n3. Enable the signals by adding to your ``models.py``:\n\n   .. code-block:: python\n\n       import django_db_signals\n       django_db_signals.enable()\n\n\nExample\n=======\n\nLet's assume you've installed django-db-signals, and now you'd like to log a\nmessage each time the database is rolled back:\n\n.. code-block:: python\n\n    from django.db import signals\n    from django.dispatch import receiver\n    import logging\n\n    logger = logging.getLogger(__name__)\n\n    @reciever(signals.post_rollback)\n    def log_rollbacks(sender, **kwargs):\n        # sender is a DatabaseWrapper object\n        logger.info(\"A rollback occurred on database %s\" %\n                    sender.alias)\n\n\nDesign\n======\n\nIn the same way that Django settings are available via ``django.conf.settings``\nattributes, signals are available via ``django.db.signals`` attributes. As\nsuch, attempting to import individual signals will fail:\n\n.. code-block:: python\n\n    >>> import django_db_signals\n    >>> django_db_signals.enable()\n\n    >>> from django.db import signals  # GOOD\n    >>> signals.pre_commit\n    <django.dispatch.dispatcher.Signal object at 0x1089c8b90>\n\n    >>> from django.db.signals import pre_commit  # BAD\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named signals\n\n\n``pre_\u2026`` vs ``post_\u2026`` signals\n-------------------------------\n\n``pre_\u2026`` signals are sent *before* an operation occurs. The signals are sent\nvia ``.send(\u2026)``. Exceptions raised in receivers are propagated to the\napplication. This can be exploited to cancel the operation (e.g. to block a\ncommit).\n\n``post_\u2026`` signals are sent *after* an operation, and as such can't offer the\nsame *cancel the pending operation* behaviour. The signal is sent via\n``.send_robust(\u2026)`` to ensure all receivers are called. Any exceptions raised\nare logged, but are not propagated to the application.\n\n\nLogging\n-------\n\nA logger named ``django.db.signals`` is used to log all exceptions raised in\n``post_\u2026`` receivers.\n\n\nSignal senders\n--------------\n\nFor all database signals, the sender of the signal is Django's database\nconnection wrapper.\n\n\nTroubleshooting\n===============\n\n    \"I can import ``django.db.signals``, but when I try to access a signal I get\n    an ``AttributeError`` exception.\"\n\nYou need to enable the signals via ``django_db_signals.enable()``\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bradleyayers/django-db-signals", "keywords": null, "license": "Simplified BSD", "maintainer": null, "maintainer_email": null, "name": "django-db-signals", "package_url": "https://pypi.org/project/django-db-signals/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-db-signals/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bradleyayers/django-db-signals"}, "release_url": "https://pypi.org/project/django-db-signals/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Django database signals (pre/post commit/rollback).", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This app adds a set of signals to some of Django\u2019s database operations:</p>\n<ul>\n<li><tt>django.db.signals.pre_commit</tt></li>\n<li><tt>django.db.signals.post_commit</tt></li>\n<li><tt>django.db.signals.pre_rollback</tt></li>\n<li><tt>django.db.signals.post_rollback</tt></li>\n<li><tt>django.db.signals.pre_transaction_management</tt></li>\n<li><tt>django.db.signals.post_transaction_management</tt></li>\n</ul>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.6/2.7/3.2/3.3 (3.x requires Django &gt;=1.5)</li>\n<li>Django 1.2/1.3/1.4/1.5</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install from PyPI: <tt>pip install <span class=\"pre\">django-db-signals</span></tt>.</p>\n</li>\n<li><p>Add <tt>'django_db_signals'</tt> to <tt>INSTALLED_APPS</tt>.</p>\n</li>\n<li><p>Enable the signals by adding to your <tt>models.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">django_db_signals</span>\n<span class=\"n\">django_db_signals</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Let\u2019s assume you\u2019ve installed django-db-signals, and now you\u2019d like to log a\nmessage each time the database is rolled back:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">signals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@reciever</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">post_rollback</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">log_rollbacks</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># sender is a DatabaseWrapper object</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"A rollback occurred on database </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span>\n                <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"design\">\n<h2>Design</h2>\n<p>In the same way that Django settings are available via <tt>django.conf.settings</tt>\nattributes, signals are available via <tt>django.db.signals</tt> attributes. As\nsuch, attempting to import individual signals will fail:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">django_db_signals</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">django_db_signals</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">signals</span>  <span class=\"c1\"># GOOD</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">pre_commit</span>\n<span class=\"o\">&lt;</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">Signal</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x1089c8b90</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">django.db.signals</span> <span class=\"kn\">import</span> <span class=\"n\">pre_commit</span>  <span class=\"c1\"># BAD</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"n\">signals</span>\n</pre>\n<div id=\"pre-vs-post-signals\">\n<h3><tt>pre_\u2026</tt> vs <tt>post_\u2026</tt> signals</h3>\n<p><tt>pre_\u2026</tt> signals are sent <em>before</em> an operation occurs. The signals are sent\nvia <tt><span class=\"pre\">.send(\u2026)</span></tt>. Exceptions raised in receivers are propagated to the\napplication. This can be exploited to cancel the operation (e.g. to block a\ncommit).</p>\n<p><tt>post_\u2026</tt> signals are sent <em>after</em> an operation, and as such can\u2019t offer the\nsame <em>cancel the pending operation</em> behaviour. The signal is sent via\n<tt><span class=\"pre\">.send_robust(\u2026)</span></tt> to ensure all receivers are called. Any exceptions raised\nare logged, but are not propagated to the application.</p>\n</div>\n<div id=\"logging\">\n<h3>Logging</h3>\n<p>A logger named <tt>django.db.signals</tt> is used to log all exceptions raised in\n<tt>post_\u2026</tt> receivers.</p>\n</div>\n<div id=\"signal-senders\">\n<h3>Signal senders</h3>\n<p>For all database signals, the sender of the signal is Django\u2019s database\nconnection wrapper.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h2>Troubleshooting</h2>\n<blockquote>\n\u201cI can import <tt>django.db.signals</tt>, but when I try to access a signal I get\nan <tt>AttributeError</tt> exception.\u201d</blockquote>\n<p>You need to enable the signals via <tt>django_db_signals.enable()</tt></p>\n</div>\n\n          </div>"}, "last_serial": 789433, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "7abdb1bf809cbd549426d01edf255a34", "sha256": "b2e4b0b6a471ed6cfb3f78650b518af92b2e62ba0c4714c7062debd1aa40a333"}, "downloads": -1, "filename": "django-db-signals-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7abdb1bf809cbd549426d01edf255a34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3837, "upload_time": "2012-12-22T22:52:48", "upload_time_iso_8601": "2012-12-22T22:52:48.507131Z", "url": "https://files.pythonhosted.org/packages/ba/72/708ed89361d08679dd04d5783af51ee1e196e4b026493f70c59e4f77b963/django-db-signals-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7abdb1bf809cbd549426d01edf255a34", "sha256": "b2e4b0b6a471ed6cfb3f78650b518af92b2e62ba0c4714c7062debd1aa40a333"}, "downloads": -1, "filename": "django-db-signals-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7abdb1bf809cbd549426d01edf255a34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3837, "upload_time": "2012-12-22T22:52:48", "upload_time_iso_8601": "2012-12-22T22:52:48.507131Z", "url": "https://files.pythonhosted.org/packages/ba/72/708ed89361d08679dd04d5783af51ee1e196e4b026493f70c59e4f77b963/django-db-signals-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:38 2020"}