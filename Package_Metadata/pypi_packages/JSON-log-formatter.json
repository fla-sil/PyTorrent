{"info": {"author": "Marsel Mavletkulov", "author_email": "marselester@ya.ru", "bugtrack_url": null, "classifiers": [], "description": "==================\nJSON log formatter\n==================\n\n.. image:: https://travis-ci.org/marselester/json-log-formatter.png\n   :target: https://travis-ci.org/marselester/json-log-formatter\n\nThe library helps you to store logs in JSON format. Why is it important?\nWell, it facilitates integration with **Logstash**.\n\nUsage example:\n\n.. code-block:: python\n\n    import logging\n\n    import json_log_formatter\n\n    formatter = json_log_formatter.JSONFormatter()\n\n    json_handler = logging.FileHandler(filename='/var/log/my-log.json')\n    json_handler.setFormatter(formatter)\n\n    logger = logging.getLogger('my_json')\n    logger.addHandler(json_handler)\n    logger.setLevel(logging.INFO)\n\n    logger.info('Sign up', extra={'referral_code': '52d6ce'})\n\n    try:\n        raise ValueError('something wrong')\n    except ValueError:\n        logger.error('Request failed', exc_info=True)\n\nThe log file will contain the following log record (inline).\n\n.. code-block:: json\n\n    {\n        \"message\": \"Sign up\",\n        \"time\": \"2015-09-01T06:06:26.524448\",\n        \"referral_code\": \"52d6ce\"\n    }\n    {\n        \"message\": \"Request failed\",\n        \"time\": \"2015-09-01T06:06:26.524449\",\n        \"exc_info\": \"Traceback (most recent call last): ...\"\n    }\n\nJSON libraries\n--------------\n\nYou can use **ujson** or **simplejson** instead of built-in **json** library.\n\n.. code-block:: python\n\n    import json_log_formatter\n    import ujson\n\n    formatter = json_log_formatter.JSONFormatter()\n    formatter.json_lib = ujson\n\nNote, **ujson** doesn't support `dumps(default=f)` argument:\nif it can't serialize an attribute, it might fail with `TypeError` or skip an attribute.\n\nDjango integration\n------------------\n\nHere is an example of how the JSON formatter can be used with Django.\n\n.. code-block:: python\n\n    LOGGING['formatters']['json'] = {\n        '()': 'json_log_formatter.JSONFormatter',\n    }\n    LOGGING['handlers']['json_file'] = {\n        'level': 'INFO',\n        'class': 'logging.FileHandler',\n        'filename': '/var/log/my-log.json',\n        'formatter': 'json',\n    }\n    LOGGING['loggers']['my_json'] = {\n        'handlers': ['json_file'],\n        'level': 'INFO',\n    }\n\nLet's try to log something.\n\n.. code-block:: python\n\n    import logging\n\n    logger = logging.getLogger('my_json')\n\n    logger.info('Sign up', extra={'referral_code': '52d6ce'})\n\nCustom formatter\n----------------\n\nYou will likely need a custom log format. For instance, you want to log\na user ID, an IP address and ``time`` as ``django.utils.timezone.now()``.\nTo do so you should override ``JSONFormatter.json_record()``.\n\n.. code-block:: python\n\n    class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):\n        def json_record(self, message: str, extra: dict, record: logging.LogRecord) -> dict:\n            extra['message'] = message\n            extra['user_id'] = current_user_id()\n            extra['ip'] = current_ip()\n            \n            # Include builtins\n            extra['level'] = record.levelname\n            extra['name'] = record.name\n            \n            if 'time' not in extra:\n                extra['time'] = django.utils.timezone.now()\n            \n            if record.exc_info:\n                extra['exc_info'] = self.formatException(record.exc_info)\n        \n            return extra\n\nLet's say you want ``datetime`` to be serialized as timestamp.\nYou can use **ujson** (which does it by default) and disable\nISO8601 date mutation.\n\n.. code-block:: python\n\n    class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):\n        json_lib = ujson\n\n        def mutate_json_record(self, json_record):\n            return json_record\n\nTests\n-----\n\n.. code-block:: console\n\n    $ pip install -r requirements.txt\n    $ tox", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marselester/json-log-formatter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "JSON-log-formatter", "package_url": "https://pypi.org/project/JSON-log-formatter/", "platform": "", "project_url": "https://pypi.org/project/JSON-log-formatter/", "project_urls": {"Homepage": "https://github.com/marselester/json-log-formatter"}, "release_url": "https://pypi.org/project/JSON-log-formatter/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "JSON log formatter", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/marselester/json-log-formatter\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/marselester/json-log-formatter.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/278b1e9c708b55eca97eb286d59f3799871899ef/68747470733a2f2f7472617669732d63692e6f72672f6d617273656c65737465722f6a736f6e2d6c6f672d666f726d61747465722e706e67\"></a>\n<p>The library helps you to store logs in JSON format. Why is it important?\nWell, it facilitates integration with <strong>Logstash</strong>.</p>\n<p>Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json_log_formatter</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">()</span>\n\n<span class=\"n\">json_handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">FileHandler</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'/var/log/my-log.json'</span><span class=\"p\">)</span>\n<span class=\"n\">json_handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my_json'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">json_handler</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Sign up'</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'referral_code'</span><span class=\"p\">:</span> <span class=\"s1\">'52d6ce'</span><span class=\"p\">})</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'something wrong'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Request failed'</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>The log file will contain the following log record (inline).</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Sign up\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2015-09-01T06:06:26.524448\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"referral_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"52d6ce\"</span>\n<span class=\"p\">}</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Request failed\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2015-09-01T06:06:26.524449\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"exc_info\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Traceback (most recent call last): ...\"</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"json-libraries\">\n<h2>JSON libraries</h2>\n<p>You can use <strong>ujson</strong> or <strong>simplejson</strong> instead of built-in <strong>json</strong> library.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json_log_formatter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ujson</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">()</span>\n<span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"n\">json_lib</span> <span class=\"o\">=</span> <span class=\"n\">ujson</span>\n</pre>\n<p>Note, <strong>ujson</strong> doesn\u2019t support <cite>dumps(default=f)</cite> argument:\nif it can\u2019t serialize an attribute, it might fail with <cite>TypeError</cite> or skip an attribute.</p>\n</div>\n<div id=\"django-integration\">\n<h2>Django integration</h2>\n<p>Here is an example of how the JSON formatter can be used with Django.</p>\n<pre><span class=\"n\">LOGGING</span><span class=\"p\">[</span><span class=\"s1\">'formatters'</span><span class=\"p\">][</span><span class=\"s1\">'json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'()'</span><span class=\"p\">:</span> <span class=\"s1\">'json_log_formatter.JSONFormatter'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">LOGGING</span><span class=\"p\">[</span><span class=\"s1\">'handlers'</span><span class=\"p\">][</span><span class=\"s1\">'json_file'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'logging.FileHandler'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'filename'</span><span class=\"p\">:</span> <span class=\"s1\">'/var/log/my-log.json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'formatter'</span><span class=\"p\">:</span> <span class=\"s1\">'json'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">LOGGING</span><span class=\"p\">[</span><span class=\"s1\">'loggers'</span><span class=\"p\">][</span><span class=\"s1\">'my_json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'json_file'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Let\u2019s try to log something.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my_json'</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Sign up'</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'referral_code'</span><span class=\"p\">:</span> <span class=\"s1\">'52d6ce'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"custom-formatter\">\n<h2>Custom formatter</h2>\n<p>You will likely need a custom log format. For instance, you want to log\na user ID, an IP address and <tt>time</tt> as <tt>django.utils.timezone.now()</tt>.\nTo do so you should override <tt>JSONFormatter.json_record()</tt>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomisedJSONFormatter</span><span class=\"p\">(</span><span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">json_record</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_user_id</span><span class=\"p\">()</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'ip'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_ip</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Include builtins</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'level'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">levelname</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'time'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">extra</span><span class=\"p\">:</span>\n            <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">:</span>\n            <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'exc_info'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">formatException</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">extra</span>\n</pre>\n<p>Let\u2019s say you want <tt>datetime</tt> to be serialized as timestamp.\nYou can use <strong>ujson</strong> (which does it by default) and disable\nISO8601 date mutation.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomisedJSONFormatter</span><span class=\"p\">(</span><span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">):</span>\n    <span class=\"n\">json_lib</span> <span class=\"o\">=</span> <span class=\"n\">ujson</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">mutate_json_record</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_record</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json_record</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<pre><span class=\"gp\">$</span> pip install -r requirements.txt\n<span class=\"gp\">$</span> tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6592153, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7a1332e67cb6eb1c5b8768ef61270618", "sha256": "ac134a88de0f0e527deab0c729bc3255cc73f40a53ce99efccf89a53b844cda5"}, "downloads": -1, "filename": "JSON-log-formatter-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7a1332e67cb6eb1c5b8768ef61270618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1896, "upload_time": "2015-09-01T07:53:46", "upload_time_iso_8601": "2015-09-01T07:53:46.413559Z", "url": "https://files.pythonhosted.org/packages/8d/39/008311a80cc948b314e9473443e9e5408e8794c0043daa5306115ee938eb/JSON-log-formatter-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c8efc716ed9ea5fb5069c2c7ce804215", "sha256": "99e5220208871f8b6c01e173bdc6fa341869463b3c3a75b759abe8c214d1c110"}, "downloads": -1, "filename": "JSON-log-formatter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c8efc716ed9ea5fb5069c2c7ce804215", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2712, "upload_time": "2015-09-01T11:58:57", "upload_time_iso_8601": "2015-09-01T11:58:57.202923Z", "url": "https://files.pythonhosted.org/packages/c4/35/52363d4d55cd5cf45ce33f22a882674a33baa850162c59fce512341f3ed1/JSON-log-formatter-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "7c4bb3a3e0e99229dfd73c7874b85c0d", "sha256": "acbcede787875ed5ed4cdd157e531d44c76545d523b41e1d4e4e59df493aeb7b"}, "downloads": -1, "filename": "JSON-log-formatter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7c4bb3a3e0e99229dfd73c7874b85c0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2836, "upload_time": "2016-05-19T14:21:16", "upload_time_iso_8601": "2016-05-19T14:21:16.414438Z", "url": "https://files.pythonhosted.org/packages/46/83/a51e7ed83d0345ff6bb63d4f6d8c1fbfc388efafaabab9ccb4064daffef3/JSON-log-formatter-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8fa4b8704bd23ebd653185862648b259", "sha256": "8bb02773a37274c08f4de748e3accbed269c8395d27149bc2e7e9109af342eee"}, "downloads": -1, "filename": "JSON_log_formatter-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "8fa4b8704bd23ebd653185862648b259", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5712, "upload_time": "2017-03-02T08:58:53", "upload_time_iso_8601": "2017-03-02T08:58:53.108298Z", "url": "https://files.pythonhosted.org/packages/17/59/496f7b4321d2b8d3cfa6d59459a2811747f37bdd5ceb73d913af019fc6ce/JSON_log_formatter-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ed6080fb65704d856691260e19cacff", "sha256": "cdc1f1dabc0b9c808ed4e4f26e73885a9e7955bf7190dd9f1b86be967feb5b29"}, "downloads": -1, "filename": "JSON-log-formatter-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4ed6080fb65704d856691260e19cacff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3362, "upload_time": "2017-03-02T08:58:50", "upload_time_iso_8601": "2017-03-02T08:58:50.191541Z", "url": "https://files.pythonhosted.org/packages/40/25/03b613db3ef5a3acc778d170573b35985b246e995061657afdbc1341ed8e/JSON-log-formatter-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b757c635dc55cf02371c01552c6068f5", "sha256": "ee187c9a80936cbf1259f73573973450fc24b84a4fb54e53eb0dcff86ea1e759"}, "downloads": -1, "filename": "JSON-log-formatter-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b757c635dc55cf02371c01552c6068f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3313, "upload_time": "2020-02-08T02:12:58", "upload_time_iso_8601": "2020-02-08T02:12:58.749928Z", "url": "https://files.pythonhosted.org/packages/2a/51/603c3cedc789617556248b51bdc941e967fc068902e754c1475774161d7a/JSON-log-formatter-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b757c635dc55cf02371c01552c6068f5", "sha256": "ee187c9a80936cbf1259f73573973450fc24b84a4fb54e53eb0dcff86ea1e759"}, "downloads": -1, "filename": "JSON-log-formatter-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b757c635dc55cf02371c01552c6068f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3313, "upload_time": "2020-02-08T02:12:58", "upload_time_iso_8601": "2020-02-08T02:12:58.749928Z", "url": "https://files.pythonhosted.org/packages/2a/51/603c3cedc789617556248b51bdc941e967fc068902e754c1475774161d7a/JSON-log-formatter-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:46 2020"}