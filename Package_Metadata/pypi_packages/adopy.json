{"info": {"author": "Jaeyeong Yang", "author_email": "jaeyeong.yang1125@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "# ADOpy <img src=\"https://adopy.github.io/logo/adopy-logo.svg\" align=\"right\" width=\"300px\">\n\n[![PyPI](https://img.shields.io/pypi/v/adopy.svg?color=green)](https://pypi.org/project/adopy/)\n[![Project Status: Active \u2013 The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)\n[![Travis CI](https://travis-ci.org/adopy/adopy.svg?branch=master)](https://travis-ci.org/adopy/adopy)\n[![CodeCov](https://codecov.io/gh/adopy/adopy/branch/master/graph/badge.svg?token=jFnJgnVV1k)](https://codecov.io/gh/adopy/adopy)\n\n**ADOpy** is a Python implementation of Adaptive Design Optimization (ADO; Myung, Cavagnaro, & Pitt, 2013), which computes optimal designs dynamically in an experiment. Its modular structure permit easy integration into existing experimentation code.\n\nADOpy supports Python 3.5 or above and relies on NumPy, SciPy, and Pandas.\n\n### Features\n\n- **Grid-based computation of optimal designs using only three classes**: `adopy.Task`, `adopy.Model`, and `adopy.Engine`.\n- **Easily customizable for your own tasks and models**\n- **Pre-implemented Task and Model classes including**:\n  - Psychometric function estimation for 2AFC tasks (`adopy.tasks.psi`)\n  - Delay discounting task (`adopy.tasks.ddt`)\n  - Choice under risk and ambiguity task (`adopy.tasks.cra`)\n- **Example code for experiments using PsychoPy** ([link][example-code])\n\n[example-code]: https://github.com/adopy/adopy/tree/master/examples\n\n### Resources\n\n- [**Getting started**](https://adopy.org/getting-started.html)\n- [**Documentation**](https://adopy.org)\n- [**Bug reports**](https://github.com/adopy/adopy/issues)\n\n## (not so) Quick-start guide ##\n\n### Step 0. Install ADOpy on the terminal\n\n```bash\n# Install the stable version from PyPI\npip install adopy\n\n# Or install the developmental version from GitHub\ngit clone https://github.com/adopy/adopy.git\ncd adopy\ngit checkout develop\npip install .\n```\n\n### Step 1. Define a task using `adopy.Task`\n\nAssume that a user want to use ADOpy for an *arbitrary* task with two design\nvariables (`x1` and `x2`) where participants can make a binary choice on each\ntrial. Then, the task can be defined with `adopy.Task` as described below:\n\n```python\nfrom adopy import Task\n\ntask = Task(name='My New Experiment',  # Name of the task (optional)\n            designs = ['x1', 'x2'],    # Labels of design variables\n            responses = [0, 1])        # Possible responses\n```\n\n### Step 2. Define a model using `adopy.Model`\n\nTo predict partipants' choices, here we assume a logistic regression model\nthat calculates the probability to make a positive response using three model\nparameters (`b0`, `b1`, and `b2`):\n\n<img src=\"https://user-images.githubusercontent.com/11037140/59533069-5f7b7880-8f25-11e9-8440-4d31fb6ac260.png\" align=\"center\">\n\nHow to compute the probabilty `p` should be defined as a function:\n\n```python\nimport numpy as np\n\ndef calculate_prob(x1, x2, b0, b1, b2):\n    \"\"\"A function to compute the probability of a positive response.\"\"\"\n    logit = b0 + x1 * b1 + x1 * b2\n    p_obs = 1. / (1 + np.exp(-logit))\n    return p_obs\n```\n\nUsing the information and the function, the model can be defined with\n`adopy.Model`:\n\n```python\nfrom adopy import Model\n\nmodel = Model(name='My Logistic Model',   # Name of the model (optional)\n              params=['b0', 'b1', 'b2'],  # Labels of model parameters\n              func=calculate_prob)        # A probability function\n```\n\n### Step 3. Define grids for design variables and model parameters\n\nSince ADOpy uses grid search to search the design space and parameter space,\nyou must define a grid for design variables and model parameters.\nThe grid can be defined using the labels (of design variables or model\nparameters) as its key and an array of the corresponding grid points\nas its value.\n\n```python\nimport numpy as np\n\ngrid_design = {\n    'x1': np.linspace(0, 50, 100),    # 100 grid points within [0, 50]\n    'x2': np.linspace(-20, 30, 100),  # 100 grid points within [-20, 30]\n}\n\ngrid_param = {\n    'b0': np.linspace(-5, 5, 100),  # 100 grid points within [-5, 5]\n    'b1': np.linspace(-5, 5, 100),  # 100 grid points within [-5, 5]\n    'b2': np.linspace(-5, 5, 100),  # 100 grid points within [-5, 5]\n}\n```\n\n### Step 4. Initialize an engine using `adopy.Engine`\n\nUsing the objects created so far, an engine should be initialized using\n`adopy.Engine`. It contains built-in functions to compute an optimal design\nusing ADO.\n\n```python\nfrom adopy import Engine\n\nengine = Engine(model=model,              # a Model object\n                task=task,                # a Task object\n                grid_design=grid_design,  # a grid for design variables\n                grid_param=grid_param)    # a grid for model parameters\n```\n\n### Step 5. Compute a design using the engine\n\n```python\n# Compute an optimal design using ADO\ndesign = engine.get_design()\ndesign = engine.get_design('optimal')\n\n# Compute a randomly chosen design, as is typically done in non-ADO experiments\ndesign = engine.get_design('random')\n```\n\n### Step 6. Collect an observation in your experiment\n\n```python\n# Get a response from a participant using your own code\nresponse = ...\n```\n\n### Step 7. Update the engine with the observation\n\n```python\n# Update the engine with the design and the corresponding response\nengine.update(design, response)\n```\n\n### Step 8. Repeat Step 5 through Step 7 until the experiment is over\n\n```python\nNUM_TRIAL = 100  # number of trials\n\nfor trial in range(NUM_TRIAL):\n    # Compute an optimal design for the current trial\n    design = engine.get_design('optimal')\n\n    # Get a response using the optimal design\n    response = ...  # Using users' own codes\n\n    # Update the engine\n    engine.update(design, response)\n```\n\n## Citation\nIf you use ADOpy, please cite this package along with the specific version.\nIt greatly encourages contributors to continue supporting ADOpy.\n\n> Yang, J., Ahn, W.-Y., Pitt., M. A., & Myung, J. I. (2019).\n> *ADOpy: A Python Package for Adaptive Design Optimization*.\n> Retrieved from https://adopy.org\n\n## References\n- Myung, J. I., Cavagnaro, D. R., and Pitt, M. A. (2013).\n  A tutorial on adaptive design optimization.\n  *Journal of Mathematical Psychology, 57*, 53\u201367.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://adopy.org/", "keywords": "", "license": "GPL-3", "maintainer": "", "maintainer_email": "", "name": "adopy", "package_url": "https://pypi.org/project/adopy/", "platform": "", "project_url": "https://pypi.org/project/adopy/", "project_urls": {"Homepage": "https://adopy.org/"}, "release_url": "https://pypi.org/project/adopy/0.3.1/", "requires_dist": ["numpy", "pandas", "scipy"], "requires_python": ">=3.5", "summary": "Adaptive Design Optimization on Experimental Tasks", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ADOpy <img align=\"right\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42214daf1f18fbf0b34b83f1e3c539a8b44dea44/68747470733a2f2f61646f70792e6769746875622e696f2f6c6f676f2f61646f70792d6c6f676f2e737667\" width=\"300px\"></h1>\n<p><a href=\"https://pypi.org/project/adopy/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af4c1682375ca375d4d7a2801c36e0864ad2d47c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61646f70792e7376673f636f6c6f723d677265656e\"></a>\n<a href=\"https://www.repostatus.org/#active\" rel=\"nofollow\"><img alt=\"Project Status: Active \u2013 The project has reached a stable, usable state and is being actively developed.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbb8ab8ca3109b443de9728eb9fc0fa6113fe21f/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667\"></a>\n<a href=\"https://travis-ci.org/adopy/adopy\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5744d1fe1d9412c096993e9a7dd3040c22407453/68747470733a2f2f7472617669732d63692e6f72672f61646f70792f61646f70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/adopy/adopy\" rel=\"nofollow\"><img alt=\"CodeCov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5496bc91321a0479b686a54b2c13662927b4a84/68747470733a2f2f636f6465636f762e696f2f67682f61646f70792f61646f70792f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d6a466e4a676e5656316b\"></a></p>\n<p><strong>ADOpy</strong> is a Python implementation of Adaptive Design Optimization (ADO; Myung, Cavagnaro, &amp; Pitt, 2013), which computes optimal designs dynamically in an experiment. Its modular structure permit easy integration into existing experimentation code.</p>\n<p>ADOpy supports Python 3.5 or above and relies on NumPy, SciPy, and Pandas.</p>\n<h3>Features</h3>\n<ul>\n<li><strong>Grid-based computation of optimal designs using only three classes</strong>: <code>adopy.Task</code>, <code>adopy.Model</code>, and <code>adopy.Engine</code>.</li>\n<li><strong>Easily customizable for your own tasks and models</strong></li>\n<li><strong>Pre-implemented Task and Model classes including</strong>:\n<ul>\n<li>Psychometric function estimation for 2AFC tasks (<code>adopy.tasks.psi</code>)</li>\n<li>Delay discounting task (<code>adopy.tasks.ddt</code>)</li>\n<li>Choice under risk and ambiguity task (<code>adopy.tasks.cra</code>)</li>\n</ul>\n</li>\n<li><strong>Example code for experiments using PsychoPy</strong> (<a href=\"https://github.com/adopy/adopy/tree/master/examples\" rel=\"nofollow\">link</a>)</li>\n</ul>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://adopy.org/getting-started.html\" rel=\"nofollow\"><strong>Getting started</strong></a></li>\n<li><a href=\"https://adopy.org\" rel=\"nofollow\"><strong>Documentation</strong></a></li>\n<li><a href=\"https://github.com/adopy/adopy/issues\" rel=\"nofollow\"><strong>Bug reports</strong></a></li>\n</ul>\n<h2>(not so) Quick-start guide</h2>\n<h3>Step 0. Install ADOpy on the terminal</h3>\n<pre><span class=\"c1\"># Install the stable version from PyPI</span>\npip install adopy\n\n<span class=\"c1\"># Or install the developmental version from GitHub</span>\ngit clone https://github.com/adopy/adopy.git\n<span class=\"nb\">cd</span> adopy\ngit checkout develop\npip install .\n</pre>\n<h3>Step 1. Define a task using <code>adopy.Task</code></h3>\n<p>Assume that a user want to use ADOpy for an <em>arbitrary</em> task with two design\nvariables (<code>x1</code> and <code>x2</code>) where participants can make a binary choice on each\ntrial. Then, the task can be defined with <code>adopy.Task</code> as described below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adopy</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'My New Experiment'</span><span class=\"p\">,</span>  <span class=\"c1\"># Name of the task (optional)</span>\n            <span class=\"n\">designs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">],</span>    <span class=\"c1\"># Labels of design variables</span>\n            <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>        <span class=\"c1\"># Possible responses</span>\n</pre>\n<h3>Step 2. Define a model using <code>adopy.Model</code></h3>\n<p>To predict partipants' choices, here we assume a logistic regression model\nthat calculates the probability to make a positive response using three model\nparameters (<code>b0</code>, <code>b1</code>, and <code>b2</code>):</p>\n<img align=\"center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea9857cfff59a7cebca9bf355242d6ccf1789d44/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31313033373134302f35393533333036392d35663762373838302d386632352d313165392d383434302d3464333166623661633236302e706e67\">\n<p>How to compute the probabilty <code>p</code> should be defined as a function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_prob</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">b0</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"A function to compute the probability of a positive response.\"\"\"</span>\n    <span class=\"n\">logit</span> <span class=\"o\">=</span> <span class=\"n\">b0</span> <span class=\"o\">+</span> <span class=\"n\">x1</span> <span class=\"o\">*</span> <span class=\"n\">b1</span> <span class=\"o\">+</span> <span class=\"n\">x1</span> <span class=\"o\">*</span> <span class=\"n\">b2</span>\n    <span class=\"n\">p_obs</span> <span class=\"o\">=</span> <span class=\"mf\">1.</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">logit</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">p_obs</span>\n</pre>\n<p>Using the information and the function, the model can be defined with\n<code>adopy.Model</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adopy</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'My Logistic Model'</span><span class=\"p\">,</span>   <span class=\"c1\"># Name of the model (optional)</span>\n              <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'b0'</span><span class=\"p\">,</span> <span class=\"s1\">'b1'</span><span class=\"p\">,</span> <span class=\"s1\">'b2'</span><span class=\"p\">],</span>  <span class=\"c1\"># Labels of model parameters</span>\n              <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">calculate_prob</span><span class=\"p\">)</span>        <span class=\"c1\"># A probability function</span>\n</pre>\n<h3>Step 3. Define grids for design variables and model parameters</h3>\n<p>Since ADOpy uses grid search to search the design space and parameter space,\nyou must define a grid for design variables and model parameters.\nThe grid can be defined using the labels (of design variables or model\nparameters) as its key and an array of the corresponding grid points\nas its value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">grid_design</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'x1'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>    <span class=\"c1\"># 100 grid points within [0, 50]</span>\n    <span class=\"s1\">'x2'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>  <span class=\"c1\"># 100 grid points within [-20, 30]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">grid_param</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'b0'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>  <span class=\"c1\"># 100 grid points within [-5, 5]</span>\n    <span class=\"s1\">'b1'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>  <span class=\"c1\"># 100 grid points within [-5, 5]</span>\n    <span class=\"s1\">'b2'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>  <span class=\"c1\"># 100 grid points within [-5, 5]</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Step 4. Initialize an engine using <code>adopy.Engine</code></h3>\n<p>Using the objects created so far, an engine should be initialized using\n<code>adopy.Engine</code>. It contains built-in functions to compute an optimal design\nusing ADO.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adopy</span> <span class=\"kn\">import</span> <span class=\"n\">Engine</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">Engine</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">,</span>              <span class=\"c1\"># a Model object</span>\n                <span class=\"n\">task</span><span class=\"o\">=</span><span class=\"n\">task</span><span class=\"p\">,</span>                <span class=\"c1\"># a Task object</span>\n                <span class=\"n\">grid_design</span><span class=\"o\">=</span><span class=\"n\">grid_design</span><span class=\"p\">,</span>  <span class=\"c1\"># a grid for design variables</span>\n                <span class=\"n\">grid_param</span><span class=\"o\">=</span><span class=\"n\">grid_param</span><span class=\"p\">)</span>    <span class=\"c1\"># a grid for model parameters</span>\n</pre>\n<h3>Step 5. Compute a design using the engine</h3>\n<pre><span class=\"c1\"># Compute an optimal design using ADO</span>\n<span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_design</span><span class=\"p\">()</span>\n<span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_design</span><span class=\"p\">(</span><span class=\"s1\">'optimal'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute a randomly chosen design, as is typically done in non-ADO experiments</span>\n<span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_design</span><span class=\"p\">(</span><span class=\"s1\">'random'</span><span class=\"p\">)</span>\n</pre>\n<h3>Step 6. Collect an observation in your experiment</h3>\n<pre><span class=\"c1\"># Get a response from a participant using your own code</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n</pre>\n<h3>Step 7. Update the engine with the observation</h3>\n<pre><span class=\"c1\"># Update the engine with the design and the corresponding response</span>\n<span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">design</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h3>Step 8. Repeat Step 5 through Step 7 until the experiment is over</h3>\n<pre><span class=\"n\">NUM_TRIAL</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># number of trials</span>\n\n<span class=\"k\">for</span> <span class=\"n\">trial</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">NUM_TRIAL</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Compute an optimal design for the current trial</span>\n    <span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_design</span><span class=\"p\">(</span><span class=\"s1\">'optimal'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get a response using the optimal design</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"o\">...</span>  <span class=\"c1\"># Using users' own codes</span>\n\n    <span class=\"c1\"># Update the engine</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">design</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h2>Citation</h2>\n<p>If you use ADOpy, please cite this package along with the specific version.\nIt greatly encourages contributors to continue supporting ADOpy.</p>\n<blockquote>\n<p>Yang, J., Ahn, W.-Y., Pitt., M. A., &amp; Myung, J. I. (2019).\n<em>ADOpy: A Python Package for Adaptive Design Optimization</em>.\nRetrieved from <a href=\"https://adopy.org\" rel=\"nofollow\">https://adopy.org</a></p>\n</blockquote>\n<h2>References</h2>\n<ul>\n<li>Myung, J. I., Cavagnaro, D. R., and Pitt, M. A. (2013).\nA tutorial on adaptive design optimization.\n<em>Journal of Mathematical Psychology, 57</em>, 53\u201367.</li>\n</ul>\n\n          </div>"}, "last_serial": 6386668, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "adf4955c81b0b4f9903b51a83e7d7420", "sha256": "61245caaa773a477402409cac29edb1e742dc783c59aa3dacf4e9c65ef17eda7"}, "downloads": -1, "filename": "adopy-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "adf4955c81b0b4f9903b51a83e7d7420", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33572, "upload_time": "2019-07-02T17:03:15", "upload_time_iso_8601": "2019-07-02T17:03:15.896742Z", "url": "https://files.pythonhosted.org/packages/2c/a8/fdfca3b4ede0c99006a480da2bfefe352142bafbdd72c120caf9278d9081/adopy-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6681852acbcc64fd36830a438327679", "sha256": "dfe4097008da1ab3291c8dc2fb78a99f1c6a23df534ca8fb9af47bfee9a57eed"}, "downloads": -1, "filename": "adopy-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c6681852acbcc64fd36830a438327679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 875646, "upload_time": "2019-07-02T17:03:33", "upload_time_iso_8601": "2019-07-02T17:03:33.242521Z", "url": "https://files.pythonhosted.org/packages/e4/69/f6d0475aa62609bab8dd8fbe0844a77eb056dccc083c88fb7f4c7619a4ea/adopy-0.3.1.tar.gz", "yanked": false}], "0.4.0rc1": [{"comment_text": "", "digests": {"md5": "d970d26b2ecd48806f9c1215f2aae365", "sha256": "8d9fe9f73e809e0bb4406e145db54f68df0a947932e0a3cf5cc2dc805411f305"}, "downloads": -1, "filename": "adopy-0.4.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "d970d26b2ecd48806f9c1215f2aae365", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 31795, "upload_time": "2020-01-02T16:05:41", "upload_time_iso_8601": "2020-01-02T16:05:41.907704Z", "url": "https://files.pythonhosted.org/packages/1b/a2/9f0f5b4fcf307cc83954cfbf74d87a0597b43a4fe4fb36f1e231cd2d666a/adopy-0.4.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc06eb471cee7ecc2e5b6351c6e79c2f", "sha256": "d7d1dbe96a4e347f888f10f3b28fe3e1b2be4251de0c09b4fe9745bb5a8eec7e"}, "downloads": -1, "filename": "adopy-0.4.0rc1.tar.gz", "has_sig": false, "md5_digest": "fc06eb471cee7ecc2e5b6351c6e79c2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28192, "upload_time": "2020-01-02T16:05:43", "upload_time_iso_8601": "2020-01-02T16:05:43.718782Z", "url": "https://files.pythonhosted.org/packages/b2/4e/35d204a5edbd41da5aecbbd51de886564027269a9306070ca8fede3dc286/adopy-0.4.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "adf4955c81b0b4f9903b51a83e7d7420", "sha256": "61245caaa773a477402409cac29edb1e742dc783c59aa3dacf4e9c65ef17eda7"}, "downloads": -1, "filename": "adopy-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "adf4955c81b0b4f9903b51a83e7d7420", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33572, "upload_time": "2019-07-02T17:03:15", "upload_time_iso_8601": "2019-07-02T17:03:15.896742Z", "url": "https://files.pythonhosted.org/packages/2c/a8/fdfca3b4ede0c99006a480da2bfefe352142bafbdd72c120caf9278d9081/adopy-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6681852acbcc64fd36830a438327679", "sha256": "dfe4097008da1ab3291c8dc2fb78a99f1c6a23df534ca8fb9af47bfee9a57eed"}, "downloads": -1, "filename": "adopy-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c6681852acbcc64fd36830a438327679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 875646, "upload_time": "2019-07-02T17:03:33", "upload_time_iso_8601": "2019-07-02T17:03:33.242521Z", "url": "https://files.pythonhosted.org/packages/e4/69/f6d0475aa62609bab8dd8fbe0844a77eb056dccc083c88fb7f4c7619a4ea/adopy-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:17 2020"}