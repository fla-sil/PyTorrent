{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Hephaestus\n\n[![Build Status](https://travis-ci.org/expobrain/hephaestus.svg?branch=master)](https://travis-ci.org/expobrain/hephaestus)\n\n## Introduction\n\nHephaestus is a library to statically which parses a SQL query and return an AST.\n\nThis is useful for different purposes like:\n\n- statistic informations, i.e. table or field used, tipe of joins, filter conditions, etc\n- partial or full query comparison\n- query type detection\n\nThe SQL grammar is specific for [Exasol](https://www.exasol.com/en/), but it can be easily ported to support other grammars as well.\n\nHephaestus's parser is built in [Rust](https://www.rust-lang.org/) using the [lalrpop](https://github.com/lalrpop/lalrpop) crate for grammar's definition and [vervolg](https://github.com/hmwill/vervolg) used as a base for the SQL grammar.\n\n## Installation\n\nTo install the package you need to install the `nightly` version of the Rust compiler:\n\n```shell\ncurl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain=nightly\n```\n\nthen install the package straight from Github:\n\n```shell\npip install git+https://github.com/expobrain/hephaestus@develop\n```\n\n> Note: until version 0.8 of `pyo3` you need to have the `python` binary available in your `PATH`; on some systems it will fail because only `python3` is present. In this case install the Python 2 package.\n\n## Usage\n\n### Parsing\n\nHephaestus exposes a single `parse()` function which given a SQl string returns a dictionary representing the SQL in an AST format:\n\n```python\n>>> import hephaestus\n>>> hephaestus.parse(\"SELECT 1\")\n{'_type': 'SelectStatement',\n 'common': [],\n 'expr': {'_type': 'QuerySetExpression',\n  'mode': {'_type': 'SelectAll'},\n  'columns': {'_type': 'ListResultColumn',\n   'values': [{'_type': 'ExprResultColumn',\n     'expr': {'_type': 'NumericLiteral', 'num': '1'},\n     'rename': None}]},\n  'from': [],\n  'where_expr': None,\n  'group_by': None},\n 'order_by': [],\n 'limit': None}\n```\n\nEvery node of the dictionary has a `_type` key which indicate the type of the node, i.e. `SelectStatement`, and a series of keys specific for the node's type which can contains scalars values like `str`, `int`, `None`, a dictionary representing a node or a list of scalar values or nodes.\n\n> For a full list of node types see `src/ast.rs` and `src/ast_py.rs`.\n\n### Traversing\n\nParsing the incoming SQL expression is only the first step and its not very useful without the ability to traverse the tree and inspect the nodes.\n\nInstead of writing from scratch the code to traverse the dictionary nested structure by yourself Hephaestus provides you a class to be used to walk through the tree and call a method for every node it encouters during the traverse.\n\nJust inherith from the `Visitor` class and implement methods in the form of `visit_<node_type>` where `<node_type>` is the type of the node in the `_type` key.\n\nThis example shows how to check if the given SQL statement is querying from the `DUAL` table:\n\n```python\nfrom typing import Dict\n\nfrom hephaestus.walk import Visitor\n\n\nclass MyVisitor(Visitor):\n    has_dual_table = False\n\n    def visit_NamedTableExpression(self, attr: str, node: Dict):\n        self.has_dual_table = node[\"name\"] == [\"dual\"]\n\n\nvisitor = MyVisitor(\"SELECT 1 FROM dual\")\nvisitor.walk()\n\nassert visitor.has_dual_table is True\n```\n\nWhen the `NamedTableExpression` node is reached the `visit_NamedTableExpression` method is called and receives the parent node's attribute name `attr` and the node itself.\n\n## Testing\n\nThere are two set of tests, one for the Rust and one for the Python code.\n\n> Note: Unfortunately at the moment it's not possible to execute both test suites with the same `Cargo.toml` (looks like that the `extension-module` feature in `pyo3` interfere with the way the tests are linked with the Rust library), so it's necessary to switch to a different config before running the them.\n\nTo run the Rust tests:\n\n```shell\nmake test_rust\n```\n\nTo run the Python tests:\n\n```shell\nmake test_py\n```\n\n## Contribute\n\nIf you want to contribute to the Hephaestus project to extend the grammar follow this steps:\n\n1. switch to a pure Rust `Cargo.toml` with `make rust`\n1. write a test in `src/tests` to cover the cases\n1. extend the grammar in `src/sql.lalrpop`; please refer to the [LALR Book](http://lalrpop.github.io/lalrpop/)\n1. add the relative AST note to `src/ast.rs`\n1. in some cases, like defining a new Rust enumerator, it's necessary to add an explicit conversion form the Rust type to a Python-compatible type; in this add the relevant code into `src/ast_py.rs`\n\n## Caveats\n\n- not all the grammar of Exasol is supported, most of the functions and statements needs to be implemented\n- despite the fact that the AST returned by the `parse()` function can be manipulated at will at the moment there's no way to get back a SQL string", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hephaestus", "package_url": "https://pypi.org/project/hephaestus/", "platform": "", "project_url": "https://pypi.org/project/hephaestus/", "project_urls": null, "release_url": "https://pypi.org/project/hephaestus/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Hephaestus</h1>\n<p><a href=\"https://travis-ci.org/expobrain/hephaestus\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5203851e9ff7ce16d1173c8a47dbcc5567327c56/68747470733a2f2f7472617669732d63692e6f72672f6578706f627261696e2f686570686165737475732e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Introduction</h2>\n<p>Hephaestus is a library to statically which parses a SQL query and return an AST.</p>\n<p>This is useful for different purposes like:</p>\n<ul>\n<li>statistic informations, i.e. table or field used, tipe of joins, filter conditions, etc</li>\n<li>partial or full query comparison</li>\n<li>query type detection</li>\n</ul>\n<p>The SQL grammar is specific for <a href=\"https://www.exasol.com/en/\" rel=\"nofollow\">Exasol</a>, but it can be easily ported to support other grammars as well.</p>\n<p>Hephaestus's parser is built in <a href=\"https://www.rust-lang.org/\" rel=\"nofollow\">Rust</a> using the <a href=\"https://github.com/lalrpop/lalrpop\" rel=\"nofollow\">lalrpop</a> crate for grammar's definition and <a href=\"https://github.com/hmwill/vervolg\" rel=\"nofollow\">vervolg</a> used as a base for the SQL grammar.</p>\n<h2>Installation</h2>\n<p>To install the package you need to install the <code>nightly</code> version of the Rust compiler:</p>\n<pre>curl https://sh.rustup.rs -sSf <span class=\"p\">|</span> sh -s -- -y --default-toolchain<span class=\"o\">=</span>nightly\n</pre>\n<p>then install the package straight from Github:</p>\n<pre>pip install git+https://github.com/expobrain/hephaestus@develop\n</pre>\n<blockquote>\n<p>Note: until version 0.8 of <code>pyo3</code> you need to have the <code>python</code> binary available in your <code>PATH</code>; on some systems it will fail because only <code>python3</code> is present. In this case install the Python 2 package.</p>\n</blockquote>\n<h2>Usage</h2>\n<h3>Parsing</h3>\n<p>Hephaestus exposes a single <code>parse()</code> function which given a SQl string returns a dictionary representing the SQL in an AST format:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">hephaestus</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hephaestus</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT 1\"</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'_type'</span><span class=\"p\">:</span> <span class=\"s1\">'SelectStatement'</span><span class=\"p\">,</span>\n <span class=\"s1\">'common'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n <span class=\"s1\">'expr'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_type'</span><span class=\"p\">:</span> <span class=\"s1\">'QuerySetExpression'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'mode'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_type'</span><span class=\"p\">:</span> <span class=\"s1\">'SelectAll'</span><span class=\"p\">},</span>\n  <span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_type'</span><span class=\"p\">:</span> <span class=\"s1\">'ListResultColumn'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'_type'</span><span class=\"p\">:</span> <span class=\"s1\">'ExprResultColumn'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'expr'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_type'</span><span class=\"p\">:</span> <span class=\"s1\">'NumericLiteral'</span><span class=\"p\">,</span> <span class=\"s1\">'num'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">},</span>\n     <span class=\"s1\">'rename'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]},</span>\n  <span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n  <span class=\"s1\">'where_expr'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"s1\">'group_by'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span>\n <span class=\"s1\">'order_by'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n <span class=\"s1\">'limit'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<p>Every node of the dictionary has a <code>_type</code> key which indicate the type of the node, i.e. <code>SelectStatement</code>, and a series of keys specific for the node's type which can contains scalars values like <code>str</code>, <code>int</code>, <code>None</code>, a dictionary representing a node or a list of scalar values or nodes.</p>\n<blockquote>\n<p>For a full list of node types see <code>src/ast.rs</code> and <code>src/ast_py.rs</code>.</p>\n</blockquote>\n<h3>Traversing</h3>\n<p>Parsing the incoming SQL expression is only the first step and its not very useful without the ability to traverse the tree and inspect the nodes.</p>\n<p>Instead of writing from scratch the code to traverse the dictionary nested structure by yourself Hephaestus provides you a class to be used to walk through the tree and call a method for every node it encouters during the traverse.</p>\n<p>Just inherith from the <code>Visitor</code> class and implement methods in the form of <code>visit_&lt;node_type&gt;</code> where <code>&lt;node_type&gt;</code> is the type of the node in the <code>_type</code> key.</p>\n<p>This example shows how to check if the given SQL statement is querying from the <code>DUAL</code> table:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">hephaestus.walk</span> <span class=\"kn\">import</span> <span class=\"n\">Visitor</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyVisitor</span><span class=\"p\">(</span><span class=\"n\">Visitor</span><span class=\"p\">):</span>\n    <span class=\"n\">has_dual_table</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_NamedTableExpression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_dual_table</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">\"dual\"</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">visitor</span> <span class=\"o\">=</span> <span class=\"n\">MyVisitor</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT 1 FROM dual\"</span><span class=\"p\">)</span>\n<span class=\"n\">visitor</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">visitor</span><span class=\"o\">.</span><span class=\"n\">has_dual_table</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n</pre>\n<p>When the <code>NamedTableExpression</code> node is reached the <code>visit_NamedTableExpression</code> method is called and receives the parent node's attribute name <code>attr</code> and the node itself.</p>\n<h2>Testing</h2>\n<p>There are two set of tests, one for the Rust and one for the Python code.</p>\n<blockquote>\n<p>Note: Unfortunately at the moment it's not possible to execute both test suites with the same <code>Cargo.toml</code> (looks like that the <code>extension-module</code> feature in <code>pyo3</code> interfere with the way the tests are linked with the Rust library), so it's necessary to switch to a different config before running the them.</p>\n</blockquote>\n<p>To run the Rust tests:</p>\n<pre>make test_rust\n</pre>\n<p>To run the Python tests:</p>\n<pre>make test_py\n</pre>\n<h2>Contribute</h2>\n<p>If you want to contribute to the Hephaestus project to extend the grammar follow this steps:</p>\n<ol>\n<li>switch to a pure Rust <code>Cargo.toml</code> with <code>make rust</code></li>\n<li>write a test in <code>src/tests</code> to cover the cases</li>\n<li>extend the grammar in <code>src/sql.lalrpop</code>; please refer to the <a href=\"http://lalrpop.github.io/lalrpop/\" rel=\"nofollow\">LALR Book</a></li>\n<li>add the relative AST note to <code>src/ast.rs</code></li>\n<li>in some cases, like defining a new Rust enumerator, it's necessary to add an explicit conversion form the Rust type to a Python-compatible type; in this add the relevant code into <code>src/ast_py.rs</code></li>\n</ol>\n<h2>Caveats</h2>\n<ul>\n<li>not all the grammar of Exasol is supported, most of the functions and statements needs to be implemented</li>\n<li>despite the fact that the AST returned by the <code>parse()</code> function can be manipulated at will at the moment there's no way to get back a SQL string</li>\n</ul>\n\n          </div>"}, "last_serial": 6057964, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8ddcf34aaf0d3e9888f2a92b922f44a9", "sha256": "62ed55df759f691db47cfe4fdaacbc6a44501d4aebc40642fc38985f4a1f3207"}, "downloads": -1, "filename": "hephaestus-0.1.0-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "8ddcf34aaf0d3e9888f2a92b922f44a9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 578602, "upload_time": "2019-10-09T21:12:36", "upload_time_iso_8601": "2019-10-09T21:12:36.897947Z", "url": "https://files.pythonhosted.org/packages/4d/0a/b55729e4ee73c259d3c40f4ec95f918f497e11550f13d68a767b5f9e284c/hephaestus-0.1.0-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b1745bb34a6125e59260c92403d7aca", "sha256": "034e77e171079d43441ebec9a107fb3f4c22f9d22b74320857623e8760025764"}, "downloads": -1, "filename": "hephaestus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0b1745bb34a6125e59260c92403d7aca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179660, "upload_time": "2019-10-09T21:12:42", "upload_time_iso_8601": "2019-10-09T21:12:42.539126Z", "url": "https://files.pythonhosted.org/packages/f7/28/4b1767924b416aa94258fb3d2bfbdd6b538f2b76a4c2a735f3e523c7e40a/hephaestus-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6b319aa1a9e554f3f35c66faf6b3ac07", "sha256": "135692aa81da3b9199f54b81eabbd5ffabe0221bbbecbc0c8099eb54e16cb7c7"}, "downloads": -1, "filename": "hephaestus-0.1.1-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "6b319aa1a9e554f3f35c66faf6b3ac07", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 580770, "upload_time": "2019-10-09T22:16:44", "upload_time_iso_8601": "2019-10-09T22:16:44.891719Z", "url": "https://files.pythonhosted.org/packages/a8/b6/5159e632b35975a481c70b1ddfa8a9a53b8d423a152f0e8cfe802688b09a/hephaestus-0.1.1-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c48f887b4896967abf253b141800d1e5", "sha256": "2c556eea54462a9ff1f8a17e312d1bfb34a2f4dad643ad65d4085e75345dc69b"}, "downloads": -1, "filename": "hephaestus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c48f887b4896967abf253b141800d1e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179855, "upload_time": "2019-10-09T22:05:54", "upload_time_iso_8601": "2019-10-09T22:05:54.384687Z", "url": "https://files.pythonhosted.org/packages/97/08/7db74089be1b216301df7ce37bf757ab032609fa9d8f01a1d3571d99772c/hephaestus-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "88ca288a768c617ab0160ebeaa2bb1ed", "sha256": "e469af7c5eb8bbd1075794684148a93b307db86232ef062f5027caabcb0ae9e9"}, "downloads": -1, "filename": "hephaestus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "88ca288a768c617ab0160ebeaa2bb1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179909, "upload_time": "2019-10-31T11:39:08", "upload_time_iso_8601": "2019-10-31T11:39:08.886912Z", "url": "https://files.pythonhosted.org/packages/c9/1e/193772571f4afa9aaa91e0ce9a760b311813361b1a169d48089f26821b7a/hephaestus-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88ca288a768c617ab0160ebeaa2bb1ed", "sha256": "e469af7c5eb8bbd1075794684148a93b307db86232ef062f5027caabcb0ae9e9"}, "downloads": -1, "filename": "hephaestus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "88ca288a768c617ab0160ebeaa2bb1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179909, "upload_time": "2019-10-31T11:39:08", "upload_time_iso_8601": "2019-10-31T11:39:08.886912Z", "url": "https://files.pythonhosted.org/packages/c9/1e/193772571f4afa9aaa91e0ce9a760b311813361b1a169d48089f26821b7a/hephaestus-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:36 2020"}