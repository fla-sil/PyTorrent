{"info": {"author": "Center for Translational Data Science", "author_email": "support@datacommons.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "# Gen3 SDK for Python\n\nThe Gen3 PSDK for Python provides classes and functions for handling common tasks when interacting with a Gen3 commons. The API for a commons can be overwhelming, so this SDK aims\nto simplify communication with various microservices in a clear Python package.\n\nThe docs here contain general descriptions of the different pieces of the SDK and example scripts. For detailed API documentation, see the link below:\n\n* [Detailed API Documentation](https://uc-cdis.github.io/gen3sdk-python/_build/html/index.html)\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Quickstart Example](#quickstart-example)\n- [Quickstart Example w/ Auth](#quickstart-example-w-auth)\n- [Available Classes](#available-classes)\n    - [Gen3Auth](#gen3auth)\n    - [Gen3Index](#gen3index)\n    - [Gen3Submission](#gen3submission)\n- [Indexing Tools](#indexing-tools)\n    - [Download Manifest](#download-manifest)\n    - [Verify Manifest](#verify-manifest)\n    - [Indexing Manifest](#indexing-manifest)\n- [Metadata Tools](#metadata-tools)\n    - [Ingest Manifest](#ingest-manifest)\n    - [Searching Indexd to get GUID for Metadata Ingestion](#searching-indexd-to-get-guid-for-metadata-ingestion)\n    - [Manifest Merge](#manifest-merge)\n        - [Ideal Scenario \\(Column to Column Match, Indexing:Metadata Manifest Rows\\)](#ideal-scenario-column-to-column-match-indexingmetadata-manifest-rows)\n        - [Non-Ideal Scenario \\(Partial URL Matching\\)](#non-ideal-scenario-partial-url-matching)\n\n---\n\n## Installation\n\nTo get the latest released version of the SDK:\n\n`pip install gen3`\n\nTo use the latest code in this repo you can clone this and then run:\n\n`python setup.py install`\n\n> Developer Note: If you want to edit this SDK and test it you can do a development install with `python setup.py develop`.\n\n## Quickstart Example\n\n```python\n\"\"\"\nThis script will use an instance of the Gen3Index class to communicate with a Gen3\nCommons indexing service to get some basic information.\n\nThe example commons we're using is an open Canine Data Commons.\n\"\"\"\nfrom gen3.index import Gen3Index\n\n# Gen3 Commons URL\nCOMMONS = \"https://caninedc.org/\"\n\n\ndef main():\n    index = Gen3Index(COMMONS)\n    if not index.is_healthy():\n        print(f\"uh oh! The indexing service is not healthy in the commons {COMMONS}\")\n        exit()\n\n    print(\"some file stats:\")\n    print(index.get_stats())\n\n    print(\"example GUID record:\")\n    print(index.get(guid=\"afea506a-62d0-4e8e-9388-19d3c5ac52be\"))\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n## Quickstart Example w/ Auth\n\nSome Gen3 API endpoints require authentication and special privileges to be able to use. The SDK can automate a lot of this by simply providing it with an API Key you download from the Gen3 Commons UI after logging in.\n\n> NOTE: The below script will most likely fail for you because your user doesn't have access to create in that commons. However, the example is still important because if you *did* have access, this would handle passing your access token to the commons API correctly.\n\n```python\n\"\"\"\nThis script will use an instance of the Gen3Index class to attempt to create a\nnew indexed file record in the specified Gen3 Commons indexing service.\n\nThe example commons we're using is an open Canine Data Commons.\n\"\"\"\nfrom gen3.index import Gen3Index\nfrom gen3.auth import Gen3Auth\n\n# Gen3 Commons URL\nCOMMONS = \"https://caninedc.org/\"\n\n# An API Key downloaded from the above commons' \"Profile\" page\nAPI_KEY_FILEPATH = \"credentials.json\"\n\n\ndef main():\n    auth = Gen3Auth(COMMONS, refresh_file=API_KEY_FILEPATH)\n    index = Gen3Index(COMMONS, auth_provider=auth)\n    if not index.is_healthy():\n        print(f\"uh oh! The indexing service is not healthy in the commons {COMMONS}\")\n        exit()\n\n    print(\"trying to create new indexed file object record:\\n\")\n    try:\n        response = index.create_record(\n            hashes={\"md5\": \"ab167e49d25b488939b1ede42752458b\"}, size=42, acl=[\"*\"]\n        )\n    except Exception as exc:\n        print(\n            \"\\nERROR ocurred when trying to create the record, you probably don't have access.\"\n        )\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n## Available Classes\n\n### Gen3Auth\n\nThis contains an auth wrapper for supporting JWT based authentication with `requests`. The access token is generated from the refresh token and is regenerated on expiration.\n\n### Gen3Index\n\nThis is the client for interacting with the Indexd service for GUID brokering and resolution.\n\n### Gen3Submission\n\nThis is the client for interacting with the Gen3 submission service including GraphQL queries.\n\n## Metadata\n\nFor interacting with Gen3's metadata service.\n\n```python\nimport sys\nimport logging\nimport asyncio\n\nfrom gen3.auth import Gen3Auth\nfrom gen3.metadata import Gen3Metadata\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\ndef main():\n    auth = Gen3Auth(COMMONS, refresh_file=\"credentials.json\")\n    mds = Gen3Metadata(COMMONS, auth_provider=auth)\n\n    if mds.is_healthy():\n        print(mds.get_version())\n\n        guid = \"95a41871-444c-48ae-8004-63f4ed1f0691\"\n        metadata = {\n            \"foo\": \"bar\",\n            \"fizz\": \"buzz\",\n            \"nested_details\": {\n                \"key1\": \"value1\"\n            }\n        }\n        mds.create(guid, metadata, overwrite=True)\n\n        guids = mds.query(\"nested_details.key1=value1\")\n\n        print(guids)\n        # >>> ['95a41871-444c-48ae-8004-63f4ed1f0691']\n\nif __name__ == \"__main__\":\n    main()\n```\n\n\n## Indexing Tools\n\n### Download Manifest\n\nHow to download a manifest `object-manifest.csv` of all file objects in indexd for a given commons:\n\n```python\nimport sys\nimport logging\nimport asyncio\n\nfrom gen3.tools import indexing\nfrom gen3.tools.indexing.verify_manifest import manifest_row_parsers\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\ndef main():\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n\n    loop.run_until_complete(\n        indexing.async_download_object_manifest(\n            COMMONS,\n            output_filename=\"object-manifest.csv\",\n            num_processes=8,\n            max_concurrent_requests=24,\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nThe output file will contain columns `guid, urls, authz, acl, md5, file_size, file_name` with info\npopulated from indexd.\n\n### Verify Manifest\n\nHow to verify the file objects in indexd against a \"source of truth\" manifest.\n\n> Bonus: How to override default parsing of manifest to match a different structure.\n\nIn the example below we assume a manifest named `alternate-manifest.csv` already exists\nwith info of what's expected in indexd. The headers in the `alternate-manifest.csv`\nare `guid, urls, authz, acl, md5, size, file_name`.\n\n> NOTE: The alternate manifest headers differ rfom the default headers described above (`file_size` doesn't exist and should be taken from `size`)\n\n```python\nimport sys\nimport logging\nimport asyncio\n\nfrom gen3.tools import indexing\nfrom gen3.tools.indexing.verify_manifest import manifest_row_parsers\n\nlogging.basicConfig(filename=\"output.log\", level=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\n\ndef main():\n    def _get_file_size(row):\n        try:\n            return int(row.get(\"size\"))\n        except Exception:\n            logging.warning(f\"could not convert this to an int: {row.get('size')}\")\n            return row.get(\"size\")\n\n    # override default parsers\n    manifest_row_parsers[\"file_size\"] = _get_file_size\n\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n\n    loop.run_until_complete(\n        indexing.async_verify_object_manifest(\n            COMMONS, manifest_file=\"alternate-manifest.csv\"\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nA more complex example is below. In this example:\n\n* The input file is a tab-separated value file (instead of default CSV)\n    * Note the `manifest_file_delimiter` argument\n* The arrays in the file are represented with Python-like list syntax\n    * ex: `['DEV', 'test']` for the `acl` column\n* We are using more Python processes (20) to speed up the verify process\n    * NOTE: You need to be careful about this, as indexd itself needs to support\n            scaling to this number of concurrent requests coming in\n\n```python\nimport sys\nimport logging\n\nfrom gen3.tools import indexing\nfrom gen3.tools.indexing.verify_manifest import manifest_row_parsers\n\nlogging.basicConfig(filename=\"output.log\", level=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\n\ndef main():\n    def _get_file_size(row):\n        try:\n            return int(row.get(\"size\"))\n        except Exception:\n            logging.warning(f\"could not convert this to an int: {row.get('size')}\")\n            return row.get(\"size\")\n\n    def _get_acl_from_row(row):\n        return [row.get(\"acl\").strip().strip(\"[\").strip(\"]\").strip(\"'\")]\n\n    def _get_authz_from_row(row):\n        return [row.get(\"authz\").strip().strip(\"[\").strip(\"]\").strip(\"'\")]\n\n    def _get_urls_from_row(row):\n        return [row.get(\"url\").strip()]\n\n    # override default parsers\n    manifest_row_parsers[\"file_size\"] = _get_file_size\n    manifest_row_parsers[\"acl\"] = _get_acl_from_row\n    manifest_row_parsers[\"authz\"] = _get_authz_from_row\n    manifest_row_parsers[\"urls\"] = _get_urls_from_row\n\n    indexing.verify_object_manifest(\n        COMMONS,\n        manifest_file=\"output-manifest.csv\",\n        manifest_file_delimiter=\"\\t\",\n        num_processes=20,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n### Indexing Manifest\n\nThe module for indexing object files in a manifest (against indexd's API).\n\nThe manifest format can be either tsv or csv. The fields that are lists (like acl, authz, and urls)\nseparate the values with commas or spaces (but you must use spaces if the file is a csv).\nThe field values can contain single quote, open bracket and the closed bracket. However, they will\nbe removed in the preprocessing step.\n\nThe following is an example of tsv manifest.\n```\nguid\tmd5\tsize\tauthz\tacl\turl\n255e396f-f1f8-11e9-9a07-0a80fada099c\t473d83400bc1bc9dc635e334faddf33c\t363455714\t/programs/DEV/project/test\t['Open']\t[s3://examplebucket/test1.raw]\n255e396f-f1f8-11e9-9a07-0a80fada097c\t473d83400bc1bc9dc635e334fadd433c\t543434443\t/programs/DEV/project/test\tphs0001 phs0002\ts3://examplebucket/test3.raw gs://examplebucket/test3.raw\n255e396f-f1f8-11e9-9a07-0a80fada096c\t473d83400bc1bc9dc635e334fadd433c\t363455714\t/programs/DEV/project/test\t['phs0001', 'phs0002']\t['s3://examplebucket/test4.raw', 'gs://examplebucket/test3.raw']\n```\n\n```python\nimport sys\nimport logging\n\nfrom gen3.auth import Gen3Auth\nfrom gen3.tools.indexing import index_object_manifest\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\nMANIFEST = \"./example_manifest.tsv\"\n\n\ndef main():\n    auth = Gen3Auth(COMMONS, refresh_file=\"credentials.json\")\n\n    # use basic auth for admin privileges in indexd\n    # auth = (\"basic_auth_username\", \"basic_auth_password\")\n\n    index_object_manifest(\n        commons_url=COMMONS,\n        manifest_file=MANIFEST,\n        thread_num=8,\n        auth=auth,\n        replace_urls=False,\n        manifest_file_delimiter=\"\\t\" # put \",\" if the manifest is csv file\n    )\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n## Metadata Tools\n\n### Ingest Manifest\n\nFor populating the metadata service via a file filled with metadata. Uses asynchronous\ncalls for you.\n\nThe file provided must contain a \"guid\" column (or you can use a different column name or different logic entirely by providing a `guid_for_row` function)\n\nThe row contents can contain valid JSON and this script will correctly nest that JSON\nin the resulting metadata.\n\n```python\nimport sys\nimport logging\nimport asyncio\n\nfrom gen3.auth import Gen3Auth\nfrom gen3.tools import metadata\nfrom gen3.tools.metadata.ingest_manifest import manifest_row_parsers\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\n# a file containing a \"guid\" column and additional, arbitrary columns to populate\n# into the metadata service\nMANIFEST = \"dbgap_extract_guid.tsv\"\n\ndef main():\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n\n    auth = Gen3Auth(COMMONS, refresh_file=\"credentials.json\")\n\n    # must provide a str to namespace the metadata from the file in a block in\n    # the metadata service\n    metadata_source = \"dbgap\"\n\n    # (optional) override default guid parsing behavior\n    def _custom_get_guid_for_row(commons_url, row, lock):\n        \"\"\"\n        Given a row from the manifest, return the guid to use for the metadata object.\n\n        Args:\n            commons_url (str): root domain for commons where mds lives\n            row (dict): column_name:row_value\n            lock (asyncio.Semaphore): semaphones used to limit ammount of concurrent http\n                connections if making a call to an external service\n\n        Returns:\n            str: guid\n        \"\"\"\n        return row.get(\"guid\") # OR row.get(\"some_other_column\")\n\n    # (optional) override default guid parsing behavior\n    manifest_row_parsers[\"guid_for_row\"] = _custom_get_guid_for_row\n\n    loop.run_until_complete(\n        metadata.async_ingest_metadata_manifest(\n            COMMONS, manifest_file=MANIFEST, metadata_source=metadata_source, auth=auth\n        )\n    )\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nExample file:\n\n```\nguid    submitted_sample_id biosample_id    dbgap_sample_id sra_sample_id   submitted_subject_id    dbgap_subject_id    consent_code    consent_short_name  sex body_site   analyte_type    sample_use  repository  dbgap_status    sra_data_details    study_accession study_accession_with_consent    study_with_consent  study_subject_id\n95a41871-222c-48ae-8004-63f4ed1f0691    NWD680715   SAMN04109058    1784155 SRS1361261  DBG00391    1360750 2   HMB-IRB-MDS female  Blood   DNA [\"Seq_DNA_SNP_CNV\"] TOPMed_WGS_Amish    Loaded  {\"status\": \"public\", \"experiments\": \"1\", \"runs\": \"1\", \"bases\": \"135458977924\", \"size_Gb\": \"25\", \"experiment_type\": \"WGS\", \"platform\": \"ILLUMINA\", \"center\": \"UM-TOPMed\"}    phs000956.v3.p1 phs000956.v3.p1.c2  phs000956.c2    phs000956.v3_DBG00391\n```\n\nWould result in the following metadata records in the metadata service:\n\n```python\n{\n    _guid_type: \"indexed_file_object\",\n    dbgap: {\n        sex: \"female\",\n        body_site: \"Blood\",\n        repository: \"TOPMed_WGS_Amish\",\n        sample_use: [\n            \"Seq_DNA_SNP_CNV\"\n        ],\n        analyte_type: \"DNA\",\n        biosample_id: \"SAMN04109058\",\n        consent_code: 2,\n        dbgap_status: \"Loaded\",\n        sra_sample_id: \"SRS1361261\",\n        dbgap_sample_id: 1784155,\n        study_accession: \"phs000956.v3.p1\",\n        dbgap_subject_id: 1360750,\n        sra_data_details: {\n            runs: \"1\",\n            bases: \"135458977924\",\n            center: \"UM-TOPMed\",\n            status: \"public\",\n            size_Gb: \"25\",\n            platform: \"ILLUMINA\",\n            experiments: \"1\",\n            experiment_type: \"WGS\"\n        },\n        study_subject_id: \"phs000956.v3_DBG00391\",\n        consent_short_name: \"HMB-IRB-MDS\",\n        study_with_consent: \"phs000956.c2\",\n        submitted_sample_id: \"NWD680715\",\n        submitted_subject_id: \"DBG00391\",\n        study_accession_with_consent: \"phs000956.v3.p1.c2\"\n    }\n}\n```\n\n> NOTE: `_guid_type` is populated automatically, depending on if the provided GUID exists in indexd or not. Either `indexed_file_object` or `metadata_object`.\n\n### Searching Indexd to get GUID for Metadata Ingestion\n\nIt is possible to try and dynamically retrieve a GUID for a row in the manifest file\nprovided. However, this is limited by indexd's ability to scale to the queries you\nwant to run. Indexd's querying capabilities are limited and don't scale well with a\nlarge volume of records (it is meant to be a key:value store much like the metadata service).\n\n> WARNING: This is not recommended to be used at scale. Consider making these associations to metadata before ingestion. See [merging tools](#manifest-merge)\n\n```python\nimport sys\nimport logging\nimport asyncio\n\nfrom gen3.auth import Gen3Auth\nfrom gen3.tools import metadata\nfrom gen3.tools.metadata.ingest_manifest import manifest_row_parsers\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\nMANIFEST = \"dbgap_extract.tsv\"\n\n\ndef main():\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n\n    auth = Gen3Auth(COMMONS, refresh_file=\"credentials.json\")\n\n    # must provide a str to namespace the metadata from the file in a block in\n    # the metadata service\n    metadata_source = \"dbgap\"\n\n    # (optional) override default indexd querying (NOTE: must be async)\n    async def _custom_query_for_associated_indexd_record_guid(commons_url, row, lock, output_queue):\n        \"\"\"\n        Given a row from the manifest, return the guid for the related indexd record.\n\n        WARNING: The query endpoint this uses in indexd is incredibly slow when there are\n                 lots of indexd records.\n\n        Args:\n            commons_url (str): root domain for commons where mds lives\n            row (dict): column_name:row_value\n            lock (asyncio.Semaphore): semaphones used to limit ammount of concurrent http\n                connections\n            output_queue (asyncio.Queue): queue for logging output\n\n        Returns:\n            str: guid or None\n        \"\"\"\n        mapping = {\"urls\": \"submitted_sample_id\"}\n\n        # special query endpoint for matching url patterns\n        records = []\n        if \"urls\" in mapping:\n            pattern = row.get(mapping[\"urls\"])\n            logging.debug(\n                f\"trying to find matching record matching url pattern: {pattern}\"\n            )\n            records = await metadata.async_query_urls_from_indexd(\n                pattern, commons_url, lock\n            )\n\n        logging.debug(f\"matching record(s): {records}\")\n\n        if len(records) > 1:\n            msg = (\n                \"Multiple records were found with the given search criteria, this is assumed \"\n                \"to be unintentional so the metadata will NOT be linked to these records:\\n\"\n                f\"{records}\"\n            )\n            logging.warning(msg)\n            records = []\n\n        guid = None\n        if len(records) == 1:\n            guid = records[0].get(\"did\")\n\n        return guid\n\n    # (optional) override default indexd querying\n    manifest_row_parsers[\n        \"indexed_file_object_guid\"\n    ] = _custom_query_for_associated_indexd_record_guid\n\n    loop.run_until_complete(\n        # get_guid_from_file=False tells tool to try and get the guid using\n        # the provided custom query function\n        metadata.async_ingest_metadata_manifest(\n            COMMONS,\n            manifest_file=MANIFEST,\n            metadata_source=metadata_source,\n            auth=auth,\n            get_guid_from_file=False,\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nSetting `get_guid_from_file`  to `False` tells tool to try and get the guid using\nthe provided custom query function instead of relying on a column in the manifest.\n\n> NOTE: By default, the `indexed_file_object_guid` function attempts to query indexd URLs to pattern match\nwhatever is in the manifest column `submitted_sample_id`.\n\n\n### Manifest Merge\n\nIf you have a manifest full of metadata and a manifest of indexed file objects in Indexd, you can use this script to merge the two into a metadata manifest for ingestion.\n\nFor example, a common use case for this is if you have a file full of metadata from dbGaP and want to get associated GUIDs for each row. You can then add the dbGaP metadata to the metadata service for those GUIDs with the file output from this merge script.\n\nThe script is also fairly configurable depending on how you need to map between the two files.\n\nThe ideal scenario is when you can map column to column between your _metadata manifest_ and _indexing manifest_ (e.g. what's in indexd).\n\nThe non-ideal scenario is if you need something for partially matching one column to another. For example: if one of the indexed URLs will contain `submitted_sample_id` somewhere in the filename. In this case, the efficiency of the script becomes O(n^2). If you can reliably parse out the section of the URL to match that could improve this. *tl;dr* Depending on your logic and number of rows in both files, this could be very very slow.\n\nBy default this merge can match multiple GUIDs with the same metadata (depending on the configuration). This supports situations where there may exist metadata that applies to multiple files. For example: dbGaP sample metadata applied to both CRAM and CRAI genomic files.\n\nSo while this supports metadata matching multiple GUIDs, it does *not* support GUIDs matching multiple sets of metadata.\n\n> IMPORTANT NOTE: The tool will log warnings about unmatched records but it will not halt execution, so be sure to check logs when using these tools.\n\n#### Ideal Scenario (Column to Column Match, Indexing:Metadata Manifest Rows)\n\nConsider the following example files.\n\n*metadata manifest*: dbGaP extract file perhaps by using [this tool](https://github.com/uc-cdis/dbgap-extract):\n\n```\nsubmitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n```\n\n*indexing manifest* (perhaps provided by the data owner):\n\n```\nguid, sample_id, file_size, md5, md5_hex, aws_uri, gcp_uri\n```\n\nThe strategy here is to map from the `submitted_sample_id` from the metadata manifest into the `sample_id` and then use the `guid` from the indexing manifest in the final output. That final output will can be used as the ingestion file for metadata ingestion.\n\n```python\nimport sys\nimport logging\n\nfrom gen3.tools.merge import merge_guids_into_metadata\nfrom gen3.tools.merge import manifests_mapping_config\n\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\ndef main():\n    indexing_manifest = (\n        \"/path/to/indexing_manifest.csv\"\n    )\n    metadata_manifest = (\n        \"/path/to/metadata_extract.tsv\"\n    )\n\n    # what column to use as the final GUID for metadata (this MUST exist in the\n    # indexing file)\n    manifests_mapping_config[\"guid_column_name\"] = \"guid\"\n\n    # what column from the \"metadata file\" to use for mapping\n    manifests_mapping_config[\"row_column_name\"] = \"submitted_sample_id\"\n\n    # this configuration tells the function to use the \"sample_id\" column\n    # from the \"indexing file\" to map to the metadata column configured above\n    # (and these should match EXACTLY, 1:1)\n    manifests_mapping_config[\"indexing_manifest_column_name\"] = \"sample_id\"\n\n    output_filename = \"metadata-manifest.tsv\"\n\n    merge_guids_into_metadata(\n        indexing_manifest, metadata_manifest, output_filename=output_filename,\n        manifests_mapping_config=manifests_mapping_config\n    )\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nThe final output file will contain all the columns from the metadata manifest in addition to a new GUID column which maps to indexed records.\n\n*output manifest* (to be used in metadata ingestion):\n\n```\nguid, submitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n```\n\n#### Non-Ideal Scenario (Partial URL Matching)\n\nConsider the following example files.\n\n*metadata manifest*: dbGaP extract file perhaps by using [this tool](https://github.com/uc-cdis/dbgap-extract):\n\n```\nsubmitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n```\n\n*indexing manifest* (perhaps by using the [download manifest tool](#download-manifest)):\n\n```\nguid, urls, authz, acl, md5, file_size, file_name\n```\n\n> NOTE: The indexing manifest contains no exact column match to the metadata manifest.\n\nThe strategy here is to look for partial matches of the metadata manifest's `submitted_sample_id` in the indexing manifest's `urls` field.\n\n```python\nimport sys\nimport logging\n\nfrom gen3.tools.merge import (\n    merge_guids_into_metadata,\n    manifest_row_parsers,\n    manifests_mapping_config,\n    get_guids_for_manifest_row_partial_match,\n)\n\n\nlogging.basicConfig(filename=\"output.log\", level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\nCOMMONS = \"https://{{insert-commons-here}}/\"\n\n\ndef main():\n    indexing_manifest = (\n        \"/path/to/indexing_manifest.csv\"\n    )\n    metadata_manifest = (\n        \"/path/to/metadata_extract.tsv\"\n    )\n    # what column to use as the final GUID for metadata (this MUST exist in the\n    # indexing file)\n    manifests_mapping_config[\"guid_column_name\"] = \"guid\"\n\n    # what column from the \"metadata file\" to use for mapping\n    manifests_mapping_config[\"row_column_name\"] = \"submitted_sample_id\"\n\n    # this configuration tells the function to use the \"gcp_uri\" column\n    # from the \"indexing file\" to map to the metadata column configured above\n    # (for partial matching the metdata data column to this column )\n    manifests_mapping_config[\"indexing_manifest_column_name\"] = \"urls\"\n\n    # by default, the functions for parsing the manifests and rows assumes a 1:1\n    # mapping. There is an additional function provided for partial string matching\n    # which we can use here.\n    manifest_row_parsers[\"guids_for_manifest_row\"] = get_guids_for_manifest_row_partial_match\n\n    output_filename = \"metadata-manifest-partial.tsv\"\n\n    merge_guids_into_metadata(\n        indexing_manifest=indexing_manifest,\n        metadata_manifest=metadata_manifest,\n        output_filename=output_filename,\n        manifests_mapping_config=manifests_mapping_config,\n        manifest_row_parsers=manifest_row_parsers,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n> WARNING: The efficiency here is O(n2) so this does not scale well with large files.\n\nThe final output file will contain all the columns from the metadata manifest in addition to a new GUID column which maps to indexed records.\n\n*output manifest* (to be used in metadata ingestion):\n\n```\nguid, submitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n```\n\n\n# Changelog\n\n## 0.1.0\nInitial release\nFunctionality for IndexClient, and Submission client", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gen3.org/", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "gen3", "package_url": "https://pypi.org/project/gen3/", "platform": "", "project_url": "https://pypi.org/project/gen3/", "project_urls": {"Homepage": "https://gen3.org/"}, "release_url": "https://pypi.org/project/gen3/2.3.0/", "requires_dist": null, "requires_python": "", "summary": "The Gen3 SDK makes it easy to utilize functionality in Gen3 data commons.", "version": "2.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Gen3 SDK for Python</h1>\n<p>The Gen3 PSDK for Python provides classes and functions for handling common tasks when interacting with a Gen3 commons. The API for a commons can be overwhelming, so this SDK aims\nto simplify communication with various microservices in a clear Python package.</p>\n<p>The docs here contain general descriptions of the different pieces of the SDK and example scripts. For detailed API documentation, see the link below:</p>\n<ul>\n<li><a href=\"https://uc-cdis.github.io/gen3sdk-python/_build/html/index.html\" rel=\"nofollow\">Detailed API Documentation</a></li>\n</ul>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quickstart-example\" rel=\"nofollow\">Quickstart Example</a></li>\n<li><a href=\"#quickstart-example-w-auth\" rel=\"nofollow\">Quickstart Example w/ Auth</a></li>\n<li><a href=\"#available-classes\" rel=\"nofollow\">Available Classes</a>\n<ul>\n<li><a href=\"#gen3auth\" rel=\"nofollow\">Gen3Auth</a></li>\n<li><a href=\"#gen3index\" rel=\"nofollow\">Gen3Index</a></li>\n<li><a href=\"#gen3submission\" rel=\"nofollow\">Gen3Submission</a></li>\n</ul>\n</li>\n<li><a href=\"#indexing-tools\" rel=\"nofollow\">Indexing Tools</a>\n<ul>\n<li><a href=\"#download-manifest\" rel=\"nofollow\">Download Manifest</a></li>\n<li><a href=\"#verify-manifest\" rel=\"nofollow\">Verify Manifest</a></li>\n<li><a href=\"#indexing-manifest\" rel=\"nofollow\">Indexing Manifest</a></li>\n</ul>\n</li>\n<li><a href=\"#metadata-tools\" rel=\"nofollow\">Metadata Tools</a>\n<ul>\n<li><a href=\"#ingest-manifest\" rel=\"nofollow\">Ingest Manifest</a></li>\n<li><a href=\"#searching-indexd-to-get-guid-for-metadata-ingestion\" rel=\"nofollow\">Searching Indexd to get GUID for Metadata Ingestion</a></li>\n<li><a href=\"#manifest-merge\" rel=\"nofollow\">Manifest Merge</a>\n<ul>\n<li><a href=\"#ideal-scenario-column-to-column-match-indexingmetadata-manifest-rows\" rel=\"nofollow\">Ideal Scenario (Column to Column Match, Indexing:Metadata Manifest Rows)</a></li>\n<li><a href=\"#non-ideal-scenario-partial-url-matching\" rel=\"nofollow\">Non-Ideal Scenario (Partial URL Matching)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<p>To get the latest released version of the SDK:</p>\n<p><code>pip install gen3</code></p>\n<p>To use the latest code in this repo you can clone this and then run:</p>\n<p><code>python setup.py install</code></p>\n<blockquote>\n<p>Developer Note: If you want to edit this SDK and test it you can do a development install with <code>python setup.py develop</code>.</p>\n</blockquote>\n<h2>Quickstart Example</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This script will use an instance of the Gen3Index class to communicate with a Gen3</span>\n<span class=\"sd\">Commons indexing service to get some basic information.</span>\n\n<span class=\"sd\">The example commons we're using is an open Canine Data Commons.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.index</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Index</span>\n\n<span class=\"c1\"># Gen3 Commons URL</span>\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://caninedc.org/\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Index</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">is_healthy</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"uh oh! The indexing service is not healthy in the commons </span><span class=\"si\">{</span><span class=\"n\">COMMONS</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">exit</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"some file stats:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">())</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"example GUID record:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">guid</span><span class=\"o\">=</span><span class=\"s2\">\"afea506a-62d0-4e8e-9388-19d3c5ac52be\"</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Quickstart Example w/ Auth</h2>\n<p>Some Gen3 API endpoints require authentication and special privileges to be able to use. The SDK can automate a lot of this by simply providing it with an API Key you download from the Gen3 Commons UI after logging in.</p>\n<blockquote>\n<p>NOTE: The below script will most likely fail for you because your user doesn't have access to create in that commons. However, the example is still important because if you <em>did</em> have access, this would handle passing your access token to the commons API correctly.</p>\n</blockquote>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This script will use an instance of the Gen3Index class to attempt to create a</span>\n<span class=\"sd\">new indexed file record in the specified Gen3 Commons indexing service.</span>\n\n<span class=\"sd\">The example commons we're using is an open Canine Data Commons.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.index</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Index</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.auth</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Auth</span>\n\n<span class=\"c1\"># Gen3 Commons URL</span>\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://caninedc.org/\"</span>\n\n<span class=\"c1\"># An API Key downloaded from the above commons' \"Profile\" page</span>\n<span class=\"n\">API_KEY_FILEPATH</span> <span class=\"o\">=</span> <span class=\"s2\">\"credentials.json\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Auth</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">refresh_file</span><span class=\"o\">=</span><span class=\"n\">API_KEY_FILEPATH</span><span class=\"p\">)</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Index</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">auth_provider</span><span class=\"o\">=</span><span class=\"n\">auth</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">is_healthy</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"uh oh! The indexing service is not healthy in the commons </span><span class=\"si\">{</span><span class=\"n\">COMMONS</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">exit</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"trying to create new indexed file object record:</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">create_record</span><span class=\"p\">(</span>\n            <span class=\"n\">hashes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"md5\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ab167e49d25b488939b1ede42752458b\"</span><span class=\"p\">},</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"n\">acl</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"*\"</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">ERROR ocurred when trying to create the record, you probably don't have access.\"</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Available Classes</h2>\n<h3>Gen3Auth</h3>\n<p>This contains an auth wrapper for supporting JWT based authentication with <code>requests</code>. The access token is generated from the refresh token and is regenerated on expiration.</p>\n<h3>Gen3Index</h3>\n<p>This is the client for interacting with the Indexd service for GUID brokering and resolution.</p>\n<h3>Gen3Submission</h3>\n<p>This is the client for interacting with the Gen3 submission service including GraphQL queries.</p>\n<h2>Metadata</h2>\n<p>For interacting with Gen3's metadata service.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.auth</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Auth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.metadata</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Metadata</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Auth</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">refresh_file</span><span class=\"o\">=</span><span class=\"s2\">\"credentials.json\"</span><span class=\"p\">)</span>\n    <span class=\"n\">mds</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Metadata</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">auth_provider</span><span class=\"o\">=</span><span class=\"n\">auth</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">mds</span><span class=\"o\">.</span><span class=\"n\">is_healthy</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mds</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">())</span>\n\n        <span class=\"n\">guid</span> <span class=\"o\">=</span> <span class=\"s2\">\"95a41871-444c-48ae-8004-63f4ed1f0691\"</span>\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"fizz\"</span><span class=\"p\">:</span> <span class=\"s2\">\"buzz\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"nested_details\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">mds</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">guid</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">guids</span> <span class=\"o\">=</span> <span class=\"n\">mds</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"nested_details.key1=value1\"</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">guids</span><span class=\"p\">)</span>\n        <span class=\"c1\"># &gt;&gt;&gt; ['95a41871-444c-48ae-8004-63f4ed1f0691']</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Indexing Tools</h2>\n<h3>Download Manifest</h3>\n<p>How to download a manifest <code>object-manifest.csv</code> of all file objects in indexd for a given commons:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools</span> <span class=\"kn\">import</span> <span class=\"n\">indexing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.indexing.verify_manifest</span> <span class=\"kn\">import</span> <span class=\"n\">manifest_row_parsers</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span>\n        <span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">async_download_object_manifest</span><span class=\"p\">(</span>\n            <span class=\"n\">COMMONS</span><span class=\"p\">,</span>\n            <span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"s2\">\"object-manifest.csv\"</span><span class=\"p\">,</span>\n            <span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n            <span class=\"n\">max_concurrent_requests</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>The output file will contain columns <code>guid, urls, authz, acl, md5, file_size, file_name</code> with info\npopulated from indexd.</p>\n<h3>Verify Manifest</h3>\n<p>How to verify the file objects in indexd against a \"source of truth\" manifest.</p>\n<blockquote>\n<p>Bonus: How to override default parsing of manifest to match a different structure.</p>\n</blockquote>\n<p>In the example below we assume a manifest named <code>alternate-manifest.csv</code> already exists\nwith info of what's expected in indexd. The headers in the <code>alternate-manifest.csv</code>\nare <code>guid, urls, authz, acl, md5, size, file_name</code>.</p>\n<blockquote>\n<p>NOTE: The alternate manifest headers differ rfom the default headers described above (<code>file_size</code> doesn't exist and should be taken from <code>size</code>)</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools</span> <span class=\"kn\">import</span> <span class=\"n\">indexing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.indexing.verify_manifest</span> <span class=\"kn\">import</span> <span class=\"n\">manifest_row_parsers</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_file_size</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"size\"</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"could not convert this to an int: </span><span class=\"si\">{</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'size'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"size\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># override default parsers</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"file_size\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_file_size</span>\n\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span>\n        <span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">async_verify_object_manifest</span><span class=\"p\">(</span>\n            <span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">manifest_file</span><span class=\"o\">=</span><span class=\"s2\">\"alternate-manifest.csv\"</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>A more complex example is below. In this example:</p>\n<ul>\n<li>The input file is a tab-separated value file (instead of default CSV)\n<ul>\n<li>Note the <code>manifest_file_delimiter</code> argument</li>\n</ul>\n</li>\n<li>The arrays in the file are represented with Python-like list syntax\n<ul>\n<li>ex: <code>['DEV', 'test']</code> for the <code>acl</code> column</li>\n</ul>\n</li>\n<li>We are using more Python processes (20) to speed up the verify process\n<ul>\n<li>NOTE: You need to be careful about this, as indexd itself needs to support\nscaling to this number of concurrent requests coming in</li>\n</ul>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools</span> <span class=\"kn\">import</span> <span class=\"n\">indexing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.indexing.verify_manifest</span> <span class=\"kn\">import</span> <span class=\"n\">manifest_row_parsers</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_file_size</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"size\"</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"could not convert this to an int: </span><span class=\"si\">{</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'size'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"size\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_acl_from_row</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"acl\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"[\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"]\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"'\"</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_authz_from_row</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"authz\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"[\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"]\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"'\"</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_urls_from_row</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()]</span>\n\n    <span class=\"c1\"># override default parsers</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"file_size\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_file_size</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"acl\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_acl_from_row</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"authz\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_authz_from_row</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"urls\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_urls_from_row</span>\n\n    <span class=\"n\">indexing</span><span class=\"o\">.</span><span class=\"n\">verify_object_manifest</span><span class=\"p\">(</span>\n        <span class=\"n\">COMMONS</span><span class=\"p\">,</span>\n        <span class=\"n\">manifest_file</span><span class=\"o\">=</span><span class=\"s2\">\"output-manifest.csv\"</span><span class=\"p\">,</span>\n        <span class=\"n\">manifest_file_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h3>Indexing Manifest</h3>\n<p>The module for indexing object files in a manifest (against indexd's API).</p>\n<p>The manifest format can be either tsv or csv. The fields that are lists (like acl, authz, and urls)\nseparate the values with commas or spaces (but you must use spaces if the file is a csv).\nThe field values can contain single quote, open bracket and the closed bracket. However, they will\nbe removed in the preprocessing step.</p>\n<p>The following is an example of tsv manifest.</p>\n<pre><code>guid\tmd5\tsize\tauthz\tacl\turl\n255e396f-f1f8-11e9-9a07-0a80fada099c\t473d83400bc1bc9dc635e334faddf33c\t363455714\t/programs/DEV/project/test\t['Open']\t[s3://examplebucket/test1.raw]\n255e396f-f1f8-11e9-9a07-0a80fada097c\t473d83400bc1bc9dc635e334fadd433c\t543434443\t/programs/DEV/project/test\tphs0001 phs0002\ts3://examplebucket/test3.raw gs://examplebucket/test3.raw\n255e396f-f1f8-11e9-9a07-0a80fada096c\t473d83400bc1bc9dc635e334fadd433c\t363455714\t/programs/DEV/project/test\t['phs0001', 'phs0002']\t['s3://examplebucket/test4.raw', 'gs://examplebucket/test3.raw']\n</code></pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.auth</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Auth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.indexing</span> <span class=\"kn\">import</span> <span class=\"n\">index_object_manifest</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n<span class=\"n\">MANIFEST</span> <span class=\"o\">=</span> <span class=\"s2\">\"./example_manifest.tsv\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Auth</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">refresh_file</span><span class=\"o\">=</span><span class=\"s2\">\"credentials.json\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># use basic auth for admin privileges in indexd</span>\n    <span class=\"c1\"># auth = (\"basic_auth_username\", \"basic_auth_password\")</span>\n\n    <span class=\"n\">index_object_manifest</span><span class=\"p\">(</span>\n        <span class=\"n\">commons_url</span><span class=\"o\">=</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span>\n        <span class=\"n\">manifest_file</span><span class=\"o\">=</span><span class=\"n\">MANIFEST</span><span class=\"p\">,</span>\n        <span class=\"n\">thread_num</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">auth</span><span class=\"p\">,</span>\n        <span class=\"n\">replace_urls</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">manifest_file_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span> <span class=\"c1\"># put \",\" if the manifest is csv file</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Metadata Tools</h2>\n<h3>Ingest Manifest</h3>\n<p>For populating the metadata service via a file filled with metadata. Uses asynchronous\ncalls for you.</p>\n<p>The file provided must contain a \"guid\" column (or you can use a different column name or different logic entirely by providing a <code>guid_for_row</code> function)</p>\n<p>The row contents can contain valid JSON and this script will correctly nest that JSON\nin the resulting metadata.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.auth</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Auth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools</span> <span class=\"kn\">import</span> <span class=\"n\">metadata</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.metadata.ingest_manifest</span> <span class=\"kn\">import</span> <span class=\"n\">manifest_row_parsers</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n<span class=\"c1\"># a file containing a \"guid\" column and additional, arbitrary columns to populate</span>\n<span class=\"c1\"># into the metadata service</span>\n<span class=\"n\">MANIFEST</span> <span class=\"o\">=</span> <span class=\"s2\">\"dbgap_extract_guid.tsv\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Auth</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">refresh_file</span><span class=\"o\">=</span><span class=\"s2\">\"credentials.json\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># must provide a str to namespace the metadata from the file in a block in</span>\n    <span class=\"c1\"># the metadata service</span>\n    <span class=\"n\">metadata_source</span> <span class=\"o\">=</span> <span class=\"s2\">\"dbgap\"</span>\n\n    <span class=\"c1\"># (optional) override default guid parsing behavior</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_custom_get_guid_for_row</span><span class=\"p\">(</span><span class=\"n\">commons_url</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">lock</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Given a row from the manifest, return the guid to use for the metadata object.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            commons_url (str): root domain for commons where mds lives</span>\n<span class=\"sd\">            row (dict): column_name:row_value</span>\n<span class=\"sd\">            lock (asyncio.Semaphore): semaphones used to limit ammount of concurrent http</span>\n<span class=\"sd\">                connections if making a call to an external service</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            str: guid</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"guid\"</span><span class=\"p\">)</span> <span class=\"c1\"># OR row.get(\"some_other_column\")</span>\n\n    <span class=\"c1\"># (optional) override default guid parsing behavior</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"guid_for_row\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_custom_get_guid_for_row</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span>\n        <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">async_ingest_metadata_manifest</span><span class=\"p\">(</span>\n            <span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">manifest_file</span><span class=\"o\">=</span><span class=\"n\">MANIFEST</span><span class=\"p\">,</span> <span class=\"n\">metadata_source</span><span class=\"o\">=</span><span class=\"n\">metadata_source</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">auth</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Example file:</p>\n<pre><code>guid    submitted_sample_id biosample_id    dbgap_sample_id sra_sample_id   submitted_subject_id    dbgap_subject_id    consent_code    consent_short_name  sex body_site   analyte_type    sample_use  repository  dbgap_status    sra_data_details    study_accession study_accession_with_consent    study_with_consent  study_subject_id\n95a41871-222c-48ae-8004-63f4ed1f0691    NWD680715   SAMN04109058    1784155 SRS1361261  DBG00391    1360750 2   HMB-IRB-MDS female  Blood   DNA [\"Seq_DNA_SNP_CNV\"] TOPMed_WGS_Amish    Loaded  {\"status\": \"public\", \"experiments\": \"1\", \"runs\": \"1\", \"bases\": \"135458977924\", \"size_Gb\": \"25\", \"experiment_type\": \"WGS\", \"platform\": \"ILLUMINA\", \"center\": \"UM-TOPMed\"}    phs000956.v3.p1 phs000956.v3.p1.c2  phs000956.c2    phs000956.v3_DBG00391\n</code></pre>\n<p>Would result in the following metadata records in the metadata service:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"n\">_guid_type</span><span class=\"p\">:</span> <span class=\"s2\">\"indexed_file_object\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dbgap</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"n\">sex</span><span class=\"p\">:</span> <span class=\"s2\">\"female\"</span><span class=\"p\">,</span>\n        <span class=\"n\">body_site</span><span class=\"p\">:</span> <span class=\"s2\">\"Blood\"</span><span class=\"p\">,</span>\n        <span class=\"n\">repository</span><span class=\"p\">:</span> <span class=\"s2\">\"TOPMed_WGS_Amish\"</span><span class=\"p\">,</span>\n        <span class=\"n\">sample_use</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"Seq_DNA_SNP_CNV\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"n\">analyte_type</span><span class=\"p\">:</span> <span class=\"s2\">\"DNA\"</span><span class=\"p\">,</span>\n        <span class=\"n\">biosample_id</span><span class=\"p\">:</span> <span class=\"s2\">\"SAMN04109058\"</span><span class=\"p\">,</span>\n        <span class=\"n\">consent_code</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">dbgap_status</span><span class=\"p\">:</span> <span class=\"s2\">\"Loaded\"</span><span class=\"p\">,</span>\n        <span class=\"n\">sra_sample_id</span><span class=\"p\">:</span> <span class=\"s2\">\"SRS1361261\"</span><span class=\"p\">,</span>\n        <span class=\"n\">dbgap_sample_id</span><span class=\"p\">:</span> <span class=\"mi\">1784155</span><span class=\"p\">,</span>\n        <span class=\"n\">study_accession</span><span class=\"p\">:</span> <span class=\"s2\">\"phs000956.v3.p1\"</span><span class=\"p\">,</span>\n        <span class=\"n\">dbgap_subject_id</span><span class=\"p\">:</span> <span class=\"mi\">1360750</span><span class=\"p\">,</span>\n        <span class=\"n\">sra_data_details</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"n\">runs</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n            <span class=\"n\">bases</span><span class=\"p\">:</span> <span class=\"s2\">\"135458977924\"</span><span class=\"p\">,</span>\n            <span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"s2\">\"UM-TOPMed\"</span><span class=\"p\">,</span>\n            <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"s2\">\"public\"</span><span class=\"p\">,</span>\n            <span class=\"n\">size_Gb</span><span class=\"p\">:</span> <span class=\"s2\">\"25\"</span><span class=\"p\">,</span>\n            <span class=\"n\">platform</span><span class=\"p\">:</span> <span class=\"s2\">\"ILLUMINA\"</span><span class=\"p\">,</span>\n            <span class=\"n\">experiments</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n            <span class=\"n\">experiment_type</span><span class=\"p\">:</span> <span class=\"s2\">\"WGS\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">study_subject_id</span><span class=\"p\">:</span> <span class=\"s2\">\"phs000956.v3_DBG00391\"</span><span class=\"p\">,</span>\n        <span class=\"n\">consent_short_name</span><span class=\"p\">:</span> <span class=\"s2\">\"HMB-IRB-MDS\"</span><span class=\"p\">,</span>\n        <span class=\"n\">study_with_consent</span><span class=\"p\">:</span> <span class=\"s2\">\"phs000956.c2\"</span><span class=\"p\">,</span>\n        <span class=\"n\">submitted_sample_id</span><span class=\"p\">:</span> <span class=\"s2\">\"NWD680715\"</span><span class=\"p\">,</span>\n        <span class=\"n\">submitted_subject_id</span><span class=\"p\">:</span> <span class=\"s2\">\"DBG00391\"</span><span class=\"p\">,</span>\n        <span class=\"n\">study_accession_with_consent</span><span class=\"p\">:</span> <span class=\"s2\">\"phs000956.v3.p1.c2\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\n<p>NOTE: <code>_guid_type</code> is populated automatically, depending on if the provided GUID exists in indexd or not. Either <code>indexed_file_object</code> or <code>metadata_object</code>.</p>\n</blockquote>\n<h3>Searching Indexd to get GUID for Metadata Ingestion</h3>\n<p>It is possible to try and dynamically retrieve a GUID for a row in the manifest file\nprovided. However, this is limited by indexd's ability to scale to the queries you\nwant to run. Indexd's querying capabilities are limited and don't scale well with a\nlarge volume of records (it is meant to be a key:value store much like the metadata service).</p>\n<blockquote>\n<p>WARNING: This is not recommended to be used at scale. Consider making these associations to metadata before ingestion. See <a href=\"#manifest-merge\" rel=\"nofollow\">merging tools</a></p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.auth</span> <span class=\"kn\">import</span> <span class=\"n\">Gen3Auth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools</span> <span class=\"kn\">import</span> <span class=\"n\">metadata</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.metadata.ingest_manifest</span> <span class=\"kn\">import</span> <span class=\"n\">manifest_row_parsers</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n<span class=\"n\">MANIFEST</span> <span class=\"o\">=</span> <span class=\"s2\">\"dbgap_extract.tsv\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">Gen3Auth</span><span class=\"p\">(</span><span class=\"n\">COMMONS</span><span class=\"p\">,</span> <span class=\"n\">refresh_file</span><span class=\"o\">=</span><span class=\"s2\">\"credentials.json\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># must provide a str to namespace the metadata from the file in a block in</span>\n    <span class=\"c1\"># the metadata service</span>\n    <span class=\"n\">metadata_source</span> <span class=\"o\">=</span> <span class=\"s2\">\"dbgap\"</span>\n\n    <span class=\"c1\"># (optional) override default indexd querying (NOTE: must be async)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_custom_query_for_associated_indexd_record_guid</span><span class=\"p\">(</span><span class=\"n\">commons_url</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">lock</span><span class=\"p\">,</span> <span class=\"n\">output_queue</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Given a row from the manifest, return the guid for the related indexd record.</span>\n\n<span class=\"sd\">        WARNING: The query endpoint this uses in indexd is incredibly slow when there are</span>\n<span class=\"sd\">                 lots of indexd records.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            commons_url (str): root domain for commons where mds lives</span>\n<span class=\"sd\">            row (dict): column_name:row_value</span>\n<span class=\"sd\">            lock (asyncio.Semaphore): semaphones used to limit ammount of concurrent http</span>\n<span class=\"sd\">                connections</span>\n<span class=\"sd\">            output_queue (asyncio.Queue): queue for logging output</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            str: guid or None</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"urls\"</span><span class=\"p\">:</span> <span class=\"s2\">\"submitted_sample_id\"</span><span class=\"p\">}</span>\n\n        <span class=\"c1\"># special query endpoint for matching url patterns</span>\n        <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\"urls\"</span> <span class=\"ow\">in</span> <span class=\"n\">mapping</span><span class=\"p\">:</span>\n            <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"s2\">\"urls\"</span><span class=\"p\">])</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"trying to find matching record matching url pattern: </span><span class=\"si\">{</span><span class=\"n\">pattern</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">async_query_urls_from_indexd</span><span class=\"p\">(</span>\n                <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">commons_url</span><span class=\"p\">,</span> <span class=\"n\">lock</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"matching record(s): </span><span class=\"si\">{</span><span class=\"n\">records</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"s2\">\"Multiple records were found with the given search criteria, this is assumed \"</span>\n                <span class=\"s2\">\"to be unintentional so the metadata will NOT be linked to these records:</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">records</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">guid</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">guid</span> <span class=\"o\">=</span> <span class=\"n\">records</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"did\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">guid</span>\n\n    <span class=\"c1\"># (optional) override default indexd querying</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"indexed_file_object_guid\"</span>\n    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_custom_query_for_associated_indexd_record_guid</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span>\n        <span class=\"c1\"># get_guid_from_file=False tells tool to try and get the guid using</span>\n        <span class=\"c1\"># the provided custom query function</span>\n        <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">async_ingest_metadata_manifest</span><span class=\"p\">(</span>\n            <span class=\"n\">COMMONS</span><span class=\"p\">,</span>\n            <span class=\"n\">manifest_file</span><span class=\"o\">=</span><span class=\"n\">MANIFEST</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata_source</span><span class=\"o\">=</span><span class=\"n\">metadata_source</span><span class=\"p\">,</span>\n            <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">auth</span><span class=\"p\">,</span>\n            <span class=\"n\">get_guid_from_file</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Setting <code>get_guid_from_file</code>  to <code>False</code> tells tool to try and get the guid using\nthe provided custom query function instead of relying on a column in the manifest.</p>\n<blockquote>\n<p>NOTE: By default, the <code>indexed_file_object_guid</code> function attempts to query indexd URLs to pattern match\nwhatever is in the manifest column <code>submitted_sample_id</code>.</p>\n</blockquote>\n<h3>Manifest Merge</h3>\n<p>If you have a manifest full of metadata and a manifest of indexed file objects in Indexd, you can use this script to merge the two into a metadata manifest for ingestion.</p>\n<p>For example, a common use case for this is if you have a file full of metadata from dbGaP and want to get associated GUIDs for each row. You can then add the dbGaP metadata to the metadata service for those GUIDs with the file output from this merge script.</p>\n<p>The script is also fairly configurable depending on how you need to map between the two files.</p>\n<p>The ideal scenario is when you can map column to column between your <em>metadata manifest</em> and <em>indexing manifest</em> (e.g. what's in indexd).</p>\n<p>The non-ideal scenario is if you need something for partially matching one column to another. For example: if one of the indexed URLs will contain <code>submitted_sample_id</code> somewhere in the filename. In this case, the efficiency of the script becomes O(n^2). If you can reliably parse out the section of the URL to match that could improve this. <em>tl;dr</em> Depending on your logic and number of rows in both files, this could be very very slow.</p>\n<p>By default this merge can match multiple GUIDs with the same metadata (depending on the configuration). This supports situations where there may exist metadata that applies to multiple files. For example: dbGaP sample metadata applied to both CRAM and CRAI genomic files.</p>\n<p>So while this supports metadata matching multiple GUIDs, it does <em>not</em> support GUIDs matching multiple sets of metadata.</p>\n<blockquote>\n<p>IMPORTANT NOTE: The tool will log warnings about unmatched records but it will not halt execution, so be sure to check logs when using these tools.</p>\n</blockquote>\n<h4>Ideal Scenario (Column to Column Match, Indexing:Metadata Manifest Rows)</h4>\n<p>Consider the following example files.</p>\n<p><em>metadata manifest</em>: dbGaP extract file perhaps by using <a href=\"https://github.com/uc-cdis/dbgap-extract\" rel=\"nofollow\">this tool</a>:</p>\n<pre><code>submitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n</code></pre>\n<p><em>indexing manifest</em> (perhaps provided by the data owner):</p>\n<pre><code>guid, sample_id, file_size, md5, md5_hex, aws_uri, gcp_uri\n</code></pre>\n<p>The strategy here is to map from the <code>submitted_sample_id</code> from the metadata manifest into the <code>sample_id</code> and then use the <code>guid</code> from the indexing manifest in the final output. That final output will can be used as the ingestion file for metadata ingestion.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.merge</span> <span class=\"kn\">import</span> <span class=\"n\">merge_guids_into_metadata</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.merge</span> <span class=\"kn\">import</span> <span class=\"n\">manifests_mapping_config</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">indexing_manifest</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"/path/to/indexing_manifest.csv\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">metadata_manifest</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"/path/to/metadata_extract.tsv\"</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># what column to use as the final GUID for metadata (this MUST exist in the</span>\n    <span class=\"c1\"># indexing file)</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">[</span><span class=\"s2\">\"guid_column_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"guid\"</span>\n\n    <span class=\"c1\"># what column from the \"metadata file\" to use for mapping</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">[</span><span class=\"s2\">\"row_column_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"submitted_sample_id\"</span>\n\n    <span class=\"c1\"># this configuration tells the function to use the \"sample_id\" column</span>\n    <span class=\"c1\"># from the \"indexing file\" to map to the metadata column configured above</span>\n    <span class=\"c1\"># (and these should match EXACTLY, 1:1)</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">[</span><span class=\"s2\">\"indexing_manifest_column_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"sample_id\"</span>\n\n    <span class=\"n\">output_filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"metadata-manifest.tsv\"</span>\n\n    <span class=\"n\">merge_guids_into_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">indexing_manifest</span><span class=\"p\">,</span> <span class=\"n\">metadata_manifest</span><span class=\"p\">,</span> <span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"n\">output_filename</span><span class=\"p\">,</span>\n        <span class=\"n\">manifests_mapping_config</span><span class=\"o\">=</span><span class=\"n\">manifests_mapping_config</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>The final output file will contain all the columns from the metadata manifest in addition to a new GUID column which maps to indexed records.</p>\n<p><em>output manifest</em> (to be used in metadata ingestion):</p>\n<pre><code>guid, submitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n</code></pre>\n<h4>Non-Ideal Scenario (Partial URL Matching)</h4>\n<p>Consider the following example files.</p>\n<p><em>metadata manifest</em>: dbGaP extract file perhaps by using <a href=\"https://github.com/uc-cdis/dbgap-extract\" rel=\"nofollow\">this tool</a>:</p>\n<pre><code>submitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n</code></pre>\n<p><em>indexing manifest</em> (perhaps by using the <a href=\"#download-manifest\" rel=\"nofollow\">download manifest tool</a>):</p>\n<pre><code>guid, urls, authz, acl, md5, file_size, file_name\n</code></pre>\n<blockquote>\n<p>NOTE: The indexing manifest contains no exact column match to the metadata manifest.</p>\n</blockquote>\n<p>The strategy here is to look for partial matches of the metadata manifest's <code>submitted_sample_id</code> in the indexing manifest's <code>urls</code> field.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">gen3.tools.merge</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">merge_guids_into_metadata</span><span class=\"p\">,</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">,</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">,</span>\n    <span class=\"n\">get_guids_for_manifest_row_partial_match</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.log\"</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"n\">COMMONS</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://{{insert-commons-here}}/\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">indexing_manifest</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"/path/to/indexing_manifest.csv\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">metadata_manifest</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"/path/to/metadata_extract.tsv\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># what column to use as the final GUID for metadata (this MUST exist in the</span>\n    <span class=\"c1\"># indexing file)</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">[</span><span class=\"s2\">\"guid_column_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"guid\"</span>\n\n    <span class=\"c1\"># what column from the \"metadata file\" to use for mapping</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">[</span><span class=\"s2\">\"row_column_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"submitted_sample_id\"</span>\n\n    <span class=\"c1\"># this configuration tells the function to use the \"gcp_uri\" column</span>\n    <span class=\"c1\"># from the \"indexing file\" to map to the metadata column configured above</span>\n    <span class=\"c1\"># (for partial matching the metdata data column to this column )</span>\n    <span class=\"n\">manifests_mapping_config</span><span class=\"p\">[</span><span class=\"s2\">\"indexing_manifest_column_name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"urls\"</span>\n\n    <span class=\"c1\"># by default, the functions for parsing the manifests and rows assumes a 1:1</span>\n    <span class=\"c1\"># mapping. There is an additional function provided for partial string matching</span>\n    <span class=\"c1\"># which we can use here.</span>\n    <span class=\"n\">manifest_row_parsers</span><span class=\"p\">[</span><span class=\"s2\">\"guids_for_manifest_row\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">get_guids_for_manifest_row_partial_match</span>\n\n    <span class=\"n\">output_filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"metadata-manifest-partial.tsv\"</span>\n\n    <span class=\"n\">merge_guids_into_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">indexing_manifest</span><span class=\"o\">=</span><span class=\"n\">indexing_manifest</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata_manifest</span><span class=\"o\">=</span><span class=\"n\">metadata_manifest</span><span class=\"p\">,</span>\n        <span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"n\">output_filename</span><span class=\"p\">,</span>\n        <span class=\"n\">manifests_mapping_config</span><span class=\"o\">=</span><span class=\"n\">manifests_mapping_config</span><span class=\"p\">,</span>\n        <span class=\"n\">manifest_row_parsers</span><span class=\"o\">=</span><span class=\"n\">manifest_row_parsers</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<blockquote>\n<p>WARNING: The efficiency here is O(n2) so this does not scale well with large files.</p>\n</blockquote>\n<p>The final output file will contain all the columns from the metadata manifest in addition to a new GUID column which maps to indexed records.</p>\n<p><em>output manifest</em> (to be used in metadata ingestion):</p>\n<pre><code>guid, submitted_sample_id, dbgap_subject_id, consent_short_name, body_site, ....\n</code></pre>\n<h1>Changelog</h1>\n<h2>0.1.0</h2>\n<p>Initial release\nFunctionality for IndexClient, and Submission client</p>\n\n          </div>"}, "last_serial": 7084838, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "667e310c2f83dd586887e523974c00cf", "sha256": "aa4a2c648692f675a1dac8df5932b5375de49d2f37c06683432be04e91ba17c8"}, "downloads": -1, "filename": "gen3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "667e310c2f83dd586887e523974c00cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9046, "upload_time": "2018-08-27T04:32:43", "upload_time_iso_8601": "2018-08-27T04:32:43.530253Z", "url": "https://files.pythonhosted.org/packages/fa/c6/f138c34e9930e2f073b31ffb775ba4a6f3594544b64aabb3e5354710a319/gen3-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2ae753e53fbc65a49b589749d5447c84", "sha256": "043d9f1bd30832750146fc9a6717751d8e88f43c5d34bfdecba3b88585dfc4e6"}, "downloads": -1, "filename": "gen3-0.1.2-py3.6.egg", "has_sig": false, "md5_digest": "2ae753e53fbc65a49b589749d5447c84", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 41047, "upload_time": "2018-09-18T18:08:28", "upload_time_iso_8601": "2018-09-18T18:08:28.372973Z", "url": "https://files.pythonhosted.org/packages/bb/bb/8d619fd983e5264e83f7e10277c8fbbc9d5c519664c63cedb2816790cdd2/gen3-0.1.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "acfb40f237b6a04035cdcb44a668b83c", "sha256": "b78cdae99df8949110c6c3649e19fabbfae826dfbbc7364961bd1cbed375be21"}, "downloads": -1, "filename": "gen3-0.1.2.tar.gz", "has_sig": false, "md5_digest": "acfb40f237b6a04035cdcb44a668b83c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14348, "upload_time": "2018-09-18T18:08:29", "upload_time_iso_8601": "2018-09-18T18:08:29.955434Z", "url": "https://files.pythonhosted.org/packages/39/cf/1e2cd2b33cf7af4db503ab2252f99c883b0c17b0ef1af391a0f8d024751a/gen3-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5c9fdc9ac683e44852e786bc7658e5e5", "sha256": "bd650a943219902ec3f183316e0fe57afe174499eccd07917bc96f8fb8e47c1f"}, "downloads": -1, "filename": "gen3-0.1.3-py3.6.egg", "has_sig": false, "md5_digest": "5c9fdc9ac683e44852e786bc7658e5e5", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 41462, "upload_time": "2018-12-06T19:06:46", "upload_time_iso_8601": "2018-12-06T19:06:46.561933Z", "url": "https://files.pythonhosted.org/packages/4d/27/d967f098321d15edfa9df2372d066998731b5fd702d292bf8b92f9479857/gen3-0.1.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3dad5cc3745f0947a27fa46ed1510dbc", "sha256": "e6b57410b739a8e675ec20202d54dc2391d9a611130c465701798d29c1a8d3f4"}, "downloads": -1, "filename": "gen3-0.1.3.tar.gz", "has_sig": false, "md5_digest": "3dad5cc3745f0947a27fa46ed1510dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15530, "upload_time": "2018-12-06T19:06:47", "upload_time_iso_8601": "2018-12-06T19:06:47.954141Z", "url": "https://files.pythonhosted.org/packages/8a/b2/9463b3e600916f6e4d241d887cb181078fdd31cf6cfdda52fb9740815616/gen3-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "ba5fc71c0a6f2aab72fc954cb545592d", "sha256": "ce883f457232e49706a723a4423b5355402d63131a2574683d1aadd5e14582a1"}, "downloads": -1, "filename": "gen3-0.1.4-py3.6.egg", "has_sig": false, "md5_digest": "ba5fc71c0a6f2aab72fc954cb545592d", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 41641, "upload_time": "2019-01-25T18:48:34", "upload_time_iso_8601": "2019-01-25T18:48:34.558733Z", "url": "https://files.pythonhosted.org/packages/2f/ed/48345922500d215a1dae4daa5c6a17523cf9072dcf6442743f576ed4f850/gen3-0.1.4-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "241d45281dfb443a40d3ca84de416c9c", "sha256": "85a814a6924691bb0e048c32a9a9f3f33f0258dff6e028d28daccc953c528dd3"}, "downloads": -1, "filename": "gen3-0.1.4.tar.gz", "has_sig": false, "md5_digest": "241d45281dfb443a40d3ca84de416c9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15580, "upload_time": "2019-01-25T18:48:35", "upload_time_iso_8601": "2019-01-25T18:48:35.982781Z", "url": "https://files.pythonhosted.org/packages/83/37/196a2603b2477ed4a5d778950cfeda00c7e8edd9b9ff319233839cb5854a/gen3-0.1.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "378fc868d617cbccb8a306eba4ef1863", "sha256": "ea42d4450e3766bad02dc404afe4e7c518f12359010a9589032475e6dedd400c"}, "downloads": -1, "filename": "gen3-1.0.0-py3.6.egg", "has_sig": false, "md5_digest": "378fc868d617cbccb8a306eba4ef1863", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 42326, "upload_time": "2019-02-04T20:20:20", "upload_time_iso_8601": "2019-02-04T20:20:20.004704Z", "url": "https://files.pythonhosted.org/packages/1c/f0/56019f19d7d38f716ec983404de616e0c1cac36ebb69a6fe81f502ceda4e/gen3-1.0.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2300c8927f5839604a5bd39f2db8bb12", "sha256": "da5e61c155854e5db68b58f79e9bb5ff62789ca2c1e4a1029ebe02acfeb41938"}, "downloads": -1, "filename": "gen3-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2300c8927f5839604a5bd39f2db8bb12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15828, "upload_time": "2019-02-04T20:20:21", "upload_time_iso_8601": "2019-02-04T20:20:21.347369Z", "url": "https://files.pythonhosted.org/packages/d2/28/7a7451920e1f2392c009dcfdbb3bd66ea50dd09a0f7ed97d1ea04e65ac3a/gen3-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c883e38c4af92f823659f13b19918389", "sha256": "541ab0ed5f067ae07d6285c21d8ddff7b0f685aa3814064a9a8832647a404514"}, "downloads": -1, "filename": "gen3-1.0.1-py3.6.egg", "has_sig": false, "md5_digest": "c883e38c4af92f823659f13b19918389", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 42345, "upload_time": "2019-04-05T15:03:48", "upload_time_iso_8601": "2019-04-05T15:03:48.691102Z", "url": "https://files.pythonhosted.org/packages/ca/9d/0de75958e212fa430547bc22a3b564eedc5cb8f3e00677aca83df57b7503/gen3-1.0.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bede2afc8ac34bfe1144a545f341ea2", "sha256": "b5fc87a8aa2072e8a50bc0da76abb16e25c9bef5de73059617f50aae10290adc"}, "downloads": -1, "filename": "gen3-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4bede2afc8ac34bfe1144a545f341ea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15849, "upload_time": "2019-04-05T15:03:49", "upload_time_iso_8601": "2019-04-05T15:03:49.926905Z", "url": "https://files.pythonhosted.org/packages/d9/2d/952603cf57b2f7215d1fe1d17b6c01206b754c1098d68bb174bf4d80f683/gen3-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2acac0527a4d8a693d8b6aece0ad3e33", "sha256": "1282b58fecf575bfa591afb9328b54ca20f456642dd74fd7111c1b7496c48019"}, "downloads": -1, "filename": "gen3-1.1.0-py3.6.egg", "has_sig": false, "md5_digest": "2acac0527a4d8a693d8b6aece0ad3e33", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 47385, "upload_time": "2019-08-12T19:09:51", "upload_time_iso_8601": "2019-08-12T19:09:51.111345Z", "url": "https://files.pythonhosted.org/packages/f8/8c/6a02ea3ab62872dea9a95465f278007aab53f63423cc07fa9299c48b0663/gen3-1.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e15ddecda7ae3dacfce52fd4af25fc4", "sha256": "f9c6d2082faa66af7cac3f432cbb95dd0f5bef71d5561a53e21b7b9b08b771af"}, "downloads": -1, "filename": "gen3-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0e15ddecda7ae3dacfce52fd4af25fc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18253, "upload_time": "2019-08-12T19:09:52", "upload_time_iso_8601": "2019-08-12T19:09:52.755477Z", "url": "https://files.pythonhosted.org/packages/7b/95/60854346a18916195a6435b537df64eb3ffdfcfed7b0c55c5333d0b06b07/gen3-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "e52059713c695797634ce7f5c5196395", "sha256": "9cf5e972fac3254f68b5593e55223a3a5d04ba9bfd66ef776a5a234d99ed92af"}, "downloads": -1, "filename": "gen3-2.0.0-py3.6.egg", "has_sig": false, "md5_digest": "e52059713c695797634ce7f5c5196395", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 64395, "upload_time": "2019-11-25T19:32:46", "upload_time_iso_8601": "2019-11-25T19:32:46.337978Z", "url": "https://files.pythonhosted.org/packages/5b/27/11fc463de4a055f0a2d4c73d340eba0ece90e79c80715551af687c9cb799/gen3-2.0.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "19cfaa1783e3bbb48343753746a8d4c3", "sha256": "989d6e9a11ccc536dcaba701325defb1b0deeeb0130736bf56296c627d463575"}, "downloads": -1, "filename": "gen3-2.0.0.tar.gz", "has_sig": false, "md5_digest": "19cfaa1783e3bbb48343753746a8d4c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23132, "upload_time": "2019-11-25T19:32:47", "upload_time_iso_8601": "2019-11-25T19:32:47.520390Z", "url": "https://files.pythonhosted.org/packages/16/c1/7c8101e7c0429754e43ddf97746fa0cb08019113de19fb92129ab636c096/gen3-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "baf3f920bcb4997ba098c2462d31c87c", "sha256": "f4741f3dd28d28e724f2dee333e52a2a16b0293d17eb529705982d4914bfa6b6"}, "downloads": -1, "filename": "gen3-2.0.1-py3.6.egg", "has_sig": false, "md5_digest": "baf3f920bcb4997ba098c2462d31c87c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 64548, "upload_time": "2019-11-25T22:08:09", "upload_time_iso_8601": "2019-11-25T22:08:09.357013Z", "url": "https://files.pythonhosted.org/packages/14/e9/e6a226c9330a0c2d7dc1541f8086621e8db1ef0519f70d5bc6a46a51fd52/gen3-2.0.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2988c64e718580f44270ea1d0977d22", "sha256": "6c774ff804d46c5a10342b9a83a9fa50413bbe133abcc109338d91b4c9aebaf1"}, "downloads": -1, "filename": "gen3-2.0.1.tar.gz", "has_sig": false, "md5_digest": "f2988c64e718580f44270ea1d0977d22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23164, "upload_time": "2019-11-25T22:08:11", "upload_time_iso_8601": "2019-11-25T22:08:11.267271Z", "url": "https://files.pythonhosted.org/packages/dd/db/c66a20a4e18f9a8addcc211bdd19c91b75135a067065e1e5c64951049b71/gen3-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "0c881de01246f502f9cbfaed93edd4a5", "sha256": "0450493912d14a5fc9392e1622fc6e8e3ae6f9a13442d128bd1fcbc7c612fd95"}, "downloads": -1, "filename": "gen3-2.1.0-py3.6.egg", "has_sig": false, "md5_digest": "0c881de01246f502f9cbfaed93edd4a5", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 90744, "upload_time": "2020-01-28T17:52:03", "upload_time_iso_8601": "2020-01-28T17:52:03.612969Z", "url": "https://files.pythonhosted.org/packages/d9/05/8c132af94f7a01960fa6414657bd102221152231e8811400363241f93849/gen3-2.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4dc103399fe35fed0b5fa7c5529e19e", "sha256": "44f73189552a7e097ad32eebd73c826c775a23ef66665c5d8101423422df6f2d"}, "downloads": -1, "filename": "gen3-2.1.0.tar.gz", "has_sig": false, "md5_digest": "d4dc103399fe35fed0b5fa7c5529e19e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33836, "upload_time": "2020-01-28T17:52:05", "upload_time_iso_8601": "2020-01-28T17:52:05.142910Z", "url": "https://files.pythonhosted.org/packages/8e/9d/cf0524432c12b97f39b6144024c4e312363aa2506bef2269ae892dac85b0/gen3-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "7167f675172b0e7b51ed7b177c01cfbe", "sha256": "054109da3a7c115127ba714bd0b06c46df63b73394a65fc30d23f4073e5aa311"}, "downloads": -1, "filename": "gen3-2.2.0-py3.6.egg", "has_sig": false, "md5_digest": "7167f675172b0e7b51ed7b177c01cfbe", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 91355, "upload_time": "2020-02-05T15:28:17", "upload_time_iso_8601": "2020-02-05T15:28:17.741917Z", "url": "https://files.pythonhosted.org/packages/22/fa/48b53e1a2221fa72db81246a971d80400437a5d1bde12cf903887f2ebd79/gen3-2.2.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3643bd31aab4a9a0bda58f0d3973366", "sha256": "89b06831c56576fc12e601f75b932ff2943ef49dd92355a81831596a2f0519fc"}, "downloads": -1, "filename": "gen3-2.2.0.tar.gz", "has_sig": false, "md5_digest": "f3643bd31aab4a9a0bda58f0d3973366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34099, "upload_time": "2020-02-05T15:28:19", "upload_time_iso_8601": "2020-02-05T15:28:19.340053Z", "url": "https://files.pythonhosted.org/packages/a2/82/021d1f74cddf4fce91a56b005226e8ad1e6adf4de6f65b1bc8baaf03e3f2/gen3-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "5a397db0d99bcc5a9ccd39cdbd0c3f5d", "sha256": "90a2c7e86fd9d706699081e7679bb84612871de67afba238ff41f62e192dfcd6"}, "downloads": -1, "filename": "gen3-2.2.1-py3.6.egg", "has_sig": false, "md5_digest": "5a397db0d99bcc5a9ccd39cdbd0c3f5d", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 91338, "upload_time": "2020-02-05T19:17:19", "upload_time_iso_8601": "2020-02-05T19:17:19.222010Z", "url": "https://files.pythonhosted.org/packages/b7/8d/ef856ed12e3f8339831de74601ef6502d238dc3f8389ea46162cc8945405/gen3-2.2.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a9124013f3a5d45a4f6885d57ca4782", "sha256": "547176c340bddb62869038e151f8043b487fa1747ec3228a804f33cb46bcaada"}, "downloads": -1, "filename": "gen3-2.2.1.tar.gz", "has_sig": false, "md5_digest": "5a9124013f3a5d45a4f6885d57ca4782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34144, "upload_time": "2020-02-05T19:17:20", "upload_time_iso_8601": "2020-02-05T19:17:20.652246Z", "url": "https://files.pythonhosted.org/packages/9b/5e/20a248610c1a235dea1cd09615b526c3ed389d1450afa154cf9b8d5973c5/gen3-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "b7b5e49e67751d6fda78f36a42118a30", "sha256": "88b75e6bd8c54e122d61232bec58726e339a805c2fca9bb70c5f1d3759cda536"}, "downloads": -1, "filename": "gen3-2.2.2-py3.6.egg", "has_sig": false, "md5_digest": "b7b5e49e67751d6fda78f36a42118a30", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 62613, "upload_time": "2020-02-25T19:32:16", "upload_time_iso_8601": "2020-02-25T19:32:16.604371Z", "url": "https://files.pythonhosted.org/packages/6f/81/90be1eac092142787f62603b6b48494e08f3a65ee68db0af0054971f8f22/gen3-2.2.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "02d99c610f2ad3d96b00260a293d5f48", "sha256": "ecb956782d39bffc4d90397cc09f347021ab2bf45896941283fc1684f1947e59"}, "downloads": -1, "filename": "gen3-2.2.2.tar.gz", "has_sig": false, "md5_digest": "02d99c610f2ad3d96b00260a293d5f48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28746, "upload_time": "2020-02-25T19:32:17", "upload_time_iso_8601": "2020-02-25T19:32:17.940674Z", "url": "https://files.pythonhosted.org/packages/80/86/b2e250b6867e371355adc01fd7b86b1414c11c786672fa763fe07269132a/gen3-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "88ab317525e599b9caa7ee91d01d76d7", "sha256": "677cdaf7e8370d2ed91845c814a2b82e9586b54f2945740b391eae2b72be3adb"}, "downloads": -1, "filename": "gen3-2.2.3-py3.6.egg", "has_sig": false, "md5_digest": "88ab317525e599b9caa7ee91d01d76d7", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 75282, "upload_time": "2020-03-14T15:11:22", "upload_time_iso_8601": "2020-03-14T15:11:22.600069Z", "url": "https://files.pythonhosted.org/packages/d3/79/ea3741dc2e131a3508c320c2e5117453b8e0c67daa0d538c6b6f6c4a35cd/gen3-2.2.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb87f66dff4a17a5a18b319b80cd64fb", "sha256": "cf0501817efc912ae202f0a28999d4cbec44e4fd7902d60d40311891f326118b"}, "downloads": -1, "filename": "gen3-2.2.3.tar.gz", "has_sig": false, "md5_digest": "fb87f66dff4a17a5a18b319b80cd64fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34163, "upload_time": "2020-03-14T15:11:23", "upload_time_iso_8601": "2020-03-14T15:11:23.797279Z", "url": "https://files.pythonhosted.org/packages/11/5b/1c12918e359d1432fe323e83f7d06dd3214ba341840487ffdd23ed0a3b76/gen3-2.2.3.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "14a5026eb8eeef4148980d3612f3191b", "sha256": "6f336fd8e2a1347ea4d26729c428c7cbadd64a8a0f398407269d263670bf89eb"}, "downloads": -1, "filename": "gen3-2.3.0-py3.6.egg", "has_sig": false, "md5_digest": "14a5026eb8eeef4148980d3612f3191b", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 112092, "upload_time": "2020-04-23T14:31:12", "upload_time_iso_8601": "2020-04-23T14:31:12.690454Z", "url": "https://files.pythonhosted.org/packages/6c/61/2a0a4d56379eefaa4fde165677864a7f8ecf96f7f409a4850d03f49c2b1e/gen3-2.3.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "55483a1c53fc104c92eaa563eb965362", "sha256": "d2c393eda5f4f1940c485810fbb305ae8aed065067bf7f334ffbb5905bf27c0c"}, "downloads": -1, "filename": "gen3-2.3.0.tar.gz", "has_sig": false, "md5_digest": "55483a1c53fc104c92eaa563eb965362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60267, "upload_time": "2020-04-23T14:31:14", "upload_time_iso_8601": "2020-04-23T14:31:14.199152Z", "url": "https://files.pythonhosted.org/packages/50/2b/1a535bdeb99c60349518a8d3ca644f1bced58c08285ae19db28ee3cbdb1a/gen3-2.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14a5026eb8eeef4148980d3612f3191b", "sha256": "6f336fd8e2a1347ea4d26729c428c7cbadd64a8a0f398407269d263670bf89eb"}, "downloads": -1, "filename": "gen3-2.3.0-py3.6.egg", "has_sig": false, "md5_digest": "14a5026eb8eeef4148980d3612f3191b", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 112092, "upload_time": "2020-04-23T14:31:12", "upload_time_iso_8601": "2020-04-23T14:31:12.690454Z", "url": "https://files.pythonhosted.org/packages/6c/61/2a0a4d56379eefaa4fde165677864a7f8ecf96f7f409a4850d03f49c2b1e/gen3-2.3.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "55483a1c53fc104c92eaa563eb965362", "sha256": "d2c393eda5f4f1940c485810fbb305ae8aed065067bf7f334ffbb5905bf27c0c"}, "downloads": -1, "filename": "gen3-2.3.0.tar.gz", "has_sig": false, "md5_digest": "55483a1c53fc104c92eaa563eb965362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60267, "upload_time": "2020-04-23T14:31:14", "upload_time_iso_8601": "2020-04-23T14:31:14.199152Z", "url": "https://files.pythonhosted.org/packages/50/2b/1a535bdeb99c60349518a8d3ca644f1bced58c08285ae19db28ee3cbdb1a/gen3-2.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:30 2020"}