{"info": {"author": "caterina", "author_email": "dalgona91@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## NetflixParser\n\n-----\n\nWavve Popular Episode crawling.\n\n----\n### 1. Data Crawling Info\n\n    #### Today's TOP 10 TV Program in Korea\n\n    #### columns \n       - rank : TOP 10 rank\n       - title : program title\n       - Date : crawling date\n----\n\n### 2. Package File\n\n    import requests\n    import pandas as pd\n    from bs4 import BeautifulSoup\n    from selenium import webdriver\n    from selenium.webdriver.remote.webelement import WebElement\n   \n----\n\n### 3. Installation\n\n    pip install NetflixParser\n        \n-------\n### 4. NetflixParser\n\n    import requests\n    import pandas as pd\n    from bs4 import BeautifulSoup\n    from selenium import webdriver\n    from selenium.webdriver.remote.webelement import WebElement\n\n    class NetflixParser:\n    \n        def __init__(self, datetime, login_id, login_pw):\n            self.login_id = login_id \n            self.login_pw = login_pw\n            self.driver = self.login()\n            self.scan(self.driver)\n            \n            df = pd.DataFrame(self.items_list)\n            df = df.drop_duplicates(keep='last').set_index('rank')\n            df['Date'] = datetime\n            self.df = df.sort_index()\n\n            self.driver.quit()\n\n        def login(self):\n            driver = webdriver.Chrome()\n            driver.set_window_size(1080,800)\n            url = 'https://www.netflix.com/kr/login?nextpage=https%3A%2F%2Fwww.netflix.com%2Fbrowse%2Fgenre%2F83'\n            driver.get(url)\n            driver.implicitly_wait(1)\n            #\ub85c\uadf8\uc778\n            driver.find_element_by_css_selector('#id_userLoginId').send_keys(self.login_id)\n            driver.find_element_by_css_selector('#id_password').send_keys(self.login_pw)\n            driver.find_element_by_css_selector('.btn').click()\n            driver.implicitly_wait(3)\n            # driver.find_element_by_css_selector('#appMountPoint > div > div > div:nth-child(1) > div.bd.dark-background > div.profiles-gate-container > div > div > ul > li:nth-child(1) > div > a > div > div').click()\n            driver.find_element_by_css_selector('#appMountPoint > div > div > div:nth-child(1) > div.bd.dark-background > div.profiles-gate-container > div > div > ul > li:nth-child(2) > div > a > div > div').click()\n\n            return driver\n        \n        def scan(self, driver):\n            import time\n\n            self.items_list = []\n            items_get = self.driver.find_element_by_xpath('//div[@data-list-context=\"mostWatched\"]')\n\n            if items_get:\n                items = items_get.find_element_by_css_selector('.rowContent .slider .sliderContent')\n                items.text.strip()\n                items_get.find_element_by_css_selector('.handle').click()\n                time.sleep(2)\n                items_get.find_element_by_css_selector('.handle').click()\n                items_2 = items_get.find_elements_by_css_selector(\"div.ptrack-content a\")\n\n            for item in items_2:\n                title = item.get_attribute(\"aria-label\")\n                rank = item.find_elements_by_css_selector(\"div > svg > use\")[0].get_attribute(\"xlink:href\")\n                rank = int(rank.split('-')[1])\n                self.items_list.append({\"title\" : title, \"rank\" : rank})\n\n            return self.items_list", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/CATERINA-SEUL/WavveParser/archive/NetflixParser-0.1.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CATERINA-SEUL/NetflixParser", "keywords": "netflix", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "NetflixParser", "package_url": "https://pypi.org/project/NetflixParser/", "platform": "", "project_url": "https://pypi.org/project/NetflixParser/", "project_urls": {"Download": "https://github.com/CATERINA-SEUL/WavveParser/archive/NetflixParser-0.1.2.tar.gz", "Homepage": "https://github.com/CATERINA-SEUL/NetflixParser"}, "release_url": "https://pypi.org/project/NetflixParser/0.1.2/", "requires_dist": null, "requires_python": ">=3", "summary": "Netflix parser", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>NetflixParser</h2>\n<hr>\n<p>Wavve Popular Episode crawling.</p>\n<hr>\n<h3>1. Data Crawling Info</h3>\n<pre><code>#### Today's TOP 10 TV Program in Korea\n\n#### columns \n   - rank : TOP 10 rank\n   - title : program title\n   - Date : crawling date\n</code></pre>\n<hr>\n<h3>2. Package File</h3>\n<pre><code>import requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.webelement import WebElement\n</code></pre>\n<hr>\n<h3>3. Installation</h3>\n<pre><code>pip install NetflixParser\n</code></pre>\n<hr>\n<h3>4. NetflixParser</h3>\n<pre><code>import requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.webelement import WebElement\n\nclass NetflixParser:\n\n    def __init__(self, datetime, login_id, login_pw):\n        self.login_id = login_id \n        self.login_pw = login_pw\n        self.driver = self.login()\n        self.scan(self.driver)\n        \n        df = pd.DataFrame(self.items_list)\n        df = df.drop_duplicates(keep='last').set_index('rank')\n        df['Date'] = datetime\n        self.df = df.sort_index()\n\n        self.driver.quit()\n\n    def login(self):\n        driver = webdriver.Chrome()\n        driver.set_window_size(1080,800)\n        url = 'https://www.netflix.com/kr/login?nextpage=https%3A%2F%2Fwww.netflix.com%2Fbrowse%2Fgenre%2F83'\n        driver.get(url)\n        driver.implicitly_wait(1)\n        #\ub85c\uadf8\uc778\n        driver.find_element_by_css_selector('#id_userLoginId').send_keys(self.login_id)\n        driver.find_element_by_css_selector('#id_password').send_keys(self.login_pw)\n        driver.find_element_by_css_selector('.btn').click()\n        driver.implicitly_wait(3)\n        # driver.find_element_by_css_selector('#appMountPoint &gt; div &gt; div &gt; div:nth-child(1) &gt; div.bd.dark-background &gt; div.profiles-gate-container &gt; div &gt; div &gt; ul &gt; li:nth-child(1) &gt; div &gt; a &gt; div &gt; div').click()\n        driver.find_element_by_css_selector('#appMountPoint &gt; div &gt; div &gt; div:nth-child(1) &gt; div.bd.dark-background &gt; div.profiles-gate-container &gt; div &gt; div &gt; ul &gt; li:nth-child(2) &gt; div &gt; a &gt; div &gt; div').click()\n\n        return driver\n    \n    def scan(self, driver):\n        import time\n\n        self.items_list = []\n        items_get = self.driver.find_element_by_xpath('//div[@data-list-context=\"mostWatched\"]')\n\n        if items_get:\n            items = items_get.find_element_by_css_selector('.rowContent .slider .sliderContent')\n            items.text.strip()\n            items_get.find_element_by_css_selector('.handle').click()\n            time.sleep(2)\n            items_get.find_element_by_css_selector('.handle').click()\n            items_2 = items_get.find_elements_by_css_selector(\"div.ptrack-content a\")\n\n        for item in items_2:\n            title = item.get_attribute(\"aria-label\")\n            rank = item.find_elements_by_css_selector(\"div &gt; svg &gt; use\")[0].get_attribute(\"xlink:href\")\n            rank = int(rank.split('-')[1])\n            self.items_list.append({\"title\" : title, \"rank\" : rank})\n\n        return self.items_list\n</code></pre>\n\n          </div>"}, "last_serial": 7118014, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f26995b3807ef70dfcede19bf2ef3362", "sha256": "93ac359b7b70a610f2bb537db0b6259996ee02e85bdad3b5cedd0b7c90ea040a"}, "downloads": -1, "filename": "NetflixParser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f26995b3807ef70dfcede19bf2ef3362", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2615, "upload_time": "2020-04-28T07:44:41", "upload_time_iso_8601": "2020-04-28T07:44:41.124279Z", "url": "https://files.pythonhosted.org/packages/0c/51/bbc6bfb3e959500b0eb16f696b3b895754d7b3a44b26a084d25afbacbbdd/NetflixParser-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "acff563a1275b32b527c96bbcbd8acd3", "sha256": "7dfeda821460a04d3db53ce2412289a8229c729fc89f3d8e387b1e443c056f63"}, "downloads": -1, "filename": "NetflixParser-0.1.2.tar.gz", "has_sig": false, "md5_digest": "acff563a1275b32b527c96bbcbd8acd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2645, "upload_time": "2020-04-28T07:57:02", "upload_time_iso_8601": "2020-04-28T07:57:02.144212Z", "url": "https://files.pythonhosted.org/packages/ce/e4/6ed5d21e6b567fdc3caab3fea4ae98413355f8cf9721000f3d56638cff69/NetflixParser-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "acff563a1275b32b527c96bbcbd8acd3", "sha256": "7dfeda821460a04d3db53ce2412289a8229c729fc89f3d8e387b1e443c056f63"}, "downloads": -1, "filename": "NetflixParser-0.1.2.tar.gz", "has_sig": false, "md5_digest": "acff563a1275b32b527c96bbcbd8acd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2645, "upload_time": "2020-04-28T07:57:02", "upload_time_iso_8601": "2020-04-28T07:57:02.144212Z", "url": "https://files.pythonhosted.org/packages/ce/e4/6ed5d21e6b567fdc3caab3fea4ae98413355f8cf9721000f3d56638cff69/NetflixParser-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:59 2020"}