{"info": {"author": "Thomas Gaudin", "author_email": "thomas.gaudin@centraliens-lille.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet", "Topic :: Security", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "# Pydantic-Vault\n\n![Check code](https://github.com/nymous/pydantic-vault/workflows/Check%20code/badge.svg)\n\nA simple extension to [Pydantic][pydantic] [BaseSettings][pydantic-basesettings] that can retrieve secrets from a [KV v2 secrets engine][vault-kv-v2] in Hashicorp [Vault][vault]\n\n## Getting started\n\nSame as with the Pydantic `BaseSettings`, create a class that inherits from `pydantic_vault.VaultBaseSettings`, then define your fields and configure the settings with\n\n```python\nimport os\n\nfrom pydantic import SecretStr, Field\nfrom pydantic_vault import VaultBaseSettings\n\nclass Settings(VaultBaseSettings):\n    username: str = Field(..., vault_secret_path=\"path/to/secret\", vault_secret_key=\"my_user\")\n    password: SecretStr = Field(..., vault_secret_path=\"path/to/secret\", vault_secret_key=\"my_password\")\n\n    class Config:\n        vault_url: str = \"https://vault.tld\"\n        vault_token: SecretStr = os.environ[\"VAULT_TOKEN\"]\n        vault_namespace: str = \"your/namespace\"  # Optional, pydantic-vault supports Vault namespaces (for Vault Enterprise)\n        vault_secret_mount_point: str = \"secrets\"  # Optional, if your KV v2 secrets engine is not available at the default \"secret\" mount point\n\nsettings = Settings()\n# These variables will come from the Vault secret you configured\nsettings.username\nsettings.password.get_secret_value()\n\n\n# Now let's pretend we have already set the USERNAME in an environment variable\n# (see the Pydantic documentation for more information and to know how to configure it)\n# Its value will override the Vault secret\nos.environ[\"USERNAME\"] = \"my user\"\n\nsettings = Settings()\nsettings.username  # \"my user\", defined in the environment variable\nsettings.password.get_secret_value()  # the value set in Vault\n```\n\n## Documentation\n\n### `Field` additional parameters\n\nYou might have noticed that we import `Field` directly from Pydantic. Pydantic-Vault doesn't add any custom logic to it, which means you can still use everything you know and love from Pydantic.\n\nThe additional parameters Pydantic-Vault uses are:\n\n| Parameter name              | Required | Description |\n|-----------------------------|----------|-------------|\n| `vault_secret_path`         | **Yes**  | The path to your secret in Vault |\n| `vault_secret_key`          | **Yes**  | The key to use in the secret |\n\nFor example, if you create a secret `database/prod` with a key `password` and a value of `a secret password`, you would use\n\n```python\npassword: SecretStr = Field(..., vault_secret_path=\"database/prod\", vault_secret_key=\"password\")\n```\n\n### Authentication\n\nFor now Pydantic-Vault only supports direct token authentication, that is you must authenticate using your method of choice then pass the resulting Vault token to your `Settings` class.\n\nSupport is planned for Approle and Kubernetes authentication methods.\n\n### Configuration\n\nIn your `Settings.Config` class you can configure the following elements:\n\n| Settings name              | Required | Description |\n|----------------------------|----------|-------------|\n| `vault_url`                | **Yes**  | Your Vault URL |\n| `vault_token`              | **Yes**  | A token allowing to connect to Vault (retrieve it with any auth method you want) |\n| `vault_namespace`          | No       | Your Vault namespace (if you use one, requires Vault Enterprise) |\n| `vault_secret_mount_point` | No       | The mount point of the KV v2 secrets engine, if different from the default `\"secret\"` mount point |\n\nYou can also configure everything available in the original Pydantic `BaseSettings` class.\n\n### Order of priority\n\nSettings values are determined as follows (in descending order of priority):\n  - arguments passed to the `Settings` class initializer\n  - environment variables\n  - Vault variables\n  - the default field values for the `Settings` model\n\nIt's the [same order][pydantic-basesettings-priority] as with the original `BaseSettings`, but with Vault just before the default values.\n\n\n## License\n\nPydantic-Vault is available under the [MIT license](./LICENSE).\n\n[pydantic]: https://pydantic-docs.helpmanual.io/\n[pydantic-basesettings]: https://pydantic-docs.helpmanual.io/usage/settings/\n[pydantic-basesettings-priority]: https://pydantic-docs.helpmanual.io/usage/settings/#field-value-priority\n[vault]: https://www.vaultproject.io/\n[vault-kv-v2]: https://www.vaultproject.io/docs/secrets/kv/kv-v2/\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nymous/pydantic-vault", "keywords": "hashicorp,vault,hvac,pydantic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydantic-vault", "package_url": "https://pypi.org/project/pydantic-vault/", "platform": "", "project_url": "https://pypi.org/project/pydantic-vault/", "project_urls": {"Bug Tracker": "https://github.com/nymous/pydantic-vault/issues", "Documentation": "https://github.com/nymous/pydantic-vault", "Homepage": "https://github.com/nymous/pydantic-vault", "Repository": "https://github.com/nymous/pydantic-vault"}, "release_url": "https://pypi.org/project/pydantic-vault/0.1.0a0/", "requires_dist": ["pydantic (>=1.0,<2.0)", "hvac (>=0.10.0,<0.11.0)"], "requires_python": ">=3.6,<4.0", "summary": "A simple extension to Pydantic BaseSettings that can retrieve secrets from Hashicorp Vault", "version": "0.1.0a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pydantic-Vault</h1>\n<p><img alt=\"Check code\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/517bbbff959e4f6cb046d9bbcf52453e8b056909/68747470733a2f2f6769746875622e636f6d2f6e796d6f75732f707964616e7469632d7661756c742f776f726b666c6f77732f436865636b253230636f64652f62616467652e737667\"></p>\n<p>A simple extension to <a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">Pydantic</a> <a href=\"https://pydantic-docs.helpmanual.io/usage/settings/\" rel=\"nofollow\">BaseSettings</a> that can retrieve secrets from a <a href=\"https://www.vaultproject.io/docs/secrets/kv/kv-v2/\" rel=\"nofollow\">KV v2 secrets engine</a> in Hashicorp <a href=\"https://www.vaultproject.io/\" rel=\"nofollow\">Vault</a></p>\n<h2>Getting started</h2>\n<p>Same as with the Pydantic <code>BaseSettings</code>, create a class that inherits from <code>pydantic_vault.VaultBaseSettings</code>, then define your fields and configure the settings with</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">SecretStr</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic_vault</span> <span class=\"kn\">import</span> <span class=\"n\">VaultBaseSettings</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Settings</span><span class=\"p\">(</span><span class=\"n\">VaultBaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">vault_secret_path</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/secret\"</span><span class=\"p\">,</span> <span class=\"n\">vault_secret_key</span><span class=\"o\">=</span><span class=\"s2\">\"my_user\"</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">SecretStr</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">vault_secret_path</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/secret\"</span><span class=\"p\">,</span> <span class=\"n\">vault_secret_key</span><span class=\"o\">=</span><span class=\"s2\">\"my_password\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n        <span class=\"n\">vault_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://vault.tld\"</span>\n        <span class=\"n\">vault_token</span><span class=\"p\">:</span> <span class=\"n\">SecretStr</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"VAULT_TOKEN\"</span><span class=\"p\">]</span>\n        <span class=\"n\">vault_namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"your/namespace\"</span>  <span class=\"c1\"># Optional, pydantic-vault supports Vault namespaces (for Vault Enterprise)</span>\n        <span class=\"n\">vault_secret_mount_point</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"secrets\"</span>  <span class=\"c1\"># Optional, if your KV v2 secrets engine is not available at the default \"secret\" mount point</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"c1\"># These variables will come from the Vault secret you configured</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">username</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">get_secret_value</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Now let's pretend we have already set the USERNAME in an environment variable</span>\n<span class=\"c1\"># (see the Pydantic documentation for more information and to know how to configure it)</span>\n<span class=\"c1\"># Its value will override the Vault secret</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"USERNAME\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"my user\"</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">username</span>  <span class=\"c1\"># \"my user\", defined in the environment variable</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">get_secret_value</span><span class=\"p\">()</span>  <span class=\"c1\"># the value set in Vault</span>\n</pre>\n<h2>Documentation</h2>\n<h3><code>Field</code> additional parameters</h3>\n<p>You might have noticed that we import <code>Field</code> directly from Pydantic. Pydantic-Vault doesn't add any custom logic to it, which means you can still use everything you know and love from Pydantic.</p>\n<p>The additional parameters Pydantic-Vault uses are:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter name</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>vault_secret_path</code></td>\n<td><strong>Yes</strong></td>\n<td>The path to your secret in Vault</td>\n</tr>\n<tr>\n<td><code>vault_secret_key</code></td>\n<td><strong>Yes</strong></td>\n<td>The key to use in the secret</td>\n</tr></tbody></table>\n<p>For example, if you create a secret <code>database/prod</code> with a key <code>password</code> and a value of <code>a secret password</code>, you would use</p>\n<pre><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">SecretStr</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">vault_secret_path</span><span class=\"o\">=</span><span class=\"s2\">\"database/prod\"</span><span class=\"p\">,</span> <span class=\"n\">vault_secret_key</span><span class=\"o\">=</span><span class=\"s2\">\"password\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Authentication</h3>\n<p>For now Pydantic-Vault only supports direct token authentication, that is you must authenticate using your method of choice then pass the resulting Vault token to your <code>Settings</code> class.</p>\n<p>Support is planned for Approle and Kubernetes authentication methods.</p>\n<h3>Configuration</h3>\n<p>In your <code>Settings.Config</code> class you can configure the following elements:</p>\n<table>\n<thead>\n<tr>\n<th>Settings name</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>vault_url</code></td>\n<td><strong>Yes</strong></td>\n<td>Your Vault URL</td>\n</tr>\n<tr>\n<td><code>vault_token</code></td>\n<td><strong>Yes</strong></td>\n<td>A token allowing to connect to Vault (retrieve it with any auth method you want)</td>\n</tr>\n<tr>\n<td><code>vault_namespace</code></td>\n<td>No</td>\n<td>Your Vault namespace (if you use one, requires Vault Enterprise)</td>\n</tr>\n<tr>\n<td><code>vault_secret_mount_point</code></td>\n<td>No</td>\n<td>The mount point of the KV v2 secrets engine, if different from the default <code>\"secret\"</code> mount point</td>\n</tr></tbody></table>\n<p>You can also configure everything available in the original Pydantic <code>BaseSettings</code> class.</p>\n<h3>Order of priority</h3>\n<p>Settings values are determined as follows (in descending order of priority):</p>\n<ul>\n<li>arguments passed to the <code>Settings</code> class initializer</li>\n<li>environment variables</li>\n<li>Vault variables</li>\n<li>the default field values for the <code>Settings</code> model</li>\n</ul>\n<p>It's the <a href=\"https://pydantic-docs.helpmanual.io/usage/settings/#field-value-priority\" rel=\"nofollow\">same order</a> as with the original <code>BaseSettings</code>, but with Vault just before the default values.</p>\n<h2>License</h2>\n<p>Pydantic-Vault is available under the <a href=\"./LICENSE\" rel=\"nofollow\">MIT license</a>.</p>\n\n          </div>"}, "last_serial": 6857105, "releases": {"0.1.0a0": [{"comment_text": "", "digests": {"md5": "e306ae4c27f752ed5832f9ab62bea77b", "sha256": "03599ceae1d22dfd1d8fc4a1679aaa725760e931982450f400ed10e3216b7c5b"}, "downloads": -1, "filename": "pydantic_vault-0.1.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "e306ae4c27f752ed5832f9ab62bea77b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5145, "upload_time": "2020-03-21T20:37:26", "upload_time_iso_8601": "2020-03-21T20:37:26.992390Z", "url": "https://files.pythonhosted.org/packages/c0/8e/852ce4997c10414b8255f159a5be283bcc62819701559bbf6bef7b636042/pydantic_vault-0.1.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e580e8250058d8be68f90e36016fa97", "sha256": "fe6a05aaf43010e425d2fab5ee0b06ecdb85361332abe18627fb079a6707544c"}, "downloads": -1, "filename": "pydantic-vault-0.1.0a0.tar.gz", "has_sig": false, "md5_digest": "7e580e8250058d8be68f90e36016fa97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5031, "upload_time": "2020-03-21T20:37:24", "upload_time_iso_8601": "2020-03-21T20:37:24.930049Z", "url": "https://files.pythonhosted.org/packages/b2/3a/0ab0b929c150a06d554593305a0aba1ef47bb174514bd87955bdcc57d26b/pydantic-vault-0.1.0a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e306ae4c27f752ed5832f9ab62bea77b", "sha256": "03599ceae1d22dfd1d8fc4a1679aaa725760e931982450f400ed10e3216b7c5b"}, "downloads": -1, "filename": "pydantic_vault-0.1.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "e306ae4c27f752ed5832f9ab62bea77b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5145, "upload_time": "2020-03-21T20:37:26", "upload_time_iso_8601": "2020-03-21T20:37:26.992390Z", "url": "https://files.pythonhosted.org/packages/c0/8e/852ce4997c10414b8255f159a5be283bcc62819701559bbf6bef7b636042/pydantic_vault-0.1.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e580e8250058d8be68f90e36016fa97", "sha256": "fe6a05aaf43010e425d2fab5ee0b06ecdb85361332abe18627fb079a6707544c"}, "downloads": -1, "filename": "pydantic-vault-0.1.0a0.tar.gz", "has_sig": false, "md5_digest": "7e580e8250058d8be68f90e36016fa97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5031, "upload_time": "2020-03-21T20:37:24", "upload_time_iso_8601": "2020-03-21T20:37:24.930049Z", "url": "https://files.pythonhosted.org/packages/b2/3a/0ab0b929c150a06d554593305a0aba1ef47bb174514bd87955bdcc57d26b/pydantic-vault-0.1.0a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:27 2020"}