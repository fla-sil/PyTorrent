{"info": {"author": "DomainTools", "author_email": "timothy@domaintools.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "|domaintools|\n=============\n\n|PyPI version| |Build Status| |Coverage Status| |License|\n\nDomainTools' Official Python API\n\n.. figure:: https://github.com/DomainTools/python_api/raw/master/artwork/example.gif\n   :alt: domaintools Example\n\n   domaintools Example\n\nInstalling the DomainTools' API\n===============================\n\nTo install the API run\n\n.. code:: bash\n\n    pip install domaintools_api --upgrade\n\nIdeally, within a virtual environment.\n\nUsing the API\n=============\n\nTo start out create an instance of the API - passing in your credentials\n\n.. code:: python\n\n\n    from domaintools import API\n\n\n    api = API(USER_NAME, KEY)\n\nEvery API endpoint is then exposed as a method on the API object, with\nany parameters that should be passed into that endpoint being passed in\nas method arguments:\n\n.. code:: python\n\n    api.domain_search('google', exclude='photos')\n\nYou can get an overview of every endpoint that you can interact with\nusing the builtin help function:\n\n.. code:: python\n\n    help(api)\n\nIf applicable, native Python looping can be used directly to loop\nthrough any results:\n\n.. code:: python\n\n    for result in api.domain_search('google', exclude='photos'):\n        print(result['sld'])\n\nYou can also use a context manager to ensure processing on the results\nonly occurs if the request is successfully made:\n\n.. code:: python\n\n    with api.domain_search('google', exclude='photos') as results:\n        print(results)\n\nFor API calls where a single item is expected to be returned, you can\ndirectly interact with the result:\n\n.. code:: python\n\n    profile = api.domain_profile('google.com')\n    title = profile['website_data']['title']\n\nFor any API call where a single type of data is expected you can\ndirectly cast to the desired type:\n\n.. code:: python\n\n    float(api.reputation('google.com')) == 0.0\n    int(api.reputation('google.com')) == 0\n\nThe entire structure returned from DomainTools can be retrieved by doing\n``.data()`` while just the actionable response information can be\nretrieved by doing ``.response()``:\n\n.. code:: python\n\n    api.domain_search('google').data() == {'response': { ... }}\n    api.domain_search('google').response() == { ... }\n\nYou can directly get the html, xml, or json version of the response by\ncalling ``.(html|xml|json)()``:\n\n.. code:: python\n\n    html = str(api.domain_search('google').json())\n    xml = str(api.domain_search('google').xml())\n    html = str(api.domain_search('google').html())\n\nIf any API call is unsuccesfull, one of the exceptions defined in\n``domaintools.exceptions`` will be raised:\n\n.. code:: python\n\n    api.domain_profile('notvalid').data()\n\n\n    ---------------------------------------------------------------------------\n    BadRequestException                       Traceback (most recent call last)\n    <ipython-input-3-f9e22e2cf09d> in <module>()\n    ----> 1 api.domain_profile('google').data()\n\n    /home/tcrosley/projects/external/python_api/venv/lib/python3.5/site-packages/domaintools-0.0.1-py3.5.egg/domaintools/base_results.py in data(self)\n         25                 self.api._request_session = Session()\n         26             results = self.api._request_session.get(self.url, params=self.kwargs)\n    ---> 27             self.status = results.status_code\n         28             if self.kwargs.get('format', 'json') == 'json':\n         29                 self._data = results.json()\n\n    /home/tcrosley/projects/external/python_api/venv/lib/python3.5/site-packages/domaintools-0.0.1-py3.5.egg/domaintools/base_results.py in status(self, code)\n         44\n         45         elif code == 400:\n    ---> 46             raise BadRequestException()\n         47         elif code == 403:\n         48             raise NotAuthorizedException()\n\n    BadRequestException:\n\nthe exception will contain the status code and the reason for the\nexception:\n\n.. code:: python\n\n    try:\n        api.domain_profile('notvalid').data()\n    except Exception as e:\n        assert e.code == 400\n        assert 'We could not understand your request' in e.reason['error']['message']\n\nYou can get the status code of a response outside of exception handling\nby doing ``.status``:\n\n.. code:: python\n\n\n    api.domain_profile('google.com').status == 200\n\nUsing the API Asynchronously\n============================\n\n.. figure:: https://github.com/DomainTools/python_api/raw/master/artwork/example_async.gif\n   :alt: domaintools Async Example\n\n   domaintools Async Example\n\nIf you are running on Python 3.5+ the DomainTools' API automatically\nsupports async usage:\n\n.. code:: python\n\n\n    search_results = await api.domain_search('google')\n\nThere is built-in support for async context managers:\n\n.. code:: python\n\n    async with api.domain_search('google') as search_results:\n        # do things\n\nAnd direct async for loops:\n\n.. code:: python\n\n    async for result in api.domain_search('google'):\n        print(result)\n\nAll async operations can safely be intermixed with non async ones - with\noptimal performance achieved if the async call is done first:\n\n.. code:: python\n\n    profile = api.domain_profile('google.com')\n    await profile\n    title = profile['website_data']['title']\n\nInteracting with the API via the command line client\n====================================================\n\n.. figure:: https://github.com/DomainTools/python_api/raw/master/artwork/example_cli.gif\n   :alt: domaintools CLI Example\n\n   domaintools CLI Example\n\nImmediately after installing ``domaintools_api`` with pip, a\n``domaintools`` command line client will become available to you:\n\n.. code:: bash\n\n    domaintools --help\n\nTo use - simply pass in the api\\_call you would like to make along with\nthe parameters that it takes and your credentials:\n\n.. code:: bash\n\n    domaintools domain_search google --max_length 10 -u $TEST_USER -k $TEST_KEY\n\nOptionally, you can specify the desired format (html, xml, json, or\nlist) of the results:\n\n.. code:: bash\n\n    domaintools domain_search google --max_length 10 -u $TEST_USER -k $TEST_KEY -f html\n\nTo avoid having to type in your API key repeatedly, you can specify them\nin ``~/.dtapi`` separated by a new line:\n\n.. code:: bash\n\n    API_USER\n    API_KEY\n\n.. |domaintools| image:: https://github.com/DomainTools/python_api/raw/master/artwork/logo.png\n.. |PyPI version| image:: https://badge.fury.io/py/domaintools_api.svg\n   :target: http://badge.fury.io/py/domaintools_api\n.. |Build Status| image:: https://travis-ci.org/DomainTools/python_api.svg?branch=master\n   :target: https://travis-ci.org/DomainTools/python_api\n.. |Coverage Status| image:: https://coveralls.io/repos/github/DomainTools/python_api/badge.svg?branch=master\n   :target: https://coveralls.io/github/DomainTools/python_api?branch=master\n.. |License| image:: https://img.shields.io/github/license/mashape/apistatus.svg\n   :target: https://pypi.python.org/pypi/domaintools_api/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/domaintools/python_api", "keywords": "Python", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "domaintools_api", "package_url": "https://pypi.org/project/domaintools_api/", "platform": "", "project_url": "https://pypi.org/project/domaintools_api/", "project_urls": {"Homepage": "https://github.com/domaintools/python_api"}, "release_url": "https://pypi.org/project/domaintools_api/0.3.3/", "requires_dist": null, "requires_python": "", "summary": "DomainTools' Official Python API", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"domaintools\">\n<h2><img alt=\"domaintools\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76c03ec2db0014af1e8dea4894c90f10b11c4525/68747470733a2f2f6769746875622e636f6d2f446f6d61696e546f6f6c732f707974686f6e5f6170692f7261772f6d61737465722f617274776f726b2f6c6f676f2e706e67\"></h2>\n<p><a href=\"http://badge.fury.io/py/domaintools_api\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2374962ddf4e8cd5ce6933d01403c2db76d3493a/68747470733a2f2f62616467652e667572792e696f2f70792f646f6d61696e746f6f6c735f6170692e737667\"></a> <a href=\"https://travis-ci.org/DomainTools/python_api\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7179db7a91ddaa1e2e479ec76eabe5fc3266e4b8/68747470733a2f2f7472617669732d63692e6f72672f446f6d61696e546f6f6c732f707974686f6e5f6170692e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/DomainTools/python_api?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/faacc6a1e09659df746f9bf4313aff5a2399da0e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f446f6d61696e546f6f6c732f707974686f6e5f6170692f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/domaintools_api/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a></p>\n<p>DomainTools\u2019 Official Python API</p>\n<div>\n<img alt=\"domaintools Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57f097e2f1e3639973ce58389a35941e961e02f9/68747470733a2f2f6769746875622e636f6d2f446f6d61696e546f6f6c732f707974686f6e5f6170692f7261772f6d61737465722f617274776f726b2f6578616d706c652e676966\">\n<p>domaintools Example</p>\n</div>\n</div>\n<div id=\"installing-the-domaintools-api\">\n<h2>Installing the DomainTools\u2019 API</h2>\n<p>To install the API run</p>\n<pre>pip install domaintools_api --upgrade\n</pre>\n<p>Ideally, within a virtual environment.</p>\n</div>\n<div id=\"using-the-api\">\n<h2>Using the API</h2>\n<p>To start out create an instance of the API - passing in your credentials</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">domaintools</span> <span class=\"kn\">import</span> <span class=\"n\">API</span>\n\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">USER_NAME</span><span class=\"p\">,</span> <span class=\"n\">KEY</span><span class=\"p\">)</span>\n</pre>\n<p>Every API endpoint is then exposed as a method on the API object, with\nany parameters that should be passed into that endpoint being passed in\nas method arguments:</p>\n<pre><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"s1\">'photos'</span><span class=\"p\">)</span>\n</pre>\n<p>You can get an overview of every endpoint that you can interact with\nusing the builtin help function:</p>\n<pre><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"p\">)</span>\n</pre>\n<p>If applicable, native Python looping can be used directly to loop\nthrough any results:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"s1\">'photos'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'sld'</span><span class=\"p\">])</span>\n</pre>\n<p>You can also use a context manager to ensure processing on the results\nonly occurs if the request is successfully made:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"s1\">'photos'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</pre>\n<p>For API calls where a single item is expected to be returned, you can\ndirectly interact with the result:</p>\n<pre><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_profile</span><span class=\"p\">(</span><span class=\"s1\">'google.com'</span><span class=\"p\">)</span>\n<span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">[</span><span class=\"s1\">'website_data'</span><span class=\"p\">][</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n</pre>\n<p>For any API call where a single type of data is expected you can\ndirectly cast to the desired type:</p>\n<pre><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">reputation</span><span class=\"p\">(</span><span class=\"s1\">'google.com'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mf\">0.0</span>\n<span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">reputation</span><span class=\"p\">(</span><span class=\"s1\">'google.com'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre>\n<p>The entire structure returned from DomainTools can be retrieved by doing\n<tt>.data()</tt> while just the actionable response information can be\nretrieved by doing <tt>.response()</tt>:</p>\n<pre><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'response'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}}</span>\n<span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n</pre>\n<p>You can directly get the html, xml, or json version of the response by\ncalling <tt><span class=\"pre\">.(html|xml|json)()</span></tt>:</p>\n<pre><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">())</span>\n<span class=\"n\">xml</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">xml</span><span class=\"p\">())</span>\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">())</span>\n</pre>\n<p>If any API call is unsuccesfull, one of the exceptions defined in\n<tt>domaintools.exceptions</tt> will be raised:</p>\n<pre><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_profile</span><span class=\"p\">(</span><span class=\"s1\">'notvalid'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n\n\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"n\">BadRequestException</span>                       <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">f9e22e2cf09d</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_profile</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">tcrosley</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">external</span><span class=\"o\">/</span><span class=\"n\">python_api</span><span class=\"o\">/</span><span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">domaintools</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">py3</span><span class=\"o\">.</span><span class=\"mf\">5.</span><span class=\"n\">egg</span><span class=\"o\">/</span><span class=\"n\">domaintools</span><span class=\"o\">/</span><span class=\"n\">base_results</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n     <span class=\"mi\">25</span>                 <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">_request_session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n     <span class=\"mi\">26</span>             <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">_request_session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"o\">---&gt;</span> <span class=\"mi\">27</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n     <span class=\"mi\">28</span>             <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'format'</span><span class=\"p\">,</span> <span class=\"s1\">'json'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'json'</span><span class=\"p\">:</span>\n     <span class=\"mi\">29</span>                 <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">tcrosley</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">external</span><span class=\"o\">/</span><span class=\"n\">python_api</span><span class=\"o\">/</span><span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">domaintools</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">py3</span><span class=\"o\">.</span><span class=\"mf\">5.</span><span class=\"n\">egg</span><span class=\"o\">/</span><span class=\"n\">domaintools</span><span class=\"o\">/</span><span class=\"n\">base_results</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)</span>\n     <span class=\"mi\">44</span>\n     <span class=\"mi\">45</span>         <span class=\"k\">elif</span> <span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"mi\">400</span><span class=\"p\">:</span>\n<span class=\"o\">---&gt;</span> <span class=\"mi\">46</span>             <span class=\"k\">raise</span> <span class=\"n\">BadRequestException</span><span class=\"p\">()</span>\n     <span class=\"mi\">47</span>         <span class=\"k\">elif</span> <span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"mi\">403</span><span class=\"p\">:</span>\n     <span class=\"mi\">48</span>             <span class=\"k\">raise</span> <span class=\"n\">NotAuthorizedException</span><span class=\"p\">()</span>\n\n<span class=\"n\">BadRequestException</span><span class=\"p\">:</span>\n</pre>\n<p>the exception will contain the status code and the reason for the\nexception:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_profile</span><span class=\"p\">(</span><span class=\"s1\">'notvalid'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"mi\">400</span>\n    <span class=\"k\">assert</span> <span class=\"s1\">'We could not understand your request'</span> <span class=\"ow\">in</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">reason</span><span class=\"p\">[</span><span class=\"s1\">'error'</span><span class=\"p\">][</span><span class=\"s1\">'message'</span><span class=\"p\">]</span>\n</pre>\n<p>You can get the status code of a response outside of exception handling\nby doing <tt>.status</tt>:</p>\n<pre><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_profile</span><span class=\"p\">(</span><span class=\"s1\">'google.com'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n</pre>\n</div>\n<div id=\"using-the-api-asynchronously\">\n<h2>Using the API Asynchronously</h2>\n<div>\n<img alt=\"domaintools Async Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/785294265d8c33470b4f5f6924f064901327226a/68747470733a2f2f6769746875622e636f6d2f446f6d61696e546f6f6c732f707974686f6e5f6170692f7261772f6d61737465722f617274776f726b2f6578616d706c655f6173796e632e676966\">\n<p>domaintools Async Example</p>\n</div>\n<p>If you are running on Python 3.5+ the DomainTools\u2019 API automatically\nsupports async usage:</p>\n<pre><span class=\"n\">search_results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span>\n</pre>\n<p>There is built-in support for async context managers:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">search_results</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do things</span>\n</pre>\n<p>And direct async for loops:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_search</span><span class=\"p\">(</span><span class=\"s1\">'google'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>All async operations can safely be intermixed with non async ones - with\noptimal performance achieved if the async call is done first:</p>\n<pre><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">domain_profile</span><span class=\"p\">(</span><span class=\"s1\">'google.com'</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">profile</span>\n<span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">[</span><span class=\"s1\">'website_data'</span><span class=\"p\">][</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"interacting-with-the-api-via-the-command-line-client\">\n<h2>Interacting with the API via the command line client</h2>\n<div>\n<img alt=\"domaintools CLI Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e427460823b4595356d474b07950bc78482b7449/68747470733a2f2f6769746875622e636f6d2f446f6d61696e546f6f6c732f707974686f6e5f6170692f7261772f6d61737465722f617274776f726b2f6578616d706c655f636c692e676966\">\n<p>domaintools CLI Example</p>\n</div>\n<p>Immediately after installing <tt>domaintools_api</tt> with pip, a\n<tt>domaintools</tt> command line client will become available to you:</p>\n<pre>domaintools --help\n</pre>\n<p>To use - simply pass in the api_call you would like to make along with\nthe parameters that it takes and your credentials:</p>\n<pre>domaintools domain_search google --max_length <span class=\"m\">10</span> -u <span class=\"nv\">$TEST_USER</span> -k <span class=\"nv\">$TEST_KEY</span>\n</pre>\n<p>Optionally, you can specify the desired format (html, xml, json, or\nlist) of the results:</p>\n<pre>domaintools domain_search google --max_length <span class=\"m\">10</span> -u <span class=\"nv\">$TEST_USER</span> -k <span class=\"nv\">$TEST_KEY</span> -f html\n</pre>\n<p>To avoid having to type in your API key repeatedly, you can specify them\nin <tt><span class=\"pre\">~/.dtapi</span></tt> separated by a new line:</p>\n<pre>API_USER\nAPI_KEY\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6885261, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bd9ed6c6ec48fa8acaf8729acdcb3b97", "sha256": "fd2a06d7ed77e724d6ccf51a2936cb40d32dee6c2d6fed7e0b6a814412978178"}, "downloads": -1, "filename": "domaintools_api-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bd9ed6c6ec48fa8acaf8729acdcb3b97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9570, "upload_time": "2016-10-14T22:44:16", "upload_time_iso_8601": "2016-10-14T22:44:16.253326Z", "url": "https://files.pythonhosted.org/packages/87/4e/eae1195ede3d6b534df3731e6398ecf44963b8aba88ba7342f6625400ced/domaintools_api-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d783d85bf7ea68a08131001bb592fec3", "sha256": "574b59bdc10d0fa8a31473eaa99009ac59ecfc41811018923b43c313071a33ab"}, "downloads": -1, "filename": "domaintools_api-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d783d85bf7ea68a08131001bb592fec3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11918, "upload_time": "2016-10-18T00:11:57", "upload_time_iso_8601": "2016-10-18T00:11:57.241108Z", "url": "https://files.pythonhosted.org/packages/37/ff/4b7d03e3558c4cef285719fb1972a7bbdc9e208001d9b967f874997b5282/domaintools_api-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "70f78a952bb94b090358a8fc3b54c153", "sha256": "fe7395b15c3bf2c054656199dec09a0614dfc0185f7909a6dbdca4787c53b029"}, "downloads": -1, "filename": "domaintools_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "70f78a952bb94b090358a8fc3b54c153", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11929, "upload_time": "2016-10-18T00:48:24", "upload_time_iso_8601": "2016-10-18T00:48:24.583301Z", "url": "https://files.pythonhosted.org/packages/de/e9/7c01b8769d378f479ce4ede0eb16134dcf941c4b1c265bc16c93e6b3c57e/domaintools_api-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9ebec3d1d0654605b4d5f2e6bb12c69a", "sha256": "f29cc744e6175b710ecc7ddec22ff314628b4114755ae16d97e9c4fc60f0387d"}, "downloads": -1, "filename": "domaintools_api-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9ebec3d1d0654605b4d5f2e6bb12c69a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12325, "upload_time": "2016-11-08T23:02:17", "upload_time_iso_8601": "2016-11-08T23:02:17.389222Z", "url": "https://files.pythonhosted.org/packages/7c/d6/f11bc80adc4b0fe134f4cd5dd69baedc32c50a5111aec15d2fb564e96a25/domaintools_api-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bd4743adf7c78a5caf0379ba785e62ef", "sha256": "83dc8e0adcd4ad67a0e2d97acc5383a99c589e222c4fb2b4db859730361d73c1"}, "downloads": -1, "filename": "domaintools_api-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bd4743adf7c78a5caf0379ba785e62ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12347, "upload_time": "2016-11-09T23:22:36", "upload_time_iso_8601": "2016-11-09T23:22:36.007516Z", "url": "https://files.pythonhosted.org/packages/40/5e/eb91e6a22b8639733b376d8f374933e349cf397edbafb5681df567974396/domaintools_api-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3b9d62fb31cff728c08ba9fd88d445ee", "sha256": "33945c0d3885b17ddc096afd14b3e8cd041ca7da4773c527ead0aadb9784fc84"}, "downloads": -1, "filename": "domaintools_api-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3b9d62fb31cff728c08ba9fd88d445ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12412, "upload_time": "2016-11-21T22:12:14", "upload_time_iso_8601": "2016-11-21T22:12:14.135006Z", "url": "https://files.pythonhosted.org/packages/30/75/773b76d564e87fd36341398aa34078a4b1cdaec53f2e2460df0fea92bdf0/domaintools_api-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "7e4c256c475ecd4a607fb4fdc9bde283", "sha256": "b9ff221fab47a433251eb44745d7dcf8437de4f83703aab9c127e26c25ebb05a"}, "downloads": -1, "filename": "domaintools_api-0.1.5.tar.gz", "has_sig": false, "md5_digest": "7e4c256c475ecd4a607fb4fdc9bde283", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12421, "upload_time": "2016-11-28T22:24:10", "upload_time_iso_8601": "2016-11-28T22:24:10.877284Z", "url": "https://files.pythonhosted.org/packages/13/87/53dc00eff4a0c0c291b378704870f42793517897277725affd74ceaefb6d/domaintools_api-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "61723c1430a2343d1359fc2b88ae84ad", "sha256": "d328ac20d1915cee1c2dccd6e834d131cfc0f2ffa7065ac54fb0f9c768c68502"}, "downloads": -1, "filename": "domaintools_api-0.1.6.tar.gz", "has_sig": false, "md5_digest": "61723c1430a2343d1359fc2b88ae84ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12619, "upload_time": "2017-02-03T23:42:59", "upload_time_iso_8601": "2017-02-03T23:42:59.026686Z", "url": "https://files.pythonhosted.org/packages/7a/06/504c6994dd3384566d8e3d7f731b66adc4dec00721a23c157f3a305c2c31/domaintools_api-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "10aa6561e20e96f4e416e9c4aa976054", "sha256": "69dff00c3c5db8383b5d6a46c05764fd2735d6e3c1dd6d2a20a000c12c235458"}, "downloads": -1, "filename": "domaintools_api-0.1.7.tar.gz", "has_sig": false, "md5_digest": "10aa6561e20e96f4e416e9c4aa976054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12624, "upload_time": "2017-05-08T17:33:40", "upload_time_iso_8601": "2017-05-08T17:33:40.409171Z", "url": "https://files.pythonhosted.org/packages/64/d0/bb1198a5cb7dc0f11fbcde2a5ce7a18b1326b91d915bf0817d7db7cfc433/domaintools_api-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "75523bd1a06c51b46a6f2909a4e089d3", "sha256": "057985089cc96d02bc1a4fa596fae92c35e20786c441a3ff4bd00710aa311fa7"}, "downloads": -1, "filename": "domaintools_api-0.1.8.tar.gz", "has_sig": false, "md5_digest": "75523bd1a06c51b46a6f2909a4e089d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12618, "upload_time": "2017-08-08T20:25:10", "upload_time_iso_8601": "2017-08-08T20:25:10.350096Z", "url": "https://files.pythonhosted.org/packages/c2/17/3fe68271738a33ae6b72681d350ce453fb23bf5b263eb0fa4c161f30f2e6/domaintools_api-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "2d452f2dcc3b9e0491129cb2c05afe9a", "sha256": "85e15ac5f605bd4bb0cb534933c7d0df9ab8013386cddb914fb2f131ff32b7f5"}, "downloads": -1, "filename": "domaintools_api-0.1.9.tar.gz", "has_sig": false, "md5_digest": "2d452f2dcc3b9e0491129cb2c05afe9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12712, "upload_time": "2017-08-16T16:32:26", "upload_time_iso_8601": "2017-08-16T16:32:26.265288Z", "url": "https://files.pythonhosted.org/packages/fd/ef/7c9acaa9066be02cf6923410eb12393b06541e0ea41855b9bae61f88f222/domaintools_api-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9d40a4b96a6513b97d4a4f340ca37f3d", "sha256": "377ff792588049d2f573dae7e05d17dda9983e902fe2481c54ba2e547c7b22ea"}, "downloads": -1, "filename": "domaintools_api-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9d40a4b96a6513b97d4a4f340ca37f3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12714, "upload_time": "2017-09-26T23:48:05", "upload_time_iso_8601": "2017-09-26T23:48:05.071817Z", "url": "https://files.pythonhosted.org/packages/ce/a4/7c3d82f6617290eca2aa0b4941ef1f175de3f8043abd166f64d70e5bdb26/domaintools_api-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1abc997a6d32949ae4fcb3e66a2addbf", "sha256": "2551f39a411cab066f9d61f83a79135abcd324b51f31e43f7b55daf450a0e5c5"}, "downloads": -1, "filename": "domaintools_api-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1abc997a6d32949ae4fcb3e66a2addbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12613, "upload_time": "2018-03-15T20:10:04", "upload_time_iso_8601": "2018-03-15T20:10:04.733743Z", "url": "https://files.pythonhosted.org/packages/eb/6e/3497984dc78602168042753dcc899f35e4faf8401a83d22982a5d087dfd7/domaintools_api-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "43e731337dd5790b5154e34e8ee13d2e", "sha256": "7747bc1e9fe2b0f3082d75210b076e9909af2f20477bbef1b9da3b7238b73420"}, "downloads": -1, "filename": "domaintools_api-0.2.2.tar.gz", "has_sig": false, "md5_digest": "43e731337dd5790b5154e34e8ee13d2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12729, "upload_time": "2018-03-27T18:07:32", "upload_time_iso_8601": "2018-03-27T18:07:32.755231Z", "url": "https://files.pythonhosted.org/packages/4e/dd/76062085b6c60fe507c0ba8a01386fae43bf24046b921b6f1b0fa07084d2/domaintools_api-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "729a74dad2cc2f0ea63ff5b6d5fc7bc0", "sha256": "4328d896d389757374ea8783d39641316a1af95e60bcf49dc59f90926ae236ad"}, "downloads": -1, "filename": "domaintools_api-0.2.3.tar.gz", "has_sig": false, "md5_digest": "729a74dad2cc2f0ea63ff5b6d5fc7bc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15666, "upload_time": "2018-07-27T19:59:17", "upload_time_iso_8601": "2018-07-27T19:59:17.587201Z", "url": "https://files.pythonhosted.org/packages/39/3e/738774da3cb56debff9d95197113fd9366397b282dca7ac5a23d34dc104c/domaintools_api-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "d8724edc7466b25f1bc39499e8462cfe", "sha256": "2cc10501ba149d721c05397ce8089e9c1045237d3adaf399b13b504328353107"}, "downloads": -1, "filename": "domaintools_api-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d8724edc7466b25f1bc39499e8462cfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15699, "upload_time": "2018-09-13T00:13:02", "upload_time_iso_8601": "2018-09-13T00:13:02.148405Z", "url": "https://files.pythonhosted.org/packages/7b/46/bbeec58c5163924a971db28f057e618c767e1771c2ac9ade9cadc5174491/domaintools_api-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "13721237853f61822c33f9a2d644e7de", "sha256": "4537a84be90f8f695f2758fb485122f58343449f573e5485f3d0879596dc7693"}, "downloads": -1, "filename": "domaintools_api-0.3.0.tar.gz", "has_sig": false, "md5_digest": "13721237853f61822c33f9a2d644e7de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15738, "upload_time": "2018-10-22T22:56:07", "upload_time_iso_8601": "2018-10-22T22:56:07.620644Z", "url": "https://files.pythonhosted.org/packages/2a/6d/cf6bcb7123b3a6f89566ef59c992eff7f0014eb73c349810039ad408079f/domaintools_api-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "13874bf0cc29ad71cf263e10d3fa9455", "sha256": "77bee42cc11033c8eb01de725bc29545a699a6224edb4bbe5ae47133b2c8b56a"}, "downloads": -1, "filename": "domaintools_api-0.3.1.tar.gz", "has_sig": false, "md5_digest": "13874bf0cc29ad71cf263e10d3fa9455", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15788, "upload_time": "2018-10-24T15:26:42", "upload_time_iso_8601": "2018-10-24T15:26:42.202087Z", "url": "https://files.pythonhosted.org/packages/fa/c3/f23df6d8acae43b4f01ac0e5b83eafb604cbcab43886eb76dabffe1c6a88/domaintools_api-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "40f0e3c98d3f9ca653ec61d3779ca498", "sha256": "dfb02e58f0a6ce1d8be63d5bb13853565c0c55138fbed5ffe6744752346dd2f3"}, "downloads": -1, "filename": "domaintools_api-0.3.2.tar.gz", "has_sig": false, "md5_digest": "40f0e3c98d3f9ca653ec61d3779ca498", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15794, "upload_time": "2018-12-13T23:23:27", "upload_time_iso_8601": "2018-12-13T23:23:27.250008Z", "url": "https://files.pythonhosted.org/packages/12/be/2c6c7c9259465de7d6fa7ea60b555c5f0ba00c95a01896ddf8dd05517d27/domaintools_api-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "f1e5a929865b4480523a040b38d8f87d", "sha256": "f567f407b8997e947df5badf7c2bea64fdfd33c54ade24eab36ef575fb71ccb7"}, "downloads": -1, "filename": "domaintools_api-0.3.3.tar.gz", "has_sig": false, "md5_digest": "f1e5a929865b4480523a040b38d8f87d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15770, "upload_time": "2018-12-13T23:34:01", "upload_time_iso_8601": "2018-12-13T23:34:01.286853Z", "url": "https://files.pythonhosted.org/packages/34/9f/2876b2080b2f9e4d550a7c41f24e7db9dba6047856f9243442fca109ba53/domaintools_api-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f1e5a929865b4480523a040b38d8f87d", "sha256": "f567f407b8997e947df5badf7c2bea64fdfd33c54ade24eab36ef575fb71ccb7"}, "downloads": -1, "filename": "domaintools_api-0.3.3.tar.gz", "has_sig": false, "md5_digest": "f1e5a929865b4480523a040b38d8f87d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15770, "upload_time": "2018-12-13T23:34:01", "upload_time_iso_8601": "2018-12-13T23:34:01.286853Z", "url": "https://files.pythonhosted.org/packages/34/9f/2876b2080b2f9e4d550a7c41f24e7db9dba6047856f9243442fca109ba53/domaintools_api-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:26 2020"}