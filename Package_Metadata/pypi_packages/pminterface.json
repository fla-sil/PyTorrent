{"info": {"author": "Daniel Foote", "author_email": "freefoote@paasmaker.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Paasmaker Python Interface Library\n==================================\n\nThis is a simple Python library that is designed to read in the Paasmaker\nconfiguration of the container, falling back to a custom configuration\nfile in development.\n\nYou can read more about the Paasmaker PaaS at\n`http://paasmaker.org/ <http://paasmaker.org/>`_.\n\nUsage\n-----\n\nIn the startup of your application create an interface object. Supply the\nconstructor with a list of locations to look for override configuration\nfiles for development. You won't need override configuration files if you\nare using the development directory SCM in Paasmaker.\n\n.. code-block:: python\n\n\timport pminterface\n\n\tinterface = pminterface.PaasmakerInterface(['../my-project.yml'])\n\n\tinterface.is_on_paasmaker() # Returns true if on Paasmaker.\n\n\t# Raises NameError if no such service exists.\n\tservice = interface.get_service('named-service')\n\t# service now is a dict of the parameters. Typically this will\n\t# have the keys 'hostname', 'username', 'password', etc. Use this\n\t# to connect to revelant services.\n\n\t# Get other application metadata.\n\tapplication = interface.get_application_name()\n\nOverride configuration files can be in either YAML or JSON format. If using\nthe YAML format, be sure to install ``pyyaml`` first. If ``pyyaml`` isn't present,\nonly the JSON format is supported, and it will raise an exception when\ntrying to read YAML files.\n\nExample YAML configuration file:\n\n.. code-block:: yaml\n\n\tservices:\n\t  parameters:\n\t    foo: bar\n\n\tapplication:\n\t  name: test\n\t  version: 1\n\t  workspace: Test\n\t  workspace_stub: test\n\nExample JSON configuration file:\n\n.. code-block:: json\n\n\t{\n\t\t\"services\": {\n\t\t\t\"parameters\": {\n\t\t\t\t\"foo\": \"bar\"\n\t\t\t}\n\t\t},\n\t\t\"application\": {\n\t\t\t\"name\": \"test\",\n\t\t\t\"version\": 1,\n\t\t\t\"workspace\": \"Test\",\n\t\t\t\"workspace_stub\": \"test\"\n\t\t}\n\t}\n\nDevelopment\n-----------\n\nYou can run the unit tests with the ``test.py`` script in the\nroot directory.\n\nThe code is currently stored on BitBucket at:\n\ngit@bitbucket.org:paasmaker/paasmaker-interface-python.git\n\nFeel free to fork and submit pull requests.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://paasmaker.org", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pminterface", "package_url": "https://pypi.org/project/pminterface/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pminterface/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://paasmaker.org"}, "release_url": "https://pypi.org/project/pminterface/0.9/", "requires_dist": null, "requires_python": null, "summary": "Paasmaker Python interface library", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a simple Python library that is designed to read in the Paasmaker\nconfiguration of the container, falling back to a custom configuration\nfile in development.</p>\n<p>You can read more about the Paasmaker PaaS at\n<a href=\"http://paasmaker.org/\" rel=\"nofollow\">http://paasmaker.org/</a>.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In the startup of your application create an interface object. Supply the\nconstructor with a list of locations to look for override configuration\nfiles for development. You won\u2019t need override configuration files if you\nare using the development directory SCM in Paasmaker.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pminterface</span>\n\n<span class=\"n\">interface</span> <span class=\"o\">=</span> <span class=\"n\">pminterface</span><span class=\"o\">.</span><span class=\"n\">PaasmakerInterface</span><span class=\"p\">([</span><span class=\"s1\">'../my-project.yml'</span><span class=\"p\">])</span>\n\n<span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">is_on_paasmaker</span><span class=\"p\">()</span> <span class=\"c1\"># Returns true if on Paasmaker.</span>\n\n<span class=\"c1\"># Raises NameError if no such service exists.</span>\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">get_service</span><span class=\"p\">(</span><span class=\"s1\">'named-service'</span><span class=\"p\">)</span>\n<span class=\"c1\"># service now is a dict of the parameters. Typically this will</span>\n<span class=\"c1\"># have the keys 'hostname', 'username', 'password', etc. Use this</span>\n<span class=\"c1\"># to connect to revelant services.</span>\n\n<span class=\"c1\"># Get other application metadata.</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">get_application_name</span><span class=\"p\">()</span>\n</pre>\n<p>Override configuration files can be in either YAML or JSON format. If using\nthe YAML format, be sure to install <tt>pyyaml</tt> first. If <tt>pyyaml</tt> isn\u2019t present,\nonly the JSON format is supported, and it will raise an exception when\ntrying to read YAML files.</p>\n<p>Example YAML configuration file:</p>\n<pre><span class=\"nt\">services</span><span class=\"p\">:</span>\n  <span class=\"nt\">parameters</span><span class=\"p\">:</span>\n    <span class=\"nt\">foo</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">bar</span>\n\n<span class=\"nt\">application</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test</span>\n  <span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n  <span class=\"nt\">workspace</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Test</span>\n  <span class=\"nt\">workspace_stub</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test</span>\n</pre>\n<p>Example JSON configuration file:</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"nt\">\"services\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"parameters\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"nt\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"application\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"workspace\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"workspace_stub\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>You can run the unit tests with the <tt>test.py</tt> script in the\nroot directory.</p>\n<p>The code is currently stored on BitBucket at:</p>\n<p><a href=\"mailto:git%40bitbucket.org\">git<span>@</span>bitbucket<span>.</span>org</a>:paasmaker/paasmaker-interface-python.git</p>\n<p>Feel free to fork and submit pull requests.</p>\n</div>\n\n          </div>"}, "last_serial": 722960, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "36252bda30ef0719b31c940e2e5422ec", "sha256": "b96afa419c2bbb3d34d27754633121b3dc4cb2a0c0a51bc44f6d6d2c2c819582"}, "downloads": -1, "filename": "pminterface-0.9.tar.gz", "has_sig": false, "md5_digest": "36252bda30ef0719b31c940e2e5422ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4296, "upload_time": "2013-03-08T05:57:30", "upload_time_iso_8601": "2013-03-08T05:57:30.356799Z", "url": "https://files.pythonhosted.org/packages/0a/74/6e25e521cdfeb7ac79c59711fdfca677c0b890a73f1dc92deffeab52395c/pminterface-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36252bda30ef0719b31c940e2e5422ec", "sha256": "b96afa419c2bbb3d34d27754633121b3dc4cb2a0c0a51bc44f6d6d2c2c819582"}, "downloads": -1, "filename": "pminterface-0.9.tar.gz", "has_sig": false, "md5_digest": "36252bda30ef0719b31c940e2e5422ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4296, "upload_time": "2013-03-08T05:57:30", "upload_time_iso_8601": "2013-03-08T05:57:30.356799Z", "url": "https://files.pythonhosted.org/packages/0a/74/6e25e521cdfeb7ac79c59711fdfca677c0b890a73f1dc92deffeab52395c/pminterface-0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:17 2020"}