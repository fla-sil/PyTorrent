{"info": {"author": "Dan Stahlke", "author_email": "dstahlke@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics"], "description": "This module is essentially a wrapper for numpy that uses semantics useful for\nfinite dimensional quantum mechanics of many particles.  In particular, this\nshould be useful for the study of quantum information and quantum computing.\nEach array is associated with a tensor-product Hilbert space.  The underlying\nspaces can be bra spaces or ket spaces and are indexed using any finite\nsequence (typically a range of integers starting from zero, but any sequence is\nallowed).  When arrays are multiplied, a tensor contraction is performed among\nthe bra spaces of the left array and the ket spaces of the right array.\nVarious linear algebra methods are available which are aware of the Hilbert\nspace tensor product structure.\n\n* Component Hilbert spaces have string labels (e.g. ``qubit('a') * qubit('b')``\n  gives ``|a,b>``).\n* Component spaces are finite dimensional and are indexed either by integers or\n  by any sequence (e.g. elements of a group).\n* In Sage, it is possible to create arrays over the Symbolic Ring.\n* Multiplication of arrays automatically contracts over the intersection of the\n  bra space of the left factor and the ket space of the right factor.\n* Linear algebra routines such as SVD are provided which are aware of the\n  Hilbert space labels.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.stahlke.org/dan/qitensor", "keywords": "quantum,tensor,numpy,sage", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "qitensor", "package_url": "https://pypi.org/project/qitensor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/qitensor/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.stahlke.org/dan/qitensor"}, "release_url": "https://pypi.org/project/qitensor/0.11/", "requires_dist": null, "requires_python": null, "summary": "Quantum Hilbert Space Tensors in Python and Sage", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module is essentially a wrapper for numpy that uses semantics useful for\nfinite dimensional quantum mechanics of many particles.  In particular, this\nshould be useful for the study of quantum information and quantum computing.\nEach array is associated with a tensor-product Hilbert space.  The underlying\nspaces can be bra spaces or ket spaces and are indexed using any finite\nsequence (typically a range of integers starting from zero, but any sequence is\nallowed).  When arrays are multiplied, a tensor contraction is performed among\nthe bra spaces of the left array and the ket spaces of the right array.\nVarious linear algebra methods are available which are aware of the Hilbert\nspace tensor product structure.</p>\n<ul>\n<li>Component Hilbert spaces have string labels (e.g. <tt><span class=\"pre\">qubit('a')</span> * <span class=\"pre\">qubit('b')</span></tt>\ngives <tt>|a,b&gt;</tt>).</li>\n<li>Component spaces are finite dimensional and are indexed either by integers or\nby any sequence (e.g. elements of a group).</li>\n<li>In Sage, it is possible to create arrays over the Symbolic Ring.</li>\n<li>Multiplication of arrays automatically contracts over the intersection of the\nbra space of the left factor and the ket space of the right factor.</li>\n<li>Linear algebra routines such as SVD are provided which are aware of the\nHilbert space labels.</li>\n</ul>\n\n          </div>"}, "last_serial": 629726, "releases": {"0.10": [], "0.11": [], "0.4": [], "0.5": [], "0.5.1": [], "0.6": [], "0.7": [], "0.8": [], "0.9": []}, "urls": [], "timestamp": "Fri May  8 03:09:29 2020"}