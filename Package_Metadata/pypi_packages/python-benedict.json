{"info": {"author": "Fabio Caccamo", "author_email": "fabio.caccamo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "[![](https://img.shields.io/pypi/pyversions/python-benedict.svg?color=blue&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/v/python-benedict.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/python-benedict/)\n[![](https://pepy.tech/badge/python-benedict)](https://pepy.tech/project/python-benedict)\n[![](https://img.shields.io/github/stars/fabiocaccamo/python-benedict?logo=github)](https://github.com/fabiocaccamo/python-benedict/)\n[![](https://img.shields.io/pypi/l/python-benedict.svg?color=blue)](https://github.com/fabiocaccamo/python-benedict/blob/master/LICENSE.txt)\n\n[![](https://img.shields.io/travis/fabiocaccamo/python-benedict?logo=travis&label=build)](https://travis-ci.org/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/circleci/build/gh/fabiocaccamo/python-benedict?logo=circleci&label=build)](https://circleci.com/gh/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/python-benedict?logo=codecov)](https://codecov.io/gh/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/codacy/grade/0dbd5cc2089f4dce80a0e49e6822be3c?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/python-benedict)\n[![](https://img.shields.io/scrutinizer/quality/g/fabiocaccamo/python-benedict?logo=scrutinizer)](https://scrutinizer-ci.com/g/fabiocaccamo/python-benedict/?branch=master)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/python-benedict?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/python-benedict/)\n[![](https://requires.io/github/fabiocaccamo/python-benedict/requirements.svg?branch=master)](https://requires.io/github/fabiocaccamo/python-benedict/requirements/?branch=master)\n\n# python-benedict\npython-benedict is a dict subclass with **keylist/keypath** support, **I/O** shortcuts (`Base64`, `CSV`, `JSON`, `TOML`, `XML`, `YAML`, `pickle`, `query-string`) and many **utilities**... for humans, obviously.\n\n## Features\n-   100% **backward-compatible**, you can safely wrap existing dictionaries.\n-   **Keylist** support using **list of keys** as key.\n-   **Keypath** support using **keypath-separator** *(dot syntax by default)*.\n-   Keypath **list-index** support  *(also negative)* using the standard `[n]` suffix.\n-   Easy **I/O operations** with most common formats: `Base64`, `CSV`, `JSON`, `TOML`, `XML`, `YAML`, `pickle`, `query-string`.\n-   Many **utility** and **parse methods** to retrieve data as needed *(check the [API](#api) section)*.\n-   Well **tested**. ;)\n\n## Index\n-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [Basics](#basics)\n    -   [Keylist](#keylist)\n    -   [Keypath](#keypath)\n        -   [Custom keypath separator](#custom-keypath-separator)\n        -   [Change keypath separator](#change-keypath-separator)\n        -   [Disable keypath functionality](#disable-keypath-functionality)\n        -   [List index support](#list-index-support)\n    -   [API](#api)\n        -   [Utility methods](#utility-methods)\n        -   [I/O methods](#io-methods)\n        -   [Parse methods](#parse-methods)\n-   [Testing](#testing)\n-   [License](#license)\n\n## Installation\n-   Run `pip install python-benedict`\n\n## Usage\n\n### Basics\n`benedict` is a `dict` subclass, so it is possible to use it as a normal dictionary *(you can just cast an existing dict)*.\n\n```python\nfrom benedict import benedict\n\n# create a new empty instance\nd = benedict()\n\n# or cast an existing dict\nd = benedict(existing_dict)\n\n# or create from data source (filepath, url or data-string) in a supported format:\n# Base64, CSV, JSON, TOML, XML, YAML, query-string\nd = benedict('https://localhost:8000/data.json', format='json')\n\n# or in a Django view\nparams = benedict(request.GET.items())\npage = params.get_int('page', 1)\n```\n\n### Keylist\nWherever a **key** is used, it is possible to use also a **list (or a tuple) of keys**.\n\n```python\nd = benedict()\n\n# set values by keys list\nd['profile', 'firstname'] = 'Fabio'\nd['profile', 'lastname'] = 'Caccamo'\nprint(d) #\u00a0-> { 'profile':{ 'firstname':'Fabio', 'lastname':'Caccamo' } }\nprint(d['profile']) # -> { 'firstname':'Fabio', 'lastname':'Caccamo' }\n\n# check if keypath exists in dict\nprint(['profile', 'lastname'] in d) # -> True\n\n# delete value by keys list\ndel d['profile', 'lastname']\nprint(d['profile']) # -> { 'firstname':'Fabio' }\n```\n\n### Keypath\n`.` is the default keypath separator.\n\nIf you cast an existing dict and its keys contain the keypath separator a `ValueError` will be raised.\n\nIn this case you should use a [custom keypath separator](#custom-keypath-separator) or [disable keypath functionality](#disable-keypath-functionality).\n\n```python\nd = benedict()\n\n# set values by keypath\nd['profile.firstname'] = 'Fabio'\nd['profile.lastname'] = 'Caccamo'\nprint(d) #\u00a0-> { 'profile':{ 'firstname':'Fabio', 'lastname':'Caccamo' } }\nprint(d['profile']) # -> { 'firstname':'Fabio', 'lastname':'Caccamo' }\n\n# check if keypath exists in dict\nprint('profile.lastname' in d) # -> True\n\n# delete value by keypath\ndel d['profile.lastname']\n```\n\n#### Custom keypath separator\nYou can customize the keypath separator passing the `keypath_separator` argument in the constructor.\n\nIf you pass an existing dict to the constructor and its keys contain the keypath separator an `Exception` will be raised.\n\n```python\nd = benedict(existing_dict, keypath_separator='/')\n```\n\n#### Change keypath separator\nYou can change the `keypath_separator` at any time using the `getter/setter` property.\n\nIf any existing key contains the new `keypath_separator` an `Exception` will be raised.\n\n```python\nd.keypath_separator = '/'\n```\n\n#### Disable keypath functionality\nYou can disable the keypath functionality passing `keypath_separator=None` in the constructor.\n\n```python\nd = benedict(existing_dict, keypath_separator=None)\n```\n\nYou can disable the keypath functionality using the `getter/setter` property.\n\n```python\nd.keypath_separator = None\n```\n\n#### List index support\nList index are supported, keypaths can include indexes *(also negative)* using `[n]`, to perform any operation very fast:\n\n```python\n# Eg. get last location cordinates of the first result:\nloc = d['results[0].locations[-1].coordinates']\nlat = loc.get_decimal('latitude')\nlng = loc.get_decimal('longitude')\n```\n\n### API\n\n-   **Utility methods**\n\n    -   [`clean`](#clean)\n    -   [`clone`](#clone)\n    -   [`dump`](#dump)\n    -   [`filter`](#filter)\n    -   [`flatten`](#flatten)\n    -   [`groupby`](#groupby)\n    -   [`invert`](#invert)\n    -   [`items_sorted_by_keys`](#items_sorted_by_keys)\n    -   [`items_sorted_by_values`](#items_sorted_by_values)\n    -   [`keypaths`](#keypaths)\n    -   [`merge`](#merge)\n    -   [`move`](#move)\n    -   [`nest`](#nest)\n    -   [`remove`](#remove)\n    -   [`rename`](#rename)\n    -   [`search`](#search)\n    -   [`standardize`](#standardize)\n    -   [`subset`](#subset)\n    -   [`swap`](#swap)\n    -   [`traverse`](#traverse)\n    -   [`unflatten`](#unflatten)\n    -   [`unique`](#unique)\n\n-   **I/O methods**\n\n    -   [`from_base64`](#from_base64)\n    -   [`from_csv`](#from_csv)\n    -   [`from_json`](#from_json)\n    -   [`from_pickle`](#from_pickle)\n    -   [`from_query_string`](#from_query_string)\n    -   [`from_toml`](#from_toml)\n    -   [`from_xml`](#from_xml)\n    -   [`from_yaml`](#from_yaml)\n    -   [`to_base64`](#to_base64)\n    -   [`to_csv`](#to_csv)\n    -   [`to_json`](#to_json)\n    -   [`to_pickle`](#to_pickle)\n    -   [`to_query_string`](#to_query_string)\n    -   [`to_toml`](#to_toml)\n    -   [`to_xml`](#to_xml)\n    -   [`to_yaml`](#to_yaml)\n\n-   **Parse methods**\n\n    -   [`get_bool`](#get_bool)\n    -   [`get_bool_list`](#get_bool_list)\n    -   [`get_datetime`](#get_datetime)\n    -   [`get_datetime_list`](#get_datetime_list)\n    -   [`get_decimal`](#get_decimal)\n    -   [`get_decimal_list`](#get_decimal_list)\n    -   [`get_dict`](#get_dict)\n    -   [`get_email`](#get_email)\n    -   [`get_float`](#get_float)\n    -   [`get_float_list`](#get_float_list)\n    -   [`get_int`](#get_int)\n    -   [`get_int_list`](#get_int_list)\n    -   [`get_list`](#get_list)\n    -   [`get_list_item`](#get_list_item)\n    -   [`get_phonenumber`](#get_phonenumber)\n    -   [`get_slug`](#get_slug)\n    -   [`get_slug_list`](#get_slug_list)\n    -   [`get_str`](#get_str)\n    -   [`get_str_list`](#get_str_list)\n\n### Utility methods\n\nThese methods are common utilities that will speed up your everyday work.\n\nUtilities that accept key argument(s) also support keypath(s).\n\nUtilities that return a dictionary always return a new `benedict` instance.\n\n-   #### clean\n\n```python\n# Clean the current dict instance removing all empty values: None, '', {}, [], ().\n# If strings or collections (dict, list, set, tuple) flags are False,\n# related empty values will not be deleted.\nd.clean(strings=True, collections=True)\n```\n\n-   #### clone\n\n```python\n# Return a clone (deepcopy) of the dict.\nc = d.clone()\n```\n\n-   #### dump\n\n```python\n# Return a readable representation of any dict/list.\n# This method can be used both as static method or instance method.\ns = benedict.dump(d.keypaths())\nprint(s)\n# or\nd = benedict()\nprint(d.dump())\n```\n\n-   #### filter\n\n```python\n# Return a filtered dict using the given predicate function.\n# Predicate function receives key, value arguments and should return a bool value.\npredicate = lambda k, v: v is not None\nf = d.filter(predicate)\n```\n\n-   #### flatten\n\n```python\n# Return a new flattened dict using the given separator to join nested dict keys to flatten keypaths.\nf = d.flatten(separator='_')\n```\n\n-   #### groupby\n\n```python\n# Group a list of dicts at key by the value of the given by_key and return a new dict.\ng = d.groupby('cities', by_key='country_code')\n```\n\n-   #### invert\n\n```python\n# Return an inverted dict where values become keys and keys become values.\n# Since multiple keys could have the same value, each value will be a list of keys.\n# If flat is True each value will be a single value (use this only if values are unique).\ni = d.invert(flat=False)\n```\n\n-   #### items_sorted_by_keys\n\n```python\n# Return items (key/value list) sorted by keys.\n# If reverse is True, the list will be reversed.\nitems = d.items_sorted_by_keys(reverse=False)\n```\n\n-   #### items_sorted_by_values\n\n```python\n# Return items (key/value list) sorted by values.\n# If reverse is True, the list will be reversed.\nitems = d.items_sorted_by_values(reverse=False)\n```\n\n-   #### keypaths\n\n```python\n# Return a list of all keypaths in the dict.\nk = d.keypaths()\nprint(k)\n```\n\n-   #### merge\n\n```python\n# Merge one or more dictionary objects into current instance (deepupdate).\n# Sub-dictionaries keys will be merged toghether.\nd.merge(a, b, c)\n```\n\n-   #### move\n\n```python\n# Move an item from key_src to key_dst.\n# It can be used to rename a key.\n# If key_dst exists, its value will be overwritten.\nd.move('a', 'b', overwrite=True)\n```\n\n-   #### nest\n\n```python\n# Nest a list of dicts at the given key and return a new nested list\n# using the specified keys to establish the correct items hierarchy.\nd.nest('values', id_key='id', parent_id_key='parent_id', children_key='children')\n```\n\n-   #### remove\n\n```python\n# Remove multiple keys from the dict.\n# It is possible to pass a single key or more keys (as list or *args).\nd.remove(['firstname', 'lastname', 'email'])\n```\n\n-   #### rename\n\n```python\n# Rename a dict item key from 'key' to 'key_new'.\n# If key_new exists, a KeyError will be raised.\nd.rename('first_name', 'firstname')\n```\n\n-   #### search\n\n```python\n# Search and return a list of items (dict, key, value, ) matching the given query.\nr = d.search('hello', in_keys=True, in_values=True, exact=False, case_sensitive=False)\n```\n\n-   #### standardize\n\n```python\n# Standardize all dict keys, e.g. \"Location Latitude\" -> \"location_latitude\".\nd.standardize()\n```\n\n-   #### subset\n\n```python\n# Return a dict subset for the given keys.\n# It is possible to pass a single key or more keys (as list or *args).\ns = d.subset(['firstname', 'lastname', 'email'])\n```\n\n-   #### swap\n\n```python\n# Swap items values at the given keys.\nd.swap('firstname', 'lastname')\n```\n\n-   #### traverse\n\n```python\n# Traverse a dict passing each item (dict, key, value) to the given callback function.\ndef f(d, key, value):\n    print('dict: {} - key: {} - value: {}'.format(d, key, value))\nd.traverse(f)\n```\n\n-   #### unflatten\n\n```python\n# Return a new unflattened dict using the given separator to split dict keys to nested keypaths.\nu = d.unflatten(separator='_')\n```\n\n-   #### unique\n\n```python\n# Remove duplicated values from the dict.\nd.unique()\n```\n\n### I/O methods\n\nIt is possible to create a `benedict` instance directly from data source (filepath, url or data-string) by passing the data source and the data format (default 'json') in the constructor.\n\n```python\n# filepath\nd = benedict('/root/data.yml', format='yaml')\n\n# url\nd = benedict('https://localhost:8000/data.xml', format='xml')\n\n# data-string\nd = benedict('{\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 7, \"y\": 8, \"z\": 9}')\n```\n\nThese methods simplify I/O operations with most common formats: `base64`, `csv`, `json`, `toml`, `xml`, `yaml`, `pickle`, `query-string`\n\nIn all `from_*` methods, the first argument can be: **url**, **filepath** or **data-string**.\n\nIn all `to_*` methods, if `filepath='...'` kwarg is specified, the output will be also **saved** at the specified filepath.\n\n-   #### from_base64\n\n```python\n# Try to load/decode a base64 encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to choose the subformat used under the hood:\n# (`csv`, `json`, `query-string`, `toml`, `xml`, `yaml`), default: 'json'.\n# It's possible to choose the encoding, default 'utf-8'.\n# A ValueError is raised in case of failure.\nd = benedict.from_base64(s, subformat='json', encoding='utf-8', **kwargs)\n```\n\n-   #### from_csv\n\n```python\n# Try to load/decode a csv encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\u00f9\n# It's possible to specify the columns list, default: None (in this case the first row values will be used as keys).\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/csv.html\n# A ValueError is raised in case of failure.\nd = benedict.from_csv(s, columns=None, columns_row=True, **kwargs)\n```\n\n-   #### from_json\n\n```python\n# Try to load/decode a json encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/json.html\n# A ValueError is raised in case of failure.\nd = benedict.from_json(s, **kwargs)\n```\n\n-   #### from_pickle\n\n```python\n# Try to load/decode a pickle encoded in Base64 format and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://docs.python.org/3/library/pickle.html\n# A ValueError is raised in case of failure.\nd = benedict.from_pickle(s, **kwargs)\n```\n\n-   #### from_query_string\n\n```python\n# Try to load/decode a query-string and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# A ValueError is raised in case of failure.\nd = benedict.from_query_string(s, **kwargs)\n```\n\n-   #### from_toml\n\n```python\n# Try to load/decode a toml encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://pypi.org/project/toml/\n# A ValueError is raised in case of failure.\nd = benedict.from_toml(s, **kwargs)\n```\n\n-   #### from_xml\n\n```python\n# Try to load/decode a xml encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://github.com/martinblech/xmltodict\n# A ValueError is raised in case of failure.\nd = benedict.from_xml(s, **kwargs)\n```\n\n-   #### from_yaml\n\n```python\n# Try to load/decode a yaml encoded data and return it as benedict instance.\n# Accept as first argument: url, filepath or data-string.\n# It's possible to pass decoder specific options using kwargs:\n# https://pyyaml.org/wiki/PyYAMLDocumentation\n# A ValueError is raised in case of failure.\nd = benedict.from_yaml(s, **kwargs)\n```\n\n-   #### to_base64\n\n```python\n# Return the dict instance encoded in base64 format and optionally save it at the specified 'filepath'.\n# It's possible to choose the subformat used under the hood:\n# ('csv', json', `query-string`, 'toml', 'xml', 'yaml'), default: 'json'.\n# It's possible to choose the encoding, default 'utf-8'.\n# It's possible to pass decoder specific options using kwargs.\n# A ValueError is raised in case of failure.\ns = d.to_base64(subformat='json', encoding='utf-8', **kwargs)\n```\n\n-   #### to_csv\n\n```python\n# Return a list of dicts encoded in csv format and optionally save it at the specified filepath.\n# It's possible to specify the key of the item (list of dicts) to encode, default: 'values'.\n# It's possible to specify the columns list, default: None (in this case the keys of the first item will be used).\n# A ValueError is raised in case of failure.\nd = benedict.to_csv(key='values', columns=None, columns_row=True, **kwargs)\n```\n\n-   #### to_json\n\n```python\n# Return the dict instance encoded in json format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://docs.python.org/3/library/json.html\n# A ValueError is raised in case of failure.\ns = d.to_json(**kwargs)\n```\n\n-   #### to_pickle\n\n```python\n# Return the dict instance as pickle encoded in Base64 format and optionally save it at the specified filepath.\n# The pickle protocol used by default is 2.\n# It's possible to pass encoder specific options using kwargs:\n# https://docs.python.org/3/library/pickle.html\n# A ValueError is raised in case of failure.\ns = d.to_pickle(**kwargs)\n```\n\n-   #### to_query_string\n\n```python\n# Return the dict instance as query-string and optionally save it at the specified filepath.\n# A ValueError is raised in case of failure.\ns = d.to_query_string(**kwargs)\n```\n\n-   #### to_toml\n\n```python\n# Return the dict instance encoded in toml format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://pypi.org/project/toml/\n# A ValueError is raised in case of failure.\ns = d.to_toml(**kwargs)\n```\n\n-   #### to_xml\n\n```python\n# Return the dict instance encoded in xml format and optionally save it at the specified filepath.\n# It's possible to pass encoder specific options using kwargs:\n# https://github.com/martinblech/xmltodict\n# A ValueError is raised in case of failure.\ns = d.to_xml(**kwargs)\n```\n\n-   #### to_yaml\n\n```python\n# Return the dict instance encoded in yaml format.\n# If filepath option is passed the output will be saved ath\n# It's possible to pass encoder specific options using kwargs:\n# https://pyyaml.org/wiki/PyYAMLDocumentation\n# A ValueError is raised in case of failure.\ns = d.to_yaml(**kwargs)\n```\n\n### Parse methods\n\nThese methods are wrappers of the `get` method, they parse data trying to return it in the expected type.\n\n-   #### get_bool\n\n```python\n# Get value by key or keypath trying to return it as bool.\n# Values like `1`, `true`, `yes`, `on`, `ok` will be returned as `True`.\nd.get_bool(key, default=False)\n```\n\n-   #### get_bool_list\n\n```python\n# Get value by key or keypath trying to return it as list of bool values.\n# If separator is specified and value is a string it will be splitted.\nd.get_bool_list(key, default=[], separator=',')\n```\n\n-   #### get_datetime\n\n```python\n# Get value by key or keypath trying to return it as datetime.\n# If format is not specified it will be autodetected.\n# If choices and value is in choices return value otherwise default.\nd.get_datetime(key, default=None, format=None, choices=[])\n```\n\n-   #### get_datetime_list\n\n```python\n# Get value by key or keypath trying to return it as list of datetime values.\n# If separator is specified and value is a string it will be splitted.\nd.get_datetime_list(key, default=[], format=None, separator=',')\n```\n\n-   #### get_decimal\n\n```python\n# Get value by key or keypath trying to return it as Decimal.\n# If choices and value is in choices return value otherwise default.\nd.get_decimal(key, default=Decimal('0.0'), choices=[])\n```\n\n-   #### get_decimal_list\n\n```python\n# Get value by key or keypath trying to return it as list of Decimal values.\n# If separator is specified and value is a string it will be splitted.\nd.get_decimal_list(key, default=[], separator=',')\n```\n\n-   #### get_dict\n\n```python\n# Get value by key or keypath trying to return it as dict.\n# If value is a json string it will be automatically decoded.\nd.get_dict(key, default={})\n```\n\n-   #### get_email\n\n```python\n# Get email by key or keypath and return it.\n# If value is blacklisted it will be automatically ignored.\n# If check_blacklist is False, it will be not ignored even if blacklisted.\nd.get_email(key, default='', choices=None, check_blacklist=True)\n```\n\n-   #### get_float\n\n```python\n# Get value by key or keypath trying to return it as float.\n# If choices and value is in choices return value otherwise default.\nd.get_float(key, default=0.0, choices=[])\n```\n\n-   #### get_float_list\n\n```python\n# Get value by key or keypath trying to return it as list of float values.\n# If separator is specified and value is a string it will be splitted.\nd.get_float_list(key, default=[], separator=',')\n```\n\n-   #### get_int\n\n```python\n# Get value by key or keypath trying to return it as int.\n# If choices and value is in choices return value otherwise default.\nd.get_int(key, default=0, choices=[])\n```\n\n-   #### get_int_list\n\n```python\n# Get value by key or keypath trying to return it as list of int values.\n# If separator is specified and value is a string it will be splitted.\nd.get_int_list(key, default=[], separator=',')\n```\n\n-   #### get_list\n\n```python\n# Get value by key or keypath trying to return it as list.\n# If separator is specified and value is a string it will be splitted.\nd.get_list(key, default=[], separator=',')\n```\n\n-   #### get_list_item\n\n```python\n# Get list by key or keypath and return value at the specified index.\n# If separator is specified and list value is a string it will be splitted.\nd.get_list_item(key, index=0, default=None, separator=',')\n```\n\n-   #### get_phonenumber\n\n```python\n#\u00a0Get phone number by key or keypath and return a dict with different formats (e164, international, national).\n# If country code is specified (alpha 2 code), it will be used to parse phone number correctly.\nd.get_phonenumber(key, country_code=None, default=None)\n```\n\n-   #### get_slug\n\n```python\n# Get value by key or keypath trying to return it as slug.\n# If choices and value is in choices return value otherwise default.\nd.get_slug(key, default='', choices=[])\n```\n\n-   #### get_slug_list\n\n```python\n# Get value by key or keypath trying to return it as list of slug values.\n# If separator is specified and value is a string it will be splitted.\nd.get_slug_list(key, default=[], separator=',')\n```\n\n-   #### get_str\n\n```python\n# Get value by key or keypath trying to return it as string.\n# Encoding issues will be automatically fixed.\n# If choices and value is in choices return value otherwise default.\nd.get_str(key, default='', choices=[])\n```\n\n-   #### get_str_list\n\n```python\n# Get value by key or keypath trying to return it as list of str values.\n# If separator is specified and value is a string it will be splitted.\nd.get_str_list(key, default=[], separator=',')\n```\n\n## Testing\n```bash\n# create python 3.8 virtual environment\nvirtualenv testing_benedict -p \"python3.8\" --no-site-packages\n\n# activate virtualenv\ncd testing_benedict && . bin/activate\n\n# clone repo\ngit clone https://github.com/fabiocaccamo/python-benedict.git src && cd src\n\n# install requirements\npip install --upgrade pip\npip install -r requirements.txt\npip install tox\n\n# run tests using tox\ntox\n\n# or run tests using unittest\npython -m unittest\n\n# or run tests using setuptools\npython setup.py test\n```\n\n## License\nReleased under [MIT License](LICENSE.txt).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/fabiocaccamo/python-benedict/archive/0.18.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fabiocaccamo/python-benedict", "keywords": "python,dictionary,dictionaries,dict,benedict,subclass,extended,keylist,keypath,utility,io,data,file,url,read,write,parse,base64,csv,json,query-string,toml,xml,yaml,clean,clone,deepclone,deepupdate,dump,filter,flatten,groupby,invert,merge,move,nest,remove,rename,search,standardize,subset,swap,traverse,unflatten,unique", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-benedict", "package_url": "https://pypi.org/project/python-benedict/", "platform": "", "project_url": "https://pypi.org/project/python-benedict/", "project_urls": {"Download": "https://github.com/fabiocaccamo/python-benedict/archive/0.18.1.tar.gz", "Homepage": "https://github.com/fabiocaccamo/python-benedict"}, "release_url": "https://pypi.org/project/python-benedict/0.18.1/", "requires_dist": ["mailchecker", "phonenumbers", "python-dateutil", "python-slugify", "pyyaml", "requests", "six", "toml", "xmltodict", "ftfy (==4.4.3) ; python_version < \"3.4\"", "ftfy ; python_version > \"2.7\""], "requires_python": "", "summary": "python-benedict is a dict subclass with keylist/keypath support, I/O shortcuts (Base64, CSV, JSON, TOML, XML, YAML, pickle, query-string) and many utilities... for humans, obviously.", "version": "0.18.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02f1504e02b6eea5d6c637484ba9a58e73abbc45/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707974686f6e2d62656e65646963742e7376673f636f6c6f723d626c7565266c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypi.org/project/python-benedict/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32fdc621df94449cd0e0255046a29c5ee6b6bfbc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e2d62656e65646963742e7376673f636f6c6f723d626c7565266c6f676f3d70797069266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pepy.tech/project/python-benedict\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3545d1418d77c793fb276813f318792ee270c723/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d62656e6564696374\"></a>\n<a href=\"https://github.com/fabiocaccamo/python-benedict/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6933e2974d06b221af5e98146351f1980298ca5e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f666162696f63616363616d6f2f707974686f6e2d62656e65646963743f6c6f676f3d676974687562\"></a>\n<a href=\"https://github.com/fabiocaccamo/python-benedict/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e6a8fb8edbc39468cb7e244790bf8ed4061f27f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f707974686f6e2d62656e65646963742e7376673f636f6c6f723d626c7565\"></a></p>\n<p><a href=\"https://travis-ci.org/fabiocaccamo/python-benedict\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2672233b5410ebf611514d96bb08648d379036e2/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f666162696f63616363616d6f2f707974686f6e2d62656e65646963743f6c6f676f3d747261766973266c6162656c3d6275696c64\"></a>\n<a href=\"https://circleci.com/gh/fabiocaccamo/python-benedict\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c0898e1ffd95c4323e7a38dd8dc844d5a6bea9b/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f67682f666162696f63616363616d6f2f707974686f6e2d62656e65646963743f6c6f676f3d636972636c656369266c6162656c3d6275696c64\"></a>\n<a href=\"https://codecov.io/gh/fabiocaccamo/python-benedict\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07345ec46f8c66fe114f032b36559c460aab9539/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f666162696f63616363616d6f2f707974686f6e2d62656e65646963743f6c6f676f3d636f6465636f76\"></a>\n<a href=\"https://www.codacy.com/app/fabiocaccamo/python-benedict\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59b58a89e8fbbfc3df7c1b4451d240d1e48c6bba/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f67726164652f30646264356363323038396634646365383061306534396536383232626533633f6c6f676f3d636f64616379\"></a>\n<a href=\"https://scrutinizer-ci.com/g/fabiocaccamo/python-benedict/?branch=master\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf65562151d5efc603b74464f164b21a0619bd79/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f7175616c6974792f672f666162696f63616363616d6f2f707974686f6e2d62656e65646963743f6c6f676f3d7363727574696e697a6572\"></a>\n<a href=\"https://codeclimate.com/github/fabiocaccamo/python-benedict/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e060be0bd5e234109ae319bc03e430f0c9693a3d/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792f666162696f63616363616d6f2f707974686f6e2d62656e65646963743f6c6f676f3d636f64652d636c696d617465\"></a>\n<a href=\"https://requires.io/github/fabiocaccamo/python-benedict/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6c23a6ee010a79fe61a6055c328153ec35e77ef/68747470733a2f2f72657175697265732e696f2f6769746875622f666162696f63616363616d6f2f707974686f6e2d62656e65646963742f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>python-benedict</h1>\n<p>python-benedict is a dict subclass with <strong>keylist/keypath</strong> support, <strong>I/O</strong> shortcuts (<code>Base64</code>, <code>CSV</code>, <code>JSON</code>, <code>TOML</code>, <code>XML</code>, <code>YAML</code>, <code>pickle</code>, <code>query-string</code>) and many <strong>utilities</strong>... for humans, obviously.</p>\n<h2>Features</h2>\n<ul>\n<li>100% <strong>backward-compatible</strong>, you can safely wrap existing dictionaries.</li>\n<li><strong>Keylist</strong> support using <strong>list of keys</strong> as key.</li>\n<li><strong>Keypath</strong> support using <strong>keypath-separator</strong> <em>(dot syntax by default)</em>.</li>\n<li>Keypath <strong>list-index</strong> support  <em>(also negative)</em> using the standard <code>[n]</code> suffix.</li>\n<li>Easy <strong>I/O operations</strong> with most common formats: <code>Base64</code>, <code>CSV</code>, <code>JSON</code>, <code>TOML</code>, <code>XML</code>, <code>YAML</code>, <code>pickle</code>, <code>query-string</code>.</li>\n<li>Many <strong>utility</strong> and <strong>parse methods</strong> to retrieve data as needed <em>(check the <a href=\"#api\" rel=\"nofollow\">API</a> section)</em>.</li>\n<li>Well <strong>tested</strong>. ;)</li>\n</ul>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#basics\" rel=\"nofollow\">Basics</a></li>\n<li><a href=\"#keylist\" rel=\"nofollow\">Keylist</a></li>\n<li><a href=\"#keypath\" rel=\"nofollow\">Keypath</a>\n<ul>\n<li><a href=\"#custom-keypath-separator\" rel=\"nofollow\">Custom keypath separator</a></li>\n<li><a href=\"#change-keypath-separator\" rel=\"nofollow\">Change keypath separator</a></li>\n<li><a href=\"#disable-keypath-functionality\" rel=\"nofollow\">Disable keypath functionality</a></li>\n<li><a href=\"#list-index-support\" rel=\"nofollow\">List index support</a></li>\n</ul>\n</li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a>\n<ul>\n<li><a href=\"#utility-methods\" rel=\"nofollow\">Utility methods</a></li>\n<li><a href=\"#io-methods\" rel=\"nofollow\">I/O methods</a></li>\n<li><a href=\"#parse-methods\" rel=\"nofollow\">Parse methods</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>Run <code>pip install python-benedict</code></li>\n</ul>\n<h2>Usage</h2>\n<h3>Basics</h3>\n<p><code>benedict</code> is a <code>dict</code> subclass, so it is possible to use it as a normal dictionary <em>(you can just cast an existing dict)</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">benedict</span> <span class=\"kn\">import</span> <span class=\"n\">benedict</span>\n\n<span class=\"c1\"># create a new empty instance</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or cast an existing dict</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"n\">existing_dict</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or create from data source (filepath, url or data-string) in a supported format:</span>\n<span class=\"c1\"># Base64, CSV, JSON, TOML, XML, YAML, query-string</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"s1\">'https://localhost:8000/data.json'</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or in a Django view</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get_int</span><span class=\"p\">(</span><span class=\"s1\">'page'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>Keylist</h3>\n<p>Wherever a <strong>key</strong> is used, it is possible to use also a <strong>list (or a tuple) of keys</strong>.</p>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># set values by keys list</span>\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile'</span><span class=\"p\">,</span> <span class=\"s1\">'firstname'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Fabio'</span>\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile'</span><span class=\"p\">,</span> <span class=\"s1\">'lastname'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Caccamo'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"c1\">#\u00a0-&gt; { 'profile':{ 'firstname':'Fabio', 'lastname':'Caccamo' } }</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile'</span><span class=\"p\">])</span> <span class=\"c1\"># -&gt; { 'firstname':'Fabio', 'lastname':'Caccamo' }</span>\n\n<span class=\"c1\"># check if keypath exists in dict</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"s1\">'profile'</span><span class=\"p\">,</span> <span class=\"s1\">'lastname'</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"c1\"># -&gt; True</span>\n\n<span class=\"c1\"># delete value by keys list</span>\n<span class=\"k\">del</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile'</span><span class=\"p\">,</span> <span class=\"s1\">'lastname'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile'</span><span class=\"p\">])</span> <span class=\"c1\"># -&gt; { 'firstname':'Fabio' }</span>\n</pre>\n<h3>Keypath</h3>\n<p><code>.</code> is the default keypath separator.</p>\n<p>If you cast an existing dict and its keys contain the keypath separator a <code>ValueError</code> will be raised.</p>\n<p>In this case you should use a <a href=\"#custom-keypath-separator\" rel=\"nofollow\">custom keypath separator</a> or <a href=\"#disable-keypath-functionality\" rel=\"nofollow\">disable keypath functionality</a>.</p>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># set values by keypath</span>\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile.firstname'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Fabio'</span>\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile.lastname'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Caccamo'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"c1\">#\u00a0-&gt; { 'profile':{ 'firstname':'Fabio', 'lastname':'Caccamo' } }</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile'</span><span class=\"p\">])</span> <span class=\"c1\"># -&gt; { 'firstname':'Fabio', 'lastname':'Caccamo' }</span>\n\n<span class=\"c1\"># check if keypath exists in dict</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'profile.lastname'</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"c1\"># -&gt; True</span>\n\n<span class=\"c1\"># delete value by keypath</span>\n<span class=\"k\">del</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'profile.lastname'</span><span class=\"p\">]</span>\n</pre>\n<h4>Custom keypath separator</h4>\n<p>You can customize the keypath separator passing the <code>keypath_separator</code> argument in the constructor.</p>\n<p>If you pass an existing dict to the constructor and its keys contain the keypath separator an <code>Exception</code> will be raised.</p>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"n\">existing_dict</span><span class=\"p\">,</span> <span class=\"n\">keypath_separator</span><span class=\"o\">=</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n</pre>\n<h4>Change keypath separator</h4>\n<p>You can change the <code>keypath_separator</code> at any time using the <code>getter/setter</code> property.</p>\n<p>If any existing key contains the new <code>keypath_separator</code> an <code>Exception</code> will be raised.</p>\n<pre><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keypath_separator</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span>\n</pre>\n<h4>Disable keypath functionality</h4>\n<p>You can disable the keypath functionality passing <code>keypath_separator=None</code> in the constructor.</p>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"n\">existing_dict</span><span class=\"p\">,</span> <span class=\"n\">keypath_separator</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>You can disable the keypath functionality using the <code>getter/setter</code> property.</p>\n<pre><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keypath_separator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<h4>List index support</h4>\n<p>List index are supported, keypaths can include indexes <em>(also negative)</em> using <code>[n]</code>, to perform any operation very fast:</p>\n<pre><span class=\"c1\"># Eg. get last location cordinates of the first result:</span>\n<span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'results[0].locations[-1].coordinates'</span><span class=\"p\">]</span>\n<span class=\"n\">lat</span> <span class=\"o\">=</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">get_decimal</span><span class=\"p\">(</span><span class=\"s1\">'latitude'</span><span class=\"p\">)</span>\n<span class=\"n\">lng</span> <span class=\"o\">=</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">get_decimal</span><span class=\"p\">(</span><span class=\"s1\">'longitude'</span><span class=\"p\">)</span>\n</pre>\n<h3>API</h3>\n<ul>\n<li>\n<p><strong>Utility methods</strong></p>\n<ul>\n<li><a href=\"#clean\" rel=\"nofollow\"><code>clean</code></a></li>\n<li><a href=\"#clone\" rel=\"nofollow\"><code>clone</code></a></li>\n<li><a href=\"#dump\" rel=\"nofollow\"><code>dump</code></a></li>\n<li><a href=\"#filter\" rel=\"nofollow\"><code>filter</code></a></li>\n<li><a href=\"#flatten\" rel=\"nofollow\"><code>flatten</code></a></li>\n<li><a href=\"#groupby\" rel=\"nofollow\"><code>groupby</code></a></li>\n<li><a href=\"#invert\" rel=\"nofollow\"><code>invert</code></a></li>\n<li><a href=\"#items_sorted_by_keys\" rel=\"nofollow\"><code>items_sorted_by_keys</code></a></li>\n<li><a href=\"#items_sorted_by_values\" rel=\"nofollow\"><code>items_sorted_by_values</code></a></li>\n<li><a href=\"#keypaths\" rel=\"nofollow\"><code>keypaths</code></a></li>\n<li><a href=\"#merge\" rel=\"nofollow\"><code>merge</code></a></li>\n<li><a href=\"#move\" rel=\"nofollow\"><code>move</code></a></li>\n<li><a href=\"#nest\" rel=\"nofollow\"><code>nest</code></a></li>\n<li><a href=\"#remove\" rel=\"nofollow\"><code>remove</code></a></li>\n<li><a href=\"#rename\" rel=\"nofollow\"><code>rename</code></a></li>\n<li><a href=\"#search\" rel=\"nofollow\"><code>search</code></a></li>\n<li><a href=\"#standardize\" rel=\"nofollow\"><code>standardize</code></a></li>\n<li><a href=\"#subset\" rel=\"nofollow\"><code>subset</code></a></li>\n<li><a href=\"#swap\" rel=\"nofollow\"><code>swap</code></a></li>\n<li><a href=\"#traverse\" rel=\"nofollow\"><code>traverse</code></a></li>\n<li><a href=\"#unflatten\" rel=\"nofollow\"><code>unflatten</code></a></li>\n<li><a href=\"#unique\" rel=\"nofollow\"><code>unique</code></a></li>\n</ul>\n</li>\n<li>\n<p><strong>I/O methods</strong></p>\n<ul>\n<li><a href=\"#from_base64\" rel=\"nofollow\"><code>from_base64</code></a></li>\n<li><a href=\"#from_csv\" rel=\"nofollow\"><code>from_csv</code></a></li>\n<li><a href=\"#from_json\" rel=\"nofollow\"><code>from_json</code></a></li>\n<li><a href=\"#from_pickle\" rel=\"nofollow\"><code>from_pickle</code></a></li>\n<li><a href=\"#from_query_string\" rel=\"nofollow\"><code>from_query_string</code></a></li>\n<li><a href=\"#from_toml\" rel=\"nofollow\"><code>from_toml</code></a></li>\n<li><a href=\"#from_xml\" rel=\"nofollow\"><code>from_xml</code></a></li>\n<li><a href=\"#from_yaml\" rel=\"nofollow\"><code>from_yaml</code></a></li>\n<li><a href=\"#to_base64\" rel=\"nofollow\"><code>to_base64</code></a></li>\n<li><a href=\"#to_csv\" rel=\"nofollow\"><code>to_csv</code></a></li>\n<li><a href=\"#to_json\" rel=\"nofollow\"><code>to_json</code></a></li>\n<li><a href=\"#to_pickle\" rel=\"nofollow\"><code>to_pickle</code></a></li>\n<li><a href=\"#to_query_string\" rel=\"nofollow\"><code>to_query_string</code></a></li>\n<li><a href=\"#to_toml\" rel=\"nofollow\"><code>to_toml</code></a></li>\n<li><a href=\"#to_xml\" rel=\"nofollow\"><code>to_xml</code></a></li>\n<li><a href=\"#to_yaml\" rel=\"nofollow\"><code>to_yaml</code></a></li>\n</ul>\n</li>\n<li>\n<p><strong>Parse methods</strong></p>\n<ul>\n<li><a href=\"#get_bool\" rel=\"nofollow\"><code>get_bool</code></a></li>\n<li><a href=\"#get_bool_list\" rel=\"nofollow\"><code>get_bool_list</code></a></li>\n<li><a href=\"#get_datetime\" rel=\"nofollow\"><code>get_datetime</code></a></li>\n<li><a href=\"#get_datetime_list\" rel=\"nofollow\"><code>get_datetime_list</code></a></li>\n<li><a href=\"#get_decimal\" rel=\"nofollow\"><code>get_decimal</code></a></li>\n<li><a href=\"#get_decimal_list\" rel=\"nofollow\"><code>get_decimal_list</code></a></li>\n<li><a href=\"#get_dict\" rel=\"nofollow\"><code>get_dict</code></a></li>\n<li><a href=\"#get_email\" rel=\"nofollow\"><code>get_email</code></a></li>\n<li><a href=\"#get_float\" rel=\"nofollow\"><code>get_float</code></a></li>\n<li><a href=\"#get_float_list\" rel=\"nofollow\"><code>get_float_list</code></a></li>\n<li><a href=\"#get_int\" rel=\"nofollow\"><code>get_int</code></a></li>\n<li><a href=\"#get_int_list\" rel=\"nofollow\"><code>get_int_list</code></a></li>\n<li><a href=\"#get_list\" rel=\"nofollow\"><code>get_list</code></a></li>\n<li><a href=\"#get_list_item\" rel=\"nofollow\"><code>get_list_item</code></a></li>\n<li><a href=\"#get_phonenumber\" rel=\"nofollow\"><code>get_phonenumber</code></a></li>\n<li><a href=\"#get_slug\" rel=\"nofollow\"><code>get_slug</code></a></li>\n<li><a href=\"#get_slug_list\" rel=\"nofollow\"><code>get_slug_list</code></a></li>\n<li><a href=\"#get_str\" rel=\"nofollow\"><code>get_str</code></a></li>\n<li><a href=\"#get_str_list\" rel=\"nofollow\"><code>get_str_list</code></a></li>\n</ul>\n</li>\n</ul>\n<h3>Utility methods</h3>\n<p>These methods are common utilities that will speed up your everyday work.</p>\n<p>Utilities that accept key argument(s) also support keypath(s).</p>\n<p>Utilities that return a dictionary always return a new <code>benedict</code> instance.</p>\n<ul>\n<li>\n<h4>clean</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Clean the current dict instance removing all empty values: None, '', {}, [], ().</span>\n<span class=\"c1\"># If strings or collections (dict, list, set, tuple) flags are False,</span>\n<span class=\"c1\"># related empty values will not be deleted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>clone</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a clone (deepcopy) of the dict.</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>\n<h4>dump</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a readable representation of any dict/list.</span>\n<span class=\"c1\"># This method can be used both as static method or instance method.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keypaths</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n</pre>\n<ul>\n<li>\n<h4>filter</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a filtered dict using the given predicate function.</span>\n<span class=\"c1\"># Predicate function receives key, value arguments and should return a bool value.</span>\n<span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>flatten</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a new flattened dict using the given separator to join nested dict keys to flatten keypaths.</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">'_'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>groupby</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Group a list of dicts at key by the value of the given by_key and return a new dict.</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">'cities'</span><span class=\"p\">,</span> <span class=\"n\">by_key</span><span class=\"o\">=</span><span class=\"s1\">'country_code'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>invert</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return an inverted dict where values become keys and keys become values.</span>\n<span class=\"c1\"># Since multiple keys could have the same value, each value will be a list of keys.</span>\n<span class=\"c1\"># If flat is True each value will be a single value (use this only if values are unique).</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">invert</span><span class=\"p\">(</span><span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>items_sorted_by_keys</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return items (key/value list) sorted by keys.</span>\n<span class=\"c1\"># If reverse is True, the list will be reversed.</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items_sorted_by_keys</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>items_sorted_by_values</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return items (key/value list) sorted by values.</span>\n<span class=\"c1\"># If reverse is True, the list will be reversed.</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items_sorted_by_values</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>keypaths</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a list of all keypaths in the dict.</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keypaths</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>merge</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Merge one or more dictionary objects into current instance (deepupdate).</span>\n<span class=\"c1\"># Sub-dictionaries keys will be merged toghether.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>move</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Move an item from key_src to key_dst.</span>\n<span class=\"c1\"># It can be used to rename a key.</span>\n<span class=\"c1\"># If key_dst exists, its value will be overwritten.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>nest</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Nest a list of dicts at the given key and return a new nested list</span>\n<span class=\"c1\"># using the specified keys to establish the correct items hierarchy.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">nest</span><span class=\"p\">(</span><span class=\"s1\">'values'</span><span class=\"p\">,</span> <span class=\"n\">id_key</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">parent_id_key</span><span class=\"o\">=</span><span class=\"s1\">'parent_id'</span><span class=\"p\">,</span> <span class=\"n\">children_key</span><span class=\"o\">=</span><span class=\"s1\">'children'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>remove</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Remove multiple keys from the dict.</span>\n<span class=\"c1\"># It is possible to pass a single key or more keys (as list or *args).</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">([</span><span class=\"s1\">'firstname'</span><span class=\"p\">,</span> <span class=\"s1\">'lastname'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li>\n<h4>rename</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Rename a dict item key from 'key' to 'key_new'.</span>\n<span class=\"c1\"># If key_new exists, a KeyError will be raised.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"s1\">'first_name'</span><span class=\"p\">,</span> <span class=\"s1\">'firstname'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>search</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Search and return a list of items (dict, key, value, ) matching the given query.</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"n\">in_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">in_values</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exact</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">case_sensitive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>standardize</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Standardize all dict keys, e.g. \"Location Latitude\" -&gt; \"location_latitude\".</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">standardize</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>\n<h4>subset</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a dict subset for the given keys.</span>\n<span class=\"c1\"># It is possible to pass a single key or more keys (as list or *args).</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">([</span><span class=\"s1\">'firstname'</span><span class=\"p\">,</span> <span class=\"s1\">'lastname'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li>\n<h4>swap</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Swap items values at the given keys.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"s1\">'firstname'</span><span class=\"p\">,</span> <span class=\"s1\">'lastname'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>traverse</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Traverse a dict passing each item (dict, key, value) to the given callback function.</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'dict: </span><span class=\"si\">{}</span><span class=\"s1\"> - key: </span><span class=\"si\">{}</span><span class=\"s1\"> - value: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">traverse</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>unflatten</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a new unflattened dict using the given separator to split dict keys to nested keypaths.</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">unflatten</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">'_'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>unique</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Remove duplicated values from the dict.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()</span>\n</pre>\n<h3>I/O methods</h3>\n<p>It is possible to create a <code>benedict</code> instance directly from data source (filepath, url or data-string) by passing the data source and the data format (default 'json') in the constructor.</p>\n<pre><span class=\"c1\"># filepath</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"s1\">'/root/data.yml'</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'yaml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># url</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"s1\">'https://localhost:8000/data.xml'</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'xml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># data-string</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"p\">(</span><span class=\"s1\">'{\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 7, \"y\": 8, \"z\": 9}'</span><span class=\"p\">)</span>\n</pre>\n<p>These methods simplify I/O operations with most common formats: <code>base64</code>, <code>csv</code>, <code>json</code>, <code>toml</code>, <code>xml</code>, <code>yaml</code>, <code>pickle</code>, <code>query-string</code></p>\n<p>In all <code>from_*</code> methods, the first argument can be: <strong>url</strong>, <strong>filepath</strong> or <strong>data-string</strong>.</p>\n<p>In all <code>to_*</code> methods, if <code>filepath='...'</code> kwarg is specified, the output will be also <strong>saved</strong> at the specified filepath.</p>\n<ul>\n<li>\n<h4>from_base64</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a base64 encoded data and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># It's possible to choose the subformat used under the hood:</span>\n<span class=\"c1\"># (`csv`, `json`, `query-string`, `toml`, `xml`, `yaml`), default: 'json'.</span>\n<span class=\"c1\"># It's possible to choose the encoding, default 'utf-8'.</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_base64</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">subformat</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_csv</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a csv encoded data and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.\u00f9</span>\n<span class=\"c1\"># It's possible to specify the columns list, default: None (in this case the first row values will be used as keys).</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs:</span>\n<span class=\"c1\"># https://docs.python.org/3/library/csv.html</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">columns_row</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_json</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a json encoded data and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs:</span>\n<span class=\"c1\"># https://docs.python.org/3/library/json.html</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_pickle</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a pickle encoded in Base64 format and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs:</span>\n<span class=\"c1\"># https://docs.python.org/3/library/pickle.html</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_pickle</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_query_string</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a query-string and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_query_string</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_toml</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a toml encoded data and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs:</span>\n<span class=\"c1\"># https://pypi.org/project/toml/</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_toml</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_xml</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a xml encoded data and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs:</span>\n<span class=\"c1\"># https://github.com/martinblech/xmltodict</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_xml</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>from_yaml</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Try to load/decode a yaml encoded data and return it as benedict instance.</span>\n<span class=\"c1\"># Accept as first argument: url, filepath or data-string.</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs:</span>\n<span class=\"c1\"># https://pyyaml.org/wiki/PyYAMLDocumentation</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_base64</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance encoded in base64 format and optionally save it at the specified 'filepath'.</span>\n<span class=\"c1\"># It's possible to choose the subformat used under the hood:</span>\n<span class=\"c1\"># ('csv', json', `query-string`, 'toml', 'xml', 'yaml'), default: 'json'.</span>\n<span class=\"c1\"># It's possible to choose the encoding, default 'utf-8'.</span>\n<span class=\"c1\"># It's possible to pass decoder specific options using kwargs.</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_base64</span><span class=\"p\">(</span><span class=\"n\">subformat</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_csv</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return a list of dicts encoded in csv format and optionally save it at the specified filepath.</span>\n<span class=\"c1\"># It's possible to specify the key of the item (list of dicts) to encode, default: 'values'.</span>\n<span class=\"c1\"># It's possible to specify the columns list, default: None (in this case the keys of the first item will be used).</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">benedict</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'values'</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">columns_row</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_json</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance encoded in json format and optionally save it at the specified filepath.</span>\n<span class=\"c1\"># It's possible to pass encoder specific options using kwargs:</span>\n<span class=\"c1\"># https://docs.python.org/3/library/json.html</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_pickle</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance as pickle encoded in Base64 format and optionally save it at the specified filepath.</span>\n<span class=\"c1\"># The pickle protocol used by default is 2.</span>\n<span class=\"c1\"># It's possible to pass encoder specific options using kwargs:</span>\n<span class=\"c1\"># https://docs.python.org/3/library/pickle.html</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_pickle</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_query_string</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance as query-string and optionally save it at the specified filepath.</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_query_string</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_toml</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance encoded in toml format and optionally save it at the specified filepath.</span>\n<span class=\"c1\"># It's possible to pass encoder specific options using kwargs:</span>\n<span class=\"c1\"># https://pypi.org/project/toml/</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_toml</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_xml</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance encoded in xml format and optionally save it at the specified filepath.</span>\n<span class=\"c1\"># It's possible to pass encoder specific options using kwargs:</span>\n<span class=\"c1\"># https://github.com/martinblech/xmltodict</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_xml</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>to_yaml</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Return the dict instance encoded in yaml format.</span>\n<span class=\"c1\"># If filepath option is passed the output will be saved ath</span>\n<span class=\"c1\"># It's possible to pass encoder specific options using kwargs:</span>\n<span class=\"c1\"># https://pyyaml.org/wiki/PyYAMLDocumentation</span>\n<span class=\"c1\"># A ValueError is raised in case of failure.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">to_yaml</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<h3>Parse methods</h3>\n<p>These methods are wrappers of the <code>get</code> method, they parse data trying to return it in the expected type.</p>\n<ul>\n<li>\n<h4>get_bool</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as bool.</span>\n<span class=\"c1\"># Values like `1`, `true`, `yes`, `on`, `ok` will be returned as `True`.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_bool</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_bool_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of bool values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_bool_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_datetime</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as datetime.</span>\n<span class=\"c1\"># If format is not specified it will be autodetected.</span>\n<span class=\"c1\"># If choices and value is in choices return value otherwise default.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_datetime</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</pre>\n<ul>\n<li>\n<h4>get_datetime_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of datetime values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_datetime_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_decimal</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as Decimal.</span>\n<span class=\"c1\"># If choices and value is in choices return value otherwise default.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_decimal</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'0.0'</span><span class=\"p\">),</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</pre>\n<ul>\n<li>\n<h4>get_decimal_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of Decimal values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_decimal_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_dict</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as dict.</span>\n<span class=\"c1\"># If value is a json string it will be automatically decoded.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_dict</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n<ul>\n<li>\n<h4>get_email</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get email by key or keypath and return it.</span>\n<span class=\"c1\"># If value is blacklisted it will be automatically ignored.</span>\n<span class=\"c1\"># If check_blacklist is False, it will be not ignored even if blacklisted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_email</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">check_blacklist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_float</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as float.</span>\n<span class=\"c1\"># If choices and value is in choices return value otherwise default.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_float</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</pre>\n<ul>\n<li>\n<h4>get_float_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of float values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_float_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_int</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as int.</span>\n<span class=\"c1\"># If choices and value is in choices return value otherwise default.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_int</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</pre>\n<ul>\n<li>\n<h4>get_int_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of int values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_int_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_list_item</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get list by key or keypath and return value at the specified index.</span>\n<span class=\"c1\"># If separator is specified and list value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_list_item</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_phonenumber</h4>\n</li>\n</ul>\n<pre><span class=\"c1\">#\u00a0Get phone number by key or keypath and return a dict with different formats (e164, international, national).</span>\n<span class=\"c1\"># If country code is specified (alpha 2 code), it will be used to parse phone number correctly.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_phonenumber</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">country_code</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_slug</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as slug.</span>\n<span class=\"c1\"># If choices and value is in choices return value otherwise default.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_slug</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</pre>\n<ul>\n<li>\n<h4>get_slug_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of slug values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_slug_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>get_str</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as string.</span>\n<span class=\"c1\"># Encoding issues will be automatically fixed.</span>\n<span class=\"c1\"># If choices and value is in choices return value otherwise default.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n</pre>\n<ul>\n<li>\n<h4>get_str_list</h4>\n</li>\n</ul>\n<pre><span class=\"c1\"># Get value by key or keypath trying to return it as list of str values.</span>\n<span class=\"c1\"># If separator is specified and value is a string it will be splitted.</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get_str_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n</pre>\n<h2>Testing</h2>\n<pre><span class=\"c1\"># create python 3.8 virtual environment</span>\nvirtualenv testing_benedict -p <span class=\"s2\">\"python3.8\"</span> --no-site-packages\n\n<span class=\"c1\"># activate virtualenv</span>\n<span class=\"nb\">cd</span> testing_benedict <span class=\"o\">&amp;&amp;</span> . bin/activate\n\n<span class=\"c1\"># clone repo</span>\ngit clone https://github.com/fabiocaccamo/python-benedict.git src <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> src\n\n<span class=\"c1\"># install requirements</span>\npip install --upgrade pip\npip install -r requirements.txt\npip install tox\n\n<span class=\"c1\"># run tests using tox</span>\ntox\n\n<span class=\"c1\"># or run tests using unittest</span>\npython -m unittest\n\n<span class=\"c1\"># or run tests using setuptools</span>\npython setup.py <span class=\"nb\">test</span>\n</pre>\n<h2>License</h2>\n<p>Released under <a href=\"LICENSE.txt\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 6805837, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "649ab638737de380cb5fb86b9b2d20c8", "sha256": "b13dae5a043e683797e64557462f5c2f9645fd3c42a5638eb62ebe65c81cdfa8"}, "downloads": -1, "filename": "python-benedict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "649ab638737de380cb5fb86b9b2d20c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6731, "upload_time": "2019-05-17T14:16:07", "upload_time_iso_8601": "2019-05-17T14:16:07.113183Z", "url": "https://files.pythonhosted.org/packages/3c/73/ad689fc3cc539b4f2a3a97cbaf8f93e2762c40509145d21c6b8035c31c7e/python-benedict-0.1.0.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "75b4e1c3517192320aafedc754f46000", "sha256": "69089ff20f8b7c8988c2f5ba965ef54fac46e09db56745d5dbaf99cc28518d03"}, "downloads": -1, "filename": "python_benedict-0.10.0-py2-none-any.whl", "has_sig": false, "md5_digest": "75b4e1c3517192320aafedc754f46000", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17193, "upload_time": "2019-10-04T09:01:06", "upload_time_iso_8601": "2019-10-04T09:01:06.845340Z", "url": "https://files.pythonhosted.org/packages/63/22/04b27cdfd126bf2eb4e4d19738fac89007f7a35ade309f88186b436177c5/python_benedict-0.10.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0adaa7edcc8d5237ee40af94f4655f21", "sha256": "7931a42170bb2eaee116df854ee11be574dfe3624180ce70e2d439fbbbcc0da1"}, "downloads": -1, "filename": "python-benedict-0.10.0.tar.gz", "has_sig": false, "md5_digest": "0adaa7edcc8d5237ee40af94f4655f21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14361, "upload_time": "2019-10-04T09:01:09", "upload_time_iso_8601": "2019-10-04T09:01:09.371040Z", "url": "https://files.pythonhosted.org/packages/62/61/a4c5f282cdb361c64239262fc99cd3cbbf6849f5adf8cfc4103e779be013/python-benedict-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "cc1ae1e5323b5bb09664a75c05e3518a", "sha256": "8c04bc9f64025ed585286859854b935b0062b30ef16cf406dbcdc3e4ad7b1c6f"}, "downloads": -1, "filename": "python_benedict-0.11.0-py2-none-any.whl", "has_sig": false, "md5_digest": "cc1ae1e5323b5bb09664a75c05e3518a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17854, "upload_time": "2019-10-14T12:49:37", "upload_time_iso_8601": "2019-10-14T12:49:37.418783Z", "url": "https://files.pythonhosted.org/packages/de/af/0f63f92c52d5d0b761d476c2d73c6f772d38ce8e9a36052eef7349385ba0/python_benedict-0.11.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "855bf6ba24be6dbcd103b693fdcbb838", "sha256": "0c01fb88b5e9627f7e1c9effbf945b46b57b4e39a514d430bdd63123bfdee283"}, "downloads": -1, "filename": "python-benedict-0.11.0.tar.gz", "has_sig": false, "md5_digest": "855bf6ba24be6dbcd103b693fdcbb838", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15184, "upload_time": "2019-10-14T12:49:40", "upload_time_iso_8601": "2019-10-14T12:49:40.250874Z", "url": "https://files.pythonhosted.org/packages/62/db/5825c5719f86fbf6403d91bdfd2c2084393312ddcd50e4ab8e309b9a8b6a/python-benedict-0.11.0.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "ac97f8a5bcc048b05969264cc9554e0a", "sha256": "b75d79a6c6b70a3f1b91a10e1edb72e21dcd466bbed2cf38bb29d285815992b3"}, "downloads": -1, "filename": "python_benedict-0.11.1-py2-none-any.whl", "has_sig": false, "md5_digest": "ac97f8a5bcc048b05969264cc9554e0a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17898, "upload_time": "2019-10-14T14:36:00", "upload_time_iso_8601": "2019-10-14T14:36:00.310787Z", "url": "https://files.pythonhosted.org/packages/c0/30/044c1a3b50b2e066275b77eed9f401cd17280f44aa0610f9d84622c27b90/python_benedict-0.11.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c37b4cef7b2a88a8b338fd9e80e34878", "sha256": "2e5c193e91a87b977b83826d367e25d73ce1a27604f3b68d5c91209f734e2666"}, "downloads": -1, "filename": "python-benedict-0.11.1.tar.gz", "has_sig": false, "md5_digest": "c37b4cef7b2a88a8b338fd9e80e34878", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15240, "upload_time": "2019-10-14T14:36:03", "upload_time_iso_8601": "2019-10-14T14:36:03.458978Z", "url": "https://files.pythonhosted.org/packages/65/a3/2aca83c0c04fac6bbf85818d5ad557c61f040f2d67915f4bea8e6f8e71f4/python-benedict-0.11.1.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "6ccd59d2596c7e8a7670c5a60839c145", "sha256": "e0081b16288862071a4468e565d07eaa36355a9b38ecc0ee8a0fc16998ae0099"}, "downloads": -1, "filename": "python_benedict-0.12.0-py2-none-any.whl", "has_sig": false, "md5_digest": "6ccd59d2596c7e8a7670c5a60839c145", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19210, "upload_time": "2019-10-29T16:12:30", "upload_time_iso_8601": "2019-10-29T16:12:30.731457Z", "url": "https://files.pythonhosted.org/packages/31/ce/93ed3a5e5a5e907ff9b1da9df2571888a41bf55130ad8df54d4e7294ac91/python_benedict-0.12.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be255fc88e219ecc912fd9d5ea9bca38", "sha256": "7e428810a852eb5152a863203f56d96b2c50e61bdc4be98b9e20e9c4207f0d68"}, "downloads": -1, "filename": "python-benedict-0.12.0.tar.gz", "has_sig": false, "md5_digest": "be255fc88e219ecc912fd9d5ea9bca38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16010, "upload_time": "2019-10-29T16:12:33", "upload_time_iso_8601": "2019-10-29T16:12:33.528693Z", "url": "https://files.pythonhosted.org/packages/5b/0b/dd6ebf4643f28d9edb56db357ecdb96433178e3ba256f8ce82653c0b3e8e/python-benedict-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "c1deced3c5c6f0ea86194aa2fc6ad6b3", "sha256": "b5f42eb0215719e71c49129845d68c7f594754f9c6ff690a1ae557db49eed470"}, "downloads": -1, "filename": "python_benedict-0.13.0-py2-none-any.whl", "has_sig": false, "md5_digest": "c1deced3c5c6f0ea86194aa2fc6ad6b3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20151, "upload_time": "2019-11-07T16:56:12", "upload_time_iso_8601": "2019-11-07T16:56:12.162787Z", "url": "https://files.pythonhosted.org/packages/92/72/4c96b3cc12ea6e9e7cb9a505cf05884b06acfc4b21f110aa733684393655/python_benedict-0.13.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "286f7e7ced44a20e24f8cd745cd6dff7", "sha256": "f5e5d64f4d55e873405d23e03ea8e280d3e4fe79af091c87fef80bb29730b185"}, "downloads": -1, "filename": "python-benedict-0.13.0.tar.gz", "has_sig": false, "md5_digest": "286f7e7ced44a20e24f8cd745cd6dff7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16958, "upload_time": "2019-11-07T16:56:14", "upload_time_iso_8601": "2019-11-07T16:56:14.385720Z", "url": "https://files.pythonhosted.org/packages/f7/b4/ada119bf2dacb682536f4572f77c1cf5b03f8aadb83c189ec5d4462672e8/python-benedict-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "31e3340f6200b316fbd5c99579d44801", "sha256": "1087260fd6e45357c600a294bc8840eca192782283448c559d4c7d14999f0cd3"}, "downloads": -1, "filename": "python_benedict-0.14.0-py2-none-any.whl", "has_sig": false, "md5_digest": "31e3340f6200b316fbd5c99579d44801", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 21943, "upload_time": "2019-12-18T10:20:46", "upload_time_iso_8601": "2019-12-18T10:20:46.588173Z", "url": "https://files.pythonhosted.org/packages/ad/6b/3a349c5decf42d6ae192fea9eb70b3b812ff1a1edb85b95e6cba9ad53bef/python_benedict-0.14.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96bb065210dd8f007732a60a5072ff39", "sha256": "700d629f4b698e525a38eb777b8a89b4b93328d2782feab57dc787c5c66e5c88"}, "downloads": -1, "filename": "python-benedict-0.14.0.tar.gz", "has_sig": false, "md5_digest": "96bb065210dd8f007732a60a5072ff39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18845, "upload_time": "2019-12-18T10:20:48", "upload_time_iso_8601": "2019-12-18T10:20:48.526956Z", "url": "https://files.pythonhosted.org/packages/76/2a/4c4b0c54761af1372a878ef43d1a6a2e9a0b5f0193a40d77f1a2354f2b66/python-benedict-0.14.0.tar.gz", "yanked": false}], "0.14.1": [{"comment_text": "", "digests": {"md5": "576b825f582c1c1c0beab9339c5d60ed", "sha256": "84962bfa7bf7e72ebbf819a28969818f3a2e6dfd01f144b40a115604827307fd"}, "downloads": -1, "filename": "python_benedict-0.14.1-py2-none-any.whl", "has_sig": false, "md5_digest": "576b825f582c1c1c0beab9339c5d60ed", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 21641, "upload_time": "2020-01-07T15:04:37", "upload_time_iso_8601": "2020-01-07T15:04:37.884152Z", "url": "https://files.pythonhosted.org/packages/5d/1a/7767f3c77f8adc58893b7d564b3feb1a0ba323c762f80a4ac4922a330d7d/python_benedict-0.14.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ca342c96d57f197c777087c8a144d5c", "sha256": "1ee9197204bc7d2f1356ed9c1ef2505d25c06c57f72ef706a2f5a05d431a3e0a"}, "downloads": -1, "filename": "python-benedict-0.14.1.tar.gz", "has_sig": false, "md5_digest": "2ca342c96d57f197c777087c8a144d5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18165, "upload_time": "2020-01-07T15:04:39", "upload_time_iso_8601": "2020-01-07T15:04:39.802472Z", "url": "https://files.pythonhosted.org/packages/f0/d1/d261f7f47fbd4605fe710ef82e327ba61866de45a23bf1cbbf735249cb01/python-benedict-0.14.1.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "27a0f6daeda015ba45a38a62cfbab543", "sha256": "37e9c34374a86fac592a7308db16dc6f881ee2d43fefe62b6f3b62c8867cb065"}, "downloads": -1, "filename": "python_benedict-0.15.0-py2-none-any.whl", "has_sig": false, "md5_digest": "27a0f6daeda015ba45a38a62cfbab543", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22442, "upload_time": "2020-01-13T13:59:36", "upload_time_iso_8601": "2020-01-13T13:59:36.491732Z", "url": "https://files.pythonhosted.org/packages/bf/c0/5cb4245990cd51b19ac116825663146e35d45df04529bf49645b182c7eba/python_benedict-0.15.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bf0d3af65cbdcc844958df0e79ba9f5", "sha256": "f19dfe50874301c9cc4c841eec29aaafa9f7a6cb10e1f7751f1da784363cc070"}, "downloads": -1, "filename": "python-benedict-0.15.0.tar.gz", "has_sig": false, "md5_digest": "0bf0d3af65cbdcc844958df0e79ba9f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19487, "upload_time": "2020-01-13T13:59:38", "upload_time_iso_8601": "2020-01-13T13:59:38.745224Z", "url": "https://files.pythonhosted.org/packages/b8/4f/4f4a1a5f00d415e5d9aea4be4c94950fc48fae1e5324062848cd73424d32/python-benedict-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "4c48b82393b4243e50eb3a33786082c5", "sha256": "4838f2dadf7ff63d2e8772d6b345269dfd67fc503a2c2f8382b39f274669a4e1"}, "downloads": -1, "filename": "python_benedict-0.16.0-py2-none-any.whl", "has_sig": false, "md5_digest": "4c48b82393b4243e50eb3a33786082c5", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 27384, "upload_time": "2020-01-30T14:51:05", "upload_time_iso_8601": "2020-01-30T14:51:05.525451Z", "url": "https://files.pythonhosted.org/packages/30/b8/667be039571be10c259c747193d072446635f7b26a3af06aebf022282b2e/python_benedict-0.16.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2116782a8cb8b3d4755a6a8b699af8e4", "sha256": "2abcd46542b2a03a8c3620cd35dbfc3c31c6b1302c545468c1a9ef58b773516d"}, "downloads": -1, "filename": "python-benedict-0.16.0.tar.gz", "has_sig": false, "md5_digest": "2116782a8cb8b3d4755a6a8b699af8e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22270, "upload_time": "2020-01-30T14:51:08", "upload_time_iso_8601": "2020-01-30T14:51:08.753372Z", "url": "https://files.pythonhosted.org/packages/26/31/5c654c4e89da3b31ed8202332f5c12161a60e28de1bff2b94359d62a000d/python-benedict-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "d0a61756f8a07329e5acd15979d7b7e8", "sha256": "6c896024dbc4e9305f89b501f7028599543ae861c47f94186201e263024450fd"}, "downloads": -1, "filename": "python_benedict-0.17.0-py2-none-any.whl", "has_sig": false, "md5_digest": "d0a61756f8a07329e5acd15979d7b7e8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 46404, "upload_time": "2020-02-06T14:38:48", "upload_time_iso_8601": "2020-02-06T14:38:48.980713Z", "url": "https://files.pythonhosted.org/packages/1d/a9/db709782297e08b32a17ea5b209f5c9198c21ff8a131ec34c1c38733e677/python_benedict-0.17.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a2b34b71a35f7fc65448e05fa104e31", "sha256": "188f967260ca508e7f9f181400d386109d4c526345ddd407c8ee042e7e72eba6"}, "downloads": -1, "filename": "python-benedict-0.17.0.tar.gz", "has_sig": false, "md5_digest": "6a2b34b71a35f7fc65448e05fa104e31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32001, "upload_time": "2020-02-06T14:38:51", "upload_time_iso_8601": "2020-02-06T14:38:51.218976Z", "url": "https://files.pythonhosted.org/packages/23/64/b469479689eb44a5019288ce2044ad590d76bce14bd8fb1a8ba180f67348/python-benedict-0.17.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "f1b9cde122d66beb7688dbef17f0122a", "sha256": "436fbe347fd7732683d9596cf11e19cd9326695bfe22cdf9d7ac5bb2432ea860"}, "downloads": -1, "filename": "python_benedict-0.18.0-py2-none-any.whl", "has_sig": false, "md5_digest": "f1b9cde122d66beb7688dbef17f0122a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 47275, "upload_time": "2020-02-21T13:39:20", "upload_time_iso_8601": "2020-02-21T13:39:20.676274Z", "url": "https://files.pythonhosted.org/packages/b8/57/025ad034c8b2cc1dca91eb5ade5975f9a44c30a5a760b6829019de40b532/python_benedict-0.18.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24cac3a7d0bb322af7046d1a9352cc5d", "sha256": "30f3e95b485c81c98697a4bdc87478fad53e31159129a9c8fd0e4e69e98752bc"}, "downloads": -1, "filename": "python-benedict-0.18.0.tar.gz", "has_sig": false, "md5_digest": "24cac3a7d0bb322af7046d1a9352cc5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32736, "upload_time": "2020-02-21T13:39:22", "upload_time_iso_8601": "2020-02-21T13:39:22.827449Z", "url": "https://files.pythonhosted.org/packages/c0/bf/a2a750b4bfd9a414daa77780c96f18480ff56bce87a512d27409fdded286/python-benedict-0.18.0.tar.gz", "yanked": false}], "0.18.1": [{"comment_text": "", "digests": {"md5": "4dd77c0e05e6dbe0ed6bd5bda87781f3", "sha256": "2f6946aec32e792fe0257f3ddb6ec16430cc77b30341533e0e031c2174686916"}, "downloads": -1, "filename": "python_benedict-0.18.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4dd77c0e05e6dbe0ed6bd5bda87781f3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 47360, "upload_time": "2020-03-13T13:02:23", "upload_time_iso_8601": "2020-03-13T13:02:23.724656Z", "url": "https://files.pythonhosted.org/packages/df/21/8f9abed23882c7f1c858705e5f4e055dd81fd9bece76984156562d0935d1/python_benedict-0.18.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b159972c5e272784874af9d6f8752470", "sha256": "e9c65b0e89dcbb6047f3814c9577641be1d131c77a8f38c85f2670703564e24e"}, "downloads": -1, "filename": "python-benedict-0.18.1.tar.gz", "has_sig": false, "md5_digest": "b159972c5e272784874af9d6f8752470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32813, "upload_time": "2020-03-13T13:02:25", "upload_time_iso_8601": "2020-03-13T13:02:25.969995Z", "url": "https://files.pythonhosted.org/packages/95/08/fc5af220d63583a45cdf81976af0fea616d18560a91251ce238621fe9b84/python-benedict-0.18.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6a913581230d8d51f1b5f42fc24cf576", "sha256": "4298687497956eb1486e66cf9b9196a6316da29587b8483dc19eb922fe614a88"}, "downloads": -1, "filename": "python-benedict-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6a913581230d8d51f1b5f42fc24cf576", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7092, "upload_time": "2019-05-20T15:31:20", "upload_time_iso_8601": "2019-05-20T15:31:20.079652Z", "url": "https://files.pythonhosted.org/packages/3b/22/681765e8a0c0b154f7bf13fe30bdf9ae4b149bcd97720c5df8d00e4f4614/python-benedict-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "19fb953c695c1b323a3012b827aa6da4", "sha256": "7b63b65a33e722be2860015a6f406da7a223f4d151c997fbef92ecac03c076d8"}, "downloads": -1, "filename": "python_benedict-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "19fb953c695c1b323a3012b827aa6da4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9704, "upload_time": "2019-06-11T08:12:36", "upload_time_iso_8601": "2019-06-11T08:12:36.058227Z", "url": "https://files.pythonhosted.org/packages/24/68/0fb3480ab1d872e45e8a411a40e5a819d522dbaac909b28f4cab4f877e24/python_benedict-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ca90c59966a8e67c7b9f329fc7ff3d3", "sha256": "d01f2da3278388fd4e328eb7a867a692f72e9e50e11fcee17e695b13a5b489e9"}, "downloads": -1, "filename": "python-benedict-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4ca90c59966a8e67c7b9f329fc7ff3d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8601, "upload_time": "2019-06-11T08:12:40", "upload_time_iso_8601": "2019-06-11T08:12:40.427491Z", "url": "https://files.pythonhosted.org/packages/42/13/8ebf201bccb539874c0497cfd14a677adcada36e9bfe54dd2d44acae2d9b/python-benedict-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "208ba21b796689de798e0b009e0b4c5d", "sha256": "72163f831d74ee0b80fdb34d50b5f99e2730371e9233dfc89d8dde8884978106"}, "downloads": -1, "filename": "python_benedict-0.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "208ba21b796689de798e0b009e0b4c5d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9704, "upload_time": "2019-06-11T12:35:05", "upload_time_iso_8601": "2019-06-11T12:35:05.752142Z", "url": "https://files.pythonhosted.org/packages/75/51/d039927a8ff1be270084735c9e6f52bb190be4d96e8bd3f2d080a99053ae/python_benedict-0.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2141a5327b97cb01f7c9202b8c5ea713", "sha256": "eaab096c43f75fcf1750a0e603dacfafffcde902189e1563fc4172c72618a640"}, "downloads": -1, "filename": "python-benedict-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2141a5327b97cb01f7c9202b8c5ea713", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8627, "upload_time": "2019-06-11T12:35:07", "upload_time_iso_8601": "2019-06-11T12:35:07.864929Z", "url": "https://files.pythonhosted.org/packages/a7/59/22a06f37fbc6f4e87232a36f644f65880ec64c893551618acae4260de245/python-benedict-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3e63f3a77c921b5a00ac5af909c5ac32", "sha256": "39f4c3fa999f0800c9f567518d379ed98d6c548cd6c6faa3af1f05b9dc2364cf"}, "downloads": -1, "filename": "python_benedict-0.3.2-py2-none-any.whl", "has_sig": false, "md5_digest": "3e63f3a77c921b5a00ac5af909c5ac32", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9725, "upload_time": "2019-06-11T16:43:23", "upload_time_iso_8601": "2019-06-11T16:43:23.919038Z", "url": "https://files.pythonhosted.org/packages/4d/94/263b44dd9aa16eeb3085ec0330df412ecb6c4f657050c2caade2cf8b4804/python_benedict-0.3.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bd6c5d9d8a279edac0e58133ac15afb", "sha256": "6a8c6ec9c06f52c9788ddac7907e19961a84958b49ddd0adeda4a478d2462830"}, "downloads": -1, "filename": "python-benedict-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7bd6c5d9d8a279edac0e58133ac15afb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8551, "upload_time": "2019-06-11T16:43:29", "upload_time_iso_8601": "2019-06-11T16:43:29.449265Z", "url": "https://files.pythonhosted.org/packages/79/93/e23b3446ccba58f0dc73930f4cd67497efb230177a8365abbd1b66ee127b/python-benedict-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2181e3ce00cee6cb071fce3206386b98", "sha256": "709f6ff033cc9331472362f710ca92017763b823c2ec09a8a9f556863f38764b"}, "downloads": -1, "filename": "python_benedict-0.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2181e3ce00cee6cb071fce3206386b98", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 11444, "upload_time": "2019-06-17T15:35:05", "upload_time_iso_8601": "2019-06-17T15:35:05.358780Z", "url": "https://files.pythonhosted.org/packages/49/0a/1c0bf52d7933851dae875c1d44cc64267cdfc20df95e98e01433dcf8f279/python_benedict-0.4.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03851309610e727d05291a59192981dc", "sha256": "9d3c27d81d358873fcd2b2ee34d8d81e593bb68d3adaa95d36e66f9647d6a5a6"}, "downloads": -1, "filename": "python-benedict-0.4.0.tar.gz", "has_sig": false, "md5_digest": "03851309610e727d05291a59192981dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9594, "upload_time": "2019-06-17T15:35:16", "upload_time_iso_8601": "2019-06-17T15:35:16.274927Z", "url": "https://files.pythonhosted.org/packages/56/f0/e43b6d8f55f2ec3a4800ebe273ebeb25135c6730beb8b3e3c76d371c927a/python-benedict-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "f932ffbd757f66ff6c8e46ec322e2ee2", "sha256": "aba6883d43f53a598ece5ce1bcd4d29ec4a434781e995fbf278c9d29acec966f"}, "downloads": -1, "filename": "python_benedict-0.4.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f932ffbd757f66ff6c8e46ec322e2ee2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 11443, "upload_time": "2019-06-18T09:50:17", "upload_time_iso_8601": "2019-06-18T09:50:17.447072Z", "url": "https://files.pythonhosted.org/packages/93/db/61ea0a802e208ae1cd9ce7a1c60ff9df3f7b4b93d3a06a80e019d2ccb7ae/python_benedict-0.4.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "381dfc5bf50da9f4c16ebb8166d9cc2b", "sha256": "19db5476ed2ed5096dbf2543fd1a7d1bd3ca0818bfbe1b60e7dc571a81f39415"}, "downloads": -1, "filename": "python-benedict-0.4.1.tar.gz", "has_sig": false, "md5_digest": "381dfc5bf50da9f4c16ebb8166d9cc2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9581, "upload_time": "2019-06-18T09:50:25", "upload_time_iso_8601": "2019-06-18T09:50:25.807499Z", "url": "https://files.pythonhosted.org/packages/6f/f7/a7712641c975871daf1186970461ac1da17f253b41307aebe0278c132b72/python-benedict-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "31ad16e721c094384a6546d0d938be29", "sha256": "eeee62c448b0c353e30073ae3b5c621f75f351b002b4a8b7604799883e000721"}, "downloads": -1, "filename": "python_benedict-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "31ad16e721c094384a6546d0d938be29", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12855, "upload_time": "2019-07-09T14:06:57", "upload_time_iso_8601": "2019-07-09T14:06:57.742144Z", "url": "https://files.pythonhosted.org/packages/cf/eb/b59afeabdadda4a468f012236728b382074c57e7b233219e3d3702afbc6c/python_benedict-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66092163d2bbb7d9ab3ddc8d18687192", "sha256": "30f74d470a9606599f0c00b5924f76b6cdf2ddb543dece44db40f817078c0511"}, "downloads": -1, "filename": "python-benedict-0.5.0.tar.gz", "has_sig": false, "md5_digest": "66092163d2bbb7d9ab3ddc8d18687192", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10331, "upload_time": "2019-07-09T14:06:59", "upload_time_iso_8601": "2019-07-09T14:06:59.534042Z", "url": "https://files.pythonhosted.org/packages/19/0e/fb0cf43d483521066899387fafc03010a8365c1b6ad18ead7b1067b6bbc2/python-benedict-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "6c4198675fe2e9b28217e855c17887ba", "sha256": "37261d93f2dd15de8d1c36b46c0b95d7d751b9ac3baaf4af3a0d732b1d9cb73c"}, "downloads": -1, "filename": "python_benedict-0.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "6c4198675fe2e9b28217e855c17887ba", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13147, "upload_time": "2019-07-10T16:36:25", "upload_time_iso_8601": "2019-07-10T16:36:25.983756Z", "url": "https://files.pythonhosted.org/packages/7b/60/3c4fb912773f6eb90d7a6e6ef7e9db5b07eee671783a6c3ed0f41cdc566c/python_benedict-0.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0325dff2f7f89c873a72707907aeee32", "sha256": "9bd5fade9cbd9b79b8bdafc353a8e37796567a67cbdb9b563f6027a3a5c22ec7"}, "downloads": -1, "filename": "python-benedict-0.5.1.tar.gz", "has_sig": false, "md5_digest": "0325dff2f7f89c873a72707907aeee32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10804, "upload_time": "2019-07-10T16:36:28", "upload_time_iso_8601": "2019-07-10T16:36:28.017243Z", "url": "https://files.pythonhosted.org/packages/2b/ec/24949fad4fa1f389b2f7152362d6c678cc270926cd19780958adf713ec7d/python-benedict-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "72f28fcd322a3684b7dbc41723f5f6ae", "sha256": "20712eaa03006f0c24af129dd4307eff4f285ee3a073e0535c7e3eeba3674d37"}, "downloads": -1, "filename": "python_benedict-0.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "72f28fcd322a3684b7dbc41723f5f6ae", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13431, "upload_time": "2019-07-19T09:08:30", "upload_time_iso_8601": "2019-07-19T09:08:30.454165Z", "url": "https://files.pythonhosted.org/packages/f9/a0/a52c8962666d88bf99f8bd59270a6a4f2936d9ed7ba436a4878006954349/python_benedict-0.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b18dd074d6b8965e91f9ffbe622474bf", "sha256": "1ce9eaa75dab20fc5e6a76e499d47b4f2c9d9c8ca6f165344676e11c0edb787c"}, "downloads": -1, "filename": "python-benedict-0.5.2.tar.gz", "has_sig": false, "md5_digest": "b18dd074d6b8965e91f9ffbe622474bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11166, "upload_time": "2019-07-19T09:08:32", "upload_time_iso_8601": "2019-07-19T09:08:32.316952Z", "url": "https://files.pythonhosted.org/packages/c4/94/eb9f89c64290455e888dc93feed01add19722dd7d0efdb5405c327f767b9/python-benedict-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c033d3e93ebf49c554c6cf2332cda337", "sha256": "af57eb164ea9ea8c66cfa0ba79dc3a18ce779df1615c9c84e67ba39c01234f75"}, "downloads": -1, "filename": "python_benedict-0.6.0-py2-none-any.whl", "has_sig": false, "md5_digest": "c033d3e93ebf49c554c6cf2332cda337", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13895, "upload_time": "2019-09-10T15:15:33", "upload_time_iso_8601": "2019-09-10T15:15:33.970364Z", "url": "https://files.pythonhosted.org/packages/c4/d1/25e46825eec5533086f4220286ca77af29672ce8da5dd89a66fb3de4babb/python_benedict-0.6.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c71125026617c32cda2f39950da3c67", "sha256": "90f581c1a56d099af3ba5b641148de9551d8750113fce9a54b22eef8c19f5880"}, "downloads": -1, "filename": "python-benedict-0.6.0.tar.gz", "has_sig": false, "md5_digest": "9c71125026617c32cda2f39950da3c67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11576, "upload_time": "2019-09-10T15:15:36", "upload_time_iso_8601": "2019-09-10T15:15:36.134620Z", "url": "https://files.pythonhosted.org/packages/cb/1e/e3d986364b3ccb7d0ed79aa9bad4e6fef12ac5cacc97c504215512fb59b5/python-benedict-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "bab6c2c9c6468d5112cce3ae1eb5f7dd", "sha256": "2dcab86cd0d74c6d26179c57bdb8a9dd8fd0c5bd261e369972371a2c8ec0403f"}, "downloads": -1, "filename": "python_benedict-0.7.0-py2-none-any.whl", "has_sig": false, "md5_digest": "bab6c2c9c6468d5112cce3ae1eb5f7dd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 14968, "upload_time": "2019-09-17T09:53:44", "upload_time_iso_8601": "2019-09-17T09:53:44.786093Z", "url": "https://files.pythonhosted.org/packages/f1/f2/bb6ee8c88063b534ba137e74f2ac66e4b69e6a67e2c34f2bf6d59d28166d/python_benedict-0.7.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c20f220b830db31df0035c0feeea099a", "sha256": "a11e1ffe7fea1bb230af1ffde1e179388a2d89c1d329761ba5a90c2329ee90e8"}, "downloads": -1, "filename": "python-benedict-0.7.0.tar.gz", "has_sig": false, "md5_digest": "c20f220b830db31df0035c0feeea099a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12634, "upload_time": "2019-09-17T09:53:47", "upload_time_iso_8601": "2019-09-17T09:53:47.078785Z", "url": "https://files.pythonhosted.org/packages/2a/c5/8164a69eeee30ddd655636a0e4576ccb889c77cdb8acbb1350d6c8c98fb9/python-benedict-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "b06d03a8536065441738bf3b06de64ad", "sha256": "389a49182be57e2db1e680162330134e20aa02aaae71d7671cf20829503c4b27"}, "downloads": -1, "filename": "python_benedict-0.8.0-py2-none-any.whl", "has_sig": false, "md5_digest": "b06d03a8536065441738bf3b06de64ad", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15443, "upload_time": "2019-09-20T14:25:24", "upload_time_iso_8601": "2019-09-20T14:25:24.924856Z", "url": "https://files.pythonhosted.org/packages/b2/d0/59147fc7759b2c49a0db889b323c4171e27fc0d021edf2c031dc42643cad/python_benedict-0.8.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e0d120d68c0300ba46795c9dd0598eb", "sha256": "7fdf50624f846a4a02d1e792f37f72bf0b6f1ba634170155d0dfed362cf9df94"}, "downloads": -1, "filename": "python-benedict-0.8.0.tar.gz", "has_sig": false, "md5_digest": "1e0d120d68c0300ba46795c9dd0598eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13365, "upload_time": "2019-09-20T14:25:27", "upload_time_iso_8601": "2019-09-20T14:25:27.222869Z", "url": "https://files.pythonhosted.org/packages/ca/01/a5df1dbaaea3f3dc79d59b241499f7b4cae5aa5e1eb3fcac8c3b71b9e4b4/python-benedict-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "ad5a7e85e5b99b293384aea380a9116a", "sha256": "1d0954d0916d270ca6a5432dbc1a9fa0bad965330c12003ca46658d2d2b93f2e"}, "downloads": -1, "filename": "python_benedict-0.9.0-py2-none-any.whl", "has_sig": false, "md5_digest": "ad5a7e85e5b99b293384aea380a9116a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15633, "upload_time": "2019-09-23T12:14:51", "upload_time_iso_8601": "2019-09-23T12:14:51.704639Z", "url": "https://files.pythonhosted.org/packages/3a/de/44c22ed9c650f74c42023d45f85e6c641360ac820e258bcc53a7f046e0c1/python_benedict-0.9.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14ac71730d4aa1ccc02c625c804b8949", "sha256": "4c6c49279f84fd4e9b2a9415cc62c2fefd044099c88aac69d51a043611816263"}, "downloads": -1, "filename": "python-benedict-0.9.0.tar.gz", "has_sig": false, "md5_digest": "14ac71730d4aa1ccc02c625c804b8949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13603, "upload_time": "2019-09-23T12:14:54", "upload_time_iso_8601": "2019-09-23T12:14:54.083066Z", "url": "https://files.pythonhosted.org/packages/c9/63/552d76504237f413c99d89933f68b6d940a6675fa6edb3c69e7ab5ab2ac8/python-benedict-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4dd77c0e05e6dbe0ed6bd5bda87781f3", "sha256": "2f6946aec32e792fe0257f3ddb6ec16430cc77b30341533e0e031c2174686916"}, "downloads": -1, "filename": "python_benedict-0.18.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4dd77c0e05e6dbe0ed6bd5bda87781f3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 47360, "upload_time": "2020-03-13T13:02:23", "upload_time_iso_8601": "2020-03-13T13:02:23.724656Z", "url": "https://files.pythonhosted.org/packages/df/21/8f9abed23882c7f1c858705e5f4e055dd81fd9bece76984156562d0935d1/python_benedict-0.18.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b159972c5e272784874af9d6f8752470", "sha256": "e9c65b0e89dcbb6047f3814c9577641be1d131c77a8f38c85f2670703564e24e"}, "downloads": -1, "filename": "python-benedict-0.18.1.tar.gz", "has_sig": false, "md5_digest": "b159972c5e272784874af9d6f8752470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32813, "upload_time": "2020-03-13T13:02:25", "upload_time_iso_8601": "2020-03-13T13:02:25.969995Z", "url": "https://files.pythonhosted.org/packages/95/08/fc5af220d63583a45cdf81976af0fea616d18560a91251ce238621fe9b84/python-benedict-0.18.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:44 2020"}