{"info": {"author": "Facundo Ferr\u00edn", "author_email": "facundo.ferrin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# pyTopoJSON \n[![](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/download/releases/3.4.0/) \n[![Build Status](https://travis-ci.com/fferrin/pytopojson.svg?branch=master)](https://travis-ci.com/fferrin/pytopojson)\n[![codecov](https://codecov.io/gh/fferrin/pytopojson/branch/master/graph/badge.svg)](https://codecov.io/gh/fferrin/pytopojson)\n[![PEP8](https://img.shields.io/badge/code%20style-pep8-orange.svg)](https://www.python.org/dev/peps/pep-0008/)\n[![Known Vulnerabilities](https://snyk.io/test/github/fferrin/pytopojson/badge.svg?targetFile=requirements.txt)](https://snyk.io/test/github/fferrin/pytopojson)\n\n**pyTopoJSON** is based on the work of \n[Mike Bostock](https://github.com/topojson/topojson-server) and it provides \ntools for converting GeoJSON to [TopoJSON](https://github.com/topojson). \nSee [How to Infer Topology](https://bost.ocks.org/mike/topology/) for details \non how the topology is constructed. See also \n[us-atlas](https://github.com/topojson/us-atlas) and \n[world-atlas](https://github.com/topojson/world-atlas) for pre-built TopoJSON.\n\n\n## Installation\n\n#### Dependencies\n\n**pytopojson** requires:\n\n- NumPy (>= 1.15.0)\n\n#### User installation\n\nIf you already have a working installation of NumPy,\nthe easiest way to install **pytopojson** is using ``pip``:\n\n    pip install pytopojson\n\n## API Reference\n\n<a name=\"topology\" href=\"#topology\">#</a> pytopojson.topology.<b>Topology()</b>\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/topology.py \"Source\")\n\nYou must create a `Topology` object to compute the topology:\n\n```python\n# Import topology\nfrom pytopojson import topology\n\n# Create Topology object\ntopology_ = topology.Topology()\n\n# Call it using a GeoJSON (dict) object and a quantization value (optional)\ntopojson = topology_(geojson, quantization=quantization)\n```\n\nThis returns a TopoJSON topology for the specified \n[GeoJSON *objects*](http://geojson.org/geojson-spec.html#geojson-objects). \nThe returned topology makes a shallow copy of the input `objects`: \nthe identifier, bounding box, properties and coordinates of input objects may \nbe shared with the output topology.\n\nIf a `quantization` parameter is specified, the input geometry is quantized \nprior to computing the topology, the returned topology is quantized, and its \narcs are \n[delta-encoded](https://github.com/topojson/topojson-specification/blob/master/README.md#213-arcs). \nQuantization is recommended to improve the quality of the topology if the \ninput geometry is messy (*i.e.*, small floating point error means that \nadjacent boundaries do not have identical values); typical values are powers \nof ten, such as 1e4, 1e5 or 1e6. \n\n<a name=\"feature\" href=\"#feature\">#</a> \npytopojson.feature.<b>Feature</b>(<i>topology</i>, <i>object</i>) \n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/feature.py \"Source\")\n\nReturns the GeoJSON Feature or FeatureCollection for the specified *object* in \nthe given `topology`. If the specified object is a string, it is treated as \n`topology*['objects'][object]`. Then, if the object is a GeometryCollection, \na FeatureCollection is returned, and each geometry in the collection is \nmapped to a Feature. Otherwise, a Feature is returned. The returned feature is \na shallow copy of the source `object`: they may share identifiers, bounding \nboxes, properties and coordinates.\n\nSome examples:\n\n* A point is mapped to a feature with a geometry object of type \"Point\".\n* Likewise for line strings, polygons, and other simple geometries.\n* A null geometry object (of type null in TopoJSON) is mapped to a feature \nwith a null geometry object.\n* A geometry collection of points is mapped to a feature collection of \nfeatures, each with a point geometry.\n* A geometry collection of geometry collections is mapped to a feature \ncollection of features, each with a geometry collection.\n\nSee [test_feature.py](https://github.com/fferrin/pytopojson/blob/master/tests/test_feature.py) \nfor more examples.\n\n<a name=\"merge\" href=\"#merge\">#</a> \npytopojson.merge.<b>Merge</b>(<i>topology</i>, <i>objects</i>) \n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py \"Source\")\n\nReturns the GeoJSON MultiPolygon geometry object representing the union for \nthe specified array of Polygon and MultiPolygon `objects` in the given \n`topology`. Interior borders shared by adjacent polygons are removed. \nSee [Merging States](https://bl.ocks.org/mbostock/5416405) for an example. \nThe returned geometry is a shallow copy of the source `object`: they may share \ncoordinates.\n\n<a name=\"mergeArcs\" href=\"#mergeArcs\">#</a> \npytopojson.merge.<b>MergeArcs</b>(<i>topology</i>, <i>objects</i>) \n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py \"Source\")\n\nEquivalent to [topojson.merge.Merge()](#merge), but returns TopoJSON rather \nthan GeoJSON. The returned geometry is a shallow copy of the source `object`: \nthey may share coordinates.\n\n<a name=\"mesh\" href=\"#mesh\">#</a> \npytopojson.mesh.<b>Mesh</b>(<i>topology</i>[, <i>object</i>[, <i>filter</i>]])\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py \"Source\")\n\nReturns the GeoJSON MultiLineString geometry object representing the mesh for \nthe specified `object` in the given `topology`. This is useful for rendering \nstrokes in complicated objects efficiently, as edges that are shared by \nmultiple features are only stroked once. If `object` is not specified, a mesh \nof the entire topology is returned. The returned geometry is a shallow copy of \nthe source `object`: they may share coordinates.\n\nAn optional `filter` function may be specified to prune arcs from the returned \nmesh using the topology. The filter function is called once for each candidate \narc and takes two arguments, `a` and `b`, two geometry objects that share that \narc. Each arc is only included in the resulting mesh if the filter function \nreturns `True`. For typical map topologies the geometries `a` and `b` are \nadjacent polygons and the candidate arc is their boundary. If an arc is only \nused by a single geometry then `a` and `b` are identical. This property is \nuseful for separating interior and exterior boundaries; an easy way to produce \na mesh of interior boundaries is:\n\n```python\n# Import topology\nfrom pytopojson import mesh\n\n# Create Mesh object and filter\nmesh_ = mesh.Mesh()\ncustom_filter = lambda x, y: x != y\n\ninteriors = mesh_(topology, object_, custom_filter)\n```\n\nSee this [county choropleth](https://bl.ocks.org/mbostock/4060606) for example. \nNote: the `a` and `b` objects are TopoJSON objects (pulled directly from the \ntopology), and not automatically converted to GeoJSON features as by \n[topojson.feature.Feature()](#feature).\n\n<a name=\"meshArcs\" href=\"#meshArcs\">#</a> \npytopojson.mesh.<b>MeshArcs</b>(<i>topology</i>[, <i>object</i>[, <i>filter</i>]])\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py \"Source\")\n\nEquivalent to [topojson.mesh.Mesh()](#mesh), but returns TopoJSON rather than \nGeoJSON. The returned geometry is a shallow copy of the source `object`: they \nmay share coordinates.\n\n<a name=\"neighbors\" href=\"#neighbors\">#</a> \npytopojson.neighbors.<b>Neighbors</b>(<i>objects</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/neighbors.py \"Source\")\n\nReturns an array representing the set of neighboring objects for each object \nin the specified `objects` array. The returned array has the same number of \nelements as the input array; each element `i` in the returned array is the \narray of indexes for neighbors of object `i` in the input array. For example, \nif the specified objects array contains the features `foo` and `bar`, and \nthese features are neighbors, the returned array will be `[[1], [0]]`, \nindicating that `foo` is a neighbor of `bar` and vice versa. Each array of \nneighbor indexes for each object is guaranteed to be sorted in ascending order.\n\nFor a practical example, see the \n[world map](https://bl.ocks.org/mbostock/4180634) with topological coloring.\n\n### Transforms\n\n<a name=\"bbox\" href=\"#bbox\">#</a> \npytopojson.bbox.<b>BBox</b>(<i>topology</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/bbox.py \"Source\")\n\nReturns the computed \n[bounding box](https://github.com/topojson/topojson-specification#3-bounding-boxes) \nof the specified `topology` [*x*\u2080, *y*\u2080, *x*\u2081, *y*\u2081] where *x*\u2080 is the minimum \n*x*-value, *y*\u2080 is the minimum *y*-value, *x*\u2081 is the maximum *x*-value, and \n*y*\u2081 is the maximum *y*-value. If the `topology` has no points and no arcs, \nthe returned bounding box is [\u221e, \u221e, -\u221e, -\u221e]. (This method ignores the existing\n `topology`.bbox, if any.)\n\n<a name=\"quantize\" href=\"#quantize\">#</a> \npytopojson.quantize.<b>Quantize</b>(<i>topology</i>, <i>transform</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/quantize.py \"Source\")\n\nReturns a shallow copy of the specified `topology` with \n[quantized and delta-encoded](https://github.com/topojson/topojson-specification#213-arcs) \narcs according to the specified \n[`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms). \nIf the `topology` is already quantized, an error is thrown. See also \n[topoquantize](#topoquantize).\n\nIf a quantization number `n` is specified instead of a `transform` object, the \ncorresponding transform object is first computed using the bounding box of the \ntopology. In this case, the quantization number `n` must be a positive integer \ngreater than one which determines the maximum number of expressible values per \ndimension in the resulting quantized coordinates; typically, a power of ten is \nchosen such as 1e4, 1e5 or 1e6. If the `topology` does not already have a \n`topology`.bbox, one is computed using [topojson.bbox.BBox](#bbox).\n\n<a name=\"transform\" href=\"#transform\">#</a> \npytopojson.transform.<b>Transform</b>(<i>transform</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/transform.py \"Source\")\n\nIf the specified \n[`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms) \nis non-null, returns a [point `transform` function](#_transform) to remove \ndelta-encoding and apply the transform. If the `transform` is null, returns \nthe identity function.\n\n<a name=\"untransform\" href=\"#untransform\">#</a> \npytopojson.untransform.<b>Untransform</b>(<i>transform</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/untransform.py \"Source\")\n\nIf the specified \n[`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms) \nis non-null, returns a [point `transform` function](#_transform) to apply \nquantized delta-encoding and remove the transform. If the `transform` is null, \nreturns the identity function. See also [topojson.quantize.Quantize()](#quantize).\n\n## Command-Line Reference\n\nSome command-line tools are also provided:\n\n### geo2topo\n\n<a name=\"geo2topo\" href=\"#geo2topo\">#</a> <b>geo2topo</b> [<i>options\u2026</i>] \n[<i>name</i>=]<i>file</i>\u2026 \n[<>](https://github.com/fferrin/pytopojson/blob/master/bin/geo2topo.py \"Source\")\n\nConverts one or more GeoJSON objects to an output topology. For example, to \nconvert a GeoJSON FeatureCollection in the input file us-states.json to a \nTopologyJSON topology in the output file us.json:\n\n```bash\npython geo2topo.py states=us-states.json > us.json\n```\n\nThe resulting topology has a \u201cstates\u201d object which corresponds to the input \ngeometry. For convenience, you can omit the object name and specify only the \noutput `file` name; the object name will then be the basename of the file, \nwith the directory and extension removed. For example, to convert the \nstates.json GeoJSON FeatureCollection to a TopologyJSON topology with the \n\u201cstates\u201d object in us.json:\n\n```bash\npython geo2topo.py states.json > us.json\n```\n\nAny properties and identifiers of input \n[feature objects](https://tools.ietf.org/html/rfc7946#section-3.2) are \npropagated to the output. If you want to transform or filter properties, \ntry [ndjson-cli](https://github.com/mbostock/ndjson-cli) as demonstrated in \n[Command-Line Cartography](https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c).\n\n<a name=\"geo2topo_help\" href=\"#geo2topo_help\">#</a> geo2topo <b>-h</b>\n<br><a href=\"#geo2topo_help\">#</a> geo2topo <b>--help</b>\n\nOutput usage information.\n\n<a name=\"geo2topo_version\" href=\"#geo2topo_version\">#</a> geo2topo <b>-v</b>\n<br><a href=\"#geo2topo_version\">#</a> geo2topo <b>--version</b>\n\nOutput the version number.\n\n<a name=\"geo2topo_out\" href=\"#geo2topo_out\">#</a> geo2topo <b>-o</b> <i>file</i>\n<br><a href=\"#geo2topo_out\">#</a> geo2topo <b>--out</b> <i>file</i>\n\nSpecify the output TopoJSON file name. Defaults to \u201c-\u201d for stdout.\n\n<a name=\"geo2topo_quantization\" href=\"#geo2topo_quantization\">#</a> geo2topo <b>-q</b> <i>count</i>\n<br><a href=\"#geo2topo_quantization\">#</a> geo2topo <b>--quantization</b> <i>count</i>\n\nSpecify a pre-quantization paramter. 0 disables quantization. See \n<a href=\"#topology\">pytopojson.topology.Topology</a> for a description of \nquantization.\n\n\n### topo2geo\n\n<a name=\"topo2geo\" href=\"#topo2geo\">#</a> <b>topo2geo</b> [<i>options\u2026</i>] \n[<i>name</i>=]<i>file</i>\u2026 \n[<>](https://github.com/fferrin/pytopojson/blob/master/bin/topo2geo.py \"Source\")\n\nConverts one or more TopoJSON objects from an input topology to one or more \nGeoJSON features. For example, to convert the \"states\" TopoJSON \n`GeometryCollection` object in `us.json` to a GeoJSON feature collection in \n`us-states.json`:\n\n```bash\npython topo2geo.py states=us-states.json < us.json\n```\n\nFor convenience, you can omit the object name and specify only the file *name*; \nthe object name will be the basename of the file, with the directory and \nextension removed. For example, to convert the \"states\" TopoJSON \n`GeometryCollection` object in `us.json` to a GeoJSON feature collection in \n`states.json`:\n\n```bash\npython topo2geo.py states.json < us.json\n```\n\nSee also [geo2topo](https://github.com/fferrin/pytopojson/blob/master/README.md#geo2topo).\n\nTo list the available object names, use [--list](#topo2geo_list).\n\n<a name=\"topo2geo_help\" href=\"#topo2geo_help\">#</a> topo2geo <b>-h</b>\n<br><a href=\"#topo2geo_help\">#</a> topo2geo <b>--help</b>\n\nOutput usage information.\n\n<a name=\"topo2geo_version\" href=\"#topo2geo_version\">#</a> topo2geo <b>-v</b>\n<br><a href=\"#topo2geo_version\">#</a> topo2geo <b>--version</b>\n\nOutput the version number.\n\n<a name=\"topo2geo_in\" href=\"#topo2geo_in\">#</a> topo2geo <b>-i</b> <i>file</i>\n<br><a href=\"#topo2geo_in\">#</a> topo2geo <b>--in</b> <i>file</i>\n\nSpecify the input TopoJSON file name. Defaults to \"-\" for stdin.\n\n<a name=\"topo2geo_list\" href=\"#topo2geo_list\">#</a> topo2geo <b>-l</b>\n<br><a href=\"#topo2geo_list\">#</a> topo2geo <b>--list</b>\n\nList the names of the objects in the input topology, and then exit. For \nexample, this:\n\n```bash\npython topo2geo.py -l < us.json\n```\n\nWill output this:\n\n```\ncounties\nstates\nnation\n```\n\n### topoquantize\n\n<a name=\"topoquantize\" href=\"#topoquantize\">#</a> <b>topoquantize</b>\n[<i>options\u2026</i>] -q <q> [<i>input</i>] \n[<>](https://github.com/fferrin/pytopojson/blob/master/bin/topoquantize.py \"Source\")\n\nQuantizes the coordinates of the input TopoJSON topology and \n[delta-encodes](https://github.com/topojson/topojson-specification#213-arcs) \nthe topology\u2019s arcs. The quantization parameter `q` must be a positive integer \ngreater than one, and determines the maximum expressible number of unique \nvalues per dimension in the resulting quantized coordinates; typically, a power \nof ten is chosen such as 1e4, 1e5 or 1e6. If the `topology` does not already \nhave a [bbox](#bbox), one is computed and assigned. If the `topology` is \nalready quantized, an error is thrown. See also \n[pytopojson.quantize.Quantize](#quantize).\n\n<a name=\"topoquantize_help\" href=\"#topoquantize_help\">#</a> topoquantize <b>-h</b>\n<br><a href=\"#topoquantize_help\">#</a> topoquantize <b>--help</b>\n\nOutput usage information.\n\n<a name=\"topoquantize_version\" href=\"#topoquantize_version\">#</a> \ntopoquantize <b>-v</b>\n<br><a href=\"#topoquantize_version\">#</a> topoquantize <b>--version</b>\n\nOutput the version number.\n\n<a name=\"topoquantize_in\" href=\"#topoquantize_in\">#</a> \ntopoquantize <b>-i</b> <i>input</i>\n<br><a href=\"#topoquantize_in\">#</a> topoquantize <b>--in</b> <i>input</i>\n\nSpecify the input TopoJSON. Defaults to \"-\" for stdin.\n\n<a name=\"topoquantize_out\" href=\"#topoquantize_out\">#</a> \ntopoquantize <b>-o</b> <i>output</i>\n<br><a href=\"#topoquantize_out\">#</a> topoquantize <b>--out</b> <i>output</i>\n\nSpecify the output TopoJSON file name. Defaults to \"-\" for stdout.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fferrin/pytopojson", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytopojson", "package_url": "https://pypi.org/project/pytopojson/", "platform": "", "project_url": "https://pypi.org/project/pytopojson/", "project_urls": {"Homepage": "https://github.com/fferrin/pytopojson"}, "release_url": "https://pypi.org/project/pytopojson/1.0.0/", "requires_dist": ["numpy (>=1.15.0)"], "requires_python": ">=3.7.3", "summary": "An extension to GeoJSON that encodes topology", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyTopoJSON</h1>\n<p><a href=\"https://www.python.org/download/releases/3.4.0/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99a5180f32db379110e9948c7de1aaf8f77bf2e8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372d626c75652e737667\"></a>\n<a href=\"https://travis-ci.com/fferrin/pytopojson\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33b70ab698d926e5cfc40c1bd50e0e5820bb4ce4/68747470733a2f2f7472617669732d63692e636f6d2f6666657272696e2f7079746f706f6a736f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/fferrin/pytopojson\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3aeb73583ea7a967ec1d49616b35b4bb93ff8f17/68747470733a2f2f636f6465636f762e696f2f67682f6666657272696e2f7079746f706f6a736f6e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\"><img alt=\"PEP8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41f7bd188e2af668ecd0a553dfc66df3c46f42af/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d706570382d6f72616e67652e737667\"></a>\n<a href=\"https://snyk.io/test/github/fferrin/pytopojson\" rel=\"nofollow\"><img alt=\"Known Vulnerabilities\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/296be493fbd18b9e22715187b7487a6aaa775a15/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f6666657272696e2f7079746f706f6a736f6e2f62616467652e7376673f74617267657446696c653d726571756972656d656e74732e747874\"></a></p>\n<p><strong>pyTopoJSON</strong> is based on the work of\n<a href=\"https://github.com/topojson/topojson-server\" rel=\"nofollow\">Mike Bostock</a> and it provides\ntools for converting GeoJSON to <a href=\"https://github.com/topojson\" rel=\"nofollow\">TopoJSON</a>.\nSee <a href=\"https://bost.ocks.org/mike/topology/\" rel=\"nofollow\">How to Infer Topology</a> for details\non how the topology is constructed. See also\n<a href=\"https://github.com/topojson/us-atlas\" rel=\"nofollow\">us-atlas</a> and\n<a href=\"https://github.com/topojson/world-atlas\" rel=\"nofollow\">world-atlas</a> for pre-built TopoJSON.</p>\n<h2>Installation</h2>\n<h4>Dependencies</h4>\n<p><strong>pytopojson</strong> requires:</p>\n<ul>\n<li>NumPy (&gt;= 1.15.0)</li>\n</ul>\n<h4>User installation</h4>\n<p>If you already have a working installation of NumPy,\nthe easiest way to install <strong>pytopojson</strong> is using <code>pip</code>:</p>\n<pre><code>pip install pytopojson\n</code></pre>\n<h2>API Reference</h2>\n<p><a href=\"#topology\" rel=\"nofollow\">#</a> pytopojson.topology.<b>Topology()</b>\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/topology.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>You must create a <code>Topology</code> object to compute the topology:</p>\n<pre><span class=\"c1\"># Import topology</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytopojson</span> <span class=\"kn\">import</span> <span class=\"n\">topology</span>\n\n<span class=\"c1\"># Create Topology object</span>\n<span class=\"n\">topology_</span> <span class=\"o\">=</span> <span class=\"n\">topology</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Call it using a GeoJSON (dict) object and a quantization value (optional)</span>\n<span class=\"n\">topojson</span> <span class=\"o\">=</span> <span class=\"n\">topology_</span><span class=\"p\">(</span><span class=\"n\">geojson</span><span class=\"p\">,</span> <span class=\"n\">quantization</span><span class=\"o\">=</span><span class=\"n\">quantization</span><span class=\"p\">)</span>\n</pre>\n<p>This returns a TopoJSON topology for the specified\n<a href=\"http://geojson.org/geojson-spec.html#geojson-objects\" rel=\"nofollow\">GeoJSON <em>objects</em></a>.\nThe returned topology makes a shallow copy of the input <code>objects</code>:\nthe identifier, bounding box, properties and coordinates of input objects may\nbe shared with the output topology.</p>\n<p>If a <code>quantization</code> parameter is specified, the input geometry is quantized\nprior to computing the topology, the returned topology is quantized, and its\narcs are\n<a href=\"https://github.com/topojson/topojson-specification/blob/master/README.md#213-arcs\" rel=\"nofollow\">delta-encoded</a>.\nQuantization is recommended to improve the quality of the topology if the\ninput geometry is messy (<em>i.e.</em>, small floating point error means that\nadjacent boundaries do not have identical values); typical values are powers\nof ten, such as 1e4, 1e5 or 1e6.</p>\n<p><a href=\"#feature\" rel=\"nofollow\">#</a>\npytopojson.feature.<b>Feature</b>(<i>topology</i>, <i>object</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/feature.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Returns the GeoJSON Feature or FeatureCollection for the specified <em>object</em> in\nthe given <code>topology</code>. If the specified object is a string, it is treated as\n<code>topology*['objects'][object]</code>. Then, if the object is a GeometryCollection,\na FeatureCollection is returned, and each geometry in the collection is\nmapped to a Feature. Otherwise, a Feature is returned. The returned feature is\na shallow copy of the source <code>object</code>: they may share identifiers, bounding\nboxes, properties and coordinates.</p>\n<p>Some examples:</p>\n<ul>\n<li>A point is mapped to a feature with a geometry object of type \"Point\".</li>\n<li>Likewise for line strings, polygons, and other simple geometries.</li>\n<li>A null geometry object (of type null in TopoJSON) is mapped to a feature\nwith a null geometry object.</li>\n<li>A geometry collection of points is mapped to a feature collection of\nfeatures, each with a point geometry.</li>\n<li>A geometry collection of geometry collections is mapped to a feature\ncollection of features, each with a geometry collection.</li>\n</ul>\n<p>See <a href=\"https://github.com/fferrin/pytopojson/blob/master/tests/test_feature.py\" rel=\"nofollow\">test_feature.py</a>\nfor more examples.</p>\n<p><a href=\"#merge\" rel=\"nofollow\">#</a>\npytopojson.merge.<b>Merge</b>(<i>topology</i>, <i>objects</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Returns the GeoJSON MultiPolygon geometry object representing the union for\nthe specified array of Polygon and MultiPolygon <code>objects</code> in the given\n<code>topology</code>. Interior borders shared by adjacent polygons are removed.\nSee <a href=\"https://bl.ocks.org/mbostock/5416405\" rel=\"nofollow\">Merging States</a> for an example.\nThe returned geometry is a shallow copy of the source <code>object</code>: they may share\ncoordinates.</p>\n<p><a href=\"#mergeArcs\" rel=\"nofollow\">#</a>\npytopojson.merge.<b>MergeArcs</b>(<i>topology</i>, <i>objects</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Equivalent to <a href=\"#merge\" rel=\"nofollow\">topojson.merge.Merge()</a>, but returns TopoJSON rather\nthan GeoJSON. The returned geometry is a shallow copy of the source <code>object</code>:\nthey may share coordinates.</p>\n<p><a href=\"#mesh\" rel=\"nofollow\">#</a>\npytopojson.mesh.<b>Mesh</b>(<i>topology</i>[, <i>object</i>[, <i>filter</i>]])\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Returns the GeoJSON MultiLineString geometry object representing the mesh for\nthe specified <code>object</code> in the given <code>topology</code>. This is useful for rendering\nstrokes in complicated objects efficiently, as edges that are shared by\nmultiple features are only stroked once. If <code>object</code> is not specified, a mesh\nof the entire topology is returned. The returned geometry is a shallow copy of\nthe source <code>object</code>: they may share coordinates.</p>\n<p>An optional <code>filter</code> function may be specified to prune arcs from the returned\nmesh using the topology. The filter function is called once for each candidate\narc and takes two arguments, <code>a</code> and <code>b</code>, two geometry objects that share that\narc. Each arc is only included in the resulting mesh if the filter function\nreturns <code>True</code>. For typical map topologies the geometries <code>a</code> and <code>b</code> are\nadjacent polygons and the candidate arc is their boundary. If an arc is only\nused by a single geometry then <code>a</code> and <code>b</code> are identical. This property is\nuseful for separating interior and exterior boundaries; an easy way to produce\na mesh of interior boundaries is:</p>\n<pre><span class=\"c1\"># Import topology</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytopojson</span> <span class=\"kn\">import</span> <span class=\"n\">mesh</span>\n\n<span class=\"c1\"># Create Mesh object and filter</span>\n<span class=\"n\">mesh_</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">Mesh</span><span class=\"p\">()</span>\n<span class=\"n\">custom_filter</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">y</span>\n\n<span class=\"n\">interiors</span> <span class=\"o\">=</span> <span class=\"n\">mesh_</span><span class=\"p\">(</span><span class=\"n\">topology</span><span class=\"p\">,</span> <span class=\"n\">object_</span><span class=\"p\">,</span> <span class=\"n\">custom_filter</span><span class=\"p\">)</span>\n</pre>\n<p>See this <a href=\"https://bl.ocks.org/mbostock/4060606\" rel=\"nofollow\">county choropleth</a> for example.\nNote: the <code>a</code> and <code>b</code> objects are TopoJSON objects (pulled directly from the\ntopology), and not automatically converted to GeoJSON features as by\n<a href=\"#feature\" rel=\"nofollow\">topojson.feature.Feature()</a>.</p>\n<p><a href=\"#meshArcs\" rel=\"nofollow\">#</a>\npytopojson.mesh.<b>MeshArcs</b>(<i>topology</i>[, <i>object</i>[, <i>filter</i>]])\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Equivalent to <a href=\"#mesh\" rel=\"nofollow\">topojson.mesh.Mesh()</a>, but returns TopoJSON rather than\nGeoJSON. The returned geometry is a shallow copy of the source <code>object</code>: they\nmay share coordinates.</p>\n<p><a href=\"#neighbors\" rel=\"nofollow\">#</a>\npytopojson.neighbors.<b>Neighbors</b>(<i>objects</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/neighbors.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Returns an array representing the set of neighboring objects for each object\nin the specified <code>objects</code> array. The returned array has the same number of\nelements as the input array; each element <code>i</code> in the returned array is the\narray of indexes for neighbors of object <code>i</code> in the input array. For example,\nif the specified objects array contains the features <code>foo</code> and <code>bar</code>, and\nthese features are neighbors, the returned array will be <code>[[1], [0]]</code>,\nindicating that <code>foo</code> is a neighbor of <code>bar</code> and vice versa. Each array of\nneighbor indexes for each object is guaranteed to be sorted in ascending order.</p>\n<p>For a practical example, see the\n<a href=\"https://bl.ocks.org/mbostock/4180634\" rel=\"nofollow\">world map</a> with topological coloring.</p>\n<h3>Transforms</h3>\n<p><a href=\"#bbox\" rel=\"nofollow\">#</a>\npytopojson.bbox.<b>BBox</b>(<i>topology</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/bbox.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Returns the computed\n<a href=\"https://github.com/topojson/topojson-specification#3-bounding-boxes\" rel=\"nofollow\">bounding box</a>\nof the specified <code>topology</code> [<em>x</em>\u2080, <em>y</em>\u2080, <em>x</em>\u2081, <em>y</em>\u2081] where <em>x</em>\u2080 is the minimum\n<em>x</em>-value, <em>y</em>\u2080 is the minimum <em>y</em>-value, <em>x</em>\u2081 is the maximum <em>x</em>-value, and\n<em>y</em>\u2081 is the maximum <em>y</em>-value. If the <code>topology</code> has no points and no arcs,\nthe returned bounding box is [\u221e, \u221e, -\u221e, -\u221e]. (This method ignores the existing\n<code>topology</code>.bbox, if any.)</p>\n<p><a href=\"#quantize\" rel=\"nofollow\">#</a>\npytopojson.quantize.<b>Quantize</b>(<i>topology</i>, <i>transform</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/quantize.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Returns a shallow copy of the specified <code>topology</code> with\n<a href=\"https://github.com/topojson/topojson-specification#213-arcs\" rel=\"nofollow\">quantized and delta-encoded</a>\narcs according to the specified\n<a href=\"https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms\" rel=\"nofollow\"><code>transform</code> object</a>.\nIf the <code>topology</code> is already quantized, an error is thrown. See also\n<a href=\"#topoquantize\" rel=\"nofollow\">topoquantize</a>.</p>\n<p>If a quantization number <code>n</code> is specified instead of a <code>transform</code> object, the\ncorresponding transform object is first computed using the bounding box of the\ntopology. In this case, the quantization number <code>n</code> must be a positive integer\ngreater than one which determines the maximum number of expressible values per\ndimension in the resulting quantized coordinates; typically, a power of ten is\nchosen such as 1e4, 1e5 or 1e6. If the <code>topology</code> does not already have a\n<code>topology</code>.bbox, one is computed using <a href=\"#bbox\" rel=\"nofollow\">topojson.bbox.BBox</a>.</p>\n<p><a href=\"#transform\" rel=\"nofollow\">#</a>\npytopojson.transform.<b>Transform</b>(<i>transform</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/transform.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>If the specified\n<a href=\"https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms\" rel=\"nofollow\"><code>transform</code> object</a>\nis non-null, returns a <a href=\"#_transform\" rel=\"nofollow\">point <code>transform</code> function</a> to remove\ndelta-encoding and apply the transform. If the <code>transform</code> is null, returns\nthe identity function.</p>\n<p><a href=\"#untransform\" rel=\"nofollow\">#</a>\npytopojson.untransform.<b>Untransform</b>(<i>transform</i>)\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/pytopojson/untransform.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>If the specified\n<a href=\"https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms\" rel=\"nofollow\"><code>transform</code> object</a>\nis non-null, returns a <a href=\"#_transform\" rel=\"nofollow\">point <code>transform</code> function</a> to apply\nquantized delta-encoding and remove the transform. If the <code>transform</code> is null,\nreturns the identity function. See also <a href=\"#quantize\" rel=\"nofollow\">topojson.quantize.Quantize()</a>.</p>\n<h2>Command-Line Reference</h2>\n<p>Some command-line tools are also provided:</p>\n<h3>geo2topo</h3>\n<p><a href=\"#geo2topo\" rel=\"nofollow\">#</a> <b>geo2topo</b> [<i>options\u2026</i>]\n[<i>name</i>=]<i>file</i>\u2026\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/bin/geo2topo.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Converts one or more GeoJSON objects to an output topology. For example, to\nconvert a GeoJSON FeatureCollection in the input file us-states.json to a\nTopologyJSON topology in the output file us.json:</p>\n<pre>python geo2topo.py <span class=\"nv\">states</span><span class=\"o\">=</span>us-states.json &gt; us.json\n</pre>\n<p>The resulting topology has a \u201cstates\u201d object which corresponds to the input\ngeometry. For convenience, you can omit the object name and specify only the\noutput <code>file</code> name; the object name will then be the basename of the file,\nwith the directory and extension removed. For example, to convert the\nstates.json GeoJSON FeatureCollection to a TopologyJSON topology with the\n\u201cstates\u201d object in us.json:</p>\n<pre>python geo2topo.py states.json &gt; us.json\n</pre>\n<p>Any properties and identifiers of input\n<a href=\"https://tools.ietf.org/html/rfc7946#section-3.2\" rel=\"nofollow\">feature objects</a> are\npropagated to the output. If you want to transform or filter properties,\ntry <a href=\"https://github.com/mbostock/ndjson-cli\" rel=\"nofollow\">ndjson-cli</a> as demonstrated in\n<a href=\"https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c\" rel=\"nofollow\">Command-Line Cartography</a>.</p>\n<p><a href=\"#geo2topo_help\" rel=\"nofollow\">#</a> geo2topo <b>-h</b>\n<br><a href=\"#geo2topo_help\" rel=\"nofollow\">#</a> geo2topo <b>--help</b></p>\n<p>Output usage information.</p>\n<p><a href=\"#geo2topo_version\" rel=\"nofollow\">#</a> geo2topo <b>-v</b>\n<br><a href=\"#geo2topo_version\" rel=\"nofollow\">#</a> geo2topo <b>--version</b></p>\n<p>Output the version number.</p>\n<p><a href=\"#geo2topo_out\" rel=\"nofollow\">#</a> geo2topo <b>-o</b> <i>file</i>\n<br><a href=\"#geo2topo_out\" rel=\"nofollow\">#</a> geo2topo <b>--out</b> <i>file</i></p>\n<p>Specify the output TopoJSON file name. Defaults to \u201c-\u201d for stdout.</p>\n<p><a href=\"#geo2topo_quantization\" rel=\"nofollow\">#</a> geo2topo <b>-q</b> <i>count</i>\n<br><a href=\"#geo2topo_quantization\" rel=\"nofollow\">#</a> geo2topo <b>--quantization</b> <i>count</i></p>\n<p>Specify a pre-quantization paramter. 0 disables quantization. See\n<a href=\"#topology\" rel=\"nofollow\">pytopojson.topology.Topology</a> for a description of\nquantization.</p>\n<h3>topo2geo</h3>\n<p><a href=\"#topo2geo\" rel=\"nofollow\">#</a> <b>topo2geo</b> [<i>options\u2026</i>]\n[<i>name</i>=]<i>file</i>\u2026\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/bin/topo2geo.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Converts one or more TopoJSON objects from an input topology to one or more\nGeoJSON features. For example, to convert the \"states\" TopoJSON\n<code>GeometryCollection</code> object in <code>us.json</code> to a GeoJSON feature collection in\n<code>us-states.json</code>:</p>\n<pre>python topo2geo.py <span class=\"nv\">states</span><span class=\"o\">=</span>us-states.json &lt; us.json\n</pre>\n<p>For convenience, you can omit the object name and specify only the file <em>name</em>;\nthe object name will be the basename of the file, with the directory and\nextension removed. For example, to convert the \"states\" TopoJSON\n<code>GeometryCollection</code> object in <code>us.json</code> to a GeoJSON feature collection in\n<code>states.json</code>:</p>\n<pre>python topo2geo.py states.json &lt; us.json\n</pre>\n<p>See also <a href=\"https://github.com/fferrin/pytopojson/blob/master/README.md#geo2topo\" rel=\"nofollow\">geo2topo</a>.</p>\n<p>To list the available object names, use <a href=\"#topo2geo_list\" rel=\"nofollow\">--list</a>.</p>\n<p><a href=\"#topo2geo_help\" rel=\"nofollow\">#</a> topo2geo <b>-h</b>\n<br><a href=\"#topo2geo_help\" rel=\"nofollow\">#</a> topo2geo <b>--help</b></p>\n<p>Output usage information.</p>\n<p><a href=\"#topo2geo_version\" rel=\"nofollow\">#</a> topo2geo <b>-v</b>\n<br><a href=\"#topo2geo_version\" rel=\"nofollow\">#</a> topo2geo <b>--version</b></p>\n<p>Output the version number.</p>\n<p><a href=\"#topo2geo_in\" rel=\"nofollow\">#</a> topo2geo <b>-i</b> <i>file</i>\n<br><a href=\"#topo2geo_in\" rel=\"nofollow\">#</a> topo2geo <b>--in</b> <i>file</i></p>\n<p>Specify the input TopoJSON file name. Defaults to \"-\" for stdin.</p>\n<p><a href=\"#topo2geo_list\" rel=\"nofollow\">#</a> topo2geo <b>-l</b>\n<br><a href=\"#topo2geo_list\" rel=\"nofollow\">#</a> topo2geo <b>--list</b></p>\n<p>List the names of the objects in the input topology, and then exit. For\nexample, this:</p>\n<pre>python topo2geo.py -l &lt; us.json\n</pre>\n<p>Will output this:</p>\n<pre><code>counties\nstates\nnation\n</code></pre>\n<h3>topoquantize</h3>\n<p><a href=\"#topoquantize\" rel=\"nofollow\">#</a> <b>topoquantize</b>\n[<i>options\u2026</i>] -q &lt;q&gt; [<i>input</i>]\n<a href=\"https://github.com/fferrin/pytopojson/blob/master/bin/topoquantize.py\" rel=\"nofollow\" title=\"Source\">&lt;&gt;</a></p>\n<p>Quantizes the coordinates of the input TopoJSON topology and\n<a href=\"https://github.com/topojson/topojson-specification#213-arcs\" rel=\"nofollow\">delta-encodes</a>\nthe topology\u2019s arcs. The quantization parameter <code>q</code> must be a positive integer\ngreater than one, and determines the maximum expressible number of unique\nvalues per dimension in the resulting quantized coordinates; typically, a power\nof ten is chosen such as 1e4, 1e5 or 1e6. If the <code>topology</code> does not already\nhave a <a href=\"#bbox\" rel=\"nofollow\">bbox</a>, one is computed and assigned. If the <code>topology</code> is\nalready quantized, an error is thrown. See also\n<a href=\"#quantize\" rel=\"nofollow\">pytopojson.quantize.Quantize</a>.</p>\n<p><a href=\"#topoquantize_help\" rel=\"nofollow\">#</a> topoquantize <b>-h</b>\n<br><a href=\"#topoquantize_help\" rel=\"nofollow\">#</a> topoquantize <b>--help</b></p>\n<p>Output usage information.</p>\n<p><a href=\"#topoquantize_version\" rel=\"nofollow\">#</a>\ntopoquantize <b>-v</b>\n<br><a href=\"#topoquantize_version\" rel=\"nofollow\">#</a> topoquantize <b>--version</b></p>\n<p>Output the version number.</p>\n<p><a href=\"#topoquantize_in\" rel=\"nofollow\">#</a>\ntopoquantize <b>-i</b> <i>input</i>\n<br><a href=\"#topoquantize_in\" rel=\"nofollow\">#</a> topoquantize <b>--in</b> <i>input</i></p>\n<p>Specify the input TopoJSON. Defaults to \"-\" for stdin.</p>\n<p><a href=\"#topoquantize_out\" rel=\"nofollow\">#</a>\ntopoquantize <b>-o</b> <i>output</i>\n<br><a href=\"#topoquantize_out\" rel=\"nofollow\">#</a> topoquantize <b>--out</b> <i>output</i></p>\n<p>Specify the output TopoJSON file name. Defaults to \"-\" for stdout.</p>\n\n          </div>"}, "last_serial": 7108316, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "1a6c72eb5589e4dd4aa78a913b1c279f", "sha256": "973c1c31eaf7abbd84463eced7bfcfe11fdb614dbf9f8c319ea3e7272404ceba"}, "downloads": -1, "filename": "pytopojson-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1a6c72eb5589e4dd4aa78a913b1c279f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23395, "upload_time": "2019-11-08T02:16:26", "upload_time_iso_8601": "2019-11-08T02:16:26.417942Z", "url": "https://files.pythonhosted.org/packages/4e/9c/0ab0956792f0a0952796d75a09ca88533768e03c2a66d696f29eaac371c8/pytopojson-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "2ed4fc20870b3940e645037005813881", "sha256": "cc52f3fa2984682f48cb120f3690c1d402b60c4682d5d94d50a36fa776022aee"}, "downloads": -1, "filename": "pytopojson-0.0.4.tar.gz", "has_sig": false, "md5_digest": "2ed4fc20870b3940e645037005813881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23320, "upload_time": "2019-11-08T02:37:28", "upload_time_iso_8601": "2019-11-08T02:37:28.479078Z", "url": "https://files.pythonhosted.org/packages/4e/9f/0cd740724b90a79781e6585285b326999a500844d136b97f9163cbea497a/pytopojson-0.0.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "af4e81124ce1582026aa95b69c35c81c", "sha256": "e5e57ebc76169f319ab4bff28d4f9d5bb746513446effc24c46e6a77f4fd8f24"}, "downloads": -1, "filename": "pytopojson-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af4e81124ce1582026aa95b69c35c81c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 60031, "upload_time": "2020-04-27T03:06:27", "upload_time_iso_8601": "2020-04-27T03:06:27.096029Z", "url": "https://files.pythonhosted.org/packages/e1/be/4579b160e9026503a4b149c9a26245954a574dd542a025e0e82f72a91584/pytopojson-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "987782a64021e0f9d7738edbe5b91cd6", "sha256": "7e9cd05dcfda9d4714e864a7fe32e6c6a460c5a971d37d02f7e3874ae7697f06"}, "downloads": -1, "filename": "pytopojson-1.0.0.tar.gz", "has_sig": false, "md5_digest": "987782a64021e0f9d7738edbe5b91cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 45233, "upload_time": "2020-04-27T03:06:29", "upload_time_iso_8601": "2020-04-27T03:06:29.328863Z", "url": "https://files.pythonhosted.org/packages/9b/59/6956bac00a06c5b3846afb3d7217b4ec187e4202403528916dbb72a9c431/pytopojson-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af4e81124ce1582026aa95b69c35c81c", "sha256": "e5e57ebc76169f319ab4bff28d4f9d5bb746513446effc24c46e6a77f4fd8f24"}, "downloads": -1, "filename": "pytopojson-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af4e81124ce1582026aa95b69c35c81c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 60031, "upload_time": "2020-04-27T03:06:27", "upload_time_iso_8601": "2020-04-27T03:06:27.096029Z", "url": "https://files.pythonhosted.org/packages/e1/be/4579b160e9026503a4b149c9a26245954a574dd542a025e0e82f72a91584/pytopojson-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "987782a64021e0f9d7738edbe5b91cd6", "sha256": "7e9cd05dcfda9d4714e864a7fe32e6c6a460c5a971d37d02f7e3874ae7697f06"}, "downloads": -1, "filename": "pytopojson-1.0.0.tar.gz", "has_sig": false, "md5_digest": "987782a64021e0f9d7738edbe5b91cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 45233, "upload_time": "2020-04-27T03:06:29", "upload_time_iso_8601": "2020-04-27T03:06:29.328863Z", "url": "https://files.pythonhosted.org/packages/9b/59/6956bac00a06c5b3846afb3d7217b4ec187e4202403528916dbb72a9c431/pytopojson-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:02 2020"}