{"info": {"author": "Daniele Bernardini", "author_email": "db@intranetstandard.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Build Tools"], "description": "==============\nDjango Reports\n==============\n\nThis project aim is to provide a simple database driven reporting engine that output json and highcharts formatted data.\n\n----\n\nHighcharts\n----------\n\nThe module ``highcharts`` has some spcialized classes for highcharts preformatted json output. The following examples\nillustrate a bar chart, a group pie chart and a stacked bar chart. More highcharts model will be supported in the future.\n\nPie Charts\n++++++++++\nThe class ``PieChartReportQuery`` specify 4 abstract methods that need to be implemented:\n\n:get_series_data(self, \\*\\*kwargs): takes any number of keyword parameters and returns an\n    array of data points of the format ``[{\"name\": \"<label>\", \"y\": <value>}``\n\n:get_series_name(self, \\*\\*kwargs): takes any number of keyword parameters and returns\n    and returns a string\n\n:get_title(self, \\*\\*kwargs): takes any number of keyword parameters and returns and\n    returns a string\n\n:get_form(self, \\*\\*kwargs): takes any number of keyword parameters and returns and returns\n    an array of dictionaries that define the filter form for the report. The specific\n    format depends on the form standard.\n\n::\n\n    from django_reports.highcharts import PieChartReportQuery\n    from my_app.models import Product, Sale, Category\n    from django.db.models import Count\n\n    FIELD_NAMES = {\n        \"Product\": \"product__id__in\",\n        \"Category\": \"category__id__in\",\n    }\n\n    class SalesQuery(PieChartReportQuery):\n\n        def get_series_data(self, **kwargs):\n            selected_fields = kwargs.get(\"selected_fields\",{})\n            selected_fields = {FIELD_NAMES[f]:selected_fields[f] for f in selected_fields.keys() if len(selected_fields[f]) > 0}\n            objects = Sale.objects.all()\n            if len(selected_fields.keys()) > 0:\n                objects = objects.filter(**selected_fields)\n            return [{\"name\": r['product__name'], \"y\": r['total']} for r in\n                objects.values('product__name').annotate(\n                    total=Count('product__name')).order_by('total')]\n\n        def get_series_name(self, **kwargs):\n            return \"Sales\"\n\n        def get_title(self, **kwargs):\n            return \"Sales\"\n\n        def get_form(self, **kwargs):\n            return [\n                {\"title\":\"Product\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Product.objects.all()], \"selected\": []},\n                {\"title\":\"Category\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Category.objects.all()], \"selected\": []},\n            ]\n\n\n    query = SalesQuery()\n\nGrouped and Stacked Bar Charts\n++++++++++++++++++++++++++++++\n\n``BarChartReportQuery`` implements both stacked and group bar charts. The interfaces is slightly\nmore complex then for pie charts as this charts support multiple series. The data method requirer therefore an\nindentifier that you can then use to select the appropriate data. You also need to provide\n``x`` labels and series names. These are the methods that you need to implement:\n\n:get_series_data(self, series, \\*\\*kwargs): takes the series name and any number of keyword parameters and returns an\n    array of data points of the values\n\n:get_series_names(self, \\*\\*kwargs): takes any number of keyword parameters and returns\n    and returns an array of strings\n\n:get_x_labels(self, \\*\\*kwargs): takes any number of keyword parameters and returns an array of strings\n\n:get_title(self, \\*\\*kwargs): takes any number of keyword parameters and returns and\n    returns a string\n\n:get_form(self, \\*\\*kwargs): takes any number of keyword parameters and returns and returns\n    an array of dictionaries that define the filter form for the report. The specific\n    format depends on the form standard.\n\n::\n\n    from django_reports.highcharts import PieChartReportQuery\n    from my_app.models import Product, Sale, Category\n    from django.db.models import Count\n\n    FIELD_NAMES = {\n        \"Product\": \"product__id__in\",\n        \"Category\": \"category__id__in\",\n    }\n\n    class SalesQuery(PieChartReportQuery):\n\n        def get_series_names(self, series, **kwargs):\n            return Category.object.all().values_list(\"name\",flat=True)\n\n        def get_series_data(self, series, **kwargs):\n            selected_fields = kwargs.get(\"selected_fields\",{})\n            selected_fields = {FIELD_NAMES[f]:selected_fields[f] for f in selected_fields.keys() if len(selected_fields[f]) > 0}\n            objects = Sale.objects.filter(category__name=series)\n            if len(selected_fields.keys()) > 0:\n                objects = objects.filter(**selected_fields)\n            return [r['total']} for r in\n                objects.values('product__name').annotate(\n                    total=Count('product__name')).order_by('product__name')]\n\n        def get_x_labels(self, **kwargs):\n            return Product.objects.all().order_by('name').values_list(\"name\",flat=True)\n\n        def get_series_name(self, **kwargs):\n            return \"Sales\"\n\n        def get_title(self, **kwargs):\n            return \"Sales\"\n\n        def get_form(self, **kwargs):\n            return [\n                {\"title\":\"Product\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Product.objects.all()], \"selected\": []},\n                {\"title\":\"Category\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Category.objects.all()], \"selected\": []},\n            ]\n\n    query = SalesQuery()", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dani0805/django_reports", "keywords": "report bi chart highcharts", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "django-dyn-reports", "package_url": "https://pypi.org/project/django-dyn-reports/", "platform": "", "project_url": "https://pypi.org/project/django-dyn-reports/", "project_urls": {"Homepage": "https://github.com/dani0805/django_reports"}, "release_url": "https://pypi.org/project/django-dyn-reports/0.9.2/", "requires_dist": null, "requires_python": "", "summary": "A simple database driven reporting engine", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project aim is to provide a simple database driven reporting engine that output json and highcharts formatted data.</p>\n<hr class=\"docutils\">\n<div id=\"highcharts\">\n<h2>Highcharts</h2>\n<p>The module <tt>highcharts</tt> has some spcialized classes for highcharts preformatted json output. The following examples\nillustrate a bar chart, a group pie chart and a stacked bar chart. More highcharts model will be supported in the future.</p>\n<div id=\"pie-charts\">\n<h3>Pie Charts</h3>\n<p>The class <tt>PieChartReportQuery</tt> specify 4 abstract methods that need to be implemented:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>get_series_data(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns an\narray of data points of the format <tt><span class=\"pre\">[{\"name\":</span> <span class=\"pre\">\"&lt;label&gt;\",</span> \"y\": &lt;value&gt;}</tt></td>\n</tr>\n<tr><th>get_series_name(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns\nand returns a string</td>\n</tr>\n<tr><th>get_title(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns and\nreturns a string</td>\n</tr>\n<tr><th>get_form(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns and returns\nan array of dictionaries that define the filter form for the report. The specific\nformat depends on the form standard.</td>\n</tr>\n</tbody>\n</table>\n<pre>from django_reports.highcharts import PieChartReportQuery\nfrom my_app.models import Product, Sale, Category\nfrom django.db.models import Count\n\nFIELD_NAMES = {\n    \"Product\": \"product__id__in\",\n    \"Category\": \"category__id__in\",\n}\n\nclass SalesQuery(PieChartReportQuery):\n\n    def get_series_data(self, **kwargs):\n        selected_fields = kwargs.get(\"selected_fields\",{})\n        selected_fields = {FIELD_NAMES[f]:selected_fields[f] for f in selected_fields.keys() if len(selected_fields[f]) &gt; 0}\n        objects = Sale.objects.all()\n        if len(selected_fields.keys()) &gt; 0:\n            objects = objects.filter(**selected_fields)\n        return [{\"name\": r['product__name'], \"y\": r['total']} for r in\n            objects.values('product__name').annotate(\n                total=Count('product__name')).order_by('total')]\n\n    def get_series_name(self, **kwargs):\n        return \"Sales\"\n\n    def get_title(self, **kwargs):\n        return \"Sales\"\n\n    def get_form(self, **kwargs):\n        return [\n            {\"title\":\"Product\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Product.objects.all()], \"selected\": []},\n            {\"title\":\"Category\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Category.objects.all()], \"selected\": []},\n        ]\n\n\nquery = SalesQuery()\n</pre>\n</div>\n<div id=\"grouped-and-stacked-bar-charts\">\n<h3>Grouped and Stacked Bar Charts</h3>\n<p><tt>BarChartReportQuery</tt> implements both stacked and group bar charts. The interfaces is slightly\nmore complex then for pie charts as this charts support multiple series. The data method requirer therefore an\nindentifier that you can then use to select the appropriate data. You also need to provide\n<tt>x</tt> labels and series names. These are the methods that you need to implement:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>get_series_data(self, series, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes the series name and any number of keyword parameters and returns an\narray of data points of the values</td>\n</tr>\n<tr><th>get_series_names(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns\nand returns an array of strings</td>\n</tr>\n<tr><th>get_x_labels(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns an array of strings</td>\n</tr>\n<tr><th>get_title(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns and\nreturns a string</td>\n</tr>\n<tr><th>get_form(self, **kwargs):</th></tr>\n<tr><td>\u00a0</td><td>takes any number of keyword parameters and returns and returns\nan array of dictionaries that define the filter form for the report. The specific\nformat depends on the form standard.</td>\n</tr>\n</tbody>\n</table>\n<pre>from django_reports.highcharts import PieChartReportQuery\nfrom my_app.models import Product, Sale, Category\nfrom django.db.models import Count\n\nFIELD_NAMES = {\n    \"Product\": \"product__id__in\",\n    \"Category\": \"category__id__in\",\n}\n\nclass SalesQuery(PieChartReportQuery):\n\n    def get_series_names(self, series, **kwargs):\n        return Category.object.all().values_list(\"name\",flat=True)\n\n    def get_series_data(self, series, **kwargs):\n        selected_fields = kwargs.get(\"selected_fields\",{})\n        selected_fields = {FIELD_NAMES[f]:selected_fields[f] for f in selected_fields.keys() if len(selected_fields[f]) &gt; 0}\n        objects = Sale.objects.filter(category__name=series)\n        if len(selected_fields.keys()) &gt; 0:\n            objects = objects.filter(**selected_fields)\n        return [r['total']} for r in\n            objects.values('product__name').annotate(\n                total=Count('product__name')).order_by('product__name')]\n\n    def get_x_labels(self, **kwargs):\n        return Product.objects.all().order_by('name').values_list(\"name\",flat=True)\n\n    def get_series_name(self, **kwargs):\n        return \"Sales\"\n\n    def get_title(self, **kwargs):\n        return \"Sales\"\n\n    def get_form(self, **kwargs):\n        return [\n            {\"title\":\"Product\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Product.objects.all()], \"selected\": []},\n            {\"title\":\"Category\", \"type\": \"dropdown\", \"options\": [(r.id, r.name) for r in Category.objects.all()], \"selected\": []},\n        ]\n\nquery = SalesQuery()\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3148124, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "330c7b30dd4bc0c2f1719d81a288932d", "sha256": "065a5a4b1d1647ff7f349115073c3c60e538c45497665088874d8de97dcc36ee"}, "downloads": -1, "filename": "django_dyn_reports-0.9-py2.7.egg", "has_sig": false, "md5_digest": "330c7b30dd4bc0c2f1719d81a288932d", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 17519, "upload_time": "2017-09-01T15:34:29", "upload_time_iso_8601": "2017-09-01T15:34:29.449515Z", "url": "https://files.pythonhosted.org/packages/60/6f/8bdb47ab6686b7d5f92821054943ccf2717dca2de4a6d753f41da604bf71/django_dyn_reports-0.9-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "86c25db5bf37d5ad0193440c0fd5bdd7", "sha256": "c6ec78670f9bef0f82690c27e840f4c9e56cd94ddfb28df990738d561c601c05"}, "downloads": -1, "filename": "django-dyn-reports-0.9.tar.gz", "has_sig": false, "md5_digest": "86c25db5bf37d5ad0193440c0fd5bdd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6784, "upload_time": "2017-09-01T15:34:27", "upload_time_iso_8601": "2017-09-01T15:34:27.126700Z", "url": "https://files.pythonhosted.org/packages/3c/82/72bb56c8d5649b74a5775de767f3acc3be99fcdbd9a038c42f772202f779/django-dyn-reports-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "b7f363efba20457dbe364316e215a124", "sha256": "b360f4875bd40a7690017edfc66886339b82bdfdb4e12d0d06c8b0f1d113e9fa"}, "downloads": -1, "filename": "django_dyn_reports-0.9.1-py2.7.egg", "has_sig": false, "md5_digest": "b7f363efba20457dbe364316e215a124", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 19052, "upload_time": "2017-09-02T21:54:34", "upload_time_iso_8601": "2017-09-02T21:54:34.873961Z", "url": "https://files.pythonhosted.org/packages/7b/b4/657eee515edb4a33e49d2b1071e73f5b375be1edcf325113d0dda05efb90/django_dyn_reports-0.9.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfa6604de6a1f812db53d8d46cafb62f", "sha256": "0e444f74480b122797c5f8cbb5343ed9ae0916bbb823edd072a50d1faf8f5854"}, "downloads": -1, "filename": "django-dyn-reports-0.9.1.tar.gz", "has_sig": false, "md5_digest": "bfa6604de6a1f812db53d8d46cafb62f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7115, "upload_time": "2017-09-02T21:54:33", "upload_time_iso_8601": "2017-09-02T21:54:33.322326Z", "url": "https://files.pythonhosted.org/packages/0c/10/55a348a9dc0f7ce093dc112772100a76211f69ee2afa5f21810706b94425/django-dyn-reports-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "e47a6676d9246069960952fa3cbea6bc", "sha256": "9f48f47dd7c7f78454937194d36a72c7f10505318a4b3c79a052e22ba3d20aa1"}, "downloads": -1, "filename": "django_dyn_reports-0.9.2-py2.7.egg", "has_sig": false, "md5_digest": "e47a6676d9246069960952fa3cbea6bc", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 20620, "upload_time": "2017-09-04T17:35:04", "upload_time_iso_8601": "2017-09-04T17:35:04.313837Z", "url": "https://files.pythonhosted.org/packages/f3/4e/78d403a286fd4a67d41262037e3e2365d51f258ba761c0328d74e90225b9/django_dyn_reports-0.9.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "eaeafe461865d205f72bad464953b0af", "sha256": "d25d5afc7fde14f00b1a11aed69bc854a3bcf369d7331ff438acc4f112a8c03d"}, "downloads": -1, "filename": "django-dyn-reports-0.9.2.tar.gz", "has_sig": false, "md5_digest": "eaeafe461865d205f72bad464953b0af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9850, "upload_time": "2017-09-04T17:35:01", "upload_time_iso_8601": "2017-09-04T17:35:01.780447Z", "url": "https://files.pythonhosted.org/packages/24/70/c3da3eca02034471c2a43be37ad24900fba7c32fe9082c15e79ad519248d/django-dyn-reports-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e47a6676d9246069960952fa3cbea6bc", "sha256": "9f48f47dd7c7f78454937194d36a72c7f10505318a4b3c79a052e22ba3d20aa1"}, "downloads": -1, "filename": "django_dyn_reports-0.9.2-py2.7.egg", "has_sig": false, "md5_digest": "e47a6676d9246069960952fa3cbea6bc", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 20620, "upload_time": "2017-09-04T17:35:04", "upload_time_iso_8601": "2017-09-04T17:35:04.313837Z", "url": "https://files.pythonhosted.org/packages/f3/4e/78d403a286fd4a67d41262037e3e2365d51f258ba761c0328d74e90225b9/django_dyn_reports-0.9.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "eaeafe461865d205f72bad464953b0af", "sha256": "d25d5afc7fde14f00b1a11aed69bc854a3bcf369d7331ff438acc4f112a8c03d"}, "downloads": -1, "filename": "django-dyn-reports-0.9.2.tar.gz", "has_sig": false, "md5_digest": "eaeafe461865d205f72bad464953b0af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9850, "upload_time": "2017-09-04T17:35:01", "upload_time_iso_8601": "2017-09-04T17:35:01.780447Z", "url": "https://files.pythonhosted.org/packages/24/70/c3da3eca02034471c2a43be37ad24900fba7c32fe9082c15e79ad519248d/django-dyn-reports-0.9.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:28 2020"}