{"info": {"author": "Hahn Yuan", "author_email": "yuanzhihang1@126.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# PyTorch-layerwise-OpCounter\nA tool for profile the MACs, parameters, input_shape, output_shape et.al of each layer in Pytorch model.\nForked from Lyken17/pytorch-OpCounter which is not supporting layer-wise profile and I will follow it.\n\n## How to install \n\n`pip install torchlop`\n\nOR\n\n`pip install --upgrade git+https://github.com/hahnyuan/pytorch-layerwise-OpCounter.git`\n\n## How to use \n* Basic usage \n    ```python\n    from torchvision.models import resnet50\n    from torchlop import profile\n    model = resnet50()\n    input = torch.randn(1, 3, 224, 224)\n    macs, params, layer_infos = profile(model, inputs=(input, ))\n    ```    \n* The layer_infos is a dict that contains the infos for each layer of the pytorch model.\n  * The key is the name of the layer\n  * 'type': the class name of the layer\n  * 'in_size': input size\n  * 'out_size': output size\n  * 'ops': operations (MACs)\n  * 'params': parameters\n\n* Define the rule for 3rd party module.\n    ```python\n    class YourModule(nn.Module):\n        # your definition\n    def count_your_model(model, x, y):\n        # your rule here\n\n    input = torch.randn(1, 3, 224, 224)\n    macs, params, layer_infos = profile(model, inputs=(input, ), \n                            custom_ops={YourModule: count_your_model})\n    ```\n* Write the layerwise profile information into a csv file\n    ```python\n    from torchvision.models import resnet50\n    from torchlop import profile\n    from torchlop.rst_process import write_csv\n    model = resnet50()\n    input = torch.randn(1, 3, 224, 224)\n    macs, params, layer_infos = profile(model, inputs=(input, ))\n    csv_file='profile.csv'\n    write_csv(csv_file,layer_infos)\n    ```\n\n\n## Results of Recent Models\n\nThe implementation are adapted from `torchvision`. Following results can be obtained using [benchmark/evaluate_famours_models.py](benchmark/evaluate_famous_models.py).\n\n<p align=\"center\">\n<table>\n<tr>\n<td>\n\nModel | Params(M) | MACs(G)\n---|---|---\nalexnet | 61.10 | 0.77\nvgg11 | 132.86 | 7.74\nvgg11_bn | 132.87 | 7.77\nvgg13 | 133.05 | 11.44\nvgg13_bn | 133.05 | 11.49\nvgg16 | 138.36 | 15.61\nvgg16_bn | 138.37 | 15.66\nvgg19 | 143.67 | 19.77\nvgg19_bn | 143.68 | 19.83\nresnet18 | 11.69 | 1.82\nresnet34 | 21.80 | 3.68\nresnet50 | 25.56 | 4.14\nresnet101 | 44.55 | 7.87\nresnet152 | 60.19 | 11.61\nwide_resnet101_2 | 126.89 | 22.84\nwide_resnet50_2 | 68.88 | 11.46\n\n</td>\n<td>\n\nModel | Params(M) | MACs(G)\n---|---|---\nresnext50_32x4d | 25.03 | 4.29\nresnext101_32x8d | 88.79 | 16.54\ndensenet121 | 7.98 | 2.90\ndensenet161 | 28.68 | 7.85\ndensenet169 | 14.15 | 3.44\ndensenet201 | 20.01 | 4.39\nsqueezenet1_0 | 1.25 | 0.82\nsqueezenet1_1 | 1.24 | 0.35\nmnasnet0_5 | 2.22 | 0.14\nmnasnet0_75 | 3.17 | 0.24\nmnasnet1_0 | 4.38 | 0.34\nmnasnet1_3 | 6.28 | 0.53\nmobilenet_v2 | 3.50 | 0.33\nshufflenet_v2_x0_5 | 1.37 | 0.05\nshufflenet_v2_x1_0 | 2.28 | 0.15\nshufflenet_v2_x1_5 | 3.50 | 0.31\nshufflenet_v2_x2_0 | 7.39 | 0.60\ninception_v3 | 27.16 | 5.75\n\n</td>\n</tr>\n</p>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hahnyuan/pytorch-layerwise-OpCounter/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "torchlop", "package_url": "https://pypi.org/project/torchlop/", "platform": "", "project_url": "https://pypi.org/project/torchlop/", "project_urls": {"Homepage": "https://github.com/hahnyuan/pytorch-layerwise-OpCounter/"}, "release_url": "https://pypi.org/project/torchlop/0.2/", "requires_dist": ["torch"], "requires_python": "", "summary": "A tool to layer-wise count the MACs and parameters of PyTorch model.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTorch-layerwise-OpCounter</h1>\n<p>A tool for profile the MACs, parameters, input_shape, output_shape et.al of each layer in Pytorch model.\nForked from Lyken17/pytorch-OpCounter which is not supporting layer-wise profile and I will follow it.</p>\n<h2>How to install</h2>\n<p><code>pip install torchlop</code></p>\n<p>OR</p>\n<p><code>pip install --upgrade git+https://github.com/hahnyuan/pytorch-layerwise-OpCounter.git</code></p>\n<h2>How to use</h2>\n<ul>\n<li>\n<p>Basic usage</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">torchvision.models</span> <span class=\"kn\">import</span> <span class=\"n\">resnet50</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torchlop</span> <span class=\"kn\">import</span> <span class=\"n\">profile</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">resnet50</span><span class=\"p\">()</span>\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">)</span>\n<span class=\"n\">macs</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">layer_infos</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n</pre>\n</li>\n<li>\n<p>The layer_infos is a dict that contains the infos for each layer of the pytorch model.</p>\n<ul>\n<li>The key is the name of the layer</li>\n<li>'type': the class name of the layer</li>\n<li>'in_size': input size</li>\n<li>'out_size': output size</li>\n<li>'ops': operations (MACs)</li>\n<li>'params': parameters</li>\n</ul>\n</li>\n<li>\n<p>Define the rule for 3rd party module.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">YourModule</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"c1\"># your definition</span>\n<span class=\"k\">def</span> <span class=\"nf\">count_your_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"c1\"># your rule here</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">)</span>\n<span class=\"n\">macs</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">layer_infos</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"p\">),</span> \n                        <span class=\"n\">custom_ops</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">YourModule</span><span class=\"p\">:</span> <span class=\"n\">count_your_model</span><span class=\"p\">})</span>\n</pre>\n</li>\n<li>\n<p>Write the layerwise profile information into a csv file</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">torchvision.models</span> <span class=\"kn\">import</span> <span class=\"n\">resnet50</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torchlop</span> <span class=\"kn\">import</span> <span class=\"n\">profile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torchlop.rst_process</span> <span class=\"kn\">import</span> <span class=\"n\">write_csv</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">resnet50</span><span class=\"p\">()</span>\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">)</span>\n<span class=\"n\">macs</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">layer_infos</span> <span class=\"o\">=</span> <span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n<span class=\"n\">csv_file</span><span class=\"o\">=</span><span class=\"s1\">'profile.csv'</span>\n<span class=\"n\">write_csv</span><span class=\"p\">(</span><span class=\"n\">csv_file</span><span class=\"p\">,</span><span class=\"n\">layer_infos</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>Results of Recent Models</h2>\n<p>The implementation are adapted from <code>torchvision</code>. Following results can be obtained using <a href=\"benchmark/evaluate_famous_models.py\" rel=\"nofollow\">benchmark/evaluate_famours_models.py</a>.</p>\n<p align=\"center\">\n</p><table>\n<tr>\n<td>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Params(M)</th>\n<th>MACs(G)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alexnet</td>\n<td>61.10</td>\n<td>0.77</td>\n</tr>\n<tr>\n<td>vgg11</td>\n<td>132.86</td>\n<td>7.74</td>\n</tr>\n<tr>\n<td>vgg11_bn</td>\n<td>132.87</td>\n<td>7.77</td>\n</tr>\n<tr>\n<td>vgg13</td>\n<td>133.05</td>\n<td>11.44</td>\n</tr>\n<tr>\n<td>vgg13_bn</td>\n<td>133.05</td>\n<td>11.49</td>\n</tr>\n<tr>\n<td>vgg16</td>\n<td>138.36</td>\n<td>15.61</td>\n</tr>\n<tr>\n<td>vgg16_bn</td>\n<td>138.37</td>\n<td>15.66</td>\n</tr>\n<tr>\n<td>vgg19</td>\n<td>143.67</td>\n<td>19.77</td>\n</tr>\n<tr>\n<td>vgg19_bn</td>\n<td>143.68</td>\n<td>19.83</td>\n</tr>\n<tr>\n<td>resnet18</td>\n<td>11.69</td>\n<td>1.82</td>\n</tr>\n<tr>\n<td>resnet34</td>\n<td>21.80</td>\n<td>3.68</td>\n</tr>\n<tr>\n<td>resnet50</td>\n<td>25.56</td>\n<td>4.14</td>\n</tr>\n<tr>\n<td>resnet101</td>\n<td>44.55</td>\n<td>7.87</td>\n</tr>\n<tr>\n<td>resnet152</td>\n<td>60.19</td>\n<td>11.61</td>\n</tr>\n<tr>\n<td>wide_resnet101_2</td>\n<td>126.89</td>\n<td>22.84</td>\n</tr>\n<tr>\n<td>wide_resnet50_2</td>\n<td>68.88</td>\n<td>11.46</td>\n</tr></tbody></table>\n</td>\n<td>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Params(M)</th>\n<th>MACs(G)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>resnext50_32x4d</td>\n<td>25.03</td>\n<td>4.29</td>\n</tr>\n<tr>\n<td>resnext101_32x8d</td>\n<td>88.79</td>\n<td>16.54</td>\n</tr>\n<tr>\n<td>densenet121</td>\n<td>7.98</td>\n<td>2.90</td>\n</tr>\n<tr>\n<td>densenet161</td>\n<td>28.68</td>\n<td>7.85</td>\n</tr>\n<tr>\n<td>densenet169</td>\n<td>14.15</td>\n<td>3.44</td>\n</tr>\n<tr>\n<td>densenet201</td>\n<td>20.01</td>\n<td>4.39</td>\n</tr>\n<tr>\n<td>squeezenet1_0</td>\n<td>1.25</td>\n<td>0.82</td>\n</tr>\n<tr>\n<td>squeezenet1_1</td>\n<td>1.24</td>\n<td>0.35</td>\n</tr>\n<tr>\n<td>mnasnet0_5</td>\n<td>2.22</td>\n<td>0.14</td>\n</tr>\n<tr>\n<td>mnasnet0_75</td>\n<td>3.17</td>\n<td>0.24</td>\n</tr>\n<tr>\n<td>mnasnet1_0</td>\n<td>4.38</td>\n<td>0.34</td>\n</tr>\n<tr>\n<td>mnasnet1_3</td>\n<td>6.28</td>\n<td>0.53</td>\n</tr>\n<tr>\n<td>mobilenet_v2</td>\n<td>3.50</td>\n<td>0.33</td>\n</tr>\n<tr>\n<td>shufflenet_v2_x0_5</td>\n<td>1.37</td>\n<td>0.05</td>\n</tr>\n<tr>\n<td>shufflenet_v2_x1_0</td>\n<td>2.28</td>\n<td>0.15</td>\n</tr>\n<tr>\n<td>shufflenet_v2_x1_5</td>\n<td>3.50</td>\n<td>0.31</td>\n</tr>\n<tr>\n<td>shufflenet_v2_x2_0</td>\n<td>7.39</td>\n<td>0.60</td>\n</tr>\n<tr>\n<td>inception_v3</td>\n<td>27.16</td>\n<td>5.75</td>\n</tr></tbody></table>\n</td>\n</tr>\n\n</table>\n          </div>"}, "last_serial": 6580116, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "eab6af6e23c4c13521311b418adeb49e", "sha256": "8525ebd6e4fa5a2a1b4c6a9517f1ac8bfe0d2f81d18e6ef5ffd80493a0e83ff6"}, "downloads": -1, "filename": "torchlop-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eab6af6e23c4c13521311b418adeb49e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7603, "upload_time": "2020-02-05T14:30:43", "upload_time_iso_8601": "2020-02-05T14:30:43.553449Z", "url": "https://files.pythonhosted.org/packages/fa/ad/3c7425fce87aca4fb3efe2b5e400673150a6a44424bed7a6c97aa1f04ddc/torchlop-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d191d4feec1ef959b5c7eebfb1b591f", "sha256": "7549d2396ee86439bc5f8e96dbb319dca0a9397402530e5b9f89bfe2501e2fb9"}, "downloads": -1, "filename": "torchlop-0.1.tar.gz", "has_sig": false, "md5_digest": "4d191d4feec1ef959b5c7eebfb1b591f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5968, "upload_time": "2020-02-05T14:30:45", "upload_time_iso_8601": "2020-02-05T14:30:45.938786Z", "url": "https://files.pythonhosted.org/packages/86/8e/b7ee8f578709f20ebda83f5356ba73337f560b8988bd757fc8837e787a1b/torchlop-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f984afb22b9935f3e299f57a8bcd2413", "sha256": "8eb2c716842b6ff9c0855be8670927428d002dabe0252dec600319c46583c5b8"}, "downloads": -1, "filename": "torchlop-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f984afb22b9935f3e299f57a8bcd2413", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8090, "upload_time": "2020-02-06T04:11:26", "upload_time_iso_8601": "2020-02-06T04:11:26.594722Z", "url": "https://files.pythonhosted.org/packages/e1/1b/8699dd865d0c3cddace92724371036982da42b4bffb5919f4235c85453a0/torchlop-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "451aedbdc305859ecbd588570557ab79", "sha256": "0085d9dba04486c882d6c5f49763d8305da99c848e1da344222f951576da84bf"}, "downloads": -1, "filename": "torchlop-0.2.tar.gz", "has_sig": false, "md5_digest": "451aedbdc305859ecbd588570557ab79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6190, "upload_time": "2020-02-06T04:11:28", "upload_time_iso_8601": "2020-02-06T04:11:28.275385Z", "url": "https://files.pythonhosted.org/packages/d3/28/c4d91262e9c7625b494f9f4264f082e088c064ec399953cd1a6a317425bb/torchlop-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f984afb22b9935f3e299f57a8bcd2413", "sha256": "8eb2c716842b6ff9c0855be8670927428d002dabe0252dec600319c46583c5b8"}, "downloads": -1, "filename": "torchlop-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f984afb22b9935f3e299f57a8bcd2413", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8090, "upload_time": "2020-02-06T04:11:26", "upload_time_iso_8601": "2020-02-06T04:11:26.594722Z", "url": "https://files.pythonhosted.org/packages/e1/1b/8699dd865d0c3cddace92724371036982da42b4bffb5919f4235c85453a0/torchlop-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "451aedbdc305859ecbd588570557ab79", "sha256": "0085d9dba04486c882d6c5f49763d8305da99c848e1da344222f951576da84bf"}, "downloads": -1, "filename": "torchlop-0.2.tar.gz", "has_sig": false, "md5_digest": "451aedbdc305859ecbd588570557ab79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6190, "upload_time": "2020-02-06T04:11:28", "upload_time_iso_8601": "2020-02-06T04:11:28.275385Z", "url": "https://files.pythonhosted.org/packages/d3/28/c4d91262e9c7625b494f9f4264f082e088c064ec399953cd1a6a317425bb/torchlop-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:17 2020"}