{"info": {"author": "Jason Madden", "author_email": "open-source@nextthought.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Buildout", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "==================\n nti.recipes.zodb\n==================\n\nOpinionated recipes for creating RelStorage and ZEO configurations, especially\ntailored for multi-databases.\n\n.. image:: https://travis-ci.org/NextThought/nti.recipes.zodb.svg?branch=master\n    :target: https://travis-ci.org/NextThought/nti.recipes.zodb\n\n.. image:: https://coveralls.io/repos/github/NextThought/nti.recipes.zodb/badge.svg?branch=master\n   :target: https://coveralls.io/github/NextThought/nti.recipes.zodb?branch=master\n\nLimitations\n===========\n\nA single buildout can use *either* one RelStorage recipe *or* one ZEO\nrecipe. It can never have both, or more than one of each. This is\nbecause both recipes write to the same configuration files\n\nDependencies\n============\n\nThe recipes defined here use `collective.recipe.template`_ to output\nconfiguration files, and `z3c.recipe.mkdir`_ to create implicitly\ndefined directories. `zc.zodbrecipes`_ is used to create the ZEO\nserver. You shouldn't need to install these manually as buildout will\ntake care of making them available when needed.\n\n.. _collective.recipe.template: https://pypi.org/project/collective.recipe.template/\n.. _z3c.recipe.mkdir: https://pypi.org/project/z3c.recipe.mkdir/\n.. _zc.zodbrecipes: https://pypi.org/project/zc.zodbrecipes/\n\nDirectories and Files\n=====================\n\nThe recipes defined here use the directory structure and variables\ndefined by `zc.recipe.deployment`_. There should be a buildout part\ncalled ``deployment`` that uses this recipe. Alternatively (and\nespecially useful when composing a buildout from multiple\nconfigurations), you can define a ``deployment`` part that lists these\ndirectories manually. You'll also need to include the username that\nshould own created files and directories:\n\n.. code:: ini\n\n   [deployment]\n   bin-directory = ${buildout:bin-directory}\n   cache-directory = ${:run-directory}/caches\n   crontab-directory = ${:root-directory}/etc/cron.d\n   data-directory = ${:root-directory}/data\n   etc-directory = ${:root-directory}/etc\n   log-directory = ${:root-directory}/var/log\n   logrotate-directory = ${:root-directory}/etc/logrotate.d\n   rc-directory = ${:root-directory}/bin/rc\n   root-directory = ${buildout:root-directory}\n   run-directory = ${:root-directory}/var\n\nThe deployment recipe takes care of creating the needed directories,\nbut here we'll just do so manually. We'll define a common\nconfiguration snippet that we'll include in future examples::\n\n    >>> write(sample_buildout, 'deployment.cfg',\n    ... \"\"\"\n    ... [deployment]\n    ... root-directory = ${buildout:directory}\n    ... data-directory = ${:root-directory}/data\n    ... etc-directory = ${:root-directory}/etc\n    ... log-directory = ${:root-directory}/var/log\n    ... run-directory = ${:root-directory}/var\n    ... rc-directory = ${:root-directory}/bin/rc\n    ... cache-directory = ${:run-directory}/caches\n    ... logrotate-directory = ${:root-directory}/etc/logrotate.d\n    ... crontab-directory = ${:root-directory}/etc/cron.d\n    ... user = user\n    ...\n    ... [directories]\n    ... recipe = z3c.recipe.mkdir\n    ... create-intermediate = true\n    ... mode = 0700\n    ... paths =\n    ...    ${deployment:etc-directory}\n    ...    ${deployment:run-directory}\n    ...    ${deployment:cache-directory}\n    ...    ${deployment:data-directory}\n    ...    ${deployment:log-directory}\n    ...    ${deployment:rc-directory}\n    ...    ${deployment:logrotate-directory}\n    ...    ${deployment:crontab-directory}\n    ... \"\"\")\n\nBoth recipes create two files in the ``etc-directory``.\n\nzodb_conf.xml\n    This file is meant to be read with\n    ``ZODB.config.databaseFromFile`` or ``databaseFromURL``. If you\n    specify more than one storage, they will be listed in the order\n    provided, creating a multi-database, with the first listed storage\n    as the \"root\" database.\n\nzeo_uris.ini\n    This file provides the same database configuration as\n    ``zodb_conf.xml`` (indeed, it references that file), but in a form\n    of a single URL string that can be read using zodburi_. This can\n    be convient for passing in the form of a string.\n\n.. _zc.recipe.deployment: https://pypi.org/project/zc.recipe.deployment/_\n.. _zodburi: https://pypi.org/project/zodburi/\n\n\nRecipe Options\n==============\n\nBoth recipes defined here accept some common options.\n\nstorages\n    Required. A whitespace delimited list of storage names. Each of these will be\n    added to the generated configuration files for a client to use (and\n    for ZEO, for the server to serve).\n\n    This can only be defined directly in the recipe part.\ncompress\n   If \"decompress\" (the default) each storage will be wrapped in a\n   `zc.zlibstorage`_ that only compress existing records. If set to\n   \"compress\" new records will also be compressed.\n\n   Set to \"none\" to disable the wrapper entirely.\n\n   This can be set in the recipe part. If it's not defined there, a\n   value defined in the ``environment`` part will be used before\n   falling back to the default.\n\n.. _zc.zlibstorage: https://pypi.org/project/zc.zlibstorage/\n\nStorage and Database Options\n============================\n\nSome options are available to configure the ZODB database. These are\nused by both recipes and may be defined at a per-database level (see\neach recipe for an explanation of how). The defaults are built-in, but\nsetting a value in the recipe part will provide a new default for all\nstorages. Additionally, for backwards compatibility and composing\nbuildout configurations, if there is a part named ``<part>_opts_``,\nwhere ``<part>`` is the name of the recipe part, options defined there\nwill override options defined in the recipe part, but will bee\noverridden by options defined for an individual storage.\n\nThese two configurations both set the same ZODB cache size.\n\n.. code:: ini\n\n   [zeo]\n   recipe = nti.recipes.zodb:zeo\n   storages = users\n   cache_size = 50\n\n.. code:: ini\n\n   [zeo]\n   recipe = nti.recipes.zodb:zeo\n   storages = users\n\n   [zeo_opts]\n   cache_size = 50\n\n\ncache_size\n   Controls the ZODB per-connection object cache. Setting this to a large-enough\n   value to contain your application's working set can be very important, especially\n   in read-heavy workloads. Setting it too large can waste memory.\npool_size\n    Controls the number of ZODB connections kept in the ZODB pool. It\n    is very important to set this large enough to accomodate the\n    number of concurrent activities (requests) your application will\n    handle. Each connection in the pool holds resources like its cache\n    and in the case of RelStorage RDBMS sockets and possibly memcache\n    sockets. Setting it too large can waste memory and file-descriptors.\n\n    Normally, opening a DB and closing the connection will create a\n    connection (if needed), then return it to the pool (if the pool is\n    not full). However, in the case of multi-databases, when an object\n    from a secondary database needs to be loaded, the active\n    connection will request a connection to that database, and when\n    the active connection is closed, that secondary connection is also\n    closed *but not returned to the pool*. Instead, the active\n    (primary) connection keeps a reference to it that it will use in\n    the future. This has the effect of driving all secondary pools\n    based on the efficiency of the primary pool. Thus, the pool-size\n    for everything except the primary database is essentially\n    meaningless (if the application always begins by opening that\n    primary database), but that pool size controls everything.\n\n    Calling DB.connectionDebugInfo() can show improperly sized pools:\n    connections in the pool have 'opened' of None, while those in use\n    have a timestamp and the length of time it's been open.\n\nRelStorage\n==========\n\nThe ``relstorage`` recipe creates configurations to connect to a\nMySQL, PostgreSQL, or SQLite3 RelStorage database *in history-free\nmode*. (Oracle is not supported.)\n\nThere are a number of different ways to configure storages. If you\nhave multiple storages residing on a common database server, and you\nalso have other databases on that server (SQLAlchemy, etc), you might\nbe interested in using a shared ``environment`` section to contain\nthe server location and account credentials.\n\n.. note:: Do not store plain passwords in buildout configuration\n          files. Use something like `nti.recipes.passwords\n          <https://pypi.org/project/nti.recipes.passwords/>`_ to store\n          them encrypted instead.\n\nBy default, the name of the database is the same as the storage name.\nThe storage name's case is preserved (this matters for cross-database\nreferences.)\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... extends = deployment.cfg\n    ... parts = directories relstorage\n    ...\n    ... [environment]\n    ... sql_user = the_user\n    ... sql_host = the_server\n    ... sql_passwd = the_passwd\n    ...\n    ... [relstorage]\n    ... recipe = nti.recipes.zodb:relstorage\n    ... storages = Users Sessions\n    ... compress = none\n    ... \"\"\")\n\n    >>> print_(system(buildout), end='')\n    Installing...\n    Installing relstorage.\n    >>> ls(sample_buildout, 'etc')\n    d  cron.d\n    d  logrotate.d\n    -  zeo_uris.ini\n    -  zodb_conf.xml\n    >>> cat(sample_buildout, 'etc', 'zodb_conf.xml')\n    %import relstorage\n    <zodb Users>\n      cache-size 100000\n      database-name Users\n      pool-size 60\n      <relstorage Users>\n        <mysql>\n          # This comment preserves whitespace\n              db Users\n              host the_server\n              passwd the_passwd\n              user the_user\n        </mysql>\n      blob-dir /sample-buildout/data/Users.blobs\n      cache-local-dir /sample-buildout/var/caches/data_cache/Users.cache\n      cache-local-mb 300\n      cache-prefix Users\n      commit-lock-timeout 60\n      keep-history false\n      name Users\n      pack-gc false\n      shared-blob-dir false\n    </relstorage>\n    </zodb>\n    <zodb Sessions>\n      cache-size 100000\n      database-name Sessions\n      pool-size 60\n      <relstorage Sessions>\n        <mysql>\n          # This comment preserves whitespace\n              db Sessions\n              host the_server\n              passwd the_passwd\n              user the_user\n        </mysql>\n      blob-dir /sample-buildout/data/Sessions.blobs\n      cache-local-dir /sample-buildout/var/caches/data_cache/Sessions.cache\n      cache-local-mb 300\n      cache-prefix Sessions\n      commit-lock-timeout 60\n      keep-history false\n      name Sessions\n      pack-gc false\n      shared-blob-dir false\n    </relstorage>\n    </zodb>\n    >>> cat(sample_buildout, 'etc', 'zeo_uris.ini')\n    [ZODB]\n    uris = /sample-buildout/etc/zodb_conf.xml#users /sample-buildout/etc/zodb_conf.xml#sessions\n\nMuch can be configured at both the recipe level and in a section named\nfor the storage (prefixed with the name of the recipe, unlike in the\nzeo recipe, and suffixed with '_storage_opts'), but a few settings can\nonly be configured on the recipe or environment part.\n\nenable-persistent-cache\n    Defaults to true.\ncache-servers\n   Deprecated. A list of memcache servers to use. Can be configured at the recipe\n   or environment level.\nblob-cache-size\n   Defaults to no size cap.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... extends = deployment.cfg\n    ... parts = directories relstorage\n    ...\n    ... [environment]\n    ... sql_user = the_user\n    ... sql_host = the_server\n    ... sql_passwd = the_passwd\n    ...\n    ... [relstorage]\n    ... recipe = nti.recipes.zodb:relstorage\n    ... storages = users sessions\n    ... compress = none\n    ... pack_gc = true\n    ... commit_lock_timeout = 10\n    ...\n    ... [relstorage_users_storage_opts]\n    ... cache_size = 42\n    ... cache_local_mb = 2\n    ... sql_user = custom_user\n    ... \"\"\")\n\n    >>> print_(system(buildout), end='')\n    Uninstalling relstorage...\n    Installing relstorage.\n    >>> ls(sample_buildout, 'etc')\n    d  cron.d\n    d  logrotate.d\n    -  zeo_uris.ini\n    -  zodb_conf.xml\n    >>> cat(sample_buildout, 'etc', 'zodb_conf.xml')\n    %import relstorage\n    <zodb users>\n      cache-size 42\n      database-name users\n      pool-size 60\n      <relstorage users>\n        <mysql>\n          # This comment preserves whitespace\n              db users\n              host the_server\n              passwd the_passwd\n              user custom_user\n        </mysql>\n      blob-dir /sample-buildout/data/users.blobs\n      cache-local-dir /sample-buildout/var/caches/data_cache/users.cache\n      cache-local-mb 2\n      cache-prefix users\n      commit-lock-timeout 10\n      keep-history false\n      name users\n      pack-gc true\n      shared-blob-dir false\n    </relstorage>\n    </zodb>\n    <zodb sessions>\n      cache-size 100000\n      database-name sessions\n      pool-size 60\n      <relstorage sessions>\n        <mysql>\n          # This comment preserves whitespace\n              db sessions\n              host the_server\n              passwd the_passwd\n              user the_user\n        </mysql>\n      blob-dir /sample-buildout/data/sessions.blobs\n      cache-local-dir /sample-buildout/var/caches/data_cache/sessions.cache\n      cache-local-mb 300\n      cache-prefix sessions\n      commit-lock-timeout 10\n      keep-history false\n      name sessions\n      pack-gc true\n      shared-blob-dir false\n    </relstorage>\n    </zodb>\n\nConfiguring The Adapter\n-----------------------\n\nBy default, a MySQL adapter is assumed. Use the ``sql_adapter``\nsetting (at the recipe or storage level) to change this.\n\nThe ``sql_adapter_extra_args`` may be used to add additional\nconfiguration to the ``<adapter>`` section. This is frequently used to\nselect a driver.\n\nIf you change it to ``postgresql`` a DSN will be constructed based on\nthe ``sql_*`` settings. You can set ``sql_adapter_args`` to completely\nspecify the contents of the ``<adapter>`` section (this disables\n``sql_adapter_extra_args``).\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... extends = deployment.cfg\n    ... parts = directories relstorage\n    ...\n    ... [environment]\n    ... sql_user = the_user\n    ... sql_host = the_server\n    ... sql_passwd = the_passwd\n    ...\n    ... [relstorage]\n    ... recipe = nti.recipes.zodb:relstorage\n    ... storages = users sessions\n    ... compress = none\n    ... sql_adapter = postgresql\n    ... sql_adapter_extra_args =\n    ...     driver gevent psycopg2\n    ...\n    ... [relstorage_users_storage_opts]\n    ... sql_adapter = sqlite3\n    ... sql_adapter_extra_args =\n    ...     driver gevent sqlite3\n    ... \"\"\")\n\n    >>> print_(system(buildout), end='')\n    Uninstalling relstorage...\n    Installing relstorage.\n    >>> ls(sample_buildout, 'etc')\n    d  cron.d\n    d  logrotate.d\n    -  zeo_uris.ini\n    -  zodb_conf.xml\n    >>> cat(sample_buildout, 'etc', 'zodb_conf.xml')\n    %import relstorage\n    <zodb users>\n      cache-size 100000\n      database-name users\n      pool-size 60\n      <relstorage users>\n        <sqlite3>\n          # This comment preserves whitespace\n              data-dir /sample-buildout/data/relstorage_users_storage\n              driver gevent sqlite3\n        </sqlite3>\n      blob-dir /sample-buildout/data/users.blobs\n      cache-local-dir /sample-buildout/var/caches/data_cache/users.cache\n      cache-local-mb 300\n      cache-prefix users\n      commit-lock-timeout 60\n      keep-history false\n      name users\n      pack-gc false\n      shared-blob-dir true\n    </relstorage>\n    </zodb>\n    <zodb sessions>\n      cache-size 100000\n      database-name sessions\n      pool-size 60\n      <relstorage sessions>\n        <postgresql>\n          # This comment preserves whitespace\n              driver gevent psycopg2\n              dsn dbname='sessions' user='the_user' password='the_passwd' host='the_server'\n        </postgresql>\n      blob-dir /sample-buildout/data/sessions.blobs\n      cache-local-dir /sample-buildout/var/caches/data_cache/sessions.cache\n      cache-local-mb 300\n      cache-prefix sessions\n      commit-lock-timeout 60\n      keep-history false\n      name sessions\n      pack-gc false\n      shared-blob-dir false\n    </relstorage>\n    </zodb>\n\nOther Files\n-----------\n\nIf the recipe was ``write-zodbconvert`` set to ``true``, then a set of\nconfiguration files for converting to and from RelStorage and\nFileStorage using ``zodbconvert`` will be generated.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... extends = deployment.cfg\n    ... parts = directories relstorage\n    ...\n    ... [environment]\n    ... sql_user = the_user\n    ... sql_host = the_server\n    ... sql_passwd = the_passwd\n    ...\n    ... [relstorage]\n    ... recipe = nti.recipes.zodb:relstorage\n    ... storages = users\n    ... compress = none\n    ... write-zodbconvert = true\n    ... \"\"\")\n\n    >>> print_(system(buildout), end='')\n    Uninstalling relstorage...\n    Installing relstorage.\n    >>> ls(sample_buildout, 'etc')\n    d  cron.d\n    d  logrotate.d\n    d  relstorage\n    -  zeo_uris.ini\n    -  zodb_conf.xml\n    >>> ls(sample_buildout, 'etc', 'relstorage')\n    -  users_from_relstorage_conf.xml\n    -  users_to_relstorage_conf.xml\n\nZEO\n===\n\nThe ``zeo`` recipe can be used to create configurations for a ZEO\nclient and ZEO server. It is only intended for personal or test\nenvironments.\n\n.. rubric:: Options\n\nJust like the ``relstorage`` recipe, it requires one or more storages.\nOptions can be set in the ``zeo`` part to apply to all storages, in a\npart named for the storage to configure the server, or in a part named\nfor the client to configure the client. Note that the client also\ninherits configuration options from the server.\n\npack-gc\n   Defaults to false. This can only be set on the recipe part.\n\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... extends = deployment.cfg\n    ... parts = directories zeo\n    ...\n    ... [zeo]\n    ... recipe = nti.recipes.zodb:zeo\n    ... storages = Users Sessions\n    ... compress = none\n    ... pack-gc = true\n    ...\n    ... [users_storage_opts]\n    ... pack-gc = true\n    ... pool_size = 25\n    ...\n    ... [sessions_client_opts]\n    ... cache-size = 42\n    ... \"\"\")\n\nAnd it creates several configuration files::\n\n    >>> print_(system(buildout), end='')\n    Uninstalling relstorage...\n    Installing zeo.\n    >>> ls(sample_buildout, 'etc')\n    d  cron.d\n    d  logrotate.d\n    -  zeo-zdaemon.conf\n    -  zeo-zeo.conf\n    -  zeo_uris.ini\n    -  zodb_conf.xml\n    -  zodb_file_uris.ini\n\n.. rubric:: Standard Files\n\nThe ``zodb_conf.xml`` and ``zeo_uris.ini`` are created as for RelStorage (the ``zconfig://``\nprefixes are missing from the URIs because of a quirk in testing):\n\n    >>> cat(sample_buildout, 'etc', 'zodb_conf.xml')\n    <zodb Users>\n      cache-size 100000\n      database-name Users\n      pool-size 25\n      <zeoclient>\n        blob-dir /sample-buildout/data/Users.blobs\n        name Users\n        server /sample-buildout/var/zeosocket\n        shared-blob-dir true\n        storage 1\n      </zeoclient>\n    </zodb>\n    <zodb Sessions>\n      cache-size 42\n      database-name Sessions\n      pool-size 60\n      <zeoclient>\n        blob-dir /sample-buildout/data/Sessions.blobs\n        name Sessions\n        server /sample-buildout/var/zeosocket\n        shared-blob-dir true\n        storage 2\n      </zeoclient>\n    </zodb>\n    >>> cat(sample_buildout, 'etc', 'zeo_uris.ini')\n    [ZODB]\n    uris = /sample-buildout/etc/zodb_conf.xml#users /sample-buildout/etc/zodb_conf.xml#sessions\n\n.. rubric:: zdaemon.conf\n\nThis file, prefixed with the name of the buildout part, is the\nconfiguration to use with the ``zdaemon`` command's ``-C`` option in\norder to run the ZEO server.\n\n   >>> cat(sample_buildout, 'etc', 'zeo-zdaemon.conf')\n   <runner>\n     daemon on\n     directory /sample-buildout/var\n     program /sample-buildout/bin/runzeo -C /sample-buildout/etc/zeo-zeo.conf\n     socket-name /sample-buildout/var/zeo-zdaemon.sock\n     transcript /sample-buildout/var/log/zeo-zeo.log\n     user user\n   </runner>\n   <BLANKLINE>\n   <eventlog>\n     <logfile>\n       path /sample-buildout/var/log/zeo-zeo.log\n     </logfile>\n   </eventlog>\n\n.. rubric:: zeo-conf.conf\n\nThis is the actual ZEO server configuration, again prefixed with the part name.\n\n    >>> cat(sample_buildout, 'etc', 'zeo-zeo.conf')\n    <zeo>\n      address /sample-buildout/var/zeosocket\n    </zeo>\n    <BLANKLINE>\n    <filestorage 1>\n      blob-dir /sample-buildout/data/Users.blobs\n      pack-gc true\n      path /sample-buildout/data/Users.fs\n    </filestorage>\n    <BLANKLINE>\n    <filestorage 2>\n      blob-dir /sample-buildout/data/Sessions.blobs\n      pack-gc true\n      path /sample-buildout/data/Sessions.fs\n    </filestorage>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        format %(asctime)s %(message)s\n        level DEBUG\n        path /sample-buildout/var/log/zeo.log\n      </logfile>\n    </eventlog>\n\n.. rubric:: zodb_file_uris.ini\n\nIntentionally undocumented. Expert use only.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NextThought/nti.recipes.zodb", "keywords": "buildout relstorage ZEO", "license": "Proprietary", "maintainer": "", "maintainer_email": "", "name": "nti.recipes.zodb", "package_url": "https://pypi.org/project/nti.recipes.zodb/", "platform": "", "project_url": "https://pypi.org/project/nti.recipes.zodb/", "project_urls": {"Bug Tracker": "https://github.com/NextThought/nti.recipes.zodb/issues", "Homepage": "https://github.com/NextThought/nti.recipes.zodb", "Source Code": "https://github.com/NextThought/nti.recipes.zodb/"}, "release_url": "https://pypi.org/project/nti.recipes.zodb/1.0.0a3/", "requires_dist": ["setuptools", "zc.buildout", "zc.recipe.deployment", "zc.zodbrecipes", "ZConfig", "PyHamcrest ; extra == 'test'", "collective.recipe.template ; extra == 'test'", "z3c.recipe.mkdir ; extra == 'test'", "zope.testing ; extra == 'test'", "zope.testrunner ; extra == 'test'", "zdaemon ; extra == 'test'"], "requires_python": "", "summary": "zc.buildout recipes for RelStorage and ZEO", "version": "1.0.0a3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Opinionated recipes for creating RelStorage and ZEO configurations, especially\ntailored for multi-databases.</p>\n<a href=\"https://travis-ci.org/NextThought/nti.recipes.zodb\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/NextThought/nti.recipes.zodb.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e99d94eb8471f81c52f093989945f18dd122791/68747470733a2f2f7472617669732d63692e6f72672f4e65787454686f756768742f6e74692e726563697065732e7a6f64622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/NextThought/nti.recipes.zodb?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/NextThought/nti.recipes.zodb/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2aab81c662cbd93dd08aa6362e45c70e6fa68281/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4e65787454686f756768742f6e74692e726563697065732e7a6f64622f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>A single buildout can use <em>either</em> one RelStorage recipe <em>or</em> one ZEO\nrecipe. It can never have both, or more than one of each. This is\nbecause both recipes write to the same configuration files</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The recipes defined here use <a href=\"https://pypi.org/project/collective.recipe.template/\" rel=\"nofollow\">collective.recipe.template</a> to output\nconfiguration files, and <a href=\"https://pypi.org/project/z3c.recipe.mkdir/\" rel=\"nofollow\">z3c.recipe.mkdir</a> to create implicitly\ndefined directories. <a href=\"https://pypi.org/project/zc.zodbrecipes/\" rel=\"nofollow\">zc.zodbrecipes</a> is used to create the ZEO\nserver. You shouldn\u2019t need to install these manually as buildout will\ntake care of making them available when needed.</p>\n</div>\n<div id=\"directories-and-files\">\n<h2>Directories and Files</h2>\n<p>The recipes defined here use the directory structure and variables\ndefined by <a href=\"https://pypi.org/project/zc.recipe.deployment/_\" rel=\"nofollow\">zc.recipe.deployment</a>. There should be a buildout part\ncalled <tt>deployment</tt> that uses this recipe. Alternatively (and\nespecially useful when composing a buildout from multiple\nconfigurations), you can define a <tt>deployment</tt> part that lists these\ndirectories manually. You\u2019ll also need to include the username that\nshould own created files and directories:</p>\n<pre><span class=\"k\">[deployment]</span>\n<span class=\"na\">bin-directory</span> <span class=\"o\">=</span> <span class=\"s\">${buildout:bin-directory}</span>\n<span class=\"na\">cache-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:run-directory}/caches</span>\n<span class=\"na\">crontab-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/etc/cron.d</span>\n<span class=\"na\">data-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/data</span>\n<span class=\"na\">etc-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/etc</span>\n<span class=\"na\">log-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/var/log</span>\n<span class=\"na\">logrotate-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/etc/logrotate.d</span>\n<span class=\"na\">rc-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/bin/rc</span>\n<span class=\"na\">root-directory</span> <span class=\"o\">=</span> <span class=\"s\">${buildout:root-directory}</span>\n<span class=\"na\">run-directory</span> <span class=\"o\">=</span> <span class=\"s\">${:root-directory}/var</span>\n</pre>\n<p>The deployment recipe takes care of creating the needed directories,\nbut here we\u2019ll just do so manually. We\u2019ll define a common\nconfiguration snippet that we\u2019ll include in future examples:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'deployment.cfg',\n... \"\"\"\n... [deployment]\n... root-directory = ${buildout:directory}\n... data-directory = ${:root-directory}/data\n... etc-directory = ${:root-directory}/etc\n... log-directory = ${:root-directory}/var/log\n... run-directory = ${:root-directory}/var\n... rc-directory = ${:root-directory}/bin/rc\n... cache-directory = ${:run-directory}/caches\n... logrotate-directory = ${:root-directory}/etc/logrotate.d\n... crontab-directory = ${:root-directory}/etc/cron.d\n... user = user\n...\n... [directories]\n... recipe = z3c.recipe.mkdir\n... create-intermediate = true\n... mode = 0700\n... paths =\n...    ${deployment:etc-directory}\n...    ${deployment:run-directory}\n...    ${deployment:cache-directory}\n...    ${deployment:data-directory}\n...    ${deployment:log-directory}\n...    ${deployment:rc-directory}\n...    ${deployment:logrotate-directory}\n...    ${deployment:crontab-directory}\n... \"\"\")\n</pre>\n<p>Both recipes create two files in the <tt><span class=\"pre\">etc-directory</span></tt>.</p>\n<dl>\n<dt>zodb_conf.xml</dt>\n<dd>This file is meant to be read with\n<tt>ZODB.config.databaseFromFile</tt> or <tt>databaseFromURL</tt>. If you\nspecify more than one storage, they will be listed in the order\nprovided, creating a multi-database, with the first listed storage\nas the \u201croot\u201d database.</dd>\n<dt>zeo_uris.ini</dt>\n<dd>This file provides the same database configuration as\n<tt>zodb_conf.xml</tt> (indeed, it references that file), but in a form\nof a single URL string that can be read using <a href=\"https://pypi.org/project/zodburi/\" rel=\"nofollow\">zodburi</a>. This can\nbe convient for passing in the form of a string.</dd>\n</dl>\n</div>\n<div id=\"recipe-options\">\n<h2>Recipe Options</h2>\n<p>Both recipes defined here accept some common options.</p>\n<dl>\n<dt>storages</dt>\n<dd><p>Required. A whitespace delimited list of storage names. Each of these will be\nadded to the generated configuration files for a client to use (and\nfor ZEO, for the server to serve).</p>\n<p>This can only be defined directly in the recipe part.</p>\n</dd>\n<dt>compress</dt>\n<dd><p>If \u201cdecompress\u201d (the default) each storage will be wrapped in a\n<a href=\"https://pypi.org/project/zc.zlibstorage/\" rel=\"nofollow\">zc.zlibstorage</a> that only compress existing records. If set to\n\u201ccompress\u201d new records will also be compressed.</p>\n<p>Set to \u201cnone\u201d to disable the wrapper entirely.</p>\n<p>This can be set in the recipe part. If it\u2019s not defined there, a\nvalue defined in the <tt>environment</tt> part will be used before\nfalling back to the default.</p>\n</dd>\n</dl>\n</div>\n<div id=\"storage-and-database-options\">\n<h2>Storage and Database Options</h2>\n<p>Some options are available to configure the ZODB database. These are\nused by both recipes and may be defined at a per-database level (see\neach recipe for an explanation of how). The defaults are built-in, but\nsetting a value in the recipe part will provide a new default for all\nstorages. Additionally, for backwards compatibility and composing\nbuildout configurations, if there is a part named <tt>&lt;part&gt;_opts_</tt>,\nwhere <tt>&lt;part&gt;</tt> is the name of the recipe part, options defined there\nwill override options defined in the recipe part, but will bee\noverridden by options defined for an individual storage.</p>\n<p>These two configurations both set the same ZODB cache size.</p>\n<pre><span class=\"k\">[zeo]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">nti.recipes.zodb:zeo</span>\n<span class=\"na\">storages</span> <span class=\"o\">=</span> <span class=\"s\">users</span>\n<span class=\"na\">cache_size</span> <span class=\"o\">=</span> <span class=\"s\">50</span>\n</pre>\n<pre><span class=\"k\">[zeo]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">nti.recipes.zodb:zeo</span>\n<span class=\"na\">storages</span> <span class=\"o\">=</span> <span class=\"s\">users</span>\n\n<span class=\"k\">[zeo_opts]</span>\n<span class=\"na\">cache_size</span> <span class=\"o\">=</span> <span class=\"s\">50</span>\n</pre>\n<dl>\n<dt>cache_size</dt>\n<dd>Controls the ZODB per-connection object cache. Setting this to a large-enough\nvalue to contain your application\u2019s working set can be very important, especially\nin read-heavy workloads. Setting it too large can waste memory.</dd>\n<dt>pool_size</dt>\n<dd><p>Controls the number of ZODB connections kept in the ZODB pool. It\nis very important to set this large enough to accomodate the\nnumber of concurrent activities (requests) your application will\nhandle. Each connection in the pool holds resources like its cache\nand in the case of RelStorage RDBMS sockets and possibly memcache\nsockets. Setting it too large can waste memory and file-descriptors.</p>\n<p>Normally, opening a DB and closing the connection will create a\nconnection (if needed), then return it to the pool (if the pool is\nnot full). However, in the case of multi-databases, when an object\nfrom a secondary database needs to be loaded, the active\nconnection will request a connection to that database, and when\nthe active connection is closed, that secondary connection is also\nclosed <em>but not returned to the pool</em>. Instead, the active\n(primary) connection keeps a reference to it that it will use in\nthe future. This has the effect of driving all secondary pools\nbased on the efficiency of the primary pool. Thus, the pool-size\nfor everything except the primary database is essentially\nmeaningless (if the application always begins by opening that\nprimary database), but that pool size controls everything.</p>\n<p>Calling DB.connectionDebugInfo() can show improperly sized pools:\nconnections in the pool have \u2018opened\u2019 of None, while those in use\nhave a timestamp and the length of time it\u2019s been open.</p>\n</dd>\n</dl>\n</div>\n<div id=\"relstorage\">\n<h2>RelStorage</h2>\n<p>The <tt>relstorage</tt> recipe creates configurations to connect to a\nMySQL, PostgreSQL, or SQLite3 RelStorage database <em>in history-free\nmode</em>. (Oracle is not supported.)</p>\n<p>There are a number of different ways to configure storages. If you\nhave multiple storages residing on a common database server, and you\nalso have other databases on that server (SQLAlchemy, etc), you might\nbe interested in using a shared <tt>environment</tt> section to contain\nthe server location and account credentials.</p>\n<div>\n<p>Note</p>\n<p>Do not store plain passwords in buildout configuration\nfiles. Use something like <a href=\"https://pypi.org/project/nti.recipes.passwords/\" rel=\"nofollow\">nti.recipes.passwords</a> to store\nthem encrypted instead.</p>\n</div>\n<p>By default, the name of the database is the same as the storage name.\nThe storage name\u2019s case is preserved (this matters for cross-database\nreferences.)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... extends = deployment.cfg\n... parts = directories relstorage\n...\n... [environment]\n... sql_user = the_user\n... sql_host = the_server\n... sql_passwd = the_passwd\n...\n... [relstorage]\n... recipe = nti.recipes.zodb:relstorage\n... storages = Users Sessions\n... compress = none\n... \"\"\")\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nInstalling...\nInstalling relstorage.\n&gt;&gt;&gt; ls(sample_buildout, 'etc')\nd  cron.d\nd  logrotate.d\n-  zeo_uris.ini\n-  zodb_conf.xml\n&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zodb_conf.xml')\n%import relstorage\n&lt;zodb Users&gt;\n  cache-size 100000\n  database-name Users\n  pool-size 60\n  &lt;relstorage Users&gt;\n    &lt;mysql&gt;\n      # This comment preserves whitespace\n          db Users\n          host the_server\n          passwd the_passwd\n          user the_user\n    &lt;/mysql&gt;\n  blob-dir /sample-buildout/data/Users.blobs\n  cache-local-dir /sample-buildout/var/caches/data_cache/Users.cache\n  cache-local-mb 300\n  cache-prefix Users\n  commit-lock-timeout 60\n  keep-history false\n  name Users\n  pack-gc false\n  shared-blob-dir false\n&lt;/relstorage&gt;\n&lt;/zodb&gt;\n&lt;zodb Sessions&gt;\n  cache-size 100000\n  database-name Sessions\n  pool-size 60\n  &lt;relstorage Sessions&gt;\n    &lt;mysql&gt;\n      # This comment preserves whitespace\n          db Sessions\n          host the_server\n          passwd the_passwd\n          user the_user\n    &lt;/mysql&gt;\n  blob-dir /sample-buildout/data/Sessions.blobs\n  cache-local-dir /sample-buildout/var/caches/data_cache/Sessions.cache\n  cache-local-mb 300\n  cache-prefix Sessions\n  commit-lock-timeout 60\n  keep-history false\n  name Sessions\n  pack-gc false\n  shared-blob-dir false\n&lt;/relstorage&gt;\n&lt;/zodb&gt;\n&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zeo_uris.ini')\n[ZODB]\nuris = /sample-buildout/etc/zodb_conf.xml#users /sample-buildout/etc/zodb_conf.xml#sessions\n</pre>\n</blockquote>\n<p>Much can be configured at both the recipe level and in a section named\nfor the storage (prefixed with the name of the recipe, unlike in the\nzeo recipe, and suffixed with \u2018_storage_opts\u2019), but a few settings can\nonly be configured on the recipe or environment part.</p>\n<dl>\n<dt>enable-persistent-cache</dt>\n<dd>Defaults to true.</dd>\n<dt>cache-servers</dt>\n<dd>Deprecated. A list of memcache servers to use. Can be configured at the recipe\nor environment level.</dd>\n<dt>blob-cache-size</dt>\n<dd><p>Defaults to no size cap.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... extends = deployment.cfg\n... parts = directories relstorage\n...\n... [environment]\n... sql_user = the_user\n... sql_host = the_server\n... sql_passwd = the_passwd\n...\n... [relstorage]\n... recipe = nti.recipes.zodb:relstorage\n... storages = users sessions\n... compress = none\n... pack_gc = true\n... commit_lock_timeout = 10\n...\n... [relstorage_users_storage_opts]\n... cache_size = 42\n... cache_local_mb = 2\n... sql_user = custom_user\n... \"\"\")\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nUninstalling relstorage...\nInstalling relstorage.\n&gt;&gt;&gt; ls(sample_buildout, 'etc')\nd  cron.d\nd  logrotate.d\n-  zeo_uris.ini\n-  zodb_conf.xml\n&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zodb_conf.xml')\n%import relstorage\n&lt;zodb users&gt;\n  cache-size 42\n  database-name users\n  pool-size 60\n  &lt;relstorage users&gt;\n    &lt;mysql&gt;\n      # This comment preserves whitespace\n          db users\n          host the_server\n          passwd the_passwd\n          user custom_user\n    &lt;/mysql&gt;\n  blob-dir /sample-buildout/data/users.blobs\n  cache-local-dir /sample-buildout/var/caches/data_cache/users.cache\n  cache-local-mb 2\n  cache-prefix users\n  commit-lock-timeout 10\n  keep-history false\n  name users\n  pack-gc true\n  shared-blob-dir false\n&lt;/relstorage&gt;\n&lt;/zodb&gt;\n&lt;zodb sessions&gt;\n  cache-size 100000\n  database-name sessions\n  pool-size 60\n  &lt;relstorage sessions&gt;\n    &lt;mysql&gt;\n      # This comment preserves whitespace\n          db sessions\n          host the_server\n          passwd the_passwd\n          user the_user\n    &lt;/mysql&gt;\n  blob-dir /sample-buildout/data/sessions.blobs\n  cache-local-dir /sample-buildout/var/caches/data_cache/sessions.cache\n  cache-local-mb 300\n  cache-prefix sessions\n  commit-lock-timeout 10\n  keep-history false\n  name sessions\n  pack-gc true\n  shared-blob-dir false\n&lt;/relstorage&gt;\n&lt;/zodb&gt;\n</pre>\n</blockquote>\n</dd>\n</dl>\n<div id=\"configuring-the-adapter\">\n<h3>Configuring The Adapter</h3>\n<p>By default, a MySQL adapter is assumed. Use the <tt>sql_adapter</tt>\nsetting (at the recipe or storage level) to change this.</p>\n<p>The <tt>sql_adapter_extra_args</tt> may be used to add additional\nconfiguration to the <tt>&lt;adapter&gt;</tt> section. This is frequently used to\nselect a driver.</p>\n<p>If you change it to <tt>postgresql</tt> a DSN will be constructed based on\nthe <tt>sql_*</tt> settings. You can set <tt>sql_adapter_args</tt> to completely\nspecify the contents of the <tt>&lt;adapter&gt;</tt> section (this disables\n<tt>sql_adapter_extra_args</tt>).</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... extends = deployment.cfg\n... parts = directories relstorage\n...\n... [environment]\n... sql_user = the_user\n... sql_host = the_server\n... sql_passwd = the_passwd\n...\n... [relstorage]\n... recipe = nti.recipes.zodb:relstorage\n... storages = users sessions\n... compress = none\n... sql_adapter = postgresql\n... sql_adapter_extra_args =\n...     driver gevent psycopg2\n...\n... [relstorage_users_storage_opts]\n... sql_adapter = sqlite3\n... sql_adapter_extra_args =\n...     driver gevent sqlite3\n... \"\"\")\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nUninstalling relstorage...\nInstalling relstorage.\n&gt;&gt;&gt; ls(sample_buildout, 'etc')\nd  cron.d\nd  logrotate.d\n-  zeo_uris.ini\n-  zodb_conf.xml\n&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zodb_conf.xml')\n%import relstorage\n&lt;zodb users&gt;\n  cache-size 100000\n  database-name users\n  pool-size 60\n  &lt;relstorage users&gt;\n    &lt;sqlite3&gt;\n      # This comment preserves whitespace\n          data-dir /sample-buildout/data/relstorage_users_storage\n          driver gevent sqlite3\n    &lt;/sqlite3&gt;\n  blob-dir /sample-buildout/data/users.blobs\n  cache-local-dir /sample-buildout/var/caches/data_cache/users.cache\n  cache-local-mb 300\n  cache-prefix users\n  commit-lock-timeout 60\n  keep-history false\n  name users\n  pack-gc false\n  shared-blob-dir true\n&lt;/relstorage&gt;\n&lt;/zodb&gt;\n&lt;zodb sessions&gt;\n  cache-size 100000\n  database-name sessions\n  pool-size 60\n  &lt;relstorage sessions&gt;\n    &lt;postgresql&gt;\n      # This comment preserves whitespace\n          driver gevent psycopg2\n          dsn dbname='sessions' user='the_user' password='the_passwd' host='the_server'\n    &lt;/postgresql&gt;\n  blob-dir /sample-buildout/data/sessions.blobs\n  cache-local-dir /sample-buildout/var/caches/data_cache/sessions.cache\n  cache-local-mb 300\n  cache-prefix sessions\n  commit-lock-timeout 60\n  keep-history false\n  name sessions\n  pack-gc false\n  shared-blob-dir false\n&lt;/relstorage&gt;\n&lt;/zodb&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"other-files\">\n<h3>Other Files</h3>\n<p>If the recipe was <tt><span class=\"pre\">write-zodbconvert</span></tt> set to <tt>true</tt>, then a set of\nconfiguration files for converting to and from RelStorage and\nFileStorage using <tt>zodbconvert</tt> will be generated.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... extends = deployment.cfg\n... parts = directories relstorage\n...\n... [environment]\n... sql_user = the_user\n... sql_host = the_server\n... sql_passwd = the_passwd\n...\n... [relstorage]\n... recipe = nti.recipes.zodb:relstorage\n... storages = users\n... compress = none\n... write-zodbconvert = true\n... \"\"\")\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nUninstalling relstorage...\nInstalling relstorage.\n&gt;&gt;&gt; ls(sample_buildout, 'etc')\nd  cron.d\nd  logrotate.d\nd  relstorage\n-  zeo_uris.ini\n-  zodb_conf.xml\n&gt;&gt;&gt; ls(sample_buildout, 'etc', 'relstorage')\n-  users_from_relstorage_conf.xml\n-  users_to_relstorage_conf.xml\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"zeo\">\n<h2>ZEO</h2>\n<p>The <tt>zeo</tt> recipe can be used to create configurations for a ZEO\nclient and ZEO server. It is only intended for personal or test\nenvironments.</p>\n<p>Options</p>\n<p>Just like the <tt>relstorage</tt> recipe, it requires one or more storages.\nOptions can be set in the <tt>zeo</tt> part to apply to all storages, in a\npart named for the storage to configure the server, or in a part named\nfor the client to configure the client. Note that the client also\ninherits configuration options from the server.</p>\n<dl>\n<dt>pack-gc</dt>\n<dd><p>Defaults to false. This can only be set on the recipe part.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... extends = deployment.cfg\n... parts = directories zeo\n...\n... [zeo]\n... recipe = nti.recipes.zodb:zeo\n... storages = Users Sessions\n... compress = none\n... pack-gc = true\n...\n... [users_storage_opts]\n... pack-gc = true\n... pool_size = 25\n...\n... [sessions_client_opts]\n... cache-size = 42\n... \"\"\")\n</pre>\n</blockquote>\n</dd>\n</dl>\n<p>And it creates several configuration files:</p>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nUninstalling relstorage...\nInstalling zeo.\n&gt;&gt;&gt; ls(sample_buildout, 'etc')\nd  cron.d\nd  logrotate.d\n-  zeo-zdaemon.conf\n-  zeo-zeo.conf\n-  zeo_uris.ini\n-  zodb_conf.xml\n-  zodb_file_uris.ini\n</pre>\n<p>Standard Files</p>\n<p>The <tt>zodb_conf.xml</tt> and <tt>zeo_uris.ini</tt> are created as for RelStorage (the <tt><span class=\"pre\">zconfig://</span></tt>\nprefixes are missing from the URIs because of a quirk in testing):</p>\n<blockquote>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zodb_conf.xml')\n&lt;zodb Users&gt;\n  cache-size 100000\n  database-name Users\n  pool-size 25\n  &lt;zeoclient&gt;\n    blob-dir /sample-buildout/data/Users.blobs\n    name Users\n    server /sample-buildout/var/zeosocket\n    shared-blob-dir true\n    storage 1\n  &lt;/zeoclient&gt;\n&lt;/zodb&gt;\n&lt;zodb Sessions&gt;\n  cache-size 42\n  database-name Sessions\n  pool-size 60\n  &lt;zeoclient&gt;\n    blob-dir /sample-buildout/data/Sessions.blobs\n    name Sessions\n    server /sample-buildout/var/zeosocket\n    shared-blob-dir true\n    storage 2\n  &lt;/zeoclient&gt;\n&lt;/zodb&gt;\n&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zeo_uris.ini')\n[ZODB]\nuris = /sample-buildout/etc/zodb_conf.xml#users /sample-buildout/etc/zodb_conf.xml#sessions\n</pre>\n</blockquote>\n<p>zdaemon.conf</p>\n<p>This file, prefixed with the name of the buildout part, is the\nconfiguration to use with the <tt>zdaemon</tt> command\u2019s <tt><span class=\"pre\">-C</span></tt> option in\norder to run the ZEO server.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zeo-zdaemon.conf')\n&lt;runner&gt;\n  daemon on\n  directory /sample-buildout/var\n  program /sample-buildout/bin/runzeo -C /sample-buildout/etc/zeo-zeo.conf\n  socket-name /sample-buildout/var/zeo-zdaemon.sock\n  transcript /sample-buildout/var/log/zeo-zeo.log\n  user user\n&lt;/runner&gt;\n&lt;BLANKLINE&gt;\n&lt;eventlog&gt;\n  &lt;logfile&gt;\n    path /sample-buildout/var/log/zeo-zeo.log\n  &lt;/logfile&gt;\n&lt;/eventlog&gt;\n</pre>\n</blockquote>\n<p>zeo-conf.conf</p>\n<p>This is the actual ZEO server configuration, again prefixed with the part name.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'etc', 'zeo-zeo.conf')\n&lt;zeo&gt;\n  address /sample-buildout/var/zeosocket\n&lt;/zeo&gt;\n&lt;BLANKLINE&gt;\n&lt;filestorage 1&gt;\n  blob-dir /sample-buildout/data/Users.blobs\n  pack-gc true\n  path /sample-buildout/data/Users.fs\n&lt;/filestorage&gt;\n&lt;BLANKLINE&gt;\n&lt;filestorage 2&gt;\n  blob-dir /sample-buildout/data/Sessions.blobs\n  pack-gc true\n  path /sample-buildout/data/Sessions.fs\n&lt;/filestorage&gt;\n&lt;BLANKLINE&gt;\n&lt;eventlog&gt;\n  &lt;logfile&gt;\n    format %(asctime)s %(message)s\n    level DEBUG\n    path /sample-buildout/var/log/zeo.log\n  &lt;/logfile&gt;\n&lt;/eventlog&gt;\n</pre>\n</blockquote>\n<p>zodb_file_uris.ini</p>\n<p>Intentionally undocumented. Expert use only.</p>\n</div>\n\n          </div>"}, "last_serial": 6157446, "releases": {"0.0.0.dev0": [], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "ae5409a37555dbd66eb38a6578875f7d", "sha256": "a425cb4418f8ab8730e9ffeb957e5dc45637ee147c62147a23b736d44f3e660f"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae5409a37555dbd66eb38a6578875f7d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13017, "upload_time": "2019-11-14T12:04:15", "upload_time_iso_8601": "2019-11-14T12:04:15.059024Z", "url": "https://files.pythonhosted.org/packages/c1/82/096d68fd66c20e23fcbd4d5db621f301c7f6ef0bfbf36e0fd9ba6394fbdd/nti.recipes.zodb-1.0.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca553d31f27eac1ea0669b0b483c9824", "sha256": "8816d275d94ec85598724e3f02fead971205a32ab7a0451b333e5f6689589a5d"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "ca553d31f27eac1ea0669b0b483c9824", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11510, "upload_time": "2019-11-14T12:04:16", "upload_time_iso_8601": "2019-11-14T12:04:16.531446Z", "url": "https://files.pythonhosted.org/packages/65/a2/40a0e0a15eb4ff6f0dc849a1c0022a6a12d1d1b2788200d370d7d188b61e/nti.recipes.zodb-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "b0e50092ae8692e86b444d3d85f5d964", "sha256": "1b60fb0214202c24176f0855df39f393bc4cd74f74d8a4b9cf9f79e9cf2548bf"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0e50092ae8692e86b444d3d85f5d964", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27598, "upload_time": "2019-11-15T17:19:19", "upload_time_iso_8601": "2019-11-15T17:19:19.408909Z", "url": "https://files.pythonhosted.org/packages/a6/ab/ee85b12d7b445f588967bfadd2d5040ab0003ba828ee0deeed707983b42d/nti.recipes.zodb-1.0.0a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7c63f23b9c959042757e601e40d99b3", "sha256": "3c7af7c27012a1337990b3da1a1535504c98bdfcad11aa702fef2427a1520508"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "b7c63f23b9c959042757e601e40d99b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31787, "upload_time": "2019-11-15T17:19:21", "upload_time_iso_8601": "2019-11-15T17:19:21.048017Z", "url": "https://files.pythonhosted.org/packages/7f/15/7abb5b5a640428acfe8e61195719c9ef690cefb0582b138b8ec3e22bcae5/nti.recipes.zodb-1.0.0a2.tar.gz", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "15855e29aae5046f5ac7b2d1b3838953", "sha256": "a2e91095cb3691d0ad92a760e52ade68cc0308109c5033ca63fd7cc25fa01abf"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15855e29aae5046f5ac7b2d1b3838953", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27696, "upload_time": "2019-11-18T18:30:58", "upload_time_iso_8601": "2019-11-18T18:30:58.848256Z", "url": "https://files.pythonhosted.org/packages/a5/ac/70f2a183271f2a76ad07ca40741f042235da49942d6f7f0da5e5c262bac1/nti.recipes.zodb-1.0.0a3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ad89875c78abde6fd96f1011633d674", "sha256": "12e48ba97ba7443976cad0d1e32eff838806c9ac00315e06b639628c01c8f6e7"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "8ad89875c78abde6fd96f1011633d674", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32124, "upload_time": "2019-11-18T18:31:00", "upload_time_iso_8601": "2019-11-18T18:31:00.399857Z", "url": "https://files.pythonhosted.org/packages/9b/a8/2b7f9c0575fb88e3ab688c52d9910d167315459c02b374760468304a4cfe/nti.recipes.zodb-1.0.0a3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15855e29aae5046f5ac7b2d1b3838953", "sha256": "a2e91095cb3691d0ad92a760e52ade68cc0308109c5033ca63fd7cc25fa01abf"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15855e29aae5046f5ac7b2d1b3838953", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27696, "upload_time": "2019-11-18T18:30:58", "upload_time_iso_8601": "2019-11-18T18:30:58.848256Z", "url": "https://files.pythonhosted.org/packages/a5/ac/70f2a183271f2a76ad07ca40741f042235da49942d6f7f0da5e5c262bac1/nti.recipes.zodb-1.0.0a3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ad89875c78abde6fd96f1011633d674", "sha256": "12e48ba97ba7443976cad0d1e32eff838806c9ac00315e06b639628c01c8f6e7"}, "downloads": -1, "filename": "nti.recipes.zodb-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "8ad89875c78abde6fd96f1011633d674", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32124, "upload_time": "2019-11-18T18:31:00", "upload_time_iso_8601": "2019-11-18T18:31:00.399857Z", "url": "https://files.pythonhosted.org/packages/9b/a8/2b7f9c0575fb88e3ab688c52d9910d167315459c02b374760468304a4cfe/nti.recipes.zodb-1.0.0a3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:21 2020"}