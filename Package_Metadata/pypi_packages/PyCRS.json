{"info": {"author": "Karim Bahgat", "author_email": "karim.bahgat.norway@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved", "Programming Language :: Python", "Topic :: Scientific/Engineering :: GIS"], "description": "# PyCRS\n\n[![Build Status](https://travis-ci.org/karimbahgat/PyCRS.svg?branch=master)](https://travis-ci.org/karimbahgat/PyCRS)\n\nPyCRS is a pure Python GIS package for reading, writing, and converting between various\ncommon coordinate reference system (CRS) string and data source formats. \n\n![](https://github.com/karimbahgat/pycrs/raw/master/testrenders/logo.png \"PyCRS\")\n\n- [GitHub Repository](http://github.com/karimbahgat/PyCRS)\n- [API Documentation](https://karimbahgat.github.io/PyCRS/)\n\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [Status](#status)\n- [Changes](#changes)\n- [Dependencies](#dependencies)\n- [Installation](#installation)\n- [Examples](#examples)\n    - [Creating a CS Instance](#creating-a-cs-instance)\n        - [Loading from an external source](#loading-from-an-external-source)\n            - [Loading from a Shapefile](#loading-from-a-shapefile)\n            - [Loading from a GeoJSON](#loading-from-a-geojson)\n            - [Loading from a URL](#loading-from-a-url)\n        - [Parsing from a text string](#parsing-from-a-text-string)\n            - [Parsing from proj4 string](#parsing-from-proj4-string)\n            - [Parsing from ESRI WKT string](#parsing-from-esri-wkt-string)\n            - [Parsing from OGC WKT string](#parsing-from-ogc-wkt-string)\n            - [Parsing from unknown string](#parsing-from-unknown-string)\n        - [Looking up a coordinate system code](#looking-up-a-coordinate-system-code)\n            - [Looking up EPSG codes](#looking-up-epsg-codes)\n            - [Looking up ESRI codes](#looking-up-esri-codes)\n            - [Looking up SR codes](#looking-up-sr-codes)\n\t\t- [Searching for coordinate systems by name or area](#searching-for-coordinate-systems-by-name-or-area)\n\t\t\t- [Loading from search results](#loading-from-search-results)\n    - [Inspecting the CS Instance](#inspecting-the-cs-instance)\n        - [Geographic CS](#geographic-crs)\n        - [Projected CS](#projected-crs)\n    - [Converting to other CRS formats](#converting-to-other-crs-formats)\n        - [Converting to Proj4](#converting-to-proj4)\n        - [Converting to ESRI WKT](#converting-to-esri-wkt)\n        - [Converting to OGC WKT](#converting-to-ogc-wkt)\n\t- [Representing as a coordinate system code](#representing-as-a-coordinate-system-code)\n\t\t- [Representing as an EPSG code](#representing-as-an-epsg-code)\n- [Recipes](#recipes)\n\t- [Modifying the CS Instance](#modifying-the-cs-instance)\n    - [Coordinate Transformations](#coordinate-transformations)\n    - [Writing a Shapefile .prj file](#writing-a-shapefile-.prj-file)\n- [Testing](#testing)\n- [License](#license)\n- [Credits](#credits)\n\n\n## Introduction\n\nPython should have a standalone GIS library focused solely on coordinate reference system metadata.\nThat is, a library focused on the various formats used to store and represent crs definitions, including\nOGC WKT, ESRI WKT, Proj4, and various short-codes defined by organizations like EPSG, ESRI, and SR-ORG.\nCorrectly parsing and converting between these formats is essential in many types of GIS work.\nFor instance when trying to use PyProj to transform coordinates from a non-proj4 crs format. Or\nwhen wanting to convert the crs from a GeoJSON file to a .prj file. Or when simply adding a crs definition\nto a file that was previously missing one. \n\nWhen I created PyCRS, the only way to read and convert between crs formats was to use the extensive Python\nGDAL suite and its srs submodule, but the requirements of some applications might exclude the use of\nGDAL. There have also been some online websites/services, but these only allow partial lookups or\none-way conversion from one format to another. I therefore hope that PyCRS will make it easier for\nlightweight applications to read a broader range of data files and correctly interpret and possibly transform\ntheir crs definitions. Written entirely in Python I also hope it will help clarify the differences\nbetween the various formats, and make it easier for more people to help keep it up-to-date and bug-free. \n\n\n## Status\n\nCurrently, the supported formats are OGC WKT (v1), ESRI WKT, Proj4, and any EPSG, ESRI, or SR-ORG code\navailable from spatialreference.org. In the future I hope to add support for OGC URN identifier strings,\nand GeoTIFF file tags.\n\nThere are still some cases where PyCRS does not perfectly parse or convert between all crs formats,\nbased on (hopefully mostly cosmetic) differences from the results of other parsers like GDAL.\nIn the source repository there is a tester.py script, which uses a barrage of commonly\nused crs as listed on http://www.remotesensing.org/geotiff/proj_list/. Currently, the overall success rate\nfor loading as well as converting between the three main formats is 80-90%, and visual inspections of \nrendering the world with each crs generally look correct. However, whether the converted crs strings\nare logically equivalent to each other from a mathematical standpoint is something that needs a more detailed\nquality check. \n\n\n## Changes\n\n### 1.0.2 (2020-03-09)\n\n- Add search functions to lookup epsg.io\n- Add to_epsg_code() method from, based on prj2epsg.org (#47, @fitoprincipe)\n- Switch to using epsg.io when looking up epsg codes\n- Fix broken spatialreference link by switching to SSL\n- Added Clarke 1880 ellipsoid\n- Use default datum ellipsoid when ellipsoid not specified\n- Better warning and error when proj4 ellipsoid cannot be found\n- Misc bug fixes\n\n### 1.0.1 (2019-03-07)\n\n- Misc docstring changes\n- More flexible parsing, in case projection is not the second element\n- More informative exceptions\n\n### 1.0.0 (2019-02-04)\n\n- API Changes:\n- Dropping CRS wrapper class, instead handling GeogCS or ProjCS directly\n- Change module names to load.py, and parse.py\n- Move Ellipsoid, Datum, and Projection to their respective modules\n- Allow proj4 input and output as dict\n- Fixes:\n- Added more documentation\n- Fix +f interpretation\n- Include reading +rf parameter\n- Better ellipsoid support for +a and +b\n- Fix Python 3 bugs\n- Fix proj4 standard parallels being ignored\n- Parse WKT CS names which were ignored before\n- Support for prime meridian city names\n\n### 0.1.3 (2016-06-25)\n\n- Fixed various bugs\n- Pip install fix for Mac and Linux\n- Python 3 compatability\n\n### 0.1.2 (2015-08-05)\n\n- First official release\n\n\n## Dependencies\n\nPure Python, no dependencies. Python 2 and 3 compatible. \n\n\n## Installation\n\nPyCRS is installed with pip from the commandline:\n\n    pip install pycrs\n\nIt also works to just place the \"pycrs\" package folder in an importable location like \n\"PythonXX/Lib/site-packages\".\n\n\n## Examples\n\nBegin by importing the pycrs module:\n\n    >>> import pycrs\n\n\n### Creating a CS Instance\n\nPyCRS uses different types of CS classes to represent and handle all coordinate reference systems.\nTo create one you can either load it from a source, parse it from a string,\nlook up from a CRS code, or build it from scratch. Let's review these different ways of creating\na CS type instance. \n\n\n#### Loading from an external source\n\nIf you know the crs information is located in some external source, PyCRS provides some convenient\nfunctions for loading these, all located in the \"pycrs.load\" module. \n\n##### Loading from a Shapefile\n\nIn most situations this will mean reading the ESRI .prj file that accomponies\na shapefile. PyCRS has a convenience function for doing that:\n\n    >>> crs = pycrs.load.from_file(\"testfiles/natearth.prj\")\n\n##### Loading from a GeoJSON\n\nThe same function also supports reading the crs from GeoJSON files:\n\n    >>> crs = pycrs.load.from_file(\"testfiles/cshapes.geo.json\")\n\n##### Loading from a URL\n\nIf your crs is not defined in a file, but rather as plain text on a webpage, there is also a function for that:\n\n    >>> crs = pycrs.load.from_url(\"http://spatialreference.org/ref/esri/54030/ogcwkt/\")\n\n\n#### Parsing from a text string\n\nIn many cases however, you may already have the string representation in your code. This could be if you\nare interoperating with other libraries, or you have already read it from some external source.\nIn these cases, you can create the CS type instance by using the functions available in the \"pycrs.parse\"\nmodule.\n\n##### Parsing from proj4 string or dict\n\nTo create the CS type instance from a proj4 string, you can do like this:\n\n    >>> proj4 = \"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"\n    >>> crs = pycrs.parse.from_proj4(proj4)\n\nOr if your proj4 string is represented as a dict:\n\n    >>> proj4_as_dict = dict(proj='robin', lon_0=0, x_0=0, y_0=0, ellps='WGS84', datum='WGS84', units='m')\n    >>> crs = pycrs.parse.from_proj4(proj4_as_dict)\n\n##### Parsing from ESRI WKT string\n\nThe ESRI WKT format is the format typically found in a shapefile's .prj file.\nIf you have already loaded it from a file, you can parse it like this:\n\n    >>> esri_wkt = 'PROJCS[\"World_Robinson\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Robinson\"],PARAMETER[\"False_Easting\",0],PARAMETER[\"False_Northing\",0],PARAMETER[\"Central_Meridian\",0],UNIT[\"Meter\",1]]'\n    >>> crs = pycrs.parse.from_esri_wkt(esri_wkt)\n\n##### Parsing from OGC WKT string\n\nThe Open Geospatial Consortium (OGC) WKT format is a newer variant of the ESRI WKT.\nThere are only minor differences, but will likely be more supported in the future. \nIf you already have it as a string, you can parse it like this:\n\n    >>> ogc_wkt = 'PROJCS[\"World_Robinson\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Robinson\"],PARAMETER[\"False_Easting\",0],PARAMETER[\"False_Northing\",0],PARAMETER[\"Central_Meridian\",0],UNIT[\"Meter\",1],AUTHORITY[\"EPSG\",\"54030\"]]'\n    >>> crs = pycrs.parse.from_ogc_wkt(ogc_wkt)\n\n##### Parsing from unknown string\n\nFinally, if you do not know the format of the crs string, you can also let PyCRS autodetect\nand parse the crs type for you:\n\n    >>> for unknown in [proj4, esri_wkt, ogc_wkt]:\n    ...     crs = pycrs.parse.from_unknown_text(unknown)\n\n\n#### Looking up a coordinate system code\n\nAnother common way to store a coordinate system is through a lookup code that is available for\nmany of the more commonly used ones. Multiple different agencies have defined their own sets of\ncodes.\n\n##### Looking up EPSG codes\n\nTo look up codes defined by EPSG:\n\n    >>> crs = pycrs.parse.from_epsg_code(4326)\n\n##### Looking up ESRI codes\n\nTo look up codes defined by ESRI:\n\n    >>> crs = pycrs.parse.from_esri_code(54030)\n\n##### Looking up SR codes\n\nTo look up codes defined by spatialreference.org:\n\n    >>> crs = pycrs.parse.from_sr_code(42)\n\t\n\n#### Searching for coordinate systems by name or area\n\nFinally, if you don't know the specific code or definition of a particular crs there's also search functions to look it up on the epsg.io website. For instance, if you want to use the Robinson projection but not sure how to load it, you could interactively search and inspect the potential matches: \n\n\t>>> for match in pycrs.utils.search_name('robinson'): \n\t...     # do something\n\t... \tpass\n\t\nSimilarly, if you need to know which projection would be suitable for a particular country, you could search for that as well:\n    \n\t>>> for match in pycrs.utils.search_area('brazil'): \n\t...     # do something\n\t... \tpass\n\t\nYou could also do a custom search using various specifiers, such as a projection in a particular area (the full list of specifiers is available at https://github.com/maptiler/epsg.io):\n\n\t>>> for match in pycrs.utils.search('name:utm area:belgium'): \n\t... \t# do something\n\t... \tpass\n\t\n##### Loading from search results\n\t\nThe search match results include the epsg code, proj4, and wkt representations, any of which could be used to load a CS instance: \n\n\t>>> topmatch = next(pycrs.utils.search_name('wgs 84'))\n\t>>> crs = pycrs.parse.from_proj4(topmatch['proj4'])\n\t\n\n\n### Inspecting the CS Instance\n\nOnce you have loaded, parsed, looked up, or created a coordinate reference system, you end up with one of the \nCS type instances in the pycrs.cs module. All CS types are subclasses of pycrs.CS:\n\n\t>>> isinstance(crs, pycrs.CS)\n\tTrue\n\t\nPyCRS currently only supports the two most common types of CS, geographic or projected. \n\n#### Geographic CS\n\nA geographic reference system keeps coordinates in the latitude-longitude space, and the reason we specify\nit is because there are different ways of defining the shape of the earth. As an example, let's load the commonly\nused WGS84 geographic coordinate system:\n\n    >>> crs = pycrs.parse.from_epsg_code(4326)\n\t\nIf it loaded correctly you should now have a pycrs.GeogCS instance, which you can also check through the `cs_type` attribute:\n\n\t>>> isinstance(crs, pycrs.GeogCS)\n\tTrue\n    >>> crs.cs_type\n    'Geographic'\n\nThrough the GeogCS instance, we can further access its subcomponents and parameters.\nFor instance, if we wanted to check the datum we could do:\n\n    >>> datum = crs.datum\n    >>> isinstance(datum, pycrs.elements.datums.WGS84)\n    True\n\nOr the inverse flattening factor of the ellipsoid:\n\n    >>> ellips = crs.datum.ellips\n    >>> ellips.inv_flat.value\n    298.257223563\n\nFor more ideas on how to inspect the GeogCS instance, the following overview gives an idea of the\ncomposition and attributes of a geographic CS:\n\n- pycrs.GeogCS\n\t- `name` -> string\n\t- `datum` -> a datum from pycrs.elements.datums\n\t\t- `name` -> pycrs.elements.datums.DatumName\n\t\t\t- `proj4` -> string\n\t\t\t- `esri_wkt` -> string\n\t\t\t- `ogc_wkt` -> string\n\t\t- `ellips` -> an ellipsoid from pycrs.elements.ellipsoids\n\t\t\t- `name` -> pycrs.elements.ellipsoids.EllipsoidName\n\t\t\t\t- `proj4` -> string\n\t\t\t\t- `esri_wkt` -> string\n\t\t\t\t- `ogc_wkt` -> string\n\t\t\t- `semimaj_ax` -> pycrs.elements.parameters.SemiMajorRadius\n\t\t\t\t- `value` -> float\n\t\t\t- `semimin_ax` -> (optional) pycrs.elements.parameters.SemiMinorRadius\n\t\t\t\t- `value` -> float\n\t\t\t- `flat` -> (optional) pycrs.elements.parameters.Flattening\n\t\t\t\t- `value` -> float\n\t\t\t- `inv_flat` -> (optional) pycrs.elements.parameters.InverseFlattening\n\t\t\t\t- `value` -> float\n\t\t- `datumshift` -> (optional) pycrs.elements.parameters.DatumShift or None\n\t- `prime_mer` -> pycrs.elements.parameters.PrimeMeridian\n\t\t- `value` -> float\n\t- `angunit` -> an angular unit from pycrs.elements.units, eg Degree\n\t\t- `unitname` -> pycrs.elements.units.UnitName\n\t\t\t- `proj4` -> string\n\t\t\t- `esri_wkt` -> string\n\t\t\t- `ogc_wkt` -> string\n\t\t- `unitmultiplier` -> pycrs.elements.units.UnitMultiplier\n\t\t\t- `value` -> float\n\t- `twin_ax` -> tuple\n\t\t- 1: a named compass direction (east-west) from pycrs.elements.directions\n\t\t- 2: a named compass direction (north-south) from pycrs.elements.directions\n\n#### Projected CS\n\nA projected reference system keeps coordinates in projected x-y space. In addition to\ndefining the shape of the earth through a child GeogCS, the projected reference system\ndefines some additional parameters in order to transform the coordinates to a wide\nvariety of map types. Let's take the commonly used World Robinson projected coordinate\nsystem as our example:\n\n    >>> crs = pycrs.parse.from_esri_code(54030)\n\t\nIf it loaded correctly you should now have a pycrs.ProjCS instance, which you can also check through the `cs_type` attribute:\n\n\t>>> isinstance(crs, pycrs.ProjCS)\n\tTrue\n    >>> crs.cs_type\n    'Projected'\n\nThrough the ProjCS instance, we can further access its subcomponents and parameters.\nFor instance, if we wanted to check the named projection we could do:\n\n    >>> proj = crs.proj\n    >>> isinstance(proj, pycrs.elements.projections.Robinson)\n    True\n\nOr check the type of coordinate unit:\n\n    >>> unit = crs.unit\n    >>> isinstance(unit, pycrs.elements.units.Meter)\n    True\n\nFor more ideas on how to inspect the ProjCS instance, the following overview gives an idea of the\ncomposition and attributes of a projected CS:\n\n- pycrs.ProjCS\n\t- `name` -> string\n\t- `geogcs` -> pycrs.GeogCS (See the section on geographic CS...)\n\t- `proj` -> a projection from pycrs.elements.projections\n\t\t- `name` -> pycrs.elements.projections.ProjName\n\t\t\t- `proj4` -> string\n\t\t\t- `esri_wkt` -> string\n\t\t\t- `ogc_wkt` -> string\n\t- `params` -> list\n\t\t- 1: named parameters from pycrs.elements.parameters\n\t\t- 2: named parameters from pycrs.elements.parameters\n\t\t- 3: ...\n\t\t- n: named parameters from pycrs.elements.parameters\n\t- `unit` -> a unit from pycrs.elements.units\n\t\t- `unitname` -> pycrs.elements.units.UnitName\n\t\t\t- `proj4` -> string\n\t\t\t- `esri_wkt` -> string\n\t\t\t- `ogc_wkt` -> string\n\t\t- `unitmultiplier` -> pycrs.elements.units.UnitMultiplier\n\t\t\t- `value` -> float\n\t- `twin_ax` -> tuple\n\t\t- 1: a named compass direction (east-west) from pycrs.elements.directions\n\t\t- 2: a named compass direction (north-south) from pycrs.elements.directions\n\n    \n\n### Converting to other CRS formats\n\nOnce you have read the crs of the original data source, you may want to convert it to some other crs format.\nPyCRS allows converting to the following CRS formats:\n\n#### Converting to Proj4\n\n\t# as a string\n    >>> crs.to_proj4()\n    '+proj=robin +datum=WGS84 +ellps=WGS84 +a=6378137.0 +rf=298.257223563 +pm=0 +lon_0=0 +x_0=0 +y_0=0 +units=m +axis=enu +no_defs'\n\t\n\t# or as a dict\n\t>>> isinstance(crs.to_proj4(as_dict=True), dict)\n\tTrue\n\n#### Converting to ESRI WKT\n\n    >>> crs.to_esri_wkt()\n    'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"D_WGS_1984\", SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"False_Easting\", 0], PARAMETER[\"False_Northing\", 0], UNIT[\"Meter\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n\n#### Converting to OGC WKT\n\n    >>> crs.to_ogc_wkt()\n    'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"WGS_1984\", SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n\t\n\t\n### Representing as a coordinate system code\n\nJust as it's possible to load the crs from predefined coordinate system codes defined by various authorities, it's also sometimes needed to lookup and represent the crs as a coordinate system code, if it exists. \n\n#### Representing as an EPSG code\n\nCurrently, this is only implemented for looking up the EPSG code. This searches the crs wkt representation on prj2epsg.org and returns the EPSG code of the first result, or None if the wkt does not have an associated EPSG code. \n\n\t# to epsg code\n\t>>> crs = pycrs.parse.from_epsg_code(4326)\n\t>>> crs.to_epsg_code()\n\t4326\n\t\nBecause a crs definition can have many variations, looking up its coordinate system code might yield multiple possible matches, in which case a warning is raised. For more control to choose the right match, a wkt search utility is also available that returns all possible matches with metadata: \n\n\t# more flexible utility search for epsg code\n\t>>> crs = pycrs.parse.from_sr_code(42)\n\t>>> results = pycrs.utils.wkt_to_epsg(crs.to_esri_wkt())\n\t\n\t# display the top match info\n\t>>> topmatch = results['codes'][0]\n\t>>> topmatch['code']\n\t'3857'\n\t>>> topmatch['name']\n\t'WGS 84 / Pseudo-Mercator'\n\n\n---\n\t\n## Recipes\n\n### Modifying the CS Instance\n\nIn most case you will only ever need to load a CRS and convert it to some format. \nSometimes, however, you may want to tweak the parameters of your CS type instance.\nKnowing the composition of your CS type instance, this is as easy as setting/replacing the\ndesired attributes. \n\nLet's demonstrate some examples using the World Robinson projection:\n\n    >>> crs = pycrs.parse.from_esri_code(54030) # Robinson projection from esri code\n    >>> crs.to_ogc_wkt()\n    'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"WGS_1984\", SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n\nHere is a map of the default Robinson projection:\n\n![](https://github.com/karimbahgat/pycrs/raw/master/testrenders/docs_orig.png \"Defualt Robinson\")\n\nLet's say we wanted to switch its datum from WGS84 to NAD83, we could do it\nlike so:\n\n    >>> crs.geogcs.datum = pycrs.elements.datums.NAD83()\n    >>> crs.to_ogc_wkt()\n    'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"North_American_Datum_1983\", SPHEROID[\"GRS_1980\", 6378137.0, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n\nOr let's say we wanted to switch its prime meridian, so that the longitude axis is centered\ncloser to the Pacific instead of over Greenwhich:\n\n    >>> crs.geogcs.prime_mer.value = 160.0\n    >>> crs.to_ogc_wkt()\n    'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"North_American_Datum_1983\", SPHEROID[\"GRS_1980\", 6378137.0, 298.257222101]], PRIMEM[\"Greenwich\", 160], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n\nAnd here is what that map would look like (the odd-looking lines is just a rendering issue due to\npolygons that cross the meridian):\n\n![](https://github.com/karimbahgat/pycrs/raw/master/testrenders/docs_tweak2.png \"Modified Robinson\")\n\nOr if we just switch the projection type alltogether:\n\n    >>> crs.proj = pycrs.elements.projections.Sinusoidal()\n    >>> crs.to_ogc_wkt()\n    'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"North_American_Datum_1983\", SPHEROID[\"GRS_1980\", 6378137.0, 298.257222101]], PRIMEM[\"Greenwich\", 160], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Sinusoidal\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n\t\n![](https://github.com/karimbahgat/pycrs/raw/master/testrenders/docs_tweak3.png \"Modified Sinusoidal\")\t\n\n### Coordinate Transformations\n\nA common reason for wanting to convert between CRS formats, is if you want to transform coordinates\nfrom one coordinate system to another. In Python this is typically done with the PyProj module,\nwhich only takes proj4 format. Using PyCRS we can easily define the original coordinate system that\nwe want to convert and get its proj4 representation:\n\n    >>> fromcrs = pycrs.parse.from_epsg_code(4326) # WGS84 projection from epsg code\n    >>> fromcrs_proj4 = fromcrs.to_proj4()\n\nWe can then use PyCRS to define our target projection from the format of your choice, before converting\nit to the proj4 format that PyProj expects:\n\n    >>> tocrs = pycrs.parse.from_esri_code(54030) # Robinson projection from esri code\n    >>> tocrs_proj4 = tocrs.to_proj4()\n\nWith the source and target projections defined in the proj4 crs format, we are ready to transform our\ndata coordinates with PyProj: \n\n    >>> import pyproj\n    >>> fromproj = pyproj.Proj(fromcrs_proj4)\n    >>> toproj = pyproj.Proj(tocrs_proj4)\n    >>> lng,lat = -76.7075, 37.2707  # Williamsburg, Virginia :)\n    >>> pyproj.transform(fromproj, toproj, lng, lat)\n    (-6766170.001635834, 3985755.032695593)\n\n### Writing a Shapefile .prj file\n\nAfter you transform your data coordinates you may also wish to save the data back to file along with the new\ncrs. With PyCRS you can do this in a variety of crs format. For instance, to write a shapefile .prj file:\n\n    >>> with open(\"testfiles/shapefile.prj\", \"w\") as writer:\n    ...     _ = writer.write(tocrs.to_esri_wkt())\n\n\n\n---\n\n## Testing\n\nThe testing suite is still a work in progress and is spread across multiple files.\nThe files testdocs.py (the official doctests) and testbatch.py (tests and renders a batch of projections)\ncan be run from the prompt:\n\n    python testdocs.py\n    python testbatch.py\n\nThe test files have a few dependent python packages that will need to be installed to fully work:\n\n- [pyproj](https://github.com/jswhit/pyproj) - cartographic projection and coordinate system transformation, python wrapper PROJ.4 C library\n- [PyAgg](https://github.com/karimbahgat/PyAgg) - Aggdraw wrapper for lightweight drawing\n- [PyGeoj](https://github.com/karimbahgat/PyGeoj) - geojson reader/writer\n \n\n\n\n\n\n\n## License\n\nThis code is free to share, use, reuse,\nand modify according to the MIT license, see license.txt\n\n\n\n## Credits\n\n- Karim Bahgat\n- Micah Cochrain\n- Mike Kittridge\n- Roger Lew\n- Gregory Halvorsen\n- M Clark\n- David Hoese\n- Rodrigo E. Principe", "description_content_type": "text/markdown", "docs_url": "https://pythonhosted.org/PyCRS/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/karimbahgat/PyCRS", "keywords": "GIS spatial CRS projection coordinate system format", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyCRS", "package_url": "https://pypi.org/project/PyCRS/", "platform": "", "project_url": "https://pypi.org/project/PyCRS/", "project_urls": {"Homepage": "http://github.com/karimbahgat/PyCRS"}, "release_url": "https://pypi.org/project/PyCRS/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "GIS package for reading, writing, and converting between CRS formats.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCRS</h1>\n<p><a href=\"https://travis-ci.org/karimbahgat/PyCRS\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edab8b84c33ca21478c0f8b356bdf9f94ac15862/68747470733a2f2f7472617669732d63692e6f72672f6b6172696d6261686761742f50794352532e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>PyCRS is a pure Python GIS package for reading, writing, and converting between various\ncommon coordinate reference system (CRS) string and data source formats.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a367e04d7522d2e1144806290450c96643b8d386/68747470733a2f2f6769746875622e636f6d2f6b6172696d6261686761742f70796372732f7261772f6d61737465722f7465737472656e646572732f6c6f676f2e706e67\"></p>\n<ul>\n<li><a href=\"http://github.com/karimbahgat/PyCRS\" rel=\"nofollow\">GitHub Repository</a></li>\n<li><a href=\"https://karimbahgat.github.io/PyCRS/\" rel=\"nofollow\">API Documentation</a></li>\n</ul>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#status\" rel=\"nofollow\">Status</a></li>\n<li><a href=\"#changes\" rel=\"nofollow\">Changes</a></li>\n<li><a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a>\n<ul>\n<li><a href=\"#creating-a-cs-instance\" rel=\"nofollow\">Creating a CS Instance</a>\n<ul>\n<li><a href=\"#loading-from-an-external-source\" rel=\"nofollow\">Loading from an external source</a>\n<ul>\n<li><a href=\"#loading-from-a-shapefile\" rel=\"nofollow\">Loading from a Shapefile</a></li>\n<li><a href=\"#loading-from-a-geojson\" rel=\"nofollow\">Loading from a GeoJSON</a></li>\n<li><a href=\"#loading-from-a-url\" rel=\"nofollow\">Loading from a URL</a></li>\n</ul>\n</li>\n<li><a href=\"#parsing-from-a-text-string\" rel=\"nofollow\">Parsing from a text string</a>\n<ul>\n<li><a href=\"#parsing-from-proj4-string\" rel=\"nofollow\">Parsing from proj4 string</a></li>\n<li><a href=\"#parsing-from-esri-wkt-string\" rel=\"nofollow\">Parsing from ESRI WKT string</a></li>\n<li><a href=\"#parsing-from-ogc-wkt-string\" rel=\"nofollow\">Parsing from OGC WKT string</a></li>\n<li><a href=\"#parsing-from-unknown-string\" rel=\"nofollow\">Parsing from unknown string</a></li>\n</ul>\n</li>\n<li><a href=\"#looking-up-a-coordinate-system-code\" rel=\"nofollow\">Looking up a coordinate system code</a>\n<ul>\n<li><a href=\"#looking-up-epsg-codes\" rel=\"nofollow\">Looking up EPSG codes</a></li>\n<li><a href=\"#looking-up-esri-codes\" rel=\"nofollow\">Looking up ESRI codes</a></li>\n<li><a href=\"#looking-up-sr-codes\" rel=\"nofollow\">Looking up SR codes</a></li>\n</ul>\n</li>\n<li><a href=\"#searching-for-coordinate-systems-by-name-or-area\" rel=\"nofollow\">Searching for coordinate systems by name or area</a>\n<ul>\n<li><a href=\"#loading-from-search-results\" rel=\"nofollow\">Loading from search results</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#inspecting-the-cs-instance\" rel=\"nofollow\">Inspecting the CS Instance</a>\n<ul>\n<li><a href=\"#geographic-crs\" rel=\"nofollow\">Geographic CS</a></li>\n<li><a href=\"#projected-crs\" rel=\"nofollow\">Projected CS</a></li>\n</ul>\n</li>\n<li><a href=\"#converting-to-other-crs-formats\" rel=\"nofollow\">Converting to other CRS formats</a>\n<ul>\n<li><a href=\"#converting-to-proj4\" rel=\"nofollow\">Converting to Proj4</a></li>\n<li><a href=\"#converting-to-esri-wkt\" rel=\"nofollow\">Converting to ESRI WKT</a></li>\n<li><a href=\"#converting-to-ogc-wkt\" rel=\"nofollow\">Converting to OGC WKT</a></li>\n</ul>\n</li>\n<li><a href=\"#representing-as-a-coordinate-system-code\" rel=\"nofollow\">Representing as a coordinate system code</a>\n<ul>\n<li><a href=\"#representing-as-an-epsg-code\" rel=\"nofollow\">Representing as an EPSG code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#recipes\" rel=\"nofollow\">Recipes</a>\n<ul>\n<li><a href=\"#modifying-the-cs-instance\" rel=\"nofollow\">Modifying the CS Instance</a></li>\n<li><a href=\"#coordinate-transformations\" rel=\"nofollow\">Coordinate Transformations</a></li>\n<li><a href=\"#writing-a-shapefile-.prj-file\" rel=\"nofollow\">Writing a Shapefile .prj file</a></li>\n</ul>\n</li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#credits\" rel=\"nofollow\">Credits</a></li>\n</ul>\n<h2>Introduction</h2>\n<p>Python should have a standalone GIS library focused solely on coordinate reference system metadata.\nThat is, a library focused on the various formats used to store and represent crs definitions, including\nOGC WKT, ESRI WKT, Proj4, and various short-codes defined by organizations like EPSG, ESRI, and SR-ORG.\nCorrectly parsing and converting between these formats is essential in many types of GIS work.\nFor instance when trying to use PyProj to transform coordinates from a non-proj4 crs format. Or\nwhen wanting to convert the crs from a GeoJSON file to a .prj file. Or when simply adding a crs definition\nto a file that was previously missing one.</p>\n<p>When I created PyCRS, the only way to read and convert between crs formats was to use the extensive Python\nGDAL suite and its srs submodule, but the requirements of some applications might exclude the use of\nGDAL. There have also been some online websites/services, but these only allow partial lookups or\none-way conversion from one format to another. I therefore hope that PyCRS will make it easier for\nlightweight applications to read a broader range of data files and correctly interpret and possibly transform\ntheir crs definitions. Written entirely in Python I also hope it will help clarify the differences\nbetween the various formats, and make it easier for more people to help keep it up-to-date and bug-free.</p>\n<h2>Status</h2>\n<p>Currently, the supported formats are OGC WKT (v1), ESRI WKT, Proj4, and any EPSG, ESRI, or SR-ORG code\navailable from spatialreference.org. In the future I hope to add support for OGC URN identifier strings,\nand GeoTIFF file tags.</p>\n<p>There are still some cases where PyCRS does not perfectly parse or convert between all crs formats,\nbased on (hopefully mostly cosmetic) differences from the results of other parsers like GDAL.\nIn the source repository there is a tester.py script, which uses a barrage of commonly\nused crs as listed on <a href=\"http://www.remotesensing.org/geotiff/proj_list/\" rel=\"nofollow\">http://www.remotesensing.org/geotiff/proj_list/</a>. Currently, the overall success rate\nfor loading as well as converting between the three main formats is 80-90%, and visual inspections of\nrendering the world with each crs generally look correct. However, whether the converted crs strings\nare logically equivalent to each other from a mathematical standpoint is something that needs a more detailed\nquality check.</p>\n<h2>Changes</h2>\n<h3>1.0.2 (2020-03-09)</h3>\n<ul>\n<li>Add search functions to lookup epsg.io</li>\n<li>Add to_epsg_code() method from, based on prj2epsg.org (#47, @fitoprincipe)</li>\n<li>Switch to using epsg.io when looking up epsg codes</li>\n<li>Fix broken spatialreference link by switching to SSL</li>\n<li>Added Clarke 1880 ellipsoid</li>\n<li>Use default datum ellipsoid when ellipsoid not specified</li>\n<li>Better warning and error when proj4 ellipsoid cannot be found</li>\n<li>Misc bug fixes</li>\n</ul>\n<h3>1.0.1 (2019-03-07)</h3>\n<ul>\n<li>Misc docstring changes</li>\n<li>More flexible parsing, in case projection is not the second element</li>\n<li>More informative exceptions</li>\n</ul>\n<h3>1.0.0 (2019-02-04)</h3>\n<ul>\n<li>API Changes:</li>\n<li>Dropping CRS wrapper class, instead handling GeogCS or ProjCS directly</li>\n<li>Change module names to load.py, and parse.py</li>\n<li>Move Ellipsoid, Datum, and Projection to their respective modules</li>\n<li>Allow proj4 input and output as dict</li>\n<li>Fixes:</li>\n<li>Added more documentation</li>\n<li>Fix +f interpretation</li>\n<li>Include reading +rf parameter</li>\n<li>Better ellipsoid support for +a and +b</li>\n<li>Fix Python 3 bugs</li>\n<li>Fix proj4 standard parallels being ignored</li>\n<li>Parse WKT CS names which were ignored before</li>\n<li>Support for prime meridian city names</li>\n</ul>\n<h3>0.1.3 (2016-06-25)</h3>\n<ul>\n<li>Fixed various bugs</li>\n<li>Pip install fix for Mac and Linux</li>\n<li>Python 3 compatability</li>\n</ul>\n<h3>0.1.2 (2015-08-05)</h3>\n<ul>\n<li>First official release</li>\n</ul>\n<h2>Dependencies</h2>\n<p>Pure Python, no dependencies. Python 2 and 3 compatible.</p>\n<h2>Installation</h2>\n<p>PyCRS is installed with pip from the commandline:</p>\n<pre><code>pip install pycrs\n</code></pre>\n<p>It also works to just place the \"pycrs\" package folder in an importable location like\n\"PythonXX/Lib/site-packages\".</p>\n<h2>Examples</h2>\n<p>Begin by importing the pycrs module:</p>\n<pre><code>&gt;&gt;&gt; import pycrs\n</code></pre>\n<h3>Creating a CS Instance</h3>\n<p>PyCRS uses different types of CS classes to represent and handle all coordinate reference systems.\nTo create one you can either load it from a source, parse it from a string,\nlook up from a CRS code, or build it from scratch. Let's review these different ways of creating\na CS type instance.</p>\n<h4>Loading from an external source</h4>\n<p>If you know the crs information is located in some external source, PyCRS provides some convenient\nfunctions for loading these, all located in the \"pycrs.load\" module.</p>\n<h5>Loading from a Shapefile</h5>\n<p>In most situations this will mean reading the ESRI .prj file that accomponies\na shapefile. PyCRS has a convenience function for doing that:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.load.from_file(\"testfiles/natearth.prj\")\n</code></pre>\n<h5>Loading from a GeoJSON</h5>\n<p>The same function also supports reading the crs from GeoJSON files:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.load.from_file(\"testfiles/cshapes.geo.json\")\n</code></pre>\n<h5>Loading from a URL</h5>\n<p>If your crs is not defined in a file, but rather as plain text on a webpage, there is also a function for that:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.load.from_url(\"http://spatialreference.org/ref/esri/54030/ogcwkt/\")\n</code></pre>\n<h4>Parsing from a text string</h4>\n<p>In many cases however, you may already have the string representation in your code. This could be if you\nare interoperating with other libraries, or you have already read it from some external source.\nIn these cases, you can create the CS type instance by using the functions available in the \"pycrs.parse\"\nmodule.</p>\n<h5>Parsing from proj4 string or dict</h5>\n<p>To create the CS type instance from a proj4 string, you can do like this:</p>\n<pre><code>&gt;&gt;&gt; proj4 = \"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"\n&gt;&gt;&gt; crs = pycrs.parse.from_proj4(proj4)\n</code></pre>\n<p>Or if your proj4 string is represented as a dict:</p>\n<pre><code>&gt;&gt;&gt; proj4_as_dict = dict(proj='robin', lon_0=0, x_0=0, y_0=0, ellps='WGS84', datum='WGS84', units='m')\n&gt;&gt;&gt; crs = pycrs.parse.from_proj4(proj4_as_dict)\n</code></pre>\n<h5>Parsing from ESRI WKT string</h5>\n<p>The ESRI WKT format is the format typically found in a shapefile's .prj file.\nIf you have already loaded it from a file, you can parse it like this:</p>\n<pre><code>&gt;&gt;&gt; esri_wkt = 'PROJCS[\"World_Robinson\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Robinson\"],PARAMETER[\"False_Easting\",0],PARAMETER[\"False_Northing\",0],PARAMETER[\"Central_Meridian\",0],UNIT[\"Meter\",1]]'\n&gt;&gt;&gt; crs = pycrs.parse.from_esri_wkt(esri_wkt)\n</code></pre>\n<h5>Parsing from OGC WKT string</h5>\n<p>The Open Geospatial Consortium (OGC) WKT format is a newer variant of the ESRI WKT.\nThere are only minor differences, but will likely be more supported in the future.\nIf you already have it as a string, you can parse it like this:</p>\n<pre><code>&gt;&gt;&gt; ogc_wkt = 'PROJCS[\"World_Robinson\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Robinson\"],PARAMETER[\"False_Easting\",0],PARAMETER[\"False_Northing\",0],PARAMETER[\"Central_Meridian\",0],UNIT[\"Meter\",1],AUTHORITY[\"EPSG\",\"54030\"]]'\n&gt;&gt;&gt; crs = pycrs.parse.from_ogc_wkt(ogc_wkt)\n</code></pre>\n<h5>Parsing from unknown string</h5>\n<p>Finally, if you do not know the format of the crs string, you can also let PyCRS autodetect\nand parse the crs type for you:</p>\n<pre><code>&gt;&gt;&gt; for unknown in [proj4, esri_wkt, ogc_wkt]:\n...     crs = pycrs.parse.from_unknown_text(unknown)\n</code></pre>\n<h4>Looking up a coordinate system code</h4>\n<p>Another common way to store a coordinate system is through a lookup code that is available for\nmany of the more commonly used ones. Multiple different agencies have defined their own sets of\ncodes.</p>\n<h5>Looking up EPSG codes</h5>\n<p>To look up codes defined by EPSG:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.parse.from_epsg_code(4326)\n</code></pre>\n<h5>Looking up ESRI codes</h5>\n<p>To look up codes defined by ESRI:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.parse.from_esri_code(54030)\n</code></pre>\n<h5>Looking up SR codes</h5>\n<p>To look up codes defined by spatialreference.org:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.parse.from_sr_code(42)\n</code></pre>\n<h4>Searching for coordinate systems by name or area</h4>\n<p>Finally, if you don't know the specific code or definition of a particular crs there's also search functions to look it up on the epsg.io website. For instance, if you want to use the Robinson projection but not sure how to load it, you could interactively search and inspect the potential matches:</p>\n<pre><code>&gt;&gt;&gt; for match in pycrs.utils.search_name('robinson'): \n...     # do something\n... \tpass\n</code></pre>\n<p>Similarly, if you need to know which projection would be suitable for a particular country, you could search for that as well:</p>\n<pre><code>&gt;&gt;&gt; for match in pycrs.utils.search_area('brazil'): \n...     # do something\n... \tpass\n</code></pre>\n<p>You could also do a custom search using various specifiers, such as a projection in a particular area (the full list of specifiers is available at <a href=\"https://github.com/maptiler/epsg.io\" rel=\"nofollow\">https://github.com/maptiler/epsg.io</a>):</p>\n<pre><code>&gt;&gt;&gt; for match in pycrs.utils.search('name:utm area:belgium'): \n... \t# do something\n... \tpass\n</code></pre>\n<h5>Loading from search results</h5>\n<p>The search match results include the epsg code, proj4, and wkt representations, any of which could be used to load a CS instance:</p>\n<pre><code>&gt;&gt;&gt; topmatch = next(pycrs.utils.search_name('wgs 84'))\n&gt;&gt;&gt; crs = pycrs.parse.from_proj4(topmatch['proj4'])\n</code></pre>\n<h3>Inspecting the CS Instance</h3>\n<p>Once you have loaded, parsed, looked up, or created a coordinate reference system, you end up with one of the\nCS type instances in the pycrs.cs module. All CS types are subclasses of pycrs.CS:</p>\n<pre><code>&gt;&gt;&gt; isinstance(crs, pycrs.CS)\nTrue\n</code></pre>\n<p>PyCRS currently only supports the two most common types of CS, geographic or projected.</p>\n<h4>Geographic CS</h4>\n<p>A geographic reference system keeps coordinates in the latitude-longitude space, and the reason we specify\nit is because there are different ways of defining the shape of the earth. As an example, let's load the commonly\nused WGS84 geographic coordinate system:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.parse.from_epsg_code(4326)\n</code></pre>\n<p>If it loaded correctly you should now have a pycrs.GeogCS instance, which you can also check through the <code>cs_type</code> attribute:</p>\n<pre><code>&gt;&gt;&gt; isinstance(crs, pycrs.GeogCS)\nTrue\n&gt;&gt;&gt; crs.cs_type\n'Geographic'\n</code></pre>\n<p>Through the GeogCS instance, we can further access its subcomponents and parameters.\nFor instance, if we wanted to check the datum we could do:</p>\n<pre><code>&gt;&gt;&gt; datum = crs.datum\n&gt;&gt;&gt; isinstance(datum, pycrs.elements.datums.WGS84)\nTrue\n</code></pre>\n<p>Or the inverse flattening factor of the ellipsoid:</p>\n<pre><code>&gt;&gt;&gt; ellips = crs.datum.ellips\n&gt;&gt;&gt; ellips.inv_flat.value\n298.257223563\n</code></pre>\n<p>For more ideas on how to inspect the GeogCS instance, the following overview gives an idea of the\ncomposition and attributes of a geographic CS:</p>\n<ul>\n<li>pycrs.GeogCS\n<ul>\n<li><code>name</code> -&gt; string</li>\n<li><code>datum</code> -&gt; a datum from pycrs.elements.datums\n<ul>\n<li><code>name</code> -&gt; pycrs.elements.datums.DatumName\n<ul>\n<li><code>proj4</code> -&gt; string</li>\n<li><code>esri_wkt</code> -&gt; string</li>\n<li><code>ogc_wkt</code> -&gt; string</li>\n</ul>\n</li>\n<li><code>ellips</code> -&gt; an ellipsoid from pycrs.elements.ellipsoids\n<ul>\n<li><code>name</code> -&gt; pycrs.elements.ellipsoids.EllipsoidName\n<ul>\n<li><code>proj4</code> -&gt; string</li>\n<li><code>esri_wkt</code> -&gt; string</li>\n<li><code>ogc_wkt</code> -&gt; string</li>\n</ul>\n</li>\n<li><code>semimaj_ax</code> -&gt; pycrs.elements.parameters.SemiMajorRadius\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n<li><code>semimin_ax</code> -&gt; (optional) pycrs.elements.parameters.SemiMinorRadius\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n<li><code>flat</code> -&gt; (optional) pycrs.elements.parameters.Flattening\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n<li><code>inv_flat</code> -&gt; (optional) pycrs.elements.parameters.InverseFlattening\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>datumshift</code> -&gt; (optional) pycrs.elements.parameters.DatumShift or None</li>\n</ul>\n</li>\n<li><code>prime_mer</code> -&gt; pycrs.elements.parameters.PrimeMeridian\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n<li><code>angunit</code> -&gt; an angular unit from pycrs.elements.units, eg Degree\n<ul>\n<li><code>unitname</code> -&gt; pycrs.elements.units.UnitName\n<ul>\n<li><code>proj4</code> -&gt; string</li>\n<li><code>esri_wkt</code> -&gt; string</li>\n<li><code>ogc_wkt</code> -&gt; string</li>\n</ul>\n</li>\n<li><code>unitmultiplier</code> -&gt; pycrs.elements.units.UnitMultiplier\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>twin_ax</code> -&gt; tuple\n<ul>\n<li>1: a named compass direction (east-west) from pycrs.elements.directions</li>\n<li>2: a named compass direction (north-south) from pycrs.elements.directions</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Projected CS</h4>\n<p>A projected reference system keeps coordinates in projected x-y space. In addition to\ndefining the shape of the earth through a child GeogCS, the projected reference system\ndefines some additional parameters in order to transform the coordinates to a wide\nvariety of map types. Let's take the commonly used World Robinson projected coordinate\nsystem as our example:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.parse.from_esri_code(54030)\n</code></pre>\n<p>If it loaded correctly you should now have a pycrs.ProjCS instance, which you can also check through the <code>cs_type</code> attribute:</p>\n<pre><code>&gt;&gt;&gt; isinstance(crs, pycrs.ProjCS)\nTrue\n&gt;&gt;&gt; crs.cs_type\n'Projected'\n</code></pre>\n<p>Through the ProjCS instance, we can further access its subcomponents and parameters.\nFor instance, if we wanted to check the named projection we could do:</p>\n<pre><code>&gt;&gt;&gt; proj = crs.proj\n&gt;&gt;&gt; isinstance(proj, pycrs.elements.projections.Robinson)\nTrue\n</code></pre>\n<p>Or check the type of coordinate unit:</p>\n<pre><code>&gt;&gt;&gt; unit = crs.unit\n&gt;&gt;&gt; isinstance(unit, pycrs.elements.units.Meter)\nTrue\n</code></pre>\n<p>For more ideas on how to inspect the ProjCS instance, the following overview gives an idea of the\ncomposition and attributes of a projected CS:</p>\n<ul>\n<li>pycrs.ProjCS\n<ul>\n<li><code>name</code> -&gt; string</li>\n<li><code>geogcs</code> -&gt; pycrs.GeogCS (See the section on geographic CS...)</li>\n<li><code>proj</code> -&gt; a projection from pycrs.elements.projections\n<ul>\n<li><code>name</code> -&gt; pycrs.elements.projections.ProjName\n<ul>\n<li><code>proj4</code> -&gt; string</li>\n<li><code>esri_wkt</code> -&gt; string</li>\n<li><code>ogc_wkt</code> -&gt; string</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>params</code> -&gt; list\n<ul>\n<li>1: named parameters from pycrs.elements.parameters</li>\n<li>2: named parameters from pycrs.elements.parameters</li>\n<li>3: ...</li>\n<li>n: named parameters from pycrs.elements.parameters</li>\n</ul>\n</li>\n<li><code>unit</code> -&gt; a unit from pycrs.elements.units\n<ul>\n<li><code>unitname</code> -&gt; pycrs.elements.units.UnitName\n<ul>\n<li><code>proj4</code> -&gt; string</li>\n<li><code>esri_wkt</code> -&gt; string</li>\n<li><code>ogc_wkt</code> -&gt; string</li>\n</ul>\n</li>\n<li><code>unitmultiplier</code> -&gt; pycrs.elements.units.UnitMultiplier\n<ul>\n<li><code>value</code> -&gt; float</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>twin_ax</code> -&gt; tuple\n<ul>\n<li>1: a named compass direction (east-west) from pycrs.elements.directions</li>\n<li>2: a named compass direction (north-south) from pycrs.elements.directions</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Converting to other CRS formats</h3>\n<p>Once you have read the crs of the original data source, you may want to convert it to some other crs format.\nPyCRS allows converting to the following CRS formats:</p>\n<h4>Converting to Proj4</h4>\n<pre><code># as a string\n&gt;&gt;&gt; crs.to_proj4()\n'+proj=robin +datum=WGS84 +ellps=WGS84 +a=6378137.0 +rf=298.257223563 +pm=0 +lon_0=0 +x_0=0 +y_0=0 +units=m +axis=enu +no_defs'\n\n# or as a dict\n&gt;&gt;&gt; isinstance(crs.to_proj4(as_dict=True), dict)\nTrue\n</code></pre>\n<h4>Converting to ESRI WKT</h4>\n<pre><code>&gt;&gt;&gt; crs.to_esri_wkt()\n'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"D_WGS_1984\", SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"False_Easting\", 0], PARAMETER[\"False_Northing\", 0], UNIT[\"Meter\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n</code></pre>\n<h4>Converting to OGC WKT</h4>\n<pre><code>&gt;&gt;&gt; crs.to_ogc_wkt()\n'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"WGS_1984\", SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n</code></pre>\n<h3>Representing as a coordinate system code</h3>\n<p>Just as it's possible to load the crs from predefined coordinate system codes defined by various authorities, it's also sometimes needed to lookup and represent the crs as a coordinate system code, if it exists.</p>\n<h4>Representing as an EPSG code</h4>\n<p>Currently, this is only implemented for looking up the EPSG code. This searches the crs wkt representation on prj2epsg.org and returns the EPSG code of the first result, or None if the wkt does not have an associated EPSG code.</p>\n<pre><code># to epsg code\n&gt;&gt;&gt; crs = pycrs.parse.from_epsg_code(4326)\n&gt;&gt;&gt; crs.to_epsg_code()\n4326\n</code></pre>\n<p>Because a crs definition can have many variations, looking up its coordinate system code might yield multiple possible matches, in which case a warning is raised. For more control to choose the right match, a wkt search utility is also available that returns all possible matches with metadata:</p>\n<pre><code># more flexible utility search for epsg code\n&gt;&gt;&gt; crs = pycrs.parse.from_sr_code(42)\n&gt;&gt;&gt; results = pycrs.utils.wkt_to_epsg(crs.to_esri_wkt())\n\n# display the top match info\n&gt;&gt;&gt; topmatch = results['codes'][0]\n&gt;&gt;&gt; topmatch['code']\n'3857'\n&gt;&gt;&gt; topmatch['name']\n'WGS 84 / Pseudo-Mercator'\n</code></pre>\n<hr>\n<h2>Recipes</h2>\n<h3>Modifying the CS Instance</h3>\n<p>In most case you will only ever need to load a CRS and convert it to some format.\nSometimes, however, you may want to tweak the parameters of your CS type instance.\nKnowing the composition of your CS type instance, this is as easy as setting/replacing the\ndesired attributes.</p>\n<p>Let's demonstrate some examples using the World Robinson projection:</p>\n<pre><code>&gt;&gt;&gt; crs = pycrs.parse.from_esri_code(54030) # Robinson projection from esri code\n&gt;&gt;&gt; crs.to_ogc_wkt()\n'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"WGS_1984\", SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n</code></pre>\n<p>Here is a map of the default Robinson projection:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7bd412a39f2b58743cf312e6f72bd87fe2b2a04/68747470733a2f2f6769746875622e636f6d2f6b6172696d6261686761742f70796372732f7261772f6d61737465722f7465737472656e646572732f646f63735f6f7269672e706e67\"></p>\n<p>Let's say we wanted to switch its datum from WGS84 to NAD83, we could do it\nlike so:</p>\n<pre><code>&gt;&gt;&gt; crs.geogcs.datum = pycrs.elements.datums.NAD83()\n&gt;&gt;&gt; crs.to_ogc_wkt()\n'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"North_American_Datum_1983\", SPHEROID[\"GRS_1980\", 6378137.0, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n</code></pre>\n<p>Or let's say we wanted to switch its prime meridian, so that the longitude axis is centered\ncloser to the Pacific instead of over Greenwhich:</p>\n<pre><code>&gt;&gt;&gt; crs.geogcs.prime_mer.value = 160.0\n&gt;&gt;&gt; crs.to_ogc_wkt()\n'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"North_American_Datum_1983\", SPHEROID[\"GRS_1980\", 6378137.0, 298.257222101]], PRIMEM[\"Greenwich\", 160], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Robinson\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n</code></pre>\n<p>And here is what that map would look like (the odd-looking lines is just a rendering issue due to\npolygons that cross the meridian):</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/925417cbe8632989a06c25fee8c7fa9b7990afa5/68747470733a2f2f6769746875622e636f6d2f6b6172696d6261686761742f70796372732f7261772f6d61737465722f7465737472656e646572732f646f63735f747765616b322e706e67\"></p>\n<p>Or if we just switch the projection type alltogether:</p>\n<pre><code>&gt;&gt;&gt; crs.proj = pycrs.elements.projections.Sinusoidal()\n&gt;&gt;&gt; crs.to_ogc_wkt()\n'PROJCS[\"Unknown\", GEOGCS[\"Unknown\", DATUM[\"North_American_Datum_1983\", SPHEROID[\"GRS_1980\", 6378137.0, 298.257222101]], PRIMEM[\"Greenwich\", 160], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Lon\", EAST], AXIS[\"Lat\", NORTH]], PROJECTION[\"Sinusoidal\"], PARAMETER[\"Central_Meridian\", 0], PARAMETER[\"false_easting\", 0], PARAMETER[\"false_northing\", 0], UNIT[\"Meters\", 1.0], AXIS[\"X\", EAST], AXIS[\"Y\", NORTH]]'\n</code></pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c66a7814c7a372c511261e90e5a21f5a2350a86/68747470733a2f2f6769746875622e636f6d2f6b6172696d6261686761742f70796372732f7261772f6d61737465722f7465737472656e646572732f646f63735f747765616b332e706e67\"></p>\n<h3>Coordinate Transformations</h3>\n<p>A common reason for wanting to convert between CRS formats, is if you want to transform coordinates\nfrom one coordinate system to another. In Python this is typically done with the PyProj module,\nwhich only takes proj4 format. Using PyCRS we can easily define the original coordinate system that\nwe want to convert and get its proj4 representation:</p>\n<pre><code>&gt;&gt;&gt; fromcrs = pycrs.parse.from_epsg_code(4326) # WGS84 projection from epsg code\n&gt;&gt;&gt; fromcrs_proj4 = fromcrs.to_proj4()\n</code></pre>\n<p>We can then use PyCRS to define our target projection from the format of your choice, before converting\nit to the proj4 format that PyProj expects:</p>\n<pre><code>&gt;&gt;&gt; tocrs = pycrs.parse.from_esri_code(54030) # Robinson projection from esri code\n&gt;&gt;&gt; tocrs_proj4 = tocrs.to_proj4()\n</code></pre>\n<p>With the source and target projections defined in the proj4 crs format, we are ready to transform our\ndata coordinates with PyProj:</p>\n<pre><code>&gt;&gt;&gt; import pyproj\n&gt;&gt;&gt; fromproj = pyproj.Proj(fromcrs_proj4)\n&gt;&gt;&gt; toproj = pyproj.Proj(tocrs_proj4)\n&gt;&gt;&gt; lng,lat = -76.7075, 37.2707  # Williamsburg, Virginia :)\n&gt;&gt;&gt; pyproj.transform(fromproj, toproj, lng, lat)\n(-6766170.001635834, 3985755.032695593)\n</code></pre>\n<h3>Writing a Shapefile .prj file</h3>\n<p>After you transform your data coordinates you may also wish to save the data back to file along with the new\ncrs. With PyCRS you can do this in a variety of crs format. For instance, to write a shapefile .prj file:</p>\n<pre><code>&gt;&gt;&gt; with open(\"testfiles/shapefile.prj\", \"w\") as writer:\n...     _ = writer.write(tocrs.to_esri_wkt())\n</code></pre>\n<hr>\n<h2>Testing</h2>\n<p>The testing suite is still a work in progress and is spread across multiple files.\nThe files testdocs.py (the official doctests) and testbatch.py (tests and renders a batch of projections)\ncan be run from the prompt:</p>\n<pre><code>python testdocs.py\npython testbatch.py\n</code></pre>\n<p>The test files have a few dependent python packages that will need to be installed to fully work:</p>\n<ul>\n<li><a href=\"https://github.com/jswhit/pyproj\" rel=\"nofollow\">pyproj</a> - cartographic projection and coordinate system transformation, python wrapper PROJ.4 C library</li>\n<li><a href=\"https://github.com/karimbahgat/PyAgg\" rel=\"nofollow\">PyAgg</a> - Aggdraw wrapper for lightweight drawing</li>\n<li><a href=\"https://github.com/karimbahgat/PyGeoj\" rel=\"nofollow\">PyGeoj</a> - geojson reader/writer</li>\n</ul>\n<h2>License</h2>\n<p>This code is free to share, use, reuse,\nand modify according to the MIT license, see license.txt</p>\n<h2>Credits</h2>\n<ul>\n<li>Karim Bahgat</li>\n<li>Micah Cochrain</li>\n<li>Mike Kittridge</li>\n<li>Roger Lew</li>\n<li>Gregory Halvorsen</li>\n<li>M Clark</li>\n<li>David Hoese</li>\n<li>Rodrigo E. Principe</li>\n</ul>\n\n          </div>"}, "last_serial": 6776669, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b58437745101f26bd234e5fa237cdf50", "sha256": "938eb09f03f560cf1653a9fb271fa8b19deff10f3829909ea4d8dd814d4e39d2"}, "downloads": -1, "filename": "PyCRS-0.1.0.zip", "has_sig": false, "md5_digest": "b58437745101f26bd234e5fa237cdf50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29351, "upload_time": "2020-03-09T12:25:39", "upload_time_iso_8601": "2020-03-09T12:25:39.423738Z", "url": "https://files.pythonhosted.org/packages/4c/dd/cdfdc7135d340db856c08737678ae21d89cb83d1026a71746ed2a0af106f/PyCRS-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "163716be6b5864b1b7c5b43a6c49259a", "sha256": "2ba7beb1216b9278a947326945f0f2154e3e4c1355b35e9606b60945fdef60fd"}, "downloads": -1, "filename": "PyCRS-0.1.1.zip", "has_sig": false, "md5_digest": "163716be6b5864b1b7c5b43a6c49259a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30743, "upload_time": "2020-03-09T12:25:40", "upload_time_iso_8601": "2020-03-09T12:25:40.464554Z", "url": "https://files.pythonhosted.org/packages/5a/aa/37e1c4129c8ca21f0482b96e9945f1df15d7e9b0d26c173f354e512fe28e/PyCRS-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "118fddbc876ea98ad2dd11fc452d03b0", "sha256": "7b09269848568112cd3316d8e807ad3eb2242470f43671f2ef3c046116eabf5c"}, "downloads": -1, "filename": "PyCRS-0.1.2.zip", "has_sig": false, "md5_digest": "118fddbc876ea98ad2dd11fc452d03b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30734, "upload_time": "2015-08-05T13:39:12", "upload_time_iso_8601": "2015-08-05T13:39:12.191853Z", "url": "https://files.pythonhosted.org/packages/2f/9b/45dea9087f31e28da2ad269d948f4b35b41ab773c181e95af6af5fbd87e8/PyCRS-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "22260778c9fbe6964498db1abf4af05f", "sha256": "5daecb2254c19aa05ad4097f06b93d37a0a0f7eba996a182c02999cf1dc28caf"}, "downloads": -1, "filename": "PyCRS-0.1.3.zip", "has_sig": false, "md5_digest": "22260778c9fbe6964498db1abf4af05f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31345, "upload_time": "2016-06-25T11:53:06", "upload_time_iso_8601": "2016-06-25T11:53:06.650156Z", "url": "https://files.pythonhosted.org/packages/cb/95/c37771b79e53c44fe3d790212b6cf3c804ef6e36dafdeaf0424ed0d963e9/PyCRS-0.1.3.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "61a394d76337964ae14979f38f8d40c2", "sha256": "7ed77739979800318c8b06793ad18063b2a12001dd3e1335d5c668055f6c1e8f"}, "downloads": -1, "filename": "PyCRS-1.0.0.tar.gz", "has_sig": false, "md5_digest": "61a394d76337964ae14979f38f8d40c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31792, "upload_time": "2019-02-04T07:25:42", "upload_time_iso_8601": "2019-02-04T07:25:42.653829Z", "url": "https://files.pythonhosted.org/packages/01/55/190dfdb7318ffb1625167ee64e31e07d8397ae0517f2c9546809393bc7ea/PyCRS-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e2eede6b65afd2f235bc0988ed4ac63d", "sha256": "f6fd88d5b6b1bcd4615c0f9867eab8a8285537119a75d6ead19191b76a0e02c1"}, "downloads": -1, "filename": "PyCRS-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e2eede6b65afd2f235bc0988ed4ac63d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32147, "upload_time": "2019-03-07T13:21:38", "upload_time_iso_8601": "2019-03-07T13:21:38.850353Z", "url": "https://files.pythonhosted.org/packages/35/5a/a617774dc1d18bd02866f207ddd07ca4d6a8b9239c8b0e9dfba66260198b/PyCRS-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8ad01d22bf1b114e885b98567ea2e528", "sha256": "3a8cccd92024d813ab81811857f61cddb6ab2f4a1e784595c8dcd6a3a6fd7779"}, "downloads": -1, "filename": "PyCRS-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8ad01d22bf1b114e885b98567ea2e528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36514, "upload_time": "2020-03-09T12:25:41", "upload_time_iso_8601": "2020-03-09T12:25:41.918884Z", "url": "https://files.pythonhosted.org/packages/50/0b/33c6ab39701d982eabfdc732d920862d79d7598893c7291c5f6ec1e66d3c/PyCRS-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ad01d22bf1b114e885b98567ea2e528", "sha256": "3a8cccd92024d813ab81811857f61cddb6ab2f4a1e784595c8dcd6a3a6fd7779"}, "downloads": -1, "filename": "PyCRS-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8ad01d22bf1b114e885b98567ea2e528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36514, "upload_time": "2020-03-09T12:25:41", "upload_time_iso_8601": "2020-03-09T12:25:41.918884Z", "url": "https://files.pythonhosted.org/packages/50/0b/33c6ab39701d982eabfdc732d920862d79d7598893c7291c5f6ec1e66d3c/PyCRS-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:46 2020"}