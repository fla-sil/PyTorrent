{"info": {"author": "Andrew Keller", "author_email": "andrewmkeller@byu.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Education", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Welcome to SpyDrNet!\n====================\n\n.. image:: https://img.shields.io/pypi/v/spydrnet.svg\n   :target: https://pypi.org/project/spydrnet/\n\n.. image:: https://img.shields.io/pypi/pyversions/spydrnet.svg\n   :target: https://pypi.org/project/spydrnet/\n\n.. image:: https://travis-ci.com/byuccl/spydrnet.svg?branch=master\n   :target: https://travis-ci.com/byuccl/spydrnet\n\nA flexible framework for analyzing and transforming `netlists <https://en.wikipedia.org/wiki/Netlist>`_. Built to fill an important gap in FPGA research and reliability. Currently available as a pure Python package.\n\n- **Website and Documentation:** https://byuccl.github.io/spydrnet\n- **Mailing List:** https://groups.google.com/forum/#!forum/spydrnet-discuss\n- **Source:** https://github.com/byuccl/spydrnet\n- **Bug Reports:** https://github.com/byuccl/spydrnet/issues\n\nSimple Examples\n---------------\n\nSpyDrNet can be used to create netlists from scratch. Because it is a low-level framework, manual netlist creation can be tedious (much like writting a high level application in assembly). To assist in rapid productivity, parsers and composers are provided for common netlist formats. Currently only `EDIF <https://en.wikipedia.org/wiki/EDIF>`_ is supported, but the roadmap includes structural Verilog, structural VHDL, Verilog Quartus Mapping Files (`Intel's VQM <https://www.intel.com/content/www/us/en/programmable/quartushelp/17.0/mapIdTopics/mwh1465406414431.htm>`_), and JSON.\n\n**Loading Example Netlists**\n\nSeveral example netlists are included with the package to introduce the framework, its features, and functionality. To list and load these netlists, modify the following example: \n\n.. code:: python\n\n    >>> import spydrnet as sdn\n    >>> sdn.example_netlist_names\n    ['4bitadder', '8051', ... , 'zpu4']\n    >>> netlist = sdn.load_example_netlist_by_name('4bitadder')\n\n**Parsing a Netlist**\n\n.. code:: python\n\n    >>> netlist = sdn.parse('<netlist_filename>.edf')\n\n**View Data Associated with any Netlist Element**\n\n.. code:: python\n\n   >>> netlist.data\n   {'.NAME': 'adder', 'EDIF.identifier': 'Z4bitadder', ... }\n\n**List Libraries in a Netlist**\n\n.. code:: python\n\n    >>> list(library.name for library in netlist.libraries)\n    ['VIRTEX', 'UNILIB', 'work']\n\n**List Definitions in a Library**\n\n.. code:: python\n\n    >>> library = netlist.libraries[2]\n    >>> list(definition.name for definition in library.definitions)\n    ['adder']\n\n**List Ports, Cables, and Instances in a Definition**\n\n.. code:: python\n\n    >>> definition = library.definitions[0]\n    >>> list(port.name for port in definition.ports)\n    ['data1(3:0)', 'data2(3:0)', 'answer(3:0)', 'clk', 'reset', 'enable']\n    >>> list(cable.name for cable in definition.cables)\n    ['answer_1(0)', 'answer_1(1)', 'answer_1_(2)', 'answer_1(3)', ... ]\n    >>> list(instance.name for instance in definition.children)\n    ['un3_answer1_axbxc3', 'un2_answer2_axbxc3', 'reset_c_i', ... ]\n\n**Compose a Netlist**\n\nThis example exports a netlist into an EDIF formatted netlist file by the given name.\n\n.. code:: python\n\n    >>> sdn.compose(netlist, '<filename>.edf')\n\nThe following equivalent code may also be used.\n\n.. code:: python\n\n    >>> netlist.compose('<filename>.edf')\n\n**Additional Examples**\n\nAdditional examples are available in the documentation for netlist creation, analysis, and transformation.\n\nInstall\n-------\n\nThe stable release of SpyDrNet can be installed using ``pip``::\n\n    > pip install spydrnet\n\nTo install from PyPI with all optional dependicies use::\n\n    > pip install spydrnet[all]\n\nFor more installation instruction, see `INSTALL.rst`.\n\nBugs\n----\n\nBugs can be reported on the `issues page <https://github.com/byuccl/spydrnet/issues>`_ or they can be fixed through a fork / pull request. All changes are welcome. Discussion of ideas for new features is available on the `mailing list <https://groups.google.com/forum/#!forum/spydrnet-discuss>`_.\n\nA Brief History\n---------------\n\nThe `BYU Configurable Computing Lab <https://ccl.ee.byu.edu/>`_ actively maintains the `BYU EDIF Tools <http://reliability.ee.byu.edu/edif/>`_ - a Java API for creating, modifying, or analyzing EDIF netlists. These tools are tied to the EDIF netlist format and provide JEDIF tools capable of flattening a circuit (by removing hierarchical organization) and applying fault-tolerance techniques such as `triple modular redundancy (TMR) <https://en.wikipedia.org/wiki/Triple_modular_redundancy>`_. Development of SpyDrNet began back in 2016 with the idea of creating an accessible, format independent, tool for netlist analysis and transformation. The underlying intermediate data structure is designed preserve proper netlist relationship as a generic netlist while allowing for the preservation of format specific constructs. A language agnostic prototype was developed and this prototype soon became useful in the lab for netlist analysis and reliability transformation studies. A more mature (though still having room for growth) tool is presented here. \n\nDesign Notes\n------------\n\nWe have tried to build this tool around the principles of expandability and modularity. Care has been taken to separate different parts of the program in an organized fashion.\n\nHow to contribute\n-----------------\nIf this tool has been useful to you, or have new feature ideas that you would like to implement, feel free to make a pull request, or take a look at the issues to see how to contribute. New ideas, bug fixes and suggestions are also welcome (See `CONTRIBUTING.rst`).\n\nSpecial Thanks\n--------------\n\nSpecial thanks is given to `NetworkX <https://networkx.github.io/>`_ - \"a python package for the creation, manipulation, and study of the structure, dynamics and functions of complex networks.\"  This mature project has been used as a template for much of SpyDrNet's documentation and code structure. It also has saved enormous effort in heavy graph analysis as a robust and complete library used to analyze the relationships between circuit nodes.\n\nLicense\n-------\n\nReleased under the BSD 3-Clause License (see `LICENSE`)::\n\n   Copyright (C) 2019, Brigham Young University\n   All rights reserved.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://byuccl.github.io/spydrnet", "keywords": "Netlist,Analysis,Transformation,netlist,FPGA,primitives,module,port,EDIF,Digital,Hardware", "license": "BSD", "maintainer": "SpyDrNet Developers", "maintainer_email": "spydrnet-discuss@googlegroups.com", "name": "spydrnet", "package_url": "https://pypi.org/project/spydrnet/", "platform": "Linux", "project_url": "https://pypi.org/project/spydrnet/", "project_urls": {"Bug Tracker": "https://github.com/byuccl/spydrnet/issues", "Documentation": "https://byuccl.github.io/spydrnet/docs/stable", "Homepage": "https://byuccl.github.io/spydrnet", "Source Code": "https://github.com/byuccl/spydrnet"}, "release_url": "https://pypi.org/project/spydrnet/1.4.0/", "requires_dist": ["pytest ; extra == 'all'", "ply ; extra == 'all'", "ply ; extra == 'ply'", "pytest ; extra == 'pytest'"], "requires_python": ">=3.5", "summary": "Python package for analyzing and transforming netlists", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/spydrnet/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/spydrnet.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/122335310aa3b0a7e4ba8bfe792198b425c6eab4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73707964726e65742e737667\"></a>\n<a href=\"https://pypi.org/project/spydrnet/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/spydrnet.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36a5e81b6d332b3fd9c4b5b82cebc1419ce47c02/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73707964726e65742e737667\"></a>\n<a href=\"https://travis-ci.com/byuccl/spydrnet\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/byuccl/spydrnet.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a89f94e285449fbfacf9574fac51b4bb88de600b/68747470733a2f2f7472617669732d63692e636f6d2f62797563636c2f73707964726e65742e7376673f6272616e63683d6d6173746572\"></a>\n<p>A flexible framework for analyzing and transforming <a href=\"https://en.wikipedia.org/wiki/Netlist\" rel=\"nofollow\">netlists</a>. Built to fill an important gap in FPGA research and reliability. Currently available as a pure Python package.</p>\n<ul>\n<li><strong>Website and Documentation:</strong> <a href=\"https://byuccl.github.io/spydrnet\" rel=\"nofollow\">https://byuccl.github.io/spydrnet</a></li>\n<li><strong>Mailing List:</strong> <a href=\"https://groups.google.com/forum/#!forum/spydrnet-discuss\" rel=\"nofollow\">https://groups.google.com/forum/#!forum/spydrnet-discuss</a></li>\n<li><strong>Source:</strong> <a href=\"https://github.com/byuccl/spydrnet\" rel=\"nofollow\">https://github.com/byuccl/spydrnet</a></li>\n<li><strong>Bug Reports:</strong> <a href=\"https://github.com/byuccl/spydrnet/issues\" rel=\"nofollow\">https://github.com/byuccl/spydrnet/issues</a></li>\n</ul>\n<div id=\"simple-examples\">\n<h2>Simple Examples</h2>\n<p>SpyDrNet can be used to create netlists from scratch. Because it is a low-level framework, manual netlist creation can be tedious (much like writting a high level application in assembly). To assist in rapid productivity, parsers and composers are provided for common netlist formats. Currently only <a href=\"https://en.wikipedia.org/wiki/EDIF\" rel=\"nofollow\">EDIF</a> is supported, but the roadmap includes structural Verilog, structural VHDL, Verilog Quartus Mapping Files (<a href=\"https://www.intel.com/content/www/us/en/programmable/quartushelp/17.0/mapIdTopics/mwh1465406414431.htm\" rel=\"nofollow\">Intel\u2019s VQM</a>), and JSON.</p>\n<p><strong>Loading Example Netlists</strong></p>\n<p>Several example netlists are included with the package to introduce the framework, its features, and functionality. To list and load these netlists, modify the following example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">spydrnet</span> <span class=\"k\">as</span> <span class=\"nn\">sdn</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sdn</span><span class=\"o\">.</span><span class=\"n\">example_netlist_names</span>\n<span class=\"p\">[</span><span class=\"s1\">'4bitadder'</span><span class=\"p\">,</span> <span class=\"s1\">'8051'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">,</span> <span class=\"s1\">'zpu4'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">netlist</span> <span class=\"o\">=</span> <span class=\"n\">sdn</span><span class=\"o\">.</span><span class=\"n\">load_example_netlist_by_name</span><span class=\"p\">(</span><span class=\"s1\">'4bitadder'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Parsing a Netlist</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">netlist</span> <span class=\"o\">=</span> <span class=\"n\">sdn</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'&lt;netlist_filename&gt;.edf'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>View Data Associated with any Netlist Element</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">netlist</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">{</span><span class=\"s1\">'.NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'adder'</span><span class=\"p\">,</span> <span class=\"s1\">'EDIF.identifier'</span><span class=\"p\">:</span> <span class=\"s1\">'Z4bitadder'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n</pre>\n<p><strong>List Libraries in a Netlist</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">library</span> <span class=\"ow\">in</span> <span class=\"n\">netlist</span><span class=\"o\">.</span><span class=\"n\">libraries</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'VIRTEX'</span><span class=\"p\">,</span> <span class=\"s1\">'UNILIB'</span><span class=\"p\">,</span> <span class=\"s1\">'work'</span><span class=\"p\">]</span>\n</pre>\n<p><strong>List Definitions in a Library</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">netlist</span><span class=\"o\">.</span><span class=\"n\">libraries</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">definition</span> <span class=\"ow\">in</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">definitions</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'adder'</span><span class=\"p\">]</span>\n</pre>\n<p><strong>List Ports, Cables, and Instances in a Definition</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">definition</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">definitions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">ports</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'data1(3:0)'</span><span class=\"p\">,</span> <span class=\"s1\">'data2(3:0)'</span><span class=\"p\">,</span> <span class=\"s1\">'answer(3:0)'</span><span class=\"p\">,</span> <span class=\"s1\">'clk'</span><span class=\"p\">,</span> <span class=\"s1\">'reset'</span><span class=\"p\">,</span> <span class=\"s1\">'enable'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cable</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">cable</span> <span class=\"ow\">in</span> <span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">cables</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'answer_1(0)'</span><span class=\"p\">,</span> <span class=\"s1\">'answer_1(1)'</span><span class=\"p\">,</span> <span class=\"s1\">'answer_1_(2)'</span><span class=\"p\">,</span> <span class=\"s1\">'answer_1(3)'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">instance</span> <span class=\"ow\">in</span> <span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'un3_answer1_axbxc3'</span><span class=\"p\">,</span> <span class=\"s1\">'un2_answer2_axbxc3'</span><span class=\"p\">,</span> <span class=\"s1\">'reset_c_i'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n</pre>\n<p><strong>Compose a Netlist</strong></p>\n<p>This example exports a netlist into an EDIF formatted netlist file by the given name.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sdn</span><span class=\"o\">.</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"n\">netlist</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;filename&gt;.edf'</span><span class=\"p\">)</span>\n</pre>\n<p>The following equivalent code may also be used.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">netlist</span><span class=\"o\">.</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"s1\">'&lt;filename&gt;.edf'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Additional Examples</strong></p>\n<p>Additional examples are available in the documentation for netlist creation, analysis, and transformation.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>The stable release of SpyDrNet can be installed using <tt>pip</tt>:</p>\n<pre>&gt; pip install spydrnet\n</pre>\n<p>To install from PyPI with all optional dependicies use:</p>\n<pre>&gt; pip install spydrnet[all]\n</pre>\n<p>For more installation instruction, see <cite>INSTALL.rst</cite>.</p>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>Bugs can be reported on the <a href=\"https://github.com/byuccl/spydrnet/issues\" rel=\"nofollow\">issues page</a> or they can be fixed through a fork / pull request. All changes are welcome. Discussion of ideas for new features is available on the <a href=\"https://groups.google.com/forum/#!forum/spydrnet-discuss\" rel=\"nofollow\">mailing list</a>.</p>\n</div>\n<div id=\"a-brief-history\">\n<h2>A Brief History</h2>\n<p>The <a href=\"https://ccl.ee.byu.edu/\" rel=\"nofollow\">BYU Configurable Computing Lab</a> actively maintains the <a href=\"http://reliability.ee.byu.edu/edif/\" rel=\"nofollow\">BYU EDIF Tools</a> - a Java API for creating, modifying, or analyzing EDIF netlists. These tools are tied to the EDIF netlist format and provide JEDIF tools capable of flattening a circuit (by removing hierarchical organization) and applying fault-tolerance techniques such as <a href=\"https://en.wikipedia.org/wiki/Triple_modular_redundancy\" rel=\"nofollow\">triple modular redundancy (TMR)</a>. Development of SpyDrNet began back in 2016 with the idea of creating an accessible, format independent, tool for netlist analysis and transformation. The underlying intermediate data structure is designed preserve proper netlist relationship as a generic netlist while allowing for the preservation of format specific constructs. A language agnostic prototype was developed and this prototype soon became useful in the lab for netlist analysis and reliability transformation studies. A more mature (though still having room for growth) tool is presented here.</p>\n</div>\n<div id=\"design-notes\">\n<h2>Design Notes</h2>\n<p>We have tried to build this tool around the principles of expandability and modularity. Care has been taken to separate different parts of the program in an organized fashion.</p>\n</div>\n<div id=\"how-to-contribute\">\n<h2>How to contribute</h2>\n<p>If this tool has been useful to you, or have new feature ideas that you would like to implement, feel free to make a pull request, or take a look at the issues to see how to contribute. New ideas, bug fixes and suggestions are also welcome (See <cite>CONTRIBUTING.rst</cite>).</p>\n</div>\n<div id=\"special-thanks\">\n<h2>Special Thanks</h2>\n<p>Special thanks is given to <a href=\"https://networkx.github.io/\" rel=\"nofollow\">NetworkX</a> - \u201ca python package for the creation, manipulation, and study of the structure, dynamics and functions of complex networks.\u201d  This mature project has been used as a template for much of SpyDrNet\u2019s documentation and code structure. It also has saved enormous effort in heavy graph analysis as a robust and complete library used to analyze the relationships between circuit nodes.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Released under the BSD 3-Clause License (see <cite>LICENSE</cite>):</p>\n<pre>Copyright (C) 2019, Brigham Young University\nAll rights reserved.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7069515, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b66e6e9e58a6cfbd5d016fa9b828ab50", "sha256": "59ffd236eb0227742c180b87d7af47e5ed33573a7de82c17cd2fc0c0236e11ab"}, "downloads": -1, "filename": "spydrnet-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b66e6e9e58a6cfbd5d016fa9b828ab50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 150365, "upload_time": "2019-12-19T08:36:08", "upload_time_iso_8601": "2019-12-19T08:36:08.273374Z", "url": "https://files.pythonhosted.org/packages/30/7c/0c413b7853088ad101b37028f009650de5f5358f5d71e58b7f98827e65da/spydrnet-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae8f13331c1e800f8f6e134eb1d59c94", "sha256": "a4b4b33fd62e7adbd54de7d8c55bc96cf3fc0d9eaa693af8ae57b3e40d96e011"}, "downloads": -1, "filename": "spydrnet-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae8f13331c1e800f8f6e134eb1d59c94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 127890, "upload_time": "2019-12-19T08:36:10", "upload_time_iso_8601": "2019-12-19T08:36:10.710796Z", "url": "https://files.pythonhosted.org/packages/c4/15/6ec37827e1d234869426be7f675743afaeff17b72f9aec32933f6f7ec605/spydrnet-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "94d46dd4626a78991e43173866bf5a2a", "sha256": "ad961ddf8f43b3abebf2e737393545485cbefe8f6dac2f25ce4e1b09532ed1f2"}, "downloads": -1, "filename": "spydrnet-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "94d46dd4626a78991e43173866bf5a2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 161258, "upload_time": "2020-01-20T15:28:38", "upload_time_iso_8601": "2020-01-20T15:28:38.474374Z", "url": "https://files.pythonhosted.org/packages/b5/33/58d956a58430668555d8d46d17c48247ba0a81d425dd6ac0c09d8f59260a/spydrnet-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bc641de02b3a930b5eb4e0eef793d44", "sha256": "71f456f5b2ec6c2b4a8eb130b42d19fd7dc49e55c0a9e4ac0bc866d1c2cc156b"}, "downloads": -1, "filename": "spydrnet-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4bc641de02b3a930b5eb4e0eef793d44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 136586, "upload_time": "2020-01-20T15:28:40", "upload_time_iso_8601": "2020-01-20T15:28:40.173750Z", "url": "https://files.pythonhosted.org/packages/2c/79/bab6e3cdcb3d7e0819a763c362837109b9697ec8a30e7b446bd324787bbf/spydrnet-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "9a11b159ad595ba187d09b4b1e6a9ee9", "sha256": "ddda4681a71c0abf3e4d7f5ecfabff2cb535d9e17a19e4239389328aec9e07ca"}, "downloads": -1, "filename": "spydrnet-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9a11b159ad595ba187d09b4b1e6a9ee9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 294116, "upload_time": "2020-02-07T23:10:39", "upload_time_iso_8601": "2020-02-07T23:10:39.757166Z", "url": "https://files.pythonhosted.org/packages/79/ac/bfe7d302db44bcc234085976851c5fc9732d755cedfd341013d6098b3e41/spydrnet-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a9f5ac2a4ce77542120c6cd3fba12f5", "sha256": "7f16e570d29920b298f51e2e628aaf7e10aaae8a46866631dfc9c7ec7db7ba07"}, "downloads": -1, "filename": "spydrnet-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9a9f5ac2a4ce77542120c6cd3fba12f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 261529, "upload_time": "2020-02-07T23:10:41", "upload_time_iso_8601": "2020-02-07T23:10:41.677456Z", "url": "https://files.pythonhosted.org/packages/88/e0/811f8d7d781c1cf3beeb69bdb59147e1f4630ebdd40d8ba4c487109d92ab/spydrnet-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "623f1e1b7aa36f35cb46d4d3381059b6", "sha256": "b77a579a35c7cb95c2aff85eb1a5b51394f99b89970f803743fc0fdbd2bde408"}, "downloads": -1, "filename": "spydrnet-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "623f1e1b7aa36f35cb46d4d3381059b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 372160, "upload_time": "2020-03-21T01:01:58", "upload_time_iso_8601": "2020-03-21T01:01:58.628975Z", "url": "https://files.pythonhosted.org/packages/06/30/7058396f40efa7b97707b9e85c2d0fc959d581876061344979bfb710e25d/spydrnet-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cda3df495110bf115f7a9c86d23ac800", "sha256": "ccb66b6e8714b2efa7dcc19be43a32faeffc97c33eaad250a35142cc1a8ca8e8"}, "downloads": -1, "filename": "spydrnet-1.3.0.tar.gz", "has_sig": false, "md5_digest": "cda3df495110bf115f7a9c86d23ac800", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 298063, "upload_time": "2020-03-21T01:02:00", "upload_time_iso_8601": "2020-03-21T01:02:00.177086Z", "url": "https://files.pythonhosted.org/packages/32/92/9b69ead75b1b646db59020b965b2291085bec312dffac496673f709ebe4f/spydrnet-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "2b5d85ca515b7b75bed7288d3eb415b2", "sha256": "ad3cfbcbe021fe6a2c3a7e571174c8af6b48b8a7afaad37c552f3ff483cfc957"}, "downloads": -1, "filename": "spydrnet-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b5d85ca515b7b75bed7288d3eb415b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 376047, "upload_time": "2020-04-21T17:16:54", "upload_time_iso_8601": "2020-04-21T17:16:54.858572Z", "url": "https://files.pythonhosted.org/packages/94/c8/083ee40476d9a0143e3b368fbd4e7fb1bb9f0251a95d3c218678bb3f70a9/spydrnet-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f018fbd7ecd9cf68c3880d213bcc26a", "sha256": "5724ead5f492708f3458963ccb2f8a995115af9803ba52995ae79169741ccbd4"}, "downloads": -1, "filename": "spydrnet-1.4.0.tar.gz", "has_sig": false, "md5_digest": "9f018fbd7ecd9cf68c3880d213bcc26a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 300879, "upload_time": "2020-04-21T17:16:56", "upload_time_iso_8601": "2020-04-21T17:16:56.493199Z", "url": "https://files.pythonhosted.org/packages/e9/20/1e90189f0aa4ceade370661abc5ed9eb0cf1c4fbb7b79c972a3fff55dbcb/spydrnet-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b5d85ca515b7b75bed7288d3eb415b2", "sha256": "ad3cfbcbe021fe6a2c3a7e571174c8af6b48b8a7afaad37c552f3ff483cfc957"}, "downloads": -1, "filename": "spydrnet-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b5d85ca515b7b75bed7288d3eb415b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 376047, "upload_time": "2020-04-21T17:16:54", "upload_time_iso_8601": "2020-04-21T17:16:54.858572Z", "url": "https://files.pythonhosted.org/packages/94/c8/083ee40476d9a0143e3b368fbd4e7fb1bb9f0251a95d3c218678bb3f70a9/spydrnet-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f018fbd7ecd9cf68c3880d213bcc26a", "sha256": "5724ead5f492708f3458963ccb2f8a995115af9803ba52995ae79169741ccbd4"}, "downloads": -1, "filename": "spydrnet-1.4.0.tar.gz", "has_sig": false, "md5_digest": "9f018fbd7ecd9cf68c3880d213bcc26a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 300879, "upload_time": "2020-04-21T17:16:56", "upload_time_iso_8601": "2020-04-21T17:16:56.493199Z", "url": "https://files.pythonhosted.org/packages/e9/20/1e90189f0aa4ceade370661abc5ed9eb0cf1c4fbb7b79c972a3fff55dbcb/spydrnet-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:08 2020"}