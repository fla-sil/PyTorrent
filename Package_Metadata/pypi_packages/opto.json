{"info": {"author": "Steven A. Cholewiak", "author_email": "steven@cholewiak.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "opto\n====\n\nopto is a Python module that allows you to control `Optotune focus\ntunable\nlenses <http://www.optotune.com/products/focus-tunable-lenses>`__ using\nthe `Optotune Lens Driver\n4 <http://www.optotune.com/products/focus-tunable-lenses/lens-drivers>`__.\nTested with an `Optotune\nEL-10-30 <http://www.optotune.com/products/focus-tunable-lenses/electrical-lens-el-10-30?task=view&id=18>`__.\n\nExamples\n~~~~~~~~\n\nOpens the serial port, connects to the Optotune, sets the lens current\nto 50 mA, and closes the serial port, gently returning the lens to 0 mA\ncurrent:\n\n.. code:: python\n\n    from opto import Opto\n\n    o = Opto(port='/dev/cu.usbmodem1411')\n    o.connect()\n    o.current(50.0)\n    o.close(soft_close=True)\n\nAlternatively, here we use the ``with`` statement to create a sinusoidal\ntransition from minimum to maximum current and back:\n\n.. code:: python\n\n    from opto import Opto\n    import numpy as np\n    import time\n\n    with Opto(port='/dev/cu.usbmodem1411') as o:\n        current_low = o.current_lower()\n        current_high = o.current_upper()\n        current_delta = current_high-current_low\n        for i in np.linspace(0, 2*np.pi, 1000):\n            o.current(np.sin(i)*current_delta+current_low)\n            time.sleep(0.01)\n\nInstallation\n------------\n\nUse ``pip`` to install from github:\n\n::\n\n    pip install git+https://github.com/OrganicIrradiation/opto.git\n\nor clone the package using git:\n\n::\n\n    git clone https://github.com/OrganicIrradiation/opto.git\n\nRequirements\n------------\n\nRequires `pySerial <https://pypi.python.org/pypi/pyserial>`__", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/OrganicIrradiation/opto/tarball/v0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OrganicIrradiation/opto", "keywords": "Optotune,optics,lens", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "opto", "package_url": "https://pypi.org/project/opto/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/opto/", "project_urls": {"Download": "https://github.com/OrganicIrradiation/opto/tarball/v0.1", "Homepage": "https://github.com/OrganicIrradiation/opto"}, "release_url": "https://pypi.org/project/opto/0.1/", "requires_dist": null, "requires_python": null, "summary": "Python interface to Optotune focus-tunable lenses", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>opto is a Python module that allows you to control <a href=\"http://www.optotune.com/products/focus-tunable-lenses\" rel=\"nofollow\">Optotune focus\ntunable\nlenses</a> using\nthe <a href=\"http://www.optotune.com/products/focus-tunable-lenses/lens-drivers\" rel=\"nofollow\">Optotune Lens Driver\n4</a>.\nTested with an <a href=\"http://www.optotune.com/products/focus-tunable-lenses/electrical-lens-el-10-30?task=view&amp;id=18\" rel=\"nofollow\">Optotune\nEL-10-30</a>.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Opens the serial port, connects to the Optotune, sets the lens current\nto 50 mA, and closes the serial port, gently returning the lens to 0 mA\ncurrent:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">opto</span> <span class=\"kn\">import</span> <span class=\"n\">Opto</span>\n\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">Opto</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'/dev/cu.usbmodem1411'</span><span class=\"p\">)</span>\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"p\">)</span>\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">soft_close</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Alternatively, here we use the <tt>with</tt> statement to create a sinusoidal\ntransition from minimum to maximum current and back:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">opto</span> <span class=\"kn\">import</span> <span class=\"n\">Opto</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Opto</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'/dev/cu.usbmodem1411'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">o</span><span class=\"p\">:</span>\n    <span class=\"n\">current_low</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">current_lower</span><span class=\"p\">()</span>\n    <span class=\"n\">current_high</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">current_upper</span><span class=\"p\">()</span>\n    <span class=\"n\">current_delta</span> <span class=\"o\">=</span> <span class=\"n\">current_high</span><span class=\"o\">-</span><span class=\"n\">current_low</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">):</span>\n        <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">current_delta</span><span class=\"o\">+</span><span class=\"n\">current_low</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</pre>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Use <tt>pip</tt> to install from github:</p>\n<pre>pip install git+https://github.com/OrganicIrradiation/opto.git\n</pre>\n<p>or clone the package using git:</p>\n<pre>git clone https://github.com/OrganicIrradiation/opto.git\n</pre>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Requires <a href=\"https://pypi.python.org/pypi/pyserial\" rel=\"nofollow\">pySerial</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2345027, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "316de7bd8e3a90259eda6b5bac0893c5", "sha256": "321557fc36ec99cc570248b15a3d0996ffbd23ce42b788eb33ab664364791178"}, "downloads": -1, "filename": "opto-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "316de7bd8e3a90259eda6b5bac0893c5", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6742, "upload_time": "2016-09-15T19:30:36", "upload_time_iso_8601": "2016-09-15T19:30:36.681123Z", "url": "https://files.pythonhosted.org/packages/00/c6/74ade62215dfddb182d134c3a29c01c192c2d7b105fef221fae34ae21fc9/opto-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b49580266d93e2b1e43edcdd1dde8f1a", "sha256": "41152d84af1943c9ade02b09d162d4f691f0b26a243c2e34c05cee63d1578928"}, "downloads": -1, "filename": "opto-0.1.tar.gz", "has_sig": false, "md5_digest": "b49580266d93e2b1e43edcdd1dde8f1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5182, "upload_time": "2016-09-15T19:30:33", "upload_time_iso_8601": "2016-09-15T19:30:33.920786Z", "url": "https://files.pythonhosted.org/packages/d7/a7/d16e603b7b973e78fe04a20592e982623357a1e4571f007c505cbc4b2b15/opto-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "316de7bd8e3a90259eda6b5bac0893c5", "sha256": "321557fc36ec99cc570248b15a3d0996ffbd23ce42b788eb33ab664364791178"}, "downloads": -1, "filename": "opto-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "316de7bd8e3a90259eda6b5bac0893c5", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6742, "upload_time": "2016-09-15T19:30:36", "upload_time_iso_8601": "2016-09-15T19:30:36.681123Z", "url": "https://files.pythonhosted.org/packages/00/c6/74ade62215dfddb182d134c3a29c01c192c2d7b105fef221fae34ae21fc9/opto-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b49580266d93e2b1e43edcdd1dde8f1a", "sha256": "41152d84af1943c9ade02b09d162d4f691f0b26a243c2e34c05cee63d1578928"}, "downloads": -1, "filename": "opto-0.1.tar.gz", "has_sig": false, "md5_digest": "b49580266d93e2b1e43edcdd1dde8f1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5182, "upload_time": "2016-09-15T19:30:33", "upload_time_iso_8601": "2016-09-15T19:30:33.920786Z", "url": "https://files.pythonhosted.org/packages/d7/a7/d16e603b7b973e78fe04a20592e982623357a1e4571f007c505cbc4b2b15/opto-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:58 2020"}