{"info": {"author": "Henrik Blidh", "author_email": "henrik.blidh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Scientific/Engineering"], "description": "\n# LSPOpt\n\n[![Build Status](https://dev.azure.com/hbldh/github/_apis/build/status/hbldh.lspopt?branchName=master)](https://dev.azure.com/hbldh/github/_build/latest?definitionId=7&branchName=master)\n[![Coverage Status](https://coveralls.io/repos/github/hbldh/lspopt/badge.svg?branch=master)](https://coveralls.io/github/hbldh/lspopt?branch=master)\n[![PyPI version](https://img.shields.io/pypi/v/lspopt.svg)](https://pypi.org/project/lspopt/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nThis module is a Python implementation of the multitaper window method \ndescribed in [\\[1\\]](#references) for estimating Wigner spectra for certain locally\nstationary processes.\n\nAbstract from [\\[1\\]](#references):\n\n> This paper investigates the time-discrete multitapers that give a mean square error optimal Wigner spectrum estimate for a class\n> of locally stationary processes (LSPs). The accuracy in the estimation of the time-variable Wigner spectrum of the LSP is evaluated\n> and compared with other frequently used methods. The optimal multitapers are also approximated by Hermite functions, which is\n> computationally more efficient, and the errors introduced by this approximation are studied. Additionally, the number of windows\n> included in a multitaper spectrum estimate is often crucial and an investigation of the error caused by limiting this number is made.\n> Finally, the same optimal set of weights can be stored and utilized for different window lengths. As a result, the optimal multitapers\n> are shown to be well approximated by Hermite functions, and a limited number of windows can be used for a mean square error\n> optimal spectrogram estimate.\n\n## Installation\n\nInstall via pip:\n\n    pip install lspopt\n\n## Testing\n\nTest with `pytest`:\n\n    pytest tests/ \n\nTests are run at every commit to GitHub and the results of this, as well as test \ncoverage, can be studied at [Azure Pipelines](https://dev.azure.com/hbldh/github/_build/latest?definitionId=7&branchName=master).\n\n## Usage\n\nTo generate the taper windows only, use the `lspopt` method:\n\n```python\nfrom lspopt import lspopt\nH, w = lspopt(N=256, c_parameter=20.0)\n```\n\nThere is also a convenience method for using the [SciPy spectrogram method](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram)\nwith the `lspopt` multitaper windows:\n\n```python\nfrom lspopt import spectrogram_lspopt\nf, t, Sxx = spectrogram_lspopt(x, fs, c_parameter=20.0)\n```\n\nThis can then be plotted with e.g. [matplotlib](http://matplotlib.org/).\n\n### Example\n\nOne can generate a [chirp](https://docs.scipy.org/doc/scipy-0.16.0/reference/generated/scipy.signal.chirp.html)\nprocess realisation and run spectrogram methods on this. \n\n```python\nimport numpy as np\nfrom scipy.signal import chirp, spectrogram\nimport matplotlib.pyplot as plt\n\nfrom lspopt.lsp import spectrogram_lspopt\n\nfs = 10e3\nN = 1e5\namp = 2 * np.sqrt(2)\nnoise_power = 0.001 * fs / 2\ntime = np.arange(N) / fs\nfreq = np.linspace(1e3, 2e3, N)\nx = amp * chirp(time, 1e3, 2.0, 6e3, method='quadratic') + \\\n    np.random.normal(scale=np.sqrt(noise_power), size=time.shape)\n\nf, t, Sxx = spectrogram(x, fs)\n\nax = plt.subplot(211)\nax.pcolormesh(t, f, Sxx)\nax.set_ylabel('Frequency [Hz]')\nax.set_xlabel('Time [sec]')\n\nf, t, Sxx = spectrogram_lspopt(x, fs, c_parameter=20.0)\n\nax = plt.subplot(212)\nax.pcolormesh(t, f, Sxx)\nax.set_ylabel('Frequency [Hz]')\nax.set_xlabel('Time [sec]')\n\nplt.show()\n```\n\n![Spectrogram plot](https://hbldh.github.com/lspopt/images/plot.png)\n*Top: Using SciPy's spectrogram method. Bottom: Using LSPOpt's spectrogram solution.*\n\n## References\n\n\\[1\\] [Hansson-Sandsten, M. (2011). Optimal multitaper Wigner spectrum \nestimation of a class of locally stationary processes using Hermite functions. \nEURASIP Journal on Advances in Signal Processing, 2011, 10.](http://asp.eurasipjournals.com/content/pdf/1687-6180-2011-980805.pdf)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hbldh/lspopt", "keywords": "Mathematical Statistics,Multitaper,Spectrogram", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lspopt", "package_url": "https://pypi.org/project/lspopt/", "platform": "", "project_url": "https://pypi.org/project/lspopt/", "project_urls": {"Homepage": "https://github.com/hbldh/lspopt"}, "release_url": "https://pypi.org/project/lspopt/1.1.0/", "requires_dist": ["numpy", "scipy", "six"], "requires_python": ">=2.7.10", "summary": "A Python implementation of a multitaper window method for estimating Wigner spectra for certain locally stationary processes", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LSPOpt</h1>\n<p><a href=\"https://dev.azure.com/hbldh/github/_build/latest?definitionId=7&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c8882c3af3cd42b8910074f65898da7255b4540/68747470733a2f2f6465762e617a7572652e636f6d2f68626c64682f6769746875622f5f617069732f6275696c642f7374617475732f68626c64682e6c73706f70743f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/hbldh/lspopt?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b776d913b424725ddafb69a14ca075972bee4201/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f68626c64682f6c73706f70742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/lspopt/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1835e785a7e130be3f9187c72d4a75bf17d8bc67/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c73706f70742e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>This module is a Python implementation of the multitaper window method\ndescribed in <a href=\"#references\" rel=\"nofollow\">[1]</a> for estimating Wigner spectra for certain locally\nstationary processes.</p>\n<p>Abstract from <a href=\"#references\" rel=\"nofollow\">[1]</a>:</p>\n<blockquote>\n<p>This paper investigates the time-discrete multitapers that give a mean square error optimal Wigner spectrum estimate for a class\nof locally stationary processes (LSPs). The accuracy in the estimation of the time-variable Wigner spectrum of the LSP is evaluated\nand compared with other frequently used methods. The optimal multitapers are also approximated by Hermite functions, which is\ncomputationally more efficient, and the errors introduced by this approximation are studied. Additionally, the number of windows\nincluded in a multitaper spectrum estimate is often crucial and an investigation of the error caused by limiting this number is made.\nFinally, the same optimal set of weights can be stored and utilized for different window lengths. As a result, the optimal multitapers\nare shown to be well approximated by Hermite functions, and a limited number of windows can be used for a mean square error\noptimal spectrogram estimate.</p>\n</blockquote>\n<h2>Installation</h2>\n<p>Install via pip:</p>\n<pre><code>pip install lspopt\n</code></pre>\n<h2>Testing</h2>\n<p>Test with <code>pytest</code>:</p>\n<pre><code>pytest tests/ \n</code></pre>\n<p>Tests are run at every commit to GitHub and the results of this, as well as test\ncoverage, can be studied at <a href=\"https://dev.azure.com/hbldh/github/_build/latest?definitionId=7&amp;branchName=master\" rel=\"nofollow\">Azure Pipelines</a>.</p>\n<h2>Usage</h2>\n<p>To generate the taper windows only, use the <code>lspopt</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lspopt</span> <span class=\"kn\">import</span> <span class=\"n\">lspopt</span>\n<span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">lspopt</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">c_parameter</span><span class=\"o\">=</span><span class=\"mf\">20.0</span><span class=\"p\">)</span>\n</pre>\n<p>There is also a convenience method for using the <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram\" rel=\"nofollow\">SciPy spectrogram method</a>\nwith the <code>lspopt</code> multitaper windows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lspopt</span> <span class=\"kn\">import</span> <span class=\"n\">spectrogram_lspopt</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">Sxx</span> <span class=\"o\">=</span> <span class=\"n\">spectrogram_lspopt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">c_parameter</span><span class=\"o\">=</span><span class=\"mf\">20.0</span><span class=\"p\">)</span>\n</pre>\n<p>This can then be plotted with e.g. <a href=\"http://matplotlib.org/\" rel=\"nofollow\">matplotlib</a>.</p>\n<h3>Example</h3>\n<p>One can generate a <a href=\"https://docs.scipy.org/doc/scipy-0.16.0/reference/generated/scipy.signal.chirp.html\" rel=\"nofollow\">chirp</a>\nprocess realisation and run spectrogram methods on this.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.signal</span> <span class=\"kn\">import</span> <span class=\"n\">chirp</span><span class=\"p\">,</span> <span class=\"n\">spectrogram</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">lspopt.lsp</span> <span class=\"kn\">import</span> <span class=\"n\">spectrogram_lspopt</span>\n\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"mf\">10e3</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mf\">1e5</span>\n<span class=\"n\">amp</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">noise_power</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span> <span class=\"o\">*</span> <span class=\"n\">fs</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">fs</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mf\">1e3</span><span class=\"p\">,</span> <span class=\"mf\">2e3</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">amp</span> <span class=\"o\">*</span> <span class=\"n\">chirp</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"mf\">1e3</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">6e3</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'quadratic'</span><span class=\"p\">)</span> <span class=\"o\">+</span> \\\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">noise_power</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">Sxx</span> <span class=\"o\">=</span> <span class=\"n\">spectrogram</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">211</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">pcolormesh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">Sxx</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Frequency [Hz]'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Time [sec]'</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">Sxx</span> <span class=\"o\">=</span> <span class=\"n\">spectrogram_lspopt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">c_parameter</span><span class=\"o\">=</span><span class=\"mf\">20.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">212</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">pcolormesh</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">Sxx</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Frequency [Hz]'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Time [sec]'</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"Spectrogram plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1c2741c5ac434359001f6f961057feea6be0cdc/68747470733a2f2f68626c64682e6769746875622e636f6d2f6c73706f70742f696d616765732f706c6f742e706e67\">\n<em>Top: Using SciPy's spectrogram method. Bottom: Using LSPOpt's spectrogram solution.</em></p>\n<h2>References</h2>\n<p>[1] <a href=\"http://asp.eurasipjournals.com/content/pdf/1687-6180-2011-980805.pdf\" rel=\"nofollow\">Hansson-Sandsten, M. (2011). Optimal multitaper Wigner spectrum\nestimation of a class of locally stationary processes using Hermite functions.\nEURASIP Journal on Advances in Signal Processing, 2011, 10.</a></p>\n\n          </div>"}, "last_serial": 5418910, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "03b047713490d032db40ced6e46aa590", "sha256": "ed16100c47fabb5bb03658ddec17901299a7541fc2074219c42e3fb7d537df28"}, "downloads": -1, "filename": "lspopt-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03b047713490d032db40ced6e46aa590", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.10", "size": 34847, "upload_time": "2019-06-19T06:56:23", "upload_time_iso_8601": "2019-06-19T06:56:23.048389Z", "url": "https://files.pythonhosted.org/packages/98/fc/042e87e10252681282dc29be2d67c431759823246d190a7f9f6ecc953645/lspopt-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929a14f9353ab30f556949f39b938e39", "sha256": "efddaef0ae67d8327ff466a384537c92e305c771a73dc8d3eab44cfbf8bda845"}, "downloads": -1, "filename": "lspopt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "929a14f9353ab30f556949f39b938e39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.10", "size": 8108, "upload_time": "2019-06-19T06:56:25", "upload_time_iso_8601": "2019-06-19T06:56:25.203541Z", "url": "https://files.pythonhosted.org/packages/48/34/135e305e77e4039c43efbfcdadd8ac7267338a3aa3a36cb4cd0f84e77561/lspopt-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03b047713490d032db40ced6e46aa590", "sha256": "ed16100c47fabb5bb03658ddec17901299a7541fc2074219c42e3fb7d537df28"}, "downloads": -1, "filename": "lspopt-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03b047713490d032db40ced6e46aa590", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.10", "size": 34847, "upload_time": "2019-06-19T06:56:23", "upload_time_iso_8601": "2019-06-19T06:56:23.048389Z", "url": "https://files.pythonhosted.org/packages/98/fc/042e87e10252681282dc29be2d67c431759823246d190a7f9f6ecc953645/lspopt-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929a14f9353ab30f556949f39b938e39", "sha256": "efddaef0ae67d8327ff466a384537c92e305c771a73dc8d3eab44cfbf8bda845"}, "downloads": -1, "filename": "lspopt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "929a14f9353ab30f556949f39b938e39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.10", "size": 8108, "upload_time": "2019-06-19T06:56:25", "upload_time_iso_8601": "2019-06-19T06:56:25.203541Z", "url": "https://files.pythonhosted.org/packages/48/34/135e305e77e4039c43efbfcdadd8ac7267338a3aa3a36cb4cd0f84e77561/lspopt-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:27 2020"}