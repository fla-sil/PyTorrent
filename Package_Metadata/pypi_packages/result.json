{"info": {"author": "Danilo Bargen", "author_email": "mail@dbrgn.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "Result\n======\n\n.. image:: https://img.shields.io/travis/dbrgn/result/master.svg\n    :alt: Build status\n    :target: https://travis-ci.org/dbrgn/result\n\n.. image:: https://img.shields.io/coveralls/dbrgn/result/master.svg\n    :alt: Coverage\n    :target: https://coveralls.io/github/dbrgn/result\n\nA simple Result type for Python 3 `inspired by Rust\n<https://doc.rust-lang.org/std/result/>`__, fully type annotated.\n\nThe idea is that a ``Result`` value can be either ``Ok(value)`` or ``Err(error)``,\nwith a way to differentiate between the two. It will change code like this:\n\n.. sourcecode:: python\n\n    def get_user_by_email(email):\n        \"\"\"\n        Return the user instance or an error message.\n        \"\"\"\n        if not user_exists(email):\n            return None, 'User does not exist'\n        if not user_active(email):\n            return None, 'User is inactive'\n        user = get_user(email)\n        return user, None\n\n    user, reason = get_user_by_email('ueli@example.com')\n    if user is None:\n        raise RuntimeError('Could not fetch user: %s' % reason)\n    else:\n        do_something(user)\n\nTo something like this:\n\n.. sourcecode:: python\n\n    from result import Ok, Err\n\n    def get_user_by_email(email):\n        \"\"\"\n        Return the user instance or an error message.\n        \"\"\"\n        if not user_exists(email):\n            return Err('User does not exist')\n        if not user_active(email):\n            return Err('User is inactive')\n        user = get_user(email)\n        return Ok(user)\n\n    user_result = get_user_by_email(email)\n    if user_result.is_ok():\n        do_something(user_result.value)\n    else:\n        raise RuntimeError('Could not fetch user: %s' user_result.value)\n\nAs this is Python and not Rust, you will lose some of the advantages that it\nbrings, like elegant combinations with the ``match`` statement. On the other\nside, you don't have to return semantically unclear tuples anymore.\n\nNot all methods (https://doc.rust-lang.org/std/result/enum.Result.html) have\nbeen implemented, only the ones that make sense in the Python context. You still\ndon't get any type safety at runtime, but some easier handling of types that can\nbe OK or not, without resorting to custom exceptions.\n\n\nAPI\n---\n\nCreating an instance::\n\n    >>> from result import Ok, Err\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n\nOr through the class methods::\n\n    >>> from result import Result\n    >>> res1 = Result.Ok('yay')\n    >>> res2 = Result.Err('nay')\n\nChecking whether a result is ``Ok`` or not::\n\n    >>> res = Ok('yay')\n    >>> res.is_ok()\n    True\n    >>> res.is_err()\n    False\n\nConvert a ``Result`` to the value or ``None``::\n\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n    >>> res1.ok()\n    'yay'\n    >>> res2.ok()\n    None\n\nConvert a ``Result`` to the error or ``None``::\n\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n    >>> res1.err()\n    None\n    >>> res2.err()\n    'nay'\n\nAccess the value directly, without any other checks::\n\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n    >>> res1.value\n    'yay'\n    >>> res2.value\n    'nay'\n\nNote that this is a property, you cannot assign to it. Results are immutable.\n\nFor your convenience, simply creating an ``Ok`` result without value is the same as using ``True``::\n\n    >>> res1 = Result.Ok()\n    >>> res1.value\n    True\n    >>> res2 = Ok()\n    >>> res2.value\n    True\n\nThe ``unwrap`` method returns the value if ``Ok`` and ``unwrap_err`` method\nreturns the error value if ``Err``, otherwise it raises an ``UnwrapError``::\n\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n    >>> res1.unwrap()\n    'yay'\n    >>> res2.unwrap()\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"C:\\project\\result\\result.py\", line 107, in unwrap\n        return self.expect(\"Called `Result.unwrap()` on an `Err` value\")\n    File \"C:\\project\\result\\result.py\", line 101, in expect\n        raise UnwrapError(message)\n    result.result.UnwrapError: Called `Result.unwrap()` on an `Err` value\n    >>> res1.unwrap_err()\n    Traceback (most recent call last):\n    ...\n    >>>res2.unwrap_err()\n    'nay'\n\n\nA custom error message can be displayed instead by using ``expect`` and ``expect_err``::\n\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n    >>> res1.expect('not ok')\n    'yay'\n    >>> res2.expect('not ok')\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"C:\\project\\result\\result.py\", line 101, in expect\n        raise UnwrapError(message)\n    result.result.UnwrapError: not ok\n    >>> res1.expect_err('not err')\n    Traceback (most recent call last):\n    ...\n    >>> res2.expect_err('not err')\n    'nay'\n\nA default value can be returned instead by using ``unwrap_or``::\n\n    >>> res1 = Ok('yay')\n    >>> res2 = Err('nay')\n    >>> res1.unwrap_or('default')\n    'yay'\n    >>> res2.unwrap_or('default')\n    'default'\n\nValues and errors can be mapped using ``map``, ``map_or``, ``map_or_else`` and\n``map_err``::\n\n   >>> Ok(1).map(lambda x: x + 1)\n   Ok(2)\n   >>> Err('nay').map(lambda x: x + 1)\n   Err('nay')\n   >>> Ok(1).map_or(-1, lambda x: x + 1)\n   2\n   >>> Err(1).map_or(-1, lambda x: x + 1)\n   -1\n   >>> Ok(1).map_or_else(lambda: 3, lambda x: x + 1)\n   2\n   >>> Err('nay').map_or_else(lambda: 3, lambda x: x + 1)\n   3\n   >>> Ok(1).map_err(lambda x: x + 1)\n   Ok(1)\n   >>> Err(1).map_err(lambda x: x + 1)\n   Err(2)\n\n\nLicense\n-------\n\nMIT License\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dbrgn/result", "keywords": "rust result enum", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "result", "package_url": "https://pypi.org/project/result/", "platform": "", "project_url": "https://pypi.org/project/result/", "project_urls": {"Homepage": "https://github.com/dbrgn/result"}, "release_url": "https://pypi.org/project/result/0.5.0/", "requires_dist": ["typing ; python_version < \"3.5\""], "requires_python": "", "summary": "A rust-like result type for Python", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/dbrgn/result\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/face856b793f129eed8cbcac4ad71a1e855f7138/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f646272676e2f726573756c742f6d61737465722e737667\"></a>\n<a href=\"https://coveralls.io/github/dbrgn/result\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/703025ed6ef8086f2e50dfb43fa79b55a8e1b01e/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f646272676e2f726573756c742f6d61737465722e737667\"></a>\n<p>A simple Result type for Python 3 <a href=\"https://doc.rust-lang.org/std/result/\" rel=\"nofollow\">inspired by Rust</a>, fully type annotated.</p>\n<p>The idea is that a <tt>Result</tt> value can be either <tt>Ok(value)</tt> or <tt>Err(error)</tt>,\nwith a way to differentiate between the two. It will change code like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_user_by_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Return the user instance or an error message.\n    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user_exists</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'User does not exist'</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user_active</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'User is inactive'</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">get_user</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">reason</span> <span class=\"o\">=</span> <span class=\"n\">get_user_by_email</span><span class=\"p\">(</span><span class=\"s1\">'ueli@example.com'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'Could not fetch user: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">reason</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n<p>To something like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">result</span> <span class=\"kn\">import</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Err</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_user_by_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Return the user instance or an error message.\n    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user_exists</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s1\">'User does not exist'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user_active</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"s1\">'User is inactive'</span><span class=\"p\">)</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">get_user</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n<span class=\"n\">user_result</span> <span class=\"o\">=</span> <span class=\"n\">get_user_by_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">user_result</span><span class=\"o\">.</span><span class=\"n\">is_ok</span><span class=\"p\">():</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">user_result</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'Could not fetch user: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"n\">user_result</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<p>As this is Python and not Rust, you will lose some of the advantages that it\nbrings, like elegant combinations with the <tt>match</tt> statement. On the other\nside, you don\u2019t have to return semantically unclear tuples anymore.</p>\n<p>Not all methods (<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow\">https://doc.rust-lang.org/std/result/enum.Result.html</a>) have\nbeen implemented, only the ones that make sense in the Python context. You still\ndon\u2019t get any type safety at runtime, but some easier handling of types that can\nbe OK or not, without resorting to custom exceptions.</p>\n<div id=\"api\">\n<h2>API</h2>\n<p>Creating an instance:</p>\n<pre>&gt;&gt;&gt; from result import Ok, Err\n&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n</pre>\n<p>Or through the class methods:</p>\n<pre>&gt;&gt;&gt; from result import Result\n&gt;&gt;&gt; res1 = Result.Ok('yay')\n&gt;&gt;&gt; res2 = Result.Err('nay')\n</pre>\n<p>Checking whether a result is <tt>Ok</tt> or not:</p>\n<pre>&gt;&gt;&gt; res = Ok('yay')\n&gt;&gt;&gt; res.is_ok()\nTrue\n&gt;&gt;&gt; res.is_err()\nFalse\n</pre>\n<p>Convert a <tt>Result</tt> to the value or <tt>None</tt>:</p>\n<pre>&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n&gt;&gt;&gt; res1.ok()\n'yay'\n&gt;&gt;&gt; res2.ok()\nNone\n</pre>\n<p>Convert a <tt>Result</tt> to the error or <tt>None</tt>:</p>\n<pre>&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n&gt;&gt;&gt; res1.err()\nNone\n&gt;&gt;&gt; res2.err()\n'nay'\n</pre>\n<p>Access the value directly, without any other checks:</p>\n<pre>&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n&gt;&gt;&gt; res1.value\n'yay'\n&gt;&gt;&gt; res2.value\n'nay'\n</pre>\n<p>Note that this is a property, you cannot assign to it. Results are immutable.</p>\n<p>For your convenience, simply creating an <tt>Ok</tt> result without value is the same as using <tt>True</tt>:</p>\n<pre>&gt;&gt;&gt; res1 = Result.Ok()\n&gt;&gt;&gt; res1.value\nTrue\n&gt;&gt;&gt; res2 = Ok()\n&gt;&gt;&gt; res2.value\nTrue\n</pre>\n<p>The <tt>unwrap</tt> method returns the value if <tt>Ok</tt> and <tt>unwrap_err</tt> method\nreturns the error value if <tt>Err</tt>, otherwise it raises an <tt>UnwrapError</tt>:</p>\n<pre>&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n&gt;&gt;&gt; res1.unwrap()\n'yay'\n&gt;&gt;&gt; res2.unwrap()\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFile \"C:\\project\\result\\result.py\", line 107, in unwrap\n    return self.expect(\"Called `Result.unwrap()` on an `Err` value\")\nFile \"C:\\project\\result\\result.py\", line 101, in expect\n    raise UnwrapError(message)\nresult.result.UnwrapError: Called `Result.unwrap()` on an `Err` value\n&gt;&gt;&gt; res1.unwrap_err()\nTraceback (most recent call last):\n...\n&gt;&gt;&gt;res2.unwrap_err()\n'nay'\n</pre>\n<p>A custom error message can be displayed instead by using <tt>expect</tt> and <tt>expect_err</tt>:</p>\n<pre>&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n&gt;&gt;&gt; res1.expect('not ok')\n'yay'\n&gt;&gt;&gt; res2.expect('not ok')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFile \"C:\\project\\result\\result.py\", line 101, in expect\n    raise UnwrapError(message)\nresult.result.UnwrapError: not ok\n&gt;&gt;&gt; res1.expect_err('not err')\nTraceback (most recent call last):\n...\n&gt;&gt;&gt; res2.expect_err('not err')\n'nay'\n</pre>\n<p>A default value can be returned instead by using <tt>unwrap_or</tt>:</p>\n<pre>&gt;&gt;&gt; res1 = Ok('yay')\n&gt;&gt;&gt; res2 = Err('nay')\n&gt;&gt;&gt; res1.unwrap_or('default')\n'yay'\n&gt;&gt;&gt; res2.unwrap_or('default')\n'default'\n</pre>\n<p>Values and errors can be mapped using <tt>map</tt>, <tt>map_or</tt>, <tt>map_or_else</tt> and\n<tt>map_err</tt>:</p>\n<pre>&gt;&gt;&gt; Ok(1).map(lambda x: x + 1)\nOk(2)\n&gt;&gt;&gt; Err('nay').map(lambda x: x + 1)\nErr('nay')\n&gt;&gt;&gt; Ok(1).map_or(-1, lambda x: x + 1)\n2\n&gt;&gt;&gt; Err(1).map_or(-1, lambda x: x + 1)\n-1\n&gt;&gt;&gt; Ok(1).map_or_else(lambda: 3, lambda x: x + 1)\n2\n&gt;&gt;&gt; Err('nay').map_or_else(lambda: 3, lambda x: x + 1)\n3\n&gt;&gt;&gt; Ok(1).map_err(lambda x: x + 1)\nOk(1)\n&gt;&gt;&gt; Err(1).map_err(lambda x: x + 1)\nErr(2)\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT License</p>\n</div>\n\n          </div>"}, "last_serial": 7035726, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b89e3a228356e5ab2e82ff9ae82f8287", "sha256": "b9658d70af4449d1112131984c437f96331c1212696a6fe15bce32a6cc47ac2a"}, "downloads": -1, "filename": "result-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b89e3a228356e5ab2e82ff9ae82f8287", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6063, "upload_time": "2015-12-14T14:07:21", "upload_time_iso_8601": "2015-12-14T14:07:21.576781Z", "url": "https://files.pythonhosted.org/packages/9b/a9/0e6bcff2a78cd34041ced965a923b306d4e5850f95743bd8af8b9efbc5ba/result-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d74a52cdefb444dfc688e34aea8d494a", "sha256": "7753bf3da1927a56f51b7471e248dbcf9adf5dc9c4d12556e48cfefcc31d32f7"}, "downloads": -1, "filename": "result-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d74a52cdefb444dfc688e34aea8d494a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3541, "upload_time": "2015-12-14T14:07:09", "upload_time_iso_8601": "2015-12-14T14:07:09.789170Z", "url": "https://files.pythonhosted.org/packages/1d/27/48abc77c8d10e54f095f2ed41ab02f6030f3d75474369a1073bee813478f/result-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7d5a3e2009b420055b25ed9732130a1b", "sha256": "566aa192f96631f407cef595d942d512b4e19239f29a486620560735914c6b57"}, "downloads": -1, "filename": "result-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "7d5a3e2009b420055b25ed9732130a1b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 6124, "upload_time": "2015-12-14T14:12:10", "upload_time_iso_8601": "2015-12-14T14:12:10.039432Z", "url": "https://files.pythonhosted.org/packages/af/4e/6b7b1388cbd3dd93d2b7e79621753725ae30059595c9e0383ab971dde2f1/result-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ab7cf09cc4449d1288f640628b0c03a", "sha256": "65d8479929189be6533d6dfb4ac6c60220f3587dc13debde6a7678ce098b3565"}, "downloads": -1, "filename": "result-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3ab7cf09cc4449d1288f640628b0c03a", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6123, "upload_time": "2015-12-14T14:11:49", "upload_time_iso_8601": "2015-12-14T14:11:49.111571Z", "url": "https://files.pythonhosted.org/packages/32/2c/f82ab8d4163473d181885187d23b4e567cbb3c97fd9fa758f795abd80fea/result-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36dfdc828502cb385a0c6071f6c027e7", "sha256": "2b104296a1b326167f262a33f177ddebae0f8c91d9d8ecea5e16dc115feb62ee"}, "downloads": -1, "filename": "result-0.1.1.tar.gz", "has_sig": false, "md5_digest": "36dfdc828502cb385a0c6071f6c027e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3570, "upload_time": "2015-12-14T14:11:27", "upload_time_iso_8601": "2015-12-14T14:11:27.831210Z", "url": "https://files.pythonhosted.org/packages/b5/23/128679988640f51436a13043e9684adb0640bb9f9f591be19c07a248d97e/result-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c8827aff962b616ee48a62b5c4695147", "sha256": "56d347a8cfcff699b58d8888da8ca33a219853466fdfd83f4429619a351b261c"}, "downloads": -1, "filename": "result-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "c8827aff962b616ee48a62b5c4695147", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6258, "upload_time": "2016-05-05T07:10:02", "upload_time_iso_8601": "2016-05-05T07:10:02.319356Z", "url": "https://files.pythonhosted.org/packages/f5/5b/aa17fd0853fe7c7aa8490ca46a18d87eef5b256b6b08ee72abdc2b377362/result-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "566b7aa89fda871cc44824a1864b7ac9", "sha256": "78a0bed8c6afae74fa58f43390dc7f50ee6ec601a2e6a3e0168d89451b516996"}, "downloads": -1, "filename": "result-0.2.0.tar.gz", "has_sig": true, "md5_digest": "566b7aa89fda871cc44824a1864b7ac9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3752, "upload_time": "2016-05-05T07:10:23", "upload_time_iso_8601": "2016-05-05T07:10:23.792756Z", "url": "https://files.pythonhosted.org/packages/46/d8/0286512923024c30daeb3644b3269cacc99ac6bf80b12e630f0342ccccbc/result-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "be4d21adc48df36b18a0a9ec709c9688", "sha256": "d0210c5e79798ab7e9fdc22d6c0561d406cd5d569e227d0985c8cba4fbb4d284"}, "downloads": -1, "filename": "result-0.2.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "be4d21adc48df36b18a0a9ec709c9688", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6317, "upload_time": "2016-09-21T06:47:23", "upload_time_iso_8601": "2016-09-21T06:47:23.559426Z", "url": "https://files.pythonhosted.org/packages/c6/8b/ae6bdc68b41126de61b3825ead968a0f6302c3752a7ff1722910b0abddc8/result-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11abe30f1c9568573c63867c38b012b0", "sha256": "ec2d1404b20d9a8fc8c14ffdc7f9ebcf34b614208267997dcb5d917c9f78612b"}, "downloads": -1, "filename": "result-0.2.2.tar.gz", "has_sig": true, "md5_digest": "11abe30f1c9568573c63867c38b012b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3732, "upload_time": "2016-09-21T06:47:26", "upload_time_iso_8601": "2016-09-21T06:47:26.220514Z", "url": "https://files.pythonhosted.org/packages/18/b9/049bb2a6cee1d0dd95bf35579735b6074a51703f955d8b02ccd491b39d61/result-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "fbf2f7e1a3493bc4ab05b698895bfd79", "sha256": "e947cf0e768913ef66d135139f0bed5b48ebec4d87ce3c76c29ff794e0a7d54f"}, "downloads": -1, "filename": "result-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "fbf2f7e1a3493bc4ab05b698895bfd79", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6993, "upload_time": "2017-07-12T20:57:20", "upload_time_iso_8601": "2017-07-12T20:57:20.576558Z", "url": "https://files.pythonhosted.org/packages/86/99/b1ec36110856f740d8304437816bd88f9aa2b3e506697881bb2b7c9ca936/result-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7853082fcfb416597199aef34bc907f", "sha256": "ffa75336a4c269211e52192725db268d2ad95c6dd900846a0d08aaa3b3046321"}, "downloads": -1, "filename": "result-0.3.0.tar.gz", "has_sig": true, "md5_digest": "d7853082fcfb416597199aef34bc907f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4462, "upload_time": "2017-07-12T20:57:21", "upload_time_iso_8601": "2017-07-12T20:57:21.985383Z", "url": "https://files.pythonhosted.org/packages/61/58/a5567e284eb25f11a2e412e4f5686a8548b57b1f718c54b3fc2ad1d65767/result-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9217ad5b9198cba7f5758985fad47d72", "sha256": "582c6c464b188ad9f13bc1cacc67d02502ed77b92acbcda9bc541c6cb049a2f9"}, "downloads": -1, "filename": "result-0.4.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9217ad5b9198cba7f5758985fad47d72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5215, "upload_time": "2019-04-17T07:10:58", "upload_time_iso_8601": "2019-04-17T07:10:58.982563Z", "url": "https://files.pythonhosted.org/packages/cb/1c/2046b5cf6640d20b7d1b2d1307a02ecd565a2ecd83c274db9da7f0ccc872/result-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf2614a18a6ba60cdb467bd879e004a8", "sha256": "2e3d086e0dad69b8bd3f34939822872a6b5ea4e7f7ba437182cbc0417d1d4379"}, "downloads": -1, "filename": "result-0.4.0.tar.gz", "has_sig": true, "md5_digest": "cf2614a18a6ba60cdb467bd879e004a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4697, "upload_time": "2019-04-17T07:11:00", "upload_time_iso_8601": "2019-04-17T07:11:00.679411Z", "url": "https://files.pythonhosted.org/packages/d8/b0/6e709c3692e22c1ba3d3697434b05a8d5887519646aff394d4a2b08c533e/result-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "d05ecaeef6cfe2cc5eb48d6dcfd8465c", "sha256": "1952ad23dfd03f2a5b5ed82ba4f0fa616969b3b9dd2f5980d06fe9645a389875"}, "downloads": -1, "filename": "result-0.4.1-py3-none-any.whl", "has_sig": true, "md5_digest": "d05ecaeef6cfe2cc5eb48d6dcfd8465c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5341, "upload_time": "2020-02-17T08:02:50", "upload_time_iso_8601": "2020-02-17T08:02:50.856624Z", "url": "https://files.pythonhosted.org/packages/19/c9/031fe2c16fb42054133c245a523d0765adf2a6e20f902c1b57a1f371ecea/result-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c1a98e3fdb8837f0700efde2456d1eb", "sha256": "f19504023cf9200a1580e58e52190dd2a36106e5679b097833f4854de4d62a05"}, "downloads": -1, "filename": "result-0.4.1.tar.gz", "has_sig": true, "md5_digest": "4c1a98e3fdb8837f0700efde2456d1eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4972, "upload_time": "2020-02-17T08:02:52", "upload_time_iso_8601": "2020-02-17T08:02:52.626721Z", "url": "https://files.pythonhosted.org/packages/fa/57/efba06803cf16d48eb7ca6bd2957b4d5bf4cad4b9ab8386a9c724803a9e0/result-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "28c82ed968f6c7a686a3829b44aab8de", "sha256": "46f039a2d17e47709c13e29af359c3fa91fd5cacddba2a8109fdcb514e6ff471"}, "downloads": -1, "filename": "result-0.5.0-py3-none-any.whl", "has_sig": true, "md5_digest": "28c82ed968f6c7a686a3829b44aab8de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7345, "upload_time": "2020-03-03T14:42:12", "upload_time_iso_8601": "2020-03-03T14:42:12.327015Z", "url": "https://files.pythonhosted.org/packages/8a/0f/2e100673dcaa9456c3826a048048d877f9bac27eaf864097515eae5d8c66/result-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e1fd103af358b8d3f53155ce74ad2ea", "sha256": "f4563ff615b1147822d13eb363fbda202511fcbf281b3cf7acf0723ca7cb612b"}, "downloads": -1, "filename": "result-0.5.0.tar.gz", "has_sig": true, "md5_digest": "7e1fd103af358b8d3f53155ce74ad2ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7721, "upload_time": "2020-03-03T14:42:14", "upload_time_iso_8601": "2020-03-03T14:42:14.017096Z", "url": "https://files.pythonhosted.org/packages/98/36/4a5099e26c7ba275f8c56c8d72242d62ad6ccbac155114493f451c9981db/result-0.5.0.tar.gz", "yanked": false}], "0.6.0rc1": [{"comment_text": "", "digests": {"md5": "a7bb75dde9fef3e46f1d006ec31d6fa8", "sha256": "ab1dc84fff83a5b43abd620fd3476505be6ac42794566e6a797bfaf85415c291"}, "downloads": -1, "filename": "result-0.6.0rc1-py3-none-any.whl", "has_sig": true, "md5_digest": "a7bb75dde9fef3e46f1d006ec31d6fa8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7594, "upload_time": "2020-04-16T21:31:11", "upload_time_iso_8601": "2020-04-16T21:31:11.674089Z", "url": "https://files.pythonhosted.org/packages/24/07/9ba25a7dd3c42497b78f0a2dd4c98a0074c705cf0271cd2c964947bcde94/result-0.6.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0aa49d461b69324dcabed5e61d6029b", "sha256": "5501a1ea0037c8b3f3d6211e2f0684a777b7d828ed9b29cb90fad6edb2fa58d5"}, "downloads": -1, "filename": "result-0.6.0rc1.tar.gz", "has_sig": true, "md5_digest": "d0aa49d461b69324dcabed5e61d6029b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8677, "upload_time": "2020-04-16T21:31:13", "upload_time_iso_8601": "2020-04-16T21:31:13.632179Z", "url": "https://files.pythonhosted.org/packages/41/39/1340d5d6778e448a47f9243d4bd6083d08a14bdde81c4d3b776e66ac3c0d/result-0.6.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28c82ed968f6c7a686a3829b44aab8de", "sha256": "46f039a2d17e47709c13e29af359c3fa91fd5cacddba2a8109fdcb514e6ff471"}, "downloads": -1, "filename": "result-0.5.0-py3-none-any.whl", "has_sig": true, "md5_digest": "28c82ed968f6c7a686a3829b44aab8de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7345, "upload_time": "2020-03-03T14:42:12", "upload_time_iso_8601": "2020-03-03T14:42:12.327015Z", "url": "https://files.pythonhosted.org/packages/8a/0f/2e100673dcaa9456c3826a048048d877f9bac27eaf864097515eae5d8c66/result-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e1fd103af358b8d3f53155ce74ad2ea", "sha256": "f4563ff615b1147822d13eb363fbda202511fcbf281b3cf7acf0723ca7cb612b"}, "downloads": -1, "filename": "result-0.5.0.tar.gz", "has_sig": true, "md5_digest": "7e1fd103af358b8d3f53155ce74ad2ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7721, "upload_time": "2020-03-03T14:42:14", "upload_time_iso_8601": "2020-03-03T14:42:14.017096Z", "url": "https://files.pythonhosted.org/packages/98/36/4a5099e26c7ba275f8c56c8d72242d62ad6ccbac155114493f451c9981db/result-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:29 2020"}