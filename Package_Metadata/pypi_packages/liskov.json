{"info": {"author": "Gr\u00e9gory Salvan", "author_email": "apieum@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "**************\nLiskov Utility\n**************\n\n.. image:: https://pypip.in/v/liskov/badge.png\n        :target: https://pypi.python.org/pypi/liskov\n\nUtility to check if your subtypes pass supertypes tests.\n\n\nLiskov Substitution is related in SOLID principles.\nIt has been formulated by Barbara Liskov and Jeanette Wing\nin order to define more precisely the notion of subtypes.\n\nFor more details read: http://reports-archive.adm.cs.cmu.edu/anon/1999/CMU-CS-99-156.ps\n\nTo ensure a certain respect of Liskov Substitution principle in your program,\nyou can simply make your subtypes tests extends your supertypes tests, but\nimporting a supertype test directly in subtype file make the test\nbeing recognized by unit tests runners and run it several times.\n\nYou can just import it in a function, but to not repeat this every time,\nI've made a small util, wich offers 3 ways to declare a subtype test.\n\nEach solution gives you different expressiveness depending on your preference:\n  - \"subtype\" function which just import and return a class from a module given as string argument.\n  - \"behave_as\" metaclass generator function which returns a metaclass from given modules.\n  - \"can_substitute\" decorator wich returns the class extending modules given as arguments.\n\nLiskov and Wing classified subtype relationships in two broad categories:\n  - Extension subtypes: add methods or eventually states to supertypes\n  - Constrained subtypes: when supertype enable variations in subtypes\n\nSince version 0.2 you can find some helpers to define constraints.(see example 4)\n\n---------------------------------------------------------------------\n\n**Table of Contents**\n\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n=============\nInstallation\n=============\n\nSimply install it from pypi::\n\n  pip install liskov\n\nor from sources::\n\n  git clone git@github.com:apieum/liskov.git\n  cd liskov\n  python setup.py install\n\n=====\nUsage\n=====\n\n------------------------\nExample 1 - \"subtype\":\n------------------------\n  Use a lambda if too long.\n\n\n.. code-block:: python\n\n    from liskov import subtype\n\n    BasicCalc = lambda: subtype('testCalc.BasicCalcTest')\n    BaseConverter = lambda: subtype('testConvert.BaseConverterTest')\n    class ScientificCalcTest(BasicCalc(), BaseConverter()):\n      def test_it_is_a_subtype_of_BasicCalc(self):\n        from testCalc import BasicCalcTest\n        assert isinstance(self, BasicCalcTest)\n\n      def test_it_is_a_subtype_of_BaseConverter(self):\n        from testConvert import BaseConverterTest\n        assert isinstance(self, BaseConverterTest)\n\n------------------------\nExample 2 - \"behave_as\":\n------------------------\n*Python 2 version*\n\n.. code-block:: python\n\n    from liskov import behave_as\n\n    class ScientificCalcTest(object):\n      __metaclass__ = behave_as('testCalc.BasicCalcTest', 'testConvert.BaseConverterTest')\n\n      def test_it_is_a_subtype_of_BasicCalc(self):\n        from testCalc import BasicCalcTest\n        assert isinstance(self, BasicCalcTest)\n\n      def test_it_is_a_subtype_of_BaseConverter(self):\n        from testConvert import BaseConverterTest\n        assert isinstance(self, BaseConverterTest)\n\n\n\n*Python 3 version*\n\n.. code-block:: python\n\n    from liskov import behave_as\n\n    metaclass = behave_as('testCalc.BasicCalcTest', 'testConvert.BaseConverterTest')\n\n    class ScientificCalcTest(object, metaclass=metaclass):\n      def test_it_is_a_subtype_of_BasicCalc(self):\n        from testCalc import BasicCalcTest\n        assert isinstance(self, BasicCalcTest)\n\n      def test_it_is_a_subtype_of_BaseConverter(self):\n        from testConvert import BaseConverterTest\n        assert isinstance(self, BaseConverterTest)\n\n\n-----------------------------\nExample 3 - \"can_substitute\":\n-----------------------------\n\n.. code-block:: python\n\n    from liskov import can_substitute\n\n    @can_substitute('testCalc.BasicCalcTest', 'testConvert.BaseConverterTest')\n    class ScientificCalcTest(object):\n      def test_it_is_a_subtype_of_BasicCalc(self):\n        from testCalc import BasicCalcTest\n        assert isinstance(self, BasicCalcTest)\n\n      def test_it_is_a_subtype_of_BaseConverter(self):\n        from testConvert import BaseConverterTest\n        assert isinstance(self, BaseConverterTest)\n\n\n-----------------------------\nExample 4 - Constraints:\n-----------------------------\n\nThis example follow Liskov and Wing constrained subtypes Elephants hierarchy example\nfrom \"Behavioural Subtyping using invariants and constraints\" (link above)\n\nElephants can be white, green or blue\nRoyalElephant is always blue\nAlbinoElephant is always white\n\nEach instance of Elephant in ElephantTest is made with \"new_elephant\"\nElephantTest test if an Elephant can be white, green or blue.\n\n\n*Declare Constraints with a decorator*\n\n\n.. code-block:: python\n\n    from liskov import can_substitute, under_constraint\n    import elephant\n\n    @can_substitute('elephant.ElephantTest')\n    @under_constraint('test_it_can_be_grey', 'test_it_can_be_white')\n    class RoyalElephantTest(object):\n      def new_elephant(self, *args):\n        return elephant.RoyalElephant()\n\n\n*Declare Constraints with metaclass*\n\nPython 2 version\n\n.. code-block:: python\n\n    from liskov import behave_as\n    import elephant\n\n    class RoyalElephantTest(object):\n      __metaclass__ = behave_as('elephant.ElephantTest').except_for('test_it_can_be_grey', 'test_it_can_be_white')\n      def new_elephant(self, *args):\n        return elephant.RoyalElephant()\n\n\n\nPython 3 version\n\n.. code-block:: python\n\n    from liskov import behave_as\n    import elephant\n\n    metaclass = behave_as('elephant.ElephantTest').except_for('test_it_can_be_grey', 'test_it_can_be_white')\n    class RoyalElephantTest(object, metaclass=metaclass):\n      def new_elephant(self, *args):\n        return elephant.RoyalElephant()\n\n\n*Declare Constraints with subtype function*\n  bind \"subtype\" to \"constrain\" with any of these operators: \"& | + -\"\n\n.. code-block:: python\n\n    from liskov import subtype, constrain\n    import elephant\n\n    ConstrainedElephantTest = lambda: subtype('elephant.ElephantTest') & constrain('test_it_can_be_grey', 'test_it_can_be_white')\n\n    class RoyalElephantTest(ConstrainedElephantTest()):\n      def new_elephant(self, *args):\n        return elephant.RoyalElephant()\n\n\n===========\nDevelopment\n===========\n\nFell free to give feedback or improvment.\n\nLaunch test::\n\n  git clone git@github.com:apieum/liskov.git\n  cd liskov\n  nosetests --with-spec --spec-color\n\n\n.. image:: https://secure.travis-ci.org/apieum/liskov.png?branch=master\n   :target: https://travis-ci.org/apieum/liskov", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.python.org/pypi/liskov", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "liskov", "package_url": "https://pypi.org/project/liskov/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/liskov/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.python.org/pypi/liskov"}, "release_url": "https://pypi.org/project/liskov/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "Small helpers to make inheritance with unit tests", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/liskov\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/liskov/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cef2904a92b4fa9574166a4bb256d2907e3adc78/68747470733a2f2f70797069702e696e2f762f6c69736b6f762f62616467652e706e67\"></a>\n<p>Utility to check if your subtypes pass supertypes tests.</p>\n<p>Liskov Substitution is related in SOLID principles.\nIt has been formulated by Barbara Liskov and Jeanette Wing\nin order to define more precisely the notion of subtypes.</p>\n<p>For more details read: <a href=\"http://reports-archive.adm.cs.cmu.edu/anon/1999/CMU-CS-99-156.ps\" rel=\"nofollow\">http://reports-archive.adm.cs.cmu.edu/anon/1999/CMU-CS-99-156.ps</a></p>\n<p>To ensure a certain respect of Liskov Substitution principle in your program,\nyou can simply make your subtypes tests extends your supertypes tests, but\nimporting a supertype test directly in subtype file make the test\nbeing recognized by unit tests runners and run it several times.</p>\n<p>You can just import it in a function, but to not repeat this every time,\nI\u2019ve made a small util, wich offers 3 ways to declare a subtype test.</p>\n<dl>\n<dt>Each solution gives you different expressiveness depending on your preference:</dt>\n<dd><ul>\n<li>\u201csubtype\u201d function which just import and return a class from a module given as string argument.</li>\n<li>\u201cbehave_as\u201d metaclass generator function which returns a metaclass from given modules.</li>\n<li>\u201ccan_substitute\u201d decorator wich returns the class extending modules given as arguments.</li>\n</ul>\n</dd>\n<dt>Liskov and Wing classified subtype relationships in two broad categories:</dt>\n<dd><ul>\n<li>Extension subtypes: add methods or eventually states to supertypes</li>\n<li>Constrained subtypes: when supertype enable variations in subtypes</li>\n</ul>\n</dd>\n</dl>\n<p>Since version 0.2 you can find some helpers to define constraints.(see example 4)</p>\n<hr class=\"docutils\">\n<p><strong>Table of Contents</strong></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#development\" id=\"id3\" rel=\"nofollow\">Development</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Simply install it from pypi:</p>\n<pre>pip install liskov\n</pre>\n<p>or from sources:</p>\n<pre>git clone git@github.com:apieum/liskov.git\ncd liskov\npython setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"example-1-subtype\">\n<h3>Example 1 - \u201csubtype\u201d:</h3>\n<blockquote>\nUse a lambda if too long.</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">subtype</span>\n\n<span class=\"n\">BasicCalc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">subtype</span><span class=\"p\">(</span><span class=\"s1\">'testCalc.BasicCalcTest'</span><span class=\"p\">)</span>\n<span class=\"n\">BaseConverter</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">subtype</span><span class=\"p\">(</span><span class=\"s1\">'testConvert.BaseConverterTest'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ScientificCalcTest</span><span class=\"p\">(</span><span class=\"n\">BasicCalc</span><span class=\"p\">(),</span> <span class=\"n\">BaseConverter</span><span class=\"p\">()):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BasicCalc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testCalc</span> <span class=\"kn\">import</span> <span class=\"n\">BasicCalcTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BasicCalcTest</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BaseConverter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testConvert</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConverterTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BaseConverterTest</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-2-behave-as\">\n<h3>Example 2 - \u201cbehave_as\u201d:</h3>\n<p><em>Python 2 version</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">behave_as</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ScientificCalcTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"n\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">behave_as</span><span class=\"p\">(</span><span class=\"s1\">'testCalc.BasicCalcTest'</span><span class=\"p\">,</span> <span class=\"s1\">'testConvert.BaseConverterTest'</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BasicCalc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testCalc</span> <span class=\"kn\">import</span> <span class=\"n\">BasicCalcTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BasicCalcTest</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BaseConverter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testConvert</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConverterTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BaseConverterTest</span><span class=\"p\">)</span>\n</pre>\n<p><em>Python 3 version</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">behave_as</span>\n\n<span class=\"n\">metaclass</span> <span class=\"o\">=</span> <span class=\"n\">behave_as</span><span class=\"p\">(</span><span class=\"s1\">'testCalc.BasicCalcTest'</span><span class=\"p\">,</span> <span class=\"s1\">'testConvert.BaseConverterTest'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ScientificCalcTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">metaclass</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BasicCalc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testCalc</span> <span class=\"kn\">import</span> <span class=\"n\">BasicCalcTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BasicCalcTest</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BaseConverter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testConvert</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConverterTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BaseConverterTest</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-3-can-substitute\">\n<h3>Example 3 - \u201ccan_substitute\u201d:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">can_substitute</span>\n\n<span class=\"nd\">@can_substitute</span><span class=\"p\">(</span><span class=\"s1\">'testCalc.BasicCalcTest'</span><span class=\"p\">,</span> <span class=\"s1\">'testConvert.BaseConverterTest'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ScientificCalcTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BasicCalc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testCalc</span> <span class=\"kn\">import</span> <span class=\"n\">BasicCalcTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BasicCalcTest</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">test_it_is_a_subtype_of_BaseConverter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">testConvert</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConverterTest</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BaseConverterTest</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-4-constraints\">\n<h3>Example 4 - Constraints:</h3>\n<p>This example follow Liskov and Wing constrained subtypes Elephants hierarchy example\nfrom \u201cBehavioural Subtyping using invariants and constraints\u201d (link above)</p>\n<p>Elephants can be white, green or blue\nRoyalElephant is always blue\nAlbinoElephant is always white</p>\n<p>Each instance of Elephant in ElephantTest is made with \u201cnew_elephant\u201d\nElephantTest test if an Elephant can be white, green or blue.</p>\n<p><em>Declare Constraints with a decorator</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">can_substitute</span><span class=\"p\">,</span> <span class=\"n\">under_constraint</span>\n<span class=\"kn\">import</span> <span class=\"nn\">elephant</span>\n\n<span class=\"nd\">@can_substitute</span><span class=\"p\">(</span><span class=\"s1\">'elephant.ElephantTest'</span><span class=\"p\">)</span>\n<span class=\"nd\">@under_constraint</span><span class=\"p\">(</span><span class=\"s1\">'test_it_can_be_grey'</span><span class=\"p\">,</span> <span class=\"s1\">'test_it_can_be_white'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">RoyalElephantTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">new_elephant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">elephant</span><span class=\"o\">.</span><span class=\"n\">RoyalElephant</span><span class=\"p\">()</span>\n</pre>\n<p><em>Declare Constraints with metaclass</em></p>\n<p>Python 2 version</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">behave_as</span>\n<span class=\"kn\">import</span> <span class=\"nn\">elephant</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RoyalElephantTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"n\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">behave_as</span><span class=\"p\">(</span><span class=\"s1\">'elephant.ElephantTest'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">except_for</span><span class=\"p\">(</span><span class=\"s1\">'test_it_can_be_grey'</span><span class=\"p\">,</span> <span class=\"s1\">'test_it_can_be_white'</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">new_elephant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">elephant</span><span class=\"o\">.</span><span class=\"n\">RoyalElephant</span><span class=\"p\">()</span>\n</pre>\n<p>Python 3 version</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">behave_as</span>\n<span class=\"kn\">import</span> <span class=\"nn\">elephant</span>\n\n<span class=\"n\">metaclass</span> <span class=\"o\">=</span> <span class=\"n\">behave_as</span><span class=\"p\">(</span><span class=\"s1\">'elephant.ElephantTest'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">except_for</span><span class=\"p\">(</span><span class=\"s1\">'test_it_can_be_grey'</span><span class=\"p\">,</span> <span class=\"s1\">'test_it_can_be_white'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">RoyalElephantTest</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">metaclass</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">new_elephant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">elephant</span><span class=\"o\">.</span><span class=\"n\">RoyalElephant</span><span class=\"p\">()</span>\n</pre>\n<dl>\n<dt><em>Declare Constraints with subtype function</em></dt>\n<dd>bind \u201csubtype\u201d to \u201cconstrain\u201d with any of these operators: \u201c&amp; | + -\u201c</dd>\n</dl>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">liskov</span> <span class=\"kn\">import</span> <span class=\"n\">subtype</span><span class=\"p\">,</span> <span class=\"n\">constrain</span>\n<span class=\"kn\">import</span> <span class=\"nn\">elephant</span>\n\n<span class=\"n\">ConstrainedElephantTest</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">subtype</span><span class=\"p\">(</span><span class=\"s1\">'elephant.ElephantTest'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">constrain</span><span class=\"p\">(</span><span class=\"s1\">'test_it_can_be_grey'</span><span class=\"p\">,</span> <span class=\"s1\">'test_it_can_be_white'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RoyalElephantTest</span><span class=\"p\">(</span><span class=\"n\">ConstrainedElephantTest</span><span class=\"p\">()):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">new_elephant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">elephant</span><span class=\"o\">.</span><span class=\"n\">RoyalElephant</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Fell free to give feedback or improvment.</p>\n<p>Launch test:</p>\n<pre>git clone git@github.com:apieum/liskov.git\ncd liskov\nnosetests --with-spec --spec-color\n</pre>\n<a href=\"https://travis-ci.org/apieum/liskov\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/apieum/liskov.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68e46b02f845f3e3cebc2a6f6447c12d5e2aed8d/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f61706965756d2f6c69736b6f762e706e673f6272616e63683d6d6173746572\"></a>\n</div>\n\n          </div>"}, "last_serial": 882147, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "44648df9d2c9c61f20dc04aefaa0b7eb", "sha256": "310f6d633999a8119a862a92c38a7f530e4adb951f623497cb79c122eaf945ab"}, "downloads": -1, "filename": "liskov-0.1.tar.gz", "has_sig": false, "md5_digest": "44648df9d2c9c61f20dc04aefaa0b7eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3374, "upload_time": "2013-10-04T03:35:00", "upload_time_iso_8601": "2013-10-04T03:35:00.894776Z", "url": "https://files.pythonhosted.org/packages/dc/e5/c46a8a74adfba28a1f366bef07e309f62eb5bc98a3a5b7d0d1ba292e1d9a/liskov-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0d183441a3a1a377f0e85e28878b4256", "sha256": "f16ab289ede3a755f7bfff31c6dcef689784fe8057d9fd96e0741a47c7c72b8f"}, "downloads": -1, "filename": "liskov-0.2.tar.gz", "has_sig": false, "md5_digest": "0d183441a3a1a377f0e85e28878b4256", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4598, "upload_time": "2013-10-04T11:31:30", "upload_time_iso_8601": "2013-10-04T11:31:30.594270Z", "url": "https://files.pythonhosted.org/packages/36/cd/ff93167c7a28ff9c0977e390197655fc39100d7f4678b25f0b1408bcac79/liskov-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4d9892286f0ca12cff842df897949630", "sha256": "7756ef711abf822ce5939bbcb1ae46046fbc1deb844380c182b4785b800835ca"}, "downloads": -1, "filename": "liskov-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4d9892286f0ca12cff842df897949630", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5007, "upload_time": "2013-10-05T21:45:22", "upload_time_iso_8601": "2013-10-05T21:45:22.819072Z", "url": "https://files.pythonhosted.org/packages/36/67/95bd8b587d5727c486d15e7385d52b42e19c889d618941a28c5ead0c49ea/liskov-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "556351409a43e696d2318598130f5983", "sha256": "204e865eba84d4aeb1375e814cdf4d9862d6cf46bf57ace0bb62b03cd894cb72"}, "downloads": -1, "filename": "liskov-0.2.2-py2.7.egg", "has_sig": false, "md5_digest": "556351409a43e696d2318598130f5983", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8790, "upload_time": "2013-10-05T22:21:50", "upload_time_iso_8601": "2013-10-05T22:21:50.224477Z", "url": "https://files.pythonhosted.org/packages/6a/74/b3dd236f41eab4b1d417893ce781c952a7f00662e202f100af58324e13e0/liskov-0.2.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9374f0133bad267cf9883286469a6beb", "sha256": "bb85833acbec80eab416447c7ce71cae5bfb42098b124b213458ebbf0bb1c648"}, "downloads": -1, "filename": "liskov-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9374f0133bad267cf9883286469a6beb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4989, "upload_time": "2013-10-05T22:21:47", "upload_time_iso_8601": "2013-10-05T22:21:47.431735Z", "url": "https://files.pythonhosted.org/packages/c1/54/5fc890ec0c1ce4d8e011c264182f8c4dd5ed91751a15fbad21718acff34c/liskov-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "556351409a43e696d2318598130f5983", "sha256": "204e865eba84d4aeb1375e814cdf4d9862d6cf46bf57ace0bb62b03cd894cb72"}, "downloads": -1, "filename": "liskov-0.2.2-py2.7.egg", "has_sig": false, "md5_digest": "556351409a43e696d2318598130f5983", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8790, "upload_time": "2013-10-05T22:21:50", "upload_time_iso_8601": "2013-10-05T22:21:50.224477Z", "url": "https://files.pythonhosted.org/packages/6a/74/b3dd236f41eab4b1d417893ce781c952a7f00662e202f100af58324e13e0/liskov-0.2.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9374f0133bad267cf9883286469a6beb", "sha256": "bb85833acbec80eab416447c7ce71cae5bfb42098b124b213458ebbf0bb1c648"}, "downloads": -1, "filename": "liskov-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9374f0133bad267cf9883286469a6beb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4989, "upload_time": "2013-10-05T22:21:47", "upload_time_iso_8601": "2013-10-05T22:21:47.431735Z", "url": "https://files.pythonhosted.org/packages/c1/54/5fc890ec0c1ce4d8e011c264182f8c4dd5ed91751a15fbad21718acff34c/liskov-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:18 2020"}