{"info": {"author": "Stephane \"Twidi\" Angel", "author_email": "s.angel@twidi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "|PyPI Version| |Build Status|\n\ndjango-adv-cache-tag\n====================\n\nDjango advanced cache template tag:\n\n-  versioning\n-  compress\n-  partial caching\n-  easily extendable/customizable\n\nReadable documentation on\nhttp://documentup.com/twidi/django-adv-cache-tag\n\nIntroduction\n------------\n\nFirst, notice that the arguments of the ``{% cache %}`` templatetag\nprovided by ``django-adv-cache-tag`` are the same as for the default\ncache templatetag included in django, so it's very easy to use this new\none.\n\nWith ``django-adv-cache-tag`` you can :\n\n-  add a version number (int, string, date or whatever, it will be\n   stringified) to your templatetag : the version will be compared to\n   the cached one, and the exact same cache key will be used for the new\n   cached template, avoiding keeping old unused keys in your cache,\n   allowing you to cache forever.\n-  avoid to be afraid of an incompatible update in our algorithm,\n   because we also use an internal version number, updated only when the\n   internal algorithm changes\n-  define your own cache keys (or simply, just add the primary key (or\n   what you want, it's a templatetag parameter) to this cache key\n-  compress the data to be cached, to reduce memory consumption in your\n   cache backend, and network latency (but it will use more time and cpu\n   to compress/decompress, your choice)\n-  choose which cache backend will be used\n-  define ``{% nocache %}...{% endnocache %}`` blocks inside your cached\n   template, that will only be rendered when asked (for these parts, the\n   content of the template is cached, not the rendered result)\n-  easily define your own algorithm, as we provide a single class (with\n   short methods) you can inherit from, and simply change options or\n   whatever behavior you want, and define your own tags for them\n-  use a variable for the name of your cache fragment\n\nInstallation\n------------\n\n``django-adv-cache-tag`` is available on PyPI::\n\n    pip install django-adv-cache-tag\n\nStarting at version ``1.0``, we only support python 3.\n\n**If you upgrade from version < 1, note that the internal version number has changed, so all\ncache will be reset.**\n\nIf you want python 2 support, you must install by passing the version ::\n\n    pip install 'django-adv-cache-tag<1.0'\n\nOr you can find it on Github:\nhttps://github.com/twidi/django-adv-cache-tag\n\n(for python2 version: https://github.com/twidi/django-adv-cache-tag/tree/python2)\n\nWhen installed, just add ``adv_cache_tag`` to your ``INSTALLED_APPS`` in\nthe ``settings.py`` file of your django project.\n\nSee examples in the next sections to see how it works (basically the\nsame way as the default django cache templatetag)\n\nFeatures\n--------\n\nVersioning\n~~~~~~~~~~\n\nDescription\n^^^^^^^^^^^\n\nWith the default django cache templatetag, you can add as many arguments\nas you want, including a version, or date, and then the cache key will\nchange if this version change. So your cache is updated, as expected.\n\nBut the older key is not deleted and if you have a long expire time, it\nwill stay there for a very long time, consuming your precious memory.\n\n``django-adv-cache-tag`` provides a way to avoid this, while still\nregenerating the cache when needed. For this, when activated, we use the\nlast argument passed to your templatetag as a \"version number\", and\nremove it for the arguments used to generate the cache key.\n\nThis version will be used in the **content** of the cached template,\ninstead of the **key**, and when the cache exists and is loaded, the\ncached version will be compared to the wanted one, and if the two match,\nthe cache is valid and returned, else it will be regenerated.\n\nSo if you like the principle of a unique key for a given template for a\ngiven object/user or whatever, be sure to always use the same arguments,\nexcept the last one, and activate the ``ADV_CACHE_VERSIONING`` setting.\n\nNote that we also manage an internal version number, which will always\nbe compared to the cached one. This internal version number is only\nupdated when the internal algorithm of ``django-adv-cache-tag`` changes.\nBut you can update it to invalidate all cached templates by adding a\n``ADV_CACHE_VERSION`` to your settings (our internal version and the\nvalue from this settings will be concatenated to get the internal\nversion really used)\n\nSettings\n^^^^^^^^\n\n``ADV_CACHE_VERSIONING``, default to ``False``\n\n``ADV_CACHE_VERSION``, default to ``\"\"``\n\nExample\n^^^^^^^\n\nIn the following template, if ``ADV_CACHE_VERSIONING`` is set to True,\nthe key will always be the same, based on the string\n\"myobj\\_main\\_template\" and the value of ``obj.pk``, but the cached\nvalue will be regenerated each time the ``obj.date_last_updated`` will\nchange.\n\nSo we set a ``expire_time`` of ``0``, to always keep the template\ncached, because we now we won't have many copies (old ones and current\none) of it.\n\nThe value to set to have no expiry may depend of your cache backend (it's not always ``0``).\n\n\n.. code:: django\n\n    {% load adv_cache %}\n    {% cache 0 myobj_main_template obj.pk obj.date_last_updated %}\n      {{ obj }}\n    {% endcache %}\n\nPrimary key\n~~~~~~~~~~~\n\nDescription\n^^^^^^^^^^^\n\nIn the default django cache templatetag, the cache keys are like this\none ::\n\n    :1:template.cache.your_fragment_name.64223ccf70bbb65a3a4aceac37e21016\n\nYou may want to have more explicit cache keys, so with\n``django-adv-cache-tag`` you can add a \"primary key\" that will be added\nbetween the fragment name and the hash ::\n\n    :1:template.cache.your_fragment_name.your_pk.64223ccf70bbb65a3a4aceac37e21016\n\nAlthough the main use of this primary key is to have one cached fragment\nper object, so we can use the object primary key, you can use whatever\nyou want, an id, a string...\n\nTo add a primary key, simply set the ``ADV_CACHE_INCLUDE_PK`` setting to\n``True``, and the first argument (after the fragment's name) will be\nused as a pk.\n\nIf you want this only for a part of your cache templatetags, read the\n``Extending the default cache tag`` part later in this readme (it's\neasy, really).\n\nUnlike the version, the primary key will be kept as an argument to\ngenerate the cache key hash.\n\nSettings\n^^^^^^^^\n\n``ADV_CACHE_INCLUDE_PK``, default to ``False``\n\nExample\n^^^^^^^\n\nA common use of ``django-adv-cache-tag`` is to only use a primary key\nand a version:\n\n.. code:: django\n\n    {% cache 0 myobj_main_template obj.pk obj.date_last_updated %}\n\nCompression\n~~~~~~~~~~~\n\nDescription\n^^^^^^^^^^^\n\nThe default django cache templatetag simply saves the generated html in\nthe cache. Depending of your template, if may be a lot of html and your\ncache memory will grow very quickly. Not to mention that we can have a\nlot of spaces because of indentation in templates (two ways i know to\nremove them without ``django-adv-cache-tag``: the ``{% spaceless %}``\ntemplatetag, provided by django, and\n`django-template-preprocessor <https://github.com/citylive/django-template-preprocessor/>`__).\n\n``django-adv-cache-tag`` can do this for you. It is able to remove\nduplicate spaces (including newlines, tabs) by replacing them by a\nsimple space (to keep the space behavior in html), and to compress the\nhtml to be cached, via the ``zlib`` (and ``pickle``) module.\n\nOf course, this cost some time and CPU cycles, but you can save a lot of\nmemory in your cache backend, and a lot of bandwidth, especially if your\nbackend is on a distant place. I haven't done any test for this, but for\nsome templates, the saved data can be reduced from 2 ko to less than\none.\n\nTo activate these feature, simply set to ``True`` one or both of the\nsettings defined below.\n\nWARNING : If the cache backend used use pickle and its default protocol,\ncompression is useless because binary is not really well handled and the\nfinal size stored in the cache will be largely bigger than the\ncompressed one. So check for this before activating this option. It's ok\nfor the default django backends (at least in 1.4), but not for\ndjango-redis-cache, waiting for my pull-request, but you can check my\nown version:\nhttps://github.com/twidi/django-redis-cache/tree/pickle\\_version\n\nSettings\n^^^^^^^^\n\n``ADV_CACHE_COMPRESS``, default to ``False``, to activate the\ncompression via ``zlib``\n\n``ADV_CACHE_COMPRESS_LEVEL``, default to ``-1``, to set le compression level\nfor ``zlib`` (actually the default is ``zlib.Z_DEFAULT_COMPRESSION``, which is\n``-1``, that will be in fact ``6`` as the actual default defined in ``zlib``)\n\n``ADV_CACHE_COMPRESS_SPACES``, default to ``False``, to activate the\nreduction of blank characters.\n\nExample\n^^^^^^^\n\nNo example since you don't have to change anything to your templatetag\ncall to use this, just set the settings.\n\nChoose your cache backend\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDescription\n^^^^^^^^^^^\n\nIn django, you can define many cache backends. But with the default\ncache templatetag, you cannot say which one use, it will automatically\nbe the default one.\n\n``django-adv-cache-tag`` can do this for your by providing a setting,\n``ADV_CACHE_BACKEND`` which will take the name of a cache backend\ndefined in your settings. And by extending the provided ``CacheTag``\nobject, you can even define many backends to be used by many\ntemplatetags, say one for heavily accessed templates, one for the\nothers... as you want. Read the ``Extending the default cache tag`` part\nto know more about this (it's easy, really, but i already told you...)\n\nSettings\n^^^^^^^^\n\n``ADV_CACHE_BACKEND``, default to \"default\"\n\nExample\n^^^^^^^\n\nNo example since, like for the compression, you don't have to change\nanything to your templatetag to use this, just set the setting.\n\nPartial caching\n~~~~~~~~~~~~~~~\n\nWith the default django cache templatetag, your templates are cached and\nyou can't update them before display, so you can't cache big parts of\nhtml with a little dynamic fragment in it, for the user name, the\ncurrent date or whatever. You can cheat and save two templates\nsurrounding your dynamic part, but you will have more accesses to your\ncache backend.\n\n``django-adv-cache-tag`` allow the use of one or many ``{% nocache %}``\nblocks (closed by ``{% endnocache %}``) to put in your ``{% cache %}``\nblocks. These ``{% nocache %}`` block will be saved \"as is\" in the\ncache, while the rest of the block will be rendered to html. It's only\nwhen the template is finally displayed that the no-cached parts will be\nrendered.\n\nYou can have as many of these blocks you want.\n\nSettings\n^^^^^^^^\n\nThere is no settings for this feature, which is automatically activated.\n\nExample\n^^^^^^^\n\n.. code:: django\n\n    {% cache 0 myobj_main_template obj.pk obj.date_last_updated %}\n        <p>This is the cached part of the template for {{ obj }}, evaluated at {% now \"r\" %}.</p>\n        {% nocache %}\n            <p>This part will be evaluated each time : {% now \"r\" %}</p>\n        {% endnocache %}\n        <p>This is another cached part</p>\n    {% endcache %}\n\nThe fragment name\n~~~~~~~~~~~~~~~~~\n\nDescription\n^^^^^^^^^^^\n\nThe fragment name is the name to use as a base to create the cache key, and is defined just\nafter the expiry time.\n\nThe Django documentation states ``The name will be taken as is, do not use a variable``.\n\nIn ``django-adv-cache-tag``, by setting ``ADV_CACHE_RESOLVE_NAME`` to ``True``, a fragment name\nthat is not quoted will be resolved as a variable that should be in the context.\n\nSettings\n^^^^^^^^\n\n``ADV_CACHE_RESOLVE_NAME``, default to ``False``\n\nExample\n^^^^^^^\n\nWith ``ADV_CACHE_RESOLVE_NAME`` set to ``True``, you can do this if you have a variable named\n``fragment_name`` in your context:\n\n.. code:: django\n\n    {% cache 0 fragment_name obj.pk obj.date_last_updated %}\n\nAnd if you want to pass a name, you have to surround it by quotes:\n\n.. code:: django\n\n    {% cache 0 \"myobj_main_template\" obj.pk obj.date_last_updated %}\n\nWith ``ADV_CACHE_RESOLVE_NAME`` set to ``False``, the default, the name is always seen as a string,\nbut if surrounded by quotes, they are removed.\n\nIn the following example, you see double-quotes, but it would be the same with single quotes, or\nno quotes at all:\n\n.. code:: django\n\n    {% cache 0 \"myobj_main_template\" obj.pk obj.date_last_updated %}\n\nExtending the default cache tag\n-------------------------------\n\nIf the five settings explained in the previous sections are not enough\nfor you, or if you want to have a templatetag with a different behavior\nas the default provided ones, you will be happy to know that\n``django-adv-cache-tag`` was written with easily extending in mind.\n\nIt provides a class, ``CacheTag`` (in ``adv_cache_tag.tag``), which has\na lot of short and simple methods, and even a ``Meta`` class (idea\nstolen from the django models :D ). So it's easy to override a simple\npart.\n\nAll options defined in the ``Meta`` class are accessible in the class\nvia ``self.options.some_field``\n\nBelow we will show many ways of extending this class.\n\nBasic override\n~~~~~~~~~~~~~~\n\nImagine you don't want to change the default settings (all to ``False``,\nand using the ``default`` backend) but want a templatetag with\nversioning activated :\n\nCreate a new templatetag file (``myapp/templatetags/my_cache_tags.py``)\nwith this:\n\n.. code:: python\n\n    from adv_cache_tag.tag import CacheTag\n\n    class VersionedCacheTag(CacheTag):\n        class Meta(CacheTag.Meta):\n            versioning = True\n\n    from django import template\n    register = template.Library()\n\n    VersionedCacheTag.register(register, 'ver_cache')\n\nWith these simple lines, you now have a new templatetag to use when you\nwant versioning:\n\n.. code:: django\n\n    {% load my_cache_tags %}\n    {% ver_cache 0 myobj_main_template obj.pk obj.date_last_updated %}\n        obj\n    {% endver_cache %}\n\nAs you see, just replace ``{% load adv_cache %}`` (or the django default\n``{% load cache %}``) by ``{% load my_cache_tags %}`` (your templatetag\nmodule), and the ``{% cache %}`` templatetag by your new defined one,\n``{% ver_cache ... %}``. Don't forget to replace the closing tag too:\n``{% endver_cache %}``. But the ``{% nocache %}`` will stay the same,\nexcept if you want a new one. For this, just add a parameter to the\n``register`` method:\n\n.. code:: python\n\n    MyCacheTag.register(register, 'ver_cache', 'ver_nocache')\n\n.. code:: django\n\n    {% ver_cache ... %}\n        cached\n        {% ver_nocache %}not cached{% endver_nocache %}\n    {% endver_cache %}\n\nNote that you can keep the name ``cache`` for your tag if you know that\nyou will not load in your template another templatetag module providing\na ``cache`` tag. To do so, the simplest way is:\n\n.. code:: python\n\n    MyCacheTag.register(register)  # 'cache' and 'nocache' are the default values\n\nAll the ``django-adv-cache-tag`` settings have a matching variable in\nthe ``Meta`` class, so you can override one or many of them in your own\nclasses. See the \"Settings\" part to see them.\n\nInternal version\n~~~~~~~~~~~~~~~~\n\nWhen your template file is updated, the only way to invalidate all\ncached versions of this template is to update the fragment name or the\narguments passed to the templatetag.\n\nWith ``django-adv-cache-tag`` you can do this with versioning, by\nmanaging your own version as the last argument to the templatetag. But\nif you want to use the power of the versioning system of\n``django-adv-cache-tag``, it can be too verbose:\n\n.. code:: django\n\n    {% load adv_cache %}\n    {% with template_version=obj.date_last_updated|stringformat:\"s\"|add:\"v1\" %}\n        {% cache 0 myobj_main_template obj.pk template_version %}\n        ...\n        {% endcache %}\n    {% endwith %}\n\n``django-adv-cache-tag`` provides a way to do this easily, with the\n``ADV_CACHE_VERSION`` setting. But by updating it, **all** cached\nversions will be invalidated, not only those you updated.\n\nTo do this, simply create your own tag with a specific internal version:\n\n.. code:: python\n\n    class MyCacheTag(CacheTag):\n        class Meta(CacheTag.Meta):\n           internal_version = \"v1\"\n\n    MyCacheTag.register('my_cache')\n\nAnd then in your template, you can simply do\n\n.. code:: django\n\n    {% load my_cache_tags %}\n    {% my_cache 0 myobj_main_template obj.pk obj.date_last_updated %}\n    ...\n    {% endmy_cache %}\n\nEach time you update the content of your template and want invalidation,\nsimply change the ``internal_version`` in your ``MyCacheTag`` class (or\nyou can use a settings for this).\n\nChange the cache backend\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to change the cache backend for one templatetag, it's easy:\n\n.. code:: python\n\n    class MyCacheTag(CacheTag):\n        class Meta:\n            cache_backend = 'templates'\n\nBut you can also to this by overriding a method:\n\n.. code:: python\n\n    from django.core.cache import get_cache\n\n    class MyCacheTag(CacheTag):\n        def get_cache_object(self):\n            return get_cache('templates')\n\nAnd if you want a cache backend for old objects, and another, faster,\nfor recent ones:\n\n.. code:: python\n\n    from django.core.cache import get_cache\n\n    class MyCacheTag(CacheTag):\n        class Meta:\n            cache_backend = 'fast_templates'\n\n        def get_cache_object(self):\n            cache_backend = self.options.cache_backend\n            if self.get_pk() < 1000:\n                cache_backend = 'slow_templates'\n            return get_cache(cache_backend)\n\nThe value returned by the ``get_cache_object`` should be a cache backend\nobject, but as we only use the ``set`` and ``get`` methods on this\nobject, it can be what you want if it provides these two methods. And\neven more, you can override the ``cache_set`` and ``cache_get`` methods\nof the ``CacheTag`` class if you don't want to use the default ``set``\nand ``get`` methods of the cache backend object.\n\nNote that we also support the django way of changing the cache backend in the template-tag, using\nthe ``using`` argument, to be set at the last parameter (without any space between `using` and the\nname of the cache backend).\n\n.. code:: django\n\n    {% cache 0 myobj_main_template obj.pk obj.date_last_updated using=foo %}\n\n\nChange the cache key\n~~~~~~~~~~~~~~~~~~~~\n\nThe ``CacheTag`` class provides three classes to create the cache key:\n\n-  ``get_base_cache_key``, which returns a formatable string\n   (\"template.%(nodename)s.%(name)s.%(pk)s.%(hash)s\" by default if\n   ``include_pk`` is ``True`` or\n   \"template.%(nodename)s.%(name)s.%(hash)s\" if ``False``\n-  ``get_cache_key_args``, which returns the arguments to use in the\n   previous string\n-  ``get_cache_key``, which combine the two\n\nThe arguments are:\n\n-  ``nodename`` parameter is the name of the ``templatetag``: it's\n   \"my\\_cache\" in ``{% my_cache ... %}``\n-  ``name`` is the \"fragment name\" of your templatetag, the value after\n   the expire-time\n-  ``pk`` is used only if ``self.options.include_pk`` is ``True``, and\n   is returned by ``this.get_pk()``\n-  ``hash`` is the hash of all arguments after the fragment name,\n   excluding the last one which is the version number (this exclusion\n   occurs only if ``self.options.versioning`` is ``True``)\n\nIf you want to remove the \"template.\" part at the start of the cache key\n(useless if you have a cache backend dedicated to template caching), you\ncan do this:\n\n.. code:: python\n\n    class MyCacheTag(CacheTag):\n        def get_base_cache_key(self):\n            cache_key = super(MyCacheTag, self).get_base_cache_key()\n            return cache_key[len('template:'):]  # or [9:]\n\nAdd an argument to the templatetag\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, the templatetag provided by ``CacheTag`` takes the same\narguments as the default django cache templatetag.\n\nIf you want to add an argument, it's easy as the class provides a\n``get_template_node_arguments`` method, which will work as for normal\ndjango templatetags, taking a list of tokens, and returning ones that\nwill be passed to the real templatetag, a ``Node`` class tied to the\n``CacheTag``.\n\nSay you want to add a ``foo`` argument between the expire time and the\nfragment name:\n\n.. code:: python\n\n    from django import template\n\n    from adv_cache_tag.tag import CacheTag, Node\n\n    class MyNode(Node):\n        def __init__(self, nodename, nodelist, expire_time, foo, fragment_name, vary_on):\n            \"\"\" Save the foo variable in the node (not resolved yet) \"\"\"\n            super(MyNode, self).__init__(self, nodename, nodelist, expire_time, fragment_name, vary_on)\n            self.foo = foo\n\n\n    class MyCacheTag(CacheTag):\n\n        Node = MyNode\n\n        def prepare_params(self):\n            \"\"\" Resolve the foo variable to it's real content \"\"\"\n            super(MyCacheTag, self).prepare_params()\n            self.foo = template.Variable(self.node.foo).resolve(self.context)\n\n        @classmethod\n        def get_template_node_arguments(cls, tokens):\n            \"\"\" Check validity of tokens and return them as ready to be passed to the Node class \"\"\"\n            if len(tokens) < 4:\n                raise template.TemplateSyntaxError(u\"'%r' tag requires at least 3 arguments.\" % tokens[0])\n            return (tokens[1], tokens[2], tokens[3], tokens[4:])\n\nPrepare caching of templates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis one is not about overriding the class, but it can be useful. When\nan object is updated, it can be better to regenerate the cached template\nat this moment rather than when we need to display it.\n\nIt's easy. You can do this by catching the ``post_save`` signal of your\nmodel, or just by overriding its ``save`` method. For this example we\nwill use this last solution.\n\nThe only special thing is to know the path of the template where your\ntemplatetag is. In my case, i have a template just for this (included in\nother ones for general use), so it's easier to find it and regenerate it\nas in this example.\n\nAs we are not in a request, we don't have the ``Request`` object here,\nso context processors are not working, we must create a context object\nthat will be used to render the template, with all needed variables.\n\n.. code:: python\n\n    from django.template import loader, Context\n\n    class MyModel(models.Model):\n        # your fields\n\n        def save(self, *args, **kwargs):\n            super(MyModel, self.save(*args, **kwargs)\n\n            template = 'path/to/my_template_file_with_my_cache_block.html'\n\n            context = Context({\n                'obj': self,\n\n                # as you have no request, we have to add stuff from context processors manually if we need them\n                'STATIC_URL': settings.STATIC_URL,\n\n                # the line below indicates that we force regenerating the cache, even if it exists\n                '__regenerate__': True,\n\n                # the line below indicates if we only want html, without parsing the nocache parts\n                '__partial__': True,\n\n            })\n\n            loader.get_template(template).render(context)\n\nLoad data from database before rendering\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is a special case. Say you want to display a list of objects but\nyou have only ids and versions retrieved from redis (with ``ZSET``, with\nid as value and updated date (which is used as a version) as score , for\nexample)\n\nIf you know you always have a valid version of your template in cache,\nbecause they are regenerated every time they are saved, as seen above,\nit's fine, just add the object's primary key as the ``pk`` in your\ntemplatetag arguments, and the cached template will be loaded.\n\nBut if it's not the case, you will have a problem: when django will\nrender the template, the only part of the object present in the context\nis the primary key, so if you need the name or whatever field to render\nthe cached template, it won't work.\n\nWith ``django-adv-cache-tag`` it's easy to resolve this, as we can load\nthe object from the database and adding it to the context.\n\nView\n^^^^\n\n.. code:: python\n\n    def my_view(request):\n        objects = [\n            dict(\n                pk=val[0],\n                date_last_updated=val[1]\n            )\n            for val in\n                redis.zrevrange('my_objects', 0, 19, withscores=True)\n        ]\n        return render(request, \"my_results.html\", dict(objects=objects))\n\nTemplate \"my\\_results.html\"\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: django\n\n    {% for obj in objects %}\n        {% include \"my_result.html\" %}\n    {% endfor %}\n\nTemplate \"my\\_result.html\"\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: django\n\n    {% load my_cache_tags %}\n    {% my_cache 0 myobj_main_template obj.pk obj.date_last_updated %}\n        {{ obj }}\n    {% endmy_cache %}\n\nTemplatetag\n^^^^^^^^^^^\n\nIn ``myapp/templatetags/my_cache_tags``\n\n.. code:: python\n\n    from my_app.models import MyModel\n\n    class MyCacheTag(CacheTag):\n\n        class Meta(CacheTag.Meta):\n            \"\"\" Force options \"\"\"\n            include_pk = True\n            versioning = True\n\n        def create_content(self):\n            \"\"\" If the object in context is not a real model, load it from db \"\"\"\n            if not isinstance(context['obj'], MyObject):\n                context['obj'] = MyModel.objects.get(id=self.get_pk())\n            super(MyCacheTag, self).create_content()\n\n    MyCacheTag.register('my_cache')\n\nCareful with this, it generates as database requests as objects to be\nloaded.\n\nAnd more...\n~~~~~~~~~~~\n\nIf you want to do more, feel free to look at the source code of the\n``CacheTag`` class (in ``tag.py``), all methods are documented.\n\nSettings\n--------\n\n``django-adv-cache-tag`` provide 5 settings you can change. Here is the\nlist, with descriptions, default values, and corresponding fields in the\n``Meta`` class (accessible via ``self.options.some_field`` in the\n``CacheTag`` object)\n\n-  ``ADV_CACHE_VERSIONING`` to activate versioning, default to ``False``\n   (``versioning`` in the ``Meta`` class)\n-  ``ADV_CACHE_COMPRESS`` to activate compression, default to ``False``\n   (``compress`` in the ``Meta`` class)\n-   ``ADV_CACHE_COMPRESS_LEVEL`` to set the compression level (from ``1`` (min\n    compression) to ``9`` (max compression), default to ``-1`` (equivalent to\n    ``6``) (``compress_level`` in the ``Meta`` class)\n-  ``ADV_CACHE_COMPRESS_SPACES`` to activate spaces compression, default\n   to ``False`` (``compress_spaces`` in the ``Meta`` class)\n-  ``ADV_CACHE_INCLUDE_PK`` to activate the \"primary key\" feature,\n   default to ``False`` (``include_pk`` in the ``Meta`` class)\n-  ``ADV_CACHE_BACKEND`` to choose the cache backend to use, default to\n   ``\"default\"`` (``cache_backend`` in the ``Meta`` class)\n-  ``ADV_CACHE_VERSION`` to create your own internal version (will be\n   concatenated to the real internal version of\n   ``django-adv-cache-tag``), default to ``\"\"`` (``internal_version`` in\n   the ``Meta`` class)\n\nHow it works\n------------\n\nHere is a quick overview on how things work in ``django-adv-cache-tag``\n\nPartial caching\n~~~~~~~~~~~~~~~\n\nYour template :\n\n.. code:: django\n\n    {% load adv_cache %}\n    {% cache ... %}\n        foo\n        {% nocache %}\n            bar\n        {% endnocache %}\n        baz\n    {% endcache %}\n\nCached version (we ignore versioning and compress here, just to see how\nit works):\n\n.. code:: django\n\n    foo\n    {% endRAW_xyz %}\n        bar\n    {% RAW_xyz %}\n    baz\n\nWhen cached version is loaded, we parse :\n\n.. code:: django\n\n    {% RAW_xyz %}\n    foo\n    {% endRAW_xyz %}\n        bar\n    {% RAW_xyz %}\n    baz\n    {% endRAW_xyz %}\n\nThe first ``{% RAW_xyz %}`` and the last ``{% endRAW_xyz %}`` are not\nincluded in the cached version and added before parsing, only to save\nsome bytes.\n\nParts between ``{% RAW_xyz %}`` and ``{% endRAW_xyz %}`` are not parsed\nat all (seen as a ``TextNode`` by django)\n\nThe ``xyz`` part of the ``RAW`` and ``endRAW`` templatetags depends on\nthe ``SECRET_KEY`` and so is unique for a given site.\n\nIt allows to avoid at max the possible collisions with parsed content in\nthe cached version.\n\nWe could have used ``{% nocache %}`` and ``{% endnocache %}`` instead of\n``{% RAW_xyz %}`` and ``{% endRAW_xyz %}`` but in the parsed template,\nstored in the cache, if the html includes one of these strings, our\nfinal template would be broken, so we use long ones with a hash (but we\ncan not be sure at 100% these strings could not be in the cached html,\nbut for common usages it should suffice)\n\nLicense\n-------\n\n``django-adv-cache-tag`` is published under the MIT License (see the\nLICENSE file)\n\nRunning tests\n-------------\n\nIf ``adv_cache_tag`` is in the ``INSTALLED_APPS`` of your project, simply\nrun::\n\n    django-admin test adv_cache_tag\n\n(you may want to use ``django-admin`` or ``./manage.py`` depending on\nyour installation)\n\nIf you are in a fresh virtualenv to work on ``adv_cache_tag``, install\nthe django version you want::\n\n    pip install django\n\nThen make the ``adv_cache_tag`` module available in your python path.\nFor example, with ``virtualenv-wrapper``, considering you are at the\nroot of the ``django-adv-cache-tag`` repository, simply do::\n\n    add2virtualenv .\n\nOr simply::\n\n    pip install -e .\n\nThen to run the tests, this library provides a test project, so you can\nlaunch them this way::\n\n    DJANGO_SETTINGS_MODULE=adv_cache_tag.tests.testproject.settings django-admin.py test adv_cache_tag\n\nOr simply launch the ``runtests.sh`` script (it will run this exact\ncommand)::\n\n    ./runtests.sh\n\nSupported versions\n------------------\n\n============== ============== ===============\nDjango version Python version Library version\n============== ============== ===============\n1.7 to 1.11    2.7            0.4\n1.7            3.4            1.1.3\n1.8 to 1.10    3.4, 3.5       1.1.3\n1.11           3.4 to 3.6     1.1.3\n2.0            3.4, to 3.7    1.1.3\n2.1            3.5 to 3.7     1.1.3\n2.2            3.5 to 3.8     1.1.3\n3.0            3.6 to 3.8     1.1.3\n============== ============== ===============\n\nSupport for Python 2 is dropped since version 1 of ``django-adv-cache-tag``\n\n\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/django-adv-cache-tag.png\n   :target: https://pypi.python.org/pypi/django-adv-cache-tag\n   :alt: PyPI Version\n.. |Build Status| image:: https://travis-ci.org/twidi/django-adv-cache-tag.png\n   :target: https://travis-ci.org/twidi/django-adv-cache-tag\n   :alt: Build Status on Travis CI\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/twidi/django-adv-cache-tag", "keywords": "django,cache,templatetag,template", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-adv-cache-tag", "package_url": "https://pypi.org/project/django-adv-cache-tag/", "platform": "any", "project_url": "https://pypi.org/project/django-adv-cache-tag/", "project_urls": {"Homepage": "https://github.com/twidi/django-adv-cache-tag"}, "release_url": "https://pypi.org/project/django-adv-cache-tag/1.1.3/", "requires_dist": ["django ; extra == 'dev'"], "requires_python": ">=3.4", "summary": "An advanced template tag for caching in django: versioning, compress, partial caching, easy inheritance", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/django-adv-cache-tag\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c85ba89652e961b6209772e78805e1168e2a0558/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6164762d63616368652d7461672e706e67\"></a> <a href=\"https://travis-ci.org/twidi/django-adv-cache-tag\" rel=\"nofollow\"><img alt=\"Build Status on Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/680451b20dd799b16a2b622f0ddd8520772aca80/68747470733a2f2f7472617669732d63692e6f72672f74776964692f646a616e676f2d6164762d63616368652d7461672e706e67\"></a></p>\n<div id=\"django-adv-cache-tag\">\n<h2>django-adv-cache-tag</h2>\n<p>Django advanced cache template tag:</p>\n<ul>\n<li>versioning</li>\n<li>compress</li>\n<li>partial caching</li>\n<li>easily extendable/customizable</li>\n</ul>\n<p>Readable documentation on\n<a href=\"http://documentup.com/twidi/django-adv-cache-tag\" rel=\"nofollow\">http://documentup.com/twidi/django-adv-cache-tag</a></p>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>First, notice that the arguments of the <tt>{% cache %}</tt> templatetag\nprovided by <tt><span class=\"pre\">django-adv-cache-tag</span></tt> are the same as for the default\ncache templatetag included in django, so it\u2019s very easy to use this new\none.</p>\n<p>With <tt><span class=\"pre\">django-adv-cache-tag</span></tt> you can :</p>\n<ul>\n<li>add a version number (int, string, date or whatever, it will be\nstringified) to your templatetag : the version will be compared to\nthe cached one, and the exact same cache key will be used for the new\ncached template, avoiding keeping old unused keys in your cache,\nallowing you to cache forever.</li>\n<li>avoid to be afraid of an incompatible update in our algorithm,\nbecause we also use an internal version number, updated only when the\ninternal algorithm changes</li>\n<li>define your own cache keys (or simply, just add the primary key (or\nwhat you want, it\u2019s a templatetag parameter) to this cache key</li>\n<li>compress the data to be cached, to reduce memory consumption in your\ncache backend, and network latency (but it will use more time and cpu\nto compress/decompress, your choice)</li>\n<li>choose which cache backend will be used</li>\n<li>define <tt>{% nocache <span class=\"pre\">%}...{%</span> endnocache %}</tt> blocks inside your cached\ntemplate, that will only be rendered when asked (for these parts, the\ncontent of the template is cached, not the rendered result)</li>\n<li>easily define your own algorithm, as we provide a single class (with\nshort methods) you can inherit from, and simply change options or\nwhatever behavior you want, and define your own tags for them</li>\n<li>use a variable for the name of your cache fragment</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> is available on PyPI:</p>\n<pre>pip install django-adv-cache-tag\n</pre>\n<p>Starting at version <tt>1.0</tt>, we only support python 3.</p>\n<p><strong>If you upgrade from version &lt; 1, note that the internal version number has changed, so all\ncache will be reset.</strong></p>\n<p>If you want python 2 support, you must install by passing the version</p>\n<pre>pip install 'django-adv-cache-tag&lt;1.0'\n</pre>\n<p>Or you can find it on Github:\n<a href=\"https://github.com/twidi/django-adv-cache-tag\" rel=\"nofollow\">https://github.com/twidi/django-adv-cache-tag</a></p>\n<p>(for python2 version: <a href=\"https://github.com/twidi/django-adv-cache-tag/tree/python2\" rel=\"nofollow\">https://github.com/twidi/django-adv-cache-tag/tree/python2</a>)</p>\n<p>When installed, just add <tt>adv_cache_tag</tt> to your <tt>INSTALLED_APPS</tt> in\nthe <tt>settings.py</tt> file of your django project.</p>\n<p>See examples in the next sections to see how it works (basically the\nsame way as the default django cache templatetag)</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<div id=\"versioning\">\n<h4>Versioning</h4>\n<div id=\"description\">\n<h5>Description</h5>\n<p>With the default django cache templatetag, you can add as many arguments\nas you want, including a version, or date, and then the cache key will\nchange if this version change. So your cache is updated, as expected.</p>\n<p>But the older key is not deleted and if you have a long expire time, it\nwill stay there for a very long time, consuming your precious memory.</p>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> provides a way to avoid this, while still\nregenerating the cache when needed. For this, when activated, we use the\nlast argument passed to your templatetag as a \u201cversion number\u201d, and\nremove it for the arguments used to generate the cache key.</p>\n<p>This version will be used in the <strong>content</strong> of the cached template,\ninstead of the <strong>key</strong>, and when the cache exists and is loaded, the\ncached version will be compared to the wanted one, and if the two match,\nthe cache is valid and returned, else it will be regenerated.</p>\n<p>So if you like the principle of a unique key for a given template for a\ngiven object/user or whatever, be sure to always use the same arguments,\nexcept the last one, and activate the <tt>ADV_CACHE_VERSIONING</tt> setting.</p>\n<p>Note that we also manage an internal version number, which will always\nbe compared to the cached one. This internal version number is only\nupdated when the internal algorithm of <tt><span class=\"pre\">django-adv-cache-tag</span></tt> changes.\nBut you can update it to invalidate all cached templates by adding a\n<tt>ADV_CACHE_VERSION</tt> to your settings (our internal version and the\nvalue from this settings will be concatenated to get the internal\nversion really used)</p>\n</div>\n<div id=\"settings\">\n<h5>Settings</h5>\n<p><tt>ADV_CACHE_VERSIONING</tt>, default to <tt>False</tt></p>\n<p><tt>ADV_CACHE_VERSION</tt>, default to <tt>\"\"</tt></p>\n</div>\n<div id=\"example\">\n<h5>Example</h5>\n<p>In the following template, if <tt>ADV_CACHE_VERSIONING</tt> is set to True,\nthe key will always be the same, based on the string\n\u201cmyobj_main_template\u201d and the value of <tt>obj.pk</tt>, but the cached\nvalue will be regenerated each time the <tt>obj.date_last_updated</tt> will\nchange.</p>\n<p>So we set a <tt>expire_time</tt> of <tt>0</tt>, to always keep the template\ncached, because we now we won\u2019t have many copies (old ones and current\none) of it.</p>\n<p>The value to set to have no expiry may depend of your cache backend (it\u2019s not always <tt>0</tt>).</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">adv_cache</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span><span class=\"x\">\n  </span><span class=\"cp\">{{</span> <span class=\"nv\">obj</span> <span class=\"cp\">}}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcache</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n</div>\n<div id=\"primary-key\">\n<h4>Primary key</h4>\n<div id=\"id1\">\n<h5>Description</h5>\n<p>In the default django cache templatetag, the cache keys are like this\none</p>\n<pre>:1:template.cache.your_fragment_name.64223ccf70bbb65a3a4aceac37e21016\n</pre>\n<p>You may want to have more explicit cache keys, so with\n<tt><span class=\"pre\">django-adv-cache-tag</span></tt> you can add a \u201cprimary key\u201d that will be added\nbetween the fragment name and the hash</p>\n<pre>:1:template.cache.your_fragment_name.your_pk.64223ccf70bbb65a3a4aceac37e21016\n</pre>\n<p>Although the main use of this primary key is to have one cached fragment\nper object, so we can use the object primary key, you can use whatever\nyou want, an id, a string\u2026</p>\n<p>To add a primary key, simply set the <tt>ADV_CACHE_INCLUDE_PK</tt> setting to\n<tt>True</tt>, and the first argument (after the fragment\u2019s name) will be\nused as a pk.</p>\n<p>If you want this only for a part of your cache templatetags, read the\n<tt>Extending the default cache tag</tt> part later in this readme (it\u2019s\neasy, really).</p>\n<p>Unlike the version, the primary key will be kept as an argument to\ngenerate the cache key hash.</p>\n</div>\n<div id=\"id2\">\n<h5>Settings</h5>\n<p><tt>ADV_CACHE_INCLUDE_PK</tt>, default to <tt>False</tt></p>\n</div>\n<div id=\"id3\">\n<h5>Example</h5>\n<p>A common use of <tt><span class=\"pre\">django-adv-cache-tag</span></tt> is to only use a primary key\nand a version:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n</div>\n<div id=\"compression\">\n<h4>Compression</h4>\n<div id=\"id4\">\n<h5>Description</h5>\n<p>The default django cache templatetag simply saves the generated html in\nthe cache. Depending of your template, if may be a lot of html and your\ncache memory will grow very quickly. Not to mention that we can have a\nlot of spaces because of indentation in templates (two ways i know to\nremove them without <tt><span class=\"pre\">django-adv-cache-tag</span></tt>: the <tt>{% spaceless %}</tt>\ntemplatetag, provided by django, and\n<a href=\"https://github.com/citylive/django-template-preprocessor/\" rel=\"nofollow\">django-template-preprocessor</a>).</p>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> can do this for you. It is able to remove\nduplicate spaces (including newlines, tabs) by replacing them by a\nsimple space (to keep the space behavior in html), and to compress the\nhtml to be cached, via the <tt>zlib</tt> (and <tt>pickle</tt>) module.</p>\n<p>Of course, this cost some time and CPU cycles, but you can save a lot of\nmemory in your cache backend, and a lot of bandwidth, especially if your\nbackend is on a distant place. I haven\u2019t done any test for this, but for\nsome templates, the saved data can be reduced from 2 ko to less than\none.</p>\n<p>To activate these feature, simply set to <tt>True</tt> one or both of the\nsettings defined below.</p>\n<p>WARNING : If the cache backend used use pickle and its default protocol,\ncompression is useless because binary is not really well handled and the\nfinal size stored in the cache will be largely bigger than the\ncompressed one. So check for this before activating this option. It\u2019s ok\nfor the default django backends (at least in 1.4), but not for\ndjango-redis-cache, waiting for my pull-request, but you can check my\nown version:\n<a href=\"https://github.com/twidi/django-redis-cache/tree/pickle_version\" rel=\"nofollow\">https://github.com/twidi/django-redis-cache/tree/pickle_version</a></p>\n</div>\n<div id=\"id5\">\n<h5>Settings</h5>\n<p><tt>ADV_CACHE_COMPRESS</tt>, default to <tt>False</tt>, to activate the\ncompression via <tt>zlib</tt></p>\n<p><tt>ADV_CACHE_COMPRESS_LEVEL</tt>, default to <tt><span class=\"pre\">-1</span></tt>, to set le compression level\nfor <tt>zlib</tt> (actually the default is <tt>zlib.Z_DEFAULT_COMPRESSION</tt>, which is\n<tt><span class=\"pre\">-1</span></tt>, that will be in fact <tt>6</tt> as the actual default defined in <tt>zlib</tt>)</p>\n<p><tt>ADV_CACHE_COMPRESS_SPACES</tt>, default to <tt>False</tt>, to activate the\nreduction of blank characters.</p>\n</div>\n<div id=\"id6\">\n<h5>Example</h5>\n<p>No example since you don\u2019t have to change anything to your templatetag\ncall to use this, just set the settings.</p>\n</div>\n</div>\n<div id=\"choose-your-cache-backend\">\n<h4>Choose your cache backend</h4>\n<div id=\"id7\">\n<h5>Description</h5>\n<p>In django, you can define many cache backends. But with the default\ncache templatetag, you cannot say which one use, it will automatically\nbe the default one.</p>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> can do this for your by providing a setting,\n<tt>ADV_CACHE_BACKEND</tt> which will take the name of a cache backend\ndefined in your settings. And by extending the provided <tt>CacheTag</tt>\nobject, you can even define many backends to be used by many\ntemplatetags, say one for heavily accessed templates, one for the\nothers\u2026 as you want. Read the <tt>Extending the default cache tag</tt> part\nto know more about this (it\u2019s easy, really, but i already told you\u2026)</p>\n</div>\n<div id=\"id8\">\n<h5>Settings</h5>\n<p><tt>ADV_CACHE_BACKEND</tt>, default to \u201cdefault\u201d</p>\n</div>\n<div id=\"id9\">\n<h5>Example</h5>\n<p>No example since, like for the compression, you don\u2019t have to change\nanything to your templatetag to use this, just set the setting.</p>\n</div>\n</div>\n<div id=\"partial-caching\">\n<h4>Partial caching</h4>\n<p>With the default django cache templatetag, your templates are cached and\nyou can\u2019t update them before display, so you can\u2019t cache big parts of\nhtml with a little dynamic fragment in it, for the user name, the\ncurrent date or whatever. You can cheat and save two templates\nsurrounding your dynamic part, but you will have more accesses to your\ncache backend.</p>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> allow the use of one or many <tt>{% nocache %}</tt>\nblocks (closed by <tt>{% endnocache %}</tt>) to put in your <tt>{% cache %}</tt>\nblocks. These <tt>{% nocache %}</tt> block will be saved \u201cas is\u201d in the\ncache, while the rest of the block will be rendered to html. It\u2019s only\nwhen the template is finally displayed that the no-cached parts will be\nrendered.</p>\n<p>You can have as many of these blocks you want.</p>\n<div id=\"id10\">\n<h5>Settings</h5>\n<p>There is no settings for this feature, which is automatically activated.</p>\n</div>\n<div id=\"id11\">\n<h5>Example</h5>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span><span class=\"x\">\n    &lt;p&gt;This is the cached part of the template for </span><span class=\"cp\">{{</span> <span class=\"nv\">obj</span> <span class=\"cp\">}}</span><span class=\"x\">, evaluated at </span><span class=\"cp\">{%</span> <span class=\"k\">now</span> <span class=\"s2\">\"r\"</span> <span class=\"cp\">%}</span><span class=\"x\">.&lt;/p&gt;\n    </span><span class=\"cp\">{%</span> <span class=\"k\">nocache</span> <span class=\"cp\">%}</span><span class=\"x\">\n        &lt;p&gt;This part will be evaluated each time : </span><span class=\"cp\">{%</span> <span class=\"k\">now</span> <span class=\"s2\">\"r\"</span> <span class=\"cp\">%}</span><span class=\"x\">&lt;/p&gt;\n    </span><span class=\"cp\">{%</span> <span class=\"k\">endnocache</span> <span class=\"cp\">%}</span><span class=\"x\">\n    &lt;p&gt;This is another cached part&lt;/p&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcache</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n</div>\n<div id=\"the-fragment-name\">\n<h4>The fragment name</h4>\n<div id=\"id12\">\n<h5>Description</h5>\n<p>The fragment name is the name to use as a base to create the cache key, and is defined just\nafter the expiry time.</p>\n<p>The Django documentation states <tt>The name will be taken as is, do not use a variable</tt>.</p>\n<p>In <tt><span class=\"pre\">django-adv-cache-tag</span></tt>, by setting <tt>ADV_CACHE_RESOLVE_NAME</tt> to <tt>True</tt>, a fragment name\nthat is not quoted will be resolved as a variable that should be in the context.</p>\n</div>\n<div id=\"id13\">\n<h5>Settings</h5>\n<p><tt>ADV_CACHE_RESOLVE_NAME</tt>, default to <tt>False</tt></p>\n</div>\n<div id=\"id14\">\n<h5>Example</h5>\n<p>With <tt>ADV_CACHE_RESOLVE_NAME</tt> set to <tt>True</tt>, you can do this if you have a variable named\n<tt>fragment_name</tt> in your context:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"nv\">fragment_name</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span>\n</pre>\n<p>And if you want to pass a name, you have to surround it by quotes:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"s2\">\"myobj_main_template\"</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span>\n</pre>\n<p>With <tt>ADV_CACHE_RESOLVE_NAME</tt> set to <tt>False</tt>, the default, the name is always seen as a string,\nbut if surrounded by quotes, they are removed.</p>\n<p>In the following example, you see double-quotes, but it would be the same with single quotes, or\nno quotes at all:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"s2\">\"myobj_main_template\"</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"extending-the-default-cache-tag\">\n<h3>Extending the default cache tag</h3>\n<p>If the five settings explained in the previous sections are not enough\nfor you, or if you want to have a templatetag with a different behavior\nas the default provided ones, you will be happy to know that\n<tt><span class=\"pre\">django-adv-cache-tag</span></tt> was written with easily extending in mind.</p>\n<p>It provides a class, <tt>CacheTag</tt> (in <tt>adv_cache_tag.tag</tt>), which has\na lot of short and simple methods, and even a <tt>Meta</tt> class (idea\nstolen from the django models :D ). So it\u2019s easy to override a simple\npart.</p>\n<p>All options defined in the <tt>Meta</tt> class are accessible in the class\nvia <tt>self.options.some_field</tt></p>\n<p>Below we will show many ways of extending this class.</p>\n<div id=\"basic-override\">\n<h4>Basic override</h4>\n<p>Imagine you don\u2019t want to change the default settings (all to <tt>False</tt>,\nand using the <tt>default</tt> backend) but want a templatetag with\nversioning activated :</p>\n<p>Create a new templatetag file (<tt>myapp/templatetags/my_cache_tags.py</tt>)\nwith this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adv_cache_tag.tag</span> <span class=\"kn\">import</span> <span class=\"n\">CacheTag</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">VersionedCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">versioning</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n<span class=\"n\">VersionedCacheTag</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">register</span><span class=\"p\">,</span> <span class=\"s1\">'ver_cache'</span><span class=\"p\">)</span>\n</pre>\n<p>With these simple lines, you now have a new templatetag to use when you\nwant versioning:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">my_cache_tags</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">ver_cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span><span class=\"x\">\n    obj\n</span><span class=\"cp\">{%</span> <span class=\"k\">endver_cache</span> <span class=\"cp\">%}</span>\n</pre>\n<p>As you see, just replace <tt>{% load adv_cache %}</tt> (or the django default\n<tt>{% load cache %}</tt>) by <tt>{% load my_cache_tags %}</tt> (your templatetag\nmodule), and the <tt>{% cache %}</tt> templatetag by your new defined one,\n<tt>{% ver_cache ... %}</tt>. Don\u2019t forget to replace the closing tag too:\n<tt>{% endver_cache %}</tt>. But the <tt>{% nocache %}</tt> will stay the same,\nexcept if you want a new one. For this, just add a parameter to the\n<tt>register</tt> method:</p>\n<pre><span class=\"n\">MyCacheTag</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">register</span><span class=\"p\">,</span> <span class=\"s1\">'ver_cache'</span><span class=\"p\">,</span> <span class=\"s1\">'ver_nocache'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">ver_cache</span> <span class=\"p\">...</span> <span class=\"cp\">%}</span><span class=\"x\">\n    cached\n    </span><span class=\"cp\">{%</span> <span class=\"k\">ver_nocache</span> <span class=\"cp\">%}</span><span class=\"x\">not cached</span><span class=\"cp\">{%</span> <span class=\"k\">endver_nocache</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">endver_cache</span> <span class=\"cp\">%}</span>\n</pre>\n<p>Note that you can keep the name <tt>cache</tt> for your tag if you know that\nyou will not load in your template another templatetag module providing\na <tt>cache</tt> tag. To do so, the simplest way is:</p>\n<pre><span class=\"n\">MyCacheTag</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">register</span><span class=\"p\">)</span>  <span class=\"c1\"># 'cache' and 'nocache' are the default values</span>\n</pre>\n<p>All the <tt><span class=\"pre\">django-adv-cache-tag</span></tt> settings have a matching variable in\nthe <tt>Meta</tt> class, so you can override one or many of them in your own\nclasses. See the \u201cSettings\u201d part to see them.</p>\n</div>\n<div id=\"internal-version\">\n<h4>Internal version</h4>\n<p>When your template file is updated, the only way to invalidate all\ncached versions of this template is to update the fragment name or the\narguments passed to the templatetag.</p>\n<p>With <tt><span class=\"pre\">django-adv-cache-tag</span></tt> you can do this with versioning, by\nmanaging your own version as the last argument to the templatetag. But\nif you want to use the power of the versioning system of\n<tt><span class=\"pre\">django-adv-cache-tag</span></tt>, it can be too verbose:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">adv_cache</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">with</span> <span class=\"nv\">template_version</span><span class=\"o\">=</span><span class=\"nv\">obj.date_last_updated</span><span class=\"o\">|</span><span class=\"nf\">stringformat</span><span class=\"s2\">:\"s\"</span><span class=\"o\">|</span><span class=\"nf\">add</span><span class=\"s2\">:\"v1\"</span> <span class=\"cp\">%}</span><span class=\"x\">\n    </span><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">template_version</span> <span class=\"cp\">%}</span><span class=\"x\">\n    ...\n    </span><span class=\"cp\">{%</span> <span class=\"k\">endcache</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">endwith</span> <span class=\"cp\">%}</span>\n</pre>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> provides a way to do this easily, with the\n<tt>ADV_CACHE_VERSION</tt> setting. But by updating it, <strong>all</strong> cached\nversions will be invalidated, not only those you updated.</p>\n<p>To do this, simply create your own tag with a specific internal version:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n       <span class=\"n\">internal_version</span> <span class=\"o\">=</span> <span class=\"s2\">\"v1\"</span>\n\n<span class=\"n\">MyCacheTag</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'my_cache'</span><span class=\"p\">)</span>\n</pre>\n<p>And then in your template, you can simply do</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">my_cache_tags</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">my_cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span><span class=\"x\">\n...\n</span><span class=\"cp\">{%</span> <span class=\"k\">endmy_cache</span> <span class=\"cp\">%}</span>\n</pre>\n<p>Each time you update the content of your template and want invalidation,\nsimply change the <tt>internal_version</tt> in your <tt>MyCacheTag</tt> class (or\nyou can use a settings for this).</p>\n</div>\n<div id=\"change-the-cache-backend\">\n<h4>Change the cache backend</h4>\n<p>If you want to change the cache backend for one templatetag, it\u2019s easy:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">cache_backend</span> <span class=\"o\">=</span> <span class=\"s1\">'templates'</span>\n</pre>\n<p>But you can also to this by overriding a method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.cache</span> <span class=\"kn\">import</span> <span class=\"n\">get_cache</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_cache_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_cache</span><span class=\"p\">(</span><span class=\"s1\">'templates'</span><span class=\"p\">)</span>\n</pre>\n<p>And if you want a cache backend for old objects, and another, faster,\nfor recent ones:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.cache</span> <span class=\"kn\">import</span> <span class=\"n\">get_cache</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">cache_backend</span> <span class=\"o\">=</span> <span class=\"s1\">'fast_templates'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_cache_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">cache_backend</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">cache_backend</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_pk</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">:</span>\n            <span class=\"n\">cache_backend</span> <span class=\"o\">=</span> <span class=\"s1\">'slow_templates'</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_cache</span><span class=\"p\">(</span><span class=\"n\">cache_backend</span><span class=\"p\">)</span>\n</pre>\n<p>The value returned by the <tt>get_cache_object</tt> should be a cache backend\nobject, but as we only use the <tt>set</tt> and <tt>get</tt> methods on this\nobject, it can be what you want if it provides these two methods. And\neven more, you can override the <tt>cache_set</tt> and <tt>cache_get</tt> methods\nof the <tt>CacheTag</tt> class if you don\u2019t want to use the default <tt>set</tt>\nand <tt>get</tt> methods of the cache backend object.</p>\n<p>Note that we also support the django way of changing the cache backend in the template-tag, using\nthe <tt>using</tt> argument, to be set at the last parameter (without any space between <cite>using</cite> and the\nname of the cache backend).</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"nv\">using</span><span class=\"o\">=</span><span class=\"nv\">foo</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"change-the-cache-key\">\n<h4>Change the cache key</h4>\n<p>The <tt>CacheTag</tt> class provides three classes to create the cache key:</p>\n<ul>\n<li><tt>get_base_cache_key</tt>, which returns a formatable string\n(\u201ctemplate.%(nodename)s.%(name)s.%(pk)s.%(hash)s\u201d by default if\n<tt>include_pk</tt> is <tt>True</tt> or\n\u201ctemplate.%(nodename)s.%(name)s.%(hash)s\u201d if <tt>False</tt></li>\n<li><tt>get_cache_key_args</tt>, which returns the arguments to use in the\nprevious string</li>\n<li><tt>get_cache_key</tt>, which combine the two</li>\n</ul>\n<p>The arguments are:</p>\n<ul>\n<li><tt>nodename</tt> parameter is the name of the <tt>templatetag</tt>: it\u2019s\n\u201cmy_cache\u201d in <tt>{% my_cache ... %}</tt></li>\n<li><tt>name</tt> is the \u201cfragment name\u201d of your templatetag, the value after\nthe expire-time</li>\n<li><tt>pk</tt> is used only if <tt>self.options.include_pk</tt> is <tt>True</tt>, and\nis returned by <tt>this.get_pk()</tt></li>\n<li><tt>hash</tt> is the hash of all arguments after the fragment name,\nexcluding the last one which is the version number (this exclusion\noccurs only if <tt>self.options.versioning</tt> is <tt>True</tt>)</li>\n</ul>\n<p>If you want to remove the \u201ctemplate.\u201d part at the start of the cache key\n(useless if you have a cache backend dedicated to template caching), you\ncan do this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_base_cache_key</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyCacheTag</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_base_cache_key</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">cache_key</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s1\">'template:'</span><span class=\"p\">):]</span>  <span class=\"c1\"># or [9:]</span>\n</pre>\n</div>\n<div id=\"add-an-argument-to-the-templatetag\">\n<h4>Add an argument to the templatetag</h4>\n<p>By default, the templatetag provided by <tt>CacheTag</tt> takes the same\narguments as the default django cache templatetag.</p>\n<p>If you want to add an argument, it\u2019s easy as the class provides a\n<tt>get_template_node_arguments</tt> method, which will work as for normal\ndjango templatetags, taking a list of tokens, and returning ones that\nwill be passed to the real templatetag, a <tt>Node</tt> class tied to the\n<tt>CacheTag</tt>.</p>\n<p>Say you want to add a <tt>foo</tt> argument between the expire time and the\nfragment name:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">adv_cache_tag.tag</span> <span class=\"kn\">import</span> <span class=\"n\">CacheTag</span><span class=\"p\">,</span> <span class=\"n\">Node</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyNode</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodename</span><span class=\"p\">,</span> <span class=\"n\">nodelist</span><span class=\"p\">,</span> <span class=\"n\">expire_time</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">fragment_name</span><span class=\"p\">,</span> <span class=\"n\">vary_on</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Save the foo variable in the node (not resolved yet) \"\"\"</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyNode</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodename</span><span class=\"p\">,</span> <span class=\"n\">nodelist</span><span class=\"p\">,</span> <span class=\"n\">expire_time</span><span class=\"p\">,</span> <span class=\"n\">fragment_name</span><span class=\"p\">,</span> <span class=\"n\">vary_on</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n\n    <span class=\"n\">Node</span> <span class=\"o\">=</span> <span class=\"n\">MyNode</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">prepare_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Resolve the foo variable to it's real content \"\"\"</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyCacheTag</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">prepare_params</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_template_node_arguments</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">tokens</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Check validity of tokens and return them as ready to be passed to the Node class \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"'</span><span class=\"si\">%r</span><span class=\"s2\">' tag requires at least 3 arguments.\"</span> <span class=\"o\">%</span> <span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:])</span>\n</pre>\n</div>\n<div id=\"prepare-caching-of-templates\">\n<h4>Prepare caching of templates</h4>\n<p>This one is not about overriding the class, but it can be useful. When\nan object is updated, it can be better to regenerate the cached template\nat this moment rather than when we need to display it.</p>\n<p>It\u2019s easy. You can do this by catching the <tt>post_save</tt> signal of your\nmodel, or just by overriding its <tt>save</tt> method. For this example we\nwill use this last solution.</p>\n<p>The only special thing is to know the path of the template where your\ntemplatetag is. In my case, i have a template just for this (included in\nother ones for general use), so it\u2019s easier to find it and regenerate it\nas in this example.</p>\n<p>As we are not in a request, we don\u2019t have the <tt>Request</tt> object here,\nso context processors are not working, we must create a context object\nthat will be used to render the template, with all needed variables.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"n\">Context</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># your fields</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s1\">'path/to/my_template_file_with_my_cache_block.html'</span>\n\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">({</span>\n            <span class=\"s1\">'obj'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># as you have no request, we have to add stuff from context processors manually if we need them</span>\n            <span class=\"s1\">'STATIC_URL'</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">STATIC_URL</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># the line below indicates that we force regenerating the cache, even if it exists</span>\n            <span class=\"s1\">'__regenerate__'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># the line below indicates if we only want html, without parsing the nocache parts</span>\n            <span class=\"s1\">'__partial__'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n        <span class=\"p\">})</span>\n\n        <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"load-data-from-database-before-rendering\">\n<h4>Load data from database before rendering</h4>\n<p>This is a special case. Say you want to display a list of objects but\nyou have only ids and versions retrieved from redis (with <tt>ZSET</tt>, with\nid as value and updated date (which is used as a version) as score , for\nexample)</p>\n<p>If you know you always have a valid version of your template in cache,\nbecause they are regenerated every time they are saved, as seen above,\nit\u2019s fine, just add the object\u2019s primary key as the <tt>pk</tt> in your\ntemplatetag arguments, and the cached template will be loaded.</p>\n<p>But if it\u2019s not the case, you will have a problem: when django will\nrender the template, the only part of the object present in the context\nis the primary key, so if you need the name or whatever field to render\nthe cached template, it won\u2019t work.</p>\n<p>With <tt><span class=\"pre\">django-adv-cache-tag</span></tt> it\u2019s easy to resolve this, as we can load\nthe object from the database and adding it to the context.</p>\n<div id=\"view\">\n<h5>View</h5>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"n\">date_last_updated</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span>\n            <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"n\">zrevrange</span><span class=\"p\">(</span><span class=\"s1\">'my_objects'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"n\">withscores</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">\"my_results.html\"</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"n\">objects</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"template-my-results-html\">\n<h5>Template \u201cmy_results.html\u201d</h5>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">obj</span> <span class=\"k\">in</span> <span class=\"nv\">objects</span> <span class=\"cp\">%}</span><span class=\"x\">\n    </span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">\"my_result.html\"</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"template-my-result-html\">\n<h5>Template \u201cmy_result.html\u201d</h5>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">my_cache_tags</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">my_cache</span> <span class=\"m\">0</span> <span class=\"nv\">myobj_main_template</span> <span class=\"nv\">obj.pk</span> <span class=\"nv\">obj.date_last_updated</span> <span class=\"cp\">%}</span><span class=\"x\">\n    </span><span class=\"cp\">{{</span> <span class=\"nv\">obj</span> <span class=\"cp\">}}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">endmy_cache</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"templatetag\">\n<h5>Templatetag</h5>\n<p>In <tt>myapp/templatetags/my_cache_tags</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCacheTag</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">CacheTag</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Force options \"\"\"</span>\n        <span class=\"n\">include_pk</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">versioning</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" If the object in context is not a real model, load it from db \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'obj'</span><span class=\"p\">],</span> <span class=\"n\">MyObject</span><span class=\"p\">):</span>\n            <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'obj'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_pk</span><span class=\"p\">())</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyCacheTag</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create_content</span><span class=\"p\">()</span>\n\n<span class=\"n\">MyCacheTag</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'my_cache'</span><span class=\"p\">)</span>\n</pre>\n<p>Careful with this, it generates as database requests as objects to be\nloaded.</p>\n</div>\n</div>\n<div id=\"and-more\">\n<h4>And more\u2026</h4>\n<p>If you want to do more, feel free to look at the source code of the\n<tt>CacheTag</tt> class (in <tt>tag.py</tt>), all methods are documented.</p>\n</div>\n</div>\n<div id=\"id15\">\n<h3>Settings</h3>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> provide 5 settings you can change. Here is the\nlist, with descriptions, default values, and corresponding fields in the\n<tt>Meta</tt> class (accessible via <tt>self.options.some_field</tt> in the\n<tt>CacheTag</tt> object)</p>\n<ul>\n<li><tt>ADV_CACHE_VERSIONING</tt> to activate versioning, default to <tt>False</tt>\n(<tt>versioning</tt> in the <tt>Meta</tt> class)</li>\n<li><tt>ADV_CACHE_COMPRESS</tt> to activate compression, default to <tt>False</tt>\n(<tt>compress</tt> in the <tt>Meta</tt> class)</li>\n<li><tt>ADV_CACHE_COMPRESS_LEVEL</tt> to set the compression level (from <tt>1</tt> (min\ncompression) to <tt>9</tt> (max compression), default to <tt><span class=\"pre\">-1</span></tt> (equivalent to\n<tt>6</tt>) (<tt>compress_level</tt> in the <tt>Meta</tt> class)</li>\n<li><tt>ADV_CACHE_COMPRESS_SPACES</tt> to activate spaces compression, default\nto <tt>False</tt> (<tt>compress_spaces</tt> in the <tt>Meta</tt> class)</li>\n<li><tt>ADV_CACHE_INCLUDE_PK</tt> to activate the \u201cprimary key\u201d feature,\ndefault to <tt>False</tt> (<tt>include_pk</tt> in the <tt>Meta</tt> class)</li>\n<li><tt>ADV_CACHE_BACKEND</tt> to choose the cache backend to use, default to\n<tt>\"default\"</tt> (<tt>cache_backend</tt> in the <tt>Meta</tt> class)</li>\n<li><tt>ADV_CACHE_VERSION</tt> to create your own internal version (will be\nconcatenated to the real internal version of\n<tt><span class=\"pre\">django-adv-cache-tag</span></tt>), default to <tt>\"\"</tt> (<tt>internal_version</tt> in\nthe <tt>Meta</tt> class)</li>\n</ul>\n</div>\n<div id=\"how-it-works\">\n<h3>How it works</h3>\n<p>Here is a quick overview on how things work in <tt><span class=\"pre\">django-adv-cache-tag</span></tt></p>\n<div id=\"id16\">\n<h4>Partial caching</h4>\n<p>Your template :</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">adv_cache</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">cache</span> <span class=\"p\">...</span> <span class=\"cp\">%}</span><span class=\"x\">\n    foo\n    </span><span class=\"cp\">{%</span> <span class=\"k\">nocache</span> <span class=\"cp\">%}</span><span class=\"x\">\n        bar\n    </span><span class=\"cp\">{%</span> <span class=\"k\">endnocache</span> <span class=\"cp\">%}</span><span class=\"x\">\n    baz\n</span><span class=\"cp\">{%</span> <span class=\"k\">endcache</span> <span class=\"cp\">%}</span>\n</pre>\n<p>Cached version (we ignore versioning and compress here, just to see how\nit works):</p>\n<pre><span class=\"x\">foo\n</span><span class=\"cp\">{%</span> <span class=\"k\">endRAW_xyz</span> <span class=\"cp\">%}</span><span class=\"x\">\n    bar\n</span><span class=\"cp\">{%</span> <span class=\"k\">RAW_xyz</span> <span class=\"cp\">%}</span><span class=\"x\">\nbaz</span>\n</pre>\n<p>When cached version is loaded, we parse :</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">RAW_xyz</span> <span class=\"cp\">%}</span><span class=\"x\">\nfoo\n</span><span class=\"cp\">{%</span> <span class=\"k\">endRAW_xyz</span> <span class=\"cp\">%}</span><span class=\"x\">\n    bar\n</span><span class=\"cp\">{%</span> <span class=\"k\">RAW_xyz</span> <span class=\"cp\">%}</span><span class=\"x\">\nbaz\n</span><span class=\"cp\">{%</span> <span class=\"k\">endRAW_xyz</span> <span class=\"cp\">%}</span>\n</pre>\n<p>The first <tt>{% RAW_xyz %}</tt> and the last <tt>{% endRAW_xyz %}</tt> are not\nincluded in the cached version and added before parsing, only to save\nsome bytes.</p>\n<p>Parts between <tt>{% RAW_xyz %}</tt> and <tt>{% endRAW_xyz %}</tt> are not parsed\nat all (seen as a <tt>TextNode</tt> by django)</p>\n<p>The <tt>xyz</tt> part of the <tt>RAW</tt> and <tt>endRAW</tt> templatetags depends on\nthe <tt>SECRET_KEY</tt> and so is unique for a given site.</p>\n<p>It allows to avoid at max the possible collisions with parsed content in\nthe cached version.</p>\n<p>We could have used <tt>{% nocache %}</tt> and <tt>{% endnocache %}</tt> instead of\n<tt>{% RAW_xyz %}</tt> and <tt>{% endRAW_xyz %}</tt> but in the parsed template,\nstored in the cache, if the html includes one of these strings, our\nfinal template would be broken, so we use long ones with a hash (but we\ncan not be sure at 100% these strings could not be in the cached html,\nbut for common usages it should suffice)</p>\n</div>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p><tt><span class=\"pre\">django-adv-cache-tag</span></tt> is published under the MIT License (see the\nLICENSE file)</p>\n</div>\n<div id=\"running-tests\">\n<h3>Running tests</h3>\n<p>If <tt>adv_cache_tag</tt> is in the <tt>INSTALLED_APPS</tt> of your project, simply\nrun:</p>\n<pre>django-admin test adv_cache_tag\n</pre>\n<p>(you may want to use <tt><span class=\"pre\">django-admin</span></tt> or <tt>./manage.py</tt> depending on\nyour installation)</p>\n<p>If you are in a fresh virtualenv to work on <tt>adv_cache_tag</tt>, install\nthe django version you want:</p>\n<pre>pip install django\n</pre>\n<p>Then make the <tt>adv_cache_tag</tt> module available in your python path.\nFor example, with <tt><span class=\"pre\">virtualenv-wrapper</span></tt>, considering you are at the\nroot of the <tt><span class=\"pre\">django-adv-cache-tag</span></tt> repository, simply do:</p>\n<pre>add2virtualenv .\n</pre>\n<p>Or simply:</p>\n<pre>pip install -e .\n</pre>\n<p>Then to run the tests, this library provides a test project, so you can\nlaunch them this way:</p>\n<pre>DJANGO_SETTINGS_MODULE=adv_cache_tag.tests.testproject.settings django-admin.py test adv_cache_tag\n</pre>\n<p>Or simply launch the <tt>runtests.sh</tt> script (it will run this exact\ncommand):</p>\n<pre>./runtests.sh\n</pre>\n</div>\n<div id=\"supported-versions\">\n<h3>Supported versions</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Django version</th>\n<th>Python version</th>\n<th>Library version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1.7 to 1.11</td>\n<td>2.7</td>\n<td>0.4</td>\n</tr>\n<tr><td>1.7</td>\n<td>3.4</td>\n<td>1.1.3</td>\n</tr>\n<tr><td>1.8 to 1.10</td>\n<td>3.4, 3.5</td>\n<td>1.1.3</td>\n</tr>\n<tr><td>1.11</td>\n<td>3.4 to 3.6</td>\n<td>1.1.3</td>\n</tr>\n<tr><td>2.0</td>\n<td>3.4, to 3.7</td>\n<td>1.1.3</td>\n</tr>\n<tr><td>2.1</td>\n<td>3.5 to 3.7</td>\n<td>1.1.3</td>\n</tr>\n<tr><td>2.2</td>\n<td>3.5 to 3.8</td>\n<td>1.1.3</td>\n</tr>\n<tr><td>3.0</td>\n<td>3.6 to 3.8</td>\n<td>1.1.3</td>\n</tr>\n</tbody>\n</table>\n<p>Support for Python 2 is dropped since version 1 of <tt><span class=\"pre\">django-adv-cache-tag</span></tt></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7150735, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b696d92839b3fdd4829644d1bf5cb144", "sha256": "c680b52a42b179d61ce8d38f5e06c0853cbae6ceb1006bca8f1d6b46fbb5b61d"}, "downloads": -1, "filename": "django-adv-cache-tag-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b696d92839b3fdd4829644d1bf5cb144", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17527, "upload_time": "2012-01-16T00:20:38", "upload_time_iso_8601": "2012-01-16T00:20:38.892912Z", "url": "https://files.pythonhosted.org/packages/9b/63/3c9ed2b9cab8fce9596a749b032958f17d453df99e91bc0b998cf334c4a0/django-adv-cache-tag-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4a3c69e6db492cb1d436617be24b87a5", "sha256": "4a4ddf61e5dbe2da7b072692d79901cf4c15122e4205122a9636ba14f306749c"}, "downloads": -1, "filename": "django-adv-cache-tag-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4a3c69e6db492cb1d436617be24b87a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18513, "upload_time": "2012-01-16T10:29:04", "upload_time_iso_8601": "2012-01-16T10:29:04.107596Z", "url": "https://files.pythonhosted.org/packages/c9/b9/58f6d66442cf5a71da8465491703e4833da8b5dcb27dd5bb0f06c6176797/django-adv-cache-tag-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "35b734bb47f437ad699fd19f46459926", "sha256": "249a5abe8e5b5f55593945fd751b76614326610fe1cfb13c82a638f34b1db746"}, "downloads": -1, "filename": "django-adv-cache-tag-0.1.2.tar.gz", "has_sig": false, "md5_digest": "35b734bb47f437ad699fd19f46459926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32410, "upload_time": "2013-09-06T20:37:55", "upload_time_iso_8601": "2013-09-06T20:37:55.821971Z", "url": "https://files.pythonhosted.org/packages/98/10/f06272c5c4d5da8486d2631c147978cac009c8aa3a9f3453fb6b45a4352e/django-adv-cache-tag-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "90e22152a886bc9696efef37e747b14e", "sha256": "97a6f9118da0af9e864033c8de4175c8ecb01565d02dfeaf79e7e9ef18eb4661"}, "downloads": -1, "filename": "django-adv-cache-tag-0.1.3.tar.gz", "has_sig": false, "md5_digest": "90e22152a886bc9696efef37e747b14e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25520, "upload_time": "2014-05-11T20:04:16", "upload_time_iso_8601": "2014-05-11T20:04:16.442701Z", "url": "https://files.pythonhosted.org/packages/1e/37/1750ab5fb0995338468f016dd2e209d84692dd2f62d4f182c35a2d115237/django-adv-cache-tag-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "307b2f9777e940c5741176eba01f00a6", "sha256": "6470793d3c51d9fe9d0197c274108c84b3e45cb85cb53049821291a8fec8af64"}, "downloads": -1, "filename": "django_adv_cache_tag-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "307b2f9777e940c5741176eba01f00a6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 38859, "upload_time": "2015-10-29T15:11:21", "upload_time_iso_8601": "2015-10-29T15:11:21.635671Z", "url": "https://files.pythonhosted.org/packages/fd/cd/61d738c49ab6b60910e6d7308a9f371ea1ee9ab6e14da714e781cc81ff22/django_adv_cache_tag-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41458141b39ab3c25778252358e361ec", "sha256": "576ca11104dca20c670cf8e89a89a9be4e075c4a092e114e183d8e9b42e830f1"}, "downloads": -1, "filename": "django-adv-cache-tag-0.2.0.tar.gz", "has_sig": false, "md5_digest": "41458141b39ab3c25778252358e361ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40713, "upload_time": "2015-10-29T15:11:16", "upload_time_iso_8601": "2015-10-29T15:11:16.125636Z", "url": "https://files.pythonhosted.org/packages/11/65/ce076c790a37cc5c14a42a67d0639eec57cdbe575f8f6509cf3dfea91925/django-adv-cache-tag-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b48375b39c9c3c733332576f4a93f1b3", "sha256": "b8aa6b2b57aa2d43b3df3a6671e378fc126e52b84e3e14e1b1d2d5884285aee1"}, "downloads": -1, "filename": "django_adv_cache_tag-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b48375b39c9c3c733332576f4a93f1b3", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 39049, "upload_time": "2015-10-29T17:50:30", "upload_time_iso_8601": "2015-10-29T17:50:30.599062Z", "url": "https://files.pythonhosted.org/packages/62/cf/3dc16cccbf9305245c39de4fee2507b394816bd5abae8657dce4f2c8a337/django_adv_cache_tag-0.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ae56694a07226dc10b931f3d3e0b736", "sha256": "b50d82551f3cc2707d11f2c8ecf1e012db1396e5ffedc516cdf3d3f603191902"}, "downloads": -1, "filename": "django-adv-cache-tag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3ae56694a07226dc10b931f3d3e0b736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41068, "upload_time": "2015-10-29T17:49:54", "upload_time_iso_8601": "2015-10-29T17:49:54.144095Z", "url": "https://files.pythonhosted.org/packages/2f/3a/0724282e14d271ae1b72db6bf73cbfeea8ae810478eb981c750ea6d4758e/django-adv-cache-tag-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e642b77e09a22892d81f316f88cf1b0a", "sha256": "d2ba5697aaee47ce54583e91c8a72db076de877da281325b7015998e30595967"}, "downloads": -1, "filename": "django_adv_cache_tag-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "e642b77e09a22892d81f316f88cf1b0a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 39465, "upload_time": "2015-12-14T16:12:31", "upload_time_iso_8601": "2015-12-14T16:12:31.449856Z", "url": "https://files.pythonhosted.org/packages/ff/e4/78acb54fbf2c65f5ba574626dc617ab953dd159a5ba305128f5d149a7285/django_adv_cache_tag-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b812367b0632243473532d8e43d7cad4", "sha256": "23119a5ac4285a2f2468af33a36fc232e1df3febdfd4e17a72668ae81d33241a"}, "downloads": -1, "filename": "django-adv-cache-tag-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b812367b0632243473532d8e43d7cad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44142, "upload_time": "2015-12-14T16:12:07", "upload_time_iso_8601": "2015-12-14T16:12:07.428737Z", "url": "https://files.pythonhosted.org/packages/3b/6f/e1a6fd317d9d7cee41b9bad1f625e1a92a5022db316d11481c15a44599db/django-adv-cache-tag-0.3.0.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "8d943489b3017ae9b779165207321f49", "sha256": "96f21214feb157225394287dd25b91d6b83724c63cef3314c8720d07aa81e343"}, "downloads": -1, "filename": "django_adv_cache_tag-0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "8d943489b3017ae9b779165207321f49", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, <3", "size": 40549, "upload_time": "2018-02-01T19:16:44", "upload_time_iso_8601": "2018-02-01T19:16:44.495648Z", "url": "https://files.pythonhosted.org/packages/ea/32/c98248f8f211caa8bd1ae8d17949bb36b9c916d2c23d14adac771d78be9a/django_adv_cache_tag-0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e2f430e5fabaaa9d4c6ab247523e946", "sha256": "09a15a7f83cb6622e0798048c93f718ce4ed6b8b4acca974feb2a162e21bd227"}, "downloads": -1, "filename": "django-adv-cache-tag-0.4.tar.gz", "has_sig": false, "md5_digest": "3e2f430e5fabaaa9d4c6ab247523e946", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <3", "size": 43617, "upload_time": "2018-02-01T19:16:46", "upload_time_iso_8601": "2018-02-01T19:16:46.670757Z", "url": "https://files.pythonhosted.org/packages/9a/b4/269e27f8487ced6abba7fe203af4b5b59f3ee009880468c13253cb15c36b/django-adv-cache-tag-0.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "21be67b836b7085cfa63322dc6b804d5", "sha256": "a054968142abd40abbf0a2a406e421962729e0f9c2a3e7b56319aa74b288160f"}, "downloads": -1, "filename": "django_adv_cache_tag-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "21be67b836b7085cfa63322dc6b804d5", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 38460, "upload_time": "2015-10-29T20:04:25", "upload_time_iso_8601": "2015-10-29T20:04:25.933612Z", "url": "https://files.pythonhosted.org/packages/50/33/8e3732638b7712f784967180aa4c1430c5f4501a4693a2233e9ff1d91998/django_adv_cache_tag-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9529f50f6cf94066aed8a1cfb9ae43c1", "sha256": "eb178d9dc4408bb2c6324d14d9497e06b3d72606fc2acfc92a6cb9a723337a17"}, "downloads": -1, "filename": "django-adv-cache-tag-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9529f50f6cf94066aed8a1cfb9ae43c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41099, "upload_time": "2015-10-29T20:04:10", "upload_time_iso_8601": "2015-10-29T20:04:10.106245Z", "url": "https://files.pythonhosted.org/packages/b5/72/ec6c84beebef8ea94c8c7e97f2eca2058175250950405a3b2e7ca467f24f/django-adv-cache-tag-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "50b4e34da6402437bfdae0d96cea1654", "sha256": "5b32949c61c8e508e4d9b9c3bc3a1a2d83df71f44cf913bb23ce8b899b05f24d"}, "downloads": -1, "filename": "django_adv_cache_tag-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "50b4e34da6402437bfdae0d96cea1654", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 38743, "upload_time": "2015-12-14T16:11:16", "upload_time_iso_8601": "2015-12-14T16:11:16.370938Z", "url": "https://files.pythonhosted.org/packages/98/e3/9c8ca86cd0de7305aa63f805a5de205816b0e1e48bac32993b176af5b15b/django_adv_cache_tag-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a68f4982cf1f1993cc8590c2d03ad4b5", "sha256": "0ecf91edc266a37979e445cef83165ed52e7f955e706dc6157b641921e8f4557"}, "downloads": -1, "filename": "django-adv-cache-tag-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a68f4982cf1f1993cc8590c2d03ad4b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43537, "upload_time": "2015-12-14T16:11:00", "upload_time_iso_8601": "2015-12-14T16:11:00.568473Z", "url": "https://files.pythonhosted.org/packages/15/10/5b1c5cae0a6f974e046c9285710529a1ac748ee6b9a4033fae0ed5307093/django-adv-cache-tag-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "57a84b0bb862313568a43480e7fa2573", "sha256": "0d87bd4e01534239d23015e6db442e74c29a4391e31d715ea8b1091ba8919cc0"}, "downloads": -1, "filename": "django_adv_cache_tag-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "57a84b0bb862313568a43480e7fa2573", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 40259, "upload_time": "2018-02-01T20:36:55", "upload_time_iso_8601": "2018-02-01T20:36:55.171140Z", "url": "https://files.pythonhosted.org/packages/c8/4e/e738348a38507c155fd398fbe809d5c7f86b55dee3121fffe7e32a8ea7ea/django_adv_cache_tag-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93c69c3d2022d5a7c1fb7f1302d83f9c", "sha256": "91b2c9a5506b1e4817449df77afa2e7ae3115a41d94f0ed5cee27fde08cec186"}, "downloads": -1, "filename": "django-adv-cache-tag-1.1.1.tar.gz", "has_sig": false, "md5_digest": "93c69c3d2022d5a7c1fb7f1302d83f9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 43807, "upload_time": "2018-02-01T20:36:56", "upload_time_iso_8601": "2018-02-01T20:36:56.951053Z", "url": "https://files.pythonhosted.org/packages/35/38/f1db1a578717a72266c87f6e5a3e757b4913332cf97da7f69a54ccfd9c1f/django-adv-cache-tag-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "0b0ef238d7ffbd43ed5be2cdfd201b48", "sha256": "d4cafc7331d812df874d797f64b865c36d51758c15b878222486974f7b03beed"}, "downloads": -1, "filename": "django_adv_cache_tag-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0b0ef238d7ffbd43ed5be2cdfd201b48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 29961, "upload_time": "2018-11-27T13:24:29", "upload_time_iso_8601": "2018-11-27T13:24:29.144777Z", "url": "https://files.pythonhosted.org/packages/07/36/9be76e20833fe65ea221345c467a940a6dbb10cb483f5757821c936d8abf/django_adv_cache_tag-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d36eda1af4653c53484ef4b0bc0845b", "sha256": "faad5d994f6e454ff2b98334b5ed15063fd954c30f1331705a3fed963b0adb80"}, "downloads": -1, "filename": "django-adv-cache-tag-1.1.2.tar.gz", "has_sig": false, "md5_digest": "6d36eda1af4653c53484ef4b0bc0845b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 44107, "upload_time": "2018-11-27T13:24:31", "upload_time_iso_8601": "2018-11-27T13:24:31.287566Z", "url": "https://files.pythonhosted.org/packages/c3/a3/e2898fd5c7b98b2a8a570718f3fe3e2bdcbe11b0ff53f104e10e2e55a346/django-adv-cache-tag-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "07c313457fb2fe5ac0ef0da02c767942", "sha256": "3b2293ee8a0e83f3b0ce0d612f8576c277382e2da78871f1b404f410fb8e2cc7"}, "downloads": -1, "filename": "django_adv_cache_tag-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "07c313457fb2fe5ac0ef0da02c767942", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 30571, "upload_time": "2020-05-02T10:24:21", "upload_time_iso_8601": "2020-05-02T10:24:21.917812Z", "url": "https://files.pythonhosted.org/packages/b3/49/31c5c1435bc3355e8d774ab0799f03c9f99870fb221281462505c6150678/django_adv_cache_tag-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3eacaa3c38a90d4e875fbe41871943b6", "sha256": "3f64abd67763c16dd48dab788edd1b1d399f576c24d41caae3ffb9c33462814f"}, "downloads": -1, "filename": "django-adv-cache-tag-1.1.3.tar.gz", "has_sig": false, "md5_digest": "3eacaa3c38a90d4e875fbe41871943b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 44215, "upload_time": "2020-05-02T10:24:23", "upload_time_iso_8601": "2020-05-02T10:24:23.785625Z", "url": "https://files.pythonhosted.org/packages/b0/18/127359750783513d58f61b08d7ffe51d3b67e59ac335c55dc66e06bc1773/django-adv-cache-tag-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07c313457fb2fe5ac0ef0da02c767942", "sha256": "3b2293ee8a0e83f3b0ce0d612f8576c277382e2da78871f1b404f410fb8e2cc7"}, "downloads": -1, "filename": "django_adv_cache_tag-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "07c313457fb2fe5ac0ef0da02c767942", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 30571, "upload_time": "2020-05-02T10:24:21", "upload_time_iso_8601": "2020-05-02T10:24:21.917812Z", "url": "https://files.pythonhosted.org/packages/b3/49/31c5c1435bc3355e8d774ab0799f03c9f99870fb221281462505c6150678/django_adv_cache_tag-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3eacaa3c38a90d4e875fbe41871943b6", "sha256": "3f64abd67763c16dd48dab788edd1b1d399f576c24d41caae3ffb9c33462814f"}, "downloads": -1, "filename": "django-adv-cache-tag-1.1.3.tar.gz", "has_sig": false, "md5_digest": "3eacaa3c38a90d4e875fbe41871943b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 44215, "upload_time": "2020-05-02T10:24:23", "upload_time_iso_8601": "2020-05-02T10:24:23.785625Z", "url": "https://files.pythonhosted.org/packages/b0/18/127359750783513d58f61b08d7ffe51d3b67e59ac335c55dc66e06bc1773/django-adv-cache-tag-1.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:45 2020"}