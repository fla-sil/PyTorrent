{"info": {"author": "salpreh", "author_email": "salva.perez46@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# lxtree\n\n[![PyPI version](https://badge.fury.io/py/lxtree.svg)](https://badge.fury.io/py/lxtree)\n[![PyPI version](https://img.shields.io/github/license/salpreh/lxtree.svg)](https://img.shields.io/github/license/salpreh/lxtree.svg)\n\n**Package to draw tree structures (tree linux command style)**\n\n---\n## Basic usage\nBuild the tree structure using `TreeNode`s. A `TreeNode` can contain other `TreeNode`s\nto represent the tree. When builded you car get a string representation of it,\nor get string of a sub-tree using some child as root.\n\n### Code samples\n```py\nfrom lxtree import TreeNode\n\n\n# Creating root\nroot = TreeNode('root')\n\n# Adding a list of nodes\nroot.children = [TreeNode('branch1'), TreeNode('branch3')]\n\n# Insert node\nroot.insert_child(TreeNode('branch2'), 1)\n\n# Appending to a branch 1 by index\nroot[0].append_child(TreeNode('branch11'))\n\n# Using index to assign children to branch11\nroot[0][0] = [TreeNode('leaf111'), TreeNode('leaf112')]\n\n# Use `set_children` to add nodes as argv\nroot[1].set_children(TreeNode('leaf21'), TreeNode('leaf22'), TreeNode('leaf23'))\n\n# Print tree\nprint(root)\n```\n\n##### Creating all structure at once\n```py\nroot = TreeNode('root').set_children(\n  TreeNode('branch1').append_child(\n      TreeNode('branch11').set_children(\n          TreeNode('leaf111'),\n          TreeNode('leaf112')\n      )\n  ),\n  TreeNode('branch2').set_children(\n      TreeNode('leaf21'),\n      TreeNode('leaf22'),\n      TreeNode('leaf23')\n  ),\n  TreeNode('branch3')\n)\n\nprint(root)\n```\n##### Creating the tree from a dict\n```py\ntree_data = {\n  'root': {\n      'branch1': {\n        'branch11': {\n          'leaf111': None,\n          'leaf112': None\n        }\n      },\n      'branch2': {\n        'leaf21': None,\n        'leaf22': None,\n        'leaf23': None\n      },\n      'branch3': None\n  }\n}\n\nprint(TreeNode.tree_from_dict(tree_data))\n```\n#### Output\n<img src=\"https://raw.githubusercontent.com/salpreh/lxtree/master/assets/sample_tree.png\" alt=\"tree_output\">\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/salpreh/lxtree", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "lxtree", "package_url": "https://pypi.org/project/lxtree/", "platform": "", "project_url": "https://pypi.org/project/lxtree/", "project_urls": {"Homepage": "https://github.com/salpreh/lxtree"}, "release_url": "https://pypi.org/project/lxtree/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Package to draw tree structures (tree linux command style)", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>lxtree</h1>\n<p><a href=\"https://badge.fury.io/py/lxtree\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57de7c3997d9736f047ed9c62b6fd748bcd37a07/68747470733a2f2f62616467652e667572792e696f2f70792f6c78747265652e737667\"></a>\n<a href=\"https://img.shields.io/github/license/salpreh/lxtree.svg\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0615c5cc062f0871a4a6bc2ef4381b877c655f55/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73616c707265682f6c78747265652e737667\"></a></p>\n<p><strong>Package to draw tree structures (tree linux command style)</strong></p>\n<hr>\n<h2>Basic usage</h2>\n<p>Build the tree structure using <code>TreeNode</code>s. A <code>TreeNode</code> can contain other <code>TreeNode</code>s\nto represent the tree. When builded you car get a string representation of it,\nor get string of a sub-tree using some child as root.</p>\n<h3>Code samples</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lxtree</span> <span class=\"kn\">import</span> <span class=\"n\">TreeNode</span>\n\n\n<span class=\"c1\"># Creating root</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'root'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adding a list of nodes</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch1'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch3'</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Insert node</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">insert_child</span><span class=\"p\">(</span><span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch2'</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Appending to a branch 1 by index</span>\n<span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append_child</span><span class=\"p\">(</span><span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch11'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Using index to assign children to branch11</span>\n<span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf111'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf112'</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Use `set_children` to add nodes as argv</span>\n<span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_children</span><span class=\"p\">(</span><span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf21'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf22'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf23'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Print tree</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre>\n<h5>Creating all structure at once</h5>\n<pre><span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'root'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_children</span><span class=\"p\">(</span>\n  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">append_child</span><span class=\"p\">(</span>\n      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch11'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_children</span><span class=\"p\">(</span>\n          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf111'</span><span class=\"p\">),</span>\n          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf112'</span><span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_children</span><span class=\"p\">(</span>\n      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf21'</span><span class=\"p\">),</span>\n      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf22'</span><span class=\"p\">),</span>\n      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'leaf23'</span><span class=\"p\">)</span>\n  <span class=\"p\">),</span>\n  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s1\">'branch3'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre>\n<h5>Creating the tree from a dict</h5>\n<pre><span class=\"n\">tree_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'root'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'branch1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'branch11'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'leaf111'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n          <span class=\"s1\">'leaf112'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"s1\">'branch2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'leaf21'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'leaf22'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'leaf23'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n      <span class=\"p\">},</span>\n      <span class=\"s1\">'branch3'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">TreeNode</span><span class=\"o\">.</span><span class=\"n\">tree_from_dict</span><span class=\"p\">(</span><span class=\"n\">tree_data</span><span class=\"p\">))</span>\n</pre>\n<h4>Output</h4>\n<img alt=\"tree_output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65ba9dc4116f7d14306bcc9deefe5b7ccb517ce9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f6c78747265652f6d61737465722f6173736574732f73616d706c655f747265652e706e67\">\n\n          </div>"}, "last_serial": 5142166, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "df4d6ba8a27871b10fda636d30995c46", "sha256": "9b7f07175dc2005848220a34cfac6944a959d778eeae622b74298844840140eb"}, "downloads": -1, "filename": "lxtree-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df4d6ba8a27871b10fda636d30995c46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4629, "upload_time": "2019-04-14T22:30:01", "upload_time_iso_8601": "2019-04-14T22:30:01.801330Z", "url": "https://files.pythonhosted.org/packages/32/4f/fea3b16a689d04a482e3af0500715fcf26346f9f5052d19208add725fcc8/lxtree-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7eeadd17a3b11dfc50ebbb1cccda487", "sha256": "1fd8b781457cafecc5e6b1d772cda1ec1c89c2ea229b47b4a984c02fd5f0186b"}, "downloads": -1, "filename": "lxtree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b7eeadd17a3b11dfc50ebbb1cccda487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4287, "upload_time": "2019-04-14T22:30:04", "upload_time_iso_8601": "2019-04-14T22:30:04.037013Z", "url": "https://files.pythonhosted.org/packages/9e/ae/1a1f125c14a4b3f624def964711ed2ef5d7d8423017c13a77a2bcbbb8c17/lxtree-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df4d6ba8a27871b10fda636d30995c46", "sha256": "9b7f07175dc2005848220a34cfac6944a959d778eeae622b74298844840140eb"}, "downloads": -1, "filename": "lxtree-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df4d6ba8a27871b10fda636d30995c46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4629, "upload_time": "2019-04-14T22:30:01", "upload_time_iso_8601": "2019-04-14T22:30:01.801330Z", "url": "https://files.pythonhosted.org/packages/32/4f/fea3b16a689d04a482e3af0500715fcf26346f9f5052d19208add725fcc8/lxtree-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7eeadd17a3b11dfc50ebbb1cccda487", "sha256": "1fd8b781457cafecc5e6b1d772cda1ec1c89c2ea229b47b4a984c02fd5f0186b"}, "downloads": -1, "filename": "lxtree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b7eeadd17a3b11dfc50ebbb1cccda487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4287, "upload_time": "2019-04-14T22:30:04", "upload_time_iso_8601": "2019-04-14T22:30:04.037013Z", "url": "https://files.pythonhosted.org/packages/9e/ae/1a1f125c14a4b3f624def964711ed2ef5d7d8423017c13a77a2bcbbb8c17/lxtree-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:47 2020"}