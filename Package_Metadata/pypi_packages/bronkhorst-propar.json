{"info": {"author": "Bronkhorst", "author_email": "support@bronkhorst.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Bronkhorst Propar\nThe Bronkhorst Propar module provides an implementation of a propar master for communication with Bronkhorst (Mass) Flow Meters and Controllers (such as the EL-Flow, ES-Flow, (mini) CORI-FLOW, IQ+FLOW, and others), Pressure Meters and Controllers (EL-PRESS), and others using the default RS232/RS485 interface. \n\nUsing the Bronkhorst Propar module it is possible to directly communicate with a single instrument, or to multiple instruments when they are connected to a FLOW-BUS network. The Bronkhorst Propar module communicates directly with the instruments using Python, and does not require tools such as FlowDDE to be installed. Therefore the module is platform independent and has been tested on both Windows and Linux (the module depends on pyserial for serial communication and should work on all platforms that support it).\n\n## Parameters\nFor a list of common parameters and the associated functionality available on Bronkhorst instruments, please consult document: [9.17.023 - Operating instructions for digital instruments](https://www.bronkhorst.com/getmedia/ad6a26ef-e33f-4424-b375-21d5811e3b04/917023-Manual-operation-instructions-digital-instruments).\nFor a full list of parameters across most Bronkhorst instruments, as well as technical information about the propar protocol, please consult document: [9.17.0.27 - RS232 interface with ProPar protocol](https://www.bronkhorst.com/getmedia/77a1438f-e547-4a79-95ad-53e81fd38a97/917027-Manual-RS232-interface).\n\n## Examples\nConnecting to a single instrument.\n```python\n# Import the propar module\nimport propar\n\n# Connect to the local instrument, when no settings provided \n# defaults to locally connected instrument (address=0x80, baudrate=38400)\nel_flow = propar.instrument('COM1')\n\n# The setpoint and measure parameters are available \n# as properties, for ease of use.\nel_flow.setpoint = 16000\nprint(el_flow.measure)\nel_flow.setpoint = 0\n\n# All parameters can be read using the process and parameter numbers,\n# as well as the parameters data type. \nel_flow.read(1, 1, propar.PP_TYPE_INT16)\n\n# Most parameters can also be read by their FlowDDE number, \n# for example the user tag parameter.\nel_flow.writeParameter(115, \"Hello World!\")\nprint(el_flow.readParameter(115))\n```\n\nConnecting to multiple instruments on the FLOW-BUS using the instruments localhost functionality.\n```python\n# Import the propar module\nimport propar\n\n# Connect to an instrument, however as there are multiple instruments\n# we now supply the instrument node number to connect to a specific instrument.\nel_flow = propar.instrument('COM1', 3)\n\n# Now connect to other instruments via the same instrument localhost (same serial port)\ncori_flow = propar.instrument('COM1', 4)\nes_flow   = propar.instrument('COM1', 5)\n```\n\nIt is also possible to connect to an instrument with a different baudrate than the default of 38400 baud. Note that it is only possible to connect using the baudrate that is configured in the instrument.\n```python\n# Import the propar module\nimport propar\n\n# Connect to the local instrument, with a different baudrate than the default (38400)\nel_flow = propar.instrument('COM1', baudrate=115200)\n```\n\nTo check all connected instruments on the network, the propar modules master can be used. When creating an instrument on a specific com port, a propar master is automatically created for that comport. Using the get_nodes function of the master, a list of all nodes on the network is collected and returned. This list can be used to check if all expected instruments are connected, or to get an overview of your network.\n```python\n# Import the propar module\nimport propar\n\n# Connect to the local instrument.\nel_flow = propar.instrument('COM1')\n\n# Use the get_nodes function of the master of the instrument to get a list of instruments on the network\nnodes = el_flow.master.get_nodes()\n\n# Display the list of nodes\nfor node in nodes:\n  print(node)\n```\n\nIt is also possible to only create a master. This removes some abstraction offered by the instrument class, such as the setpoint and measure properties, the readParameter and writeParameter functions, and having to supply the node number on each read/write parameter call. \n```python\n# Import the propar module\nimport propar\n\n# Create the master\nmaster = propar.master('COM1', 38400)\n\n# Get nodes on the network\nnodes = master.get_nodes()\n\n# Read the usertag of all nodes\nfor node in nodes:\n  user_tag = master.read(node['address'], 113, 6, propar.PP_TYPE_STRING)\n  print(user_tag)\n```\n\nFinally the propar module offers the possibility of using the chaining mechanism of the propar protocol to read or write multiple parameters using a single propar message. This is advanced functionality and has some downsides, especially when it comes to error handling. As the read_parameters and write_parameters functions do not return True or False to indicate success, but instead rely on the underlying propar status codes to indicate the result of the action.\n```python\n# Import the propar module\nimport propar\n\n# Connect to the local instrument.\nel_flow = propar.instrument('COM1')\n\n# Prepare a list of parameters for a chained read containing: \n# fmeasure, fsetpoint, temperature, valve output\nparams = [{'proc_nr':  33, 'parm_nr': 0, 'parm_type': propar.PP_TYPE_FLOAT},\n          {'proc_nr':  33, 'parm_nr': 3, 'parm_type': propar.PP_TYPE_FLOAT},\n          {'proc_nr':  33, 'parm_nr': 7, 'parm_type': propar.PP_TYPE_FLOAT},\n          {'proc_nr': 114, 'parm_nr': 1, 'parm_type': propar.PP_TYPE_INT32}]\n\n# Note that this uses the read_parameters function.\nvalues = el_flow.read_parameters(params)\n\n# Display the values returned by the read_parameters function. A single 'value' includes \n# the original fields of the parameters supplied to the request, with the data stored in \n# the value['data'] field.\nfor value in values:\n  print(value)\n\n# For writes the parameter must have the 'data' field set with the value to write when\n# passing it to the write_parameters function.\nparams = [{'proc_nr': 1, 'parm_nr': 1, 'parm_type': propar.PP_TYPE_INT16, 'data': 32000}]\n\n# Write parameters returns a propar status code.\nstatus = el_flow.write_parameters(params)\n\n# Also, note that when using the master directly the address of the node must be set in the\n# parameter object that is passed to the read_parameters or write_parameters function\nparams = [{'node': 3, 'proc_nr': 1, 'parm_nr': 1, 'parm_type': propar.PP_TYPE_INT16}]\n\n# Read from the master directly\nvalues = el_flow.master.read_parameters(params)\n```\n\nTo easily generate a list of parameters for use with chaining, and the read_parameters and write_parameters functions, the propar database can be used. This component is automatically available on all instrument instances or can be instantiated separately.\n```python\n# Import the propar module\nimport propar\n\n# Create a database instance\ndb = propar.database()\n\n# or access the instruments database instance\nel_flow = propar.instrument('COM1')\ndb      = el_flow.db\n\n# Get parameter objects for chained read (read_parameters) from list of FlowDDE numbers\nparameters = db.get_parameters([8, 9, 11, 142])\n\n# Get a single parameter object\nsetpoint = db.get_parameter(8)\n\n# It is also possible to search the database, using the string name of the parameter\nvalve_parameters = db.get_parameters_like('valve')\n```\n\n## Data Types\nThe data types available in the propar module are:\n  * PP_TYPE_INT8  (unsigned char)\n  * PP_TYPE_INT16 (unsigned int)\n  * PP_TYPE_SINT16 (signed int, -32767 - 32767)\n  * PP_TYPE_BSINT16 (signed int, -23593 - 41942)\n  * PP_TYPE_INT32 (unsigned long)\n  * PP_TYPE_FLOAT (float)\n  * PP_TYPE_STRING (string)\n\nThese types are automatically converted to data types in the propar protocol, which only supports four basic data types:\n  * 1 byte value (char, unsigned char)\n  * 2 byte value (unsigned int, signed int, custom signed int)\n  * 4 byte value (float, unsigned long, long)\n  * n byte value (string, char array)\n\n When propar module data types are used, the module will perform the required conversion for the specific data type. When using the readParameter and writeParameter functions, the conversion between database parameter type to the customized parameter type is performed automatically (based on the type, and the minimal specified value). \n\n## Changelog\n* 0.3.4 - Reduced CPU load (set timeout of serial port in propar provider).\n* 0.3.3 - Fixed issue with matching requests to responses in master. Improved compatibility for get_nodes.\n* 0.3.2 - Changed debug message to only show when flag is set.\n* 0.3.1 - Compatibility improved in get_nodes function on propar master.\n* 0.3.0 - Improved propar performance, added additional dump mode.\n* 0.2.3 - Fix some errors in the project description and examples.\n* 0.2.1 - Initial public release.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bronkhorst-propar", "package_url": "https://pypi.org/project/bronkhorst-propar/", "platform": "", "project_url": "https://pypi.org/project/bronkhorst-propar/", "project_urls": null, "release_url": "https://pypi.org/project/bronkhorst-propar/0.3.4/", "requires_dist": ["pyserial"], "requires_python": "", "summary": "Communicate to Bronkhorst Instruments using the Propar protocol over RS232 or RS485.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bronkhorst Propar</h1>\n<p>The Bronkhorst Propar module provides an implementation of a propar master for communication with Bronkhorst (Mass) Flow Meters and Controllers (such as the EL-Flow, ES-Flow, (mini) CORI-FLOW, IQ+FLOW, and others), Pressure Meters and Controllers (EL-PRESS), and others using the default RS232/RS485 interface.</p>\n<p>Using the Bronkhorst Propar module it is possible to directly communicate with a single instrument, or to multiple instruments when they are connected to a FLOW-BUS network. The Bronkhorst Propar module communicates directly with the instruments using Python, and does not require tools such as FlowDDE to be installed. Therefore the module is platform independent and has been tested on both Windows and Linux (the module depends on pyserial for serial communication and should work on all platforms that support it).</p>\n<h2>Parameters</h2>\n<p>For a list of common parameters and the associated functionality available on Bronkhorst instruments, please consult document: <a href=\"https://www.bronkhorst.com/getmedia/ad6a26ef-e33f-4424-b375-21d5811e3b04/917023-Manual-operation-instructions-digital-instruments\" rel=\"nofollow\">9.17.023 - Operating instructions for digital instruments</a>.\nFor a full list of parameters across most Bronkhorst instruments, as well as technical information about the propar protocol, please consult document: <a href=\"https://www.bronkhorst.com/getmedia/77a1438f-e547-4a79-95ad-53e81fd38a97/917027-Manual-RS232-interface\" rel=\"nofollow\">9.17.0.27 - RS232 interface with ProPar protocol</a>.</p>\n<h2>Examples</h2>\n<p>Connecting to a single instrument.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Connect to the local instrument, when no settings provided </span>\n<span class=\"c1\"># defaults to locally connected instrument (address=0x80, baudrate=38400)</span>\n<span class=\"n\">el_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The setpoint and measure parameters are available </span>\n<span class=\"c1\"># as properties, for ease of use.</span>\n<span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">setpoint</span> <span class=\"o\">=</span> <span class=\"mi\">16000</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">)</span>\n<span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">setpoint</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># All parameters can be read using the process and parameter numbers,</span>\n<span class=\"c1\"># as well as the parameters data type. </span>\n<span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_INT16</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Most parameters can also be read by their FlowDDE number, </span>\n<span class=\"c1\"># for example the user tag parameter.</span>\n<span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">writeParameter</span><span class=\"p\">(</span><span class=\"mi\">115</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World!\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">readParameter</span><span class=\"p\">(</span><span class=\"mi\">115</span><span class=\"p\">))</span>\n</pre>\n<p>Connecting to multiple instruments on the FLOW-BUS using the instruments localhost functionality.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Connect to an instrument, however as there are multiple instruments</span>\n<span class=\"c1\"># we now supply the instrument node number to connect to a specific instrument.</span>\n<span class=\"n\">el_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now connect to other instruments via the same instrument localhost (same serial port)</span>\n<span class=\"n\">cori_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">es_flow</span>   <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to connect to an instrument with a different baudrate than the default of 38400 baud. Note that it is only possible to connect using the baudrate that is configured in the instrument.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Connect to the local instrument, with a different baudrate than the default (38400)</span>\n<span class=\"n\">el_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">,</span> <span class=\"n\">baudrate</span><span class=\"o\">=</span><span class=\"mi\">115200</span><span class=\"p\">)</span>\n</pre>\n<p>To check all connected instruments on the network, the propar modules master can be used. When creating an instrument on a specific com port, a propar master is automatically created for that comport. Using the get_nodes function of the master, a list of all nodes on the network is collected and returned. This list can be used to check if all expected instruments are connected, or to get an overview of your network.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Connect to the local instrument.</span>\n<span class=\"n\">el_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use the get_nodes function of the master of the instrument to get a list of instruments on the network</span>\n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">get_nodes</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Display the list of nodes</span>\n<span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to only create a master. This removes some abstraction offered by the instrument class, such as the setpoint and measure properties, the readParameter and writeParameter functions, and having to supply the node number on each read/write parameter call.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Create the master</span>\n<span class=\"n\">master</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">master</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">,</span> <span class=\"mi\">38400</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get nodes on the network</span>\n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">get_nodes</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Read the usertag of all nodes</span>\n<span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n  <span class=\"n\">user_tag</span> <span class=\"o\">=</span> <span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"s1\">'address'</span><span class=\"p\">],</span> <span class=\"mi\">113</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_STRING</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user_tag</span><span class=\"p\">)</span>\n</pre>\n<p>Finally the propar module offers the possibility of using the chaining mechanism of the propar protocol to read or write multiple parameters using a single propar message. This is advanced functionality and has some downsides, especially when it comes to error handling. As the read_parameters and write_parameters functions do not return True or False to indicate success, but instead rely on the underlying propar status codes to indicate the result of the action.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Connect to the local instrument.</span>\n<span class=\"n\">el_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prepare a list of parameters for a chained read containing: </span>\n<span class=\"c1\"># fmeasure, fsetpoint, temperature, valve output</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'proc_nr'</span><span class=\"p\">:</span>  <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"s1\">'parm_nr'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'parm_type'</span><span class=\"p\">:</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_FLOAT</span><span class=\"p\">},</span>\n          <span class=\"p\">{</span><span class=\"s1\">'proc_nr'</span><span class=\"p\">:</span>  <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"s1\">'parm_nr'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'parm_type'</span><span class=\"p\">:</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_FLOAT</span><span class=\"p\">},</span>\n          <span class=\"p\">{</span><span class=\"s1\">'proc_nr'</span><span class=\"p\">:</span>  <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"s1\">'parm_nr'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'parm_type'</span><span class=\"p\">:</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_FLOAT</span><span class=\"p\">},</span>\n          <span class=\"p\">{</span><span class=\"s1\">'proc_nr'</span><span class=\"p\">:</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"s1\">'parm_nr'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'parm_type'</span><span class=\"p\">:</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_INT32</span><span class=\"p\">}]</span>\n\n<span class=\"c1\"># Note that this uses the read_parameters function.</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">read_parameters</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Display the values returned by the read_parameters function. A single 'value' includes </span>\n<span class=\"c1\"># the original fields of the parameters supplied to the request, with the data stored in </span>\n<span class=\"c1\"># the value['data'] field.</span>\n<span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For writes the parameter must have the 'data' field set with the value to write when</span>\n<span class=\"c1\"># passing it to the write_parameters function.</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'proc_nr'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'parm_nr'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'parm_type'</span><span class=\"p\">:</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_INT16</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"mi\">32000</span><span class=\"p\">}]</span>\n\n<span class=\"c1\"># Write parameters returns a propar status code.</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">write_parameters</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Also, note that when using the master directly the address of the node must be set in the</span>\n<span class=\"c1\"># parameter object that is passed to the read_parameters or write_parameters function</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'node'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'proc_nr'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'parm_nr'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'parm_type'</span><span class=\"p\">:</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">PP_TYPE_INT16</span><span class=\"p\">}]</span>\n\n<span class=\"c1\"># Read from the master directly</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">read_parameters</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<p>To easily generate a list of parameters for use with chaining, and the read_parameters and write_parameters functions, the propar database can be used. This component is automatically available on all instrument instances or can be instantiated separately.</p>\n<pre><span class=\"c1\"># Import the propar module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">propar</span>\n\n<span class=\"c1\"># Create a database instance</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or access the instruments database instance</span>\n<span class=\"n\">el_flow</span> <span class=\"o\">=</span> <span class=\"n\">propar</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">(</span><span class=\"s1\">'COM1'</span><span class=\"p\">)</span>\n<span class=\"n\">db</span>      <span class=\"o\">=</span> <span class=\"n\">el_flow</span><span class=\"o\">.</span><span class=\"n\">db</span>\n\n<span class=\"c1\"># Get parameter objects for chained read (read_parameters) from list of FlowDDE numbers</span>\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_parameters</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">142</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Get a single parameter object</span>\n<span class=\"n\">setpoint</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_parameter</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># It is also possible to search the database, using the string name of the parameter</span>\n<span class=\"n\">valve_parameters</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_parameters_like</span><span class=\"p\">(</span><span class=\"s1\">'valve'</span><span class=\"p\">)</span>\n</pre>\n<h2>Data Types</h2>\n<p>The data types available in the propar module are:</p>\n<ul>\n<li>PP_TYPE_INT8  (unsigned char)</li>\n<li>PP_TYPE_INT16 (unsigned int)</li>\n<li>PP_TYPE_SINT16 (signed int, -32767 - 32767)</li>\n<li>PP_TYPE_BSINT16 (signed int, -23593 - 41942)</li>\n<li>PP_TYPE_INT32 (unsigned long)</li>\n<li>PP_TYPE_FLOAT (float)</li>\n<li>PP_TYPE_STRING (string)</li>\n</ul>\n<p>These types are automatically converted to data types in the propar protocol, which only supports four basic data types:</p>\n<ul>\n<li>1 byte value (char, unsigned char)</li>\n<li>2 byte value (unsigned int, signed int, custom signed int)</li>\n<li>4 byte value (float, unsigned long, long)</li>\n<li>n byte value (string, char array)</li>\n</ul>\n<p>When propar module data types are used, the module will perform the required conversion for the specific data type. When using the readParameter and writeParameter functions, the conversion between database parameter type to the customized parameter type is performed automatically (based on the type, and the minimal specified value).</p>\n<h2>Changelog</h2>\n<ul>\n<li>0.3.4 - Reduced CPU load (set timeout of serial port in propar provider).</li>\n<li>0.3.3 - Fixed issue with matching requests to responses in master. Improved compatibility for get_nodes.</li>\n<li>0.3.2 - Changed debug message to only show when flag is set.</li>\n<li>0.3.1 - Compatibility improved in get_nodes function on propar master.</li>\n<li>0.3.0 - Improved propar performance, added additional dump mode.</li>\n<li>0.2.3 - Fix some errors in the project description and examples.</li>\n<li>0.2.1 - Initial public release.</li>\n</ul>\n\n          </div>"}, "last_serial": 5486469, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "d2ef2af4e7114c79dbb41b83f53694f8", "sha256": "be1bf9ab57ba7b7e96854797223c7d8aa044304292657c0fd8cc115e8b77459a"}, "downloads": -1, "filename": "bronkhorst_propar-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d2ef2af4e7114c79dbb41b83f53694f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39477, "upload_time": "2019-03-25T15:04:06", "upload_time_iso_8601": "2019-03-25T15:04:06.363256Z", "url": "https://files.pythonhosted.org/packages/1f/18/0f70c816e4861e5fba1e3b096866ffd821ae9eb958399362434282a6bdaa/bronkhorst_propar-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36fd7397ad0e9ff693e6b2650ad425b1", "sha256": "9d028dfcdb959c2b6f54ea71c1e3c26f3ea1d603fc05442859030d01b236cc3a"}, "downloads": -1, "filename": "bronkhorst_propar-0.2.1.tar.gz", "has_sig": false, "md5_digest": "36fd7397ad0e9ff693e6b2650ad425b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40497, "upload_time": "2019-03-25T15:04:07", "upload_time_iso_8601": "2019-03-25T15:04:07.728135Z", "url": "https://files.pythonhosted.org/packages/c1/f5/da11a6c7b2811e76f933ed9d7baf44bf72d6943f7f91fe2eea979f1de82e/bronkhorst_propar-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "e1f54ba5fe45a02f6acdc72d2d6f5420", "sha256": "f543966879a30535e83ce189e5c2f3728240e5c3649d2e4e69ff0aeaa60c6f72"}, "downloads": -1, "filename": "bronkhorst_propar-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e1f54ba5fe45a02f6acdc72d2d6f5420", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39329, "upload_time": "2019-03-26T07:24:56", "upload_time_iso_8601": "2019-03-26T07:24:56.813778Z", "url": "https://files.pythonhosted.org/packages/09/f9/1a32a1ab98723a0a32bc8d7a9f922595e2e815604090dd94fa6234d2f443/bronkhorst_propar-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "188851ede5adcf4bae5f615bcd856fbc", "sha256": "c696b03104d673bbc4054222e047c5da8c272648412a0cac1d73f05616e3db69"}, "downloads": -1, "filename": "bronkhorst_propar-0.2.3.tar.gz", "has_sig": false, "md5_digest": "188851ede5adcf4bae5f615bcd856fbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40342, "upload_time": "2019-03-26T07:24:58", "upload_time_iso_8601": "2019-03-26T07:24:58.005037Z", "url": "https://files.pythonhosted.org/packages/47/8f/6a271d74dbb2b4acfe62b2c6ed66ea72b50936735a128deffce0c9cc182b/bronkhorst_propar-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "44f6353ee0ed67875cedf74507e12b51", "sha256": "42841af297fe7381ca34bd173b2766377ceb4a4d3a4d1a3c1e6f22243dabf7a5"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "44f6353ee0ed67875cedf74507e12b51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39455, "upload_time": "2019-04-23T06:33:55", "upload_time_iso_8601": "2019-04-23T06:33:55.262674Z", "url": "https://files.pythonhosted.org/packages/c5/7b/9c627e198058ec67b63070033346e473e7ea1cc3b44a0353f79dbd66a587/bronkhorst_propar-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb76f771d155153020fba33ca3db5c8f", "sha256": "80d0c97b0025c503efdaa2e687aa9430de65cd3323376a5954c37dbd7ff7e056"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.0.tar.gz", "has_sig": false, "md5_digest": "eb76f771d155153020fba33ca3db5c8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40567, "upload_time": "2019-04-23T06:33:57", "upload_time_iso_8601": "2019-04-23T06:33:57.220096Z", "url": "https://files.pythonhosted.org/packages/55/df/4e3c83a7b18dafbf3fb9062919d12757370ef2b5408f33b619ca39f7e37e/bronkhorst_propar-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b8b109348395ac07adcbd8dde02ff15c", "sha256": "c012abe4b94b66a9e003c5c44b47ee612bbe1fd3f1d6ba034ccf8188d8186849"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b8b109348395ac07adcbd8dde02ff15c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39618, "upload_time": "2019-05-03T06:50:59", "upload_time_iso_8601": "2019-05-03T06:50:59.991634Z", "url": "https://files.pythonhosted.org/packages/1e/e3/ef31fdf278126e4d614e440f7fa680931a496a9f4485796a63d6392480e0/bronkhorst_propar-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "701169b946b470370941492a57ebd465", "sha256": "11fd42350a97452595199081adcd110eb70470d5a45320e0917ae43918031d66"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.1.tar.gz", "has_sig": false, "md5_digest": "701169b946b470370941492a57ebd465", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40740, "upload_time": "2019-05-03T06:51:01", "upload_time_iso_8601": "2019-05-03T06:51:01.471589Z", "url": "https://files.pythonhosted.org/packages/42/68/d1dc9d1d77a6865d59d630261ccae8a8da4b22921da897bd4d4dc2309464/bronkhorst_propar-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "76c8dc77cf0cff61c90f51d665e691c2", "sha256": "86c3c9856a9cf2a11b16c83ced77c63831a952e7373b16463fa2d88711d32c77"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76c8dc77cf0cff61c90f51d665e691c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39638, "upload_time": "2019-05-03T10:48:25", "upload_time_iso_8601": "2019-05-03T10:48:25.861631Z", "url": "https://files.pythonhosted.org/packages/9d/0e/4c367b697b1c4035bc29ba5f4c088b16fc988af08602cac32f279d65192a/bronkhorst_propar-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51dfa47e0d27c61e40ba918569bc28a1", "sha256": "0ee3232a2ebcd88629ed54c9597d25a71bb4e3e6d78b43abe3606ae5b753174d"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.2.tar.gz", "has_sig": false, "md5_digest": "51dfa47e0d27c61e40ba918569bc28a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40780, "upload_time": "2019-05-03T10:48:27", "upload_time_iso_8601": "2019-05-03T10:48:27.436604Z", "url": "https://files.pythonhosted.org/packages/93/cd/427963b92a19659c28c6cee9c350cb461f3af4834c5622d5f78e57ca179b/bronkhorst_propar-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "516fd96f1c0ac18078b01ed716159cda", "sha256": "c7d47af4dc224913bd2e6065c0e2a8fc7c9f60025338dc3fe9a5070df19178fa"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "516fd96f1c0ac18078b01ed716159cda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39687, "upload_time": "2019-07-03T09:33:46", "upload_time_iso_8601": "2019-07-03T09:33:46.218345Z", "url": "https://files.pythonhosted.org/packages/e7/56/6c004d215ba2bc879e920a2ceee4404fdd226c59b6febedeb9ec683f5ac2/bronkhorst_propar-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cde1e9bfd0f52497ca9ec0a96592325b", "sha256": "30260b71ac0e1d1dcb0bc70326f8b25957ee223cb0e1f6c2bbeead021628de09"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.3.tar.gz", "has_sig": false, "md5_digest": "cde1e9bfd0f52497ca9ec0a96592325b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40877, "upload_time": "2019-07-03T09:33:47", "upload_time_iso_8601": "2019-07-03T09:33:47.844628Z", "url": "https://files.pythonhosted.org/packages/84/1d/6997b651356f7afa33f7f5621185ff83eecd0e71facef4ace68ed4dba736/bronkhorst_propar-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "07f527b2ac44381437a57bb84f3f4c6b", "sha256": "3518c36dab3c3ccaf8bf4fcb12eb1f449232ca5e44e1b9a0b5c60bd78ba93832"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "07f527b2ac44381437a57bb84f3f4c6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39725, "upload_time": "2019-07-04T12:27:49", "upload_time_iso_8601": "2019-07-04T12:27:49.811814Z", "url": "https://files.pythonhosted.org/packages/f5/96/a833bf0fef8caec107841416e892eca165d6b1470f29b165c0a23ed0fa35/bronkhorst_propar-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ae10b9609584076aa1809718bd2bef5", "sha256": "ad63e92088540d5050a0a296c5f65555eb83f15e56522d3c964e0e6d5a96e1df"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.4.tar.gz", "has_sig": false, "md5_digest": "2ae10b9609584076aa1809718bd2bef5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40946, "upload_time": "2019-07-04T12:27:51", "upload_time_iso_8601": "2019-07-04T12:27:51.388977Z", "url": "https://files.pythonhosted.org/packages/57/05/edc653d3c48d9c8a6b6fd37af9b65071ddb0772394323166693eb8ab55b3/bronkhorst_propar-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07f527b2ac44381437a57bb84f3f4c6b", "sha256": "3518c36dab3c3ccaf8bf4fcb12eb1f449232ca5e44e1b9a0b5c60bd78ba93832"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "07f527b2ac44381437a57bb84f3f4c6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39725, "upload_time": "2019-07-04T12:27:49", "upload_time_iso_8601": "2019-07-04T12:27:49.811814Z", "url": "https://files.pythonhosted.org/packages/f5/96/a833bf0fef8caec107841416e892eca165d6b1470f29b165c0a23ed0fa35/bronkhorst_propar-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ae10b9609584076aa1809718bd2bef5", "sha256": "ad63e92088540d5050a0a296c5f65555eb83f15e56522d3c964e0e6d5a96e1df"}, "downloads": -1, "filename": "bronkhorst_propar-0.3.4.tar.gz", "has_sig": false, "md5_digest": "2ae10b9609584076aa1809718bd2bef5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40946, "upload_time": "2019-07-04T12:27:51", "upload_time_iso_8601": "2019-07-04T12:27:51.388977Z", "url": "https://files.pythonhosted.org/packages/57/05/edc653d3c48d9c8a6b6fd37af9b65071ddb0772394323166693eb8ab55b3/bronkhorst_propar-0.3.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:16 2020"}