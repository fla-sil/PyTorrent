{"info": {"author": "Pavel Polishchuk", "author_email": "pavel_polishchuk@ukr.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Chemistry"], "description": "# PharMD - extraction of pharmacophores from MD trajectories and virtual screening\n\nPharMD is a tool to retrieve pharmacophore models from MD trajectories of protein-ligand complexes, identification of redundant pharmacophores and virtual screening with multiple pharmacophore models using different scoring schemes. \n\n## Dependency\n\n`mdtraj >= 1.9.3`  \n`plip >= 1.4.2`  \n`pmapper >= 0.3.1`  \n`psearch >= 0.0.2`\n\n## Installation\n```text\npip install pharmd\n```\n\n## Usage\n\n### Retrieve pharmacophores from an MD trajectory\n\nTo retrieve individual snapshots of MD trajectory `mdtraj` package is used. \nTherefore the `md2pharm` utility takes the same arguments as `mdconvert` utility from `mdtraj`. \nThus you may extract only specified frames not all of them. \nYou have to specify ligand code as it is given in PDB topology file.\nIndividual frames will be stored in a single PDB file without solvent molecules.\nPharmacophore models for each frame in xyz-format will be stored in the same directory as output pdb-file. \n\n```bash\nmd2pharm -i md.xtc -t md.pdb -s 10 -g LIG -o pharmacophores/frames.pdb\n```\n\n### Retrieve non-redundant pharmacophores\n\nSimilar pharmacophores are recognized by identical 3D pharmacophore hashes. \nIt is expected that pharmacophores with identical hashes would have RMSD less than the specified binning step.\nBy default binning step equals to 1A.\nPharmacophores with distinct hashes are stored in a specified directory. Optionally one may provide a path where to store hashes for al pharmacophores.   \n\n```bash\nget_distinct -i pharmacophores/ -o distinct_pharmacophores/\n```\n\n### Perform virtual screening using multiple non-redundant pharmacophores\n\n`screen_db` utility from `psearch` package is used for this purpose.\nTherefore you have to generate database of compound conformers and their pharmacophore representations using utilities from `psearch` package. \nAt this step you may specify a desired binning step value which will be used further in screening (default is 1).\n\n```bash\nprepare_db -i input.smi -o compounds.db -c 2 -v \n```\n\nIf you would like to calculate scoring based on Conformer Coverage Approach you have to specify `--conf` argument for `screen_db`. \nThen all conformers of a compound matching pharmacophore models will be retrieved as hits (may be slower). \nOtherwise only the first matching conformer will be returned.\n\nIt is recommended to restrict screening to complex pharmacophores having at least four features, because less complex models would retrieve many irrelevant compounds.\n\n```bash\nscreen_db -i compounds.db -q distinct_pharmacophores/ -o screen/ --conf -c 2 -f 4\n```\n\nMultiple txt-files will be created in the output directory containing hit lists retrieved by individual pharmacophore models.\n\n### Calculate compound scores based on multiple hit lists\n\nThe advantage of ensemble scoring is that you do not need validate individual models and select best performing ones.\nEnsemble scoring is calculated by:   \n1. Conformer Coverage Approach (CCA) - the score is equal to the percentage of conformers matching at least one of supplied pharmacophore models.\n2. Common HIts Approach (CHA) - the score is equal to the percentage of models matched at least one conformer of a compound.\n\nIn the case of CCA scoring you have to supply the database of screened compounds as an additional parameter.\n```bash\nget_scores -i screen/ -o cca_scores.txt -s cca -d compounds.db\n```\n\n## Documentation\nAll utilities have `-h` option to get help pages with descriptions of all available arguments. \n\n\n## Citation\nVirtual Screening Using Pharmacophore Models Retrieved from Molecular Dynamic Simulations  \nPavel Polishchuk, Alina Kutlushina, Dayana Bashirova, Olena Mokshyna, Timur Madzhidov  \n*Int. J. Mol. Sci.* **2019**, 20(23), 5834  \nhttps://doi.org/10.3390/ijms20235834\n\n\n## License\nBSD-3 clause\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ci-lab-cz/pharmd.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pharmd", "package_url": "https://pypi.org/project/pharmd/", "platform": "", "project_url": "https://pypi.org/project/pharmd/", "project_urls": {"Homepage": "https://github.com/ci-lab-cz/pharmd.git"}, "release_url": "https://pypi.org/project/pharmd/0.1.1/", "requires_dist": ["pmapper (>=0.3)", "psearch (>=0.0.2)", "plip (>=1.4.2)", "mdtraj (>=1.9.3)"], "requires_python": ">=3.6", "summary": "PharMD: MD pharmacophores and virtual screening", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PharMD - extraction of pharmacophores from MD trajectories and virtual screening</h1>\n<p>PharMD is a tool to retrieve pharmacophore models from MD trajectories of protein-ligand complexes, identification of redundant pharmacophores and virtual screening with multiple pharmacophore models using different scoring schemes.</p>\n<h2>Dependency</h2>\n<p><code>mdtraj &gt;= 1.9.3</code><br>\n<code>plip &gt;= 1.4.2</code><br>\n<code>pmapper &gt;= 0.3.1</code><br>\n<code>psearch &gt;= 0.0.2</code></p>\n<h2>Installation</h2>\n<pre>pip install pharmd\n</pre>\n<h2>Usage</h2>\n<h3>Retrieve pharmacophores from an MD trajectory</h3>\n<p>To retrieve individual snapshots of MD trajectory <code>mdtraj</code> package is used.\nTherefore the <code>md2pharm</code> utility takes the same arguments as <code>mdconvert</code> utility from <code>mdtraj</code>.\nThus you may extract only specified frames not all of them.\nYou have to specify ligand code as it is given in PDB topology file.\nIndividual frames will be stored in a single PDB file without solvent molecules.\nPharmacophore models for each frame in xyz-format will be stored in the same directory as output pdb-file.</p>\n<pre>md2pharm -i md.xtc -t md.pdb -s <span class=\"m\">10</span> -g LIG -o pharmacophores/frames.pdb\n</pre>\n<h3>Retrieve non-redundant pharmacophores</h3>\n<p>Similar pharmacophores are recognized by identical 3D pharmacophore hashes.\nIt is expected that pharmacophores with identical hashes would have RMSD less than the specified binning step.\nBy default binning step equals to 1A.\nPharmacophores with distinct hashes are stored in a specified directory. Optionally one may provide a path where to store hashes for al pharmacophores.</p>\n<pre>get_distinct -i pharmacophores/ -o distinct_pharmacophores/\n</pre>\n<h3>Perform virtual screening using multiple non-redundant pharmacophores</h3>\n<p><code>screen_db</code> utility from <code>psearch</code> package is used for this purpose.\nTherefore you have to generate database of compound conformers and their pharmacophore representations using utilities from <code>psearch</code> package.\nAt this step you may specify a desired binning step value which will be used further in screening (default is 1).</p>\n<pre>prepare_db -i input.smi -o compounds.db -c <span class=\"m\">2</span> -v \n</pre>\n<p>If you would like to calculate scoring based on Conformer Coverage Approach you have to specify <code>--conf</code> argument for <code>screen_db</code>.\nThen all conformers of a compound matching pharmacophore models will be retrieved as hits (may be slower).\nOtherwise only the first matching conformer will be returned.</p>\n<p>It is recommended to restrict screening to complex pharmacophores having at least four features, because less complex models would retrieve many irrelevant compounds.</p>\n<pre>screen_db -i compounds.db -q distinct_pharmacophores/ -o screen/ --conf -c <span class=\"m\">2</span> -f <span class=\"m\">4</span>\n</pre>\n<p>Multiple txt-files will be created in the output directory containing hit lists retrieved by individual pharmacophore models.</p>\n<h3>Calculate compound scores based on multiple hit lists</h3>\n<p>The advantage of ensemble scoring is that you do not need validate individual models and select best performing ones.\nEnsemble scoring is calculated by:</p>\n<ol>\n<li>Conformer Coverage Approach (CCA) - the score is equal to the percentage of conformers matching at least one of supplied pharmacophore models.</li>\n<li>Common HIts Approach (CHA) - the score is equal to the percentage of models matched at least one conformer of a compound.</li>\n</ol>\n<p>In the case of CCA scoring you have to supply the database of screened compounds as an additional parameter.</p>\n<pre>get_scores -i screen/ -o cca_scores.txt -s cca -d compounds.db\n</pre>\n<h2>Documentation</h2>\n<p>All utilities have <code>-h</code> option to get help pages with descriptions of all available arguments.</p>\n<h2>Citation</h2>\n<p>Virtual Screening Using Pharmacophore Models Retrieved from Molecular Dynamic Simulations<br>\nPavel Polishchuk, Alina Kutlushina, Dayana Bashirova, Olena Mokshyna, Timur Madzhidov<br>\n<em>Int. J. Mol. Sci.</em> <strong>2019</strong>, 20(23), 5834<br>\n<a href=\"https://doi.org/10.3390/ijms20235834\" rel=\"nofollow\">https://doi.org/10.3390/ijms20235834</a></p>\n<h2>License</h2>\n<p>BSD-3 clause</p>\n\n          </div>"}, "last_serial": 6309406, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c154007869568315691bce5eab8f241d", "sha256": "877fb340c6301e05eff728cae3afb579db84e4dda680739ca3430f7262c3aea0"}, "downloads": -1, "filename": "pharmd-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c154007869568315691bce5eab8f241d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11907, "upload_time": "2019-11-02T13:48:20", "upload_time_iso_8601": "2019-11-02T13:48:20.239762Z", "url": "https://files.pythonhosted.org/packages/76/3a/6e1e2a02075f08e3af64f9ef96b90eaba78a78e3ef352070f7372ca34f29/pharmd-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "038f8744923d67558fdcd789c0a1a8da", "sha256": "ba94eefb194c8c9e118366fce3f632c6daf51c00014ce74e3bb6deb57958784d"}, "downloads": -1, "filename": "pharmd-0.1.tar.gz", "has_sig": false, "md5_digest": "038f8744923d67558fdcd789c0a1a8da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10899, "upload_time": "2019-11-02T13:48:22", "upload_time_iso_8601": "2019-11-02T13:48:22.816724Z", "url": "https://files.pythonhosted.org/packages/a9/76/84604e8d92b3c9d8f8f04cf1f9eb91f77e29dfa4da0060601fc89281da7a/pharmd-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "27d0bfd58981deb3757c68c29773be23", "sha256": "c1b7d1f1db8c257768640e2ad61a58bcd9e7f2c27dae2c497c2542c61587be31"}, "downloads": -1, "filename": "pharmd-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "27d0bfd58981deb3757c68c29773be23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20460, "upload_time": "2019-12-16T08:42:30", "upload_time_iso_8601": "2019-12-16T08:42:30.626260Z", "url": "https://files.pythonhosted.org/packages/4b/06/60b5d308c55c43b238d81ff57c559f38ad5df52ff0a0393aba0c7ab42e47/pharmd-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2e5d88db7073119cebc5e755ddc4d26", "sha256": "fb3ca738908b0c7c076be4dd177cc9de9da7e6d3f391d1088f649d02eb1fb4b6"}, "downloads": -1, "filename": "pharmd-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a2e5d88db7073119cebc5e755ddc4d26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12955, "upload_time": "2019-12-16T08:42:32", "upload_time_iso_8601": "2019-12-16T08:42:32.824542Z", "url": "https://files.pythonhosted.org/packages/6d/01/d456b683f2bea29184f18ac6e64762b9b4e9b9d99bb9814458cf7674535e/pharmd-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27d0bfd58981deb3757c68c29773be23", "sha256": "c1b7d1f1db8c257768640e2ad61a58bcd9e7f2c27dae2c497c2542c61587be31"}, "downloads": -1, "filename": "pharmd-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "27d0bfd58981deb3757c68c29773be23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20460, "upload_time": "2019-12-16T08:42:30", "upload_time_iso_8601": "2019-12-16T08:42:30.626260Z", "url": "https://files.pythonhosted.org/packages/4b/06/60b5d308c55c43b238d81ff57c559f38ad5df52ff0a0393aba0c7ab42e47/pharmd-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2e5d88db7073119cebc5e755ddc4d26", "sha256": "fb3ca738908b0c7c076be4dd177cc9de9da7e6d3f391d1088f649d02eb1fb4b6"}, "downloads": -1, "filename": "pharmd-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a2e5d88db7073119cebc5e755ddc4d26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12955, "upload_time": "2019-12-16T08:42:32", "upload_time_iso_8601": "2019-12-16T08:42:32.824542Z", "url": "https://files.pythonhosted.org/packages/6d/01/d456b683f2bea29184f18ac6e64762b9b4e9b9d99bb9814458cf7674535e/pharmd-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:37 2020"}