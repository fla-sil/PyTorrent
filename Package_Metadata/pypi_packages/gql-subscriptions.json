{"info": {"author": "ysun", "author_email": "sunyu418@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# gql-subscriptions\n\nA Python3.7+ port of [Apollo Graphql Subscriptions](https://github.com/apollographql/graphql-subscriptions).\n\nThis package contains a basic asyncio pubsub system which should be used only in demo, and other pubsub system(like Redis).\n\n## Requirements\n\nPython 3.7+\n\n## Installation\n\n`pip install gql-subscriptions`\n\n> This package should be used with a network transport, for example [starlette-graphql](https://github.com/syfun/starlette-graphql)\n\n## Getting started with your first subscription\n\nTo begin with GraphQL subscriptions, start by defining a GraphQL Subscription type in your schema:\n\n```\ntype Subscription {\n    somethingChanged: Result\n}\n\ntype Result {\n    id: String\n}\n```\n\nNext, add the Subscription type to your schema definition:\n\n```\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n```\n\nNow, let's create a simple `PubSub` instance - it is simple pubsub implementation, based on `asyncio.Queue`.\n\n```python\nfrom gql_subscriptions import PubSub\n\npubsub = PubSub()\n```\n\nNow, implement your Subscriptions type resolver, using the `pubsub.async_iterator` to map the event you need(use [python-gql](https://github.com/syfun/python-gql)):\n\n```python\nfrom gql_subscriptions import PubSub, subscribe\n\n\npubsub = PubSub()\n\nSOMETHING_CHANGED_TOPIC = 'something_changed'\n\n\n@subscribe\nasync def something_changed(parent, info):\n    return pubsub.async_iterator(SOMETHING_CHANGED_TOPIC)\n```\n\nNow, the GraphQL engine knows that `somethingChanged` is a subscription, and every time we use pubsub.publish over this topic - it will publish it using the transport we use:\n\n```\npubsub.publish(SOMETHING_CHANGED_TOPIC, {'somethingChanged': {'id': \"123\" }})\n```\n\n>Note that the default PubSub implementation is intended for demo purposes. It only works if you have a single instance of your server and doesn't scale beyond a couple of connections. For production usage you'll want to use one of the [PubSub implementations](#pubsub-implementations) backed by an external store. (e.g. Redis).\n\n## Filters\n\nWhen publishing data to subscribers, we need to make sure that each subscriber gets only the data it needs.\n\nTo do so, we can use `with_filter` decorator, which wraps the `subscription resolver` with a filter function, and lets you control each publication for each user.\n\n```\nResolverFn = Callable[[Any, Any, Dict[str, Any]], Awaitable[AsyncIterator]]\nFilterFn = Callable[[Any, Any, Dict[str, Any]], bool]\n\ndef with_filter(filter_fn: FilterFn) -> Callable[[ResolverFn], ResolverFn]\n    ...\n```\n\n`ResolverFn` is a async function which returned a `typing.AsyncIterator`.\n```\nasync def something_changed(parent, info) -> typing.AsyncIterator\n```\n\n`FilterFn` is a filter function, executed with the payload(published value), operation info, arugments, and must return bool.\n\nFor example, if `something_changed` would also accept a argument with the ID that is relevant, we can use the following code to filter according to it:\n\n```python\nfrom gql_subscriptions import PubSub, subscribe, with_filter\n\n\npubsub = PubSub()\n\nSOMETHING_CHANGED_TOPIC = 'something_changed'\n\n\ndef filter_thing(payload, info, relevant_id):\n    return payload['somethingChanged'].get('id') == relevant_id\n\n\n@subscribe\n@with_filter(filter_thing)\nasync def something_changed(parent, info, relevant_id):\n    return pubsub.async_iterator(SOMETHING_CHANGED_TOPIC)\n```\n\n## Channels Mapping\n\nYou can map multiple channels into the same subscription, for example when there are multiple events that trigger the same subscription in the GraphQL engine.\n\n```python\nfrom gql_subscriptions import PubSub, subscribe, with_filter\n\npubsub = PubSub()\n\nSOMETHING_UPDATED = 'something_updated'\nSOMETHING_CREATED = 'something_created'\nSOMETHING_REMOVED = 'something_removed'\n\n\n@subscribe\nasync def something_changed(parent, info):\n    return pubsub.async_iterator([SOMETHING_UPDATED, SOMETHING_CREATED, SOMETHING_REMOVED])\n```\n\n## PubSub Implementations\n\nIt can be easily replaced with some other implements of [PubSubEngine abstract class](https://github.com/syfun/gql-subscriptions/blob/master/gql_subscriptions/engine.py).\n\nThis package contains a `Redis` implements.\n\n```python\nfrom gql import subscribe\nfrom gql_subscriptions.pubsubs.redis import RedisPubSub\n\n\npubsub = RedisPubSub()\n\nSOMETHING_CHANGED_TOPIC = 'something_changed'\n\n\n@subscribe\nasync def something_changed(parent, info):\n    return pubsub.async_iterator(SOMETHING_CHANGED_TOPIC)\n```\n\nYou can also implement a `PubSub` of your own, by using the inherit `PubSubEngine` from this package, this is a [Reids example](https://github.com/syfun/gql-subscriptions/blob/master/gql_subscriptions/pubsubs/redis.py).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/syfun/gql-subscriptions", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gql-subscriptions", "package_url": "https://pypi.org/project/gql-subscriptions/", "platform": "", "project_url": "https://pypi.org/project/gql-subscriptions/", "project_urls": {"Homepage": "https://github.com/syfun/gql-subscriptions"}, "release_url": "https://pypi.org/project/gql-subscriptions/0.0.2/", "requires_dist": ["typing_extensions (>=3.7.4,<4.0.0); python_version < \"3.8\"", "aioredis (>=1.3,<2.0); extra == \"redis\""], "requires_python": ">=3.7,<4.0", "summary": "A Python3.7+ port of Apollo Graphql Subscriptions.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gql-subscriptions</h1>\n<p>A Python3.7+ port of <a href=\"https://github.com/apollographql/graphql-subscriptions\" rel=\"nofollow\">Apollo Graphql Subscriptions</a>.</p>\n<p>This package contains a basic asyncio pubsub system which should be used only in demo, and other pubsub system(like Redis).</p>\n<h2>Requirements</h2>\n<p>Python 3.7+</p>\n<h2>Installation</h2>\n<p><code>pip install gql-subscriptions</code></p>\n<blockquote>\n<p>This package should be used with a network transport, for example <a href=\"https://github.com/syfun/starlette-graphql\" rel=\"nofollow\">starlette-graphql</a></p>\n</blockquote>\n<h2>Getting started with your first subscription</h2>\n<p>To begin with GraphQL subscriptions, start by defining a GraphQL Subscription type in your schema:</p>\n<pre><code>type Subscription {\n    somethingChanged: Result\n}\n\ntype Result {\n    id: String\n}\n</code></pre>\n<p>Next, add the Subscription type to your schema definition:</p>\n<pre><code>schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n</code></pre>\n<p>Now, let's create a simple <code>PubSub</code> instance - it is simple pubsub implementation, based on <code>asyncio.Queue</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gql_subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">PubSub</span>\n\n<span class=\"n\">pubsub</span> <span class=\"o\">=</span> <span class=\"n\">PubSub</span><span class=\"p\">()</span>\n</pre>\n<p>Now, implement your Subscriptions type resolver, using the <code>pubsub.async_iterator</code> to map the event you need(use <a href=\"https://github.com/syfun/python-gql\" rel=\"nofollow\">python-gql</a>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gql_subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">PubSub</span><span class=\"p\">,</span> <span class=\"n\">subscribe</span>\n\n\n<span class=\"n\">pubsub</span> <span class=\"o\">=</span> <span class=\"n\">PubSub</span><span class=\"p\">()</span>\n\n<span class=\"n\">SOMETHING_CHANGED_TOPIC</span> <span class=\"o\">=</span> <span class=\"s1\">'something_changed'</span>\n\n\n<span class=\"nd\">@subscribe</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">something_changed</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">pubsub</span><span class=\"o\">.</span><span class=\"n\">async_iterator</span><span class=\"p\">(</span><span class=\"n\">SOMETHING_CHANGED_TOPIC</span><span class=\"p\">)</span>\n</pre>\n<p>Now, the GraphQL engine knows that <code>somethingChanged</code> is a subscription, and every time we use pubsub.publish over this topic - it will publish it using the transport we use:</p>\n<pre><code>pubsub.publish(SOMETHING_CHANGED_TOPIC, {'somethingChanged': {'id': \"123\" }})\n</code></pre>\n<blockquote>\n<p>Note that the default PubSub implementation is intended for demo purposes. It only works if you have a single instance of your server and doesn't scale beyond a couple of connections. For production usage you'll want to use one of the <a href=\"#pubsub-implementations\" rel=\"nofollow\">PubSub implementations</a> backed by an external store. (e.g. Redis).</p>\n</blockquote>\n<h2>Filters</h2>\n<p>When publishing data to subscribers, we need to make sure that each subscriber gets only the data it needs.</p>\n<p>To do so, we can use <code>with_filter</code> decorator, which wraps the <code>subscription resolver</code> with a filter function, and lets you control each publication for each user.</p>\n<pre><code>ResolverFn = Callable[[Any, Any, Dict[str, Any]], Awaitable[AsyncIterator]]\nFilterFn = Callable[[Any, Any, Dict[str, Any]], bool]\n\ndef with_filter(filter_fn: FilterFn) -&gt; Callable[[ResolverFn], ResolverFn]\n    ...\n</code></pre>\n<p><code>ResolverFn</code> is a async function which returned a <code>typing.AsyncIterator</code>.</p>\n<pre><code>async def something_changed(parent, info) -&gt; typing.AsyncIterator\n</code></pre>\n<p><code>FilterFn</code> is a filter function, executed with the payload(published value), operation info, arugments, and must return bool.</p>\n<p>For example, if <code>something_changed</code> would also accept a argument with the ID that is relevant, we can use the following code to filter according to it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gql_subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">PubSub</span><span class=\"p\">,</span> <span class=\"n\">subscribe</span><span class=\"p\">,</span> <span class=\"n\">with_filter</span>\n\n\n<span class=\"n\">pubsub</span> <span class=\"o\">=</span> <span class=\"n\">PubSub</span><span class=\"p\">()</span>\n\n<span class=\"n\">SOMETHING_CHANGED_TOPIC</span> <span class=\"o\">=</span> <span class=\"s1\">'something_changed'</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">filter_thing</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">relevant_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">'somethingChanged'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">relevant_id</span>\n\n\n<span class=\"nd\">@subscribe</span>\n<span class=\"nd\">@with_filter</span><span class=\"p\">(</span><span class=\"n\">filter_thing</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">something_changed</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">relevant_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">pubsub</span><span class=\"o\">.</span><span class=\"n\">async_iterator</span><span class=\"p\">(</span><span class=\"n\">SOMETHING_CHANGED_TOPIC</span><span class=\"p\">)</span>\n</pre>\n<h2>Channels Mapping</h2>\n<p>You can map multiple channels into the same subscription, for example when there are multiple events that trigger the same subscription in the GraphQL engine.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gql_subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">PubSub</span><span class=\"p\">,</span> <span class=\"n\">subscribe</span><span class=\"p\">,</span> <span class=\"n\">with_filter</span>\n\n<span class=\"n\">pubsub</span> <span class=\"o\">=</span> <span class=\"n\">PubSub</span><span class=\"p\">()</span>\n\n<span class=\"n\">SOMETHING_UPDATED</span> <span class=\"o\">=</span> <span class=\"s1\">'something_updated'</span>\n<span class=\"n\">SOMETHING_CREATED</span> <span class=\"o\">=</span> <span class=\"s1\">'something_created'</span>\n<span class=\"n\">SOMETHING_REMOVED</span> <span class=\"o\">=</span> <span class=\"s1\">'something_removed'</span>\n\n\n<span class=\"nd\">@subscribe</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">something_changed</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">pubsub</span><span class=\"o\">.</span><span class=\"n\">async_iterator</span><span class=\"p\">([</span><span class=\"n\">SOMETHING_UPDATED</span><span class=\"p\">,</span> <span class=\"n\">SOMETHING_CREATED</span><span class=\"p\">,</span> <span class=\"n\">SOMETHING_REMOVED</span><span class=\"p\">])</span>\n</pre>\n<h2>PubSub Implementations</h2>\n<p>It can be easily replaced with some other implements of <a href=\"https://github.com/syfun/gql-subscriptions/blob/master/gql_subscriptions/engine.py\" rel=\"nofollow\">PubSubEngine abstract class</a>.</p>\n<p>This package contains a <code>Redis</code> implements.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gql</span> <span class=\"kn\">import</span> <span class=\"n\">subscribe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gql_subscriptions.pubsubs.redis</span> <span class=\"kn\">import</span> <span class=\"n\">RedisPubSub</span>\n\n\n<span class=\"n\">pubsub</span> <span class=\"o\">=</span> <span class=\"n\">RedisPubSub</span><span class=\"p\">()</span>\n\n<span class=\"n\">SOMETHING_CHANGED_TOPIC</span> <span class=\"o\">=</span> <span class=\"s1\">'something_changed'</span>\n\n\n<span class=\"nd\">@subscribe</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">something_changed</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">pubsub</span><span class=\"o\">.</span><span class=\"n\">async_iterator</span><span class=\"p\">(</span><span class=\"n\">SOMETHING_CHANGED_TOPIC</span><span class=\"p\">)</span>\n</pre>\n<p>You can also implement a <code>PubSub</code> of your own, by using the inherit <code>PubSubEngine</code> from this package, this is a <a href=\"https://github.com/syfun/gql-subscriptions/blob/master/gql_subscriptions/pubsubs/redis.py\" rel=\"nofollow\">Reids example</a>.</p>\n\n          </div>"}, "last_serial": 7099174, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "04b90db40cfb4d38dc3e91df8744dd17", "sha256": "54b0d33a91caf4d35dcb7ac2568bb9d97af0973598c6db759e10eb8692199d40"}, "downloads": -1, "filename": "gql_subscriptions-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04b90db40cfb4d38dc3e91df8744dd17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7577, "upload_time": "2020-04-25T11:44:44", "upload_time_iso_8601": "2020-04-25T11:44:44.757273Z", "url": "https://files.pythonhosted.org/packages/e0/3a/bb5f878f1d51c2b674bbe20dd76dc919cd6ba2829565c3e99f373e6af083/gql_subscriptions-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c25d5e7b92941cf9d4b34904d76f7bdc", "sha256": "8883c33170ef107e66e17e916fae470bfabc53896b763a7a977c4511e5a063b0"}, "downloads": -1, "filename": "gql-subscriptions-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c25d5e7b92941cf9d4b34904d76f7bdc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6590, "upload_time": "2020-04-25T11:44:42", "upload_time_iso_8601": "2020-04-25T11:44:42.138335Z", "url": "https://files.pythonhosted.org/packages/a7/bc/28c5461f9c81736b1383846836aa610f12e99d48be46fe128e909dcd89ef/gql-subscriptions-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "53e51f248031d5928d00826cffd0a418", "sha256": "c15fd119a9a23fc4812fd83632c8a5124b3d37c747154a06022e808a205c4918"}, "downloads": -1, "filename": "gql_subscriptions-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "53e51f248031d5928d00826cffd0a418", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7595, "upload_time": "2020-04-25T11:56:45", "upload_time_iso_8601": "2020-04-25T11:56:45.508913Z", "url": "https://files.pythonhosted.org/packages/ae/5e/be4ce2bf974f355b143fcc8cf64f96142fefd3b9bf511432a8e41598a41d/gql_subscriptions-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba6433ac7ec6b474bb35c99ff0f7205", "sha256": "3dfe15f1b8bb8fba81ae98f72243b8840bf03e9bdd31b2a558ddf562b45de15d"}, "downloads": -1, "filename": "gql-subscriptions-0.0.2.tar.gz", "has_sig": false, "md5_digest": "eba6433ac7ec6b474bb35c99ff0f7205", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6624, "upload_time": "2020-04-25T11:56:43", "upload_time_iso_8601": "2020-04-25T11:56:43.922369Z", "url": "https://files.pythonhosted.org/packages/52/d3/65a26fcc3244b141649776ef4276ca72c0588af417e10f59bb373eb2fe63/gql-subscriptions-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53e51f248031d5928d00826cffd0a418", "sha256": "c15fd119a9a23fc4812fd83632c8a5124b3d37c747154a06022e808a205c4918"}, "downloads": -1, "filename": "gql_subscriptions-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "53e51f248031d5928d00826cffd0a418", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7595, "upload_time": "2020-04-25T11:56:45", "upload_time_iso_8601": "2020-04-25T11:56:45.508913Z", "url": "https://files.pythonhosted.org/packages/ae/5e/be4ce2bf974f355b143fcc8cf64f96142fefd3b9bf511432a8e41598a41d/gql_subscriptions-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba6433ac7ec6b474bb35c99ff0f7205", "sha256": "3dfe15f1b8bb8fba81ae98f72243b8840bf03e9bdd31b2a558ddf562b45de15d"}, "downloads": -1, "filename": "gql-subscriptions-0.0.2.tar.gz", "has_sig": false, "md5_digest": "eba6433ac7ec6b474bb35c99ff0f7205", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6624, "upload_time": "2020-04-25T11:56:43", "upload_time_iso_8601": "2020-04-25T11:56:43.922369Z", "url": "https://files.pythonhosted.org/packages/52/d3/65a26fcc3244b141649776ef4276ca72c0588af417e10f59bb373eb2fe63/gql-subscriptions-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:02 2020"}