{"info": {"author": "UCL Research IT Services", "author_email": "rc-softdev@ucl.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "pyoracc\n=======\n\n[![Build Status](https://travis-ci.org/oracc/pyoracc.svg?branch=master)](https://travis-ci.org/oracc/pyoracc) \n[![Maintainability](https://api.codeclimate.com/v1/badges/7244ac087b45146c5e3e/maintainability)](https://codeclimate.com/github/cdli-gh/pyoracc/maintainability)\n[![codecov](https://codecov.io/gh/oracc/pyoracc/branch/master/graph/badge.svg)](https://codecov.io/gh/oracc/pyoracc)\n\nPython tools for working with ORACC/C-ATF files\n\nDepends on PLY, Mako and Pytest\n\n# Installation\n\nIf you don't use `pip`, you're missing out.\nHere are [installation instructions](https://pip.pypa.io/en/stable/installing/).\n\nSimply run:\n\n```bash\n    $ cd pyoracc\n    $ git pull origin master\n    $ pip install .\n```\n\nOr you can just do\n\n    $ pip install git+git://github.com/cdli-gh/pyoracc.git \n\nOr you can also do\n\n    $ pip install git+https://github.com/cdli-gh/pyoracc.git \n\n\n# Upgrading\n\nIf you already have installed it and want to upgrade the tool:\n\n```bash\n    $ cd pyoracc\n    $ git pull origin master\n    $ pip install . --upgrade\n```\n\nOr you can just do\n\n    $ pip install git+git://github.com/cdli-gh/pyoracc.git --upgrade\n\nOr you can also do\n\n    $ pip install git+https://github.com/cdli-gh/pyoracc.git --upgrade\n\n\n# Usage\n\nTo use it:\n\n    $ pyoracc --help\n\n*Only files with the .atf extension can be processed.  *\n\nTo run it on file:\n\n    $ pyoracc -i ./pyoracc/test/data/cdli_atf_20180104.atf -f cdli\n\nFor a fresh copy of CDLI ATF, download the data bundle here : https://github.com/cdli-gh/data/blob/master/cdliatf_unblocked.atf\n\nTo run it on oracc file:\n\n    $ pyoracc -i ./pyoracc/test/data/cdli_atf_20180104.atf -f oracc\n\nTo run it on folder:\n\n    $ pyoracc -i ./pyoracc/test/data -f cdli\n\nTo see the console messages of the tool, use --verbose switch\n\n    $ pyoracc -i ./pyoracc/test/data -f cdli --verbose\n\nNote that using the verbose option will also create a parselog.txt file, \ncontaining the log output along with displaying it on command line. \nThe verbose output contains the lexical symbols, the parse grammer table\nand the LR parsing table states.\n\nAlso note that, first time usage with any atf format will always display \nthe parse tables irrespective of verbose switch.\n\nIf you don't give arguments, it will prompt for the path and atf file type.  \n\n# Help\n\n```bash\n$ pyoracc --help\nUsage: pyoracc [OPTIONS]\n\n  My Tool does one work, and one work well.\n\nOptions:\n  -i, --input_path PATH      Input the file/folder name.  [required]\n  -f, --atf_type [cdli|atf]  Input the atf file type.  [required]\n  -v, --verbose              Enables verbose mode\n  --version                  Show the version and exit.\n  --help                     Show this message and exit.\n\n```\n\n## Internal Dev Usage\n\n### Development Guideline\n\n* ORACC atf based changes will go in pyoracc/atf/oracc\n* CDLI atf based changes will go in pyoracc/atf/cdli\n* Common atf based changes will go in pyoracc/atf/common\n\n### To run on directory\n\n    $ python  -m pyoracc.model.corpus ./pyoracc/test/data  cdli\n\n### To run on individual file\n\n    $ python -m pyoracc.atf.common.atffile ./pyoracc/test/data/cdli_atf_20180104.atf cdli True\n\n## Running Tests\n\nBefore running pytest and coverage, install [py.test](https://docs.pytest.org/en/latest/getting-started.html) and [pytest-cov](https://pypi.org/project/pytest-cov/).\n\n    $ py.test --cov=pyoracc --cov-report xml --cov-report html --cov-report annotate --runslow\n\nBefore running pycodestyle, install [pycodestyle](https://pypi.org/project/pycodestyle/).\n\n    $ pycodestyle\n\n## API Consumption\n\n```python\nfrom pyoracc.atf.common.atffile import file_process\nfile_process(pathname, atftype, verbose)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ucl/pyoracc/archive/master.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ucl/pyoracc", "keywords": "oracc cdli atf cuneiform parser", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyoracc", "package_url": "https://pypi.org/project/pyoracc/", "platform": "", "project_url": "https://pypi.org/project/pyoracc/", "project_urls": {"Bug Reports": "https://github.com/oracc/pyoracc/issues", "Donating!": "http://oracc.museum.upenn.edu/doc/about/contributing/", "Download": "https://github.com/ucl/pyoracc/archive/master.tar.gz", "Help!": "http://oracc.museum.upenn.edu/doc/help/index.html", "Homepage": "https://github.com/ucl/pyoracc", "Source": "https://github.com/oracc/pyoracc/"}, "release_url": "https://pypi.org/project/pyoracc/0.1.0/", "requires_dist": ["pycodestyle; extra == 'dev'", "pytest; extra == 'test'", "pytest-cov; extra == 'test'", "codecov; extra == 'test'", "pycodestyle; extra == 'test'", "click", "mako", "ply", "pytest; extra == 'dev'", "pytest-cov; extra == 'dev'", "codecov; extra == 'dev'"], "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4", "summary": "Python tools for working with ORACC/CDLI ATF files", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyoracc</h1>\n<p><a href=\"https://travis-ci.org/oracc/pyoracc\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/918c5d78b756d711fadba552dc1f1816293a9c1c/68747470733a2f2f7472617669732d63692e6f72672f6f726163632f70796f726163632e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/cdli-gh/pyoracc/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a7de0026e84ddafff93278dd1e50517f36d8cad/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f37323434616330383762343531343663356533652f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codecov.io/gh/oracc/pyoracc\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5db1f57a697b3371f3abe723b51dab55d1ef9dc8/68747470733a2f2f636f6465636f762e696f2f67682f6f726163632f70796f726163632f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Python tools for working with ORACC/C-ATF files</p>\n<p>Depends on PLY, Mako and Pytest</p>\n<h1>Installation</h1>\n<p>If you don't use <code>pip</code>, you're missing out.\nHere are <a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">installation instructions</a>.</p>\n<p>Simply run:</p>\n<pre>    $ <span class=\"nb\">cd</span> pyoracc\n    $ git pull origin master\n    $ pip install .\n</pre>\n<p>Or you can just do</p>\n<pre><code>$ pip install git+git://github.com/cdli-gh/pyoracc.git \n</code></pre>\n<p>Or you can also do</p>\n<pre><code>$ pip install git+https://github.com/cdli-gh/pyoracc.git \n</code></pre>\n<h1>Upgrading</h1>\n<p>If you already have installed it and want to upgrade the tool:</p>\n<pre>    $ <span class=\"nb\">cd</span> pyoracc\n    $ git pull origin master\n    $ pip install . --upgrade\n</pre>\n<p>Or you can just do</p>\n<pre><code>$ pip install git+git://github.com/cdli-gh/pyoracc.git --upgrade\n</code></pre>\n<p>Or you can also do</p>\n<pre><code>$ pip install git+https://github.com/cdli-gh/pyoracc.git --upgrade\n</code></pre>\n<h1>Usage</h1>\n<p>To use it:</p>\n<pre><code>$ pyoracc --help\n</code></pre>\n<p>*Only files with the .atf extension can be processed.  *</p>\n<p>To run it on file:</p>\n<pre><code>$ pyoracc -i ./pyoracc/test/data/cdli_atf_20180104.atf -f cdli\n</code></pre>\n<p>For a fresh copy of CDLI ATF, download the data bundle here : <a href=\"https://github.com/cdli-gh/data/blob/master/cdliatf_unblocked.atf\" rel=\"nofollow\">https://github.com/cdli-gh/data/blob/master/cdliatf_unblocked.atf</a></p>\n<p>To run it on oracc file:</p>\n<pre><code>$ pyoracc -i ./pyoracc/test/data/cdli_atf_20180104.atf -f oracc\n</code></pre>\n<p>To run it on folder:</p>\n<pre><code>$ pyoracc -i ./pyoracc/test/data -f cdli\n</code></pre>\n<p>To see the console messages of the tool, use --verbose switch</p>\n<pre><code>$ pyoracc -i ./pyoracc/test/data -f cdli --verbose\n</code></pre>\n<p>Note that using the verbose option will also create a parselog.txt file,\ncontaining the log output along with displaying it on command line.\nThe verbose output contains the lexical symbols, the parse grammer table\nand the LR parsing table states.</p>\n<p>Also note that, first time usage with any atf format will always display\nthe parse tables irrespective of verbose switch.</p>\n<p>If you don't give arguments, it will prompt for the path and atf file type.</p>\n<h1>Help</h1>\n<pre>$ pyoracc --help\nUsage: pyoracc <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\n  My Tool does one work, and one work well.\n\nOptions:\n  -i, --input_path PATH      Input the file/folder name.  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -f, --atf_type <span class=\"o\">[</span>cdli<span class=\"p\">|</span>atf<span class=\"o\">]</span>  Input the atf file type.  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -v, --verbose              Enables verbose mode\n  --version                  Show the version and exit.\n  --help                     Show this message and exit.\n</pre>\n<h2>Internal Dev Usage</h2>\n<h3>Development Guideline</h3>\n<ul>\n<li>ORACC atf based changes will go in pyoracc/atf/oracc</li>\n<li>CDLI atf based changes will go in pyoracc/atf/cdli</li>\n<li>Common atf based changes will go in pyoracc/atf/common</li>\n</ul>\n<h3>To run on directory</h3>\n<pre><code>$ python  -m pyoracc.model.corpus ./pyoracc/test/data  cdli\n</code></pre>\n<h3>To run on individual file</h3>\n<pre><code>$ python -m pyoracc.atf.common.atffile ./pyoracc/test/data/cdli_atf_20180104.atf cdli True\n</code></pre>\n<h2>Running Tests</h2>\n<p>Before running pytest and coverage, install <a href=\"https://docs.pytest.org/en/latest/getting-started.html\" rel=\"nofollow\">py.test</a> and <a href=\"https://pypi.org/project/pytest-cov/\" rel=\"nofollow\">pytest-cov</a>.</p>\n<pre><code>$ py.test --cov=pyoracc --cov-report xml --cov-report html --cov-report annotate --runslow\n</code></pre>\n<p>Before running pycodestyle, install <a href=\"https://pypi.org/project/pycodestyle/\" rel=\"nofollow\">pycodestyle</a>.</p>\n<pre><code>$ pycodestyle\n</code></pre>\n<h2>API Consumption</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyoracc.atf.common.atffile</span> <span class=\"kn\">import</span> <span class=\"n\">file_process</span>\n<span class=\"n\">file_process</span><span class=\"p\">(</span><span class=\"n\">pathname</span><span class=\"p\">,</span> <span class=\"n\">atftype</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 3833372, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e7fa74ef9174c5cb460735c5c92979af", "sha256": "37ca153eb05b41b4aeb2cbb72825222623b0dd069e6c3137ebb6541925cf95d0"}, "downloads": -1, "filename": "pyoracc-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e7fa74ef9174c5cb460735c5c92979af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 57869, "upload_time": "2018-05-04T06:50:40", "upload_time_iso_8601": "2018-05-04T06:50:40.430004Z", "url": "https://files.pythonhosted.org/packages/0c/b2/d345c1cf80459280e4ed225a2956bb9fb18ae555dc13c90753fb29ce25dc/pyoracc-0.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7fa74ef9174c5cb460735c5c92979af", "sha256": "37ca153eb05b41b4aeb2cbb72825222623b0dd069e6c3137ebb6541925cf95d0"}, "downloads": -1, "filename": "pyoracc-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e7fa74ef9174c5cb460735c5c92979af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 57869, "upload_time": "2018-05-04T06:50:40", "upload_time_iso_8601": "2018-05-04T06:50:40.430004Z", "url": "https://files.pythonhosted.org/packages/0c/b2/d345c1cf80459280e4ed225a2956bb9fb18ae555dc13c90753fb29ce25dc/pyoracc-0.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:00:06 2020"}