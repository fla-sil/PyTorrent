{"info": {"author": "Paulina Dziadkiewicz", "author_email": "pedziadkiewicz@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "[![Build Status](https://travis-ci.org/meoke/pangtree.svg?branch=master)](https://travis-ci.org/meoke/pangtree)\n\n# PangtreeeBuild\n\nThis repository contains tool for multiple sequence alignment analysis. It implements the idea of pan-genome ([Ref. 1](https://doi.org/10.1093/bib/bbw089)) by representing the multialignment as a PO-MSA structure (Partial Order Alignment Graph - [Ref. 2](https://doi.org/10.1093/bioinformatics/btg109)). The main purpose of this software is to construct an *Affinity Tree* - a phylogenetic-like tree, with an agreed sequence (*consensus sequence*) assigned for each node. The result is saved in JSON file (see its schema in pangtree/pangtreebuild/serialization/affinity_tree_schema.json). Its content can be visualised using [PangtreeVis](https://github.com/meoke/pangtreevis).\n\nThis software is a part of the article: P.Dziadkiewicz, N.Dojer 'Getting insight into the pan-genome structure with Pangtree' that will be published soon in BMC Genomics.\n\n\n## Getting Started\n\n### Prerequisites\n\nRunning:\n* [Python 3.8](http://python.org)\n* [BioPython](https://biopython.org/)\n* [numpy](http://www.numpy.org/)\n* [jsonpickle](http://jsonpickle.github.io/)\n* [networkx](https://networkx.github.io/)\n\nTesting:\n* [DDT](https://github.com/txels/ddt)\n\n\n### Installing\n\n```\npip install pangtreebuild\n```\n\n\n### Quick installation check\n\nThis line builds a pan-genome model for an example alignment of 160 Ebola virus sequences and saves it to a JSON file.\n\n```python3 -m pangtreebuild --multialignment example_data/Ebola/multialignment.maf```\n\n\n\n## Usage\n\n1. Import package **pangtreebuild** to your Python program and use it according to the documentation.\n\nor\n\n2. Use **pangtreebuild** via command line with following arguments:\n\npython3 -m pangtreebuild [args]\n\n| Name  | CLI | Required | Description\n| ------------- | ------------- | ------- | ----------\n| Arguments affecting PO-MSA construction: |\n| MULTIALIGNMENT  | --multialignment  | Yes | Path to the mulitalignment file (.maf or .po)\n| METADATA | --metadata | No | Optional information about sequences in csv format. The only required column: \\'seqid\\' and its value must match multialignment files identifiers as described in *Sequence Naming Convention* (below). Example: example_data/Ebola/metadata.csv\n| RAW_MAF | --raw_maf | No, default=False | Build PO-MSA without transforming multialignment (MAF file) to DAG. PO-MSA built in this way does not reflect real life sequences.\n| FASTA_PROVIDER | --fasta_provider | No | Nucleotides source if any residues are missed in the multialignment file. Possible values: 'ncbi', 'file'. If not specified: MISSING_NUCLEOTIDE is used.\n| MISSING_SYMBOL | --missing_symbol | No, default='?' | Symbol for missing nucleotides used if no FASTA_PROVIDER is given.\n| CACHE | --cache | No | If set, sequences downloaded from NCBI are stored on local disc and reused between program calls, used if FASTA_PROVIDER is 'ncbi'\n| FASTA_PATH | -fasta_path | Yes if FASTA_PROVIDER='FILE' | Path to fasta file or zipped fasta files with whole sequences present in multialignment, used if FASTA_PROVIDER is 'FILE'.\n| Arguments affecting Affinity Tree construction: |\n| AFFINITY | -affinity | No | Possible values: 'TREE' (default algorithm, descibed in Documentation.md), 'POA' (simplified version, based solely on Ref. 2)\n| BLOSUM | --blosum | No, default=bin\\blosum80.mat |  Path to the blosum filem. Blosum file must include MISSING_NUCLEOTIDE. |\n| HBMIN | --hbmin | No, default=0.9 | 'POA' parameter. The minimum value of sequence compatibility to generated consensus.\n| STOP | --stop | No, default=0.99 | 'TREE' parameter. Minimum value of compatibility in tree leaves.\n| P | -p | No, default=1 | 'TREE' parameter. It changes the linear meaning of compatiblities during cutoff finding because the compatibilities are raised to the power o P. For P from range [0,1] it decreases distances between small compatibilities and increases distances between the bigger ones. For p > 1 it increases distances between small compatibilities and decreases distances between the bigger ones.\n| Arguments affecting output generation: |\n| OUTPUT_DIR | --output_dir, -o | No, default=timestamped folder in current working directory | Output directory path.\n| OUTPUT_FULL | --output_full | No, default=False | Set, if list of pangenome nodes for sequences and consensuses should be included in pangenome.json.\n| VERBOSE | --verbose, -v | No, default=False | Set if detailed log files must be produced.\n| QUIET | --quiet, -q | No, default=False | Set to turn off console logging.\n| FASTA | --output_fasta | No, default=False | Set to create fasta files with consensuses.\n| PO | -output_po | No, default=False | Set to create po file with multialignment (without consensuses).\n\n#### Sequence Naming Convention\n\n[seqid].[anything after first dot is ignored]\n\n### Example use cases\n1. Build PO-MSA using default settings (transform to DAG, download missing nucleotides from NCBI) and save to .po file :\n```\npython -m pangtreebuild --multialignment example_data/Ebola/multialignment.maf -po\n\n```\nwill produce:\n\n- pangenome.json\n- poagraph.po\n\n2. Generate Affinity Tree, use metadata, detailed logging and default algorithm settings.\n```\npython3 -m pangtreebuild --multialignemnt example_data/Ebola/multialignment.maf -metadata example_data/Ebola/metadata.csv -affinity tree -v\n```\nwill produce:\n\n- pangenome.json\n- details.log\n- affinitytree/\n    - tresholds.csv\n    - *.po files from internal calls to poa software*\n\n\n## Tests\n```\npython3 -m unittest discover -s pangtreebuild -p tests_*\n```\nor\n\n```\nnosetests pangtreebuild\n```\n## Authors\nThis software is developed with support of [OPUS 11 scientific project of National Science Centre:  Incorporating genomic variation information \ninto DNA sequencing data analysis](https://www.mimuw.edu.pl/~dojer/rmg/)\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Bibliography\n1. [**Computational pan-genomics: status, promises and challenges**](https://doi.org/10.1093/bib/bbw089) \nThe Computational Pan-Genomics Consortium. Briefings in Bioinformatics, Volume 19, Issue 1, January 2018, Pages 118\u2013135.\n\n2. [**Generating consensus sequences from partial order multiple sequence alignment graphs**](https://doi.org/10.1093/bioinformatics/btg109) C. Lee, Bioinformatics, Volume 19, Issue 8, 22 May 2003, Pages 999\u20131008\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/meoke/pangtree", "keywords": "", "license": "MIT Licence", "maintainer": "", "maintainer_email": "", "name": "pangtreebuild", "package_url": "https://pypi.org/project/pangtreebuild/", "platform": "", "project_url": "https://pypi.org/project/pangtreebuild/", "project_urls": {"Homepage": "https://github.com/meoke/pangtree"}, "release_url": "https://pypi.org/project/pangtreebuild/1.0.3/", "requires_dist": ["biopython", "numpy", "jsonpickle", "ddt", "networkx", "six", "newick"], "requires_python": "", "summary": "Multiple sequence alignment analysis with Affinity Tree generation", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/meoke/pangtree\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68e759d5bd173708e9f4979ee1de859467df9e05/68747470733a2f2f7472617669732d63692e6f72672f6d656f6b652f70616e67747265652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>PangtreeeBuild</h1>\n<p>This repository contains tool for multiple sequence alignment analysis. It implements the idea of pan-genome (<a href=\"https://doi.org/10.1093/bib/bbw089\" rel=\"nofollow\">Ref. 1</a>) by representing the multialignment as a PO-MSA structure (Partial Order Alignment Graph - <a href=\"https://doi.org/10.1093/bioinformatics/btg109\" rel=\"nofollow\">Ref. 2</a>). The main purpose of this software is to construct an <em>Affinity Tree</em> - a phylogenetic-like tree, with an agreed sequence (<em>consensus sequence</em>) assigned for each node. The result is saved in JSON file (see its schema in pangtree/pangtreebuild/serialization/affinity_tree_schema.json). Its content can be visualised using <a href=\"https://github.com/meoke/pangtreevis\" rel=\"nofollow\">PangtreeVis</a>.</p>\n<p>This software is a part of the article: P.Dziadkiewicz, N.Dojer 'Getting insight into the pan-genome structure with Pangtree' that will be published soon in BMC Genomics.</p>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<p>Running:</p>\n<ul>\n<li><a href=\"http://python.org\" rel=\"nofollow\">Python 3.8</a></li>\n<li><a href=\"https://biopython.org/\" rel=\"nofollow\">BioPython</a></li>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"http://jsonpickle.github.io/\" rel=\"nofollow\">jsonpickle</a></li>\n<li><a href=\"https://networkx.github.io/\" rel=\"nofollow\">networkx</a></li>\n</ul>\n<p>Testing:</p>\n<ul>\n<li><a href=\"https://github.com/txels/ddt\" rel=\"nofollow\">DDT</a></li>\n</ul>\n<h3>Installing</h3>\n<pre><code>pip install pangtreebuild\n</code></pre>\n<h3>Quick installation check</h3>\n<p>This line builds a pan-genome model for an example alignment of 160 Ebola virus sequences and saves it to a JSON file.</p>\n<p><code>python3 -m pangtreebuild --multialignment example_data/Ebola/multialignment.maf</code></p>\n<h2>Usage</h2>\n<ol>\n<li>Import package <strong>pangtreebuild</strong> to your Python program and use it according to the documentation.</li>\n</ol>\n<p>or</p>\n<ol>\n<li>Use <strong>pangtreebuild</strong> via command line with following arguments:</li>\n</ol>\n<p>python3 -m pangtreebuild [args]</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>CLI</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Arguments affecting PO-MSA construction:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>MULTIALIGNMENT</td>\n<td>--multialignment</td>\n<td>Yes</td>\n<td>Path to the mulitalignment file (.maf or .po)</td>\n</tr>\n<tr>\n<td>METADATA</td>\n<td>--metadata</td>\n<td>No</td>\n<td>Optional information about sequences in csv format. The only required column: 'seqid' and its value must match multialignment files identifiers as described in <em>Sequence Naming Convention</em> (below). Example: example_data/Ebola/metadata.csv</td>\n</tr>\n<tr>\n<td>RAW_MAF</td>\n<td>--raw_maf</td>\n<td>No, default=False</td>\n<td>Build PO-MSA without transforming multialignment (MAF file) to DAG. PO-MSA built in this way does not reflect real life sequences.</td>\n</tr>\n<tr>\n<td>FASTA_PROVIDER</td>\n<td>--fasta_provider</td>\n<td>No</td>\n<td>Nucleotides source if any residues are missed in the multialignment file. Possible values: 'ncbi', 'file'. If not specified: MISSING_NUCLEOTIDE is used.</td>\n</tr>\n<tr>\n<td>MISSING_SYMBOL</td>\n<td>--missing_symbol</td>\n<td>No, default='?'</td>\n<td>Symbol for missing nucleotides used if no FASTA_PROVIDER is given.</td>\n</tr>\n<tr>\n<td>CACHE</td>\n<td>--cache</td>\n<td>No</td>\n<td>If set, sequences downloaded from NCBI are stored on local disc and reused between program calls, used if FASTA_PROVIDER is 'ncbi'</td>\n</tr>\n<tr>\n<td>FASTA_PATH</td>\n<td>-fasta_path</td>\n<td>Yes if FASTA_PROVIDER='FILE'</td>\n<td>Path to fasta file or zipped fasta files with whole sequences present in multialignment, used if FASTA_PROVIDER is 'FILE'.</td>\n</tr>\n<tr>\n<td>Arguments affecting Affinity Tree construction:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>AFFINITY</td>\n<td>-affinity</td>\n<td>No</td>\n<td>Possible values: 'TREE' (default algorithm, descibed in Documentation.md), 'POA' (simplified version, based solely on Ref. 2)</td>\n</tr>\n<tr>\n<td>BLOSUM</td>\n<td>--blosum</td>\n<td>No, default=bin\\blosum80.mat</td>\n<td>Path to the blosum filem. Blosum file must include MISSING_NUCLEOTIDE.</td>\n</tr>\n<tr>\n<td>HBMIN</td>\n<td>--hbmin</td>\n<td>No, default=0.9</td>\n<td>'POA' parameter. The minimum value of sequence compatibility to generated consensus.</td>\n</tr>\n<tr>\n<td>STOP</td>\n<td>--stop</td>\n<td>No, default=0.99</td>\n<td>'TREE' parameter. Minimum value of compatibility in tree leaves.</td>\n</tr>\n<tr>\n<td>P</td>\n<td>-p</td>\n<td>No, default=1</td>\n<td>'TREE' parameter. It changes the linear meaning of compatiblities during cutoff finding because the compatibilities are raised to the power o P. For P from range [0,1] it decreases distances between small compatibilities and increases distances between the bigger ones. For p &gt; 1 it increases distances between small compatibilities and decreases distances between the bigger ones.</td>\n</tr>\n<tr>\n<td>Arguments affecting output generation:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OUTPUT_DIR</td>\n<td>--output_dir, -o</td>\n<td>No, default=timestamped folder in current working directory</td>\n<td>Output directory path.</td>\n</tr>\n<tr>\n<td>OUTPUT_FULL</td>\n<td>--output_full</td>\n<td>No, default=False</td>\n<td>Set, if list of pangenome nodes for sequences and consensuses should be included in pangenome.json.</td>\n</tr>\n<tr>\n<td>VERBOSE</td>\n<td>--verbose, -v</td>\n<td>No, default=False</td>\n<td>Set if detailed log files must be produced.</td>\n</tr>\n<tr>\n<td>QUIET</td>\n<td>--quiet, -q</td>\n<td>No, default=False</td>\n<td>Set to turn off console logging.</td>\n</tr>\n<tr>\n<td>FASTA</td>\n<td>--output_fasta</td>\n<td>No, default=False</td>\n<td>Set to create fasta files with consensuses.</td>\n</tr>\n<tr>\n<td>PO</td>\n<td>-output_po</td>\n<td>No, default=False</td>\n<td>Set to create po file with multialignment (without consensuses).</td>\n</tr></tbody></table>\n<h4>Sequence Naming Convention</h4>\n<p>[seqid].[anything after first dot is ignored]</p>\n<h3>Example use cases</h3>\n<ol>\n<li>Build PO-MSA using default settings (transform to DAG, download missing nucleotides from NCBI) and save to .po file :</li>\n</ol>\n<pre><code>python -m pangtreebuild --multialignment example_data/Ebola/multialignment.maf -po\n\n</code></pre>\n<p>will produce:</p>\n<ul>\n<li>pangenome.json</li>\n<li>poagraph.po</li>\n</ul>\n<ol>\n<li>Generate Affinity Tree, use metadata, detailed logging and default algorithm settings.</li>\n</ol>\n<pre><code>python3 -m pangtreebuild --multialignemnt example_data/Ebola/multialignment.maf -metadata example_data/Ebola/metadata.csv -affinity tree -v\n</code></pre>\n<p>will produce:</p>\n<ul>\n<li>pangenome.json</li>\n<li>details.log</li>\n<li>affinitytree/\n<ul>\n<li>tresholds.csv</li>\n<li><em>.po files from internal calls to poa software</em></li>\n</ul>\n</li>\n</ul>\n<h2>Tests</h2>\n<pre><code>python3 -m unittest discover -s pangtreebuild -p tests_*\n</code></pre>\n<p>or</p>\n<pre><code>nosetests pangtreebuild\n</code></pre>\n<h2>Authors</h2>\n<p>This software is developed with support of <a href=\"https://www.mimuw.edu.pl/%7Edojer/rmg/\" rel=\"nofollow\">OPUS 11 scientific project of National Science Centre:  Incorporating genomic variation information\ninto DNA sequencing data analysis</a></p>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n<h2>Bibliography</h2>\n<ol>\n<li>\n<p><a href=\"https://doi.org/10.1093/bib/bbw089\" rel=\"nofollow\"><strong>Computational pan-genomics: status, promises and challenges</strong></a>\nThe Computational Pan-Genomics Consortium. Briefings in Bioinformatics, Volume 19, Issue 1, January 2018, Pages 118\u2013135.</p>\n</li>\n<li>\n<p><a href=\"https://doi.org/10.1093/bioinformatics/btg109\" rel=\"nofollow\"><strong>Generating consensus sequences from partial order multiple sequence alignment graphs</strong></a> C. Lee, Bioinformatics, Volume 19, Issue 8, 22 May 2003, Pages 999\u20131008</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 7087807, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "eff6b4fb89f4024078ccc85d5118b17a", "sha256": "8ef62722654385c43a34dbbec94967387e31b9e133df9905a1e64171b1ad86a8"}, "downloads": -1, "filename": "pangtreebuild-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eff6b4fb89f4024078ccc85d5118b17a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 211693, "upload_time": "2019-12-28T12:25:42", "upload_time_iso_8601": "2019-12-28T12:25:42.449495Z", "url": "https://files.pythonhosted.org/packages/95/f8/3ceaf9fd6c5bc6256e7ca5f795ac4863ec6188a795d523fb4214bef24370/pangtreebuild-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ad28a7dc31b7c6fc5b1f876461018a6", "sha256": "d490e2128c8049296fe0733a10c779a4c6f5bfe839704b8b86a4554cfd2c82cc"}, "downloads": -1, "filename": "pangtreebuild-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9ad28a7dc31b7c6fc5b1f876461018a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159858, "upload_time": "2019-12-28T12:25:47", "upload_time_iso_8601": "2019-12-28T12:25:47.615259Z", "url": "https://files.pythonhosted.org/packages/b4/a0/01a8233572afcc2a9d2554878d14a4467c60f12b215a476fc99b715e0bfc/pangtreebuild-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "903e31b6bb678b3052a46560eb925f5f", "sha256": "c9f75f927ff7ac511c914b4d8f6ef9ef3ab99dc2ecd4e326db8750f4e8072d11"}, "downloads": -1, "filename": "pangtreebuild-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "903e31b6bb678b3052a46560eb925f5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 211690, "upload_time": "2019-12-28T12:29:09", "upload_time_iso_8601": "2019-12-28T12:29:09.400890Z", "url": "https://files.pythonhosted.org/packages/5a/e5/78901395bcd8f01ccf89f1a5fdfe36a9f605a39a32fcc3cdf4471b521140/pangtreebuild-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3272564682f3a56a5885b3836c8a326c", "sha256": "3cb27cae6732622a2701d2642f2699aeb667c04ee67b3c806d3786c9ce3ac094"}, "downloads": -1, "filename": "pangtreebuild-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3272564682f3a56a5885b3836c8a326c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159848, "upload_time": "2019-12-28T12:29:14", "upload_time_iso_8601": "2019-12-28T12:29:14.092952Z", "url": "https://files.pythonhosted.org/packages/93/ed/ed18de6e6c4d7005a7a301eb845ae639fe4bcc98d545f6df0c4b276ec291/pangtreebuild-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "45749ad376d5198096692217bfba3856", "sha256": "5b0e4d92e394648efe5903e847312843a2b02d3de1644460058114c02e8f2653"}, "downloads": -1, "filename": "pangtreebuild-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45749ad376d5198096692217bfba3856", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 211858, "upload_time": "2019-12-31T19:59:39", "upload_time_iso_8601": "2019-12-31T19:59:39.727627Z", "url": "https://files.pythonhosted.org/packages/a4/32/8ab3105b1fbdb46f442ab4b57776f8b2b2b443fb27cacca235bf628a0d4d/pangtreebuild-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bab3ec0ea99d76e5fff87d4f4a22c29", "sha256": "bb01673142c52f02a7e10e9efe8eeabab745209cfade14fef30f7d61dd0b3384"}, "downloads": -1, "filename": "pangtreebuild-1.0.2.tar.gz", "has_sig": false, "md5_digest": "7bab3ec0ea99d76e5fff87d4f4a22c29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159780, "upload_time": "2019-12-31T19:59:48", "upload_time_iso_8601": "2019-12-31T19:59:48.937758Z", "url": "https://files.pythonhosted.org/packages/d1/29/cfbfa6fac91078cdcac4c901bedcbeac9cba399cdf18e88459ac55d53924/pangtreebuild-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "eadad64cbcf5ee05406b846dca2fcb81", "sha256": "f8fa82c2b44e8d1b58b7bec87e71a96c612e14c707dc4a07d2c90e089e39565b"}, "downloads": -1, "filename": "pangtreebuild-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eadad64cbcf5ee05406b846dca2fcb81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 211897, "upload_time": "2020-04-23T21:02:15", "upload_time_iso_8601": "2020-04-23T21:02:15.238807Z", "url": "https://files.pythonhosted.org/packages/16/f1/7a1c1580c201467ae7a9951ad124e176be22bda0cdfbc8109f2dcc6ae007/pangtreebuild-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edb5501eb2ab1ef9f12bc984b181ae6d", "sha256": "80da94318ac38e6a1e0e1bf3bd50fa39d7bb3c65a50c314e4a9fff85f57ae6ea"}, "downloads": -1, "filename": "pangtreebuild-1.0.3.tar.gz", "has_sig": false, "md5_digest": "edb5501eb2ab1ef9f12bc984b181ae6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159808, "upload_time": "2020-04-23T21:02:17", "upload_time_iso_8601": "2020-04-23T21:02:17.085700Z", "url": "https://files.pythonhosted.org/packages/36/e5/2fe555ee1fe1e3cf1f29abe00ac008f2114180b0c693a17424b8787b7bde/pangtreebuild-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eadad64cbcf5ee05406b846dca2fcb81", "sha256": "f8fa82c2b44e8d1b58b7bec87e71a96c612e14c707dc4a07d2c90e089e39565b"}, "downloads": -1, "filename": "pangtreebuild-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eadad64cbcf5ee05406b846dca2fcb81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 211897, "upload_time": "2020-04-23T21:02:15", "upload_time_iso_8601": "2020-04-23T21:02:15.238807Z", "url": "https://files.pythonhosted.org/packages/16/f1/7a1c1580c201467ae7a9951ad124e176be22bda0cdfbc8109f2dcc6ae007/pangtreebuild-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edb5501eb2ab1ef9f12bc984b181ae6d", "sha256": "80da94318ac38e6a1e0e1bf3bd50fa39d7bb3c65a50c314e4a9fff85f57ae6ea"}, "downloads": -1, "filename": "pangtreebuild-1.0.3.tar.gz", "has_sig": false, "md5_digest": "edb5501eb2ab1ef9f12bc984b181ae6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159808, "upload_time": "2020-04-23T21:02:17", "upload_time_iso_8601": "2020-04-23T21:02:17.085700Z", "url": "https://files.pythonhosted.org/packages/36/e5/2fe555ee1fe1e3cf1f29abe00ac008f2114180b0c693a17424b8787b7bde/pangtreebuild-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:17 2020"}