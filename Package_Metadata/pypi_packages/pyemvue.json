{"info": {"author": "magico13", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Home Automation"], "description": "# PyEmVue\n\nA Python Library for reading data from the Emporia Vue energy monitoring system.\n\nThe library can be invoked directly to pull back some basic info but requires your email and password to be added to a keys.json file, which is then replaced with the access tokens.\n\nAPI documentation can be [accessed here](api_docs.md)\n\nkeys.json\n\n```json\n{\n    \"email\": \"you@email.com\",\n    \"password\": \"password\"\n}\n```\n\n## Usage\n\n### Log in with username/password\n\n```python\nvue = PyEmVue()\nvue.login(username='you@email.com', password='password', token_storage_file='keys.json')\n```\n\n`token_storage_file` is an optional file path where the access tokens will be written for reuse in later invocations. It will be updated whenever the tokens are automatically refreshed.\n\n### Log in with access tokens\n\n```python\nwith open('keys.json') as f:\n    data = json.load(f)\n\nvue = PyEmVue()\nvue.login(id_token=data['id_token'],\n    access_token=data['access_token'],\n    refresh_token=data['refresh_token'],\n    token_storage_file='keys.json')\n```\n\n### Get customer details\n\n```python\nvue = PyEmVue()\nvue.login(id_token='id_token',\n    access_token='access_token',\n    refresh_token='refresh_token')\n\ncustomer = vue.get_customer_details()\n```\n\nReturns a Customer object with email address, name, customer_gid, and creation date\n\n### Get devices\n\n```python\nvue = PyEmVue()\nvue.login(id_token='id_token',\n    access_token='access_token',\n    refresh_token='refresh_token')\n\nvue.get_devices()\n```\n\nReturns a list of VueDevices with device information, including device_gid and list of VueDeviceChannels associated with the device. VueDeviceChannels are passed to other methods to get information for the specific channel.\n\n### Get total usage\n\n```python\nvue = PyEmVue()\nvue.login(id_token='id_token',\n    access_token='access_token',\n    refresh_token='refresh_token')\n\nenergy_usage = vue.get_total_usage(channel, timeFrame=TotalTimeFrame.ALL.value, unit=TotalUnit.WATTHOURS.value)\n```\n\nReturns the total usage over the time frame for the specified channel as a single float number. Generally energy over all time or month to date.\n\n#### Arguments\n\n- **channel**: A VueDeviceChannel from the `get_devices` call. Key parts are the `device_gid` and `channel_num`.\n- **timeFrame**: Any value from the `TotalTimeFrame` enum. Either all time or month to date.\n- **unit**: Any value from the `TotalUnit` enum. Currently only watthours.\n\n### Get recent usage\n\n```python\nvue = PyEmVue()\nvue.login(id_token='id_token',\n    access_token='access_token',\n    refresh_token='refresh_token')\n\nchannel_usage_list = vue.get_recent_usage(scale=Scale.HOUR.value, unit=Unit.WATTS.value)\nfor channel in channel_usage_list:\n    print(channel.usage)\n```\n\nReturns list of `ViewDeviceChannelUsage` objects giving usage over the `scale` timeframe in the `unit` specified. For a scale of under 1 hour this will give the average usage over the time frame (ie kW), for an hour or more it gives the total usage (ie kWh).\n\n#### Arguments\n\n- **scale**: Any value from the `Scale` enum. From 1 second to 1 year.\n- **unit**: Any value from the `Unit` enum. Generally watts but there are options for dollars or trees or miles driven, etc.\n\n### Get usage over time\n\n```python\nvue = PyEmVue()\nvue.login(id_token='id_token',\n    access_token='access_token',\n    refresh_token='refresh_token')\n\nusage_time = vue.get_usage_over_time(channel, start, end, scale=Scale.SECOND.value, unit=Unit.WATTS.value)\n\n# Throw into matplotlib for plotting\n```\n\nReturns the energy used by the VueDeviceChannel between the `start` and `end` datetimes for each `scale` timeframe. In other words, if `scale` is seconds and there's a minute between `start` and `end`, you'll get 60 data points in the output.\n\n#### Arguments\n\n- **channel**: A VueDeviceChannel from the `get_devices` call. Key parts are the `device_gid` and `channel_num`.\n- **start**: Starting `datetime` given in UTC.\n- **end**: Ending `datetime` given in UTC.\n- **scale**: Any value of `Scale` enum at HOUR or finer, DAY and higher is not supported. For 1 hour between `start` and `end` you'd get 3600 data points at SECOND, 60 at MINUTE, or 4 at MINUTE_15.\n- **unit**: Any value of `Unit` enum, generally watts.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/magico13/PyEmVue", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyemvue", "package_url": "https://pypi.org/project/pyemvue/", "platform": "", "project_url": "https://pypi.org/project/pyemvue/", "project_urls": {"Homepage": "https://github.com/magico13/PyEmVue"}, "release_url": "https://pypi.org/project/pyemvue/0.9.3/", "requires_dist": ["warrant", "requests"], "requires_python": ">=2.7", "summary": "Library for interacting with the Emporia Vue energy monitor.", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyEmVue</h1>\n<p>A Python Library for reading data from the Emporia Vue energy monitoring system.</p>\n<p>The library can be invoked directly to pull back some basic info but requires your email and password to be added to a keys.json file, which is then replaced with the access tokens.</p>\n<p>API documentation can be <a href=\"api_docs.md\" rel=\"nofollow\">accessed here</a></p>\n<p>keys.json</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"you@email.com\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"password\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Usage</h2>\n<h3>Log in with username/password</h3>\n<pre><span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'you@email.com'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">token_storage_file</span><span class=\"o\">=</span><span class=\"s1\">'keys.json'</span><span class=\"p\">)</span>\n</pre>\n<p><code>token_storage_file</code> is an optional file path where the access tokens will be written for reuse in later invocations. It will be updated whenever the tokens are automatically refreshed.</p>\n<h3>Log in with access tokens</h3>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'keys.json'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">id_token</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'id_token'</span><span class=\"p\">],</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'access_token'</span><span class=\"p\">],</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">],</span>\n    <span class=\"n\">token_storage_file</span><span class=\"o\">=</span><span class=\"s1\">'keys.json'</span><span class=\"p\">)</span>\n</pre>\n<h3>Get customer details</h3>\n<pre><span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">id_token</span><span class=\"o\">=</span><span class=\"s1\">'id_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'access_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n\n<span class=\"n\">customer</span> <span class=\"o\">=</span> <span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">get_customer_details</span><span class=\"p\">()</span>\n</pre>\n<p>Returns a Customer object with email address, name, customer_gid, and creation date</p>\n<h3>Get devices</h3>\n<pre><span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">id_token</span><span class=\"o\">=</span><span class=\"s1\">'id_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'access_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">get_devices</span><span class=\"p\">()</span>\n</pre>\n<p>Returns a list of VueDevices with device information, including device_gid and list of VueDeviceChannels associated with the device. VueDeviceChannels are passed to other methods to get information for the specific channel.</p>\n<h3>Get total usage</h3>\n<pre><span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">id_token</span><span class=\"o\">=</span><span class=\"s1\">'id_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'access_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n\n<span class=\"n\">energy_usage</span> <span class=\"o\">=</span> <span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">get_total_usage</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">timeFrame</span><span class=\"o\">=</span><span class=\"n\">TotalTimeFrame</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">TotalUnit</span><span class=\"o\">.</span><span class=\"n\">WATTHOURS</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<p>Returns the total usage over the time frame for the specified channel as a single float number. Generally energy over all time or month to date.</p>\n<h4>Arguments</h4>\n<ul>\n<li><strong>channel</strong>: A VueDeviceChannel from the <code>get_devices</code> call. Key parts are the <code>device_gid</code> and <code>channel_num</code>.</li>\n<li><strong>timeFrame</strong>: Any value from the <code>TotalTimeFrame</code> enum. Either all time or month to date.</li>\n<li><strong>unit</strong>: Any value from the <code>TotalUnit</code> enum. Currently only watthours.</li>\n</ul>\n<h3>Get recent usage</h3>\n<pre><span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">id_token</span><span class=\"o\">=</span><span class=\"s1\">'id_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'access_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n\n<span class=\"n\">channel_usage_list</span> <span class=\"o\">=</span> <span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">get_recent_usage</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">Scale</span><span class=\"o\">.</span><span class=\"n\">HOUR</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">Unit</span><span class=\"o\">.</span><span class=\"n\">WATTS</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">channel</span> <span class=\"ow\">in</span> <span class=\"n\">channel_usage_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">usage</span><span class=\"p\">)</span>\n</pre>\n<p>Returns list of <code>ViewDeviceChannelUsage</code> objects giving usage over the <code>scale</code> timeframe in the <code>unit</code> specified. For a scale of under 1 hour this will give the average usage over the time frame (ie kW), for an hour or more it gives the total usage (ie kWh).</p>\n<h4>Arguments</h4>\n<ul>\n<li><strong>scale</strong>: Any value from the <code>Scale</code> enum. From 1 second to 1 year.</li>\n<li><strong>unit</strong>: Any value from the <code>Unit</code> enum. Generally watts but there are options for dollars or trees or miles driven, etc.</li>\n</ul>\n<h3>Get usage over time</h3>\n<pre><span class=\"n\">vue</span> <span class=\"o\">=</span> <span class=\"n\">PyEmVue</span><span class=\"p\">()</span>\n<span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">id_token</span><span class=\"o\">=</span><span class=\"s1\">'id_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'access_token'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n\n<span class=\"n\">usage_time</span> <span class=\"o\">=</span> <span class=\"n\">vue</span><span class=\"o\">.</span><span class=\"n\">get_usage_over_time</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">Scale</span><span class=\"o\">.</span><span class=\"n\">SECOND</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">Unit</span><span class=\"o\">.</span><span class=\"n\">WATTS</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Throw into matplotlib for plotting</span>\n</pre>\n<p>Returns the energy used by the VueDeviceChannel between the <code>start</code> and <code>end</code> datetimes for each <code>scale</code> timeframe. In other words, if <code>scale</code> is seconds and there's a minute between <code>start</code> and <code>end</code>, you'll get 60 data points in the output.</p>\n<h4>Arguments</h4>\n<ul>\n<li><strong>channel</strong>: A VueDeviceChannel from the <code>get_devices</code> call. Key parts are the <code>device_gid</code> and <code>channel_num</code>.</li>\n<li><strong>start</strong>: Starting <code>datetime</code> given in UTC.</li>\n<li><strong>end</strong>: Ending <code>datetime</code> given in UTC.</li>\n<li><strong>scale</strong>: Any value of <code>Scale</code> enum at HOUR or finer, DAY and higher is not supported. For 1 hour between <code>start</code> and <code>end</code> you'd get 3600 data points at SECOND, 60 at MINUTE, or 4 at MINUTE_15.</li>\n<li><strong>unit</strong>: Any value of <code>Unit</code> enum, generally watts.</li>\n</ul>\n\n          </div>"}, "last_serial": 6802752, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "da11cbea738ad7aac3d75ff99f8d879c", "sha256": "09aa5c0d12be6db04d8393b3d4f7ddee9fc8d4a614236d340d631ec9be642b5a"}, "downloads": -1, "filename": "pyemvue-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "da11cbea738ad7aac3d75ff99f8d879c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8035, "upload_time": "2020-03-12T22:18:03", "upload_time_iso_8601": "2020-03-12T22:18:03.528840Z", "url": "https://files.pythonhosted.org/packages/0c/d1/e5269a56b599f748a56f28bdda6486776086a76dc4da2917bfc23c364fae/pyemvue-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64a06e9aa25fa8913eec1315d8a022a6", "sha256": "edabcf33e7d349155952e1568bcaf5544e4f90d25f32dcde7c6e9d5958bdcca1"}, "downloads": -1, "filename": "pyemvue-0.9.0.tar.gz", "has_sig": false, "md5_digest": "64a06e9aa25fa8913eec1315d8a022a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7440, "upload_time": "2020-03-12T22:18:05", "upload_time_iso_8601": "2020-03-12T22:18:05.291192Z", "url": "https://files.pythonhosted.org/packages/71/46/47e89ce69ac4c6a71b8195f12df07bd395e581c3b86a00bbb70abcab184f/pyemvue-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "40c95198151a9608a8f87a6d7729ec49", "sha256": "54bab828482d5abfd692115d55f7f317aa0a8bd1e4ed5a11d21e417063858ba1"}, "downloads": -1, "filename": "pyemvue-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "40c95198151a9608a8f87a6d7729ec49", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8396, "upload_time": "2020-03-12T22:23:36", "upload_time_iso_8601": "2020-03-12T22:23:36.088874Z", "url": "https://files.pythonhosted.org/packages/92/88/aec7f17e0577b79618d0e53c74be75a0fd941d207e4078c81cd7351ef09b/pyemvue-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3cc0efa60f4e471cb3c2c5b2c94e06f", "sha256": "76da5e55742cb99fe25e864b65ae3525d35515ff74c0fe1d28d94295d6d22784"}, "downloads": -1, "filename": "pyemvue-0.9.1.tar.gz", "has_sig": false, "md5_digest": "c3cc0efa60f4e471cb3c2c5b2c94e06f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7563, "upload_time": "2020-03-12T22:23:37", "upload_time_iso_8601": "2020-03-12T22:23:37.006518Z", "url": "https://files.pythonhosted.org/packages/d4/10/0862ebc1eb0717131b686d2527d8d22e61bb1b17dbf6b28f72bd9335f66e/pyemvue-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "72484f8a658158c775aad589d5cb4fdd", "sha256": "201d1fd392244190f7331c23ace49a9d76f6bed1d45341f9a690bee4190de282"}, "downloads": -1, "filename": "pyemvue-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "72484f8a658158c775aad589d5cb4fdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8559, "upload_time": "2020-03-12T22:55:39", "upload_time_iso_8601": "2020-03-12T22:55:39.607346Z", "url": "https://files.pythonhosted.org/packages/9a/b1/627d4db78c1779a7d37a4804f64032159cf22be255c5c00f430dae55dce0/pyemvue-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "282f82dce625883310c6c48f50e89473", "sha256": "b03599db4656c5c6c08593e0e5316dae0342f196aea84111209cecb8e0d62d5f"}, "downloads": -1, "filename": "pyemvue-0.9.2.tar.gz", "has_sig": false, "md5_digest": "282f82dce625883310c6c48f50e89473", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7739, "upload_time": "2020-03-12T22:55:40", "upload_time_iso_8601": "2020-03-12T22:55:40.634901Z", "url": "https://files.pythonhosted.org/packages/fe/94/805d642808e396b396d107f6ae3ccd46024a4acfb7c5045bfcd897fff98b/pyemvue-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "3f0d9b9b5d2fe2ee117498b42ffe7400", "sha256": "0a7ac697a4df39d74d88c8764e0699c26cb1b83bc8dfed2e19579c2f99854da7"}, "downloads": -1, "filename": "pyemvue-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3f0d9b9b5d2fe2ee117498b42ffe7400", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8597, "upload_time": "2020-03-12T23:14:28", "upload_time_iso_8601": "2020-03-12T23:14:28.022308Z", "url": "https://files.pythonhosted.org/packages/97/b0/5d139078cc48b9b7ccdabba86a38fd89e688424b6872b800fe227c4e24a9/pyemvue-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "587f6cbe38084eead279dcf3c9339f62", "sha256": "425cbe63860a726b762c220623e2c172b6142a391165a265f48d38b77c2299e4"}, "downloads": -1, "filename": "pyemvue-0.9.3.tar.gz", "has_sig": false, "md5_digest": "587f6cbe38084eead279dcf3c9339f62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7784, "upload_time": "2020-03-12T23:14:29", "upload_time_iso_8601": "2020-03-12T23:14:29.695738Z", "url": "https://files.pythonhosted.org/packages/0e/a7/7054fa7d3ec4bc53d8f6f866045e9d1a1d161bda3dc4eb5ed968275ed9d2/pyemvue-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f0d9b9b5d2fe2ee117498b42ffe7400", "sha256": "0a7ac697a4df39d74d88c8764e0699c26cb1b83bc8dfed2e19579c2f99854da7"}, "downloads": -1, "filename": "pyemvue-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3f0d9b9b5d2fe2ee117498b42ffe7400", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8597, "upload_time": "2020-03-12T23:14:28", "upload_time_iso_8601": "2020-03-12T23:14:28.022308Z", "url": "https://files.pythonhosted.org/packages/97/b0/5d139078cc48b9b7ccdabba86a38fd89e688424b6872b800fe227c4e24a9/pyemvue-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "587f6cbe38084eead279dcf3c9339f62", "sha256": "425cbe63860a726b762c220623e2c172b6142a391165a265f48d38b77c2299e4"}, "downloads": -1, "filename": "pyemvue-0.9.3.tar.gz", "has_sig": false, "md5_digest": "587f6cbe38084eead279dcf3c9339f62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 7784, "upload_time": "2020-03-12T23:14:29", "upload_time_iso_8601": "2020-03-12T23:14:29.695738Z", "url": "https://files.pythonhosted.org/packages/0e/a7/7054fa7d3ec4bc53d8f6f866045e9d1a1d161bda3dc4eb5ed968275ed9d2/pyemvue-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:24 2020"}