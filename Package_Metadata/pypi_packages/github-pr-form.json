{"info": {"author": "Aaron N Browne", "author_email": "aaron0browne@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Topic :: Software Development :: Version Control"], "description": "# GitHub PR Form\n\nA small python utility for generating forms from the command line and adding them to GitHub pull requests or issues, while tracking them in a secondary github repo.\n\n## Use Case\n\nThis utility was developed to meet a change management security control, which requires RFC forms be included with pull requests to the production code base. However, it would be useful for any type of forms that need to be repeatably and reliably generated and added to GitHub pull requests. It should work equally well to add forms to GitHub issues.\n\n## Requirements\n\n- Python 2.6 or 2.7\n    - github3, sh, click, markdown2, and selenium python packages, which should be installed automatically\n- Firefox (for generation of PNG screenshots through selenium)\n\n## Installation\n\nMost Mac and Linux distributions should already have a compatible version of Python installed. Check your python installation by running `which python && python --version`. If you need to install Python, follow instructions at https://www.python.org/. Install or update Firefox at https://www.mozilla.org/firefox/new/.\n\nInstall the package with:\n\n`pip install github-pr-form`\n\n## Configuration\n\nWhere the phrase 'target repo' appears here, it refers to a repository whose pull requests will receive generated forms. Where the phrase 'tracking repo' appears, it refers to a repository used for tracking generated forms. More than one target repo may share a single tracking repo.\n\nBoth the target repo and tracking repo must be initialized and pushed to GitHub before configuration. The tracking repo should be empty to begin with and remain dedicated to the purpose of tracking forms. For the following examples, the fictional `octocat/target` and `octocat/tracking` will be used.\n\nGenerate a GitHub access token at https://github.com/settings/tokens/new with the 'repo' scope. For the examples, a fictional `XXXXXX` token will be used.\n\nForm generation relies on templates (see the full discussion of template format [below](#template-format)). For the examples, a fictional `/Users/user/Desktop/rfc.json` template will be used.\n\nInitialize a target repo with:\n\n`ghform init --tracker=octact/tracking --token=XXXXXX octocat/target`\n\nAdd a template to the tracking repo with:\n\n`ghform addtpl --tracker=octocat/tracking /Users/user/Desktop/rfc.json`\n\n## General Usage\n\nGenerate a form and add it to a pull request with:\n\n`ghform add --tpl=rfc octocat/target/pull/1`\n\nThe user will be prompted to respond to each field in a template and each response will be validated. If a response is determined to be invalid (see types of validity checks [below](#field-types-and-attributes)), an explanation is printed and the prompt is repeated. If a form from the given template already exists on the pull request, the existing responses will be set as defaults. Form generation may be aborted at any time with a `SIGINT` (`ctrl-c`). Response prompts are formatted simply and generally look like:\n\n```markdown\nField Name\n    field description\n    options: a, b, c\n    type [default]:\n\n```\n\nOnce a form has been completed, it is saved in the tracking repo in `json`, `md`, `html`, and `png` formats. A comment is added on the pull request declaring that a form is about to be uploaded and linking to the `png` format. Another comment is added with the entire form in `md` format. If any actions (label application or user assignment, see [below](#field-types-and-attributes)) have been triggered, they are carried out. Note that if a form from from the same template has previously been added to the given pull request, the files in the tracking repo are overwritten (of course, they remain in the repo commit history).\n\n## Example Usage\n\nThe [aaron0browne/github-pr-form-tracking](https://github.com/aaron0browne/github-pr-form-tracking) was set up as both a target and a tracking repo, which wouldn't make any sense in the real world, but is useful for this example. An issue was added to store uploaded images and another to receive a generated form (since there was no pull request to submit). The commands executed and results were:\n\n`ghform init --tracker=aaron0browne/github-pr-form-tracking --token=XXXXXX aaron0browne/github-pr-form-tracking`\n\nThis command just wrote a local config file with the given information.\n\n`ghform addtpl --tracker=aaron0browne/github-pr-form-tracking rfc.json`\n\nThis command added a `tpl` directory to the tracking repo and the example [rfc.json](ghform/rfc.json) template in that directory.\n\n`ghform add --tpl=rfc aaron0browne/github-pr-form-tracking/issues/2`\n\nThis command kicked off the form response prompts at the command line:\n\n![example-cli](https://cloud.githubusercontent.com/assets/3409975/5013229/25c2b544-6a5a-11e4-9571-4734dc109dbf.png)\n\nOnce all the prompts were completed, the form was formatted, converted, and saved as `json`, `md`, `html`, and `png` in the tracking repo:\n\n![example-storage](https://cloud.githubusercontent.com/assets/3409975/5013238/31599422-6a5a-11e4-852b-4f8d7a76b903.png)\n\nAnd two comments were added to the [target issue](https://github.com/aaron0browne/github-pr-form-tracking/issues/2) (the first comment was manually added when the issue was opened):\n\n![example-result](https://cloud.githubusercontent.com/assets/3409975/5013236/2b81a8b4-6a5a-11e4-81b9-43be3d4bd713.png)\n\nNote that the defined labels were added to the issue and @aaron0browne was assigned as well.\n\n## Template Format\n\nA sample template file is included [here](ghform/rfc.json). Template files are in json format, with the following structure (where `...` represents a repeating structure in a list):\n\n```json\n{\n    \"name\": \"Form Name\",\n    \"fields\": [\n        {\n            \"name\": \"top level field name\",\n            \"type\": \"field type\",\n            \"description\": \"field description\"\n        },\n        ...\n    ],\n    \"groups\": [\n        {\n            \"name\": \"Group Name\",\n            \"fields\": [\n                {\n                    \"name\": \"group level field name\",\n                    \"type\": \"field type\",\n                    \"description\": \"field description\"\n                },\n                ...\n            ]\n            \n        },\n        ...\n    ]\n}\n```\n\n## Field Types and Attributes\n\nThe defined field types are:\n\n- `text`\n- `url/text`\n- `datetime`\n- `time`\n- `choice`\n- `username`\n\nAdditionally, fields may have the following attributes:\n\n- `options`\n- `default`\n- `action`\n\n### Text\n\nThese fields perform no validation and the response is inserted on the line below the field name when output.\n\n### URL/Text\n\nIn addition to being inserted below the field name on output, if the response to these fields is a single string without any whitespace, it is assumed to be a a URL and deemed invalid if it can't be opened. Additionally, if the URL ends with `.png`, `.jpg`, `.gif`, `.psd`, or `.svg`, the image is included inline in the output.\n\n### Datetime\n\nThese fields are validated against a `MM-DD-YY HH:MM` format and output directly to the right of the field name.\n\n### Time\n\nThese fields are validated againast a `HH:MM` format and output directly to the right of the field name.\n\n### Choice\n\nThese fields include the `options` attribute in the template and responses are validated against the option list. Responses are output directly to the right of the field name.\n\n### Username\n\nThese fields are validated against the GitHub user database. If they include an `options` attribute, responses are additionally validated againast the option list. Output is to the right of the field name.\n\n### Options\n\nThis attribute should be a list of objects, with each object containing a name and optionally a label (example below). If a label is included and that option is chosen, the label is applied to the pull request. Options are shown when user responses are gathered at the command line.\n\n```json\n\"options\": [\n    {\n        \"name\": \"option name\",\n        \"label\": \"optional label to be applied if chosen\"\n    },\n    ...\n]\n```\n\n### Default\n\nAny field type may define a default (a string), which is suggested when responses are gathered. If the default is not defined for a field with options, the first option is used. On a username field, if the default is `submitter`, the pull request submitter is used. If a form of the given template has already been created on the given pull request, the existing response is used as the default for all fields.\n\n### Action\n\nThe only currently defined action is `assign` on username fields. The chosen user will be assigned to the pull request.\n\n## Further Development\n\n- Fix `rfc` label bug where the label gets added and immediately removed\n- Ability to define standard 'plans' as URLs on a per target repo basis\n\nPlease open an issue if you have a suggestion or find a bug.", "description_content_type": null, "docs_url": null, "download_url": "httpd://github.com/aaron0browne/github-pr-form/tarball/v0.1.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aaron0browne/github-pr-form", "keywords": "github,rfc,change control,form,pull request", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "github-pr-form", "package_url": "https://pypi.org/project/github-pr-form/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/github-pr-form/", "project_urls": {"Download": "httpd://github.com/aaron0browne/github-pr-form/tarball/v0.1.1", "Homepage": "https://github.com/aaron0browne/github-pr-form"}, "release_url": "https://pypi.org/project/github-pr-form/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A small python utility for generating forms from the command line and adding them to GitHub pull requests or issues, while tracking them in a secondary github repo.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # GitHub PR Form<br><br>A small python utility for generating forms from the command line and adding them to GitHub pull requests or issues, while tracking them in a secondary github repo.<br><br>## Use Case<br><br>This utility was developed to meet a change management security control, which requires RFC forms be included with pull requests to the production code base. However, it would be useful for any type of forms that need to be repeatably and reliably generated and added to GitHub pull requests. It should work equally well to add forms to GitHub issues.<br><br>## Requirements<br><br>- Python 2.6 or 2.7<br>    - github3, sh, click, markdown2, and selenium python packages, which should be installed automatically<br>- Firefox (for generation of PNG screenshots through selenium)<br><br>## Installation<br><br>Most Mac and Linux distributions should already have a compatible version of Python installed. Check your python installation by running `which python &amp;&amp; python --version`. If you need to install Python, follow instructions at https://www.python.org/. Install or update Firefox at https://www.mozilla.org/firefox/new/.<br><br>Install the package with:<br><br>`pip install github-pr-form`<br><br>## Configuration<br><br>Where the phrase 'target repo' appears here, it refers to a repository whose pull requests will receive generated forms. Where the phrase 'tracking repo' appears, it refers to a repository used for tracking generated forms. More than one target repo may share a single tracking repo.<br><br>Both the target repo and tracking repo must be initialized and pushed to GitHub before configuration. The tracking repo should be empty to begin with and remain dedicated to the purpose of tracking forms. For the following examples, the fictional `octocat/target` and `octocat/tracking` will be used.<br><br>Generate a GitHub access token at https://github.com/settings/tokens/new with the 'repo' scope. For the examples, a fictional `XXXXXX` token will be used.<br><br>Form generation relies on templates (see the full discussion of template format [below](#template-format)). For the examples, a fictional `/Users/user/Desktop/rfc.json` template will be used.<br><br>Initialize a target repo with:<br><br>`ghform init --tracker=octact/tracking --token=XXXXXX octocat/target`<br><br>Add a template to the tracking repo with:<br><br>`ghform addtpl --tracker=octocat/tracking /Users/user/Desktop/rfc.json`<br><br>## General Usage<br><br>Generate a form and add it to a pull request with:<br><br>`ghform add --tpl=rfc octocat/target/pull/1`<br><br>The user will be prompted to respond to each field in a template and each response will be validated. If a response is determined to be invalid (see types of validity checks [below](#field-types-and-attributes)), an explanation is printed and the prompt is repeated. If a form from the given template already exists on the pull request, the existing responses will be set as defaults. Form generation may be aborted at any time with a `SIGINT` (`ctrl-c`). Response prompts are formatted simply and generally look like:<br><br>```markdown<br>Field Name<br>    field description<br>    options: a, b, c<br>    type [default]:<br><br>```<br><br>Once a form has been completed, it is saved in the tracking repo in `json`, `md`, `html`, and `png` formats. A comment is added on the pull request declaring that a form is about to be uploaded and linking to the `png` format. Another comment is added with the entire form in `md` format. If any actions (label application or user assignment, see [below](#field-types-and-attributes)) have been triggered, they are carried out. Note that if a form from from the same template has previously been added to the given pull request, the files in the tracking repo are overwritten (of course, they remain in the repo commit history).<br><br>## Example Usage<br><br>The [aaron0browne/github-pr-form-tracking](https://github.com/aaron0browne/github-pr-form-tracking) was set up as both a target and a tracking repo, which wouldn't make any sense in the real world, but is useful for this example. An issue was added to store uploaded images and another to receive a generated form (since there was no pull request to submit). The commands executed and results were:<br><br>`ghform init --tracker=aaron0browne/github-pr-form-tracking --token=XXXXXX aaron0browne/github-pr-form-tracking`<br><br>This command just wrote a local config file with the given information.<br><br>`ghform addtpl --tracker=aaron0browne/github-pr-form-tracking rfc.json`<br><br>This command added a `tpl` directory to the tracking repo and the example [rfc.json](ghform/rfc.json) template in that directory.<br><br>`ghform add --tpl=rfc aaron0browne/github-pr-form-tracking/issues/2`<br><br>This command kicked off the form response prompts at the command line:<br><br>![example-cli](https://cloud.githubusercontent.com/assets/3409975/5013229/25c2b544-6a5a-11e4-9571-4734dc109dbf.png)<br><br>Once all the prompts were completed, the form was formatted, converted, and saved as `json`, `md`, `html`, and `png` in the tracking repo:<br><br>![example-storage](https://cloud.githubusercontent.com/assets/3409975/5013238/31599422-6a5a-11e4-852b-4f8d7a76b903.png)<br><br>And two comments were added to the [target issue](https://github.com/aaron0browne/github-pr-form-tracking/issues/2) (the first comment was manually added when the issue was opened):<br><br>![example-result](https://cloud.githubusercontent.com/assets/3409975/5013236/2b81a8b4-6a5a-11e4-81b9-43be3d4bd713.png)<br><br>Note that the defined labels were added to the issue and @aaron0browne was assigned as well.<br><br>## Template Format<br><br>A sample template file is included [here](ghform/rfc.json). Template files are in json format, with the following structure (where `...` represents a repeating structure in a list):<br><br>```json<br>{<br>    \"name\": \"Form Name\",<br>    \"fields\": [<br>        {<br>            \"name\": \"top level field name\",<br>            \"type\": \"field type\",<br>            \"description\": \"field description\"<br>        },<br>        ...<br>    ],<br>    \"groups\": [<br>        {<br>            \"name\": \"Group Name\",<br>            \"fields\": [<br>                {<br>                    \"name\": \"group level field name\",<br>                    \"type\": \"field type\",<br>                    \"description\": \"field description\"<br>                },<br>                ...<br>            ]<br>            <br>        },<br>        ...<br>    ]<br>}<br>```<br><br>## Field Types and Attributes<br><br>The defined field types are:<br><br>- `text`<br>- `url/text`<br>- `datetime`<br>- `time`<br>- `choice`<br>- `username`<br><br>Additionally, fields may have the following attributes:<br><br>- `options`<br>- `default`<br>- `action`<br><br>### Text<br><br>These fields perform no validation and the response is inserted on the line below the field name when output.<br><br>### URL/Text<br><br>In addition to being inserted below the field name on output, if the response to these fields is a single string without any whitespace, it is assumed to be a a URL and deemed invalid if it can't be opened. Additionally, if the URL ends with `.png`, `.jpg`, `.gif`, `.psd`, or `.svg`, the image is included inline in the output.<br><br>### Datetime<br><br>These fields are validated against a `MM-DD-YY HH:MM` format and output directly to the right of the field name.<br><br>### Time<br><br>These fields are validated againast a `HH:MM` format and output directly to the right of the field name.<br><br>### Choice<br><br>These fields include the `options` attribute in the template and responses are validated against the option list. Responses are output directly to the right of the field name.<br><br>### Username<br><br>These fields are validated against the GitHub user database. If they include an `options` attribute, responses are additionally validated againast the option list. Output is to the right of the field name.<br><br>### Options<br><br>This attribute should be a list of objects, with each object containing a name and optionally a label (example below). If a label is included and that option is chosen, the label is applied to the pull request. Options are shown when user responses are gathered at the command line.<br><br>```json<br>\"options\": [<br>    {<br>        \"name\": \"option name\",<br>        \"label\": \"optional label to be applied if chosen\"<br>    },<br>    ...<br>]<br>```<br><br>### Default<br><br>Any field type may define a default (a string), which is suggested when responses are gathered. If the default is not defined for a field with options, the first option is used. On a username field, if the default is `submitter`, the pull request submitter is used. If a form of the given template has already been created on the given pull request, the existing response is used as the default for all fields.<br><br>### Action<br><br>The only currently defined action is `assign` on username fields. The chosen user will be assigned to the pull request.<br><br>## Further Development<br><br>- Fix `rfc` label bug where the label gets added and immediately removed<br>- Ability to define standard 'plans' as URLs on a per target repo basis<br><br>Please open an issue if you have a suggestion or find a bug.\n          </div>"}, "last_serial": 1304158, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cd13be375c2afdd254f013a61ccaba25", "sha256": "224a2ca4949017087d1155a0ff6843bea2c130fa841a24c504baf1b6fa3539c1"}, "downloads": -1, "filename": "github-pr-form-0.1.tar.gz", "has_sig": false, "md5_digest": "cd13be375c2afdd254f013a61ccaba25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8624, "upload_time": "2014-11-12T05:12:57", "upload_time_iso_8601": "2014-11-12T05:12:57.012139Z", "url": "https://files.pythonhosted.org/packages/4c/78/e7aa931028c708bb93390e94fb4db7312664a2eafede5a5168d29e0050b9/github-pr-form-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e2c809397869f6088ed8ad1ac4587cc3", "sha256": "ba65bc3a7f6ab41b8d86c6c5a255be4042370dccfcadf07047e3ce4ae2e639f5"}, "downloads": -1, "filename": "github-pr-form-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e2c809397869f6088ed8ad1ac4587cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8617, "upload_time": "2014-11-12T05:32:51", "upload_time_iso_8601": "2014-11-12T05:32:51.778355Z", "url": "https://files.pythonhosted.org/packages/41/fc/61bbe285a10896d2bdbf7b29bf8a66ce409ff216de1c30867d5eeb019021/github-pr-form-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2c809397869f6088ed8ad1ac4587cc3", "sha256": "ba65bc3a7f6ab41b8d86c6c5a255be4042370dccfcadf07047e3ce4ae2e639f5"}, "downloads": -1, "filename": "github-pr-form-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e2c809397869f6088ed8ad1ac4587cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8617, "upload_time": "2014-11-12T05:32:51", "upload_time_iso_8601": "2014-11-12T05:32:51.778355Z", "url": "https://files.pythonhosted.org/packages/41/fc/61bbe285a10896d2bdbf7b29bf8a66ce409ff216de1c30867d5eeb019021/github-pr-form-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:59 2020"}