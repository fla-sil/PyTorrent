{"info": {"author": "International Centre for Neuromorphic Systems, Alexandre Marcireau", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# AEDAT\n\nAEDAT is a fast AEDAT 4 python reader, with a Rust underlying implementation.\n\nRun `pip install aedat` to install it.\n\n# Documentation\n\nThe `aedat` library provides a single class: `Decoder`. A decoder object is created by passing a file name to `Decoder`. The file name must be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).\n\nHere's a short example:\n```python\nimport aedat\n\ndecoder = aedat.Decoder('/path/to/file.aedat')\nprint(decoder.id_to_stream())\n\nfor packet in decoder:\n    print(packet['stream_id'], end=': ')\n    if 'events' in packet:\n        print('{} polarity events'.format(len(packet['events'])))\n    elif 'frame' in packet:\n        print('{} x {} frame'.format(packet['frame']['width'], packet['frame']['height']))\n    elif 'imus' in packet:\n        print('{} IMU samples'.format(len(packet['imus'])))\n    elif 'triggers' in packet:\n        print('{} trigger events'.format(len(packet['triggers'])))\n```\n\nAnd the same example with detailed comments:\n\n```python\nimport aedat\n\ndecoder = aedat.Decoder('/path/to/file.aedat')\n\"\"\"\ndecoder is a packet iterator with an additional method id_to_stream\nid_to_stream returns a dictionary with the following structure:\n{\n    <int>: {\n        'type': <str>,\n    }\n}\ntype is one of 'events', 'frame', 'imus', 'triggers'\nif type is 'events' or 'frame', its parent dictionary has the following structure:\n{\n    'type': <str>,\n    'width': <int>,\n    'height': <int>,\n}\n\"\"\"\nprint(decoder.id_to_stream())\n\nfor packet in decoder:\n    \"\"\"\n    packet is a dictionary with the following structure:\n    {\n        'stream_id': <int>,\n    }\n    packet also has exactly one of the following fields:\n        'events', 'frame', 'imus', 'triggers'\n    \"\"\"\n    print(packet['stream_id'], end=': ')\n    if 'events' in packet:\n        \"\"\"\n        packet['events'] is a structured numpy array with the following dtype:\n            [\n                ('t', '<u8'),\n                ('x', '<u2'),\n                ('y', '<u2'),\n                ('on', '?'),\n            ]\n        \"\"\"\n        print('{} polarity events'.format(len(packet['events'])))\n    elif 'frame' in packet:\n        \"\"\"\n        packet['frame'] is a dictionary with the following structure:\n            {\n                't': <int>,\n                'begin_t': <int>,\n                'end_t': <int>,\n                'exposure_begin_t': <int>,\n                'exposure_end_t': <int>,\n                'format': <str>,\n                'width': <int>,\n                'height': <int>,\n                'offset_x': <int>,\n                'offset_y': <int>,\n                'pixels': <numpy.array(shape=(height, width), dtype=uint8)>,\n            }\n        format is one of 'Gray', 'BGR', 'BGRA'\n        \"\"\"\n        print('{} x {} frame'.format(packet['frame']['width'], packet['frame']['height']))\n    elif 'imus' in packet:\n        \"\"\"\n        packet['imus'] is a structured numpy array with the following dtype:\n            [\n                ('t', '<u8'),\n                ('temperature', '<f4'),\n                ('accelerometer_x', '<f4'),\n                ('accelerometer_y', '<f4'),\n                ('accelerometer_z', '<f4'),\n                ('gyroscope_x', '<f4'),\n                ('gyroscope_y', '<f4'),\n                ('gyroscope_z', '<f4'),\n                ('magnetometer_x', '<f4'),\n                ('magnetometer_y', '<f4'),\n                ('magnetometer_z', '<f4'),\n            ]\n        \"\"\"\n        print('{} IMU samples'.format(len(packet['imus'])))\n    elif 'triggers' in packet:\n        \"\"\"\n        packet['triggers'] is a structured numpy array with the following dtype:\n            [\n                ('t', '<u8'),\n                ('source', 'u1'),\n            ]\n        the source value has the following meaning:\n            0: timestamp reset\n            1: external signal rising edge\n            2: external signal falling edge\n            3: external signal pulse\n            4: external generator rising edge\n            5: external generator falling edge\n            6: frame begin\n            7: frame end\n            8: exposure begin\n            9: exposure end\n        \"\"\"\n        print('{} trigger events'.format(len(packet['triggers'])))\n```\n\nBecause the lifetime of the file handle is managed by Rust, decoder objects are not compatible with the [with](https://docs.python.org/3/reference/compound_stmts.html#with) statement. To ensure garbage collection, point the decoder variable to something else, for example `None`, when you are done using it:\n```py\nimport aedat\n\ndecoder = aedat.Decoder('/path/to/file.aedat')\n# do something with decoder\ndecoder = None\n```\n\n# Install from source\n\nThis library requires [Python 3.x](https://www.python.org), x >= 5, and [NumPy](https://numpy.org). This guide assumes that they are installed on your machine.\n\nA Rust compiling toolchain is required during the installation (but can be removed afterwards).\n\n## Linux\n\n```sh\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ngit clone https://github.com/neuromorphicsystems/aedat.git\ncd aedat\nrustup toolchain install nightly\nrustup override set nightly\ncargo build --release\ncp target/release/libaedat.so scripts/aedat.so\n```\n\nYou can now run the python scripts in the *scripts* directory. If you want to import the libary from another directory, copy *aedat.so* in said directory first.\n\n## macOS\n\n```sh\nbrew install rustup\nrustup-init\ngit clone https://github.com/neuromorphicsystems/aedat.git\ncd aedat\nrustup toolchain install nightly\nrustup override set nightly\ncargo build --release\ncp target/release/libaedat.dylib scripts/aedat.so\n```\n\nYou can now run the python scripts in the *scripts* directory. If you want to import the libary from another directory, copy *aedat.so* in said directory first.\n\n# Contribute\n\nAfter changing any of the files in *framebuffers*, one must run:\n```sh\nflatc --rust -o src/ flatbuffers/*.fbs\n```\n\nTo format the code, run:\n```sh\ncargo fmt\n```\nYou may need to install rustfmt first with:\n```sh\nrustup component add rustfmt\n```\n\nTo upload the package to pypi:\n- install [maturin](https://github.com/PyO3/maturin): `pip install maturin`\n- run `maturin publish`\n", "description_content_type": "text/markdown; charset=UTF-8; variant=GFM", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/neuromorphicsystems/aedat/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "aedat", "package_url": "https://pypi.org/project/aedat/", "platform": "", "project_url": "https://pypi.org/project/aedat/", "project_urls": {"Homepage": "https://github.com/neuromorphicsystems/aedat/"}, "release_url": "https://pypi.org/project/aedat/0.1.3/", "requires_dist": ["numpy>=1"], "requires_python": ">=3.5", "summary": "A fast AEDAT4 decoder with an underlying Rust implementation", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AEDAT</h1>\n<p>AEDAT is a fast AEDAT 4 python reader, with a Rust underlying implementation.</p>\n<p>Run <code>pip install aedat</code> to install it.</p>\n<h1>Documentation</h1>\n<p>The <code>aedat</code> library provides a single class: <code>Decoder</code>. A decoder object is created by passing a file name to <code>Decoder</code>. The file name must be a <a href=\"https://docs.python.org/3/glossary.html#term-path-like-object\" rel=\"nofollow\">path-like object</a>.</p>\n<p>Here's a short example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aedat</span>\n\n<span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"n\">aedat</span><span class=\"o\">.</span><span class=\"n\">Decoder</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.aedat'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">id_to_stream</span><span class=\"p\">())</span>\n\n<span class=\"k\">for</span> <span class=\"n\">packet</span> <span class=\"ow\">in</span> <span class=\"n\">decoder</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'stream_id'</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">': '</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'events'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> polarity events'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'events'</span><span class=\"p\">])))</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'frame'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> x </span><span class=\"si\">{}</span><span class=\"s1\"> frame'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'frame'</span><span class=\"p\">][</span><span class=\"s1\">'width'</span><span class=\"p\">],</span> <span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'frame'</span><span class=\"p\">][</span><span class=\"s1\">'height'</span><span class=\"p\">]))</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'imus'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> IMU samples'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'imus'</span><span class=\"p\">])))</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'triggers'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> trigger events'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'triggers'</span><span class=\"p\">])))</span>\n</pre>\n<p>And the same example with detailed comments:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aedat</span>\n\n<span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"n\">aedat</span><span class=\"o\">.</span><span class=\"n\">Decoder</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.aedat'</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">decoder is a packet iterator with an additional method id_to_stream</span>\n<span class=\"sd\">id_to_stream returns a dictionary with the following structure:</span>\n<span class=\"sd\">{</span>\n<span class=\"sd\">    &lt;int&gt;: {</span>\n<span class=\"sd\">        'type': &lt;str&gt;,</span>\n<span class=\"sd\">    }</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">type is one of 'events', 'frame', 'imus', 'triggers'</span>\n<span class=\"sd\">if type is 'events' or 'frame', its parent dictionary has the following structure:</span>\n<span class=\"sd\">{</span>\n<span class=\"sd\">    'type': &lt;str&gt;,</span>\n<span class=\"sd\">    'width': &lt;int&gt;,</span>\n<span class=\"sd\">    'height': &lt;int&gt;,</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">id_to_stream</span><span class=\"p\">())</span>\n\n<span class=\"k\">for</span> <span class=\"n\">packet</span> <span class=\"ow\">in</span> <span class=\"n\">decoder</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    packet is a dictionary with the following structure:</span>\n<span class=\"sd\">    {</span>\n<span class=\"sd\">        'stream_id': &lt;int&gt;,</span>\n<span class=\"sd\">    }</span>\n<span class=\"sd\">    packet also has exactly one of the following fields:</span>\n<span class=\"sd\">        'events', 'frame', 'imus', 'triggers'</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'stream_id'</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">': '</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'events'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        packet['events'] is a structured numpy array with the following dtype:</span>\n<span class=\"sd\">            [</span>\n<span class=\"sd\">                ('t', '&lt;u8'),</span>\n<span class=\"sd\">                ('x', '&lt;u2'),</span>\n<span class=\"sd\">                ('y', '&lt;u2'),</span>\n<span class=\"sd\">                ('on', '?'),</span>\n<span class=\"sd\">            ]</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> polarity events'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'events'</span><span class=\"p\">])))</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'frame'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        packet['frame'] is a dictionary with the following structure:</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                't': &lt;int&gt;,</span>\n<span class=\"sd\">                'begin_t': &lt;int&gt;,</span>\n<span class=\"sd\">                'end_t': &lt;int&gt;,</span>\n<span class=\"sd\">                'exposure_begin_t': &lt;int&gt;,</span>\n<span class=\"sd\">                'exposure_end_t': &lt;int&gt;,</span>\n<span class=\"sd\">                'format': &lt;str&gt;,</span>\n<span class=\"sd\">                'width': &lt;int&gt;,</span>\n<span class=\"sd\">                'height': &lt;int&gt;,</span>\n<span class=\"sd\">                'offset_x': &lt;int&gt;,</span>\n<span class=\"sd\">                'offset_y': &lt;int&gt;,</span>\n<span class=\"sd\">                'pixels': &lt;numpy.array(shape=(height, width), dtype=uint8)&gt;,</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        format is one of 'Gray', 'BGR', 'BGRA'</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> x </span><span class=\"si\">{}</span><span class=\"s1\"> frame'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'frame'</span><span class=\"p\">][</span><span class=\"s1\">'width'</span><span class=\"p\">],</span> <span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'frame'</span><span class=\"p\">][</span><span class=\"s1\">'height'</span><span class=\"p\">]))</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'imus'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        packet['imus'] is a structured numpy array with the following dtype:</span>\n<span class=\"sd\">            [</span>\n<span class=\"sd\">                ('t', '&lt;u8'),</span>\n<span class=\"sd\">                ('temperature', '&lt;f4'),</span>\n<span class=\"sd\">                ('accelerometer_x', '&lt;f4'),</span>\n<span class=\"sd\">                ('accelerometer_y', '&lt;f4'),</span>\n<span class=\"sd\">                ('accelerometer_z', '&lt;f4'),</span>\n<span class=\"sd\">                ('gyroscope_x', '&lt;f4'),</span>\n<span class=\"sd\">                ('gyroscope_y', '&lt;f4'),</span>\n<span class=\"sd\">                ('gyroscope_z', '&lt;f4'),</span>\n<span class=\"sd\">                ('magnetometer_x', '&lt;f4'),</span>\n<span class=\"sd\">                ('magnetometer_y', '&lt;f4'),</span>\n<span class=\"sd\">                ('magnetometer_z', '&lt;f4'),</span>\n<span class=\"sd\">            ]</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> IMU samples'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'imus'</span><span class=\"p\">])))</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'triggers'</span> <span class=\"ow\">in</span> <span class=\"n\">packet</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        packet['triggers'] is a structured numpy array with the following dtype:</span>\n<span class=\"sd\">            [</span>\n<span class=\"sd\">                ('t', '&lt;u8'),</span>\n<span class=\"sd\">                ('source', 'u1'),</span>\n<span class=\"sd\">            ]</span>\n<span class=\"sd\">        the source value has the following meaning:</span>\n<span class=\"sd\">            0: timestamp reset</span>\n<span class=\"sd\">            1: external signal rising edge</span>\n<span class=\"sd\">            2: external signal falling edge</span>\n<span class=\"sd\">            3: external signal pulse</span>\n<span class=\"sd\">            4: external generator rising edge</span>\n<span class=\"sd\">            5: external generator falling edge</span>\n<span class=\"sd\">            6: frame begin</span>\n<span class=\"sd\">            7: frame end</span>\n<span class=\"sd\">            8: exposure begin</span>\n<span class=\"sd\">            9: exposure end</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> trigger events'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'triggers'</span><span class=\"p\">])))</span>\n</pre>\n<p>Because the lifetime of the file handle is managed by Rust, decoder objects are not compatible with the <a href=\"https://docs.python.org/3/reference/compound_stmts.html#with\" rel=\"nofollow\">with</a> statement. To ensure garbage collection, point the decoder variable to something else, for example <code>None</code>, when you are done using it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aedat</span>\n\n<span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"n\">aedat</span><span class=\"o\">.</span><span class=\"n\">Decoder</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.aedat'</span><span class=\"p\">)</span>\n<span class=\"c1\"># do something with decoder</span>\n<span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<h1>Install from source</h1>\n<p>This library requires <a href=\"https://www.python.org\" rel=\"nofollow\">Python 3.x</a>, x &gt;= 5, and <a href=\"https://numpy.org\" rel=\"nofollow\">NumPy</a>. This guide assumes that they are installed on your machine.</p>\n<p>A Rust compiling toolchain is required during the installation (but can be removed afterwards).</p>\n<h2>Linux</h2>\n<pre>curl --proto <span class=\"s1\">'=https'</span> --tlsv1.2 -sSf https://sh.rustup.rs <span class=\"p\">|</span> sh\ngit clone https://github.com/neuromorphicsystems/aedat.git\n<span class=\"nb\">cd</span> aedat\nrustup toolchain install nightly\nrustup override <span class=\"nb\">set</span> nightly\ncargo build --release\ncp target/release/libaedat.so scripts/aedat.so\n</pre>\n<p>You can now run the python scripts in the <em>scripts</em> directory. If you want to import the libary from another directory, copy <em>aedat.so</em> in said directory first.</p>\n<h2>macOS</h2>\n<pre>brew install rustup\nrustup-init\ngit clone https://github.com/neuromorphicsystems/aedat.git\n<span class=\"nb\">cd</span> aedat\nrustup toolchain install nightly\nrustup override <span class=\"nb\">set</span> nightly\ncargo build --release\ncp target/release/libaedat.dylib scripts/aedat.so\n</pre>\n<p>You can now run the python scripts in the <em>scripts</em> directory. If you want to import the libary from another directory, copy <em>aedat.so</em> in said directory first.</p>\n<h1>Contribute</h1>\n<p>After changing any of the files in <em>framebuffers</em>, one must run:</p>\n<pre>flatc --rust -o src/ flatbuffers/*.fbs\n</pre>\n<p>To format the code, run:</p>\n<pre>cargo fmt\n</pre>\n<p>You may need to install rustfmt first with:</p>\n<pre>rustup component add rustfmt\n</pre>\n<p>To upload the package to pypi:</p>\n<ul>\n<li>install <a href=\"https://github.com/PyO3/maturin\" rel=\"nofollow\">maturin</a>: <code>pip install maturin</code></li>\n<li>run <code>maturin publish</code></li>\n</ul>\n\n          </div>"}, "last_serial": 7184877, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "44d5ac8b76e29cdb42ea17dc5e47c123", "sha256": "2758d75eeeda6c6f884f06236d504ae48b5070d0595b712d7676b814be9a653b"}, "downloads": -1, "filename": "aedat-0.1.1-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "44d5ac8b76e29cdb42ea17dc5e47c123", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 271014, "upload_time": "2020-05-05T05:39:56", "upload_time_iso_8601": "2020-05-05T05:39:56.343332Z", "url": "https://files.pythonhosted.org/packages/9c/06/d90b59f7e6e61fd1569a75a0cfa9f3f2b8394bf62fc227240bf6fb6f7bd0/aedat-0.1.1-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cd2f57081dde0bedb1e410a0eed33ab", "sha256": "6368f3b3ec7b2223dad50a868fde033978745281405ed36186995716e26cc12d"}, "downloads": -1, "filename": "aedat-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6cd2f57081dde0bedb1e410a0eed33ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14152, "upload_time": "2020-05-05T05:39:58", "upload_time_iso_8601": "2020-05-05T05:39:58.923814Z", "url": "https://files.pythonhosted.org/packages/13/ad/2b5f5b2af56fd0e1cfcb80f31762d942456523100d0a200e33243321237c/aedat-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "118ec667d8a32b12998738e12f041c16", "sha256": "dd9583d3ee0029fe4e1389506f451322947f59155cc3a3ea854d4b9903033122"}, "downloads": -1, "filename": "aedat-0.1.2-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "118ec667d8a32b12998738e12f041c16", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 273311, "upload_time": "2020-05-05T07:12:03", "upload_time_iso_8601": "2020-05-05T07:12:03.985901Z", "url": "https://files.pythonhosted.org/packages/ee/76/2edc7a51ca259b31793809f827e6c4d1ee028d7ffe8be51c0b1851871f3e/aedat-0.1.2-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18500c921a49a9a7b31c6b8afac13456", "sha256": "3dcaef31e87921399c1f4087a76f9fca4fa02fd08a05a3539542fc52e55af850"}, "downloads": -1, "filename": "aedat-0.1.2-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "18500c921a49a9a7b31c6b8afac13456", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 272820, "upload_time": "2020-05-05T07:12:11", "upload_time_iso_8601": "2020-05-05T07:12:11.751256Z", "url": "https://files.pythonhosted.org/packages/bf/b0/53c4acd1ce7e2dfd62b0bcc6df9b608ca0be6908389cc76f69bea573036d/aedat-0.1.2-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68a78b7eaebc2dc7be775103557e5761", "sha256": "35d989e8514f4cf82ca1997da679dbd9b8cff667f15d5a7654357481a7ed97c7"}, "downloads": -1, "filename": "aedat-0.1.2-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "68a78b7eaebc2dc7be775103557e5761", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 272733, "upload_time": "2020-05-05T07:12:15", "upload_time_iso_8601": "2020-05-05T07:12:15.659323Z", "url": "https://files.pythonhosted.org/packages/2f/81/f712da809592a07cd8907d59c8f762e06f78122b616673d33be8363474a0/aedat-0.1.2-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "53134a8ea081b6713253b95d45f3f861", "sha256": "a4713e50050d2fc344f274c2a33bc1ffe75b885bfcda9e66817cef33ac0844e0"}, "downloads": -1, "filename": "aedat-0.1.3-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "53134a8ea081b6713253b95d45f3f861", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 273435, "upload_time": "2020-05-05T07:16:39", "upload_time_iso_8601": "2020-05-05T07:16:39.061466Z", "url": "https://files.pythonhosted.org/packages/e3/8a/e90e5eac155e4bf644c45ef587d13a463df56307a1d02bf6fc2e09629a57/aedat-0.1.3-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d20ab8f834ab37e5fe495e9913dbc88f", "sha256": "5756c202a6c0ce70f9eb24faa3d4d5fc417760ecddc46a42ad99716c95e6d226"}, "downloads": -1, "filename": "aedat-0.1.3-cp35-none-win_amd64.whl", "has_sig": false, "md5_digest": "d20ab8f834ab37e5fe495e9913dbc88f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 402288, "upload_time": "2020-05-07T02:44:38", "upload_time_iso_8601": "2020-05-07T02:44:38.240186Z", "url": "https://files.pythonhosted.org/packages/57/d6/82aa8e9d09ff7e27cf2f034f4fdf8a4dd220660f33eb403b47184bc121b0/aedat-0.1.3-cp35-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2235f2072a921b635393363395f9b84", "sha256": "092d966cb030beb7758b533a482edcfee0621ff657154da987affb620555b925"}, "downloads": -1, "filename": "aedat-0.1.3-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "a2235f2072a921b635393363395f9b84", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 273000, "upload_time": "2020-05-05T07:16:42", "upload_time_iso_8601": "2020-05-05T07:16:42.687188Z", "url": "https://files.pythonhosted.org/packages/e7/ab/04df63d58313e94296f5f7f98bbf3541cec398d9d0f0e602c09cd2ebc630/aedat-0.1.3-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "968a12080ccec16fda7f68a4eda1d537", "sha256": "f4ff118362b0aeaa6ede106a767d3ab5e6ddd7b8b6a5cf4ef06e660ca10f027e"}, "downloads": -1, "filename": "aedat-0.1.3-cp36-none-win_amd64.whl", "has_sig": false, "md5_digest": "968a12080ccec16fda7f68a4eda1d537", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 402159, "upload_time": "2020-05-07T02:44:39", "upload_time_iso_8601": "2020-05-07T02:44:39.938890Z", "url": "https://files.pythonhosted.org/packages/97/ca/544da0a037807a38fd237122983ef1a102d3475bbbdee6dcd887d552fa8a/aedat-0.1.3-cp36-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c32d886e709e3ed54e61620784fd3260", "sha256": "779f8eca138eae67bbd76768434862445c3d239eac54af3fa97d4a7d62ef777b"}, "downloads": -1, "filename": "aedat-0.1.3-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "c32d886e709e3ed54e61620784fd3260", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 273002, "upload_time": "2020-05-05T07:16:46", "upload_time_iso_8601": "2020-05-05T07:16:46.449651Z", "url": "https://files.pythonhosted.org/packages/06/2d/73924c2966fd893e3e16dcfba7b3a322de877a211d52d0386e3c2234c9d4/aedat-0.1.3-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "286c792476c830d06778437288f16125", "sha256": "e6c32da8279b1337b5a8f7aace4b0944a738cb0249c350792e25c41114b910aa"}, "downloads": -1, "filename": "aedat-0.1.3-cp37-none-win_amd64.whl", "has_sig": false, "md5_digest": "286c792476c830d06778437288f16125", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 402037, "upload_time": "2020-05-07T02:44:41", "upload_time_iso_8601": "2020-05-07T02:44:41.219066Z", "url": "https://files.pythonhosted.org/packages/9f/b6/57a5f8d331bbe741143e201cbee681ccbde6e09a7d5a87a43a2679bf44f3/aedat-0.1.3-cp37-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "504796bd5c13d981c287c6e34a61e4f5", "sha256": "018d4687535d6fc6a7968177c7ebf7c54c6250cf12f05889a782621875c730c8"}, "downloads": -1, "filename": "aedat-0.1.3-cp38-cp38-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "504796bd5c13d981c287c6e34a61e4f5", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.5", "size": 273606, "upload_time": "2020-05-07T02:44:42", "upload_time_iso_8601": "2020-05-07T02:44:42.537874Z", "url": "https://files.pythonhosted.org/packages/c4/37/e8fa39503fd5ecd03ed08ecf73979b609b8d6ff1405a51dd77dfbb1e0687/aedat-0.1.3-cp38-cp38-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5917988473ac0bcfaa0e3eccccfbddbb", "sha256": "c39618f41f66933de67b085cf36f2ee3f1a459fd34396487f731821ae7e7c195"}, "downloads": -1, "filename": "aedat-0.1.3-cp38-none-win_amd64.whl", "has_sig": false, "md5_digest": "5917988473ac0bcfaa0e3eccccfbddbb", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.5", "size": 401945, "upload_time": "2020-05-07T02:44:43", "upload_time_iso_8601": "2020-05-07T02:44:43.973766Z", "url": "https://files.pythonhosted.org/packages/e5/1b/bb2467f42e446408ffdf2ee83d424ad82b27c3bf36826ea4834fc81d21c8/aedat-0.1.3-cp38-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be05ff0c6db71db0361191b1c5dc24ab", "sha256": "d2ef7d18c6d43f7bb1a5a23748a47013a4db577f95acf6ac3d3289370f080031"}, "downloads": -1, "filename": "aedat-0.1.3.tar.gz", "has_sig": false, "md5_digest": "be05ff0c6db71db0361191b1c5dc24ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 32209773, "upload_time": "2020-05-07T02:44:53", "upload_time_iso_8601": "2020-05-07T02:44:53.915800Z", "url": "https://files.pythonhosted.org/packages/26/31/6684708ef35bdafe76ecf0c239a98feaea1f02f365a8041751e297b3b610/aedat-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53134a8ea081b6713253b95d45f3f861", "sha256": "a4713e50050d2fc344f274c2a33bc1ffe75b885bfcda9e66817cef33ac0844e0"}, "downloads": -1, "filename": "aedat-0.1.3-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "53134a8ea081b6713253b95d45f3f861", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 273435, "upload_time": "2020-05-05T07:16:39", "upload_time_iso_8601": "2020-05-05T07:16:39.061466Z", "url": "https://files.pythonhosted.org/packages/e3/8a/e90e5eac155e4bf644c45ef587d13a463df56307a1d02bf6fc2e09629a57/aedat-0.1.3-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d20ab8f834ab37e5fe495e9913dbc88f", "sha256": "5756c202a6c0ce70f9eb24faa3d4d5fc417760ecddc46a42ad99716c95e6d226"}, "downloads": -1, "filename": "aedat-0.1.3-cp35-none-win_amd64.whl", "has_sig": false, "md5_digest": "d20ab8f834ab37e5fe495e9913dbc88f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 402288, "upload_time": "2020-05-07T02:44:38", "upload_time_iso_8601": "2020-05-07T02:44:38.240186Z", "url": "https://files.pythonhosted.org/packages/57/d6/82aa8e9d09ff7e27cf2f034f4fdf8a4dd220660f33eb403b47184bc121b0/aedat-0.1.3-cp35-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2235f2072a921b635393363395f9b84", "sha256": "092d966cb030beb7758b533a482edcfee0621ff657154da987affb620555b925"}, "downloads": -1, "filename": "aedat-0.1.3-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "a2235f2072a921b635393363395f9b84", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 273000, "upload_time": "2020-05-05T07:16:42", "upload_time_iso_8601": "2020-05-05T07:16:42.687188Z", "url": "https://files.pythonhosted.org/packages/e7/ab/04df63d58313e94296f5f7f98bbf3541cec398d9d0f0e602c09cd2ebc630/aedat-0.1.3-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "968a12080ccec16fda7f68a4eda1d537", "sha256": "f4ff118362b0aeaa6ede106a767d3ab5e6ddd7b8b6a5cf4ef06e660ca10f027e"}, "downloads": -1, "filename": "aedat-0.1.3-cp36-none-win_amd64.whl", "has_sig": false, "md5_digest": "968a12080ccec16fda7f68a4eda1d537", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 402159, "upload_time": "2020-05-07T02:44:39", "upload_time_iso_8601": "2020-05-07T02:44:39.938890Z", "url": "https://files.pythonhosted.org/packages/97/ca/544da0a037807a38fd237122983ef1a102d3475bbbdee6dcd887d552fa8a/aedat-0.1.3-cp36-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c32d886e709e3ed54e61620784fd3260", "sha256": "779f8eca138eae67bbd76768434862445c3d239eac54af3fa97d4a7d62ef777b"}, "downloads": -1, "filename": "aedat-0.1.3-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "c32d886e709e3ed54e61620784fd3260", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 273002, "upload_time": "2020-05-05T07:16:46", "upload_time_iso_8601": "2020-05-05T07:16:46.449651Z", "url": "https://files.pythonhosted.org/packages/06/2d/73924c2966fd893e3e16dcfba7b3a322de877a211d52d0386e3c2234c9d4/aedat-0.1.3-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "286c792476c830d06778437288f16125", "sha256": "e6c32da8279b1337b5a8f7aace4b0944a738cb0249c350792e25c41114b910aa"}, "downloads": -1, "filename": "aedat-0.1.3-cp37-none-win_amd64.whl", "has_sig": false, "md5_digest": "286c792476c830d06778437288f16125", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 402037, "upload_time": "2020-05-07T02:44:41", "upload_time_iso_8601": "2020-05-07T02:44:41.219066Z", "url": "https://files.pythonhosted.org/packages/9f/b6/57a5f8d331bbe741143e201cbee681ccbde6e09a7d5a87a43a2679bf44f3/aedat-0.1.3-cp37-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "504796bd5c13d981c287c6e34a61e4f5", "sha256": "018d4687535d6fc6a7968177c7ebf7c54c6250cf12f05889a782621875c730c8"}, "downloads": -1, "filename": "aedat-0.1.3-cp38-cp38-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "504796bd5c13d981c287c6e34a61e4f5", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.5", "size": 273606, "upload_time": "2020-05-07T02:44:42", "upload_time_iso_8601": "2020-05-07T02:44:42.537874Z", "url": "https://files.pythonhosted.org/packages/c4/37/e8fa39503fd5ecd03ed08ecf73979b609b8d6ff1405a51dd77dfbb1e0687/aedat-0.1.3-cp38-cp38-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5917988473ac0bcfaa0e3eccccfbddbb", "sha256": "c39618f41f66933de67b085cf36f2ee3f1a459fd34396487f731821ae7e7c195"}, "downloads": -1, "filename": "aedat-0.1.3-cp38-none-win_amd64.whl", "has_sig": false, "md5_digest": "5917988473ac0bcfaa0e3eccccfbddbb", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.5", "size": 401945, "upload_time": "2020-05-07T02:44:43", "upload_time_iso_8601": "2020-05-07T02:44:43.973766Z", "url": "https://files.pythonhosted.org/packages/e5/1b/bb2467f42e446408ffdf2ee83d424ad82b27c3bf36826ea4834fc81d21c8/aedat-0.1.3-cp38-none-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be05ff0c6db71db0361191b1c5dc24ab", "sha256": "d2ef7d18c6d43f7bb1a5a23748a47013a4db577f95acf6ac3d3289370f080031"}, "downloads": -1, "filename": "aedat-0.1.3.tar.gz", "has_sig": false, "md5_digest": "be05ff0c6db71db0361191b1c5dc24ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 32209773, "upload_time": "2020-05-07T02:44:53", "upload_time_iso_8601": "2020-05-07T02:44:53.915800Z", "url": "https://files.pythonhosted.org/packages/26/31/6684708ef35bdafe76ecf0c239a98feaea1f02f365a8041751e297b3b610/aedat-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:01 2020"}