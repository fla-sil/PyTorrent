{"info": {"author": "Valentin LAB", "author_email": "valentin.lab@kalysto.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Software Development :: Version Control"], "description": "============\ngitchangelog\n============\n\n.. image:: https://img.shields.io/pypi/v/gitchangelog.svg?style=flat\n   :target: https://pypi.python.org/pypi/gitchangelog/\n   :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/gitchangelog.svg?style=flat\n   :target: https://pypi.python.org/pypi/gitchangelog/\n   :alt: Number of PyPI downloads\n\n.. image:: https://img.shields.io/travis/vaab/gitchangelog/master.svg?style=flat\n   :target: https://travis-ci.org/vaab/gitchangelog/\n   :alt: Travis CI build status\n\n.. image:: https://img.shields.io/appveyor/ci/vaab/gitchangelog.svg\n   :target: https://ci.appveyor.com/project/vaab/gitchangelog/branch/master\n   :alt: Appveyor CI build status\n\n.. image:: https://img.shields.io/codecov/c/github/vaab/gitchangelog.svg\n   :target: https://codecov.io/gh/vaab/gitchangelog\n   :alt: Test coverage\n\n\nUse your commit log to make beautifull and configurable changelog file.\n\n\nFeature\n=======\n\n- fully driven by a config file that can be tailored with your changelog\n  policies. (see for example the `reference configuration file`_)\n- filter out commits/tags based on regexp matching\n- refactor commit summary, or commit body on the fly with replace regexp\n- classify commit message into sections (ie: New, Fix, Changes...)\n- any output format supported thanks to templating, you can even choose\n  your own preferred template engine (mako, mustache, full python ...).\n- support your merge or rebase workflows and complicated git histories\n- support full or incremental changelog generation to match your needs.\n- support easy access to `trailers key values`_ (if you use them)\n- support of multi-authors for one commit through ``Co-Authored-By`` `trailers key values`_\n- support standard python installation or dep-free single executable.\n  (this last feature is not yet completely pain free to use on Windows)\n\n.. _trailers key values: https://git.wiki.kernel.org/index.php/CommitMessageConventions\n\n\nRequirements\n============\n\n``gitchangelog`` is compatible Python 2 and Python 3 on\nLinux/BSD/MacOSX and Windows.\n\nPlease submit an issue if you encounter incompatibilities.\n\n\nInstallation\n============\n\n\nfull package\n------------\n\nGitchangelog is published on PyPI, thus:\n\n    pip install gitchangelog\n\n\\.. is the way to go for install the full package on any platform.\n\nIf you are installing from source, please note that the development tools\nare not working fully yet on Windows.\n\nThe full package provides the ``gitchangelog.py`` executable as long as:\n\n- a `reference configuration file`_ that provides system wide defaults for\n  all values.\n- some example templates in ``mustache`` and ``mako`` templating\n  engine's language. Ideal to bootstrap your variations.\n\n\nfrom source\n-----------\n\nIf you'd rather work from the source repository, it supports the common\nidiom to install it on your system::\n\n    python setup.py install\n\nNote that for linux/BSD, there's a link to the executable in the root of the\nsource. This can be a convenient way to work on the source version.\n\n\nsingle executable installation\n------------------------------\n\nThe file ``gitchangelog.py`` is a full blown executable and can be used\nwithout any other files. This is easier to use naturally on Linux/BSD\nsystems. For instance, you could type in::\n\n    curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py > /usr/local/bin/gitchangelog &&\n    chmod +x /usr/local/bin/gitchangelog\n\nIt'll install ``gitchangelog`` to be accessible for all users and will\nuse the default python interpreter of your running session.\n\nPlease note: if you choose to install it in this standalone mode, then\nyou must make sure to value at least all the required configuration\nkeys in your config file. As a good start you should probably copy the\n`reference configuration file`_ as you base configuration file.\n\nThis is due to the fact that ``gitchangelog`` can not anymore reach\nthe reference configuration file to get default values.\n\n\nSample\n======\n\nThe default output is ReSTructured text, so it should be readable in ASCII.\n\nHere is a small sample of the ``gitchangelog`` changelog at work.\n\nCurrent ``git log`` output so you can get an idea of the log history::\n\n  * 59f902a Valentin Lab new: dev: sections in changelog are now in the order given in ``gitchangelog.rc`` in the ``section_regexps`` option.  (0.1.2)\n  * c6f72cc Valentin Lab chg: dev: commented code to toggle doctest mode.\n  * a9c38f3 Valentin Lab fix: dev: doctests were failing on this.\n  * 59524e6 Valentin Lab new: usr: added ``body_split_regexp`` option to attempts to format correctly body of commit.\n  * 5883f07 Valentin Lab new: usr: use a list of tuple instead of a dict for ``section_regexps`` to be able to manage order between section on find match.\n  * 7c1d480 Valentin Lab new: dev: new ``unreleased_version_label`` option in ``gitchangelog.rc`` to change label of not yet released code.\n  * cf29c9c Valentin Lab fix: dev: bad sorting of tags (alphanumerical). Changed to commit date sort.\n  * 61d8f80 Valentin Lab fix: dev: support of empty commit message.\n  * eeca31b Valentin Lab new: dev: use ``gitchangelog`` section in ``git config`` world appropriately.\n  * 6142b71 Valentin Lab chg: dev: cosmetic removal of trailing whitespaces\n  * 3c3edd5 Valentin Lab fix: usr: ``git`` in later versions seems to fail on ``git config <key>`` with errlvl 255, that was not supported.\n  * 3f9617d Valentin Lab fix: usr: removed Traceback when there were no tags at all in the current git repository.\n  * e0db9ae Valentin Lab new: usr: added section classifiers (ie: New, Change, Bugs) and updated the sample rc file.  (0.1.1)\n  * 0c66d59 Valentin Lab fix: dev: Fixed case where exception was thrown if two tags are on the same commit.\n  * d2fae0d Valentin Lab new: usr: added a succint ``--help`` support.\n\nAnd here is the ``gitchangelog`` output::\n\n  0.1.2 (2011-05-17)\n  ------------------\n\n  New\n  ~~~\n  - Sections in changelog are now in the order given in ``git-\n    changelog.rc`` in the ``section_regexps`` option. [Valentin Lab]\n  - Added ``body_split_regexp`` option to attempts to format correctly\n    body of commit. [Valentin Lab]\n  - Use a list of tuple instead of a dict for ``section_regexps`` to be\n    able to manage order between section on find match. [Valentin Lab]\n  - New ``unreleased_version_label`` option in ``gitchangelog.rc`` to\n    change label of not yet released code. [Valentin Lab]\n  - Use ``gitchangelog`` section in ``git config`` world appropriately.\n    [Valentin Lab]\n\n  Changes\n  ~~~~~~~\n  - Commented code to toggle doctest mode. [Valentin Lab]\n  - Cosmetic removal of trailing whitespaces. [Valentin Lab]\n\n  Fix\n  ~~~\n  - Doctests were failing on this. [Valentin Lab]\n  - Bad sorting of tags (alphanumerical). Changed to commit date sort.\n    [Valentin Lab]\n  - Support of empty commit message. [Valentin Lab]\n  - ``git`` in later versions seems to fail on ``git config <key>`` with\n    errlvl 255, that was not supported. [Valentin Lab]\n  - Removed Traceback when there were no tags at all in the current git\n    repository. [Valentin Lab]\n\n\n  0.1.1 (2011-04-07)\n  ------------------\n\n  New\n  ~~~\n  - Added section classifiers (ie: New, Change, Bugs) and updated the\n    sample rc file. [Valentin Lab]\n  - Added a succint ``--help`` support. [Valentin Lab]\n\n  Fix\n  ~~~\n  - Fixed case where exception was thrown if two tags are on the same\n    commit. [Valentin Lab]\n\nAnd the rendered full result is directly used to generate the HTML webpage of\nthe `changelog of the PyPI page`_.\n\n\nUsage\n=====\n\nThe `reference configuration file`_ is delivered within\n``gitchangelog`` package and is used to provides defaults to\nsettings. If you didn't install the package and used the standalone\nfile, then chances are that ``gitchangelog`` can't access these\ndefaults values. This is not a problem as long as you provided all the\nrequired values in your config file.\n\nThe recommended location for ``gitchangelog`` config file is the root\nof the current git repository with the name ``.gitchangelog.rc``.\nHowever you could put it elsewhere, and here are the locations checked\n(first match will prevail):\n\n- in the path given thanks to the environment variable\n  ``GITCHANGELOG_CONFIG_FILENAME``\n- in the path stored in git config's entry ``gitchangelog.rc-path`` (which\n  could be stored in system location or per repository)\n- (RECOMMENDED) in the root of the current git repository with the name\n  ``.gitchangelog.rc``\n\nThen, you'll be able to call ``gitchangelog`` in a GIT repository and it'll\nprint changelog on its standard output.\n\n\nConfiguration file format\n-------------------------\n\nThe `reference configuration file`_ is quite heavily commented and is quite\nsimple.  You should be able to use it as required.\n\n.. _reference configuration file: https://github.com/vaab/gitchangelog/blob/master/src/gitchangelog/gitchangelog.rc.reference\n\nThe changelog of gitchangelog is generated with himself and with the reference\nconfiguration file. You'll see the output in the `changelog of the PyPI page`_.\n\n.. _changelog of the PyPI page: http://pypi.python.org/pypi/gitchangelog\n\n\nOutput Engines\n--------------\n\nAt the end of the configuration file, you'll notice a variable called\n``output_engine``. By default, it's set to ``rest_py``, which is the\nlegacy python engine to produce the `ReSTructured Text` output format\nthat is shown in above samples. If this engine fits your needs, you\nwon't need to fiddle with this option.\n\nTo render the template, ``gitchangelog`` will generate a data structure that\nwill then be rendered thanks to the output engine. This should help you get\nthe exact output that you need.\n\nAs people might have different needs and knowledge, a templating\nsystem using ``mustache`` is available. ``mustache`` templates are\nprovided to render both `ReSTructured Text` or `markdown` formats. If\nyou know ``mustache`` templating, then you could easily add or modify\nthese existing templates.\n\nA ``mako`` templating engine is also provided. You'll find also a ``mako``\ntemplate producing the same `ReSTructured Text` output than the legacy one.\nIt's provided for reference and/or further tweak if you would rather use `mako`_\ntemplates.\n\n\nMustache\n~~~~~~~~\n\nThe ``mustache``  output engine uses `mustache templates`_.\n\nThe `mustache`_ templates are powered via `pystache`_ the python\nimplementation of the `mustache`_ specifications. So `mustache`_ output engine\nwill only be available if you have `pystache`_ module available in your python\nenvironment.\n\nThere are `mustache templates`_ bundled with the default installation\nof gitchangelog. These can be called by providing a simple label to the\n``mustache(..)`` output_engine, for instance (in your ``.gitchangelog.rc``)::\n\n    output_engine = mustache(\"markdown\")\n\nOr you could provide your own mustache template by specifying an\nabsolute path (or a relative one, starting from the git toplevel of\nyour project by default, or if set, the\n``git config gitchangelog.template-path``\nlocation) to your template file, for instance::\n\n    output_engine = mustache(\".gitchangelog.tpl\")\n\nAnd feel free to copy the bundled templates to use them as bases for\nyour own variations. In the source code, these are located in\n``src/gitchangelog/templates/mustache`` directory, once installed they\nare in ``templates/mustache`` directory starting from where your\n``gitchangelog.py`` was installed.\n\n\n.. _mustache: http://mustache.github.io\n.. _pystache: https://pypi.python.org/pypi/pystache\n.. _mustache templates: http://mustache.github.io/mustache.5.html\n\n\nMako\n~~~~\n\nThe ``makotemplate`` output engine templates for ``gitchangelog`` are\npowered via `mako`_ python templating system. So `mako`_ output engine\nwill only be available if you have `mako`_ module available in your\npython environment.\n\nThere are `mako`_ templates bundled with the default installation\nof gitchangelog. These can be called by providing a simple label to the\n``makotemplate(..)`` output_engine, for instance (in your ``.gitchangelog.rc``)::\n\n    output_engine = makotemplate(\"markdown\")\n\nOr you could provide your own mustache template by specifying an\nabsolute path (or a relative one, starting from the git toplevel of\nyour project by default, or if set, the\n``git config gitchangelog.template-path``\nlocation) to your template file, for instance::\n\n    output_engine = makotemplate(\".gitchangelog.tpl\")\n\nAnd feel free to copy the bundled templates to use them as bases for\nyour own variations. In the source code, these are located in\n``src/gitchangelog/templates/mako`` directory, once installed they\nare in ``templates/mako`` directory starting from where your\n``gitchangelog.py`` was installed.\n\n.. _mako: http://www.makotemplates.org\n\n\nChangelog data tree\n~~~~~~~~~~~~~~~~~~~\n\nThis is a sample of the current data structure sent to output engines::\n\n  {'title': 'Changelog',\n   'versions': [{'label': '%%version%% (unreleased)',\n                 'date': None,\n                 'tag': None\n                 'sections': [{'label': 'Changes',\n                               'commits': [{'author': 'John doe',\n                                            'body': '',\n                                            'subject': 'Adding some extra values.'},\n                                           {'author': 'John Doe',\n                                            'body': '',\n                                            'subject': 'Some more changes'}]},\n                              {'label': 'Other',\n                               'commits': [{'author': 'Jim Foo',\n                                            'body': '',\n                                            'subject': 'classic modification'},\n                                           {'author': 'Jane Done',\n                                            'body': '',\n                                            'subject': 'Adding some stuff to do.'}]}]},\n                {'label': 'v0.2.5 (2013-08-06)',\n                 'date': '2013-08-06',\n                 'tag': 'v0.2.5'\n                 'sections': [{'commits': [{'author': 'John Doe',\n                                            'body': '',\n                                            'subject': 'Updating Changelog installation.'}],\n                               'label': 'Changes'}]}]}\n\n\nMerged branches history support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCommit attribution to a specific version could be tricky. Suppose you have\nthis typical merge tree (spot the tags!)::\n\n    * new: something  (HEAD, tag: 0.2, develop)\n    *   Merge tag '0.1.1' into develop\n    |\\\n    | * fix: out-of-band hotfix  (tag: 0.1.1)\n    * | chg: continued development\n    |/\n    * fix: something  (tag: 0.1)\n    * first commit  (tag: 0.0.1, master)\n\nHere's a minimal draft of gitchangelog to show how commit are\nattributed to versions::\n\n    0.2\n      * new: something.\n      * Merge tag '0.1.1' into develop.\n      * chg: continued development.\n\n    0.1.1\n      * fix: out-of-band hotfix.\n\n    0.1\n      * fix: something.\n\n\n.. note:: you can remove automatically all merge commit from\n  gitchangelog output by using ``include_merge = False`` in the\n  ``.gitchangelog.rc`` file.\n\n\nUse cases\n=========\n\n\nNo sectionning\n--------------\n\nIf you want to remove sectionning but keep anything else, you should\nprobably use::\n\n    section_regexps = [\n        ('', None)\n    ]\n\n    subject_process = (strip | ucfirst | final_dot)\n\nThis will disable sectionning and won't remove the prefixes\nused for sectionning from the commit's summary.\n\n\nIncremental changelog\n---------------------\n\nAlso known as partial changelog generation, this feature allows to\ngenerate only a subpart of your changelog, and combined with\nconfigurable publishing actions, you can insert the result inside\nan existing changelog. Usually this makes sense:\n\n- When wanting to switch to ``gitchangelog``, or change your\n  conventions:\n\n  - part of your history is not following conventions.\n  - you have a previous CHANGELOG you want to blend in.\n\n- You'd rather commit changes to your changelog file for each release:\n\n  - For performance reason, you can then generate changelog only for\n    the new commit and save the result.\n  - Because you want to be able to edit it to make some minor\n    edition if needed.\n\n\nGenerating partial changelog is as simple as ``gitchangelog\nREVLIST``. Examples follows::\n\n    ## will output only tags between 0.0.2 (excluded) and 0.0.3 (included)\n    gitchangelog 0.0.2..0.0.3\n\n    ## will output only tags since 0.0.3 (excluded)\n    gitchangelog ^0.0.3 HEAD\n\n    ## will output all tags up to 0.0.3 (included)\n    gitchangelog 0.0.3\n\n\nAdditionally, ``gitchangelog`` can figure out automatically which\nrevision is the last for you (with some little help). This is done by\nspecifying the ``revs`` config option. This config file option will be\nused as if specified on the command line.\n\nHere is an example that fits the current changelog format::\n\n    revs = [\n        Caret(\n            FileFirstRegexMatch(\n    \t        \"CHANGELOG.rst\",\n    \t        r\"(?P<rev>[0-9]+\\.[0-9]+(\\.[0-9]+))\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)\\n--+\\n\")),\n    ]\n\nThis will look into the file ``CHANGELOG.rst`` for the first match of\nthe given regex and return the match of the ``rev`` regex sub-pattern\nit as a string. The ``Caret`` function will simply prefix the given\nstring with a ``^``. As a consequence, this code will prevent\nrecreating any previously generated changelog section (more information\nabout the `REVLIST syntax`_ from ``git rev-list`` arguments.)\n\n.. _REVLIST syntax: https://git-scm.com/docs/git-rev-list#_description\n\nNote that the data structure provided to the template will set the\n``title`` to ``None`` if you provided no REVLIST through command-line\nor the config file (or if the revlist was equivalently set to\n``[\"HEAD\", ]``).  This a good way to make your template detect it is\nin \"incremental mode\".\n\nBy default, this will only output to standard output the new sections\nof your changelog, you might want to insert it directly in your existing\nchangelog. This is where ``publish`` parameters will help you. By default\nit is set to ``stdout``, and you might want to set it to::\n\n    publish = FileInsertIntoFirstRegexMatch(\n        \"CHANGELOG.rst\",\n        r'/(?P<rev>[0-9]+\\.[0-9]+(\\.[0-9]+)?)\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)\\n--+\\n/',\n        idx=lambda m: m.start(1)\n    )\n\nThe full recipe could be::\n\n    OUTPUT_FILE = \"CHANGELOG.rst\"\n    INSERT_POINT = r\"\\b(?P<rev>[0-9]+\\.[0-9]+)\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)\\n--+\\n\"\n    revs = [\n            Caret(FileFirstRegexMatch(OUTPUT_FILE, INSERT_POINT)),\n            \"HEAD\"\n    ]\n\n    action = FileInsertAtFirstRegexMatch(\n        OUTPUT_FILE, INSERT_POINT,\n        idx=lambda m: m.start(1)\n    )\n\n\nAlternatively, you can use this other recipe, using ``FileRegexSubst``, that has\nthe added advantage of being able to update the unreleased part if you had it already\ngenerated and need a re-fresh because you added new commits or amended some commits::\n\n    OUTPUT_FILE = \"CHANGELOG.rst\"\n    INSERT_POINT_REGEX = r'''(?isxu)\n    ^\n    (\n      \\s*Changelog\\s*(\\n|\\r\\n|\\r)        ## ``Changelog`` line\n      ==+\\s*(\\n|\\r\\n|\\r){2}              ## ``=========`` rest underline\n    )\n\n    (                     ## Match all between changelog and release rev\n        (\n          (?!\n             (?<=(\\n|\\r))                ## look back for newline\n             %(rev)s                     ## revision\n             \\s+\n             \\([0-9]+-[0-9]{2}-[0-9]{2}\\)(\\n|\\r\\n|\\r)   ## date\n               --+(\\n|\\r\\n|\\r)                          ## ``---`` underline\n          )\n          .\n        )*\n    )\n\n    (?P<rev>%(rev)s)\n    ''' % {'rev': r\"[0-9]+\\.[0-9]+(\\.[0-9]+)?\"}\n\n    revs = [\n        Caret(FileFirstRegexMatch(OUTPUT_FILE, INSERT_POINT_REGEX)),\n        \"HEAD\"\n    ]\n\n    publish = FileRegexSubst(OUTPUT_FILE, INSERT_POINT_REGEX, r\"\\1\\o\\g<rev>\")\n\n\nAs a second example, here is the same recipe for mustache markdown format::\n\n    OUTPUT_FILE = \"CHANGELOG.rst\"\n    INSERT_POINT_REGEX = r'''(?isxu)\n    ^\n    (\n      \\s*\\#\\s+Changelog\\s*(\\n|\\r\\n|\\r)        ## ``Changelog`` line\n    )\n\n    (                     ## Match all between changelog and release rev\n        (\n          (?!\n             (?<=(\\n|\\r))                ## look back for newline\n             \\#\\#\\s+%(rev)s                     ## revision\n             \\s+\n             \\([0-9]+-[0-9]{2}-[0-9]{2}\\)(\\n|\\r\\n|\\r)   ## date\n          )\n          .\n        )*\n    )\n\n    (?P<tail>\\#\\#\\s+(?P<rev>%(rev)s))\n    ''' % {'rev': r\"[0-9]+\\.[0-9]+(\\.[0-9]+)?\"}\n\n    revs = [\n        Caret(FileFirstRegexMatch(OUTPUT_FILE, INSERT_POINT_REGEX)),\n        \"HEAD\"\n    ]\n\n    publish = FileRegexSubst(OUTPUT_FILE, INSERT_POINT_REGEX, r\"\\1\\o\\n\\g<tail>\")\n\n\nContributing\n============\n\nAny suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.\n\n\nPush Request Guidelines\n-----------------------\n\nYou can send any code. I'll look at it and will integrate it myself in\nthe code base while leaving you as the commit(s) author. This process\ncan take time and it'll take less time if you follow the following\nguidelines:\n\n- check your code with PEP8 or pylint. Try to stick to 80 columns wide.\n- separate your commits per smallest concern\n- each functionality/bugfix commit should contain the code, tests,\n  and doc.\n- each commit should pass the tests (to allow easy bisect)\n- prior minor commit with typographic or code cosmetic changes are\n  very welcome. These should be tagged in their commit summary with\n  ``!minor``.\n- the commit message should follow gitchangelog rules (check the git\n  log to get examples)\n- if the commit fixes an issue or finished the implementation of a\n  feature, please mention it in the summary.\n\nIf you have some questions about guidelines which is not answered here,\nplease check the current ``git log``, you might find previous commit that\nwould show you how to deal with your issue. Otherwise, just send your PR\nand ask your question. I won't bite. Promise.\n\n\nLicense\n=======\n\nCopyright (c) 2012-2018 Valentin Lab.\n\nLicensed under the `BSD License`_.\n\n.. _BSD License: http://raw.github.com/vaab/gitchangelog/master/LICENSE\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/vaab/gitchangelog", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "gitchangelog-vt", "package_url": "https://pypi.org/project/gitchangelog-vt/", "platform": "", "project_url": "https://pypi.org/project/gitchangelog-vt/", "project_urls": {"Homepage": "http://github.com/vaab/gitchangelog"}, "release_url": "https://pypi.org/project/gitchangelog-vt/3.0.9/", "requires_dist": ["pystache", "mako", "numpy", "python-dateutil", "mako ; extra == 'mako'", "pystache ; extra == 'mustache'", "nose ; extra == 'test'", "minimock ; extra == 'test'", "mako ; extra == 'test'", "pystache ; extra == 'test'"], "requires_python": "", "summary": "gitchangelog-vt is a custom version of gitchangelog that generates a changelog thanks to git log.", "version": "3.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/gitchangelog/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b1cf67195d4ab89d32b85182dda85e03d8e5c3a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6769746368616e67656c6f672e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/gitchangelog/\" rel=\"nofollow\"><img alt=\"Number of PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa338ea46cfc2178f48bd07fd1d4afcb86da7f4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6769746368616e67656c6f672e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://travis-ci.org/vaab/gitchangelog/\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05b37d12e67293ab03671b00b819c0e5d7a6a313/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f766161622f6769746368616e67656c6f672f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://ci.appveyor.com/project/vaab/gitchangelog/branch/master\" rel=\"nofollow\"><img alt=\"Appveyor CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d42a4562669eca03483439cfc81e242d79724ba/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f766161622f6769746368616e67656c6f672e737667\"></a>\n<a href=\"https://codecov.io/gh/vaab/gitchangelog\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00822a715c8cda663c2860476d2b6e520c3c7e1d/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f766161622f6769746368616e67656c6f672e737667\"></a>\n<p>Use your commit log to make beautifull and configurable changelog file.</p>\n<div id=\"feature\">\n<h2>Feature</h2>\n<ul>\n<li>fully driven by a config file that can be tailored with your changelog\npolicies. (see for example the <a href=\"https://github.com/vaab/gitchangelog/blob/master/src/gitchangelog/gitchangelog.rc.reference\" rel=\"nofollow\">reference configuration file</a>)</li>\n<li>filter out commits/tags based on regexp matching</li>\n<li>refactor commit summary, or commit body on the fly with replace regexp</li>\n<li>classify commit message into sections (ie: New, Fix, Changes\u2026)</li>\n<li>any output format supported thanks to templating, you can even choose\nyour own preferred template engine (mako, mustache, full python \u2026).</li>\n<li>support your merge or rebase workflows and complicated git histories</li>\n<li>support full or incremental changelog generation to match your needs.</li>\n<li>support easy access to <a href=\"https://git.wiki.kernel.org/index.php/CommitMessageConventions\" rel=\"nofollow\">trailers key values</a> (if you use them)</li>\n<li>support of multi-authors for one commit through <tt><span class=\"pre\">Co-Authored-By</span></tt> <a href=\"https://git.wiki.kernel.org/index.php/CommitMessageConventions\" rel=\"nofollow\">trailers key values</a></li>\n<li>support standard python installation or dep-free single executable.\n(this last feature is not yet completely pain free to use on Windows)</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><tt>gitchangelog</tt> is compatible Python 2 and Python 3 on\nLinux/BSD/MacOSX and Windows.</p>\n<p>Please submit an issue if you encounter incompatibilities.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"full-package\">\n<h3>full package</h3>\n<p>Gitchangelog is published on PyPI, thus:</p>\n<blockquote>\npip install gitchangelog</blockquote>\n<p>.. is the way to go for install the full package on any platform.</p>\n<p>If you are installing from source, please note that the development tools\nare not working fully yet on Windows.</p>\n<p>The full package provides the <tt>gitchangelog.py</tt> executable as long as:</p>\n<ul>\n<li>a <a href=\"https://github.com/vaab/gitchangelog/blob/master/src/gitchangelog/gitchangelog.rc.reference\" rel=\"nofollow\">reference configuration file</a> that provides system wide defaults for\nall values.</li>\n<li>some example templates in <tt>mustache</tt> and <tt>mako</tt> templating\nengine\u2019s language. Ideal to bootstrap your variations.</li>\n</ul>\n</div>\n<div id=\"from-source\">\n<h3>from source</h3>\n<p>If you\u2019d rather work from the source repository, it supports the common\nidiom to install it on your system:</p>\n<pre>python setup.py install\n</pre>\n<p>Note that for linux/BSD, there\u2019s a link to the executable in the root of the\nsource. This can be a convenient way to work on the source version.</p>\n</div>\n<div id=\"single-executable-installation\">\n<h3>single executable installation</h3>\n<p>The file <tt>gitchangelog.py</tt> is a full blown executable and can be used\nwithout any other files. This is easier to use naturally on Linux/BSD\nsystems. For instance, you could type in:</p>\n<pre>curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py &gt; /usr/local/bin/gitchangelog &amp;&amp;\nchmod +x /usr/local/bin/gitchangelog\n</pre>\n<p>It\u2019ll install <tt>gitchangelog</tt> to be accessible for all users and will\nuse the default python interpreter of your running session.</p>\n<p>Please note: if you choose to install it in this standalone mode, then\nyou must make sure to value at least all the required configuration\nkeys in your config file. As a good start you should probably copy the\n<a href=\"https://github.com/vaab/gitchangelog/blob/master/src/gitchangelog/gitchangelog.rc.reference\" rel=\"nofollow\">reference configuration file</a> as you base configuration file.</p>\n<p>This is due to the fact that <tt>gitchangelog</tt> can not anymore reach\nthe reference configuration file to get default values.</p>\n</div>\n</div>\n<div id=\"sample\">\n<h2>Sample</h2>\n<p>The default output is ReSTructured text, so it should be readable in ASCII.</p>\n<p>Here is a small sample of the <tt>gitchangelog</tt> changelog at work.</p>\n<p>Current <tt>git log</tt> output so you can get an idea of the log history:</p>\n<pre>* 59f902a Valentin Lab new: dev: sections in changelog are now in the order given in ``gitchangelog.rc`` in the ``section_regexps`` option.  (0.1.2)\n* c6f72cc Valentin Lab chg: dev: commented code to toggle doctest mode.\n* a9c38f3 Valentin Lab fix: dev: doctests were failing on this.\n* 59524e6 Valentin Lab new: usr: added ``body_split_regexp`` option to attempts to format correctly body of commit.\n* 5883f07 Valentin Lab new: usr: use a list of tuple instead of a dict for ``section_regexps`` to be able to manage order between section on find match.\n* 7c1d480 Valentin Lab new: dev: new ``unreleased_version_label`` option in ``gitchangelog.rc`` to change label of not yet released code.\n* cf29c9c Valentin Lab fix: dev: bad sorting of tags (alphanumerical). Changed to commit date sort.\n* 61d8f80 Valentin Lab fix: dev: support of empty commit message.\n* eeca31b Valentin Lab new: dev: use ``gitchangelog`` section in ``git config`` world appropriately.\n* 6142b71 Valentin Lab chg: dev: cosmetic removal of trailing whitespaces\n* 3c3edd5 Valentin Lab fix: usr: ``git`` in later versions seems to fail on ``git config &lt;key&gt;`` with errlvl 255, that was not supported.\n* 3f9617d Valentin Lab fix: usr: removed Traceback when there were no tags at all in the current git repository.\n* e0db9ae Valentin Lab new: usr: added section classifiers (ie: New, Change, Bugs) and updated the sample rc file.  (0.1.1)\n* 0c66d59 Valentin Lab fix: dev: Fixed case where exception was thrown if two tags are on the same commit.\n* d2fae0d Valentin Lab new: usr: added a succint ``--help`` support.\n</pre>\n<p>And here is the <tt>gitchangelog</tt> output:</p>\n<pre>0.1.2 (2011-05-17)\n------------------\n\nNew\n~~~\n- Sections in changelog are now in the order given in ``git-\n  changelog.rc`` in the ``section_regexps`` option. [Valentin Lab]\n- Added ``body_split_regexp`` option to attempts to format correctly\n  body of commit. [Valentin Lab]\n- Use a list of tuple instead of a dict for ``section_regexps`` to be\n  able to manage order between section on find match. [Valentin Lab]\n- New ``unreleased_version_label`` option in ``gitchangelog.rc`` to\n  change label of not yet released code. [Valentin Lab]\n- Use ``gitchangelog`` section in ``git config`` world appropriately.\n  [Valentin Lab]\n\nChanges\n~~~~~~~\n- Commented code to toggle doctest mode. [Valentin Lab]\n- Cosmetic removal of trailing whitespaces. [Valentin Lab]\n\nFix\n~~~\n- Doctests were failing on this. [Valentin Lab]\n- Bad sorting of tags (alphanumerical). Changed to commit date sort.\n  [Valentin Lab]\n- Support of empty commit message. [Valentin Lab]\n- ``git`` in later versions seems to fail on ``git config &lt;key&gt;`` with\n  errlvl 255, that was not supported. [Valentin Lab]\n- Removed Traceback when there were no tags at all in the current git\n  repository. [Valentin Lab]\n\n\n0.1.1 (2011-04-07)\n------------------\n\nNew\n~~~\n- Added section classifiers (ie: New, Change, Bugs) and updated the\n  sample rc file. [Valentin Lab]\n- Added a succint ``--help`` support. [Valentin Lab]\n\nFix\n~~~\n- Fixed case where exception was thrown if two tags are on the same\n  commit. [Valentin Lab]\n</pre>\n<p>And the rendered full result is directly used to generate the HTML webpage of\nthe <a href=\"http://pypi.python.org/pypi/gitchangelog\" rel=\"nofollow\">changelog of the PyPI page</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The <a href=\"https://github.com/vaab/gitchangelog/blob/master/src/gitchangelog/gitchangelog.rc.reference\" rel=\"nofollow\">reference configuration file</a> is delivered within\n<tt>gitchangelog</tt> package and is used to provides defaults to\nsettings. If you didn\u2019t install the package and used the standalone\nfile, then chances are that <tt>gitchangelog</tt> can\u2019t access these\ndefaults values. This is not a problem as long as you provided all the\nrequired values in your config file.</p>\n<p>The recommended location for <tt>gitchangelog</tt> config file is the root\nof the current git repository with the name <tt>.gitchangelog.rc</tt>.\nHowever you could put it elsewhere, and here are the locations checked\n(first match will prevail):</p>\n<ul>\n<li>in the path given thanks to the environment variable\n<tt>GITCHANGELOG_CONFIG_FILENAME</tt></li>\n<li>in the path stored in git config\u2019s entry <tt><span class=\"pre\">gitchangelog.rc-path</span></tt> (which\ncould be stored in system location or per repository)</li>\n<li>(RECOMMENDED) in the root of the current git repository with the name\n<tt>.gitchangelog.rc</tt></li>\n</ul>\n<p>Then, you\u2019ll be able to call <tt>gitchangelog</tt> in a GIT repository and it\u2019ll\nprint changelog on its standard output.</p>\n<div id=\"configuration-file-format\">\n<h3>Configuration file format</h3>\n<p>The <a href=\"https://github.com/vaab/gitchangelog/blob/master/src/gitchangelog/gitchangelog.rc.reference\" rel=\"nofollow\">reference configuration file</a> is quite heavily commented and is quite\nsimple.  You should be able to use it as required.</p>\n<p>The changelog of gitchangelog is generated with himself and with the reference\nconfiguration file. You\u2019ll see the output in the <a href=\"http://pypi.python.org/pypi/gitchangelog\" rel=\"nofollow\">changelog of the PyPI page</a>.</p>\n</div>\n<div id=\"output-engines\">\n<h3>Output Engines</h3>\n<p>At the end of the configuration file, you\u2019ll notice a variable called\n<tt>output_engine</tt>. By default, it\u2019s set to <tt>rest_py</tt>, which is the\nlegacy python engine to produce the <cite>ReSTructured Text</cite> output format\nthat is shown in above samples. If this engine fits your needs, you\nwon\u2019t need to fiddle with this option.</p>\n<p>To render the template, <tt>gitchangelog</tt> will generate a data structure that\nwill then be rendered thanks to the output engine. This should help you get\nthe exact output that you need.</p>\n<p>As people might have different needs and knowledge, a templating\nsystem using <tt>mustache</tt> is available. <tt>mustache</tt> templates are\nprovided to render both <cite>ReSTructured Text</cite> or <cite>markdown</cite> formats. If\nyou know <tt>mustache</tt> templating, then you could easily add or modify\nthese existing templates.</p>\n<p>A <tt>mako</tt> templating engine is also provided. You\u2019ll find also a <tt>mako</tt>\ntemplate producing the same <cite>ReSTructured Text</cite> output than the legacy one.\nIt\u2019s provided for reference and/or further tweak if you would rather use <a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a>\ntemplates.</p>\n<div id=\"mustache\">\n<h4>Mustache</h4>\n<p>The <tt>mustache</tt>  output engine uses <a href=\"http://mustache.github.io/mustache.5.html\" rel=\"nofollow\">mustache templates</a>.</p>\n<p>The <a href=\"http://mustache.github.io\" rel=\"nofollow\">mustache</a> templates are powered via <a href=\"https://pypi.python.org/pypi/pystache\" rel=\"nofollow\">pystache</a> the python\nimplementation of the <a href=\"http://mustache.github.io\" rel=\"nofollow\">mustache</a> specifications. So <a href=\"http://mustache.github.io\" rel=\"nofollow\">mustache</a> output engine\nwill only be available if you have <a href=\"https://pypi.python.org/pypi/pystache\" rel=\"nofollow\">pystache</a> module available in your python\nenvironment.</p>\n<p>There are <a href=\"http://mustache.github.io/mustache.5.html\" rel=\"nofollow\">mustache templates</a> bundled with the default installation\nof gitchangelog. These can be called by providing a simple label to the\n<tt><span class=\"pre\">mustache(..)</span></tt> output_engine, for instance (in your <tt>.gitchangelog.rc</tt>):</p>\n<pre>output_engine = mustache(\"markdown\")\n</pre>\n<p>Or you could provide your own mustache template by specifying an\nabsolute path (or a relative one, starting from the git toplevel of\nyour project by default, or if set, the\n<tt>git config <span class=\"pre\">gitchangelog.template-path</span></tt>\nlocation) to your template file, for instance:</p>\n<pre>output_engine = mustache(\".gitchangelog.tpl\")\n</pre>\n<p>And feel free to copy the bundled templates to use them as bases for\nyour own variations. In the source code, these are located in\n<tt>src/gitchangelog/templates/mustache</tt> directory, once installed they\nare in <tt>templates/mustache</tt> directory starting from where your\n<tt>gitchangelog.py</tt> was installed.</p>\n</div>\n<div id=\"mako\">\n<h4>Mako</h4>\n<p>The <tt>makotemplate</tt> output engine templates for <tt>gitchangelog</tt> are\npowered via <a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a> python templating system. So <a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a> output engine\nwill only be available if you have <a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a> module available in your\npython environment.</p>\n<p>There are <a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a> templates bundled with the default installation\nof gitchangelog. These can be called by providing a simple label to the\n<tt><span class=\"pre\">makotemplate(..)</span></tt> output_engine, for instance (in your <tt>.gitchangelog.rc</tt>):</p>\n<pre>output_engine = makotemplate(\"markdown\")\n</pre>\n<p>Or you could provide your own mustache template by specifying an\nabsolute path (or a relative one, starting from the git toplevel of\nyour project by default, or if set, the\n<tt>git config <span class=\"pre\">gitchangelog.template-path</span></tt>\nlocation) to your template file, for instance:</p>\n<pre>output_engine = makotemplate(\".gitchangelog.tpl\")\n</pre>\n<p>And feel free to copy the bundled templates to use them as bases for\nyour own variations. In the source code, these are located in\n<tt>src/gitchangelog/templates/mako</tt> directory, once installed they\nare in <tt>templates/mako</tt> directory starting from where your\n<tt>gitchangelog.py</tt> was installed.</p>\n</div>\n<div id=\"changelog-data-tree\">\n<h4>Changelog data tree</h4>\n<p>This is a sample of the current data structure sent to output engines:</p>\n<pre>{'title': 'Changelog',\n 'versions': [{'label': '%%version%% (unreleased)',\n               'date': None,\n               'tag': None\n               'sections': [{'label': 'Changes',\n                             'commits': [{'author': 'John doe',\n                                          'body': '',\n                                          'subject': 'Adding some extra values.'},\n                                         {'author': 'John Doe',\n                                          'body': '',\n                                          'subject': 'Some more changes'}]},\n                            {'label': 'Other',\n                             'commits': [{'author': 'Jim Foo',\n                                          'body': '',\n                                          'subject': 'classic modification'},\n                                         {'author': 'Jane Done',\n                                          'body': '',\n                                          'subject': 'Adding some stuff to do.'}]}]},\n              {'label': 'v0.2.5 (2013-08-06)',\n               'date': '2013-08-06',\n               'tag': 'v0.2.5'\n               'sections': [{'commits': [{'author': 'John Doe',\n                                          'body': '',\n                                          'subject': 'Updating Changelog installation.'}],\n                             'label': 'Changes'}]}]}\n</pre>\n</div>\n<div id=\"merged-branches-history-support\">\n<h4>Merged branches history support</h4>\n<p>Commit attribution to a specific version could be tricky. Suppose you have\nthis typical merge tree (spot the tags!):</p>\n<pre>* new: something  (HEAD, tag: 0.2, develop)\n*   Merge tag '0.1.1' into develop\n|\\\n| * fix: out-of-band hotfix  (tag: 0.1.1)\n* | chg: continued development\n|/\n* fix: something  (tag: 0.1)\n* first commit  (tag: 0.0.1, master)\n</pre>\n<p>Here\u2019s a minimal draft of gitchangelog to show how commit are\nattributed to versions:</p>\n<pre>0.2\n  * new: something.\n  * Merge tag '0.1.1' into develop.\n  * chg: continued development.\n\n0.1.1\n  * fix: out-of-band hotfix.\n\n0.1\n  * fix: something.\n</pre>\n<div>\n<p>Note</p>\n<p>you can remove automatically all merge commit from\ngitchangelog output by using <tt>include_merge = False</tt> in the\n<tt>.gitchangelog.rc</tt> file.</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"use-cases\">\n<h2>Use cases</h2>\n<div id=\"no-sectionning\">\n<h3>No sectionning</h3>\n<p>If you want to remove sectionning but keep anything else, you should\nprobably use:</p>\n<pre>section_regexps = [\n    ('', None)\n]\n\nsubject_process = (strip | ucfirst | final_dot)\n</pre>\n<p>This will disable sectionning and won\u2019t remove the prefixes\nused for sectionning from the commit\u2019s summary.</p>\n</div>\n<div id=\"incremental-changelog\">\n<h3>Incremental changelog</h3>\n<p>Also known as partial changelog generation, this feature allows to\ngenerate only a subpart of your changelog, and combined with\nconfigurable publishing actions, you can insert the result inside\nan existing changelog. Usually this makes sense:</p>\n<ul>\n<li>When wanting to switch to <tt>gitchangelog</tt>, or change your\nconventions:<ul>\n<li>part of your history is not following conventions.</li>\n<li>you have a previous CHANGELOG you want to blend in.</li>\n</ul>\n</li>\n<li>You\u2019d rather commit changes to your changelog file for each release:<ul>\n<li>For performance reason, you can then generate changelog only for\nthe new commit and save the result.</li>\n<li>Because you want to be able to edit it to make some minor\nedition if needed.</li>\n</ul>\n</li>\n</ul>\n<p>Generating partial changelog is as simple as <tt>gitchangelog\nREVLIST</tt>. Examples follows:</p>\n<pre>## will output only tags between 0.0.2 (excluded) and 0.0.3 (included)\ngitchangelog 0.0.2..0.0.3\n\n## will output only tags since 0.0.3 (excluded)\ngitchangelog ^0.0.3 HEAD\n\n## will output all tags up to 0.0.3 (included)\ngitchangelog 0.0.3\n</pre>\n<p>Additionally, <tt>gitchangelog</tt> can figure out automatically which\nrevision is the last for you (with some little help). This is done by\nspecifying the <tt>revs</tt> config option. This config file option will be\nused as if specified on the command line.</p>\n<p>Here is an example that fits the current changelog format:</p>\n<pre>revs = [\n    Caret(\n        FileFirstRegexMatch(\n            \"CHANGELOG.rst\",\n            r\"(?P&lt;rev&gt;[0-9]+\\.[0-9]+(\\.[0-9]+))\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)\\n--+\\n\")),\n]\n</pre>\n<p>This will look into the file <tt>CHANGELOG.rst</tt> for the first match of\nthe given regex and return the match of the <tt>rev</tt> regex sub-pattern\nit as a string. The <tt>Caret</tt> function will simply prefix the given\nstring with a <tt>^</tt>. As a consequence, this code will prevent\nrecreating any previously generated changelog section (more information\nabout the <a href=\"https://git-scm.com/docs/git-rev-list#_description\" rel=\"nofollow\">REVLIST syntax</a> from <tt>git <span class=\"pre\">rev-list</span></tt> arguments.)</p>\n<p>Note that the data structure provided to the template will set the\n<tt>title</tt> to <tt>None</tt> if you provided no REVLIST through command-line\nor the config file (or if the revlist was equivalently set to\n<tt>[\"HEAD\", ]</tt>).  This a good way to make your template detect it is\nin \u201cincremental mode\u201d.</p>\n<p>By default, this will only output to standard output the new sections\nof your changelog, you might want to insert it directly in your existing\nchangelog. This is where <tt>publish</tt> parameters will help you. By default\nit is set to <tt>stdout</tt>, and you might want to set it to:</p>\n<pre>publish = FileInsertIntoFirstRegexMatch(\n    \"CHANGELOG.rst\",\n    r'/(?P&lt;rev&gt;[0-9]+\\.[0-9]+(\\.[0-9]+)?)\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)\\n--+\\n/',\n    idx=lambda m: m.start(1)\n)\n</pre>\n<p>The full recipe could be:</p>\n<pre>OUTPUT_FILE = \"CHANGELOG.rst\"\nINSERT_POINT = r\"\\b(?P&lt;rev&gt;[0-9]+\\.[0-9]+)\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)\\n--+\\n\"\nrevs = [\n        Caret(FileFirstRegexMatch(OUTPUT_FILE, INSERT_POINT)),\n        \"HEAD\"\n]\n\naction = FileInsertAtFirstRegexMatch(\n    OUTPUT_FILE, INSERT_POINT,\n    idx=lambda m: m.start(1)\n)\n</pre>\n<p>Alternatively, you can use this other recipe, using <tt>FileRegexSubst</tt>, that has\nthe added advantage of being able to update the unreleased part if you had it already\ngenerated and need a re-fresh because you added new commits or amended some commits:</p>\n<pre>OUTPUT_FILE = \"CHANGELOG.rst\"\nINSERT_POINT_REGEX = r'''(?isxu)\n^\n(\n  \\s*Changelog\\s*(\\n|\\r\\n|\\r)        ## ``Changelog`` line\n  ==+\\s*(\\n|\\r\\n|\\r){2}              ## ``=========`` rest underline\n)\n\n(                     ## Match all between changelog and release rev\n    (\n      (?!\n         (?&lt;=(\\n|\\r))                ## look back for newline\n         %(rev)s                     ## revision\n         \\s+\n         \\([0-9]+-[0-9]{2}-[0-9]{2}\\)(\\n|\\r\\n|\\r)   ## date\n           --+(\\n|\\r\\n|\\r)                          ## ``---`` underline\n      )\n      .\n    )*\n)\n\n(?P&lt;rev&gt;%(rev)s)\n''' % {'rev': r\"[0-9]+\\.[0-9]+(\\.[0-9]+)?\"}\n\nrevs = [\n    Caret(FileFirstRegexMatch(OUTPUT_FILE, INSERT_POINT_REGEX)),\n    \"HEAD\"\n]\n\npublish = FileRegexSubst(OUTPUT_FILE, INSERT_POINT_REGEX, r\"\\1\\o\\g&lt;rev&gt;\")\n</pre>\n<p>As a second example, here is the same recipe for mustache markdown format:</p>\n<pre>OUTPUT_FILE = \"CHANGELOG.rst\"\nINSERT_POINT_REGEX = r'''(?isxu)\n^\n(\n  \\s*\\#\\s+Changelog\\s*(\\n|\\r\\n|\\r)        ## ``Changelog`` line\n)\n\n(                     ## Match all between changelog and release rev\n    (\n      (?!\n         (?&lt;=(\\n|\\r))                ## look back for newline\n         \\#\\#\\s+%(rev)s                     ## revision\n         \\s+\n         \\([0-9]+-[0-9]{2}-[0-9]{2}\\)(\\n|\\r\\n|\\r)   ## date\n      )\n      .\n    )*\n)\n\n(?P&lt;tail&gt;\\#\\#\\s+(?P&lt;rev&gt;%(rev)s))\n''' % {'rev': r\"[0-9]+\\.[0-9]+(\\.[0-9]+)?\"}\n\nrevs = [\n    Caret(FileFirstRegexMatch(OUTPUT_FILE, INSERT_POINT_REGEX)),\n    \"HEAD\"\n]\n\npublish = FileRegexSubst(OUTPUT_FILE, INSERT_POINT_REGEX, r\"\\1\\o\\n\\g&lt;tail&gt;\")\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Any suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.</p>\n<div id=\"push-request-guidelines\">\n<h3>Push Request Guidelines</h3>\n<p>You can send any code. I\u2019ll look at it and will integrate it myself in\nthe code base while leaving you as the commit(s) author. This process\ncan take time and it\u2019ll take less time if you follow the following\nguidelines:</p>\n<ul>\n<li>check your code with PEP8 or pylint. Try to stick to 80 columns wide.</li>\n<li>separate your commits per smallest concern</li>\n<li>each functionality/bugfix commit should contain the code, tests,\nand doc.</li>\n<li>each commit should pass the tests (to allow easy bisect)</li>\n<li>prior minor commit with typographic or code cosmetic changes are\nvery welcome. These should be tagged in their commit summary with\n<tt>!minor</tt>.</li>\n<li>the commit message should follow gitchangelog rules (check the git\nlog to get examples)</li>\n<li>if the commit fixes an issue or finished the implementation of a\nfeature, please mention it in the summary.</li>\n</ul>\n<p>If you have some questions about guidelines which is not answered here,\nplease check the current <tt>git log</tt>, you might find previous commit that\nwould show you how to deal with your issue. Otherwise, just send your PR\nand ask your question. I won\u2019t bite. Promise.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2012-2018 Valentin Lab.</p>\n<p>Licensed under the <a href=\"http://raw.github.com/vaab/gitchangelog/master/LICENSE\" rel=\"nofollow\">BSD License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6785656, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "d7535b37d45168070d00cb155b199766", "sha256": "9ce172561619d4fed33f836aaa57930cc8d5e968110fce2e492363dc64e57fe4"}, "downloads": -1, "filename": "gitchangelog_vt-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d7535b37d45168070d00cb155b199766", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 38935, "upload_time": "2019-12-19T15:40:28", "upload_time_iso_8601": "2019-12-19T15:40:28.614795Z", "url": "https://files.pythonhosted.org/packages/c6/5a/74a73add1d3fbe270da56c70f2b960026a95b2580bb3d04e78f81c4887a1/gitchangelog_vt-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "801759cc08a57eb8057a4532f57a27c9", "sha256": "cf2da747ba21f694f523f0f85fb505fa4a05bfc9557f5e9a72cc8d6ca6ac39c8"}, "downloads": -1, "filename": "gitchangelog-vt-1.2.tar.gz", "has_sig": false, "md5_digest": "801759cc08a57eb8057a4532f57a27c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45174, "upload_time": "2019-12-19T15:40:30", "upload_time_iso_8601": "2019-12-19T15:40:30.494660Z", "url": "https://files.pythonhosted.org/packages/a1/ea/faee92ece4c44c154328410fb6a1f151a3d5a89b414b52ec4c259d998eae/gitchangelog-vt-1.2.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "a6237c2354e3925c1ce530fc799211a4", "sha256": "890cb077829cdaa1b4ab3c801e93b8960125fb15bfc1f8cd10aa24f182f4385f"}, "downloads": -1, "filename": "gitchangelog_vt-2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a6237c2354e3925c1ce530fc799211a4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42001, "upload_time": "2020-01-03T14:19:08", "upload_time_iso_8601": "2020-01-03T14:19:08.410426Z", "url": "https://files.pythonhosted.org/packages/78/e9/23f7bc68d0ad268f0f48d80db5fda575c234669ce0461dfcc1d7a26afc20/gitchangelog_vt-2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e948ca3615b5ed32f2ef715ff89fee5", "sha256": "38fd684dbb0c959975a503263ce32b20f76739cd49a187ee52679f12fd47e113"}, "downloads": -1, "filename": "gitchangelog-vt-2.1.tar.gz", "has_sig": false, "md5_digest": "1e948ca3615b5ed32f2ef715ff89fee5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45481, "upload_time": "2020-01-03T14:19:10", "upload_time_iso_8601": "2020-01-03T14:19:10.316694Z", "url": "https://files.pythonhosted.org/packages/9d/c3/a8a910a12f010d78654f5dea4959c310d128ba1ad54921d44596e736a0c7/gitchangelog-vt-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "c2a94e61bf54b0034a148feee169c397", "sha256": "a8424ca3808ce0c30df916a1e11f9f25cc19a65109285ce0d67b5a04db144bb3"}, "downloads": -1, "filename": "gitchangelog_vt-2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2a94e61bf54b0034a148feee169c397", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42103, "upload_time": "2020-01-03T21:03:50", "upload_time_iso_8601": "2020-01-03T21:03:50.774213Z", "url": "https://files.pythonhosted.org/packages/69/2d/2e9c5213275b24f358eafcee88b01b5f3416df34dd3baef7f15e31600fd3/gitchangelog_vt-2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ed0049a7b348da63d69e82a26b3e790", "sha256": "b6756b99204fd4c448910f281821bf41105e25642e7a9ad7179c95ecf8e603e2"}, "downloads": -1, "filename": "gitchangelog-vt-2.2.tar.gz", "has_sig": false, "md5_digest": "2ed0049a7b348da63d69e82a26b3e790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45623, "upload_time": "2020-01-03T21:03:52", "upload_time_iso_8601": "2020-01-03T21:03:52.558813Z", "url": "https://files.pythonhosted.org/packages/72/ee/f13fe557679aee72189ce7404c19d0e3028436481f9651720a7ed1594b46/gitchangelog-vt-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "db35f308c6cb7545b5176459fa83a971", "sha256": "db54e138f06992b3809ac8a7f8d8460eba0253fe76ed112c0cb12028b911ece9"}, "downloads": -1, "filename": "gitchangelog_vt-2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db35f308c6cb7545b5176459fa83a971", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42155, "upload_time": "2020-01-07T15:17:01", "upload_time_iso_8601": "2020-01-07T15:17:01.719503Z", "url": "https://files.pythonhosted.org/packages/28/1b/75a4f25aab56f393716212afaa2cd95193fcaef521136be374ee558546df/gitchangelog_vt-2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e891343b74a682cec371ac2173945c9", "sha256": "e5756279b5c384b5aeea2ac029d3c68dbb6de5873d637acc37e27b2f87e97f6c"}, "downloads": -1, "filename": "gitchangelog-vt-2.3.tar.gz", "has_sig": false, "md5_digest": "2e891343b74a682cec371ac2173945c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45861, "upload_time": "2020-01-07T15:17:03", "upload_time_iso_8601": "2020-01-07T15:17:03.593642Z", "url": "https://files.pythonhosted.org/packages/ba/d3/2ee5c91ad3c5a0864ce910163adb8fc063dc87697a8159d9e6b09cc5d942/gitchangelog-vt-2.3.tar.gz", "yanked": false}], "3.0.7": [{"comment_text": "", "digests": {"md5": "a95e37b48f651cee71c70d5939f81ec9", "sha256": "dee98f4dde2153f14c9e2d0bed8ce7d2d6a4daaaee5bff6f5ea93e33a8d11ac5"}, "downloads": -1, "filename": "gitchangelog_vt-3.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a95e37b48f651cee71c70d5939f81ec9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42072, "upload_time": "2020-01-07T21:29:09", "upload_time_iso_8601": "2020-01-07T21:29:09.327282Z", "url": "https://files.pythonhosted.org/packages/6f/4d/924f68078170cfc529f400c602477abaf8385b967b850af61e3ff2b20fd2/gitchangelog_vt-3.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "022e6216075da6462e54d7efaebdfeb9", "sha256": "507fd43f78b265b2dd1cc02157554a56c42e27215fbfdc3ab5a7684eb60be498"}, "downloads": -1, "filename": "gitchangelog-vt-3.0.7.tar.gz", "has_sig": false, "md5_digest": "022e6216075da6462e54d7efaebdfeb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45727, "upload_time": "2020-01-07T21:29:11", "upload_time_iso_8601": "2020-01-07T21:29:11.312782Z", "url": "https://files.pythonhosted.org/packages/dd/b2/a5f513d425af40e1ba3a15a17f6c25db03cfb9d3322dceec42dcf70029d0/gitchangelog-vt-3.0.7.tar.gz", "yanked": false}], "3.0.8": [{"comment_text": "", "digests": {"md5": "5c3b5b9deb0815be020156ec8b7f23b3", "sha256": "c013cfb3058035b9ebc9acb03a92e7859cb71e59e6bc7aa451598df35758f5db"}, "downloads": -1, "filename": "gitchangelog_vt-3.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c3b5b9deb0815be020156ec8b7f23b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42081, "upload_time": "2020-01-09T17:15:15", "upload_time_iso_8601": "2020-01-09T17:15:15.761394Z", "url": "https://files.pythonhosted.org/packages/6b/ad/ea8f0a39080072286c52302e911aac569ffd72cbefe38b6fe6bc26ee449f/gitchangelog_vt-3.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b354b8a73846a09762973b0f21c7ceaa", "sha256": "0639617ca15920b0870a931ee1d625aff359cd801ce29922f88453666499e92c"}, "downloads": -1, "filename": "gitchangelog-vt-3.0.8.tar.gz", "has_sig": false, "md5_digest": "b354b8a73846a09762973b0f21c7ceaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45746, "upload_time": "2020-01-09T17:15:17", "upload_time_iso_8601": "2020-01-09T17:15:17.734937Z", "url": "https://files.pythonhosted.org/packages/5a/05/7bdc780df720e1d2c4a2e0b71b5f429ba67bbdc7a107ba500be1e15ba270/gitchangelog-vt-3.0.8.tar.gz", "yanked": false}], "3.0.9": [{"comment_text": "", "digests": {"md5": "1b8e20bf96a9a45866d8bb83de9dfcb0", "sha256": "fac4f1b4d14e868c766537fac74117de6f79cbfe1f674a7eca800f49fd4a972b"}, "downloads": -1, "filename": "gitchangelog_vt-3.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b8e20bf96a9a45866d8bb83de9dfcb0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 79792, "upload_time": "2020-03-10T15:05:52", "upload_time_iso_8601": "2020-03-10T15:05:52.186804Z", "url": "https://files.pythonhosted.org/packages/c1/70/6637990da32a80110083abd1a25d8fc1dd1171b7a1d2b1ac14f3b09719bb/gitchangelog_vt-3.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90c095bbbed633d0cdbd4c273d5f915c", "sha256": "f06f63c18c3a5264fe8c67f1873642b34b3ec2cca9a19183235468816ee13af8"}, "downloads": -1, "filename": "gitchangelog-vt-3.0.9.tar.gz", "has_sig": false, "md5_digest": "90c095bbbed633d0cdbd4c273d5f915c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75523, "upload_time": "2020-03-10T15:05:54", "upload_time_iso_8601": "2020-03-10T15:05:54.922778Z", "url": "https://files.pythonhosted.org/packages/56/22/aeb13c9b3b50d4b4671b481bb5df65d2b21785f94914a4951bcc81688b91/gitchangelog-vt-3.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b8e20bf96a9a45866d8bb83de9dfcb0", "sha256": "fac4f1b4d14e868c766537fac74117de6f79cbfe1f674a7eca800f49fd4a972b"}, "downloads": -1, "filename": "gitchangelog_vt-3.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b8e20bf96a9a45866d8bb83de9dfcb0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 79792, "upload_time": "2020-03-10T15:05:52", "upload_time_iso_8601": "2020-03-10T15:05:52.186804Z", "url": "https://files.pythonhosted.org/packages/c1/70/6637990da32a80110083abd1a25d8fc1dd1171b7a1d2b1ac14f3b09719bb/gitchangelog_vt-3.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90c095bbbed633d0cdbd4c273d5f915c", "sha256": "f06f63c18c3a5264fe8c67f1873642b34b3ec2cca9a19183235468816ee13af8"}, "downloads": -1, "filename": "gitchangelog-vt-3.0.9.tar.gz", "has_sig": false, "md5_digest": "90c095bbbed633d0cdbd4c273d5f915c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75523, "upload_time": "2020-03-10T15:05:54", "upload_time_iso_8601": "2020-03-10T15:05:54.922778Z", "url": "https://files.pythonhosted.org/packages/56/22/aeb13c9b3b50d4b4671b481bb5df65d2b21785f94914a4951bcc81688b91/gitchangelog-vt-3.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:09 2020"}