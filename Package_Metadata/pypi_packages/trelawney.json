{"info": {"author": "Skander Kamoun", "author_email": "skander.kam2@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "=========\ntrelawney\n=========\n\n\n.. image:: https://img.shields.io/pypi/v/trelawney.svg\n        :target: https://pypi.python.org/pypi/trelawney\n\n.. image:: https://img.shields.io/travis/aredier/trelawney.svg\n        :target: https://travis-ci.org/aredier/trelawney\n\n.. image:: https://readthedocs.org/projects/trelawney/badge/?version=latest\n        :target: https://trelawney.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://img.shields.io/github/license/skanderkam/trelawney\n        :alt: MIT License\n\n\n\nTrelawney is a general interpretability package that aims at providing a common api to use most of the modern\ninterpretability methods to shed light on sklearn compatible models (support for Keras and XGBoost are tested).\n\nTrelawney will try to provide you with two kind of explanation when possible:\n\n- global explanation of the model that highlights the most importance features the model uses to make its\n  predictions globally\n- local explanation of the model that will try to shed light on why a specific model made a specific prediction\n\nThe Trelawney package is build around:\n\n- some model specific explainers that use the inner workings of some types of models to explain them:\n   - `LogRegExplainer` that uses the weights of the your logistic regression to produce global and local explanations of\n     your model\n   - `TreeExplainer` that uses the path of your tree (single tree model only) to produce explanations of the model\n\n- Some model agnostic explainers that should work with all models:\n   - `LimeExplainer` that uses the Lime_ package to create local explanations only (the local nature of Lime prohibits\n     it from generating global explanations of a model\n   - `ShapExplainer` that uses the SHAP_ package to create local and global explanations of your model\n   - `SurrogateExplainer` that creates a general surogate of your model (fitted on the output of your model) using an\n     explainable model (`DecisionTreeClassifier`,`LogisticRegression` for now). The explainer will then use the\n     internals of the surrogate model to explain your black box model as well as informing you on how well the surrogate\n     model explains the black box one\n\nQuick Tutorial (30s to Trelawney):\n----------------------------------\n\nHere is an example of how to use a Trelawney explainer\n\n>>> model = LogisticRegression().fit(X, y)\n>>> # creating and fiting the explainer\n>>> explainer = ShapExplainer()\n>>> explainer.fit(model, X, y)\n>>> # explaining observation\n>>> explanation =  explainer.explain_local(X_expain)\n[\n    {'var_1': 0.1, 'var_2': -0.07, ...},\n    ...\n    {'var_1': 0.23, 'var_2': -0.15, ...} ,\n]\n>>> explanation =  explainer.graph_local_explanation(X_expain.iloc[:1, :])\n\n.. image:: http://drive.google.com/uc?export=view&id=1a1kdH8mjGdKiiF_JHR56L2-JeaRStwr2\n   :width: 400\n   :alt: Local Explanation Graph\n\n>>> explanation =  explainer.feature_importance(X_expain)\n{'var_1': 0.5, 'var_2': 0.2, ...} ,\n>>> explanation =  explainer.graph_feature_importance(X_expain)\n\n\n.. image:: http://drive.google.com/uc?export=view&id=1R2NFEU0bcZYpeiFsLZDKYfPkjHz-cHJ_\n   :width: 400\n   :alt: Local Explanation Graph\n\nFAQ\n---\n\n   Why should I use Trelawney rather than Lime_ and SHAP_\n\nwhile you can definitally use the Lime and SHAP packages directly (they will give you more control over how to use their\npackages), they are very specialized packages with different APIs, graphs and vocabulary. Trelawnaey offers you a\nunified API, representation and vocabulary for all state of the art explanation methods so that you don't lose time\nadapting to each new method but just change a class and Trelawney will adapt to you.\n\nComming Soon\n------------\n\n* Regressor Support (PR welcome)\n* Image and text Support (PR welcome)\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _SHAP: https://github.com/slundberg/shap\n.. _Lime: https://github.com/marcotcr/lime\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-10-02)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/skanderkam/trelawney", "keywords": "trelawney", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "trelawney", "package_url": "https://pypi.org/project/trelawney/", "platform": "", "project_url": "https://pypi.org/project/trelawney/", "project_urls": {"Homepage": "https://github.com/skanderkam/trelawney"}, "release_url": "https://pypi.org/project/trelawney/0.3.1/", "requires_dist": ["numpy (==1.17.2)", "pandas (==0.25.1)", "tqdm (==4.36.1)", "plotly (==4.1.1)", "scikit-learn (==0.21.3)", "xgboost (==0.90)", "Keras (==2.3.0)", "shap (==0.30.2)", "lime (==0.1.1.36)", "tensorflow (==1.15.2)"], "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Generic Interpretability package", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"trelawney\">\n<h2>trelawney</h2>\n<a href=\"https://pypi.python.org/pypi/trelawney\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/trelawney.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/133abbf1ae00584e91f654429e0ce1d4e151e34f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7472656c61776e65792e737667\"></a>\n<a href=\"https://travis-ci.org/aredier/trelawney\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/aredier/trelawney.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11b2543615156041b8537b8d766bfadefdb2ad4b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f617265646965722f7472656c61776e65792e737667\"></a>\n<a href=\"https://trelawney.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb18732262916e5554e60cb5bed2d139670a9438/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7472656c61776e65792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5859166317304d42c9da150e7ce397fe43b65ad5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736b616e6465726b616d2f7472656c61776e6579\">\n<p>Trelawney is a general interpretability package that aims at providing a common api to use most of the modern\ninterpretability methods to shed light on sklearn compatible models (support for Keras and XGBoost are tested).</p>\n<p>Trelawney will try to provide you with two kind of explanation when possible:</p>\n<ul>\n<li>global explanation of the model that highlights the most importance features the model uses to make its\npredictions globally</li>\n<li>local explanation of the model that will try to shed light on why a specific model made a specific prediction</li>\n</ul>\n<p>The Trelawney package is build around:</p>\n<ul>\n<li><dl>\n<dt>some model specific explainers that use the inner workings of some types of models to explain them:</dt>\n<dd><ul>\n<li><cite>LogRegExplainer</cite> that uses the weights of the your logistic regression to produce global and local explanations of\nyour model</li>\n<li><cite>TreeExplainer</cite> that uses the path of your tree (single tree model only) to produce explanations of the model</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Some model agnostic explainers that should work with all models:</dt>\n<dd><ul>\n<li><cite>LimeExplainer</cite> that uses the <a href=\"https://github.com/marcotcr/lime\" rel=\"nofollow\">Lime</a> package to create local explanations only (the local nature of Lime prohibits\nit from generating global explanations of a model</li>\n<li><cite>ShapExplainer</cite> that uses the <a href=\"https://github.com/slundberg/shap\" rel=\"nofollow\">SHAP</a> package to create local and global explanations of your model</li>\n<li><cite>SurrogateExplainer</cite> that creates a general surogate of your model (fitted on the output of your model) using an\nexplainable model (<cite>DecisionTreeClassifier</cite>,`LogisticRegression` for now). The explainer will then use the\ninternals of the surrogate model to explain your black box model as well as informing you on how well the surrogate\nmodel explains the black box one</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<div id=\"quick-tutorial-30s-to-trelawney\">\n<h3>Quick Tutorial (30s to Trelawney):</h3>\n<p>Here is an example of how to use a Trelawney explainer</p>\n<pre>&gt;&gt;&gt; model = LogisticRegression().fit(X, y)\n&gt;&gt;&gt; # creating and fiting the explainer\n&gt;&gt;&gt; explainer = ShapExplainer()\n&gt;&gt;&gt; explainer.fit(model, X, y)\n&gt;&gt;&gt; # explaining observation\n&gt;&gt;&gt; explanation =  explainer.explain_local(X_expain)\n[\n    {'var_1': 0.1, 'var_2': -0.07, ...},\n    ...\n    {'var_1': 0.23, 'var_2': -0.15, ...} ,\n]\n&gt;&gt;&gt; explanation =  explainer.graph_local_explanation(X_expain.iloc[:1, :])\n</pre>\n<img alt=\"Local Explanation Graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6e5a4b93dc52bfccc040f0f9d405be3d64bd339/687474703a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d766965772669643d3161316b6448386d6a47644b6969465f4a485235364c322d4a6561525374777232\" width=\"400\">\n<pre>&gt;&gt;&gt; explanation =  explainer.feature_importance(X_expain)\n{'var_1': 0.5, 'var_2': 0.2, ...} ,\n&gt;&gt;&gt; explanation =  explainer.graph_feature_importance(X_expain)\n</pre>\n<img alt=\"Local Explanation Graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03be0d279360ef3c423c897eef32cc33762d695f/687474703a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d766965772669643d3152324e4645553062635a5970656946734c5a444b5966506b6a487a2d63484a5f\" width=\"400\">\n</div>\n<div id=\"faq\">\n<h3>FAQ</h3>\n<blockquote>\nWhy should I use Trelawney rather than <a href=\"https://github.com/marcotcr/lime\" rel=\"nofollow\">Lime</a> and <a href=\"https://github.com/slundberg/shap\" rel=\"nofollow\">SHAP</a></blockquote>\n<p>while you can definitally use the Lime and SHAP packages directly (they will give you more control over how to use their\npackages), they are very specialized packages with different APIs, graphs and vocabulary. Trelawnaey offers you a\nunified API, representation and vocabulary for all state of the art explanation methods so that you don\u2019t lose time\nadapting to each new method but just change a class and Trelawney will adapt to you.</p>\n</div>\n<div id=\"comming-soon\">\n<h3>Comming Soon</h3>\n<ul>\n<li>Regressor Support (PR welcome)</li>\n<li>Image and text Support (PR welcome)</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2019-10-02)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6576781, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "3b9145ad9563de7ed7889f4beef8db74", "sha256": "e86613de138a5a92689862d7306f20dc7cca11ccece839d253a04044753489e8"}, "downloads": -1, "filename": "trelawney-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3b9145ad9563de7ed7889f4beef8db74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 99837, "upload_time": "2019-10-11T12:48:54", "upload_time_iso_8601": "2019-10-11T12:48:54.222613Z", "url": "https://files.pythonhosted.org/packages/e9/2b/1ab73b3fd98906e40772796f6e508a4b48c5295f37277869e57ddc915f09/trelawney-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6ea2f0038df4205b31d47b3fb74387f8", "sha256": "aa31803f25c7bfc5e904a841be62d76f652c42acca4c11c875325291e5023f25"}, "downloads": -1, "filename": "trelawney-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6ea2f0038df4205b31d47b3fb74387f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 99820, "upload_time": "2019-10-11T12:48:56", "upload_time_iso_8601": "2019-10-11T12:48:56.975212Z", "url": "https://files.pythonhosted.org/packages/2a/f1/6aa483cef343ebfdc2dcca50a15ea63b3204d8fd4f248d2e5560fb835648/trelawney-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "25cd1692da1b6e21fad0e0da7e90e8ad", "sha256": "993dbe705dc6eba218112a76e0174c505a611830322ad8b33c67ee5ad7db732d"}, "downloads": -1, "filename": "trelawney-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "25cd1692da1b6e21fad0e0da7e90e8ad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14863, "upload_time": "2020-02-05T15:07:33", "upload_time_iso_8601": "2020-02-05T15:07:33.453719Z", "url": "https://files.pythonhosted.org/packages/5d/d6/8cd4e466b22117c3a1d35a9779bc5d93c801b92214fff466d69266e20f3e/trelawney-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "135e8b2f9c8d0ba925467a21e45bb222", "sha256": "466e85b0dd3917921a2a3015c10fbc1a7c8d726ed1394505122d6f109c1f3b87"}, "downloads": -1, "filename": "trelawney-0.3.0.tar.gz", "has_sig": false, "md5_digest": "135e8b2f9c8d0ba925467a21e45bb222", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 2496566, "upload_time": "2020-02-05T15:07:36", "upload_time_iso_8601": "2020-02-05T15:07:36.076140Z", "url": "https://files.pythonhosted.org/packages/57/7f/ab9c9f3f89e7196f00ac7be9391b1e9ed3560a0e278a40e74255eb495bee/trelawney-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f3e4b18959191993a2e7792c829210f0", "sha256": "2ac606e5a32c94b4a940714357a6a97166e2a7a8656d147efd3777e7a4ad0dff"}, "downloads": -1, "filename": "trelawney-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3e4b18959191993a2e7792c829210f0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14855, "upload_time": "2020-02-05T16:12:50", "upload_time_iso_8601": "2020-02-05T16:12:50.977869Z", "url": "https://files.pythonhosted.org/packages/80/b8/83190794342222158929ffe6112d70bf09911f2221f085c312c288bea877/trelawney-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eeab983354a96a064ceea24c52a09925", "sha256": "2905b1d9c4f1c8937f7c770be25fcc6d5eb921351df498f5758658128ef40a56"}, "downloads": -1, "filename": "trelawney-0.3.1.tar.gz", "has_sig": false, "md5_digest": "eeab983354a96a064ceea24c52a09925", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 2496567, "upload_time": "2020-02-05T16:12:53", "upload_time_iso_8601": "2020-02-05T16:12:53.166788Z", "url": "https://files.pythonhosted.org/packages/f5/31/7b42d0027998e0dbced0fa0e0489f547b0a4b19c4522aafd6f2770190bb1/trelawney-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3e4b18959191993a2e7792c829210f0", "sha256": "2ac606e5a32c94b4a940714357a6a97166e2a7a8656d147efd3777e7a4ad0dff"}, "downloads": -1, "filename": "trelawney-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3e4b18959191993a2e7792c829210f0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14855, "upload_time": "2020-02-05T16:12:50", "upload_time_iso_8601": "2020-02-05T16:12:50.977869Z", "url": "https://files.pythonhosted.org/packages/80/b8/83190794342222158929ffe6112d70bf09911f2221f085c312c288bea877/trelawney-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eeab983354a96a064ceea24c52a09925", "sha256": "2905b1d9c4f1c8937f7c770be25fcc6d5eb921351df498f5758658128ef40a56"}, "downloads": -1, "filename": "trelawney-0.3.1.tar.gz", "has_sig": false, "md5_digest": "eeab983354a96a064ceea24c52a09925", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 2496567, "upload_time": "2020-02-05T16:12:53", "upload_time_iso_8601": "2020-02-05T16:12:53.166788Z", "url": "https://files.pythonhosted.org/packages/f5/31/7b42d0027998e0dbced0fa0e0489f547b0a4b19c4522aafd6f2770190bb1/trelawney-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:30 2020"}