{"info": {"author": "Alexander Ivanov", "author_email": "alexander.ivanov@redsolution.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Natural Language :: Russian", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Site Management", "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking"], "description": "===================\ndjango-trusted-html\n===================\n\nDjango-trusted-html will make your html correct, pretty and safe.\n-----------------------------------------------------------------\n\nUsage lyrics\n============\n\nSuppose that some users can post content to your site.\nAnd you want to allow them to post formatted text, images, tables and videos.\nThe best way is using HTML as native format and WYSIWYG editor as user interface.\nSo your users will create content easy and will be happy.\nThey will be able to copy-and-paste content from other sites or GUI-Editors.\nBut you can become unhappy. Your site can looks not homogeneous because of\ndifferent font-families, colors, indents that will come with copy-and-pasted content.\nAlso you can want to protect your site from JavaScript injections.\nIn this way you might want to use django-trusted-html.\n\n\nSanitizing\n----------\n\nThis is application for sanitizing HTML from:\n\n1. javascript injections\n2. objectionable CSS styles\n3. objectionable tags\n4. objectionable or inaccessible links, images and embedded objects\n\nFor example you can:\n\n1. remove scripts from user`s content posted to your site\n2. remove user-specified fonts and colors to make your site looks pretty\n3. allow user to post video for example only from 'youtube.com'\n4. disable images arranged not on your own site\n\n\nValid HTML\n----------\n\nThis is application for making valid HTML:\n\n1. remove incorrect tags, attributes, css-properties and css-values not allowed to this property\n2. check and remove broken link, and do some more things with them\n\nFor example you can:\n\n1. make all your content w3c valid\n2. remove broken links to other sites\n3. remove host name from links to you site.\n\n\nCustom\n------\n\nYou can:\n\n1. choose one of presets\n2. specify settings of validation\n3. customize rules of validation\n\nInstallation:\n=============\n\n1. Put ``trustedhtml`` in to your ``INSTALLED_APPS`` in your ``settings.py`` within your django project.\n\n2. Sync your database::\n\n    ./manage.py syncdb\n\n3. Customize settings in your ``settings.py``.\n\nTo learn more about settings read ``trustedhtml/settings.py``. \n\n\nRequirements:\n=============\n\nDjango 1.3+ is required.\nFor Django < 1.3 please check out django-trusted-html 0.1.2.\n\n\nUsage:\n======\n\nIn your models:\n---------------\n\n1. You can use TrustedField in your model ::\n\n\tfrom trustedhtml.fields import TrustedTextField\n\n\tclass MyModel(models.Model):\n\t    html = TrustedTextField()\n\nAlso you can specify one of predefined validators ::\n\n\tfrom trustedhtml.rules import full, normal, pretty\n\tfrom trustedhtml.fields import TrustedTextField\n\n\tclass MyModel(models.Model):\n\t    html = TrustedTextField(validator=pretty)\n\n``trustedhtml.rules.full`` rule will safe all html tags and css style described by w3c.\n\n``trustedhtml.rules.normal`` rule will remove dangerous html element, or elements that can break you design.\n\n``trustedhtml.rules.pretty`` rule also will remove colors, fonts, aligns, margins and other css and html attributes.\n\nBy the way, if you have django-tinymce in INSTALLED_APPS, than you can use TrustedHTMLField.\n\n2. You can validate html before it will be saved::\n\n\tfrom trustedhtml.rules import pretty\n\n\tclass MyModel(models.Model):\n\t    html = models.TextField()\n\t    def save(self, *args, **kwargs):\n\t        self.html = pretty.validate(self.html)\n\t        super(MyModel, self).save(*args, **kwargs)\n\nOr::\n\n\tfrom trustedhtml.rules import pretty\n\tfrom someapp.models import SomeModel\n\n\tdef content_save(sender, instance, **kwargs):\n\t    instance.content = pretty.validate(instance.content)\n\n\tpre_save.connect(content_save, sender=SomeModel)\n\n3. You can validate html by using widget::\n\n\tfrom django import forms\n\tfrom trustedhtml.widgets import TrustedTextarea\n\n\tclass FormField(forms.TextField):\n\t\twidget = TrustedTextarea\n\nIf you are using django-pages-cms, you can just use TrustedWidget in templates::\n\n\t{% placeholder main_content with TrustedTextarea %}\n\nOr for older versions of django-pages-cms::\n\n\t{% placeholder main_content with trustedhtml.widgets.TrustedTextarea %}\n\t\nAlso if you are using TinyMCE::\n\n    {% placeholder main_content with trustedhtml.widgets.TrustedTinyMCE %}\n\nOr for older versions of django-pages-cms::\n\n    {% placeholder main_content with TrustedTinyMCE %}\n    \n\n4. You can just ask trusted html to validate specified fields in specified models.\n\nIn some application::\n\n\tclass SomeModel(models.Model):\n\t\tname = models.CharField(max_length=100)\n\t    description = models.TextField()\n\nIn your ``settings.py``::\n\n\tTRUSTEDHTML_MODELS = [\n\t    {\n\t        'model': 'someapp.models.SomeModel',\n\t        'fields': ['description', ],\n\t    },\n    ]\n\nChangelog:\n----------\n\n* 0.1.0 - Initial release\n* 0.1.1 - Allow <iframe> elements from trusted sits (for youtube movies)\n* 0.1.2 - Setup for RedsolutionCMS execute in postmake and write settings in the end of settings.py\n* 0.2.0 - Django 1.6 compatibility.\n\nClassifiers:\n-------------\n\n`Content plugins`_\n\n.. _`Content plugins`: http://www.redsolutioncms.org/classifiers/content", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/redsolution/django-trusted-html", "keywords": "django html validation", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "redsolutioncms.django-trusted-html", "package_url": "https://pypi.org/project/redsolutioncms.django-trusted-html/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/redsolutioncms.django-trusted-html/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/redsolution/django-trusted-html"}, "release_url": "https://pypi.org/project/redsolutioncms.django-trusted-html/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Perhaps the best in the world HTML validator.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-trusted-html-will-make-your-html-correct-pretty-and-safe\">\n<h2>Django-trusted-html will make your html correct, pretty and safe.</h2>\n<h2 id=\"usage-lyrics\"><span class=\"section-subtitle\">Usage lyrics</span></h2>\n<p>Suppose that some users can post content to your site.\nAnd you want to allow them to post formatted text, images, tables and videos.\nThe best way is using HTML as native format and WYSIWYG editor as user interface.\nSo your users will create content easy and will be happy.\nThey will be able to copy-and-paste content from other sites or GUI-Editors.\nBut you can become unhappy. Your site can looks not homogeneous because of\ndifferent font-families, colors, indents that will come with copy-and-pasted content.\nAlso you can want to protect your site from JavaScript injections.\nIn this way you might want to use django-trusted-html.</p>\n</div>\n<div id=\"sanitizing\">\n<h2>Sanitizing</h2>\n<p>This is application for sanitizing HTML from:</p>\n<ol>\n<li>javascript injections</li>\n<li>objectionable CSS styles</li>\n<li>objectionable tags</li>\n<li>objectionable or inaccessible links, images and embedded objects</li>\n</ol>\n<p>For example you can:</p>\n<ol>\n<li>remove scripts from user`s content posted to your site</li>\n<li>remove user-specified fonts and colors to make your site looks pretty</li>\n<li>allow user to post video for example only from \u2018youtube.com\u2019</li>\n<li>disable images arranged not on your own site</li>\n</ol>\n</div>\n<div id=\"valid-html\">\n<h2>Valid HTML</h2>\n<p>This is application for making valid HTML:</p>\n<ol>\n<li>remove incorrect tags, attributes, css-properties and css-values not allowed to this property</li>\n<li>check and remove broken link, and do some more things with them</li>\n</ol>\n<p>For example you can:</p>\n<ol>\n<li>make all your content w3c valid</li>\n<li>remove broken links to other sites</li>\n<li>remove host name from links to you site.</li>\n</ol>\n</div>\n<div id=\"custom\">\n<h2>Custom</h2>\n<p>You can:</p>\n<ol>\n<li>choose one of presets</li>\n<li>specify settings of validation</li>\n<li>customize rules of validation</li>\n</ol>\n<div id=\"installation\">\n<h3>Installation:</h3>\n<ol>\n<li><p>Put <tt>trustedhtml</tt> in to your <tt>INSTALLED_APPS</tt> in your <tt>settings.py</tt> within your django project.</p>\n</li>\n<li><p>Sync your database:</p>\n<pre>./manage.py syncdb\n</pre>\n</li>\n<li><p>Customize settings in your <tt>settings.py</tt>.</p>\n</li>\n</ol>\n<p>To learn more about settings read <tt>trustedhtml/settings.py</tt>.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements:</h3>\n<p>Django 1.3+ is required.\nFor Django &lt; 1.3 please check out django-trusted-html 0.1.2.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage:</h3>\n</div>\n</div>\n<div id=\"in-your-models\">\n<h2>In your models:</h2>\n<ol>\n<li><p>You can use TrustedField in your model</p>\n<pre>from trustedhtml.fields import TrustedTextField\n\nclass MyModel(models.Model):\n    html = TrustedTextField()\n</pre>\n</li>\n</ol>\n<p>Also you can specify one of predefined validators</p>\n<pre>from trustedhtml.rules import full, normal, pretty\nfrom trustedhtml.fields import TrustedTextField\n\nclass MyModel(models.Model):\n    html = TrustedTextField(validator=pretty)\n</pre>\n<p><tt>trustedhtml.rules.full</tt> rule will safe all html tags and css style described by w3c.</p>\n<p><tt>trustedhtml.rules.normal</tt> rule will remove dangerous html element, or elements that can break you design.</p>\n<p><tt>trustedhtml.rules.pretty</tt> rule also will remove colors, fonts, aligns, margins and other css and html attributes.</p>\n<p>By the way, if you have django-tinymce in INSTALLED_APPS, than you can use TrustedHTMLField.</p>\n<ol>\n<li><p>You can validate html before it will be saved:</p>\n<pre>from trustedhtml.rules import pretty\n\nclass MyModel(models.Model):\n    html = models.TextField()\n    def save(self, *args, **kwargs):\n        self.html = pretty.validate(self.html)\n        super(MyModel, self).save(*args, **kwargs)\n</pre>\n</li>\n</ol>\n<p>Or:</p>\n<pre>from trustedhtml.rules import pretty\nfrom someapp.models import SomeModel\n\ndef content_save(sender, instance, **kwargs):\n    instance.content = pretty.validate(instance.content)\n\npre_save.connect(content_save, sender=SomeModel)\n</pre>\n<ol>\n<li><p>You can validate html by using widget:</p>\n<pre>from django import forms\nfrom trustedhtml.widgets import TrustedTextarea\n\nclass FormField(forms.TextField):\n        widget = TrustedTextarea\n</pre>\n</li>\n</ol>\n<p>If you are using django-pages-cms, you can just use TrustedWidget in templates:</p>\n<pre>{% placeholder main_content with TrustedTextarea %}\n</pre>\n<p>Or for older versions of django-pages-cms:</p>\n<pre>{% placeholder main_content with trustedhtml.widgets.TrustedTextarea %}\n</pre>\n<p>Also if you are using TinyMCE:</p>\n<pre>{% placeholder main_content with trustedhtml.widgets.TrustedTinyMCE %}\n</pre>\n<p>Or for older versions of django-pages-cms:</p>\n<pre>{% placeholder main_content with TrustedTinyMCE %}\n</pre>\n<ol>\n<li>You can just ask trusted html to validate specified fields in specified models.</li>\n</ol>\n<p>In some application:</p>\n<pre>class SomeModel(models.Model):\n        name = models.CharField(max_length=100)\n    description = models.TextField()\n</pre>\n<p>In your <tt>settings.py</tt>:</p>\n<pre>    TRUSTEDHTML_MODELS = [\n        {\n            'model': 'someapp.models.SomeModel',\n            'fields': ['description', ],\n        },\n]\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog:</h2>\n<ul>\n<li>0.1.0 - Initial release</li>\n<li>0.1.1 - Allow &lt;iframe&gt; elements from trusted sits (for youtube movies)</li>\n<li>0.1.2 - Setup for RedsolutionCMS execute in postmake and write settings in the end of settings.py</li>\n<li>0.2.0 - Django 1.6 compatibility.</li>\n</ul>\n</div>\n<div id=\"classifiers\">\n<h2>Classifiers:</h2>\n<p><a href=\"http://www.redsolutioncms.org/classifiers/content\" rel=\"nofollow\">Content plugins</a></p>\n</div>\n\n          </div>"}, "last_serial": 1096919, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ba6eccfb062d84e1862cf613a8846e38", "sha256": "8d78a0e909072d4710d4508f79638ad84f7750a4459ad367899e958382d7cac5"}, "downloads": -1, "filename": "redsolutioncms.django-trusted-html-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ba6eccfb062d84e1862cf613a8846e38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72527, "upload_time": "2010-10-21T22:14:52", "upload_time_iso_8601": "2010-10-21T22:14:52.234935Z", "url": "https://files.pythonhosted.org/packages/eb/f1/9103686debe9d1ab1e14dbd16b505165e06d10af1a1031e49e417eec7a8a/redsolutioncms.django-trusted-html-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9fc83843f431f774ad315cc24f8c66ea", "sha256": "10ad597d94a556f57edf9915621ad0a1c652cd858371ef615e6b063daef33598"}, "downloads": -1, "filename": "redsolutioncms.django-trusted-html-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9fc83843f431f774ad315cc24f8c66ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 227632, "upload_time": "2011-06-21T15:18:06", "upload_time_iso_8601": "2011-06-21T15:18:06.799918Z", "url": "https://files.pythonhosted.org/packages/bf/9f/8ebcc9e033ba799619abb74823d96640b8320d4426cf4a88b05f5521a5e7/redsolutioncms.django-trusted-html-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "becbce25e1c15c431312cf60bd021fe9", "sha256": "9355cd2997427b501e7f74cda97593b5b879ec35af5db9ce3f739759143da745"}, "downloads": -1, "filename": "redsolutioncms.django-trusted-html-0.1.2.tar.gz", "has_sig": false, "md5_digest": "becbce25e1c15c431312cf60bd021fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144458, "upload_time": "2011-07-29T10:43:11", "upload_time_iso_8601": "2011-07-29T10:43:11.100114Z", "url": "https://files.pythonhosted.org/packages/14/13/62784e71b33cd39fdecb2e99bdc37018c7e57ad82cd6ddbfddb9ccaf6d33/redsolutioncms.django-trusted-html-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b0dc6954fdadc8c4cb511e376d3b388f", "sha256": "2898c3485d18076f33e2febcb7b0f1a0b15bc6a7c5387ffc00ce53e79ac0ddf9"}, "downloads": -1, "filename": "redsolutioncms.django-trusted-html-0.2.0.zip", "has_sig": false, "md5_digest": "b0dc6954fdadc8c4cb511e376d3b388f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 186092, "upload_time": "2014-05-19T08:28:08", "upload_time_iso_8601": "2014-05-19T08:28:08.448713Z", "url": "https://files.pythonhosted.org/packages/72/1c/e4e0171018f2e883ed70ffcd7fcf612ef65c781ce004555b3b1fc6af54df/redsolutioncms.django-trusted-html-0.2.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0dc6954fdadc8c4cb511e376d3b388f", "sha256": "2898c3485d18076f33e2febcb7b0f1a0b15bc6a7c5387ffc00ce53e79ac0ddf9"}, "downloads": -1, "filename": "redsolutioncms.django-trusted-html-0.2.0.zip", "has_sig": false, "md5_digest": "b0dc6954fdadc8c4cb511e376d3b388f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 186092, "upload_time": "2014-05-19T08:28:08", "upload_time_iso_8601": "2014-05-19T08:28:08.448713Z", "url": "https://files.pythonhosted.org/packages/72/1c/e4e0171018f2e883ed70ffcd7fcf612ef65c781ce004555b3b1fc6af54df/redsolutioncms.django-trusted-html-0.2.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:05:35 2020"}