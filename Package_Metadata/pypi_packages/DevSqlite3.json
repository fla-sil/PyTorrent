{"info": {"author": "Omar Othman", "author_email": "ceunix@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PySqlite3 Helper\nA Python package to create sqlite3 database and get data and insert data with python classes, you can also using Sqlite3 commands!\n\n\n# Why PySqlite3 helper?\nIt is an easy-to-use and fastest library, where it can maintain its connection with Sqlite3 database while working\n\n## Usage\n\nfirst create python file called tables.py or some other name\n\n```\n# class name is your table name\nclass Users:\n\t# this is your table indexes, you must add self.id = \"text\" for work without any error\n\tdef __init__(self):\n\t\t# default index\n\t\tself.id = \"text\"\n\t\t# add indexes to your table\n\t\tself.username = \"text\"\n\t\tself.password = \"text\"\n\t\tself.first_name = \"text\"\n\t\tself.last_name = \"text\"\n\t\t# etc...\n\n# you can create other class for other database in this file\n\n```\n\nbuild sqlite database in your main project\n\n```\nfrom DevSqlite3.DevDB import Database, DatabaseBuilder\n\nfrom table import * # table is your table.py python file \n\n@Database\nclass YourUsersDatabaseName(DatabaseBuilder):\n\tdef __init__(self):\n\t\tsuper().__init__(self)\n\n\t@staticmethod\n\tdef __superclass__():\n\t\treturn Users # this is your Users class on table.py python file\n\n# database was successfully created!!\n\n```\n\nnow some examples:\n\n```\n# insert data to database\n\nuser = Users()\nuser.id = 0 # don't use it because it will change automatically to INTEGER PRIMARY KEY\nuser.username = \"omar.othman\"\nuser.password = \"******\"\nuser.first_name = \"Omar\"\nuser.last_name = \"Othman\"\n\ndb = YourUsersDatabaseName()\ndb.insert(user)\n\n# get data from database\ndb = YourUsersDatabaseName()\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").get_first()\nif result:\n\tprint(\"hey i found him:\\nFirstName: {}\\nLastName: {}\\nPassword: {}\".format(result.first_name, result.last_name, result.password))\nelse:\n\tprint(\"Oh sorry not found\")\n\n# get all users name equals omar.othman\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").get_all() # result as array\nif result:\n\tprint(\"got some users\")\n\tfor user in result:\n\t\tprint(\"FirstName: {}\\nLastName: {}\\nPassword: {}\".format(user.first_name, user.last_name, user.password))\nelse:\n\tprint(\"Oh sorry not found\")\n\n# update result\nif result:\n\tresult.password = \"1234\"\n\tdb.update(result) # update if exists\n\t# you can use also db.insertOrUpdate(result), that's mean delete if exists and insert\n\n# delete result:\nif result:\n\tdb.delete(result)\n\n\n# start with sqlite3 commands\ndb = YourUsersDatabaseName()\ndb.select(Users).query(\"update __table__ set password='1234' where username='omar.othman'\") # use __table__ for table name\n\n\n# or get result as superclass array\nresult = db.select(Users).query(\"select * from __table__ where etc.. or just select * from __table__\") # result will be empty array if empty or array of Users\nif result:\n\tfor user in result:\n\t\tprint(user.username)\n\n# is not finish there is more examples XD\n\ndb = YourUsersDatabaseName()\nresult = db.select(Users).get_all()\n# or\nresult = db.select(Users).order_by(\"variable_name\", stuff=\"desc\", limit=10).get_all() # stuff defult is asc and limit 0 is means all of data\n# or\nresult = db.select(Users).where(\"first_name\").like(\"Omar\").order_by(\"username\").get_all()\n# or\nresult = db.select(Users).where(\"first_name).like(\"Omar\").or_where(\"last_name\").like(\"Othman\").get_all()\n# or\nresult = db.select(Users).where(\"first_name\").like(\"Omar\").and_where(\"last_name\").like(\"Othman\").get_all()\n\n# or\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").and_where(\"password\").equals(\"123\").get_first()\n\n\n\n\n# you can also insert list or dict or int or str in class varablie examples\n\nuser = Users()\nuser.username = \"omar.othman\"\nuser.password = \"12345\"\nuser.first_name = [\"Omar\", \"other\", \"other...\"]\nuser.last_name = {\"key\": \"value\"}\ndb = YourUsersDatabaseName()\ndb.insert(user)\n# and you will got result as list or dict\ndb = YourUsersDatabaseName()\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").get_first()\nif result:\n\tfor item in result.first_name:\n\t\tprint(item)\n\tfor key in result.last_name:\n\t\tprint(\"Key: {}, Value: {}\".format(key, result.last_name[key]))\n# etc......\n\n```\n\n## Database Select class functions\n\nFunction name | paramerts\n------------ | -------------\nwhere | class_variable_name\nor_where | class_variable_name\nand_where | class_variable_name\nequals | string, integar\nget_first | get the first result from sqlite3 database as python class or None if not found\nget_all | get all result from sqlite3 database as array of python class or empty array if not found\nquery | sqlite3 comnmands use __table__ instand of table_name, return empty array if there no result, or array of class\n\n## Database functions\n\nFunction Name | Parameter\n------------ | -------------\ninsert | python class\ninsertOrUpdate | python class\ndelete | python class\nupdate | python class\nSelect | python class\n\n\n# that's was all\n\nThank you if you want to support me https://paypal.me/nxdev \n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/omar-othmann/DevSqlite3", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DevSqlite3", "package_url": "https://pypi.org/project/DevSqlite3/", "platform": "", "project_url": "https://pypi.org/project/DevSqlite3/", "project_urls": {"Homepage": "https://github.com/omar-othmann/DevSqlite3"}, "release_url": "https://pypi.org/project/DevSqlite3/0.0.1/", "requires_dist": null, "requires_python": ">=3", "summary": "Sqlite3 helper", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PySqlite3 Helper</h1>\n<p>A Python package to create sqlite3 database and get data and insert data with python classes, you can also using Sqlite3 commands!</p>\n<h1>Why PySqlite3 helper?</h1>\n<p>It is an easy-to-use and fastest library, where it can maintain its connection with Sqlite3 database while working</p>\n<h2>Usage</h2>\n<p>first create python file called tables.py or some other name</p>\n<pre><code># class name is your table name\nclass Users:\n\t# this is your table indexes, you must add self.id = \"text\" for work without any error\n\tdef __init__(self):\n\t\t# default index\n\t\tself.id = \"text\"\n\t\t# add indexes to your table\n\t\tself.username = \"text\"\n\t\tself.password = \"text\"\n\t\tself.first_name = \"text\"\n\t\tself.last_name = \"text\"\n\t\t# etc...\n\n# you can create other class for other database in this file\n\n</code></pre>\n<p>build sqlite database in your main project</p>\n<pre><code>from DevSqlite3.DevDB import Database, DatabaseBuilder\n\nfrom table import * # table is your table.py python file \n\n@Database\nclass YourUsersDatabaseName(DatabaseBuilder):\n\tdef __init__(self):\n\t\tsuper().__init__(self)\n\n\t@staticmethod\n\tdef __superclass__():\n\t\treturn Users # this is your Users class on table.py python file\n\n# database was successfully created!!\n\n</code></pre>\n<p>now some examples:</p>\n<pre><code># insert data to database\n\nuser = Users()\nuser.id = 0 # don't use it because it will change automatically to INTEGER PRIMARY KEY\nuser.username = \"omar.othman\"\nuser.password = \"******\"\nuser.first_name = \"Omar\"\nuser.last_name = \"Othman\"\n\ndb = YourUsersDatabaseName()\ndb.insert(user)\n\n# get data from database\ndb = YourUsersDatabaseName()\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").get_first()\nif result:\n\tprint(\"hey i found him:\\nFirstName: {}\\nLastName: {}\\nPassword: {}\".format(result.first_name, result.last_name, result.password))\nelse:\n\tprint(\"Oh sorry not found\")\n\n# get all users name equals omar.othman\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").get_all() # result as array\nif result:\n\tprint(\"got some users\")\n\tfor user in result:\n\t\tprint(\"FirstName: {}\\nLastName: {}\\nPassword: {}\".format(user.first_name, user.last_name, user.password))\nelse:\n\tprint(\"Oh sorry not found\")\n\n# update result\nif result:\n\tresult.password = \"1234\"\n\tdb.update(result) # update if exists\n\t# you can use also db.insertOrUpdate(result), that's mean delete if exists and insert\n\n# delete result:\nif result:\n\tdb.delete(result)\n\n\n# start with sqlite3 commands\ndb = YourUsersDatabaseName()\ndb.select(Users).query(\"update __table__ set password='1234' where username='omar.othman'\") # use __table__ for table name\n\n\n# or get result as superclass array\nresult = db.select(Users).query(\"select * from __table__ where etc.. or just select * from __table__\") # result will be empty array if empty or array of Users\nif result:\n\tfor user in result:\n\t\tprint(user.username)\n\n# is not finish there is more examples XD\n\ndb = YourUsersDatabaseName()\nresult = db.select(Users).get_all()\n# or\nresult = db.select(Users).order_by(\"variable_name\", stuff=\"desc\", limit=10).get_all() # stuff defult is asc and limit 0 is means all of data\n# or\nresult = db.select(Users).where(\"first_name\").like(\"Omar\").order_by(\"username\").get_all()\n# or\nresult = db.select(Users).where(\"first_name).like(\"Omar\").or_where(\"last_name\").like(\"Othman\").get_all()\n# or\nresult = db.select(Users).where(\"first_name\").like(\"Omar\").and_where(\"last_name\").like(\"Othman\").get_all()\n\n# or\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").and_where(\"password\").equals(\"123\").get_first()\n\n\n\n\n# you can also insert list or dict or int or str in class varablie examples\n\nuser = Users()\nuser.username = \"omar.othman\"\nuser.password = \"12345\"\nuser.first_name = [\"Omar\", \"other\", \"other...\"]\nuser.last_name = {\"key\": \"value\"}\ndb = YourUsersDatabaseName()\ndb.insert(user)\n# and you will got result as list or dict\ndb = YourUsersDatabaseName()\nresult = db.select(Users).where(\"username\").equals(\"omar.othman\").get_first()\nif result:\n\tfor item in result.first_name:\n\t\tprint(item)\n\tfor key in result.last_name:\n\t\tprint(\"Key: {}, Value: {}\".format(key, result.last_name[key]))\n# etc......\n\n</code></pre>\n<h2>Database Select class functions</h2>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>paramerts</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>where</td>\n<td>class_variable_name</td>\n</tr>\n<tr>\n<td>or_where</td>\n<td>class_variable_name</td>\n</tr>\n<tr>\n<td>and_where</td>\n<td>class_variable_name</td>\n</tr>\n<tr>\n<td>equals</td>\n<td>string, integar</td>\n</tr>\n<tr>\n<td>get_first</td>\n<td>get the first result from sqlite3 database as python class or None if not found</td>\n</tr>\n<tr>\n<td>get_all</td>\n<td>get all result from sqlite3 database as array of python class or empty array if not found</td>\n</tr>\n<tr>\n<td>query</td>\n<td>sqlite3 comnmands use <strong>table</strong> instand of table_name, return empty array if there no result, or array of class</td>\n</tr></tbody></table>\n<h2>Database functions</h2>\n<table>\n<thead>\n<tr>\n<th>Function Name</th>\n<th>Parameter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>insert</td>\n<td>python class</td>\n</tr>\n<tr>\n<td>insertOrUpdate</td>\n<td>python class</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>python class</td>\n</tr>\n<tr>\n<td>update</td>\n<td>python class</td>\n</tr>\n<tr>\n<td>Select</td>\n<td>python class</td>\n</tr></tbody></table>\n<h1>that's was all</h1>\n<p>Thank you if you want to support me <a href=\"https://paypal.me/nxdev\" rel=\"nofollow\">https://paypal.me/nxdev</a></p>\n\n          </div>"}, "last_serial": 7145907, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "268498b9733c011def7331e5e97761d5", "sha256": "0df7131eb00ed444ad809d8e8f356a9001724bdeb8cef4a774ef72800657f92f"}, "downloads": -1, "filename": "DevSqlite3-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "268498b9733c011def7331e5e97761d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6593, "upload_time": "2020-05-01T15:40:03", "upload_time_iso_8601": "2020-05-01T15:40:03.496936Z", "url": "https://files.pythonhosted.org/packages/f9/12/d847a8096ad3cd1d108b0d49218e406d8c8ae3a1dcf27e3d6daface2f4c1/DevSqlite3-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4850cf89357aa688dfc4cf0d461fc8c5", "sha256": "10bf7e7ad20c0e88593bab352bccfe5d7a3bd4987a9d43439a964721c2529ff5"}, "downloads": -1, "filename": "DevSqlite3-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4850cf89357aa688dfc4cf0d461fc8c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5685, "upload_time": "2020-05-01T15:40:05", "upload_time_iso_8601": "2020-05-01T15:40:05.848795Z", "url": "https://files.pythonhosted.org/packages/2a/77/df952a1057a0cff178a20c3053eb94afeec8147b1b79b722e5922fe6fff5/DevSqlite3-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "268498b9733c011def7331e5e97761d5", "sha256": "0df7131eb00ed444ad809d8e8f356a9001724bdeb8cef4a774ef72800657f92f"}, "downloads": -1, "filename": "DevSqlite3-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "268498b9733c011def7331e5e97761d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6593, "upload_time": "2020-05-01T15:40:03", "upload_time_iso_8601": "2020-05-01T15:40:03.496936Z", "url": "https://files.pythonhosted.org/packages/f9/12/d847a8096ad3cd1d108b0d49218e406d8c8ae3a1dcf27e3d6daface2f4c1/DevSqlite3-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4850cf89357aa688dfc4cf0d461fc8c5", "sha256": "10bf7e7ad20c0e88593bab352bccfe5d7a3bd4987a9d43439a964721c2529ff5"}, "downloads": -1, "filename": "DevSqlite3-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4850cf89357aa688dfc4cf0d461fc8c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5685, "upload_time": "2020-05-01T15:40:05", "upload_time_iso_8601": "2020-05-01T15:40:05.848795Z", "url": "https://files.pythonhosted.org/packages/2a/77/df952a1057a0cff178a20c3053eb94afeec8147b1b79b722e5922fe6fff5/DevSqlite3-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:49 2020"}