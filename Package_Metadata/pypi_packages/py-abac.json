{"info": {"author": "Ketan Goyal", "author_email": "ketangoyal1988@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Security", "Topic :: Software Development", "Topic :: System :: Networking", "Topic :: System :: Networking :: Firewalls", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "# py-ABAC\nAttribute Based Access Control (ABAC) for python. \n\n[![Build Status](https://travis-ci.com/ketgo/py-abac.svg?token=oCVxhfjJAa2zDdszGjoy&branch=master)](https://travis-ci.com/ketgo/py-abac)\n[![codecov.io](https://codecov.io/gh/ketgo/pyabac/coverage.svg?branch=master)](https://codecov.io/gh/ketgo/pyabac/coverage.svg?branch=master)\n[![Apache 2.0 licensed](https://img.shields.io/badge/License-Apache%202.0-yellow.svg)](https://raw.githubusercontent.com/kolotaev/vakt/master/LICENSE)\n\n---\n\n## Introduction\n\nPy-ABAC is an attribute-based access control ([ABAC](https://en.wikipedia.org/wiki/Attribute-based_access_control)) toolkit based on policies. ABAC gives you a fine-grained control on definition of the rules that restrict an access to resources and is generally considered a \"next generation\" authorization model. The design of py-ABAC stems from the [XACML](https://en.wikipedia.org/wiki/XACML) standard, and the ABAC python SDK [Vakt](https://github.com/kolotaev/vakt).\n\nSee [documentation](https://py-abac.readthedocs.io) for more details.\n\n## Install\n\nPyABAC runs on Python >= 3.5. PyPy implementation is supported as well.\n\n\nTo install run the following:\n```bash\npip install py-abac\n```\n\n## Example Usage\n\nA quick dive-in:\n\n```python\nfrom pymongo import MongoClient\nfrom py_abac import PDP, Policy, AccessRequest\nfrom py_abac.storage import MongoStorage\n\n# Policy definition in JSON\npolicy_json = {\n    \"uid\": \"1\",\n    \"description\": \"Max and Nina are allowed to create, delete, get any \"\n                   \"resources only if the client IP matches.\",\n    \"effect\": \"allow\",\n    \"rules\": {\n        \"subject\": [{\"$.name\": {\"condition\": \"Equals\", \"value\": \"Max\"}},\n                    {\"$.name\": {\"condition\": \"Equals\", \"value\": \"Nina\"}}],\n        \"resource\": {\"$.name\": {\"condition\": \"RegexMatch\", \"value\": \".*\"}},\n        \"action\": [{\"$.method\": {\"condition\": \"Equals\", \"value\": \"create\"}},\n                   {\"$.method\": {\"condition\": \"Equals\", \"value\": \"delete\"}},\n                   {\"$.method\": {\"condition\": \"Equals\", \"value\": \"get\"}}],\n        \"context\": {\"$.ip\": {\"condition\": \"CIDR\", \"value\": \"127.0.0.1/32\"}}\n    },\n    \"targets\": {},\n    \"priority\": 0\n}\n# Parse JSON and create policy object\npolicy = Policy.from_json(policy_json)\n\n# Setup policy storage\nclient = MongoClient()\nstorage = MongoStorage(client)\n# Add policy to storage\nstorage.add(policy)\n\n# Create policy decision point\npdp = PDP(storage)\n\n# A sample access request JSON\nrequest_json = {\n    \"subject\": {\n        \"id\": \"\", \n        \"attributes\": {\"name\": \"Max\"}\n    },\n    \"resource\": {\n        \"id\": \"\", \n        \"attributes\": {\"name\": \"myrn:example.com:resource:123\"}\n    },\n    \"action\": {\n        \"id\": \"\", \n        \"attributes\": {\"method\": \"get\"}\n    },\n    \"context\": {\n        \"ip\": \"127.0.0.1\"\n    }\n}\n# Parse JSON and create access request object\nrequest = AccessRequest.from_json(request_json)\n\n# Check if access request is allowed. Evaluates to True since \n# Max is allowed to get any resource when client IP matches.\nassert pdp.is_allowed(request)\n```\n\n## Documentation\n\nPy-ABAC documentation can be found at [https://py-abac.readthedocs.io](https://py-abac.readthedocs.io)\n\nYou can also build the documentation by running `make html` inside the `docs` folder.\n\n## Logging\n\npy-ABAC follows a common logging pattern for libraries:\n\nIts corresponding modules log all the events that happen but the log messages by default are handled by `NullHandler`. It's up to the outer code/application to provide desired log handlers, filters, levels, etc.\n\nFor example:\n\n```python\nimport logging\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\nroot.addHandler(logging.StreamHandler())\n\n... # here go all the py_abac calls.\n```\n\n## Milestones\n\nMost valuable features to be implemented in the order of importance:\n\n- [x] Sphinx Documentation\n- [ ] Policy Obligations\n- [ ] In-Memory Storage\n- [x] SQL Storage\n- [ ] Caching mechanism for Storage\n- [ ] File Storage\n\n## Acknowledgements\n\nThe conceptual and implementation design of py-ABAC stems from the [XACML](https://en.wikipedia.org/wiki/XACML) standard and the ABAC python SDK [Vakt](https://github.com/kolotaev/vakt).\n\n*[Back to top](#py-abac)*\n\n## Development\n\nTo hack py-ABAC locally run:\n\n```bash\n$ pip install -e .[dev]\t\t\t# to install all dependencies\n$ docker run --rm -d -p 27017:27017 mongo\t\t\t# Run mongodb server on docker\n$ pytest --cov=py_abac tests/\t\t\t# to get coverage report\n$ pylint py_abac\t\t\t# to check code quality with PyLint\n$ bandit py_abac\t\t\t# to check code security with Bandit\n```\n\nOptionally you can use `make` to perform development tasks.\n\n## License\n\nThe source code is licensed under Apache License Version 2.0\n\n## Contributions\n\nPull requests and bug reports always welcomed! :)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ketgo/py-abac", "keywords": "ACL ABAC access-control policy security authorization permission", "license": "Apache 2.0 license", "maintainer": "", "maintainer_email": "", "name": "py-abac", "package_url": "https://pypi.org/project/py-abac/", "platform": "", "project_url": "https://pypi.org/project/py-abac/", "project_urls": {"Homepage": "https://github.com/ketgo/py-abac"}, "release_url": "https://pypi.org/project/py-abac/0.3.0/", "requires_dist": null, "requires_python": ">3.4", "summary": "Attribute-based access control (ABAC)", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-ABAC</h1>\n<p>Attribute Based Access Control (ABAC) for python.</p>\n<p><a href=\"https://travis-ci.com/ketgo/py-abac\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24cf0c4ddc01ab6ce4e16a0a958325b7565e1581/68747470733a2f2f7472617669732d63692e636f6d2f6b6574676f2f70792d616261632e7376673f746f6b656e3d6f43567868666a4a4161327a4464737a476a6f79266272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ketgo/pyabac/coverage.svg?branch=master\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbaf6d4af9dfd4370a82676817da1158e0a73246/68747470733a2f2f636f6465636f762e696f2f67682f6b6574676f2f7079616261632f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://raw.githubusercontent.com/kolotaev/vakt/master/LICENSE\" rel=\"nofollow\"><img alt=\"Apache 2.0 licensed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5158a87f705edccbe3d715323e53a9054c09813/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d79656c6c6f772e737667\"></a></p>\n<hr>\n<h2>Introduction</h2>\n<p>Py-ABAC is an attribute-based access control (<a href=\"https://en.wikipedia.org/wiki/Attribute-based_access_control\" rel=\"nofollow\">ABAC</a>) toolkit based on policies. ABAC gives you a fine-grained control on definition of the rules that restrict an access to resources and is generally considered a \"next generation\" authorization model. The design of py-ABAC stems from the <a href=\"https://en.wikipedia.org/wiki/XACML\" rel=\"nofollow\">XACML</a> standard, and the ABAC python SDK <a href=\"https://github.com/kolotaev/vakt\" rel=\"nofollow\">Vakt</a>.</p>\n<p>See <a href=\"https://py-abac.readthedocs.io\" rel=\"nofollow\">documentation</a> for more details.</p>\n<h2>Install</h2>\n<p>PyABAC runs on Python &gt;= 3.5. PyPy implementation is supported as well.</p>\n<p>To install run the following:</p>\n<pre>pip install py-abac\n</pre>\n<h2>Example Usage</h2>\n<p>A quick dive-in:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_abac</span> <span class=\"kn\">import</span> <span class=\"n\">PDP</span><span class=\"p\">,</span> <span class=\"n\">Policy</span><span class=\"p\">,</span> <span class=\"n\">AccessRequest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_abac.storage</span> <span class=\"kn\">import</span> <span class=\"n\">MongoStorage</span>\n\n<span class=\"c1\"># Policy definition in JSON</span>\n<span class=\"n\">policy_json</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"uid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Max and Nina are allowed to create, delete, get any \"</span>\n                   <span class=\"s2\">\"resources only if the client IP matches.\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"allow\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"rules\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"subject\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"$.name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Equals\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Max\"</span><span class=\"p\">}},</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"$.name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Equals\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Nina\"</span><span class=\"p\">}}],</span>\n        <span class=\"s2\">\"resource\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"$.name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"RegexMatch\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\".*\"</span><span class=\"p\">}},</span>\n        <span class=\"s2\">\"action\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"$.method\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Equals\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"create\"</span><span class=\"p\">}},</span>\n                   <span class=\"p\">{</span><span class=\"s2\">\"$.method\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Equals\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"delete\"</span><span class=\"p\">}},</span>\n                   <span class=\"p\">{</span><span class=\"s2\">\"$.method\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Equals\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"get\"</span><span class=\"p\">}}],</span>\n        <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"$.ip\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CIDR\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1/32\"</span><span class=\"p\">}}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"targets\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n    <span class=\"s2\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># Parse JSON and create policy object</span>\n<span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">Policy</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">policy_json</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Setup policy storage</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span>\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">MongoStorage</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"c1\"># Add policy to storage</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create policy decision point</span>\n<span class=\"n\">pdp</span> <span class=\"o\">=</span> <span class=\"n\">PDP</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A sample access request JSON</span>\n<span class=\"n\">request_json</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"subject\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n        <span class=\"s2\">\"attributes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Max\"</span><span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"resource\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n        <span class=\"s2\">\"attributes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myrn:example.com:resource:123\"</span><span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"action\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n        <span class=\"s2\">\"attributes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"get\"</span><span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"ip\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># Parse JSON and create access request object</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">AccessRequest</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">request_json</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Check if access request is allowed. Evaluates to True since </span>\n<span class=\"c1\"># Max is allowed to get any resource when client IP matches.</span>\n<span class=\"k\">assert</span> <span class=\"n\">pdp</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h2>Documentation</h2>\n<p>Py-ABAC documentation can be found at <a href=\"https://py-abac.readthedocs.io\" rel=\"nofollow\">https://py-abac.readthedocs.io</a></p>\n<p>You can also build the documentation by running <code>make html</code> inside the <code>docs</code> folder.</p>\n<h2>Logging</h2>\n<p>py-ABAC follows a common logging pattern for libraries:</p>\n<p>Its corresponding modules log all the events that happen but the log messages by default are handled by <code>NullHandler</code>. It's up to the outer code/application to provide desired log handlers, filters, levels, etc.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n\n<span class=\"o\">...</span> <span class=\"c1\"># here go all the py_abac calls.</span>\n</pre>\n<h2>Milestones</h2>\n<p>Most valuable features to be implemented in the order of importance:</p>\n<ul>\n<li>[x] Sphinx Documentation</li>\n<li>[ ] Policy Obligations</li>\n<li>[ ] In-Memory Storage</li>\n<li>[x] SQL Storage</li>\n<li>[ ] Caching mechanism for Storage</li>\n<li>[ ] File Storage</li>\n</ul>\n<h2>Acknowledgements</h2>\n<p>The conceptual and implementation design of py-ABAC stems from the <a href=\"https://en.wikipedia.org/wiki/XACML\" rel=\"nofollow\">XACML</a> standard and the ABAC python SDK <a href=\"https://github.com/kolotaev/vakt\" rel=\"nofollow\">Vakt</a>.</p>\n<p><em><a href=\"#py-abac\" rel=\"nofollow\">Back to top</a></em></p>\n<h2>Development</h2>\n<p>To hack py-ABAC locally run:</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\t\t\t<span class=\"c1\"># to install all dependencies</span>\n$ docker run --rm -d -p <span class=\"m\">27017</span>:27017 mongo\t\t\t<span class=\"c1\"># Run mongodb server on docker</span>\n$ pytest --cov<span class=\"o\">=</span>py_abac tests/\t\t\t<span class=\"c1\"># to get coverage report</span>\n$ pylint py_abac\t\t\t<span class=\"c1\"># to check code quality with PyLint</span>\n$ bandit py_abac\t\t\t<span class=\"c1\"># to check code security with Bandit</span>\n</pre>\n<p>Optionally you can use <code>make</code> to perform development tasks.</p>\n<h2>License</h2>\n<p>The source code is licensed under Apache License Version 2.0</p>\n<h2>Contributions</h2>\n<p>Pull requests and bug reports always welcomed! :)</p>\n\n          </div>"}, "last_serial": 6733320, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "001db52651adb031eba74dd75620283c", "sha256": "3824ecffd58e1b060e38ec98293c74027f5a2598770f24465571acca57ab718c"}, "downloads": -1, "filename": "py_abac-0.2.0.tar.gz", "has_sig": false, "md5_digest": "001db52651adb031eba74dd75620283c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 49629, "upload_time": "2019-10-16T22:30:30", "upload_time_iso_8601": "2019-10-16T22:30:30.307649Z", "url": "https://files.pythonhosted.org/packages/6d/7c/e7e23ca56a8e7eb63562a79131f061f3122df158ffb9fc0f28206360ab14/py_abac-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bb4d572290f1b50c6281dac0bd8b4bbf", "sha256": "da2a114551d4adfee9be7d408b292ec8815f301232cfbdc02a3a79600e9b9dad"}, "downloads": -1, "filename": "py_abac-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bb4d572290f1b50c6281dac0bd8b4bbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.4", "size": 37780, "upload_time": "2020-03-02T13:39:19", "upload_time_iso_8601": "2020-03-02T13:39:19.645705Z", "url": "https://files.pythonhosted.org/packages/bb/49/7be1678264c88b404aa55bf8bb58e54967b79b74d0b4a80a169ca723d5ab/py_abac-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb4d572290f1b50c6281dac0bd8b4bbf", "sha256": "da2a114551d4adfee9be7d408b292ec8815f301232cfbdc02a3a79600e9b9dad"}, "downloads": -1, "filename": "py_abac-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bb4d572290f1b50c6281dac0bd8b4bbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.4", "size": 37780, "upload_time": "2020-03-02T13:39:19", "upload_time_iso_8601": "2020-03-02T13:39:19.645705Z", "url": "https://files.pythonhosted.org/packages/bb/49/7be1678264c88b404aa55bf8bb58e54967b79b74d0b4a80a169ca723d5ab/py_abac-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:06 2020"}