{"info": {"author": "Google Developers", "author_email": "sqlcommenter@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "# sqlcommenter\n\nPython modules for popular projects that add meta info to your SQL queries as comments.\n\n * [Django](#django)\n * [SQLAlchemy](#sqlalchemy)\n * [Psycopg2](#psycopg2)\n\n## Local Install\n\n```shell\npip3 install --user google-cloud-sqlcommenter\n```\n\nIf you'd like to record some OpenCensus information as well, just install it:\n\n```shell\npip3 install opencensus\n```\n\n## Usage\n\n### Django\n\nAdd the provided Django middleware to your Django project's settings. All queries executed within the standard request\u2192response cycle will have the SQL comment prepended to them.\n\n```python\nMIDDLEWARE = [\n  'google.cloud.sqlcommenter.django.middleware.SqlCommenter',\n  ...\n]\n```\n\nwhich when viewed say on Postgresql logs, produces\n```shell\n2019-05-28 11:54:50.780 PDT [64128] LOG:  statement: INSERT INTO \"polls_question\"\n(\"question_text\", \"pub_date\") VALUES\n('Wassup?', '2019-05-28T18:54:50.767481+00:00'::timestamptz) RETURNING\n\"polls_question\".\"id\" /*controller='index',framework='django%3A2.2.1',route='%5Epolls/%24'*/\n```\nIf you want the opencensus attributes included, you must set the\n``SQLCOMMENTER_WITH_OPENCENSUS`` setting to ``True`` and include\n``'opencensus.ext.django.middleware.OpencensusMiddleware'`` before\n``'google.cloud.sqlcommenter.django.middleware.SqlCommenter',`` in your ``MIDDLEWARE``\nsetting.\n\n### SQLAlchemy\n\nAttach the provided event listener to the `before_cursor_execute` event of the database engine, with `retval=True`. All queries executed with that engine will have the SQL comment prepended to them.\n\n```python\nimport sqlalchemy\nfrom google.cloud.sqlcommenter.sqlalchemy.executor import BeforeExecuteFactory\n\nengine = sqlalchemy.create_engine(...)\nlistener = BeforeExecuteFactory(with_db_driver=True, with_db_framework=True, with_opencensus=True)\nsqlalchemy.event.listen(engine, 'before_cursor_execute', listener, retval=True)\nengine.execute(...) # comment will be added before execution\n```\n\nwhich will produce a backend log such as when viewed on Postgresql\n```shell\n2019-05-28 11:52:06.527 PDT [64087] LOG:  statement: SELECT * FROM polls_question\n/*db_driver='psycopg2',framework='sqlalchemy%3A1.3.4',\ntraceparent='00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01',\ntracestate='congo%%3Dt61rcWkgMzE%%2Crojo%%3D00f067aa0ba902b7'*/\n```\n\n### Psycopg2\n\nUse the provided cursor factory to generate database cursors. All queries executed with such cursors will have the SQL comment prepended to them.\n\n```python\nimport psycopg2\nfrom google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory\n\ncursor_factory = CommenterCursorFactory(\n    with_db_driver=True, with_dbapi_level=True, with_dbapi_threadsafety=True,\n    with_driver_paramstyle=True, with_libpq_version=True, with_opencensus=True)\nconn = psycopg2.connect(..., cursor_factory=cursor_factory)\ncursor = conn.cursor()\ncursor.execute(...) # comment will be added before execution\n```\n\nwhich will produce a backend log such as when viewed on Postgresql\n```shell\n2019-05-28 02:33:25.287 PDT [57302] LOG:  statement: SELECT * FROM\npolls_question /*db_driver='psycopg2%%3A2.8.2%%20%%28dt%%20dec%%20pq3%%20ext%%20lo64%%29',\ndbapi_level='2.0',dbapi_threadsafety=2,driver_paramstyle='pyformat',\nlibpq_version=100001,traceparent='00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01',\ntracestate='congo%%3Dt61rcWkgMzE%%2Crojo%%3D00f067aa0ba902b7'*/\n```\n\n## Options\n\nWith Django, each option translates to a Django setting by uppercasing it and prepending `SQLCOMMENTER_`. For example, `with_framework` is controlled by the django setting `SQLCOMMENTER_WITH_FRAMEWORK`.\n\n| Options | Included by default? | Django | SQLAlchemy | psycopg2 | Notes |\n| ------- | :------------------: | ------ | ---------- | -------- | :---: |\n| `with_framework` | :heavy_check_mark: | [Django version](https://docs.djangoproject.com/en/stable/releases/)  | [Flask version](http://flask.pocoo.org/) | [Flask version](http://flask.pocoo.org/) |\n| `with_controller` | :heavy_check_mark: | [Django view](https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.ResolverMatch.view_name)  | [Flask endpoint](http://flask.pocoo.org/docs/1.0/api/#flask.Flask.endpoint) | [Flask endpoint](http://flask.pocoo.org/docs/1.0/api/#flask.Flask.endpoint) |\n| `with_route` | :heavy_check_mark: | [Django route](https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.ResolverMatch.route)  | [Flask route](http://flask.pocoo.org/docs/1.0/api/#flask.Flask.route) | [Flask route](http://flask.pocoo.org/docs/1.0/api/#flask.Flask.route) |\n| `with_app_name ` | | [Django app name](https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.ResolverMatch.app_name) | | |\n| `with_opencensus` | | [W3C TraceContext.Traceparent](https://www.w3.org/TR/trace-context/#traceparent-field), [W3C TraceContext.Tracestate](https://www.w3.org/TR/trace-context/#tracestate-field) | [W3C TraceContext.Traceparent](https://www.w3.org/TR/trace-context/#traceparent-field), [W3C TraceContext.Tracestate](https://www.w3.org/TR/trace-context/#tracestate-field) | [W3C TraceContext.Traceparent](https://www.w3.org/TR/trace-context/#traceparent-field), [W3C TraceContext.Tracestate](https://www.w3.org/TR/trace-context/#tracestate-field) | [[1]](#1-opencensus)\n| `with_db_driver` | | [Django DB engine](https://docs.djangoproject.com/en/stable/ref/settings/#engine) | [SQLAlchemy DB driver](https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls) | [psycopg2 version](http://initd.org/psycopg/docs/) |\n| `with_db_framework` | | | [SQLAlchemy version](https://www.sqlalchemy.org/) | |\n| `with_dbapi_threadsafety` | | | | [psycopg2 thread safety](http://initd.org/psycopg/docs/module.html#psycopg2.threadsafety) |\n| `with_dbapi_level` | | | | [psycopg2 api level](http://initd.org/psycopg/docs/module.html#psycopg2.apilevel) |\n| `with_libpq_version` | | | | [psycopg2 libpq version](http://initd.org/psycopg/docs/module.html#psycopg2.__libpq_version__) |\n| `with_driver_paramstyle` | | | | [psycopg2 parameter style](http://initd.org/psycopg/docs/module.html#psycopg2.paramstyle) |\n\n#### [1] `opencensus`\n\nFor `opencensus` to work correctly, note that:\n\n* [OpenCensus for Python](https://github.com/census-instrumentation/opencensus-python) must be installed in the python environment.\n* Because the W3C TraceContext's `traceparent` and `tracestate` are quite ephemeral per request, including these attributes can have a negative impact on query caching.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "google-cloud-sqlcommenter", "package_url": "https://pypi.org/project/google-cloud-sqlcommenter/", "platform": "", "project_url": "https://pypi.org/project/google-cloud-sqlcommenter/", "project_urls": null, "release_url": "https://pypi.org/project/google-cloud-sqlcommenter/0.1.2/", "requires_dist": ["django (>=1.11) ; extra == 'django'", "flask ; extra == 'flask'", "psycopg2 ; extra == 'psycopg2'", "sqlalchemy ; extra == 'sqlalchemy'"], "requires_python": "", "summary": "Augment SQL statements with meta information about frameworks and the running environment.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sqlcommenter</h1>\n<p>Python modules for popular projects that add meta info to your SQL queries as comments.</p>\n<ul>\n<li><a href=\"#django\" rel=\"nofollow\">Django</a></li>\n<li><a href=\"#sqlalchemy\" rel=\"nofollow\">SQLAlchemy</a></li>\n<li><a href=\"#psycopg2\" rel=\"nofollow\">Psycopg2</a></li>\n</ul>\n<h2>Local Install</h2>\n<pre>pip3 install --user google-cloud-sqlcommenter\n</pre>\n<p>If you'd like to record some OpenCensus information as well, just install it:</p>\n<pre>pip3 install opencensus\n</pre>\n<h2>Usage</h2>\n<h3>Django</h3>\n<p>Add the provided Django middleware to your Django project's settings. All queries executed within the standard request\u2192response cycle will have the SQL comment prepended to them.</p>\n<pre><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s1\">'google.cloud.sqlcommenter.django.middleware.SqlCommenter'</span><span class=\"p\">,</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>which when viewed say on Postgresql logs, produces</p>\n<pre><span class=\"m\">2019</span>-05-28 <span class=\"m\">11</span>:54:50.780 PDT <span class=\"o\">[</span><span class=\"m\">64128</span><span class=\"o\">]</span> LOG:  statement: INSERT INTO <span class=\"s2\">\"polls_question\"</span>\n<span class=\"o\">(</span><span class=\"s2\">\"question_text\"</span>, <span class=\"s2\">\"pub_date\"</span><span class=\"o\">)</span> VALUES\n<span class=\"o\">(</span><span class=\"s1\">'Wassup?'</span>, <span class=\"s1\">'2019-05-28T18:54:50.767481+00:00'</span>::timestamptz<span class=\"o\">)</span> RETURNING\n<span class=\"s2\">\"polls_question\"</span>.<span class=\"s2\">\"id\"</span> /*controller<span class=\"o\">=</span><span class=\"s1\">'index'</span>,framework<span class=\"o\">=</span><span class=\"s1\">'django%3A2.2.1'</span>,route<span class=\"o\">=</span><span class=\"s1\">'%5Epolls/%24'</span>*/\n</pre>\n<p>If you want the opencensus attributes included, you must set the\n<code>SQLCOMMENTER_WITH_OPENCENSUS</code> setting to <code>True</code> and include\n<code>'opencensus.ext.django.middleware.OpencensusMiddleware'</code> before\n<code>'google.cloud.sqlcommenter.django.middleware.SqlCommenter',</code> in your <code>MIDDLEWARE</code>\nsetting.</p>\n<h3>SQLAlchemy</h3>\n<p>Attach the provided event listener to the <code>before_cursor_execute</code> event of the database engine, with <code>retval=True</code>. All queries executed with that engine will have the SQL comment prepended to them.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.cloud.sqlcommenter.sqlalchemy.executor</span> <span class=\"kn\">import</span> <span class=\"n\">BeforeExecuteFactory</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"n\">BeforeExecuteFactory</span><span class=\"p\">(</span><span class=\"n\">with_db_driver</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_db_framework</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_opencensus</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"s1\">'before_cursor_execute'</span><span class=\"p\">,</span> <span class=\"n\">listener</span><span class=\"p\">,</span> <span class=\"n\">retval</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># comment will be added before execution</span>\n</pre>\n<p>which will produce a backend log such as when viewed on Postgresql</p>\n<pre><span class=\"m\">2019</span>-05-28 <span class=\"m\">11</span>:52:06.527 PDT <span class=\"o\">[</span><span class=\"m\">64087</span><span class=\"o\">]</span> LOG:  statement: SELECT * FROM polls_question\n/*db_driver<span class=\"o\">=</span><span class=\"s1\">'psycopg2'</span>,framework<span class=\"o\">=</span><span class=\"s1\">'sqlalchemy%3A1.3.4'</span>,\n<span class=\"nv\">traceparent</span><span class=\"o\">=</span><span class=\"s1\">'00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01'</span>,\n<span class=\"nv\">tracestate</span><span class=\"o\">=</span><span class=\"s1\">'congo%%3Dt61rcWkgMzE%%2Crojo%%3D00f067aa0ba902b7'</span>*/\n</pre>\n<h3>Psycopg2</h3>\n<p>Use the provided cursor factory to generate database cursors. All queries executed with such cursors will have the SQL comment prepended to them.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">psycopg2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.cloud.sqlcommenter.psycopg2.extension</span> <span class=\"kn\">import</span> <span class=\"n\">CommenterCursorFactory</span>\n\n<span class=\"n\">cursor_factory</span> <span class=\"o\">=</span> <span class=\"n\">CommenterCursorFactory</span><span class=\"p\">(</span>\n    <span class=\"n\">with_db_driver</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_dbapi_level</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_dbapi_threadsafety</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">with_driver_paramstyle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_libpq_version</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_opencensus</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">cursor_factory</span><span class=\"o\">=</span><span class=\"n\">cursor_factory</span><span class=\"p\">)</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># comment will be added before execution</span>\n</pre>\n<p>which will produce a backend log such as when viewed on Postgresql</p>\n<pre><span class=\"m\">2019</span>-05-28 <span class=\"m\">02</span>:33:25.287 PDT <span class=\"o\">[</span><span class=\"m\">57302</span><span class=\"o\">]</span> LOG:  statement: SELECT * FROM\npolls_question /*db_driver<span class=\"o\">=</span><span class=\"s1\">'psycopg2%%3A2.8.2%%20%%28dt%%20dec%%20pq3%%20ext%%20lo64%%29'</span>,\n<span class=\"nv\">dbapi_level</span><span class=\"o\">=</span><span class=\"s1\">'2.0'</span>,dbapi_threadsafety<span class=\"o\">=</span><span class=\"m\">2</span>,driver_paramstyle<span class=\"o\">=</span><span class=\"s1\">'pyformat'</span>,\n<span class=\"nv\">libpq_version</span><span class=\"o\">=</span><span class=\"m\">100001</span>,traceparent<span class=\"o\">=</span><span class=\"s1\">'00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01'</span>,\n<span class=\"nv\">tracestate</span><span class=\"o\">=</span><span class=\"s1\">'congo%%3Dt61rcWkgMzE%%2Crojo%%3D00f067aa0ba902b7'</span>*/\n</pre>\n<h2>Options</h2>\n<p>With Django, each option translates to a Django setting by uppercasing it and prepending <code>SQLCOMMENTER_</code>. For example, <code>with_framework</code> is controlled by the django setting <code>SQLCOMMENTER_WITH_FRAMEWORK</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Options</th>\n<th align=\"center\">Included by default?</th>\n<th>Django</th>\n<th>SQLAlchemy</th>\n<th>psycopg2</th>\n<th align=\"center\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>with_framework</code></td>\n<td align=\"center\">:heavy_check_mark:</td>\n<td><a href=\"https://docs.djangoproject.com/en/stable/releases/\" rel=\"nofollow\">Django version</a></td>\n<td><a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask version</a></td>\n<td><a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask version</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_controller</code></td>\n<td align=\"center\">:heavy_check_mark:</td>\n<td><a href=\"https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.ResolverMatch.view_name\" rel=\"nofollow\">Django view</a></td>\n<td><a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.Flask.endpoint\" rel=\"nofollow\">Flask endpoint</a></td>\n<td><a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.Flask.endpoint\" rel=\"nofollow\">Flask endpoint</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_route</code></td>\n<td align=\"center\">:heavy_check_mark:</td>\n<td><a href=\"https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.ResolverMatch.route\" rel=\"nofollow\">Django route</a></td>\n<td><a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.Flask.route\" rel=\"nofollow\">Flask route</a></td>\n<td><a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.Flask.route\" rel=\"nofollow\">Flask route</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_app_name</code></td>\n<td align=\"center\"></td>\n<td><a href=\"https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.ResolverMatch.app_name\" rel=\"nofollow\">Django app name</a></td>\n<td></td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_opencensus</code></td>\n<td align=\"center\"></td>\n<td><a href=\"https://www.w3.org/TR/trace-context/#traceparent-field\" rel=\"nofollow\">W3C TraceContext.Traceparent</a>, <a href=\"https://www.w3.org/TR/trace-context/#tracestate-field\" rel=\"nofollow\">W3C TraceContext.Tracestate</a></td>\n<td><a href=\"https://www.w3.org/TR/trace-context/#traceparent-field\" rel=\"nofollow\">W3C TraceContext.Traceparent</a>, <a href=\"https://www.w3.org/TR/trace-context/#tracestate-field\" rel=\"nofollow\">W3C TraceContext.Tracestate</a></td>\n<td><a href=\"https://www.w3.org/TR/trace-context/#traceparent-field\" rel=\"nofollow\">W3C TraceContext.Traceparent</a>, <a href=\"https://www.w3.org/TR/trace-context/#tracestate-field\" rel=\"nofollow\">W3C TraceContext.Tracestate</a></td>\n<td align=\"center\"><a href=\"#1-opencensus\" rel=\"nofollow\">[1]</a></td>\n</tr>\n<tr>\n<td><code>with_db_driver</code></td>\n<td align=\"center\"></td>\n<td><a href=\"https://docs.djangoproject.com/en/stable/ref/settings/#engine\" rel=\"nofollow\">Django DB engine</a></td>\n<td><a href=\"https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls\" rel=\"nofollow\">SQLAlchemy DB driver</a></td>\n<td><a href=\"http://initd.org/psycopg/docs/\" rel=\"nofollow\">psycopg2 version</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_db_framework</code></td>\n<td align=\"center\"></td>\n<td></td>\n<td><a href=\"https://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy version</a></td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_dbapi_threadsafety</code></td>\n<td align=\"center\"></td>\n<td></td>\n<td></td>\n<td><a href=\"http://initd.org/psycopg/docs/module.html#psycopg2.threadsafety\" rel=\"nofollow\">psycopg2 thread safety</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_dbapi_level</code></td>\n<td align=\"center\"></td>\n<td></td>\n<td></td>\n<td><a href=\"http://initd.org/psycopg/docs/module.html#psycopg2.apilevel\" rel=\"nofollow\">psycopg2 api level</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_libpq_version</code></td>\n<td align=\"center\"></td>\n<td></td>\n<td></td>\n<td><a href=\"http://initd.org/psycopg/docs/module.html#psycopg2.__libpq_version__\" rel=\"nofollow\">psycopg2 libpq version</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>with_driver_paramstyle</code></td>\n<td align=\"center\"></td>\n<td></td>\n<td></td>\n<td><a href=\"http://initd.org/psycopg/docs/module.html#psycopg2.paramstyle\" rel=\"nofollow\">psycopg2 parameter style</a></td>\n<td align=\"center\"></td>\n</tr></tbody></table>\n<h4>[1] <code>opencensus</code></h4>\n<p>For <code>opencensus</code> to work correctly, note that:</p>\n<ul>\n<li><a href=\"https://github.com/census-instrumentation/opencensus-python\" rel=\"nofollow\">OpenCensus for Python</a> must be installed in the python environment.</li>\n<li>Because the W3C TraceContext's <code>traceparent</code> and <code>tracestate</code> are quite ephemeral per request, including these attributes can have a negative impact on query caching.</li>\n</ul>\n\n          </div>"}, "last_serial": 6690960, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "27c6414fd9e1e3ccd1c2cf8b59f6c904", "sha256": "97d66d55cda715a340f2fbec0b94c3ce9c2301e89cde9c297dcc7d3a49505b54"}, "downloads": -1, "filename": "google_cloud_sqlcommenter-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27c6414fd9e1e3ccd1c2cf8b59f6c904", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27012, "upload_time": "2020-02-12T18:58:44", "upload_time_iso_8601": "2020-02-12T18:58:44.901964Z", "url": "https://files.pythonhosted.org/packages/5f/9e/0dcbbbba62388414bd5968b329cae9b2c9bf5983d1fe7bab40121cc93628/google_cloud_sqlcommenter-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fe126d3b589f3c8d8e573e437d49ffb", "sha256": "3e53bfd330d21085bb6d93be8f938ba84f16b94402d2a13264db53f8d88af803"}, "downloads": -1, "filename": "google-cloud-sqlcommenter-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8fe126d3b589f3c8d8e573e437d49ffb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13170, "upload_time": "2020-02-12T18:58:47", "upload_time_iso_8601": "2020-02-12T18:58:47.281473Z", "url": "https://files.pythonhosted.org/packages/3c/f5/91dd8f652a42d7988353233dff4a2882022282ac4ebea5e1c713702287fc/google-cloud-sqlcommenter-0.1.2.tar.gz", "yanked": false}], "0.1.2.dev1": [{"comment_text": "", "digests": {"md5": "74d1466014f9c1ace50129937eb7c2cd", "sha256": "bd944c9821247dd09758f3a495d07911cb69e232a3641a0eb2e7cfaf081358cc"}, "downloads": -1, "filename": "google_cloud_sqlcommenter-0.1.2.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "74d1466014f9c1ace50129937eb7c2cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27059, "upload_time": "2020-02-24T19:23:51", "upload_time_iso_8601": "2020-02-24T19:23:51.685411Z", "url": "https://files.pythonhosted.org/packages/75/6a/8ec67deba6f43d21e6fa208daed69bc8000dbc087a6f1ee437f0cd3fd778/google_cloud_sqlcommenter-0.1.2.dev1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8687c2e8b1417a247e69faac61f3cf8b", "sha256": "cb05bf0860ee7602e8ddf6958b0a698d1e59da05e141adbb5405b3a24bfedb42"}, "downloads": -1, "filename": "google-cloud-sqlcommenter-0.1.2.dev1.tar.gz", "has_sig": false, "md5_digest": "8687c2e8b1417a247e69faac61f3cf8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13147, "upload_time": "2020-02-24T19:23:52", "upload_time_iso_8601": "2020-02-24T19:23:52.721152Z", "url": "https://files.pythonhosted.org/packages/d4/8e/11a75e72124c2fb5f67e7683756fbcf672f5a4b35ae44f424889d9f32c75/google-cloud-sqlcommenter-0.1.2.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27c6414fd9e1e3ccd1c2cf8b59f6c904", "sha256": "97d66d55cda715a340f2fbec0b94c3ce9c2301e89cde9c297dcc7d3a49505b54"}, "downloads": -1, "filename": "google_cloud_sqlcommenter-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27c6414fd9e1e3ccd1c2cf8b59f6c904", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27012, "upload_time": "2020-02-12T18:58:44", "upload_time_iso_8601": "2020-02-12T18:58:44.901964Z", "url": "https://files.pythonhosted.org/packages/5f/9e/0dcbbbba62388414bd5968b329cae9b2c9bf5983d1fe7bab40121cc93628/google_cloud_sqlcommenter-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fe126d3b589f3c8d8e573e437d49ffb", "sha256": "3e53bfd330d21085bb6d93be8f938ba84f16b94402d2a13264db53f8d88af803"}, "downloads": -1, "filename": "google-cloud-sqlcommenter-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8fe126d3b589f3c8d8e573e437d49ffb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13170, "upload_time": "2020-02-12T18:58:47", "upload_time_iso_8601": "2020-02-12T18:58:47.281473Z", "url": "https://files.pythonhosted.org/packages/3c/f5/91dd8f652a42d7988353233dff4a2882022282ac4ebea5e1c713702287fc/google-cloud-sqlcommenter-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:40 2020"}