{"info": {"author": "Fran Hr\u017eenjak", "author_email": "fran.hrzenjak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Utilities"], "description": "Fork information\n================\n\n\n``docopt_plus`` is a fork of `Docopt <https://github.com/docopt/docopt>`_.\n\nThis fork adds some features that are not GNU / POSIX standard, and\nmight not be as widely recognized.\n\nFeatures specific to ``docopt_plus``:\n\n- Pattern groups\n\n\nSee the original `Docopt <https://github.com/docopt/docopt>`_ project\nfor a more stable and better supported package. If do not require any\nof the features that ``docopt_plus`` adds to Docopt, I encourage you\nto use the original project.\n\nStability\n---------\n\nI will do my best to keep up with changes to Docopt. However, I make\nno promises.\n\nCurrent versions of ``dopcopt_plus`` is based on a working branch of\n``docopt``, version ``pre-0.6.3``. Hence current ``docopt_plus``\nversion is ``0.6.3-alpha-1``\n\nThat said, ``docopt` comes with a very good test coverage, and\n``docopt_plus`` adds to those tests, keeping 100% compatibility with\n``docopt``.\n\n\nInstallation\n------------\n\n::\n\npip install docopt_plus\n\nUsage\n-----\n\n::\n\nfrom docopt_plus import docopt\n\n\n\nOriginal documentation\n======================\n\nBelow is the original documentation, with info about added features.\n\nEverything should work the same with ``docopt_plus`` except that\nPython imports should be changes from ``from docopt import docopt``\nto ``from docopt_plus import docopt``.\n\n\n\n``docopt`` creates *beautiful* command-line interfaces\n======================================================\n\nVideo introduction to **docopt**: `PyCon UK 2012: Create *beautiful*\ncommand-line interfaces with Python <http://youtu.be/pXhcPJK5cMc>`_\n\n    New in version 0.6.1:\n\n    - Fix issue `#85 <https://github.com/docopt/docopt/issues/85>`_\n      which caused improper handling of ``[options]`` shortcut\n      if it was present several times.\n\n    New in version 0.6.0:\n\n    - New argument ``options_first``, disallows interspersing options\n      and arguments.  If you supply ``options_first=True`` to\n      ``docopt``, it will interpret all arguments as positional\n      arguments after first positional argument.\n\n    - If option with argument could be repeated, its default value\n      will be interpreted as space-separated list. E.g. with\n      ``[default: ./here ./there]`` will be interpreted as\n      ``['./here', './there']``.\n\n    Breaking changes:\n\n    - Meaning of ``[options]`` shortcut slightly changed. Previously\n      it meant *\"any known option\"*. Now it means *\"any option not in\n      usage-pattern\"*.  This avoids the situation when an option is\n      allowed to be repeated unintentionally.\n\n    - ``argv`` is ``None`` by default, not ``sys.argv[1:]``.\n      This allows ``docopt`` to always use the *latest* ``sys.argv``,\n      not ``sys.argv`` during import time.\n\nIsn't it awesome how ``optparse`` and ``argparse`` generate help\nmessages based on your code?!\n\n*Hell no!*  You know what's awesome?  It's when the option parser *is*\ngenerated based on the beautiful help message that you write yourself!\nThis way you don't need to write this stupid repeatable parser-code,\nand instead can write only the help message--*the way you want it*.\n\n**docopt** helps you create most beautiful command-line interfaces\n*easily*:\n\n.. code:: python\n\n    \"\"\"Naval Fate.\n\n    Usage:\n      naval_fate.py ship new <name>...\n      naval_fate.py ship <name> move <x> <y> [--speed=<kn>]\n      naval_fate.py ship shoot <x> <y>\n      naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]\n      naval_fate.py (-h | --help)\n      naval_fate.py --version\n\n    Options:\n      -h --help     Show this screen.\n      --version     Show version.\n      --speed=<kn>  Speed in knots [default: 10].\n      --moored      Moored (anchored) mine.\n      --drifting    Drifting mine.\n\n    \"\"\"\n    from docopt import docopt\n\n\n    if __name__ == '__main__':\n        arguments = docopt(__doc__, version='Naval Fate 2.0')\n        print(arguments)\n\nBeat that! The option parser is generated based on the docstring above\nthat is passed to ``docopt`` function.  ``docopt`` parses the usage\npattern (``\"Usage: ...\"``) and option descriptions (lines starting\nwith dash \"``-``\") and ensures that the program invocation matches the\nusage pattern; it parses options, arguments and commands based on\nthat. The basic idea is that *a good help message has all necessary\ninformation in it to make a parser*.\n\nAlso, `PEP 257 <http://www.python.org/dev/peps/pep-0257/>`_ recommends\nputting help message in the module docstrings.\n\nInstallation\n============\n\nUse `pip <http://pip-installer.org>`_ or easy_install::\n\n    pip install docopt==0.6.1\n\nAlternatively, you can just drop ``docopt.py`` file into your\nproject--it is self-contained.\n\n**docopt** is tested with Python 2.5, 2.6, 2.7, 3.2, 3.3 and PyPy.\n\nTesting\n=======\n\nYou can run unit tests using the command:\n\n    python setup.py test\n\nAPI\n===\n\n.. code:: python\n\n    from docopt import docopt\n\n.. code:: python\n\n    docopt(doc, argv=None, help=True, version=None, options_first=False)\n\n``docopt`` takes 1 required and 4 optional arguments:\n\n- ``doc`` could be a module docstring (``__doc__``) or some other\n  string that contains a **help message** that will be parsed to\n  create the option parser.  The simple rules of how to write such a\n  help message are given in next sections.  Here is a quick example of\n  such a string:\n\n.. code:: python\n\n    \"\"\"Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n    -h --help    show this\n    -s --sorted  sorted output\n    -o FILE      specify output file [default: ./test.txt]\n    --quiet      print less text\n    --verbose    print more text\n\n    \"\"\"\n\n- ``argv`` is an optional argument vector; by default ``docopt`` uses\n  the argument vector passed to your program (``sys.argv[1:]``).\n  Alternatively you can supply a list of strings like ``['--verbose',\n  '-o', 'hai.txt']``.\n\n- ``help``, by default ``True``, specifies whether the parser should\n  automatically print the help message (supplied as ``doc``) and\n  terminate, in case ``-h`` or ``--help`` option is encountered\n  (options should exist in usage pattern, more on that below). If you\n  want to handle ``-h`` or ``--help`` options manually (as other\n  options), set ``help=False``.\n\n- ``version``, by default ``None``, is an optional argument that\n  specifies the version of your program. If supplied, then, (assuming\n  ``--version`` option is mentioned in usage pattern) when parser\n  encounters the ``--version`` option, it will print the supplied\n  version and terminate.  ``version`` could be any printable object,\n  but most likely a string, e.g. ``\"2.1.0rc1\"``.\n\n    Note, when ``docopt`` is set to automatically handle ``-h``,\n    ``--help`` and ``--version`` options, you still need to mention\n    them in usage pattern for this to work. Also, for your users to\n    know about them.\n\n- ``options_first``, by default ``False``.  If set to ``True`` will\n  disallow mixing options and positional argument.  I.e. after first\n  positional argument, all arguments will be interpreted as positional\n  even if the look like options.  This can be used for strict\n  compatibility with POSIX, or if you want to dispatch your arguments\n  to other programs.\n\nThe **return** value is a simple dictionary with options, arguments\nand commands as keys, spelled exactly like in your help message.  Long\nversions of options are given priority. For example, if you invoke the\ntop example as::\n\n    naval_fate.py ship Guardian move 100 150 --speed=15\n\nthe return dictionary will be:\n\n.. code:: python\n\n    {'--drifting': False,    'mine': False,\n     '--help': False,        'move': True,\n     '--moored': False,      'new': False,\n     '--speed': '15',        'remove': False,\n     '--version': False,     'set': False,\n     '<name>': ['Guardian'], 'ship': True,\n     '<x>': '100',           'shoot': False,\n     '<y>': '150'}\n\nHelp message format\n===================\n\nHelp message consists of 3 parts:\n\n- Usage pattern, e.g.::\n\n    Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n- Option descriptions, e.g.::\n\n    -h --help    show this\n    -s --sorted  sorted output\n    -o FILE      specify output file [default: ./test.txt]\n    --quiet      print less text\n    --verbose    print more text\n\n- Group descriptions (optional, ``docopt_plus`` only), e.g.::\n\n    Group 1:\n      <arg1> --opt1 [--opt2=ARG2]\n\n    Group2: command2 | command3\n\nTheir format is described below; other text is ignored.\n\nUsage pattern format\n--------------------\n\n**Usage pattern** is a substring of ``doc`` that starts with\n``usage:`` (case *insensitive*) and ends with a *visibly* empty line.\nMinimum example:\n\n.. code:: python\n\n    \"\"\"Usage: my_program.py\n\n    \"\"\"\n\nThe first word after ``usage:`` is interpreted as your program's name.\nYou can specify your program's name several times to signify several\nexclusive patterns:\n\n.. code:: python\n\n    \"\"\"Usage: my_program.py FILE\n              my_program.py COUNT FILE\n\n    \"\"\"\n\nEach pattern can consist of the following elements:\n\n- **<arguments>**, **ARGUMENTS**. Arguments are specified as either\n  upper-case words, e.g. ``my_program.py CONTENT-PATH`` or words\n  surrounded by angular brackets: ``my_program.py <content-path>``.\n- **--options**.  Options are words started with dash (``-``), e.g.\n  ``--output``, ``-o``.  You can \"stack\" several of one-letter\n  options, e.g. ``-oiv`` which will be the same as ``-o -i -v``. The\n  options can have arguments, e.g.  ``--input=FILE`` or ``-i FILE`` or\n  even ``-iFILE``. However it is important that you specify option\n  descriptions if you want your option to have an argument, a default\n  value, or specify synonymous short/long versions of the option (see\n  next section on option descriptions).\n- **commands** are words that do *not* follow the described above\n  conventions of ``--options`` or ``<arguments>`` or ``ARGUMENTS``,\n  plus two special commands: dash \"``-``\" and double dash \"``--``\"\n  (see below).\n- **-groups-**. Groups are words that start and end with a dash (``-``), e.g.\n  ``-my_group-``. Every group defined in usage patterns has to be\n  described in its own section. See \"Group description format\" below.\n\nUse the following constructs to specify patterns:\n\n- **[ ]** (brackets) **optional** elements.  e.g.: ``my_program.py\n  [-hvqo FILE]``\n- **( )** (parens) **required** elements.  All elements that are *not*\n  put in **[ ]** are also required, e.g.: ``my_program.py\n  --path=<path> <file>...`` is the same as ``my_program.py\n  (--path=<path> <file>...)``.  (Note, \"required options\" might be not\n  a good idea for your users).\n- **|** (pipe) **mutually exclusive** elements. Group them using **(\n  )** if one of the mutually exclusive elements is required:\n  ``my_program.py (--clockwise | --counter-clockwise) TIME``. Group\n  them using **[ ]** if none of the mutually-exclusive elements are\n  required: ``my_program.py [--left | --right]``.\n- **...** (ellipsis) **one or more** elements. To specify that\n  arbitrary number of repeating elements could be accepted, use\n  ellipsis (``...``), e.g.  ``my_program.py FILE ...`` means one or\n  more ``FILE``-s are accepted.  If you want to accept zero or more\n  elements, use brackets, e.g.: ``my_program.py [FILE ...]``. Ellipsis\n  works as a unary operator on the expression to the left.\n- **[options]** (case sensitive) shortcut for any options.  You can\n  use it if you want to specify that the usage pattern could be\n  provided with any options defined below in the option-descriptions\n  and do not want to enumerate them all in usage-pattern.\n- \"``[--]``\". Double dash \"``--``\" is used by convention to separate\n  positional arguments that can be mistaken for options. In order to\n  support this convention add \"``[--]``\" to your usage patterns.\n- \"``[-]``\". Single dash \"``-``\" is used by convention to signify that\n  ``stdin`` is used instead of a file. To support this add \"``[-]``\"\n  to your usage patterns. \"``-``\" acts as a normal command.\n\nIf your pattern allows to match argument-less option (a flag) several\ntimes::\n\n    Usage: my_program.py [-v | -vv | -vvv]\n\nthen number of occurrences of the option will be counted. I.e.\n``args['-v']`` will be ``2`` if program was invoked as ``my_program\n-vv``. Same works for commands.\n\nIf your usage patterns allows to match same-named option with argument\nor positional argument several times, the matched arguments will be\ncollected into a list::\n\n    Usage: my_program.py <file> <file> --path=<path>...\n\nI.e. invoked with ``my_program.py file1 file2 --path=./here\n--path=./there`` the returned dict will contain ``args['<file>'] ==\n['file1', 'file2']`` and ``args['--path'] == ['./here', './there']``.\n\n\nOption descriptions format\n--------------------------\n\n**Option descriptions** consist of a list of options that you put\nbelow your usage patterns.\n\nIt is necessary to list option descriptions in order to specify:\n\n- synonymous short and long options,\n- if an option has an argument,\n- if option's argument has a default value.\n\nThe rules are as follows:\n\n- Every line in ``doc`` that starts with ``-`` or ``--`` (not counting\n  spaces) is treated as an option description, e.g.::\n\n    Options:\n      --verbose   # GOOD\n      -o FILE     # GOOD\n    Other: --bad  # BAD, line does not start with dash \"-\"\n\n- To specify that option has an argument, put a word describing that\n  argument after space (or equals \"``=``\" sign) as shown below. Follow\n  either <angular-brackets> or UPPER-CASE convention for options'\n  arguments.  You can use comma if you want to separate options. In\n  the example below, both lines are valid, however you are recommended\n  to stick to a single style.::\n\n    -o FILE --output=FILE       # without comma, with \"=\" sign\n    -i <file>, --input <file>   # with comma, without \"=\" sing\n\n- Use two spaces to separate options with their informal description::\n\n    --verbose More text.   # BAD, will be treated as if verbose option had\n                           # an argument \"More\", so use 2 spaces instead\n    -q        Quit.        # GOOD\n    -o FILE   Output file. # GOOD\n    --stdout  Use stdout.  # GOOD, 2 spaces\n\n- If you want to set a default value for an option with an argument,\n  put it into the option-description, in form ``[default:\n  <my-default-value>]``::\n\n    --coefficient=K  The K coefficient [default: 2.95]\n    --output=FILE    Output file [default: test.txt]\n    --directory=DIR  Some directory [default: ./]\n\n- If the option is not repeatable, the value inside ``[default: ...]``\n  will be interpreted as string.  If it *is* repeatable, it will be\n  split into a list on whitespace::\n\n    Usage: my_program.py [--repeatable=<arg> --repeatable=<arg>]\n                         [--another-repeatable=<arg>]...\n                         [--not-repeatable=<arg>]\n\n    # will be ['./here', './there']\n    --repeatable=<arg>          [default: ./here ./there]\n\n    # will be ['./here']\n    --another-repeatable=<arg>  [default: ./here]\n\n    # will be './here ./there', because it is not repeatable\n    --not-repeatable=<arg>      [default: ./here ./there]\n\nGroup descriptions format (``dopcopt_plus`` only)\n-------------------------------------------------\n\nThe only function of groups is to make usage patterns more readable to\nhumans. Under the hood, docopt will replace group elements (e.g.\n``-my_group-``) with their respective patterns.\n\n**Group description** has to define a pattern of argument, option, and\ncommand elements. Group elements withing groups are not allowed.\n\n::\n\n    My Group: --an_option | (--another_option | command) [-o <arg>]\n\nCase for group names is irrelevant. Underscores (``_``) in group elements\nare translated to spaces when looking for group description.\n\nIt is possible to span pattern definitions on multiple lines. This\ndefinition is equivalent to the previous example::\n\n    My Group:\n      --an_option |\n      (--another_option | command)\n      [-o <arg>]\n\nSince groups are just readability replacements for other patterns,\nthey can be enclosed in optional or required parenthesis, etc.\nThese are all valid usage patterns using groups::\n\n    Usage: prog [-v] -input- [-out_file- |\u00a0(-out_db- [--create])]\n\n      Input: <in_file>\n\n      Out File: <out_file>\n\n      Out DB:\n        <db_name>\n        [-u USERNAME [-p PASSWORD]]\n        [<host>]\n\n    Options:\n      ...\n\nThe indentation is completely optional, at all levels, and has no relevance\nto finding definitions. However, it does make the usage instructions more\nreadable, and is therefore encouraged.\n\nAlso, group descriptions can be placed below or above \"Options\" section, the\norder bears has relevance to parsing.\n\nSimilarly to Options, group patterns can have descriptions on every line,\nseparated by at least two spaces. Unlike with Options, having comments on a\nseparate line is not supported::\n\n      Out DB:\n        <db_name>  database name  # GOOD, 2 spaces\n        [-u USERNAME [-p PASSWORD]]\n          database credentials  # BAD, will be mistaken for a pattern!\n        [<host>] local or remote host name  # BAD, has only 1 space!\n\n\nEvery group that is defined in usage patterns (e.g. ``-my_group-``) must\nalso be described.\n\nCurrently group name must not end with ``Options`` because parser will confuse\nit with the special group used to describe common options.\n\n\nExamples\n--------\n\nWe have an extensive list of `examples\n<https://github.com/docopt/docopt/tree/master/examples>`_ which cover\nevery aspect of functionality of **docopt**.  Try them out, read the\nsource if in doubt.\n\nSubparsers, multi-level help and *huge* applications (like git)\n---------------------------------------------------------------\n\nIf you want to split your usage-pattern into several, implement\nmulti-level help (with separate help-screen for each sub-command),\nwant to interface with existing scripts that don't use **docopt**, or\nyou're building the next \"git\", you will need the new ``options_first``\nparameter (described in API section above). To get you started quickly\nwe implemented a subset of git command-line interface as an example:\n`examples/git\n<https://github.com/docopt/docopt/tree/master/examples/git>`_\n\n\nData validation\n---------------\n\n**docopt** does one thing and does it well: it implements your\ncommand-line interface.  However it does not validate the input data.\nOn the other hand there are libraries like `python schema\n<https://github.com/halst/schema>`_ which make validating data a\nbreeze.  Take a look at `validation_example.py\n<https://github.com/docopt/docopt/tree/master/examples/validation_example.py>`_\nwhich uses **schema** to validate data and report an error to the\nuser.\n\nUsing docopt with config-files\n------------------------------\n\nOften configuration files are used to provide default values which\ncould be overridden by command-line arguments.  Since **docopt**\nreturns a simple dictionary it is very easy to integrate with\nconfig-files written in JSON, YAML or INI formats.\n`config_file_example.py <examples/config_file_example.py>`_ provides\nand example of how to use **docopt** with JSON or INI config-file.\n\n\nDevelopment\n===========\n\nWe would *love* to hear what you think about **docopt** on our `issues\npage <http://github.com/docopt/docopt/issues>`_\n\nMake pull requests, report bugs, suggest ideas and discuss\n**docopt**. You can also drop a line directly to\n<vladimir@keleshev.com>.\n\nPorting ``docopt`` to other languages\n=====================================\n\nWe think **docopt** is so good, we want to share it beyond the Python\ncommunity! All official docopt ports to other languages can be found\nunder the `docopt organization page <http://github.com/docopt>`_\non GitHub.\n\nIf your favourite language isn't among then, you can always create a\nport for it! You are encouraged to use the Python version as a\nreference implementation.  A Language-agnostic test suite is bundled\nwith `Python implementation <http://github.com/docopt/docopt>`_.\n\nPorting discussion is on `issues page\n<http://github.com/docopt/docopt/issues>`_.\n\nChangelog\n=========\n\n**docopt** follows `semantic versioning <http://semver.org>`_.  The\nfirst release with stable API will be 1.0.0 (soon).  Until then, you\nare encouraged to specify explicitly the version in your dependency\ntools, e.g.::\n\n    pip install docopt==0.6.1\n\n- 0.6.1 Bugfix release.\n- 0.6.0 ``options_first`` parameter.\n  **Breaking changes**: Corrected ``[options]`` meaning.\n  ``argv`` defaults to ``None``.\n- 0.5.0 Repeated options/commands are counted or accumulated into a\n  list.\n- 0.4.2 Bugfix release.\n- 0.4.0 Option descriptions become optional,\n  support for \"``--``\" and \"``-``\" commands.\n- 0.3.0 Support for (sub)commands like `git remote add`.\n  Introduce ``[options]`` shortcut for any options.\n  **Breaking changes**: ``docopt`` returns dictionary.\n- 0.2.0 Usage pattern matching. Positional arguments parsing based on\n  usage patterns.\n  **Breaking changes**: ``docopt`` returns namespace (for arguments),\n  not list. Usage pattern is formalized.\n- 0.1.0 Initial release. Options-parsing only (based on options\n  description).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frnhr/docopt_plus", "keywords": "option arguments parsing optparse argparse getopt", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "docopt_plus", "package_url": "https://pypi.org/project/docopt_plus/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/docopt_plus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/frnhr/docopt_plus"}, "release_url": "https://pypi.org/project/docopt_plus/0.6.3a1/", "requires_dist": null, "requires_python": null, "summary": "Pythonic argument parser, that will make you smile", "version": "0.6.3a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Fork information<br>================<br><br><br>``docopt_plus`` is a fork of `Docopt &lt;https://github.com/docopt/docopt&gt;`_.<br><br>This fork adds some features that are not GNU / POSIX standard, and<br>might not be as widely recognized.<br><br>Features specific to ``docopt_plus``:<br><br>- Pattern groups<br><br><br>See the original `Docopt &lt;https://github.com/docopt/docopt&gt;`_ project<br>for a more stable and better supported package. If do not require any<br>of the features that ``docopt_plus`` adds to Docopt, I encourage you<br>to use the original project.<br><br>Stability<br>---------<br><br>I will do my best to keep up with changes to Docopt. However, I make<br>no promises.<br><br>Current versions of ``dopcopt_plus`` is based on a working branch of<br>``docopt``, version ``pre-0.6.3``. Hence current ``docopt_plus``<br>version is ``0.6.3-alpha-1``<br><br>That said, ``docopt` comes with a very good test coverage, and<br>``docopt_plus`` adds to those tests, keeping 100% compatibility with<br>``docopt``.<br><br><br>Installation<br>------------<br><br>::<br><br>pip install docopt_plus<br><br>Usage<br>-----<br><br>::<br><br>from docopt_plus import docopt<br><br><br><br>Original documentation<br>======================<br><br>Below is the original documentation, with info about added features.<br><br>Everything should work the same with ``docopt_plus`` except that<br>Python imports should be changes from ``from docopt import docopt``<br>to ``from docopt_plus import docopt``.<br><br><br><br>``docopt`` creates *beautiful* command-line interfaces<br>======================================================<br><br>Video introduction to **docopt**: `PyCon UK 2012: Create *beautiful*<br>command-line interfaces with Python &lt;http://youtu.be/pXhcPJK5cMc&gt;`_<br><br>    New in version 0.6.1:<br><br>    - Fix issue `#85 &lt;https://github.com/docopt/docopt/issues/85&gt;`_<br>      which caused improper handling of ``[options]`` shortcut<br>      if it was present several times.<br><br>    New in version 0.6.0:<br><br>    - New argument ``options_first``, disallows interspersing options<br>      and arguments.  If you supply ``options_first=True`` to<br>      ``docopt``, it will interpret all arguments as positional<br>      arguments after first positional argument.<br><br>    - If option with argument could be repeated, its default value<br>      will be interpreted as space-separated list. E.g. with<br>      ``[default: ./here ./there]`` will be interpreted as<br>      ``['./here', './there']``.<br><br>    Breaking changes:<br><br>    - Meaning of ``[options]`` shortcut slightly changed. Previously<br>      it meant *\"any known option\"*. Now it means *\"any option not in<br>      usage-pattern\"*.  This avoids the situation when an option is<br>      allowed to be repeated unintentionally.<br><br>    - ``argv`` is ``None`` by default, not ``sys.argv[1:]``.<br>      This allows ``docopt`` to always use the *latest* ``sys.argv``,<br>      not ``sys.argv`` during import time.<br><br>Isn't it awesome how ``optparse`` and ``argparse`` generate help<br>messages based on your code?!<br><br>*Hell no!*  You know what's awesome?  It's when the option parser *is*<br>generated based on the beautiful help message that you write yourself!<br>This way you don't need to write this stupid repeatable parser-code,<br>and instead can write only the help message--*the way you want it*.<br><br>**docopt** helps you create most beautiful command-line interfaces<br>*easily*:<br><br>.. code:: python<br><br>    \"\"\"Naval Fate.<br><br>    Usage:<br>      naval_fate.py ship new &lt;name&gt;...<br>      naval_fate.py ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]<br>      naval_fate.py ship shoot &lt;x&gt; &lt;y&gt;<br>      naval_fate.py mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored | --drifting]<br>      naval_fate.py (-h | --help)<br>      naval_fate.py --version<br><br>    Options:<br>      -h --help     Show this screen.<br>      --version     Show version.<br>      --speed=&lt;kn&gt;  Speed in knots [default: 10].<br>      --moored      Moored (anchored) mine.<br>      --drifting    Drifting mine.<br><br>    \"\"\"<br>    from docopt import docopt<br><br><br>    if __name__ == '__main__':<br>        arguments = docopt(__doc__, version='Naval Fate 2.0')<br>        print(arguments)<br><br>Beat that! The option parser is generated based on the docstring above<br>that is passed to ``docopt`` function.  ``docopt`` parses the usage<br>pattern (``\"Usage: ...\"``) and option descriptions (lines starting<br>with dash \"``-``\") and ensures that the program invocation matches the<br>usage pattern; it parses options, arguments and commands based on<br>that. The basic idea is that *a good help message has all necessary<br>information in it to make a parser*.<br><br>Also, `PEP 257 &lt;http://www.python.org/dev/peps/pep-0257/&gt;`_ recommends<br>putting help message in the module docstrings.<br><br>Installation<br>============<br><br>Use `pip &lt;http://pip-installer.org&gt;`_ or easy_install::<br><br>    pip install docopt==0.6.1<br><br>Alternatively, you can just drop ``docopt.py`` file into your<br>project--it is self-contained.<br><br>**docopt** is tested with Python 2.5, 2.6, 2.7, 3.2, 3.3 and PyPy.<br><br>Testing<br>=======<br><br>You can run unit tests using the command:<br><br>    python setup.py test<br><br>API<br>===<br><br>.. code:: python<br><br>    from docopt import docopt<br><br>.. code:: python<br><br>    docopt(doc, argv=None, help=True, version=None, options_first=False)<br><br>``docopt`` takes 1 required and 4 optional arguments:<br><br>- ``doc`` could be a module docstring (``__doc__``) or some other<br>  string that contains a **help message** that will be parsed to<br>  create the option parser.  The simple rules of how to write such a<br>  help message are given in next sections.  Here is a quick example of<br>  such a string:<br><br>.. code:: python<br><br>    \"\"\"Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]<br><br>    -h --help    show this<br>    -s --sorted  sorted output<br>    -o FILE      specify output file [default: ./test.txt]<br>    --quiet      print less text<br>    --verbose    print more text<br><br>    \"\"\"<br><br>- ``argv`` is an optional argument vector; by default ``docopt`` uses<br>  the argument vector passed to your program (``sys.argv[1:]``).<br>  Alternatively you can supply a list of strings like ``['--verbose',<br>  '-o', 'hai.txt']``.<br><br>- ``help``, by default ``True``, specifies whether the parser should<br>  automatically print the help message (supplied as ``doc``) and<br>  terminate, in case ``-h`` or ``--help`` option is encountered<br>  (options should exist in usage pattern, more on that below). If you<br>  want to handle ``-h`` or ``--help`` options manually (as other<br>  options), set ``help=False``.<br><br>- ``version``, by default ``None``, is an optional argument that<br>  specifies the version of your program. If supplied, then, (assuming<br>  ``--version`` option is mentioned in usage pattern) when parser<br>  encounters the ``--version`` option, it will print the supplied<br>  version and terminate.  ``version`` could be any printable object,<br>  but most likely a string, e.g. ``\"2.1.0rc1\"``.<br><br>    Note, when ``docopt`` is set to automatically handle ``-h``,<br>    ``--help`` and ``--version`` options, you still need to mention<br>    them in usage pattern for this to work. Also, for your users to<br>    know about them.<br><br>- ``options_first``, by default ``False``.  If set to ``True`` will<br>  disallow mixing options and positional argument.  I.e. after first<br>  positional argument, all arguments will be interpreted as positional<br>  even if the look like options.  This can be used for strict<br>  compatibility with POSIX, or if you want to dispatch your arguments<br>  to other programs.<br><br>The **return** value is a simple dictionary with options, arguments<br>and commands as keys, spelled exactly like in your help message.  Long<br>versions of options are given priority. For example, if you invoke the<br>top example as::<br><br>    naval_fate.py ship Guardian move 100 150 --speed=15<br><br>the return dictionary will be:<br><br>.. code:: python<br><br>    {'--drifting': False,    'mine': False,<br>     '--help': False,        'move': True,<br>     '--moored': False,      'new': False,<br>     '--speed': '15',        'remove': False,<br>     '--version': False,     'set': False,<br>     '&lt;name&gt;': ['Guardian'], 'ship': True,<br>     '&lt;x&gt;': '100',           'shoot': False,<br>     '&lt;y&gt;': '150'}<br><br>Help message format<br>===================<br><br>Help message consists of 3 parts:<br><br>- Usage pattern, e.g.::<br><br>    Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]<br><br>- Option descriptions, e.g.::<br><br>    -h --help    show this<br>    -s --sorted  sorted output<br>    -o FILE      specify output file [default: ./test.txt]<br>    --quiet      print less text<br>    --verbose    print more text<br><br>- Group descriptions (optional, ``docopt_plus`` only), e.g.::<br><br>    Group 1:<br>      &lt;arg1&gt; --opt1 [--opt2=ARG2]<br><br>    Group2: command2 | command3<br><br>Their format is described below; other text is ignored.<br><br>Usage pattern format<br>--------------------<br><br>**Usage pattern** is a substring of ``doc`` that starts with<br>``usage:`` (case *insensitive*) and ends with a *visibly* empty line.<br>Minimum example:<br><br>.. code:: python<br><br>    \"\"\"Usage: my_program.py<br><br>    \"\"\"<br><br>The first word after ``usage:`` is interpreted as your program's name.<br>You can specify your program's name several times to signify several<br>exclusive patterns:<br><br>.. code:: python<br><br>    \"\"\"Usage: my_program.py FILE<br>              my_program.py COUNT FILE<br><br>    \"\"\"<br><br>Each pattern can consist of the following elements:<br><br>- **&lt;arguments&gt;**, **ARGUMENTS**. Arguments are specified as either<br>  upper-case words, e.g. ``my_program.py CONTENT-PATH`` or words<br>  surrounded by angular brackets: ``my_program.py &lt;content-path&gt;``.<br>- **--options**.  Options are words started with dash (``-``), e.g.<br>  ``--output``, ``-o``.  You can \"stack\" several of one-letter<br>  options, e.g. ``-oiv`` which will be the same as ``-o -i -v``. The<br>  options can have arguments, e.g.  ``--input=FILE`` or ``-i FILE`` or<br>  even ``-iFILE``. However it is important that you specify option<br>  descriptions if you want your option to have an argument, a default<br>  value, or specify synonymous short/long versions of the option (see<br>  next section on option descriptions).<br>- **commands** are words that do *not* follow the described above<br>  conventions of ``--options`` or ``&lt;arguments&gt;`` or ``ARGUMENTS``,<br>  plus two special commands: dash \"``-``\" and double dash \"``--``\"<br>  (see below).<br>- **-groups-**. Groups are words that start and end with a dash (``-``), e.g.<br>  ``-my_group-``. Every group defined in usage patterns has to be<br>  described in its own section. See \"Group description format\" below.<br><br>Use the following constructs to specify patterns:<br><br>- **[ ]** (brackets) **optional** elements.  e.g.: ``my_program.py<br>  [-hvqo FILE]``<br>- **( )** (parens) **required** elements.  All elements that are *not*<br>  put in **[ ]** are also required, e.g.: ``my_program.py<br>  --path=&lt;path&gt; &lt;file&gt;...`` is the same as ``my_program.py<br>  (--path=&lt;path&gt; &lt;file&gt;...)``.  (Note, \"required options\" might be not<br>  a good idea for your users).<br>- **|** (pipe) **mutually exclusive** elements. Group them using **(<br>  )** if one of the mutually exclusive elements is required:<br>  ``my_program.py (--clockwise | --counter-clockwise) TIME``. Group<br>  them using **[ ]** if none of the mutually-exclusive elements are<br>  required: ``my_program.py [--left | --right]``.<br>- **...** (ellipsis) **one or more** elements. To specify that<br>  arbitrary number of repeating elements could be accepted, use<br>  ellipsis (``...``), e.g.  ``my_program.py FILE ...`` means one or<br>  more ``FILE``-s are accepted.  If you want to accept zero or more<br>  elements, use brackets, e.g.: ``my_program.py [FILE ...]``. Ellipsis<br>  works as a unary operator on the expression to the left.<br>- **[options]** (case sensitive) shortcut for any options.  You can<br>  use it if you want to specify that the usage pattern could be<br>  provided with any options defined below in the option-descriptions<br>  and do not want to enumerate them all in usage-pattern.<br>- \"``[--]``\". Double dash \"``--``\" is used by convention to separate<br>  positional arguments that can be mistaken for options. In order to<br>  support this convention add \"``[--]``\" to your usage patterns.<br>- \"``[-]``\". Single dash \"``-``\" is used by convention to signify that<br>  ``stdin`` is used instead of a file. To support this add \"``[-]``\"<br>  to your usage patterns. \"``-``\" acts as a normal command.<br><br>If your pattern allows to match argument-less option (a flag) several<br>times::<br><br>    Usage: my_program.py [-v | -vv | -vvv]<br><br>then number of occurrences of the option will be counted. I.e.<br>``args['-v']`` will be ``2`` if program was invoked as ``my_program<br>-vv``. Same works for commands.<br><br>If your usage patterns allows to match same-named option with argument<br>or positional argument several times, the matched arguments will be<br>collected into a list::<br><br>    Usage: my_program.py &lt;file&gt; &lt;file&gt; --path=&lt;path&gt;...<br><br>I.e. invoked with ``my_program.py file1 file2 --path=./here<br>--path=./there`` the returned dict will contain ``args['&lt;file&gt;'] ==<br>['file1', 'file2']`` and ``args['--path'] == ['./here', './there']``.<br><br><br>Option descriptions format<br>--------------------------<br><br>**Option descriptions** consist of a list of options that you put<br>below your usage patterns.<br><br>It is necessary to list option descriptions in order to specify:<br><br>- synonymous short and long options,<br>- if an option has an argument,<br>- if option's argument has a default value.<br><br>The rules are as follows:<br><br>- Every line in ``doc`` that starts with ``-`` or ``--`` (not counting<br>  spaces) is treated as an option description, e.g.::<br><br>    Options:<br>      --verbose   # GOOD<br>      -o FILE     # GOOD<br>    Other: --bad  # BAD, line does not start with dash \"-\"<br><br>- To specify that option has an argument, put a word describing that<br>  argument after space (or equals \"``=``\" sign) as shown below. Follow<br>  either &lt;angular-brackets&gt; or UPPER-CASE convention for options'<br>  arguments.  You can use comma if you want to separate options. In<br>  the example below, both lines are valid, however you are recommended<br>  to stick to a single style.::<br><br>    -o FILE --output=FILE       # without comma, with \"=\" sign<br>    -i &lt;file&gt;, --input &lt;file&gt;   # with comma, without \"=\" sing<br><br>- Use two spaces to separate options with their informal description::<br><br>    --verbose More text.   # BAD, will be treated as if verbose option had<br>                           # an argument \"More\", so use 2 spaces instead<br>    -q        Quit.        # GOOD<br>    -o FILE   Output file. # GOOD<br>    --stdout  Use stdout.  # GOOD, 2 spaces<br><br>- If you want to set a default value for an option with an argument,<br>  put it into the option-description, in form ``[default:<br>  &lt;my-default-value&gt;]``::<br><br>    --coefficient=K  The K coefficient [default: 2.95]<br>    --output=FILE    Output file [default: test.txt]<br>    --directory=DIR  Some directory [default: ./]<br><br>- If the option is not repeatable, the value inside ``[default: ...]``<br>  will be interpreted as string.  If it *is* repeatable, it will be<br>  split into a list on whitespace::<br><br>    Usage: my_program.py [--repeatable=&lt;arg&gt; --repeatable=&lt;arg&gt;]<br>                         [--another-repeatable=&lt;arg&gt;]...<br>                         [--not-repeatable=&lt;arg&gt;]<br><br>    # will be ['./here', './there']<br>    --repeatable=&lt;arg&gt;          [default: ./here ./there]<br><br>    # will be ['./here']<br>    --another-repeatable=&lt;arg&gt;  [default: ./here]<br><br>    # will be './here ./there', because it is not repeatable<br>    --not-repeatable=&lt;arg&gt;      [default: ./here ./there]<br><br>Group descriptions format (``dopcopt_plus`` only)<br>-------------------------------------------------<br><br>The only function of groups is to make usage patterns more readable to<br>humans. Under the hood, docopt will replace group elements (e.g.<br>``-my_group-``) with their respective patterns.<br><br>**Group description** has to define a pattern of argument, option, and<br>command elements. Group elements withing groups are not allowed.<br><br>::<br><br>    My Group: --an_option | (--another_option | command) [-o &lt;arg&gt;]<br><br>Case for group names is irrelevant. Underscores (``_``) in group elements<br>are translated to spaces when looking for group description.<br><br>It is possible to span pattern definitions on multiple lines. This<br>definition is equivalent to the previous example::<br><br>    My Group:<br>      --an_option |<br>      (--another_option | command)<br>      [-o &lt;arg&gt;]<br><br>Since groups are just readability replacements for other patterns,<br>they can be enclosed in optional or required parenthesis, etc.<br>These are all valid usage patterns using groups::<br><br>    Usage: prog [-v] -input- [-out_file- |\u00a0(-out_db- [--create])]<br><br>      Input: &lt;in_file&gt;<br><br>      Out File: &lt;out_file&gt;<br><br>      Out DB:<br>        &lt;db_name&gt;<br>        [-u USERNAME [-p PASSWORD]]<br>        [&lt;host&gt;]<br><br>    Options:<br>      ...<br><br>The indentation is completely optional, at all levels, and has no relevance<br>to finding definitions. However, it does make the usage instructions more<br>readable, and is therefore encouraged.<br><br>Also, group descriptions can be placed below or above \"Options\" section, the<br>order bears has relevance to parsing.<br><br>Similarly to Options, group patterns can have descriptions on every line,<br>separated by at least two spaces. Unlike with Options, having comments on a<br>separate line is not supported::<br><br>      Out DB:<br>        &lt;db_name&gt;  database name  # GOOD, 2 spaces<br>        [-u USERNAME [-p PASSWORD]]<br>          database credentials  # BAD, will be mistaken for a pattern!<br>        [&lt;host&gt;] local or remote host name  # BAD, has only 1 space!<br><br><br>Every group that is defined in usage patterns (e.g. ``-my_group-``) must<br>also be described.<br><br>Currently group name must not end with ``Options`` because parser will confuse<br>it with the special group used to describe common options.<br><br><br>Examples<br>--------<br><br>We have an extensive list of `examples<br>&lt;https://github.com/docopt/docopt/tree/master/examples&gt;`_ which cover<br>every aspect of functionality of **docopt**.  Try them out, read the<br>source if in doubt.<br><br>Subparsers, multi-level help and *huge* applications (like git)<br>---------------------------------------------------------------<br><br>If you want to split your usage-pattern into several, implement<br>multi-level help (with separate help-screen for each sub-command),<br>want to interface with existing scripts that don't use **docopt**, or<br>you're building the next \"git\", you will need the new ``options_first``<br>parameter (described in API section above). To get you started quickly<br>we implemented a subset of git command-line interface as an example:<br>`examples/git<br>&lt;https://github.com/docopt/docopt/tree/master/examples/git&gt;`_<br><br><br>Data validation<br>---------------<br><br>**docopt** does one thing and does it well: it implements your<br>command-line interface.  However it does not validate the input data.<br>On the other hand there are libraries like `python schema<br>&lt;https://github.com/halst/schema&gt;`_ which make validating data a<br>breeze.  Take a look at `validation_example.py<br>&lt;https://github.com/docopt/docopt/tree/master/examples/validation_example.py&gt;`_<br>which uses **schema** to validate data and report an error to the<br>user.<br><br>Using docopt with config-files<br>------------------------------<br><br>Often configuration files are used to provide default values which<br>could be overridden by command-line arguments.  Since **docopt**<br>returns a simple dictionary it is very easy to integrate with<br>config-files written in JSON, YAML or INI formats.<br>`config_file_example.py &lt;examples/config_file_example.py&gt;`_ provides<br>and example of how to use **docopt** with JSON or INI config-file.<br><br><br>Development<br>===========<br><br>We would *love* to hear what you think about **docopt** on our `issues<br>page &lt;http://github.com/docopt/docopt/issues&gt;`_<br><br>Make pull requests, report bugs, suggest ideas and discuss<br>**docopt**. You can also drop a line directly to<br>&lt;vladimir@keleshev.com&gt;.<br><br>Porting ``docopt`` to other languages<br>=====================================<br><br>We think **docopt** is so good, we want to share it beyond the Python<br>community! All official docopt ports to other languages can be found<br>under the `docopt organization page &lt;http://github.com/docopt&gt;`_<br>on GitHub.<br><br>If your favourite language isn't among then, you can always create a<br>port for it! You are encouraged to use the Python version as a<br>reference implementation.  A Language-agnostic test suite is bundled<br>with `Python implementation &lt;http://github.com/docopt/docopt&gt;`_.<br><br>Porting discussion is on `issues page<br>&lt;http://github.com/docopt/docopt/issues&gt;`_.<br><br>Changelog<br>=========<br><br>**docopt** follows `semantic versioning &lt;http://semver.org&gt;`_.  The<br>first release with stable API will be 1.0.0 (soon).  Until then, you<br>are encouraged to specify explicitly the version in your dependency<br>tools, e.g.::<br><br>    pip install docopt==0.6.1<br><br>- 0.6.1 Bugfix release.<br>- 0.6.0 ``options_first`` parameter.<br>  **Breaking changes**: Corrected ``[options]`` meaning.<br>  ``argv`` defaults to ``None``.<br>- 0.5.0 Repeated options/commands are counted or accumulated into a<br>  list.<br>- 0.4.2 Bugfix release.<br>- 0.4.0 Option descriptions become optional,<br>  support for \"``--``\" and \"``-``\" commands.<br>- 0.3.0 Support for (sub)commands like `git remote add`.<br>  Introduce ``[options]`` shortcut for any options.<br>  **Breaking changes**: ``docopt`` returns dictionary.<br>- 0.2.0 Usage pattern matching. Positional arguments parsing based on<br>  usage patterns.<br>  **Breaking changes**: ``docopt`` returns namespace (for arguments),<br>  not list. Usage pattern is formalized.<br>- 0.1.0 Initial release. Options-parsing only (based on options<br>  description).\n          </div>"}, "last_serial": 2022248, "releases": {"0.6.3a0": [{"comment_text": "", "digests": {"md5": "7a4ed45c08977407ee83d4614bae9431", "sha256": "0676d0c00e18f3f79ec44911c2dc224f401a2fbb969d0019fcf6fa84431a2b55"}, "downloads": -1, "filename": "docopt_plus-0.6.3a0.tar.gz", "has_sig": false, "md5_digest": "7a4ed45c08977407ee83d4614bae9431", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26813, "upload_time": "2016-03-14T18:43:51", "upload_time_iso_8601": "2016-03-14T18:43:51.557440Z", "url": "https://files.pythonhosted.org/packages/53/5c/655d78c03c3af81e295f97935018476de9862089db2c8a885c579ad78fbf/docopt_plus-0.6.3a0.tar.gz", "yanked": false}], "0.6.3a1": [{"comment_text": "", "digests": {"md5": "5b5f120d574d575f96db73519f064133", "sha256": "7ac4c3fef59cd786a7e7e5a879c17563e2e7c63853701c70da9cc46446cf12c6"}, "downloads": -1, "filename": "docopt_plus-0.6.3a1.tar.gz", "has_sig": false, "md5_digest": "5b5f120d574d575f96db73519f064133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26893, "upload_time": "2016-03-23T09:09:40", "upload_time_iso_8601": "2016-03-23T09:09:40.428542Z", "url": "https://files.pythonhosted.org/packages/35/d6/8dd909f238018cc5cb32991c3743a4a526c96cab601700290130c86b46ea/docopt_plus-0.6.3a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b5f120d574d575f96db73519f064133", "sha256": "7ac4c3fef59cd786a7e7e5a879c17563e2e7c63853701c70da9cc46446cf12c6"}, "downloads": -1, "filename": "docopt_plus-0.6.3a1.tar.gz", "has_sig": false, "md5_digest": "5b5f120d574d575f96db73519f064133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26893, "upload_time": "2016-03-23T09:09:40", "upload_time_iso_8601": "2016-03-23T09:09:40.428542Z", "url": "https://files.pythonhosted.org/packages/35/d6/8dd909f238018cc5cb32991c3743a4a526c96cab601700290130c86b46ea/docopt_plus-0.6.3a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:43 2020"}