{"info": {"author": "Thomas Robitaille", "author_email": "thomas.robitaille@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Numerical properties for Python objects\n=======================================\n\n|Travis Build Status| |Coverage Status|\n\n**Please note:** this package is experimental and may still see some\nchanges to the API. If you have any suggestions for improving the API,\nplease open an issue!\n\nAbout\n-----\n\nThis simple module defines a descriptor class that can be used to define\nnumerical properties (scalar and n-dimensional arrays) on classes and\nprovide a way to validate these. Thus, instead of writing something\nlike:\n\n.. code:: python\n\n    class Sphere(object):\n\n        @property\n        def radius(self):\n            return self._radius\n\n        @radius.setter\n        def radius(self, value):\n            if value <= 0:\n                raise ValueError(\"Value should be strictly positive\")\n            if not np.isscalar(value):\n                raise TypeError(\"Value should be a scalar\")\n            if not np.isreal(value):\n                raise TypeError(\"Value should be numerical\")\n            self._radius = value\n\nfor each property you want to define, you can simply do:\n\n.. code:: python\n\n    from numtraits import NumericalTrait\n    from traitlets import HasTraits\n\n    class Sphere(HasTraits):\n\n        radius = NumericalTrait(domain='strictly-positive', ndim=0)\n\nThe ``NumericalTrait`` class is implemented on top of the\n`traitlets <https://github.com/ipython/traitlets>`__ module. Any class\nusing ``NumericalTrait`` for the definition of a property **must**\nderive from the ``traitlets.HasTraits`` class.\n\nSupport is also included for checking the dimensionality and shape of\narrays (which includes converting tuples and lists to arrays\non-the-fly), as well as checking the units of quantities for the\n`astropy.units <docs.astropy.org/en/stable/units/>`__,\n`pint <http://pint.readthedocs.org/>`__, and\n`quantities <https://pythonhosted.org/quantities/>`__ unit frameworks.\n\nInstalling\n----------\n\nThis package is compatible with Python 2.7, 3.3 and later, and requires\n`numpy <http://www.numpy.org>`__ and\n`traitlets <https://github.com/ipython/traitlets>`__. If you are\ninterested in doing unit validation, you will also need\n`astropy <docs.astropy.org/en/stable/units/>`__,\n`pint <http://pint.readthedocs.org/>`__, or\n`quantities <https://pythonhosted.org/quantities/>`__, depending on\nwhich unit framework you normally use.\n\nTo install, you can do:\n\n::\n\n    pip install numtraits\n\nYou can also bundle ``numtraits.py`` into your package if you want to\navoid using an external dependency, but please be sure to keep the\ncopyright and the license in the file.\n\nUsing\n-----\n\nTo create self-validating numerical properties on a class, use the\n``NumericalTrait`` class:\n\n.. code:: python\n\n    from traitlets import HasTraits\n    from numtraits import NumericalTrait\n\n    class Sphere(HasTraits):\n\n        radius = NumericalTrait(domain='strictly-positive', ndim=0)\n        position = NumericalTrait(shape=(3,))\n\nWhen a property is set, it will be validated:\n\n.. code:: python\n\n    >>> s = Sphere()\n    >>> s.radius = 1.\n    >>> s.radius = -3\n    ...\n    TraitError: radius should be strictly positive\n    >>> s.radius = [1,2]\n    ...\n    TraitError: radius should be a scalar value\n    >>> s.position = (1,2,3)\n    >>> s.position = 3\n    ...\n    TraitError: position should be a 1-d sequence\n    >>> s.position = (1,2,3,4)\n    ...\n    TraitError: position has incorrect length (expected 3 but found 4)\n\nThe following arguments to ``NumericalTrait`` are available:\n\n-  ``ndim``: restrict the values to arrays with this number of dimension\n-  ``shape``: restrict the values to arrays with this shape. If\n   specified, ``ndim`` does not need to be given.\n-  ``domain``: restrict the values to a particular domain - can be one\n   of ``positive``, ``strictly-positive``, ``negative``,\n   ``strictly-negative``, or a tuple representing a range of values.\n-  ``default``: the default value to return, if not specified (defaults\n   to ``None``)\n-  ``convertible_to``: restrict the values to ones with units that would\n   be convertible to a specific set of units (see section below)\n\nNote that tuples and lists will automatically get converted to Numpy\narrays, if they are considered valid.\n\nPhysical units\n--------------\n\nWhile ``NumericalTrait`` can be used for plain scalars and Numpy arrays,\nit can also be used for scalars and arrays which have associated units,\nwith support for three popular unit handling units:\n`astropy.units <docs.astropy.org/en/stable/units/>`__,\n`pint <http://pint.readthedocs.org/>`__, and\n`quantities <https://pythonhosted.org/quantities/>`__.\n\nTo restrict a ``NumericalTrait`` to quantities with a certain type of\nunit, use the ``convertible_to`` option. This option takes units from\nany of these three unit packages, and will ensure that any value passed\nhas units equivalent (but not necessarily equal) to those specified with\nthe ``convertible_to`` option.\n\nIf the units passed to ``convertible_to`` are\n`astropy.units <docs.astropy.org/en/stable/units/>`__ units, then any\nvalue passed to the property should then be an\n`astropy.units <docs.astropy.org/en/stable/units/>`__ quantity. If the\nunits passed to ``convertible_to`` are\n`pint <http://pint.readthedocs.org/>`__ units, then any quantity passed\nto the property should be a `pint <http://pint.readthedocs.org/>`__\nproperty. And finally if the units passed to ``convertible_to`` are\n`quantities <https://pythonhosted.org/quantities/>`__ units, then any\nquantity passed to the property should be a\n`quantities <https://pythonhosted.org/quantities/>`__ quantity.\n\nastropy.units Quantity example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example shows how to restrict the ``radius`` property to\nbe an `astropy.units <docs.astropy.org/en/stable/units/>`__ quantity in\nunits of length:\n\n.. code:: python\n\n    from astropy import units as u\n\n    class Sphere(HasTraits):\n        radius = NumericalTrait(convertible_to=u.m)\n\nwill then behave as follows:\n\n.. code:: python\n\n    >>> s = Sphere()\n    >>> s.radius = 3. * u.m\n    >>> s.radius = 4. * u.cm\n    >>> s.radius = 4. * u.s\n    ...\n    TraitError: radius should be in units convertible to m\n\npint Quantity example\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following example shows how to restrict the ``radius`` property to\nbe a `pint <http://pint.readthedocs.org/>`__ quantity in units of\nlength:\n\n.. code:: python\n\n    from pint import UnitRegistry\n    ureg = UnitRegistry()\n\n    class Sphere(HasTraits):\n        radius = NumericalTrait(convertible_to=ureg.m)\n\nwill then behave as follows:\n\n.. code:: python\n\n    >>> s = Sphere()\n    >>> s.radius = 3. * ureg.m\n    >>> s.radius = 4. * ureg.cm\n    >>> s.radius = 4. * ureg.s\n    ...\n    TraitError: radius should be in units convertible to meter\n\nquantities Quantity example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFinally, the following example shows how to restrict the ``radius``\nproperty to be a `quantities <https://pythonhosted.org/quantities/>`__\nquantity in units of length:\n\n.. code:: python\n\n    import quantities as pq\n\n    class Sphere(HasTraits):\n        radius = NumericalTrait(convertible_to=pq.m)\n\nwill then behave as follows:\n\n.. code:: python\n\n    >>> s = Sphere()\n    >>> s.radius = 3. * pq.m\n    >>> s.radius = 4. * pq.cm\n    >>> s.radius = 4. * pq.s\n    ...\n    TraitError: radius should be in units convertible to m\n\nPlanned support\n---------------\n\n-  Linking of properties (e.g. a property should have the same\n   dimensions as another)\n\n.. |Travis Build Status| image:: https://travis-ci.org/astrofrog/numtraits.svg?branch=master\n   :target: https://travis-ci.org/astrofrog/numtraits\n.. |Coverage Status| image:: https://coveralls.io/repos/astrofrog/numtraits/badge.svg\n   :target: https://coveralls.io/r/astrofrog/numtraits", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/astrofrog/numtraits", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "numtraits", "package_url": "https://pypi.org/project/numtraits/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/numtraits/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/astrofrog/numtraits"}, "release_url": "https://pypi.org/project/numtraits/0.2/", "requires_dist": null, "requires_python": null, "summary": "Numerical traits for Python objects", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/astrofrog/numtraits\" rel=\"nofollow\"><img alt=\"Travis Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81369331879089381132e0a9cf3aeeb13c2351e3/68747470733a2f2f7472617669732d63692e6f72672f617374726f66726f672f6e756d7472616974732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/astrofrog/numtraits\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/443c54e4405fa221bd8e5988079beb1049e77e49/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f617374726f66726f672f6e756d7472616974732f62616467652e737667\"></a></p>\n<p><strong>Please note:</strong> this package is experimental and may still see some\nchanges to the API. If you have any suggestions for improving the API,\nplease open an issue!</p>\n<div id=\"about\">\n<h2>About</h2>\n<p>This simple module defines a descriptor class that can be used to define\nnumerical properties (scalar and n-dimensional arrays) on classes and\nprovide a way to validate these. Thus, instead of writing something\nlike:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Sphere</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_radius</span>\n\n    <span class=\"nd\">@radius</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Value should be strictly positive\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isscalar</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"Value should be a scalar\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isreal</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"Value should be numerical\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_radius</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n</pre>\n<p>for each property you want to define, you can simply do:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">numtraits</span> <span class=\"kn\">import</span> <span class=\"n\">NumericalTrait</span>\n<span class=\"kn\">from</span> <span class=\"nn\">traitlets</span> <span class=\"kn\">import</span> <span class=\"n\">HasTraits</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sphere</span><span class=\"p\">(</span><span class=\"n\">HasTraits</span><span class=\"p\">):</span>\n\n    <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">NumericalTrait</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">'strictly-positive'</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>NumericalTrait</tt> class is implemented on top of the\n<a href=\"https://github.com/ipython/traitlets\" rel=\"nofollow\">traitlets</a> module. Any class\nusing <tt>NumericalTrait</tt> for the definition of a property <strong>must</strong>\nderive from the <tt>traitlets.HasTraits</tt> class.</p>\n<p>Support is also included for checking the dimensionality and shape of\narrays (which includes converting tuples and lists to arrays\non-the-fly), as well as checking the units of quantities for the\n<a href=\"docs.astropy.org/en/stable/units/\" rel=\"nofollow\">astropy.units</a>,\n<a href=\"http://pint.readthedocs.org/\" rel=\"nofollow\">pint</a>, and\n<a href=\"https://pythonhosted.org/quantities/\" rel=\"nofollow\">quantities</a> unit frameworks.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>This package is compatible with Python 2.7, 3.3 and later, and requires\n<a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a> and\n<a href=\"https://github.com/ipython/traitlets\" rel=\"nofollow\">traitlets</a>. If you are\ninterested in doing unit validation, you will also need\n<a href=\"docs.astropy.org/en/stable/units/\" rel=\"nofollow\">astropy</a>,\n<a href=\"http://pint.readthedocs.org/\" rel=\"nofollow\">pint</a>, or\n<a href=\"https://pythonhosted.org/quantities/\" rel=\"nofollow\">quantities</a>, depending on\nwhich unit framework you normally use.</p>\n<p>To install, you can do:</p>\n<pre>pip install numtraits\n</pre>\n<p>You can also bundle <tt>numtraits.py</tt> into your package if you want to\navoid using an external dependency, but please be sure to keep the\ncopyright and the license in the file.</p>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>To create self-validating numerical properties on a class, use the\n<tt>NumericalTrait</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">traitlets</span> <span class=\"kn\">import</span> <span class=\"n\">HasTraits</span>\n<span class=\"kn\">from</span> <span class=\"nn\">numtraits</span> <span class=\"kn\">import</span> <span class=\"n\">NumericalTrait</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sphere</span><span class=\"p\">(</span><span class=\"n\">HasTraits</span><span class=\"p\">):</span>\n\n    <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">NumericalTrait</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">'strictly-positive'</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">NumericalTrait</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,))</span>\n</pre>\n<p>When a property is set, it will be validated:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Sphere</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">1.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">3</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">radius</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">strictly</span> <span class=\"n\">positive</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">radius</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">scalar</span> <span class=\"n\">value</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">position</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"n\">sequence</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">position</span> <span class=\"n\">has</span> <span class=\"n\">incorrect</span> <span class=\"n\">length</span> <span class=\"p\">(</span><span class=\"n\">expected</span> <span class=\"mi\">3</span> <span class=\"n\">but</span> <span class=\"n\">found</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p>The following arguments to <tt>NumericalTrait</tt> are available:</p>\n<ul>\n<li><tt>ndim</tt>: restrict the values to arrays with this number of dimension</li>\n<li><tt>shape</tt>: restrict the values to arrays with this shape. If\nspecified, <tt>ndim</tt> does not need to be given.</li>\n<li><tt>domain</tt>: restrict the values to a particular domain - can be one\nof <tt>positive</tt>, <tt><span class=\"pre\">strictly-positive</span></tt>, <tt>negative</tt>,\n<tt><span class=\"pre\">strictly-negative</span></tt>, or a tuple representing a range of values.</li>\n<li><tt>default</tt>: the default value to return, if not specified (defaults\nto <tt>None</tt>)</li>\n<li><tt>convertible_to</tt>: restrict the values to ones with units that would\nbe convertible to a specific set of units (see section below)</li>\n</ul>\n<p>Note that tuples and lists will automatically get converted to Numpy\narrays, if they are considered valid.</p>\n</div>\n<div id=\"physical-units\">\n<h2>Physical units</h2>\n<p>While <tt>NumericalTrait</tt> can be used for plain scalars and Numpy arrays,\nit can also be used for scalars and arrays which have associated units,\nwith support for three popular unit handling units:\n<a href=\"docs.astropy.org/en/stable/units/\" rel=\"nofollow\">astropy.units</a>,\n<a href=\"http://pint.readthedocs.org/\" rel=\"nofollow\">pint</a>, and\n<a href=\"https://pythonhosted.org/quantities/\" rel=\"nofollow\">quantities</a>.</p>\n<p>To restrict a <tt>NumericalTrait</tt> to quantities with a certain type of\nunit, use the <tt>convertible_to</tt> option. This option takes units from\nany of these three unit packages, and will ensure that any value passed\nhas units equivalent (but not necessarily equal) to those specified with\nthe <tt>convertible_to</tt> option.</p>\n<p>If the units passed to <tt>convertible_to</tt> are\n<a href=\"docs.astropy.org/en/stable/units/\" rel=\"nofollow\">astropy.units</a> units, then any\nvalue passed to the property should then be an\n<a href=\"docs.astropy.org/en/stable/units/\" rel=\"nofollow\">astropy.units</a> quantity. If the\nunits passed to <tt>convertible_to</tt> are\n<a href=\"http://pint.readthedocs.org/\" rel=\"nofollow\">pint</a> units, then any quantity passed\nto the property should be a <a href=\"http://pint.readthedocs.org/\" rel=\"nofollow\">pint</a>\nproperty. And finally if the units passed to <tt>convertible_to</tt> are\n<a href=\"https://pythonhosted.org/quantities/\" rel=\"nofollow\">quantities</a> units, then any\nquantity passed to the property should be a\n<a href=\"https://pythonhosted.org/quantities/\" rel=\"nofollow\">quantities</a> quantity.</p>\n<div id=\"astropy-units-quantity-example\">\n<h3>astropy.units Quantity example</h3>\n<p>The following example shows how to restrict the <tt>radius</tt> property to\nbe an <a href=\"docs.astropy.org/en/stable/units/\" rel=\"nofollow\">astropy.units</a> quantity in\nunits of length:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">astropy</span> <span class=\"kn\">import</span> <span class=\"n\">units</span> <span class=\"k\">as</span> <span class=\"n\">u</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sphere</span><span class=\"p\">(</span><span class=\"n\">HasTraits</span><span class=\"p\">):</span>\n    <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">NumericalTrait</span><span class=\"p\">(</span><span class=\"n\">convertible_to</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">)</span>\n</pre>\n<p>will then behave as follows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Sphere</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">3.</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">m</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">4.</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">cm</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">4.</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">s</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">radius</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"ow\">in</span> <span class=\"n\">units</span> <span class=\"n\">convertible</span> <span class=\"n\">to</span> <span class=\"n\">m</span>\n</pre>\n</div>\n<div id=\"pint-quantity-example\">\n<h3>pint Quantity example</h3>\n<p>The following example shows how to restrict the <tt>radius</tt> property to\nbe a <a href=\"http://pint.readthedocs.org/\" rel=\"nofollow\">pint</a> quantity in units of\nlength:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pint</span> <span class=\"kn\">import</span> <span class=\"n\">UnitRegistry</span>\n<span class=\"n\">ureg</span> <span class=\"o\">=</span> <span class=\"n\">UnitRegistry</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sphere</span><span class=\"p\">(</span><span class=\"n\">HasTraits</span><span class=\"p\">):</span>\n    <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">NumericalTrait</span><span class=\"p\">(</span><span class=\"n\">convertible_to</span><span class=\"o\">=</span><span class=\"n\">ureg</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">)</span>\n</pre>\n<p>will then behave as follows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Sphere</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">3.</span> <span class=\"o\">*</span> <span class=\"n\">ureg</span><span class=\"o\">.</span><span class=\"n\">m</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">4.</span> <span class=\"o\">*</span> <span class=\"n\">ureg</span><span class=\"o\">.</span><span class=\"n\">cm</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">4.</span> <span class=\"o\">*</span> <span class=\"n\">ureg</span><span class=\"o\">.</span><span class=\"n\">s</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">radius</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"ow\">in</span> <span class=\"n\">units</span> <span class=\"n\">convertible</span> <span class=\"n\">to</span> <span class=\"n\">meter</span>\n</pre>\n</div>\n<div id=\"quantities-quantity-example\">\n<h3>quantities Quantity example</h3>\n<p>Finally, the following example shows how to restrict the <tt>radius</tt>\nproperty to be a <a href=\"https://pythonhosted.org/quantities/\" rel=\"nofollow\">quantities</a>\nquantity in units of length:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">quantities</span> <span class=\"k\">as</span> <span class=\"nn\">pq</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sphere</span><span class=\"p\">(</span><span class=\"n\">HasTraits</span><span class=\"p\">):</span>\n    <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">NumericalTrait</span><span class=\"p\">(</span><span class=\"n\">convertible_to</span><span class=\"o\">=</span><span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">)</span>\n</pre>\n<p>will then behave as follows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Sphere</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">3.</span> <span class=\"o\">*</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">m</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">4.</span> <span class=\"o\">*</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">cm</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">4.</span> <span class=\"o\">*</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">s</span>\n<span class=\"o\">...</span>\n<span class=\"n\">TraitError</span><span class=\"p\">:</span> <span class=\"n\">radius</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"ow\">in</span> <span class=\"n\">units</span> <span class=\"n\">convertible</span> <span class=\"n\">to</span> <span class=\"n\">m</span>\n</pre>\n</div>\n</div>\n<div id=\"planned-support\">\n<h2>Planned support</h2>\n<ul>\n<li>Linking of properties (e.g. a property should have the same\ndimensions as another)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1735072, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "fa635d4202af8eae4f34e3ce390ac265", "sha256": "2fca9a6c9334f7358ef1a3e2e64ccaa6a479fc99fc096910e0d5fbe8edcdfd7e"}, "downloads": -1, "filename": "numtraits-0.2.tar.gz", "has_sig": false, "md5_digest": "fa635d4202af8eae4f34e3ce390ac265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8612, "upload_time": "2015-09-23T16:12:04", "upload_time_iso_8601": "2015-09-23T16:12:04.292444Z", "url": "https://files.pythonhosted.org/packages/5b/5e/53a2bc57030f611ae48ab3df7410eb6bce2e666b566f4b8809f1468f4161/numtraits-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa635d4202af8eae4f34e3ce390ac265", "sha256": "2fca9a6c9334f7358ef1a3e2e64ccaa6a479fc99fc096910e0d5fbe8edcdfd7e"}, "downloads": -1, "filename": "numtraits-0.2.tar.gz", "has_sig": false, "md5_digest": "fa635d4202af8eae4f34e3ce390ac265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8612, "upload_time": "2015-09-23T16:12:04", "upload_time_iso_8601": "2015-09-23T16:12:04.292444Z", "url": "https://files.pythonhosted.org/packages/5b/5e/53a2bc57030f611ae48ab3df7410eb6bce2e666b566f4b8809f1468f4161/numtraits-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:08 2020"}