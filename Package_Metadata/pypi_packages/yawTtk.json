{"info": {"author": "Bruno THOORENS", "author_email": "bruno.thoorens@free.fr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Desktop Environment :: Window Managers"], "description": "TtkWidget class is the core of the yawTtk package. It loads Tile and\noverride configure function to manage both widget options and style\noptions.\n\nSupport this project\n====================\n\n.. image:: http://bruno.thoorens.free.fr/img/gratipay.png\n   :target: https://gratipay.com/yawttk\n\n---\n\n.. image:: http://bruno.thoorens.free.fr/img/bitcoin.png\n\n3Jgib9SQiDLYML7QKBYtJUkHq2nyG6Z63D\n\nExtend\n------\n\nA yawTtk widget extends TtkWidget and can be configured mostly as a\nTkinter widget if its extend option is True. There are two ways to \ndisable this feature :\n\n>>> # for all widgets\n>>> customize_all_widgets(False)\n>>> # or\n>>> # for a single widget on its creation\n>>> button = Button(extend = False, text = \"Simple button\")\n\nConfigure \n--------- \n\nIn Tile, widget options and style are separated. yawTtk merges them to\nsimplify and match as possible Tkinter way of coding. Remember that it is\nonly available if extend option is True. configure funcion is called \nby __init__ and __setattr__ class method so there are 3\ndifferent ways to configure widgets.\n\n>>> # configure widget with __init__ function\n>>> button = Button(\n... style = \"custom.Toolbutton\",\n... anchor = \"center\",\n... font = (\"Tahoma\", \"8\", \"bold\"),\n... )\n>>> # or with __setattr__ function\n>>> button[\"foreground\"] = \"steelblue3\"\n>>> button[\"background\"] = \"lightgreen\"\n>>> # or even with configure function\n>>> button.configure(\n... command = exit,\n... text = \"Toolbutton\",\n... padding = (5, 1, 5, 1)\n... )\n>>> # pack and see...\n>>> button.pack(fill = \"x\", padx = 5, pady = 5)\n\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/steelblue_button.png\n\nIn this example, widget style is explicitly defined. If it is not, yawTtk\ngives one according to widget type and name. Next example shows different\npossibilities of style determination by yawTtk. Notice that name\noption is not necessary because of automatic naming in Tkinter.\n\n>>> b1 = Button(extend = False, text = \"Button 1\", name = \"button001\")\n>>> # style widget is \"TButton\"\n>>> b2 = Button(extend = False, text = \"Button 2\", name = \"button002\", style = \"custom.TButton\")\n>>> # style widget is \"custom.TButton\"\n>>> b3 = Button(extend = True, text = \"Button 3\", name = \"button003\")\n>>> # style widget is \"button003.TButton\"\n>>> b4 = Button(extend = True, text = \"Button 4\", name = \"button004\", style = \"TButton\")\n>>> # style widget is \"TButton\"\n\n\n* b1 and b2 can only be configured with ttk::style configure command\n* b3 and b4 can configure themselves with __setattr__ and configure functions\n* b1 and b4 are default button i.e. modifications affect all buttons\n\nLimitations \n----------- \n\nThere are many themes defined in tile (or Tk 8.5). The winnative and xpnative  ones \ndo not allow modification for all widget options. Just see the example below :\n\n>>> # other way to configure widget is to give a dictionary...\n>>> cnf = dict(\n... # relief is not supported in \"xpnative\" and \"winnative\" theme\n... relief = \"solid\",\n... # options supported by all theme\n... anchor = \"center\",\n... font = (\"Tahoma\", \"8\", \"bold\"),\n... foreground = \"steelblue3\",\n... background = \"lightgreen\",\n... command = exit,\n... text = \"Flat button\",\n... padding = (5, 1, 5, 1)\n... )\n\nFor each theme fo Tile :\n\n>>> Button(None, cnf).pack(fill = \"x\", padx = 5, pady = 5)\n\nWindows themes :\n\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/winnative_flatbutton.png\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/xpnative_flatbutton.png\n\nOther themes :\n\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/default_flatbutton.png\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/alt_flatbutton.png\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/clam_flatbutton.png\n.. image:: http://bruno.thoorens.free.fr/yawttk/wiki/images/classic_flatbutton.png\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Moustikitos/yawTtk", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bruno.thoorens.free.fr", "keywords": "ttk,tile,wrapper", "license": "Copyright\u00a9 2006-2016, THOORENS Bruno, BSD licence", "maintainer": "", "maintainer_email": "", "name": "yawTtk", "package_url": "https://pypi.org/project/yawTtk/", "platform": "", "project_url": "https://pypi.org/project/yawTtk/", "project_urls": {"Download": "https://github.com/Moustikitos/yawTtk", "Homepage": "http://bruno.thoorens.free.fr"}, "release_url": "https://pypi.org/project/yawTtk/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "yawTtk is a Python wrapper for Tile. It provides classes which allow the display, positioning and control of native look'n feel widgets.", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>TtkWidget class is the core of the yawTtk package. It loads Tile and\noverride configure function to manage both widget options and style\noptions.</p>\n<div id=\"support-this-project\">\n<h2>Support this project</h2>\n<a href=\"https://gratipay.com/yawttk\" rel=\"nofollow\"><img alt=\"http://bruno.thoorens.free.fr/img/gratipay.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71af0d98c751a326119f273b9fb0b31995e91209/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f696d672f67726174697061792e706e67\"></a>\n<p>\u2014</p>\n<img alt=\"http://bruno.thoorens.free.fr/img/bitcoin.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f37f5336649cc0fea8b08a7aea7b0820ecf7845/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f696d672f626974636f696e2e706e67\">\n<p>3Jgib9SQiDLYML7QKBYtJUkHq2nyG6Z63D</p>\n<div id=\"extend\">\n<h3>Extend</h3>\n<p>A yawTtk widget extends TtkWidget and can be configured mostly as a\nTkinter widget if its extend option is True. There are two ways to\ndisable this feature :</p>\n<pre>&gt;&gt;&gt; # for all widgets\n&gt;&gt;&gt; customize_all_widgets(False)\n&gt;&gt;&gt; # or\n&gt;&gt;&gt; # for a single widget on its creation\n&gt;&gt;&gt; button = Button(extend = False, text = \"Simple button\")\n</pre>\n</div>\n<div id=\"configure\">\n<h3>Configure</h3>\n<p>In Tile, widget options and style are separated. yawTtk merges them to\nsimplify and match as possible Tkinter way of coding. Remember that it is\nonly available if extend option is True. configure funcion is called\nby __init__ and __setattr__ class method so there are 3\ndifferent ways to configure widgets.</p>\n<pre>&gt;&gt;&gt; # configure widget with __init__ function\n&gt;&gt;&gt; button = Button(\n... style = \"custom.Toolbutton\",\n... anchor = \"center\",\n... font = (\"Tahoma\", \"8\", \"bold\"),\n... )\n&gt;&gt;&gt; # or with __setattr__ function\n&gt;&gt;&gt; button[\"foreground\"] = \"steelblue3\"\n&gt;&gt;&gt; button[\"background\"] = \"lightgreen\"\n&gt;&gt;&gt; # or even with configure function\n&gt;&gt;&gt; button.configure(\n... command = exit,\n... text = \"Toolbutton\",\n... padding = (5, 1, 5, 1)\n... )\n&gt;&gt;&gt; # pack and see...\n&gt;&gt;&gt; button.pack(fill = \"x\", padx = 5, pady = 5)\n</pre>\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/steelblue_button.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/055a9af10abafbff3d087aae2f887241df6c9f93/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f737465656c626c75655f627574746f6e2e706e67\">\n<p>In this example, widget style is explicitly defined. If it is not, yawTtk\ngives one according to widget type and name. Next example shows different\npossibilities of style determination by yawTtk. Notice that name\noption is not necessary because of automatic naming in Tkinter.</p>\n<pre>&gt;&gt;&gt; b1 = Button(extend = False, text = \"Button 1\", name = \"button001\")\n&gt;&gt;&gt; # style widget is \"TButton\"\n&gt;&gt;&gt; b2 = Button(extend = False, text = \"Button 2\", name = \"button002\", style = \"custom.TButton\")\n&gt;&gt;&gt; # style widget is \"custom.TButton\"\n&gt;&gt;&gt; b3 = Button(extend = True, text = \"Button 3\", name = \"button003\")\n&gt;&gt;&gt; # style widget is \"button003.TButton\"\n&gt;&gt;&gt; b4 = Button(extend = True, text = \"Button 4\", name = \"button004\", style = \"TButton\")\n&gt;&gt;&gt; # style widget is \"TButton\"\n</pre>\n<ul>\n<li>b1 and b2 can only be configured with ttk::style configure command</li>\n<li>b3 and b4 can configure themselves with __setattr__ and configure functions</li>\n<li>b1 and b4 are default button i.e. modifications affect all buttons</li>\n</ul>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<p>There are many themes defined in tile (or Tk 8.5). The winnative and xpnative  ones\ndo not allow modification for all widget options. Just see the example below :</p>\n<pre>&gt;&gt;&gt; # other way to configure widget is to give a dictionary...\n&gt;&gt;&gt; cnf = dict(\n... # relief is not supported in \"xpnative\" and \"winnative\" theme\n... relief = \"solid\",\n... # options supported by all theme\n... anchor = \"center\",\n... font = (\"Tahoma\", \"8\", \"bold\"),\n... foreground = \"steelblue3\",\n... background = \"lightgreen\",\n... command = exit,\n... text = \"Flat button\",\n... padding = (5, 1, 5, 1)\n... )\n</pre>\n<p>For each theme fo Tile :</p>\n<pre>&gt;&gt;&gt; Button(None, cnf).pack(fill = \"x\", padx = 5, pady = 5)\n</pre>\n<p>Windows themes :</p>\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/winnative_flatbutton.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c361fb9b3a68d1f167e89c2489a765f144633d47/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f77696e6e61746976655f666c6174627574746f6e2e706e67\">\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/xpnative_flatbutton.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d1602ca6b48ee175a0ba6b4fc30847dd130105d/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f78706e61746976655f666c6174627574746f6e2e706e67\">\n<p>Other themes :</p>\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/default_flatbutton.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf6b18a8b6e2aa3934048d851fe64a43985e1588/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f64656661756c745f666c6174627574746f6e2e706e67\">\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/alt_flatbutton.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cb0da823b79f33a87e7d1e544c741e71e144492/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f616c745f666c6174627574746f6e2e706e67\">\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/clam_flatbutton.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c31324ec8246923334e7e4447da0c2b043b3243d/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f636c616d5f666c6174627574746f6e2e706e67\">\n<img alt=\"http://bruno.thoorens.free.fr/yawttk/wiki/images/classic_flatbutton.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a9ece242a8c40e33830033358ccb54d5ffbeec3/687474703a2f2f6272756e6f2e74686f6f72656e732e667265652e66722f79617774746b2f77696b692f696d616765732f636c61737369635f666c6174627574746f6e2e706e67\">\n</div>\n</div>\n\n          </div>"}, "last_serial": 3043674, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "bff9afd34b25ae4e15e9276c0bdadeeb", "sha256": "62a58c5a4c4f9fa9e9981b7cf34776e852e6b5548cf39a7ef6dd03ceb6600320"}, "downloads": -1, "filename": "yawTtk-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bff9afd34b25ae4e15e9276c0bdadeeb", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 53768, "upload_time": "2015-08-06T10:25:47", "upload_time_iso_8601": "2015-08-06T10:25:47.142398Z", "url": "https://files.pythonhosted.org/packages/bb/51/ef143917fba760ea64e1b9df2c77dc66da195f2d58f0206cf71a938517b0/yawTtk-1.0.3-py2.py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ac485f2aae4bf672060bbd1361891f5d", "sha256": "8c426e03471e9a3ebfe3cb98be9c7a39091e3011c1d42ee668fd39730982d818"}, "downloads": -1, "filename": "yawTtk-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac485f2aae4bf672060bbd1361891f5d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 51341, "upload_time": "2017-07-23T21:56:33", "upload_time_iso_8601": "2017-07-23T21:56:33.655062Z", "url": "https://files.pythonhosted.org/packages/dd/9d/0509fe6d085e5ba1b30e77b39187328f6142722a33bd68143f567c8c6df7/yawTtk-1.0.4-py2.py3-none-any.whl", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "c32fd6c546030ecacbfef891ba0897fd", "sha256": "f5b9fbb85b2363f2a1713e6622174059b497b5a104c217b936c25b0106008fd2"}, "downloads": -1, "filename": "yawTtk-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c32fd6c546030ecacbfef891ba0897fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 52178, "upload_time": "2017-07-23T21:56:35", "upload_time_iso_8601": "2017-07-23T21:56:35.212116Z", "url": "https://files.pythonhosted.org/packages/b4/0b/c4e9961e3d1ba2ed97a55539b6631b7eeee7c7461be31621f2f376a46ec4/yawTtk-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e1336e48034e8f45c4c854c02436558", "sha256": "23b6f7ca0e5744b61d0916a4f8f004af7494e967aa9ad7f8609b15e87e14ebdb"}, "downloads": -1, "filename": "yawTtk-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1e1336e48034e8f45c4c854c02436558", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52173, "upload_time": "2017-07-23T21:56:36", "upload_time_iso_8601": "2017-07-23T21:56:36.955406Z", "url": "https://files.pythonhosted.org/packages/ae/49/8021693273b803f82b30d777f667123853b8377fba8bbbbffba567689c7d/yawTtk-1.0.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c32fd6c546030ecacbfef891ba0897fd", "sha256": "f5b9fbb85b2363f2a1713e6622174059b497b5a104c217b936c25b0106008fd2"}, "downloads": -1, "filename": "yawTtk-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c32fd6c546030ecacbfef891ba0897fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 52178, "upload_time": "2017-07-23T21:56:35", "upload_time_iso_8601": "2017-07-23T21:56:35.212116Z", "url": "https://files.pythonhosted.org/packages/b4/0b/c4e9961e3d1ba2ed97a55539b6631b7eeee7c7461be31621f2f376a46ec4/yawTtk-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e1336e48034e8f45c4c854c02436558", "sha256": "23b6f7ca0e5744b61d0916a4f8f004af7494e967aa9ad7f8609b15e87e14ebdb"}, "downloads": -1, "filename": "yawTtk-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1e1336e48034e8f45c4c854c02436558", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52173, "upload_time": "2017-07-23T21:56:36", "upload_time_iso_8601": "2017-07-23T21:56:36.955406Z", "url": "https://files.pythonhosted.org/packages/ae/49/8021693273b803f82b30d777f667123853b8377fba8bbbbffba567689c7d/yawTtk-1.0.5-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:22:39 2020"}