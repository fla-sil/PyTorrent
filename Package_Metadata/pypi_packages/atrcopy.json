{"info": {"author": "Rob McMullen", "author_email": "feedback@playermissile.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "atrcopy\n=======\n\nPython command line utility to manage file systems on Atari 8-bit and Apple ][\ndisk images.\n\n.. contents:: **Contents**\n\nPrerequisites\n=============\n\nPython\n------\n\nStarting with ``atrcopy`` 7.0, Python 3.6 is **required**. Python 2 support has\nbeen dropped. Python 3.7 and beyond will be supported when they are released,\nbut 3.6 will probably remain the minimum version. From what I know now of\nfuture Python versions, I don't plan on requiring any language features beyond\n3.6.\n\nSupported Python versions:\n\n* Python 3.6 (and later)\n\nIf you need Python 2 support, ``atrcopy`` 6.5 and earlier supports Python 2.7,\nwhich you can install with ``pip install \"atrcopy<7.0\"``\n\nDependencies\n------------\n\n* numpy\n\nIt will be automatically installed when installing ``atrcopy`` with ``pip`` as\ndescribed below.\n\nFor development, pytest is used to run the test suite, but this is not required\nfor normal installation of ``atrcopy``.\n\nInstallation\n============\n\n``atrcopy`` is available in the `PyPI <https://pypi.python.org/pypi/atrcopy/>`_\nand installable using ``pip``::\n\n    pip install atrcopy\n\nLinux and macOS note: if numpy needs to be installed on your system, it may be\ncompiled from source which can take several minutes.\n\nFeatures\n========\n\n* list contents of disk images\n* copy files to and from disk images\n* delete files from disk images\n* create new disk images\n* concatenate binary data together into a file on the disk image\n* compile assembly source into binary files if `pyatasm <https://pypi.python.org/pypi/pyatasm>`_ is installed\n\n**Note:** The command line argument structure was changed starting with\n``atrcopy`` 4.0 -- it is now based on subcommands, much like ``git`` uses ``git\npull``, ``git clone``, ``git branch``, etc. Upgrading from a version prior to\n4.0 will require modification of scripts that use ``atrcopy`` 3.x-style command\nline arguments.\n\n\nSupported Formats\n=================\n\nSupported Disk Image Types\n--------------------------\n\n* ``XFD``: XFormer images, basically raw disk dumps\n* ``ATR``: Nick Kennedy's disk image format; includes 16 byte header\n* ``DSK``: Apple ][ DOS 3.3 disk image; raw sector dump\n\nSupported File System Formats\n-----------------------------\n\n+----------------+-------------+---------+-------+-------------------+\n| File System    | Platform    | Read    | Write | Status            |\n+================+=============+=========+=======+===================+\n| DOS 2 (90K)    | Atari 8-bit | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 2 (180K)   | Atari 8-bit | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 2.5 (130K) | Atari 8-bit | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 3 (130K)   | Atari 8-bit | No      | No    | Unimplemented     |\n+----------------+-------------+---------+-------+-------------------+\n| SpartaDOS      | Atari 8-bit | No      | No    | Under development |\n+----------------+-------------+---------+-------+-------------------+\n| MyDOS          | Atari 8-bit | Partial | No    | Under development |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 3.3        | Apple ][    | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| ProDOS 8       | Apple ][    | No      | No    | Unimplemented     |\n+----------------+-------------+---------+-------+-------------------+\n\n\nOther Supported Formats\n-----------------------\n\n+----------+----------------------------------+---------+-------+-----------------+\n| Format   | Platform/description             | Read    | Write | Status          |\n+==========+==================================+=========+=======+=================+\n| ``.xex`` | Atari 8-bit executable files     | Yes     | Yes   | Fully supported |\n+----------+----------------------------------+---------+-------+-----------------+\n| KBoot    | Atari 8-bit ``xex`` in boot disk | Yes     | Yes   | Fully supported |\n+----------+----------------------------------+---------+-------+-----------------+\n| ``.car`` | Atari 8-bit cartridge images     | Yes     | No    | Read only       |\n+----------+----------------------------------+---------+-------+-----------------+\n| BSAVE    | Apple ][ ``BSAVE`` data          | Yes     | Yes   | Fully supported |\n+----------+----------------------------------+---------+-------+-----------------+\n| ``.zip`` | MAME ROM zipfiles                | Partial | No    | Experimental    |\n+----------+----------------------------------+---------+-------+-----------------+\n\n**Note:** Atari ROM cartridges are supported in both both plain binary and\natari800 ``.car`` format\n\n\nSupported Compression/Container Formats\n---------------------------------------\n\nStarting with ``atrcopy`` 8.0, compressed disk images are supported\ntransparently, so any type of disk image compressed with one of the supported\ncontainer formats can be used directly, without first decompressing it before\nrunning ``atrcopy``.\n\n+--------------------+----------+------+-------+------------------------------+\n| Container          | File Ext | Read | Write | Status                       |\n+====================+==========+======+=======+==============================+\n| gzip               | .gz      | Yes  | No    | Read only                    |\n+--------------------+----------+------+-------+------------------------------+\n| bzip2              | .bz2     | Yes  | No    | Read only                    |\n+--------------------+----------+------+-------+------------------------------+\n| lzma               | .xz      | Yes  | No    | Read only                    |\n+--------------------+----------+------+-------+------------------------------+\n| Disk Communicator  | .dcm     | No   | No    | Recognized but unimplemented |\n+--------------------+----------+------+-------+------------------------------+\n\n\nUsage\n=====\n\n::\n\n    atrcopy DISK_IMAGE <global options> COMMAND <command options>\n\nwhere the available commands include:\n\n* ``list``: list files on the disk image. This is the default if no command is specified\n* ``create``: create a new disk image\n* ``add``: add files to a disk image\n* ``extract``: copy files from the disk image to the local file system\n* ``assemble``: create a binary file from ATasm source, optionally including segments containing raw binary data\n* ``boot``: create a boot disk using various binary data as input\n* ``delete``: delete files from the disk image\n* ``vtoc``: show and manipulate the VTOC for images that support it\n\nExcept when using the ``--help`` option, the ``DISK_IMAGE`` is always required\nwhich points to the path on your local file system of the disk image.\n``COMMAND`` is one of the commands listed above, and the commands may be\nabbreviated as shown here::\n\n    $ atrcopy --help\n    usage: atrcopy DISK_IMAGE [-h] [-v] [--dry-run] COMMAND ...\n\n    Manipulate files on several types of 8-bit computer disk images. Type 'atrcopy\n    DISK_IMAGE COMMAND --help' for list of options available for each command.\n\n    positional arguments:\n      COMMAND\n        list (t,ls,dir,catalog)\n                            List files on the disk image. This is the default if\n                            no command is specified\n        crc                 List files on the disk image and the CRC32 value in\n                            format suitable for parsing\n        extract (x)         Copy files from the disk image to the local filesystem\n        add (a)             Add files to the disk image\n        create (c)          Create a new disk image\n        assemble (s,asm)    Create a new binary file in the disk image\n        boot (b)            Create a bootable disk image\n        delete (rm,del)     Delete files from the disk image\n        vtoc (v)            Show a formatted display of sectors free in the disk\n                            image\n        segments            Show the list of parsed segments in the disk image\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --verbose\n      --dry-run             don't perform operation, just show what would have\n                            happened\n\n\nHelp for available options for each command is available without specifying a\ndisk image, using a command line like::\n\n    atrcopy COMMAND --help\n\nso for example, the help for assembling a binary file is::\n\n    $ atrcopy asm --help\n    usage: atrcopy DISK_IMAGE assemble [-h] [-f] [-s [ASM [ASM ...]]]\n                                       [-d [DATA [DATA ...]]] [-r RUN_ADDR] -o\n                                       OUTPUT\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -f, --force           allow file overwrites in the disk image\n      -s [ASM [ASM ...]], --asm [ASM [ASM ...]]\n                            source file(s) to assemble using pyatasm\n      -d [DATA [DATA ...]], -b [DATA [DATA ...]], --data [DATA [DATA ...]]\n                            binary data file(s) to add to assembly, specify as\n                            file@addr. Only a portion of the file may be included;\n                            specify the subset using standard python slice\n                            notation: file[subset]@addr\n      -r RUN_ADDR, --run-addr RUN_ADDR, --brun RUN_ADDR\n                            run address of binary file if not the first byte of\n                            the first segment\n      -o OUTPUT, --output OUTPUT\n                            output file name in disk image\n\n\n\nExamples\n========\n\nList all files on a disk image::\n\n    $ atrcopy DOS_25.ATR \n    DOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\n    File #0  (.2.u.*) 004 DOS     SYS  037\n    File #1  (.2.u.*) 041 DUP     SYS  042\n    File #2  (.2.u.*) 083 RAMDISK COM  009\n    File #3  (.2.u.*) 092 SETUP   COM  070\n    File #4  (.2.u.*) 162 COPY32  COM  056\n    File #5  (.2.u.*) 218 DISKFIX COM  057\n\nExtract a file::\n\n    $ atrcopy DOS_25.ATR extract SETUP.COM\n    DOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\n    extracting SETUP.COM -> SETUP.COM\n\nExtract all files::\n\n    $ atrcopy DOS_25.ATR extract --all\n    DOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\n    extracting File #0  (.2.u.*) 004 DOS     SYS  037 -> DOS.SYS\n    extracting File #1  (.2.u.*) 041 DUP     SYS  042 -> DUP.SYS\n    extracting File #2  (.2.u.*) 083 RAMDISK COM  009 -> RAMDISK.COM\n    extracting File #3  (.2.u.*) 092 SETUP   COM  070 -> SETUP.COM\n    extracting File #4  (.2.u.*) 162 COPY32  COM  056 -> COPY32.COM\n    extracting File #5  (.2.u.*) 218 DISKFIX COM  057 -> DISKFIX.COM\n\nExtract all, using the abbreviated command and converting to lower case on the\nhost file system::\n\n    $ atrcopy DOS_25.ATR x --all -l\n    DOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\n    extracting File #0  (.2.u.*) 004 DOS     SYS  037 -> dos.sys\n    extracting File #1  (.2.u.*) 041 DUP     SYS  042 -> dup.sys\n    extracting File #2  (.2.u.*) 083 RAMDISK COM  009 -> ramdisk.com\n    extracting File #3  (.2.u.*) 092 SETUP   COM  070 -> setup.com\n    extracting File #4  (.2.u.*) 162 COPY32  COM  056 -> copy32.com\n    extracting File #5  (.2.u.*) 218 DISKFIX COM  057 -> diskfix.com\n\nCreating Disk Images\n--------------------\n\nSeveral template disk images are included in the distribution, and these can be\nused to create blank disk images that subsequent uses of ``atrcopy`` can\nreference.\n\nThe available disk images can be viewed using ``atrcopy create --help``::\n\n    $ atrcopy create --help\n    usage: atrcopy DISK_IMAGE create [-h] [-f] TEMPLATE\n\n    positional arguments:\n      TEMPLATE     template to use to create new disk image; see below for list of\n                   available built-in templates\n\n    optional arguments:\n      -h, --help   show this help message and exit\n      -f, --force  replace disk image file if it exists\n\n    available templates:\n      dos2dd          Atari 8-bit DOS 2 double density (180K), empty VTOC\n      dos2ed          Atari 8-bit DOS 2 enhanced density (130K), empty VTOC\n      dos2ed+2.5      Atari 8-bit DOS 2 enhanced density (130K) DOS 2.5 system disk\n      dos2sd          Atari 8-bit DOS 2 single density (90K), empty VTOC\n      dos2sd+2.0s     Atari 8-bit DOS 2 single density (90K) DOS 2.0S system disk\n      dos33           Apple ][ DOS 3.3 (140K) standard RWTS, empty VTOC\n      dos33autobrun   Apple ][ DOS 3.3 (140K) disk image for binary program\n                      development: HELLO sets fullscreen HGR and calls BRUN on\n                      user-supplied AUTOBRUN binary file\n\nTo create a new image, use::\n\n    $ atrcopy game.dsk create dos33autobrun\n\nwhich will create a new file called ``game.dsk`` based on the ``dos33autobrun``\nimage.\n\n``dos33autobrun`` is a special image that can be used to create autoloading\nbinary programs. It contains an Applesoft Basic file called ``HELLO`` which\nwill autoload on boot. It sets the graphics mode to fullscreen hi-res graphics\n(the first screen at $2000) and executes a ``BRUN`` command to start a binary\nfile named ``AUTOBRUN``. ``AUTOBRUN`` doesn't exist in the image, it's for you\nto supply.\n\n\nCreating a Custom Boot Disk\n---------------------------\n\nBlocks of binary data can be combined into a boot disk in either ATR format for\nAtari or DSK format for Apple::\n\n    $ atrcopy boot --help\n    usage: atrcopy DISK_IMAGE boot [-h] [-f] [-s [ASM [ASM ...]]]\n                                   [-d [DATA [DATA ...]]] [-b [OBJ [OBJ ...]]]\n                                   [-r RUN_ADDR]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -f, --force           allow file overwrites in the disk image\n      -s [ASM [ASM ...]], --asm [ASM [ASM ...]]\n                            source file(s) to assemble using pyatasm\n      -d [DATA [DATA ...]], --data [DATA [DATA ...]]\n                            binary data file(s) to add to assembly, specify as\n                            file@addr. Only a portion of the file may be included;\n                            specify the subset using standard python slice\n                            notation: file[subset]@addr\n      -b [OBJ [OBJ ...]], --obj [OBJ [OBJ ...]], --bload [OBJ [OBJ ...]]\n                            binary file(s) to add to assembly, either executables\n                            or labeled memory dumps (e.g. BSAVE on Apple ][),\n                            parsing each file's binary segments to add to the\n                            resulting disk image at the load address for each\n                            segment\n      -r RUN_ADDR, --run-addr RUN_ADDR, --brun RUN_ADDR\n                            run address of binary file if not the first byte of\n                            the first segment\n\nOne of ``-s``, ``-d``, or ``-b`` must be speficied to provide the source for\nthe boot disk. The ``-b`` argument can take an Atari binary in XEX format, and\nwill properly handle multiple segments within that file. If no starting address\nis supplied (or, if using an XEX, to override the start address normally\ncontained within the XEX), use the ``-r`` option. Otherwise, the run address\nwill point to the first byte of the first binary segment.\n\n\nCreating Programs on the Disk Image\n-----------------------------------\n\nThe simple assembler included in ``atrcopy`` can create binary programs by\nconnecting binary data together in a single file and specifying a start address\nso it can be executed by the system's binary run command.\n\nIt is also possible to assemble text files that use the MAC/65 syntax, because\nsupport for `pyatasm <https://pypi.python.org/pypi/pyatasm>`_ is built-in (but\noptional). MAC/65 is a macro assembler originally designed for the Atari 8-bit\nmachines but since it produces 6502 code it can be used to compile for any\nmachine that uses the 6502: Apple, Commodore, etc.\n\nCreating Atari 8-bit Executables\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAtari 8-bit object files include a small header and an arbitrary number of\nsegments. Each segment defines a contiguous block of data with a start and end\naddress. If the file has multiple segments, they will be processed in the order\nthey appear in the file, not by segment start address.\n\nThis example creates a new ``xex`` on a disk that combines the segments of an\nalready existing executable with some new assembly code.\n\nAfter creating the test image with::\n\n    $ atrcopy test.atr create dos2sd\n    using dos2sd template:\n      Atari 8-bit DOS 2 single density (90K), empty VTOC\n    created test.atr: ATR Disk Image (size=92160 (720x128B), crc=0 flags=0 unused=0) Atari DOS Format: 707 usable sectors (707 free), 0 files\n\nthis command compiles the file ``test_header.s`` and prefixes it to the\nexisting executable::\n\n    $ atrcopy test.atr asm -s test_header.s -b air_defense_v18.xex -o test.xex -f\n    test.atr: ATR Disk Image (size=92160 (720x128B), crc=0 flags=0 unused=0) Atari DOS Format: 707 usable sectors (707 free), 0 files\n    fname: test_header.s\n    Pass 1: Success. (0 warnings)\n    Pass 2: \n    adding 0600 - 0653, size=0053 ($53 bytes @ 0600) from test_header.s assembly\n    adding 02e2 - 02e4, size=0002 ($2 bytes @ 02e2) from test_header.s assembly\n    adding  $02e0-$02e2 ($0002 @ $0006) from air_defense_v18.xex\n    adding  $6000-$6bd4 ($0bd4 @ $000c) from air_defense_v18.xex\n    total file size: $c3d (3133) bytes\n    copying test.xex to test.atr\n\n\nCreating DOS 3.3 Binaries\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor this example, the goal is to produce a single binary file that combines a\nhi-res image ``title.bin`` loaded at 2000 hex (the first hi-res screen) and\ncode at 6000 hex from the binary file ``game``, with a start address of 6000\nhex.\n\nThe binary file ``game`` was assembled using the assembler from the \n`cc65 <https://github.com/cc65/cc65>`_ project, using the command::\n\n    cl65 -t apple2 --cpu 6502 --start-addr 0x6000 -o game game.s\n\nBecause the Apple ][ binary format is limited to a single contiguous block of\ndata with a start address of the first byte of data loaded, ``atrcopy`` will\nfill the gaps between any segments that aren't contiguous with zeros. If the\nstart address is not the first byte of the first specified segment, a small\nsegment will be included at the beginning that jumps to the specified ``brun``\naddress (shown here as the segment from 1ffd - 2000). Note the gap between 4000\nand 6000 hex will be filled with zeros::\n\n    $ atrcopy game.dsk create dos33autobrun\n    using dos33autobrun template:\n      Apple ][ DOS 3.3 (140K) disk image for binary program development: HELLO sets\n      fullscreen HGR and calls BRUN on user-supplied AUTOBRUN binary file\n    created game.dsk: DOS 3.3 Disk Image (size=143360 (560x256b)\n    File #0  ( A) 002 HELLO                          003 001\n\n    $ atrcopy game.dsk asm -d title.bin@2000 -b game --brun 6000 -f -o AUTOBRUN\n    game.dsk: DOS 3.3 Disk Image (size=143360 (560x256b)\n    adding BSAVE data $6000-$6ef3 ($0ef3 @ $0004) from game\n    setting data for $1ffd - $2000 at index $0004\n    setting data for $2000 - $4000 at index $0007\n    setting data for $6000 - $6ef3 at index $4007\n    total file size: $4efa (20218) bytes\n    copying AUTOBRUN to game.dsk\n\n\nExample on macOS\n----------------\n\nmacOS supplies python with the operating system so you shouldn't need to\ninstall a framework version from python.org.\n\nTo prevent overwriting important system files, it's best to create a working\nfolder: a new empty folder somewhere and do all your testing in that folder.\nFor this example, create a folder called ``atrtest`` in your ``Documents``\nfolder.  Put a few disk images in this directory to use for testing.\n\nSince this is a command line program, you must get to a command line prompt.\nStart a Terminal by double clicking on Terminal.app in the\n``Applications/Utilities`` folder in the Finder.  When Terminal opens, it will\nput you in your home folder automatically.  Go to the ``atrtest`` folder by\ntyping::\n\n    cd Documents/atrtest\n\nYou can see the ATR images you placed in this directory by using the\ncommand::\n\n    ls -l\n\nFor example, you might see::\n\n    mac:~/Documents/atrtest $ ls -l\n    -rw-r--r-- 1 rob  staff  92176 May 18 21:57 GAMES1.ATR\n\nNow, run the program by typing ``atrcopy GAMES1.ATR`` and you should\nsee the contents of the ``ATR`` image in the familiar Atari DOS format::\n\n    mac:~/Documents/atrtest $ atrcopy GAMES1.ATR\n    GAMES1.ATR: ATR Disk Image (size=92160 (720x128B), crc=0 flags=0 unused=0) Atari DOS Format: 707 usable sectors (17 free), 9 files\n    File #0  (.2.u.*) 004 DOS     SYS  039\n    File #1  (.2.u.*) 043 MINER2       138\n    File #2  (.2.u.*) 085 DEFENDER     132\n    File #3  (.2.u.*) 217 CENTIPEDE    045\n    File #4  (.2.u.*) 262 GALAXIAN     066\n    File #5  (.2.u.*) 328 AUTORUN SYS  005\n    File #6  (.2.u.*) 439 DIGDUG       133\n    File #7  (.2.u.*) 531 ANTEATER     066\n    File #8  (.2.u.*) 647 ASTEROIDS    066\n\nSee other examples as above.\n\n\nReferences\n==========\n\n* http://www.atariarchives.org/dere/chapt09.php\n* http://atari.kensclassics.org/dos.htm\n* http://www.crowcastle.net/preston/atari/\n* http://www.atarimax.com/jindroush.atari.org/afmtatr.html\n* https://archive.org/details/Beneath_Apple_DOS_OCR\n\nRelated Atari Projects\n----------------------\n\n* `franny <http://atari8.sourceforge.net/franny.html>`_: (C, macOS/linux) Command line program to manage Atari DOS 2 and SpartaDOS II image and file systems\n* `dir2atr <http://www.horus.com/~hias/atari/>`_: (Win) Suite of command line programs to manage Atari disk images and DOS 2/MyDOS file systems\n* `atadim <http://raster.infos.cz/atari/forpc/atadim.htm>`_: (Win) Graphical program to manage Atari disk images and DOS 2/MyDOS file systems\n\nRelated Apple Projects\n----------------------\n\nTurns out there are a ton of Apple ][ disk image viewers and editors! I was pointed to the list from the `diskii project <https://github.com/zellyn/diskii>`_, so I've included most of that list here.\n\n* `a2disk <https://github.com/jtauber/a2disk>`_ (Python 3) DOS 3.3 reader and Applesoft BASIC detokenizer\n* `cppo <https://github.com/RasppleII/a2server/blob/master/scripts/tools/cppo>`_ (Python) a script from the `a2server <http://ivanx.com/a2server/>`_ project to read DOS 3.3 and ProDOS disk images\n* `Driv3rs <https://github.com/thecompu/Driv3rs>`_ (Python) Apple III SOS DSK image utility\n* `c2d <https://github.com/datajerk/c2d>`_: (C, Win/macOS/linux) Command line program to create bootable Apple disk images (no file system)\n* `Apple Commander <http://applecommander.sourceforge.net/>`_: (Java) Command line program to manage Apple disk images and file systems\n* `Cider Press <http://a2ciderpress.com/>`_: (Win) Graphical program to manage Apple disk images and file systems\n* `diskii <https://github.com/zellyn/diskii>`_: (Go) Command line tool, under development\n* `Cadius <http://brutaldeluxe.fr/products/crossdevtools/cadius/index.html>`_ (Win) Brutal Deluxe's commandline tools\n* `dsktool <https://github.com/cybernesto/dsktool.rb>`_ (Ruby)\n* `Apple II Disk Tools <https://github.com/cmosher01/Apple-II-Disk-Tools>`_ (C)\n* `libA2 <https://github.com/madsen/perl-libA2>`_ (Perl)\n* `AppleSAWS <https://github.com/markdavidlong/AppleSAWS>`_ (Qt, Win/macOS/linux) very cool looking GUI\n* `DiskBrowser <https://github.com/dmolony/DiskBrowser>`_ (Java) GUI tool that even displays Wizardry levels and VisiCalc files!\n* `dos33fsprogs <https://github.com/deater/dos33fsprogs>`_ (C)\n* `apple2-disk-util <https://github.com/slotek/apple2-disk-util>`_ (Ruby)\n* `dsk2nib <https://github.com/slotek/dsk2nib>`_ (C)\n* `standard-delivery <https://github.com/peterferrie/standard-delivery>`_ (6502 assembly) Apple II single-sector fast boot-loader", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/robmcmullen/atrcopy", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "atrcopy", "package_url": "https://pypi.org/project/atrcopy/", "platform": "", "project_url": "https://pypi.org/project/atrcopy/", "project_urls": {"Homepage": "https://github.com/robmcmullen/atrcopy"}, "release_url": "https://pypi.org/project/atrcopy/9.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Utility to manage file systems on Atari 8-bit (DOS 2) and Apple ][ (DOS 3.3) disk images.", "version": "9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"atrcopy\">\n<h2><a href=\"#id2\" rel=\"nofollow\">atrcopy</a></h2>\n<p>Python command line utility to manage file systems on Atari 8-bit and Apple ][\ndisk images.</p>\n<div id=\"contents\">\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href=\"#atrcopy\" id=\"id2\" rel=\"nofollow\">atrcopy</a></li>\n<li><a href=\"#prerequisites\" id=\"id3\" rel=\"nofollow\">Prerequisites</a><ul>\n<li><a href=\"#python\" id=\"id4\" rel=\"nofollow\">Python</a></li>\n<li><a href=\"#dependencies\" id=\"id5\" rel=\"nofollow\">Dependencies</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id6\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#features\" id=\"id7\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#supported-formats\" id=\"id8\" rel=\"nofollow\">Supported Formats</a><ul>\n<li><a href=\"#supported-disk-image-types\" id=\"id9\" rel=\"nofollow\">Supported Disk Image Types</a></li>\n<li><a href=\"#supported-file-system-formats\" id=\"id10\" rel=\"nofollow\">Supported File System Formats</a></li>\n<li><a href=\"#other-supported-formats\" id=\"id11\" rel=\"nofollow\">Other Supported Formats</a></li>\n<li><a href=\"#supported-compression-container-formats\" id=\"id12\" rel=\"nofollow\">Supported Compression/Container Formats</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id13\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#examples\" id=\"id14\" rel=\"nofollow\">Examples</a><ul>\n<li><a href=\"#creating-disk-images\" id=\"id15\" rel=\"nofollow\">Creating Disk Images</a></li>\n<li><a href=\"#creating-a-custom-boot-disk\" id=\"id16\" rel=\"nofollow\">Creating a Custom Boot Disk</a></li>\n<li><a href=\"#creating-programs-on-the-disk-image\" id=\"id17\" rel=\"nofollow\">Creating Programs on the Disk Image</a><ul>\n<li><a href=\"#creating-atari-8-bit-executables\" id=\"id18\" rel=\"nofollow\">Creating Atari 8-bit Executables</a></li>\n<li><a href=\"#creating-dos-3-3-binaries\" id=\"id19\" rel=\"nofollow\">Creating DOS 3.3 Binaries</a></li>\n</ul>\n</li>\n<li><a href=\"#example-on-macos\" id=\"id20\" rel=\"nofollow\">Example on macOS</a></li>\n</ul>\n</li>\n<li><a href=\"#references\" id=\"id21\" rel=\"nofollow\">References</a><ul>\n<li><a href=\"#related-atari-projects\" id=\"id22\" rel=\"nofollow\">Related Atari Projects</a></li>\n<li><a href=\"#related-apple-projects\" id=\"id23\" rel=\"nofollow\">Related Apple Projects</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"prerequisites\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Prerequisites</a></h2>\n<div id=\"python\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Python</a></h3>\n<p>Starting with <tt>atrcopy</tt> 7.0, Python 3.6 is <strong>required</strong>. Python 2 support has\nbeen dropped. Python 3.7 and beyond will be supported when they are released,\nbut 3.6 will probably remain the minimum version. From what I know now of\nfuture Python versions, I don\u2019t plan on requiring any language features beyond\n3.6.</p>\n<p>Supported Python versions:</p>\n<ul>\n<li>Python 3.6 (and later)</li>\n</ul>\n<p>If you need Python 2 support, <tt>atrcopy</tt> 6.5 and earlier supports Python 2.7,\nwhich you can install with <tt>pip install \"atrcopy&lt;7.0\"</tt></p>\n</div>\n<div id=\"dependencies\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Dependencies</a></h3>\n<ul>\n<li>numpy</li>\n</ul>\n<p>It will be automatically installed when installing <tt>atrcopy</tt> with <tt>pip</tt> as\ndescribed below.</p>\n<p>For development, pytest is used to run the test suite, but this is not required\nfor normal installation of <tt>atrcopy</tt>.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Installation</a></h2>\n<p><tt>atrcopy</tt> is available in the <a href=\"https://pypi.python.org/pypi/atrcopy/\" rel=\"nofollow\">PyPI</a>\nand installable using <tt>pip</tt>:</p>\n<pre>pip install atrcopy\n</pre>\n<p>Linux and macOS note: if numpy needs to be installed on your system, it may be\ncompiled from source which can take several minutes.</p>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li>list contents of disk images</li>\n<li>copy files to and from disk images</li>\n<li>delete files from disk images</li>\n<li>create new disk images</li>\n<li>concatenate binary data together into a file on the disk image</li>\n<li>compile assembly source into binary files if <a href=\"https://pypi.python.org/pypi/pyatasm\" rel=\"nofollow\">pyatasm</a> is installed</li>\n</ul>\n<p><strong>Note:</strong> The command line argument structure was changed starting with\n<tt>atrcopy</tt> 4.0 \u2013 it is now based on subcommands, much like <tt>git</tt> uses <tt>git\npull</tt>, <tt>git clone</tt>, <tt>git branch</tt>, etc. Upgrading from a version prior to\n4.0 will require modification of scripts that use <tt>atrcopy</tt> 3.x-style command\nline arguments.</p>\n</div>\n<div id=\"supported-formats\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Supported Formats</a></h2>\n<div id=\"supported-disk-image-types\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Supported Disk Image Types</a></h3>\n<ul>\n<li><tt>XFD</tt>: XFormer images, basically raw disk dumps</li>\n<li><tt>ATR</tt>: Nick Kennedy\u2019s disk image format; includes 16 byte header</li>\n<li><tt>DSK</tt>: Apple ][ DOS 3.3 disk image; raw sector dump</li>\n</ul>\n</div>\n<div id=\"supported-file-system-formats\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Supported File System Formats</a></h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>File System</th>\n<th>Platform</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>DOS 2 (90K)</td>\n<td>Atari 8-bit</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>DOS 2 (180K)</td>\n<td>Atari 8-bit</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>DOS 2.5 (130K)</td>\n<td>Atari 8-bit</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>DOS 3 (130K)</td>\n<td>Atari 8-bit</td>\n<td>No</td>\n<td>No</td>\n<td>Unimplemented</td>\n</tr>\n<tr><td>SpartaDOS</td>\n<td>Atari 8-bit</td>\n<td>No</td>\n<td>No</td>\n<td>Under development</td>\n</tr>\n<tr><td>MyDOS</td>\n<td>Atari 8-bit</td>\n<td>Partial</td>\n<td>No</td>\n<td>Under development</td>\n</tr>\n<tr><td>DOS 3.3</td>\n<td>Apple ][</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>ProDOS 8</td>\n<td>Apple ][</td>\n<td>No</td>\n<td>No</td>\n<td>Unimplemented</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"other-supported-formats\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Other Supported Formats</a></h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Format</th>\n<th>Platform/description</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>.xex</tt></td>\n<td>Atari 8-bit executable files</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>KBoot</td>\n<td>Atari 8-bit <tt>xex</tt> in boot disk</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td><tt>.car</tt></td>\n<td>Atari 8-bit cartridge images</td>\n<td>Yes</td>\n<td>No</td>\n<td>Read only</td>\n</tr>\n<tr><td>BSAVE</td>\n<td>Apple ][ <tt>BSAVE</tt> data</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td><tt>.zip</tt></td>\n<td>MAME ROM zipfiles</td>\n<td>Partial</td>\n<td>No</td>\n<td>Experimental</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note:</strong> Atari ROM cartridges are supported in both both plain binary and\natari800 <tt>.car</tt> format</p>\n</div>\n<div id=\"supported-compression-container-formats\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Supported Compression/Container Formats</a></h3>\n<p>Starting with <tt>atrcopy</tt> 8.0, compressed disk images are supported\ntransparently, so any type of disk image compressed with one of the supported\ncontainer formats can be used directly, without first decompressing it before\nrunning <tt>atrcopy</tt>.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Container</th>\n<th>File Ext</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>gzip</td>\n<td>.gz</td>\n<td>Yes</td>\n<td>No</td>\n<td>Read only</td>\n</tr>\n<tr><td>bzip2</td>\n<td>.bz2</td>\n<td>Yes</td>\n<td>No</td>\n<td>Read only</td>\n</tr>\n<tr><td>lzma</td>\n<td>.xz</td>\n<td>Yes</td>\n<td>No</td>\n<td>Read only</td>\n</tr>\n<tr><td>Disk Communicator</td>\n<td>.dcm</td>\n<td>No</td>\n<td>No</td>\n<td>Recognized but unimplemented</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Usage</a></h2>\n<pre>atrcopy DISK_IMAGE &lt;global options&gt; COMMAND &lt;command options&gt;\n</pre>\n<p>where the available commands include:</p>\n<ul>\n<li><tt>list</tt>: list files on the disk image. This is the default if no command is specified</li>\n<li><tt>create</tt>: create a new disk image</li>\n<li><tt>add</tt>: add files to a disk image</li>\n<li><tt>extract</tt>: copy files from the disk image to the local file system</li>\n<li><tt>assemble</tt>: create a binary file from ATasm source, optionally including segments containing raw binary data</li>\n<li><tt>boot</tt>: create a boot disk using various binary data as input</li>\n<li><tt>delete</tt>: delete files from the disk image</li>\n<li><tt>vtoc</tt>: show and manipulate the VTOC for images that support it</li>\n</ul>\n<p>Except when using the <tt><span class=\"pre\">--help</span></tt> option, the <tt>DISK_IMAGE</tt> is always required\nwhich points to the path on your local file system of the disk image.\n<tt>COMMAND</tt> is one of the commands listed above, and the commands may be\nabbreviated as shown here:</p>\n<pre>$ atrcopy --help\nusage: atrcopy DISK_IMAGE [-h] [-v] [--dry-run] COMMAND ...\n\nManipulate files on several types of 8-bit computer disk images. Type 'atrcopy\nDISK_IMAGE COMMAND --help' for list of options available for each command.\n\npositional arguments:\n  COMMAND\n    list (t,ls,dir,catalog)\n                        List files on the disk image. This is the default if\n                        no command is specified\n    crc                 List files on the disk image and the CRC32 value in\n                        format suitable for parsing\n    extract (x)         Copy files from the disk image to the local filesystem\n    add (a)             Add files to the disk image\n    create (c)          Create a new disk image\n    assemble (s,asm)    Create a new binary file in the disk image\n    boot (b)            Create a bootable disk image\n    delete (rm,del)     Delete files from the disk image\n    vtoc (v)            Show a formatted display of sectors free in the disk\n                        image\n    segments            Show the list of parsed segments in the disk image\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose\n  --dry-run             don't perform operation, just show what would have\n                        happened\n</pre>\n<p>Help for available options for each command is available without specifying a\ndisk image, using a command line like:</p>\n<pre>atrcopy COMMAND --help\n</pre>\n<p>so for example, the help for assembling a binary file is:</p>\n<pre>$ atrcopy asm --help\nusage: atrcopy DISK_IMAGE assemble [-h] [-f] [-s [ASM [ASM ...]]]\n                                   [-d [DATA [DATA ...]]] [-r RUN_ADDR] -o\n                                   OUTPUT\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f, --force           allow file overwrites in the disk image\n  -s [ASM [ASM ...]], --asm [ASM [ASM ...]]\n                        source file(s) to assemble using pyatasm\n  -d [DATA [DATA ...]], -b [DATA [DATA ...]], --data [DATA [DATA ...]]\n                        binary data file(s) to add to assembly, specify as\n                        file@addr. Only a portion of the file may be included;\n                        specify the subset using standard python slice\n                        notation: file[subset]@addr\n  -r RUN_ADDR, --run-addr RUN_ADDR, --brun RUN_ADDR\n                        run address of binary file if not the first byte of\n                        the first segment\n  -o OUTPUT, --output OUTPUT\n                        output file name in disk image\n</pre>\n</div>\n<div id=\"examples\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Examples</a></h2>\n<p>List all files on a disk image:</p>\n<pre>$ atrcopy DOS_25.ATR\nDOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\nFile #0  (.2.u.*) 004 DOS     SYS  037\nFile #1  (.2.u.*) 041 DUP     SYS  042\nFile #2  (.2.u.*) 083 RAMDISK COM  009\nFile #3  (.2.u.*) 092 SETUP   COM  070\nFile #4  (.2.u.*) 162 COPY32  COM  056\nFile #5  (.2.u.*) 218 DISKFIX COM  057\n</pre>\n<p>Extract a file:</p>\n<pre>$ atrcopy DOS_25.ATR extract SETUP.COM\nDOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\nextracting SETUP.COM -&gt; SETUP.COM\n</pre>\n<p>Extract all files:</p>\n<pre>$ atrcopy DOS_25.ATR extract --all\nDOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\nextracting File #0  (.2.u.*) 004 DOS     SYS  037 -&gt; DOS.SYS\nextracting File #1  (.2.u.*) 041 DUP     SYS  042 -&gt; DUP.SYS\nextracting File #2  (.2.u.*) 083 RAMDISK COM  009 -&gt; RAMDISK.COM\nextracting File #3  (.2.u.*) 092 SETUP   COM  070 -&gt; SETUP.COM\nextracting File #4  (.2.u.*) 162 COPY32  COM  056 -&gt; COPY32.COM\nextracting File #5  (.2.u.*) 218 DISKFIX COM  057 -&gt; DISKFIX.COM\n</pre>\n<p>Extract all, using the abbreviated command and converting to lower case on the\nhost file system:</p>\n<pre>$ atrcopy DOS_25.ATR x --all -l\nDOS_25.ATR: ATR Disk Image (size=133120 (1040x128B), crc=0 flags=0 unused=0) Atari DOS Format: 1010 usable sectors (739 free), 6 files\nextracting File #0  (.2.u.*) 004 DOS     SYS  037 -&gt; dos.sys\nextracting File #1  (.2.u.*) 041 DUP     SYS  042 -&gt; dup.sys\nextracting File #2  (.2.u.*) 083 RAMDISK COM  009 -&gt; ramdisk.com\nextracting File #3  (.2.u.*) 092 SETUP   COM  070 -&gt; setup.com\nextracting File #4  (.2.u.*) 162 COPY32  COM  056 -&gt; copy32.com\nextracting File #5  (.2.u.*) 218 DISKFIX COM  057 -&gt; diskfix.com\n</pre>\n<div id=\"creating-disk-images\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Creating Disk Images</a></h3>\n<p>Several template disk images are included in the distribution, and these can be\nused to create blank disk images that subsequent uses of <tt>atrcopy</tt> can\nreference.</p>\n<p>The available disk images can be viewed using <tt>atrcopy create <span class=\"pre\">--help</span></tt>:</p>\n<pre>$ atrcopy create --help\nusage: atrcopy DISK_IMAGE create [-h] [-f] TEMPLATE\n\npositional arguments:\n  TEMPLATE     template to use to create new disk image; see below for list of\n               available built-in templates\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -f, --force  replace disk image file if it exists\n\navailable templates:\n  dos2dd          Atari 8-bit DOS 2 double density (180K), empty VTOC\n  dos2ed          Atari 8-bit DOS 2 enhanced density (130K), empty VTOC\n  dos2ed+2.5      Atari 8-bit DOS 2 enhanced density (130K) DOS 2.5 system disk\n  dos2sd          Atari 8-bit DOS 2 single density (90K), empty VTOC\n  dos2sd+2.0s     Atari 8-bit DOS 2 single density (90K) DOS 2.0S system disk\n  dos33           Apple ][ DOS 3.3 (140K) standard RWTS, empty VTOC\n  dos33autobrun   Apple ][ DOS 3.3 (140K) disk image for binary program\n                  development: HELLO sets fullscreen HGR and calls BRUN on\n                  user-supplied AUTOBRUN binary file\n</pre>\n<p>To create a new image, use:</p>\n<pre>$ atrcopy game.dsk create dos33autobrun\n</pre>\n<p>which will create a new file called <tt>game.dsk</tt> based on the <tt>dos33autobrun</tt>\nimage.</p>\n<p><tt>dos33autobrun</tt> is a special image that can be used to create autoloading\nbinary programs. It contains an Applesoft Basic file called <tt>HELLO</tt> which\nwill autoload on boot. It sets the graphics mode to fullscreen hi-res graphics\n(the first screen at $2000) and executes a <tt>BRUN</tt> command to start a binary\nfile named <tt>AUTOBRUN</tt>. <tt>AUTOBRUN</tt> doesn\u2019t exist in the image, it\u2019s for you\nto supply.</p>\n</div>\n<div id=\"creating-a-custom-boot-disk\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Creating a Custom Boot Disk</a></h3>\n<p>Blocks of binary data can be combined into a boot disk in either ATR format for\nAtari or DSK format for Apple:</p>\n<pre>$ atrcopy boot --help\nusage: atrcopy DISK_IMAGE boot [-h] [-f] [-s [ASM [ASM ...]]]\n                               [-d [DATA [DATA ...]]] [-b [OBJ [OBJ ...]]]\n                               [-r RUN_ADDR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f, --force           allow file overwrites in the disk image\n  -s [ASM [ASM ...]], --asm [ASM [ASM ...]]\n                        source file(s) to assemble using pyatasm\n  -d [DATA [DATA ...]], --data [DATA [DATA ...]]\n                        binary data file(s) to add to assembly, specify as\n                        file@addr. Only a portion of the file may be included;\n                        specify the subset using standard python slice\n                        notation: file[subset]@addr\n  -b [OBJ [OBJ ...]], --obj [OBJ [OBJ ...]], --bload [OBJ [OBJ ...]]\n                        binary file(s) to add to assembly, either executables\n                        or labeled memory dumps (e.g. BSAVE on Apple ][),\n                        parsing each file's binary segments to add to the\n                        resulting disk image at the load address for each\n                        segment\n  -r RUN_ADDR, --run-addr RUN_ADDR, --brun RUN_ADDR\n                        run address of binary file if not the first byte of\n                        the first segment\n</pre>\n<p>One of <tt><span class=\"pre\">-s</span></tt>, <tt><span class=\"pre\">-d</span></tt>, or <tt><span class=\"pre\">-b</span></tt> must be speficied to provide the source for\nthe boot disk. The <tt><span class=\"pre\">-b</span></tt> argument can take an Atari binary in XEX format, and\nwill properly handle multiple segments within that file. If no starting address\nis supplied (or, if using an XEX, to override the start address normally\ncontained within the XEX), use the <tt><span class=\"pre\">-r</span></tt> option. Otherwise, the run address\nwill point to the first byte of the first binary segment.</p>\n</div>\n<div id=\"creating-programs-on-the-disk-image\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Creating Programs on the Disk Image</a></h3>\n<p>The simple assembler included in <tt>atrcopy</tt> can create binary programs by\nconnecting binary data together in a single file and specifying a start address\nso it can be executed by the system\u2019s binary run command.</p>\n<p>It is also possible to assemble text files that use the MAC/65 syntax, because\nsupport for <a href=\"https://pypi.python.org/pypi/pyatasm\" rel=\"nofollow\">pyatasm</a> is built-in (but\noptional). MAC/65 is a macro assembler originally designed for the Atari 8-bit\nmachines but since it produces 6502 code it can be used to compile for any\nmachine that uses the 6502: Apple, Commodore, etc.</p>\n<div id=\"creating-atari-8-bit-executables\">\n<h4><a href=\"#id18\" rel=\"nofollow\">Creating Atari 8-bit Executables</a></h4>\n<p>Atari 8-bit object files include a small header and an arbitrary number of\nsegments. Each segment defines a contiguous block of data with a start and end\naddress. If the file has multiple segments, they will be processed in the order\nthey appear in the file, not by segment start address.</p>\n<p>This example creates a new <tt>xex</tt> on a disk that combines the segments of an\nalready existing executable with some new assembly code.</p>\n<p>After creating the test image with:</p>\n<pre>$ atrcopy test.atr create dos2sd\nusing dos2sd template:\n  Atari 8-bit DOS 2 single density (90K), empty VTOC\ncreated test.atr: ATR Disk Image (size=92160 (720x128B), crc=0 flags=0 unused=0) Atari DOS Format: 707 usable sectors (707 free), 0 files\n</pre>\n<p>this command compiles the file <tt>test_header.s</tt> and prefixes it to the\nexisting executable:</p>\n<pre>$ atrcopy test.atr asm -s test_header.s -b air_defense_v18.xex -o test.xex -f\ntest.atr: ATR Disk Image (size=92160 (720x128B), crc=0 flags=0 unused=0) Atari DOS Format: 707 usable sectors (707 free), 0 files\nfname: test_header.s\nPass 1: Success. (0 warnings)\nPass 2:\nadding 0600 - 0653, size=0053 ($53 bytes @ 0600) from test_header.s assembly\nadding 02e2 - 02e4, size=0002 ($2 bytes @ 02e2) from test_header.s assembly\nadding  $02e0-$02e2 ($0002 @ $0006) from air_defense_v18.xex\nadding  $6000-$6bd4 ($0bd4 @ $000c) from air_defense_v18.xex\ntotal file size: $c3d (3133) bytes\ncopying test.xex to test.atr\n</pre>\n</div>\n<div id=\"creating-dos-3-3-binaries\">\n<h4><a href=\"#id19\" rel=\"nofollow\">Creating DOS 3.3 Binaries</a></h4>\n<p>For this example, the goal is to produce a single binary file that combines a\nhi-res image <tt>title.bin</tt> loaded at 2000 hex (the first hi-res screen) and\ncode at 6000 hex from the binary file <tt>game</tt>, with a start address of 6000\nhex.</p>\n<p>The binary file <tt>game</tt> was assembled using the assembler from the\n<a href=\"https://github.com/cc65/cc65\" rel=\"nofollow\">cc65</a> project, using the command:</p>\n<pre>cl65 -t apple2 --cpu 6502 --start-addr 0x6000 -o game game.s\n</pre>\n<p>Because the Apple ][ binary format is limited to a single contiguous block of\ndata with a start address of the first byte of data loaded, <tt>atrcopy</tt> will\nfill the gaps between any segments that aren\u2019t contiguous with zeros. If the\nstart address is not the first byte of the first specified segment, a small\nsegment will be included at the beginning that jumps to the specified <tt>brun</tt>\naddress (shown here as the segment from 1ffd - 2000). Note the gap between 4000\nand 6000 hex will be filled with zeros:</p>\n<pre>$ atrcopy game.dsk create dos33autobrun\nusing dos33autobrun template:\n  Apple ][ DOS 3.3 (140K) disk image for binary program development: HELLO sets\n  fullscreen HGR and calls BRUN on user-supplied AUTOBRUN binary file\ncreated game.dsk: DOS 3.3 Disk Image (size=143360 (560x256b)\nFile #0  ( A) 002 HELLO                          003 001\n\n$ atrcopy game.dsk asm -d title.bin@2000 -b game --brun 6000 -f -o AUTOBRUN\ngame.dsk: DOS 3.3 Disk Image (size=143360 (560x256b)\nadding BSAVE data $6000-$6ef3 ($0ef3 @ $0004) from game\nsetting data for $1ffd - $2000 at index $0004\nsetting data for $2000 - $4000 at index $0007\nsetting data for $6000 - $6ef3 at index $4007\ntotal file size: $4efa (20218) bytes\ncopying AUTOBRUN to game.dsk\n</pre>\n</div>\n</div>\n<div id=\"example-on-macos\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Example on macOS</a></h3>\n<p>macOS supplies python with the operating system so you shouldn\u2019t need to\ninstall a framework version from python.org.</p>\n<p>To prevent overwriting important system files, it\u2019s best to create a working\nfolder: a new empty folder somewhere and do all your testing in that folder.\nFor this example, create a folder called <tt>atrtest</tt> in your <tt>Documents</tt>\nfolder.  Put a few disk images in this directory to use for testing.</p>\n<p>Since this is a command line program, you must get to a command line prompt.\nStart a Terminal by double clicking on Terminal.app in the\n<tt>Applications/Utilities</tt> folder in the Finder.  When Terminal opens, it will\nput you in your home folder automatically.  Go to the <tt>atrtest</tt> folder by\ntyping:</p>\n<pre>cd Documents/atrtest\n</pre>\n<p>You can see the ATR images you placed in this directory by using the\ncommand:</p>\n<pre>ls -l\n</pre>\n<p>For example, you might see:</p>\n<pre>mac:~/Documents/atrtest $ ls -l\n-rw-r--r-- 1 rob  staff  92176 May 18 21:57 GAMES1.ATR\n</pre>\n<p>Now, run the program by typing <tt>atrcopy GAMES1.ATR</tt> and you should\nsee the contents of the <tt>ATR</tt> image in the familiar Atari DOS format:</p>\n<pre>mac:~/Documents/atrtest $ atrcopy GAMES1.ATR\nGAMES1.ATR: ATR Disk Image (size=92160 (720x128B), crc=0 flags=0 unused=0) Atari DOS Format: 707 usable sectors (17 free), 9 files\nFile #0  (.2.u.*) 004 DOS     SYS  039\nFile #1  (.2.u.*) 043 MINER2       138\nFile #2  (.2.u.*) 085 DEFENDER     132\nFile #3  (.2.u.*) 217 CENTIPEDE    045\nFile #4  (.2.u.*) 262 GALAXIAN     066\nFile #5  (.2.u.*) 328 AUTORUN SYS  005\nFile #6  (.2.u.*) 439 DIGDUG       133\nFile #7  (.2.u.*) 531 ANTEATER     066\nFile #8  (.2.u.*) 647 ASTEROIDS    066\n</pre>\n<p>See other examples as above.</p>\n</div>\n</div>\n<div id=\"references\">\n<h2><a href=\"#id21\" rel=\"nofollow\">References</a></h2>\n<ul>\n<li><a href=\"http://www.atariarchives.org/dere/chapt09.php\" rel=\"nofollow\">http://www.atariarchives.org/dere/chapt09.php</a></li>\n<li><a href=\"http://atari.kensclassics.org/dos.htm\" rel=\"nofollow\">http://atari.kensclassics.org/dos.htm</a></li>\n<li><a href=\"http://www.crowcastle.net/preston/atari/\" rel=\"nofollow\">http://www.crowcastle.net/preston/atari/</a></li>\n<li><a href=\"http://www.atarimax.com/jindroush.atari.org/afmtatr.html\" rel=\"nofollow\">http://www.atarimax.com/jindroush.atari.org/afmtatr.html</a></li>\n<li><a href=\"https://archive.org/details/Beneath_Apple_DOS_OCR\" rel=\"nofollow\">https://archive.org/details/Beneath_Apple_DOS_OCR</a></li>\n</ul>\n<div id=\"related-atari-projects\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Related Atari Projects</a></h3>\n<ul>\n<li><a href=\"http://atari8.sourceforge.net/franny.html\" rel=\"nofollow\">franny</a>: (C, macOS/linux) Command line program to manage Atari DOS 2 and SpartaDOS II image and file systems</li>\n<li><a href=\"http://www.horus.com/~hias/atari/\" rel=\"nofollow\">dir2atr</a>: (Win) Suite of command line programs to manage Atari disk images and DOS 2/MyDOS file systems</li>\n<li><a href=\"http://raster.infos.cz/atari/forpc/atadim.htm\" rel=\"nofollow\">atadim</a>: (Win) Graphical program to manage Atari disk images and DOS 2/MyDOS file systems</li>\n</ul>\n</div>\n<div id=\"related-apple-projects\">\n<h3><a href=\"#id23\" rel=\"nofollow\">Related Apple Projects</a></h3>\n<p>Turns out there are a ton of Apple ][ disk image viewers and editors! I was pointed to the list from the <a href=\"https://github.com/zellyn/diskii\" rel=\"nofollow\">diskii project</a>, so I\u2019ve included most of that list here.</p>\n<ul>\n<li><a href=\"https://github.com/jtauber/a2disk\" rel=\"nofollow\">a2disk</a> (Python 3) DOS 3.3 reader and Applesoft BASIC detokenizer</li>\n<li><a href=\"https://github.com/RasppleII/a2server/blob/master/scripts/tools/cppo\" rel=\"nofollow\">cppo</a> (Python) a script from the <a href=\"http://ivanx.com/a2server/\" rel=\"nofollow\">a2server</a> project to read DOS 3.3 and ProDOS disk images</li>\n<li><a href=\"https://github.com/thecompu/Driv3rs\" rel=\"nofollow\">Driv3rs</a> (Python) Apple III SOS DSK image utility</li>\n<li><a href=\"https://github.com/datajerk/c2d\" rel=\"nofollow\">c2d</a>: (C, Win/macOS/linux) Command line program to create bootable Apple disk images (no file system)</li>\n<li><a href=\"http://applecommander.sourceforge.net/\" rel=\"nofollow\">Apple Commander</a>: (Java) Command line program to manage Apple disk images and file systems</li>\n<li><a href=\"http://a2ciderpress.com/\" rel=\"nofollow\">Cider Press</a>: (Win) Graphical program to manage Apple disk images and file systems</li>\n<li><a href=\"https://github.com/zellyn/diskii\" rel=\"nofollow\">diskii</a>: (Go) Command line tool, under development</li>\n<li><a href=\"http://brutaldeluxe.fr/products/crossdevtools/cadius/index.html\" rel=\"nofollow\">Cadius</a> (Win) Brutal Deluxe\u2019s commandline tools</li>\n<li><a href=\"https://github.com/cybernesto/dsktool.rb\" rel=\"nofollow\">dsktool</a> (Ruby)</li>\n<li><a href=\"https://github.com/cmosher01/Apple-II-Disk-Tools\" rel=\"nofollow\">Apple II Disk Tools</a> (C)</li>\n<li><a href=\"https://github.com/madsen/perl-libA2\" rel=\"nofollow\">libA2</a> (Perl)</li>\n<li><a href=\"https://github.com/markdavidlong/AppleSAWS\" rel=\"nofollow\">AppleSAWS</a> (Qt, Win/macOS/linux) very cool looking GUI</li>\n<li><a href=\"https://github.com/dmolony/DiskBrowser\" rel=\"nofollow\">DiskBrowser</a> (Java) GUI tool that even displays Wizardry levels and VisiCalc files!</li>\n<li><a href=\"https://github.com/deater/dos33fsprogs\" rel=\"nofollow\">dos33fsprogs</a> (C)</li>\n<li><a href=\"https://github.com/slotek/apple2-disk-util\" rel=\"nofollow\">apple2-disk-util</a> (Ruby)</li>\n<li><a href=\"https://github.com/slotek/dsk2nib\" rel=\"nofollow\">dsk2nib</a> (C)</li>\n<li><a href=\"https://github.com/peterferrie/standard-delivery\" rel=\"nofollow\">standard-delivery</a> (6502 assembly) Apple II single-sector fast boot-loader</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4305682, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4ac9722844390428be8254147c4e6056", "sha256": "f19f6ad7b44c8f7df336098edc231b50d46d2d52e8db9550a690d2a226e06974"}, "downloads": -1, "filename": "atrcopy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4ac9722844390428be8254147c4e6056", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13980, "upload_time": "2015-09-27T03:21:16", "upload_time_iso_8601": "2015-09-27T03:21:16.530099Z", "url": "https://files.pythonhosted.org/packages/02/ce/372ad71763c13b9c6c3b1e45a9728a626ff9bc4f2c137c1a10575b6329c8/atrcopy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "824b85c940e2c992a814f0f5962b9fcb", "sha256": "38eda103ffc70b7d590e8e1aae3381ecfef295b5567c1e1528badb5793a6d918"}, "downloads": -1, "filename": "atrcopy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "824b85c940e2c992a814f0f5962b9fcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14072, "upload_time": "2015-10-09T17:15:35", "upload_time_iso_8601": "2015-10-09T17:15:35.451285Z", "url": "https://files.pythonhosted.org/packages/d5/a3/ee7f4d08c88c789de1cb955c5ab05396138a83c1cdf69fb21bc188384674/atrcopy-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "508b09e11df088ef79a775b8c89198b8", "sha256": "b7d93f93f04382bb007aadc231496c844ce3294618451982ab39c390a8367d81"}, "downloads": -1, "filename": "atrcopy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "508b09e11df088ef79a775b8c89198b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14413, "upload_time": "2015-10-26T05:38:56", "upload_time_iso_8601": "2015-10-26T05:38:56.531516Z", "url": "https://files.pythonhosted.org/packages/7a/61/99459b2e22a70bd44c11eb5ec6f322cba033f15f7db74e69c9e4f8c437cb/atrcopy-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "a6a5d9aa6e53b26563e4600055023a43", "sha256": "1763a2f1764d5131e8301ccbe8cef259b634375f28f2b43380bb6325a99551bd"}, "downloads": -1, "filename": "atrcopy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "a6a5d9aa6e53b26563e4600055023a43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14480, "upload_time": "2015-11-03T23:28:27", "upload_time_iso_8601": "2015-11-03T23:28:27.146595Z", "url": "https://files.pythonhosted.org/packages/82/09/c96f9e35819009b58ec22489cceafb2d8c4c4af99d825de673eee245f655/atrcopy-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bad2a902bd20e4a12706b0d532bdc86c", "sha256": "04395ccfdf3e5a9c14658d5aa316c5b6e2b915ea7507ff061bfe94dae9d3a8e7"}, "downloads": -1, "filename": "atrcopy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bad2a902bd20e4a12706b0d532bdc86c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14765, "upload_time": "2015-12-15T00:00:06", "upload_time_iso_8601": "2015-12-15T00:00:06.272692Z", "url": "https://files.pythonhosted.org/packages/c4/e2/2e962b0b750dd3aecaf1e77457ae6933addfade821f1c96e31381843401f/atrcopy-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "8c77cca9a15befd5f53df00f56bfc0c4", "sha256": "423b40416c5aba5c813caa15e1971fcc558878af0fe109fa053cb7a6c9d1111c"}, "downloads": -1, "filename": "atrcopy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "8c77cca9a15befd5f53df00f56bfc0c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14866, "upload_time": "2015-12-23T03:58:11", "upload_time_iso_8601": "2015-12-23T03:58:11.581490Z", "url": "https://files.pythonhosted.org/packages/45/02/bbdd20566db04ec6179e19d011159f6f0ca30048bbb9586556248fec3e52/atrcopy-1.3.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "7286e2199b0a27da25ff32f1336db521", "sha256": "5f98153d2928d3807cb155f1bf240ee1f467f12771ab5f9764e9c9e5d772668a"}, "downloads": -1, "filename": "atrcopy-2.0.0.tar.gz", "has_sig": false, "md5_digest": "7286e2199b0a27da25ff32f1336db521", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18261, "upload_time": "2016-02-08T22:09:31", "upload_time_iso_8601": "2016-02-08T22:09:31.413593Z", "url": "https://files.pythonhosted.org/packages/14/21/b9e7197d0b28475e91ef8e939e1cf16410bf9feeb5edc2971b5867a341e3/atrcopy-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "9be33c9861d45ce73b6a27c0fae8156f", "sha256": "bff605945acf8e62d4011a4d9d4088fd18f03a211a4ef3ff2a089d4cb749017b"}, "downloads": -1, "filename": "atrcopy-2.0.1.tar.gz", "has_sig": false, "md5_digest": "9be33c9861d45ce73b6a27c0fae8156f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18106, "upload_time": "2016-02-08T22:48:26", "upload_time_iso_8601": "2016-02-08T22:48:26.877028Z", "url": "https://files.pythonhosted.org/packages/7f/36/2c526814a993552cf8068d0096ace33a10d6d91e8440df2a6f14a600752e/atrcopy-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "d5570e2dbda37416284292475f77c170", "sha256": "28c93987162e0ab62b0c2bf93fdc69ba6a27a8ad28db5e957ad1b395a6476493"}, "downloads": -1, "filename": "atrcopy-2.1.0.tar.gz", "has_sig": false, "md5_digest": "d5570e2dbda37416284292475f77c170", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18484, "upload_time": "2016-02-09T18:47:06", "upload_time_iso_8601": "2016-02-09T18:47:06.492750Z", "url": "https://files.pythonhosted.org/packages/9e/d4/d163ddde0f0737702b4112c54be0b893db2cd08e4f312c5c9bc0761edb6f/atrcopy-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "b61512ad7c2caf0688865ed3bdde3dc6", "sha256": "154593deb538696fc5803be47284618ee1b94efdc95e58724f50744556e44089"}, "downloads": -1, "filename": "atrcopy-2.1.1.tar.gz", "has_sig": false, "md5_digest": "b61512ad7c2caf0688865ed3bdde3dc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18625, "upload_time": "2016-02-10T19:31:04", "upload_time_iso_8601": "2016-02-10T19:31:04.698774Z", "url": "https://files.pythonhosted.org/packages/81/9e/4abba0a9f47ffc3937d9a93dab22127362bb7723b33909c963219e3b3ce8/atrcopy-2.1.1.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "909d06290b900e23d74e6329d7cb7f82", "sha256": "a73fdc4682a577613e1121de4be37a98b92b0cdd819ec7ba35c1215a66ce433a"}, "downloads": -1, "filename": "atrcopy-2.3.0.tar.gz", "has_sig": false, "md5_digest": "909d06290b900e23d74e6329d7cb7f82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21026, "upload_time": "2016-02-16T05:59:08", "upload_time_iso_8601": "2016-02-16T05:59:08.277316Z", "url": "https://files.pythonhosted.org/packages/60/14/a12679c48dd93485cc1fbca82f70da8c4d76df01cc8dc0e3011ccc833cbd/atrcopy-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "e4dcc466da510fffc9cf490124d16bdb", "sha256": "1a7a0d79bbf42202ee51d2879efdc841728a0ba9f7e6d1ad867ab270c142bf41"}, "downloads": -1, "filename": "atrcopy-2.3.1.tar.gz", "has_sig": false, "md5_digest": "e4dcc466da510fffc9cf490124d16bdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21268, "upload_time": "2016-02-16T06:01:12", "upload_time_iso_8601": "2016-02-16T06:01:12.248465Z", "url": "https://files.pythonhosted.org/packages/c1/e1/c585248344bd47fbcffa27b9539ecbe0653cbd1c8b317c7f8959bd432231/atrcopy-2.3.1.tar.gz", "yanked": false}], "2.3.2": [{"comment_text": "", "digests": {"md5": "3e88de4861df84aa7ac0a6c3a5e04381", "sha256": "0ae6a8b72bea2bf7aac5c90f831d2ab9af6fb9387d9c66a36d95e7e6ba2f7429"}, "downloads": -1, "filename": "atrcopy-2.3.2.tar.gz", "has_sig": false, "md5_digest": "3e88de4861df84aa7ac0a6c3a5e04381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21326, "upload_time": "2016-02-18T19:47:55", "upload_time_iso_8601": "2016-02-18T19:47:55.060526Z", "url": "https://files.pythonhosted.org/packages/00/88/188c58337956fcfc173ea8e7922afe80c7771e0fd09430ad2e06be4da252/atrcopy-2.3.2.tar.gz", "yanked": false}], "2.3.3": [{"comment_text": "", "digests": {"md5": "69959acd5c4b8f3cd07d1ae778870022", "sha256": "0d778050a306802f9026842caffed7f02dc34914a7ccfbd6c3da229570f7c7c2"}, "downloads": -1, "filename": "atrcopy-2.3.3.tar.gz", "has_sig": false, "md5_digest": "69959acd5c4b8f3cd07d1ae778870022", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21451, "upload_time": "2016-03-02T22:30:51", "upload_time_iso_8601": "2016-03-02T22:30:51.570233Z", "url": "https://files.pythonhosted.org/packages/32/86/1cfcf5775593329e37c6f6c2405d4593d2be604a9f980b87d017ca4316d0/atrcopy-2.3.3.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "47f36fcf22e01f01122e141f9b1b1757", "sha256": "76c15ad4ee32bc0ab45632c00b51139cd2b25cf8a6dc4c7ba5bca71377c9ef0d"}, "downloads": -1, "filename": "atrcopy-2.4.0.tar.gz", "has_sig": false, "md5_digest": "47f36fcf22e01f01122e141f9b1b1757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22027, "upload_time": "2016-03-07T06:27:32", "upload_time_iso_8601": "2016-03-07T06:27:32.828230Z", "url": "https://files.pythonhosted.org/packages/d2/b2/78eea9f33d9d6bfc0feb712ec54a6a10c478f326b196a72c4c9c592ee41b/atrcopy-2.4.0.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "8bf2332a3a1e6130240b099686ed5052", "sha256": "8f6abb88cdbe95cf08bcc0b2ae828105da39f3732361073a274e6b3dff6ca478"}, "downloads": -1, "filename": "atrcopy-2.5.0.tar.gz", "has_sig": false, "md5_digest": "8bf2332a3a1e6130240b099686ed5052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23499, "upload_time": "2016-04-08T02:13:56", "upload_time_iso_8601": "2016-04-08T02:13:56.373221Z", "url": "https://files.pythonhosted.org/packages/9c/81/4512e5766560d44b104a074f537c6565169dab61b22929d32f87ca6803a8/atrcopy-2.5.0.tar.gz", "yanked": false}], "2.5.1": [{"comment_text": "", "digests": {"md5": "b017f341671bb1a9024509ce09ed55d1", "sha256": "4561f6c5c252fa96ef0b37b4f7cc7f283be5c63f0bad3025261199e4a41f67f6"}, "downloads": -1, "filename": "atrcopy-2.5.1.tar.gz", "has_sig": false, "md5_digest": "b017f341671bb1a9024509ce09ed55d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23572, "upload_time": "2016-04-11T22:03:20", "upload_time_iso_8601": "2016-04-11T22:03:20.828527Z", "url": "https://files.pythonhosted.org/packages/51/00/947520f2f8e6137943dd9efa379844de3d3ebb7a58cff8cded7d0137e4b8/atrcopy-2.5.1.tar.gz", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "209a14bad8588798bc0a2a016a2b61a7", "sha256": "b59f24257b71f7d6c3091088e3ee20312f0890f3fa53a8823edb6984ec205ba4"}, "downloads": -1, "filename": "atrcopy-2.6.0.tar.gz", "has_sig": false, "md5_digest": "209a14bad8588798bc0a2a016a2b61a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24066, "upload_time": "2016-04-13T00:14:35", "upload_time_iso_8601": "2016-04-13T00:14:35.338031Z", "url": "https://files.pythonhosted.org/packages/4a/7b/d8ed241f3ffb3dccee1ee1dcb977c4bca855416d2f0825778f324753d4a3/atrcopy-2.6.0.tar.gz", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "db90b325c320b47f7114ec0ce89b36c4", "sha256": "66f5a9a45891f8e46b8ea51c435c8f55f6ec2a270fccf314a3943b8eebd9f0a5"}, "downloads": -1, "filename": "atrcopy-2.6.1.tar.gz", "has_sig": false, "md5_digest": "db90b325c320b47f7114ec0ce89b36c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24089, "upload_time": "2016-04-13T00:54:50", "upload_time_iso_8601": "2016-04-13T00:54:50.056748Z", "url": "https://files.pythonhosted.org/packages/ac/a7/9fb53e2e5548e482ef20bb55f6c893eee84ad371b760b0c46b7721f8d2ab/atrcopy-2.6.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "dd670a5ae5fd36e0638fac1cd739f86c", "sha256": "595097e9207f68d11d78bf34d8e88c53c13942d032615bb25de241a1524d7e09"}, "downloads": -1, "filename": "atrcopy-3.0.0.tar.gz", "has_sig": false, "md5_digest": "dd670a5ae5fd36e0638fac1cd739f86c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36832, "upload_time": "2016-06-03T21:10:19", "upload_time_iso_8601": "2016-06-03T21:10:19.507366Z", "url": "https://files.pythonhosted.org/packages/48/a3/49db8f6d184101d5b1d6ed07cad5f2e7bca9673398d91b006296364e5646/atrcopy-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "4d86d98b414d0870dd9a2da16e76ca25", "sha256": "10ea45c421878e6c2f24b1317df36cddecbc798224039c5b199addc2ddcd2d48"}, "downloads": -1, "filename": "atrcopy-3.0.1.tar.gz", "has_sig": false, "md5_digest": "4d86d98b414d0870dd9a2da16e76ca25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36887, "upload_time": "2016-06-03T23:17:09", "upload_time_iso_8601": "2016-06-03T23:17:09.251573Z", "url": "https://files.pythonhosted.org/packages/62/d3/eac7a25a839df2f5ca922dfb3381a3fea07a751a4fdc7073fc8350180558/atrcopy-3.0.1.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "b764074011360b0691ea567f44002206", "sha256": "7aeaf7cb909328c8b9c2e7055266c8250a80fbd1d83859436dc675f6c47de716"}, "downloads": -1, "filename": "atrcopy-3.1.0.tar.gz", "has_sig": false, "md5_digest": "b764074011360b0691ea567f44002206", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36345, "upload_time": "2016-07-29T02:56:56", "upload_time_iso_8601": "2016-07-29T02:56:56.446796Z", "url": "https://files.pythonhosted.org/packages/e7/26/3b4dc90547413374168eb5764ef368a3e86ae2e9c38794a1962cbfbd1c9a/atrcopy-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "e15c276e12501346df08e2c52621aa78", "sha256": "1b1bb35d26f48cce978703245c2af3332620f65dbb519eb2b974d82936d9fd80"}, "downloads": -1, "filename": "atrcopy-3.1.1.tar.gz", "has_sig": false, "md5_digest": "e15c276e12501346df08e2c52621aa78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36374, "upload_time": "2016-09-22T18:04:18", "upload_time_iso_8601": "2016-09-22T18:04:18.579744Z", "url": "https://files.pythonhosted.org/packages/28/86/614058a65b6891df93e54ed3471e79d25dd717f92844b49fe6bdb2ee8bca/atrcopy-3.1.1.tar.gz", "yanked": false}], "3.1.2": [{"comment_text": "", "digests": {"md5": "d3b4bf40f9ac3105788678e34aa2e373", "sha256": "59bd5d7606d3bb7f9b2c02e9203241caf9c8b17289d3983c7f91e392369ec713"}, "downloads": -1, "filename": "atrcopy-3.1.2.tar.gz", "has_sig": false, "md5_digest": "d3b4bf40f9ac3105788678e34aa2e373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36462, "upload_time": "2016-10-02T01:43:42", "upload_time_iso_8601": "2016-10-02T01:43:42.651480Z", "url": "https://files.pythonhosted.org/packages/d3/d6/93e2c73b912ee1369edc079503de25b2501f438f69648d5df8c3e90d6e14/atrcopy-3.1.2.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "51708ef9dac038858a4fd510a99cb72f", "sha256": "34a2e065713380960c847a61f5a93650f70a1b6ca767bc4db883c0ab979945cd"}, "downloads": -1, "filename": "atrcopy-3.2.0.tar.gz", "has_sig": false, "md5_digest": "51708ef9dac038858a4fd510a99cb72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39917, "upload_time": "2017-01-06T07:50:57", "upload_time_iso_8601": "2017-01-06T07:50:57.299012Z", "url": "https://files.pythonhosted.org/packages/c5/f2/89e969aafe9eb331ce9f2a79001cc70fc34bfd7595c37a89863c0113d263/atrcopy-3.2.0.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "865952c628ec99e90a63f0f1e81a0553", "sha256": "cc7a820fabb716424fca72e574e52d46b91941046d0c1995c619a7828bd78f7c"}, "downloads": -1, "filename": "atrcopy-3.3.0.tar.gz", "has_sig": false, "md5_digest": "865952c628ec99e90a63f0f1e81a0553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40355, "upload_time": "2017-02-08T03:58:41", "upload_time_iso_8601": "2017-02-08T03:58:41.781139Z", "url": "https://files.pythonhosted.org/packages/34/85/e098e96b297ce284449065105b500125eb736d93d846f6fdba9bc0c339ac/atrcopy-3.3.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "7c74f2661e457cfcac3771fb0bf86338", "sha256": "9a57efe86a6e0917ab01f5de65db15a9f19d38a27469c5566cae4913c6351b69"}, "downloads": -1, "filename": "atrcopy-4.0.0.tar.gz", "has_sig": false, "md5_digest": "7c74f2661e457cfcac3771fb0bf86338", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237135, "upload_time": "2017-05-07T05:59:16", "upload_time_iso_8601": "2017-05-07T05:59:16.415346Z", "url": "https://files.pythonhosted.org/packages/9b/40/f15c095894fee18643fa705d5eda516cdfb426798aec701e55d9b7f8ada5/atrcopy-4.0.0.tar.gz", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "a8b5ce22b16adda4a80fd5e7a6660a03", "sha256": "d82ef896b34531ac3a26936e62806513eb73236f323dd30dd48c5353bdf12d28"}, "downloads": -1, "filename": "atrcopy-5.0.0.tar.gz", "has_sig": false, "md5_digest": "a8b5ce22b16adda4a80fd5e7a6660a03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 238805, "upload_time": "2017-05-09T05:35:12", "upload_time_iso_8601": "2017-05-09T05:35:12.381372Z", "url": "https://files.pythonhosted.org/packages/28/66/c855d29b3bf3eec9d5052bf91ccce96d43239e37d22b7bfe6f4780b825d4/atrcopy-5.0.0.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "06f5cdfb8613a8192a397f45f813f1fb", "sha256": "6098585f105d099bb62d4dfa494ad8ecee3007166effb8c64df4afcd4ff84861"}, "downloads": -1, "filename": "atrcopy-5.1.0.tar.gz", "has_sig": false, "md5_digest": "06f5cdfb8613a8192a397f45f813f1fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 242429, "upload_time": "2017-05-20T06:15:59", "upload_time_iso_8601": "2017-05-20T06:15:59.827668Z", "url": "https://files.pythonhosted.org/packages/aa/db/04d20d6c833e93293a3969d99d107a270d0bc7b59f515ab82ffd4525a248/atrcopy-5.1.0.tar.gz", "yanked": false}], "6.0.0": [{"comment_text": "", "digests": {"md5": "2f7ea690ba8bebc0ceb3ec0320218b49", "sha256": "c230a21be99965350142452a8685058d12ee7065cc8c4287d14cda43af8c6ee1"}, "downloads": -1, "filename": "atrcopy-6.0.0.tar.gz", "has_sig": false, "md5_digest": "2f7ea690ba8bebc0ceb3ec0320218b49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251078, "upload_time": "2017-08-31T15:59:06", "upload_time_iso_8601": "2017-08-31T15:59:06.431692Z", "url": "https://files.pythonhosted.org/packages/ad/6f/caffd82e1fe7e3ecb68e0e34ebb44b338306a500c349e90efcde7bae6d25/atrcopy-6.0.0.tar.gz", "yanked": false}], "6.1.0": [{"comment_text": "", "digests": {"md5": "e5080add1573804f42223248859d26a2", "sha256": "969fafbfdec68ae422895859edba13d2e538f134ec48e27b10ec1fae74797c8f"}, "downloads": -1, "filename": "atrcopy-6.1.0.tar.gz", "has_sig": false, "md5_digest": "e5080add1573804f42223248859d26a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251085, "upload_time": "2017-09-28T18:27:18", "upload_time_iso_8601": "2017-09-28T18:27:18.007477Z", "url": "https://files.pythonhosted.org/packages/16/38/16b96ff80b4c2b7d09fd2224984ee8f3a8a9bedd4a5e6bd28218e19a05da/atrcopy-6.1.0.tar.gz", "yanked": false}], "6.2.0": [{"comment_text": "", "digests": {"md5": "adb29b7ef677ad331f225b219dd1fe6a", "sha256": "f0c8a247d36d61939e5776085fe2b65e40cfdb76e252dfc31df7f40acb64f2af"}, "downloads": -1, "filename": "atrcopy-6.2.0.tar.gz", "has_sig": false, "md5_digest": "adb29b7ef677ad331f225b219dd1fe6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251179, "upload_time": "2017-10-02T18:15:35", "upload_time_iso_8601": "2017-10-02T18:15:35.760478Z", "url": "https://files.pythonhosted.org/packages/60/08/6e2720888d4d60edc9f68abb321589367bf8b50a29b41df343d9232a3a04/atrcopy-6.2.0.tar.gz", "yanked": false}], "6.5.0": [{"comment_text": "", "digests": {"md5": "e58b0bd4ad8638da29be4462609ce41f", "sha256": "b9b99961eeba250d7d1e3cee9721867240b2f7255d17c89a8bc5294a9ebb8427"}, "downloads": -1, "filename": "atrcopy-6.5.0.tar.gz", "has_sig": false, "md5_digest": "e58b0bd4ad8638da29be4462609ce41f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257242, "upload_time": "2018-03-09T19:33:19", "upload_time_iso_8601": "2018-03-09T19:33:19.211484Z", "url": "https://files.pythonhosted.org/packages/ff/54/964487f2973058910e6f6e46717c1e7f16fd3c21aa5e43355905a3a8f362/atrcopy-6.5.0.tar.gz", "yanked": false}], "7.0": [{"comment_text": "", "digests": {"md5": "9478b1b32ad5d2b188cb5e06b33adf03", "sha256": "ab1fa63f28fa8c48930bb55856c3c97252972e8eb1e80210144f478fba25454f"}, "downloads": -1, "filename": "atrcopy-7.0.tar.gz", "has_sig": false, "md5_digest": "9478b1b32ad5d2b188cb5e06b33adf03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 258831, "upload_time": "2018-06-24T03:01:27", "upload_time_iso_8601": "2018-06-24T03:01:27.901788Z", "url": "https://files.pythonhosted.org/packages/0a/89/4fbe497029e27b5af26220f6329fa4888b4e3fb05740316390a0bb1b7948/atrcopy-7.0.tar.gz", "yanked": false}], "7.1": [{"comment_text": "", "digests": {"md5": "edaf62976270027689fda74a4b1c4ff0", "sha256": "17caf112b71622a5f428e2f0f5ab3318767a2b91e31cde4fcffac276d0343264"}, "downloads": -1, "filename": "atrcopy-7.1.tar.gz", "has_sig": false, "md5_digest": "edaf62976270027689fda74a4b1c4ff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 258755, "upload_time": "2018-06-24T05:14:08", "upload_time_iso_8601": "2018-06-24T05:14:08.177964Z", "url": "https://files.pythonhosted.org/packages/6c/28/2203c7ffc1100a4f5be14db66cb292b9a0b569569c4328a663109e75bd4c/atrcopy-7.1.tar.gz", "yanked": false}], "8.0": [{"comment_text": "", "digests": {"md5": "7541651a964b2a4b71fb74327cf7ae9f", "sha256": "544494980afb30828fd0df8fd801ab4ee7d33003e75fbe21a1b7d593f5e2a7ad"}, "downloads": -1, "filename": "atrcopy-8.0.tar.gz", "has_sig": false, "md5_digest": "7541651a964b2a4b71fb74327cf7ae9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 273191, "upload_time": "2018-06-25T06:09:39", "upload_time_iso_8601": "2018-06-25T06:09:39.030442Z", "url": "https://files.pythonhosted.org/packages/52/2a/0a3ce90d59ed932ad946553d942ee484fa961e4381d785d48727f5aa4ecb/atrcopy-8.0.tar.gz", "yanked": false}], "8.1": [{"comment_text": "", "digests": {"md5": "02cd6c2dc32d24c309f89c2ad7fd2311", "sha256": "4ccc7ecad654541f92732a82a78ad8290ef368eee378843bfce79faa554bac86"}, "downloads": -1, "filename": "atrcopy-8.1.tar.gz", "has_sig": false, "md5_digest": "02cd6c2dc32d24c309f89c2ad7fd2311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 273236, "upload_time": "2018-06-25T18:57:26", "upload_time_iso_8601": "2018-06-25T18:57:26.970124Z", "url": "https://files.pythonhosted.org/packages/55/d4/a65bdcaddf031960b4df7874cb54869d638feac81d7b56b1daeaedb78dc9/atrcopy-8.1.tar.gz", "yanked": false}], "8.2": [{"comment_text": "", "digests": {"md5": "5dcc9d5124ff9be35d344c842675616f", "sha256": "b9f64f216635e7cfa7555deaa150e7cad6ec228cbe0937645db2b5042e63dd09"}, "downloads": -1, "filename": "atrcopy-8.2.tar.gz", "has_sig": false, "md5_digest": "5dcc9d5124ff9be35d344c842675616f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 276647, "upload_time": "2018-06-28T17:30:57", "upload_time_iso_8601": "2018-06-28T17:30:57.679138Z", "url": "https://files.pythonhosted.org/packages/da/67/30cd01db64f8a614194228ea54b74fc557ac4018793eb6457b8f7101da29/atrcopy-8.2.tar.gz", "yanked": false}], "9.0": [{"comment_text": "", "digests": {"md5": "bd2ab5b72d8f24892da3959b7f328176", "sha256": "38b0c71f358b11998daa2bc84b48de82e65933d8441ab56ff6c66c46a5290142"}, "downloads": -1, "filename": "atrcopy-9.0.tar.gz", "has_sig": false, "md5_digest": "bd2ab5b72d8f24892da3959b7f328176", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 277423, "upload_time": "2018-07-24T17:07:03", "upload_time_iso_8601": "2018-07-24T17:07:03.151914Z", "url": "https://files.pythonhosted.org/packages/21/d8/db85d30f89fb2f11a222d8496ba2466d2fe5adea42723d7fd3f92c68b6fe/atrcopy-9.0.tar.gz", "yanked": false}], "9.1": [{"comment_text": "", "digests": {"md5": "7f5805166c01292dc85b0550c194c057", "sha256": "7d5f65c7e52e414ccdacab29b5ca3675d2e514ccec5b69ddb95fea2cbdb424ab"}, "downloads": -1, "filename": "atrcopy-9.1.tar.gz", "has_sig": false, "md5_digest": "7f5805166c01292dc85b0550c194c057", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 277749, "upload_time": "2018-09-24T18:21:51", "upload_time_iso_8601": "2018-09-24T18:21:51.359630Z", "url": "https://files.pythonhosted.org/packages/85/ae/dc1d968a73c4e7cefadba5a7a3884f9bba000c050d258d6f8d817e3fb9eb/atrcopy-9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f5805166c01292dc85b0550c194c057", "sha256": "7d5f65c7e52e414ccdacab29b5ca3675d2e514ccec5b69ddb95fea2cbdb424ab"}, "downloads": -1, "filename": "atrcopy-9.1.tar.gz", "has_sig": false, "md5_digest": "7f5805166c01292dc85b0550c194c057", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 277749, "upload_time": "2018-09-24T18:21:51", "upload_time_iso_8601": "2018-09-24T18:21:51.359630Z", "url": "https://files.pythonhosted.org/packages/85/ae/dc1d968a73c4e7cefadba5a7a3884f9bba000c050d258d6f8d817e3fb9eb/atrcopy-9.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:32 2020"}