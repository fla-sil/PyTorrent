{"info": {"author": "Vishwas B Sharma", "author_email": "sharma.vishwas88@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "ezread\n======\n\n|pypiv| |pyv| |Build| |Coverage| |Licence|\n\n------------------------------------------\n\nezread provides a ridiculously simple way to fetch items within the JSON list.\n\nFeatures\n--------\n\n* Ridiculously simple interface.\n* Known JSON format for indexing helps understand what we are fetching and how.\n* Easily procure relevant data from the JSON list for further processing.\n* Natively supported nested indexing.\n\nSetup\n-----\n\nUsing pip\n~~~~~~~~~\n\n.. code:: bash\n\n    pip install ezread\n\nDirectly from the repository\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    git clone https://github.com/csurfer/ezread.git\n    python ezread/setup.py install\n\nDocumentation\n-------------\n\nModes of operation\n~~~~~~~~~~~~~~~~~~\n\n1. **Strict**: In this mode, the reader raises an exception if the \"index\" or the \"key\" to be read is not found.\n\n2. **Non-Strict**: In this mode, the reader simply returns None if the \"index\" or the \"key\" to be read is not found.\n\nAPI Usage\n~~~~~~~~~\n\n.. code:: python3\n\n    from ezread import EzReader\n\n    # For strict mode\n    reader = EzReader(<template with index/key details>)\n    reader.read(<json text with list of dicts or lists>)\n\n    # For non strict mode\n    reader = EzReader(<template with index/key details>, strict=False)\n    reader.read(<json text with list of dicts or lists>)\n\nTemplate Guide\n~~~~~~~~~~~~~~\n\nThe template provided to EzReader is very important as it defines what \"index\" or \"key\" needs to be read. We expect the template to be in JSON format to provide it some structure. Let's take a few examples and understand how you can specify the items to read from the JSON list that you have.\n\nLet's take the following JSON list of lists.\n\n.. code:: json\n\n    [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [2, 4, 6, 8, 10, 12, 14, 16, 18, 20],\n        [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n    ]\n\n**Say you want to fetch 0th index of every list, what would the template look like?**\n\n.. code:: json\n\n    [0]\n\nThe rows returned would be\n\n.. code:: text\n\n    [1]\n    [2]\n    [3]\n\n**Say you want to fetch 0th, 2nd and 4th index of every list, what would the template look like?**\n\n.. code:: json\n\n    [0, 2, 4]\n\nThe rows returned would be\n\n.. code:: text\n\n    [1, 3, 5]\n    [2, 6, 10]\n    [3, 9, 15]\n\nLet's delve a little deeper into index templates with the following JSON list of dicts.\n\n.. code:: json\n\n    [\n        {\n            \"name\": \"Tom\",\n            \"age\": 30,\n            \"address\": {\n                \"street\": [\"124 Lincoln St\", \"West Village\"],\n                \"city\": \"New York\",\n                \"state\": \"NYC\"\n            }\n        },\n        {\n            \"name\": \"Dick\",\n            \"age\": 20,\n            \"address\": {\n                \"street\": [\"125 Lincoln St\", \"West Village\"],\n                \"city\": \"New York\",\n                \"state\": \"NYC\"\n            }\n        },\n        {\n            \"name\": \"Harry\",\n            \"age\": 40,\n            \"address\": {\n                \"street\": [\"50 Vinci Lane\", \"\"],\n                \"city\": \"San Fransisco\",\n                \"state\": \"CA\"\n            }\n        }\n    ]\n\n**Say you want to fetch name from every dict in the list, what would the template look like?**\n\n.. code:: json\n\n    [\"name\"]\n\nThe rows returned would be\n\n.. code:: text\n\n    [\"Tom\"]\n    [\"Dick\"]\n    [\"Harry\"]\n\n**Say you want to fetch name and age from every dict in the list, what would the template look like?**\n\n.. code:: json\n\n    [\"name\", \"age\"]\n\nThe rows returned would be\n\n.. code:: text\n\n    [\"Tom\", 30]\n    [\"Dick\", 20]\n    [\"Harry\", 40]\n\n**Let's say your query is a little bit complicated. You want to fetch name and city a person lives in, what would the template look like?**\n\nYou can use lists for nested indexing. Here you want to use \"address\" and from within it you want to fetch \"city\". You can achieve it as follows\n\n.. code:: json\n\n    [\"name\", [\"address\", \"city\"]]\n\nThe rows returned would be\n\n.. code:: text\n\n    [\"Tom\", \"New York\"]\n    [\"Dick\", \"New York\"]\n    [\"Harry\", \"San Fransisco\"]\n\n**Does nested indexing always have to be dictionary keys?**\n\nNo nested indexing can be dictionary keys or (0-indexed) index within a list. Let's fetch \"name\" and \"first row of address\" for each contact.\n\n.. code:: json\n\n    [\"name\", [\"address\", \"street\", 0]]\n\nThe rows returned would be\n\n.. code:: text\n\n    [\"Tom\", \"124 Lincoln St\"]\n    [\"Dick\", \"125 Lincoln St\"]\n    [\"Harry\", \"50 Vinci Lane\"]\n\nNon-Strict mode of query\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n**So how does Non-Strict mode of query behave?**\n\nSay we asked for \"name\" and \"hometown\" from the previous JSON example. Since \"hometown\" is not a key in the JSON, it would fail with \"KeyError\" in strict mode. Similarly if we were accessing a list and tried to access an index which is not present it would end up throwing \"IndexOutOfBoundsError\" in strict mode.\n\nThe same query in non-srict mode would return the correct value for key/indexes it can fetch and None for others.\n\n.. code:: json\n\n    [\"name\", \"hometown\"]\n\nThe rows returned would be\n\n.. code:: text\n\n    [\"Tom\", None]\n    [\"Dick\", None]\n    [\"Harry\", None]\n\n\nCommandline tool\n~~~~~~~~~~~~~~~~\n\nCommandline tool provided with this library serves as an easy way to fetch the needed items as CSV file output.\n\n**Usage**\n\n.. code:: bash\n\n    # For help\n    ezread --help\n\n    # To use template string directly\n    ezread --template_str <index template string> <json file to read>\n\n    # To use template string from a file\n    ezread --template_file <file with index template string> <json file to read>\n\n    # By default it uses \",\" as the separator. If you want a different separator you can use --separator option.\n    # We use the strict mode by default. If you want to use non-strict mode use --nonstrict\n\nContributing\n------------\n\nBug Reports and Feature Requests\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease use `issue tracker`_ for reporting bugs or feature requests.\n\nDevelopment\n~~~~~~~~~~~\n\nPull requests are most welcome.\n\n\nBuy the developer a cup of coffee!\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you found the utility helpful you can buy me a cup of coffee using\n\n|Donate|\n\n.. |Donate| image:: https://www.paypalobjects.com/webstatic/en_US/i/btn/png/silver-pill-paypal-44px.png\n   :target: https://paypal.me/csurfer\n\n.. _issue tracker: https://github.com/csurfer/ezread/issues\n\n.. |Licence| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://raw.githubusercontent.com/csurfer/ezread/master/LICENSE\n\n.. |Build| image:: https://travis-ci.org/csurfer/ezread.svg?branch=master\n   :target: https://travis-ci.org/csurfer/ezread\n\n.. |Coverage| image:: https://coveralls.io/repos/github/csurfer/ezread/badge.svg?branch=master\n   :target: https://coveralls.io/github/csurfer/ezread?branch=master\n\n.. |pypiv| image:: https://img.shields.io/pypi/v/ezread.svg\n   :target: https://pypi.python.org/pypi/ezread\n\n.. |pyv| image:: https://img.shields.io/pypi/pyversions/ezread.svg\n   :target: https://pypi.python.org/pypi/ezread", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/csurfer/ezread", "keywords": "python json csv", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ezread", "package_url": "https://pypi.org/project/ezread/", "platform": "", "project_url": "https://pypi.org/project/ezread/", "project_urls": {"Homepage": "https://github.com/csurfer/ezread"}, "release_url": "https://pypi.org/project/ezread/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "ezread provides a ridiculously simple way to fetch items within the JSON list.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/ezread\" rel=\"nofollow\"><img alt=\"pypiv\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c797ba519780873878706da879a55b730ac21987/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f657a726561642e737667\"></a> <a href=\"https://pypi.python.org/pypi/ezread\" rel=\"nofollow\"><img alt=\"pyv\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/caecc2fa63b0f6a072b2a3a9e310d10b0f52dd4f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f657a726561642e737667\"></a> <a href=\"https://travis-ci.org/csurfer/ezread\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa2da865191a81a1243f2ca48cd2f217c7ef8729/68747470733a2f2f7472617669732d63692e6f72672f637375726665722f657a726561642e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/csurfer/ezread?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e892af50f4c69a0500683ebcb749e49443b25b98/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f637375726665722f657a726561642f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://raw.githubusercontent.com/csurfer/ezread/master/LICENSE\" rel=\"nofollow\"><img alt=\"Licence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<hr class=\"docutils\">\n<p>ezread provides a ridiculously simple way to fetch items within the JSON list.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Ridiculously simple interface.</li>\n<li>Known JSON format for indexing helps understand what we are fetching and how.</li>\n<li>Easily procure relevant data from the JSON list for further processing.</li>\n<li>Natively supported nested indexing.</li>\n</ul>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<div id=\"using-pip\">\n<h3>Using pip</h3>\n<pre>pip install ezread\n</pre>\n</div>\n<div id=\"directly-from-the-repository\">\n<h3>Directly from the repository</h3>\n<pre>git clone https://github.com/csurfer/ezread.git\npython ezread/setup.py install\n</pre>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"modes-of-operation\">\n<h3>Modes of operation</h3>\n<ol>\n<li><strong>Strict</strong>: In this mode, the reader raises an exception if the \u201cindex\u201d or the \u201ckey\u201d to be read is not found.</li>\n<li><strong>Non-Strict</strong>: In this mode, the reader simply returns None if the \u201cindex\u201d or the \u201ckey\u201d to be read is not found.</li>\n</ol>\n</div>\n<div id=\"api-usage\">\n<h3>API Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ezread</span> <span class=\"kn\">import</span> <span class=\"n\">EzReader</span>\n\n<span class=\"c1\"># For strict mode</span>\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">EzReader</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">template</span> <span class=\"k\">with</span> <span class=\"n\">index</span><span class=\"o\">/</span><span class=\"n\">key</span> <span class=\"n\">details</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">json</span> <span class=\"n\">text</span> <span class=\"k\">with</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">dicts</span> <span class=\"ow\">or</span> <span class=\"n\">lists</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For non strict mode</span>\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">EzReader</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">template</span> <span class=\"k\">with</span> <span class=\"n\">index</span><span class=\"o\">/</span><span class=\"n\">key</span> <span class=\"n\">details</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">json</span> <span class=\"n\">text</span> <span class=\"k\">with</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">dicts</span> <span class=\"ow\">or</span> <span class=\"n\">lists</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"template-guide\">\n<h3>Template Guide</h3>\n<p>The template provided to EzReader is very important as it defines what \u201cindex\u201d or \u201ckey\u201d needs to be read. We expect the template to be in JSON format to provide it some structure. Let\u2019s take a few examples and understand how you can specify the items to read from the JSON list that you have.</p>\n<p>Let\u2019s take the following JSON list of lists.</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Say you want to fetch 0th index of every list, what would the template look like?</strong></p>\n<pre><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[1]\n[2]\n[3]\n</pre>\n<p><strong>Say you want to fetch 0th, 2nd and 4th index of every list, what would the template look like?</strong></p>\n<pre><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[1, 3, 5]\n[2, 6, 10]\n[3, 9, 15]\n</pre>\n<p>Let\u2019s delve a little deeper into index templates with the following JSON list of dicts.</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Tom\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"street\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"124 Lincoln St\"</span><span class=\"p\">,</span> <span class=\"s2\">\"West Village\"</span><span class=\"p\">],</span>\n            <span class=\"nt\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New York\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NYC\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Dick\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"street\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"125 Lincoln St\"</span><span class=\"p\">,</span> <span class=\"s2\">\"West Village\"</span><span class=\"p\">],</span>\n            <span class=\"nt\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New York\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NYC\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Harry\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"street\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"50 Vinci Lane\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">],</span>\n            <span class=\"nt\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"San Fransisco\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CA\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Say you want to fetch name from every dict in the list, what would the template look like?</strong></p>\n<pre><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[\"Tom\"]\n[\"Dick\"]\n[\"Harry\"]\n</pre>\n<p><strong>Say you want to fetch name and age from every dict in the list, what would the template look like?</strong></p>\n<pre><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[\"Tom\", 30]\n[\"Dick\", 20]\n[\"Harry\", 40]\n</pre>\n<p><strong>Let\u2019s say your query is a little bit complicated. You want to fetch name and city a person lives in, what would the template look like?</strong></p>\n<p>You can use lists for nested indexing. Here you want to use \u201caddress\u201d and from within it you want to fetch \u201ccity\u201d. You can achieve it as follows</p>\n<pre><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"address\"</span><span class=\"p\">,</span> <span class=\"s2\">\"city\"</span><span class=\"p\">]]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[\"Tom\", \"New York\"]\n[\"Dick\", \"New York\"]\n[\"Harry\", \"San Fransisco\"]\n</pre>\n<p><strong>Does nested indexing always have to be dictionary keys?</strong></p>\n<p>No nested indexing can be dictionary keys or (0-indexed) index within a list. Let\u2019s fetch \u201cname\u201d and \u201cfirst row of address\u201d for each contact.</p>\n<pre><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"address\"</span><span class=\"p\">,</span> <span class=\"s2\">\"street\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[\"Tom\", \"124 Lincoln St\"]\n[\"Dick\", \"125 Lincoln St\"]\n[\"Harry\", \"50 Vinci Lane\"]\n</pre>\n</div>\n<div id=\"non-strict-mode-of-query\">\n<h3>Non-Strict mode of query</h3>\n<p><strong>So how does Non-Strict mode of query behave?</strong></p>\n<p>Say we asked for \u201cname\u201d and \u201chometown\u201d from the previous JSON example. Since \u201chometown\u201d is not a key in the JSON, it would fail with \u201cKeyError\u201d in strict mode. Similarly if we were accessing a list and tried to access an index which is not present it would end up throwing \u201cIndexOutOfBoundsError\u201d in strict mode.</p>\n<p>The same query in non-srict mode would return the correct value for key/indexes it can fetch and None for others.</p>\n<pre><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hometown\"</span><span class=\"p\">]</span>\n</pre>\n<p>The rows returned would be</p>\n<pre>[\"Tom\", None]\n[\"Dick\", None]\n[\"Harry\", None]\n</pre>\n</div>\n<div id=\"commandline-tool\">\n<h3>Commandline tool</h3>\n<p>Commandline tool provided with this library serves as an easy way to fetch the needed items as CSV file output.</p>\n<p><strong>Usage</strong></p>\n<pre><span class=\"c1\"># For help\n</span>ezread --help\n\n<span class=\"c1\"># To use template string directly\n</span>ezread --template_str &lt;index template string&gt; &lt;json file to read&gt;\n\n<span class=\"c1\"># To use template string from a file\n</span>ezread --template_file &lt;file with index template string&gt; &lt;json file to read&gt;\n\n<span class=\"c1\"># By default it uses \",\" as the separator. If you want a different separator you can use --separator option.\n# We use the strict mode by default. If you want to use non-strict mode use --nonstrict</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<div id=\"bug-reports-and-feature-requests\">\n<h3>Bug Reports and Feature Requests</h3>\n<p>Please use <a href=\"https://github.com/csurfer/ezread/issues\" rel=\"nofollow\">issue tracker</a> for reporting bugs or feature requests.</p>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>Pull requests are most welcome.</p>\n</div>\n<div id=\"buy-the-developer-a-cup-of-coffee\">\n<h3>Buy the developer a cup of coffee!</h3>\n<p>If you found the utility helpful you can buy me a cup of coffee using</p>\n<p><a href=\"https://paypal.me/csurfer\" rel=\"nofollow\"><img alt=\"Donate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27ac4eb242af9665a1c941952164d5371ef879ee/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f7765627374617469632f656e5f55532f692f62746e2f706e672f73696c7665722d70696c6c2d70617970616c2d343470782e706e67\"></a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6871560, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a84159065699bd2c9a2f2e9b5951b6e9", "sha256": "c5f3afd424afe6cd71ee31e7f2660ebce18bab0a994b19f886022c90c4190b17"}, "downloads": -1, "filename": "ezread-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a84159065699bd2c9a2f2e9b5951b6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5860, "upload_time": "2020-03-24T08:37:17", "upload_time_iso_8601": "2020-03-24T08:37:17.263101Z", "url": "https://files.pythonhosted.org/packages/8c/1c/158256f4c0acc4c9b1c54343a8a02820592d268e189690fca1010ca41d14/ezread-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a84159065699bd2c9a2f2e9b5951b6e9", "sha256": "c5f3afd424afe6cd71ee31e7f2660ebce18bab0a994b19f886022c90c4190b17"}, "downloads": -1, "filename": "ezread-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a84159065699bd2c9a2f2e9b5951b6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5860, "upload_time": "2020-03-24T08:37:17", "upload_time_iso_8601": "2020-03-24T08:37:17.263101Z", "url": "https://files.pythonhosted.org/packages/8c/1c/158256f4c0acc4c9b1c54343a8a02820592d268e189690fca1010ca41d14/ezread-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:20 2020"}