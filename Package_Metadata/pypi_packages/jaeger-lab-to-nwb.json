{"info": {"author": "Luiz Tauffer and Ben Dichter", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# jaeger-lab-data-to-nwb\nConvert [Jaeger lab](https://scholarblogs.emory.edu/jaegerlab/) data to NWB format.<br>\n\nCurrently includes:\n* FRET optical imaging (rsd)\n* Intan electrophysiology (rhd)\n* Labview behavioral data (txt)\n* Optogenetics stimulation data (txt)\n* Treadmill behavior (csv)\n* Bpod behavioral data (mat)\n\nAuthors: Luiz Tauffer and Ben Dichter\n\n# Install\nTo clone the repository and set up a conda environment, do:\n```\n$ git clone https://github.com/ben-dichter-consulting/jaeger-lab-to-nwb.git\n$ conda env create -f jaeger_lab_to_nwb/make_env.yml\n$ source activate jaeger_nwb\n```\n\nAlternatively, to install directly in an existing environment:\n```\n$ pip install git+https://github.com/ben-dichter-consulting/jaeger-lab-to-nwb.git\n```\n\n# Use\nAfter activating the correct environment, the conversion function can be used in different forms:\n\n**1. Imported and run from a python script:** <br/>\nHere's an example: we'll grab the data from a specific experiment, with several electrophysiology and behavioral data files stored `base_path`, and save it to a single `nwb` file.\n```python\nimport pynwb\nfrom jaeger_lab_to_nwb.conversion_module import conversion_function\nfrom pathlib import Path\nimport yaml\n\nbase_path = Path(PATH_TO_FILES)\n\n# Source files\nsource_paths = dict()\nsource_paths['dir_ecephys_rhd'] = {'type': 'dir', 'path': base_path}\nsource_paths['file_electrodes'] = {'type': 'file', 'path': base_path.joinpath('UD09_impedance_1.csv')}\nsource_paths['dir_behavior_treadmill'] = {'type': 'dir', 'path': base_path}\n\n# Output .nwb file\nf_nwb = 'my_experiment.nwb'\n\n# Load metadata from YAML file\nmetafile = 'metafile.yml'\nwith open(metafile) as f:\n    metadata = yaml.safe_load(f)\n\n# Lab-specific kwargs\nkwargs_fields = {\n    'add_rhd': True,\n    'add_treadmill': True\n}\n\nconversion_function(source_paths=source_paths,\n                    f_nwb=f_nwb,\n                    metadata=metadata,\n                    **kwargs_fields)\n\n# Read nwb file and check its content\nwith pynwb.NWBHDF5IO(f_nwb, 'r') as io:\n    nwb = io.read()\n    print(nwb)\n```\n<br/>\n\n**2. Command line:** <br/>\nSimilarly, the conversion function can be called from the command line in terminal:\n```shell\n$ python conversion_module.py [output_file] [metafile] [--file_behavior_bpod]\n[--dir_behavior_treadmill] [--dir_ecephys_rhd] [--file_electrodes]\n[--dir_behavior_labview] [--dir_cortical_imaging] [--add_bpod] [--add_rhd]\n[--add_treadmill] [--add_labview] [--add_ophys]\n```\n<br/>\n\nFor example, the same experiment converted above with a python script could be converted with this command line input:\n```shell\n$ python conversion_module.py my_experiment.nwb metafile.yml --add_rhd --add_treadmill\n--dir_behavior_treadmill PATH_TO_FILES --dir_ecepys_rhd PATH_TO_FILES\n--file_electrodes PATH_TO_FILES\\UD09_impedance_1.csv\n```\n\n**3. Graphical User Interface:** <br/>\nTo use the GUI, just type in the terminal:\n```shell\n$ nwbn-gui-jaeger [--experiment_name]\n```\nThe GUI eases the task of editing the metadata of the resulting `nwb` file, it is integrated with the conversion module (conversion on-click) and allows for quick visual exploration the data in the end file with [nwb-jupyter-widgets](https://github.com/NeurodataWithoutBorders/nwb-jupyter-widgets).\n\n![](media/gif_jaeger.gif)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jaeger-lab-to-nwb", "package_url": "https://pypi.org/project/jaeger-lab-to-nwb/", "platform": "", "project_url": "https://pypi.org/project/jaeger-lab-to-nwb/", "project_urls": null, "release_url": "https://pypi.org/project/jaeger-lab-to-nwb/0.1.0/", "requires_dist": ["matplotlib", "cycler", "scipy", "numpy", "jupyter", "h5py", "pynwb", "pyintan", "nwbn-conversion-tools", "ndx-fret"], "requires_python": "", "summary": "NWB conversion scripts and tutorials.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jaeger-lab-data-to-nwb</h1>\n<p>Convert <a href=\"https://scholarblogs.emory.edu/jaegerlab/\" rel=\"nofollow\">Jaeger lab</a> data to NWB format.<br></p>\n<p>Currently includes:</p>\n<ul>\n<li>FRET optical imaging (rsd)</li>\n<li>Intan electrophysiology (rhd)</li>\n<li>Labview behavioral data (txt)</li>\n<li>Optogenetics stimulation data (txt)</li>\n<li>Treadmill behavior (csv)</li>\n<li>Bpod behavioral data (mat)</li>\n</ul>\n<p>Authors: Luiz Tauffer and Ben Dichter</p>\n<h1>Install</h1>\n<p>To clone the repository and set up a conda environment, do:</p>\n<pre><code>$ git clone https://github.com/ben-dichter-consulting/jaeger-lab-to-nwb.git\n$ conda env create -f jaeger_lab_to_nwb/make_env.yml\n$ source activate jaeger_nwb\n</code></pre>\n<p>Alternatively, to install directly in an existing environment:</p>\n<pre><code>$ pip install git+https://github.com/ben-dichter-consulting/jaeger-lab-to-nwb.git\n</code></pre>\n<h1>Use</h1>\n<p>After activating the correct environment, the conversion function can be used in different forms:</p>\n<p><strong>1. Imported and run from a python script:</strong> <br>\nHere's an example: we'll grab the data from a specific experiment, with several electrophysiology and behavioral data files stored <code>base_path</code>, and save it to a single <code>nwb</code> file.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pynwb</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jaeger_lab_to_nwb.conversion_module</span> <span class=\"kn\">import</span> <span class=\"n\">conversion_function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"n\">base_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">PATH_TO_FILES</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Source files</span>\n<span class=\"n\">source_paths</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n<span class=\"n\">source_paths</span><span class=\"p\">[</span><span class=\"s1\">'dir_ecephys_rhd'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'dir'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">base_path</span><span class=\"p\">}</span>\n<span class=\"n\">source_paths</span><span class=\"p\">[</span><span class=\"s1\">'file_electrodes'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'file'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">base_path</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s1\">'UD09_impedance_1.csv'</span><span class=\"p\">)}</span>\n<span class=\"n\">source_paths</span><span class=\"p\">[</span><span class=\"s1\">'dir_behavior_treadmill'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'dir'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">base_path</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Output .nwb file</span>\n<span class=\"n\">f_nwb</span> <span class=\"o\">=</span> <span class=\"s1\">'my_experiment.nwb'</span>\n\n<span class=\"c1\"># Load metadata from YAML file</span>\n<span class=\"n\">metafile</span> <span class=\"o\">=</span> <span class=\"s1\">'metafile.yml'</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">metafile</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Lab-specific kwargs</span>\n<span class=\"n\">kwargs_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'add_rhd'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'add_treadmill'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">conversion_function</span><span class=\"p\">(</span><span class=\"n\">source_paths</span><span class=\"o\">=</span><span class=\"n\">source_paths</span><span class=\"p\">,</span>\n                    <span class=\"n\">f_nwb</span><span class=\"o\">=</span><span class=\"n\">f_nwb</span><span class=\"p\">,</span>\n                    <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs_fields</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read nwb file and check its content</span>\n<span class=\"k\">with</span> <span class=\"n\">pynwb</span><span class=\"o\">.</span><span class=\"n\">NWBHDF5IO</span><span class=\"p\">(</span><span class=\"n\">f_nwb</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">io</span><span class=\"p\">:</span>\n    <span class=\"n\">nwb</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nwb</span><span class=\"p\">)</span>\n</pre>\n<br>\n<p><strong>2. Command line:</strong> <br>\nSimilarly, the conversion function can be called from the command line in terminal:</p>\n<pre>$ python conversion_module.py <span class=\"o\">[</span>output_file<span class=\"o\">]</span> <span class=\"o\">[</span>metafile<span class=\"o\">]</span> <span class=\"o\">[</span>--file_behavior_bpod<span class=\"o\">]</span>\n<span class=\"o\">[</span>--dir_behavior_treadmill<span class=\"o\">]</span> <span class=\"o\">[</span>--dir_ecephys_rhd<span class=\"o\">]</span> <span class=\"o\">[</span>--file_electrodes<span class=\"o\">]</span>\n<span class=\"o\">[</span>--dir_behavior_labview<span class=\"o\">]</span> <span class=\"o\">[</span>--dir_cortical_imaging<span class=\"o\">]</span> <span class=\"o\">[</span>--add_bpod<span class=\"o\">]</span> <span class=\"o\">[</span>--add_rhd<span class=\"o\">]</span>\n<span class=\"o\">[</span>--add_treadmill<span class=\"o\">]</span> <span class=\"o\">[</span>--add_labview<span class=\"o\">]</span> <span class=\"o\">[</span>--add_ophys<span class=\"o\">]</span>\n</pre>\n<br>\n<p>For example, the same experiment converted above with a python script could be converted with this command line input:</p>\n<pre>$ python conversion_module.py my_experiment.nwb metafile.yml --add_rhd --add_treadmill\n--dir_behavior_treadmill PATH_TO_FILES --dir_ecepys_rhd PATH_TO_FILES\n--file_electrodes PATH_TO_FILES<span class=\"se\">\\U</span>D09_impedance_1.csv\n</pre>\n<p><strong>3. Graphical User Interface:</strong> <br>\nTo use the GUI, just type in the terminal:</p>\n<pre>$ nwbn-gui-jaeger <span class=\"o\">[</span>--experiment_name<span class=\"o\">]</span>\n</pre>\n<p>The GUI eases the task of editing the metadata of the resulting <code>nwb</code> file, it is integrated with the conversion module (conversion on-click) and allows for quick visual exploration the data in the end file with <a href=\"https://github.com/NeurodataWithoutBorders/nwb-jupyter-widgets\" rel=\"nofollow\">nwb-jupyter-widgets</a>.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98283336b9e3215432fc885512c99c853ec82ce0/6d656469612f6769665f6a61656765722e676966\"></p>\n\n          </div>"}, "last_serial": 6821172, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "54ee7e004690e6c8213361901887b989", "sha256": "4a4715bcea1aa3b1f597e8cc2372ad6d5cea3ffb979e45dd6d8b4c2d9f1b2e69"}, "downloads": -1, "filename": "jaeger_lab_to_nwb-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "54ee7e004690e6c8213361901887b989", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 31466, "upload_time": "2020-03-15T22:05:04", "upload_time_iso_8601": "2020-03-15T22:05:04.617080Z", "url": "https://files.pythonhosted.org/packages/28/0a/74fdbad1c5188e1bc69acae24876772f24e82c577385ec2219fdc690482e/jaeger_lab_to_nwb-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fda3dbc166091dfcfbbdd83e989e591", "sha256": "011885f29d9f251fcb88fe9960a090b7d8461516be6393e515bcca6d69a405df"}, "downloads": -1, "filename": "jaeger_lab_to_nwb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7fda3dbc166091dfcfbbdd83e989e591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20204, "upload_time": "2020-03-15T22:05:07", "upload_time_iso_8601": "2020-03-15T22:05:07.073344Z", "url": "https://files.pythonhosted.org/packages/17/d4/6b4dc9514cc6e0dfa800d2185af0662f8a26c95a0a34518d34b5af6e7d19/jaeger_lab_to_nwb-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54ee7e004690e6c8213361901887b989", "sha256": "4a4715bcea1aa3b1f597e8cc2372ad6d5cea3ffb979e45dd6d8b4c2d9f1b2e69"}, "downloads": -1, "filename": "jaeger_lab_to_nwb-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "54ee7e004690e6c8213361901887b989", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 31466, "upload_time": "2020-03-15T22:05:04", "upload_time_iso_8601": "2020-03-15T22:05:04.617080Z", "url": "https://files.pythonhosted.org/packages/28/0a/74fdbad1c5188e1bc69acae24876772f24e82c577385ec2219fdc690482e/jaeger_lab_to_nwb-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fda3dbc166091dfcfbbdd83e989e591", "sha256": "011885f29d9f251fcb88fe9960a090b7d8461516be6393e515bcca6d69a405df"}, "downloads": -1, "filename": "jaeger_lab_to_nwb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7fda3dbc166091dfcfbbdd83e989e591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20204, "upload_time": "2020-03-15T22:05:07", "upload_time_iso_8601": "2020-03-15T22:05:07.073344Z", "url": "https://files.pythonhosted.org/packages/17/d4/6b4dc9514cc6e0dfa800d2185af0662f8a26c95a0a34518d34b5af6e7d19/jaeger_lab_to_nwb-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:22 2020"}