{"info": {"author": "Giuseppe Tribulato", "author_email": "gtsystem@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "parallelpipe\n============\n\n|Build Status|\n\nparallelpipe is a pipeline parallelization library for Python.\n\nA pipeline is composed by one or more stages. Each stage take the output\nof the previous stage as an input and performs some operations on it\nlike map, filter, reduce, etc. This is an extension of the normal\nproducer/consumer pattern where we can have multiple stages. Every stage\nreceives the input data in a queue and push the results to another queue\nthat is connected with the next stage.\n\n \n\nIn this example we define a stage function that takes as an input an\niterator returning urls and return the corresponding content after\ndownloading it:\n\n.. code:: python\n\n    from parallelpipe import stage\n    import requests\n        \n    @stage(workers=4)\n    def fetch_urls(urls):\n        for url in urls:\n            result = requests.get(url)\n            yield result.content\n\nTo use this stage just run\n\n.. code:: python\n\n    urls = ['http://test.com', ...]\n    pipe = urls | fetch_urls\n    for content in pipe.results():\n         print(len(content))\n\nWe built a basic pipe with only one stage. This stage have 4 workers\nthat will start processing in parallel the input urls. The main process\nwill receive the downloaded content as soon as one of them is available\nand print the corresponding length. Notice that a pipeline input can be\nany iterable; this will be automatically wrapped into a stage.\n\nLet's say we are interested into the title string inside the HTML\ncontent. We can add another stage to do that:\n\n.. code:: python\n\n    import re\n    RE_TITLE = re.compile(\"<title>(.*?)</title>\", re.M)\n\n    @stage(workers=2)\n    def get_titles(contents):\n        for content in contents:\n            match = RE_TITLE.search(content)\n            if match is not None:\n                yield match.group(1)\n\n    pipe = urls | fetch_urls | get_titles\n    for title in pipe.results():\n        print(title)\n\nAgain this second stage will start processing the content as soon as it\nis available and yield his output. Notice that also this task is\nparallelized, since we set workers to 2. As you can see this stage is\nnot an exact map, since the number of titles returned could be less then\nthe number of document (we check for the presence of the title tag).\n\nLet's add now one more stage to return the most common title:\n\n.. code:: python\n\n    from collections import Counter\n\n    @stage()\n    def most_common(titles):\n        commons = Counter(titles).most_common(1)\n        yield commons[0]\n\n    pipe = urls | fetch_urls | get_titles | most_common\n    print(pipe.execute())\n\nTo calculate the most common title we need to aggregate all results, so\nwe can use only one worker. We also use ``pipe.execute()`` instead of\n``pipe.results()`` because we know only one result will be returned.\n\nParametrical stage\n------------------\n\n.. code:: python\n\n    @stage(workers=4)\n    def add_n(input, n):\n        for number in input:\n             yield number + n\n\n    pipe = range(100) | add_n(7)\n    for result in pipe.results():\n         print(result)\n\nIn this example our stage function not only require the input iterator\nbut also one or more extra parameter to perform his computation. In the\nmoment we build our pipeline we can configure this extra paramerters\nsimply calling the stage with them as input. Remember, all parameters\ncan be passed except for the first one that is the mandatory input\niterator.\n\nMapping stage\n-------------\n\nIf your stage do pure mapping, i.e. it return exactly one result for\nevery input element you can simplify your code using the ``map_stage``\ndecorator:\n\n.. code:: python\n\n    from parallelpipe import map_stage\n\n    @map_stage(workers=4)\n    def add_n(number, n):\n        return number + n\n\nQueue Size\n----------\n\nWhen you build a stage you can define how big his output queue is.\nSetting an output queue limit can be useful if the current stage can\nproduce much faster then how the following stage can consume. In this\ncase, once the queue size is reached the stage stop processing his input\nand wait for the consumer to free a slot.\n\n.. code:: python\n\n    # only 30 elements can queue in output before blocking this stage\n    @stage(workers=4, qsize=30)\n    def add_n(input, n):\n        for number in input:\n             yield number + n\n\nBy default ``qsize=0`` that means the queue have no limit.\n\nSetup a stage\n-------------\n\nSetup the stage queue and workers can also be done after defining the\nstage calling the ``setup()`` method.\n\n.. code:: python\n\n    add_n.setup(workers=2, qsize=0)\n\nUse the Stage class directly\n----------------------------\n\nSo far we built stages using decorators on functions, but we can also\nuse the Stage class directly:\n\n.. code:: python\n\n    from parallelpipe import Stage\n\n    def add_n(input, n):\n        for number in input:\n             yield number + n\n     \n    pipe = Stage(range, 10) | Stage(add_n, 5)\n\nAs you can see in the previous example the Stage class take as input an\niterator function and any extra parameters needed by it. The first stage\nis a producer so will not be called with any input iterator. When we use\nthe stage class explictly we can use ``setup()`` to configure how many\nworkers we need and the queue size:\n\n.. code:: python\n\n    pipe = Stage(range, 10).setup(qsize=5) | Stage(add_n, 5).setup(workers=2)\n\nThe ``setup()`` method return the stage itself, so we can set it up\nduring the pipeline definition.\n\nException handling\n------------------\n\nDuring the execution of your stage function an exception can occur. When\na stage detects an exception it will automatically consume and ignore\nall the input from the previous stage and then a ``TaskException`` will\nbe throw on the main process.\n\n.. code:: python\n\n    @stage(workers=2)\n    def add_one(numbers):\n        for number in numbers:\n            yield number + 1\n\n.. code:: python\n\n    >>> pipe = [2, 3, \"ops\", 7] | add_one\n    >>> print(sum(pipe.results()))\n    Process add_one-0:\n    Traceback (most recent call last):\n      File \"/Users/gt/miniconda2/lib/python2.7/multiprocessing/process.py\", line 258, in _bootstrap\n        self.run()\n      File \"/Users/gt/Desktop/code/parallelpipe/parallelpipe.py\", line 67, in run\n        for item in res:\n      File \"example.py\", line 7, in add_one\n        yield number + 1\n    TypeError: cannot concatenate 'str' and 'int' objects\n    Traceback (most recent call last):\n      File \"example.py\", line 10, in <module>\n        print(sum(pipe.results()))\n      File \"/Users/gt/Desktop/code/parallelpipe/parallelpipe.py\", line 249, in results\n        raise TaskException(msg)\n    parallelpipe.TaskException: The task \"add_one-0\" raised TypeError(\"cannot concatenate 'str' and 'int' objects\",)\n\nIf you want to avoid that a single bad input blocks your pipeline you\ncan of course catch any exception inside the stage function so that the\npipeline can continue and produce the rest of the results.\n\n.. |Build Status| image:: https://travis-ci.org/gtsystem/parallelpipe.svg?branch=master\n   :target: https://travis-ci.org/gtsystem/parallelpipe", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gtsystem/parallelpipe", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "parallelpipe", "package_url": "https://pypi.org/project/parallelpipe/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/parallelpipe/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gtsystem/parallelpipe"}, "release_url": "https://pypi.org/project/parallelpipe/0.2.6/", "requires_dist": null, "requires_python": null, "summary": "Pipeline parallelization library", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/gtsystem/parallelpipe\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9e61c2a61fa9c0175d9d5c321eaf1e6e2c0187c/68747470733a2f2f7472617669732d63692e6f72672f677473797374656d2f706172616c6c656c706970652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>parallelpipe is a pipeline parallelization library for Python.</p>\n<p>A pipeline is composed by one or more stages. Each stage take the output\nof the previous stage as an input and performs some operations on it\nlike map, filter, reduce, etc. This is an extension of the normal\nproducer/consumer pattern where we can have multiple stages. Every stage\nreceives the input data in a queue and push the results to another queue\nthat is connected with the next stage.</p>\n<p>In this example we define a stage function that takes as an input an\niterator returning urls and return the corresponding content after\ndownloading it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parallelpipe</span> <span class=\"kn\">import</span> <span class=\"n\">stage</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"nd\">@stage</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">fetch_urls</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"k\">yield</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">content</span>\n</pre>\n<p>To use this stage just run</p>\n<pre><span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'http://test.com'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">urls</span> <span class=\"o\">|</span> <span class=\"n\">fetch_urls</span>\n<span class=\"k\">for</span> <span class=\"n\">content</span> <span class=\"ow\">in</span> <span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">():</span>\n     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">))</span>\n</pre>\n<p>We built a basic pipe with only one stage. This stage have 4 workers\nthat will start processing in parallel the input urls. The main process\nwill receive the downloaded content as soon as one of them is available\nand print the corresponding length. Notice that a pipeline input can be\nany iterable; this will be automatically wrapped into a stage.</p>\n<p>Let\u2019s say we are interested into the title string inside the HTML\ncontent. We can add another stage to do that:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"n\">RE_TITLE</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;title&gt;(.*?)&lt;/title&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@stage</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_titles</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">content</span> <span class=\"ow\">in</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">RE_TITLE</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">urls</span> <span class=\"o\">|</span> <span class=\"n\">fetch_urls</span> <span class=\"o\">|</span> <span class=\"n\">get_titles</span>\n<span class=\"k\">for</span> <span class=\"n\">title</span> <span class=\"ow\">in</span> <span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n</pre>\n<p>Again this second stage will start processing the content as soon as it\nis available and yield his output. Notice that also this task is\nparallelized, since we set workers to 2. As you can see this stage is\nnot an exact map, since the number of titles returned could be less then\nthe number of document (we check for the presence of the title tag).</p>\n<p>Let\u2019s add now one more stage to return the most common title:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"nd\">@stage</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">most_common</span><span class=\"p\">(</span><span class=\"n\">titles</span><span class=\"p\">):</span>\n    <span class=\"n\">commons</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">titles</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">commons</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">urls</span> <span class=\"o\">|</span> <span class=\"n\">fetch_urls</span> <span class=\"o\">|</span> <span class=\"n\">get_titles</span> <span class=\"o\">|</span> <span class=\"n\">most_common</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">())</span>\n</pre>\n<p>To calculate the most common title we need to aggregate all results, so\nwe can use only one worker. We also use <tt>pipe.execute()</tt> instead of\n<tt>pipe.results()</tt> because we know only one result will be returned.</p>\n<div id=\"parametrical-stage\">\n<h2>Parametrical stage</h2>\n<pre><span class=\"nd\">@stage</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_n</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">input</span><span class=\"p\">:</span>\n         <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\n\n<span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">add_n</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">():</span>\n     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>In this example our stage function not only require the input iterator\nbut also one or more extra parameter to perform his computation. In the\nmoment we build our pipeline we can configure this extra paramerters\nsimply calling the stage with them as input. Remember, all parameters\ncan be passed except for the first one that is the mandatory input\niterator.</p>\n</div>\n<div id=\"mapping-stage\">\n<h2>Mapping stage</h2>\n<p>If your stage do pure mapping, i.e. it return exactly one result for\nevery input element you can simplify your code using the <tt>map_stage</tt>\ndecorator:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parallelpipe</span> <span class=\"kn\">import</span> <span class=\"n\">map_stage</span>\n\n<span class=\"nd\">@map_stage</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_n</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\n</pre>\n</div>\n<div id=\"queue-size\">\n<h2>Queue Size</h2>\n<p>When you build a stage you can define how big his output queue is.\nSetting an output queue limit can be useful if the current stage can\nproduce much faster then how the following stage can consume. In this\ncase, once the queue size is reached the stage stop processing his input\nand wait for the consumer to free a slot.</p>\n<pre><span class=\"c1\"># only 30 elements can queue in output before blocking this stage</span>\n<span class=\"nd\">@stage</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">qsize</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_n</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">input</span><span class=\"p\">:</span>\n         <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\n</pre>\n<p>By default <tt>qsize=0</tt> that means the queue have no limit.</p>\n</div>\n<div id=\"setup-a-stage\">\n<h2>Setup a stage</h2>\n<p>Setup the stage queue and workers can also be done after defining the\nstage calling the <tt>setup()</tt> method.</p>\n<pre><span class=\"n\">add_n</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">qsize</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"use-the-stage-class-directly\">\n<h2>Use the Stage class directly</h2>\n<p>So far we built stages using decorators on functions, but we can also\nuse the Stage class directly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parallelpipe</span> <span class=\"kn\">import</span> <span class=\"n\">Stage</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_n</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">input</span><span class=\"p\">:</span>\n         <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\n\n<span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">Stage</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Stage</span><span class=\"p\">(</span><span class=\"n\">add_n</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see in the previous example the Stage class take as input an\niterator function and any extra parameters needed by it. The first stage\nis a producer so will not be called with any input iterator. When we use\nthe stage class explictly we can use <tt>setup()</tt> to configure how many\nworkers we need and the queue size:</p>\n<pre><span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">Stage</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">qsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Stage</span><span class=\"p\">(</span><span class=\"n\">add_n</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>setup()</tt> method return the stage itself, so we can set it up\nduring the pipeline definition.</p>\n</div>\n<div id=\"exception-handling\">\n<h2>Exception handling</h2>\n<p>During the execution of your stage function an exception can occur. When\na stage detects an exception it will automatically consume and ignore\nall the input from the previous stage and then a <tt>TaskException</tt> will\nbe throw on the main process.</p>\n<pre><span class=\"nd\">@stage</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"ops\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">add_one</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">()))</span>\n<span class=\"n\">Process</span> <span class=\"n\">add_one</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/gt/miniconda2/lib/python2.7/multiprocessing/process.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">258</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_bootstrap</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/gt/Desktop/code/parallelpipe/parallelpipe.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">run</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"example.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">add_one</span>\n    <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">concatenate</span> <span class=\"s1\">'str'</span> <span class=\"ow\">and</span> <span class=\"s1\">'int'</span> <span class=\"n\">objects</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"example.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">()))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/gt/Desktop/code/parallelpipe/parallelpipe.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">249</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">results</span>\n    <span class=\"k\">raise</span> <span class=\"n\">TaskException</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"n\">parallelpipe</span><span class=\"o\">.</span><span class=\"n\">TaskException</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">task</span> <span class=\"s2\">\"add_one-0\"</span> <span class=\"n\">raised</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"cannot concatenate 'str' and 'int' objects\"</span><span class=\"p\">,)</span>\n</pre>\n<p>If you want to avoid that a single bad input blocks your pipeline you\ncan of course catch any exception inside the stage function so that the\npipeline can continue and produce the rest of the results.</p>\n</div>\n\n          </div>"}, "last_serial": 2175756, "releases": {"0.2.6": [{"comment_text": "", "digests": {"md5": "da1729109bccd111ec7baef09230a9c6", "sha256": "af3d506cb54cdb11bb64a1f7e433e6fcc546296d755e962490001e0cb0810e97"}, "downloads": -1, "filename": "parallelpipe-0.2.6.tar.gz", "has_sig": false, "md5_digest": "da1729109bccd111ec7baef09230a9c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7244, "upload_time": "2016-06-19T13:25:00", "upload_time_iso_8601": "2016-06-19T13:25:00.893306Z", "url": "https://files.pythonhosted.org/packages/71/a7/aa834d3446e53a2c223cb16d20058a79070ae8e1a4cf98677dd63835baee/parallelpipe-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da1729109bccd111ec7baef09230a9c6", "sha256": "af3d506cb54cdb11bb64a1f7e433e6fcc546296d755e962490001e0cb0810e97"}, "downloads": -1, "filename": "parallelpipe-0.2.6.tar.gz", "has_sig": false, "md5_digest": "da1729109bccd111ec7baef09230a9c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7244, "upload_time": "2016-06-19T13:25:00", "upload_time_iso_8601": "2016-06-19T13:25:00.893306Z", "url": "https://files.pythonhosted.org/packages/71/a7/aa834d3446e53a2c223cb16d20058a79070ae8e1a4cf98677dd63835baee/parallelpipe-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:38 2020"}