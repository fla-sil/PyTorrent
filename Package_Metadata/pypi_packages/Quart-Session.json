{"info": {"author": "dsc", "author_email": "dsc@xmr.pm", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Quart-Session\n\n![pyversions](https://img.shields.io/pypi/pyversions/Quart-Session.svg) [![pypiversion](https://badge.fury.io/py/Quart-Session.svg)](https://pypi.org/project/Quart-Session/) ![PyPI license](https://img.shields.io/pypi/l/Quart-Session.svg)\n\nQuart-Session is an extension for [Quart](https://gitlab.com/pgjones/quart/blob/master/README.rst) that adds support for\nserver-side sessions to your application.\n\nBased on [flask-session](https://pypi.org/project/Flask-Session/).\n\n## Quick start\n\nQuart-Session can be installed via pipenv or pip,\n\n```bash\n$ pipenv install quart-session\n$ pip install quart-session\n```\n\nand requires Python 3.7.0 or higher. A fairly minimal Quart-Session example is,\n\n```python3\nfrom quart import Quart, session\nfrom quart_session import Session\n\napp = Quart(__name__)\napp.config['SESSION_TYPE'] = 'redis'\nSession(app)\n\n@app.route('/')\nasync def hello():\n    session[\"foo\"] = \"bar\"\n    return 'hello'\n\napp.run()\n```\n\n## Features\n\n\n### Redis support\n\nvia `aioredis`.\n\n```python3\napp = Quart(__name__)\napp.config['SESSION_TYPE'] = 'redis'\nSession(app)\n```\n\nIf you already have a `aioredis.Client` instance and you'd like to share\nit with the session interface,\n\n```python3\napp = Quart(__name__)\napp.config['SESSION_TYPE'] = 'redis'\n\n@app.before_serving\nasync def setup():\n    cache = await aioredis.create_redis_pool(...)\n    app.config['SESSION_REDIS'] = cache\n    Session(app)\n```\n\nBy default, Quart-session creates a single connection to Redis, while\nthe example above sets up a connection pool.\n\n#### Trio support\n\nQuart-Session comes with [an (experimental) Redis client](quart_session/redis_trio) for use with the [Trio](https://trio.readthedocs.io/en/stable/) eventloop.\n\n```python3\nfrom quart_trio import QuartTrio\nfrom quart_session.redis_trio.client import RedisTrio\n\napp = QuartTrio(__name__)\napp.config['SESSION_TYPE'] = 'redis'\nSession(app)\n```\n\n### Memcached support\n\nvia `aiomcache`.\n\n```python3\napp = Quart(__name__)\napp.config['SESSION_TYPE'] = 'memcached'\nSession(app)\n```\n\n### JSON serializer\n\n[flask-session](https://pypi.org/project/Flask-Session/) uses `pickle`\nfor session data while Quart-Session uses [a JSON serializer](https://gitlab.com/pgjones/quart/blob/37e249b9b146824a8668eaa1daa12392aeb00256/src/quart/json/tag.py#L141)\ncapable of serializing the usual JSON types, as well as: `Tuple`, `Bytes`,\n`Markup`, `UUID`, and `DateTime`.\n\nJSON as session data allows for greater interoperability with other\nprograms/languages that might want to read session data straight\nfrom a back-end.\n\nIf ~~for some unholy reason~~ you prefer `pickle` or your own serializer,\n\n```python3\napp = Quart(__name__)\napp.config['SESSION_TYPE'] = 'redis'\nSession(app)\n\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\n\napp.session_interface.serialize = pickle\n```\n\n### Back-end usage\n\nAt any point you may interface with the session back-end directly:\n\n```python3\n@app.route(\"/\")\nasync def hello():\n    cache = app.session_interface\n    await cache.set(\"random_key\", \"val\", expiry=3600)\n    data = await cache.get(\"random_key\")\n```\n\nThe interface will have the `get`, `set`, and `delete` methods available (regardless of\nback-end - similar to how [aiocache](https://github.com/argaen/aiocache) works).\n\n### Performance\n\n[flask-session](https://pypi.org/project/Flask-Session/) sets a\nsession for each incoming request, including static files. From experience,\nthis often puts unneeded load on underlying session infrastructure,\nespecially in high-traffic environments.\n\nQuart-Session only contacts the back-end when a session changed (or created). In addition,\nstatic file serves never emit a `Set-Cookie` header. If you'd like to enable\nthis though, set `SESSION_STATIC_FILE` to `True`.\n\n\n### Session pinning\n\nAssociates an user's session to his/her IP address. This mitigates cookie stealing via XSS etc, and is handy\nfor web applications that require extra security.\n\n```python3\napp = Quart(__name__)\napp.config['SESSION_TYPE'] = 'redis'\napp.config['SESSION_PROTECTION'] = True\nSession(app)\n```\n\nSession reuse from a different IP will now result in the creation of a new session, and the deletion of the old.\n\n**Important:** If your application is behind a reverse proxy, it most\nlikely provides the `X-Forwarded-For` header which you **must** make use of\nby explicitly setting `SESSION_REVERSE_PROXY` to `True`.\n\n## Future development\n\n- `MongoDBSessionInterface`\n- `FileSystemSessionInterface`\n- `GoogleCloudDatastoreSessionInterface`\n- Pytest\n\n## Flask-Session\n\nThis library works very similarly to [flask-session](https://pypi.org/project/Flask-Session/).\nThe changes are specified below:\n\n- Quart-Session does not emit a `Set-Cookie` on every request.\n- Quart-Session does not emit a `Set-Cookie` on static file serves.\n- Quart-Session uses a different serializer: `quart.json.tag.TaggedJSONSerializer` instead of `pickle`.\n- Quart-Session disallows the client to supply their own made up `sid` cookie value.\n- Quart-Session can do session protection.\n- Quart-Session might not have all the back-end interfaces implemented (yet), such as \"filesystem\".\n\n## Help\n\nFind the Quart folk on [gitter](https://gitter.im/python-quart/lobby) or open an issue.\n\n## License\n\nBSD", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xmrdsc/quart-session", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "Quart-Session", "package_url": "https://pypi.org/project/Quart-Session/", "platform": "any", "project_url": "https://pypi.org/project/Quart-Session/", "project_urls": {"Homepage": "https://github.com/xmrdsc/quart-session"}, "release_url": "https://pypi.org/project/Quart-Session/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Adds server-side session support to your Quart application", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Quart-Session</h1>\n<p><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/961f0a6436c7b177f7650c1a467914ee86a7eb63/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f51756172742d53657373696f6e2e737667\"> <a href=\"https://pypi.org/project/Quart-Session/\" rel=\"nofollow\"><img alt=\"pypiversion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ca0ebbe60bae97affc05406145dc0550bde83ad/68747470733a2f2f62616467652e667572792e696f2f70792f51756172742d53657373696f6e2e737667\"></a> <img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e390ab54e356fd8505cc8379a14c7ebb02132181/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f51756172742d53657373696f6e2e737667\"></p>\n<p>Quart-Session is an extension for <a href=\"https://gitlab.com/pgjones/quart/blob/master/README.rst\" rel=\"nofollow\">Quart</a> that adds support for\nserver-side sessions to your application.</p>\n<p>Based on <a href=\"https://pypi.org/project/Flask-Session/\" rel=\"nofollow\">flask-session</a>.</p>\n<h2>Quick start</h2>\n<p>Quart-Session can be installed via pipenv or pip,</p>\n<pre>$ pipenv install quart-session\n$ pip install quart-session\n</pre>\n<p>and requires Python 3.7.0 or higher. A fairly minimal Quart-Session example is,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">quart</span> <span class=\"kn\">import</span> <span class=\"n\">Quart</span><span class=\"p\">,</span> <span class=\"n\">session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">quart_session</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'redis'</span>\n<span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"bar\"</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'hello'</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>Features</h2>\n<h3>Redis support</h3>\n<p>via <code>aioredis</code>.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'redis'</span>\n<span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>If you already have a <code>aioredis.Client</code> instance and you'd like to share\nit with the session interface,</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'redis'</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">before_serving</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">():</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aioredis</span><span class=\"o\">.</span><span class=\"n\">create_redis_pool</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_REDIS'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cache</span>\n    <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>By default, Quart-session creates a single connection to Redis, while\nthe example above sets up a connection pool.</p>\n<h4>Trio support</h4>\n<p>Quart-Session comes with <a href=\"quart_session/redis_trio\" rel=\"nofollow\">an (experimental) Redis client</a> for use with the <a href=\"https://trio.readthedocs.io/en/stable/\" rel=\"nofollow\">Trio</a> eventloop.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">quart_trio</span> <span class=\"kn\">import</span> <span class=\"n\">QuartTrio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">quart_session.redis_trio.client</span> <span class=\"kn\">import</span> <span class=\"n\">RedisTrio</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QuartTrio</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'redis'</span>\n<span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<h3>Memcached support</h3>\n<p>via <code>aiomcache</code>.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'memcached'</span>\n<span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<h3>JSON serializer</h3>\n<p><a href=\"https://pypi.org/project/Flask-Session/\" rel=\"nofollow\">flask-session</a> uses <code>pickle</code>\nfor session data while Quart-Session uses <a href=\"https://gitlab.com/pgjones/quart/blob/37e249b9b146824a8668eaa1daa12392aeb00256/src/quart/json/tag.py#L141\" rel=\"nofollow\">a JSON serializer</a>\ncapable of serializing the usual JSON types, as well as: <code>Tuple</code>, <code>Bytes</code>,\n<code>Markup</code>, <code>UUID</code>, and <code>DateTime</code>.</p>\n<p>JSON as session data allows for greater interoperability with other\nprograms/languages that might want to read session data straight\nfrom a back-end.</p>\n<p>If <del>for some unholy reason</del> you prefer <code>pickle</code> or your own serializer,</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'redis'</span>\n<span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">cPickle</span> <span class=\"k\">as</span> <span class=\"nn\">pickle</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">session_interface</span><span class=\"o\">.</span><span class=\"n\">serialize</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span>\n</pre>\n<h3>Back-end usage</h3>\n<p>At any point you may interface with the session back-end directly:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">session_interface</span>\n    <span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"random_key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"val\"</span><span class=\"p\">,</span> <span class=\"n\">expiry</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"random_key\"</span><span class=\"p\">)</span>\n</pre>\n<p>The interface will have the <code>get</code>, <code>set</code>, and <code>delete</code> methods available (regardless of\nback-end - similar to how <a href=\"https://github.com/argaen/aiocache\" rel=\"nofollow\">aiocache</a> works).</p>\n<h3>Performance</h3>\n<p><a href=\"https://pypi.org/project/Flask-Session/\" rel=\"nofollow\">flask-session</a> sets a\nsession for each incoming request, including static files. From experience,\nthis often puts unneeded load on underlying session infrastructure,\nespecially in high-traffic environments.</p>\n<p>Quart-Session only contacts the back-end when a session changed (or created). In addition,\nstatic file serves never emit a <code>Set-Cookie</code> header. If you'd like to enable\nthis though, set <code>SESSION_STATIC_FILE</code> to <code>True</code>.</p>\n<h3>Session pinning</h3>\n<p>Associates an user's session to his/her IP address. This mitigates cookie stealing via XSS etc, and is handy\nfor web applications that require extra security.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_TYPE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'redis'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SESSION_PROTECTION'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Session reuse from a different IP will now result in the creation of a new session, and the deletion of the old.</p>\n<p><strong>Important:</strong> If your application is behind a reverse proxy, it most\nlikely provides the <code>X-Forwarded-For</code> header which you <strong>must</strong> make use of\nby explicitly setting <code>SESSION_REVERSE_PROXY</code> to <code>True</code>.</p>\n<h2>Future development</h2>\n<ul>\n<li><code>MongoDBSessionInterface</code></li>\n<li><code>FileSystemSessionInterface</code></li>\n<li><code>GoogleCloudDatastoreSessionInterface</code></li>\n<li>Pytest</li>\n</ul>\n<h2>Flask-Session</h2>\n<p>This library works very similarly to <a href=\"https://pypi.org/project/Flask-Session/\" rel=\"nofollow\">flask-session</a>.\nThe changes are specified below:</p>\n<ul>\n<li>Quart-Session does not emit a <code>Set-Cookie</code> on every request.</li>\n<li>Quart-Session does not emit a <code>Set-Cookie</code> on static file serves.</li>\n<li>Quart-Session uses a different serializer: <code>quart.json.tag.TaggedJSONSerializer</code> instead of <code>pickle</code>.</li>\n<li>Quart-Session disallows the client to supply their own made up <code>sid</code> cookie value.</li>\n<li>Quart-Session can do session protection.</li>\n<li>Quart-Session might not have all the back-end interfaces implemented (yet), such as \"filesystem\".</li>\n</ul>\n<h2>Help</h2>\n<p>Find the Quart folk on <a href=\"https://gitter.im/python-quart/lobby\" rel=\"nofollow\">gitter</a> or open an issue.</p>\n<h2>License</h2>\n<p>BSD</p>\n\n          </div>"}, "last_serial": 6457209, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dc1cb49792a4f3117dc81856741e783f", "sha256": "c815bfd941f76d74f2602158886db6ba5ddd2439ebf7b63a995e8d9e24ffe360"}, "downloads": -1, "filename": "Quart-Session-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dc1cb49792a4f3117dc81856741e783f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11658, "upload_time": "2020-01-05T14:59:49", "upload_time_iso_8601": "2020-01-05T14:59:49.451067Z", "url": "https://files.pythonhosted.org/packages/95/74/d49bb2114ed7db32c0a1d7939a268e36a109b82f0b156c33c8c421fa4053/Quart-Session-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "fd2d6c63e36411f698df67bce40547a3", "sha256": "644486020283faaf896b70061030d5e2646c23a296dcc1dd278927bf001af074"}, "downloads": -1, "filename": "Quart-Session-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fd2d6c63e36411f698df67bce40547a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11944, "upload_time": "2020-01-15T08:27:54", "upload_time_iso_8601": "2020-01-15T08:27:54.436525Z", "url": "https://files.pythonhosted.org/packages/4a/8c/8eb73b011988c18661b81edf27042c7a3fe3a7e88a25b88b63b64211a6c5/Quart-Session-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd2d6c63e36411f698df67bce40547a3", "sha256": "644486020283faaf896b70061030d5e2646c23a296dcc1dd278927bf001af074"}, "downloads": -1, "filename": "Quart-Session-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fd2d6c63e36411f698df67bce40547a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11944, "upload_time": "2020-01-15T08:27:54", "upload_time_iso_8601": "2020-01-15T08:27:54.436525Z", "url": "https://files.pythonhosted.org/packages/4a/8c/8eb73b011988c18661b81edf27042c7a3fe3a7e88a25b88b63b64211a6c5/Quart-Session-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:44 2020"}