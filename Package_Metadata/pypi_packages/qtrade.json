{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.com/jborchma/qtrade.svg?branch=master)](https://travis-ci.com/jborchma/qtrade)\n\n# Qtrade\n\nThis is a very basic Python 3 wrapper for the [Questrade API](https://www.questrade.com/api/documentation/getting-started), a Canadian low cost broker.\n\n## Installation\n\nThis package is available via [PyPI](https://pypi.org/project/qtrade/) and can be installed via the command\n\n```\npip install qtrade\n```\n\n## Usage\n\nThe main class of the package is called `Questrade` and houses most of the functionality provided by the package. Below are a few examples for possible use cases.\n\n### Token management\n\nThe central class can be initialized via\n\n```python\nfrom qtrade import Questrade\n\nqtrade = Questrade(access_code='<access_code>')\nqtrade.get_access_token()\n```\nwhere `<access_code>` is the token that one gets from the Questrade API portal. It is called\n`access_code` since this initial token is used to get the full token data that will include\n```python\n{'access_token': <access_token>,\n 'api_server': '<api_url>',\n 'expires_in': 1234,\n 'refresh_token': <refresh_token>,\n 'token_type': 'Bearer'}\n ```\n\nThe first call initializes the class and the second call gets the full token.\n\nAnother way to initialize the class is to use a token yaml-file via:\n```python\nqtrade = Questrade(token_yaml='<yaml_path>')\n```\nwhere the yaml-file would have the general form\n```yaml\naccess_token: <access_token>\napi_server: <api_url>\nexpires_in: 1234\nrefresh_token: <refresh_token>\ntoken_type: Bearer\n```\n\nIf the token is expired, one can use\n```python\nqtrade.refresh_token()\n```\nto refresh the access token using the saved refresh token.\n\nOnce the tokens are set correctly, I have currently added methods to get ticker quotes, the\ncurrent status of all positions in any Questrade account that is associated with the tokens,\nany account activities such as trades and dividend payments as well as historical data for\ntickers that are supported by Questrade.\n\n### Basic functionality\n\nThere currently exists some basic functionality to get stock information via\n\n```python\naapl, amzn = qtrade.ticker_information(['AAPL', 'AMZN'])\n```\n\nand current stock quotes can be obtained via\n\n```python\naapl, amzn = qtrade.get_quote(['AAPL', 'AMZN'])\n```\n\nIn addition, one can get historical stock quotes via\n\n```python\naapl_history = = qtrade.get_historical_data('AAPL', '2018-08-01', '2018-08-21','OneHour')\n```\n\nHere, the last input parameter is the interval between quotes. Another option could be `'OneDay'`. For more options, see the [Questrade API description](http://www.questrade.com/api/documentation/rest-operations/enumerations/enumerations#historical-data-granularity).\n\n### Account information\n\nIn addition, the Questrade API gives access to account information about the accounts connected to\nthe token. The accounts IDs can be accessed via\n\n```python\naccount_ids = qtrade.get_account_id()\n```\n\nBy using the correct account ID, one can get the positions of the accounts via\n\n```python\npositions = qtrade.get_account_positions(account_id=123456)\n```\n\nFinally, there exists a method to get all account activities (trades, dividends recieved, etc.) of\nan account in a certain time frame via\n\n```python\nactivities = qtrade.get_account_activities(123456, '2018-08-01', '2018-08-16')\n```\n\n\n## Contributors\n\nThere is a test suite that can be run via `python -m pytest`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jborchma/qtrade", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "qtrade", "package_url": "https://pypi.org/project/qtrade/", "platform": "", "project_url": "https://pypi.org/project/qtrade/", "project_urls": {"Homepage": "https://github.com/jborchma/qtrade"}, "release_url": "https://pypi.org/project/qtrade/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Questrade API wrapper for Python", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/jborchma/qtrade\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4700200e47410ec993167e6384139dce51465acb/68747470733a2f2f7472617669732d63692e636f6d2f6a626f7263686d612f7174726164652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Qtrade</h1>\n<p>This is a very basic Python 3 wrapper for the <a href=\"https://www.questrade.com/api/documentation/getting-started\" rel=\"nofollow\">Questrade API</a>, a Canadian low cost broker.</p>\n<h2>Installation</h2>\n<p>This package is available via <a href=\"https://pypi.org/project/qtrade/\" rel=\"nofollow\">PyPI</a> and can be installed via the command</p>\n<pre><code>pip install qtrade\n</code></pre>\n<h2>Usage</h2>\n<p>The main class of the package is called <code>Questrade</code> and houses most of the functionality provided by the package. Below are a few examples for possible use cases.</p>\n<h3>Token management</h3>\n<p>The central class can be initialized via</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qtrade</span> <span class=\"kn\">import</span> <span class=\"n\">Questrade</span>\n\n<span class=\"n\">qtrade</span> <span class=\"o\">=</span> <span class=\"n\">Questrade</span><span class=\"p\">(</span><span class=\"n\">access_code</span><span class=\"o\">=</span><span class=\"s1\">'&lt;access_code&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">get_access_token</span><span class=\"p\">()</span>\n</pre>\n<p>where <code>&lt;access_code&gt;</code> is the token that one gets from the Questrade API portal. It is called\n<code>access_code</code> since this initial token is used to get the full token data that will include</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'access_token'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">access_token</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"s1\">'api_server'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;api_url&gt;'</span><span class=\"p\">,</span>\n <span class=\"s1\">'expires_in'</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n <span class=\"s1\">'refresh_token'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">refresh_token</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"s1\">'token_type'</span><span class=\"p\">:</span> <span class=\"s1\">'Bearer'</span><span class=\"p\">}</span>\n</pre>\n<p>The first call initializes the class and the second call gets the full token.</p>\n<p>Another way to initialize the class is to use a token yaml-file via:</p>\n<pre><span class=\"n\">qtrade</span> <span class=\"o\">=</span> <span class=\"n\">Questrade</span><span class=\"p\">(</span><span class=\"n\">token_yaml</span><span class=\"o\">=</span><span class=\"s1\">'&lt;yaml_path&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p>where the yaml-file would have the general form</p>\n<pre><span class=\"nt\">access_token</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;access_token&gt;</span>\n<span class=\"nt\">api_server</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;api_url&gt;</span>\n<span class=\"nt\">expires_in</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1234</span>\n<span class=\"nt\">refresh_token</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;refresh_token&gt;</span>\n<span class=\"nt\">token_type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Bearer</span>\n</pre>\n<p>If the token is expired, one can use</p>\n<pre><span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">refresh_token</span><span class=\"p\">()</span>\n</pre>\n<p>to refresh the access token using the saved refresh token.</p>\n<p>Once the tokens are set correctly, I have currently added methods to get ticker quotes, the\ncurrent status of all positions in any Questrade account that is associated with the tokens,\nany account activities such as trades and dividend payments as well as historical data for\ntickers that are supported by Questrade.</p>\n<h3>Basic functionality</h3>\n<p>There currently exists some basic functionality to get stock information via</p>\n<pre><span class=\"n\">aapl</span><span class=\"p\">,</span> <span class=\"n\">amzn</span> <span class=\"o\">=</span> <span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">ticker_information</span><span class=\"p\">([</span><span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"s1\">'AMZN'</span><span class=\"p\">])</span>\n</pre>\n<p>and current stock quotes can be obtained via</p>\n<pre><span class=\"n\">aapl</span><span class=\"p\">,</span> <span class=\"n\">amzn</span> <span class=\"o\">=</span> <span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">get_quote</span><span class=\"p\">([</span><span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"s1\">'AMZN'</span><span class=\"p\">])</span>\n</pre>\n<p>In addition, one can get historical stock quotes via</p>\n<pre><span class=\"n\">aapl_history</span> <span class=\"o\">=</span> <span class=\"o\">=</span> <span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">get_historical_data</span><span class=\"p\">(</span><span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-21'</span><span class=\"p\">,</span><span class=\"s1\">'OneHour'</span><span class=\"p\">)</span>\n</pre>\n<p>Here, the last input parameter is the interval between quotes. Another option could be <code>'OneDay'</code>. For more options, see the <a href=\"http://www.questrade.com/api/documentation/rest-operations/enumerations/enumerations#historical-data-granularity\" rel=\"nofollow\">Questrade API description</a>.</p>\n<h3>Account information</h3>\n<p>In addition, the Questrade API gives access to account information about the accounts connected to\nthe token. The accounts IDs can be accessed via</p>\n<pre><span class=\"n\">account_ids</span> <span class=\"o\">=</span> <span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">get_account_id</span><span class=\"p\">()</span>\n</pre>\n<p>By using the correct account ID, one can get the positions of the accounts via</p>\n<pre><span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">get_account_positions</span><span class=\"p\">(</span><span class=\"n\">account_id</span><span class=\"o\">=</span><span class=\"mi\">123456</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, there exists a method to get all account activities (trades, dividends recieved, etc.) of\nan account in a certain time frame via</p>\n<pre><span class=\"n\">activities</span> <span class=\"o\">=</span> <span class=\"n\">qtrade</span><span class=\"o\">.</span><span class=\"n\">get_account_activities</span><span class=\"p\">(</span><span class=\"mi\">123456</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2018-08-16'</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributors</h2>\n<p>There is a test suite that can be run via <code>python -m pytest</code>.</p>\n\n          </div>"}, "last_serial": 6803021, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "37301f7329bc1710163c1a887c061d62", "sha256": "6aff08b03a67e7b5c06fa4bc798ee09b146891a89ee05ce6da11f1bf0dde7ae2"}, "downloads": -1, "filename": "qtrade-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37301f7329bc1710163c1a887c061d62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7357, "upload_time": "2019-02-26T23:56:12", "upload_time_iso_8601": "2019-02-26T23:56:12.924580Z", "url": "https://files.pythonhosted.org/packages/74/27/18169da50507eaeac5efe1b84bfa1a1c534ede70b5a0ef6b49e9c26053e0/qtrade-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef542c1ba3ccb38ba038b0c1b0ab580c", "sha256": "26e2505b6265e8edf95333f024e69d069ab8a04212ed54e4f852db04addd085e"}, "downloads": -1, "filename": "qtrade-0.1.tar.gz", "has_sig": false, "md5_digest": "ef542c1ba3ccb38ba038b0c1b0ab580c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5939, "upload_time": "2019-02-26T23:56:14", "upload_time_iso_8601": "2019-02-26T23:56:14.786249Z", "url": "https://files.pythonhosted.org/packages/eb/15/3f85ddf7df390894532dbf7735481c372ebf73f79a94e7218a9ed2c0ba80/qtrade-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1eab4ec7b1bb859910b5759e40c87953", "sha256": "a243f29ac5342d775cc98d2b6018884465ba454ebab19cf00fc34b536fd1347e"}, "downloads": -1, "filename": "qtrade-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1eab4ec7b1bb859910b5759e40c87953", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7808, "upload_time": "2019-11-19T03:14:54", "upload_time_iso_8601": "2019-11-19T03:14:54.239209Z", "url": "https://files.pythonhosted.org/packages/2e/4e/473f38157bd61c261916a87caa4a2dec27c6933fe777214d6426b2bb6491/qtrade-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b289876e18b4ccfda2fd452796dac01", "sha256": "f73a3878e6320b21d3fa4843da188d84f2cd2738141b3ea07890f9c6e0d198ea"}, "downloads": -1, "filename": "qtrade-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9b289876e18b4ccfda2fd452796dac01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6355, "upload_time": "2019-11-19T03:14:55", "upload_time_iso_8601": "2019-11-19T03:14:55.856631Z", "url": "https://files.pythonhosted.org/packages/f2/c9/94f85489fa5d5d8e93bf4fc3809dc3b17b73d82f129f92b9fbd69ac947a5/qtrade-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a38368e0cc880d5e80476ec8a1f3048f", "sha256": "a925f555e94d6021025e0b779a710d22f13874157218dc5f43224ff263619b40"}, "downloads": -1, "filename": "qtrade-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a38368e0cc880d5e80476ec8a1f3048f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6637, "upload_time": "2020-03-10T01:52:58", "upload_time_iso_8601": "2020-03-10T01:52:58.457587Z", "url": "https://files.pythonhosted.org/packages/df/d4/adeb9b84e14a4a700d9a37db4b8b0baf1fb261a3bf9664970726b3569948/qtrade-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "81455f5f4c1aa5cd06d156f4aab865ea", "sha256": "4d4211af9a7c7c13e1d422937c7fbeaba4d9ef24828db31cc766279d4e23da6b"}, "downloads": -1, "filename": "qtrade-0.2.1.tar.gz", "has_sig": false, "md5_digest": "81455f5f4c1aa5cd06d156f4aab865ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6680, "upload_time": "2020-03-13T01:28:52", "upload_time_iso_8601": "2020-03-13T01:28:52.442670Z", "url": "https://files.pythonhosted.org/packages/26/a9/15e2f8fcaa0b0c8be1b440c2cd4afb3f9f642128b916f68fd4811078abf5/qtrade-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81455f5f4c1aa5cd06d156f4aab865ea", "sha256": "4d4211af9a7c7c13e1d422937c7fbeaba4d9ef24828db31cc766279d4e23da6b"}, "downloads": -1, "filename": "qtrade-0.2.1.tar.gz", "has_sig": false, "md5_digest": "81455f5f4c1aa5cd06d156f4aab865ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6680, "upload_time": "2020-03-13T01:28:52", "upload_time_iso_8601": "2020-03-13T01:28:52.442670Z", "url": "https://files.pythonhosted.org/packages/26/a9/15e2f8fcaa0b0c8be1b440c2cd4afb3f9f642128b916f68fd4811078abf5/qtrade-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:06 2020"}