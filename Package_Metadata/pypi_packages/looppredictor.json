{"info": {"author": "Li Tang", "author_email": "tangli_csu@csu.edu.cn", "bugtrack_url": null, "classifiers": [], "description": "# LoopPredictor\nPredicting unknown enhancer-mediated genome topology by an ensemble machine learning model\n\n## Contents\n- [What can LoopPredictor do?](#What-can-LoopPredictor-do?)\n- [Installation](#Installation)\\\n [1. Create conda environment](#1.Create-conda-environment)\\\n [2. Install LoopPredictor](#2.Install-LoopPredictor)\n- [Example usage](#Example-usage)\\\n [1. Classifying loops for known chromatin interaction](#1.Classifying-loops-for-known-chromatin-interaction)\\\n [2. Predicting loops for unknown cell types](#2.Predicting-loops-for-unknown-cell-types)\\\n [3. Customize model for extensive research](#3.Customize-model-for-extensive-research)\n\n## What can LoopPredictor do?\nLoopPredictor is an ensemble machine learning model, used to predict enhancer mediated loops in a genome-wide fashion across different cell lines, which is also applicable to different model organisms.\n - Annotate current chromatin interactions and classify the loops into \"e-p\", \"e-e\", \"p-p\" and inactivate types through integrating the enrichment of active/inactive histone mark and distance to Transcription Start Sites(TSS), Which helped users to have a keen insight into topology structure of known cell type.\n- Predict chromatin interactions for the unknown cell types which lack of 3D profile, LoopPredictor was trained by HiChIP and multi-omics datasets from three cell types (K562, GM12878, HCT116), users only need to feed the multi-omics features of interested cell type into the pre-trained adaptive model, the sensitive predictions helped users to have a preliminary investigation of unknown chromatin interaction.\n- Construct customized models for an extensive prediction research. As 3D chromatin detecting technologies are developing at a high speed, LoopPredictor provided an open workframe for users to construct their own model, the features and targets could be organized as user-defined, and the self-adaptive parameters wil be chosen to tarin the model. After training, users can use the customized model to predict the topology structure of interest.\n\n\n## Installation\nLoopPrediction is built on Python 3 and R 3.6.2. Homer is also needed for the annotation of chromatin regions.  \n   - Prerequisites:\\\n       [Python](https://www.python.org/)(>=3.4.0), [R](https://www.r-project.org/)(>=3.6.2), [Homer](http://homer.ucsd.edu/homer/)\n   - Dependencies:\\\n   **python packages:**\n       [pandas](https://pandas.pydata.org/), [numpy](http://www.numpy.org/), [scikit-learn](https://scikit-learn.org/stable/), [pathos](https://pypi.org/project/pathos/)\\\n   **R packages:**\n       [stringr](https://stringr.tidyverse.org/), [GenomicRanges](https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html), [TxDb.Hsapiens](http://bioconductor.org/packages/release/data/annotation/html/TxDb.Hsapiens.UCSC.hg19.knownGene.html) (download the corresponding TxDb package for the species you want to predict)\n\n### 1. Create conda environment\nThe virtual environment of conda was recommended for the installation of LoopPredictor and its dependencies. A virtual environment can be created and (de)activated as follows by using [conda](https://conda.io/docs/):\n```bash\n# create\nconda create -n LoopPredictor-env python=3.6 pandas numpy scikit-learn=0.20.3 pathos\n# activate\nconda activate LoopPredictor-env\n# deactivate\nconda deactivate\n```\nThe virtual environment can also be created by using [*virtualenv*](https://github.com/pypa/virtualenv/).\n\n### 2. Install LoopPredictor\n- After creating and activating the environment, download and install LoopPredictor (**lastest version**) from github:\n```bash\ngit clone https://github.com/bioinfomaticsCSU/LoopPredictor.git\ncd LoopPredictor\npython setup.py install\n```\n\n## Example usage\n### 1. Classifying loops for known chromatin interaction\nThe testing data were available in /example/K562_classification_example. The structure of folder was shown as below, two kinds of necessary files need to be prepared as input, and the classification results will be *_Output.txt.\n```bash\n example /\n   K562_classification_example /\n     featureData /                 # [necessary input]features of corresonding cell line input for the classification\n     tmp /                         # [intermediate]temporary files generated within running\n     log /                         # [intermediate]log files generated within running\n     *.bedpe                       # [necessary input]loops file with .bedpe format\n     *_Output.txt                  # [output]results of loops classification\n```\n#### *Step1: Prepare featureData files*\nThe classification was taken by the integration of active/inactive histone mark, so the corresonding ChIP-seq peaks of H3K27ac, H3K4me1, and H3K4me3 were the basic requirement. The peak files should be the standard ENCODE [narrowPeak/broadPeak](http://genome.ucsc.edu/FAQ/FAQformat#format13) file without head line, shown as below, which were listed in the folder /example/K562_classification_exampleas/featureData.\n```bash\nchr22\t16843445\t16868802\t.\t322\t.\t2.120582\t13.1\t-1\nchr22\t17024793\t17024896\t.\t985\t.\t11.483429\t2.8\t-1\nchr22\t17038424\t17038594\t.\t854\t.\t9.633610\t5.0\t-1\nchr22\t17050044\t17050593\t.\t465\t.\t4.143174\t2.0\t-1\nchr22\t17050418\t17050537\t.\t984\t.\t11.468583\t4.2\t-1\nchr22\t17066392\t17067403\t.\t892\t.\t10.169340\t14.8\t-1\nchr22\t17067959\t17068242\t.\t878\t.\t9.966456\t13.3\t-1\nchr22\t17068652\t17068827\t.\t835\t.\t9.358364\t4.9\t-1\n```\n#### *Step2: Prepare loops file*\nThe loops file should be .bedpe format with at least 6 columns, columns were seperated by tab. The minimum columns should include the chrom name, start, end of each anchor, shown as below.\n```bash\nchr22\t38290514\t38294289\tchr22\t38680609\t38682339\nchr5\t96033605\t96042289\tchr5\t96259190\t96260539\nchr1\t23665194\t23673403\tchr1\t24097536\t24108995\nchr3\t176676833\t176679516\tchr3\t176741264\t176748850\nchr11\t63604132\t63609924\tchr11\t63751693\t63756217\nchr17\t37005563\t37012402\tchr17\t38801324\t38806978\nchr3\t138311141\t138315068\tchr3\t138482903\t138484460\nchr11\t126078482\t126084019\tchr11\t126210767\t126227804\n```\n#### *Step3: Running classification*\nThe parameters of the script are as following,\n```bash\nClassifyLoops.py -l <loops> -f <featurePath> -g <genome> -o <output_name> -i <integer>\n-l [string] loop file with ./bedpe format to be classified.\n-f [string] absolute path of the featureData folder.\n-g [string] genome of loops.\n-o [string] path to save the output result. \n-i [integer(1-5)] 1. Output all types of loops without filtering;\n                  2. Output only \"e-p\"/\"p-e\" type loops;\n                  3. Output only \"e-e\" type loops;\n                  4. Output only \"p-p\" type loops;\n                  5. Output only \"inactivate-*\"/\"*-inativate\" type loops;\n```\nHere is a running example:\n```bash\ncd LoopPredictor/\npython ./bin/classifyLoops.py -l /path/to/example/K562_classification_example/K562_classifyLoop_example.bedpe \\\n                   -f /path/to/example/K562_classification_example/featureData \\\n                   -o /path/to/example/K562_classification_example -g hg19 -i 1\n```\n\n### 2. Predicting loops for unknown cell types\nThe testing data were available in /example/NIH3T3_prediction_example. The structure of folder was shown as below, the featureData is the necessary input for the prediction, and if you want to investigate the topology structures of a set of specific genes, a bed file containing the regions of genes could be provided. If there is no bed file inputing, the prediction will be performed for the whole genome in de novo, which will take some time.\n```bash\n example /\n   NIH3T3_prediction_example /\n     featureData /                          # [necessary input]features of corresonding cell line input for the prediction\n     tmp3 /                                 # [intermediate]temporary files generated within running\n     log /                                  # [intermediate]log files generated within running\n     *.bed                                  # [optional input]input bed file of interested regions for loops prediction\n     feature_out.txt                        # [intermediate]features are extracted from files within running\n     *predicted_result.bedpe                # [output]predicted results of loops\n```\n\n#### *Step1: Choose the proper pre-trained model*\nWe provided three typical pre-trained model for the prediction, which could be found in folder /trained_model/. The model should be chosen to match the features you can get access to.\n\npre-trained model | multi-omics features requirement\n ---- | ----- \n Minimum model | -ATAC-seq, -ChIP-seq/CUT&RUN(H3K27ac,H3K4me3)\n Median model  | -ATAC-seq, -ChIP-seq/CUT&RUN(H3K27ac,H3K4me3,H3K4me1,H3K9ac,H3K9me3,CTCF), -RNA-seq\n Maximum model | -ATAC-seq, -ChIP-seq/CUT&RUN(H3K27ac,H3K4me3,H3k4me2,H3K4me1,H3K9ac,H3K9me3,H3K36me3,H3K79me2,CTCF,ELF1,JUND,MAX,YY1), -RNA-seq, -Methylation\n\n#### *Step2: Prepare the input features*\nThe multi-omics features data should be put into folder featureData/.\nFor ATAC-seq and ChIP-seq/CUT&RUN data, the format should be standard [narrowPeak/broadPeak](http://genome.ucsc.edu/FAQ/FAQformat#format13), as shown above.\nFor RNA-seq data, we recommend to use [Homer](http://homer.ucsd.edu/homer/) to build \ntag files for the alignment, and then \"findPeaks\" function is utilized to detect the highly enriched regions, the output from \"findPeaks\" can be used as the feature file of RNA-seq data after removing the head line.\nFor Methylation data, we recommend to download the .bedRrbs format of RRBS data from [ENCODE](https://www.encodeproject.org/), \nwhich is shown as below,\n```bash\nchr1\t1000170\t1000171\tK562_Rep3_RRBS\t46\t+\t1000170\t1000171\t155,255,0\t46\t35\nchr1\t1000190\t1000191\tK562_Rep3_RRBS\t46\t+\t1000190\t1000191\t105,255,0\t46\t15\nchr1\t1000191\t1000192\tK562_Rep3_RRBS\t53\t-\t1000191\t1000192\t55,255,0\t53\t9\nchr1\t1000198\t1000199\tK562_Rep3_RRBS\t46\t+\t1000198\t1000199\t105,255,0\t46\t20\nchr1\t1000199\t1000200\tK562_Rep3_RRBS\t53\t-\t1000199\t1000200\t105,255,0\t53\t15\nchr1\t1000206\t1000207\tK562_Rep3_RRBS\t53\t-\t1000206\t1000207\t155,255,0\t53\t26\n```\n#### *Step3: Prepare the interested gene file (optional)*\nIf you want to detect the enhancer-mediated interactions for a set of interested gene, we recommend to extract the name of genes to the coordinates on the chromatin by [UCSC Table Browser](https://genome.ucsc.edu/cgi-bin/hgTables?hgsid=804701707_AsIp981xpMMb6T4p83FooaNvjQup). The coordinates should be ./bed format with at least 3 columns(chrom,start,end).\n\n#### *Step4: Running prediction*\nAfter preparing the input files, you can run the script \"LoopPredictor.py\" to perform the prediction.\nThe parameters of the script are as following,\n```bash\nLoopPredictor.py -b <bedfile> -f <featurePath> -g <genome> -t <trainfile> -m <model> -c <cutoff> -o <output_name>\n-b [string] coordinate .bed file of a set of interested genes.\n-f [string] absolute path of the featureData folder.\n-g [string] genome of the features data.\n-t [string] .fix file for the pre-trained model.\n-m [string] the pre-trained model chosen to use.\n-c [integer(>0)] the cutoff of loop score to filter the predicted output loops. \n-o [string] path to save the output result.\n```\nHere is a running example:\n```bash\ncd LoopPredictor/\npython ./bin/LoopPredictor.py -b /path/to/example/NIH3T3_prediction_example/NIH_geneEnh_example.bed \\\n                   -f /path/to/example/NIH3T3_prediction_example/featureData \\\n                   -g mm10 \\\n                   -t /path/to/trained_model/features_median_forTraining.fix \\\n                   -m /path/to/trained_model/GBRT_trained_model_median.m \\\n                   -c 1 \\\n                   -o /path/to/example/NIH3T3_prediction_example\n```\n### 3. Customize model for extensive research\n- *Step1: prepare trianing data*\\\nThe training data contains target and multi-omics data, target file shoule be the chromatin interactions in ./bedpe format, which is the prior knowledge to train the model. The target file should be 8 columns without head line, the final column must be the score of interaction, which is important for the prediction, shown as below,\n```bash\nchr17 75115676 75125670 chr17 76731709 76734226 loop_name_1 1\nchr12 56649935 56654417 chr12 56860478 56865446 loop_name_2 17\nchr18 53026973 53030447 chr18 54302527 54308273 loop_name_3 2\nchr10 15644687 15646877 chr10 15825760 15862181 loop_name_4 7\nchr21 35439250 35465483 chr21 36693517 36722679 loop_name_5 3\n```\nThe multi-omics data for the corresponding cell line should be prepared in the featureData/ folder as mentioned [above](#step2-prepare-the-input-features).\n\n- *Step2: Running training workflow*\nAfter preparing the input training data, you can run the script \"Customized_GBRT_trainer.py\" to train your own model.\nThe parameters of the script are as following,\n```bash\nCustomized_GBRT_trainer.py -t <trainfile> -f <feature> -g <genome> -o <output_path> -n <output_name>\n-t [string] target file of a set of loops with score to train the model, which is .bedpe format.\n-f [string] absolute path of the featureData folder.\n-g [string] genome of the features data.\n-o [string] path to save the output result.\n-n [string] output name of the model.\n```\nHere is a running example:\n```bash\ncd LoopPredictor/\npython ./bin/Customized_GBRT_trainer.py -b /path/to/example/HCT116_custom_model_example/HCT116_custom_example.bedpe \\\n                   -f /path/to/example/HCT116_custom_model_example/featureData \\\n                   -g hg19 \\\n                   -o /path/to/example/NIH3T3_prediction_example \\\n                   -n /path/to/example/NIH3T3_prediction_example/HCT116_custom_model.m\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bioinfomaticsCSU/LoopPredictor/", "keywords": "", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "looppredictor", "package_url": "https://pypi.org/project/looppredictor/", "platform": "", "project_url": "https://pypi.org/project/looppredictor/", "project_urls": {"Homepage": "https://github.com/bioinfomaticsCSU/LoopPredictor/"}, "release_url": "https://pypi.org/project/looppredictor/0.3.13/", "requires_dist": ["pandas (>=0.24.2)", "numpy (>=1.16.2)", "scikit-learn (<0.20.4,>=0.20.3)", "pathos (>=0.2.3)"], "requires_python": "", "summary": "Predicting unknown enhancer-mediated genome topology by an ensemble machine learning model", "version": "0.3.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LoopPredictor</h1>\n<p>Predicting unknown enhancer-mediated genome topology by an ensemble machine learning model</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#What-can-LoopPredictor-do?\" rel=\"nofollow\">What can LoopPredictor do?</a></li>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a><br>\n <a href=\"#1.Create-conda-environment\" rel=\"nofollow\">1. Create conda environment</a><br>\n <a href=\"#2.Install-LoopPredictor\" rel=\"nofollow\">2. Install LoopPredictor</a></li>\n<li><a href=\"#Example-usage\" rel=\"nofollow\">Example usage</a><br>\n <a href=\"#1.Classifying-loops-for-known-chromatin-interaction\" rel=\"nofollow\">1. Classifying loops for known chromatin interaction</a><br>\n <a href=\"#2.Predicting-loops-for-unknown-cell-types\" rel=\"nofollow\">2. Predicting loops for unknown cell types</a><br>\n <a href=\"#3.Customize-model-for-extensive-research\" rel=\"nofollow\">3. Customize model for extensive research</a></li>\n</ul>\n<h2>What can LoopPredictor do?</h2>\n<p>LoopPredictor is an ensemble machine learning model, used to predict enhancer mediated loops in a genome-wide fashion across different cell lines, which is also applicable to different model organisms.</p>\n<ul>\n<li>Annotate current chromatin interactions and classify the loops into \"e-p\", \"e-e\", \"p-p\" and inactivate types through integrating the enrichment of active/inactive histone mark and distance to Transcription Start Sites(TSS), Which helped users to have a keen insight into topology structure of known cell type.</li>\n<li>Predict chromatin interactions for the unknown cell types which lack of 3D profile, LoopPredictor was trained by HiChIP and multi-omics datasets from three cell types (K562, GM12878, HCT116), users only need to feed the multi-omics features of interested cell type into the pre-trained adaptive model, the sensitive predictions helped users to have a preliminary investigation of unknown chromatin interaction.</li>\n<li>Construct customized models for an extensive prediction research. As 3D chromatin detecting technologies are developing at a high speed, LoopPredictor provided an open workframe for users to construct their own model, the features and targets could be organized as user-defined, and the self-adaptive parameters wil be chosen to tarin the model. After training, users can use the customized model to predict the topology structure of interest.</li>\n</ul>\n<h2>Installation</h2>\n<p>LoopPrediction is built on Python 3 and R 3.6.2. Homer is also needed for the annotation of chromatin regions.</p>\n<ul>\n<li>Prerequisites:<br>\n<a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a>(&gt;=3.4.0), <a href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a>(&gt;=3.6.2), <a href=\"http://homer.ucsd.edu/homer/\" rel=\"nofollow\">Homer</a></li>\n<li>Dependencies:<br>\n   <strong>python packages:</strong>\n<a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>, <a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a>, <a href=\"https://scikit-learn.org/stable/\" rel=\"nofollow\">scikit-learn</a>, <a href=\"https://pypi.org/project/pathos/\" rel=\"nofollow\">pathos</a><br>\n   <strong>R packages:</strong>\n<a href=\"https://stringr.tidyverse.org/\" rel=\"nofollow\">stringr</a>, <a href=\"https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html\" rel=\"nofollow\">GenomicRanges</a>, <a href=\"http://bioconductor.org/packages/release/data/annotation/html/TxDb.Hsapiens.UCSC.hg19.knownGene.html\" rel=\"nofollow\">TxDb.Hsapiens</a> (download the corresponding TxDb package for the species you want to predict)</li>\n</ul>\n<h3>1. Create conda environment</h3>\n<p>The virtual environment of conda was recommended for the installation of LoopPredictor and its dependencies. A virtual environment can be created and (de)activated as follows by using <a href=\"https://conda.io/docs/\" rel=\"nofollow\">conda</a>:</p>\n<pre><span class=\"c1\"># create</span>\nconda create -n LoopPredictor-env <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.6 pandas numpy scikit-learn<span class=\"o\">=</span><span class=\"m\">0</span>.20.3 pathos\n<span class=\"c1\"># activate</span>\nconda activate LoopPredictor-env\n<span class=\"c1\"># deactivate</span>\nconda deactivate\n</pre>\n<p>The virtual environment can also be created by using <a href=\"https://github.com/pypa/virtualenv/\" rel=\"nofollow\"><em>virtualenv</em></a>.</p>\n<h3>2. Install LoopPredictor</h3>\n<ul>\n<li>After creating and activating the environment, download and install LoopPredictor (<strong>lastest version</strong>) from github:</li>\n</ul>\n<pre>git clone https://github.com/bioinfomaticsCSU/LoopPredictor.git\n<span class=\"nb\">cd</span> LoopPredictor\npython setup.py install\n</pre>\n<h2>Example usage</h2>\n<h3>1. Classifying loops for known chromatin interaction</h3>\n<p>The testing data were available in /example/K562_classification_example. The structure of folder was shown as below, two kinds of necessary files need to be prepared as input, and the classification results will be *_Output.txt.</p>\n<pre> example /\n   K562_classification_example /\n     featureData /                 <span class=\"c1\"># [necessary input]features of corresonding cell line input for the classification</span>\n     tmp /                         <span class=\"c1\"># [intermediate]temporary files generated within running</span>\n     log /                         <span class=\"c1\"># [intermediate]log files generated within running</span>\n     *.bedpe                       <span class=\"c1\"># [necessary input]loops file with .bedpe format</span>\n     *_Output.txt                  <span class=\"c1\"># [output]results of loops classification</span>\n</pre>\n<h4><em>Step1: Prepare featureData files</em></h4>\n<p>The classification was taken by the integration of active/inactive histone mark, so the corresonding ChIP-seq peaks of H3K27ac, H3K4me1, and H3K4me3 were the basic requirement. The peak files should be the standard ENCODE <a href=\"http://genome.ucsc.edu/FAQ/FAQformat#format13\" rel=\"nofollow\">narrowPeak/broadPeak</a> file without head line, shown as below, which were listed in the folder /example/K562_classification_exampleas/featureData.</p>\n<pre>chr22\t<span class=\"m\">16843445</span>\t<span class=\"m\">16868802</span>\t.\t<span class=\"m\">322</span>\t.\t<span class=\"m\">2</span>.120582\t<span class=\"m\">13</span>.1\t-1\nchr22\t<span class=\"m\">17024793</span>\t<span class=\"m\">17024896</span>\t.\t<span class=\"m\">985</span>\t.\t<span class=\"m\">11</span>.483429\t<span class=\"m\">2</span>.8\t-1\nchr22\t<span class=\"m\">17038424</span>\t<span class=\"m\">17038594</span>\t.\t<span class=\"m\">854</span>\t.\t<span class=\"m\">9</span>.633610\t<span class=\"m\">5</span>.0\t-1\nchr22\t<span class=\"m\">17050044</span>\t<span class=\"m\">17050593</span>\t.\t<span class=\"m\">465</span>\t.\t<span class=\"m\">4</span>.143174\t<span class=\"m\">2</span>.0\t-1\nchr22\t<span class=\"m\">17050418</span>\t<span class=\"m\">17050537</span>\t.\t<span class=\"m\">984</span>\t.\t<span class=\"m\">11</span>.468583\t<span class=\"m\">4</span>.2\t-1\nchr22\t<span class=\"m\">17066392</span>\t<span class=\"m\">17067403</span>\t.\t<span class=\"m\">892</span>\t.\t<span class=\"m\">10</span>.169340\t<span class=\"m\">14</span>.8\t-1\nchr22\t<span class=\"m\">17067959</span>\t<span class=\"m\">17068242</span>\t.\t<span class=\"m\">878</span>\t.\t<span class=\"m\">9</span>.966456\t<span class=\"m\">13</span>.3\t-1\nchr22\t<span class=\"m\">17068652</span>\t<span class=\"m\">17068827</span>\t.\t<span class=\"m\">835</span>\t.\t<span class=\"m\">9</span>.358364\t<span class=\"m\">4</span>.9\t-1\n</pre>\n<h4><em>Step2: Prepare loops file</em></h4>\n<p>The loops file should be .bedpe format with at least 6 columns, columns were seperated by tab. The minimum columns should include the chrom name, start, end of each anchor, shown as below.</p>\n<pre>chr22\t<span class=\"m\">38290514</span>\t<span class=\"m\">38294289</span>\tchr22\t<span class=\"m\">38680609</span>\t<span class=\"m\">38682339</span>\nchr5\t<span class=\"m\">96033605</span>\t<span class=\"m\">96042289</span>\tchr5\t<span class=\"m\">96259190</span>\t<span class=\"m\">96260539</span>\nchr1\t<span class=\"m\">23665194</span>\t<span class=\"m\">23673403</span>\tchr1\t<span class=\"m\">24097536</span>\t<span class=\"m\">24108995</span>\nchr3\t<span class=\"m\">176676833</span>\t<span class=\"m\">176679516</span>\tchr3\t<span class=\"m\">176741264</span>\t<span class=\"m\">176748850</span>\nchr11\t<span class=\"m\">63604132</span>\t<span class=\"m\">63609924</span>\tchr11\t<span class=\"m\">63751693</span>\t<span class=\"m\">63756217</span>\nchr17\t<span class=\"m\">37005563</span>\t<span class=\"m\">37012402</span>\tchr17\t<span class=\"m\">38801324</span>\t<span class=\"m\">38806978</span>\nchr3\t<span class=\"m\">138311141</span>\t<span class=\"m\">138315068</span>\tchr3\t<span class=\"m\">138482903</span>\t<span class=\"m\">138484460</span>\nchr11\t<span class=\"m\">126078482</span>\t<span class=\"m\">126084019</span>\tchr11\t<span class=\"m\">126210767</span>\t<span class=\"m\">126227804</span>\n</pre>\n<h4><em>Step3: Running classification</em></h4>\n<p>The parameters of the script are as following,</p>\n<pre>ClassifyLoops.py -l &lt;loops&gt; -f &lt;featurePath&gt; -g &lt;genome&gt; -o &lt;output_name&gt; -i &lt;integer&gt;\n-l <span class=\"o\">[</span>string<span class=\"o\">]</span> loop file with ./bedpe format to be classified.\n-f <span class=\"o\">[</span>string<span class=\"o\">]</span> absolute path of the featureData folder.\n-g <span class=\"o\">[</span>string<span class=\"o\">]</span> genome of loops.\n-o <span class=\"o\">[</span>string<span class=\"o\">]</span> path to save the output result. \n-i <span class=\"o\">[</span>integer<span class=\"o\">(</span><span class=\"m\">1</span>-5<span class=\"o\">)]</span> <span class=\"m\">1</span>. Output all types of loops without filtering<span class=\"p\">;</span>\n                  <span class=\"m\">2</span>. Output only <span class=\"s2\">\"e-p\"</span>/<span class=\"s2\">\"p-e\"</span> <span class=\"nb\">type</span> loops<span class=\"p\">;</span>\n                  <span class=\"m\">3</span>. Output only <span class=\"s2\">\"e-e\"</span> <span class=\"nb\">type</span> loops<span class=\"p\">;</span>\n                  <span class=\"m\">4</span>. Output only <span class=\"s2\">\"p-p\"</span> <span class=\"nb\">type</span> loops<span class=\"p\">;</span>\n                  <span class=\"m\">5</span>. Output only <span class=\"s2\">\"inactivate-*\"</span>/<span class=\"s2\">\"*-inativate\"</span> <span class=\"nb\">type</span> loops<span class=\"p\">;</span>\n</pre>\n<p>Here is a running example:</p>\n<pre><span class=\"nb\">cd</span> LoopPredictor/\npython ./bin/classifyLoops.py -l /path/to/example/K562_classification_example/K562_classifyLoop_example.bedpe <span class=\"se\">\\</span>\n                   -f /path/to/example/K562_classification_example/featureData <span class=\"se\">\\</span>\n                   -o /path/to/example/K562_classification_example -g hg19 -i <span class=\"m\">1</span>\n</pre>\n<h3>2. Predicting loops for unknown cell types</h3>\n<p>The testing data were available in /example/NIH3T3_prediction_example. The structure of folder was shown as below, the featureData is the necessary input for the prediction, and if you want to investigate the topology structures of a set of specific genes, a bed file containing the regions of genes could be provided. If there is no bed file inputing, the prediction will be performed for the whole genome in de novo, which will take some time.</p>\n<pre> example /\n   NIH3T3_prediction_example /\n     featureData /                          <span class=\"c1\"># [necessary input]features of corresonding cell line input for the prediction</span>\n     tmp3 /                                 <span class=\"c1\"># [intermediate]temporary files generated within running</span>\n     log /                                  <span class=\"c1\"># [intermediate]log files generated within running</span>\n     *.bed                                  <span class=\"c1\"># [optional input]input bed file of interested regions for loops prediction</span>\n     feature_out.txt                        <span class=\"c1\"># [intermediate]features are extracted from files within running</span>\n     *predicted_result.bedpe                <span class=\"c1\"># [output]predicted results of loops</span>\n</pre>\n<h4><em>Step1: Choose the proper pre-trained model</em></h4>\n<p>We provided three typical pre-trained model for the prediction, which could be found in folder /trained_model/. The model should be chosen to match the features you can get access to.</p>\n<table>\n<thead>\n<tr>\n<th>pre-trained model</th>\n<th>multi-omics features requirement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Minimum model</td>\n<td>-ATAC-seq, -ChIP-seq/CUT&amp;RUN(H3K27ac,H3K4me3)</td>\n</tr>\n<tr>\n<td>Median model</td>\n<td>-ATAC-seq, -ChIP-seq/CUT&amp;RUN(H3K27ac,H3K4me3,H3K4me1,H3K9ac,H3K9me3,CTCF), -RNA-seq</td>\n</tr>\n<tr>\n<td>Maximum model</td>\n<td>-ATAC-seq, -ChIP-seq/CUT&amp;RUN(H3K27ac,H3K4me3,H3k4me2,H3K4me1,H3K9ac,H3K9me3,H3K36me3,H3K79me2,CTCF,ELF1,JUND,MAX,YY1), -RNA-seq, -Methylation</td>\n</tr></tbody></table>\n<h4><em>Step2: Prepare the input features</em></h4>\n<p>The multi-omics features data should be put into folder featureData/.\nFor ATAC-seq and ChIP-seq/CUT&amp;RUN data, the format should be standard <a href=\"http://genome.ucsc.edu/FAQ/FAQformat#format13\" rel=\"nofollow\">narrowPeak/broadPeak</a>, as shown above.\nFor RNA-seq data, we recommend to use <a href=\"http://homer.ucsd.edu/homer/\" rel=\"nofollow\">Homer</a> to build\ntag files for the alignment, and then \"findPeaks\" function is utilized to detect the highly enriched regions, the output from \"findPeaks\" can be used as the feature file of RNA-seq data after removing the head line.\nFor Methylation data, we recommend to download the .bedRrbs format of RRBS data from <a href=\"https://www.encodeproject.org/\" rel=\"nofollow\">ENCODE</a>,\nwhich is shown as below,</p>\n<pre>chr1\t<span class=\"m\">1000170</span>\t<span class=\"m\">1000171</span>\tK562_Rep3_RRBS\t<span class=\"m\">46</span>\t+\t<span class=\"m\">1000170</span>\t<span class=\"m\">1000171</span>\t<span class=\"m\">155</span>,255,0\t<span class=\"m\">46</span>\t<span class=\"m\">35</span>\nchr1\t<span class=\"m\">1000190</span>\t<span class=\"m\">1000191</span>\tK562_Rep3_RRBS\t<span class=\"m\">46</span>\t+\t<span class=\"m\">1000190</span>\t<span class=\"m\">1000191</span>\t<span class=\"m\">105</span>,255,0\t<span class=\"m\">46</span>\t<span class=\"m\">15</span>\nchr1\t<span class=\"m\">1000191</span>\t<span class=\"m\">1000192</span>\tK562_Rep3_RRBS\t<span class=\"m\">53</span>\t-\t<span class=\"m\">1000191</span>\t<span class=\"m\">1000192</span>\t<span class=\"m\">55</span>,255,0\t<span class=\"m\">53</span>\t<span class=\"m\">9</span>\nchr1\t<span class=\"m\">1000198</span>\t<span class=\"m\">1000199</span>\tK562_Rep3_RRBS\t<span class=\"m\">46</span>\t+\t<span class=\"m\">1000198</span>\t<span class=\"m\">1000199</span>\t<span class=\"m\">105</span>,255,0\t<span class=\"m\">46</span>\t<span class=\"m\">20</span>\nchr1\t<span class=\"m\">1000199</span>\t<span class=\"m\">1000200</span>\tK562_Rep3_RRBS\t<span class=\"m\">53</span>\t-\t<span class=\"m\">1000199</span>\t<span class=\"m\">1000200</span>\t<span class=\"m\">105</span>,255,0\t<span class=\"m\">53</span>\t<span class=\"m\">15</span>\nchr1\t<span class=\"m\">1000206</span>\t<span class=\"m\">1000207</span>\tK562_Rep3_RRBS\t<span class=\"m\">53</span>\t-\t<span class=\"m\">1000206</span>\t<span class=\"m\">1000207</span>\t<span class=\"m\">155</span>,255,0\t<span class=\"m\">53</span>\t<span class=\"m\">26</span>\n</pre>\n<h4><em>Step3: Prepare the interested gene file (optional)</em></h4>\n<p>If you want to detect the enhancer-mediated interactions for a set of interested gene, we recommend to extract the name of genes to the coordinates on the chromatin by <a href=\"https://genome.ucsc.edu/cgi-bin/hgTables?hgsid=804701707_AsIp981xpMMb6T4p83FooaNvjQup\" rel=\"nofollow\">UCSC Table Browser</a>. The coordinates should be ./bed format with at least 3 columns(chrom,start,end).</p>\n<h4><em>Step4: Running prediction</em></h4>\n<p>After preparing the input files, you can run the script \"LoopPredictor.py\" to perform the prediction.\nThe parameters of the script are as following,</p>\n<pre>LoopPredictor.py -b &lt;bedfile&gt; -f &lt;featurePath&gt; -g &lt;genome&gt; -t &lt;trainfile&gt; -m &lt;model&gt; -c &lt;cutoff&gt; -o &lt;output_name&gt;\n-b <span class=\"o\">[</span>string<span class=\"o\">]</span> coordinate .bed file of a <span class=\"nb\">set</span> of interested genes.\n-f <span class=\"o\">[</span>string<span class=\"o\">]</span> absolute path of the featureData folder.\n-g <span class=\"o\">[</span>string<span class=\"o\">]</span> genome of the features data.\n-t <span class=\"o\">[</span>string<span class=\"o\">]</span> .fix file <span class=\"k\">for</span> the pre-trained model.\n-m <span class=\"o\">[</span>string<span class=\"o\">]</span> the pre-trained model chosen to use.\n-c <span class=\"o\">[</span>integer<span class=\"o\">(</span>&gt;0<span class=\"o\">)]</span> the cutoff of loop score to filter the predicted output loops. \n-o <span class=\"o\">[</span>string<span class=\"o\">]</span> path to save the output result.\n</pre>\n<p>Here is a running example:</p>\n<pre><span class=\"nb\">cd</span> LoopPredictor/\npython ./bin/LoopPredictor.py -b /path/to/example/NIH3T3_prediction_example/NIH_geneEnh_example.bed <span class=\"se\">\\</span>\n                   -f /path/to/example/NIH3T3_prediction_example/featureData <span class=\"se\">\\</span>\n                   -g mm10 <span class=\"se\">\\</span>\n                   -t /path/to/trained_model/features_median_forTraining.fix <span class=\"se\">\\</span>\n                   -m /path/to/trained_model/GBRT_trained_model_median.m <span class=\"se\">\\</span>\n                   -c <span class=\"m\">1</span> <span class=\"se\">\\</span>\n                   -o /path/to/example/NIH3T3_prediction_example\n</pre>\n<h3>3. Customize model for extensive research</h3>\n<ul>\n<li><em>Step1: prepare trianing data</em><br>\nThe training data contains target and multi-omics data, target file shoule be the chromatin interactions in ./bedpe format, which is the prior knowledge to train the model. The target file should be 8 columns without head line, the final column must be the score of interaction, which is important for the prediction, shown as below,</li>\n</ul>\n<pre>chr17 <span class=\"m\">75115676</span> <span class=\"m\">75125670</span> chr17 <span class=\"m\">76731709</span> <span class=\"m\">76734226</span> loop_name_1 <span class=\"m\">1</span>\nchr12 <span class=\"m\">56649935</span> <span class=\"m\">56654417</span> chr12 <span class=\"m\">56860478</span> <span class=\"m\">56865446</span> loop_name_2 <span class=\"m\">17</span>\nchr18 <span class=\"m\">53026973</span> <span class=\"m\">53030447</span> chr18 <span class=\"m\">54302527</span> <span class=\"m\">54308273</span> loop_name_3 <span class=\"m\">2</span>\nchr10 <span class=\"m\">15644687</span> <span class=\"m\">15646877</span> chr10 <span class=\"m\">15825760</span> <span class=\"m\">15862181</span> loop_name_4 <span class=\"m\">7</span>\nchr21 <span class=\"m\">35439250</span> <span class=\"m\">35465483</span> chr21 <span class=\"m\">36693517</span> <span class=\"m\">36722679</span> loop_name_5 <span class=\"m\">3</span>\n</pre>\n<p>The multi-omics data for the corresponding cell line should be prepared in the featureData/ folder as mentioned <a href=\"#step2-prepare-the-input-features\" rel=\"nofollow\">above</a>.</p>\n<ul>\n<li><em>Step2: Running training workflow</em>\nAfter preparing the input training data, you can run the script \"Customized_GBRT_trainer.py\" to train your own model.\nThe parameters of the script are as following,</li>\n</ul>\n<pre>Customized_GBRT_trainer.py -t &lt;trainfile&gt; -f &lt;feature&gt; -g &lt;genome&gt; -o &lt;output_path&gt; -n &lt;output_name&gt;\n-t <span class=\"o\">[</span>string<span class=\"o\">]</span> target file of a <span class=\"nb\">set</span> of loops with score to train the model, which is .bedpe format.\n-f <span class=\"o\">[</span>string<span class=\"o\">]</span> absolute path of the featureData folder.\n-g <span class=\"o\">[</span>string<span class=\"o\">]</span> genome of the features data.\n-o <span class=\"o\">[</span>string<span class=\"o\">]</span> path to save the output result.\n-n <span class=\"o\">[</span>string<span class=\"o\">]</span> output name of the model.\n</pre>\n<p>Here is a running example:</p>\n<pre><span class=\"nb\">cd</span> LoopPredictor/\npython ./bin/Customized_GBRT_trainer.py -b /path/to/example/HCT116_custom_model_example/HCT116_custom_example.bedpe <span class=\"se\">\\</span>\n                   -f /path/to/example/HCT116_custom_model_example/featureData <span class=\"se\">\\</span>\n                   -g hg19 <span class=\"se\">\\</span>\n                   -o /path/to/example/NIH3T3_prediction_example <span class=\"se\">\\</span>\n                   -n /path/to/example/NIH3T3_prediction_example/HCT116_custom_model.m\n</pre>\n\n          </div>"}, "last_serial": 6730761, "releases": {"0.3.13": [{"comment_text": "", "digests": {"md5": "17f3105e4c7d06e80a0369a54d26635e", "sha256": "35c1206d7e9698a10648c9600128a6b74b25f918fd24c98a8c178b1d4d1bb473"}, "downloads": -1, "filename": "looppredictor-0.3.13-py3-none-any.whl", "has_sig": false, "md5_digest": "17f3105e4c7d06e80a0369a54d26635e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33790, "upload_time": "2020-03-02T01:48:20", "upload_time_iso_8601": "2020-03-02T01:48:20.928758Z", "url": "https://files.pythonhosted.org/packages/7b/64/ea409a3dc94f584fc71124edaf6cf570cef09721655d3cf1f6c4ff9c236a/looppredictor-0.3.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1165da94b63e94a569b6f5e3486732cb", "sha256": "197d59d8f42d6b2132d42d0d7b57bc6fa03cc93ed3abf2f8e081f428bb1d45f7"}, "downloads": -1, "filename": "looppredictor-0.3.13.tar.gz", "has_sig": false, "md5_digest": "1165da94b63e94a569b6f5e3486732cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21648, "upload_time": "2020-03-02T01:48:23", "upload_time_iso_8601": "2020-03-02T01:48:23.476975Z", "url": "https://files.pythonhosted.org/packages/7a/9e/6160de9f90fc8fe54f3f7c1a34864a6f28b63415b1889042ab9366ad8ce1/looppredictor-0.3.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17f3105e4c7d06e80a0369a54d26635e", "sha256": "35c1206d7e9698a10648c9600128a6b74b25f918fd24c98a8c178b1d4d1bb473"}, "downloads": -1, "filename": "looppredictor-0.3.13-py3-none-any.whl", "has_sig": false, "md5_digest": "17f3105e4c7d06e80a0369a54d26635e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33790, "upload_time": "2020-03-02T01:48:20", "upload_time_iso_8601": "2020-03-02T01:48:20.928758Z", "url": "https://files.pythonhosted.org/packages/7b/64/ea409a3dc94f584fc71124edaf6cf570cef09721655d3cf1f6c4ff9c236a/looppredictor-0.3.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1165da94b63e94a569b6f5e3486732cb", "sha256": "197d59d8f42d6b2132d42d0d7b57bc6fa03cc93ed3abf2f8e081f428bb1d45f7"}, "downloads": -1, "filename": "looppredictor-0.3.13.tar.gz", "has_sig": false, "md5_digest": "1165da94b63e94a569b6f5e3486732cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21648, "upload_time": "2020-03-02T01:48:23", "upload_time_iso_8601": "2020-03-02T01:48:23.476975Z", "url": "https://files.pythonhosted.org/packages/7a/9e/6160de9f90fc8fe54f3f7c1a34864a6f28b63415b1889042ab9366ad8ce1/looppredictor-0.3.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}