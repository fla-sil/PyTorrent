{"info": {"author": "Siddharth Garimella", "author_email": "sidgarimella@outlook.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## Conveyor\n[![Build Status](https://travis-ci.org/sidgarimella/conveyor.svg?branch=master)](https://travis-ci.org/sidgarimella/conveyor)\n\n\nCompute and use Jupyter notebook cell outputs in other notebooks and scripts with just a couple lines of code.\n\n#### Use Cases\n\n - Split ordered steps across multiple notebooks, picking up the most recent state information with each new notebook\n - Prototype and organize workflows entirely in Jupyter notebooks without having to manage script exports\n - Improve performance by reducing overheads from notebook servers and unused code cells\n\n#### Requirements\n\nConveyor currently only supports Jupyter notebooks written in Python. It is important to ensure that you have the version of Python (and any dependencies) used in your notebooks also installed locally, or on the machine using this library.\n\n#### Examples\n\nFor quick and simple access to values in a prior notebook:\n\n```python\nconveyor.run_notebook(\"conveyor/examples/Sample Calculations I.ipynb\", import_globals=True)\n\n# all notebook globals pushed to conveyor.nbglobals with import_globals flag\nfrom conveyor.nbglobals import x, y, z, fig\n\nprint(y)\n```\n\nConveyor can also provide you with any information available in a prior Jupyter workspace. \n\n```python\nresults = conveyor.run_notebook(\"conveyor/examples/Sample Calculations I.ipynb\")\n\n# Cells are zero-indexed, only code cells are counted\ncode_cell_idx = 1\n\n# Get a cell's source code\ncode = results[code_cell_idx]['code']\n\n# Get a cell result\ncell_result = results[code_cell_idx]['result']\n\n# Get cell stdout\ncell_stdout = results[code_cell_idx]['stdout']\n\n# To get any variable available in notebook\nx = results.getvar('x')\n```\n\nThere are options for running notebooks that can be used to optimize notebook execution, or stitch notebooks together in *pipelines*.\n\n```python\nfrom conveyor.multinb import Pipeline\n...\ndata_processing = Pipeline()\ndata_processing.add_notebook(filename=\"conveyor/examples/load_data.ipynb\", carry_vars=['df'])\ndata_processing.add_notebook(filename=\"conveyor/examples/process_data.ipynb\", \n    carry_vars=['magic_number'], start_cell_idx=3)\n\n# Add custom intermediary steps\ndef transform_magic(from_state):\n    to_state = dict()\n    to_state['transformed_magic_number'] = -1 * from_state['magic_number']\n    return to_state\n\ndata_processing.add_transform(transform_magic)\n\n# Get output of selected variables from each stage\nresults = data_processing.run()\n```\n\n#### Installation\n\nThis package is available on pypi. Install it using pip with \n\n`pip install jupyter-conveyor`\n\nConveyor is only compatible with Python 3.5 and above.\n\n#### Documentation\n\nSee the docs folder, or [read them here](https://conveyor.readthedocs.io/en/latest/).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/sidgarimella/conveyor/archive/v_003.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sidgarimella/conveyor", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jupyter-conveyor", "package_url": "https://pypi.org/project/jupyter-conveyor/", "platform": "", "project_url": "https://pypi.org/project/jupyter-conveyor/", "project_urls": {"Download": "https://github.com/sidgarimella/conveyor/archive/v_003.tar.gz", "Homepage": "https://github.com/sidgarimella/conveyor"}, "release_url": "https://pypi.org/project/jupyter-conveyor/0.0.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A toolset to accelerate Jupyter notebook workflows", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Conveyor</h2>\n<p><a href=\"https://travis-ci.org/sidgarimella/conveyor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec224421e8abb99e2260f698ba6c93c98e103000/68747470733a2f2f7472617669732d63692e6f72672f736964676172696d656c6c612f636f6e7665796f722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Compute and use Jupyter notebook cell outputs in other notebooks and scripts with just a couple lines of code.</p>\n<h4>Use Cases</h4>\n<ul>\n<li>Split ordered steps across multiple notebooks, picking up the most recent state information with each new notebook</li>\n<li>Prototype and organize workflows entirely in Jupyter notebooks without having to manage script exports</li>\n<li>Improve performance by reducing overheads from notebook servers and unused code cells</li>\n</ul>\n<h4>Requirements</h4>\n<p>Conveyor currently only supports Jupyter notebooks written in Python. It is important to ensure that you have the version of Python (and any dependencies) used in your notebooks also installed locally, or on the machine using this library.</p>\n<h4>Examples</h4>\n<p>For quick and simple access to values in a prior notebook:</p>\n<pre><span class=\"n\">conveyor</span><span class=\"o\">.</span><span class=\"n\">run_notebook</span><span class=\"p\">(</span><span class=\"s2\">\"conveyor/examples/Sample Calculations I.ipynb\"</span><span class=\"p\">,</span> <span class=\"n\">import_globals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># all notebook globals pushed to conveyor.nbglobals with import_globals flag</span>\n<span class=\"kn\">from</span> <span class=\"nn\">conveyor.nbglobals</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">fig</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>Conveyor can also provide you with any information available in a prior Jupyter workspace.</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">conveyor</span><span class=\"o\">.</span><span class=\"n\">run_notebook</span><span class=\"p\">(</span><span class=\"s2\">\"conveyor/examples/Sample Calculations I.ipynb\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cells are zero-indexed, only code cells are counted</span>\n<span class=\"n\">code_cell_idx</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Get a cell's source code</span>\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">code_cell_idx</span><span class=\"p\">][</span><span class=\"s1\">'code'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get a cell result</span>\n<span class=\"n\">cell_result</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">code_cell_idx</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get cell stdout</span>\n<span class=\"n\">cell_stdout</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">code_cell_idx</span><span class=\"p\">][</span><span class=\"s1\">'stdout'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># To get any variable available in notebook</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">getvar</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n</pre>\n<p>There are options for running notebooks that can be used to optimize notebook execution, or stitch notebooks together in <em>pipelines</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conveyor.multinb</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n<span class=\"o\">...</span>\n<span class=\"n\">data_processing</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">()</span>\n<span class=\"n\">data_processing</span><span class=\"o\">.</span><span class=\"n\">add_notebook</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"conveyor/examples/load_data.ipynb\"</span><span class=\"p\">,</span> <span class=\"n\">carry_vars</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'df'</span><span class=\"p\">])</span>\n<span class=\"n\">data_processing</span><span class=\"o\">.</span><span class=\"n\">add_notebook</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"conveyor/examples/process_data.ipynb\"</span><span class=\"p\">,</span> \n    <span class=\"n\">carry_vars</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'magic_number'</span><span class=\"p\">],</span> <span class=\"n\">start_cell_idx</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add custom intermediary steps</span>\n<span class=\"k\">def</span> <span class=\"nf\">transform_magic</span><span class=\"p\">(</span><span class=\"n\">from_state</span><span class=\"p\">):</span>\n    <span class=\"n\">to_state</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"n\">to_state</span><span class=\"p\">[</span><span class=\"s1\">'transformed_magic_number'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">from_state</span><span class=\"p\">[</span><span class=\"s1\">'magic_number'</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">to_state</span>\n\n<span class=\"n\">data_processing</span><span class=\"o\">.</span><span class=\"n\">add_transform</span><span class=\"p\">(</span><span class=\"n\">transform_magic</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get output of selected variables from each stage</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">data_processing</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h4>Installation</h4>\n<p>This package is available on pypi. Install it using pip with</p>\n<p><code>pip install jupyter-conveyor</code></p>\n<p>Conveyor is only compatible with Python 3.5 and above.</p>\n<h4>Documentation</h4>\n<p>See the docs folder, or <a href=\"https://conveyor.readthedocs.io/en/latest/\" rel=\"nofollow\">read them here</a>.</p>\n\n          </div>"}, "last_serial": 6396135, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ceee7d2c041acb8fda3a4b0767405c1e", "sha256": "9262cfd16b98e75736d46edc04194318d47bdaaa0ec7f15cedaf2e99a75933da"}, "downloads": -1, "filename": "jupyter_conveyor-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "ceee7d2c041acb8fda3a4b0767405c1e", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=2.7", "size": 22116, "upload_time": "2020-01-04T05:07:51", "upload_time_iso_8601": "2020-01-04T05:07:51.606028Z", "url": "https://files.pythonhosted.org/packages/7a/6d/3a9d70b244201dd7a35e7c542ad1afda6f2bf4dd86b7f593657045c5f804/jupyter_conveyor-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "56fa273c3ca253e5fd54d9511efc43a6", "sha256": "a40fea1b54c38ded0910b725eaf5ae74ffc8191aa0210499f7636dbd56cc757a"}, "downloads": -1, "filename": "jupyter-conveyor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "56fa273c3ca253e5fd54d9511efc43a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6538, "upload_time": "2020-01-03T04:28:52", "upload_time_iso_8601": "2020-01-03T04:28:52.230712Z", "url": "https://files.pythonhosted.org/packages/c9/ab/8de6678001f0444bc2031e3ee40379bb9ad4e0253933aeba78c902efb7a4/jupyter-conveyor-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "08a67bd29b860a46f4f01f78dc133bac", "sha256": "07b8cdb9acc8e7e07fe3238e68205505137ca00fee838be7c48f288eaf5a636e"}, "downloads": -1, "filename": "jupyter-conveyor-0.0.2.tar.gz", "has_sig": false, "md5_digest": "08a67bd29b860a46f4f01f78dc133bac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6781, "upload_time": "2020-01-04T05:07:48", "upload_time_iso_8601": "2020-01-04T05:07:48.576253Z", "url": "https://files.pythonhosted.org/packages/6f/ba/5056eb841ebedd3ffb1a071af725d0cdc9840b4ec4a580c1b1b3c8187d34/jupyter-conveyor-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b70ba8abb3b1cc0894e8b3689dbb42bc", "sha256": "9fb17956e80ad54eb87bdf63110a596dd94907cd30d75b89e4eae70c2b0ef394"}, "downloads": -1, "filename": "jupyter-conveyor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b70ba8abb3b1cc0894e8b3689dbb42bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7650, "upload_time": "2020-01-04T23:15:27", "upload_time_iso_8601": "2020-01-04T23:15:27.657335Z", "url": "https://files.pythonhosted.org/packages/e1/9e/bb326469b099873d90f561582b84e2468ea95bef60acf44bc8916fba7499/jupyter-conveyor-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b70ba8abb3b1cc0894e8b3689dbb42bc", "sha256": "9fb17956e80ad54eb87bdf63110a596dd94907cd30d75b89e4eae70c2b0ef394"}, "downloads": -1, "filename": "jupyter-conveyor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b70ba8abb3b1cc0894e8b3689dbb42bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7650, "upload_time": "2020-01-04T23:15:27", "upload_time_iso_8601": "2020-01-04T23:15:27.657335Z", "url": "https://files.pythonhosted.org/packages/e1/9e/bb326469b099873d90f561582b84e2468ea95bef60acf44bc8916fba7499/jupyter-conveyor-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:19 2020"}