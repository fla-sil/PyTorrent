{"info": {"author": "Artem Shelest", "author_email": "artem.e.shelest@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-Admin-Subview\n===================\n\nEmbed Flask-Admin list views to an arbitrary page:\n\n.. image:: https://raw.githubusercontent.com/artemShelest/flask-admin-subview/master/res/screen1.png\n\n.. image:: https://raw.githubusercontent.com/artemShelest/flask-admin-subview/master/res/screen2.png\n\nLimitations\n===========\n\n- Inline edits are not supported\n- Bootstrap3 templates only\n\nInstallation\n============\n\n.. code-block:: console\n\n    pip install flask-admin-subview\n\n\nIntegration\n===========\n\nThe easiest way to integrate is to use helpers for the details view of the model. The following example demonstrates\nintegration of subview to show relations of SQLAlchemy model in the details page.\n\n**DB Schema**\n\n.. code-block:: python\n\n    class ContentModel(db.Model):\n        __table__ = \"content\"\n        id = db.Column(db.Integer, primary_key=True)\n        container_id = db.Column(db.Integer, db.ForeignKey(\"container.id\"), nullable=False)\n\n    class ContainerModel(db.Model):\n        __table__ = \"container\"\n        id = db.Column(db.Integer, primary_key=True)\n        content = db.relationship(ContentModel)\n\n\n**Prepare your subview**\n\nIt is a good idea to subclass existing view of your model:\n\n.. code-block:: python\n\n    import flask_admin_subview\n\n    class ContentModelSubview(flask_admin_subview.View, ContentModelView):\n        pass\n\n\nOr you can create a brand-new view for the subview:\n\n.. code-block:: python\n\n    from flask_admin.contrib.sqla import ModelView\n    import flask_admin_subview\n\n    class ContentModelSubview(flask_admin_subview.View, ModelView):\n        pass\n\n\nAdd query filter to show content for certain container only, container id will be passed as a URL parameter:\n\n.. code-block:: python\n\n    class ContentModelSubview(...):\n        def get_query(self):\n            return self._extend_query(super(ContentModelSubview, self).get_query())\n\n        def get_count_query(self):\n            return self._extend_query(super(ContentModelSubview, self).get_count_query())\n\n        def _extend_query(self, query):\n            container_id = request.args.get('id')\n            if container_id is None:\n                abort(400, \"Container id required\")\n            return query.filter(ContentModel.container_id == container_id)\n\n\n**Initialize an extension**\n\n.. code-block:: python\n\n    from flask_admin_subview import Subview\n\n    app = Flask(__name__)\n    admin = Admin(app, template_mode=\"bootstrap3\")\n    # only supports bootstrap3 mode\n    Subview(app, template_mode=\"bootstrap3\")\n\n\n**Add your subview as a blueprint**\n\n.. code-block:: python\n\n    app = Flask(__name__)\n    # ...\n    app.register_blueprint(\n        ContentModelSubview(Content, db.session, \"Content\", endpoint=\"content_subview\").\n        create_blueprint(admin))\n\n\n**Prepare container view**\n\nUse helper to display subview in the model's details:\n\n.. code-block:: python\n\n    from flask_admin_subview import SubviewContainerMixin, SubviewEntry\n\n    class ContainerView(SubviewContainerMixin, ModelView):\n        can_view_details = True\n        subviews = (\n            # specify that we need to pass id from the location URL to the subview\n            SubviewEntry(\"/admin/content_subview/\", \"Content Subview\", \"id\"),\n        )\n\n\nTODO\n====\n\n- Add tests\n- Add example app code comments\n- Add Bootstrap2 templates\n- Possibly, support inline edits\n- Describe advanced usage", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/artemShelest/flask-admin-subview", "keywords": "flask-admin,list,view,embedded,nested,subview,one-to-many,relation,view relations", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-Admin-Subview", "package_url": "https://pypi.org/project/Flask-Admin-Subview/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Admin-Subview/", "project_urls": {"Homepage": "https://github.com/artemShelest/flask-admin-subview"}, "release_url": "https://pypi.org/project/Flask-Admin-Subview/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Embedded Flask-Admin list views.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flask-admin-subview\">\n<h2>Flask-Admin-Subview</h2>\n<p>Embed Flask-Admin list views to an arbitrary page:</p>\n<img alt=\"https://raw.githubusercontent.com/artemShelest/flask-admin-subview/master/res/screen1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/289bd30761c5f1779d1769bd2d779b11ac660c6d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f617274656d5368656c6573742f666c61736b2d61646d696e2d737562766965772f6d61737465722f7265732f73637265656e312e706e67\">\n<img alt=\"https://raw.githubusercontent.com/artemShelest/flask-admin-subview/master/res/screen2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b42a22bb0c86cfd8fb9c0d48dad17544a90af3a8/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f617274656d5368656c6573742f666c61736b2d61646d696e2d737562766965772f6d61737465722f7265732f73637265656e322e706e67\">\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li>Inline edits are not supported</li>\n<li>Bootstrap3 templates only</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"go\">pip install flask-admin-subview</span>\n</pre>\n</div>\n<div id=\"integration\">\n<h2>Integration</h2>\n<p>The easiest way to integrate is to use helpers for the details view of the model. The following example demonstrates\nintegration of subview to show relations of SQLAlchemy model in the details page.</p>\n<p><strong>DB Schema</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ContentModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">__table__</span> <span class=\"o\">=</span> <span class=\"s2\">\"content\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">container_id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s2\">\"container.id\"</span><span class=\"p\">),</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContainerModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">__table__</span> <span class=\"o\">=</span> <span class=\"s2\">\"container\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"n\">ContentModel</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Prepare your subview</strong></p>\n<p>It is a good idea to subclass existing view of your model:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flask_admin_subview</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContentModelSubview</span><span class=\"p\">(</span><span class=\"n\">flask_admin_subview</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">,</span> <span class=\"n\">ContentModelView</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Or you can create a brand-new view for the subview:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_admin.contrib.sqla</span> <span class=\"kn\">import</span> <span class=\"n\">ModelView</span>\n<span class=\"kn\">import</span> <span class=\"nn\">flask_admin_subview</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContentModelSubview</span><span class=\"p\">(</span><span class=\"n\">flask_admin_subview</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">,</span> <span class=\"n\">ModelView</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Add query filter to show content for certain container only, container id will be passed as a URL parameter:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ContentModelSubview</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extend_query</span><span class=\"p\">(</span><span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ContentModelSubview</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_count_query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extend_query</span><span class=\"p\">(</span><span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ContentModelSubview</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_count_query</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_extend_query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">):</span>\n        <span class=\"n\">container_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">container_id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">abort</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s2\">\"Container id required\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ContentModel</span><span class=\"o\">.</span><span class=\"n\">container_id</span> <span class=\"o\">==</span> <span class=\"n\">container_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Initialize an extension</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_admin_subview</span> <span class=\"kn\">import</span> <span class=\"n\">Subview</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span> <span class=\"o\">=</span> <span class=\"n\">Admin</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">template_mode</span><span class=\"o\">=</span><span class=\"s2\">\"bootstrap3\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># only supports bootstrap3 mode</span>\n<span class=\"n\">Subview</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">template_mode</span><span class=\"o\">=</span><span class=\"s2\">\"bootstrap3\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Add your subview as a blueprint</strong></p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_blueprint</span><span class=\"p\">(</span>\n    <span class=\"n\">ContentModelSubview</span><span class=\"p\">(</span><span class=\"n\">Content</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"s2\">\"Content\"</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"s2\">\"content_subview\"</span><span class=\"p\">)</span><span class=\"o\">.</span>\n    <span class=\"n\">create_blueprint</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Prepare container view</strong></p>\n<p>Use helper to display subview in the model\u2019s details:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_admin_subview</span> <span class=\"kn\">import</span> <span class=\"n\">SubviewContainerMixin</span><span class=\"p\">,</span> <span class=\"n\">SubviewEntry</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContainerView</span><span class=\"p\">(</span><span class=\"n\">SubviewContainerMixin</span><span class=\"p\">,</span> <span class=\"n\">ModelView</span><span class=\"p\">):</span>\n    <span class=\"n\">can_view_details</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">subviews</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"c1\"># specify that we need to pass id from the location URL to the subview</span>\n        <span class=\"n\">SubviewEntry</span><span class=\"p\">(</span><span class=\"s2\">\"/admin/content_subview/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Content Subview\"</span><span class=\"p\">,</span> <span class=\"s2\">\"id\"</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Add tests</li>\n<li>Add example app code comments</li>\n<li>Add Bootstrap2 templates</li>\n<li>Possibly, support inline edits</li>\n<li>Describe advanced usage</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4681452, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "425be994c5a7c48194ac08ad69003091", "sha256": "6fb9d0a100f60da9003e132ca602b110568fd9ac3a88e34102f7c9ec147b0776"}, "downloads": -1, "filename": "Flask-Admin-Subview-0.1.1.tar.gz", "has_sig": false, "md5_digest": "425be994c5a7c48194ac08ad69003091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10356, "upload_time": "2019-01-10T14:51:45", "upload_time_iso_8601": "2019-01-10T14:51:45.920831Z", "url": "https://files.pythonhosted.org/packages/bb/a7/02be221d9f441c00f727b4937abc2192081f978f91fb73023102da724dd0/Flask-Admin-Subview-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "425be994c5a7c48194ac08ad69003091", "sha256": "6fb9d0a100f60da9003e132ca602b110568fd9ac3a88e34102f7c9ec147b0776"}, "downloads": -1, "filename": "Flask-Admin-Subview-0.1.1.tar.gz", "has_sig": false, "md5_digest": "425be994c5a7c48194ac08ad69003091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10356, "upload_time": "2019-01-10T14:51:45", "upload_time_iso_8601": "2019-01-10T14:51:45.920831Z", "url": "https://files.pythonhosted.org/packages/bb/a7/02be221d9f441c00f727b4937abc2192081f978f91fb73023102da724dd0/Flask-Admin-Subview-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:10 2020"}