{"info": {"author": "Ilia Khaustov", "author_email": "ilya.khaustov@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# Batchout\n\nFramework for building data pipelines that: \n\n1. Extract batch of payloads with hierarchical structure like JSON or XML;\n2. Transform batch of payloads to batch of rows for a table defined by columns;\n3. Load batch of table rows to persistent storage.\n\n## Install\n\n`pip install batchout`\n\n## Usage\n\nIt is better explained by example.\n\nLet's say we periodically fetch a JSON message from some REST API:\n\n```json\n{\n  \"user\": {\n    \"id\": \"someuserid\",\n    \"last_seen\": \"2019-11-01T00:00:00\"\n  },\n  \"sessions\": [\n     {\n        \"id\": \"somesessionid\",\n        \"created_at\": \"2019-10-01T00:00:00\",\n        \"device\": {\n           \"useragent\": \"chrome\"\n        }\n     },\n     {\n        \"id\": \"othersessionid\",\n        \"created_at\": \"2019-11-01T00:00:00\",\n        \"device\": {\n           \"useragent\": \"firefox\"\n        }\n     }\n  ]\n}\n```\n\nFetched data has to be put into database table `user_session` like this:\n\n```\nuser_id       user_last_seen        session_id      session_created_at    session_useragent\n-------------------------------------------------------------------------------------------\nsomeuserid    2019-11-01T00:00:00   somesessionid   2019-10-01T00:00:00   chrome\nsomeuserid    2019-11-01T00:00:00   othersessionid  2019-11-01T00:00:00   firefox\n```\n\nWith Batchout, you don't need to write boilerplate code.\n\nJust use `batchout.Batch` for configuring and running your pipeline.\n\n```python\nfrom batchout import Batch\n\n\nbatch = Batch.from_config(\n    dict(\n        inputs=dict(\n            some_api=dict(\n                type='http',\n                method='get',\n                uri='https://some.api/my/user/sessions',\n            ),\n        ),\n        extractors=dict(\n            first_match_in_json=dict(\n                type='jsonpath',\n            ),\n        ),\n        indexes=dict(\n            session_idx=dict(\n                type='for_list',\n                path='sessions',\n            )\n        ),\n        columns=dict(\n            user_id=dict(\n                type='string',\n                path='user.id',\n            ),\n            user_last_seen=dict(\n                type='string',\n                path='user.last_seen',\n            ),\n            session_id=dict(\n                type='string',\n                path='sessions[{session_idx}].id',  # notice usage of session_idx defined as index above\n            ),\n            session_created_at=dict(\n                type='timestamp',\n                path='sessions[{session_idx}].created_at',\n            ),\n            session_useragent=dict(\n                type='timestamp',\n                path='sessions[{session_idx}].device.useragent',\n            ),\n        ),\n        selectors=dict(\n            all_sessions=dict(\n                type='sql',\n                query='select * from some_api',\n                columns=[\n                    'user_id',\n                    'user_last_seen',\n                    'session_id',\n                    'session_created_at',\n                    'session_useragent',\n                ]\n            )\n        ),\n        outputs=dict(\n            local_db=dict(\n                type='postgres',\n                mode='upsert',\n                keys=['user_id', 'session_id'],\n                host='localhost',\n                port=5432,\n                dbname='somedb',\n                table='user_session',\n                from_env=dict(\n                    user='DB_USER',          # DB_USER and\n                    password='DB_PASSWORD',  # DB_PASSWORD are read from environment\n                ),\n            ),\n        ),\n        tasks=dict(\n            read_sessions=dict(\n                type='reader',\n                inputs=['some_api'],\n            ),\n            walk_sessions=dict(\n                type='walker',\n                inputs=['some_api'],\n                indexes=['session_idx'],\n                columns=[\n                    'user_id',\n                    'user_last_seen',\n                    'session_id',\n                    'session_created_at',\n                    'session_useragent',\n                ],\n            ),\n            write_sessions_to_local_db=dict(\n                type='writer',\n                selector='all_sessions',\n                outputs=['local_db']\n            )\n        )\n    ),\n    defaults=dict(\n        columns=dict(\n            extractor='first_match_in_json',\n        ),\n        indexes=dict(\n            extractor='first_match_in_json',\n        ),\n    ),\n)\nbatch.run_once()\n```\n\n`Batch.run_once()` processes exactly one batch of payloads from each input.\n\n`Batch.run_forever()` does the same in infinite loop.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ilia-khaustov/batchout", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "batchout", "package_url": "https://pypi.org/project/batchout/", "platform": "", "project_url": "https://pypi.org/project/batchout/", "project_urls": {"Homepage": "https://github.com/ilia-khaustov/batchout"}, "release_url": "https://pypi.org/project/batchout/0.2.0/", "requires_dist": ["arrow", "requests", "lxml", "jsonpath-rw", "psycopg2-binary"], "requires_python": ">=3.6", "summary": "Framework for building data pipelines", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Batchout</h1>\n<p>Framework for building data pipelines that:</p>\n<ol>\n<li>Extract batch of payloads with hierarchical structure like JSON or XML;</li>\n<li>Transform batch of payloads to batch of rows for a table defined by columns;</li>\n<li>Load batch of table rows to persistent storage.</li>\n</ol>\n<h2>Install</h2>\n<p><code>pip install batchout</code></p>\n<h2>Usage</h2>\n<p>It is better explained by example.</p>\n<p>Let's say we periodically fetch a JSON message from some REST API:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"user\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"someuserid\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"last_seen\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-11-01T00:00:00\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"sessions\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n     <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"somesessionid\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-10-01T00:00:00\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"device\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"nt\">\"useragent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"chrome\"</span>\n        <span class=\"p\">}</span>\n     <span class=\"p\">},</span>\n     <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"othersessionid\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-11-01T00:00:00\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"device\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"nt\">\"useragent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"firefox\"</span>\n        <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Fetched data has to be put into database table <code>user_session</code> like this:</p>\n<pre><code>user_id       user_last_seen        session_id      session_created_at    session_useragent\n-------------------------------------------------------------------------------------------\nsomeuserid    2019-11-01T00:00:00   somesessionid   2019-10-01T00:00:00   chrome\nsomeuserid    2019-11-01T00:00:00   othersessionid  2019-11-01T00:00:00   firefox\n</code></pre>\n<p>With Batchout, you don't need to write boilerplate code.</p>\n<p>Just use <code>batchout.Batch</code> for configuring and running your pipeline.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">batchout</span> <span class=\"kn\">import</span> <span class=\"n\">Batch</span>\n\n\n<span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">Batch</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">some_api</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'http'</span><span class=\"p\">,</span>\n                <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'get'</span><span class=\"p\">,</span>\n                <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">'https://some.api/my/user/sessions'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">extractors</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">first_match_in_json</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'jsonpath'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">indexes</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">session_idx</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'for_list'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'sessions'</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'string'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'user.id'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">user_last_seen</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'string'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'user.last_seen'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">session_id</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'string'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'sessions[</span><span class=\"si\">{session_idx}</span><span class=\"s1\">].id'</span><span class=\"p\">,</span>  <span class=\"c1\"># notice usage of session_idx defined as index above</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">session_created_at</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'timestamp'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'sessions[</span><span class=\"si\">{session_idx}</span><span class=\"s1\">].created_at'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">session_useragent</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'timestamp'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'sessions[</span><span class=\"si\">{session_idx}</span><span class=\"s1\">].device.useragent'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">selectors</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">all_sessions</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'sql'</span><span class=\"p\">,</span>\n                <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'select * from some_api'</span><span class=\"p\">,</span>\n                <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"s1\">'user_id'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'user_last_seen'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'session_id'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'session_created_at'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'session_useragent'</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">local_db</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'postgres'</span><span class=\"p\">,</span>\n                <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'upsert'</span><span class=\"p\">,</span>\n                <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">,</span> <span class=\"s1\">'session_id'</span><span class=\"p\">],</span>\n                <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n                <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5432</span><span class=\"p\">,</span>\n                <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s1\">'somedb'</span><span class=\"p\">,</span>\n                <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">'user_session'</span><span class=\"p\">,</span>\n                <span class=\"n\">from_env</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                    <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'DB_USER'</span><span class=\"p\">,</span>          <span class=\"c1\"># DB_USER and</span>\n                    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'DB_PASSWORD'</span><span class=\"p\">,</span>  <span class=\"c1\"># DB_PASSWORD are read from environment</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">tasks</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">read_sessions</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'reader'</span><span class=\"p\">,</span>\n                <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'some_api'</span><span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">walk_sessions</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'walker'</span><span class=\"p\">,</span>\n                <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'some_api'</span><span class=\"p\">],</span>\n                <span class=\"n\">indexes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'session_idx'</span><span class=\"p\">],</span>\n                <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"s1\">'user_id'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'user_last_seen'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'session_id'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'session_created_at'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'session_useragent'</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">write_sessions_to_local_db</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'writer'</span><span class=\"p\">,</span>\n                <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"s1\">'all_sessions'</span><span class=\"p\">,</span>\n                <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'local_db'</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">extractor</span><span class=\"o\">=</span><span class=\"s1\">'first_match_in_json'</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">indexes</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">extractor</span><span class=\"o\">=</span><span class=\"s1\">'first_match_in_json'</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">run_once</span><span class=\"p\">()</span>\n</pre>\n<p><code>Batch.run_once()</code> processes exactly one batch of payloads from each input.</p>\n<p><code>Batch.run_forever()</code> does the same in infinite loop.</p>\n\n          </div>"}, "last_serial": 6574614, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "225a95d6372f0d71e6459c76a4d441dd", "sha256": "162aa632918763a7776daea8a0d3880ed71855647685040e2d60dc59b4fd2598"}, "downloads": -1, "filename": "batchout-0.0.1-py3.6.egg", "has_sig": false, "md5_digest": "225a95d6372f0d71e6459c76a4d441dd", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 39975, "upload_time": "2019-11-04T21:03:19", "upload_time_iso_8601": "2019-11-04T21:03:19.478781Z", "url": "https://files.pythonhosted.org/packages/60/5f/27cc80c06aa40d08a7efd2ae8612a8112fcdcd5d7e2903ee0750e9807a28/batchout-0.0.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "896b807ac22d0702261aacc7e66f0a7e", "sha256": "34ed7f08907eac57011ae1252a7840eb154fa5e948b856c85ddb7d1bffd4e7e9"}, "downloads": -1, "filename": "batchout-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "896b807ac22d0702261aacc7e66f0a7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17024, "upload_time": "2019-11-04T21:03:16", "upload_time_iso_8601": "2019-11-04T21:03:16.873518Z", "url": "https://files.pythonhosted.org/packages/c0/e4/f2acbe4a3416ae0ce9194b78fe3ee7c716afbf1d568831541bc0ac61666a/batchout-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27139b3c73e51fad728baa9526426cec", "sha256": "9d4f1a2b29e73722c0c03d1c2f15aa96d80950efa3d5b39625004253f631e544"}, "downloads": -1, "filename": "batchout-0.0.1.tar.gz", "has_sig": false, "md5_digest": "27139b3c73e51fad728baa9526426cec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10735, "upload_time": "2019-11-04T21:03:20", "upload_time_iso_8601": "2019-11-04T21:03:20.919089Z", "url": "https://files.pythonhosted.org/packages/df/2c/8d80ab0e0a084d35399795778534d8b2abc425e4457fac14f9581ca46952/batchout-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b23d0ec161c64b456a392c12ca5c433c", "sha256": "b81570cfc6e178bb8d1369c28877f5dfd6253c88f78265b42772ec9e865c1f0c"}, "downloads": -1, "filename": "batchout-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b23d0ec161c64b456a392c12ca5c433c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19538, "upload_time": "2019-11-27T21:21:40", "upload_time_iso_8601": "2019-11-27T21:21:40.161868Z", "url": "https://files.pythonhosted.org/packages/9b/e3/b12a25afec91d5a2d163316361bda8166721ca399a7a0f24645148aae1f8/batchout-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a90d2d3da33d99fa54b653f95ad64e5f", "sha256": "85dd1e305b0c350b72ab1a440a4a933abaa20805a5d74ae684afdcf7e54ad19b"}, "downloads": -1, "filename": "batchout-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a90d2d3da33d99fa54b653f95ad64e5f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11060, "upload_time": "2019-11-27T21:21:41", "upload_time_iso_8601": "2019-11-27T21:21:41.890393Z", "url": "https://files.pythonhosted.org/packages/c1/f9/6ca19af9d0fe05ba30b3a8cb512e593bbe1fb91fda3b90ef0b020c106151/batchout-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2735889bcd986ef41501fcb2bd98c160", "sha256": "fb35a0a4b5a188edbd6e78e74e82fab3f174e3a2a1511bd8a6897b2a89d2a8ae"}, "downloads": -1, "filename": "batchout-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2735889bcd986ef41501fcb2bd98c160", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30950, "upload_time": "2020-02-05T07:51:06", "upload_time_iso_8601": "2020-02-05T07:51:06.651004Z", "url": "https://files.pythonhosted.org/packages/5f/c2/0cf92e3d3ea0c5f7f4df77d4f2990add9725b55057fcf05aed466e1c147d/batchout-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b84dc0bed9f995184cc40e2fd442c811", "sha256": "13be095c97be0d54e52531ff606e2fc70c877409979576201787c038253919a2"}, "downloads": -1, "filename": "batchout-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b84dc0bed9f995184cc40e2fd442c811", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15489, "upload_time": "2020-02-05T07:51:08", "upload_time_iso_8601": "2020-02-05T07:51:08.541092Z", "url": "https://files.pythonhosted.org/packages/98/02/8754ba4af5d9b1ffb2b04184d30e7a735c0ffe198f511377b0fb4c0d2c7f/batchout-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2735889bcd986ef41501fcb2bd98c160", "sha256": "fb35a0a4b5a188edbd6e78e74e82fab3f174e3a2a1511bd8a6897b2a89d2a8ae"}, "downloads": -1, "filename": "batchout-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2735889bcd986ef41501fcb2bd98c160", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30950, "upload_time": "2020-02-05T07:51:06", "upload_time_iso_8601": "2020-02-05T07:51:06.651004Z", "url": "https://files.pythonhosted.org/packages/5f/c2/0cf92e3d3ea0c5f7f4df77d4f2990add9725b55057fcf05aed466e1c147d/batchout-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b84dc0bed9f995184cc40e2fd442c811", "sha256": "13be095c97be0d54e52531ff606e2fc70c877409979576201787c038253919a2"}, "downloads": -1, "filename": "batchout-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b84dc0bed9f995184cc40e2fd442c811", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15489, "upload_time": "2020-02-05T07:51:08", "upload_time_iso_8601": "2020-02-05T07:51:08.541092Z", "url": "https://files.pythonhosted.org/packages/98/02/8754ba4af5d9b1ffb2b04184d30e7a735c0ffe198f511377b0fb4c0d2c7f/batchout-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:44 2020"}