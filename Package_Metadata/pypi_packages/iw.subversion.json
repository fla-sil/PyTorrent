{"info": {"author": "Ingeniweb", "author_email": "support@ingeniweb.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=====================\niw.subversion package\n=====================\n\n.. contents::\n\nWhat is iw.subversion ?\n=======================\n\nThis package contains helpers for SVN integration.\nTo install it, just run::\n\n    $ python setup.py install\n\nsvn_check_source\n================\n\nIn a community project, opened to various contributors, there are a few things \nto take care of in order not to break the code. I am not talking about \ncode reviewing but about bad code editing that brakes it all.\n\nMost frequent errors are:\n\n- <tab> insertions, that get mixed with space-based indentation\n- carriage return insertion, before line feeds with some weird windows editors\n\nInstead of tracking the developers that commited such things, \nand send them an army of white rabbits, an automatic code check \nis way better. It is not a good idea though, to clean up incoming code. \nThe best thing to do is to block unwanted changes and warn the \ncommiters, so they learn about it.\n\n`iw.subversion` provides a `svn_check_source` console script to do it.\nThis script has to be called in the pre-commit hook script \n(look up in SVN documentation). The call should look like::\n\n    svn_check_source \"$REPOS\" \"$TXN\" || exit 1", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://ingeniweb.svn.sourceforge.net/svnroot/ingeniweb/iw.subversion", "keywords": "subversion commit hook", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "iw.subversion", "package_url": "https://pypi.org/project/iw.subversion/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iw.subversion/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://ingeniweb.svn.sourceforge.net/svnroot/ingeniweb/iw.subversion"}, "release_url": "https://pypi.org/project/iw.subversion/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Contains hooks and utilities for Subversion", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#what-is-iw-subversion\" id=\"id1\" rel=\"nofollow\">What is iw.subversion ?</a></li>\n<li><a href=\"#svn-check-source\" id=\"id2\" rel=\"nofollow\">svn_check_source</a></li>\n</ul>\n</div>\n<div id=\"what-is-iw-subversion\">\n<h2><a href=\"#id1\" rel=\"nofollow\">What is iw.subversion ?</a></h2>\n<p>This package contains helpers for SVN integration.\nTo install it, just run:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"svn-check-source\">\n<h2><a href=\"#id2\" rel=\"nofollow\">svn_check_source</a></h2>\n<p>In a community project, opened to various contributors, there are a few things\nto take care of in order not to break the code. I am not talking about\ncode reviewing but about bad code editing that brakes it all.</p>\n<p>Most frequent errors are:</p>\n<ul>\n<li>&lt;tab&gt; insertions, that get mixed with space-based indentation</li>\n<li>carriage return insertion, before line feeds with some weird windows editors</li>\n</ul>\n<p>Instead of tracking the developers that commited such things,\nand send them an army of white rabbits, an automatic code check\nis way better. It is not a good idea though, to clean up incoming code.\nThe best thing to do is to block unwanted changes and warn the\ncommiters, so they learn about it.</p>\n<p><cite>iw.subversion</cite> provides a <cite>svn_check_source</cite> console script to do it.\nThis script has to be called in the pre-commit hook script\n(look up in SVN documentation). The call should look like:</p>\n<pre>svn_check_source \"$REPOS\" \"$TXN\" || exit 1\n</pre>\n</div>\n\n          </div>"}, "last_serial": 755461, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e70a3e722ccec6fa98745d09df7273fe", "sha256": "e46a71e6a21a1fe2cae7c7fa7287e566e2990b9128af08260e1d67b10a31f6c0"}, "downloads": -1, "filename": "iw.subversion-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e70a3e722ccec6fa98745d09df7273fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11601, "upload_time": "2008-01-02T18:06:08", "upload_time_iso_8601": "2008-01-02T18:06:08Z", "url": "https://files.pythonhosted.org/packages/4d/01/2a44428181de7cbded93832c4e4b8a13189611f34eeef0aff53553a053b0/iw.subversion-0.1.0.tar.gz", "yanked": false}], "0.1.0dev-r6994": [{"comment_text": "", "digests": {"md5": "d5b6db79147fabae514cccd18bc86be2", "sha256": "8eafda9a1b655d61a792d1b3d9cb479581c61894d99f28824b82f818b91f4345"}, "downloads": -1, "filename": "iw.subversion-0.1.0dev-r6994.tar.gz", "has_sig": false, "md5_digest": "d5b6db79147fabae514cccd18bc86be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11627, "upload_time": "2008-01-02T18:05:39", "upload_time_iso_8601": "2008-01-02T18:05:39Z", "url": "https://files.pythonhosted.org/packages/93/5d/515df599bfb770628ba3bf0848efcbb04b9c797b3241f14cbc3e00d1eff3/iw.subversion-0.1.0dev-r6994.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e70a3e722ccec6fa98745d09df7273fe", "sha256": "e46a71e6a21a1fe2cae7c7fa7287e566e2990b9128af08260e1d67b10a31f6c0"}, "downloads": -1, "filename": "iw.subversion-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e70a3e722ccec6fa98745d09df7273fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11601, "upload_time": "2008-01-02T18:06:08", "upload_time_iso_8601": "2008-01-02T18:06:08Z", "url": "https://files.pythonhosted.org/packages/4d/01/2a44428181de7cbded93832c4e4b8a13189611f34eeef0aff53553a053b0/iw.subversion-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:30 2020"}