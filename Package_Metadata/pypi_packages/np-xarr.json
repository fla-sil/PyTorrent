{"info": {"author": "jagkagd", "author_email": "jagkagd@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# np-xarr\n\nPerform a numpy array transformation intuitively by giving simple patterns.\n\n## Install\n\n```shell script\n$ pip install np-xarr\n```\n\n## Usage\n\n```python\n>> from npxarr import X\n>> import numpy as np\n\n>> a = X('[1, 2, 3, ...]', '[[1, 2], [2, 3], ...]')(np.r_[0, 1, 2, 3, 4, 5]) # sliding window\n\n[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]\n\n>> a = X('[[1, 2, ...], \n    [3, 4, ...], ...]', '[[1, 3, ...], [2, 4, ...], ...]') # transpose\n>> a(np.array([[0, 1], [2, 3], [4, 5]])\n\n[[0 2 4]\n [1 3 5]]\n```\nor a simpler form:\n```python\n>> a = X('[[a0, a1], [a1, a2], ...]')\n>> a = X('[[a00, a10, ...], [a01, a11, ...], ...]')\n```\nwhere `a` denotes the first input array, the number behind it denotes the index of the item.\nFor example, `a01` means the item in the first input array with index `(0, 1)`.\n\n\nMultiple inputs or outputs are supported.\n\n```python\n>> a = X(['[1, 2, ...]', '[a, b, ...]'],  # multiple input in a list\n         '[1, a, 2, b, ...]; [[a, 1], [b, 2], ...]') # or seperate by ;\n# or >> a = X('[a0, b0, a1, b1, ...]; [[b0, a0], [b1, a1], ...]')\n>> a([np.r_[1, 2, 3, 4, 5], np.r_[10, 20, 30]]) # for incompatible input shapes, it can figure out the maximum valid output shape\n\n(array([ 1, 10,  2, 20,  3, 30,  4], dtype=int32), \n array([[10,  1], [20,  2], [30,  3]], dtype=int32))\n\n>> a[1]([np.r_[1, 2], np.r_[10, 20, 30]) # or just get the transformation for second output\n\n[[10  1], [20  2]]\n```\nFunctions can be applied.\n```python\n>> a = X('[1, 2, 3, 4, ...]', '[times(2), neg(1), times(4), neg(3), ...]', \n         f={'neg': lambda x: -x, 'times': lambda x: 10*x})\n# a = X('[times(a1), neg(a0), times(a3), neg(a2), ...]')\n```\nnotice here the output with sequence [2, 1, 4, 3, ...]\n```python\n>> a(np.r_[0, 1, 2, 3, 4, 5])\n\n[10, 0, 30, -2, 50, -4]\n```\nand unpacking\n```python\n>> a = X('1; 2', '[*1, *2, *1]')([np.r_[1, 2],  np.r_[10, 20]])\n# a = X('[*a, *b, *a]')\n\n[ 1  2 10 20  1  2]\n```\nYou can provide output shape by hand\n```python\n>> a = X('[1, 2, ...]', '[[1, 1, ...], [2, 2, ...], ...]')\n# a = X('[[a0, a0, ...], [a1, a1, ...], ...]')\n>> a(np.arange(6), outShapes=(-1, 3)) # or outShapes=[(-1, 3)], \n\n[[0 0 0]\n [1 1 1]\n [2 2 2]\n [3 3 3]\n [4 4 4]\n [5 5 5]]\n```\nAnd by providing parameter `extraShapes`...\n```python\n>> a = X('[1, 2, 3, ...]', '[[1, 2], [2, 3], ...]')\n# a = X('[[a0, a1], [a1, a2], ...]')\n>> a(np.r_[0, 1, 2, 3], extraShapes=(1, 0)))\n\n[[0 1]\n [1 2]\n [2 3]\n [3 0]]\n```\n\n## How np-xarr does\n\nWhen the pattern is given, e.g.,\n\n```python\n>> a = X('[a, b, c, ...]', '[[a, b], [b, c], ...]')\n```\n`X` will deduce the transformation equation between the input and output, and can be seen by\n```python\n>> a\n\ny0 = |_x0_| + |_x1_|\n```\nwhere `|_x0_|` means `floor(x0)`.\nThe equation `y0 = |_x0_| + |_x1_|` build the relation between the output index `(x0, x1)` and the input index `(y0,)` as follows:\n\noutput index (x0, x1) | item | equation (x0, x1) -> (y0, ) | index (y0, ) | input item |\n--------------------- | ---- | -------- | ------------------ | ---- |\n(0, 0) | a | 0 + 0 = 0 | (0, ) | a\n(0, 1) | b | 0 + 1 = 1 | (1, ) | b\n(1, 0) | b | 1 + 0 = 1 | (1, ) | b\n(1, 1) | c | 1 + 1 = 2 | (2, ) | c\n\nAnother example:\n```python\n>> a = X('[a, b, ...]', '[a, a, b, b, ...]')\n>> a\n\ny0 = |_0.50*x0_|\n```\n\noutput index (x0, ) | item | equation (x0, ) -> (y0, ) | input index (y0, ) | item |\n------------------- | ---- | -------- | ------------------ | ---- |\n(0, ) | a | floor(0.5*0) = 0 | (0, ) | a\n(1, ) | a | floor(0.5*1) = 0 | (0, ) | a\n(2, ) | b | floor(0.5*2) = 1 | (1, ) | b\n(3, ) | b | floor(0.5*3) = 2 | (1, ) | b\n\n## Notes:\n\n* It is recommended to write patterns with at least two periods, e.g. [1, 2, ...] -> [[1, 2], ...] will be inferred as [1, 2, 3, ...] -> [[1, 2], [2, 3], ...] rather than [[1, 2], [3, 4], ...]\n\n* Inefficient for large array\n\n    The output array is built by code like `np.array([inArrays[indexConverter(index)] for index <= outShape])`\n\n* Only support transformation with formula `$y_j = floor(a_ij*x_i) + b_j + floor(c_ij*mod(x_i, d_ij))$`\n\n## Todo\n\n- [ ] Improve exception system\n- [ ] Try to deduce possible transformation using native numpy function from calculated equation\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jagkagd/np-xarr", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "np-xarr", "package_url": "https://pypi.org/project/np-xarr/", "platform": "", "project_url": "https://pypi.org/project/np-xarr/", "project_urls": {"Homepage": "https://github.com/jagkagd/np-xarr"}, "release_url": "https://pypi.org/project/np-xarr/0.1.6/", "requires_dist": ["cytoolz", "numpy"], "requires_python": ">=3.5", "summary": "Perform a numpy array transformation by giving examples.", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>np-xarr</h1>\n<p>Perform a numpy array transformation intuitively by giving simple patterns.</p>\n<h2>Install</h2>\n<pre>$ pip install np-xarr\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">npxarr</span> <span class=\"kn\">import</span> <span class=\"n\">X</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[1, 2, 3, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[[1, 2], [2, 3], ...]'</span><span class=\"p\">)(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span> <span class=\"c1\"># sliding window</span>\n\n<span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[[1, 2, ...], </span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span><span class=\"s1\">', '</span><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span><span class=\"s1\">') # transpose</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]])</span>\n\n<span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span><span class=\"p\">]]</span>\n</pre>\n<p>or a simpler form:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[[a0, a1], [a1, a2], ...]'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[[a00, a10, ...], [a01, a11, ...], ...]'</span><span class=\"p\">)</span>\n</pre>\n<p>where <code>a</code> denotes the first input array, the number behind it denotes the index of the item.\nFor example, <code>a01</code> means the item in the first input array with index <code>(0, 1)</code>.</p>\n<p>Multiple inputs or outputs are supported.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">([</span><span class=\"s1\">'[1, 2, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[a, b, ...]'</span><span class=\"p\">],</span>  <span class=\"c1\"># multiple input in a list</span>\n         <span class=\"s1\">'[1, a, 2, b, ...]; [[a, 1], [b, 2], ...]'</span><span class=\"p\">)</span> <span class=\"c1\"># or seperate by ;</span>\n<span class=\"c1\"># or &gt;&gt; a = X('[a0, b0, a1, b1, ...]; [[b0, a0], [b1, a1], ...]')</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]])</span> <span class=\"c1\"># for incompatible input shapes, it can figure out the maximum valid output shape</span>\n\n<span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int32</span><span class=\"p\">),</span> \n <span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int32</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">])</span> <span class=\"c1\"># or just get the transformation for second output</span>\n\n<span class=\"p\">[[</span><span class=\"mi\">10</span>  <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">20</span>  <span class=\"mi\">2</span><span class=\"p\">]]</span>\n</pre>\n<p>Functions can be applied.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[1, 2, 3, 4, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[times(2), neg(1), times(4), neg(3), ...]'</span><span class=\"p\">,</span> \n         <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'neg'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s1\">'times'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">})</span>\n<span class=\"c1\"># a = X('[times(a1), neg(a0), times(a3), neg(a2), ...]')</span>\n</pre>\n<p>notice here the output with sequence [2, 1, 4, 3, ...]</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n\n<span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n<p>and unpacking</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'1; 2'</span><span class=\"p\">,</span> <span class=\"s1\">'[*1, *2, *1]'</span><span class=\"p\">)([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>  <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]])</span>\n<span class=\"c1\"># a = X('[*a, *b, *a]')</span>\n\n<span class=\"p\">[</span> <span class=\"mi\">1</span>  <span class=\"mi\">2</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span>  <span class=\"mi\">1</span>  <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>You can provide output shape by hand</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[1, 2, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[[1, 1, ...], [2, 2, ...], ...]'</span><span class=\"p\">)</span>\n<span class=\"c1\"># a = X('[[a0, a0, ...], [a1, a1, ...], ...]')</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">outShapes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># or outShapes=[(-1, 3)], </span>\n\n<span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">4</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span><span class=\"p\">]]</span>\n</pre>\n<p>And by providing parameter <code>extraShapes</code>...</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[1, 2, 3, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[[1, 2], [2, 3], ...]'</span><span class=\"p\">)</span>\n<span class=\"c1\"># a = X('[[a0, a1], [a1, a2], ...]')</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">extraShapes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n\n<span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n</pre>\n<h2>How np-xarr does</h2>\n<p>When the pattern is given, e.g.,</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[a, b, c, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[[a, b], [b, c], ...]'</span><span class=\"p\">)</span>\n</pre>\n<p><code>X</code> will deduce the transformation equation between the input and output, and can be seen by</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"o\">|</span><span class=\"n\">_x0_</span><span class=\"o\">|</span> <span class=\"o\">+</span> <span class=\"o\">|</span><span class=\"n\">_x1_</span><span class=\"o\">|</span>\n</pre>\n<p>where <code>|_x0_|</code> means <code>floor(x0)</code>.\nThe equation <code>y0 = |_x0_| + |_x1_|</code> build the relation between the output index <code>(x0, x1)</code> and the input index <code>(y0,)</code> as follows:</p>\n<table>\n<thead>\n<tr>\n<th>output index (x0, x1)</th>\n<th>item</th>\n<th>equation (x0, x1) -&gt; (y0, )</th>\n<th>index (y0, )</th>\n<th>input item</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(0, 0)</td>\n<td>a</td>\n<td>0 + 0 = 0</td>\n<td>(0, )</td>\n<td>a</td>\n</tr>\n<tr>\n<td>(0, 1)</td>\n<td>b</td>\n<td>0 + 1 = 1</td>\n<td>(1, )</td>\n<td>b</td>\n</tr>\n<tr>\n<td>(1, 0)</td>\n<td>b</td>\n<td>1 + 0 = 1</td>\n<td>(1, )</td>\n<td>b</td>\n</tr>\n<tr>\n<td>(1, 1)</td>\n<td>c</td>\n<td>1 + 1 = 2</td>\n<td>(2, )</td>\n<td>c</td>\n</tr></tbody></table>\n<p>Another example:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"s1\">'[a, b, ...]'</span><span class=\"p\">,</span> <span class=\"s1\">'[a, a, b, b, ...]'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"o\">|</span><span class=\"n\">_0</span><span class=\"o\">.</span><span class=\"mi\">50</span><span class=\"o\">*</span><span class=\"n\">x0_</span><span class=\"o\">|</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>output index (x0, )</th>\n<th>item</th>\n<th>equation (x0, ) -&gt; (y0, )</th>\n<th>input index (y0, )</th>\n<th>item</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(0, )</td>\n<td>a</td>\n<td>floor(0.5*0) = 0</td>\n<td>(0, )</td>\n<td>a</td>\n</tr>\n<tr>\n<td>(1, )</td>\n<td>a</td>\n<td>floor(0.5*1) = 0</td>\n<td>(0, )</td>\n<td>a</td>\n</tr>\n<tr>\n<td>(2, )</td>\n<td>b</td>\n<td>floor(0.5*2) = 1</td>\n<td>(1, )</td>\n<td>b</td>\n</tr>\n<tr>\n<td>(3, )</td>\n<td>b</td>\n<td>floor(0.5*3) = 2</td>\n<td>(1, )</td>\n<td>b</td>\n</tr></tbody></table>\n<h2>Notes:</h2>\n<ul>\n<li>\n<p>It is recommended to write patterns with at least two periods, e.g. [1, 2, ...] -&gt; [[1, 2], ...] will be inferred as [1, 2, 3, ...] -&gt; [[1, 2], [2, 3], ...] rather than [[1, 2], [3, 4], ...]</p>\n</li>\n<li>\n<p>Inefficient for large array</p>\n<p>The output array is built by code like <code>np.array([inArrays[indexConverter(index)] for index &lt;= outShape])</code></p>\n</li>\n<li>\n<p>Only support transformation with formula <code>$y_j = floor(a_ij*x_i) + b_j + floor(c_ij*mod(x_i, d_ij))$</code></p>\n</li>\n</ul>\n<h2>Todo</h2>\n<ul>\n<li>[ ] Improve exception system</li>\n<li>[ ] Try to deduce possible transformation using native numpy function from calculated equation</li>\n</ul>\n\n          </div>"}, "last_serial": 6379315, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "28f5f2547d2bec3960bbd300c437409d", "sha256": "7db90818108c6fc90864c0033197562b0641c98cddd8c38b00a635ca60c41ceb"}, "downloads": -1, "filename": "np_xarr-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "28f5f2547d2bec3960bbd300c437409d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11421, "upload_time": "2019-12-12T07:22:35", "upload_time_iso_8601": "2019-12-12T07:22:35.582712Z", "url": "https://files.pythonhosted.org/packages/68/97/ce94a8780e43e7bc81a3e1d34f9aed361086e31918b3974e133b419c7adb/np_xarr-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c21b86f046213eea6abbef35325e5fb", "sha256": "f1903e25d3f595151bdb9cc289f622192ebab123f494d5b04e36c310636fd2f4"}, "downloads": -1, "filename": "np-xarr-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3c21b86f046213eea6abbef35325e5fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9245, "upload_time": "2019-12-12T07:22:38", "upload_time_iso_8601": "2019-12-12T07:22:38.664475Z", "url": "https://files.pythonhosted.org/packages/2e/7e/b5be56bc72558e46b6059efe9950a3b0641c20d6a5731bdf5070c42b4ca8/np-xarr-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "14fcebb286131435e8bbad85aafc294d", "sha256": "0b9aee8362e9e4955cf5d478001514498970252e17a9ecbec3074869138218a2"}, "downloads": -1, "filename": "np_xarr-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "14fcebb286131435e8bbad85aafc294d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11479, "upload_time": "2019-12-12T07:42:25", "upload_time_iso_8601": "2019-12-12T07:42:25.038803Z", "url": "https://files.pythonhosted.org/packages/56/ac/d0df6385c313de0daeda93251dbe6ec0b28e05859a3fa7792b1589c66e0d/np_xarr-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a8dbd85b9dd724533baab03a0ddf0ce", "sha256": "36af5dcd9e2afaa6fb1b544a81ad02189ab6a46afb31944a73014064687e56eb"}, "downloads": -1, "filename": "np-xarr-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8a8dbd85b9dd724533baab03a0ddf0ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9328, "upload_time": "2019-12-12T07:42:28", "upload_time_iso_8601": "2019-12-12T07:42:28.142777Z", "url": "https://files.pythonhosted.org/packages/e9/60/b13bbf88bb2bc333c2c35b23b63ef452500b5c99ce74550fb7502f445957/np-xarr-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "704b5c060de31a24cfbf021d59c31747", "sha256": "6fc1f49ba77f7883693c68c30b61663739260f051268d9882304a763afa31e7e"}, "downloads": -1, "filename": "np_xarr-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "704b5c060de31a24cfbf021d59c31747", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12301, "upload_time": "2019-12-17T09:32:54", "upload_time_iso_8601": "2019-12-17T09:32:54.529363Z", "url": "https://files.pythonhosted.org/packages/bc/4b/d537286dade8a211de08eda788efb0a76adda9c98f6b1c18a521471ec978/np_xarr-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2f49cc6d0551478afe0b5e3fa709514", "sha256": "d4cfac53fa79e2d28ad50057ebf9d1d6b11c7ef7906dee47c0104df4a13b283d"}, "downloads": -1, "filename": "np-xarr-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a2f49cc6d0551478afe0b5e3fa709514", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10176, "upload_time": "2019-12-17T09:32:57", "upload_time_iso_8601": "2019-12-17T09:32:57.900352Z", "url": "https://files.pythonhosted.org/packages/0d/f0/166801fe45310879c22d7edb4f1a0798f3f7bbf25c925e9005dd99881dc5/np-xarr-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "60cead78362e43961e8da65349fbb30f", "sha256": "23ffc517afd900e60a709b5c53a93e4b892ea914758e61bc4196ad7206d27b6e"}, "downloads": -1, "filename": "np_xarr-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "60cead78362e43961e8da65349fbb30f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12890, "upload_time": "2019-12-17T14:50:33", "upload_time_iso_8601": "2019-12-17T14:50:33.524296Z", "url": "https://files.pythonhosted.org/packages/7a/62/478e1995204a2fbbc2e3639603c4fe403d9af2bea729e55503c6e7cc17db/np_xarr-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99a6901fce7266600c274bcc0149c1ac", "sha256": "019a12e5939cc29204aafcadcc664981b4eb90bd68988c3b71454f7dae32db34"}, "downloads": -1, "filename": "np-xarr-0.1.5.tar.gz", "has_sig": false, "md5_digest": "99a6901fce7266600c274bcc0149c1ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10767, "upload_time": "2019-12-17T14:50:36", "upload_time_iso_8601": "2019-12-17T14:50:36.608214Z", "url": "https://files.pythonhosted.org/packages/88/99/5d205929b690b4d4e8ed7d3d099cea8724e391f79a8debcc1324b4554957/np-xarr-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "4f7464912a35253e9d885dc43334c9b5", "sha256": "285ef3ca0831fdb2eb3c4b761d1e8b2e585d0b605cc2969623a0e7e4dd5d4265"}, "downloads": -1, "filename": "np_xarr-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4f7464912a35253e9d885dc43334c9b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13564, "upload_time": "2019-12-31T12:44:31", "upload_time_iso_8601": "2019-12-31T12:44:31.863183Z", "url": "https://files.pythonhosted.org/packages/90/5f/3388c87f2df0c8443bab2a2b1f9dd318a1f7eb49d83e797298849741f46f/np_xarr-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "156cc324671f8c9aaa08806c78960c9e", "sha256": "e0f43730fa1aaee515acfe70a49c4187ea7c017e4a68c4b7003075a9a5c452cb"}, "downloads": -1, "filename": "np-xarr-0.1.6.tar.gz", "has_sig": false, "md5_digest": "156cc324671f8c9aaa08806c78960c9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11163, "upload_time": "2019-12-31T12:44:33", "upload_time_iso_8601": "2019-12-31T12:44:33.461666Z", "url": "https://files.pythonhosted.org/packages/6f/91/007c54fb15f901eb24d59f7516ee37c30fa0c56ae1f6b06c4f09459ec42f/np-xarr-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f7464912a35253e9d885dc43334c9b5", "sha256": "285ef3ca0831fdb2eb3c4b761d1e8b2e585d0b605cc2969623a0e7e4dd5d4265"}, "downloads": -1, "filename": "np_xarr-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4f7464912a35253e9d885dc43334c9b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13564, "upload_time": "2019-12-31T12:44:31", "upload_time_iso_8601": "2019-12-31T12:44:31.863183Z", "url": "https://files.pythonhosted.org/packages/90/5f/3388c87f2df0c8443bab2a2b1f9dd318a1f7eb49d83e797298849741f46f/np_xarr-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "156cc324671f8c9aaa08806c78960c9e", "sha256": "e0f43730fa1aaee515acfe70a49c4187ea7c017e4a68c4b7003075a9a5c452cb"}, "downloads": -1, "filename": "np-xarr-0.1.6.tar.gz", "has_sig": false, "md5_digest": "156cc324671f8c9aaa08806c78960c9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11163, "upload_time": "2019-12-31T12:44:33", "upload_time_iso_8601": "2019-12-31T12:44:33.461666Z", "url": "https://files.pythonhosted.org/packages/6f/91/007c54fb15f901eb24d59f7516ee37c30fa0c56ae1f6b06c4f09459ec42f/np-xarr-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:30 2020"}