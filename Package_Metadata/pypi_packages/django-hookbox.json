{"info": {"author": "Duane Griffin", "author_email": "duaneg@dghda.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Utilities"], "description": "==============\nIMPORTANT NOTE\n==============\n\nAlthough hookbox is a very quick and easy way to experiment with COMET, it is\nnot suitable for production use at this time. Unfortunately, at the time of\nwriting, the hookbox project looks moribund. Hopefully this situation changes\nsoon, but for the meantime this module should only be used for quick\nprototypes and experimentation.\n\n============\nRequirements\n============\n\n    * Django 1.3+\n    * Hookbox 0.3.3\n    * testfixtures 1.9.2+ (for unit tests)\n\nIt should work with Django 1.2 and earlier versions of testfixtures, however it\nhas not been tested. If you try it please let me know how you get on.\n\nOther versions of hookbox (including the latest dev versions) probably will\n*not* work, as things like command-line option names and URLs seem to change\nfrequently. On the other hand, any problems should be easy to fix.\n\n============\nInstallation\n============\n\nInstall the usual way, e.g.: ::\n\n    pip install django-hookbox\n\nAdd to ``INSTALLED_APPS`` in ``settings.py``: ::\n\n    INSTALLED_APPS = (\n        ...\n        'django_hookbox',\n        ...\n    )\n\nAdd to your ``urls.py``: ::\n\n    urlpatterns = patterns('',\n        ...\n        (r'^hookbox/', include('djhookbox.urls')),\n        ...\n\n=============\nCONFIGURATION\n=============\n\nAt a minimum you will need a channel handler to allow channel creation. E.g.: ::\n\n    @whcallback('create')\n    def create_good_channels(op, user, channel = '-'):\n        assert op == 'create'\n        if channel.startswith('/good/'):\n            return {\n              'history_size': 1,\n              'reflective':   False,\n              'presenceful':  False,\n              'moderated':    True,\n            }\n        elif channel.startswith('/bad/'):\n            return 'no cookie for you!'\n\nThe first time a user subscribes to a channel it is implicitly created. If no\ncreate callback returns an options dict this will fail.\n\nTo fail operations (e.g. deny a subscription attempt) provide callbacks that\nreturn a failure message or raise an exception.\n\nYou will probably also want to configure various hookbox options in\n``settings.py``. The available options are: ::\n\n    HOOKBOX_INTERFACE: The interface the hookbox server listens on.\n    HOOKBOX_PORT: The port the hookbox server listens on.\n    HOOKBOX_CBHOST: The host the Django server listens on.\n    HOOKBOX_CBPORT: The port the Django server listens on.\n    HOOKBOX_CBPATH: The path prefix the webhook views are located under.\n    HOOKBOX_WEBHOOK_SECRET: A secret token passed by hookbox to webhooks.\n    HOOKBOX_REST_SECRET: A secret token passed by Django to hookbox.\n    HOOKBOX_ADMIN_PASSWORD: The hookbox administrator password.\n\n=====\nUSAGE\n=====\n\nA management command is provided to run the hookbox server. See\n``./manage.py help runhookbox`` for the available options. By default options\nfrom ``settings.py`` (see above) will be used.\n\nTo publish to a channel from with Django call, e.g.: ::\n\n    djhookbox.publish('/some-channel/', {'data': 'some-data'})", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/duaneg/django-hookbox", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-hookbox", "package_url": "https://pypi.org/project/django-hookbox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-hookbox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/duaneg/django-hookbox"}, "release_url": "https://pypi.org/project/django-hookbox/0.3/", "requires_dist": null, "requires_python": null, "summary": "Integrate hookbox with Django.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"important-note\">\n<h2>IMPORTANT NOTE</h2>\n<p>Although hookbox is a very quick and easy way to experiment with COMET, it is\nnot suitable for production use at this time. Unfortunately, at the time of\nwriting, the hookbox project looks moribund. Hopefully this situation changes\nsoon, but for the meantime this module should only be used for quick\nprototypes and experimentation.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<blockquote>\n<ul>\n<li>Django 1.3+</li>\n<li>Hookbox 0.3.3</li>\n<li>testfixtures 1.9.2+ (for unit tests)</li>\n</ul>\n</blockquote>\n<p>It should work with Django 1.2 and earlier versions of testfixtures, however it\nhas not been tested. If you try it please let me know how you get on.</p>\n<p>Other versions of hookbox (including the latest dev versions) probably will\n<em>not</em> work, as things like command-line option names and URLs seem to change\nfrequently. On the other hand, any problems should be easy to fix.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the usual way, e.g.:</p>\n<pre>pip install django-hookbox\n</pre>\n<p>Add to <tt>INSTALLED_APPS</tt> in <tt>settings.py</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'django_hookbox',\n    ...\n)\n</pre>\n<p>Add to your <tt>urls.py</tt>:</p>\n<pre>urlpatterns = patterns('',\n    ...\n    (r'^hookbox/', include('djhookbox.urls')),\n    ...\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>CONFIGURATION</h2>\n<p>At a minimum you will need a channel handler to allow channel creation. E.g.:</p>\n<pre>@whcallback('create')\ndef create_good_channels(op, user, channel = '-'):\n    assert op == 'create'\n    if channel.startswith('/good/'):\n        return {\n          'history_size': 1,\n          'reflective':   False,\n          'presenceful':  False,\n          'moderated':    True,\n        }\n    elif channel.startswith('/bad/'):\n        return 'no cookie for you!'\n</pre>\n<p>The first time a user subscribes to a channel it is implicitly created. If no\ncreate callback returns an options dict this will fail.</p>\n<p>To fail operations (e.g. deny a subscription attempt) provide callbacks that\nreturn a failure message or raise an exception.</p>\n<p>You will probably also want to configure various hookbox options in\n<tt>settings.py</tt>. The available options are:</p>\n<pre>HOOKBOX_INTERFACE: The interface the hookbox server listens on.\nHOOKBOX_PORT: The port the hookbox server listens on.\nHOOKBOX_CBHOST: The host the Django server listens on.\nHOOKBOX_CBPORT: The port the Django server listens on.\nHOOKBOX_CBPATH: The path prefix the webhook views are located under.\nHOOKBOX_WEBHOOK_SECRET: A secret token passed by hookbox to webhooks.\nHOOKBOX_REST_SECRET: A secret token passed by Django to hookbox.\nHOOKBOX_ADMIN_PASSWORD: The hookbox administrator password.\n</pre>\n</div>\n<div id=\"usage\">\n<h2>USAGE</h2>\n<p>A management command is provided to run the hookbox server. See\n<tt>./manage.py help runhookbox</tt> for the available options. By default options\nfrom <tt>settings.py</tt> (see above) will be used.</p>\n<p>To publish to a channel from with Django call, e.g.:</p>\n<pre>djhookbox.publish('/some-channel/', {'data': 'some-data'})\n</pre>\n</div>\n\n          </div>"}, "last_serial": 789810, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ba92e83c929fd606a5bcfe8fb01abad1", "sha256": "91ef827e63e3222a6d392746b63e45fb123db999d9a2e9861cabbe0e22672473"}, "downloads": -1, "filename": "django-hookbox-0.1.tar.gz", "has_sig": false, "md5_digest": "ba92e83c929fd606a5bcfe8fb01abad1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8325, "upload_time": "2011-05-21T19:01:08", "upload_time_iso_8601": "2011-05-21T19:01:08.231994Z", "url": "https://files.pythonhosted.org/packages/ca/bc/e25c06d21fc0d84c5b0a7bd8f69eca3e9c7e7817419fc17a6b3763b002f4/django-hookbox-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "470bf78726e69ec0946536f469c76799", "sha256": "d39ae257544127127ad89c3f122561ef124bb6098bd57362afab1b127de18ead"}, "downloads": -1, "filename": "django-hookbox-0.2.tar.gz", "has_sig": false, "md5_digest": "470bf78726e69ec0946536f469c76799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8335, "upload_time": "2011-05-21T19:35:44", "upload_time_iso_8601": "2011-05-21T19:35:44.153858Z", "url": "https://files.pythonhosted.org/packages/f3/ee/033a41c1c5912c9eb6991a622c935cd37f6deadfd6c982c9672f45dae03b/django-hookbox-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "02ea41104c4b0df84665159ab949b52d", "sha256": "99457876471a6f442547e4848ce08a93e06f53eb163bf2f39c8ce6cafc47fc24"}, "downloads": -1, "filename": "django-hookbox-0.3.tar.gz", "has_sig": false, "md5_digest": "02ea41104c4b0df84665159ab949b52d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9736, "upload_time": "2011-05-29T14:51:19", "upload_time_iso_8601": "2011-05-29T14:51:19.212263Z", "url": "https://files.pythonhosted.org/packages/c4/9b/d4e6f711495c7014b06014a24f6925116a7c5eb8f7b35bb92db13b613a8a/django-hookbox-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02ea41104c4b0df84665159ab949b52d", "sha256": "99457876471a6f442547e4848ce08a93e06f53eb163bf2f39c8ce6cafc47fc24"}, "downloads": -1, "filename": "django-hookbox-0.3.tar.gz", "has_sig": false, "md5_digest": "02ea41104c4b0df84665159ab949b52d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9736, "upload_time": "2011-05-29T14:51:19", "upload_time_iso_8601": "2011-05-29T14:51:19.212263Z", "url": "https://files.pythonhosted.org/packages/c4/9b/d4e6f711495c7014b06014a24f6925116a7c5eb8f7b35bb92db13b613a8a/django-hookbox-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:42 2020"}