{"info": {"author": "k0rventen", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# Control of an Elgato Avea bulb using Python\n\n[![PyPI](https://img.shields.io/pypi/v/avea.svg)](https://pypi.org/project/avea/)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/k0rventen/avea.svg?)](https://lgtm.com/projects/g/k0rventen/avea/context:python)\n[![Build Status](https://travis-ci.com/k0rventen/avea.svg?branch=master)](https://travis-ci.com/k0rventen/avea)\n\n\nThe [Avea bulb from Elgato](https://www.amazon.co.uk/Elgato-Avea-Dynamic-Light-Android-Smartphone/dp/B00O4EZ11Q) is a light bulb that connects to an iPhone or Android app via Bluetooth.\n\nThis project aim to control it using a Bluetooth 4.0 compatible device and some Python magic.\n\nTested on Raspberry Pi 3 and Zero W (with integrated bluetooth). \n\n- [Control of an Elgato Avea bulb using Python](#control-of-an-elgato-avea-bulb-using-python)\n  - [TL;DR](#tldr)\n  - [Library usage](#library-usage)\n  - [Code documentation](#code-documentation)\n  - [Reverse engineering of the bulb](#reverse-engineering-of-the-bulb)\n  - [Communication protocol](#communication-protocol)\n    - [Intro](#intro)\n    - [Commands and payload explanation](#commands-and-payload-explanation)\n    - [Color command](#color-command)\n    - [Brightness command](#brightness-command)\n  - [Walkthrough & Example](#walkthrough--example)\n    - [Brightness](#brightness)\n      - [Color](#color)\n  - [Python implementation](#python-implementation)\n    - [One-liner for color computation](#one-liner-for-color-computation)\n    - [Bluepy writeCharacteristic() overwrite](#bluepy-writecharacteristic-overwrite)\n    - [Working with notifications using Bluepy](#working-with-notifications-using-bluepy)\n  - [TODO](#todo)\n\n## TL;DR\n\nThe lib requires [bluepy](https://github.com/IanHarvey/bluepy), so we must install the following dependancy, wheter we use pip or install from source.\n\n**Dependancies**\n\n```\nsudo apt install libglib2.0-dev\n```\n\n**Then install from pip3**\n\n```bash\nsudo apt install python3-pip\nsudo pip3 install --upgrade avea\n```\n\n**or if you prefer installing from source**\n\n```bash\ngit clone https://github.com/k0rventen/avea\ncd avea\nsudo python3 setup.py install\n```\n\n## Library usage\n\nBelow is a quick how-to of the various methods of the library.\n\n**Note : the discover\\_avea\\_bulbs() function needs root privileges, due to bluepy's scan(). From your user, you can use sudo -E.**\n\n```python\nimport avea # Important !\n\n# Get nearby bulbs in a list, then retrieve the name of all bulbs\n# using this method requires root privileges (because of bluepy's scan() )\nnearbyBulbs = avea.discover_avea_bulbs()\nfor bulb in nearbyBulbs:\n    bulb.get_name()\n    print(bulb.name)\n\n# Or create a bulb if you know its address (after a scan for example)\nmyBulb = avea.Bulb(\"xx:xx:xx:xx:xx:xx\")\n\n# You can set the brightness, color and name\nmyBulb.set_brightness(2000)                 # ranges from 0 to 4095\nmyBulb.set_color(0,4095,0,0)                # in order : white, red, green, blue\nmyBulb.set_rgb(0,255,0)                     # RGB compliant function\nmyBulb.set_smooth_transition(255,255,0,3)   # change to rgb(255,255,0) in 3s\nmyBulb.set_name(\"bedroom\")                  # new name of the bulb\n\n# And get the brightness, color and name\nprint(myBulb.get_name())                # Query the name of the bulb\ntheColor = myBulb.get_color()           # Query the current color\ntheRgbColor = myBulb.get_rgb()          # Query the bulb in a RGB format\ntheBrightness = myBulb.get_brightness() # query the current brightness\n```\n\nThat's it. Pretty simple.\n\nCheck the explanations below for more informations, or check the sources !\n\n\n## Code documentation\n\n## Reverse engineering of the bulb\n\nI've used the informations given by [Marmelatze](https://github.com/Marmelatze/avea_bulb) as well as some reverse engineering using a `btsnoop_hci.log` file from an Android device and Wireshark.\n\nBelow is a pretty thorough explanation of the BLE communication and the python implementation to communicate with the bulb.\n\nAs BLE communication is quite complicated, you might want to skip all of this if you just want to use the library. But it's quite interesting.\n\n\n## Communication protocol\n\n### Intro\n\nTo communicate the bulb uses Bluetooth 4.0 \"BLE\", which provide some interesting features for communications, to learn more about it go [here](https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gatt).\n\nTo sum up, the bulb emits a set of `services` which have `characteristics`. We use the latter to communicate to the device.\n\nThe bulb uses the service `f815e810456c6761746f4d756e696368` and the associated characteristic `f815e811456c6761746f4d756e696368` to send and receive informations about its state (color, name and brightness). We'll transmit over this characteristic.\n\n### Commands and payload explanation\n\nThe first bytes of transmission is the command. A few commands are available :\n\nValue | Command\n--- | ---\n0x35 | set / get bulb color\n0x57 | set / get bulb brightness\n0x58 | set / get bulb name\n\n### Color command\n\nFor the color command, the transmission payload is as follows :\n\nCommand | Fading time | Useless byte | White value | Red value | Green value | Blue value\n---|---|---|---|---|---|---\n\nEach value of the payload is a 4 hexadecimal value. (The actual values are integers between 0 and 4095)\n\nFor each color, a prefix in the hexadecimal value is needed :\n\nColor | prefix\n---|---\nWhite| 0x8000\nRed | 0x3000\nGreen | 0x2000\nBlue | 0X1000\n\nThe values are then formatted in **big-endian** format :\n\nInt | 4-bytes Hexadecimal | Big-endian hex\n---|---|---\n4095 | 0x0fff| **0xff0f**\n\n### Brightness command\n\nThe brightness is also an Int value between 0 and 4095, sent as a big-endian 4-bytes hex value. The transmission looks like this :\n\nCommand | Brightness value |\n---|---\n0x57 | 0xff00\n\n## Walkthrough & Example\n\nLet say we want the bulb to be pink at 75% brightness :\n\n### Brightness\n\n75% brightness is roughly 3072 (out of the maximum 4095):\n\nInt | 4-bytes Hexadecimal | **Big-endian hex**\n---|---|---\n3072 |0x0C00| **0x000C**\n\nThe brightness command will be `0x57000C`\n\n#### Color\n\nPink is 100% red, 100% blue, no green. (We assume that the white value is also 0.) For each color, we convert the int value to hexadecimal, then we apply the prefix, then we convert to big-endian :\n\nVariables | Int Values | Hexadecimal values | Bitwise XOR | Big-endian values\n---|---|---|---|---\nWhite| 0| 0x0000| 0x8000| 0x0080\nRed | 4095| 0x0fff| 0x3fff| 0xff3f\nGreen | 0 | 0x0000| 0x2000 | 0x0020\nBlue | 4095| 0x0fff | 0x1fff| 0xff1f\n\n\nThe final byte sequence for a pink bulb will be :\n\nCommand | Fading time | Useless byte | White value | Red value | Green value | Blue value\n---|---|---|---|---|---|---\n`0x35`|`1101`| `0000`| `0080`|`ff3f`|`0020`|`ff1f`\n\n\n## Python implementation\nBelow is some python3 code regarding various aspects that are quite interesting.\n\n### One-liner for color computation\nTo compute the correct values for each color, I created the following conversion (here showing for white) :\n\n```python\nwhite = (int(<value>) | int(0x8000)).to_bytes(2, byteorder='little').hex()\n```\n\n### Bluepy writeCharacteristic() overwrite\nBy default, the btle.Peripheral() object of bluepy only allows to send UTF-8 encoded strings, which are internally converted to hexadecimal. As we craft our own hexadecimal payload, we need to bypass this behavior. A child class of Peripheral() is created and overwrites the writeCharacteristic() method, as follows :\n\n```python\nclass AveaPeripheral(bluepy.btle.Peripheral):\n    def writeCharacteristic(self, handle, val, withResponse=True):\n        cmd = \"wrr\" if withResponse else \"wr\"\n        self._writeCmd(\"%s %X %s\\n\" % (cmd, handle, val))\n        return self._getResp('wr')\n```\n\n### Working with notifications using Bluepy\nTo reply to our packets, the bulb is using BLE notifications, and some setup is required to be able to receive these notifications with bluepy.\n\nTo subscribe to the bulb's notifications, we must send a \"0100\" to the BLE handle which is just after the one used for communication. As we use handle 0x0028 (40 for bluepy) to communicate, we will send the notification payload to the handle 0x0029 (so 41 for bluepy)\n\n```python\nself.bulb.writeCharacteristic(41, \"0100\")\n```\nAfter that, we will receive notifications from the bulb.\n\n## TODO\n- Reverse engineer the `ambiances` (which are mood-based scenes).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/k0rventen/avea", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "avea", "package_url": "https://pypi.org/project/avea/", "platform": "", "project_url": "https://pypi.org/project/avea/", "project_urls": {"Homepage": "https://github.com/k0rventen/avea"}, "release_url": "https://pypi.org/project/avea/1.4/", "requires_dist": ["bluepy"], "requires_python": "", "summary": "Control an Elgato Avea bulb using python3", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Control of an Elgato Avea bulb using Python</h1>\n<p><a href=\"https://pypi.org/project/avea/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87a7d54a02d5b0664f8fa2b41221125b5f0b4ffa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f617665612e737667\"></a>\n<a href=\"https://lgtm.com/projects/g/k0rventen/avea/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86101384730e8e53e5794dc6b8c5eb0f4c9e3413/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6b307276656e74656e2f617665612e7376673f\"></a>\n<a href=\"https://travis-ci.com/k0rventen/avea\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d24df6de2709986a25ae82ee55d6d66e8b3fc62/68747470733a2f2f7472617669732d63692e636f6d2f6b307276656e74656e2f617665612e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>The <a href=\"https://www.amazon.co.uk/Elgato-Avea-Dynamic-Light-Android-Smartphone/dp/B00O4EZ11Q\" rel=\"nofollow\">Avea bulb from Elgato</a> is a light bulb that connects to an iPhone or Android app via Bluetooth.</p>\n<p>This project aim to control it using a Bluetooth 4.0 compatible device and some Python magic.</p>\n<p>Tested on Raspberry Pi 3 and Zero W (with integrated bluetooth).</p>\n<ul>\n<li><a href=\"#control-of-an-elgato-avea-bulb-using-python\" rel=\"nofollow\">Control of an Elgato Avea bulb using Python</a>\n<ul>\n<li><a href=\"#tldr\" rel=\"nofollow\">TL;DR</a></li>\n<li><a href=\"#library-usage\" rel=\"nofollow\">Library usage</a></li>\n<li><a href=\"#code-documentation\" rel=\"nofollow\">Code documentation</a></li>\n<li><a href=\"#reverse-engineering-of-the-bulb\" rel=\"nofollow\">Reverse engineering of the bulb</a></li>\n<li><a href=\"#communication-protocol\" rel=\"nofollow\">Communication protocol</a>\n<ul>\n<li><a href=\"#intro\" rel=\"nofollow\">Intro</a></li>\n<li><a href=\"#commands-and-payload-explanation\" rel=\"nofollow\">Commands and payload explanation</a></li>\n<li><a href=\"#color-command\" rel=\"nofollow\">Color command</a></li>\n<li><a href=\"#brightness-command\" rel=\"nofollow\">Brightness command</a></li>\n</ul>\n</li>\n<li><a href=\"#walkthrough--example\" rel=\"nofollow\">Walkthrough &amp; Example</a>\n<ul>\n<li><a href=\"#brightness\" rel=\"nofollow\">Brightness</a>\n<ul>\n<li><a href=\"#color\" rel=\"nofollow\">Color</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#python-implementation\" rel=\"nofollow\">Python implementation</a>\n<ul>\n<li><a href=\"#one-liner-for-color-computation\" rel=\"nofollow\">One-liner for color computation</a></li>\n<li><a href=\"#bluepy-writecharacteristic-overwrite\" rel=\"nofollow\">Bluepy writeCharacteristic() overwrite</a></li>\n<li><a href=\"#working-with-notifications-using-bluepy\" rel=\"nofollow\">Working with notifications using Bluepy</a></li>\n</ul>\n</li>\n<li><a href=\"#todo\" rel=\"nofollow\">TODO</a></li>\n</ul>\n</li>\n</ul>\n<h2>TL;DR</h2>\n<p>The lib requires <a href=\"https://github.com/IanHarvey/bluepy\" rel=\"nofollow\">bluepy</a>, so we must install the following dependancy, wheter we use pip or install from source.</p>\n<p><strong>Dependancies</strong></p>\n<pre><code>sudo apt install libglib2.0-dev\n</code></pre>\n<p><strong>Then install from pip3</strong></p>\n<pre>sudo apt install python3-pip\nsudo pip3 install --upgrade avea\n</pre>\n<p><strong>or if you prefer installing from source</strong></p>\n<pre>git clone https://github.com/k0rventen/avea\n<span class=\"nb\">cd</span> avea\nsudo python3 setup.py install\n</pre>\n<h2>Library usage</h2>\n<p>Below is a quick how-to of the various methods of the library.</p>\n<p><strong>Note : the discover_avea_bulbs() function needs root privileges, due to bluepy's scan(). From your user, you can use sudo -E.</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">avea</span> <span class=\"c1\"># Important !</span>\n\n<span class=\"c1\"># Get nearby bulbs in a list, then retrieve the name of all bulbs</span>\n<span class=\"c1\"># using this method requires root privileges (because of bluepy's scan() )</span>\n<span class=\"n\">nearbyBulbs</span> <span class=\"o\">=</span> <span class=\"n\">avea</span><span class=\"o\">.</span><span class=\"n\">discover_avea_bulbs</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">bulb</span> <span class=\"ow\">in</span> <span class=\"n\">nearbyBulbs</span><span class=\"p\">:</span>\n    <span class=\"n\">bulb</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bulb</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or create a bulb if you know its address (after a scan for example)</span>\n<span class=\"n\">myBulb</span> <span class=\"o\">=</span> <span class=\"n\">avea</span><span class=\"o\">.</span><span class=\"n\">Bulb</span><span class=\"p\">(</span><span class=\"s2\">\"xx:xx:xx:xx:xx:xx\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can set the brightness, color and name</span>\n<span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">)</span>                 <span class=\"c1\"># ranges from 0 to 4095</span>\n<span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4095</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>                <span class=\"c1\"># in order : white, red, green, blue</span>\n<span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">set_rgb</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>                     <span class=\"c1\"># RGB compliant function</span>\n<span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">set_smooth_transition</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>   <span class=\"c1\"># change to rgb(255,255,0) in 3s</span>\n<span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">set_name</span><span class=\"p\">(</span><span class=\"s2\">\"bedroom\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># new name of the bulb</span>\n\n<span class=\"c1\"># And get the brightness, color and name</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">())</span>                <span class=\"c1\"># Query the name of the bulb</span>\n<span class=\"n\">theColor</span> <span class=\"o\">=</span> <span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">get_color</span><span class=\"p\">()</span>           <span class=\"c1\"># Query the current color</span>\n<span class=\"n\">theRgbColor</span> <span class=\"o\">=</span> <span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">get_rgb</span><span class=\"p\">()</span>          <span class=\"c1\"># Query the bulb in a RGB format</span>\n<span class=\"n\">theBrightness</span> <span class=\"o\">=</span> <span class=\"n\">myBulb</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span> <span class=\"c1\"># query the current brightness</span>\n</pre>\n<p>That's it. Pretty simple.</p>\n<p>Check the explanations below for more informations, or check the sources !</p>\n<h2>Code documentation</h2>\n<h2>Reverse engineering of the bulb</h2>\n<p>I've used the informations given by <a href=\"https://github.com/Marmelatze/avea_bulb\" rel=\"nofollow\">Marmelatze</a> as well as some reverse engineering using a <code>btsnoop_hci.log</code> file from an Android device and Wireshark.</p>\n<p>Below is a pretty thorough explanation of the BLE communication and the python implementation to communicate with the bulb.</p>\n<p>As BLE communication is quite complicated, you might want to skip all of this if you just want to use the library. But it's quite interesting.</p>\n<h2>Communication protocol</h2>\n<h3>Intro</h3>\n<p>To communicate the bulb uses Bluetooth 4.0 \"BLE\", which provide some interesting features for communications, to learn more about it go <a href=\"https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gatt\" rel=\"nofollow\">here</a>.</p>\n<p>To sum up, the bulb emits a set of <code>services</code> which have <code>characteristics</code>. We use the latter to communicate to the device.</p>\n<p>The bulb uses the service <code>f815e810456c6761746f4d756e696368</code> and the associated characteristic <code>f815e811456c6761746f4d756e696368</code> to send and receive informations about its state (color, name and brightness). We'll transmit over this characteristic.</p>\n<h3>Commands and payload explanation</h3>\n<p>The first bytes of transmission is the command. A few commands are available :</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x35</td>\n<td>set / get bulb color</td>\n</tr>\n<tr>\n<td>0x57</td>\n<td>set / get bulb brightness</td>\n</tr>\n<tr>\n<td>0x58</td>\n<td>set / get bulb name</td>\n</tr></tbody></table>\n<h3>Color command</h3>\n<p>For the color command, the transmission payload is as follows :</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Fading time</th>\n<th>Useless byte</th>\n<th>White value</th>\n<th>Red value</th>\n<th>Green value</th>\n<th>Blue value</th>\n</tr>\n</thead></table>\n<p>Each value of the payload is a 4 hexadecimal value. (The actual values are integers between 0 and 4095)</p>\n<p>For each color, a prefix in the hexadecimal value is needed :</p>\n<table>\n<thead>\n<tr>\n<th>Color</th>\n<th>prefix</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>White</td>\n<td>0x8000</td>\n</tr>\n<tr>\n<td>Red</td>\n<td>0x3000</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>0x2000</td>\n</tr>\n<tr>\n<td>Blue</td>\n<td>0X1000</td>\n</tr></tbody></table>\n<p>The values are then formatted in <strong>big-endian</strong> format :</p>\n<table>\n<thead>\n<tr>\n<th>Int</th>\n<th>4-bytes Hexadecimal</th>\n<th>Big-endian hex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4095</td>\n<td>0x0fff</td>\n<td><strong>0xff0f</strong></td>\n</tr></tbody></table>\n<h3>Brightness command</h3>\n<p>The brightness is also an Int value between 0 and 4095, sent as a big-endian 4-bytes hex value. The transmission looks like this :</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Brightness value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x57</td>\n<td>0xff00</td>\n</tr></tbody></table>\n<h2>Walkthrough &amp; Example</h2>\n<p>Let say we want the bulb to be pink at 75% brightness :</p>\n<h3>Brightness</h3>\n<p>75% brightness is roughly 3072 (out of the maximum 4095):</p>\n<table>\n<thead>\n<tr>\n<th>Int</th>\n<th>4-bytes Hexadecimal</th>\n<th><strong>Big-endian hex</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3072</td>\n<td>0x0C00</td>\n<td><strong>0x000C</strong></td>\n</tr></tbody></table>\n<p>The brightness command will be <code>0x57000C</code></p>\n<h4>Color</h4>\n<p>Pink is 100% red, 100% blue, no green. (We assume that the white value is also 0.) For each color, we convert the int value to hexadecimal, then we apply the prefix, then we convert to big-endian :</p>\n<table>\n<thead>\n<tr>\n<th>Variables</th>\n<th>Int Values</th>\n<th>Hexadecimal values</th>\n<th>Bitwise XOR</th>\n<th>Big-endian values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>White</td>\n<td>0</td>\n<td>0x0000</td>\n<td>0x8000</td>\n<td>0x0080</td>\n</tr>\n<tr>\n<td>Red</td>\n<td>4095</td>\n<td>0x0fff</td>\n<td>0x3fff</td>\n<td>0xff3f</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>0</td>\n<td>0x0000</td>\n<td>0x2000</td>\n<td>0x0020</td>\n</tr>\n<tr>\n<td>Blue</td>\n<td>4095</td>\n<td>0x0fff</td>\n<td>0x1fff</td>\n<td>0xff1f</td>\n</tr></tbody></table>\n<p>The final byte sequence for a pink bulb will be :</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Fading time</th>\n<th>Useless byte</th>\n<th>White value</th>\n<th>Red value</th>\n<th>Green value</th>\n<th>Blue value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0x35</code></td>\n<td><code>1101</code></td>\n<td><code>0000</code></td>\n<td><code>0080</code></td>\n<td><code>ff3f</code></td>\n<td><code>0020</code></td>\n<td><code>ff1f</code></td>\n</tr></tbody></table>\n<h2>Python implementation</h2>\n<p>Below is some python3 code regarding various aspects that are quite interesting.</p>\n<h3>One-liner for color computation</h3>\n<p>To compute the correct values for each color, I created the following conversion (here showing for white) :</p>\n<pre><span class=\"n\">white</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mh\">0x8000</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">byteorder</span><span class=\"o\">=</span><span class=\"s1\">'little'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n</pre>\n<h3>Bluepy writeCharacteristic() overwrite</h3>\n<p>By default, the btle.Peripheral() object of bluepy only allows to send UTF-8 encoded strings, which are internally converted to hexadecimal. As we craft our own hexadecimal payload, we need to bypass this behavior. A child class of Peripheral() is created and overwrites the writeCharacteristic() method, as follows :</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AveaPeripheral</span><span class=\"p\">(</span><span class=\"n\">bluepy</span><span class=\"o\">.</span><span class=\"n\">btle</span><span class=\"o\">.</span><span class=\"n\">Peripheral</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">writeCharacteristic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">withResponse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"s2\">\"wrr\"</span> <span class=\"k\">if</span> <span class=\"n\">withResponse</span> <span class=\"k\">else</span> <span class=\"s2\">\"wr\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_writeCmd</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%X</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_getResp</span><span class=\"p\">(</span><span class=\"s1\">'wr'</span><span class=\"p\">)</span>\n</pre>\n<h3>Working with notifications using Bluepy</h3>\n<p>To reply to our packets, the bulb is using BLE notifications, and some setup is required to be able to receive these notifications with bluepy.</p>\n<p>To subscribe to the bulb's notifications, we must send a \"0100\" to the BLE handle which is just after the one used for communication. As we use handle 0x0028 (40 for bluepy) to communicate, we will send the notification payload to the handle 0x0029 (so 41 for bluepy)</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bulb</span><span class=\"o\">.</span><span class=\"n\">writeCharacteristic</span><span class=\"p\">(</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"s2\">\"0100\"</span><span class=\"p\">)</span>\n</pre>\n<p>After that, we will receive notifications from the bulb.</p>\n<h2>TODO</h2>\n<ul>\n<li>Reverse engineer the <code>ambiances</code> (which are mood-based scenes).</li>\n</ul>\n\n          </div>"}, "last_serial": 6034959, "releases": {"1.2.6": [{"comment_text": "", "digests": {"md5": "9f11e6fa164a33c690905e808242c8ab", "sha256": "81e95918f39833f07c35f58b65e0f0a63499aeed706da1d3d1162512179a2bf5"}, "downloads": -1, "filename": "avea-1.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9f11e6fa164a33c690905e808242c8ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8404, "upload_time": "2019-04-15T08:09:05", "upload_time_iso_8601": "2019-04-15T08:09:05.489995Z", "url": "https://files.pythonhosted.org/packages/19/1b/d0f145ebdd500f5ce5b7706d0b0a866c4d4737f9ce46c151a411bf05a7c1/avea-1.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "136967b6b437b51557aaddad43c55921", "sha256": "e5bff41e76912b3a8dcee825ff24355f89376c0aba7e97bfffa50d9ba512035e"}, "downloads": -1, "filename": "avea-1.2.6.tar.gz", "has_sig": false, "md5_digest": "136967b6b437b51557aaddad43c55921", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8397, "upload_time": "2019-04-15T08:09:08", "upload_time_iso_8601": "2019-04-15T08:09:08.060964Z", "url": "https://files.pythonhosted.org/packages/57/bd/49ec4c084d14d6c94b5e6c6a98817764977ca944f7a6bed3390bf5e57cd5/avea-1.2.6.tar.gz", "yanked": false}], "1.2.7": [{"comment_text": "", "digests": {"md5": "419602b0459cad733b27e2cd355b35ba", "sha256": "20083a6e3b1a20855404f45bf781aecc0055922fef58704f146c97b48cf3deb1"}, "downloads": -1, "filename": "avea-1.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "419602b0459cad733b27e2cd355b35ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8409, "upload_time": "2019-04-24T06:57:25", "upload_time_iso_8601": "2019-04-24T06:57:25.834806Z", "url": "https://files.pythonhosted.org/packages/d3/52/c57f7ddec3d76eda181866540caaa23304adff6758e0b16962199e0aa6f4/avea-1.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "503202c2050b5f6df9509bde2f6bf495", "sha256": "a53b426ba51e5a55cbe7a5c0cd9247e5ae6702cdb301502aa3e66ac8d1dee29d"}, "downloads": -1, "filename": "avea-1.2.7.tar.gz", "has_sig": false, "md5_digest": "503202c2050b5f6df9509bde2f6bf495", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8387, "upload_time": "2019-04-24T06:57:27", "upload_time_iso_8601": "2019-04-24T06:57:27.220850Z", "url": "https://files.pythonhosted.org/packages/7d/9a/e924ef367ae15499797064327403f37811c422277c36be6e0088bcaa3d3f/avea-1.2.7.tar.gz", "yanked": false}], "1.2.8": [{"comment_text": "", "digests": {"md5": "aef4f39810f2b7376ab9749d0af2d997", "sha256": "d5bea97e76cfa752fa9bab2e18650ed91ab7120ab48023ce95a8af6fda64536f"}, "downloads": -1, "filename": "avea-1.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "aef4f39810f2b7376ab9749d0af2d997", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8409, "upload_time": "2019-05-20T19:58:52", "upload_time_iso_8601": "2019-05-20T19:58:52.962793Z", "url": "https://files.pythonhosted.org/packages/fd/28/d32f3f6116eaa371acf70179f4e7e52bbc3bea1e8bc4128cccb373dbff08/avea-1.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "562f35264054fecbe245865885f10383", "sha256": "1edf14d578a36043675ac0cbc23a459a9e9ae023762ca654ed165a3a9815b800"}, "downloads": -1, "filename": "avea-1.2.8.tar.gz", "has_sig": false, "md5_digest": "562f35264054fecbe245865885f10383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8398, "upload_time": "2019-05-20T19:58:54", "upload_time_iso_8601": "2019-05-20T19:58:54.837712Z", "url": "https://files.pythonhosted.org/packages/c1/e9/9542bc8fe69b8a34e6a74f2b73eb8d4bbffaf8b3e1c8d413a3fd9cf2569d/avea-1.2.8.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "60287a2a4e5c058772e5d9685cecc4a5", "sha256": "efc7f105104b42e2b248d9c8c4b69821c2cc550786b8e7118a2a7cb613a78690"}, "downloads": -1, "filename": "avea-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "60287a2a4e5c058772e5d9685cecc4a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9388, "upload_time": "2019-10-26T20:22:54", "upload_time_iso_8601": "2019-10-26T20:22:54.372224Z", "url": "https://files.pythonhosted.org/packages/14/e5/d1217fe9c17939d7da6bc1fb933dabb1f7d06ef1a3b342a8df2c7fe01324/avea-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "046b1dedc70ad5db5b970cf429766ff3", "sha256": "acfded1e38fcb11619b31b0858b92895465a1f6ce8ae77a39aed70867003c363"}, "downloads": -1, "filename": "avea-1.4.tar.gz", "has_sig": false, "md5_digest": "046b1dedc70ad5db5b970cf429766ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9399, "upload_time": "2019-10-26T20:22:56", "upload_time_iso_8601": "2019-10-26T20:22:56.163916Z", "url": "https://files.pythonhosted.org/packages/d2/3a/e9b2bbf3b16fa12c23f02f01df1e7b7c0e0f24a2587ec13977934ec4db47/avea-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60287a2a4e5c058772e5d9685cecc4a5", "sha256": "efc7f105104b42e2b248d9c8c4b69821c2cc550786b8e7118a2a7cb613a78690"}, "downloads": -1, "filename": "avea-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "60287a2a4e5c058772e5d9685cecc4a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9388, "upload_time": "2019-10-26T20:22:54", "upload_time_iso_8601": "2019-10-26T20:22:54.372224Z", "url": "https://files.pythonhosted.org/packages/14/e5/d1217fe9c17939d7da6bc1fb933dabb1f7d06ef1a3b342a8df2c7fe01324/avea-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "046b1dedc70ad5db5b970cf429766ff3", "sha256": "acfded1e38fcb11619b31b0858b92895465a1f6ce8ae77a39aed70867003c363"}, "downloads": -1, "filename": "avea-1.4.tar.gz", "has_sig": false, "md5_digest": "046b1dedc70ad5db5b970cf429766ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9399, "upload_time": "2019-10-26T20:22:56", "upload_time_iso_8601": "2019-10-26T20:22:56.163916Z", "url": "https://files.pythonhosted.org/packages/d2/3a/e9b2bbf3b16fa12c23f02f01df1e7b7c0e0f24a2587ec13977934ec4db47/avea-1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:05 2020"}