{"info": {"author": "Samuel Reed", "author_email": "sam@bitmex.com", "bugtrack_url": null, "classifiers": [], "description": "# BitMEX Market Maker\n\nThis is a sample market making bot for use with [BitMEX](https://www.bitmex.com).\n\nIt is free to use and modify for your own strategies. It provides the following:\n\n* A `BitMEX` object wrapping the REST and WebSocket APIs.\n  * All data is realtime and efficiently [fetched via the WebSocket](market_maker/ws/ws_thread.py). This is the fastest way to get market data.\n  * Orders may be created, queried, and cancelled via `BitMEX.buy()`, `BitMEX.sell()`, `BitMEX.open_orders()` and the like.\n  * Withdrawals may be requested (but they still must be confirmed via email and 2FA).\n  * Connection errors and WebSocket reconnection is handled for you.\n  * [Permanent API Key](https://testnet.bitmex.com/app/apiKeys) support is included.\n* [A scaffolding for building your own trading strategies.](#advanced-usage)\n  * Out of the box, a simple market making strategy is implemented that blankets the bid and ask.\n  * More complicated strategies are up to the user. Try incorporating [index data](https://testnet.bitmex.com/app/index/.XBT),\n    query other markets to catch moves early, or develop your own completely custom strategy.\n\n**Develop on [Testnet](https://testnet.bitmex.com) first!** Testnet trading is completely free and is identical to the live market.\n\n> BitMEX is not responsible for any losses incurred when using this code. This code is intended for sample purposes ONLY - do not\n  use this code for real trades unless you fully understand what it does and what its caveats are.\n\n> This is not a sophisticated market making program. It is intended to show the basics of market making while abstracting some\n  of the rote work of interacting with the BitMEX API. It does not make smart decisions and will likely lose money.\n\n## Getting Started\n\n1. Create a [Testnet BitMEX Account](https://testnet.bitmex.com) and [deposit some TBTC](https://testnet.bitmex.com/app/deposit).\n2. Install: `pip install bitmex-market-maker`. It is strongly recommeded to use a virtualenv.\n3. Create a marketmaker project: run `marketmaker setup`\n    * This will create `settings.py` and `market_maker/` in the working directory.\n    * Modify `settings.py` to tune parameters.\n4. Edit settings.py to add your [BitMEX API Key and Secret](https://testnet.bitmex.com/app/apiKeys) and change bot parameters.\n    * Note that user/password authentication is not supported.\n    * Run with `DRY_RUN=True` to test cost and spread.\n5. Run it: `marketmaker [symbol]`\n6. Satisfied with your bot's performance? Create a [live API Key](https://www.bitmex.com/app/apiKeys) for your\n   BitMEX account, set the `BASE_URL` and start trading!\n\n## Operation Overview\n\nThis market maker works on the following principles:\n\n* The market maker tracks the last `bidPrice` and `askPrice` of the quoted instrument to determine where to start quoting.\n* Based on parameters set by the user, the bot creates a descriptions of orders it would like to place.\n  - If `settings.MAINTAIN_SPREADS` is set, the bot will start inside the current spread and work outwards.\n  - Otherwise, spread is determined by interval calculations.\n* If the user specifies position limits, these are checked. If the current position is beyond a limit,\n  the bot stops quoting that side of the market.\n* These order descriptors are compared with what the bot has currently placed in the market.\n  - If an existing order can be amended to the desired value, it is amended.\n  - Otherwise, a new order is created.\n  - Extra orders are canceled.\n* The bot then prints details of contracts traded, tickers, and total delta.\n\n## Simplified Output\n\nThe following is some of what you can expect when running this bot:\n\n```\n2016-01-28 17:29:31,054 - INFO - market_maker - BitMEX Market Maker Version: 1.0\n2016-01-28 17:29:31,074 - INFO - ws_thread - Connecting to wss://testnet.bitmex.com/realtime?subscribe=quote:XBT7D,trade:XBT7D,instrument,order:XBT7D,execution:XBT7D,margin,position\n2016-01-28 17:29:31,074 - INFO - ws_thread - Authenticating with API Key.\n2016-01-28 17:29:31,075 - INFO - ws_thread - Started thread\n2016-01-28 17:29:32,079 - INFO - ws_thread - Connected to WS. Waiting for data images, this may take a moment...\n2016-01-28 17:29:32,079 - INFO - ws_thread - Got all market data. Starting.\n2016-01-28 17:29:32,079 - INFO - market_maker - Using symbol XBT7D.\n2016-01-28 17:29:32,079 - INFO - market_maker - Order Manager initializing, connecting to BitMEX. Live run: executing real trades.\n2016-01-28 17:29:32,079 - INFO - market_maker - Resetting current position. Cancelling all existing orders.\n2016-01-28 17:29:33,460 - INFO - market_maker - XBT7D Ticker: Buy: 388.61, Sell: 389.89\n2016-01-28 17:29:33,461 - INFO - market_maker - Start Positions: Buy: 388.62, Sell: 389.88, Mid: 389.25\n2016-01-28 17:29:33,461 - INFO - market_maker - Current XBT Balance: 3.443498\n2016-01-28 17:29:33,461 - INFO - market_maker - Current Contract Position: -1\n2016-01-28 17:29:33,461 - INFO - market_maker - Avg Cost Price: 389.75\n2016-01-28 17:29:33,461 - INFO - market_maker - Avg Entry Price: 389.75\n2016-01-28 17:29:33,462 - INFO - market_maker - Contracts Traded This Run: 0\n2016-01-28 17:29:33,462 - INFO - market_maker - Total Contract Delta: -17.7510 XBT\n2016-01-28 17:29:33,462 - INFO - market_maker - Creating 4 orders:\n2016-01-28 17:29:33,462 - INFO - market_maker - Sell 100 @ 389.88\n2016-01-28 17:29:33,462 - INFO - market_maker - Sell 200 @ 390.27\n2016-01-28 17:29:33,463 - INFO - market_maker -  Buy 100 @ 388.62\n2016-01-28 17:29:33,463 - INFO - market_maker -  Buy 200 @ 388.23\n-----\n2016-01-28 17:29:37,366 - INFO - ws_thread - Execution: Sell 1 Contracts of XBT7D at 389.88\n2016-01-28 17:29:38,943 - INFO - market_maker - XBT7D Ticker: Buy: 388.62, Sell: 389.88\n2016-01-28 17:29:38,943 - INFO - market_maker - Start Positions: Buy: 388.62, Sell: 389.88, Mid: 389.25\n2016-01-28 17:29:38,944 - INFO - market_maker - Current XBT Balance: 3.443496\n2016-01-28 17:29:38,944 - INFO - market_maker - Current Contract Position: -2\n2016-01-28 17:29:38,944 - INFO - market_maker - Avg Cost Price: 389.75\n2016-01-28 17:29:38,944 - INFO - market_maker - Avg Entry Price: 389.75\n2016-01-28 17:29:38,944 - INFO - market_maker - Contracts Traded This Run: -1\n2016-01-28 17:29:38,944 - INFO - market_maker - Total Contract Delta: -17.7510 XBT\n2016-01-28 17:29:38,945 - INFO - market_maker - Amending Sell: 99 @ 389.88 to 100 @ 389.88 (+0.00)\n\n```\n\n## Advanced usage\n\nYou can implement custom trading strategies using the market maker. `market_maker.OrderManager`\ncontrols placing, updating, and monitoring orders on BitMEX. To implement your own custom\nstrategy, subclass `market_maker.OrderManager` and override `OrderManager.place_orders()`:\n\n```\nfrom market_maker.market_maker import OrderManager\n\nclass CustomOrderManager(OrderManager):\n    def place_orders(self) -> None:\n        # implement your custom strategy here\n```\n\nYour strategy should provide a set of orders. An order is a dict containing price, quantity, and\nwhether the order is buy or sell. For example:\n\n```\nbuy_order = {\n    'price': 1234.5, # float\n    'orderQty': 100, # int\n    'side': 'Buy'\n}\n\nsell_order = {\n    'price': 9876.5, # float\n    'orderQty': 100, # int\n    'side': 'Sell'\n}\n```\n\nCall `self.converge_orders()` to submit your orders. `converge_orders()` will create, amend,\nand delete orders on BitMEX as necessary to match what you pass in:\n\n```\ndef place_orders(self) -> None:\n    buy_orders = []\n    sell_orders = []\n\n    # populate buy and sell orders, e.g.\n    buy_orders.append({'price': 998.0, 'orderQty': 100, 'side': \"Buy\"})\n    buy_orders.append({'price': 999.0, 'orderQty': 100, 'side': \"Buy\"})\n    sell_orders.append({'price': 1000.0, 'orderQty': 100, 'side': \"Sell\"})\n    sell_orders.append({'price': 1001.0, 'orderQty': 100, 'side': \"Sell\"})\n\n    self.converge_orders(buy_orders, sell_orders)\n```\n\nTo run your strategy, call `run_loop()`:\n```\norder_manager = CustomOrderManager()\norder_manager.run_loop()\n```\n\nYour custom strategy will run until you terminate the program with CTRL-C. There is an example\nin `custom_strategy.py`.\n\n## Notes on Rate Limiting\n\nBy default, the BitMEX API rate limit is 300 requests per 5 minute interval (avg 1/second).\n\nThis bot uses the WebSocket and bulk order placement/amend to greatly reduce the number of calls sent to the BitMEX API.\n\nMost calls to the API consume one request, except:\n\n* Bulk order placement/amend: Consumes 0.1 requests, rounded up, per order. For example, placing 16 orders consumes\n  2 requests.\n* Bulk order cancel: Consumes 1 request no matter the size. Is not blocked by an exceeded ratelimit; cancels will\n  always succeed. This bot will always cancel all orders on an error or interrupt.\n\nIf you are quoting multiple contracts and your ratelimit is becoming an obstacle, please\n[email support](mailto:support@bitmex.com) with details of your quoting. In the vast majority of cases,\nwe are able to raise a user's ratelimit without issue.\n\n## Troubleshooting\n\nCommon errors we've seen:\n\n* `TypeError: __init__() got an unexpected keyword argument 'json'`\n  * This is caused by an outdated version of `requests`. Run `pip install -U requests` to update.\n\n\n## Compatibility\n\nThis module supports Python 3.5 and later.\n\n## See also\n\nBitMEX has a Python [REST client](https://github.com/BitMEX/api-connectors/tree/master/official-http/python-swaggerpy)\nand [websocket client.](https://github.com/BitMEX/api-connectors/tree/master/official-ws/python)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BitMEX/sample-market-maker", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bitmex-market-maker", "package_url": "https://pypi.org/project/bitmex-market-maker/", "platform": "", "project_url": "https://pypi.org/project/bitmex-market-maker/", "project_urls": {"Homepage": "https://github.com/BitMEX/sample-market-maker"}, "release_url": "https://pypi.org/project/bitmex-market-maker/1.5.1/", "requires_dist": null, "requires_python": "", "summary": "Market making bot for BitMEX API", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BitMEX Market Maker</h1>\n<p>This is a sample market making bot for use with <a href=\"https://www.bitmex.com\" rel=\"nofollow\">BitMEX</a>.</p>\n<p>It is free to use and modify for your own strategies. It provides the following:</p>\n<ul>\n<li>A <code>BitMEX</code> object wrapping the REST and WebSocket APIs.\n<ul>\n<li>All data is realtime and efficiently <a href=\"market_maker/ws/ws_thread.py\" rel=\"nofollow\">fetched via the WebSocket</a>. This is the fastest way to get market data.</li>\n<li>Orders may be created, queried, and cancelled via <code>BitMEX.buy()</code>, <code>BitMEX.sell()</code>, <code>BitMEX.open_orders()</code> and the like.</li>\n<li>Withdrawals may be requested (but they still must be confirmed via email and 2FA).</li>\n<li>Connection errors and WebSocket reconnection is handled for you.</li>\n<li><a href=\"https://testnet.bitmex.com/app/apiKeys\" rel=\"nofollow\">Permanent API Key</a> support is included.</li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" rel=\"nofollow\">A scaffolding for building your own trading strategies.</a>\n<ul>\n<li>Out of the box, a simple market making strategy is implemented that blankets the bid and ask.</li>\n<li>More complicated strategies are up to the user. Try incorporating <a href=\"https://testnet.bitmex.com/app/index/.XBT\" rel=\"nofollow\">index data</a>,\nquery other markets to catch moves early, or develop your own completely custom strategy.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Develop on <a href=\"https://testnet.bitmex.com\" rel=\"nofollow\">Testnet</a> first!</strong> Testnet trading is completely free and is identical to the live market.</p>\n<blockquote>\n<p>BitMEX is not responsible for any losses incurred when using this code. This code is intended for sample purposes ONLY - do not\nuse this code for real trades unless you fully understand what it does and what its caveats are.</p>\n</blockquote>\n<blockquote>\n<p>This is not a sophisticated market making program. It is intended to show the basics of market making while abstracting some\nof the rote work of interacting with the BitMEX API. It does not make smart decisions and will likely lose money.</p>\n</blockquote>\n<h2>Getting Started</h2>\n<ol>\n<li>Create a <a href=\"https://testnet.bitmex.com\" rel=\"nofollow\">Testnet BitMEX Account</a> and <a href=\"https://testnet.bitmex.com/app/deposit\" rel=\"nofollow\">deposit some TBTC</a>.</li>\n<li>Install: <code>pip install bitmex-market-maker</code>. It is strongly recommeded to use a virtualenv.</li>\n<li>Create a marketmaker project: run <code>marketmaker setup</code>\n<ul>\n<li>This will create <code>settings.py</code> and <code>market_maker/</code> in the working directory.</li>\n<li>Modify <code>settings.py</code> to tune parameters.</li>\n</ul>\n</li>\n<li>Edit settings.py to add your <a href=\"https://testnet.bitmex.com/app/apiKeys\" rel=\"nofollow\">BitMEX API Key and Secret</a> and change bot parameters.\n<ul>\n<li>Note that user/password authentication is not supported.</li>\n<li>Run with <code>DRY_RUN=True</code> to test cost and spread.</li>\n</ul>\n</li>\n<li>Run it: <code>marketmaker [symbol]</code></li>\n<li>Satisfied with your bot's performance? Create a <a href=\"https://www.bitmex.com/app/apiKeys\" rel=\"nofollow\">live API Key</a> for your\nBitMEX account, set the <code>BASE_URL</code> and start trading!</li>\n</ol>\n<h2>Operation Overview</h2>\n<p>This market maker works on the following principles:</p>\n<ul>\n<li>The market maker tracks the last <code>bidPrice</code> and <code>askPrice</code> of the quoted instrument to determine where to start quoting.</li>\n<li>Based on parameters set by the user, the bot creates a descriptions of orders it would like to place.\n<ul>\n<li>If <code>settings.MAINTAIN_SPREADS</code> is set, the bot will start inside the current spread and work outwards.</li>\n<li>Otherwise, spread is determined by interval calculations.</li>\n</ul>\n</li>\n<li>If the user specifies position limits, these are checked. If the current position is beyond a limit,\nthe bot stops quoting that side of the market.</li>\n<li>These order descriptors are compared with what the bot has currently placed in the market.\n<ul>\n<li>If an existing order can be amended to the desired value, it is amended.</li>\n<li>Otherwise, a new order is created.</li>\n<li>Extra orders are canceled.</li>\n</ul>\n</li>\n<li>The bot then prints details of contracts traded, tickers, and total delta.</li>\n</ul>\n<h2>Simplified Output</h2>\n<p>The following is some of what you can expect when running this bot:</p>\n<pre><code>2016-01-28 17:29:31,054 - INFO - market_maker - BitMEX Market Maker Version: 1.0\n2016-01-28 17:29:31,074 - INFO - ws_thread - Connecting to wss://testnet.bitmex.com/realtime?subscribe=quote:XBT7D,trade:XBT7D,instrument,order:XBT7D,execution:XBT7D,margin,position\n2016-01-28 17:29:31,074 - INFO - ws_thread - Authenticating with API Key.\n2016-01-28 17:29:31,075 - INFO - ws_thread - Started thread\n2016-01-28 17:29:32,079 - INFO - ws_thread - Connected to WS. Waiting for data images, this may take a moment...\n2016-01-28 17:29:32,079 - INFO - ws_thread - Got all market data. Starting.\n2016-01-28 17:29:32,079 - INFO - market_maker - Using symbol XBT7D.\n2016-01-28 17:29:32,079 - INFO - market_maker - Order Manager initializing, connecting to BitMEX. Live run: executing real trades.\n2016-01-28 17:29:32,079 - INFO - market_maker - Resetting current position. Cancelling all existing orders.\n2016-01-28 17:29:33,460 - INFO - market_maker - XBT7D Ticker: Buy: 388.61, Sell: 389.89\n2016-01-28 17:29:33,461 - INFO - market_maker - Start Positions: Buy: 388.62, Sell: 389.88, Mid: 389.25\n2016-01-28 17:29:33,461 - INFO - market_maker - Current XBT Balance: 3.443498\n2016-01-28 17:29:33,461 - INFO - market_maker - Current Contract Position: -1\n2016-01-28 17:29:33,461 - INFO - market_maker - Avg Cost Price: 389.75\n2016-01-28 17:29:33,461 - INFO - market_maker - Avg Entry Price: 389.75\n2016-01-28 17:29:33,462 - INFO - market_maker - Contracts Traded This Run: 0\n2016-01-28 17:29:33,462 - INFO - market_maker - Total Contract Delta: -17.7510 XBT\n2016-01-28 17:29:33,462 - INFO - market_maker - Creating 4 orders:\n2016-01-28 17:29:33,462 - INFO - market_maker - Sell 100 @ 389.88\n2016-01-28 17:29:33,462 - INFO - market_maker - Sell 200 @ 390.27\n2016-01-28 17:29:33,463 - INFO - market_maker -  Buy 100 @ 388.62\n2016-01-28 17:29:33,463 - INFO - market_maker -  Buy 200 @ 388.23\n-----\n2016-01-28 17:29:37,366 - INFO - ws_thread - Execution: Sell 1 Contracts of XBT7D at 389.88\n2016-01-28 17:29:38,943 - INFO - market_maker - XBT7D Ticker: Buy: 388.62, Sell: 389.88\n2016-01-28 17:29:38,943 - INFO - market_maker - Start Positions: Buy: 388.62, Sell: 389.88, Mid: 389.25\n2016-01-28 17:29:38,944 - INFO - market_maker - Current XBT Balance: 3.443496\n2016-01-28 17:29:38,944 - INFO - market_maker - Current Contract Position: -2\n2016-01-28 17:29:38,944 - INFO - market_maker - Avg Cost Price: 389.75\n2016-01-28 17:29:38,944 - INFO - market_maker - Avg Entry Price: 389.75\n2016-01-28 17:29:38,944 - INFO - market_maker - Contracts Traded This Run: -1\n2016-01-28 17:29:38,944 - INFO - market_maker - Total Contract Delta: -17.7510 XBT\n2016-01-28 17:29:38,945 - INFO - market_maker - Amending Sell: 99 @ 389.88 to 100 @ 389.88 (+0.00)\n\n</code></pre>\n<h2>Advanced usage</h2>\n<p>You can implement custom trading strategies using the market maker. <code>market_maker.OrderManager</code>\ncontrols placing, updating, and monitoring orders on BitMEX. To implement your own custom\nstrategy, subclass <code>market_maker.OrderManager</code> and override <code>OrderManager.place_orders()</code>:</p>\n<pre><code>from market_maker.market_maker import OrderManager\n\nclass CustomOrderManager(OrderManager):\n    def place_orders(self) -&gt; None:\n        # implement your custom strategy here\n</code></pre>\n<p>Your strategy should provide a set of orders. An order is a dict containing price, quantity, and\nwhether the order is buy or sell. For example:</p>\n<pre><code>buy_order = {\n    'price': 1234.5, # float\n    'orderQty': 100, # int\n    'side': 'Buy'\n}\n\nsell_order = {\n    'price': 9876.5, # float\n    'orderQty': 100, # int\n    'side': 'Sell'\n}\n</code></pre>\n<p>Call <code>self.converge_orders()</code> to submit your orders. <code>converge_orders()</code> will create, amend,\nand delete orders on BitMEX as necessary to match what you pass in:</p>\n<pre><code>def place_orders(self) -&gt; None:\n    buy_orders = []\n    sell_orders = []\n\n    # populate buy and sell orders, e.g.\n    buy_orders.append({'price': 998.0, 'orderQty': 100, 'side': \"Buy\"})\n    buy_orders.append({'price': 999.0, 'orderQty': 100, 'side': \"Buy\"})\n    sell_orders.append({'price': 1000.0, 'orderQty': 100, 'side': \"Sell\"})\n    sell_orders.append({'price': 1001.0, 'orderQty': 100, 'side': \"Sell\"})\n\n    self.converge_orders(buy_orders, sell_orders)\n</code></pre>\n<p>To run your strategy, call <code>run_loop()</code>:</p>\n<pre><code>order_manager = CustomOrderManager()\norder_manager.run_loop()\n</code></pre>\n<p>Your custom strategy will run until you terminate the program with CTRL-C. There is an example\nin <code>custom_strategy.py</code>.</p>\n<h2>Notes on Rate Limiting</h2>\n<p>By default, the BitMEX API rate limit is 300 requests per 5 minute interval (avg 1/second).</p>\n<p>This bot uses the WebSocket and bulk order placement/amend to greatly reduce the number of calls sent to the BitMEX API.</p>\n<p>Most calls to the API consume one request, except:</p>\n<ul>\n<li>Bulk order placement/amend: Consumes 0.1 requests, rounded up, per order. For example, placing 16 orders consumes\n2 requests.</li>\n<li>Bulk order cancel: Consumes 1 request no matter the size. Is not blocked by an exceeded ratelimit; cancels will\nalways succeed. This bot will always cancel all orders on an error or interrupt.</li>\n</ul>\n<p>If you are quoting multiple contracts and your ratelimit is becoming an obstacle, please\n<a href=\"mailto:support@bitmex.com\">email support</a> with details of your quoting. In the vast majority of cases,\nwe are able to raise a user's ratelimit without issue.</p>\n<h2>Troubleshooting</h2>\n<p>Common errors we've seen:</p>\n<ul>\n<li><code>TypeError: __init__() got an unexpected keyword argument 'json'</code>\n<ul>\n<li>This is caused by an outdated version of <code>requests</code>. Run <code>pip install -U requests</code> to update.</li>\n</ul>\n</li>\n</ul>\n<h2>Compatibility</h2>\n<p>This module supports Python 3.5 and later.</p>\n<h2>See also</h2>\n<p>BitMEX has a Python <a href=\"https://github.com/BitMEX/api-connectors/tree/master/official-http/python-swaggerpy\" rel=\"nofollow\">REST client</a>\nand <a href=\"https://github.com/BitMEX/api-connectors/tree/master/official-ws/python\" rel=\"nofollow\">websocket client.</a></p>\n\n          </div>"}, "last_serial": 7123568, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "69e2aeb6b82b74aa23d27d647b7edf48", "sha256": "28efc56a3fb3135677ad6a2d1f484719b3e1163ccf0935b2808be028f382d36b"}, "downloads": -1, "filename": "bitmex-market-maker-1.2.tar.gz", "has_sig": false, "md5_digest": "69e2aeb6b82b74aa23d27d647b7edf48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4518, "upload_time": "2017-12-14T20:27:08", "upload_time_iso_8601": "2017-12-14T20:27:08.989479Z", "url": "https://files.pythonhosted.org/packages/5e/1f/4b90572f00cecb7c99a4b7688a1f29de7c112edda8660f6b9b773ed286f1/bitmex-market-maker-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "fa24e9e7d1e5962f762d75b3e474ad60", "sha256": "f3791c1bd39727f179c63d4c2349c664170226fdd2e958449725c520c9e72f38"}, "downloads": -1, "filename": "bitmex-market-maker-1.3.tar.gz", "has_sig": false, "md5_digest": "fa24e9e7d1e5962f762d75b3e474ad60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25523, "upload_time": "2018-01-23T23:28:52", "upload_time_iso_8601": "2018-01-23T23:28:52.976554Z", "url": "https://files.pythonhosted.org/packages/f9/54/043b7b2fc0e68fa7e432ea59e270fab96eaa9f33e4170b60d8032bc3f44a/bitmex-market-maker-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "8d813bf74adf1cf26ee37f3312d8d8a1", "sha256": "63bdfca6bd7434c51c50cbf3c0f803c33217512d8909b9d758c3a3e77170736f"}, "downloads": -1, "filename": "bitmex_market_maker-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8d813bf74adf1cf26ee37f3312d8d8a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33398, "upload_time": "2018-05-08T19:21:13", "upload_time_iso_8601": "2018-05-08T19:21:13.297149Z", "url": "https://files.pythonhosted.org/packages/8a/d5/2bcaa9ce8002ccd3418612fef15c3ce86e775d15fa128ef6519cd1d4acdc/bitmex_market_maker-1.4-py3-none-any.whl", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "6ee44995851096c14d1fbdac2f9b71a5", "sha256": "fe452b3a11bb466fafbd9630880159d956b7f77e161d05db67cfb0c097aa1e8a"}, "downloads": -1, "filename": "bitmex-market-maker-1.5.tar.gz", "has_sig": false, "md5_digest": "6ee44995851096c14d1fbdac2f9b71a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26507, "upload_time": "2018-09-26T18:31:40", "upload_time_iso_8601": "2018-09-26T18:31:40.572179Z", "url": "https://files.pythonhosted.org/packages/9b/0a/8c5fe3c8d52868672018f1ffaf44293a307d498ac2704b4b68a13616f3b6/bitmex-market-maker-1.5.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "37cbd3bcd322593b4c302029d1d3a402", "sha256": "c31150219b1a4d5ef4e1d64e12bdb53f95de2ef555c83623d06745ba52092f61"}, "downloads": -1, "filename": "bitmex-market-maker-1.5.1.tar.gz", "has_sig": false, "md5_digest": "37cbd3bcd322593b4c302029d1d3a402", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23557, "upload_time": "2020-04-28T21:22:35", "upload_time_iso_8601": "2020-04-28T21:22:35.059132Z", "url": "https://files.pythonhosted.org/packages/c8/9b/bfde76450492bb61aabe4cf48470d644a6b2a55a2ab2891bdd6c17571418/bitmex-market-maker-1.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37cbd3bcd322593b4c302029d1d3a402", "sha256": "c31150219b1a4d5ef4e1d64e12bdb53f95de2ef555c83623d06745ba52092f61"}, "downloads": -1, "filename": "bitmex-market-maker-1.5.1.tar.gz", "has_sig": false, "md5_digest": "37cbd3bcd322593b4c302029d1d3a402", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23557, "upload_time": "2020-04-28T21:22:35", "upload_time_iso_8601": "2020-04-28T21:22:35.059132Z", "url": "https://files.pythonhosted.org/packages/c8/9b/bfde76450492bb61aabe4cf48470d644a6b2a55a2ab2891bdd6c17571418/bitmex-market-maker-1.5.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:16 2020"}