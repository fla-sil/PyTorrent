{"info": {"author": "Tarzan", "author_email": "hoc3010@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Installation/Setup", "Topic :: System :: Software Distribution"], "description": "Python MySQL Replication Blinker\n================================\n\nFeatures\n--------\n\nThis package uses\n`mysql-replication <https://github.com/noplay/python-mysql-replication>`__\nto read events from MySQL's binlog and send to blinker's signal.\n\n-  binlog action level\n-  rows level\n\nIt will send RowsEvent only.\n\nWhenever a binlog event come, it will be dispatched into some signals:\n\n#. binlog\\_position\\_signal: 1 signal for the binlog current position\n#. binlog\\_signal: 1 signal for the binlog event.\n#. rows\\_signal: 1 signal for event's rows. 1 signal per row.\n\n\nSignals\n-------\n\nThere are 5 signals:\n\n1. `binlog_position_signal`: sent whenever binlog event come to notify the\n   current position of binlog stream\n2. `binlog_signal`: sent whenever binlog event come to notify the binlog event\n3. `rows_inserted_signal`, `rows_updated_signal`, `rows_deleted_signal`: sent\n   on the event as their name\n\n\nConnect to signals\n------------------\n\nTo connect to a signal, you can use the signal instance or a decorator.\n\nSuppose that you need to connect to write signal on table\n*db0.table1*:\n\n    .. code-block:: python\n\n        from mysqlbinlog2blinker import signals\n\n        @signal.rows_updated.connect\n        def on_rows_updated_signal(table_name, rows, meta):\n            pass\n\n        @signal.binlog_signal.connect\n        def on_binlog_signal(event, stream):\n            pass\n\nSignal publishing\n-----------------\n\nTo start publishing signals\n\n    .. code-block:: python\n\n        from pymysqlblinker import start_publishing\n\n        start_publishing(\n            {\n                'host': 'localohst',\n                'user': 'root',\n            },\n        )\n\nReplication\n-----------\n\nThis package support a method to replicate from mysql database. It\noperates by keep memory at last binlog position. By default, it save to a file.\n\nTo make it, call:\n\n    .. code-block:: python\n\n        from pymysqlblinker import start_replication\n\n        start_replication(\n            {\n                'host': 'localohst',\n                'user': 'root',\n            },\n            ('/path/to/file/that/remember/binlog/position', 2),\n        )\n\nChange logs\n-----------\n\n0.1\n~~~\n\n- First version", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tarzanjw/python-mysql-binlog-to-blinker", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "mysqlbinlog2blinker", "package_url": "https://pypi.org/project/mysqlbinlog2blinker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mysqlbinlog2blinker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tarzanjw/python-mysql-binlog-to-blinker"}, "release_url": "https://pypi.org/project/mysqlbinlog2blinker/0.1/", "requires_dist": null, "requires_python": null, "summary": "This project listen on mysql binlog (as a slave) and send the binlog event to blinker signal. It can remember last binlog position and work as a MySQL slave.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"features\">\n<h2>Features</h2>\n<p>This package uses\n<a href=\"https://github.com/noplay/python-mysql-replication\" rel=\"nofollow\">mysql-replication</a>\nto read events from MySQL\u2019s binlog and send to blinker\u2019s signal.</p>\n<ul>\n<li>binlog action level</li>\n<li>rows level</li>\n</ul>\n<p>It will send RowsEvent only.</p>\n<p>Whenever a binlog event come, it will be dispatched into some signals:</p>\n<ol>\n<li>binlog_position_signal: 1 signal for the binlog current position</li>\n<li>binlog_signal: 1 signal for the binlog event.</li>\n<li>rows_signal: 1 signal for event\u2019s rows. 1 signal per row.</li>\n</ol>\n</div>\n<div id=\"signals\">\n<h2>Signals</h2>\n<p>There are 5 signals:</p>\n<ol>\n<li><cite>binlog_position_signal</cite>: sent whenever binlog event come to notify the\ncurrent position of binlog stream</li>\n<li><cite>binlog_signal</cite>: sent whenever binlog event come to notify the binlog event</li>\n<li><cite>rows_inserted_signal</cite>, <cite>rows_updated_signal</cite>, <cite>rows_deleted_signal</cite>: sent\non the event as their name</li>\n</ol>\n</div>\n<div id=\"connect-to-signals\">\n<h2>Connect to signals</h2>\n<p>To connect to a signal, you can use the signal instance or a decorator.</p>\n<p>Suppose that you need to connect to write signal on table\n<em>db0.table1</em>:</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mysqlbinlog2blinker</span> <span class=\"kn\">import</span> <span class=\"n\">signals</span>\n\n<span class=\"nd\">@signal</span><span class=\"o\">.</span><span class=\"n\">rows_updated</span><span class=\"o\">.</span><span class=\"n\">connect</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_rows_updated_signal</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"p\">,</span> <span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@signal</span><span class=\"o\">.</span><span class=\"n\">binlog_signal</span><span class=\"o\">.</span><span class=\"n\">connect</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_binlog_signal</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"signal-publishing\">\n<h2>Signal publishing</h2>\n<p>To start publishing signals</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymysqlblinker</span> <span class=\"kn\">import</span> <span class=\"n\">start_publishing</span>\n\n<span class=\"n\">start_publishing</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localohst'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"replication\">\n<h2>Replication</h2>\n<p>This package support a method to replicate from mysql database. It\noperates by keep memory at last binlog position. By default, it save to a file.</p>\n<p>To make it, call:</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymysqlblinker</span> <span class=\"kn\">import</span> <span class=\"n\">start_replication</span>\n\n<span class=\"n\">start_replication</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localohst'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">(</span><span class=\"s1\">'/path/to/file/that/remember/binlog/position'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"change-logs\">\n<h2>Change logs</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1</span></h2>\n<ul>\n<li>First version</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2044213, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1ec3fb54aa5a48aa54eebf55be98f408", "sha256": "c5f13cd8c0e6e44178a47b718c3b50bfc17138ce830a8f12f71caa8d0e5fcad8"}, "downloads": -1, "filename": "mysqlbinlog2blinker-0.1.tar.gz", "has_sig": false, "md5_digest": "1ec3fb54aa5a48aa54eebf55be98f408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8760, "upload_time": "2016-04-04T07:49:56", "upload_time_iso_8601": "2016-04-04T07:49:56.862170Z", "url": "https://files.pythonhosted.org/packages/18/74/6ab10a7ab762f69043065ec6b009ed9e65fee3f2fa72c867fe117f270f45/mysqlbinlog2blinker-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ec3fb54aa5a48aa54eebf55be98f408", "sha256": "c5f13cd8c0e6e44178a47b718c3b50bfc17138ce830a8f12f71caa8d0e5fcad8"}, "downloads": -1, "filename": "mysqlbinlog2blinker-0.1.tar.gz", "has_sig": false, "md5_digest": "1ec3fb54aa5a48aa54eebf55be98f408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8760, "upload_time": "2016-04-04T07:49:56", "upload_time_iso_8601": "2016-04-04T07:49:56.862170Z", "url": "https://files.pythonhosted.org/packages/18/74/6ab10a7ab762f69043065ec6b009ed9e65fee3f2fa72c867fe117f270f45/mysqlbinlog2blinker-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:03 2020"}