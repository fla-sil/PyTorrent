{"info": {"author": "alex", "author_email": "alex@fabricadigital.com.br", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: System :: Distributed Computing"], "description": "Django Celery Flower\n====================\n\nFlower is a web based tool for monitoring and administrating Celery clusters.\n\nFeatures\n--------\n\n- Real-time monitoring using Celery Events\n\n    - Task progress and history\n    - Ability to show task details (arguments, start time, runtime, and more)\n    - Graphs and statistics\n\n- Remote Control\n\n    - View worker status and statistics\n    - Shutdown and restart worker instances\n    - Control worker pool size and autoscale settings\n    - View and modify the queues a worker instance consumes from\n    - View currently running tasks\n    - View scheduled tasks (ETA/countdown)\n    - View reserved and revoked tasks\n    - Apply time and rate limits\n    - Configuration viewer\n    - Revoke or terminate tasks\n\n- Broker monitoring\n\n    - View statistics for all Celery queues\n    - Queue length graphs\n\n- HTTP API\n- Basic Auth and Google OpenID authentication\n\nAPI  (TODO)\n-----------\n\nFlower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.\n\nFor example you can restart worker's pool by: ::\n\n    $ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n\nOr call a task by: ::\n\n    $ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n\nOr terminate executing task by: ::\n\n    $ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n\nOr receive task completion events in real-time:\n\n.. code-block:: javascript \n\n    var ws = new WebSocket('ws://localhost:5555/api/task/events/task-succeeded/');\n    ws.onmessage = function (event) {\n        console.log(event.data);\n    }\n\nFor more info checkout `API Reference`_ and `examples`_.\n\n.. _API Reference: https://flower.readthedocs.io/en/latest/api.html\n.. _examples: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nRequirements\n------------\n\n- Django >= 1.11.222\n- Celery >= 4.3\n- jinja2 >= 2.10.1\n\nInstallation\n------------\n\nPyPI version: ::\n\n    $ pip install django-flower\n\nDevelopment version: ::\n\n    $ pip install https://github.com/alexsilva/django-flower/zipball/master\n\nUsage\n-----\n\nAdd app flower to django installed apps: ::\n\n    INSTALLED_APPS = [\n        ...\n        'flower'\n    ]\n\nRun the event command: ::\n\n    $ python manage flower_events\n\nDocumentation\n-------------\n\nEverything that needs to be configured in the `sample project`_\n\n.. _`sample project`: https://github.com/alexsilva/django-flower/blob/master/djproject\n\n`flower_events`_ - is a django command that serves as a backend and should run in the background.\n\n.. _`flower_events`: https://github.com/alexsilva/django-flower/blob/master/flower/management/commands/flower_events.py\n\nDjango settings variable: ::\n\n    FLOWER_RPC_HOST\n    FLOWER_RPC_PORT\n    FLOWER_INSPECT_TIMEOUT\n    FLOWER_AUTH\n    FLOWER_BASIC_AUTH\n    FLOWER_OAUTH2_KEY\n    FLOWER_OAUTH2_SECRET\n    FLOWER_OAUTH2_REDIRECT_URI\n    FLOWER_MAX_WORKERS\n    FLOWER_MAX_TASKS\n    FLOWER_DB\n    FLOWER_PERSISTENT\n    FLOWER_BROKER_API\n    FLOWER_CA_CERTS\n    FLOWER_CERTFILE\n    FLOWER_KEYFILE\n    FLOWER_XHEADERS\n    FLOWER_AUTO_REFRESH\n    FLOWER_COOKIE_SECRET\n    FLOWER_ENABLE_EVENTS\n    FLOWER_FORMAT_TASK\n    FLOWER_NATURAL_TIME\n    FLOWER_TASKS_COLUMNS\n    FLOWER_AUTH_PROVIDER\n    FLOWER_INSPECT\n\n\nLicense\n-------\n\nFlower is licensed under BSD 3-Clause License. See the LICENSE file\nin the top distribution directory for the full license text.\n\nGetting help\n------------\n\nPlease head over to #celery IRC channel on irc.freenode.net or\n`open an issue`_.\n\n.. _open an issue: https://github.com/mher/flower/issues\n\nContributing\n------------\n\nIf you'd like to contribute, simply fork `the repository`_, commit your\nchanges, run the tests (`tox`) and send a pull request.\nMake sure you add yourself to CONTRIBUTORS_.\n\nIf you are interested in maintaining the project please contact.\n\n.. _`the repository`: https://github.com/alexsilva/django-flower\n.. _CONTRIBUTORS: https://github.com/alexsilva/django-flower/blob/master/CONTRIBUTORS\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexsilva/django-flower", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-flower", "package_url": "https://pypi.org/project/django-flower/", "platform": "", "project_url": "https://pypi.org/project/django-flower/", "project_urls": {"Homepage": "https://github.com/alexsilva/django-flower"}, "release_url": "https://pypi.org/project/django-flower/1.0.0/", "requires_dist": ["celery (>=4.3.0)", "humanize (==0.5.1)", "pytz", "django-jinja", "jinja2", "rpyc", "gevent", "futures ; python_version == \"2.7\""], "requires_python": "", "summary": "Django Celery Flower", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Flower is a web based tool for monitoring and administrating Celery clusters.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><p>Real-time monitoring using Celery Events</p>\n<blockquote>\n<ul>\n<li>Task progress and history</li>\n<li>Ability to show task details (arguments, start time, runtime, and more)</li>\n<li>Graphs and statistics</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Remote Control</p>\n<blockquote>\n<ul>\n<li>View worker status and statistics</li>\n<li>Shutdown and restart worker instances</li>\n<li>Control worker pool size and autoscale settings</li>\n<li>View and modify the queues a worker instance consumes from</li>\n<li>View currently running tasks</li>\n<li>View scheduled tasks (ETA/countdown)</li>\n<li>View reserved and revoked tasks</li>\n<li>Apply time and rate limits</li>\n<li>Configuration viewer</li>\n<li>Revoke or terminate tasks</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Broker monitoring</p>\n<blockquote>\n<ul>\n<li>View statistics for all Celery queues</li>\n<li>Queue length graphs</li>\n</ul>\n</blockquote>\n</li>\n<li><p>HTTP API</p>\n</li>\n<li><p>Basic Auth and Google OpenID authentication</p>\n</li>\n</ul>\n</div>\n<div id=\"api-todo\">\n<h2>API  (TODO)</h2>\n<p>Flower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.</p>\n<p>For example you can restart worker\u2019s pool by:</p>\n<pre>$ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n</pre>\n<p>Or call a task by:</p>\n<pre>$ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n</pre>\n<p>Or terminate executing task by:</p>\n<pre>$ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n</pre>\n<p>Or receive task completion events in real-time:</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">ws</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">WebSocket</span><span class=\"p\">(</span><span class=\"s1\">'ws://localhost:5555/api/task/events/task-succeeded/'</span><span class=\"p\">);</span>\n<span class=\"nx\">ws</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For more info checkout <a href=\"https://flower.readthedocs.io/en/latest/api.html\" rel=\"nofollow\">API Reference</a> and <a href=\"http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django &gt;= 1.11.222</li>\n<li>Celery &gt;= 4.3</li>\n<li>jinja2 &gt;= 2.10.1</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PyPI version:</p>\n<pre>$ pip install django-flower\n</pre>\n<p>Development version:</p>\n<pre>$ pip install https://github.com/alexsilva/django-flower/zipball/master\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Add app flower to django installed apps:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'flower'\n]\n</pre>\n<p>Run the event command:</p>\n<pre>$ python manage flower_events\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Everything that needs to be configured in the <a href=\"https://github.com/alexsilva/django-flower/blob/master/djproject\" rel=\"nofollow\">sample project</a></p>\n<p><a href=\"https://github.com/alexsilva/django-flower/blob/master/flower/management/commands/flower_events.py\" rel=\"nofollow\">flower_events</a> - is a django command that serves as a backend and should run in the background.</p>\n<p>Django settings variable:</p>\n<pre>FLOWER_RPC_HOST\nFLOWER_RPC_PORT\nFLOWER_INSPECT_TIMEOUT\nFLOWER_AUTH\nFLOWER_BASIC_AUTH\nFLOWER_OAUTH2_KEY\nFLOWER_OAUTH2_SECRET\nFLOWER_OAUTH2_REDIRECT_URI\nFLOWER_MAX_WORKERS\nFLOWER_MAX_TASKS\nFLOWER_DB\nFLOWER_PERSISTENT\nFLOWER_BROKER_API\nFLOWER_CA_CERTS\nFLOWER_CERTFILE\nFLOWER_KEYFILE\nFLOWER_XHEADERS\nFLOWER_AUTO_REFRESH\nFLOWER_COOKIE_SECRET\nFLOWER_ENABLE_EVENTS\nFLOWER_FORMAT_TASK\nFLOWER_NATURAL_TIME\nFLOWER_TASKS_COLUMNS\nFLOWER_AUTH_PROVIDER\nFLOWER_INSPECT\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Flower is licensed under BSD 3-Clause License. See the LICENSE file\nin the top distribution directory for the full license text.</p>\n</div>\n<div id=\"getting-help\">\n<h2>Getting help</h2>\n<p>Please head over to #celery IRC channel on irc.freenode.net or\n<a href=\"https://github.com/mher/flower/issues\" rel=\"nofollow\">open an issue</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you\u2019d like to contribute, simply fork <a href=\"https://github.com/alexsilva/django-flower\" rel=\"nofollow\">the repository</a>, commit your\nchanges, run the tests (<cite>tox</cite>) and send a pull request.\nMake sure you add yourself to <a href=\"https://github.com/alexsilva/django-flower/blob/master/CONTRIBUTORS\" rel=\"nofollow\">CONTRIBUTORS</a>.</p>\n<p>If you are interested in maintaining the project please contact.</p>\n</div>\n\n          </div>"}, "last_serial": 5503387, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7b4263ae7fffc3816d25467967d4921e", "sha256": "ba1efba4c8457e4d2b82819e9cd7ab9a7a41ff010104b379aa64135b2bae1bbf"}, "downloads": -1, "filename": "django_flower-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7b4263ae7fffc3816d25467967d4921e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 458240, "upload_time": "2019-07-08T22:22:49", "upload_time_iso_8601": "2019-07-08T22:22:49.334706Z", "url": "https://files.pythonhosted.org/packages/1b/30/55e70fc27b8697ef8bd67ef8d816d8fc5141551bebd976ad480faca38621/django_flower-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "024e75f7a407df475b0a87b119be933b", "sha256": "72d8ff8a97b69a7a6759010e1ec157ae5c6cb24ccdfa7e4031e5c22878ab75b9"}, "downloads": -1, "filename": "django-flower-1.0.0.tar.gz", "has_sig": false, "md5_digest": "024e75f7a407df475b0a87b119be933b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1290657, "upload_time": "2019-07-08T22:23:09", "upload_time_iso_8601": "2019-07-08T22:23:09.211264Z", "url": "https://files.pythonhosted.org/packages/b1/86/d572cd5bc02dd241187cb74d3a7bf89d626ef03e3e57b44ec6cd90b0b248/django-flower-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b4263ae7fffc3816d25467967d4921e", "sha256": "ba1efba4c8457e4d2b82819e9cd7ab9a7a41ff010104b379aa64135b2bae1bbf"}, "downloads": -1, "filename": "django_flower-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7b4263ae7fffc3816d25467967d4921e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 458240, "upload_time": "2019-07-08T22:22:49", "upload_time_iso_8601": "2019-07-08T22:22:49.334706Z", "url": "https://files.pythonhosted.org/packages/1b/30/55e70fc27b8697ef8bd67ef8d816d8fc5141551bebd976ad480faca38621/django_flower-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "024e75f7a407df475b0a87b119be933b", "sha256": "72d8ff8a97b69a7a6759010e1ec157ae5c6cb24ccdfa7e4031e5c22878ab75b9"}, "downloads": -1, "filename": "django-flower-1.0.0.tar.gz", "has_sig": false, "md5_digest": "024e75f7a407df475b0a87b119be933b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1290657, "upload_time": "2019-07-08T22:23:09", "upload_time_iso_8601": "2019-07-08T22:23:09.211264Z", "url": "https://files.pythonhosted.org/packages/b1/86/d572cd5bc02dd241187cb74d3a7bf89d626ef03e3e57b44ec6cd90b0b248/django-flower-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:05 2020"}