{"info": {"author": "Luca Lusnig", "author_email": "luca.lusnig@mpi-dortmund.mpg.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ridge_detection\nThis package implements and extends the ridge / line detection algorithm described in:\n\nSteger, C., 1998. An unbiased detector of curvilinear structures. IEEE Transactions on Pattern Analysis and Machine Intelligence, 20(2), pp.113\u2013125.  \n\nIt is basically the translation from java to python of https://github.com/thorstenwagner/ij-ridgedetection.\nFor more informations about the params visit \"https://imagej.net/Ridge_Detection\".\n\n## **Please pay attention that we removed some part of the code and some parameters** \n\nHOW RUN IT\n-\nStarting form the version 2.0.0 a GUI is provided. This is the running main\n\n    from ridge_detection.gui import create_win\n\n    if __name__ == \"__main__\":\n        create_win()\n\nThe core part of the tool is the LineDetector class. That is callable from config file (see below) or with dict variable which must have the same format\n\nAn example script is:\n\n    from ridge_detection.lineDetector import LineDetector\n    from ridge_detection.params import Params,load_json\n    from ridge_detection.basicGeometry import reset_counter\n    from ridge_detection.helper import displayContours,save_to_disk\n    from argparse import ArgumentParser\n    from datetime import datetime\n    from PIL import Image\n    from  mrcfile import open as mrcfile_open\n\n\n    def run():\n        start=datetime.now()\n        parser = ArgumentParser(\"ridge detection parser tool\")\n        parser.add_argument(dest=\"config_filename\",type=str, nargs='?',help=\"name of the config_file to use. Default value is 'example_config.json'\")\n        args=parser.parse_args()\n        config_filename = args.config_filename if args.config_filename is not None else \"example_config.json\"\n        json_data=load_json(config_filename)\n        params = Params(config_filename)\n\n        try:\n            img=mrcfile_open(json_data[\"path_to_file\"]).data\n        except ValueError:\n            img=Image.open(json_data[\"path_to_file\"])\n\n        detect = LineDetector(params=config_filename)\n        result = detect.detectLines(img)\n        resultJunction =detect.junctions\n        out_img,img_only_lines = displayContours(params,result,resultJunction)      \n        if params.get_saveOnFile() is True:\n            save_to_disk(out_img,img_only_lines)\n\n        print(\" TOTAL EXECUTION TIME: \" + str(datetime.now()-start))\n\n    if __name__ == \"__main__\":\n        run()\n\nFrom the command line:\n\n    python main.py name_your_config_file.json\n\nEXAMPLE CONFIG FILE\n-\nIt has to be a json format\n\n    {\n        \"path_to_file\": \"../example.tif\",\n        \"mandatory_parameters\": {\n            \"Sigma\": 3.39,\n            \"Lower_Threshold\": 0.34,\n            \"Upper_Threshold\": 1.02,\n            \"Maximum_Line_Length\": 0,\n            \"Minimum_Line_Length\": 0,\n            \"Darkline\": \"LIGHT\",\n            \"Overlap_resolution\": \"NONE\"\n        },\n\n        \"optional_parameters\": {\n            \"Line_width\": 10.0,\n            \"High_contrast\": 200,\n            \"Low_contrast\": 80\n        },\n\n        \"further_options\": {\n            \"Correct_position\": true,\n            \"Estimate_width\": true,\n            \"doExtendLine\": true,\n            \"Show_junction_points\": true,\n            \"Show_IDs\": false,\n            \"Display_results\": true,\n            \"Preview\": true,\n            \"Make_Binary\": false,\n            \"save_on_disk\": true\n        }\n\t}\n\n\nPARAMETER SELECTION\n\nThere are three parameters which have to be specified. These are the mandatory parameters. The optional parameters can be used to estimate the mandatory parameters\n\n\nMANDATORY PARAMETERS:\n-\n\nSIGMA  -->  Determines  the sigma for the derivatives. It depends on the line width\n\nLOWER THRESHOLD --> Line points with a response smaller as this threshold are rejected \n\nUPPER THRESHOLD --> Line points with a response larger as this threshold are accepted. \n\nDARKLINE (true/false) --> This parameter determines whether dark or bright lines are extracted. \n\nOVERLAP RESOLUTION (None/Slope) --> You can select a method to attempt automatic overlap resolution. The accuracy of this method will depend on the structure of your data.\n * NONE --> The default behavior: no assumption of overlap is made. Any point of potential intersection will be treated as an end point for the ridges involved.\n * SLOPE --> This method makes the assumption that when two ridges overlap, it is more likely that they will continue on their path than make turns. **This is best suited to datasets with brief periods of overlap!** If two ridges have a significant portion of overlap, the accuracy of this method will rapidly diminish. \n\nOPTIONAL PARAMETERS: \n-\nThey are used to estimate the mandatory parameters. It is able starting from the version 3.0.0\n\nThe formula are written using latex. You cannot see them on git. \n\n\nLINE WIDTH (w)  --> The line diameter in pixels. It estimates the mandatory parameter 'Sigma' by: <img src=\"https://latex.codecogs.com/svg.latex?{\\color{White} \\frac{w}{2\\sqrt{3}}+0.5}\"/>\n\nHIGH CONTAST (Bupper) -->  Highest grayscale value of the line. It estimates the mandatory parameter 'Upper threshold' by: <img src=\"https://latex.codecogs.com/svg.latex?{\\color{White} 0.17*\\frac{2*Bupper*\\frac{w}{2}}{\\sqrt{2\\pi}\\sigma^{3}} *   e^{-\\frac{(\\frac{w}{2})^{2}}{2\\sigma ^{2}}} } \"/>\n\nLOW CONTAST  (Blow) --> Lowest grayscale value of the line. It estimates the mandatory parameter 'Lower threshold' by: <img src=\"https://latex.codecogs.com/svg.latex?{\\color{White} 0.17*\\frac{2*Blow*\\frac{w}{2}}{\\sqrt{2\\pi}\\sigma^{3}} *   e^{-\\frac{(\\frac{w}{2})^{2}}{2\\sigma ^{2}}} }\"/>\n\nFURTHER OPTIONS (True/False)\n-\n\nCORRECTION POSITION --> Correct the line position if it has different contrast on each side of it\n\nESTIMATE WIDTH: If this option is selected the width of the line is estimated.\n\nSHOW JUNCTION POINTS: If this option is selected the junctions points will be displayed.\n\nSHOW IDs: The ID of each line will be shown.\n\nDISPLAY RESULTS: If this option is selected, all contours and junctions are filled into a results table.\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ridge-detection", "package_url": "https://pypi.org/project/ridge-detection/", "platform": "", "project_url": "https://pypi.org/project/ridge-detection/", "project_urls": null, "release_url": "https://pypi.org/project/ridge-detection/3.0.0/", "requires_dist": ["numpy (>=1.14.0)", "simplejson (>=3.16.0)", "pillow (>=6.1.0)", "mrcfile (>=1.1.2)"], "requires_python": ">3.4.0", "summary": "ridge / line detection algorithm", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ridge_detection</h1>\n<p>This package implements and extends the ridge / line detection algorithm described in:</p>\n<p>Steger, C., 1998. An unbiased detector of curvilinear structures. IEEE Transactions on Pattern Analysis and Machine Intelligence, 20(2), pp.113\u2013125.</p>\n<p>It is basically the translation from java to python of <a href=\"https://github.com/thorstenwagner/ij-ridgedetection\" rel=\"nofollow\">https://github.com/thorstenwagner/ij-ridgedetection</a>.\nFor more informations about the params visit \"<a href=\"https://imagej.net/Ridge_Detection\" rel=\"nofollow\">https://imagej.net/Ridge_Detection</a>\".</p>\n<h2><strong>Please pay attention that we removed some part of the code and some parameters</strong></h2>\n<h2>HOW RUN IT</h2>\n<p>Starting form the version 2.0.0 a GUI is provided. This is the running main</p>\n<pre><code>from ridge_detection.gui import create_win\n\nif __name__ == \"__main__\":\n    create_win()\n</code></pre>\n<p>The core part of the tool is the LineDetector class. That is callable from config file (see below) or with dict variable which must have the same format</p>\n<p>An example script is:</p>\n<pre><code>from ridge_detection.lineDetector import LineDetector\nfrom ridge_detection.params import Params,load_json\nfrom ridge_detection.basicGeometry import reset_counter\nfrom ridge_detection.helper import displayContours,save_to_disk\nfrom argparse import ArgumentParser\nfrom datetime import datetime\nfrom PIL import Image\nfrom  mrcfile import open as mrcfile_open\n\n\ndef run():\n    start=datetime.now()\n    parser = ArgumentParser(\"ridge detection parser tool\")\n    parser.add_argument(dest=\"config_filename\",type=str, nargs='?',help=\"name of the config_file to use. Default value is 'example_config.json'\")\n    args=parser.parse_args()\n    config_filename = args.config_filename if args.config_filename is not None else \"example_config.json\"\n    json_data=load_json(config_filename)\n    params = Params(config_filename)\n\n    try:\n        img=mrcfile_open(json_data[\"path_to_file\"]).data\n    except ValueError:\n        img=Image.open(json_data[\"path_to_file\"])\n\n    detect = LineDetector(params=config_filename)\n    result = detect.detectLines(img)\n    resultJunction =detect.junctions\n    out_img,img_only_lines = displayContours(params,result,resultJunction)      \n    if params.get_saveOnFile() is True:\n        save_to_disk(out_img,img_only_lines)\n\n    print(\" TOTAL EXECUTION TIME: \" + str(datetime.now()-start))\n\nif __name__ == \"__main__\":\n    run()\n</code></pre>\n<p>From the command line:</p>\n<pre><code>python main.py name_your_config_file.json\n</code></pre>\n<h2>EXAMPLE CONFIG FILE</h2>\n<p>It has to be a json format</p>\n<pre><code>{\n    \"path_to_file\": \"../example.tif\",\n    \"mandatory_parameters\": {\n        \"Sigma\": 3.39,\n        \"Lower_Threshold\": 0.34,\n        \"Upper_Threshold\": 1.02,\n        \"Maximum_Line_Length\": 0,\n        \"Minimum_Line_Length\": 0,\n        \"Darkline\": \"LIGHT\",\n        \"Overlap_resolution\": \"NONE\"\n    },\n\n    \"optional_parameters\": {\n        \"Line_width\": 10.0,\n        \"High_contrast\": 200,\n        \"Low_contrast\": 80\n    },\n\n    \"further_options\": {\n        \"Correct_position\": true,\n        \"Estimate_width\": true,\n        \"doExtendLine\": true,\n        \"Show_junction_points\": true,\n        \"Show_IDs\": false,\n        \"Display_results\": true,\n        \"Preview\": true,\n        \"Make_Binary\": false,\n        \"save_on_disk\": true\n    }\n}\n</code></pre>\n<p>PARAMETER SELECTION</p>\n<p>There are three parameters which have to be specified. These are the mandatory parameters. The optional parameters can be used to estimate the mandatory parameters</p>\n<h2>MANDATORY PARAMETERS:</h2>\n<p>SIGMA  --&gt;  Determines  the sigma for the derivatives. It depends on the line width</p>\n<p>LOWER THRESHOLD --&gt; Line points with a response smaller as this threshold are rejected</p>\n<p>UPPER THRESHOLD --&gt; Line points with a response larger as this threshold are accepted.</p>\n<p>DARKLINE (true/false) --&gt; This parameter determines whether dark or bright lines are extracted.</p>\n<p>OVERLAP RESOLUTION (None/Slope) --&gt; You can select a method to attempt automatic overlap resolution. The accuracy of this method will depend on the structure of your data.</p>\n<ul>\n<li>NONE --&gt; The default behavior: no assumption of overlap is made. Any point of potential intersection will be treated as an end point for the ridges involved.</li>\n<li>SLOPE --&gt; This method makes the assumption that when two ridges overlap, it is more likely that they will continue on their path than make turns. <strong>This is best suited to datasets with brief periods of overlap!</strong> If two ridges have a significant portion of overlap, the accuracy of this method will rapidly diminish.</li>\n</ul>\n<h2>OPTIONAL PARAMETERS:</h2>\n<p>They are used to estimate the mandatory parameters. It is able starting from the version 3.0.0</p>\n<p>The formula are written using latex. You cannot see them on git.</p>\n<p>LINE WIDTH (w)  --&gt; The line diameter in pixels. It estimates the mandatory parameter 'Sigma' by: <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae73012cb90c61b940ab54128e0d604558534ef0/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f7b5c636f6c6f727b57686974657d205c667261637b777d7b325c737172747b337d7d2b302e357d\"></p>\n<p>HIGH CONTAST (Bupper) --&gt;  Highest grayscale value of the line. It estimates the mandatory parameter 'Upper threshold' by: <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10d4fb7cada7089b4d2cf97a5a813a31c8b368cd/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f7b5c636f6c6f727b57686974657d20302e31372a5c667261637b322a4275707065722a5c667261637b777d7b327d7d7b5c737172747b325c70697d5c7369676d615e7b337d7d202a202020655e7b2d5c667261637b285c667261637b777d7b327d295e7b327d7d7b325c7369676d61205e7b327d7d7d207d20\"></p>\n<p>LOW CONTAST  (Blow) --&gt; Lowest grayscale value of the line. It estimates the mandatory parameter 'Lower threshold' by: <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46076ff4677c4d419af7f24a2159df3461cd7299/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f7b5c636f6c6f727b57686974657d20302e31372a5c667261637b322a426c6f772a5c667261637b777d7b327d7d7b5c737172747b325c70697d5c7369676d615e7b337d7d202a202020655e7b2d5c667261637b285c667261637b777d7b327d295e7b327d7d7b325c7369676d61205e7b327d7d7d207d\"></p>\n<h2>FURTHER OPTIONS (True/False)</h2>\n<p>CORRECTION POSITION --&gt; Correct the line position if it has different contrast on each side of it</p>\n<p>ESTIMATE WIDTH: If this option is selected the width of the line is estimated.</p>\n<p>SHOW JUNCTION POINTS: If this option is selected the junctions points will be displayed.</p>\n<p>SHOW IDs: The ID of each line will be shown.</p>\n<p>DISPLAY RESULTS: If this option is selected, all contours and junctions are filled into a results table.</p>\n\n          </div>"}, "last_serial": 6739858, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "b2f5eebd61fdfb45cfc4aabc3f7c87c3", "sha256": "e4bb435ad7cd793951e16953828fdb920999a6159fb7af4080b78e55b642dfa5"}, "downloads": -1, "filename": "ridge_detection-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b2f5eebd61fdfb45cfc4aabc3f7c87c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.4.0", "size": 81285, "upload_time": "2020-02-14T12:48:43", "upload_time_iso_8601": "2020-02-14T12:48:43.083777Z", "url": "https://files.pythonhosted.org/packages/39/69/e915fe7e7e8d5092cb43195bfaef4d5ae9b98dfeb07f1574f312185a204c/ridge_detection-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6625d0db50fb9d0a7b85c3663ec195f3", "sha256": "b2a1197e46b855a2e231553fd320c7fc81210edad43d5f2143779f956197de27"}, "downloads": -1, "filename": "ridge_detection-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6625d0db50fb9d0a7b85c3663ec195f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.4.0", "size": 74637, "upload_time": "2020-02-14T12:48:45", "upload_time_iso_8601": "2020-02-14T12:48:45.046853Z", "url": "https://files.pythonhosted.org/packages/26/87/bf60b9b1b7435bcd313707b26a0b8792e379c333c4a7a8e34018c6883e54/ridge_detection-1.1.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "cbc11ef03f9ab1c1e9a22d089d15efea", "sha256": "f9f35def946a9ff37aeb4cc733435241bc6ca3ab41f1dd5dfcf03b266a2c9d69"}, "downloads": -1, "filename": "ridge_detection-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cbc11ef03f9ab1c1e9a22d089d15efea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.4.0", "size": 88912, "upload_time": "2020-02-26T14:32:20", "upload_time_iso_8601": "2020-02-26T14:32:20.558627Z", "url": "https://files.pythonhosted.org/packages/6d/08/21ba9d22afa0905347c676100a4e06a641b452c6cdc86035e45eb75164e3/ridge_detection-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa35e5a82fc03c6ae2edf29feba73ec5", "sha256": "2112be305e50d9458aa80ddcfbddf6e398b58493c16d26a3118f4019e6b8f0aa"}, "downloads": -1, "filename": "ridge_detection-2.0.1.tar.gz", "has_sig": false, "md5_digest": "fa35e5a82fc03c6ae2edf29feba73ec5", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.4.0", "size": 79919, "upload_time": "2020-02-26T14:32:22", "upload_time_iso_8601": "2020-02-26T14:32:22.240240Z", "url": "https://files.pythonhosted.org/packages/01/b4/e6d44218b478aa6ef70ec55f48976dad18af64878c076cf35109bc667be6/ridge_detection-2.0.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "1120b65ffef6f8364ea3b794c2b19718", "sha256": "1e04b98a6b5edd25251e35e08574ac958cb0bd120f683cf4a07f9b44f9771ee8"}, "downloads": -1, "filename": "ridge_detection-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1120b65ffef6f8364ea3b794c2b19718", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.4.0", "size": 89174, "upload_time": "2020-03-03T12:25:27", "upload_time_iso_8601": "2020-03-03T12:25:27.577899Z", "url": "https://files.pythonhosted.org/packages/fd/97/84b3ea1cd208a83856b98b689e29fbc6dd3afee4dccd5da47cc76d128f10/ridge_detection-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b02471a455e67eac5524d46a34239711", "sha256": "32b9b612f39662d78bbcaa06514233c742e1611beb0f6dc5edd449ca7055abd8"}, "downloads": -1, "filename": "ridge_detection-3.0.0.tar.gz", "has_sig": false, "md5_digest": "b02471a455e67eac5524d46a34239711", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.4.0", "size": 80197, "upload_time": "2020-03-03T12:25:29", "upload_time_iso_8601": "2020-03-03T12:25:29.199408Z", "url": "https://files.pythonhosted.org/packages/7e/89/45e4301c77e106ed11f71e7563c16fa0ba0b336a906996d7c04aebd777e6/ridge_detection-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1120b65ffef6f8364ea3b794c2b19718", "sha256": "1e04b98a6b5edd25251e35e08574ac958cb0bd120f683cf4a07f9b44f9771ee8"}, "downloads": -1, "filename": "ridge_detection-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1120b65ffef6f8364ea3b794c2b19718", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.4.0", "size": 89174, "upload_time": "2020-03-03T12:25:27", "upload_time_iso_8601": "2020-03-03T12:25:27.577899Z", "url": "https://files.pythonhosted.org/packages/fd/97/84b3ea1cd208a83856b98b689e29fbc6dd3afee4dccd5da47cc76d128f10/ridge_detection-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b02471a455e67eac5524d46a34239711", "sha256": "32b9b612f39662d78bbcaa06514233c742e1611beb0f6dc5edd449ca7055abd8"}, "downloads": -1, "filename": "ridge_detection-3.0.0.tar.gz", "has_sig": false, "md5_digest": "b02471a455e67eac5524d46a34239711", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.4.0", "size": 80197, "upload_time": "2020-03-03T12:25:29", "upload_time_iso_8601": "2020-03-03T12:25:29.199408Z", "url": "https://files.pythonhosted.org/packages/7e/89/45e4301c77e106ed11f71e7563c16fa0ba0b336a906996d7c04aebd777e6/ridge_detection-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:44 2020"}