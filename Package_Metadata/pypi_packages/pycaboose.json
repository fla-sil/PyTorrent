{"info": {"author": "John Westhoff", "author_email": "johnjwesthoff@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "PyCaboose\n=========\n\n[![Build Status](https://github.com/johnathonnow/pycaboose/workflows/Build/badge.svg)](https://github.com/JohnathonNow/pycaboose/actions)\n[![PyPI version](https://badge.fury.io/py/pycaboose.svg)](https://badge.fury.io/py/pycaboose)\n\n\nIdea\n----\n\nExisting persistent storage solutions suck because they decouple your code from\nthe data that it needs to run. Under current solutions you must either use a\nlocal file, a database, or some external service in order to store your data\nin between executions of your script. These solutions are bad because with any\nlocal storage you have to remember to copy your data over too when you want\nto use your script somewhere else while still retaining the stored data.\nExternal services require internet connections, and those can be unreliable,\nwhich is very bad. Another potential solution is to just have your script\nnever terminate, thus it would have no need to persist data as it will retain\nit in memory. This is obviously stupid.\n\nEnter **PyCaboose**, a Python library for persisting data within the script file\nitself.\n\nUsage\n-----\n\nUsing **PyCaboose** is very easy. Consider the following example:\n\n```python\nfrom pycaboose import Value\na = Value(0)\nprint(a.value)\na.value += 1\n```\n\nThe first time you run this script, it will print out `0`. Then, the next time\nyou run the script, once the `Value` object is instantiated, it will perform a \nlookup for the most recent value, which is 1. So the `print` will instead print\n`1` instead of `0`.\n\nHow does it do this? Good question.\n\nMechanism\n---------\n\nThe secret sauce to **PyCaboose** is its in-script database. When the **pycaboose**\nmodule is imported, it opens your script file and scans it for a special marker\nthat it places there the first time it is imported. Then, any time a **PyCaboose**\n**Value** is changed, it writes the new value to the script. So, using the\nabove example, after running the script the first time, it will instead look\nlike this:\n\n\n```python\nfrom pycaboose import Value\na = Value(0)\nprint(a.value)\na.value += 1\n# pycaboose #\n# gANLA0sBhnEALg==\n```\n\nBreaking that down, it inserted a comment, `# pycaboose #`, which indicates where\nit will be storing data. This must be at the end of the file. Next, there is\nanother comment, but this time it is more involved. \nThere is a bunch of garbage. This garbage is a base64 encoded string. But what\ndoes it encode? Another good question.\n\nThe b64 encoded string encodes a pickle. That pickle encodes a tuple\n`(line, value)`. The `line` is how we know which variable we are talking about,\nwhich is important if there is more than one **Value** in the script.\n(Note this means that at the moment two **Value**s cannot be declared\non the same line. Deal with it.)\nIn this case, `line` will be `2`, because we stored `a` on line `2`.\nThe `value` is the stored value of the object, which in this case is `1`\nas that is the most recent value of the **Value**.\n\nNow if we were to run the script again, upon instantiating the **Value**,\n**PyCaboose** will know that it has stored a value for that **Value** and loads\nthat rather than using the value the user specified.\n\nFor writes, **PyCaboose** truncates the file, removing the line that stored the\nold value of the **Value** if it was previously stored. It then writes back\nany data it may have removed, and then writes the new data to the end of the\nfile. In doing so it creates something of a LRU cache where accessing\n**Value**s that haven't been accessed in a while is slower than accessing the\n**Value** that was most recently modified.\n\nDisclaimer\n----------\n\nPlease note that this is more or less a joke and not really meant to be used.\nPlease don't hold me responsible for data that is not persisted, or scripts\nthat are completely mangled. For any import data you should have backups,\nbackups of those backups, several GitHub repos containing the data, and the\ndata should also be stored in DropBox, OneDrive, encoded and uploaded to\nYouTube, and should be stored on an insecure mongodb instance running on\na raspberry pi in your closet.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JohnathonNow/pycaboose", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycaboose", "package_url": "https://pypi.org/project/pycaboose/", "platform": "", "project_url": "https://pypi.org/project/pycaboose/", "project_urls": {"Homepage": "https://github.com/JohnathonNow/pycaboose"}, "release_url": "https://pypi.org/project/pycaboose/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "A python library for persisting data within a script.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCaboose</h1>\n<p><a href=\"https://github.com/JohnathonNow/pycaboose/actions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7dd5f4506bad1480d470f71a5f28ac88b8d45fb/68747470733a2f2f6769746875622e636f6d2f6a6f686e6174686f6e6e6f772f70796361626f6f73652f776f726b666c6f77732f4275696c642f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/pycaboose\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd498dcfccc05af2b6e518d9a5ab4e34d4806ae6/68747470733a2f2f62616467652e667572792e696f2f70792f70796361626f6f73652e737667\"></a></p>\n<h2>Idea</h2>\n<p>Existing persistent storage solutions suck because they decouple your code from\nthe data that it needs to run. Under current solutions you must either use a\nlocal file, a database, or some external service in order to store your data\nin between executions of your script. These solutions are bad because with any\nlocal storage you have to remember to copy your data over too when you want\nto use your script somewhere else while still retaining the stored data.\nExternal services require internet connections, and those can be unreliable,\nwhich is very bad. Another potential solution is to just have your script\nnever terminate, thus it would have no need to persist data as it will retain\nit in memory. This is obviously stupid.</p>\n<p>Enter <strong>PyCaboose</strong>, a Python library for persisting data within the script file\nitself.</p>\n<h2>Usage</h2>\n<p>Using <strong>PyCaboose</strong> is very easy. Consider the following example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycaboose</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre>\n<p>The first time you run this script, it will print out <code>0</code>. Then, the next time\nyou run the script, once the <code>Value</code> object is instantiated, it will perform a\nlookup for the most recent value, which is 1. So the <code>print</code> will instead print\n<code>1</code> instead of <code>0</code>.</p>\n<p>How does it do this? Good question.</p>\n<h2>Mechanism</h2>\n<p>The secret sauce to <strong>PyCaboose</strong> is its in-script database. When the <strong>pycaboose</strong>\nmodule is imported, it opens your script file and scans it for a special marker\nthat it places there the first time it is imported. Then, any time a <strong>PyCaboose</strong>\n<strong>Value</strong> is changed, it writes the new value to the script. So, using the\nabove example, after running the script the first time, it will instead look\nlike this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycaboose</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># pycaboose #</span>\n<span class=\"c1\"># gANLA0sBhnEALg==</span>\n</pre>\n<p>Breaking that down, it inserted a comment, <code># pycaboose #</code>, which indicates where\nit will be storing data. This must be at the end of the file. Next, there is\nanother comment, but this time it is more involved.\nThere is a bunch of garbage. This garbage is a base64 encoded string. But what\ndoes it encode? Another good question.</p>\n<p>The b64 encoded string encodes a pickle. That pickle encodes a tuple\n<code>(line, value)</code>. The <code>line</code> is how we know which variable we are talking about,\nwhich is important if there is more than one <strong>Value</strong> in the script.\n(Note this means that at the moment two <strong>Value</strong>s cannot be declared\non the same line. Deal with it.)\nIn this case, <code>line</code> will be <code>2</code>, because we stored <code>a</code> on line <code>2</code>.\nThe <code>value</code> is the stored value of the object, which in this case is <code>1</code>\nas that is the most recent value of the <strong>Value</strong>.</p>\n<p>Now if we were to run the script again, upon instantiating the <strong>Value</strong>,\n<strong>PyCaboose</strong> will know that it has stored a value for that <strong>Value</strong> and loads\nthat rather than using the value the user specified.</p>\n<p>For writes, <strong>PyCaboose</strong> truncates the file, removing the line that stored the\nold value of the <strong>Value</strong> if it was previously stored. It then writes back\nany data it may have removed, and then writes the new data to the end of the\nfile. In doing so it creates something of a LRU cache where accessing\n<strong>Value</strong>s that haven't been accessed in a while is slower than accessing the\n<strong>Value</strong> that was most recently modified.</p>\n<h2>Disclaimer</h2>\n<p>Please note that this is more or less a joke and not really meant to be used.\nPlease don't hold me responsible for data that is not persisted, or scripts\nthat are completely mangled. For any import data you should have backups,\nbackups of those backups, several GitHub repos containing the data, and the\ndata should also be stored in DropBox, OneDrive, encoded and uploaded to\nYouTube, and should be stored on an insecure mongodb instance running on\na raspberry pi in your closet.</p>\n\n          </div>"}, "last_serial": 6650743, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "781854279fb5544cbac35082ed1106b4", "sha256": "b60704f677a7268af800e0bbe69c2d775f5e8be74593ced9260295a2259374ea"}, "downloads": -1, "filename": "pycaboose-1.0.0.tar.gz", "has_sig": false, "md5_digest": "781854279fb5544cbac35082ed1106b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3850, "upload_time": "2019-11-03T17:33:44", "upload_time_iso_8601": "2019-11-03T17:33:44.625153Z", "url": "https://files.pythonhosted.org/packages/6a/b0/5b4e73ab013ea300e3b02f20814c003f4b2f4d13bd5f2779531b49eeced2/pycaboose-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3ffb9e82daecda2ab79c02f3cc680b65", "sha256": "9b6dd62f7b712d1b279aac02fe256dc13a37388a8d46515de40ca4c4f441d6cc"}, "downloads": -1, "filename": "pycaboose-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3ffb9e82daecda2ab79c02f3cc680b65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4057, "upload_time": "2019-11-04T04:44:22", "upload_time_iso_8601": "2019-11-04T04:44:22.387578Z", "url": "https://files.pythonhosted.org/packages/67/fd/52fe401a15c38baa3847e6980b5270df4473571a4263181142b8e2649297/pycaboose-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0f6fc998e9490dc04bf44f78f7147893", "sha256": "b8feacd944f9ba4940b362df00bf57ef0ef8f9d36e12c04505ddac6f65d8ddf1"}, "downloads": -1, "filename": "pycaboose-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0f6fc998e9490dc04bf44f78f7147893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4050, "upload_time": "2019-11-05T05:27:50", "upload_time_iso_8601": "2019-11-05T05:27:50.803911Z", "url": "https://files.pythonhosted.org/packages/bb/13/39aa8e39676d7f5e977063cf863cc875dbc9717f9af65d7baaf312e58a05/pycaboose-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5d46cb2c559a565b9867965afe9d294e", "sha256": "4079ef73c61459eadf4e8867401832334c99be709e3f0bc7125f2f8115525e6d"}, "downloads": -1, "filename": "pycaboose-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5d46cb2c559a565b9867965afe9d294e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4795, "upload_time": "2020-02-13T06:01:30", "upload_time_iso_8601": "2020-02-13T06:01:30.198363Z", "url": "https://files.pythonhosted.org/packages/a7/f1/0b4d71f5d44d5bfc2f36d4cd4f5af2955807d1e4d00fe28d4e9b403873a2/pycaboose-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8dac6c3d0be4660dd1bc0b352e0f94f0", "sha256": "d1cb1cd4a8e9c0f35add2b73996f776bd1c6b186284a92cbf1869d9ea149b822"}, "downloads": -1, "filename": "pycaboose-1.1.0.tar.gz", "has_sig": false, "md5_digest": "8dac6c3d0be4660dd1bc0b352e0f94f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5096, "upload_time": "2020-02-18T04:04:49", "upload_time_iso_8601": "2020-02-18T04:04:49.521854Z", "url": "https://files.pythonhosted.org/packages/c0/65/6bbb5c20a2a83191514dcea6fc625178ffa905b339777dc287bf2faf91c3/pycaboose-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "526eb94746203be940b68c0c348c01e0", "sha256": "7f6c56841c09a2fa6bcc23cc1d65739f362b8d907a3b6c582b395f9b91a70ff6"}, "downloads": -1, "filename": "pycaboose-1.1.1.tar.gz", "has_sig": false, "md5_digest": "526eb94746203be940b68c0c348c01e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5023, "upload_time": "2020-02-18T04:17:00", "upload_time_iso_8601": "2020-02-18T04:17:00.518562Z", "url": "https://files.pythonhosted.org/packages/55/95/7e42a5b31af122ad91d379124ae066ff3910802d918838b7d33851a84102/pycaboose-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "526eb94746203be940b68c0c348c01e0", "sha256": "7f6c56841c09a2fa6bcc23cc1d65739f362b8d907a3b6c582b395f9b91a70ff6"}, "downloads": -1, "filename": "pycaboose-1.1.1.tar.gz", "has_sig": false, "md5_digest": "526eb94746203be940b68c0c348c01e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5023, "upload_time": "2020-02-18T04:17:00", "upload_time_iso_8601": "2020-02-18T04:17:00.518562Z", "url": "https://files.pythonhosted.org/packages/55/95/7e42a5b31af122ad91d379124ae066ff3910802d918838b7d33851a84102/pycaboose-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:52 2020"}