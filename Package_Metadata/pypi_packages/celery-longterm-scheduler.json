{"info": {"author": "Zeit Online", "author_email": "zon-backend@zeit.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "=========================\ncelery_longterm_scheduler\n=========================\n\nSchedules celery tasks to run in the potentially far future, using a separate\nstorage backend (currently only redis is supported) in combination with a\ncronjob.\n\n\nUsage\n=====\n\n* Configure the storage by adding a setting like ``longterm_scheduler_backend =\n  'redis://localhost:6739/1'`` to your celery configuration.\n  (The storage also respects the built-in celery configuration settings\n  ``redis_socket_timeout``, ``redis_socket_connect_timeout`` and\n  ``redis_max_connections``.)\n* Configure your celery app to use a customized task class\n  ``MYCELERY = celery.Celery(task_cls=celery_longterm_scheduler.Task)``\n* Set up a cronjob to run ``celery longterm_scheduler`` (e.g. every 5 minutes)\n* Now you can schedule your tasks by calling\n  ``mytask.apply_async(args, kwargs, eta=datetime)`` as normal. This returns\n  a normal ``AsyncResult`` object, but only reading the ``.id`` is supported;\n  any other methods or properties may fail explictly or implicitly.\n* You can completely delete a scheduled job by calling\n  ``celery_longterm_scheduler.get_scheduler(MYCELERY).revoke('mytaskid')``\n  (we cannot hook into the celery built-in ``AsyncResult.revoke()``,\n  unfortunately). ``revoke()`` returns True on success and False if the given\n  task cannot be found in the storage backend (e.g. because it has already come\n  due and been executed).\n\nInstead of sending a normal job to the celery broker (with added timing\ninformation), this creates a job entry in the scheduler storage backend. The\ncronjob then periodically checks the storage for any jobs that are due, and\nonly then sends a normal celery job to the broker.\n\n\nRationale\n=========\n\nWhy not use the celery built-in ``apply_async(eta=)``? Because you cannot ever\nreally delete a pending job. ``AsyncResult('mytaskid').revoke()`` can only add\nthe task ID to the statedb, where it has to stay _forever_ so the job is\nrecognized as revoked. For jobs that are scheduled to run in 6 months time or\nlater, this would create an unmanageable, ever-growing statedb.\n\nWhy not use celerybeat? Because it is built for periodic jobs, and we need\nsingle-shot jobs. And then there's not much to gain from the celerybeat\nimplementation, especially since we want to use redis as storage (since we're\nalready using that as broker and result backend).\n\n\nImplementation\n==============\n\nRedis schema\n------------\n\ncelery_longterm_scheduler assumes that it talks to a dedicated redis database.\nIt creates an entry per scheduled job using ``SET jobid job-configuration``\n(job-configuration is serialized with JSON) and uses a single sorted set named\n``scheduled_task_id_by_time`` that contains the jobids scored by the unix\ntimestamp (UTC) when they are due.\n\n\nRun tests\n=========\n\nUsing `tox`_ and `py.test`_. Maybe install ``tox`` (e.g. via ``pip install tox``)\nand then simply run ``tox``.\n\nFor the integration tests you need to have the redis binary installed (tests\nstart `their own server`_).\n\n.. _`tox`: http://tox.readthedocs.io/\n.. _`py.test`: http://pytest.org/\n.. _`their own server`: https://pypi.python.org/pypi/testing.redis\n\n\ncelery_longterm_scheduler changes\n=================================\n\n1.1.1 (2019-12-19)\n------------------\n\n- Update to current redis client library version 3.x\n\n\n1.1.0 (2019-11-28)\n------------------\n\n- Make Python-3 compatible.\n\n\n1.0.1 (2018-01-17)\n------------------\n\n- Don't try to schedule on ``apply_async(eta=None)`` calls\n\n\n1.0.0 (2017-09-29)\n------------------\n\n- Initial release", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zeitonline/celery_longterm_scheduler", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "celery-longterm-scheduler", "package_url": "https://pypi.org/project/celery-longterm-scheduler/", "platform": "", "project_url": "https://pypi.org/project/celery-longterm-scheduler/", "project_urls": {"Homepage": "https://github.com/zeitonline/celery_longterm_scheduler"}, "release_url": "https://pypi.org/project/celery-longterm-scheduler/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Schedules celery tasks to run in the potentially far future", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Schedules celery tasks to run in the potentially far future, using a separate\nstorage backend (currently only redis is supported) in combination with a\ncronjob.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>Configure the storage by adding a setting like <tt>longterm_scheduler_backend =\n<span class=\"pre\">'redis://localhost:6739/1'</span></tt> to your celery configuration.\n(The storage also respects the built-in celery configuration settings\n<tt>redis_socket_timeout</tt>, <tt>redis_socket_connect_timeout</tt> and\n<tt>redis_max_connections</tt>.)</li>\n<li>Configure your celery app to use a customized task class\n<tt>MYCELERY = celery.Celery(task_cls=celery_longterm_scheduler.Task)</tt></li>\n<li>Set up a cronjob to run <tt>celery longterm_scheduler</tt> (e.g. every 5 minutes)</li>\n<li>Now you can schedule your tasks by calling\n<tt>mytask.apply_async(args, kwargs, eta=datetime)</tt> as normal. This returns\na normal <tt>AsyncResult</tt> object, but only reading the <tt>.id</tt> is supported;\nany other methods or properties may fail explictly or implicitly.</li>\n<li>You can completely delete a scheduled job by calling\n<tt><span class=\"pre\">celery_longterm_scheduler.get_scheduler(MYCELERY).revoke('mytaskid')</span></tt>\n(we cannot hook into the celery built-in <tt>AsyncResult.revoke()</tt>,\nunfortunately). <tt>revoke()</tt> returns True on success and False if the given\ntask cannot be found in the storage backend (e.g. because it has already come\ndue and been executed).</li>\n</ul>\n<p>Instead of sending a normal job to the celery broker (with added timing\ninformation), this creates a job entry in the scheduler storage backend. The\ncronjob then periodically checks the storage for any jobs that are due, and\nonly then sends a normal celery job to the broker.</p>\n</div>\n<div id=\"rationale\">\n<h2>Rationale</h2>\n<p>Why not use the celery built-in <tt>apply_async(eta=)</tt>? Because you cannot ever\nreally delete a pending job. <tt><span class=\"pre\">AsyncResult('mytaskid').revoke()</span></tt> can only add\nthe task ID to the statedb, where it has to stay _forever_ so the job is\nrecognized as revoked. For jobs that are scheduled to run in 6 months time or\nlater, this would create an unmanageable, ever-growing statedb.</p>\n<p>Why not use celerybeat? Because it is built for periodic jobs, and we need\nsingle-shot jobs. And then there\u2019s not much to gain from the celerybeat\nimplementation, especially since we want to use redis as storage (since we\u2019re\nalready using that as broker and result backend).</p>\n</div>\n<div id=\"implementation\">\n<h2>Implementation</h2>\n<h2 id=\"redis-schema\"><span class=\"section-subtitle\">Redis schema</span></h2>\n<p>celery_longterm_scheduler assumes that it talks to a dedicated redis database.\nIt creates an entry per scheduled job using <tt>SET jobid <span class=\"pre\">job-configuration</span></tt>\n(job-configuration is serialized with JSON) and uses a single sorted set named\n<tt>scheduled_task_id_by_time</tt> that contains the jobids scored by the unix\ntimestamp (UTC) when they are due.</p>\n</div>\n<div id=\"run-tests\">\n<h2>Run tests</h2>\n<p>Using <a href=\"http://tox.readthedocs.io/\" rel=\"nofollow\">tox</a> and <a href=\"http://pytest.org/\" rel=\"nofollow\">py.test</a>. Maybe install <tt>tox</tt> (e.g. via <tt>pip install tox</tt>)\nand then simply run <tt>tox</tt>.</p>\n<p>For the integration tests you need to have the redis binary installed (tests\nstart <a href=\"https://pypi.python.org/pypi/testing.redis\" rel=\"nofollow\">their own server</a>).</p>\n</div>\n<div id=\"celery-longterm-scheduler-changes\">\n<h2>celery_longterm_scheduler changes</h2>\n<div id=\"id1\">\n<h3>1.1.1 (2019-12-19)</h3>\n<ul>\n<li>Update to current redis client library version 3.x</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.1.0 (2019-11-28)</h3>\n<ul>\n<li>Make Python-3 compatible.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.1 (2018-01-17)</h3>\n<ul>\n<li>Don\u2019t try to schedule on <tt>apply_async(eta=None)</tt> calls</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.0 (2017-09-29)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6331065, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "007eda2f87d637a2675a4d56928c2ba5", "sha256": "8f0e59729b59315dcc869c1c5457f1640ed22de016dc56c3f0a485a0fd96b50f"}, "downloads": -1, "filename": "celery_longterm_scheduler-1.0.0.tar.gz", "has_sig": false, "md5_digest": "007eda2f87d637a2675a4d56928c2ba5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11307, "upload_time": "2017-09-29T08:16:14", "upload_time_iso_8601": "2017-09-29T08:16:14.585496Z", "url": "https://files.pythonhosted.org/packages/8a/aa/5aa9dec889a25b4f9b7539af33d26a720fafb1279ddfe7275af1e9ef2abf/celery_longterm_scheduler-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "eb9e9ce24efda37dff2f7b8dcdca6626", "sha256": "b87cc63d1ef674baaccdec80985ddef9ac1013836d941682cedab0f8f520e367"}, "downloads": -1, "filename": "celery_longterm_scheduler-1.0.1.tar.gz", "has_sig": false, "md5_digest": "eb9e9ce24efda37dff2f7b8dcdca6626", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11450, "upload_time": "2018-01-17T12:39:08", "upload_time_iso_8601": "2018-01-17T12:39:08.342585Z", "url": "https://files.pythonhosted.org/packages/04/62/1605fd31b242520193a7a7158a72d53c994a61b4020f98dc89d92cc7e987/celery_longterm_scheduler-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "076a52dd0d885cecfd08de4117944248", "sha256": "ae786ed1d1e27f72e1fc408e9a0443e9005b2896a4c8b668fc5bc06b7dee994a"}, "downloads": -1, "filename": "celery_longterm_scheduler-1.1.0.tar.gz", "has_sig": false, "md5_digest": "076a52dd0d885cecfd08de4117944248", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13251, "upload_time": "2019-11-28T13:17:24", "upload_time_iso_8601": "2019-11-28T13:17:24.415195Z", "url": "https://files.pythonhosted.org/packages/62/28/dccde92e03920000657e74604bad599eeff1d35e0d1836cedbfc45095cbb/celery_longterm_scheduler-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "3c7076f3db6501cf516f5f5f84de0e13", "sha256": "a537fb94e47fb7e7c81ca2f2d566372aeebcadc2436f7e25560f1659429b28b3"}, "downloads": -1, "filename": "celery_longterm_scheduler-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3c7076f3db6501cf516f5f5f84de0e13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13352, "upload_time": "2019-12-19T10:57:14", "upload_time_iso_8601": "2019-12-19T10:57:14.300775Z", "url": "https://files.pythonhosted.org/packages/2f/7d/bee723fb5bfa87349153fef40e094809cb52a6f421189ddfc7e3e6450c09/celery_longterm_scheduler-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c7076f3db6501cf516f5f5f84de0e13", "sha256": "a537fb94e47fb7e7c81ca2f2d566372aeebcadc2436f7e25560f1659429b28b3"}, "downloads": -1, "filename": "celery_longterm_scheduler-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3c7076f3db6501cf516f5f5f84de0e13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13352, "upload_time": "2019-12-19T10:57:14", "upload_time_iso_8601": "2019-12-19T10:57:14.300775Z", "url": "https://files.pythonhosted.org/packages/2f/7d/bee723fb5bfa87349153fef40e094809cb52a6f421189ddfc7e3e6450c09/celery_longterm_scheduler-1.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:52 2020"}