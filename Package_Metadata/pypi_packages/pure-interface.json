{"info": {"author": "Tim Mitchell", "author_email": "tim.mitchell@seequent.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "pure-interface\r\n==============\r\n\r\n.. image:: https://travis-ci.com/seequent/pure_interface.svg?branch=master\r\n    :target: https://travis-ci.com/seequent/pure_interface\r\n\r\nA Python interface library that disallows function body content on interfaces and supports adaption.\r\n\r\nJump to the `Reference`_.\r\n\r\nFeatures\r\n--------\r\n* Prevents code in method bodies of an interface class\r\n* Ensures that method overrides have compatible signatures\r\n* Supports interface adaption.\r\n* Supports optional structural type checking for ``Interface.provided_by(a)`` and ``Interface.adapt(a)``\r\n* Allows concrete implementations the flexibility to implement abstract properties as instance attributes.\r\n* ``Interface.adapt()`` can return an implementation wrapper that provides *only* the\r\n  attributes and methods defined by ``Interface``.\r\n* Warns if ``provided_by`` did a structural type check when inheritance would work.\r\n* Supports python 2.7 and 3.5+\r\n\r\nA note on the name\r\n------------------\r\nThe phrase *pure interface* applies only to the first design goal - a class that defines only an interface with no\r\nimplementation is a pure interface [*]_.\r\nIn every other respect the zen of 'practicality beats purity' applies.\r\n\r\nInstallation\r\n------------\r\npure_interface depends on the six_ and typing_ modules (typing is included in python 3.5 and later).\r\n\r\nYou can install released versions of ``pure_interface`` using pip::\r\n\r\n    pip install pure-interface\r\n\r\nor you can grab the source code from GitHub_.\r\n\r\nDefining an Interface\r\n=====================\r\n\r\nFor simplicity in these examples we assume that the entire pure_interface namespace has been imported ::\r\n\r\n    from pure_interface import *\r\n\r\nTo define an interface, simply inherit from the class ``Interface`` and write a PEP-544_ Protocol-like class\r\nleaving all method bodies empty::\r\n\r\n    class IAnimal(Interface):\r\n        height: float\r\n\r\n        def speak(self, volume):\r\n            pass\r\n\r\n\r\nLike Protocols, class annotations are considered part of the interface.\r\nIn Python versions earlier than 3.6 you can use the following alternate syntax::\r\n\r\n    class IAnimal(Interface):\r\n        height = None\r\n\r\n        def speak(self, volume):\r\n            pass\r\n\r\nThe value assigned to class attributes *must* be ``None`` and the attribute is removed from the class dictionary\r\n(since annotations are not in the class dictionary).\r\n\r\n``Interface`` is a subtype of ``abc.ABC`` and the ``abstractmethod`` and ``abstractproperty`` decorators work as expected.\r\nABC-style property definitions are also supported (and equivalent)::\r\n\r\n    class IAnimal(Interface):\r\n        @abstractproperty\r\n        def height(self):\r\n            pass\r\n\r\n        @abstractmethod\r\n        def speak(self, volume):\r\n            pass\r\n\r\nAgain, the height property is removed from the class dictionary, but, as with the other syntaxes,\r\nall concrete subclasses will be required to have a ``height`` attribute.\r\n\r\nFor convenience the ``abc`` module abstract decorators are included in the ``pure_interface`` namespace, and\r\non Python 2.7 ``abstractclassmethod`` and ``abstractstaticmethod`` are also available.\r\nHowever these decorators are optional as **ALL** methods and properties on a ``Interface`` subclass are abstract.\r\nIn the examples above, both ``height`` and ``speak`` are considered abstract and must be overridden by subclasses.\r\n\r\nIncluding abstract decorators in your code can be useful for reminding yourself (and telling your IDE) that you need\r\nto override those methods.  Another common way of informing an IDE that a method needs to be overridden is for\r\nthe method to raise ``NotImplementedError``.  For this reason methods that just raise ``NotImplementedError`` are also\r\nconsidered empty.\r\n\r\nInterface classes cannot be instantiated ::\r\n\r\n    IAnimal()\r\n    InterfaceError: Interfaces cannot be instantiated.\r\n\r\nIncluding code in a method will result in an ``InterfaceError`` being raised when the module is imported. For example::\r\n\r\n    class BadInterface(Interface):\r\n        def method(self):\r\n            print('hello')\r\n\r\n    InterfaceError: Function \"method\" is not empty\r\n    Did you forget to inherit from object to make the class concrete?\r\n\r\n\r\nThe ``dir()`` function will include all interface attributes so that ``mock.Mock(spec=IAnimal)`` will work as expected::\r\n\r\n    >>> dir(IAnimal)\r\n    ['__abstractmethods__', '__doc__', ..., 'height', 'speak']\r\n\r\n\r\n\r\nConcrete Implementations\r\n========================\r\n\r\nSimply inheriting from a pure interface and writing a concrete class will result in an ``InterfaceError`` exception\r\nas ``pure_interface`` will assume you are creating a sub-interface. To tell ``pure_interface`` that a type should be\r\nconcrete simply inherit from ``object`` as well (or anything else that isn't an ``Interface``).  For example::\r\n\r\n    class Animal(IAnimal, object):\r\n        def __init__(self, height):\r\n            self.height = height\r\n\r\n        def speak(self, volume):\r\n            print('hello')\r\n\r\n**Exception:** Mixing an ``Interface`` class with an ``abc.ABC`` interface class that only defines abstract methods\r\nand properties that satisfy the empty method criteria will result in a type that is considered a pure interface.::\r\n\r\n    class ABCInterface(abc.ABC):\r\n        @abstractmethod\r\n        def foo(self):\r\n            pass\r\n\r\n    class MyInterface(ABCInterface, Interface):\r\n        def bar(self):\r\n            pass\r\n\r\nConcrete implementations may implement interface attributes in any way they like: as instance attributes, properties or\r\ncustom descriptors, provided that they all exist at the end of ``__init__()``.  Here is another valid implementation::\r\n\r\n    class Animal2(IAnimal, object):\r\n        def __init__(self, height):\r\n            self._height = height\r\n\r\n        @property\r\n        def height(self):\r\n            return self._height\r\n\r\n        def speak(self, volume):\r\n            print('hello')\r\n\r\nMethod Signatures\r\n-----------------\r\nMethod overrides are checked for compatibility with the interface.\r\nThis means that argument names must match exactly and that no new non-optional\r\narguments are present in the override.  This enforces that calling the method\r\nwith interface parameters will aways work.\r\nFor example, given the interface method::\r\n\r\n  def speak(self, volume):\r\n\r\nThen these overrides will all fail the checks and raise an ``InterfaceError``::\r\n\r\n   def speak(self):  # too few parameters\r\n   def speak(self, loudness):  # name does not match\r\n   def speak(self, volume, language):  # extra required argument\r\n\r\nHowever new optional parameters are permitted, as are ``*args`` and ``**kwargs``::\r\n\r\n  def speak(self, volume, language='doggy speak')\r\n  def speak(self, *args, **kwargs)\r\n\r\nImplementation Warnings\r\n-----------------------\r\n\r\nAs with ``abc.ABC``, the abstract method checking for a class is done when an object is instantiated.\r\nHowever it is useful to know about missing methods sooner than that.  For this reason ``pure_interface`` will issue\r\na warning during module import when methods are missing from a concrete subclass.  For example::\r\n\r\n    class SilentAnimal(IAnimal, object):\r\n        def __init__(self, height):\r\n            self.height = height\r\n\r\nwill issue this warning::\r\n\r\n    readme.py:28: UserWarning: Incomplete Implementation: SilentAnimal does not implement speak\r\n    class SilentAnimal(IAnimal, object):\r\n\r\nTrying to create a ``SilentAnimal`` will fail in the standard abc way::\r\n\r\n    SilentAnimal()\r\n    InterfaceError: Can't instantiate abstract class SilentAnimal with abstract methods speak\r\n\r\nIf you have a mixin class that implements part of an interface you can suppress the warnings by adding an class attribute\r\ncalled ``pi_partial_implementation``.  The value of the attribute is ignored, and the attribute itself is removed from\r\nthe class.  For example::\r\n\r\n    class HeightMixin(IAnimal, object):\r\n        pi_partial_implementation = True\r\n\r\n        def __init__(self, height):\r\n            self.height = height\r\n\r\nwill not issue any warnings.\r\n\r\nThe warning messages are also appended to the module variable ``missing_method_warnings``, irrespective of any warning\r\nmodule filters (but only if ``is_development=True``).  This provides an alternative to raising warnings as errors.\r\nWhen all your imports are complete you can check if this list is empty.::\r\n\r\n    if pure_iterface.missing_method_warnings:\r\n        for warning in pure_iterface.missing_method_warnings:\r\n            print(warning)\r\n        exit(1)\r\n\r\nNote that missing properties are NOT checked for as they may be provided by instance attributes.\r\n\r\nAdaption\r\n========\r\n\r\nRegistering Adapters\r\n--------------------\r\n\r\nAdapters for an interface are registered with the ``adapts`` decorator or with\r\nthe ``register_adapter`` function. Take for example an interface ``ISpeaker`` and a\r\nclass ``Talker`` and an adapter class ``TalkerToSpeaker``::\r\n\r\n    class ISpeaker(Interface):\r\n        def speak(self, volume):\r\n            pass\r\n\r\n    class Talker(object):\r\n        def talk(self):\r\n            return 'talk'\r\n\r\n    @adapts(Talker)\r\n    class TalkerToSpeaker(ISpeaker, object):\r\n        def __init__(self, talker):\r\n            self._talker = talker\r\n\r\n        def speak(self, volume):\r\n            return self._talker.talk()\r\n\r\nThe ``adapts`` decorator call above is equivalent to::\r\n\r\n    register_adapter(TalkerToSpeaker, Talker, ISpeaker)\r\n\r\nThe ``ISpeaker`` parameter passed to ``register_adapter`` is the first interface in the MRO of the class being decorated (``TalkerToSpeaker``).\r\nIf there are no interface types in the MRO of the decorated class an ``InterfaceError`` exception is raised.\r\n\r\nAdapter factory functions can be decorated too, in which case the interface being adapted to needs to be specified::\r\n\r\n    @adapts(Talker, ISpeaker)\r\n    def talker_to_speaker(talker):\r\n        return TalkerToSpeaker(talker)\r\n\r\nThe decorated adapter (whether class for function) must be callable with a single parameter - the object to adapt.\r\n\r\nAdapting Objects\r\n----------------\r\n\r\nThe ``Interface.adapt`` method will adapt an object to the given interface\r\nsuch that ``Interface.provided_by`` is ``True`` or raise ``AdaptionError`` if no adapter could be found.  For example::\r\n\r\n    speaker = ISpeaker.adapt(talker)\r\n    isinstance(speaker, ISpeaker)  --> True\r\n\r\nIf you want to get ``None`` rather than an exception then use::\r\n\r\n    speaker = ISpeaker.adapt_or_none(talker)\r\n\r\nYou can filter a list of objects returning those objects that provide an interface\r\nusing ``filter_adapt(objects)``::\r\n\r\n   list(ISpeaker.filter_adapt([None, Talker(), a_speaker, 'text']) --> [TalkerToSpeaker, a_speaker]\r\n\r\nTo adapt an object only if it is not ``None`` then use::\r\n\r\n    ISpeaker.optional_adapt(optional_talker)\r\n\r\nThis is equivalent to::\r\n\r\n    ISpeaker.adapt(optional_talker) if optional_talker is not None else None\r\n\r\nBy default the adaption functions will return an object which provides **only**\r\nthe functions and properties specified by the interface.  For example given the\r\nfollowing implementation of the ``ISpeaker`` interface above::\r\n\r\n  class TopicSpeaker(ISpeaker):\r\n      def __init__(self, topic):\r\n          self.topic = topic\r\n\r\n      def speak(self, volume):\r\n          return 'lets talk about {} very {}'.format(self.topic, volume)\r\n\r\n  topic_speaker = TopicSpeaker('python')\r\n\r\nThen::\r\n\r\n  speaker = ISpeaker.adapt(topic_speaker)\r\n  speaker is topic_speaker  --> False\r\n  speaker.topic --> AttributeError(\"ISpeaker interface has no attribute topic\")\r\n\r\nThis is controlled by the optional ``interface_only`` parameter to ``adapt`` which defaults to ``True``.\r\nPass ``interface_only=False`` if you want the actual adapted object rather than a wrapper::\r\n\r\n  speaker = ISpeaker.adapt(topic_speaker, interface_only=False)\r\n  speaker is topic_speaker  --> True\r\n  speaker.topic --> 'Python'\r\n\r\nAccessing the ``topic`` attribute on an ``ISpeaker`` may work for all current implementations\r\nof ``ISpeaker``, but this code will likely break at some inconvenient time in the future.\r\n\r\nAdapters from sub-interfaces may be used to perform adaption if necessary. For example::\r\n\r\n    class IA(Interface):\r\n       foo = None\r\n\r\n    class IB(IA):\r\n        bar = None\r\n\r\n    @adapts(int):\r\n    class IntToB(IB, object):\r\n        def __init__(self, x):\r\n            self.foo = self.bar = x\r\n\r\nThen  ``IA.adapt(4)`` will use the ``IntToB`` adapter to adapt ``4`` to ``IA`` (unless there is already an adapter\r\nfrom ``int`` to ``IA``)\r\n\r\nStructural Type Checking\r\n========================\r\n\r\nStructural_ type checking checks if an object has the attributes and methods defined by the interface.\r\n\r\n.. _Structural: https://en.wikipedia.org/wiki/Structural_type_system\r\n\r\nAs interfaces are inherited, you can usually use ``isinstance(obj, MyInterface)`` to check if an interface is provided.\r\nAn alternative to ``isinstance()`` is the ``Interface.provided_by(obj)`` classmethod which will fall back to structural type\r\nchecking if the instance is not an actual subclass.  This can be controlled by the ``allow_implicit`` parameter which defaults to ``True``.\r\nThe structural type-checking does not check function signatures.::\r\n\r\n    class Parrot(object):\r\n        def __init__(self):\r\n            self.height = 43\r\n\r\n        def speak(self, volume):\r\n            print('hello')\r\n\r\n    p = Parrot()\r\n    isinstance(p, IAnimal) --> False\r\n    IAnimal.provided_by(p) --> True\r\n    IAnimal.provided_by(p, allow_implicit=False) --> False\r\n\r\nThe structural type checking makes working with data transfer objects (DTO's) much easier.::\r\n\r\n    class IMyDataType(Interface):\r\n        thing: str\r\n\r\n    class DTO(object):\r\n        pass\r\n\r\n    d = DTO()\r\n    d.thing = 'hello'\r\n    IMyDataType.provided_by(d) --> True\r\n    e = DTO()\r\n    e.something_else = True\r\n    IMyDataType.provided_by(e) --> False\r\n\r\nAdaption also supports structural typing by passing ``allow_implicit=True`` (but this is not the default)::\r\n\r\n    speaker = ISpeaker.adapt(Parrot(), allow_implicit=True)\r\n    ISpeaker.provided_by(speaker)  --> True\r\n\r\nWhen using ``provided_by()`` or ``adapt()`` with ``allow_implicit=True``, a warning may be issued informing you that\r\nthe structurally typed object should inherit the interface.  The warning is only issued if the interface is implemented by the\r\nclass (and not by instance attributes as in the DTO case above) and the warning is only issued once for each\r\nclass, interface pair.  For example::\r\n\r\n    s = ISpeaker.adapt(Parrot())\r\n    UserWarning: Class Parrot implements ISpeaker.\r\n    Consider inheriting ISpeaker or using ISpeaker.register(Parrot)\r\n\r\nDataclass Support\r\n=================\r\ndataclasses_ were added in Python 3.7.  When used in this and later versions of Python, ``pure_interface`` provides a\r\n``dataclass`` decorator.  This decorator can be used to create a dataclass that implements an interface.  For example::\r\n\r\n    class IAnimal2(Interface):\r\n        height: float\r\n        species: str\r\n\r\n        def speak(self):\r\n            pass\r\n\r\n    @dataclass\r\n    class Animal(Concrete, IAnimal2):\r\n        def speak(self):\r\n            print('Hello, I am a {} metre tall {}', self.height, self.species)\r\n\r\n    a = Animal(height=4.5, species='Giraffe')\r\n\r\nThe builtin Python ``dataclass`` decorator cannot be used because it will not create attributes for the\r\n``height`` and ``species`` annotations on the interface base class ``IAnimal2``.\r\nAs per the built-in ``dataclass`` decorator, only interface attributes defined\r\nusing annotation syntax are supported (and not the alternatives syntaxes provided by ``pure_interface``).\r\n\r\nInterface Type Information\r\n==========================\r\nThe ``pure_interface`` module provides these functions for returning information about interface types.\r\n\r\ntype_is_pure_interface(cls)\r\n    Return True if cls is a pure interface, False otherwise or if cls is not a class.\r\n\r\nget_type_interfaces(cls)\r\n    Returns all interfaces in the cls mro including cls itself if it is an interface\r\n\r\nget_interface_names(cls)\r\n    Returns a ``frozenset`` of names (methods and attributes) defined by the interface.\r\n    if interface is not a ``Interface`` subtype then an empty set is returned.\r\n\r\nget_interface_method_names(interface)\r\n    Returns a ``frozenset`` of names of methods defined by the interface.\r\n    if interface is not a ``Interface`` subtype then an empty set is returned\r\n\r\nget_interface_attribute_names(interface)\r\n    Returns a ``frozenset`` of names of attributes defined by the interface.\r\n    if interface is not a ``Interface`` subtype then an empty set is returned\r\n\r\n\r\nAutomatic Adaption\r\n==================\r\nThe function decorator ``adapt_args`` adapts arguments to a decorated function to the types given.\r\nFor example::\r\n\r\n    @adapt_args(foo=IFoo, bar=IBar)\r\n    def my_func(foo, bar=None):\r\n        pass\r\n\r\nIn Python 3.5 and later the types can be taken from the argument annotations.::\r\n\r\n    @adapt_args\r\n    def my_func(foo: IFoo, bar: IBar=None):\r\n        pass\r\n\r\nThis would adapt the ``foo`` parameter to ``IFoo`` (with ``IFoo.optional_adapt(foo))`` and ``bar`` to ``IBar\r\n(using ``IBar.optional_adapt(bar)``)\r\nbefore passing them to my_func.  ``None`` values are never adapted, so ``my_func(foo, None)`` will work, otherwise\r\n``AdaptionError`` is raised if the parameter is not adaptable.\r\nAll arguments must be specified as keyword arguments::\r\n\r\n    @adapt_args(IFoo, IBar)   # NOT ALLOWED\r\n    def other_func(foo, bar):\r\n        pass\r\n\r\nDevelopment Flag\r\n================\r\n\r\nMuch of the empty function and other checking is awesome whilst writing your code but\r\nultimately slows down production code.\r\nFor this reason the ``pure_interface`` module has an ``is_development`` switch.::\r\n\r\n    is_development = not hasattr(sys, 'frozen')\r\n\r\n``is_development`` defaults to ``True`` if running from source and default to ``False`` if bundled into an executable by\r\npy2exe_, cx_Freeze_ or similar tools.\r\n\r\nIf you manually change this flag it must be set before modules using the ``Interface`` type\r\nare imported or else the change will not have any effect.\r\n\r\nIf ``is_development`` if ``False`` then:\r\n\r\n    * Signatures of overriding methods are not checked\r\n    * No warnings are issued by the adaption functions\r\n    * No incomplete implementation warnings are issued\r\n    * The default value of ``interface_only`` is set to ``False``, so that interface wrappers are not created.\r\n\r\n\r\nPyContracts Integration\r\n=======================\r\n\r\nYou can use ``pure_interface`` with PyContracts_\r\n\r\n.. _PyContracts: https://pypi.python.org/pypi/PyContracts\r\n\r\nSimply import the ``pure_contracts`` module and use the ``ContractInterface`` class defined there as you\r\nwould the ``Interface`` class described above.\r\nFor example::\r\n\r\n    from pure_contracts import ContractInterface\r\n    from contracts import contract\r\n\r\n    class ISpeaker(ContractInterface):\r\n        @contract(volume=int, returns=unicode)\r\n        def speak(self, volume):\r\n            pass\r\n\r\n\r\nReference\r\n=========\r\nClasses\r\n-------\r\n\r\n**InterfaceType(abc.ABCMeta)**\r\n    Metaclass for checking interface and implementation classes.\r\n    Adding ``InterfaceType`` as a meta-class to a class will not make that class an interface, you need to\r\n    inherit from ``Interface`` class to define an interface.\r\n\r\n    In addition to the ``register`` method provided by ``ABCMeta``, the following functions are defined on\r\n    ``InterfaceType`` and can be accessed directly when the ``Interface`` methods are overridden\r\n    for other purposes.\r\n\r\n    **adapt** *(cls, obj, allow_implicit=False, interface_only=None)*\r\n        See ``Interface.adapt`` for a description.\r\n\r\n    **adapt_or_none** *(cls, obj, allow_implicit=False, interface_only=None)*\r\n        See ``Interface.adapt_or_none`` for a description\r\n\r\n    **optional_adapt** *(cls, obj, allow_implicit=False, interface_only=None)*\r\n        See ``Interface.optional_adapt`` for a description\r\n\r\n    **can_adapt** *(cls, obj, allow_implicit=False)*\r\n        See ``Interface.can_adapt`` for a description\r\n\r\n    **filter_adapt** *(cls, objects, allow_implicit=False, interface_only=None)*\r\n        See ``Interface.filter_adapt`` for a description\r\n\r\n    **interface_only** *(cls, implementation)*\r\n        See ``Interface.interface_only`` for a description\r\n\r\n    **provided_by** *(cls, obj, allow_implicit=True)*\r\n        See ``Interface.provided_by`` for a description\r\n\r\n    Classes created with a metaclass of ``InterfaceType`` will have the following property:\r\n\r\n    **_pi** Information about the class that is used by this meta-class.  This attribute is reserved for use by\r\n            ``pure_interface`` and must not be overridden.\r\n\r\n\r\n**Interface**\r\n    Base class for defining interfaces.  The following methods are provided:\r\n\r\n    **adapt** *(obj, allow_implicit=False, interface_only=None)*\r\n        Adapts ``obj`` to this interface. If ``allow_implicit`` is ``True`` permit structural adaptions.\r\n        If ``interface_only`` is ``None`` the it is set to the value of ``is_development``.\r\n        If ``interface_only`` resolves to ``True`` a wrapper object that provides\r\n        the properties and methods defined by the interface and nothing else is returned.\r\n        Raises ``AdaptionError`` if no adaption is possible or a registered adapter returns an object not providing\r\n        this interface.\r\n\r\n    **adapt_or_none** *(obj, allow_implicit=False, interface_only=None)*\r\n        As per **adapt()** except returns ``None`` instead of raising a ``AdaptionError``\r\n\r\n    **optional_adapt** *(obj, allow_implicit=False, interface_only=None)*\r\n        Adapts obj to this interface if it is not ``None`` returning ``None`` otherwise.\r\n        Short-cut for ``adapt(obj) if obj is not None else None``\r\n\r\n    **can_adapt** *(obj, allow_implicit=False)*\r\n        Returns ``True`` if ``adapt(obj, allow_implicit)`` will succeed.  Short-cut for\r\n        ``adapt_or_none(obj) is not None``\r\n\r\n    **filter_adapt** *(objects, allow_implicit=False, interface_only=None)*\r\n        Generates adaptions of each item in *objects* that provide this interface.\r\n        *allow_implicit* and *interface_only* are as for **adapt**.\r\n        Objects that cannot be adapted to this interface are silently skipped.\r\n\r\n    **interface_only** *(implementation)*\r\n        Returns a wrapper around *implementation* that provides the properties and methods defined by\r\n        the interface and nothing else.\r\n\r\n    **provided_by** *(obj, allow_implicit=True)*\r\n        Returns ``True`` if *obj* provides this interface. If ``allow_implicit`` is ``True`` the also\r\n        return ``True`` for objects that provide the interface structure but do not inherit from it.\r\n        Raises ``InterfaceError`` if the class is a concrete type.\r\n\r\nFunctions\r\n---------\r\n**adapts** *(from_type, to_interface=None)*\r\n    Class or function decorator for declaring an adapter from *from_type* to *to_interface*.\r\n    The class or function being decorated must take a single argument (an instance of *from_type*) and\r\n    provide (or return and object providing) *to_interface*.  The adapter may return an object that provides\r\n    the interface structurally only, however ``adapt`` must be called with ``allow_implicit=True`` for this to work.\r\n    If decorating a class, *to_interface* may be ``None`` to use the first interface in the class's MRO.\r\n\r\n**register_adapter** *(adapter, from_type, to_interface)*\r\n    Registers an adapter to convert instances of *from_type* to objects that provide *to_interface*\r\n    for the *to_interface.adapt()* method. *adapter* must be a callable that takes a single argument\r\n    (an instance of *from_type*) and returns and object providing *to_interface*.\r\n\r\n**type_is_pure_interface** *(cls)*\r\n    Return ``True`` if *cls* is a pure interface and ``False`` otherwise\r\n\r\n**get_type_interfaces** *(cls)*\r\n    Returns all interfaces in the *cls* mro including cls itself if it is an interface\r\n\r\n**get_interface_names** *(cls)*\r\n    Returns a ``frozenset`` of names (methods and attributes) defined by the interface.\r\n    if interface is not a ``Interface`` subtype then an empty set is returned.\r\n\r\n**get_interface_method_names** *(cls)*\r\n    Returns a ``frozenset`` of names of methods defined by the interface.\r\n    If *cls* is not a ``Interface`` subtype then an empty set is returned.\r\n\r\n**get_interface_attribute_names** *(cls)*\r\n    Returns a ``frozenset`` of names of class attributes and annotations defined by the interface\r\n    If *cls* is not a ``Interface`` subtype then an empty set is returned.\r\n\r\n**dataclass** *(_cls=None, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)*\r\n    This function is a re-implementation of the standard Python ``dataclasses.dataclass`` decorator.\r\n    In addition to the fields on the decorated class, all annotations on interface base classes are added as fields.\r\n    See the Python dataclasses_ documentation for more details.\r\n\r\n    3.7+ Only\r\n\r\n\r\nExceptions\r\n----------\r\n**PureInterfaceError**\r\n    Base exception class for all exceptions raised by ``pure_interface``.\r\n\r\n**InterfaceError**\r\n    Exception raised for problems with interfaces\r\n\r\n**AdaptionError**\r\n    Exception raised for problems with adapters or adapting.\r\n\r\n\r\nModule Attributes\r\n-----------------\r\n**is_development**\r\n    Set to ``True`` to enable all checks and warnings.\r\n    If set to ``False`` then:\r\n\r\n    * Signatures of overriding methods are not checked\r\n    * No warnings are issued by the adaption functions\r\n    * No incomplete implementation warnings are issued\r\n    * The default value of ``interface_only`` is set to ``False``, so that interface wrappers are not created.\r\n\r\n\r\n**missing_method_warnings**\r\n    The list of warning messages for concrete classes with missing interface (abstract) method overrides.\r\n    Note that missing properties are NOT checked for as they may be provided by instance attributes.\r\n\r\n-----------\r\n\r\n.. _six: https://pypi.python.org/pypi/six\r\n.. _typing: https://pypi.python.org/pypi/typing\r\n.. _PEP-544: https://www.python.org/dev/peps/pep-0544/\r\n.. _GitHub: https://github.com/seequent/pure_interface\r\n.. _mypy: http://mypy-lang.org/\r\n.. _py2exe: https://pypi.python.org/pypi/py2exe\r\n.. _cx_Freeze: https://pypi.python.org/pypi/cx_Freeze\r\n.. _dataclasses: https://docs.python.org/3/library/dataclasses.html\r\n.. [*] We don't talk about the methods on the base ``Interface`` class.  In earlier versions they\r\n   were all on the meta class but then practicality got in the way.\r\n\r\n\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seequent/pure_interface", "keywords": "abc interface adapt adaption mapper structural typing dataclass", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pure-interface", "package_url": "https://pypi.org/project/pure-interface/", "platform": "", "project_url": "https://pypi.org/project/pure-interface/", "project_urls": {"Homepage": "https://github.com/seequent/pure_interface"}, "release_url": "https://pypi.org/project/pure-interface/4.0.0/", "requires_dist": ["six", "typing", "funcsigs", "PyContracts (>=1.7); extra == 'contracts'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A Python interface library that disallows function body content on interfaces and supports adaption.", "version": "4.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pure-interface\">\n<h2>pure-interface</h2>\n<a href=\"https://travis-ci.com/seequent/pure_interface\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/seequent/pure_interface.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d213ddf14b88b0296d13559069369373875a249/68747470733a2f2f7472617669732d63692e636f6d2f7365657175656e742f707572655f696e746572666163652e7376673f6272616e63683d6d6173746572\"></a>\n<p>A Python interface library that disallows function body content on interfaces and supports adaption.</p>\n<p>Jump to the <a href=\"#reference\" rel=\"nofollow\">Reference</a>.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Prevents code in method bodies of an interface class</li>\n<li>Ensures that method overrides have compatible signatures</li>\n<li>Supports interface adaption.</li>\n<li>Supports optional structural type checking for <tt>Interface.provided_by(a)</tt> and <tt>Interface.adapt(a)</tt></li>\n<li>Allows concrete implementations the flexibility to implement abstract properties as instance attributes.</li>\n<li><tt>Interface.adapt()</tt> can return an implementation wrapper that provides <em>only</em> the\nattributes and methods defined by <tt>Interface</tt>.</li>\n<li>Warns if <tt>provided_by</tt> did a structural type check when inheritance would work.</li>\n<li>Supports python 2.7 and 3.5+</li>\n</ul>\n</div>\n<div id=\"a-note-on-the-name\">\n<h3>A note on the name</h3>\n<p>The phrase <em>pure interface</em> applies only to the first design goal - a class that defines only an interface with no\nimplementation is a pure interface <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[*]</a>.\nIn every other respect the zen of \u2018practicality beats purity\u2019 applies.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>pure_interface depends on the <a href=\"https://pypi.python.org/pypi/six\" rel=\"nofollow\">six</a> and <a href=\"https://pypi.python.org/pypi/typing\" rel=\"nofollow\">typing</a> modules (typing is included in python 3.5 and later).</p>\n<p>You can install released versions of <tt>pure_interface</tt> using pip:</p>\n<pre>pip install pure-interface\n</pre>\n<p>or you can grab the source code from <a href=\"https://github.com/seequent/pure_interface\" rel=\"nofollow\">GitHub</a>.</p>\n</div>\n</div>\n<div id=\"defining-an-interface\">\n<h2>Defining an Interface</h2>\n<p>For simplicity in these examples we assume that the entire pure_interface namespace has been imported</p>\n<pre>from pure_interface import *\n</pre>\n<p>To define an interface, simply inherit from the class <tt>Interface</tt> and write a <a href=\"https://www.python.org/dev/peps/pep-0544/\" rel=\"nofollow\">PEP-544</a> Protocol-like class\nleaving all method bodies empty:</p>\n<pre>class IAnimal(Interface):\n    height: float\n\n    def speak(self, volume):\n        pass\n</pre>\n<p>Like Protocols, class annotations are considered part of the interface.\nIn Python versions earlier than 3.6 you can use the following alternate syntax:</p>\n<pre>class IAnimal(Interface):\n    height = None\n\n    def speak(self, volume):\n        pass\n</pre>\n<p>The value assigned to class attributes <em>must</em> be <tt>None</tt> and the attribute is removed from the class dictionary\n(since annotations are not in the class dictionary).</p>\n<p><tt>Interface</tt> is a subtype of <tt>abc.ABC</tt> and the <tt>abstractmethod</tt> and <tt>abstractproperty</tt> decorators work as expected.\nABC-style property definitions are also supported (and equivalent):</p>\n<pre>class IAnimal(Interface):\n    @abstractproperty\n    def height(self):\n        pass\n\n    @abstractmethod\n    def speak(self, volume):\n        pass\n</pre>\n<p>Again, the height property is removed from the class dictionary, but, as with the other syntaxes,\nall concrete subclasses will be required to have a <tt>height</tt> attribute.</p>\n<p>For convenience the <tt>abc</tt> module abstract decorators are included in the <tt>pure_interface</tt> namespace, and\non Python 2.7 <tt>abstractclassmethod</tt> and <tt>abstractstaticmethod</tt> are also available.\nHowever these decorators are optional as <strong>ALL</strong> methods and properties on a <tt>Interface</tt> subclass are abstract.\nIn the examples above, both <tt>height</tt> and <tt>speak</tt> are considered abstract and must be overridden by subclasses.</p>\n<p>Including abstract decorators in your code can be useful for reminding yourself (and telling your IDE) that you need\nto override those methods.  Another common way of informing an IDE that a method needs to be overridden is for\nthe method to raise <tt>NotImplementedError</tt>.  For this reason methods that just raise <tt>NotImplementedError</tt> are also\nconsidered empty.</p>\n<p>Interface classes cannot be instantiated</p>\n<pre>IAnimal()\nInterfaceError: Interfaces cannot be instantiated.\n</pre>\n<p>Including code in a method will result in an <tt>InterfaceError</tt> being raised when the module is imported. For example:</p>\n<pre>class BadInterface(Interface):\n    def method(self):\n        print('hello')\n\nInterfaceError: Function \"method\" is not empty\nDid you forget to inherit from object to make the class concrete?\n</pre>\n<p>The <tt>dir()</tt> function will include all interface attributes so that <tt>mock.Mock(spec=IAnimal)</tt> will work as expected:</p>\n<pre>&gt;&gt;&gt; dir(IAnimal)\n['__abstractmethods__', '__doc__', ..., 'height', 'speak']\n</pre>\n</div>\n<div id=\"concrete-implementations\">\n<h2>Concrete Implementations</h2>\n<p>Simply inheriting from a pure interface and writing a concrete class will result in an <tt>InterfaceError</tt> exception\nas <tt>pure_interface</tt> will assume you are creating a sub-interface. To tell <tt>pure_interface</tt> that a type should be\nconcrete simply inherit from <tt>object</tt> as well (or anything else that isn\u2019t an <tt>Interface</tt>).  For example:</p>\n<pre>class Animal(IAnimal, object):\n    def __init__(self, height):\n        self.height = height\n\n    def speak(self, volume):\n        print('hello')\n</pre>\n<p><strong>Exception:</strong> Mixing an <tt>Interface</tt> class with an <tt>abc.ABC</tt> interface class that only defines abstract methods\nand properties that satisfy the empty method criteria will result in a type that is considered a pure interface.:</p>\n<pre>class ABCInterface(abc.ABC):\n    @abstractmethod\n    def foo(self):\n        pass\n\nclass MyInterface(ABCInterface, Interface):\n    def bar(self):\n        pass\n</pre>\n<p>Concrete implementations may implement interface attributes in any way they like: as instance attributes, properties or\ncustom descriptors, provided that they all exist at the end of <tt>__init__()</tt>.  Here is another valid implementation:</p>\n<pre>class Animal2(IAnimal, object):\n    def __init__(self, height):\n        self._height = height\n\n    @property\n    def height(self):\n        return self._height\n\n    def speak(self, volume):\n        print('hello')\n</pre>\n<div id=\"method-signatures\">\n<h3>Method Signatures</h3>\n<p>Method overrides are checked for compatibility with the interface.\nThis means that argument names must match exactly and that no new non-optional\narguments are present in the override.  This enforces that calling the method\nwith interface parameters will aways work.\nFor example, given the interface method:</p>\n<pre>def speak(self, volume):\n</pre>\n<p>Then these overrides will all fail the checks and raise an <tt>InterfaceError</tt>:</p>\n<pre>def speak(self):  # too few parameters\ndef speak(self, loudness):  # name does not match\ndef speak(self, volume, language):  # extra required argument\n</pre>\n<p>However new optional parameters are permitted, as are <tt>*args</tt> and <tt>**kwargs</tt>:</p>\n<pre>def speak(self, volume, language='doggy speak')\ndef speak(self, *args, **kwargs)\n</pre>\n</div>\n<div id=\"implementation-warnings\">\n<h3>Implementation Warnings</h3>\n<p>As with <tt>abc.ABC</tt>, the abstract method checking for a class is done when an object is instantiated.\nHowever it is useful to know about missing methods sooner than that.  For this reason <tt>pure_interface</tt> will issue\na warning during module import when methods are missing from a concrete subclass.  For example:</p>\n<pre>class SilentAnimal(IAnimal, object):\n    def __init__(self, height):\n        self.height = height\n</pre>\n<p>will issue this warning:</p>\n<pre>readme.py:28: UserWarning: Incomplete Implementation: SilentAnimal does not implement speak\nclass SilentAnimal(IAnimal, object):\n</pre>\n<p>Trying to create a <tt>SilentAnimal</tt> will fail in the standard abc way:</p>\n<pre>SilentAnimal()\nInterfaceError: Can't instantiate abstract class SilentAnimal with abstract methods speak\n</pre>\n<p>If you have a mixin class that implements part of an interface you can suppress the warnings by adding an class attribute\ncalled <tt>pi_partial_implementation</tt>.  The value of the attribute is ignored, and the attribute itself is removed from\nthe class.  For example:</p>\n<pre>class HeightMixin(IAnimal, object):\n    pi_partial_implementation = True\n\n    def __init__(self, height):\n        self.height = height\n</pre>\n<p>will not issue any warnings.</p>\n<p>The warning messages are also appended to the module variable <tt>missing_method_warnings</tt>, irrespective of any warning\nmodule filters (but only if <tt>is_development=True</tt>).  This provides an alternative to raising warnings as errors.\nWhen all your imports are complete you can check if this list is empty.:</p>\n<pre>if pure_iterface.missing_method_warnings:\n    for warning in pure_iterface.missing_method_warnings:\n        print(warning)\n    exit(1)\n</pre>\n<p>Note that missing properties are NOT checked for as they may be provided by instance attributes.</p>\n</div>\n</div>\n<div id=\"adaption\">\n<h2>Adaption</h2>\n<div id=\"registering-adapters\">\n<h3>Registering Adapters</h3>\n<p>Adapters for an interface are registered with the <tt>adapts</tt> decorator or with\nthe <tt>register_adapter</tt> function. Take for example an interface <tt>ISpeaker</tt> and a\nclass <tt>Talker</tt> and an adapter class <tt>TalkerToSpeaker</tt>:</p>\n<pre>class ISpeaker(Interface):\n    def speak(self, volume):\n        pass\n\nclass Talker(object):\n    def talk(self):\n        return 'talk'\n\n@adapts(Talker)\nclass TalkerToSpeaker(ISpeaker, object):\n    def __init__(self, talker):\n        self._talker = talker\n\n    def speak(self, volume):\n        return self._talker.talk()\n</pre>\n<p>The <tt>adapts</tt> decorator call above is equivalent to:</p>\n<pre>register_adapter(TalkerToSpeaker, Talker, ISpeaker)\n</pre>\n<p>The <tt>ISpeaker</tt> parameter passed to <tt>register_adapter</tt> is the first interface in the MRO of the class being decorated (<tt>TalkerToSpeaker</tt>).\nIf there are no interface types in the MRO of the decorated class an <tt>InterfaceError</tt> exception is raised.</p>\n<p>Adapter factory functions can be decorated too, in which case the interface being adapted to needs to be specified:</p>\n<pre>@adapts(Talker, ISpeaker)\ndef talker_to_speaker(talker):\n    return TalkerToSpeaker(talker)\n</pre>\n<p>The decorated adapter (whether class for function) must be callable with a single parameter - the object to adapt.</p>\n</div>\n<div id=\"adapting-objects\">\n<h3>Adapting Objects</h3>\n<p>The <tt>Interface.adapt</tt> method will adapt an object to the given interface\nsuch that <tt>Interface.provided_by</tt> is <tt>True</tt> or raise <tt>AdaptionError</tt> if no adapter could be found.  For example:</p>\n<pre>speaker = ISpeaker.adapt(talker)\nisinstance(speaker, ISpeaker)  --&gt; True\n</pre>\n<p>If you want to get <tt>None</tt> rather than an exception then use:</p>\n<pre>speaker = ISpeaker.adapt_or_none(talker)\n</pre>\n<p>You can filter a list of objects returning those objects that provide an interface\nusing <tt>filter_adapt(objects)</tt>:</p>\n<pre>list(ISpeaker.filter_adapt([None, Talker(), a_speaker, 'text']) --&gt; [TalkerToSpeaker, a_speaker]\n</pre>\n<p>To adapt an object only if it is not <tt>None</tt> then use:</p>\n<pre>ISpeaker.optional_adapt(optional_talker)\n</pre>\n<p>This is equivalent to:</p>\n<pre>ISpeaker.adapt(optional_talker) if optional_talker is not None else None\n</pre>\n<p>By default the adaption functions will return an object which provides <strong>only</strong>\nthe functions and properties specified by the interface.  For example given the\nfollowing implementation of the <tt>ISpeaker</tt> interface above:</p>\n<pre>class TopicSpeaker(ISpeaker):\n    def __init__(self, topic):\n        self.topic = topic\n\n    def speak(self, volume):\n        return 'lets talk about {} very {}'.format(self.topic, volume)\n\ntopic_speaker = TopicSpeaker('python')\n</pre>\n<p>Then:</p>\n<pre>speaker = ISpeaker.adapt(topic_speaker)\nspeaker is topic_speaker  --&gt; False\nspeaker.topic --&gt; AttributeError(\"ISpeaker interface has no attribute topic\")\n</pre>\n<p>This is controlled by the optional <tt>interface_only</tt> parameter to <tt>adapt</tt> which defaults to <tt>True</tt>.\nPass <tt>interface_only=False</tt> if you want the actual adapted object rather than a wrapper:</p>\n<pre>speaker = ISpeaker.adapt(topic_speaker, interface_only=False)\nspeaker is topic_speaker  --&gt; True\nspeaker.topic --&gt; 'Python'\n</pre>\n<p>Accessing the <tt>topic</tt> attribute on an <tt>ISpeaker</tt> may work for all current implementations\nof <tt>ISpeaker</tt>, but this code will likely break at some inconvenient time in the future.</p>\n<p>Adapters from sub-interfaces may be used to perform adaption if necessary. For example:</p>\n<pre>class IA(Interface):\n   foo = None\n\nclass IB(IA):\n    bar = None\n\n@adapts(int):\nclass IntToB(IB, object):\n    def __init__(self, x):\n        self.foo = self.bar = x\n</pre>\n<p>Then  <tt>IA.adapt(4)</tt> will use the <tt>IntToB</tt> adapter to adapt <tt>4</tt> to <tt>IA</tt> (unless there is already an adapter\nfrom <tt>int</tt> to <tt>IA</tt>)</p>\n</div>\n</div>\n<div id=\"structural-type-checking\">\n<h2>Structural Type Checking</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Structural_type_system\" rel=\"nofollow\">Structural</a> type checking checks if an object has the attributes and methods defined by the interface.</p>\n<p>As interfaces are inherited, you can usually use <tt>isinstance(obj, MyInterface)</tt> to check if an interface is provided.\nAn alternative to <tt>isinstance()</tt> is the <tt>Interface.provided_by(obj)</tt> classmethod which will fall back to structural type\nchecking if the instance is not an actual subclass.  This can be controlled by the <tt>allow_implicit</tt> parameter which defaults to <tt>True</tt>.\nThe structural type-checking does not check function signatures.:</p>\n<pre>class Parrot(object):\n    def __init__(self):\n        self.height = 43\n\n    def speak(self, volume):\n        print('hello')\n\np = Parrot()\nisinstance(p, IAnimal) --&gt; False\nIAnimal.provided_by(p) --&gt; True\nIAnimal.provided_by(p, allow_implicit=False) --&gt; False\n</pre>\n<p>The structural type checking makes working with data transfer objects (DTO\u2019s) much easier.:</p>\n<pre>class IMyDataType(Interface):\n    thing: str\n\nclass DTO(object):\n    pass\n\nd = DTO()\nd.thing = 'hello'\nIMyDataType.provided_by(d) --&gt; True\ne = DTO()\ne.something_else = True\nIMyDataType.provided_by(e) --&gt; False\n</pre>\n<p>Adaption also supports structural typing by passing <tt>allow_implicit=True</tt> (but this is not the default):</p>\n<pre>speaker = ISpeaker.adapt(Parrot(), allow_implicit=True)\nISpeaker.provided_by(speaker)  --&gt; True\n</pre>\n<p>When using <tt>provided_by()</tt> or <tt>adapt()</tt> with <tt>allow_implicit=True</tt>, a warning may be issued informing you that\nthe structurally typed object should inherit the interface.  The warning is only issued if the interface is implemented by the\nclass (and not by instance attributes as in the DTO case above) and the warning is only issued once for each\nclass, interface pair.  For example:</p>\n<pre>s = ISpeaker.adapt(Parrot())\nUserWarning: Class Parrot implements ISpeaker.\nConsider inheriting ISpeaker or using ISpeaker.register(Parrot)\n</pre>\n</div>\n<div id=\"dataclass-support\">\n<h2>Dataclass Support</h2>\n<p><a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclasses</a> were added in Python 3.7.  When used in this and later versions of Python, <tt>pure_interface</tt> provides a\n<tt>dataclass</tt> decorator.  This decorator can be used to create a dataclass that implements an interface.  For example:</p>\n<pre>class IAnimal2(Interface):\n    height: float\n    species: str\n\n    def speak(self):\n        pass\n\n@dataclass\nclass Animal(Concrete, IAnimal2):\n    def speak(self):\n        print('Hello, I am a {} metre tall {}', self.height, self.species)\n\na = Animal(height=4.5, species='Giraffe')\n</pre>\n<p>The builtin Python <tt>dataclass</tt> decorator cannot be used because it will not create attributes for the\n<tt>height</tt> and <tt>species</tt> annotations on the interface base class <tt>IAnimal2</tt>.\nAs per the built-in <tt>dataclass</tt> decorator, only interface attributes defined\nusing annotation syntax are supported (and not the alternatives syntaxes provided by <tt>pure_interface</tt>).</p>\n</div>\n<div id=\"interface-type-information\">\n<h2>Interface Type Information</h2>\n<p>The <tt>pure_interface</tt> module provides these functions for returning information about interface types.</p>\n<dl>\n<dt>type_is_pure_interface(cls)</dt>\n<dd>Return True if cls is a pure interface, False otherwise or if cls is not a class.</dd>\n<dt>get_type_interfaces(cls)</dt>\n<dd>Returns all interfaces in the cls mro including cls itself if it is an interface</dd>\n<dt>get_interface_names(cls)</dt>\n<dd>Returns a <tt>frozenset</tt> of names (methods and attributes) defined by the interface.\nif interface is not a <tt>Interface</tt> subtype then an empty set is returned.</dd>\n<dt>get_interface_method_names(interface)</dt>\n<dd>Returns a <tt>frozenset</tt> of names of methods defined by the interface.\nif interface is not a <tt>Interface</tt> subtype then an empty set is returned</dd>\n<dt>get_interface_attribute_names(interface)</dt>\n<dd>Returns a <tt>frozenset</tt> of names of attributes defined by the interface.\nif interface is not a <tt>Interface</tt> subtype then an empty set is returned</dd>\n</dl>\n</div>\n<div id=\"automatic-adaption\">\n<h2>Automatic Adaption</h2>\n<p>The function decorator <tt>adapt_args</tt> adapts arguments to a decorated function to the types given.\nFor example:</p>\n<pre>@adapt_args(foo=IFoo, bar=IBar)\ndef my_func(foo, bar=None):\n    pass\n</pre>\n<p>In Python 3.5 and later the types can be taken from the argument annotations.:</p>\n<pre>@adapt_args\ndef my_func(foo: IFoo, bar: IBar=None):\n    pass\n</pre>\n<p>This would adapt the <tt>foo</tt> parameter to <tt>IFoo</tt> (with <tt>IFoo.optional_adapt(foo))</tt> and <tt>bar</tt> to <tt>IBar\n(using ``IBar.optional_adapt(bar)</tt>)\nbefore passing them to my_func.  <tt>None</tt> values are never adapted, so <tt>my_func(foo, None)</tt> will work, otherwise\n<tt>AdaptionError</tt> is raised if the parameter is not adaptable.\nAll arguments must be specified as keyword arguments:</p>\n<pre>@adapt_args(IFoo, IBar)   # NOT ALLOWED\ndef other_func(foo, bar):\n    pass\n</pre>\n</div>\n<div id=\"development-flag\">\n<h2>Development Flag</h2>\n<p>Much of the empty function and other checking is awesome whilst writing your code but\nultimately slows down production code.\nFor this reason the <tt>pure_interface</tt> module has an <tt>is_development</tt> switch.:</p>\n<pre>is_development = not hasattr(sys, 'frozen')\n</pre>\n<p><tt>is_development</tt> defaults to <tt>True</tt> if running from source and default to <tt>False</tt> if bundled into an executable by\n<a href=\"https://pypi.python.org/pypi/py2exe\" rel=\"nofollow\">py2exe</a>, <a href=\"https://pypi.python.org/pypi/cx_Freeze\" rel=\"nofollow\">cx_Freeze</a> or similar tools.</p>\n<p>If you manually change this flag it must be set before modules using the <tt>Interface</tt> type\nare imported or else the change will not have any effect.</p>\n<p>If <tt>is_development</tt> if <tt>False</tt> then:</p>\n<blockquote>\n<ul>\n<li>Signatures of overriding methods are not checked</li>\n<li>No warnings are issued by the adaption functions</li>\n<li>No incomplete implementation warnings are issued</li>\n<li>The default value of <tt>interface_only</tt> is set to <tt>False</tt>, so that interface wrappers are not created.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"pycontracts-integration\">\n<h2>PyContracts Integration</h2>\n<p>You can use <tt>pure_interface</tt> with <a href=\"https://pypi.python.org/pypi/PyContracts\" rel=\"nofollow\">PyContracts</a></p>\n<p>Simply import the <tt>pure_contracts</tt> module and use the <tt>ContractInterface</tt> class defined there as you\nwould the <tt>Interface</tt> class described above.\nFor example:</p>\n<pre>from pure_contracts import ContractInterface\nfrom contracts import contract\n\nclass ISpeaker(ContractInterface):\n    @contract(volume=int, returns=unicode)\n    def speak(self, volume):\n        pass\n</pre>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<div id=\"classes\">\n<h3>Classes</h3>\n<dl>\n<dt><strong>InterfaceType(abc.ABCMeta)</strong></dt>\n<dd><p>Metaclass for checking interface and implementation classes.\nAdding <tt>InterfaceType</tt> as a meta-class to a class will not make that class an interface, you need to\ninherit from <tt>Interface</tt> class to define an interface.</p>\n<p>In addition to the <tt>register</tt> method provided by <tt>ABCMeta</tt>, the following functions are defined on\n<tt>InterfaceType</tt> and can be accessed directly when the <tt>Interface</tt> methods are overridden\nfor other purposes.</p>\n<dl>\n<dt><strong>adapt</strong> <em>(cls, obj, allow_implicit=False, interface_only=None)</em></dt>\n<dd>See <tt>Interface.adapt</tt> for a description.</dd>\n<dt><strong>adapt_or_none</strong> <em>(cls, obj, allow_implicit=False, interface_only=None)</em></dt>\n<dd>See <tt>Interface.adapt_or_none</tt> for a description</dd>\n<dt><strong>optional_adapt</strong> <em>(cls, obj, allow_implicit=False, interface_only=None)</em></dt>\n<dd>See <tt>Interface.optional_adapt</tt> for a description</dd>\n<dt><strong>can_adapt</strong> <em>(cls, obj, allow_implicit=False)</em></dt>\n<dd>See <tt>Interface.can_adapt</tt> for a description</dd>\n<dt><strong>filter_adapt</strong> <em>(cls, objects, allow_implicit=False, interface_only=None)</em></dt>\n<dd>See <tt>Interface.filter_adapt</tt> for a description</dd>\n<dt><strong>interface_only</strong> <em>(cls, implementation)</em></dt>\n<dd>See <tt>Interface.interface_only</tt> for a description</dd>\n<dt><strong>provided_by</strong> <em>(cls, obj, allow_implicit=True)</em></dt>\n<dd>See <tt>Interface.provided_by</tt> for a description</dd>\n</dl>\n<p>Classes created with a metaclass of <tt>InterfaceType</tt> will have the following property:</p>\n<dl>\n<dt><strong>_pi</strong> Information about the class that is used by this meta-class.  This attribute is reserved for use by</dt>\n<dd><tt>pure_interface</tt> and must not be overridden.</dd>\n</dl>\n</dd>\n<dt><strong>Interface</strong></dt>\n<dd><p>Base class for defining interfaces.  The following methods are provided:</p>\n<dl>\n<dt><strong>adapt</strong> <em>(obj, allow_implicit=False, interface_only=None)</em></dt>\n<dd>Adapts <tt>obj</tt> to this interface. If <tt>allow_implicit</tt> is <tt>True</tt> permit structural adaptions.\nIf <tt>interface_only</tt> is <tt>None</tt> the it is set to the value of <tt>is_development</tt>.\nIf <tt>interface_only</tt> resolves to <tt>True</tt> a wrapper object that provides\nthe properties and methods defined by the interface and nothing else is returned.\nRaises <tt>AdaptionError</tt> if no adaption is possible or a registered adapter returns an object not providing\nthis interface.</dd>\n<dt><strong>adapt_or_none</strong> <em>(obj, allow_implicit=False, interface_only=None)</em></dt>\n<dd>As per <strong>adapt()</strong> except returns <tt>None</tt> instead of raising a <tt>AdaptionError</tt></dd>\n<dt><strong>optional_adapt</strong> <em>(obj, allow_implicit=False, interface_only=None)</em></dt>\n<dd>Adapts obj to this interface if it is not <tt>None</tt> returning <tt>None</tt> otherwise.\nShort-cut for <tt>adapt(obj) if obj is not None else None</tt></dd>\n<dt><strong>can_adapt</strong> <em>(obj, allow_implicit=False)</em></dt>\n<dd>Returns <tt>True</tt> if <tt>adapt(obj, allow_implicit)</tt> will succeed.  Short-cut for\n<tt>adapt_or_none(obj) is not None</tt></dd>\n<dt><strong>filter_adapt</strong> <em>(objects, allow_implicit=False, interface_only=None)</em></dt>\n<dd>Generates adaptions of each item in <em>objects</em> that provide this interface.\n<em>allow_implicit</em> and <em>interface_only</em> are as for <strong>adapt</strong>.\nObjects that cannot be adapted to this interface are silently skipped.</dd>\n<dt><strong>interface_only</strong> <em>(implementation)</em></dt>\n<dd>Returns a wrapper around <em>implementation</em> that provides the properties and methods defined by\nthe interface and nothing else.</dd>\n<dt><strong>provided_by</strong> <em>(obj, allow_implicit=True)</em></dt>\n<dd>Returns <tt>True</tt> if <em>obj</em> provides this interface. If <tt>allow_implicit</tt> is <tt>True</tt> the also\nreturn <tt>True</tt> for objects that provide the interface structure but do not inherit from it.\nRaises <tt>InterfaceError</tt> if the class is a concrete type.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div id=\"functions\">\n<h3>Functions</h3>\n<dl>\n<dt><strong>adapts</strong> <em>(from_type, to_interface=None)</em></dt>\n<dd>Class or function decorator for declaring an adapter from <em>from_type</em> to <em>to_interface</em>.\nThe class or function being decorated must take a single argument (an instance of <em>from_type</em>) and\nprovide (or return and object providing) <em>to_interface</em>.  The adapter may return an object that provides\nthe interface structurally only, however <tt>adapt</tt> must be called with <tt>allow_implicit=True</tt> for this to work.\nIf decorating a class, <em>to_interface</em> may be <tt>None</tt> to use the first interface in the class\u2019s MRO.</dd>\n<dt><strong>register_adapter</strong> <em>(adapter, from_type, to_interface)</em></dt>\n<dd>Registers an adapter to convert instances of <em>from_type</em> to objects that provide <em>to_interface</em>\nfor the <em>to_interface.adapt()</em> method. <em>adapter</em> must be a callable that takes a single argument\n(an instance of <em>from_type</em>) and returns and object providing <em>to_interface</em>.</dd>\n<dt><strong>type_is_pure_interface</strong> <em>(cls)</em></dt>\n<dd>Return <tt>True</tt> if <em>cls</em> is a pure interface and <tt>False</tt> otherwise</dd>\n<dt><strong>get_type_interfaces</strong> <em>(cls)</em></dt>\n<dd>Returns all interfaces in the <em>cls</em> mro including cls itself if it is an interface</dd>\n<dt><strong>get_interface_names</strong> <em>(cls)</em></dt>\n<dd>Returns a <tt>frozenset</tt> of names (methods and attributes) defined by the interface.\nif interface is not a <tt>Interface</tt> subtype then an empty set is returned.</dd>\n<dt><strong>get_interface_method_names</strong> <em>(cls)</em></dt>\n<dd>Returns a <tt>frozenset</tt> of names of methods defined by the interface.\nIf <em>cls</em> is not a <tt>Interface</tt> subtype then an empty set is returned.</dd>\n<dt><strong>get_interface_attribute_names</strong> <em>(cls)</em></dt>\n<dd>Returns a <tt>frozenset</tt> of names of class attributes and annotations defined by the interface\nIf <em>cls</em> is not a <tt>Interface</tt> subtype then an empty set is returned.</dd>\n<dt><strong>dataclass</strong> <em>(_cls=None, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)</em></dt>\n<dd><p>This function is a re-implementation of the standard Python <tt>dataclasses.dataclass</tt> decorator.\nIn addition to the fields on the decorated class, all annotations on interface base classes are added as fields.\nSee the Python <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclasses</a> documentation for more details.</p>\n<p>3.7+ Only</p>\n</dd>\n</dl>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<dl>\n<dt><strong>PureInterfaceError</strong></dt>\n<dd>Base exception class for all exceptions raised by <tt>pure_interface</tt>.</dd>\n<dt><strong>InterfaceError</strong></dt>\n<dd>Exception raised for problems with interfaces</dd>\n<dt><strong>AdaptionError</strong></dt>\n<dd>Exception raised for problems with adapters or adapting.</dd>\n</dl>\n</div>\n<div id=\"module-attributes\">\n<h3>Module Attributes</h3>\n<dl>\n<dt><strong>is_development</strong></dt>\n<dd><p>Set to <tt>True</tt> to enable all checks and warnings.\nIf set to <tt>False</tt> then:</p>\n<ul>\n<li>Signatures of overriding methods are not checked</li>\n<li>No warnings are issued by the adaption functions</li>\n<li>No incomplete implementation warnings are issued</li>\n<li>The default value of <tt>interface_only</tt> is set to <tt>False</tt>, so that interface wrappers are not created.</li>\n</ul>\n</dd>\n<dt><strong>missing_method_warnings</strong></dt>\n<dd>The list of warning messages for concrete classes with missing interface (abstract) method overrides.\nNote that missing properties are NOT checked for as they may be provided by instance attributes.</dd>\n</dl>\n<hr class=\"docutils\">\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[*]</a></td><td>We don\u2019t talk about the methods on the base <tt>Interface</tt> class.  In earlier versions they\nwere all on the meta class but then practicality got in the way.</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6528404, "releases": {"1.7.0": [{"comment_text": "", "digests": {"md5": "2a459e4940393ddd10d580bc90d0baba", "sha256": "43a29aeb39d671578af36c1d382552ec3ecaaf1837f7b96de4f7ffac50e19cdd"}, "downloads": -1, "filename": "pure_interface-1.7.0.tar.gz", "has_sig": false, "md5_digest": "2a459e4940393ddd10d580bc90d0baba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13499, "upload_time": "2017-08-09T03:07:40", "upload_time_iso_8601": "2017-08-09T03:07:40.770990Z", "url": "https://files.pythonhosted.org/packages/2d/b9/ae41e7db84a622bb91c69e978a4f4f8f4af0013e74766a93bed4d902c4c7/pure_interface-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "707f28f83f738e47032a791538a076e9", "sha256": "b5082f9a0407f785892bd42972c8d64d7553cf937e091f7a4598b3d25875fe1b"}, "downloads": -1, "filename": "pure_interface-1.7.1.tar.gz", "has_sig": false, "md5_digest": "707f28f83f738e47032a791538a076e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13512, "upload_time": "2017-09-21T02:45:19", "upload_time_iso_8601": "2017-09-21T02:45:19.696021Z", "url": "https://files.pythonhosted.org/packages/79/4c/56eaeb36b7103f25642e7631e38deb307406fa82d2315b6c8b84160928d2/pure_interface-1.7.1.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "6409f043d7222f1823166eefb38c6b16", "sha256": "9057822f60067d8f9e48b51cd87497f4836640d13d5e6be8fb4f2eec0f16d482"}, "downloads": -1, "filename": "pure_interface-1.7.2.tar.gz", "has_sig": false, "md5_digest": "6409f043d7222f1823166eefb38c6b16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13563, "upload_time": "2017-09-21T03:28:27", "upload_time_iso_8601": "2017-09-21T03:28:27.747461Z", "url": "https://files.pythonhosted.org/packages/bf/85/216b571acd2d2cd06e71a43f86668dd7e854b55645cc6654e14531fd588d/pure_interface-1.7.2.tar.gz", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "6db139b51956c71dd4d500e23585dc92", "sha256": "69d123d4c0fa625570469d929fbc027a36abac9b206b968ac4ef24230864f944"}, "downloads": -1, "filename": "pure_interface-1.7.3.tar.gz", "has_sig": false, "md5_digest": "6db139b51956c71dd4d500e23585dc92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13588, "upload_time": "2017-09-26T04:36:11", "upload_time_iso_8601": "2017-09-26T04:36:11.377877Z", "url": "https://files.pythonhosted.org/packages/95/5d/53dcbfddd7913e47e382395f7ea5edaceb101d693eff3b06adfb936d945b/pure_interface-1.7.3.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "88e690c98390ee3a48e7a8d34b292a34", "sha256": "62e052ffeee16b218b907189f1ef26f228c44cbc3ae93c11b08e7d8cb3fdddcd"}, "downloads": -1, "filename": "pure_interface-1.7.4.tar.gz", "has_sig": false, "md5_digest": "88e690c98390ee3a48e7a8d34b292a34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13634, "upload_time": "2017-09-26T22:57:49", "upload_time_iso_8601": "2017-09-26T22:57:49.152076Z", "url": "https://files.pythonhosted.org/packages/07/32/3f87992373556b16af188bbe0c67c795d1dd3b1bfc71e57643eedf0215fb/pure_interface-1.7.4.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "995be06b49a6952a97167b1e68cec926", "sha256": "2d6658f6a49cd74b9c09830cefbb604e7fbb8aebb0c5b4ca14165acb3371d762"}, "downloads": -1, "filename": "pure_interface-1.8.0.tar.gz", "has_sig": false, "md5_digest": "995be06b49a6952a97167b1e68cec926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15133, "upload_time": "2017-10-12T20:21:40", "upload_time_iso_8601": "2017-10-12T20:21:40.235073Z", "url": "https://files.pythonhosted.org/packages/00/61/81deb150f71387ff3da82a5191e5ed526243830e2230855699498f9f634e/pure_interface-1.8.0.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "2dcadd16af9025cbad1c74dfb5f35994", "sha256": "a89af1a44f1bec1b30d45c36adfc340df36036e0ff8d2b7b1b13294cae64bba8"}, "downloads": -1, "filename": "pure_interface-1.9.2.tar.gz", "has_sig": false, "md5_digest": "2dcadd16af9025cbad1c74dfb5f35994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15351, "upload_time": "2017-11-10T02:21:26", "upload_time_iso_8601": "2017-11-10T02:21:26.421991Z", "url": "https://files.pythonhosted.org/packages/14/12/77010b6e41a25092aacb39ccd43727c2af535aa7b5373b68fe6153186dca/pure_interface-1.9.2.tar.gz", "yanked": false}], "1.9.3": [{"comment_text": "", "digests": {"md5": "4ce34f01af948464ea4bda122a86b732", "sha256": "9b17e8f55986adfa34263df55eab409c53b9f16d1a31b22bd3fad9b478348ed9"}, "downloads": -1, "filename": "pure_interface-1.9.3.tar.gz", "has_sig": false, "md5_digest": "4ce34f01af948464ea4bda122a86b732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15799, "upload_time": "2017-11-21T22:53:15", "upload_time_iso_8601": "2017-11-21T22:53:15.892611Z", "url": "https://files.pythonhosted.org/packages/7a/5a/92dff1bdf402d07e8966d03fc88c47a0bf5e8b2ec2c34a166edc5da4fe65/pure_interface-1.9.3.tar.gz", "yanked": false}], "1.9.4": [{"comment_text": "", "digests": {"md5": "73093ffd2dee5d3fffdb3c390adec881", "sha256": "34e0906f10097c793e5fc3b3c9daddf8860b9f75d154caa31a004171826a662a"}, "downloads": -1, "filename": "pure_interface-1.9.4.tar.gz", "has_sig": false, "md5_digest": "73093ffd2dee5d3fffdb3c390adec881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15850, "upload_time": "2017-11-21T23:10:31", "upload_time_iso_8601": "2017-11-21T23:10:31.988143Z", "url": "https://files.pythonhosted.org/packages/90/af/1a97564e054609e51d7ad02febd22e3fa55280f150aeaaaece2e044e2d69/pure_interface-1.9.4.tar.gz", "yanked": false}], "1.9.5": [{"comment_text": "", "digests": {"md5": "04679baa907fdc6960f1d5fec560e5a7", "sha256": "b680b0aa6a7223501019ddaf983171057597ec86d6d25c4d510489f507c06651"}, "downloads": -1, "filename": "pure_interface-1.9.5.tar.gz", "has_sig": false, "md5_digest": "04679baa907fdc6960f1d5fec560e5a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16346, "upload_time": "2017-11-21T23:54:56", "upload_time_iso_8601": "2017-11-21T23:54:56.715012Z", "url": "https://files.pythonhosted.org/packages/b5/ed/cab5d5f72b0bc8810f8e10572c48272e195a109cb112b4075d10a83dddb2/pure_interface-1.9.5.tar.gz", "yanked": false}], "1.9.6": [{"comment_text": "", "digests": {"md5": "e160ff27ca9e497b600aa62070b43ab2", "sha256": "ea51b493a13380aa805af9d0d01b5b97f920eed8d6ddeca2c4964ebc17e7a51d"}, "downloads": -1, "filename": "pure_interface-1.9.6.tar.gz", "has_sig": false, "md5_digest": "e160ff27ca9e497b600aa62070b43ab2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16342, "upload_time": "2017-12-07T20:23:54", "upload_time_iso_8601": "2017-12-07T20:23:54.452806Z", "url": "https://files.pythonhosted.org/packages/6b/9b/7cafad9e1b96180261c7f1d21d4c9f44fae1bd2280b243996be991b78138/pure_interface-1.9.6.tar.gz", "yanked": false}], "1.9.7": [{"comment_text": "", "digests": {"md5": "2f96924044ca5f9162895ed799c120e2", "sha256": "51c72a177489c5dea104b12f3eeaa89eca737b29247d802826b2ff3f71ea41a3"}, "downloads": -1, "filename": "pure_interface-1.9.7.tar.gz", "has_sig": false, "md5_digest": "2f96924044ca5f9162895ed799c120e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16527, "upload_time": "2018-01-30T02:40:57", "upload_time_iso_8601": "2018-01-30T02:40:57.066676Z", "url": "https://files.pythonhosted.org/packages/db/f0/f90b78e44de52b719bc9bfbc86e2e00b12319ab8db13fb41c67bc07cd5e9/pure_interface-1.9.7.tar.gz", "yanked": false}], "1.9.8": [{"comment_text": "", "digests": {"md5": "02c157c5e070da1758bc7fcf9976e67d", "sha256": "6f18a3f8b4e7b2d77b01c3546f6e5dfc4b618ffae3867617b8521739f70b1c71"}, "downloads": -1, "filename": "pure_interface-1.9.8.tar.gz", "has_sig": false, "md5_digest": "02c157c5e070da1758bc7fcf9976e67d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16535, "upload_time": "2018-02-08T20:50:16", "upload_time_iso_8601": "2018-02-08T20:50:16.225153Z", "url": "https://files.pythonhosted.org/packages/11/25/c292d93e1eb1fa03c9e062678180df289d8bf18b185afd0b4bab4f162592/pure_interface-1.9.8.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "1ae51c52bd8c6e972a375f46a44a2b70", "sha256": "9286f4ff72761d17a9fbae4e03d2f7ead3e1f68a17c9b26f15b76f3018ed2e81"}, "downloads": -1, "filename": "pure_interface-2.0.0.tar.gz", "has_sig": false, "md5_digest": "1ae51c52bd8c6e972a375f46a44a2b70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17632, "upload_time": "2018-02-21T00:37:10", "upload_time_iso_8601": "2018-02-21T00:37:10.085620Z", "url": "https://files.pythonhosted.org/packages/de/10/2e8e2ca7dd3bcf29f0384b193f7c60c9ec8c0283d78a8d515edecf5cb827/pure_interface-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "d1abce49132604de019be4d788b60f54", "sha256": "aa0187ca20cac8d107e44c3abe044ba44c372209d6e12e8e801fa12af6ed0a8c"}, "downloads": -1, "filename": "pure_interface-2.1.0.tar.gz", "has_sig": false, "md5_digest": "d1abce49132604de019be4d788b60f54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18053, "upload_time": "2018-03-08T00:26:12", "upload_time_iso_8601": "2018-03-08T00:26:12.091683Z", "url": "https://files.pythonhosted.org/packages/be/d2/31ff5e754fbe5dd5bc3750cc203b63e873eb9024d0adbb039ee8314daca5/pure_interface-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "c9ab8a3d304d06ed72506f268563fe01", "sha256": "e01a88e71d1d49710ec2e48dcc03e6d6e9127e80f0c60c50be334faaa42fb103"}, "downloads": -1, "filename": "pure_interface-2.2.0.tar.gz", "has_sig": false, "md5_digest": "c9ab8a3d304d06ed72506f268563fe01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18091, "upload_time": "2018-03-08T01:32:58", "upload_time_iso_8601": "2018-03-08T01:32:58.071012Z", "url": "https://files.pythonhosted.org/packages/f9/9c/cbfe43fa0a9b918547cced08b7fed63b45af6c6ab6221444f3eb90201f74/pure_interface-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "6def5e30c09788db6470c294d935ccd4", "sha256": "ee5176c468faed8bfc4b391ca232557c50fe2ffb4340e233b551038f616a29f6"}, "downloads": -1, "filename": "pure_interface-2.2.1.tar.gz", "has_sig": false, "md5_digest": "6def5e30c09788db6470c294d935ccd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18521, "upload_time": "2018-03-08T22:50:52", "upload_time_iso_8601": "2018-03-08T22:50:52.064865Z", "url": "https://files.pythonhosted.org/packages/9e/e7/c3009f951a7ed55e1e5306601938fce814b873ad828469092d78563b9d59/pure_interface-2.2.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "fe3cbb3fe6910d442cdce3e58dead018", "sha256": "631d41fa042aeeea43b5b7d4fe2c9aacc79076fdd5eec95f7319a630224f1afc"}, "downloads": -1, "filename": "pure_interface-3.0.0.tar.gz", "has_sig": false, "md5_digest": "fe3cbb3fe6910d442cdce3e58dead018", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21488, "upload_time": "2018-03-22T21:55:48", "upload_time_iso_8601": "2018-03-22T21:55:48.348668Z", "url": "https://files.pythonhosted.org/packages/f7/b3/a6eedd173be68d929b6bb1e6c903b7d7b7c9de9c8958fa2891ca1c16ca9d/pure_interface-3.0.0.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "8eaea8e86ff1fc63a0bbf874fb151256", "sha256": "d16ca9d3e1e1a421a2353e9cc9cc3df8db538e2d5016c45d13fb42cf680ad33d"}, "downloads": -1, "filename": "pure_interface-3.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8eaea8e86ff1fc63a0bbf874fb151256", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23946, "upload_time": "2018-06-28T00:08:00", "upload_time_iso_8601": "2018-06-28T00:08:00.116729Z", "url": "https://files.pythonhosted.org/packages/92/c0/77e0d89ba5632aec467d9597e1901060a2726069ec0011ea58657684c289/pure_interface-3.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b399d13cb1676bc5f86b3f04bbee393", "sha256": "ec48f779136215ead7f46b157bc55675909553043953d7d5fcbd8776fdea3d72"}, "downloads": -1, "filename": "pure_interface-3.0.3.tar.gz", "has_sig": false, "md5_digest": "9b399d13cb1676bc5f86b3f04bbee393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22154, "upload_time": "2018-06-27T23:49:15", "upload_time_iso_8601": "2018-06-27T23:49:15.354014Z", "url": "https://files.pythonhosted.org/packages/06/d3/9a8117ba1beffd41a13f31f80d5d6034bd1ff831bd4ed5fae8f9c3ada493/pure_interface-3.0.3.tar.gz", "yanked": false}], "3.0.4": [{"comment_text": "", "digests": {"md5": "a39ddb133da07df1f460a9c08dc08f14", "sha256": "ea3018d6bedd7619a22afd8bd148dc17e23077c171a3470a1b06818a5812e4aa"}, "downloads": -1, "filename": "pure_interface-3.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a39ddb133da07df1f460a9c08dc08f14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24057, "upload_time": "2018-07-02T22:33:26", "upload_time_iso_8601": "2018-07-02T22:33:26.721186Z", "url": "https://files.pythonhosted.org/packages/f2/a7/cb4f66656fbfe7c3b7f3a8b4705bd2a4172649f753700570852787f5e2c9/pure_interface-3.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e5a50b98ea1f2d179865b3d03a9eb24", "sha256": "9690a23a643414773e7bbf0430525d0bdd48517d8796ec09769998be990f9b9a"}, "downloads": -1, "filename": "pure_interface-3.0.4.tar.gz", "has_sig": false, "md5_digest": "8e5a50b98ea1f2d179865b3d03a9eb24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22239, "upload_time": "2018-07-02T22:33:29", "upload_time_iso_8601": "2018-07-02T22:33:29.165262Z", "url": "https://files.pythonhosted.org/packages/99/a5/89b45482f60983c8dd5a034ef0f8dfd7be2d513df8a12bcef634f9acd340/pure_interface-3.0.4.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "e4ceea932ff1312055d9e5cd9da56802", "sha256": "2899cd4d693fb77e5d82488ace3b14ba577fb282ac213f3d010479b59e5e45c4"}, "downloads": -1, "filename": "pure_interface-3.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e4ceea932ff1312055d9e5cd9da56802", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24415, "upload_time": "2018-08-27T04:25:04", "upload_time_iso_8601": "2018-08-27T04:25:04.510621Z", "url": "https://files.pythonhosted.org/packages/0d/ec/cd9ebbb195dca2bc6b3331fdfe4ca135d788f2fad57d7e307b3205e6a69f/pure_interface-3.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea49ace4bfb22435be4ea384b2c2e5c9", "sha256": "c2a443beac0e0265a9795c124554ea87bc5265fcdfe4e0371e7ed739203865cd"}, "downloads": -1, "filename": "pure_interface-3.1.0.tar.gz", "has_sig": false, "md5_digest": "ea49ace4bfb22435be4ea384b2c2e5c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28185, "upload_time": "2018-08-27T04:25:06", "upload_time_iso_8601": "2018-08-27T04:25:06.373363Z", "url": "https://files.pythonhosted.org/packages/32/2c/0574fbf55505fb0df97021a7157aff1864f861e92f53478d685ba0ef3550/pure_interface-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "d93baf6896f60fc81e8aaad7d69e1cd2", "sha256": "44c7a60384797b7eeb2ca0fdf994d0cd70e3aba8276837816b3034565055a97d"}, "downloads": -1, "filename": "pure_interface-3.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d93baf6896f60fc81e8aaad7d69e1cd2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24489, "upload_time": "2018-08-27T21:06:27", "upload_time_iso_8601": "2018-08-27T21:06:27.009660Z", "url": "https://files.pythonhosted.org/packages/b0/f9/8a509d30b5e179ff667204a451253abe3fcd7a3e14110cc939bba8ab60b1/pure_interface-3.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6fbe945c95c30946ff6e24ce559d075", "sha256": "08ba7426f67f15dffd10df0796c0e5e939cbe05eb10622a7d3cca3d1e1e55d5d"}, "downloads": -1, "filename": "pure_interface-3.1.1.tar.gz", "has_sig": false, "md5_digest": "b6fbe945c95c30946ff6e24ce559d075", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28269, "upload_time": "2018-08-27T21:06:29", "upload_time_iso_8601": "2018-08-27T21:06:29.100955Z", "url": "https://files.pythonhosted.org/packages/d3/b0/a33914b5ee12b7a96d67dfdac56e4956fd3624cc9a0a1d6f7ff3a9161d23/pure_interface-3.1.1.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "51704a30a9188be48d0ad6864078c7aa", "sha256": "ab82e83f6194f079bd722af0a824bb61861e34f636b16b20269cf3bc0ee3bf38"}, "downloads": -1, "filename": "pure_interface-3.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51704a30a9188be48d0ad6864078c7aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24164, "upload_time": "2018-10-16T22:55:11", "upload_time_iso_8601": "2018-10-16T22:55:11.949984Z", "url": "https://files.pythonhosted.org/packages/99/a3/add252398337bcc0c93954cde3e6048d8bce60b7fb87ab72e7675451ff30/pure_interface-3.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34e31c0349dce285412bc2c13d64a3fa", "sha256": "5dbdb61c983e20b07a08db5ef3c4e1b1c3d575f61fb30edff3f6248eb7ad579f"}, "downloads": -1, "filename": "pure_interface-3.2.0.tar.gz", "has_sig": false, "md5_digest": "34e31c0349dce285412bc2c13d64a3fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22353, "upload_time": "2018-10-16T22:55:13", "upload_time_iso_8601": "2018-10-16T22:55:13.853549Z", "url": "https://files.pythonhosted.org/packages/b0/c6/67058af2f198c7458c70566c6993b312c23a84ec85f6365f2de63b2d785e/pure_interface-3.2.0.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "39d8f0910fd2539813c5986713dfccf4", "sha256": "c97fb10326c837a65666f27f141cc7abc96938a3f4ea14d72629ba18364a3852"}, "downloads": -1, "filename": "pure_interface-3.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "39d8f0910fd2539813c5986713dfccf4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24182, "upload_time": "2018-10-19T00:20:47", "upload_time_iso_8601": "2018-10-19T00:20:47.090303Z", "url": "https://files.pythonhosted.org/packages/fa/f9/69abbd5e1498b72e6f77a440196cda1c81a9a1b2f29a87b27bc4af877731/pure_interface-3.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b58d28dda36374266d6e168c56313c13", "sha256": "f75820c21e508553ee267cf2873bfc67bb7d0b4bfbabbc8bbc4d00aaf7af4707"}, "downloads": -1, "filename": "pure_interface-3.3.0.tar.gz", "has_sig": false, "md5_digest": "b58d28dda36374266d6e168c56313c13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22362, "upload_time": "2018-10-19T00:20:48", "upload_time_iso_8601": "2018-10-19T00:20:48.815081Z", "url": "https://files.pythonhosted.org/packages/bf/4e/d067cc4fdf93de95930b5963ec80aab60ee76293b9ecdcf56b3292673207/pure_interface-3.3.0.tar.gz", "yanked": false}], "3.3.1": [{"comment_text": "", "digests": {"md5": "5621faca19a16cefaafa6656e5cc61b3", "sha256": "dd81854181e31e964edba09f348440a4e77ae84af634dcd471d24876d1a82614"}, "downloads": -1, "filename": "pure_interface-3.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5621faca19a16cefaafa6656e5cc61b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24782, "upload_time": "2018-10-23T01:09:59", "upload_time_iso_8601": "2018-10-23T01:09:59.596729Z", "url": "https://files.pythonhosted.org/packages/0d/74/09a92888e41206373574f92c5235fb659894f2ff07e028b0464da64ecb92/pure_interface-3.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f1a6bfea4baf1fb310aa3a7aaee2020", "sha256": "7e875b796455dfaaf1bd03f496539524fcc1d267dedcff49260b10bc8ad7842d"}, "downloads": -1, "filename": "pure_interface-3.3.1.tar.gz", "has_sig": false, "md5_digest": "6f1a6bfea4baf1fb310aa3a7aaee2020", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28965, "upload_time": "2018-10-23T01:10:01", "upload_time_iso_8601": "2018-10-23T01:10:01.485336Z", "url": "https://files.pythonhosted.org/packages/d9/0a/47bb1c4ef1e36a063ec82177b41231c261bcc47012393465b7e9bb85b7c4/pure_interface-3.3.1.tar.gz", "yanked": false}], "3.3.2": [{"comment_text": "", "digests": {"md5": "3f0a6822425abb3976a935203e9a66c8", "sha256": "67d6e5a47d81d72fa7bed59bf1c354e2ba391a647316cc8e6774234d9200f42a"}, "downloads": -1, "filename": "pure_interface-3.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f0a6822425abb3976a935203e9a66c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16918, "upload_time": "2019-08-02T01:39:56", "upload_time_iso_8601": "2019-08-02T01:39:56.497391Z", "url": "https://files.pythonhosted.org/packages/d0/12/c2bff5b26ef15a2f374d1269d3692147345f0c04ca23cefd7b276c7c04a1/pure_interface-3.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88f156055ab23f39a3403af4703e3f21", "sha256": "8630218f16836e5c93fc9089805a94971dd00c56a67aadb391a7d79cbdac6af9"}, "downloads": -1, "filename": "pure_interface-3.3.2.tar.gz", "has_sig": false, "md5_digest": "88f156055ab23f39a3403af4703e3f21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29000, "upload_time": "2019-08-01T22:52:03", "upload_time_iso_8601": "2019-08-01T22:52:03.898789Z", "url": "https://files.pythonhosted.org/packages/ca/a6/589410951d4eda5bdcbcc51d1f2bc8fda44b7f365e4ba4d4bfd3a7cb74fe/pure_interface-3.3.2.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "a8948edb92e1fec9221211c1fe4977d5", "sha256": "6f48062073f711b6cf4034bf1e7581fcc268c69bab24563d9b775d15da3c0f7e"}, "downloads": -1, "filename": "pure_interface-3.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a8948edb92e1fec9221211c1fe4977d5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18689, "upload_time": "2019-04-12T02:39:01", "upload_time_iso_8601": "2019-04-12T02:39:01.316364Z", "url": "https://files.pythonhosted.org/packages/18/24/89c02affa762e10d6062674a5a3eeb42ba1bec3eedcc065ca314a43d7251/pure_interface-3.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a11e51972839b1c04a11f738f4944941", "sha256": "77ef5a16e6c8225cf5ebdc8dfce7a5c0c02d5968490dbd686b1f26fa3361e334"}, "downloads": -1, "filename": "pure_interface-3.4.0.tar.gz", "has_sig": false, "md5_digest": "a11e51972839b1c04a11f738f4944941", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31609, "upload_time": "2019-04-12T02:39:05", "upload_time_iso_8601": "2019-04-12T02:39:05.256084Z", "url": "https://files.pythonhosted.org/packages/98/19/01a34e8e253bdefef984a4ed1234f7ee1059d0d62bc7b35179c8be204478/pure_interface-3.4.0.tar.gz", "yanked": false}], "3.4.1": [{"comment_text": "", "digests": {"md5": "d4ca00571a648c9d02b231036a6a5194", "sha256": "c760b5552496a9b41642b9f44ea9e793d3c6d8f04c411d062e3fcb87ac5b3a78"}, "downloads": -1, "filename": "pure_interface-3.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d4ca00571a648c9d02b231036a6a5194", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18691, "upload_time": "2019-04-23T03:17:07", "upload_time_iso_8601": "2019-04-23T03:17:07.375511Z", "url": "https://files.pythonhosted.org/packages/80/83/c9bb540c05970d43c9d8a6fddc69261b1f65c92d386b53180f301d1cf882/pure_interface-3.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c34322c0f9132c7b63597db33b5025d", "sha256": "da10b32e69ca44c4394a553c00398694feeb8b7f50f96242d7487ee0c0854cba"}, "downloads": -1, "filename": "pure_interface-3.4.1.tar.gz", "has_sig": false, "md5_digest": "9c34322c0f9132c7b63597db33b5025d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31625, "upload_time": "2019-04-23T03:17:09", "upload_time_iso_8601": "2019-04-23T03:17:09.734034Z", "url": "https://files.pythonhosted.org/packages/ea/b9/d364c8ce15344362691a6d74d5624deb68750356991958a8c733f464ea83/pure_interface-3.4.1.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "9e360d0d7d5405e6fa59d953f607f951", "sha256": "34de06c02f6d57e0722dd1d96119eea615f23caeb0160a284f7419cf5229166f"}, "downloads": -1, "filename": "pure_interface-3.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e360d0d7d5405e6fa59d953f607f951", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19488, "upload_time": "2019-05-28T05:40:16", "upload_time_iso_8601": "2019-05-28T05:40:16.446859Z", "url": "https://files.pythonhosted.org/packages/98/ee/e094e64bc88cdd6600195de4f20438ca1284c67f251e8b0ce13936d38f10/pure_interface-3.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14e11b1ec8ee9b7ad3bf5a9e3f9fe9bd", "sha256": "bc8e68e83c3ecc1e135e1071b3f507f295bb6ef74d2c52d6dd1a96172d4e3fd6"}, "downloads": -1, "filename": "pure_interface-3.5.0.tar.gz", "has_sig": false, "md5_digest": "14e11b1ec8ee9b7ad3bf5a9e3f9fe9bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26710, "upload_time": "2019-05-28T05:40:18", "upload_time_iso_8601": "2019-05-28T05:40:18.498514Z", "url": "https://files.pythonhosted.org/packages/06/2d/9e30929e142e2c40a3b839114b93f8996d1ea99ccb0b53afc8250f80818c/pure_interface-3.5.0.tar.gz", "yanked": false}], "3.5.1": [{"comment_text": "", "digests": {"md5": "49eb657f82d44503cb777d4a1588f6bd", "sha256": "ce1073854079a6bce1e4ac79d5c2f257ce55c9ac88e9e9cfac30d3f2a1840c3b"}, "downloads": -1, "filename": "pure_interface-3.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49eb657f82d44503cb777d4a1588f6bd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19719, "upload_time": "2019-05-30T04:42:50", "upload_time_iso_8601": "2019-05-30T04:42:50.178939Z", "url": "https://files.pythonhosted.org/packages/1d/e4/82406f73f2a125a679192c42e1d94f058a899044b6398ca2f1ebab7ac11f/pure_interface-3.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51ab8a9fc11de2360aa9ac70244bab38", "sha256": "5006c943018741e7912a909be9642d8421ee0837c7b72000ef8ecd4704ee01b2"}, "downloads": -1, "filename": "pure_interface-3.5.1.tar.gz", "has_sig": false, "md5_digest": "51ab8a9fc11de2360aa9ac70244bab38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28061, "upload_time": "2019-05-30T04:42:52", "upload_time_iso_8601": "2019-05-30T04:42:52.616115Z", "url": "https://files.pythonhosted.org/packages/8e/ba/d6ba5f8c927fa0bd5fd8fefa4998b4514ce2277a4fba97f0bcdd49579b7b/pure_interface-3.5.1.tar.gz", "yanked": false}], "3.5.2": [{"comment_text": "", "digests": {"md5": "42f13d94988458226ee0d6a6b262e11e", "sha256": "fe40ff590288f5945f98c32750dd09c748016a03e407b24a2d6272e0769919c3"}, "downloads": -1, "filename": "pure_interface-3.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42f13d94988458226ee0d6a6b262e11e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19762, "upload_time": "2019-08-02T01:39:11", "upload_time_iso_8601": "2019-08-02T01:39:11.221010Z", "url": "https://files.pythonhosted.org/packages/69/b6/bd5967f81226ca0ee4c8f4924bc9aad1754ef26c0353f0cc0039512337ee/pure_interface-3.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cc05c9d7603ff0c53997ee63defa7c9", "sha256": "92d6263bd4b34826ed9eeb66c74db9c552689ff2ece3c3c8ac87df2b9a3f4b29"}, "downloads": -1, "filename": "pure_interface-3.5.2.tar.gz", "has_sig": false, "md5_digest": "1cc05c9d7603ff0c53997ee63defa7c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33506, "upload_time": "2019-08-01T23:01:12", "upload_time_iso_8601": "2019-08-01T23:01:12.304597Z", "url": "https://files.pythonhosted.org/packages/6d/8a/b1fccd161a018b4e53810e8334d92715acc976cb442705bf972ca396fabd/pure_interface-3.5.2.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "022cc0ddd3bfaf4cea23cc811e5f15ff", "sha256": "bc4e09b60dd415ce4f02a787d8a9633fb0e1ffb39dc4e017de6a7865b4efdb4d"}, "downloads": -1, "filename": "pure_interface-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "022cc0ddd3bfaf4cea23cc811e5f15ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 19760, "upload_time": "2020-01-27T20:19:45", "upload_time_iso_8601": "2020-01-27T20:19:45.609227Z", "url": "https://files.pythonhosted.org/packages/aa/e8/21d089d4e8b8b429cb9bfc2e4751eda43d0d51b21622a8f93d1270453714/pure_interface-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58d535f87ece9edfb20f6216b4e4c62a", "sha256": "382c9ee85c78f680798179c0dbc4e404622df064e4bbf55b3237d4f27e164ce3"}, "downloads": -1, "filename": "pure_interface-4.0.0.tar.gz", "has_sig": false, "md5_digest": "58d535f87ece9edfb20f6216b4e4c62a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 30742, "upload_time": "2020-01-27T20:19:47", "upload_time_iso_8601": "2020-01-27T20:19:47.909692Z", "url": "https://files.pythonhosted.org/packages/92/8f/8d7ba1166f5466b47fa338d27179f0b69ffc390c42abe14a6ecd205dc152/pure_interface-4.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "022cc0ddd3bfaf4cea23cc811e5f15ff", "sha256": "bc4e09b60dd415ce4f02a787d8a9633fb0e1ffb39dc4e017de6a7865b4efdb4d"}, "downloads": -1, "filename": "pure_interface-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "022cc0ddd3bfaf4cea23cc811e5f15ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 19760, "upload_time": "2020-01-27T20:19:45", "upload_time_iso_8601": "2020-01-27T20:19:45.609227Z", "url": "https://files.pythonhosted.org/packages/aa/e8/21d089d4e8b8b429cb9bfc2e4751eda43d0d51b21622a8f93d1270453714/pure_interface-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58d535f87ece9edfb20f6216b4e4c62a", "sha256": "382c9ee85c78f680798179c0dbc4e404622df064e4bbf55b3237d4f27e164ce3"}, "downloads": -1, "filename": "pure_interface-4.0.0.tar.gz", "has_sig": false, "md5_digest": "58d535f87ece9edfb20f6216b4e4c62a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 30742, "upload_time": "2020-01-27T20:19:47", "upload_time_iso_8601": "2020-01-27T20:19:47.909692Z", "url": "https://files.pythonhosted.org/packages/92/8f/8d7ba1166f5466b47fa338d27179f0b69ffc390c42abe14a6ecd205dc152/pure_interface-4.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:22 2020"}