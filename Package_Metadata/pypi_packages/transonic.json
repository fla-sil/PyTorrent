{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Make your Python code fly at *transonic* speeds!\n================================================\n\n|release| |docs| |coverage| |travis| |appveyor| |sonarcloud|\n\n.. |release| image:: https://img.shields.io/pypi/v/transonic.svg\n   :target: https://pypi.python.org/pypi/transonic/\n   :alt: Latest version\n\n.. |docs| image:: https://readthedocs.org/projects/transonic/badge/?version=latest\n   :target: http://transonic.readthedocs.org\n   :alt: Documentation status\n\n.. |coverage| image:: https://codecov.io/bb/fluiddyn/transonic/branch/default/graph/badge.svg\n   :target: https://codecov.io/bb/fluiddyn/transonic/branch/default/\n   :alt: Code coverage\n\n.. |travis| image:: https://travis-ci.org/fluiddyn/transonic.svg?branch=master\n   :target: https://travis-ci.org/fluiddyn/transonic\n   :alt: Travis CI status\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/i99h00kp0jliel8t?svg=true\n   :target: https://ci.appveyor.com/project/fluiddyn/transonic\n   :alt: AppVeyor status\n\n.. |sonarcloud| image:: https://sonarcloud.io/api/project_badges/measure?project=fluiddyn_transonic&metric=alert_status\n   :target: https://sonarcloud.io/dashboard?id=fluiddyn_transonic\n   :alt: Quality Gate Status\n\n**Documentation**: https://transonic.readthedocs.io\n\nTransonic is a pure Python package (requiring Python >= 3.6) to easily\naccelerate modern Python-Numpy code with different accelerators (currently\n`Cython <https://cython.org/>`_, `Pythran\n<https://github.com/serge-sans-paille/pythran>`_ and `Numba\n<https://numba.pydata.org/>`_, but potentially later `Cupy\n<https://cupy.chainer.org/>`_, `PyTorch <https://pytorch.org/>`_, `JAX\n<https://github.com/google/jax>`_, `Weld <https://www.weld.rs/>`_, `Pyccel\n<https://github.com/pyccel/pyccel>`_, `Uarray\n<https://github.com/Quansight-Labs/uarray>`_, etc...).\n\n**The accelerators are not hard dependencies of Transonic:** Python codes using\nTransonic run fine without any accelerators installed (of course without\nspeedup)!\n\n.. |mybinder| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/fluiddyn/transonic/master?urlpath=lab/tree/doc/ipynb/executed\n   :alt: mybinder\n\nYou can try Transonic online by clicking this button: |mybinder|.\n\n.. warning ::\n\n  Transonic is still in an active development stage (see our `roadmap\n  <https://transonic.readthedocs.io/en/latest/roadmap.html>`_). Remarks and\n  suggestions are very welcome.\n\n  However, Transonic is now really usable, useful and used \"in production\" in\n  `FluidSim <https://bitbucket.org/fluiddyn/fluidsim>`_ and `FluidFFT\n  <https://bitbucket.org/fluiddyn/fluidfft>`_ (see examples for `blocks\n  <https://bitbucket.org/fluiddyn/fluidsim/src/default/fluidsim/base/time_stepping/pseudo_spect.py>`_,\n  `@boost\n  <https://bitbucket.org/fluiddyn/fluidfft/src/default/fluidfft/fft3d/operators.py>`_\n  and `@jit\n  <https://bitbucket.org/fluiddyn/fluidsim/src/default/fluidsim/solvers/plate2d/output/correlations_freq.py>`_).\n\n\nThe long-term project\n---------------------\n\n.. note ::\n\n  The context of the creation of Transonic is presented in these documents:\n\n  - `Transonic Vision <https://fluiddyn.bitbucket.io/transonic-vision.html>`_\n\n  - `Make your numerical Python code fly at transonic speed (EuroScipy 2019)\n    <http://www.legi.grenoble-inp.fr/people/Pierre.Augier/docs/ipynbslides/20190904-euroscipy-transonic/pres.slides.html#/>`_,\n\n  - `Overview of the Python HPC landscape and zoom on Transonic\n    <http://www.legi.grenoble-inp.fr/people/Pierre.Augier/docs/ipynbslides/20190319_PySciDataGre_transonic/pres_20190319_PySciDataGre_transonic.slides.html>`_.\n\nTransonic targets Python end-users and library developers.\n\nIt is based on the following principles:\n\n- We'd like to write scientific / computing applications / libraries with\n  pythonic, readable, modern code (Python >= 3.6).\n\n- In some cases, Python-Numpy is too slow. However, there are tools to\n  accelerate such Python-Numpy code which lead to very good performances!\n\n- Let's try to write universal code which express what we want to compute and\n  not the special hacks we want to use to make it fast. We just need nice ways\n  to express that a function, a method or a block of code has to be accelerated\n  (and how it has to be accelerated). We'd like to be able to do this in a\n  pythonic way, with decorators and context managers.\n\n- There are many tools to accelerate Python-Numpy code! Let's avoid writting\n  code specialized for only one of these tools.\n\n- Let's try to keep the code as it would be written without acceleration. For\n  example, with Transonic, we are able to accelerate (simple) methods of\n  classes even though some accelerators don't support classes.\n\n- Let's accelerate/compile only what needs to be accelerated, i.e. only the\n  bottlenecks. Python and its interpreters are good for the rest. In most\n  cases, the benefice of writting big compiled extensions (with Cython or in\n  other languages) is negligible.\n\n- Adding types is sometimes necessary. In modern Python, we have nice syntaxes\n  for type annotations! Let's use them.\n\n- Ahead-of-time (AOT) and just-in-time (JIT) compilation modes are both useful.\n  We'd like to have a nice, simple and unified API for these two modes.\n\n  * AOT is useful to be able to distribute compiled packages and in some cases,\n    more optimizations can be applied.\n\n  * JIT is simpler to use (no need for type annotations) and optimizations can\n    be more hardware specific.\n\n  Note that with Transonic, AOT compilers (Pythran and Cython) can be used as\n  JIT compilers (with a cache mechanism).\n\nTo summarize, a **strategy to quickly develop a very efficient scientific\napplication/library** with Python could be:\n\n1. Use modern Python coding, standard Numpy/Scipy for the computations and all\n   the cool libraries you want.\n\n2. Profile your applications on real cases, detect the bottlenecks and apply\n   standard optimizations with Numpy.\n\n3. Add few lines of Transonic to compile the hot spots.\n\nWhat we have now\n----------------\n\nWe start to have a good API to accelerate Python-Numpy code (functions, methods\nand blocks of code). The default Transonic backend uses Pythran and works well.\n`Here, we explain why Pythran is so great for Python users and why Transonic is\ngreat for Pythran users\n<https://transonic.readthedocs.io/en/latest/backends/pythran.html>`_. There are\nalso (more experimental) backends for Cython and Numba.\n\n.. note ::\n\n  Transonic can be used in libraries and applications using MPI (as\n  `FluidSim <https://bitbucket.org/fluiddyn/fluidsim>`_).\n\n.. _compile-at-import :\n\nInstallation and configuration\n------------------------------\n\n.. code :: bash\n\n   pip install transonic\n\nTransonic is sensible to environment variables:\n\n- :code:`TRANSONIC_DIR` can be set to control where the cached files are\n  saved.\n\n- :code:`TRANSONIC_DEBUG` triggers a verbose mode.\n\n- :code:`TRANSONIC_COMPILE_AT_IMPORT` can be set to enable a mode for which\n  Transonic compiles at import time the Pythran file associated with the\n  imported module. This behavior can also be triggered programmatically\n  by using the function :code:`set_compile_at_import`.\n\n- :code:`TRANSONIC_NO_REPLACE` can be set to disable all code replacements.\n  This is useful to compare execution times and when measuring code coverage.\n\n- :code:`TRANSONIC_COMPILE_JIT` can be set to false to disable the\n  compilation of jited functions. This can be useful for unittests.\n\n- :code:`TRANSONIC_BACKEND` to choose between the supported backends. The\n  default backend \"pythran\" is quite robust. There are now 3 other backends:\n  \"cython\", \"numba\" and \"python\" (prototypes).\n\n\nA short tour of Transonic public API\n------------------------------------\n\nTransonic supports both ahead-of-time and just-in-time compilations. When using\nthe API for AOT compilation, the files need to be \"compiled_\" to get speedup.\n\nDecorator :code:`boost` and command :code:`# transonic def`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code :: python\n\n    import h5py\n    import mpi4py\n\n    from transonic import boost\n\n    # transonic def myfunc(int, float)\n\n    @boost\n    def myfunc(a, b):\n        return a * b\n\n    ...\n\nMost of this code looks familiar to Pythran users. The differences:\n\n- One can use (for example) h5py and mpi4py (of course not in the Pythran\n  functions).\n\n- :code:`# transonic def` instead of :code:`# pythran export`.\n\n- A tiny bit of Python... The decorator :code:`@boost` replaces the\n  Python function by the compiled function if Transonic has been used to\n  produced the associated Pythran/Cython/Numba file.\n\n\nWith type annotations\n~~~~~~~~~~~~~~~~~~~~~\n\nThe previous example can be rewritten without :code:`# transonic def`. It is\nthe recommended syntaxes for ahead-of-time compilation:\n\n.. code :: python\n\n    import numpy as np\n    import h5py\n\n    from transonic import boost\n\n    @boost\n    def myfunc(a: float, d: int):\n        return a * np.ones(d * [10])\n\n    ...\n\nNice (shorter and clearer than with the Pythran command) but very limited (only\nsimple types and only one signature)... So one can also elegantly define many\nsignatures using Transonic types and/or Pythran types in strings (see `these\nexamples\n<https://transonic.readthedocs.io/en/latest/examples/type_hints.html>`_ and our\nAPI to define types (and fused types) in `transonic.typing\n<https://transonic.readthedocs.io/en/latest/generated/transonic.typing.html>`_).\n\nMoreover, it is possible to add more signatures with :code:`# transonic def`\ncommands.\n\n\nTargetting Cython\n~~~~~~~~~~~~~~~~~\n\nCython needs to know the types of local variables to really speedup the\ncomputations.  Transonic is able to write fast Cython from such code:\n\n.. code :: python\n\n    from transonic import boost\n\n    @boost(boundscheck=False, wraparound=False)\n    def mysum(arr: \"float[:]\"):\n        i: int\n        n: int = arr.shape[0]\n        result: float = 0.0\n        for i in range(n):\n            result += arr[i]\n        return result\n\n.. warning ::\n\n    When targetting Cython, **don't use multi-signatures and prefer fused\n    types**. Cython itself does not support multi-signatures. Since these 2\n    mechanisms are so different, our Cython backend does not even try to\n    support multi-signatures. You'll get a warning if you use the Cython\n    backend with multi-signatures.\n\nJust-In-Time compilation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWith Transonic, one can use the Ahead-Of-Time compilers Pythran and Cython in a\nJust-In-Time mode. It is really the **easiest way to speedup a function with\nPythran**, just by adding a decorator! And it also works `in notebooks\n<https://transonic.readthedocs.io/en/latest/ipynb/executed/demo_jit.html>`_!\n\n.. code :: python\n\n    import numpy as np\n\n    from transonic import jit\n\n    def func0(a, b):\n        return a + b\n\n    @jit\n    def func1(a, b):\n        return np.exp(a) * b * func0(a, b)\n\nNote that the :code:`@jit` decorator takes into account type hints (see\n`the example in the documentation\n<https://transonic.readthedocs.io/en/latest/examples/using_jit.html>`_).\n\n**Implementation details for just-in-time compilation:** A Pythran file is\nproduced for each \"JITed\" function (function decorated with :code:`@jit`). The\nfile is compiled at the first call of the function and the compiled version is\nused as soon as it is ready. The warmup can be quite long but the compiled\nversion is saved and can be reused (without warmup!) by another process.\n\nDefine accelerated blocks\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTransonic blocks can be used with classes and more generally in functions\nwith lines that cannot be compiled by Pythran.\n\n.. code :: python\n\n    from transonic import Transonic\n\n    ts = Transonic()\n\n    class MyClass:\n\n        ...\n\n        def func(self, n):\n            a, b = self.something_that_cannot_be_pythranized()\n\n            if ts.is_transpiled:\n                result = ts.use_block(\"name_block\")\n            else:\n                # transonic block (\n                #     float a, b;\n                #     int n\n                # )\n\n                # transonic block (\n                #     complex a, b;\n                #     int n\n                # )\n\n                result = a**n + b**n\n\n            return self.another_func_that_cannot_be_pythranized(result)\n\nFor blocks, we need a little bit more of Python.\n\n- At import time, we have :code:`ts = Transonic()`, which detects which\n  Pythran module should be used and imports it. This is done at import time\n  since we want to be very fast at run time.\n\n- In the function, we define a block with three lines of Python and special\n  Pythran annotations (:code:`# transonic block`). The 3 lines of Python are used\n  (i) at run time to choose between the two branches (:code:`is_transpiled` or\n  not) and (ii) at compile time to detect the blocks.\n\nNote that the annotations in the command :code:`# transonic block` are\ndifferent (and somehow easier to write) than in the standard command :code:`#\npythran export`.\n\n`Blocks can also be defined with type hints!\n<https://transonic.readthedocs.io/en/latest/examples/blocks.html>`_\n\n.. warning ::\n\n   I'm not satisfied by the syntax for blocks so I (PA) proposed an\n   alternative syntax in `issue #29\n   <https://bitbucket.org/fluiddyn/fluidpythran/issues/29>`_.\n\nPython classes: :code:`@boost` and :code:`@jit` for methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor simple methods **only using attributes**, we can write:\n\n.. code :: python\n\n    import numpy as np\n\n    from transonic import boost\n\n    A = \"float[:]\"\n\n    @boost\n    class MyClass:\n\n        arr0: A\n        arr1: A\n\n        def __init__(self, n):\n            self.arr0 = np.zeros(n)\n            self.arr1 = np.zeros(n)\n\n        @boost\n        def compute(self, alpha: float):\n            return (self.arr0 + self.arr1).mean() ** alpha\n\n.. warning ::\n\n   Calling another method in a boosted method is not yet supported!\n\nMore examples on how to use Transonic for Object Oriented Programing are given\n`here <https://transonic.readthedocs.io/en/latest/examples/methods.html>`__.\n\n\n.. _compiled:\n\nMake the Pythran/Cython/Numba files and compile the extensions\n--------------------------------------------------------------\n\nThere is a command-line tool :code:`transonic` which makes the associated\nPythran/Cython/Numba files from a Python file. For example one can run:\n\n.. code :: bash\n\n    # Pythran is the default backend\n    transonic myfile.py -af \"-march=native -DUSE_XSIMD -Ofast\"\n    # Now using Cython\n    transonic myfile.py -b cython\n\nBy default and if the Python compiler is available, the produced files are\ncompiled.\n\nThere is also a function :code:`make_backend_files` that can be used in a\nsetup.py like this:\n\n.. code :: python\n\n    from pathlib import Path\n\n    from transonic.dist import make_backend_files\n\n    here = Path(__file__).parent.absolute()\n\n    paths = [\"fluidsim/base/time_stepping/pseudo_spect.py\"]\n    make_backend_files([here / path for path in paths])\n\nNote that :code:`make_backend_files` does not compile the backend files. The\ncompilation has to be done after the call of this function (see for example how\nit is done in the `example packages\n<https://bitbucket.org/fluiddyn/transonic/src/default/doc/examples/packages/>`_\nor in `fluidsim's setup.py\n<https://bitbucket.org/fluiddyn/fluidsim/src/default/setup.py>`_).\n\nLicense\n-------\n\nTransonic is distributed under the CeCILL-B_ License, a BSD compatible\nfrench license.\n\n.. _CeCILL-B: http://www.cecill.info/index.en.html\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "pythran", "license": "CeCILL-B License", "maintainer": "", "maintainer_email": "", "name": "transonic", "package_url": "https://pypi.org/project/transonic/", "platform": "", "project_url": "https://pypi.org/project/transonic/", "project_urls": null, "release_url": "https://pypi.org/project/transonic/0.4.2/", "requires_dist": ["astunparse", "gast", "beniget", "autopep8", "numpy", "sphinx ; extra == 'dev'", "sphinx-rtd-theme ; extra == 'dev'", "numpydoc ; extra == 'dev'", "ipython ; extra == 'dev'", "jupyter ; extra == 'dev'", "nbsphinx ; extra == 'dev'", "recommonmark ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pytest-xdist ; extra == 'dev'", "pythran ; extra == 'dev'", "cython ; extra == 'dev'", "black ; extra == 'dev'", "mpi4py ; extra == 'dev'", "flake8 ; extra == 'dev'", "pylint ; extra == 'dev'", "sphinx ; extra == 'doc'", "sphinx-rtd-theme ; extra == 'doc'", "numpydoc ; extra == 'doc'", "ipython ; extra == 'doc'", "jupyter ; extra == 'doc'", "nbsphinx ; extra == 'doc'", "recommonmark ; extra == 'doc'", "mpi4py ; extra == 'mpi'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-xdist ; extra == 'test'", "pythran ; extra == 'test'", "cython ; extra == 'test'", "black ; extra == 'test'", "mpi4py ; extra == 'test'"], "requires_python": ">= 3.6", "summary": "Make your Python code fly at transonic speeds!", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/transonic/\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc17c324536770aafaef39c5fb63183829e3abaa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7472616e736f6e69632e737667\"></a> <a href=\"http://transonic.readthedocs.org\" rel=\"nofollow\"><img alt=\"Documentation status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c52bce2d9867d19803322a4c91e9d939cad6e79b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7472616e736f6e69632f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://codecov.io/bb/fluiddyn/transonic/branch/default/\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de7846ca02ec562a35d49930d3e9be48aec7477a/68747470733a2f2f636f6465636f762e696f2f62622f666c75696464796e2f7472616e736f6e69632f6272616e63682f64656661756c742f67726170682f62616467652e737667\"></a> <a href=\"https://travis-ci.org/fluiddyn/transonic\" rel=\"nofollow\"><img alt=\"Travis CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/228f6c88443250a23bf105ad75458955af01bc59/68747470733a2f2f7472617669732d63692e6f72672f666c75696464796e2f7472616e736f6e69632e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://ci.appveyor.com/project/fluiddyn/transonic\" rel=\"nofollow\"><img alt=\"AppVeyor status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45bde4a6c34cf2f69d4fcba728341ca629edb57c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6939396830306b70306a6c69656c38743f7376673d74727565\"></a> <a href=\"https://sonarcloud.io/dashboard?id=fluiddyn_transonic\" rel=\"nofollow\"><img alt=\"Quality Gate Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8aed7af99705a457a3b06f202cd0a25fb56f665c/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d666c75696464796e5f7472616e736f6e6963266d65747269633d616c6572745f737461747573\"></a></p>\n<p><strong>Documentation</strong>: <a href=\"https://transonic.readthedocs.io\" rel=\"nofollow\">https://transonic.readthedocs.io</a></p>\n<p>Transonic is a pure Python package (requiring Python &gt;= 3.6) to easily\naccelerate modern Python-Numpy code with different accelerators (currently\n<a href=\"https://cython.org/\" rel=\"nofollow\">Cython</a>, <a href=\"https://github.com/serge-sans-paille/pythran\" rel=\"nofollow\">Pythran</a> and <a href=\"https://numba.pydata.org/\" rel=\"nofollow\">Numba</a>, but potentially later <a href=\"https://cupy.chainer.org/\" rel=\"nofollow\">Cupy</a>, <a href=\"https://pytorch.org/\" rel=\"nofollow\">PyTorch</a>, <a href=\"https://github.com/google/jax\" rel=\"nofollow\">JAX</a>, <a href=\"https://www.weld.rs/\" rel=\"nofollow\">Weld</a>, <a href=\"https://github.com/pyccel/pyccel\" rel=\"nofollow\">Pyccel</a>, <a href=\"https://github.com/Quansight-Labs/uarray\" rel=\"nofollow\">Uarray</a>, etc\u2026).</p>\n<p><strong>The accelerators are not hard dependencies of Transonic:</strong> Python codes using\nTransonic run fine without any accelerators installed (of course without\nspeedup)!</p>\n<p>You can try Transonic online by clicking this button: <a href=\"https://mybinder.org/v2/gh/fluiddyn/transonic/master?urlpath=lab/tree/doc/ipynb/executed\" rel=\"nofollow\"><img alt=\"mybinder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a>.</p>\n<div>\n<p>Warning</p>\n<p>Transonic is still in an active development stage (see our <a href=\"https://transonic.readthedocs.io/en/latest/roadmap.html\" rel=\"nofollow\">roadmap</a>). Remarks and\nsuggestions are very welcome.</p>\n<p>However, Transonic is now really usable, useful and used \u201cin production\u201d in\n<a href=\"https://bitbucket.org/fluiddyn/fluidsim\" rel=\"nofollow\">FluidSim</a> and <a href=\"https://bitbucket.org/fluiddyn/fluidfft\" rel=\"nofollow\">FluidFFT</a> (see examples for <a href=\"https://bitbucket.org/fluiddyn/fluidsim/src/default/fluidsim/base/time_stepping/pseudo_spect.py\" rel=\"nofollow\">blocks</a>,\n<a href=\"https://bitbucket.org/fluiddyn/fluidfft/src/default/fluidfft/fft3d/operators.py\" rel=\"nofollow\">@boost</a>\nand <a href=\"https://bitbucket.org/fluiddyn/fluidsim/src/default/fluidsim/solvers/plate2d/output/correlations_freq.py\" rel=\"nofollow\">@jit</a>).</p>\n</div>\n<div id=\"the-long-term-project\">\n<h2>The long-term project</h2>\n<div>\n<p>Note</p>\n<p>The context of the creation of Transonic is presented in these documents:</p>\n<ul>\n<li><a href=\"https://fluiddyn.bitbucket.io/transonic-vision.html\" rel=\"nofollow\">Transonic Vision</a></li>\n<li><a href=\"http://www.legi.grenoble-inp.fr/people/Pierre.Augier/docs/ipynbslides/20190904-euroscipy-transonic/pres.slides.html#/\" rel=\"nofollow\">Make your numerical Python code fly at transonic speed (EuroScipy 2019)</a>,</li>\n<li><a href=\"http://www.legi.grenoble-inp.fr/people/Pierre.Augier/docs/ipynbslides/20190319_PySciDataGre_transonic/pres_20190319_PySciDataGre_transonic.slides.html\" rel=\"nofollow\">Overview of the Python HPC landscape and zoom on Transonic</a>.</li>\n</ul>\n</div>\n<p>Transonic targets Python end-users and library developers.</p>\n<p>It is based on the following principles:</p>\n<ul>\n<li><p>We\u2019d like to write scientific / computing applications / libraries with\npythonic, readable, modern code (Python &gt;= 3.6).</p>\n</li>\n<li><p>In some cases, Python-Numpy is too slow. However, there are tools to\naccelerate such Python-Numpy code which lead to very good performances!</p>\n</li>\n<li><p>Let\u2019s try to write universal code which express what we want to compute and\nnot the special hacks we want to use to make it fast. We just need nice ways\nto express that a function, a method or a block of code has to be accelerated\n(and how it has to be accelerated). We\u2019d like to be able to do this in a\npythonic way, with decorators and context managers.</p>\n</li>\n<li><p>There are many tools to accelerate Python-Numpy code! Let\u2019s avoid writting\ncode specialized for only one of these tools.</p>\n</li>\n<li><p>Let\u2019s try to keep the code as it would be written without acceleration. For\nexample, with Transonic, we are able to accelerate (simple) methods of\nclasses even though some accelerators don\u2019t support classes.</p>\n</li>\n<li><p>Let\u2019s accelerate/compile only what needs to be accelerated, i.e. only the\nbottlenecks. Python and its interpreters are good for the rest. In most\ncases, the benefice of writting big compiled extensions (with Cython or in\nother languages) is negligible.</p>\n</li>\n<li><p>Adding types is sometimes necessary. In modern Python, we have nice syntaxes\nfor type annotations! Let\u2019s use them.</p>\n</li>\n<li><p>Ahead-of-time (AOT) and just-in-time (JIT) compilation modes are both useful.\nWe\u2019d like to have a nice, simple and unified API for these two modes.</p>\n<ul>\n<li>AOT is useful to be able to distribute compiled packages and in some cases,\nmore optimizations can be applied.</li>\n<li>JIT is simpler to use (no need for type annotations) and optimizations can\nbe more hardware specific.</li>\n</ul>\n<p>Note that with Transonic, AOT compilers (Pythran and Cython) can be used as\nJIT compilers (with a cache mechanism).</p>\n</li>\n</ul>\n<p>To summarize, a <strong>strategy to quickly develop a very efficient scientific\napplication/library</strong> with Python could be:</p>\n<ol>\n<li>Use modern Python coding, standard Numpy/Scipy for the computations and all\nthe cool libraries you want.</li>\n<li>Profile your applications on real cases, detect the bottlenecks and apply\nstandard optimizations with Numpy.</li>\n<li>Add few lines of Transonic to compile the hot spots.</li>\n</ol>\n</div>\n<div id=\"what-we-have-now\">\n<h2>What we have now</h2>\n<p>We start to have a good API to accelerate Python-Numpy code (functions, methods\nand blocks of code). The default Transonic backend uses Pythran and works well.\n<a href=\"https://transonic.readthedocs.io/en/latest/backends/pythran.html\" rel=\"nofollow\">Here, we explain why Pythran is so great for Python users and why Transonic is\ngreat for Pythran users</a>. There are\nalso (more experimental) backends for Cython and Numba.</p>\n<div>\n<p>Note</p>\n<p>Transonic can be used in libraries and applications using MPI (as\n<a href=\"https://bitbucket.org/fluiddyn/fluidsim\" rel=\"nofollow\">FluidSim</a>).</p>\n</div>\n</div>\n<div id=\"installation-and-configuration\">\n<span id=\"compile-at-import\"></span><h2>Installation and configuration</h2>\n<pre>pip install transonic\n</pre>\n<p>Transonic is sensible to environment variables:</p>\n<ul>\n<li><code>TRANSONIC_DIR</code> can be set to control where the cached files are\nsaved.</li>\n<li><code>TRANSONIC_DEBUG</code> triggers a verbose mode.</li>\n<li><code>TRANSONIC_COMPILE_AT_IMPORT</code> can be set to enable a mode for which\nTransonic compiles at import time the Pythran file associated with the\nimported module. This behavior can also be triggered programmatically\nby using the function <code>set_compile_at_import</code>.</li>\n<li><code>TRANSONIC_NO_REPLACE</code> can be set to disable all code replacements.\nThis is useful to compare execution times and when measuring code coverage.</li>\n<li><code>TRANSONIC_COMPILE_JIT</code> can be set to false to disable the\ncompilation of jited functions. This can be useful for unittests.</li>\n<li><code>TRANSONIC_BACKEND</code> to choose between the supported backends. The\ndefault backend \u201cpythran\u201d is quite robust. There are now 3 other backends:\n\u201ccython\u201d, \u201cnumba\u201d and \u201cpython\u201d (prototypes).</li>\n</ul>\n</div>\n<div id=\"a-short-tour-of-transonic-public-api\">\n<h2>A short tour of Transonic public API</h2>\n<p>Transonic supports both ahead-of-time and just-in-time compilations. When using\nthe API for AOT compilation, the files need to be \u201c<a href=\"#compiled\" rel=\"nofollow\">compiled</a>\u201d to get speedup.</p>\n<div id=\"decorator-boost-and-command-transonic-def\">\n<h3>Decorator <code>boost</code> and command <code># transonic def</code></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mpi4py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transonic</span> <span class=\"kn\">import</span> <span class=\"n\">boost</span>\n\n<span class=\"c1\"># transonic def myfunc(int, float)</span>\n\n<span class=\"nd\">@boost</span>\n<span class=\"k\">def</span> <span class=\"nf\">myfunc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n\n<span class=\"o\">...</span>\n</pre>\n<p>Most of this code looks familiar to Pythran users. The differences:</p>\n<ul>\n<li>One can use (for example) h5py and mpi4py (of course not in the Pythran\nfunctions).</li>\n<li><code># transonic def</code> instead of <code># pythran export</code>.</li>\n<li>A tiny bit of Python\u2026 The decorator <code>@boost</code> replaces the\nPython function by the compiled function if Transonic has been used to\nproduced the associated Pythran/Cython/Numba file.</li>\n</ul>\n</div>\n<div id=\"with-type-annotations\">\n<h3>With type annotations</h3>\n<p>The previous example can be rewritten without <code># transonic def</code>. It is\nthe recommended syntaxes for ahead-of-time compilation:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transonic</span> <span class=\"kn\">import</span> <span class=\"n\">boost</span>\n\n<span class=\"nd\">@boost</span>\n<span class=\"k\">def</span> <span class=\"nf\">myfunc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n\n<span class=\"o\">...</span>\n</pre>\n<p>Nice (shorter and clearer than with the Pythran command) but very limited (only\nsimple types and only one signature)\u2026 So one can also elegantly define many\nsignatures using Transonic types and/or Pythran types in strings (see <a href=\"https://transonic.readthedocs.io/en/latest/examples/type_hints.html\" rel=\"nofollow\">these\nexamples</a> and our\nAPI to define types (and fused types) in <a href=\"https://transonic.readthedocs.io/en/latest/generated/transonic.typing.html\" rel=\"nofollow\">transonic.typing</a>).</p>\n<p>Moreover, it is possible to add more signatures with <code># transonic def</code>\ncommands.</p>\n</div>\n<div id=\"targetting-cython\">\n<h3>Targetting Cython</h3>\n<p>Cython needs to know the types of local variables to really speedup the\ncomputations.  Transonic is able to write fast Cython from such code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transonic</span> <span class=\"kn\">import</span> <span class=\"n\">boost</span>\n\n<span class=\"nd\">@boost</span><span class=\"p\">(</span><span class=\"n\">boundscheck</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">wraparound</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mysum</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"s2\">\"float[:]\"</span><span class=\"p\">):</span>\n    <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<div>\n<p>Warning</p>\n<p>When targetting Cython, <strong>don\u2019t use multi-signatures and prefer fused\ntypes</strong>. Cython itself does not support multi-signatures. Since these 2\nmechanisms are so different, our Cython backend does not even try to\nsupport multi-signatures. You\u2019ll get a warning if you use the Cython\nbackend with multi-signatures.</p>\n</div>\n</div>\n<div id=\"just-in-time-compilation\">\n<h3>Just-In-Time compilation</h3>\n<p>With Transonic, one can use the Ahead-Of-Time compilers Pythran and Cython in a\nJust-In-Time mode. It is really the <strong>easiest way to speedup a function with\nPythran</strong>, just by adding a decorator! And it also works <a href=\"https://transonic.readthedocs.io/en/latest/ipynb/executed/demo_jit.html\" rel=\"nofollow\">in notebooks</a>!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transonic</span> <span class=\"kn\">import</span> <span class=\"n\">jit</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func0</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"nd\">@jit</span>\n<span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">func0</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>Note that the <code>@jit</code> decorator takes into account type hints (see\n<a href=\"https://transonic.readthedocs.io/en/latest/examples/using_jit.html\" rel=\"nofollow\">the example in the documentation</a>).</p>\n<p><strong>Implementation details for just-in-time compilation:</strong> A Pythran file is\nproduced for each \u201cJITed\u201d function (function decorated with <code>@jit</code>). The\nfile is compiled at the first call of the function and the compiled version is\nused as soon as it is ready. The warmup can be quite long but the compiled\nversion is saved and can be reused (without warmup!) by another process.</p>\n</div>\n<div id=\"define-accelerated-blocks\">\n<h3>Define accelerated blocks</h3>\n<p>Transonic blocks can be used with classes and more generally in functions\nwith lines that cannot be compiled by Pythran.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transonic</span> <span class=\"kn\">import</span> <span class=\"n\">Transonic</span>\n\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">Transonic</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">:</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">something_that_cannot_be_pythranized</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">is_transpiled</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">use_block</span><span class=\"p\">(</span><span class=\"s2\">\"name_block\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># transonic block (</span>\n            <span class=\"c1\">#     float a, b;</span>\n            <span class=\"c1\">#     int n</span>\n            <span class=\"c1\"># )</span>\n\n            <span class=\"c1\"># transonic block (</span>\n            <span class=\"c1\">#     complex a, b;</span>\n            <span class=\"c1\">#     int n</span>\n            <span class=\"c1\"># )</span>\n\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">**</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">**</span><span class=\"n\">n</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">another_func_that_cannot_be_pythranized</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>For blocks, we need a little bit more of Python.</p>\n<ul>\n<li>At import time, we have <code>ts = Transonic()</code>, which detects which\nPythran module should be used and imports it. This is done at import time\nsince we want to be very fast at run time.</li>\n<li>In the function, we define a block with three lines of Python and special\nPythran annotations (<code># transonic block</code>). The 3 lines of Python are used\n(i) at run time to choose between the two branches (<code>is_transpiled</code> or\nnot) and (ii) at compile time to detect the blocks.</li>\n</ul>\n<p>Note that the annotations in the command <code># transonic block</code> are\ndifferent (and somehow easier to write) than in the standard command <code>#\npythran export</code>.</p>\n<p><a href=\"https://transonic.readthedocs.io/en/latest/examples/blocks.html\" rel=\"nofollow\">Blocks can also be defined with type hints!</a></p>\n<div>\n<p>Warning</p>\n<p>I\u2019m not satisfied by the syntax for blocks so I (PA) proposed an\nalternative syntax in <a href=\"https://bitbucket.org/fluiddyn/fluidpythran/issues/29\" rel=\"nofollow\">issue #29</a>.</p>\n</div>\n</div>\n<div id=\"python-classes-boost-and-jit-for-methods\">\n<h3>Python classes: <code>@boost</code> and <code>@jit</code> for methods</h3>\n<p>For simple methods <strong>only using attributes</strong>, we can write:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transonic</span> <span class=\"kn\">import</span> <span class=\"n\">boost</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"s2\">\"float[:]\"</span>\n\n<span class=\"nd\">@boost</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">:</span>\n\n    <span class=\"n\">arr0</span><span class=\"p\">:</span> <span class=\"n\">A</span>\n    <span class=\"n\">arr1</span><span class=\"p\">:</span> <span class=\"n\">A</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arr0</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arr1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@boost</span>\n    <span class=\"k\">def</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arr0</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arr1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span> <span class=\"o\">**</span> <span class=\"n\">alpha</span>\n</pre>\n<div>\n<p>Warning</p>\n<p>Calling another method in a boosted method is not yet supported!</p>\n</div>\n<p>More examples on how to use Transonic for Object Oriented Programing are given\n<a href=\"https://transonic.readthedocs.io/en/latest/examples/methods.html\" rel=\"nofollow\">here</a>.</p>\n</div>\n</div>\n<div id=\"make-the-pythran-cython-numba-files-and-compile-the-extensions\">\n<span id=\"compiled\"></span><h2>Make the Pythran/Cython/Numba files and compile the extensions</h2>\n<p>There is a command-line tool <code>transonic</code> which makes the associated\nPythran/Cython/Numba files from a Python file. For example one can run:</p>\n<pre><span class=\"c1\"># Pythran is the default backend\n</span>transonic myfile.py -af <span class=\"s2\">\"-march=native -DUSE_XSIMD -Ofast\"</span>\n<span class=\"c1\"># Now using Cython\n</span>transonic myfile.py -b cython\n</pre>\n<p>By default and if the Python compiler is available, the produced files are\ncompiled.</p>\n<p>There is also a function <code>make_backend_files</code> that can be used in a\nsetup.py like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transonic.dist</span> <span class=\"kn\">import</span> <span class=\"n\">make_backend_files</span>\n\n<span class=\"n\">here</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">()</span>\n\n<span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"fluidsim/base/time_stepping/pseudo_spect.py\"</span><span class=\"p\">]</span>\n<span class=\"n\">make_backend_files</span><span class=\"p\">([</span><span class=\"n\">here</span> <span class=\"o\">/</span> <span class=\"n\">path</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">])</span>\n</pre>\n<p>Note that <code>make_backend_files</code> does not compile the backend files. The\ncompilation has to be done after the call of this function (see for example how\nit is done in the <a href=\"https://bitbucket.org/fluiddyn/transonic/src/default/doc/examples/packages/\" rel=\"nofollow\">example packages</a>\nor in <a href=\"https://bitbucket.org/fluiddyn/fluidsim/src/default/setup.py\" rel=\"nofollow\">fluidsim\u2019s setup.py</a>).</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Transonic is distributed under the <a href=\"http://www.cecill.info/index.en.html\" rel=\"nofollow\">CeCILL-B</a> License, a BSD compatible\nfrench license.</p>\n</div>\n\n          </div>"}, "last_serial": 6051965, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "c9b632bde4f7b990c2164e3e48772854", "sha256": "daa4b7f0cf2118847c5b9bd4c3da283f40dc2cd1abed47e36faadd1d109934b4"}, "downloads": -1, "filename": "transonic-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "c9b632bde4f7b990c2164e3e48772854", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 52248, "upload_time": "2019-02-07T16:36:14", "upload_time_iso_8601": "2019-02-07T16:36:14.097329Z", "url": "https://files.pythonhosted.org/packages/1c/55/9339af708b1a27c2f8344da70132ca2d1c592ac1ab464bc12048467b2249/transonic-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94809a03f5c17bc55756817019005097", "sha256": "1f62107c574f4c4a0039fb77f1bc420955d131e9731db73dee6df43ad01e20ec"}, "downloads": -1, "filename": "transonic-0.1.10.tar.gz", "has_sig": false, "md5_digest": "94809a03f5c17bc55756817019005097", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 191439, "upload_time": "2019-02-07T16:36:15", "upload_time_iso_8601": "2019-02-07T16:36:15.792870Z", "url": "https://files.pythonhosted.org/packages/0b/4a/a94a8e9542e8641466ec79650eacf59d34af6272aaf7f12f57ceb4e389f1/transonic-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "e625ce28a3ee192610e7e1f849b35f4e", "sha256": "e07f842566119db63251ba1376b0ac2eadae7e7c2456e77271accc4e1cc0ccd9"}, "downloads": -1, "filename": "transonic-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e625ce28a3ee192610e7e1f849b35f4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 52336, "upload_time": "2019-02-12T15:37:23", "upload_time_iso_8601": "2019-02-12T15:37:23.047311Z", "url": "https://files.pythonhosted.org/packages/91/42/e7ec2b981e6bacd2e2d637686abfdb83c5780e072ec1c5b390e4a5f4cec7/transonic-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b1e096ff0c97dfb925c0f2b80a35f3a", "sha256": "dc004f41c598ef3bcb9acd4f996cf96fdea6667f0c307afd7e712bcaea50f498"}, "downloads": -1, "filename": "transonic-0.1.11.tar.gz", "has_sig": false, "md5_digest": "0b1e096ff0c97dfb925c0f2b80a35f3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 192199, "upload_time": "2019-02-12T15:37:24", "upload_time_iso_8601": "2019-02-12T15:37:24.862483Z", "url": "https://files.pythonhosted.org/packages/53/b8/67bfb5799c91e87b792d950f3c71131fb902ead5bd1c3dbff511884bb158/transonic-0.1.11.tar.gz", "yanked": false}], "0.1.11.post0": [{"comment_text": "", "digests": {"md5": "60236cb935c8030a9a324ded882c74a7", "sha256": "48dbd4020b8e008a3f7c2c6caf6fed18836e59854ca3f286fcc39c926feaa475"}, "downloads": -1, "filename": "transonic-0.1.11.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "60236cb935c8030a9a324ded882c74a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 52439, "upload_time": "2019-02-12T16:36:22", "upload_time_iso_8601": "2019-02-12T16:36:22.028629Z", "url": "https://files.pythonhosted.org/packages/b4/a5/a6b723d689421bd8d9579ea29b033bae2f493b772548fd9ec5f6ac47a0a1/transonic-0.1.11.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "720b2485a4086be9593e986bf039caf1", "sha256": "b90c426a2266ae903b4db7fe8662711d3ffd265bcbb2b386f18e7badb4c11b5b"}, "downloads": -1, "filename": "transonic-0.1.11.post0.tar.gz", "has_sig": false, "md5_digest": "720b2485a4086be9593e986bf039caf1", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 192271, "upload_time": "2019-02-12T16:36:24", "upload_time_iso_8601": "2019-02-12T16:36:24.892827Z", "url": "https://files.pythonhosted.org/packages/62/7c/b0034e89429fc316d68889696f2ee369752da444c9a077a5216ed462c7c2/transonic-0.1.11.post0.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "e496a13a495a4742ec610ac346b82c31", "sha256": "5a1671f733cd798189bc2eac66026636bec8a5c33ea48d1a8d88276672c51f2a"}, "downloads": -1, "filename": "transonic-0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "e496a13a495a4742ec610ac346b82c31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 52402, "upload_time": "2019-03-06T06:30:07", "upload_time_iso_8601": "2019-03-06T06:30:07.786242Z", "url": "https://files.pythonhosted.org/packages/b5/71/aa79f658157b85757eb0c8434270822a52a9d40c7d444b2057e9dc2831dd/transonic-0.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d29ec5a3133b3d67272f42dbf0ba4bb9", "sha256": "41b3594598aaf6be2a6e663dfdeab7c47c3a4541630323074c3259bc7cc8d552"}, "downloads": -1, "filename": "transonic-0.1.12.tar.gz", "has_sig": false, "md5_digest": "d29ec5a3133b3d67272f42dbf0ba4bb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 195663, "upload_time": "2019-03-06T06:30:09", "upload_time_iso_8601": "2019-03-06T06:30:09.601311Z", "url": "https://files.pythonhosted.org/packages/38/c1/2f497510d695bd27047b941bc674ca3205e99b13fffc33d65c4d68dfcbaa/transonic-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "66c7a2955a8a10aa4cb79223ca8cbdb5", "sha256": "8b0c6030fc2132ef8ead952198a8e1481c32ce5006857d593094bd15db0f582e"}, "downloads": -1, "filename": "transonic-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "66c7a2955a8a10aa4cb79223ca8cbdb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 52534, "upload_time": "2019-03-06T22:09:15", "upload_time_iso_8601": "2019-03-06T22:09:15.658965Z", "url": "https://files.pythonhosted.org/packages/da/e8/01ab5a6d0684828db899c4acc0da3f77cce2c31a0752c18b9f4b73e949f1/transonic-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cb4931989289a4c59ec53b5beefdd20", "sha256": "055d05e668ae269df04464c4eec60c93809acda66364dd6641ed7f531e074632"}, "downloads": -1, "filename": "transonic-0.1.13.tar.gz", "has_sig": false, "md5_digest": "0cb4931989289a4c59ec53b5beefdd20", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 196653, "upload_time": "2019-03-06T22:09:17", "upload_time_iso_8601": "2019-03-06T22:09:17.546380Z", "url": "https://files.pythonhosted.org/packages/5d/a9/d4a850669987d3e410e51e1b90d5df945951e0ae79ba4cd3d6bd1f076b3e/transonic-0.1.13.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "7c68b2c93897e3fa084db7d5f11d675b", "sha256": "eb61f4ae71ba02b15207fbeb617e8c3c78a12ddcac10b72d53d039e1a49be757"}, "downloads": -1, "filename": "transonic-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7c68b2c93897e3fa084db7d5f11d675b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68702, "upload_time": "2019-01-08T14:50:50", "upload_time_iso_8601": "2019-01-08T14:50:50.508524Z", "url": "https://files.pythonhosted.org/packages/73/26/03e499f87210f3384a29b7048b362c9efccf2a0f205b04ab232bceac2f4a/transonic-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "09f50a7752ad0af3aac17b832e0c4850", "sha256": "5f796b6f477d266c4035a3e604ef0083f0a60bc3357b6d7f1f8d6940c8291dff"}, "downloads": -1, "filename": "transonic-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "09f50a7752ad0af3aac17b832e0c4850", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48479, "upload_time": "2019-01-19T22:23:55", "upload_time_iso_8601": "2019-01-19T22:23:55.339595Z", "url": "https://files.pythonhosted.org/packages/54/c0/e18b7da72cafd769570c1be75017e85a89ee40b2999282e87737caa93137/transonic-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "012c3e792606f2df045d247ac0427785", "sha256": "845c3f0ad6b0d8aed8dc106e451743ec61fa3d15c1cb87304258d5d32124b873"}, "downloads": -1, "filename": "transonic-0.1.8.tar.gz", "has_sig": false, "md5_digest": "012c3e792606f2df045d247ac0427785", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70830, "upload_time": "2019-01-19T22:23:57", "upload_time_iso_8601": "2019-01-19T22:23:57.220102Z", "url": "https://files.pythonhosted.org/packages/70/df/82fd51a2c84589d77d5a92fad025e2a3630da2cf4c2580cab013a4996ae9/transonic-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "e20f3d0248a8c556b1eefda82cdcf0eb", "sha256": "4f55e0f38fcc104515da69771dadc5e7734d4b0f36bd122928c3c58ee6d187f5"}, "downloads": -1, "filename": "transonic-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "e20f3d0248a8c556b1eefda82cdcf0eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 50648, "upload_time": "2019-01-29T21:50:32", "upload_time_iso_8601": "2019-01-29T21:50:32.780113Z", "url": "https://files.pythonhosted.org/packages/9e/d2/347902c07fcf012efb051bddc89a2d99063935ec2fcfcb00503c6fa07aac/transonic-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f01e9f4f87e31315d782c00a9cbc1d47", "sha256": "97dbe542d723d1cbe990f97309be9af81650f42366a8d11924e0935e70370787"}, "downloads": -1, "filename": "transonic-0.1.9.tar.gz", "has_sig": false, "md5_digest": "f01e9f4f87e31315d782c00a9cbc1d47", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 73389, "upload_time": "2019-01-29T21:50:34", "upload_time_iso_8601": "2019-01-29T21:50:34.502475Z", "url": "https://files.pythonhosted.org/packages/64/8d/f1f1d69760439982657042f56e1b621b4a8675210484954ef1e8f657b11c/transonic-0.1.9.tar.gz", "yanked": false}], "0.1.9.post0": [{"comment_text": "", "digests": {"md5": "c1deab5852723fe8844a92091000fac7", "sha256": "9204f455c4fb10ea9b0d317555815ef01d136c733290b6f2f95941bf69d018a6"}, "downloads": -1, "filename": "transonic-0.1.9.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "c1deab5852723fe8844a92091000fac7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 51439, "upload_time": "2019-01-30T19:01:16", "upload_time_iso_8601": "2019-01-30T19:01:16.131336Z", "url": "https://files.pythonhosted.org/packages/eb/df/bc5c195e7e2cda4c27bd0ed30bdb98bbc850686f9da7bc2cd968e93d8593/transonic-0.1.9.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2da53a983a0c75a44dad86a4bfffa11e", "sha256": "94bc39889300100602f03990a809731ee7ed57463f43c7c3a9ec510936b8c85b"}, "downloads": -1, "filename": "transonic-0.1.9.post0.tar.gz", "has_sig": false, "md5_digest": "2da53a983a0c75a44dad86a4bfffa11e", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 190275, "upload_time": "2019-01-30T19:01:17", "upload_time_iso_8601": "2019-01-30T19:01:17.750976Z", "url": "https://files.pythonhosted.org/packages/83/2a/e434f4c88dedca0f55710484edb2fe3203e72852db8b3836ee2803252117/transonic-0.1.9.post0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e9f0f1045999b33aae6094b52e04f047", "sha256": "76b088dda24ec81bd7e606cf110211dca49543d5adea898fda279359eab3178e"}, "downloads": -1, "filename": "transonic-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e9f0f1045999b33aae6094b52e04f047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 61874, "upload_time": "2019-03-15T08:27:58", "upload_time_iso_8601": "2019-03-15T08:27:58.190122Z", "url": "https://files.pythonhosted.org/packages/e6/9f/b342a616596e63ddc57d450027ba1566040f7c9075d1bd958eb2958e2172/transonic-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b5ca18e331c23b90eb3b73a0b90f2e7", "sha256": "70cab609ed66ae408e72923aad4929886e1ab2c49fe9f3db30fdbfeada64f8be"}, "downloads": -1, "filename": "transonic-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3b5ca18e331c23b90eb3b73a0b90f2e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 199260, "upload_time": "2019-03-15T08:28:00", "upload_time_iso_8601": "2019-03-15T08:28:00.166542Z", "url": "https://files.pythonhosted.org/packages/3e/da/beb67179b7e1be2e3d1ba0a7928925a75773e185f4a919e73cec4b6a04b5/transonic-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9f5bedda912b3bc0b1d1b12a7a1b591d", "sha256": "c4e6599e552d02ef282cab3d4f736e3ace1ac0e7697ec21fcd78931e7fb5044d"}, "downloads": -1, "filename": "transonic-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f5bedda912b3bc0b1d1b12a7a1b591d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 62327, "upload_time": "2019-04-11T14:31:38", "upload_time_iso_8601": "2019-04-11T14:31:38.665225Z", "url": "https://files.pythonhosted.org/packages/85/ae/a51a30f230399157586559cc6bd89df2fc4ffe2f8a0c7964978f10549e12/transonic-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "288078a768a41657705dbc1e04134f03", "sha256": "346e90e6d550a1a164ddc45cbbe346baf57e53cf66d8182c34de7455d8805c78"}, "downloads": -1, "filename": "transonic-0.2.1.tar.gz", "has_sig": false, "md5_digest": "288078a768a41657705dbc1e04134f03", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 199793, "upload_time": "2019-04-11T14:31:40", "upload_time_iso_8601": "2019-04-11T14:31:40.818312Z", "url": "https://files.pythonhosted.org/packages/33/90/087d4903e2818090fcca1592c10fc7128611b0bb5b73e89a6e274d439096/transonic-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d2fa797585d114587360af92d0591182", "sha256": "2a0bdad48a19a94b5c8b314205b1a835e35cd64ceeee9cc3e9e3085104837dd6"}, "downloads": -1, "filename": "transonic-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d2fa797585d114587360af92d0591182", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 62734, "upload_time": "2019-06-05T20:48:50", "upload_time_iso_8601": "2019-06-05T20:48:50.445856Z", "url": "https://files.pythonhosted.org/packages/d9/db/97e5affa5b5468f2879e98b04c7049884c9e0f950a4f24b1fb84918ad058/transonic-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a3d01f1adc794e838302cb46d0d311f", "sha256": "55c04357cb225a4f17a4f5e577f320cb0213dcf201c47d0b29967e11bd2d0581"}, "downloads": -1, "filename": "transonic-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7a3d01f1adc794e838302cb46d0d311f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 200431, "upload_time": "2019-06-05T20:48:53", "upload_time_iso_8601": "2019-06-05T20:48:53.264331Z", "url": "https://files.pythonhosted.org/packages/77/d2/c6b7e475397c3e1afb8bed1df8ce33711ff417d1cca5ede679ddbec2466a/transonic-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "8f54c779f89e4359809f9a80c05edd1f", "sha256": "0969b537edae27600a0e599a4947c822112e3c1e4bbd93986dcca0e227077614"}, "downloads": -1, "filename": "transonic-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8f54c779f89e4359809f9a80c05edd1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 63327, "upload_time": "2019-06-11T08:57:00", "upload_time_iso_8601": "2019-06-11T08:57:00.127958Z", "url": "https://files.pythonhosted.org/packages/e2/3a/fb60f13e845f6578b730f1308506174529e87352d06ce9fd731d234ad914/transonic-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8899576b33924ecf6728f007fa17d6a", "sha256": "d803e7f527d91c823c732ad492dc6581256646739e9421cfebeef18936c085ae"}, "downloads": -1, "filename": "transonic-0.2.3.tar.gz", "has_sig": false, "md5_digest": "f8899576b33924ecf6728f007fa17d6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 202294, "upload_time": "2019-06-11T08:57:02", "upload_time_iso_8601": "2019-06-11T08:57:02.733245Z", "url": "https://files.pythonhosted.org/packages/25/09/e047799b073741b8cf40b62d026ca356b2e535fc229868fb1ee09af50724/transonic-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "72fd797a2019c79fd9c7d2e35c74a596", "sha256": "459d3c33a66688f1fd434986022a1b54898018f3ab2aeed1495ae2b51ea74c65"}, "downloads": -1, "filename": "transonic-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "72fd797a2019c79fd9c7d2e35c74a596", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 67816, "upload_time": "2019-06-28T15:09:43", "upload_time_iso_8601": "2019-06-28T15:09:43.491880Z", "url": "https://files.pythonhosted.org/packages/01/45/20ef7552cc5cd45363704c8de13b62d56e5c5f1b7bf66623392eb4a9dac7/transonic-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56430bd794c807a890719f0ad101d862", "sha256": "7ed5f9d6e8b2eeeac5638453ebc90f5a4218799c31a6ba308843ca036840b6ad"}, "downloads": -1, "filename": "transonic-0.2.4.tar.gz", "has_sig": false, "md5_digest": "56430bd794c807a890719f0ad101d862", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 206892, "upload_time": "2019-06-28T15:09:45", "upload_time_iso_8601": "2019-06-28T15:09:45.761050Z", "url": "https://files.pythonhosted.org/packages/6a/4c/fe95ab1c41936e21284639437f6407755354c6a99f1191db7e52db6e9512/transonic-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1496e4b14d7b0faa7ea394e017c6a60a", "sha256": "bbfc48b47fc11bbe4e5819de1ff5a5a90c8827a12a7dfdcf2365d8ffb1adfa3c"}, "downloads": -1, "filename": "transonic-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1496e4b14d7b0faa7ea394e017c6a60a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 76100, "upload_time": "2019-08-17T08:16:43", "upload_time_iso_8601": "2019-08-17T08:16:43.766488Z", "url": "https://files.pythonhosted.org/packages/20/e1/7d6d800a97450449f66fd27e701908909d111463a8363b24b1b5efdd75ad/transonic-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "404e54a5fc4693e9b47104a5f5abfe35", "sha256": "f0534b5f70ab943d13d5c47ef1ee5b0988044fefe69af062495754cc5c2c5579"}, "downloads": -1, "filename": "transonic-0.3.0.tar.gz", "has_sig": false, "md5_digest": "404e54a5fc4693e9b47104a5f5abfe35", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 217909, "upload_time": "2019-08-17T08:16:48", "upload_time_iso_8601": "2019-08-17T08:16:48.480130Z", "url": "https://files.pythonhosted.org/packages/2d/bc/8a685bfd6e10aecc25d95c43908ff4c1b4448f7183681e919ad2c07e16f8/transonic-0.3.0.tar.gz", "yanked": false}], "0.3.0.post0": [{"comment_text": "", "digests": {"md5": "07e2de45499446880b0ca69945467735", "sha256": "1acfb8fb3e53a5c99047fe0720f4be781cd7bb691963b6e1ea1502595924f622"}, "downloads": -1, "filename": "transonic-0.3.0.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "07e2de45499446880b0ca69945467735", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 75636, "upload_time": "2019-08-20T23:20:48", "upload_time_iso_8601": "2019-08-20T23:20:48.017582Z", "url": "https://files.pythonhosted.org/packages/36/8d/0d284e15e4f161475c116b9b2351e81ea3178d0eff24d900e19ef41e9f51/transonic-0.3.0.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "590bd4e90bf285216c3cbcab044c45ec", "sha256": "3af2bfdd10ab7a3a9a7857e241041177f268272cb459247ae379fe83cdea8c22"}, "downloads": -1, "filename": "transonic-0.3.0.post0.tar.gz", "has_sig": false, "md5_digest": "590bd4e90bf285216c3cbcab044c45ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 217709, "upload_time": "2019-08-20T23:20:50", "upload_time_iso_8601": "2019-08-20T23:20:50.446784Z", "url": "https://files.pythonhosted.org/packages/69/57/054d6bfaae1d70023fa7520f2ef6f31e64534fe43abf46df114d8f82ce6b/transonic-0.3.0.post0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8cbf6bd0727e39a66cca2c1f50d89f11", "sha256": "62b21f04d8c5471d4c2cea22a53c5c59573fb0e46941b7ab32747ec3669dc447"}, "downloads": -1, "filename": "transonic-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8cbf6bd0727e39a66cca2c1f50d89f11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 83453, "upload_time": "2019-08-23T11:51:08", "upload_time_iso_8601": "2019-08-23T11:51:08.432032Z", "url": "https://files.pythonhosted.org/packages/95/7c/bcd421a671ffa47740acca1d7b3b0d3a31a4ce0f939e35bbe235118c9c64/transonic-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27cc88dbf860a4e3280b4df6700858fa", "sha256": "c88b4f7838aef3bc29889c76ae09f33e45f15c1e3755d3651d488c4917cc4605"}, "downloads": -1, "filename": "transonic-0.3.1.tar.gz", "has_sig": false, "md5_digest": "27cc88dbf860a4e3280b4df6700858fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 220900, "upload_time": "2019-08-23T11:51:10", "upload_time_iso_8601": "2019-08-23T11:51:10.620022Z", "url": "https://files.pythonhosted.org/packages/2e/6f/a075febcf246dfa4bf9c058e26b886e064baeb243f2e500ffc73b864c944/transonic-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "147150d91815c1340869d55f72a861d2", "sha256": "382236f68a320ad9df66e7139f6b1c0f6c2a3dcd49a68ef8c3fed54f50ccd468"}, "downloads": -1, "filename": "transonic-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "147150d91815c1340869d55f72a861d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 84257, "upload_time": "2019-08-30T19:54:06", "upload_time_iso_8601": "2019-08-30T19:54:06.011626Z", "url": "https://files.pythonhosted.org/packages/01/8c/6400dea96ccee6334edbb974f6b61b35747d6e5791f37bf9643678809426/transonic-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26d7a72c0f2f39caf6090157e17601ce", "sha256": "af0d1a6b0f6f1e8cadedefb5a7a6a8eae3b727541cc2ba1af682181bf96ffe1e"}, "downloads": -1, "filename": "transonic-0.3.2.tar.gz", "has_sig": false, "md5_digest": "26d7a72c0f2f39caf6090157e17601ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 222693, "upload_time": "2019-08-30T19:54:08", "upload_time_iso_8601": "2019-08-30T19:54:08.426797Z", "url": "https://files.pythonhosted.org/packages/12/f2/2458df2dbb45eb2329ead4d07b0d13d29cf14f51eb2119c579cd019297bb/transonic-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "c4e7087d4ce1ca91bc7237156dc24680", "sha256": "8297f83bc3b17f7988b24bbd9a9c2aa5bd1f4a8793adec6e66bb0c191f1ffc2b"}, "downloads": -1, "filename": "transonic-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c4e7087d4ce1ca91bc7237156dc24680", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 86173, "upload_time": "2019-08-30T15:39:41", "upload_time_iso_8601": "2019-08-30T15:39:41.943214Z", "url": "https://files.pythonhosted.org/packages/06/5c/39126866cc9eb67e5b594115964aab28209ab4aa251c86b690fd7b11febf/transonic-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2e406c4472e26de5badea561a3d1b98", "sha256": "e2bf59b1c683101f58a568ed1444bce78d29253c3f95fc5ed1d3ac64151c8a42"}, "downloads": -1, "filename": "transonic-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b2e406c4472e26de5badea561a3d1b98", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 226353, "upload_time": "2019-08-30T15:39:44", "upload_time_iso_8601": "2019-08-30T15:39:44.322795Z", "url": "https://files.pythonhosted.org/packages/29/61/61693d8811971e92af146086031a378abc73e5f6f0e7c103c5f7ca020a25/transonic-0.3.3.tar.gz", "yanked": false}], "0.3.3.post0": [{"comment_text": "", "digests": {"md5": "c4267a3baf768957cfbad7b2e7763be5", "sha256": "b5a5c67809b04b43cb7a6e12a8ac8f4e2bd558e990210a8dd40abaf4d376efcb"}, "downloads": -1, "filename": "transonic-0.3.3.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "c4267a3baf768957cfbad7b2e7763be5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 79763, "upload_time": "2019-09-21T19:34:59", "upload_time_iso_8601": "2019-09-21T19:34:59.570093Z", "url": "https://files.pythonhosted.org/packages/70/f9/c8a1467478dab1afed6cc78bb7b57b2df8be8a0e18cdc435abedc43d448c/transonic-0.3.3.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "260fd14b73118da60c8b61789ff45c71", "sha256": "55dbf21f34370713ecc8170ee878f95dcff7f480a2c5538ec8e7d3c921168021"}, "downloads": -1, "filename": "transonic-0.3.3.post0.tar.gz", "has_sig": false, "md5_digest": "260fd14b73118da60c8b61789ff45c71", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 226421, "upload_time": "2019-09-21T19:35:02", "upload_time_iso_8601": "2019-09-21T19:35:02.197460Z", "url": "https://files.pythonhosted.org/packages/80/95/dbb9857238ff783c1a28acd0351ee47f2f3219738c081028343fbdcd72c1/transonic-0.3.3.post0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3c2c86404e4b8d249e30661f408a79a4", "sha256": "76ed716d55027d5ebbb50aa6cce6434e186fcbf21db9a4aa800ca2b2ce71dbb0"}, "downloads": -1, "filename": "transonic-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c2c86404e4b8d249e30661f408a79a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 91769, "upload_time": "2019-09-22T17:58:51", "upload_time_iso_8601": "2019-09-22T17:58:51.432882Z", "url": "https://files.pythonhosted.org/packages/1f/14/0430c81c4ece957914aefe060a43d22a0ed131bf9d2c36b694f481fcbdbf/transonic-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "153bf4e81cdcebe9498bd3522dfcd10e", "sha256": "cf5bc4845b948b38ac4f8ab6417ed63f77d950398a1fe79cfe3c3b765133254f"}, "downloads": -1, "filename": "transonic-0.4.0.tar.gz", "has_sig": false, "md5_digest": "153bf4e81cdcebe9498bd3522dfcd10e", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 236847, "upload_time": "2019-09-22T17:58:54", "upload_time_iso_8601": "2019-09-22T17:58:54.096602Z", "url": "https://files.pythonhosted.org/packages/5a/af/db035575d4d5567f98d29dec1a290ac25175b486acffb725ab4bd9fecb94/transonic-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "b42473272f65a5c8f79f16dee782b09f", "sha256": "8f4ee0139eb7f5f22da06700b09ab3517e1802a667bbf630b8966e870272c3c9"}, "downloads": -1, "filename": "transonic-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b42473272f65a5c8f79f16dee782b09f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 87073, "upload_time": "2019-10-08T20:56:46", "upload_time_iso_8601": "2019-10-08T20:56:46.986216Z", "url": "https://files.pythonhosted.org/packages/d2/4e/9efc717f846c1481abaf99f30cb43822bd43243bedbf72cccb2e917176c1/transonic-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e44f7ff89ba607a3a12293ae14c651bc", "sha256": "3782a963ad526a0cc2910acd9e0b345a736ac82200341401ca911f11dd39297a"}, "downloads": -1, "filename": "transonic-0.4.1.tar.gz", "has_sig": false, "md5_digest": "e44f7ff89ba607a3a12293ae14c651bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 259324, "upload_time": "2019-10-08T20:56:49", "upload_time_iso_8601": "2019-10-08T20:56:49.698779Z", "url": "https://files.pythonhosted.org/packages/c0/ac/614c115203ba41c237c15d2271017f02dd4f1afc1ef40c4bc63628707203/transonic-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "61e94ca9ba3ff632c404a30272dfbf7c", "sha256": "a25a180b0178e7eb2bc425456580ca298ca2f04f5691176a679bbd4ad028d956"}, "downloads": -1, "filename": "transonic-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "61e94ca9ba3ff632c404a30272dfbf7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 88483, "upload_time": "2019-10-30T10:44:18", "upload_time_iso_8601": "2019-10-30T10:44:18.376662Z", "url": "https://files.pythonhosted.org/packages/e5/3d/5dfe6cb2ce25e2a0d08a23fc73e02cd37efb3bb3761cea01bf786f789560/transonic-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "215d2f37fce922bbc5c609e4d9842bab", "sha256": "e929a62fbb4d380212d4735c599e0adf20d6a4334200f508c66b29cb1fda336e"}, "downloads": -1, "filename": "transonic-0.4.2.tar.gz", "has_sig": false, "md5_digest": "215d2f37fce922bbc5c609e4d9842bab", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 266069, "upload_time": "2019-10-30T10:44:20", "upload_time_iso_8601": "2019-10-30T10:44:20.894277Z", "url": "https://files.pythonhosted.org/packages/46/67/68af37c91deb80e98cfba2c19b9d6fa00c614911ea4443dffb1dc596c491/transonic-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61e94ca9ba3ff632c404a30272dfbf7c", "sha256": "a25a180b0178e7eb2bc425456580ca298ca2f04f5691176a679bbd4ad028d956"}, "downloads": -1, "filename": "transonic-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "61e94ca9ba3ff632c404a30272dfbf7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 88483, "upload_time": "2019-10-30T10:44:18", "upload_time_iso_8601": "2019-10-30T10:44:18.376662Z", "url": "https://files.pythonhosted.org/packages/e5/3d/5dfe6cb2ce25e2a0d08a23fc73e02cd37efb3bb3761cea01bf786f789560/transonic-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "215d2f37fce922bbc5c609e4d9842bab", "sha256": "e929a62fbb4d380212d4735c599e0adf20d6a4334200f508c66b29cb1fda336e"}, "downloads": -1, "filename": "transonic-0.4.2.tar.gz", "has_sig": false, "md5_digest": "215d2f37fce922bbc5c609e4d9842bab", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 266069, "upload_time": "2019-10-30T10:44:20", "upload_time_iso_8601": "2019-10-30T10:44:20.894277Z", "url": "https://files.pythonhosted.org/packages/46/67/68af37c91deb80e98cfba2c19b9d6fa00c614911ea4443dffb1dc596c491/transonic-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:58 2020"}