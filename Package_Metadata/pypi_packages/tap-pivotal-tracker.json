{"info": {"author": "David Wallace", "author_email": "david.wallace@goodeggs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development"], "description": "# tap-pivotal-tracker\n[![PyPI version](https://badge.fury.io/py/tap-pivotal-tracker.svg)](https://badge.fury.io/py/tap-pivotal-tracker)\n![PyPI - Status](https://img.shields.io/pypi/status/tap-pivotal-tracker)\n[![Build Status](https://travis-ci.com/goodeggs/tap-pivotal-tracker.svg?branch=master)](https://travis-ci.com/goodeggs/tap-pivotal-tracker.svg?branch=master)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/tap-pivotal-tracker)\n\nA [Singer](https://www.singer.io/) tap for extracting data from the [Pivotal Tracker REST API](https://www.pivotaltracker.com/help/api/rest/v5#top).\n\n## Installation\n\nSince package dependencies tend to conflict between various taps and targets, Singer [recommends](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-singer-with-python) installing taps and targets into their own isolated virtual environments:\n\n### Install Pivotal Tracker Tap\n\n```bash\n$ python3 -m venv ~/.venvs/tap-pivotal-tracker\n$ source ~/.venvs/tap-pivotal-tracker/bin/activate\n$ pip3 install tap-pivotal-tracker\n$ deactivate\n```\n\n### Install Stitch Target (optional)\n\n```bash\n$ python3 -m venv ~/.venvs/target-stitch\n$ source ~/.venvs/target-stitch/bin/activate\n$ pip3 install target-stitch\n$ deactivate\n```\n\n## Configuration\n\nThe tap accepts a JSON-formatted configuration file as arguments. This configuration file has s single required field:\n\n1. `api_token`: A valid Pivotal Tracker API token.\n\nA token for the Pivotal Tracker API can be obtained following the instructions [here](https://www.pivotaltracker.com/help/articles/api_token/). A bare-bones tap configuration may file may look like the following:\n\n```json\n{\n  \"api_token\": \"foobar\",\n}\n```\n\n### Granular Stream Configuration\n\nAdditionally, you may specify more granular configurations for individual streams. Each key under a stream should represent a valid API request parameter for that endpoint. A more fleshed-out configuration file may look similar to the following:\n\n```json\n{\n  \"api_token\": \"foobar\",\n  \"api_version\": \"v5\",\n  \"streams\": {\n    \"stories\": {\n      \"created_after\": \"2019-01-01T00:00:00\",\n      \"limit\": 500,\n      \"with_story_type\": \"bug\",\n      \"with_state\": \"accepted\",\n      \"with_label\": \"data-team\"\n    },\n    \"project_memberships\": {\n      \"role\": \"owner\"\n    }\n  }\n}\n```\n\n## Streams\n\nThe current version of the tap syncs five distinct [Streams](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#streams):\n1. `Accounts`: [Endpoint Documentation](https://www.pivotaltracker.com/help/api/rest/v5#Account)\n2. `Labels`: [Endpoint Documentation](https://www.pivotaltracker.com/help/api/rest/v5#Labels)\n3. `Projects`: [Endpoint Documentation](https://www.pivotaltracker.com/help/api/rest/v5#Projects)\n4. `Project Memberships`: [Endpoint Documentation](https://www.pivotaltracker.com/help/api/rest/v5#Project_Memberships)\n5. `Stories`: [Endpoint Documentation](https://www.pivotaltracker.com/help/api/rest/v5#Stories)\n\n## Discovery\n\nSinger taps describe the data that a stream supports via a [Discovery](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode) process. You can run the Dayforce tap in Discovery mode by passing the `--discover` flag at runtime:\n\n```bash\n$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config=config/pivotal.config.json --discover\n```\n\nThe tap will generate a [Catalog](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#the-catalog) to stdout. To pass the Catalog to a file instead, simply redirect it to a file:s\n\n```bash\n$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config=config/pivotal.config.json --discover > catalog.json\n```\n\n## Sync to stdout\n\nRunning a tap in [Sync mode](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#sync-mode) will extract data from the various selected Streams. In order to run a tap in Sync mode and have messages emitted to stdout, pass a valid configuration file and catalog file:\n\n```bash\n$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config=config/pivotal.config.json --catalog=catalog.json\n```\n\nThe tap will emit occasional [Metric](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages), [Schema](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message), [Record](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#record-message), and [State messages](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message). You can persist State between runs by redirecting messages to a file:\n\n```bash\n$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config=config/pivotal.config.json --catalog=catalog.json >> state.json\n$ tail -1 state.json > state.json.tmp\n$ mv state.json.tmp state.json\n```\n\n## Sync to Stitch\n\nYou can also send the output of the tap to [Stitch Data](https://www.stitchdata.com/) for loading into the data warehouse. To do this, first create a JSON-formatted configuration for Stitch.\n\nAn example configuration file will look as follows:\n\n```json\n{\n  \"client_id\": 1234,\n  \"token\": \"foobar\",\n  \"small_batch_url\": \"https://api.stitchdata.com/v2/import/batch\",\n  \"big_batch_url\": \"https://api.stitchdata.com/v2/import/batch\",\n  \"batch_size_preferences\": {}\n}\n```\n\nOnce the configuration file is created, simply pipe the output of the tap to the Stitch Data target and supply the target with the newly created configuration file:\n\n```bash\n$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config=config/dayforce.config.json --catalog=catalog.json --state=state.json | ~/.venvs/target-stitch/bin/target-stitch --config=config/stitch.config.json >> state.json\n$ tail -1 state.json > state.json.tmp\n$ mv state.json.tmp state.json\n```\n\n## Contributing\n\nThe first step to contributing is getting a copy of the source code. First, [fork `tap-pivotal-tracker` on GitHub](https://github.com/goodeggs/tap-pivotal-tracker/fork). Then, `cd` into the directory where you want your copy of the source code to live and clone the source code:\n\n```bash\n$ git clone git@github.com:YourGitHubName/tap-pivotal-tracker.git\n```\n\nNow that you have a copy of the source code on your local machine, you can leverage [Pipenv](https://docs.pipenv.org/en/latest/) and the corresponding `Pipfile` to install of the development dependencies within a virtual environment:\n\n```bash\n$ pipenv install --three --dev\n```\n\nThis command will create an isolated virtual environment for your `tap-pivotal-tracker` project and install all the development dependencies defined within the `Pipfile` inside of the environment. You can then enter a shell within the environment:\n\n```bash\n$ pipenv shell\n```\n\nOr, you can run individual commands within the environment without entering the shell:\n\n```bash\n$ pipenv run <command>\n```\n\nFor example, to format your code using [isort](https://github.com/timothycrosley/isort) and [flake8](http://flake8.pycqa.org/en/latest/index.html) before commiting changes, run the following commands:\n\n```bash\n$ pipenv run make isort\n$ pipenv run make flake8\n```\n\nYou can also run the entire testing suite before committing using [tox](https://tox.readthedocs.io/en/latest/):\n\n```bash\n$ pipenv run tox\n```\n\nFinally, you can run your local version of the tap within the virtual environment using a command like the following:\n\n```bash\n$ pipenv run tap-pivotal-tracker --config=config/pivotal.config.json --catalog=catalog.json\n```\n\nOnce you've confirmed that your changes work and the testing suite passes, feel free to put out a PR!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goodeggs/tap-pivotal-tracker", "keywords": "singer tap python pivotal tracker", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "tap-pivotal-tracker", "package_url": "https://pypi.org/project/tap-pivotal-tracker/", "platform": "", "project_url": "https://pypi.org/project/tap-pivotal-tracker/", "project_urls": {"Homepage": "https://github.com/goodeggs/tap-pivotal-tracker"}, "release_url": "https://pypi.org/project/tap-pivotal-tracker/0.1.1/", "requires_dist": ["requests (==2.22.0)", "attrs (==19.3.0)", "singer-python (==5.9.0)", "backoff (==1.8.0)", "rollbar (==0.14.7)"], "requires_python": ">=3.6", "summary": "Singer.io tap for extracting data from Pivotal Tracker REST API", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tap-pivotal-tracker</h1>\n<p><a href=\"https://badge.fury.io/py/tap-pivotal-tracker\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3860fc253558b1bd154d6fa56db0a905eeb85de6/68747470733a2f2f62616467652e667572792e696f2f70792f7461702d7069766f74616c2d747261636b65722e737667\"></a>\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96935f0b17f1f5773595c60a587ef28cb4933784/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f7461702d7069766f74616c2d747261636b6572\">\n<a href=\"https://travis-ci.com/goodeggs/tap-pivotal-tracker.svg?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/248da1e2e4d921618d9b5c080169aae3b1b28893/68747470733a2f2f7472617669732d63692e636f6d2f676f6f64656767732f7461702d7069766f74616c2d747261636b65722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6dade75b5eff4e80ba6e1b779f7759209f39ad91/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7461702d7069766f74616c2d747261636b6572\"></p>\n<p>A <a href=\"https://www.singer.io/\" rel=\"nofollow\">Singer</a> tap for extracting data from the <a href=\"https://www.pivotaltracker.com/help/api/rest/v5#top\" rel=\"nofollow\">Pivotal Tracker REST API</a>.</p>\n<h2>Installation</h2>\n<p>Since package dependencies tend to conflict between various taps and targets, Singer <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-singer-with-python\" rel=\"nofollow\">recommends</a> installing taps and targets into their own isolated virtual environments:</p>\n<h3>Install Pivotal Tracker Tap</h3>\n<pre>$ python3 -m venv ~/.venvs/tap-pivotal-tracker\n$ <span class=\"nb\">source</span> ~/.venvs/tap-pivotal-tracker/bin/activate\n$ pip3 install tap-pivotal-tracker\n$ deactivate\n</pre>\n<h3>Install Stitch Target (optional)</h3>\n<pre>$ python3 -m venv ~/.venvs/target-stitch\n$ <span class=\"nb\">source</span> ~/.venvs/target-stitch/bin/activate\n$ pip3 install target-stitch\n$ deactivate\n</pre>\n<h2>Configuration</h2>\n<p>The tap accepts a JSON-formatted configuration file as arguments. This configuration file has s single required field:</p>\n<ol>\n<li><code>api_token</code>: A valid Pivotal Tracker API token.</li>\n</ol>\n<p>A token for the Pivotal Tracker API can be obtained following the instructions <a href=\"https://www.pivotaltracker.com/help/articles/api_token/\" rel=\"nofollow\">here</a>. A bare-bones tap configuration may file may look like the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Granular Stream Configuration</h3>\n<p>Additionally, you may specify more granular configurations for individual streams. Each key under a stream should represent a valid API request parameter for that endpoint. A more fleshed-out configuration file may look similar to the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"v5\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"streams\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"stories\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"created_after\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-01T00:00:00\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"with_story_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bug\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"with_state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"accepted\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"with_label\"</span><span class=\"p\">:</span> <span class=\"s2\">\"data-team\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"project_memberships\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"role\"</span><span class=\"p\">:</span> <span class=\"s2\">\"owner\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Streams</h2>\n<p>The current version of the tap syncs five distinct <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#streams\" rel=\"nofollow\">Streams</a>:</p>\n<ol>\n<li><code>Accounts</code>: <a href=\"https://www.pivotaltracker.com/help/api/rest/v5#Account\" rel=\"nofollow\">Endpoint Documentation</a></li>\n<li><code>Labels</code>: <a href=\"https://www.pivotaltracker.com/help/api/rest/v5#Labels\" rel=\"nofollow\">Endpoint Documentation</a></li>\n<li><code>Projects</code>: <a href=\"https://www.pivotaltracker.com/help/api/rest/v5#Projects\" rel=\"nofollow\">Endpoint Documentation</a></li>\n<li><code>Project Memberships</code>: <a href=\"https://www.pivotaltracker.com/help/api/rest/v5#Project_Memberships\" rel=\"nofollow\">Endpoint Documentation</a></li>\n<li><code>Stories</code>: <a href=\"https://www.pivotaltracker.com/help/api/rest/v5#Stories\" rel=\"nofollow\">Endpoint Documentation</a></li>\n</ol>\n<h2>Discovery</h2>\n<p>Singer taps describe the data that a stream supports via a <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode\" rel=\"nofollow\">Discovery</a> process. You can run the Dayforce tap in Discovery mode by passing the <code>--discover</code> flag at runtime:</p>\n<pre>$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config<span class=\"o\">=</span>config/pivotal.config.json --discover\n</pre>\n<p>The tap will generate a <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#the-catalog\" rel=\"nofollow\">Catalog</a> to stdout. To pass the Catalog to a file instead, simply redirect it to a file:s</p>\n<pre>$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config<span class=\"o\">=</span>config/pivotal.config.json --discover &gt; catalog.json\n</pre>\n<h2>Sync to stdout</h2>\n<p>Running a tap in <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#sync-mode\" rel=\"nofollow\">Sync mode</a> will extract data from the various selected Streams. In order to run a tap in Sync mode and have messages emitted to stdout, pass a valid configuration file and catalog file:</p>\n<pre>$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config<span class=\"o\">=</span>config/pivotal.config.json --catalog<span class=\"o\">=</span>catalog.json\n</pre>\n<p>The tap will emit occasional <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages\" rel=\"nofollow\">Metric</a>, <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message\" rel=\"nofollow\">Schema</a>, <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#record-message\" rel=\"nofollow\">Record</a>, and <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message\" rel=\"nofollow\">State messages</a>. You can persist State between runs by redirecting messages to a file:</p>\n<pre>$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config<span class=\"o\">=</span>config/pivotal.config.json --catalog<span class=\"o\">=</span>catalog.json &gt;&gt; state.json\n$ tail -1 state.json &gt; state.json.tmp\n$ mv state.json.tmp state.json\n</pre>\n<h2>Sync to Stitch</h2>\n<p>You can also send the output of the tap to <a href=\"https://www.stitchdata.com/\" rel=\"nofollow\">Stitch Data</a> for loading into the data warehouse. To do this, first create a JSON-formatted configuration for Stitch.</p>\n<p>An example configuration file will look as follows:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"client_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"small_batch_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://api.stitchdata.com/v2/import/batch\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"big_batch_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://api.stitchdata.com/v2/import/batch\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"batch_size_preferences\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Once the configuration file is created, simply pipe the output of the tap to the Stitch Data target and supply the target with the newly created configuration file:</p>\n<pre>$ ~/.venvs/tap-pivotal-tracker/bin/tap-pivotal-tracker --config<span class=\"o\">=</span>config/dayforce.config.json --catalog<span class=\"o\">=</span>catalog.json --state<span class=\"o\">=</span>state.json <span class=\"p\">|</span> ~/.venvs/target-stitch/bin/target-stitch --config<span class=\"o\">=</span>config/stitch.config.json &gt;&gt; state.json\n$ tail -1 state.json &gt; state.json.tmp\n$ mv state.json.tmp state.json\n</pre>\n<h2>Contributing</h2>\n<p>The first step to contributing is getting a copy of the source code. First, <a href=\"https://github.com/goodeggs/tap-pivotal-tracker/fork\" rel=\"nofollow\">fork <code>tap-pivotal-tracker</code> on GitHub</a>. Then, <code>cd</code> into the directory where you want your copy of the source code to live and clone the source code:</p>\n<pre>$ git clone git@github.com:YourGitHubName/tap-pivotal-tracker.git\n</pre>\n<p>Now that you have a copy of the source code on your local machine, you can leverage <a href=\"https://docs.pipenv.org/en/latest/\" rel=\"nofollow\">Pipenv</a> and the corresponding <code>Pipfile</code> to install of the development dependencies within a virtual environment:</p>\n<pre>$ pipenv install --three --dev\n</pre>\n<p>This command will create an isolated virtual environment for your <code>tap-pivotal-tracker</code> project and install all the development dependencies defined within the <code>Pipfile</code> inside of the environment. You can then enter a shell within the environment:</p>\n<pre>$ pipenv shell\n</pre>\n<p>Or, you can run individual commands within the environment without entering the shell:</p>\n<pre>$ pipenv run &lt;command&gt;\n</pre>\n<p>For example, to format your code using <a href=\"https://github.com/timothycrosley/isort\" rel=\"nofollow\">isort</a> and <a href=\"http://flake8.pycqa.org/en/latest/index.html\" rel=\"nofollow\">flake8</a> before commiting changes, run the following commands:</p>\n<pre>$ pipenv run make isort\n$ pipenv run make flake8\n</pre>\n<p>You can also run the entire testing suite before committing using <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>:</p>\n<pre>$ pipenv run tox\n</pre>\n<p>Finally, you can run your local version of the tap within the virtual environment using a command like the following:</p>\n<pre>$ pipenv run tap-pivotal-tracker --config<span class=\"o\">=</span>config/pivotal.config.json --catalog<span class=\"o\">=</span>catalog.json\n</pre>\n<p>Once you've confirmed that your changes work and the testing suite passes, feel free to put out a PR!</p>\n\n          </div>"}, "last_serial": 6379605, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a42082b7328e25c6c0c56c99d49839e8", "sha256": "649cd8bc1759894ab8eb6d280338130ac5f096b3cb5287d66cbfe1cd8356ecc9"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a42082b7328e25c6c0c56c99d49839e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23766, "upload_time": "2019-12-04T15:15:39", "upload_time_iso_8601": "2019-12-04T15:15:39.246117Z", "url": "https://files.pythonhosted.org/packages/b1/d6/0dff83143b9c611676e4d1b946f8e2c275b626a24a8db2902d0945f470a3/tap_pivotal_tracker-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "983f98e86c6b6aa0a414bdedaeb4b7ea", "sha256": "c10e099670db2cd44445d15db54169e3602559c9d998b2ec722f04b068b73dd0"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "983f98e86c6b6aa0a414bdedaeb4b7ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11823, "upload_time": "2019-12-04T15:15:41", "upload_time_iso_8601": "2019-12-04T15:15:41.086904Z", "url": "https://files.pythonhosted.org/packages/a0/fd/93f33c90c23dafce973763e87b84e12846cb350f2fbc8b3ec7d999e14783/tap_pivotal_tracker-0.1.0.tar.gz", "yanked": false}], "0.1.0a1": [{"comment_text": "", "digests": {"md5": "9612ed93d4975c39f95301fc4a79007a", "sha256": "831fe6b63faa3a6bd5cbf09c7e0f026e730cee29b92ac1ea681790cf9d171c2d"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "9612ed93d4975c39f95301fc4a79007a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23784, "upload_time": "2019-11-27T16:19:14", "upload_time_iso_8601": "2019-11-27T16:19:14.676559Z", "url": "https://files.pythonhosted.org/packages/bd/15/c7b3957e7bd3ea46bdf9a18729ca8c791279318a647dceb1e3f5f3958d85/tap_pivotal_tracker-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2720dd0e6b7d168c98741f7fad9b91c", "sha256": "e6d3c01f5613623de965cf6d1b4ce4e8d1160b29516a6acf6d1dd6195f3d95a9"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "f2720dd0e6b7d168c98741f7fad9b91c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11790, "upload_time": "2019-11-27T16:19:16", "upload_time_iso_8601": "2019-11-27T16:19:16.779172Z", "url": "https://files.pythonhosted.org/packages/d2/e3/415fcc375a1cb23ea54cd68c112966299b18e881e3772031c3b22f806875/tap_pivotal_tracker-0.1.0a1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a54fa9cb40612fb61df07a272da2a10a", "sha256": "065354d30a2cec7e4002720f4e392e0dd2832bcb14da5b89a710944fc80ad32c"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a54fa9cb40612fb61df07a272da2a10a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24206, "upload_time": "2019-12-31T14:24:23", "upload_time_iso_8601": "2019-12-31T14:24:23.682912Z", "url": "https://files.pythonhosted.org/packages/60/5c/40e1c88d67e88dba716ae28c67536c6ee55b508bacdcf035ef81a12cd0d9/tap_pivotal_tracker-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4101028ddd2dc7471fb474e8d2dfae65", "sha256": "b391903a5eeedf922f990b0da1fd171365bf8d8fc49914188d960d3588342bcd"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4101028ddd2dc7471fb474e8d2dfae65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12257, "upload_time": "2019-12-31T14:24:24", "upload_time_iso_8601": "2019-12-31T14:24:24.904788Z", "url": "https://files.pythonhosted.org/packages/43/06/560f98a79e25f500e07fb6ecaf4fc57d1dca5c01514980670433e448c9fa/tap_pivotal_tracker-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a54fa9cb40612fb61df07a272da2a10a", "sha256": "065354d30a2cec7e4002720f4e392e0dd2832bcb14da5b89a710944fc80ad32c"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a54fa9cb40612fb61df07a272da2a10a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24206, "upload_time": "2019-12-31T14:24:23", "upload_time_iso_8601": "2019-12-31T14:24:23.682912Z", "url": "https://files.pythonhosted.org/packages/60/5c/40e1c88d67e88dba716ae28c67536c6ee55b508bacdcf035ef81a12cd0d9/tap_pivotal_tracker-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4101028ddd2dc7471fb474e8d2dfae65", "sha256": "b391903a5eeedf922f990b0da1fd171365bf8d8fc49914188d960d3588342bcd"}, "downloads": -1, "filename": "tap_pivotal_tracker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4101028ddd2dc7471fb474e8d2dfae65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12257, "upload_time": "2019-12-31T14:24:24", "upload_time_iso_8601": "2019-12-31T14:24:24.904788Z", "url": "https://files.pythonhosted.org/packages/43/06/560f98a79e25f500e07fb6ecaf4fc57d1dca5c01514980670433e448c9fa/tap_pivotal_tracker-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:01 2020"}