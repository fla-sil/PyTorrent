{"info": {"author": "Philip Southam", "author_email": "philipsoutham@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Utilities"], "description": "========================================================================================\npy-mysql2pgsql - A tool for migrating/converting/exporting data from MySQL to PostgreSQL\n========================================================================================\n\nThis tool allows you to take data from an MySQL server (only tested on\n5.x) and write a PostgresSQL compatable (8.2 or higher) dump file or pipe it directly\ninto your running PostgreSQL server (8.2 or higher).\n\n.. attention::\n   Currently there is no support for importing `spatial data from MySQL\n   <http://dev.mysql.com/doc/refman/5.5/en/spatial-extensions.html>`_.\n\n\nInstallation:\n=============\n\nIf you're like me you don't like random stuff polluting your python\ninstall. Might I suggest installing this in an virtualenv?\n\n::\n\n    > virtualenv --no-site-packages ~/envs/py-mysql2pgsql\n    > source ~/envs/py-mysql2pgsql/bin/activate\n\n\nRequirements:\n-------------\n\n* `Python 2.6 or 2.7 <http://www.python.org/getit/>`_\n* `MySQL-python <http://pypi.python.org/pypi/MySQL-python>`_\n* `psycopg2 <http://pypi.python.org/pypi/psycopg2>`_\n* `PyYAML <http://pypi.python.org/pypi/PyYAML>`_\n* `termcolor <http://pypi.python.org/pypi/termcolor>`_ (unless you're installing on windows)\n\n\nOn Windows\n----------\n\nI have only done limited testing on this platform using Python\n2.7. Here are the driver dependencies for windows, install these\nbefore attempting to install py-mysql2pgsql or it will fail.\n\n* `psycopg2 for Windows <http://www.stickpeople.com/projects/python/win-psycopg/>`_\n* `MySQL-python for Windows <http://www.codegood.com/archives/129>`_\n\n\n\nFrom PyPI:\n----------\n\nAll dependencies **should** be automatically installed when installing\nthe app the following ways\n\n::\n\n    > pip install py-mysql2pgsql\n\n\nFrom source:\n------------\n\n::\n\n    > git clone git://github.com/philipsoutham/py-mysql2pgsql.git\n    > cd py-mysql2pgsql\n    > python setup.py install\n\n\nUsage:\n======\n\nLooking for help?\n\n::\n\n    > py-mysql2pgsql -h\n    usage: py-mysql2pgsql [-h] [-v] [-f FILE]\n\n    Tool for migrating/converting data from mysql to postgresql.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --verbose         Show progress of data migration.\n      -f FILE, --file FILE  Location of configuration file (default:\n                            mysql2pgsql.yml). If none exists at that path,\n                            one will be created for you.\n                        \n\nDon't worry if this is your first time, it'll be gentle.\n\n::\n\n    > py-mysql2pgsql\n    No configuration file found.\n    A new file has been initialized at: mysql2pgsql.yml\n    Please review the configuration and retry...\n\nAs the output suggests, I file was created at mysql2pgsql.yml for you\nto edit. For the impatient, here is what the file contains.\n\n::\n\n    # if a socket is specified we will use that\n    # if tcp is chosen you can use compression\n    mysql:\n     hostname: localhost\n     port: 3306\n     socket: /tmp/mysql.sock\n     username: mysql2psql\n     password: \n     database: mysql2psql_test\n     compress: false\n    destination:\n     # if file is given, output goes to file, else postgres\n     file: \n     postgres:\n      hostname: localhost\n      port: 5432\n      username: mysql2psql\n      password: \n      database: mysql2psql_test\n\n    # if only_tables is given, only the listed tables will be converted.  leave empty to convert all tables.\n    #only_tables:\n    #- table1\n    #- table2\n    # if exclude_tables is given, exclude the listed tables from the conversion.\n    #exclude_tables:\n    #- table3\n    #- table4\n\n    # if supress_data is true, only the schema definition will be exported/migrated, and not the data\n    supress_data: false\n\n    # if supress_ddl is true, only the data will be exported/imported, and not the schema\n    supress_ddl: false\n\n    # if force_truncate is true, forces a table truncate before table loading\n    force_truncate: false\n\n\nPretty self explainitory right? A couple things to note, first if\n`destination -> file` is populated all outpute will be dumped to the\nspecified location regardless of what is contained in `destination ->\npostgres`. So if you want to dump directly to your server make sure\nthe `file` value is blank.\n\nSay you have a MySQL db with many, many tables, but you're only\ninterested in exporting a subset of those table, no problem. Add only\nthe tables you want to include in `only_tables` or tables that you\ndon't want exported to `exclude_tables`. \n\nOther items of interest may be to skip moving the data and just create\nthe schema or vice versa. To skip the data and only create the schema\nset `supress_data` to `true`. To migrate only data and not recreate the\ntables set `supress_ddl` to `true`; if there's existing data that you\nwant to drop before importing set `force_truncate` to\n`true`. `force_truncate` is not necessary when `supress_ddl` is set to\n`false`.\n\nOne last thing, the `--verbose` flag. Without it the tool will just go\non it's merry way without bothering you with any output until it's\ndone. With it you'll get a play-by-play summary of what's going\non. Here's an example.\n\n::\n\n    > py-mysql2pgsql -v -f mysql2pgsql\n    START PROCESSING table_one\n      START  - CREATING TABLE table_one\n      FINISH - CREATING TABLE table_one\n      START  - WRITING DATA TO table_one\n      24812.02 rows/sec [20000]  \n      FINISH - WRITING DATA TO table_one\n      START  - ADDING INDEXES TO table_one\n      FINISH - ADDING INDEXES TO table_one\n      START  - ADDING CONSTRAINTS ON table_one\n      FINISH - ADDING CONSTRAINTS ON table_one\n    FINISHED PROCESSING table_one\n\n    START PROCESSING table_two\n      START  - CREATING TABLE table_two\n      FINISH - CREATING TABLE table_two\n      START  - WRITING DATA TO table_two\n\n      FINISH - WRITING DATA TO table_two\n      START  - ADDING INDEXES TO table_two\n      FINISH - ADDING INDEXES TO table_two\n      START  - ADDING CONSTRAINTS ON table_two\n      FINISH - ADDING CONSTRAINTS ON table_two\n    FINISHED PROCESSING table_two\n\n\nData Type Conversion Legend\n===========================\n\nSince there is not a one-to-one mapping between MySQL and\nPostgreSQL data types, listed below are the conversions that are applied. I've\ntaken some liberties with some, others should come as no surprise.\n\n==================== ===========================================\nMySQL                PostgreSQL\n==================== ===========================================\nchar                 character\nvarchar              character varying\ntinytext             text\nmediumtext           text\ntext                 text\nlongtext             text\ntinyblob             bytea\nmediumblob           bytea\nblob                 bytea\nlongblob             bytea\nbinary               bytea\nvarbinary            bytea\nbit                  bit varying\ntinyint              smallint\ntinyint unsigned     smallint\nsmallint             smallint\nsmallint unsigned    integer\nmediumint            integer\nmediumint unsigned   integer\nint                  integer\nint unsigned         bigint\nbigint               bigint\nbigint unsigned      numeric\nfloat                real\nfloat unsigned       real\ndouble               double precision\ndouble unsigned      double precision\ndecimal              numeric\ndecimal unsigned     numeric\nnumeric              numeric\nnumeric unsigned     numeric\ndate                 date\ndatetime             timestamp without time zone\ntime                 time without time zone\ntimestamp            timestamp without time zone\nyear                 smallint\nenum                 character varying (with `check` constraint)\nset                  ARRAY[]::text[]\n==================== ===========================================\n\n\nAbout:\n======\n\nI ported much of this from an existing project written in Ruby by Max\nLapshin over at `<https://github.com/maxlapshin/mysql2postgres>`_. I\nfound that it worked fine for most things, but for migrating large tables\nwith millions of rows it started to break down. This motivated me to\nwrite *py-mysql2pgsql* which uses a server side cursor, so there is no \"paging\"\nwhich means there is no slow down while working it's way through a\nlarge dataset.", "description_content_type": null, "docs_url": "https://pythonhosted.org/py-mysql2pgsql/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/philipsoutham/py-mysql2pgsql", "keywords": "mysql postgres postgresql pgsql psql migration", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "py-mysql2pgsql", "package_url": "https://pypi.org/project/py-mysql2pgsql/", "platform": "any", "project_url": "https://pypi.org/project/py-mysql2pgsql/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/philipsoutham/py-mysql2pgsql"}, "release_url": "https://pypi.org/project/py-mysql2pgsql/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "Tool for migrating/converting from mysql to postgresql.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This tool allows you to take data from an MySQL server (only tested on\n5.x) and write a PostgresSQL compatable (8.2 or higher) dump file or pipe it directly\ninto your running PostgreSQL server (8.2 or higher).</p>\n<div>\n<p>Attention!</p>\n<p>Currently there is no support for importing <a href=\"http://dev.mysql.com/doc/refman/5.5/en/spatial-extensions.html\" rel=\"nofollow\">spatial data from MySQL</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation:</h2>\n<p>If you\u2019re like me you don\u2019t like random stuff polluting your python\ninstall. Might I suggest installing this in an virtualenv?</p>\n<pre>&gt; virtualenv --no-site-packages ~/envs/py-mysql2pgsql\n&gt; source ~/envs/py-mysql2pgsql/bin/activate\n</pre>\n<div id=\"requirements\">\n<h3>Requirements:</h3>\n<ul>\n<li><a href=\"http://www.python.org/getit/\" rel=\"nofollow\">Python 2.6 or 2.7</a></li>\n<li><a href=\"http://pypi.python.org/pypi/MySQL-python\" rel=\"nofollow\">MySQL-python</a></li>\n<li><a href=\"http://pypi.python.org/pypi/psycopg2\" rel=\"nofollow\">psycopg2</a></li>\n<li><a href=\"http://pypi.python.org/pypi/PyYAML\" rel=\"nofollow\">PyYAML</a></li>\n<li><a href=\"http://pypi.python.org/pypi/termcolor\" rel=\"nofollow\">termcolor</a> (unless you\u2019re installing on windows)</li>\n</ul>\n</div>\n<div id=\"on-windows\">\n<h3>On Windows</h3>\n<p>I have only done limited testing on this platform using Python\n2.7. Here are the driver dependencies for windows, install these\nbefore attempting to install py-mysql2pgsql or it will fail.</p>\n<ul>\n<li><a href=\"http://www.stickpeople.com/projects/python/win-psycopg/\" rel=\"nofollow\">psycopg2 for Windows</a></li>\n<li><a href=\"http://www.codegood.com/archives/129\" rel=\"nofollow\">MySQL-python for Windows</a></li>\n</ul>\n</div>\n<div id=\"from-pypi\">\n<h3>From PyPI:</h3>\n<p>All dependencies <strong>should</strong> be automatically installed when installing\nthe app the following ways</p>\n<pre>&gt; pip install py-mysql2pgsql\n</pre>\n</div>\n<div id=\"from-source\">\n<h3>From source:</h3>\n<pre>&gt; git clone git://github.com/philipsoutham/py-mysql2pgsql.git\n&gt; cd py-mysql2pgsql\n&gt; python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage:</h2>\n<p>Looking for help?</p>\n<pre>&gt; py-mysql2pgsql -h\nusage: py-mysql2pgsql [-h] [-v] [-f FILE]\n\nTool for migrating/converting data from mysql to postgresql.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Show progress of data migration.\n  -f FILE, --file FILE  Location of configuration file (default:\n                        mysql2pgsql.yml). If none exists at that path,\n                        one will be created for you.\n</pre>\n<p>Don\u2019t worry if this is your first time, it\u2019ll be gentle.</p>\n<pre>&gt; py-mysql2pgsql\nNo configuration file found.\nA new file has been initialized at: mysql2pgsql.yml\nPlease review the configuration and retry...\n</pre>\n<p>As the output suggests, I file was created at mysql2pgsql.yml for you\nto edit. For the impatient, here is what the file contains.</p>\n<pre># if a socket is specified we will use that\n# if tcp is chosen you can use compression\nmysql:\n hostname: localhost\n port: 3306\n socket: /tmp/mysql.sock\n username: mysql2psql\n password:\n database: mysql2psql_test\n compress: false\ndestination:\n # if file is given, output goes to file, else postgres\n file:\n postgres:\n  hostname: localhost\n  port: 5432\n  username: mysql2psql\n  password:\n  database: mysql2psql_test\n\n# if only_tables is given, only the listed tables will be converted.  leave empty to convert all tables.\n#only_tables:\n#- table1\n#- table2\n# if exclude_tables is given, exclude the listed tables from the conversion.\n#exclude_tables:\n#- table3\n#- table4\n\n# if supress_data is true, only the schema definition will be exported/migrated, and not the data\nsupress_data: false\n\n# if supress_ddl is true, only the data will be exported/imported, and not the schema\nsupress_ddl: false\n\n# if force_truncate is true, forces a table truncate before table loading\nforce_truncate: false\n</pre>\n<p>Pretty self explainitory right? A couple things to note, first if\n<cite>destination -&gt; file</cite> is populated all outpute will be dumped to the\nspecified location regardless of what is contained in <cite>destination -&gt;\npostgres</cite>. So if you want to dump directly to your server make sure\nthe <cite>file</cite> value is blank.</p>\n<p>Say you have a MySQL db with many, many tables, but you\u2019re only\ninterested in exporting a subset of those table, no problem. Add only\nthe tables you want to include in <cite>only_tables</cite> or tables that you\ndon\u2019t want exported to <cite>exclude_tables</cite>.</p>\n<p>Other items of interest may be to skip moving the data and just create\nthe schema or vice versa. To skip the data and only create the schema\nset <cite>supress_data</cite> to <cite>true</cite>. To migrate only data and not recreate the\ntables set <cite>supress_ddl</cite> to <cite>true</cite>; if there\u2019s existing data that you\nwant to drop before importing set <cite>force_truncate</cite> to\n<cite>true</cite>. <cite>force_truncate</cite> is not necessary when <cite>supress_ddl</cite> is set to\n<cite>false</cite>.</p>\n<p>One last thing, the <cite>\u2013verbose</cite> flag. Without it the tool will just go\non it\u2019s merry way without bothering you with any output until it\u2019s\ndone. With it you\u2019ll get a play-by-play summary of what\u2019s going\non. Here\u2019s an example.</p>\n<pre>&gt; py-mysql2pgsql -v -f mysql2pgsql\nSTART PROCESSING table_one\n  START  - CREATING TABLE table_one\n  FINISH - CREATING TABLE table_one\n  START  - WRITING DATA TO table_one\n  24812.02 rows/sec [20000]\n  FINISH - WRITING DATA TO table_one\n  START  - ADDING INDEXES TO table_one\n  FINISH - ADDING INDEXES TO table_one\n  START  - ADDING CONSTRAINTS ON table_one\n  FINISH - ADDING CONSTRAINTS ON table_one\nFINISHED PROCESSING table_one\n\nSTART PROCESSING table_two\n  START  - CREATING TABLE table_two\n  FINISH - CREATING TABLE table_two\n  START  - WRITING DATA TO table_two\n\n  FINISH - WRITING DATA TO table_two\n  START  - ADDING INDEXES TO table_two\n  FINISH - ADDING INDEXES TO table_two\n  START  - ADDING CONSTRAINTS ON table_two\n  FINISH - ADDING CONSTRAINTS ON table_two\nFINISHED PROCESSING table_two\n</pre>\n</div>\n<div id=\"data-type-conversion-legend\">\n<h2>Data Type Conversion Legend</h2>\n<p>Since there is not a one-to-one mapping between MySQL and\nPostgreSQL data types, listed below are the conversions that are applied. I\u2019ve\ntaken some liberties with some, others should come as no surprise.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>MySQL</th>\n<th>PostgreSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>char</td>\n<td>character</td>\n</tr>\n<tr><td>varchar</td>\n<td>character varying</td>\n</tr>\n<tr><td>tinytext</td>\n<td>text</td>\n</tr>\n<tr><td>mediumtext</td>\n<td>text</td>\n</tr>\n<tr><td>text</td>\n<td>text</td>\n</tr>\n<tr><td>longtext</td>\n<td>text</td>\n</tr>\n<tr><td>tinyblob</td>\n<td>bytea</td>\n</tr>\n<tr><td>mediumblob</td>\n<td>bytea</td>\n</tr>\n<tr><td>blob</td>\n<td>bytea</td>\n</tr>\n<tr><td>longblob</td>\n<td>bytea</td>\n</tr>\n<tr><td>binary</td>\n<td>bytea</td>\n</tr>\n<tr><td>varbinary</td>\n<td>bytea</td>\n</tr>\n<tr><td>bit</td>\n<td>bit varying</td>\n</tr>\n<tr><td>tinyint</td>\n<td>smallint</td>\n</tr>\n<tr><td>tinyint unsigned</td>\n<td>smallint</td>\n</tr>\n<tr><td>smallint</td>\n<td>smallint</td>\n</tr>\n<tr><td>smallint unsigned</td>\n<td>integer</td>\n</tr>\n<tr><td>mediumint</td>\n<td>integer</td>\n</tr>\n<tr><td>mediumint unsigned</td>\n<td>integer</td>\n</tr>\n<tr><td>int</td>\n<td>integer</td>\n</tr>\n<tr><td>int unsigned</td>\n<td>bigint</td>\n</tr>\n<tr><td>bigint</td>\n<td>bigint</td>\n</tr>\n<tr><td>bigint unsigned</td>\n<td>numeric</td>\n</tr>\n<tr><td>float</td>\n<td>real</td>\n</tr>\n<tr><td>float unsigned</td>\n<td>real</td>\n</tr>\n<tr><td>double</td>\n<td>double precision</td>\n</tr>\n<tr><td>double unsigned</td>\n<td>double precision</td>\n</tr>\n<tr><td>decimal</td>\n<td>numeric</td>\n</tr>\n<tr><td>decimal unsigned</td>\n<td>numeric</td>\n</tr>\n<tr><td>numeric</td>\n<td>numeric</td>\n</tr>\n<tr><td>numeric unsigned</td>\n<td>numeric</td>\n</tr>\n<tr><td>date</td>\n<td>date</td>\n</tr>\n<tr><td>datetime</td>\n<td>timestamp without time zone</td>\n</tr>\n<tr><td>time</td>\n<td>time without time zone</td>\n</tr>\n<tr><td>timestamp</td>\n<td>timestamp without time zone</td>\n</tr>\n<tr><td>year</td>\n<td>smallint</td>\n</tr>\n<tr><td>enum</td>\n<td>character varying (with <cite>check</cite> constraint)</td>\n</tr>\n<tr><td>set</td>\n<td>ARRAY[]::text[]</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"about\">\n<h2>About:</h2>\n<p>I ported much of this from an existing project written in Ruby by Max\nLapshin over at <a href=\"https://github.com/maxlapshin/mysql2postgres\" rel=\"nofollow\">https://github.com/maxlapshin/mysql2postgres</a>. I\nfound that it worked fine for most things, but for migrating large tables\nwith millions of rows it started to break down. This motivated me to\nwrite <em>py-mysql2pgsql</em> which uses a server side cursor, so there is no \u201cpaging\u201d\nwhich means there is no slow down while working it\u2019s way through a\nlarge dataset.</p>\n</div>\n\n          </div>"}, "last_serial": 796847, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "6a5889ee8b7415af144c1c4c368c9035", "sha256": "a8701bb4429743cc10620b078182ff8fd0f51e5a121d54eea1e2cddcbb7f36c7"}, "downloads": -1, "filename": "py-mysql2pgsql-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6a5889ee8b7415af144c1c4c368c9035", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216590, "upload_time": "2011-08-18T22:25:52", "upload_time_iso_8601": "2011-08-18T22:25:52.706319Z", "url": "https://files.pythonhosted.org/packages/71/33/f10444c1dcb23783b394a3beb9e0c95aacedfc83b1c8cd7c5fef68a89155/py-mysql2pgsql-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f25690fdb8f55e9bae08237ed8ffa633", "sha256": "870c958fdfd137586864ddfb428a1bb2703b33e30b566daa9ac866a225c5374a"}, "downloads": -1, "filename": "py-mysql2pgsql-0.1.4.tar.gz", "has_sig": false, "md5_digest": "f25690fdb8f55e9bae08237ed8ffa633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109641, "upload_time": "2012-06-06T18:20:38", "upload_time_iso_8601": "2012-06-06T18:20:38.710358Z", "url": "https://files.pythonhosted.org/packages/c6/81/35817d71c355326d6995a2de0bf1fbad3de2191c679a8abd09da971f4ff9/py-mysql2pgsql-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "f9383fc558dff6f6c1e304465ff702da", "sha256": "024d3f1d3994679421102a2cb70c1fde1306bdf8c70839db907a728324c65cdf"}, "downloads": -1, "filename": "py-mysql2pgsql-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f9383fc558dff6f6c1e304465ff702da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109642, "upload_time": "2012-06-06T18:24:36", "upload_time_iso_8601": "2012-06-06T18:24:36.191270Z", "url": "https://files.pythonhosted.org/packages/28/49/c82e4313c63b26224950bef47ab19f52a921dd4c279abf31aa3ee9d9cbbe/py-mysql2pgsql-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9383fc558dff6f6c1e304465ff702da", "sha256": "024d3f1d3994679421102a2cb70c1fde1306bdf8c70839db907a728324c65cdf"}, "downloads": -1, "filename": "py-mysql2pgsql-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f9383fc558dff6f6c1e304465ff702da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109642, "upload_time": "2012-06-06T18:24:36", "upload_time_iso_8601": "2012-06-06T18:24:36.191270Z", "url": "https://files.pythonhosted.org/packages/28/49/c82e4313c63b26224950bef47ab19f52a921dd4c279abf31aa3ee9d9cbbe/py-mysql2pgsql-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:27 2020"}