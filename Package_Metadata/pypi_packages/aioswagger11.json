{"info": {"author": "Matthias Urlichs", "author_email": "matthias@urlichs.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About\n-----\n\naioswagger11 is an asyncio-compatible clone of swagger.py, capable of\nunderstanding Swagger 1.1 definitions (only).\n\nAs swagger has been renamed to OpenAPI which by now has version 3.0\n(and has an actual specification \u2013 unlike Swagger 1.1) this library is\n(mostly) only usable with Asterisk, which still uses Swagger 1.1\ndeclarations.\n\nAioswagger11 supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.\n\nfrom swagger.py:\n================\n\nSwagger.py is a Python library for using\n`Swagger <https://developers.helloreverb.com/swagger/>`__ defined APIs.\n\nSwagger itself is best described on the Swagger home page:\n\n    Swagger is a specification and complete framework implementation for\n    describing, producing, consuming, and visualizing RESTful web\n    services.\n\nThe `Swagger\nspecification <https://github.com/wordnik/swagger-core/wiki>`__ defines\nhow APIs may be described using Swagger.\n\nUsage\n-----\n\nInstall the latest release from PyPI.\n\n::\n\n    $ sudo pip install aioswagger11\n\nOr install from source using the ``setup.py`` script.\n\n::\n\n    $ sudo ./setup.py install\n\nAPI\n===\n\naioswagger11 will dynamically build an object model from a Swagger-enabled\nRESTful API.\n\nHere is a simple example using the `Asterisk REST\nInterface <https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI>`__\n\n.. code:: Python\n\n    #!/usr/bin/env python3\n\n    import json\n    import asyncio\n    import aiohttp\n\n    from aioswagger11.client import SwaggerClient\n    from aioswagger11.http_client import AsynchronousHttpClient\n\n    http_client = AsynchronousHttpClient()\n    http_client.set_api_key('localhost', 'hey:peekaboo')\n\n    async def run(ari,msg_json):\n        channelId = msg_json['channel']['id']\n        await ari.channels.answer(channelId=channelId)\n        await ari.channels.play(channelId=channelId,\n                        media='sound:hello-world')\n        # In a real program you should wait for the PlaybackFinished event instead\n        await asyncio.sleep(3)\n        await ari.channels.continueInDialplan(channelId=channelId)\n\n    async def main():\n        ari = SwaggerClient(\n            \"http://localhost:8088/ari/api-docs/resources.json\",\n            http_client=http_client)\n\n        ws = ari.events.eventWebsocket(app='hello')\n\n        async for msg_str in ws:\n            if msg.type in {aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.CLOSING}:\n                break\n            elif msg.type != aiohttp.WSMsgType.TEXT:\n                continue # ignore\n\n            msg_json = json.loads(msg_str)\n            if msg_json['type'] == 'StasisStart':\n                asyncio.ensure_future(run(ari,msg_json))\n\n    if __name__ == \"__main__\":\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\nData model\n==========\n\nThe data model presented by the ``swagger_model`` module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a ``_author`` or ``_copyright`` field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.\n\nThere are a few meaningful differences.\n\n-  Resource listing\n-  The ``file`` and ``base_dir`` fields have been added, referencing the\n   original ``.json`` file.\n-  The objects in a ``resource_listing``'s ``api`` array contains a\n   field ``api_declaration``, which is the processed result from the\n   referenced API doc.\n-  API declaration\n-  A ``file`` field has been added, referencing the original ``.json``\n   file.\n\nDevelopment\n-----------\n\nThe code is documented using `Sphinx <http://sphinx-doc.org/>`__, which\nallows `IntelliJ IDEA <http://confluence.jetbrains.net/display/PYH/>`__\nto do a better job at inferring types for autocompletion.\n\nTo keep things isolated, I also recommend installing (and using)\n`virtualenv <http://www.virtualenv.org/>`__.\n\n::\n\n    $ sudo pip install virtualenv\n    $ mkdir -p ~/virtualenv\n    $ virtualenv ~/virtualenv/swagger\n    $ . ~/virtualenv/swagger/bin/activate\n\n`Setuptools <http://pypi.python.org/pypi/setuptools>`__ is used for\nbuilding. `Pytest <http://pytest.readthedocs.org/en/latest/>`__ is used\nfor unit testing, with the `coverage\n<http://nedbatchelder.com/code/coverage/>`__ plugin installed to\ngenerated code coverage reports. Pass ``--with-coverage`` to generate\nthe code coverage report. HTML versions of the reports are put in\n``cover/index.html``.\n\n::\n\n    $ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n    $ ./setup.py pytest    # run unit tests\n    $ ./setup.py bdist_egg # build distributable\n\n\nTesting\n=======\n\nSimply run ``python3 setup.py pytest``.\n\nNote that testing this module requires a version of httpretty that's been\nfixed to work with aiohttp.\n\nLicense\n-------\n\nCopyright (c) 2013, Digium, Inc.\nCopyright (c) 2018, Matthias Urlichs\n\naioswagger11 is licensed with a `BSD 3-Clause\nLicense <http://opensource.org/licenses/BSD-3-Clause>`__.\n\nThe current author humbly requests that you share any further bug fixes or\nenhancements to this code.\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/M-o-a-T/aioswagger11", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "aioswagger11", "package_url": "https://pypi.org/project/aioswagger11/", "platform": "", "project_url": "https://pypi.org/project/aioswagger11/", "project_urls": {"Homepage": "https://github.com/M-o-a-T/aioswagger11"}, "release_url": "https://pypi.org/project/aioswagger11/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "Asynchronous library for accessing Swagger-1.1-enabled APIs", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>aioswagger11 is an asyncio-compatible clone of swagger.py, capable of\nunderstanding Swagger 1.1 definitions (only).</p>\n<p>As swagger has been renamed to OpenAPI which by now has version 3.0\n(and has an actual specification \u2013 unlike Swagger 1.1) this library is\n(mostly) only usable with Asterisk, which still uses Swagger 1.1\ndeclarations.</p>\n<p>Aioswagger11 supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.</p>\n<div id=\"from-swagger-py\">\n<h3>from swagger.py:</h3>\n<p>Swagger.py is a Python library for using\n<a href=\"https://developers.helloreverb.com/swagger/\" rel=\"nofollow\">Swagger</a> defined APIs.</p>\n<p>Swagger itself is best described on the Swagger home page:</p>\n<blockquote>\nSwagger is a specification and complete framework implementation for\ndescribing, producing, consuming, and visualizing RESTful web\nservices.</blockquote>\n<p>The <a href=\"https://github.com/wordnik/swagger-core/wiki\" rel=\"nofollow\">Swagger\nspecification</a> defines\nhow APIs may be described using Swagger.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Install the latest release from PyPI.</p>\n<pre>$ sudo pip install aioswagger11\n</pre>\n<p>Or install from source using the <tt>setup.py</tt> script.</p>\n<pre>$ sudo ./setup.py install\n</pre>\n<div id=\"api\">\n<h3>API</h3>\n<p>aioswagger11 will dynamically build an object model from a Swagger-enabled\nRESTful API.</p>\n<p>Here is a simple example using the <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI\" rel=\"nofollow\">Asterisk REST\nInterface</a></p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aioswagger11.client</span> <span class=\"kn\">import</span> <span class=\"n\">SwaggerClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioswagger11.http_client</span> <span class=\"kn\">import</span> <span class=\"n\">AsynchronousHttpClient</span>\n\n<span class=\"n\">http_client</span> <span class=\"o\">=</span> <span class=\"n\">AsynchronousHttpClient</span><span class=\"p\">()</span>\n<span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">set_api_key</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"s1\">'hey:peekaboo'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">ari</span><span class=\"p\">,</span><span class=\"n\">msg_json</span><span class=\"p\">):</span>\n    <span class=\"n\">channelId</span> <span class=\"o\">=</span> <span class=\"n\">msg_json</span><span class=\"p\">[</span><span class=\"s1\">'channel'</span><span class=\"p\">][</span><span class=\"s1\">'id'</span><span class=\"p\">]</span>\n    <span class=\"k\">await</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">answer</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">,</span>\n                    <span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:hello-world'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># In a real program you should wait for the PlaybackFinished event instead</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">continueInDialplan</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">ari</span> <span class=\"o\">=</span> <span class=\"n\">SwaggerClient</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"http://localhost:8088/ari/api-docs/resources.json\"</span><span class=\"p\">,</span>\n        <span class=\"n\">http_client</span><span class=\"o\">=</span><span class=\"n\">http_client</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">eventWebsocket</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg_str</span> <span class=\"ow\">in</span> <span class=\"n\">ws</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">WSMsgType</span><span class=\"o\">.</span><span class=\"n\">CLOSED</span><span class=\"p\">,</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">WSMsgType</span><span class=\"o\">.</span><span class=\"n\">CLOSING</span><span class=\"p\">}:</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">elif</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">WSMsgType</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span> <span class=\"c1\"># ignore</span>\n\n        <span class=\"n\">msg_json</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">msg_str</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg_json</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'StasisStart'</span><span class=\"p\">:</span>\n            <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">ari</span><span class=\"p\">,</span><span class=\"n\">msg_json</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"data-model\">\n<h3>Data model</h3>\n<p>The data model presented by the <tt>swagger_model</tt> module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a <tt>_author</tt> or <tt>_copyright</tt> field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.</p>\n<p>There are a few meaningful differences.</p>\n<ul>\n<li>Resource listing</li>\n<li>The <tt>file</tt> and <tt>base_dir</tt> fields have been added, referencing the\noriginal <tt>.json</tt> file.</li>\n<li>The objects in a <tt>resource_listing</tt>\u2019s <tt>api</tt> array contains a\nfield <tt>api_declaration</tt>, which is the processed result from the\nreferenced API doc.</li>\n<li>API declaration</li>\n<li>A <tt>file</tt> field has been added, referencing the original <tt>.json</tt>\nfile.</li>\n</ul>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The code is documented using <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>, which\nallows <a href=\"http://confluence.jetbrains.net/display/PYH/\" rel=\"nofollow\">IntelliJ IDEA</a>\nto do a better job at inferring types for autocompletion.</p>\n<p>To keep things isolated, I also recommend installing (and using)\n<a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a>.</p>\n<pre>$ sudo pip install virtualenv\n$ mkdir -p ~/virtualenv\n$ virtualenv ~/virtualenv/swagger\n$ . ~/virtualenv/swagger/bin/activate\n</pre>\n<p><a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">Setuptools</a> is used for\nbuilding. <a href=\"http://pytest.readthedocs.org/en/latest/\" rel=\"nofollow\">Pytest</a> is used\nfor unit testing, with the <a href=\"http://nedbatchelder.com/code/coverage/\" rel=\"nofollow\">coverage</a> plugin installed to\ngenerated code coverage reports. Pass <tt><span class=\"pre\">--with-coverage</span></tt> to generate\nthe code coverage report. HTML versions of the reports are put in\n<tt>cover/index.html</tt>.</p>\n<pre>$ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n$ ./setup.py pytest    # run unit tests\n$ ./setup.py bdist_egg # build distributable\n</pre>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>Simply run <tt>python3 setup.py pytest</tt>.</p>\n<p>Note that testing this module requires a version of httpretty that\u2019s been\nfixed to work with aiohttp.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2013, Digium, Inc.\nCopyright (c) 2018, Matthias Urlichs</p>\n<p>aioswagger11 is licensed with a <a href=\"http://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">BSD 3-Clause\nLicense</a>.</p>\n<p>The current author humbly requests that you share any further bug fixes or\nenhancements to this code.</p>\n</div>\n\n          </div>"}, "last_serial": 3761672, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "14032710ade944b007b33a03e4a2940d", "sha256": "6d0d965e0551b15e1661e1dbcd5a9fd71418b4fc472437a076068e3457c6f29e"}, "downloads": -1, "filename": "aioswagger11-0.9.0.tar.gz", "has_sig": false, "md5_digest": "14032710ade944b007b33a03e4a2940d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15727, "upload_time": "2018-01-17T11:23:12", "upload_time_iso_8601": "2018-01-17T11:23:12.290896Z", "url": "https://files.pythonhosted.org/packages/ab/a6/e88c3ea1e917eba5324eab66dd2de31083de39404a78d61f253bffd1ae91/aioswagger11-0.9.0.tar.gz", "yanked": false}], "0.9.0.1": [{"comment_text": "", "digests": {"md5": "bc92f81f16c846e60367009afe2b840a", "sha256": "de767ef0bc21c6f146b0af013a26fbc8bb55aff208c513e646c35aab73dbb690"}, "downloads": -1, "filename": "aioswagger11-0.9.0.1.tar.gz", "has_sig": false, "md5_digest": "bc92f81f16c846e60367009afe2b840a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15756, "upload_time": "2018-01-18T03:30:57", "upload_time_iso_8601": "2018-01-18T03:30:57.796946Z", "url": "https://files.pythonhosted.org/packages/57/ae/f408eb5681eefd7fb5da9d3ebf8c5da28f8149f5361f6b31e7ca9379a29d/aioswagger11-0.9.0.1.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "71009c2ab49c6b92a19872f754d367ad", "sha256": "6d7ac31699d5e5db0287e143226545d02a689ab4ce10af506a0872f2a8489a03"}, "downloads": -1, "filename": "aioswagger11-0.9.1.tar.gz", "has_sig": false, "md5_digest": "71009c2ab49c6b92a19872f754d367ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28229, "upload_time": "2018-04-13T12:35:32", "upload_time_iso_8601": "2018-04-13T12:35:32.260623Z", "url": "https://files.pythonhosted.org/packages/ed/42/6badef3819b597622f95a3c35d1bd6d1ab9d7218c60bcc538cf7eeb9025e/aioswagger11-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71009c2ab49c6b92a19872f754d367ad", "sha256": "6d7ac31699d5e5db0287e143226545d02a689ab4ce10af506a0872f2a8489a03"}, "downloads": -1, "filename": "aioswagger11-0.9.1.tar.gz", "has_sig": false, "md5_digest": "71009c2ab49c6b92a19872f754d367ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28229, "upload_time": "2018-04-13T12:35:32", "upload_time_iso_8601": "2018-04-13T12:35:32.260623Z", "url": "https://files.pythonhosted.org/packages/ed/42/6badef3819b597622f95a3c35d1bd6d1ab9d7218c60bcc538cf7eeb9025e/aioswagger11-0.9.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:44 2020"}