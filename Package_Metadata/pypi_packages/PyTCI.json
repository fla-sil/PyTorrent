{"info": {"author": "Jakob Mathiszig-Lee", "author_email": "jakob@mathisziglee.co.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# PyTCI\n\nA python package for Target Controlled Infusions. \n\nSpawned from the NHS Hack Day project https://github.com/JMathiszig-Lee/Propofol, this splits out useful code into a package and updates it to python3\n\n[![Build Status](https://travis-ci.org/JMathiszig-Lee/PyTCI.svg?branch=master)](https://travis-ci.org/JMathiszig-Lee/PyTCI)\n[![Coverage Status](https://coveralls.io/repos/github/JMathiszig-Lee/PyTCI/badge.svg?branch=master&kill_cache=1)](https://coveralls.io/github/JMathiszig-Lee/PyTCI?branch=master)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/PyTCI)\n\n# Installation\nif using pip\n```python\npip install PyTCI\n```\nif using pipenv (you should, it's great)\n```python\npipenv install PyTCI\n```\n# Usage\nPyTCI currently supports the following:\n\n**Body Mass equations:**\n* BMI\n* Ideal body weight (Devine)\n* Adjusted body weight\n* James Equation\n* Boer\n* Hume(1966)\n* Hume(1971)\n* Janmahasation(2005)\n* Al-Sallami\n\nexample:\n```python\n>>> from PyTCI.weights import leanbodymass\n>>> leanbodymass.hume66(180, 60 'm')\n51.2\n```\n# Models:\n**Propofol**\n* Schnider\n* Marsh\n* Eleveld\n* Kataria\n* Paedfusor\n\n**Remifentanil**\n* Minto\n* Eleveld\n\n**Alfentanil**\n* Maitre\n\n**Dexmedetomidine**\n* Hannivoort\n* Dyck\n\nexample:\n```python\n>>> from PyTCI.models import propofol\n>>> patient = propofol.Schnider(40, 70, 170, 'm')\n>>> patient.v2\n24\n```\n\nthe class methods ```give_drug``` and ```wait_time``` can he used to model propofol kinetics\n\nexample:\n```python\n>>> from PyTCI.models import propofol\n>>> patient = propofol.Marsh(90)\n>>> patient.give_drug(200)\n>>> patient.x1\n9.746588693957115\n>>> patient.wait_time(60)\n>>> patient.x1\n7.438318565317236\n```\n\n**Infusions**\n\nInfusions are currently only implemented for propofol\n\nThe two methods available are ```effect_bolus``` and ```plasma_infusion```\n\nEffect bolus returns the bolus (in mg) needed over 10 seconds to achieve the desired effect site concentration. It's input is the desired target in ug/ml and returns the bolus needed in mg\n```python\n>>> patient = propofol.Schnider(40, 70, 190, 'm')\n>>> patient.effect_bolus(6)\n95.1\n```\nthe function uses a simple search to find a dose that gets within 2% of the desired concentration \n\n\nPlasma_infusion takes desired plasma concentration(ug/ml), desired total time (seconds) and the time period for each segment (seconds) and returns a python list of the required infusions rates from every segment witin the total time specified in mg/sec\n```python\n>>> pt = propofol.Marsh(70)\n>>> pt.plasma_infusion(2, 60)\n[3.27269899102373, 0.1453355022895698, 0.14478000490919285, 0.14422948797801816, 0.1436839059972244, 0.143143213884116]\n>>> pt.plasma_infusion(2, 60, 30)\n[0.1420619352906052, 0.1417017659270992]\n\n```\n\n\n\nThe built in models inherit from a parent class.\nYou can define your own models and use the same functions to see how yours performs\n```python\nclass MyNewModel(Propofol):\n     def __init__(self, desired, arguments):\n        #my custom code to generate volumes and constants\n        self.v1 = a_constant * weight\n        self.v2 = a_constant * lean_body_mass\n        etc... etc...\n\n        #if you want to work with clearances rate constants must be generated\n        self.from_clearances(self)\n\n        #finally set up model \n        self.setup(self)\n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JMathiszig-Lee/PyTCI", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PyTCI", "package_url": "https://pypi.org/project/PyTCI/", "platform": "", "project_url": "https://pypi.org/project/PyTCI/", "project_urls": {"Homepage": "https://github.com/JMathiszig-Lee/PyTCI"}, "release_url": "https://pypi.org/project/PyTCI/1.1/", "requires_dist": null, "requires_python": "", "summary": "A package for target controlled infusions", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTCI</h1>\n<p>A python package for Target Controlled Infusions.</p>\n<p>Spawned from the NHS Hack Day project <a href=\"https://github.com/JMathiszig-Lee/Propofol\" rel=\"nofollow\">https://github.com/JMathiszig-Lee/Propofol</a>, this splits out useful code into a package and updates it to python3</p>\n<p><a href=\"https://travis-ci.org/JMathiszig-Lee/PyTCI\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1a46d98e73ca34658a13e211f181f103b23bc25/68747470733a2f2f7472617669732d63692e6f72672f4a4d61746869737a69672d4c65652f50795443492e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/JMathiszig-Lee/PyTCI?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa715955d39c1c4d73f1245064f74182d1fad7c3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a4d61746869737a69672d4c65652f50795443492f62616467652e7376673f6272616e63683d6d6173746572266b696c6c5f63616368653d31\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e92f14f4dce6d526961017183ccb6e33086b5740/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f5079544349\"></p>\n<h1>Installation</h1>\n<p>if using pip</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">PyTCI</span>\n</pre>\n<p>if using pipenv (you should, it's great)</p>\n<pre><span class=\"n\">pipenv</span> <span class=\"n\">install</span> <span class=\"n\">PyTCI</span>\n</pre>\n<h1>Usage</h1>\n<p>PyTCI currently supports the following:</p>\n<p><strong>Body Mass equations:</strong></p>\n<ul>\n<li>BMI</li>\n<li>Ideal body weight (Devine)</li>\n<li>Adjusted body weight</li>\n<li>James Equation</li>\n<li>Boer</li>\n<li>Hume(1966)</li>\n<li>Hume(1971)</li>\n<li>Janmahasation(2005)</li>\n<li>Al-Sallami</li>\n</ul>\n<p>example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyTCI.weights</span> <span class=\"kn\">import</span> <span class=\"n\">leanbodymass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leanbodymass</span><span class=\"o\">.</span><span class=\"n\">hume66</span><span class=\"p\">(</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">60</span> <span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"mf\">51.2</span>\n</pre>\n<h1>Models:</h1>\n<p><strong>Propofol</strong></p>\n<ul>\n<li>Schnider</li>\n<li>Marsh</li>\n<li>Eleveld</li>\n<li>Kataria</li>\n<li>Paedfusor</li>\n</ul>\n<p><strong>Remifentanil</strong></p>\n<ul>\n<li>Minto</li>\n<li>Eleveld</li>\n</ul>\n<p><strong>Alfentanil</strong></p>\n<ul>\n<li>Maitre</li>\n</ul>\n<p><strong>Dexmedetomidine</strong></p>\n<ul>\n<li>Hannivoort</li>\n<li>Dyck</li>\n</ul>\n<p>example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyTCI.models</span> <span class=\"kn\">import</span> <span class=\"n\">propofol</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span> <span class=\"o\">=</span> <span class=\"n\">propofol</span><span class=\"o\">.</span><span class=\"n\">Schnider</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">v2</span>\n<span class=\"mi\">24</span>\n</pre>\n<p>the class methods <code>give_drug</code> and <code>wait_time</code> can he used to model propofol kinetics</p>\n<p>example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyTCI.models</span> <span class=\"kn\">import</span> <span class=\"n\">propofol</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span> <span class=\"o\">=</span> <span class=\"n\">propofol</span><span class=\"o\">.</span><span class=\"n\">Marsh</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">give_drug</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">x1</span>\n<span class=\"mf\">9.746588693957115</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">wait_time</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">x1</span>\n<span class=\"mf\">7.438318565317236</span>\n</pre>\n<p><strong>Infusions</strong></p>\n<p>Infusions are currently only implemented for propofol</p>\n<p>The two methods available are <code>effect_bolus</code> and <code>plasma_infusion</code></p>\n<p>Effect bolus returns the bolus (in mg) needed over 10 seconds to achieve the desired effect site concentration. It's input is the desired target in ug/ml and returns the bolus needed in mg</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span> <span class=\"o\">=</span> <span class=\"n\">propofol</span><span class=\"o\">.</span><span class=\"n\">Schnider</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patient</span><span class=\"o\">.</span><span class=\"n\">effect_bolus</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"mf\">95.1</span>\n</pre>\n<p>the function uses a simple search to find a dose that gets within 2% of the desired concentration</p>\n<p>Plasma_infusion takes desired plasma concentration(ug/ml), desired total time (seconds) and the time period for each segment (seconds) and returns a python list of the required infusions rates from every segment witin the total time specified in mg/sec</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">propofol</span><span class=\"o\">.</span><span class=\"n\">Marsh</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plasma_infusion</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mf\">3.27269899102373</span><span class=\"p\">,</span> <span class=\"mf\">0.1453355022895698</span><span class=\"p\">,</span> <span class=\"mf\">0.14478000490919285</span><span class=\"p\">,</span> <span class=\"mf\">0.14422948797801816</span><span class=\"p\">,</span> <span class=\"mf\">0.1436839059972244</span><span class=\"p\">,</span> <span class=\"mf\">0.143143213884116</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plasma_infusion</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mf\">0.1420619352906052</span><span class=\"p\">,</span> <span class=\"mf\">0.1417017659270992</span><span class=\"p\">]</span>\n</pre>\n<p>The built in models inherit from a parent class.\nYou can define your own models and use the same functions to see how yours performs</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyNewModel</span><span class=\"p\">(</span><span class=\"n\">Propofol</span><span class=\"p\">):</span>\n     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">desired</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"p\">):</span>\n        <span class=\"c1\">#my custom code to generate volumes and constants</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">a_constant</span> <span class=\"o\">*</span> <span class=\"n\">weight</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">a_constant</span> <span class=\"o\">*</span> <span class=\"n\">lean_body_mass</span>\n        <span class=\"n\">etc</span><span class=\"o\">...</span> <span class=\"n\">etc</span><span class=\"o\">...</span>\n\n        <span class=\"c1\">#if you want to work with clearances rate constants must be generated</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">from_clearances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">#finally set up model </span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6345869, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6211149dc7b20e73dc26cb7730c58f4d", "sha256": "b11b0e7e1221df1bdfd13d17fdbb981aada3c8655116bbd6002cac194ea119fd"}, "downloads": -1, "filename": "PyTCI-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6211149dc7b20e73dc26cb7730c58f4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5820, "upload_time": "2019-02-16T14:53:50", "upload_time_iso_8601": "2019-02-16T14:53:50.446229Z", "url": "https://files.pythonhosted.org/packages/75/c3/1905d0ceb74874dbbfc691c31a8ff0c27b9c4fe2ae7ce511125aaf839180/PyTCI-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abc5eaa189f62d0865d2febe0e715c23", "sha256": "6269d7e5eed2a09b0a1ee733f8fbe2da858387747d77067be320c7867b972bcb"}, "downloads": -1, "filename": "PyTCI-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abc5eaa189f62d0865d2febe0e715c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4346, "upload_time": "2019-02-16T14:53:52", "upload_time_iso_8601": "2019-02-16T14:53:52.712180Z", "url": "https://files.pythonhosted.org/packages/66/e6/90676d792e35d0bbddfa43285dfd27ee347080b71a67c0a4b3fba26f3f06/PyTCI-0.0.1.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "98c504051e92c6207162afc8ca2f33b3", "sha256": "df911c9161da976d6d8ae1a06da0c77b2be89536f6868b36f00536a9a3571e38"}, "downloads": -1, "filename": "PyTCI-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "98c504051e92c6207162afc8ca2f33b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8038, "upload_time": "2019-02-24T09:31:42", "upload_time_iso_8601": "2019-02-24T09:31:42.199709Z", "url": "https://files.pythonhosted.org/packages/c7/fe/03ed436c4653527bbbcb3b8cd8acd09f30adfed60f3ffff66c08718f482f/PyTCI-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fe7f638a83b57920bb7d737a75d5a04", "sha256": "f9b6ecde40d5f2a3db340a45a89198a26efc6529178062104398d37f15a17c98"}, "downloads": -1, "filename": "PyTCI-0.1.tar.gz", "has_sig": false, "md5_digest": "5fe7f638a83b57920bb7d737a75d5a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5887, "upload_time": "2019-02-24T09:31:44", "upload_time_iso_8601": "2019-02-24T09:31:44.134871Z", "url": "https://files.pythonhosted.org/packages/59/b0/593f6df554ceb354cca61a08db9cb43f2e14e2bb51535a619b288308a92e/PyTCI-0.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "75c2134b01955bbe84e6bff86f362e42", "sha256": "27f2148fb4496a3c9b2074ec784a62a8d3f90a5b53635691453883e2709a996e"}, "downloads": -1, "filename": "PyTCI-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "75c2134b01955bbe84e6bff86f362e42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9683, "upload_time": "2019-05-13T06:58:32", "upload_time_iso_8601": "2019-05-13T06:58:32.230710Z", "url": "https://files.pythonhosted.org/packages/d8/24/77b4ded0282711cd9da57c87d1af97a8cda21990302be962d5b82183ecf1/PyTCI-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60ae40ac13622fa6ae4360b0fdb36173", "sha256": "5ab728d03d35cbdc174f7381bf65656abe96c4ddc1ee17e632b0e1fde23b5895"}, "downloads": -1, "filename": "PyTCI-0.3.tar.gz", "has_sig": false, "md5_digest": "60ae40ac13622fa6ae4360b0fdb36173", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6970, "upload_time": "2019-05-13T06:58:33", "upload_time_iso_8601": "2019-05-13T06:58:33.794955Z", "url": "https://files.pythonhosted.org/packages/da/98/2b476e4b8de4bc826ed4fa1ee6f9b5c850c907b47456be074bc3df9abc79/PyTCI-0.3.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2bc2211087671056f63afead52519606", "sha256": "6fde506b3dd50b5df1671885d3e007577567fa445719b7426fe6d97a70215960"}, "downloads": -1, "filename": "PyTCI-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2bc2211087671056f63afead52519606", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10776, "upload_time": "2019-07-11T10:40:25", "upload_time_iso_8601": "2019-07-11T10:40:25.494682Z", "url": "https://files.pythonhosted.org/packages/9c/a1/ac251872feb9b8db3fea6372b46729f661ad0a717eaf1510ea35b75da9d3/PyTCI-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8942f7bf0195cfe27967530bbbe9bc6", "sha256": "93147b34a4b9ed2a2dc739833829723aadb6394cbee9ef8d788621cfad42a152"}, "downloads": -1, "filename": "PyTCI-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a8942f7bf0195cfe27967530bbbe9bc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7750, "upload_time": "2019-07-11T10:40:27", "upload_time_iso_8601": "2019-07-11T10:40:27.089115Z", "url": "https://files.pythonhosted.org/packages/5e/3a/3b51f54919619c45cdd910e61feb62cb193a07a8be411a98ee4eef432c69/PyTCI-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "d7e2cb2ef6355adc5a554f99a8db0adc", "sha256": "c2633fa918345baa312b6d904d52bec428f124effa4bfe8b16489f2bfbe4372c"}, "downloads": -1, "filename": "PyTCI-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d7e2cb2ef6355adc5a554f99a8db0adc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15153, "upload_time": "2019-12-21T23:59:23", "upload_time_iso_8601": "2019-12-21T23:59:23.287285Z", "url": "https://files.pythonhosted.org/packages/8d/66/f5e78e2b5c78bb20b04c8c81ca413c19e922c0f5213488c2406c247539b2/PyTCI-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ac2cea0eb5b2724c8abb4bc4ccd7105", "sha256": "73d4cefd1fe0543c8445bbb124566636eb569b0f58607239ba7c159e27b8a1ee"}, "downloads": -1, "filename": "PyTCI-1.1.tar.gz", "has_sig": false, "md5_digest": "2ac2cea0eb5b2724c8abb4bc4ccd7105", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12510, "upload_time": "2019-12-21T23:59:25", "upload_time_iso_8601": "2019-12-21T23:59:25.178449Z", "url": "https://files.pythonhosted.org/packages/34/1e/b91e9f86b5ce95bc3bc082167542d517bc41491eccc563853154af2d74cd/PyTCI-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7e2cb2ef6355adc5a554f99a8db0adc", "sha256": "c2633fa918345baa312b6d904d52bec428f124effa4bfe8b16489f2bfbe4372c"}, "downloads": -1, "filename": "PyTCI-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d7e2cb2ef6355adc5a554f99a8db0adc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15153, "upload_time": "2019-12-21T23:59:23", "upload_time_iso_8601": "2019-12-21T23:59:23.287285Z", "url": "https://files.pythonhosted.org/packages/8d/66/f5e78e2b5c78bb20b04c8c81ca413c19e922c0f5213488c2406c247539b2/PyTCI-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ac2cea0eb5b2724c8abb4bc4ccd7105", "sha256": "73d4cefd1fe0543c8445bbb124566636eb569b0f58607239ba7c159e27b8a1ee"}, "downloads": -1, "filename": "PyTCI-1.1.tar.gz", "has_sig": false, "md5_digest": "2ac2cea0eb5b2724c8abb4bc4ccd7105", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12510, "upload_time": "2019-12-21T23:59:25", "upload_time_iso_8601": "2019-12-21T23:59:25.178449Z", "url": "https://files.pythonhosted.org/packages/34/1e/b91e9f86b5ce95bc3bc082167542d517bc41491eccc563853154af2d74cd/PyTCI-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:36 2020"}