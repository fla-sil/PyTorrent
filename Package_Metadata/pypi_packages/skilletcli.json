{"info": {"author": "abaumeister", "author_email": "abaumeister@paloaltonetworks.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "![skilletcli_icon](.github/icon.png)\n# SkilletCLI\n[![Build Status](https://travis-ci.org/adambaumeister/skilletcli.svg?branch=master)](https://travis-ci.org/adambaumeister/skilletcli)\n![coverage](.github/cov.svg)\n## Overview\nThis utility provides a command line interface to Palo Alto \"skillets\", \ncurated configuration templates designed to be imported into firewalls or Panorama.\n\n## Installation\n### Pre-requisites\nTo use skilletcli, a Git client must be installed.\n\n[Binaries for windows/OSX can be found here](https://git-scm.com/)\n\nLinux users can use their preferred package manager.\n\n### Getting the code\n**windows**\n\n[Download the latest release from the releases page.](https://github.com/adambaumeister/skilletcli/releases)\n\n**mac**\n```bash\ncommand -v git ; if [[ $? != 0 ]] ; then echo \"Git not installed.\" ; else curl -L https://github.com/adambaumeister/skilletcli/releases/latest/download/skilletcli -o skilletcli ; chmod +x skilletcli ; fi\n```\nNote for mac users: Skilletcli is built on macOS 10.14. Newer/older builds may not be compatible and in that case, you need to run\nfrom source.\n\n**linux**\n```bash\ncommand -v git ; if [[ $? != 0 ]] ; then echo \"Git not installed.\" ; else curl -L https://github.com/adambaumeister/skilletcli/releases/latest/download/skilletcli -o skilletcli ; chmod +x skilletcli ; fi\n```\n\n### Preparing the environment\nSkilletCLI requires a variable file to be populated before use.\n\nThis file is used to template various snippets with environment specific information.\nBy default, this file is named config_variables.yaml, and it is retrieved from the current directory (_./config_variables.yml_)\n\n[click here to see a complete example, populated with default values](config_variables.yaml)\n\nIf this file is not specified or is missing/unavailable, defaults will be used. \n\n## Usage\n### Overview of skillet layout\nSkilletCLI returns a structure like the below:\n\nSkillet Collection/Skillets/Snippet stacks/Snippet\n\nA skillet collection is a group of skillets associated with a type, such as PANOS or PANORAMA. \nA snippet stack is a collection of snippets that have a specific use case.\n\nBy default, SkilletCLI will use the device type of the target firewall to determine which skillet type to use, and \n\"snippets\" for the snippet stack to use.\n\n### Basic usage\n*list all available snippets, skillets, and skillet collections*\n```bash\nskilletcli\n```\nThis command lists all the available snippets.\n\n*push a snippet to a device*\n```bash\nskilletcli address\n```\nThis will push a single snippet \"address\" to the device, prompting for all login settings.\n\n*push multiple snippets*\n```bash\nskilletcli address tag external_list\n```\nSame as the above except push multiple snippets in the one command. As many snippets as is required \ncan be pushed like this.\n\n### Key storage\nAPIkeys can be stored locally to avoid the use of environment variables for command line flags.\n\nThe keystore can be enabled by passing the flag --enable_keystore when running any skcli command. If authentication is sucessful, the generated API key\nwill be stored in $HOME/.skcli.json.\n\nAfter the keystore has been enabled once, the flag does not need to be re-specified on subsequent runs.\n```\n# Enable the keystore\nskilletcli --enable_keystore <args>\n```\n```\n# Clear the keystore \nskilletcli --clear_keystore\n```\n### Environment variables\nSkilletCLI allows you to use environment variables instead of an interactive prompt.\n\nThe variables are:\n* SKCLI_USERNAME\n* SKCLI_PASSWORD\n* SKCLI_ADDRESS\n\n### Experimental: HTTP-based skillet retrieval\nSkillets will eventually be hosted centrally, via a publicly accessible API.\nIf you retrieve skillets this way, you do _not_ need a Git client.\n\n**At the moment, this functionality is still in dev, so use at your own risk.**\n\nTo leverage this functionality add the flags --repotype and --repopath, as below.\n```bash\nskilletcli --repotype api --repopath https://skillet-deploy.appspot.com\n```\n\n\n## Developing SkilletCLI\nContributing to SkilletCLI requires Python 3.6+ installed on your machine.\n\nAfter it is installed, it's recommended to create a virtual environment so the code is standalone.\n\n```bash\npython3 -m venv venv\n# Windows\nvenv/scripts/activate\n# *nix\nsource venv/scripts/activate\n```\n\nClone the code and install the module requirements.\n\n```bash\ngit clone https://github.com/adambaumeister/skilletcli.git\ncd skilletcli\npip install -r requirements.txt\n```\n\nYou are now ready to make your changes!\n\n### Testing\nTesting of skilletcli is broken up into two logical processes\n1. Unit testing, or the testing of standalone functions\n2. Integration testing, or the testing of functions against real PANOS devices\n\nAll testing is initatiated using *pytest*. \n```bash\npytest\n```\n\nBy default, only unit tests will be run. To run integration testing, you must specify the standard\nSKCLI environment variables (address, username, password) of the device to test against\nas well as an additional env var: *SKCLI_DEVICE_TEST*. \nAfter setting up the environment, simply run *pytest* as normal.\n\nPytest is run automatically as part of CI using TravisCI whenever changes are detected to Master. CI only runs unit tests.\n\n### Test Coverage\nAfter updating skcli, you can rerun the coverage tests and update the little icon using the below.\n```bash\ncoverage run --omit ./venv* -m pytest\ncoverage-badge -o .github/cov.svg\n```\n\n### Packaging\nBinary packaging is done using pyinstaller, managed by Travis. Packaging occurs on the publish of a release\n(tag) on the master branch.  \n\nPypi distribution is also handled via Travis on each tagged release. \n\nManual pypi packaging:\n```bash\npip install setuptools wheel\npip install twine\npython setup.py bdist bdist_wheel\ntwine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/adambaumeister/skilletcli/releases/latest/download/skilletcli.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adambaumeister/skilletcli", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "skilletcli", "package_url": "https://pypi.org/project/skilletcli/", "platform": "", "project_url": "https://pypi.org/project/skilletcli/", "project_urls": {"Download": "https://github.com/adambaumeister/skilletcli/releases/latest/download/skilletcli.tar.gz", "Homepage": "https://github.com/adambaumeister/skilletcli"}, "release_url": "https://pypi.org/project/skilletcli/2.0.1/", "requires_dist": null, "requires_python": "", "summary": "Packages and CLI tools for interacting with hosted Skillets.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"skilletcli_icon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/931968806e75ebfea94aed5a0f219f97046d46c1/2e6769746875622f69636f6e2e706e67\"></p>\n<h1>SkilletCLI</h1>\n<p><a href=\"https://travis-ci.org/adambaumeister/skilletcli\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8bf8957d8e1ffdbf6eafcf34f9ea5ebaede4356/68747470733a2f2f7472617669732d63692e6f72672f6164616d6261756d6569737465722f736b696c6c6574636c692e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53d834f38c13a608e036fb187c42b54bdc08c8cc/2e6769746875622f636f762e737667\"></p>\n<h2>Overview</h2>\n<p>This utility provides a command line interface to Palo Alto \"skillets\",\ncurated configuration templates designed to be imported into firewalls or Panorama.</p>\n<h2>Installation</h2>\n<h3>Pre-requisites</h3>\n<p>To use skilletcli, a Git client must be installed.</p>\n<p><a href=\"https://git-scm.com/\" rel=\"nofollow\">Binaries for windows/OSX can be found here</a></p>\n<p>Linux users can use their preferred package manager.</p>\n<h3>Getting the code</h3>\n<p><strong>windows</strong></p>\n<p><a href=\"https://github.com/adambaumeister/skilletcli/releases\" rel=\"nofollow\">Download the latest release from the releases page.</a></p>\n<p><strong>mac</strong></p>\n<pre><span class=\"nb\">command</span> -v git <span class=\"p\">;</span> <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"nv\">$?</span> !<span class=\"o\">=</span> <span class=\"m\">0</span> <span class=\"o\">]]</span> <span class=\"p\">;</span> <span class=\"k\">then</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"Git not installed.\"</span> <span class=\"p\">;</span> <span class=\"k\">else</span> curl -L https://github.com/adambaumeister/skilletcli/releases/latest/download/skilletcli -o skilletcli <span class=\"p\">;</span> chmod +x skilletcli <span class=\"p\">;</span> <span class=\"k\">fi</span>\n</pre>\n<p>Note for mac users: Skilletcli is built on macOS 10.14. Newer/older builds may not be compatible and in that case, you need to run\nfrom source.</p>\n<p><strong>linux</strong></p>\n<pre><span class=\"nb\">command</span> -v git <span class=\"p\">;</span> <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"nv\">$?</span> !<span class=\"o\">=</span> <span class=\"m\">0</span> <span class=\"o\">]]</span> <span class=\"p\">;</span> <span class=\"k\">then</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"Git not installed.\"</span> <span class=\"p\">;</span> <span class=\"k\">else</span> curl -L https://github.com/adambaumeister/skilletcli/releases/latest/download/skilletcli -o skilletcli <span class=\"p\">;</span> chmod +x skilletcli <span class=\"p\">;</span> <span class=\"k\">fi</span>\n</pre>\n<h3>Preparing the environment</h3>\n<p>SkilletCLI requires a variable file to be populated before use.</p>\n<p>This file is used to template various snippets with environment specific information.\nBy default, this file is named config_variables.yaml, and it is retrieved from the current directory (<em>./config_variables.yml</em>)</p>\n<p><a href=\"config_variables.yaml\" rel=\"nofollow\">click here to see a complete example, populated with default values</a></p>\n<p>If this file is not specified or is missing/unavailable, defaults will be used.</p>\n<h2>Usage</h2>\n<h3>Overview of skillet layout</h3>\n<p>SkilletCLI returns a structure like the below:</p>\n<p>Skillet Collection/Skillets/Snippet stacks/Snippet</p>\n<p>A skillet collection is a group of skillets associated with a type, such as PANOS or PANORAMA.\nA snippet stack is a collection of snippets that have a specific use case.</p>\n<p>By default, SkilletCLI will use the device type of the target firewall to determine which skillet type to use, and\n\"snippets\" for the snippet stack to use.</p>\n<h3>Basic usage</h3>\n<p><em>list all available snippets, skillets, and skillet collections</em></p>\n<pre>skilletcli\n</pre>\n<p>This command lists all the available snippets.</p>\n<p><em>push a snippet to a device</em></p>\n<pre>skilletcli address\n</pre>\n<p>This will push a single snippet \"address\" to the device, prompting for all login settings.</p>\n<p><em>push multiple snippets</em></p>\n<pre>skilletcli address tag external_list\n</pre>\n<p>Same as the above except push multiple snippets in the one command. As many snippets as is required\ncan be pushed like this.</p>\n<h3>Key storage</h3>\n<p>APIkeys can be stored locally to avoid the use of environment variables for command line flags.</p>\n<p>The keystore can be enabled by passing the flag --enable_keystore when running any skcli command. If authentication is sucessful, the generated API key\nwill be stored in $HOME/.skcli.json.</p>\n<p>After the keystore has been enabled once, the flag does not need to be re-specified on subsequent runs.</p>\n<pre><code># Enable the keystore\nskilletcli --enable_keystore &lt;args&gt;\n</code></pre>\n<pre><code># Clear the keystore \nskilletcli --clear_keystore\n</code></pre>\n<h3>Environment variables</h3>\n<p>SkilletCLI allows you to use environment variables instead of an interactive prompt.</p>\n<p>The variables are:</p>\n<ul>\n<li>SKCLI_USERNAME</li>\n<li>SKCLI_PASSWORD</li>\n<li>SKCLI_ADDRESS</li>\n</ul>\n<h3>Experimental: HTTP-based skillet retrieval</h3>\n<p>Skillets will eventually be hosted centrally, via a publicly accessible API.\nIf you retrieve skillets this way, you do <em>not</em> need a Git client.</p>\n<p><strong>At the moment, this functionality is still in dev, so use at your own risk.</strong></p>\n<p>To leverage this functionality add the flags --repotype and --repopath, as below.</p>\n<pre>skilletcli --repotype api --repopath https://skillet-deploy.appspot.com\n</pre>\n<h2>Developing SkilletCLI</h2>\n<p>Contributing to SkilletCLI requires Python 3.6+ installed on your machine.</p>\n<p>After it is installed, it's recommended to create a virtual environment so the code is standalone.</p>\n<pre>python3 -m venv venv\n<span class=\"c1\"># Windows</span>\nvenv/scripts/activate\n<span class=\"c1\"># *nix</span>\n<span class=\"nb\">source</span> venv/scripts/activate\n</pre>\n<p>Clone the code and install the module requirements.</p>\n<pre>git clone https://github.com/adambaumeister/skilletcli.git\n<span class=\"nb\">cd</span> skilletcli\npip install -r requirements.txt\n</pre>\n<p>You are now ready to make your changes!</p>\n<h3>Testing</h3>\n<p>Testing of skilletcli is broken up into two logical processes</p>\n<ol>\n<li>Unit testing, or the testing of standalone functions</li>\n<li>Integration testing, or the testing of functions against real PANOS devices</li>\n</ol>\n<p>All testing is initatiated using <em>pytest</em>.</p>\n<pre>pytest\n</pre>\n<p>By default, only unit tests will be run. To run integration testing, you must specify the standard\nSKCLI environment variables (address, username, password) of the device to test against\nas well as an additional env var: <em>SKCLI_DEVICE_TEST</em>.\nAfter setting up the environment, simply run <em>pytest</em> as normal.</p>\n<p>Pytest is run automatically as part of CI using TravisCI whenever changes are detected to Master. CI only runs unit tests.</p>\n<h3>Test Coverage</h3>\n<p>After updating skcli, you can rerun the coverage tests and update the little icon using the below.</p>\n<pre>coverage run --omit ./venv* -m pytest\ncoverage-badge -o .github/cov.svg\n</pre>\n<h3>Packaging</h3>\n<p>Binary packaging is done using pyinstaller, managed by Travis. Packaging occurs on the publish of a release\n(tag) on the master branch.</p>\n<p>Pypi distribution is also handled via Travis on each tagged release.</p>\n<p>Manual pypi packaging:</p>\n<pre>pip install setuptools wheel\npip install twine\npython setup.py bdist bdist_wheel\ntwine upload --repository-url https://test.pypi.org/legacy/ dist/*\n</pre>\n\n          </div>"}, "last_serial": 6412773, "releases": {"1.9.6": [{"comment_text": "", "digests": {"md5": "f03d00f676e0a010224ceef866c12613", "sha256": "f5f3d1fdc7cc7a2bc48a96d3e743b9f46a2bc7305ba60648049342973e247b01"}, "downloads": -1, "filename": "skilletcli-1.9.6.tar.gz", "has_sig": false, "md5_digest": "f03d00f676e0a010224ceef866c12613", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15541, "upload_time": "2019-08-28T04:46:37", "upload_time_iso_8601": "2019-08-28T04:46:37.629612Z", "url": "https://files.pythonhosted.org/packages/09/b6/867a86c9737707c40f67937397367ffe4e0fd41b7b0b49056dc3e50d24d2/skilletcli-1.9.6.tar.gz", "yanked": false}], "1.9.9": [{"comment_text": "", "digests": {"md5": "f6a2c11564619adf9a98d22e67de7c80", "sha256": "a3682fb68f4ff3a6999d9f30305608fd4a3441205b085460c1822c450270a99a"}, "downloads": -1, "filename": "skilletcli-1.9.9.tar.gz", "has_sig": false, "md5_digest": "f6a2c11564619adf9a98d22e67de7c80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16441, "upload_time": "2019-09-09T04:41:22", "upload_time_iso_8601": "2019-09-09T04:41:22.696068Z", "url": "https://files.pythonhosted.org/packages/1c/47/391fc0194ff99b1a4ba107a939554cbbb7f2a1f141741a4ce65b16a71ab9/skilletcli-1.9.9.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "260ab7fbc247e0f199acb9024f8dfbf1", "sha256": "c3488c2048262ec55f173bfcd2d9877ea11d2f47cf3a7a9c0bfc7847cffd81d4"}, "downloads": -1, "filename": "skilletcli-2.0.0.tar.gz", "has_sig": false, "md5_digest": "260ab7fbc247e0f199acb9024f8dfbf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17129, "upload_time": "2019-09-20T07:24:20", "upload_time_iso_8601": "2019-09-20T07:24:20.126995Z", "url": "https://files.pythonhosted.org/packages/b8/b2/2a529001b2db4977c19d5760329de71696e54cbace33ba0b615f0406b146/skilletcli-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "9e9303ba7aeb29125da4da74331f59aa", "sha256": "4609bda89fb18f23695945cabcf0249e460e9e11bfe9b8c8b6a75328d5039ee4"}, "downloads": -1, "filename": "skilletcli-2.0.1.tar.gz", "has_sig": false, "md5_digest": "9e9303ba7aeb29125da4da74331f59aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17135, "upload_time": "2020-01-08T02:15:58", "upload_time_iso_8601": "2020-01-08T02:15:58.076901Z", "url": "https://files.pythonhosted.org/packages/e9/52/11d41bce82266d5741b175256c89c172e2caf9f9e3d2873a941515cda88c/skilletcli-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e9303ba7aeb29125da4da74331f59aa", "sha256": "4609bda89fb18f23695945cabcf0249e460e9e11bfe9b8c8b6a75328d5039ee4"}, "downloads": -1, "filename": "skilletcli-2.0.1.tar.gz", "has_sig": false, "md5_digest": "9e9303ba7aeb29125da4da74331f59aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17135, "upload_time": "2020-01-08T02:15:58", "upload_time_iso_8601": "2020-01-08T02:15:58.076901Z", "url": "https://files.pythonhosted.org/packages/e9/52/11d41bce82266d5741b175256c89c172e2caf9f9e3d2873a941515cda88c/skilletcli-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:04 2020"}