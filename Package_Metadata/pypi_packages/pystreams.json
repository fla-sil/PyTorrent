{"info": {"author": "Sergey Arkhipov", "author_email": "serge@aerialsounds.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "streams\n=======\n\n.. image:: https://travis-ci.org/9seconds/streams.svg?branch=master\n   :target: https://travis-ci.org/9seconds/streams\n\n.. image:: https://badge.fury.io/py/streams.png\n    :target: https://badge.fury.io/py/streams.svg\n\nThis small library provides you with convenient streams deeply inspired by\nJava 8 release. That release contains not only lambdas but pretty cool\nStream API which provides developers with possibilities to build sequental\nand parallel aggregation on big collections or infinite data flows.\n\nFrankly  I am not the Java guy but I have more or less the same workflow on\nmy previous projects where I actively used ``concurrent.futures`` or Gevent\npools to process pipelines of incoming data to reduce them to some scalar\nvalue or aggregated data set. As a rule I used that approach to manage big or\nunpredictable collections of similar data using some appropriate concurrency\nwhere it is possible (threads on computations, coroutines on networking, etc.)\n\nI saw how people are using the same pattern with ORMs but for generic cases\nthey still are trying to avoid mapping, filtering and reducing the results.\nActually this library tries to help.\n\nPlease checkout `official documentation <http://streams.readthedocs.org>`_\nto get more information.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/9seconds/streams/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pystreams", "package_url": "https://pypi.org/project/pystreams/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pystreams/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/9seconds/streams/"}, "release_url": "https://pypi.org/project/pystreams/0.6/", "requires_dist": null, "requires_python": null, "summary": "Streams inspired by Java 8", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/9seconds/streams\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/9seconds/streams.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca00e28b5605e1751fd3aabf5e3d01747c1d6dfc/68747470733a2f2f7472617669732d63692e6f72672f397365636f6e64732f73747265616d732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/streams.svg\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/streams.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6303f044b594ddc8c750a614eea412e6a3e3e1bf/68747470733a2f2f62616467652e667572792e696f2f70792f73747265616d732e706e67\"></a>\n<p>This small library provides you with convenient streams deeply inspired by\nJava 8 release. That release contains not only lambdas but pretty cool\nStream API which provides developers with possibilities to build sequental\nand parallel aggregation on big collections or infinite data flows.</p>\n<p>Frankly  I am not the Java guy but I have more or less the same workflow on\nmy previous projects where I actively used <tt>concurrent.futures</tt> or Gevent\npools to process pipelines of incoming data to reduce them to some scalar\nvalue or aggregated data set. As a rule I used that approach to manage big or\nunpredictable collections of similar data using some appropriate concurrency\nwhere it is possible (threads on computations, coroutines on networking, etc.)</p>\n<p>I saw how people are using the same pattern with ORMs but for generic cases\nthey still are trying to avoid mapping, filtering and reducing the results.\nActually this library tries to help.</p>\n<p>Please checkout <a href=\"http://streams.readthedocs.org\" rel=\"nofollow\">official documentation</a>\nto get more information.</p>\n\n          </div>"}, "last_serial": 1046080, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "b98a28f98bc94f954acc3b184531c37f", "sha256": "7317a5daf7837dcebc89813cb9d32ac883319bc5088d83daa2977b88292b8808"}, "downloads": -1, "filename": "pystreams-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b98a28f98bc94f954acc3b184531c37f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14558, "upload_time": "2014-03-30T17:13:16", "upload_time_iso_8601": "2014-03-30T17:13:16.735978Z", "url": "https://files.pythonhosted.org/packages/81/22/820295f69305e85d62adf19784ee3b2bc75d895f17b4c1c0b7ddaa3cf44a/pystreams-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9762e9c0d9a98488824751a9e46adfb2", "sha256": "71ac69e3b5d2493877c7781cc8b556ded6de26996850c336de0bb61d4b3f61aa"}, "downloads": -1, "filename": "pystreams-0.6.tar.gz", "has_sig": false, "md5_digest": "9762e9c0d9a98488824751a9e46adfb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11882, "upload_time": "2014-03-30T17:12:57", "upload_time_iso_8601": "2014-03-30T17:12:57.692820Z", "url": "https://files.pythonhosted.org/packages/93/e9/919ca0945dfd48955b4d17ec6237e3bb91515b6f0a3af1b670efb5791a75/pystreams-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b98a28f98bc94f954acc3b184531c37f", "sha256": "7317a5daf7837dcebc89813cb9d32ac883319bc5088d83daa2977b88292b8808"}, "downloads": -1, "filename": "pystreams-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b98a28f98bc94f954acc3b184531c37f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14558, "upload_time": "2014-03-30T17:13:16", "upload_time_iso_8601": "2014-03-30T17:13:16.735978Z", "url": "https://files.pythonhosted.org/packages/81/22/820295f69305e85d62adf19784ee3b2bc75d895f17b4c1c0b7ddaa3cf44a/pystreams-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9762e9c0d9a98488824751a9e46adfb2", "sha256": "71ac69e3b5d2493877c7781cc8b556ded6de26996850c336de0bb61d4b3f61aa"}, "downloads": -1, "filename": "pystreams-0.6.tar.gz", "has_sig": false, "md5_digest": "9762e9c0d9a98488824751a9e46adfb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11882, "upload_time": "2014-03-30T17:12:57", "upload_time_iso_8601": "2014-03-30T17:12:57.692820Z", "url": "https://files.pythonhosted.org/packages/93/e9/919ca0945dfd48955b4d17ec6237e3bb91515b6f0a3af1b670efb5791a75/pystreams-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:53 2020"}