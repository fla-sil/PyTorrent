{"info": {"author": "Niko J\u00e4rvinen", "author_email": "nbjarvinen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "**Dynamic input-output caching for deterministic functions**\n\n|pypi| |docs| |license|\n\nFeatures\n========\n\n* Keep It Simple, Stupid: A single decorator that does everything for you\n* Automagically detects if the decorated function is changed and transparently\n  updates cache accordingly without ever returning cached results of the old\n  function.\n\nInstallation\n============\n\n:code:`pip3 install dyncache`\n\nExamples\n========\n\n.. code:: python3\n   \n   # Import the class\n   from dyncache import Cache\n\n\n   # Use with default options. It will create a file \"circle_area.dyncache\" into\n   # the current directory.\n   @Cache()\n   def circle_area(radius):\n       return 3.14159 * (radius ** 2)\n       \n\n   # Empty parentheses are not required for the decorator.\n   @Cache\n   def circle_area(radius):\n       return 3.14159 * (radius ** 2)\n\n\n   circle_area(2)  # Calculates and returns\n   circle_area(3)  # Calculates and returns\n   circle_area(2)  # Returns from cache\n\n\n   # Saves the cache to /tmp/hello.world.\n   @Cache(root=\"/tmp\", filename=\"hello.world\")\n   def circle_area(radius):\n       ...\n\n\n   # Use for function with large input/output -values.\n   @Cache(largeitems=True)\n   def load_all_api_data_for_a_day(day):\n       ...\n\n\n   # When items are small and cache would update too often, setting autowrite to\n   # False lets you control when the cached data is written to the file.\n   cache = Cache(autowrite=False)\n   @cache\n   def really_frequent_function(a, b):\n       ...\n   ...\n   cache.write()  # Write cache data to the file\n   sys.exit(0)\n\n\nContributing\n============\n\n* Send any issues to GitHub's issue tracker.\n* Before sending a pull request, format it with `Black`_ (-Sl79)\n* Any changes must be updated to the documentation\n* All pull requests must be tested with tox (if you are using pyenv, add the installed versions for py35-py38 and pypy3 to .python-version at the root of this repository before running tox)\n\n\n.. _`Black`: https://github.com/psf/black\n\n.. |pypi| image:: https://img.shields.io/pypi/v/dyncache.svg\n    :alt: PyPI\n    :target: https://pypi.org/project/dyncache/\n.. |docs| image:: https://readthedocs.org/projects/dyncache/badge/?version=latest\n    :alt: Read the Docs\n    :target: http://dyncache.readthedocs.io/en/latest/\n.. |license| image:: https://img.shields.io/github/license/b10011/dyncache.svg\n    :alt: License\n    :target: https://github.com/b10011/dyncache/blob/master/LICENSE\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/b10011/dyncache", "keywords": "function,cache,dataset,ai,machine learning", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dyncache", "package_url": "https://pypi.org/project/dyncache/", "platform": "", "project_url": "https://pypi.org/project/dyncache/", "project_urls": {"Documentation": "https://dyncache.readthedocs.io/en/latest/", "Homepage": "https://github.com/b10011/dyncache", "Repository": "https://github.com/b10011/dyncache"}, "release_url": "https://pypi.org/project/dyncache/0.1.1/", "requires_dist": ["cloudpickle (>=1.3.0,<2.0.0)", "click (>=7.1.1,<8.0.0)"], "requires_python": ">=3.5,<4.0", "summary": "Dynamic input-output caching for deterministic functions", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Dynamic input-output caching for deterministic functions</strong></p>\n<p><a href=\"https://pypi.org/project/dyncache/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db143d2e1c3735d47d92330564120b9d5599cb1d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f64796e63616368652e737667\"></a> <a href=\"http://dyncache.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Read the Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acd88cf064c02bd9145a65e1a08b5272bf754bf9/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f64796e63616368652f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://github.com/b10011/dyncache/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/098b0ccbbcff41d7e818952b66c5d10e20d7f169/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6231303031312f64796e63616368652e737667\"></a></p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Keep It Simple, Stupid: A single decorator that does everything for you</li>\n<li>Automagically detects if the decorated function is changed and transparently\nupdates cache accordingly without ever returning cached results of the old\nfunction.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><code>pip3 install dyncache</code></p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre><span class=\"c1\"># Import the class</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dyncache</span> <span class=\"kn\">import</span> <span class=\"n\">Cache</span>\n\n\n<span class=\"c1\"># Use with default options. It will create a file \"circle_area.dyncache\" into</span>\n<span class=\"c1\"># the current directory.</span>\n<span class=\"nd\">@Cache</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">circle_area</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mf\">3.14159</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">radius</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Empty parentheses are not required for the decorator.</span>\n<span class=\"nd\">@Cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">circle_area</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mf\">3.14159</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">radius</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">circle_area</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Calculates and returns</span>\n<span class=\"n\">circle_area</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Calculates and returns</span>\n<span class=\"n\">circle_area</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns from cache</span>\n\n\n<span class=\"c1\"># Saves the cache to /tmp/hello.world.</span>\n<span class=\"nd\">@Cache</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"s2\">\"/tmp\"</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"hello.world\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">circle_area</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Use for function with large input/output -values.</span>\n<span class=\"nd\">@Cache</span><span class=\"p\">(</span><span class=\"n\">largeitems</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_all_api_data_for_a_day</span><span class=\"p\">(</span><span class=\"n\">day</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># When items are small and cache would update too often, setting autowrite to</span>\n<span class=\"c1\"># False lets you control when the cached data is written to the file.</span>\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"n\">autowrite</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"nd\">@cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">really_frequent_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>  <span class=\"c1\"># Write cache data to the file</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ul>\n<li>Send any issues to GitHub\u2019s issue tracker.</li>\n<li>Before sending a pull request, format it with <a href=\"https://github.com/psf/black\" rel=\"nofollow\">Black</a> (-Sl79)</li>\n<li>Any changes must be updated to the documentation</li>\n<li>All pull requests must be tested with tox (if you are using pyenv, add the installed versions for py35-py38 and pypy3 to .python-version at the root of this repository before running tox)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7020187, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "69fc0b1aa8f5a14d20a66ada59734508", "sha256": "63d15582077d8861bfc8b46072fe94320c0e7431db51669e8ad773ec939f2941"}, "downloads": -1, "filename": "dyncache-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "69fc0b1aa8f5a14d20a66ada59734508", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8406, "upload_time": "2020-04-14T02:13:11", "upload_time_iso_8601": "2020-04-14T02:13:11.587271Z", "url": "https://files.pythonhosted.org/packages/22/ec/a96f6925159347cb51a9a83705630ce33072332869f57b4b9d6d05ed0742/dyncache-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39db6654c812917b680efbd845b05864", "sha256": "b76346662a9295758d79a610386062654752d7bc3a013e5b555a6ffedbf79859"}, "downloads": -1, "filename": "dyncache-0.1.0.tar.gz", "has_sig": false, "md5_digest": "39db6654c812917b680efbd845b05864", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 8497, "upload_time": "2020-04-14T02:13:13", "upload_time_iso_8601": "2020-04-14T02:13:13.854819Z", "url": "https://files.pythonhosted.org/packages/ef/94/828eb9acef25a018a21fddbfb0b0e15b493acfbfe599bd64ad57ed4b6a08/dyncache-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4e080947db26d6c4970bea45cbd9eead", "sha256": "f4474789165136f99005b4bc0031b0358cd5ba264b97f2428ffd77605596e66d"}, "downloads": -1, "filename": "dyncache-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e080947db26d6c4970bea45cbd9eead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 5780, "upload_time": "2020-04-14T21:03:23", "upload_time_iso_8601": "2020-04-14T21:03:23.472781Z", "url": "https://files.pythonhosted.org/packages/d7/81/24c0f5ea0672f2cc87064139f30df2d11051e067b18078de5df5242bdbc9/dyncache-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5e7641c0273a149f8d37e68042bea6d", "sha256": "ae6e8c4fdad8dc04003bf5ad1011ac42b9123b1cabcea72908739ae5a6f4a761"}, "downloads": -1, "filename": "dyncache-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5e7641c0273a149f8d37e68042bea6d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 5527, "upload_time": "2020-04-14T21:03:24", "upload_time_iso_8601": "2020-04-14T21:03:24.939597Z", "url": "https://files.pythonhosted.org/packages/af/5a/c19422aca8d88244ba7cfe54ed463b78c712b5e54a6dee06e1306e730bac/dyncache-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e080947db26d6c4970bea45cbd9eead", "sha256": "f4474789165136f99005b4bc0031b0358cd5ba264b97f2428ffd77605596e66d"}, "downloads": -1, "filename": "dyncache-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e080947db26d6c4970bea45cbd9eead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 5780, "upload_time": "2020-04-14T21:03:23", "upload_time_iso_8601": "2020-04-14T21:03:23.472781Z", "url": "https://files.pythonhosted.org/packages/d7/81/24c0f5ea0672f2cc87064139f30df2d11051e067b18078de5df5242bdbc9/dyncache-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5e7641c0273a149f8d37e68042bea6d", "sha256": "ae6e8c4fdad8dc04003bf5ad1011ac42b9123b1cabcea72908739ae5a6f4a761"}, "downloads": -1, "filename": "dyncache-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5e7641c0273a149f8d37e68042bea6d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 5527, "upload_time": "2020-04-14T21:03:24", "upload_time_iso_8601": "2020-04-14T21:03:24.939597Z", "url": "https://files.pythonhosted.org/packages/af/5a/c19422aca8d88244ba7cfe54ed463b78c712b5e54a6dee06e1306e730bac/dyncache-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:39 2020"}