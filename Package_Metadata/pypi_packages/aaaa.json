{"info": {"author": "Stuart WD Grieve", "author_email": "stuart@swdg.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "## aaaa\n\n[![Build Status](https://travis-ci.org/sgrieve/aaaa.svg?branch=master)](https://travis-ci.org/sgrieve/aaaa) [![Coverage](https://img.shields.io/codecov/c/github/sgrieve/aaaa)](https://codecov.io/gh/sgrieve/aaaa) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aaaa) ![PyPI - License](https://img.shields.io/pypi/l/aaaa)\n\nHave you ever been creating an animated plot by saving a series of images and joining them together? The obvious way to name these frames would be using numbers:\n\n```python\nfor i in range(15):\n    plt.savefig('{}.png'.format(i))\n```\n\nBut many operating systems will order these files as follows:\n\n```bash\n0.png\n1.png\n10.png\n11.png\n12.png\n13.png\n14.png\n2.png\n3.png\n4.png\n5.png\n6.png\n7.png\n8.png\n9.png\n```\n\nThereby screwing up the order of your animation.\n\nThis is where `aaaa` (pronounced like a scream) comes in! `aaaa` has a single class which creates an iterator that yields an alphabetical sequence `aa`, `ab`, `ac`, etc. So we can change our above example:\n\n```python\nfrom aaaa import aaaa\n\nfname = aaaa()\n\nfor i in range(15):\n    plt.savefig('{}.png'.format(next(fname)))\n```\n\nWhich will preserve the order of the files in your operating system:\n\n```bash\naa.png\nab.png\nac.png\nad.png\nae.png\naf.png\nag.png\nah.png\nai.png\naj.png\nak.png\nal.png\nam.png\nan.png\nao.png\n```\n\nFile sorting can differ between operating systems, sometimes with [serious results](https://arstechnica.com/information-technology/2019/10/chemists-discover-cross-platform-python-scripts-not-so-cross-platform/).\n\n\n### Installation\n\n`aaaa` has no dependences and is tested on Python 3.5 through 3.8 and it can be installed via pip:\n\n```bash\npip install aaaa\n```\n\n### Usage\n\nThere are two ways to use `aaaa`. Firstly, you can loop directly over an `aaaa` instance, until there are no items left (in this case the last value of name will be `zz`):\n\n```python\nfrom aaaa import aaaa\n\nnames = aaaa()\n\nfor name in names:\n    print(name)\n\n```\n\nOr, you can use the `next()` operator to only get as many values as you need:\n\n```python\nfrom aaaa import aaaa\n\nnames = aaaa()\n\nfor i in range(10):\n    print(next(names))\n\n```\n\nThe default length of an output from `aaaa` is 2 characters long - this will allow you to order 676 files. If you need a larger or smaller amount of characters you can specify this as an argument to `aaaa`:\n\n```python\nfrom aaaa import aaaa\n\nnames_short = aaaa(1)\nnames_long = aaaa(4)\n\nprint(next(names_short), next(names_long))\n# Outputs --> a aaaa\n\n```\n\nBeyond four or five characters in length, initializing `aaaa` becomes prohibitively slow. Note that four characters gives you **456976** permutations - so you should never need more than this.\n\n\n### Contribute\n\nFor my purposes this package is feature complete, but if you find a bug, or have a feature request, open an issue, or create a pull request!\n\n\n### License\n\nThe project is licensed under the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sgrieve/aaaa", "keywords": "filenames,alphabetize", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aaaa", "package_url": "https://pypi.org/project/aaaa/", "platform": "", "project_url": "https://pypi.org/project/aaaa/", "project_urls": {"Homepage": "http://github.com/sgrieve/aaaa"}, "release_url": "https://pypi.org/project/aaaa/1.0/", "requires_dist": null, "requires_python": "", "summary": "Alphabetize output filenames", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>aaaa</h2>\n<p><a href=\"https://travis-ci.org/sgrieve/aaaa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2b41f69f513b6266f954d751318374f0871455d/68747470733a2f2f7472617669732d63692e6f72672f736772696576652f616161612e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/sgrieve/aaaa\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e09c26db9429aeed35ace7725806d39eb72dca1f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f736772696576652f61616161\"></a> <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03cac29fbb14a7eabecc3cb524afbb4f7aecb69f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61616161\"> <img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/814adc44b0260dbda27d0fa2c3a38dc8002b457a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f61616161\"></p>\n<p>Have you ever been creating an animated plot by saving a series of images and joining them together? The obvious way to name these frames would be using numbers:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">):</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.png'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n</pre>\n<p>But many operating systems will order these files as follows:</p>\n<pre><span class=\"m\">0</span>.png\n<span class=\"m\">1</span>.png\n<span class=\"m\">10</span>.png\n<span class=\"m\">11</span>.png\n<span class=\"m\">12</span>.png\n<span class=\"m\">13</span>.png\n<span class=\"m\">14</span>.png\n<span class=\"m\">2</span>.png\n<span class=\"m\">3</span>.png\n<span class=\"m\">4</span>.png\n<span class=\"m\">5</span>.png\n<span class=\"m\">6</span>.png\n<span class=\"m\">7</span>.png\n<span class=\"m\">8</span>.png\n<span class=\"m\">9</span>.png\n</pre>\n<p>Thereby screwing up the order of your animation.</p>\n<p>This is where <code>aaaa</code> (pronounced like a scream) comes in! <code>aaaa</code> has a single class which creates an iterator that yields an alphabetical sequence <code>aa</code>, <code>ab</code>, <code>ac</code>, etc. So we can change our above example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aaaa</span> <span class=\"kn\">import</span> <span class=\"n\">aaaa</span>\n\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">aaaa</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">):</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.png'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)))</span>\n</pre>\n<p>Which will preserve the order of the files in your operating system:</p>\n<pre>aa.png\nab.png\nac.png\nad.png\nae.png\naf.png\nag.png\nah.png\nai.png\naj.png\nak.png\nal.png\nam.png\nan.png\nao.png\n</pre>\n<p>File sorting can differ between operating systems, sometimes with <a href=\"https://arstechnica.com/information-technology/2019/10/chemists-discover-cross-platform-python-scripts-not-so-cross-platform/\" rel=\"nofollow\">serious results</a>.</p>\n<h3>Installation</h3>\n<p><code>aaaa</code> has no dependences and is tested on Python 3.5 through 3.8 and it can be installed via pip:</p>\n<pre>pip install aaaa\n</pre>\n<h3>Usage</h3>\n<p>There are two ways to use <code>aaaa</code>. Firstly, you can loop directly over an <code>aaaa</code> instance, until there are no items left (in this case the last value of name will be <code>zz</code>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aaaa</span> <span class=\"kn\">import</span> <span class=\"n\">aaaa</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">aaaa</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>Or, you can use the <code>next()</code> operator to only get as many values as you need:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aaaa</span> <span class=\"kn\">import</span> <span class=\"n\">aaaa</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">aaaa</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">))</span>\n</pre>\n<p>The default length of an output from <code>aaaa</code> is 2 characters long - this will allow you to order 676 files. If you need a larger or smaller amount of characters you can specify this as an argument to <code>aaaa</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aaaa</span> <span class=\"kn\">import</span> <span class=\"n\">aaaa</span>\n\n<span class=\"n\">names_short</span> <span class=\"o\">=</span> <span class=\"n\">aaaa</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">names_long</span> <span class=\"o\">=</span> <span class=\"n\">aaaa</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">names_short</span><span class=\"p\">),</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">names_long</span><span class=\"p\">))</span>\n<span class=\"c1\"># Outputs --&gt; a aaaa</span>\n</pre>\n<p>Beyond four or five characters in length, initializing <code>aaaa</code> becomes prohibitively slow. Note that four characters gives you <strong>456976</strong> permutations - so you should never need more than this.</p>\n<h3>Contribute</h3>\n<p>For my purposes this package is feature complete, but if you find a bug, or have a feature request, open an issue, or create a pull request!</p>\n<h3>License</h3>\n<p>The project is licensed under the MIT license.</p>\n\n          </div>"}, "last_serial": 6824640, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "938eb12111dda9baad34714af131dc6a", "sha256": "2bf745b32ae110ad19addbfb11510cdce6b67a49db9843764d0a0e7bf32da2e1"}, "downloads": -1, "filename": "aaaa-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "938eb12111dda9baad34714af131dc6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3891, "upload_time": "2020-03-16T22:37:46", "upload_time_iso_8601": "2020-03-16T22:37:46.365458Z", "url": "https://files.pythonhosted.org/packages/c4/a3/87b5fddf2fa002916aadd82807841ed33a1ef7a2afe3e34935e35cbf7dc1/aaaa-1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "938eb12111dda9baad34714af131dc6a", "sha256": "2bf745b32ae110ad19addbfb11510cdce6b67a49db9843764d0a0e7bf32da2e1"}, "downloads": -1, "filename": "aaaa-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "938eb12111dda9baad34714af131dc6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3891, "upload_time": "2020-03-16T22:37:46", "upload_time_iso_8601": "2020-03-16T22:37:46.365458Z", "url": "https://files.pythonhosted.org/packages/c4/a3/87b5fddf2fa002916aadd82807841ed33a1ef7a2afe3e34935e35cbf7dc1/aaaa-1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 15:55:30 2020"}