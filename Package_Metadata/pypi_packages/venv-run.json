{"info": {"author": "Gustavo Jos\u00e9 de Sousa", "author_email": "gustavo.jo.sousa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Topic :: Software Development", "Topic :: Utilities"], "description": "========\nvenv-run\n========\n\nDoing this...\n\n.. code:: bash\n\n    venv-run myapp.py\n\n...is *more convenient* than this...\n\n.. code:: bash\n\n    source myvenv/bin/activate\n    python myapp.py\n    deactivate\n\n.. contents::\n\nThat is the main motivation of this tool!\n\n``venv-run`` is a tool for running commands with a Python virtual environment\nwithout *explicitly* activating it (and deactivating it when you are done).\nEssentially it runs your command with the virtual environment's binary path\nprepended to the system's ``PATH`` environment variable. Another nice thing\nabout ``venv-run`` is that it tries to find the environment's directory from\nyour current working directory so you can save some typing.\n\nInstallation\n============\n\nFrom source\n-----------\n\nIf you have ``pip`` available in your system, then the recommended way to\ninstall from source is doing:\n\n.. code:: bash\n\n    # From the source root\n    pip install .\n\nAlternatively, you can call ``setup.py`` directly, but remember that it *does\nnot provide an \"uninstall\" command* (this form is useful for OS distribution\npackagers):\n\n.. code:: bash\n\n    python setup.py install\n\nUsage\n=====\n\n``venv-run`` can be called directly as a shell command:\n\n.. code:: bash\n\n    venv-run [OPTIONS] [--] [CMD]\n\nWhen called, the first thing ``venv-run`` does is to look for a (single)\nvirtual environment under your current working directory. After it encounters\nthe environment's directory, it runs your command with the environment's binary\npath prepended to the system's binary path.\n\nAll the examples in this section assume you have a virtual environment created\nin the working directory.\n\nRunning a Python script\n-----------------------\n\nSuppose you have a Python project in ``my-python-project`` and have created a\nvirtual environment like the example below:\n\n.. code:: bash\n\n    $ cd my-python-project\n    $ python -m venv myvenv\n\nYou can call a Python script of your project using that environment with the\ncommand:\n\n.. code:: bash\n\n    $ venv-run myapp.py\n\nIf ``myapp.py`` accepts arguments, you can pass them normally:\n\n.. code:: bash\n\n    $ venv-run myapp.py --foo --bar baz\n\n.. note::\n    Running Python scripts like this is possible because ``venv-run`` guesses\n    that you want to run ``myapp.py`` with the environment's Python\n    interpreter. If myapp.py has execution permission for your user, then\n    ``venv-run`` *will not* invoke the interpreter for you. You can call\n    ``venv-run python myapp.py`` for such cases.\n\nCalling Python\n--------------\n\nThe virtual environment's Python interpreter is implicitly called in the\nfollowing situations:\n\n    - When no command is passed to ``venv-run``;\n\n    - When the first word of ``CMD`` is not an executable and either starts\n      with ``-`` or ends with ``.py``. In this case, ``python`` is prepended to\n      ``CMD`` (the example in the previous section falls under this condition).\n\nThus, for example, you can start an interactive session with the environment's\nPython by simply calling:\n\n.. code:: bash\n\n    $ venv-run\n\nAnd you can call a module installed in the environment with:\n\n.. code:: bash\n\n    $ venv -m path.to.module\n\nFor both cases, it's also okay to explicitly call the interpreter (e.g.\n``venv-run python -m path.to.module``).\n\nCalling executables\n-------------------\n\nIf you want to call an executable installed in your virtual environment, you\ncan call it like in the example below:\n\n.. code:: bash\n\n    # Suppose I'm using flask to develop a Web application and want to start\n    # the development server\n    $ venv-run flask run\n\nThe executable does not need to be really installed in the environment. The\nnext example starts the system's ``bash`` with ``venv/bin`` prepended to\n``PATH``:\n\n.. code:: bash\n\n    $ venv-run bash\n\n\nLocally installing and using a Python package\n---------------------------------------------\n\nLet's say you want to use `bpython <https://bpython-interpreter.org/>`_ to\ninteractively use and test your project's modules.\n\nYou can install it:\n\n.. code:: bash\n\n    $ venv-run pip install bpython\n\n\nAnd the run it at will:\n\n.. code:: bash\n\n    $ venv-run bpython\n\nMultiple virtual environments\n-----------------------------\n\n``venv-run`` refuses to continue if it finds more than one virtual environment.\nYou can pass ``--venv PATH_TO_VENV`` to point the environment to be used for\nsuch cases.\n\nOptions ambiguity\n-----------------\n\nIf ``CMD`` uses options conflicting with ``venv-run``'s own options, then you\ncan prepend ``CMD`` with ``--`` to mark the beginning of ``CMD``. Example:\n\n.. code:: bash\n\n    $ venv-run python -h # Shows venv-run's help message\n    $ venv-run -- python -h # Shows python's help message\n\nAuthor\n======\n\nGustavo Jos\u00e9 de Sousa\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guludo/venv-run", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "venv-run", "package_url": "https://pypi.org/project/venv-run/", "platform": "", "project_url": "https://pypi.org/project/venv-run/", "project_urls": {"Homepage": "https://github.com/guludo/venv-run"}, "release_url": "https://pypi.org/project/venv-run/0.0.0/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Run commands using Python virtual environment", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Doing this\u2026</p>\n<pre>venv-run myapp.py\n</pre>\n<p>\u2026is <em>more convenient</em> than this\u2026</p>\n<pre><span class=\"nb\">source</span> myvenv/bin/activate\npython myapp.py\ndeactivate\n</pre>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#running-a-python-script\" id=\"id3\" rel=\"nofollow\">Running a Python script</a></li>\n<li><a href=\"#calling-python\" id=\"id4\" rel=\"nofollow\">Calling Python</a></li>\n<li><a href=\"#calling-executables\" id=\"id5\" rel=\"nofollow\">Calling executables</a></li>\n<li><a href=\"#locally-installing-and-using-a-python-package\" id=\"id6\" rel=\"nofollow\">Locally installing and using a Python package</a></li>\n<li><a href=\"#multiple-virtual-environments\" id=\"id7\" rel=\"nofollow\">Multiple virtual environments</a></li>\n<li><a href=\"#options-ambiguity\" id=\"id8\" rel=\"nofollow\">Options ambiguity</a></li>\n</ul>\n</li>\n<li><a href=\"#author\" id=\"id9\" rel=\"nofollow\">Author</a></li>\n</ul>\n</div>\n<p>That is the main motivation of this tool!</p>\n<p><tt><span class=\"pre\">venv-run</span></tt> is a tool for running commands with a Python virtual environment\nwithout <em>explicitly</em> activating it (and deactivating it when you are done).\nEssentially it runs your command with the virtual environment\u2019s binary path\nprepended to the system\u2019s <tt>PATH</tt> environment variable. Another nice thing\nabout <tt><span class=\"pre\">venv-run</span></tt> is that it tries to find the environment\u2019s directory from\nyour current working directory so you can save some typing.</p>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<h2 id=\"from-source\"><span class=\"section-subtitle\">From source</span></h2>\n<p>If you have <tt>pip</tt> available in your system, then the recommended way to\ninstall from source is doing:</p>\n<pre><span class=\"c1\"># From the source root\n</span>pip install .\n</pre>\n<p>Alternatively, you can call <tt>setup.py</tt> directly, but remember that it <em>does\nnot provide an \u201cuninstall\u201d command</em> (this form is useful for OS distribution\npackagers):</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p><tt><span class=\"pre\">venv-run</span></tt> can be called directly as a shell command:</p>\n<pre>venv-run <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>--<span class=\"o\">]</span> <span class=\"o\">[</span>CMD<span class=\"o\">]</span>\n</pre>\n<p>When called, the first thing <tt><span class=\"pre\">venv-run</span></tt> does is to look for a (single)\nvirtual environment under your current working directory. After it encounters\nthe environment\u2019s directory, it runs your command with the environment\u2019s binary\npath prepended to the system\u2019s binary path.</p>\n<p>All the examples in this section assume you have a virtual environment created\nin the working directory.</p>\n<div id=\"running-a-python-script\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Running a Python script</a></h3>\n<p>Suppose you have a Python project in <tt><span class=\"pre\">my-python-project</span></tt> and have created a\nvirtual environment like the example below:</p>\n<pre>$ <span class=\"nb\">cd</span> my-python-project\n$ python -m venv myvenv\n</pre>\n<p>You can call a Python script of your project using that environment with the\ncommand:</p>\n<pre>$ venv-run myapp.py\n</pre>\n<p>If <tt>myapp.py</tt> accepts arguments, you can pass them normally:</p>\n<pre>$ venv-run myapp.py --foo --bar baz\n</pre>\n<div>\n<p>Note</p>\n<p>Running Python scripts like this is possible because <tt><span class=\"pre\">venv-run</span></tt> guesses\nthat you want to run <tt>myapp.py</tt> with the environment\u2019s Python\ninterpreter. If myapp.py has execution permission for your user, then\n<tt><span class=\"pre\">venv-run</span></tt> <em>will not</em> invoke the interpreter for you. You can call\n<tt><span class=\"pre\">venv-run</span> python myapp.py</tt> for such cases.</p>\n</div>\n</div>\n<div id=\"calling-python\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Calling Python</a></h3>\n<p>The virtual environment\u2019s Python interpreter is implicitly called in the\nfollowing situations:</p>\n<blockquote>\n<ul>\n<li>When no command is passed to <tt><span class=\"pre\">venv-run</span></tt>;</li>\n<li>When the first word of <tt>CMD</tt> is not an executable and either starts\nwith <tt>-</tt> or ends with <tt>.py</tt>. In this case, <tt>python</tt> is prepended to\n<tt>CMD</tt> (the example in the previous section falls under this condition).</li>\n</ul>\n</blockquote>\n<p>Thus, for example, you can start an interactive session with the environment\u2019s\nPython by simply calling:</p>\n<pre>$ venv-run\n</pre>\n<p>And you can call a module installed in the environment with:</p>\n<pre>$ venv -m path.to.module\n</pre>\n<p>For both cases, it\u2019s also okay to explicitly call the interpreter (e.g.\n<tt><span class=\"pre\">venv-run</span> python <span class=\"pre\">-m</span> path.to.module</tt>).</p>\n</div>\n<div id=\"calling-executables\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Calling executables</a></h3>\n<p>If you want to call an executable installed in your virtual environment, you\ncan call it like in the example below:</p>\n<pre><span class=\"c1\"># Suppose I'm using flask to develop a Web application and want to start\n# the development server\n</span>$ venv-run flask run\n</pre>\n<p>The executable does not need to be really installed in the environment. The\nnext example starts the system\u2019s <tt>bash</tt> with <tt>venv/bin</tt> prepended to\n<tt>PATH</tt>:</p>\n<pre>$ venv-run bash\n</pre>\n</div>\n<div id=\"locally-installing-and-using-a-python-package\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Locally installing and using a Python package</a></h3>\n<p>Let\u2019s say you want to use <a href=\"https://bpython-interpreter.org/\" rel=\"nofollow\">bpython</a> to\ninteractively use and test your project\u2019s modules.</p>\n<p>You can install it:</p>\n<pre>$ venv-run pip install bpython\n</pre>\n<p>And the run it at will:</p>\n<pre>$ venv-run bpython\n</pre>\n</div>\n<div id=\"multiple-virtual-environments\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Multiple virtual environments</a></h3>\n<p><tt><span class=\"pre\">venv-run</span></tt> refuses to continue if it finds more than one virtual environment.\nYou can pass <tt><span class=\"pre\">--venv</span> PATH_TO_VENV</tt> to point the environment to be used for\nsuch cases.</p>\n</div>\n<div id=\"options-ambiguity\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Options ambiguity</a></h3>\n<p>If <tt>CMD</tt> uses options conflicting with <tt><span class=\"pre\">venv-run</span></tt>\u2019s own options, then you\ncan prepend <tt>CMD</tt> with <tt><span class=\"pre\">--</span></tt> to mark the beginning of <tt>CMD</tt>. Example:</p>\n<pre>$ venv-run python -h <span class=\"c1\"># Shows venv-run's help message\n</span>$ venv-run -- python -h <span class=\"c1\"># Shows python's help message</span>\n</pre>\n</div>\n</div>\n<div id=\"author\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Author</a></h2>\n<p>Gustavo Jos\u00e9 de Sousa</p>\n</div>\n\n          </div>"}, "last_serial": 4788449, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "df0bb4afc8693c9f767f7f9fe737aed6", "sha256": "fc2f946d6867084380d73a43c43cc15547f83c9747b3559aafa697bb7c1363be"}, "downloads": -1, "filename": "venv_run-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df0bb4afc8693c9f767f7f9fe737aed6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 7297, "upload_time": "2019-02-06T20:56:27", "upload_time_iso_8601": "2019-02-06T20:56:27.521209Z", "url": "https://files.pythonhosted.org/packages/de/88/771a152bb906e8a6e3129fcb3e725f5ac4cf2058fd1b32cc6ee72fd15082/venv_run-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1decddd6c7a862ed31f96c0a8b8f186", "sha256": "e4b61a451516aa502f45fd7888e0891c552be379783237ce01e82ddcdc9b4d65"}, "downloads": -1, "filename": "venv-run-0.0.0.tar.gz", "has_sig": false, "md5_digest": "d1decddd6c7a862ed31f96c0a8b8f186", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 4473, "upload_time": "2019-02-06T20:56:29", "upload_time_iso_8601": "2019-02-06T20:56:29.575319Z", "url": "https://files.pythonhosted.org/packages/4d/03/2a0627cee871299ae41e7224cd7babf6bc54194a7746859e10ed3447773e/venv-run-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df0bb4afc8693c9f767f7f9fe737aed6", "sha256": "fc2f946d6867084380d73a43c43cc15547f83c9747b3559aafa697bb7c1363be"}, "downloads": -1, "filename": "venv_run-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df0bb4afc8693c9f767f7f9fe737aed6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 7297, "upload_time": "2019-02-06T20:56:27", "upload_time_iso_8601": "2019-02-06T20:56:27.521209Z", "url": "https://files.pythonhosted.org/packages/de/88/771a152bb906e8a6e3129fcb3e725f5ac4cf2058fd1b32cc6ee72fd15082/venv_run-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1decddd6c7a862ed31f96c0a8b8f186", "sha256": "e4b61a451516aa502f45fd7888e0891c552be379783237ce01e82ddcdc9b4d65"}, "downloads": -1, "filename": "venv-run-0.0.0.tar.gz", "has_sig": false, "md5_digest": "d1decddd6c7a862ed31f96c0a8b8f186", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 4473, "upload_time": "2019-02-06T20:56:29", "upload_time_iso_8601": "2019-02-06T20:56:29.575319Z", "url": "https://files.pythonhosted.org/packages/4d/03/2a0627cee871299ae41e7224cd7babf6bc54194a7746859e10ed3447773e/venv-run-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:57 2020"}