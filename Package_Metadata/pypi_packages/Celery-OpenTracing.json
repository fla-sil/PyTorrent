{"info": {"author": "SignalFx, Inc.", "author_email": "info@signalfx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Celery OpenTracing\n\nThis package enables tracing task execution in a [Celery 3.1+](http://www.celeryproject.org/) application via [The OpenTracing Project](http://opentracing.io). Once a production system contends with real concurrency or splits into many services, crucial (and formerly easy) tasks become difficult: user-facing latency optimization, root-cause analysis of backend errors, communication about distinct pieces of a now-distributed system, etc. Distributed tracing follows a request on its journey from inception to completion from mobile/browser all the way to the microservices.\n\nAs core services and libraries adopt OpenTracing, the application builder is no longer burdened with the task of adding basic tracing instrumentation to their own code. In this way, developers can build their applications with the tools they prefer and benefit from built-in tracing instrumentation. OpenTracing implementations exist for major distributed tracing systems and can be bound or swapped with a one-line configuration change.\n\nIf you want to learn more about the underlying Python API, visit the Python [source code](https://github.com/signalfx/python-celery/).\n\n## Installation\n\nRun the following command:\n\n```\n$ pip install celery-opentracing\n```\n\n## Usage\n\nThe provided `celery.app.base.Celery` subclass allows the tracing of task scheduling and execution using the OpenTracing API. All that it requires is for a `CeleryTracing` instance to be initialized using an instance of an OpenTracing tracer and treated as a standard `Celery` application.\n\n### Initialize\n\n`CeleryTracing` takes the `Tracer` instance that is supported by OpenTracing and an optional dictionary of desired tags for each created span. You can also specify whether you'd like the initial task publish events to be represented by a span whose trace context is propagated via request headers to the worker executing the task (enabled by default).  To create a `CeleryTracing` object, you can either pass in a tracer object directly or default to the `opentracing.tracer` global tracer that's set elsewhere in your application:\n\n```python\nfrom celery_opentracing import CeleryTracing\n\nopentracing_tracer = # some OpenTracing tracer implementation\ntraced_app = CeleryTracing(tracer=opentracing_tracer, propagate=True,  # propagation allows distributed tracing from\n                           span_tags=dict(my_helpful='tag'))           # publisher over broker to workers.\n\n@traced_app.task(bind=True)\ndef my_task(self):\n    return True\n```\n\nor\n\n```python\nfrom celery_opentracing import CeleryTracing\nimport opentracing\n\nopentracing.tracer = # some OpenTracing tracer implementation\ntraced_app = CeleryTracing(propagate=False)  # Tracer defaults to opentracing.tracer.  No publish span creation or propagation to worker execution context will configured as well.\n\n@traced_app.task(bind=True)\ndef my_task(self):\n    return True\n```\n\n## Further Information\n\nIf you're interested in learning more about the OpenTracing standard, please visit [opentracing.io](http://opentracing.io/).  If you would like to implement OpenTracing in your project and need help, feel free to send us a note at [community@opentracing.io](community@opentracing.io).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "http://github.com/signalfx/python-celery/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/signalfx/python-celery", "keywords": "", "license": "Apache Software License v2", "maintainer": "", "maintainer_email": "", "name": "Celery-OpenTracing", "package_url": "https://pypi.org/project/Celery-OpenTracing/", "platform": "any", "project_url": "https://pypi.org/project/Celery-OpenTracing/", "project_urls": {"Download": "http://github.com/signalfx/python-celery/tarball/master", "Homepage": "http://github.com/signalfx/python-celery"}, "release_url": "https://pypi.org/project/Celery-OpenTracing/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "OpenTracing support for Celery", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Celery OpenTracing</h1>\n<p>This package enables tracing task execution in a <a href=\"http://www.celeryproject.org/\" rel=\"nofollow\">Celery 3.1+</a> application via <a href=\"http://opentracing.io\" rel=\"nofollow\">The OpenTracing Project</a>. Once a production system contends with real concurrency or splits into many services, crucial (and formerly easy) tasks become difficult: user-facing latency optimization, root-cause analysis of backend errors, communication about distinct pieces of a now-distributed system, etc. Distributed tracing follows a request on its journey from inception to completion from mobile/browser all the way to the microservices.</p>\n<p>As core services and libraries adopt OpenTracing, the application builder is no longer burdened with the task of adding basic tracing instrumentation to their own code. In this way, developers can build their applications with the tools they prefer and benefit from built-in tracing instrumentation. OpenTracing implementations exist for major distributed tracing systems and can be bound or swapped with a one-line configuration change.</p>\n<p>If you want to learn more about the underlying Python API, visit the Python <a href=\"https://github.com/signalfx/python-celery/\" rel=\"nofollow\">source code</a>.</p>\n<h2>Installation</h2>\n<p>Run the following command:</p>\n<pre><code>$ pip install celery-opentracing\n</code></pre>\n<h2>Usage</h2>\n<p>The provided <code>celery.app.base.Celery</code> subclass allows the tracing of task scheduling and execution using the OpenTracing API. All that it requires is for a <code>CeleryTracing</code> instance to be initialized using an instance of an OpenTracing tracer and treated as a standard <code>Celery</code> application.</p>\n<h3>Initialize</h3>\n<p><code>CeleryTracing</code> takes the <code>Tracer</code> instance that is supported by OpenTracing and an optional dictionary of desired tags for each created span. You can also specify whether you'd like the initial task publish events to be represented by a span whose trace context is propagated via request headers to the worker executing the task (enabled by default).  To create a <code>CeleryTracing</code> object, you can either pass in a tracer object directly or default to the <code>opentracing.tracer</code> global tracer that's set elsewhere in your application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">celery_opentracing</span> <span class=\"kn\">import</span> <span class=\"n\">CeleryTracing</span>\n\n<span class=\"n\">opentracing_tracer</span> <span class=\"o\">=</span> <span class=\"c1\"># some OpenTracing tracer implementation</span>\n<span class=\"n\">traced_app</span> <span class=\"o\">=</span> <span class=\"n\">CeleryTracing</span><span class=\"p\">(</span><span class=\"n\">tracer</span><span class=\"o\">=</span><span class=\"n\">opentracing_tracer</span><span class=\"p\">,</span> <span class=\"n\">propagate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># propagation allows distributed tracing from</span>\n                           <span class=\"n\">span_tags</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">my_helpful</span><span class=\"o\">=</span><span class=\"s1\">'tag'</span><span class=\"p\">))</span>           <span class=\"c1\"># publisher over broker to workers.</span>\n\n<span class=\"nd\">@traced_app</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">celery_opentracing</span> <span class=\"kn\">import</span> <span class=\"n\">CeleryTracing</span>\n<span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n\n<span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"c1\"># some OpenTracing tracer implementation</span>\n<span class=\"n\">traced_app</span> <span class=\"o\">=</span> <span class=\"n\">CeleryTracing</span><span class=\"p\">(</span><span class=\"n\">propagate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># Tracer defaults to opentracing.tracer.  No publish span creation or propagation to worker execution context will configured as well.</span>\n\n<span class=\"nd\">@traced_app</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<h2>Further Information</h2>\n<p>If you're interested in learning more about the OpenTracing standard, please visit <a href=\"http://opentracing.io/\" rel=\"nofollow\">opentracing.io</a>.  If you would like to implement OpenTracing in your project and need help, feel free to send us a note at <a href=\"community@opentracing.io\" rel=\"nofollow\">community@opentracing.io</a>.</p>\n\n          </div>"}, "last_serial": 5881564, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b8dcbf2d169d0f67db741416cd92561f", "sha256": "de8ccbf2d53275127e64a770566bed790de2e67cf222cad0dc6c73c211c8b5c8"}, "downloads": -1, "filename": "Celery-OpenTracing-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b8dcbf2d169d0f67db741416cd92561f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5249, "upload_time": "2019-09-24T19:44:21", "upload_time_iso_8601": "2019-09-24T19:44:21.747043Z", "url": "https://files.pythonhosted.org/packages/7c/b3/8ab55641fb3b9ebbd8bf5e71b5f6bc79f43e0be1afc350657f07c426d2a1/Celery-OpenTracing-0.0.1.tar.gz", "yanked": false}], "0.0.1rc1": [{"comment_text": "", "digests": {"md5": "f382e2eea745c83047951720084dab7a", "sha256": "d5f55233f75aacdaec48bf2b68b174a57b52e4e1cdad4eef4a1a79c57961098f"}, "downloads": -1, "filename": "Celery-OpenTracing-0.0.1rc1.tar.gz", "has_sig": false, "md5_digest": "f382e2eea745c83047951720084dab7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5260, "upload_time": "2019-09-24T16:20:51", "upload_time_iso_8601": "2019-09-24T16:20:51.279706Z", "url": "https://files.pythonhosted.org/packages/17/29/97d6982ba8cb44dcfea09b90c0cda727521788bf9ea730b4f88bf2eec61b/Celery-OpenTracing-0.0.1rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8dcbf2d169d0f67db741416cd92561f", "sha256": "de8ccbf2d53275127e64a770566bed790de2e67cf222cad0dc6c73c211c8b5c8"}, "downloads": -1, "filename": "Celery-OpenTracing-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b8dcbf2d169d0f67db741416cd92561f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5249, "upload_time": "2019-09-24T19:44:21", "upload_time_iso_8601": "2019-09-24T19:44:21.747043Z", "url": "https://files.pythonhosted.org/packages/7c/b3/8ab55641fb3b9ebbd8bf5e71b5f6bc79f43e0be1afc350657f07c426d2a1/Celery-OpenTracing-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:52 2020"}