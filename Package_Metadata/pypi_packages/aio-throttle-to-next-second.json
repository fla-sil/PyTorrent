{"info": {"author": "Michal Charemza", "author_email": "michal@charemza.name", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# aio-throttle-to-next-second [![CircleCI](https://circleci.com/gh/uktrade/aio-throttle-to-next-second.svg?style=svg)](https://circleci.com/gh/uktrade/aio-throttle-to-next-second) [![Test Coverage](https://api.codeclimate.com/v1/badges/e791b8d7273920821a9a/test_coverage)](https://codeclimate.com/github/uktrade/aio-throttle-to-next-second/test_coverage)\n\nThrottler for asyncio Python that throttles to the next whole second, as reported by `time.time()`. This is useful to force an order on requests to a service that uses a \"latest timestamp wins\" strategy, such as S3.\n\n\n## Installation\n\n```bash\npip install aio-throttle-to-next-second\n```\n\n\n## Usage\n\nCreate a shared `Throttler`, with no arguments\n\n```python\nfrom aio_throttle_to_next_second import Throttler\n\nthrottler = Throttler()\n```\n\nand then just before the piece(s) of code to be throttled, _call_ this and `await` its result.\n\n```python\nawait throttler()\n# Each execution reaching this line will reach this line at a different second\n```\n\n\n## Example: multiple tasks throttled\n\n```python\nimport asyncio\nimport time\n\nfrom aio_throttle_to_next_second import Throttler\n\nasync def main():\n    throttler = Throttler()\n    await asyncio.gather(*[\n        worker(throttler) for _ in range(10)\n    ])\n\nasync def worker(throttler):\n    await throttler()\n    # Each print will show a distinct second, though all workers started together\n    print(int(time.time()))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\nloop.close()\n```\n\n\n## Example: single task throttled\n\n```python\nimport asyncio\nimport random\nimport time\n\nfrom aio_throttle_to_next_second import Throttler\n\nasync def main():\n    throttler = Throttler()\n    for _ in range(10):\n        await throttler()\n        # Each print will show a distinct second, though there is a random sleep\n        print(int(time.time()))\n        await asyncio.sleep(random.random())\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\nloop.close()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uktrade/aio-throttle-to-next-second", "keywords": "", "license": "", "maintainer": "Department for International Trade", "maintainer_email": "webops@digital.trade.gov.uk", "name": "aio-throttle-to-next-second", "package_url": "https://pypi.org/project/aio-throttle-to-next-second/", "platform": "", "project_url": "https://pypi.org/project/aio-throttle-to-next-second/", "project_urls": {"Homepage": "https://github.com/uktrade/aio-throttle-to-next-second"}, "release_url": "https://pypi.org/project/aio-throttle-to-next-second/0.0.1/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Throttler for asyncio Python that throttles to the next whole second", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aio-throttle-to-next-second <a href=\"https://circleci.com/gh/uktrade/aio-throttle-to-next-second\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb8ae25ba8267a2964d4564f7e84be749a45a1d5/68747470733a2f2f636972636c6563692e636f6d2f67682f756b74726164652f61696f2d7468726f74746c652d746f2d6e6578742d7365636f6e642e7376673f7374796c653d737667\"></a> <a href=\"https://codeclimate.com/github/uktrade/aio-throttle-to-next-second/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccf00f6ec87f9f050a6ef89ab7c51b0340b28068/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f65373931623864373237333932303832316139612f746573745f636f766572616765\"></a></h1>\n<p>Throttler for asyncio Python that throttles to the next whole second, as reported by <code>time.time()</code>. This is useful to force an order on requests to a service that uses a \"latest timestamp wins\" strategy, such as S3.</p>\n<h2>Installation</h2>\n<pre>pip install aio-throttle-to-next-second\n</pre>\n<h2>Usage</h2>\n<p>Create a shared <code>Throttler</code>, with no arguments</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aio_throttle_to_next_second</span> <span class=\"kn\">import</span> <span class=\"n\">Throttler</span>\n\n<span class=\"n\">throttler</span> <span class=\"o\">=</span> <span class=\"n\">Throttler</span><span class=\"p\">()</span>\n</pre>\n<p>and then just before the piece(s) of code to be throttled, <em>call</em> this and <code>await</code> its result.</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">throttler</span><span class=\"p\">()</span>\n<span class=\"c1\"># Each execution reaching this line will reach this line at a different second</span>\n</pre>\n<h2>Example: multiple tasks throttled</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aio_throttle_to_next_second</span> <span class=\"kn\">import</span> <span class=\"n\">Throttler</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">throttler</span> <span class=\"o\">=</span> <span class=\"n\">Throttler</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span>\n        <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"n\">throttler</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">])</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">worker</span><span class=\"p\">(</span><span class=\"n\">throttler</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">throttler</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Each print will show a distinct second, though all workers started together</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()))</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Example: single task throttled</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aio_throttle_to_next_second</span> <span class=\"kn\">import</span> <span class=\"n\">Throttler</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">throttler</span> <span class=\"o\">=</span> <span class=\"n\">Throttler</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">throttler</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Each print will show a distinct second, though there is a random sleep</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()))</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">())</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6548626, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "508d244a85a9d2f4364577f9bc0214c0", "sha256": "289d6f13c2d8e4751446af17a825b075331ddc7f2f16271ee89c643bbc78dc4f"}, "downloads": -1, "filename": "aio_throttle_to_next_second-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "508d244a85a9d2f4364577f9bc0214c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 3538, "upload_time": "2020-01-31T11:11:57", "upload_time_iso_8601": "2020-01-31T11:11:57.249873Z", "url": "https://files.pythonhosted.org/packages/a0/11/57255c2d93a468b17fd8c1666b4df2c47363e499f9a425ae9a2e7810d5b8/aio_throttle_to_next_second-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a2ca956080c04270810b600727356b5", "sha256": "12c7f9832649a3c1b4c27c3e2641662bb5bd63724649bbbeaf1b3a2384277b95"}, "downloads": -1, "filename": "aio-throttle-to-next-second-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8a2ca956080c04270810b600727356b5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 2335, "upload_time": "2020-01-31T11:11:59", "upload_time_iso_8601": "2020-01-31T11:11:59.998782Z", "url": "https://files.pythonhosted.org/packages/2d/92/8967cd162a1c97512b9b2310433bd27923c6232a1f8fe2b2cf836d89ccc3/aio-throttle-to-next-second-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "508d244a85a9d2f4364577f9bc0214c0", "sha256": "289d6f13c2d8e4751446af17a825b075331ddc7f2f16271ee89c643bbc78dc4f"}, "downloads": -1, "filename": "aio_throttle_to_next_second-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "508d244a85a9d2f4364577f9bc0214c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 3538, "upload_time": "2020-01-31T11:11:57", "upload_time_iso_8601": "2020-01-31T11:11:57.249873Z", "url": "https://files.pythonhosted.org/packages/a0/11/57255c2d93a468b17fd8c1666b4df2c47363e499f9a425ae9a2e7810d5b8/aio_throttle_to_next_second-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a2ca956080c04270810b600727356b5", "sha256": "12c7f9832649a3c1b4c27c3e2641662bb5bd63724649bbbeaf1b3a2384277b95"}, "downloads": -1, "filename": "aio-throttle-to-next-second-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8a2ca956080c04270810b600727356b5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 2335, "upload_time": "2020-01-31T11:11:59", "upload_time_iso_8601": "2020-01-31T11:11:59.998782Z", "url": "https://files.pythonhosted.org/packages/2d/92/8967cd162a1c97512b9b2310433bd27923c6232a1f8fe2b2cf836d89ccc3/aio-throttle-to-next-second-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:41 2020"}