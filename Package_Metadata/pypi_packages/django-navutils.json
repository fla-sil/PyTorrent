{"info": {"author": "Eliot Berriot", "author_email": "contact@eliotberriot.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "Django-navutils\n~~~~~~~~~~~~~~~\n\n**Note**: this package is still in beta. It has been successfully used in a few projects of my own. However, API may be subject to backward incompatible changes until the first major version is released.\n\nDjango-navutils is a lightweight package for handling menu and breadcrumbs inside your django project.\n\n.. contents::\n    :local:\n    :depth: 2\n\nFeatures\n========\n\n- No database involved (unless you want it): menus and breadcrumbs are plain old python code\n- Highly customizable\n- Conditionnal menu items display: you want to show a menu link to authenticated users only ? Anonymous ? Staff members ? A custom criteria ? You're covered !\n- i18n-friendly: you can rely on usual django translation mechanisms\n- Unlimited menus\n- Semi-automatic current menu node detection\n\nRequirements\n============\n\n- Python >= 2.7 or >= 3.3\n- Django >= 1.7\n\nThe menu system may be integrated in any project, but the breadcrumbs part requires\nthat you use class-based views.\n\nInstall\n=======\n\nPackage is available on pip and can be installed via ``pip install django-navutils``.\n\nYou'll also have to add ``navutils`` to your ``settings.INSTALLED_APPS``\n\nAlso add the following to ``settings.CONTEXT_PROCESSORS``:\n\n.. code:: python\n\n    CONTEXT_PROCESSORS = (\n        # ...\n        'navutils.context_processors.menus',\n    )\n\nUsage\n=====\n\nMenus\n*****\n\nNavutils represents menus using ``Menu`` and ``Node`` instances, each menu being a collection of\nnode instances representing a menu link. Nodes may have children, which are also ``Node`` instances.\n\nLet's see a minimal example.\n\n``yourapp/menu.py``:\n\n.. code:: python\n\n    from navutils import menu\n\n    main_menu = menu.Menu('main')\n    menu.register(main_menu)\n\n    # will be shown to everybody\n    blog = menu.Node(id='blog', label='Blog', pattern_name='blog:index')\n    main_menu.register(blog)\n\n    # nodes created with a pattern_name argument will use django reverse\n    assert blog.get_url() == '/blog'\n\n    # if you want to disable reversion, use the url argument\n    django = menu.Node(id='django',\n                       label='Django project',\n                       url='http://djangoproject.com',\n                       link_attrs={'target': '_blank'})\n\n    # Each node instance can accept an arbitrary number of children\n    blog.add(\n        menu.Node(id='last_entries',\n                  label='Last entries',\n                  pattern_name='blog:last_entries')\n    )\n    blog.add(\n        menu.Node(id='archives', label='Archives', pattern_name='blog:archives')\n    )\n\n    # will be shown to anonymous users only\n    login = menu.AnonymousNode(id='login',\n                               label='Login',\n                               pattern_name='accounts_login',\n                               link_attrs={'class': 'big-button'})\n    main_menu.register(login)\n\n    # will be shown to authenticated users only\n    logout = menu.AuthenticatedNode(id='logout',\n                                    label='Logout',\n                                    pattern_name='accounts_logout')\n    main_menu.register(logout)\n\n\n``yourapp/templates/index.html``::\n\n    {% load navutils_tags %}\n    {% render_menu menu=menus.main user=request.user %}\n\nFor an anonymous user, this would output something like:\n\n.. code:: html\n\n    <nav class=\"main-menu\">\n        <ul>\n            <li class=\"has-children menu-item\">\n                <a href=\"/blog\">Blog<a>\n                <ul class=\"sub-menu\">\n                    <li class=\"menu-item\">\n                        <a href=\"/blog/latest\">Latest entries</a>\n                    </li>\n                    <li class=\"menu-item\">\n                        <a href=\"/blog/archives\">Archives</a>\n                    </li>\n                </ul>\n            </li>\n            <li class=\"menu-item\">\n                <a href=\"http://djangoproject.com\" target=\"_blank\">Django project</a>\n            </li>\n            <li class=\"menu-item\">\n                <a href=\"/login\" class=\"big-button\">Login</a>\n            </li>\n        </ul>\n    </nav>\n\n\nYou can also directly set children nodes on parent instanciation with the ``children`` argument:\n\n.. code:: python\n\n    user = menu.Node(\n        id='user',\n        label='Greetings',\n        pattern_name='user:dashboard',\n        children=[\n            menu.Node(id='logout', label='Logout', pattern_name='user:logout'),\n\n            # you can nest children indefinitely\n            menu.Node(\n                id='settings',\n                label='Settings',\n                pattern_name='user:settings',\n                children = [\n                    menu.Node(id='newsletter',\n                              label='Newsletter',\n                              pattern_name='user:settings:newsletter')\n                ],\n            ),\n        ]\n    )\n\nNodes can be customized in many ways:\n\n.. code:: python\n\n    heavily_customized_node = menu.Node(\n        'customized',\n        'My custom menu',  # Supports arbitrary template values as well\n                           # like {{ request.user }}\n        url='#',  # Supports arbitrary template values as well\n                  # like {{ request.user }}\n\n        # a custom CSS class that will be applied to the node on rendering\n        css_class='custom-class',\n\n        # the <a> title attribute\n        title='click me!',\n\n        # a path to a custom template for rendering the node\n        # it's also possible to globally specify a custom template by naming\n        # your template '<yourapp>/templates/navutils/node.html'\n        template='myapp/menu/mynode.html',\n\n        # extra context you can use in your node template\n        context={'foo': 'bar'},\n\n        # a dict of attributes that will be applied as HTML attributes on the <li>\n        attrs = {'style': 'background-color: white;'}\n\n        # a dict of attributes that will be applied as HTML attributes on the <a>\n        link_attrs = {'target': '_blank', 'data-something': 'fancy-stuff'}\n    )\n\nCurrent node\n------------\n\nYou'll probably want to highlight the current node in some way. Navutils provide\na view mixin you an inherit from in order to achieve this.\n\nAssuming the following menu:\n\n.. code:: python\n\n    from navutils import menu\n\n    main_menu = menu.Menu(id='main')\n    menu.register(main_menu)\n\n    login = menu.Node(id='login', label='Login', pattern_name='account_login')\n    main_menu.register(login)\n\n\nYou can bind a view to a menu node with the following code:\n\n.. code:: python\n\n    from navutils import MenuMixin\n\n    class Login(MenuMixin, TemplateView):\n        current_menu_item = 'login'\n\n\nUnder the hood, the mixin will pass the value to the context and a `current` class will be added\n to the login node if the view is displayed. Note that you can achieve the same result\n with django function-based views, as long as you manually pass the node identifier in the context,\n under the `current_menu_item` key.\n\nNode reference\n--------------\n\nNavutils provide a few node subclasses that address common use cases.\n\nNode\n++++\n\nThe base Node type, will be displayed to anybody.\n\nAnonymousNode\n+++++++++++++\n\nDisplayed to anonymous users only.\n\nAuthenticatedNode\n+++++++++++++++++\n\nDisplayd to authenticated users only.\n\nStaffNode\n+++++++++\n\nDisplayed to staff users/superusers only.\n\nPermissionNode\n++++++++++++++\n\nDisplayed to users that have the given permission. Usage:\n\n.. code:: python\n\n    vip_node = menu.PermissionNode('vip',\n                                   label='VIP Area',\n                                   pattern_name='vip:index',\n                                   permission='access_vip_area')\n\nAllPermissionsNode\n++++++++++++++++++\n\nDisplayed to users that match a list of permission. Usage:\n\n.. code:: python\n\n    permissions = ['myapp.access_vip_area', 'myapp.drink_champagne']\n    champagne_node = menu.AllPermissionsNode('champagne',\n                                             label='Champagne!',\n                                             pattern_name='vip:champagne',\n                                             permissions=permissions)\n\nAnyPermissionsNode\n++++++++++++++++++\n\nDisplayed to users that match any given permission. Usage:\n\n.. code:: python\n\n    permissions = ['myapp.can_party', 'myapp.can_have_fun']\n    have_a_good_time = menu.AnyPermissionsNode('good-time',\n                                               label='Have a good time',\n                                               pattern_name='good_time',\n                                               permissions=permissions)\n\n\nPassTestNode\n++++++++++++\n\nDisplayed to users that match a custom test. Usage:\n\n.. code:: python\n\n    def can_drink_alcohol(user, context):\n        return user.age >= 21 or user.looks_mature_for_his_age\n\n    drink_alcohol = menu.PassTestNode('drink',\n                                      label='Have a beer',\n                                      pattern_name='beer',\n                                      test=can_drink_alcohol)\n\nIf it's not enough, you can also override the default templates:\n\n- ``navutils/menu.html`` : the menu wrapper that loop through the nodes\n- ``navutils/node.html`` : called for displaying each node instance\n\nAnd of course, you're free to create your own sub-classes.\n\nBreadcrumbs\n***********\n\nBreadcrumbs are set up into views, and therefore can only be used with class-based views.\n\nFirst of all, you'll probably want to define a base mixin for all your views:\n\n.. code:: python\n\n    from navutils import BreadcrumbsMixin, Breadcrumb\n\n    class BaseMixin(BreadcrumbsMixin):\n        def get_breadcrumbs(self):\n            breadcrumbs = super(BaseMixin, self).get_breadcrumbs()\n            breadcrumbs.append(Breadcrumb('Home', url='/'))\n            return breadcrumbs\n\nThen, you can inherit from this view everywhere:\n\n.. code:: python\n\n    # breadcrumbs = Home > Blog\n    class BlogView(BaseMixin):\n        title = 'Blog'\n\n\n    # breadcrumbs = Home > Logout\n    class LogoutView(BaseMixin):\n        title = 'Logout'\n\n\nBy default, the last element of the breadcrumb is deduced from the ``title`` attribute of the view.\nHowever, for a complex hierarchy, you are free to override the ``get_breadcrumbs`` method:\n\n.. code:: python\n\n    # you can trigger url reversing via pattern_name, as for menu nodes\n    class BlogMixin(BaseMixin)\n        def get_breadcrumbs(self):\n            breadcrumbs = super(BlogMixin, self).get_breadcrumbs()\n            breadcrumbs.append(Breadcrumb('Blog', pattern_name='blog:index'))\n            return breadcrumbs\n\n\n    # breadcrumbs = Home > Blog > Last entries\n    class BlogIndex(BlogMixin):\n        title = 'Last entries'\n\n\n    # for dynamic titles, just override the get_title method\n    # breadcrumbs = Home > Blog > My category name\n    class CategoryDetail(BlogMixin, DetailView):\n\n        model = Category\n\n        def get_title(self):\n            # assuming your Category model has a title field\n            return self.object.title\n\n\nThe last step is to render the breadcrumbs in your template. The provided mixin takes\ncare with passing data in the context, so all you need is::\n\n    {% load navutils_tags %}\n\n    {% render_breadcrumbs breadcrumbs %}\n\nThe breadcrumbs part of navutils is bundled with two templates, feel free to override them:\n\n- ``navutils/breadcrumbs.html``: the breadcrumbs wrapper\n- ``navutils/crumb.html``: used to render each crumb\n\nThat's it !\n\nChangelog\n=========\n\nSee `CHANGES.rst\n<CHANGES.rst>`_.\n\nLicense\n=======\n\nProject is licensed under BSD license.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/EliotBerriot/django-navutils", "keywords": "", "license": "BSD License", "maintainer": "Eliot Berriot", "maintainer_email": "contact@eliotberriot.com", "name": "django-navutils", "package_url": "https://pypi.org/project/django-navutils/", "platform": "any", "project_url": "https://pypi.org/project/django-navutils/", "project_urls": {"Homepage": "http://github.com/EliotBerriot/django-navutils"}, "release_url": "https://pypi.org/project/django-navutils/0.7/", "requires_dist": ["persisting-theory"], "requires_python": "", "summary": "A lightweight package for handling menus and breadcrumbs in your django project", "version": "0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Note</strong>: this package is still in beta. It has been successfully used in a few projects of my own. However, API may be subject to backward incompatible changes until the first major version is released.</p>\n<p>Django-navutils is a lightweight package for handling menu and breadcrumbs inside your django project.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#features\" id=\"id1\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#requirements\" id=\"id2\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#install\" id=\"id3\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#menus\" id=\"id5\" rel=\"nofollow\">Menus</a></li>\n<li><a href=\"#breadcrumbs\" id=\"id6\" rel=\"nofollow\">Breadcrumbs</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id7\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#license\" id=\"id8\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li>No database involved (unless you want it): menus and breadcrumbs are plain old python code</li>\n<li>Highly customizable</li>\n<li>Conditionnal menu items display: you want to show a menu link to authenticated users only ? Anonymous ? Staff members ? A custom criteria ? You\u2019re covered !</li>\n<li>i18n-friendly: you can rely on usual django translation mechanisms</li>\n<li>Unlimited menus</li>\n<li>Semi-automatic current menu node detection</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Requirements</a></h2>\n<ul>\n<li>Python &gt;= 2.7 or &gt;= 3.3</li>\n<li>Django &gt;= 1.7</li>\n</ul>\n<p>The menu system may be integrated in any project, but the breadcrumbs part requires\nthat you use class-based views.</p>\n</div>\n<div id=\"install\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Install</a></h2>\n<p>Package is available on pip and can be installed via <tt>pip install <span class=\"pre\">django-navutils</span></tt>.</p>\n<p>You\u2019ll also have to add <tt>navutils</tt> to your <tt>settings.INSTALLED_APPS</tt></p>\n<p>Also add the following to <tt>settings.CONTEXT_PROCESSORS</tt>:</p>\n<pre><span class=\"n\">CONTEXT_PROCESSORS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'navutils.context_processors.menus'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"menus\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Menus</a></h3>\n<p>Navutils represents menus using <tt>Menu</tt> and <tt>Node</tt> instances, each menu being a collection of\nnode instances representing a menu link. Nodes may have children, which are also <tt>Node</tt> instances.</p>\n<p>Let\u2019s see a minimal example.</p>\n<p><tt>yourapp/menu.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">navutils</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n<span class=\"n\">main_menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Menu</span><span class=\"p\">(</span><span class=\"s1\">'main'</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">main_menu</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># will be shown to everybody</span>\n<span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'blog'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Blog'</span><span class=\"p\">,</span> <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'blog:index'</span><span class=\"p\">)</span>\n<span class=\"n\">main_menu</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># nodes created with a pattern_name argument will use django reverse</span>\n<span class=\"k\">assert</span> <span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">get_url</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'/blog'</span>\n\n<span class=\"c1\"># if you want to disable reversion, use the url argument</span>\n<span class=\"n\">django</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'django'</span><span class=\"p\">,</span>\n                   <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Django project'</span><span class=\"p\">,</span>\n                   <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://djangoproject.com'</span><span class=\"p\">,</span>\n                   <span class=\"n\">link_attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'target'</span><span class=\"p\">:</span> <span class=\"s1\">'_blank'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Each node instance can accept an arbitrary number of children</span>\n<span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'last_entries'</span><span class=\"p\">,</span>\n              <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Last entries'</span><span class=\"p\">,</span>\n              <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'blog:last_entries'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'archives'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Archives'</span><span class=\"p\">,</span> <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'blog:archives'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># will be shown to anonymous users only</span>\n<span class=\"n\">login</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">AnonymousNode</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'login'</span><span class=\"p\">,</span>\n                           <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Login'</span><span class=\"p\">,</span>\n                           <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'accounts_login'</span><span class=\"p\">,</span>\n                           <span class=\"n\">link_attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'big-button'</span><span class=\"p\">})</span>\n<span class=\"n\">main_menu</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">login</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># will be shown to authenticated users only</span>\n<span class=\"n\">logout</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">AuthenticatedNode</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'logout'</span><span class=\"p\">,</span>\n                                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Logout'</span><span class=\"p\">,</span>\n                                <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'accounts_logout'</span><span class=\"p\">)</span>\n<span class=\"n\">main_menu</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">logout</span><span class=\"p\">)</span>\n</pre>\n<p><tt>yourapp/templates/index.html</tt>:</p>\n<pre>{% load navutils_tags %}\n{% render_menu menu=menus.main user=request.user %}\n</pre>\n<p>For an anonymous user, this would output something like:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">nav</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main-menu\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"has-children menu-item\"</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/blog\"</span><span class=\"p\">&gt;</span>Blog<span class=\"p\">&lt;</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"sub-menu\"</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"menu-item\"</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/blog/latest\"</span><span class=\"p\">&gt;</span>Latest entries<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"menu-item\"</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/blog/archives\"</span><span class=\"p\">&gt;</span>Archives<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"menu-item\"</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://djangoproject.com\"</span> <span class=\"na\">target</span><span class=\"o\">=</span><span class=\"s\">\"_blank\"</span><span class=\"p\">&gt;</span>Django project<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"menu-item\"</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/login\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"big-button\"</span><span class=\"p\">&gt;</span>Login<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">nav</span><span class=\"p\">&gt;</span>\n</pre>\n<p>You can also directly set children nodes on parent instanciation with the <tt>children</tt> argument:</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Greetings'</span><span class=\"p\">,</span>\n    <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'user:dashboard'</span><span class=\"p\">,</span>\n    <span class=\"n\">children</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'logout'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Logout'</span><span class=\"p\">,</span> <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'user:logout'</span><span class=\"p\">),</span>\n\n        <span class=\"c1\"># you can nest children indefinitely</span>\n        <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span>\n            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'settings'</span><span class=\"p\">,</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Settings'</span><span class=\"p\">,</span>\n            <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'user:settings'</span><span class=\"p\">,</span>\n            <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'newsletter'</span><span class=\"p\">,</span>\n                          <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Newsletter'</span><span class=\"p\">,</span>\n                          <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'user:settings:newsletter'</span><span class=\"p\">)</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Nodes can be customized in many ways:</p>\n<pre><span class=\"n\">heavily_customized_node</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span>\n    <span class=\"s1\">'customized'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'My custom menu'</span><span class=\"p\">,</span>  <span class=\"c1\"># Supports arbitrary template values as well</span>\n                       <span class=\"c1\"># like {{ request.user }}</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'#'</span><span class=\"p\">,</span>  <span class=\"c1\"># Supports arbitrary template values as well</span>\n              <span class=\"c1\"># like {{ request.user }}</span>\n\n    <span class=\"c1\"># a custom CSS class that will be applied to the node on rendering</span>\n    <span class=\"n\">css_class</span><span class=\"o\">=</span><span class=\"s1\">'custom-class'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># the &lt;a&gt; title attribute</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'click me!'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># a path to a custom template for rendering the node</span>\n    <span class=\"c1\"># it's also possible to globally specify a custom template by naming</span>\n    <span class=\"c1\"># your template '&lt;yourapp&gt;/templates/navutils/node.html'</span>\n    <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s1\">'myapp/menu/mynode.html'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># extra context you can use in your node template</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">},</span>\n\n    <span class=\"c1\"># a dict of attributes that will be applied as HTML attributes on the &lt;li&gt;</span>\n    <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'style'</span><span class=\"p\">:</span> <span class=\"s1\">'background-color: white;'</span><span class=\"p\">}</span>\n\n    <span class=\"c1\"># a dict of attributes that will be applied as HTML attributes on the &lt;a&gt;</span>\n    <span class=\"n\">link_attrs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'target'</span><span class=\"p\">:</span> <span class=\"s1\">'_blank'</span><span class=\"p\">,</span> <span class=\"s1\">'data-something'</span><span class=\"p\">:</span> <span class=\"s1\">'fancy-stuff'</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<div id=\"current-node\">\n<h4>Current node</h4>\n<p>You\u2019ll probably want to highlight the current node in some way. Navutils provide\na view mixin you an inherit from in order to achieve this.</p>\n<p>Assuming the following menu:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">navutils</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n<span class=\"n\">main_menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Menu</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'main'</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">main_menu</span><span class=\"p\">)</span>\n\n<span class=\"n\">login</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'login'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Login'</span><span class=\"p\">,</span> <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'account_login'</span><span class=\"p\">)</span>\n<span class=\"n\">main_menu</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">login</span><span class=\"p\">)</span>\n</pre>\n<p>You can bind a view to a menu node with the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">navutils</span> <span class=\"kn\">import</span> <span class=\"n\">MenuMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Login</span><span class=\"p\">(</span><span class=\"n\">MenuMixin</span><span class=\"p\">,</span> <span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">current_menu_item</span> <span class=\"o\">=</span> <span class=\"s1\">'login'</span>\n</pre>\n<dl>\n<dt>Under the hood, the mixin will pass the value to the context and a <cite>current</cite> class will be added</dt>\n<dd>to the login node if the view is displayed. Note that you can achieve the same result\nwith django function-based views, as long as you manually pass the node identifier in the context,\nunder the <cite>current_menu_item</cite> key.</dd>\n</dl>\n</div>\n<div id=\"node-reference\">\n<h4>Node reference</h4>\n<p>Navutils provide a few node subclasses that address common use cases.</p>\n<div id=\"node\">\n<h5>Node</h5>\n<p>The base Node type, will be displayed to anybody.</p>\n</div>\n<div id=\"anonymousnode\">\n<h5>AnonymousNode</h5>\n<p>Displayed to anonymous users only.</p>\n</div>\n<div id=\"authenticatednode\">\n<h5>AuthenticatedNode</h5>\n<p>Displayd to authenticated users only.</p>\n</div>\n<div id=\"staffnode\">\n<h5>StaffNode</h5>\n<p>Displayed to staff users/superusers only.</p>\n</div>\n<div id=\"permissionnode\">\n<h5>PermissionNode</h5>\n<p>Displayed to users that have the given permission. Usage:</p>\n<pre><span class=\"n\">vip_node</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">PermissionNode</span><span class=\"p\">(</span><span class=\"s1\">'vip'</span><span class=\"p\">,</span>\n                               <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'VIP Area'</span><span class=\"p\">,</span>\n                               <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'vip:index'</span><span class=\"p\">,</span>\n                               <span class=\"n\">permission</span><span class=\"o\">=</span><span class=\"s1\">'access_vip_area'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"allpermissionsnode\">\n<h5>AllPermissionsNode</h5>\n<p>Displayed to users that match a list of permission. Usage:</p>\n<pre><span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'myapp.access_vip_area'</span><span class=\"p\">,</span> <span class=\"s1\">'myapp.drink_champagne'</span><span class=\"p\">]</span>\n<span class=\"n\">champagne_node</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">AllPermissionsNode</span><span class=\"p\">(</span><span class=\"s1\">'champagne'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Champagne!'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'vip:champagne'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"n\">permissions</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"anypermissionsnode\">\n<h5>AnyPermissionsNode</h5>\n<p>Displayed to users that match any given permission. Usage:</p>\n<pre><span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'myapp.can_party'</span><span class=\"p\">,</span> <span class=\"s1\">'myapp.can_have_fun'</span><span class=\"p\">]</span>\n<span class=\"n\">have_a_good_time</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">AnyPermissionsNode</span><span class=\"p\">(</span><span class=\"s1\">'good-time'</span><span class=\"p\">,</span>\n                                           <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Have a good time'</span><span class=\"p\">,</span>\n                                           <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'good_time'</span><span class=\"p\">,</span>\n                                           <span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"n\">permissions</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"passtestnode\">\n<h5>PassTestNode</h5>\n<p>Displayed to users that match a custom test. Usage:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">can_drink_alcohol</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">21</span> <span class=\"ow\">or</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">looks_mature_for_his_age</span>\n\n<span class=\"n\">drink_alcohol</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">PassTestNode</span><span class=\"p\">(</span><span class=\"s1\">'drink'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Have a beer'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'beer'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">test</span><span class=\"o\">=</span><span class=\"n\">can_drink_alcohol</span><span class=\"p\">)</span>\n</pre>\n<p>If it\u2019s not enough, you can also override the default templates:</p>\n<ul>\n<li><tt>navutils/menu.html</tt> : the menu wrapper that loop through the nodes</li>\n<li><tt>navutils/node.html</tt> : called for displaying each node instance</li>\n</ul>\n<p>And of course, you\u2019re free to create your own sub-classes.</p>\n</div>\n</div>\n</div>\n<div id=\"breadcrumbs\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Breadcrumbs</a></h3>\n<p>Breadcrumbs are set up into views, and therefore can only be used with class-based views.</p>\n<p>First of all, you\u2019ll probably want to define a base mixin for all your views:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">navutils</span> <span class=\"kn\">import</span> <span class=\"n\">BreadcrumbsMixin</span><span class=\"p\">,</span> <span class=\"n\">Breadcrumb</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseMixin</span><span class=\"p\">(</span><span class=\"n\">BreadcrumbsMixin</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_breadcrumbs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">breadcrumbs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">BaseMixin</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_breadcrumbs</span><span class=\"p\">()</span>\n        <span class=\"n\">breadcrumbs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Breadcrumb</span><span class=\"p\">(</span><span class=\"s1\">'Home'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'/'</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">breadcrumbs</span>\n</pre>\n<p>Then, you can inherit from this view everywhere:</p>\n<pre><span class=\"c1\"># breadcrumbs = Home &gt; Blog</span>\n<span class=\"k\">class</span> <span class=\"nc\">BlogView</span><span class=\"p\">(</span><span class=\"n\">BaseMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Blog'</span>\n\n\n<span class=\"c1\"># breadcrumbs = Home &gt; Logout</span>\n<span class=\"k\">class</span> <span class=\"nc\">LogoutView</span><span class=\"p\">(</span><span class=\"n\">BaseMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Logout'</span>\n</pre>\n<p>By default, the last element of the breadcrumb is deduced from the <tt>title</tt> attribute of the view.\nHowever, for a complex hierarchy, you are free to override the <tt>get_breadcrumbs</tt> method:</p>\n<pre><span class=\"c1\"># you can trigger url reversing via pattern_name, as for menu nodes</span>\n<span class=\"k\">class</span> <span class=\"nc\">BlogMixin</span><span class=\"p\">(</span><span class=\"n\">BaseMixin</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_breadcrumbs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">breadcrumbs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">BlogMixin</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_breadcrumbs</span><span class=\"p\">()</span>\n        <span class=\"n\">breadcrumbs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Breadcrumb</span><span class=\"p\">(</span><span class=\"s1\">'Blog'</span><span class=\"p\">,</span> <span class=\"n\">pattern_name</span><span class=\"o\">=</span><span class=\"s1\">'blog:index'</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">breadcrumbs</span>\n\n\n<span class=\"c1\"># breadcrumbs = Home &gt; Blog &gt; Last entries</span>\n<span class=\"k\">class</span> <span class=\"nc\">BlogIndex</span><span class=\"p\">(</span><span class=\"n\">BlogMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Last entries'</span>\n\n\n<span class=\"c1\"># for dynamic titles, just override the get_title method</span>\n<span class=\"c1\"># breadcrumbs = Home &gt; Blog &gt; My category name</span>\n<span class=\"k\">class</span> <span class=\"nc\">CategoryDetail</span><span class=\"p\">(</span><span class=\"n\">BlogMixin</span><span class=\"p\">,</span> <span class=\"n\">DetailView</span><span class=\"p\">):</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Category</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># assuming your Category model has a title field</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</pre>\n<p>The last step is to render the breadcrumbs in your template. The provided mixin takes\ncare with passing data in the context, so all you need is:</p>\n<pre>{% load navutils_tags %}\n\n{% render_breadcrumbs breadcrumbs %}\n</pre>\n<p>The breadcrumbs part of navutils is bundled with two templates, feel free to override them:</p>\n<ul>\n<li><tt>navutils/breadcrumbs.html</tt>: the breadcrumbs wrapper</li>\n<li><tt>navutils/crumb.html</tt>: used to render each crumb</li>\n</ul>\n<p>That\u2019s it !</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Changelog</a></h2>\n<p>See <a href=\"CHANGES.rst\" rel=\"nofollow\">CHANGES.rst</a>.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id8\" rel=\"nofollow\">License</a></h2>\n<p>Project is licensed under BSD license.</p>\n</div>\n\n          </div>"}, "last_serial": 4854003, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "49a6438dc62e081119ad4dd43ae6a06c", "sha256": "bdb0783db2c4ec75eec1d68d59e5339939ad192d6c98ab4ca9e74b0dfb25fe99"}, "downloads": -1, "filename": "django-navutils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "49a6438dc62e081119ad4dd43ae6a06c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8928, "upload_time": "2015-05-21T00:13:12", "upload_time_iso_8601": "2015-05-21T00:13:12.228567Z", "url": "https://files.pythonhosted.org/packages/d3/34/e004181d68ee056efa77962abbb9045d5a9a14f516c3cfa4adbfe20ca689/django-navutils-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "21e8874d1e4c1a562a934d150e906b68", "sha256": "6e57edfc299f361ee66ce33e55abd73074995d2f59034f6845d46676eff7dcb7"}, "downloads": -1, "filename": "django-navutils-0.1.1.tar.gz", "has_sig": false, "md5_digest": "21e8874d1e4c1a562a934d150e906b68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8957, "upload_time": "2015-05-21T08:07:39", "upload_time_iso_8601": "2015-05-21T08:07:39.177369Z", "url": "https://files.pythonhosted.org/packages/dd/8f/41805dfaa8b4e737ff48997ec57b25a700a0c7801b6f5353b19c8fe09ab4/django-navutils-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5b7b54fa1d20eeb664c91767888355a1", "sha256": "049e5d837f9233a41b71799c164b167556d5b961be663dde8aa9710a91d4babf"}, "downloads": -1, "filename": "django-navutils-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5b7b54fa1d20eeb664c91767888355a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10110, "upload_time": "2015-05-21T08:20:45", "upload_time_iso_8601": "2015-05-21T08:20:45.096294Z", "url": "https://files.pythonhosted.org/packages/c3/3e/2a59b08139335d6c64d4188626a44f75693464b4c98cdb9d353a8addd446/django-navutils-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "16ad3d179d5c3ffc4eee67f4e9bdea2f", "sha256": "5169d1d3bb7596f7e445e38bed8320f9e69eb2e3051ee0e19462e5060b07f8dc"}, "downloads": -1, "filename": "django-navutils-0.1.3.tar.gz", "has_sig": false, "md5_digest": "16ad3d179d5c3ffc4eee67f4e9bdea2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10697, "upload_time": "2015-05-21T09:49:52", "upload_time_iso_8601": "2015-05-21T09:49:52.447504Z", "url": "https://files.pythonhosted.org/packages/04/31/3c798954baf16014474a51f577915fc134de20cd1c8d88713f96f93a35ba/django-navutils-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "49bf482602beb69b4cc02e59a20c9ce5", "sha256": "2063528ab466f5df5071f801ae1160138cf4d3f826b57ec3a28e745fa3a403ed"}, "downloads": -1, "filename": "django-navutils-0.1.4.tar.gz", "has_sig": false, "md5_digest": "49bf482602beb69b4cc02e59a20c9ce5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10734, "upload_time": "2015-05-21T12:37:42", "upload_time_iso_8601": "2015-05-21T12:37:42.048684Z", "url": "https://files.pythonhosted.org/packages/5a/b2/b76d283c23c1e3f979e97a459a7db5513f7683f0e842d2172ac076880b90/django-navutils-0.1.4.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "bc31902c04334a60b3798aab5f8fa949", "sha256": "3315b850551f73b8721a7429ce3739313ce5256b0b89ad08c83887f1df1d5d05"}, "downloads": -1, "filename": "django-navutils-0.2.tar.gz", "has_sig": false, "md5_digest": "bc31902c04334a60b3798aab5f8fa949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11403, "upload_time": "2015-05-24T18:25:40", "upload_time_iso_8601": "2015-05-24T18:25:40.998861Z", "url": "https://files.pythonhosted.org/packages/e2/41/c6e9fea1744159307d2b254a1073bf83d6e029861373e9a2859d53157c54/django-navutils-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "094c29e005a446c6508a4698c4c80802", "sha256": "47bd0caf6b189a3e5e7cae92bc74dd3266233fca4668336af980a8e759e34774"}, "downloads": -1, "filename": "django-navutils-0.3.tar.gz", "has_sig": false, "md5_digest": "094c29e005a446c6508a4698c4c80802", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13680, "upload_time": "2015-06-03T21:07:00", "upload_time_iso_8601": "2015-06-03T21:07:00.223199Z", "url": "https://files.pythonhosted.org/packages/f7/97/13bd20b6b897ace856afaa72093192861e54a680857400506deaca1b5e28/django-navutils-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0ea62352940f414480e7b0e07387c886", "sha256": "c3adc6bd15b7f9bbf5ed2f9d664efc5948099a9c2c1b67919dee02d3abc8cc81"}, "downloads": -1, "filename": "django-navutils-0.4.tar.gz", "has_sig": false, "md5_digest": "0ea62352940f414480e7b0e07387c886", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13886, "upload_time": "2015-06-19T09:56:25", "upload_time_iso_8601": "2015-06-19T09:56:25.648387Z", "url": "https://files.pythonhosted.org/packages/c5/21/ea1f91053fb633404ca7be4aa3e419cea87197ef5c7cec58fc47521a2817/django-navutils-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "312db76ddcece4b355ed0aa46bec7d48", "sha256": "b916581fb21baa36336a1acbdb4235d340d6a301de96e8d85ce2660ad217a34a"}, "downloads": -1, "filename": "django-navutils-0.5.tar.gz", "has_sig": false, "md5_digest": "312db76ddcece4b355ed0aa46bec7d48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13929, "upload_time": "2015-07-22T08:36:52", "upload_time_iso_8601": "2015-07-22T08:36:52.711552Z", "url": "https://files.pythonhosted.org/packages/13/a3/ef7a08f0d6d881d3de61b19694e3e797686b15eb6e1f924e3cbe83f08a06/django-navutils-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "9bc66faf1b0a3e200b536fec987aa36b", "sha256": "61835d1db3c15bb124ba1475cbc06d80c49c97ad2e6c219c510b5fe280013fde"}, "downloads": -1, "filename": "django-navutils-0.5.1.tar.gz", "has_sig": false, "md5_digest": "9bc66faf1b0a3e200b536fec987aa36b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13950, "upload_time": "2015-07-22T08:41:21", "upload_time_iso_8601": "2015-07-22T08:41:21.937794Z", "url": "https://files.pythonhosted.org/packages/11/dd/93118b4d0622cd0cb4a83b2ff1eae901a6fb722e58b20adf4ca86060a26e/django-navutils-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "f369ac2c6945bd84f3a325b974bb18cb", "sha256": "b9793eca1296a9a383b4b4cda7b1cea71a1f922ee795d250bea9b8180fb88811"}, "downloads": -1, "filename": "django-navutils-0.5.2.tar.gz", "has_sig": false, "md5_digest": "f369ac2c6945bd84f3a325b974bb18cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14002, "upload_time": "2015-07-22T09:00:33", "upload_time_iso_8601": "2015-07-22T09:00:33.536910Z", "url": "https://files.pythonhosted.org/packages/1b/02/91a45fccd080205d84d12c61eda27c75570b3c9280857f7c86ca9f974e1c/django-navutils-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "3e4a56d2f6a867e45146fefa57f933bb", "sha256": "58f9a48641ff1f9f5a61411c74976dec976d6f555cd33fd8d99cd5755ad1879e"}, "downloads": -1, "filename": "django-navutils-0.5.3.tar.gz", "has_sig": false, "md5_digest": "3e4a56d2f6a867e45146fefa57f933bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14131, "upload_time": "2015-08-21T13:13:16", "upload_time_iso_8601": "2015-08-21T13:13:16.484918Z", "url": "https://files.pythonhosted.org/packages/9b/83/6cc5c9e08b32aa704c1be208ce1d83431e6ec17b2468976e1122730f1d94/django-navutils-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "6763a6d5cc6bac6f9962c306e6b81691", "sha256": "64747296251754a4f37edc098fa61f1424a92a12d12b91d41076a1891831936f"}, "downloads": -1, "filename": "django-navutils-0.5.4.tar.gz", "has_sig": false, "md5_digest": "6763a6d5cc6bac6f9962c306e6b81691", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14724, "upload_time": "2015-09-29T12:10:03", "upload_time_iso_8601": "2015-09-29T12:10:03.173048Z", "url": "https://files.pythonhosted.org/packages/7d/49/4607ec2611c9dd9d0c02691777624025bf5022df81e5bf0f65435180dacd/django-navutils-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "6aaf15b83c53869cf305b7def8d3b394", "sha256": "8124c866ebf9726ce2ba1058ce68688070c6176d7f9c80d43a5e4d20dbc2255f"}, "downloads": -1, "filename": "django-navutils-0.5.5.tar.gz", "has_sig": false, "md5_digest": "6aaf15b83c53869cf305b7def8d3b394", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18183, "upload_time": "2017-09-05T07:35:12", "upload_time_iso_8601": "2017-09-05T07:35:12.122608Z", "url": "https://files.pythonhosted.org/packages/d3/fd/b7f21ee61ae7e2fd698c8d2b0dd92dc9b072f8a7e2e03a23799eedcecbb8/django-navutils-0.5.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "96b3da6195cca42bd172a612f7e39252", "sha256": "37673e682f1549d5068ae8543b9d0dc3cb1bc4e0f5cc437791412cd3c93b658a"}, "downloads": -1, "filename": "django_navutils-0.6-py2-none-any.whl", "has_sig": false, "md5_digest": "96b3da6195cca42bd172a612f7e39252", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22291, "upload_time": "2018-01-18T09:36:06", "upload_time_iso_8601": "2018-01-18T09:36:06.789699Z", "url": "https://files.pythonhosted.org/packages/bb/ee/ad216057c29ff1835a303b072f61166e3790c1d5f77f9ba879f8b86b28f5/django_navutils-0.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dde31b00eb905ebeb20506e6ff9c9823", "sha256": "e87c37aa2a659b36b8272eb7b230be9473c3d2e738190d2ae4e5c837341959f2"}, "downloads": -1, "filename": "django-navutils-0.6.tar.gz", "has_sig": false, "md5_digest": "dde31b00eb905ebeb20506e6ff9c9823", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17242, "upload_time": "2018-01-18T09:36:05", "upload_time_iso_8601": "2018-01-18T09:36:05.353193Z", "url": "https://files.pythonhosted.org/packages/e2/16/b823cf43a5b45d9fa6a2482f4ceb9f333f9b36df38590097c38da86c9d89/django-navutils-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "566b8ce34c8ae5747fece51488c04e56", "sha256": "2b41a23e20c01928acddb44b14fd256efb47be94ab918b264852169a04fba49e"}, "downloads": -1, "filename": "django_navutils-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "566b8ce34c8ae5747fece51488c04e56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19448, "upload_time": "2019-02-22T10:52:49", "upload_time_iso_8601": "2019-02-22T10:52:49.402546Z", "url": "https://files.pythonhosted.org/packages/fd/ac/1a504ee12e8babd6aada40b7fe30e2f573dcf63c84a857b48e430a37f6e6/django_navutils-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df9bd0da54fecbc07340d9b7a4b3f13c", "sha256": "49e57a525069de4d9521054729a07c042bc97dbd6fbf023578d79be1c22e52a6"}, "downloads": -1, "filename": "django-navutils-0.7.tar.gz", "has_sig": false, "md5_digest": "df9bd0da54fecbc07340d9b7a4b3f13c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15660, "upload_time": "2019-02-22T10:52:51", "upload_time_iso_8601": "2019-02-22T10:52:51.062943Z", "url": "https://files.pythonhosted.org/packages/cc/18/c90703bd24801df236bd28cd26bafcba715906251eee4f5f28f7d59f7929/django-navutils-0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "566b8ce34c8ae5747fece51488c04e56", "sha256": "2b41a23e20c01928acddb44b14fd256efb47be94ab918b264852169a04fba49e"}, "downloads": -1, "filename": "django_navutils-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "566b8ce34c8ae5747fece51488c04e56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19448, "upload_time": "2019-02-22T10:52:49", "upload_time_iso_8601": "2019-02-22T10:52:49.402546Z", "url": "https://files.pythonhosted.org/packages/fd/ac/1a504ee12e8babd6aada40b7fe30e2f573dcf63c84a857b48e430a37f6e6/django_navutils-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df9bd0da54fecbc07340d9b7a4b3f13c", "sha256": "49e57a525069de4d9521054729a07c042bc97dbd6fbf023578d79be1c22e52a6"}, "downloads": -1, "filename": "django-navutils-0.7.tar.gz", "has_sig": false, "md5_digest": "df9bd0da54fecbc07340d9b7a4b3f13c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15660, "upload_time": "2019-02-22T10:52:51", "upload_time_iso_8601": "2019-02-22T10:52:51.062943Z", "url": "https://files.pythonhosted.org/packages/cc/18/c90703bd24801df236bd28cd26bafcba715906251eee4f5f28f7d59f7929/django-navutils-0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:43 2020"}