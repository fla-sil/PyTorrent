{"info": {"author": "Ceterai", "author_email": "ceterai@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8"], "description": "# django-pyproject\n\n## Description\n\nThis package allows you to store some/all of your settings in your pyproject.toml file (or any toml file in general).\n\n## Installation\n\nYou can add django-pyproject to your poetry project with:\n\n    poetry add django-pyproject\n\nOr through pip:\n\n    pip install django-pyproject\n\n- [PyPI page](https://pypi.org/project/django-pyproject/)\n- [GitHub page](https://github.com/Ceterai/django-pyproject/)\n\n## Usage\n\nYou can use django-pyproject to import any settings specified in your pyproject file under [tool.django].\n\n### Settings file\n\nTo import django settings from your pyproject file, use this in your settings file:\n\n    from djpp import pyproject\n    pyproject.load()\n\nThis will work only if you have a standard django project structure.  \nIf your pyproject file is located somewhere else or has a different name, you can specify it:\n\n    pyproject.load('path-to-your-pyproject-file')\n\n### PyProject file\n\nAll django settings in pyproject.toml file should be stored under [tool.django] key, like this:\n\n    [tool.django]\n    ALLOWED_HOSTS = []\n\nYou don't have to use uppercase letters for the variable names, django-pyproject will automatically convert them all. This does **not** work for dict key names:\n\n    [tool.django]\n    allowed_hosts = []\n\n    [tool.django.databases.default]\n    engine = 'django.db.backends.sqlite3'\n    HOST = '127.0.0.1'\n    PORT = '5432'\n\nWill convert into:\n\n    ALLOWED_HOSTS = []\n    DATABASES = {\n        'default': {\n            'engine': 'django.db.backends.sqlite3',\n            'HOST': '127.0.0.1',\n            'PORT': '5432',\n        }\n    }\n\nBut what to do about relative filepaths, that you had to construct with os.path?  \nYou can specify filepaths separating them with '/' in inline dict under key 'path'.  \nUsing '..' will make django-pyproject go up a level.\nStarting with '.' will make a path relative:\n\n    base_dir = { path = \".\" }\n    project_dir = { path = \"./your_project_folder\" }\n    repo_dir = { path = \"./..\" }\n\nThis will have the same effect as the following code in settings.py:\n\n    import os\n    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\n    REPO_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n> This is assuming you have a standard django project structure.\n\nIf a value needs to be taken from an environment, use inline dict with key 'path' and optional key 'default':\n\n    email_host_password = { env = 'SECRET_PASSWORD' }\n    secret_key = { env = 'SECRET_KEY', default = 'hello' }\n\n### Development, Docker & Production\n\nIf some of you settings have an alternative value for when DEBUG is off, specify them in [tool.django.production]. They will override regular settings if DEBUG is off.  \nSimilarly, settings under [tool.django.development] will work only if DEBUG i on.\n\n>It is important to note, that DEBUG is True by default.\n\nBy default, django-pyproject applies production settings and sets DEBUG to False, if current evironment has a DJANGO_ENV variable, set to 'production'.  \nYou can override it with your own key and value like this:\n\n    pyproject.load(production_env=('YOUR_KEY', 'your_value'))\n\nIf some of you settings have an alternative value for when the app is in container, specify them in [tool.django.docker]. They will override regular settings and development settings, and will be overriden by production settings.\n\nBy default, django-pyproject applies docker settings, if current evironment has a DJANGO_ENV variable.  \nYou can override it with your own key like this:\n\n    pyproject.load(docker_env='YOUR_KEY')\n\n### Concatenating & Poetry keys\n\nYou can concat strings using inline dict with 'con' and 'cat' keys.  \nAdditionally, you can access values in keys from [tool.poetry] using 'poetry' key.  \nThis example explains both features:\n\n    [tool.poetry]\n    name = \"my-app\"\n\n    [tool.django]\n    project_name = { con = { poetry = \"name\" }, cat = \", v.1\" }\n\nwill result in\n\n    PROJECT_NAME = 'my-app, v.1'\n\nKeep in mind, that due to toml python library limitations, enclosing too much inline dicts in each other may result in error.  \nTo overcome this, use con-poetry, con-poetry-cat and poetry-cat hybrids:\n\n    [tool.poetry]\n    name = \"my-app\"\n\n    [tool.django]\n    var1 = { con = \"Hi! \", poetry = \"name\" }\n    var2 = { poetry = \"name\", cat = \", v.1\" }\n    var3 = { con = \"Hi! \", poetry = \"name\", cat = \", v.1\" }\n\nwill result in\n\n    VAR1 = 'Hi! my-app'\n    VAR2 = 'my-app, v.1'\n    VAR3 = 'Hi! my-app, v.1'\n\n### Apps\n\nYou can group settings that belong to an external app together for easier access.  \nTo do that, you can list them under [tool.django.apps.your_app].  \nYou can also modify variables like INSTALLED_APPS from here with 'insert' key.\n\nHere's an example for corsheaders:\n\n    [tool.django.apps.cors]\n    CORS_ORIGIN_WHITELIST = ['http://localhost:3000',]\n    CORS_ALLOW_CREDENTIALS = true\n    CSRF_COOKIE_NAME = \"XCSRF-Token\"\n    INSTALLED_APPS = { insert = 'corsheaders' }\n    MIDDLEWARE = { insert = 'corsheaders.middleware.CorsMiddleware', pos = 3 }\n\nThis is similar to the following python code:\n\n    CORS_ORIGIN_WHITELIST = ('http://localhost:3000',)\n    CORS_ALLOW_CREDENTIALS = True\n    CSRF_COOKIE_NAME = \"XCSRF-Token\"\n    INSTALLED_APPS.append('corsheaders')\n    MIDDLEWARE.insert(3, 'corsheaders.middleware.CorsMiddleware')\n\n### Full import\n\nYou also can simply import pyproject file (or any toml file) contents as a dict with load_all().\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ceterai/django-pyproject", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-pyproject", "package_url": "https://pypi.org/project/django-pyproject/", "platform": "", "project_url": "https://pypi.org/project/django-pyproject/", "project_urls": {"Homepage": "https://github.com/Ceterai/django-pyproject", "Repository": "https://github.com/Ceterai/django-pyproject"}, "release_url": "https://pypi.org/project/django-pyproject/1.0.6/", "requires_dist": ["toml (>=0.10.0,<0.11.0)"], "requires_python": ">=3.8,<4.0", "summary": "A package for storing Django settings in pyproject.toml.", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-pyproject</h1>\n<h2>Description</h2>\n<p>This package allows you to store some/all of your settings in your pyproject.toml file (or any toml file in general).</p>\n<h2>Installation</h2>\n<p>You can add django-pyproject to your poetry project with:</p>\n<pre><code>poetry add django-pyproject\n</code></pre>\n<p>Or through pip:</p>\n<pre><code>pip install django-pyproject\n</code></pre>\n<ul>\n<li><a href=\"https://pypi.org/project/django-pyproject/\" rel=\"nofollow\">PyPI page</a></li>\n<li><a href=\"https://github.com/Ceterai/django-pyproject/\" rel=\"nofollow\">GitHub page</a></li>\n</ul>\n<h2>Usage</h2>\n<p>You can use django-pyproject to import any settings specified in your pyproject file under [tool.django].</p>\n<h3>Settings file</h3>\n<p>To import django settings from your pyproject file, use this in your settings file:</p>\n<pre><code>from djpp import pyproject\npyproject.load()\n</code></pre>\n<p>This will work only if you have a standard django project structure.<br>\nIf your pyproject file is located somewhere else or has a different name, you can specify it:</p>\n<pre><code>pyproject.load('path-to-your-pyproject-file')\n</code></pre>\n<h3>PyProject file</h3>\n<p>All django settings in pyproject.toml file should be stored under [tool.django] key, like this:</p>\n<pre><code>[tool.django]\nALLOWED_HOSTS = []\n</code></pre>\n<p>You don't have to use uppercase letters for the variable names, django-pyproject will automatically convert them all. This does <strong>not</strong> work for dict key names:</p>\n<pre><code>[tool.django]\nallowed_hosts = []\n\n[tool.django.databases.default]\nengine = 'django.db.backends.sqlite3'\nHOST = '127.0.0.1'\nPORT = '5432'\n</code></pre>\n<p>Will convert into:</p>\n<pre><code>ALLOWED_HOSTS = []\nDATABASES = {\n    'default': {\n        'engine': 'django.db.backends.sqlite3',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n</code></pre>\n<p>But what to do about relative filepaths, that you had to construct with os.path?<br>\nYou can specify filepaths separating them with '/' in inline dict under key 'path'.<br>\nUsing '..' will make django-pyproject go up a level.\nStarting with '.' will make a path relative:</p>\n<pre><code>base_dir = { path = \".\" }\nproject_dir = { path = \"./your_project_folder\" }\nrepo_dir = { path = \"./..\" }\n</code></pre>\n<p>This will have the same effect as the following code in settings.py:</p>\n<pre><code>import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nREPO_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n</code></pre>\n<blockquote>\n<p>This is assuming you have a standard django project structure.</p>\n</blockquote>\n<p>If a value needs to be taken from an environment, use inline dict with key 'path' and optional key 'default':</p>\n<pre><code>email_host_password = { env = 'SECRET_PASSWORD' }\nsecret_key = { env = 'SECRET_KEY', default = 'hello' }\n</code></pre>\n<h3>Development, Docker &amp; Production</h3>\n<p>If some of you settings have an alternative value for when DEBUG is off, specify them in [tool.django.production]. They will override regular settings if DEBUG is off.<br>\nSimilarly, settings under [tool.django.development] will work only if DEBUG i on.</p>\n<blockquote>\n<p>It is important to note, that DEBUG is True by default.</p>\n</blockquote>\n<p>By default, django-pyproject applies production settings and sets DEBUG to False, if current evironment has a DJANGO_ENV variable, set to 'production'.<br>\nYou can override it with your own key and value like this:</p>\n<pre><code>pyproject.load(production_env=('YOUR_KEY', 'your_value'))\n</code></pre>\n<p>If some of you settings have an alternative value for when the app is in container, specify them in [tool.django.docker]. They will override regular settings and development settings, and will be overriden by production settings.</p>\n<p>By default, django-pyproject applies docker settings, if current evironment has a DJANGO_ENV variable.<br>\nYou can override it with your own key like this:</p>\n<pre><code>pyproject.load(docker_env='YOUR_KEY')\n</code></pre>\n<h3>Concatenating &amp; Poetry keys</h3>\n<p>You can concat strings using inline dict with 'con' and 'cat' keys.<br>\nAdditionally, you can access values in keys from [tool.poetry] using 'poetry' key.<br>\nThis example explains both features:</p>\n<pre><code>[tool.poetry]\nname = \"my-app\"\n\n[tool.django]\nproject_name = { con = { poetry = \"name\" }, cat = \", v.1\" }\n</code></pre>\n<p>will result in</p>\n<pre><code>PROJECT_NAME = 'my-app, v.1'\n</code></pre>\n<p>Keep in mind, that due to toml python library limitations, enclosing too much inline dicts in each other may result in error.<br>\nTo overcome this, use con-poetry, con-poetry-cat and poetry-cat hybrids:</p>\n<pre><code>[tool.poetry]\nname = \"my-app\"\n\n[tool.django]\nvar1 = { con = \"Hi! \", poetry = \"name\" }\nvar2 = { poetry = \"name\", cat = \", v.1\" }\nvar3 = { con = \"Hi! \", poetry = \"name\", cat = \", v.1\" }\n</code></pre>\n<p>will result in</p>\n<pre><code>VAR1 = 'Hi! my-app'\nVAR2 = 'my-app, v.1'\nVAR3 = 'Hi! my-app, v.1'\n</code></pre>\n<h3>Apps</h3>\n<p>You can group settings that belong to an external app together for easier access.<br>\nTo do that, you can list them under [tool.django.apps.your_app].<br>\nYou can also modify variables like INSTALLED_APPS from here with 'insert' key.</p>\n<p>Here's an example for corsheaders:</p>\n<pre><code>[tool.django.apps.cors]\nCORS_ORIGIN_WHITELIST = ['http://localhost:3000',]\nCORS_ALLOW_CREDENTIALS = true\nCSRF_COOKIE_NAME = \"XCSRF-Token\"\nINSTALLED_APPS = { insert = 'corsheaders' }\nMIDDLEWARE = { insert = 'corsheaders.middleware.CorsMiddleware', pos = 3 }\n</code></pre>\n<p>This is similar to the following python code:</p>\n<pre><code>CORS_ORIGIN_WHITELIST = ('http://localhost:3000',)\nCORS_ALLOW_CREDENTIALS = True\nCSRF_COOKIE_NAME = \"XCSRF-Token\"\nINSTALLED_APPS.append('corsheaders')\nMIDDLEWARE.insert(3, 'corsheaders.middleware.CorsMiddleware')\n</code></pre>\n<h3>Full import</h3>\n<p>You also can simply import pyproject file (or any toml file) contents as a dict with load_all().</p>\n\n          </div>"}, "last_serial": 7068041, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a8591008e5513a294fa4109b6dc4ae8e", "sha256": "b25c903de78ef2fab3274c814480453f6e3acc4b2899f355f58bdb694d6fa089"}, "downloads": -1, "filename": "django_pyproject-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8591008e5513a294fa4109b6dc4ae8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 5189, "upload_time": "2020-04-19T18:06:04", "upload_time_iso_8601": "2020-04-19T18:06:04.808880Z", "url": "https://files.pythonhosted.org/packages/52/9f/83bed31e69fdbc127e8ff8c2e1272c82714221a3ed5e746f5d158ac44c04/django_pyproject-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e94eba8fba05f26adb2c2681401b6f5b", "sha256": "8ebd5989533116bbfa02aeba64f9104c0e0ea8b36a318888af92aaa23021658c"}, "downloads": -1, "filename": "django-pyproject-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e94eba8fba05f26adb2c2681401b6f5b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 5537, "upload_time": "2020-04-19T18:06:02", "upload_time_iso_8601": "2020-04-19T18:06:02.158441Z", "url": "https://files.pythonhosted.org/packages/8e/82/601d59e2614d2778fb3fa6d56dd97419bf71c573f7987dc786653d946c66/django-pyproject-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "226fb52cc1fca66bd3401821a3915d60", "sha256": "3138f7a5b004ea08396c44db467b3cf7bf67b1c8e4485b52e1e6880d845743ae"}, "downloads": -1, "filename": "django_pyproject-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "226fb52cc1fca66bd3401821a3915d60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 5254, "upload_time": "2020-04-19T19:02:56", "upload_time_iso_8601": "2020-04-19T19:02:56.524874Z", "url": "https://files.pythonhosted.org/packages/13/0e/eea209886f2e3bd57ccd1efa2a101e2cdf1e6458cfd662e2af635a215702/django_pyproject-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44f366913954f3a632bbc13e557d3f1d", "sha256": "9f248c3c4093c33906e64da26c7c91542c9ce77266eb5e0db6f0332402e91dce"}, "downloads": -1, "filename": "django-pyproject-1.0.1.tar.gz", "has_sig": false, "md5_digest": "44f366913954f3a632bbc13e557d3f1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 5660, "upload_time": "2020-04-19T19:02:55", "upload_time_iso_8601": "2020-04-19T19:02:55.400112Z", "url": "https://files.pythonhosted.org/packages/8f/81/bb59cc9f1934365fe6a72f45a0fdc7a2267d17f498cee97ee25ea3ba8887/django-pyproject-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ba798107ee391425bab524c4c85a82be", "sha256": "1d718d64cee7623c8b7735cd94982ba6e162e53dc3ec3ad5ca942730cfb7bd9e"}, "downloads": -1, "filename": "django_pyproject-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ba798107ee391425bab524c4c85a82be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 5911, "upload_time": "2020-04-19T22:04:34", "upload_time_iso_8601": "2020-04-19T22:04:34.503421Z", "url": "https://files.pythonhosted.org/packages/f3/30/636fc8730f65e9d9f5b6047291f1af5ca34ffcb898368a4fd948cb0ce25d/django_pyproject-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bec3df90e7630ea64a104d42a5a57ed3", "sha256": "1c6cdd6f7c17d31d9ef009e169a64d099de025e60693c1e5d72543f6cdf735df"}, "downloads": -1, "filename": "django-pyproject-1.0.2.tar.gz", "has_sig": false, "md5_digest": "bec3df90e7630ea64a104d42a5a57ed3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 6438, "upload_time": "2020-04-19T22:04:33", "upload_time_iso_8601": "2020-04-19T22:04:33.407639Z", "url": "https://files.pythonhosted.org/packages/d0/c5/3bf14e57384e1076842d5f81100b3132bea166a7df046621f9303723f280/django-pyproject-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "221c8165edfb2e5ea7a38e59b603fa71", "sha256": "d27be62a789992c614320e6a94aa8fd0960ace35259c197c864a6424f5cce895"}, "downloads": -1, "filename": "django_pyproject-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "221c8165edfb2e5ea7a38e59b603fa71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 6095, "upload_time": "2020-04-21T06:33:44", "upload_time_iso_8601": "2020-04-21T06:33:44.863705Z", "url": "https://files.pythonhosted.org/packages/b5/64/b29112ac8bfcbfa31f68d2f157b6094e490b63980c7a260ebed3357673de/django_pyproject-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e946311e5321e6369cf9b954e823ee7d", "sha256": "e40f4365cb71582f43d4819a74b6ec9ae4e0922043d7affe992814a5ade618eb"}, "downloads": -1, "filename": "django-pyproject-1.0.3.tar.gz", "has_sig": false, "md5_digest": "e946311e5321e6369cf9b954e823ee7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 6689, "upload_time": "2020-04-21T06:33:44", "upload_time_iso_8601": "2020-04-21T06:33:44.009794Z", "url": "https://files.pythonhosted.org/packages/86/88/c1c8fbaad4cf24210a264ecdc3de535fddffd6121d7083127b940548a053/django-pyproject-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "2beb9847ff0b38aba17dbbcfbef14a1d", "sha256": "0d55fee1eed65fa7479a1a8555fc6e066fdd9542163e9338efaef9f0145dd7ad"}, "downloads": -1, "filename": "django_pyproject-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2beb9847ff0b38aba17dbbcfbef14a1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 6103, "upload_time": "2020-04-21T07:04:35", "upload_time_iso_8601": "2020-04-21T07:04:35.270802Z", "url": "https://files.pythonhosted.org/packages/be/14/dae753699b9c375f49b3160ade19e466d31631b3439ba21cb92b4e3b9cd5/django_pyproject-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f90e10c237ba554e9f9ca1248f37df2", "sha256": "0e29504336084a7ddf3493b5a72f5eeddc8825e206916dba3f1dea04a1338cc8"}, "downloads": -1, "filename": "django-pyproject-1.0.4.tar.gz", "has_sig": false, "md5_digest": "9f90e10c237ba554e9f9ca1248f37df2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 6715, "upload_time": "2020-04-21T07:04:34", "upload_time_iso_8601": "2020-04-21T07:04:34.433623Z", "url": "https://files.pythonhosted.org/packages/57/e7/906e118ae8d59214a8a05e376d19c157aa812b4e60218f44ce1445472d4c/django-pyproject-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "b5699410dbfccc28127841dca0c55fd7", "sha256": "97fd9f44675e9bc6f69c52088bde4379cfdb4026710725f6c5728127c7001c4b"}, "downloads": -1, "filename": "django_pyproject-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b5699410dbfccc28127841dca0c55fd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 6095, "upload_time": "2020-04-21T07:46:48", "upload_time_iso_8601": "2020-04-21T07:46:48.019598Z", "url": "https://files.pythonhosted.org/packages/f8/ad/7dc65451b00c1c17aa60dfbf8551cb23a442959ac20adf06d37c3ef9442f/django_pyproject-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5b85e0851a1e55565925b1e22a206a3", "sha256": "9a0c67001b6aad77bade54fe20493a444902bbe0b717701d94efe2f0b55e5dd0"}, "downloads": -1, "filename": "django-pyproject-1.0.5.tar.gz", "has_sig": false, "md5_digest": "e5b85e0851a1e55565925b1e22a206a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 6695, "upload_time": "2020-04-21T07:46:46", "upload_time_iso_8601": "2020-04-21T07:46:46.909485Z", "url": "https://files.pythonhosted.org/packages/32/cf/d86547a391ae1f5d87777ba2ecf198c5557841069ff9c6ba045c05e7b4ce/django-pyproject-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "a38d41031548f26b88918d1852dd665a", "sha256": "c5255fac27aa5551804216c2b67069457dbd04f28e37891d2ecd47dce85baa22"}, "downloads": -1, "filename": "django_pyproject-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a38d41031548f26b88918d1852dd665a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 6185, "upload_time": "2020-04-21T13:43:38", "upload_time_iso_8601": "2020-04-21T13:43:38.296204Z", "url": "https://files.pythonhosted.org/packages/ab/44/119cc10fe4573cdcd0d247536a9207457f660c8f05b0843b301974bc6259/django_pyproject-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5eccdb7ca0d28cd17b4ff730995145cd", "sha256": "6f6e291a43e052b538aecf8684eb3a1db3db22ad6c34b1ced9d3c6896ee22d0d"}, "downloads": -1, "filename": "django-pyproject-1.0.6.tar.gz", "has_sig": false, "md5_digest": "5eccdb7ca0d28cd17b4ff730995145cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 6813, "upload_time": "2020-04-21T13:43:37", "upload_time_iso_8601": "2020-04-21T13:43:37.391136Z", "url": "https://files.pythonhosted.org/packages/06/18/e8c2efeb8e37be7d535f313ecbe03956bdb25d38ab79d910d07ee44722c9/django-pyproject-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a38d41031548f26b88918d1852dd665a", "sha256": "c5255fac27aa5551804216c2b67069457dbd04f28e37891d2ecd47dce85baa22"}, "downloads": -1, "filename": "django_pyproject-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a38d41031548f26b88918d1852dd665a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 6185, "upload_time": "2020-04-21T13:43:38", "upload_time_iso_8601": "2020-04-21T13:43:38.296204Z", "url": "https://files.pythonhosted.org/packages/ab/44/119cc10fe4573cdcd0d247536a9207457f660c8f05b0843b301974bc6259/django_pyproject-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5eccdb7ca0d28cd17b4ff730995145cd", "sha256": "6f6e291a43e052b538aecf8684eb3a1db3db22ad6c34b1ced9d3c6896ee22d0d"}, "downloads": -1, "filename": "django-pyproject-1.0.6.tar.gz", "has_sig": false, "md5_digest": "5eccdb7ca0d28cd17b4ff730995145cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 6813, "upload_time": "2020-04-21T13:43:37", "upload_time_iso_8601": "2020-04-21T13:43:37.391136Z", "url": "https://files.pythonhosted.org/packages/06/18/e8c2efeb8e37be7d535f313ecbe03956bdb25d38ab79d910d07ee44722c9/django-pyproject-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:32 2020"}