{"info": {"author": "Patrick J. Ryan", "author_email": "pjryan126@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<img src=\"https://i.imgur.com/uxkd2sh.png\" alt=\"opyncorporates\" width=\"512\"/>\n\n![](https://travis-ci.com/pjryan126/opyncorporates.svg?branch=master) \n[![Total alerts](https://img.shields.io/lgtm/alerts/g/pjryan126/opyncorporates.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/pjryan126/opyncorporates/alerts/) \n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/pjryan126/opyncorporates.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/pjryan126/opyncorporates/context:python)\n\n# Overview\n\n`opyncorporates` is a Python wrapper for the [OpenCorporates API](https://api.opencorporates.com).\nIt allows a user to create an `Engine` object that interacts with the API \nthrough two simple methods: `search` and `fetch`.\n\nThe `search` and `fetch` methods use signatures that mimic the request \narguments and variables required in the GET requests through the  \n[OpenCorporates API](https://api.opencorporates.com), \nwhile eliminating some of the cruft.\n\nFor example, a request to search for a company by name through the \n[OpenCorporates API](https://api.opencorporates.com) \nmight look something like this:\n\n`GET https://api.opencorporates.com/v0.4/companies/search?q=bar&per_page=100`\n\nSubmitting the same request through the search method of of an opyncorporates \nEngine object, on the other hand, would look like this:\n\n```\n>>> from opyncorporates import create_engine\n>>> engine = create_engine(api_version='0.4')\n>>> search = engine.search('companies', q='bar', per_page=100)\n```\n\nBoth the `search` and `fetch` methods return `opyncorporates.Request` objects,\nwhich allow the user (1) to explore information related to a request and (2) to\nobtain results more easily than it would be to craft a series of successive API \ncalls. \n\n# Getting Started\n\nThis section will show you how to get up and running with the \n`opyncorporates` package. Additional information can be found in the \ndocumentation [here](https://opyncorporates.readthedocs.io/en/latest/).\n\nTo get started, you can install the package using ``pip``:\n\n```\n$ pip install opyncorporates\n```\n\nOnce the package is installed, you can use it to create an\n`Engine` object for submitting requests and retrieving data through the \nOpenCorporates API. When creating an `Engine` object, you have the option of \nspecifying an API version and an API token:\n\n ```\n>>> from opyncorporates import create_engine\n>>> engine = create_engine(api_version='0.4',\n...                        api_token='<api-token>')\n>>> engine.api_version\n'0.4'\n```\n\nThe API version and API token will be used when building the urls required to\nsubmit requests to the [OpenCorporates API](https://api.opencorporates.com). \nAs of now, the package's default API version is 0.4, and it is the only \nversion supported. If you are planning to query the API on a regular basis, I\nhighly recommend purchasing an API token to increase your call limits.\n\nOnce you have created an `Engine` object, you\ncan start making calls to the [OpenCorporates API](https://api.opencorporates.com). \nIn general, each of your API calls will perform only one of two actions. It \nwill either:\n\n1. **search** for potential matches to a specified string value, or\n2. **fetch** a specific object by its unique identifier\n\nThere is a third action available when seeking information about a particular\nobject using an imprecise identifier. This third action allows you to **match**\nto an object by providing a string value for that object's name.\n\nFinally, if none of these actions suit your purposes, you can make a generic\n**request** to the API and parse the response yourself.\n\nThe call signatures for the methods associated with each action mimic HTTPS\ncalls to the API. Http request args are \nsubmitted to the method as positional arguments, while request variables are \nsubmitted as keyword arguments.\n\nFurther explanation of the search, fetch, match, and request actions can be\nfound below.\n\nSearch\n------\n\nYour `Engine` object implements searches through the `search` method, which\nreturns a `SearchRequest` object:\n\n```\n>>> from opyncorporates import create_engine\n>>> engine = create_engine(api_version='0.4')\n>>> search = engine.search('companies', 'search', q='Google')\n>>> search.url\n'https://api.opencorporates.com/v0.4/companies/search?q=google'\n>>> search.responses # a history of responses for the object\n[<Response [200]>]\n>>> search.response # the most recent response for this request\n<Response [200]>\n>>> search.total_pages\n26\n>>> search.per_page\n30\n>>> search.total_count\n764\n```\n\nYou can then use the properties of this `SearchRequest` object to return as \nmuch or as little information from the OpenCorporates database as you need. \nFor example, if you want to retrieve only the first page of search results \nfrom the [OpenCorporates API](https://api.opencorporates.com):\n\n```\n>>> first_page = search.get_page(1)\n>>> print(type(first_page))\n<class 'list'>\n>>> print(len(first_page))\n30\n>>> print(type(first_page[0]))\n<class 'dict'>\n```\n\nFetch\n-----\n\nThe `fetch` method implements the second available action. This method allows\n a user to retrieve a specific item from the OpenCorporates API by providing \n the item's type and unique identifier. For example, a user can retrieve a \n specific company from the [OpenCorporates API](https://api.opencorporates.com)\n by providing its item type (*i.e.*, 'company' or 'companies') and its unique\n identifier, which is the company's two-character country code plus its \n company number unique to that jurisdiction:\n\n```\n>>> from opyncorporates import create_engine\n>>> engine = create_engine(api_version='0.4')\n>>> fetch = engine.fetch('companies', 'gb', '00102498')\n>>> fetch.responses # a history of responses for the object\n[<Response [200]>]\n>>> fetch.response # the most recent response for this request\n<Response [200]>\n>>> fetch.results['name']\n'BP P.L.C.'\n>>> fetch.results['incorporation_date']\n'1909-04-14'\n```\n\nIf the fetch action is successful, the item is stored as a dict in the\n`FetchRequest` object's `results` attribute.\n\nMatch\n-----\n\nThe `match` method implements the third available action. It allows a user to\n match a specified string value to a single item in the [OpenCorporates](https://opencorporates.com) \n database. As of version 0.4, the [OpenCorporates API](https://api.opencorporates.com) exposes this action to \n match jurisdictions only:\n\n```\n>>> from opyncorporates import create_engine\n>>> engine = create_engine()\n>>> match = engine.match('jurisdictions', q='U.K.')\n```\n\nRequest\n-------\n\nThe `request` method implements a generic request action. It allows a user to\n submit a request by supplying either (1) a string for the request args \n and/or vars or (2) the request arguments and variables as positional and \n keyword parameters. The engine will build a clean url for your request.\n\n For example, the same request for a search of company records can be written\n  in any of the following ways:\n\n```\n>>> from opyncorporates import create_engine\n>>> engine = create_engine()\n>>> r1 = engine.request('companies/gb/00102498/search?q=google')\n>>> r2 = engine.request('/companies/gb/00102498/search',\n...                    q='Google')\n>>> r3 = engine.request('companies', 'gb', '00102498', 'search'\n...                    q='google')\n>>> r1.url == r2.url == r3.url # confirm all urls are the same\nTrue\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://opyncorporates.readthedocs.io/en/latest/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "opyncorporates", "package_url": "https://pypi.org/project/opyncorporates/", "platform": "", "project_url": "https://pypi.org/project/opyncorporates/", "project_urls": {"Homepage": "https://opyncorporates.readthedocs.io/en/latest/"}, "release_url": "https://pypi.org/project/opyncorporates/0.1.0/", "requires_dist": ["requests"], "requires_python": "", "summary": "a Python package for calling the OpenCorporates API", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"opyncorporates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3463e3145d646cf0aa8653c25fc75724474bf552/68747470733a2f2f692e696d6775722e636f6d2f75786b643273682e706e67\" width=\"512\">\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4a83c6be21afff16cd85ce766ef7580b15136d3/68747470733a2f2f7472617669732d63692e636f6d2f706a7279616e3132362f6f70796e636f72706f72617465732e7376673f6272616e63683d6d6173746572\">\n<a href=\"https://lgtm.com/projects/g/pjryan126/opyncorporates/alerts/\" rel=\"nofollow\"><img alt=\"Total alerts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02ec80ed15905ddca4bfb0cef955efd2cc5dcd0c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f706a7279616e3132362f6f70796e636f72706f72617465732e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<a href=\"https://lgtm.com/projects/g/pjryan126/opyncorporates/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0199c00aad232f676b664231806789a56ba796c4/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f706a7279616e3132362f6f70796e636f72706f72617465732e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a></p>\n<h1>Overview</h1>\n<p><code>opyncorporates</code> is a Python wrapper for the <a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>.\nIt allows a user to create an <code>Engine</code> object that interacts with the API\nthrough two simple methods: <code>search</code> and <code>fetch</code>.</p>\n<p>The <code>search</code> and <code>fetch</code> methods use signatures that mimic the request\narguments and variables required in the GET requests through the<br>\n<a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>,\nwhile eliminating some of the cruft.</p>\n<p>For example, a request to search for a company by name through the\n<a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>\nmight look something like this:</p>\n<p><code>GET https://api.opencorporates.com/v0.4/companies/search?q=bar&amp;per_page=100</code></p>\n<p>Submitting the same request through the search method of of an opyncorporates\nEngine object, on the other hand, would look like this:</p>\n<pre><code>&gt;&gt;&gt; from opyncorporates import create_engine\n&gt;&gt;&gt; engine = create_engine(api_version='0.4')\n&gt;&gt;&gt; search = engine.search('companies', q='bar', per_page=100)\n</code></pre>\n<p>Both the <code>search</code> and <code>fetch</code> methods return <code>opyncorporates.Request</code> objects,\nwhich allow the user (1) to explore information related to a request and (2) to\nobtain results more easily than it would be to craft a series of successive API\ncalls.</p>\n<h1>Getting Started</h1>\n<p>This section will show you how to get up and running with the\n<code>opyncorporates</code> package. Additional information can be found in the\ndocumentation <a href=\"https://opyncorporates.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n<p>To get started, you can install the package using <code>pip</code>:</p>\n<pre><code>$ pip install opyncorporates\n</code></pre>\n<p>Once the package is installed, you can use it to create an\n<code>Engine</code> object for submitting requests and retrieving data through the\nOpenCorporates API. When creating an <code>Engine</code> object, you have the option of\nspecifying an API version and an API token:</p>\n<pre><code>&gt;&gt;&gt; from opyncorporates import create_engine\n&gt;&gt;&gt; engine = create_engine(api_version='0.4',\n...                        api_token='&lt;api-token&gt;')\n&gt;&gt;&gt; engine.api_version\n'0.4'\n</code></pre>\n<p>The API version and API token will be used when building the urls required to\nsubmit requests to the <a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>.\nAs of now, the package's default API version is 0.4, and it is the only\nversion supported. If you are planning to query the API on a regular basis, I\nhighly recommend purchasing an API token to increase your call limits.</p>\n<p>Once you have created an <code>Engine</code> object, you\ncan start making calls to the <a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>.\nIn general, each of your API calls will perform only one of two actions. It\nwill either:</p>\n<ol>\n<li><strong>search</strong> for potential matches to a specified string value, or</li>\n<li><strong>fetch</strong> a specific object by its unique identifier</li>\n</ol>\n<p>There is a third action available when seeking information about a particular\nobject using an imprecise identifier. This third action allows you to <strong>match</strong>\nto an object by providing a string value for that object's name.</p>\n<p>Finally, if none of these actions suit your purposes, you can make a generic\n<strong>request</strong> to the API and parse the response yourself.</p>\n<p>The call signatures for the methods associated with each action mimic HTTPS\ncalls to the API. Http request args are\nsubmitted to the method as positional arguments, while request variables are\nsubmitted as keyword arguments.</p>\n<p>Further explanation of the search, fetch, match, and request actions can be\nfound below.</p>\n<h2>Search</h2>\n<p>Your <code>Engine</code> object implements searches through the <code>search</code> method, which\nreturns a <code>SearchRequest</code> object:</p>\n<pre><code>&gt;&gt;&gt; from opyncorporates import create_engine\n&gt;&gt;&gt; engine = create_engine(api_version='0.4')\n&gt;&gt;&gt; search = engine.search('companies', 'search', q='Google')\n&gt;&gt;&gt; search.url\n'https://api.opencorporates.com/v0.4/companies/search?q=google'\n&gt;&gt;&gt; search.responses # a history of responses for the object\n[&lt;Response [200]&gt;]\n&gt;&gt;&gt; search.response # the most recent response for this request\n&lt;Response [200]&gt;\n&gt;&gt;&gt; search.total_pages\n26\n&gt;&gt;&gt; search.per_page\n30\n&gt;&gt;&gt; search.total_count\n764\n</code></pre>\n<p>You can then use the properties of this <code>SearchRequest</code> object to return as\nmuch or as little information from the OpenCorporates database as you need.\nFor example, if you want to retrieve only the first page of search results\nfrom the <a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>:</p>\n<pre><code>&gt;&gt;&gt; first_page = search.get_page(1)\n&gt;&gt;&gt; print(type(first_page))\n&lt;class 'list'&gt;\n&gt;&gt;&gt; print(len(first_page))\n30\n&gt;&gt;&gt; print(type(first_page[0]))\n&lt;class 'dict'&gt;\n</code></pre>\n<h2>Fetch</h2>\n<p>The <code>fetch</code> method implements the second available action. This method allows\na user to retrieve a specific item from the OpenCorporates API by providing\nthe item's type and unique identifier. For example, a user can retrieve a\nspecific company from the <a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a>\nby providing its item type (<em>i.e.</em>, 'company' or 'companies') and its unique\nidentifier, which is the company's two-character country code plus its\ncompany number unique to that jurisdiction:</p>\n<pre><code>&gt;&gt;&gt; from opyncorporates import create_engine\n&gt;&gt;&gt; engine = create_engine(api_version='0.4')\n&gt;&gt;&gt; fetch = engine.fetch('companies', 'gb', '00102498')\n&gt;&gt;&gt; fetch.responses # a history of responses for the object\n[&lt;Response [200]&gt;]\n&gt;&gt;&gt; fetch.response # the most recent response for this request\n&lt;Response [200]&gt;\n&gt;&gt;&gt; fetch.results['name']\n'BP P.L.C.'\n&gt;&gt;&gt; fetch.results['incorporation_date']\n'1909-04-14'\n</code></pre>\n<p>If the fetch action is successful, the item is stored as a dict in the\n<code>FetchRequest</code> object's <code>results</code> attribute.</p>\n<h2>Match</h2>\n<p>The <code>match</code> method implements the third available action. It allows a user to\nmatch a specified string value to a single item in the <a href=\"https://opencorporates.com\" rel=\"nofollow\">OpenCorporates</a>\ndatabase. As of version 0.4, the <a href=\"https://api.opencorporates.com\" rel=\"nofollow\">OpenCorporates API</a> exposes this action to\nmatch jurisdictions only:</p>\n<pre><code>&gt;&gt;&gt; from opyncorporates import create_engine\n&gt;&gt;&gt; engine = create_engine()\n&gt;&gt;&gt; match = engine.match('jurisdictions', q='U.K.')\n</code></pre>\n<h2>Request</h2>\n<p>The <code>request</code> method implements a generic request action. It allows a user to\nsubmit a request by supplying either (1) a string for the request args\nand/or vars or (2) the request arguments and variables as positional and\nkeyword parameters. The engine will build a clean url for your request.</p>\n<p>For example, the same request for a search of company records can be written\nin any of the following ways:</p>\n<pre><code>&gt;&gt;&gt; from opyncorporates import create_engine\n&gt;&gt;&gt; engine = create_engine()\n&gt;&gt;&gt; r1 = engine.request('companies/gb/00102498/search?q=google')\n&gt;&gt;&gt; r2 = engine.request('/companies/gb/00102498/search',\n...                    q='Google')\n&gt;&gt;&gt; r3 = engine.request('companies', 'gb', '00102498', 'search'\n...                    q='google')\n&gt;&gt;&gt; r1.url == r2.url == r3.url # confirm all urls are the same\nTrue\n</code></pre>\n\n          </div>"}, "last_serial": 4812713, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "67f02a4b14ec423c4274c03e85beef21", "sha256": "daaf8005fc949f80535bd26f1cac73bac3e6195d06d33e0fe9a8e1a3ddc55368"}, "downloads": -1, "filename": "opyncorporates-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "67f02a4b14ec423c4274c03e85beef21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9591, "upload_time": "2019-02-12T19:44:01", "upload_time_iso_8601": "2019-02-12T19:44:01.974947Z", "url": "https://files.pythonhosted.org/packages/a4/cf/d95f491430701c632c16dc0926a76882545f74d47af315766264fffd243a/opyncorporates-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ca304d598092c00ff5c31d32b0e5bf1", "sha256": "4ff048193c54098558e5131965a252a8af471e34fe5b8eb4ecd0f284aef03ffa"}, "downloads": -1, "filename": "OpynCorporates-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2ca304d598092c00ff5c31d32b0e5bf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9595, "upload_time": "2019-02-12T19:44:03", "upload_time_iso_8601": "2019-02-12T19:44:03.761070Z", "url": "https://files.pythonhosted.org/packages/75/ac/66eb56b382a9b92b15f00be64d4cbc7d61ed5c0667156e468c5914f5d801/OpynCorporates-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf17e38b2ee7630fadf97a5768a42f88", "sha256": "b0e8a7cfb35bd53509d2e30608a7a77373aa2c23ab98e273dbe924853a15eda8"}, "downloads": -1, "filename": "opyncorporates-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cf17e38b2ee7630fadf97a5768a42f88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8922, "upload_time": "2019-02-12T19:44:09", "upload_time_iso_8601": "2019-02-12T19:44:09.994484Z", "url": "https://files.pythonhosted.org/packages/7c/41/d9dab2bc0ae88959f0d7af8d9b9e22671eecc22b32d7ed6d5fe0cc919567/opyncorporates-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "baae54f7b649cd04de6f874d8ff31b01", "sha256": "7cc7c2c4983fb69fec1dd08640e427cf939295566fb356f501a15914cc5d5f8c"}, "downloads": -1, "filename": "opyncorporates-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "baae54f7b649cd04de6f874d8ff31b01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9565, "upload_time": "2019-02-12T19:44:05", "upload_time_iso_8601": "2019-02-12T19:44:05.001004Z", "url": "https://files.pythonhosted.org/packages/44/f0/95cc729d82041cc3e31be193a332d58889ba7b9501b7edcc6d112ee04a7f/opyncorporates-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6c1acf4a2a3300a5fb76cc466586dcfc", "sha256": "37b7dd773334f47db804138a103467b0ba536888869bf7ba999ccf2fa3f30fc7"}, "downloads": -1, "filename": "opyncorporates-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6c1acf4a2a3300a5fb76cc466586dcfc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9566, "upload_time": "2019-02-12T19:44:06", "upload_time_iso_8601": "2019-02-12T19:44:06.286631Z", "url": "https://files.pythonhosted.org/packages/60/e1/fac661f94d0e48a000f671c4db5c7d3fcfd5d11b8fe9f218e062fea44655/opyncorporates-0.0.3-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "7f508ac91b4d8f58c68e144b038db655", "sha256": "25f13b70d463743c363a5d1eb7305ddf16e42eacf1cfd93dafafee5a9455aeb6"}, "downloads": -1, "filename": "opyncorporates-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7f508ac91b4d8f58c68e144b038db655", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9559, "upload_time": "2019-02-12T19:44:07", "upload_time_iso_8601": "2019-02-12T19:44:07.562197Z", "url": "https://files.pythonhosted.org/packages/28/2d/e9086aebadea4a6d6f99d47cab2a76b47485620dfa4d1fb138dcb8daef5c/opyncorporates-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c919f5d4cacc5864fa3b9979f88f25f", "sha256": "481a3250fdc55df922a69b9ba36fa4d63c98463b1a3b7e48b79c69582956cce7"}, "downloads": -1, "filename": "opyncorporates-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c919f5d4cacc5864fa3b9979f88f25f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9571, "upload_time": "2019-02-12T19:44:08", "upload_time_iso_8601": "2019-02-12T19:44:08.810897Z", "url": "https://files.pythonhosted.org/packages/92/12/a386c75162c37f9600dac283249cf48436a1c4c3d84c089a5fabb98ce0a1/opyncorporates-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff023e622cfd3cbb54db41ce1d5b1740", "sha256": "12a2cdf0201d9c2689549912f396cebf93c4cd229dd127fa05bc9b25f26885b2"}, "downloads": -1, "filename": "opyncorporates-0.1.tar.gz", "has_sig": false, "md5_digest": "ff023e622cfd3cbb54db41ce1d5b1740", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8837, "upload_time": "2019-02-12T20:44:25", "upload_time_iso_8601": "2019-02-12T20:44:25.971372Z", "url": "https://files.pythonhosted.org/packages/cf/ce/9a141a499641ba27ddff195a1926555d4fc060a0bf5c9a57c2c3f30b26a5/opyncorporates-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f508ac91b4d8f58c68e144b038db655", "sha256": "25f13b70d463743c363a5d1eb7305ddf16e42eacf1cfd93dafafee5a9455aeb6"}, "downloads": -1, "filename": "opyncorporates-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7f508ac91b4d8f58c68e144b038db655", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9559, "upload_time": "2019-02-12T19:44:07", "upload_time_iso_8601": "2019-02-12T19:44:07.562197Z", "url": "https://files.pythonhosted.org/packages/28/2d/e9086aebadea4a6d6f99d47cab2a76b47485620dfa4d1fb138dcb8daef5c/opyncorporates-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c919f5d4cacc5864fa3b9979f88f25f", "sha256": "481a3250fdc55df922a69b9ba36fa4d63c98463b1a3b7e48b79c69582956cce7"}, "downloads": -1, "filename": "opyncorporates-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c919f5d4cacc5864fa3b9979f88f25f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9571, "upload_time": "2019-02-12T19:44:08", "upload_time_iso_8601": "2019-02-12T19:44:08.810897Z", "url": "https://files.pythonhosted.org/packages/92/12/a386c75162c37f9600dac283249cf48436a1c4c3d84c089a5fabb98ce0a1/opyncorporates-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff023e622cfd3cbb54db41ce1d5b1740", "sha256": "12a2cdf0201d9c2689549912f396cebf93c4cd229dd127fa05bc9b25f26885b2"}, "downloads": -1, "filename": "opyncorporates-0.1.tar.gz", "has_sig": false, "md5_digest": "ff023e622cfd3cbb54db41ce1d5b1740", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8837, "upload_time": "2019-02-12T20:44:25", "upload_time_iso_8601": "2019-02-12T20:44:25.971372Z", "url": "https://files.pythonhosted.org/packages/cf/ce/9a141a499641ba27ddff195a1926555d4fc060a0bf5c9a57c2c3f30b26a5/opyncorporates-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:54 2020"}