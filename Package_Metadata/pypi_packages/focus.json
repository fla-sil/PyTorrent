{"info": {"author": "Erik Johnson", "author_email": "xtrementl@brokenresolve.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development", "Topic :: Utilities"], "description": "Introduction\n============\n\nFocus is a command-line productivity tool for improved task workflows.\n\nWhy Focus?\n----------\n\nFor developers, Focus aims to help fight distractions while you work;\nless distractions means more focus. Currently, Focus targets Unix-like\noperating systems, such as Linux or Mac OSX.\n\nFeatures\n========\n\nOpen Applications\n-----------------\nLaunch applications needed for your task.\n\nClose Applications\n------------------\nQuit unnecessary applications when starting your task.\n\nBlock Applications\n------------------\nContinuously quit unnecessary applications if they are launched during a task.\n\nBlock Websites\n--------------\nBlock distracting websites, such as Hacker News, Facebook, YouTube, and\nTwitter.\n\nRun Commands\n------------\nExecute arbitrary shell commands useful for your task.\n\nPlay Sounds\n-----------\nPlay a sound after your task timer runs out or whenever you end the task.\nYou can also play a sound when starting tasks, in case you want to get\nyour groove on.\n\nNotifications\n-------------\nShow a popup system notification message when a task is started or\nhas ended, either by you completing the task or the timer running out.\n\nUpdate IM Status\n----------------\nUpdate the account status for your favorite instant messenger (IM) applications\nwhile you work. Focus supports `Pidgin <http://www.pidgin.im/>`_,\n`Empathy <https://live.gnome.org/Empathy>`_, and\n`Skype <http://www.skype.com>`_ on Linux and `Adium <http://adium.im/>`_ and\n`Skype <http://www.skype.com>`_ on Mac OSX.\n\nTrack Your Time\n---------------\nKeep tabs on how long you work on tasks per day. Focus will record your time\nautomatically and present your time as a simple report.\n\n**If these features won't do it for you, Focus boasts a simple, yet powerful\nplugin system. More on this later.**\n\nInstallation\n============\n\n    $ sudo pip install focus\n\nor from source:\n\n    $ sudo python setup.py install\n\nPython Libraries\n----------------\n\nThe following Python libraries are required to run Focus; though ``pip``\nshould handle taking care of installing them if not available.\n\n* psutil >= 0.4.1\n* argparse (Python <2.7)\n* dbus (Linux only)\n\nOptional External Dependencies\n------------------------------\n\n* Linux:\n    `mpg123 <http://www.mpg123.de/>`_, `play <http://sox.sourceforge.net/>`_,\n    or `aplay <http://www.alsaplayer.org/>`_ [WAV only] (to play sounds)\n\n* Mac OSX:\n    `terminal-notifier <https://github.com/alloy/terminal-notifier>`_\n    or `growlnotify <http://growl.info/extras.php/#growlnotify>`_\n    (to show notifications)\n\nUsage\n=====\n\nCreate Task\n-----------\n\n    $ focus make task_name [--skip-edit]\n\nor, clone from existing task:\n\n    $ focus make task_name other_task [--skip-edit]\n\nThis command opens the task configuration file using the shell's default editor\n($EDITOR), unless the ``--skip-edit`` flag is provided. After the editor exits,\nthe configuration file is validated and will prompt for retry if validation\nfails.\n\nStart Task\n----------\n\n    $ focus on task_name\n\nThis starts the provided task, running any initial settings as indicated in the\ntask's configuration file.\n\nEnd Task\n--------\n\n    $ focus end\n\nThis ends the current task, running any ending settings as indicated in the\ntask's configuration file.\n\n*Note: this command is only available when a task is active.*\n\nEdit Task\n---------\n\n    $ focus edit task_name [--skip-edit]\n\nLike the ``make`` command, this command opens the task configuration file using\nthe shell's default editor ($EDITOR). After the editor exits, the\nconfiguration file is validated and will prompt for retry if validation fails.\n\nList Tasks\n----------\n\n    $ focus list [-v] [--verbose]\n\nThis will scan for existing tasks with valid configuration files and print\nthe names of the tasks found. Specify the ``-v`` or ``--verbose`` flag to also\nprint setting information for each task's configuration file. Invalid tasks\nare marked in red, while the active task is marked in green.\n\nView Task\n---------\n\n    $ focus view [task_name]\n\nThis prints the setting information from the task's configuration file.\nIf no task name is provided, the active task will be shown.\n\nRename Task\n-----------\n\n    $ focus rename old_task_name new_task_name\n\nThis commands gives the provided task a new name.\n\nDelete Task\n-----------\n\n    $ focus destroy task_name [-f] [--force]\n\nThis commands removes the provided task after prompting for confirmation.\nSpecify the ``-f`` or ``--force`` flag to skip confirmation.\n\nShow Remaining Time for Active Task\n-----------------------------------\n\n    $ focus left [-s] [--short]\n\nThis commands prints the amount of time remaining, in minutes, for the active\ntask. Specify the ``-s`` or ``--short`` flag to print just the number of\nminutes.\n\n*Note: this command is only available if the active task has defined the\nduration option.*\n\nShow Available Usage Statistics\n-------------------------------\n\n    $ focus stat [start]\n\nThis commands prints the daily task usage summaries, broken out per task, for\nevery day from the starting period through the current day.\n\nThe starting period supports the following values ::\n\n    today, t\n    yesterday, y\n    {n}d, {n}day, {n} day, {n}days, {n} days, {n} day ago, {n} days ago\n    w, wk, week, last week\n    {n}w, {n}wk, {n}week, {n}weeks, {n} week ago, {n} weeks ago\n\nwhere {n} is replaced with a number (e.g. ``1d`` for 1 day ago to today).\nIf no starting period is provided, then ``today`` will be used.\n\nTask Configuration\n==================\n\nEach task is described by its associated configuration file. When a new task\nis created, the `default task configuration file\n<https://github.com/xtrementl/focus/blob/master/conf/focus_task.cfg>`_ will be\nused.\n\nThe task configuration file is composed of a number of either non-block or\nblock options. Each value for an option may be quoted with either single or\ndouble quote, or may be unquoted if spaces and quotes are escaped.\n\n**Examples:** ::\n\n    # option => value 1, value2, value 3, value 4, value\\ 5\n    option \"value 1\", value2, 'value 3', value\\ 4, value\\\\ 5;\n\n    # option => a 'b', a 'b', a \\ b, a \\ b, a \\ b, a \\\\ b, 'abc' - \"d\"\n    option 'a \\'b\\'', a\\ \\'b\\', \"a \\\\ b\", \"a \\ b\",\n            a\\ \\\\ b, a\\ \\\\\\ b, \"'abc' - \\\"d\\\"\";\n\nApplications\n------------\n\nThe ``apps`` block allows for options to run, close, or block applications.\nEach option supports multiple values and can be repeated as multiple option\ndefinitions.\n\nThe ``run`` option supports an arbitrary shell command, an application name, or\nthe path to an executable script. Arguments and shell redirection are also\npossible. This option will be initiated when starting a task.\n\nThe ``close`` option supports an arbitrary shell command, an application name,\nor the path to an executable script. Unlike ``run``, shell redirection is not\nsupported and all arguments provided are considered as part of the\ncommand/application name provided (e.g. \"Google Chrome\" not \"Google\" with\n\"Chrome\" argument). This option will be initiated when starting on a task.\n\nThe ``block`` option behaves exactly like ``close``, except that it runs\ncontinously while the task is active (approximately once a second).\n\nThe ``run`` and ``close`` options also support the \"end_\" prefix which will\ninstead be activated when a task is manually ended.\n\nFor example: ::\n\n    apps {\n        run /path/to/file;       # run app at task start\n        close /path/to/file;     # close app at task start\n        end_run /path/to/file;   # run app at task end (manual)\n        end_close /path/to/file; # close app at task end (manual)\n\n        # See Task Timer below..\n        timer_run /path/to/file;   # run app at task end (timer elapsed)\n        timer_close /path/to/file; # close app at task end (timer elapsed)\n    }\n\nTask Timer\n----------\n\nThe ``duration`` option will automatically end the task after the specified\nnumber of minutes. This option supports only a single value > 0 and the\noption cannot be defined more than once.\n\nThis also enables the ``left`` command when running the ``focus`` program to\nview remaining task time.\n\nAdditionally, any options that support the \"end_\" prefix will also support\nthe \"timer_\" prefix. They function similar to \"end_\" prefixed options, except\nthey are only activated after the task timer has elapsed.\n\nFor example: ::\n\n    apps {\n        timer_run /path/to/file;   # run app at task end (timer elapsed)\n        timer_close /path/to/file; # close app at task end (timer elapsed)\n    }\n\nBlocking Websites\n-----------------\n\nThe ``block`` option under the ``sites`` block allows for blocking website\ndomains while the task is active. Each option supports one or more domain\nvalues. The option may be redefined multiple times.\n\nFor example: ::\n\n    sites {\n        block google.com, twitter.com;\n        block youtube.com, \"othersite.com\";\n    }\n\nUnder the hood, Focus updates the system HOSTS file (/etc/hosts) with mappings\nof the provided domains to the local machine. Because of this, you will have to\nprovide an entry for each relevant subdomain as well if necessary. As a result,\nthis strategy won't scale when blocking a site with numerous subdomains.\nPerhaps, another solution like a local DNS server would be more appropriate\n(e.g. `dnsmasq <http://www.thekelleys.org.uk/dnsmasq/doc.html>`_).\n\nAs a convenience, any domains configured will also map the following\nsubdomains: ``m``, ``www``, ``mobile``.\n\nFor example::\n\n    google.com => google.com, www.google.com, m.google.com, mobile.google.com\n\nPlaying Sounds\n--------------\n\nThe ``play`` options for the ``sounds`` block support the path to a sound file\nthat is playable on your system via available external binaries (``mpg123``,\n``play``, and ``aplay`` [WAV only]). Only a single value is supported for each\noption, and each type of option cannot be defined more than once. Make sure\nyour preferred binary is installed and works correctly by manually running your\nsound file through the program.\n\nFor example: ::\n\n    sounds {\n        play /path/to/file;        # play sound file at task start\n        end_play /path/to/file;    # play sound file at task end (manual)\n        timer_play /path/to/file;  # play sound file at task end (timer elapsed)\n    }\n\nNotifications\n-------------\n\nThe ``show`` options for the ``notify`` block support a single message that\nwill be shown as a system notification. Only a single value is supported for\neach option, and each type of option cannot be defined more than once.\n\nOn Linux/Unix, the feature functions via the DBUS IPC bus. On Mac OSX, external\nbinaries (``terminal-notifier`` and ``growlnotify``) will be used when\navailable; otherwise, a fallback alert dialog will be shown. If using Mac OSX,\nmake sure your preferred binary is installed and works correctly, unless the\nfallback method is desired.\n\nFor example: ::\n\n    notify {\n        show \"message here\";        # notify at task start\n        end_show \"message here\";    # notify at task end (manual)\n        timer_show \"message here\";  # notify at task end (timer elapsed)\n    }\n\nUpdating IM Status\n------------------\n\nThe ``im`` block allows for options to update the status information for\na number of running instant messenger applications.\n\nThe ``status_msg`` option supports defining a name that can be referenced when\nspecifying the ``status``, ``end_status`` and ``timer_status`` options. The\noption takes two arguments: the first being the identifier name, and the second,\nthe value for the status message. The option can be defined more than once to\ndefine multiple status messages to use.\n\nFor example: ::\n\n    im {\n        status_msg message_name, value;\n        status_msg brb, brb;\n        status_msg brb2, be\\ right\\ back;\n        status_msg omg, \"oh em gee\";\n        status_msg working, \"definitely busy here..\";\n    }\n\nThe ``status`` option is activated at the start of a task, and it accepts\neither the new status, or both the new status and new status message as\narguments.\n\nFor the status argument, the following values are available: ::\n\n    'online'    - Online/Available\n    'away'      - Away\n    'long_away' - Extended Away\n    'busy'      - Busy\n    'hidden'    - Hidden/Invisible\n\nFor the optional message argument, a string value may be provided. To reference\nan existing ``status_msg`` option definition, simply provide the ``status_msg``\nname prefixed with \":\" (e.g. :working, :brb, :omg). The ``status`` option also\nsupports the \"end_\" and \"timer_\" prefixes which will instead be activated when\na task is manually ended or after the timer elapses, respectively.\n\nFor example: ::\n\n    im {\n        status_msg working, \"definitely busy here...\";\n        status busy, :working;       # change status at task start\n\n        #status away;\n        #status busy, really\\ busy;\n        #status busy, \"don't bother\";\n        end_status online;          # change status at task end (manual)\n        timer_status online;        # change status at task end (timer elapsed)\n\n        status_msg play, \"reading some twitters\";\n        #status away, :play;\n    }\n\nPlugin System\n=============\n\nFocus provides a simple and flexible plugin system to extend the core\nfunctionality. In fact, plugins are used internally for everything.\n\nInstalling Plugins\n------------------\n\nAfter running the ``focus`` command, the ``.focus`` directory is created in\nyour home directory ($HOME or ~). Under that lives a ``plugins`` subdirectory,\nwhere you can drop your .py python plugin files. If they are valid, the plugins\nwill automatically become available when running ``focus``. For command\nplugins, running ``focus`` will print a help banner with the installed\ncommands, which will include your plugins.\n\n*Remember, if the plugin is available only for active tasks, the appropriate\ntask must be active to see your plugin show up.*\n\nCommand Plugins\n---------------\n\nCommand plugins define the commands that are available for the Focus binary\n(e.g. ``on``, ``make``, etc.). These can be available always, only for tasks\nthat define certain options, or only for active tasks.\n\nThe ``command`` class attribute identifies the plugin as a command plugin and\nspecifies the actual command name to register with the plugin.\n\n*Note: The command name should be unique.*\n\nThe plugin should define the ``execute()`` method for running the command. The\n``env`` argument represents the environment and the ``args`` argument is the\nresult of parsing the command-line arguments using the ``ArgumentParser``\nobject.\n\n**Method Definition:** ::\n\n    def execute(self, env, args):\n        env.io.write('Verbose: {0}'.format(args.verbose))\n\nTo simply print an error message, use the ``env.io.error()`` method. If you\nneed to also return a specific error code along with printing an error message\nraise a ``FocusError`` exception from the ``focus.errors`` module: ::\n\n    from focus.errors import FocusError\n\n    def execute(self, env, args):\n        # env.io.error('Oh noes!')  # just prints and returns exit code 0\n        raise FocusError('message here', code=123)\n\nIf the plugin needs to define any command-line arguments, it should define the\n``setup_parser()`` method. The ``parser`` argument is an instance of\n``argparse.ArgumentParser`` and should be updated as necessary to add\narguments.\n\n**Method Definition:** ::\n\n    def setup_parser(self, parser):\n        parser.add_argument('-v', '--verbose', action='store_true')\n\n**Plugin Example:** ::\n\n    from focus.plugin import Plugin\n\n    class Foo(Plugin):\n       \"\"\" Description of plugin, used when generating help message.\n           \"\"\"\n       name = \"FooPlugin\"         # Name of plugin, must be unique\n       version = \"1.0\"            # Plugin version\n       target_version = \">=0.1\"   # Target Focus version, (<, <=, ==, >=, >)\n       command = \"bar\"            # Command name\n\n       def setup_parser(self, parser):\n           parser.add_argument('-v', '--verbose', action='store_true')\n\n       def execute(self, env, args):\n           env.io.write('Verbose: {0}'.format(args.verbose))\n           #env.io.error('Oh noes!')\n           #env.io.success('Woot')\n\n           # resp = env.io.prompt('Are you distracted? (y/n)')\n           # stdin_data = env.io.read()\n\nTask Event Plugins\n------------------\n\nTask event plugins are only available for active tasks. They can be registered\nto run at the start of the task, during the task loop (every second), at the\nend of a task, or some combination therein. These plugins will be run within a\ndaemon process when the task starts.\n\nThe ``events`` class attribute identifies the plugin as a task event plugin and\nspecifies the events of the task that should be registered: ``task_start``,\n``task_run``, ``task_end``.\n\nThe plugin should define the ``on_taskstart()``, ``on_taskrun()``, or\n``on_taskend()`` methods corresponding to the values provided for the\n``events`` attribute. The ``task`` argument represents the active task, which\nincludes ``name``, ``duration`` (minutes), and a few methods such as\n``start()`` and ``stop()``.\n\n**Method Definition:** ::\n\n    def on_taskstart(self, task):\n        pass\n\n**Plugin Example:** ::\n\n    from focus.plugin import Plugin\n\n    class Foo(Plugin):\n       \"\"\" Description of plugin.\n           \"\"\"\n       name = \"FooPlugin\"         # Name of plugin, must be unique\n       version = \"1.0\"            # Plugin version\n       target_version = \">=0.1\"   # Target Focus version, (<, <=, ==, >=, >)\n       events = ['task_start', 'task_run', 'task_end']\n\n       def on_taskstart(self, task):\n           pass\n\n       def on_taskrun(self, task):\n           pass\n\n       def on_taskend(self, task):\n           pass\n\nPlugin Options\n--------------\n\nTwo attributes exist to allow plugins to only be loaded for active tasks:\n\n1. **options**\n\n   Set the ``options`` class attribute. This defines the options that, if\n   provided in a task configuration file, will trigger the load of this plugin.\n   Options are either non-block (e.g. ``duration``) or block\n   (e.g. ``apps`` => { ``run``, ``close``, ``block`` }, ``sites`` =>\n   { ``block`` }, etc.). When this attribute is set, the plugin should define\n   the ``parse_option()`` method in order to parse the values set in a task\n   configuration file. See example below.\n\n   *Note: these options should be unique.*\n\n   **Plugin Snippet:** ::\n\n       from focus.plugin import Plugin\n\n       class Foo(Plugin):\n           ...\n           options = [\n               # duration (non-block option)\n               {\n                   'name': 'duration',\n                   'allow_duplicates': False  # disallow duplicate definitions\n               },\n\n               # apps.run, apps.close (block options)\n               {\n                   'block': 'apps',\n                   'options': [\n                       {\n                           'name': 'run',\n                           'allow_duplicates': True  # the default\n                       },\n                       { 'name': 'close' }\n                   ]\n               }\n           ]\n\n   **Task Configuration Example:** ::\n\n       task {\n           duration 30;\n\n           apps {\n               run firefox, chromium, /path/to/file, /path/to/other\\ file;\n               run \"/path/to/file arg1 arg2\", helloworld\\ -a\\ b;\n               close adium;\n           }\n       }\n\n   **Method Definition:** ::\n\n       def parse_option(self, option, block_name, *values):\n           # raise ValueError exception with a message to reject the provided\n           # value. this will propagate up to the cli when loading a task\n\n   Here, the ``option`` and ``block_name`` names for the currently parsed\n   option are provided. ``block_name`` will be ``None`` when parsing non-block\n   options. ``values`` holds one or more values associated with the provided\n   option.\n\n2. **task_only**\n\n   Set the ``task_only`` class attribute, so the plugin will be available for\n   any task once started.\n\n   **Plugin Snippet:** ::\n\n       class Foo(Plugin):\n           ...\n           task_only = True\n           ...\n\nRoot Access\n-----------\n\nIf a plugin needs root access, it should define the ``needs_root`` attribute.\nWhen set, this installs a ``run_root()`` method on the plugin class, which\naccepts an arbitrary command string and returns a boolean for success or\nfailure. Internally, Focus uses the ``sudo`` command to temporarily escalate\nprivileges.\n\n**Plugin Snippet:** ::\n\n    from focus.plugin import Plugin\n\n    class Foo(Plugin):\n        ...\n        command = 'foo'\n        events = ['task_start']\n        needs_root = True\n        \n        def execute(self, env, args):\n            self.run_root('whoami >> /tmp/whoami_focus.log')\n\n        def on_taskstart(self, task):\n            self.run_root('whoami >> /tmp/whoami_focus2.log')", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xtrementl/focus", "keywords": "focus", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "focus", "package_url": "https://pypi.org/project/focus/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/focus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/xtrementl/focus"}, "release_url": "https://pypi.org/project/focus/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Command-line productivity tool for improved task workflows.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>Focus is a command-line productivity tool for improved task workflows.<br><br>Why Focus?<br>----------<br><br>For developers, Focus aims to help fight distractions while you work;<br>less distractions means more focus. Currently, Focus targets Unix-like<br>operating systems, such as Linux or Mac OSX.<br><br>Features<br>========<br><br>Open Applications<br>-----------------<br>Launch applications needed for your task.<br><br>Close Applications<br>------------------<br>Quit unnecessary applications when starting your task.<br><br>Block Applications<br>------------------<br>Continuously quit unnecessary applications if they are launched during a task.<br><br>Block Websites<br>--------------<br>Block distracting websites, such as Hacker News, Facebook, YouTube, and<br>Twitter.<br><br>Run Commands<br>------------<br>Execute arbitrary shell commands useful for your task.<br><br>Play Sounds<br>-----------<br>Play a sound after your task timer runs out or whenever you end the task.<br>You can also play a sound when starting tasks, in case you want to get<br>your groove on.<br><br>Notifications<br>-------------<br>Show a popup system notification message when a task is started or<br>has ended, either by you completing the task or the timer running out.<br><br>Update IM Status<br>----------------<br>Update the account status for your favorite instant messenger (IM) applications<br>while you work. Focus supports `Pidgin &lt;http://www.pidgin.im/&gt;`_,<br>`Empathy &lt;https://live.gnome.org/Empathy&gt;`_, and<br>`Skype &lt;http://www.skype.com&gt;`_ on Linux and `Adium &lt;http://adium.im/&gt;`_ and<br>`Skype &lt;http://www.skype.com&gt;`_ on Mac OSX.<br><br>Track Your Time<br>---------------<br>Keep tabs on how long you work on tasks per day. Focus will record your time<br>automatically and present your time as a simple report.<br><br>**If these features won't do it for you, Focus boasts a simple, yet powerful<br>plugin system. More on this later.**<br><br>Installation<br>============<br><br>    $ sudo pip install focus<br><br>or from source:<br><br>    $ sudo python setup.py install<br><br>Python Libraries<br>----------------<br><br>The following Python libraries are required to run Focus; though ``pip``<br>should handle taking care of installing them if not available.<br><br>* psutil &gt;= 0.4.1<br>* argparse (Python &lt;2.7)<br>* dbus (Linux only)<br><br>Optional External Dependencies<br>------------------------------<br><br>* Linux:<br>    `mpg123 &lt;http://www.mpg123.de/&gt;`_, `play &lt;http://sox.sourceforge.net/&gt;`_,<br>    or `aplay &lt;http://www.alsaplayer.org/&gt;`_ [WAV only] (to play sounds)<br><br>* Mac OSX:<br>    `terminal-notifier &lt;https://github.com/alloy/terminal-notifier&gt;`_<br>    or `growlnotify &lt;http://growl.info/extras.php/#growlnotify&gt;`_<br>    (to show notifications)<br><br>Usage<br>=====<br><br>Create Task<br>-----------<br><br>    $ focus make task_name [--skip-edit]<br><br>or, clone from existing task:<br><br>    $ focus make task_name other_task [--skip-edit]<br><br>This command opens the task configuration file using the shell's default editor<br>($EDITOR), unless the ``--skip-edit`` flag is provided. After the editor exits,<br>the configuration file is validated and will prompt for retry if validation<br>fails.<br><br>Start Task<br>----------<br><br>    $ focus on task_name<br><br>This starts the provided task, running any initial settings as indicated in the<br>task's configuration file.<br><br>End Task<br>--------<br><br>    $ focus end<br><br>This ends the current task, running any ending settings as indicated in the<br>task's configuration file.<br><br>*Note: this command is only available when a task is active.*<br><br>Edit Task<br>---------<br><br>    $ focus edit task_name [--skip-edit]<br><br>Like the ``make`` command, this command opens the task configuration file using<br>the shell's default editor ($EDITOR). After the editor exits, the<br>configuration file is validated and will prompt for retry if validation fails.<br><br>List Tasks<br>----------<br><br>    $ focus list [-v] [--verbose]<br><br>This will scan for existing tasks with valid configuration files and print<br>the names of the tasks found. Specify the ``-v`` or ``--verbose`` flag to also<br>print setting information for each task's configuration file. Invalid tasks<br>are marked in red, while the active task is marked in green.<br><br>View Task<br>---------<br><br>    $ focus view [task_name]<br><br>This prints the setting information from the task's configuration file.<br>If no task name is provided, the active task will be shown.<br><br>Rename Task<br>-----------<br><br>    $ focus rename old_task_name new_task_name<br><br>This commands gives the provided task a new name.<br><br>Delete Task<br>-----------<br><br>    $ focus destroy task_name [-f] [--force]<br><br>This commands removes the provided task after prompting for confirmation.<br>Specify the ``-f`` or ``--force`` flag to skip confirmation.<br><br>Show Remaining Time for Active Task<br>-----------------------------------<br><br>    $ focus left [-s] [--short]<br><br>This commands prints the amount of time remaining, in minutes, for the active<br>task. Specify the ``-s`` or ``--short`` flag to print just the number of<br>minutes.<br><br>*Note: this command is only available if the active task has defined the<br>duration option.*<br><br>Show Available Usage Statistics<br>-------------------------------<br><br>    $ focus stat [start]<br><br>This commands prints the daily task usage summaries, broken out per task, for<br>every day from the starting period through the current day.<br><br>The starting period supports the following values ::<br><br>    today, t<br>    yesterday, y<br>    {n}d, {n}day, {n} day, {n}days, {n} days, {n} day ago, {n} days ago<br>    w, wk, week, last week<br>    {n}w, {n}wk, {n}week, {n}weeks, {n} week ago, {n} weeks ago<br><br>where {n} is replaced with a number (e.g. ``1d`` for 1 day ago to today).<br>If no starting period is provided, then ``today`` will be used.<br><br>Task Configuration<br>==================<br><br>Each task is described by its associated configuration file. When a new task<br>is created, the `default task configuration file<br>&lt;https://github.com/xtrementl/focus/blob/master/conf/focus_task.cfg&gt;`_ will be<br>used.<br><br>The task configuration file is composed of a number of either non-block or<br>block options. Each value for an option may be quoted with either single or<br>double quote, or may be unquoted if spaces and quotes are escaped.<br><br>**Examples:** ::<br><br>    # option =&gt; value 1, value2, value 3, value 4, value\\ 5<br>    option \"value 1\", value2, 'value 3', value\\ 4, value\\\\ 5;<br><br>    # option =&gt; a 'b', a 'b', a \\ b, a \\ b, a \\ b, a \\\\ b, 'abc' - \"d\"<br>    option 'a \\'b\\'', a\\ \\'b\\', \"a \\\\ b\", \"a \\ b\",<br>            a\\ \\\\ b, a\\ \\\\\\ b, \"'abc' - \\\"d\\\"\";<br><br>Applications<br>------------<br><br>The ``apps`` block allows for options to run, close, or block applications.<br>Each option supports multiple values and can be repeated as multiple option<br>definitions.<br><br>The ``run`` option supports an arbitrary shell command, an application name, or<br>the path to an executable script. Arguments and shell redirection are also<br>possible. This option will be initiated when starting a task.<br><br>The ``close`` option supports an arbitrary shell command, an application name,<br>or the path to an executable script. Unlike ``run``, shell redirection is not<br>supported and all arguments provided are considered as part of the<br>command/application name provided (e.g. \"Google Chrome\" not \"Google\" with<br>\"Chrome\" argument). This option will be initiated when starting on a task.<br><br>The ``block`` option behaves exactly like ``close``, except that it runs<br>continously while the task is active (approximately once a second).<br><br>The ``run`` and ``close`` options also support the \"end_\" prefix which will<br>instead be activated when a task is manually ended.<br><br>For example: ::<br><br>    apps {<br>        run /path/to/file;       # run app at task start<br>        close /path/to/file;     # close app at task start<br>        end_run /path/to/file;   # run app at task end (manual)<br>        end_close /path/to/file; # close app at task end (manual)<br><br>        # See Task Timer below..<br>        timer_run /path/to/file;   # run app at task end (timer elapsed)<br>        timer_close /path/to/file; # close app at task end (timer elapsed)<br>    }<br><br>Task Timer<br>----------<br><br>The ``duration`` option will automatically end the task after the specified<br>number of minutes. This option supports only a single value &gt; 0 and the<br>option cannot be defined more than once.<br><br>This also enables the ``left`` command when running the ``focus`` program to<br>view remaining task time.<br><br>Additionally, any options that support the \"end_\" prefix will also support<br>the \"timer_\" prefix. They function similar to \"end_\" prefixed options, except<br>they are only activated after the task timer has elapsed.<br><br>For example: ::<br><br>    apps {<br>        timer_run /path/to/file;   # run app at task end (timer elapsed)<br>        timer_close /path/to/file; # close app at task end (timer elapsed)<br>    }<br><br>Blocking Websites<br>-----------------<br><br>The ``block`` option under the ``sites`` block allows for blocking website<br>domains while the task is active. Each option supports one or more domain<br>values. The option may be redefined multiple times.<br><br>For example: ::<br><br>    sites {<br>        block google.com, twitter.com;<br>        block youtube.com, \"othersite.com\";<br>    }<br><br>Under the hood, Focus updates the system HOSTS file (/etc/hosts) with mappings<br>of the provided domains to the local machine. Because of this, you will have to<br>provide an entry for each relevant subdomain as well if necessary. As a result,<br>this strategy won't scale when blocking a site with numerous subdomains.<br>Perhaps, another solution like a local DNS server would be more appropriate<br>(e.g. `dnsmasq &lt;http://www.thekelleys.org.uk/dnsmasq/doc.html&gt;`_).<br><br>As a convenience, any domains configured will also map the following<br>subdomains: ``m``, ``www``, ``mobile``.<br><br>For example::<br><br>    google.com =&gt; google.com, www.google.com, m.google.com, mobile.google.com<br><br>Playing Sounds<br>--------------<br><br>The ``play`` options for the ``sounds`` block support the path to a sound file<br>that is playable on your system via available external binaries (``mpg123``,<br>``play``, and ``aplay`` [WAV only]). Only a single value is supported for each<br>option, and each type of option cannot be defined more than once. Make sure<br>your preferred binary is installed and works correctly by manually running your<br>sound file through the program.<br><br>For example: ::<br><br>    sounds {<br>        play /path/to/file;        # play sound file at task start<br>        end_play /path/to/file;    # play sound file at task end (manual)<br>        timer_play /path/to/file;  # play sound file at task end (timer elapsed)<br>    }<br><br>Notifications<br>-------------<br><br>The ``show`` options for the ``notify`` block support a single message that<br>will be shown as a system notification. Only a single value is supported for<br>each option, and each type of option cannot be defined more than once.<br><br>On Linux/Unix, the feature functions via the DBUS IPC bus. On Mac OSX, external<br>binaries (``terminal-notifier`` and ``growlnotify``) will be used when<br>available; otherwise, a fallback alert dialog will be shown. If using Mac OSX,<br>make sure your preferred binary is installed and works correctly, unless the<br>fallback method is desired.<br><br>For example: ::<br><br>    notify {<br>        show \"message here\";        # notify at task start<br>        end_show \"message here\";    # notify at task end (manual)<br>        timer_show \"message here\";  # notify at task end (timer elapsed)<br>    }<br><br>Updating IM Status<br>------------------<br><br>The ``im`` block allows for options to update the status information for<br>a number of running instant messenger applications.<br><br>The ``status_msg`` option supports defining a name that can be referenced when<br>specifying the ``status``, ``end_status`` and ``timer_status`` options. The<br>option takes two arguments: the first being the identifier name, and the second,<br>the value for the status message. The option can be defined more than once to<br>define multiple status messages to use.<br><br>For example: ::<br><br>    im {<br>        status_msg message_name, value;<br>        status_msg brb, brb;<br>        status_msg brb2, be\\ right\\ back;<br>        status_msg omg, \"oh em gee\";<br>        status_msg working, \"definitely busy here..\";<br>    }<br><br>The ``status`` option is activated at the start of a task, and it accepts<br>either the new status, or both the new status and new status message as<br>arguments.<br><br>For the status argument, the following values are available: ::<br><br>    'online'    - Online/Available<br>    'away'      - Away<br>    'long_away' - Extended Away<br>    'busy'      - Busy<br>    'hidden'    - Hidden/Invisible<br><br>For the optional message argument, a string value may be provided. To reference<br>an existing ``status_msg`` option definition, simply provide the ``status_msg``<br>name prefixed with \":\" (e.g. :working, :brb, :omg). The ``status`` option also<br>supports the \"end_\" and \"timer_\" prefixes which will instead be activated when<br>a task is manually ended or after the timer elapses, respectively.<br><br>For example: ::<br><br>    im {<br>        status_msg working, \"definitely busy here...\";<br>        status busy, :working;       # change status at task start<br><br>        #status away;<br>        #status busy, really\\ busy;<br>        #status busy, \"don't bother\";<br>        end_status online;          # change status at task end (manual)<br>        timer_status online;        # change status at task end (timer elapsed)<br><br>        status_msg play, \"reading some twitters\";<br>        #status away, :play;<br>    }<br><br>Plugin System<br>=============<br><br>Focus provides a simple and flexible plugin system to extend the core<br>functionality. In fact, plugins are used internally for everything.<br><br>Installing Plugins<br>------------------<br><br>After running the ``focus`` command, the ``.focus`` directory is created in<br>your home directory ($HOME or ~). Under that lives a ``plugins`` subdirectory,<br>where you can drop your .py python plugin files. If they are valid, the plugins<br>will automatically become available when running ``focus``. For command<br>plugins, running ``focus`` will print a help banner with the installed<br>commands, which will include your plugins.<br><br>*Remember, if the plugin is available only for active tasks, the appropriate<br>task must be active to see your plugin show up.*<br><br>Command Plugins<br>---------------<br><br>Command plugins define the commands that are available for the Focus binary<br>(e.g. ``on``, ``make``, etc.). These can be available always, only for tasks<br>that define certain options, or only for active tasks.<br><br>The ``command`` class attribute identifies the plugin as a command plugin and<br>specifies the actual command name to register with the plugin.<br><br>*Note: The command name should be unique.*<br><br>The plugin should define the ``execute()`` method for running the command. The<br>``env`` argument represents the environment and the ``args`` argument is the<br>result of parsing the command-line arguments using the ``ArgumentParser``<br>object.<br><br>**Method Definition:** ::<br><br>    def execute(self, env, args):<br>        env.io.write('Verbose: {0}'.format(args.verbose))<br><br>To simply print an error message, use the ``env.io.error()`` method. If you<br>need to also return a specific error code along with printing an error message<br>raise a ``FocusError`` exception from the ``focus.errors`` module: ::<br><br>    from focus.errors import FocusError<br><br>    def execute(self, env, args):<br>        # env.io.error('Oh noes!')  # just prints and returns exit code 0<br>        raise FocusError('message here', code=123)<br><br>If the plugin needs to define any command-line arguments, it should define the<br>``setup_parser()`` method. The ``parser`` argument is an instance of<br>``argparse.ArgumentParser`` and should be updated as necessary to add<br>arguments.<br><br>**Method Definition:** ::<br><br>    def setup_parser(self, parser):<br>        parser.add_argument('-v', '--verbose', action='store_true')<br><br>**Plugin Example:** ::<br><br>    from focus.plugin import Plugin<br><br>    class Foo(Plugin):<br>       \"\"\" Description of plugin, used when generating help message.<br>           \"\"\"<br>       name = \"FooPlugin\"         # Name of plugin, must be unique<br>       version = \"1.0\"            # Plugin version<br>       target_version = \"&gt;=0.1\"   # Target Focus version, (&lt;, &lt;=, ==, &gt;=, &gt;)<br>       command = \"bar\"            # Command name<br><br>       def setup_parser(self, parser):<br>           parser.add_argument('-v', '--verbose', action='store_true')<br><br>       def execute(self, env, args):<br>           env.io.write('Verbose: {0}'.format(args.verbose))<br>           #env.io.error('Oh noes!')<br>           #env.io.success('Woot')<br><br>           # resp = env.io.prompt('Are you distracted? (y/n)')<br>           # stdin_data = env.io.read()<br><br>Task Event Plugins<br>------------------<br><br>Task event plugins are only available for active tasks. They can be registered<br>to run at the start of the task, during the task loop (every second), at the<br>end of a task, or some combination therein. These plugins will be run within a<br>daemon process when the task starts.<br><br>The ``events`` class attribute identifies the plugin as a task event plugin and<br>specifies the events of the task that should be registered: ``task_start``,<br>``task_run``, ``task_end``.<br><br>The plugin should define the ``on_taskstart()``, ``on_taskrun()``, or<br>``on_taskend()`` methods corresponding to the values provided for the<br>``events`` attribute. The ``task`` argument represents the active task, which<br>includes ``name``, ``duration`` (minutes), and a few methods such as<br>``start()`` and ``stop()``.<br><br>**Method Definition:** ::<br><br>    def on_taskstart(self, task):<br>        pass<br><br>**Plugin Example:** ::<br><br>    from focus.plugin import Plugin<br><br>    class Foo(Plugin):<br>       \"\"\" Description of plugin.<br>           \"\"\"<br>       name = \"FooPlugin\"         # Name of plugin, must be unique<br>       version = \"1.0\"            # Plugin version<br>       target_version = \"&gt;=0.1\"   # Target Focus version, (&lt;, &lt;=, ==, &gt;=, &gt;)<br>       events = ['task_start', 'task_run', 'task_end']<br><br>       def on_taskstart(self, task):<br>           pass<br><br>       def on_taskrun(self, task):<br>           pass<br><br>       def on_taskend(self, task):<br>           pass<br><br>Plugin Options<br>--------------<br><br>Two attributes exist to allow plugins to only be loaded for active tasks:<br><br>1. **options**<br><br>   Set the ``options`` class attribute. This defines the options that, if<br>   provided in a task configuration file, will trigger the load of this plugin.<br>   Options are either non-block (e.g. ``duration``) or block<br>   (e.g. ``apps`` =&gt; { ``run``, ``close``, ``block`` }, ``sites`` =&gt;<br>   { ``block`` }, etc.). When this attribute is set, the plugin should define<br>   the ``parse_option()`` method in order to parse the values set in a task<br>   configuration file. See example below.<br><br>   *Note: these options should be unique.*<br><br>   **Plugin Snippet:** ::<br><br>       from focus.plugin import Plugin<br><br>       class Foo(Plugin):<br>           ...<br>           options = [<br>               # duration (non-block option)<br>               {<br>                   'name': 'duration',<br>                   'allow_duplicates': False  # disallow duplicate definitions<br>               },<br><br>               # apps.run, apps.close (block options)<br>               {<br>                   'block': 'apps',<br>                   'options': [<br>                       {<br>                           'name': 'run',<br>                           'allow_duplicates': True  # the default<br>                       },<br>                       { 'name': 'close' }<br>                   ]<br>               }<br>           ]<br><br>   **Task Configuration Example:** ::<br><br>       task {<br>           duration 30;<br><br>           apps {<br>               run firefox, chromium, /path/to/file, /path/to/other\\ file;<br>               run \"/path/to/file arg1 arg2\", helloworld\\ -a\\ b;<br>               close adium;<br>           }<br>       }<br><br>   **Method Definition:** ::<br><br>       def parse_option(self, option, block_name, *values):<br>           # raise ValueError exception with a message to reject the provided<br>           # value. this will propagate up to the cli when loading a task<br><br>   Here, the ``option`` and ``block_name`` names for the currently parsed<br>   option are provided. ``block_name`` will be ``None`` when parsing non-block<br>   options. ``values`` holds one or more values associated with the provided<br>   option.<br><br>2. **task_only**<br><br>   Set the ``task_only`` class attribute, so the plugin will be available for<br>   any task once started.<br><br>   **Plugin Snippet:** ::<br><br>       class Foo(Plugin):<br>           ...<br>           task_only = True<br>           ...<br><br>Root Access<br>-----------<br><br>If a plugin needs root access, it should define the ``needs_root`` attribute.<br>When set, this installs a ``run_root()`` method on the plugin class, which<br>accepts an arbitrary command string and returns a boolean for success or<br>failure. Internally, Focus uses the ``sudo`` command to temporarily escalate<br>privileges.<br><br>**Plugin Snippet:** ::<br><br>    from focus.plugin import Plugin<br><br>    class Foo(Plugin):<br>        ...<br>        command = 'foo'<br>        events = ['task_start']<br>        needs_root = True<br>        <br>        def execute(self, env, args):<br>            self.run_root('whoami &gt;&gt; /tmp/whoami_focus.log')<br><br>        def on_taskstart(self, task):<br>            self.run_root('whoami &gt;&gt; /tmp/whoami_focus2.log')\n          </div>"}, "last_serial": 792096, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "98f09f099a7c634fbd1e3bdab6b6868e", "sha256": "50ecbf4c05e98b641940ef9cecfa49cb481f93c9b2a474848b068bfbe5fe4c02"}, "downloads": -1, "filename": "focus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "98f09f099a7c634fbd1e3bdab6b6868e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69608, "upload_time": "2012-06-22T09:29:43", "upload_time_iso_8601": "2012-06-22T09:29:43.304820Z", "url": "https://files.pythonhosted.org/packages/16/c9/0d19ef4360a76589ee2d5cb7290dda484166a679a796ec647683ec242e2c/focus-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a2c7e07d6311d7e1002318b7d0899ee8", "sha256": "eef4979a51ed39637dc19486247f616dcd4ab1be94351d28a2e4cf22eb8ed1e2"}, "downloads": -1, "filename": "focus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a2c7e07d6311d7e1002318b7d0899ee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77563, "upload_time": "2012-09-04T05:41:24", "upload_time_iso_8601": "2012-09-04T05:41:24.232535Z", "url": "https://files.pythonhosted.org/packages/19/58/e69e6ef47e1c1bd2107f37a23651efbab373a7e3703993f82885efbca715/focus-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "621902d2ff6f48b695b4f56fe5ada80b", "sha256": "b4a6980c5522a719e07bb1c743368d03e1606b49c191f42f7c88b20c40cc5637"}, "downloads": -1, "filename": "focus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "621902d2ff6f48b695b4f56fe5ada80b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77620, "upload_time": "2012-09-04T16:26:01", "upload_time_iso_8601": "2012-09-04T16:26:01.921625Z", "url": "https://files.pythonhosted.org/packages/cc/d0/34e17e311ae229e721d2e1b558df45e69a087351f88c465fa4b42ae6f086/focus-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "6628f0c7fd8a748cab3696523b4c0061", "sha256": "ccee1d881b2bb3c03b8594a90503df2d4224034ace5425a3062074639e91afd4"}, "downloads": -1, "filename": "focus-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6628f0c7fd8a748cab3696523b4c0061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82833, "upload_time": "2012-11-23T04:39:26", "upload_time_iso_8601": "2012-11-23T04:39:26.670268Z", "url": "https://files.pythonhosted.org/packages/9c/e8/01b6cbcf881e49cee9bb9ffcdf12e06188782535b364f39a8e11f2fda2c3/focus-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6628f0c7fd8a748cab3696523b4c0061", "sha256": "ccee1d881b2bb3c03b8594a90503df2d4224034ace5425a3062074639e91afd4"}, "downloads": -1, "filename": "focus-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6628f0c7fd8a748cab3696523b4c0061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82833, "upload_time": "2012-11-23T04:39:26", "upload_time_iso_8601": "2012-11-23T04:39:26.670268Z", "url": "https://files.pythonhosted.org/packages/9c/e8/01b6cbcf881e49cee9bb9ffcdf12e06188782535b364f39a8e11f2fda2c3/focus-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:13 2020"}