{"info": {"author": "Paul McLanahan", "author_email": "paul@mclanahan.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Communications", "Topic :: Communications :: Email", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": "==========================================================\ndjango-celery-email - A Celery-backed Django Email Backend\n==========================================================\n\nA `Django`_ email backend that uses a `Celery`_ queue for out-of-band sending\nof the messages.\n\nThis fork reinstates the retry logic that stops retrying after ``Task.max_retries`` attempts,\nwhere the default is ``3``.\n\n.. _`Celery`: http://celeryproject.org/\n.. _`Django`: http://www.djangoproject.org/\n\n\nUsing django-celery-email\n=========================\n\nTo enable ``django-celery-email`` for your project you need to add ``djcelery_email`` to\n``INSTALLED_APPS``::\n\n    INSTALLED_APPS += (\"djcelery_email\",)\n\nYou must then set ``django-celery-email`` as your ``EMAIL_BACKEND``::\n\n    EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'\n\nBy default ``django-celery-email`` will use Django's builtin ``SMTP`` email backend\nfor the actual sending of the mail. If you'd like to use another backend, you\nmay set it in ``CELERY_EMAIL_BACKEND`` just like you would normally have set\n``EMAIL_BACKEND`` before you were using Celery. In fact, the normal installation\nprocedure will most likely be to get your email working using only Django, then\nchange ``EMAIL_BACKEND`` to ``CELERY_EMAIL_BACKEND``, and then add the new\n``EMAIL_BACKEND`` setting from above.\n\nIf you need to set any of the settings (attributes) you'd normally be able to set on a\n`Celery Task`_ class had you written it yourself, you may specify them in a ``dict``\nin the ``CELERY_EMAIL_TASK_CONFIG`` setting::\n\n    CELERY_EMAIL_TASK_CONFIG = {\n        'queue' : 'email',\n        'rate_limit' : '50/m',\n        ...\n    }\n\nThere are some default settings. Unless you specify otherwise, the equivalent of the\nfollowing settings will apply::\n\n    CELERY_EMAIL_TASK_CONFIG = {\n        'name': 'djcelery_email_send',\n        'ignore_result': True,\n    }\n\nAfter this setup is complete, and you have a working Celery install, sending\nemail will work exactly like it did before, except that the sending will be\nhandled by your Celery workers::\n\n    from django.core import mail\n\n    emails = (\n        ('Hey Man', \"I'm The Dude! So that's what you call me.\", 'dude@aol.com', ['mr@lebowski.com']),\n        ('Dammit Walter', \"Let's go bowlin'.\", 'dude@aol.com', ['wsobchak@vfw.org']),\n    )\n    results = mail.send_mass_mail(emails)\n\n``results`` will be a list of celery `AsyncResult`_ objects that you may ignore, or use to check the\nstatus of the email delivery task, or even wait for it to complete if want. You have to enable a result\nbackend and set ``ignore_result`` to ``False`` in ``CELERY_EMAIL_TASK_CONFIG`` if you want to use these.\nSee the `Celery docs`_ for more info.\n\n``len(results)`` will be the number of emails you attempted to send, and is in no way a reflection on the success or failure\nof their delivery.\n\n.. _`Celery Task`: http://celery.readthedocs.org/en/latest/userguide/tasks.html#basics\n.. _`Celery docs`: http://celery.readthedocs.org/en/latest/userguide/tasks.html#task-states\n.. _`AsyncResult`: http://celery.readthedocs.org/en/latest/reference/celery.result.html#celery.result.AsyncResult\n\nChangelog\n=========\n\n1.0.3 - 2012.03.06\n------------------\n\n* Backend will now pass any kwargs with which it is initialized to the\n  email sending backend.\n* Thanks to `Fedor Tyurin`_ for the contribution.\n\n.. _`Fedor Tyurin`: https://bitbucket.org/ftyurin\n\n\n1.0.2 - 2012.02.21\n------------------\n\n* Task and backend now accept kwargs that can be used in signal handlers.\n* Task now returns the result from the email sending backend.\n* Thanks to `Yehonatan Daniv`_ for these changes.\n\n.. _`Yehonatan Daniv`: https://bitbucket.org/ydaniv\n\n1.0.1 - 2011.10.06\n------------------\n\n* Fixed a bug that resulted in tasks that were throwing errors reporting success.\n* If there is an exception thrown by the sending email backend, the result of the task will\n  now be this exception.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/pmclanahan/django-celery-email", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-celery-email-with-retry", "package_url": "https://pypi.org/project/django-celery-email-with-retry/", "platform": "any", "project_url": "https://pypi.org/project/django-celery-email-with-retry/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/pmclanahan/django-celery-email"}, "release_url": "https://pypi.org/project/django-celery-email-with-retry/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Django email backend for celery.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A <a href=\"http://www.djangoproject.org/\" rel=\"nofollow\">Django</a> email backend that uses a <a href=\"http://celeryproject.org/\" rel=\"nofollow\">Celery</a> queue for out-of-band sending\nof the messages.</p>\n<p>This fork reinstates the retry logic that stops retrying after <tt>Task.max_retries</tt> attempts,\nwhere the default is <tt>3</tt>.</p>\n<div id=\"using-django-celery-email\">\n<h2>Using django-celery-email</h2>\n<p>To enable <tt><span class=\"pre\">django-celery-email</span></tt> for your project you need to add <tt>djcelery_email</tt> to\n<tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS += (\"djcelery_email\",)\n</pre>\n<p>You must then set <tt><span class=\"pre\">django-celery-email</span></tt> as your <tt>EMAIL_BACKEND</tt>:</p>\n<pre>EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'\n</pre>\n<p>By default <tt><span class=\"pre\">django-celery-email</span></tt> will use Django\u2019s builtin <tt>SMTP</tt> email backend\nfor the actual sending of the mail. If you\u2019d like to use another backend, you\nmay set it in <tt>CELERY_EMAIL_BACKEND</tt> just like you would normally have set\n<tt>EMAIL_BACKEND</tt> before you were using Celery. In fact, the normal installation\nprocedure will most likely be to get your email working using only Django, then\nchange <tt>EMAIL_BACKEND</tt> to <tt>CELERY_EMAIL_BACKEND</tt>, and then add the new\n<tt>EMAIL_BACKEND</tt> setting from above.</p>\n<p>If you need to set any of the settings (attributes) you\u2019d normally be able to set on a\n<a href=\"http://celery.readthedocs.org/en/latest/userguide/tasks.html#basics\" rel=\"nofollow\">Celery Task</a> class had you written it yourself, you may specify them in a <tt>dict</tt>\nin the <tt>CELERY_EMAIL_TASK_CONFIG</tt> setting:</p>\n<pre>CELERY_EMAIL_TASK_CONFIG = {\n    'queue' : 'email',\n    'rate_limit' : '50/m',\n    ...\n}\n</pre>\n<p>There are some default settings. Unless you specify otherwise, the equivalent of the\nfollowing settings will apply:</p>\n<pre>CELERY_EMAIL_TASK_CONFIG = {\n    'name': 'djcelery_email_send',\n    'ignore_result': True,\n}\n</pre>\n<p>After this setup is complete, and you have a working Celery install, sending\nemail will work exactly like it did before, except that the sending will be\nhandled by your Celery workers:</p>\n<pre>from django.core import mail\n\nemails = (\n    ('Hey Man', \"I'm The Dude! So that's what you call me.\", 'dude@aol.com', ['mr@lebowski.com']),\n    ('Dammit Walter', \"Let's go bowlin'.\", 'dude@aol.com', ['wsobchak@vfw.org']),\n)\nresults = mail.send_mass_mail(emails)\n</pre>\n<p><tt>results</tt> will be a list of celery <a href=\"http://celery.readthedocs.org/en/latest/reference/celery.result.html#celery.result.AsyncResult\" rel=\"nofollow\">AsyncResult</a> objects that you may ignore, or use to check the\nstatus of the email delivery task, or even wait for it to complete if want. You have to enable a result\nbackend and set <tt>ignore_result</tt> to <tt>False</tt> in <tt>CELERY_EMAIL_TASK_CONFIG</tt> if you want to use these.\nSee the <a href=\"http://celery.readthedocs.org/en/latest/userguide/tasks.html#task-states\" rel=\"nofollow\">Celery docs</a> for more info.</p>\n<p><tt>len(results)</tt> will be the number of emails you attempted to send, and is in no way a reflection on the success or failure\nof their delivery.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0.3 - 2012.03.06</h3>\n<ul>\n<li>Backend will now pass any kwargs with which it is initialized to the\nemail sending backend.</li>\n<li>Thanks to <a href=\"https://bitbucket.org/ftyurin\" rel=\"nofollow\">Fedor Tyurin</a> for the contribution.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.2 - 2012.02.21</h3>\n<ul>\n<li>Task and backend now accept kwargs that can be used in signal handlers.</li>\n<li>Task now returns the result from the email sending backend.</li>\n<li>Thanks to <a href=\"https://bitbucket.org/ydaniv\" rel=\"nofollow\">Yehonatan Daniv</a> for these changes.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.1 - 2011.10.06</h3>\n<ul>\n<li>Fixed a bug that resulted in tasks that were throwing errors reporting success.</li>\n<li>If there is an exception thrown by the sending email backend, the result of the task will\nnow be this exception.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 789260, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "a17e8b634ca4cf9d1a8e2bad8607741f", "sha256": "c925cad3263d80442567335d4969384bbe4195da66b6f15ce205abdb2b3bf540"}, "downloads": -1, "filename": "django-celery-email-with-retry-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a17e8b634ca4cf9d1a8e2bad8607741f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7252, "upload_time": "2013-05-08T13:50:08", "upload_time_iso_8601": "2013-05-08T13:50:08.146284Z", "url": "https://files.pythonhosted.org/packages/1c/b0/4e92dbc8a02d809af2c6988d392ca18e3e56804b46d73a503fb50039fb0f/django-celery-email-with-retry-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a17e8b634ca4cf9d1a8e2bad8607741f", "sha256": "c925cad3263d80442567335d4969384bbe4195da66b6f15ce205abdb2b3bf540"}, "downloads": -1, "filename": "django-celery-email-with-retry-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a17e8b634ca4cf9d1a8e2bad8607741f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7252, "upload_time": "2013-05-08T13:50:08", "upload_time_iso_8601": "2013-05-08T13:50:08.146284Z", "url": "https://files.pythonhosted.org/packages/1c/b0/4e92dbc8a02d809af2c6988d392ca18e3e56804b46d73a503fb50039fb0f/django-celery-email-with-retry-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:13 2020"}