{"info": {"author": "Kale Kundert", "author_email": "kale.kundert@ucsf.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 2", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "***************\nPull Into Place\n***************\nPull Into Place (PIP) is a protocol to design protein functional groups with \nsub-angstrom accuracy.  The protocol is based on two ideas: 1) using restraints \nto define the geometry you're trying to design and 2) using an unrestrained \nsimulations to test designs.\n\n.. image:: https://img.shields.io/pypi/v/pull_into_place.svg\n   :target: https://pypi.python.org/pypi/pull_into_place\n\n.. image:: https://img.shields.io/pypi/pyversions/pull_into_place.svg\n   :target: https://pypi.python.org/pypi/pull_into_place\n\n.. image:: https://readthedocs.org/projects/pull_into_place/badge/?version=latest\n   :target: http://pull_into_place.readthedocs.io/en/latest/?badge=latest\n\nThe design pipeline orchestrated by PIP has the following steps:\n\n1. Define your project.  This entails creating an input PDB file and preparing \n   it for use with rosetta, creating a restraints file that specifies your \n   desired geometry, creating a resfile that specifies which residues are \n   allowed to design, and creating a loop file that specifies where backbone \n   flexibility will be considered::\n\n   $ pull_into_place 01_setup_workspace ...\n   $ pull_into_place 02_setup_model_fragments ...\n\n2. Build a large number of models that plausibly support your desired geometry \n   by running flexible backbone Monte Carlo simulations restrained to stay near \n   said geometry.  The goal is to strike a balance between finding models that \n   are realistic and finding models that satisfy your restraints::\n\n   $ pull_into_place 03_build_models ...\n\n3. Filter out models that don't meet your quality criteria::\n\n   $ pull_into_place 04_pick_models_to_design ...\n\n4. Generate a number of designs for each model remaining::\n\n   $ pull_into_place 05_design_models ...\n\n5. Pick a small number of designs to validate.  Typically I generate 100,000 \n   designs and can only validate 50-100.  I've found that randomly picking \n   designs according to the Boltzmann weight of their rosetta score gives a \n   nice mix of designs that are good but not too homogeneous::\n\n   $ pull_into_place 06_pick_designs_to_validate ...\n\n6. Validate the designs using unrestrained Monte Carlo simulations.  Designs \n   that are \"successful\" will have a funnel on the left side of their score vs \n   rmsd plots::\n\n   $ pull_into_place 07_setup_design_fragments ...\n   $ pull_into_place 08_validate_designs ...\n\n7. Optionally take the decoys with the best geometry from the validation run \n   (even if they didn't score well) and feed them back into step 4.  Second and \n   third rounds of simulation usually produce much better results than the \n   first, because the models being designed are more realistic.  Additional \n   rounds of simulation give diminishing returns, and may be more effected by \n   some of rosetta's pathologies (i.e. it's preference for aromatic residues)::\n\n   $ pull_into_place 04_pick_models_to_design ...\n   $ pull_into_place 05_design_models ...\n   $ pull_into_place 06_pick_designs_to_validate ...\n   $ pull_into_place 07_setup_design_fragments ...\n   $ pull_into_place 08_validate_designs ...\n\n8. Generate a report summarizing a variety of quality metrics for each design.  \n   This report is meant to help you pick designs to test experimentally::\n\n   $ pull_into_place 09_compare_best_designs ...", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Kortemme-Lab/pull_into_place/tarball/v1.2.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Kortemme-Lab/pull_into_place", "keywords": "scientific,rosetta,design,protein,sidechain", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "pull_into_place", "package_url": "https://pypi.org/project/pull_into_place/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pull_into_place/", "project_urls": {"Download": "https://github.com/Kortemme-Lab/pull_into_place/tarball/v1.2.2", "Homepage": "https://github.com/Kortemme-Lab/pull_into_place"}, "release_url": "https://pypi.org/project/pull_into_place/1.2.2/", "requires_dist": null, "requires_python": null, "summary": "A rosetta pipeline to position important protein sidechains with sub-angstrom accuracy.", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pull Into Place (PIP) is a protocol to design protein functional groups with\nsub-angstrom accuracy.  The protocol is based on two ideas: 1) using restraints\nto define the geometry you\u2019re trying to design and 2) using an unrestrained\nsimulations to test designs.</p>\n<a href=\"https://pypi.python.org/pypi/pull_into_place\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pull_into_place.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/964e649d3e9d18b508718edd0edc663cbd594790/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70756c6c5f696e746f5f706c6163652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pull_into_place\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/pull_into_place.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57dd60d7bddf3d72c70b141740b660952fe58f65/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70756c6c5f696e746f5f706c6163652e737667\"></a>\n<a href=\"http://pull_into_place.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/pull_into_place/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5b99765d78d2b4cd8ea6f8bbea29afcdbbfa901/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70756c6c5f696e746f5f706c6163652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>The design pipeline orchestrated by PIP has the following steps:</p>\n<ol>\n<li><p>Define your project.  This entails creating an input PDB file and preparing\nit for use with rosetta, creating a restraints file that specifies your\ndesired geometry, creating a resfile that specifies which residues are\nallowed to design, and creating a loop file that specifies where backbone\nflexibility will be considered:</p>\n<pre>$ pull_into_place 01_setup_workspace ...\n$ pull_into_place 02_setup_model_fragments ...\n</pre>\n</li>\n<li><p>Build a large number of models that plausibly support your desired geometry\nby running flexible backbone Monte Carlo simulations restrained to stay near\nsaid geometry.  The goal is to strike a balance between finding models that\nare realistic and finding models that satisfy your restraints:</p>\n<pre>$ pull_into_place 03_build_models ...\n</pre>\n</li>\n<li><p>Filter out models that don\u2019t meet your quality criteria:</p>\n<pre>$ pull_into_place 04_pick_models_to_design ...\n</pre>\n</li>\n<li><p>Generate a number of designs for each model remaining:</p>\n<pre>$ pull_into_place 05_design_models ...\n</pre>\n</li>\n<li><p>Pick a small number of designs to validate.  Typically I generate 100,000\ndesigns and can only validate 50-100.  I\u2019ve found that randomly picking\ndesigns according to the Boltzmann weight of their rosetta score gives a\nnice mix of designs that are good but not too homogeneous:</p>\n<pre>$ pull_into_place 06_pick_designs_to_validate ...\n</pre>\n</li>\n<li><p>Validate the designs using unrestrained Monte Carlo simulations.  Designs\nthat are \u201csuccessful\u201d will have a funnel on the left side of their score vs\nrmsd plots:</p>\n<pre>$ pull_into_place 07_setup_design_fragments ...\n$ pull_into_place 08_validate_designs ...\n</pre>\n</li>\n<li><p>Optionally take the decoys with the best geometry from the validation run\n(even if they didn\u2019t score well) and feed them back into step 4.  Second and\nthird rounds of simulation usually produce much better results than the\nfirst, because the models being designed are more realistic.  Additional\nrounds of simulation give diminishing returns, and may be more effected by\nsome of rosetta\u2019s pathologies (i.e. it\u2019s preference for aromatic residues):</p>\n<pre>$ pull_into_place 04_pick_models_to_design ...\n$ pull_into_place 05_design_models ...\n$ pull_into_place 06_pick_designs_to_validate ...\n$ pull_into_place 07_setup_design_fragments ...\n$ pull_into_place 08_validate_designs ...\n</pre>\n</li>\n<li><p>Generate a report summarizing a variety of quality metrics for each design.\nThis report is meant to help you pick designs to test experimentally:</p>\n<pre>$ pull_into_place 09_compare_best_designs ...\n</pre>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 2699327, "releases": {"0.0.0": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "93dc11d3128cfed8709da4db96cbc2e1", "sha256": "ce67d88a887e815dbebac47a66d3aada7701b75ebcdf7bbc82f3b0e6daf6b4e9"}, "downloads": -1, "filename": "pull_into_place-1.0.0.tar.gz", "has_sig": false, "md5_digest": "93dc11d3128cfed8709da4db96cbc2e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37948, "upload_time": "2016-09-26T03:00:00", "upload_time_iso_8601": "2016-09-26T03:00:00.664210Z", "url": "https://files.pythonhosted.org/packages/42/e3/05873afccddf05d340a09f2427bcafbb9c0636e37149ae713614ff38d42f/pull_into_place-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ff9ee21e1d5457831265d8941120b409", "sha256": "75ba13ff4ac6c7a9ddd6e120baf555174d768071ab3908ee9a4e0057c0c0bec4"}, "downloads": -1, "filename": "pull_into_place-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ff9ee21e1d5457831265d8941120b409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38216, "upload_time": "2016-09-26T05:02:49", "upload_time_iso_8601": "2016-09-26T05:02:49.811129Z", "url": "https://files.pythonhosted.org/packages/19/fd/44e10d14b6a4d1f5f4cb35e9ec8e325700a24b14f8cd132d069911f46c95/pull_into_place-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bd8b2303367252be4539e78670e56734", "sha256": "6f047f416b52b49d755d533645cbb32ea4a39b607237b9fee1a89fad3bad5c18"}, "downloads": -1, "filename": "pull_into_place-1.0.2.tar.gz", "has_sig": false, "md5_digest": "bd8b2303367252be4539e78670e56734", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38307, "upload_time": "2016-10-19T00:52:54", "upload_time_iso_8601": "2016-10-19T00:52:54.192766Z", "url": "https://files.pythonhosted.org/packages/c2/73/6ec7839e425a75fe77ff00a7edd4a507ddfa452bec5afe2ab72714629474/pull_into_place-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3972c84537dedb6a3dde47bfaaf2f15b", "sha256": "3d9005f3d2ac9ece7bd2512dbcaf9883bf66bd3ce5cc10563d338701cb870ef0"}, "downloads": -1, "filename": "pull_into_place-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3972c84537dedb6a3dde47bfaaf2f15b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38560, "upload_time": "2016-10-20T17:02:04", "upload_time_iso_8601": "2016-10-20T17:02:04.777874Z", "url": "https://files.pythonhosted.org/packages/bf/f6/6f5757889e13c909ce5da2ae7e89566375b54d80d433f5542d58cf281bee/pull_into_place-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5f9553c7423648dca431033f71bba01c", "sha256": "6cd4337b7618875fc72e32b803d34af62e139b9d1eda8106a63536f78a224b66"}, "downloads": -1, "filename": "pull_into_place-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5f9553c7423648dca431033f71bba01c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39396, "upload_time": "2017-03-06T22:10:36", "upload_time_iso_8601": "2017-03-06T22:10:36.868602Z", "url": "https://files.pythonhosted.org/packages/15/1c/91830fd8a18f38cc1b040445e78e7ddd0d1430bd494b229f43d8b0afcba9/pull_into_place-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "86e3499222677d9a39a56a46d4f68470", "sha256": "a4c3f580fe017f5dd62af32fb5dd31ca03e6e3a4294f294dd53b0c8db7e1e346"}, "downloads": -1, "filename": "pull_into_place-1.2.1.tar.gz", "has_sig": false, "md5_digest": "86e3499222677d9a39a56a46d4f68470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39420, "upload_time": "2017-03-08T22:28:46", "upload_time_iso_8601": "2017-03-08T22:28:46.436637Z", "url": "https://files.pythonhosted.org/packages/9a/e9/12787095bd9e2ed73677a3bd6660d68f4b49eb24ea60b1e399b062505fb4/pull_into_place-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "695e3b18ae4b03cf360fb2fe1d5a9be2", "sha256": "0b2cd91b756ba204104ce5f30080652ed9ddd2e82e3515c160dd08112f2c39e7"}, "downloads": -1, "filename": "pull_into_place-1.2.2.tar.gz", "has_sig": false, "md5_digest": "695e3b18ae4b03cf360fb2fe1d5a9be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39488, "upload_time": "2017-03-11T17:40:59", "upload_time_iso_8601": "2017-03-11T17:40:59.025995Z", "url": "https://files.pythonhosted.org/packages/ba/70/b45724f83cd2f5c52ad9579316ef9cd74d4af54f0f09a5206c5b5669b2f6/pull_into_place-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "695e3b18ae4b03cf360fb2fe1d5a9be2", "sha256": "0b2cd91b756ba204104ce5f30080652ed9ddd2e82e3515c160dd08112f2c39e7"}, "downloads": -1, "filename": "pull_into_place-1.2.2.tar.gz", "has_sig": false, "md5_digest": "695e3b18ae4b03cf360fb2fe1d5a9be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39488, "upload_time": "2017-03-11T17:40:59", "upload_time_iso_8601": "2017-03-11T17:40:59.025995Z", "url": "https://files.pythonhosted.org/packages/ba/70/b45724f83cd2f5c52ad9579316ef9cd74d4af54f0f09a5206c5b5669b2f6/pull_into_place-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:38 2020"}