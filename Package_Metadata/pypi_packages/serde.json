{"info": {"author": "Ross MacArthur", "author_email": "ross@macarthur.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Serde\n=====\n\n.. image:: https://img.shields.io/pypi/v/serde.svg?style=flat-square&colorB=4c1\n    :target: https://pypi.org/project/serde/\n    :alt: PyPI Version\n\n.. image:: https://img.shields.io/badge/docs-passing-brightgreen.svg?style=flat-square\n    :target: https://ross.macarthur.io/project/serde/\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/github/workflow/status/rossmacarthur/serde/build/master?style=flat-square\n    :target: https://github.com/rossmacarthur/serde/actions?query=workflow%3Abuild\n    :alt: Build Status\n\n.. image:: https://img.shields.io/codecov/c/github/rossmacarthur/serde.svg?style=flat-square\n    :target: https://codecov.io/gh/rossmacarthur/serde\n    :alt: Code Coverage\n\n.. image:: https://img.shields.io/badge/code%20style-black-101010.svg?style=flat-square\n    :target: https://github.com/psf/black\n    :alt: Code Style\n\nSerde is a lightweight, general-purpose framework for defining, serializing,\ndeserializing, and validating data structures in Python.\n\n.. contents::\n    :backlinks: none\n    :local:\n    :depth: 2\n\nGetting started\n---------------\n\nInstallation\n^^^^^^^^^^^^\n\nSerde is available on PyPI, you can install it using\n\n.. code-block:: sh\n\n    pip install serde\n\n\nExtended features can be installed with the ``ext`` feature.\n\n.. code-block:: sh\n\n    pip install serde[ext]\n\nIntroduction\n^^^^^^^^^^^^\n\nIn Serde *models* are containers for *fields*. Data structures are defined by\nsubclassing ``Model`` and assigning ``Field`` instances as class annotations.\nThese fields handle serialization, deserialization, normalization, and\nvalidation for the corresponding model attributes.\n\n.. code-block:: python\n\n    from datetime import date\n    from serde import Model, fields\n\n    class Artist(Model):\n        name: fields.Str()\n\n    class Album(Model):\n        title: fields.Str()\n        release_date: fields.Optional(fields.Date)\n        artist: fields.Nested(Artist)\n\n    album = Album(\n        title='Dangerously in Love',\n        release_date=date(2003, 6, 23),\n        artist=Artist(name='Beyonc\u00e9')\n    )\n    assert album.to_dict() == {\n        'title': 'Dangerously in Love',\n        'release_date': '2003-06-23',\n        'artist': {\n            'name': 'Beyonc\u00e9'\n        }\n    }\n\n    album = Album.from_json(\"\"\"{\n        \"title\": \"Lemonade\",\n        \"artist\": {\"name\": \"Beyonc\u00e9\"}}\"\n    \"\"\")\n    assert album == Album(title='Lemonade', artist=Artist(name='Beyonc\u00e9'))\n\nBasic usage\n-----------\n\nBelow we create a ``User`` model by subclassing ``Model`` and adding the\n``name`` and ``email`` fields.\n\n.. code-block:: python\n\n    >>> from datetime import datetime\n    >>> from serde import Model, fields\n    >>>\n    >>> class User(Model):\n    ...     name: fields.Str(rename='username')\n    ...     email: fields.Email()\n\nThe corresponding attribute names are used to instantiate the model object and\naccess the values on the model instance.\n\n.. code-block:: python\n\n    >>> user = User(name='Linus Torvalds', email='torvalds@linuxfoundation.org')\n    >>> user.name\n    'Linus Torvalds'\n    >>> user.email\n    'torvalds@linuxfoundation.org'\n\nModels are validated when they are instantiated and a ``ValidationError`` is\nraised if you provide invalid values.\n\n.. code-block:: python\n\n    >>> User(name='Linus Torvalds', email='not an email')\n    Traceback (most recent call last):\n    ...\n    serde.exceptions.ValidationError: {'email': 'invalid email'}\n\nModels are serialized into primitive Python types using the ``to_dict()`` method\non the model instance.\n\n.. code-block:: python\n\n    >>> user.to_dict()\n    OrderedDict([('username', 'Linus Torvalds'), ('email', 'torvalds@linuxfoundation.org')])\n\nOr to JSON using the ``to_json()`` method.\n\n.. code-block:: python\n\n    >>> user.to_json()\n    '{\"username\": \"Linus Torvalds\", \"email\": \"torvalds@linuxfoundation.org\"}'\n\nModels are also validated when they are deserialized. Models are deserialized\nfrom primitive Python types using the reciprocal ``from_dict()`` class method.\n\n.. code-block:: python\n\n    >>> user = User.from_dict({\n    ...     'username': 'Donald Knuth',\n    ...     'email': 'noreply@stanford.edu'\n    ... })\n\nOr from JSON using the ``from_json()`` method.\n\n.. code-block:: python\n\n    >>> user = User.from_json('''{\n    ...     \"username\": \"Donald Knuth\",\n    ...     \"email\": \"noreply@stanford.edu\"\n    ... }''')\n\nAttempting to deserialize invalid data will result in a ``ValidationError``.\n\n.. code-block:: python\n\n    >>> User.from_dict({'username': 'Donald Knuth'})\n    Traceback (most recent call last):\n    ...\n    serde.exceptions.ValidationError: {'email': \"missing data, expected field 'email'\"}\n\nModels\n------\n\nModels can be nested and used in container-like fields.  Below we create a\n``Blog`` with an author and a list of subscribers which must all be ``User``\ninstances.\n\n.. code-block:: python\n\n    >>> class Blog(Model):\n    ...     title: fields.Str()\n    ...     author: fields.Nested(User)\n    ...     subscribers: fields.List(User)\n\nWhen instantiating you have to supply instances of the nested models.\n\n.. code-block:: python\n\n    >>> blog = Blog(\n    ...     title=\"sobolevn's personal blog\",\n    ...     author=User(name='Nikita Sobolev', email='mail@sobolevn.me'),\n    ...     subscribers=[\n    ...         User(name='Ned Batchelder', email='ned@nedbatchelder.com')\n    ...     ]\n    ... )\n\nSerializing a ``Blog`` would serialize the entire nested structure.\n\n.. code-block:: python\n\n    >>> print(blog.to_json(indent=2))\n    {\n      \"title\": \"sobolevn's personal blog\",\n      \"author\": {\n        \"username\": \"Nikita Sobolev\",\n        \"email\": \"mail@sobolevn.me\"\n      },\n      \"subscribers\": [\n        {\n          \"username\": \"Ned Batchelder\",\n          \"email\": \"ned@nedbatchelder.com\"\n        }\n      ]\n    }\n\nSimiliarly deserializing a ``Blog`` would deserialize the entire nested\nstructure, and create instances of all the submodels.\n\nSubclassed models\n^^^^^^^^^^^^^^^^^\n\nModels can be subclassed. The subclass will have all the fields of the parent\nand any additional ones. Consider the case where we define a ``SuperUser`` model\nwhich is a subclass of a ``User``. Simply a ``User`` that has an extra ``level``\nfield.\n\n.. code-block:: python\n\n    >>> class SuperUser(User):\n    ...     # inherits name and email fields from User\n    ...     level: fields.Choice(['admin', 'read-only'])\n\nWe instantiate a subclassed model as normal by passing in each field value.\n\n.. code-block:: python\n\n    >>> superuser = SuperUser(\n    ...     name='Linus Torvalds',\n    ...     email='torvalds@linuxfoundation.org',\n    ...     level='admin'\n    ... )\n\nThis is great for many cases, however, a commonly desired paradigm is to be able\nto have the ``User.from_dict()`` class method be able to deserialize a\n``SuperUser`` as well. This can be made possible through *model tagging*.\n\nModel tagging\n-------------\n\nModel tagging is a way to mark serialized data in order to show that it is a\nparticular *variant* of a model. Serde provides three types of model tagging,\nbut you can also define you own custom ``Tag``. A ``Tag`` can be thought of in\nthe same way as a ``Field`` but instead of deserializing data into an attribute\non a model instance, it deserializes data into a model class.\n\nInternally tagged\n^^^^^^^^^^^^^^^^^\n\nInternally tagged data stores a tag value inside the serialized data.\n\nLet us consider an example where we define a ``Pet`` model with a ``tag``. We\ncan then subclass this model and deserialize arbitrary subclasses using the\ntagged model.\n\n.. code-block:: python\n\n    >>> from serde import Model, fields, tags\n    >>>\n    >>> class Pet(Model):\n    ...     name: fields.Str()\n    ...\n    ...     class Meta:\n    ...         tag = tags.Internal(tag='species')\n    ...\n    >>> class Dog(Pet):\n    ...     hates_cats: fields.Bool()\n    ...\n    >>> class Cat(Pet):\n    ...     hates_dogs: fields.Bool()\n\nWe refer to the ``Dog`` and ``Cat`` subclasses as *variants* of ``Pet``. When\nserializing all parent model tag serialization is done after field\nserialization.\n\n.. code-block:: python\n\n    >>> Cat(name='Fluffy', hates_dogs=True).to_dict()\n    OrderedDict([('name', 'Fluffy'), ('hates_dogs', True), ('species', '__main__.Cat')])\n\nWhen deserializing, tag deserialization is done first to determine which model\nto use for the deserialization.\n\n.. code-block:: python\n\n    >>> milo = Pet.from_dict({\n    ...     'name': 'Milo',\n    ...     'hates_cats': False,\n    ...     'species': '__main__.Dog'\n    ... })\n    >>> milo.__class__\n    <class '__main__.Dog'>\n    >>> milo.name\n    'Milo'\n    >>> milo.hates_cats\n    False\n\nAn invalid or missing tag will raise a ``ValidationError``.\n\n.. code-block:: python\n\n    >>> Pet.from_dict({'name': 'Milo', 'hates_cats': False})\n    Traceback (most recent call last):\n    ...\n    serde.exceptions.ValidationError: missing data, expected tag 'species'\n    >>>\n    >>> Pet.from_dict({'name': 'Duke', 'species': '__main__.Horse'})\n    Traceback (most recent call last):\n    ...\n    serde.exceptions.ValidationError: no variant found\n\nExternally tagged\n^^^^^^^^^^^^^^^^^\n\nExternally tagged data uses the tag value as a key and nests the content\nunderneath that key. All other processes behave similarly to the internally\ntagged example above.\n\n.. code-block:: python\n\n    >>> class Pet(Model):\n    ...     name: fields.Str()\n    ...\n    ...     class Meta:\n    ...         tag = tags.External()\n    ...\n    >>> class Dog(Pet):\n    ...     hates_cats: fields.Bool()\n    ...\n    >>> Dog(name='Max', hates_cats=True).to_dict()\n    OrderedDict([('__main__.Dog', OrderedDict([('name', 'Max'), ('hates_cats', True)]))])\n\nAdjacently tagged\n^^^^^^^^^^^^^^^^^\n\nAdjacently tagged data data stores the tag value and the content underneath two\nseparate keys. All other processes behave similarly to the internally tagged\nexample.\n\n.. code-block:: python\n\n    >>> class Pet(Model):\n    ...     name: fields.Str()\n    ...\n    ...     class Meta:\n    ...         tag = tags.Adjacent(tag='species', content='data')\n    ...\n    >>> class Dog(Pet):\n    ...     hates_cats: fields.Bool()\n    ...\n    >>> Dog(name='Max', hates_cats=True).to_dict()\n    OrderedDict([('species', '__main__.Dog'), ('data', OrderedDict([('name', 'Max'), ('hates_cats', True)]))])\n\nAbstract models\n^^^^^^^^^^^^^^^\n\nBy default model tagging still allows deserialization of the base model. It is\ncommon to have this model be abstract. You can do this by setting the\n``abstract`` Meta field to ``True``. This will make it uninstantiatable and it\nwon't be included in the variant list during deserialization.\n\n.. code-block:: python\n\n    >>> class Fruit(Model):\n    ...     class Meta:\n    ...         abstract = True\n    ...\n    >>> Fruit()\n    Traceback (most recent call last):\n    ...\n    TypeError: unable to instantiate abstract model 'Fruit'\n\nCustom tags\n^^^^^^^^^^^\n\nIt is possible to create your own custom tag class by subclassing any of\n``tags.External``, ``tags.Internal``, ``tags.Adjacent`` or even the base\n``tags.Tag``. This will allow customization of how the variants are looked up,\nhow the tag values are generated for variants, and how the data is serialized.\n\nConsider an example where we use a class attribute ``code`` as the tag value.\n\n.. code-block:: python\n\n    >>> class Custom(tags.Internal):\n    ...     def lookup_tag(self, variant):\n    ...         return variant.code\n    ...\n    >>> class Pet(Model):\n    ...     name: fields.Str()\n    ...\n    ...     class Meta:\n    ...         abstract = True\n    ...         tag = Custom(tag='code')\n    ...\n    >>> class Dog(Pet):\n    ...     code = 1\n    ...     hates_cats: fields.Bool()\n    ...\n    >>> Dog(name='Max', hates_cats=True).to_dict()\n    OrderedDict([('name', 'Max'), ('hates_cats', True), ('code', 1)])\n    >>> max = Pet.from_dict({'name': 'Max', 'hates_cats': True, 'code': 1})\n    >>> max.__class__\n    <class '__main__.Dog'>\n    >>> max.name\n    'Max'\n    >>> max.hates_cats\n    True\n\nFields\n------\n\nFields do the work of serializing, deserializing, normalizing, and validating\nthe input values. Fields are always assigned to a model as *instances* , and\nthey support extra serialization, deserialization, normalization, and validation\nof values without having to subclass ``Field``. For example\n\n.. code-block:: python\n\n    from serde import Model, fields, validators\n\n    class Album(Model):\n        title: fields.Str(normalizers=[str.strip])\n        released: fields.Date(\n            rename='release_date',\n            validators=[validators.Min(datetime.date(1912, 4, 15))]\n        )\n\nIn the above example we define an ``Album`` class. The ``title`` field is of\ntype `str` , and we apply the ``str.strip`` normalizer to automatically strip\nthe input value when instantiating or deserializing the ``Album``. The\n``released`` field is of type ``datetime.date`` and we apply an extra validator\nto only accept dates after 15th April 1912. Note: the ``rename`` argument only\napplies to the serializing and deserializing of the data, the ``Album`` class\nwould still be instantiated using ``Album(released=...)``.\n\nIf these methods of creating custom ``Field`` classes are not satisfactory, you\ncan always subclass a ``Field`` and override the relevant methods.\n\n.. code-block:: python\n\n    >>> class Percent(fields.Float):\n    ...     def validate(self, value):\n    ...         super().validate(value)\n    ...         validators.Between(0.0, 100.0)(value)\n\nPython 2.7 and Python 3.5 compatibility\n---------------------------------------\n\nClass annotations were only added in Python 3.6, for this reason class\nattributes can be used for ``Field`` definitions for projects that require\ncompatibility for these versions. For example\n\n.. code-block:: python\n\n    class Artist(Model):\n        name: fields.Str()\n\n    class Album(Model):\n        title: fields.Str()\n        release_date: fields.Optional(fields.Date)\n        artist: fields.Nested(Artist)\n\nis equivalent to\n\n.. code-block:: python\n\n    class Artist(Model):\n        name = fields.Str()\n\n    class Album(Model):\n        title = fields.Str()\n        release_date = fields.Optional(fields.Date)\n        artist = fields.Nested(Artist)\n\nModel states and processes\n--------------------------\n\nIn Serde, there are two states that the data can be in:\n\n* Serialized data\n* Model instance\n\nThere are five different processes that the data structure can go through when\nmoving between these two states.\n\n* Deserialization happens when you create a model instance from a serialized\n  version using ``from_dict()`` or similar.\n* Instantiation happens when you construct a model instance in Python using the\n  ``__init__()`` constructor.\n* Normalization happens after instantiation and after deserialization. This is\n  usually a way to transform things before they are validated. For example: this\n  is where an ``Optional`` field sets default values.\n* Validation is where the model and fields values are validated. This happens\n  after normalization.\n* Serialization is when you serialize a model instance to a supported\n  serialization format using ``to_dict()`` or similar.\n\nThe diagram below shows how the stages (uppercase) and processes (lowercase) fit\nin with each other.\n\n.. code-block:: text\n\n\n                           +---------------+\n                           | Instantiation |\n                           +---------------+\n                                   |\n                                   v\n       +---------------+   +---------------+\n       |Deserialization|-->| Normalization |\n       +---------------+   +---------------+\n               ^                   |\n               |                   v\n               |           +---------------+\n               |           |   Validation  |\n               |           +---------------+\n               |                   |\n               |                   v\n       +-------+-------+   +---------------+\n       |SERIALIZED DATA|   | MODEL INSTANCE|\n       +---------------+   +---------------+\n               ^                   |\n               |                   |\n       +-------+-------+           |\n       | Serialization |<----------+\n       +---------------+\n\nLicense\n-------\n\nSerde is licensed under either of\n\n- Apache License, Version 2.0 (`LICENSE-APACHE <LICENSE-APACHE>`_ or https://www.apache.org/licenses/LICENSE-2.0)\n- MIT License (`LICENSE-MIT <LICENSE-MIT>`_ or https://opensource.org/licenses/MIT)\n\nat your option.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/rossmacarthur/serde/archive/0.8.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rossmacarthur/serde", "keywords": "serde serialization deserialization validation schema json", "license": "MIT/Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "serde", "package_url": "https://pypi.org/project/serde/", "platform": "", "project_url": "https://pypi.org/project/serde/", "project_urls": {"Documentation": "https://ross.macarthur.io/project/serde/", "Download": "https://github.com/rossmacarthur/serde/archive/0.8.0.tar.gz", "Homepage": "https://github.com/rossmacarthur/serde", "Issue Tracker": "https://github.com/rossmacarthur/serde/issues"}, "release_url": "https://pypi.org/project/serde/0.8.0/", "requires_dist": ["isodate (==0.6.*)", "six (==1.*,>=1.13.0)", "chardet (==3.*) ; extra == 'ext'", "validators (<0.15.0,>=0.12.0) ; extra == 'ext'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Define, serialize, deserialize, and validate Python data structures.", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/serde/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02361b17e8e54545835eedf011bb1b1b05c5f57a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73657264652e7376673f7374796c653d666c61742d73717561726526636f6c6f72423d346331\"></a>\n<a href=\"https://ross.macarthur.io/project/serde/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17792c4e7853adc949f86742f246efc2080e8bc0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d70617373696e672d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/rossmacarthur/serde/actions?query=workflow%3Abuild\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8f49b803544a6262fd30c14971ed8d0fb305235/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f726f73736d61636172746875722f73657264652f6275696c642f6d61737465723f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://codecov.io/gh/rossmacarthur/serde\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ed87188270e371fd4cff86d291addb649813103/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f726f73736d61636172746875722f73657264652e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code Style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79d4ea733b5b6fbdacceee99a6642aa64f9bc54f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3130313031302e7376673f7374796c653d666c61742d737175617265\"></a>\n<p>Serde is a lightweight, general-purpose framework for defining, serializing,\ndeserializing, and validating data structures in Python.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#getting-started\" id=\"id1\" rel=\"nofollow\">Getting started</a><ul>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a></li>\n</ul>\n</li>\n<li><a href=\"#basic-usage\" id=\"id4\" rel=\"nofollow\">Basic usage</a></li>\n<li><a href=\"#models\" id=\"id5\" rel=\"nofollow\">Models</a><ul>\n<li><a href=\"#subclassed-models\" id=\"id6\" rel=\"nofollow\">Subclassed models</a></li>\n</ul>\n</li>\n<li><a href=\"#model-tagging\" id=\"id7\" rel=\"nofollow\">Model tagging</a><ul>\n<li><a href=\"#internally-tagged\" id=\"id8\" rel=\"nofollow\">Internally tagged</a></li>\n<li><a href=\"#externally-tagged\" id=\"id9\" rel=\"nofollow\">Externally tagged</a></li>\n<li><a href=\"#adjacently-tagged\" id=\"id10\" rel=\"nofollow\">Adjacently tagged</a></li>\n<li><a href=\"#abstract-models\" id=\"id11\" rel=\"nofollow\">Abstract models</a></li>\n<li><a href=\"#custom-tags\" id=\"id12\" rel=\"nofollow\">Custom tags</a></li>\n</ul>\n</li>\n<li><a href=\"#fields\" id=\"id13\" rel=\"nofollow\">Fields</a></li>\n<li><a href=\"#python-2-7-and-python-3-5-compatibility\" id=\"id14\" rel=\"nofollow\">Python 2.7 and Python 3.5 compatibility</a></li>\n<li><a href=\"#model-states-and-processes\" id=\"id15\" rel=\"nofollow\">Model states and processes</a></li>\n<li><a href=\"#license\" id=\"id16\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Serde is available on PyPI, you can install it using</p>\n<pre>pip install serde\n</pre>\n<p>Extended features can be installed with the <tt>ext</tt> feature.</p>\n<pre>pip install serde<span class=\"o\">[</span>ext<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>In Serde <em>models</em> are containers for <em>fields</em>. Data structures are defined by\nsubclassing <tt>Model</tt> and assigning <tt>Field</tt> instances as class annotations.\nThese fields handle serialization, deserialization, normalization, and\nvalidation for the corresponding model attributes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serde</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Artist</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n    <span class=\"n\">release_date</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n    <span class=\"n\">artist</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span><span class=\"n\">Artist</span><span class=\"p\">)</span>\n\n<span class=\"n\">album</span> <span class=\"o\">=</span> <span class=\"n\">Album</span><span class=\"p\">(</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Dangerously in Love'</span><span class=\"p\">,</span>\n    <span class=\"n\">release_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2003</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">),</span>\n    <span class=\"n\">artist</span><span class=\"o\">=</span><span class=\"n\">Artist</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Beyonc\u00e9'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">album</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Dangerously in Love'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'release_date'</span><span class=\"p\">:</span> <span class=\"s1\">'2003-06-23'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'artist'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Beyonc\u00e9'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">album</span> <span class=\"o\">=</span> <span class=\"n\">Album</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"{\n    \"title\": \"Lemonade\",\n    \"artist\": {\"name\": \"Beyonc\u00e9\"}}\"\n\"\"\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">album</span> <span class=\"o\">==</span> <span class=\"n\">Album</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Lemonade'</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"o\">=</span><span class=\"n\">Artist</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Beyonc\u00e9'</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>Below we create a <tt>User</tt> model by subclassing <tt>Model</tt> and adding the\n<tt>name</tt> and <tt>email</tt> fields.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">serde</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">rename</span><span class=\"o\">=</span><span class=\"s1\">'username'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Email</span><span class=\"p\">()</span>\n</pre>\n<p>The corresponding attribute names are used to instantiate the model object and\naccess the values on the model instance.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Linus Torvalds'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'torvalds@linuxfoundation.org'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'Linus Torvalds'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"s1\">'torvalds@linuxfoundation.org'</span>\n</pre>\n<p>Models are validated when they are instantiated and a <tt>ValidationError</tt> is\nraised if you provide invalid values.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Linus Torvalds'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'not an email'</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"n\">serde</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'invalid email'</span><span class=\"p\">}</span>\n</pre>\n<p>Models are serialized into primitive Python types using the <tt>to_dict()</tt> method\non the model instance.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'Linus Torvalds'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"s1\">'torvalds@linuxfoundation.org'</span><span class=\"p\">)])</span>\n</pre>\n<p>Or to JSON using the <tt>to_json()</tt> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n<span class=\"s1\">'{\"username\": \"Linus Torvalds\", \"email\": \"torvalds@linuxfoundation.org\"}'</span>\n</pre>\n<p>Models are also validated when they are deserialized. Models are deserialized\nfrom primitive Python types using the reciprocal <tt>from_dict()</tt> class method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'Donald Knuth'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'noreply@stanford.edu'</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n</pre>\n<p>Or from JSON using the <tt>from_json()</tt> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'''{\n...     \"username\": \"Donald Knuth\",\n...     \"email\": \"noreply@stanford.edu\"\n... }'''</span><span class=\"p\">)</span>\n</pre>\n<p>Attempting to deserialize invalid data will result in a <tt>ValidationError</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'Donald Knuth'</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"n\">serde</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s2\">\"missing data, expected field 'email'\"</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"models\">\n<h2>Models</h2>\n<p>Models can be nested and used in container-like fields.  Below we create a\n<tt>Blog</tt> with an author and a list of subscribers which must all be <tt>User</tt>\ninstances.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">subscribers</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n</pre>\n<p>When instantiating you have to supply instances of the nested models.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"sobolevn's personal blog\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Nikita Sobolev'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'mail@sobolevn.me'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"n\">subscribers</span><span class=\"o\">=</span><span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Ned Batchelder'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'ned@nedbatchelder.com'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"p\">]</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre>\n<p>Serializing a <tt>Blog</tt> would serialize the entire nested structure.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sobolevn's personal blog\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Nikita Sobolev\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mail@sobolevn.me\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"subscribers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ned Batchelder\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ned@nedbatchelder.com\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Similiarly deserializing a <tt>Blog</tt> would deserialize the entire nested\nstructure, and create instances of all the submodels.</p>\n<div id=\"subclassed-models\">\n<h3>Subclassed models</h3>\n<p>Models can be subclassed. The subclass will have all the fields of the parent\nand any additional ones. Consider the case where we define a <tt>SuperUser</tt> model\nwhich is a subclass of a <tt>User</tt>. Simply a <tt>User</tt> that has an extra <tt>level</tt>\nfield.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">SuperUser</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># inherits name and email fields from User</span>\n<span class=\"o\">...</span>     <span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Choice</span><span class=\"p\">([</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'read-only'</span><span class=\"p\">])</span>\n</pre>\n<p>We instantiate a subclassed model as normal by passing in each field value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">superuser</span> <span class=\"o\">=</span> <span class=\"n\">SuperUser</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Linus Torvalds'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'torvalds@linuxfoundation.org'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">'admin'</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre>\n<p>This is great for many cases, however, a commonly desired paradigm is to be able\nto have the <tt>User.from_dict()</tt> class method be able to deserialize a\n<tt>SuperUser</tt> as well. This can be made possible through <em>model tagging</em>.</p>\n</div>\n</div>\n<div id=\"model-tagging\">\n<h2>Model tagging</h2>\n<p>Model tagging is a way to mark serialized data in order to show that it is a\nparticular <em>variant</em> of a model. Serde provides three types of model tagging,\nbut you can also define you own custom <tt>Tag</tt>. A <tt>Tag</tt> can be thought of in\nthe same way as a <tt>Field</tt> but instead of deserializing data into an attribute\non a model instance, it deserializes data into a model class.</p>\n<div id=\"internally-tagged\">\n<h3>Internally tagged</h3>\n<p>Internally tagged data stores a tag value inside the serialized data.</p>\n<p>Let us consider an example where we define a <tt>Pet</tt> model with a <tt>tag</tt>. We\ncan then subclass this model and deserialize arbitrary subclasses using the\ntagged model.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">serde</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">tags</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">Internal</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'species'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">hates_cats</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">hates_dogs</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">()</span>\n</pre>\n<p>We refer to the <tt>Dog</tt> and <tt>Cat</tt> subclasses as <em>variants</em> of <tt>Pet</tt>. When\nserializing all parent model tag serialization is done after field\nserialization.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Cat</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Fluffy'</span><span class=\"p\">,</span> <span class=\"n\">hates_dogs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'Fluffy'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'hates_dogs'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'species'</span><span class=\"p\">,</span> <span class=\"s1\">'__main__.Cat'</span><span class=\"p\">)])</span>\n</pre>\n<p>When deserializing, tag deserialization is done first to determine which model\nto use for the deserialization.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">milo</span> <span class=\"o\">=</span> <span class=\"n\">Pet</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Milo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'hates_cats'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'species'</span><span class=\"p\">:</span> <span class=\"s1\">'__main__.Dog'</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">milo</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">__main__</span><span class=\"o\">.</span><span class=\"n\">Dog</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">milo</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'Milo'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">milo</span><span class=\"o\">.</span><span class=\"n\">hates_cats</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>An invalid or missing tag will raise a <tt>ValidationError</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pet</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Milo'</span><span class=\"p\">,</span> <span class=\"s1\">'hates_cats'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"n\">serde</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">missing</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">expected</span> <span class=\"n\">tag</span> <span class=\"s1\">'species'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pet</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Duke'</span><span class=\"p\">,</span> <span class=\"s1\">'species'</span><span class=\"p\">:</span> <span class=\"s1\">'__main__.Horse'</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"n\">serde</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">variant</span> <span class=\"n\">found</span>\n</pre>\n</div>\n<div id=\"externally-tagged\">\n<h3>Externally tagged</h3>\n<p>Externally tagged data uses the tag value as a key and nests the content\nunderneath that key. All other processes behave similarly to the internally\ntagged example above.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">External</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">hates_cats</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Dog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Max'</span><span class=\"p\">,</span> <span class=\"n\">hates_cats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'__main__.Dog'</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'Max'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'hates_cats'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)]))])</span>\n</pre>\n</div>\n<div id=\"adjacently-tagged\">\n<h3>Adjacently tagged</h3>\n<p>Adjacently tagged data data stores the tag value and the content underneath two\nseparate keys. All other processes behave similarly to the internally tagged\nexample.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">Adjacent</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'species'</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s1\">'data'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">hates_cats</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Dog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Max'</span><span class=\"p\">,</span> <span class=\"n\">hates_cats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'species'</span><span class=\"p\">,</span> <span class=\"s1\">'__main__.Dog'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'Max'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'hates_cats'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)]))])</span>\n</pre>\n</div>\n<div id=\"abstract-models\">\n<h3>Abstract models</h3>\n<p>By default model tagging still allows deserialization of the base model. It is\ncommon to have this model be abstract. You can do this by setting the\n<tt>abstract</tt> Meta field to <tt>True</tt>. This will make it uninstantiatable and it\nwon\u2019t be included in the variant list during deserialization.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Fruit</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">abstract</span> <span class=\"n\">model</span> <span class=\"s1\">'Fruit'</span>\n</pre>\n</div>\n<div id=\"custom-tags\">\n<h3>Custom tags</h3>\n<p>It is possible to create your own custom tag class by subclassing any of\n<tt>tags.External</tt>, <tt>tags.Internal</tt>, <tt>tags.Adjacent</tt> or even the base\n<tt>tags.Tag</tt>. This will allow customization of how the variants are looked up,\nhow the tag values are generated for variants, and how the data is serialized.</p>\n<p>Consider an example where we use a class attribute <tt>code</tt> as the tag value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Custom</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">Internal</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">lookup_tag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">variant</span><span class=\"o\">.</span><span class=\"n\">code</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">...</span>         <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">Custom</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'code'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"n\">hates_cats</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Dog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Max'</span><span class=\"p\">,</span> <span class=\"n\">hates_cats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'Max'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'hates_cats'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">max</span> <span class=\"o\">=</span> <span class=\"n\">Pet</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Max'</span><span class=\"p\">,</span> <span class=\"s1\">'hates_cats'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">max</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">__main__</span><span class=\"o\">.</span><span class=\"n\">Dog</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">max</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'Max'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">max</span><span class=\"o\">.</span><span class=\"n\">hates_cats</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n</div>\n<div id=\"fields\">\n<h2>Fields</h2>\n<p>Fields do the work of serializing, deserializing, normalizing, and validating\nthe input values. Fields are always assigned to a model as <em>instances</em> , and\nthey support extra serialization, deserialization, normalization, and validation\nof values without having to subclass <tt>Field</tt>. For example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serde</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">validators</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">normalizers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">])</span>\n    <span class=\"n\">released</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">(</span>\n        <span class=\"n\">rename</span><span class=\"o\">=</span><span class=\"s1\">'release_date'</span><span class=\"p\">,</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Min</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1912</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))]</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>In the above example we define an <tt>Album</tt> class. The <tt>title</tt> field is of\ntype <cite>str</cite> , and we apply the <tt>str.strip</tt> normalizer to automatically strip\nthe input value when instantiating or deserializing the <tt>Album</tt>. The\n<tt>released</tt> field is of type <tt>datetime.date</tt> and we apply an extra validator\nto only accept dates after 15th April 1912. Note: the <tt>rename</tt> argument only\napplies to the serializing and deserializing of the data, the <tt>Album</tt> class\nwould still be instantiated using <tt><span class=\"pre\">Album(released=...)</span></tt>.</p>\n<p>If these methods of creating custom <tt>Field</tt> classes are not satisfactory, you\ncan always subclass a <tt>Field</tt> and override the relevant methods.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Percent</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Float</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Between</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">100.0</span><span class=\"p\">)(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"python-2-7-and-python-3-5-compatibility\">\n<h2>Python 2.7 and Python 3.5 compatibility</h2>\n<p>Class annotations were only added in Python 3.6, for this reason class\nattributes can be used for <tt>Field</tt> definitions for projects that require\ncompatibility for these versions. For example</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Artist</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n    <span class=\"n\">release_date</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n    <span class=\"n\">artist</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span><span class=\"n\">Artist</span><span class=\"p\">)</span>\n</pre>\n<p>is equivalent to</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Artist</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n    <span class=\"n\">release_date</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n    <span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span><span class=\"n\">Artist</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"model-states-and-processes\">\n<h2>Model states and processes</h2>\n<p>In Serde, there are two states that the data can be in:</p>\n<ul>\n<li>Serialized data</li>\n<li>Model instance</li>\n</ul>\n<p>There are five different processes that the data structure can go through when\nmoving between these two states.</p>\n<ul>\n<li>Deserialization happens when you create a model instance from a serialized\nversion using <tt>from_dict()</tt> or similar.</li>\n<li>Instantiation happens when you construct a model instance in Python using the\n<tt>__init__()</tt> constructor.</li>\n<li>Normalization happens after instantiation and after deserialization. This is\nusually a way to transform things before they are validated. For example: this\nis where an <tt>Optional</tt> field sets default values.</li>\n<li>Validation is where the model and fields values are validated. This happens\nafter normalization.</li>\n<li>Serialization is when you serialize a model instance to a supported\nserialization format using <tt>to_dict()</tt> or similar.</li>\n</ul>\n<p>The diagram below shows how the stages (uppercase) and processes (lowercase) fit\nin with each other.</p>\n<pre>                    +---------------+\n                    | Instantiation |\n                    +---------------+\n                            |\n                            v\n+---------------+   +---------------+\n|Deserialization|--&gt;| Normalization |\n+---------------+   +---------------+\n        ^                   |\n        |                   v\n        |           +---------------+\n        |           |   Validation  |\n        |           +---------------+\n        |                   |\n        |                   v\n+-------+-------+   +---------------+\n|SERIALIZED DATA|   | MODEL INSTANCE|\n+---------------+   +---------------+\n        ^                   |\n        |                   |\n+-------+-------+           |\n| Serialization |&lt;----------+\n+---------------+\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Serde is licensed under either of</p>\n<ul>\n<li>Apache License, Version 2.0 (<a href=\"LICENSE-APACHE\" rel=\"nofollow\">LICENSE-APACHE</a> or <a href=\"https://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">https://www.apache.org/licenses/LICENSE-2.0</a>)</li>\n<li>MIT License (<a href=\"LICENSE-MIT\" rel=\"nofollow\">LICENSE-MIT</a> or <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">https://opensource.org/licenses/MIT</a>)</li>\n</ul>\n<p>at your option.</p>\n</div>\n\n          </div>"}, "last_serial": 6797640, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "67277c7ec52c32c6558e2fa09c488d92", "sha256": "b23ee67f50bb898f5ceaefd63455b120f88083a1568be2b63e62cad4b49cafaf"}, "downloads": -1, "filename": "serde-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "67277c7ec52c32c6558e2fa09c488d92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 14999, "upload_time": "2018-10-27T15:06:25", "upload_time_iso_8601": "2018-10-27T15:06:25.770414Z", "url": "https://files.pythonhosted.org/packages/7c/ba/83fd35e6503e68d9970c9e712538fd171e95f934162ceb120bc98069c58e/serde-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c1aff4b63c5c3d23191234272a0563a", "sha256": "3647b4fbc7805d96fbda424958ee20bbae5230cd3c982b14c410dea04fba4df6"}, "downloads": -1, "filename": "serde-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3c1aff4b63c5c3d23191234272a0563a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 21649, "upload_time": "2018-10-27T15:06:27", "upload_time_iso_8601": "2018-10-27T15:06:27.696708Z", "url": "https://files.pythonhosted.org/packages/b8/c3/b29785e1d1dcabfdf5673f776836b6578c680979653aba8f436b05ec1e4f/serde-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "cffd5a9c7c6106b6c2ffe3d5acf014a7", "sha256": "9e18d2d594805ef1c456b65098ef5b137021f68edc47272671daf7f6caf53ba0"}, "downloads": -1, "filename": "serde-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cffd5a9c7c6106b6c2ffe3d5acf014a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15278, "upload_time": "2018-10-28T13:17:20", "upload_time_iso_8601": "2018-10-28T13:17:20.967552Z", "url": "https://files.pythonhosted.org/packages/32/b2/3c46c171e5534ff8b9806a1f9f9fc26d39ea84e60c7cff242fe24f12b211/serde-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "951dfcb5af27eb108e3b3eb4289914f4", "sha256": "524bfd8b7094496ff2d1ef9d32a677b7ed5f6b142725d865a35faf3ac3ca29ba"}, "downloads": -1, "filename": "serde-0.1.2.tar.gz", "has_sig": false, "md5_digest": "951dfcb5af27eb108e3b3eb4289914f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 22138, "upload_time": "2018-10-28T13:17:22", "upload_time_iso_8601": "2018-10-28T13:17:22.576340Z", "url": "https://files.pythonhosted.org/packages/ec/36/a2dbd28a3418f2ddc3c4d61d903a189d0428953a7e87c211b9ce9a0f7c79/serde-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "119a8c76242d8cfcdab8933ef94fec01", "sha256": "9cf1262a2f1484eed9ac6e8371dfe2e52bc1f5eb9bdb2414ec122ae4a627fd36"}, "downloads": -1, "filename": "serde-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "119a8c76242d8cfcdab8933ef94fec01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 17222, "upload_time": "2018-11-16T13:15:44", "upload_time_iso_8601": "2018-11-16T13:15:44.083325Z", "url": "https://files.pythonhosted.org/packages/48/f6/8c08e02e08541e7988d0c9ea04695e0f14f31eb9ddc7c24d082b7e011f8d/serde-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eccd5781fde2af1544c5d90d4bf97eb0", "sha256": "5d73d1a1d79c5a10c68ce69dfba9a5a5d72a1258589a994d57678a61a88528a8"}, "downloads": -1, "filename": "serde-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eccd5781fde2af1544c5d90d4bf97eb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 24711, "upload_time": "2018-11-16T13:15:46", "upload_time_iso_8601": "2018-11-16T13:15:46.340007Z", "url": "https://files.pythonhosted.org/packages/fc/13/ef6fdfc0367464a443b134ff3b4ef33d7d570b04047731d1eb9a38f232a1/serde-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a91078085a77168a28d49b359f362b4e", "sha256": "77c8e28729874c19cdd7cfc14dd1cacb381e0a7b7adadffc79ea637aed952b2b"}, "downloads": -1, "filename": "serde-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a91078085a77168a28d49b359f362b4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 18117, "upload_time": "2018-11-21T13:09:37", "upload_time_iso_8601": "2018-11-21T13:09:37.158088Z", "url": "https://files.pythonhosted.org/packages/e6/9e/81c4324bf2709f5af6d5602df7f24077155787f1a47c22a48265213c31c0/serde-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "135004c07b0f74abb63d99e5e0b9df79", "sha256": "9c10b99885094b3c298387b7f5d92b6917513199e70ec8b64953a32ea3180811"}, "downloads": -1, "filename": "serde-0.2.1.tar.gz", "has_sig": false, "md5_digest": "135004c07b0f74abb63d99e5e0b9df79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 26337, "upload_time": "2018-11-21T13:09:39", "upload_time_iso_8601": "2018-11-21T13:09:39.528949Z", "url": "https://files.pythonhosted.org/packages/b4/d8/d2d33c3c58bd5a6be7238418183d9935e013ab9623eff3833d9260876abd/serde-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "479b5783c7006bff031a1bcdf4d98f5d", "sha256": "b2d088f9a6cc7161c598efe159e8b3a2b921d095830518f386e4bb5016b67219"}, "downloads": -1, "filename": "serde-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "479b5783c7006bff031a1bcdf4d98f5d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17663, "upload_time": "2018-12-09T12:30:11", "upload_time_iso_8601": "2018-12-09T12:30:11.634166Z", "url": "https://files.pythonhosted.org/packages/13/97/2987a026421aae4411d8ea97f03c2473cb51b19d9b645ea4ed567943d445/serde-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9aa38b4ada771dd220a9a32fb2685e34", "sha256": "0825b41a01658c1b3979458a35b14a514ad89acf683d05dabacaada91c577041"}, "downloads": -1, "filename": "serde-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9aa38b4ada771dd220a9a32fb2685e34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 26472, "upload_time": "2018-12-09T12:30:14", "upload_time_iso_8601": "2018-12-09T12:30:14.014644Z", "url": "https://files.pythonhosted.org/packages/f2/e2/ffddde1a0b40f0e9f93055c358c442551eee820b6630c0a9193b2a15622e/serde-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b1fe20a4d8d49a3e5398d474e74e73ae", "sha256": "975ed4b4a2d664a844afb9e60204d164f6fb076238fa5b7be0edfa5a91056702"}, "downloads": -1, "filename": "serde-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1fe20a4d8d49a3e5398d474e74e73ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17915, "upload_time": "2018-12-17T11:07:52", "upload_time_iso_8601": "2018-12-17T11:07:52.070869Z", "url": "https://files.pythonhosted.org/packages/97/8a/6f20938d367bc72a63b8ec6affdd65e68e33d9ea1b73f1fd168cdb3c9b69/serde-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "853062f9c5210348bb85577f2e8b5fc3", "sha256": "5c65dc40e279c06358b7180eb9615383a3612e34a5b5112f24a99476ab849c91"}, "downloads": -1, "filename": "serde-0.3.1.tar.gz", "has_sig": false, "md5_digest": "853062f9c5210348bb85577f2e8b5fc3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 28044, "upload_time": "2018-12-17T11:08:01", "upload_time_iso_8601": "2018-12-17T11:08:01.833643Z", "url": "https://files.pythonhosted.org/packages/2c/45/c1151212816a35cce0ba1384d3f75effa2439bf97cf39df4f51f7c2d9757/serde-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "d404db45125ed39f827c1b74407c36f6", "sha256": "d4ed5ed5081382f580faadcd9ba0af9f8bcbd6a3196d66fe594bceb7fdcc14d3"}, "downloads": -1, "filename": "serde-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d404db45125ed39f827c1b74407c36f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17943, "upload_time": "2018-12-19T15:06:13", "upload_time_iso_8601": "2018-12-19T15:06:13.187138Z", "url": "https://files.pythonhosted.org/packages/9b/8e/a7ed81888191574aac3e855d48848ab6fdf0b269f338687853bef85e6500/serde-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c77221dbbb5cfe2b7e1ac04d44c3edc7", "sha256": "9ab1f85d8b71c8bf1a4cdc1254d344a41229784b2db727e72d1829d6ec8963f1"}, "downloads": -1, "filename": "serde-0.3.2.tar.gz", "has_sig": false, "md5_digest": "c77221dbbb5cfe2b7e1ac04d44c3edc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 28170, "upload_time": "2018-12-19T15:06:23", "upload_time_iso_8601": "2018-12-19T15:06:23.975754Z", "url": "https://files.pythonhosted.org/packages/33/94/404d81b6905709555f0417cf888e9335a3d1ab3aa71d9cfc5995f7a6062b/serde-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4c1d5e2fc36b9cfe37acb25b260112dd", "sha256": "19e5f4b191ce06709028781c5f08fa0294deb1e5738c82e94f47b8a24c7996aa"}, "downloads": -1, "filename": "serde-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c1d5e2fc36b9cfe37acb25b260112dd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18525, "upload_time": "2019-01-06T16:41:08", "upload_time_iso_8601": "2019-01-06T16:41:08.983751Z", "url": "https://files.pythonhosted.org/packages/09/34/5909d6215f4122e7b34a37d912758f2a6f73701160deea172a03183386ec/serde-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc48d04989d435100bbc47642efcbc09", "sha256": "fd4d91228ab2ae58fb766403c8e2f1b688c3989677a5980606c393de70044c3c"}, "downloads": -1, "filename": "serde-0.4.0.tar.gz", "has_sig": false, "md5_digest": "bc48d04989d435100bbc47642efcbc09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 29052, "upload_time": "2019-01-06T16:41:11", "upload_time_iso_8601": "2019-01-06T16:41:11.565043Z", "url": "https://files.pythonhosted.org/packages/e9/42/a246f3bd3a8a94942966b505c27223bdc4b95fa9978f6a55220fa30dfe98/serde-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "53979bd048adfedb0c2d9dad608820af", "sha256": "758631a1d5e2c3dd1f2906033e9c38b233888ca8fa940ac10df701ae90fd7de9"}, "downloads": -1, "filename": "serde-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53979bd048adfedb0c2d9dad608820af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18587, "upload_time": "2019-01-23T13:38:34", "upload_time_iso_8601": "2019-01-23T13:38:34.997996Z", "url": "https://files.pythonhosted.org/packages/62/59/3403cb27e28709d6cec676801b64cf2c6ce105593e5f1008da0f3f9fedd5/serde-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ee9a20b0d7f9aaa64f471978924d708", "sha256": "048a9772c3dd63a4e15f3c7a17bba13921eda540f0427a6cab06048f4554b156"}, "downloads": -1, "filename": "serde-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4ee9a20b0d7f9aaa64f471978924d708", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 29334, "upload_time": "2019-01-23T13:38:36", "upload_time_iso_8601": "2019-01-23T13:38:36.941354Z", "url": "https://files.pythonhosted.org/packages/73/b1/b846eda64eedbe26cfc12673c671c5835aae59d684d59116f05a4cc6e761/serde-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "d53a52331325fbd2e1422f16ca701c21", "sha256": "39228438cfc187a10c7399a50df283bad2b01f659c2330036eddf0d30f814af2"}, "downloads": -1, "filename": "serde-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d53a52331325fbd2e1422f16ca701c21", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 19529, "upload_time": "2019-01-29T13:22:11", "upload_time_iso_8601": "2019-01-29T13:22:11.551936Z", "url": "https://files.pythonhosted.org/packages/6c/e6/a07a524d837947f55a43b021d2bbf0486a8e35185a0ed01a206fdd08ab61/serde-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e60127352bd7bed5648b9aa44944b08", "sha256": "b9d0eee45f186cda052df0dd7ab520d70011b3727da7f11b50ebbd7b1276c02e"}, "downloads": -1, "filename": "serde-0.5.0.tar.gz", "has_sig": false, "md5_digest": "6e60127352bd7bed5648b9aa44944b08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 31099, "upload_time": "2019-01-29T13:22:13", "upload_time_iso_8601": "2019-01-29T13:22:13.405293Z", "url": "https://files.pythonhosted.org/packages/3a/80/01538b0ec5fbf8461f6c717a71405819c5d94f99edbbc233a4a44b52732b/serde-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "5f6bc0f88ae03571793da8dcff2106d6", "sha256": "e9f3cb11d6d762f09bff99e08acca0c4e602a47386ceb0d6288862d45668b982"}, "downloads": -1, "filename": "serde-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f6bc0f88ae03571793da8dcff2106d6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 19763, "upload_time": "2019-01-29T14:06:00", "upload_time_iso_8601": "2019-01-29T14:06:00.471440Z", "url": "https://files.pythonhosted.org/packages/5d/2c/c9fca0881df51f035e64defae41bcc56bc2748bb6dc7b1e1dcf4e136dd3b/serde-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97cfac309cb849902f5f8d921944d16f", "sha256": "b9b5469312974f6d40707e9208a718cf2f42adc18393cba7b7c8eed681f82088"}, "downloads": -1, "filename": "serde-0.5.1.tar.gz", "has_sig": false, "md5_digest": "97cfac309cb849902f5f8d921944d16f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 31382, "upload_time": "2019-01-29T14:06:03", "upload_time_iso_8601": "2019-01-29T14:06:03.132911Z", "url": "https://files.pythonhosted.org/packages/84/b4/a663000964280f0ce4ce9458a9f9cbd9101a429d85d4e63a9291f652e429/serde-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c6041ad5ab642bef54085c3d867c5870", "sha256": "f7177359c4dbe02b9b27320c9f4afd0f22b5f78a31602edbb6c2a0d19849ae7a"}, "downloads": -1, "filename": "serde-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c6041ad5ab642bef54085c3d867c5870", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 19849, "upload_time": "2019-02-04T06:19:55", "upload_time_iso_8601": "2019-02-04T06:19:55.914240Z", "url": "https://files.pythonhosted.org/packages/e9/d6/1667623f9bdc158a0e30d5b6d23cd11a30d26c719a1bbd6fbd8aa9546784/serde-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fe6db7b81ac4894819c4ebf5895fe1a", "sha256": "5481ef3bf8d9c4ace3fca8401a7021f52c0fd60350f0407163e6088042661bb2"}, "downloads": -1, "filename": "serde-0.5.2.tar.gz", "has_sig": false, "md5_digest": "6fe6db7b81ac4894819c4ebf5895fe1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 31737, "upload_time": "2019-02-04T06:19:58", "upload_time_iso_8601": "2019-02-04T06:19:58.961864Z", "url": "https://files.pythonhosted.org/packages/41/08/a30f295bacbd2d85d9ec258a2b40509e72bb4abd9e9bed5647465475c824/serde-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "bbcd37090e42c130097584f0df82a047", "sha256": "fb04810b7a8a71c55fe212e1c48d045c636bb2418001842a07a410c0281a9675"}, "downloads": -1, "filename": "serde-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bbcd37090e42c130097584f0df82a047", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23179, "upload_time": "2019-03-30T10:23:59", "upload_time_iso_8601": "2019-03-30T10:23:59.195707Z", "url": "https://files.pythonhosted.org/packages/ae/17/1bc94a4c156f676e227650427c3c05236022b3e55baa7df527e3d75cd81c/serde-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6896ec20a56d8608e5ff8bf9f32ee810", "sha256": "a32f33d68e1f86566e60622b83c684b4fe6e73e280faa3fb58063b10ef4511d7"}, "downloads": -1, "filename": "serde-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6896ec20a56d8608e5ff8bf9f32ee810", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 21985, "upload_time": "2019-03-30T10:24:01", "upload_time_iso_8601": "2019-03-30T10:24:01.042725Z", "url": "https://files.pythonhosted.org/packages/30/96/b5f1770d41bb4a53de3566b18a95c86f7951b88bef171fee63bc6c095cfd/serde-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "93d82fbc745adea6b2160ed3d2a7d8dd", "sha256": "ead230d7f5258edd46dffe4a68afb3bd619c17f02a91520c38cfac9474df2db5"}, "downloads": -1, "filename": "serde-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "93d82fbc745adea6b2160ed3d2a7d8dd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 24117, "upload_time": "2019-04-04T10:52:22", "upload_time_iso_8601": "2019-04-04T10:52:22.149381Z", "url": "https://files.pythonhosted.org/packages/a7/9b/2b3f264736b34782152b47379c1e8032be9db56319eecaf9182489a598b2/serde-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5034c4565c3beca027371a4288755b0", "sha256": "38af0d57c4ad82540c6e0218ac84251427d0dba2f23de3975ba093352d96a418"}, "downloads": -1, "filename": "serde-0.6.1.tar.gz", "has_sig": false, "md5_digest": "b5034c4565c3beca027371a4288755b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22854, "upload_time": "2019-04-04T10:52:24", "upload_time_iso_8601": "2019-04-04T10:52:24.192156Z", "url": "https://files.pythonhosted.org/packages/5f/43/64bb6623524301cab69c521d9c4d9d0f5fe7a2451a9757eab2662feefa15/serde-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "d49b97bd76485bf0c6ff9df19048de35", "sha256": "065b0742e8bf5fc517c8fe93864ab5d46b6c3b8c726a5c6826b56464ee1903ea"}, "downloads": -1, "filename": "serde-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d49b97bd76485bf0c6ff9df19048de35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24451, "upload_time": "2019-07-20T15:53:03", "upload_time_iso_8601": "2019-07-20T15:53:03.865810Z", "url": "https://files.pythonhosted.org/packages/9e/29/89e92e533a3a9d22efbf6663006ba1fab24e722b345ba095668faa3df65a/serde-0.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa1c704183c85a0393c38be3bf5e39d7", "sha256": "8aa308e93004cd98cd9cfffd619bfbe0585e5cfab02bfa6da10a1ebf518d943d"}, "downloads": -1, "filename": "serde-0.6.2.tar.gz", "has_sig": false, "md5_digest": "aa1c704183c85a0393c38be3bf5e39d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 23301, "upload_time": "2019-07-20T15:53:06", "upload_time_iso_8601": "2019-07-20T15:53:06.233569Z", "url": "https://files.pythonhosted.org/packages/28/b4/2aa5c0fe876a0c435f3698749e8df9bad529e0a8c882d9da33ecbde5739d/serde-0.6.2.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "8346257caa85db79e8d487b713366a89", "sha256": "c31b3a7968d00b4c73af37283681f924c8724ebac90a8f976ec504686df8267c"}, "downloads": -1, "filename": "serde-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8346257caa85db79e8d487b713366a89", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 23271, "upload_time": "2019-09-08T13:02:26", "upload_time_iso_8601": "2019-09-08T13:02:26.934550Z", "url": "https://files.pythonhosted.org/packages/15/b6/a131df3ddd954531cfc8ba8fe1a6b3518d11666d7d1378c9d41c9f065f40/serde-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a117ca2cc6a0ab77f01626df9a6c79af", "sha256": "bd43c8368a7fd122ce57031c1c53f2739761b0a19c02c25b3ac5299f7156c632"}, "downloads": -1, "filename": "serde-0.7.0.tar.gz", "has_sig": false, "md5_digest": "a117ca2cc6a0ab77f01626df9a6c79af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26453, "upload_time": "2019-09-08T12:58:25", "upload_time_iso_8601": "2019-09-08T12:58:25.014796Z", "url": "https://files.pythonhosted.org/packages/e2/e6/be0e32b72d85fb6efd504e8d6d586c233f0d0c28a96f37e933e910f0ddd2/serde-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "3e75479d9473a22e3a2b5153c3f37d61", "sha256": "57e0fa4e6cd48f22620cccb6d5ba5a75d7ec59879af90544baa516cdfd460c67"}, "downloads": -1, "filename": "serde-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e75479d9473a22e3a2b5153c3f37d61", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24044, "upload_time": "2019-09-26T06:46:01", "upload_time_iso_8601": "2019-09-26T06:46:01.053533Z", "url": "https://files.pythonhosted.org/packages/cf/9a/6723785a05868e780decac567981e949cc09bf275f9c33546705a592b204/serde-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3beb803f79db9be565e3024cbbca1ec", "sha256": "7a4820b17914c65afc1772fed7c5112018c32dec123b36b9d87b4be06a3821ba"}, "downloads": -1, "filename": "serde-0.7.1.tar.gz", "has_sig": false, "md5_digest": "e3beb803f79db9be565e3024cbbca1ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 27448, "upload_time": "2019-09-26T06:46:03", "upload_time_iso_8601": "2019-09-26T06:46:03.542010Z", "url": "https://files.pythonhosted.org/packages/3f/e6/c38dcf653521e4666d0e787b5bd40026b099d4c27f25416b6528f9ebf366/serde-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "fe2bb92653025fe3b6ab82fc0d96e26a", "sha256": "56b1288095b7d9a4aa9c2c5e551347f9030e373ff470ad2688a95010a23b7260"}, "downloads": -1, "filename": "serde-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe2bb92653025fe3b6ab82fc0d96e26a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24040, "upload_time": "2019-12-02T07:55:26", "upload_time_iso_8601": "2019-12-02T07:55:26.808194Z", "url": "https://files.pythonhosted.org/packages/85/72/93158cf23812fc8111a122ca407b55df540138ffbec1da5e0c14e3748470/serde-0.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a06dd792e8de1a6b2f459330a196fd0", "sha256": "86308eab9b5813e1f3f8aabf992a1c45a29ba794c1c01e2f67a68ac7a193d5b6"}, "downloads": -1, "filename": "serde-0.7.2.tar.gz", "has_sig": false, "md5_digest": "2a06dd792e8de1a6b2f459330a196fd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 27489, "upload_time": "2019-12-02T07:55:28", "upload_time_iso_8601": "2019-12-02T07:55:28.758028Z", "url": "https://files.pythonhosted.org/packages/88/73/8461a2f253db712440687155e2015d444596f5dd24d46f189079e043dd1c/serde-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "ac89e5027eb2f9c4f6c5576ed2e2934a", "sha256": "65f8ec0bbe47a9f7cf9042491714f61f433f8082460fea85fe8b1478220b6469"}, "downloads": -1, "filename": "serde-0.7.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac89e5027eb2f9c4f6c5576ed2e2934a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24061, "upload_time": "2020-01-12T15:48:51", "upload_time_iso_8601": "2020-01-12T15:48:51.795772Z", "url": "https://files.pythonhosted.org/packages/b4/45/039bc7e5990f3a45bc918fb19800584feccf2f2ff85842f1e190bfa3a1e0/serde-0.7.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be7b4c66744af5c233549a8ada114475", "sha256": "b11e1ac027eeb46ee01c705a6d694dbf1e6973333b8d23da40c2e949da964da3"}, "downloads": -1, "filename": "serde-0.7.3.tar.gz", "has_sig": false, "md5_digest": "be7b4c66744af5c233549a8ada114475", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 27519, "upload_time": "2020-01-12T15:48:54", "upload_time_iso_8601": "2020-01-12T15:48:54.463322Z", "url": "https://files.pythonhosted.org/packages/f0/96/559cd17ab36050857e82b8b9f2faf456bd56504fd4b265157cb230507783/serde-0.7.3.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "8bdeaebb60d4b3ead6f8ea83b45b722d", "sha256": "513ebb8a0d68cb714794c2ac4436319846d4e412c3679fb768dfafd2e778ccdc"}, "downloads": -1, "filename": "serde-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8bdeaebb60d4b3ead6f8ea83b45b722d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26297, "upload_time": "2020-03-12T07:26:44", "upload_time_iso_8601": "2020-03-12T07:26:44.779085Z", "url": "https://files.pythonhosted.org/packages/d8/1e/96cc89ed59c62a2f4216f6085faa85dc530a47d414b66faaa5dd93ff3187/serde-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19bf672c08de7ba525290c514bc1fd0f", "sha256": "3c0e4a29ae1992be1843858d0bafe7fa19d464ebecfcb460c5045215d1b58c33"}, "downloads": -1, "filename": "serde-0.8.0.tar.gz", "has_sig": false, "md5_digest": "19bf672c08de7ba525290c514bc1fd0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26062, "upload_time": "2020-03-12T07:26:46", "upload_time_iso_8601": "2020-03-12T07:26:46.702190Z", "url": "https://files.pythonhosted.org/packages/9d/01/7228f223eee1e5dd40f288029d9c8fcc81366b8eccdedb8776c24fa2495c/serde-0.8.0.tar.gz", "yanked": false}], "0.8.0b1": [{"comment_text": "", "digests": {"md5": "e6ca19462f04060ff9e21f211200c65f", "sha256": "00aabd88961aaa822e421360118a1d9b8d05a1c960cbbab7b9fccd6018a8617f"}, "downloads": -1, "filename": "serde-0.8.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6ca19462f04060ff9e21f211200c65f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 25945, "upload_time": "2020-02-15T16:58:18", "upload_time_iso_8601": "2020-02-15T16:58:18.673592Z", "url": "https://files.pythonhosted.org/packages/1b/7f/c7c4181de5ca14c92029dbe69f76acbd443653c6b38179bb6d6bbbb5a22c/serde-0.8.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adc92024d8c98ed411e859660fa34af9", "sha256": "b9620d1bb3b3a90842eaf4757ec3242cec68c67c5ad65ad41e3022e3c37ce0ce"}, "downloads": -1, "filename": "serde-0.8.0b1.tar.gz", "has_sig": false, "md5_digest": "adc92024d8c98ed411e859660fa34af9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 25723, "upload_time": "2020-02-15T16:58:21", "upload_time_iso_8601": "2020-02-15T16:58:21.142346Z", "url": "https://files.pythonhosted.org/packages/9f/c0/7b6620a1472131f02a4ebbad1aef6a8dbd973997deab08769f8046682093/serde-0.8.0b1.tar.gz", "yanked": false}], "0.8.0b2": [{"comment_text": "", "digests": {"md5": "6f106d656b2ac4ad213049c1df6d05e0", "sha256": "9b30799909588748173c1b4550a60d09f180e39c4c090a720b1effae5227cac3"}, "downloads": -1, "filename": "serde-0.8.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f106d656b2ac4ad213049c1df6d05e0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26347, "upload_time": "2020-03-02T13:50:54", "upload_time_iso_8601": "2020-03-02T13:50:54.685964Z", "url": "https://files.pythonhosted.org/packages/da/38/253ad946fe3b82de9a06b7cd4081628ee4d5214ab356d7e55d42a62f3eeb/serde-0.8.0b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf9920d5dfea4fc1963d07c29b550dbb", "sha256": "f92c21a8314a001187f643ba23259c3d15518ac590f09d47467d1f6f6dcd8eec"}, "downloads": -1, "filename": "serde-0.8.0b2.tar.gz", "has_sig": false, "md5_digest": "cf9920d5dfea4fc1963d07c29b550dbb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26098, "upload_time": "2020-03-02T13:50:56", "upload_time_iso_8601": "2020-03-02T13:50:56.343066Z", "url": "https://files.pythonhosted.org/packages/8a/d4/ca62131e024b14c2d3af21e026584ad503b58edb441187f8b38dd7c1ebd8/serde-0.8.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8bdeaebb60d4b3ead6f8ea83b45b722d", "sha256": "513ebb8a0d68cb714794c2ac4436319846d4e412c3679fb768dfafd2e778ccdc"}, "downloads": -1, "filename": "serde-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8bdeaebb60d4b3ead6f8ea83b45b722d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26297, "upload_time": "2020-03-12T07:26:44", "upload_time_iso_8601": "2020-03-12T07:26:44.779085Z", "url": "https://files.pythonhosted.org/packages/d8/1e/96cc89ed59c62a2f4216f6085faa85dc530a47d414b66faaa5dd93ff3187/serde-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19bf672c08de7ba525290c514bc1fd0f", "sha256": "3c0e4a29ae1992be1843858d0bafe7fa19d464ebecfcb460c5045215d1b58c33"}, "downloads": -1, "filename": "serde-0.8.0.tar.gz", "has_sig": false, "md5_digest": "19bf672c08de7ba525290c514bc1fd0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 26062, "upload_time": "2020-03-12T07:26:46", "upload_time_iso_8601": "2020-03-12T07:26:46.702190Z", "url": "https://files.pythonhosted.org/packages/9d/01/7228f223eee1e5dd40f288029d9c8fcc81366b8eccdedb8776c24fa2495c/serde-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:20 2020"}