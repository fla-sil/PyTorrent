{"info": {"author": "Logan Raarup", "author_email": "logan@logan.dk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "<p align=\"center\">\n  <img src=\"https://logandk.github.io/serverless-wsgi/assets/header.svg\">\n</p>\n\n[![npm package](https://nodei.co/npm/serverless-wsgi.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/serverless-wsgi/)\n\n[![serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com)\n[![Build Status](https://travis-ci.org/logandk/serverless-wsgi.png?branch=master)](https://travis-ci.org/logandk/serverless-wsgi)\n[![Coverage Status](https://codecov.io/gh/logandk/serverless-wsgi/branch/master/graph/badge.svg)](https://codecov.io/gh/logandk/serverless-wsgi)\n[![Dependency Status](https://david-dm.org/logandk/serverless-wsgi.png)](https://david-dm.org/logandk/serverless-wsgi)\n[![Dev Dependency Status](https://david-dm.org/logandk/serverless-wsgi/dev-status.png)](https://david-dm.org/logandk/serverless-wsgi?type=dev)\n\nA Serverless v1.x plugin to build your deploy Python WSGI applications using Serverless. Compatible\nWSGI application frameworks include Flask, Django and Pyramid - for a complete list, see:\nhttp://wsgi.readthedocs.io/en/latest/frameworks.html.\n\n### Features\n\n- Transparently converts API Gateway and ALB requests to and from standard WSGI requests\n- Supports anything you'd expect from WSGI such as redirects, cookies, file uploads etc.\n- Automatically downloads Python packages that you specify in `requirements.txt` and deploys them along with your application\n- Convenient `wsgi serve` command for serving your application locally during development\n- Includes CLI commands for remote execution of Python code (`wsgi exec`), shell commands (`wsgi command`), Flask CLI commands (`wsgi flask`) and Django management commands (`wsgi manage`)\n\n## Install\n\n```\nsls plugin install -n serverless-wsgi\n```\n\nThis will automatically add the plugin to `package.json` and the plugins section of `serverless.yml`.\n\n## Flask configuration example\n\n<p align=\"center\">\n  <img src=\"https://logandk.github.io/serverless-wsgi/assets/hello-world.svg\">\n</p>\n\nThis example assumes that you have intialized your application as `app` inside `api.py`.\n\n```\nproject\n\u251c\u2500\u2500 api.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 serverless.yml\n```\n\n### api.py\n\nA regular Flask application.\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route(\"/cats\")\ndef cats():\n    return \"Cats\"\n\n\n@app.route(\"/dogs/<id>\")\ndef dog(id):\n    return \"Dog\"\n```\n\n### serverless.yml\n\nLoad the plugin and set the `custom.wsgi.app` configuration in `serverless.yml` to the\nmodule path of your Flask application.\n\nAll functions that will use WSGI need to have `wsgi_handler.handler` set as the Lambda handler and\nuse the default `lambda-proxy` integration for API Gateway. This configuration example treats\nAPI Gateway as a transparent proxy, passing all requests directly to your Flask application,\nand letting the application handle errors, 404s etc.\n\n_Note: The WSGI handler was called `wsgi.handler` earlier, but was renamed to `wsgi_handler.handler`\nin `1.7.0`. The old name is still supported but using it will cause a deprecation warning._\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-wsgi\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n\ncustom:\n  wsgi:\n    app: api.app\n```\n\n### requirements.txt\n\nAdd Flask to the application bundle.\n\n```\nFlask==1.0.2\n```\n\n## Deployment\n\nSimply run the serverless deploy command as usual:\n\n```\n$ sls deploy\nServerless: Using Python specified in \"runtime\": python3.6\nServerless: Packaging Python WSGI handler...\nServerless: Packaging required Python packages...\nServerless: Linking required Python packages...\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Unlinking required Python packages...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service .zip file to S3 (864.57 KB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n..............\nServerless: Stack update finished...\n```\n\n## Other frameworks\n\nSet `custom.wsgi.app` in `serverless.yml` according to your WSGI callable:\n\n- For Pyramid, use [make_wsgi_app](http://docs.pylonsproject.org/projects/pyramid/en/latest/api/config.html#pyramid.config.Configurator.make_wsgi_app) to intialize the callable\n- Django is configured for WSGI by default, set the callable to `<project_name>.wsgi.application`. See https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/ for more information.\n\n## Usage\n\n### Automatic requirement packaging\n\nYou'll need to include any packages that your application uses in the bundle\nthat's deployed to AWS Lambda. This plugin helps you out by doing this automatically,\nas long as you specify your required packages in a `requirements.txt` file in the root\nof your Serverless service path:\n\n```\nFlask==1.0.2\nrequests==2.21.0\n```\n\nFor more information, see https://pip.pypa.io/en/latest/user_guide/#requirements-files.\n\nThe `serverless-wsgi` plugin itself depends on `werkzeug` and will package it automatically,\neven if `werkzeug` is not present in your `requirements.txt`.\n\nYou can use the requirement packaging functionality of _serverless-wsgi_ without the WSGI\nhandler itself by including the plugin in your `serverless.yml` configuration, without specifying\nthe `custom.wsgi.app` setting. This will omit the WSGI handler from the package, but include\nany requirements specified in `requirements.txt`.\n\nIf you don't want to use automatic requirement packaging you can set `custom.wsgi.packRequirements` to false:\n\n```yaml\ncustom:\n  wsgi:\n    app: api.app\n    packRequirements: false\n```\n\nIn order to pass additional arguments to `pip` when installing requirements, the `pipArgs` configuration\noption is available:\n\n```yaml\ncustom:\n  wsgi:\n    app: api.app\n    pipArgs: --no-deps\n```\n\nFor a more advanced approach to packaging requirements, consider using https://github.com/UnitedIncome/serverless-python-requirements.\nWhen the `serverless-python-requirements` is added to `serverless.yml`, the `packRequirements` option\nis set to `false` by default.\n\nIf you have `packRequirements` set to `false`, or if you use `serverless-python-requirements`, remember to add\n`werkzeug` explicitly in your `requirements.txt`.\n\n### Python version\n\nPython is used for packaging requirements and serving the app when invoking `sls wsgi serve`. By\ndefault, the current runtime setting is expected to be the name of the Python binary in `PATH`,\nfor instance `python3.6`. If this is not the name of your Python binary, override it using the\n`pythonBin` option:\n\n```yaml\ncustom:\n  wsgi:\n    app: api.app\n    pythonBin: python3\n```\n\n### Local server\n\n<p align=\"center\">\n  <img src=\"https://logandk.github.io/serverless-wsgi/assets/serve.svg\">\n</p>\n\nFor convenience, a `sls wsgi serve` command is provided to run your WSGI application\nlocally. This command requires the `werkzeug` Python package to be installed,\nand acts as a simple wrapper for starting werkzeug's built-in HTTP server.\n\nBy default, the server will start on port 5000.\n\n```\n$ sls wsgi serve\n * Running on http://localhost:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n```\n\nConfigure the port using the `-p` parameter:\n\n```\n$ sls wsgi serve -p 8000\n * Running on http://localhost:8000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n```\n\nWhen running locally, an environment variable named `IS_OFFLINE` will be set to `True`.\nSo, if you want to know when the application is running locally, check `os.environ[\"IS_OFFLINE\"]`.\n\n### Remote command execution\n\n<p align=\"center\">\n  <img src=\"https://logandk.github.io/serverless-wsgi/assets/command.svg\">\n</p>\n\nThe `wsgi exec` command lets you execute Python code remotely:\n\n```\n$ sls wsgi exec -c \"import math; print((1 + math.sqrt(5)) / 2)\"\n1.618033988749895\n\n$ cat count.py\nfor i in range(3):\n    print(i)\n\n$ sls wsgi exec -f count.py\n0\n1\n2\n```\n\nThe `wsgi command` command lets you execute shell commands remotely:\n\n```\n$ sls wsgi command -c \"pwd\"\n/var/task\n\n$ cat script.sh\n#!/bin/bash\necho \"dlrow olleh\" | rev\n\n$ sls wsgi command -f script.sh\nhello world\n```\n\nThe `wsgi flask` command lets you execute [Flask CLI custom commands](http://flask.pocoo.org/docs/latest/cli/#custom-commands) remotely:\n\n```\n$ sls wsgi flask -c \"my command\"\nHello world!\n```\n\nThe `wsgi manage` command lets you execute Django management commands remotely:\n\n```\n$ sls wsgi manage -c \"check --list-tags\"\nadmin\ncaches\ndatabase\nmodels\nstaticfiles\ntemplates\nurls\n```\n\nAll commands have `local` equivalents that let you run commands through `sls invoke local` rather\nthan `sls invoke`, i.e. on the local machine instead of through Lambda. The `local` commands (`sls wsgi command local`,\n`sls wsgi exec local`, `sls wsgi flask local` and `sls wsgi manage local`) take the same arguments\nas their remote counterparts documented above.\n\n### Explicit routes\n\nIf you'd like to be explicit about which routes and HTTP methods should pass through to your\napplication, see the following example:\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-wsgi\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http:\n          path: cats\n          method: get\n          integration: lambda-proxy\n      - http:\n          path: dogs/{id}\n          method: get\n          integration: lambda-proxy\n\ncustom:\n  wsgi:\n    app: api.app\n```\n\n### Custom domain names\n\nIf you use custom domain names with API Gateway, you might have a base path that is\nat the beginning of your path, such as the stage (`/dev`, `/stage`, `/prod`). In this case, set\nthe `API_GATEWAY_BASE_PATH` environment variable to let `serverless-wsgi` know.\n\nThe example below uses the [serverless-domain-manager](https://github.com/amplify-education/serverless-domain-manager)\nplugin to handle custom domains in API Gateway:\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python3.6\n  environment:\n    API_GATEWAY_BASE_PATH: ${self:custom.customDomain.basePath}\n\nplugins:\n  - serverless-wsgi\n  - serverless-domain-manager\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n\ncustom:\n  wsgi:\n    app: api.app\n  customDomain:\n    basePath: ${opt:stage}\n    domainName: mydomain.name.com\n    stage: ${opt:stage}\n    createRoute53Record: true\n```\n\n### Using CloudFront\n\nIf you're configuring CloudFront manually in front of your API and setting\nthe Path in the CloudFront Origin to include your stage name, you'll need\nto strip it out from the path supplied to WSGI. This is so that your app\ndoesn't generate URLs starting with `/production`.\n\nPass the `STRIP_STAGE_PATH=yes` environment variable to your application\nto set this:\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python3.6\n  environment:\n    STRIP_STAGE_PATH: yes\n```\n\n### File uploads\n\nIn order to accept file uploads from HTML forms, make sure to add `multipart/form-data` to\nthe list of content types with _Binary Support_ in your API Gateway API. The\n[serverless-apigw-binary](https://github.com/maciejtreder/serverless-apigw-binary)\nServerless plugin can be used to automate this process.\n\nKeep in mind that, when building Serverless applications, uploading\n[directly to S3](http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html)\nfrom the browser is usually the preferred approach.\n\n### Raw context and event\n\nThe raw context and event from AWS Lambda are both accessible through the WSGI\nrequest. The following example shows how to access them when using Flask:\n\n```python\nfrom flask import Flask, request\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    print(request.environ['serverless.context'])\n    print(request.environ['serverless.event'])\n```\n\n### Text MIME types\n\nBy default, all MIME types starting with `text/` and the following whitelist are sent\nthrough API Gateway in plain text. All other MIME types will have their response body\nbase64 encoded (and the `isBase64Encoded` API Gateway flag set) in order to be\ndelivered by API Gateway as binary data (remember to add any binary MIME types that\nyou're using to the _Binary Support_ list in API Gateway).\n\nThis is the default whitelist of plain text MIME types:\n\n- `application/json`\n- `application/javascript`\n- `application/xml`\n- `application/vnd.api+json`\n- `image/svg+xml`\n\nIn order to add additional plain text MIME types to this whitelist, use the\n`textMimeTypes` configuration option:\n\n```yaml\ncustom:\n  wsgi:\n    app: api.app\n    textMimeTypes:\n      - application/custom+json\n      - application/vnd.company+json\n```\n\n### Preventing cold starts\n\nCommon ways to keep lambda functions warm include [scheduled events](https://serverless.com/framework/docs/providers/aws/events/schedule/)\nand the [WarmUP plugin](https://github.com/FidelLimited/serverless-plugin-warmup). Both these event sources\nare supported by default and will be ignored by `serverless-wsgi`.\n\n### Alternative directory structure\n\nIf you have several functions in `serverless.yml` and want to organize them in\ndirectories, e.g.:\n\n```\nproject\n\u251c\u2500\u2500 web\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 serverless.yml\n\u2514\u2500\u2500 another_function.py\n```\n\nIn this case, tell `serverless-wsgi` where to find the handler by prepending the\ndirectory:\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python3.6\n\nplugins:\n  - serverless-wsgi\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n\n  another_function:\n    handler: another_function.handler\n\ncustom:\n  wsgi:\n    app: web/api.app\n```\n\nRequirements will now be installed into `web/`, rather than at in the service root directory.\n\nThe same rule applies when using the `individually: true` flag in the `package` settings, together\nwith the `module` option provided by `serverless-python-requirements`. In that case, both the requirements\nand the WSGI handler will be installed into `web/`, if the function is configured with `module: \"web\"`.\n\n## Usage without Serverless\n\nThe AWS API Gateway to WSGI mapping module is available on PyPI in the\n`serverless-wsgi` package.\n\nUse this package if you need to deploy Python Lambda functions to handle\nAPI Gateway events directly, without using the Serverless framework.\n\n```\npip install serverless-wsgi\n```\n\nInitialize your WSGI application and in your Lambda event handler, call\nthe request mapper:\n\n```python\nimport app  # Replace with your actual application\nimport serverless_wsgi\n\n# If you need to send additional content types as text, add then directly\n# to the whitelist:\n#\n# serverless_wsgi.TEXT_MIME_TYPES.append(\"application/custom+json\")\n\ndef handler(event, context):\n    return serverless_wsgi.handle_request(app.app, event, context)\n```\n\n# Thanks\n\nThanks to [Zappa](https://github.com/Miserlou/Zappa), which has been both the\ninspiration and source of several implementations that went into this project.\n\nThanks to [chalice](https://github.com/awslabs/chalice) for the\nrequirement packaging implementation.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/logandk/serverless-wsgi", "keywords": "wsgi serverless aws lambda api gateway apigw flask django pyramid", "license": "", "maintainer": "", "maintainer_email": "", "name": "serverless-wsgi", "package_url": "https://pypi.org/project/serverless-wsgi/", "platform": "", "project_url": "https://pypi.org/project/serverless-wsgi/", "project_urls": {"Homepage": "https://github.com/logandk/serverless-wsgi"}, "release_url": "https://pypi.org/project/serverless-wsgi/1.7.4/", "requires_dist": ["werkzeug"], "requires_python": "", "summary": "Amazon AWS API Gateway WSGI wrapper", "version": "1.7.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5ec16d474193ecbdbbe217ad07487b3230d22c2/68747470733a2f2f6c6f67616e646b2e6769746875622e696f2f7365727665726c6573732d777367692f6173736574732f6865616465722e737667\">\n</p>\n<p><a href=\"https://nodei.co/npm/serverless-wsgi/\" rel=\"nofollow\"><img alt=\"npm package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2ca75693ab1ce0f20cd1ad01189eb37b323f57c/68747470733a2f2f6e6f6465692e636f2f6e706d2f7365727665726c6573732d777367692e706e673f646f776e6c6f6164733d7472756526646f776e6c6f616452616e6b3d747275652673746172733d74727565\"></a></p>\n<p><a href=\"http://www.serverless.com\" rel=\"nofollow\"><img alt=\"serverless\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79423c54cfb61aa126ef32722f62a4a6846e9358/687474703a2f2f7075626c69632e7365727665726c6573732e636f6d2f6261646765732f76332e737667\"></a>\n<a href=\"https://travis-ci.org/logandk/serverless-wsgi\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68159eacc2666506168b2675f22337f5d063effe/68747470733a2f2f7472617669732d63692e6f72672f6c6f67616e646b2f7365727665726c6573732d777367692e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/logandk/serverless-wsgi\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6b32162ec4b6b6d25e31aef88e3b904001c6a4c/68747470733a2f2f636f6465636f762e696f2f67682f6c6f67616e646b2f7365727665726c6573732d777367692f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://david-dm.org/logandk/serverless-wsgi\" rel=\"nofollow\"><img alt=\"Dependency Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/511599088ef792bd95760e5768f8d20a0392fcdb/68747470733a2f2f64617669642d646d2e6f72672f6c6f67616e646b2f7365727665726c6573732d777367692e706e67\"></a>\n<a href=\"https://david-dm.org/logandk/serverless-wsgi?type=dev\" rel=\"nofollow\"><img alt=\"Dev Dependency Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/365d212591079c3445bbbc2cb5956d0a50c1ed3f/68747470733a2f2f64617669642d646d2e6f72672f6c6f67616e646b2f7365727665726c6573732d777367692f6465762d7374617475732e706e67\"></a></p>\n<p>A Serverless v1.x plugin to build your deploy Python WSGI applications using Serverless. Compatible\nWSGI application frameworks include Flask, Django and Pyramid - for a complete list, see:\n<a href=\"http://wsgi.readthedocs.io/en/latest/frameworks.html\" rel=\"nofollow\">http://wsgi.readthedocs.io/en/latest/frameworks.html</a>.</p>\n<h3>Features</h3>\n<ul>\n<li>Transparently converts API Gateway and ALB requests to and from standard WSGI requests</li>\n<li>Supports anything you'd expect from WSGI such as redirects, cookies, file uploads etc.</li>\n<li>Automatically downloads Python packages that you specify in <code>requirements.txt</code> and deploys them along with your application</li>\n<li>Convenient <code>wsgi serve</code> command for serving your application locally during development</li>\n<li>Includes CLI commands for remote execution of Python code (<code>wsgi exec</code>), shell commands (<code>wsgi command</code>), Flask CLI commands (<code>wsgi flask</code>) and Django management commands (<code>wsgi manage</code>)</li>\n</ul>\n<h2>Install</h2>\n<pre><code>sls plugin install -n serverless-wsgi\n</code></pre>\n<p>This will automatically add the plugin to <code>package.json</code> and the plugins section of <code>serverless.yml</code>.</p>\n<h2>Flask configuration example</h2>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7770b0877c3a35b20c2cf42865053388500fea9/68747470733a2f2f6c6f67616e646b2e6769746875622e696f2f7365727665726c6573732d777367692f6173736574732f68656c6c6f2d776f726c642e737667\">\n</p>\n<p>This example assumes that you have intialized your application as <code>app</code> inside <code>api.py</code>.</p>\n<pre><code>project\n\u251c\u2500\u2500 api.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 serverless.yml\n</code></pre>\n<h3>api.py</h3>\n<p>A regular Flask application.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/cats\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cats</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Cats\"</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/dogs/&lt;id&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">dog</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Dog\"</span>\n</pre>\n<h3>serverless.yml</h3>\n<p>Load the plugin and set the <code>custom.wsgi.app</code> configuration in <code>serverless.yml</code> to the\nmodule path of your Flask application.</p>\n<p>All functions that will use WSGI need to have <code>wsgi_handler.handler</code> set as the Lambda handler and\nuse the default <code>lambda-proxy</code> integration for API Gateway. This configuration example treats\nAPI Gateway as a transparent proxy, passing all requests directly to your Flask application,\nand letting the application handle errors, 404s etc.</p>\n<p><em>Note: The WSGI handler was called <code>wsgi.handler</code> earlier, but was renamed to <code>wsgi_handler.handler</code>\nin <code>1.7.0</code>. The old name is still supported but using it will cause a deprecation warning.</em></p>\n<pre><span class=\"nt\">service</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n\n<span class=\"nt\">provider</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws</span>\n  <span class=\"nt\">runtime</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3.6</span>\n\n<span class=\"nt\">plugins</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">serverless-wsgi</span>\n\n<span class=\"nt\">functions</span><span class=\"p\">:</span>\n  <span class=\"nt\">api</span><span class=\"p\">:</span>\n    <span class=\"nt\">handler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">wsgi_handler.handler</span>\n    <span class=\"nt\">events</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ANY /</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ANY {proxy+}</span>\n\n<span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n</pre>\n<h3>requirements.txt</h3>\n<p>Add Flask to the application bundle.</p>\n<pre><code>Flask==1.0.2\n</code></pre>\n<h2>Deployment</h2>\n<p>Simply run the serverless deploy command as usual:</p>\n<pre><code>$ sls deploy\nServerless: Using Python specified in \"runtime\": python3.6\nServerless: Packaging Python WSGI handler...\nServerless: Packaging required Python packages...\nServerless: Linking required Python packages...\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Unlinking required Python packages...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service .zip file to S3 (864.57 KB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n..............\nServerless: Stack update finished...\n</code></pre>\n<h2>Other frameworks</h2>\n<p>Set <code>custom.wsgi.app</code> in <code>serverless.yml</code> according to your WSGI callable:</p>\n<ul>\n<li>For Pyramid, use <a href=\"http://docs.pylonsproject.org/projects/pyramid/en/latest/api/config.html#pyramid.config.Configurator.make_wsgi_app\" rel=\"nofollow\">make_wsgi_app</a> to intialize the callable</li>\n<li>Django is configured for WSGI by default, set the callable to <code>&lt;project_name&gt;.wsgi.application</code>. See <a href=\"https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/\" rel=\"nofollow\">https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/</a> for more information.</li>\n</ul>\n<h2>Usage</h2>\n<h3>Automatic requirement packaging</h3>\n<p>You'll need to include any packages that your application uses in the bundle\nthat's deployed to AWS Lambda. This plugin helps you out by doing this automatically,\nas long as you specify your required packages in a <code>requirements.txt</code> file in the root\nof your Serverless service path:</p>\n<pre><code>Flask==1.0.2\nrequests==2.21.0\n</code></pre>\n<p>For more information, see <a href=\"https://pip.pypa.io/en/latest/user_guide/#requirements-files\" rel=\"nofollow\">https://pip.pypa.io/en/latest/user_guide/#requirements-files</a>.</p>\n<p>The <code>serverless-wsgi</code> plugin itself depends on <code>werkzeug</code> and will package it automatically,\neven if <code>werkzeug</code> is not present in your <code>requirements.txt</code>.</p>\n<p>You can use the requirement packaging functionality of <em>serverless-wsgi</em> without the WSGI\nhandler itself by including the plugin in your <code>serverless.yml</code> configuration, without specifying\nthe <code>custom.wsgi.app</code> setting. This will omit the WSGI handler from the package, but include\nany requirements specified in <code>requirements.txt</code>.</p>\n<p>If you don't want to use automatic requirement packaging you can set <code>custom.wsgi.packRequirements</code> to false:</p>\n<pre><span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n    <span class=\"nt\">packRequirements</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n</pre>\n<p>In order to pass additional arguments to <code>pip</code> when installing requirements, the <code>pipArgs</code> configuration\noption is available:</p>\n<pre><span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n    <span class=\"nt\">pipArgs</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">--no-deps</span>\n</pre>\n<p>For a more advanced approach to packaging requirements, consider using <a href=\"https://github.com/UnitedIncome/serverless-python-requirements\" rel=\"nofollow\">https://github.com/UnitedIncome/serverless-python-requirements</a>.\nWhen the <code>serverless-python-requirements</code> is added to <code>serverless.yml</code>, the <code>packRequirements</code> option\nis set to <code>false</code> by default.</p>\n<p>If you have <code>packRequirements</code> set to <code>false</code>, or if you use <code>serverless-python-requirements</code>, remember to add\n<code>werkzeug</code> explicitly in your <code>requirements.txt</code>.</p>\n<h3>Python version</h3>\n<p>Python is used for packaging requirements and serving the app when invoking <code>sls wsgi serve</code>. By\ndefault, the current runtime setting is expected to be the name of the Python binary in <code>PATH</code>,\nfor instance <code>python3.6</code>. If this is not the name of your Python binary, override it using the\n<code>pythonBin</code> option:</p>\n<pre><span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n    <span class=\"nt\">pythonBin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3</span>\n</pre>\n<h3>Local server</h3>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cab6ca0f12594393b5965a74218635adf72160de/68747470733a2f2f6c6f67616e646b2e6769746875622e696f2f7365727665726c6573732d777367692f6173736574732f73657276652e737667\">\n</p>\n<p>For convenience, a <code>sls wsgi serve</code> command is provided to run your WSGI application\nlocally. This command requires the <code>werkzeug</code> Python package to be installed,\nand acts as a simple wrapper for starting werkzeug's built-in HTTP server.</p>\n<p>By default, the server will start on port 5000.</p>\n<pre><code>$ sls wsgi serve\n * Running on http://localhost:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n</code></pre>\n<p>Configure the port using the <code>-p</code> parameter:</p>\n<pre><code>$ sls wsgi serve -p 8000\n * Running on http://localhost:8000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n</code></pre>\n<p>When running locally, an environment variable named <code>IS_OFFLINE</code> will be set to <code>True</code>.\nSo, if you want to know when the application is running locally, check <code>os.environ[\"IS_OFFLINE\"]</code>.</p>\n<h3>Remote command execution</h3>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b486d2b5ecd7f4a3b7ac3a197010ca5e71a7919/68747470733a2f2f6c6f67616e646b2e6769746875622e696f2f7365727665726c6573732d777367692f6173736574732f636f6d6d616e642e737667\">\n</p>\n<p>The <code>wsgi exec</code> command lets you execute Python code remotely:</p>\n<pre><code>$ sls wsgi exec -c \"import math; print((1 + math.sqrt(5)) / 2)\"\n1.618033988749895\n\n$ cat count.py\nfor i in range(3):\n    print(i)\n\n$ sls wsgi exec -f count.py\n0\n1\n2\n</code></pre>\n<p>The <code>wsgi command</code> command lets you execute shell commands remotely:</p>\n<pre><code>$ sls wsgi command -c \"pwd\"\n/var/task\n\n$ cat script.sh\n#!/bin/bash\necho \"dlrow olleh\" | rev\n\n$ sls wsgi command -f script.sh\nhello world\n</code></pre>\n<p>The <code>wsgi flask</code> command lets you execute <a href=\"http://flask.pocoo.org/docs/latest/cli/#custom-commands\" rel=\"nofollow\">Flask CLI custom commands</a> remotely:</p>\n<pre><code>$ sls wsgi flask -c \"my command\"\nHello world!\n</code></pre>\n<p>The <code>wsgi manage</code> command lets you execute Django management commands remotely:</p>\n<pre><code>$ sls wsgi manage -c \"check --list-tags\"\nadmin\ncaches\ndatabase\nmodels\nstaticfiles\ntemplates\nurls\n</code></pre>\n<p>All commands have <code>local</code> equivalents that let you run commands through <code>sls invoke local</code> rather\nthan <code>sls invoke</code>, i.e. on the local machine instead of through Lambda. The <code>local</code> commands (<code>sls wsgi command local</code>,\n<code>sls wsgi exec local</code>, <code>sls wsgi flask local</code> and <code>sls wsgi manage local</code>) take the same arguments\nas their remote counterparts documented above.</p>\n<h3>Explicit routes</h3>\n<p>If you'd like to be explicit about which routes and HTTP methods should pass through to your\napplication, see the following example:</p>\n<pre><span class=\"nt\">service</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n\n<span class=\"nt\">provider</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws</span>\n  <span class=\"nt\">runtime</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3.6</span>\n\n<span class=\"nt\">plugins</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">serverless-wsgi</span>\n\n<span class=\"nt\">functions</span><span class=\"p\">:</span>\n  <span class=\"nt\">api</span><span class=\"p\">:</span>\n    <span class=\"nt\">handler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">wsgi_handler.handler</span>\n    <span class=\"nt\">events</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span>\n          <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cats</span>\n          <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">get</span>\n          <span class=\"nt\">integration</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">lambda-proxy</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span>\n          <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dogs/{id}</span>\n          <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">get</span>\n          <span class=\"nt\">integration</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">lambda-proxy</span>\n\n<span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n</pre>\n<h3>Custom domain names</h3>\n<p>If you use custom domain names with API Gateway, you might have a base path that is\nat the beginning of your path, such as the stage (<code>/dev</code>, <code>/stage</code>, <code>/prod</code>). In this case, set\nthe <code>API_GATEWAY_BASE_PATH</code> environment variable to let <code>serverless-wsgi</code> know.</p>\n<p>The example below uses the <a href=\"https://github.com/amplify-education/serverless-domain-manager\" rel=\"nofollow\">serverless-domain-manager</a>\nplugin to handle custom domains in API Gateway:</p>\n<pre><span class=\"nt\">service</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n\n<span class=\"nt\">provider</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws</span>\n  <span class=\"nt\">runtime</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3.6</span>\n  <span class=\"nt\">environment</span><span class=\"p\">:</span>\n    <span class=\"nt\">API_GATEWAY_BASE_PATH</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${self:custom.customDomain.basePath}</span>\n\n<span class=\"nt\">plugins</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">serverless-wsgi</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">serverless-domain-manager</span>\n\n<span class=\"nt\">functions</span><span class=\"p\">:</span>\n  <span class=\"nt\">api</span><span class=\"p\">:</span>\n    <span class=\"nt\">handler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">wsgi_handler.handler</span>\n    <span class=\"nt\">events</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ANY /</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ANY {proxy+}</span>\n\n<span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n  <span class=\"nt\">customDomain</span><span class=\"p\">:</span>\n    <span class=\"nt\">basePath</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${opt:stage}</span>\n    <span class=\"nt\">domainName</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mydomain.name.com</span>\n    <span class=\"nt\">stage</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${opt:stage}</span>\n    <span class=\"nt\">createRoute53Record</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<h3>Using CloudFront</h3>\n<p>If you're configuring CloudFront manually in front of your API and setting\nthe Path in the CloudFront Origin to include your stage name, you'll need\nto strip it out from the path supplied to WSGI. This is so that your app\ndoesn't generate URLs starting with <code>/production</code>.</p>\n<p>Pass the <code>STRIP_STAGE_PATH=yes</code> environment variable to your application\nto set this:</p>\n<pre><span class=\"nt\">service</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n\n<span class=\"nt\">provider</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws</span>\n  <span class=\"nt\">runtime</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3.6</span>\n  <span class=\"nt\">environment</span><span class=\"p\">:</span>\n    <span class=\"nt\">STRIP_STAGE_PATH</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yes</span>\n</pre>\n<h3>File uploads</h3>\n<p>In order to accept file uploads from HTML forms, make sure to add <code>multipart/form-data</code> to\nthe list of content types with <em>Binary Support</em> in your API Gateway API. The\n<a href=\"https://github.com/maciejtreder/serverless-apigw-binary\" rel=\"nofollow\">serverless-apigw-binary</a>\nServerless plugin can be used to automate this process.</p>\n<p>Keep in mind that, when building Serverless applications, uploading\n<a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html\" rel=\"nofollow\">directly to S3</a>\nfrom the browser is usually the preferred approach.</p>\n<h3>Raw context and event</h3>\n<p>The raw context and event from AWS Lambda are both accessible through the WSGI\nrequest. The following example shows how to access them when using Flask:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'serverless.context'</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'serverless.event'</span><span class=\"p\">])</span>\n</pre>\n<h3>Text MIME types</h3>\n<p>By default, all MIME types starting with <code>text/</code> and the following whitelist are sent\nthrough API Gateway in plain text. All other MIME types will have their response body\nbase64 encoded (and the <code>isBase64Encoded</code> API Gateway flag set) in order to be\ndelivered by API Gateway as binary data (remember to add any binary MIME types that\nyou're using to the <em>Binary Support</em> list in API Gateway).</p>\n<p>This is the default whitelist of plain text MIME types:</p>\n<ul>\n<li><code>application/json</code></li>\n<li><code>application/javascript</code></li>\n<li><code>application/xml</code></li>\n<li><code>application/vnd.api+json</code></li>\n<li><code>image/svg+xml</code></li>\n</ul>\n<p>In order to add additional plain text MIME types to this whitelist, use the\n<code>textMimeTypes</code> configuration option:</p>\n<pre><span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">api.app</span>\n    <span class=\"nt\">textMimeTypes</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">application/custom+json</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">application/vnd.company+json</span>\n</pre>\n<h3>Preventing cold starts</h3>\n<p>Common ways to keep lambda functions warm include <a href=\"https://serverless.com/framework/docs/providers/aws/events/schedule/\" rel=\"nofollow\">scheduled events</a>\nand the <a href=\"https://github.com/FidelLimited/serverless-plugin-warmup\" rel=\"nofollow\">WarmUP plugin</a>. Both these event sources\nare supported by default and will be ignored by <code>serverless-wsgi</code>.</p>\n<h3>Alternative directory structure</h3>\n<p>If you have several functions in <code>serverless.yml</code> and want to organize them in\ndirectories, e.g.:</p>\n<pre><code>project\n\u251c\u2500\u2500 web\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 serverless.yml\n\u2514\u2500\u2500 another_function.py\n</code></pre>\n<p>In this case, tell <code>serverless-wsgi</code> where to find the handler by prepending the\ndirectory:</p>\n<pre><span class=\"nt\">service</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n\n<span class=\"nt\">provider</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws</span>\n  <span class=\"nt\">runtime</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3.6</span>\n\n<span class=\"nt\">plugins</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">serverless-wsgi</span>\n\n<span class=\"nt\">functions</span><span class=\"p\">:</span>\n  <span class=\"nt\">api</span><span class=\"p\">:</span>\n    <span class=\"nt\">handler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">wsgi_handler.handler</span>\n    <span class=\"nt\">events</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ANY /</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">http</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ANY {proxy+}</span>\n\n  <span class=\"nt\">another_function</span><span class=\"p\">:</span>\n    <span class=\"nt\">handler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">another_function.handler</span>\n\n<span class=\"nt\">custom</span><span class=\"p\">:</span>\n  <span class=\"nt\">wsgi</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">web/api.app</span>\n</pre>\n<p>Requirements will now be installed into <code>web/</code>, rather than at in the service root directory.</p>\n<p>The same rule applies when using the <code>individually: true</code> flag in the <code>package</code> settings, together\nwith the <code>module</code> option provided by <code>serverless-python-requirements</code>. In that case, both the requirements\nand the WSGI handler will be installed into <code>web/</code>, if the function is configured with <code>module: \"web\"</code>.</p>\n<h2>Usage without Serverless</h2>\n<p>The AWS API Gateway to WSGI mapping module is available on PyPI in the\n<code>serverless-wsgi</code> package.</p>\n<p>Use this package if you need to deploy Python Lambda functions to handle\nAPI Gateway events directly, without using the Serverless framework.</p>\n<pre><code>pip install serverless-wsgi\n</code></pre>\n<p>Initialize your WSGI application and in your Lambda event handler, call\nthe request mapper:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">app</span>  <span class=\"c1\"># Replace with your actual application</span>\n<span class=\"kn\">import</span> <span class=\"nn\">serverless_wsgi</span>\n\n<span class=\"c1\"># If you need to send additional content types as text, add then directly</span>\n<span class=\"c1\"># to the whitelist:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># serverless_wsgi.TEXT_MIME_TYPES.append(\"application/custom+json\")</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">serverless_wsgi</span><span class=\"o\">.</span><span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<h1>Thanks</h1>\n<p>Thanks to <a href=\"https://github.com/Miserlou/Zappa\" rel=\"nofollow\">Zappa</a>, which has been both the\ninspiration and source of several implementations that went into this project.</p>\n<p>Thanks to <a href=\"https://github.com/awslabs/chalice\" rel=\"nofollow\">chalice</a> for the\nrequirement packaging implementation.</p>\n\n          </div>"}, "last_serial": 6156810, "releases": {"1.5.0": [{"comment_text": "", "digests": {"md5": "3a7ffa8ff0a6fe8175e0010f00d66548", "sha256": "6bd8682390336e84efbc6a48e71c5f5bc7ca09b12e7ade9f86873f35d6e7f85d"}, "downloads": -1, "filename": "serverless_wsgi-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a7ffa8ff0a6fe8175e0010f00d66548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7143, "upload_time": "2018-08-02T22:45:34", "upload_time_iso_8601": "2018-08-02T22:45:34.600006Z", "url": "https://files.pythonhosted.org/packages/8b/46/460affabc17a8826b73afd40329f2ed61a2ddb0640ca0d289d49da0af03d/serverless_wsgi-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60f953c96857ae6acdb4a6df7d502f09", "sha256": "9aaf085633bc0210a196d62ae757d93420eb0d85a83f00b7bcebf17c269125b5"}, "downloads": -1, "filename": "serverless-wsgi-1.5.0.tar.gz", "has_sig": false, "md5_digest": "60f953c96857ae6acdb4a6df7d502f09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10261, "upload_time": "2018-08-02T22:45:35", "upload_time_iso_8601": "2018-08-02T22:45:35.940499Z", "url": "https://files.pythonhosted.org/packages/aa/9d/53d9a59c8edcad6af7db368563886b034bbec448ac4a2e44750b20a40138/serverless-wsgi-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "17c7ac479ae431bec4c78ecb9c16fddb", "sha256": "1535f16a7f3f35e2e97aaf416641b395e7694f1dc92c36faee3036f734405d5a"}, "downloads": -1, "filename": "serverless_wsgi-1.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17c7ac479ae431bec4c78ecb9c16fddb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12615, "upload_time": "2018-09-09T18:53:00", "upload_time_iso_8601": "2018-09-09T18:53:00.699364Z", "url": "https://files.pythonhosted.org/packages/d2/04/2ba38d08ded3d3e86cc1b0e76ce4fd6a098ec3ae98876983290ec28fbb1c/serverless_wsgi-1.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "253a630be60eb8e29c51c977fc5b5d2b", "sha256": "731e170d631a7194feb122b6f89c9a316e7b45cc35744c966f51f670dd2698ad"}, "downloads": -1, "filename": "serverless-wsgi-1.5.1.tar.gz", "has_sig": false, "md5_digest": "253a630be60eb8e29c51c977fc5b5d2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10334, "upload_time": "2018-09-09T18:53:01", "upload_time_iso_8601": "2018-09-09T18:53:01.875401Z", "url": "https://files.pythonhosted.org/packages/49/eb/715d05a0335707556e86aebca77f8bb8fa78c9217edb14484f5b76e1bf8c/serverless-wsgi-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "ebdd65130e52fe911e275284c7266d2e", "sha256": "0e84a770e7711508517d93114db6c6d7bfe1a398a5df614db48e9084d5e5ee21"}, "downloads": -1, "filename": "serverless_wsgi-1.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebdd65130e52fe911e275284c7266d2e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12669, "upload_time": "2018-10-23T19:43:32", "upload_time_iso_8601": "2018-10-23T19:43:32.422836Z", "url": "https://files.pythonhosted.org/packages/51/28/83aac185a3ae35b964ae641439189dcae3578b20d41520d655be101f5627/serverless_wsgi-1.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "476f58371a7d047e181fa2e3b9527e83", "sha256": "05870e8655c8131ee7337a1ef6e077ae2afa1d736727981be465f629f1bd2c53"}, "downloads": -1, "filename": "serverless-wsgi-1.5.2.tar.gz", "has_sig": false, "md5_digest": "476f58371a7d047e181fa2e3b9527e83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10441, "upload_time": "2018-10-23T19:43:33", "upload_time_iso_8601": "2018-10-23T19:43:33.899345Z", "url": "https://files.pythonhosted.org/packages/57/6b/3081c6bac7276c8bfe36db3f043c8360aaf95da6e3ea742bf471c705f11a/serverless-wsgi-1.5.2.tar.gz", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "576f370d6ea52486bc2846297bdb5fae", "sha256": "f00a7381fa547847ab2880917b0cb72d834d483926469dfe94d6db3a12632a27"}, "downloads": -1, "filename": "serverless_wsgi-1.5.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "576f370d6ea52486bc2846297bdb5fae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8004, "upload_time": "2018-11-13T11:33:16", "upload_time_iso_8601": "2018-11-13T11:33:16.813131Z", "url": "https://files.pythonhosted.org/packages/07/65/016a986501c97ad8a155794b43870ede4a0c08ca97bc8d50ae5210311a3b/serverless_wsgi-1.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0969523d67cd62c4645832aee5310070", "sha256": "8e60f5d80c16a6c95bbc5170ea31d0da1cc5a288e983e18915d7163da50d92bb"}, "downloads": -1, "filename": "serverless-wsgi-1.5.3.tar.gz", "has_sig": false, "md5_digest": "0969523d67cd62c4645832aee5310070", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10491, "upload_time": "2018-11-13T11:33:18", "upload_time_iso_8601": "2018-11-13T11:33:18.448488Z", "url": "https://files.pythonhosted.org/packages/a1/6d/88d7540896e28e80f090ecc695b979556ee75c3d628120fbd717416ca22b/serverless-wsgi-1.5.3.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "5599a9e0d6e2ad645141177b9100e5e9", "sha256": "fbbb2d398be22995dca25764ef31c4538021cbeb0b07c45d62082300bb853714"}, "downloads": -1, "filename": "serverless_wsgi-1.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5599a9e0d6e2ad645141177b9100e5e9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8715, "upload_time": "2018-12-18T22:16:02", "upload_time_iso_8601": "2018-12-18T22:16:02.632925Z", "url": "https://files.pythonhosted.org/packages/e4/a9/2831a0640dbd38a62f2059a98fdc8802088583e39588a0beae04b7c15ee6/serverless_wsgi-1.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cdcb4e9b016bb0092fa8b25f6c5d3d9", "sha256": "d37ac1cc63796c8251cf6a02b16e087b3647f446c891eb776672e899236bdca6"}, "downloads": -1, "filename": "serverless-wsgi-1.6.0.tar.gz", "has_sig": false, "md5_digest": "6cdcb4e9b016bb0092fa8b25f6c5d3d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11778, "upload_time": "2018-12-18T22:16:04", "upload_time_iso_8601": "2018-12-18T22:16:04.583178Z", "url": "https://files.pythonhosted.org/packages/5f/28/d8f67df0751da8ebaeef909b7c73a746ebbdad5f67b091f182f72c9efff1/serverless-wsgi-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "699dbe9320bb7d82e573c6208c153533", "sha256": "8f33129b93badbc9698eb1f42ade6c868357a1831c8fa111afda469d2f7136c4"}, "downloads": -1, "filename": "serverless_wsgi-1.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "699dbe9320bb7d82e573c6208c153533", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8918, "upload_time": "2019-01-04T23:36:34", "upload_time_iso_8601": "2019-01-04T23:36:34.472446Z", "url": "https://files.pythonhosted.org/packages/42/79/b8a9debf7ae004bacf01facb75d94a07d7337e4fdc1957b70555bd6baade/serverless_wsgi-1.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f8b02e6dd3d74dd0a7766aa6cfdd74f", "sha256": "abb94d6eef7ec07563050e0930c03964e1b68a6c4c90c39c3dd235696d84a27b"}, "downloads": -1, "filename": "serverless-wsgi-1.6.1.tar.gz", "has_sig": false, "md5_digest": "0f8b02e6dd3d74dd0a7766aa6cfdd74f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12136, "upload_time": "2019-01-04T23:36:36", "upload_time_iso_8601": "2019-01-04T23:36:36.528441Z", "url": "https://files.pythonhosted.org/packages/65/20/8938dfc787f4bc507c96de34e1741760cd7fcc61d2207f811d56a72b86e8/serverless-wsgi-1.6.1.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "4c0627f639e94d8d819c17d1ed6e2438", "sha256": "e3a68f0490934385de0a33e219e913a5ce4cdcafe342d46452819fc00d074610"}, "downloads": -1, "filename": "serverless_wsgi-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c0627f639e94d8d819c17d1ed6e2438", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9217, "upload_time": "2019-01-27T08:16:43", "upload_time_iso_8601": "2019-01-27T08:16:43.324104Z", "url": "https://files.pythonhosted.org/packages/96/91/fbcad69cd22eb2711525ae9a89f5e8588edef3f313c9d1c635e377e6c75d/serverless_wsgi-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0351652aa989809d54553146e48787ed", "sha256": "662e8537d2df49d7bbabc206e5204067221fcf42bec036e584729b2c96fbd310"}, "downloads": -1, "filename": "serverless-wsgi-1.7.0.tar.gz", "has_sig": false, "md5_digest": "0351652aa989809d54553146e48787ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12635, "upload_time": "2019-01-27T08:16:45", "upload_time_iso_8601": "2019-01-27T08:16:45.161967Z", "url": "https://files.pythonhosted.org/packages/59/35/8ceef3e6abd758fb984f6d815be02883527441e859df0c7d9283e3c9fe1d/serverless-wsgi-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "9f822fcb8cdc0f64089d440209f5d787", "sha256": "6b3cc3b7a0c24e1915abaa5195efca8c879852914f69a68516cddfeaefc6a96d"}, "downloads": -1, "filename": "serverless_wsgi-1.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9f822fcb8cdc0f64089d440209f5d787", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9634, "upload_time": "2019-02-01T09:03:26", "upload_time_iso_8601": "2019-02-01T09:03:26.339387Z", "url": "https://files.pythonhosted.org/packages/ff/2c/9d7b69ac49756a5bed1e356ee723598b445c6b539bafd1b7540829674038/serverless_wsgi-1.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48f0c0736018913afc360ee3cb9b5bfe", "sha256": "2d6812dcbd24a27c4a0ce1dad107a23b95ba554aeec0e6a51d43600c188f9fad"}, "downloads": -1, "filename": "serverless-wsgi-1.7.1.tar.gz", "has_sig": false, "md5_digest": "48f0c0736018913afc360ee3cb9b5bfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13194, "upload_time": "2019-02-01T09:03:28", "upload_time_iso_8601": "2019-02-01T09:03:28.258317Z", "url": "https://files.pythonhosted.org/packages/7b/2b/924230cefea7cdea4bf272c0cd538b5c3345ec54a36e8dd0f936e1be2616/serverless-wsgi-1.7.1.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "764af5511f31fda7fd4c978880fa7d14", "sha256": "a2a5e1e45e61ae3c1947abb978ea8a6c849089b8a0f769e17f27b738db5cd0e1"}, "downloads": -1, "filename": "serverless_wsgi-1.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "764af5511f31fda7fd4c978880fa7d14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9833, "upload_time": "2019-03-08T23:13:22", "upload_time_iso_8601": "2019-03-08T23:13:22.607792Z", "url": "https://files.pythonhosted.org/packages/c9/b6/ab25ba44d02442833cc34bf3bb99af2829af04b385d1b13788dafb4235d8/serverless_wsgi-1.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b7968831ce6ff7668ed76e64fa67c5d", "sha256": "d027f0baee5fdd2861e0da255a4babbce0e0bb15c7921602cb895e5fbea7835c"}, "downloads": -1, "filename": "serverless-wsgi-1.7.2.tar.gz", "has_sig": false, "md5_digest": "4b7968831ce6ff7668ed76e64fa67c5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13521, "upload_time": "2019-03-08T23:13:24", "upload_time_iso_8601": "2019-03-08T23:13:24.198011Z", "url": "https://files.pythonhosted.org/packages/14/41/41f1a3f58c73374bd92445f62eb67d97783fd7baaed5e8b330722137faca/serverless-wsgi-1.7.2.tar.gz", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "3c48443158ed336d26e4f31d63a037f6", "sha256": "708a765dfc64135a1c4f0929930d7e1bb6a78522082327d1526ddff2abe5dbdc"}, "downloads": -1, "filename": "serverless_wsgi-1.7.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c48443158ed336d26e4f31d63a037f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10091, "upload_time": "2019-08-13T14:44:10", "upload_time_iso_8601": "2019-08-13T14:44:10.562782Z", "url": "https://files.pythonhosted.org/packages/1a/c3/5db5f2544127f72e37322f76c97423db581647e07dc290fc3d86a6fcbb0e/serverless_wsgi-1.7.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b2616e05822fa24e5227e95a04f91e1", "sha256": "3e9860c78aaf383b8ef9ee6460b43d466c15c7de6380ceccdb9e6729254a3fd6"}, "downloads": -1, "filename": "serverless-wsgi-1.7.3.tar.gz", "has_sig": false, "md5_digest": "3b2616e05822fa24e5227e95a04f91e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14050, "upload_time": "2019-08-13T14:44:12", "upload_time_iso_8601": "2019-08-13T14:44:12.624644Z", "url": "https://files.pythonhosted.org/packages/4a/ef/65088c389eff13e57ae4c7df37e8ac0322654b13c11addfc753cbe37b053/serverless-wsgi-1.7.3.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "a13086202627bfe6c1d149d37b6ea63c", "sha256": "dd391a0c02e711563b2c194cb4c779571c01647c187e45ee30f215e775724111"}, "downloads": -1, "filename": "serverless_wsgi-1.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a13086202627bfe6c1d149d37b6ea63c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10091, "upload_time": "2019-11-18T16:20:40", "upload_time_iso_8601": "2019-11-18T16:20:40.220901Z", "url": "https://files.pythonhosted.org/packages/48/f0/5c9e7d4cc7a5daecb4c8c3b6e8345eccbd26410d3eb70c7a114afeae4ad1/serverless_wsgi-1.7.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd532ce2b4bda68715bdbfb27f4eb959", "sha256": "b25a11c6c35d1c49cd8cd32f40d8955d64f99b1d8bdb0acacaaa85e1b11db116"}, "downloads": -1, "filename": "serverless-wsgi-1.7.4.tar.gz", "has_sig": false, "md5_digest": "cd532ce2b4bda68715bdbfb27f4eb959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14112, "upload_time": "2019-11-18T16:20:41", "upload_time_iso_8601": "2019-11-18T16:20:41.922768Z", "url": "https://files.pythonhosted.org/packages/86/4a/c7221cc8de9241edc1e9266c7c3f3fa46adcc69a198c240c23de1ed33be5/serverless-wsgi-1.7.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a13086202627bfe6c1d149d37b6ea63c", "sha256": "dd391a0c02e711563b2c194cb4c779571c01647c187e45ee30f215e775724111"}, "downloads": -1, "filename": "serverless_wsgi-1.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a13086202627bfe6c1d149d37b6ea63c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10091, "upload_time": "2019-11-18T16:20:40", "upload_time_iso_8601": "2019-11-18T16:20:40.220901Z", "url": "https://files.pythonhosted.org/packages/48/f0/5c9e7d4cc7a5daecb4c8c3b6e8345eccbd26410d3eb70c7a114afeae4ad1/serverless_wsgi-1.7.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd532ce2b4bda68715bdbfb27f4eb959", "sha256": "b25a11c6c35d1c49cd8cd32f40d8955d64f99b1d8bdb0acacaaa85e1b11db116"}, "downloads": -1, "filename": "serverless-wsgi-1.7.4.tar.gz", "has_sig": false, "md5_digest": "cd532ce2b4bda68715bdbfb27f4eb959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14112, "upload_time": "2019-11-18T16:20:41", "upload_time_iso_8601": "2019-11-18T16:20:41.922768Z", "url": "https://files.pythonhosted.org/packages/86/4a/c7221cc8de9241edc1e9266c7c3f3fa46adcc69a198c240c23de1ed33be5/serverless-wsgi-1.7.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:00 2020"}