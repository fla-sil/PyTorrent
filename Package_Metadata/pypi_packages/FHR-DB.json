{"info": {"author": "Nikolai Kordulla", "author_email": "kordulla@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Build Tools"], "description": "FHR DB\n======\nInspired from the blog post http://backchannel.org/blog/friendfeed-schemaless-mysql ,FHR DB is just programmed Layer which enables a MYSQL Database as SQL Database. I skipped some optimizations for better usage from mysql console. I plan in the future to implement this optimizations, but then a sort of PhpMyAdmin for FHR DB is needed, cause if the Datafield are zipped or if we have binary ID, mysql console is just useless.\n\nWhy FHR DB?\n-----------\nDuring creating an application, you need to create new database fields or delete someone. With FHR DB, you only have to change something at the DB if you want to make this fields searchable. With the FHR DB you can only query indices, that prevents you from coding a slow applications, and provides a lot of flexibility. If you have a mass of data you could easily create new indices on the fly, on a running database, with no perfomance impact. The index will be immediately up, for all new entities, for all old you just need to run the cleaner.\n\nHow to use it?\n--------------\nIt's a litte bit like Google Big Table. If you want to create an User Model, the table you have to create looks like this\n\n    CREATE TABLE `users` (\n      `id` INT(22) NOT NULL auto_increment,\n      `body` TEXT NOT NULL,\n      `updated` TIMESTAMP NOT NULL,\n      `created` TIMESTAMP NOT NULL,\n      PRIMARY KEY  (`id`)\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nIn the body the json representation of the User is created. In your code you define the User Model like this.\n\n    class User(Model):\n        table = 'users'\n        fields = {'nickname' : None, 'password' : None, \n                  'email' : { 'confirmed' : False, 'token' : None, 'email' : None, 'sent': False }}\n\nYou can save and get the UserModel like this\n\n    user = User({'nickname' : 'notstandard', 'email.email' : 'kordulla@googlemail.com')\n    user.set(password='Another way to set sometgin')\n    user.set(email__confirmed=True)\n    user.set(email__token='Asd',sent=True)\n    user.put()\n    print(user.get('id')) # prints out user id for this saved user.\n\nYou can set the values in the constructor, there a dict in dict is seperated through the `.`, in the set command it's seperated through `__`. To get the user with id=10 just use this code\n\n    user = User.fqlGet(\"id = %s\", 10)\n    if user is not None:\n        print(user.get('id')) # just prints out 10 then if user was found\n\nIf you want to query the user with nickname test you have to create an Index. The table for the index nickname look like this\n\n    CREATE TABLE `index_nickname_users` (\n      `id` INT(22) NOT NULL auto_increment,\n      `nickname` VARCHAR(64) NOT NULL,\n      `user_id` INT(22) NOT NULL UNIQUE,\n      PRIMARY KEY  (`id`),\n      KEY (`nickname`, `user_id`)\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nAnd the updated model like this.\n\n    class User(Model):\n        table = 'users'\n        fields = {'nickname' : None, 'password' : None.\n                  'email' : { 'confirmed' : False, 'token' : None, 'email' : None, 'sent': False }}\n        indices = [ Index(['nickname'], 'index_nickname_users', 'user_id')]\n\nSo the code to query a single User for a nickname is then.\n\n    user = User.fqlGet(\"nickname = %\", test)\n\nFor more than one expected result like in this case, cause nickname is not really unique use\n\n    user = User.fqlAll(\"nickname = %\", test)\n\nIf you had already users save to the database their nickname index wouldn't be built so they wouldn't appear in the results. To built their index just use the cleaner\n\n    cleaner = Cleaner()\n    cleaner.cleanModel(User)\n\nor if you have more than one index for a specific index use\n\n    cleaner = Cleaner()\n    cleaner.cleanModel(User. User.indices[0])\n\nto just update the index[0].\n\nTest Driven Development\n=======================\nFor quality insurance I coded the whole FHR DB with test driven development. For 300 lines of code, I created 80 testcases, which should cover all code atm. If you find a bug just make a pull request with the testcase, which reproduce the bug.\n\nWhat to do in the future\n========================\nIf you like this concept it would be nice, if you can help to get FHR DB growing. What we needed, is that we perhaps could easily run the cleaner from command like ./clean.sh modelfile namespaceofmodel . It would be nice that index table will be automatically created from a model file, build the index etc, just with one command. For better performance binary index, and zipped json would be cool, but for that we need a data discover tool, like e.g. PhpMyAdmin for FHR DB, because the mysql console will be useless with binary id or zipped jsons.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nkordulla/FHR-DB/tarball/1.0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nkordulla/FHR-DB", "keywords": "mysql orm database layer schemaless", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "FHR-DB", "package_url": "https://pypi.org/project/FHR-DB/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/FHR-DB/", "project_urls": {"Download": "https://github.com/nkordulla/FHR-DB/tarball/1.0.2", "Homepage": "https://github.com/nkordulla/FHR-DB"}, "release_url": "https://pypi.org/project/FHR-DB/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Schemaless mysql db datalayer", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            FHR DB<br>======<br>Inspired from the blog post http://backchannel.org/blog/friendfeed-schemaless-mysql ,FHR DB is just programmed Layer which enables a MYSQL Database as SQL Database. I skipped some optimizations for better usage from mysql console. I plan in the future to implement this optimizations, but then a sort of PhpMyAdmin for FHR DB is needed, cause if the Datafield are zipped or if we have binary ID, mysql console is just useless.<br><br>Why FHR DB?<br>-----------<br>During creating an application, you need to create new database fields or delete someone. With FHR DB, you only have to change something at the DB if you want to make this fields searchable. With the FHR DB you can only query indices, that prevents you from coding a slow applications, and provides a lot of flexibility. If you have a mass of data you could easily create new indices on the fly, on a running database, with no perfomance impact. The index will be immediately up, for all new entities, for all old you just need to run the cleaner.<br><br>How to use it?<br>--------------<br>It's a litte bit like Google Big Table. If you want to create an User Model, the table you have to create looks like this<br><br>    CREATE TABLE `users` (<br>      `id` INT(22) NOT NULL auto_increment,<br>      `body` TEXT NOT NULL,<br>      `updated` TIMESTAMP NOT NULL,<br>      `created` TIMESTAMP NOT NULL,<br>      PRIMARY KEY  (`id`)<br>    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br>In the body the json representation of the User is created. In your code you define the User Model like this.<br><br>    class User(Model):<br>        table = 'users'<br>        fields = {'nickname' : None, 'password' : None, <br>                  'email' : { 'confirmed' : False, 'token' : None, 'email' : None, 'sent': False }}<br><br>You can save and get the UserModel like this<br><br>    user = User({'nickname' : 'notstandard', 'email.email' : 'kordulla@googlemail.com')<br>    user.set(password='Another way to set sometgin')<br>    user.set(email__confirmed=True)<br>    user.set(email__token='Asd',sent=True)<br>    user.put()<br>    print(user.get('id')) # prints out user id for this saved user.<br><br>You can set the values in the constructor, there a dict in dict is seperated through the `.`, in the set command it's seperated through `__`. To get the user with id=10 just use this code<br><br>    user = User.fqlGet(\"id = %s\", 10)<br>    if user is not None:<br>        print(user.get('id')) # just prints out 10 then if user was found<br><br>If you want to query the user with nickname test you have to create an Index. The table for the index nickname look like this<br><br>    CREATE TABLE `index_nickname_users` (<br>      `id` INT(22) NOT NULL auto_increment,<br>      `nickname` VARCHAR(64) NOT NULL,<br>      `user_id` INT(22) NOT NULL UNIQUE,<br>      PRIMARY KEY  (`id`),<br>      KEY (`nickname`, `user_id`)<br>    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br>And the updated model like this.<br><br>    class User(Model):<br>        table = 'users'<br>        fields = {'nickname' : None, 'password' : None.<br>                  'email' : { 'confirmed' : False, 'token' : None, 'email' : None, 'sent': False }}<br>        indices = [ Index(['nickname'], 'index_nickname_users', 'user_id')]<br><br>So the code to query a single User for a nickname is then.<br><br>    user = User.fqlGet(\"nickname = %\", test)<br><br>For more than one expected result like in this case, cause nickname is not really unique use<br><br>    user = User.fqlAll(\"nickname = %\", test)<br><br>If you had already users save to the database their nickname index wouldn't be built so they wouldn't appear in the results. To built their index just use the cleaner<br><br>    cleaner = Cleaner()<br>    cleaner.cleanModel(User)<br><br>or if you have more than one index for a specific index use<br><br>    cleaner = Cleaner()<br>    cleaner.cleanModel(User. User.indices[0])<br><br>to just update the index[0].<br><br>Test Driven Development<br>=======================<br>For quality insurance I coded the whole FHR DB with test driven development. For 300 lines of code, I created 80 testcases, which should cover all code atm. If you find a bug just make a pull request with the testcase, which reproduce the bug.<br><br>What to do in the future<br>========================<br>If you like this concept it would be nice, if you can help to get FHR DB growing. What we needed, is that we perhaps could easily run the cleaner from command like ./clean.sh modelfile namespaceofmodel . It would be nice that index table will be automatically created from a model file, build the index etc, just with one command. For better performance binary index, and zipped json would be cool, but for that we need a data discover tool, like e.g. PhpMyAdmin for FHR DB, because the mysql console will be useless with binary id or zipped jsons.\n          </div>"}, "last_serial": 2005267, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "5e956716c1ce4f56a73e56623970a1ed", "sha256": "c1e8a2684f6f546172f72ed216a4a34a32ac4ce3d98f9b70ed6243571f85b8fd"}, "downloads": -1, "filename": "FHR-DB-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5e956716c1ce4f56a73e56623970a1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8047, "upload_time": "2016-03-14T06:39:32", "upload_time_iso_8601": "2016-03-14T06:39:32.596777Z", "url": "https://files.pythonhosted.org/packages/41/7f/66d9257dd28f9f9e5b2f821e6af94a2489eb55eec42959da3fa747542cb4/FHR-DB-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e956716c1ce4f56a73e56623970a1ed", "sha256": "c1e8a2684f6f546172f72ed216a4a34a32ac4ce3d98f9b70ed6243571f85b8fd"}, "downloads": -1, "filename": "FHR-DB-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5e956716c1ce4f56a73e56623970a1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8047, "upload_time": "2016-03-14T06:39:32", "upload_time_iso_8601": "2016-03-14T06:39:32.596777Z", "url": "https://files.pythonhosted.org/packages/41/7f/66d9257dd28f9f9e5b2f821e6af94a2489eb55eec42959da3fa747542cb4/FHR-DB-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:43 2020"}