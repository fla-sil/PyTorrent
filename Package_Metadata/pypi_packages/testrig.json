{"info": {"author": "Pauli Virtanen", "author_email": "pav@iki.fi", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Testing"], "description": ".. image:: https://travis-ci.org/pv/testrig.png?branch=master\n   :target: https://travis-ci.org/pv/testrig\n\n=======\ntestrig\n=======\n\nPython package integration testing.\n\nRuns the test suite of some package against 'old' and 'new' versions\nof given dependencies. Failures that appear in 'new' are reported.\n\nEach test suite run is run in a virtualenv constructed from scratch.\nYou should install ``ccache`` (and possibly also ``f90cache``) to\navoid drinking too much coffee.\n\nAlternatively, binary conda packages can be used --- however, binary\nincompatibities may arise in this configuration.\n\nCurrently, this is POSIX-only, and tested only on Linux.\n\nUsage\n-----\n\nRun::\n\n    python -mtestrig --help\n    python -mtestrig examples/testrig.ini pandas       # run tests\n    python -mtestrig examples/testrig-conda.ini pandas # use conda packages\n    python -mtestrig examples/testrig.ini -j           # run all packages parallel\n\nThe runs may take a long time, as it builds everything from source.\n\nConfiguration\n-------------\n\nConfiguration is read from an ``.ini`` file.  It contains sections, one per\ntest environment.  Section named ``DEFAULT`` can be used to specify\n(overridable) default values for the configuration items.\n\nAn example first (runs scipy test suite against old and new numpy\nversions)::\n\n  [DEFAULT]\n  pkgs = nose tempita Cython==0.22 scipy==0.17.0\n  old = numpy==1.7.2 {pkgs}\n  new = Cython==0.22 git+https://github.com/numpy/numpy@master {pkgs}\n\n  [scipy]\n  pkgs = {pkgs} scipy\n  run = python -mpytest --junit-xml=junit.xml --pyarg scipy\n  parser = junit:junit.xml\n  envvars =\n      SETUPCFG=$DIR/mysetup.cfg\n\nMore examples can be found under the ``examples/`` folder.\n\nThe configuration items in each section are:\n\n* ``env``: which environment to use\n\n  - ``virtualenv``: virtualenv + pip, all packages are built from sources\n  - ``conda``: conda, uses binary packages, except for ``git+`` urls\n    and package names prefixed by ``pip+``.\n    Note that you may need to write stuff like\n    ``numpy git+https://github.com/numpy/numpy.git`` since conda only\n    understand that packages installed by it are present.\n\n* ``old``: package specifications for the 'old' configuration (see below).\n* ``new``: package specifications for the 'new' configuration (see below).\n* ``run``: command that runs the tests.\n* ``parser``: parser for the test output. Available options:\n\n  - ``junit:FILENAME``: parses xUnit/jUnit xml result output, stored in given\n    filename. Both nose and py.test can produce this output:\n    ``py.test --junit-xml=junit.xml ...`` and\n    ``nosetests --with-xunit --xunit-file=junit.xml ...``.\n  - ``nose``: parses nose stdout\n* ``envvars``: additional environment variables to set (also for pip install).\n  The text ``$DIR`` is replaced by an absolute path of the directory where the\n  configuration file resides.\n\nThe values support string interpolation, and default values can be\nspecified in the ``DEFAULT`` section. For example::\n\n  [DEFAULT]\n  pre = foo\n  post = quux\n\n  [section]\n  post = {post} quux2\n  new = {pre} bar {post}\n\nproduces the value ``new = foo bar quux quux2``.\n\nThe package specifications are a string containing a list of pip (or\nconda if using env=conda) packages version specifications, with the\nfollowing additional possible items:\n\n* ``--no-binary``: do not install following packages via wheels or conda.\n* ``--binary``: install following packages via wheels or conda, if possible.\n\nBy default, binary packages are used.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pv/testrig", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "testrig", "package_url": "https://pypi.org/project/testrig/", "platform": "", "project_url": "https://pypi.org/project/testrig/", "project_urls": {"Homepage": "http://github.com/pv/testrig"}, "release_url": "https://pypi.org/project/testrig/0.2/", "requires_dist": null, "requires_python": "", "summary": "testrig: running tests for dependent packages", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pv/testrig\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pv/testrig.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/feb2721d495900da78f9d57a607eb853061640bc/68747470733a2f2f7472617669732d63692e6f72672f70762f746573747269672e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"testrig\">\n<h2>testrig</h2>\n<p>Python package integration testing.</p>\n<p>Runs the test suite of some package against \u2018old\u2019 and \u2018new\u2019 versions\nof given dependencies. Failures that appear in \u2018new\u2019 are reported.</p>\n<p>Each test suite run is run in a virtualenv constructed from scratch.\nYou should install <tt>ccache</tt> (and possibly also <tt>f90cache</tt>) to\navoid drinking too much coffee.</p>\n<p>Alternatively, binary conda packages can be used \u2014 however, binary\nincompatibities may arise in this configuration.</p>\n<p>Currently, this is POSIX-only, and tested only on Linux.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Run:</p>\n<pre>python -mtestrig --help\npython -mtestrig examples/testrig.ini pandas       # run tests\npython -mtestrig examples/testrig-conda.ini pandas # use conda packages\npython -mtestrig examples/testrig.ini -j           # run all packages parallel\n</pre>\n<p>The runs may take a long time, as it builds everything from source.</p>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Configuration is read from an <tt>.ini</tt> file.  It contains sections, one per\ntest environment.  Section named <tt>DEFAULT</tt> can be used to specify\n(overridable) default values for the configuration items.</p>\n<p>An example first (runs scipy test suite against old and new numpy\nversions):</p>\n<pre>[DEFAULT]\npkgs = nose tempita Cython==0.22 scipy==0.17.0\nold = numpy==1.7.2 {pkgs}\nnew = Cython==0.22 git+https://github.com/numpy/numpy@master {pkgs}\n\n[scipy]\npkgs = {pkgs} scipy\nrun = python -mpytest --junit-xml=junit.xml --pyarg scipy\nparser = junit:junit.xml\nenvvars =\n    SETUPCFG=$DIR/mysetup.cfg\n</pre>\n<p>More examples can be found under the <tt>examples/</tt> folder.</p>\n<p>The configuration items in each section are:</p>\n<ul>\n<li><tt>env</tt>: which environment to use<ul>\n<li><tt>virtualenv</tt>: virtualenv + pip, all packages are built from sources</li>\n<li><tt>conda</tt>: conda, uses binary packages, except for <tt>git+</tt> urls\nand package names prefixed by <tt>pip+</tt>.\nNote that you may need to write stuff like\n<tt>numpy <span class=\"pre\">git+https://github.com/numpy/numpy.git</span></tt> since conda only\nunderstand that packages installed by it are present.</li>\n</ul>\n</li>\n<li><tt>old</tt>: package specifications for the \u2018old\u2019 configuration (see below).</li>\n<li><tt>new</tt>: package specifications for the \u2018new\u2019 configuration (see below).</li>\n<li><tt>run</tt>: command that runs the tests.</li>\n<li><tt>parser</tt>: parser for the test output. Available options:<ul>\n<li><tt>junit:FILENAME</tt>: parses xUnit/jUnit xml result output, stored in given\nfilename. Both nose and py.test can produce this output:\n<tt>py.test <span class=\"pre\">--junit-xml=junit.xml</span> ...</tt> and\n<tt>nosetests <span class=\"pre\">--with-xunit</span> <span class=\"pre\">--xunit-file=junit.xml</span> ...</tt>.</li>\n<li><tt>nose</tt>: parses nose stdout</li>\n</ul>\n</li>\n<li><tt>envvars</tt>: additional environment variables to set (also for pip install).\nThe text <tt>$DIR</tt> is replaced by an absolute path of the directory where the\nconfiguration file resides.</li>\n</ul>\n<p>The values support string interpolation, and default values can be\nspecified in the <tt>DEFAULT</tt> section. For example:</p>\n<pre>[DEFAULT]\npre = foo\npost = quux\n\n[section]\npost = {post} quux2\nnew = {pre} bar {post}\n</pre>\n<p>produces the value <tt>new = foo bar quux quux2</tt>.</p>\n<p>The package specifications are a string containing a list of pip (or\nconda if using env=conda) packages version specifications, with the\nfollowing additional possible items:</p>\n<ul>\n<li><tt><span class=\"pre\">--no-binary</span></tt>: do not install following packages via wheels or conda.</li>\n<li><tt><span class=\"pre\">--binary</span></tt>: install following packages via wheels or conda, if possible.</li>\n</ul>\n<p>By default, binary packages are used.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3593508, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "23b4eb767a31c4c68aabb769aca6f09b", "sha256": "9e5121319b6789d2b7a55763b8be196f4901af4e7fbb5b4b018b7729c41be93f"}, "downloads": -1, "filename": "testrig-0.1.tar.gz", "has_sig": false, "md5_digest": "23b4eb767a31c4c68aabb769aca6f09b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90667, "upload_time": "2017-01-22T00:18:04", "upload_time_iso_8601": "2017-01-22T00:18:04.634474Z", "url": "https://files.pythonhosted.org/packages/1e/fb/9f0ab8a6bb2c79a2a905eaef1775fcd2c6011b9935e2a4bb4c5773c3f240/testrig-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "50346657d0912c34f9a86a92d179207a", "sha256": "2d1933e540c9b75a4bacf8bdbc7ff74e5bc5d9bd4b26a3e73cfb1e74edf84e81"}, "downloads": -1, "filename": "testrig-0.1.1.tar.gz", "has_sig": false, "md5_digest": "50346657d0912c34f9a86a92d179207a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92795, "upload_time": "2017-01-22T00:25:00", "upload_time_iso_8601": "2017-01-22T00:25:00.291071Z", "url": "https://files.pythonhosted.org/packages/21/da/12c1cf8b3a1042d304fbb3d277a8de757ff83891b8ad95b34f6fb49cfbea/testrig-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5fb1111b93758a0567b6014fc3668452", "sha256": "fe6088d9fcac8bddcf16e3749897d54aab548a814777c1e410cef0c9530c54b1"}, "downloads": -1, "filename": "testrig-0.2.tar.gz", "has_sig": false, "md5_digest": "5fb1111b93758a0567b6014fc3668452", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15159, "upload_time": "2018-02-18T15:29:08", "upload_time_iso_8601": "2018-02-18T15:29:08.311062Z", "url": "https://files.pythonhosted.org/packages/a4/42/f8b0624c46c44b88d1652d27a0b9fbfe5c01a5c1872d23e6057cbb021a94/testrig-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5fb1111b93758a0567b6014fc3668452", "sha256": "fe6088d9fcac8bddcf16e3749897d54aab548a814777c1e410cef0c9530c54b1"}, "downloads": -1, "filename": "testrig-0.2.tar.gz", "has_sig": false, "md5_digest": "5fb1111b93758a0567b6014fc3668452", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15159, "upload_time": "2018-02-18T15:29:08", "upload_time_iso_8601": "2018-02-18T15:29:08.311062Z", "url": "https://files.pythonhosted.org/packages/a4/42/f8b0624c46c44b88d1652d27a0b9fbfe5c01a5c1872d23e6057cbb021a94/testrig-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:19 2020"}