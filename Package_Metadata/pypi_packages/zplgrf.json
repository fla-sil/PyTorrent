{"info": {"author": "Kyle MacFarlane", "author_email": "kyle@deletethetrees.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: https://travis-ci.org/kylemacfarlane/zplgrf.svg?branch=master\n    :target: https://travis-ci.org/kylemacfarlane/zplgrf\n.. image:: https://coveralls.io/repos/github/kylemacfarlane/zplgrf/badge.svg?branch=master\n    :target: https://coveralls.io/github/kylemacfarlane/zplgrf?branch=master\n\n\n**UPDATE: If you're only interested in the quality of barcodes when printing then first try using the new center of pixel options in cups-filters 1.11.4.**\n\n======\nzplgrf\n======\n\nThis project contains the utils I made to convert to and from GRF images from ZPL while trying to diagnose why barcodes printed from CUPS on Linux and OSX were so blurry/fuzzy/etc. It also contains my attempt at sharpening the barcodes and a CUPS filter you can setup to try for yourself.\n\n\nBarcode Quality\n===============\n\nThe way CUPS (and at least my Windows driver too) prints PDFs to label printers is by converting the PDF to an image and then embedding that image in ZPL. The problem with this is that all PDF converters seem to aim to maintain font quality and don't care much about the quality of vectors. Often this create unscanable barcodes especially at the low 203 dpi of most label printers.\n\nThere are a couple of ways around this when generating your own PDFs (a barcode font, snap the barcode to round units, etc.) but they all have their downsides and don't help you if you have to print a label generated by someone else.\n\nOriginally I tried getting a greyscale image from Ghostscript and converting to mono while maintaining barcode quality but I always ended up destroying the font quality. I noticed that GRFs generated by Windows showed similar artifacting on text and a retail OSX driver says in their guide that their driver may also affect text quality so I think this kind of post processing is possibly what others are doing.\n\nIn the end I opted for getting a mono image from Ghostscript and then searching the image data to find any suspected barcodes and simply widening the white areas. It's very dumb and simple but works for me. You may need to tweak it for your own labels and there's a good chance it could actually make your barcodes worse.\n\nUPDATE: I also added support for the center of pixel rule in Ghostscript when converting from PDFs. This improves barcode quality but also decreases the quality of some text.\n\n\nInstallation\n============\n\nRun ``pip install zplgrf``.\n\n\nDependencies\n============\n\nNormal installation should handle regular Python dependencies but this project also requires Ghostscript (gs) to be installed.\n\nI would recommend installing the newest version of Ghostscript. The tests fail due to slight rendering differences on old versions and the current center of pixel implementation isn't compatible with 9.22-9.26.\n\n\nUsing the Python API\n====================\n\nSome quick demos.\n\nOpen a PDF, optimise the barcodes, and show the ZPL::\n\n\n    from zplgrf import GRF\n    with open('source.pdf', 'rb') as pdf:\n        pages = GRF.from_pdf(pdf.read(), 'DEMO')\n    for grf in pages:\n        grf.optimise_barcodes()\n        print(grf.to_zpl())\n\n\nWhen converting from PDFs you will get better performance and barcodes by using Ghostscript's center of pixel rule instead of my ``optimise_barcodes()`` method::\n\n\n    from zplgrf import GRF\n    with open('source.pdf', 'rb') as pdf:\n        pages = GRF.from_pdf(pdf.read(), 'DEMO', center_of_pixel=True)\n    for grf in pages:\n        print(grf.to_zpl())\n\n\nTo convert an image instead::\n\n\n    from zplgrf import GRF\n    with open('source.png', 'rb') as image:\n        grf = GRF.from_image(image.read(), 'DEMO')\n    grf.optimise_barcodes()\n    print(grf.to_zpl(compression=3, quantity=1)) # Some random options\n\n\nIf the ZPL won't print it's possible that your printer doesn't support ZB64 compressed images so try ``compression=2`` instead.\n\nExtract all GRFs from ZPL and save them as PNGs::\n\n\n    from zplgrf import GRF\n    with open('source.zpl', 'r') as zpl:\n        grfs = GRF.from_zpl(zpl.read())\n    for i, grf in enumerate(grfs):\n        grf.to_image().save('output-%s.png' % i, 'PNG')\n\n\nOptimise all barcodes in a ZPL file::\n\n\n    from zplgrf import GRF\n    with open('source.zpl', 'r') as zpl:\n        print(GRF.replace_grfs_in_zpl(zpl.read()))\n\n\nArguments for the various methods are documented in the source. Some such as ``to_zpl()`` and ``optimise_barcodes()`` have quite a few arguments that may need tweaking for your purposes.\n\n\nUsing the CUPS Filter\n=====================\n\nInstall the package normally and then copy ``pdftozpl`` to your CUPS filter directory which is usually ``/usr/lib/cups/filter``. Make sure that the copied file has the same permissions as the other filters in the folder.\n\nNow edit the PPD file for your printer which is usually in ``/etc/cups/ppd``. Find the lines containing ``*cupsFilter`` and add the following below them::\n\n\n    *cupsFilter2: \"application/pdf application/octet-stream 50 pdftozpl\"\n\n\nNow restart CUPS and this new filter will take affect. Note that ``*cupsFilter2`` filters require CUPS 1.5+ and they disable all regular ``*cupsFilter`` filters so you may need to setup more filters for other mimetypes.\n\n``application/octet-stream`` is the mimetype CUPS uses for raw printing which is what we want to send raw ZPL to the printer.\n\n\nPerformance\n===========\n\nPerformance of the CUPS filter is pretty bad in comparison to the native filters written in C. On a Raspberry Pi 3 it takes about 2.5s to run but is low 100s of ms on a decent computer.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kylemacfarlane/zplgrf", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "zplgrf", "package_url": "https://pypi.org/project/zplgrf/", "platform": "", "project_url": "https://pypi.org/project/zplgrf/", "project_urls": {"Homepage": "https://github.com/kylemacfarlane/zplgrf"}, "release_url": "https://pypi.org/project/zplgrf/1.6.0/", "requires_dist": null, "requires_python": "", "summary": "Tools to work with ZPL GRF images and CUPS", "version": "1.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/kylemacfarlane/zplgrf\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/kylemacfarlane/zplgrf.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6b684f77ba7d0becdd9fa67e4459265af0739ae/68747470733a2f2f7472617669732d63692e6f72672f6b796c656d61636661726c616e652f7a706c6772662e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/kylemacfarlane/zplgrf?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/kylemacfarlane/zplgrf/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02af3eb55ab5829fe4855f6a33ccabd60b5b35de/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b796c656d61636661726c616e652f7a706c6772662f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p><strong>UPDATE: If you\u2019re only interested in the quality of barcodes when printing then first try using the new center of pixel options in cups-filters 1.11.4.</strong></p>\n<div id=\"zplgrf\">\n<h2>zplgrf</h2>\n<p>This project contains the utils I made to convert to and from GRF images from ZPL while trying to diagnose why barcodes printed from CUPS on Linux and OSX were so blurry/fuzzy/etc. It also contains my attempt at sharpening the barcodes and a CUPS filter you can setup to try for yourself.</p>\n<div id=\"barcode-quality\">\n<h3>Barcode Quality</h3>\n<p>The way CUPS (and at least my Windows driver too) prints PDFs to label printers is by converting the PDF to an image and then embedding that image in ZPL. The problem with this is that all PDF converters seem to aim to maintain font quality and don\u2019t care much about the quality of vectors. Often this create unscanable barcodes especially at the low 203 dpi of most label printers.</p>\n<p>There are a couple of ways around this when generating your own PDFs (a barcode font, snap the barcode to round units, etc.) but they all have their downsides and don\u2019t help you if you have to print a label generated by someone else.</p>\n<p>Originally I tried getting a greyscale image from Ghostscript and converting to mono while maintaining barcode quality but I always ended up destroying the font quality. I noticed that GRFs generated by Windows showed similar artifacting on text and a retail OSX driver says in their guide that their driver may also affect text quality so I think this kind of post processing is possibly what others are doing.</p>\n<p>In the end I opted for getting a mono image from Ghostscript and then searching the image data to find any suspected barcodes and simply widening the white areas. It\u2019s very dumb and simple but works for me. You may need to tweak it for your own labels and there\u2019s a good chance it could actually make your barcodes worse.</p>\n<p>UPDATE: I also added support for the center of pixel rule in Ghostscript when converting from PDFs. This improves barcode quality but also decreases the quality of some text.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Run <tt>pip install zplgrf</tt>.</p>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>Normal installation should handle regular Python dependencies but this project also requires Ghostscript (gs) to be installed.</p>\n<p>I would recommend installing the newest version of Ghostscript. The tests fail due to slight rendering differences on old versions and the current center of pixel implementation isn\u2019t compatible with 9.22-9.26.</p>\n</div>\n<div id=\"using-the-python-api\">\n<h3>Using the Python API</h3>\n<p>Some quick demos.</p>\n<p>Open a PDF, optimise the barcodes, and show the ZPL:</p>\n<pre>from zplgrf import GRF\nwith open('source.pdf', 'rb') as pdf:\n    pages = GRF.from_pdf(pdf.read(), 'DEMO')\nfor grf in pages:\n    grf.optimise_barcodes()\n    print(grf.to_zpl())\n</pre>\n<p>When converting from PDFs you will get better performance and barcodes by using Ghostscript\u2019s center of pixel rule instead of my <tt>optimise_barcodes()</tt> method:</p>\n<pre>from zplgrf import GRF\nwith open('source.pdf', 'rb') as pdf:\n    pages = GRF.from_pdf(pdf.read(), 'DEMO', center_of_pixel=True)\nfor grf in pages:\n    print(grf.to_zpl())\n</pre>\n<p>To convert an image instead:</p>\n<pre>from zplgrf import GRF\nwith open('source.png', 'rb') as image:\n    grf = GRF.from_image(image.read(), 'DEMO')\ngrf.optimise_barcodes()\nprint(grf.to_zpl(compression=3, quantity=1)) # Some random options\n</pre>\n<p>If the ZPL won\u2019t print it\u2019s possible that your printer doesn\u2019t support ZB64 compressed images so try <tt>compression=2</tt> instead.</p>\n<p>Extract all GRFs from ZPL and save them as PNGs:</p>\n<pre>from zplgrf import GRF\nwith open('source.zpl', 'r') as zpl:\n    grfs = GRF.from_zpl(zpl.read())\nfor i, grf in enumerate(grfs):\n    grf.to_image().save('output-%s.png' % i, 'PNG')\n</pre>\n<p>Optimise all barcodes in a ZPL file:</p>\n<pre>from zplgrf import GRF\nwith open('source.zpl', 'r') as zpl:\n    print(GRF.replace_grfs_in_zpl(zpl.read()))\n</pre>\n<p>Arguments for the various methods are documented in the source. Some such as <tt>to_zpl()</tt> and <tt>optimise_barcodes()</tt> have quite a few arguments that may need tweaking for your purposes.</p>\n</div>\n<div id=\"using-the-cups-filter\">\n<h3>Using the CUPS Filter</h3>\n<p>Install the package normally and then copy <tt>pdftozpl</tt> to your CUPS filter directory which is usually <tt>/usr/lib/cups/filter</tt>. Make sure that the copied file has the same permissions as the other filters in the folder.</p>\n<p>Now edit the PPD file for your printer which is usually in <tt>/etc/cups/ppd</tt>. Find the lines containing <tt>*cupsFilter</tt> and add the following below them:</p>\n<pre>*cupsFilter2: \"application/pdf application/octet-stream 50 pdftozpl\"\n</pre>\n<p>Now restart CUPS and this new filter will take affect. Note that <tt>*cupsFilter2</tt> filters require CUPS 1.5+ and they disable all regular <tt>*cupsFilter</tt> filters so you may need to setup more filters for other mimetypes.</p>\n<p><tt><span class=\"pre\">application/octet-stream</span></tt> is the mimetype CUPS uses for raw printing which is what we want to send raw ZPL to the printer.</p>\n</div>\n<div id=\"performance\">\n<h3>Performance</h3>\n<p>Performance of the CUPS filter is pretty bad in comparison to the native filters written in C. On a Raspberry Pi 3 it takes about 2.5s to run but is low 100s of ms on a decent computer.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5946883, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "54eb8d80209f1de30325d44501224d14", "sha256": "c458628c5c9ed20471452415efb9877f919b715b8dd201ba3b52729dd05e0488"}, "downloads": -1, "filename": "zplgrf-1.0.tar.gz", "has_sig": false, "md5_digest": "54eb8d80209f1de30325d44501224d14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32831, "upload_time": "2016-05-17T21:25:59", "upload_time_iso_8601": "2016-05-17T21:25:59.375519Z", "url": "https://files.pythonhosted.org/packages/c9/12/41308c026424c419bd99a257bc67e7d44fbc94fc62924330dd46861f6d47/zplgrf-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5d27b3b96c4d8028dc4c47dcf5f76068", "sha256": "677be5bdac79ab2e25882efcf4d8808bfc237b277fa01b9aa9de7c6bcca2afa7"}, "downloads": -1, "filename": "zplgrf-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5d27b3b96c4d8028dc4c47dcf5f76068", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32761, "upload_time": "2016-05-19T02:18:27", "upload_time_iso_8601": "2016-05-19T02:18:27.986998Z", "url": "https://files.pythonhosted.org/packages/ea/b8/18437927157ef3061fdbc2b30110cae8c06ec563b16d3b9dd012e850ad2c/zplgrf-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "c518dfaa3d79ba25c3dd25ddbc8fe927", "sha256": "5053b526f4c9d73b9b1636503a1b657e027877822e223bdc1bc27182a257f161"}, "downloads": -1, "filename": "zplgrf-1.1.tar.gz", "has_sig": false, "md5_digest": "c518dfaa3d79ba25c3dd25ddbc8fe927", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42321, "upload_time": "2016-10-28T02:11:50", "upload_time_iso_8601": "2016-10-28T02:11:50.291156Z", "url": "https://files.pythonhosted.org/packages/e0/1d/52ee2d0bb2e19ae9a114395657c7bffa8ced1e26d99898c00228bff95aeb/zplgrf-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4fda63ae17686bb8bae85e9af5be4f41", "sha256": "decbdcdc9b1b73634ec309851d00fe8434a7190ad89a44b32474389e2cf2394e"}, "downloads": -1, "filename": "zplgrf-1.2.tar.gz", "has_sig": false, "md5_digest": "4fda63ae17686bb8bae85e9af5be4f41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42860, "upload_time": "2018-01-27T03:07:54", "upload_time_iso_8601": "2018-01-27T03:07:54.625358Z", "url": "https://files.pythonhosted.org/packages/9f/58/e68268ebcbb182cf80bcec060232111d1c970a83dcc0a0c73ab43286a7bc/zplgrf-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "82877cc3bcafa232656a32ceb3e5b713", "sha256": "94469fb7a9add74704d2056579cdf30427a4b614afacfed74ff2cbfd095575ec"}, "downloads": -1, "filename": "zplgrf-1.3.tar.gz", "has_sig": false, "md5_digest": "82877cc3bcafa232656a32ceb3e5b713", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42892, "upload_time": "2018-01-28T06:24:11", "upload_time_iso_8601": "2018-01-28T06:24:11.759827Z", "url": "https://files.pythonhosted.org/packages/05/ee/997417e688bedd7450763426cfce0e5e0748d7dc990e4de7eb436d9ee743/zplgrf-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "25d76d63a29f840000fbf92f92f9d25c", "sha256": "e57526963bd54e4279ae5877d1df69b028ebc66a6d725c3c4ff72c5bf24010a3"}, "downloads": -1, "filename": "zplgrf-1.4.tar.gz", "has_sig": false, "md5_digest": "25d76d63a29f840000fbf92f92f9d25c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42921, "upload_time": "2018-01-30T21:44:41", "upload_time_iso_8601": "2018-01-30T21:44:41.370564Z", "url": "https://files.pythonhosted.org/packages/e4/0a/3a51b3402295e37afaaa1c68845a122fd28286d961c67d3de3e9b13456c7/zplgrf-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "3e93211868512c7dd8587d4c05180d96", "sha256": "fe7c529f85eebd0b72d43e381f3bb4e22d08bb41217aa278fbf658424607f9ac"}, "downloads": -1, "filename": "zplgrf-1.4.1.tar.gz", "has_sig": false, "md5_digest": "3e93211868512c7dd8587d4c05180d96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42935, "upload_time": "2018-01-30T21:49:14", "upload_time_iso_8601": "2018-01-30T21:49:14.711512Z", "url": "https://files.pythonhosted.org/packages/12/d1/096c7477c6be1d6a7d142906bd2eb9101a51377ed882a3ab8d13461dccd3/zplgrf-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "fd17cbb84778878d39fa176435894a6d", "sha256": "cd8e4b9ad792c5d8ad2b70e3ea40ceb99077d20d3c09e0240f7b3ac79332578a"}, "downloads": -1, "filename": "zplgrf-1.4.2.tar.gz", "has_sig": false, "md5_digest": "fd17cbb84778878d39fa176435894a6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42969, "upload_time": "2018-08-05T09:44:16", "upload_time_iso_8601": "2018-08-05T09:44:16.622304Z", "url": "https://files.pythonhosted.org/packages/a9/a8/ab2b14bdbeb6dcc5bd15e8883c44827aef81e5a34a788b48787cf16f6130/zplgrf-1.4.2.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "8f03599f6101cfd2578cf95a1ddeafdd", "sha256": "be4c77a5ced28ddd66693832d6f7cb6db4d7b977568d9d9d990bb7db54c55d15"}, "downloads": -1, "filename": "zplgrf-1.5.tar.gz", "has_sig": false, "md5_digest": "8f03599f6101cfd2578cf95a1ddeafdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43004, "upload_time": "2019-05-24T19:48:03", "upload_time_iso_8601": "2019-05-24T19:48:03.874425Z", "url": "https://files.pythonhosted.org/packages/4b/90/b6cf7ac6d2e706051051e067332dd74b5abb6699fbfdc7a8b881cef3681b/zplgrf-1.5.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "a029860b6606e6d233e61484c5be4a74", "sha256": "4d57c6bc7323e265b5879c89c03c33df257f27d08de72e62a81e03d7031e8b3e"}, "downloads": -1, "filename": "zplgrf-1.6.0.tar.gz", "has_sig": false, "md5_digest": "a029860b6606e6d233e61484c5be4a74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43132, "upload_time": "2019-10-08T22:02:01", "upload_time_iso_8601": "2019-10-08T22:02:01.802203Z", "url": "https://files.pythonhosted.org/packages/9e/c8/eb2fee7e56b98d0cdc4c01ab652f6aef617c78a7c2f4eb2031dbf3f59a1c/zplgrf-1.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a029860b6606e6d233e61484c5be4a74", "sha256": "4d57c6bc7323e265b5879c89c03c33df257f27d08de72e62a81e03d7031e8b3e"}, "downloads": -1, "filename": "zplgrf-1.6.0.tar.gz", "has_sig": false, "md5_digest": "a029860b6606e6d233e61484c5be4a74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43132, "upload_time": "2019-10-08T22:02:01", "upload_time_iso_8601": "2019-10-08T22:02:01.802203Z", "url": "https://files.pythonhosted.org/packages/9e/c8/eb2fee7e56b98d0cdc4c01ab652f6aef617c78a7c2f4eb2031dbf3f59a1c/zplgrf-1.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:24 2020"}