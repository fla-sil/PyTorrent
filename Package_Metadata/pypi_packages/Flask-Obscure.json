{"info": {"author": "Clinton James", "author_email": "clinton.james@anuit.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=======================================\nFlask-Obscure\n=======================================\n\n.. currentmodule:: flask_obscure\n\n.. toctree::\n    :maxdepth: 2\n    :hidden:\n\n    self\n    api\n\nShowing a steadily increasing sequence of integer IDs leaks information to customers, competitors, or malicious entities about the number and frequency of customers, orders, etc.  Some URL example include::\n\n    /customer/123\n    /order/308\n\nThis module impliments routing variable converters in `Flask`_ and `Jinja2`_ filters to obscure sequential integer IDs.\nThis is based on the `Obscure`_ python module, which is installed automagically when you install this module.\n\nFeatures\n=======================================\n\n *  Automatically obscures sequential integer IDs in the variable\n    part of a URL when using :func:`flask.url_for`\n *  Automatically converts obscured IDs back to your sequential\n    integer IDs in the parameter of the function bound to the URL.\n *  Jinja filters automatically available.\n *  Provide five different converters and filters.\n\n\nConverters and Filters\n=======================================\n\nThere are five new converters: ``num``, ``hex``, ``b32``, ``b64``, and ``tame``.\nLets assume we are using :func:`flask.url_for` to create the URLs for two sequential customer IDs.\n\n``num``\n    Non-sequential numbers::\n\n        /customer/3303953358\n        /customer/1151314503\n\n``hex``\n    Hexadecimal displays in eight characters::\n\n        /customer/c4ee53c3\n        /customer/449faa47\n\n``b32``\n    Base32 displays in seven characters::\n\n        /customer/YTXFHTQ\n        /customer/ISP2URY\n\n``b64``\n    Base64 URL safe displays in six cahracters::\n\n        /customer/xO5Tzg\n        /customer/RJ-qRw\n\n``tame``\n    Is a Base32 with a rotated, alternate alphabet.\n    The letters 'I', 'O', and 'U' are replaced with the numbers '8', '9', and '0' to avoid common offensive words.\n    Otherwise, it performs just like Base32.\n\n\nInstall\n=======================================\n\nPip is our friend. It will also install the `Obscure`_ module as well. ::\n\n    $ pip install flask_obscure\n\nConfigure\n=======================================\n\nThe :class:`Obscure` class needs a ``salt`` or random number to make your obscured number sequence unique.  Pick any 32-bit number or use the following snippit to generate one for you::\n\n    python -c \"import os; print(int(os.urandom(4).encode('hex'),16))\"\n\n:class:`Obscure` uses the value ``OBSCURE_SALT`` in the flask configuration file if not given as the second parameter to either the constructor or :meth:`Obscure.init_app`.\n\n.. warning::\n    If your source goes to a public repository, you will want \n    to place ``OBSCURE_SALT`` in the :class:`flask.Flask` instance path.\n\nUsage\n=======================================\n\nImport the class :class:`Obscure` and initialize the with the :class:`flask.Flask` appliation by either using the constructor\n\n.. code-block:: python\n    :emphasize-lines: 5\n\n    from flask import Flask\n    from flask.ext.obscure import Obscure\n\n    app = Flask(app)\n    obscure = Obscure(app)\n\nor by using delayed initialization with :meth:`Obscure.init_app`\n\n.. code-block:: python\n    :emphasize-lines: 2\n\n    obscure = Obscure()\n    obscure.init_app(app)\n\n\nURL Routing Variables\n---------------------------------------\n\nWhen creating your routes with variables, you have five converters.\nThe converter is similar to any of the other built in coverters.\nIt takes the obscured ID given in the variable portion of the URL and converts it to your sequential ID in the callable bound to the URL.\n\nLets look at an example using ``num`` as the converter in the route.\n\n.. code-block:: python\n\n    @app.route('/customers/<num:cust_id>', endpoint='get-cust')\n    def get(cust_id):\n        # flask.request.url is '/customers/3303953358'\n        # cust_id is the sequential ID of 1\n        customer = get_customer_by_id(cust_it)\n\n        url = flask.url_for('get-cust', cust_id=customer.customer_id)\n        # when you create the URL, it is automatically obscured\n        # /customers/3303953358\n\n\nJinja2 Filters\n---------------------------------------\n\nThe URL is not the only place you can have leaking interger IDs.  It can\nalso happen in the data returned from your routing function.  If you are\nusing Jinja2 for templating, those same converters are available as filters.\n\n.. code-block:: html+jinja\n\n    <h1>Invoice #{{ invoice_number|tame }}</h1>\n\nWithin Code\n---------------------------------------\n\nTo obscure numbers within your code, use the methods of the :class:`flask_obscure.Obscure` instance object, which in turn is inherited from the python module `Obscure`_.  Assuming we used one of the code blocks from `configure`\n\n.. code-block:: python\n\n    visible_customer_id = obscure.encode_tame(customer_id)\n\nContribute\n=======================================\n\n| Issue Tracker: `http://github.com/jidn/flask-obscure/issues`\n| Source Code: `http://github.com/jidn/flask-obscure`\n\n\n.. Indices and tables\n   =======================================\n   \n   * :ref:`genindex`\n   * :ref:`modindex`\n   * :ref:`search`\n\n.. _Obscure: http://github.com/jidn/obscure\n.. _Flask: http://flask.pocoo.org/\n.. _Jinja2: http://jinja.pocoo.org/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/jidn/flask-obscure/", "keywords": "flask,REST,obfuscate,ID", "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "Flask-Obscure", "package_url": "https://pypi.org/project/Flask-Obscure/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Obscure/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.github.com/jidn/flask-obscure/"}, "release_url": "https://pypi.org/project/Flask-Obscure/1.0/", "requires_dist": null, "requires_python": null, "summary": "Obscure numerical IDs in URLs", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            =======================================<br>Flask-Obscure<br>=======================================<br><br>.. currentmodule:: flask_obscure<br><br>.. toctree::<br>    :maxdepth: 2<br>    :hidden:<br><br>    self<br>    api<br><br>Showing a steadily increasing sequence of integer IDs leaks information to customers, competitors, or malicious entities about the number and frequency of customers, orders, etc.  Some URL example include::<br><br>    /customer/123<br>    /order/308<br><br>This module impliments routing variable converters in `Flask`_ and `Jinja2`_ filters to obscure sequential integer IDs.<br>This is based on the `Obscure`_ python module, which is installed automagically when you install this module.<br><br>Features<br>=======================================<br><br> *  Automatically obscures sequential integer IDs in the variable<br>    part of a URL when using :func:`flask.url_for`<br> *  Automatically converts obscured IDs back to your sequential<br>    integer IDs in the parameter of the function bound to the URL.<br> *  Jinja filters automatically available.<br> *  Provide five different converters and filters.<br><br><br>Converters and Filters<br>=======================================<br><br>There are five new converters: ``num``, ``hex``, ``b32``, ``b64``, and ``tame``.<br>Lets assume we are using :func:`flask.url_for` to create the URLs for two sequential customer IDs.<br><br>``num``<br>    Non-sequential numbers::<br><br>        /customer/3303953358<br>        /customer/1151314503<br><br>``hex``<br>    Hexadecimal displays in eight characters::<br><br>        /customer/c4ee53c3<br>        /customer/449faa47<br><br>``b32``<br>    Base32 displays in seven characters::<br><br>        /customer/YTXFHTQ<br>        /customer/ISP2URY<br><br>``b64``<br>    Base64 URL safe displays in six cahracters::<br><br>        /customer/xO5Tzg<br>        /customer/RJ-qRw<br><br>``tame``<br>    Is a Base32 with a rotated, alternate alphabet.<br>    The letters 'I', 'O', and 'U' are replaced with the numbers '8', '9', and '0' to avoid common offensive words.<br>    Otherwise, it performs just like Base32.<br><br><br>Install<br>=======================================<br><br>Pip is our friend. It will also install the `Obscure`_ module as well. ::<br><br>    $ pip install flask_obscure<br><br>Configure<br>=======================================<br><br>The :class:`Obscure` class needs a ``salt`` or random number to make your obscured number sequence unique.  Pick any 32-bit number or use the following snippit to generate one for you::<br><br>    python -c \"import os; print(int(os.urandom(4).encode('hex'),16))\"<br><br>:class:`Obscure` uses the value ``OBSCURE_SALT`` in the flask configuration file if not given as the second parameter to either the constructor or :meth:`Obscure.init_app`.<br><br>.. warning::<br>    If your source goes to a public repository, you will want <br>    to place ``OBSCURE_SALT`` in the :class:`flask.Flask` instance path.<br><br>Usage<br>=======================================<br><br>Import the class :class:`Obscure` and initialize the with the :class:`flask.Flask` appliation by either using the constructor<br><br>.. code-block:: python<br>    :emphasize-lines: 5<br><br>    from flask import Flask<br>    from flask.ext.obscure import Obscure<br><br>    app = Flask(app)<br>    obscure = Obscure(app)<br><br>or by using delayed initialization with :meth:`Obscure.init_app`<br><br>.. code-block:: python<br>    :emphasize-lines: 2<br><br>    obscure = Obscure()<br>    obscure.init_app(app)<br><br><br>URL Routing Variables<br>---------------------------------------<br><br>When creating your routes with variables, you have five converters.<br>The converter is similar to any of the other built in coverters.<br>It takes the obscured ID given in the variable portion of the URL and converts it to your sequential ID in the callable bound to the URL.<br><br>Lets look at an example using ``num`` as the converter in the route.<br><br>.. code-block:: python<br><br>    @app.route('/customers/&lt;num:cust_id&gt;', endpoint='get-cust')<br>    def get(cust_id):<br>        # flask.request.url is '/customers/3303953358'<br>        # cust_id is the sequential ID of 1<br>        customer = get_customer_by_id(cust_it)<br><br>        url = flask.url_for('get-cust', cust_id=customer.customer_id)<br>        # when you create the URL, it is automatically obscured<br>        # /customers/3303953358<br><br><br>Jinja2 Filters<br>---------------------------------------<br><br>The URL is not the only place you can have leaking interger IDs.  It can<br>also happen in the data returned from your routing function.  If you are<br>using Jinja2 for templating, those same converters are available as filters.<br><br>.. code-block:: html+jinja<br><br>    &lt;h1&gt;Invoice #{{ invoice_number|tame }}&lt;/h1&gt;<br><br>Within Code<br>---------------------------------------<br><br>To obscure numbers within your code, use the methods of the :class:`flask_obscure.Obscure` instance object, which in turn is inherited from the python module `Obscure`_.  Assuming we used one of the code blocks from `configure`<br><br>.. code-block:: python<br><br>    visible_customer_id = obscure.encode_tame(customer_id)<br><br>Contribute<br>=======================================<br><br>| Issue Tracker: `http://github.com/jidn/flask-obscure/issues`<br>| Source Code: `http://github.com/jidn/flask-obscure`<br><br><br>.. Indices and tables<br>   =======================================<br>   <br>   * :ref:`genindex`<br>   * :ref:`modindex`<br>   * :ref:`search`<br><br>.. _Obscure: http://github.com/jidn/obscure<br>.. _Flask: http://flask.pocoo.org/<br>.. _Jinja2: http://jinja.pocoo.org/\n          </div>"}, "last_serial": 3273398, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "7bd1ac902775a6d316286a3ef1e1fa4c", "sha256": "e07aea1877be6010a3e0be2f505e31669cec0121caa9b950d93d1ca08b4f3893"}, "downloads": -1, "filename": "Flask_Obscure-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7bd1ac902775a6d316286a3ef1e1fa4c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 9430, "upload_time": "2017-10-23T21:51:39", "upload_time_iso_8601": "2017-10-23T21:51:39.442989Z", "url": "https://files.pythonhosted.org/packages/25/a8/ed36969471e08f3e97187cda651065e20003e4e4e0be998a8415697998ae/Flask_Obscure-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "477eb2b95ef648c49dfc1fd9607c9ef3", "sha256": "c1db04fca2dfa4c51ee927565d4bd5e9df3433712a871a54243252bfa30529f1"}, "downloads": -1, "filename": "Flask-Obscure-0.1.2.tar.gz", "has_sig": false, "md5_digest": "477eb2b95ef648c49dfc1fd9607c9ef3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6079, "upload_time": "2017-10-23T21:51:36", "upload_time_iso_8601": "2017-10-23T21:51:36.870833Z", "url": "https://files.pythonhosted.org/packages/fe/5d/97c7623c7185c11bcd48484bffba48b48066e34b0883894ceec058930191/Flask-Obscure-0.1.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "1940741cecbc423ab8339d3ebf22c6ed", "sha256": "cbafd0daaac29e0b54a3f99c15f29f661180e621ffddfa0883fb734c6d05727c"}, "downloads": -1, "filename": "Flask_Obscure-1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "1940741cecbc423ab8339d3ebf22c6ed", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8063, "upload_time": "2016-03-31T03:28:31", "upload_time_iso_8601": "2016-03-31T03:28:31.529723Z", "url": "https://files.pythonhosted.org/packages/3e/93/5e031e41203da41fe34d59ffa98eec99c345c40b3d7cede6d8f4797be4d7/Flask_Obscure-1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98e557a90caa0e3f56aab456ac91370f", "sha256": "8259a4972ec932baaa58d3e2afebd145cd40c89dc3e32adac9094bafaa665987"}, "downloads": -1, "filename": "Flask-Obscure-1.0.tar.gz", "has_sig": false, "md5_digest": "98e557a90caa0e3f56aab456ac91370f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5289, "upload_time": "2016-03-31T03:28:04", "upload_time_iso_8601": "2016-03-31T03:28:04.796942Z", "url": "https://files.pythonhosted.org/packages/c4/cd/c81b63d59491774645d5e6fc04cac2286607c8912beab623898b200dab00/Flask-Obscure-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1940741cecbc423ab8339d3ebf22c6ed", "sha256": "cbafd0daaac29e0b54a3f99c15f29f661180e621ffddfa0883fb734c6d05727c"}, "downloads": -1, "filename": "Flask_Obscure-1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "1940741cecbc423ab8339d3ebf22c6ed", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8063, "upload_time": "2016-03-31T03:28:31", "upload_time_iso_8601": "2016-03-31T03:28:31.529723Z", "url": "https://files.pythonhosted.org/packages/3e/93/5e031e41203da41fe34d59ffa98eec99c345c40b3d7cede6d8f4797be4d7/Flask_Obscure-1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98e557a90caa0e3f56aab456ac91370f", "sha256": "8259a4972ec932baaa58d3e2afebd145cd40c89dc3e32adac9094bafaa665987"}, "downloads": -1, "filename": "Flask-Obscure-1.0.tar.gz", "has_sig": false, "md5_digest": "98e557a90caa0e3f56aab456ac91370f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5289, "upload_time": "2016-03-31T03:28:04", "upload_time_iso_8601": "2016-03-31T03:28:04.796942Z", "url": "https://files.pythonhosted.org/packages/c4/cd/c81b63d59491774645d5e6fc04cac2286607c8912beab623898b200dab00/Flask-Obscure-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:34 2020"}