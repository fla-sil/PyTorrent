{"info": {"author": "David Men\u00e9ndez Hurtado", "author_email": "davidmenhur@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# tmscoring\nPython implementation of the [TMscore][2] program to compare structures of the same protein.\n\n## Usage:\nWe provide three classes, `TMscoring`, `Sscoring`, and `RMSDscoring`, that only differ in their default\noptimisation score.\n\nThey are initialised with the file paths to two PDB files:\n\n```\nalignment = tmscoring.TMscore('structure1.pdb', 'structure2.pdb')\n\n# Find the optimal alignment\nalignment.optimise()\n\n# Get the TM score:\nalignment.tmscore(**alignment.get_current_values())\n\n# Get the TM local scores:\nalignment.tmscore_samples(**alignment.get_current_values())\n\n# RMSD of the protein aligned according to TM score\nalignment.rmsd(**alignment.get_current_values())\n\n# Returns the transformation matrix between both structures:\nalignment.get_matrix(**alignment.get_current_values())\n\n# Save the aligned files:\nalignment.write(outputfile='aligned.pdb', append=True)\n```\n\nThe structures can be matched by index (default), or performing a global sequence alignment with Smith-Waterman\nusing a match score of 2, mismatch of -1, a gap penalty of -0.5 for opening and -0.1 for extending.\n\n\n\n### Utility functions:\n\n`get_tm(path_to_pdb1, path_to_pdb2)` and `get_rmsd(pdb1, pdb2)` are simple wrappers that compute TM score or RMSD.\n\n\n## What is different?\ntmscoring is a Python library that conveniently exposes all the necessary variables.\nThis removes the necessity to parse files.\n\nAlso, the minimisation engine is [MINUIT's Migrad][1], a powerful and robust derivative-free minimisation algorithm,\nheavily tested by particle physicists for decades.\nIn our testing, `tmscoring` yields the same or slightly better scores than upstream `TMscore`.\n\n\n[1]: https://root.cern.ch/root/html534/TMinuit.html\n[2]: https://zhanglab.ccmb.med.umich.edu/TM-score/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Dapid/tmscoring", "keywords": "", "license": "BSD 3-clause", "maintainer": "", "maintainer_email": "", "name": "tmscoring", "package_url": "https://pypi.org/project/tmscoring/", "platform": "", "project_url": "https://pypi.org/project/tmscoring/", "project_urls": {"Homepage": "https://github.com/Dapid/tmscoring"}, "release_url": "https://pypi.org/project/tmscoring/0.4.post0/", "requires_dist": null, "requires_python": "", "summary": "Python implementation of the TMscore program", "version": "0.4.post0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tmscoring</h1>\n<p>Python implementation of the <a href=\"https://zhanglab.ccmb.med.umich.edu/TM-score/\" rel=\"nofollow\">TMscore</a> program to compare structures of the same protein.</p>\n<h2>Usage:</h2>\n<p>We provide three classes, <code>TMscoring</code>, <code>Sscoring</code>, and <code>RMSDscoring</code>, that only differ in their default\noptimisation score.</p>\n<p>They are initialised with the file paths to two PDB files:</p>\n<pre><code>alignment = tmscoring.TMscore('structure1.pdb', 'structure2.pdb')\n\n# Find the optimal alignment\nalignment.optimise()\n\n# Get the TM score:\nalignment.tmscore(**alignment.get_current_values())\n\n# Get the TM local scores:\nalignment.tmscore_samples(**alignment.get_current_values())\n\n# RMSD of the protein aligned according to TM score\nalignment.rmsd(**alignment.get_current_values())\n\n# Returns the transformation matrix between both structures:\nalignment.get_matrix(**alignment.get_current_values())\n\n# Save the aligned files:\nalignment.write(outputfile='aligned.pdb', append=True)\n</code></pre>\n<p>The structures can be matched by index (default), or performing a global sequence alignment with Smith-Waterman\nusing a match score of 2, mismatch of -1, a gap penalty of -0.5 for opening and -0.1 for extending.</p>\n<h3>Utility functions:</h3>\n<p><code>get_tm(path_to_pdb1, path_to_pdb2)</code> and <code>get_rmsd(pdb1, pdb2)</code> are simple wrappers that compute TM score or RMSD.</p>\n<h2>What is different?</h2>\n<p>tmscoring is a Python library that conveniently exposes all the necessary variables.\nThis removes the necessity to parse files.</p>\n<p>Also, the minimisation engine is <a href=\"https://root.cern.ch/root/html534/TMinuit.html\" rel=\"nofollow\">MINUIT's Migrad</a>, a powerful and robust derivative-free minimisation algorithm,\nheavily tested by particle physicists for decades.\nIn our testing, <code>tmscoring</code> yields the same or slightly better scores than upstream <code>TMscore</code>.</p>\n\n          </div>"}, "last_serial": 4973286, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cadae563d96c3a6ef0fc7e400f105e72", "sha256": "83682bd3c895eb9b4839e4804bc0c7fa2126fdb4153eb74a2b99e01dcbf475dd"}, "downloads": -1, "filename": "tmscoring-0.1-py2.7.egg", "has_sig": false, "md5_digest": "cadae563d96c3a6ef0fc7e400f105e72", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 9418, "upload_time": "2019-03-21T13:44:18", "upload_time_iso_8601": "2019-03-21T13:44:18.694007Z", "url": "https://files.pythonhosted.org/packages/00/da/0f394499dc0505b14621de15b6cedce2a9ecbab196f2c71351d97986a360/tmscoring-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e8d739623c9ad3d6f1667bff76e74d3", "sha256": "0af98696c78a36d30146c478e57fca583f88b3ffba6be6ed98ef154190e87144"}, "downloads": -1, "filename": "tmscoring-0.1.tar.gz", "has_sig": false, "md5_digest": "7e8d739623c9ad3d6f1667bff76e74d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4108, "upload_time": "2015-07-30T13:50:13", "upload_time_iso_8601": "2015-07-30T13:50:13.349744Z", "url": "https://files.pythonhosted.org/packages/d4/cb/6fb81dd04f018b35ffb13fd2e1102e98b8153ff33039d725081a30986e04/tmscoring-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0b794d5b8a81bcfaf40dad38718c726a", "sha256": "eeba86521fe2313183a88031e36be4c52bd6f0189a781a62104e97f361d7667f"}, "downloads": -1, "filename": "tmscoring-0.2.tar.gz", "has_sig": false, "md5_digest": "0b794d5b8a81bcfaf40dad38718c726a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4122, "upload_time": "2016-09-26T13:26:47", "upload_time_iso_8601": "2016-09-26T13:26:47.772359Z", "url": "https://files.pythonhosted.org/packages/12/45/dcfbd64527fa8f6328eef47cd042df8492300c95d8463c9af84fb9b32c76/tmscoring-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0f4698ef9433727ee6be578615c56c37", "sha256": "1a6f33da98df60629411cb5c5b5a13cb3b5212bb8618126dd67a7b2dca76a5b4"}, "downloads": -1, "filename": "tmscoring-0.3.tar.gz", "has_sig": false, "md5_digest": "0f4698ef9433727ee6be578615c56c37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4189, "upload_time": "2019-03-21T13:44:20", "upload_time_iso_8601": "2019-03-21T13:44:20.876410Z", "url": "https://files.pythonhosted.org/packages/55/30/63d06219fd22c4d0b0970465428a09d2ad1059680c5ffb42b47f7fb7e70c/tmscoring-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "49e6c614e6dad388c5d930acc60d03e6", "sha256": "604f73ab4507d44ac6d80a7917c3c058a11d1ee3f8ff03edd8974d8aabbcb0ad"}, "downloads": -1, "filename": "tmscoring-0.4.tar.gz", "has_sig": false, "md5_digest": "49e6c614e6dad388c5d930acc60d03e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5277, "upload_time": "2019-03-22T15:27:40", "upload_time_iso_8601": "2019-03-22T15:27:40.190964Z", "url": "https://files.pythonhosted.org/packages/90/26/fee2d1d7d443c23d4e7e9277eb15d72c6ff2c248603915a8dac764d7d119/tmscoring-0.4.tar.gz", "yanked": false}], "0.4.post0": [{"comment_text": "", "digests": {"md5": "070b08ff12478e49371aa86e51afcb41", "sha256": "7cabd668e4db548719e840ceb188b197f93cd77cb6c6db81a22ed045300e92be"}, "downloads": -1, "filename": "tmscoring-0.4.post0.tar.gz", "has_sig": false, "md5_digest": "070b08ff12478e49371aa86e51afcb41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5293, "upload_time": "2019-03-22T15:28:53", "upload_time_iso_8601": "2019-03-22T15:28:53.292205Z", "url": "https://files.pythonhosted.org/packages/7c/eb/d8713651b8b2236b3fe1459dc410fdc409595f43bda2f94a9df28d0977b9/tmscoring-0.4.post0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "070b08ff12478e49371aa86e51afcb41", "sha256": "7cabd668e4db548719e840ceb188b197f93cd77cb6c6db81a22ed045300e92be"}, "downloads": -1, "filename": "tmscoring-0.4.post0.tar.gz", "has_sig": false, "md5_digest": "070b08ff12478e49371aa86e51afcb41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5293, "upload_time": "2019-03-22T15:28:53", "upload_time_iso_8601": "2019-03-22T15:28:53.292205Z", "url": "https://files.pythonhosted.org/packages/7c/eb/d8713651b8b2236b3fe1459dc410fdc409595f43bda2f94a9df28d0977b9/tmscoring-0.4.post0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:09 2020"}