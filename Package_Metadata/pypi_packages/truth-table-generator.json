{"info": {"author": "Francisco Bustamante", "author_email": "chicolucio@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# truth-table-generator\n\n**truth-table-generator** is a tool that allows to generate a truth table.\nIt is a fork of *truths* by [tr3buchet](https://github.com/tr3buchet/truths).\n\n![Multiple outputs](https://raw.githubusercontent.com/chicolucio/truth-table-generator/master/images/ttg_small.png)\n\nIt merges some of the pull requests in the original and other external helpers.\nThe following are some of the changes and enhancements from the original:\n\n- [tabulate](https://github.com/astanin/python-tabulate) instead of obsolete\n[prettytable](https://code.google.com/archive/p/prettytable/) as main tool to\nrepresent tabular data in ASCII tables (PrettyTable version is still available).\n    - so there are many table formats available as such LaTeX, Org Tables, HTML\n    and all others cited on [tabulate docs](https://github.com/astanin/python-tabulate)\n- the table is now a Pandas DataFrame so you can make the output more visually\nappealing with [Pandas Styling](https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html).\nSee examples below.\n- new function `valuation` that eval a proposition as a tautology, contradiction\nor contingency.\n- new command line interface (CLI) for printing a truth table from terminal.\n\n## Installation\n\n`pip install truth-table-generator`\n\n\n## Usage\n\n### Importing and syntax\n\nFirst, let's import the package. `ttg` stands for *truth-table-generator*.\n\n```python\nimport ttg\n```\n\nA truth table has one column for each input variable (for example, *p* and *q*),\nand one final column showing all of the possible results of the logical\noperation that the table represents. If the input has only one list of strings,\neach string is considered an input variable:\n\n```python\nprint(ttg.Truths(['p', 'q', 'r']))\n```\n```\n+-----+-----+-----+\n|  p  |  q  |  r  |\n|-----+-----+-----|\n|  1  |  1  |  1  |\n|  1  |  1  |  0  |\n|  1  |  0  |  1  |\n|  1  |  0  |  0  |\n|  0  |  1  |  1  |\n|  0  |  1  |  0  |\n|  0  |  0  |  1  |\n|  0  |  0  |  0  |\n+-----+-----+-----+\n```\n\nA second list of strings can be passed with propositional expressions created\nwith logical operators.\n\n```python\nprint(ttg.Truths(['p', 'q', 'r'], ['p and q and r', 'p or q or r', '(p or (~q)) => r']))\n```\n```\n+-----+-----+-----+-----------------+---------------+--------------------+\n|  p  |  q  |  r  |  p and q and r  |  p or q or r  |  (p or (~q)) => r  |\n|-----+-----+-----+-----------------+---------------+--------------------|\n|  1  |  1  |  1  |        1        |       1       |         1          |\n|  1  |  1  |  0  |        0        |       1       |         0          |\n|  1  |  0  |  1  |        0        |       1       |         1          |\n|  1  |  0  |  0  |        0        |       1       |         0          |\n|  0  |  1  |  1  |        0        |       1       |         1          |\n|  0  |  1  |  0  |        0        |       1       |         1          |\n|  0  |  0  |  1  |        0        |       1       |         1          |\n|  0  |  0  |  0  |        0        |       0       |         0          |\n+-----+-----+-----+-----------------+---------------+--------------------+\n```\n\n### Operators and their representations:\n\n- *negation*: `'not'`, `'-'`, `'~'`\n- *logical disjunction*: `'or'`\n- *logical nor*: `'nor'`\n- *exclusive disjunction*: `'xor'`, `'!='`\n- *logical conjunction*:  `'and'`\n- *logical NAND*: `'nand'`\n- *material implication*: `'=>'`, `'implies'`\n- *logical biconditional*: `'='`\n\n**Note**: Use parentheses! Especially with the negation operator. Use tables\nabove and below as reference. Although precedence rules are used, sometimes\nprecedence between conjunction and disjunction is unspecified requiring to\n provide it explicitly in given formula with parentheses.\n\n### Showing words (True / False)\n\nIf you prefer the words True and False instead of numbers 0 and 1, there is a\nthird parameter, boolean type, `ints` that can be set to `False`:\n\n```python\nprint(ttg.Truths(['p', 'q'], ['p and q', 'p or q', '(p or (~q)) => (~p)'], ints=False))\n```\n```\n+-------+-------+-----------+----------+-----------------------+\n|   p   |   q   |  p and q  |  p or q  |  (p or (~q)) => (~p)  |\n|-------+-------+-----------+----------+-----------------------|\n| True  | True  |   True    |   True   |         False         |\n| True  | False |   False   |   True   |         False         |\n| False | True  |   False   |   True   |         True          |\n| False | False |   False   |  False   |         True          |\n+-------+-------+-----------+----------+-----------------------+\n```\n\n### Formatting options with PrettyTable and Tabulate\n\nFor more formatting options, let's create a truth table variable:\n```python\ntable = ttg.Truths(['p', 'q'], ['p => q', 'p = q'])\n```\nThe command `print(table)` renders the standard table as seen on above examples:\n```\n+-----+-----+----------+---------+\n|  p  |  q  |  p => q  |  p = q  |\n|-----+-----+----------+---------|\n|  1  |  1  |    1     |    1    |\n|  1  |  0  |    0     |    0    |\n|  0  |  1  |    1     |    0    |\n|  0  |  0  |    1     |    1    |\n+-----+-----+----------+---------+\n```\nThe command `print(table.as_prettytable())` renders the table with PrettyTable\npackage as on the original version of this package:\n```\n+---+---+--------+-------+\n| p | q | p => q | p = q |\n+---+---+--------+-------+\n| 1 | 1 |   1    |   1   |\n| 1 | 0 |   0    |   0   |\n| 0 | 1 |   1    |   0   |\n| 0 | 0 |   1    |   1   |\n+---+---+--------+-------+\n```\nAs can be seen, the PrettyTable output has less blank spaces. However, the\nPrettyTable package has much less output options and it is deprecated. So I\ndecided to use the Tabulate package as standard.\n\nThe command `print(table.as_tabulate())` renders the table with Tabulate\npackage. The first column presents line numbers (that can be disabled with\nthe parameter `index=False`):\n```\n+----+-----+-----+----------+---------+\n|    |  p  |  q  |  p => q  |  p = q  |\n|----+-----+-----+----------+---------|\n| 1  |  1  |  1  |    1     |    1    |\n| 2  |  1  |  0  |    0     |    0    |\n| 3  |  0  |  1  |    1     |    0    |\n| 4  |  0  |  0  |    1     |    1    |\n+----+-----+-----+----------+---------+\n```\n\nUsing Tabulate, we can use any of the formats available. Let's output a LaTeX\ntable without the line number column:\n\n```python\nprint(table.as_tabulate(index=False, table_format='latex'))\n```\n```\n\\begin{tabular}{cccc}\n\\hline\n  p  &  q  &  p =\\ensuremath{>} q  &  p = q  \\\\\n\\hline\n  1  &  1  &    1     &    1    \\\\\n  1  &  0  &    0     &    0    \\\\\n  0  &  1  &    1     &    0    \\\\\n  0  &  0  &    1     &    1    \\\\\n\\hline\n\\end{tabular}\n```\n\n### Formatting options with Pandas\n\nWith an IPython terminal or a Jupyter Notebook, it is possible to render a Pandas\nDataFrame with `table.as_pandas()`:\n\n![pandas01](https://raw.githubusercontent.com/chicolucio/truth-table-generator/master/images/pandas01.png)\n\nAnd this output can be modified with Pandas Styling\n\n![pandas02](https://raw.githubusercontent.com/chicolucio/truth-table-generator/master/images/pandas02.png)\n\nMore advanced modifications can be done with functions that apply styling changes.\nSee the [styles tutorial notebook](styling_tutorial.ipynb) for examples.\nSee the image below for a fancy example with two lines and two columns\nhighlighted with yellow background and different colors for True and False.\n\n![pandas03](https://raw.githubusercontent.com/chicolucio/truth-table-generator/master/images/pandas03.png)\n\n### The `valuation` function\n\nLet's see the how to use the `valuation` function with a new truth table:\n```python\ntable_val = ttg.Truths(['p', 'q'], ['p = q', 'p and (~p)', '(p and q) => p'])\nprint(table_val)\n```\n```\n+-----+-----+---------+--------------+------------------+\n|  p  |  q  |  p = q  |  p and (~p)  |  (p and q) => p  |\n|-----+-----+---------+--------------+------------------|\n|  1  |  1  |    1    |      0       |        1         |\n|  1  |  0  |    0    |      0       |        1         |\n|  0  |  1  |    0    |      0       |        1         |\n|  0  |  0  |    1    |      0       |        1         |\n+-----+-----+---------+--------------+------------------+\n```\nWithout arguments, the `valuation` function classifies the *last column* as a\ntautology, a contradiction or a contingency:\n```python\ntable_val.valuation()\n```\n```\n'Tautology'\n```\nIf a integer is used as argument, the function classifies the correspondent\ncolumn:\n```python\ntable_val.valuation(3)\n```\n```\n'Contingency'\n```\n```python\ntable_val.valuation(4)\n```\n```\n'Contradiction'\n```\n\n### CLI utility\n\nFor those who work in the terminal there is a simple command line interface\n(CLI) for printing tables. The script name is `ttg_cly.py` and it accepts\nthe following syntax according to its `--help`:\n\n```\nusage: ttg_cli.py [-h] [-p PROPOSITIONS] [-i INTS] variables\n\npositional arguments:\n  variables             List of variables e. g. \"['p', 'q']\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PROPOSITIONS, --propositions PROPOSITIONS\n                        List of propositions e. g. \"['p or q', 'p and q']\"\n  -i INTS, --ints INTS  True for 0 and 1; False for words\n```\n\nAs seen, the list of variables is mandatory. Note that the lists must be between\n`\"`.\n\n```bash\n$ ttg_cli.py \"['p', 'q', 'r']\"\n```\n```\n+-----+-----+-----+\n|  p  |  q  |  r  |\n|-----+-----+-----|\n|  1  |  1  |  1  |\n|  1  |  1  |  0  |\n|  1  |  0  |  1  |\n|  1  |  0  |  0  |\n|  0  |  1  |  1  |\n|  0  |  1  |  0  |\n|  0  |  0  |  1  |\n|  0  |  0  |  0  |\n+-----+-----+-----+\n```\n\nThe CLI utility also has an option, `-i`, to show words instead of numbers:\n```bash\n$ ttg_cli.py \"['p', 'q', 'r']\" -i False\n```\n```\n+-------+-------+-------+\n|   p   |   q   |   r   |\n|-------+-------+-------|\n| True  | True  | True  |\n| True  | True  | False |\n| True  | False | True  |\n| True  | False | False |\n| False | True  | True  |\n| False | True  | False |\n| False | False | True  |\n| False | False | False |\n+-------+-------+-------+\n```\n\nA `-p` parameter must be before the propositions list:\n```bash\n$ ttg_cli.py \"['p', 'q', 'r']\" -p \"['p or q', 'p and q or r']\"\n```\n```\n+-----+-----+-----+----------+----------------+\n|  p  |  q  |  r  |  p or q  |  p and q or r  |\n|-----+-----+-----+----------+----------------|\n|  1  |  1  |  1  |    1     |       1        |\n|  1  |  1  |  0  |    1     |       1        |\n|  1  |  0  |  1  |    1     |       1        |\n|  1  |  0  |  0  |    1     |       0        |\n|  0  |  1  |  1  |    1     |       1        |\n|  0  |  1  |  0  |    1     |       0        |\n|  0  |  0  |  1  |    0     |       1        |\n|  0  |  0  |  0  |    0     |       0        |\n+-----+-----+-----+----------+----------------+\n```\n\nWith words instead of numbers:\n\n```bash\n$ ttg_cli.py \"['p', 'q', 'r']\" -p \"['p or q', 'p and q or r']\" -i False\n```\n```\n+-------+-------+-------+----------+----------------+\n|   p   |   q   |   r   |  p or q  |  p and q or r  |\n|-------+-------+-------+----------+----------------|\n| True  | True  | True  |   True   |      True      |\n| True  | True  | False |   True   |      True      |\n| True  | False | True  |   True   |      True      |\n| True  | False | False |   True   |     False      |\n| False | True  | True  |   True   |      True      |\n| False | True  | False |   True   |     False      |\n| False | False | True  |  False   |      True      |\n| False | False | False |  False   |     False      |\n+-------+-------+-------+----------+----------------+\n```\n\nThe real look of the table depends on your terminal appearance configuration.\nThe green on black background screenshots from the first picture of this README\nare from my terminal.\n\n## Contributing\n\nAll contributions are welcome.\n\n**Issues**\n\nFeel free to submit issues regarding:\n\n- recommendations\n- more examples for the tutorial\n- enhancement requests and new useful features\n- code bugs\n\n**Pull requests**\n\n- before starting to work on your pull request, please submit an issue first\n- fork the repo\n- clone the project to your own machine\n- commit changes to your own branch\n- push your work back up to your fork\n- submit a pull request so that your changes can be reviewed\n\n\n## License\n\nApache 2.0, see [LICENSE](LICENSE)\n\n## Citing\n\nIf you use *truth-table-generator* in a scientific publication or in classes,\nplease consider citing as\n\nF. L. S. Bustamante, *truth-table-generator* - generating truth tables., 2019 -\nAvailable at: https://github.com/chicolucio/truth-table-generator\n\n## Funding\n\nIf you enjoy this project and would like to see many more math and science\nrelated programming projects, I would greatly appreciate any assistance. Send me\nan e-mail to know how to assist. Many more projects are to come and your support\nwill be rewarded with more STEM coding projects :-)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chicolucio/truth-table-generator", "keywords": "truth,table,truth table,truthtable,generator,logic,tautology,ttg", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "truth-table-generator", "package_url": "https://pypi.org/project/truth-table-generator/", "platform": "", "project_url": "https://pypi.org/project/truth-table-generator/", "project_urls": {"Homepage": "https://github.com/chicolucio/truth-table-generator"}, "release_url": "https://pypi.org/project/truth-table-generator/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "Python API that auto generates truth tables", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>truth-table-generator</h1>\n<p><strong>truth-table-generator</strong> is a tool that allows to generate a truth table.\nIt is a fork of <em>truths</em> by <a href=\"https://github.com/tr3buchet/truths\" rel=\"nofollow\">tr3buchet</a>.</p>\n<p><img alt=\"Multiple outputs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8befa1d022434855ded0777dc8f8adbaed840629/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636869636f6c7563696f2f74727574682d7461626c652d67656e657261746f722f6d61737465722f696d616765732f7474675f736d616c6c2e706e67\"></p>\n<p>It merges some of the pull requests in the original and other external helpers.\nThe following are some of the changes and enhancements from the original:</p>\n<ul>\n<li><a href=\"https://github.com/astanin/python-tabulate\" rel=\"nofollow\">tabulate</a> instead of obsolete\n<a href=\"https://code.google.com/archive/p/prettytable/\" rel=\"nofollow\">prettytable</a> as main tool to\nrepresent tabular data in ASCII tables (PrettyTable version is still available).\n<ul>\n<li>so there are many table formats available as such LaTeX, Org Tables, HTML\nand all others cited on <a href=\"https://github.com/astanin/python-tabulate\" rel=\"nofollow\">tabulate docs</a></li>\n</ul>\n</li>\n<li>the table is now a Pandas DataFrame so you can make the output more visually\nappealing with <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html\" rel=\"nofollow\">Pandas Styling</a>.\nSee examples below.</li>\n<li>new function <code>valuation</code> that eval a proposition as a tautology, contradiction\nor contingency.</li>\n<li>new command line interface (CLI) for printing a truth table from terminal.</li>\n</ul>\n<h2>Installation</h2>\n<p><code>pip install truth-table-generator</code></p>\n<h2>Usage</h2>\n<h3>Importing and syntax</h3>\n<p>First, let's import the package. <code>ttg</code> stands for <em>truth-table-generator</em>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ttg</span>\n</pre>\n<p>A truth table has one column for each input variable (for example, <em>p</em> and <em>q</em>),\nand one final column showing all of the possible results of the logical\noperation that the table represents. If the input has only one list of strings,\neach string is considered an input variable:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ttg</span><span class=\"o\">.</span><span class=\"n\">Truths</span><span class=\"p\">([</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">]))</span>\n</pre>\n<pre><code>+-----+-----+-----+\n|  p  |  q  |  r  |\n|-----+-----+-----|\n|  1  |  1  |  1  |\n|  1  |  1  |  0  |\n|  1  |  0  |  1  |\n|  1  |  0  |  0  |\n|  0  |  1  |  1  |\n|  0  |  1  |  0  |\n|  0  |  0  |  1  |\n|  0  |  0  |  0  |\n+-----+-----+-----+\n</code></pre>\n<p>A second list of strings can be passed with propositional expressions created\nwith logical operators.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ttg</span><span class=\"o\">.</span><span class=\"n\">Truths</span><span class=\"p\">([</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'p and q and r'</span><span class=\"p\">,</span> <span class=\"s1\">'p or q or r'</span><span class=\"p\">,</span> <span class=\"s1\">'(p or (~q)) =&gt; r'</span><span class=\"p\">]))</span>\n</pre>\n<pre><code>+-----+-----+-----+-----------------+---------------+--------------------+\n|  p  |  q  |  r  |  p and q and r  |  p or q or r  |  (p or (~q)) =&gt; r  |\n|-----+-----+-----+-----------------+---------------+--------------------|\n|  1  |  1  |  1  |        1        |       1       |         1          |\n|  1  |  1  |  0  |        0        |       1       |         0          |\n|  1  |  0  |  1  |        0        |       1       |         1          |\n|  1  |  0  |  0  |        0        |       1       |         0          |\n|  0  |  1  |  1  |        0        |       1       |         1          |\n|  0  |  1  |  0  |        0        |       1       |         1          |\n|  0  |  0  |  1  |        0        |       1       |         1          |\n|  0  |  0  |  0  |        0        |       0       |         0          |\n+-----+-----+-----+-----------------+---------------+--------------------+\n</code></pre>\n<h3>Operators and their representations:</h3>\n<ul>\n<li><em>negation</em>: <code>'not'</code>, <code>'-'</code>, <code>'~'</code></li>\n<li><em>logical disjunction</em>: <code>'or'</code></li>\n<li><em>logical nor</em>: <code>'nor'</code></li>\n<li><em>exclusive disjunction</em>: <code>'xor'</code>, <code>'!='</code></li>\n<li><em>logical conjunction</em>:  <code>'and'</code></li>\n<li><em>logical NAND</em>: <code>'nand'</code></li>\n<li><em>material implication</em>: <code>'=&gt;'</code>, <code>'implies'</code></li>\n<li><em>logical biconditional</em>: <code>'='</code></li>\n</ul>\n<p><strong>Note</strong>: Use parentheses! Especially with the negation operator. Use tables\nabove and below as reference. Although precedence rules are used, sometimes\nprecedence between conjunction and disjunction is unspecified requiring to\nprovide it explicitly in given formula with parentheses.</p>\n<h3>Showing words (True / False)</h3>\n<p>If you prefer the words True and False instead of numbers 0 and 1, there is a\nthird parameter, boolean type, <code>ints</code> that can be set to <code>False</code>:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ttg</span><span class=\"o\">.</span><span class=\"n\">Truths</span><span class=\"p\">([</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'p and q'</span><span class=\"p\">,</span> <span class=\"s1\">'p or q'</span><span class=\"p\">,</span> <span class=\"s1\">'(p or (~q)) =&gt; (~p)'</span><span class=\"p\">],</span> <span class=\"n\">ints</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n</pre>\n<pre><code>+-------+-------+-----------+----------+-----------------------+\n|   p   |   q   |  p and q  |  p or q  |  (p or (~q)) =&gt; (~p)  |\n|-------+-------+-----------+----------+-----------------------|\n| True  | True  |   True    |   True   |         False         |\n| True  | False |   False   |   True   |         False         |\n| False | True  |   False   |   True   |         True          |\n| False | False |   False   |  False   |         True          |\n+-------+-------+-----------+----------+-----------------------+\n</code></pre>\n<h3>Formatting options with PrettyTable and Tabulate</h3>\n<p>For more formatting options, let's create a truth table variable:</p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">ttg</span><span class=\"o\">.</span><span class=\"n\">Truths</span><span class=\"p\">([</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'p =&gt; q'</span><span class=\"p\">,</span> <span class=\"s1\">'p = q'</span><span class=\"p\">])</span>\n</pre>\n<p>The command <code>print(table)</code> renders the standard table as seen on above examples:</p>\n<pre><code>+-----+-----+----------+---------+\n|  p  |  q  |  p =&gt; q  |  p = q  |\n|-----+-----+----------+---------|\n|  1  |  1  |    1     |    1    |\n|  1  |  0  |    0     |    0    |\n|  0  |  1  |    1     |    0    |\n|  0  |  0  |    1     |    1    |\n+-----+-----+----------+---------+\n</code></pre>\n<p>The command <code>print(table.as_prettytable())</code> renders the table with PrettyTable\npackage as on the original version of this package:</p>\n<pre><code>+---+---+--------+-------+\n| p | q | p =&gt; q | p = q |\n+---+---+--------+-------+\n| 1 | 1 |   1    |   1   |\n| 1 | 0 |   0    |   0   |\n| 0 | 1 |   1    |   0   |\n| 0 | 0 |   1    |   1   |\n+---+---+--------+-------+\n</code></pre>\n<p>As can be seen, the PrettyTable output has less blank spaces. However, the\nPrettyTable package has much less output options and it is deprecated. So I\ndecided to use the Tabulate package as standard.</p>\n<p>The command <code>print(table.as_tabulate())</code> renders the table with Tabulate\npackage. The first column presents line numbers (that can be disabled with\nthe parameter <code>index=False</code>):</p>\n<pre><code>+----+-----+-----+----------+---------+\n|    |  p  |  q  |  p =&gt; q  |  p = q  |\n|----+-----+-----+----------+---------|\n| 1  |  1  |  1  |    1     |    1    |\n| 2  |  1  |  0  |    0     |    0    |\n| 3  |  0  |  1  |    1     |    0    |\n| 4  |  0  |  0  |    1     |    1    |\n+----+-----+-----+----------+---------+\n</code></pre>\n<p>Using Tabulate, we can use any of the formats available. Let's output a LaTeX\ntable without the line number column:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">as_tabulate</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">table_format</span><span class=\"o\">=</span><span class=\"s1\">'latex'</span><span class=\"p\">))</span>\n</pre>\n<pre><code>\\begin{tabular}{cccc}\n\\hline\n  p  &amp;  q  &amp;  p =\\ensuremath{&gt;} q  &amp;  p = q  \\\\\n\\hline\n  1  &amp;  1  &amp;    1     &amp;    1    \\\\\n  1  &amp;  0  &amp;    0     &amp;    0    \\\\\n  0  &amp;  1  &amp;    1     &amp;    0    \\\\\n  0  &amp;  0  &amp;    1     &amp;    1    \\\\\n\\hline\n\\end{tabular}\n</code></pre>\n<h3>Formatting options with Pandas</h3>\n<p>With an IPython terminal or a Jupyter Notebook, it is possible to render a Pandas\nDataFrame with <code>table.as_pandas()</code>:</p>\n<p><img alt=\"pandas01\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25a975f6a7354003514695ba1c04edf1fd54adc0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636869636f6c7563696f2f74727574682d7461626c652d67656e657261746f722f6d61737465722f696d616765732f70616e64617330312e706e67\"></p>\n<p>And this output can be modified with Pandas Styling</p>\n<p><img alt=\"pandas02\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20816ee201827f0287268526b54faf68c8fbe60e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636869636f6c7563696f2f74727574682d7461626c652d67656e657261746f722f6d61737465722f696d616765732f70616e64617330322e706e67\"></p>\n<p>More advanced modifications can be done with functions that apply styling changes.\nSee the <a href=\"styling_tutorial.ipynb\" rel=\"nofollow\">styles tutorial notebook</a> for examples.\nSee the image below for a fancy example with two lines and two columns\nhighlighted with yellow background and different colors for True and False.</p>\n<p><img alt=\"pandas03\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d59f26bba67d2b7801d301cd993a68fcff953ea/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636869636f6c7563696f2f74727574682d7461626c652d67656e657261746f722f6d61737465722f696d616765732f70616e64617330332e706e67\"></p>\n<h3>The <code>valuation</code> function</h3>\n<p>Let's see the how to use the <code>valuation</code> function with a new truth table:</p>\n<pre><span class=\"n\">table_val</span> <span class=\"o\">=</span> <span class=\"n\">ttg</span><span class=\"o\">.</span><span class=\"n\">Truths</span><span class=\"p\">([</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'p = q'</span><span class=\"p\">,</span> <span class=\"s1\">'p and (~p)'</span><span class=\"p\">,</span> <span class=\"s1\">'(p and q) =&gt; p'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table_val</span><span class=\"p\">)</span>\n</pre>\n<pre><code>+-----+-----+---------+--------------+------------------+\n|  p  |  q  |  p = q  |  p and (~p)  |  (p and q) =&gt; p  |\n|-----+-----+---------+--------------+------------------|\n|  1  |  1  |    1    |      0       |        1         |\n|  1  |  0  |    0    |      0       |        1         |\n|  0  |  1  |    0    |      0       |        1         |\n|  0  |  0  |    1    |      0       |        1         |\n+-----+-----+---------+--------------+------------------+\n</code></pre>\n<p>Without arguments, the <code>valuation</code> function classifies the <em>last column</em> as a\ntautology, a contradiction or a contingency:</p>\n<pre><span class=\"n\">table_val</span><span class=\"o\">.</span><span class=\"n\">valuation</span><span class=\"p\">()</span>\n</pre>\n<pre><code>'Tautology'\n</code></pre>\n<p>If a integer is used as argument, the function classifies the correspondent\ncolumn:</p>\n<pre><span class=\"n\">table_val</span><span class=\"o\">.</span><span class=\"n\">valuation</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>'Contingency'\n</code></pre>\n<pre><span class=\"n\">table_val</span><span class=\"o\">.</span><span class=\"n\">valuation</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<pre><code>'Contradiction'\n</code></pre>\n<h3>CLI utility</h3>\n<p>For those who work in the terminal there is a simple command line interface\n(CLI) for printing tables. The script name is <code>ttg_cly.py</code> and it accepts\nthe following syntax according to its <code>--help</code>:</p>\n<pre><code>usage: ttg_cli.py [-h] [-p PROPOSITIONS] [-i INTS] variables\n\npositional arguments:\n  variables             List of variables e. g. \"['p', 'q']\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PROPOSITIONS, --propositions PROPOSITIONS\n                        List of propositions e. g. \"['p or q', 'p and q']\"\n  -i INTS, --ints INTS  True for 0 and 1; False for words\n</code></pre>\n<p>As seen, the list of variables is mandatory. Note that the lists must be between\n<code>\"</code>.</p>\n<pre>$ ttg_cli.py <span class=\"s2\">\"['p', 'q', 'r']\"</span>\n</pre>\n<pre><code>+-----+-----+-----+\n|  p  |  q  |  r  |\n|-----+-----+-----|\n|  1  |  1  |  1  |\n|  1  |  1  |  0  |\n|  1  |  0  |  1  |\n|  1  |  0  |  0  |\n|  0  |  1  |  1  |\n|  0  |  1  |  0  |\n|  0  |  0  |  1  |\n|  0  |  0  |  0  |\n+-----+-----+-----+\n</code></pre>\n<p>The CLI utility also has an option, <code>-i</code>, to show words instead of numbers:</p>\n<pre>$ ttg_cli.py <span class=\"s2\">\"['p', 'q', 'r']\"</span> -i False\n</pre>\n<pre><code>+-------+-------+-------+\n|   p   |   q   |   r   |\n|-------+-------+-------|\n| True  | True  | True  |\n| True  | True  | False |\n| True  | False | True  |\n| True  | False | False |\n| False | True  | True  |\n| False | True  | False |\n| False | False | True  |\n| False | False | False |\n+-------+-------+-------+\n</code></pre>\n<p>A <code>-p</code> parameter must be before the propositions list:</p>\n<pre>$ ttg_cli.py <span class=\"s2\">\"['p', 'q', 'r']\"</span> -p <span class=\"s2\">\"['p or q', 'p and q or r']\"</span>\n</pre>\n<pre><code>+-----+-----+-----+----------+----------------+\n|  p  |  q  |  r  |  p or q  |  p and q or r  |\n|-----+-----+-----+----------+----------------|\n|  1  |  1  |  1  |    1     |       1        |\n|  1  |  1  |  0  |    1     |       1        |\n|  1  |  0  |  1  |    1     |       1        |\n|  1  |  0  |  0  |    1     |       0        |\n|  0  |  1  |  1  |    1     |       1        |\n|  0  |  1  |  0  |    1     |       0        |\n|  0  |  0  |  1  |    0     |       1        |\n|  0  |  0  |  0  |    0     |       0        |\n+-----+-----+-----+----------+----------------+\n</code></pre>\n<p>With words instead of numbers:</p>\n<pre>$ ttg_cli.py <span class=\"s2\">\"['p', 'q', 'r']\"</span> -p <span class=\"s2\">\"['p or q', 'p and q or r']\"</span> -i False\n</pre>\n<pre><code>+-------+-------+-------+----------+----------------+\n|   p   |   q   |   r   |  p or q  |  p and q or r  |\n|-------+-------+-------+----------+----------------|\n| True  | True  | True  |   True   |      True      |\n| True  | True  | False |   True   |      True      |\n| True  | False | True  |   True   |      True      |\n| True  | False | False |   True   |     False      |\n| False | True  | True  |   True   |      True      |\n| False | True  | False |   True   |     False      |\n| False | False | True  |  False   |      True      |\n| False | False | False |  False   |     False      |\n+-------+-------+-------+----------+----------------+\n</code></pre>\n<p>The real look of the table depends on your terminal appearance configuration.\nThe green on black background screenshots from the first picture of this README\nare from my terminal.</p>\n<h2>Contributing</h2>\n<p>All contributions are welcome.</p>\n<p><strong>Issues</strong></p>\n<p>Feel free to submit issues regarding:</p>\n<ul>\n<li>recommendations</li>\n<li>more examples for the tutorial</li>\n<li>enhancement requests and new useful features</li>\n<li>code bugs</li>\n</ul>\n<p><strong>Pull requests</strong></p>\n<ul>\n<li>before starting to work on your pull request, please submit an issue first</li>\n<li>fork the repo</li>\n<li>clone the project to your own machine</li>\n<li>commit changes to your own branch</li>\n<li>push your work back up to your fork</li>\n<li>submit a pull request so that your changes can be reviewed</li>\n</ul>\n<h2>License</h2>\n<p>Apache 2.0, see <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a></p>\n<h2>Citing</h2>\n<p>If you use <em>truth-table-generator</em> in a scientific publication or in classes,\nplease consider citing as</p>\n<p>F. L. S. Bustamante, <em>truth-table-generator</em> - generating truth tables., 2019 -\nAvailable at: <a href=\"https://github.com/chicolucio/truth-table-generator\" rel=\"nofollow\">https://github.com/chicolucio/truth-table-generator</a></p>\n<h2>Funding</h2>\n<p>If you enjoy this project and would like to see many more math and science\nrelated programming projects, I would greatly appreciate any assistance. Send me\nan e-mail to know how to assist. Many more projects are to come and your support\nwill be rewarded with more STEM coding projects :-)</p>\n\n          </div>"}, "last_serial": 6874873, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3d40841e619b80bc842424d1ede8c5f0", "sha256": "eb239480ea20037bd0a1bd912deff5ec802031989e8f0933c22d12bc1378d42a"}, "downloads": -1, "filename": "truth_table_generator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3d40841e619b80bc842424d1ede8c5f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14543, "upload_time": "2019-10-20T00:10:12", "upload_time_iso_8601": "2019-10-20T00:10:12.917994Z", "url": "https://files.pythonhosted.org/packages/d3/7a/b9f358bf28871c72f51ece38c41951c13bc22ea41ea73a12a62d3f1eb273/truth_table_generator-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8b74db3f781d4836ca2134fb854f8fb2", "sha256": "89cbd3b13ea97bd6abecb6fb17d6a682498ed23ba8ae58f5fb88f6374c6f4117"}, "downloads": -1, "filename": "truth_table_generator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8b74db3f781d4836ca2134fb854f8fb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14587, "upload_time": "2019-10-21T17:47:13", "upload_time_iso_8601": "2019-10-21T17:47:13.309453Z", "url": "https://files.pythonhosted.org/packages/5d/2f/3d7fff7bbf5ac9b2354d6bca0f01e63a529fca6bbc47aba14b76969cfa4e/truth_table_generator-1.0.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "88840681c19fd72df42e7b116c51a7ac", "sha256": "ab34b4e67e4c9c74687b01797d3afd8e4ca98c405356fb5ffa8c55e381cba7f1"}, "downloads": -1, "filename": "truth_table_generator-1.1.2.tar.gz", "has_sig": false, "md5_digest": "88840681c19fd72df42e7b116c51a7ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14662, "upload_time": "2020-03-24T18:03:48", "upload_time_iso_8601": "2020-03-24T18:03:48.440442Z", "url": "https://files.pythonhosted.org/packages/1b/f4/3680fa87771d5b48542578a36219a862ec16c82c0d3ef46bbcb020d23be9/truth_table_generator-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88840681c19fd72df42e7b116c51a7ac", "sha256": "ab34b4e67e4c9c74687b01797d3afd8e4ca98c405356fb5ffa8c55e381cba7f1"}, "downloads": -1, "filename": "truth_table_generator-1.1.2.tar.gz", "has_sig": false, "md5_digest": "88840681c19fd72df42e7b116c51a7ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14662, "upload_time": "2020-03-24T18:03:48", "upload_time_iso_8601": "2020-03-24T18:03:48.440442Z", "url": "https://files.pythonhosted.org/packages/1b/f4/3680fa87771d5b48542578a36219a862ec16c82c0d3ef46bbcb020d23be9/truth_table_generator-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:30 2020"}