{"info": {"author": "John Wagenleitner", "author_email": "johnwa@mail.fresnostate.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Database"], "description": "# DBCP Lite\n\nA simple, light and nearly featureless database connection pool for Python.\n\nConnections are added to the pool as needed up to `max_size` in number.\nOnce added the connections will remain in the pool and no attempt is made\nto shrink the pool. In most cases it is recommended to set \n`min_size == max_size`.\n\n# Usage\n\n```python\nimport cx_Oracle\nfrom dbcp_lite import DBConnectionPool\n\nconnect_args = ('scott', 'tiger', 'dbhost.example.com/orcl')\npool = DBConnectionPool(cx_Oracle.connect, \n                        create_args=connect_args, \n                        create_kwargs={'threaded': False}, \n                        min_size=1, \n                        max_size=4, \n                        name='scott@orcl')\n\nwith pool.acquire() as connection:\n    ...\n\nwith pool.acquire_cursor() as cursor:\n    ...\n\npool.close()\n```\n\nThe `acquire_cursor()` is a convenience method that returns a `Cursor` using a\n`Connection` from the pool. Upon successful completion `commit()` will be\ncalled on the `Connection` and the `Cursor` will be closed.\n\n## Timeouts\n\nA timeout can be provided to various methods. If no connections are available to\nbe `acquired` or `closed` the methods will raise a `PoolTimeout` exception.\n\n# Lifecycle Methods\n\nThe following lifecycle methods are called during normal operations and alternate\nimplementations can be provided if needed to perform specialized setup or cleanup.\n\n`on_acquire(self, connection)` - no-op\n\n`on_return(self, connection)` - default implementation calls `connection.rollback()`\n\n`on_close(self, connection)` - default implementation calls `connection.close()`\n\nFor example, to implement auto-commit:\n\n```python\npool = ...\npool.on_return = lambda x: x.commit()\n``` \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jowage58/dbcp_lite/", "keywords": "database connection pool", "license": "", "maintainer": "", "maintainer_email": "", "name": "dbcp-lite", "package_url": "https://pypi.org/project/dbcp-lite/", "platform": "", "project_url": "https://pypi.org/project/dbcp-lite/", "project_urls": {"Bug Reports": "https://github.com/jowage58/dbcp_lite/issues", "Homepage": "https://github.com/jowage58/dbcp_lite/", "Source": "https://github.com/jowage58/dbcp_lite/"}, "release_url": "https://pypi.org/project/dbcp-lite/0.0.2/", "requires_dist": null, "requires_python": ">=3.6, <4", "summary": "Simple, light and nearly featureless database connection pool", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DBCP Lite</h1>\n<p>A simple, light and nearly featureless database connection pool for Python.</p>\n<p>Connections are added to the pool as needed up to <code>max_size</code> in number.\nOnce added the connections will remain in the pool and no attempt is made\nto shrink the pool. In most cases it is recommended to set\n<code>min_size == max_size</code>.</p>\n<h1>Usage</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cx_Oracle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dbcp_lite</span> <span class=\"kn\">import</span> <span class=\"n\">DBConnectionPool</span>\n\n<span class=\"n\">connect_args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'scott'</span><span class=\"p\">,</span> <span class=\"s1\">'tiger'</span><span class=\"p\">,</span> <span class=\"s1\">'dbhost.example.com/orcl'</span><span class=\"p\">)</span>\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">DBConnectionPool</span><span class=\"p\">(</span><span class=\"n\">cx_Oracle</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">,</span> \n                        <span class=\"n\">create_args</span><span class=\"o\">=</span><span class=\"n\">connect_args</span><span class=\"p\">,</span> \n                        <span class=\"n\">create_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'threaded'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span> \n                        <span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n                        <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> \n                        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'scott@orcl'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">acquire_cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>acquire_cursor()</code> is a convenience method that returns a <code>Cursor</code> using a\n<code>Connection</code> from the pool. Upon successful completion <code>commit()</code> will be\ncalled on the <code>Connection</code> and the <code>Cursor</code> will be closed.</p>\n<h2>Timeouts</h2>\n<p>A timeout can be provided to various methods. If no connections are available to\nbe <code>acquired</code> or <code>closed</code> the methods will raise a <code>PoolTimeout</code> exception.</p>\n<h1>Lifecycle Methods</h1>\n<p>The following lifecycle methods are called during normal operations and alternate\nimplementations can be provided if needed to perform specialized setup or cleanup.</p>\n<p><code>on_acquire(self, connection)</code> - no-op</p>\n<p><code>on_return(self, connection)</code> - default implementation calls <code>connection.rollback()</code></p>\n<p><code>on_close(self, connection)</code> - default implementation calls <code>connection.close()</code></p>\n<p>For example, to implement auto-commit:</p>\n<pre><span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">on_return</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6528126, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4e36b261bf178246faf3155a6925b8fb", "sha256": "e0a8de3114b32d58f8394d5815360941ce4d087d3f4d9fe6c6539a9d468d2dbc"}, "downloads": -1, "filename": "dbcp_lite-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e36b261bf178246faf3155a6925b8fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 8014, "upload_time": "2020-01-23T19:23:18", "upload_time_iso_8601": "2020-01-23T19:23:18.670002Z", "url": "https://files.pythonhosted.org/packages/30/cf/a5b401628c9afdd3489d5c1fe72adbcbb08b7eed91da551af1abee11ca06/dbcp_lite-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a99079be2bdb01d772b95d3b0f078a4", "sha256": "131ae0b5451167986eb8b114c00f7e1230806932f21d181760fa608174f033fb"}, "downloads": -1, "filename": "dbcp-lite-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3a99079be2bdb01d772b95d3b0f078a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 7998, "upload_time": "2020-01-23T19:23:21", "upload_time_iso_8601": "2020-01-23T19:23:21.217061Z", "url": "https://files.pythonhosted.org/packages/43/4d/36fe79d2ed1a0837a1ccc3f0616bf0a8321eef03a005488cc107b6e7932e/dbcp-lite-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c2b49c0d508934f6a8f4e5e0454cb3fd", "sha256": "3c9a1d991257d24d6128fbebafbf8fc6799300e87b533c5664f18a0bb290bbf6"}, "downloads": -1, "filename": "dbcp_lite-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2b49c0d508934f6a8f4e5e0454cb3fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 8014, "upload_time": "2020-01-27T19:26:29", "upload_time_iso_8601": "2020-01-27T19:26:29.934891Z", "url": "https://files.pythonhosted.org/packages/12/9a/053bf09a696fa0fdb9b5d61241bb5ef2c70c27c60b168da06a3a0169d1ea/dbcp_lite-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf7a561b5c9ccc087d24d7593a6cbb4c", "sha256": "508e3e8e8ba20f9bf0b2f1e6bb6d7c0757866b16bdd6cbc1b2bda2a440c7b31c"}, "downloads": -1, "filename": "dbcp-lite-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cf7a561b5c9ccc087d24d7593a6cbb4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 8013, "upload_time": "2020-01-27T19:26:31", "upload_time_iso_8601": "2020-01-27T19:26:31.564971Z", "url": "https://files.pythonhosted.org/packages/f4/72/35453c6f2a00de2d1039ed630d12b0dc2d1578468e10c743fc67fb7e5728/dbcp-lite-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2b49c0d508934f6a8f4e5e0454cb3fd", "sha256": "3c9a1d991257d24d6128fbebafbf8fc6799300e87b533c5664f18a0bb290bbf6"}, "downloads": -1, "filename": "dbcp_lite-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2b49c0d508934f6a8f4e5e0454cb3fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 8014, "upload_time": "2020-01-27T19:26:29", "upload_time_iso_8601": "2020-01-27T19:26:29.934891Z", "url": "https://files.pythonhosted.org/packages/12/9a/053bf09a696fa0fdb9b5d61241bb5ef2c70c27c60b168da06a3a0169d1ea/dbcp_lite-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf7a561b5c9ccc087d24d7593a6cbb4c", "sha256": "508e3e8e8ba20f9bf0b2f1e6bb6d7c0757866b16bdd6cbc1b2bda2a440c7b31c"}, "downloads": -1, "filename": "dbcp-lite-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cf7a561b5c9ccc087d24d7593a6cbb4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 8013, "upload_time": "2020-01-27T19:26:31", "upload_time_iso_8601": "2020-01-27T19:26:31.564971Z", "url": "https://files.pythonhosted.org/packages/f4/72/35453c6f2a00de2d1039ed630d12b0dc2d1578468e10c743fc67fb7e5728/dbcp-lite-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:58 2020"}