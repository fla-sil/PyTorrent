{"info": {"author": "Kamil Kujawinski", "author_email": "kamil@kujawinski.net", "bugtrack_url": null, "classifiers": ["Framework :: Django", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "=================\r\nDjango OfferMaker\r\n=================\r\n\r\n``django-offermaker`` library is a solution for Django applications, which allows\r\nto create *multi variant offers* and use them on your site.\r\n\r\n*Multi variant offer* is a structure which defines dependencies between values for\r\ngiven set of fields.\r\n\r\nEg. for the fields **credit contribution** and **number of instalments** we\r\nhave the following dependencies:\r\n\r\n    * for **0%** credit contribution, it is required to have maximum **12**\r\n      instalments,\r\n    * for **10%+** contribution, it is allowed to have **12-24** instalments,\r\n    * and for **20%+** contribution, it is allowed to have **12-36** instalments.\r\n\r\nFunctions of ``django-offermaker``\r\n----------------------------------\r\n\r\n    * Create and edit *multi variant offer* by using **Offermaker Admin Editor**.\r\n    * Display *multi variant offer* in tabular way by using **Offermaker Template\r\n      Tag**.\r\n    * Display form which dynamically adjusts to user filled values based on\r\n      *multi variant offer* by using **OfferMakerFormView Generic View**.\r\n    * Make decision which variant of *multi variant offer* is suitable for\r\n      given parameters by using **decide helper**.\r\n\r\n\r\nChangelog\r\n---------\r\n\r\n* 0.9.8\r\n\r\n    * Selenium test for offermaker admin editor and offermaker form and bug fixes\r\n      in supported Django and Python versions.\r\n\r\n* 0.9.7\r\n\r\n    * Added Class Based View for offermaker form\r\n    * Added decide() method\r\n\r\n* 0.9.5\r\n\r\n    * Small bug fixes\r\n\r\n* 0.9.4\r\n\r\n    * Django 1.7 support\r\n    * Python 3 support\r\n\r\n\r\n\r\nSupport\r\n-------\r\n\r\n* Environments: Python 2.6, Python 2.7, Python 3.2, Python 3.3, Python 3.4, PyPy,\r\n* Django versions: Django 1.5, Django 1.6, Django 1.7 (Python 2.6 is not supported),\r\n\r\n\r\nDemo application\r\n----------------\r\n\r\n1. You can check it online http://offermaker.kjw.pt\r\n\r\n2. Or checkout and install locally::\r\n\r\n    git clone git@github.com:kkujawinski/django-offermaker-demo.git\r\n\r\n\r\nQuick start\r\n-----------\r\n1. Install django-offermaker ::\r\n\r\n    pip install django-offermaker\r\n\r\n2. Site configuration in settings.py ::\r\n\r\n      INSTALLED_APPS = (\r\n          ...\r\n          'offermaker',\r\n      )\r\n\r\n3. Create Django form with needed fields::\r\n\r\n    from django import forms\r\n\r\n    class MyForm(forms.Form):\r\n        product = forms.ChoiceField(\r\n            label='Product',\r\n            choices=(\r\n                ('', '---'), ('PROD1', 'Product X'), ('PROD2', 'Product Y'), ('PROD3', 'Product Z'),\r\n            ),\r\n            required=False)\r\n        crediting_period = forms.ChoiceField(\r\n            label='Crediting period',\r\n            choices=(('', '---'), ('12', '12'), ('24', '24'), ('36', '36'), ('48', '48')))\r\n        interest_rate = forms.FloatField(label='Interest rate', min_value=1, max_value=5)\r\n        contribution = forms.FloatField(label='Contribution', min_value=0)\r\n\r\n        # # Uncomment for Django 1.5\r\n        # def __init__(self, *args, **kwargs):\r\n        #     super(MyForm, self).__init__(*args, **kwargs)\r\n        #     self.fields['interest_rate'].widget.attrs['data-om-type'] = 'number'\r\n        #     self.fields['interest_rate'].widget.attrs['data-om-min'] = 1\r\n        #     self.fields['interest_rate'].widget.attrs['data-om-max'] = 5\r\n        #     self.fields['contribution'].widget.attrs['data-om-type'] = 'number'\r\n        #     self.fields['contribution'].widget.attrs['data-om-min'] = 0\r\n\r\n4. Define your offer (in case you do not store it in database)::\r\n\r\n    offer = {\r\n        'params': {},\r\n        'variants': [[\r\n            {\r\n                'params': {\r\n                    'crediting_period': ['24'],\r\n                    'product': ['PROD1']\r\n                }\r\n            }, {\r\n                'params': {\r\n                    'crediting_period': ['12', '36', '48'],\r\n                    'product': ['PROD2']\r\n                }\r\n            }, {\r\n                'params': {\r\n                    'product': ['PROD3']\r\n                }\r\n            }\r\n        ], [\r\n            {\r\n                'params': {\r\n                    'contribution': [[10, 20]],\r\n                    'interest_rate': [[2, 2]],\r\n                    'product': ['PROD1']\r\n                }\r\n            }, {\r\n                'params': {\r\n                    'contribution': [[30, 40]],\r\n                    'interest_rate': [[4, 4]],\r\n                    'product': ['PROD1']\r\n                }\r\n            }, {\r\n                'params': {\r\n                    'contribution': [[30, 70]],\r\n                    'interest_rate': [[5, 5]],\r\n                    'product': ['PROD2', 'PROD3']\r\n                }\r\n            }\r\n        ]]\r\n    }\r\n\r\n5. Offer form:\r\n\r\na) Use dispatcher code in Django view ::\r\n\r\n    import offermaker\r\n\r\n    class MyOfferFormView(offermaker.OfferMakerFormView):\r\n        form_class = MyForm\r\n        offermaker_offer = offer\r\n        template_name = 'my_offer_form_view.html'\r\n\r\n    my_offer_form_view = MyOfferFormView.as_view()\r\n\r\n\r\nb) Initialize offerform in template ::\r\n\r\n    <head>\r\n    {% load offermaker %}\r\n    <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n    {% offermaker_javascript %}\r\n    </head>\r\n\r\n    <body>\r\n\r\n    <form action=\"?\" method=\"post\" id=\"offer_form\">\r\n        <div class=\"alert-placeholder\" style=\"height: 30px;\"></div>\r\n        {% csrf_token %}\r\n        {{ form.as_p }}\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n\r\n    <script type=\"text/javascript\">\r\n        (function() {\r\n            $('#offer_form').offer_form();\r\n        })();\r\n    </script>\r\n\r\n6. Offer preview with Offermaker Template Tag\r\n\r\na) Pass offer form object from view to template::\r\n\r\n    class MyOfferPreviewView(TemplateView):\r\n        template_name = 'offer_preview.html'\r\n\r\n        def get_context_data(self):\r\n            output = super(MyOfferPreviewView, self).get_context_data()\r\n            output['offer'] = offermaker.OfferMakerCore(MyForm, offer)\r\n            return output\r\n\r\n\r\nb) Use proper template tag in template to print table::\r\n\r\n    {% load offermaker %}\r\n\r\n    {% offermaker_preview offer %}\r\n\r\n\r\n7. Offermaker Admin Editor:\r\n\r\na) Use OfferJSONField field in your model. Remember to pass your django form created in 3.::\r\n\r\n    import offermaker\r\n\r\n    class MyOfferMakerField(offermaker.OfferJSONField):\r\n        form_object = MyForm()\r\n\r\n    class MyOffer(models.Model):\r\n        id = models.AutoField(primary_key=True)\r\n        name = models.CharField(max_length=30)\r\n        offer = MyOfferMakerField()\r\n\r\nb) Create your own Admin Site for model::\r\n\r\n    import models\r\n\r\n    class OfferAdmin(admin.ModelAdmin):\r\n        list_display = ('name',)\r\n        search_fields = ('name', 'user')\r\n        fields = ('name', 'offer')\r\n\r\n        # # Uncomment for Django 1.5\r\n        # class Media:\r\n        #     js = ('//code.jquery.com/jquery-1.11.0.min.js',)\r\n\r\n\r\n    admin.site.register(models.Offer, OfferAdmin)\r\n\r\n7. Decide helper::\r\n\r\n    core_object = offermaker.OfferMakerCore(MyForm, offer)\r\n\r\n    result = core_object.decide({'crediting_period': 24})\r\n    print(result['product'].items)\r\n    # frozenset({'PROD1', 'PROD3'})\r\n    print(result['interest_rate'].ranges)\r\n    # frozenset({(4, 4), (5, 5), (2, 2)})\r\n    print(result['contribution'].ranges)\r\n    # frozenset({(10, 20), (30, 70)})\r\n\r\n    result = core_object.decide({'crediting_period': 24, 'interest_rate': 2})\r\n    print(result['product'].fixed)\r\n    # PROD1\r\n\r\n\r\n\r\nBasic customization\r\n-------------------\r\n\r\n1. Using offers stored in database:\r\n\r\na) you need to pass proper offer object to Offermaker in form/preview view::\r\n\r\n    offer = MyOffer.objects.filter(id=request.GET['id']).first()\r\n    core_object = offermaker.OfferMakerCore(MyForm, offer.offer)\r\n\r\nb) and configure proper params to be used in ajax requests::\r\n\r\n    $('#offer_form').offer_form({\r\n        ajax_extra_params: function(params) {\r\n            return { id: {{ request.GET.id }} };\r\n        },\r\n    });\r\n\r\n\r\n2. Substituting builtin formatters for infotip and error alerts::\r\n\r\n    $('#offer_form').offer_form({\r\n        error_alert_factory: function (msg) {\r\n            var $error = $('<p class=\"error\"><span>' + msg + '</span></p>');\r\n            $('.alert-placeholder', $form).append($error);\r\n            return $error;\r\n        },\r\n        tooltip_factory: function ($field, msg) {\r\n            var $tooltip = $('<p class=\"infotip\">' + msg + '</p>');\r\n            $field.parent().append($tooltip);\r\n            return $tooltip;\r\n        }\r\n    });\r\n\r\n3. Use builtin formatters for Twitter Bootstap3::\r\n\r\n    (function() {\r\n        $('#offer_form').offer_form({\r\n            bootstrap3: true,\r\n        });\r\n    })();\r\n\r\n4. Customizing messages::\r\n\r\n    (function() {\r\n        $('#offer_form').offer_form({\r\n            msgs: {\r\n                'NO_VARIANTS': 'No matching variants',\r\n                'INFO_ITEMS': 'Available values are: %s.',\r\n                'INFO_FIXED': 'Only available value is %s.',\r\n                'RANGE_left': 'to %2$s',\r\n                'RANGE_right': 'from %1$s',\r\n                'RANGE_both': 'from %1$s to %2$s',\r\n                'AND': ' and '\r\n            },\r\n            iteration_str: function (items) {\r\n                return items.slice(0, -2).concat(items.slice(-2).join(msgs.AND)).join(', ');\r\n            }\r\n        });\r\n    })();\r\n\r\n5. Creating preview table for certain fields::\r\n\r\n    {% offermaker_preview offer fields='product, crediting_period' %}\r\n\r\n\r\n6. Add html attributes to generated preview table::\r\n\r\n    {% offermaker_preview offer class='table table-bordered' %}", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://offermaker.kjw.pt", "keywords": "", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "django-offermaker", "package_url": "https://pypi.org/project/django-offermaker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-offermaker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://offermaker.kjw.pt"}, "release_url": "https://pypi.org/project/django-offermaker/0.9.8/", "requires_dist": null, "requires_python": null, "summary": "Django library to create dynamic forms with configurable variantable restrictions.", "version": "0.9.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">django-offermaker</span></tt> library is a solution for Django applications, which allows\nto create <em>multi variant offers</em> and use them on your site.</p>\n<p><em>Multi variant offer</em> is a structure which defines dependencies between values for\ngiven set of fields.</p>\n<p>Eg. for the fields <strong>credit contribution</strong> and <strong>number of instalments</strong> we\nhave the following dependencies:</p>\n<blockquote>\n<ul>\n<li>for <strong>0%</strong> credit contribution, it is required to have maximum <strong>12</strong>\ninstalments,</li>\n<li>for <strong>10%+</strong> contribution, it is allowed to have <strong>12-24</strong> instalments,</li>\n<li>and for <strong>20%+</strong> contribution, it is allowed to have <strong>12-36</strong> instalments.</li>\n</ul>\n</blockquote>\n<div id=\"functions-of-django-offermaker\">\n<h2>Functions of <tt><span class=\"pre\">django-offermaker</span></tt></h2>\n<blockquote>\n<ul>\n<li>Create and edit <em>multi variant offer</em> by using <strong>Offermaker Admin Editor</strong>.</li>\n<li>Display <em>multi variant offer</em> in tabular way by using <strong>Offermaker Template\nTag</strong>.</li>\n<li>Display form which dynamically adjusts to user filled values based on\n<em>multi variant offer</em> by using <strong>OfferMakerFormView Generic View</strong>.</li>\n<li>Make decision which variant of <em>multi variant offer</em> is suitable for\ngiven parameters by using <strong>decide helper</strong>.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li><p>0.9.8</p>\n<blockquote>\n<ul>\n<li>Selenium test for offermaker admin editor and offermaker form and bug fixes\nin supported Django and Python versions.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>0.9.7</p>\n<blockquote>\n<ul>\n<li>Added Class Based View for offermaker form</li>\n<li>Added decide() method</li>\n</ul>\n</blockquote>\n</li>\n<li><p>0.9.5</p>\n<blockquote>\n<ul>\n<li>Small bug fixes</li>\n</ul>\n</blockquote>\n</li>\n<li><p>0.9.4</p>\n<blockquote>\n<ul>\n<li>Django 1.7 support</li>\n<li>Python 3 support</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<ul>\n<li>Environments: Python 2.6, Python 2.7, Python 3.2, Python 3.3, Python 3.4, PyPy,</li>\n<li>Django versions: Django 1.5, Django 1.6, Django 1.7 (Python 2.6 is not supported),</li>\n</ul>\n</div>\n<div id=\"demo-application\">\n<h2>Demo application</h2>\n<ol>\n<li><p>You can check it online <a href=\"http://offermaker.kjw.pt\" rel=\"nofollow\">http://offermaker.kjw.pt</a></p>\n</li>\n<li><p>Or checkout and install locally:</p>\n<pre>git clone git@github.com:kkujawinski/django-offermaker-demo.git\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Install django-offermaker</p>\n<pre>pip install django-offermaker\n</pre>\n</li>\n<li><p>Site configuration in settings.py</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'offermaker',\n)\n</pre>\n</li>\n<li><p>Create Django form with needed fields:</p>\n<pre>from django import forms\n\nclass MyForm(forms.Form):\n    product = forms.ChoiceField(\n        label='Product',\n        choices=(\n            ('', '---'), ('PROD1', 'Product X'), ('PROD2', 'Product Y'), ('PROD3', 'Product Z'),\n        ),\n        required=False)\n    crediting_period = forms.ChoiceField(\n        label='Crediting period',\n        choices=(('', '---'), ('12', '12'), ('24', '24'), ('36', '36'), ('48', '48')))\n    interest_rate = forms.FloatField(label='Interest rate', min_value=1, max_value=5)\n    contribution = forms.FloatField(label='Contribution', min_value=0)\n\n    # # Uncomment for Django 1.5\n    # def __init__(self, *args, **kwargs):\n    #     super(MyForm, self).__init__(*args, **kwargs)\n    #     self.fields['interest_rate'].widget.attrs['data-om-type'] = 'number'\n    #     self.fields['interest_rate'].widget.attrs['data-om-min'] = 1\n    #     self.fields['interest_rate'].widget.attrs['data-om-max'] = 5\n    #     self.fields['contribution'].widget.attrs['data-om-type'] = 'number'\n    #     self.fields['contribution'].widget.attrs['data-om-min'] = 0\n</pre>\n</li>\n<li><p>Define your offer (in case you do not store it in database):</p>\n<pre>offer = {\n    'params': {},\n    'variants': [[\n        {\n            'params': {\n                'crediting_period': ['24'],\n                'product': ['PROD1']\n            }\n        }, {\n            'params': {\n                'crediting_period': ['12', '36', '48'],\n                'product': ['PROD2']\n            }\n        }, {\n            'params': {\n                'product': ['PROD3']\n            }\n        }\n    ], [\n        {\n            'params': {\n                'contribution': [[10, 20]],\n                'interest_rate': [[2, 2]],\n                'product': ['PROD1']\n            }\n        }, {\n            'params': {\n                'contribution': [[30, 40]],\n                'interest_rate': [[4, 4]],\n                'product': ['PROD1']\n            }\n        }, {\n            'params': {\n                'contribution': [[30, 70]],\n                'interest_rate': [[5, 5]],\n                'product': ['PROD2', 'PROD3']\n            }\n        }\n    ]]\n}\n</pre>\n</li>\n<li><p>Offer form:</p>\n</li>\n</ol>\n<ol>\n<li><p>Use dispatcher code in Django view</p>\n<pre>import offermaker\n\nclass MyOfferFormView(offermaker.OfferMakerFormView):\n    form_class = MyForm\n    offermaker_offer = offer\n    template_name = 'my_offer_form_view.html'\n\nmy_offer_form_view = MyOfferFormView.as_view()\n</pre>\n</li>\n<li><p>Initialize offerform in template</p>\n<pre>&lt;head&gt;\n{% load offermaker %}\n&lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.10.2.min.js\"&gt;&lt;/script&gt;\n{% offermaker_javascript %}\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;form action=\"?\" method=\"post\" id=\"offer_form\"&gt;\n    &lt;div class=\"alert-placeholder\" style=\"height: 30px;\"&gt;&lt;/div&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n\n&lt;script type=\"text/javascript\"&gt;\n    (function() {\n        $('#offer_form').offer_form();\n    })();\n&lt;/script&gt;\n</pre>\n</li>\n</ol>\n<ol>\n<li>Offer preview with Offermaker Template Tag</li>\n</ol>\n<ol>\n<li><p>Pass offer form object from view to template:</p>\n<pre>class MyOfferPreviewView(TemplateView):\n    template_name = 'offer_preview.html'\n\n    def get_context_data(self):\n        output = super(MyOfferPreviewView, self).get_context_data()\n        output['offer'] = offermaker.OfferMakerCore(MyForm, offer)\n        return output\n</pre>\n</li>\n<li><p>Use proper template tag in template to print table:</p>\n<pre>{% load offermaker %}\n\n{% offermaker_preview offer %}\n</pre>\n</li>\n</ol>\n<ol>\n<li>Offermaker Admin Editor:</li>\n</ol>\n<ol>\n<li><p>Use OfferJSONField field in your model. Remember to pass your django form created in 3.:</p>\n<pre>import offermaker\n\nclass MyOfferMakerField(offermaker.OfferJSONField):\n    form_object = MyForm()\n\nclass MyOffer(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=30)\n    offer = MyOfferMakerField()\n</pre>\n</li>\n<li><p>Create your own Admin Site for model:</p>\n<pre>import models\n\nclass OfferAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n    search_fields = ('name', 'user')\n    fields = ('name', 'offer')\n\n    # # Uncomment for Django 1.5\n    # class Media:\n    #     js = ('//code.jquery.com/jquery-1.11.0.min.js',)\n\n\nadmin.site.register(models.Offer, OfferAdmin)\n</pre>\n</li>\n</ol>\n<ol>\n<li><p>Decide helper:</p>\n<pre>core_object = offermaker.OfferMakerCore(MyForm, offer)\n\nresult = core_object.decide({'crediting_period': 24})\nprint(result['product'].items)\n# frozenset({'PROD1', 'PROD3'})\nprint(result['interest_rate'].ranges)\n# frozenset({(4, 4), (5, 5), (2, 2)})\nprint(result['contribution'].ranges)\n# frozenset({(10, 20), (30, 70)})\n\nresult = core_object.decide({'crediting_period': 24, 'interest_rate': 2})\nprint(result['product'].fixed)\n# PROD1\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"basic-customization\">\n<h2>Basic customization</h2>\n<ol>\n<li>Using offers stored in database:</li>\n</ol>\n<ol>\n<li><p>you need to pass proper offer object to Offermaker in form/preview view:</p>\n<pre>offer = MyOffer.objects.filter(id=request.GET['id']).first()\ncore_object = offermaker.OfferMakerCore(MyForm, offer.offer)\n</pre>\n</li>\n<li><p>and configure proper params to be used in ajax requests:</p>\n<pre>$('#offer_form').offer_form({\n    ajax_extra_params: function(params) {\n        return { id: {{ request.GET.id }} };\n    },\n});\n</pre>\n</li>\n</ol>\n<ol>\n<li><p>Substituting builtin formatters for infotip and error alerts:</p>\n<pre>$('#offer_form').offer_form({\n    error_alert_factory: function (msg) {\n        var $error = $('&lt;p class=\"error\"&gt;&lt;span&gt;' + msg + '&lt;/span&gt;&lt;/p&gt;');\n        $('.alert-placeholder', $form).append($error);\n        return $error;\n    },\n    tooltip_factory: function ($field, msg) {\n        var $tooltip = $('&lt;p class=\"infotip\"&gt;' + msg + '&lt;/p&gt;');\n        $field.parent().append($tooltip);\n        return $tooltip;\n    }\n});\n</pre>\n</li>\n<li><p>Use builtin formatters for Twitter Bootstap3:</p>\n<pre>(function() {\n    $('#offer_form').offer_form({\n        bootstrap3: true,\n    });\n})();\n</pre>\n</li>\n<li><p>Customizing messages:</p>\n<pre>(function() {\n    $('#offer_form').offer_form({\n        msgs: {\n            'NO_VARIANTS': 'No matching variants',\n            'INFO_ITEMS': 'Available values are: %s.',\n            'INFO_FIXED': 'Only available value is %s.',\n            'RANGE_left': 'to %2$s',\n            'RANGE_right': 'from %1$s',\n            'RANGE_both': 'from %1$s to %2$s',\n            'AND': ' and '\n        },\n        iteration_str: function (items) {\n            return items.slice(0, -2).concat(items.slice(-2).join(msgs.AND)).join(', ');\n        }\n    });\n})();\n</pre>\n</li>\n<li><p>Creating preview table for certain fields:</p>\n<pre>{% offermaker_preview offer fields='product, crediting_period' %}\n</pre>\n</li>\n<li><p>Add html attributes to generated preview table:</p>\n<pre>{% offermaker_preview offer class='table table-bordered' %}\n</pre>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1419417, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "17a671827677700e0b3cfd20ce0b4d4f", "sha256": "c2677950def14d8ba7fe849b9031649cb3d03c9d1eea909b664877f9a06829ab"}, "downloads": -1, "filename": "django-offermaker-0.9.0.tar.gz", "has_sig": false, "md5_digest": "17a671827677700e0b3cfd20ce0b4d4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106698, "upload_time": "2014-02-09T21:43:38", "upload_time_iso_8601": "2014-02-09T21:43:38.265775Z", "url": "https://files.pythonhosted.org/packages/a0/6e/e993b7ad36b46ab992de233abf11402d526ae480e3ef97ea9f9f9eb24d14/django-offermaker-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "f9061b7b4232236ea662af7687f6881d", "sha256": "eee2322d2c602efe4c2426eaf2b440b7e2620253e1c01d8db16f59c7a168c97e"}, "downloads": -1, "filename": "django-offermaker-0.9.1.tar.gz", "has_sig": false, "md5_digest": "f9061b7b4232236ea662af7687f6881d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106927, "upload_time": "2014-02-10T22:14:34", "upload_time_iso_8601": "2014-02-10T22:14:34.920753Z", "url": "https://files.pythonhosted.org/packages/3a/87/65640a9fa04f26bb2c81e782b2b0dc138b5ba7eec3cedc56019caabcb600/django-offermaker-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "01beb00e28bc7ad07e523abafc916935", "sha256": "d8c42808e005ac147027019574e58fb9af01ab81ffb1e3c50e9f7fd3b80a0bdb"}, "downloads": -1, "filename": "django-offermaker-0.9.2.tar.gz", "has_sig": false, "md5_digest": "01beb00e28bc7ad07e523abafc916935", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107875, "upload_time": "2014-09-08T20:59:55", "upload_time_iso_8601": "2014-09-08T20:59:55.475574Z", "url": "https://files.pythonhosted.org/packages/59/be/6d6e6cea5062f0fcec7ff8468d297fcf326578f9a3a82541d06d17fc82eb/django-offermaker-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "bda9d3eb6fa247edf8469be29d662a3c", "sha256": "f8306851305b24541486cc754da8d4d5dc23d7eb8ef74c5f7d4698b2918e45e6"}, "downloads": -1, "filename": "django-offermaker-0.9.3.tar.gz", "has_sig": false, "md5_digest": "bda9d3eb6fa247edf8469be29d662a3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108288, "upload_time": "2014-09-11T13:23:50", "upload_time_iso_8601": "2014-09-11T13:23:50.609851Z", "url": "https://files.pythonhosted.org/packages/80/84/b0fa355ce632ee89aabcb44f22f10c0c0ed00c47fb99c6faeeecbbbf8843/django-offermaker-0.9.3.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "575ed7618bfa45a87996cc5822059b19", "sha256": "9eafe05ba73323dd3fbcc284d5d28c188a6e4a2431f633815cac038b8af817c5"}, "downloads": -1, "filename": "django-offermaker-0.9.8.tar.gz", "has_sig": false, "md5_digest": "575ed7618bfa45a87996cc5822059b19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116176, "upload_time": "2015-02-08T20:52:56", "upload_time_iso_8601": "2015-02-08T20:52:56.261290Z", "url": "https://files.pythonhosted.org/packages/a2/f8/68d1e7448177ec1dbb8d0299c987de77e11f1baebb6dc836921d2c214f54/django-offermaker-0.9.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "575ed7618bfa45a87996cc5822059b19", "sha256": "9eafe05ba73323dd3fbcc284d5d28c188a6e4a2431f633815cac038b8af817c5"}, "downloads": -1, "filename": "django-offermaker-0.9.8.tar.gz", "has_sig": false, "md5_digest": "575ed7618bfa45a87996cc5822059b19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116176, "upload_time": "2015-02-08T20:52:56", "upload_time_iso_8601": "2015-02-08T20:52:56.261290Z", "url": "https://files.pythonhosted.org/packages/a2/f8/68d1e7448177ec1dbb8d0299c987de77e11f1baebb6dc836921d2c214f54/django-offermaker-0.9.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:34 2020"}