{"info": {"author": "Mathew Hall", "author_email": "mathew.hall100@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Welcome to fa_convnav\n> CNN viewer and element selector.\n\n\nfa_convnav works with the fastai deep learning library, allowing users to explore convolutional neural network (CNN)  structure and composition as well as select modules and layers for further investigation using hooks and callbacks.  \n\nfa_convnav provides native support for the following types of CNN model: \n\n* VGG\n* alexnet\n* resnets\n* squeezenets\n* densenets\n* xresnets\n\nWith minimal code changes, fa_convnav can also be adapted for use with other CNN architectures and custom CNN models.\n\n**A note about naming.** Naming conventions for the elements of a CNN is confusing with many terms such as layer and module used interchangeably. Here we use the following definitions to describe a CNN. \n\n\n*   **'layers'** are the information processing units of the model, they can be single elements (e.g. `conv2d`, `batchnorm2d`, `maxpool`, `relu` etc) or for larger models with deeply nested sequences, a short sequence of elements wrapped in a container element. \n*   **'modules'** may be layers but also container elements, such as `nn.sequential`, which wrap a sequence of layers.\n*   **'container'** elements group sequences of CNN layers or modules togather into functional units.\n*   **'elements'** are all the elements that make up the CNN, both container and non-container,  layers and modules.\n*  **'divisions'** refer to the head (1) and body (0)  of a transfer learning model\n*  **'child containers'** are the first tier of nested modules. These usually match the modules returned with the fastai `model.named_children()` method. \n*   **'Blocks'** are the second tier of nested modules, usually repeating throughout the main bulk of the model and containing a fixed sequence of layers. Depending on the architecture, blocks may have a specific name such as `BasicBlock` or `_DenseBlock`.\n*  **'model'** refers to a pre-trained architecture with head and body divisions. \n*  **architecture** is an untrained neural network\n\n\n## Install\n\n\n```\npip install fa_convnav\n```\n\n\n## How to Use\n\n\n\nFirst set up a deep learning vision project using fastai2 and create a Learner object from a dataloader, pretrained model and an optimizer. All the pretrained models installed with the fastai2 library are supported by fa_convnav. Run `convnav_supported_models()` in a notebook cell to see the complete list. \n\nIf you are not familiar with the fastai/fastai2 library then the [fastai documentation](https://dev.fast.ai/) or most recent[Deep Learning for Coders](https://course.fast.ai/index.html) course are excellent places to start. Alternatively to quickly get a feel for and play around with fastai2 and fa_convnav see the example notebooks, `03_examples00.ipynb` and `04_examples 01.ipynb` in this repo. \n\n## Create and view a ConvNav dataframe.\n\n```\nfrom fa_convnav.navigator import *\n```\n\nWith a fastai Learner object `Learner`, create a ConvNav instance `cn`:\n\n```\ncn = ConvNav(learner, Learner.summary())\n```\n\nThe model type and name are automatically detected and a dataframe of CNN model information built. We will call this a CNDF dataframe. CNDF dataframes combine an intuitive representation of the model architecture along with the description, class, output dimensions, parameters and frozen/unfrozen status of each module and layer.\n\nView a CNDF dataframe:\n\n```\ncn.view()\n```\n\nor \n\n```\ncn() *prints just the first ten rows\n```  \n\n## Searching a CNDF dataframe and selecting model elements\n\nCNDF dataframes can be viewed whole to see the overall structure of the model as well as subsetted and/or searched for any combination of model element(s). The selected element(s) are displayed and the module objects returned for further use, for example as targets for pytorch hooks and fastai callbacks. CNDF dataframes can also be saved to persistent storage. \n\nFor example:\n\n```\ncn.divs\n```\n\nDisplays summary information for the model body and head. \n\n```\ncn.search('0.0.2', exact=True)\n```\n\nSearches for, displays and returns the module object with module_name '0.0.2'. \n\n```\ncn.spread(req='conv', num=8)\n```\nSearches for, displays and returns the module objects for eight `Conv2d` layers equally spaced from start to end of the model.\n\n\n\n## Example notebooks\n\n\nFind `03_examples00.ipynb` and `04_examples01.ipynb` in this repo. These contain working examples of fa_convnav used to view a resnet model and select appropriate modules for use in investigating model training. Example notebooks can be downloaded and run in any notebook environment. \n\n## Tests\n\nTo run test in parallel launch:\n`nbdev_test_nbs` from the command line \nor\n`!nbdev_test_nbs` from inside a Jupyter Notebook with nbdev installed\n\n## Docs\n\nThis project, it's github repo and documentation were all built using the fastai nbdev literate programming environment for Jupyter Notebooks. Find out more about nbdev and use it in your own project [here](https://github.com/fastai/nbdev)\n\n## Contributing\n\nAfter you clone this repository, please run nbdev_install_git_hooks in your terminal. This sets up git hooks, which clean up the notebooks to remove the extraneous stuff stored in the notebooks (e.g. which cells you ran) which causes unnecessary merge conflicts.\n\nBefore submitting a PR, check that the local library and notebooks match. The script nbdev_diff_nbs can let you know if there is a difference between the local library and the notebooks.\n\nIf you made a change to the notebooks in one of the exported cells, you can export it to the library with nbdev_build_lib or make fastai2.\nIf you made a change to the library, you can export it back to the notebooks with nbdev_update_lib.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hallmx/fa_convnav", "keywords": "fastai,CNN", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "fa-convnav", "package_url": "https://pypi.org/project/fa-convnav/", "platform": "", "project_url": "https://pypi.org/project/fa-convnav/", "project_urls": {"Homepage": "https://github.com/hallmx/fa_convnav"}, "release_url": "https://pypi.org/project/fa-convnav/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "CNN viewer", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Welcome to fa_convnav</h1>\n<blockquote>\n<p>CNN viewer and element selector.</p>\n</blockquote>\n<p>fa_convnav works with the fastai deep learning library, allowing users to explore convolutional neural network (CNN)  structure and composition as well as select modules and layers for further investigation using hooks and callbacks.</p>\n<p>fa_convnav provides native support for the following types of CNN model:</p>\n<ul>\n<li>VGG</li>\n<li>alexnet</li>\n<li>resnets</li>\n<li>squeezenets</li>\n<li>densenets</li>\n<li>xresnets</li>\n</ul>\n<p>With minimal code changes, fa_convnav can also be adapted for use with other CNN architectures and custom CNN models.</p>\n<p><strong>A note about naming.</strong> Naming conventions for the elements of a CNN is confusing with many terms such as layer and module used interchangeably. Here we use the following definitions to describe a CNN.</p>\n<ul>\n<li><strong>'layers'</strong> are the information processing units of the model, they can be single elements (e.g. <code>conv2d</code>, <code>batchnorm2d</code>, <code>maxpool</code>, <code>relu</code> etc) or for larger models with deeply nested sequences, a short sequence of elements wrapped in a container element.</li>\n<li><strong>'modules'</strong> may be layers but also container elements, such as <code>nn.sequential</code>, which wrap a sequence of layers.</li>\n<li><strong>'container'</strong> elements group sequences of CNN layers or modules togather into functional units.</li>\n<li><strong>'elements'</strong> are all the elements that make up the CNN, both container and non-container,  layers and modules.</li>\n<li><strong>'divisions'</strong> refer to the head (1) and body (0)  of a transfer learning model</li>\n<li><strong>'child containers'</strong> are the first tier of nested modules. These usually match the modules returned with the fastai <code>model.named_children()</code> method.</li>\n<li><strong>'Blocks'</strong> are the second tier of nested modules, usually repeating throughout the main bulk of the model and containing a fixed sequence of layers. Depending on the architecture, blocks may have a specific name such as <code>BasicBlock</code> or <code>_DenseBlock</code>.</li>\n<li><strong>'model'</strong> refers to a pre-trained architecture with head and body divisions.</li>\n<li><strong>architecture</strong> is an untrained neural network</li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install fa_convnav\n</code></pre>\n<h2>How to Use</h2>\n<p>First set up a deep learning vision project using fastai2 and create a Learner object from a dataloader, pretrained model and an optimizer. All the pretrained models installed with the fastai2 library are supported by fa_convnav. Run <code>convnav_supported_models()</code> in a notebook cell to see the complete list.</p>\n<p>If you are not familiar with the fastai/fastai2 library then the <a href=\"https://dev.fast.ai/\" rel=\"nofollow\">fastai documentation</a> or most recent<a href=\"https://course.fast.ai/index.html\" rel=\"nofollow\">Deep Learning for Coders</a> course are excellent places to start. Alternatively to quickly get a feel for and play around with fastai2 and fa_convnav see the example notebooks, <code>03_examples00.ipynb</code> and <code>04_examples 01.ipynb</code> in this repo.</p>\n<h2>Create and view a ConvNav dataframe.</h2>\n<pre><code>from fa_convnav.navigator import *\n</code></pre>\n<p>With a fastai Learner object <code>Learner</code>, create a ConvNav instance <code>cn</code>:</p>\n<pre><code>cn = ConvNav(learner, Learner.summary())\n</code></pre>\n<p>The model type and name are automatically detected and a dataframe of CNN model information built. We will call this a CNDF dataframe. CNDF dataframes combine an intuitive representation of the model architecture along with the description, class, output dimensions, parameters and frozen/unfrozen status of each module and layer.</p>\n<p>View a CNDF dataframe:</p>\n<pre><code>cn.view()\n</code></pre>\n<p>or</p>\n<pre><code>cn() *prints just the first ten rows\n</code></pre>\n<h2>Searching a CNDF dataframe and selecting model elements</h2>\n<p>CNDF dataframes can be viewed whole to see the overall structure of the model as well as subsetted and/or searched for any combination of model element(s). The selected element(s) are displayed and the module objects returned for further use, for example as targets for pytorch hooks and fastai callbacks. CNDF dataframes can also be saved to persistent storage.</p>\n<p>For example:</p>\n<pre><code>cn.divs\n</code></pre>\n<p>Displays summary information for the model body and head.</p>\n<pre><code>cn.search('0.0.2', exact=True)\n</code></pre>\n<p>Searches for, displays and returns the module object with module_name '0.0.2'.</p>\n<pre><code>cn.spread(req='conv', num=8)\n</code></pre>\n<p>Searches for, displays and returns the module objects for eight <code>Conv2d</code> layers equally spaced from start to end of the model.</p>\n<h2>Example notebooks</h2>\n<p>Find <code>03_examples00.ipynb</code> and <code>04_examples01.ipynb</code> in this repo. These contain working examples of fa_convnav used to view a resnet model and select appropriate modules for use in investigating model training. Example notebooks can be downloaded and run in any notebook environment.</p>\n<h2>Tests</h2>\n<p>To run test in parallel launch:\n<code>nbdev_test_nbs</code> from the command line\nor\n<code>!nbdev_test_nbs</code> from inside a Jupyter Notebook with nbdev installed</p>\n<h2>Docs</h2>\n<p>This project, it's github repo and documentation were all built using the fastai nbdev literate programming environment for Jupyter Notebooks. Find out more about nbdev and use it in your own project <a href=\"https://github.com/fastai/nbdev\" rel=\"nofollow\">here</a></p>\n<h2>Contributing</h2>\n<p>After you clone this repository, please run nbdev_install_git_hooks in your terminal. This sets up git hooks, which clean up the notebooks to remove the extraneous stuff stored in the notebooks (e.g. which cells you ran) which causes unnecessary merge conflicts.</p>\n<p>Before submitting a PR, check that the local library and notebooks match. The script nbdev_diff_nbs can let you know if there is a difference between the local library and the notebooks.</p>\n<p>If you made a change to the notebooks in one of the exported cells, you can export it to the library with nbdev_build_lib or make fastai2.\nIf you made a change to the library, you can export it back to the notebooks with nbdev_update_lib.</p>\n\n          </div>"}, "last_serial": 6675986, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6a1329605dd98fdd05f43c1e4e4d5d97", "sha256": "f23108ec873187be4ccb104c5e9b0f0f2bbcf1cb23f653787161e568b49298f9"}, "downloads": -1, "filename": "fa_convnav-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6a1329605dd98fdd05f43c1e4e4d5d97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18535, "upload_time": "2020-02-20T18:40:30", "upload_time_iso_8601": "2020-02-20T18:40:30.610778Z", "url": "https://files.pythonhosted.org/packages/f6/23/afab1de2a0d59b11bb090cdacac682a83fd2f4c20ec1663f82dae9585bca/fa_convnav-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6590c4d8a732bb52ac7866719cc5a17", "sha256": "b85a2a987c56239921f5bd2c1b322e9b1ff9e7371e56ce154371e801326a21a7"}, "downloads": -1, "filename": "fa_convnav-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c6590c4d8a732bb52ac7866719cc5a17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48994206, "upload_time": "2020-02-20T18:40:40", "upload_time_iso_8601": "2020-02-20T18:40:40.280877Z", "url": "https://files.pythonhosted.org/packages/1b/6e/6741b0048ed5c7ee0dbe6012820cafc3106c50808d875551ea43cca72dbf/fa_convnav-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6d606b56bdaa9f1e074b61585987e1a8", "sha256": "7b1dc555a612c73bf96bde0a4a65630e314ddb5460608eca1d21c2e7a1fb23b7"}, "downloads": -1, "filename": "fa_convnav-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d606b56bdaa9f1e074b61585987e1a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18719, "upload_time": "2020-02-21T15:26:44", "upload_time_iso_8601": "2020-02-21T15:26:44.172359Z", "url": "https://files.pythonhosted.org/packages/3d/d0/5ce59dc4929f364ccd943f697df300e27c81fad04acb29d155f9ef749e74/fa_convnav-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b7346bd97fdb07b75a76d8e513d671", "sha256": "856884e2646f355ac1a63b833ea673d36395e9cdef0a5feaa1812dcefb44a14d"}, "downloads": -1, "filename": "fa_convnav-0.0.2.tar.gz", "has_sig": false, "md5_digest": "68b7346bd97fdb07b75a76d8e513d671", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48994967, "upload_time": "2020-02-21T15:26:49", "upload_time_iso_8601": "2020-02-21T15:26:49.507236Z", "url": "https://files.pythonhosted.org/packages/6f/28/0833a7a493aad0a14f51aad19aa5bf289c80f0124978dd17e1d173465286/fa_convnav-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d606b56bdaa9f1e074b61585987e1a8", "sha256": "7b1dc555a612c73bf96bde0a4a65630e314ddb5460608eca1d21c2e7a1fb23b7"}, "downloads": -1, "filename": "fa_convnav-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d606b56bdaa9f1e074b61585987e1a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18719, "upload_time": "2020-02-21T15:26:44", "upload_time_iso_8601": "2020-02-21T15:26:44.172359Z", "url": "https://files.pythonhosted.org/packages/3d/d0/5ce59dc4929f364ccd943f697df300e27c81fad04acb29d155f9ef749e74/fa_convnav-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b7346bd97fdb07b75a76d8e513d671", "sha256": "856884e2646f355ac1a63b833ea673d36395e9cdef0a5feaa1812dcefb44a14d"}, "downloads": -1, "filename": "fa_convnav-0.0.2.tar.gz", "has_sig": false, "md5_digest": "68b7346bd97fdb07b75a76d8e513d671", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48994967, "upload_time": "2020-02-21T15:26:49", "upload_time_iso_8601": "2020-02-21T15:26:49.507236Z", "url": "https://files.pythonhosted.org/packages/6f/28/0833a7a493aad0a14f51aad19aa5bf289c80f0124978dd17e1d173465286/fa_convnav-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:05 2020"}