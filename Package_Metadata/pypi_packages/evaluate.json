{"info": {"author": "Ravindra Marella", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "A tool to evaluate the performance of various machine learning algorithms and preprocessing steps to find a good baseline for a given task.\n\n## Installation\n\n```sh\npip install evaluate\n```\n\n## Example\n\n```py\nimport evaluate\nfrom sklearn import datasets\n\ndata = datasets.load_iris()\nx, y = data.data, data.target\n\nresults = evaluate(task='classification', data=(x, y))\nresults['test_score'].plot.bar()\n```\n\n![](results.png)\n\n## Documentation\n\nThis tool performs common preprocessing steps such as feature scaling, one-hot encoding etc., and runs various ML algorithms such as Random Forests, SVM etc. It then evaluates the performance of each preprocessing step and ML algorithm and provides scores for each. These results can be used to quickly identify preprocessing steps and ML algorithms that perform well to form a good baseline which can be used to develop better models.\n\n```py\nevaluate(task,\n         data,\n         test_data=.2,\n         columns=None,\n         preprocessors=None,\n         estimators=None)\n```\n\n###### Args\n\n-   `task`: `'classification'` or `'regression'`\n-   `data`: Tuple of `x, y` used for training the model\n-   `test_data`: Tuple of `x, y` or a number representing the proportion of `data` to be used for scoring the model\n-   `columns`: Dictionary of lists mapping column types to column names. If not specified numeric and categorical columns are automatically identified\n-   `preprocessors`: List of names of available preprocessors or a custom `Preprocessors` object\n-   `estimators`: List of names of available estimators or a custom `Estimators` object\n\n###### Returns\n\nDictionary of pandas DataFrames with estimator names as index and preprocessor names as column names with the following keys:\n\n```py\n{\n    'test_score': ...,\n    'train_score': ...,\n    'fit_time': ...,\n    'score_time': ...,\n}\n```\n\n```py\nresults = evaluate(...)\nassert isinstance(results, dict)\nscores = results['test_score']\nassert isinstance(scores, pandas.DataFrame)\nscores.plot.bar()\n```\n\n### Preprocessors\n\n#### Available Preprocessors\n\n| Name  | Column Type | Description                                              |\n| ----- | ----------- | -------------------------------------------------------- |\n| n     | numeric     | Handle missing data                                      |\n| n:s   | numeric     | Standardize features                                     |\n| c     | categorical | Handle missing data and perform one-hot encoding         |\n| o     | ordinal     | Handle missing data and perform ordinal encoding         |\n| t:c   | text        | Convert to a matrix of token counts                      |\n| t:c=2 | text        | Convert to a matrix of token counts including bigrams    |\n| t:t   | text        | Convert to a matrix of TF-IDF features                   |\n| t:t=2 | text        | Convert to a matrix of TF-IDF features including bigrams |\n\nMultiple preprocessors can be combined into one by separating them with `,`:\n\n```py\nresults = evaluate(..., preprocessors=['n,c,o', 'n:s,c,o'])\n```\n\n#### Custom Preprocessors\n\nCustom preprocessors can be added as:\n\n```py\nfrom evaluate import evaluate, Preprocessors\n\npreprocessors = Preprocessors()\npreprocessors.add('custom_preprocessor', CustomPreprocessor())\nresults = evaluate(..., preprocessors=preprocessors)\n```\n\nName of the custom preprocessor must be unique.\n\n### Estimators\n\n#### Available Estimators\n\n| Classification             | Regression                |\n| -------------------------- | ------------------------- |\n| XGBClassifier              | XGBRegressor              |\n| LGBMClassifier             | LGBMRegressor             |\n| RandomForestClassifier     | RandomForestRegressor     |\n| SVC                        | SVR                       |\n| LogisticRegression         | LinearRegression          |\n| KNeighborsClassifier       | KNeighborsRegressor       |\n| AdaBoostClassifier         | AdaBoostRegressor         |\n| ExtraTreesClassifier       | ExtraTreesRegressor       |\n| GradientBoostingClassifier | GradientBoostingRegressor |\n| DecisionTreeClassifier     | DecisionTreeRegressor     |\n| DummyClassifier            | DummyRegressor            |\n\n#### Custom Estimators\n\nCustom estimators can be added as:\n\n```py\nfrom evaluate import evaluate, Estimators\n\nestimators = Estimators(task='classification')\nestimators.add('custom_estimator', CustomEstimator())\nresults = evaluate(..., estimators=estimators)\n```\n\nName of the custom estimator must be unique.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "evaluate scikit-learn sklearn xgboost lightgbm machine-learning", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "evaluate", "package_url": "https://pypi.org/project/evaluate/", "platform": "", "project_url": "https://pypi.org/project/evaluate/", "project_urls": null, "release_url": "https://pypi.org/project/evaluate/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A tool to evaluate the performance of various machine learning algorithms and preprocessing steps to find a good baseline for a given task.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A tool to evaluate the performance of various machine learning algorithms and preprocessing steps to find a good baseline for a given task.</p>\n<h2>Installation</h2>\n<pre>pip install evaluate\n</pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">evaluate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">=</span><span class=\"s1\">'classification'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'test_score'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22ff37e7e6644b92b1fdaa4e017c561a8a8bb715/726573756c74732e706e67\"></p>\n<h2>Documentation</h2>\n<p>This tool performs common preprocessing steps such as feature scaling, one-hot encoding etc., and runs various ML algorithms such as Random Forests, SVM etc. It then evaluates the performance of each preprocessing step and ML algorithm and provides scores for each. These results can be used to quickly identify preprocessing steps and ML algorithms that perform well to form a good baseline which can be used to develop better models.</p>\n<pre><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span>\n         <span class=\"n\">data</span><span class=\"p\">,</span>\n         <span class=\"n\">test_data</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n         <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">preprocessors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h6>Args</h6>\n<ul>\n<li><code>task</code>: <code>'classification'</code> or <code>'regression'</code></li>\n<li><code>data</code>: Tuple of <code>x, y</code> used for training the model</li>\n<li><code>test_data</code>: Tuple of <code>x, y</code> or a number representing the proportion of <code>data</code> to be used for scoring the model</li>\n<li><code>columns</code>: Dictionary of lists mapping column types to column names. If not specified numeric and categorical columns are automatically identified</li>\n<li><code>preprocessors</code>: List of names of available preprocessors or a custom <code>Preprocessors</code> object</li>\n<li><code>estimators</code>: List of names of available estimators or a custom <code>Estimators</code> object</li>\n</ul>\n<h6>Returns</h6>\n<p>Dictionary of pandas DataFrames with estimator names as index and preprocessor names as column names with the following keys:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'test_score'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'train_score'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fit_time'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'score_time'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)</span>\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'test_score'</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">)</span>\n<span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>\n</pre>\n<h3>Preprocessors</h3>\n<h4>Available Preprocessors</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Column Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>n</td>\n<td>numeric</td>\n<td>Handle missing data</td>\n</tr>\n<tr>\n<td>n:s</td>\n<td>numeric</td>\n<td>Standardize features</td>\n</tr>\n<tr>\n<td>c</td>\n<td>categorical</td>\n<td>Handle missing data and perform one-hot encoding</td>\n</tr>\n<tr>\n<td>o</td>\n<td>ordinal</td>\n<td>Handle missing data and perform ordinal encoding</td>\n</tr>\n<tr>\n<td>t:c</td>\n<td>text</td>\n<td>Convert to a matrix of token counts</td>\n</tr>\n<tr>\n<td>t:c=2</td>\n<td>text</td>\n<td>Convert to a matrix of token counts including bigrams</td>\n</tr>\n<tr>\n<td>t:t</td>\n<td>text</td>\n<td>Convert to a matrix of TF-IDF features</td>\n</tr>\n<tr>\n<td>t:t=2</td>\n<td>text</td>\n<td>Convert to a matrix of TF-IDF features including bigrams</td>\n</tr></tbody></table>\n<p>Multiple preprocessors can be combined into one by separating them with <code>,</code>:</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">preprocessors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'n,c,o'</span><span class=\"p\">,</span> <span class=\"s1\">'n:s,c,o'</span><span class=\"p\">])</span>\n</pre>\n<h4>Custom Preprocessors</h4>\n<p>Custom preprocessors can be added as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">evaluate</span> <span class=\"kn\">import</span> <span class=\"n\">evaluate</span><span class=\"p\">,</span> <span class=\"n\">Preprocessors</span>\n\n<span class=\"n\">preprocessors</span> <span class=\"o\">=</span> <span class=\"n\">Preprocessors</span><span class=\"p\">()</span>\n<span class=\"n\">preprocessors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'custom_preprocessor'</span><span class=\"p\">,</span> <span class=\"n\">CustomPreprocessor</span><span class=\"p\">())</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">preprocessors</span><span class=\"o\">=</span><span class=\"n\">preprocessors</span><span class=\"p\">)</span>\n</pre>\n<p>Name of the custom preprocessor must be unique.</p>\n<h3>Estimators</h3>\n<h4>Available Estimators</h4>\n<table>\n<thead>\n<tr>\n<th>Classification</th>\n<th>Regression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>XGBClassifier</td>\n<td>XGBRegressor</td>\n</tr>\n<tr>\n<td>LGBMClassifier</td>\n<td>LGBMRegressor</td>\n</tr>\n<tr>\n<td>RandomForestClassifier</td>\n<td>RandomForestRegressor</td>\n</tr>\n<tr>\n<td>SVC</td>\n<td>SVR</td>\n</tr>\n<tr>\n<td>LogisticRegression</td>\n<td>LinearRegression</td>\n</tr>\n<tr>\n<td>KNeighborsClassifier</td>\n<td>KNeighborsRegressor</td>\n</tr>\n<tr>\n<td>AdaBoostClassifier</td>\n<td>AdaBoostRegressor</td>\n</tr>\n<tr>\n<td>ExtraTreesClassifier</td>\n<td>ExtraTreesRegressor</td>\n</tr>\n<tr>\n<td>GradientBoostingClassifier</td>\n<td>GradientBoostingRegressor</td>\n</tr>\n<tr>\n<td>DecisionTreeClassifier</td>\n<td>DecisionTreeRegressor</td>\n</tr>\n<tr>\n<td>DummyClassifier</td>\n<td>DummyRegressor</td>\n</tr></tbody></table>\n<h4>Custom Estimators</h4>\n<p>Custom estimators can be added as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">evaluate</span> <span class=\"kn\">import</span> <span class=\"n\">evaluate</span><span class=\"p\">,</span> <span class=\"n\">Estimators</span>\n\n<span class=\"n\">estimators</span> <span class=\"o\">=</span> <span class=\"n\">Estimators</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">=</span><span class=\"s1\">'classification'</span><span class=\"p\">)</span>\n<span class=\"n\">estimators</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'custom_estimator'</span><span class=\"p\">,</span> <span class=\"n\">CustomEstimator</span><span class=\"p\">())</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"n\">estimators</span><span class=\"p\">)</span>\n</pre>\n<p>Name of the custom estimator must be unique.</p>\n\n          </div>"}, "last_serial": 6306889, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "59a4f565739414fd5682a45725d9511a", "sha256": "43c4969cdc8d6c2d69b92b1c3ae5ddaa2c2a75384733e7e549aa9c17f935b589"}, "downloads": -1, "filename": "evaluate-0.0.0.tar.gz", "has_sig": false, "md5_digest": "59a4f565739414fd5682a45725d9511a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4087, "upload_time": "2019-11-10T17:27:23", "upload_time_iso_8601": "2019-11-10T17:27:23.965420Z", "url": "https://files.pythonhosted.org/packages/d3/98/bce4070a4460baa9f6eda342a7e536be238c4a93d8b03dbd9880d6e07cb8/evaluate-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "a4d592cfc5f483d8deb027cc023b090c", "sha256": "7229b1cb42e52771ce0ec49f6695d3d97db5ab04975c1b15fdfa406a5bc183a6"}, "downloads": -1, "filename": "evaluate-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a4d592cfc5f483d8deb027cc023b090c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4273, "upload_time": "2019-11-11T23:25:27", "upload_time_iso_8601": "2019-11-11T23:25:27.294083Z", "url": "https://files.pythonhosted.org/packages/e2/83/b2ff0efbc60dbef96efe97c74f507dffafc250381191df1f945ca765ec27/evaluate-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c7141252ae82399a932fee8ded478180", "sha256": "f7fd5ab6819bcb4008d2442843bd704b8a91ab497390526c9c5f18268d9945a0"}, "downloads": -1, "filename": "evaluate-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c7141252ae82399a932fee8ded478180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5959, "upload_time": "2019-12-15T15:26:32", "upload_time_iso_8601": "2019-12-15T15:26:32.331318Z", "url": "https://files.pythonhosted.org/packages/c9/35/be5569a563f1df8be7e29702ff2829e135ed8e53d126cedb867a8f27a144/evaluate-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f9428d1e93f0350dc114ee5530388104", "sha256": "f1d15be7e440828071671769d06301cce678de475b30d0da76147fe5d56d70a5"}, "downloads": -1, "filename": "evaluate-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f9428d1e93f0350dc114ee5530388104", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5953, "upload_time": "2019-12-15T15:44:34", "upload_time_iso_8601": "2019-12-15T15:44:34.629717Z", "url": "https://files.pythonhosted.org/packages/90/50/0cc73b299fd941cb12d7ed39e0ccf8e18fe78dd6c16b951abe5477b3cd82/evaluate-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9428d1e93f0350dc114ee5530388104", "sha256": "f1d15be7e440828071671769d06301cce678de475b30d0da76147fe5d56d70a5"}, "downloads": -1, "filename": "evaluate-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f9428d1e93f0350dc114ee5530388104", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5953, "upload_time": "2019-12-15T15:44:34", "upload_time_iso_8601": "2019-12-15T15:44:34.629717Z", "url": "https://files.pythonhosted.org/packages/90/50/0cc73b299fd941cb12d7ed39e0ccf8e18fe78dd6c16b951abe5477b3cd82/evaluate-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:17 2020"}