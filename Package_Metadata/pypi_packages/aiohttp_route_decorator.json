{"info": {"author": "Ilya Semenov", "author_email": "ilya@semenov.co", "bugtrack_url": null, "classifiers": [], "description": "aiohttp_route_decorator\n=======================\n\nThe library provides ``@route`` decorator for `aiohttp.web`_, resembling the contract of Flask_ ``@app.route``.\n\n.. _aiohttp.web: https://aiohttp.readthedocs.io/en/latest/web.html\n.. _Flask: http://flask.pocoo.org/docs/0.11/quickstart/#routing\n\nThe imaginary ``aiohttp`` ``@app.route`` decorator is discouraged_ for multiple_ reasons_; this one tries to solve part of those problems (the ``app`` doesn't need to be global at the very least).\n\n.. _discouraged: http://aiohttp.readthedocs.io/en/stable/faq.html\n.. _multiple: https://github.com/KeepSafe/aiohttp/issues/428\n.. _reasons: https://github.com/KeepSafe/aiohttp/pull/195\n\n\nInstallation\n============\n\n::\n\n        pip install aiohttp_route_decorator\n\n\nUsage\n=====\n\nCreate a ``route`` object in each of your handler modules, and decorate the handlers:\n\n.. code:: python\n\n\t# myapp/handlers.py\n\n\tfrom aiohttp_route_decorator import RouteCollector\n\n\troute = RouteCollector()\n\n\t@route('/')\n\tasync def index(request):\n\t\treturn web.Response(body=b'OK')\n\n\t@route('/publish', method='POST')\n\tasync def publish(request):\n\t\treturn web.Response(body=b'OK')\n\n\t@route('/login', methods=['GET', 'POST'], name='login')\n\tasync def login(request):\n\t\tif request.method == 'POST':\n\t\t\treturn web.Response(body=b'OK')\n\t\treturn web.Response(body=b'Login')\n\t\t\n\nWhen you init the application, push the collected ``routes`` into ``app.router``:\n\n.. code:: python\n\n\tfrom aiohttp import web\n\tfrom myapp import handlers\n\n\tdef run():\n\t\tapp = web.Application()\n\t\thandlers.route.add_to_router(app.router)\n\t\tweb.run_app(app)\n\n\nNon-decorator use\n-----------------\n\nIf you prefer to keep your routes together, you can construct the list manually after your handers:\n\n.. code:: python\n\n\tfrom aiohttp_route_decorator import RouteCollector, Route\n\n\tasync def index(request):\n\t\treturn web.Response(body=b'OK')\n\n\tasync def publish(request):\n\t\treturn web.Response(body=b'OK')\n\n\tasync def login(request):\n\t\tif request.method == 'POST':\n\t\t\treturn web.Response(body=b'OK')\n\t\treturn web.Response(body=b'Login')\n\n\troutes = RouteCollector([\n\t\tRoute('/', index),\n\t\tRoute('/publish', publish, method='POST'),\n\t\tRoute('/login', login, methods=['GET', 'POST'], name='login'),\n\t])\n\n\nPrefixed routes\n---------------\n\nYou can provide common route prefix that will be prepended to all routes:\n\n.. code:: python\n\n\tfrom aiohttp_route_decorator import RouteCollector\n\n\troutes = RouteCollector(prefix='/app')\n\n\t@route('/')\n\tasync def index(request):\n\t\treturn web.Response(body=b'OK')\n\n\t@route('/publish', method='POST')\n\tasync def publish(request):\n\t\treturn web.Response(body=b'OK')\n\n\t...\n\n\thandlers.route.add_to_router(app.router)\n\t# /app/ -> index\n\t# /app/publish -> publish\n\n\nYou can also provide the prefix within ``add_to_router()`` call instead:\n\n.. code:: python\n\n\tfrom aiohttp_route_decorator import RouteCollector\n\n\troutes = RouteCollector()\n\n\t@route('/')\n\tasync def index(request):\n\t\treturn web.Response(body=b'OK')\n\n\t@route('/publish', method='POST')\n\tasync def publish(request):\n\t\treturn web.Response(body=b'OK')\n\n\t...\n\n\thandlers.route.add_to_router(app.router, prefix='/app')\n\t# /app/ -> index\n\t# /app/publish -> publish\n\n\n...or use both:\n\n.. code:: python\n\n\tfrom aiohttp_route_decorator import RouteCollector\n\n\troutes = RouteCollector(prefix='/app')\n\n\t@route('/')\n\tasync def index(request):\n\t\treturn web.Response(body=b'OK')\n\n\t@route('/publish', method='POST')\n\tasync def publish(request):\n\t\treturn web.Response(body=b'OK')\n\n\t...\n\n\thandlers.route.add_to_router(app.router, prefix='/project')\n\t# /project/app/ -> index\n\t# /project/app/publish -> publish\n\n\nThe non-decorator version of ``RouteCollector`` can also accept prefix:\n\n.. code:: python\n\n\tfrom aiohttp_route_decorator import RouteCollector, Route\n\n\tasync def index(request):\n\t\treturn web.Response(body=b'OK')\n\n\tasync def publish(request):\n\t\treturn web.Response(body=b'OK')\n\n\troutes = RouteCollector(prefix='/app', routes=[\n\t\tRoute('/', index),\n\t\tRoute('/publish', publish, method='POST'),\n\t])\n\n\nParameters reference\n--------------------\n\n``route(path, *, method='GET', methods=None, name=None, **kwargs)``\n\n- **path** (*str*) \u2014 route path. Should be started with slash (``'/'``).\n- **method** (*str*) \u2014 HTTP method for route. Should be one of ``'GET'``, ``'POST'``, ``'PUT'``, ``'DELETE'``, ``'PATCH'``, ``'HEAD'``, ``'OPTIONS'`` or ``'*'`` for any method.\n- **methods** (*List[str]*) \u2014 optional shortcut for creating several routes with different HTTP methods at once. If used, should be a list of acceptable values for ``method`` argument.\n- **name** (*str*) \u2014 optional route name.\n- **kwargs** \u2014 other parameters to be passed to ``aiohttp.web.Resource.add_route()``.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IlyaSemenov/aiohttp_route_decorator", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "aiohttp_route_decorator", "package_url": "https://pypi.org/project/aiohttp_route_decorator/", "platform": "", "project_url": "https://pypi.org/project/aiohttp_route_decorator/", "project_urls": {"Homepage": "https://github.com/IlyaSemenov/aiohttp_route_decorator"}, "release_url": "https://pypi.org/project/aiohttp_route_decorator/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "aiohttp @route decorator that doesn't need the app singleton", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"aiohttp-route-decorator\">\n<h2>aiohttp_route_decorator</h2>\n<p>The library provides <tt>@route</tt> decorator for <a href=\"https://aiohttp.readthedocs.io/en/latest/web.html\" rel=\"nofollow\">aiohttp.web</a>, resembling the contract of <a href=\"http://flask.pocoo.org/docs/0.11/quickstart/#routing\" rel=\"nofollow\">Flask</a> <tt>@app.route</tt>.</p>\n<p>The imaginary <tt>aiohttp</tt> <tt>@app.route</tt> decorator is <a href=\"http://aiohttp.readthedocs.io/en/stable/faq.html\" rel=\"nofollow\">discouraged</a> for <a href=\"https://github.com/KeepSafe/aiohttp/issues/428\" rel=\"nofollow\">multiple</a> <a href=\"https://github.com/KeepSafe/aiohttp/pull/195\" rel=\"nofollow\">reasons</a>; this one tries to solve part of those problems (the <tt>app</tt> doesn\u2019t need to be global at the very least).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install aiohttp_route_decorator\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create a <tt>route</tt> object in each of your handler modules, and decorate the handlers:</p>\n<pre><span class=\"c1\"># myapp/handlers.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">RouteCollector</span>\n\n<span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">RouteCollector</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/publish'</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/login'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'login'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">'POST'</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'Login'</span><span class=\"p\">)</span>\n</pre>\n<p>When you init the application, push the collected <tt>routes</tt> into <tt>app.router</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">handlers</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n        <span class=\"n\">handlers</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">add_to_router</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"p\">)</span>\n        <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<div id=\"non-decorator-use\">\n<h3>Non-decorator use</h3>\n<p>If you prefer to keep your routes together, you can construct the list manually after your handers:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">RouteCollector</span><span class=\"p\">,</span> <span class=\"n\">Route</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">'POST'</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'Login'</span><span class=\"p\">)</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">RouteCollector</span><span class=\"p\">([</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">),</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/publish'</span><span class=\"p\">,</span> <span class=\"n\">publish</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">),</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/login'</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'login'</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"prefixed-routes\">\n<h3>Prefixed routes</h3>\n<p>You can provide common route prefix that will be prepended to all routes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">RouteCollector</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">RouteCollector</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'/app'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/publish'</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">handlers</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">add_to_router</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"p\">)</span>\n<span class=\"c1\"># /app/ -&gt; index</span>\n<span class=\"c1\"># /app/publish -&gt; publish</span>\n</pre>\n<p>You can also provide the prefix within <tt>add_to_router()</tt> call instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">RouteCollector</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">RouteCollector</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/publish'</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">handlers</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">add_to_router</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'/app'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /app/ -&gt; index</span>\n<span class=\"c1\"># /app/publish -&gt; publish</span>\n</pre>\n<p>\u2026or use both:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">RouteCollector</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">RouteCollector</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'/app'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/publish'</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">handlers</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">add_to_router</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'/project'</span><span class=\"p\">)</span>\n<span class=\"c1\"># /project/app/ -&gt; index</span>\n<span class=\"c1\"># /project/app/publish -&gt; publish</span>\n</pre>\n<p>The non-decorator version of <tt>RouteCollector</tt> can also accept prefix:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">RouteCollector</span><span class=\"p\">,</span> <span class=\"n\">Route</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'OK'</span><span class=\"p\">)</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">RouteCollector</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'/app'</span><span class=\"p\">,</span> <span class=\"n\">routes</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">),</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/publish'</span><span class=\"p\">,</span> <span class=\"n\">publish</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"parameters-reference\">\n<h3>Parameters reference</h3>\n<p><tt>route(path, *, <span class=\"pre\">method='GET',</span> methods=None, name=None, **kwargs)</tt></p>\n<ul>\n<li><strong>path</strong> (<em>str</em>) \u2014 route path. Should be started with slash (<tt>'/'</tt>).</li>\n<li><strong>method</strong> (<em>str</em>) \u2014 HTTP method for route. Should be one of <tt>'GET'</tt>, <tt>'POST'</tt>, <tt>'PUT'</tt>, <tt>'DELETE'</tt>, <tt>'PATCH'</tt>, <tt>'HEAD'</tt>, <tt>'OPTIONS'</tt> or <tt>'*'</tt> for any method.</li>\n<li><strong>methods</strong> (<em>List[str]</em>) \u2014 optional shortcut for creating several routes with different HTTP methods at once. If used, should be a list of acceptable values for <tt>method</tt> argument.</li>\n<li><strong>name</strong> (<em>str</em>) \u2014 optional route name.</li>\n<li><strong>kwargs</strong> \u2014 other parameters to be passed to <tt>aiohttp.web.Resource.add_route()</tt>.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3016716, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0cc5e29c7019be1b0a962341d2f62ea2", "sha256": "17c4180e6be9303f917e088367602f1b66dd2e9454e3b8b5f0eefe7decd9e4da"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0cc5e29c7019be1b0a962341d2f62ea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1770, "upload_time": "2016-06-21T13:11:22", "upload_time_iso_8601": "2016-06-21T13:11:22.826177Z", "url": "https://files.pythonhosted.org/packages/4c/bd/037723fb6cd62c6b37abc940c2e2d4b88d67dbb5349cb750b7d734f3d5fc/aiohttp_route_decorator-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "e8cfd68e148c5d3de48e70c35de8d66c", "sha256": "46519f2638d05be9649084a00096274b2563c66c7ea90ebdcf487ac636131dbc"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e8cfd68e148c5d3de48e70c35de8d66c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2491, "upload_time": "2016-06-22T04:00:16", "upload_time_iso_8601": "2016-06-22T04:00:16.307709Z", "url": "https://files.pythonhosted.org/packages/15/33/470f66a468b2baaeec1c7cb802402c15845d3b3bfba7aed9da95d3fa3d8c/aiohttp_route_decorator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3624de54d3dfed07703f19eaa891ef04", "sha256": "c7668bdca380c1aa430bf355368167ced464e25f90b2451c1b68cb2cdcb5c9c0"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3624de54d3dfed07703f19eaa891ef04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2651, "upload_time": "2016-06-22T04:18:58", "upload_time_iso_8601": "2016-06-22T04:18:58.733339Z", "url": "https://files.pythonhosted.org/packages/83/8f/40b43f4b33627868536d386a57042dcf4c4cea4dfa545d98a15725bf3a91/aiohttp_route_decorator-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ea324de1d9800d1827c15d977acbd424", "sha256": "63505a96e12c52b7f3689aac8d1c65bcdc61327f6618eacb3122b1927e15348c"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ea324de1d9800d1827c15d977acbd424", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2642, "upload_time": "2016-06-22T04:23:06", "upload_time_iso_8601": "2016-06-22T04:23:06.589106Z", "url": "https://files.pythonhosted.org/packages/d5/57/fd42852ac0419b278e473a3e79147412cfb596ff9c799104c8ca49b51ccc/aiohttp_route_decorator-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5272ea8f6879ae7bb17ab7721bc7fb6d", "sha256": "3941811faf0674935f5625afa42d7c5b2dfe6975bb5c1f71bc599a1a56b52b83"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5272ea8f6879ae7bb17ab7721bc7fb6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3132, "upload_time": "2016-06-25T09:25:13", "upload_time_iso_8601": "2016-06-25T09:25:13.209067Z", "url": "https://files.pythonhosted.org/packages/80/89/9bb8bd519a2679ee5ceedddf07b06230dd3548b39ff10cfecffb2edcd0f4/aiohttp_route_decorator-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a02ac34d701c579c11f39d4c9c02adab", "sha256": "d03fa077255852c26609c6134f342bfd5028b7b4ce19bf7927f55a04684c653c"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a02ac34d701c579c11f39d4c9c02adab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3796, "upload_time": "2017-07-12T07:33:31", "upload_time_iso_8601": "2017-07-12T07:33:31.109986Z", "url": "https://files.pythonhosted.org/packages/4f/b6/3af0444d36812b68367c3bb8ff65d0ccf5ba855ce28cda5ce10ff465021a/aiohttp_route_decorator-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a02ac34d701c579c11f39d4c9c02adab", "sha256": "d03fa077255852c26609c6134f342bfd5028b7b4ce19bf7927f55a04684c653c"}, "downloads": -1, "filename": "aiohttp_route_decorator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a02ac34d701c579c11f39d4c9c02adab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3796, "upload_time": "2017-07-12T07:33:31", "upload_time_iso_8601": "2017-07-12T07:33:31.109986Z", "url": "https://files.pythonhosted.org/packages/4f/b6/3af0444d36812b68367c3bb8ff65d0ccf5ba855ce28cda5ce10ff465021a/aiohttp_route_decorator-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:16 2020"}