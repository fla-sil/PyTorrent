{"info": {"author": "Petar Kenic", "author_email": "kenicpetar@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Build Tools"], "description": "# StarkLego\n\n## Introduction\nWelcome to *StarkLego*! You can use this python library to access different environments to interact with your RL agents, or you can even\nconstruct your own `.ldr` files using the built in tools that StarkLego provides.\n\n## Setting up Development Environment \nThe library was written in `Python 3.5.6`. When you install the library using `pip`, the library should already download \nall of the required libraries to run *StarkLego*. However, if this does not happen then you can download the following `pip` libraries manually:\n\n| Library | Recommended Version |\n|----|:----|\n| tensorflow | 1.8.0 |\n| gym | latest |\n| numpy | 1.16 |\n| pyldraw | 0.8.2 |\n\nYou can also run the following line in your command-line:<br/>\n`pip install gym pyldraw==0.8.2 numpy==1.16.0 tensorflow==1.8.0`\n\n__IMPORTANT:__ Create a `ldraw-license.txt` file in the directory wherever you are running your code from. This is necessary because in order to use the ldraw libraries you will need to include this.\n\n## Lego Piece Support\nSo far, only the following Lego Pieces are supported:\n- 2X2 Brick\nDue to the lack of support for more than the *2X2 Brick*, there is no customization available.\n\n## Constructing Your Own LDR Files\nYou might want to use this library to construct your own LDR files which contain different parts. \nThe following is an example of how to use the *StarkLego* package to create a Lego World.\n\n```python\nfrom StarkLego.lego_builders.service.builder import LegoWorld\nfrom StarkLego.lego_builders.service.builder import TwoXTwoBlock\n\nmy_lego_world = LegoWorld(6,12,6)\n\nmy_lego_world.add_part_to_world(part=TwoXTwoBlock(), x=0, z=0)\nmy_lego_world.add_part_to_world(TwoXTwoBlock(), 2, 2)\nmy_lego_world.add_part_to_world(TwoXTwoBlock(), 2, 2)\n\nprint(my_lego_world.ldraw_content)\n# Expected output \n#1 272 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 3003.DAT\n#1 272 40.000000 0.000000 40.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 3003.DAT\n#1 272 40.000000 -24.000000 40.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 3003.DAT\n\n```\n## Using Environments For Training Agents\n\nThese environments cater to the agents available in the `stable_baselines` RL library. \nYou can get `stable_baselines` by running the following in your command-line: <br/>\n`pip install stable-baselines==2.9.0`\n\n### How to run\nIf you wish to run one of these environments, please feel free using the code below:\n\n```python\nfrom StarkLego.environments.env_low_height import LegoEnv\nfrom stable_baselines.common.policies import MlpPolicy\nfrom stable_baselines.common.vec_env import DummyVecEnv\nfrom stable_baselines import PPO2\nimport numpy as np\n\n\nenv = DummyVecEnv([lambda: LegoEnv(4, 14, 4, 4)])\n\nmodel = PPO2(MlpPolicy, env, verbose=1, learning_rate=0.0001, gamma=1)\nmodel.learn(total_timesteps=3)\nobs = env.reset()\n\nprint(\"Done training\")\n\nfor i in range(4):\n    action, _states = model.predict(obs, deterministic=True)   #determinstic is `False` by default\n    obs, rewards, done, info = env.step(action)\n    env.render()\n    if done:\n        print(info[0].get(\"ldrContent\"))   #print the state through `info` due to environment resetting\n\n```\n### List of Supported Environments\n### env_low_height\nThe goal is to minimize the height of the Lego build. \n\n| Space | Data Type |\n|----|:----|\n| action_space | spaces.Box |\n| observation_space | spaces.Box |\n\n\nThe only specifications than can be made are the dimensions of the LEGO World, and the number of pieces per build iteration.\n#### Constructor:`LegoEnv(x, y, z, noLegoPieces)`\n- x: the maximum `x` dimenstion of the Lego World\n- y: the maximum `y` dimenstion of the Lego World\n- z: the maximum `z` dimenstion of the Lego World\n- noLegoPieces: The number of Lego pieces to be inserted into the Lego World\n\nThis environment does not allow any customization for which\nlego pieces can be used.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peken97/StarkLego", "keywords": "LEGO,BUILD,LDRAW", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "StarkLego", "package_url": "https://pypi.org/project/StarkLego/", "platform": "", "project_url": "https://pypi.org/project/StarkLego/", "project_urls": {"Homepage": "https://github.com/peken97/StarkLego"}, "release_url": "https://pypi.org/project/StarkLego/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "Library used to create lego builds", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>StarkLego</h1>\n<h2>Introduction</h2>\n<p>Welcome to <em>StarkLego</em>! You can use this python library to access different environments to interact with your RL agents, or you can even\nconstruct your own <code>.ldr</code> files using the built in tools that StarkLego provides.</p>\n<h2>Setting up Development Environment</h2>\n<p>The library was written in <code>Python 3.5.6</code>. When you install the library using <code>pip</code>, the library should already download\nall of the required libraries to run <em>StarkLego</em>. However, if this does not happen then you can download the following <code>pip</code> libraries manually:</p>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th align=\"left\">Recommended Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tensorflow</td>\n<td align=\"left\">1.8.0</td>\n</tr>\n<tr>\n<td>gym</td>\n<td align=\"left\">latest</td>\n</tr>\n<tr>\n<td>numpy</td>\n<td align=\"left\">1.16</td>\n</tr>\n<tr>\n<td>pyldraw</td>\n<td align=\"left\">0.8.2</td>\n</tr></tbody></table>\n<p>You can also run the following line in your command-line:<br>\n<code>pip install gym pyldraw==0.8.2 numpy==1.16.0 tensorflow==1.8.0</code></p>\n<p><strong>IMPORTANT:</strong> Create a <code>ldraw-license.txt</code> file in the directory wherever you are running your code from. This is necessary because in order to use the ldraw libraries you will need to include this.</p>\n<h2>Lego Piece Support</h2>\n<p>So far, only the following Lego Pieces are supported:</p>\n<ul>\n<li>2X2 Brick\nDue to the lack of support for more than the <em>2X2 Brick</em>, there is no customization available.</li>\n</ul>\n<h2>Constructing Your Own LDR Files</h2>\n<p>You might want to use this library to construct your own LDR files which contain different parts.\nThe following is an example of how to use the <em>StarkLego</em> package to create a Lego World.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">StarkLego.lego_builders.service.builder</span> <span class=\"kn\">import</span> <span class=\"n\">LegoWorld</span>\n<span class=\"kn\">from</span> <span class=\"nn\">StarkLego.lego_builders.service.builder</span> <span class=\"kn\">import</span> <span class=\"n\">TwoXTwoBlock</span>\n\n<span class=\"n\">my_lego_world</span> <span class=\"o\">=</span> <span class=\"n\">LegoWorld</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_lego_world</span><span class=\"o\">.</span><span class=\"n\">add_part_to_world</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"o\">=</span><span class=\"n\">TwoXTwoBlock</span><span class=\"p\">(),</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">my_lego_world</span><span class=\"o\">.</span><span class=\"n\">add_part_to_world</span><span class=\"p\">(</span><span class=\"n\">TwoXTwoBlock</span><span class=\"p\">(),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">my_lego_world</span><span class=\"o\">.</span><span class=\"n\">add_part_to_world</span><span class=\"p\">(</span><span class=\"n\">TwoXTwoBlock</span><span class=\"p\">(),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_lego_world</span><span class=\"o\">.</span><span class=\"n\">ldraw_content</span><span class=\"p\">)</span>\n<span class=\"c1\"># Expected output </span>\n<span class=\"c1\">#1 272 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 3003.DAT</span>\n<span class=\"c1\">#1 272 40.000000 0.000000 40.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 3003.DAT</span>\n<span class=\"c1\">#1 272 40.000000 -24.000000 40.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 1.000000 3003.DAT</span>\n</pre>\n<h2>Using Environments For Training Agents</h2>\n<p>These environments cater to the agents available in the <code>stable_baselines</code> RL library.\nYou can get <code>stable_baselines</code> by running the following in your command-line: <br>\n<code>pip install stable-baselines==2.9.0</code></p>\n<h3>How to run</h3>\n<p>If you wish to run one of these environments, please feel free using the code below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">StarkLego.environments.env_low_height</span> <span class=\"kn\">import</span> <span class=\"n\">LegoEnv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stable_baselines.common.policies</span> <span class=\"kn\">import</span> <span class=\"n\">MlpPolicy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stable_baselines.common.vec_env</span> <span class=\"kn\">import</span> <span class=\"n\">DummyVecEnv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stable_baselines</span> <span class=\"kn\">import</span> <span class=\"n\">PPO2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">DummyVecEnv</span><span class=\"p\">([</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">LegoEnv</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)])</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">PPO2</span><span class=\"p\">(</span><span class=\"n\">MlpPolicy</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">learn</span><span class=\"p\">(</span><span class=\"n\">total_timesteps</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Done training\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">_states</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">obs</span><span class=\"p\">,</span> <span class=\"n\">deterministic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>   <span class=\"c1\">#determinstic is `False` by default</span>\n    <span class=\"n\">obs</span><span class=\"p\">,</span> <span class=\"n\">rewards</span><span class=\"p\">,</span> <span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">done</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"ldrContent\"</span><span class=\"p\">))</span>   <span class=\"c1\">#print the state through `info` due to environment resetting</span>\n</pre>\n<h3>List of Supported Environments</h3>\n<h3>env_low_height</h3>\n<p>The goal is to minimize the height of the Lego build.</p>\n<table>\n<thead>\n<tr>\n<th>Space</th>\n<th align=\"left\">Data Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>action_space</td>\n<td align=\"left\">spaces.Box</td>\n</tr>\n<tr>\n<td>observation_space</td>\n<td align=\"left\">spaces.Box</td>\n</tr></tbody></table>\n<p>The only specifications than can be made are the dimensions of the LEGO World, and the number of pieces per build iteration.</p>\n<h4>Constructor:<code>LegoEnv(x, y, z, noLegoPieces)</code></h4>\n<ul>\n<li>x: the maximum <code>x</code> dimenstion of the Lego World</li>\n<li>y: the maximum <code>y</code> dimenstion of the Lego World</li>\n<li>z: the maximum <code>z</code> dimenstion of the Lego World</li>\n<li>noLegoPieces: The number of Lego pieces to be inserted into the Lego World</li>\n</ul>\n<p>This environment does not allow any customization for which\nlego pieces can be used.</p>\n\n          </div>"}, "last_serial": 6500052, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b1aac3f8717fcd5972658f50f99ee706", "sha256": "ce4b48d34099e0b27951c3f57e286a598b2693ae289ddc0b9fccfa7f56a45f04"}, "downloads": -1, "filename": "StarkLego-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b1aac3f8717fcd5972658f50f99ee706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2834, "upload_time": "2019-12-18T01:29:41", "upload_time_iso_8601": "2019-12-18T01:29:41.874906Z", "url": "https://files.pythonhosted.org/packages/11/e3/80e7cf26e193d90e5840e00822b381e1329518627b05300dcedb7a0b07f3/StarkLego-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2aed08bf87463635f5eb0ad721be57bc", "sha256": "35c9490aeb1b56aa1a1191ca3e5f1b3d79774137be1f815db8d1b4bd39cfe6ca"}, "downloads": -1, "filename": "StarkLego-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2aed08bf87463635f5eb0ad721be57bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4037, "upload_time": "2019-12-18T01:59:07", "upload_time_iso_8601": "2019-12-18T01:59:07.849780Z", "url": "https://files.pythonhosted.org/packages/11/c2/2630a8060792a0c8e7d4377747be1035e75dd13957af4d00ba39e1a73c6f/StarkLego-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "af6448dc479fae917b1ce8ec6bf0f2b2", "sha256": "690260d5cbcc3d1465a9da05ac2ecb6cf19cbda29ec8a2f8b6d181e3a5fbf301"}, "downloads": -1, "filename": "StarkLego-0.1.3.tar.gz", "has_sig": false, "md5_digest": "af6448dc479fae917b1ce8ec6bf0f2b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153021, "upload_time": "2019-12-18T14:59:51", "upload_time_iso_8601": "2019-12-18T14:59:51.422262Z", "url": "https://files.pythonhosted.org/packages/dd/58/776848c6796d4019b4308b04add5925bb70160e33175dd6e69507f714cb5/StarkLego-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "39c11af5019af25ac0dd1d5b419dc052", "sha256": "22ecba4ceb7c03815b01edff1c290e04fe950f48b1cad0de842a6e916479919e"}, "downloads": -1, "filename": "StarkLego-0.1.4.tar.gz", "has_sig": false, "md5_digest": "39c11af5019af25ac0dd1d5b419dc052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4038, "upload_time": "2019-12-18T17:01:44", "upload_time_iso_8601": "2019-12-18T17:01:44.343542Z", "url": "https://files.pythonhosted.org/packages/93/42/00d8c9f4573cb289e833e39d772f0e6fbabef527312b1d372aa0be34300b/StarkLego-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "cb8cc6750f48288364bda3a68ddf7ae5", "sha256": "d0edb463a921d1e962493c49b96598d6f0a6d6df37014594803a6ee0bc945dcc"}, "downloads": -1, "filename": "StarkLego-0.1.5.tar.gz", "has_sig": false, "md5_digest": "cb8cc6750f48288364bda3a68ddf7ae5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4032, "upload_time": "2019-12-22T17:14:24", "upload_time_iso_8601": "2019-12-22T17:14:24.478513Z", "url": "https://files.pythonhosted.org/packages/08/b5/fa2e0cf5dc21120277b65a23dd5757908a941995958fcbfe7c0f5f25a8eb/StarkLego-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "af8ae3eaa70634847c60b5ec20b67976", "sha256": "f19004a0092a0a870d747bb464fe01dd4fceaba2ed96ed1eea640e26106bcfab"}, "downloads": -1, "filename": "StarkLego-0.1.6.tar.gz", "has_sig": false, "md5_digest": "af8ae3eaa70634847c60b5ec20b67976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6439, "upload_time": "2019-12-30T16:17:02", "upload_time_iso_8601": "2019-12-30T16:17:02.759419Z", "url": "https://files.pythonhosted.org/packages/d5/03/75b8ab0c6c72798cda1a14f4bd71ab7ed82cefb2d9503bf6e1901d847c17/StarkLego-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "fcc7677c607d6eba1b1ad5db23c9c741", "sha256": "b5bf30dfe4f3f897729c52fe8e10a7d589ec3fc511eed135a873a2b68a388926"}, "downloads": -1, "filename": "StarkLego-0.1.7.tar.gz", "has_sig": false, "md5_digest": "fcc7677c607d6eba1b1ad5db23c9c741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8036, "upload_time": "2020-01-22T12:34:07", "upload_time_iso_8601": "2020-01-22T12:34:07.520150Z", "url": "https://files.pythonhosted.org/packages/a1/77/326b93cd234bc449489ad4dd7e448c9c020b3ca9d06f9b512a3066256ed8/StarkLego-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcc7677c607d6eba1b1ad5db23c9c741", "sha256": "b5bf30dfe4f3f897729c52fe8e10a7d589ec3fc511eed135a873a2b68a388926"}, "downloads": -1, "filename": "StarkLego-0.1.7.tar.gz", "has_sig": false, "md5_digest": "fcc7677c607d6eba1b1ad5db23c9c741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8036, "upload_time": "2020-01-22T12:34:07", "upload_time_iso_8601": "2020-01-22T12:34:07.520150Z", "url": "https://files.pythonhosted.org/packages/a1/77/326b93cd234bc449489ad4dd7e448c9c020b3ca9d06f9b512a3066256ed8/StarkLego-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:38 2020"}