{"info": {"author": "MagicStack Inc.", "author_email": "hello@magic.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "metamagic.json\n==============\n\nAn ultra-fast Python 3 implementation of a JSON encoder for Python objects designed\nto be compatible with native JSON decoders in various web browsers.\n\nCan either encode to a python string (see ``dumps``) or a sequence\nof bytes (see ``dumpb``). The string returned by dumps() is guaranteed\nto have only 7-bit ASCII characters [#f1]_ and ``dumps(obj).encode('ascii') = dumpb(obj)``.\n\nSupports a special encoder class method `encode_hook(obj)` which, if present, is applied to\nthe input object and the rest of the processing is applied to the output of encode_hook().\nNote: encode_hook() should always return an object; for objects which should not be\nspecially encoded encode_hook() should return the original object.\n\nSupports custom encoders by using objects' ``__mm_json__()`` or ``__mm_serialize__()``\nmethod, if available. It is guaranteed that for all non-native types ``__mm_json__`` and\nthen ``__mm_serialize__`` will be tried before any other attempt to encode the object [#f2]_.\nThe output of ``__mm_serialize__`` is in turn encoded as any other object (and may in turn have\nan ``__mm_serialize__`` method or not be supported).\n\nNatively supports strings, integers, floats, True, False, None, lists, tuples,\ndicts, sets, frozensets, collections.OrderedDicts, colections.Set,\ncollections.Sequence [#f3]_, collections.Mapping, uuid.UUIDs [#f4]_, decimal.Decimals,\ndatetime.datetime and objects derived form all listed objects.\n\nFor all objects which could not be encoded in any other way an\nattempt is made to convert an object to an encodeable one using ``Encoder.default(obj)``\nmethod. If ``Encoder.default`` succeeds, the output is again encoded as any other object.\n\nIn case there is a need to custom-handle natively supported primitive types, an\n``Encoder.encode_hook`` method exists.\n\n\nExamples\n--------\n\nEncoding custom objects::\n\n    >>> from metamagic.json import dumps, dumpb\n\n    >>> class Foo:\n    ...     def __mm_serialize__(self):\n    ...         return \"Im foo\"\n    ...\n\n    >>> dumps(Foo())\n    '\"Im foo\"'\n\n    >>> dumps({Foo(): 123})\n    '{\"Im foo\":123}'\n\nDumping straight to bytes::\n\n    >>> dumpb(Foo())\n    b'\"Im foo\"'\n\nBypassing serialization for JSON buffers::\n\n    >>> class JSONData:\n    ...     def __init__(self, data):\n    ...         self.data = data\n    ...\n    ...     def __mm_json__(self):\n    ...         return self.data\n\n    >>> a = JSONData('[\"abc\", \"def\"]')\n    >>> dumps([1,2,3,a])\n    '[1,2,3,[\"abc\", \"def\"]]'\n\n\nExceptions raised\n-----------------\n\n* Both ``dumps()`` and ``dumpb()`` raise a TypeError for unsupported objects and\n  for all dictionary keys which are not strings (or UUIDs [#f5]_) and\n  which are not representable as strings (or UUIDs) by their ``__mm_serialize__`` method.\n\n* ``default()`` raises a TypeError for all unsupported objects, and overwritten ``default()``\n  is also expected to raise a TypeError for all objects it does not support.\n\n* When encoding integers, ``dumps()`` and ``dumpb()`` raise a ValueError if integer\n  value is greater than the maximum integer value supported by JavaScript\n  (``9007199254740992``, see http://ecma262-5.com/ELS5_HTML.htm#Section_8.5).\n\n* When encoding a nested object a ValueError is raised when going deeper than\n  the allowed nesting level (100 by default, can be overwritten by passing the\n  desired value as the second argument to ``dumps()`` and ``dumpb()`` methods)\n\n\nBenchmarks\n----------\n\n::\n\n    Array with 256 short ascii strings:\n      std json:   2.6581 sec,      11286 req/sec\n     mm c json:  0.90321 sec,      33214 req/sec  ( 2.9x )\n     mm c 1ini:  0.85578 sec,      35055 req/sec  ( 3.1x )\n    mm c dumpb:  0.84517 sec,      35495 req/sec  ( 3.1x )\n       marshal:  1.77567 sec,      16895 req/sec\n\n    Array with 2048 3-char ascii strings:\n      std json:  0.47259 sec,       4231 req/sec\n     mm c json:  0.12481 sec,      16024 req/sec  ( 3.8x )\n     mm c 1ini:  0.12261 sec,      16311 req/sec  ( 3.9x )\n    mm c dumpb:  0.11732 sec,      17047 req/sec  ( 4.0x )\n       marshal:  0.41334 sec,       4838 req/sec\n\n    Array with 256 long ascii strings:\n      std json:  1.30821 sec,       3822 req/sec\n     mm c json:  0.47144 sec,      10605 req/sec  ( 2.8x )\n     mm c 1ini:  0.44159 sec,      11322 req/sec  ( 3.0x )\n    mm c dumpb:   0.4346 sec,      11504 req/sec  ( 3.0x )\n       marshal:  0.85593 sec,       5841 req/sec\n\n    Array with 256 long utf-8 strings:\n      std json:  1.52419 sec,       1312 req/sec\n     mm c json:   1.4438 sec,       1385 req/sec  ( 1.1x )\n     mm c 1ini:  1.43666 sec,       1392 req/sec  ( 1.1x )\n    mm c dumpb:  1.40142 sec,       1427 req/sec  ( 1.1x )\n       marshal:   1.3413 sec,       1491 req/sec\n\n    Medium complex object:\n      std json:   3.5078 sec,       2850 req/sec\n     mm c json:  1.45764 sec,       6860 req/sec  ( 2.4x )\n     mm c 1ini:  1.43357 sec,       6975 req/sec  ( 2.4x )\n    mm c dumpb:  1.47626 sec,       6773 req/sec  ( 2.4x )\n       marshal:  1.04175 sec,       9599 req/sec\n\n    Array with 256 doubles:\n      std json:  3.37919 sec,       2959 req/sec\n     mm c json:  2.23615 sec,       4471 req/sec  ( 1.5x )\n     mm c 1ini:  2.48201 sec,       4028 req/sec  ( 1.4x )\n    mm c dumpb:  2.23184 sec,       4480 req/sec  ( 1.5x )\n       marshal:  0.14098 sec,      70932 req/sec\n\n    Array with 256 ints:\n      std json:   1.0185 sec,      19636 req/sec\n     mm c json:   0.2752 sec,      72674 req/sec  ( 3.7x )\n     mm c 1ini:  0.25349 sec,      78898 req/sec  ( 4.0x )\n    mm c dumpb:  0.28252 sec,      70791 req/sec  ( 3.6x )\n       marshal:  0.15442 sec,     129516 req/sec\n\n    Array with 256 small ints:\n      std json:  1.04397 sec,     191576 req/sec\n     mm c json:  0.28152 sec,     710429 req/sec  ( 3.7x )\n     mm c 1ini:  0.09222 sec,    2168726 req/sec  ( 11.3x )\n    mm c dumpb:  0.27627 sec,     723929 req/sec  ( 3.8x )\n       marshal:  0.08306 sec,    2407897 req/sec\n\n    Array with 256 Decimals:\n      std json:     failed to serialize\n     mm c json:  0.77161 sec,      10367 req/sec  ( 0.0x )\n     mm c 1ini:  0.76022 sec,      10523 req/sec  ( 0.0x )\n    mm c dumpb:  0.78671 sec,      10168 req/sec  ( 0.0x )\n       marshal:     failed to serialize\n\n    Array with 256 True values:\n      std json:  2.08432 sec,      38381 req/sec\n     mm c json:  0.47159 sec,     169638 req/sec  ( 4.4x )\n     mm c 1ini:  0.39814 sec,     200934 req/sec  ( 5.2x )\n    mm c dumpb:  0.45191 sec,     177026 req/sec  ( 4.6x )\n       marshal:  0.24776 sec,     322893 req/sec\n\n    Array with 256 False values:\n      std json:   2.0099 sec,      39802 req/sec\n     mm c json:  0.50992 sec,     156887 req/sec  ( 3.9x )\n     mm c 1ini:  0.43001 sec,     186042 req/sec  ( 4.7x )\n    mm c dumpb:  0.50839 sec,     157359 req/sec  ( 4.0x )\n       marshal:  0.25551 sec,     313099 req/sec\n\n    Array with 256 dict{string, int} pairs:\n      std json:  1.96227 sec,       4076 req/sec\n     mm c json:  0.36569 sec,      21876 req/sec  ( 5.4x )\n     mm c 1ini:  0.34565 sec,      23144 req/sec  ( 5.7x )\n    mm c dumpb:  0.36583 sec,      21868 req/sec  ( 5.4x )\n       marshal:  0.51862 sec,      15425 req/sec\n\n    Array with 256 dict-based{string, int} pairs:\n      std json:  4.20194 sec,       1903 req/sec\n     mm c json:  3.74071 sec,       2138 req/sec  ( 1.1x )\n     mm c 1ini:  3.70554 sec,       2158 req/sec  ( 1.1x )\n    mm c dumpb:  3.77039 sec,       2121 req/sec  ( 1.1x )\n       marshal:     failed to serialize\n\n    Array with 256 orderedDict{string, int} pairs:\n      std json:  2.31765 sec,        431 req/sec\n     mm c json:  0.70724 sec,       1413 req/sec  ( 3.3x )\n     mm c 1ini:  0.69506 sec,       1438 req/sec  ( 3.3x )\n    mm c dumpb:  0.70373 sec,       1420 req/sec  ( 3.3x )\n       marshal:     failed to serialize\n\n    Dict with 256 arrays with 256 dict{string, int} pairs:\n      std json:  3.78828 sec,         13 req/sec\n     mm c json:  0.69496 sec,         71 req/sec  ( 5.5x )\n     mm c 1ini:  0.69522 sec,         71 req/sec  ( 5.4x )\n    mm c dumpb:  0.68382 sec,         73 req/sec  ( 5.5x )\n       marshal:  1.02776 sec,         48 req/sec\n\n\nTests\n-----\n\n``pytest`` is required to run tests.\n\n\n.. [#f1] All characters required to be escaped by the JSON spec @ http://json.org are escaped\n.. [#f2] If present, encode_hook() is applied before and independently of all other encoders\n.. [#f3] To avoid errors in the metamagic framework ``bytes()``, ``bytearray()`` and derived\n        classes are deliberately not encoded using the built-in sequence encoder;\n        the only way to encode these objects is to either overwrite the encoders' default()\n        method or to provide __mm_serialize__ method in the object being serialized.\n.. [#f4] UUIDs and Decimals are encoded as strings.\n.. [#f5] JSON specification only supports string dictionary keys; since UUIDs\n        are also encoded to strings and are a common key in the metamagic framework,\n        this encoder also supports UUIDs as dictionary keys.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sprymix/metamagic.json", "keywords": "json", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "metamagic.json", "package_url": "https://pypi.org/project/metamagic.json/", "platform": "any", "project_url": "https://pypi.org/project/metamagic.json/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/sprymix/metamagic.json"}, "release_url": "https://pypi.org/project/metamagic.json/0.9.6/", "requires_dist": null, "requires_python": null, "summary": "Fast JSON encoder", "version": "0.9.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An ultra-fast Python 3 implementation of a JSON encoder for Python objects designed\nto be compatible with native JSON decoders in various web browsers.</p>\n<p>Can either encode to a python string (see <tt>dumps</tt>) or a sequence\nof bytes (see <tt>dumpb</tt>). The string returned by dumps() is guaranteed\nto have only 7-bit ASCII characters <a href=\"#f1\" id=\"id1\" rel=\"nofollow\">[1]</a> and <tt><span class=\"pre\">dumps(obj).encode('ascii')</span> = dumpb(obj)</tt>.</p>\n<p>Supports a special encoder class method <cite>encode_hook(obj)</cite> which, if present, is applied to\nthe input object and the rest of the processing is applied to the output of encode_hook().\nNote: encode_hook() should always return an object; for objects which should not be\nspecially encoded encode_hook() should return the original object.</p>\n<p>Supports custom encoders by using objects\u2019 <tt>__mm_json__()</tt> or <tt>__mm_serialize__()</tt>\nmethod, if available. It is guaranteed that for all non-native types <tt>__mm_json__</tt> and\nthen <tt>__mm_serialize__</tt> will be tried before any other attempt to encode the object <a href=\"#f2\" id=\"id2\" rel=\"nofollow\">[2]</a>.\nThe output of <tt>__mm_serialize__</tt> is in turn encoded as any other object (and may in turn have\nan <tt>__mm_serialize__</tt> method or not be supported).</p>\n<p>Natively supports strings, integers, floats, True, False, None, lists, tuples,\ndicts, sets, frozensets, collections.OrderedDicts, colections.Set,\ncollections.Sequence <a href=\"#f3\" id=\"id3\" rel=\"nofollow\">[3]</a>, collections.Mapping, uuid.UUIDs <a href=\"#f4\" id=\"id4\" rel=\"nofollow\">[4]</a>, decimal.Decimals,\ndatetime.datetime and objects derived form all listed objects.</p>\n<p>For all objects which could not be encoded in any other way an\nattempt is made to convert an object to an encodeable one using <tt>Encoder.default(obj)</tt>\nmethod. If <tt>Encoder.default</tt> succeeds, the output is again encoded as any other object.</p>\n<p>In case there is a need to custom-handle natively supported primitive types, an\n<tt>Encoder.encode_hook</tt> method exists.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Encoding custom objects:</p>\n<pre>&gt;&gt;&gt; from metamagic.json import dumps, dumpb\n\n&gt;&gt;&gt; class Foo:\n...     def __mm_serialize__(self):\n...         return \"Im foo\"\n...\n\n&gt;&gt;&gt; dumps(Foo())\n'\"Im foo\"'\n\n&gt;&gt;&gt; dumps({Foo(): 123})\n'{\"Im foo\":123}'\n</pre>\n<p>Dumping straight to bytes:</p>\n<pre>&gt;&gt;&gt; dumpb(Foo())\nb'\"Im foo\"'\n</pre>\n<p>Bypassing serialization for JSON buffers:</p>\n<pre>&gt;&gt;&gt; class JSONData:\n...     def __init__(self, data):\n...         self.data = data\n...\n...     def __mm_json__(self):\n...         return self.data\n\n&gt;&gt;&gt; a = JSONData('[\"abc\", \"def\"]')\n&gt;&gt;&gt; dumps([1,2,3,a])\n'[1,2,3,[\"abc\", \"def\"]]'\n</pre>\n</div>\n<div id=\"exceptions-raised\">\n<h2>Exceptions raised</h2>\n<ul>\n<li>Both <tt>dumps()</tt> and <tt>dumpb()</tt> raise a TypeError for unsupported objects and\nfor all dictionary keys which are not strings (or UUIDs <a href=\"#f5\" id=\"id5\" rel=\"nofollow\">[5]</a>) and\nwhich are not representable as strings (or UUIDs) by their <tt>__mm_serialize__</tt> method.</li>\n<li><tt>default()</tt> raises a TypeError for all unsupported objects, and overwritten <tt>default()</tt>\nis also expected to raise a TypeError for all objects it does not support.</li>\n<li>When encoding integers, <tt>dumps()</tt> and <tt>dumpb()</tt> raise a ValueError if integer\nvalue is greater than the maximum integer value supported by JavaScript\n(<tt>9007199254740992</tt>, see <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_8.5\" rel=\"nofollow\">http://ecma262-5.com/ELS5_HTML.htm#Section_8.5</a>).</li>\n<li>When encoding a nested object a ValueError is raised when going deeper than\nthe allowed nesting level (100 by default, can be overwritten by passing the\ndesired value as the second argument to <tt>dumps()</tt> and <tt>dumpb()</tt> methods)</li>\n</ul>\n</div>\n<div id=\"benchmarks\">\n<h2>Benchmarks</h2>\n<pre>Array with 256 short ascii strings:\n  std json:   2.6581 sec,      11286 req/sec\n mm c json:  0.90321 sec,      33214 req/sec  ( 2.9x )\n mm c 1ini:  0.85578 sec,      35055 req/sec  ( 3.1x )\nmm c dumpb:  0.84517 sec,      35495 req/sec  ( 3.1x )\n   marshal:  1.77567 sec,      16895 req/sec\n\nArray with 2048 3-char ascii strings:\n  std json:  0.47259 sec,       4231 req/sec\n mm c json:  0.12481 sec,      16024 req/sec  ( 3.8x )\n mm c 1ini:  0.12261 sec,      16311 req/sec  ( 3.9x )\nmm c dumpb:  0.11732 sec,      17047 req/sec  ( 4.0x )\n   marshal:  0.41334 sec,       4838 req/sec\n\nArray with 256 long ascii strings:\n  std json:  1.30821 sec,       3822 req/sec\n mm c json:  0.47144 sec,      10605 req/sec  ( 2.8x )\n mm c 1ini:  0.44159 sec,      11322 req/sec  ( 3.0x )\nmm c dumpb:   0.4346 sec,      11504 req/sec  ( 3.0x )\n   marshal:  0.85593 sec,       5841 req/sec\n\nArray with 256 long utf-8 strings:\n  std json:  1.52419 sec,       1312 req/sec\n mm c json:   1.4438 sec,       1385 req/sec  ( 1.1x )\n mm c 1ini:  1.43666 sec,       1392 req/sec  ( 1.1x )\nmm c dumpb:  1.40142 sec,       1427 req/sec  ( 1.1x )\n   marshal:   1.3413 sec,       1491 req/sec\n\nMedium complex object:\n  std json:   3.5078 sec,       2850 req/sec\n mm c json:  1.45764 sec,       6860 req/sec  ( 2.4x )\n mm c 1ini:  1.43357 sec,       6975 req/sec  ( 2.4x )\nmm c dumpb:  1.47626 sec,       6773 req/sec  ( 2.4x )\n   marshal:  1.04175 sec,       9599 req/sec\n\nArray with 256 doubles:\n  std json:  3.37919 sec,       2959 req/sec\n mm c json:  2.23615 sec,       4471 req/sec  ( 1.5x )\n mm c 1ini:  2.48201 sec,       4028 req/sec  ( 1.4x )\nmm c dumpb:  2.23184 sec,       4480 req/sec  ( 1.5x )\n   marshal:  0.14098 sec,      70932 req/sec\n\nArray with 256 ints:\n  std json:   1.0185 sec,      19636 req/sec\n mm c json:   0.2752 sec,      72674 req/sec  ( 3.7x )\n mm c 1ini:  0.25349 sec,      78898 req/sec  ( 4.0x )\nmm c dumpb:  0.28252 sec,      70791 req/sec  ( 3.6x )\n   marshal:  0.15442 sec,     129516 req/sec\n\nArray with 256 small ints:\n  std json:  1.04397 sec,     191576 req/sec\n mm c json:  0.28152 sec,     710429 req/sec  ( 3.7x )\n mm c 1ini:  0.09222 sec,    2168726 req/sec  ( 11.3x )\nmm c dumpb:  0.27627 sec,     723929 req/sec  ( 3.8x )\n   marshal:  0.08306 sec,    2407897 req/sec\n\nArray with 256 Decimals:\n  std json:     failed to serialize\n mm c json:  0.77161 sec,      10367 req/sec  ( 0.0x )\n mm c 1ini:  0.76022 sec,      10523 req/sec  ( 0.0x )\nmm c dumpb:  0.78671 sec,      10168 req/sec  ( 0.0x )\n   marshal:     failed to serialize\n\nArray with 256 True values:\n  std json:  2.08432 sec,      38381 req/sec\n mm c json:  0.47159 sec,     169638 req/sec  ( 4.4x )\n mm c 1ini:  0.39814 sec,     200934 req/sec  ( 5.2x )\nmm c dumpb:  0.45191 sec,     177026 req/sec  ( 4.6x )\n   marshal:  0.24776 sec,     322893 req/sec\n\nArray with 256 False values:\n  std json:   2.0099 sec,      39802 req/sec\n mm c json:  0.50992 sec,     156887 req/sec  ( 3.9x )\n mm c 1ini:  0.43001 sec,     186042 req/sec  ( 4.7x )\nmm c dumpb:  0.50839 sec,     157359 req/sec  ( 4.0x )\n   marshal:  0.25551 sec,     313099 req/sec\n\nArray with 256 dict{string, int} pairs:\n  std json:  1.96227 sec,       4076 req/sec\n mm c json:  0.36569 sec,      21876 req/sec  ( 5.4x )\n mm c 1ini:  0.34565 sec,      23144 req/sec  ( 5.7x )\nmm c dumpb:  0.36583 sec,      21868 req/sec  ( 5.4x )\n   marshal:  0.51862 sec,      15425 req/sec\n\nArray with 256 dict-based{string, int} pairs:\n  std json:  4.20194 sec,       1903 req/sec\n mm c json:  3.74071 sec,       2138 req/sec  ( 1.1x )\n mm c 1ini:  3.70554 sec,       2158 req/sec  ( 1.1x )\nmm c dumpb:  3.77039 sec,       2121 req/sec  ( 1.1x )\n   marshal:     failed to serialize\n\nArray with 256 orderedDict{string, int} pairs:\n  std json:  2.31765 sec,        431 req/sec\n mm c json:  0.70724 sec,       1413 req/sec  ( 3.3x )\n mm c 1ini:  0.69506 sec,       1438 req/sec  ( 3.3x )\nmm c dumpb:  0.70373 sec,       1420 req/sec  ( 3.3x )\n   marshal:     failed to serialize\n\nDict with 256 arrays with 256 dict{string, int} pairs:\n  std json:  3.78828 sec,         13 req/sec\n mm c json:  0.69496 sec,         71 req/sec  ( 5.5x )\n mm c 1ini:  0.69522 sec,         71 req/sec  ( 5.4x )\nmm c dumpb:  0.68382 sec,         73 req/sec  ( 5.5x )\n   marshal:  1.02776 sec,         48 req/sec\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p><tt>pytest</tt> is required to run tests.</p>\n<table id=\"f1\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>All characters required to be escaped by the JSON spec @ <a href=\"http://json.org\" rel=\"nofollow\">http://json.org</a> are escaped</td></tr>\n</tbody>\n</table>\n<table id=\"f2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>If present, encode_hook() is applied before and independently of all other encoders</td></tr>\n</tbody>\n</table>\n<table id=\"f3\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[3]</a></td><td>To avoid errors in the metamagic framework <tt>bytes()</tt>, <tt>bytearray()</tt> and derived\nclasses are deliberately not encoded using the built-in sequence encoder;\nthe only way to encode these objects is to either overwrite the encoders\u2019 default()\nmethod or to provide __mm_serialize__ method in the object being serialized.</td></tr>\n</tbody>\n</table>\n<table id=\"f4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id4\" rel=\"nofollow\">[4]</a></td><td>UUIDs and Decimals are encoded as strings.</td></tr>\n</tbody>\n</table>\n<table id=\"f5\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id5\" rel=\"nofollow\">[5]</a></td><td>JSON specification only supports string dictionary keys; since UUIDs\nare also encoded to strings and are a common key in the metamagic framework,\nthis encoder also supports UUIDs as dictionary keys.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 2052265, "releases": {"0.0.1": [], "0.9.0": [{"comment_text": "", "digests": {"md5": "273c1750c4200455f96355cfedd74090", "sha256": "5f7664cafe36788839f3df94e93ad8ffe45866f4ae0a993caa2733f638833aaa"}, "downloads": -1, "filename": "metamagic.json-0.9.0.tar.gz", "has_sig": false, "md5_digest": "273c1750c4200455f96355cfedd74090", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24007, "upload_time": "2012-12-18T04:12:32", "upload_time_iso_8601": "2012-12-18T04:12:32.234023Z", "url": "https://files.pythonhosted.org/packages/6d/d5/03db23e75fc051e291fb93b8eadd90af41568a3917c4a5a167bba5d0d501/metamagic.json-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "6afe6cff85fb5976b8281a1d412b552e", "sha256": "e8476f593fce3c2511019b82796fa5b06f5ec4bd1ee8abbb8d769c81626daf3c"}, "downloads": -1, "filename": "metamagic.json-0.9.1.tar.gz", "has_sig": false, "md5_digest": "6afe6cff85fb5976b8281a1d412b552e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23762, "upload_time": "2013-08-08T19:07:42", "upload_time_iso_8601": "2013-08-08T19:07:42.614375Z", "url": "https://files.pythonhosted.org/packages/5c/72/aeeac0ef3c96644f2f0909d137f03eb41811cb79023da8a7dd2783911fb9/metamagic.json-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "909363b955f84d1734682c19732deaf5", "sha256": "dd90f4ce4f3241c79046a2940c63ce2c065f24af23952dbd4c90e8873f9389e0"}, "downloads": -1, "filename": "metamagic.json-0.9.2.tar.gz", "has_sig": false, "md5_digest": "909363b955f84d1734682c19732deaf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24005, "upload_time": "2013-08-15T16:15:45", "upload_time_iso_8601": "2013-08-15T16:15:45.150977Z", "url": "https://files.pythonhosted.org/packages/ce/98/521b40ce738fa2082bb3ff6df4a68596e5fccd888a0e3127e181f954b1ef/metamagic.json-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "986b8b788ad65c6a5720d24f98ab9ba4", "sha256": "c4e98c85b09f3a993d9e3b516542ef95b13c070be8f1eac3c701d04717aa8ffb"}, "downloads": -1, "filename": "metamagic.json-0.9.3.tar.gz", "has_sig": false, "md5_digest": "986b8b788ad65c6a5720d24f98ab9ba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24271, "upload_time": "2014-04-29T14:07:41", "upload_time_iso_8601": "2014-04-29T14:07:41.900449Z", "url": "https://files.pythonhosted.org/packages/05/a6/7ce84ee538de65831d0b74b0d3bbdf063bbd6114b3cf9ed6bef2e950d95a/metamagic.json-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "8534d9f99805e6e79aef683075be40bf", "sha256": "0e290199aa3d4945257f99e6a24e64471e27a66fe1cc5de12026bdd3e9453df6"}, "downloads": -1, "filename": "metamagic.json-0.9.4.tar.gz", "has_sig": false, "md5_digest": "8534d9f99805e6e79aef683075be40bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24426, "upload_time": "2014-05-07T20:47:15", "upload_time_iso_8601": "2014-05-07T20:47:15.204129Z", "url": "https://files.pythonhosted.org/packages/8b/4d/b0d05b2ac8d5b1ca31e41c220414c04deee21a6fb0a1e58ba7b4405dd8db/metamagic.json-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "37b573954102fc2fc391da435df11719", "sha256": "9a621a9c33df7c600196ca3c6b774c824d2a922af7c931a8d0d7e19641f4dc09"}, "downloads": -1, "filename": "metamagic.json-0.9.5.tar.gz", "has_sig": false, "md5_digest": "37b573954102fc2fc391da435df11719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24479, "upload_time": "2014-09-11T16:03:23", "upload_time_iso_8601": "2014-09-11T16:03:23.439220Z", "url": "https://files.pythonhosted.org/packages/05/cd/4c7701e4e602bc1572472f963bc966d993ce9d7b03b2acdab180d5d139b3/metamagic.json-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "756454624c2903b9191fe41c52fbcdbd", "sha256": "79fe53b6d1341c641ba842500b7688bd9dfaa8157c0a7cbd44bbc7e0cfeece5b"}, "downloads": -1, "filename": "metamagic.json-0.9.6.tar.gz", "has_sig": false, "md5_digest": "756454624c2903b9191fe41c52fbcdbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24609, "upload_time": "2016-04-07T21:31:33", "upload_time_iso_8601": "2016-04-07T21:31:33.109840Z", "url": "https://files.pythonhosted.org/packages/25/51/0d97a1a33c5b93203f4bc854d1f99bc8b3b55b5003f72e3f260252c88976/metamagic.json-0.9.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "756454624c2903b9191fe41c52fbcdbd", "sha256": "79fe53b6d1341c641ba842500b7688bd9dfaa8157c0a7cbd44bbc7e0cfeece5b"}, "downloads": -1, "filename": "metamagic.json-0.9.6.tar.gz", "has_sig": false, "md5_digest": "756454624c2903b9191fe41c52fbcdbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24609, "upload_time": "2016-04-07T21:31:33", "upload_time_iso_8601": "2016-04-07T21:31:33.109840Z", "url": "https://files.pythonhosted.org/packages/25/51/0d97a1a33c5b93203f4bc854d1f99bc8b3b55b5003f72e3f260252c88976/metamagic.json-0.9.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:53 2020"}