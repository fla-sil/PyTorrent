{"info": {"author": "Ray Holder", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet", "Topic :: Utilities"], "description": "Retrying\n=========================\n.. image:: https://travis-ci.org/rholder/retrying.png?branch=master\n    :target: https://travis-ci.org/rholder/retrying\n\n.. image:: https://badge.fury.io/py/retrying.png\n    :target: https://pypi.python.org/pypi/retrying\n\n.. image:: https://pypip.in/d/retrying/badge.png\n    :target: https://pypi.python.org/pypi/retrying\n\nRetrying is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.\n\n\nThe simplest use case is retrying a flaky function whenever an Exception occurs\nuntil a value is returned.\n\n.. code-block:: python\n\n    import random\n    from retrying import retry\n\n    @retry\n    def do_something_unreliable():\n        if random.randint(0, 10) > 1:\n            raise IOError(\"Broken sauce, everything is hosed!!!111one\")\n        else:\n            return \"Awesome sauce!\"\n\n    print do_something_unreliable()\n\n\nFeatures\n--------\n\n- Generic Decorator API\n- Specify stop condition (i.e. limit by number of attempts)\n- Specify wait condition (i.e. exponential backoff sleeping between attempts)\n- Customize retrying on Exceptions\n- Customize retrying on expected returned result\n\n\nInstallation\n------------\n\nTo install retrying, simply:\n\n.. code-block:: bash\n\n    $ pip install retrying\n\nOr, if you absolutely must:\n\n.. code-block:: bash\n\n    $ easy_install retrying\n\nBut, you might regret that later.\n\n\nExamples\n----------\n\nAs you saw above, the default behavior is to retry forever without waiting.\n\n.. code-block:: python\n\n    @retry\n    def never_give_up_never_surrender():\n        print \"Retry forever ignoring Exceptions, don't wait between retries\"\n\n\nLet's be a little less persistent and set some boundaries, such as the number of attempts before giving up.\n\n.. code-block:: python\n\n    @retry(stop_max_attempt_number=7)\n    def stop_after_7_attempts():\n        print \"Stopping after 7 attempts\"\n\nWe don't have all day, so let's set a boundary for how long we should be retrying stuff.\n\n.. code-block:: python\n\n    @retry(stop_max_delay=10000)\n    def stop_after_10_s():\n        print \"Stopping after 10 seconds\"\n\nMost things don't like to be polled as fast as possible, so let's just wait 2 seconds between retries.\n\n.. code-block:: python\n\n    @retry(wait_fixed=2000)\n    def wait_2_s():\n        print \"Wait 2 second between retries\"\n\n\nSome things perform best with a bit of randomness injected.\n\n.. code-block:: python\n\n    @retry(wait_random_min=1000, wait_random_max=2000)\n    def wait_random_1_to_2_s():\n        print \"Randomly wait 1 to 2 seconds between retries\"\n\nThen again, it's hard to beat exponential backoff when retrying distributed services and other remote endpoints.\n\n.. code-block:: python\n\n    @retry(wait_exponential_multiplier=1000, wait_exponential_max=10000)\n    def wait_exponential_1000():\n        print \"Wait 2^x * 1000 milliseconds between each retry, up to 10 seconds, then 10 seconds afterwards\"\n\n\nWe have a few options for dealing with retries that raise specific or general exceptions, as in the cases here.\n\n.. code-block:: python\n\n    def retry_if_io_error(exception):\n        \"\"\"Return True if we should retry (in this case when it's an IOError), False otherwise\"\"\"\n        return isinstance(exception, IOError)\n\n    @retry(retry_on_exception=retry_if_io_error)\n    def might_io_error():\n        print \"Retry forever with no wait if an IOError occurs, raise any other errors\"\n\n    @retry(retry_on_exception=retry_if_io_error, wrap_exception=True)\n    def only_raise_retry_error_when_not_io_error():\n        print \"Retry forever with no wait if an IOError occurs, raise any other errors wrapped in RetryError\"\n\nWe can also use the result of the function to alter the behavior of retrying.\n\n.. code-block:: python\n\n    def retry_if_result_none(result):\n        \"\"\"Return True if we should retry (in this case when result is None), False otherwise\"\"\"\n        return result is None\n\n    @retry(retry_on_result=retry_if_result_none)\n    def might_return_none():\n        print \"Retry forever ignoring Exceptions with no wait if return value is None\"\n\n\nAny combination of stop, wait, etc. is also supported to give you the freedom to mix and match.\n\nContribute\n----------\n\n#. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n#. Fork `the repository`_ on GitHub to start making your changes to the **master** branch (or branch off of it).\n#. Write a test which shows that the bug was fixed or that the feature works as expected.\n#. Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to AUTHORS_.\n\n.. _`the repository`: http://github.com/rholder/retrying\n.. _AUTHORS: https://github.com/rholder/retrying/blob/master/AUTHORS.rst\n\n\n.. :changelog:\n\nHistory\n-------\n1.3.3 (2014-12-14)\n++++++++++++++++++\n- Add minimum six version of 1.7.0 since anything less will break things\n\n1.3.2 (2014-11-09)\n++++++++++++++++++\n- Ensure we wrap the decorated functions to prevent information loss\n- Allow a jitter value to be passed in\n\n1.3.1 (2014-09-30)\n++++++++++++++++++\n- Add requirements.txt to MANIFEST.in to fix pip installs\n\n1.3.0 (2014-09-30)\n++++++++++++++++++\n- Add upstream six dependency, remove embedded six functionality\n\n1.2.3 (2014-08-25)\n++++++++++++++++++\n- Add support for custom wait and stop functions\n\n1.2.2 (2014-06-20)\n++++++++++++++++++\n- Bug fix to not raise a RetryError on failure when exceptions aren't being wrapped\n\n1.2.1 (2014-05-05)\n++++++++++++++++++\n- Bug fix for explicitly passing in a wait type\n\n1.2.0 (2014-05-04)\n++++++++++++++++++\n- Remove the need for explicit specification of stop/wait types when they can be inferred\n- Add a little checking for exception propagation\n\n1.1.0 (2014-03-31)\n++++++++++++++++++\n- Added proper exception propagation through reraising with Python 2.6, 2.7, and 3.2 compatibility\n- Update test suite for behavior changes\n\n1.0.1 (2013-03-20)\n++++++++++++++++++\n- Fixed a bug where classes not extending from the Python exception hierarchy could slip through\n- Update test suite for custom Python exceptions\n\n1.0.0 (2013-01-21)\n++++++++++++++++++\n- First stable, tested version now exists\n- Apache 2.0 license applied\n- Sanitizing some setup.py and test suite running\n- Added Travis CI support", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rholder/retrying", "keywords": "decorator decorators retry retrying exception exponential backoff", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "retrying", "package_url": "https://pypi.org/project/retrying/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/retrying/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rholder/retrying"}, "release_url": "https://pypi.org/project/retrying/1.3.3/", "requires_dist": null, "requires_python": null, "summary": "Retrying", "version": "1.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/rholder/retrying\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/rholder/retrying.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e6040eaa331febc1a5714707eb31f136e957ca4/68747470733a2f2f7472617669732d63692e6f72672f72686f6c6465722f7265747279696e672e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/retrying\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/retrying.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08fab32d3e8238d2e9a1eeffec125ca6a4178807/68747470733a2f2f62616467652e667572792e696f2f70792f7265747279696e672e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/retrying\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/retrying/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c1ae7b248067e4c3da01693975d8b2cc25245ef/68747470733a2f2f70797069702e696e2f642f7265747279696e672f62616467652e706e67\"></a>\n<p>Retrying is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.</p>\n<p>The simplest use case is retrying a flaky function whenever an Exception occurs\nuntil a value is returned.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">retrying</span> <span class=\"kn\">import</span> <span class=\"n\">retry</span>\n\n<span class=\"nd\">@retry</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something_unreliable</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s2\">\"Broken sauce, everything is hosed!!!111one\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Awesome sauce!\"</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">do_something_unreliable</span><span class=\"p\">()</span>\n</pre>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Generic Decorator API</li>\n<li>Specify stop condition (i.e. limit by number of attempts)</li>\n<li>Specify wait condition (i.e. exponential backoff sleeping between attempts)</li>\n<li>Customize retrying on Exceptions</li>\n<li>Customize retrying on expected returned result</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install retrying, simply:</p>\n<pre>$ pip install retrying\n</pre>\n<p>Or, if you absolutely must:</p>\n<pre>$ easy_install retrying\n</pre>\n<p>But, you might regret that later.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>As you saw above, the default behavior is to retry forever without waiting.</p>\n<pre><span class=\"nd\">@retry</span>\n<span class=\"k\">def</span> <span class=\"nf\">never_give_up_never_surrender</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Retry forever ignoring Exceptions, don't wait between retries\"</span>\n</pre>\n<p>Let\u2019s be a little less persistent and set some boundaries, such as the number of attempts before giving up.</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">stop_max_attempt_number</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop_after_7_attempts</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Stopping after 7 attempts\"</span>\n</pre>\n<p>We don\u2019t have all day, so let\u2019s set a boundary for how long we should be retrying stuff.</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">stop_max_delay</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop_after_10_s</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Stopping after 10 seconds\"</span>\n</pre>\n<p>Most things don\u2019t like to be polled as fast as possible, so let\u2019s just wait 2 seconds between retries.</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">wait_fixed</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_2_s</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Wait 2 second between retries\"</span>\n</pre>\n<p>Some things perform best with a bit of randomness injected.</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">wait_random_min</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">wait_random_max</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_random_1_to_2_s</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Randomly wait 1 to 2 seconds between retries\"</span>\n</pre>\n<p>Then again, it\u2019s hard to beat exponential backoff when retrying distributed services and other remote endpoints.</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">wait_exponential_multiplier</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">wait_exponential_max</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_exponential_1000</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Wait 2^x * 1000 milliseconds between each retry, up to 10 seconds, then 10 seconds afterwards\"</span>\n</pre>\n<p>We have a few options for dealing with retries that raise specific or general exceptions, as in the cases here.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">retry_if_io_error</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return True if we should retry (in this case when it's an IOError), False otherwise\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"ne\">IOError</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_exception</span><span class=\"o\">=</span><span class=\"n\">retry_if_io_error</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">might_io_error</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Retry forever with no wait if an IOError occurs, raise any other errors\"</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_exception</span><span class=\"o\">=</span><span class=\"n\">retry_if_io_error</span><span class=\"p\">,</span> <span class=\"n\">wrap_exception</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">only_raise_retry_error_when_not_io_error</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Retry forever with no wait if an IOError occurs, raise any other errors wrapped in RetryError\"</span>\n</pre>\n<p>We can also use the result of the function to alter the behavior of retrying.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">retry_if_result_none</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return True if we should retry (in this case when result is None), False otherwise\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_result</span><span class=\"o\">=</span><span class=\"n\">retry_if_result_none</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">might_return_none</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Retry forever ignoring Exceptions with no wait if return value is None\"</span>\n</pre>\n<p>Any combination of stop, wait, etc. is also supported to give you the freedom to mix and match.</p>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<ol>\n<li>Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.</li>\n<li>Fork <a href=\"http://github.com/rholder/retrying\" rel=\"nofollow\">the repository</a> on GitHub to start making your changes to the <strong>master</strong> branch (or branch off of it).</li>\n<li>Write a test which shows that the bug was fixed or that the feature works as expected.</li>\n<li>Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to <a href=\"https://github.com/rholder/retrying/blob/master/AUTHORS.rst\" rel=\"nofollow\">AUTHORS</a>.</li>\n</ol>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.3.3 (2014-12-14)</h3>\n<ul>\n<li>Add minimum six version of 1.7.0 since anything less will break things</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.3.2 (2014-11-09)</h3>\n<ul>\n<li>Ensure we wrap the decorated functions to prevent information loss</li>\n<li>Allow a jitter value to be passed in</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.3.1 (2014-09-30)</h3>\n<ul>\n<li>Add requirements.txt to MANIFEST.in to fix pip installs</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.3.0 (2014-09-30)</h3>\n<ul>\n<li>Add upstream six dependency, remove embedded six functionality</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.2.3 (2014-08-25)</h3>\n<ul>\n<li>Add support for custom wait and stop functions</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.2.2 (2014-06-20)</h3>\n<ul>\n<li>Bug fix to not raise a RetryError on failure when exceptions aren\u2019t being wrapped</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.2.1 (2014-05-05)</h3>\n<ul>\n<li>Bug fix for explicitly passing in a wait type</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.2.0 (2014-05-04)</h3>\n<ul>\n<li>Remove the need for explicit specification of stop/wait types when they can be inferred</li>\n<li>Add a little checking for exception propagation</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.1.0 (2014-03-31)</h3>\n<ul>\n<li>Added proper exception propagation through reraising with Python 2.6, 2.7, and 3.2 compatibility</li>\n<li>Update test suite for behavior changes</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.0.1 (2013-03-20)</h3>\n<ul>\n<li>Fixed a bug where classes not extending from the Python exception hierarchy could slip through</li>\n<li>Update test suite for custom Python exceptions</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.0.0 (2013-01-21)</h3>\n<ul>\n<li>First stable, tested version now exists</li>\n<li>Apache 2.0 license applied</li>\n<li>Sanitizing some setup.py and test suite running</li>\n<li>Added Travis CI support</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1343771, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f7962da2ac6385333141ebef9e1f5ffe", "sha256": "56e2cebf8c668c8acb2a9bb271134f2044e47dfb5eda01d8764d0d8452d497ac"}, "downloads": -1, "filename": "retrying-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f7962da2ac6385333141ebef9e1f5ffe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9316, "upload_time": "2013-01-22T08:06:06", "upload_time_iso_8601": "2013-01-22T08:06:06.526595Z", "url": "https://files.pythonhosted.org/packages/65/ed/5f45345e9baff96a4f81dc9043f6a523227e3f33d94cf188a166789c99ea/retrying-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "68ae4eb295095c9dacfc44fdbd6d88ea", "sha256": "b4297c1589fdfac11e4a3a90646f0cff3e338ab4a223e7daab564a3d1ba6c479"}, "downloads": -1, "filename": "retrying-1.0.1.tar.gz", "has_sig": false, "md5_digest": "68ae4eb295095c9dacfc44fdbd6d88ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9481, "upload_time": "2013-03-20T07:57:23", "upload_time_iso_8601": "2013-03-20T07:57:23.959889Z", "url": "https://files.pythonhosted.org/packages/c8/56/792d1fdfe233ed89ec1d22b5354b106fbbbdda13296e36933a1b94347158/retrying-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "dda3b6825756f071cd36f263d0351a70", "sha256": "f5c87df0e0aca4fbe3895ad56f3eb2d667acef6745797187a415534dc7fd42d8"}, "downloads": -1, "filename": "retrying-1.1.0.tar.gz", "has_sig": false, "md5_digest": "dda3b6825756f071cd36f263d0351a70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10447, "upload_time": "2014-03-31T06:42:18", "upload_time_iso_8601": "2014-03-31T06:42:18.453750Z", "url": "https://files.pythonhosted.org/packages/70/c9/8580587cb41675b9bf5a44e532721f9bc73160a556fa4fddb2e14280b96c/retrying-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "8acfdaf1eb4e02db55df8078bb928324", "sha256": "04413041fa28b81b64da2119761a89ada420da384934748830a9ce674688ffbb"}, "downloads": -1, "filename": "retrying-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8acfdaf1eb4e02db55df8078bb928324", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10707, "upload_time": "2014-05-05T01:47:48", "upload_time_iso_8601": "2014-05-05T01:47:48.977038Z", "url": "https://files.pythonhosted.org/packages/9c/0b/b9e02d07246e186cdfd66994ae7ec45466b5e7aa0f57a04be51505481894/retrying-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "cdd7384d3dd0c1434d23ad81bf87d8ad", "sha256": "41638101163a991a07d4a7c85db37f3b57dde3a50cd34b2431e3866f2af27690"}, "downloads": -1, "filename": "retrying-1.2.1.tar.gz", "has_sig": false, "md5_digest": "cdd7384d3dd0c1434d23ad81bf87d8ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10756, "upload_time": "2014-05-05T17:15:48", "upload_time_iso_8601": "2014-05-05T17:15:48.038057Z", "url": "https://files.pythonhosted.org/packages/fd/92/7e13cf4f2f4a98c981946b27ed8af6c7a5a470063329eb973fa40ed5c88c/retrying-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "534825ad47c3e317f52090f642113870", "sha256": "fbeda85e94d103cf8bb36d29644abdc1e9ad367dd2c7160324fa60ee9d5193d0"}, "downloads": -1, "filename": "retrying-1.2.2.tar.gz", "has_sig": false, "md5_digest": "534825ad47c3e317f52090f642113870", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10938, "upload_time": "2014-06-20T07:36:05", "upload_time_iso_8601": "2014-06-20T07:36:05.752536Z", "url": "https://files.pythonhosted.org/packages/ba/63/8496e00e25f5b8008b60251d2f9f252b840b5a6f43bfbe25a2e78117eef3/retrying-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "d6620fcec9602ef497aafccd6c832c7e", "sha256": "774985f534d58d8c22e93c6ffc5bcc381d28199917c11abb2abf41881c8526c4"}, "downloads": -1, "filename": "retrying-1.2.3.tar.gz", "has_sig": false, "md5_digest": "d6620fcec9602ef497aafccd6c832c7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11120, "upload_time": "2014-08-25T23:43:32", "upload_time_iso_8601": "2014-08-25T23:43:32.336179Z", "url": "https://files.pythonhosted.org/packages/b8/42/d539ad0b5246260d8a75409126de5a24caf0c0bfb4f8e2ce2f6e901c6da7/retrying-1.2.3.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "00620203720710bc696b1ef1764a4c76", "sha256": "6488d4564dde72fcc9f8e827c347856d72ba8c9b3dfd539a3777366e3f908c3b"}, "downloads": -1, "filename": "retrying-1.3.0.tar.gz", "has_sig": false, "md5_digest": "00620203720710bc696b1ef1764a4c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11097, "upload_time": "2014-10-01T00:52:31", "upload_time_iso_8601": "2014-10-01T00:52:31.371494Z", "url": "https://files.pythonhosted.org/packages/28/af/4f5136c74a11b8788ec45b939b7bfe12427e1dc086f075fdb4535dcf1abf/retrying-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "6a9c94eeec8c616f629f4bda77b819b8", "sha256": "a1139af19b5ef6c0eb4a38bbaa6edbed305ceeab2240ca2c306614597735a9ca"}, "downloads": -1, "filename": "retrying-1.3.1.tar.gz", "has_sig": false, "md5_digest": "6a9c94eeec8c616f629f4bda77b819b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11159, "upload_time": "2014-10-01T04:50:24", "upload_time_iso_8601": "2014-10-01T04:50:24.382418Z", "url": "https://files.pythonhosted.org/packages/bc/44/093864d9727c728eae59190a374ac578e222f123a0dcb06fc37199ae9237/retrying-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "2a86de2295cf49a39ac99f830ac01085", "sha256": "320c4be55bfd9366d67c17beb09c9ac9624c7fab1d59e41641f37ae3b2b1f5ca"}, "downloads": -1, "filename": "retrying-1.3.2.tar.gz", "has_sig": false, "md5_digest": "2a86de2295cf49a39ac99f830ac01085", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10811, "upload_time": "2014-11-10T04:38:36", "upload_time_iso_8601": "2014-11-10T04:38:36.261250Z", "url": "https://files.pythonhosted.org/packages/b9/8c/85041b470a9684cf07bd2ce35666ae86bc51cefed02ebce0a6802e0bf33f/retrying-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "2a126aeef8b21324ecdeac15ff46ef17", "sha256": "08c039560a6da2fe4f2c426d0766e284d3b736e355f8dd24b37367b0bb41973b"}, "downloads": -1, "filename": "retrying-1.3.3.tar.gz", "has_sig": false, "md5_digest": "2a126aeef8b21324ecdeac15ff46ef17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10890, "upload_time": "2014-12-15T01:15:08", "upload_time_iso_8601": "2014-12-15T01:15:08.281010Z", "url": "https://files.pythonhosted.org/packages/44/ef/beae4b4ef80902f22e3af073397f079c96969c69b2c7d52a57ea9ae61c9d/retrying-1.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a126aeef8b21324ecdeac15ff46ef17", "sha256": "08c039560a6da2fe4f2c426d0766e284d3b736e355f8dd24b37367b0bb41973b"}, "downloads": -1, "filename": "retrying-1.3.3.tar.gz", "has_sig": false, "md5_digest": "2a126aeef8b21324ecdeac15ff46ef17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10890, "upload_time": "2014-12-15T01:15:08", "upload_time_iso_8601": "2014-12-15T01:15:08.281010Z", "url": "https://files.pythonhosted.org/packages/44/ef/beae4b4ef80902f22e3af073397f079c96969c69b2c7d52a57ea9ae61c9d/retrying-1.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:23 2020"}