{"info": {"author": "Max Hollmann", "author_email": "maxhollmann@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\nProvides a decorator for Luigi tasks that allows them to fail *softly*. Tasks that fail softly are seen by Luigi as complete, and thus don't prevent dependent tasks from running. The dependent task can check if it's dependencies actually ran successfully or failed softly.\n\n\n# Installation\n\n    pip install luigi_soft_failures\n\n\n# Usage\n\n```python\nfrom luigi_soft_failures import softly_failing\n```\n\nUse as class decorator:\n\n```python\n@softly_failing(catch_all=True, propagate=True)\nclass SomeTask(luigi.Task):\n    ...\n```\n\nOr on demand in the requiring task:\n\n```python\ndef requires(self):\n    return softly_failing(catch_all=True)(SomeTask)(some_param=42)\n```\n\nThe dependent task can check the status of it's dependencies using `failed_softly`:\n\n```python\ndef run(self):\n    if self.requires().failed_softly():\n        ...\n```\n\nFor a complete example see [as_decorator.py](https://github.com/maxhollmann/luigi_soft_failures/blob/master/examples/as_decorator.py).\n\n\n## API\n\n`softly_failing` accepts the following parameters:\n\n* `catch_all` (`bool`, default `False`):\n\n  When `True`, any exception thrown in the task's `run` method will lead to a soft failure. Otherwise, soft failures can be generated manually by calling `self.fail_softly('Some error message')` from the task's `run` method and exiting the method without exception.\n\n* `propagate` (`bool`, default `False`):\n\n  When `True`, the task fails softly if any of it's dependencies failed softly, and `run` is never executed. Otherwise, `run` is executed as if the dependencies ran successfully.\n\n* `output_dir` (`str`, default `None`): Described [below](#storage-of-soft-failure-reports).\n\n\n## Storage of soft failure reports\n\nWhan the wrapped task fails softly, it creates a report with the failure message or exception traceback to indicate this. These reports are stored in a directory specified in one of the following ways (in this order of precedence):\n\n* `output_dir` parameter passed to `softly_failing`\n* Specified in `luigi.cfg`:\n\n      [luigi_soft_failures.Config]\n      output_dir=/some/path\n\n* Environment variable `LUIGI_SOFT_FAILURES_OUTPUT_DIR`\n* Default `./soft_failures/`\n\n\n# Limitations\n\n* Soft failure status is stored using a `LocalTarget`, so a local storage that all workers have access to is required.\n* In the Luigi visualizer, softly failed tasks are shown as complete.\n\nPull requests to address these are very welcome!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maxhollmann/luigi_soft_failures", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "luigi-soft-failures", "package_url": "https://pypi.org/project/luigi-soft-failures/", "platform": "", "project_url": "https://pypi.org/project/luigi-soft-failures/", "project_urls": {"Homepage": "https://github.com/maxhollmann/luigi_soft_failures"}, "release_url": "https://pypi.org/project/luigi-soft-failures/0.1.1/", "requires_dist": ["luigi"], "requires_python": ">=3.6.0", "summary": "Allow Luigi tasks to fail softly, without cancelling downstream tasks.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Provides a decorator for Luigi tasks that allows them to fail <em>softly</em>. Tasks that fail softly are seen by Luigi as complete, and thus don't prevent dependent tasks from running. The dependent task can check if it's dependencies actually ran successfully or failed softly.</p>\n<h1>Installation</h1>\n<pre><code>pip install luigi_soft_failures\n</code></pre>\n<h1>Usage</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">luigi_soft_failures</span> <span class=\"kn\">import</span> <span class=\"n\">softly_failing</span>\n</pre>\n<p>Use as class decorator:</p>\n<pre><span class=\"nd\">@softly_failing</span><span class=\"p\">(</span><span class=\"n\">catch_all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">propagate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeTask</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Or on demand in the requiring task:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">requires</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">softly_failing</span><span class=\"p\">(</span><span class=\"n\">catch_all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)(</span><span class=\"n\">SomeTask</span><span class=\"p\">)(</span><span class=\"n\">some_param</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre>\n<p>The dependent task can check the status of it's dependencies using <code>failed_softly</code>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">failed_softly</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>For a complete example see <a href=\"https://github.com/maxhollmann/luigi_soft_failures/blob/master/examples/as_decorator.py\" rel=\"nofollow\">as_decorator.py</a>.</p>\n<h2>API</h2>\n<p><code>softly_failing</code> accepts the following parameters:</p>\n<ul>\n<li>\n<p><code>catch_all</code> (<code>bool</code>, default <code>False</code>):</p>\n<p>When <code>True</code>, any exception thrown in the task's <code>run</code> method will lead to a soft failure. Otherwise, soft failures can be generated manually by calling <code>self.fail_softly('Some error message')</code> from the task's <code>run</code> method and exiting the method without exception.</p>\n</li>\n<li>\n<p><code>propagate</code> (<code>bool</code>, default <code>False</code>):</p>\n<p>When <code>True</code>, the task fails softly if any of it's dependencies failed softly, and <code>run</code> is never executed. Otherwise, <code>run</code> is executed as if the dependencies ran successfully.</p>\n</li>\n<li>\n<p><code>output_dir</code> (<code>str</code>, default <code>None</code>): Described <a href=\"#storage-of-soft-failure-reports\" rel=\"nofollow\">below</a>.</p>\n</li>\n</ul>\n<h2>Storage of soft failure reports</h2>\n<p>Whan the wrapped task fails softly, it creates a report with the failure message or exception traceback to indicate this. These reports are stored in a directory specified in one of the following ways (in this order of precedence):</p>\n<ul>\n<li>\n<p><code>output_dir</code> parameter passed to <code>softly_failing</code></p>\n</li>\n<li>\n<p>Specified in <code>luigi.cfg</code>:</p>\n<pre><code>[luigi_soft_failures.Config]\noutput_dir=/some/path\n</code></pre>\n</li>\n<li>\n<p>Environment variable <code>LUIGI_SOFT_FAILURES_OUTPUT_DIR</code></p>\n</li>\n<li>\n<p>Default <code>./soft_failures/</code></p>\n</li>\n</ul>\n<h1>Limitations</h1>\n<ul>\n<li>Soft failure status is stored using a <code>LocalTarget</code>, so a local storage that all workers have access to is required.</li>\n<li>In the Luigi visualizer, softly failed tasks are shown as complete.</li>\n</ul>\n<p>Pull requests to address these are very welcome!</p>\n\n          </div>"}, "last_serial": 4555453, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "badb6fa83d52cd47c2e24234d310d930", "sha256": "ef92c34b66756e57110d512386bc524ee8d49cd363ceb824fd68aeeedbb73d55"}, "downloads": -1, "filename": "luigi_soft_failures-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "badb6fa83d52cd47c2e24234d310d930", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5292, "upload_time": "2018-12-03T11:58:11", "upload_time_iso_8601": "2018-12-03T11:58:11.470455Z", "url": "https://files.pythonhosted.org/packages/8d/58/01e2b16cd6f130db55284ca7de01e09e808a89274fa98dd2bc0020ea3a51/luigi_soft_failures-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ee95cee622438bcd1167e9fd470f4538", "sha256": "3da2aedc41696c5f791879fe19ab1a7beec1571c9998eeea19cec7909d2e0639"}, "downloads": -1, "filename": "luigi_soft_failures-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee95cee622438bcd1167e9fd470f4538", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5294, "upload_time": "2018-12-03T11:59:52", "upload_time_iso_8601": "2018-12-03T11:59:52.018947Z", "url": "https://files.pythonhosted.org/packages/74/6d/0856f9ad304afd24a650545fdee20aa3355784dbe868162fd6b1b5f8346d/luigi_soft_failures-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "781bcec85261c094ffedf54ae0ecfb1b", "sha256": "7ca408cc52de8123390ef573ce1641dcd6b6e7b83b70d35233f2af41955cd8ce"}, "downloads": -1, "filename": "luigi_soft_failures-0.1.1.tar.gz", "has_sig": false, "md5_digest": "781bcec85261c094ffedf54ae0ecfb1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5383, "upload_time": "2018-12-03T11:59:53", "upload_time_iso_8601": "2018-12-03T11:59:53.267636Z", "url": "https://files.pythonhosted.org/packages/c9/2e/1eff9987869e29d87304cc6e5662db9481a6b761a4f2151fd2d799acf148/luigi_soft_failures-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee95cee622438bcd1167e9fd470f4538", "sha256": "3da2aedc41696c5f791879fe19ab1a7beec1571c9998eeea19cec7909d2e0639"}, "downloads": -1, "filename": "luigi_soft_failures-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee95cee622438bcd1167e9fd470f4538", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5294, "upload_time": "2018-12-03T11:59:52", "upload_time_iso_8601": "2018-12-03T11:59:52.018947Z", "url": "https://files.pythonhosted.org/packages/74/6d/0856f9ad304afd24a650545fdee20aa3355784dbe868162fd6b1b5f8346d/luigi_soft_failures-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "781bcec85261c094ffedf54ae0ecfb1b", "sha256": "7ca408cc52de8123390ef573ce1641dcd6b6e7b83b70d35233f2af41955cd8ce"}, "downloads": -1, "filename": "luigi_soft_failures-0.1.1.tar.gz", "has_sig": false, "md5_digest": "781bcec85261c094ffedf54ae0ecfb1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5383, "upload_time": "2018-12-03T11:59:53", "upload_time_iso_8601": "2018-12-03T11:59:53.267636Z", "url": "https://files.pythonhosted.org/packages/c9/2e/1eff9987869e29d87304cc6e5662db9481a6b761a4f2151fd2d799acf148/luigi_soft_failures-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:12 2020"}