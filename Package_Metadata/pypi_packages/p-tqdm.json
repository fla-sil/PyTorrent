{"info": {"author": "Kyle Swanson", "author_email": "swansonk.14@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# p_tqdm\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/p-tqdm)](https://badge.fury.io/py/p-tqdm)\n[![PyPI version](https://badge.fury.io/py/p-tqdm.svg)](https://badge.fury.io/py/p-tqdm)\n[![Build Status](https://travis-ci.org/swansonk14/p_tqdm.svg?branch=master)](https://travis-ci.org/swansonk14/p_tqdm)\n\n`p_tqdm` makes parallel processing with progress bars easy.\n\n`p_tqdm` is a wrapper around [pathos.multiprocessing](https://github.com/uqfoundation/pathos/blob/master/pathos/multiprocessing.py) and [tqdm](https://github.com/tqdm/tqdm). Unlike Python's default multiprocessing library, pathos provides a more flexible parallel map which can apply almost any type of function --- including lambda functions, nested functions, and class methods --- and can easily handle functions with multiple arguments. tqdm is applied on top of pathos's parallel map and displays a progress bar including an estimated time to completion.\n\n## Installation\n\n```pip install p_tqdm```\n\n## Example\n\nLet's say you want to add two lists element by element. Without any parallelism, this can be done easily with a Python `map`.\n\n```python\nl1 = ['1', '2', '3']\nl2 = ['a', 'b', 'c']\n\ndef add(a, b):\n    return a + b\n    \nadded = map(add, l1, l2)\n# added == ['1a', '2b', '3c']\n```\n\nBut if the lists are much larger or the computation is more intense, parallelism becomes a necessity. However, the syntax is often cumbersome. `p_tqdm` makes it easy and adds a progress bar too.\n\n```python\nfrom p_tqdm import p_map\n\nadded = p_map(add, l1, l2)\n# added == ['1a', '2b', '3c']\n```\n\n```\n  0%|                                    | 0/3 [00:00<?, ?it/s]\n 33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                        | 1/3 [00:01<00:02, 1.00s/it]\n 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            | 2/3 [00:02<00:01, 1.00s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03<00:00, 1.00s/it]\n```\n\n## p_tqdm functions\n\n### Parallel maps\n\n* [p_map](#p_map) - parallel ordered map\n* [p_imap](#p_imap) - iterator for parallel ordered map\n* [p_umap](#p_umap) - parallel unordered map\n* [p_uimap](#p_uimap) - iterator for parallel unordered map\n\n### Sequential maps\n* [t_map](#t_map) - sequential ordered map\n* [t_imap](#t_imap) - iterator for sequential ordered map\n\n### p_map\n\nPerforms an ordered map in parallel.\n\n```python\nfrom p_tqdm import p_map\n\ndef add(a, b):\n    return a + b\n\nadded = p_map(add, ['1', '2', '3'], ['a', 'b', 'c'])\n# added = ['1a', '2b', '3c']\n```\n\n### p_imap\n\nReturns an iterator for an ordered map in parallel.\n\n```python\nfrom p_tqdm import p_imap\n\ndef add(a, b):\n    return a + b\n\niterator = p_imap(add, ['1', '2', '3'], ['a', 'b', 'c'])\n\nfor result in iterator:\n    print(result) # prints '1a', '2b', '3c'\n```\n\n### p_umap\n\nPerforms an unordered map in parallel.\n\n```python\nfrom p_tqdm import p_umap\n\ndef add(a, b):\n    return a + b\n\nadded = p_umap(add, ['1', '2', '3'], ['a', 'b', 'c'])\n# added is an array with '1a', '2b', '3c' in any order\n```\n\n### p_uimap\n\nReturns an iterator for an unordered map in parallel.\n\n```python\nfrom p_tqdm import p_uimap\n\ndef add(a, b):\n    return a + b\n\niterator = p_uimap(add, ['1', '2', '3'], ['a', 'b', 'c'])\n\nfor result in iterator:\n    print(result) # prints '1a', '2b', '3c' in any order\n```\n\n### t_map\n\nPerforms an ordered map sequentially.\n\n```python\nfrom p_tqdm import t_map\n\ndef add(a, b):\n    return a + b\n\nadded = t_map(add, ['1', '2', '3'], ['a', 'b', 'c'])\n# added == ['1a', '2b', '3c']\n```\n\n### t_imap\n\nReturns an iterator for an ordered map to be performed sequentially.\n\n```python\nfrom p_tqdm import p_imap\n\ndef add(a, b):\n    return a + b\n\niterator = t_imap(add, ['1', '2', '3'], ['a', 'b', 'c'])\n\nfor result in iterator:\n    print(result) # prints '1a', '2b', '3c'\n```\n\n## Shared properties\n\n### Arguments\n\nAll `p_tqdm` functions accept any number of iterables as input, as long as the number of iterables matches the number of arguments of the function.\n\nTo repeat a non-iterable argument along with the iterables, use Python's [partial](https://docs.python.org/3/library/functools.html#functools.partial) from the [functools](https://docs.python.org/3/library/functools.html) library. See the example below.\n\n```python\nfrom functools import partial\n\nl1 = ['1', '2', '3']\nl2 = ['a', 'b', 'c']\n\ndef add(a, b, c=''):\n    return a + b + c\n\nadded = p_map(partial(add, c='!'), l1, l2)\n# added == ['1a!', '2b!', '3c!']\n```\n\n### CPUs\n\nAll the parallel `p_tqdm` functions can be passed the keyword `num_cpus` to indicate how many CPUs to use. The default is all CPUs. `num_cpus` can either be an integer to indicate the exact number of CPUs to use or a float to indicate the proportion of CPUs to use.\n\nNote that the parallel Pool objects used by `p_tqdm` are automatically closed when the map finishes processing.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/swansonk14/p_tqdm/v_1.3.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/swansonk14/p_tqdm", "keywords": "tqdm,progress bar,parallel", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "p-tqdm", "package_url": "https://pypi.org/project/p-tqdm/", "platform": "", "project_url": "https://pypi.org/project/p-tqdm/", "project_urls": {"Download": "https://github.com/swansonk14/p_tqdm/v_1.3.3.tar.gz", "Homepage": "https://github.com/swansonk14/p_tqdm"}, "release_url": "https://pypi.org/project/p-tqdm/1.3.3/", "requires_dist": null, "requires_python": "", "summary": "Parallel processing with progress bars", "version": "1.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>p_tqdm</h1>\n<p><a href=\"https://badge.fury.io/py/p-tqdm\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66e7de0fc4ce024835c68011a452351ed34af26d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f702d7471646d\"></a>\n<a href=\"https://badge.fury.io/py/p-tqdm\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/126e7a940acec324f161f61ea4d17fe3e6abe709/68747470733a2f2f62616467652e667572792e696f2f70792f702d7471646d2e737667\"></a>\n<a href=\"https://travis-ci.org/swansonk14/p_tqdm\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/924c8b39f6a365439b35d71f07026c574d0dfb11/68747470733a2f2f7472617669732d63692e6f72672f7377616e736f6e6b31342f705f7471646d2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><code>p_tqdm</code> makes parallel processing with progress bars easy.</p>\n<p><code>p_tqdm</code> is a wrapper around <a href=\"https://github.com/uqfoundation/pathos/blob/master/pathos/multiprocessing.py\" rel=\"nofollow\">pathos.multiprocessing</a> and <a href=\"https://github.com/tqdm/tqdm\" rel=\"nofollow\">tqdm</a>. Unlike Python's default multiprocessing library, pathos provides a more flexible parallel map which can apply almost any type of function --- including lambda functions, nested functions, and class methods --- and can easily handle functions with multiple arguments. tqdm is applied on top of pathos's parallel map and displays a progress bar including an estimated time to completion.</p>\n<h2>Installation</h2>\n<p><code>pip install p_tqdm</code></p>\n<h2>Example</h2>\n<p>Let's say you want to add two lists element by element. Without any parallelism, this can be done easily with a Python <code>map</code>.</p>\n<pre><span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">]</span>\n<span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n    \n<span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">l1</span><span class=\"p\">,</span> <span class=\"n\">l2</span><span class=\"p\">)</span>\n<span class=\"c1\"># added == ['1a', '2b', '3c']</span>\n</pre>\n<p>But if the lists are much larger or the computation is more intense, parallelism becomes a necessity. However, the syntax is often cumbersome. <code>p_tqdm</code> makes it easy and adds a progress bar too.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">p_map</span>\n\n<span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"n\">p_map</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">l1</span><span class=\"p\">,</span> <span class=\"n\">l2</span><span class=\"p\">)</span>\n<span class=\"c1\"># added == ['1a', '2b', '3c']</span>\n</pre>\n<pre><code>  0%|                                    | 0/3 [00:00&lt;?, ?it/s]\n 33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                        | 1/3 [00:01&lt;00:02, 1.00s/it]\n 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            | 2/3 [00:02&lt;00:01, 1.00s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03&lt;00:00, 1.00s/it]\n</code></pre>\n<h2>p_tqdm functions</h2>\n<h3>Parallel maps</h3>\n<ul>\n<li><a href=\"#p_map\" rel=\"nofollow\">p_map</a> - parallel ordered map</li>\n<li><a href=\"#p_imap\" rel=\"nofollow\">p_imap</a> - iterator for parallel ordered map</li>\n<li><a href=\"#p_umap\" rel=\"nofollow\">p_umap</a> - parallel unordered map</li>\n<li><a href=\"#p_uimap\" rel=\"nofollow\">p_uimap</a> - iterator for parallel unordered map</li>\n</ul>\n<h3>Sequential maps</h3>\n<ul>\n<li><a href=\"#t_map\" rel=\"nofollow\">t_map</a> - sequential ordered map</li>\n<li><a href=\"#t_imap\" rel=\"nofollow\">t_imap</a> - iterator for sequential ordered map</li>\n</ul>\n<h3>p_map</h3>\n<p>Performs an ordered map in parallel.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">p_map</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"n\">p_map</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>\n<span class=\"c1\"># added = ['1a', '2b', '3c']</span>\n</pre>\n<h3>p_imap</h3>\n<p>Returns an iterator for an ordered map in parallel.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">p_imap</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">p_imap</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># prints '1a', '2b', '3c'</span>\n</pre>\n<h3>p_umap</h3>\n<p>Performs an unordered map in parallel.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">p_umap</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"n\">p_umap</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>\n<span class=\"c1\"># added is an array with '1a', '2b', '3c' in any order</span>\n</pre>\n<h3>p_uimap</h3>\n<p>Returns an iterator for an unordered map in parallel.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">p_uimap</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">p_uimap</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># prints '1a', '2b', '3c' in any order</span>\n</pre>\n<h3>t_map</h3>\n<p>Performs an ordered map sequentially.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">t_map</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"n\">t_map</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>\n<span class=\"c1\"># added == ['1a', '2b', '3c']</span>\n</pre>\n<h3>t_imap</h3>\n<p>Returns an iterator for an ordered map to be performed sequentially.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">p_tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">p_imap</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">t_imap</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># prints '1a', '2b', '3c'</span>\n</pre>\n<h2>Shared properties</h2>\n<h3>Arguments</h3>\n<p>All <code>p_tqdm</code> functions accept any number of iterables as input, as long as the number of iterables matches the number of arguments of the function.</p>\n<p>To repeat a non-iterable argument along with the iterables, use Python's <a href=\"https://docs.python.org/3/library/functools.html#functools.partial\" rel=\"nofollow\">partial</a> from the <a href=\"https://docs.python.org/3/library/functools.html\" rel=\"nofollow\">functools</a> library. See the example below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n\n<span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">]</span>\n<span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span>\n\n<span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"n\">p_map</span><span class=\"p\">(</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'!'</span><span class=\"p\">),</span> <span class=\"n\">l1</span><span class=\"p\">,</span> <span class=\"n\">l2</span><span class=\"p\">)</span>\n<span class=\"c1\"># added == ['1a!', '2b!', '3c!']</span>\n</pre>\n<h3>CPUs</h3>\n<p>All the parallel <code>p_tqdm</code> functions can be passed the keyword <code>num_cpus</code> to indicate how many CPUs to use. The default is all CPUs. <code>num_cpus</code> can either be an integer to indicate the exact number of CPUs to use or a float to indicate the proportion of CPUs to use.</p>\n<p>Note that the parallel Pool objects used by <code>p_tqdm</code> are automatically closed when the map finishes processing.</p>\n\n          </div>"}, "last_serial": 6983226, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "de4acf22680308312cba04499bcf8814", "sha256": "3e790e47fdd633aa38559d362c8193a2863494232e01d46ce003a0b57d0f5da8"}, "downloads": -1, "filename": "p_tqdm-0.1.tar.gz", "has_sig": false, "md5_digest": "de4acf22680308312cba04499bcf8814", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 722, "upload_time": "2017-08-16T02:01:51", "upload_time_iso_8601": "2017-08-16T02:01:51.271355Z", "url": "https://files.pythonhosted.org/packages/e2/45/941711132454b426d22fd09b41b2e0efd59163b2e81e83fc66390d63c6de/p_tqdm-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b9eb2ab88e901041e2eb4b4b33b679a7", "sha256": "2f28a766a3db01b9fddd9eecc82e577526d85f867ea7f7fbf60b7ee717fcf2e8"}, "downloads": -1, "filename": "p_tqdm-0.2.tar.gz", "has_sig": false, "md5_digest": "b9eb2ab88e901041e2eb4b4b33b679a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 692, "upload_time": "2017-08-16T18:21:58", "upload_time_iso_8601": "2017-08-16T18:21:58.773851Z", "url": "https://files.pythonhosted.org/packages/e5/d9/8cb00900092304116f46b1b3fd67b5832d37b15951f943a18d4d622186f7/p_tqdm-0.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "2594ea9aaf262911d1b60e291a78caed", "sha256": "3399296da43f0e1fc759064ad6a710071995aaf5c4b448fcd5d3528cf383d237"}, "downloads": -1, "filename": "p_tqdm-1.0.tar.gz", "has_sig": false, "md5_digest": "2594ea9aaf262911d1b60e291a78caed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1460, "upload_time": "2017-08-20T06:44:37", "upload_time_iso_8601": "2017-08-20T06:44:37.421240Z", "url": "https://files.pythonhosted.org/packages/44/c6/501d4c9e15b8dffd280a39b597a2b85901669d8d3475a4074330446c468b/p_tqdm-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "0a302155cc3d4f49e6d8e0fcc7e51a70", "sha256": "a5344b1a2c95776dc33568ad7b7c30a3455bb0fe356fdbde4a825169c2db244e"}, "downloads": -1, "filename": "p_tqdm-1.1.tar.gz", "has_sig": false, "md5_digest": "0a302155cc3d4f49e6d8e0fcc7e51a70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1481, "upload_time": "2018-02-02T19:26:26", "upload_time_iso_8601": "2018-02-02T19:26:26.338377Z", "url": "https://files.pythonhosted.org/packages/73/5c/b399e35275575c0d3ce4f048ed615f6bf9d26ea6dc16120f740c09dd893d/p_tqdm-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4af7c0ab7f3be2bfd18cf21ca1516c9f", "sha256": "fbb3b0ce39219916aa01be6d7898a5321553c256dfb0c156de2d1659f84ed2fa"}, "downloads": -1, "filename": "p_tqdm-1.2.tar.gz", "has_sig": false, "md5_digest": "4af7c0ab7f3be2bfd18cf21ca1516c9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2029, "upload_time": "2018-02-03T13:39:02", "upload_time_iso_8601": "2018-02-03T13:39:02.541085Z", "url": "https://files.pythonhosted.org/packages/52/ba/6c00fc368f75190d39a55fbdc27ff9be872b6fa97d68ddd758a60a71ffec/p_tqdm-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "681e6d3988fa8793463556c28938fca1", "sha256": "3c307379bd5a06821fc27709668cc403318bd1baf3c60c6aa007afb21b624bde"}, "downloads": -1, "filename": "p_tqdm-1.3.tar.gz", "has_sig": false, "md5_digest": "681e6d3988fa8793463556c28938fca1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4477, "upload_time": "2019-12-28T02:15:16", "upload_time_iso_8601": "2019-12-28T02:15:16.768066Z", "url": "https://files.pythonhosted.org/packages/7c/49/e0d744c3aace9e8951725c7e47c4beabf9311cc47b0ead9879a6957e18a4/p_tqdm-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "b397ec135d2a23d9ae5bb72d3f631bcc", "sha256": "c2776b231d00b98ca0c492bd8052dd6305abf56a714850ff84f5676d5e1928ed"}, "downloads": -1, "filename": "p_tqdm-1.3.1.tar.gz", "has_sig": false, "md5_digest": "b397ec135d2a23d9ae5bb72d3f631bcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4215, "upload_time": "2020-03-14T14:44:34", "upload_time_iso_8601": "2020-03-14T14:44:34.206977Z", "url": "https://files.pythonhosted.org/packages/28/c1/15691c019568d17288806cc3b2339ab12b2879fd8560082c8e176daa14e1/p_tqdm-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "434d1a95ab66e2e601f05356040108c6", "sha256": "a55459d9fd25d9db828b731cb04a76617d143a424b59f982668b63196bc44777"}, "downloads": -1, "filename": "p_tqdm-1.3.2.tar.gz", "has_sig": false, "md5_digest": "434d1a95ab66e2e601f05356040108c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4208, "upload_time": "2020-03-29T03:22:21", "upload_time_iso_8601": "2020-03-29T03:22:21.099374Z", "url": "https://files.pythonhosted.org/packages/56/59/baaacd3286155b73da2a728b587abed21dbd0894198795807ffe485b997b/p_tqdm-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "ccc080edaf6c6edda011d2c96906d2b5", "sha256": "8b9316d8bae43279e03ea01c8849422e5072a931f1b94b79890b0da426802c6e"}, "downloads": -1, "filename": "p_tqdm-1.3.3.tar.gz", "has_sig": false, "md5_digest": "ccc080edaf6c6edda011d2c96906d2b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4259, "upload_time": "2020-04-09T04:54:27", "upload_time_iso_8601": "2020-04-09T04:54:27.488505Z", "url": "https://files.pythonhosted.org/packages/b9/c4/ce6abe2fa3868b1ea9216a81522a9ece36f47bdbb966f8f31f76e2967178/p_tqdm-1.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccc080edaf6c6edda011d2c96906d2b5", "sha256": "8b9316d8bae43279e03ea01c8849422e5072a931f1b94b79890b0da426802c6e"}, "downloads": -1, "filename": "p_tqdm-1.3.3.tar.gz", "has_sig": false, "md5_digest": "ccc080edaf6c6edda011d2c96906d2b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4259, "upload_time": "2020-04-09T04:54:27", "upload_time_iso_8601": "2020-04-09T04:54:27.488505Z", "url": "https://files.pythonhosted.org/packages/b9/c4/ce6abe2fa3868b1ea9216a81522a9ece36f47bdbb966f8f31f76e2967178/p_tqdm-1.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:09 2020"}