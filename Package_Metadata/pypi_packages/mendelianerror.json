{"info": {"author": "Brent Pedersen", "author_email": "bpederse@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "mendelian-error\n===============\n\nThis package attempts to assign probability to a mendelian error event in a trio.\nFor example, given a mother with genotype 'C/C' and a father with genotype 'C/C'\na child with genotype 'C/T' will be a \"mendelian error\", in this case, a candidate\n*de novo* mutation.\n\nWe can filter candidates based on their genotype likelihoods. For example if the\nchild had a genotype likelihood of -2,-1,-20 then we are likely to consider this\na genotyping error because the homozygous reference (\"C/C\" with GL -2) is fairly\nclose the the GL for het (with GL -1). If the genotype likelihood field was\n-20,0,-20, then the call is confidently het. We can use the genotype likelihoods\nto assign a probability:\n\n```Python\n\n>>> from mendelianerror import mendelian_error\n# everyone is homref. this should have a low probability of an error:\n>>> father = mother = child = [-0.1, -8.0, -8.0]\n>>> mendelian_error(mother, father, child)\n7.55...e-08\n\n\n# parents are hom, child is het. this is a likely mendelian error:\n>>> father = mother = [-0.6, -2.5, -2.5]\n>>> child = [-2.5, -0.6, -2.5]\n>>> mendelian_error(mother, father, child)\n0.987...\n\n```\n\nSo the input is the 3 GL numbers for each of the father, mother, child.\n\nInstallation\n============\n\n    pip install mendelianerror\n\nCLI\n===\n\nAfter installation, one can use this on a multi-sample VCF file like:\n```Shell\nmendelianerror $input.vcf father_id mother_id child_id > $new.vcf\n```\n\nto get only the putative mendelian errors, set a high cutoff:\n\n```Shell\nmendelianerror --cutoff 0.999 $input.vcf father_id mother_id child_id > $new.vcf\n```\n\n\nLimitations\n===========\n\n+ Only make sense for autosomal variants.\n+ Only works on trios (doesn't consider extended pedigrees or siblings).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "mendelianerror", "package_url": "https://pypi.org/project/mendelianerror/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mendelianerror/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/mendelianerror/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "probability of mendelian error in trios", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            mendelian-error<br>===============<br><br>This package attempts to assign probability to a mendelian error event in a trio.<br>For example, given a mother with genotype 'C/C' and a father with genotype 'C/C'<br>a child with genotype 'C/T' will be a \"mendelian error\", in this case, a candidate<br>*de novo* mutation.<br><br>We can filter candidates based on their genotype likelihoods. For example if the<br>child had a genotype likelihood of -2,-1,-20 then we are likely to consider this<br>a genotyping error because the homozygous reference (\"C/C\" with GL -2) is fairly<br>close the the GL for het (with GL -1). If the genotype likelihood field was<br>-20,0,-20, then the call is confidently het. We can use the genotype likelihoods<br>to assign a probability:<br><br>```Python<br><br>&gt;&gt;&gt; from mendelianerror import mendelian_error<br># everyone is homref. this should have a low probability of an error:<br>&gt;&gt;&gt; father = mother = child = [-0.1, -8.0, -8.0]<br>&gt;&gt;&gt; mendelian_error(mother, father, child)<br>7.55...e-08<br><br><br># parents are hom, child is het. this is a likely mendelian error:<br>&gt;&gt;&gt; father = mother = [-0.6, -2.5, -2.5]<br>&gt;&gt;&gt; child = [-2.5, -0.6, -2.5]<br>&gt;&gt;&gt; mendelian_error(mother, father, child)<br>0.987...<br><br>```<br><br>So the input is the 3 GL numbers for each of the father, mother, child.<br><br>Installation<br>============<br><br>    pip install mendelianerror<br><br>CLI<br>===<br><br>After installation, one can use this on a multi-sample VCF file like:<br>```Shell<br>mendelianerror $input.vcf father_id mother_id child_id &gt; $new.vcf<br>```<br><br>to get only the putative mendelian errors, set a high cutoff:<br><br>```Shell<br>mendelianerror --cutoff 0.999 $input.vcf father_id mother_id child_id &gt; $new.vcf<br>```<br><br><br>Limitations<br>===========<br><br>+ Only make sense for autosomal variants.<br>+ Only works on trios (doesn't consider extended pedigrees or siblings).\n          </div>"}, "last_serial": 1563748, "releases": {"0.0.0": [], "0.0.1": [{"comment_text": "", "digests": {"md5": "4a1e9cbae527860635bec90b3434d436", "sha256": "349fa6d2843279a175f9366c1cff8d77c200a49c2db1d5fb2e8a5694a6ebae2a"}, "downloads": -1, "filename": "mendelianerror-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4a1e9cbae527860635bec90b3434d436", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4236, "upload_time": "2015-04-14T20:52:27", "upload_time_iso_8601": "2015-04-14T20:52:27.471905Z", "url": "https://files.pythonhosted.org/packages/31/bd/8e36cc596f1e63774ec1f0aba58e566947b1eddcac05a719869e1c3a31e4/mendelianerror-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "084d591efc31c1d69f852275ae63a7f2", "sha256": "a21be4e14941baa260b1d1dfdba2975364ea5130c182b2e09c2e0a5d4f35334e"}, "downloads": -1, "filename": "mendelianerror-0.0.2.tar.gz", "has_sig": false, "md5_digest": "084d591efc31c1d69f852275ae63a7f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4260, "upload_time": "2015-04-14T21:28:12", "upload_time_iso_8601": "2015-04-14T21:28:12.112366Z", "url": "https://files.pythonhosted.org/packages/24/f7/83d8c2d76bd177cb1cfeb559db7d4b958f1aab0b5f1f2ffec9d22c17f472/mendelianerror-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "84f276802240c7ccd1a3bacf7740b906", "sha256": "e524c38e23281fb010b7a785c888e9ce12775fbaa49f0d95e8b1e74558ed8d1f"}, "downloads": -1, "filename": "mendelianerror-0.0.3.tar.gz", "has_sig": false, "md5_digest": "84f276802240c7ccd1a3bacf7740b906", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4545, "upload_time": "2015-05-26T21:35:00", "upload_time_iso_8601": "2015-05-26T21:35:00.433650Z", "url": "https://files.pythonhosted.org/packages/b6/0f/29a160aabcd6aba8766ca6d88cd43976153004b710e56881618a808b1e13/mendelianerror-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84f276802240c7ccd1a3bacf7740b906", "sha256": "e524c38e23281fb010b7a785c888e9ce12775fbaa49f0d95e8b1e74558ed8d1f"}, "downloads": -1, "filename": "mendelianerror-0.0.3.tar.gz", "has_sig": false, "md5_digest": "84f276802240c7ccd1a3bacf7740b906", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4545, "upload_time": "2015-05-26T21:35:00", "upload_time_iso_8601": "2015-05-26T21:35:00.433650Z", "url": "https://files.pythonhosted.org/packages/b6/0f/29a160aabcd6aba8766ca6d88cd43976153004b710e56881618a808b1e13/mendelianerror-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:17 2020"}