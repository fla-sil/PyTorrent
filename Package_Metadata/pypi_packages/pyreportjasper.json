{"info": {"author": "Jadson Bonfim Ribeiro", "author_email": "contato@jadsonbr.com.br", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Reports for Python, with JasperReports.\n=======================================\n\n|Build Status| |Coverage Status| |PyPI|\n\n**Is using Linux servers?**\n\nDo not forget to grant permission 777 for the directory where is the\npackage.\n\nIntroduction\n------------\n\nThis package aims to be a solution to compile and process JasperReports\n(.jrxml & .jasper files).\n\nWhy?\n~~~~\n\nDid you ever had to create a good looking Invoice with a lot of fields\nfor your great web app or desktop?\n\nI had to, and the solutions out there were not perfect. Generating\n*HTML* + *CSS* to make a *PDF*? WTF? That doesn't make any sense! :)\n\nThen I found **JasperReports** the best open source solution for\nreporting.\n\nWhat can I do with this?\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWell, everything. JasperReports is a powerful tool for **reporting** and\n**BI**.\n\n**From their website:**\n\n    The JasperReports Library is the world's most popular open source\n    reporting engine. It is entirely written in Java and it is able to\n    use data coming from any kind of data source and produce\n    pixel-perfect documents that can be viewed, printed or exported in a\n    variety of document formats including HTML, PDF, Excel, OpenOffice\n    and Word.\n\nIt is recommended using `Jaspersoft\nStudio <http://community.jaspersoft.com/project/jaspersoft-studio>`__ to\nbuild your reports, connect it to your datasource (ex:JSON, XML, MySQL,\nPOSTGRES, SQL Server), loop thru the results and output it to PDF, XLS,\nDOC, RTF, ODF, etc.\n\n*Some examples of what you can do:*\n\n-  Invoices\n-  Reports\n-  Listings\n\nPackage to generate reports with\n`JasperReports <http://community.jaspersoft.com/project/jasperreports-library>`__\nlibrary through\n`JasperStarter <https://bitbucket.org/cenote/jasperstarter/src>`__\ncommand-line tool.\n\nRequirements\n------------\n\n-  Java JDK 1.8\n-  Python\n   `subprocess.run() <https://docs.python.org/3/library/subprocess.html>`__\n   function\n\nOptional\n--------\n\n-  `Mysql JDBC <http://dev.mysql.com/downloads/connector/j/>`__ (if you\n   want to use database)\n-  `PostgreSQL JDBC <https://jdbc.postgresql.org/download.html>`__ (if\n   you want to use database)\n-  `SQL Server\n   JDBC <https://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11774>`__\n   (if you want to use database)\n-  `Oracle\n   JDBC <http://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html>`__\n   (if you want to use database)\n-  `MongoDB JDBC <https://mongodb.github.io/mongo-java-driver/>`__ (if\n   you want to use database)\n-  `Jaspersoft\n   Studio <http://community.jaspersoft.com/project/jaspersoft-studio>`__\n   (to draw and compile your reports)\n\nNote\n~~~~\n\n-  The JDBC driver of your database should be place in the\n   ``pyreportjasper/jasperstarter/jdbc/`` directory.\n-  Using **pyreportjasper**, you can also access different types of data\n   sources, including CSV, JDBC, JSON, NoSQL, XML, or your own custom\n   data source.\n\nJava (JDK and JRE)\n~~~~~~~~~~~~~~~~~~\n\nCheck if you already have Java installed:\n\n::\n\n    $ javac -version\n    javac version 1.8.0_101\n\nIf you get:\n\n::\n\n    command not found: javac\n\nThen install it with: (Ubuntu/Debian)\n\n::\n\n    $ sudo apt-get install default-jdk\n\nTo install on: (centOS/Fedora)\n\n::\n\n    # yum install java-1.8.0-openjdk.x86_64\n\nTo install on windows visit the link->\n`JDK <http://www.oracle.com/technetwork/pt/java/javase/downloads/jdk8-downloads-2133151.html>`__\nand look for the most appropriate version for your system.\n\nNow run the ``javac -version`` again and check if the output is ok.\n\nInstallation\n------------\n\nInstall `PyPI <https://pypi.python.org/pypi/pyreportjasper>`__ if you\ndon't have it.\n\n::\n\n    pip install pyreportjasper\n\nUsing the code\n~~~~~~~~~~~~~~~\n\nPyreport is actively developed in GitHub, where code is `always\navailable <https://github.com/jadsonbr/pyreportjasper>`__.\n\nYou can clone the public repository:\n\n::\n\n    git clone git://github.com/jadsonbr/pyreportjasper.git\n\nDownload `tar\nfile <https://github.com/jadsonbr/pyreportjasper/tarball/master>`__:\n\n::\n\n    curl -OL https://github.com/jadsonbr/pyreportjasper/tarball/master\n\nOr, Download the `zip\nfile <https://github.com/jadsonbr/pyreportjasper/zipball/master>`__:\n\n::\n\n    curl -OL https://github.com/jadsonbr/pyreportjasper/zipball/master\n\nUnzip the downloaded file\n\nNavigate to the unzipped folder\n\nOnce you have a copy of the code, you can easily include it in your\nPytohn package, or install it in your site-packages directory:\n\n::\n\n    $ python setup.py install\n\nExamples\n--------\n\nThe *Hello World* example.\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGo to the examples directory in the root of the package Open the\n``test/examples/hello_world.jrxml`` file with Jaspersoft Studio or with\nyour favorite text editor and take a look at the source code.\n\nCompiling\n^^^^^^^^^\n\nFirst we need to compile our ``JRXML`` file into a ``JASPER`` binary\nfile. We just have to do this one time.\n\n**Note 1:** You don't need to do this step if you are using *Jaspersoft\nStudio*. You can compile directly within the program.\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n\n    def compiling():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/hello_world.jrxml'\n        jasper = JasperPy()\n        jasper.compile(input_file)\n\nThis commando will compile the ``hello_world.jrxml`` source file to a\n``hello_world.jasper`` file.\n\nProcessing\n^^^^^^^^^^\n\nNow lets process the report that we compile before:\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n\n    def processing():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/hello_world.jrxml'\n        output = os.path.dirname(os.path.abspath(__file__)) + '/output/examples'\n        jasper = JasperPy()\n        jasper.process(\n            input_file, output_file=output, format_list=[\"pdf\", \"rtf\"])\n\nNow check the examples folder! :) Great right? You now have 2 files,\n``hello_world.pdf`` and ``hello_world.rtf``.\n\nCheck the *API* of the ``compile`` and ``process`` functions in the file\n``pyreportjasper/jasperpy.py`` file.\n\nListing Parameters\n^^^^^^^^^^^^^^^^^^\n\nQuerying the jasper file to examine parameters available in the given\njasper report file:\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n\n    def listing_parameters():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/hello_world_params.jrxml'\n        jasper = JasperPy()\n        output = jasper.list_parameters(input_file)\n        print(output)\n\nAdvanced example - using a database\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe can also specify parameters for connecting to database:\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from platform import python_version\n    from pyreportjasper import JasperPy\n\n    def advanced_example_using_database():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/hello_world.jrxml'\n        output = os.path.dirname(os.path.abspath(__file__)) + '/output/examples'\n        con = {\n            'driver': 'postgres',\n            'username': 'DB_USERNAME',\n            'password': 'DB_PASSWORD',\n            'host': 'DB_HOST',\n            'database': 'DB_DATABASE',\n            'schema': 'DB_SCHEMA',\n            'port': '5432'\n        }\n        jasper = JasperPy()\n        jasper.process(\n            input_file,\n            output_file=output,\n            format_list=[\"pdf\", \"rtf\", \"xml\"],\n            parameters={'python_version': python_version()},\n            db_connection=con,\n            locale='pt_BR'  # LOCALE Ex.:(en_US, de_GE)\n        )\n\n**Note 2:**\n\nFor a complete list of locales see `Supported\nLocales <http://www.oracle.com/technetwork/java/javase/java8locales-2095355.html>`__\n\nReports from a XML\n~~~~~~~~~~~~~~~~~~\n\nSee how easy it is to generate a report with a source an XML file:\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n\n    def xml_to_pdf():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/CancelAck.jrxml'\n\n        output = os.path.dirname(os.path.abspath(__file__)) + '/output/_CancelAck'\n\n        data_file = os.path.dirname(os.path.abspath(__file__)) + \\\n            '/examples/CancelAck.xml'\n\n        jasper = JasperPy()\n\n        jasper.process(\n            input_file,\n            output_file=output,\n            format_list=[\"pdf\"],\n            parameters={},\n            db_connection={\n                'data_file': data_file,\n                'driver': 'xml',\n                'xml_xpath': '/CancelResponse/CancelResult/ID',\n            },\n            locale='pt_BR'  # LOCALE Ex.:(en_US, de_GE)\n        )\n\n        print('Result is the file below.')\n        print(output + '.pdf')\n        \n\nReports from a JSON File\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nSee how easy it is to generate a report with a source an JSON file:\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n\n    def json_to_pdf():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/json.jrxml'\n\n        output = os.path.dirname(os.path.abspath(__file__)) + '/output/_Contacts'\n        json_query = 'contacts.person'\n\n        data_file = os.path.dirname(os.path.abspath(__file__)) + \\\n            '/examples/contacts.json'\n\n        jasper = JasperPy()\n        jasper.process(\n            input_file,\n            output_file=output,\n            format_list=[\"pdf\"],\n            parameters={},\n            db_connection={\n                'data_file': data_file,\n                'driver': 'json',\n                'json_query': json_query,\n            },\n            locale='pt_BR'  # LOCALE Ex.:(en_US, de_GE)\n        )\n\n        print('Result is the file below.')\n        print(output + '.pdf')\n\n**Note 3:**\n\nJasperReports can process JSON files using either the `original JSON DataSource\n<http://jasperreports.sourceforge.net/sample.reference/jsondatasource/index.html>`__\nor the `newer JSONQL Data Source\n<http://jasperreports.sourceforge.net/sample.reference/jsonqldatasource/index.html>`__.\nRefer to the JSONQL DataSource documentation for the differences. The example above\nuses the JSON DataSource. To use the enhanced capabilities of the JSONQL DataSource\ninstead use:\n\n-   the ``jsonql.jrxml`` input file\n-   the ``jsonql`` driver setting\n-   the ``jsonql_query`` query setting\n\nby changing these three parts of the example:\n\n.. code-block:: python\n\n    ...\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/jsonql.jrxml'\n    ...\n            db_connection={\n    ...\n                'driver': 'jsonql',\n                'jsonql_query': json_query,\n            },\n\n\nSubreport Example\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n\n    def subreport_example():\n\n        input_file_header = os.path.dirname(os.path.abspath(__file__)) + \\\n                            '/examples/subreports/header.jrxml'\n\n        input_file_details = os.path.dirname(os.path.abspath(__file__)) + \\\n                             '/examples/subreports/details.jrxml'\n\n        input_file_main = os.path.dirname(os.path.abspath(__file__)) + \\\n                          '/examples/subreports/main.jrxml'\n\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/subreports/main.jasper'\n\n        data_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                    '/examples/subreports/contacts.xml'\n\n        output = os.path.dirname(os.path.abspath(__file__)) + '/output/examples/subreports/'\n\n        jasper = JasperPy()\n\n        jasper.compile(input_file_header)\n        jasper.compile(input_file_details)\n        jasper.compile(input_file_main)\n\n        jasper.process(\n                    input_file,\n                    output_file=output,\n                    format_list=[\"pdf\"],\n                    parameters={},\n                    db_connection={\n                        'data_file': data_file,\n                        'driver': 'xml',\n                        'xml_xpath': '\"/\"',\n                    },\n                    locale='pt_BR',  # LOCALE Ex.:(en_US, de_GE)\n                    resource='examples/subreports/'\n                )\n\nFlask Example\n~~~~~~~~~~~~~\n\nGet parameters via URL and filter them if they are valid parameters for\nthe *jrxml* file:\n\nAfter runnig you could visit\nhttp://localhost:5000/?myString=My%20Beautiful%20String&myInt=1&myDate=2017-01-01&this\\_parameter=ignored\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from pyreportjasper import JasperPy\n    from flask import Flask, request, make_response\n\n\n    app = Flask(__name__)\n    input_file =  os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/hello_world_params.jrxml'\n    jasper = JasperPy()\n\n\n    def compiling():\n        jasper.compile(input_file)\n\n    def processing(parameters):\n        output_file = os.path.dirname(os.path.abspath(__file__)) + '/output/examples'\n        jasper.process(\n            input_file, output_file, parameters=parameters, format_list=[\"pdf\"])\n\n    def filter_parameters(request_args):\n        list_parameters = jasper.list_parameters(input_file)\n        parameters = {}\n        for key in list_parameters:\n          if key in request_args:\n            parameters[key] = request_args[key]\n        return parameters\n\n    @app.route('/')\n    def my_route():\n      request_args = request.args.to_dict()\n      parameters = filter_parameters(request_args)\n\n      processing(parameters)\n\n      try:\n          with app.open_resource(os.path.dirname(os.path.abspath(__file__)) + '/output/examples/hello_world_params.pdf') as f:\n              content = f.read()\n          resposta = make_response(content)\n          resposta.headers['Content-Type'] = 'application/pdf; charset=utf-8'\n          resposta.headers['Content-Disposition'] = 'inline; filename=hello_world_params.pdf'\n          return resposta\n      except IOError:\n          return make_response(\"<h1>403 Forbidden</h1>\", 403)\n\n    if __name__ == '__main__':\n        compiling()\n        app.run(host='0.0.0.0')\n\nWorking with resources (i18n resource bundles, icons or images)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you need provide resource to report, you can do that by set parameter\n``resource`` in method ``jasper.process``. More details `jasper starter\nmanual\npage <http://jasperstarter.cenote.de/usage.html#Reports_with_resources>`__.\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    import os\n    from platform import python_version\n    from pyreportjasper import JasperPy\n\n    def advanced_example_using_database():\n        input_file = os.path.dirname(os.path.abspath(__file__)) + \\\n                     '/examples/hello_world.jrxml'\n        output = os.path.dirname(os.path.abspath(__file__)) + '/output/examples'\n        con = {\n            'driver': 'postgres',\n            'username': 'DB_USERNAME',\n            'password': 'DB_PASSWORD',\n            'host': 'DB_HOST',\n            'database': 'DB_DATABASE',\n            'schema': 'DB_SCHEMA',\n            'port': '5432'\n        }\n        jasper = JasperPy()\n        jasper.process(\n            input_file,\n            output_file=output,\n            format_list=[\"pdf\", \"rtf\", \"xml\"],\n            parameters={'python_version': python_version()},\n            db_connection=con,\n            locale='pt_BR',  # LOCALE Ex.:(en_US, de_GE)\n            resource='path/to/my/resource/myresource.jar'\n        )\n\nTests\n~~~~~\n\nAll tests are in in the ``test`` directory. To run them\n\n::\n\n    python setup.py test\n\nPerformance\n-----------\n\nDepends on the complexity, amount of data and the resources of your\nmachine (let me know your use case).\n\nI have a report that generates a *Invoice* with a DB connection, images\nand multiple pages and it takes about **3/4 seconds** to process. I\nsuggest that you use a worker to generate the reports in the background.\n\nQuestions?\n----------\n\nOpen a `Issue <https://github.com/jadsonbr/pyreportjasper/issues>`__\n\nContribute\n----------\n\nContribute to the community Python, feel free to contribute, make a\nfork!!\n\nContributors\n~~~~~~~~~~~~\n\n-  `List of\n   contributors <https://github.com/jadsonbr/pyreportjasper/graphs/contributors>`__\n\nThanks\n------\n\nThanks to `Cenote GmbH <http://www.cenote.de/>`__ for the\n`JasperStarter <http://jasperstarter.sourceforge.net/>`__ tool.\n\n.. |Build Status| image:: https://travis-ci.org/PyReportJasper/pyreportjasper.svg?branch=master\n   :target: https://travis-ci.org/PyReportJasper/pyreportjasper\n.. |Coverage Status| image:: https://coveralls.io/repos/github/PyReportJasper/pyreportjasper/badge.svg?branch=master\n   :target: https://coveralls.io/github/PyReportJasper/pyreportjasper?branch=master\n.. |PyPI| image:: https://img.shields.io/pypi/l/pyreportjasper.svg\n   :target: https://github.com/PyReportJasper/pyreportjasper/blob/master/LICENSE\n", "description_content_type": "", "docs_url": "https://pythonhosted.org/pyreportjasper/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PyReportJasper/pyreportjasper", "keywords": "report jasper python", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pyreportjasper", "package_url": "https://pypi.org/project/pyreportjasper/", "platform": "any", "project_url": "https://pypi.org/project/pyreportjasper/", "project_urls": {"Homepage": "https://github.com/PyReportJasper/pyreportjasper"}, "release_url": "https://pypi.org/project/pyreportjasper/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "This package aims to be a solution to compile and process JasperReports (.jrxml & .jasper files).", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/PyReportJasper/pyreportjasper\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fbcb62377f28297f9efde0045838a8b9a66ba63/68747470733a2f2f7472617669732d63692e6f72672f50795265706f72744a61737065722f70797265706f72746a61737065722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/PyReportJasper/pyreportjasper?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fe7c1a264f4ce4b756b7ed20bf484151419a488/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f50795265706f72744a61737065722f70797265706f72746a61737065722f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://github.com/PyReportJasper/pyreportjasper/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/308c8b60f9d8c15e5fdf46c2b01ba4252b459775/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70797265706f72746a61737065722e737667\"></a></p>\n<p><strong>Is using Linux servers?</strong></p>\n<p>Do not forget to grant permission 777 for the directory where is the\npackage.</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package aims to be a solution to compile and process JasperReports\n(.jrxml &amp; .jasper files).</p>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>Did you ever had to create a good looking Invoice with a lot of fields\nfor your great web app or desktop?</p>\n<p>I had to, and the solutions out there were not perfect. Generating\n<em>HTML</em> + <em>CSS</em> to make a <em>PDF</em>? WTF? That doesn\u2019t make any sense! :)</p>\n<p>Then I found <strong>JasperReports</strong> the best open source solution for\nreporting.</p>\n</div>\n<div id=\"what-can-i-do-with-this\">\n<h3>What can I do with this?</h3>\n<p>Well, everything. JasperReports is a powerful tool for <strong>reporting</strong> and\n<strong>BI</strong>.</p>\n<p><strong>From their website:</strong></p>\n<blockquote>\nThe JasperReports Library is the world\u2019s most popular open source\nreporting engine. It is entirely written in Java and it is able to\nuse data coming from any kind of data source and produce\npixel-perfect documents that can be viewed, printed or exported in a\nvariety of document formats including HTML, PDF, Excel, OpenOffice\nand Word.</blockquote>\n<p>It is recommended using <a href=\"http://community.jaspersoft.com/project/jaspersoft-studio\" rel=\"nofollow\">Jaspersoft\nStudio</a> to\nbuild your reports, connect it to your datasource (ex:JSON, XML, MySQL,\nPOSTGRES, SQL Server), loop thru the results and output it to PDF, XLS,\nDOC, RTF, ODF, etc.</p>\n<p><em>Some examples of what you can do:</em></p>\n<ul>\n<li>Invoices</li>\n<li>Reports</li>\n<li>Listings</li>\n</ul>\n<p>Package to generate reports with\n<a href=\"http://community.jaspersoft.com/project/jasperreports-library\" rel=\"nofollow\">JasperReports</a>\nlibrary through\n<a href=\"https://bitbucket.org/cenote/jasperstarter/src\" rel=\"nofollow\">JasperStarter</a>\ncommand-line tool.</p>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Java JDK 1.8</li>\n<li>Python\n<a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow\">subprocess.run()</a>\nfunction</li>\n</ul>\n</div>\n<div id=\"optional\">\n<h2>Optional</h2>\n<ul>\n<li><a href=\"http://dev.mysql.com/downloads/connector/j/\" rel=\"nofollow\">Mysql JDBC</a> (if you\nwant to use database)</li>\n<li><a href=\"https://jdbc.postgresql.org/download.html\" rel=\"nofollow\">PostgreSQL JDBC</a> (if\nyou want to use database)</li>\n<li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=11774\" rel=\"nofollow\">SQL Server\nJDBC</a>\n(if you want to use database)</li>\n<li><a href=\"http://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html\" rel=\"nofollow\">Oracle\nJDBC</a>\n(if you want to use database)</li>\n<li><a href=\"https://mongodb.github.io/mongo-java-driver/\" rel=\"nofollow\">MongoDB JDBC</a> (if\nyou want to use database)</li>\n<li><a href=\"http://community.jaspersoft.com/project/jaspersoft-studio\" rel=\"nofollow\">Jaspersoft\nStudio</a>\n(to draw and compile your reports)</li>\n</ul>\n<div id=\"note\">\n<h3>Note</h3>\n<ul>\n<li>The JDBC driver of your database should be place in the\n<tt>pyreportjasper/jasperstarter/jdbc/</tt> directory.</li>\n<li>Using <strong>pyreportjasper</strong>, you can also access different types of data\nsources, including CSV, JDBC, JSON, NoSQL, XML, or your own custom\ndata source.</li>\n</ul>\n</div>\n<div id=\"java-jdk-and-jre\">\n<h3>Java (JDK and JRE)</h3>\n<p>Check if you already have Java installed:</p>\n<pre>$ javac -version\njavac version 1.8.0_101\n</pre>\n<p>If you get:</p>\n<pre>command not found: javac\n</pre>\n<p>Then install it with: (Ubuntu/Debian)</p>\n<pre>$ sudo apt-get install default-jdk\n</pre>\n<p>To install on: (centOS/Fedora)</p>\n<pre># yum install java-1.8.0-openjdk.x86_64\n</pre>\n<p>To install on windows visit the link-&gt;\n<a href=\"http://www.oracle.com/technetwork/pt/java/javase/downloads/jdk8-downloads-2133151.html\" rel=\"nofollow\">JDK</a>\nand look for the most appropriate version for your system.</p>\n<p>Now run the <tt>javac <span class=\"pre\">-version</span></tt> again and check if the output is ok.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install <a href=\"https://pypi.python.org/pypi/pyreportjasper\" rel=\"nofollow\">PyPI</a> if you\ndon\u2019t have it.</p>\n<pre>pip install pyreportjasper\n</pre>\n<div id=\"using-the-code\">\n<h3>Using the code</h3>\n<p>Pyreport is actively developed in GitHub, where code is <a href=\"https://github.com/jadsonbr/pyreportjasper\" rel=\"nofollow\">always\navailable</a>.</p>\n<p>You can clone the public repository:</p>\n<pre>git clone git://github.com/jadsonbr/pyreportjasper.git\n</pre>\n<p>Download <a href=\"https://github.com/jadsonbr/pyreportjasper/tarball/master\" rel=\"nofollow\">tar\nfile</a>:</p>\n<pre>curl -OL https://github.com/jadsonbr/pyreportjasper/tarball/master\n</pre>\n<p>Or, Download the <a href=\"https://github.com/jadsonbr/pyreportjasper/zipball/master\" rel=\"nofollow\">zip\nfile</a>:</p>\n<pre>curl -OL https://github.com/jadsonbr/pyreportjasper/zipball/master\n</pre>\n<p>Unzip the downloaded file</p>\n<p>Navigate to the unzipped folder</p>\n<p>Once you have a copy of the code, you can easily include it in your\nPytohn package, or install it in your site-packages directory:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"the-hello-world-example\">\n<h3>The <em>Hello World</em> example.</h3>\n<p>Go to the examples directory in the root of the package Open the\n<tt>test/examples/hello_world.jrxml</tt> file with Jaspersoft Studio or with\nyour favorite text editor and take a look at the source code.</p>\n<div id=\"compiling\">\n<h4>Compiling</h4>\n<p>First we need to compile our <tt>JRXML</tt> file into a <tt>JASPER</tt> binary\nfile. We just have to do this one time.</p>\n<p><strong>Note 1:</strong> You don\u2019t need to do this step if you are using <em>Jaspersoft\nStudio</em>. You can compile directly within the program.</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">compiling</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/hello_world.jrxml'</span>\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">)</span>\n</pre>\n<p>This commando will compile the <tt>hello_world.jrxml</tt> source file to a\n<tt>hello_world.jasper</tt> file.</p>\n</div>\n<div id=\"processing\">\n<h4>Processing</h4>\n<p>Now lets process the report that we compile before:</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">processing</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/hello_world.jrxml'</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/examples'</span>\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n        <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rtf\"</span><span class=\"p\">])</span>\n</pre>\n<p>Now check the examples folder! :) Great right? You now have 2 files,\n<tt>hello_world.pdf</tt> and <tt>hello_world.rtf</tt>.</p>\n<p>Check the <em>API</em> of the <tt>compile</tt> and <tt>process</tt> functions in the file\n<tt>pyreportjasper/jasperpy.py</tt> file.</p>\n</div>\n<div id=\"listing-parameters\">\n<h4>Listing Parameters</h4>\n<p>Querying the jasper file to examine parameters available in the given\njasper report file:</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">listing_parameters</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/hello_world_params.jrxml'</span>\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">list_parameters</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"advanced-example-using-a-database\">\n<h3>Advanced example - using a database</h3>\n<p>We can also specify parameters for connecting to database:</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">platform</span> <span class=\"kn\">import</span> <span class=\"n\">python_version</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">advanced_example_using_database</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/hello_world.jrxml'</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/examples'</span>\n    <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'driver'</span><span class=\"p\">:</span> <span class=\"s1\">'postgres'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_USERNAME'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_PASSWORD'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_HOST'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_DATABASE'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schema'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_SCHEMA'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n        <span class=\"n\">input_file</span><span class=\"p\">,</span>\n        <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">,</span>\n        <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rtf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"xml\"</span><span class=\"p\">],</span>\n        <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'python_version'</span><span class=\"p\">:</span> <span class=\"n\">python_version</span><span class=\"p\">()},</span>\n        <span class=\"n\">db_connection</span><span class=\"o\">=</span><span class=\"n\">con</span><span class=\"p\">,</span>\n        <span class=\"n\">locale</span><span class=\"o\">=</span><span class=\"s1\">'pt_BR'</span>  <span class=\"c1\"># LOCALE Ex.:(en_US, de_GE)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p><strong>Note 2:</strong></p>\n<p>For a complete list of locales see <a href=\"http://www.oracle.com/technetwork/java/javase/java8locales-2095355.html\" rel=\"nofollow\">Supported\nLocales</a></p>\n</div>\n<div id=\"reports-from-a-xml\">\n<h3>Reports from a XML</h3>\n<p>See how easy it is to generate a report with a source an XML file:</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">xml_to_pdf</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/CancelAck.jrxml'</span>\n\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/_CancelAck'</span>\n\n    <span class=\"n\">data_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n        <span class=\"s1\">'/examples/CancelAck.xml'</span>\n\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n        <span class=\"n\">input_file</span><span class=\"p\">,</span>\n        <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">,</span>\n        <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">],</span>\n        <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n        <span class=\"n\">db_connection</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'data_file'</span><span class=\"p\">:</span> <span class=\"n\">data_file</span><span class=\"p\">,</span>\n            <span class=\"s1\">'driver'</span><span class=\"p\">:</span> <span class=\"s1\">'xml'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'xml_xpath'</span><span class=\"p\">:</span> <span class=\"s1\">'/CancelResponse/CancelResult/ID'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">locale</span><span class=\"o\">=</span><span class=\"s1\">'pt_BR'</span>  <span class=\"c1\"># LOCALE Ex.:(en_US, de_GE)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result is the file below.'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">output</span> <span class=\"o\">+</span> <span class=\"s1\">'.pdf'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"reports-from-a-json-file\">\n<h3>Reports from a JSON File</h3>\n<p>See how easy it is to generate a report with a source an JSON file:</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">json_to_pdf</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/json.jrxml'</span>\n\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/_Contacts'</span>\n    <span class=\"n\">json_query</span> <span class=\"o\">=</span> <span class=\"s1\">'contacts.person'</span>\n\n    <span class=\"n\">data_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n        <span class=\"s1\">'/examples/contacts.json'</span>\n\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n        <span class=\"n\">input_file</span><span class=\"p\">,</span>\n        <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">,</span>\n        <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">],</span>\n        <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n        <span class=\"n\">db_connection</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'data_file'</span><span class=\"p\">:</span> <span class=\"n\">data_file</span><span class=\"p\">,</span>\n            <span class=\"s1\">'driver'</span><span class=\"p\">:</span> <span class=\"s1\">'json'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'json_query'</span><span class=\"p\">:</span> <span class=\"n\">json_query</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">locale</span><span class=\"o\">=</span><span class=\"s1\">'pt_BR'</span>  <span class=\"c1\"># LOCALE Ex.:(en_US, de_GE)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result is the file below.'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">output</span> <span class=\"o\">+</span> <span class=\"s1\">'.pdf'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note 3:</strong></p>\n<p>JasperReports can process JSON files using either the <a href=\"http://jasperreports.sourceforge.net/sample.reference/jsondatasource/index.html\" rel=\"nofollow\">original JSON DataSource</a>\nor the <a href=\"http://jasperreports.sourceforge.net/sample.reference/jsonqldatasource/index.html\" rel=\"nofollow\">newer JSONQL Data Source</a>.\nRefer to the JSONQL DataSource documentation for the differences. The example above\nuses the JSON DataSource. To use the enhanced capabilities of the JSONQL DataSource\ninstead use:</p>\n<ul>\n<li>the <tt>jsonql.jrxml</tt> input file</li>\n<li>the <tt>jsonql</tt> driver setting</li>\n<li>the <tt>jsonql_query</tt> query setting</li>\n</ul>\n<p>by changing these three parts of the example:</p>\n<pre><span class=\"o\">...</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/jsonql.jrxml'</span>\n<span class=\"o\">...</span>\n        <span class=\"n\">db_connection</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"o\">...</span>\n            <span class=\"s1\">'driver'</span><span class=\"p\">:</span> <span class=\"s1\">'jsonql'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'jsonql_query'</span><span class=\"p\">:</span> <span class=\"n\">json_query</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n</pre>\n</div>\n<div id=\"subreport-example\">\n<h3>Subreport Example</h3>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">subreport_example</span><span class=\"p\">():</span>\n\n    <span class=\"n\">input_file_header</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                        <span class=\"s1\">'/examples/subreports/header.jrxml'</span>\n\n    <span class=\"n\">input_file_details</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                         <span class=\"s1\">'/examples/subreports/details.jrxml'</span>\n\n    <span class=\"n\">input_file_main</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                      <span class=\"s1\">'/examples/subreports/main.jrxml'</span>\n\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/subreports/main.jasper'</span>\n\n    <span class=\"n\">data_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                <span class=\"s1\">'/examples/subreports/contacts.xml'</span>\n\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/examples/subreports/'</span>\n\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">input_file_header</span><span class=\"p\">)</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">input_file_details</span><span class=\"p\">)</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">input_file_main</span><span class=\"p\">)</span>\n\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n                <span class=\"n\">input_file</span><span class=\"p\">,</span>\n                <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">,</span>\n                <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">],</span>\n                <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n                <span class=\"n\">db_connection</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                    <span class=\"s1\">'data_file'</span><span class=\"p\">:</span> <span class=\"n\">data_file</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'driver'</span><span class=\"p\">:</span> <span class=\"s1\">'xml'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'xml_xpath'</span><span class=\"p\">:</span> <span class=\"s1\">'\"/\"'</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n                <span class=\"n\">locale</span><span class=\"o\">=</span><span class=\"s1\">'pt_BR'</span><span class=\"p\">,</span>  <span class=\"c1\"># LOCALE Ex.:(en_US, de_GE)</span>\n                <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s1\">'examples/subreports/'</span>\n            <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"flask-example\">\n<h3>Flask Example</h3>\n<p>Get parameters via URL and filter them if they are valid parameters for\nthe <em>jrxml</em> file:</p>\n<p>After runnig you could visit\n<a href=\"http://localhost:5000/?myString=My%20Beautiful%20String&amp;myInt=1&amp;myDate=2017-01-01&amp;this_parameter=ignored\" rel=\"nofollow\">http://localhost:5000/?myString=My%20Beautiful%20String&amp;myInt=1&amp;myDate=2017-01-01&amp;this_parameter=ignored</a></p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">make_response</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">input_file</span> <span class=\"o\">=</span>  <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/hello_world_params.jrxml'</span>\n<span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">compiling</span><span class=\"p\">():</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">processing</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/examples'</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n        <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"n\">parameters</span><span class=\"p\">,</span> <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">filter_parameters</span><span class=\"p\">(</span><span class=\"n\">request_args</span><span class=\"p\">):</span>\n    <span class=\"n\">list_parameters</span> <span class=\"o\">=</span> <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">list_parameters</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">)</span>\n    <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">list_parameters</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">request_args</span><span class=\"p\">:</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request_args</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">parameters</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_route</span><span class=\"p\">():</span>\n  <span class=\"n\">request_args</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n  <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">filter_parameters</span><span class=\"p\">(</span><span class=\"n\">request_args</span><span class=\"p\">)</span>\n\n  <span class=\"n\">processing</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n      <span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_resource</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/examples/hello_world_params.pdf'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n          <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n      <span class=\"n\">resposta</span> <span class=\"o\">=</span> <span class=\"n\">make_response</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n      <span class=\"n\">resposta</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'application/pdf; charset=utf-8'</span>\n      <span class=\"n\">resposta</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'Content-Disposition'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'inline; filename=hello_world_params.pdf'</span>\n      <span class=\"k\">return</span> <span class=\"n\">resposta</span>\n  <span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"n\">make_response</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;h1&gt;403 Forbidden&lt;/h1&gt;\"</span><span class=\"p\">,</span> <span class=\"mi\">403</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">compiling</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"working-with-resources-i18n-resource-bundles-icons-or-images\">\n<h3>Working with resources (i18n resource bundles, icons or images)</h3>\n<p>If you need provide resource to report, you can do that by set parameter\n<tt>resource</tt> in method <tt>jasper.process</tt>. More details <a href=\"http://jasperstarter.cenote.de/usage.html#Reports_with_resources\" rel=\"nofollow\">jasper starter\nmanual\npage</a>.</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">platform</span> <span class=\"kn\">import</span> <span class=\"n\">python_version</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyreportjasper</span> <span class=\"kn\">import</span> <span class=\"n\">JasperPy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">advanced_example_using_database</span><span class=\"p\">():</span>\n    <span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> \\\n                 <span class=\"s1\">'/examples/hello_world.jrxml'</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">'/output/examples'</span>\n    <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'driver'</span><span class=\"p\">:</span> <span class=\"s1\">'postgres'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_USERNAME'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_PASSWORD'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_HOST'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_DATABASE'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schema'</span><span class=\"p\">:</span> <span class=\"s1\">'DB_SCHEMA'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">jasper</span> <span class=\"o\">=</span> <span class=\"n\">JasperPy</span><span class=\"p\">()</span>\n    <span class=\"n\">jasper</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span>\n        <span class=\"n\">input_file</span><span class=\"p\">,</span>\n        <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">,</span>\n        <span class=\"n\">format_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rtf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"xml\"</span><span class=\"p\">],</span>\n        <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'python_version'</span><span class=\"p\">:</span> <span class=\"n\">python_version</span><span class=\"p\">()},</span>\n        <span class=\"n\">db_connection</span><span class=\"o\">=</span><span class=\"n\">con</span><span class=\"p\">,</span>\n        <span class=\"n\">locale</span><span class=\"o\">=</span><span class=\"s1\">'pt_BR'</span><span class=\"p\">,</span>  <span class=\"c1\"># LOCALE Ex.:(en_US, de_GE)</span>\n        <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s1\">'path/to/my/resource/myresource.jar'</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>All tests are in in the <tt>test</tt> directory. To run them</p>\n<pre>python setup.py test\n</pre>\n</div>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>Depends on the complexity, amount of data and the resources of your\nmachine (let me know your use case).</p>\n<p>I have a report that generates a <em>Invoice</em> with a DB connection, images\nand multiple pages and it takes about <strong>3/4 seconds</strong> to process. I\nsuggest that you use a worker to generate the reports in the background.</p>\n</div>\n<div id=\"questions\">\n<h2>Questions?</h2>\n<p>Open a <a href=\"https://github.com/jadsonbr/pyreportjasper/issues\" rel=\"nofollow\">Issue</a></p>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>Contribute to the community Python, feel free to contribute, make a\nfork!!</p>\n<div id=\"contributors\">\n<h3>Contributors</h3>\n<ul>\n<li><a href=\"https://github.com/jadsonbr/pyreportjasper/graphs/contributors\" rel=\"nofollow\">List of\ncontributors</a></li>\n</ul>\n</div>\n</div>\n<div id=\"thanks\">\n<h2>Thanks</h2>\n<p>Thanks to <a href=\"http://www.cenote.de/\" rel=\"nofollow\">Cenote GmbH</a> for the\n<a href=\"http://jasperstarter.sourceforge.net/\" rel=\"nofollow\">JasperStarter</a> tool.</p>\n</div>\n\n          </div>"}, "last_serial": 4482373, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "419088e7fcee379e4da57b35573cfe62", "sha256": "9600ccae27d6859323a53a012e1623d9aeef3dd481e02d6849e371bb83f84517"}, "downloads": -1, "filename": "pyreportjasper-0.1.3.tar.gz", "has_sig": false, "md5_digest": "419088e7fcee379e4da57b35573cfe62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42162330, "upload_time": "2016-11-24T03:32:42", "upload_time_iso_8601": "2016-11-24T03:32:42.941973Z", "url": "https://files.pythonhosted.org/packages/45/62/d00fa9f183fb0424ae4b46839c9564659242ad5f051bb7d36926dc10b4e1/pyreportjasper-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "a97a0e7bc37567f2c61205658df07fd4", "sha256": "46632e7618ab3a587da7e388148b0227533c793852fba3eb3625610e99c98b58"}, "downloads": -1, "filename": "pyreportjasper-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a97a0e7bc37567f2c61205658df07fd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3513, "upload_time": "2017-04-05T20:31:33", "upload_time_iso_8601": "2017-04-05T20:31:33.934202Z", "url": "https://files.pythonhosted.org/packages/ef/be/717309ad54702581670ba4d2668c271e3237a7aa650f120795df50519b1d/pyreportjasper-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "76185131fab17aeb91a62a5a0f39c961", "sha256": "427c26c289ba3595f0315cac9e83e920124b67d1767b2185d4e9521045a41eb6"}, "downloads": -1, "filename": "pyreportjasper-0.1.6.tar.gz", "has_sig": false, "md5_digest": "76185131fab17aeb91a62a5a0f39c961", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42774092, "upload_time": "2017-04-07T20:07:05", "upload_time_iso_8601": "2017-04-07T20:07:05.911256Z", "url": "https://files.pythonhosted.org/packages/11/54/69f0284e429caf20811dccc9931141489dd15a04683385e5d220d8917b20/pyreportjasper-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "0c014e0cd9c7da3d1712061c0421d4b9", "sha256": "c9dc2192b25d9447856a74c9cad7f5e7afd18c453ba2570343c4f8802d260b94"}, "downloads": -1, "filename": "pyreportjasper-0.1.7.tar.gz", "has_sig": false, "md5_digest": "0c014e0cd9c7da3d1712061c0421d4b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54407687, "upload_time": "2017-06-09T02:46:34", "upload_time_iso_8601": "2017-06-09T02:46:34.007320Z", "url": "https://files.pythonhosted.org/packages/88/cd/f0cff257e1fa4476e9b6328d745923392f483a0a7d1e7f5446165fbdd84d/pyreportjasper-0.1.7.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f81503f4b348c52901e4fe0be5fd7cc7", "sha256": "47c76c2618570aae4cf429bf524598490bd4e49bf77b060c5f0fcfa9d3e4b3ab"}, "downloads": -1, "filename": "pyreportjasper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f81503f4b348c52901e4fe0be5fd7cc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79690911, "upload_time": "2018-05-22T16:37:41", "upload_time_iso_8601": "2018-05-22T16:37:41.020544Z", "url": "https://files.pythonhosted.org/packages/55/5d/454639d966fb3dc65f2e6c69120d86ac02dc2b3fb8b8a4c4e09b834084ac/pyreportjasper-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "7d4d5dd9159f6d8a39a924b9068ddad2", "sha256": "8e7168e4a75518db66bc720d2359b789967eeb8e06fc7514e4825438864eb6a8"}, "downloads": -1, "filename": "pyreportjasper-1.0.2.tar.gz", "has_sig": false, "md5_digest": "7d4d5dd9159f6d8a39a924b9068ddad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77009096, "upload_time": "2018-11-13T16:26:11", "upload_time_iso_8601": "2018-11-13T16:26:11.106639Z", "url": "https://files.pythonhosted.org/packages/25/64/d73f0c63c637251c4438dc68833157dcc6c31ef528fe2a6c3460da149946/pyreportjasper-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d4d5dd9159f6d8a39a924b9068ddad2", "sha256": "8e7168e4a75518db66bc720d2359b789967eeb8e06fc7514e4825438864eb6a8"}, "downloads": -1, "filename": "pyreportjasper-1.0.2.tar.gz", "has_sig": false, "md5_digest": "7d4d5dd9159f6d8a39a924b9068ddad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77009096, "upload_time": "2018-11-13T16:26:11", "upload_time_iso_8601": "2018-11-13T16:26:11.106639Z", "url": "https://files.pythonhosted.org/packages/25/64/d73f0c63c637251c4438dc68833157dcc6c31ef528fe2a6c3460da149946/pyreportjasper-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:53 2020"}