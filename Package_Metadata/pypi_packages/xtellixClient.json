{"info": {"author": "Dr Mark Amo-Boateng", "author_email": "m.amoboateng@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python Client to Connect Solve-Hub xtellix Optimization Server\n## Draft Version 0.0.1\nThis is a simple example usage of how to initialize the Optimization Engine Server and Perform Optimization on your objective functions. *The remaining documents is in two (2) parts: **Section A: Initializing Server**; and  **Section B: Running the Optimization Loop**.*\n\n# SECTION A\n## PREREQUISITES: INSTALL KEY LIBRARIES & INITIALIZE SERVER\n**Install xtellixClient using pip command [https://pypi.org/project/xtellixClient-0.0.1/](https://pypi.org/project/xtellixClient/)**\nRead more at [Github](https://github.com/markamo/xtellixClient)\n```\npip install xtellixClient\n```\n\n### STEP 1A: IMPORT XTELLIX CLIENT LIBRARIES\nImport the xtellixClient module\n```python\nimport xtellixClient.xtellixClient as xm\n```\n\n### STEP 1B: IMPORT OTHER KEY LIBRARIES\n```python\nimport math\nimport numpy as np\nfrom tqdm import trange\nimport time\n```\n\n### STEP 2: OBJECTIVE FUNCTION\n**Define your cost or objective function**\nHere we define the Griewank function as en example. More infomation about the Griewank benchmark function can be found on the [web](https://www.sfu.ca/~ssurjano/griewank.html). \n\n```python\ndef griewank_function(x, dim):\n    \"\"\"Griewank's function \tmultimodal, symmetric, inseparable \"\"\"\n    sumPart = 0\n    prodPart = 1\n    for i in range(dim):\n        sumPart += x[i]**2\n        prodPart *= math.cos(float(x[i]) / math.sqrt(i+1))\n    return 1 + (float(sumPart)/4000.0) - float(prodPart)  \n```\n\n### OPTIONAL STEP 2B: COST FUNCTION WRAPPERS FOR THE OBJECTIVE FUNCTION\nTo make it easier to dynamically call other benchmark functions without changing much of the code, we recommend defining a general purpose wrapper to be called during the optimization process \n\n```python\ndef cost_function(newSuggestions, dim):\n    \"\"\"Generic function wrapper for the cost function \"\"\"\n    return griewank_function(newSuggestions, dim)\n```\n\n### STEP 3: INITIALIZE CONNECTION TO THE OPTIMIZATION SERVER\nConnect to your unique optimization server using your provided credentials: **server_endpoint**, and **client_secret_token**. These are two are used to established a secured successful connection before you can begin any optimization project. Watch for server connection errors and contact the support team for assistance\n\n```python\n#set server_endpoint and client_secret_token as variables\nsever_endpoint = \"http://127.0.0.1:5057\"\nclient_secret = 1234567890\n\n#Initialize connection and watch for errors\nxm.connect(sever_endpoint, client_secret)\n```\n\n### STEP 4: INITIALIZE THE OPTIMIZATION ENGINE\nLet's begin by setting up all the initial parameters for the objective function, then the optimization engine\n\n**a. Initial parameters for the Cost Function**\n```python\nubound=600  #upper bound of the Griewank function\nlbound=-600 #lower bound of the Griewank function\ndim=100      #problem dimension\n\n```\n\n**b. Optimization Engine Settings**\n```python\ninitMetric = 30000000 #largest possible cost function value - arbitrary very large/low number for minimization/maximization problems respectively\nmaxIter=dim*200 # maximum number of iterations. We recommend 100 to 200 times the dimension of the problem. and 10 - 50 times for intensive CPU problems\nmaxSamples=8 # maximum number of default stochastic sampling\niseedId=0 #Seed value for random number generator\nminOrMax = True  ### True for MINIMIZATION | False for MAXIMIZATION\n```\n\n**c. Prepare the initial parameter value**\n```python\nx0 = np.ones([dim]) * lbound \n```\n**d. Compute the first objective function**\n```python\nfobj = cost_function(x0, dim)\ninitMetric = fobj #Optional: use the first value as initial metric\nprint(\"Initial Objective Function Value = \",fobj)\n```\n\n**e. Initialize Optimization Engine**\n```python\nxm.initializeOptimizer(initMetric,ubound, lbound, dim, maxIter, maxSamples, x0, iseedId,minOrMax)\n```\n\n\n# SECTION B \n## THE OPTIMIZATION LOOP: SOLVING YOUR OPTIMIZATION PROBLEM\n### 3 SIMPLE STEPS: GET -> COMPUTE -> UPDATE\nSolving the optimizatin problem (here: Griewank function) is done in the following three (3) steps: \n**a. Get new suggested parameters from the optimization server**\n```python\nnewSuggestions = xm.getParameters()\n\n```\n**b. Compute new cost function based on the new parameters**\n```python\nfobj = cost_function(newSuggestions, dim)\n```\n\n**c. Send new cost function value to the optimization server**\n```python\nxm.updateObjectiveFunctionValue(fobj)\n```\n\n**d. Repeat the whole process until optimization is achieved**\nThe whole process can be summarized below: \n\n#### The Optimization Loop with comments\n```python\n\n#OPtional Step: Use TQDM Library for nice progress bar \nwith trange(maxIter) as t:\n    for i in t:\n        ##a: Get parameters from Optimization Engine\n        newSuggestions = xm.getParameters()\n\n        ##b: Compute new cost function value based on the parameters\n        fobj = cost_function(newSuggestions, dim)\n\n        ##c: Send new cost function value to optimization server\n        xm.updateObjectiveFunctionValue(fobj)\n\n        ##Optional step: Check the progress of the optmization\n        obj,pareato,_,svrit = xm.getProgress()        \n\n        ###Optional step: Update the progress bar\n        t.set_description('Function Eval %i' % i)\n        t.set_postfix(current=obj, best=pareato)\n\n```\n\n#### The Optimization Loop WITHOUT comments\nWe see the simplicity of the process without the comments\n```python\nfor i in range(maxIter):\n    newSuggestions = xm.getParameters()        \n    fobj = cost_function(newSuggestions, dim)        \n    xm.updateObjectiveFunctionValue(fobj)\n```\n\n### GET FINAL PARAMETERS FROM SERVER\n*Get the optimized parameters*\n```python\nx0 = xm.getParameters()\n\n```\n*Or Get the optimized parameter (force download a fresh copy from the server)*\n```python\nx0 = xm.getParameters(False)\n\n```\n\n*Calculate the final objective function value*\n```python\nfobj = cost_function(x0, dim)\n```\n*Print final objective function value and optimized parameters*\n```python\nprint(fobj)\nprint(x0)\n```\n\n## The full code for the above example\n```python\nimport xtellixClient.xtellixClient as xm\nimport math\nimport numpy as np\nfrom tqdm import trange\n\ndef griewank_function(x, dim):\n    \"\"\"Griewank's function \tmultimodal, symmetric, inseparable \"\"\"\n    sumPart = 0\n    prodPart = 1\n    for i in range(dim):\n        sumPart += x[i]**2\n        prodPart *= math.cos(float(x[i]) / math.sqrt(i+1))\n    return 1 + (float(sumPart)/4000.0) - float(prodPart) \n\ndef cost_function(newSuggestions, dim):\n    \"\"\"Generic function wrapper for the cost function \"\"\"\n    return griewank_function(newSuggestions, dim)\n\n#set server_endpoint and client_secret_token as variables\nsever_endpoint = \"http://127.0.0.1:5057\"\nclient_secret = 1234567890\n\n#Initialize connection and watch for errors\nxm.connect(sever_endpoint, client_secret)\n\nubound=600  \nlbound=-600 \ndim=100\ninitMetric = 30000000 \nmaxIter=dim*200 \nmaxSamples=8 \niseedId=0 \nminOrMax = True  ## True for MINIMIZATION | False for MAXIMIZATION\n\nx0 = np.ones([dim]) * lbound \nfobj = cost_function(x0, dim)\nprint(\"Initial Objective Function Value = \",fobj)\n\nxm.initializeOptimizer(initMetric,ubound, lbound, dim, maxIter, maxSamples, x0, iseedId,minOrMax)\n\n##OPTIMIZATION LOOP\nfor i in range(maxIter):\n    newSuggestions = xm.getParameters()        \n    fobj = cost_function(newSuggestions, dim)        \n    xm.updateObjectiveFunctionValue(fobj)\n\n    ##Optional step: Check the progress of the optmization\n    obj,pareato,feval,_ = xm.getProgress()   \n    print(\"Feval = \", feval, \" Best Objective = \", pareato, \" Current Objective = \", obj)\n\nx0 = xm.getParameters(False)\nfobj = cost_function(x0, dim)\nprint(fobj)\nprint(x0)\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/markamo/xtellixClient", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "xtellixClient", "package_url": "https://pypi.org/project/xtellixClient/", "platform": "", "project_url": "https://pypi.org/project/xtellixClient/", "project_urls": {"Homepage": "https://github.com/markamo/xtellixClient"}, "release_url": "https://pypi.org/project/xtellixClient/0.0.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A Python Client for Connecting to xtellix Optimization Servers using REST API", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Client to Connect Solve-Hub xtellix Optimization Server</h1>\n<h2>Draft Version 0.0.1</h2>\n<p>This is a simple example usage of how to initialize the Optimization Engine Server and Perform Optimization on your objective functions. <em>The remaining documents is in two (2) parts: <strong>Section A: Initializing Server</strong>; and  <strong>Section B: Running the Optimization Loop</strong>.</em></p>\n<h1>SECTION A</h1>\n<h2>PREREQUISITES: INSTALL KEY LIBRARIES &amp; INITIALIZE SERVER</h2>\n<p><strong>Install xtellixClient using pip command <a href=\"https://pypi.org/project/xtellixClient/\" rel=\"nofollow\">https://pypi.org/project/xtellixClient-0.0.1/</a></strong>\nRead more at <a href=\"https://github.com/markamo/xtellixClient\" rel=\"nofollow\">Github</a></p>\n<pre><code>pip install xtellixClient\n</code></pre>\n<h3>STEP 1A: IMPORT XTELLIX CLIENT LIBRARIES</h3>\n<p>Import the xtellixClient module</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xtellixClient.xtellixClient</span> <span class=\"k\">as</span> <span class=\"nn\">xm</span>\n</pre>\n<h3>STEP 1B: IMPORT OTHER KEY LIBRARIES</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">trange</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n</pre>\n<h3>STEP 2: OBJECTIVE FUNCTION</h3>\n<p><strong>Define your cost or objective function</strong>\nHere we define the Griewank function as en example. More infomation about the Griewank benchmark function can be found on the <a href=\"https://www.sfu.ca/%7Essurjano/griewank.html\" rel=\"nofollow\">web</a>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">griewank_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Griewank's function \tmultimodal, symmetric, inseparable \"\"\"</span>\n    <span class=\"n\">sumPart</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">prodPart</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"p\">):</span>\n        <span class=\"n\">sumPart</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n        <span class=\"n\">prodPart</span> <span class=\"o\">*=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">sumPart</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">4000.0</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">prodPart</span><span class=\"p\">)</span>  \n</pre>\n<h3>OPTIONAL STEP 2B: COST FUNCTION WRAPPERS FOR THE OBJECTIVE FUNCTION</h3>\n<p>To make it easier to dynamically call other benchmark functions without changing much of the code, we recommend defining a general purpose wrapper to be called during the optimization process</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">cost_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Generic function wrapper for the cost function \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">griewank_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n</pre>\n<h3>STEP 3: INITIALIZE CONNECTION TO THE OPTIMIZATION SERVER</h3>\n<p>Connect to your unique optimization server using your provided credentials: <strong>server_endpoint</strong>, and <strong>client_secret_token</strong>. These are two are used to established a secured successful connection before you can begin any optimization project. Watch for server connection errors and contact the support team for assistance</p>\n<pre><span class=\"c1\">#set server_endpoint and client_secret_token as variables</span>\n<span class=\"n\">sever_endpoint</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://127.0.0.1:5057\"</span>\n<span class=\"n\">client_secret</span> <span class=\"o\">=</span> <span class=\"mi\">1234567890</span>\n\n<span class=\"c1\">#Initialize connection and watch for errors</span>\n<span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sever_endpoint</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"p\">)</span>\n</pre>\n<h3>STEP 4: INITIALIZE THE OPTIMIZATION ENGINE</h3>\n<p>Let's begin by setting up all the initial parameters for the objective function, then the optimization engine</p>\n<p><strong>a. Initial parameters for the Cost Function</strong></p>\n<pre><span class=\"n\">ubound</span><span class=\"o\">=</span><span class=\"mi\">600</span>  <span class=\"c1\">#upper bound of the Griewank function</span>\n<span class=\"n\">lbound</span><span class=\"o\">=-</span><span class=\"mi\">600</span> <span class=\"c1\">#lower bound of the Griewank function</span>\n<span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">100</span>      <span class=\"c1\">#problem dimension</span>\n</pre>\n<p><strong>b. Optimization Engine Settings</strong></p>\n<pre><span class=\"n\">initMetric</span> <span class=\"o\">=</span> <span class=\"mi\">30000000</span> <span class=\"c1\">#largest possible cost function value - arbitrary very large/low number for minimization/maximization problems respectively</span>\n<span class=\"n\">maxIter</span><span class=\"o\">=</span><span class=\"n\">dim</span><span class=\"o\">*</span><span class=\"mi\">200</span> <span class=\"c1\"># maximum number of iterations. We recommend 100 to 200 times the dimension of the problem. and 10 - 50 times for intensive CPU problems</span>\n<span class=\"n\">maxSamples</span><span class=\"o\">=</span><span class=\"mi\">8</span> <span class=\"c1\"># maximum number of default stochastic sampling</span>\n<span class=\"n\">iseedId</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"c1\">#Seed value for random number generator</span>\n<span class=\"n\">minOrMax</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\">### True for MINIMIZATION | False for MAXIMIZATION</span>\n</pre>\n<p><strong>c. Prepare the initial parameter value</strong></p>\n<pre><span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"n\">dim</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">lbound</span> \n</pre>\n<p><strong>d. Compute the first objective function</strong></p>\n<pre><span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n<span class=\"n\">initMetric</span> <span class=\"o\">=</span> <span class=\"n\">fobj</span> <span class=\"c1\">#Optional: use the first value as initial metric</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Initial Objective Function Value = \"</span><span class=\"p\">,</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n</pre>\n<p><strong>e. Initialize Optimization Engine</strong></p>\n<pre><span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">initializeOptimizer</span><span class=\"p\">(</span><span class=\"n\">initMetric</span><span class=\"p\">,</span><span class=\"n\">ubound</span><span class=\"p\">,</span> <span class=\"n\">lbound</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">,</span> <span class=\"n\">maxIter</span><span class=\"p\">,</span> <span class=\"n\">maxSamples</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">iseedId</span><span class=\"p\">,</span><span class=\"n\">minOrMax</span><span class=\"p\">)</span>\n</pre>\n<h1>SECTION B</h1>\n<h2>THE OPTIMIZATION LOOP: SOLVING YOUR OPTIMIZATION PROBLEM</h2>\n<h3>3 SIMPLE STEPS: GET -&gt; COMPUTE -&gt; UPDATE</h3>\n<p>Solving the optimizatin problem (here: Griewank function) is done in the following three (3) steps:\n<strong>a. Get new suggested parameters from the optimization server</strong></p>\n<pre><span class=\"n\">newSuggestions</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">()</span>\n</pre>\n<p><strong>b. Compute new cost function based on the new parameters</strong></p>\n<pre><span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n</pre>\n<p><strong>c. Send new cost function value to the optimization server</strong></p>\n<pre><span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">updateObjectiveFunctionValue</span><span class=\"p\">(</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n</pre>\n<p><strong>d. Repeat the whole process until optimization is achieved</strong>\nThe whole process can be summarized below:</p>\n<h4>The Optimization Loop with comments</h4>\n<pre><span class=\"c1\">#OPtional Step: Use TQDM Library for nice progress bar </span>\n<span class=\"k\">with</span> <span class=\"n\">trange</span><span class=\"p\">(</span><span class=\"n\">maxIter</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n        <span class=\"c1\">##a: Get parameters from Optimization Engine</span>\n        <span class=\"n\">newSuggestions</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">()</span>\n\n        <span class=\"c1\">##b: Compute new cost function value based on the parameters</span>\n        <span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">##c: Send new cost function value to optimization server</span>\n        <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">updateObjectiveFunctionValue</span><span class=\"p\">(</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">##Optional step: Check the progress of the optmization</span>\n        <span class=\"n\">obj</span><span class=\"p\">,</span><span class=\"n\">pareato</span><span class=\"p\">,</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">svrit</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getProgress</span><span class=\"p\">()</span>        \n\n        <span class=\"c1\">###Optional step: Update the progress bar</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">set_description</span><span class=\"p\">(</span><span class=\"s1\">'Function Eval </span><span class=\"si\">%i</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">set_postfix</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">best</span><span class=\"o\">=</span><span class=\"n\">pareato</span><span class=\"p\">)</span>\n</pre>\n<h4>The Optimization Loop WITHOUT comments</h4>\n<p>We see the simplicity of the process without the comments</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">maxIter</span><span class=\"p\">):</span>\n    <span class=\"n\">newSuggestions</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">()</span>        \n    <span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>        \n    <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">updateObjectiveFunctionValue</span><span class=\"p\">(</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n</pre>\n<h3>GET FINAL PARAMETERS FROM SERVER</h3>\n<p><em>Get the optimized parameters</em></p>\n<pre><span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">()</span>\n</pre>\n<p><em>Or Get the optimized parameter (force download a fresh copy from the server)</em></p>\n<pre><span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p><em>Calculate the final objective function value</em></p>\n<pre><span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n</pre>\n<p><em>Print final objective function value and optimized parameters</em></p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">)</span>\n</pre>\n<h2>The full code for the above example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xtellixClient.xtellixClient</span> <span class=\"k\">as</span> <span class=\"nn\">xm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">trange</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">griewank_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Griewank's function \tmultimodal, symmetric, inseparable \"\"\"</span>\n    <span class=\"n\">sumPart</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">prodPart</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"p\">):</span>\n        <span class=\"n\">sumPart</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n        <span class=\"n\">prodPart</span> <span class=\"o\">*=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">sumPart</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">4000.0</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">prodPart</span><span class=\"p\">)</span> \n\n<span class=\"k\">def</span> <span class=\"nf\">cost_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Generic function wrapper for the cost function \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">griewank_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#set server_endpoint and client_secret_token as variables</span>\n<span class=\"n\">sever_endpoint</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://127.0.0.1:5057\"</span>\n<span class=\"n\">client_secret</span> <span class=\"o\">=</span> <span class=\"mi\">1234567890</span>\n\n<span class=\"c1\">#Initialize connection and watch for errors</span>\n<span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">sever_endpoint</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"p\">)</span>\n\n<span class=\"n\">ubound</span><span class=\"o\">=</span><span class=\"mi\">600</span>  \n<span class=\"n\">lbound</span><span class=\"o\">=-</span><span class=\"mi\">600</span> \n<span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"n\">initMetric</span> <span class=\"o\">=</span> <span class=\"mi\">30000000</span> \n<span class=\"n\">maxIter</span><span class=\"o\">=</span><span class=\"n\">dim</span><span class=\"o\">*</span><span class=\"mi\">200</span> \n<span class=\"n\">maxSamples</span><span class=\"o\">=</span><span class=\"mi\">8</span> \n<span class=\"n\">iseedId</span><span class=\"o\">=</span><span class=\"mi\">0</span> \n<span class=\"n\">minOrMax</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\">## True for MINIMIZATION | False for MAXIMIZATION</span>\n\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"n\">dim</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">lbound</span> \n<span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Initial Objective Function Value = \"</span><span class=\"p\">,</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n\n<span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">initializeOptimizer</span><span class=\"p\">(</span><span class=\"n\">initMetric</span><span class=\"p\">,</span><span class=\"n\">ubound</span><span class=\"p\">,</span> <span class=\"n\">lbound</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">,</span> <span class=\"n\">maxIter</span><span class=\"p\">,</span> <span class=\"n\">maxSamples</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">iseedId</span><span class=\"p\">,</span><span class=\"n\">minOrMax</span><span class=\"p\">)</span>\n\n<span class=\"c1\">##OPTIMIZATION LOOP</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">maxIter</span><span class=\"p\">):</span>\n    <span class=\"n\">newSuggestions</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">()</span>        \n    <span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">newSuggestions</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>        \n    <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">updateObjectiveFunctionValue</span><span class=\"p\">(</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">##Optional step: Check the progress of the optmization</span>\n    <span class=\"n\">obj</span><span class=\"p\">,</span><span class=\"n\">pareato</span><span class=\"p\">,</span><span class=\"n\">feval</span><span class=\"p\">,</span><span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getProgress</span><span class=\"p\">()</span>   \n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Feval = \"</span><span class=\"p\">,</span> <span class=\"n\">feval</span><span class=\"p\">,</span> <span class=\"s2\">\" Best Objective = \"</span><span class=\"p\">,</span> <span class=\"n\">pareato</span><span class=\"p\">,</span> <span class=\"s2\">\" Current Objective = \"</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">xm</span><span class=\"o\">.</span><span class=\"n\">getParameters</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"n\">cost_function</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fobj</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6583329, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "5bdb22c48bdde0d19ff03ddf5e4f91cc", "sha256": "bba3f66707e53165d47d9e7494aae3df7f7804b2a9d36e920e0e89307fcc5587"}, "downloads": -1, "filename": "xtellixClient-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5bdb22c48bdde0d19ff03ddf5e4f91cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7404, "upload_time": "2020-02-06T15:15:33", "upload_time_iso_8601": "2020-02-06T15:15:33.051422Z", "url": "https://files.pythonhosted.org/packages/00/41/b12916ffd8ea519f586a2c65098d7885677e920eaefa7103a8518d14a20b/xtellixClient-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8f4f237d221f5d6725c86a8c27df212", "sha256": "a51e3f025714ffa733b53c2ded1858be40c2b8fbde0aa5ec2f21dc4dbeb260c9"}, "downloads": -1, "filename": "xtellixClient-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f8f4f237d221f5d6725c86a8c27df212", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6179, "upload_time": "2020-02-06T15:15:34", "upload_time_iso_8601": "2020-02-06T15:15:34.565145Z", "url": "https://files.pythonhosted.org/packages/b3/3a/66b11eb9f6e5ef9d40735bb5ec4e5152879ea6b07d69b0f2625d5735de0f/xtellixClient-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5bdb22c48bdde0d19ff03ddf5e4f91cc", "sha256": "bba3f66707e53165d47d9e7494aae3df7f7804b2a9d36e920e0e89307fcc5587"}, "downloads": -1, "filename": "xtellixClient-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5bdb22c48bdde0d19ff03ddf5e4f91cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7404, "upload_time": "2020-02-06T15:15:33", "upload_time_iso_8601": "2020-02-06T15:15:33.051422Z", "url": "https://files.pythonhosted.org/packages/00/41/b12916ffd8ea519f586a2c65098d7885677e920eaefa7103a8518d14a20b/xtellixClient-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8f4f237d221f5d6725c86a8c27df212", "sha256": "a51e3f025714ffa733b53c2ded1858be40c2b8fbde0aa5ec2f21dc4dbeb260c9"}, "downloads": -1, "filename": "xtellixClient-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f8f4f237d221f5d6725c86a8c27df212", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6179, "upload_time": "2020-02-06T15:15:34", "upload_time_iso_8601": "2020-02-06T15:15:34.565145Z", "url": "https://files.pythonhosted.org/packages/b3/3a/66b11eb9f6e5ef9d40735bb5ec4e5152879ea6b07d69b0f2625d5735de0f/xtellixClient-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:16 2020"}