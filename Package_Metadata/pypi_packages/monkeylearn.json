{"info": {"author": "MonkeyLearn", "author_email": "hello@monkeylearn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# MonkeyLearn API for Python\n\nOfficial Python client for the [MonkeyLearn API](https://monkeylearn.com/api/). Build and run machine learning models for language processing from your Python apps.\n\n\nInstallation\n---------------\n\n\nYou can use pip to install the library:\n\n```bash\n$ pip install monkeylearn\n```\n\nAlternatively, you can just clone the repository and run the setup.py script:\n\n```bash\n$ python setup.py install\n```\n\n\nUsage\n------\n\n\nBefore making requests to the API, you need to create an instance of the MonkeyLearn client. You will have to use your [account API Key](https://app.monkeylearn.com/main/my-account/tab/api-keys/):\n\n```python\nfrom monkeylearn import MonkeyLearn\n\n# Instantiate the client Using your API key\nml = MonkeyLearn('<YOUR API TOKEN HERE>')\n```\n\n### Requests\n\nFrom the MonkeyLearn client instance, you can call any endpoint (check the [available endpoints](#available-endpoints) below). For example, you can [classify](#classify) a list of texts using the public [Sentiment analysis classifier](https://app.monkeylearn.com/main/classifiers/cl_oJNMkt2V/):\n\n\n```python\nresponse = ml.classifiers.classify(\n    model_id='cl_Jx8qzYJh',\n    data=[\n        'Great hotel with excellent location',\n        'This is the worst hotel ever.'\n    ]\n)\n\n```\n\n### Responses\n\nThe response object returned by every endpoint call is a `MonkeyLearnResponse` object. The `body` attribute has the parsed response from the API:\n\n```python\nprint(response.body)\n# =>  [\n# =>      {\n# =>          'text': 'Great hotel with excellent location',\n# =>          'external_id': null,\n# =>          'error': false,\n# =>          'classifications': [\n# =>              {\n# =>                  'tag_name': 'Positive',\n# =>                  'tag_id': 1994,\n# =>                  'confidence': 0.922,\n# =>              }\n# =>          ]\n# =>      },\n# =>      {\n# =>          'text': 'This is the worst hotel ever.',\n# =>          'external_id': null,\n# =>          'error': false,\n# =>          'classifications': [\n# =>              {\n# =>                  'tag_name': 'Negative',\n# =>                  'tag_id': 1941,\n# =>                  'confidence': 0.911,\n# =>              }\n# =>          ]\n# =>      }\n# =>  ]\n```\n\nYou can also access other attributes in the response object to get information about the queries used or available:\n\n```python\nprint(response.plan_queries_allowed)\n# =>  300\n\nprint(response.plan_queries_remaining)\n# =>  240\n\nprint(response.request_queries_used)\n# =>  2\n```\n\n### Errors\n\nEndpoint calls may raise exceptions. Here is an example on how to handle them:\n\n```python\nfrom monkeylearn.exceptions import PlanQueryLimitError, MonkeyLearnException\n\ntry:\n    response = ml.classifiers.classify('[MODEL_ID]', data=['My text'])\nexcept PlanQueryLimitError as e:\n    # No monthly queries left\n    # e.response contains the MonkeyLearnResponse object\n    print(e.error_code, e.detail)\nexcept MonkeyLearnException:\n    raise\n```\n\nAvailable exceptions:\n\n| class                       | Description |\n|-----------------------------|-------------|\n| `MonkeyLearnException`      | Base class for every exception below.                                  |\n| `RequestParamsError`        | An invalid parameter was sent. Check the exception message or response object for more information. |\n| `AuthenticationError`       | Authentication failed, usually because an invalid token was provided. Check the exception message. More about [Authentication](https://monkeylearn.com/api/v3/#authentication). |\n| `ForbiddenError`            | You don't have permissions to perform the action on the given resource. |\n| `ModelLimitError`           | You have reached the custom model limit for your plan. |\n| `ModelNotFound`             | The model does not exist. Check the `model_id`. |\n| `TagNotFound`               | The tag does not exist. Check the `tag_id` parameter. |\n| `PlanQueryLimitError`       | You have reached the monthly query limit for your plan. Consider upgrading your plan. More about [Plan query limits](https://monkeylearn.com/api/v3/#query-limits). |\n| `PlanRateLimitError`        | You have sent too many requests in the last minute. Check the exception detail. More about [Plan rate limit](https://monkeylearn.com/api/v3/#plan-rate-limit). |\n| `ConcurrencyRateLimitError` | You have sent too many requests in the last second. Check the exception detail. More about [Concurrency rate limit](https://monkeylearn.com/api/v3/#concurrecy-rate-limit). |\n| `ModelStateError`           | The state of the model is invalid. Check the exception detail.  |\n\n\n### Auto-batching\n\n[Classify](#classify) and [Extract](#extract) endpoints might require more than one request to the MonkeyLearn API in order to process every text in the `data` parameter. If the `auto_batch` parameter is `True` (which is the default value), you won't have to keep the `data` length below the max allowed value (200). You can just pass the full list and the library will handle the batching and make the necessary requests. If the `retry_if_throttled` parameter is `True` (which is the default value), it will also wait and retry if the API throttled a request.\n\nLet's say you send a `data` parameter with 300 texts and `auto_batch` is enabled. The list will be split internally and two requests will be sent to MonkeyLearn with 200 and 100 texts, respectively. If all requests respond with a 200 status code, the responses will be appended and you will get the 300 classifications as usual in the `MonkeyLearnResponse.body` attribute:\n\n``` python\ndata = ['Text to classify'] * 300\nresponse = ml.classifiers.classify('[MODEL_ID]', data)\nassert len(response.body) == 300  # => True\n```\n\nNow, let's say you only had 200 queries left when trying the previous example, the second internal request would fail since you wouldn't have queries left after the first batch and a `PlanQueryLimitError` exception would be raised. The first 200 (successful) classifications will be in the exception object. However, if you don't manage this exception with an `except` clause, those first 200 successful classifications will be lost. Here's how you should handle that case:\n\n``` python\nfrom monkeylearn.exceptions import PlanQueryLimitError\n\ndata = ['Text to classify'] * 300\nbatch_size = 200\n\ntry:\n    response = ml.classifiers.classify('[MODEL_ID]', data, batch_size=batch_size)\nexcept PlanQueryLimitError as e:\n    partial_predictions = e.response.body  # The body of the successful responses\n    non_2xx_raw_responses = r.response.failed_raw_responses  # List of requests responses objects\nelse:\n    predictions = response.body\n```\n\nThis is very convenient and usually should be enough. If you need more flexibility, you can manage batching and rate limits yourself.\n\n``` python\nfrom time import sleep\nfrom monkeylearn.exceptions import PlanQueryLimitError, ConcurrencyRateLimitError, PlanRateLimitError\n\ndata = ['Text to classify'] * 300\nbatch_size = 200\npredictions = []\n\nfor i in range(0, len(data), batch_size):\n    batch_data = data[i:i + batch_size]\n\n    retry = True\n    while retry:\n        try:\n            retry = True\n            response = ml.classifiers.classify('[MODEL_ID]', batch_data, auto_batch=False,\n                                               retry_if_throttled=False)\n        except PlanRateLimitError as e:\n            sleep(e.seconds_to_wait)\n        except ConcurrencyRateLimitError:\n            sleep(2)\n        except PlanQueryLimitError:\n            raise\n        else:\n            retry = False\n\n    predictions.extend(response.body)\n```\n\nThis way you'll be able to control every request that is sent to the MonkeyLearn API.\n\nAvailable endpoints\n------------------------\n\nThese are all the endpoints of the API. For more information about each endpoint, check out the [API documentation](https://monkeylearn.com/api/v3/).\n\n### Classifiers\n\n#### [Classify](https://monkeylearn.com/api/v3/?shell#classify)\n\n\n```python\ndef MonkeyLearn.classifiers.classify(model_id, data, production_model=False, batch_size=200,\n                                     auto_batch=True, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*data*              |`list[str or dict]`|A list of up to 200 data elements to classify. Each element must be a *string* with the text or a *dict* with the required `text` key and the text as the value. You can provide an optional `external_id` key with a string that will be included in the response.  |\n|*production_model*  |`bool`             |Indicates if the classifications are performed by the production model. Only use this parameter with *custom models* (not with the public ones). Note that you first need to deploy your model to production either from the UI model settings or by using the [Classifier deploy endpoint](#deploy). |\n|*batch_size*        |`int`              |Max number of texts each request will send to MonkeyLearn. A number from 1 to 200. |\n|*auto_batch*         |`bool`             |Split the `data` list into smaller valid lists, send each one in separate request to MonkeyLearn, and merge the responses. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\ndata = ['First text', {'text': 'Second text', 'external_id': '2'}]\nresponse = ml.classifiers.classify('[MODEL_ID]', data)\n```\n\n<br>\n\n#### [Classifier detail](https://monkeylearn.com/api/v3/?shell#classifier-detail)\n\n\n```python\ndef MonkeyLearn.classifiers.detail(model_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.detail('[MODEL_ID]')\n```\n\n<br>\n\n#### [Create Classifier](https://monkeylearn.com/api/v3/?shell#create-classifier)\n\n\n```python\ndef MonkeyLearn.classifiers.create(name, description='', algorithm='nb', language='en',\n                                   max_features=10000, ngram_range=(1, 1), use_stemming=True,\n                                   preprocess_numbers=True, preprocess_social_media=False,\n                                   normalize_weights=True, stopwords=True, whitelist=None,\n                                   retry_if_throttled=True)\n```\n\nParameters:\n\nParameter | Type | Description\n--------- | ------- | -----------\n*name* | `str` | The name of the model.\n*description* | `str` | The description of the model.\n*algorithm* | `str` | The [algorithm](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-changing-the-algorithm) used when training the model. It can be either \"nb\" or \"svm\".\n*language* | `str` | The [language](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-language) of the model. Full list of [supported languages](https://monkeylearn.com/api/v3/#classifier-detail).\n*max_features* | `int` | The [maximum number of features](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-max-features) used when training the model. Between 10 and 100000.\n*ngram_range* | `tuple(int,int)` | Indicates which [n-gram range](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-n-gram-range) used when training the model. A list of two numbers between 1 and 3. They indicate the minimum and the maximum n for the n-grams used.\n*use_stemming* | `bool`| Indicates whether [stemming](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-stemming) is used when training the model.\n*preprocess_numbers* | `bool` | Indicates whether [number preprocessing](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-preprocess-numbers) is done when training the model.\n*preprocess_social_media* | `bool` | Indicates whether [preprocessing of social media](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-social-media-preprocessing-and-regular-expressions) is done when training the model.\n*normalize_weights* | `bool` | Indicates whether [weights will be normalized](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-normalize-weights) when training the model.\n*stopwords* | `bool or list` |  The list of [stopwords](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-filter-stopwords) used when training the model. Use *False* for no stopwords, *True* for the default stopwords, or a list of strings for custom stopwords.\n*whitelist* | `list` | The [whitelist](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-whitelist) of words used when training the model.\n*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.create(name='New classifier', stopwords=True)\n```\n<br>\n\n#### [Edit Classifier](https://monkeylearn.com/api/v3/?shell#edit-classifier)\n\n\n```python\ndef MonkeyLearn.classifiers.edit(model_id, name=None, description=None, algorithm=None,\n                                 language=None, max_features=None, ngram_range=None,\n                                 use_stemming=None, preprocess_numbers=None,\n                                 preprocess_social_media=None, normalize_weights=None,\n                                 stopwords=None, whitelist=None, retry_if_throttled=None)\n```\n\nParameters:\n\nParameter | Type | Description\n--------- | ------- | -----------\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n*name* | `str` | The name of the model.\n*description* | `str` | The description of the model.\n*algorithm* | `str` | The [algorithm](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-changing-the-algorithm) used when training the model. It can be either \"nb\" or \"svm\".\n*language* | `str` | The [language](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-language) of the model. Full list of [supported languages](https://monkeylearn.com/api/v3/#classifier-detail).\n*max_features* | `int` | The [maximum number of features](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-max-features) used when training the model. Between 10 and 100000.\n*ngram_range* | `tuple(int,int)` | Indicates which [n-gram range](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-n-gram-range) used when training the model. A list of two numbers between 1 and 3. They indicate the minimum and the maximum n for the n-grams used.\n*use_stemming* | `bool`| Indicates whether [stemming](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-stemming) is used when training the model.\n*preprocess_numbers* | `bool` | Indicates whether [number preprocessing](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-preprocess-numbers) is done when training the model.\n*preprocess_social_media* | `bool` | Indicates whether [preprocessing of social media](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-social-media-preprocessing-and-regular-expressions) is done when training the model.\n*normalize_weights* | `bool` | Indicates whether [weights will be normalized](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-normalize-weights) when training the model.\n*stopwords* | `bool or list` |  The list of [stopwords](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-filter-stopwords) used when training the model. Use *False* for no stopwords, *True* for the default stopwords, or a list of strings for custom stopwords.\n*whitelist* | `list` | The [whitelist](http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-whitelist) of words used when training the model.\n*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.edit('[MODEL_ID]', description='The new description of the classifier')\n```\n<br>\n\n#### [Delete classifier](https://monkeylearn.com/api/v3/?shell#delete-classifier)\n\n\n```python\ndef MonkeyLearn.classifiers.delete(model_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.delete('[MODEL_ID]')\n```\n\n<br>\n\n#### [List Classifiers](https://monkeylearn.com/api/v3/?shell#list-classifiers)\n\n\n```python\ndef MonkeyLearn.classifiers.list(page=1, per_page=20, order_by='-created', retry_if_throttled=True)\n```\n\nParameters:\n\n|Parameter            |Type               | Description |\n|-------------------- |-------------------|-------------|\n|*page*               |`int`              |Specifies which page to get.|\n|*per_page*           |`int`              |Specifies how many items per page will be returned. |\n|*order_by*           |`string or list`   |Specifies the ordering criteria. It can either be a *string* for single criteria ordering or a *list of strings* for more than one. Each *string* must be a valid field name; if you want inverse/descending order of the field prepend a `-` (dash) character. Some valid examples are: `'is_public'`, `'-name'` or `['-is_public', 'name']`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.list(page=2, per_page=5, order_by=['-is_public', 'name'])\n```\n\n<br>\n\n#### [Deploy](https://monkeylearn.com/api/v3/?shell#deploy)\n\n\n```python\ndef MonkeyLearn.classifiers.deploy(model_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.deploy('[MODEL_ID]')\n```\n\n<br>\n\n#### [Train](https://monkeylearn.com/api/v3/?shell#train)\n\n\n```python\ndef MonkeyLearn.classifiers.train(model_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.train('[MODEL_ID]')\n```\n\n<br>\n\n#### [Tag detail](https://monkeylearn.com/api/v3/?shell#classify)\n\n\n```python\ndef MonkeyLearn.classifiers.tags.detail(model_id, tag_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*tag_id*       |`int`              |Tag ID. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n``` python\nresponse = ml.classifiers.tags.detail('[MODEL_ID]', TAG_ID)\n```\n\n<br>\n\n#### [Create tag](https://monkeylearn.com/api/v3/?shell#create-tag)\n\n\n```python\ndef MonkeyLearn.classifiers.tags.create(model_id, name, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*name*              |`str`              |The name of the new tag. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.tags.create('[MODEL_ID]', 'Positive')\n```\n\n<br>\n\n#### [Edit tag](https://monkeylearn.com/api/v3/?shell#edit-tag)\n\n\n```python\ndef MonkeyLearn.classifiers.tags.edit(model_id, tag_id, name=None,\n                                      retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*tag_id*       |`int`              |Tag ID. |\n|*name*              |`str`              |The new name of the tag. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.tags.edit('[MODEL_ID]', TAG_ID, 'New name')\n```\n\n<br>\n\n#### [Delete tag](https://monkeylearn.com/api/v3/?shell#delete-tag)\n\n\n```python\ndef MonkeyLearn.classifiers.tags.delete(model_id, tag_id, move_data_to=None,\n                                        retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*tag_id*       |`int`              |Tag ID. |\n|*move_data_to*      |`int`              |An optional tag ID. If provided, training data associated with the tag to be deleted will be moved to the specified tag before deletion. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.classifiers.tags.delete('[MODEL_ID]', TAG_ID)\n```\n\n<br>\n\n#### [Upload data](https://monkeylearn.com/api/v3/?shell#upload-data)\n\n\n```python\ndef MonkeyLearn.classifiers.upload_data(model_id, data, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Classifier ID. It always starts with `'cl'`, for example, `'cl_oJNMkt2V'`. |\n|*data*              |`list[dict]`        |A list of dicts with the keys described below.\n|*input_duplicates_strategy*              |`str`        | Indicates what to do with duplicate texts in this request. Must be one of `merge`, `keep_first` or `keep_last`.\n|*existing_duplicates_strategy*              |`str`        | Indicates what to do with texts of this request that already exist in the model. Must be one of `overwrite` or `ignore`.\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\n`data` dict keys:\n\n|Key             | Description |\n|---------       | ----------- |\n|text | A *string* of the text to upload.|\n|tags | A *list* of tags that can be refered to by their numeric ID or their name. The text will be tagged with each tag in the *list* when created (in case it doesn't already exist on the model). Otherwise, its tags will be updated to the new ones. New tags will be created if they don't already exist.|\n|markers | An optional *list* of *string*. Each one represents a marker that will be associated with the text. New markers will be created if they don't already exist.|\n\n\nExample:\n\n```python\nresponse = ml.classifiers.upload_data(\n    model_id='[MODEL_ID]',\n    data=[{'text': 'text 1', 'tags': [TAG_ID_1, '[tag_name]']},\n          {'text': 'text 2', 'tags': [TAG_ID_1, TAG_ID_2]}]\n)\n```\n\n<br>\n\n### Extractors\n\n\n#### [Extract](https://monkeylearn.com/api/v3/?shell#extract)\n\n\n```python\ndef MonkeyLearn.extractors.extract(model_id, data, production_model=False, batch_size=200,\n                                   retry_if_throttled=True, extra_args=None)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Extractor ID. It always starts with `'ex'`, for example, `'ex_oJNMkt2V'`. |\n|*data*              |`list[str or dict]`|A list of up to 200 data elements to extract from. Each element must be a *string* with the text or a *dict* with the required `text` key and the text as the value. You can also provide an optional `external_id` key with a string that will be included in the response.  |\n|*production_model*  |`bool`             |Indicates if the extractions are performed by the production model. Only use this parameter with *custom models* (not with the public ones). Note that you first need to deploy your model to production from the UI model settings. |\n|*batch_size*        |`int`              |Max number of texts each request will send to MonkeyLearn. A number from 1 to 200. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\ndata = ['First text', {'text': 'Second text', 'external_id': '2'}]\nresponse = ml.extractors.extract('[MODEL_ID]', data=data)\n```\n\n<br>\n\n#### [Extractor detail](https://monkeylearn.com/api/v3/?shell#extractor-detail)\n\n\n```python\ndef MonkeyLearn.extractors.detail(model_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Extractor ID. It always starts with `'ex'`, for example, `'ex_oJNMkt2V'`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.extractors.detail('[MODEL_ID]')\n```\n\n<br>\n\n#### [List extractors](https://monkeylearn.com/api/v3/?shell#list-extractors)\n\n\n```python\ndef MonkeyLearn.extractors.list(page=1, per_page=20, order_by='-created', retry_if_throttled=True)\n```\n\nParameters:\n\n|Parameter            |Type               | Description |\n|---------------------|-------------------|-------------|\n|*page*               |`int`              |Specifies which page to get.|\n|*per_page*           |`int`              |Specifies how many items per page will be returned. |\n|*order_by*           |`string or list`   |Specifies the ordering criteria. It can either be a *string* for single criteria ordering or a *list of strings* for more than one. Each *string* must be a valid field name; if you want inverse/descending order of the field prepend a `-` (dash) character. Some valid examples are: `'is_public'`, `'-name'` or `['-is_public', 'name']`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.extractors.list(page=2, per_page=5, order_by=['-is_public', 'name'])\n```\n\n### Workflows\n\n#### [Workflow detail](https://monkeylearn.com/api/v3/#workflow-detail)\n\n```python\ndef MonkeyLearn.workflows.detail(model_id, step_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*step_id*          |`int`              |Step ID. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.workflows.detail('[MODEL_ID]', '[STEP_ID]')\n```\n\n<br>\n\n#### [Create workflow](https://monkeylearn.com/api/v3/#create-workflow)\n\n```python\ndef MonkeyLearn.workflows.create(name, db_name, steps, description='', webhook_url=None,\n                                 custom_fields=None, sources=None, retry_if_throttled=True)\n```\n\nParameters:\n\nParameter | Type | Description\n--------- | ------- | -----------\n*name* | `str` | The name of the model.\n*db_name* | `str` | The name of the database where the data will be stored. The name must not already be in use by another database.\n*steps*  | `list[dict]` | A list of step dicts.\n*description*  | `str` | The description of the model.\n*webhook_url*  | `str` | An URL that will be called when an action is triggered.\n*custom_fields*   | `[]`| A list of custom_field dicts that represent user defined fields that come with the input data and that will be saved. It does not include the mandatory `text` field.\n*sources*  | `{}` | An object that represents the data sources of the workflow.\n\nExample:\n\n```python\nresponse = ml.workflows.create(\n    name='Example Workflow',\n    db_name='example_workflow',\n    steps=[{\n        name: 'sentiment',\n        model_id: 'cl_pi3C7JiL'\n    }, {\n        name: 'keywords',\n        model_id: 'ex_YCya9nrn'\n    }])\n```\n\n<br>\n\n#### [Delete workflow](https://monkeylearn.com/api/v3/#delete-workflow)\n\n```python\ndef MonkeyLearn.workflows.delete(model_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.workflows.delete('[MODEL_ID]')\n```\n\n<br>\n\n#### [Step detail](https://monkeylearn.com/api/v3/#step-detail)\n\n```python\ndef MonkeyLearn.workflows.steps.detail(model_id, step_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*step_id*       |`int`              |Step ID. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n``` python\nresponse = ml.workflows.steps.detail('[MODEL_ID]', STEP_ID)\n```\n\n<br>\n\n#### [Create step](https://monkeylearn.com/api/v3/#create-step)\n\n```python\ndef MonkeyLearn.workflows.steps.create(model_id, name, step_model_id, input=None,\n                                         conditions=None, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*name*              |`str`              |The name of the new step. |\n|*step_model_id*              |`str`              |The ID of the MonkeyLearn model that will run in this step. Must be an existing classifier or extractor. |\n|*input*              |`str`              |Where the input text to use in this step comes from. It can be either the name of a step or `input_data` (the default), which means that the input will be the original text. |\n|*conditions*              |`list[dict]`              |A list of condition dicts that indicate whether this step should execute or not. All the conditions in the list must be true for the step to execute. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.workflows.steps.create(model_id='[MODEL_ID]',  name='sentiment',\n                                     step_model_id='cl_pi3C7JiL')\n```\n\n<br>\n\n#### [Delete step](https://monkeylearn.com/api/v3/#delete-step)\n\n```python\ndef MonkeyLearn.workflows.steps.delete(model_id, step_id, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*step_id*       |`int`              |Step ID. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.workflows.steps.delete('[MODEL_ID]', STEP_ID)\n```\n\n<br>\n\n#### [Upload workflow data](https://monkeylearn.com/api/v3/#upload-workflow-data)\n\n```python\ndef MonkeyLearn.workflows.data.create(model_id, data, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*data*              |`list[dict]`        |A list of dicts with the keys described below.\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\n`data` dict keys:\n\n|Key             | Description |\n|---------       | ----------- |\n|text | A *string* of the text to upload.|\n|[custom field name] | The value for a custom field for this text. The type of the value must be the one specified when the field was created.|\n\n\nExample:\n\n```python\nresponse = ml.workflows.data.create(\n    model_id='[MODEL_ID]',\n    data=[{'text': 'text 1', 'rating': 3},\n          {'text': 'text 2', 'rating': 4}]\n)\n```\n\n<br>\n\n#### [List workflow data](https://monkeylearn.com/api/v3/#list-workflow-data)\n\n```python\ndef MonkeyLearn.workflows.data.list(model_id, batch_id=None, is_processed=None,\n                                    sent_to_process_date_from=None, sent_to_process_date_to=None,\n                                    page=None, per_page=None, retry_if_throttled=True)\n```\n\nParameters:\n\nParameter                            | Type | Description\n---------                            | ------- | -----------\npage     | `int`        | The page number to be retrieved.\nper_page | `int`       | The maximum number of items the page should have. The maximum allowed value is `50`.\nbatch_id | `int` | The ID of the batch to retrieve. If unspecified, data from all batches is shown.\nis_processed | `bool` | Whether to return data that has been processed or data that has not been processed yet. If unspecified, both are shown indistinctly.\nsent_to_process_date_from | `str` | An [ISO formatted date](https://en.wikipedia.org/wiki/ISO_8601) which specifies the oldest `sent_date` of the data to be retrieved.\nsent_to_process_date_to | `str` | An [ISO formatted date](https://en.wikipedia.org/wiki/ISO_8601) which specifies the most recent `sent_date` of the data to be retrieved.\n\nExample:\n\n```python\nresponse = ml.workflows.data.list('[MODEL_ID]', batch_id=1839, page=1)\n```\n\n<br>\n\n#### [Create custom field](https://monkeylearn.com/api/v3/#create-custom-field)\n\n\n```python\ndef MonkeyLearn.workflows.custom_fields.create(model_id, name, data_type, retry_if_throttled=True)\n```\n\nParameters:\n\n| Parameter          |Type               | Description                                               |\n|--------------------|-------------------|-----------------------------------------------------------|\n|*model_id*          |`str`              |Workflow ID. It always starts with `'wf'`, for example, `'wf_oJNMkt2V'`. |\n|*name*              |`str`              |The name of the new custom field. |\n|*data_type*              |`str`              |The type of the data of the field. It must be one of `string`, `date`, `text`, `integer`, `float`, `bool`. |\n|*retry_if_throttled* |`bool`             |If a request is [throttled](https://monkeylearn.com/api/v3/#query-limits), sleep and retry the request. |\n\nExample:\n\n```python\nresponse = ml.workflows.custom_fields.create(model_id='[MODEL_ID]',  name='rating',\n                                             data_type='integer')\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/monkeylearn/monkeylearn-python/tarball/v3.2.4", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/monkeylearn/monkeylearn-python", "keywords": "monkeylearn,machine learning,python", "license": "", "maintainer": "", "maintainer_email": "", "name": "monkeylearn", "package_url": "https://pypi.org/project/monkeylearn/", "platform": "", "project_url": "https://pypi.org/project/monkeylearn/", "project_urls": {"Download": "https://github.com/monkeylearn/monkeylearn-python/tarball/v3.2.4", "Homepage": "https://github.com/monkeylearn/monkeylearn-python"}, "release_url": "https://pypi.org/project/monkeylearn/3.5.2/", "requires_dist": ["requests (>=2.8.1)", "six (>=1.10.0)"], "requires_python": "", "summary": "Official Python client for the MonkeyLearn API", "version": "3.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MonkeyLearn API for Python</h1>\n<p>Official Python client for the <a href=\"https://monkeylearn.com/api/\" rel=\"nofollow\">MonkeyLearn API</a>. Build and run machine learning models for language processing from your Python apps.</p>\n<h2>Installation</h2>\n<p>You can use pip to install the library:</p>\n<pre>$ pip install monkeylearn\n</pre>\n<p>Alternatively, you can just clone the repository and run the setup.py script:</p>\n<pre>$ python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>Before making requests to the API, you need to create an instance of the MonkeyLearn client. You will have to use your <a href=\"https://app.monkeylearn.com/main/my-account/tab/api-keys/\" rel=\"nofollow\">account API Key</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monkeylearn</span> <span class=\"kn\">import</span> <span class=\"n\">MonkeyLearn</span>\n\n<span class=\"c1\"># Instantiate the client Using your API key</span>\n<span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"n\">MonkeyLearn</span><span class=\"p\">(</span><span class=\"s1\">'&lt;YOUR API TOKEN HERE&gt;'</span><span class=\"p\">)</span>\n</pre>\n<h3>Requests</h3>\n<p>From the MonkeyLearn client instance, you can call any endpoint (check the <a href=\"#available-endpoints\" rel=\"nofollow\">available endpoints</a> below). For example, you can <a href=\"#classify\" rel=\"nofollow\">classify</a> a list of texts using the public <a href=\"https://app.monkeylearn.com/main/classifiers/cl_oJNMkt2V/\" rel=\"nofollow\">Sentiment analysis classifier</a>:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span>\n    <span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s1\">'cl_Jx8qzYJh'</span><span class=\"p\">,</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'Great hotel with excellent location'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'This is the worst hotel ever.'</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Responses</h3>\n<p>The response object returned by every endpoint call is a <code>MonkeyLearnResponse</code> object. The <code>body</code> attribute has the parsed response from the API:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt;  [</span>\n<span class=\"c1\"># =&gt;      {</span>\n<span class=\"c1\"># =&gt;          'text': 'Great hotel with excellent location',</span>\n<span class=\"c1\"># =&gt;          'external_id': null,</span>\n<span class=\"c1\"># =&gt;          'error': false,</span>\n<span class=\"c1\"># =&gt;          'classifications': [</span>\n<span class=\"c1\"># =&gt;              {</span>\n<span class=\"c1\"># =&gt;                  'tag_name': 'Positive',</span>\n<span class=\"c1\"># =&gt;                  'tag_id': 1994,</span>\n<span class=\"c1\"># =&gt;                  'confidence': 0.922,</span>\n<span class=\"c1\"># =&gt;              }</span>\n<span class=\"c1\"># =&gt;          ]</span>\n<span class=\"c1\"># =&gt;      },</span>\n<span class=\"c1\"># =&gt;      {</span>\n<span class=\"c1\"># =&gt;          'text': 'This is the worst hotel ever.',</span>\n<span class=\"c1\"># =&gt;          'external_id': null,</span>\n<span class=\"c1\"># =&gt;          'error': false,</span>\n<span class=\"c1\"># =&gt;          'classifications': [</span>\n<span class=\"c1\"># =&gt;              {</span>\n<span class=\"c1\"># =&gt;                  'tag_name': 'Negative',</span>\n<span class=\"c1\"># =&gt;                  'tag_id': 1941,</span>\n<span class=\"c1\"># =&gt;                  'confidence': 0.911,</span>\n<span class=\"c1\"># =&gt;              }</span>\n<span class=\"c1\"># =&gt;          ]</span>\n<span class=\"c1\"># =&gt;      }</span>\n<span class=\"c1\"># =&gt;  ]</span>\n</pre>\n<p>You can also access other attributes in the response object to get information about the queries used or available:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">plan_queries_allowed</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt;  300</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">plan_queries_remaining</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt;  240</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">request_queries_used</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt;  2</span>\n</pre>\n<h3>Errors</h3>\n<p>Endpoint calls may raise exceptions. Here is an example on how to handle them:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monkeylearn.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PlanQueryLimitError</span><span class=\"p\">,</span> <span class=\"n\">MonkeyLearnException</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'My text'</span><span class=\"p\">])</span>\n<span class=\"k\">except</span> <span class=\"n\">PlanQueryLimitError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># No monthly queries left</span>\n    <span class=\"c1\"># e.response contains the MonkeyLearnResponse object</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">MonkeyLearnException</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span>\n</pre>\n<p>Available exceptions:</p>\n<table>\n<thead>\n<tr>\n<th>class</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>MonkeyLearnException</code></td>\n<td>Base class for every exception below.</td>\n</tr>\n<tr>\n<td><code>RequestParamsError</code></td>\n<td>An invalid parameter was sent. Check the exception message or response object for more information.</td>\n</tr>\n<tr>\n<td><code>AuthenticationError</code></td>\n<td>Authentication failed, usually because an invalid token was provided. Check the exception message. More about <a href=\"https://monkeylearn.com/api/v3/#authentication\" rel=\"nofollow\">Authentication</a>.</td>\n</tr>\n<tr>\n<td><code>ForbiddenError</code></td>\n<td>You don't have permissions to perform the action on the given resource.</td>\n</tr>\n<tr>\n<td><code>ModelLimitError</code></td>\n<td>You have reached the custom model limit for your plan.</td>\n</tr>\n<tr>\n<td><code>ModelNotFound</code></td>\n<td>The model does not exist. Check the <code>model_id</code>.</td>\n</tr>\n<tr>\n<td><code>TagNotFound</code></td>\n<td>The tag does not exist. Check the <code>tag_id</code> parameter.</td>\n</tr>\n<tr>\n<td><code>PlanQueryLimitError</code></td>\n<td>You have reached the monthly query limit for your plan. Consider upgrading your plan. More about <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">Plan query limits</a>.</td>\n</tr>\n<tr>\n<td><code>PlanRateLimitError</code></td>\n<td>You have sent too many requests in the last minute. Check the exception detail. More about <a href=\"https://monkeylearn.com/api/v3/#plan-rate-limit\" rel=\"nofollow\">Plan rate limit</a>.</td>\n</tr>\n<tr>\n<td><code>ConcurrencyRateLimitError</code></td>\n<td>You have sent too many requests in the last second. Check the exception detail. More about <a href=\"https://monkeylearn.com/api/v3/#concurrecy-rate-limit\" rel=\"nofollow\">Concurrency rate limit</a>.</td>\n</tr>\n<tr>\n<td><code>ModelStateError</code></td>\n<td>The state of the model is invalid. Check the exception detail.</td>\n</tr></tbody></table>\n<h3>Auto-batching</h3>\n<p><a href=\"#classify\" rel=\"nofollow\">Classify</a> and <a href=\"#extract\" rel=\"nofollow\">Extract</a> endpoints might require more than one request to the MonkeyLearn API in order to process every text in the <code>data</code> parameter. If the <code>auto_batch</code> parameter is <code>True</code> (which is the default value), you won't have to keep the <code>data</code> length below the max allowed value (200). You can just pass the full list and the library will handle the batching and make the necessary requests. If the <code>retry_if_throttled</code> parameter is <code>True</code> (which is the default value), it will also wait and retry if the API throttled a request.</p>\n<p>Let's say you send a <code>data</code> parameter with 300 texts and <code>auto_batch</code> is enabled. The list will be split internally and two requests will be sent to MonkeyLearn with 200 and 100 texts, respectively. If all requests respond with a 200 status code, the responses will be appended and you will get the 300 classifications as usual in the <code>MonkeyLearnResponse.body</code> attribute:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Text to classify'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">300</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">300</span>  <span class=\"c1\"># =&gt; True</span>\n</pre>\n<p>Now, let's say you only had 200 queries left when trying the previous example, the second internal request would fail since you wouldn't have queries left after the first batch and a <code>PlanQueryLimitError</code> exception would be raised. The first 200 (successful) classifications will be in the exception object. However, if you don't manage this exception with an <code>except</code> clause, those first 200 successful classifications will be lost. Here's how you should handle that case:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monkeylearn.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PlanQueryLimitError</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Text to classify'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">300</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">PlanQueryLimitError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">partial_predictions</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span>  <span class=\"c1\"># The body of the successful responses</span>\n    <span class=\"n\">non_2xx_raw_responses</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">failed_raw_responses</span>  <span class=\"c1\"># List of requests responses objects</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span>\n</pre>\n<p>This is very convenient and usually should be enough. If you need more flexibility, you can manage batching and rate limits yourself.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">monkeylearn.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PlanQueryLimitError</span><span class=\"p\">,</span> <span class=\"n\">ConcurrencyRateLimitError</span><span class=\"p\">,</span> <span class=\"n\">PlanRateLimitError</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Text to classify'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">300</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">batch_size</span><span class=\"p\">):</span>\n    <span class=\"n\">batch_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">batch_size</span><span class=\"p\">]</span>\n\n    <span class=\"n\">retry</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">while</span> <span class=\"n\">retry</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">retry</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">batch_data</span><span class=\"p\">,</span> <span class=\"n\">auto_batch</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                               <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">PlanRateLimitError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">seconds_to_wait</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">ConcurrencyRateLimitError</span><span class=\"p\">:</span>\n            <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">PlanQueryLimitError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">retry</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">predictions</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>\n<p>This way you'll be able to control every request that is sent to the MonkeyLearn API.</p>\n<h2>Available endpoints</h2>\n<p>These are all the endpoints of the API. For more information about each endpoint, check out the <a href=\"https://monkeylearn.com/api/v3/\" rel=\"nofollow\">API documentation</a>.</p>\n<h3>Classifiers</h3>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#classify\" rel=\"nofollow\">Classify</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">production_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                                     <span class=\"n\">auto_batch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>data</em></td>\n<td><code>list[str or dict]</code></td>\n<td>A list of up to 200 data elements to classify. Each element must be a <em>string</em> with the text or a <em>dict</em> with the required <code>text</code> key and the text as the value. You can provide an optional <code>external_id</code> key with a string that will be included in the response.</td>\n</tr>\n<tr>\n<td><em>production_model</em></td>\n<td><code>bool</code></td>\n<td>Indicates if the classifications are performed by the production model. Only use this parameter with <em>custom models</em> (not with the public ones). Note that you first need to deploy your model to production either from the UI model settings or by using the <a href=\"#deploy\" rel=\"nofollow\">Classifier deploy endpoint</a>.</td>\n</tr>\n<tr>\n<td><em>batch_size</em></td>\n<td><code>int</code></td>\n<td>Max number of texts each request will send to MonkeyLearn. A number from 1 to 200.</td>\n</tr>\n<tr>\n<td><em>auto_batch</em></td>\n<td><code>bool</code></td>\n<td>Split the <code>data</code> list into smaller valid lists, send each one in separate request to MonkeyLearn, and merge the responses.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'First text'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Second text'</span><span class=\"p\">,</span> <span class=\"s1\">'external_id'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">}]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#classifier-detail\" rel=\"nofollow\">Classifier detail</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#create-classifier\" rel=\"nofollow\">Create Classifier</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s1\">'nb'</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">'en'</span><span class=\"p\">,</span>\n                                   <span class=\"n\">max_features</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">ngram_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">use_stemming</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                   <span class=\"n\">preprocess_numbers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">preprocess_social_media</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                   <span class=\"n\">normalize_weights</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stopwords</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                   <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The name of the model.</td>\n</tr>\n<tr>\n<td><em>description</em></td>\n<td><code>str</code></td>\n<td>The description of the model.</td>\n</tr>\n<tr>\n<td><em>algorithm</em></td>\n<td><code>str</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-changing-the-algorithm\" rel=\"nofollow\">algorithm</a> used when training the model. It can be either \"nb\" or \"svm\".</td>\n</tr>\n<tr>\n<td><em>language</em></td>\n<td><code>str</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-language\" rel=\"nofollow\">language</a> of the model. Full list of <a href=\"https://monkeylearn.com/api/v3/#classifier-detail\" rel=\"nofollow\">supported languages</a>.</td>\n</tr>\n<tr>\n<td><em>max_features</em></td>\n<td><code>int</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-max-features\" rel=\"nofollow\">maximum number of features</a> used when training the model. Between 10 and 100000.</td>\n</tr>\n<tr>\n<td><em>ngram_range</em></td>\n<td><code>tuple(int,int)</code></td>\n<td>Indicates which <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-n-gram-range\" rel=\"nofollow\">n-gram range</a> used when training the model. A list of two numbers between 1 and 3. They indicate the minimum and the maximum n for the n-grams used.</td>\n</tr>\n<tr>\n<td><em>use_stemming</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-stemming\" rel=\"nofollow\">stemming</a> is used when training the model.</td>\n</tr>\n<tr>\n<td><em>preprocess_numbers</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-preprocess-numbers\" rel=\"nofollow\">number preprocessing</a> is done when training the model.</td>\n</tr>\n<tr>\n<td><em>preprocess_social_media</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-social-media-preprocessing-and-regular-expressions\" rel=\"nofollow\">preprocessing of social media</a> is done when training the model.</td>\n</tr>\n<tr>\n<td><em>normalize_weights</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-normalize-weights\" rel=\"nofollow\">weights will be normalized</a> when training the model.</td>\n</tr>\n<tr>\n<td><em>stopwords</em></td>\n<td><code>bool or list</code></td>\n<td>The list of <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-filter-stopwords\" rel=\"nofollow\">stopwords</a> used when training the model. Use <em>False</em> for no stopwords, <em>True</em> for the default stopwords, or a list of strings for custom stopwords.</td>\n</tr>\n<tr>\n<td><em>whitelist</em></td>\n<td><code>list</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-whitelist\" rel=\"nofollow\">whitelist</a> of words used when training the model.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'New classifier'</span><span class=\"p\">,</span> <span class=\"n\">stopwords</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#edit-classifier\" rel=\"nofollow\">Edit Classifier</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_features</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ngram_range</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">use_stemming</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">preprocess_numbers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">preprocess_social_media</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">normalize_weights</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">stopwords</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The name of the model.</td>\n</tr>\n<tr>\n<td><em>description</em></td>\n<td><code>str</code></td>\n<td>The description of the model.</td>\n</tr>\n<tr>\n<td><em>algorithm</em></td>\n<td><code>str</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-changing-the-algorithm\" rel=\"nofollow\">algorithm</a> used when training the model. It can be either \"nb\" or \"svm\".</td>\n</tr>\n<tr>\n<td><em>language</em></td>\n<td><code>str</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-language\" rel=\"nofollow\">language</a> of the model. Full list of <a href=\"https://monkeylearn.com/api/v3/#classifier-detail\" rel=\"nofollow\">supported languages</a>.</td>\n</tr>\n<tr>\n<td><em>max_features</em></td>\n<td><code>int</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-max-features\" rel=\"nofollow\">maximum number of features</a> used when training the model. Between 10 and 100000.</td>\n</tr>\n<tr>\n<td><em>ngram_range</em></td>\n<td><code>tuple(int,int)</code></td>\n<td>Indicates which <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-n-gram-range\" rel=\"nofollow\">n-gram range</a> used when training the model. A list of two numbers between 1 and 3. They indicate the minimum and the maximum n for the n-grams used.</td>\n</tr>\n<tr>\n<td><em>use_stemming</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-stemming\" rel=\"nofollow\">stemming</a> is used when training the model.</td>\n</tr>\n<tr>\n<td><em>preprocess_numbers</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-preprocess-numbers\" rel=\"nofollow\">number preprocessing</a> is done when training the model.</td>\n</tr>\n<tr>\n<td><em>preprocess_social_media</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-social-media-preprocessing-and-regular-expressions\" rel=\"nofollow\">preprocessing of social media</a> is done when training the model.</td>\n</tr>\n<tr>\n<td><em>normalize_weights</em></td>\n<td><code>bool</code></td>\n<td>Indicates whether <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-normalize-weights\" rel=\"nofollow\">weights will be normalized</a> when training the model.</td>\n</tr>\n<tr>\n<td><em>stopwords</em></td>\n<td><code>bool or list</code></td>\n<td>The list of <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-filter-stopwords\" rel=\"nofollow\">stopwords</a> used when training the model. Use <em>False</em> for no stopwords, <em>True</em> for the default stopwords, or a list of strings for custom stopwords.</td>\n</tr>\n<tr>\n<td><em>whitelist</em></td>\n<td><code>list</code></td>\n<td>The <a href=\"http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-whitelist\" rel=\"nofollow\">whitelist</a> of words used when training the model.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'The new description of the classifier'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#delete-classifier\" rel=\"nofollow\">Delete classifier</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#list-classifiers\" rel=\"nofollow\">List Classifiers</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s1\">'-created'</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>page</em></td>\n<td><code>int</code></td>\n<td>Specifies which page to get.</td>\n</tr>\n<tr>\n<td><em>per_page</em></td>\n<td><code>int</code></td>\n<td>Specifies how many items per page will be returned.</td>\n</tr>\n<tr>\n<td><em>order_by</em></td>\n<td><code>string or list</code></td>\n<td>Specifies the ordering criteria. It can either be a <em>string</em> for single criteria ordering or a <em>list of strings</em> for more than one. Each <em>string</em> must be a valid field name; if you want inverse/descending order of the field prepend a <code>-</code> (dash) character. Some valid examples are: <code>'is_public'</code>, <code>'-name'</code> or <code>['-is_public', 'name']</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'-is_public'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#deploy\" rel=\"nofollow\">Deploy</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">deploy</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">deploy</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#train\" rel=\"nofollow\">Train</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#classify\" rel=\"nofollow\">Tag detail</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">tag_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>tag_id</em></td>\n<td><code>int</code></td>\n<td>Tag ID.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">TAG_ID</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#create-tag\" rel=\"nofollow\">Create tag</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The name of the new tag.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"s1\">'Positive'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#edit-tag\" rel=\"nofollow\">Edit tag</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">tag_id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                      <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>tag_id</em></td>\n<td><code>int</code></td>\n<td>Tag ID.</td>\n</tr>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The new name of the tag.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">TAG_ID</span><span class=\"p\">,</span> <span class=\"s1\">'New name'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#delete-tag\" rel=\"nofollow\">Delete tag</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">tag_id</span><span class=\"p\">,</span> <span class=\"n\">move_data_to</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                        <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>tag_id</em></td>\n<td><code>int</code></td>\n<td>Tag ID.</td>\n</tr>\n<tr>\n<td><em>move_data_to</em></td>\n<td><code>int</code></td>\n<td>An optional tag ID. If provided, training data associated with the tag to be deleted will be moved to the specified tag before deletion.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">TAG_ID</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#upload-data\" rel=\"nofollow\">Upload data</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">upload_data</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Classifier ID. It always starts with <code>'cl'</code>, for example, <code>'cl_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>data</em></td>\n<td><code>list[dict]</code></td>\n<td>A list of dicts with the keys described below.</td>\n</tr>\n<tr>\n<td><em>input_duplicates_strategy</em></td>\n<td><code>str</code></td>\n<td>Indicates what to do with duplicate texts in this request. Must be one of <code>merge</code>, <code>keep_first</code> or <code>keep_last</code>.</td>\n</tr>\n<tr>\n<td><em>existing_duplicates_strategy</em></td>\n<td><code>str</code></td>\n<td>Indicates what to do with texts of this request that already exist in the model. Must be one of <code>overwrite</code> or <code>ignore</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p><code>data</code> dict keys:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>A <em>string</em> of the text to upload.</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>A <em>list</em> of tags that can be refered to by their numeric ID or their name. The text will be tagged with each tag in the <em>list</em> when created (in case it doesn't already exist on the model). Otherwise, its tags will be updated to the new ones. New tags will be created if they don't already exist.</td>\n</tr>\n<tr>\n<td>markers</td>\n<td>An optional <em>list</em> of <em>string</em>. Each one represents a marker that will be associated with the text. New markers will be created if they don't already exist.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">classifiers</span><span class=\"o\">.</span><span class=\"n\">upload_data</span><span class=\"p\">(</span>\n    <span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'text 1'</span><span class=\"p\">,</span> <span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">TAG_ID_1</span><span class=\"p\">,</span> <span class=\"s1\">'[tag_name]'</span><span class=\"p\">]},</span>\n          <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'text 2'</span><span class=\"p\">,</span> <span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">TAG_ID_1</span><span class=\"p\">,</span> <span class=\"n\">TAG_ID_2</span><span class=\"p\">]}]</span>\n<span class=\"p\">)</span>\n</pre>\n<br>\n<h3>Extractors</h3>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#extract\" rel=\"nofollow\">Extract</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">production_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                                   <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">extra_args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Extractor ID. It always starts with <code>'ex'</code>, for example, <code>'ex_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>data</em></td>\n<td><code>list[str or dict]</code></td>\n<td>A list of up to 200 data elements to extract from. Each element must be a <em>string</em> with the text or a <em>dict</em> with the required <code>text</code> key and the text as the value. You can also provide an optional <code>external_id</code> key with a string that will be included in the response.</td>\n</tr>\n<tr>\n<td><em>production_model</em></td>\n<td><code>bool</code></td>\n<td>Indicates if the extractions are performed by the production model. Only use this parameter with <em>custom models</em> (not with the public ones). Note that you first need to deploy your model to production from the UI model settings.</td>\n</tr>\n<tr>\n<td><em>batch_size</em></td>\n<td><code>int</code></td>\n<td>Max number of texts each request will send to MonkeyLearn. A number from 1 to 200.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'First text'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Second text'</span><span class=\"p\">,</span> <span class=\"s1\">'external_id'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">}]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#extractor-detail\" rel=\"nofollow\">Extractor detail</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Extractor ID. It always starts with <code>'ex'</code>, for example, <code>'ex_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/?shell#list-extractors\" rel=\"nofollow\">List extractors</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s1\">'-created'</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>page</em></td>\n<td><code>int</code></td>\n<td>Specifies which page to get.</td>\n</tr>\n<tr>\n<td><em>per_page</em></td>\n<td><code>int</code></td>\n<td>Specifies how many items per page will be returned.</td>\n</tr>\n<tr>\n<td><em>order_by</em></td>\n<td><code>string or list</code></td>\n<td>Specifies the ordering criteria. It can either be a <em>string</em> for single criteria ordering or a <em>list of strings</em> for more than one. Each <em>string</em> must be a valid field name; if you want inverse/descending order of the field prepend a <code>-</code> (dash) character. Some valid examples are: <code>'is_public'</code>, <code>'-name'</code> or <code>['-is_public', 'name']</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'-is_public'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">])</span>\n</pre>\n<h3>Workflows</h3>\n<h4><a href=\"https://monkeylearn.com/api/v3/#workflow-detail\" rel=\"nofollow\">Workflow detail</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">step_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>step_id</em></td>\n<td><code>int</code></td>\n<td>Step ID.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"s1\">'[STEP_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#create-workflow\" rel=\"nofollow\">Create workflow</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">custom_fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The name of the model.</td>\n</tr>\n<tr>\n<td><em>db_name</em></td>\n<td><code>str</code></td>\n<td>The name of the database where the data will be stored. The name must not already be in use by another database.</td>\n</tr>\n<tr>\n<td><em>steps</em></td>\n<td><code>list[dict]</code></td>\n<td>A list of step dicts.</td>\n</tr>\n<tr>\n<td><em>description</em></td>\n<td><code>str</code></td>\n<td>The description of the model.</td>\n</tr>\n<tr>\n<td><em>webhook_url</em></td>\n<td><code>str</code></td>\n<td>An URL that will be called when an action is triggered.</td>\n</tr>\n<tr>\n<td><em>custom_fields</em></td>\n<td><code>[]</code></td>\n<td>A list of custom_field dicts that represent user defined fields that come with the input data and that will be saved. It does not include the mandatory <code>text</code> field.</td>\n</tr>\n<tr>\n<td><em>sources</em></td>\n<td><code>{}</code></td>\n<td>An object that represents the data sources of the workflow.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Example Workflow'</span><span class=\"p\">,</span>\n    <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'example_workflow'</span><span class=\"p\">,</span>\n    <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[{</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"s1\">'sentiment'</span><span class=\"p\">,</span>\n        <span class=\"n\">model_id</span><span class=\"p\">:</span> <span class=\"s1\">'cl_pi3C7JiL'</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"s1\">'keywords'</span><span class=\"p\">,</span>\n        <span class=\"n\">model_id</span><span class=\"p\">:</span> <span class=\"s1\">'ex_YCya9nrn'</span>\n    <span class=\"p\">}])</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#delete-workflow\" rel=\"nofollow\">Delete workflow</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#step-detail\" rel=\"nofollow\">Step detail</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">step_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>step_id</em></td>\n<td><code>int</code></td>\n<td>Step ID.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">STEP_ID</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#create-step\" rel=\"nofollow\">Create step</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">step_model_id</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                         <span class=\"n\">conditions</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The name of the new step.</td>\n</tr>\n<tr>\n<td><em>step_model_id</em></td>\n<td><code>str</code></td>\n<td>The ID of the MonkeyLearn model that will run in this step. Must be an existing classifier or extractor.</td>\n</tr>\n<tr>\n<td><em>input</em></td>\n<td><code>str</code></td>\n<td>Where the input text to use in this step comes from. It can be either the name of a step or <code>input_data</code> (the default), which means that the input will be the original text.</td>\n</tr>\n<tr>\n<td><em>conditions</em></td>\n<td><code>list[dict]</code></td>\n<td>A list of condition dicts that indicate whether this step should execute or not. All the conditions in the list must be true for the step to execute.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span>  <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'sentiment'</span><span class=\"p\">,</span>\n                                     <span class=\"n\">step_model_id</span><span class=\"o\">=</span><span class=\"s1\">'cl_pi3C7JiL'</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#delete-step\" rel=\"nofollow\">Delete step</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">step_id</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>step_id</em></td>\n<td><code>int</code></td>\n<td>Step ID.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">STEP_ID</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#upload-workflow-data\" rel=\"nofollow\">Upload workflow data</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>data</em></td>\n<td><code>list[dict]</code></td>\n<td>A list of dicts with the keys described below.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p><code>data</code> dict keys:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>A <em>string</em> of the text to upload.</td>\n</tr>\n<tr>\n<td>[custom field name]</td>\n<td>The value for a custom field for this text. The type of the value must be the one specified when the field was created.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'text 1'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n          <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'text 2'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}]</span>\n<span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#list-workflow-data\" rel=\"nofollow\">List workflow data</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">batch_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">is_processed</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                    <span class=\"n\">sent_to_process_date_from</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sent_to_process_date_to</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                    <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page</td>\n<td><code>int</code></td>\n<td>The page number to be retrieved.</td>\n</tr>\n<tr>\n<td>per_page</td>\n<td><code>int</code></td>\n<td>The maximum number of items the page should have. The maximum allowed value is <code>50</code>.</td>\n</tr>\n<tr>\n<td>batch_id</td>\n<td><code>int</code></td>\n<td>The ID of the batch to retrieve. If unspecified, data from all batches is shown.</td>\n</tr>\n<tr>\n<td>is_processed</td>\n<td><code>bool</code></td>\n<td>Whether to return data that has been processed or data that has not been processed yet. If unspecified, both are shown indistinctly.</td>\n</tr>\n<tr>\n<td>sent_to_process_date_from</td>\n<td><code>str</code></td>\n<td>An <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" rel=\"nofollow\">ISO formatted date</a> which specifies the oldest <code>sent_date</code> of the data to be retrieved.</td>\n</tr>\n<tr>\n<td>sent_to_process_date_to</td>\n<td><code>str</code></td>\n<td>An <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" rel=\"nofollow\">ISO formatted date</a> which specifies the most recent <code>sent_date</code> of the data to be retrieved.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span> <span class=\"n\">batch_id</span><span class=\"o\">=</span><span class=\"mi\">1839</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4><a href=\"https://monkeylearn.com/api/v3/#create-custom-field\" rel=\"nofollow\">Create custom field</a></h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">MonkeyLearn</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">custom_fields</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data_type</span><span class=\"p\">,</span> <span class=\"n\">retry_if_throttled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>model_id</em></td>\n<td><code>str</code></td>\n<td>Workflow ID. It always starts with <code>'wf'</code>, for example, <code>'wf_oJNMkt2V'</code>.</td>\n</tr>\n<tr>\n<td><em>name</em></td>\n<td><code>str</code></td>\n<td>The name of the new custom field.</td>\n</tr>\n<tr>\n<td><em>data_type</em></td>\n<td><code>str</code></td>\n<td>The type of the data of the field. It must be one of <code>string</code>, <code>date</code>, <code>text</code>, <code>integer</code>, <code>float</code>, <code>bool</code>.</td>\n</tr>\n<tr>\n<td><em>retry_if_throttled</em></td>\n<td><code>bool</code></td>\n<td>If a request is <a href=\"https://monkeylearn.com/api/v3/#query-limits\" rel=\"nofollow\">throttled</a>, sleep and retry the request.</td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">workflows</span><span class=\"o\">.</span><span class=\"n\">custom_fields</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s1\">'[MODEL_ID]'</span><span class=\"p\">,</span>  <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'rating'</span><span class=\"p\">,</span>\n                                             <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s1\">'integer'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6677003, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "c1bbb0df09718ef545a93404788f63f0", "sha256": "89c36b1ca0d699dbaf3248c129fefea9082885e2070d824500ed56501b990ccf"}, "downloads": -1, "filename": "monkeylearn-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c1bbb0df09718ef545a93404788f63f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3465, "upload_time": "2015-11-20T15:12:57", "upload_time_iso_8601": "2015-11-20T15:12:57.307435Z", "url": "https://files.pythonhosted.org/packages/a2/d3/bab4e403c1fa3c34a3a1a80cf4e94defd70db5e68c95d6c413410dbfd3c8/monkeylearn-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ea8584a2d7f3ac41147e61478da1c9ce", "sha256": "c03e787eaa573b6d6c97a3f39839797f3c6f01d8b87cb17813cba6c710282b0b"}, "downloads": -1, "filename": "monkeylearn-0.2.tar.gz", "has_sig": false, "md5_digest": "ea8584a2d7f3ac41147e61478da1c9ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3500, "upload_time": "2015-12-03T17:16:22", "upload_time_iso_8601": "2015-12-03T17:16:22.617956Z", "url": "https://files.pythonhosted.org/packages/f4/bd/f958c6cf5899e160e39cdba42a4f7fa02aca395940c499a9f7d80157f44d/monkeylearn-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "786f06ede36c7d7a38cf5969267ba232", "sha256": "8293aaee2b1bc311a5a4c811c638f364e5930a32ed60bae01640b121e8315ba1"}, "downloads": -1, "filename": "monkeylearn-0.2.1.tar.gz", "has_sig": false, "md5_digest": "786f06ede36c7d7a38cf5969267ba232", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3507, "upload_time": "2015-12-07T14:38:02", "upload_time_iso_8601": "2015-12-07T14:38:02.413577Z", "url": "https://files.pythonhosted.org/packages/5d/83/7d618710f3e19f16b33ff1488b66448306467d24d5559385aa863a390132/monkeylearn-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "220963843ce939e920d784aebe201c57", "sha256": "eeb30aaf81ab6d2f2c04be15b8780a3d6da23c14e4637c3e27de9ebd9709685f"}, "downloads": -1, "filename": "monkeylearn-0.2.2.tar.gz", "has_sig": false, "md5_digest": "220963843ce939e920d784aebe201c57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3521, "upload_time": "2016-03-03T14:47:54", "upload_time_iso_8601": "2016-03-03T14:47:54.789147Z", "url": "https://files.pythonhosted.org/packages/a6/e5/b7d55d129b2b6bda6e9a02b2e8053ab4a18d41172f12142975e1001d737b/monkeylearn-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "56f6e1e1785685e806db63c148fdaba2", "sha256": "87aa18650efa5739c370293a68e8d665de532412e44fc504c0345166ec2d89ed"}, "downloads": -1, "filename": "monkeylearn-0.2.3.tar.gz", "has_sig": false, "md5_digest": "56f6e1e1785685e806db63c148fdaba2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3742, "upload_time": "2016-03-04T15:18:14", "upload_time_iso_8601": "2016-03-04T15:18:14.133759Z", "url": "https://files.pythonhosted.org/packages/46/8f/f78658387b98713e93009bf6ef1913f6db3659fa60148a57866ba71c5cdc/monkeylearn-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "d2c760b4d8236e266165928da5fa63fa", "sha256": "7ba44ad6ea6f89a7120b4b6cb54eb9f842930055005cf5187b785cd53156df9f"}, "downloads": -1, "filename": "monkeylearn-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d2c760b4d8236e266165928da5fa63fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3841, "upload_time": "2016-03-10T20:00:12", "upload_time_iso_8601": "2016-03-10T20:00:12.885842Z", "url": "https://files.pythonhosted.org/packages/e2/51/9f464e73c49f57f9d3ee3041fe102da72aafa8b8bc9d77696c376d7a6bba/monkeylearn-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "331c6bf7334e3917a43002bfd9a879f3", "sha256": "2585775fd5814409a0bacd534d82054c480e9346196b801b133726d9ba133ac0"}, "downloads": -1, "filename": "monkeylearn-0.2.5.tar.gz", "has_sig": false, "md5_digest": "331c6bf7334e3917a43002bfd9a879f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3839, "upload_time": "2016-04-04T14:30:02", "upload_time_iso_8601": "2016-04-04T14:30:02.037451Z", "url": "https://files.pythonhosted.org/packages/e8/1a/f66ade481d8d4a72f9483d6ba318369e7a6e57aae7a66edcd227c9f569ed/monkeylearn-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5420b17d4d994c935c3c157dc50fc704", "sha256": "50709de48aeb11252383b1b8244ca338e53449a81c60b570bf1f4a9cd3434a7a"}, "downloads": -1, "filename": "monkeylearn-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5420b17d4d994c935c3c157dc50fc704", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4194, "upload_time": "2016-04-29T16:06:46", "upload_time_iso_8601": "2016-04-29T16:06:46.602216Z", "url": "https://files.pythonhosted.org/packages/73/12/76386eec7d193fbf839022064a207515aae9171f11c607db697c21a774d4/monkeylearn-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ff878b827a5c25598366019f1f8d0cb4", "sha256": "2c343fe1f3cb837bfa07a7fdf4f5347fbaf441f893b98a4feef34b03e958a8c3"}, "downloads": -1, "filename": "monkeylearn-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ff878b827a5c25598366019f1f8d0cb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4450, "upload_time": "2016-05-27T14:02:49", "upload_time_iso_8601": "2016-05-27T14:02:49.793238Z", "url": "https://files.pythonhosted.org/packages/68/43/2fd26f76df80e8df0395156194afbeb1963b0042f58286a7d94f0cb608d5/monkeylearn-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "dabbbf752886ed02527c13db1ddee12b", "sha256": "84eeaea1e0e57fda983acdf4e4ff2360faf7fecffea5b7f9fd87946876a8a66e"}, "downloads": -1, "filename": "monkeylearn-0.3.2.tar.gz", "has_sig": false, "md5_digest": "dabbbf752886ed02527c13db1ddee12b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4533, "upload_time": "2016-06-15T13:32:31", "upload_time_iso_8601": "2016-06-15T13:32:31.109330Z", "url": "https://files.pythonhosted.org/packages/96/39/e47e8edda702ec1f792971491e5d900ee62823a36b46015841c3091dde58/monkeylearn-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "fcf131cc026a145c41265e76f7d0ffd5", "sha256": "9f6bbc072e9f01af5e3e750ca82c569be7566869d8a70fd7c034875a156231b7"}, "downloads": -1, "filename": "monkeylearn-0.3.3.tar.gz", "has_sig": false, "md5_digest": "fcf131cc026a145c41265e76f7d0ffd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4587, "upload_time": "2016-08-05T13:54:50", "upload_time_iso_8601": "2016-08-05T13:54:50.079522Z", "url": "https://files.pythonhosted.org/packages/89/cd/f980226d1b7d44aa49c99096943049d8596a43598478d642717d845ef132/monkeylearn-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "7696d3164df04537ebfa512fe9a8a0f5", "sha256": "f8c739e56e32e4fe916ed88430f8b1675d6a6830070accc2fecc4c98119c87fa"}, "downloads": -1, "filename": "monkeylearn-0.3.4.tar.gz", "has_sig": false, "md5_digest": "7696d3164df04537ebfa512fe9a8a0f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4583, "upload_time": "2016-08-30T21:20:06", "upload_time_iso_8601": "2016-08-30T21:20:06.977458Z", "url": "https://files.pythonhosted.org/packages/25/75/86fe2712b1f2ebead6b360d0e8671355df344b4dcc084480d18233bfadca/monkeylearn-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "f0fa2df6affceff6741c3f0e87fac939", "sha256": "171d14c6ba93d281aabafa2a7b477b49fc701265853c0cf363055b4ed968fce9"}, "downloads": -1, "filename": "monkeylearn-0.3.5.tar.gz", "has_sig": false, "md5_digest": "f0fa2df6affceff6741c3f0e87fac939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4584, "upload_time": "2016-08-30T21:24:33", "upload_time_iso_8601": "2016-08-30T21:24:33.527175Z", "url": "https://files.pythonhosted.org/packages/7f/88/dfdd7414f54234d736c0f0b6d90d405c3d3c0e2d85e6c376475ca59f0606/monkeylearn-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "ac04d230c39bc9f321cc53a5faaee72f", "sha256": "d22c860596bc89241f86d3a270c6ead794950d4ecfad893d7cf699448e54aaab"}, "downloads": -1, "filename": "monkeylearn-0.3.6.tar.gz", "has_sig": false, "md5_digest": "ac04d230c39bc9f321cc53a5faaee72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4599, "upload_time": "2017-01-04T20:02:23", "upload_time_iso_8601": "2017-01-04T20:02:23.735247Z", "url": "https://files.pythonhosted.org/packages/07/3f/bc121332217ee98745c04e343a6804605b3889b1641ef472e72d3ad9d99b/monkeylearn-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "cf6141796b1ddaed70a31b72051b7050", "sha256": "5b91c79b00f74826a67ecdeadcd184ccdc656ad5d210dca3ee75c913985c5076"}, "downloads": -1, "filename": "monkeylearn-0.3.7.tar.gz", "has_sig": false, "md5_digest": "cf6141796b1ddaed70a31b72051b7050", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4611, "upload_time": "2017-03-21T18:18:58", "upload_time_iso_8601": "2017-03-21T18:18:58.586617Z", "url": "https://files.pythonhosted.org/packages/7f/88/43514b17a0b5e7f26e45dcbbde20a5a01d09fbfc9a64eea86436615fce1f/monkeylearn-0.3.7.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "fe564381d72dc7e17ab307fcbad1dcf9", "sha256": "dda8e71b066c8621ac98c65afac0ae3919591573e1311e7f3aa584e351b4d330"}, "downloads": -1, "filename": "monkeylearn-3.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "fe564381d72dc7e17ab307fcbad1dcf9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7569, "upload_time": "2018-05-28T19:12:48", "upload_time_iso_8601": "2018-05-28T19:12:48.868884Z", "url": "https://files.pythonhosted.org/packages/51/dd/17dc69c421d4b4f669a059f25060935d6fc7fb6bf4f2857d32e3fa0184e8/monkeylearn-3.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad37ef7a34ece113f4c0a943c833cead", "sha256": "32c1a9e2052c14c41f93f06d2dda0ff42c8e85569bbdd4832c8f9519b2b5c670"}, "downloads": -1, "filename": "monkeylearn-3.0.0.tar.gz", "has_sig": false, "md5_digest": "ad37ef7a34ece113f4c0a943c833cead", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9498, "upload_time": "2018-05-28T19:12:50", "upload_time_iso_8601": "2018-05-28T19:12:50.173464Z", "url": "https://files.pythonhosted.org/packages/e9/37/73618c228fd24252a2e7ec5940b3c48c85bfff2fe98a926800143d5d6463/monkeylearn-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "d9d64ffb5e3e73669cd87faec170a69f", "sha256": "87050fcc9574aa1286ed47036852f7ee12279e50bcb6ae2d2d8a9b83b3fdbfd7"}, "downloads": -1, "filename": "monkeylearn-3.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d9d64ffb5e3e73669cd87faec170a69f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12639, "upload_time": "2018-07-04T19:30:28", "upload_time_iso_8601": "2018-07-04T19:30:28.946886Z", "url": "https://files.pythonhosted.org/packages/0b/c7/2b43aacc7ac085c1083153473d9ce63a2f8a715eb3d56058316a7f34280b/monkeylearn-3.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "251e3f9077163f75b846f1c076c2848e", "sha256": "9a608fd831d3cd0a07fc4b4856dee50bc531d96030591fd6b6de73340f93a7b2"}, "downloads": -1, "filename": "monkeylearn-3.0.1.tar.gz", "has_sig": false, "md5_digest": "251e3f9077163f75b846f1c076c2848e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17944, "upload_time": "2018-07-04T19:30:30", "upload_time_iso_8601": "2018-07-04T19:30:30.526812Z", "url": "https://files.pythonhosted.org/packages/0c/35/564dbf5bfde32ead9adfa579c47a502953681c7381a0548f44c4b9269b2a/monkeylearn-3.0.1.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "e6f0a778010cb5a7fd33b82fa4bfeff9", "sha256": "0c771193ab9eb3d258478b16d513bfbfe98e77d1cce1055dcb623071ea882674"}, "downloads": -1, "filename": "monkeylearn-3.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "e6f0a778010cb5a7fd33b82fa4bfeff9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12761, "upload_time": "2018-07-13T20:26:44", "upload_time_iso_8601": "2018-07-13T20:26:44.400086Z", "url": "https://files.pythonhosted.org/packages/15/87/908dc2b84d00f724bfd543b74bb1a66857d9394e48f1cb2121b7254c07c4/monkeylearn-3.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98a85151bb6ac256a39447c83b591bd5", "sha256": "25a7f04fd75acc2c566f7ce3659f5585da04994130a88ea3770db5838ace6bda"}, "downloads": -1, "filename": "monkeylearn-3.1.0.tar.gz", "has_sig": false, "md5_digest": "98a85151bb6ac256a39447c83b591bd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18515, "upload_time": "2018-07-13T20:26:45", "upload_time_iso_8601": "2018-07-13T20:26:45.990621Z", "url": "https://files.pythonhosted.org/packages/a5/4b/303e24f6215da0de202a6fdcf97642745a322fe59f8d7802ebf6028fab61/monkeylearn-3.1.0.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "5311e51f75d70951e16ee2b7031a7641", "sha256": "8d85df3d91ecf4004f27336bac2e73b8ba273acadae37d2445057c635c367da6"}, "downloads": -1, "filename": "monkeylearn-3.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "5311e51f75d70951e16ee2b7031a7641", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13395, "upload_time": "2018-07-26T18:28:18", "upload_time_iso_8601": "2018-07-26T18:28:18.391988Z", "url": "https://files.pythonhosted.org/packages/b5/61/125b7264d7cbfee62a70592a57038f9c41d956e5e4ed4ea8ead218918dd7/monkeylearn-3.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a97a9971e52a038bc8753b73702b246", "sha256": "66450e555d1c8bb4b165fce10d486559205fae90e69bfe47a8d3ba0772f1fcb5"}, "downloads": -1, "filename": "monkeylearn-3.2.0.tar.gz", "has_sig": false, "md5_digest": "7a97a9971e52a038bc8753b73702b246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19318, "upload_time": "2018-07-26T18:28:19", "upload_time_iso_8601": "2018-07-26T18:28:19.786659Z", "url": "https://files.pythonhosted.org/packages/86/60/120dea55e50feb3cf1a39cf30312c8c4b470149ab554df4530ee9a86d58c/monkeylearn-3.2.0.tar.gz", "yanked": false}], "3.2.1": [{"comment_text": "", "digests": {"md5": "9bc161ac227fba1291205b3776841394", "sha256": "c6a7f6ad70a4bc388e813a7dd01a3d4fcc626ee7973e769a2876c46ca2b361e4"}, "downloads": -1, "filename": "monkeylearn-3.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "9bc161ac227fba1291205b3776841394", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13592, "upload_time": "2018-09-13T20:52:41", "upload_time_iso_8601": "2018-09-13T20:52:41.065034Z", "url": "https://files.pythonhosted.org/packages/f8/83/6ee07715956ad4bfc6090c2e6724f59b4a7ef5f9eb56d1959d3de8029ad4/monkeylearn-3.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfa5299d1aeb00c8a750007bfea21ad7", "sha256": "4e5dbc4f27e441fabe448eb238e17ad2037562774bf0d81e4c043537ec6b408b"}, "downloads": -1, "filename": "monkeylearn-3.2.1.tar.gz", "has_sig": false, "md5_digest": "cfa5299d1aeb00c8a750007bfea21ad7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20032, "upload_time": "2018-09-13T20:52:43", "upload_time_iso_8601": "2018-09-13T20:52:43.025131Z", "url": "https://files.pythonhosted.org/packages/b7/10/6921cd269f9123ef65bc31b57d0e1c7a8e0a1411efdbe6094bb81b69fac8/monkeylearn-3.2.1.tar.gz", "yanked": false}], "3.2.2": [{"comment_text": "", "digests": {"md5": "799939473b0625852fb7a2443d0e6407", "sha256": "df91aa1c945332a4f8141c12c294276e4a3848e2843e358540f08f852c37d952"}, "downloads": -1, "filename": "monkeylearn-3.2.2-py2.7.egg", "has_sig": false, "md5_digest": "799939473b0625852fb7a2443d0e6407", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 27560, "upload_time": "2018-12-28T16:56:57", "upload_time_iso_8601": "2018-12-28T16:56:57.861768Z", "url": "https://files.pythonhosted.org/packages/cb/7f/1be555115b5cd13d113d30b4d28a8bd7ad344eabd066319fae5273399e73/monkeylearn-3.2.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ad6aab408fdbd8117c6b7295a61d782", "sha256": "42e99ebec98015252100e0fd769554b313c7335fc7ff4c14db8216e3e0e631b6"}, "downloads": -1, "filename": "monkeylearn-3.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "2ad6aab408fdbd8117c6b7295a61d782", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20804, "upload_time": "2018-12-28T16:56:54", "upload_time_iso_8601": "2018-12-28T16:56:54.319787Z", "url": "https://files.pythonhosted.org/packages/ee/65/79b3faa6375699102a30913b2d9bc14c2f30735ad3001f7607d1e7d3fa67/monkeylearn-3.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c79f4548e70af6d9ccf231a6c83d7c91", "sha256": "40e31f47a581f8aac9522a0d7f79e4328c9e6a229882d841e8d6e3a839530387"}, "downloads": -1, "filename": "monkeylearn-3.2.2.tar.gz", "has_sig": false, "md5_digest": "c79f4548e70af6d9ccf231a6c83d7c91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15475, "upload_time": "2018-12-28T16:56:59", "upload_time_iso_8601": "2018-12-28T16:56:59.810869Z", "url": "https://files.pythonhosted.org/packages/cc/9b/4a9b319cad340c401dbeccfc95c150c1d69a437a4aa3778e947d66c61442/monkeylearn-3.2.2.tar.gz", "yanked": false}], "3.2.3": [{"comment_text": "", "digests": {"md5": "7b20508f5978e384ba561712707d8380", "sha256": "57ada485f22b73ba3786b92fdd02d5ad9bdd8f624738bf86f70d66cf8115a1f6"}, "downloads": -1, "filename": "monkeylearn-3.2.3-py2-none-any.whl", "has_sig": false, "md5_digest": "7b20508f5978e384ba561712707d8380", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20892, "upload_time": "2018-12-28T21:12:40", "upload_time_iso_8601": "2018-12-28T21:12:40.873227Z", "url": "https://files.pythonhosted.org/packages/92/e5/9e2069241ce75148ada11398b09a1c37abb1858d75aa5a4117e720be36e2/monkeylearn-3.2.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9ac4e274c266571996aa09e05f90f03", "sha256": "1c528155eba9f8ee518caa1212f1750681de6b6ac79d384b02358641f11b8318"}, "downloads": -1, "filename": "monkeylearn-3.2.3.tar.gz", "has_sig": false, "md5_digest": "a9ac4e274c266571996aa09e05f90f03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15550, "upload_time": "2018-12-28T21:12:43", "upload_time_iso_8601": "2018-12-28T21:12:43.366127Z", "url": "https://files.pythonhosted.org/packages/48/8a/abcb544ca733ae680168a5c0d38b1c3e2718e3eaaadcd643adb2a3a29de9/monkeylearn-3.2.3.tar.gz", "yanked": false}], "3.2.4": [{"comment_text": "", "digests": {"md5": "4e36ec0802df3208e3fcc18dfaaa7c88", "sha256": "4a3ec5d0cefdc90355696b8394b248bc0f46773172efeea59e5b995718135b88"}, "downloads": -1, "filename": "monkeylearn-3.2.4-py2-none-any.whl", "has_sig": false, "md5_digest": "4e36ec0802df3208e3fcc18dfaaa7c88", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15547, "upload_time": "2019-01-11T20:29:13", "upload_time_iso_8601": "2019-01-11T20:29:13.912243Z", "url": "https://files.pythonhosted.org/packages/57/bf/a0d89f78c0f869e0534583286d7beda817783bc80732334cfab14bc9343e/monkeylearn-3.2.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a15b7afc5a93215d6a5c9dd688e3d3f", "sha256": "48d39efb820b14e822377669547e9dc29e94cf6f79025915eb2be171f08f9e35"}, "downloads": -1, "filename": "monkeylearn-3.2.4.tar.gz", "has_sig": false, "md5_digest": "4a15b7afc5a93215d6a5c9dd688e3d3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17548, "upload_time": "2019-01-11T20:29:15", "upload_time_iso_8601": "2019-01-11T20:29:15.680555Z", "url": "https://files.pythonhosted.org/packages/d8/c4/b4c9a37214faa5b6c15c4764e16ccdba176e195728b43ad2a39113541cc1/monkeylearn-3.2.4.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "40d3bd40ec41a762784e5ecacf5ee9f0", "sha256": "5f4146b4fbb8cc24712a77c04e10b9ec4fe032c22392a24e2643249b55ff9828"}, "downloads": -1, "filename": "monkeylearn-3.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "40d3bd40ec41a762784e5ecacf5ee9f0", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16868, "upload_time": "2019-06-06T19:01:02", "upload_time_iso_8601": "2019-06-06T19:01:02.400786Z", "url": "https://files.pythonhosted.org/packages/c8/14/4567bb0671ea22d3224b14b5defd7c81330c05d6c75decef77e1d4ed032a/monkeylearn-3.4.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b7ce3c2d14e56fe4cf9656e4d89d79e", "sha256": "6f93084520e44b19bc701f8c23f4c7316646a51120fe549c78613ee27a0b11a4"}, "downloads": -1, "filename": "monkeylearn-3.4.0.tar.gz", "has_sig": false, "md5_digest": "4b7ce3c2d14e56fe4cf9656e4d89d79e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25094, "upload_time": "2019-06-06T19:01:05", "upload_time_iso_8601": "2019-06-06T19:01:05.285513Z", "url": "https://files.pythonhosted.org/packages/21/4f/c4972e36c85b05a9451ad12df2a4bcd001b972c538e6a9170adf8fbba2e8/monkeylearn-3.4.0.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "538b3fce1759a4085cbf4dc0fbba0535", "sha256": "80cdb5b814a28619f8232b24cdd6a5f2cd01636c66b727d5162f73f46446468e"}, "downloads": -1, "filename": "monkeylearn-3.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "538b3fce1759a4085cbf4dc0fbba0535", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17020, "upload_time": "2019-06-10T21:06:02", "upload_time_iso_8601": "2019-06-10T21:06:02.366449Z", "url": "https://files.pythonhosted.org/packages/aa/f0/97de327575000e9503d87281a90e7f31a9eb7639265679be78b4ae628fec/monkeylearn-3.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93249608e34031f9465eb6dc520e3573", "sha256": "07feddf5816ec1df98f5749d823f3b1a25639d5ba2258ef69b967fb1c8773d36"}, "downloads": -1, "filename": "monkeylearn-3.5.0.tar.gz", "has_sig": false, "md5_digest": "93249608e34031f9465eb6dc520e3573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25402, "upload_time": "2019-06-10T21:06:04", "upload_time_iso_8601": "2019-06-10T21:06:04.826781Z", "url": "https://files.pythonhosted.org/packages/10/a8/26ae61f740287613ed8ed5a89193c6eee19cda7292cee911b2030e4c2b9b/monkeylearn-3.5.0.tar.gz", "yanked": false}], "3.5.1": [{"comment_text": "", "digests": {"md5": "ff8e3c0cbea87399a940aa5da266acb2", "sha256": "9b29035f9c0f54fc1de514b40a6a90c5767a9198a358e9e4e426b8eff62bab40"}, "downloads": -1, "filename": "monkeylearn-3.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "ff8e3c0cbea87399a940aa5da266acb2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17018, "upload_time": "2019-10-17T21:46:33", "upload_time_iso_8601": "2019-10-17T21:46:33.585195Z", "url": "https://files.pythonhosted.org/packages/e3/8a/82bf6af9f9cd588d90d662636b71739826f27b8853ce9f16e166feff77ea/monkeylearn-3.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eefb0bfb5e6906e9ac01af53446e8a57", "sha256": "e48acceb14ae5f9727971803158b42af26ea8a8d13807ca49c5686e570533a1e"}, "downloads": -1, "filename": "monkeylearn-3.5.1.tar.gz", "has_sig": false, "md5_digest": "eefb0bfb5e6906e9ac01af53446e8a57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25410, "upload_time": "2019-10-17T21:46:36", "upload_time_iso_8601": "2019-10-17T21:46:36.593710Z", "url": "https://files.pythonhosted.org/packages/c8/1a/43a49c824e8d727033304ff642da3d16abe25e048dd0a8d61e70fce6094d/monkeylearn-3.5.1.tar.gz", "yanked": false}], "3.5.2": [{"comment_text": "", "digests": {"md5": "70e05bd17930217e4ca5ccf40f1fade8", "sha256": "9e2392753465d109b61772797ac5a4a564729f5e47c903fb98b4119f8518754e"}, "downloads": -1, "filename": "monkeylearn-3.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "70e05bd17930217e4ca5ccf40f1fade8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16939, "upload_time": "2020-02-21T18:43:30", "upload_time_iso_8601": "2020-02-21T18:43:30.559402Z", "url": "https://files.pythonhosted.org/packages/43/1e/c701a7f8961dcb66c7493b6760e3645882823eadeb522d201c2d27cb5d58/monkeylearn-3.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65dbc13e2a831c46b9c0804578b84cf9", "sha256": "ab9d8023e08feb49ee187d6dc7de0af6fa4bc6e42b4ec548579b87d757567ebb"}, "downloads": -1, "filename": "monkeylearn-3.5.2.tar.gz", "has_sig": false, "md5_digest": "65dbc13e2a831c46b9c0804578b84cf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25226, "upload_time": "2020-02-21T18:43:33", "upload_time_iso_8601": "2020-02-21T18:43:33.062928Z", "url": "https://files.pythonhosted.org/packages/85/71/402de0a734641f015facd3d6cb24fce13c6b4bf67b6871d5425820c3cccd/monkeylearn-3.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70e05bd17930217e4ca5ccf40f1fade8", "sha256": "9e2392753465d109b61772797ac5a4a564729f5e47c903fb98b4119f8518754e"}, "downloads": -1, "filename": "monkeylearn-3.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "70e05bd17930217e4ca5ccf40f1fade8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16939, "upload_time": "2020-02-21T18:43:30", "upload_time_iso_8601": "2020-02-21T18:43:30.559402Z", "url": "https://files.pythonhosted.org/packages/43/1e/c701a7f8961dcb66c7493b6760e3645882823eadeb522d201c2d27cb5d58/monkeylearn-3.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65dbc13e2a831c46b9c0804578b84cf9", "sha256": "ab9d8023e08feb49ee187d6dc7de0af6fa4bc6e42b4ec548579b87d757567ebb"}, "downloads": -1, "filename": "monkeylearn-3.5.2.tar.gz", "has_sig": false, "md5_digest": "65dbc13e2a831c46b9c0804578b84cf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25226, "upload_time": "2020-02-21T18:43:33", "upload_time_iso_8601": "2020-02-21T18:43:33.062928Z", "url": "https://files.pythonhosted.org/packages/85/71/402de0a734641f015facd3d6cb24fce13c6b4bf67b6871d5425820c3cccd/monkeylearn-3.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:09 2020"}