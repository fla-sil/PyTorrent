{"info": {"author": "Matt Molyneaux", "author_email": "moggers87+git@moggers87.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=================\nDjango Sendfile 2\n=================\n\n.. image:: https://travis-ci.org/moggers87/django-sendfile2.svg?branch=master\n   :target: https://travis-ci.org/moggers87/django-sendfile2\n\n- Download: https://pypi.org/project/django-sendfile2/\n- Source: https://github.com/moggers87/django-sendfile2\n\nThis is a wrapper around web-server specific methods for sending files to web\nclients.  This is useful when Django needs to check permissions associated\nfiles, but does not want to serve the actual bytes of the file itself.  i.e. as\nserving large files is not what Django is made for.\n\nNote this should not be used for regular file serving (e.g. css etc), only for\ncases where you need Django to do some work before serving the actual file.\n\nThe interface is a single function `sendfile(request, filename,\nattachment=False, attachment_filename=None)`, which returns a HTTPResponse\nobject.\n\n::\n\n    from django_sendfile import sendfile\n    \n    # send myfile.pdf to user\n    return sendfile(request, '/home/john/myfile.pdf')\n\n    # send myfile.pdf as an attachment (with name myfile.pdf)\n    return sendfile(request, '/home/john/myfile.pdf', attachment=True)\n    \n    # send myfile.pdf as an attachment with a different name\n    return sendfile(request, '/home/john/myfile.pdf', attachment=True, attachment_filename='full-name.pdf')\n\n\n\nBackends are specified using the setting `SENDFILE_BACKEND`.  Currently\navailable backends are:\n\n* `sendfile.backends.development` - for use with Django development server\n  only. DO NOT USE IN PRODUCTION\n* `sendfile.backends.simple` - \"simple\" backend that uses Django file objects\n  to attempt to stream files from disk (note middleware may cause files to be\n  loaded fully into memory)\n* `sendfile.backends.xsendfile` - sets X-Sendfile header (as used by\n  mod_xsendfile/Apache and Lighthttpd)\n* `sendfile.backends.mod_wsgi` - sets Location with 200 code to trigger\n  internal redirect (daemon mode mod_wsgi only - see below)\n* `sendfile.backends.nginx` - sets X-Accel-Redirect header to trigger internal\n  redirect to file\n\nIf you want to write your own backend simply create a module with a `sendfile`\nfunction matching:\n\n::\n\n   def sendfile(request, filename):\n       '''Return HttpResponse object for serving file'''\n\n\nThen specify the full path to the module in `SENDFILE_BACKEND`.  You only need\nto implement the sending of the file.  Adding the content-disposition headers\netc is done elsewhere.\n\nSupported Django Versions\n=========================\n\nDjango 2.1, 2.2, and 3.0 are currently supported by this library.\n\nSupported Python Versions\n=========================\n\nPython 3.5, 3.6. 3.7, and 3.8 are currently supported by this library.\n\nInstallation\n============\n\n::\n\n   pip install django-sendfile2\n\nFork\n====\n\nThis project is a fork of `django-sendfile\n<https://github.com/johnsensible/django-sendfile>`_. The original project\nappears mostly dead and has a number of outstanding bugs (especially with\nPython 3).\n\nDevelopment backend\n===================\n\nThe Development backend is only meant for use while writing code.  It uses\nDjango's static file serving code to do the job, which is only meant for\ndevelopment.  It reads the whole file into memory and the sends it down the\nwire - not good for big files, but OK when you are just testing things out.\n\nIt will work with the Django dev server and anywhere else you can run Django.\n\nSimple backend\n==============\n\nThis backend is one step up from the development backend.  It uses Django's\n`django.core.files.base.File` class to try and stream files from disk.  However\nsome middleware (e.g. GzipMiddleware) that rewrites content will causes the\nentire file to be loaded into memory.  So only use this backend if you are not\nusing middleware that rewrites content or you only have very small files.\n\n\nxsendfile backend\n=================\n\nInstall either mod_xsendfile_ in Apache_ or use Lighthttpd_.  You may need to\nconfigure mod_xsendfile_, but that should be as simple as:\n\n::\n\n    XSendFile On\n\nIn your virtualhost file/conf file.\n\n\nmod_wsgi backend\n================\n\nThe mod_wsgi backend will only work when using mod_wsgi in daemon mode, not in\nembedded mode.  It requires a bit more work to get it to do the same job as\nxsendfile though.  However some may find it easier to setup, as they don't need\nto compile and install mod_xsendfile_.\n\nFirstly there are two more Django settings:\n\n* `SENDFILE_ROOT` - this is a directoy where all files that will be used with\n  sendfile must be located\n* `SENDFILE_URL` - internal URL prefix for all files served via sendfile\n\nThese settings are needed as this backend makes mod_wsgi_ send an internal\nredirect, so we have to convert a file path into a URL.  This means that the\nfiles are visible via Apache_ by default too.  So we need to get Apache_ to\nhide those files from anything that's not an internal redirect.  To so this we\ncan use some mod_rewrite_ magic along these lines:\n\n::\n\n    RewriteEngine On\n    # see if we're on an internal redirect or not\n    RewriteCond %{THE_REQUEST} ^[\\S]+\\ /private/\n    RewriteRule ^/private/ - [F]\n\n    Alias /private/ /home/john/Development/myapp/private/\n    <Directory /home/john/Development/myapp/private/>\n        Order deny,allow\n        Allow from all\n    </Directory>\n\n\nIn this case I have also set:\n\n::\n\n    SENDFILE_ROOT = '/home/john/Development/myapp/private/'\n    SENDFILE_URL = '/private'\n\n\nAll files are stored in a folder called 'private'.  We forbid access to this\nfolder (`RewriteRule ^/private/ - [F]`) if someone tries to access it directly\n(`RewriteCond %{THE_REQUEST} ^[\\S]+\\ /private/`) by checking the original\nrequest (`THE_REQUEST`).\n\nAllegedly `IS_SUBREQ` can be used to `perform the same job\n<http://www.mail-archive.com/django-users@googlegroups.com/msg96718.html>`_,\nbut I was unable to get this working.\n\n\nNginx backend\n=============\n\nAs with the mod_wsgi backend you need to set two extra settings:\n\n* `SENDFILE_ROOT` - this is a directory where all files that will be used with\n  sendfile must be located\n* `SENDFILE_URL` - internal URL prefix for all files served via sendfile\n\nYou then need to configure Nginx to only allow internal access to the files you\nwish to serve.  More details on this `are here\n<https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/>`_.\n\nFor example though, if I use the Django settings:\n\n::\n\n    SENDFILE_ROOT = '/home/john/Development/django-sendfile/examples/protected_downloads/protected'\n    SENDFILE_URL = '/protected'\n\nThen the matching location block in nginx.conf would be:\n\n::\n\n    location /protected/ {\n      internal;\n      root   /home/john/Development/django-sendfile/examples/protected_downloads;\n    }\n\nYou need to pay attention to whether you have trailing slashes or not on the\nSENDFILE_URL and root values, otherwise you may not get the right URL being\nsent to Nginx and you may get 404s.  You should be able to see what file Nginx\nis trying to load in the error.log if this happens.  From there it should be\nfairly easy to work out what the right settings are.\n\nFunding\n=======\n\nIf you have found django-sendfile2 to be useful and would like to see its continued\ndevelopment, please consider `buying me a coffee\n<https://ko-fi.com/moggers87>`__.\n\n.. _mod_xsendfile: https://tn123.org/mod_xsendfile/\n.. _Apache: http://httpd.apache.org/\n.. _Lighthttpd: http://www.lighttpd.net/\n.. _mod_wsgi: http://www.modwsgi.org/\n.. _mod_rewrite: http://httpd.apache.org/docs/current/mod/mod_rewrite.html", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moggers87/django-sendfile2", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-sendfile2", "package_url": "https://pypi.org/project/django-sendfile2/", "platform": "", "project_url": "https://pypi.org/project/django-sendfile2/", "project_urls": {"Homepage": "https://github.com/moggers87/django-sendfile2"}, "release_url": "https://pypi.org/project/django-sendfile2/0.5.1/", "requires_dist": null, "requires_python": "", "summary": "Abstraction to offload file uploads to web-server (e.g. Apache with mod_xsendfile) once Django has checked permissions etc.", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/moggers87/django-sendfile2\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/moggers87/django-sendfile2.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/564b652a492d2ec4be208c5ebe9e39810325bb43/68747470733a2f2f7472617669732d63692e6f72672f6d6f676765727338372f646a616e676f2d73656e6466696c65322e7376673f6272616e63683d6d6173746572\"></a>\n<ul>\n<li>Download: <a href=\"https://pypi.org/project/django-sendfile2/\" rel=\"nofollow\">https://pypi.org/project/django-sendfile2/</a></li>\n<li>Source: <a href=\"https://github.com/moggers87/django-sendfile2\" rel=\"nofollow\">https://github.com/moggers87/django-sendfile2</a></li>\n</ul>\n<p>This is a wrapper around web-server specific methods for sending files to web\nclients.  This is useful when Django needs to check permissions associated\nfiles, but does not want to serve the actual bytes of the file itself.  i.e. as\nserving large files is not what Django is made for.</p>\n<p>Note this should not be used for regular file serving (e.g. css etc), only for\ncases where you need Django to do some work before serving the actual file.</p>\n<p>The interface is a single function <cite>sendfile(request, filename,\nattachment=False, attachment_filename=None)</cite>, which returns a HTTPResponse\nobject.</p>\n<pre>from django_sendfile import sendfile\n\n# send myfile.pdf to user\nreturn sendfile(request, '/home/john/myfile.pdf')\n\n# send myfile.pdf as an attachment (with name myfile.pdf)\nreturn sendfile(request, '/home/john/myfile.pdf', attachment=True)\n\n# send myfile.pdf as an attachment with a different name\nreturn sendfile(request, '/home/john/myfile.pdf', attachment=True, attachment_filename='full-name.pdf')\n</pre>\n<p>Backends are specified using the setting <cite>SENDFILE_BACKEND</cite>.  Currently\navailable backends are:</p>\n<ul>\n<li><cite>sendfile.backends.development</cite> - for use with Django development server\nonly. DO NOT USE IN PRODUCTION</li>\n<li><cite>sendfile.backends.simple</cite> - \u201csimple\u201d backend that uses Django file objects\nto attempt to stream files from disk (note middleware may cause files to be\nloaded fully into memory)</li>\n<li><cite>sendfile.backends.xsendfile</cite> - sets X-Sendfile header (as used by\nmod_xsendfile/Apache and Lighthttpd)</li>\n<li><cite>sendfile.backends.mod_wsgi</cite> - sets Location with 200 code to trigger\ninternal redirect (daemon mode mod_wsgi only - see below)</li>\n<li><cite>sendfile.backends.nginx</cite> - sets X-Accel-Redirect header to trigger internal\nredirect to file</li>\n</ul>\n<p>If you want to write your own backend simply create a module with a <cite>sendfile</cite>\nfunction matching:</p>\n<pre>def sendfile(request, filename):\n    '''Return HttpResponse object for serving file'''\n</pre>\n<p>Then specify the full path to the module in <cite>SENDFILE_BACKEND</cite>.  You only need\nto implement the sending of the file.  Adding the content-disposition headers\netc is done elsewhere.</p>\n<div id=\"supported-django-versions\">\n<h2>Supported Django Versions</h2>\n<p>Django 2.1, 2.2, and 3.0 are currently supported by this library.</p>\n</div>\n<div id=\"supported-python-versions\">\n<h2>Supported Python Versions</h2>\n<p>Python 3.5, 3.6. 3.7, and 3.8 are currently supported by this library.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install django-sendfile2\n</pre>\n</div>\n<div id=\"fork\">\n<h2>Fork</h2>\n<p>This project is a fork of <a href=\"https://github.com/johnsensible/django-sendfile\" rel=\"nofollow\">django-sendfile</a>. The original project\nappears mostly dead and has a number of outstanding bugs (especially with\nPython 3).</p>\n</div>\n<div id=\"development-backend\">\n<h2>Development backend</h2>\n<p>The Development backend is only meant for use while writing code.  It uses\nDjango\u2019s static file serving code to do the job, which is only meant for\ndevelopment.  It reads the whole file into memory and the sends it down the\nwire - not good for big files, but OK when you are just testing things out.</p>\n<p>It will work with the Django dev server and anywhere else you can run Django.</p>\n</div>\n<div id=\"simple-backend\">\n<h2>Simple backend</h2>\n<p>This backend is one step up from the development backend.  It uses Django\u2019s\n<cite>django.core.files.base.File</cite> class to try and stream files from disk.  However\nsome middleware (e.g. GzipMiddleware) that rewrites content will causes the\nentire file to be loaded into memory.  So only use this backend if you are not\nusing middleware that rewrites content or you only have very small files.</p>\n</div>\n<div id=\"xsendfile-backend\">\n<h2>xsendfile backend</h2>\n<p>Install either <a href=\"https://tn123.org/mod_xsendfile/\" rel=\"nofollow\">mod_xsendfile</a> in <a href=\"http://httpd.apache.org/\" rel=\"nofollow\">Apache</a> or use <a href=\"http://www.lighttpd.net/\" rel=\"nofollow\">Lighthttpd</a>.  You may need to\nconfigure <a href=\"https://tn123.org/mod_xsendfile/\" rel=\"nofollow\">mod_xsendfile</a>, but that should be as simple as:</p>\n<pre>XSendFile On\n</pre>\n<p>In your virtualhost file/conf file.</p>\n</div>\n<div id=\"mod-wsgi-backend\">\n<h2>mod_wsgi backend</h2>\n<p>The mod_wsgi backend will only work when using mod_wsgi in daemon mode, not in\nembedded mode.  It requires a bit more work to get it to do the same job as\nxsendfile though.  However some may find it easier to setup, as they don\u2019t need\nto compile and install <a href=\"https://tn123.org/mod_xsendfile/\" rel=\"nofollow\">mod_xsendfile</a>.</p>\n<p>Firstly there are two more Django settings:</p>\n<ul>\n<li><cite>SENDFILE_ROOT</cite> - this is a directoy where all files that will be used with\nsendfile must be located</li>\n<li><cite>SENDFILE_URL</cite> - internal URL prefix for all files served via sendfile</li>\n</ul>\n<p>These settings are needed as this backend makes <a href=\"http://www.modwsgi.org/\" rel=\"nofollow\">mod_wsgi</a> send an internal\nredirect, so we have to convert a file path into a URL.  This means that the\nfiles are visible via <a href=\"http://httpd.apache.org/\" rel=\"nofollow\">Apache</a> by default too.  So we need to get <a href=\"http://httpd.apache.org/\" rel=\"nofollow\">Apache</a> to\nhide those files from anything that\u2019s not an internal redirect.  To so this we\ncan use some <a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\" rel=\"nofollow\">mod_rewrite</a> magic along these lines:</p>\n<pre>RewriteEngine On\n# see if we're on an internal redirect or not\nRewriteCond %{THE_REQUEST} ^[\\S]+\\ /private/\nRewriteRule ^/private/ - [F]\n\nAlias /private/ /home/john/Development/myapp/private/\n&lt;Directory /home/john/Development/myapp/private/&gt;\n    Order deny,allow\n    Allow from all\n&lt;/Directory&gt;\n</pre>\n<p>In this case I have also set:</p>\n<pre>SENDFILE_ROOT = '/home/john/Development/myapp/private/'\nSENDFILE_URL = '/private'\n</pre>\n<p>All files are stored in a folder called \u2018private\u2019.  We forbid access to this\nfolder (<cite>RewriteRule ^/private/ - [F]</cite>) if someone tries to access it directly\n(<cite>RewriteCond %{THE_REQUEST} ^[S]+/private/</cite>) by checking the original\nrequest (<cite>THE_REQUEST</cite>).</p>\n<p>Allegedly <cite>IS_SUBREQ</cite> can be used to <a href=\"http://www.mail-archive.com/django-users@googlegroups.com/msg96718.html\" rel=\"nofollow\">perform the same job</a>,\nbut I was unable to get this working.</p>\n</div>\n<div id=\"nginx-backend\">\n<h2>Nginx backend</h2>\n<p>As with the mod_wsgi backend you need to set two extra settings:</p>\n<ul>\n<li><cite>SENDFILE_ROOT</cite> - this is a directory where all files that will be used with\nsendfile must be located</li>\n<li><cite>SENDFILE_URL</cite> - internal URL prefix for all files served via sendfile</li>\n</ul>\n<p>You then need to configure Nginx to only allow internal access to the files you\nwish to serve.  More details on this <a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/\" rel=\"nofollow\">are here</a>.</p>\n<p>For example though, if I use the Django settings:</p>\n<pre>SENDFILE_ROOT = '/home/john/Development/django-sendfile/examples/protected_downloads/protected'\nSENDFILE_URL = '/protected'\n</pre>\n<p>Then the matching location block in nginx.conf would be:</p>\n<pre>location /protected/ {\n  internal;\n  root   /home/john/Development/django-sendfile/examples/protected_downloads;\n}\n</pre>\n<p>You need to pay attention to whether you have trailing slashes or not on the\nSENDFILE_URL and root values, otherwise you may not get the right URL being\nsent to Nginx and you may get 404s.  You should be able to see what file Nginx\nis trying to load in the error.log if this happens.  From there it should be\nfairly easy to work out what the right settings are.</p>\n</div>\n<div id=\"funding\">\n<h2>Funding</h2>\n<p>If you have found django-sendfile2 to be useful and would like to see its continued\ndevelopment, please consider <a href=\"https://ko-fi.com/moggers87\" rel=\"nofollow\">buying me a coffee</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6373777, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "2e25160db46c975afc00929533f00d21", "sha256": "ae46ce4362e4f117c8b89c2f31483b37370e9d179ffe70cafe44f2b3282e2d13"}, "downloads": -1, "filename": "django-sendfile2-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2e25160db46c975afc00929533f00d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7860, "upload_time": "2018-03-20T17:45:08", "upload_time_iso_8601": "2018-03-20T17:45:08.658533Z", "url": "https://files.pythonhosted.org/packages/d3/d9/4c28cc38e72adb9c4a6a5da63c134c1f72aab3254d8f712292a68323fbed/django-sendfile2-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "98c36c6e31d940f02164ca3ca8f5591d", "sha256": "d4729908107efa6d6d9f700985b58677c072dcd3e76e3d20ff614ee269f30607"}, "downloads": -1, "filename": "django-sendfile2-0.4.1.tar.gz", "has_sig": false, "md5_digest": "98c36c6e31d940f02164ca3ca8f5591d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8304, "upload_time": "2018-03-21T01:06:09", "upload_time_iso_8601": "2018-03-21T01:06:09.111541Z", "url": "https://files.pythonhosted.org/packages/ca/4e/541cd15456450b8d0f715399029b70ca116fd75a21191dd65f7619373066/django-sendfile2-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "231bd8aebb107231e0a56d0bc55a7191", "sha256": "b1654d844d68da45620bc27eda3c4b89c2cbbd521146f88a05f3347375807757"}, "downloads": -1, "filename": "django-sendfile2-0.4.2.tar.gz", "has_sig": false, "md5_digest": "231bd8aebb107231e0a56d0bc55a7191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27159, "upload_time": "2018-09-19T09:29:32", "upload_time_iso_8601": "2018-09-19T09:29:32.148182Z", "url": "https://files.pythonhosted.org/packages/b1/e5/86624c566758d09d3552eb29bddd6d120bb416efdc311ae79c6dc47ef257/django-sendfile2-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "135f2abe01facd8abbafe459a93dc69e", "sha256": "267cdd817a5fe7e649df9139ac3efbe8675c61ccdab43146d1e8cbd9bab70554"}, "downloads": -1, "filename": "django-sendfile2-0.4.3.tar.gz", "has_sig": false, "md5_digest": "135f2abe01facd8abbafe459a93dc69e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24399, "upload_time": "2019-10-05T00:20:47", "upload_time_iso_8601": "2019-10-05T00:20:47.055014Z", "url": "https://files.pythonhosted.org/packages/3d/f9/494ff1c182051a065a11c5ee24c14ea6b12b350a17e4dad021f5c0477532/django-sendfile2-0.4.3.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "71ce013a81cfc0617115f2b0ed1d8e58", "sha256": "695c635bdc26fe35e22565f046c92126a03fafb587e11415baec6da9df1be04e"}, "downloads": -1, "filename": "django-sendfile2-0.5.1.tar.gz", "has_sig": false, "md5_digest": "71ce013a81cfc0617115f2b0ed1d8e58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26752, "upload_time": "2019-12-30T03:54:33", "upload_time_iso_8601": "2019-12-30T03:54:33.121027Z", "url": "https://files.pythonhosted.org/packages/e9/db/c1a2e91369b5a1db601d048a80e6510d603cc677964b361727ac93f884ca/django-sendfile2-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71ce013a81cfc0617115f2b0ed1d8e58", "sha256": "695c635bdc26fe35e22565f046c92126a03fafb587e11415baec6da9df1be04e"}, "downloads": -1, "filename": "django-sendfile2-0.5.1.tar.gz", "has_sig": false, "md5_digest": "71ce013a81cfc0617115f2b0ed1d8e58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26752, "upload_time": "2019-12-30T03:54:33", "upload_time_iso_8601": "2019-12-30T03:54:33.121027Z", "url": "https://files.pythonhosted.org/packages/e9/db/c1a2e91369b5a1db601d048a80e6510d603cc677964b361727ac93f884ca/django-sendfile2-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:38 2020"}