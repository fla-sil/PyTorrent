{"info": {"author": "Andrea Cervesato", "author_email": "andrea.cervesato@mailbox.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "[![Build Status](https://travis-ci.org/acerv/etcdgo.svg?branch=master)](https://travis-ci.org/acerv/etcdgo)\n\nIntroduction\n============\n\netcdgo is a library to push/pull configurations inside [etcd](https://etcd.io)\ndatabases. Supported filetypes are the following:\n\n* JSON\n* Yaml\n* INI\n\nUsage example:\n\n```python\nimport etcd3\nimport etcdgo\n\nclient = etcd3.Etcd3Client(host='127.0.0.1', port=4003)\n\n# push a json configuration inside database\nconfig = etcdgo.get_config(client, \"json\")\nconfig.push(\"myconfig\", \"myfile.json\")\n\n# push a yaml configuration inside database\nconfig = etcdgo.get_config(client, \"yaml\")\nconfig.push(\"myconfig\", \"myfile.yaml\")\n\n# push a ini configuration inside database\nconfig = etcdgo.get_config(client, \"ini\")\nconfig.push(\"myconfig\", \"myfile.ini\")\n\n# pull data from etcd database\ndata = config.pull(\"myconfig\")\n```\n\nTo install the library:\n\n```bash\npip install etcdgo\n```\n\nPush/pull via command line\n==========================\n\netcdgo library contains a tool called ``etcdgo-cli`` which can be used to\npush/pull configurations inside an etcd database.\n\n```bash\n# push ini configuration\n$ etcdgo-cli \\\n    --hostname 10.0.1.21 \\\n    --port 2379 \\\n    --basefile /configs \\\n    push pytest0 pytest.ini\n\n# pull configuration\n$ etcdgo-cli \\\n    --hostname 10.0.1.21 \\\n    --port 2379 \\\n    --basefile /configs \\\n    pull --output-type=ini pytest0\n[pytest]\naddopts = -vv -s\nlog_cli = True\nlog_level = DEBUG\n```\n\n``etcdgo-cli`` will automatically recognize the file extension and push it as\nneeded, but pull command needs to specify the output type, via ``--output-type``\noption.\n\nHow data is stored\n==================\n\nBefore pushing configurations inside an etcd database, all files are converted\ninto a dictionary and then flatten. The ``basefolder`` is given to the configuration\nobject and it's the root of our configurations.\n\nFor example:\n\n```python\nimport etcd3\nimport etcdgo\n\nclient = etcd3.Etcd3Client(host='127.0.0.1', port=4003)\nconfig = etcdgo.get_config(client, \"ini\", basefolder=\"/configs\")\nconfig.push(\"foods\", \"myconfig.ini\")\n```\n\nOur ``myconfig.ini`` configuration:\n\n```ini\n[apple]\ncolor = red\ntaste = sweet\n\n[coffee]\ncolor = black\ntaste = bitter\n```\n\nOnce ``myconfig.ini`` is pushed into etcd, it will be flatten as following:\n\n```etcd\n/configs/foods/apple/color = 'red'\n/configs/foods/apple/taster = 'sweet'\n/configs/foods/coffee/color = 'black'\n/configs/foods/coffee/taste = 'bitter'\n```\n\nYaml/JSON configurations are flatten with the same principle. In this case,\n**lists are stored as strings**.\n\nFor example:\n\n```python\nimport etcd3\nimport etcdgo\n\nclient = etcd3.Etcd3Client(host='127.0.0.1', port=4003)\nconfig = etcdgo.get_config(client, \"json\", basefolder=\"/configs\")\nconfig.push(\"foods\", \"myconfig.json\")\n```\n\nOur ``myconfig.json`` configuration:\n\n```json\n{\n    \"fruits\" : {\n        \"apple\" : {\n            \"color\": \"red\",\n            \"taste\": \"sweet\"\n        },\n        \"coffee\" : {\n            \"color\": \"black\",\n            \"taste\": \"bitter\"\n        },\n    },\n    \"sets\" : [\"fruits\", \"vegetables\" ]\n}\n```\n\nOnce ``myconfig.json`` is pushed into etcd, it will be flatten as following:\n\n```etcd\n/configs/foods/fruits/apple/color = 'red'\n/configs/foods/fruits/apple/taster = 'sweet'\n/configs/foods/fruits/coffee/color = 'black'\n/configs/foods/fruits/coffee/taste = 'bitter'\n/configs/foods/sets = '[\"fruits\", \"vegetables\"]'\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/acerv/etcdgo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "etcdgo", "package_url": "https://pypi.org/project/etcdgo/", "platform": "", "project_url": "https://pypi.org/project/etcdgo/", "project_urls": {"Homepage": "https://github.com/acerv/etcdgo"}, "release_url": "https://pypi.org/project/etcdgo/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "A library to push/pull configurations inside etcd databases", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/acerv/etcdgo\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9901f87e06bb232520e200cf213ca95c3cb12588/68747470733a2f2f7472617669732d63692e6f72672f61636572762f65746364676f2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Introduction</h1>\n<p>etcdgo is a library to push/pull configurations inside <a href=\"https://etcd.io\" rel=\"nofollow\">etcd</a>\ndatabases. Supported filetypes are the following:</p>\n<ul>\n<li>JSON</li>\n<li>Yaml</li>\n<li>INI</li>\n</ul>\n<p>Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">etcd3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">etcdgo</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">etcd3</span><span class=\"o\">.</span><span class=\"n\">Etcd3Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">4003</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># push a json configuration inside database</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">etcdgo</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">\"myconfig\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myfile.json\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># push a yaml configuration inside database</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">etcdgo</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s2\">\"yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">\"myconfig\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myfile.yaml\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># push a ini configuration inside database</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">etcdgo</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s2\">\"ini\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">\"myconfig\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myfile.ini\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># pull data from etcd database</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">(</span><span class=\"s2\">\"myconfig\"</span><span class=\"p\">)</span>\n</pre>\n<p>To install the library:</p>\n<pre>pip install etcdgo\n</pre>\n<h1>Push/pull via command line</h1>\n<p>etcdgo library contains a tool called <code>etcdgo-cli</code> which can be used to\npush/pull configurations inside an etcd database.</p>\n<pre><span class=\"c1\"># push ini configuration</span>\n$ etcdgo-cli <span class=\"se\">\\</span>\n    --hostname <span class=\"m\">10</span>.0.1.21 <span class=\"se\">\\</span>\n    --port <span class=\"m\">2379</span> <span class=\"se\">\\</span>\n    --basefile /configs <span class=\"se\">\\</span>\n    push pytest0 pytest.ini\n\n<span class=\"c1\"># pull configuration</span>\n$ etcdgo-cli <span class=\"se\">\\</span>\n    --hostname <span class=\"m\">10</span>.0.1.21 <span class=\"se\">\\</span>\n    --port <span class=\"m\">2379</span> <span class=\"se\">\\</span>\n    --basefile /configs <span class=\"se\">\\</span>\n    pull --output-type<span class=\"o\">=</span>ini pytest0\n<span class=\"o\">[</span>pytest<span class=\"o\">]</span>\n<span class=\"nv\">addopts</span> <span class=\"o\">=</span> -vv -s\n<span class=\"nv\">log_cli</span> <span class=\"o\">=</span> True\n<span class=\"nv\">log_level</span> <span class=\"o\">=</span> DEBUG\n</pre>\n<p><code>etcdgo-cli</code> will automatically recognize the file extension and push it as\nneeded, but pull command needs to specify the output type, via <code>--output-type</code>\noption.</p>\n<h1>How data is stored</h1>\n<p>Before pushing configurations inside an etcd database, all files are converted\ninto a dictionary and then flatten. The <code>basefolder</code> is given to the configuration\nobject and it's the root of our configurations.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">etcd3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">etcdgo</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">etcd3</span><span class=\"o\">.</span><span class=\"n\">Etcd3Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">4003</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">etcdgo</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s2\">\"ini\"</span><span class=\"p\">,</span> <span class=\"n\">basefolder</span><span class=\"o\">=</span><span class=\"s2\">\"/configs\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">\"foods\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myconfig.ini\"</span><span class=\"p\">)</span>\n</pre>\n<p>Our <code>myconfig.ini</code> configuration:</p>\n<pre><span class=\"k\">[apple]</span>\n<span class=\"na\">color</span> <span class=\"o\">=</span> <span class=\"s\">red</span>\n<span class=\"na\">taste</span> <span class=\"o\">=</span> <span class=\"s\">sweet</span>\n\n<span class=\"k\">[coffee]</span>\n<span class=\"na\">color</span> <span class=\"o\">=</span> <span class=\"s\">black</span>\n<span class=\"na\">taste</span> <span class=\"o\">=</span> <span class=\"s\">bitter</span>\n</pre>\n<p>Once <code>myconfig.ini</code> is pushed into etcd, it will be flatten as following:</p>\n<pre>/configs/foods/apple/color = 'red'\n/configs/foods/apple/taster = 'sweet'\n/configs/foods/coffee/color = 'black'\n/configs/foods/coffee/taste = 'bitter'\n</pre>\n<p>Yaml/JSON configurations are flatten with the same principle. In this case,\n<strong>lists are stored as strings</strong>.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">etcd3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">etcdgo</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">etcd3</span><span class=\"o\">.</span><span class=\"n\">Etcd3Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">4003</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">etcdgo</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">,</span> <span class=\"n\">basefolder</span><span class=\"o\">=</span><span class=\"s2\">\"/configs\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">\"foods\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myconfig.json\"</span><span class=\"p\">)</span>\n</pre>\n<p>Our <code>myconfig.json</code> configuration:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"fruits\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"apple\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"taste\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sweet\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"coffee\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"black\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"taste\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bitter\"</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"sets\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"fruits\"</span><span class=\"p\">,</span> <span class=\"s2\">\"vegetables\"</span> <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Once <code>myconfig.json</code> is pushed into etcd, it will be flatten as following:</p>\n<pre>/configs/foods/fruits/apple/color = 'red'\n/configs/foods/fruits/apple/taster = 'sweet'\n/configs/foods/fruits/coffee/color = 'black'\n/configs/foods/fruits/coffee/taste = 'bitter'\n/configs/foods/sets = '[\"fruits\", \"vegetables\"]'\n</pre>\n\n          </div>"}, "last_serial": 7047090, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3c1ba1f41bf99efd5e8d596bf8faf20e", "sha256": "f5a36f388ad2a71087173c1e0f7b11215ad137b5a313e4cfe3f43e98ed5e8755"}, "downloads": -1, "filename": "etcdgo-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c1ba1f41bf99efd5e8d596bf8faf20e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4859, "upload_time": "2020-04-06T08:46:05", "upload_time_iso_8601": "2020-04-06T08:46:05.890706Z", "url": "https://files.pythonhosted.org/packages/23/ae/b4bc491ed1f2796279a022eced396fa118103a10ed8e306fac0b4d3802e6/etcdgo-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80f12ceeb995f10b00395cefc62cd9a6", "sha256": "99d1f236e9ec98ede33fefbc99fc9ebedae0639139373a43db4fc678d21dcd8e"}, "downloads": -1, "filename": "etcdgo-1.0.tar.gz", "has_sig": false, "md5_digest": "80f12ceeb995f10b00395cefc62cd9a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3877, "upload_time": "2020-04-06T08:46:08", "upload_time_iso_8601": "2020-04-06T08:46:08.147484Z", "url": "https://files.pythonhosted.org/packages/9f/86/8f9368354bc7866303c278295850419760ee6ece1c8023153cad3155793f/etcdgo-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6bdc6bee534b22ab8d58afb3ab5295aa", "sha256": "7e8fc09e0ab8aafbf022c70a6e3bd4accfdc96669a8b7852685e2f6fca74dea4"}, "downloads": -1, "filename": "etcdgo-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6bdc6bee534b22ab8d58afb3ab5295aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4897, "upload_time": "2020-04-06T09:41:26", "upload_time_iso_8601": "2020-04-06T09:41:26.364560Z", "url": "https://files.pythonhosted.org/packages/af/04/ea1184e45fff92b6085855f019d634db6f3063fa556e2a3a46c2f7ffad98/etcdgo-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09a94354fd1dd16e9e88b25380553f80", "sha256": "02ea22a16981dff12c583edc02afc0d325be3f74e6c8f02e16a4c631d4cd1519"}, "downloads": -1, "filename": "etcdgo-1.0.1.tar.gz", "has_sig": false, "md5_digest": "09a94354fd1dd16e9e88b25380553f80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3911, "upload_time": "2020-04-06T09:41:27", "upload_time_iso_8601": "2020-04-06T09:41:27.879574Z", "url": "https://files.pythonhosted.org/packages/5b/94/e76303d20a15ae81edd09512b589a1c875358f94a2d8c8fdacf78ef8ed80/etcdgo-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e7980ae242829a4e44b8fead24d504de", "sha256": "797a6d8e2e34fa7a80b14d6e71ccc007c776c258ba01ccdcc9d116bac5d56d56"}, "downloads": -1, "filename": "etcdgo-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e7980ae242829a4e44b8fead24d504de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4994, "upload_time": "2020-04-07T20:12:25", "upload_time_iso_8601": "2020-04-07T20:12:25.407153Z", "url": "https://files.pythonhosted.org/packages/aa/40/882e78034dbb975d6164b8615bb33c35e3a69cb36cb4476bf2b1420d6b89/etcdgo-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4da46bf466436bc59f3b9731068eb2a0", "sha256": "31dd11649c037dfd02688e8d3a0c172d4e0a329e2b096c1f36c42dbd489227a1"}, "downloads": -1, "filename": "etcdgo-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4da46bf466436bc59f3b9731068eb2a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4049, "upload_time": "2020-04-07T20:12:26", "upload_time_iso_8601": "2020-04-07T20:12:26.951545Z", "url": "https://files.pythonhosted.org/packages/18/f6/fc9fe4a567f10ec463e61fcaf538ec73e8c9e87e255f34cd7aefa352fdc2/etcdgo-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6fccee9d35ddbe493be93d41badbb80e", "sha256": "0e3487695475480f36222979e8e4b4a9fe4263373e8bf77a36f01ae8c5caa2f0"}, "downloads": -1, "filename": "etcdgo-1.2.0.tar.gz", "has_sig": false, "md5_digest": "6fccee9d35ddbe493be93d41badbb80e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5582, "upload_time": "2020-04-18T11:08:19", "upload_time_iso_8601": "2020-04-18T11:08:19.022009Z", "url": "https://files.pythonhosted.org/packages/7b/23/23c0b0319a769fadbc79674b89941834fffa96cd9042467ccb4ea3bcda27/etcdgo-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6fccee9d35ddbe493be93d41badbb80e", "sha256": "0e3487695475480f36222979e8e4b4a9fe4263373e8bf77a36f01ae8c5caa2f0"}, "downloads": -1, "filename": "etcdgo-1.2.0.tar.gz", "has_sig": false, "md5_digest": "6fccee9d35ddbe493be93d41badbb80e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5582, "upload_time": "2020-04-18T11:08:19", "upload_time_iso_8601": "2020-04-18T11:08:19.022009Z", "url": "https://files.pythonhosted.org/packages/7b/23/23c0b0319a769fadbc79674b89941834fffa96cd9042467ccb4ea3bcda27/etcdgo-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:32 2020"}