{"info": {"author": "Noriyuki Abe", "author_email": "kenko.py@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "==============================\nfusha.py\n==============================\n\nFusha is an easily customizable progress bar module for Python.\nIt contains default progress bars. However, you can write your own\nprogress bar easily to inherit the class provided in this package.\n\nFeatures\n----------\n\n*   You can easily use fusha by using the **with** statement as follows;\n\n    .. code-block:: python\n\n        with Fusha():\n            waiting_function()\n\n*   You can easily write your own progress bar by inheriting\n    the **FushaTemplate** class as follows;\n\n    .. code-block:: python\n\n        class Fusha(FushaTemplate):\n\n            def __init__(self, interval=0.12)\n                FushaTemplate.__init__(self, interval)\n\n            def format(self):\n                return waiting_format\n\n            def exit_format(self):\n                return exit_format\n\n\nInstallation\n-------------\n\n.. code-block:: sh\n\n    $ python setup.py install\n\nor\n\n.. code-block:: sh\n\n    $ pip install fusha\n\nGetting Started\n-----------------\n\nFusha provides default three progress bars - Fusha, FushaBar, and FushaBubble.\n\nThe most easiest way to use Fusha is just creating an instance of fusha with **with** statement\nbefore calling your function which you must wait for a while:\n\n.. code-block:: python\n\n    import time\n    from fusha import Fusha\n\n    with Fusha():\n        time.sleep(3)\n\nThat's all.\n\nDefault Progress Bars\n-----------------------\n\nFusha provides three default progress bars. You can use them as follows.\n\n.. code-block:: python\n\n    import time\n    from fusha import Fusha, FushaBar, FushaBubble\n\n    print \"Fusha start\"\n    with Fusha(interval=0.12, title='now loading ...'):\n        time.sleep(3)\n    print \"finish\"\n\n    print \"FushaBar start\"\n    with FushaBar(interval=0.12, bar_len=20) as f:\n        for i in range(100):\n            f.update(i)\n            time.sleep(.1)\n    print \"finish\"\n\n    print \"FushaBubble start\"\n    with FushaBubble(interval=0.2, title=\"now loading ...\"):\n        time.sleep(3)\n    print \"finish\"\n\nScreenshots\n-------------\n\nFusha\n\n.. image:: http://kenkov.jp/_images/software/Fusha.gif\n\nFushaBar\n\n.. image:: http://kenkov.jp/_images/software/FushaBar.gif\n\nFushaBubble\n\n.. image:: http://kenkov.jp/_images/software/FushaBubble.gif\n\nHow to Customize\n-------------------\n\nYou can easily create your own progress bar.\n\nFirst, you should create a new class which inherits the **FushaTemplate** class.\nThen, you should override two methods - **format** and **exit_format** .\nThe **format** method will be called while your function is running in the with statement;\non the other hand, the **exit_format** will be called after finishing your function.\nBoth functions should return string.\n\nThe following code is for FushaBubble:\n\n.. code-block:: sh\n\n    from fusha import FushaTemplate\n\n    class FushaBubble(FushaTemplate):\n\n        def __init__(self,\n                     interval=0.12,\n                     title='waiting ...'):\n            FushaTemplate.__init__(self, interval)\n            self.title = title\n            self._count = 0\n\n        def format(self):\n            if self._count % 3 == 0:\n                fmt = '\\r{0} .'.format(self.title)\n            elif self._count % 3 == 1:\n                fmt = '\\r{0} o'.format(self.title)\n            else:\n                fmt = '\\r{0} O'.format(self.title)\n            # set count\n            if self._count == 2:\n                self._count = 0\n            else:\n                self._count += 1\n            return fmt\n\n        def exit_format(self):\n            return '\\r{0} done\\n'.format(self.title)\n\nLicense\n---------\n\nThe MIT License (MIT)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kenkov/fusha", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "fusha", "package_url": "https://pypi.org/project/fusha/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fusha/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kenkov/fusha"}, "release_url": "https://pypi.org/project/fusha/0.1/", "requires_dist": null, "requires_python": null, "summary": "Easily customizable progress bar module", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Fusha is an easily customizable progress bar module for Python.\nIt contains default progress bars. However, you can write your own\nprogress bar easily to inherit the class provided in this package.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><p>You can easily use fusha by using the <strong>with</strong> statement as follows;</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Fusha</span><span class=\"p\">():</span>\n    <span class=\"n\">waiting_function</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li><p>You can easily write your own progress bar by inheriting\nthe <strong>FushaTemplate</strong> class as follows;</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Fusha</span><span class=\"p\">(</span><span class=\"n\">FushaTemplate</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.12</span><span class=\"p\">)</span>\n        <span class=\"n\">FushaTemplate</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">waiting_format</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">exit_format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">exit_format</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ python setup.py install\n</pre>\n<p>or</p>\n<pre>$ pip install fusha\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Fusha provides default three progress bars - Fusha, FushaBar, and FushaBubble.</p>\n<p>The most easiest way to use Fusha is just creating an instance of fusha with <strong>with</strong> statement\nbefore calling your function which you must wait for a while:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fusha</span> <span class=\"kn\">import</span> <span class=\"n\">Fusha</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Fusha</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s all.</p>\n</div>\n<div id=\"default-progress-bars\">\n<h2>Default Progress Bars</h2>\n<p>Fusha provides three default progress bars. You can use them as follows.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fusha</span> <span class=\"kn\">import</span> <span class=\"n\">Fusha</span><span class=\"p\">,</span> <span class=\"n\">FushaBar</span><span class=\"p\">,</span> <span class=\"n\">FushaBubble</span>\n\n<span class=\"nb\">print</span> <span class=\"s2\">\"Fusha start\"</span>\n<span class=\"k\">with</span> <span class=\"n\">Fusha</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.12</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'now loading ...'</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"s2\">\"finish\"</span>\n\n<span class=\"nb\">print</span> <span class=\"s2\">\"FushaBar start\"</span>\n<span class=\"k\">with</span> <span class=\"n\">FushaBar</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.12</span><span class=\"p\">,</span> <span class=\"n\">bar_len</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"s2\">\"finish\"</span>\n\n<span class=\"nb\">print</span> <span class=\"s2\">\"FushaBubble start\"</span>\n<span class=\"k\">with</span> <span class=\"n\">FushaBubble</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"now loading ...\"</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"s2\">\"finish\"</span>\n</pre>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<p>Fusha</p>\n<img alt=\"http://kenkov.jp/_images/software/Fusha.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/266e1a14fdf81fcadd2c4bbb133fb271217fa7be/687474703a2f2f6b656e6b6f762e6a702f5f696d616765732f736f6674776172652f46757368612e676966\">\n<p>FushaBar</p>\n<img alt=\"http://kenkov.jp/_images/software/FushaBar.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c65f2c7cce73fb5819d8d40f21a2c9b31b700ea9/687474703a2f2f6b656e6b6f762e6a702f5f696d616765732f736f6674776172652f46757368614261722e676966\">\n<p>FushaBubble</p>\n<img alt=\"http://kenkov.jp/_images/software/FushaBubble.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09ae3deefa5686bb0a2adf96cf12d3cbdb900794/687474703a2f2f6b656e6b6f762e6a702f5f696d616765732f736f6674776172652f4675736861427562626c652e676966\">\n</div>\n<div id=\"how-to-customize\">\n<h2>How to Customize</h2>\n<p>You can easily create your own progress bar.</p>\n<p>First, you should create a new class which inherits the <strong>FushaTemplate</strong> class.\nThen, you should override two methods - <strong>format</strong> and <strong>exit_format</strong> .\nThe <strong>format</strong> method will be called while your function is running in the with statement;\non the other hand, the <strong>exit_format</strong> will be called after finishing your function.\nBoth functions should return string.</p>\n<p>The following code is for FushaBubble:</p>\n<pre>from fusha import FushaTemplate\n\nclass FushaBubble<span class=\"o\">(</span>FushaTemplate<span class=\"o\">)</span>:\n\n    def __init__<span class=\"o\">(</span>self,\n                 <span class=\"nv\">interval</span><span class=\"o\">=</span><span class=\"m\">0</span>.12,\n                 <span class=\"nv\">title</span><span class=\"o\">=</span><span class=\"s1\">'waiting ...'</span><span class=\"o\">)</span>:\n        FushaTemplate.__init__<span class=\"o\">(</span>self, interval<span class=\"o\">)</span>\n        self.title <span class=\"o\">=</span> title\n        self._count <span class=\"o\">=</span> <span class=\"m\">0</span>\n\n    def format<span class=\"o\">(</span>self<span class=\"o\">)</span>:\n        <span class=\"k\">if</span> self._count % <span class=\"nv\">3</span> <span class=\"o\">==</span> <span class=\"m\">0</span>:\n            <span class=\"nv\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">'\\r{0} .'</span>.format<span class=\"o\">(</span>self.title<span class=\"o\">)</span>\n        <span class=\"k\">elif</span> self._count % <span class=\"nv\">3</span> <span class=\"o\">==</span> <span class=\"m\">1</span>:\n            <span class=\"nv\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">'\\r{0} o'</span>.format<span class=\"o\">(</span>self.title<span class=\"o\">)</span>\n        <span class=\"k\">else</span>:\n            <span class=\"nv\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">'\\r{0} O'</span>.format<span class=\"o\">(</span>self.title<span class=\"o\">)</span>\n        <span class=\"c1\"># set count\n</span>        <span class=\"k\">if</span> self._count <span class=\"o\">==</span> <span class=\"m\">2</span>:\n            self._count <span class=\"o\">=</span> <span class=\"m\">0</span>\n        <span class=\"k\">else</span>:\n            self._count +<span class=\"o\">=</span> <span class=\"m\">1</span>\n        <span class=\"k\">return</span> fmt\n\n    def exit_format<span class=\"o\">(</span>self<span class=\"o\">)</span>:\n        <span class=\"k\">return</span> <span class=\"s1\">'\\r{0} done\\n'</span>.format<span class=\"o\">(</span>self.title<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The MIT License (MIT)</p>\n</div>\n\n          </div>"}, "last_serial": 637295, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9c0ab928378cbe954451497e71b317d5", "sha256": "0fe4263745b4df7de327f77fce0b17e1c32ae73dcb37fb7e3bbb01e780ddcbbe"}, "downloads": -1, "filename": "fusha-0.1.tar.gz", "has_sig": false, "md5_digest": "9c0ab928378cbe954451497e71b317d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3736, "upload_time": "2013-05-19T07:41:53", "upload_time_iso_8601": "2013-05-19T07:41:53.581435Z", "url": "https://files.pythonhosted.org/packages/a5/9a/4d32d5b34a015895eecc283e0889ae04316c8f384db467c5f373887ffca1/fusha-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c0ab928378cbe954451497e71b317d5", "sha256": "0fe4263745b4df7de327f77fce0b17e1c32ae73dcb37fb7e3bbb01e780ddcbbe"}, "downloads": -1, "filename": "fusha-0.1.tar.gz", "has_sig": false, "md5_digest": "9c0ab928378cbe954451497e71b317d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3736, "upload_time": "2013-05-19T07:41:53", "upload_time_iso_8601": "2013-05-19T07:41:53.581435Z", "url": "https://files.pythonhosted.org/packages/a5/9a/4d32d5b34a015895eecc283e0889ae04316c8f384db467c5f373887ffca1/fusha-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:35 2020"}