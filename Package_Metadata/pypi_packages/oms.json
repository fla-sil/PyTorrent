{"info": {"author": "Storyscript", "author_email": "support@storyscript.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# oms.py\n\nA micro-framework for the excellent **[Open Microservices Specification](https://microservices.guide/)**, for suppportive code written in Python 3.6+.\n\n**Note**: this is pre-release software, and is subject to improvement. Contributions are welcome! This framework is being developed for [other languages](https://github.com/microservices?utf8=%E2%9C%93&q=oms.*&type=&language=), as well. If you'd like to help, [let us know](support@storyscript.io)!\n\n# Intended / Example Usage\n\n```shell\n$ cat service.py\n```\n```python\nimport oms\nfrom uuid import uuid4\n\nservice = oms.Microservice(name='uuid')\n\n@service.register()\ndef new(prefix: str) -> str:\n    \"\"\"Generates a UUID, with a given prefix.\"\"\"\n    return f'{prefix}{uuid4().hex}'\n\nif __name__ == '__main__':\n    service.serve()\n```\n\n`register` takes some optional arguments: `name` and `path`. You can also call `service.add(f=new)`, instead.\n\nNext, run the command `$ oms-generate` `oms.yml` files will automatically be generated, for your application:\n\n```shell\n$ oms-generate service:service\n\u2026\n'oms.yml' written to disk!\n```\n\n```yaml\n$ cat oms.yml\nactions:\n  new:\n    help: Generates a UUID, with a given prefix.\n    arguments:\n      prefix:\n        in: query\n        required: true\n        type: string\n    http:\n      method: get\n      path: /new\n      port: 8080\n    output:\n      type: string\nlifecycle:\n  startup:\n    command:\n    - python3\n    - /app/service.py\noms: 1\n\n```\n\n```shell\n$ cat Dockerfile\nFROM kennethreitz/pipenv\nCOPY . /app\nCMD [\"python3\", \"service.py\"]\n```\n\nNow, run your microservice!\n\n```shell\n$ python service.py\n2019-05-09 14:45:39,342 - micro - DEBUG - Initiating 'uuid' service.\n2019-05-09 14:45:39,344 - micro - DEBUG - Registering Flask endpoint: '/new'\n2019-05-09 14:45:39,344 - micro - DEBUG - Dockerfile './Dockerfile' already exists!\n2019-05-09 14:45:39,345 - micro - DEBUG - Microservice Manifest './oms.yml' already exists!\n2019-05-09 14:45:39,346 - micro - INFO - Serving on: '*:8080'\n```\n\nThis will spawn a Flask application (using the production-ready [waitress web server](https://docs.pylonsproject.org/projects/waitress/en/stable/)), preconfigured to serve the masses!\n\nOr, use the [oms](https://github.com/microservices/oms) CLI:\n\n```shell\n$ oms run new -a prefix='user-'\n\u2026\n```\n\n## Installation\n\n```shell\n$ pip install\n```\n\n**P.S.** Do provide feedback, if you desire! :)\n\n\u2728 \ud83c\udf70 \u2728\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/microservices/oms.py", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "oms", "package_url": "https://pypi.org/project/oms/", "platform": "", "project_url": "https://pypi.org/project/oms/", "project_urls": {"Homepage": "https://github.com/microservices/oms.py"}, "release_url": "https://pypi.org/project/oms/0.5.0/", "requires_dist": ["pyyaml", "Flask", "waitress", "setproctitle", "docopt", "inflection"], "requires_python": ">=3.6.0", "summary": "A micro-framework for the OMS, and code written in Python 3.6+.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>oms.py</h1>\n<p>A micro-framework for the excellent <strong><a href=\"https://microservices.guide/\" rel=\"nofollow\">Open Microservices Specification</a></strong>, for suppportive code written in Python 3.6+.</p>\n<p><strong>Note</strong>: this is pre-release software, and is subject to improvement. Contributions are welcome! This framework is being developed for <a href=\"https://github.com/microservices?utf8=%E2%9C%93&amp;q=oms.*&amp;type=&amp;language=\" rel=\"nofollow\">other languages</a>, as well. If you'd like to help, <a href=\"support@storyscript.io\" rel=\"nofollow\">let us know</a>!</p>\n<h1>Intended / Example Usage</h1>\n<pre>$ cat service.py\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">oms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">oms</span><span class=\"o\">.</span><span class=\"n\">Microservice</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'uuid'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@service</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Generates a UUID, with a given prefix.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">prefix</span><span class=\"si\">}{</span><span class=\"n\">uuid4</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serve</span><span class=\"p\">()</span>\n</pre>\n<p><code>register</code> takes some optional arguments: <code>name</code> and <code>path</code>. You can also call <code>service.add(f=new)</code>, instead.</p>\n<p>Next, run the command <code>$ oms-generate</code> <code>oms.yml</code> files will automatically be generated, for your application:</p>\n<pre>$ oms-generate service:service\n\u2026\n<span class=\"s1\">'oms.yml'</span> written to disk!\n</pre>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">$ cat oms.yml</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">actions</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"nt\">new</span><span class=\"p\">:</span>\n    <span class=\"nt\">help</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Generates a UUID, with a given prefix.</span>\n    <span class=\"nt\">arguments</span><span class=\"p\">:</span>\n      <span class=\"nt\">prefix</span><span class=\"p\">:</span>\n        <span class=\"nt\">in</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">query</span>\n        <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n    <span class=\"nt\">http</span><span class=\"p\">:</span>\n      <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">get</span>\n      <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/new</span>\n      <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8080</span>\n    <span class=\"nt\">output</span><span class=\"p\">:</span>\n      <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"nt\">lifecycle</span><span class=\"p\">:</span>\n  <span class=\"nt\">startup</span><span class=\"p\">:</span>\n    <span class=\"nt\">command</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">python3</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">/app/service.py</span>\n<span class=\"nt\">oms</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n</pre>\n<pre>$ cat Dockerfile\nFROM kennethreitz/pipenv\nCOPY . /app\nCMD <span class=\"o\">[</span><span class=\"s2\">\"python3\"</span>, <span class=\"s2\">\"service.py\"</span><span class=\"o\">]</span>\n</pre>\n<p>Now, run your microservice!</p>\n<pre>$ python service.py\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,342 - micro - DEBUG - Initiating <span class=\"s1\">'uuid'</span> service.\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,344 - micro - DEBUG - Registering Flask endpoint: <span class=\"s1\">'/new'</span>\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,344 - micro - DEBUG - Dockerfile <span class=\"s1\">'./Dockerfile'</span> already exists!\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,345 - micro - DEBUG - Microservice Manifest <span class=\"s1\">'./oms.yml'</span> already exists!\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,346 - micro - INFO - Serving on: <span class=\"s1\">'*:8080'</span>\n</pre>\n<p>This will spawn a Flask application (using the production-ready <a href=\"https://docs.pylonsproject.org/projects/waitress/en/stable/\" rel=\"nofollow\">waitress web server</a>), preconfigured to serve the masses!</p>\n<p>Or, use the <a href=\"https://github.com/microservices/oms\" rel=\"nofollow\">oms</a> CLI:</p>\n<pre>$ oms run new -a <span class=\"nv\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'user-'</span>\n\u2026\n</pre>\n<h2>Installation</h2>\n<pre>$ pip install\n</pre>\n<p><strong>P.S.</strong> Do provide feedback, if you desire! :)</p>\n<p>\u2728 \ud83c\udf70 \u2728</p>\n\n          </div>"}, "last_serial": 6053350, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "38fb39509eec49574196360f8663b5f2", "sha256": "2a8213d95b571ca099ae67cd214fe62406692f06e574ad86fabb920d77a5f7ff"}, "downloads": -1, "filename": "oms-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "38fb39509eec49574196360f8663b5f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6399, "upload_time": "2019-10-16T06:39:41", "upload_time_iso_8601": "2019-10-16T06:39:41.608902Z", "url": "https://files.pythonhosted.org/packages/5d/9d/458d74dfe7574a08f91ae8a179a9ec7fa535366f2f2a240ca0c137ee37ca/oms-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac59fb1bdabe116a524a8a7fea71a974", "sha256": "5da492fe0b9ee237f6498439b6b080281aadc51ed0da6c0c1b483a54919da3f9"}, "downloads": -1, "filename": "oms-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ac59fb1bdabe116a524a8a7fea71a974", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 7363, "upload_time": "2019-10-16T06:39:45", "upload_time_iso_8601": "2019-10-16T06:39:45.878781Z", "url": "https://files.pythonhosted.org/packages/f0/39/4228157144295160d5ecc217bb753c21d017bc00c7f0f3cd9274e6dc9590/oms-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "38fb39509eec49574196360f8663b5f2", "sha256": "2a8213d95b571ca099ae67cd214fe62406692f06e574ad86fabb920d77a5f7ff"}, "downloads": -1, "filename": "oms-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "38fb39509eec49574196360f8663b5f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6399, "upload_time": "2019-10-16T06:39:41", "upload_time_iso_8601": "2019-10-16T06:39:41.608902Z", "url": "https://files.pythonhosted.org/packages/5d/9d/458d74dfe7574a08f91ae8a179a9ec7fa535366f2f2a240ca0c137ee37ca/oms-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac59fb1bdabe116a524a8a7fea71a974", "sha256": "5da492fe0b9ee237f6498439b6b080281aadc51ed0da6c0c1b483a54919da3f9"}, "downloads": -1, "filename": "oms-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ac59fb1bdabe116a524a8a7fea71a974", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 7363, "upload_time": "2019-10-16T06:39:45", "upload_time_iso_8601": "2019-10-16T06:39:45.878781Z", "url": "https://files.pythonhosted.org/packages/f0/39/4228157144295160d5ecc217bb753c21d017bc00c7f0f3cd9274e6dc9590/oms-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:25 2020"}