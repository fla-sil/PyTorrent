{"info": {"author": "Kathryn The Great", "author_email": "knv4@columbia.edu", "bugtrack_url": null, "classifiers": [], "description": "InverseProblem \r\n\r\nInverseProblem.invert(A, b, k, l)\r\n | Function that operates on any sized ill conditioned matrix A and noisy vecotr b, to solve \r\n | Ax=b by inverting A.        \r\n |  It uses the Tikhonov Regularization method, but rather that using its analytic solution it \r\n | uses its iterative solution, which converges to the noiseless solution for b.  \r\n | A is any dimension matrix m x n\r\n | b is a vector m x 1\r\n | x is a vector n x 1\r\n | k is the number of iterations required \r\n | l is lambda, or the dampenign parameter in the regularizaiton problem \r\n\r\n\r\n\r\nIn many inversion problems the data frame or matrix X is ill-conditioned, meaning the matrix iself is close to singular (e.g. a Hilbert matrix that has several close to dependent columns),and the solution, b, is therefore is noisy. A small perturbation in the matrix X will lead to wild adjustements in the solution, b, as is well-known. \r\n\r\nOne way to deal with such instability is to regularize the problem and solve a \"nearby\" problem using Lasso methods or the more general Tikhanov reguarlization problem, which add a penalty, lambda, to the optimizaiton problem. However, currently, no efficient method exists for searching for lambda. \r\n\r\nIn this new innovative method, we have derived an iterative approach to solving the general Tikhanov regularization problem, which converges to the noiseless solution, does not depend strongly on the choice of lambda, and yet still avoids the inversion problem. \r\n\r\nThis alogirithm is written in a few lines of code using Python's numpy package, and primarily relies on the SVD composition. The solution is applicable to many fields in image processing and data, and the code, as we'll see in the talk, is quite simple.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kathrynthegreat/InverseProblem", "keywords": "", "license": "Vasilaky", "maintainer": "", "maintainer_email": "", "name": "InverseProblem", "package_url": "https://pypi.org/project/InverseProblem/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/InverseProblem/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/kathrynthegreat/InverseProblem"}, "release_url": "https://pypi.org/project/InverseProblem/1.0/", "requires_dist": null, "requires_python": null, "summary": "Iterative Approach to using Tikhonov Regularizaiton for inverting a matrix", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>InverseProblem</p>\n<dl>\n<dt>InverseProblem.invert(A, b, k, l)</dt>\n<dd><div>\n<div>Function that operates on any sized ill conditioned matrix A and noisy vecotr b, to solve</div>\n<div>Ax=b by inverting A.</div>\n<div>\n<div>It uses the Tikhonov Regularization method, but rather that using its analytic solution it</div>\n</div>\n<div>uses its iterative solution, which converges to the noiseless solution for b.</div>\n<div>A is any dimension matrix m x n</div>\n<div>b is a vector m x 1</div>\n<div>x is a vector n x 1</div>\n<div>k is the number of iterations required</div>\n<div>l is lambda, or the dampenign parameter in the regularizaiton problem</div>\n</div>\n</dd>\n</dl>\n<p>In many inversion problems the data frame or matrix X is ill-conditioned, meaning the matrix iself is close to singular (e.g. a Hilbert matrix that has several close to dependent columns),and the solution, b, is therefore is noisy. A small perturbation in the matrix X will lead to wild adjustements in the solution, b, as is well-known.</p>\n<p>One way to deal with such instability is to regularize the problem and solve a \u201cnearby\u201d problem using Lasso methods or the more general Tikhanov reguarlization problem, which add a penalty, lambda, to the optimizaiton problem. However, currently, no efficient method exists for searching for lambda.</p>\n<p>In this new innovative method, we have derived an iterative approach to solving the general Tikhanov regularization problem, which converges to the noiseless solution, does not depend strongly on the choice of lambda, and yet still avoids the inversion problem.</p>\n<p>This alogirithm is written in a few lines of code using Python\u2019s numpy package, and primarily relies on the SVD composition. The solution is applicable to many fields in image processing and data, and the code, as we\u2019ll see in the talk, is quite simple.</p>\n\n          </div>"}, "last_serial": 1614439, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "59bdbfb3a72b3c2c4d533c1867d0065b", "sha256": "3f86206e91daf9f214ef754bdce8be501dd281351a4fc0545d61b74124b1675a"}, "downloads": -1, "filename": "InverseProblem-1.0-py3.4.egg", "has_sig": false, "md5_digest": "59bdbfb3a72b3c2c4d533c1867d0065b", "packagetype": "bdist_egg", "python_version": "3.0", "requires_python": null, "size": 3257, "upload_time": "2015-07-01T06:08:18", "upload_time_iso_8601": "2015-07-01T06:08:18.892929Z", "url": "https://files.pythonhosted.org/packages/05/9c/5cb047ec8d8ab3239b7b436b413c7d61b34ba87d5bc48a1b1ce7c93e3a01/InverseProblem-1.0-py3.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "310553826224aff0c48f2ff87fd7e5fe", "sha256": "dae68399dc0fdd0e416071ef2c6611ae1413b26965b9f0ce5fa517b04f3ca49a"}, "downloads": -1, "filename": "InverseProblem-1.0.tar.gz", "has_sig": false, "md5_digest": "310553826224aff0c48f2ff87fd7e5fe", "packagetype": "bdist_egg", "python_version": "3.0", "requires_python": null, "size": 1459, "upload_time": "2015-07-01T06:06:50", "upload_time_iso_8601": "2015-07-01T06:06:50.798029Z", "url": "https://files.pythonhosted.org/packages/59/67/c2da0c700a573f4ddf4acf3825a42d2f6f14da91dd279b6f6a959e7439e9/InverseProblem-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "59bdbfb3a72b3c2c4d533c1867d0065b", "sha256": "3f86206e91daf9f214ef754bdce8be501dd281351a4fc0545d61b74124b1675a"}, "downloads": -1, "filename": "InverseProblem-1.0-py3.4.egg", "has_sig": false, "md5_digest": "59bdbfb3a72b3c2c4d533c1867d0065b", "packagetype": "bdist_egg", "python_version": "3.0", "requires_python": null, "size": 3257, "upload_time": "2015-07-01T06:08:18", "upload_time_iso_8601": "2015-07-01T06:08:18.892929Z", "url": "https://files.pythonhosted.org/packages/05/9c/5cb047ec8d8ab3239b7b436b413c7d61b34ba87d5bc48a1b1ce7c93e3a01/InverseProblem-1.0-py3.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "310553826224aff0c48f2ff87fd7e5fe", "sha256": "dae68399dc0fdd0e416071ef2c6611ae1413b26965b9f0ce5fa517b04f3ca49a"}, "downloads": -1, "filename": "InverseProblem-1.0.tar.gz", "has_sig": false, "md5_digest": "310553826224aff0c48f2ff87fd7e5fe", "packagetype": "bdist_egg", "python_version": "3.0", "requires_python": null, "size": 1459, "upload_time": "2015-07-01T06:06:50", "upload_time_iso_8601": "2015-07-01T06:06:50.798029Z", "url": "https://files.pythonhosted.org/packages/59/67/c2da0c700a573f4ddf4acf3825a42d2f6f14da91dd279b6f6a959e7439e9/InverseProblem-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:09 2020"}