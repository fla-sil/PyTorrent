{"info": {"author": "Jordan Borean", "author_email": "jborean93@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "pypsrp - Python PowerShell Remoting Protocol Client library\n===========================================================\n\n`Build Status <https://travis-ci.org/jborean93/pypsrp>`__ `Build\nstatus <https://ci.appveyor.com/project/jborean93/pypsrp/branch/master>`__\n`Coverage Status <https://coveralls.io/github/jborean93/pypsrp>`__\n\npypsrp is a Python client for the PowerShell Remoting Protocol (PSRP)\nand Windows Remove Management (WinRM) service. It allows your to execute\ncommands on a remote Windows host from any machine that can run Python.\n\nThis library exposes 4 different types of APIs;\n\n-  A simple client API that can copy files to and from the remote\n   Windows host as well as execute processes and PowerShell scripts\n-  A WSMan interface to execute various WSMan calls like ``Send``,\n   ``Create``, ``Connect``, ``Disconnect``, etc\n-  A Windows Remote Shell (WinRS) layer that executes cmd commands and\n   executables using the base WinRM protocol\n-  A PowerShell Remoting Protocol (PSRP) layer allows you to create\n   remote Runspace Pools and PowerShell pipelines\n\nAt a basic level, you can use this library to;\n\n-  Execute a cmd command\n-  Run another executable\n-  Execute PowerShell scripts\n-  Copy a file from the localhost to the remote Windows host\n-  Fetch a file from the remote Windows host to the localhost\n-  Create a Runspace Pool that contains one or multiple PowerShell\n   pipelines and execute them asynchronously\n-  Support for a reference host base implementation of PSRP for\n   interactive scripts\n\nCurrently this library only supports the WSMan transport method but is\ndesigned to support SSH at some point in the future (PR\u2019s are welcome).\nBy default it supports the following authentication methods with WSMan;\n\n-  Basic\n-  Certificate\n-  NTLM\n\nIt also supports ``Negotiate/Kerberos``, and ``CredSSP`` but require\nextra libraries to be isntalled.\n\nRequirements\n------------\n\nSee ``How to Install`` for more details\n\n-  CPython 2.6-2.7, 3.4-3.7\n-  `cryptography <https://github.com/pyca/cryptography>`__\n-  `requests <https://github.com/requests/requests>`__\n-  `ntlm-auth <https://github.com/jborean93/ntlm-auth>`__\n-  `six <https://github.com/benjaminp/six>`__\n\n*Note: while Python 2.6 is supported it may be dropped in the future if\nit is too much work in the future. You should really be using at least\nPython 2.7 but preferably Python 3.5+*\n\nOptional Requirements\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following Python libraries can be installed to add extra features\nthat do not come with the base package\n\n-  `python-gssapi <https://github.com/pythongssapi/python-gssapi>`__ for\n   Kerberos authentication on Linux\n-  `pywin32 <https://github.com/mhammond/pywin32>`__ for Kerberos\n   authentication on Windows\n-  `requests-credssp <https://github.com/jborean93/requests-credssp>`__\n   for CredSSP authentication\n\nHow to Install\n--------------\n\nTo install pypsrp with all basic features, run\n\n::\n\n   pip install pypsrp\n\nKerberos Authentication\n~~~~~~~~~~~~~~~~~~~~~~~\n\nWhile pypsrp supports Kerberos authentication, it isn\u2019t included by\ndefault due to it\u2019s reliance on system packages to be present.\n\nTo install these packages, run the below\n\nFor Debian/Ubuntu\n\n::\n\n   # For Python 2\n   apt-get install gcc python-dev libkrb5-dev\n\n   # For Python 3\n   apt-get install gcc python3-dev libkrb5-dev\n\n   # To add NTLM to the GSSAPI SPNEGO auth run\n   apt-get install gss-ntlmssp\n\nFor RHEL/Centos\n\n::\n\n   yum install gcc python-devel krb5-devel\n\n   # To add NTLM to the GSSAPI SPNEGO auth run\n   yum install gssntlmssp\n\nFor Fedora\n\n::\n\n   dnf install gcc python-devel krb5-devel\n\n   # To add NTLM to the GSSAPI SPNEGO auth run\n   dnf install gssntlmssp\n\nFor Arch Linux\n\n::\n\n   pacman -S gcc krb5\n\nOnce installed you can install the Python packages with\n\n::\n\n   pip install pypsrp[kerberos]\n\nFor Windows, running the pip install command above is usually enough but\nthere are cases where this will fail. The alternative is to the binary\nbased on the `recent release of\npywin32 <https://github.com/mhammond/pywin32/releases>`__ instead of\ninstalling through pip.\n\nKerberos also needs to be configured to talk to the domain but that is\noutside the scope of this page.\n\nCredSSP Authentication\n~~~~~~~~~~~~~~~~~~~~~~\n\nLike Kerberos auth, CredSSP is supported but isn\u2019t included by default.\nTo add support for CredSSP auth try to run the following\n\n::\n\n   pip install pypsrp[credssp]\n\nIf that fails you may need to update pip and setuptools to a newer\nversion ``pip install -U pip setuptools``, otherwise the following\nsystem package may be required;\n\n::\n\n   # For Debian/Ubuntu\n   apt-get install gcc python-dev\n\n   # For RHEL/Centos\n   yum install gcc python-devel\n\n   # For Fedora\n   dnf install gcc python-devel\n\nHow to Use\n----------\n\nThere are 3 main components that are in use within this library;\n\n-  ``Transport``: Handles the raw transport of messages to and from the\n   server\n-  ``Shell``: Handles the WSMV or PSRP protocol details used to create\n   the remote shell that processes are run on, uses ``Connection`` to\n   send the details\n-  ``Process``: Runs the process or script within a shell\n\nConnection\n~~~~~~~~~~\n\nCurrently only the connection that is supported is the WSMan protocol\nover HTTP through ``pypsrp.wsman.WSMan`` and offers mostly all the same\nfeatures in the WSMV spec including;\n\n-  Basic, Certificate, Negotiate, Kerberos, and CredSSP authentication\n-  TLS encryption\n-  Message encryption with Negotiate, Kerberos, and CredSSP\n   authentication\n-  Definable proxy\n\nThese are the options that can be used to setup ``WSMan``;\n\n-  ``server``: The hostname or IP address of the host to connect to\n-  ``max_envelope_size``: The maximum envelope size, in bytes, that can\n   be sent to the server, default is ``153600``\n-  ``operation_timeout``: The operation timeout, in seconds, of each\n   WSMan operation, default is ``20``. This should always be lower than\n   ``read_timeout``.\n-  ``port``: The port to connect to, default is ``5986`` if ``ssl=True``\n   else ``5985``\n-  ``username``: The username to connect with, required for all auths\n   except ``certificate`` and optionally required for\n   ``negotiate/kerberos``\n-  ``password``: The password for ``username``. Due to a bug on\n   MacOS/Heimdal GSSAPI implementations, this will persist in the user\u2019s\n   ccache when using Negotiate or Kerberos authentication, run\n   ``kdestroy`` manually to remove this\n-  ``ssl``: Whether to connect over ``https`` or ``https``, default is\n   ``True``\n-  ``path``: The WinRM path to connect to, default is ``wsman``\n-  ``auth``: The authentication protocol to use, default is\n   ``negotiate``, choices are ``basic``, ``certificate``, ``negotiate``,\n   ``ntlm``, ``kerberos``, ``credssp``\n-  ``cert_validation``: Whether to validate the server\u2019s SSL\n   certificate, default is ``True``. Can be ``False`` to not validate or\n   a path to a PEM file of trusted certificates\n-  ``connection_timeout``: The timeout for creating a HTTP connection,\n   default is ``30``\n-  ``read_timeout``: The timeout for receiving a response from the\n   server after a request has been made, default is ``30``\n-  ``encryption``: Controls the encryption settings, default is\n   ``auto``, choices are ``auto``, ``always``, ``never``. Set to\n   ``always`` to always run message encryption even over HTTPS,\n   ``never`` to never use message encryption even over HTTP\n-  ``proxy``: The proxy URL used to connect to the remote host\n-  ``no_proxy``: Whether to ignore any environment proxy variable and\n   connect directly to the host, default is ``False``\n-  ``locale``: The ``wsmv:Locale`` value to set on each WSMan request.\n   This specifies the language in which the cleint wants response text\n   to be translated, default is ``en-US``\n-  ``data_locale``: The ``wsmv:DataLocale`` value to set on each WSMan\n   request. This specifies the format in which numerical data is\n   presented in the response text, default is the value of ``locale``\n-  ``reconnection_retries``: Number of retries on a connection problem,\n   default is ``0``\n-  ``reconnection_backoff``: Number of seconds to backoff in between\n   reconnection attempts (first sleeps X, then sleeps 2\\ *X, 4*\\ X, 8*X,\n   \u2026), default is ``2.0``\n-  ``certificate_key_pem``: The path to the certificate key used in\n   ``certificate`` authentication\n-  ``certificate_pem``: The path to the certificate used in\n   ``certificate`` authentication\n-  ``credssp_auth_mechanism``: The sub-auth mechanism used in CredSSP,\n   default is ``auto``, choices are ``auto``, ``ntlm``, or ``kerberos``\n-  ``credssp_disable_tlsv1_2``: Whether to used CredSSP auth over the\n   insecure TLSv1.0, default is ``False``\n-  ``credssp_minimum_version``: The minimum CredSSP server version that\n   the client will connect to, default is ``2``\n-  ``negotiate_delegate``: Whether to negotiate the credential to the\n   host, default is ``False``. This is only valid if ``negotiate`` auth\n   negotiated Kerberos or ``kerberos`` was explicitly set\n-  ``negotiate_hostname_override``: The hostname used to calculate the\n   host SPN when authenticating the host with Kerberos auth. This is\n   only valid if ``negotiate`` auth negotiated Kerberos or ``kerberos``\n   was explicitly set\n-  ``negotiate_send_cbt``: Whether to binding the channel binding token\n   (HTTPS only) to the auth or ignore, default is ``True``\n-  ``negotiate_service``: Override the service part of the calculated\n   SPN used when authenticating the server, default is ``WSMAN``. This\n   is only valid if ``negotiate`` auth negotiated Kerberos or\n   ``kerberos`` was explicitly set\n\nWhen running over HTTP, this library will enforce encryption by default\nbut if that is not supported (Basic auth) or isn\u2019t available on the host\nthen either use HTTPS or disable encryption with ``encryption=\"never\"``.\n\nThere are plans to add support for SSH as a connection but this still\nneeds to be implemented. SSH will work on hosts that are running\nPowerShell Core but not the standard PowerShell.\n\nShell\n~~~~~\n\nThere are two shells that can be used in this library,\n``pypsrp.shell.WinRS`` and ``pypsrp.powershell.RunspacePool``.\n\n``WinRS`` is a cmd shell that can be used to issue cmd commands,\nincluding but not limited to other executables. Here are the options\nthat can be used to configure a ``WinRS`` shell;\n\n-  ``wsman``: WinRS only works over WSMan, so this is the\n   ``pypsrp.wsman.WSMan`` object to run the commands over\n-  ``resource_uri``: The resource uri of the shell, defaults to\n   ``http://schemas.microsoft.com/wbem/wsman/1/windows/shell/cmd``\n-  ``id``: The ID if the shell, this should be kept as ``None`` as it is\n   created dynamically by the server\n-  ``input_streams``: The input stream(s) of the shell, default is\n   ``stdin``\n-  ``output_streams``: The output stream(s) of the shell, default is\n   ``stdout, stderr``\n-  ``codepage``: The codepage of the shell, default is the default of\n   the host\n-  ``environment``: A dictionary of environment key/values to set for\n   the remote shell\n-  ``idle_time_out``: THe idle timeout in seconds of the shell\n-  ``lifetime``: The total lifetime of the shell\n-  ``name``: The name (description only) of the shell\n-  ``no_profile``: Whether to create the shell with the user profile\n   loaded or not\n-  ``working_directory``: The default working directory of the created\n   shell\n\n``RunspacePool`` is a shell used by the PSRP protocol, it is designed to\nbe a close implementation of the .NET\n`System.Management.Automation.Runspaces.RunspacePool <https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.runspacepool?view=powershellsdk-1.1.0>`__\nclass. The methods and properties are similar and can mostly do the same\nthing. Here are the options that can be used to configure a\n``RunspacePool`` shell;\n\n-  ``connection``: The connection object used by the RunspacePool to\n   send commands to the remote server, currently only supports ``WSMan``\n-  ``apartment_state``: The int value of\n   ``pypsrp.complex_objects.ApartmentState`` for the remote thread,\n   default is ``UNKNOWN``\n-  ``thread_options``: The int value of\n   ``pypsrp.complex_objects.ThreadOptions`` that specifies the type of\n   thread to create, default is ``DEFAULT``\n-  ``host``: The local host info implementation, default is no host\n-  ``configuration_name``: The configuration name to connect to, default\n   is ``Microsoft.PowerShell`` and can be used to specify the Just\n   Enough Administration (JEA) to connect to\n-  ``min_runspaces``: The minimuum number of runspaces that a pool can\n   hold, default is 1\n-  ``max_runspaces``: The maximum number of runspaces that a pool can\n   hold. Each PowerShell pipeline is run in a single Runspace, default\n   is 1\n-  ``session_key_timeout_ms``: The maximum time to wait for a session\n   key transfer from the server\n\nProcess\n~~~~~~~\n\nThere are two process objects that can be used, ``pypsrp.shell.Process``\nfor the ``WinRS`` shell and ``pypsrp.powershell.PowerShell`` for the\n``RunspacePool`` shell. These objects are ultimately used to execute\ncommands, processes, or scripts on the remote host.\n\n``Process`` is used with the ``WinRS`` shell to execute a cmd command or\nanother executable. The following options are used to configure the\n``Process`` object;\n\n-  ``shell``: The ``WinRS`` shell the process is run over\n-  ``executable``: The executable or command to run\n-  ``arguments``: A list of arguments to the executable or command,\n   default is no arguments\n-  ``id``: The ID of the created command, if not specified then this is\n   dynamically created\n-  ``no_shell``: Whether to create a command in the cmd shell or bypass\n   it, default is ``False``. If ``True`` then the executable must be the\n   full path to the exe. This only works on older OS\u2019 before 2012 R2\n   (not including)\n\nTo execute the process, call ``.invoke()``, the ``stdout``, ``stderr``,\nand ``rc`` properties contain the output of the command once complete.\n\n``PowerShell`` is used by the PSRP protocol, it is designed to be a\nclose implementation of the\n`System.Management.Automation.PowerShell <https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell?view=powershellsdk-1.1.0>`__\nclass. The methods and properties are similar and can mostly do the same\nthing. Here are the options that can be used to configure a\n``PowerShell`` process;\n\n-  ``runspace_pool``: The ``RunspacePool`` object to run the\n   ``PowerShell`` process on\n\nTo execute the process, call ``.invoke()``, the ``output``,\n``had_erros``, and ``streams`` contains the execution status and output\ninformation of the process. Before invoke can be called, cmdlets or\nscripts must be added. These can be done with the following methods;\n\n-  ``add_script``: Add a raw PowerShell script to the pending commands\n-  ``add_cmdlet``: Add a cmdlet to the pending commands\n-  ``add_parameters``: Add a dictionary of key/value parameters to the\n   last added command\n-  ``add_argument``: Add a value argument to the last added command\n-  ``add_statement``: Set the last command/script to be the end of that\n   pipeline so the next command/script is like a newline\n\nSee the examples below for more details.\n\nExamples\n~~~~~~~~\n\nHow to use the high level client API\n\n.. code:: python\n\n   from pypsrp.client import Client\n\n   # this takes in the same kwargs as the WSMan object\n   client = Client(\"server\", username=\"user\", password=\"password\")\n\n   # execute a cmd command\n   stdout, stderr, rc = client.execute_cmd(\"dir\")\n\n   stdout, stderr, rc = client.execute_cmd(\"powershell.exe gci $pwd\")\n   sanitised_stderr = client.sanitise_clixml(stderr)\n\n   # execute a PowerShell script\n   output, streams, had_errors = client.execute_ps('''$path = \"%s\"\n   if (Test-Path -Path $path) {\n       Remove-Item -Path $path -Force -Recurse\n   }\n   New-Item -Path $path -ItemType Directory''' % path)\n   output, streams, had_errors = client.execute_ps(\"New-Item -Path C:\\\\temp\\\\folder -ItemType Directory\")\n\n   # copy a file from the local host to the remote host\n   client.copy(\"~/file.txt\", \"C:\\\\temp\\\\file.txt\")\n\n   # fetch a file from the remote host to the local host\n   client.fetch(\"C:\\\\temp\\\\file.txt\", \"~/file.txt\")\n\nHow to use WinRS/Process to execute a command\n\n.. code:: python\n\n   from pypsrp.shell import Process, SignalCode, WinRS\n   from pypsrp.wsman import WSMan\n\n   # creates a http connection with no encryption and basic auth\n   wsman = WSMan(\"server\", ssl=False, auth=\"basic\", encryption=\"never\",\n                 username=\"vagrant\", password=\"vagrant\")\n\n   with WinRS(wsman) as shell:\n       process = Process(shell, \"dir\")\n       process.invoke()\n       process.signal(SignalCode.CTRL_C)\n\n       # execute a process with arguments in the background\n       process = Process(shell, \"powershell\", [\"gci\", \"$pwd\"])\n       process.begin_invoke()  # start the invocation and return immediately\n       process.poll_invoke()  # update the output stream\n       process.end_invoke()  # finally wait until the process is finished\n       process.signal(SignalCode.CTRL_C)\n\nHow to use RunspacePool/PowerShell to execute a PowerShell\nscript/command\n\n.. code:: python\n\n   from pypsrp.powershell import PowerShell, RunspacePool\n   from pypsrp.wsman import WSMan\n\n   # creates a https connection with explicit kerberos auth and implicit credentials\n   wsman = WSMan(\"server\", auth=\"kerberos\", cert_validation=False))\n\n   with RunspacePool(wsman) as pool:\n       # execute 'Get-Process | Select-Object Name'\n       ps = PowerShell(pool)\n       ps.add_cmdlet(\"Get-Process\").add_cmdlet(\"Select-Object\").add_argument(\"Name\")\n       output = ps.invoke()\n\n       # execute 'Get-Process | Select-Object -Property Name'\n       ps.add_cmdlet(\"Get-Process\").add_cmdlet(\"Select-Object\")\n       ps.add_parameter(\"Property\", \"Name\")\n       ps.begin_invoke()  # execute process in the background\n       ps.poll_invoke()  # update the output streams\n       ps.end_invoke()  # wait until the process is finished\n\n       # execute 'Get-Process | Select-Object -Property Name; Get-Service audiosrv'\n       ps.add_cmdlet(\"Get-Process\").add_cmdlet(\"Select-Object\").add_parameter(\"Property\", \"Name\")\n       ps.add_statement()\n       ps.add_cmdlet(\"Get-Service\").add_argument(\"audiosrc\")\n       ps.invoke()\n\n       # execute a PowerShell script with input being sent\n       script = '''begin {\n       $DebugPreference = \"Continue\"\n       Write-Debug -Message \"begin\"\n   } process {\n       Write-Output -InputObject $input\n   } end {\n       Write-Debug -Message \"end\"\n   }\n   '''\n       ps.add_script(script)\n       ps.invoke([\"string\", 1])\n       print(ps.output)\n       print(ps.streams.debug)\n\nLogging\n-------\n\nThis library takes advantage of the Python logging configuration and\nmessages are logged to the ``pypsrp`` named logger as well as\n``pypsrp.*`` where ``*`` is each Python script in the ``pypsrp``\ndirectory.\n\nAn easy way to turn on logging for the entire library is to create the\nfollowing JSON file and run your script with\n``PYPSRP_LOG_CFG=log.json python script.py`` (this does not work with\nPython 2.6).\n\n.. code:: json\n\n   {\n       \"version\": 1,\n       \"disable_existing_loggers\": false,\n       \"formatters\": {\n           \"simple\": {\n               \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n           }\n       },\n\n       \"handlers\": {\n           \"console\": {\n               \"class\": \"logging.StreamHandler\",\n               \"level\": \"DEBUG\",\n               \"formatter\": \"simple\",\n               \"stream\": \"ext://sys.stdout\"\n           }\n       },\n\n       \"loggers\": {\n           \"pypsrp\": {\n               \"level\": \"DEBUG\",\n               \"handlers\": [\"console\"],\n               \"propagate\": \"no\"\n           }\n       }\n   }\n\nYou can adjust the log level by changing the level value in ``logger``\nto ``INFO``.\n\n*Note: ``DEBUG`` contains a lot of information and will output all the\nmessages sent to and from the client. This can have the side effect of\nleaking sensitive information and should only be used for debugging\npurposes.*\n\nTesting\n-------\n\nAny changes are more than welcome in pull request form, you can run the\ncurrent test suite with tox like so;\n\n::\n\n   # make sure tox is installed\n   pip install tox\n\n   # run the tox suite\n   tox\n\n   # or run the test manually for the current Python environment\n   py.test -v --pep8 --cov pypsrp --cov-report term-missing\n\nA lot of the tests either simulate a remote Windows host but you can\nalso run a lot of them against a real Windows host. To do this, set the\nfollowing environment variables before running the tests;\n\n-  ``PYPSRP_SERVER``: The hostname or IP of the remote host\n-  ``PYPSRP_USERNAME``: The username to connect with\n-  ``PYPSRP_PASSWORD``: The password to connect with\n-  ``PYPSRR_PORT``: The port to connect with (default: ``5986``)\n-  ``PYPSRP_AUTH``: The authentication protocol to auth with (default:\n   ``negotiate``)\n\nThere are further integration tests that require a specific host setup\nto run correctly. You can use ``Vagrant`` to set this host up. This is\ndone by running the following commands;\n\n::\n\n   # download the Vagrant box and start it up based on the Vagrantfile\n   vagrant up\n\n   # once the above script is complete run the following\n   vagrant ssh  # password is vagrant\n\n   powershell.exe\n   Register-PSSessionConfiguration -Path \"C:\\Users\\vagrant\\Documents\\JEARoleSettings.pssc\" -Name JEARole -Force\n\n   $sec_pass = ConvertTo-SecureString -String \"vagrant\" -AsPlainText -Force\n   $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"vagrant\", $sec_pass\n   $thumbprint = (Get-ChildItem -Path Cert:\\LocalMachine\\TrustedPeople)[0].Thumbprint\n\n   New-Item -Path WSMan:\\localhost\\ClientCertificate `\n       -Subject \"vagrant@localhost\" `\n       -URI * `\n       -Issuer $thumbprint `\n       -Credential $credential `\n       -Force\n\n\n   # exit the remote PowerShell session\n   exit\n\n   # exist the SSH session\n   exit\n\nOnce complete, set the following environment variables to run the\nintegration tests;\n\n-  ``PYPSRP_RUN_INTEGRATION``: To any value\n-  ``PYPSRP_SERVER``: Set to ``127.0.0.1``\n-  ``PYPSRP_USERNAME``: Set to ``vagrant``\n-  ``PYPSRP_PASSWORD``: Set to ``vagrant``\n-  ``PYPSRP_HTTP_PORT``: Set to ``55985``\n-  ``PYPSRP_HTTPS_PORT``: Set to ``55986``\n-  ``PYPSRP_CERT_DIR``: Set to the full path of the project directory\n\nFrom here you can run the normal test suite and it will run all the\nintegration tests.\n\nBacklog\n-------\n\n-  Look into adding SSH as a transport option\n-  Live interactive console for PSRP\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jborean93/pypsrp", "keywords": "winrm psrp winrs windows", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pypsrp", "package_url": "https://pypi.org/project/pypsrp/", "platform": "", "project_url": "https://pypi.org/project/pypsrp/", "project_urls": {"Homepage": "https://github.com/jborean93/pypsrp"}, "release_url": "https://pypi.org/project/pypsrp/0.4.0/", "requires_dist": ["cryptography", "ntlm-auth (>=1.2.0)", "requests (>=2.9.1)", "six", "lxml (<4.3.0) ; python_version<\"2.7\"", "ipaddress ; python_version<=\"2.7\"", "requests-credssp (>=1.0.0) ; extra == 'credssp'", "gssapi (>=1.5.0) ; (sys_platform!=\"win32\") and extra == 'kerberos'", "pywin32 ; (sys_platform==\"win32\") and extra == 'kerberos'"], "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "summary": "PowerShell Remoting Protocol and WinRM for Python", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/jborean93/pypsrp\" rel=\"nofollow\">Build Status</a> <a href=\"https://ci.appveyor.com/project/jborean93/pypsrp/branch/master\" rel=\"nofollow\">Build\nstatus</a>\n<a href=\"https://coveralls.io/github/jborean93/pypsrp\" rel=\"nofollow\">Coverage Status</a></p>\n<p>pypsrp is a Python client for the PowerShell Remoting Protocol (PSRP)\nand Windows Remove Management (WinRM) service. It allows your to execute\ncommands on a remote Windows host from any machine that can run Python.</p>\n<p>This library exposes 4 different types of APIs;</p>\n<ul>\n<li>A simple client API that can copy files to and from the remote\nWindows host as well as execute processes and PowerShell scripts</li>\n<li>A WSMan interface to execute various WSMan calls like <tt>Send</tt>,\n<tt>Create</tt>, <tt>Connect</tt>, <tt>Disconnect</tt>, etc</li>\n<li>A Windows Remote Shell (WinRS) layer that executes cmd commands and\nexecutables using the base WinRM protocol</li>\n<li>A PowerShell Remoting Protocol (PSRP) layer allows you to create\nremote Runspace Pools and PowerShell pipelines</li>\n</ul>\n<p>At a basic level, you can use this library to;</p>\n<ul>\n<li>Execute a cmd command</li>\n<li>Run another executable</li>\n<li>Execute PowerShell scripts</li>\n<li>Copy a file from the localhost to the remote Windows host</li>\n<li>Fetch a file from the remote Windows host to the localhost</li>\n<li>Create a Runspace Pool that contains one or multiple PowerShell\npipelines and execute them asynchronously</li>\n<li>Support for a reference host base implementation of PSRP for\ninteractive scripts</li>\n</ul>\n<p>Currently this library only supports the WSMan transport method but is\ndesigned to support SSH at some point in the future (PR\u2019s are welcome).\nBy default it supports the following authentication methods with WSMan;</p>\n<ul>\n<li>Basic</li>\n<li>Certificate</li>\n<li>NTLM</li>\n</ul>\n<p>It also supports <tt>Negotiate/Kerberos</tt>, and <tt>CredSSP</tt> but require\nextra libraries to be isntalled.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>See <tt>How to Install</tt> for more details</p>\n<ul>\n<li>CPython 2.6-2.7, 3.4-3.7</li>\n<li><a href=\"https://github.com/pyca/cryptography\" rel=\"nofollow\">cryptography</a></li>\n<li><a href=\"https://github.com/requests/requests\" rel=\"nofollow\">requests</a></li>\n<li><a href=\"https://github.com/jborean93/ntlm-auth\" rel=\"nofollow\">ntlm-auth</a></li>\n<li><a href=\"https://github.com/benjaminp/six\" rel=\"nofollow\">six</a></li>\n</ul>\n<p><em>Note: while Python 2.6 is supported it may be dropped in the future if\nit is too much work in the future. You should really be using at least\nPython 2.7 but preferably Python 3.5+</em></p>\n<div id=\"optional-requirements\">\n<h3>Optional Requirements</h3>\n<p>The following Python libraries can be installed to add extra features\nthat do not come with the base package</p>\n<ul>\n<li><a href=\"https://github.com/pythongssapi/python-gssapi\" rel=\"nofollow\">python-gssapi</a> for\nKerberos authentication on Linux</li>\n<li><a href=\"https://github.com/mhammond/pywin32\" rel=\"nofollow\">pywin32</a> for Kerberos\nauthentication on Windows</li>\n<li><a href=\"https://github.com/jborean93/requests-credssp\" rel=\"nofollow\">requests-credssp</a>\nfor CredSSP authentication</li>\n</ul>\n</div>\n</div>\n<div id=\"how-to-install\">\n<h2>How to Install</h2>\n<p>To install pypsrp with all basic features, run</p>\n<pre>pip install pypsrp\n</pre>\n<div id=\"kerberos-authentication\">\n<h3>Kerberos Authentication</h3>\n<p>While pypsrp supports Kerberos authentication, it isn\u2019t included by\ndefault due to it\u2019s reliance on system packages to be present.</p>\n<p>To install these packages, run the below</p>\n<p>For Debian/Ubuntu</p>\n<pre># For Python 2\napt-get install gcc python-dev libkrb5-dev\n\n# For Python 3\napt-get install gcc python3-dev libkrb5-dev\n\n# To add NTLM to the GSSAPI SPNEGO auth run\napt-get install gss-ntlmssp\n</pre>\n<p>For RHEL/Centos</p>\n<pre>yum install gcc python-devel krb5-devel\n\n# To add NTLM to the GSSAPI SPNEGO auth run\nyum install gssntlmssp\n</pre>\n<p>For Fedora</p>\n<pre>dnf install gcc python-devel krb5-devel\n\n# To add NTLM to the GSSAPI SPNEGO auth run\ndnf install gssntlmssp\n</pre>\n<p>For Arch Linux</p>\n<pre>pacman -S gcc krb5\n</pre>\n<p>Once installed you can install the Python packages with</p>\n<pre>pip install pypsrp[kerberos]\n</pre>\n<p>For Windows, running the pip install command above is usually enough but\nthere are cases where this will fail. The alternative is to the binary\nbased on the <a href=\"https://github.com/mhammond/pywin32/releases\" rel=\"nofollow\">recent release of\npywin32</a> instead of\ninstalling through pip.</p>\n<p>Kerberos also needs to be configured to talk to the domain but that is\noutside the scope of this page.</p>\n</div>\n<div id=\"credssp-authentication\">\n<h3>CredSSP Authentication</h3>\n<p>Like Kerberos auth, CredSSP is supported but isn\u2019t included by default.\nTo add support for CredSSP auth try to run the following</p>\n<pre>pip install pypsrp[credssp]\n</pre>\n<p>If that fails you may need to update pip and setuptools to a newer\nversion <tt>pip install <span class=\"pre\">-U</span> pip setuptools</tt>, otherwise the following\nsystem package may be required;</p>\n<pre># For Debian/Ubuntu\napt-get install gcc python-dev\n\n# For RHEL/Centos\nyum install gcc python-devel\n\n# For Fedora\ndnf install gcc python-devel\n</pre>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<p>There are 3 main components that are in use within this library;</p>\n<ul>\n<li><tt>Transport</tt>: Handles the raw transport of messages to and from the\nserver</li>\n<li><tt>Shell</tt>: Handles the WSMV or PSRP protocol details used to create\nthe remote shell that processes are run on, uses <tt>Connection</tt> to\nsend the details</li>\n<li><tt>Process</tt>: Runs the process or script within a shell</li>\n</ul>\n<div id=\"connection\">\n<h3>Connection</h3>\n<p>Currently only the connection that is supported is the WSMan protocol\nover HTTP through <tt>pypsrp.wsman.WSMan</tt> and offers mostly all the same\nfeatures in the WSMV spec including;</p>\n<ul>\n<li>Basic, Certificate, Negotiate, Kerberos, and CredSSP authentication</li>\n<li>TLS encryption</li>\n<li>Message encryption with Negotiate, Kerberos, and CredSSP\nauthentication</li>\n<li>Definable proxy</li>\n</ul>\n<p>These are the options that can be used to setup <tt>WSMan</tt>;</p>\n<ul>\n<li><tt>server</tt>: The hostname or IP address of the host to connect to</li>\n<li><tt>max_envelope_size</tt>: The maximum envelope size, in bytes, that can\nbe sent to the server, default is <tt>153600</tt></li>\n<li><tt>operation_timeout</tt>: The operation timeout, in seconds, of each\nWSMan operation, default is <tt>20</tt>. This should always be lower than\n<tt>read_timeout</tt>.</li>\n<li><tt>port</tt>: The port to connect to, default is <tt>5986</tt> if <tt>ssl=True</tt>\nelse <tt>5985</tt></li>\n<li><tt>username</tt>: The username to connect with, required for all auths\nexcept <tt>certificate</tt> and optionally required for\n<tt>negotiate/kerberos</tt></li>\n<li><tt>password</tt>: The password for <tt>username</tt>. Due to a bug on\nMacOS/Heimdal GSSAPI implementations, this will persist in the user\u2019s\nccache when using Negotiate or Kerberos authentication, run\n<tt>kdestroy</tt> manually to remove this</li>\n<li><tt>ssl</tt>: Whether to connect over <tt>https</tt> or <tt>https</tt>, default is\n<tt>True</tt></li>\n<li><tt>path</tt>: The WinRM path to connect to, default is <tt>wsman</tt></li>\n<li><tt>auth</tt>: The authentication protocol to use, default is\n<tt>negotiate</tt>, choices are <tt>basic</tt>, <tt>certificate</tt>, <tt>negotiate</tt>,\n<tt>ntlm</tt>, <tt>kerberos</tt>, <tt>credssp</tt></li>\n<li><tt>cert_validation</tt>: Whether to validate the server\u2019s SSL\ncertificate, default is <tt>True</tt>. Can be <tt>False</tt> to not validate or\na path to a PEM file of trusted certificates</li>\n<li><tt>connection_timeout</tt>: The timeout for creating a HTTP connection,\ndefault is <tt>30</tt></li>\n<li><tt>read_timeout</tt>: The timeout for receiving a response from the\nserver after a request has been made, default is <tt>30</tt></li>\n<li><tt>encryption</tt>: Controls the encryption settings, default is\n<tt>auto</tt>, choices are <tt>auto</tt>, <tt>always</tt>, <tt>never</tt>. Set to\n<tt>always</tt> to always run message encryption even over HTTPS,\n<tt>never</tt> to never use message encryption even over HTTP</li>\n<li><tt>proxy</tt>: The proxy URL used to connect to the remote host</li>\n<li><tt>no_proxy</tt>: Whether to ignore any environment proxy variable and\nconnect directly to the host, default is <tt>False</tt></li>\n<li><tt>locale</tt>: The <tt>wsmv:Locale</tt> value to set on each WSMan request.\nThis specifies the language in which the cleint wants response text\nto be translated, default is <tt><span class=\"pre\">en-US</span></tt></li>\n<li><tt>data_locale</tt>: The <tt>wsmv:DataLocale</tt> value to set on each WSMan\nrequest. This specifies the format in which numerical data is\npresented in the response text, default is the value of <tt>locale</tt></li>\n<li><tt>reconnection_retries</tt>: Number of retries on a connection problem,\ndefault is <tt>0</tt></li>\n<li><tt>reconnection_backoff</tt>: Number of seconds to backoff in between\nreconnection attempts (first sleeps X, then sleeps 2<em>X, 4</em>X, 8*X,\n\u2026), default is <tt>2.0</tt></li>\n<li><tt>certificate_key_pem</tt>: The path to the certificate key used in\n<tt>certificate</tt> authentication</li>\n<li><tt>certificate_pem</tt>: The path to the certificate used in\n<tt>certificate</tt> authentication</li>\n<li><tt>credssp_auth_mechanism</tt>: The sub-auth mechanism used in CredSSP,\ndefault is <tt>auto</tt>, choices are <tt>auto</tt>, <tt>ntlm</tt>, or <tt>kerberos</tt></li>\n<li><tt>credssp_disable_tlsv1_2</tt>: Whether to used CredSSP auth over the\ninsecure TLSv1.0, default is <tt>False</tt></li>\n<li><tt>credssp_minimum_version</tt>: The minimum CredSSP server version that\nthe client will connect to, default is <tt>2</tt></li>\n<li><tt>negotiate_delegate</tt>: Whether to negotiate the credential to the\nhost, default is <tt>False</tt>. This is only valid if <tt>negotiate</tt> auth\nnegotiated Kerberos or <tt>kerberos</tt> was explicitly set</li>\n<li><tt>negotiate_hostname_override</tt>: The hostname used to calculate the\nhost SPN when authenticating the host with Kerberos auth. This is\nonly valid if <tt>negotiate</tt> auth negotiated Kerberos or <tt>kerberos</tt>\nwas explicitly set</li>\n<li><tt>negotiate_send_cbt</tt>: Whether to binding the channel binding token\n(HTTPS only) to the auth or ignore, default is <tt>True</tt></li>\n<li><tt>negotiate_service</tt>: Override the service part of the calculated\nSPN used when authenticating the server, default is <tt>WSMAN</tt>. This\nis only valid if <tt>negotiate</tt> auth negotiated Kerberos or\n<tt>kerberos</tt> was explicitly set</li>\n</ul>\n<p>When running over HTTP, this library will enforce encryption by default\nbut if that is not supported (Basic auth) or isn\u2019t available on the host\nthen either use HTTPS or disable encryption with <tt><span class=\"pre\">encryption=\"never\"</span></tt>.</p>\n<p>There are plans to add support for SSH as a connection but this still\nneeds to be implemented. SSH will work on hosts that are running\nPowerShell Core but not the standard PowerShell.</p>\n</div>\n<div id=\"shell\">\n<h3>Shell</h3>\n<p>There are two shells that can be used in this library,\n<tt>pypsrp.shell.WinRS</tt> and <tt>pypsrp.powershell.RunspacePool</tt>.</p>\n<p><tt>WinRS</tt> is a cmd shell that can be used to issue cmd commands,\nincluding but not limited to other executables. Here are the options\nthat can be used to configure a <tt>WinRS</tt> shell;</p>\n<ul>\n<li><tt>wsman</tt>: WinRS only works over WSMan, so this is the\n<tt>pypsrp.wsman.WSMan</tt> object to run the commands over</li>\n<li><tt>resource_uri</tt>: The resource uri of the shell, defaults to\n<tt><span class=\"pre\">http://schemas.microsoft.com/wbem/wsman/1/windows/shell/cmd</span></tt></li>\n<li><tt>id</tt>: The ID if the shell, this should be kept as <tt>None</tt> as it is\ncreated dynamically by the server</li>\n<li><tt>input_streams</tt>: The input stream(s) of the shell, default is\n<tt>stdin</tt></li>\n<li><tt>output_streams</tt>: The output stream(s) of the shell, default is\n<tt>stdout, stderr</tt></li>\n<li><tt>codepage</tt>: The codepage of the shell, default is the default of\nthe host</li>\n<li><tt>environment</tt>: A dictionary of environment key/values to set for\nthe remote shell</li>\n<li><tt>idle_time_out</tt>: THe idle timeout in seconds of the shell</li>\n<li><tt>lifetime</tt>: The total lifetime of the shell</li>\n<li><tt>name</tt>: The name (description only) of the shell</li>\n<li><tt>no_profile</tt>: Whether to create the shell with the user profile\nloaded or not</li>\n<li><tt>working_directory</tt>: The default working directory of the created\nshell</li>\n</ul>\n<p><tt>RunspacePool</tt> is a shell used by the PSRP protocol, it is designed to\nbe a close implementation of the .NET\n<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.runspacepool?view=powershellsdk-1.1.0\" rel=\"nofollow\">System.Management.Automation.Runspaces.RunspacePool</a>\nclass. The methods and properties are similar and can mostly do the same\nthing. Here are the options that can be used to configure a\n<tt>RunspacePool</tt> shell;</p>\n<ul>\n<li><tt>connection</tt>: The connection object used by the RunspacePool to\nsend commands to the remote server, currently only supports <tt>WSMan</tt></li>\n<li><tt>apartment_state</tt>: The int value of\n<tt>pypsrp.complex_objects.ApartmentState</tt> for the remote thread,\ndefault is <tt>UNKNOWN</tt></li>\n<li><tt>thread_options</tt>: The int value of\n<tt>pypsrp.complex_objects.ThreadOptions</tt> that specifies the type of\nthread to create, default is <tt>DEFAULT</tt></li>\n<li><tt>host</tt>: The local host info implementation, default is no host</li>\n<li><tt>configuration_name</tt>: The configuration name to connect to, default\nis <tt>Microsoft.PowerShell</tt> and can be used to specify the Just\nEnough Administration (JEA) to connect to</li>\n<li><tt>min_runspaces</tt>: The minimuum number of runspaces that a pool can\nhold, default is 1</li>\n<li><tt>max_runspaces</tt>: The maximum number of runspaces that a pool can\nhold. Each PowerShell pipeline is run in a single Runspace, default\nis 1</li>\n<li><tt>session_key_timeout_ms</tt>: The maximum time to wait for a session\nkey transfer from the server</li>\n</ul>\n</div>\n<div id=\"process\">\n<h3>Process</h3>\n<p>There are two process objects that can be used, <tt>pypsrp.shell.Process</tt>\nfor the <tt>WinRS</tt> shell and <tt>pypsrp.powershell.PowerShell</tt> for the\n<tt>RunspacePool</tt> shell. These objects are ultimately used to execute\ncommands, processes, or scripts on the remote host.</p>\n<p><tt>Process</tt> is used with the <tt>WinRS</tt> shell to execute a cmd command or\nanother executable. The following options are used to configure the\n<tt>Process</tt> object;</p>\n<ul>\n<li><tt>shell</tt>: The <tt>WinRS</tt> shell the process is run over</li>\n<li><tt>executable</tt>: The executable or command to run</li>\n<li><tt>arguments</tt>: A list of arguments to the executable or command,\ndefault is no arguments</li>\n<li><tt>id</tt>: The ID of the created command, if not specified then this is\ndynamically created</li>\n<li><tt>no_shell</tt>: Whether to create a command in the cmd shell or bypass\nit, default is <tt>False</tt>. If <tt>True</tt> then the executable must be the\nfull path to the exe. This only works on older OS\u2019 before 2012 R2\n(not including)</li>\n</ul>\n<p>To execute the process, call <tt>.invoke()</tt>, the <tt>stdout</tt>, <tt>stderr</tt>,\nand <tt>rc</tt> properties contain the output of the command once complete.</p>\n<p><tt>PowerShell</tt> is used by the PSRP protocol, it is designed to be a\nclose implementation of the\n<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell?view=powershellsdk-1.1.0\" rel=\"nofollow\">System.Management.Automation.PowerShell</a>\nclass. The methods and properties are similar and can mostly do the same\nthing. Here are the options that can be used to configure a\n<tt>PowerShell</tt> process;</p>\n<ul>\n<li><tt>runspace_pool</tt>: The <tt>RunspacePool</tt> object to run the\n<tt>PowerShell</tt> process on</li>\n</ul>\n<p>To execute the process, call <tt>.invoke()</tt>, the <tt>output</tt>,\n<tt>had_erros</tt>, and <tt>streams</tt> contains the execution status and output\ninformation of the process. Before invoke can be called, cmdlets or\nscripts must be added. These can be done with the following methods;</p>\n<ul>\n<li><tt>add_script</tt>: Add a raw PowerShell script to the pending commands</li>\n<li><tt>add_cmdlet</tt>: Add a cmdlet to the pending commands</li>\n<li><tt>add_parameters</tt>: Add a dictionary of key/value parameters to the\nlast added command</li>\n<li><tt>add_argument</tt>: Add a value argument to the last added command</li>\n<li><tt>add_statement</tt>: Set the last command/script to be the end of that\npipeline so the next command/script is like a newline</li>\n</ul>\n<p>See the examples below for more details.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>How to use the high level client API</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypsrp.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"c1\"># this takes in the same kwargs as the WSMan object</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s2\">\"server\"</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"password\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># execute a cmd command</span>\n<span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_cmd</span><span class=\"p\">(</span><span class=\"s2\">\"dir\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_cmd</span><span class=\"p\">(</span><span class=\"s2\">\"powershell.exe gci $pwd\"</span><span class=\"p\">)</span>\n<span class=\"n\">sanitised_stderr</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">sanitise_clixml</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># execute a PowerShell script</span>\n<span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">streams</span><span class=\"p\">,</span> <span class=\"n\">had_errors</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_ps</span><span class=\"p\">(</span><span class=\"s1\">'''$path = \"</span><span class=\"si\">%s</span><span class=\"s1\">\"\nif (Test-Path -Path $path) {\n    Remove-Item -Path $path -Force -Recurse\n}\nNew-Item -Path $path -ItemType Directory'''</span> <span class=\"o\">%</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">streams</span><span class=\"p\">,</span> <span class=\"n\">had_errors</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_ps</span><span class=\"p\">(</span><span class=\"s2\">\"New-Item -Path C:</span><span class=\"se\">\\\\</span><span class=\"s2\">temp</span><span class=\"se\">\\\\</span><span class=\"s2\">folder -ItemType Directory\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># copy a file from the local host to the remote host</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s2\">\"~/file.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s2\">temp</span><span class=\"se\">\\\\</span><span class=\"s2\">file.txt\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fetch a file from the remote host to the local host</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s2\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s2\">temp</span><span class=\"se\">\\\\</span><span class=\"s2\">file.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"~/file.txt\"</span><span class=\"p\">)</span>\n</pre>\n<p>How to use WinRS/Process to execute a command</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypsrp.shell</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span><span class=\"p\">,</span> <span class=\"n\">SignalCode</span><span class=\"p\">,</span> <span class=\"n\">WinRS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypsrp.wsman</span> <span class=\"kn\">import</span> <span class=\"n\">WSMan</span>\n\n<span class=\"c1\"># creates a http connection with no encryption and basic auth</span>\n<span class=\"n\">wsman</span> <span class=\"o\">=</span> <span class=\"n\">WSMan</span><span class=\"p\">(</span><span class=\"s2\">\"server\"</span><span class=\"p\">,</span> <span class=\"n\">ssl</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"s2\">\"basic\"</span><span class=\"p\">,</span> <span class=\"n\">encryption</span><span class=\"o\">=</span><span class=\"s2\">\"never\"</span><span class=\"p\">,</span>\n              <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"vagrant\"</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"vagrant\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">WinRS</span><span class=\"p\">(</span><span class=\"n\">wsman</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">shell</span><span class=\"p\">:</span>\n    <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"p\">,</span> <span class=\"s2\">\"dir\"</span><span class=\"p\">)</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">()</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">SignalCode</span><span class=\"o\">.</span><span class=\"n\">CTRL_C</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># execute a process with arguments in the background</span>\n    <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">shell</span><span class=\"p\">,</span> <span class=\"s2\">\"powershell\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"gci\"</span><span class=\"p\">,</span> <span class=\"s2\">\"$pwd\"</span><span class=\"p\">])</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">begin_invoke</span><span class=\"p\">()</span>  <span class=\"c1\"># start the invocation and return immediately</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">poll_invoke</span><span class=\"p\">()</span>  <span class=\"c1\"># update the output stream</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">end_invoke</span><span class=\"p\">()</span>  <span class=\"c1\"># finally wait until the process is finished</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">SignalCode</span><span class=\"o\">.</span><span class=\"n\">CTRL_C</span><span class=\"p\">)</span>\n</pre>\n<p>How to use RunspacePool/PowerShell to execute a PowerShell\nscript/command</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypsrp.powershell</span> <span class=\"kn\">import</span> <span class=\"n\">PowerShell</span><span class=\"p\">,</span> <span class=\"n\">RunspacePool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypsrp.wsman</span> <span class=\"kn\">import</span> <span class=\"n\">WSMan</span>\n\n<span class=\"c1\"># creates a https connection with explicit kerberos auth and implicit credentials</span>\n<span class=\"n\">wsman</span> <span class=\"o\">=</span> <span class=\"n\">WSMan</span><span class=\"p\">(</span><span class=\"s2\">\"server\"</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"s2\">\"kerberos\"</span><span class=\"p\">,</span> <span class=\"n\">cert_validation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">RunspacePool</span><span class=\"p\">(</span><span class=\"n\">wsman</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pool</span><span class=\"p\">:</span>\n    <span class=\"c1\"># execute 'Get-Process | Select-Object Name'</span>\n    <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">PowerShell</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Get-Process\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Select-Object\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"Name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># execute 'Get-Process | Select-Object -Property Name'</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Get-Process\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Select-Object\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_parameter</span><span class=\"p\">(</span><span class=\"s2\">\"Property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">begin_invoke</span><span class=\"p\">()</span>  <span class=\"c1\"># execute process in the background</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">poll_invoke</span><span class=\"p\">()</span>  <span class=\"c1\"># update the output streams</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">end_invoke</span><span class=\"p\">()</span>  <span class=\"c1\"># wait until the process is finished</span>\n\n    <span class=\"c1\"># execute 'Get-Process | Select-Object -Property Name; Get-Service audiosrv'</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Get-Process\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Select-Object\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_parameter</span><span class=\"p\">(</span><span class=\"s2\">\"Property\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_statement</span><span class=\"p\">()</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_cmdlet</span><span class=\"p\">(</span><span class=\"s2\">\"Get-Service\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"audiosrc\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># execute a PowerShell script with input being sent</span>\n    <span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"s1\">'''begin {\n    $DebugPreference = \"Continue\"\n    Write-Debug -Message \"begin\"\n} process {\n    Write-Output -InputObject $input\n} end {\n    Write-Debug -Message \"end\"\n}\n'''</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">add_script</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">)</span>\n    <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">([</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"logging\">\n<h2>Logging</h2>\n<p>This library takes advantage of the Python logging configuration and\nmessages are logged to the <tt>pypsrp</tt> named logger as well as\n<tt>pypsrp.*</tt> where <tt>*</tt> is each Python script in the <tt>pypsrp</tt>\ndirectory.</p>\n<p>An easy way to turn on logging for the entire library is to create the\nfollowing JSON file and run your script with\n<tt>PYPSRP_LOG_CFG=log.json python script.py</tt> (this does not work with\nPython 2.6).</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"disable_existing_loggers\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"formatters\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"simple\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nt\">\"handlers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"console\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"logging.StreamHandler\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"formatter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"simple\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"stream\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ext://sys.stdout\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nt\">\"loggers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"pypsrp\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"handlers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"console\"</span><span class=\"p\">],</span>\n            <span class=\"nt\">\"propagate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"no\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can adjust the log level by changing the level value in <tt>logger</tt>\nto <tt>INFO</tt>.</p>\n<p><em>Note: ``DEBUG`` contains a lot of information and will output all the\nmessages sent to and from the client. This can have the side effect of\nleaking sensitive information and should only be used for debugging\npurposes.</em></p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Any changes are more than welcome in pull request form, you can run the\ncurrent test suite with tox like so;</p>\n<pre># make sure tox is installed\npip install tox\n\n# run the tox suite\ntox\n\n# or run the test manually for the current Python environment\npy.test -v --pep8 --cov pypsrp --cov-report term-missing\n</pre>\n<p>A lot of the tests either simulate a remote Windows host but you can\nalso run a lot of them against a real Windows host. To do this, set the\nfollowing environment variables before running the tests;</p>\n<ul>\n<li><tt>PYPSRP_SERVER</tt>: The hostname or IP of the remote host</li>\n<li><tt>PYPSRP_USERNAME</tt>: The username to connect with</li>\n<li><tt>PYPSRP_PASSWORD</tt>: The password to connect with</li>\n<li><tt>PYPSRR_PORT</tt>: The port to connect with (default: <tt>5986</tt>)</li>\n<li><tt>PYPSRP_AUTH</tt>: The authentication protocol to auth with (default:\n<tt>negotiate</tt>)</li>\n</ul>\n<p>There are further integration tests that require a specific host setup\nto run correctly. You can use <tt>Vagrant</tt> to set this host up. This is\ndone by running the following commands;</p>\n<pre># download the Vagrant box and start it up based on the Vagrantfile\nvagrant up\n\n# once the above script is complete run the following\nvagrant ssh  # password is vagrant\n\npowershell.exe\nRegister-PSSessionConfiguration -Path \"C:\\Users\\vagrant\\Documents\\JEARoleSettings.pssc\" -Name JEARole -Force\n\n$sec_pass = ConvertTo-SecureString -String \"vagrant\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"vagrant\", $sec_pass\n$thumbprint = (Get-ChildItem -Path Cert:\\LocalMachine\\TrustedPeople)[0].Thumbprint\n\nNew-Item -Path WSMan:\\localhost\\ClientCertificate `\n    -Subject \"vagrant@localhost\" `\n    -URI * `\n    -Issuer $thumbprint `\n    -Credential $credential `\n    -Force\n\n\n# exit the remote PowerShell session\nexit\n\n# exist the SSH session\nexit\n</pre>\n<p>Once complete, set the following environment variables to run the\nintegration tests;</p>\n<ul>\n<li><tt>PYPSRP_RUN_INTEGRATION</tt>: To any value</li>\n<li><tt>PYPSRP_SERVER</tt>: Set to <tt>127.0.0.1</tt></li>\n<li><tt>PYPSRP_USERNAME</tt>: Set to <tt>vagrant</tt></li>\n<li><tt>PYPSRP_PASSWORD</tt>: Set to <tt>vagrant</tt></li>\n<li><tt>PYPSRP_HTTP_PORT</tt>: Set to <tt>55985</tt></li>\n<li><tt>PYPSRP_HTTPS_PORT</tt>: Set to <tt>55986</tt></li>\n<li><tt>PYPSRP_CERT_DIR</tt>: Set to the full path of the project directory</li>\n</ul>\n<p>From here you can run the normal test suite and it will run all the\nintegration tests.</p>\n</div>\n<div id=\"backlog\">\n<h2>Backlog</h2>\n<ul>\n<li>Look into adding SSH as a transport option</li>\n<li>Live interactive console for PSRP</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5853705, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "508d7a441fb57895515a416c6483c89a", "sha256": "a3430f84d88b3bf959ee3315c1306d39dde4968bae11649bc409bbf7bccddb26"}, "downloads": -1, "filename": "pypsrp-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "508d7a441fb57895515a416c6483c89a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 86116, "upload_time": "2018-07-13T03:17:52", "upload_time_iso_8601": "2018-07-13T03:17:52.514423Z", "url": "https://files.pythonhosted.org/packages/16/f4/14a2c66a3e108c60ce31ff142b4e2dea12f1ae3938c54a27bd74514805e5/pypsrp-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd7cc73b3a6ffd174a2b41ce60f82492", "sha256": "1fbbfdd26646c26c9306e0d9332828bc7bdc802f2a68b5ca2ff2ffd66d01cc41"}, "downloads": -1, "filename": "pypsrp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dd7cc73b3a6ffd174a2b41ce60f82492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89707, "upload_time": "2018-07-13T03:17:53", "upload_time_iso_8601": "2018-07-13T03:17:53.984978Z", "url": "https://files.pythonhosted.org/packages/fc/33/9371071b2b18297b0d5f6fd4bd4504afd6515ade898fa865e61745ed84ad/pypsrp-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "92b39bcd02df86c3556309b245c6ca6f", "sha256": "2250e281fb7e8a03bc8f1becad269bd8ecd39e5d84830dd44fb2c1b3b231725c"}, "downloads": -1, "filename": "pypsrp-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92b39bcd02df86c3556309b245c6ca6f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 87043, "upload_time": "2018-09-11T19:57:34", "upload_time_iso_8601": "2018-09-11T19:57:34.603870Z", "url": "https://files.pythonhosted.org/packages/1f/02/dc8ba696dcfdbc584b644386f9607b31547195378bde4da4ca130da947a7/pypsrp-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d028b069ab1d624078272c3c5f6b27b", "sha256": "8cefbe45cc4e130ff8003ca3baed3e40f0b80809dcd510b37d5a134fa320b01d"}, "downloads": -1, "filename": "pypsrp-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2d028b069ab1d624078272c3c5f6b27b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90882, "upload_time": "2018-09-11T19:57:36", "upload_time_iso_8601": "2018-09-11T19:57:36.783026Z", "url": "https://files.pythonhosted.org/packages/1c/13/d7768fd1d540a842ff00ebe23be581cc296402a22335929fa28723b5ba2c/pypsrp-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "103f6f512918622e890311150ba66ec4", "sha256": "34c6a832e46baa016c115165c9af1e132d9b717e5d39a327d57c41cd6233b3d8"}, "downloads": -1, "filename": "pypsrp-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "103f6f512918622e890311150ba66ec4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 87804, "upload_time": "2018-11-14T07:39:51", "upload_time_iso_8601": "2018-11-14T07:39:51.147519Z", "url": "https://files.pythonhosted.org/packages/37/fb/4d084dda49301248b21e413a47105f1dbcc9fc57eefd4b78baeb0a54fb3a/pypsrp-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d96bd90d2f266017fb4038c3da39374a", "sha256": "6fc06096d9a4ed0d447041ef31889b01d09b70d244cf8267c07cd6e61ecad1f9"}, "downloads": -1, "filename": "pypsrp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d96bd90d2f266017fb4038c3da39374a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91733, "upload_time": "2018-11-14T07:39:53", "upload_time_iso_8601": "2018-11-14T07:39:53.544008Z", "url": "https://files.pythonhosted.org/packages/27/fa/9d6f185a80ca8a388fe3b4149f5bded0734dfcd118c1a7a51ce1034e8e19/pypsrp-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7d68d06edcf2b458c8e42d32e34458b5", "sha256": "309853380fe086090a03cc6662a778ee69b1cae355ae4a932859034fd76e9d0b"}, "downloads": -1, "filename": "pypsrp-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7d68d06edcf2b458c8e42d32e34458b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 88379, "upload_time": "2019-02-26T06:36:53", "upload_time_iso_8601": "2019-02-26T06:36:53.398525Z", "url": "https://files.pythonhosted.org/packages/3c/c6/71a3edd4cefbf80c3513c97067e554fa5a74180e5eb02371a0ac8f9d56bc/pypsrp-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ea4c2799968e76b675056489870a867", "sha256": "90f946254f547dc3493cea8493c819ab87e152a755797c93aa2668678ba8ae85"}, "downloads": -1, "filename": "pypsrp-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2ea4c2799968e76b675056489870a867", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 92841, "upload_time": "2019-02-26T06:36:55", "upload_time_iso_8601": "2019-02-26T06:36:55.564630Z", "url": "https://files.pythonhosted.org/packages/84/c6/7f37b225228ccff49ca7c67a07de721a92d5bab22c8c89560299cf393971/pypsrp-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "678787add7fde5176f8790562d844487", "sha256": "f42919247fb80f7dc24c552560d7c24e754d15326030c9e3b7b94f51cfa4dc69"}, "downloads": -1, "filename": "pypsrp-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "678787add7fde5176f8790562d844487", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 91517, "upload_time": "2019-09-19T03:04:46", "upload_time_iso_8601": "2019-09-19T03:04:46.347670Z", "url": "https://files.pythonhosted.org/packages/b2/2b/911279da6d3d98695550c59c45eb341e30dbe896fd66b7e77932c5530f85/pypsrp-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9417ac94dfc126d9785633adfb950436", "sha256": "64b5bdd725a9744c821483b05ecd266f6417f4c6e90ee961a08838480f7d025e"}, "downloads": -1, "filename": "pypsrp-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9417ac94dfc126d9785633adfb950436", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 94952, "upload_time": "2019-09-19T03:04:49", "upload_time_iso_8601": "2019-09-19T03:04:49.359633Z", "url": "https://files.pythonhosted.org/packages/f7/73/e116b8f1a5a2580d920bce5b1e3ad846b999ed68001f964d227647261f3d/pypsrp-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "678787add7fde5176f8790562d844487", "sha256": "f42919247fb80f7dc24c552560d7c24e754d15326030c9e3b7b94f51cfa4dc69"}, "downloads": -1, "filename": "pypsrp-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "678787add7fde5176f8790562d844487", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 91517, "upload_time": "2019-09-19T03:04:46", "upload_time_iso_8601": "2019-09-19T03:04:46.347670Z", "url": "https://files.pythonhosted.org/packages/b2/2b/911279da6d3d98695550c59c45eb341e30dbe896fd66b7e77932c5530f85/pypsrp-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9417ac94dfc126d9785633adfb950436", "sha256": "64b5bdd725a9744c821483b05ecd266f6417f4c6e90ee961a08838480f7d025e"}, "downloads": -1, "filename": "pypsrp-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9417ac94dfc126d9785633adfb950436", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 94952, "upload_time": "2019-09-19T03:04:49", "upload_time_iso_8601": "2019-09-19T03:04:49.359633Z", "url": "https://files.pythonhosted.org/packages/f7/73/e116b8f1a5a2580d920bce5b1e3ad846b999ed68001f964d227647261f3d/pypsrp-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:00 2020"}