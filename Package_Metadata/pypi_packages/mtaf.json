{"info": {"author": "Martin McCrorey", "author_email": "martin.mccrorey@verizon.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "Mobile Test Automation Framework (MTAF)\n---------------------------------------\n\nThe Mobile Test Automation Framework (MTAF) supports end-to-end regression\ntests of web and Android applications. It provides unit test and\nBehavior-Driven Development (BDD) test case organization using a Python Page\nObject Model architecture. User interaction with the application under test\n(AUT) is simulated using Selenium Webdriver (for web applications) and the\nAppium Python Client (for Android applications). Support for iOS (also using\nAppium) is planned for future development.\n\nThe first release of the MTAF includes only the MTAF Inspector, a tool to\nhelp test programmers create automated tests that use Appium to interact with\nAndroid applications. The remaining framework components will be included\nonce they have been refactored for general release.\n\nMTAF Inspector creates a graphical user interface (GUI) to capture application\nscreenshots and calculate unique partial xpaths for displayed elements. The\nresulting xpaths are converted to an abbreviated format called \"zpath\" to make\nthem shorter (Android xpaths can be quite long).\n\nThe user can select elements individually with a mouse click, or click and\ndrag a selection rectangle on the displayed screenshot to narrow down the\nlist of partial zpaths shown on the screen. Resource ID's are also displayed,\nbut some elements won't have one, and a resource ID may not represent a unique\nelement on the screenshot.\n\nClicking on an ID or xpath will outline the corresponding element(s) on the\nscreenshot, and copy the ID or zpath value to the main GUI.\n\nThe main GUI can use Appium to find elements matching the ID or zpath\nvalue, and show information about the elements.\n\n----\n\nFeatures\n========\n**MTAF Inspector:**\n    - Graphical tool to assist in designing end-to-end tests on Android devices\n    - Works with Android device emulators, or Android devices via USB connection\n    - Interactively determines valid locators for screen elements, for use with\n      Appium\n    - When no Appium server is present, grabs screenshots and xml using adb\n    - When used with Appium server, finds and manipulates visible screen\n      elements\n    - Records Appium interactions in a log file\n    - Loads plugins to extend menus, zpaths and GUI elements for specific\n      applications (see https://github.com/mccrorey48/mtaf_plugins for examples)\n\n**MTAF Library Modules (Python):**\n    - ADB\n        For using ADB from Python, the pyand (https://github.com/ardevd/pyand)\n        ADB module is included (which avoids the problem of \"pip install\" not\n        recognizing modules hosted on github)\n    - selenium_actions\n        Defines SeleniumActions class for using Selenium methods\n    - android_actions\n        Defines AndroidActions class for using Appium Python Client methods\n    - ios_actions (future)\n        Defines IosActions class for using Appium Python Client methods\n    - android_zpath\n        Defines abbreviations used to convert Android xpaths to zpaths, a\n        short format that makes working with locators a lot easier\n    - ios_zpath (future)\n        Defines abbreviations used to convert iOS xpaths to zpaths\n    - filters.py\n        Filter functions used to narrow down lists of screen elements returned\n        by the Appium Python Client search methods\n    - mtaf_logging\n        Wrapper for Pythonmtaf_logging\n    - prune_logs\n        Utility to limit number and/or age of timestamped logs retained\n    - trace\n        Decorators formtaf_logging method calls and return values\n    - user_exception\n        Defines UserException class for graceful exception handling in test code\n    - softphone (future)\n        Creates and manages SIP softphones to make and receive calls for testing\n        devices that support voice calls\n\n**Page Object Model (future):**\n    - Each visible view (called a \"page\") displayed by an application under test\n      has a Python class which contains locators for that page, and methods to\n      be called while that page is displayed\n    - Locators for visible elements on the page are given names that convey the\n      element's function\n    - Each page class represents a separate namespace for locator names, so that\n      names can be re-used on other pages without conflict\n    - Test steps are generally implemented by calling methods belonging to the\n      current page's class, and these methods obtain locators from the locator\n      namespace belonging to their class\n    - Pages can inherit from a common base page class when they share common\n      elements and functionality; in this case, methods and locators are\n      inherited from the base class unless overridden in the current page class\n\n**Python Unit Test (future):**\n    - Test suite classes are structured using the Python unittest module\n      conventions\n    - Custommtaf_logging, and method call tracing using decorators\n\n**Python Feature Test (future):**\n    - Uses the Python \"behave\" framework\n    - Tests are written in \"feature\" files, using Gherkin BDD language\n    - Feature files describe tests in feature/scenario/step format, using \"plain language\" phrases to describe user interaction with the application\n    - Test step phrases are implemented in Python\n    - Test results are saved in a MongoDB database and available for review using a web browser\n\n**Report Single Page Application (future):**\n    - AngularJS application displays test results saved by Python Feature Test\n\n----\n\nRunning Inspector\n=================\n\nWhen running \"pip install mtaf\", a command-line executable named \"mtaf-inspector\" is installed in a directory\nthat depends on the system configuration:\n- (Darwin) /usr/local/bin\n- (Linux) /usr/local/bin\n- (Linux with virtualenv) <virtualenv directory>/<virtualenv name>/bin\n- (Windows) C:\\Python<version>\\Scripts\n- (Windows with virtualenv) C:\\Users\\<user name>\\Envs\\<virtualenv name>\\Scripts\n\n\nThe mtaf-inspector executable can be run if the following requirements are met:\n\n- adb can be found on the current path\n- Python and Tkinter are installed on the local machine\n- an Appium server is running on the local machine (optional)\n- the script has permission to write in the temporary files directory (default value is 'MtafInspector' in /tmp\n  (Linux or Darwin) or %TEMP% (Windows)\n\n- Alternatively, inspector can be run from a Python script with these two lines::\n\n    from mtaf.inspector import start\n    start()\n\nMTAF Inspector presents a GUI with these components (from top to bottom):\n\n- a menu bar with drop-down menus for both Appium and ADB operations\n- buttons and other controls for performing various operations that require Appium\n- a input field for entering arbitrary Python commands that will be run in the global context when the \"exec\" button is clicked\n- a scrolling text window that displays captured standard output\n- a scrolling text window that displays recorded commands\n- a bar with \"screenshot\" and \"quit\" buttons\n\nThe buttons and controls requiring Appium, along with the Appium drop-down menu,\nare disabled until Appium is started. To start Appium, run an Appium server\ninstance on the local machine, and click \"Start Appium\" on the menu\nbar.\n\nClick the \"screenshot\" button to capture a screenshot and the xml\nrepresentation of the current display.  This does not require Appium to be\nstarted, since Inspector will use ADB if Appium has not been started.\nInspector will display the screenshot, and a column of minimum unique relative\nzpaths for each element on the display; these are translated by MTAF methods\ninto the shortest xpaths that Appium can use to find that individual element.\nSome elements may have resource id's, which will be\ndisplayed in a separate column. Clicking a resource id will highlight one or\nmore elements on the screenshot (preloading the \"find element\" locator field in\nthe main GUI), and corresponding zpaths will be highlighted. Clicking a zpath\nwill highlight one element (highlighting the corresponding resource ID if the\nelement has one) and preload the zpath into the \"find element\" locator field.\n\n----\n\nConfiguration\n=============\n\nOptions settings can be placed in a YAML configuration file or included on the command line.\n\nThe YAML format for options with string values is::\n\n    <option name>: <option value>\n\nwithout quotes.\n\nFor options with dictionary values (see \"zpath_tags_new\" and \"zpath_tags_all\", below) the format is::\n\n    <option name>:\n        <attribute name>: <value>\n        <attribute name>: <value>\n        etc.\n\nString-valued configuration options can be set on the command line using this format::\n\n    <option name>=<option value>\n\nwithout quotes or spaces. An option set on the command line will override an option\nwith the same name in the configuration file.\n\nThis is the list of possible command-line options::\n\n    option                long format                description\n    -------------------   -------------------------  -------------------------------------------------------\n    -h                    --help                     print usage and exit\n    -c <file path>        --config_file              configuration file path (default: ./config.yml)\n    -p <directory path>   --plugin_dir               prepended to sys.path for locating inspector_plugins module\n    -d                    --debug                    print configuration\n    -s                    --show_configuration_only  print configuration and exit\n    <option>=<value>                                 set configuration options with string values\n\nPossible configuration options include::\n\n    option             format      description\n    -----------------  ----------  ------------------------------------------------------------\n    tmp_dir                        directory for saving temporary files\n    log_window_height              text height of \"standard output\" and \"recorded text\" windows\n    plugin_dir                     path to directory containing \"inspector_plugins\" directory\n    zpath_tags_new     dictionary  zpaths (abbreviated minimal xpaths) to be added to the built-in list\n    zpath_tags_all     dictionary  zpaths to replace the built-in list\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mccrorey48/mtaf", "keywords": "python,android,appium,selenium,adb,uiautomator,viewer,inspector,gui,locator,screenshot,xpath,resource_id,page object model", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mtaf", "package_url": "https://pypi.org/project/mtaf/", "platform": "", "project_url": "https://pypi.org/project/mtaf/", "project_urls": {"Homepage": "https://github.com/mccrorey48/mtaf"}, "release_url": "https://pypi.org/project/mtaf/1.0.47/", "requires_dist": ["Appium-Python-Client (==0.25)", "babel (==2.6.0)", "beautifulsoup4 (==4.6.1)", "behave (==1.2.6)", "ipaddress (==1.0.22)", "olefile (==0.44)", "requests (==2.18.4)", "Pillow (==4.3.0)", "psutil (==5.4.6)", "pymongo (==3.3.1)", "pyserial (==3.3)", "PyYAML (==3.12)", "selenium (==3.8.0)", "six (==1.11.0)", "spur (==0.3.20)", "spur (==0.3.20)", "tkfilebrowser (==2.2.2)"], "requires_python": "", "summary": "Mobile Test Automation Framework with Appium Inspector GUI for Android Applications", "version": "1.0.47", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Mobile Test Automation Framework (MTAF) supports end-to-end regression\ntests of web and Android applications. It provides unit test and\nBehavior-Driven Development (BDD) test case organization using a Python Page\nObject Model architecture. User interaction with the application under test\n(AUT) is simulated using Selenium Webdriver (for web applications) and the\nAppium Python Client (for Android applications). Support for iOS (also using\nAppium) is planned for future development.</p>\n<p>The first release of the MTAF includes only the MTAF Inspector, a tool to\nhelp test programmers create automated tests that use Appium to interact with\nAndroid applications. The remaining framework components will be included\nonce they have been refactored for general release.</p>\n<p>MTAF Inspector creates a graphical user interface (GUI) to capture application\nscreenshots and calculate unique partial xpaths for displayed elements. The\nresulting xpaths are converted to an abbreviated format called \u201czpath\u201d to make\nthem shorter (Android xpaths can be quite long).</p>\n<p>The user can select elements individually with a mouse click, or click and\ndrag a selection rectangle on the displayed screenshot to narrow down the\nlist of partial zpaths shown on the screen. Resource ID\u2019s are also displayed,\nbut some elements won\u2019t have one, and a resource ID may not represent a unique\nelement on the screenshot.</p>\n<p>Clicking on an ID or xpath will outline the corresponding element(s) on the\nscreenshot, and copy the ID or zpath value to the main GUI.</p>\n<p>The main GUI can use Appium to find elements matching the ID or zpath\nvalue, and show information about the elements.</p>\n<hr class=\"docutils\">\n<div id=\"features\">\n<h2>Features</h2>\n<dl>\n<dt><strong>MTAF Inspector:</strong></dt>\n<dd><ul>\n<li>Graphical tool to assist in designing end-to-end tests on Android devices</li>\n<li>Works with Android device emulators, or Android devices via USB connection</li>\n<li>Interactively determines valid locators for screen elements, for use with\nAppium</li>\n<li>When no Appium server is present, grabs screenshots and xml using adb</li>\n<li>When used with Appium server, finds and manipulates visible screen\nelements</li>\n<li>Records Appium interactions in a log file</li>\n<li>Loads plugins to extend menus, zpaths and GUI elements for specific\napplications (see <a href=\"https://github.com/mccrorey48/mtaf_plugins\" rel=\"nofollow\">https://github.com/mccrorey48/mtaf_plugins</a> for examples)</li>\n</ul>\n</dd>\n<dt><strong>MTAF Library Modules (Python):</strong></dt>\n<dd><ul>\n<li><dl>\n<dt>ADB</dt>\n<dd>For using ADB from Python, the pyand (<a href=\"https://github.com/ardevd/pyand\" rel=\"nofollow\">https://github.com/ardevd/pyand</a>)\nADB module is included (which avoids the problem of \u201cpip install\u201d not\nrecognizing modules hosted on github)</dd>\n</dl>\n</li>\n<li><dl>\n<dt>selenium_actions</dt>\n<dd>Defines SeleniumActions class for using Selenium methods</dd>\n</dl>\n</li>\n<li><dl>\n<dt>android_actions</dt>\n<dd>Defines AndroidActions class for using Appium Python Client methods</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ios_actions (future)</dt>\n<dd>Defines IosActions class for using Appium Python Client methods</dd>\n</dl>\n</li>\n<li><dl>\n<dt>android_zpath</dt>\n<dd>Defines abbreviations used to convert Android xpaths to zpaths, a\nshort format that makes working with locators a lot easier</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ios_zpath (future)</dt>\n<dd>Defines abbreviations used to convert iOS xpaths to zpaths</dd>\n</dl>\n</li>\n<li><dl>\n<dt>filters.py</dt>\n<dd>Filter functions used to narrow down lists of screen elements returned\nby the Appium Python Client search methods</dd>\n</dl>\n</li>\n<li><dl>\n<dt>mtaf_logging</dt>\n<dd>Wrapper for Pythonmtaf_logging</dd>\n</dl>\n</li>\n<li><dl>\n<dt>prune_logs</dt>\n<dd>Utility to limit number and/or age of timestamped logs retained</dd>\n</dl>\n</li>\n<li><dl>\n<dt>trace</dt>\n<dd>Decorators formtaf_logging method calls and return values</dd>\n</dl>\n</li>\n<li><dl>\n<dt>user_exception</dt>\n<dd>Defines UserException class for graceful exception handling in test code</dd>\n</dl>\n</li>\n<li><dl>\n<dt>softphone (future)</dt>\n<dd>Creates and manages SIP softphones to make and receive calls for testing\ndevices that support voice calls</dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><strong>Page Object Model (future):</strong></dt>\n<dd><ul>\n<li>Each visible view (called a \u201cpage\u201d) displayed by an application under test\nhas a Python class which contains locators for that page, and methods to\nbe called while that page is displayed</li>\n<li>Locators for visible elements on the page are given names that convey the\nelement\u2019s function</li>\n<li>Each page class represents a separate namespace for locator names, so that\nnames can be re-used on other pages without conflict</li>\n<li>Test steps are generally implemented by calling methods belonging to the\ncurrent page\u2019s class, and these methods obtain locators from the locator\nnamespace belonging to their class</li>\n<li>Pages can inherit from a common base page class when they share common\nelements and functionality; in this case, methods and locators are\ninherited from the base class unless overridden in the current page class</li>\n</ul>\n</dd>\n<dt><strong>Python Unit Test (future):</strong></dt>\n<dd><ul>\n<li>Test suite classes are structured using the Python unittest module\nconventions</li>\n<li>Custommtaf_logging, and method call tracing using decorators</li>\n</ul>\n</dd>\n<dt><strong>Python Feature Test (future):</strong></dt>\n<dd><ul>\n<li>Uses the Python \u201cbehave\u201d framework</li>\n<li>Tests are written in \u201cfeature\u201d files, using Gherkin BDD language</li>\n<li>Feature files describe tests in feature/scenario/step format, using \u201cplain language\u201d phrases to describe user interaction with the application</li>\n<li>Test step phrases are implemented in Python</li>\n<li>Test results are saved in a MongoDB database and available for review using a web browser</li>\n</ul>\n</dd>\n<dt><strong>Report Single Page Application (future):</strong></dt>\n<dd><ul>\n<li>AngularJS application displays test results saved by Python Feature Test</li>\n</ul>\n</dd>\n</dl>\n</div>\n<hr class=\"docutils\">\n<div id=\"running-inspector\">\n<h2>Running Inspector</h2>\n<p>When running \u201cpip install mtaf\u201d, a command-line executable named \u201cmtaf-inspector\u201d is installed in a directory\nthat depends on the system configuration:\n- (Darwin) /usr/local/bin\n- (Linux) /usr/local/bin\n- (Linux with virtualenv) &lt;virtualenv directory&gt;/&lt;virtualenv name&gt;/bin\n- (Windows) C:Python&lt;version&gt;Scripts\n- (Windows with virtualenv) C:Users&lt;user name&gt;Envs&lt;virtualenv name&gt;Scripts</p>\n<p>The mtaf-inspector executable can be run if the following requirements are met:</p>\n<ul>\n<li><p>adb can be found on the current path</p>\n</li>\n<li><p>Python and Tkinter are installed on the local machine</p>\n</li>\n<li><p>an Appium server is running on the local machine (optional)</p>\n</li>\n<li><p>the script has permission to write in the temporary files directory (default value is \u2018MtafInspector\u2019 in /tmp\n(Linux or Darwin) or %TEMP% (Windows)</p>\n</li>\n<li><p>Alternatively, inspector can be run from a Python script with these two lines:</p>\n<pre>from mtaf.inspector import start\nstart()\n</pre>\n</li>\n</ul>\n<p>MTAF Inspector presents a GUI with these components (from top to bottom):</p>\n<ul>\n<li>a menu bar with drop-down menus for both Appium and ADB operations</li>\n<li>buttons and other controls for performing various operations that require Appium</li>\n<li>a input field for entering arbitrary Python commands that will be run in the global context when the \u201cexec\u201d button is clicked</li>\n<li>a scrolling text window that displays captured standard output</li>\n<li>a scrolling text window that displays recorded commands</li>\n<li>a bar with \u201cscreenshot\u201d and \u201cquit\u201d buttons</li>\n</ul>\n<p>The buttons and controls requiring Appium, along with the Appium drop-down menu,\nare disabled until Appium is started. To start Appium, run an Appium server\ninstance on the local machine, and click \u201cStart Appium\u201d on the menu\nbar.</p>\n<p>Click the \u201cscreenshot\u201d button to capture a screenshot and the xml\nrepresentation of the current display.  This does not require Appium to be\nstarted, since Inspector will use ADB if Appium has not been started.\nInspector will display the screenshot, and a column of minimum unique relative\nzpaths for each element on the display; these are translated by MTAF methods\ninto the shortest xpaths that Appium can use to find that individual element.\nSome elements may have resource id\u2019s, which will be\ndisplayed in a separate column. Clicking a resource id will highlight one or\nmore elements on the screenshot (preloading the \u201cfind element\u201d locator field in\nthe main GUI), and corresponding zpaths will be highlighted. Clicking a zpath\nwill highlight one element (highlighting the corresponding resource ID if the\nelement has one) and preload the zpath into the \u201cfind element\u201d locator field.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Options settings can be placed in a YAML configuration file or included on the command line.</p>\n<p>The YAML format for options with string values is:</p>\n<pre>&lt;option name&gt;: &lt;option value&gt;\n</pre>\n<p>without quotes.</p>\n<p>For options with dictionary values (see \u201czpath_tags_new\u201d and \u201czpath_tags_all\u201d, below) the format is:</p>\n<pre>&lt;option name&gt;:\n    &lt;attribute name&gt;: &lt;value&gt;\n    &lt;attribute name&gt;: &lt;value&gt;\n    etc.\n</pre>\n<p>String-valued configuration options can be set on the command line using this format:</p>\n<pre>&lt;option name&gt;=&lt;option value&gt;\n</pre>\n<p>without quotes or spaces. An option set on the command line will override an option\nwith the same name in the configuration file.</p>\n<p>This is the list of possible command-line options:</p>\n<pre>option                long format                description\n-------------------   -------------------------  -------------------------------------------------------\n-h                    --help                     print usage and exit\n-c &lt;file path&gt;        --config_file              configuration file path (default: ./config.yml)\n-p &lt;directory path&gt;   --plugin_dir               prepended to sys.path for locating inspector_plugins module\n-d                    --debug                    print configuration\n-s                    --show_configuration_only  print configuration and exit\n&lt;option&gt;=&lt;value&gt;                                 set configuration options with string values\n</pre>\n<p>Possible configuration options include:</p>\n<pre>option             format      description\n-----------------  ----------  ------------------------------------------------------------\ntmp_dir                        directory for saving temporary files\nlog_window_height              text height of \"standard output\" and \"recorded text\" windows\nplugin_dir                     path to directory containing \"inspector_plugins\" directory\nzpath_tags_new     dictionary  zpaths (abbreviated minimal xpaths) to be added to the built-in list\nzpath_tags_all     dictionary  zpaths to replace the built-in list\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4211251, "releases": {"1.0.23": [{"comment_text": "", "digests": {"md5": "2ecf659dfc3bda4574a0f7e8cea7201a", "sha256": "82791353d6cf10a98b8d05af965eb0c9dca7879bb76ac17fb834c714ebf0fe8b"}, "downloads": -1, "filename": "mtaf-1.0.23-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2ecf659dfc3bda4574a0f7e8cea7201a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43366, "upload_time": "2018-01-26T16:36:18", "upload_time_iso_8601": "2018-01-26T16:36:18.317102Z", "url": "https://files.pythonhosted.org/packages/79/e2/f7ae4bdcb4c2ed15aec8412a8499dd24b46ab57ab44e0a844171c066ea95/mtaf-1.0.23-py2.py3-none-any.whl", "yanked": false}], "1.0.24": [{"comment_text": "", "digests": {"md5": "c9b729d6e1ef709e5c59da107806c29e", "sha256": "fd26968c851aae60d1b83bb2531560b4137b045da91d4a9380474662e412b6e4"}, "downloads": -1, "filename": "mtaf-1.0.24-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9b729d6e1ef709e5c59da107806c29e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43366, "upload_time": "2018-01-26T16:40:04", "upload_time_iso_8601": "2018-01-26T16:40:04.202863Z", "url": "https://files.pythonhosted.org/packages/34/00/ebd79dba52a9144e4900bf227f91537748bd2ddf49a540c967f10352ed0e/mtaf-1.0.24-py2.py3-none-any.whl", "yanked": false}], "1.0.25": [{"comment_text": "", "digests": {"md5": "2101d66a106b935d67c5884c555b9886", "sha256": "2f558916eb8b72f6facc74125b65261723685be52fdb53af9c633c057bfa14dc"}, "downloads": -1, "filename": "mtaf-1.0.25-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2101d66a106b935d67c5884c555b9886", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43351, "upload_time": "2018-01-26T16:46:07", "upload_time_iso_8601": "2018-01-26T16:46:07.847627Z", "url": "https://files.pythonhosted.org/packages/7c/ac/5517bf77269ee8f5098529f7dbf0e6dc4782661e42e4a7de221a8f6c8d97/mtaf-1.0.25-py2.py3-none-any.whl", "yanked": false}], "1.0.26": [{"comment_text": "", "digests": {"md5": "03ab40adfd659f1193edbfa0432dc4b2", "sha256": "497089ed3535c52c0488ccfa26c6d8eb40f3304a30c3f53db6b34c18c8187c30"}, "downloads": -1, "filename": "mtaf-1.0.26-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03ab40adfd659f1193edbfa0432dc4b2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43358, "upload_time": "2018-01-26T19:13:33", "upload_time_iso_8601": "2018-01-26T19:13:33.173253Z", "url": "https://files.pythonhosted.org/packages/ee/ae/1b75b212a4e3314fd60c048531da422068a04430a8a8c430d71c849f7cea/mtaf-1.0.26-py2.py3-none-any.whl", "yanked": false}], "1.0.27": [{"comment_text": "", "digests": {"md5": "256085ce76cf5c2dc58cc9b18506daa6", "sha256": "4a91ee041db80981f9a68fed04309137db73213c85e6c330a693aacda187c3d0"}, "downloads": -1, "filename": "mtaf-1.0.27-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "256085ce76cf5c2dc58cc9b18506daa6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43359, "upload_time": "2018-01-26T19:16:08", "upload_time_iso_8601": "2018-01-26T19:16:08.260462Z", "url": "https://files.pythonhosted.org/packages/48/17/7aa408ecc1544dd8a5c9bad84a32fada5e3d088fc668ff223dc80371b577/mtaf-1.0.27-py2.py3-none-any.whl", "yanked": false}], "1.0.28": [{"comment_text": "", "digests": {"md5": "28f0a437bb471975fbf46c98deb605e3", "sha256": "a9146ab40272662810e9f7d9ae6dd5665b6161b697642bf3831b9fbd6cb42e4f"}, "downloads": -1, "filename": "mtaf-1.0.28-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28f0a437bb471975fbf46c98deb605e3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 310252, "upload_time": "2018-01-30T17:03:43", "upload_time_iso_8601": "2018-01-30T17:03:43.135938Z", "url": "https://files.pythonhosted.org/packages/72/3e/8e95f631048cb481e23b5ab13b2fd6f88179a0bd8912f382158afea50dab/mtaf-1.0.28-py2.py3-none-any.whl", "yanked": false}], "1.0.29": [{"comment_text": "", "digests": {"md5": "72c878f51d18f4d85739a7734cc398ad", "sha256": "44fb99d68a970ca7b86e6956f5e1f537accb63116cf90f2e8966efcb7c6f9203"}, "downloads": -1, "filename": "mtaf-1.0.29-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "72c878f51d18f4d85739a7734cc398ad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 312055, "upload_time": "2018-01-30T18:52:31", "upload_time_iso_8601": "2018-01-30T18:52:31.801910Z", "url": "https://files.pythonhosted.org/packages/d8/52/db06a019cb515a8193f25b89ecbcb310d023dedc77f2d7c591e0131d687d/mtaf-1.0.29-py2.py3-none-any.whl", "yanked": false}], "1.0.30": [{"comment_text": "", "digests": {"md5": "cfb3f723aabcbffd0813ee184e8717c2", "sha256": "ae549f6535937cb86f2cd9b3789d447e3f9447a9eb564af7fc515f9c0f4a4e33"}, "downloads": -1, "filename": "mtaf-1.0.30-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cfb3f723aabcbffd0813ee184e8717c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 312089, "upload_time": "2018-01-30T18:57:12", "upload_time_iso_8601": "2018-01-30T18:57:12.705517Z", "url": "https://files.pythonhosted.org/packages/c5/f4/e7407cb967804cf5b94eedfa80908e8e021ec076666856d6c1d9dbc50923/mtaf-1.0.30-py2.py3-none-any.whl", "yanked": false}], "1.0.31": [{"comment_text": "", "digests": {"md5": "0bf6271804671d887d08f13aa5693c66", "sha256": "76283ee31f5d2e512dbbd7e388ba13daf89c33261053336efb7a87e18947c6af"}, "downloads": -1, "filename": "mtaf-1.0.31-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0bf6271804671d887d08f13aa5693c66", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 542707, "upload_time": "2018-01-30T21:44:03", "upload_time_iso_8601": "2018-01-30T21:44:03.421727Z", "url": "https://files.pythonhosted.org/packages/4d/a4/c597d86a967a35cdedce4aba9295da7e90134ab5953005b3d016277b085e/mtaf-1.0.31-py2.py3-none-any.whl", "yanked": false}], "1.0.32": [{"comment_text": "", "digests": {"md5": "45353819a035680c258975d4fa144cb7", "sha256": "6223fe06079b18574e0ca65357f3845def751ee5bd6a8db874bc522ea90375d4"}, "downloads": -1, "filename": "mtaf-1.0.32-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "45353819a035680c258975d4fa144cb7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 542730, "upload_time": "2018-02-01T19:27:23", "upload_time_iso_8601": "2018-02-01T19:27:23.038293Z", "url": "https://files.pythonhosted.org/packages/d2/54/758030c3e65e375c4634b4be98196dc4ee9b6917e8e92e06d928155f1c7a/mtaf-1.0.32-py2.py3-none-any.whl", "yanked": false}], "1.0.34": [{"comment_text": "", "digests": {"md5": "ef74ca29446d2bc9f6077e6aa42ebb93", "sha256": "cc41352bdf8b112affa053c604d1d581f1f820f419db5d4d37c72a685f5c4464"}, "downloads": -1, "filename": "mtaf-1.0.34-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef74ca29446d2bc9f6077e6aa42ebb93", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 543131, "upload_time": "2018-02-01T21:13:24", "upload_time_iso_8601": "2018-02-01T21:13:24.853290Z", "url": "https://files.pythonhosted.org/packages/57/70/250cd26090946d15297177335f9a9f384f2c8b68eff860c403b0859bbbab/mtaf-1.0.34-py2.py3-none-any.whl", "yanked": false}], "1.0.35": [{"comment_text": "", "digests": {"md5": "6992675babede6a3b6e3f70c75977f42", "sha256": "c9734f091a631ac14fb5da202b493f693b0991cd4b7e822691ed7038f9ca214c"}, "downloads": -1, "filename": "mtaf-1.0.35-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6992675babede6a3b6e3f70c75977f42", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 543184, "upload_time": "2018-02-02T19:48:22", "upload_time_iso_8601": "2018-02-02T19:48:22.001334Z", "url": "https://files.pythonhosted.org/packages/67/c1/d27632a3c8cada72c46e68db3c05c1980908c2fdc6f1b2e143d4442c5940/mtaf-1.0.35-py2.py3-none-any.whl", "yanked": false}], "1.0.36": [{"comment_text": "", "digests": {"md5": "931c44a4472ca26cd9d4cd5deb36d330", "sha256": "1629e0b93430d56a9b9251d4f9a601e79390529752558c7b0775d4219ae89c70"}, "downloads": -1, "filename": "mtaf-1.0.36-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "931c44a4472ca26cd9d4cd5deb36d330", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 71844, "upload_time": "2018-02-13T14:55:59", "upload_time_iso_8601": "2018-02-13T14:55:59.101399Z", "url": "https://files.pythonhosted.org/packages/db/04/812fc64ee72a86b338bbe9554e406bae27df8b39a6a3d7a6dc36b0bd7c29/mtaf-1.0.36-py2.py3-none-any.whl", "yanked": false}], "1.0.37": [{"comment_text": "", "digests": {"md5": "7b087693533595a7c6abad39ab04755a", "sha256": "5f8c3f9ccc7a1006a9f32fac3240a5b92ee7c269981fb80500ecd705b836b31b"}, "downloads": -1, "filename": "mtaf-1.0.37-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7b087693533595a7c6abad39ab04755a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 71950, "upload_time": "2018-02-14T16:54:07", "upload_time_iso_8601": "2018-02-14T16:54:07.537844Z", "url": "https://files.pythonhosted.org/packages/d0/41/19c6b97f9e6cc592a77237ba8a5b24b98899b8793e6a2a5266f48b82a2da/mtaf-1.0.37-py2.py3-none-any.whl", "yanked": false}], "1.0.38": [{"comment_text": "", "digests": {"md5": "218099ee7499378d0ced58dc587afcf3", "sha256": "c80a9452ff2ddb5e1a0929b48d67d09c6c78a8f197a9c9c8015ac985f6aa9984"}, "downloads": -1, "filename": "mtaf-1.0.38-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "218099ee7499378d0ced58dc587afcf3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 72114, "upload_time": "2018-03-21T19:41:18", "upload_time_iso_8601": "2018-03-21T19:41:18.634210Z", "url": "https://files.pythonhosted.org/packages/90/56/950571852b485143d1f8b171c29f07004c641c8ff189f5f6ce4e8d21c58d/mtaf-1.0.38-py2.py3-none-any.whl", "yanked": false}], "1.0.39": [{"comment_text": "", "digests": {"md5": "893f35be95ceb86e63f888f8ff05297d", "sha256": "8c69fb915d4bcb7cc4006d8d5172b9fa783392dd4e6a4a0175d18201d3428ee6"}, "downloads": -1, "filename": "mtaf-1.0.39-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "893f35be95ceb86e63f888f8ff05297d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 304393, "upload_time": "2018-03-26T19:15:15", "upload_time_iso_8601": "2018-03-26T19:15:15.579628Z", "url": "https://files.pythonhosted.org/packages/e3/63/8a725323cf497201ca80c188019827a65ccc5741c5ac48eaf64957314e5d/mtaf-1.0.39-py2.py3-none-any.whl", "yanked": false}], "1.0.40": [{"comment_text": "", "digests": {"md5": "a0577e535bcb19b3af89bb679e06593b", "sha256": "1d839588563c0b2efd6848218dbccdcd1a2cf85dc6fbfb206c0a131948cc8981"}, "downloads": -1, "filename": "mtaf-1.0.40-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0577e535bcb19b3af89bb679e06593b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 72681, "upload_time": "2018-04-17T18:33:56", "upload_time_iso_8601": "2018-04-17T18:33:56.209322Z", "url": "https://files.pythonhosted.org/packages/9d/9c/27faeec417680e33468699084e64da13afb7a704cfefae8f47c860c9f240/mtaf-1.0.40-py2.py3-none-any.whl", "yanked": false}], "1.0.41": [{"comment_text": "", "digests": {"md5": "ed37c5d80652cfd69edf181b8f05439f", "sha256": "9b3a8e331fc6567da2a964792f06c1491ca6598bb9d8b481bb445500882ea9e5"}, "downloads": -1, "filename": "mtaf-1.0.41-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed37c5d80652cfd69edf181b8f05439f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 72460, "upload_time": "2018-04-17T21:12:53", "upload_time_iso_8601": "2018-04-17T21:12:53.436317Z", "url": "https://files.pythonhosted.org/packages/4d/8e/de063cfa9eabcff389dbb756da291e7ca4146eb8fcb012d1562bd74c8a7f/mtaf-1.0.41-py2.py3-none-any.whl", "yanked": false}], "1.0.42": [{"comment_text": "", "digests": {"md5": "21f7a45e4e0fdaa66d53e2e1aeb82a70", "sha256": "26d29aa9a51eb30a76368d50cc24ae20a31bbfd16fb37fdc0824df8f8a0c607c"}, "downloads": -1, "filename": "mtaf-1.0.42-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "21f7a45e4e0fdaa66d53e2e1aeb82a70", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 300724, "upload_time": "2018-04-30T18:54:14", "upload_time_iso_8601": "2018-04-30T18:54:14.678449Z", "url": "https://files.pythonhosted.org/packages/e2/ee/d16dd301a15abd649039b8d543be9ff13d666a0c05f870251735af558970/mtaf-1.0.42-py2.py3-none-any.whl", "yanked": false}], "1.0.43": [{"comment_text": "", "digests": {"md5": "82f88500abdaa58ef5494cc6bf0ab622", "sha256": "3af446953eb0dbb6a4680ab84def4b1a691de1ba1432a44df379ee0b93d18709"}, "downloads": -1, "filename": "mtaf-1.0.43-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "82f88500abdaa58ef5494cc6bf0ab622", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 300763, "upload_time": "2018-04-30T19:27:46", "upload_time_iso_8601": "2018-04-30T19:27:46.246199Z", "url": "https://files.pythonhosted.org/packages/c6/46/1ccfdeae26185846b58873be093cfa46b55412f97af784d30bf1895bbe1a/mtaf-1.0.43-py2.py3-none-any.whl", "yanked": false}], "1.0.44": [{"comment_text": "", "digests": {"md5": "8def47bd23e9f9c58ff7a8ddcf3dc26d", "sha256": "b22eb13e47c28ef6811cba425ec8998870087e6efb34a238bf8228be2f8613f8"}, "downloads": -1, "filename": "mtaf-1.0.44-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8def47bd23e9f9c58ff7a8ddcf3dc26d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 300874, "upload_time": "2018-05-01T15:42:39", "upload_time_iso_8601": "2018-05-01T15:42:39.386216Z", "url": "https://files.pythonhosted.org/packages/d4/52/9285c5e9f5bca2e21431c465414d47090f32eacd2e105a783181d559c2ec/mtaf-1.0.44-py2.py3-none-any.whl", "yanked": false}], "1.0.47": [{"comment_text": "", "digests": {"md5": "ea9e801bb7f9ef315b7dc4052eacee0b", "sha256": "056f5c373280899cd61d6c3635bf82d8805628025cda553f613c4bbe4e3aa722"}, "downloads": -1, "filename": "mtaf-1.0.47-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ea9e801bb7f9ef315b7dc4052eacee0b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 313971, "upload_time": "2018-08-27T14:20:24", "upload_time_iso_8601": "2018-08-27T14:20:24.270804Z", "url": "https://files.pythonhosted.org/packages/81/34/dfd6bbb696e1d6c3297353791bf72cb92271aee6cdf99e78307da652ed2b/mtaf-1.0.47-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea9e801bb7f9ef315b7dc4052eacee0b", "sha256": "056f5c373280899cd61d6c3635bf82d8805628025cda553f613c4bbe4e3aa722"}, "downloads": -1, "filename": "mtaf-1.0.47-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ea9e801bb7f9ef315b7dc4052eacee0b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 313971, "upload_time": "2018-08-27T14:20:24", "upload_time_iso_8601": "2018-08-27T14:20:24.270804Z", "url": "https://files.pythonhosted.org/packages/81/34/dfd6bbb696e1d6c3297353791bf72cb92271aee6cdf99e78307da652ed2b/mtaf-1.0.47-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:50:44 2020"}