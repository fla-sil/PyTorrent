{"info": {"author": "Syrus Akbary", "author_email": "me@syrusakbary.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "# Relay Library for GraphQL Python\n\nGraphQL-relay-py is the [Relay](https://relay.dev/) library for\n[GraphQL-core](https://github.com/graphql-python/graphql-core).\n\nIt allows the easy creation of Relay-compliant servers using GraphQL-core.\n\nGraphQL-Relay-Py is a Python port of\n[graphql-relay-js](https://github.com/graphql/graphql-relay-js),\nwhile GraphQL-Core is a Python port of\n[GraphQL.js](https://github.com/graphql/graphql-js),\nthe reference implementation of GraphQL for JavaScript.\n\nSince version 3, GraphQL-Relay-Py and GraphQL-Core support Python 3.6 and above only.\nFor older versions of Python, you can use version 2 of these libraries.\n\n[![PyPI version](https://badge.fury.io/py/graphql-relay.svg)](https://badge.fury.io/py/graphql-relay)\n[![Build Status](https://travis-ci.org/graphql-python/graphql-relay-py.svg?branch=master)](https://travis-ci.org/graphql-python/graphql-relay-py)\n[![Coverage Status](https://coveralls.io/repos/graphql-python/graphql-relay-py/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql-python/graphql-relay-py?branch=master)\n\n## Getting Started\n\nA basic understanding of GraphQL and of the GraphQL Python implementation is needed\nto provide context for this library.\n\nAn overview of GraphQL in general is available in the\n[README](https://github.com/graphql-python/graphql-core/blob/master/README.md) for the\n[Specification for GraphQL](https://github.com/graphql-python/graphql-core).\n\nThis library is designed to work with the\nthe [GraphQL-Core](https://github.com/graphql-python/graphql-core)\nPython reference implementation of a GraphQL server.\n\nAn overview of the functionality that a Relay-compliant GraphQL server should provide\nis in the [GraphQL Relay Specification](https://facebook.github.io/relay/docs/graphql-relay-specification.html)\non the [Relay website](https://facebook.github.io/relay/).\nThat overview describes a simple set of examples that exist\nas [tests](tests) in this repository.\nA good way to get started with this repository is to walk through that documentation\nand the corresponding tests in this library together.\n\n## Using Relay Library for GraphQL Python (graphql-core-next)\n\nInstall Relay Library for GraphQL Python\n\n```sh\npip install graphql-core-next\npip install graphql-relay\n```\n\nWhen building a schema for [GraphQL](https://github.com/graphql-python/graphql-core),\nthe provided library functions can be used to simplify the creation of Relay\npatterns.\n\n### Connections\n\nHelper functions are provided for both building the GraphQL types\nfor connections and for implementing the `resolver` method for fields\nreturning those types.\n\n - `connection_args` returns the arguments that fields should provide when\nthey return a connection type.\n - `connection_definitions` returns a `connection_type` and its associated\n`edgeType`, given a name and a node type.\n - `connection_from_array` is a helper method that takes an array and the\narguments from `connection_args`, does pagination and filtering, and returns\nan object in the shape expected by a `connection_type`'s `resolver` function.\n\n - `cursor_for_object_in_connection` is a helper method that takes an array and a\nmember object, and returns a cursor for use in the mutation payload.\n\nAn example usage of these methods from the [test schema](tests/starwars/schema.py):\n\n```python\nship_edge, ship_connection = connection_definitions('Ship', shipType)\n\nfactionType = GraphQLObjectType(\n    name='Faction',\n    description='A faction in the Star Wars saga',\n    fields=lambda: {\n        'id': global_id_field('Faction'),\n        'name': GraphQLField(\n            GraphQLString,\n            description='The name of the faction.',\n        ),\n        'ships': GraphQLField(\n            ship_connection,\n            description='The ships used by the faction.',\n            args=connection_args,\n            resolve=lambda faction, _info, **args: connection_from_array(\n                [getShip(ship) for ship in faction.ships], args),\n        )\n    },\n    interfaces=[node_interface]\n)\n```\n\nThis shows adding a `ships` field to the `Faction` object that is a connection.\nIt uses `connection_definitions('Ship', shipType)` to create the connection\ntype, adds `connection_args` as arguments on this function, and then implements\nthe resolver function by passing the array of ships and the arguments to\n`connection_from_array`.\n\n### Object Identification\n\nHelper functions are provided for both building the GraphQL types\nfor nodes and for implementing global IDs around local IDs.\n\n - `node_definitions` returns the `Node` interface that objects can implement,\n    and returns the `node` root field to include on the query type.\n    To implement this, it takes a function to resolve an ID to an object,\n    and to determine the type of a given object.\n - `to_global_id` takes a type name and an ID specific to that type name,\n    and returns a \"global ID\" that is unique among all types.\n - `from_global_id` takes the \"global ID\" created by `to_global_id`, and\n    returns the type name and ID used to create it.\n - `global_id_field` creates the configuration for an `id` field on a node.\n - `plural_identifying_root_field` creates a field that accepts a list of\n    non-ID identifiers (like a username) and maps then to their corresponding\n    objects.\n\nAn example usage of these methods from the [test schema](tests/starwars/schema.py):\n\n```python\ndef get_node(global_id, _info):\n    type_, id_ = from_global_id(global_id)\n    if type_ == 'Faction':\n        return getFaction(id_)\n    elif type_ == 'Ship':\n        return getShip(id_)\n    else:\n        return None\n\ndef get_node_type(obj, _info, _type):\n    if isinstance(obj, Faction):\n        return factionType\n    else:\n        return shipType\n\nnode_interface, node_field = node_definitions(get_node, get_node_type)\n\nfactionType = GraphQLObjectType(\n    name= 'Faction',\n    description= 'A faction in the Star Wars saga',\n    fields= lambda: {\n        'id': global_id_field('Faction'),\n    },\n    interfaces= [node_interface]\n)\n\nqueryType = GraphQLObjectType(\n    name= 'Query',\n    fields= lambda: {\n        'node': node_field\n    }\n)\n```\n\nThis uses `node_definitions` to construct the `Node` interface and the `node`\nfield; it uses `from_global_id` to resolve the IDs passed in in the implementation\nof the function mapping ID to object. It then uses the `global_id_field` method to\ncreate the `id` field on `Faction`, which also ensures implements the\n`node_interface`. Finally, it adds the `node` field to the query type, using the\n`node_field` returned by `node_definitions`.\n\n### Mutations\n\nA helper function is provided for building mutations with\nsingle inputs and client mutation IDs.\n\n - `mutation_with_client_mutation_id` takes a name, input fields, output fields,\nand a mutation method to map from the input fields to the output fields,\nperforming the mutation along the way. It then creates and returns a field\nconfiguration that can be used as a top-level field on the mutation type.\n\nAn example usage of these methods from the [test schema](tests/starwars/schema.py):\n\n```python\nclass IntroduceShipMutation:\n    def __init__(self, shipId, factionId, clientMutationId=None):\n        self.shipId = shipId\n        self.factionId = factionId\n        self.clientMutationId = clientMutationId\n\ndef mutate_and_get_payload(_info, shipName, factionId):\n    newShip = createShip(shipName, factionId)\n    return IntroduceShipMutation(shipId=newShip.id, factionId=factionId)\n\nshipMutation = mutation_with_client_mutation_id(\n    'IntroduceShip',\n    input_fields={\n        'shipName': GraphQLInputField(\n            GraphQLNonNull(GraphQLString)\n        ),\n        'factionId': GraphQLInputField(\n            GraphQLNonNull(GraphQLID)\n        )\n    },\n    output_fields={\n        'ship': GraphQLField(\n            shipType,\n            resolve=lambda payload, _info: getShip(payload.shipId)\n        ),\n        'faction': GraphQLField(\n            factionType,\n            resolve=lambda payload, _info: getFaction(payload.factionId)\n        )\n    },\n    mutate_and_get_payload=mutate_and_get_payload\n)\n\nmutationType = GraphQLObjectType(\n    'Mutation',\n    fields=lambda: {\n        'introduceShip': shipMutation\n    }\n)\n```\n\nThis code creates a mutation named `IntroduceShip`, which takes a faction\nID and a ship name as input. It outputs the `Faction` and the `Ship` in\nquestion. `mutate_and_get_payload` then gets each input field as keyword\nparameter, performs the mutation by constructing the new ship, then returns\nan object that will be resolved by the output fields.\n\nOur mutation type then creates the `introduceShip` field using the return\nvalue of `mutation_with_client_mutation_id`.\n\n## Contributing\n\nAfter cloning this repository from GitHub,\nwe recommend using [Poetry](https://poetry.eustace.io/)\nto create a test environment. With poetry installed,\nyou do this with the following command:\n\n```sh\npoetry install\n```\n\nYou can then run the complete test suite like this:\n\n```sh\npoetry run pytest\n```\n\nIn order to run only a part of the tests with increased verbosity,\nyou can add pytest options, like this:\n\n```sh\npoetry run pytest tests/node -vv\n```\n\nIn order to check the code style with flake8, use this:\n\n```sh\npoetry run flake8\n```\n\nUse the `tox` command to run the test suite with different\nPython versions and perform all additional source code checks.\nYou can also restrict tox to an individual environment, like this:\n\n```sh\npoetry run tox -e py37\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/graphql-python/graphql-relay-py", "keywords": "graphql relay api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "graphql-relay", "package_url": "https://pypi.org/project/graphql-relay/", "platform": "", "project_url": "https://pypi.org/project/graphql-relay/", "project_urls": {"Homepage": "https://github.com/graphql-python/graphql-relay-py"}, "release_url": "https://pypi.org/project/graphql-relay/3.0.0/", "requires_dist": ["graphql-core (>=3.0.0a0)"], "requires_python": ">=3.6,<4", "summary": "Relay library for graphql-core-next", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Relay Library for GraphQL Python</h1>\n<p>GraphQL-relay-py is the <a href=\"https://relay.dev/\" rel=\"nofollow\">Relay</a> library for\n<a href=\"https://github.com/graphql-python/graphql-core\" rel=\"nofollow\">GraphQL-core</a>.</p>\n<p>It allows the easy creation of Relay-compliant servers using GraphQL-core.</p>\n<p>GraphQL-Relay-Py is a Python port of\n<a href=\"https://github.com/graphql/graphql-relay-js\" rel=\"nofollow\">graphql-relay-js</a>,\nwhile GraphQL-Core is a Python port of\n<a href=\"https://github.com/graphql/graphql-js\" rel=\"nofollow\">GraphQL.js</a>,\nthe reference implementation of GraphQL for JavaScript.</p>\n<p>Since version 3, GraphQL-Relay-Py and GraphQL-Core support Python 3.6 and above only.\nFor older versions of Python, you can use version 2 of these libraries.</p>\n<p><a href=\"https://badge.fury.io/py/graphql-relay\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b8eb5f60d031a5f8f7b4734b1ec1321ed655b44/68747470733a2f2f62616467652e667572792e696f2f70792f6772617068716c2d72656c61792e737667\"></a>\n<a href=\"https://travis-ci.org/graphql-python/graphql-relay-py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9df74f84888ebd589b3eb2b042f345aca796c77/68747470733a2f2f7472617669732d63692e6f72672f6772617068716c2d707974686f6e2f6772617068716c2d72656c61792d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/graphql-python/graphql-relay-py?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b314a4edd4c14e0b55ce07e334e08ab0e2eed08/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6772617068716c2d707974686f6e2f6772617068716c2d72656c61792d70792f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a></p>\n<h2>Getting Started</h2>\n<p>A basic understanding of GraphQL and of the GraphQL Python implementation is needed\nto provide context for this library.</p>\n<p>An overview of GraphQL in general is available in the\n<a href=\"https://github.com/graphql-python/graphql-core/blob/master/README.md\" rel=\"nofollow\">README</a> for the\n<a href=\"https://github.com/graphql-python/graphql-core\" rel=\"nofollow\">Specification for GraphQL</a>.</p>\n<p>This library is designed to work with the\nthe <a href=\"https://github.com/graphql-python/graphql-core\" rel=\"nofollow\">GraphQL-Core</a>\nPython reference implementation of a GraphQL server.</p>\n<p>An overview of the functionality that a Relay-compliant GraphQL server should provide\nis in the <a href=\"https://facebook.github.io/relay/docs/graphql-relay-specification.html\" rel=\"nofollow\">GraphQL Relay Specification</a>\non the <a href=\"https://facebook.github.io/relay/\" rel=\"nofollow\">Relay website</a>.\nThat overview describes a simple set of examples that exist\nas <a href=\"tests\" rel=\"nofollow\">tests</a> in this repository.\nA good way to get started with this repository is to walk through that documentation\nand the corresponding tests in this library together.</p>\n<h2>Using Relay Library for GraphQL Python (graphql-core-next)</h2>\n<p>Install Relay Library for GraphQL Python</p>\n<pre>pip install graphql-core-next\npip install graphql-relay\n</pre>\n<p>When building a schema for <a href=\"https://github.com/graphql-python/graphql-core\" rel=\"nofollow\">GraphQL</a>,\nthe provided library functions can be used to simplify the creation of Relay\npatterns.</p>\n<h3>Connections</h3>\n<p>Helper functions are provided for both building the GraphQL types\nfor connections and for implementing the <code>resolver</code> method for fields\nreturning those types.</p>\n<ul>\n<li>\n<p><code>connection_args</code> returns the arguments that fields should provide when\nthey return a connection type.</p>\n</li>\n<li>\n<p><code>connection_definitions</code> returns a <code>connection_type</code> and its associated\n<code>edgeType</code>, given a name and a node type.</p>\n</li>\n<li>\n<p><code>connection_from_array</code> is a helper method that takes an array and the\narguments from <code>connection_args</code>, does pagination and filtering, and returns\nan object in the shape expected by a <code>connection_type</code>'s <code>resolver</code> function.</p>\n</li>\n<li>\n<p><code>cursor_for_object_in_connection</code> is a helper method that takes an array and a\nmember object, and returns a cursor for use in the mutation payload.</p>\n</li>\n</ul>\n<p>An example usage of these methods from the <a href=\"tests/starwars/schema.py\" rel=\"nofollow\">test schema</a>:</p>\n<pre><span class=\"n\">ship_edge</span><span class=\"p\">,</span> <span class=\"n\">ship_connection</span> <span class=\"o\">=</span> <span class=\"n\">connection_definitions</span><span class=\"p\">(</span><span class=\"s1\">'Ship'</span><span class=\"p\">,</span> <span class=\"n\">shipType</span><span class=\"p\">)</span>\n\n<span class=\"n\">factionType</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLObjectType</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Faction'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'A faction in the Star Wars saga'</span><span class=\"p\">,</span>\n    <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">global_id_field</span><span class=\"p\">(</span><span class=\"s1\">'Faction'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">GraphQLField</span><span class=\"p\">(</span>\n            <span class=\"n\">GraphQLString</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'The name of the faction.'</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">'ships'</span><span class=\"p\">:</span> <span class=\"n\">GraphQLField</span><span class=\"p\">(</span>\n            <span class=\"n\">ship_connection</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'The ships used by the faction.'</span><span class=\"p\">,</span>\n            <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">connection_args</span><span class=\"p\">,</span>\n            <span class=\"n\">resolve</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">faction</span><span class=\"p\">,</span> <span class=\"n\">_info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">connection_from_array</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">getShip</span><span class=\"p\">(</span><span class=\"n\">ship</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">ship</span> <span class=\"ow\">in</span> <span class=\"n\">faction</span><span class=\"o\">.</span><span class=\"n\">ships</span><span class=\"p\">],</span> <span class=\"n\">args</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">interfaces</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">node_interface</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This shows adding a <code>ships</code> field to the <code>Faction</code> object that is a connection.\nIt uses <code>connection_definitions('Ship', shipType)</code> to create the connection\ntype, adds <code>connection_args</code> as arguments on this function, and then implements\nthe resolver function by passing the array of ships and the arguments to\n<code>connection_from_array</code>.</p>\n<h3>Object Identification</h3>\n<p>Helper functions are provided for both building the GraphQL types\nfor nodes and for implementing global IDs around local IDs.</p>\n<ul>\n<li><code>node_definitions</code> returns the <code>Node</code> interface that objects can implement,\nand returns the <code>node</code> root field to include on the query type.\nTo implement this, it takes a function to resolve an ID to an object,\nand to determine the type of a given object.</li>\n<li><code>to_global_id</code> takes a type name and an ID specific to that type name,\nand returns a \"global ID\" that is unique among all types.</li>\n<li><code>from_global_id</code> takes the \"global ID\" created by <code>to_global_id</code>, and\nreturns the type name and ID used to create it.</li>\n<li><code>global_id_field</code> creates the configuration for an <code>id</code> field on a node.</li>\n<li><code>plural_identifying_root_field</code> creates a field that accepts a list of\nnon-ID identifiers (like a username) and maps then to their corresponding\nobjects.</li>\n</ul>\n<p>An example usage of these methods from the <a href=\"tests/starwars/schema.py\" rel=\"nofollow\">test schema</a>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_node</span><span class=\"p\">(</span><span class=\"n\">global_id</span><span class=\"p\">,</span> <span class=\"n\">_info</span><span class=\"p\">):</span>\n    <span class=\"n\">type_</span><span class=\"p\">,</span> <span class=\"n\">id_</span> <span class=\"o\">=</span> <span class=\"n\">from_global_id</span><span class=\"p\">(</span><span class=\"n\">global_id</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">type_</span> <span class=\"o\">==</span> <span class=\"s1\">'Faction'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">getFaction</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">type_</span> <span class=\"o\">==</span> <span class=\"s1\">'Ship'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">getShip</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_node_type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">_info</span><span class=\"p\">,</span> <span class=\"n\">_type</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">Faction</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">factionType</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">shipType</span>\n\n<span class=\"n\">node_interface</span><span class=\"p\">,</span> <span class=\"n\">node_field</span> <span class=\"o\">=</span> <span class=\"n\">node_definitions</span><span class=\"p\">(</span><span class=\"n\">get_node</span><span class=\"p\">,</span> <span class=\"n\">get_node_type</span><span class=\"p\">)</span>\n\n<span class=\"n\">factionType</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLObjectType</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span> <span class=\"s1\">'Faction'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span> <span class=\"s1\">'A faction in the Star Wars saga'</span><span class=\"p\">,</span>\n    <span class=\"n\">fields</span><span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">global_id_field</span><span class=\"p\">(</span><span class=\"s1\">'Faction'</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">interfaces</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">node_interface</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">queryType</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLObjectType</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span> <span class=\"s1\">'Query'</span><span class=\"p\">,</span>\n    <span class=\"n\">fields</span><span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'node'</span><span class=\"p\">:</span> <span class=\"n\">node_field</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This uses <code>node_definitions</code> to construct the <code>Node</code> interface and the <code>node</code>\nfield; it uses <code>from_global_id</code> to resolve the IDs passed in in the implementation\nof the function mapping ID to object. It then uses the <code>global_id_field</code> method to\ncreate the <code>id</code> field on <code>Faction</code>, which also ensures implements the\n<code>node_interface</code>. Finally, it adds the <code>node</code> field to the query type, using the\n<code>node_field</code> returned by <code>node_definitions</code>.</p>\n<h3>Mutations</h3>\n<p>A helper function is provided for building mutations with\nsingle inputs and client mutation IDs.</p>\n<ul>\n<li><code>mutation_with_client_mutation_id</code> takes a name, input fields, output fields,\nand a mutation method to map from the input fields to the output fields,\nperforming the mutation along the way. It then creates and returns a field\nconfiguration that can be used as a top-level field on the mutation type.</li>\n</ul>\n<p>An example usage of these methods from the <a href=\"tests/starwars/schema.py\" rel=\"nofollow\">test schema</a>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">IntroduceShipMutation</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">shipId</span><span class=\"p\">,</span> <span class=\"n\">factionId</span><span class=\"p\">,</span> <span class=\"n\">clientMutationId</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shipId</span> <span class=\"o\">=</span> <span class=\"n\">shipId</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">factionId</span> <span class=\"o\">=</span> <span class=\"n\">factionId</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clientMutationId</span> <span class=\"o\">=</span> <span class=\"n\">clientMutationId</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mutate_and_get_payload</span><span class=\"p\">(</span><span class=\"n\">_info</span><span class=\"p\">,</span> <span class=\"n\">shipName</span><span class=\"p\">,</span> <span class=\"n\">factionId</span><span class=\"p\">):</span>\n    <span class=\"n\">newShip</span> <span class=\"o\">=</span> <span class=\"n\">createShip</span><span class=\"p\">(</span><span class=\"n\">shipName</span><span class=\"p\">,</span> <span class=\"n\">factionId</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">IntroduceShipMutation</span><span class=\"p\">(</span><span class=\"n\">shipId</span><span class=\"o\">=</span><span class=\"n\">newShip</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">factionId</span><span class=\"o\">=</span><span class=\"n\">factionId</span><span class=\"p\">)</span>\n\n<span class=\"n\">shipMutation</span> <span class=\"o\">=</span> <span class=\"n\">mutation_with_client_mutation_id</span><span class=\"p\">(</span>\n    <span class=\"s1\">'IntroduceShip'</span><span class=\"p\">,</span>\n    <span class=\"n\">input_fields</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'shipName'</span><span class=\"p\">:</span> <span class=\"n\">GraphQLInputField</span><span class=\"p\">(</span>\n            <span class=\"n\">GraphQLNonNull</span><span class=\"p\">(</span><span class=\"n\">GraphQLString</span><span class=\"p\">)</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">'factionId'</span><span class=\"p\">:</span> <span class=\"n\">GraphQLInputField</span><span class=\"p\">(</span>\n            <span class=\"n\">GraphQLNonNull</span><span class=\"p\">(</span><span class=\"n\">GraphQLID</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">output_fields</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'ship'</span><span class=\"p\">:</span> <span class=\"n\">GraphQLField</span><span class=\"p\">(</span>\n            <span class=\"n\">shipType</span><span class=\"p\">,</span>\n            <span class=\"n\">resolve</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">_info</span><span class=\"p\">:</span> <span class=\"n\">getShip</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">shipId</span><span class=\"p\">)</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">'faction'</span><span class=\"p\">:</span> <span class=\"n\">GraphQLField</span><span class=\"p\">(</span>\n            <span class=\"n\">factionType</span><span class=\"p\">,</span>\n            <span class=\"n\">resolve</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">_info</span><span class=\"p\">:</span> <span class=\"n\">getFaction</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">factionId</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">mutate_and_get_payload</span><span class=\"o\">=</span><span class=\"n\">mutate_and_get_payload</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">mutationType</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLObjectType</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Mutation'</span><span class=\"p\">,</span>\n    <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'introduceShip'</span><span class=\"p\">:</span> <span class=\"n\">shipMutation</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This code creates a mutation named <code>IntroduceShip</code>, which takes a faction\nID and a ship name as input. It outputs the <code>Faction</code> and the <code>Ship</code> in\nquestion. <code>mutate_and_get_payload</code> then gets each input field as keyword\nparameter, performs the mutation by constructing the new ship, then returns\nan object that will be resolved by the output fields.</p>\n<p>Our mutation type then creates the <code>introduceShip</code> field using the return\nvalue of <code>mutation_with_client_mutation_id</code>.</p>\n<h2>Contributing</h2>\n<p>After cloning this repository from GitHub,\nwe recommend using <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">Poetry</a>\nto create a test environment. With poetry installed,\nyou do this with the following command:</p>\n<pre>poetry install\n</pre>\n<p>You can then run the complete test suite like this:</p>\n<pre>poetry run pytest\n</pre>\n<p>In order to run only a part of the tests with increased verbosity,\nyou can add pytest options, like this:</p>\n<pre>poetry run pytest tests/node -vv\n</pre>\n<p>In order to check the code style with flake8, use this:</p>\n<pre>poetry run flake8\n</pre>\n<p>Use the <code>tox</code> command to run the test suite with different\nPython versions and perform all additional source code checks.\nYou can also restrict tox to an individual environment, like this:</p>\n<pre>poetry run tox -e py37\n</pre>\n\n          </div>"}, "last_serial": 6375998, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8334fb7ddba15a5547c37be45fb35dfa", "sha256": "c68428dc3d0771b105d5b7fc30dcf865db27184712075889025ea5d52f699901"}, "downloads": -1, "filename": "graphql-relay-0.1.tar.gz", "has_sig": false, "md5_digest": "8334fb7ddba15a5547c37be45fb35dfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5351, "upload_time": "2015-09-17T17:23:28", "upload_time_iso_8601": "2015-09-17T17:23:28.763274Z", "url": "https://files.pythonhosted.org/packages/ed/9c/c5f6625b9dcfc1cfc4b21158f77625106618b1926dab1627d862eddcecaf/graphql-relay-0.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5c1459172777dd041241710859692c11", "sha256": "e449b54ef51453bde2ed5f26090f0e93c30d6d03b0ae17a18d77d6a15058c76c"}, "downloads": -1, "filename": "graphql-relay-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5c1459172777dd041241710859692c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9007, "upload_time": "2015-09-23T04:19:01", "upload_time_iso_8601": "2015-09-23T04:19:01.693072Z", "url": "https://files.pythonhosted.org/packages/7b/de/853ccfd8171befbb177cc0442a7b1834a8ecd7959fb4ae8716f552c2c8e1/graphql-relay-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "dec4ebb849daf476a17ead5e17f808c9", "sha256": "678af38093f4153b430c90fc966d578b7d75e10000303057b131d414a14fb6e7"}, "downloads": -1, "filename": "graphql-relay-0.1.3.tar.gz", "has_sig": false, "md5_digest": "dec4ebb849daf476a17ead5e17f808c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9022, "upload_time": "2015-10-07T05:27:26", "upload_time_iso_8601": "2015-10-07T05:27:26.593001Z", "url": "https://files.pythonhosted.org/packages/cb/3a/5798a3d037ec452cf64cd57b00e8277ed17613e468dd12d051e4245be55a/graphql-relay-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "0cf996fb7beff0c482b50d351d4b2c3d", "sha256": "3c0ec743abd1ba75bcd14403b481f98683eacdbf4bde703ac23244d90317ffe3"}, "downloads": -1, "filename": "graphql-relay-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0cf996fb7beff0c482b50d351d4b2c3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9017, "upload_time": "2015-10-08T04:28:39", "upload_time_iso_8601": "2015-10-08T04:28:39.029853Z", "url": "https://files.pythonhosted.org/packages/c2/1f/4d56b6ba6bfc33cdf27b746edde62451eb785f273ad54192beb4f0cacb3c/graphql-relay-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d377e8eb412336b53baec32d98711ab4", "sha256": "5595ff87db60a89d0d4628d9f2f406682ffb157ea0834f399800f125e39bbccc"}, "downloads": -1, "filename": "graphql-relay-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d377e8eb412336b53baec32d98711ab4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9054, "upload_time": "2015-10-10T07:07:48", "upload_time_iso_8601": "2015-10-10T07:07:48.512529Z", "url": "https://files.pythonhosted.org/packages/bf/d4/9b003332ab249075f704d6e1dca39b9eb714636b83a5d26439b4cd339769/graphql-relay-0.2.0.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "79d32339e751025c0b2c12faa4d4b8b6", "sha256": "78619da97851ded699a3bb46c4118780daa87ef328c3296364c1acc16744881d"}, "downloads": -1, "filename": "graphql-relay-0.3.3.tar.gz", "has_sig": false, "md5_digest": "79d32339e751025c0b2c12faa4d4b8b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9175, "upload_time": "2015-10-21T04:30:48", "upload_time_iso_8601": "2015-10-21T04:30:48.701403Z", "url": "https://files.pythonhosted.org/packages/71/d5/a1251273fe9ffae5b7c4b747905995edf76c122dfa90bfef2192980ff96e/graphql-relay-0.3.3.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "782bcbe824c119d7ebee479d5d0da311", "sha256": "ad48eee194038dcf6e4fabca0374bab123017d3820da8c41f5fd82e61fb08825"}, "downloads": -1, "filename": "graphql-relay-0.4.1.tar.gz", "has_sig": false, "md5_digest": "782bcbe824c119d7ebee479d5d0da311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9371, "upload_time": "2016-05-12T07:25:03", "upload_time_iso_8601": "2016-05-12T07:25:03.153587Z", "url": "https://files.pythonhosted.org/packages/31/5e/38e4098b022041d6bc2c9c779d841e8677f957a64735de0d10a092750962/graphql-relay-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "7bf4f2fdad2d941a3d189941ec0867c1", "sha256": "fca2b946c93a1ba1477b3ca261fbef41abd5a257b1ea49d6d8a3f5a495b2792f"}, "downloads": -1, "filename": "graphql-relay-0.4.2.tar.gz", "has_sig": false, "md5_digest": "7bf4f2fdad2d941a3d189941ec0867c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9383, "upload_time": "2016-05-19T05:10:50", "upload_time_iso_8601": "2016-05-19T05:10:50.914614Z", "url": "https://files.pythonhosted.org/packages/02/96/3ffeeeccb60c2208432b078194a5ed0fc9f11dcac45d85d8b23da9c4d9af/graphql-relay-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "e1185297e1f4bbd7cdb1d7313e128e2d", "sha256": "dbc5aedd1a1413ecc3c562b781c46fa7d7d91fb28343844097c898a8d78c74f4"}, "downloads": -1, "filename": "graphql-relay-0.4.3.tar.gz", "has_sig": false, "md5_digest": "e1185297e1f4bbd7cdb1d7313e128e2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9412, "upload_time": "2016-06-15T06:56:24", "upload_time_iso_8601": "2016-06-15T06:56:24.509023Z", "url": "https://files.pythonhosted.org/packages/c8/9a/9f79f262a14bd49549ffe71dd27a3037649161faac276b77166adcc7ddc5/graphql-relay-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "62b57f20a7b62a2b7cc77cef68d36dec", "sha256": "b12f37967d118f861d016650c9838bd38cbf9c3b2c882d1e6b5276a8bd4a9913"}, "downloads": -1, "filename": "graphql-relay-0.4.4.tar.gz", "has_sig": false, "md5_digest": "62b57f20a7b62a2b7cc77cef68d36dec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9434, "upload_time": "2016-06-18T19:44:11", "upload_time_iso_8601": "2016-06-18T19:44:11.815176Z", "url": "https://files.pythonhosted.org/packages/cf/dc/684ded66cab738f54907d3adc21ea8cc4bf395802c950e2709e36fc43a99/graphql-relay-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "1d20e070f039229063c948ef9d8889a6", "sha256": "2716b7245d97091af21abf096fabafac576905096d21ba7118fba722596f65db"}, "downloads": -1, "filename": "graphql-relay-0.4.5.tar.gz", "has_sig": false, "md5_digest": "1d20e070f039229063c948ef9d8889a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9422, "upload_time": "2016-11-23T17:43:40", "upload_time_iso_8601": "2016-11-23T17:43:40.464190Z", "url": "https://files.pythonhosted.org/packages/5e/b0/b91fadc180544fc9e3c156d7049561fd5f1e2211d26fd29033548fd50934/graphql-relay-0.4.5.tar.gz", "yanked": false}], "0.4b1": [{"comment_text": "", "digests": {"md5": "fe725e899d5926982a550cb4e1d85efc", "sha256": "f7ee771aa9dd4ce80f605a7c80e354b2c3ac2ba0ad3cebe1460204b9dc704e5a"}, "downloads": -1, "filename": "graphql-relay-0.4b1.tar.gz", "has_sig": false, "md5_digest": "fe725e899d5926982a550cb4e1d85efc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9364, "upload_time": "2016-05-12T05:36:26", "upload_time_iso_8601": "2016-05-12T05:36:26.093380Z", "url": "https://files.pythonhosted.org/packages/1c/ea/79682a9f969e8d320665623ccc19d48aa6f1e290038f112b3c28726f7cf8/graphql-relay-0.4b1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "3a9d4b762ea7c2af6c2a8f75267a1007", "sha256": "67b35f036325b625c717b24930bfa87229181e5cdbf4b07713b845dacb8fed14"}, "downloads": -1, "filename": "graphql_relay-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a9d4b762ea7c2af6c2a8f75267a1007", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19052, "upload_time": "2019-12-30T14:42:43", "upload_time_iso_8601": "2019-12-30T14:42:43.540651Z", "url": "https://files.pythonhosted.org/packages/b9/fc/026a69a0b20d9e0a06f6141d77cd1b5bee316b18a7878d1914c7bfdaa36f/graphql_relay-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e332170cfc7b56124d6b9e449c766706", "sha256": "1c9bce36612d26ab08dd25d45b192722a9c7b6af3cef7ff83a3f087540ca2216"}, "downloads": -1, "filename": "graphql-relay-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e332170cfc7b56124d6b9e449c766706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12750, "upload_time": "2019-12-30T14:42:44", "upload_time_iso_8601": "2019-12-30T14:42:44.959686Z", "url": "https://files.pythonhosted.org/packages/76/3a/e533bc746e91a04cb4356feca08b7db87d974f5c2e140251828be0de6a93/graphql-relay-0.5.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "55c988f2b4235e8e8a81a03eb3e00acf", "sha256": "0e94201af4089e1f81f07d7bd8f84799768e39d70fa1ea16d1df505b46cc6335"}, "downloads": -1, "filename": "graphql_relay-2.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "55c988f2b4235e8e8a81a03eb3e00acf", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19690, "upload_time": "2019-07-15T19:00:17", "upload_time_iso_8601": "2019-07-15T19:00:17.165064Z", "url": "https://files.pythonhosted.org/packages/38/c3/b8e7ceb54d63c908a3176fdab6aec01fecfbac3cd0cf96f825d1a46d5b14/graphql_relay-2.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e39f5082051a5ca36ba2cf938b6a75d5", "sha256": "75aa0758971e252964cb94068a4decd472d2a8295229f02189e3cbca1f10dbb5"}, "downloads": -1, "filename": "graphql_relay-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e39f5082051a5ca36ba2cf938b6a75d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20513, "upload_time": "2019-07-14T23:47:46", "upload_time_iso_8601": "2019-07-14T23:47:46.901965Z", "url": "https://files.pythonhosted.org/packages/85/52/0242f2d01a3b925bc200928a2a88925b915b88efcb31c67e966991aa4dee/graphql_relay-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6729992ee82e44f53813ea5a9e417e40", "sha256": "7fa74661246e826ef939ee92e768f698df167a7617361ab399901eaebf80dce6"}, "downloads": -1, "filename": "graphql-relay-2.0.0.tar.gz", "has_sig": false, "md5_digest": "6729992ee82e44f53813ea5a9e417e40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12552, "upload_time": "2019-07-15T19:30:46", "upload_time_iso_8601": "2019-07-15T19:30:46.028618Z", "url": "https://files.pythonhosted.org/packages/a0/83/bea0cd12b51e1459d6702b0975d2f42ae4607021f22ec90c50b03c397fcc/graphql-relay-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "9bd62d95d203a3404829ddce59742c5c", "sha256": "ac514cb86db9a43014d7e73511d521137ac12cf0101b2eaa5f0a3da2e10d913d"}, "downloads": -1, "filename": "graphql_relay-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9bd62d95d203a3404829ddce59742c5c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20518, "upload_time": "2019-12-06T22:30:11", "upload_time_iso_8601": "2019-12-06T22:30:11.610441Z", "url": "https://files.pythonhosted.org/packages/94/48/6022ea2e89cb936c3b933a0409c6e29bf8a68c050fe87d97f98aff6e5e9e/graphql_relay-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "228ca4bb1c9c8ed90e222e2dd7cabe6d", "sha256": "870b6b5304123a38a0b215a79eace021acce5a466bf40cd39fa18cb8528afabb"}, "downloads": -1, "filename": "graphql-relay-2.0.1.tar.gz", "has_sig": false, "md5_digest": "228ca4bb1c9c8ed90e222e2dd7cabe6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21052, "upload_time": "2019-12-06T22:30:12", "upload_time_iso_8601": "2019-12-06T22:30:12.974989Z", "url": "https://files.pythonhosted.org/packages/16/59/afbf1ce02631910ff0be06e5e057cc9e2806192d9b9c8d6671ff39e4abe2/graphql-relay-2.0.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "beb8a6c3e39fd97022d21fc5a5476073", "sha256": "b05ca0547557874f3bb1f34e4a6dce20bc60359fe6e73daaa63bb90df85f7ba9"}, "downloads": -1, "filename": "graphql_relay-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "beb8a6c3e39fd97022d21fc5a5476073", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 15750, "upload_time": "2019-12-30T16:51:54", "upload_time_iso_8601": "2019-12-30T16:51:54.069184Z", "url": "https://files.pythonhosted.org/packages/45/94/aa6ca63f7218c344879ba50a21d839efe732cf30c2cd3412f933edb25f48/graphql_relay-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78da7ebe2ee1b10b97520003593c7d83", "sha256": "ad3f69a8b360c310c0c5611894f1e3fd5c6a5427b84f0f2cf5aee7a588bb5556"}, "downloads": -1, "filename": "graphql-relay-3.0.0.tar.gz", "has_sig": false, "md5_digest": "78da7ebe2ee1b10b97520003593c7d83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 41928, "upload_time": "2019-12-30T16:51:55", "upload_time_iso_8601": "2019-12-30T16:51:55.754070Z", "url": "https://files.pythonhosted.org/packages/84/52/bc59b382e7090bd704d217a5e0a3ab1dc82e0ac3230f8089f2bad0671b97/graphql-relay-3.0.0.tar.gz", "yanked": false}], "3.0.0a0": [{"comment_text": "", "digests": {"md5": "edc35ab9ce1517854fd024972a6b328c", "sha256": "8cd27209ed22e29dba7ac42dfbe2ee6c9d71f6826333d87e3d22fd547e72667f"}, "downloads": -1, "filename": "graphql-relay-3.0.0a0.tar.gz", "has_sig": false, "md5_digest": "edc35ab9ce1517854fd024972a6b328c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 37591, "upload_time": "2019-07-28T18:13:38", "upload_time_iso_8601": "2019-07-28T18:13:38.565148Z", "url": "https://files.pythonhosted.org/packages/19/84/5ce0b983d5c731f5da90494fd9acd4b31d65628d9d07421010f371cfaef5/graphql-relay-3.0.0a0.tar.gz", "yanked": false}], "3.0.0a1": [{"comment_text": "", "digests": {"md5": "b89a1e19e262d441ed020a020c1b2283", "sha256": "0f6aee750bf64f8cf6f83f76428d78426f12f7666ee7ba8e6b12ff7b8422cd39"}, "downloads": -1, "filename": "graphql-relay-3.0.0a1.tar.gz", "has_sig": false, "md5_digest": "b89a1e19e262d441ed020a020c1b2283", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 38641, "upload_time": "2019-08-01T16:15:52", "upload_time_iso_8601": "2019-08-01T16:15:52.170872Z", "url": "https://files.pythonhosted.org/packages/b3/e9/f746793c405695c6c3d2fe023dd19738d1eef20ecdd50ebb9e240b2f6cfc/graphql-relay-3.0.0a1.tar.gz", "yanked": false}], "3.0.0a2": [{"comment_text": "", "digests": {"md5": "47dd97f37fa0c962e65034a7ddf4230b", "sha256": "e4cd7a23266d94973790cd9d0f454e25f30e6d7e3d1ad7b384e404f0305ab42c"}, "downloads": -1, "filename": "graphql_relay-3.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "47dd97f37fa0c962e65034a7ddf4230b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 15769, "upload_time": "2019-12-29T23:44:42", "upload_time_iso_8601": "2019-12-29T23:44:42.619037Z", "url": "https://files.pythonhosted.org/packages/c6/39/0d880d1af587d0663edaa1514da7dcdde6bd0ddf8333bd132b2518f5919e/graphql_relay-3.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caecd55c1c6e3c2791ffb173a94f6375", "sha256": "b34ae95b99f25a53f94add80cae8c53d9b7468fa5aa6036138f4097a53917c6f"}, "downloads": -1, "filename": "graphql-relay-3.0.0a2.tar.gz", "has_sig": false, "md5_digest": "caecd55c1c6e3c2791ffb173a94f6375", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 41931, "upload_time": "2019-12-29T23:44:44", "upload_time_iso_8601": "2019-12-29T23:44:44.066789Z", "url": "https://files.pythonhosted.org/packages/7c/6f/3832097b65eefedafdd6c5137c2c09c4fcd13ed340447802b85697b44d90/graphql-relay-3.0.0a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "beb8a6c3e39fd97022d21fc5a5476073", "sha256": "b05ca0547557874f3bb1f34e4a6dce20bc60359fe6e73daaa63bb90df85f7ba9"}, "downloads": -1, "filename": "graphql_relay-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "beb8a6c3e39fd97022d21fc5a5476073", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 15750, "upload_time": "2019-12-30T16:51:54", "upload_time_iso_8601": "2019-12-30T16:51:54.069184Z", "url": "https://files.pythonhosted.org/packages/45/94/aa6ca63f7218c344879ba50a21d839efe732cf30c2cd3412f933edb25f48/graphql_relay-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78da7ebe2ee1b10b97520003593c7d83", "sha256": "ad3f69a8b360c310c0c5611894f1e3fd5c6a5427b84f0f2cf5aee7a588bb5556"}, "downloads": -1, "filename": "graphql-relay-3.0.0.tar.gz", "has_sig": false, "md5_digest": "78da7ebe2ee1b10b97520003593c7d83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 41928, "upload_time": "2019-12-30T16:51:55", "upload_time_iso_8601": "2019-12-30T16:51:55.754070Z", "url": "https://files.pythonhosted.org/packages/84/52/bc59b382e7090bd704d217a5e0a3ab1dc82e0ac3230f8089f2bad0671b97/graphql-relay-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:32 2020"}