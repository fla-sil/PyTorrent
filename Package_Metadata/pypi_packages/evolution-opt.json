{"info": {"author": "Eliot Kalfon", "author_email": "eliott.kalfon@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![](https://github.com/eliottkalfon/evolution_opt/blob/master/resources/eo_logo.png)\n\n# Description\n\nThis package is a Python aims at providing a range of nature-inspired optimisation algorithms. This first version includes an implementation of genetic algorithm with \"regularized evolution\".\n\n# Installation\n\nThis package can be installed with \"pip\" or by cloning this repository\n\n    $ pip install evolution_opt\n\n# Example Usage\n\n## 1) Define a function to be optimised\n\nThis function has to take a dictionary of parameter as argument:\n```python\ndef difficult_problem(param_dict):\n    result = param_dict['x']**2 + (param_dict['y']+1)**2\n    if param_dict['luck'] == 'lucky':\n        pass\n    else:\n        result += 10\n    return result\n```\n  This function could be **any process** that takes parameters as input and outputs a scalar value.\n\n  It could evaluate a model's cross-validation score based on given hyperparameter values,\n  a profit/cost function, the efficiency of a resourcing plan... The possibilities are limitless.\n\n ## 2) Define a search space\n```python\nsearch_space = [\n    Integer(-100,100, 'x'),\n    Real(-100,100, 'y'),\n    Categorical(['lucky', 'unlucky'], 'luck')\n]\n```   \n  The search space can be composed of Integer, Real and Categorical variables.\n  Numeric parameters are initialised with a lower bound, upper bound and a parameter name.\n  Categorical parameters require a list of possible values and a parameter name.\n\n  ## 3) Run the evolutionary algorithm\n```python\nbest_params = optimise(difficult_problem,search_space,minimize=True, \n                           population_size=20,n_rounds=500)   \n\n# Prints:\n# Number of Iterations: 500\n# Best score: 0.00410559779230605\n# Best parameters: {'x': -0.0, 'y': -1.0640749388786759, 'luck': 'lucky'}\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eliottkalfon/evolution_opt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "evolution-opt", "package_url": "https://pypi.org/project/evolution-opt/", "platform": "", "project_url": "https://pypi.org/project/evolution-opt/", "project_urls": {"Homepage": "https://github.com/eliottkalfon/evolution_opt"}, "release_url": "https://pypi.org/project/evolution-opt/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Evolution inspired optimisation algorithms", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9ec5328193f86423eada023daed7cb68a0f05b6/68747470733a2f2f6769746875622e636f6d2f656c696f74746b616c666f6e2f65766f6c7574696f6e5f6f70742f626c6f622f6d61737465722f7265736f75726365732f656f5f6c6f676f2e706e67\"></p>\n<h1>Description</h1>\n<p>This package is a Python aims at providing a range of nature-inspired optimisation algorithms. This first version includes an implementation of genetic algorithm with \"regularized evolution\".</p>\n<h1>Installation</h1>\n<p>This package can be installed with \"pip\" or by cloning this repository</p>\n<pre><code>$ pip install evolution_opt\n</code></pre>\n<h1>Example Usage</h1>\n<h2>1) Define a function to be optimised</h2>\n<p>This function has to take a dictionary of parameter as argument:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">difficult_problem</span><span class=\"p\">(</span><span class=\"n\">param_dict</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">param_dict</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">param_dict</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n    <span class=\"k\">if</span> <span class=\"n\">param_dict</span><span class=\"p\">[</span><span class=\"s1\">'luck'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'lucky'</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<p>This function could be <strong>any process</strong> that takes parameters as input and outputs a scalar value.</p>\n<p>It could evaluate a model's cross-validation score based on given hyperparameter values,\na profit/cost function, the efficiency of a resourcing plan... The possibilities are limitless.</p>\n<h2>2) Define a search space</h2>\n<pre><span class=\"n\">search_space</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">),</span>\n    <span class=\"n\">Real</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">),</span>\n    <span class=\"n\">Categorical</span><span class=\"p\">([</span><span class=\"s1\">'lucky'</span><span class=\"p\">,</span> <span class=\"s1\">'unlucky'</span><span class=\"p\">],</span> <span class=\"s1\">'luck'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The search space can be composed of Integer, Real and Categorical variables.\nNumeric parameters are initialised with a lower bound, upper bound and a parameter name.\nCategorical parameters require a list of possible values and a parameter name.</p>\n<h2>3) Run the evolutionary algorithm</h2>\n<pre><span class=\"n\">best_params</span> <span class=\"o\">=</span> <span class=\"n\">optimise</span><span class=\"p\">(</span><span class=\"n\">difficult_problem</span><span class=\"p\">,</span><span class=\"n\">search_space</span><span class=\"p\">,</span><span class=\"n\">minimize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n                           <span class=\"n\">population_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"n\">n_rounds</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>   \n\n<span class=\"c1\"># Prints:</span>\n<span class=\"c1\"># Number of Iterations: 500</span>\n<span class=\"c1\"># Best score: 0.00410559779230605</span>\n<span class=\"c1\"># Best parameters: {'x': -0.0, 'y': -1.0640749388786759, 'luck': 'lucky'}</span>\n</pre>\n\n          </div>"}, "last_serial": 7104241, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "8350438ce7d9e02fb5b80b103133197e", "sha256": "56f0ef067d84be1be9339a961f3610a304a317ff5080c09ac01657b9ca252c05"}, "downloads": -1, "filename": "evolution_opt-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8350438ce7d9e02fb5b80b103133197e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9104, "upload_time": "2020-04-26T10:48:32", "upload_time_iso_8601": "2020-04-26T10:48:32.946250Z", "url": "https://files.pythonhosted.org/packages/79/4c/ca7bedb6a81584b4927e36e973dc4abe47ae43354e0f25d5fcc624c7b6c3/evolution_opt-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c06b39be0ea969bcf8e65de3facff42", "sha256": "52935891307280c61d85064debe6708e8f8b0208c8302dd30367c44f56d96389"}, "downloads": -1, "filename": "evolution_opt-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9c06b39be0ea969bcf8e65de3facff42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30128, "upload_time": "2020-04-26T10:48:33", "upload_time_iso_8601": "2020-04-26T10:48:33.886840Z", "url": "https://files.pythonhosted.org/packages/df/5d/f6850527f35d4406ba4ea6e561e036d2031a81dd0db7ebbefe1c3fc63c9f/evolution_opt-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8350438ce7d9e02fb5b80b103133197e", "sha256": "56f0ef067d84be1be9339a961f3610a304a317ff5080c09ac01657b9ca252c05"}, "downloads": -1, "filename": "evolution_opt-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8350438ce7d9e02fb5b80b103133197e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9104, "upload_time": "2020-04-26T10:48:32", "upload_time_iso_8601": "2020-04-26T10:48:32.946250Z", "url": "https://files.pythonhosted.org/packages/79/4c/ca7bedb6a81584b4927e36e973dc4abe47ae43354e0f25d5fcc624c7b6c3/evolution_opt-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c06b39be0ea969bcf8e65de3facff42", "sha256": "52935891307280c61d85064debe6708e8f8b0208c8302dd30367c44f56d96389"}, "downloads": -1, "filename": "evolution_opt-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9c06b39be0ea969bcf8e65de3facff42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30128, "upload_time": "2020-04-26T10:48:33", "upload_time_iso_8601": "2020-04-26T10:48:33.886840Z", "url": "https://files.pythonhosted.org/packages/df/5d/f6850527f35d4406ba4ea6e561e036d2031a81dd0db7ebbefe1c3fc63c9f/evolution_opt-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:05 2020"}