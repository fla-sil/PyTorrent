{"info": {"author": "Edward Anderson", "author_email": "edward.anderson@bfi.org.uk", "bugtrack_url": null, "classifiers": [], "description": "FFfilter\n========\n\nFilters media files by testing criteria against header metadata\nextracted by `ffprobe <https://ffmpeg.org/ffprobe.html>`__.\n\nInstall\n-------\n\n.. code:: bash\n\n    pip install fffilter\n\nDependencies\n------------\n\n-  **FFfilter** uses\n   `subprocess <https://docs.python.org/3/library/subprocess.html>`__ to\n   access the system installation of **ffprobe**.\n-  `colorama <https://pypi.python.org/pypi/colorama>`__ will be\n   automatically installed by **pip**.\n\nUse\n---\n\nCommand-line tool\n~~~~~~~~~~~~~~~~~\n\n``-s`` ``--show`` *[key]*\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**Returns a tab-separated list of all values of [key].**\n\n.. code:: bash\n\n    # Return the value(s) of display_aspect_ratio\n    fffilter /path/to/file --show display_aspect_ratio\n\n.. code:: bash\n\n    # Return a list of files, surfacing all possible values of given keys\n    # (note that '-' must be first argument when receiving piped input if using --show)\n    find . -name '*.mp4' | fffilter - --show codec_name codec_type display_aspect_ratio\n\n``-m`` ``--match`` *[key]* *[value]*\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**Lists files which match all criteria:**\n\n-  matching files are listed on ``stdout``\n-  non-matching files are listed on ``stderr``, printed over a red\n   background\n\nSimply pass key and value pairs to repeating occurrences of the\n``--match`` parameter.\n\n.. code:: bash\n\n    # Return absoulte path for file if its header declares 4:3 aspect\n    fffilter /path/to/file --match display_aspect_ratio 4:3\n\n.. code:: bash\n\n    # Filter a list of files for h.264-encoded full-HD mp4s\n    find . -name '*.mp4' | fffilter --match codec_name h264 --match height 1080 --match width 1920 -\n\nModule\n~~~~~~\n\n.. code:: python\n\n    from fffilter import fffilter\n\n    path = 'media/some_file.mp4'\n\n    # The show() method requires a path and a list of keys\n    d = fffilter.show(path, ['codec_type', 'display_aspect_ratio'])\n\n    # The match() method requires a path and either key=value pairs or a packed dictionary: **{'key':'value'}\n    m = fffilter.match(path, codec_type='video', display_aspect_ratio='16:9')\n\n    print(d)\n    print(m)\n\n::\n\n    {'display_aspect_ratio': [u'16:9'], 'codec_type': [u'audio', u'video']}\n    True\n\nYou can also call ``ffprobe(path)`` to access a dictionary of the\ncomplete headers:\n\n.. code:: bash\n\n    headers = fffilter.ffprobe(path)\n    print(headers)\n\n::\n\n    {u'streams': [{u'pix_fmt': u'yuv420p', u'sample_aspect_ratio': u'1:1', u'refs': 1, u'codec_type': u'video', u'coded_height': 720\n    ...\n\nDisclaimer\n----------\n\nThis Python Package is not affiliated with\n`FFmpeg <https://ffmpeg.org/>`__ or\n`FFprobe <https://ffmpeg.org/ffprobe.html>`__.\n\nCredits\n-------\n\n**FFfilter** was written by `Edward\nAnderson <https://twitter.com/anderson_edw>`__, British Film Institute.\n\nLicence\n-------\n\n`Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA\n4.0) <https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode>`__", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)", "maintainer": "", "maintainer_email": "", "name": "FFfilter", "package_url": "https://pypi.org/project/FFfilter/", "platform": "", "project_url": "https://pypi.org/project/FFfilter/", "project_urls": null, "release_url": "https://pypi.org/project/FFfilter/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Filters media files by testing criteria against header metadata extracted by ffprobe.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Filters media files by testing criteria against header metadata\nextracted by <a href=\"https://ffmpeg.org/ffprobe.html\" rel=\"nofollow\">ffprobe</a>.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install fffilter\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><strong>FFfilter</strong> uses\n<a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow\">subprocess</a> to\naccess the system installation of <strong>ffprobe</strong>.</li>\n<li><a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a> will be\nautomatically installed by <strong>pip</strong>.</li>\n</ul>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<div id=\"command-line-tool\">\n<h3>Command-line tool</h3>\n<div id=\"s-show-key\">\n<h4><tt><span class=\"pre\">-s</span></tt> <tt><span class=\"pre\">--show</span></tt> <em>[key]</em></h4>\n<p><strong>Returns a tab-separated list of all values of [key].</strong></p>\n<pre><span class=\"c1\"># Return the value(s) of display_aspect_ratio\n</span>fffilter /path/to/file --show display_aspect_ratio\n</pre>\n<pre><span class=\"c1\"># Return a list of files, surfacing all possible values of given keys\n# (note that '-' must be first argument when receiving piped input if using --show)\n</span>find . -name <span class=\"s1\">'*.mp4'</span> <span class=\"p\">|</span> fffilter - --show codec_name codec_type display_aspect_ratio\n</pre>\n</div>\n<div id=\"m-match-key-value\">\n<h4><tt><span class=\"pre\">-m</span></tt> <tt><span class=\"pre\">--match</span></tt> <em>[key]</em> <em>[value]</em></h4>\n<p><strong>Lists files which match all criteria:</strong></p>\n<ul>\n<li>matching files are listed on <tt>stdout</tt></li>\n<li>non-matching files are listed on <tt>stderr</tt>, printed over a red\nbackground</li>\n</ul>\n<p>Simply pass key and value pairs to repeating occurrences of the\n<tt><span class=\"pre\">--match</span></tt> parameter.</p>\n<pre><span class=\"c1\"># Return absoulte path for file if its header declares 4:3 aspect\n</span>fffilter /path/to/file --match display_aspect_ratio <span class=\"m\">4</span>:3\n</pre>\n<pre><span class=\"c1\"># Filter a list of files for h.264-encoded full-HD mp4s\n</span>find . -name <span class=\"s1\">'*.mp4'</span> <span class=\"p\">|</span> fffilter --match codec_name h264 --match height <span class=\"m\">1080</span> --match width <span class=\"m\">1920</span> -\n</pre>\n</div>\n</div>\n<div id=\"module\">\n<h3>Module</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fffilter</span> <span class=\"kn\">import</span> <span class=\"n\">fffilter</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'media/some_file.mp4'</span>\n\n<span class=\"c1\"># The show() method requires a path and a list of keys</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">fffilter</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'codec_type'</span><span class=\"p\">,</span> <span class=\"s1\">'display_aspect_ratio'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># The match() method requires a path and either key=value pairs or a packed dictionary: **{'key':'value'}</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">fffilter</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">codec_type</span><span class=\"o\">=</span><span class=\"s1\">'video'</span><span class=\"p\">,</span> <span class=\"n\">display_aspect_ratio</span><span class=\"o\">=</span><span class=\"s1\">'16:9'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n</pre>\n<pre>{'display_aspect_ratio': [u'16:9'], 'codec_type': [u'audio', u'video']}\nTrue\n</pre>\n<p>You can also call <tt>ffprobe(path)</tt> to access a dictionary of the\ncomplete headers:</p>\n<pre><span class=\"nv\">headers</span> <span class=\"o\">=</span> fffilter.ffprobe<span class=\"o\">(</span>path<span class=\"o\">)</span>\nprint<span class=\"o\">(</span>headers<span class=\"o\">)</span>\n</pre>\n<pre>{u'streams': [{u'pix_fmt': u'yuv420p', u'sample_aspect_ratio': u'1:1', u'refs': 1, u'codec_type': u'video', u'coded_height': 720\n...\n</pre>\n</div>\n</div>\n<div id=\"disclaimer\">\n<h2>Disclaimer</h2>\n<p>This Python Package is not affiliated with\n<a href=\"https://ffmpeg.org/\" rel=\"nofollow\">FFmpeg</a> or\n<a href=\"https://ffmpeg.org/ffprobe.html\" rel=\"nofollow\">FFprobe</a>.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p><strong>FFfilter</strong> was written by <a href=\"https://twitter.com/anderson_edw\" rel=\"nofollow\">Edward\nAnderson</a>, British Film Institute.</p>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode\" rel=\"nofollow\">Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA\n4.0)</a></p>\n</div>\n\n          </div>"}, "last_serial": 3004098, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "91829c4382f3d5c3353586fd873f8213", "sha256": "2473e5db9c78b0810b556735b338946b783ccc635202fb4a9ae7be6a74a1f5e4"}, "downloads": -1, "filename": "FFfilter-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "91829c4382f3d5c3353586fd873f8213", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6526, "upload_time": "2017-07-06T16:43:03", "upload_time_iso_8601": "2017-07-06T16:43:03.526544Z", "url": "https://files.pythonhosted.org/packages/86/6a/c0cd7266cd3109af49e0ff41d2868ecb833ea8db5722af132d137879286c/FFfilter-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f5e271f17c33dbb2daea0b0646df730", "sha256": "4ab2b549063effbc9c6b8bcf41918dcdc04926c5bd6349112e60c9528484fb8f"}, "downloads": -1, "filename": "FFfilter-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5f5e271f17c33dbb2daea0b0646df730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3704, "upload_time": "2017-07-06T16:43:06", "upload_time_iso_8601": "2017-07-06T16:43:06.018666Z", "url": "https://files.pythonhosted.org/packages/c1/cc/6e0ad0c8ed008229eb5daa542798a821cbd8aede243fa59a62ddd4f245c0/FFfilter-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "62b7eb84270395a26e4cfd56315a436e", "sha256": "3d254b603b66346a072a2123c0b9defc2dcfbe8e0fe1a70ac3138b7b7d776c69"}, "downloads": -1, "filename": "FFfilter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "62b7eb84270395a26e4cfd56315a436e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4083, "upload_time": "2017-07-06T17:01:39", "upload_time_iso_8601": "2017-07-06T17:01:39.232437Z", "url": "https://files.pythonhosted.org/packages/52/df/768dfddd07ce4471a2b93eceb22216b6248dafe8dbf9b026ba9d3cfa95a9/FFfilter-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d5a661461da9c77b108bd6f57b10c383", "sha256": "f00c4b9f3394497b091963d7092ed5669cc30ad8f41bd307ac94a38c7bebf44a"}, "downloads": -1, "filename": "FFfilter-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d5a661461da9c77b108bd6f57b10c383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4032, "upload_time": "2017-07-06T17:13:13", "upload_time_iso_8601": "2017-07-06T17:13:13.833585Z", "url": "https://files.pythonhosted.org/packages/62/e0/cdecb38eb6aa056a9fe32df1f632cfcb3ec85d9a375ef147bca49d1a459a/FFfilter-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5a661461da9c77b108bd6f57b10c383", "sha256": "f00c4b9f3394497b091963d7092ed5669cc30ad8f41bd307ac94a38c7bebf44a"}, "downloads": -1, "filename": "FFfilter-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d5a661461da9c77b108bd6f57b10c383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4032, "upload_time": "2017-07-06T17:13:13", "upload_time_iso_8601": "2017-07-06T17:13:13.833585Z", "url": "https://files.pythonhosted.org/packages/62/e0/cdecb38eb6aa056a9fe32df1f632cfcb3ec85d9a375ef147bca49d1a459a/FFfilter-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:49 2020"}